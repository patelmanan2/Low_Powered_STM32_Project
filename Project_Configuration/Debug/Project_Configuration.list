
Project_Configuration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008820  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  080088e0  080088e0  000188e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f4c  08008f4c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008f4c  08008f4c  00018f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f54  08008f54  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f54  08008f54  00018f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f58  08008f58  00018f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000080  08008fdc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08008fdc  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009b17  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002075  00000000  00000000  00029c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007a9  00000000  00000000  0002c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012d4a  00000000  00000000  0002ce59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f707  00000000  00000000  0003fba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000657fa  00000000  00000000  0004f2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cbc  00000000  00000000  000b4aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000b7760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080088c8 	.word	0x080088c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	080088c8 	.word	0x080088c8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f852 	bl	800030c <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__aeabi_d2uiz>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	2200      	movs	r2, #0
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <__aeabi_d2uiz+0x38>)
 80002d6:	0004      	movs	r4, r0
 80002d8:	000d      	movs	r5, r1
 80002da:	f000 ffb7 	bl	800124c <__aeabi_dcmpge>
 80002de:	2800      	cmp	r0, #0
 80002e0:	d104      	bne.n	80002ec <__aeabi_d2uiz+0x1c>
 80002e2:	0020      	movs	r0, r4
 80002e4:	0029      	movs	r1, r5
 80002e6:	f000 ff21 	bl	800112c <__aeabi_d2iz>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <__aeabi_d2uiz+0x38>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	0020      	movs	r0, r4
 80002f2:	0029      	movs	r1, r5
 80002f4:	f000 fb98 	bl	8000a28 <__aeabi_dsub>
 80002f8:	f000 ff18 	bl	800112c <__aeabi_d2iz>
 80002fc:	2380      	movs	r3, #128	; 0x80
 80002fe:	061b      	lsls	r3, r3, #24
 8000300:	469c      	mov	ip, r3
 8000302:	4460      	add	r0, ip
 8000304:	e7f1      	b.n	80002ea <__aeabi_d2uiz+0x1a>
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	41e00000 	.word	0x41e00000

0800030c <__udivmoddi4>:
 800030c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030e:	4657      	mov	r7, sl
 8000310:	464e      	mov	r6, r9
 8000312:	4645      	mov	r5, r8
 8000314:	46de      	mov	lr, fp
 8000316:	b5e0      	push	{r5, r6, r7, lr}
 8000318:	0004      	movs	r4, r0
 800031a:	000d      	movs	r5, r1
 800031c:	4692      	mov	sl, r2
 800031e:	4699      	mov	r9, r3
 8000320:	b083      	sub	sp, #12
 8000322:	428b      	cmp	r3, r1
 8000324:	d830      	bhi.n	8000388 <__udivmoddi4+0x7c>
 8000326:	d02d      	beq.n	8000384 <__udivmoddi4+0x78>
 8000328:	4649      	mov	r1, r9
 800032a:	4650      	mov	r0, sl
 800032c:	f000 ffb6 	bl	800129c <__clzdi2>
 8000330:	0029      	movs	r1, r5
 8000332:	0006      	movs	r6, r0
 8000334:	0020      	movs	r0, r4
 8000336:	f000 ffb1 	bl	800129c <__clzdi2>
 800033a:	1a33      	subs	r3, r6, r0
 800033c:	4698      	mov	r8, r3
 800033e:	3b20      	subs	r3, #32
 8000340:	d434      	bmi.n	80003ac <__udivmoddi4+0xa0>
 8000342:	469b      	mov	fp, r3
 8000344:	4653      	mov	r3, sl
 8000346:	465a      	mov	r2, fp
 8000348:	4093      	lsls	r3, r2
 800034a:	4642      	mov	r2, r8
 800034c:	001f      	movs	r7, r3
 800034e:	4653      	mov	r3, sl
 8000350:	4093      	lsls	r3, r2
 8000352:	001e      	movs	r6, r3
 8000354:	42af      	cmp	r7, r5
 8000356:	d83b      	bhi.n	80003d0 <__udivmoddi4+0xc4>
 8000358:	42af      	cmp	r7, r5
 800035a:	d100      	bne.n	800035e <__udivmoddi4+0x52>
 800035c:	e079      	b.n	8000452 <__udivmoddi4+0x146>
 800035e:	465b      	mov	r3, fp
 8000360:	1ba4      	subs	r4, r4, r6
 8000362:	41bd      	sbcs	r5, r7
 8000364:	2b00      	cmp	r3, #0
 8000366:	da00      	bge.n	800036a <__udivmoddi4+0x5e>
 8000368:	e076      	b.n	8000458 <__udivmoddi4+0x14c>
 800036a:	2200      	movs	r2, #0
 800036c:	2300      	movs	r3, #0
 800036e:	9200      	str	r2, [sp, #0]
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2301      	movs	r3, #1
 8000374:	465a      	mov	r2, fp
 8000376:	4093      	lsls	r3, r2
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	2301      	movs	r3, #1
 800037c:	4642      	mov	r2, r8
 800037e:	4093      	lsls	r3, r2
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	e029      	b.n	80003d8 <__udivmoddi4+0xcc>
 8000384:	4282      	cmp	r2, r0
 8000386:	d9cf      	bls.n	8000328 <__udivmoddi4+0x1c>
 8000388:	2200      	movs	r2, #0
 800038a:	2300      	movs	r3, #0
 800038c:	9200      	str	r2, [sp, #0]
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <__udivmoddi4+0x8e>
 8000396:	601c      	str	r4, [r3, #0]
 8000398:	605d      	str	r5, [r3, #4]
 800039a:	9800      	ldr	r0, [sp, #0]
 800039c:	9901      	ldr	r1, [sp, #4]
 800039e:	b003      	add	sp, #12
 80003a0:	bcf0      	pop	{r4, r5, r6, r7}
 80003a2:	46bb      	mov	fp, r7
 80003a4:	46b2      	mov	sl, r6
 80003a6:	46a9      	mov	r9, r5
 80003a8:	46a0      	mov	r8, r4
 80003aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ac:	4642      	mov	r2, r8
 80003ae:	469b      	mov	fp, r3
 80003b0:	2320      	movs	r3, #32
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	4652      	mov	r2, sl
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	4641      	mov	r1, r8
 80003ba:	0013      	movs	r3, r2
 80003bc:	464a      	mov	r2, r9
 80003be:	408a      	lsls	r2, r1
 80003c0:	0017      	movs	r7, r2
 80003c2:	4642      	mov	r2, r8
 80003c4:	431f      	orrs	r7, r3
 80003c6:	4653      	mov	r3, sl
 80003c8:	4093      	lsls	r3, r2
 80003ca:	001e      	movs	r6, r3
 80003cc:	42af      	cmp	r7, r5
 80003ce:	d9c3      	bls.n	8000358 <__udivmoddi4+0x4c>
 80003d0:	2200      	movs	r2, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	9200      	str	r2, [sp, #0]
 80003d6:	9301      	str	r3, [sp, #4]
 80003d8:	4643      	mov	r3, r8
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0d8      	beq.n	8000390 <__udivmoddi4+0x84>
 80003de:	07fb      	lsls	r3, r7, #31
 80003e0:	0872      	lsrs	r2, r6, #1
 80003e2:	431a      	orrs	r2, r3
 80003e4:	4646      	mov	r6, r8
 80003e6:	087b      	lsrs	r3, r7, #1
 80003e8:	e00e      	b.n	8000408 <__udivmoddi4+0xfc>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	d101      	bne.n	80003f2 <__udivmoddi4+0xe6>
 80003ee:	42a2      	cmp	r2, r4
 80003f0:	d80c      	bhi.n	800040c <__udivmoddi4+0x100>
 80003f2:	1aa4      	subs	r4, r4, r2
 80003f4:	419d      	sbcs	r5, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2100      	movs	r1, #0
 80003fe:	3e01      	subs	r6, #1
 8000400:	1824      	adds	r4, r4, r0
 8000402:	414d      	adcs	r5, r1
 8000404:	2e00      	cmp	r6, #0
 8000406:	d006      	beq.n	8000416 <__udivmoddi4+0x10a>
 8000408:	42ab      	cmp	r3, r5
 800040a:	d9ee      	bls.n	80003ea <__udivmoddi4+0xde>
 800040c:	3e01      	subs	r6, #1
 800040e:	1924      	adds	r4, r4, r4
 8000410:	416d      	adcs	r5, r5
 8000412:	2e00      	cmp	r6, #0
 8000414:	d1f8      	bne.n	8000408 <__udivmoddi4+0xfc>
 8000416:	9800      	ldr	r0, [sp, #0]
 8000418:	9901      	ldr	r1, [sp, #4]
 800041a:	465b      	mov	r3, fp
 800041c:	1900      	adds	r0, r0, r4
 800041e:	4169      	adcs	r1, r5
 8000420:	2b00      	cmp	r3, #0
 8000422:	db24      	blt.n	800046e <__udivmoddi4+0x162>
 8000424:	002b      	movs	r3, r5
 8000426:	465a      	mov	r2, fp
 8000428:	4644      	mov	r4, r8
 800042a:	40d3      	lsrs	r3, r2
 800042c:	002a      	movs	r2, r5
 800042e:	40e2      	lsrs	r2, r4
 8000430:	001c      	movs	r4, r3
 8000432:	465b      	mov	r3, fp
 8000434:	0015      	movs	r5, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	db2a      	blt.n	8000490 <__udivmoddi4+0x184>
 800043a:	0026      	movs	r6, r4
 800043c:	409e      	lsls	r6, r3
 800043e:	0033      	movs	r3, r6
 8000440:	0026      	movs	r6, r4
 8000442:	4647      	mov	r7, r8
 8000444:	40be      	lsls	r6, r7
 8000446:	0032      	movs	r2, r6
 8000448:	1a80      	subs	r0, r0, r2
 800044a:	4199      	sbcs	r1, r3
 800044c:	9000      	str	r0, [sp, #0]
 800044e:	9101      	str	r1, [sp, #4]
 8000450:	e79e      	b.n	8000390 <__udivmoddi4+0x84>
 8000452:	42a3      	cmp	r3, r4
 8000454:	d8bc      	bhi.n	80003d0 <__udivmoddi4+0xc4>
 8000456:	e782      	b.n	800035e <__udivmoddi4+0x52>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	2100      	movs	r1, #0
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	9100      	str	r1, [sp, #0]
 8000464:	9201      	str	r2, [sp, #4]
 8000466:	2201      	movs	r2, #1
 8000468:	40da      	lsrs	r2, r3
 800046a:	9201      	str	r2, [sp, #4]
 800046c:	e785      	b.n	800037a <__udivmoddi4+0x6e>
 800046e:	4642      	mov	r2, r8
 8000470:	2320      	movs	r3, #32
 8000472:	1a9b      	subs	r3, r3, r2
 8000474:	002a      	movs	r2, r5
 8000476:	4646      	mov	r6, r8
 8000478:	409a      	lsls	r2, r3
 800047a:	0023      	movs	r3, r4
 800047c:	40f3      	lsrs	r3, r6
 800047e:	4644      	mov	r4, r8
 8000480:	4313      	orrs	r3, r2
 8000482:	002a      	movs	r2, r5
 8000484:	40e2      	lsrs	r2, r4
 8000486:	001c      	movs	r4, r3
 8000488:	465b      	mov	r3, fp
 800048a:	0015      	movs	r5, r2
 800048c:	2b00      	cmp	r3, #0
 800048e:	dad4      	bge.n	800043a <__udivmoddi4+0x12e>
 8000490:	4642      	mov	r2, r8
 8000492:	002f      	movs	r7, r5
 8000494:	2320      	movs	r3, #32
 8000496:	0026      	movs	r6, r4
 8000498:	4097      	lsls	r7, r2
 800049a:	1a9b      	subs	r3, r3, r2
 800049c:	40de      	lsrs	r6, r3
 800049e:	003b      	movs	r3, r7
 80004a0:	4333      	orrs	r3, r6
 80004a2:	e7cd      	b.n	8000440 <__udivmoddi4+0x134>

080004a4 <__aeabi_dmul>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4645      	mov	r5, r8
 80004a8:	46de      	mov	lr, fp
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	001f      	movs	r7, r3
 80004b2:	030b      	lsls	r3, r1, #12
 80004b4:	0b1b      	lsrs	r3, r3, #12
 80004b6:	469b      	mov	fp, r3
 80004b8:	004d      	lsls	r5, r1, #1
 80004ba:	0fcb      	lsrs	r3, r1, #31
 80004bc:	0004      	movs	r4, r0
 80004be:	4691      	mov	r9, r2
 80004c0:	4698      	mov	r8, r3
 80004c2:	b087      	sub	sp, #28
 80004c4:	0d6d      	lsrs	r5, r5, #21
 80004c6:	d100      	bne.n	80004ca <__aeabi_dmul+0x26>
 80004c8:	e1cd      	b.n	8000866 <__aeabi_dmul+0x3c2>
 80004ca:	4bce      	ldr	r3, [pc, #824]	; (8000804 <__aeabi_dmul+0x360>)
 80004cc:	429d      	cmp	r5, r3
 80004ce:	d100      	bne.n	80004d2 <__aeabi_dmul+0x2e>
 80004d0:	e1e9      	b.n	80008a6 <__aeabi_dmul+0x402>
 80004d2:	465a      	mov	r2, fp
 80004d4:	0f43      	lsrs	r3, r0, #29
 80004d6:	00d2      	lsls	r2, r2, #3
 80004d8:	4313      	orrs	r3, r2
 80004da:	2280      	movs	r2, #128	; 0x80
 80004dc:	0412      	lsls	r2, r2, #16
 80004de:	431a      	orrs	r2, r3
 80004e0:	00c3      	lsls	r3, r0, #3
 80004e2:	469a      	mov	sl, r3
 80004e4:	4bc8      	ldr	r3, [pc, #800]	; (8000808 <__aeabi_dmul+0x364>)
 80004e6:	4693      	mov	fp, r2
 80004e8:	469c      	mov	ip, r3
 80004ea:	2300      	movs	r3, #0
 80004ec:	2600      	movs	r6, #0
 80004ee:	4465      	add	r5, ip
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	033c      	lsls	r4, r7, #12
 80004f4:	007b      	lsls	r3, r7, #1
 80004f6:	4648      	mov	r0, r9
 80004f8:	0b24      	lsrs	r4, r4, #12
 80004fa:	0d5b      	lsrs	r3, r3, #21
 80004fc:	0fff      	lsrs	r7, r7, #31
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d100      	bne.n	8000504 <__aeabi_dmul+0x60>
 8000502:	e189      	b.n	8000818 <__aeabi_dmul+0x374>
 8000504:	4abf      	ldr	r2, [pc, #764]	; (8000804 <__aeabi_dmul+0x360>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d019      	beq.n	800053e <__aeabi_dmul+0x9a>
 800050a:	0f42      	lsrs	r2, r0, #29
 800050c:	00e4      	lsls	r4, r4, #3
 800050e:	4322      	orrs	r2, r4
 8000510:	2480      	movs	r4, #128	; 0x80
 8000512:	0424      	lsls	r4, r4, #16
 8000514:	4314      	orrs	r4, r2
 8000516:	4abc      	ldr	r2, [pc, #752]	; (8000808 <__aeabi_dmul+0x364>)
 8000518:	2100      	movs	r1, #0
 800051a:	4694      	mov	ip, r2
 800051c:	4642      	mov	r2, r8
 800051e:	4463      	add	r3, ip
 8000520:	195b      	adds	r3, r3, r5
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	9b01      	ldr	r3, [sp, #4]
 8000526:	407a      	eors	r2, r7
 8000528:	3301      	adds	r3, #1
 800052a:	00c0      	lsls	r0, r0, #3
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	9302      	str	r3, [sp, #8]
 8000530:	2e0a      	cmp	r6, #10
 8000532:	dd1c      	ble.n	800056e <__aeabi_dmul+0xca>
 8000534:	003a      	movs	r2, r7
 8000536:	2e0b      	cmp	r6, #11
 8000538:	d05e      	beq.n	80005f8 <__aeabi_dmul+0x154>
 800053a:	4647      	mov	r7, r8
 800053c:	e056      	b.n	80005ec <__aeabi_dmul+0x148>
 800053e:	4649      	mov	r1, r9
 8000540:	4bb0      	ldr	r3, [pc, #704]	; (8000804 <__aeabi_dmul+0x360>)
 8000542:	4321      	orrs	r1, r4
 8000544:	18eb      	adds	r3, r5, r3
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	2900      	cmp	r1, #0
 800054a:	d12a      	bne.n	80005a2 <__aeabi_dmul+0xfe>
 800054c:	2080      	movs	r0, #128	; 0x80
 800054e:	2202      	movs	r2, #2
 8000550:	0100      	lsls	r0, r0, #4
 8000552:	002b      	movs	r3, r5
 8000554:	4684      	mov	ip, r0
 8000556:	4316      	orrs	r6, r2
 8000558:	4642      	mov	r2, r8
 800055a:	4463      	add	r3, ip
 800055c:	407a      	eors	r2, r7
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	9302      	str	r3, [sp, #8]
 8000562:	2e0a      	cmp	r6, #10
 8000564:	dd00      	ble.n	8000568 <__aeabi_dmul+0xc4>
 8000566:	e231      	b.n	80009cc <__aeabi_dmul+0x528>
 8000568:	2000      	movs	r0, #0
 800056a:	2400      	movs	r4, #0
 800056c:	2102      	movs	r1, #2
 800056e:	2e02      	cmp	r6, #2
 8000570:	dc26      	bgt.n	80005c0 <__aeabi_dmul+0x11c>
 8000572:	3e01      	subs	r6, #1
 8000574:	2e01      	cmp	r6, #1
 8000576:	d852      	bhi.n	800061e <__aeabi_dmul+0x17a>
 8000578:	2902      	cmp	r1, #2
 800057a:	d04c      	beq.n	8000616 <__aeabi_dmul+0x172>
 800057c:	2901      	cmp	r1, #1
 800057e:	d000      	beq.n	8000582 <__aeabi_dmul+0xde>
 8000580:	e118      	b.n	80007b4 <__aeabi_dmul+0x310>
 8000582:	2300      	movs	r3, #0
 8000584:	2400      	movs	r4, #0
 8000586:	2500      	movs	r5, #0
 8000588:	051b      	lsls	r3, r3, #20
 800058a:	4323      	orrs	r3, r4
 800058c:	07d2      	lsls	r2, r2, #31
 800058e:	4313      	orrs	r3, r2
 8000590:	0028      	movs	r0, r5
 8000592:	0019      	movs	r1, r3
 8000594:	b007      	add	sp, #28
 8000596:	bcf0      	pop	{r4, r5, r6, r7}
 8000598:	46bb      	mov	fp, r7
 800059a:	46b2      	mov	sl, r6
 800059c:	46a9      	mov	r9, r5
 800059e:	46a0      	mov	r8, r4
 80005a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	2203      	movs	r2, #3
 80005a6:	0109      	lsls	r1, r1, #4
 80005a8:	002b      	movs	r3, r5
 80005aa:	468c      	mov	ip, r1
 80005ac:	4316      	orrs	r6, r2
 80005ae:	4642      	mov	r2, r8
 80005b0:	4463      	add	r3, ip
 80005b2:	407a      	eors	r2, r7
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	9302      	str	r3, [sp, #8]
 80005b8:	2e0a      	cmp	r6, #10
 80005ba:	dd00      	ble.n	80005be <__aeabi_dmul+0x11a>
 80005bc:	e228      	b.n	8000a10 <__aeabi_dmul+0x56c>
 80005be:	2103      	movs	r1, #3
 80005c0:	2501      	movs	r5, #1
 80005c2:	40b5      	lsls	r5, r6
 80005c4:	46ac      	mov	ip, r5
 80005c6:	26a6      	movs	r6, #166	; 0xa6
 80005c8:	4663      	mov	r3, ip
 80005ca:	00f6      	lsls	r6, r6, #3
 80005cc:	4035      	ands	r5, r6
 80005ce:	4233      	tst	r3, r6
 80005d0:	d10b      	bne.n	80005ea <__aeabi_dmul+0x146>
 80005d2:	2690      	movs	r6, #144	; 0x90
 80005d4:	00b6      	lsls	r6, r6, #2
 80005d6:	4233      	tst	r3, r6
 80005d8:	d118      	bne.n	800060c <__aeabi_dmul+0x168>
 80005da:	3eb9      	subs	r6, #185	; 0xb9
 80005dc:	3eff      	subs	r6, #255	; 0xff
 80005de:	421e      	tst	r6, r3
 80005e0:	d01d      	beq.n	800061e <__aeabi_dmul+0x17a>
 80005e2:	46a3      	mov	fp, r4
 80005e4:	4682      	mov	sl, r0
 80005e6:	9100      	str	r1, [sp, #0]
 80005e8:	e000      	b.n	80005ec <__aeabi_dmul+0x148>
 80005ea:	0017      	movs	r7, r2
 80005ec:	9900      	ldr	r1, [sp, #0]
 80005ee:	003a      	movs	r2, r7
 80005f0:	2902      	cmp	r1, #2
 80005f2:	d010      	beq.n	8000616 <__aeabi_dmul+0x172>
 80005f4:	465c      	mov	r4, fp
 80005f6:	4650      	mov	r0, sl
 80005f8:	2903      	cmp	r1, #3
 80005fa:	d1bf      	bne.n	800057c <__aeabi_dmul+0xd8>
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	031b      	lsls	r3, r3, #12
 8000600:	431c      	orrs	r4, r3
 8000602:	0324      	lsls	r4, r4, #12
 8000604:	0005      	movs	r5, r0
 8000606:	4b7f      	ldr	r3, [pc, #508]	; (8000804 <__aeabi_dmul+0x360>)
 8000608:	0b24      	lsrs	r4, r4, #12
 800060a:	e7bd      	b.n	8000588 <__aeabi_dmul+0xe4>
 800060c:	2480      	movs	r4, #128	; 0x80
 800060e:	2200      	movs	r2, #0
 8000610:	4b7c      	ldr	r3, [pc, #496]	; (8000804 <__aeabi_dmul+0x360>)
 8000612:	0324      	lsls	r4, r4, #12
 8000614:	e7b8      	b.n	8000588 <__aeabi_dmul+0xe4>
 8000616:	2400      	movs	r4, #0
 8000618:	2500      	movs	r5, #0
 800061a:	4b7a      	ldr	r3, [pc, #488]	; (8000804 <__aeabi_dmul+0x360>)
 800061c:	e7b4      	b.n	8000588 <__aeabi_dmul+0xe4>
 800061e:	4653      	mov	r3, sl
 8000620:	041e      	lsls	r6, r3, #16
 8000622:	0c36      	lsrs	r6, r6, #16
 8000624:	0c1f      	lsrs	r7, r3, #16
 8000626:	0033      	movs	r3, r6
 8000628:	0c01      	lsrs	r1, r0, #16
 800062a:	0400      	lsls	r0, r0, #16
 800062c:	0c00      	lsrs	r0, r0, #16
 800062e:	4343      	muls	r3, r0
 8000630:	4698      	mov	r8, r3
 8000632:	0003      	movs	r3, r0
 8000634:	437b      	muls	r3, r7
 8000636:	4699      	mov	r9, r3
 8000638:	0033      	movs	r3, r6
 800063a:	434b      	muls	r3, r1
 800063c:	469c      	mov	ip, r3
 800063e:	4643      	mov	r3, r8
 8000640:	000d      	movs	r5, r1
 8000642:	0c1b      	lsrs	r3, r3, #16
 8000644:	469a      	mov	sl, r3
 8000646:	437d      	muls	r5, r7
 8000648:	44cc      	add	ip, r9
 800064a:	44d4      	add	ip, sl
 800064c:	9500      	str	r5, [sp, #0]
 800064e:	45e1      	cmp	r9, ip
 8000650:	d904      	bls.n	800065c <__aeabi_dmul+0x1b8>
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	025b      	lsls	r3, r3, #9
 8000656:	4699      	mov	r9, r3
 8000658:	444d      	add	r5, r9
 800065a:	9500      	str	r5, [sp, #0]
 800065c:	4663      	mov	r3, ip
 800065e:	0c1b      	lsrs	r3, r3, #16
 8000660:	001d      	movs	r5, r3
 8000662:	4663      	mov	r3, ip
 8000664:	041b      	lsls	r3, r3, #16
 8000666:	469c      	mov	ip, r3
 8000668:	4643      	mov	r3, r8
 800066a:	041b      	lsls	r3, r3, #16
 800066c:	0c1b      	lsrs	r3, r3, #16
 800066e:	4698      	mov	r8, r3
 8000670:	4663      	mov	r3, ip
 8000672:	4443      	add	r3, r8
 8000674:	9303      	str	r3, [sp, #12]
 8000676:	0c23      	lsrs	r3, r4, #16
 8000678:	4698      	mov	r8, r3
 800067a:	0033      	movs	r3, r6
 800067c:	0424      	lsls	r4, r4, #16
 800067e:	0c24      	lsrs	r4, r4, #16
 8000680:	4363      	muls	r3, r4
 8000682:	469c      	mov	ip, r3
 8000684:	0023      	movs	r3, r4
 8000686:	437b      	muls	r3, r7
 8000688:	4699      	mov	r9, r3
 800068a:	4643      	mov	r3, r8
 800068c:	435e      	muls	r6, r3
 800068e:	435f      	muls	r7, r3
 8000690:	444e      	add	r6, r9
 8000692:	4663      	mov	r3, ip
 8000694:	46b2      	mov	sl, r6
 8000696:	0c1e      	lsrs	r6, r3, #16
 8000698:	4456      	add	r6, sl
 800069a:	45b1      	cmp	r9, r6
 800069c:	d903      	bls.n	80006a6 <__aeabi_dmul+0x202>
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	025b      	lsls	r3, r3, #9
 80006a2:	4699      	mov	r9, r3
 80006a4:	444f      	add	r7, r9
 80006a6:	0c33      	lsrs	r3, r6, #16
 80006a8:	4699      	mov	r9, r3
 80006aa:	003b      	movs	r3, r7
 80006ac:	444b      	add	r3, r9
 80006ae:	9305      	str	r3, [sp, #20]
 80006b0:	4663      	mov	r3, ip
 80006b2:	46ac      	mov	ip, r5
 80006b4:	041f      	lsls	r7, r3, #16
 80006b6:	0c3f      	lsrs	r7, r7, #16
 80006b8:	0436      	lsls	r6, r6, #16
 80006ba:	19f6      	adds	r6, r6, r7
 80006bc:	44b4      	add	ip, r6
 80006be:	4663      	mov	r3, ip
 80006c0:	9304      	str	r3, [sp, #16]
 80006c2:	465b      	mov	r3, fp
 80006c4:	0c1b      	lsrs	r3, r3, #16
 80006c6:	469c      	mov	ip, r3
 80006c8:	465b      	mov	r3, fp
 80006ca:	041f      	lsls	r7, r3, #16
 80006cc:	0c3f      	lsrs	r7, r7, #16
 80006ce:	003b      	movs	r3, r7
 80006d0:	4343      	muls	r3, r0
 80006d2:	4699      	mov	r9, r3
 80006d4:	4663      	mov	r3, ip
 80006d6:	4343      	muls	r3, r0
 80006d8:	469a      	mov	sl, r3
 80006da:	464b      	mov	r3, r9
 80006dc:	4660      	mov	r0, ip
 80006de:	0c1b      	lsrs	r3, r3, #16
 80006e0:	469b      	mov	fp, r3
 80006e2:	4348      	muls	r0, r1
 80006e4:	4379      	muls	r1, r7
 80006e6:	4451      	add	r1, sl
 80006e8:	4459      	add	r1, fp
 80006ea:	458a      	cmp	sl, r1
 80006ec:	d903      	bls.n	80006f6 <__aeabi_dmul+0x252>
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	025b      	lsls	r3, r3, #9
 80006f2:	469a      	mov	sl, r3
 80006f4:	4450      	add	r0, sl
 80006f6:	0c0b      	lsrs	r3, r1, #16
 80006f8:	469a      	mov	sl, r3
 80006fa:	464b      	mov	r3, r9
 80006fc:	041b      	lsls	r3, r3, #16
 80006fe:	0c1b      	lsrs	r3, r3, #16
 8000700:	4699      	mov	r9, r3
 8000702:	003b      	movs	r3, r7
 8000704:	4363      	muls	r3, r4
 8000706:	0409      	lsls	r1, r1, #16
 8000708:	4645      	mov	r5, r8
 800070a:	4449      	add	r1, r9
 800070c:	4699      	mov	r9, r3
 800070e:	4663      	mov	r3, ip
 8000710:	435c      	muls	r4, r3
 8000712:	436b      	muls	r3, r5
 8000714:	469c      	mov	ip, r3
 8000716:	464b      	mov	r3, r9
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	4698      	mov	r8, r3
 800071c:	436f      	muls	r7, r5
 800071e:	193f      	adds	r7, r7, r4
 8000720:	4447      	add	r7, r8
 8000722:	4450      	add	r0, sl
 8000724:	42bc      	cmp	r4, r7
 8000726:	d903      	bls.n	8000730 <__aeabi_dmul+0x28c>
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	025b      	lsls	r3, r3, #9
 800072c:	4698      	mov	r8, r3
 800072e:	44c4      	add	ip, r8
 8000730:	9b04      	ldr	r3, [sp, #16]
 8000732:	9d00      	ldr	r5, [sp, #0]
 8000734:	4698      	mov	r8, r3
 8000736:	4445      	add	r5, r8
 8000738:	42b5      	cmp	r5, r6
 800073a:	41b6      	sbcs	r6, r6
 800073c:	4273      	negs	r3, r6
 800073e:	4698      	mov	r8, r3
 8000740:	464b      	mov	r3, r9
 8000742:	041e      	lsls	r6, r3, #16
 8000744:	9b05      	ldr	r3, [sp, #20]
 8000746:	043c      	lsls	r4, r7, #16
 8000748:	4699      	mov	r9, r3
 800074a:	0c36      	lsrs	r6, r6, #16
 800074c:	19a4      	adds	r4, r4, r6
 800074e:	444c      	add	r4, r9
 8000750:	46a1      	mov	r9, r4
 8000752:	4683      	mov	fp, r0
 8000754:	186e      	adds	r6, r5, r1
 8000756:	44c1      	add	r9, r8
 8000758:	428e      	cmp	r6, r1
 800075a:	4189      	sbcs	r1, r1
 800075c:	44cb      	add	fp, r9
 800075e:	465d      	mov	r5, fp
 8000760:	4249      	negs	r1, r1
 8000762:	186d      	adds	r5, r5, r1
 8000764:	429c      	cmp	r4, r3
 8000766:	41a4      	sbcs	r4, r4
 8000768:	45c1      	cmp	r9, r8
 800076a:	419b      	sbcs	r3, r3
 800076c:	4583      	cmp	fp, r0
 800076e:	4180      	sbcs	r0, r0
 8000770:	428d      	cmp	r5, r1
 8000772:	4189      	sbcs	r1, r1
 8000774:	425b      	negs	r3, r3
 8000776:	4264      	negs	r4, r4
 8000778:	431c      	orrs	r4, r3
 800077a:	4240      	negs	r0, r0
 800077c:	9b03      	ldr	r3, [sp, #12]
 800077e:	4249      	negs	r1, r1
 8000780:	4301      	orrs	r1, r0
 8000782:	0270      	lsls	r0, r6, #9
 8000784:	0c3f      	lsrs	r7, r7, #16
 8000786:	4318      	orrs	r0, r3
 8000788:	19e4      	adds	r4, r4, r7
 800078a:	1e47      	subs	r7, r0, #1
 800078c:	41b8      	sbcs	r0, r7
 800078e:	1864      	adds	r4, r4, r1
 8000790:	4464      	add	r4, ip
 8000792:	0df6      	lsrs	r6, r6, #23
 8000794:	0261      	lsls	r1, r4, #9
 8000796:	4330      	orrs	r0, r6
 8000798:	0dec      	lsrs	r4, r5, #23
 800079a:	026e      	lsls	r6, r5, #9
 800079c:	430c      	orrs	r4, r1
 800079e:	4330      	orrs	r0, r6
 80007a0:	01c9      	lsls	r1, r1, #7
 80007a2:	d400      	bmi.n	80007a6 <__aeabi_dmul+0x302>
 80007a4:	e0f1      	b.n	800098a <__aeabi_dmul+0x4e6>
 80007a6:	2101      	movs	r1, #1
 80007a8:	0843      	lsrs	r3, r0, #1
 80007aa:	4001      	ands	r1, r0
 80007ac:	430b      	orrs	r3, r1
 80007ae:	07e0      	lsls	r0, r4, #31
 80007b0:	4318      	orrs	r0, r3
 80007b2:	0864      	lsrs	r4, r4, #1
 80007b4:	4915      	ldr	r1, [pc, #84]	; (800080c <__aeabi_dmul+0x368>)
 80007b6:	9b02      	ldr	r3, [sp, #8]
 80007b8:	468c      	mov	ip, r1
 80007ba:	4463      	add	r3, ip
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dc00      	bgt.n	80007c2 <__aeabi_dmul+0x31e>
 80007c0:	e097      	b.n	80008f2 <__aeabi_dmul+0x44e>
 80007c2:	0741      	lsls	r1, r0, #29
 80007c4:	d009      	beq.n	80007da <__aeabi_dmul+0x336>
 80007c6:	210f      	movs	r1, #15
 80007c8:	4001      	ands	r1, r0
 80007ca:	2904      	cmp	r1, #4
 80007cc:	d005      	beq.n	80007da <__aeabi_dmul+0x336>
 80007ce:	1d01      	adds	r1, r0, #4
 80007d0:	4281      	cmp	r1, r0
 80007d2:	4180      	sbcs	r0, r0
 80007d4:	4240      	negs	r0, r0
 80007d6:	1824      	adds	r4, r4, r0
 80007d8:	0008      	movs	r0, r1
 80007da:	01e1      	lsls	r1, r4, #7
 80007dc:	d506      	bpl.n	80007ec <__aeabi_dmul+0x348>
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	00c9      	lsls	r1, r1, #3
 80007e2:	468c      	mov	ip, r1
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <__aeabi_dmul+0x36c>)
 80007e6:	401c      	ands	r4, r3
 80007e8:	9b02      	ldr	r3, [sp, #8]
 80007ea:	4463      	add	r3, ip
 80007ec:	4909      	ldr	r1, [pc, #36]	; (8000814 <__aeabi_dmul+0x370>)
 80007ee:	428b      	cmp	r3, r1
 80007f0:	dd00      	ble.n	80007f4 <__aeabi_dmul+0x350>
 80007f2:	e710      	b.n	8000616 <__aeabi_dmul+0x172>
 80007f4:	0761      	lsls	r1, r4, #29
 80007f6:	08c5      	lsrs	r5, r0, #3
 80007f8:	0264      	lsls	r4, r4, #9
 80007fa:	055b      	lsls	r3, r3, #21
 80007fc:	430d      	orrs	r5, r1
 80007fe:	0b24      	lsrs	r4, r4, #12
 8000800:	0d5b      	lsrs	r3, r3, #21
 8000802:	e6c1      	b.n	8000588 <__aeabi_dmul+0xe4>
 8000804:	000007ff 	.word	0x000007ff
 8000808:	fffffc01 	.word	0xfffffc01
 800080c:	000003ff 	.word	0x000003ff
 8000810:	feffffff 	.word	0xfeffffff
 8000814:	000007fe 	.word	0x000007fe
 8000818:	464b      	mov	r3, r9
 800081a:	4323      	orrs	r3, r4
 800081c:	d059      	beq.n	80008d2 <__aeabi_dmul+0x42e>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d100      	bne.n	8000824 <__aeabi_dmul+0x380>
 8000822:	e0a3      	b.n	800096c <__aeabi_dmul+0x4c8>
 8000824:	0020      	movs	r0, r4
 8000826:	f000 fd1b 	bl	8001260 <__clzsi2>
 800082a:	0001      	movs	r1, r0
 800082c:	0003      	movs	r3, r0
 800082e:	390b      	subs	r1, #11
 8000830:	221d      	movs	r2, #29
 8000832:	1a52      	subs	r2, r2, r1
 8000834:	4649      	mov	r1, r9
 8000836:	0018      	movs	r0, r3
 8000838:	40d1      	lsrs	r1, r2
 800083a:	464a      	mov	r2, r9
 800083c:	3808      	subs	r0, #8
 800083e:	4082      	lsls	r2, r0
 8000840:	4084      	lsls	r4, r0
 8000842:	0010      	movs	r0, r2
 8000844:	430c      	orrs	r4, r1
 8000846:	4a74      	ldr	r2, [pc, #464]	; (8000a18 <__aeabi_dmul+0x574>)
 8000848:	1aeb      	subs	r3, r5, r3
 800084a:	4694      	mov	ip, r2
 800084c:	4642      	mov	r2, r8
 800084e:	4463      	add	r3, ip
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	9b01      	ldr	r3, [sp, #4]
 8000854:	407a      	eors	r2, r7
 8000856:	3301      	adds	r3, #1
 8000858:	2100      	movs	r1, #0
 800085a:	b2d2      	uxtb	r2, r2
 800085c:	9302      	str	r3, [sp, #8]
 800085e:	2e0a      	cmp	r6, #10
 8000860:	dd00      	ble.n	8000864 <__aeabi_dmul+0x3c0>
 8000862:	e667      	b.n	8000534 <__aeabi_dmul+0x90>
 8000864:	e683      	b.n	800056e <__aeabi_dmul+0xca>
 8000866:	465b      	mov	r3, fp
 8000868:	4303      	orrs	r3, r0
 800086a:	469a      	mov	sl, r3
 800086c:	d02a      	beq.n	80008c4 <__aeabi_dmul+0x420>
 800086e:	465b      	mov	r3, fp
 8000870:	2b00      	cmp	r3, #0
 8000872:	d06d      	beq.n	8000950 <__aeabi_dmul+0x4ac>
 8000874:	4658      	mov	r0, fp
 8000876:	f000 fcf3 	bl	8001260 <__clzsi2>
 800087a:	0001      	movs	r1, r0
 800087c:	0003      	movs	r3, r0
 800087e:	390b      	subs	r1, #11
 8000880:	221d      	movs	r2, #29
 8000882:	1a52      	subs	r2, r2, r1
 8000884:	0021      	movs	r1, r4
 8000886:	0018      	movs	r0, r3
 8000888:	465d      	mov	r5, fp
 800088a:	40d1      	lsrs	r1, r2
 800088c:	3808      	subs	r0, #8
 800088e:	4085      	lsls	r5, r0
 8000890:	000a      	movs	r2, r1
 8000892:	4084      	lsls	r4, r0
 8000894:	432a      	orrs	r2, r5
 8000896:	4693      	mov	fp, r2
 8000898:	46a2      	mov	sl, r4
 800089a:	4d5f      	ldr	r5, [pc, #380]	; (8000a18 <__aeabi_dmul+0x574>)
 800089c:	2600      	movs	r6, #0
 800089e:	1aed      	subs	r5, r5, r3
 80008a0:	2300      	movs	r3, #0
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	e625      	b.n	80004f2 <__aeabi_dmul+0x4e>
 80008a6:	465b      	mov	r3, fp
 80008a8:	4303      	orrs	r3, r0
 80008aa:	469a      	mov	sl, r3
 80008ac:	d105      	bne.n	80008ba <__aeabi_dmul+0x416>
 80008ae:	2300      	movs	r3, #0
 80008b0:	469b      	mov	fp, r3
 80008b2:	3302      	adds	r3, #2
 80008b4:	2608      	movs	r6, #8
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	e61b      	b.n	80004f2 <__aeabi_dmul+0x4e>
 80008ba:	2303      	movs	r3, #3
 80008bc:	4682      	mov	sl, r0
 80008be:	260c      	movs	r6, #12
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	e616      	b.n	80004f2 <__aeabi_dmul+0x4e>
 80008c4:	2300      	movs	r3, #0
 80008c6:	469b      	mov	fp, r3
 80008c8:	3301      	adds	r3, #1
 80008ca:	2604      	movs	r6, #4
 80008cc:	2500      	movs	r5, #0
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	e60f      	b.n	80004f2 <__aeabi_dmul+0x4e>
 80008d2:	4642      	mov	r2, r8
 80008d4:	3301      	adds	r3, #1
 80008d6:	9501      	str	r5, [sp, #4]
 80008d8:	431e      	orrs	r6, r3
 80008da:	9b01      	ldr	r3, [sp, #4]
 80008dc:	407a      	eors	r2, r7
 80008de:	3301      	adds	r3, #1
 80008e0:	2400      	movs	r4, #0
 80008e2:	2000      	movs	r0, #0
 80008e4:	2101      	movs	r1, #1
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	2e0a      	cmp	r6, #10
 80008ec:	dd00      	ble.n	80008f0 <__aeabi_dmul+0x44c>
 80008ee:	e621      	b.n	8000534 <__aeabi_dmul+0x90>
 80008f0:	e63d      	b.n	800056e <__aeabi_dmul+0xca>
 80008f2:	2101      	movs	r1, #1
 80008f4:	1ac9      	subs	r1, r1, r3
 80008f6:	2938      	cmp	r1, #56	; 0x38
 80008f8:	dd00      	ble.n	80008fc <__aeabi_dmul+0x458>
 80008fa:	e642      	b.n	8000582 <__aeabi_dmul+0xde>
 80008fc:	291f      	cmp	r1, #31
 80008fe:	dd47      	ble.n	8000990 <__aeabi_dmul+0x4ec>
 8000900:	261f      	movs	r6, #31
 8000902:	0025      	movs	r5, r4
 8000904:	4276      	negs	r6, r6
 8000906:	1af3      	subs	r3, r6, r3
 8000908:	40dd      	lsrs	r5, r3
 800090a:	002b      	movs	r3, r5
 800090c:	2920      	cmp	r1, #32
 800090e:	d005      	beq.n	800091c <__aeabi_dmul+0x478>
 8000910:	4942      	ldr	r1, [pc, #264]	; (8000a1c <__aeabi_dmul+0x578>)
 8000912:	9d02      	ldr	r5, [sp, #8]
 8000914:	468c      	mov	ip, r1
 8000916:	4465      	add	r5, ip
 8000918:	40ac      	lsls	r4, r5
 800091a:	4320      	orrs	r0, r4
 800091c:	1e41      	subs	r1, r0, #1
 800091e:	4188      	sbcs	r0, r1
 8000920:	4318      	orrs	r0, r3
 8000922:	2307      	movs	r3, #7
 8000924:	001d      	movs	r5, r3
 8000926:	2400      	movs	r4, #0
 8000928:	4005      	ands	r5, r0
 800092a:	4203      	tst	r3, r0
 800092c:	d04a      	beq.n	80009c4 <__aeabi_dmul+0x520>
 800092e:	230f      	movs	r3, #15
 8000930:	2400      	movs	r4, #0
 8000932:	4003      	ands	r3, r0
 8000934:	2b04      	cmp	r3, #4
 8000936:	d042      	beq.n	80009be <__aeabi_dmul+0x51a>
 8000938:	1d03      	adds	r3, r0, #4
 800093a:	4283      	cmp	r3, r0
 800093c:	4180      	sbcs	r0, r0
 800093e:	4240      	negs	r0, r0
 8000940:	1824      	adds	r4, r4, r0
 8000942:	0018      	movs	r0, r3
 8000944:	0223      	lsls	r3, r4, #8
 8000946:	d53a      	bpl.n	80009be <__aeabi_dmul+0x51a>
 8000948:	2301      	movs	r3, #1
 800094a:	2400      	movs	r4, #0
 800094c:	2500      	movs	r5, #0
 800094e:	e61b      	b.n	8000588 <__aeabi_dmul+0xe4>
 8000950:	f000 fc86 	bl	8001260 <__clzsi2>
 8000954:	0001      	movs	r1, r0
 8000956:	0003      	movs	r3, r0
 8000958:	3115      	adds	r1, #21
 800095a:	3320      	adds	r3, #32
 800095c:	291c      	cmp	r1, #28
 800095e:	dd8f      	ble.n	8000880 <__aeabi_dmul+0x3dc>
 8000960:	3808      	subs	r0, #8
 8000962:	2200      	movs	r2, #0
 8000964:	4084      	lsls	r4, r0
 8000966:	4692      	mov	sl, r2
 8000968:	46a3      	mov	fp, r4
 800096a:	e796      	b.n	800089a <__aeabi_dmul+0x3f6>
 800096c:	f000 fc78 	bl	8001260 <__clzsi2>
 8000970:	0001      	movs	r1, r0
 8000972:	0003      	movs	r3, r0
 8000974:	3115      	adds	r1, #21
 8000976:	3320      	adds	r3, #32
 8000978:	291c      	cmp	r1, #28
 800097a:	dc00      	bgt.n	800097e <__aeabi_dmul+0x4da>
 800097c:	e758      	b.n	8000830 <__aeabi_dmul+0x38c>
 800097e:	0002      	movs	r2, r0
 8000980:	464c      	mov	r4, r9
 8000982:	3a08      	subs	r2, #8
 8000984:	2000      	movs	r0, #0
 8000986:	4094      	lsls	r4, r2
 8000988:	e75d      	b.n	8000846 <__aeabi_dmul+0x3a2>
 800098a:	9b01      	ldr	r3, [sp, #4]
 800098c:	9302      	str	r3, [sp, #8]
 800098e:	e711      	b.n	80007b4 <__aeabi_dmul+0x310>
 8000990:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <__aeabi_dmul+0x57c>)
 8000992:	0026      	movs	r6, r4
 8000994:	469c      	mov	ip, r3
 8000996:	0003      	movs	r3, r0
 8000998:	9d02      	ldr	r5, [sp, #8]
 800099a:	40cb      	lsrs	r3, r1
 800099c:	4465      	add	r5, ip
 800099e:	40ae      	lsls	r6, r5
 80009a0:	431e      	orrs	r6, r3
 80009a2:	0003      	movs	r3, r0
 80009a4:	40ab      	lsls	r3, r5
 80009a6:	1e58      	subs	r0, r3, #1
 80009a8:	4183      	sbcs	r3, r0
 80009aa:	0030      	movs	r0, r6
 80009ac:	4318      	orrs	r0, r3
 80009ae:	40cc      	lsrs	r4, r1
 80009b0:	0743      	lsls	r3, r0, #29
 80009b2:	d0c7      	beq.n	8000944 <__aeabi_dmul+0x4a0>
 80009b4:	230f      	movs	r3, #15
 80009b6:	4003      	ands	r3, r0
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	d1bd      	bne.n	8000938 <__aeabi_dmul+0x494>
 80009bc:	e7c2      	b.n	8000944 <__aeabi_dmul+0x4a0>
 80009be:	0765      	lsls	r5, r4, #29
 80009c0:	0264      	lsls	r4, r4, #9
 80009c2:	0b24      	lsrs	r4, r4, #12
 80009c4:	08c0      	lsrs	r0, r0, #3
 80009c6:	2300      	movs	r3, #0
 80009c8:	4305      	orrs	r5, r0
 80009ca:	e5dd      	b.n	8000588 <__aeabi_dmul+0xe4>
 80009cc:	2500      	movs	r5, #0
 80009ce:	2302      	movs	r3, #2
 80009d0:	2e0f      	cmp	r6, #15
 80009d2:	d10c      	bne.n	80009ee <__aeabi_dmul+0x54a>
 80009d4:	2480      	movs	r4, #128	; 0x80
 80009d6:	465b      	mov	r3, fp
 80009d8:	0324      	lsls	r4, r4, #12
 80009da:	4223      	tst	r3, r4
 80009dc:	d00e      	beq.n	80009fc <__aeabi_dmul+0x558>
 80009de:	4221      	tst	r1, r4
 80009e0:	d10c      	bne.n	80009fc <__aeabi_dmul+0x558>
 80009e2:	430c      	orrs	r4, r1
 80009e4:	0324      	lsls	r4, r4, #12
 80009e6:	003a      	movs	r2, r7
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <__aeabi_dmul+0x580>)
 80009ea:	0b24      	lsrs	r4, r4, #12
 80009ec:	e5cc      	b.n	8000588 <__aeabi_dmul+0xe4>
 80009ee:	2e0b      	cmp	r6, #11
 80009f0:	d000      	beq.n	80009f4 <__aeabi_dmul+0x550>
 80009f2:	e5a2      	b.n	800053a <__aeabi_dmul+0x96>
 80009f4:	468b      	mov	fp, r1
 80009f6:	46aa      	mov	sl, r5
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	e5f7      	b.n	80005ec <__aeabi_dmul+0x148>
 80009fc:	2480      	movs	r4, #128	; 0x80
 80009fe:	465b      	mov	r3, fp
 8000a00:	0324      	lsls	r4, r4, #12
 8000a02:	431c      	orrs	r4, r3
 8000a04:	0324      	lsls	r4, r4, #12
 8000a06:	4642      	mov	r2, r8
 8000a08:	4655      	mov	r5, sl
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <__aeabi_dmul+0x580>)
 8000a0c:	0b24      	lsrs	r4, r4, #12
 8000a0e:	e5bb      	b.n	8000588 <__aeabi_dmul+0xe4>
 8000a10:	464d      	mov	r5, r9
 8000a12:	0021      	movs	r1, r4
 8000a14:	2303      	movs	r3, #3
 8000a16:	e7db      	b.n	80009d0 <__aeabi_dmul+0x52c>
 8000a18:	fffffc0d 	.word	0xfffffc0d
 8000a1c:	0000043e 	.word	0x0000043e
 8000a20:	0000041e 	.word	0x0000041e
 8000a24:	000007ff 	.word	0x000007ff

08000a28 <__aeabi_dsub>:
 8000a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2a:	4657      	mov	r7, sl
 8000a2c:	464e      	mov	r6, r9
 8000a2e:	4645      	mov	r5, r8
 8000a30:	46de      	mov	lr, fp
 8000a32:	b5e0      	push	{r5, r6, r7, lr}
 8000a34:	000d      	movs	r5, r1
 8000a36:	0004      	movs	r4, r0
 8000a38:	0019      	movs	r1, r3
 8000a3a:	0010      	movs	r0, r2
 8000a3c:	032b      	lsls	r3, r5, #12
 8000a3e:	0a5b      	lsrs	r3, r3, #9
 8000a40:	0f62      	lsrs	r2, r4, #29
 8000a42:	431a      	orrs	r2, r3
 8000a44:	00e3      	lsls	r3, r4, #3
 8000a46:	030c      	lsls	r4, r1, #12
 8000a48:	0a64      	lsrs	r4, r4, #9
 8000a4a:	0f47      	lsrs	r7, r0, #29
 8000a4c:	4327      	orrs	r7, r4
 8000a4e:	4cd0      	ldr	r4, [pc, #832]	; (8000d90 <__aeabi_dsub+0x368>)
 8000a50:	006e      	lsls	r6, r5, #1
 8000a52:	4691      	mov	r9, r2
 8000a54:	b083      	sub	sp, #12
 8000a56:	004a      	lsls	r2, r1, #1
 8000a58:	00c0      	lsls	r0, r0, #3
 8000a5a:	4698      	mov	r8, r3
 8000a5c:	46a2      	mov	sl, r4
 8000a5e:	0d76      	lsrs	r6, r6, #21
 8000a60:	0fed      	lsrs	r5, r5, #31
 8000a62:	0d52      	lsrs	r2, r2, #21
 8000a64:	0fc9      	lsrs	r1, r1, #31
 8000a66:	9001      	str	r0, [sp, #4]
 8000a68:	42a2      	cmp	r2, r4
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_dsub+0x46>
 8000a6c:	e0b9      	b.n	8000be2 <__aeabi_dsub+0x1ba>
 8000a6e:	2401      	movs	r4, #1
 8000a70:	4061      	eors	r1, r4
 8000a72:	468b      	mov	fp, r1
 8000a74:	428d      	cmp	r5, r1
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dsub+0x52>
 8000a78:	e08d      	b.n	8000b96 <__aeabi_dsub+0x16e>
 8000a7a:	1ab4      	subs	r4, r6, r2
 8000a7c:	46a4      	mov	ip, r4
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	dc00      	bgt.n	8000a84 <__aeabi_dsub+0x5c>
 8000a82:	e0b7      	b.n	8000bf4 <__aeabi_dsub+0x1cc>
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dsub+0x62>
 8000a88:	e0cb      	b.n	8000c22 <__aeabi_dsub+0x1fa>
 8000a8a:	4ac1      	ldr	r2, [pc, #772]	; (8000d90 <__aeabi_dsub+0x368>)
 8000a8c:	4296      	cmp	r6, r2
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dsub+0x6a>
 8000a90:	e186      	b.n	8000da0 <__aeabi_dsub+0x378>
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	0412      	lsls	r2, r2, #16
 8000a96:	4317      	orrs	r7, r2
 8000a98:	4662      	mov	r2, ip
 8000a9a:	2a38      	cmp	r2, #56	; 0x38
 8000a9c:	dd00      	ble.n	8000aa0 <__aeabi_dsub+0x78>
 8000a9e:	e1a4      	b.n	8000dea <__aeabi_dsub+0x3c2>
 8000aa0:	2a1f      	cmp	r2, #31
 8000aa2:	dd00      	ble.n	8000aa6 <__aeabi_dsub+0x7e>
 8000aa4:	e21d      	b.n	8000ee2 <__aeabi_dsub+0x4ba>
 8000aa6:	4661      	mov	r1, ip
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	003c      	movs	r4, r7
 8000aac:	1a52      	subs	r2, r2, r1
 8000aae:	0001      	movs	r1, r0
 8000ab0:	4090      	lsls	r0, r2
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	1e42      	subs	r2, r0, #1
 8000ab6:	4190      	sbcs	r0, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	46a0      	mov	r8, r4
 8000abc:	4664      	mov	r4, ip
 8000abe:	40d7      	lsrs	r7, r2
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	40e1      	lsrs	r1, r4
 8000ac4:	4644      	mov	r4, r8
 8000ac6:	1bd2      	subs	r2, r2, r7
 8000ac8:	4691      	mov	r9, r2
 8000aca:	430c      	orrs	r4, r1
 8000acc:	4304      	orrs	r4, r0
 8000ace:	1b1c      	subs	r4, r3, r4
 8000ad0:	42a3      	cmp	r3, r4
 8000ad2:	4192      	sbcs	r2, r2
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	4252      	negs	r2, r2
 8000ad8:	1a9b      	subs	r3, r3, r2
 8000ada:	469a      	mov	sl, r3
 8000adc:	4653      	mov	r3, sl
 8000ade:	021b      	lsls	r3, r3, #8
 8000ae0:	d400      	bmi.n	8000ae4 <__aeabi_dsub+0xbc>
 8000ae2:	e12b      	b.n	8000d3c <__aeabi_dsub+0x314>
 8000ae4:	4653      	mov	r3, sl
 8000ae6:	025a      	lsls	r2, r3, #9
 8000ae8:	0a53      	lsrs	r3, r2, #9
 8000aea:	469a      	mov	sl, r3
 8000aec:	4653      	mov	r3, sl
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d100      	bne.n	8000af4 <__aeabi_dsub+0xcc>
 8000af2:	e166      	b.n	8000dc2 <__aeabi_dsub+0x39a>
 8000af4:	4650      	mov	r0, sl
 8000af6:	f000 fbb3 	bl	8001260 <__clzsi2>
 8000afa:	0003      	movs	r3, r0
 8000afc:	3b08      	subs	r3, #8
 8000afe:	2220      	movs	r2, #32
 8000b00:	0020      	movs	r0, r4
 8000b02:	1ad2      	subs	r2, r2, r3
 8000b04:	4651      	mov	r1, sl
 8000b06:	40d0      	lsrs	r0, r2
 8000b08:	4099      	lsls	r1, r3
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	409c      	lsls	r4, r3
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	429e      	cmp	r6, r3
 8000b12:	dd00      	ble.n	8000b16 <__aeabi_dsub+0xee>
 8000b14:	e164      	b.n	8000de0 <__aeabi_dsub+0x3b8>
 8000b16:	1b9b      	subs	r3, r3, r6
 8000b18:	1c59      	adds	r1, r3, #1
 8000b1a:	291f      	cmp	r1, #31
 8000b1c:	dd00      	ble.n	8000b20 <__aeabi_dsub+0xf8>
 8000b1e:	e0fe      	b.n	8000d1e <__aeabi_dsub+0x2f6>
 8000b20:	2320      	movs	r3, #32
 8000b22:	0010      	movs	r0, r2
 8000b24:	0026      	movs	r6, r4
 8000b26:	1a5b      	subs	r3, r3, r1
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	4098      	lsls	r0, r3
 8000b2c:	40ce      	lsrs	r6, r1
 8000b2e:	40ca      	lsrs	r2, r1
 8000b30:	1e63      	subs	r3, r4, #1
 8000b32:	419c      	sbcs	r4, r3
 8000b34:	4330      	orrs	r0, r6
 8000b36:	4692      	mov	sl, r2
 8000b38:	2600      	movs	r6, #0
 8000b3a:	4304      	orrs	r4, r0
 8000b3c:	0763      	lsls	r3, r4, #29
 8000b3e:	d009      	beq.n	8000b54 <__aeabi_dsub+0x12c>
 8000b40:	230f      	movs	r3, #15
 8000b42:	4023      	ands	r3, r4
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	d005      	beq.n	8000b54 <__aeabi_dsub+0x12c>
 8000b48:	1d23      	adds	r3, r4, #4
 8000b4a:	42a3      	cmp	r3, r4
 8000b4c:	41a4      	sbcs	r4, r4
 8000b4e:	4264      	negs	r4, r4
 8000b50:	44a2      	add	sl, r4
 8000b52:	001c      	movs	r4, r3
 8000b54:	4653      	mov	r3, sl
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	d400      	bmi.n	8000b5c <__aeabi_dsub+0x134>
 8000b5a:	e0f2      	b.n	8000d42 <__aeabi_dsub+0x31a>
 8000b5c:	4b8c      	ldr	r3, [pc, #560]	; (8000d90 <__aeabi_dsub+0x368>)
 8000b5e:	3601      	adds	r6, #1
 8000b60:	429e      	cmp	r6, r3
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dsub+0x13e>
 8000b64:	e10f      	b.n	8000d86 <__aeabi_dsub+0x35e>
 8000b66:	4653      	mov	r3, sl
 8000b68:	498a      	ldr	r1, [pc, #552]	; (8000d94 <__aeabi_dsub+0x36c>)
 8000b6a:	08e4      	lsrs	r4, r4, #3
 8000b6c:	400b      	ands	r3, r1
 8000b6e:	0019      	movs	r1, r3
 8000b70:	075b      	lsls	r3, r3, #29
 8000b72:	4323      	orrs	r3, r4
 8000b74:	0572      	lsls	r2, r6, #21
 8000b76:	024c      	lsls	r4, r1, #9
 8000b78:	0b24      	lsrs	r4, r4, #12
 8000b7a:	0d52      	lsrs	r2, r2, #21
 8000b7c:	0512      	lsls	r2, r2, #20
 8000b7e:	4322      	orrs	r2, r4
 8000b80:	07ed      	lsls	r5, r5, #31
 8000b82:	432a      	orrs	r2, r5
 8000b84:	0018      	movs	r0, r3
 8000b86:	0011      	movs	r1, r2
 8000b88:	b003      	add	sp, #12
 8000b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b8c:	46bb      	mov	fp, r7
 8000b8e:	46b2      	mov	sl, r6
 8000b90:	46a9      	mov	r9, r5
 8000b92:	46a0      	mov	r8, r4
 8000b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b96:	1ab4      	subs	r4, r6, r2
 8000b98:	46a4      	mov	ip, r4
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	dd59      	ble.n	8000c52 <__aeabi_dsub+0x22a>
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dsub+0x17c>
 8000ba2:	e0b0      	b.n	8000d06 <__aeabi_dsub+0x2de>
 8000ba4:	4556      	cmp	r6, sl
 8000ba6:	d100      	bne.n	8000baa <__aeabi_dsub+0x182>
 8000ba8:	e0fa      	b.n	8000da0 <__aeabi_dsub+0x378>
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	0412      	lsls	r2, r2, #16
 8000bae:	4317      	orrs	r7, r2
 8000bb0:	4662      	mov	r2, ip
 8000bb2:	2a38      	cmp	r2, #56	; 0x38
 8000bb4:	dd00      	ble.n	8000bb8 <__aeabi_dsub+0x190>
 8000bb6:	e0d4      	b.n	8000d62 <__aeabi_dsub+0x33a>
 8000bb8:	2a1f      	cmp	r2, #31
 8000bba:	dc00      	bgt.n	8000bbe <__aeabi_dsub+0x196>
 8000bbc:	e1c0      	b.n	8000f40 <__aeabi_dsub+0x518>
 8000bbe:	0039      	movs	r1, r7
 8000bc0:	3a20      	subs	r2, #32
 8000bc2:	40d1      	lsrs	r1, r2
 8000bc4:	4662      	mov	r2, ip
 8000bc6:	2a20      	cmp	r2, #32
 8000bc8:	d006      	beq.n	8000bd8 <__aeabi_dsub+0x1b0>
 8000bca:	4664      	mov	r4, ip
 8000bcc:	2240      	movs	r2, #64	; 0x40
 8000bce:	1b12      	subs	r2, r2, r4
 8000bd0:	003c      	movs	r4, r7
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	4304      	orrs	r4, r0
 8000bd6:	9401      	str	r4, [sp, #4]
 8000bd8:	9c01      	ldr	r4, [sp, #4]
 8000bda:	1e62      	subs	r2, r4, #1
 8000bdc:	4194      	sbcs	r4, r2
 8000bde:	430c      	orrs	r4, r1
 8000be0:	e0c3      	b.n	8000d6a <__aeabi_dsub+0x342>
 8000be2:	003c      	movs	r4, r7
 8000be4:	4304      	orrs	r4, r0
 8000be6:	d02b      	beq.n	8000c40 <__aeabi_dsub+0x218>
 8000be8:	468b      	mov	fp, r1
 8000bea:	428d      	cmp	r5, r1
 8000bec:	d02e      	beq.n	8000c4c <__aeabi_dsub+0x224>
 8000bee:	4c6a      	ldr	r4, [pc, #424]	; (8000d98 <__aeabi_dsub+0x370>)
 8000bf0:	46a4      	mov	ip, r4
 8000bf2:	44b4      	add	ip, r6
 8000bf4:	4664      	mov	r4, ip
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d05f      	beq.n	8000cba <__aeabi_dsub+0x292>
 8000bfa:	1b94      	subs	r4, r2, r6
 8000bfc:	46a4      	mov	ip, r4
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d000      	beq.n	8000c04 <__aeabi_dsub+0x1dc>
 8000c02:	e120      	b.n	8000e46 <__aeabi_dsub+0x41e>
 8000c04:	464c      	mov	r4, r9
 8000c06:	431c      	orrs	r4, r3
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dsub+0x1e4>
 8000c0a:	e1c7      	b.n	8000f9c <__aeabi_dsub+0x574>
 8000c0c:	4661      	mov	r1, ip
 8000c0e:	1e4c      	subs	r4, r1, #1
 8000c10:	2901      	cmp	r1, #1
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dsub+0x1ee>
 8000c14:	e223      	b.n	800105e <__aeabi_dsub+0x636>
 8000c16:	4d5e      	ldr	r5, [pc, #376]	; (8000d90 <__aeabi_dsub+0x368>)
 8000c18:	45ac      	cmp	ip, r5
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dsub+0x1f6>
 8000c1c:	e1d8      	b.n	8000fd0 <__aeabi_dsub+0x5a8>
 8000c1e:	46a4      	mov	ip, r4
 8000c20:	e11a      	b.n	8000e58 <__aeabi_dsub+0x430>
 8000c22:	003a      	movs	r2, r7
 8000c24:	4302      	orrs	r2, r0
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dsub+0x202>
 8000c28:	e0e4      	b.n	8000df4 <__aeabi_dsub+0x3cc>
 8000c2a:	0022      	movs	r2, r4
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	2c01      	cmp	r4, #1
 8000c30:	d100      	bne.n	8000c34 <__aeabi_dsub+0x20c>
 8000c32:	e1c3      	b.n	8000fbc <__aeabi_dsub+0x594>
 8000c34:	4956      	ldr	r1, [pc, #344]	; (8000d90 <__aeabi_dsub+0x368>)
 8000c36:	428c      	cmp	r4, r1
 8000c38:	d100      	bne.n	8000c3c <__aeabi_dsub+0x214>
 8000c3a:	e0b1      	b.n	8000da0 <__aeabi_dsub+0x378>
 8000c3c:	4694      	mov	ip, r2
 8000c3e:	e72b      	b.n	8000a98 <__aeabi_dsub+0x70>
 8000c40:	2401      	movs	r4, #1
 8000c42:	4061      	eors	r1, r4
 8000c44:	468b      	mov	fp, r1
 8000c46:	428d      	cmp	r5, r1
 8000c48:	d000      	beq.n	8000c4c <__aeabi_dsub+0x224>
 8000c4a:	e716      	b.n	8000a7a <__aeabi_dsub+0x52>
 8000c4c:	4952      	ldr	r1, [pc, #328]	; (8000d98 <__aeabi_dsub+0x370>)
 8000c4e:	468c      	mov	ip, r1
 8000c50:	44b4      	add	ip, r6
 8000c52:	4664      	mov	r4, ip
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dsub+0x232>
 8000c58:	e0d3      	b.n	8000e02 <__aeabi_dsub+0x3da>
 8000c5a:	1b91      	subs	r1, r2, r6
 8000c5c:	468c      	mov	ip, r1
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_dsub+0x23c>
 8000c62:	e15e      	b.n	8000f22 <__aeabi_dsub+0x4fa>
 8000c64:	494a      	ldr	r1, [pc, #296]	; (8000d90 <__aeabi_dsub+0x368>)
 8000c66:	428a      	cmp	r2, r1
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dsub+0x244>
 8000c6a:	e1be      	b.n	8000fea <__aeabi_dsub+0x5c2>
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	464c      	mov	r4, r9
 8000c70:	0409      	lsls	r1, r1, #16
 8000c72:	430c      	orrs	r4, r1
 8000c74:	46a1      	mov	r9, r4
 8000c76:	4661      	mov	r1, ip
 8000c78:	2938      	cmp	r1, #56	; 0x38
 8000c7a:	dd00      	ble.n	8000c7e <__aeabi_dsub+0x256>
 8000c7c:	e1ba      	b.n	8000ff4 <__aeabi_dsub+0x5cc>
 8000c7e:	291f      	cmp	r1, #31
 8000c80:	dd00      	ble.n	8000c84 <__aeabi_dsub+0x25c>
 8000c82:	e227      	b.n	80010d4 <__aeabi_dsub+0x6ac>
 8000c84:	2420      	movs	r4, #32
 8000c86:	1a64      	subs	r4, r4, r1
 8000c88:	4649      	mov	r1, r9
 8000c8a:	40a1      	lsls	r1, r4
 8000c8c:	001e      	movs	r6, r3
 8000c8e:	4688      	mov	r8, r1
 8000c90:	4661      	mov	r1, ip
 8000c92:	40a3      	lsls	r3, r4
 8000c94:	40ce      	lsrs	r6, r1
 8000c96:	4641      	mov	r1, r8
 8000c98:	1e5c      	subs	r4, r3, #1
 8000c9a:	41a3      	sbcs	r3, r4
 8000c9c:	4331      	orrs	r1, r6
 8000c9e:	4319      	orrs	r1, r3
 8000ca0:	000c      	movs	r4, r1
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	4649      	mov	r1, r9
 8000ca6:	40d9      	lsrs	r1, r3
 8000ca8:	187f      	adds	r7, r7, r1
 8000caa:	1824      	adds	r4, r4, r0
 8000cac:	4284      	cmp	r4, r0
 8000cae:	419b      	sbcs	r3, r3
 8000cb0:	425b      	negs	r3, r3
 8000cb2:	469a      	mov	sl, r3
 8000cb4:	0016      	movs	r6, r2
 8000cb6:	44ba      	add	sl, r7
 8000cb8:	e05d      	b.n	8000d76 <__aeabi_dsub+0x34e>
 8000cba:	4c38      	ldr	r4, [pc, #224]	; (8000d9c <__aeabi_dsub+0x374>)
 8000cbc:	1c72      	adds	r2, r6, #1
 8000cbe:	4222      	tst	r2, r4
 8000cc0:	d000      	beq.n	8000cc4 <__aeabi_dsub+0x29c>
 8000cc2:	e0df      	b.n	8000e84 <__aeabi_dsub+0x45c>
 8000cc4:	464a      	mov	r2, r9
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_dsub+0x2a6>
 8000ccc:	e15c      	b.n	8000f88 <__aeabi_dsub+0x560>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dsub+0x2ac>
 8000cd2:	e1cf      	b.n	8001074 <__aeabi_dsub+0x64c>
 8000cd4:	003a      	movs	r2, r7
 8000cd6:	4302      	orrs	r2, r0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dsub+0x2b4>
 8000cda:	e17f      	b.n	8000fdc <__aeabi_dsub+0x5b4>
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	464a      	mov	r2, r9
 8000ce0:	42a3      	cmp	r3, r4
 8000ce2:	4189      	sbcs	r1, r1
 8000ce4:	1bd2      	subs	r2, r2, r7
 8000ce6:	4249      	negs	r1, r1
 8000ce8:	1a52      	subs	r2, r2, r1
 8000cea:	4692      	mov	sl, r2
 8000cec:	0212      	lsls	r2, r2, #8
 8000cee:	d400      	bmi.n	8000cf2 <__aeabi_dsub+0x2ca>
 8000cf0:	e20a      	b.n	8001108 <__aeabi_dsub+0x6e0>
 8000cf2:	1ac4      	subs	r4, r0, r3
 8000cf4:	42a0      	cmp	r0, r4
 8000cf6:	4180      	sbcs	r0, r0
 8000cf8:	464b      	mov	r3, r9
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	1aff      	subs	r7, r7, r3
 8000cfe:	1a3b      	subs	r3, r7, r0
 8000d00:	469a      	mov	sl, r3
 8000d02:	465d      	mov	r5, fp
 8000d04:	e71a      	b.n	8000b3c <__aeabi_dsub+0x114>
 8000d06:	003a      	movs	r2, r7
 8000d08:	4302      	orrs	r2, r0
 8000d0a:	d073      	beq.n	8000df4 <__aeabi_dsub+0x3cc>
 8000d0c:	0022      	movs	r2, r4
 8000d0e:	3a01      	subs	r2, #1
 8000d10:	2c01      	cmp	r4, #1
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dsub+0x2ee>
 8000d14:	e0cb      	b.n	8000eae <__aeabi_dsub+0x486>
 8000d16:	4554      	cmp	r4, sl
 8000d18:	d042      	beq.n	8000da0 <__aeabi_dsub+0x378>
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	e748      	b.n	8000bb0 <__aeabi_dsub+0x188>
 8000d1e:	0010      	movs	r0, r2
 8000d20:	3b1f      	subs	r3, #31
 8000d22:	40d8      	lsrs	r0, r3
 8000d24:	2920      	cmp	r1, #32
 8000d26:	d003      	beq.n	8000d30 <__aeabi_dsub+0x308>
 8000d28:	2340      	movs	r3, #64	; 0x40
 8000d2a:	1a5b      	subs	r3, r3, r1
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	4314      	orrs	r4, r2
 8000d30:	1e63      	subs	r3, r4, #1
 8000d32:	419c      	sbcs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	2600      	movs	r6, #0
 8000d38:	469a      	mov	sl, r3
 8000d3a:	4304      	orrs	r4, r0
 8000d3c:	0763      	lsls	r3, r4, #29
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_dsub+0x31a>
 8000d40:	e6fe      	b.n	8000b40 <__aeabi_dsub+0x118>
 8000d42:	4652      	mov	r2, sl
 8000d44:	08e3      	lsrs	r3, r4, #3
 8000d46:	0752      	lsls	r2, r2, #29
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	4652      	mov	r2, sl
 8000d4c:	46b4      	mov	ip, r6
 8000d4e:	08d2      	lsrs	r2, r2, #3
 8000d50:	490f      	ldr	r1, [pc, #60]	; (8000d90 <__aeabi_dsub+0x368>)
 8000d52:	458c      	cmp	ip, r1
 8000d54:	d02a      	beq.n	8000dac <__aeabi_dsub+0x384>
 8000d56:	0312      	lsls	r2, r2, #12
 8000d58:	0b14      	lsrs	r4, r2, #12
 8000d5a:	4662      	mov	r2, ip
 8000d5c:	0552      	lsls	r2, r2, #21
 8000d5e:	0d52      	lsrs	r2, r2, #21
 8000d60:	e70c      	b.n	8000b7c <__aeabi_dsub+0x154>
 8000d62:	003c      	movs	r4, r7
 8000d64:	4304      	orrs	r4, r0
 8000d66:	1e62      	subs	r2, r4, #1
 8000d68:	4194      	sbcs	r4, r2
 8000d6a:	18e4      	adds	r4, r4, r3
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	4192      	sbcs	r2, r2
 8000d70:	4252      	negs	r2, r2
 8000d72:	444a      	add	r2, r9
 8000d74:	4692      	mov	sl, r2
 8000d76:	4653      	mov	r3, sl
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	d5df      	bpl.n	8000d3c <__aeabi_dsub+0x314>
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__aeabi_dsub+0x368>)
 8000d7e:	3601      	adds	r6, #1
 8000d80:	429e      	cmp	r6, r3
 8000d82:	d000      	beq.n	8000d86 <__aeabi_dsub+0x35e>
 8000d84:	e0a0      	b.n	8000ec8 <__aeabi_dsub+0x4a0>
 8000d86:	0032      	movs	r2, r6
 8000d88:	2400      	movs	r4, #0
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e6f6      	b.n	8000b7c <__aeabi_dsub+0x154>
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	000007ff 	.word	0x000007ff
 8000d94:	ff7fffff 	.word	0xff7fffff
 8000d98:	fffff801 	.word	0xfffff801
 8000d9c:	000007fe 	.word	0x000007fe
 8000da0:	08db      	lsrs	r3, r3, #3
 8000da2:	464a      	mov	r2, r9
 8000da4:	0752      	lsls	r2, r2, #29
 8000da6:	4313      	orrs	r3, r2
 8000da8:	464a      	mov	r2, r9
 8000daa:	08d2      	lsrs	r2, r2, #3
 8000dac:	0019      	movs	r1, r3
 8000dae:	4311      	orrs	r1, r2
 8000db0:	d100      	bne.n	8000db4 <__aeabi_dsub+0x38c>
 8000db2:	e1b5      	b.n	8001120 <__aeabi_dsub+0x6f8>
 8000db4:	2480      	movs	r4, #128	; 0x80
 8000db6:	0324      	lsls	r4, r4, #12
 8000db8:	4314      	orrs	r4, r2
 8000dba:	0324      	lsls	r4, r4, #12
 8000dbc:	4ad5      	ldr	r2, [pc, #852]	; (8001114 <__aeabi_dsub+0x6ec>)
 8000dbe:	0b24      	lsrs	r4, r4, #12
 8000dc0:	e6dc      	b.n	8000b7c <__aeabi_dsub+0x154>
 8000dc2:	0020      	movs	r0, r4
 8000dc4:	f000 fa4c 	bl	8001260 <__clzsi2>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	3318      	adds	r3, #24
 8000dcc:	2b1f      	cmp	r3, #31
 8000dce:	dc00      	bgt.n	8000dd2 <__aeabi_dsub+0x3aa>
 8000dd0:	e695      	b.n	8000afe <__aeabi_dsub+0xd6>
 8000dd2:	0022      	movs	r2, r4
 8000dd4:	3808      	subs	r0, #8
 8000dd6:	4082      	lsls	r2, r0
 8000dd8:	2400      	movs	r4, #0
 8000dda:	429e      	cmp	r6, r3
 8000ddc:	dc00      	bgt.n	8000de0 <__aeabi_dsub+0x3b8>
 8000dde:	e69a      	b.n	8000b16 <__aeabi_dsub+0xee>
 8000de0:	1af6      	subs	r6, r6, r3
 8000de2:	4bcd      	ldr	r3, [pc, #820]	; (8001118 <__aeabi_dsub+0x6f0>)
 8000de4:	401a      	ands	r2, r3
 8000de6:	4692      	mov	sl, r2
 8000de8:	e6a8      	b.n	8000b3c <__aeabi_dsub+0x114>
 8000dea:	003c      	movs	r4, r7
 8000dec:	4304      	orrs	r4, r0
 8000dee:	1e62      	subs	r2, r4, #1
 8000df0:	4194      	sbcs	r4, r2
 8000df2:	e66c      	b.n	8000ace <__aeabi_dsub+0xa6>
 8000df4:	464a      	mov	r2, r9
 8000df6:	08db      	lsrs	r3, r3, #3
 8000df8:	0752      	lsls	r2, r2, #29
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	464a      	mov	r2, r9
 8000dfe:	08d2      	lsrs	r2, r2, #3
 8000e00:	e7a6      	b.n	8000d50 <__aeabi_dsub+0x328>
 8000e02:	4cc6      	ldr	r4, [pc, #792]	; (800111c <__aeabi_dsub+0x6f4>)
 8000e04:	1c72      	adds	r2, r6, #1
 8000e06:	4222      	tst	r2, r4
 8000e08:	d000      	beq.n	8000e0c <__aeabi_dsub+0x3e4>
 8000e0a:	e0ac      	b.n	8000f66 <__aeabi_dsub+0x53e>
 8000e0c:	464a      	mov	r2, r9
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d000      	beq.n	8000e16 <__aeabi_dsub+0x3ee>
 8000e14:	e105      	b.n	8001022 <__aeabi_dsub+0x5fa>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	d100      	bne.n	8000e1c <__aeabi_dsub+0x3f4>
 8000e1a:	e156      	b.n	80010ca <__aeabi_dsub+0x6a2>
 8000e1c:	003a      	movs	r2, r7
 8000e1e:	4302      	orrs	r2, r0
 8000e20:	d100      	bne.n	8000e24 <__aeabi_dsub+0x3fc>
 8000e22:	e0db      	b.n	8000fdc <__aeabi_dsub+0x5b4>
 8000e24:	181c      	adds	r4, r3, r0
 8000e26:	429c      	cmp	r4, r3
 8000e28:	419b      	sbcs	r3, r3
 8000e2a:	444f      	add	r7, r9
 8000e2c:	46ba      	mov	sl, r7
 8000e2e:	425b      	negs	r3, r3
 8000e30:	449a      	add	sl, r3
 8000e32:	4653      	mov	r3, sl
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	d400      	bmi.n	8000e3a <__aeabi_dsub+0x412>
 8000e38:	e780      	b.n	8000d3c <__aeabi_dsub+0x314>
 8000e3a:	4652      	mov	r2, sl
 8000e3c:	4bb6      	ldr	r3, [pc, #728]	; (8001118 <__aeabi_dsub+0x6f0>)
 8000e3e:	2601      	movs	r6, #1
 8000e40:	401a      	ands	r2, r3
 8000e42:	4692      	mov	sl, r2
 8000e44:	e77a      	b.n	8000d3c <__aeabi_dsub+0x314>
 8000e46:	4cb3      	ldr	r4, [pc, #716]	; (8001114 <__aeabi_dsub+0x6ec>)
 8000e48:	42a2      	cmp	r2, r4
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dsub+0x426>
 8000e4c:	e0c0      	b.n	8000fd0 <__aeabi_dsub+0x5a8>
 8000e4e:	2480      	movs	r4, #128	; 0x80
 8000e50:	464d      	mov	r5, r9
 8000e52:	0424      	lsls	r4, r4, #16
 8000e54:	4325      	orrs	r5, r4
 8000e56:	46a9      	mov	r9, r5
 8000e58:	4664      	mov	r4, ip
 8000e5a:	2c38      	cmp	r4, #56	; 0x38
 8000e5c:	dc53      	bgt.n	8000f06 <__aeabi_dsub+0x4de>
 8000e5e:	4661      	mov	r1, ip
 8000e60:	2c1f      	cmp	r4, #31
 8000e62:	dd00      	ble.n	8000e66 <__aeabi_dsub+0x43e>
 8000e64:	e0cd      	b.n	8001002 <__aeabi_dsub+0x5da>
 8000e66:	2520      	movs	r5, #32
 8000e68:	001e      	movs	r6, r3
 8000e6a:	1b2d      	subs	r5, r5, r4
 8000e6c:	464c      	mov	r4, r9
 8000e6e:	40ab      	lsls	r3, r5
 8000e70:	40ac      	lsls	r4, r5
 8000e72:	40ce      	lsrs	r6, r1
 8000e74:	1e5d      	subs	r5, r3, #1
 8000e76:	41ab      	sbcs	r3, r5
 8000e78:	4334      	orrs	r4, r6
 8000e7a:	4323      	orrs	r3, r4
 8000e7c:	464c      	mov	r4, r9
 8000e7e:	40cc      	lsrs	r4, r1
 8000e80:	1b3f      	subs	r7, r7, r4
 8000e82:	e045      	b.n	8000f10 <__aeabi_dsub+0x4e8>
 8000e84:	464a      	mov	r2, r9
 8000e86:	1a1c      	subs	r4, r3, r0
 8000e88:	1bd1      	subs	r1, r2, r7
 8000e8a:	42a3      	cmp	r3, r4
 8000e8c:	4192      	sbcs	r2, r2
 8000e8e:	4252      	negs	r2, r2
 8000e90:	4692      	mov	sl, r2
 8000e92:	000a      	movs	r2, r1
 8000e94:	4651      	mov	r1, sl
 8000e96:	1a52      	subs	r2, r2, r1
 8000e98:	4692      	mov	sl, r2
 8000e9a:	0212      	lsls	r2, r2, #8
 8000e9c:	d500      	bpl.n	8000ea0 <__aeabi_dsub+0x478>
 8000e9e:	e083      	b.n	8000fa8 <__aeabi_dsub+0x580>
 8000ea0:	4653      	mov	r3, sl
 8000ea2:	4323      	orrs	r3, r4
 8000ea4:	d000      	beq.n	8000ea8 <__aeabi_dsub+0x480>
 8000ea6:	e621      	b.n	8000aec <__aeabi_dsub+0xc4>
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2500      	movs	r5, #0
 8000eac:	e753      	b.n	8000d56 <__aeabi_dsub+0x32e>
 8000eae:	181c      	adds	r4, r3, r0
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	419b      	sbcs	r3, r3
 8000eb4:	444f      	add	r7, r9
 8000eb6:	46ba      	mov	sl, r7
 8000eb8:	425b      	negs	r3, r3
 8000eba:	449a      	add	sl, r3
 8000ebc:	4653      	mov	r3, sl
 8000ebe:	2601      	movs	r6, #1
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	d400      	bmi.n	8000ec6 <__aeabi_dsub+0x49e>
 8000ec4:	e73a      	b.n	8000d3c <__aeabi_dsub+0x314>
 8000ec6:	2602      	movs	r6, #2
 8000ec8:	4652      	mov	r2, sl
 8000eca:	4b93      	ldr	r3, [pc, #588]	; (8001118 <__aeabi_dsub+0x6f0>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	401a      	ands	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	4021      	ands	r1, r4
 8000ed4:	0862      	lsrs	r2, r4, #1
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	07dc      	lsls	r4, r3, #31
 8000eda:	085b      	lsrs	r3, r3, #1
 8000edc:	469a      	mov	sl, r3
 8000ede:	4314      	orrs	r4, r2
 8000ee0:	e62c      	b.n	8000b3c <__aeabi_dsub+0x114>
 8000ee2:	0039      	movs	r1, r7
 8000ee4:	3a20      	subs	r2, #32
 8000ee6:	40d1      	lsrs	r1, r2
 8000ee8:	4662      	mov	r2, ip
 8000eea:	2a20      	cmp	r2, #32
 8000eec:	d006      	beq.n	8000efc <__aeabi_dsub+0x4d4>
 8000eee:	4664      	mov	r4, ip
 8000ef0:	2240      	movs	r2, #64	; 0x40
 8000ef2:	1b12      	subs	r2, r2, r4
 8000ef4:	003c      	movs	r4, r7
 8000ef6:	4094      	lsls	r4, r2
 8000ef8:	4304      	orrs	r4, r0
 8000efa:	9401      	str	r4, [sp, #4]
 8000efc:	9c01      	ldr	r4, [sp, #4]
 8000efe:	1e62      	subs	r2, r4, #1
 8000f00:	4194      	sbcs	r4, r2
 8000f02:	430c      	orrs	r4, r1
 8000f04:	e5e3      	b.n	8000ace <__aeabi_dsub+0xa6>
 8000f06:	4649      	mov	r1, r9
 8000f08:	4319      	orrs	r1, r3
 8000f0a:	000b      	movs	r3, r1
 8000f0c:	1e5c      	subs	r4, r3, #1
 8000f0e:	41a3      	sbcs	r3, r4
 8000f10:	1ac4      	subs	r4, r0, r3
 8000f12:	42a0      	cmp	r0, r4
 8000f14:	419b      	sbcs	r3, r3
 8000f16:	425b      	negs	r3, r3
 8000f18:	1afb      	subs	r3, r7, r3
 8000f1a:	469a      	mov	sl, r3
 8000f1c:	465d      	mov	r5, fp
 8000f1e:	0016      	movs	r6, r2
 8000f20:	e5dc      	b.n	8000adc <__aeabi_dsub+0xb4>
 8000f22:	4649      	mov	r1, r9
 8000f24:	4319      	orrs	r1, r3
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dsub+0x502>
 8000f28:	e0ae      	b.n	8001088 <__aeabi_dsub+0x660>
 8000f2a:	4661      	mov	r1, ip
 8000f2c:	4664      	mov	r4, ip
 8000f2e:	3901      	subs	r1, #1
 8000f30:	2c01      	cmp	r4, #1
 8000f32:	d100      	bne.n	8000f36 <__aeabi_dsub+0x50e>
 8000f34:	e0e0      	b.n	80010f8 <__aeabi_dsub+0x6d0>
 8000f36:	4c77      	ldr	r4, [pc, #476]	; (8001114 <__aeabi_dsub+0x6ec>)
 8000f38:	45a4      	cmp	ip, r4
 8000f3a:	d056      	beq.n	8000fea <__aeabi_dsub+0x5c2>
 8000f3c:	468c      	mov	ip, r1
 8000f3e:	e69a      	b.n	8000c76 <__aeabi_dsub+0x24e>
 8000f40:	4661      	mov	r1, ip
 8000f42:	2220      	movs	r2, #32
 8000f44:	003c      	movs	r4, r7
 8000f46:	1a52      	subs	r2, r2, r1
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	0001      	movs	r1, r0
 8000f4c:	4090      	lsls	r0, r2
 8000f4e:	46a0      	mov	r8, r4
 8000f50:	4664      	mov	r4, ip
 8000f52:	1e42      	subs	r2, r0, #1
 8000f54:	4190      	sbcs	r0, r2
 8000f56:	4662      	mov	r2, ip
 8000f58:	40e1      	lsrs	r1, r4
 8000f5a:	4644      	mov	r4, r8
 8000f5c:	40d7      	lsrs	r7, r2
 8000f5e:	430c      	orrs	r4, r1
 8000f60:	4304      	orrs	r4, r0
 8000f62:	44b9      	add	r9, r7
 8000f64:	e701      	b.n	8000d6a <__aeabi_dsub+0x342>
 8000f66:	496b      	ldr	r1, [pc, #428]	; (8001114 <__aeabi_dsub+0x6ec>)
 8000f68:	428a      	cmp	r2, r1
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_dsub+0x546>
 8000f6c:	e70c      	b.n	8000d88 <__aeabi_dsub+0x360>
 8000f6e:	1818      	adds	r0, r3, r0
 8000f70:	4298      	cmp	r0, r3
 8000f72:	419b      	sbcs	r3, r3
 8000f74:	444f      	add	r7, r9
 8000f76:	425b      	negs	r3, r3
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	07dc      	lsls	r4, r3, #31
 8000f7c:	0840      	lsrs	r0, r0, #1
 8000f7e:	085b      	lsrs	r3, r3, #1
 8000f80:	469a      	mov	sl, r3
 8000f82:	0016      	movs	r6, r2
 8000f84:	4304      	orrs	r4, r0
 8000f86:	e6d9      	b.n	8000d3c <__aeabi_dsub+0x314>
 8000f88:	2a00      	cmp	r2, #0
 8000f8a:	d000      	beq.n	8000f8e <__aeabi_dsub+0x566>
 8000f8c:	e081      	b.n	8001092 <__aeabi_dsub+0x66a>
 8000f8e:	003b      	movs	r3, r7
 8000f90:	4303      	orrs	r3, r0
 8000f92:	d11d      	bne.n	8000fd0 <__aeabi_dsub+0x5a8>
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	2500      	movs	r5, #0
 8000f98:	0312      	lsls	r2, r2, #12
 8000f9a:	e70b      	b.n	8000db4 <__aeabi_dsub+0x38c>
 8000f9c:	08c0      	lsrs	r0, r0, #3
 8000f9e:	077b      	lsls	r3, r7, #29
 8000fa0:	465d      	mov	r5, fp
 8000fa2:	4303      	orrs	r3, r0
 8000fa4:	08fa      	lsrs	r2, r7, #3
 8000fa6:	e6d3      	b.n	8000d50 <__aeabi_dsub+0x328>
 8000fa8:	1ac4      	subs	r4, r0, r3
 8000faa:	42a0      	cmp	r0, r4
 8000fac:	4180      	sbcs	r0, r0
 8000fae:	464b      	mov	r3, r9
 8000fb0:	4240      	negs	r0, r0
 8000fb2:	1aff      	subs	r7, r7, r3
 8000fb4:	1a3b      	subs	r3, r7, r0
 8000fb6:	469a      	mov	sl, r3
 8000fb8:	465d      	mov	r5, fp
 8000fba:	e597      	b.n	8000aec <__aeabi_dsub+0xc4>
 8000fbc:	1a1c      	subs	r4, r3, r0
 8000fbe:	464a      	mov	r2, r9
 8000fc0:	42a3      	cmp	r3, r4
 8000fc2:	419b      	sbcs	r3, r3
 8000fc4:	1bd7      	subs	r7, r2, r7
 8000fc6:	425b      	negs	r3, r3
 8000fc8:	1afb      	subs	r3, r7, r3
 8000fca:	469a      	mov	sl, r3
 8000fcc:	2601      	movs	r6, #1
 8000fce:	e585      	b.n	8000adc <__aeabi_dsub+0xb4>
 8000fd0:	08c0      	lsrs	r0, r0, #3
 8000fd2:	077b      	lsls	r3, r7, #29
 8000fd4:	465d      	mov	r5, fp
 8000fd6:	4303      	orrs	r3, r0
 8000fd8:	08fa      	lsrs	r2, r7, #3
 8000fda:	e6e7      	b.n	8000dac <__aeabi_dsub+0x384>
 8000fdc:	464a      	mov	r2, r9
 8000fde:	08db      	lsrs	r3, r3, #3
 8000fe0:	0752      	lsls	r2, r2, #29
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	464a      	mov	r2, r9
 8000fe6:	08d2      	lsrs	r2, r2, #3
 8000fe8:	e6b5      	b.n	8000d56 <__aeabi_dsub+0x32e>
 8000fea:	08c0      	lsrs	r0, r0, #3
 8000fec:	077b      	lsls	r3, r7, #29
 8000fee:	4303      	orrs	r3, r0
 8000ff0:	08fa      	lsrs	r2, r7, #3
 8000ff2:	e6db      	b.n	8000dac <__aeabi_dsub+0x384>
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	4319      	orrs	r1, r3
 8000ff8:	000b      	movs	r3, r1
 8000ffa:	1e59      	subs	r1, r3, #1
 8000ffc:	418b      	sbcs	r3, r1
 8000ffe:	001c      	movs	r4, r3
 8001000:	e653      	b.n	8000caa <__aeabi_dsub+0x282>
 8001002:	464d      	mov	r5, r9
 8001004:	3c20      	subs	r4, #32
 8001006:	40e5      	lsrs	r5, r4
 8001008:	2920      	cmp	r1, #32
 800100a:	d005      	beq.n	8001018 <__aeabi_dsub+0x5f0>
 800100c:	2440      	movs	r4, #64	; 0x40
 800100e:	1a64      	subs	r4, r4, r1
 8001010:	4649      	mov	r1, r9
 8001012:	40a1      	lsls	r1, r4
 8001014:	430b      	orrs	r3, r1
 8001016:	4698      	mov	r8, r3
 8001018:	4643      	mov	r3, r8
 800101a:	1e5c      	subs	r4, r3, #1
 800101c:	41a3      	sbcs	r3, r4
 800101e:	432b      	orrs	r3, r5
 8001020:	e776      	b.n	8000f10 <__aeabi_dsub+0x4e8>
 8001022:	2a00      	cmp	r2, #0
 8001024:	d0e1      	beq.n	8000fea <__aeabi_dsub+0x5c2>
 8001026:	003a      	movs	r2, r7
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	4302      	orrs	r2, r0
 800102c:	d100      	bne.n	8001030 <__aeabi_dsub+0x608>
 800102e:	e6b8      	b.n	8000da2 <__aeabi_dsub+0x37a>
 8001030:	464a      	mov	r2, r9
 8001032:	0752      	lsls	r2, r2, #29
 8001034:	2480      	movs	r4, #128	; 0x80
 8001036:	4313      	orrs	r3, r2
 8001038:	464a      	mov	r2, r9
 800103a:	0324      	lsls	r4, r4, #12
 800103c:	08d2      	lsrs	r2, r2, #3
 800103e:	4222      	tst	r2, r4
 8001040:	d007      	beq.n	8001052 <__aeabi_dsub+0x62a>
 8001042:	08fe      	lsrs	r6, r7, #3
 8001044:	4226      	tst	r6, r4
 8001046:	d104      	bne.n	8001052 <__aeabi_dsub+0x62a>
 8001048:	465d      	mov	r5, fp
 800104a:	0032      	movs	r2, r6
 800104c:	08c3      	lsrs	r3, r0, #3
 800104e:	077f      	lsls	r7, r7, #29
 8001050:	433b      	orrs	r3, r7
 8001052:	0f59      	lsrs	r1, r3, #29
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	0749      	lsls	r1, r1, #29
 8001058:	08db      	lsrs	r3, r3, #3
 800105a:	430b      	orrs	r3, r1
 800105c:	e6a6      	b.n	8000dac <__aeabi_dsub+0x384>
 800105e:	1ac4      	subs	r4, r0, r3
 8001060:	42a0      	cmp	r0, r4
 8001062:	4180      	sbcs	r0, r0
 8001064:	464b      	mov	r3, r9
 8001066:	4240      	negs	r0, r0
 8001068:	1aff      	subs	r7, r7, r3
 800106a:	1a3b      	subs	r3, r7, r0
 800106c:	469a      	mov	sl, r3
 800106e:	465d      	mov	r5, fp
 8001070:	2601      	movs	r6, #1
 8001072:	e533      	b.n	8000adc <__aeabi_dsub+0xb4>
 8001074:	003b      	movs	r3, r7
 8001076:	4303      	orrs	r3, r0
 8001078:	d100      	bne.n	800107c <__aeabi_dsub+0x654>
 800107a:	e715      	b.n	8000ea8 <__aeabi_dsub+0x480>
 800107c:	08c0      	lsrs	r0, r0, #3
 800107e:	077b      	lsls	r3, r7, #29
 8001080:	465d      	mov	r5, fp
 8001082:	4303      	orrs	r3, r0
 8001084:	08fa      	lsrs	r2, r7, #3
 8001086:	e666      	b.n	8000d56 <__aeabi_dsub+0x32e>
 8001088:	08c0      	lsrs	r0, r0, #3
 800108a:	077b      	lsls	r3, r7, #29
 800108c:	4303      	orrs	r3, r0
 800108e:	08fa      	lsrs	r2, r7, #3
 8001090:	e65e      	b.n	8000d50 <__aeabi_dsub+0x328>
 8001092:	003a      	movs	r2, r7
 8001094:	08db      	lsrs	r3, r3, #3
 8001096:	4302      	orrs	r2, r0
 8001098:	d100      	bne.n	800109c <__aeabi_dsub+0x674>
 800109a:	e682      	b.n	8000da2 <__aeabi_dsub+0x37a>
 800109c:	464a      	mov	r2, r9
 800109e:	0752      	lsls	r2, r2, #29
 80010a0:	2480      	movs	r4, #128	; 0x80
 80010a2:	4313      	orrs	r3, r2
 80010a4:	464a      	mov	r2, r9
 80010a6:	0324      	lsls	r4, r4, #12
 80010a8:	08d2      	lsrs	r2, r2, #3
 80010aa:	4222      	tst	r2, r4
 80010ac:	d007      	beq.n	80010be <__aeabi_dsub+0x696>
 80010ae:	08fe      	lsrs	r6, r7, #3
 80010b0:	4226      	tst	r6, r4
 80010b2:	d104      	bne.n	80010be <__aeabi_dsub+0x696>
 80010b4:	465d      	mov	r5, fp
 80010b6:	0032      	movs	r2, r6
 80010b8:	08c3      	lsrs	r3, r0, #3
 80010ba:	077f      	lsls	r7, r7, #29
 80010bc:	433b      	orrs	r3, r7
 80010be:	0f59      	lsrs	r1, r3, #29
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	08db      	lsrs	r3, r3, #3
 80010c4:	0749      	lsls	r1, r1, #29
 80010c6:	430b      	orrs	r3, r1
 80010c8:	e670      	b.n	8000dac <__aeabi_dsub+0x384>
 80010ca:	08c0      	lsrs	r0, r0, #3
 80010cc:	077b      	lsls	r3, r7, #29
 80010ce:	4303      	orrs	r3, r0
 80010d0:	08fa      	lsrs	r2, r7, #3
 80010d2:	e640      	b.n	8000d56 <__aeabi_dsub+0x32e>
 80010d4:	464c      	mov	r4, r9
 80010d6:	3920      	subs	r1, #32
 80010d8:	40cc      	lsrs	r4, r1
 80010da:	4661      	mov	r1, ip
 80010dc:	2920      	cmp	r1, #32
 80010de:	d006      	beq.n	80010ee <__aeabi_dsub+0x6c6>
 80010e0:	4666      	mov	r6, ip
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	1b89      	subs	r1, r1, r6
 80010e6:	464e      	mov	r6, r9
 80010e8:	408e      	lsls	r6, r1
 80010ea:	4333      	orrs	r3, r6
 80010ec:	4698      	mov	r8, r3
 80010ee:	4643      	mov	r3, r8
 80010f0:	1e59      	subs	r1, r3, #1
 80010f2:	418b      	sbcs	r3, r1
 80010f4:	431c      	orrs	r4, r3
 80010f6:	e5d8      	b.n	8000caa <__aeabi_dsub+0x282>
 80010f8:	181c      	adds	r4, r3, r0
 80010fa:	4284      	cmp	r4, r0
 80010fc:	4180      	sbcs	r0, r0
 80010fe:	444f      	add	r7, r9
 8001100:	46ba      	mov	sl, r7
 8001102:	4240      	negs	r0, r0
 8001104:	4482      	add	sl, r0
 8001106:	e6d9      	b.n	8000ebc <__aeabi_dsub+0x494>
 8001108:	4653      	mov	r3, sl
 800110a:	4323      	orrs	r3, r4
 800110c:	d100      	bne.n	8001110 <__aeabi_dsub+0x6e8>
 800110e:	e6cb      	b.n	8000ea8 <__aeabi_dsub+0x480>
 8001110:	e614      	b.n	8000d3c <__aeabi_dsub+0x314>
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	000007ff 	.word	0x000007ff
 8001118:	ff7fffff 	.word	0xff7fffff
 800111c:	000007fe 	.word	0x000007fe
 8001120:	2300      	movs	r3, #0
 8001122:	4a01      	ldr	r2, [pc, #4]	; (8001128 <__aeabi_dsub+0x700>)
 8001124:	001c      	movs	r4, r3
 8001126:	e529      	b.n	8000b7c <__aeabi_dsub+0x154>
 8001128:	000007ff 	.word	0x000007ff

0800112c <__aeabi_d2iz>:
 800112c:	000a      	movs	r2, r1
 800112e:	b530      	push	{r4, r5, lr}
 8001130:	4c13      	ldr	r4, [pc, #76]	; (8001180 <__aeabi_d2iz+0x54>)
 8001132:	0053      	lsls	r3, r2, #1
 8001134:	0309      	lsls	r1, r1, #12
 8001136:	0005      	movs	r5, r0
 8001138:	0b09      	lsrs	r1, r1, #12
 800113a:	2000      	movs	r0, #0
 800113c:	0d5b      	lsrs	r3, r3, #21
 800113e:	0fd2      	lsrs	r2, r2, #31
 8001140:	42a3      	cmp	r3, r4
 8001142:	dd04      	ble.n	800114e <__aeabi_d2iz+0x22>
 8001144:	480f      	ldr	r0, [pc, #60]	; (8001184 <__aeabi_d2iz+0x58>)
 8001146:	4283      	cmp	r3, r0
 8001148:	dd02      	ble.n	8001150 <__aeabi_d2iz+0x24>
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <__aeabi_d2iz+0x5c>)
 800114c:	18d0      	adds	r0, r2, r3
 800114e:	bd30      	pop	{r4, r5, pc}
 8001150:	2080      	movs	r0, #128	; 0x80
 8001152:	0340      	lsls	r0, r0, #13
 8001154:	4301      	orrs	r1, r0
 8001156:	480d      	ldr	r0, [pc, #52]	; (800118c <__aeabi_d2iz+0x60>)
 8001158:	1ac0      	subs	r0, r0, r3
 800115a:	281f      	cmp	r0, #31
 800115c:	dd08      	ble.n	8001170 <__aeabi_d2iz+0x44>
 800115e:	480c      	ldr	r0, [pc, #48]	; (8001190 <__aeabi_d2iz+0x64>)
 8001160:	1ac3      	subs	r3, r0, r3
 8001162:	40d9      	lsrs	r1, r3
 8001164:	000b      	movs	r3, r1
 8001166:	4258      	negs	r0, r3
 8001168:	2a00      	cmp	r2, #0
 800116a:	d1f0      	bne.n	800114e <__aeabi_d2iz+0x22>
 800116c:	0018      	movs	r0, r3
 800116e:	e7ee      	b.n	800114e <__aeabi_d2iz+0x22>
 8001170:	4c08      	ldr	r4, [pc, #32]	; (8001194 <__aeabi_d2iz+0x68>)
 8001172:	40c5      	lsrs	r5, r0
 8001174:	46a4      	mov	ip, r4
 8001176:	4463      	add	r3, ip
 8001178:	4099      	lsls	r1, r3
 800117a:	000b      	movs	r3, r1
 800117c:	432b      	orrs	r3, r5
 800117e:	e7f2      	b.n	8001166 <__aeabi_d2iz+0x3a>
 8001180:	000003fe 	.word	0x000003fe
 8001184:	0000041d 	.word	0x0000041d
 8001188:	7fffffff 	.word	0x7fffffff
 800118c:	00000433 	.word	0x00000433
 8001190:	00000413 	.word	0x00000413
 8001194:	fffffbed 	.word	0xfffffbed

08001198 <__aeabi_ui2d>:
 8001198:	b510      	push	{r4, lr}
 800119a:	1e04      	subs	r4, r0, #0
 800119c:	d010      	beq.n	80011c0 <__aeabi_ui2d+0x28>
 800119e:	f000 f85f 	bl	8001260 <__clzsi2>
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <__aeabi_ui2d+0x48>)
 80011a4:	1a1b      	subs	r3, r3, r0
 80011a6:	280a      	cmp	r0, #10
 80011a8:	dc11      	bgt.n	80011ce <__aeabi_ui2d+0x36>
 80011aa:	220b      	movs	r2, #11
 80011ac:	0021      	movs	r1, r4
 80011ae:	1a12      	subs	r2, r2, r0
 80011b0:	40d1      	lsrs	r1, r2
 80011b2:	3015      	adds	r0, #21
 80011b4:	030a      	lsls	r2, r1, #12
 80011b6:	055b      	lsls	r3, r3, #21
 80011b8:	4084      	lsls	r4, r0
 80011ba:	0b12      	lsrs	r2, r2, #12
 80011bc:	0d5b      	lsrs	r3, r3, #21
 80011be:	e001      	b.n	80011c4 <__aeabi_ui2d+0x2c>
 80011c0:	2300      	movs	r3, #0
 80011c2:	2200      	movs	r2, #0
 80011c4:	051b      	lsls	r3, r3, #20
 80011c6:	4313      	orrs	r3, r2
 80011c8:	0020      	movs	r0, r4
 80011ca:	0019      	movs	r1, r3
 80011cc:	bd10      	pop	{r4, pc}
 80011ce:	0022      	movs	r2, r4
 80011d0:	380b      	subs	r0, #11
 80011d2:	4082      	lsls	r2, r0
 80011d4:	055b      	lsls	r3, r3, #21
 80011d6:	0312      	lsls	r2, r2, #12
 80011d8:	2400      	movs	r4, #0
 80011da:	0b12      	lsrs	r2, r2, #12
 80011dc:	0d5b      	lsrs	r3, r3, #21
 80011de:	e7f1      	b.n	80011c4 <__aeabi_ui2d+0x2c>
 80011e0:	0000041e 	.word	0x0000041e

080011e4 <__aeabi_cdrcmple>:
 80011e4:	4684      	mov	ip, r0
 80011e6:	0010      	movs	r0, r2
 80011e8:	4662      	mov	r2, ip
 80011ea:	468c      	mov	ip, r1
 80011ec:	0019      	movs	r1, r3
 80011ee:	4663      	mov	r3, ip
 80011f0:	e000      	b.n	80011f4 <__aeabi_cdcmpeq>
 80011f2:	46c0      	nop			; (mov r8, r8)

080011f4 <__aeabi_cdcmpeq>:
 80011f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80011f6:	f000 f905 	bl	8001404 <__ledf2>
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d401      	bmi.n	8001202 <__aeabi_cdcmpeq+0xe>
 80011fe:	2100      	movs	r1, #0
 8001200:	42c8      	cmn	r0, r1
 8001202:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001204 <__aeabi_dcmpeq>:
 8001204:	b510      	push	{r4, lr}
 8001206:	f000 f855 	bl	80012b4 <__eqdf2>
 800120a:	4240      	negs	r0, r0
 800120c:	3001      	adds	r0, #1
 800120e:	bd10      	pop	{r4, pc}

08001210 <__aeabi_dcmplt>:
 8001210:	b510      	push	{r4, lr}
 8001212:	f000 f8f7 	bl	8001404 <__ledf2>
 8001216:	2800      	cmp	r0, #0
 8001218:	db01      	blt.n	800121e <__aeabi_dcmplt+0xe>
 800121a:	2000      	movs	r0, #0
 800121c:	bd10      	pop	{r4, pc}
 800121e:	2001      	movs	r0, #1
 8001220:	bd10      	pop	{r4, pc}
 8001222:	46c0      	nop			; (mov r8, r8)

08001224 <__aeabi_dcmple>:
 8001224:	b510      	push	{r4, lr}
 8001226:	f000 f8ed 	bl	8001404 <__ledf2>
 800122a:	2800      	cmp	r0, #0
 800122c:	dd01      	ble.n	8001232 <__aeabi_dcmple+0xe>
 800122e:	2000      	movs	r0, #0
 8001230:	bd10      	pop	{r4, pc}
 8001232:	2001      	movs	r0, #1
 8001234:	bd10      	pop	{r4, pc}
 8001236:	46c0      	nop			; (mov r8, r8)

08001238 <__aeabi_dcmpgt>:
 8001238:	b510      	push	{r4, lr}
 800123a:	f000 f87d 	bl	8001338 <__gedf2>
 800123e:	2800      	cmp	r0, #0
 8001240:	dc01      	bgt.n	8001246 <__aeabi_dcmpgt+0xe>
 8001242:	2000      	movs	r0, #0
 8001244:	bd10      	pop	{r4, pc}
 8001246:	2001      	movs	r0, #1
 8001248:	bd10      	pop	{r4, pc}
 800124a:	46c0      	nop			; (mov r8, r8)

0800124c <__aeabi_dcmpge>:
 800124c:	b510      	push	{r4, lr}
 800124e:	f000 f873 	bl	8001338 <__gedf2>
 8001252:	2800      	cmp	r0, #0
 8001254:	da01      	bge.n	800125a <__aeabi_dcmpge+0xe>
 8001256:	2000      	movs	r0, #0
 8001258:	bd10      	pop	{r4, pc}
 800125a:	2001      	movs	r0, #1
 800125c:	bd10      	pop	{r4, pc}
 800125e:	46c0      	nop			; (mov r8, r8)

08001260 <__clzsi2>:
 8001260:	211c      	movs	r1, #28
 8001262:	2301      	movs	r3, #1
 8001264:	041b      	lsls	r3, r3, #16
 8001266:	4298      	cmp	r0, r3
 8001268:	d301      	bcc.n	800126e <__clzsi2+0xe>
 800126a:	0c00      	lsrs	r0, r0, #16
 800126c:	3910      	subs	r1, #16
 800126e:	0a1b      	lsrs	r3, r3, #8
 8001270:	4298      	cmp	r0, r3
 8001272:	d301      	bcc.n	8001278 <__clzsi2+0x18>
 8001274:	0a00      	lsrs	r0, r0, #8
 8001276:	3908      	subs	r1, #8
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	4298      	cmp	r0, r3
 800127c:	d301      	bcc.n	8001282 <__clzsi2+0x22>
 800127e:	0900      	lsrs	r0, r0, #4
 8001280:	3904      	subs	r1, #4
 8001282:	a202      	add	r2, pc, #8	; (adr r2, 800128c <__clzsi2+0x2c>)
 8001284:	5c10      	ldrb	r0, [r2, r0]
 8001286:	1840      	adds	r0, r0, r1
 8001288:	4770      	bx	lr
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	02020304 	.word	0x02020304
 8001290:	01010101 	.word	0x01010101
	...

0800129c <__clzdi2>:
 800129c:	b510      	push	{r4, lr}
 800129e:	2900      	cmp	r1, #0
 80012a0:	d103      	bne.n	80012aa <__clzdi2+0xe>
 80012a2:	f7ff ffdd 	bl	8001260 <__clzsi2>
 80012a6:	3020      	adds	r0, #32
 80012a8:	e002      	b.n	80012b0 <__clzdi2+0x14>
 80012aa:	0008      	movs	r0, r1
 80012ac:	f7ff ffd8 	bl	8001260 <__clzsi2>
 80012b0:	bd10      	pop	{r4, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)

080012b4 <__eqdf2>:
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b6:	464e      	mov	r6, r9
 80012b8:	4645      	mov	r5, r8
 80012ba:	46de      	mov	lr, fp
 80012bc:	4657      	mov	r7, sl
 80012be:	4690      	mov	r8, r2
 80012c0:	b5e0      	push	{r5, r6, r7, lr}
 80012c2:	0017      	movs	r7, r2
 80012c4:	031a      	lsls	r2, r3, #12
 80012c6:	0b12      	lsrs	r2, r2, #12
 80012c8:	0005      	movs	r5, r0
 80012ca:	4684      	mov	ip, r0
 80012cc:	4819      	ldr	r0, [pc, #100]	; (8001334 <__eqdf2+0x80>)
 80012ce:	030e      	lsls	r6, r1, #12
 80012d0:	004c      	lsls	r4, r1, #1
 80012d2:	4691      	mov	r9, r2
 80012d4:	005a      	lsls	r2, r3, #1
 80012d6:	0fdb      	lsrs	r3, r3, #31
 80012d8:	469b      	mov	fp, r3
 80012da:	0b36      	lsrs	r6, r6, #12
 80012dc:	0d64      	lsrs	r4, r4, #21
 80012de:	0fc9      	lsrs	r1, r1, #31
 80012e0:	0d52      	lsrs	r2, r2, #21
 80012e2:	4284      	cmp	r4, r0
 80012e4:	d019      	beq.n	800131a <__eqdf2+0x66>
 80012e6:	4282      	cmp	r2, r0
 80012e8:	d010      	beq.n	800130c <__eqdf2+0x58>
 80012ea:	2001      	movs	r0, #1
 80012ec:	4294      	cmp	r4, r2
 80012ee:	d10e      	bne.n	800130e <__eqdf2+0x5a>
 80012f0:	454e      	cmp	r6, r9
 80012f2:	d10c      	bne.n	800130e <__eqdf2+0x5a>
 80012f4:	2001      	movs	r0, #1
 80012f6:	45c4      	cmp	ip, r8
 80012f8:	d109      	bne.n	800130e <__eqdf2+0x5a>
 80012fa:	4559      	cmp	r1, fp
 80012fc:	d017      	beq.n	800132e <__eqdf2+0x7a>
 80012fe:	2c00      	cmp	r4, #0
 8001300:	d105      	bne.n	800130e <__eqdf2+0x5a>
 8001302:	0030      	movs	r0, r6
 8001304:	4328      	orrs	r0, r5
 8001306:	1e43      	subs	r3, r0, #1
 8001308:	4198      	sbcs	r0, r3
 800130a:	e000      	b.n	800130e <__eqdf2+0x5a>
 800130c:	2001      	movs	r0, #1
 800130e:	bcf0      	pop	{r4, r5, r6, r7}
 8001310:	46bb      	mov	fp, r7
 8001312:	46b2      	mov	sl, r6
 8001314:	46a9      	mov	r9, r5
 8001316:	46a0      	mov	r8, r4
 8001318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800131a:	0033      	movs	r3, r6
 800131c:	2001      	movs	r0, #1
 800131e:	432b      	orrs	r3, r5
 8001320:	d1f5      	bne.n	800130e <__eqdf2+0x5a>
 8001322:	42a2      	cmp	r2, r4
 8001324:	d1f3      	bne.n	800130e <__eqdf2+0x5a>
 8001326:	464b      	mov	r3, r9
 8001328:	433b      	orrs	r3, r7
 800132a:	d1f0      	bne.n	800130e <__eqdf2+0x5a>
 800132c:	e7e2      	b.n	80012f4 <__eqdf2+0x40>
 800132e:	2000      	movs	r0, #0
 8001330:	e7ed      	b.n	800130e <__eqdf2+0x5a>
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	000007ff 	.word	0x000007ff

08001338 <__gedf2>:
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	4647      	mov	r7, r8
 800133c:	46ce      	mov	lr, r9
 800133e:	0004      	movs	r4, r0
 8001340:	0018      	movs	r0, r3
 8001342:	0016      	movs	r6, r2
 8001344:	031b      	lsls	r3, r3, #12
 8001346:	0b1b      	lsrs	r3, r3, #12
 8001348:	4d2d      	ldr	r5, [pc, #180]	; (8001400 <__gedf2+0xc8>)
 800134a:	004a      	lsls	r2, r1, #1
 800134c:	4699      	mov	r9, r3
 800134e:	b580      	push	{r7, lr}
 8001350:	0043      	lsls	r3, r0, #1
 8001352:	030f      	lsls	r7, r1, #12
 8001354:	46a4      	mov	ip, r4
 8001356:	46b0      	mov	r8, r6
 8001358:	0b3f      	lsrs	r7, r7, #12
 800135a:	0d52      	lsrs	r2, r2, #21
 800135c:	0fc9      	lsrs	r1, r1, #31
 800135e:	0d5b      	lsrs	r3, r3, #21
 8001360:	0fc0      	lsrs	r0, r0, #31
 8001362:	42aa      	cmp	r2, r5
 8001364:	d021      	beq.n	80013aa <__gedf2+0x72>
 8001366:	42ab      	cmp	r3, r5
 8001368:	d013      	beq.n	8001392 <__gedf2+0x5a>
 800136a:	2a00      	cmp	r2, #0
 800136c:	d122      	bne.n	80013b4 <__gedf2+0x7c>
 800136e:	433c      	orrs	r4, r7
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <__gedf2+0x42>
 8001374:	464d      	mov	r5, r9
 8001376:	432e      	orrs	r6, r5
 8001378:	d022      	beq.n	80013c0 <__gedf2+0x88>
 800137a:	2c00      	cmp	r4, #0
 800137c:	d010      	beq.n	80013a0 <__gedf2+0x68>
 800137e:	4281      	cmp	r1, r0
 8001380:	d022      	beq.n	80013c8 <__gedf2+0x90>
 8001382:	2002      	movs	r0, #2
 8001384:	3901      	subs	r1, #1
 8001386:	4008      	ands	r0, r1
 8001388:	3801      	subs	r0, #1
 800138a:	bcc0      	pop	{r6, r7}
 800138c:	46b9      	mov	r9, r7
 800138e:	46b0      	mov	r8, r6
 8001390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001392:	464d      	mov	r5, r9
 8001394:	432e      	orrs	r6, r5
 8001396:	d129      	bne.n	80013ec <__gedf2+0xb4>
 8001398:	2a00      	cmp	r2, #0
 800139a:	d1f0      	bne.n	800137e <__gedf2+0x46>
 800139c:	433c      	orrs	r4, r7
 800139e:	d1ee      	bne.n	800137e <__gedf2+0x46>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d1f2      	bne.n	800138a <__gedf2+0x52>
 80013a4:	2001      	movs	r0, #1
 80013a6:	4240      	negs	r0, r0
 80013a8:	e7ef      	b.n	800138a <__gedf2+0x52>
 80013aa:	003d      	movs	r5, r7
 80013ac:	4325      	orrs	r5, r4
 80013ae:	d11d      	bne.n	80013ec <__gedf2+0xb4>
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d0ee      	beq.n	8001392 <__gedf2+0x5a>
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1e2      	bne.n	800137e <__gedf2+0x46>
 80013b8:	464c      	mov	r4, r9
 80013ba:	4326      	orrs	r6, r4
 80013bc:	d1df      	bne.n	800137e <__gedf2+0x46>
 80013be:	e7e0      	b.n	8001382 <__gedf2+0x4a>
 80013c0:	2000      	movs	r0, #0
 80013c2:	2c00      	cmp	r4, #0
 80013c4:	d0e1      	beq.n	800138a <__gedf2+0x52>
 80013c6:	e7dc      	b.n	8001382 <__gedf2+0x4a>
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dc0a      	bgt.n	80013e2 <__gedf2+0xaa>
 80013cc:	dbe8      	blt.n	80013a0 <__gedf2+0x68>
 80013ce:	454f      	cmp	r7, r9
 80013d0:	d8d7      	bhi.n	8001382 <__gedf2+0x4a>
 80013d2:	d00e      	beq.n	80013f2 <__gedf2+0xba>
 80013d4:	2000      	movs	r0, #0
 80013d6:	454f      	cmp	r7, r9
 80013d8:	d2d7      	bcs.n	800138a <__gedf2+0x52>
 80013da:	2900      	cmp	r1, #0
 80013dc:	d0e2      	beq.n	80013a4 <__gedf2+0x6c>
 80013de:	0008      	movs	r0, r1
 80013e0:	e7d3      	b.n	800138a <__gedf2+0x52>
 80013e2:	4243      	negs	r3, r0
 80013e4:	4158      	adcs	r0, r3
 80013e6:	0040      	lsls	r0, r0, #1
 80013e8:	3801      	subs	r0, #1
 80013ea:	e7ce      	b.n	800138a <__gedf2+0x52>
 80013ec:	2002      	movs	r0, #2
 80013ee:	4240      	negs	r0, r0
 80013f0:	e7cb      	b.n	800138a <__gedf2+0x52>
 80013f2:	45c4      	cmp	ip, r8
 80013f4:	d8c5      	bhi.n	8001382 <__gedf2+0x4a>
 80013f6:	2000      	movs	r0, #0
 80013f8:	45c4      	cmp	ip, r8
 80013fa:	d2c6      	bcs.n	800138a <__gedf2+0x52>
 80013fc:	e7ed      	b.n	80013da <__gedf2+0xa2>
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	000007ff 	.word	0x000007ff

08001404 <__ledf2>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4647      	mov	r7, r8
 8001408:	46ce      	mov	lr, r9
 800140a:	0004      	movs	r4, r0
 800140c:	0018      	movs	r0, r3
 800140e:	0016      	movs	r6, r2
 8001410:	031b      	lsls	r3, r3, #12
 8001412:	0b1b      	lsrs	r3, r3, #12
 8001414:	4d2c      	ldr	r5, [pc, #176]	; (80014c8 <__ledf2+0xc4>)
 8001416:	004a      	lsls	r2, r1, #1
 8001418:	4699      	mov	r9, r3
 800141a:	b580      	push	{r7, lr}
 800141c:	0043      	lsls	r3, r0, #1
 800141e:	030f      	lsls	r7, r1, #12
 8001420:	46a4      	mov	ip, r4
 8001422:	46b0      	mov	r8, r6
 8001424:	0b3f      	lsrs	r7, r7, #12
 8001426:	0d52      	lsrs	r2, r2, #21
 8001428:	0fc9      	lsrs	r1, r1, #31
 800142a:	0d5b      	lsrs	r3, r3, #21
 800142c:	0fc0      	lsrs	r0, r0, #31
 800142e:	42aa      	cmp	r2, r5
 8001430:	d00d      	beq.n	800144e <__ledf2+0x4a>
 8001432:	42ab      	cmp	r3, r5
 8001434:	d010      	beq.n	8001458 <__ledf2+0x54>
 8001436:	2a00      	cmp	r2, #0
 8001438:	d127      	bne.n	800148a <__ledf2+0x86>
 800143a:	433c      	orrs	r4, r7
 800143c:	2b00      	cmp	r3, #0
 800143e:	d111      	bne.n	8001464 <__ledf2+0x60>
 8001440:	464d      	mov	r5, r9
 8001442:	432e      	orrs	r6, r5
 8001444:	d10e      	bne.n	8001464 <__ledf2+0x60>
 8001446:	2000      	movs	r0, #0
 8001448:	2c00      	cmp	r4, #0
 800144a:	d015      	beq.n	8001478 <__ledf2+0x74>
 800144c:	e00e      	b.n	800146c <__ledf2+0x68>
 800144e:	003d      	movs	r5, r7
 8001450:	4325      	orrs	r5, r4
 8001452:	d110      	bne.n	8001476 <__ledf2+0x72>
 8001454:	4293      	cmp	r3, r2
 8001456:	d118      	bne.n	800148a <__ledf2+0x86>
 8001458:	464d      	mov	r5, r9
 800145a:	432e      	orrs	r6, r5
 800145c:	d10b      	bne.n	8001476 <__ledf2+0x72>
 800145e:	2a00      	cmp	r2, #0
 8001460:	d102      	bne.n	8001468 <__ledf2+0x64>
 8001462:	433c      	orrs	r4, r7
 8001464:	2c00      	cmp	r4, #0
 8001466:	d00b      	beq.n	8001480 <__ledf2+0x7c>
 8001468:	4281      	cmp	r1, r0
 800146a:	d014      	beq.n	8001496 <__ledf2+0x92>
 800146c:	2002      	movs	r0, #2
 800146e:	3901      	subs	r1, #1
 8001470:	4008      	ands	r0, r1
 8001472:	3801      	subs	r0, #1
 8001474:	e000      	b.n	8001478 <__ledf2+0x74>
 8001476:	2002      	movs	r0, #2
 8001478:	bcc0      	pop	{r6, r7}
 800147a:	46b9      	mov	r9, r7
 800147c:	46b0      	mov	r8, r6
 800147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001480:	2800      	cmp	r0, #0
 8001482:	d1f9      	bne.n	8001478 <__ledf2+0x74>
 8001484:	2001      	movs	r0, #1
 8001486:	4240      	negs	r0, r0
 8001488:	e7f6      	b.n	8001478 <__ledf2+0x74>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ec      	bne.n	8001468 <__ledf2+0x64>
 800148e:	464c      	mov	r4, r9
 8001490:	4326      	orrs	r6, r4
 8001492:	d1e9      	bne.n	8001468 <__ledf2+0x64>
 8001494:	e7ea      	b.n	800146c <__ledf2+0x68>
 8001496:	429a      	cmp	r2, r3
 8001498:	dd04      	ble.n	80014a4 <__ledf2+0xa0>
 800149a:	4243      	negs	r3, r0
 800149c:	4158      	adcs	r0, r3
 800149e:	0040      	lsls	r0, r0, #1
 80014a0:	3801      	subs	r0, #1
 80014a2:	e7e9      	b.n	8001478 <__ledf2+0x74>
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbeb      	blt.n	8001480 <__ledf2+0x7c>
 80014a8:	454f      	cmp	r7, r9
 80014aa:	d8df      	bhi.n	800146c <__ledf2+0x68>
 80014ac:	d006      	beq.n	80014bc <__ledf2+0xb8>
 80014ae:	2000      	movs	r0, #0
 80014b0:	454f      	cmp	r7, r9
 80014b2:	d2e1      	bcs.n	8001478 <__ledf2+0x74>
 80014b4:	2900      	cmp	r1, #0
 80014b6:	d0e5      	beq.n	8001484 <__ledf2+0x80>
 80014b8:	0008      	movs	r0, r1
 80014ba:	e7dd      	b.n	8001478 <__ledf2+0x74>
 80014bc:	45c4      	cmp	ip, r8
 80014be:	d8d5      	bhi.n	800146c <__ledf2+0x68>
 80014c0:	2000      	movs	r0, #0
 80014c2:	45c4      	cmp	ip, r8
 80014c4:	d2d8      	bcs.n	8001478 <__ledf2+0x74>
 80014c6:	e7f5      	b.n	80014b4 <__ledf2+0xb0>
 80014c8:	000007ff 	.word	0x000007ff

080014cc <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80014d0:	23a0      	movs	r3, #160	; 0xa0
 80014d2:	05db      	lsls	r3, r3, #23
 80014d4:	2200      	movs	r2, #0
 80014d6:	2110      	movs	r1, #16
 80014d8:	0018      	movs	r0, r3
 80014da:	f001 fb1d 	bl	8002b18 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f001 f8c4 	bl	800266c <HAL_Delay>
}
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80014ee:	23a0      	movs	r3, #160	; 0xa0
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	2201      	movs	r2, #1
 80014f4:	2110      	movs	r1, #16
 80014f6:	0018      	movs	r0, r3
 80014f8:	f001 fb0e 	bl	8002b18 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f001 f8b5 	bl	800266c <HAL_Delay>
}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	0002      	movs	r2, r0
 8001510:	1dfb      	adds	r3, r7, #7
 8001512:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <SPI_TxByte+0x30>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	2b02      	cmp	r3, #2
 8001522:	d1f8      	bne.n	8001516 <SPI_TxByte+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001524:	1df9      	adds	r1, r7, #7
 8001526:	4804      	ldr	r0, [pc, #16]	; (8001538 <SPI_TxByte+0x30>)
 8001528:	2364      	movs	r3, #100	; 0x64
 800152a:	2201      	movs	r2, #1
 800152c:	f002 f905 	bl	800373a <HAL_SPI_Transmit>
}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b002      	add	sp, #8
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200000a4 	.word	0x200000a4

0800153c <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	000a      	movs	r2, r1
 8001546:	1cbb      	adds	r3, r7, #2
 8001548:	801a      	strh	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <SPI_TxBuffer+0x34>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2202      	movs	r2, #2
 8001554:	4013      	ands	r3, r2
 8001556:	2b02      	cmp	r3, #2
 8001558:	d1f8      	bne.n	800154c <SPI_TxBuffer+0x10>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800155a:	1cbb      	adds	r3, r7, #2
 800155c:	881a      	ldrh	r2, [r3, #0]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4803      	ldr	r0, [pc, #12]	; (8001570 <SPI_TxBuffer+0x34>)
 8001562:	2364      	movs	r3, #100	; 0x64
 8001564:	f002 f8e9 	bl	800373a <HAL_SPI_Transmit>
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b002      	add	sp, #8
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200000a4 	.word	0x200000a4

08001574 <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	22ff      	movs	r2, #255	; 0xff
 800157e:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <SPI_RxByte+0x38>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2202      	movs	r2, #2
 800158a:	4013      	ands	r3, r2
 800158c:	2b02      	cmp	r3, #2
 800158e:	d1f8      	bne.n	8001582 <SPI_RxByte+0xe>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001590:	1dba      	adds	r2, r7, #6
 8001592:	1df9      	adds	r1, r7, #7
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <SPI_RxByte+0x38>)
 8001596:	2364      	movs	r3, #100	; 0x64
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2301      	movs	r3, #1
 800159c:	f002 fa2a 	bl	80039f4 <HAL_SPI_TransmitReceive>
  return data;
 80015a0:	1dbb      	adds	r3, r7, #6
 80015a2:	781b      	ldrb	r3, [r3, #0]
}
 80015a4:	0018      	movs	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200000a4 	.word	0x200000a4

080015b0 <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80015b8:	f7ff ffdc 	bl	8001574 <SPI_RxByte>
 80015bc:	0003      	movs	r3, r0
 80015be:	001a      	movs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	701a      	strb	r2, [r3, #0]
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b002      	add	sp, #8
 80015ca:	bd80      	pop	{r7, pc}

080015cc <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <SD_ReadyWait+0x34>)
 80015d4:	22fa      	movs	r2, #250	; 0xfa
 80015d6:	0052      	lsls	r2, r2, #1
 80015d8:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80015da:	1dfc      	adds	r4, r7, #7
 80015dc:	f7ff ffca 	bl	8001574 <SPI_RxByte>
 80015e0:	0003      	movs	r3, r0
 80015e2:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2bff      	cmp	r3, #255	; 0xff
 80015ea:	d003      	beq.n	80015f4 <SD_ReadyWait+0x28>
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SD_ReadyWait+0x34>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f2      	bne.n	80015da <SD_ReadyWait+0xe>
  return res;
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	781b      	ldrb	r3, [r3, #0]
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b003      	add	sp, #12
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	2000009e 	.word	0x2000009e

08001604 <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <SD_PowerOn+0x88>)
 800160c:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800160e:	f7ff ff6c 	bl	80014ea <DESELECT>
  for(int i = 0; i < 10; i++)
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	e005      	b.n	8001624 <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 8001618:	20ff      	movs	r0, #255	; 0xff
 800161a:	f7ff ff75 	bl	8001508 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3301      	adds	r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b09      	cmp	r3, #9
 8001628:	ddf6      	ble.n	8001618 <SD_PowerOn+0x14>
  }
  /* slave select */
  SELECT();
 800162a:	f7ff ff4f 	bl	80014cc <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800162e:	003b      	movs	r3, r7
 8001630:	2240      	movs	r2, #64	; 0x40
 8001632:	701a      	strb	r2, [r3, #0]
  args[1] = 0;
 8001634:	003b      	movs	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	705a      	strb	r2, [r3, #1]
  args[2] = 0;
 800163a:	003b      	movs	r3, r7
 800163c:	2200      	movs	r2, #0
 800163e:	709a      	strb	r2, [r3, #2]
  args[3] = 0;
 8001640:	003b      	movs	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	70da      	strb	r2, [r3, #3]
  args[4] = 0;
 8001646:	003b      	movs	r3, r7
 8001648:	2200      	movs	r2, #0
 800164a:	711a      	strb	r2, [r3, #4]
  args[5] = 0x95;   /* CRC */
 800164c:	003b      	movs	r3, r7
 800164e:	2295      	movs	r2, #149	; 0x95
 8001650:	715a      	strb	r2, [r3, #5]
  SPI_TxBuffer(args, sizeof(args));
 8001652:	003b      	movs	r3, r7
 8001654:	2106      	movs	r1, #6
 8001656:	0018      	movs	r0, r3
 8001658:	f7ff ff70 	bl	800153c <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800165c:	e002      	b.n	8001664 <SD_PowerOn+0x60>
  {
    cnt--;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3b01      	subs	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8001664:	f7ff ff86 	bl	8001574 <SPI_RxByte>
 8001668:	0003      	movs	r3, r0
 800166a:	2b01      	cmp	r3, #1
 800166c:	d002      	beq.n	8001674 <SD_PowerOn+0x70>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f4      	bne.n	800165e <SD_PowerOn+0x5a>
  }
  DESELECT();
 8001674:	f7ff ff39 	bl	80014ea <DESELECT>
  SPI_TxByte(0XFF);
 8001678:	20ff      	movs	r0, #255	; 0xff
 800167a:	f7ff ff45 	bl	8001508 <SPI_TxByte>
  PowerFlag = 1;
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SD_PowerOn+0x8c>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
}
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b004      	add	sp, #16
 800168a:	bd80      	pop	{r7, pc}
 800168c:	00001fff 	.word	0x00001fff
 8001690:	200000a1 	.word	0x200000a1

08001694 <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001698:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <SD_PowerOff+0x10>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200000a1 	.word	0x200000a1

080016a8 <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  return PowerFlag;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <SD_CheckPower+0x10>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	200000a1 	.word	0x200000a1

080016bc <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80016bc:	b5b0      	push	{r4, r5, r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <SD_RxDataBlock+0x64>)
 80016c8:	22c8      	movs	r2, #200	; 0xc8
 80016ca:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80016cc:	250f      	movs	r5, #15
 80016ce:	197c      	adds	r4, r7, r5
 80016d0:	f7ff ff50 	bl	8001574 <SPI_RxByte>
 80016d4:	0003      	movs	r3, r0
 80016d6:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 80016d8:	197b      	adds	r3, r7, r5
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2bff      	cmp	r3, #255	; 0xff
 80016de:	d103      	bne.n	80016e8 <SD_RxDataBlock+0x2c>
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <SD_RxDataBlock+0x64>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f1      	bne.n	80016cc <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 80016e8:	230f      	movs	r3, #15
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2bfe      	cmp	r3, #254	; 0xfe
 80016f0:	d001      	beq.n	80016f6 <SD_RxDataBlock+0x3a>
 80016f2:	2300      	movs	r3, #0
 80016f4:	e00f      	b.n	8001716 <SD_RxDataBlock+0x5a>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff ff57 	bl	80015b0 <SPI_RxBytePtr>
  } while(len--);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	1e5a      	subs	r2, r3, #1
 8001706:	603a      	str	r2, [r7, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f4      	bne.n	80016f6 <SD_RxDataBlock+0x3a>
  /* discard CRC */
  SPI_RxByte();
 800170c:	f7ff ff32 	bl	8001574 <SPI_RxByte>
  SPI_RxByte();
 8001710:	f7ff ff30 	bl	8001574 <SPI_RxByte>
  return TRUE;
 8001714:	2301      	movs	r3, #1
}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	b004      	add	sp, #16
 800171c:	bdb0      	pop	{r4, r5, r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	2000009c 	.word	0x2000009c

08001724 <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001724:	b5b0      	push	{r4, r5, r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	000a      	movs	r2, r1
 800172e:	1cfb      	adds	r3, r7, #3
 8001730:	701a      	strb	r2, [r3, #0]
  uint8_t resp;
  uint8_t i = 0;
 8001732:	230e      	movs	r3, #14
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800173a:	f7ff ff47 	bl	80015cc <SD_ReadyWait>
 800173e:	0003      	movs	r3, r0
 8001740:	2bff      	cmp	r3, #255	; 0xff
 8001742:	d001      	beq.n	8001748 <SD_TxDataBlock+0x24>
 8001744:	2300      	movs	r3, #0
 8001746:	e03c      	b.n	80017c2 <SD_TxDataBlock+0x9e>
  /* transmit token */
  SPI_TxByte(token);
 8001748:	1cfb      	adds	r3, r7, #3
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff fedb 	bl	8001508 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8001752:	1cfb      	adds	r3, r7, #3
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2bfd      	cmp	r3, #253	; 0xfd
 8001758:	d029      	beq.n	80017ae <SD_TxDataBlock+0x8a>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	009a      	lsls	r2, r3, #2
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0011      	movs	r1, r2
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff feea 	bl	800153c <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8001768:	f7ff ff04 	bl	8001574 <SPI_RxByte>
    SPI_RxByte();
 800176c:	f7ff ff02 	bl	8001574 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8001770:	e011      	b.n	8001796 <SD_TxDataBlock+0x72>
    {
      resp = SPI_RxByte();
 8001772:	250f      	movs	r5, #15
 8001774:	197c      	adds	r4, r7, r5
 8001776:	f7ff fefd 	bl	8001574 <SPI_RxByte>
 800177a:	0003      	movs	r3, r0
 800177c:	7023      	strb	r3, [r4, #0]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800177e:	197b      	adds	r3, r7, r5
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	221f      	movs	r2, #31
 8001784:	4013      	ands	r3, r2
 8001786:	2b05      	cmp	r3, #5
 8001788:	d00b      	beq.n	80017a2 <SD_TxDataBlock+0x7e>
      i++;
 800178a:	210e      	movs	r1, #14
 800178c:	187b      	adds	r3, r7, r1
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	187b      	adds	r3, r7, r1
 8001792:	3201      	adds	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
    while (i <= 64)
 8001796:	230e      	movs	r3, #14
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b40      	cmp	r3, #64	; 0x40
 800179e:	d9e8      	bls.n	8001772 <SD_TxDataBlock+0x4e>
 80017a0:	e000      	b.n	80017a4 <SD_TxDataBlock+0x80>
      if ((resp & 0x1F) == 0x05) break;
 80017a2:	46c0      	nop			; (mov r8, r8)
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	f7ff fee5 	bl	8001574 <SPI_RxByte>
 80017aa:	1e03      	subs	r3, r0, #0
 80017ac:	d0fb      	beq.n	80017a6 <SD_TxDataBlock+0x82>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80017ae:	230f      	movs	r3, #15
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	221f      	movs	r2, #31
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d101      	bne.n	80017c0 <SD_TxDataBlock+0x9c>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <SD_TxDataBlock+0x9e>
  return FALSE;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b004      	add	sp, #16
 80017c8:	bdb0      	pop	{r4, r5, r7, pc}

080017ca <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80017ca:	b5b0      	push	{r4, r5, r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	0002      	movs	r2, r0
 80017d2:	6039      	str	r1, [r7, #0]
 80017d4:	1dfb      	adds	r3, r7, #7
 80017d6:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80017d8:	f7ff fef8 	bl	80015cc <SD_ReadyWait>
 80017dc:	0003      	movs	r3, r0
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	d001      	beq.n	80017e6 <SD_SendCmd+0x1c>
 80017e2:	23ff      	movs	r3, #255	; 0xff
 80017e4:	e059      	b.n	800189a <SD_SendCmd+0xd0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	0018      	movs	r0, r3
 80017ec:	f7ff fe8c 	bl	8001508 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	0e1b      	lsrs	r3, r3, #24
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff fe86 	bl	8001508 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	0c1b      	lsrs	r3, r3, #16
 8001800:	b2db      	uxtb	r3, r3
 8001802:	0018      	movs	r0, r3
 8001804:	f7ff fe80 	bl	8001508 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	b2db      	uxtb	r3, r3
 800180e:	0018      	movs	r0, r3
 8001810:	f7ff fe7a 	bl	8001508 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	0018      	movs	r0, r3
 800181a:	f7ff fe75 	bl	8001508 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b40      	cmp	r3, #64	; 0x40
 8001824:	d104      	bne.n	8001830 <SD_SendCmd+0x66>
 8001826:	230f      	movs	r3, #15
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	2295      	movs	r2, #149	; 0x95
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	e00c      	b.n	800184a <SD_SendCmd+0x80>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8001830:	1dfb      	adds	r3, r7, #7
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b48      	cmp	r3, #72	; 0x48
 8001836:	d104      	bne.n	8001842 <SD_SendCmd+0x78>
 8001838:	230f      	movs	r3, #15
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	2287      	movs	r2, #135	; 0x87
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e003      	b.n	800184a <SD_SendCmd+0x80>
  else crc = 1;
 8001842:	230f      	movs	r3, #15
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
  /* transmit CRC */
  SPI_TxByte(crc);
 800184a:	230f      	movs	r3, #15
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff fe59 	bl	8001508 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b4c      	cmp	r3, #76	; 0x4c
 800185c:	d101      	bne.n	8001862 <SD_SendCmd+0x98>
 800185e:	f7ff fe89 	bl	8001574 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8001862:	230e      	movs	r3, #14
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	220a      	movs	r2, #10
 8001868:	701a      	strb	r2, [r3, #0]
  do {
    res = SPI_RxByte();
 800186a:	250d      	movs	r5, #13
 800186c:	197c      	adds	r4, r7, r5
 800186e:	f7ff fe81 	bl	8001574 <SPI_RxByte>
 8001872:	0003      	movs	r3, r0
 8001874:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 8001876:	197b      	adds	r3, r7, r5
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b25b      	sxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	da09      	bge.n	8001894 <SD_SendCmd+0xca>
 8001880:	210e      	movs	r1, #14
 8001882:	187b      	adds	r3, r7, r1
 8001884:	187a      	adds	r2, r7, r1
 8001886:	7812      	ldrb	r2, [r2, #0]
 8001888:	3a01      	subs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	187b      	adds	r3, r7, r1
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1ea      	bne.n	800186a <SD_SendCmd+0xa0>
  return res;
 8001894:	230d      	movs	r3, #13
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	781b      	ldrb	r3, [r3, #0]
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b004      	add	sp, #16
 80018a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018a4 <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	0002      	movs	r2, r0
 80018ac:	1dfb      	adds	r3, r7, #7
 80018ae:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80018b0:	1dfb      	adds	r3, r7, #7
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SD_disk_initialize+0x18>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0f2      	b.n	8001aa2 <SD_disk_initialize+0x1fe>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80018bc:	4b7b      	ldr	r3, [pc, #492]	; (8001aac <SD_disk_initialize+0x208>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	001a      	movs	r2, r3
 80018c4:	2302      	movs	r3, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d003      	beq.n	80018d2 <SD_disk_initialize+0x2e>
 80018ca:	4b78      	ldr	r3, [pc, #480]	; (8001aac <SD_disk_initialize+0x208>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	e0e7      	b.n	8001aa2 <SD_disk_initialize+0x1fe>
  /* power on */
  SD_PowerOn();
 80018d2:	f7ff fe97 	bl	8001604 <SD_PowerOn>
  /* slave select */
  SELECT();
 80018d6:	f7ff fdf9 	bl	80014cc <SELECT>
  /* check disk type */
  type = 0;
 80018da:	230e      	movs	r3, #14
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80018e2:	2100      	movs	r1, #0
 80018e4:	2040      	movs	r0, #64	; 0x40
 80018e6:	f7ff ff70 	bl	80017ca <SD_SendCmd>
 80018ea:	0003      	movs	r3, r0
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d000      	beq.n	80018f2 <SD_disk_initialize+0x4e>
 80018f0:	e0bc      	b.n	8001a6c <SD_disk_initialize+0x1c8>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80018f2:	4b6f      	ldr	r3, [pc, #444]	; (8001ab0 <SD_disk_initialize+0x20c>)
 80018f4:	22fa      	movs	r2, #250	; 0xfa
 80018f6:	0092      	lsls	r2, r2, #2
 80018f8:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80018fa:	23d5      	movs	r3, #213	; 0xd5
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	0019      	movs	r1, r3
 8001900:	2048      	movs	r0, #72	; 0x48
 8001902:	f7ff ff62 	bl	80017ca <SD_SendCmd>
 8001906:	0003      	movs	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d000      	beq.n	800190e <SD_disk_initialize+0x6a>
 800190c:	e06b      	b.n	80019e6 <SD_disk_initialize+0x142>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800190e:	230f      	movs	r3, #15
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	e00e      	b.n	8001936 <SD_disk_initialize+0x92>
      {
        ocr[n] = SPI_RxByte();
 8001918:	250f      	movs	r5, #15
 800191a:	197b      	adds	r3, r7, r5
 800191c:	781c      	ldrb	r4, [r3, #0]
 800191e:	f7ff fe29 	bl	8001574 <SPI_RxByte>
 8001922:	0003      	movs	r3, r0
 8001924:	001a      	movs	r2, r3
 8001926:	2308      	movs	r3, #8
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 800192c:	197b      	adds	r3, r7, r5
 800192e:	781a      	ldrb	r2, [r3, #0]
 8001930:	197b      	adds	r3, r7, r5
 8001932:	3201      	adds	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	230f      	movs	r3, #15
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d9eb      	bls.n	8001918 <SD_disk_initialize+0x74>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001940:	2208      	movs	r2, #8
 8001942:	18bb      	adds	r3, r7, r2
 8001944:	789b      	ldrb	r3, [r3, #2]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d000      	beq.n	800194c <SD_disk_initialize+0xa8>
 800194a:	e08f      	b.n	8001a6c <SD_disk_initialize+0x1c8>
 800194c:	18bb      	adds	r3, r7, r2
 800194e:	78db      	ldrb	r3, [r3, #3]
 8001950:	2baa      	cmp	r3, #170	; 0xaa
 8001952:	d000      	beq.n	8001956 <SD_disk_initialize+0xb2>
 8001954:	e08a      	b.n	8001a6c <SD_disk_initialize+0x1c8>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001956:	2100      	movs	r1, #0
 8001958:	2077      	movs	r0, #119	; 0x77
 800195a:	f7ff ff36 	bl	80017ca <SD_SendCmd>
 800195e:	0003      	movs	r3, r0
 8001960:	2b01      	cmp	r3, #1
 8001962:	d807      	bhi.n	8001974 <SD_disk_initialize+0xd0>
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	05db      	lsls	r3, r3, #23
 8001968:	0019      	movs	r1, r3
 800196a:	2069      	movs	r0, #105	; 0x69
 800196c:	f7ff ff2d 	bl	80017ca <SD_SendCmd>
 8001970:	1e03      	subs	r3, r0, #0
 8001972:	d004      	beq.n	800197e <SD_disk_initialize+0xda>
        } while (Timer1);
 8001974:	4b4e      	ldr	r3, [pc, #312]	; (8001ab0 <SD_disk_initialize+0x20c>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ec      	bne.n	8001956 <SD_disk_initialize+0xb2>
 800197c:	e000      	b.n	8001980 <SD_disk_initialize+0xdc>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800197e:	46c0      	nop			; (mov r8, r8)
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001980:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <SD_disk_initialize+0x20c>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d100      	bne.n	800198a <SD_disk_initialize+0xe6>
 8001988:	e070      	b.n	8001a6c <SD_disk_initialize+0x1c8>
 800198a:	2100      	movs	r1, #0
 800198c:	207a      	movs	r0, #122	; 0x7a
 800198e:	f7ff ff1c 	bl	80017ca <SD_SendCmd>
 8001992:	1e03      	subs	r3, r0, #0
 8001994:	d000      	beq.n	8001998 <SD_disk_initialize+0xf4>
 8001996:	e069      	b.n	8001a6c <SD_disk_initialize+0x1c8>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001998:	230f      	movs	r3, #15
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	e00e      	b.n	80019c0 <SD_disk_initialize+0x11c>
          {
            ocr[n] = SPI_RxByte();
 80019a2:	250f      	movs	r5, #15
 80019a4:	197b      	adds	r3, r7, r5
 80019a6:	781c      	ldrb	r4, [r3, #0]
 80019a8:	f7ff fde4 	bl	8001574 <SPI_RxByte>
 80019ac:	0003      	movs	r3, r0
 80019ae:	001a      	movs	r2, r3
 80019b0:	2308      	movs	r3, #8
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 80019b6:	197b      	adds	r3, r7, r5
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	197b      	adds	r3, r7, r5
 80019bc:	3201      	adds	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	230f      	movs	r3, #15
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d9eb      	bls.n	80019a2 <SD_disk_initialize+0xfe>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80019ca:	2308      	movs	r3, #8
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	001a      	movs	r2, r3
 80019d2:	2340      	movs	r3, #64	; 0x40
 80019d4:	4013      	ands	r3, r2
 80019d6:	d001      	beq.n	80019dc <SD_disk_initialize+0x138>
 80019d8:	220c      	movs	r2, #12
 80019da:	e000      	b.n	80019de <SD_disk_initialize+0x13a>
 80019dc:	2204      	movs	r2, #4
 80019de:	230e      	movs	r3, #14
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e042      	b.n	8001a6c <SD_disk_initialize+0x1c8>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80019e6:	2100      	movs	r1, #0
 80019e8:	2077      	movs	r0, #119	; 0x77
 80019ea:	f7ff feee 	bl	80017ca <SD_SendCmd>
 80019ee:	0003      	movs	r3, r0
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d808      	bhi.n	8001a06 <SD_disk_initialize+0x162>
 80019f4:	2100      	movs	r1, #0
 80019f6:	2069      	movs	r0, #105	; 0x69
 80019f8:	f7ff fee7 	bl	80017ca <SD_SendCmd>
 80019fc:	0003      	movs	r3, r0
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d801      	bhi.n	8001a06 <SD_disk_initialize+0x162>
 8001a02:	2202      	movs	r2, #2
 8001a04:	e000      	b.n	8001a08 <SD_disk_initialize+0x164>
 8001a06:	2201      	movs	r2, #1
 8001a08:	230e      	movs	r3, #14
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	701a      	strb	r2, [r3, #0]
      do
      {
        if (type == CT_SD1)
 8001a0e:	230e      	movs	r3, #14
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d10d      	bne.n	8001a34 <SD_disk_initialize+0x190>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2077      	movs	r0, #119	; 0x77
 8001a1c:	f7ff fed5 	bl	80017ca <SD_SendCmd>
 8001a20:	0003      	movs	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d80c      	bhi.n	8001a40 <SD_disk_initialize+0x19c>
 8001a26:	2100      	movs	r1, #0
 8001a28:	2069      	movs	r0, #105	; 0x69
 8001a2a:	f7ff fece 	bl	80017ca <SD_SendCmd>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d106      	bne.n	8001a40 <SD_disk_initialize+0x19c>
 8001a32:	e00b      	b.n	8001a4c <SD_disk_initialize+0x1a8>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001a34:	2100      	movs	r1, #0
 8001a36:	2041      	movs	r0, #65	; 0x41
 8001a38:	f7ff fec7 	bl	80017ca <SD_SendCmd>
 8001a3c:	1e03      	subs	r3, r0, #0
 8001a3e:	d004      	beq.n	8001a4a <SD_disk_initialize+0x1a6>
        }
      } while (Timer1);
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <SD_disk_initialize+0x20c>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1e2      	bne.n	8001a0e <SD_disk_initialize+0x16a>
 8001a48:	e000      	b.n	8001a4c <SD_disk_initialize+0x1a8>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001a4a:	46c0      	nop			; (mov r8, r8)
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <SD_disk_initialize+0x20c>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <SD_disk_initialize+0x1c0>
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	2050      	movs	r0, #80	; 0x50
 8001a5c:	f7ff feb5 	bl	80017ca <SD_SendCmd>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d003      	beq.n	8001a6c <SD_disk_initialize+0x1c8>
 8001a64:	230e      	movs	r3, #14
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
    }
  }
  CardType = type;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <SD_disk_initialize+0x210>)
 8001a6e:	240e      	movs	r4, #14
 8001a70:	193a      	adds	r2, r7, r4
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	701a      	strb	r2, [r3, #0]
  /* Idle */
  DESELECT();
 8001a76:	f7ff fd38 	bl	80014ea <DESELECT>
  SPI_RxByte();
 8001a7a:	f7ff fd7b 	bl	8001574 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8001a7e:	193b      	adds	r3, r7, r4
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d008      	beq.n	8001a98 <SD_disk_initialize+0x1f4>
  {
    Stat &= ~STA_NOINIT;
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <SD_disk_initialize+0x208>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4393      	bics	r3, r2
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <SD_disk_initialize+0x208>)
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e001      	b.n	8001a9c <SD_disk_initialize+0x1f8>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001a98:	f7ff fdfc 	bl	8001694 <SD_PowerOff>
  }
  return Stat;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <SD_disk_initialize+0x208>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	b2db      	uxtb	r3, r3
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b004      	add	sp, #16
 8001aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	2000009c 	.word	0x2000009c
 8001ab4:	200000a0 	.word	0x200000a0

08001ab8 <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	0002      	movs	r2, r0
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	701a      	strb	r2, [r3, #0]
  if (drv) return STA_NOINIT;
 8001ac4:	1dfb      	adds	r3, r7, #7
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SD_disk_status+0x18>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e002      	b.n	8001ad6 <SD_disk_status+0x1e>
  return Stat;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <SD_disk_status+0x28>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b2db      	uxtb	r3, r3
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	210f      	movs	r1, #15
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	1c02      	adds	r2, r0, #0
 8001af6:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <SD_disk_read+0x22>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <SD_disk_read+0x26>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e053      	b.n	8001bb2 <SD_disk_read+0xce>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <SD_disk_read+0xd8>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	001a      	movs	r2, r3
 8001b12:	2301      	movs	r3, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	d001      	beq.n	8001b1c <SD_disk_read+0x38>
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e04a      	b.n	8001bb2 <SD_disk_read+0xce>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <SD_disk_read+0xdc>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	001a      	movs	r2, r3
 8001b22:	2304      	movs	r3, #4
 8001b24:	4013      	ands	r3, r2
 8001b26:	d102      	bne.n	8001b2e <SD_disk_read+0x4a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	025b      	lsls	r3, r3, #9
 8001b2c:	607b      	str	r3, [r7, #4]
  SELECT();
 8001b2e:	f7ff fccd 	bl	80014cc <SELECT>
  if (count == 1)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d112      	bne.n	8001b5e <SD_disk_read+0x7a>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	2051      	movs	r0, #81	; 0x51
 8001b3e:	f7ff fe44 	bl	80017ca <SD_SendCmd>
 8001b42:	1e03      	subs	r3, r0, #0
 8001b44:	d12d      	bne.n	8001ba2 <SD_disk_read+0xbe>
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	009a      	lsls	r2, r3, #2
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	0011      	movs	r1, r2
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f7ff fdb4 	bl	80016bc <SD_RxDataBlock>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d024      	beq.n	8001ba2 <SD_disk_read+0xbe>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	e021      	b.n	8001ba2 <SD_disk_read+0xbe>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	0019      	movs	r1, r3
 8001b62:	2052      	movs	r0, #82	; 0x52
 8001b64:	f7ff fe31 	bl	80017ca <SD_SendCmd>
 8001b68:	1e03      	subs	r3, r0, #0
 8001b6a:	d11a      	bne.n	8001ba2 <SD_disk_read+0xbe>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	009a      	lsls	r2, r3, #2
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	0011      	movs	r1, r2
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff fda1 	bl	80016bc <SD_RxDataBlock>
 8001b7a:	1e03      	subs	r3, r0, #0
 8001b7c:	d00c      	beq.n	8001b98 <SD_disk_read+0xb4>
        buff += 512;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2280      	movs	r2, #128	; 0x80
 8001b82:	0092      	lsls	r2, r2, #2
 8001b84:	4694      	mov	ip, r2
 8001b86:	4463      	add	r3, ip
 8001b88:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ea      	bne.n	8001b6c <SD_disk_read+0x88>
 8001b96:	e000      	b.n	8001b9a <SD_disk_read+0xb6>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001b98:	46c0      	nop			; (mov r8, r8)
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	204c      	movs	r0, #76	; 0x4c
 8001b9e:	f7ff fe14 	bl	80017ca <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 8001ba2:	f7ff fca2 	bl	80014ea <DESELECT>
  SPI_RxByte();
 8001ba6:	f7ff fce5 	bl	8001574 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	1e5a      	subs	r2, r3, #1
 8001bae:	4193      	sbcs	r3, r2
 8001bb0:	b2db      	uxtb	r3, r3
}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b004      	add	sp, #16
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	200000a0 	.word	0x200000a0

08001bc4 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	1c02      	adds	r2, r0, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d102      	bne.n	8001be6 <SD_disk_write+0x22>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <SD_disk_write+0x26>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e06b      	b.n	8001cc2 <SD_disk_write+0xfe>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001bea:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <SD_disk_write+0x108>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d001      	beq.n	8001bfc <SD_disk_write+0x38>
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e062      	b.n	8001cc2 <SD_disk_write+0xfe>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001bfc:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <SD_disk_write+0x108>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	001a      	movs	r2, r3
 8001c04:	2304      	movs	r3, #4
 8001c06:	4013      	ands	r3, r2
 8001c08:	d001      	beq.n	8001c0e <SD_disk_write+0x4a>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e059      	b.n	8001cc2 <SD_disk_write+0xfe>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <SD_disk_write+0x10c>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	001a      	movs	r2, r3
 8001c14:	2304      	movs	r3, #4
 8001c16:	4013      	ands	r3, r2
 8001c18:	d102      	bne.n	8001c20 <SD_disk_write+0x5c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	025b      	lsls	r3, r3, #9
 8001c1e:	607b      	str	r3, [r7, #4]
  SELECT();
 8001c20:	f7ff fc54 	bl	80014cc <SELECT>
  if (count == 1)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d110      	bne.n	8001c4c <SD_disk_write+0x88>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	2058      	movs	r0, #88	; 0x58
 8001c30:	f7ff fdcb 	bl	80017ca <SD_SendCmd>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d13c      	bne.n	8001cb2 <SD_disk_write+0xee>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	21fe      	movs	r1, #254	; 0xfe
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff fd71 	bl	8001724 <SD_TxDataBlock>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d035      	beq.n	8001cb2 <SD_disk_write+0xee>
      count = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	e032      	b.n	8001cb2 <SD_disk_write+0xee>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <SD_disk_write+0x10c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	001a      	movs	r2, r3
 8001c52:	2302      	movs	r3, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d008      	beq.n	8001c6a <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2077      	movs	r0, #119	; 0x77
 8001c5c:	f7ff fdb5 	bl	80017ca <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	0019      	movs	r1, r3
 8001c64:	2057      	movs	r0, #87	; 0x57
 8001c66:	f7ff fdb0 	bl	80017ca <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	2059      	movs	r0, #89	; 0x59
 8001c70:	f7ff fdab 	bl	80017ca <SD_SendCmd>
 8001c74:	1e03      	subs	r3, r0, #0
 8001c76:	d11c      	bne.n	8001cb2 <SD_disk_write+0xee>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	21fc      	movs	r1, #252	; 0xfc
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff fd51 	bl	8001724 <SD_TxDataBlock>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d00c      	beq.n	8001ca0 <SD_disk_write+0xdc>
        buff += 512;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4694      	mov	ip, r2
 8001c8e:	4463      	add	r3, ip
 8001c90:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ec      	bne.n	8001c78 <SD_disk_write+0xb4>
 8001c9e:	e000      	b.n	8001ca2 <SD_disk_write+0xde>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001ca0:	46c0      	nop			; (mov r8, r8)
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001ca2:	21fd      	movs	r1, #253	; 0xfd
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff fd3d 	bl	8001724 <SD_TxDataBlock>
 8001caa:	1e03      	subs	r3, r0, #0
 8001cac:	d101      	bne.n	8001cb2 <SD_disk_write+0xee>
      {
        count = 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 8001cb2:	f7ff fc1a 	bl	80014ea <DESELECT>
  SPI_RxByte();
 8001cb6:	f7ff fc5d 	bl	8001574 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	1e5a      	subs	r2, r3, #1
 8001cbe:	4193      	sbcs	r3, r2
 8001cc0:	b2db      	uxtb	r3, r3
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b004      	add	sp, #16
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	200000a0 	.word	0x200000a0

08001cd4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b08b      	sub	sp, #44	; 0x2c
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	603a      	str	r2, [r7, #0]
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	1c02      	adds	r2, r0, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	1dbb      	adds	r3, r7, #6
 8001ce4:	1c0a      	adds	r2, r1, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001cec:	1dfb      	adds	r3, r7, #7
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SD_disk_ioctl+0x24>
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	e11b      	b.n	8001f30 <SD_disk_ioctl+0x25c>
  res = RES_ERROR;
 8001cf8:	2327      	movs	r3, #39	; 0x27
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
  if (ctrl == CTRL_POWER)
 8001d00:	1dbb      	adds	r3, r7, #6
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d127      	bne.n	8001d58 <SD_disk_ioctl+0x84>
  {
    switch (*ptr)
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d013      	beq.n	8001d38 <SD_disk_ioctl+0x64>
 8001d10:	dc1d      	bgt.n	8001d4e <SD_disk_ioctl+0x7a>
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <SD_disk_ioctl+0x48>
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d007      	beq.n	8001d2a <SD_disk_ioctl+0x56>
 8001d1a:	e018      	b.n	8001d4e <SD_disk_ioctl+0x7a>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001d1c:	f7ff fcba 	bl	8001694 <SD_PowerOff>
      res = RES_OK;
 8001d20:	2327      	movs	r3, #39	; 0x27
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
      break;
 8001d28:	e0ff      	b.n	8001f2a <SD_disk_ioctl+0x256>
    case 1:
      SD_PowerOn();   /* Power On */
 8001d2a:	f7ff fc6b 	bl	8001604 <SD_PowerOn>
      res = RES_OK;
 8001d2e:	2327      	movs	r3, #39	; 0x27
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
      break;
 8001d36:	e0f8      	b.n	8001f2a <SD_disk_ioctl+0x256>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	1c5c      	adds	r4, r3, #1
 8001d3c:	f7ff fcb4 	bl	80016a8 <SD_CheckPower>
 8001d40:	0003      	movs	r3, r0
 8001d42:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001d44:	2327      	movs	r3, #39	; 0x27
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
      break;
 8001d4c:	e0ed      	b.n	8001f2a <SD_disk_ioctl+0x256>
    default:
      res = RES_PARERR;
 8001d4e:	2327      	movs	r3, #39	; 0x27
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2204      	movs	r2, #4
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e0e8      	b.n	8001f2a <SD_disk_ioctl+0x256>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d58:	4b77      	ldr	r3, [pc, #476]	; (8001f38 <SD_disk_ioctl+0x264>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	001a      	movs	r2, r3
 8001d60:	2301      	movs	r3, #1
 8001d62:	4013      	ands	r3, r2
 8001d64:	d001      	beq.n	8001d6a <SD_disk_ioctl+0x96>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0e2      	b.n	8001f30 <SD_disk_ioctl+0x25c>
    SELECT();
 8001d6a:	f7ff fbaf 	bl	80014cc <SELECT>
    switch (ctrl)
 8001d6e:	1dbb      	adds	r3, r7, #6
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b0d      	cmp	r3, #13
 8001d74:	d900      	bls.n	8001d78 <SD_disk_ioctl+0xa4>
 8001d76:	e0c8      	b.n	8001f0a <SD_disk_ioctl+0x236>
 8001d78:	009a      	lsls	r2, r3, #2
 8001d7a:	4b70      	ldr	r3, [pc, #448]	; (8001f3c <SD_disk_ioctl+0x268>)
 8001d7c:	18d3      	adds	r3, r2, r3
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001d82:	2100      	movs	r1, #0
 8001d84:	2049      	movs	r0, #73	; 0x49
 8001d86:	f7ff fd20 	bl	80017ca <SD_SendCmd>
 8001d8a:	1e03      	subs	r3, r0, #0
 8001d8c:	d000      	beq.n	8001d90 <SD_disk_ioctl+0xbc>
 8001d8e:	e0c1      	b.n	8001f14 <SD_disk_ioctl+0x240>
 8001d90:	240c      	movs	r4, #12
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	2110      	movs	r1, #16
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff fc90 	bl	80016bc <SD_RxDataBlock>
 8001d9c:	1e03      	subs	r3, r0, #0
 8001d9e:	d100      	bne.n	8001da2 <SD_disk_ioctl+0xce>
 8001da0:	e0b8      	b.n	8001f14 <SD_disk_ioctl+0x240>
      {
        if ((csd[0] >> 6) == 1)
 8001da2:	0022      	movs	r2, r4
 8001da4:	18bb      	adds	r3, r7, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	099b      	lsrs	r3, r3, #6
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d114      	bne.n	8001dda <SD_disk_ioctl+0x106>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001db0:	0011      	movs	r1, r2
 8001db2:	18bb      	adds	r3, r7, r2
 8001db4:	7a5b      	ldrb	r3, [r3, #9]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	7a1b      	ldrb	r3, [r3, #8]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	18d3      	adds	r3, r2, r3
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	211e      	movs	r1, #30
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	3201      	adds	r2, #1
 8001dcc:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	029a      	lsls	r2, r3, #10
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e03a      	b.n	8001e50 <SD_disk_ioctl+0x17c>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001dda:	200c      	movs	r0, #12
 8001ddc:	183b      	adds	r3, r7, r0
 8001dde:	795b      	ldrb	r3, [r3, #5]
 8001de0:	220f      	movs	r2, #15
 8001de2:	4013      	ands	r3, r2
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	183b      	adds	r3, r7, r0
 8001de8:	7a9b      	ldrb	r3, [r3, #10]
 8001dea:	09db      	lsrs	r3, r3, #7
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	18d3      	adds	r3, r2, r3
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	183b      	adds	r3, r7, r0
 8001df4:	7a5b      	ldrb	r3, [r3, #9]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2106      	movs	r1, #6
 8001dfc:	400b      	ands	r3, r1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	18d3      	adds	r3, r2, r3
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	2426      	movs	r4, #38	; 0x26
 8001e06:	193b      	adds	r3, r7, r4
 8001e08:	3202      	adds	r2, #2
 8001e0a:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001e0c:	183b      	adds	r3, r7, r0
 8001e0e:	7a1b      	ldrb	r3, [r3, #8]
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	183b      	adds	r3, r7, r0
 8001e18:	79db      	ldrb	r3, [r3, #7]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	18d3      	adds	r3, r2, r3
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	183b      	adds	r3, r7, r0
 8001e26:	799b      	ldrb	r3, [r3, #6]
 8001e28:	029b      	lsls	r3, r3, #10
 8001e2a:	b299      	uxth	r1, r3
 8001e2c:	23c0      	movs	r3, #192	; 0xc0
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	400b      	ands	r3, r1
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	18d3      	adds	r3, r2, r3
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	211e      	movs	r1, #30
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	3201      	adds	r2, #1
 8001e3e:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	881a      	ldrh	r2, [r3, #0]
 8001e44:	193b      	adds	r3, r7, r4
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	3b09      	subs	r3, #9
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001e50:	2327      	movs	r3, #39	; 0x27
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001e58:	e05c      	b.n	8001f14 <SD_disk_ioctl+0x240>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2280      	movs	r2, #128	; 0x80
 8001e5e:	0092      	lsls	r2, r2, #2
 8001e60:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001e62:	2327      	movs	r3, #39	; 0x27
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
      break;
 8001e6a:	e05a      	b.n	8001f22 <SD_disk_ioctl+0x24e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001e6c:	f7ff fbae 	bl	80015cc <SD_ReadyWait>
 8001e70:	0003      	movs	r3, r0
 8001e72:	2bff      	cmp	r3, #255	; 0xff
 8001e74:	d150      	bne.n	8001f18 <SD_disk_ioctl+0x244>
 8001e76:	2327      	movs	r3, #39	; 0x27
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
      break;
 8001e7e:	e04b      	b.n	8001f18 <SD_disk_ioctl+0x244>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001e80:	2100      	movs	r1, #0
 8001e82:	2049      	movs	r0, #73	; 0x49
 8001e84:	f7ff fca1 	bl	80017ca <SD_SendCmd>
 8001e88:	1e03      	subs	r3, r0, #0
 8001e8a:	d147      	bne.n	8001f1c <SD_disk_ioctl+0x248>
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	2110      	movs	r1, #16
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff fc13 	bl	80016bc <SD_RxDataBlock>
 8001e96:	1e03      	subs	r3, r0, #0
 8001e98:	d040      	beq.n	8001f1c <SD_disk_ioctl+0x248>
 8001e9a:	2327      	movs	r3, #39	; 0x27
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
      break;
 8001ea2:	e03b      	b.n	8001f1c <SD_disk_ioctl+0x248>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	204a      	movs	r0, #74	; 0x4a
 8001ea8:	f7ff fc8f 	bl	80017ca <SD_SendCmd>
 8001eac:	1e03      	subs	r3, r0, #0
 8001eae:	d137      	bne.n	8001f20 <SD_disk_ioctl+0x24c>
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	2110      	movs	r1, #16
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff fc01 	bl	80016bc <SD_RxDataBlock>
 8001eba:	1e03      	subs	r3, r0, #0
 8001ebc:	d030      	beq.n	8001f20 <SD_disk_ioctl+0x24c>
 8001ebe:	2327      	movs	r3, #39	; 0x27
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
      break;
 8001ec6:	e02b      	b.n	8001f20 <SD_disk_ioctl+0x24c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	207a      	movs	r0, #122	; 0x7a
 8001ecc:	f7ff fc7d 	bl	80017ca <SD_SendCmd>
 8001ed0:	1e03      	subs	r3, r0, #0
 8001ed2:	d11a      	bne.n	8001f0a <SD_disk_ioctl+0x236>
      {
        for (n = 0; n < 4; n++)
 8001ed4:	2326      	movs	r3, #38	; 0x26
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e00c      	b.n	8001ef8 <SD_disk_ioctl+0x224>
        {
          *ptr++ = SPI_RxByte();
 8001ede:	6a3c      	ldr	r4, [r7, #32]
 8001ee0:	1c63      	adds	r3, r4, #1
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	f7ff fb46 	bl	8001574 <SPI_RxByte>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001eec:	2126      	movs	r1, #38	; 0x26
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	3201      	adds	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	2326      	movs	r3, #38	; 0x26
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d9ed      	bls.n	8001ede <SD_disk_ioctl+0x20a>
        }
        res = RES_OK;
 8001f02:	2327      	movs	r3, #39	; 0x27
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
      }
    default:
      res = RES_PARERR;
 8001f0a:	2327      	movs	r3, #39	; 0x27
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	2204      	movs	r2, #4
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	e006      	b.n	8001f22 <SD_disk_ioctl+0x24e>
      break;
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	e004      	b.n	8001f22 <SD_disk_ioctl+0x24e>
      break;
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	e002      	b.n	8001f22 <SD_disk_ioctl+0x24e>
      break;
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	e000      	b.n	8001f22 <SD_disk_ioctl+0x24e>
      break;
 8001f20:	46c0      	nop			; (mov r8, r8)
    }
    DESELECT();
 8001f22:	f7ff fae2 	bl	80014ea <DESELECT>
    SPI_RxByte();
 8001f26:	f7ff fb25 	bl	8001574 <SPI_RxByte>
  }
  return res;
 8001f2a:	2327      	movs	r3, #39	; 0x27
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	781b      	ldrb	r3, [r3, #0]
}
 8001f30:	0018      	movs	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b00b      	add	sp, #44	; 0x2c
 8001f36:	bd90      	pop	{r4, r7, pc}
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	08008a60 	.word	0x08008a60

08001f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f44:	f000 fb22 	bl	800258c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f48:	f000 f80a 	bl	8001f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f4c:	f000 f894 	bl	8002078 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001f50:	f000 f85a 	bl	8002008 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001f54:	f001 ffee 	bl	8003f34 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  process_SD_card();
 8001f58:	f000 f8c4 	bl	80020e4 <process_SD_card>
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <main+0x1c>
	...

08001f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b093      	sub	sp, #76	; 0x4c
 8001f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f66:	2414      	movs	r4, #20
 8001f68:	193b      	adds	r3, r7, r4
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	2334      	movs	r3, #52	; 0x34
 8001f6e:	001a      	movs	r2, r3
 8001f70:	2100      	movs	r1, #0
 8001f72:	f005 ff05 	bl	8007d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f76:	003b      	movs	r3, r7
 8001f78:	0018      	movs	r0, r3
 8001f7a:	2314      	movs	r3, #20
 8001f7c:	001a      	movs	r2, r3
 8001f7e:	2100      	movs	r1, #0
 8001f80:	f005 fefe 	bl	8007d80 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <SystemClock_Config+0xa0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <SystemClock_Config+0xa4>)
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <SystemClock_Config+0xa0>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	0109      	lsls	r1, r1, #4
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001f96:	0021      	movs	r1, r4
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fa4:	187b      	adds	r3, r7, r1
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001faa:	187b      	adds	r3, r7, r1
 8001fac:	22a0      	movs	r2, #160	; 0xa0
 8001fae:	0212      	lsls	r2, r2, #8
 8001fb0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fb2:	187b      	adds	r3, r7, r1
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb8:	187b      	adds	r3, r7, r1
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 fdca 	bl	8002b54 <HAL_RCC_OscConfig>
 8001fc0:	1e03      	subs	r3, r0, #0
 8001fc2:	d001      	beq.n	8001fc8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001fc4:	f000 f970 	bl	80022a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc8:	003b      	movs	r3, r7
 8001fca:	220f      	movs	r2, #15
 8001fcc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001fce:	003b      	movs	r3, r7
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd4:	003b      	movs	r3, r7
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fda:	003b      	movs	r3, r7
 8001fdc:	2200      	movs	r2, #0
 8001fde:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe0:	003b      	movs	r3, r7
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fe6:	003b      	movs	r3, r7
 8001fe8:	2100      	movs	r1, #0
 8001fea:	0018      	movs	r0, r3
 8001fec:	f001 f92e 	bl	800324c <HAL_RCC_ClockConfig>
 8001ff0:	1e03      	subs	r3, r0, #0
 8001ff2:	d001      	beq.n	8001ff8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ff4:	f000 f958 	bl	80022a8 <Error_Handler>
  }
}
 8001ff8:	46c0      	nop			; (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b013      	add	sp, #76	; 0x4c
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	40007000 	.word	0x40007000
 8002004:	ffffe7ff 	.word	0xffffe7ff

08002008 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <MX_SPI1_Init+0x68>)
 800200e:	4a19      	ldr	r2, [pc, #100]	; (8002074 <MX_SPI1_Init+0x6c>)
 8002010:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <MX_SPI1_Init+0x68>)
 8002014:	2282      	movs	r2, #130	; 0x82
 8002016:	0052      	lsls	r2, r2, #1
 8002018:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <MX_SPI1_Init+0x68>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <MX_SPI1_Init+0x68>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <MX_SPI1_Init+0x68>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <MX_SPI1_Init+0x68>)
 800202e:	2200      	movs	r2, #0
 8002030:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <MX_SPI1_Init+0x68>)
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <MX_SPI1_Init+0x68>)
 800203c:	2200      	movs	r2, #0
 800203e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <MX_SPI1_Init+0x68>)
 8002042:	2200      	movs	r2, #0
 8002044:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <MX_SPI1_Init+0x68>)
 8002048:	2200      	movs	r2, #0
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <MX_SPI1_Init+0x68>)
 800204e:	2200      	movs	r2, #0
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <MX_SPI1_Init+0x68>)
 8002054:	2207      	movs	r2, #7
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <MX_SPI1_Init+0x68>)
 800205a:	0018      	movs	r0, r3
 800205c:	f001 fae4 	bl	8003628 <HAL_SPI_Init>
 8002060:	1e03      	subs	r3, r0, #0
 8002062:	d001      	beq.n	8002068 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002064:	f000 f920 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002068:	46c0      	nop			; (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	200000a4 	.word	0x200000a4
 8002074:	40013000 	.word	0x40013000

08002078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	0018      	movs	r0, r3
 8002082:	2314      	movs	r3, #20
 8002084:	001a      	movs	r2, r3
 8002086:	2100      	movs	r1, #0
 8002088:	f005 fe7a 	bl	8007d80 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <MX_GPIO_Init+0x68>)
 800208e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <MX_GPIO_Init+0x68>)
 8002092:	2101      	movs	r1, #1
 8002094:	430a      	orrs	r2, r1
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <MX_GPIO_Init+0x68>)
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	2201      	movs	r2, #1
 800209e:	4013      	ands	r3, r2
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80020a4:	23a0      	movs	r3, #160	; 0xa0
 80020a6:	05db      	lsls	r3, r3, #23
 80020a8:	2200      	movs	r2, #0
 80020aa:	2110      	movs	r1, #16
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 fd33 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	2210      	movs	r2, #16
 80020b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	2201      	movs	r2, #1
 80020bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	1d3a      	adds	r2, r7, #4
 80020cc:	23a0      	movs	r3, #160	; 0xa0
 80020ce:	05db      	lsls	r3, r3, #23
 80020d0:	0011      	movs	r1, r2
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 fba2 	bl	800281c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b006      	add	sp, #24
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <process_SD_card>:

/* USER CODE BEGIN 4 */
void process_SD_card( void )
{
 80020e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e6:	4c5d      	ldr	r4, [pc, #372]	; (800225c <process_SD_card+0x178>)
 80020e8:	44a5      	add	sp, r4
 80020ea:	af00      	add	r7, sp, #0
  FRESULT     fres;                 //Result after operations
  char        buf[100];
  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 80020ec:	4d5c      	ldr	r5, [pc, #368]	; (8002260 <process_SD_card+0x17c>)
 80020ee:	197c      	adds	r4, r7, r5
 80020f0:	495c      	ldr	r1, [pc, #368]	; (8002264 <process_SD_card+0x180>)
 80020f2:	4b5d      	ldr	r3, [pc, #372]	; (8002268 <process_SD_card+0x184>)
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	2201      	movs	r2, #1
 80020f8:	0018      	movs	r0, r3
 80020fa:	f004 fb0b 	bl	8006714 <f_mount>
 80020fe:	0003      	movs	r3, r0
 8002100:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK)
 8002102:	197b      	adds	r3, r7, r5
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <process_SD_card+0x36>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 800210a:	197b      	adds	r3, r7, r5
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	4b57      	ldr	r3, [pc, #348]	; (800226c <process_SD_card+0x188>)
 8002110:	0011      	movs	r1, r2
 8002112:	0018      	movs	r0, r3
 8002114:	f005 fcd2 	bl	8007abc <iprintf>
      break;
 8002118:	e090      	b.n	800223c <process_SD_card+0x158>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 800211a:	4b55      	ldr	r3, [pc, #340]	; (8002270 <process_SD_card+0x18c>)
 800211c:	0018      	movs	r0, r3
 800211e:	f005 fd33 	bl	8007b88 <puts>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;
    f_getfree("", &fre_clust, &pfs);
 8002122:	1d3a      	adds	r2, r7, #4
 8002124:	0039      	movs	r1, r7
 8002126:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <process_SD_card+0x180>)
 8002128:	0018      	movs	r0, r3
 800212a:	f005 f8ff 	bl	800732c <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	3b02      	subs	r3, #2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	8952      	ldrh	r2, [r2, #10]
 8002138:	4353      	muls	r3, r2
 800213a:	0018      	movs	r0, r3
 800213c:	f7ff f82c 	bl	8001198 <__aeabi_ui2d>
 8002140:	2200      	movs	r2, #0
 8002142:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <process_SD_card+0x190>)
 8002144:	f7fe f9ae 	bl	80004a4 <__aeabi_dmul>
 8002148:	0002      	movs	r2, r0
 800214a:	000b      	movs	r3, r1
 800214c:	0010      	movs	r0, r2
 800214e:	0019      	movs	r1, r3
 8002150:	f7fe f8be 	bl	80002d0 <__aeabi_d2uiz>
 8002154:	0003      	movs	r3, r0
 8002156:	4c48      	ldr	r4, [pc, #288]	; (8002278 <process_SD_card+0x194>)
 8002158:	193a      	adds	r2, r7, r4
 800215a:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	895b      	ldrh	r3, [r3, #10]
 8002160:	001a      	movs	r2, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	4353      	muls	r3, r2
 8002166:	0018      	movs	r0, r3
 8002168:	f7ff f816 	bl	8001198 <__aeabi_ui2d>
 800216c:	2200      	movs	r2, #0
 800216e:	4b41      	ldr	r3, [pc, #260]	; (8002274 <process_SD_card+0x190>)
 8002170:	f7fe f998 	bl	80004a4 <__aeabi_dmul>
 8002174:	0002      	movs	r2, r0
 8002176:	000b      	movs	r3, r1
 8002178:	0010      	movs	r0, r2
 800217a:	0019      	movs	r1, r3
 800217c:	f7fe f8a8 	bl	80002d0 <__aeabi_d2uiz>
 8002180:	0003      	movs	r3, r0
 8002182:	4a3e      	ldr	r2, [pc, #248]	; (800227c <process_SD_card+0x198>)
 8002184:	18b9      	adds	r1, r7, r2
 8002186:	600b      	str	r3, [r1, #0]
    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
 8002188:	18bb      	adds	r3, r7, r2
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	193b      	adds	r3, r7, r4
 800218e:	6819      	ldr	r1, [r3, #0]
 8002190:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <process_SD_card+0x19c>)
 8002192:	0018      	movs	r0, r3
 8002194:	f005 fc92 	bl	8007abc <iprintf>
    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8002198:	4d31      	ldr	r5, [pc, #196]	; (8002260 <process_SD_card+0x17c>)
 800219a:	197c      	adds	r4, r7, r5
 800219c:	4939      	ldr	r1, [pc, #228]	; (8002284 <process_SD_card+0x1a0>)
 800219e:	236c      	movs	r3, #108	; 0x6c
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	220b      	movs	r2, #11
 80021a4:	0018      	movs	r0, r3
 80021a6:	f004 fb01 	bl	80067ac <f_open>
 80021aa:	0003      	movs	r3, r0
 80021ac:	7023      	strb	r3, [r4, #0]
    if(fres != FR_OK)
 80021ae:	197b      	adds	r3, r7, r5
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <process_SD_card+0xe2>
    {
      printf("File creation/open Error : (%i)\r\n", fres);
 80021b6:	197b      	adds	r3, r7, r5
 80021b8:	781a      	ldrb	r2, [r3, #0]
 80021ba:	4b33      	ldr	r3, [pc, #204]	; (8002288 <process_SD_card+0x1a4>)
 80021bc:	0011      	movs	r1, r2
 80021be:	0018      	movs	r0, r3
 80021c0:	f005 fc7c 	bl	8007abc <iprintf>
      break;
 80021c4:	e03a      	b.n	800223c <process_SD_card+0x158>
    }
    printf("Writing data!!!\r\n");
 80021c6:	4b31      	ldr	r3, [pc, #196]	; (800228c <process_SD_card+0x1a8>)
 80021c8:	0018      	movs	r0, r3
 80021ca:	f005 fcdd 	bl	8007b88 <puts>
    //write the data
    f_puts("Welcome to EmbeTronicX", &fil);
 80021ce:	256c      	movs	r5, #108	; 0x6c
 80021d0:	197a      	adds	r2, r7, r5
 80021d2:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <process_SD_card+0x1ac>)
 80021d4:	0011      	movs	r1, r2
 80021d6:	0018      	movs	r0, r3
 80021d8:	f005 fa21 	bl	800761e <f_puts>
    //close your file
    f_close(&fil);
 80021dc:	197b      	adds	r3, r7, r5
 80021de:	0018      	movs	r0, r3
 80021e0:	f005 f870 	bl	80072c4 <f_close>
    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_READ);
 80021e4:	4e1e      	ldr	r6, [pc, #120]	; (8002260 <process_SD_card+0x17c>)
 80021e6:	19bc      	adds	r4, r7, r6
 80021e8:	4926      	ldr	r1, [pc, #152]	; (8002284 <process_SD_card+0x1a0>)
 80021ea:	197b      	adds	r3, r7, r5
 80021ec:	2201      	movs	r2, #1
 80021ee:	0018      	movs	r0, r3
 80021f0:	f004 fadc 	bl	80067ac <f_open>
 80021f4:	0003      	movs	r3, r0
 80021f6:	7023      	strb	r3, [r4, #0]
    if(fres != FR_OK)
 80021f8:	19bb      	adds	r3, r7, r6
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <process_SD_card+0x12c>
    {
      printf("File opening Error : (%i)\r\n", fres);
 8002200:	19bb      	adds	r3, r7, r6
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <process_SD_card+0x1b0>)
 8002206:	0011      	movs	r1, r2
 8002208:	0018      	movs	r0, r3
 800220a:	f005 fc57 	bl	8007abc <iprintf>
      break;
 800220e:	e015      	b.n	800223c <process_SD_card+0x158>
    }
    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8002210:	246c      	movs	r4, #108	; 0x6c
 8002212:	193a      	adds	r2, r7, r4
 8002214:	2508      	movs	r5, #8
 8002216:	197b      	adds	r3, r7, r5
 8002218:	2164      	movs	r1, #100	; 0x64
 800221a:	0018      	movs	r0, r3
 800221c:	f005 f943 	bl	80074a6 <f_gets>
    printf("Read Data : %s\n", buf);
 8002220:	197a      	adds	r2, r7, r5
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <process_SD_card+0x1b4>)
 8002224:	0011      	movs	r1, r2
 8002226:	0018      	movs	r0, r3
 8002228:	f005 fc48 	bl	8007abc <iprintf>
    //close your file
    f_close(&fil);
 800222c:	193b      	adds	r3, r7, r4
 800222e:	0018      	movs	r0, r3
 8002230:	f005 f848 	bl	80072c4 <f_close>
    printf("Closing File!!!\r\n");
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <process_SD_card+0x1b8>)
 8002236:	0018      	movs	r0, r3
 8002238:	f005 fca6 	bl	8007b88 <puts>
      printf("Cannot able to delete the file\n");
    }
#endif
  } while( false );
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <process_SD_card+0x180>)
 800223e:	2200      	movs	r2, #0
 8002240:	0019      	movs	r1, r3
 8002242:	2000      	movs	r0, #0
 8002244:	f004 fa66 	bl	8006714 <f_mount>
  printf("SD Card Unmounted Successfully!!!\r\n");
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <process_SD_card+0x1bc>)
 800224a:	0018      	movs	r0, r3
 800224c:	f005 fc9c 	bl	8007b88 <puts>
}
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <process_SD_card+0x1c0>)
 8002256:	449d      	add	sp, r3
 8002258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	ffffdf1c 	.word	0xffffdf1c
 8002260:	000020df 	.word	0x000020df
 8002264:	080088e0 	.word	0x080088e0
 8002268:	0000109c 	.word	0x0000109c
 800226c:	080088e4 	.word	0x080088e4
 8002270:	08008900 	.word	0x08008900
 8002274:	3fe00000 	.word	0x3fe00000
 8002278:	000020d8 	.word	0x000020d8
 800227c:	000020d4 	.word	0x000020d4
 8002280:	08008924 	.word	0x08008924
 8002284:	08008954 	.word	0x08008954
 8002288:	08008964 	.word	0x08008964
 800228c:	08008988 	.word	0x08008988
 8002290:	0800899c 	.word	0x0800899c
 8002294:	080089b4 	.word	0x080089b4
 8002298:	080089d0 	.word	0x080089d0
 800229c:	080089e0 	.word	0x080089e0
 80022a0:	080089f4 	.word	0x080089f4
 80022a4:	000020e4 	.word	0x000020e4

080022a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ac:	b672      	cpsid	i
}
 80022ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <Error_Handler+0x8>
	...

080022b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <HAL_MspInit+0x24>)
 80022ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_MspInit+0x24>)
 80022be:	2101      	movs	r1, #1
 80022c0:	430a      	orrs	r2, r1
 80022c2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_MspInit+0x24>)
 80022c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_MspInit+0x24>)
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	0549      	lsls	r1, r1, #21
 80022ce:	430a      	orrs	r2, r1
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000

080022dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	240c      	movs	r4, #12
 80022e6:	193b      	adds	r3, r7, r4
 80022e8:	0018      	movs	r0, r3
 80022ea:	2314      	movs	r3, #20
 80022ec:	001a      	movs	r2, r3
 80022ee:	2100      	movs	r1, #0
 80022f0:	f005 fd46 	bl	8007d80 <memset>
  if(hspi->Instance==SPI1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a18      	ldr	r2, [pc, #96]	; (800235c <HAL_SPI_MspInit+0x80>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d129      	bne.n	8002352 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_SPI_MspInit+0x84>)
 8002300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_SPI_MspInit+0x84>)
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	0149      	lsls	r1, r1, #5
 8002308:	430a      	orrs	r2, r1
 800230a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_SPI_MspInit+0x84>)
 800230e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_SPI_MspInit+0x84>)
 8002312:	2101      	movs	r1, #1
 8002314:	430a      	orrs	r2, r1
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_SPI_MspInit+0x84>)
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	2201      	movs	r2, #1
 800231e:	4013      	ands	r3, r2
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002324:	0021      	movs	r1, r4
 8002326:	187b      	adds	r3, r7, r1
 8002328:	22e0      	movs	r2, #224	; 0xe0
 800232a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	187b      	adds	r3, r7, r1
 800232e:	2202      	movs	r2, #2
 8002330:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	187b      	adds	r3, r7, r1
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	187b      	adds	r3, r7, r1
 800233a:	2203      	movs	r2, #3
 800233c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800233e:	187b      	adds	r3, r7, r1
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	187a      	adds	r2, r7, r1
 8002346:	23a0      	movs	r3, #160	; 0xa0
 8002348:	05db      	lsls	r3, r3, #23
 800234a:	0011      	movs	r1, r2
 800234c:	0018      	movs	r0, r3
 800234e:	f000 fa65 	bl	800281c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b009      	add	sp, #36	; 0x24
 8002358:	bd90      	pop	{r4, r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	40013000 	.word	0x40013000
 8002360:	40021000 	.word	0x40021000

08002364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <NMI_Handler+0x4>

0800236a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236e:	e7fe      	b.n	800236e <HardFault_Handler+0x4>

08002370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	if(Timer1 > 0)
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <PendSV_Handler+0x34>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <PendSV_Handler+0x18>
	  Timer1--;
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <PendSV_Handler+0x34>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <PendSV_Handler+0x34>)
 8002392:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <PendSV_Handler+0x38>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <PendSV_Handler+0x2c>
	  Timer2--;
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <PendSV_Handler+0x38>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <PendSV_Handler+0x38>)
 80023a6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	2000009c 	.word	0x2000009c
 80023b4:	2000009e 	.word	0x2000009e

080023b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023bc:	f000 f93a 	bl	8002634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	e00a      	b.n	80023ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023d8:	e000      	b.n	80023dc <_read+0x16>
 80023da:	bf00      	nop
 80023dc:	0001      	movs	r1, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	60ba      	str	r2, [r7, #8]
 80023e4:	b2ca      	uxtb	r2, r1
 80023e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3301      	adds	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	dbf0      	blt.n	80023d8 <_read+0x12>
  }

  return len;
 80023f6:	687b      	ldr	r3, [r7, #4]
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b006      	add	sp, #24
 80023fe:	bd80      	pop	{r7, pc}

08002400 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	e009      	b.n	8002426 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	60ba      	str	r2, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	0018      	movs	r0, r3
 800241c:	e000      	b.n	8002420 <_write+0x20>
 800241e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3301      	adds	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	429a      	cmp	r2, r3
 800242c:	dbf1      	blt.n	8002412 <_write+0x12>
  }
  return len;
 800242e:	687b      	ldr	r3, [r7, #4]
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b006      	add	sp, #24
 8002436:	bd80      	pop	{r7, pc}

08002438 <_close>:

int _close(int file)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002440:	2301      	movs	r3, #1
 8002442:	425b      	negs	r3, r3
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}

0800244c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2280      	movs	r2, #128	; 0x80
 800245a:	0192      	lsls	r2, r2, #6
 800245c:	605a      	str	r2, [r3, #4]
  return 0;
 800245e:	2300      	movs	r3, #0
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b002      	add	sp, #8
 8002466:	bd80      	pop	{r7, pc}

08002468 <_isatty>:

int _isatty(int file)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002470:	2301      	movs	r3, #1
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b002      	add	sp, #8
 8002478:	bd80      	pop	{r7, pc}

0800247a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002486:	2300      	movs	r3, #0
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b004      	add	sp, #16
 800248e:	bd80      	pop	{r7, pc}

08002490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002498:	4a14      	ldr	r2, [pc, #80]	; (80024ec <_sbrk+0x5c>)
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <_sbrk+0x60>)
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <_sbrk+0x64>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <_sbrk+0x64>)
 80024ae:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <_sbrk+0x68>)
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	18d3      	adds	r3, r2, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d207      	bcs.n	80024d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c0:	f005 fcb4 	bl	8007e2c <__errno>
 80024c4:	0003      	movs	r3, r0
 80024c6:	220c      	movs	r2, #12
 80024c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	425b      	negs	r3, r3
 80024ce:	e009      	b.n	80024e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <_sbrk+0x64>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	18d2      	adds	r2, r2, r3
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <_sbrk+0x64>)
 80024e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80024e2:	68fb      	ldr	r3, [r7, #12]
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b006      	add	sp, #24
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20005000 	.word	0x20005000
 80024f0:	00000400 	.word	0x00000400
 80024f4:	200000fc 	.word	0x200000fc
 80024f8:	20000490 	.word	0x20000490

080024fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002508:	4813      	ldr	r0, [pc, #76]	; (8002558 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800250a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800250c:	f7ff fff6 	bl	80024fc <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002510:	4812      	ldr	r0, [pc, #72]	; (800255c <LoopForever+0x6>)
    LDR R1, [R0]
 8002512:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002514:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <LoopForever+0xa>)
    CMP R1, R2
 8002518:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800251a:	d105      	bne.n	8002528 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800251c:	4811      	ldr	r0, [pc, #68]	; (8002564 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800251e:	4912      	ldr	r1, [pc, #72]	; (8002568 <LoopForever+0x12>)
    STR R1, [R0]
 8002520:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002522:	4812      	ldr	r0, [pc, #72]	; (800256c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002524:	4912      	ldr	r1, [pc, #72]	; (8002570 <LoopForever+0x1a>)
    STR R1, [R0]
 8002526:	6001      	str	r1, [r0, #0]

08002528 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002528:	4812      	ldr	r0, [pc, #72]	; (8002574 <LoopForever+0x1e>)
  ldr r1, =_edata
 800252a:	4913      	ldr	r1, [pc, #76]	; (8002578 <LoopForever+0x22>)
  ldr r2, =_sidata
 800252c:	4a13      	ldr	r2, [pc, #76]	; (800257c <LoopForever+0x26>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002530:	e002      	b.n	8002538 <LoopCopyDataInit>

08002532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002536:	3304      	adds	r3, #4

08002538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800253c:	d3f9      	bcc.n	8002532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002540:	4c10      	ldr	r4, [pc, #64]	; (8002584 <LoopForever+0x2e>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002544:	e001      	b.n	800254a <LoopFillZerobss>

08002546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002548:	3204      	adds	r2, #4

0800254a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800254c:	d3fb      	bcc.n	8002546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800254e:	f005 fc73 	bl	8007e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002552:	f7ff fcf5 	bl	8001f40 <main>

08002556 <LoopForever>:

LoopForever:
    b LoopForever
 8002556:	e7fe      	b.n	8002556 <LoopForever>
   ldr   r0, =_estack
 8002558:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 800255c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002560:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002564:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002568:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800256c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002570:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002578:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800257c:	08008f5c 	.word	0x08008f5c
  ldr r2, =_sbss
 8002580:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002584:	2000048c 	.word	0x2000048c

08002588 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002588:	e7fe      	b.n	8002588 <ADC1_IRQHandler>
	...

0800258c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002592:	1dfb      	adds	r3, r7, #7
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_Init+0x3c>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_Init+0x3c>)
 800259e:	2140      	movs	r1, #64	; 0x40
 80025a0:	430a      	orrs	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025a4:	2003      	movs	r0, #3
 80025a6:	f000 f811 	bl	80025cc <HAL_InitTick>
 80025aa:	1e03      	subs	r3, r0, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80025ae:	1dfb      	adds	r3, r7, #7
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	e001      	b.n	80025ba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025b6:	f7ff fe7d 	bl	80022b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	781b      	ldrb	r3, [r3, #0]
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	40022000 	.word	0x40022000

080025cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HAL_InitTick+0x5c>)
 80025d6:	681c      	ldr	r4, [r3, #0]
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_InitTick+0x60>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	0019      	movs	r1, r3
 80025de:	23fa      	movs	r3, #250	; 0xfa
 80025e0:	0098      	lsls	r0, r3, #2
 80025e2:	f7fd fd9b 	bl	800011c <__udivsi3>
 80025e6:	0003      	movs	r3, r0
 80025e8:	0019      	movs	r1, r3
 80025ea:	0020      	movs	r0, r4
 80025ec:	f7fd fd96 	bl	800011c <__udivsi3>
 80025f0:	0003      	movs	r3, r0
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 f905 	bl	8002802 <HAL_SYSTICK_Config>
 80025f8:	1e03      	subs	r3, r0, #0
 80025fa:	d001      	beq.n	8002600 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e00f      	b.n	8002620 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d80b      	bhi.n	800261e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	2301      	movs	r3, #1
 800260a:	425b      	negs	r3, r3
 800260c:	2200      	movs	r2, #0
 800260e:	0018      	movs	r0, r3
 8002610:	f000 f8e2 	bl	80027d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_InitTick+0x64>)
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b003      	add	sp, #12
 8002626:	bd90      	pop	{r4, r7, pc}
 8002628:	20000004 	.word	0x20000004
 800262c:	2000000c 	.word	0x2000000c
 8002630:	20000008 	.word	0x20000008

08002634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_IncTick+0x1c>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	001a      	movs	r2, r3
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_IncTick+0x20>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	18d2      	adds	r2, r2, r3
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_IncTick+0x20>)
 8002646:	601a      	str	r2, [r3, #0]
}
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	2000000c 	.word	0x2000000c
 8002654:	20000100 	.word	0x20000100

08002658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  return uwTick;
 800265c:	4b02      	ldr	r3, [pc, #8]	; (8002668 <HAL_GetTick+0x10>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	20000100 	.word	0x20000100

0800266c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002674:	f7ff fff0 	bl	8002658 <HAL_GetTick>
 8002678:	0003      	movs	r3, r0
 800267a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3301      	adds	r3, #1
 8002684:	d005      	beq.n	8002692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_Delay+0x44>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	001a      	movs	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	189b      	adds	r3, r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	f7ff ffe0 	bl	8002658 <HAL_GetTick>
 8002698:	0002      	movs	r2, r0
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d8f7      	bhi.n	8002694 <HAL_Delay+0x28>
  {
  }
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b004      	add	sp, #16
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	2000000c 	.word	0x2000000c

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	0002      	movs	r2, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b7f      	cmp	r3, #127	; 0x7f
 80026c8:	d828      	bhi.n	800271c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026ca:	4a2f      	ldr	r2, [pc, #188]	; (8002788 <__NVIC_SetPriority+0xd4>)
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	b25b      	sxtb	r3, r3
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	33c0      	adds	r3, #192	; 0xc0
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	589b      	ldr	r3, [r3, r2]
 80026da:	1dfa      	adds	r2, r7, #7
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	0011      	movs	r1, r2
 80026e0:	2203      	movs	r2, #3
 80026e2:	400a      	ands	r2, r1
 80026e4:	00d2      	lsls	r2, r2, #3
 80026e6:	21ff      	movs	r1, #255	; 0xff
 80026e8:	4091      	lsls	r1, r2
 80026ea:	000a      	movs	r2, r1
 80026ec:	43d2      	mvns	r2, r2
 80026ee:	401a      	ands	r2, r3
 80026f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	019b      	lsls	r3, r3, #6
 80026f6:	22ff      	movs	r2, #255	; 0xff
 80026f8:	401a      	ands	r2, r3
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	0018      	movs	r0, r3
 8002700:	2303      	movs	r3, #3
 8002702:	4003      	ands	r3, r0
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002708:	481f      	ldr	r0, [pc, #124]	; (8002788 <__NVIC_SetPriority+0xd4>)
 800270a:	1dfb      	adds	r3, r7, #7
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	b25b      	sxtb	r3, r3
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	430a      	orrs	r2, r1
 8002714:	33c0      	adds	r3, #192	; 0xc0
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800271a:	e031      	b.n	8002780 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800271c:	4a1b      	ldr	r2, [pc, #108]	; (800278c <__NVIC_SetPriority+0xd8>)
 800271e:	1dfb      	adds	r3, r7, #7
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	0019      	movs	r1, r3
 8002724:	230f      	movs	r3, #15
 8002726:	400b      	ands	r3, r1
 8002728:	3b08      	subs	r3, #8
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3306      	adds	r3, #6
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	18d3      	adds	r3, r2, r3
 8002732:	3304      	adds	r3, #4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	1dfa      	adds	r2, r7, #7
 8002738:	7812      	ldrb	r2, [r2, #0]
 800273a:	0011      	movs	r1, r2
 800273c:	2203      	movs	r2, #3
 800273e:	400a      	ands	r2, r1
 8002740:	00d2      	lsls	r2, r2, #3
 8002742:	21ff      	movs	r1, #255	; 0xff
 8002744:	4091      	lsls	r1, r2
 8002746:	000a      	movs	r2, r1
 8002748:	43d2      	mvns	r2, r2
 800274a:	401a      	ands	r2, r3
 800274c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	22ff      	movs	r2, #255	; 0xff
 8002754:	401a      	ands	r2, r3
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	0018      	movs	r0, r3
 800275c:	2303      	movs	r3, #3
 800275e:	4003      	ands	r3, r0
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002764:	4809      	ldr	r0, [pc, #36]	; (800278c <__NVIC_SetPriority+0xd8>)
 8002766:	1dfb      	adds	r3, r7, #7
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	001c      	movs	r4, r3
 800276c:	230f      	movs	r3, #15
 800276e:	4023      	ands	r3, r4
 8002770:	3b08      	subs	r3, #8
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	430a      	orrs	r2, r1
 8002776:	3306      	adds	r3, #6
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	18c3      	adds	r3, r0, r3
 800277c:	3304      	adds	r3, #4
 800277e:	601a      	str	r2, [r3, #0]
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b003      	add	sp, #12
 8002786:	bd90      	pop	{r4, r7, pc}
 8002788:	e000e100 	.word	0xe000e100
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	1e5a      	subs	r2, r3, #1
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	045b      	lsls	r3, r3, #17
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d301      	bcc.n	80027a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a4:	2301      	movs	r3, #1
 80027a6:	e010      	b.n	80027ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <SysTick_Config+0x44>)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	3a01      	subs	r2, #1
 80027ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b0:	2301      	movs	r3, #1
 80027b2:	425b      	negs	r3, r3
 80027b4:	2103      	movs	r1, #3
 80027b6:	0018      	movs	r0, r3
 80027b8:	f7ff ff7c 	bl	80026b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <SysTick_Config+0x44>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <SysTick_Config+0x44>)
 80027c4:	2207      	movs	r2, #7
 80027c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b002      	add	sp, #8
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	e000e010 	.word	0xe000e010

080027d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	210f      	movs	r1, #15
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	1c02      	adds	r2, r0, #0
 80027e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b25b      	sxtb	r3, r3
 80027f2:	0011      	movs	r1, r2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7ff ff5d 	bl	80026b4 <__NVIC_SetPriority>
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b004      	add	sp, #16
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f7ff ffbf 	bl	8002790 <SysTick_Config>
 8002812:	0003      	movs	r3, r0
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002832:	e155      	b.n	8002ae0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2101      	movs	r1, #1
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4091      	lsls	r1, r2
 800283e:	000a      	movs	r2, r1
 8002840:	4013      	ands	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d100      	bne.n	800284c <HAL_GPIO_Init+0x30>
 800284a:	e146      	b.n	8002ada <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2203      	movs	r2, #3
 8002852:	4013      	ands	r3, r2
 8002854:	2b01      	cmp	r3, #1
 8002856:	d005      	beq.n	8002864 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2203      	movs	r2, #3
 800285e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002860:	2b02      	cmp	r3, #2
 8002862:	d130      	bne.n	80028c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	409a      	lsls	r2, r3
 8002872:	0013      	movs	r3, r2
 8002874:	43da      	mvns	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	409a      	lsls	r2, r3
 8002886:	0013      	movs	r3, r2
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800289a:	2201      	movs	r2, #1
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
 80028a0:	0013      	movs	r3, r2
 80028a2:	43da      	mvns	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	091b      	lsrs	r3, r3, #4
 80028b0:	2201      	movs	r2, #1
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
 80028b8:	0013      	movs	r3, r2
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2203      	movs	r2, #3
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d017      	beq.n	8002902 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	2203      	movs	r2, #3
 80028de:	409a      	lsls	r2, r3
 80028e0:	0013      	movs	r3, r2
 80028e2:	43da      	mvns	r2, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	409a      	lsls	r2, r3
 80028f4:	0013      	movs	r3, r2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2203      	movs	r2, #3
 8002908:	4013      	ands	r3, r2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d123      	bne.n	8002956 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	08da      	lsrs	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3208      	adds	r2, #8
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	58d3      	ldr	r3, [r2, r3]
 800291a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2207      	movs	r2, #7
 8002920:	4013      	ands	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	220f      	movs	r2, #15
 8002926:	409a      	lsls	r2, r3
 8002928:	0013      	movs	r3, r2
 800292a:	43da      	mvns	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2107      	movs	r1, #7
 800293a:	400b      	ands	r3, r1
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	409a      	lsls	r2, r3
 8002940:	0013      	movs	r3, r2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	08da      	lsrs	r2, r3, #3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3208      	adds	r2, #8
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	6939      	ldr	r1, [r7, #16]
 8002954:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	409a      	lsls	r2, r3
 8002964:	0013      	movs	r3, r2
 8002966:	43da      	mvns	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2203      	movs	r2, #3
 8002974:	401a      	ands	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	409a      	lsls	r2, r3
 800297c:	0013      	movs	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	23c0      	movs	r3, #192	; 0xc0
 8002990:	029b      	lsls	r3, r3, #10
 8002992:	4013      	ands	r3, r2
 8002994:	d100      	bne.n	8002998 <HAL_GPIO_Init+0x17c>
 8002996:	e0a0      	b.n	8002ada <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002998:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_GPIO_Init+0x2dc>)
 800299a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800299c:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <HAL_GPIO_Init+0x2dc>)
 800299e:	2101      	movs	r1, #1
 80029a0:	430a      	orrs	r2, r1
 80029a2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a4:	4a55      	ldr	r2, [pc, #340]	; (8002afc <HAL_GPIO_Init+0x2e0>)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	589b      	ldr	r3, [r3, r2]
 80029b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2203      	movs	r2, #3
 80029b6:	4013      	ands	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	220f      	movs	r2, #15
 80029bc:	409a      	lsls	r2, r3
 80029be:	0013      	movs	r3, r2
 80029c0:	43da      	mvns	r2, r3
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	23a0      	movs	r3, #160	; 0xa0
 80029cc:	05db      	lsls	r3, r3, #23
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d01f      	beq.n	8002a12 <HAL_GPIO_Init+0x1f6>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4a      	ldr	r2, [pc, #296]	; (8002b00 <HAL_GPIO_Init+0x2e4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d019      	beq.n	8002a0e <HAL_GPIO_Init+0x1f2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a49      	ldr	r2, [pc, #292]	; (8002b04 <HAL_GPIO_Init+0x2e8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0x1ee>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a48      	ldr	r2, [pc, #288]	; (8002b08 <HAL_GPIO_Init+0x2ec>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00d      	beq.n	8002a06 <HAL_GPIO_Init+0x1ea>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a47      	ldr	r2, [pc, #284]	; (8002b0c <HAL_GPIO_Init+0x2f0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <HAL_GPIO_Init+0x1e6>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a46      	ldr	r2, [pc, #280]	; (8002b10 <HAL_GPIO_Init+0x2f4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_GPIO_Init+0x1e2>
 80029fa:	2305      	movs	r3, #5
 80029fc:	e00a      	b.n	8002a14 <HAL_GPIO_Init+0x1f8>
 80029fe:	2306      	movs	r3, #6
 8002a00:	e008      	b.n	8002a14 <HAL_GPIO_Init+0x1f8>
 8002a02:	2304      	movs	r3, #4
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x1f8>
 8002a06:	2303      	movs	r3, #3
 8002a08:	e004      	b.n	8002a14 <HAL_GPIO_Init+0x1f8>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e002      	b.n	8002a14 <HAL_GPIO_Init+0x1f8>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_GPIO_Init+0x1f8>
 8002a12:	2300      	movs	r3, #0
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	2103      	movs	r1, #3
 8002a18:	400a      	ands	r2, r1
 8002a1a:	0092      	lsls	r2, r2, #2
 8002a1c:	4093      	lsls	r3, r2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a24:	4935      	ldr	r1, [pc, #212]	; (8002afc <HAL_GPIO_Init+0x2e0>)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a32:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <HAL_GPIO_Init+0x2f8>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	035b      	lsls	r3, r3, #13
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a56:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <HAL_GPIO_Init+0x2f8>)
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <HAL_GPIO_Init+0x2f8>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	43da      	mvns	r2, r3
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	039b      	lsls	r3, r3, #14
 8002a74:	4013      	ands	r3, r2
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a80:	4b24      	ldr	r3, [pc, #144]	; (8002b14 <HAL_GPIO_Init+0x2f8>)
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <HAL_GPIO_Init+0x2f8>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	029b      	lsls	r3, r3, #10
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <HAL_GPIO_Init+0x2f8>)
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_GPIO_Init+0x2f8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	43da      	mvns	r2, r3
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	025b      	lsls	r3, r3, #9
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <HAL_GPIO_Init+0x2f8>)
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3301      	adds	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	40da      	lsrs	r2, r3
 8002ae8:	1e13      	subs	r3, r2, #0
 8002aea:	d000      	beq.n	8002aee <HAL_GPIO_Init+0x2d2>
 8002aec:	e6a2      	b.n	8002834 <HAL_GPIO_Init+0x18>
  }
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b006      	add	sp, #24
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010000 	.word	0x40010000
 8002b00:	50000400 	.word	0x50000400
 8002b04:	50000800 	.word	0x50000800
 8002b08:	50000c00 	.word	0x50000c00
 8002b0c:	50001000 	.word	0x50001000
 8002b10:	50001c00 	.word	0x50001c00
 8002b14:	40010400 	.word	0x40010400

08002b18 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	0008      	movs	r0, r1
 8002b22:	0011      	movs	r1, r2
 8002b24:	1cbb      	adds	r3, r7, #2
 8002b26:	1c02      	adds	r2, r0, #0
 8002b28:	801a      	strh	r2, [r3, #0]
 8002b2a:	1c7b      	adds	r3, r7, #1
 8002b2c:	1c0a      	adds	r2, r1, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b30:	1c7b      	adds	r3, r7, #1
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d004      	beq.n	8002b42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b38:	1cbb      	adds	r3, r7, #2
 8002b3a:	881a      	ldrh	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002b40:	e003      	b.n	8002b4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002b42:	1cbb      	adds	r3, r7, #2
 8002b44:	881a      	ldrh	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b002      	add	sp, #8
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f000 fb6c 	bl	8003240 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b68:	4bc8      	ldr	r3, [pc, #800]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	220c      	movs	r2, #12
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b72:	4bc6      	ldr	r3, [pc, #792]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	025b      	lsls	r3, r3, #9
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	4013      	ands	r3, r2
 8002b86:	d100      	bne.n	8002b8a <HAL_RCC_OscConfig+0x36>
 8002b88:	e07d      	b.n	8002c86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d007      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d112      	bne.n	8002bbc <HAL_RCC_OscConfig+0x68>
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	025b      	lsls	r3, r3, #9
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d10d      	bne.n	8002bbc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	4bba      	ldr	r3, [pc, #744]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	029b      	lsls	r3, r3, #10
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d100      	bne.n	8002bae <HAL_RCC_OscConfig+0x5a>
 8002bac:	e06a      	b.n	8002c84 <HAL_RCC_OscConfig+0x130>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d166      	bne.n	8002c84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f000 fb42 	bl	8003240 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	025b      	lsls	r3, r3, #9
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d107      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x84>
 8002bc8:	4bb0      	ldr	r3, [pc, #704]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4baf      	ldr	r3, [pc, #700]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	0249      	lsls	r1, r1, #9
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e027      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	23a0      	movs	r3, #160	; 0xa0
 8002bde:	02db      	lsls	r3, r3, #11
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d10e      	bne.n	8002c02 <HAL_RCC_OscConfig+0xae>
 8002be4:	4ba9      	ldr	r3, [pc, #676]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4ba8      	ldr	r3, [pc, #672]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002bea:	2180      	movs	r1, #128	; 0x80
 8002bec:	02c9      	lsls	r1, r1, #11
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	4ba6      	ldr	r3, [pc, #664]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4ba5      	ldr	r3, [pc, #660]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	0249      	lsls	r1, r1, #9
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	e012      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002c02:	4ba2      	ldr	r3, [pc, #648]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4ba1      	ldr	r3, [pc, #644]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002c08:	49a1      	ldr	r1, [pc, #644]	; (8002e90 <HAL_RCC_OscConfig+0x33c>)
 8002c0a:	400a      	ands	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	4b9f      	ldr	r3, [pc, #636]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	025b      	lsls	r3, r3, #9
 8002c16:	4013      	ands	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4b9b      	ldr	r3, [pc, #620]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b9a      	ldr	r3, [pc, #616]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002c22:	499c      	ldr	r1, [pc, #624]	; (8002e94 <HAL_RCC_OscConfig+0x340>)
 8002c24:	400a      	ands	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d014      	beq.n	8002c5a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7ff fd12 	bl	8002658 <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3a:	f7ff fd0d 	bl	8002658 <HAL_GetTick>
 8002c3e:	0002      	movs	r2, r0
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b64      	cmp	r3, #100	; 0x64
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e2f9      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c4c:	4b8f      	ldr	r3, [pc, #572]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	029b      	lsls	r3, r3, #10
 8002c54:	4013      	ands	r3, r2
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0xe6>
 8002c58:	e015      	b.n	8002c86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7ff fcfd 	bl	8002658 <HAL_GetTick>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c64:	f7ff fcf8 	bl	8002658 <HAL_GetTick>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	; 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e2e4      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c76:	4b85      	ldr	r3, [pc, #532]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	029b      	lsls	r3, r3, #10
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x110>
 8002c82:	e000      	b.n	8002c86 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c84:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d100      	bne.n	8002c92 <HAL_RCC_OscConfig+0x13e>
 8002c90:	e099      	b.n	8002dc6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002ca0:	4b7a      	ldr	r3, [pc, #488]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b79      	ldr	r3, [pc, #484]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002ca6:	2120      	movs	r1, #32
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	2220      	movs	r2, #32
 8002cb0:	4393      	bics	r3, r2
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d005      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d13e      	bne.n	8002d3e <HAL_RCC_OscConfig+0x1ea>
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d13b      	bne.n	8002d3e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002cc6:	4b71      	ldr	r3, [pc, #452]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_RCC_OscConfig+0x186>
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e2b2      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b6c      	ldr	r3, [pc, #432]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4a6e      	ldr	r2, [pc, #440]	; (8002e98 <HAL_RCC_OscConfig+0x344>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	021a      	lsls	r2, r3, #8
 8002cea:	4b68      	ldr	r3, [pc, #416]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002cf0:	4b66      	ldr	r3, [pc, #408]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2209      	movs	r2, #9
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	4b64      	ldr	r3, [pc, #400]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d02:	f000 fbeb 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8002d06:	0001      	movs	r1, r0
 8002d08:	4b60      	ldr	r3, [pc, #384]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	220f      	movs	r2, #15
 8002d10:	4013      	ands	r3, r2
 8002d12:	4a62      	ldr	r2, [pc, #392]	; (8002e9c <HAL_RCC_OscConfig+0x348>)
 8002d14:	5cd3      	ldrb	r3, [r2, r3]
 8002d16:	000a      	movs	r2, r1
 8002d18:	40da      	lsrs	r2, r3
 8002d1a:	4b61      	ldr	r3, [pc, #388]	; (8002ea0 <HAL_RCC_OscConfig+0x34c>)
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002d1e:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <HAL_RCC_OscConfig+0x350>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2513      	movs	r5, #19
 8002d24:	197c      	adds	r4, r7, r5
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff fc50 	bl	80025cc <HAL_InitTick>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002d30:	197b      	adds	r3, r7, r5
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d046      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002d38:	197b      	adds	r3, r7, r5
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	e280      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d027      	beq.n	8002d94 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d44:	4b51      	ldr	r3, [pc, #324]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2209      	movs	r2, #9
 8002d4a:	4393      	bics	r3, r2
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	4b4f      	ldr	r3, [pc, #316]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d52:	430a      	orrs	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7ff fc7f 	bl	8002658 <HAL_GetTick>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d60:	f7ff fc7a 	bl	8002658 <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e266      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d72:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2204      	movs	r2, #4
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d0f1      	beq.n	8002d60 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b43      	ldr	r3, [pc, #268]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a45      	ldr	r2, [pc, #276]	; (8002e98 <HAL_RCC_OscConfig+0x344>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	021a      	lsls	r2, r3, #8
 8002d8c:	4b3f      	ldr	r3, [pc, #252]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	e018      	b.n	8002dc6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d94:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b3c      	ldr	r3, [pc, #240]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	438a      	bics	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7ff fc5a 	bl	8002658 <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002daa:	f7ff fc55 	bl	8002658 <HAL_GetTick>
 8002dae:	0002      	movs	r2, r0
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e241      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dbc:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d1f1      	bne.n	8002daa <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2210      	movs	r2, #16
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x27e>
 8002dd0:	e0a1      	b.n	8002f16 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d140      	bne.n	8002e5a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dd8:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4013      	ands	r3, r2
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_OscConfig+0x29c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e227      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df0:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a2c      	ldr	r2, [pc, #176]	; (8002ea8 <HAL_RCC_OscConfig+0x354>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1a      	ldr	r2, [r3, #32]
 8002dfe:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	0a19      	lsrs	r1, r3, #8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	061a      	lsls	r2, r3, #24
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	0b5b      	lsrs	r3, r3, #13
 8002e1e:	3301      	adds	r3, #1
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	0212      	lsls	r2, r2, #8
 8002e24:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e26:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	210f      	movs	r1, #15
 8002e2e:	400b      	ands	r3, r1
 8002e30:	491a      	ldr	r1, [pc, #104]	; (8002e9c <HAL_RCC_OscConfig+0x348>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <HAL_RCC_OscConfig+0x34c>)
 8002e38:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <HAL_RCC_OscConfig+0x350>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2513      	movs	r5, #19
 8002e40:	197c      	adds	r4, r7, r5
 8002e42:	0018      	movs	r0, r3
 8002e44:	f7ff fbc2 	bl	80025cc <HAL_InitTick>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002e4c:	197b      	adds	r3, r7, r5
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d060      	beq.n	8002f16 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002e54:	197b      	adds	r3, r7, r5
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	e1f2      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d03f      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_RCC_OscConfig+0x338>)
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	0049      	lsls	r1, r1, #1
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7ff fbf2 	bl	8002658 <HAL_GetTick>
 8002e74:	0003      	movs	r3, r0
 8002e76:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e78:	e018      	b.n	8002eac <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e7a:	f7ff fbed 	bl	8002658 <HAL_GetTick>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d911      	bls.n	8002eac <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e1d9      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	fffeffff 	.word	0xfffeffff
 8002e94:	fffbffff 	.word	0xfffbffff
 8002e98:	ffffe0ff 	.word	0xffffe0ff
 8002e9c:	08008a98 	.word	0x08008a98
 8002ea0:	20000004 	.word	0x20000004
 8002ea4:	20000008 	.word	0x20000008
 8002ea8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002eac:	4bc9      	ldr	r3, [pc, #804]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d0e0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eb8:	4bc6      	ldr	r3, [pc, #792]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4ac6      	ldr	r2, [pc, #792]	; (80031d8 <HAL_RCC_OscConfig+0x684>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1a      	ldr	r2, [r3, #32]
 8002ec6:	4bc3      	ldr	r3, [pc, #780]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ecc:	4bc1      	ldr	r3, [pc, #772]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	0a19      	lsrs	r1, r3, #8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	061a      	lsls	r2, r3, #24
 8002eda:	4bbe      	ldr	r3, [pc, #760]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	e019      	b.n	8002f16 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ee2:	4bbc      	ldr	r3, [pc, #752]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4bbb      	ldr	r3, [pc, #748]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002ee8:	49bc      	ldr	r1, [pc, #752]	; (80031dc <HAL_RCC_OscConfig+0x688>)
 8002eea:	400a      	ands	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7ff fbb3 	bl	8002658 <HAL_GetTick>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef8:	f7ff fbae 	bl	8002658 <HAL_GetTick>
 8002efc:	0002      	movs	r2, r0
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e19a      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f0a:	4bb2      	ldr	r3, [pc, #712]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4013      	ands	r3, r2
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d036      	beq.n	8002f8e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d019      	beq.n	8002f5c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f28:	4baa      	ldr	r3, [pc, #680]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002f2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f2c:	4ba9      	ldr	r3, [pc, #676]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002f2e:	2101      	movs	r1, #1
 8002f30:	430a      	orrs	r2, r1
 8002f32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f34:	f7ff fb90 	bl	8002658 <HAL_GetTick>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7ff fb8b 	bl	8002658 <HAL_GetTick>
 8002f42:	0002      	movs	r2, r0
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e177      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f50:	4ba0      	ldr	r3, [pc, #640]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f54:	2202      	movs	r2, #2
 8002f56:	4013      	ands	r3, r2
 8002f58:	d0f1      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3ea>
 8002f5a:	e018      	b.n	8002f8e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5c:	4b9d      	ldr	r3, [pc, #628]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002f5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f60:	4b9c      	ldr	r3, [pc, #624]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002f62:	2101      	movs	r1, #1
 8002f64:	438a      	bics	r2, r1
 8002f66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f68:	f7ff fb76 	bl	8002658 <HAL_GetTick>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f72:	f7ff fb71 	bl	8002658 <HAL_GetTick>
 8002f76:	0002      	movs	r2, r0
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e15d      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f84:	4b93      	ldr	r3, [pc, #588]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d1f1      	bne.n	8002f72 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2204      	movs	r2, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	d100      	bne.n	8002f9a <HAL_RCC_OscConfig+0x446>
 8002f98:	e0ae      	b.n	80030f8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9a:	2023      	movs	r0, #35	; 0x23
 8002f9c:	183b      	adds	r3, r7, r0
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa2:	4b8c      	ldr	r3, [pc, #560]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	055b      	lsls	r3, r3, #21
 8002faa:	4013      	ands	r3, r2
 8002fac:	d109      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	4b89      	ldr	r3, [pc, #548]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb2:	4b88      	ldr	r3, [pc, #544]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	0549      	lsls	r1, r1, #21
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002fbc:	183b      	adds	r3, r7, r0
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	4b87      	ldr	r3, [pc, #540]	; (80031e0 <HAL_RCC_OscConfig+0x68c>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d11a      	bne.n	8003004 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fce:	4b84      	ldr	r3, [pc, #528]	; (80031e0 <HAL_RCC_OscConfig+0x68c>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b83      	ldr	r3, [pc, #524]	; (80031e0 <HAL_RCC_OscConfig+0x68c>)
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	0049      	lsls	r1, r1, #1
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fdc:	f7ff fb3c 	bl	8002658 <HAL_GetTick>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe6:	f7ff fb37 	bl	8002658 <HAL_GetTick>
 8002fea:	0002      	movs	r2, r0
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b64      	cmp	r3, #100	; 0x64
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e123      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	4b79      	ldr	r3, [pc, #484]	; (80031e0 <HAL_RCC_OscConfig+0x68c>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4013      	ands	r3, r2
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	429a      	cmp	r2, r3
 800300e:	d107      	bne.n	8003020 <HAL_RCC_OscConfig+0x4cc>
 8003010:	4b70      	ldr	r3, [pc, #448]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003014:	4b6f      	ldr	r3, [pc, #444]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003016:	2180      	movs	r1, #128	; 0x80
 8003018:	0049      	lsls	r1, r1, #1
 800301a:	430a      	orrs	r2, r1
 800301c:	651a      	str	r2, [r3, #80]	; 0x50
 800301e:	e031      	b.n	8003084 <HAL_RCC_OscConfig+0x530>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0x4ee>
 8003028:	4b6a      	ldr	r3, [pc, #424]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 800302a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800302c:	4b69      	ldr	r3, [pc, #420]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 800302e:	496b      	ldr	r1, [pc, #428]	; (80031dc <HAL_RCC_OscConfig+0x688>)
 8003030:	400a      	ands	r2, r1
 8003032:	651a      	str	r2, [r3, #80]	; 0x50
 8003034:	4b67      	ldr	r3, [pc, #412]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003036:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003038:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 800303a:	496a      	ldr	r1, [pc, #424]	; (80031e4 <HAL_RCC_OscConfig+0x690>)
 800303c:	400a      	ands	r2, r1
 800303e:	651a      	str	r2, [r3, #80]	; 0x50
 8003040:	e020      	b.n	8003084 <HAL_RCC_OscConfig+0x530>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	23a0      	movs	r3, #160	; 0xa0
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	429a      	cmp	r2, r3
 800304c:	d10e      	bne.n	800306c <HAL_RCC_OscConfig+0x518>
 800304e:	4b61      	ldr	r3, [pc, #388]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003050:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003052:	4b60      	ldr	r3, [pc, #384]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003054:	2180      	movs	r1, #128	; 0x80
 8003056:	00c9      	lsls	r1, r1, #3
 8003058:	430a      	orrs	r2, r1
 800305a:	651a      	str	r2, [r3, #80]	; 0x50
 800305c:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 800305e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003060:	4b5c      	ldr	r3, [pc, #368]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003062:	2180      	movs	r1, #128	; 0x80
 8003064:	0049      	lsls	r1, r1, #1
 8003066:	430a      	orrs	r2, r1
 8003068:	651a      	str	r2, [r3, #80]	; 0x50
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0x530>
 800306c:	4b59      	ldr	r3, [pc, #356]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 800306e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003070:	4b58      	ldr	r3, [pc, #352]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003072:	495a      	ldr	r1, [pc, #360]	; (80031dc <HAL_RCC_OscConfig+0x688>)
 8003074:	400a      	ands	r2, r1
 8003076:	651a      	str	r2, [r3, #80]	; 0x50
 8003078:	4b56      	ldr	r3, [pc, #344]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 800307a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800307c:	4b55      	ldr	r3, [pc, #340]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 800307e:	4959      	ldr	r1, [pc, #356]	; (80031e4 <HAL_RCC_OscConfig+0x690>)
 8003080:	400a      	ands	r2, r1
 8003082:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308c:	f7ff fae4 	bl	8002658 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003094:	e009      	b.n	80030aa <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7ff fadf 	bl	8002658 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	4a51      	ldr	r2, [pc, #324]	; (80031e8 <HAL_RCC_OscConfig+0x694>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0ca      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030aa:	4b4a      	ldr	r3, [pc, #296]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 80030ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4013      	ands	r3, r2
 80030b4:	d0ef      	beq.n	8003096 <HAL_RCC_OscConfig+0x542>
 80030b6:	e014      	b.n	80030e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b8:	f7ff face 	bl	8002658 <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030c0:	e009      	b.n	80030d6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7ff fac9 	bl	8002658 <HAL_GetTick>
 80030c6:	0002      	movs	r2, r0
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	4a46      	ldr	r2, [pc, #280]	; (80031e8 <HAL_RCC_OscConfig+0x694>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0b4      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030d6:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 80030d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4013      	ands	r3, r2
 80030e0:	d1ef      	bne.n	80030c2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030e2:	2323      	movs	r3, #35	; 0x23
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ec:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 80030ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f0:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 80030f2:	493e      	ldr	r1, [pc, #248]	; (80031ec <HAL_RCC_OscConfig+0x698>)
 80030f4:	400a      	ands	r2, r1
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d100      	bne.n	8003102 <HAL_RCC_OscConfig+0x5ae>
 8003100:	e09d      	b.n	800323e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2b0c      	cmp	r3, #12
 8003106:	d100      	bne.n	800310a <HAL_RCC_OscConfig+0x5b6>
 8003108:	e076      	b.n	80031f8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2b02      	cmp	r3, #2
 8003110:	d145      	bne.n	800319e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003118:	4935      	ldr	r1, [pc, #212]	; (80031f0 <HAL_RCC_OscConfig+0x69c>)
 800311a:	400a      	ands	r2, r1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7ff fa9b 	bl	8002658 <HAL_GetTick>
 8003122:	0003      	movs	r3, r0
 8003124:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003128:	f7ff fa96 	bl	8002658 <HAL_GetTick>
 800312c:	0002      	movs	r2, r0
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e082      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800313a:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	049b      	lsls	r3, r3, #18
 8003142:	4013      	ands	r3, r2
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003146:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	4a2a      	ldr	r2, [pc, #168]	; (80031f4 <HAL_RCC_OscConfig+0x6a0>)
 800314c:	4013      	ands	r3, r2
 800314e:	0019      	movs	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	431a      	orrs	r2, r3
 8003160:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003162:	430a      	orrs	r2, r1
 8003164:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003166:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 800316c:	2180      	movs	r1, #128	; 0x80
 800316e:	0449      	lsls	r1, r1, #17
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7ff fa70 	bl	8002658 <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317e:	f7ff fa6b 	bl	8002658 <HAL_GetTick>
 8003182:	0002      	movs	r2, r0
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e057      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	049b      	lsls	r3, r3, #18
 8003198:	4013      	ands	r3, r2
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x62a>
 800319c:	e04f      	b.n	800323e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 80031a4:	4912      	ldr	r1, [pc, #72]	; (80031f0 <HAL_RCC_OscConfig+0x69c>)
 80031a6:	400a      	ands	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031aa:	f7ff fa55 	bl	8002658 <HAL_GetTick>
 80031ae:	0003      	movs	r3, r0
 80031b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7ff fa50 	bl	8002658 <HAL_GetTick>
 80031b8:	0002      	movs	r2, r0
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e03c      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031c6:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_RCC_OscConfig+0x680>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	049b      	lsls	r3, r3, #18
 80031ce:	4013      	ands	r3, r2
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x660>
 80031d2:	e034      	b.n	800323e <HAL_RCC_OscConfig+0x6ea>
 80031d4:	40021000 	.word	0x40021000
 80031d8:	ffff1fff 	.word	0xffff1fff
 80031dc:	fffffeff 	.word	0xfffffeff
 80031e0:	40007000 	.word	0x40007000
 80031e4:	fffffbff 	.word	0xfffffbff
 80031e8:	00001388 	.word	0x00001388
 80031ec:	efffffff 	.word	0xefffffff
 80031f0:	feffffff 	.word	0xfeffffff
 80031f4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e01d      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003204:	4b10      	ldr	r3, [pc, #64]	; (8003248 <HAL_RCC_OscConfig+0x6f4>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	025b      	lsls	r3, r3, #9
 8003210:	401a      	ands	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	429a      	cmp	r2, r3
 8003218:	d10f      	bne.n	800323a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	23f0      	movs	r3, #240	; 0xf0
 800321e:	039b      	lsls	r3, r3, #14
 8003220:	401a      	ands	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d107      	bne.n	800323a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	23c0      	movs	r3, #192	; 0xc0
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	401a      	ands	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d001      	beq.n	800323e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b00a      	add	sp, #40	; 0x28
 8003246:	bdb0      	pop	{r4, r5, r7, pc}
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800324c:	b5b0      	push	{r4, r5, r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e128      	b.n	80034b2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b96      	ldr	r3, [pc, #600]	; (80034bc <HAL_RCC_ClockConfig+0x270>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2201      	movs	r2, #1
 8003266:	4013      	ands	r3, r2
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d91e      	bls.n	80032ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b93      	ldr	r3, [pc, #588]	; (80034bc <HAL_RCC_ClockConfig+0x270>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2201      	movs	r2, #1
 8003274:	4393      	bics	r3, r2
 8003276:	0019      	movs	r1, r3
 8003278:	4b90      	ldr	r3, [pc, #576]	; (80034bc <HAL_RCC_ClockConfig+0x270>)
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003280:	f7ff f9ea 	bl	8002658 <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003288:	e009      	b.n	800329e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328a:	f7ff f9e5 	bl	8002658 <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	4a8a      	ldr	r2, [pc, #552]	; (80034c0 <HAL_RCC_ClockConfig+0x274>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e109      	b.n	80034b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329e:	4b87      	ldr	r3, [pc, #540]	; (80034bc <HAL_RCC_ClockConfig+0x270>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2201      	movs	r2, #1
 80032a4:	4013      	ands	r3, r2
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1ee      	bne.n	800328a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2202      	movs	r2, #2
 80032b2:	4013      	ands	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b6:	4b83      	ldr	r3, [pc, #524]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	22f0      	movs	r2, #240	; 0xf0
 80032bc:	4393      	bics	r3, r2
 80032be:	0019      	movs	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	4b7f      	ldr	r3, [pc, #508]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 80032c6:	430a      	orrs	r2, r1
 80032c8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2201      	movs	r2, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	d100      	bne.n	80032d6 <HAL_RCC_ClockConfig+0x8a>
 80032d4:	e089      	b.n	80033ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032de:	4b79      	ldr	r3, [pc, #484]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	029b      	lsls	r3, r3, #10
 80032e6:	4013      	ands	r3, r2
 80032e8:	d120      	bne.n	800332c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0e1      	b.n	80034b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032f6:	4b73      	ldr	r3, [pc, #460]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	049b      	lsls	r3, r3, #18
 80032fe:	4013      	ands	r3, r2
 8003300:	d114      	bne.n	800332c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0d5      	b.n	80034b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d106      	bne.n	800331c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800330e:	4b6d      	ldr	r3, [pc, #436]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2204      	movs	r2, #4
 8003314:	4013      	ands	r3, r2
 8003316:	d109      	bne.n	800332c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0ca      	b.n	80034b2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800331c:	4b69      	ldr	r3, [pc, #420]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4013      	ands	r3, r2
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0c2      	b.n	80034b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332c:	4b65      	ldr	r3, [pc, #404]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2203      	movs	r2, #3
 8003332:	4393      	bics	r3, r2
 8003334:	0019      	movs	r1, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	4b62      	ldr	r3, [pc, #392]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 800333c:	430a      	orrs	r2, r1
 800333e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003340:	f7ff f98a 	bl	8002658 <HAL_GetTick>
 8003344:	0003      	movs	r3, r0
 8003346:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d111      	bne.n	8003374 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003350:	e009      	b.n	8003366 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003352:	f7ff f981 	bl	8002658 <HAL_GetTick>
 8003356:	0002      	movs	r2, r0
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	4a58      	ldr	r2, [pc, #352]	; (80034c0 <HAL_RCC_ClockConfig+0x274>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0a5      	b.n	80034b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003366:	4b57      	ldr	r3, [pc, #348]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	220c      	movs	r2, #12
 800336c:	4013      	ands	r3, r2
 800336e:	2b08      	cmp	r3, #8
 8003370:	d1ef      	bne.n	8003352 <HAL_RCC_ClockConfig+0x106>
 8003372:	e03a      	b.n	80033ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d111      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800337c:	e009      	b.n	8003392 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337e:	f7ff f96b 	bl	8002658 <HAL_GetTick>
 8003382:	0002      	movs	r2, r0
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	4a4d      	ldr	r2, [pc, #308]	; (80034c0 <HAL_RCC_ClockConfig+0x274>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e08f      	b.n	80034b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003392:	4b4c      	ldr	r3, [pc, #304]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	220c      	movs	r2, #12
 8003398:	4013      	ands	r3, r2
 800339a:	2b0c      	cmp	r3, #12
 800339c:	d1ef      	bne.n	800337e <HAL_RCC_ClockConfig+0x132>
 800339e:	e024      	b.n	80033ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d11b      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033a8:	e009      	b.n	80033be <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033aa:	f7ff f955 	bl	8002658 <HAL_GetTick>
 80033ae:	0002      	movs	r2, r0
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	4a42      	ldr	r2, [pc, #264]	; (80034c0 <HAL_RCC_ClockConfig+0x274>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e079      	b.n	80034b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033be:	4b41      	ldr	r3, [pc, #260]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	220c      	movs	r2, #12
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d1ef      	bne.n	80033aa <HAL_RCC_ClockConfig+0x15e>
 80033ca:	e00e      	b.n	80033ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033cc:	f7ff f944 	bl	8002658 <HAL_GetTick>
 80033d0:	0002      	movs	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	4a3a      	ldr	r2, [pc, #232]	; (80034c0 <HAL_RCC_ClockConfig+0x274>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e068      	b.n	80034b2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033e0:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	220c      	movs	r2, #12
 80033e6:	4013      	ands	r3, r2
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ea:	4b34      	ldr	r3, [pc, #208]	; (80034bc <HAL_RCC_ClockConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d21e      	bcs.n	8003436 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f8:	4b30      	ldr	r3, [pc, #192]	; (80034bc <HAL_RCC_ClockConfig+0x270>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2201      	movs	r2, #1
 80033fe:	4393      	bics	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_RCC_ClockConfig+0x270>)
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800340a:	f7ff f925 	bl	8002658 <HAL_GetTick>
 800340e:	0003      	movs	r3, r0
 8003410:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	e009      	b.n	8003428 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003414:	f7ff f920 	bl	8002658 <HAL_GetTick>
 8003418:	0002      	movs	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	4a28      	ldr	r2, [pc, #160]	; (80034c0 <HAL_RCC_ClockConfig+0x274>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e044      	b.n	80034b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_RCC_ClockConfig+0x270>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2201      	movs	r2, #1
 800342e:	4013      	ands	r3, r2
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d1ee      	bne.n	8003414 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2204      	movs	r2, #4
 800343c:	4013      	ands	r3, r2
 800343e:	d009      	beq.n	8003454 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003440:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a20      	ldr	r2, [pc, #128]	; (80034c8 <HAL_RCC_ClockConfig+0x27c>)
 8003446:	4013      	ands	r3, r2
 8003448:	0019      	movs	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 8003450:	430a      	orrs	r2, r1
 8003452:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2208      	movs	r2, #8
 800345a:	4013      	ands	r3, r2
 800345c:	d00a      	beq.n	8003474 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800345e:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <HAL_RCC_ClockConfig+0x280>)
 8003464:	4013      	ands	r3, r2
 8003466:	0019      	movs	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	00da      	lsls	r2, r3, #3
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 8003470:	430a      	orrs	r2, r1
 8003472:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003474:	f000 f832 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8003478:	0001      	movs	r1, r0
 800347a:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_RCC_ClockConfig+0x278>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	220f      	movs	r2, #15
 8003482:	4013      	ands	r3, r2
 8003484:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <HAL_RCC_ClockConfig+0x284>)
 8003486:	5cd3      	ldrb	r3, [r2, r3]
 8003488:	000a      	movs	r2, r1
 800348a:	40da      	lsrs	r2, r3
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <HAL_RCC_ClockConfig+0x288>)
 800348e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_RCC_ClockConfig+0x28c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	250b      	movs	r5, #11
 8003496:	197c      	adds	r4, r7, r5
 8003498:	0018      	movs	r0, r3
 800349a:	f7ff f897 	bl	80025cc <HAL_InitTick>
 800349e:	0003      	movs	r3, r0
 80034a0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80034a2:	197b      	adds	r3, r7, r5
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80034aa:	197b      	adds	r3, r7, r5
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b004      	add	sp, #16
 80034b8:	bdb0      	pop	{r4, r5, r7, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	40022000 	.word	0x40022000
 80034c0:	00001388 	.word	0x00001388
 80034c4:	40021000 	.word	0x40021000
 80034c8:	fffff8ff 	.word	0xfffff8ff
 80034cc:	ffffc7ff 	.word	0xffffc7ff
 80034d0:	08008a98 	.word	0x08008a98
 80034d4:	20000004 	.word	0x20000004
 80034d8:	20000008 	.word	0x20000008

080034dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	b5b0      	push	{r4, r5, r7, lr}
 80034de:	b08e      	sub	sp, #56	; 0x38
 80034e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80034e2:	4b4c      	ldr	r3, [pc, #304]	; (8003614 <HAL_RCC_GetSysClockFreq+0x138>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ea:	230c      	movs	r3, #12
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d014      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x40>
 80034f2:	d900      	bls.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1a>
 80034f4:	e07b      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x112>
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x24>
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d00b      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0x3a>
 80034fe:	e076      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003500:	4b44      	ldr	r3, [pc, #272]	; (8003614 <HAL_RCC_GetSysClockFreq+0x138>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2210      	movs	r2, #16
 8003506:	4013      	ands	r3, r2
 8003508:	d002      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800350a:	4b43      	ldr	r3, [pc, #268]	; (8003618 <HAL_RCC_GetSysClockFreq+0x13c>)
 800350c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800350e:	e07c      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003510:	4b42      	ldr	r3, [pc, #264]	; (800361c <HAL_RCC_GetSysClockFreq+0x140>)
 8003512:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003514:	e079      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003516:	4b42      	ldr	r3, [pc, #264]	; (8003620 <HAL_RCC_GetSysClockFreq+0x144>)
 8003518:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800351a:	e076      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351e:	0c9a      	lsrs	r2, r3, #18
 8003520:	230f      	movs	r3, #15
 8003522:	401a      	ands	r2, r3
 8003524:	4b3f      	ldr	r3, [pc, #252]	; (8003624 <HAL_RCC_GetSysClockFreq+0x148>)
 8003526:	5c9b      	ldrb	r3, [r3, r2]
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	0d9a      	lsrs	r2, r3, #22
 800352e:	2303      	movs	r3, #3
 8003530:	4013      	ands	r3, r2
 8003532:	3301      	adds	r3, #1
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003536:	4b37      	ldr	r3, [pc, #220]	; (8003614 <HAL_RCC_GetSysClockFreq+0x138>)
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	025b      	lsls	r3, r3, #9
 800353e:	4013      	ands	r3, r2
 8003540:	d01a      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	4a35      	ldr	r2, [pc, #212]	; (8003620 <HAL_RCC_GetSysClockFreq+0x144>)
 800354c:	2300      	movs	r3, #0
 800354e:	69b8      	ldr	r0, [r7, #24]
 8003550:	69f9      	ldr	r1, [r7, #28]
 8003552:	f7fc fe8f 	bl	8000274 <__aeabi_lmul>
 8003556:	0002      	movs	r2, r0
 8003558:	000b      	movs	r3, r1
 800355a:	0010      	movs	r0, r2
 800355c:	0019      	movs	r1, r3
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f7fc fe63 	bl	8000234 <__aeabi_uldivmod>
 800356e:	0002      	movs	r2, r0
 8003570:	000b      	movs	r3, r1
 8003572:	0013      	movs	r3, r2
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
 8003576:	e037      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_RCC_GetSysClockFreq+0x138>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2210      	movs	r2, #16
 800357e:	4013      	ands	r3, r2
 8003580:	d01a      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4a23      	ldr	r2, [pc, #140]	; (8003618 <HAL_RCC_GetSysClockFreq+0x13c>)
 800358c:	2300      	movs	r3, #0
 800358e:	68b8      	ldr	r0, [r7, #8]
 8003590:	68f9      	ldr	r1, [r7, #12]
 8003592:	f7fc fe6f 	bl	8000274 <__aeabi_lmul>
 8003596:	0002      	movs	r2, r0
 8003598:	000b      	movs	r3, r1
 800359a:	0010      	movs	r0, r2
 800359c:	0019      	movs	r1, r3
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f7fc fe43 	bl	8000234 <__aeabi_uldivmod>
 80035ae:	0002      	movs	r2, r0
 80035b0:	000b      	movs	r3, r1
 80035b2:	0013      	movs	r3, r2
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
 80035b6:	e017      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	0018      	movs	r0, r3
 80035bc:	2300      	movs	r3, #0
 80035be:	0019      	movs	r1, r3
 80035c0:	4a16      	ldr	r2, [pc, #88]	; (800361c <HAL_RCC_GetSysClockFreq+0x140>)
 80035c2:	2300      	movs	r3, #0
 80035c4:	f7fc fe56 	bl	8000274 <__aeabi_lmul>
 80035c8:	0002      	movs	r2, r0
 80035ca:	000b      	movs	r3, r1
 80035cc:	0010      	movs	r0, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	001c      	movs	r4, r3
 80035d4:	2300      	movs	r3, #0
 80035d6:	001d      	movs	r5, r3
 80035d8:	0022      	movs	r2, r4
 80035da:	002b      	movs	r3, r5
 80035dc:	f7fc fe2a 	bl	8000234 <__aeabi_uldivmod>
 80035e0:	0002      	movs	r2, r0
 80035e2:	000b      	movs	r3, r1
 80035e4:	0013      	movs	r3, r2
 80035e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80035e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035ec:	e00d      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80035ee:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_RCC_GetSysClockFreq+0x138>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	0b5b      	lsrs	r3, r3, #13
 80035f4:	2207      	movs	r2, #7
 80035f6:	4013      	ands	r3, r2
 80035f8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	3301      	adds	r3, #1
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	0212      	lsls	r2, r2, #8
 8003602:	409a      	lsls	r2, r3
 8003604:	0013      	movs	r3, r2
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003608:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b00e      	add	sp, #56	; 0x38
 8003612:	bdb0      	pop	{r4, r5, r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	003d0900 	.word	0x003d0900
 800361c:	00f42400 	.word	0x00f42400
 8003620:	007a1200 	.word	0x007a1200
 8003624:	08008aa8 	.word	0x08008aa8

08003628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07b      	b.n	8003732 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	2382      	movs	r3, #130	; 0x82
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	429a      	cmp	r2, r3
 800364c:	d009      	beq.n	8003662 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	61da      	str	r2, [r3, #28]
 8003654:	e005      	b.n	8003662 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2251      	movs	r2, #81	; 0x51
 800366c:	5c9b      	ldrb	r3, [r3, r2]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2250      	movs	r2, #80	; 0x50
 8003678:	2100      	movs	r1, #0
 800367a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	0018      	movs	r0, r3
 8003680:	f7fe fe2c 	bl	80022dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2251      	movs	r2, #81	; 0x51
 8003688:	2102      	movs	r1, #2
 800368a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2140      	movs	r1, #64	; 0x40
 8003698:	438a      	bics	r2, r1
 800369a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	2382      	movs	r3, #130	; 0x82
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	401a      	ands	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6899      	ldr	r1, [r3, #8]
 80036aa:	2384      	movs	r3, #132	; 0x84
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	400b      	ands	r3, r1
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68d9      	ldr	r1, [r3, #12]
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	400b      	ands	r3, r1
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2102      	movs	r1, #2
 80036c4:	400b      	ands	r3, r1
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	2101      	movs	r1, #1
 80036ce:	400b      	ands	r3, r1
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6999      	ldr	r1, [r3, #24]
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	400b      	ands	r3, r1
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	2138      	movs	r1, #56	; 0x38
 80036e4:	400b      	ands	r3, r1
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	2180      	movs	r1, #128	; 0x80
 80036ee:	400b      	ands	r3, r1
 80036f0:	431a      	orrs	r2, r3
 80036f2:	0011      	movs	r1, r2
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	019b      	lsls	r3, r3, #6
 80036fc:	401a      	ands	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	2204      	movs	r2, #4
 800370e:	4013      	ands	r3, r2
 8003710:	0019      	movs	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	2210      	movs	r2, #16
 8003718:	401a      	ands	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2251      	movs	r2, #81	; 0x51
 800372c:	2101      	movs	r1, #1
 800372e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b002      	add	sp, #8
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b088      	sub	sp, #32
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	1dbb      	adds	r3, r7, #6
 8003748:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800374a:	231f      	movs	r3, #31
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2250      	movs	r2, #80	; 0x50
 8003756:	5c9b      	ldrb	r3, [r3, r2]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_SPI_Transmit+0x26>
 800375c:	2302      	movs	r3, #2
 800375e:	e145      	b.n	80039ec <HAL_SPI_Transmit+0x2b2>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2250      	movs	r2, #80	; 0x50
 8003764:	2101      	movs	r1, #1
 8003766:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003768:	f7fe ff76 	bl	8002658 <HAL_GetTick>
 800376c:	0003      	movs	r3, r0
 800376e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003770:	2316      	movs	r3, #22
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	1dba      	adds	r2, r7, #6
 8003776:	8812      	ldrh	r2, [r2, #0]
 8003778:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2251      	movs	r2, #81	; 0x51
 800377e:	5c9b      	ldrb	r3, [r3, r2]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d004      	beq.n	8003790 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003786:	231f      	movs	r3, #31
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	2202      	movs	r2, #2
 800378c:	701a      	strb	r2, [r3, #0]
    goto error;
 800378e:	e126      	b.n	80039de <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_SPI_Transmit+0x64>
 8003796:	1dbb      	adds	r3, r7, #6
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d104      	bne.n	80037a8 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800379e:	231f      	movs	r3, #31
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	2201      	movs	r2, #1
 80037a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80037a6:	e11a      	b.n	80039de <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2251      	movs	r2, #81	; 0x51
 80037ac:	2103      	movs	r1, #3
 80037ae:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1dba      	adds	r2, r7, #6
 80037c0:	8812      	ldrh	r2, [r2, #0]
 80037c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1dba      	adds	r2, r7, #6
 80037c8:	8812      	ldrh	r2, [r2, #0]
 80037ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d110      	bne.n	8003818 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2140      	movs	r1, #64	; 0x40
 8003802:	438a      	bics	r2, r1
 8003804:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2180      	movs	r1, #128	; 0x80
 8003812:	01c9      	lsls	r1, r1, #7
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2240      	movs	r2, #64	; 0x40
 8003820:	4013      	ands	r3, r2
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d007      	beq.n	8003836 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2140      	movs	r1, #64	; 0x40
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	429a      	cmp	r2, r3
 8003840:	d152      	bne.n	80038e8 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d004      	beq.n	8003854 <HAL_SPI_Transmit+0x11a>
 800384a:	2316      	movs	r3, #22
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d143      	bne.n	80038dc <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	881a      	ldrh	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	1c9a      	adds	r2, r3, #2
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003878:	e030      	b.n	80038dc <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2202      	movs	r2, #2
 8003882:	4013      	ands	r3, r2
 8003884:	2b02      	cmp	r3, #2
 8003886:	d112      	bne.n	80038ae <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	881a      	ldrh	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	1c9a      	adds	r2, r3, #2
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80038ac:	e016      	b.n	80038dc <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ae:	f7fe fed3 	bl	8002658 <HAL_GetTick>
 80038b2:	0002      	movs	r2, r0
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d802      	bhi.n	80038c4 <HAL_SPI_Transmit+0x18a>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	d102      	bne.n	80038ca <HAL_SPI_Transmit+0x190>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d108      	bne.n	80038dc <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80038ca:	231f      	movs	r3, #31
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	2203      	movs	r2, #3
 80038d0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2251      	movs	r2, #81	; 0x51
 80038d6:	2101      	movs	r1, #1
 80038d8:	5499      	strb	r1, [r3, r2]
          goto error;
 80038da:	e080      	b.n	80039de <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1c9      	bne.n	800387a <HAL_SPI_Transmit+0x140>
 80038e6:	e053      	b.n	8003990 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <HAL_SPI_Transmit+0x1c0>
 80038f0:	2316      	movs	r3, #22
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d145      	bne.n	8003986 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	330c      	adds	r3, #12
 8003904:	7812      	ldrb	r2, [r2, #0]
 8003906:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003920:	e031      	b.n	8003986 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2202      	movs	r2, #2
 800392a:	4013      	ands	r3, r2
 800392c:	2b02      	cmp	r3, #2
 800392e:	d113      	bne.n	8003958 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	7812      	ldrb	r2, [r2, #0]
 800393c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	86da      	strh	r2, [r3, #54]	; 0x36
 8003956:	e016      	b.n	8003986 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003958:	f7fe fe7e 	bl	8002658 <HAL_GetTick>
 800395c:	0002      	movs	r2, r0
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d802      	bhi.n	800396e <HAL_SPI_Transmit+0x234>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	3301      	adds	r3, #1
 800396c:	d102      	bne.n	8003974 <HAL_SPI_Transmit+0x23a>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d108      	bne.n	8003986 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8003974:	231f      	movs	r3, #31
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	2203      	movs	r2, #3
 800397a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2251      	movs	r2, #81	; 0x51
 8003980:	2101      	movs	r1, #1
 8003982:	5499      	strb	r1, [r3, r2]
          goto error;
 8003984:	e02b      	b.n	80039de <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1c8      	bne.n	8003922 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	6839      	ldr	r1, [r7, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	0018      	movs	r0, r3
 8003998:	f000 fa86 	bl	8003ea8 <SPI_EndRxTxTransaction>
 800399c:	1e03      	subs	r3, r0, #0
 800399e:	d002      	beq.n	80039a6 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ae:	2300      	movs	r3, #0
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80039cc:	231f      	movs	r3, #31
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	e003      	b.n	80039de <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2251      	movs	r2, #81	; 0x51
 80039da:	2101      	movs	r1, #1
 80039dc:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2250      	movs	r2, #80	; 0x50
 80039e2:	2100      	movs	r1, #0
 80039e4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80039e6:	231f      	movs	r3, #31
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	781b      	ldrb	r3, [r3, #0]
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b008      	add	sp, #32
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08c      	sub	sp, #48	; 0x30
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	001a      	movs	r2, r3
 8003a02:	1cbb      	adds	r3, r7, #2
 8003a04:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a06:	2301      	movs	r3, #1
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a0a:	232b      	movs	r3, #43	; 0x2b
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2250      	movs	r2, #80	; 0x50
 8003a16:	5c9b      	ldrb	r3, [r3, r2]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_SPI_TransmitReceive+0x2c>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e1b0      	b.n	8003d82 <HAL_SPI_TransmitReceive+0x38e>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2250      	movs	r2, #80	; 0x50
 8003a24:	2101      	movs	r1, #1
 8003a26:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a28:	f7fe fe16 	bl	8002658 <HAL_GetTick>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a30:	2023      	movs	r0, #35	; 0x23
 8003a32:	183b      	adds	r3, r7, r0
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	2151      	movs	r1, #81	; 0x51
 8003a38:	5c52      	ldrb	r2, [r2, r1]
 8003a3a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a42:	231a      	movs	r3, #26
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	1cba      	adds	r2, r7, #2
 8003a48:	8812      	ldrh	r2, [r2, #0]
 8003a4a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a4c:	183b      	adds	r3, r7, r0
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d011      	beq.n	8003a78 <HAL_SPI_TransmitReceive+0x84>
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	2382      	movs	r3, #130	; 0x82
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d107      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x7a>
 8003a66:	183b      	adds	r3, r7, r0
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d004      	beq.n	8003a78 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003a6e:	232b      	movs	r3, #43	; 0x2b
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	2202      	movs	r2, #2
 8003a74:	701a      	strb	r2, [r3, #0]
    goto error;
 8003a76:	e17d      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d006      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x98>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x98>
 8003a84:	1cbb      	adds	r3, r7, #2
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d104      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003a8c:	232b      	movs	r3, #43	; 0x2b
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	2201      	movs	r2, #1
 8003a92:	701a      	strb	r2, [r3, #0]
    goto error;
 8003a94:	e16e      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2251      	movs	r2, #81	; 0x51
 8003a9a:	5c9b      	ldrb	r3, [r3, r2]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d003      	beq.n	8003aaa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2251      	movs	r2, #81	; 0x51
 8003aa6:	2105      	movs	r1, #5
 8003aa8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1cba      	adds	r2, r7, #2
 8003aba:	8812      	ldrh	r2, [r2, #0]
 8003abc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1cba      	adds	r2, r7, #2
 8003ac2:	8812      	ldrh	r2, [r2, #0]
 8003ac4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1cba      	adds	r2, r7, #2
 8003ad0:	8812      	ldrh	r2, [r2, #0]
 8003ad2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1cba      	adds	r2, r7, #2
 8003ad8:	8812      	ldrh	r2, [r2, #0]
 8003ada:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2240      	movs	r2, #64	; 0x40
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	d007      	beq.n	8003b06 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2140      	movs	r1, #64	; 0x40
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d000      	beq.n	8003b14 <HAL_SPI_TransmitReceive+0x120>
 8003b12:	e07f      	b.n	8003c14 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x134>
 8003b1c:	231a      	movs	r3, #26
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d000      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x134>
 8003b26:	e06a      	b.n	8003bfe <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	881a      	ldrh	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	1c9a      	adds	r2, r3, #2
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b4c:	e057      	b.n	8003bfe <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2202      	movs	r2, #2
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d11b      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x1a0>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_SPI_TransmitReceive+0x1a0>
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d113      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d119      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x1e2>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d014      	beq.n	8003bd6 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	1c9a      	adds	r2, r3, #2
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bd6:	f7fe fd3f 	bl	8002658 <HAL_GetTick>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d80b      	bhi.n	8003bfe <HAL_SPI_TransmitReceive+0x20a>
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	3301      	adds	r3, #1
 8003bea:	d008      	beq.n	8003bfe <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8003bec:	232b      	movs	r3, #43	; 0x2b
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2251      	movs	r2, #81	; 0x51
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	5499      	strb	r1, [r3, r2]
        goto error;
 8003bfc:	e0ba      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1a2      	bne.n	8003b4e <HAL_SPI_TransmitReceive+0x15a>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d19d      	bne.n	8003b4e <HAL_SPI_TransmitReceive+0x15a>
 8003c12:	e083      	b.n	8003d1c <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x234>
 8003c1c:	231a      	movs	r3, #26
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d000      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x234>
 8003c26:	e06f      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	7812      	ldrb	r2, [r2, #0]
 8003c34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c4e:	e05b      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2202      	movs	r2, #2
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d11c      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x2a4>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d017      	beq.n	8003c98 <HAL_SPI_TransmitReceive+0x2a4>
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d114      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	7812      	ldrb	r2, [r2, #0]
 8003c7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d119      	bne.n	8003cda <HAL_SPI_TransmitReceive+0x2e6>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d014      	beq.n	8003cda <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cda:	f7fe fcbd 	bl	8002658 <HAL_GetTick>
 8003cde:	0002      	movs	r2, r0
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d802      	bhi.n	8003cf0 <HAL_SPI_TransmitReceive+0x2fc>
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	3301      	adds	r3, #1
 8003cee:	d102      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x302>
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d108      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8003cf6:	232b      	movs	r3, #43	; 0x2b
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2251      	movs	r2, #81	; 0x51
 8003d02:	2101      	movs	r1, #1
 8003d04:	5499      	strb	r1, [r3, r2]
        goto error;
 8003d06:	e035      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d19e      	bne.n	8003c50 <HAL_SPI_TransmitReceive+0x25c>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d199      	bne.n	8003c50 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f000 f8c0 	bl	8003ea8 <SPI_EndRxTxTransaction>
 8003d28:	1e03      	subs	r3, r0, #0
 8003d2a:	d007      	beq.n	8003d3c <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8003d2c:	232b      	movs	r3, #43	; 0x2b
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d3a:	e01b      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8003d62:	232b      	movs	r3, #43	; 0x2b
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	2201      	movs	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e003      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2251      	movs	r2, #81	; 0x51
 8003d70:	2101      	movs	r1, #1
 8003d72:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2250      	movs	r2, #80	; 0x50
 8003d78:	2100      	movs	r1, #0
 8003d7a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003d7c:	232b      	movs	r3, #43	; 0x2b
 8003d7e:	18fb      	adds	r3, r7, r3
 8003d80:	781b      	ldrb	r3, [r3, #0]
}
 8003d82:	0018      	movs	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b00c      	add	sp, #48	; 0x30
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	1dfb      	adds	r3, r7, #7
 8003d9a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d9c:	f7fe fc5c 	bl	8002658 <HAL_GetTick>
 8003da0:	0002      	movs	r2, r0
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	18d3      	adds	r3, r2, r3
 8003daa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dac:	f7fe fc54 	bl	8002658 <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003db4:	4b3a      	ldr	r3, [pc, #232]	; (8003ea0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	015b      	lsls	r3, r3, #5
 8003dba:	0d1b      	lsrs	r3, r3, #20
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	4353      	muls	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dc2:	e058      	b.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	d055      	beq.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dca:	f7fe fc45 	bl	8002658 <HAL_GetTick>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d902      	bls.n	8003de0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d142      	bne.n	8003e66 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	21e0      	movs	r1, #224	; 0xe0
 8003dec:	438a      	bics	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	2382      	movs	r3, #130	; 0x82
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d113      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d005      	beq.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d107      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2140      	movs	r1, #64	; 0x40
 8003e20:	438a      	bics	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	019b      	lsls	r3, r3, #6
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d110      	bne.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	491a      	ldr	r1, [pc, #104]	; (8003ea4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2180      	movs	r1, #128	; 0x80
 8003e4c:	0189      	lsls	r1, r1, #6
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2251      	movs	r2, #81	; 0x51
 8003e56:	2101      	movs	r1, #1
 8003e58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2250      	movs	r2, #80	; 0x50
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e017      	b.n	8003e96 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	425a      	negs	r2, r3
 8003e86:	4153      	adcs	r3, r2
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	001a      	movs	r2, r3
 8003e8c:	1dfb      	adds	r3, r7, #7
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d197      	bne.n	8003dc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	0018      	movs	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b008      	add	sp, #32
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	20000004 	.word	0x20000004
 8003ea4:	ffffdfff 	.word	0xffffdfff

08003ea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <SPI_EndRxTxTransaction+0x84>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	491d      	ldr	r1, [pc, #116]	; (8003f30 <SPI_EndRxTxTransaction+0x88>)
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7fc f92e 	bl	800011c <__udivsi3>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	001a      	movs	r2, r3
 8003ec4:	0013      	movs	r3, r2
 8003ec6:	015b      	lsls	r3, r3, #5
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	189b      	adds	r3, r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	2382      	movs	r3, #130	; 0x82
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d112      	bne.n	8003f04 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	0013      	movs	r3, r2
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	f7ff ff4e 	bl	8003d8c <SPI_WaitFlagStateUntilTimeout>
 8003ef0:	1e03      	subs	r3, r0, #0
 8003ef2:	d016      	beq.n	8003f22 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	2220      	movs	r2, #32
 8003efa:	431a      	orrs	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e00f      	b.n	8003f24 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b80      	cmp	r3, #128	; 0x80
 8003f1c:	d0f2      	beq.n	8003f04 <SPI_EndRxTxTransaction+0x5c>
 8003f1e:	e000      	b.n	8003f22 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003f20:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	0018      	movs	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b006      	add	sp, #24
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000004 	.word	0x20000004
 8003f30:	016e3600 	.word	0x016e3600

08003f34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003f38:	4a06      	ldr	r2, [pc, #24]	; (8003f54 <MX_FATFS_Init+0x20>)
 8003f3a:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <MX_FATFS_Init+0x24>)
 8003f3c:	0011      	movs	r1, r2
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f003 fbe6 	bl	8007710 <FATFS_LinkDriver>
 8003f44:	0003      	movs	r3, r0
 8003f46:	001a      	movs	r2, r3
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <MX_FATFS_Init+0x28>)
 8003f4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003f4c:	46c0      	nop			; (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	20000108 	.word	0x20000108
 8003f58:	20000010 	.word	0x20000010
 8003f5c:	20000104 	.word	0x20000104

08003f60 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003f64:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003f66:	0018      	movs	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	0002      	movs	r2, r0
 8003f74:	1dfb      	adds	r3, r7, #7
 8003f76:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003f78:	1dfb      	adds	r3, r7, #7
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7fd fc91 	bl	80018a4 <SD_disk_initialize>
 8003f82:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8003f84:	0018      	movs	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b002      	add	sp, #8
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	0002      	movs	r2, r0
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003f98:	1dfb      	adds	r3, r7, #7
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7fd fd8b 	bl	8001ab8 <SD_disk_status>
 8003fa2:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}

08003fac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	250f      	movs	r5, #15
 8003fba:	197b      	adds	r3, r7, r5
 8003fbc:	1c02      	adds	r2, r0, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003fc0:	683c      	ldr	r4, [r7, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	197b      	adds	r3, r7, r5
 8003fc8:	7818      	ldrb	r0, [r3, #0]
 8003fca:	0023      	movs	r3, r4
 8003fcc:	f7fd fd8a 	bl	8001ae4 <SD_disk_read>
 8003fd0:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b004      	add	sp, #16
 8003fd8:	bdb0      	pop	{r4, r5, r7, pc}

08003fda <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003fda:	b5b0      	push	{r4, r5, r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	250f      	movs	r5, #15
 8003fe8:	197b      	adds	r3, r7, r5
 8003fea:	1c02      	adds	r2, r0, #0
 8003fec:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003fee:	683c      	ldr	r4, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	197b      	adds	r3, r7, r5
 8003ff6:	7818      	ldrb	r0, [r3, #0]
 8003ff8:	0023      	movs	r3, r4
 8003ffa:	f7fd fde3 	bl	8001bc4 <SD_disk_write>
 8003ffe:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	b004      	add	sp, #16
 8004006:	bdb0      	pop	{r4, r5, r7, pc}

08004008 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	603a      	str	r2, [r7, #0]
 8004010:	1dfb      	adds	r3, r7, #7
 8004012:	1c02      	adds	r2, r0, #0
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	1dbb      	adds	r3, r7, #6
 8004018:	1c0a      	adds	r2, r1, #0
 800401a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	1dbb      	adds	r3, r7, #6
 8004020:	7819      	ldrb	r1, [r3, #0]
 8004022:	1dfb      	adds	r3, r7, #7
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	0018      	movs	r0, r3
 8004028:	f7fd fe54 	bl	8001cd4 <SD_disk_ioctl>
 800402c:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 800402e:	0018      	movs	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	b002      	add	sp, #8
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004038:	b5b0      	push	{r4, r5, r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	0002      	movs	r2, r0
 8004040:	1dfb      	adds	r3, r7, #7
 8004042:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004044:	1dfb      	adds	r3, r7, #7
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <disk_status+0x40>)
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	18d3      	adds	r3, r2, r3
 800404e:	3304      	adds	r3, #4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	1dfa      	adds	r2, r7, #7
 8004056:	7812      	ldrb	r2, [r2, #0]
 8004058:	4907      	ldr	r1, [pc, #28]	; (8004078 <disk_status+0x40>)
 800405a:	188a      	adds	r2, r1, r2
 800405c:	7a12      	ldrb	r2, [r2, #8]
 800405e:	250f      	movs	r5, #15
 8004060:	197c      	adds	r4, r7, r5
 8004062:	0010      	movs	r0, r2
 8004064:	4798      	blx	r3
 8004066:	0003      	movs	r3, r0
 8004068:	7023      	strb	r3, [r4, #0]
  return stat;
 800406a:	197b      	adds	r3, r7, r5
 800406c:	781b      	ldrb	r3, [r3, #0]
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b004      	add	sp, #16
 8004074:	bdb0      	pop	{r4, r5, r7, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	20000334 	.word	0x20000334

0800407c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800407c:	b590      	push	{r4, r7, lr}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	0002      	movs	r2, r0
 8004084:	1dfb      	adds	r3, r7, #7
 8004086:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8004088:	200f      	movs	r0, #15
 800408a:	183b      	adds	r3, r7, r0
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 8004090:	1dfb      	adds	r3, r7, #7
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <disk_initialize+0x5c>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d116      	bne.n	80040ca <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 800409c:	1dfb      	adds	r3, r7, #7
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	4a0d      	ldr	r2, [pc, #52]	; (80040d8 <disk_initialize+0x5c>)
 80040a2:	2101      	movs	r1, #1
 80040a4:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80040a6:	1dfb      	adds	r3, r7, #7
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	4a0b      	ldr	r2, [pc, #44]	; (80040d8 <disk_initialize+0x5c>)
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	18d3      	adds	r3, r2, r3
 80040b0:	3304      	adds	r3, #4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	1dfa      	adds	r2, r7, #7
 80040b8:	7812      	ldrb	r2, [r2, #0]
 80040ba:	4907      	ldr	r1, [pc, #28]	; (80040d8 <disk_initialize+0x5c>)
 80040bc:	188a      	adds	r2, r1, r2
 80040be:	7a12      	ldrb	r2, [r2, #8]
 80040c0:	183c      	adds	r4, r7, r0
 80040c2:	0010      	movs	r0, r2
 80040c4:	4798      	blx	r3
 80040c6:	0003      	movs	r3, r0
 80040c8:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 80040ca:	230f      	movs	r3, #15
 80040cc:	18fb      	adds	r3, r7, r3
 80040ce:	781b      	ldrb	r3, [r3, #0]
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b005      	add	sp, #20
 80040d6:	bd90      	pop	{r4, r7, pc}
 80040d8:	20000334 	.word	0x20000334

080040dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80040dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	210f      	movs	r1, #15
 80040ea:	187b      	adds	r3, r7, r1
 80040ec:	1c02      	adds	r2, r0, #0
 80040ee:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80040f0:	187b      	adds	r3, r7, r1
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	4a0c      	ldr	r2, [pc, #48]	; (8004128 <disk_read+0x4c>)
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	18d3      	adds	r3, r2, r3
 80040fa:	3304      	adds	r3, #4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689d      	ldr	r5, [r3, #8]
 8004100:	187b      	adds	r3, r7, r1
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	4a08      	ldr	r2, [pc, #32]	; (8004128 <disk_read+0x4c>)
 8004106:	18d3      	adds	r3, r2, r3
 8004108:	7a18      	ldrb	r0, [r3, #8]
 800410a:	2617      	movs	r6, #23
 800410c:	19bc      	adds	r4, r7, r6
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	47a8      	blx	r5
 8004116:	0003      	movs	r3, r0
 8004118:	7023      	strb	r3, [r4, #0]
  return res;
 800411a:	19bb      	adds	r3, r7, r6
 800411c:	781b      	ldrb	r3, [r3, #0]
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b007      	add	sp, #28
 8004124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	20000334 	.word	0x20000334

0800412c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800412c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	210f      	movs	r1, #15
 800413a:	187b      	adds	r3, r7, r1
 800413c:	1c02      	adds	r2, r0, #0
 800413e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004140:	187b      	adds	r3, r7, r1
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	4a0c      	ldr	r2, [pc, #48]	; (8004178 <disk_write+0x4c>)
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	18d3      	adds	r3, r2, r3
 800414a:	3304      	adds	r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68dd      	ldr	r5, [r3, #12]
 8004150:	187b      	adds	r3, r7, r1
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	4a08      	ldr	r2, [pc, #32]	; (8004178 <disk_write+0x4c>)
 8004156:	18d3      	adds	r3, r2, r3
 8004158:	7a18      	ldrb	r0, [r3, #8]
 800415a:	2617      	movs	r6, #23
 800415c:	19bc      	adds	r4, r7, r6
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	47a8      	blx	r5
 8004166:	0003      	movs	r3, r0
 8004168:	7023      	strb	r3, [r4, #0]
  return res;
 800416a:	19bb      	adds	r3, r7, r6
 800416c:	781b      	ldrb	r3, [r3, #0]
}
 800416e:	0018      	movs	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	b007      	add	sp, #28
 8004174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	20000334 	.word	0x20000334

0800417c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800417c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	603a      	str	r2, [r7, #0]
 8004184:	1dfb      	adds	r3, r7, #7
 8004186:	1c02      	adds	r2, r0, #0
 8004188:	701a      	strb	r2, [r3, #0]
 800418a:	1dbb      	adds	r3, r7, #6
 800418c:	1c0a      	adds	r2, r1, #0
 800418e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004190:	1dfb      	adds	r3, r7, #7
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	4a0c      	ldr	r2, [pc, #48]	; (80041c8 <disk_ioctl+0x4c>)
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	18d3      	adds	r3, r2, r3
 800419a:	3304      	adds	r3, #4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	1dfa      	adds	r2, r7, #7
 80041a2:	7812      	ldrb	r2, [r2, #0]
 80041a4:	4908      	ldr	r1, [pc, #32]	; (80041c8 <disk_ioctl+0x4c>)
 80041a6:	188a      	adds	r2, r1, r2
 80041a8:	7a10      	ldrb	r0, [r2, #8]
 80041aa:	260f      	movs	r6, #15
 80041ac:	19bc      	adds	r4, r7, r6
 80041ae:	683d      	ldr	r5, [r7, #0]
 80041b0:	1dba      	adds	r2, r7, #6
 80041b2:	7811      	ldrb	r1, [r2, #0]
 80041b4:	002a      	movs	r2, r5
 80041b6:	4798      	blx	r3
 80041b8:	0003      	movs	r3, r0
 80041ba:	7023      	strb	r3, [r4, #0]
  return res;
 80041bc:	19bb      	adds	r3, r7, r6
 80041be:	781b      	ldrb	r3, [r3, #0]
}
 80041c0:	0018      	movs	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b005      	add	sp, #20
 80041c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c8:	20000334 	.word	0x20000334

080041cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3301      	adds	r3, #1
 80041d8:	781a      	ldrb	r2, [r3, #0]
 80041da:	210e      	movs	r1, #14
 80041dc:	187b      	adds	r3, r7, r1
 80041de:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 80041e0:	187b      	adds	r3, r7, r1
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	b21a      	sxth	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	b21b      	sxth	r3, r3
 80041ee:	4313      	orrs	r3, r2
 80041f0:	b21a      	sxth	r2, r3
 80041f2:	187b      	adds	r3, r7, r1
 80041f4:	801a      	strh	r2, [r3, #0]
	return rv;
 80041f6:	187b      	adds	r3, r7, r1
 80041f8:	881b      	ldrh	r3, [r3, #0]
}
 80041fa:	0018      	movs	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b004      	add	sp, #16
 8004200:	bd80      	pop	{r7, pc}

08004202 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3303      	adds	r3, #3
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	3202      	adds	r2, #2
 800421a:	7812      	ldrb	r2, [r2, #0]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	3201      	adds	r2, #1
 8004228:	7812      	ldrb	r2, [r2, #0]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
	return rv;
 800423a:	68fb      	ldr	r3, [r7, #12]
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b004      	add	sp, #16
 8004242:	bd80      	pop	{r7, pc}

08004244 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	000a      	movs	r2, r1
 800424e:	1cbb      	adds	r3, r7, #2
 8004250:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	1cba      	adds	r2, r7, #2
 800425a:	8812      	ldrh	r2, [r2, #0]
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	1cbb      	adds	r3, r7, #2
 8004262:	1cba      	adds	r2, r7, #2
 8004264:	8812      	ldrh	r2, [r2, #0]
 8004266:	0a12      	lsrs	r2, r2, #8
 8004268:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	1cba      	adds	r2, r7, #2
 8004272:	8812      	ldrh	r2, [r2, #0]
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]
}
 8004278:	46c0      	nop			; (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b002      	add	sp, #8
 800427e:	bd80      	pop	{r7, pc}

08004280 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	607a      	str	r2, [r7, #4]
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	0a1b      	lsrs	r3, r3, #8
 80042ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	701a      	strb	r2, [r3, #0]
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b002      	add	sp, #8
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00d      	beq.n	800430a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	1c53      	adds	r3, r2, #1
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	1c59      	adds	r1, r3, #1
 80042f8:	6179      	str	r1, [r7, #20]
 80042fa:	7812      	ldrb	r2, [r2, #0]
 80042fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3b01      	subs	r3, #1
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f1      	bne.n	80042ee <mem_cpy+0x1a>
	}
}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b006      	add	sp, #24
 8004310:	bd80      	pop	{r7, pc}

08004312 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004312:	b580      	push	{r7, lr}
 8004314:	b086      	sub	sp, #24
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	617a      	str	r2, [r7, #20]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3b01      	subs	r3, #1
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f3      	bne.n	8004322 <mem_set+0x10>
}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b006      	add	sp, #24
 8004342:	bd80      	pop	{r7, pc}

08004344 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	61fa      	str	r2, [r7, #28]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	0019      	movs	r1, r3
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	61ba      	str	r2, [r7, #24]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	1acb      	subs	r3, r1, r3
 8004370:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3b01      	subs	r3, #1
 8004376:	607b      	str	r3, [r7, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <mem_cmp+0x40>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0eb      	beq.n	800435c <mem_cmp+0x18>

	return r;
 8004384:	697b      	ldr	r3, [r7, #20]
}
 8004386:	0018      	movs	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	b008      	add	sp, #32
 800438c:	bd80      	pop	{r7, pc}

0800438e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004398:	e002      	b.n	80043a0 <chk_chr+0x12>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3301      	adds	r3, #1
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <chk_chr+0x26>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	001a      	movs	r2, r3
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d1f2      	bne.n	800439a <chk_chr+0xc>
	return *str;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	781b      	ldrb	r3, [r3, #0]
}
 80043b8:	0018      	movs	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	b002      	add	sp, #8
 80043be:	bd80      	pop	{r7, pc}

080043c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	e027      	b.n	8004424 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 80043d4:	4b25      	ldr	r3, [pc, #148]	; (800446c <chk_lock+0xac>)
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	0112      	lsls	r2, r2, #4
 80043da:	58d3      	ldr	r3, [r2, r3]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01c      	beq.n	800441a <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80043e0:	4b22      	ldr	r3, [pc, #136]	; (800446c <chk_lock+0xac>)
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	0112      	lsls	r2, r2, #4
 80043e6:	58d2      	ldr	r2, [r2, r3]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d116      	bne.n	800441e <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 80043f0:	4a1e      	ldr	r2, [pc, #120]	; (800446c <chk_lock+0xac>)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	18d3      	adds	r3, r2, r3
 80043f8:	3304      	adds	r3, #4
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004400:	429a      	cmp	r2, r3
 8004402:	d10c      	bne.n	800441e <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <chk_lock+0xac>)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	18d3      	adds	r3, r2, r3
 800440c:	3308      	adds	r3, #8
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004414:	429a      	cmp	r2, r3
 8004416:	d102      	bne.n	800441e <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8004418:	e007      	b.n	800442a <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 800441a:	2301      	movs	r3, #1
 800441c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3301      	adds	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d9d4      	bls.n	80043d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d109      	bne.n	8004444 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <chk_lock+0x7c>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d101      	bne.n	8004440 <chk_lock+0x80>
 800443c:	2300      	movs	r3, #0
 800443e:	e011      	b.n	8004464 <chk_lock+0xa4>
 8004440:	2312      	movs	r3, #18
 8004442:	e00f      	b.n	8004464 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d109      	bne.n	800445e <chk_lock+0x9e>
 800444a:	4a08      	ldr	r2, [pc, #32]	; (800446c <chk_lock+0xac>)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	18d3      	adds	r3, r2, r3
 8004452:	330c      	adds	r3, #12
 8004454:	881a      	ldrh	r2, [r3, #0]
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	429a      	cmp	r2, r3
 800445c:	d101      	bne.n	8004462 <chk_lock+0xa2>
 800445e:	2310      	movs	r3, #16
 8004460:	e000      	b.n	8004464 <chk_lock+0xa4>
 8004462:	2300      	movs	r3, #0
}
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	b004      	add	sp, #16
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000114 	.word	0x20000114

08004470 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	e002      	b.n	8004482 <enq_lock+0x12>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3301      	adds	r3, #1
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d805      	bhi.n	8004494 <enq_lock+0x24>
 8004488:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <enq_lock+0x38>)
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	0112      	lsls	r2, r2, #4
 800448e:	58d3      	ldr	r3, [r2, r3]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f3      	bne.n	800447c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3b02      	subs	r3, #2
 8004498:	1e5a      	subs	r2, r3, #1
 800449a:	4193      	sbcs	r3, r2
 800449c:	b2db      	uxtb	r3, r3
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b002      	add	sp, #8
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	20000114 	.word	0x20000114

080044ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	e01e      	b.n	80044fa <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 80044bc:	4b3f      	ldr	r3, [pc, #252]	; (80045bc <inc_lock+0x110>)
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	0112      	lsls	r2, r2, #4
 80044c2:	58d2      	ldr	r2, [r2, r3]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d113      	bne.n	80044f4 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 80044cc:	4a3b      	ldr	r2, [pc, #236]	; (80045bc <inc_lock+0x110>)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	18d3      	adds	r3, r2, r3
 80044d4:	3304      	adds	r3, #4
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80044dc:	429a      	cmp	r2, r3
 80044de:	d109      	bne.n	80044f4 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 80044e0:	4a36      	ldr	r2, [pc, #216]	; (80045bc <inc_lock+0x110>)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	18d3      	adds	r3, r2, r3
 80044e8:	3308      	adds	r3, #8
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d006      	beq.n	8004502 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3301      	adds	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d9dd      	bls.n	80044bc <inc_lock+0x10>
 8004500:	e000      	b.n	8004504 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8004502:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d130      	bne.n	800456c <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e002      	b.n	8004516 <inc_lock+0x6a>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d805      	bhi.n	8004528 <inc_lock+0x7c>
 800451c:	4b27      	ldr	r3, [pc, #156]	; (80045bc <inc_lock+0x110>)
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	0112      	lsls	r2, r2, #4
 8004522:	58d3      	ldr	r3, [r2, r3]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f3      	bne.n	8004510 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d101      	bne.n	8004532 <inc_lock+0x86>
 800452e:	2300      	movs	r3, #0
 8004530:	e03f      	b.n	80045b2 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6819      	ldr	r1, [r3, #0]
 8004536:	4b21      	ldr	r3, [pc, #132]	; (80045bc <inc_lock+0x110>)
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	0112      	lsls	r2, r2, #4
 800453c:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	491e      	ldr	r1, [pc, #120]	; (80045bc <inc_lock+0x110>)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	18cb      	adds	r3, r1, r3
 800454a:	3304      	adds	r3, #4
 800454c:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	491a      	ldr	r1, [pc, #104]	; (80045bc <inc_lock+0x110>)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	18cb      	adds	r3, r1, r3
 800455a:	3308      	adds	r3, #8
 800455c:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <inc_lock+0x110>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	18d3      	adds	r3, r2, r3
 8004566:	330c      	adds	r3, #12
 8004568:	2200      	movs	r2, #0
 800456a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <inc_lock+0xda>
 8004572:	4a12      	ldr	r2, [pc, #72]	; (80045bc <inc_lock+0x110>)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	18d3      	adds	r3, r2, r3
 800457a:	330c      	adds	r3, #12
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <inc_lock+0xda>
 8004582:	2300      	movs	r3, #0
 8004584:	e015      	b.n	80045b2 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d108      	bne.n	800459e <inc_lock+0xf2>
 800458c:	4a0b      	ldr	r2, [pc, #44]	; (80045bc <inc_lock+0x110>)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	18d3      	adds	r3, r2, r3
 8004594:	330c      	adds	r3, #12
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	b29b      	uxth	r3, r3
 800459c:	e001      	b.n	80045a2 <inc_lock+0xf6>
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4906      	ldr	r1, [pc, #24]	; (80045bc <inc_lock+0x110>)
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	0112      	lsls	r2, r2, #4
 80045a8:	188a      	adds	r2, r1, r2
 80045aa:	320c      	adds	r2, #12
 80045ac:	8013      	strh	r3, [r2, #0]

	return i + 1;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3301      	adds	r3, #1
}
 80045b2:	0018      	movs	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b004      	add	sp, #16
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	20000114 	.word	0x20000114

080045c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	607b      	str	r3, [r7, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d832      	bhi.n	800463a <dec_lock+0x7a>
		n = Files[i].ctr;
 80045d4:	200e      	movs	r0, #14
 80045d6:	183b      	adds	r3, r7, r0
 80045d8:	491d      	ldr	r1, [pc, #116]	; (8004650 <dec_lock+0x90>)
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	0112      	lsls	r2, r2, #4
 80045de:	188a      	adds	r2, r1, r2
 80045e0:	320c      	adds	r2, #12
 80045e2:	8812      	ldrh	r2, [r2, #0]
 80045e4:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80045e6:	183b      	adds	r3, r7, r0
 80045e8:	881a      	ldrh	r2, [r3, #0]
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d102      	bne.n	80045f8 <dec_lock+0x38>
 80045f2:	183b      	adds	r3, r7, r0
 80045f4:	2200      	movs	r2, #0
 80045f6:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 80045f8:	210e      	movs	r1, #14
 80045fa:	187b      	adds	r3, r7, r1
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d004      	beq.n	800460c <dec_lock+0x4c>
 8004602:	187b      	adds	r3, r7, r1
 8004604:	881a      	ldrh	r2, [r3, #0]
 8004606:	187b      	adds	r3, r7, r1
 8004608:	3a01      	subs	r2, #1
 800460a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 800460c:	4a10      	ldr	r2, [pc, #64]	; (8004650 <dec_lock+0x90>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	18d3      	adds	r3, r2, r3
 8004614:	330c      	adds	r3, #12
 8004616:	210e      	movs	r1, #14
 8004618:	187a      	adds	r2, r7, r1
 800461a:	8812      	ldrh	r2, [r2, #0]
 800461c:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800461e:	187b      	adds	r3, r7, r1
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <dec_lock+0x70>
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <dec_lock+0x90>)
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	0112      	lsls	r2, r2, #4
 800462c:	2100      	movs	r1, #0
 800462e:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8004630:	230d      	movs	r3, #13
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e003      	b.n	8004642 <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800463a:	230d      	movs	r3, #13
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	2202      	movs	r2, #2
 8004640:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8004642:	230d      	movs	r3, #13
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	781b      	ldrb	r3, [r3, #0]
}
 8004648:	0018      	movs	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	b004      	add	sp, #16
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000114 	.word	0x20000114

08004654 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	e00e      	b.n	8004680 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <clear_lock+0x3c>)
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	0112      	lsls	r2, r2, #4
 8004668:	58d3      	ldr	r3, [r2, r3]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d104      	bne.n	800467a <clear_lock+0x26>
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <clear_lock+0x3c>)
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	0112      	lsls	r2, r2, #4
 8004676:	2100      	movs	r1, #0
 8004678:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3301      	adds	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d9ed      	bls.n	8004662 <clear_lock+0xe>
	}
}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	b004      	add	sp, #16
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000114 	.word	0x20000114

08004694 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800469c:	240f      	movs	r4, #15
 800469e:	193b      	adds	r3, r7, r4
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	78db      	ldrb	r3, [r3, #3]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d034      	beq.n	8004716 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	7858      	ldrb	r0, [r3, #1]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3338      	adds	r3, #56	; 0x38
 80046ba:	0019      	movs	r1, r3
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	2301      	movs	r3, #1
 80046c0:	f7ff fd34 	bl	800412c <disk_write>
 80046c4:	1e03      	subs	r3, r0, #0
 80046c6:	d003      	beq.n	80046d0 <sync_window+0x3c>
			res = FR_DISK_ERR;
 80046c8:	193b      	adds	r3, r7, r4
 80046ca:	2201      	movs	r2, #1
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e022      	b.n	8004716 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	1ad2      	subs	r2, r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d217      	bcs.n	8004716 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	789b      	ldrb	r3, [r3, #2]
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	e010      	b.n	8004710 <sync_window+0x7c>
					wsect += fs->fsize;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	18d3      	adds	r3, r2, r3
 80046f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	7858      	ldrb	r0, [r3, #1]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3338      	adds	r3, #56	; 0x38
 8004700:	0019      	movs	r1, r3
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	2301      	movs	r3, #1
 8004706:	f7ff fd11 	bl	800412c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	3b01      	subs	r3, #1
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d8eb      	bhi.n	80046ee <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8004716:	230f      	movs	r3, #15
 8004718:	18fb      	adds	r3, r7, r3
 800471a:	781b      	ldrb	r3, [r3, #0]
}
 800471c:	0018      	movs	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	b007      	add	sp, #28
 8004722:	bd90      	pop	{r4, r7, pc}

08004724 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004724:	b5b0      	push	{r4, r5, r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800472e:	250f      	movs	r5, #15
 8004730:	197b      	adds	r3, r7, r5
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d01f      	beq.n	8004780 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004740:	197c      	adds	r4, r7, r5
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f7ff ffa5 	bl	8004694 <sync_window>
 800474a:	0003      	movs	r3, r0
 800474c:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800474e:	002c      	movs	r4, r5
 8004750:	193b      	adds	r3, r7, r4
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d113      	bne.n	8004780 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	7858      	ldrb	r0, [r3, #1]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3338      	adds	r3, #56	; 0x38
 8004760:	0019      	movs	r1, r3
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	2301      	movs	r3, #1
 8004766:	f7ff fcb9 	bl	80040dc <disk_read>
 800476a:	1e03      	subs	r3, r0, #0
 800476c:	d005      	beq.n	800477a <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800476e:	2301      	movs	r3, #1
 8004770:	425b      	negs	r3, r3
 8004772:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004774:	193b      	adds	r3, r7, r4
 8004776:	2201      	movs	r2, #1
 8004778:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004780:	230f      	movs	r3, #15
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	781b      	ldrb	r3, [r3, #0]
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b004      	add	sp, #16
 800478c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004790 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004790:	b5b0      	push	{r4, r5, r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004798:	250f      	movs	r5, #15
 800479a:	197c      	adds	r4, r7, r5
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	0018      	movs	r0, r3
 80047a0:	f7ff ff78 	bl	8004694 <sync_window>
 80047a4:	0003      	movs	r3, r0
 80047a6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80047a8:	197b      	adds	r3, r7, r5
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d15e      	bne.n	800486e <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d14d      	bne.n	8004854 <sync_fs+0xc4>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	791b      	ldrb	r3, [r3, #4]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d149      	bne.n	8004854 <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3338      	adds	r3, #56	; 0x38
 80047c4:	0018      	movs	r0, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	899b      	ldrh	r3, [r3, #12]
 80047ca:	001a      	movs	r2, r3
 80047cc:	2100      	movs	r1, #0
 80047ce:	f7ff fda0 	bl	8004312 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3338      	adds	r3, #56	; 0x38
 80047d6:	33ff      	adds	r3, #255	; 0xff
 80047d8:	33ff      	adds	r3, #255	; 0xff
 80047da:	4a28      	ldr	r2, [pc, #160]	; (800487c <sync_fs+0xec>)
 80047dc:	0011      	movs	r1, r2
 80047de:	0018      	movs	r0, r3
 80047e0:	f7ff fd30 	bl	8004244 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3338      	adds	r3, #56	; 0x38
 80047e8:	4a25      	ldr	r2, [pc, #148]	; (8004880 <sync_fs+0xf0>)
 80047ea:	0011      	movs	r1, r2
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7ff fd47 	bl	8004280 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3338      	adds	r3, #56	; 0x38
 80047f6:	33e5      	adds	r3, #229	; 0xe5
 80047f8:	33ff      	adds	r3, #255	; 0xff
 80047fa:	4a22      	ldr	r2, [pc, #136]	; (8004884 <sync_fs+0xf4>)
 80047fc:	0011      	movs	r1, r2
 80047fe:	0018      	movs	r0, r3
 8004800:	f7ff fd3e 	bl	8004280 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3338      	adds	r3, #56	; 0x38
 8004808:	33e9      	adds	r3, #233	; 0xe9
 800480a:	33ff      	adds	r3, #255	; 0xff
 800480c:	001a      	movs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	0019      	movs	r1, r3
 8004814:	0010      	movs	r0, r2
 8004816:	f7ff fd33 	bl	8004280 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3338      	adds	r3, #56	; 0x38
 800481e:	33ed      	adds	r3, #237	; 0xed
 8004820:	33ff      	adds	r3, #255	; 0xff
 8004822:	001a      	movs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	0019      	movs	r1, r3
 800482a:	0010      	movs	r0, r2
 800482c:	f7ff fd28 	bl	8004280 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	7858      	ldrb	r0, [r3, #1]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3338      	adds	r3, #56	; 0x38
 8004842:	0019      	movs	r1, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004848:	2301      	movs	r3, #1
 800484a:	f7ff fc6f 	bl	800412c <disk_write>
			fs->fsi_flag = 0;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	2200      	movs	r2, #0
 800485a:	2100      	movs	r1, #0
 800485c:	0018      	movs	r0, r3
 800485e:	f7ff fc8d 	bl	800417c <disk_ioctl>
 8004862:	1e03      	subs	r3, r0, #0
 8004864:	d003      	beq.n	800486e <sync_fs+0xde>
 8004866:	230f      	movs	r3, #15
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
	}

	return res;
 800486e:	230f      	movs	r3, #15
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	781b      	ldrb	r3, [r3, #0]
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b004      	add	sp, #16
 800487a:	bdb0      	pop	{r4, r5, r7, pc}
 800487c:	0000aa55 	.word	0x0000aa55
 8004880:	41615252 	.word	0x41615252
 8004884:	61417272 	.word	0x61417272

08004888 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	3b02      	subs	r3, #2
 8004896:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	3b02      	subs	r3, #2
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d301      	bcc.n	80048a8 <clust2sect+0x20>
 80048a4:	2300      	movs	r3, #0
 80048a6:	e007      	b.n	80048b8 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	895b      	ldrh	r3, [r3, #10]
 80048ac:	001a      	movs	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	435a      	muls	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	18d3      	adds	r3, r2, r3
}
 80048b8:	0018      	movs	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b002      	add	sp, #8
 80048be:	bd80      	pop	{r7, pc}

080048c0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80048c0:	b590      	push	{r4, r7, lr}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d904      	bls.n	80048e0 <get_fat+0x20>
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d302      	bcc.n	80048e6 <get_fat+0x26>
		val = 1;	/* Internal error */
 80048e0:	2301      	movs	r3, #1
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	e0c2      	b.n	8004a6c <get_fat+0x1ac>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80048e6:	2301      	movs	r3, #1
 80048e8:	425b      	negs	r3, r3
 80048ea:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d100      	bne.n	80048f6 <get_fat+0x36>
 80048f4:	e088      	b.n	8004a08 <get_fat+0x148>
 80048f6:	dd00      	ble.n	80048fa <get_fat+0x3a>
 80048f8:	e0ae      	b.n	8004a58 <get_fat+0x198>
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d002      	beq.n	8004904 <get_fat+0x44>
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d05c      	beq.n	80049bc <get_fat+0xfc>
 8004902:	e0a9      	b.n	8004a58 <get_fat+0x198>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	18d3      	adds	r3, r2, r3
 8004910:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	899b      	ldrh	r3, [r3, #12]
 800491a:	0019      	movs	r1, r3
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f7fb fbfd 	bl	800011c <__udivsi3>
 8004922:	0003      	movs	r3, r0
 8004924:	18e2      	adds	r2, r4, r3
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	0011      	movs	r1, r2
 800492a:	0018      	movs	r0, r3
 800492c:	f7ff fefa 	bl	8004724 <move_window>
 8004930:	1e03      	subs	r3, r0, #0
 8004932:	d000      	beq.n	8004936 <get_fat+0x76>
 8004934:	e093      	b.n	8004a5e <get_fat+0x19e>
			wc = fs->win[bc++ % SS(fs)];
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	60fa      	str	r2, [r7, #12]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	8992      	ldrh	r2, [r2, #12]
 8004940:	0011      	movs	r1, r2
 8004942:	0018      	movs	r0, r3
 8004944:	f7fb fc70 	bl	8000228 <__aeabi_uidivmod>
 8004948:	000b      	movs	r3, r1
 800494a:	0019      	movs	r1, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2238      	movs	r2, #56	; 0x38
 8004950:	185b      	adds	r3, r3, r1
 8004952:	189b      	adds	r3, r3, r2
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	899b      	ldrh	r3, [r3, #12]
 8004960:	0019      	movs	r1, r3
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f7fb fbda 	bl	800011c <__udivsi3>
 8004968:	0003      	movs	r3, r0
 800496a:	18e2      	adds	r2, r4, r3
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	0011      	movs	r1, r2
 8004970:	0018      	movs	r0, r3
 8004972:	f7ff fed7 	bl	8004724 <move_window>
 8004976:	1e03      	subs	r3, r0, #0
 8004978:	d000      	beq.n	800497c <get_fat+0xbc>
 800497a:	e072      	b.n	8004a62 <get_fat+0x1a2>
			wc |= fs->win[bc % SS(fs)] << 8;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	899b      	ldrh	r3, [r3, #12]
 8004980:	001a      	movs	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	0011      	movs	r1, r2
 8004986:	0018      	movs	r0, r3
 8004988:	f7fb fc4e 	bl	8000228 <__aeabi_uidivmod>
 800498c:	000b      	movs	r3, r1
 800498e:	0019      	movs	r1, r3
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2238      	movs	r2, #56	; 0x38
 8004994:	185b      	adds	r3, r3, r1
 8004996:	189b      	adds	r3, r3, r2
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	001a      	movs	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	4013      	ands	r3, r2
 80049aa:	d002      	beq.n	80049b2 <get_fat+0xf2>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	091b      	lsrs	r3, r3, #4
 80049b0:	e002      	b.n	80049b8 <get_fat+0xf8>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	051b      	lsls	r3, r3, #20
 80049b6:	0d1b      	lsrs	r3, r3, #20
 80049b8:	617b      	str	r3, [r7, #20]
			break;
 80049ba:	e057      	b.n	8004a6c <get_fat+0x1ac>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	899b      	ldrh	r3, [r3, #12]
 80049c4:	085b      	lsrs	r3, r3, #1
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	0019      	movs	r1, r3
 80049ca:	6838      	ldr	r0, [r7, #0]
 80049cc:	f7fb fba6 	bl	800011c <__udivsi3>
 80049d0:	0003      	movs	r3, r0
 80049d2:	18e2      	adds	r2, r4, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	0011      	movs	r1, r2
 80049d8:	0018      	movs	r0, r3
 80049da:	f7ff fea3 	bl	8004724 <move_window>
 80049de:	1e03      	subs	r3, r0, #0
 80049e0:	d141      	bne.n	8004a66 <get_fat+0x1a6>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3338      	adds	r3, #56	; 0x38
 80049e6:	001c      	movs	r4, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	005a      	lsls	r2, r3, #1
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	899b      	ldrh	r3, [r3, #12]
 80049f0:	0019      	movs	r1, r3
 80049f2:	0010      	movs	r0, r2
 80049f4:	f7fb fc18 	bl	8000228 <__aeabi_uidivmod>
 80049f8:	000b      	movs	r3, r1
 80049fa:	18e3      	adds	r3, r4, r3
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7ff fbe5 	bl	80041cc <ld_word>
 8004a02:	0003      	movs	r3, r0
 8004a04:	617b      	str	r3, [r7, #20]
			break;
 8004a06:	e031      	b.n	8004a6c <get_fat+0x1ac>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	899b      	ldrh	r3, [r3, #12]
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	0019      	movs	r1, r3
 8004a16:	6838      	ldr	r0, [r7, #0]
 8004a18:	f7fb fb80 	bl	800011c <__udivsi3>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	18e2      	adds	r2, r4, r3
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	0011      	movs	r1, r2
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7ff fe7d 	bl	8004724 <move_window>
 8004a2a:	1e03      	subs	r3, r0, #0
 8004a2c:	d11d      	bne.n	8004a6a <get_fat+0x1aa>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	3338      	adds	r3, #56	; 0x38
 8004a32:	001c      	movs	r4, r3
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	009a      	lsls	r2, r3, #2
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	899b      	ldrh	r3, [r3, #12]
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	0010      	movs	r0, r2
 8004a40:	f7fb fbf2 	bl	8000228 <__aeabi_uidivmod>
 8004a44:	000b      	movs	r3, r1
 8004a46:	18e3      	adds	r3, r4, r3
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7ff fbda 	bl	8004202 <ld_dword>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	617b      	str	r3, [r7, #20]
			break;
 8004a56:	e009      	b.n	8004a6c <get_fat+0x1ac>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004a58:	2301      	movs	r3, #1
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e006      	b.n	8004a6c <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	e004      	b.n	8004a6c <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	e002      	b.n	8004a6c <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	e000      	b.n	8004a6c <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a6a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8004a6c:	697b      	ldr	r3, [r7, #20]
}
 8004a6e:	0018      	movs	r0, r3
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b007      	add	sp, #28
 8004a74:	bd90      	pop	{r4, r7, pc}

08004a76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004a76:	b5b0      	push	{r4, r5, r7, lr}
 8004a78:	b088      	sub	sp, #32
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004a82:	231f      	movs	r3, #31
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	2202      	movs	r2, #2
 8004a88:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d800      	bhi.n	8004a92 <put_fat+0x1c>
 8004a90:	e11a      	b.n	8004cc8 <put_fat+0x252>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d300      	bcc.n	8004a9e <put_fat+0x28>
 8004a9c:	e114      	b.n	8004cc8 <put_fat+0x252>
		switch (fs->fs_type) {
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d100      	bne.n	8004aa8 <put_fat+0x32>
 8004aa6:	e0c1      	b.n	8004c2c <put_fat+0x1b6>
 8004aa8:	dd00      	ble.n	8004aac <put_fat+0x36>
 8004aaa:	e10d      	b.n	8004cc8 <put_fat+0x252>
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d003      	beq.n	8004ab8 <put_fat+0x42>
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d100      	bne.n	8004ab6 <put_fat+0x40>
 8004ab4:	e08a      	b.n	8004bcc <put_fat+0x156>
 8004ab6:	e107      	b.n	8004cc8 <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	18d3      	adds	r3, r2, r3
 8004ac4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	899b      	ldrh	r3, [r3, #12]
 8004ace:	0019      	movs	r1, r3
 8004ad0:	69b8      	ldr	r0, [r7, #24]
 8004ad2:	f7fb fb23 	bl	800011c <__udivsi3>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	18e2      	adds	r2, r4, r3
 8004ada:	251f      	movs	r5, #31
 8004adc:	197c      	adds	r4, r7, r5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	0011      	movs	r1, r2
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f7ff fe1e 	bl	8004724 <move_window>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004aec:	197b      	adds	r3, r7, r5
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d000      	beq.n	8004af6 <put_fat+0x80>
 8004af4:	e0e1      	b.n	8004cba <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3338      	adds	r3, #56	; 0x38
 8004afa:	001c      	movs	r4, r3
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	61ba      	str	r2, [r7, #24]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	8992      	ldrh	r2, [r2, #12]
 8004b06:	0011      	movs	r1, r2
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7fb fb8d 	bl	8000228 <__aeabi_uidivmod>
 8004b0e:	000b      	movs	r3, r1
 8004b10:	18e3      	adds	r3, r4, r3
 8004b12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2201      	movs	r2, #1
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d00d      	beq.n	8004b38 <put_fat+0xc2>
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b25b      	sxtb	r3, r3
 8004b22:	220f      	movs	r2, #15
 8004b24:	4013      	ands	r3, r2
 8004b26:	b25a      	sxtb	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	b25b      	sxtb	r3, r3
 8004b30:	4313      	orrs	r3, r2
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e001      	b.n	8004b3c <put_fat+0xc6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	899b      	ldrh	r3, [r3, #12]
 8004b4e:	0019      	movs	r1, r3
 8004b50:	69b8      	ldr	r0, [r7, #24]
 8004b52:	f7fb fae3 	bl	800011c <__udivsi3>
 8004b56:	0003      	movs	r3, r0
 8004b58:	18e2      	adds	r2, r4, r3
 8004b5a:	251f      	movs	r5, #31
 8004b5c:	197c      	adds	r4, r7, r5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	0011      	movs	r1, r2
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7ff fdde 	bl	8004724 <move_window>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004b6c:	197b      	adds	r3, r7, r5
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d000      	beq.n	8004b76 <put_fat+0x100>
 8004b74:	e0a3      	b.n	8004cbe <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3338      	adds	r3, #56	; 0x38
 8004b7a:	001c      	movs	r4, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	899b      	ldrh	r3, [r3, #12]
 8004b80:	001a      	movs	r2, r3
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	0011      	movs	r1, r2
 8004b86:	0018      	movs	r0, r3
 8004b88:	f7fb fb4e 	bl	8000228 <__aeabi_uidivmod>
 8004b8c:	000b      	movs	r3, r1
 8004b8e:	18e3      	adds	r3, r4, r3
 8004b90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2201      	movs	r2, #1
 8004b96:	4013      	ands	r3, r2
 8004b98:	d003      	beq.n	8004ba2 <put_fat+0x12c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e00e      	b.n	8004bc0 <put_fat+0x14a>
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b25b      	sxtb	r3, r3
 8004ba8:	220f      	movs	r2, #15
 8004baa:	4393      	bics	r3, r2
 8004bac:	b25a      	sxtb	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0a1b      	lsrs	r3, r3, #8
 8004bb2:	b25b      	sxtb	r3, r3
 8004bb4:	210f      	movs	r1, #15
 8004bb6:	400b      	ands	r3, r1
 8004bb8:	b25b      	sxtb	r3, r3
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	b25b      	sxtb	r3, r3
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	70da      	strb	r2, [r3, #3]
			break;
 8004bca:	e07d      	b.n	8004cc8 <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	899b      	ldrh	r3, [r3, #12]
 8004bd4:	085b      	lsrs	r3, r3, #1
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	0019      	movs	r1, r3
 8004bda:	68b8      	ldr	r0, [r7, #8]
 8004bdc:	f7fb fa9e 	bl	800011c <__udivsi3>
 8004be0:	0003      	movs	r3, r0
 8004be2:	18e2      	adds	r2, r4, r3
 8004be4:	251f      	movs	r5, #31
 8004be6:	197c      	adds	r4, r7, r5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	0011      	movs	r1, r2
 8004bec:	0018      	movs	r0, r3
 8004bee:	f7ff fd99 	bl	8004724 <move_window>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004bf6:	197b      	adds	r3, r7, r5
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d161      	bne.n	8004cc2 <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3338      	adds	r3, #56	; 0x38
 8004c02:	001c      	movs	r4, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	005a      	lsls	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	899b      	ldrh	r3, [r3, #12]
 8004c0c:	0019      	movs	r1, r3
 8004c0e:	0010      	movs	r0, r2
 8004c10:	f7fb fb0a 	bl	8000228 <__aeabi_uidivmod>
 8004c14:	000b      	movs	r3, r1
 8004c16:	18e3      	adds	r3, r4, r3
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	0011      	movs	r1, r2
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7ff fb10 	bl	8004244 <st_word>
			fs->wflag = 1;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	70da      	strb	r2, [r3, #3]
			break;
 8004c2a:	e04d      	b.n	8004cc8 <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	899b      	ldrh	r3, [r3, #12]
 8004c34:	089b      	lsrs	r3, r3, #2
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	0019      	movs	r1, r3
 8004c3a:	68b8      	ldr	r0, [r7, #8]
 8004c3c:	f7fb fa6e 	bl	800011c <__udivsi3>
 8004c40:	0003      	movs	r3, r0
 8004c42:	18e2      	adds	r2, r4, r3
 8004c44:	251f      	movs	r5, #31
 8004c46:	197c      	adds	r4, r7, r5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	0011      	movs	r1, r2
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7ff fd69 	bl	8004724 <move_window>
 8004c52:	0003      	movs	r3, r0
 8004c54:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004c56:	197b      	adds	r3, r7, r5
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d133      	bne.n	8004cc6 <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	091c      	lsrs	r4, r3, #4
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3338      	adds	r3, #56	; 0x38
 8004c68:	001d      	movs	r5, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	009a      	lsls	r2, r3, #2
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	899b      	ldrh	r3, [r3, #12]
 8004c72:	0019      	movs	r1, r3
 8004c74:	0010      	movs	r0, r2
 8004c76:	f7fb fad7 	bl	8000228 <__aeabi_uidivmod>
 8004c7a:	000b      	movs	r3, r1
 8004c7c:	18eb      	adds	r3, r5, r3
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f7ff fabf 	bl	8004202 <ld_dword>
 8004c84:	0003      	movs	r3, r0
 8004c86:	0f1b      	lsrs	r3, r3, #28
 8004c88:	071b      	lsls	r3, r3, #28
 8004c8a:	4323      	orrs	r3, r4
 8004c8c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3338      	adds	r3, #56	; 0x38
 8004c92:	001c      	movs	r4, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	009a      	lsls	r2, r3, #2
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	899b      	ldrh	r3, [r3, #12]
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	0010      	movs	r0, r2
 8004ca0:	f7fb fac2 	bl	8000228 <__aeabi_uidivmod>
 8004ca4:	000b      	movs	r3, r1
 8004ca6:	18e3      	adds	r3, r4, r3
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	0011      	movs	r1, r2
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7ff fae7 	bl	8004280 <st_dword>
			fs->wflag = 1;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	70da      	strb	r2, [r3, #3]
			break;
 8004cb8:	e006      	b.n	8004cc8 <put_fat+0x252>
			if (res != FR_OK) break;
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	e004      	b.n	8004cc8 <put_fat+0x252>
			if (res != FR_OK) break;
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	e002      	b.n	8004cc8 <put_fat+0x252>
			if (res != FR_OK) break;
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	e000      	b.n	8004cc8 <put_fat+0x252>
			if (res != FR_OK) break;
 8004cc6:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 8004cc8:	231f      	movs	r3, #31
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	781b      	ldrb	r3, [r3, #0]
}
 8004cce:	0018      	movs	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b008      	add	sp, #32
 8004cd4:	bdb0      	pop	{r4, r5, r7, pc}

08004cd6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004cd6:	b5b0      	push	{r4, r5, r7, lr}
 8004cd8:	b088      	sub	sp, #32
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004ce2:	231f      	movs	r3, #31
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d904      	bls.n	8004d00 <remove_chain+0x2a>
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d301      	bcc.n	8004d04 <remove_chain+0x2e>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e057      	b.n	8004db4 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d011      	beq.n	8004d2e <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004d0a:	251f      	movs	r5, #31
 8004d0c:	197c      	adds	r4, r7, r5
 8004d0e:	2301      	movs	r3, #1
 8004d10:	425a      	negs	r2, r3
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	0018      	movs	r0, r3
 8004d18:	f7ff fead 	bl	8004a76 <put_fat>
 8004d1c:	0003      	movs	r3, r0
 8004d1e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8004d20:	197b      	adds	r3, r7, r5
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <remove_chain+0x58>
 8004d28:	197b      	adds	r3, r7, r5
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	e042      	b.n	8004db4 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	0011      	movs	r1, r2
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7ff fdc3 	bl	80048c0 <get_fat>
 8004d3a:	0003      	movs	r3, r0
 8004d3c:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d035      	beq.n	8004db0 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <remove_chain+0x78>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e032      	b.n	8004db4 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	3301      	adds	r3, #1
 8004d52:	d101      	bne.n	8004d58 <remove_chain+0x82>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e02d      	b.n	8004db4 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004d58:	251f      	movs	r5, #31
 8004d5a:	197c      	adds	r4, r7, r5
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2200      	movs	r2, #0
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7ff fe87 	bl	8004a76 <put_fat>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8004d6c:	197b      	adds	r3, r7, r5
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <remove_chain+0xa4>
 8004d74:	197b      	adds	r3, r7, r5
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	e01c      	b.n	8004db4 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	3b02      	subs	r3, #2
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d20b      	bcs.n	8004da0 <remove_chain+0xca>
			fs->free_clst++;
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	791b      	ldrb	r3, [r3, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d3bf      	bcc.n	8004d2e <remove_chain+0x58>
 8004dae:	e000      	b.n	8004db2 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8004db0:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	0018      	movs	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b008      	add	sp, #32
 8004dba:	bdb0      	pop	{r4, r5, r7, pc}

08004dbc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004dbc:	b5b0      	push	{r4, r5, r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10d      	bne.n	8004dee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d004      	beq.n	8004de8 <create_chain+0x2c>
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d31d      	bcc.n	8004e24 <create_chain+0x68>
 8004de8:	2301      	movs	r3, #1
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	e01a      	b.n	8004e24 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	0011      	movs	r1, r2
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff fd63 	bl	80048c0 <get_fat>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d801      	bhi.n	8004e08 <create_chain+0x4c>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e07b      	b.n	8004f00 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <create_chain+0x56>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	e076      	b.n	8004f00 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d201      	bcs.n	8004e20 <create_chain+0x64>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	e06f      	b.n	8004f00 <create_chain+0x144>
		scl = clst;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d307      	bcc.n	8004e48 <create_chain+0x8c>
				ncl = 2;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d901      	bls.n	8004e48 <create_chain+0x8c>
 8004e44:	2300      	movs	r3, #0
 8004e46:	e05b      	b.n	8004f00 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	0011      	movs	r1, r2
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7ff fd36 	bl	80048c0 <get_fat>
 8004e54:	0003      	movs	r3, r0
 8004e56:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00d      	beq.n	8004e7a <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d002      	beq.n	8004e6a <create_chain+0xae>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	d101      	bne.n	8004e6e <create_chain+0xb2>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	e048      	b.n	8004f00 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d1d8      	bne.n	8004e28 <create_chain+0x6c>
 8004e76:	2300      	movs	r3, #0
 8004e78:	e042      	b.n	8004f00 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8004e7a:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004e7c:	2517      	movs	r5, #23
 8004e7e:	197c      	adds	r4, r7, r5
 8004e80:	2301      	movs	r3, #1
 8004e82:	425a      	negs	r2, r3
 8004e84:	69f9      	ldr	r1, [r7, #28]
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7ff fdf4 	bl	8004a76 <put_fat>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 8004e92:	197b      	adds	r3, r7, r5
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <create_chain+0xf6>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004ea0:	197c      	adds	r4, r7, r5
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f7ff fde4 	bl	8004a76 <put_fat>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004eb2:	2317      	movs	r3, #23
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d116      	bne.n	8004eea <create_chain+0x12e>
		fs->last_clst = ncl;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	3b02      	subs	r3, #2
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d804      	bhi.n	8004eda <create_chain+0x11e>
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	1e5a      	subs	r2, r3, #1
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	791b      	ldrb	r3, [r3, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	711a      	strb	r2, [r3, #4]
 8004ee8:	e009      	b.n	8004efe <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004eea:	2317      	movs	r3, #23
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d102      	bne.n	8004efa <create_chain+0x13e>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	425b      	negs	r3, r3
 8004ef8:	e000      	b.n	8004efc <create_chain+0x140>
 8004efa:	2301      	movs	r3, #1
 8004efc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004efe:	69fb      	ldr	r3, [r7, #28]
}
 8004f00:	0018      	movs	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b008      	add	sp, #32
 8004f06:	bdb0      	pop	{r4, r5, r7, pc}

08004f08 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	899b      	ldrh	r3, [r3, #12]
 8004f24:	0019      	movs	r1, r3
 8004f26:	6838      	ldr	r0, [r7, #0]
 8004f28:	f7fb f8f8 	bl	800011c <__udivsi3>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	001a      	movs	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	895b      	ldrh	r3, [r3, #10]
 8004f34:	0019      	movs	r1, r3
 8004f36:	0010      	movs	r0, r2
 8004f38:	f7fb f8f0 	bl	800011c <__udivsi3>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1d1a      	adds	r2, r3, #4
 8004f44:	613a      	str	r2, [r7, #16]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <clmt_clust+0x4c>
 8004f50:	2300      	movs	r3, #0
 8004f52:	e010      	b.n	8004f76 <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d307      	bcc.n	8004f6c <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	3304      	adds	r3, #4
 8004f68:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004f6a:	e7e9      	b.n	8004f40 <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 8004f6c:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	18d3      	adds	r3, r2, r3
}
 8004f76:	0018      	movs	r0, r3
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b006      	add	sp, #24
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004f7e:	b590      	push	{r4, r7, lr}
 8004f80:	b087      	sub	sp, #28
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	039b      	lsls	r3, r3, #14
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d203      	bcs.n	8004fa0 <dir_sdi+0x22>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	221f      	movs	r2, #31
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d001      	beq.n	8004fa4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e074      	b.n	800508e <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <dir_sdi+0x46>
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d902      	bls.n	8004fc4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10c      	bne.n	8004fe4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	8912      	ldrh	r2, [r2, #8]
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d301      	bcc.n	8004fda <dir_sdi+0x5c>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e059      	b.n	800508e <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	61da      	str	r2, [r3, #28]
 8004fe2:	e02f      	b.n	8005044 <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	895b      	ldrh	r3, [r3, #10]
 8004fe8:	001a      	movs	r2, r3
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	899b      	ldrh	r3, [r3, #12]
 8004fee:	4353      	muls	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ff2:	e01a      	b.n	800502a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	0011      	movs	r1, r2
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f7ff fc60 	bl	80048c0 <get_fat>
 8005000:	0003      	movs	r3, r0
 8005002:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	3301      	adds	r3, #1
 8005008:	d101      	bne.n	800500e <dir_sdi+0x90>
 800500a:	2301      	movs	r3, #1
 800500c:	e03f      	b.n	800508e <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d904      	bls.n	800501e <dir_sdi+0xa0>
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	429a      	cmp	r2, r3
 800501c:	d301      	bcc.n	8005022 <dir_sdi+0xa4>
 800501e:	2302      	movs	r3, #2
 8005020:	e035      	b.n	800508e <dir_sdi+0x110>
			ofs -= csz;
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	429a      	cmp	r2, r3
 8005030:	d2e0      	bcs.n	8004ff4 <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	0011      	movs	r1, r2
 8005038:	0018      	movs	r0, r3
 800503a:	f7ff fc25 	bl	8004888 <clust2sect>
 800503e:	0002      	movs	r2, r0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <dir_sdi+0xd8>
 8005052:	2302      	movs	r3, #2
 8005054:	e01b      	b.n	800508e <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69dc      	ldr	r4, [r3, #28]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	899b      	ldrh	r3, [r3, #12]
 800505e:	0019      	movs	r1, r3
 8005060:	6838      	ldr	r0, [r7, #0]
 8005062:	f7fb f85b 	bl	800011c <__udivsi3>
 8005066:	0003      	movs	r3, r0
 8005068:	18e2      	adds	r2, r4, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	3338      	adds	r3, #56	; 0x38
 8005072:	001c      	movs	r4, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	899b      	ldrh	r3, [r3, #12]
 8005078:	001a      	movs	r2, r3
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	0011      	movs	r1, r2
 800507e:	0018      	movs	r0, r3
 8005080:	f7fb f8d2 	bl	8000228 <__aeabi_uidivmod>
 8005084:	000b      	movs	r3, r1
 8005086:	18e2      	adds	r2, r4, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	0018      	movs	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	b007      	add	sp, #28
 8005094:	bd90      	pop	{r4, r7, pc}

08005096 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005096:	b590      	push	{r4, r7, lr}
 8005098:	b087      	sub	sp, #28
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	3320      	adds	r3, #32
 80050ac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <dir_next+0x2a>
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	039b      	lsls	r3, r3, #14
 80050bc:	429a      	cmp	r2, r3
 80050be:	d301      	bcc.n	80050c4 <dir_next+0x2e>
 80050c0:	2304      	movs	r3, #4
 80050c2:	e0c0      	b.n	8005246 <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	899b      	ldrh	r3, [r3, #12]
 80050c8:	001a      	movs	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	0011      	movs	r1, r2
 80050ce:	0018      	movs	r0, r3
 80050d0:	f7fb f8aa 	bl	8000228 <__aeabi_uidivmod>
 80050d4:	1e0b      	subs	r3, r1, #0
 80050d6:	d000      	beq.n	80050da <dir_next+0x44>
 80050d8:	e0a2      	b.n	8005220 <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	8912      	ldrh	r2, [r2, #8]
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d200      	bcs.n	80050fa <dir_next+0x64>
 80050f8:	e092      	b.n	8005220 <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	61da      	str	r2, [r3, #28]
 8005100:	2304      	movs	r3, #4
 8005102:	e0a0      	b.n	8005246 <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	899b      	ldrh	r3, [r3, #12]
 8005108:	0019      	movs	r1, r3
 800510a:	68b8      	ldr	r0, [r7, #8]
 800510c:	f7fb f806 	bl	800011c <__udivsi3>
 8005110:	0003      	movs	r3, r0
 8005112:	001a      	movs	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	895b      	ldrh	r3, [r3, #10]
 8005118:	3b01      	subs	r3, #1
 800511a:	4013      	ands	r3, r2
 800511c:	d000      	beq.n	8005120 <dir_next+0x8a>
 800511e:	e07f      	b.n	8005220 <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	0019      	movs	r1, r3
 8005128:	0010      	movs	r0, r2
 800512a:	f7ff fbc9 	bl	80048c0 <get_fat>
 800512e:	0003      	movs	r3, r0
 8005130:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d801      	bhi.n	800513c <dir_next+0xa6>
 8005138:	2302      	movs	r3, #2
 800513a:	e084      	b.n	8005246 <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3301      	adds	r3, #1
 8005140:	d101      	bne.n	8005146 <dir_next+0xb0>
 8005142:	2301      	movs	r3, #1
 8005144:	e07f      	b.n	8005246 <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	429a      	cmp	r2, r3
 800514e:	d35b      	bcc.n	8005208 <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d104      	bne.n	8005160 <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	61da      	str	r2, [r3, #28]
 800515c:	2304      	movs	r3, #4
 800515e:	e072      	b.n	8005246 <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	0019      	movs	r1, r3
 8005168:	0010      	movs	r0, r2
 800516a:	f7ff fe27 	bl	8004dbc <create_chain>
 800516e:	0003      	movs	r3, r0
 8005170:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <dir_next+0xe6>
 8005178:	2307      	movs	r3, #7
 800517a:	e064      	b.n	8005246 <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <dir_next+0xf0>
 8005182:	2302      	movs	r3, #2
 8005184:	e05f      	b.n	8005246 <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	3301      	adds	r3, #1
 800518a:	d101      	bne.n	8005190 <dir_next+0xfa>
 800518c:	2301      	movs	r3, #1
 800518e:	e05a      	b.n	8005246 <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	0018      	movs	r0, r3
 8005194:	f7ff fa7e 	bl	8004694 <sync_window>
 8005198:	1e03      	subs	r3, r0, #0
 800519a:	d001      	beq.n	80051a0 <dir_next+0x10a>
 800519c:	2301      	movs	r3, #1
 800519e:	e052      	b.n	8005246 <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3338      	adds	r3, #56	; 0x38
 80051a4:	0018      	movs	r0, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	899b      	ldrh	r3, [r3, #12]
 80051aa:	001a      	movs	r2, r3
 80051ac:	2100      	movs	r1, #0
 80051ae:	f7ff f8b0 	bl	8004312 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80051b2:	2300      	movs	r3, #0
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	0011      	movs	r1, r2
 80051bc:	0018      	movs	r0, r3
 80051be:	f7ff fb63 	bl	8004888 <clust2sect>
 80051c2:	0002      	movs	r2, r0
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	635a      	str	r2, [r3, #52]	; 0x34
 80051c8:	e012      	b.n	80051f0 <dir_next+0x15a>
						fs->wflag = 1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f7ff fa5e 	bl	8004694 <sync_window>
 80051d8:	1e03      	subs	r3, r0, #0
 80051da:	d001      	beq.n	80051e0 <dir_next+0x14a>
 80051dc:	2301      	movs	r3, #1
 80051de:	e032      	b.n	8005246 <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	3301      	adds	r3, #1
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	635a      	str	r2, [r3, #52]	; 0x34
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	895b      	ldrh	r3, [r3, #10]
 80051f4:	001a      	movs	r2, r3
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d3e6      	bcc.n	80051ca <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad2      	subs	r2, r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	0011      	movs	r1, r2
 8005214:	0018      	movs	r0, r3
 8005216:	f7ff fb37 	bl	8004888 <clust2sect>
 800521a:	0002      	movs	r2, r0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3338      	adds	r3, #56	; 0x38
 800522a:	001c      	movs	r4, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	899b      	ldrh	r3, [r3, #12]
 8005230:	001a      	movs	r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	0011      	movs	r1, r2
 8005236:	0018      	movs	r0, r3
 8005238:	f7fa fff6 	bl	8000228 <__aeabi_uidivmod>
 800523c:	000b      	movs	r3, r1
 800523e:	18e2      	adds	r2, r4, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	0018      	movs	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	b007      	add	sp, #28
 800524c:	bd90      	pop	{r4, r7, pc}

0800524e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800524e:	b5b0      	push	{r4, r5, r7, lr}
 8005250:	b086      	sub	sp, #24
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800525e:	2517      	movs	r5, #23
 8005260:	197c      	adds	r4, r7, r5
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2100      	movs	r1, #0
 8005266:	0018      	movs	r0, r3
 8005268:	f7ff fe89 	bl	8004f7e <dir_sdi>
 800526c:	0003      	movs	r3, r0
 800526e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005270:	197b      	adds	r3, r7, r5
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d133      	bne.n	80052e0 <dir_alloc+0x92>
		n = 0;
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	2517      	movs	r5, #23
 8005282:	197c      	adds	r4, r7, r5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	0011      	movs	r1, r2
 8005288:	0018      	movs	r0, r3
 800528a:	f7ff fa4b 	bl	8004724 <move_window>
 800528e:	0003      	movs	r3, r0
 8005290:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005292:	197b      	adds	r3, r7, r5
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d121      	bne.n	80052de <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2be5      	cmp	r3, #229	; 0xe5
 80052a2:	d004      	beq.n	80052ae <dir_alloc+0x60>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d107      	bne.n	80052be <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	3301      	adds	r3, #1
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d102      	bne.n	80052c2 <dir_alloc+0x74>
 80052bc:	e010      	b.n	80052e0 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80052c2:	2517      	movs	r5, #23
 80052c4:	197c      	adds	r4, r7, r5
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2101      	movs	r1, #1
 80052ca:	0018      	movs	r0, r3
 80052cc:	f7ff fee3 	bl	8005096 <dir_next>
 80052d0:	0003      	movs	r3, r0
 80052d2:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80052d4:	197b      	adds	r3, r7, r5
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0cf      	beq.n	800527c <dir_alloc+0x2e>
 80052dc:	e000      	b.n	80052e0 <dir_alloc+0x92>
			if (res != FR_OK) break;
 80052de:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80052e0:	2217      	movs	r2, #23
 80052e2:	18bb      	adds	r3, r7, r2
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d102      	bne.n	80052f0 <dir_alloc+0xa2>
 80052ea:	18bb      	adds	r3, r7, r2
 80052ec:	2207      	movs	r2, #7
 80052ee:	701a      	strb	r2, [r3, #0]
	return res;
 80052f0:	2317      	movs	r3, #23
 80052f2:	18fb      	adds	r3, r7, r3
 80052f4:	781b      	ldrb	r3, [r3, #0]
}
 80052f6:	0018      	movs	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b006      	add	sp, #24
 80052fc:	bdb0      	pop	{r4, r5, r7, pc}

080052fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	331a      	adds	r3, #26
 800530c:	0018      	movs	r0, r3
 800530e:	f7fe ff5d 	bl	80041cc <ld_word>
 8005312:	0003      	movs	r3, r0
 8005314:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b03      	cmp	r3, #3
 800531c:	d109      	bne.n	8005332 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	3314      	adds	r3, #20
 8005322:	0018      	movs	r0, r3
 8005324:	f7fe ff52 	bl	80041cc <ld_word>
 8005328:	0003      	movs	r3, r0
 800532a:	041b      	lsls	r3, r3, #16
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005332:	68fb      	ldr	r3, [r7, #12]
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b004      	add	sp, #16
 800533a:	bd80      	pop	{r7, pc}

0800533c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	331a      	adds	r3, #26
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	b292      	uxth	r2, r2
 8005350:	0011      	movs	r1, r2
 8005352:	0018      	movs	r0, r3
 8005354:	f7fe ff76 	bl	8004244 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b03      	cmp	r3, #3
 800535e:	d109      	bne.n	8005374 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	3314      	adds	r3, #20
 8005364:	001a      	movs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	0c1b      	lsrs	r3, r3, #16
 800536a:	b29b      	uxth	r3, r3
 800536c:	0019      	movs	r1, r3
 800536e:	0010      	movs	r0, r2
 8005370:	f7fe ff68 	bl	8004244 <st_word>
	}
}
 8005374:	46c0      	nop			; (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	b004      	add	sp, #16
 800537a:	bd80      	pop	{r7, pc}

0800537c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800537c:	b5b0      	push	{r4, r5, r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	331a      	adds	r3, #26
 800538a:	0018      	movs	r0, r3
 800538c:	f7fe ff1e 	bl	80041cc <ld_word>
 8005390:	1e03      	subs	r3, r0, #0
 8005392:	d001      	beq.n	8005398 <cmp_lfn+0x1c>
 8005394:	2300      	movs	r3, #0
 8005396:	e068      	b.n	800546a <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	001a      	movs	r2, r3
 800539e:	233f      	movs	r3, #63	; 0x3f
 80053a0:	4013      	ands	r3, r2
 80053a2:	1e5a      	subs	r2, r3, #1
 80053a4:	0013      	movs	r3, r2
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	189b      	adds	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	189b      	adds	r3, r3, r2
 80053ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80053b0:	230e      	movs	r3, #14
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	2201      	movs	r2, #1
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	e03d      	b.n	800543a <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80053be:	4a2d      	ldr	r2, [pc, #180]	; (8005474 <cmp_lfn+0xf8>)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	18d3      	adds	r3, r2, r3
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	001a      	movs	r2, r3
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	189b      	adds	r3, r3, r2
 80053cc:	250c      	movs	r5, #12
 80053ce:	197c      	adds	r4, r7, r5
 80053d0:	0018      	movs	r0, r3
 80053d2:	f7fe fefb 	bl	80041cc <ld_word>
 80053d6:	0003      	movs	r3, r0
 80053d8:	8023      	strh	r3, [r4, #0]
		if (wc) {
 80053da:	230e      	movs	r3, #14
 80053dc:	18fb      	adds	r3, r7, r3
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01f      	beq.n	8005424 <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2bfe      	cmp	r3, #254	; 0xfe
 80053e8:	d813      	bhi.n	8005412 <cmp_lfn+0x96>
 80053ea:	197b      	adds	r3, r7, r5
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	0018      	movs	r0, r3
 80053f0:	f002 f9f0 	bl	80077d4 <ff_wtoupper>
 80053f4:	0003      	movs	r3, r0
 80053f6:	001c      	movs	r4, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	617a      	str	r2, [r7, #20]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	18d3      	adds	r3, r2, r3
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	0018      	movs	r0, r3
 8005408:	f002 f9e4 	bl	80077d4 <ff_wtoupper>
 800540c:	0003      	movs	r3, r0
 800540e:	429c      	cmp	r4, r3
 8005410:	d001      	beq.n	8005416 <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 8005412:	2300      	movs	r3, #0
 8005414:	e029      	b.n	800546a <cmp_lfn+0xee>
			}
			wc = uc;
 8005416:	230e      	movs	r3, #14
 8005418:	18fb      	adds	r3, r7, r3
 800541a:	220c      	movs	r2, #12
 800541c:	18ba      	adds	r2, r7, r2
 800541e:	8812      	ldrh	r2, [r2, #0]
 8005420:	801a      	strh	r2, [r3, #0]
 8005422:	e007      	b.n	8005434 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005424:	230c      	movs	r3, #12
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	4a13      	ldr	r2, [pc, #76]	; (8005478 <cmp_lfn+0xfc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d001      	beq.n	8005434 <cmp_lfn+0xb8>
 8005430:	2300      	movs	r3, #0
 8005432:	e01a      	b.n	800546a <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	3301      	adds	r3, #1
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b0c      	cmp	r3, #12
 800543e:	d9be      	bls.n	80053be <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	001a      	movs	r2, r3
 8005446:	2340      	movs	r3, #64	; 0x40
 8005448:	4013      	ands	r3, r2
 800544a:	d00d      	beq.n	8005468 <cmp_lfn+0xec>
 800544c:	230e      	movs	r3, #14
 800544e:	18fb      	adds	r3, r7, r3
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d008      	beq.n	8005468 <cmp_lfn+0xec>
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	18d3      	adds	r3, r2, r3
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <cmp_lfn+0xec>
 8005464:	2300      	movs	r3, #0
 8005466:	e000      	b.n	800546a <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 8005468:	2301      	movs	r3, #1
}
 800546a:	0018      	movs	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	b006      	add	sp, #24
 8005470:	bdb0      	pop	{r4, r5, r7, pc}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	08008b34 	.word	0x08008b34
 8005478:	0000ffff 	.word	0x0000ffff

0800547c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800547c:	b590      	push	{r4, r7, lr}
 800547e:	b089      	sub	sp, #36	; 0x24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	0019      	movs	r1, r3
 8005488:	1dfb      	adds	r3, r7, #7
 800548a:	701a      	strb	r2, [r3, #0]
 800548c:	1dbb      	adds	r3, r7, #6
 800548e:	1c0a      	adds	r2, r1, #0
 8005490:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	330d      	adds	r3, #13
 8005496:	1dba      	adds	r2, r7, #6
 8005498:	7812      	ldrb	r2, [r2, #0]
 800549a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	330b      	adds	r3, #11
 80054a0:	220f      	movs	r2, #15
 80054a2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	330c      	adds	r3, #12
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	331a      	adds	r3, #26
 80054b0:	2100      	movs	r1, #0
 80054b2:	0018      	movs	r0, r3
 80054b4:	f7fe fec6 	bl	8004244 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80054b8:	1dfb      	adds	r3, r7, #7
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	1e5a      	subs	r2, r3, #1
 80054be:	0013      	movs	r3, r2
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	189b      	adds	r3, r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80054ca:	2316      	movs	r3, #22
 80054cc:	18fb      	adds	r3, r7, r3
 80054ce:	2200      	movs	r2, #0
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80054d6:	2116      	movs	r1, #22
 80054d8:	187b      	adds	r3, r7, r1
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	4a21      	ldr	r2, [pc, #132]	; (8005564 <put_lfn+0xe8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d008      	beq.n	80054f4 <put_lfn+0x78>
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	61fa      	str	r2, [r7, #28]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	18d2      	adds	r2, r2, r3
 80054ee:	187b      	adds	r3, r7, r1
 80054f0:	8812      	ldrh	r2, [r2, #0]
 80054f2:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80054f4:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <put_lfn+0xec>)
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	18d3      	adds	r3, r2, r3
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	001a      	movs	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	189a      	adds	r2, r3, r2
 8005502:	2416      	movs	r4, #22
 8005504:	193b      	adds	r3, r7, r4
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	0019      	movs	r1, r3
 800550a:	0010      	movs	r0, r2
 800550c:	f7fe fe9a 	bl	8004244 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005510:	0022      	movs	r2, r4
 8005512:	18bb      	adds	r3, r7, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d103      	bne.n	8005522 <put_lfn+0xa6>
 800551a:	18bb      	adds	r3, r7, r2
 800551c:	2201      	movs	r2, #1
 800551e:	4252      	negs	r2, r2
 8005520:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	3301      	adds	r3, #1
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b0c      	cmp	r3, #12
 800552c:	d9d3      	bls.n	80054d6 <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800552e:	2316      	movs	r3, #22
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	4a0b      	ldr	r2, [pc, #44]	; (8005564 <put_lfn+0xe8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d006      	beq.n	8005548 <put_lfn+0xcc>
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	18d3      	adds	r3, r2, r3
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d105      	bne.n	8005554 <put_lfn+0xd8>
 8005548:	1dfb      	adds	r3, r7, #7
 800554a:	1dfa      	adds	r2, r7, #7
 800554c:	7812      	ldrb	r2, [r2, #0]
 800554e:	2140      	movs	r1, #64	; 0x40
 8005550:	430a      	orrs	r2, r1
 8005552:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	1dfa      	adds	r2, r7, #7
 8005558:	7812      	ldrb	r2, [r2, #0]
 800555a:	701a      	strb	r2, [r3, #0]
}
 800555c:	46c0      	nop			; (mov r8, r8)
 800555e:	46bd      	mov	sp, r7
 8005560:	b009      	add	sp, #36	; 0x24
 8005562:	bd90      	pop	{r4, r7, pc}
 8005564:	0000ffff 	.word	0x0000ffff
 8005568:	08008b34 	.word	0x08008b34

0800556c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08c      	sub	sp, #48	; 0x30
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	220b      	movs	r2, #11
 8005580:	0018      	movs	r0, r3
 8005582:	f7fe fea7 	bl	80042d4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b05      	cmp	r3, #5
 800558a:	d92f      	bls.n	80055ec <gen_numname+0x80>
		sr = seq;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005590:	e026      	b.n	80055e0 <gen_numname+0x74>
			wc = *lfn++;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	1c9a      	adds	r2, r3, #2
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	2222      	movs	r2, #34	; 0x22
 800559a:	18ba      	adds	r2, r7, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 80055a0:	2300      	movs	r3, #0
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a4:	e019      	b.n	80055da <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	005a      	lsls	r2, r3, #1
 80055aa:	2022      	movs	r0, #34	; 0x22
 80055ac:	183b      	adds	r3, r7, r0
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	2101      	movs	r1, #1
 80055b2:	400b      	ands	r3, r1
 80055b4:	18d3      	adds	r3, r2, r3
 80055b6:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80055b8:	183b      	adds	r3, r7, r0
 80055ba:	183a      	adds	r2, r7, r0
 80055bc:	8812      	ldrh	r2, [r2, #0]
 80055be:	0852      	lsrs	r2, r2, #1
 80055c0:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	025b      	lsls	r3, r3, #9
 80055c8:	4013      	ands	r3, r2
 80055ca:	d003      	beq.n	80055d4 <gen_numname+0x68>
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4a30      	ldr	r2, [pc, #192]	; (8005690 <gen_numname+0x124>)
 80055d0:	4053      	eors	r3, r2
 80055d2:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	3301      	adds	r3, #1
 80055d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	2b0f      	cmp	r3, #15
 80055de:	d9e2      	bls.n	80055a6 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1d4      	bne.n	8005592 <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80055ec:	2307      	movs	r3, #7
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	220f      	movs	r2, #15
 80055f6:	4013      	ands	r3, r2
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	212f      	movs	r1, #47	; 0x2f
 80055fc:	187b      	adds	r3, r7, r1
 80055fe:	3230      	adds	r2, #48	; 0x30
 8005600:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8005602:	187b      	adds	r3, r7, r1
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b39      	cmp	r3, #57	; 0x39
 8005608:	d904      	bls.n	8005614 <gen_numname+0xa8>
 800560a:	187b      	adds	r3, r7, r1
 800560c:	187a      	adds	r2, r7, r1
 800560e:	7812      	ldrb	r2, [r2, #0]
 8005610:	3207      	adds	r2, #7
 8005612:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	1e5a      	subs	r2, r3, #1
 8005618:	62ba      	str	r2, [r7, #40]	; 0x28
 800561a:	2014      	movs	r0, #20
 800561c:	183a      	adds	r2, r7, r0
 800561e:	212f      	movs	r1, #47	; 0x2f
 8005620:	1879      	adds	r1, r7, r1
 8005622:	7809      	ldrb	r1, [r1, #0]
 8005624:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1de      	bne.n	80055f0 <gen_numname+0x84>
	ns[i] = '~';
 8005632:	183a      	adds	r2, r7, r0
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	18d3      	adds	r3, r2, r3
 8005638:	227e      	movs	r2, #126	; 0x7e
 800563a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800563c:	2300      	movs	r3, #0
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
 8005640:	e002      	b.n	8005648 <gen_numname+0xdc>
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	3301      	adds	r3, #1
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
 8005648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	429a      	cmp	r2, r3
 800564e:	d205      	bcs.n	800565c <gen_numname+0xf0>
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	18d3      	adds	r3, r2, r3
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b20      	cmp	r3, #32
 800565a:	d1f2      	bne.n	8005642 <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	2b07      	cmp	r3, #7
 8005660:	d806      	bhi.n	8005670 <gen_numname+0x104>
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	62ba      	str	r2, [r7, #40]	; 0x28
 8005668:	2214      	movs	r2, #20
 800566a:	18ba      	adds	r2, r7, r2
 800566c:	5cd1      	ldrb	r1, [r2, r3]
 800566e:	e000      	b.n	8005672 <gen_numname+0x106>
 8005670:	2120      	movs	r1, #32
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	627a      	str	r2, [r7, #36]	; 0x24
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	18d3      	adds	r3, r2, r3
 800567c:	1c0a      	adds	r2, r1, #0
 800567e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	2b07      	cmp	r3, #7
 8005684:	d9ea      	bls.n	800565c <gen_numname+0xf0>
}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	46c0      	nop			; (mov r8, r8)
 800568a:	46bd      	mov	sp, r7
 800568c:	b00c      	add	sp, #48	; 0x30
 800568e:	bd80      	pop	{r7, pc}
 8005690:	00011021 	.word	0x00011021

08005694 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800569c:	230f      	movs	r3, #15
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	2200      	movs	r2, #0
 80056a2:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 80056a4:	230b      	movs	r3, #11
 80056a6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80056a8:	200f      	movs	r0, #15
 80056aa:	183b      	adds	r3, r7, r0
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	0852      	lsrs	r2, r2, #1
 80056b2:	01db      	lsls	r3, r3, #7
 80056b4:	4313      	orrs	r3, r2
 80056b6:	b2d9      	uxtb	r1, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	781a      	ldrb	r2, [r3, #0]
 80056c0:	183b      	adds	r3, r7, r0
 80056c2:	188a      	adds	r2, r1, r2
 80056c4:	701a      	strb	r2, [r3, #0]
	} while (--n);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1ea      	bne.n	80056a8 <sum_sfn+0x14>
	return sum;
 80056d2:	183b      	adds	r3, r7, r0
 80056d4:	781b      	ldrb	r3, [r3, #0]
}
 80056d6:	0018      	movs	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	b004      	add	sp, #16
 80056dc:	bd80      	pop	{r7, pc}

080056de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80056de:	b5b0      	push	{r4, r5, r7, lr}
 80056e0:	b086      	sub	sp, #24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80056ec:	2517      	movs	r5, #23
 80056ee:	197c      	adds	r4, r7, r5
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2100      	movs	r1, #0
 80056f4:	0018      	movs	r0, r3
 80056f6:	f7ff fc42 	bl	8004f7e <dir_sdi>
 80056fa:	0003      	movs	r3, r0
 80056fc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 80056fe:	197b      	adds	r3, r7, r5
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <dir_find+0x2e>
 8005706:	197b      	adds	r3, r7, r5
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	e0df      	b.n	80058cc <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800570c:	2114      	movs	r1, #20
 800570e:	187b      	adds	r3, r7, r1
 8005710:	22ff      	movs	r2, #255	; 0xff
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	2315      	movs	r3, #21
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	187a      	adds	r2, r7, r1
 800571a:	7812      	ldrb	r2, [r2, #0]
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	4252      	negs	r2, r2
 8005724:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69da      	ldr	r2, [r3, #28]
 800572a:	2517      	movs	r5, #23
 800572c:	197c      	adds	r4, r7, r5
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	0011      	movs	r1, r2
 8005732:	0018      	movs	r0, r3
 8005734:	f7fe fff6 	bl	8004724 <move_window>
 8005738:	0003      	movs	r3, r0
 800573a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800573c:	0029      	movs	r1, r5
 800573e:	187b      	adds	r3, r7, r1
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d000      	beq.n	8005748 <dir_find+0x6a>
 8005746:	e0b9      	b.n	80058bc <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	2016      	movs	r0, #22
 800574e:	183b      	adds	r3, r7, r0
 8005750:	7812      	ldrb	r2, [r2, #0]
 8005752:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005754:	183b      	adds	r3, r7, r0
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d103      	bne.n	8005764 <dir_find+0x86>
 800575c:	187b      	adds	r3, r7, r1
 800575e:	2204      	movs	r2, #4
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	e0b0      	b.n	80058c6 <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	330b      	adds	r3, #11
 800576a:	781a      	ldrb	r2, [r3, #0]
 800576c:	200f      	movs	r0, #15
 800576e:	183b      	adds	r3, r7, r0
 8005770:	213f      	movs	r1, #63	; 0x3f
 8005772:	400a      	ands	r2, r1
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	0001      	movs	r1, r0
 800577a:	187a      	adds	r2, r7, r1
 800577c:	7812      	ldrb	r2, [r2, #0]
 800577e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005780:	2316      	movs	r3, #22
 8005782:	18fb      	adds	r3, r7, r3
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2be5      	cmp	r3, #229	; 0xe5
 8005788:	d008      	beq.n	800579c <dir_find+0xbe>
 800578a:	187b      	adds	r3, r7, r1
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2208      	movs	r2, #8
 8005790:	4013      	ands	r3, r2
 8005792:	d00c      	beq.n	80057ae <dir_find+0xd0>
 8005794:	187b      	adds	r3, r7, r1
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b0f      	cmp	r3, #15
 800579a:	d008      	beq.n	80057ae <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800579c:	2315      	movs	r3, #21
 800579e:	18fb      	adds	r3, r7, r3
 80057a0:	22ff      	movs	r2, #255	; 0xff
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	4252      	negs	r2, r2
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30
 80057ac:	e077      	b.n	800589e <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80057ae:	230f      	movs	r3, #15
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b0f      	cmp	r3, #15
 80057b6:	d148      	bne.n	800584a <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	222f      	movs	r2, #47	; 0x2f
 80057bc:	5c9b      	ldrb	r3, [r3, r2]
 80057be:	001a      	movs	r2, r3
 80057c0:	2340      	movs	r3, #64	; 0x40
 80057c2:	4013      	ands	r3, r2
 80057c4:	d000      	beq.n	80057c8 <dir_find+0xea>
 80057c6:	e06a      	b.n	800589e <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80057c8:	2116      	movs	r1, #22
 80057ca:	187b      	adds	r3, r7, r1
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2240      	movs	r2, #64	; 0x40
 80057d0:	4013      	ands	r3, r2
 80057d2:	d015      	beq.n	8005800 <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1a      	ldr	r2, [r3, #32]
 80057d8:	2314      	movs	r3, #20
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	7b52      	ldrb	r2, [r2, #13]
 80057de:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80057e0:	187b      	adds	r3, r7, r1
 80057e2:	0008      	movs	r0, r1
 80057e4:	187a      	adds	r2, r7, r1
 80057e6:	7812      	ldrb	r2, [r2, #0]
 80057e8:	2140      	movs	r1, #64	; 0x40
 80057ea:	438a      	bics	r2, r1
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	2315      	movs	r3, #21
 80057f0:	18fb      	adds	r3, r7, r3
 80057f2:	183a      	adds	r2, r7, r0
 80057f4:	7812      	ldrb	r2, [r2, #0]
 80057f6:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	695a      	ldr	r2, [r3, #20]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005800:	2316      	movs	r3, #22
 8005802:	18fa      	adds	r2, r7, r3
 8005804:	2415      	movs	r4, #21
 8005806:	193b      	adds	r3, r7, r4
 8005808:	7812      	ldrb	r2, [r2, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d117      	bne.n	8005840 <dir_find+0x162>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	330d      	adds	r3, #13
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2214      	movs	r2, #20
 800581a:	18ba      	adds	r2, r7, r2
 800581c:	7812      	ldrb	r2, [r2, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d10e      	bne.n	8005840 <dir_find+0x162>
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	0019      	movs	r1, r3
 800582c:	0010      	movs	r0, r2
 800582e:	f7ff fda5 	bl	800537c <cmp_lfn>
 8005832:	1e03      	subs	r3, r0, #0
 8005834:	d004      	beq.n	8005840 <dir_find+0x162>
 8005836:	193b      	adds	r3, r7, r4
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	3b01      	subs	r3, #1
 800583c:	b2da      	uxtb	r2, r3
 800583e:	e000      	b.n	8005842 <dir_find+0x164>
 8005840:	22ff      	movs	r2, #255	; 0xff
 8005842:	2315      	movs	r3, #21
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	e029      	b.n	800589e <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800584a:	2315      	movs	r3, #21
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <dir_find+0x18e>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	0018      	movs	r0, r3
 800585a:	f7ff ff1b 	bl	8005694 <sum_sfn>
 800585e:	0003      	movs	r3, r0
 8005860:	001a      	movs	r2, r3
 8005862:	2314      	movs	r3, #20
 8005864:	18fb      	adds	r3, r7, r3
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	4293      	cmp	r3, r2
 800586a:	d029      	beq.n	80058c0 <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	222f      	movs	r2, #47	; 0x2f
 8005870:	5c9b      	ldrb	r3, [r3, r2]
 8005872:	001a      	movs	r2, r3
 8005874:	2301      	movs	r3, #1
 8005876:	4013      	ands	r3, r2
 8005878:	d109      	bne.n	800588e <dir_find+0x1b0>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a18      	ldr	r0, [r3, #32]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3324      	adds	r3, #36	; 0x24
 8005882:	220b      	movs	r2, #11
 8005884:	0019      	movs	r1, r3
 8005886:	f7fe fd5d 	bl	8004344 <mem_cmp>
 800588a:	1e03      	subs	r3, r0, #0
 800588c:	d01a      	beq.n	80058c4 <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800588e:	2315      	movs	r3, #21
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	22ff      	movs	r2, #255	; 0xff
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	4252      	negs	r2, r2
 800589c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800589e:	2517      	movs	r5, #23
 80058a0:	197c      	adds	r4, r7, r5
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2100      	movs	r1, #0
 80058a6:	0018      	movs	r0, r3
 80058a8:	f7ff fbf5 	bl	8005096 <dir_next>
 80058ac:	0003      	movs	r3, r0
 80058ae:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80058b0:	197b      	adds	r3, r7, r5
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d100      	bne.n	80058ba <dir_find+0x1dc>
 80058b8:	e735      	b.n	8005726 <dir_find+0x48>
 80058ba:	e004      	b.n	80058c6 <dir_find+0x1e8>
		if (res != FR_OK) break;
 80058bc:	46c0      	nop			; (mov r8, r8)
 80058be:	e002      	b.n	80058c6 <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	e000      	b.n	80058c6 <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80058c4:	46c0      	nop			; (mov r8, r8)

	return res;
 80058c6:	2317      	movs	r3, #23
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	781b      	ldrb	r3, [r3, #0]
}
 80058cc:	0018      	movs	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b006      	add	sp, #24
 80058d2:	bdb0      	pop	{r4, r5, r7, pc}

080058d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80058d4:	b5b0      	push	{r4, r5, r7, lr}
 80058d6:	b08c      	sub	sp, #48	; 0x30
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	222f      	movs	r2, #47	; 0x2f
 80058e6:	5c9b      	ldrb	r3, [r3, r2]
 80058e8:	001a      	movs	r2, r3
 80058ea:	23a0      	movs	r3, #160	; 0xa0
 80058ec:	4013      	ands	r3, r2
 80058ee:	d001      	beq.n	80058f4 <dir_register+0x20>
 80058f0:	2306      	movs	r3, #6
 80058f2:	e0fb      	b.n	8005aec <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80058f4:	2300      	movs	r3, #0
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
 80058f8:	e002      	b.n	8005900 <dir_register+0x2c>
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	3301      	adds	r3, #1
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	18d3      	adds	r3, r2, r3
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f4      	bne.n	80058fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3324      	adds	r3, #36	; 0x24
 8005914:	0019      	movs	r1, r3
 8005916:	240c      	movs	r4, #12
 8005918:	193b      	adds	r3, r7, r4
 800591a:	220c      	movs	r2, #12
 800591c:	0018      	movs	r0, r3
 800591e:	f7fe fcd9 	bl	80042d4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005922:	193b      	adds	r3, r7, r4
 8005924:	7adb      	ldrb	r3, [r3, #11]
 8005926:	001a      	movs	r2, r3
 8005928:	2301      	movs	r3, #1
 800592a:	4013      	ands	r3, r2
 800592c:	d037      	beq.n	800599e <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	222f      	movs	r2, #47	; 0x2f
 8005932:	2140      	movs	r1, #64	; 0x40
 8005934:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 8005936:	2301      	movs	r3, #1
 8005938:	62bb      	str	r3, [r7, #40]	; 0x28
 800593a:	e018      	b.n	800596e <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3324      	adds	r3, #36	; 0x24
 8005940:	0018      	movs	r0, r3
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	210c      	movs	r1, #12
 800594a:	1879      	adds	r1, r7, r1
 800594c:	f7ff fe0e 	bl	800556c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005950:	252f      	movs	r5, #47	; 0x2f
 8005952:	197c      	adds	r4, r7, r5
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	0018      	movs	r0, r3
 8005958:	f7ff fec1 	bl	80056de <dir_find>
 800595c:	0003      	movs	r3, r0
 800595e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005960:	197b      	adds	r3, r7, r5
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d106      	bne.n	8005976 <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	3301      	adds	r3, #1
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	2b63      	cmp	r3, #99	; 0x63
 8005972:	d9e3      	bls.n	800593c <dir_register+0x68>
 8005974:	e000      	b.n	8005978 <dir_register+0xa4>
			if (res != FR_OK) break;
 8005976:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	2b64      	cmp	r3, #100	; 0x64
 800597c:	d101      	bne.n	8005982 <dir_register+0xae>
 800597e:	2307      	movs	r3, #7
 8005980:	e0b4      	b.n	8005aec <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005982:	222f      	movs	r2, #47	; 0x2f
 8005984:	18bb      	adds	r3, r7, r2
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b04      	cmp	r3, #4
 800598a:	d002      	beq.n	8005992 <dir_register+0xbe>
 800598c:	18bb      	adds	r3, r7, r2
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	e0ac      	b.n	8005aec <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005992:	230c      	movs	r3, #12
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	7ad9      	ldrb	r1, [r3, #11]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	222f      	movs	r2, #47	; 0x2f
 800599c:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800599e:	230c      	movs	r3, #12
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	7adb      	ldrb	r3, [r3, #11]
 80059a4:	001a      	movs	r2, r3
 80059a6:	2302      	movs	r3, #2
 80059a8:	4013      	ands	r3, r2
 80059aa:	d008      	beq.n	80059be <dir_register+0xea>
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	330c      	adds	r3, #12
 80059b0:	210d      	movs	r1, #13
 80059b2:	0018      	movs	r0, r3
 80059b4:	f7fa fbb2 	bl	800011c <__udivsi3>
 80059b8:	0003      	movs	r3, r0
 80059ba:	3301      	adds	r3, #1
 80059bc:	e000      	b.n	80059c0 <dir_register+0xec>
 80059be:	2301      	movs	r3, #1
 80059c0:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80059c2:	252f      	movs	r5, #47	; 0x2f
 80059c4:	197c      	adds	r4, r7, r5
 80059c6:	6a3a      	ldr	r2, [r7, #32]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	0011      	movs	r1, r2
 80059cc:	0018      	movs	r0, r3
 80059ce:	f7ff fc3e 	bl	800524e <dir_alloc>
 80059d2:	0003      	movs	r3, r0
 80059d4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80059d6:	0029      	movs	r1, r5
 80059d8:	187b      	adds	r3, r7, r1
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d153      	bne.n	8005a88 <dir_register+0x1b4>
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	623b      	str	r3, [r7, #32]
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d04d      	beq.n	8005a88 <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	015b      	lsls	r3, r3, #5
 80059f4:	1ad2      	subs	r2, r2, r3
 80059f6:	000d      	movs	r5, r1
 80059f8:	187c      	adds	r4, r7, r1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	0011      	movs	r1, r2
 80059fe:	0018      	movs	r0, r3
 8005a00:	f7ff fabd 	bl	8004f7e <dir_sdi>
 8005a04:	0003      	movs	r3, r0
 8005a06:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8005a08:	197b      	adds	r3, r7, r5
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d13b      	bne.n	8005a88 <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3324      	adds	r3, #36	; 0x24
 8005a14:	221b      	movs	r2, #27
 8005a16:	18bc      	adds	r4, r7, r2
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f7ff fe3b 	bl	8005694 <sum_sfn>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69da      	ldr	r2, [r3, #28]
 8005a26:	252f      	movs	r5, #47	; 0x2f
 8005a28:	197c      	adds	r4, r7, r5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	0011      	movs	r1, r2
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f7fe fe78 	bl	8004724 <move_window>
 8005a34:	0003      	movs	r3, r0
 8005a36:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 8005a38:	002c      	movs	r4, r5
 8005a3a:	193b      	adds	r3, r7, r4
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d121      	bne.n	8005a86 <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	6918      	ldr	r0, [r3, #16]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a19      	ldr	r1, [r3, #32]
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	231b      	movs	r3, #27
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f7ff fd12 	bl	800547c <put_lfn>
				fs->wflag = 1;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005a5e:	0025      	movs	r5, r4
 8005a60:	193c      	adds	r4, r7, r4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2100      	movs	r1, #0
 8005a66:	0018      	movs	r0, r3
 8005a68:	f7ff fb15 	bl	8005096 <dir_next>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 8005a70:	197b      	adds	r3, r7, r5
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d107      	bne.n	8005a88 <dir_register+0x1b4>
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	623b      	str	r3, [r7, #32]
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1ce      	bne.n	8005a22 <dir_register+0x14e>
 8005a84:	e000      	b.n	8005a88 <dir_register+0x1b4>
				if (res != FR_OK) break;
 8005a86:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005a88:	252f      	movs	r5, #47	; 0x2f
 8005a8a:	197b      	adds	r3, r7, r5
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d129      	bne.n	8005ae6 <dir_register+0x212>
		res = move_window(fs, dp->sect);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	197c      	adds	r4, r7, r5
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	0011      	movs	r1, r2
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	f7fe fe41 	bl	8004724 <move_window>
 8005aa2:	0003      	movs	r3, r0
 8005aa4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8005aa6:	197b      	adds	r3, r7, r5
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11b      	bne.n	8005ae6 <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f7fe fc2b 	bl	8004312 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a18      	ldr	r0, [r3, #32]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3324      	adds	r3, #36	; 0x24
 8005ac4:	220b      	movs	r2, #11
 8005ac6:	0019      	movs	r1, r3
 8005ac8:	f7fe fc04 	bl	80042d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	222f      	movs	r2, #47	; 0x2f
 8005ad0:	5c9a      	ldrb	r2, [r3, r2]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	2118      	movs	r1, #24
 8005ada:	400a      	ands	r2, r1
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005ae6:	232f      	movs	r3, #47	; 0x2f
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	781b      	ldrb	r3, [r3, #0]
}
 8005aec:	0018      	movs	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b00c      	add	sp, #48	; 0x30
 8005af2:	bdb0      	pop	{r4, r5, r7, pc}

08005af4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005af4:	b5b0      	push	{r4, r5, r7, lr}
 8005af6:	b08a      	sub	sp, #40	; 0x28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	61ba      	str	r2, [r7, #24]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	18d3      	adds	r3, r2, r3
 8005b1e:	781a      	ldrb	r2, [r3, #0]
 8005b20:	2124      	movs	r1, #36	; 0x24
 8005b22:	187b      	adds	r3, r7, r1
 8005b24:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 8005b26:	000a      	movs	r2, r1
 8005b28:	18bb      	adds	r3, r7, r2
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	2b1f      	cmp	r3, #31
 8005b2e:	d94e      	bls.n	8005bce <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005b30:	18bb      	adds	r3, r7, r2
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	2b2f      	cmp	r3, #47	; 0x2f
 8005b36:	d007      	beq.n	8005b48 <create_name+0x54>
 8005b38:	18bb      	adds	r3, r7, r2
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	2b5c      	cmp	r3, #92	; 0x5c
 8005b3e:	d110      	bne.n	8005b62 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005b40:	e002      	b.n	8005b48 <create_name+0x54>
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	3301      	adds	r3, #1
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	18d3      	adds	r3, r2, r3
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b2f      	cmp	r3, #47	; 0x2f
 8005b52:	d0f6      	beq.n	8005b42 <create_name+0x4e>
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	18d3      	adds	r3, r2, r3
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b5c      	cmp	r3, #92	; 0x5c
 8005b5e:	d0f0      	beq.n	8005b42 <create_name+0x4e>
			break;
 8005b60:	e036      	b.n	8005bd0 <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2bfe      	cmp	r3, #254	; 0xfe
 8005b66:	d901      	bls.n	8005b6c <create_name+0x78>
 8005b68:	2306      	movs	r3, #6
 8005b6a:	e1c2      	b.n	8005ef2 <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005b6c:	2524      	movs	r5, #36	; 0x24
 8005b6e:	197b      	adds	r3, r7, r5
 8005b70:	197a      	adds	r2, r7, r5
 8005b72:	8812      	ldrh	r2, [r2, #0]
 8005b74:	21ff      	movs	r1, #255	; 0xff
 8005b76:	400a      	ands	r2, r1
 8005b78:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005b7a:	197c      	adds	r4, r7, r5
 8005b7c:	197b      	adds	r3, r7, r5
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	2101      	movs	r1, #1
 8005b82:	0018      	movs	r0, r3
 8005b84:	f001 fdd4 	bl	8007730 <ff_convert>
 8005b88:	0003      	movs	r3, r0
 8005b8a:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005b8c:	197b      	adds	r3, r7, r5
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <create_name+0xa4>
 8005b94:	2306      	movs	r3, #6
 8005b96:	e1ac      	b.n	8005ef2 <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005b98:	2224      	movs	r2, #36	; 0x24
 8005b9a:	18bb      	adds	r3, r7, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba0:	d80a      	bhi.n	8005bb8 <create_name+0xc4>
 8005ba2:	18bb      	adds	r3, r7, r2
 8005ba4:	881a      	ldrh	r2, [r3, #0]
 8005ba6:	4ba7      	ldr	r3, [pc, #668]	; (8005e44 <create_name+0x350>)
 8005ba8:	0011      	movs	r1, r2
 8005baa:	0018      	movs	r0, r3
 8005bac:	f7fe fbef 	bl	800438e <chk_chr>
 8005bb0:	1e03      	subs	r3, r0, #0
 8005bb2:	d001      	beq.n	8005bb8 <create_name+0xc4>
 8005bb4:	2306      	movs	r3, #6
 8005bb6:	e19c      	b.n	8005ef2 <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	617a      	str	r2, [r7, #20]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	18d3      	adds	r3, r2, r3
 8005bc4:	2224      	movs	r2, #36	; 0x24
 8005bc6:	18ba      	adds	r2, r7, r2
 8005bc8:	8812      	ldrh	r2, [r2, #0]
 8005bca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005bcc:	e7a2      	b.n	8005b14 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005bce:	46c0      	nop			; (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	18d2      	adds	r2, r2, r3
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005bda:	2324      	movs	r3, #36	; 0x24
 8005bdc:	18fb      	adds	r3, r7, r3
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	2b1f      	cmp	r3, #31
 8005be2:	d801      	bhi.n	8005be8 <create_name+0xf4>
 8005be4:	2204      	movs	r2, #4
 8005be6:	e000      	b.n	8005bea <create_name+0xf6>
 8005be8:	2200      	movs	r2, #0
 8005bea:	2327      	movs	r3, #39	; 0x27
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005bf0:	e016      	b.n	8005c20 <create_name+0x12c>
		w = lfn[di - 1];
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	4a94      	ldr	r2, [pc, #592]	; (8005e48 <create_name+0x354>)
 8005bf6:	4694      	mov	ip, r2
 8005bf8:	4463      	add	r3, ip
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	18d2      	adds	r2, r2, r3
 8005c00:	2124      	movs	r1, #36	; 0x24
 8005c02:	187b      	adds	r3, r7, r1
 8005c04:	8812      	ldrh	r2, [r2, #0]
 8005c06:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8005c08:	000a      	movs	r2, r1
 8005c0a:	18bb      	adds	r3, r7, r2
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d003      	beq.n	8005c1a <create_name+0x126>
 8005c12:	18bb      	adds	r3, r7, r2
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	2b2e      	cmp	r3, #46	; 0x2e
 8005c18:	d106      	bne.n	8005c28 <create_name+0x134>
		di--;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e5      	bne.n	8005bf2 <create_name+0xfe>
 8005c26:	e000      	b.n	8005c2a <create_name+0x136>
		if (w != ' ' && w != '.') break;
 8005c28:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	18d3      	adds	r3, r2, r3
 8005c32:	2200      	movs	r2, #0
 8005c34:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <create_name+0x14c>
 8005c3c:	2306      	movs	r3, #6
 8005c3e:	e158      	b.n	8005ef2 <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3324      	adds	r3, #36	; 0x24
 8005c44:	220b      	movs	r2, #11
 8005c46:	2120      	movs	r1, #32
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7fe fb62 	bl	8004312 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	e002      	b.n	8005c5a <create_name+0x166>
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	3301      	adds	r3, #1
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	18d3      	adds	r3, r2, r3
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d0f5      	beq.n	8005c54 <create_name+0x160>
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	18d3      	adds	r3, r2, r3
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	2b2e      	cmp	r3, #46	; 0x2e
 8005c74:	d0ee      	beq.n	8005c54 <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <create_name+0x19e>
 8005c7c:	2227      	movs	r2, #39	; 0x27
 8005c7e:	18bb      	adds	r3, r7, r2
 8005c80:	18ba      	adds	r2, r7, r2
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	2103      	movs	r1, #3
 8005c86:	430a      	orrs	r2, r1
 8005c88:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005c8a:	e002      	b.n	8005c92 <create_name+0x19e>
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <create_name+0x1b8>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	4a6b      	ldr	r2, [pc, #428]	; (8005e48 <create_name+0x354>)
 8005c9c:	4694      	mov	ip, r2
 8005c9e:	4463      	add	r3, ip
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	18d3      	adds	r3, r2, r3
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	2b2e      	cmp	r3, #46	; 0x2e
 8005caa:	d1ef      	bne.n	8005c8c <create_name+0x198>

	i = b = 0; ni = 8;
 8005cac:	2326      	movs	r3, #38	; 0x26
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	623b      	str	r3, [r7, #32]
 8005cb8:	2308      	movs	r3, #8
 8005cba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	61ba      	str	r2, [r7, #24]
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	18d2      	adds	r2, r2, r3
 8005cc8:	2124      	movs	r1, #36	; 0x24
 8005cca:	187b      	adds	r3, r7, r1
 8005ccc:	8812      	ldrh	r2, [r2, #0]
 8005cce:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 8005cd0:	000a      	movs	r2, r1
 8005cd2:	18bb      	adds	r3, r7, r2
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d100      	bne.n	8005cdc <create_name+0x1e8>
 8005cda:	e0b1      	b.n	8005e40 <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005cdc:	18bb      	adds	r3, r7, r2
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d007      	beq.n	8005cf4 <create_name+0x200>
 8005ce4:	18bb      	adds	r3, r7, r2
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8005cea:	d10b      	bne.n	8005d04 <create_name+0x210>
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d007      	beq.n	8005d04 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 8005cf4:	2227      	movs	r2, #39	; 0x27
 8005cf6:	18bb      	adds	r3, r7, r2
 8005cf8:	18ba      	adds	r2, r7, r2
 8005cfa:	7812      	ldrb	r2, [r2, #0]
 8005cfc:	2103      	movs	r1, #3
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	e09c      	b.n	8005e3e <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005d04:	6a3a      	ldr	r2, [r7, #32]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d203      	bcs.n	8005d14 <create_name+0x220>
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d127      	bne.n	8005d64 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	2b0b      	cmp	r3, #11
 8005d18:	d107      	bne.n	8005d2a <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 8005d1a:	2227      	movs	r2, #39	; 0x27
 8005d1c:	18bb      	adds	r3, r7, r2
 8005d1e:	18ba      	adds	r2, r7, r2
 8005d20:	7812      	ldrb	r2, [r2, #0]
 8005d22:	2103      	movs	r1, #3
 8005d24:	430a      	orrs	r2, r1
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	e095      	b.n	8005e56 <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d006      	beq.n	8005d40 <create_name+0x24c>
 8005d32:	2227      	movs	r2, #39	; 0x27
 8005d34:	18bb      	adds	r3, r7, r2
 8005d36:	18ba      	adds	r2, r7, r2
 8005d38:	7812      	ldrb	r2, [r2, #0]
 8005d3a:	2103      	movs	r1, #3
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d900      	bls.n	8005d4a <create_name+0x256>
 8005d48:	e084      	b.n	8005e54 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	2308      	movs	r3, #8
 8005d50:	623b      	str	r3, [r7, #32]
 8005d52:	230b      	movs	r3, #11
 8005d54:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005d56:	2226      	movs	r2, #38	; 0x26
 8005d58:	18bb      	adds	r3, r7, r2
 8005d5a:	18ba      	adds	r2, r7, r2
 8005d5c:	7812      	ldrb	r2, [r2, #0]
 8005d5e:	0092      	lsls	r2, r2, #2
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	e06c      	b.n	8005e3e <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005d64:	2524      	movs	r5, #36	; 0x24
 8005d66:	197b      	adds	r3, r7, r5
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d6c:	d91a      	bls.n	8005da4 <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005d6e:	197c      	adds	r4, r7, r5
 8005d70:	197b      	adds	r3, r7, r5
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	2100      	movs	r1, #0
 8005d76:	0018      	movs	r0, r3
 8005d78:	f001 fcda 	bl	8007730 <ff_convert>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005d80:	197b      	adds	r3, r7, r5
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d006      	beq.n	8005d96 <create_name+0x2a2>
 8005d88:	197b      	adds	r3, r7, r5
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	3b80      	subs	r3, #128	; 0x80
 8005d8e:	4a2f      	ldr	r2, [pc, #188]	; (8005e4c <create_name+0x358>)
 8005d90:	5cd2      	ldrb	r2, [r2, r3]
 8005d92:	197b      	adds	r3, r7, r5
 8005d94:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005d96:	2227      	movs	r2, #39	; 0x27
 8005d98:	18bb      	adds	r3, r7, r2
 8005d9a:	18ba      	adds	r2, r7, r2
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	2102      	movs	r1, #2
 8005da0:	430a      	orrs	r2, r1
 8005da2:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005da4:	2224      	movs	r2, #36	; 0x24
 8005da6:	18bb      	adds	r3, r7, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <create_name+0x2cc>
 8005dae:	18bb      	adds	r3, r7, r2
 8005db0:	881a      	ldrh	r2, [r3, #0]
 8005db2:	4b27      	ldr	r3, [pc, #156]	; (8005e50 <create_name+0x35c>)
 8005db4:	0011      	movs	r1, r2
 8005db6:	0018      	movs	r0, r3
 8005db8:	f7fe fae9 	bl	800438e <chk_chr>
 8005dbc:	1e03      	subs	r3, r0, #0
 8005dbe:	d00b      	beq.n	8005dd8 <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005dc0:	2324      	movs	r3, #36	; 0x24
 8005dc2:	18fb      	adds	r3, r7, r3
 8005dc4:	225f      	movs	r2, #95	; 0x5f
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	2227      	movs	r2, #39	; 0x27
 8005dca:	18bb      	adds	r3, r7, r2
 8005dcc:	18ba      	adds	r2, r7, r2
 8005dce:	7812      	ldrb	r2, [r2, #0]
 8005dd0:	2103      	movs	r1, #3
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	e025      	b.n	8005e24 <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005dd8:	2224      	movs	r2, #36	; 0x24
 8005dda:	18bb      	adds	r3, r7, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d90b      	bls.n	8005dfa <create_name+0x306>
 8005de2:	18bb      	adds	r3, r7, r2
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	2b5a      	cmp	r3, #90	; 0x5a
 8005de8:	d807      	bhi.n	8005dfa <create_name+0x306>
					b |= 2;
 8005dea:	2226      	movs	r2, #38	; 0x26
 8005dec:	18bb      	adds	r3, r7, r2
 8005dee:	18ba      	adds	r2, r7, r2
 8005df0:	7812      	ldrb	r2, [r2, #0]
 8005df2:	2102      	movs	r1, #2
 8005df4:	430a      	orrs	r2, r1
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	e014      	b.n	8005e24 <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005dfa:	2024      	movs	r0, #36	; 0x24
 8005dfc:	183b      	adds	r3, r7, r0
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	2b60      	cmp	r3, #96	; 0x60
 8005e02:	d90f      	bls.n	8005e24 <create_name+0x330>
 8005e04:	183b      	adds	r3, r7, r0
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	2b7a      	cmp	r3, #122	; 0x7a
 8005e0a:	d80b      	bhi.n	8005e24 <create_name+0x330>
						b |= 1; w -= 0x20;
 8005e0c:	2226      	movs	r2, #38	; 0x26
 8005e0e:	18bb      	adds	r3, r7, r2
 8005e10:	18ba      	adds	r2, r7, r2
 8005e12:	7812      	ldrb	r2, [r2, #0]
 8005e14:	2101      	movs	r1, #1
 8005e16:	430a      	orrs	r2, r1
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	183b      	adds	r3, r7, r0
 8005e1c:	183a      	adds	r2, r7, r0
 8005e1e:	8812      	ldrh	r2, [r2, #0]
 8005e20:	3a20      	subs	r2, #32
 8005e22:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	623a      	str	r2, [r7, #32]
 8005e2a:	2224      	movs	r2, #36	; 0x24
 8005e2c:	18ba      	adds	r2, r7, r2
 8005e2e:	8812      	ldrh	r2, [r2, #0]
 8005e30:	b2d0      	uxtb	r0, r2
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	2124      	movs	r1, #36	; 0x24
 8005e36:	18d3      	adds	r3, r2, r3
 8005e38:	185b      	adds	r3, r3, r1
 8005e3a:	1c02      	adds	r2, r0, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8005e3e:	e73d      	b.n	8005cbc <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 8005e40:	46c0      	nop			; (mov r8, r8)
 8005e42:	e008      	b.n	8005e56 <create_name+0x362>
 8005e44:	08008a18 	.word	0x08008a18
 8005e48:	7fffffff 	.word	0x7fffffff
 8005e4c:	08008ab4 	.word	0x08008ab4
 8005e50:	08008a24 	.word	0x08008a24
			if (si > di) break;			/* No extension */
 8005e54:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2224      	movs	r2, #36	; 0x24
 8005e5a:	5c9b      	ldrb	r3, [r3, r2]
 8005e5c:	2be5      	cmp	r3, #229	; 0xe5
 8005e5e:	d103      	bne.n	8005e68 <create_name+0x374>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2224      	movs	r2, #36	; 0x24
 8005e64:	2105      	movs	r1, #5
 8005e66:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d105      	bne.n	8005e7a <create_name+0x386>
 8005e6e:	2226      	movs	r2, #38	; 0x26
 8005e70:	18bb      	adds	r3, r7, r2
 8005e72:	18ba      	adds	r2, r7, r2
 8005e74:	7812      	ldrb	r2, [r2, #0]
 8005e76:	0092      	lsls	r2, r2, #2
 8005e78:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005e7a:	2126      	movs	r1, #38	; 0x26
 8005e7c:	187b      	adds	r3, r7, r1
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	220c      	movs	r2, #12
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b0c      	cmp	r3, #12
 8005e86:	d005      	beq.n	8005e94 <create_name+0x3a0>
 8005e88:	187b      	adds	r3, r7, r1
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2203      	movs	r2, #3
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d106      	bne.n	8005ea2 <create_name+0x3ae>
 8005e94:	2227      	movs	r2, #39	; 0x27
 8005e96:	18bb      	adds	r3, r7, r2
 8005e98:	18ba      	adds	r2, r7, r2
 8005e9a:	7812      	ldrb	r2, [r2, #0]
 8005e9c:	2102      	movs	r1, #2
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005ea2:	2127      	movs	r1, #39	; 0x27
 8005ea4:	187b      	adds	r3, r7, r1
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d11a      	bne.n	8005ee4 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005eae:	2326      	movs	r3, #38	; 0x26
 8005eb0:	18fb      	adds	r3, r7, r3
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2203      	movs	r2, #3
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d105      	bne.n	8005ec8 <create_name+0x3d4>
 8005ebc:	187b      	adds	r3, r7, r1
 8005ebe:	187a      	adds	r2, r7, r1
 8005ec0:	7812      	ldrb	r2, [r2, #0]
 8005ec2:	2110      	movs	r1, #16
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005ec8:	2326      	movs	r3, #38	; 0x26
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	220c      	movs	r2, #12
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d106      	bne.n	8005ee4 <create_name+0x3f0>
 8005ed6:	2227      	movs	r2, #39	; 0x27
 8005ed8:	18bb      	adds	r3, r7, r2
 8005eda:	18ba      	adds	r2, r7, r2
 8005edc:	7812      	ldrb	r2, [r2, #0]
 8005ede:	2108      	movs	r1, #8
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2227      	movs	r2, #39	; 0x27
 8005ee8:	18ba      	adds	r2, r7, r2
 8005eea:	212f      	movs	r1, #47	; 0x2f
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 8005ef0:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b00a      	add	sp, #40	; 0x28
 8005ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8005efa:	46c0      	nop			; (mov r8, r8)

08005efc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005efc:	b5b0      	push	{r4, r5, r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005f10:	e002      	b.n	8005f18 <follow_path+0x1c>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	3301      	adds	r3, #1
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b2f      	cmp	r3, #47	; 0x2f
 8005f1e:	d0f8      	beq.n	8005f12 <follow_path+0x16>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b5c      	cmp	r3, #92	; 0x5c
 8005f26:	d0f4      	beq.n	8005f12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b1f      	cmp	r3, #31
 8005f34:	d80d      	bhi.n	8005f52 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	222f      	movs	r2, #47	; 0x2f
 8005f3a:	2180      	movs	r1, #128	; 0x80
 8005f3c:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 8005f3e:	2317      	movs	r3, #23
 8005f40:	18fc      	adds	r4, r7, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2100      	movs	r1, #0
 8005f46:	0018      	movs	r0, r3
 8005f48:	f7ff f819 	bl	8004f7e <dir_sdi>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	7023      	strb	r3, [r4, #0]
 8005f50:	e057      	b.n	8006002 <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005f52:	2517      	movs	r5, #23
 8005f54:	197c      	adds	r4, r7, r5
 8005f56:	003a      	movs	r2, r7
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	0011      	movs	r1, r2
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f7ff fdc9 	bl	8005af4 <create_name>
 8005f62:	0003      	movs	r3, r0
 8005f64:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005f66:	197b      	adds	r3, r7, r5
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d144      	bne.n	8005ff8 <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005f6e:	197c      	adds	r4, r7, r5
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	0018      	movs	r0, r3
 8005f74:	f7ff fbb3 	bl	80056de <dir_find>
 8005f78:	0003      	movs	r3, r0
 8005f7a:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8005f7c:	200b      	movs	r0, #11
 8005f7e:	183b      	adds	r3, r7, r0
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	212f      	movs	r1, #47	; 0x2f
 8005f84:	5c52      	ldrb	r2, [r2, r1]
 8005f86:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8005f88:	197b      	adds	r3, r7, r5
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00c      	beq.n	8005faa <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005f90:	197b      	adds	r3, r7, r5
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d131      	bne.n	8005ffc <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005f98:	183b      	adds	r3, r7, r0
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d12c      	bne.n	8005ffc <follow_path+0x100>
 8005fa2:	197b      	adds	r3, r7, r5
 8005fa4:	2205      	movs	r2, #5
 8005fa6:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8005fa8:	e028      	b.n	8005ffc <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005faa:	230b      	movs	r3, #11
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2204      	movs	r2, #4
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d124      	bne.n	8006000 <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	799b      	ldrb	r3, [r3, #6]
 8005fba:	001a      	movs	r2, r3
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d104      	bne.n	8005fcc <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8005fc2:	2317      	movs	r3, #23
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	2205      	movs	r2, #5
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	e01a      	b.n	8006002 <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3338      	adds	r3, #56	; 0x38
 8005fd0:	001c      	movs	r4, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695a      	ldr	r2, [r3, #20]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	899b      	ldrh	r3, [r3, #12]
 8005fda:	0019      	movs	r1, r3
 8005fdc:	0010      	movs	r0, r2
 8005fde:	f7fa f923 	bl	8000228 <__aeabi_uidivmod>
 8005fe2:	000b      	movs	r3, r1
 8005fe4:	18e2      	adds	r2, r4, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	0011      	movs	r1, r2
 8005fea:	0018      	movs	r0, r3
 8005fec:	f7ff f987 	bl	80052fe <ld_clust>
 8005ff0:	0002      	movs	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ff6:	e7ac      	b.n	8005f52 <follow_path+0x56>
			if (res != FR_OK) break;
 8005ff8:	46c0      	nop			; (mov r8, r8)
 8005ffa:	e002      	b.n	8006002 <follow_path+0x106>
				break;
 8005ffc:	46c0      	nop			; (mov r8, r8)
 8005ffe:	e000      	b.n	8006002 <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006000:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 8006002:	2317      	movs	r3, #23
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	781b      	ldrb	r3, [r3, #0]
}
 8006008:	0018      	movs	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	b006      	add	sp, #24
 800600e:	bdb0      	pop	{r4, r5, r7, pc}

08006010 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006018:	2301      	movs	r3, #1
 800601a:	425b      	negs	r3, r3
 800601c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d031      	beq.n	800608a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e002      	b.n	8006034 <get_ldnumber+0x24>
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	3301      	adds	r3, #1
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b1f      	cmp	r3, #31
 800603a:	d903      	bls.n	8006044 <get_ldnumber+0x34>
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b3a      	cmp	r3, #58	; 0x3a
 8006042:	d1f4      	bne.n	800602e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b3a      	cmp	r3, #58	; 0x3a
 800604a:	d11c      	bne.n	8006086 <get_ldnumber+0x76>
			tp = *path;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	60fa      	str	r2, [r7, #12]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	3b30      	subs	r3, #48	; 0x30
 800605c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b09      	cmp	r3, #9
 8006062:	d80e      	bhi.n	8006082 <get_ldnumber+0x72>
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	429a      	cmp	r2, r3
 800606a:	d10a      	bne.n	8006082 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d107      	bne.n	8006082 <get_ldnumber+0x72>
					vol = (int)i;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	3301      	adds	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	e002      	b.n	800608c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006086:	2300      	movs	r3, #0
 8006088:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800608a:	693b      	ldr	r3, [r7, #16]
}
 800608c:	0018      	movs	r0, r3
 800608e:	46bd      	mov	sp, r7
 8006090:	b006      	add	sp, #24
 8006092:	bd80      	pop	{r7, pc}

08006094 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	70da      	strb	r2, [r3, #3]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	4252      	negs	r2, r2
 80060aa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	0011      	movs	r1, r2
 80060b2:	0018      	movs	r0, r3
 80060b4:	f7fe fb36 	bl	8004724 <move_window>
 80060b8:	1e03      	subs	r3, r0, #0
 80060ba:	d001      	beq.n	80060c0 <check_fs+0x2c>
 80060bc:	2304      	movs	r3, #4
 80060be:	e037      	b.n	8006130 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3338      	adds	r3, #56	; 0x38
 80060c4:	33ff      	adds	r3, #255	; 0xff
 80060c6:	33ff      	adds	r3, #255	; 0xff
 80060c8:	0018      	movs	r0, r3
 80060ca:	f7fe f87f 	bl	80041cc <ld_word>
 80060ce:	0003      	movs	r3, r0
 80060d0:	001a      	movs	r2, r3
 80060d2:	4b19      	ldr	r3, [pc, #100]	; (8006138 <check_fs+0xa4>)
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d001      	beq.n	80060dc <check_fs+0x48>
 80060d8:	2303      	movs	r3, #3
 80060da:	e029      	b.n	8006130 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2238      	movs	r2, #56	; 0x38
 80060e0:	5c9b      	ldrb	r3, [r3, r2]
 80060e2:	2be9      	cmp	r3, #233	; 0xe9
 80060e4:	d009      	beq.n	80060fa <check_fs+0x66>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2238      	movs	r2, #56	; 0x38
 80060ea:	5c9b      	ldrb	r3, [r3, r2]
 80060ec:	2beb      	cmp	r3, #235	; 0xeb
 80060ee:	d11e      	bne.n	800612e <check_fs+0x9a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	223a      	movs	r2, #58	; 0x3a
 80060f4:	5c9b      	ldrb	r3, [r3, r2]
 80060f6:	2b90      	cmp	r3, #144	; 0x90
 80060f8:	d119      	bne.n	800612e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3338      	adds	r3, #56	; 0x38
 80060fe:	3336      	adds	r3, #54	; 0x36
 8006100:	0018      	movs	r0, r3
 8006102:	f7fe f87e 	bl	8004202 <ld_dword>
 8006106:	0003      	movs	r3, r0
 8006108:	021b      	lsls	r3, r3, #8
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	4a0b      	ldr	r2, [pc, #44]	; (800613c <check_fs+0xa8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d101      	bne.n	8006116 <check_fs+0x82>
 8006112:	2300      	movs	r3, #0
 8006114:	e00c      	b.n	8006130 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3338      	adds	r3, #56	; 0x38
 800611a:	3352      	adds	r3, #82	; 0x52
 800611c:	0018      	movs	r0, r3
 800611e:	f7fe f870 	bl	8004202 <ld_dword>
 8006122:	0003      	movs	r3, r0
 8006124:	4a06      	ldr	r2, [pc, #24]	; (8006140 <check_fs+0xac>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d101      	bne.n	800612e <check_fs+0x9a>
 800612a:	2300      	movs	r3, #0
 800612c:	e000      	b.n	8006130 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800612e:	2302      	movs	r3, #2
}
 8006130:	0018      	movs	r0, r3
 8006132:	46bd      	mov	sp, r7
 8006134:	b002      	add	sp, #8
 8006136:	bd80      	pop	{r7, pc}
 8006138:	0000aa55 	.word	0x0000aa55
 800613c:	00544146 	.word	0x00544146
 8006140:	33544146 	.word	0x33544146

08006144 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006144:	b5b0      	push	{r4, r5, r7, lr}
 8006146:	b096      	sub	sp, #88	; 0x58
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	1dfb      	adds	r3, r7, #7
 8006150:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	0018      	movs	r0, r3
 800615c:	f7ff ff58 	bl	8006010 <get_ldnumber>
 8006160:	0003      	movs	r3, r0
 8006162:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006166:	2b00      	cmp	r3, #0
 8006168:	da01      	bge.n	800616e <find_volume+0x2a>
 800616a:	230b      	movs	r3, #11
 800616c:	e283      	b.n	8006676 <find_volume+0x532>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800616e:	4bc2      	ldr	r3, [pc, #776]	; (8006478 <find_volume+0x334>)
 8006170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006172:	0092      	lsls	r2, r2, #2
 8006174:	58d3      	ldr	r3, [r2, r3]
 8006176:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <find_volume+0x3e>
 800617e:	230c      	movs	r3, #12
 8006180:	e279      	b.n	8006676 <find_volume+0x532>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006186:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006188:	1dfb      	adds	r3, r7, #7
 800618a:	1dfa      	adds	r2, r7, #7
 800618c:	7812      	ldrb	r2, [r2, #0]
 800618e:	2101      	movs	r1, #1
 8006190:	438a      	bics	r2, r1
 8006192:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01b      	beq.n	80061d4 <find_volume+0x90>
		stat = disk_status(fs->drv);
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	2537      	movs	r5, #55	; 0x37
 80061a2:	197c      	adds	r4, r7, r5
 80061a4:	0018      	movs	r0, r3
 80061a6:	f7fd ff47 	bl	8004038 <disk_status>
 80061aa:	0003      	movs	r3, r0
 80061ac:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80061ae:	0029      	movs	r1, r5
 80061b0:	187b      	adds	r3, r7, r1
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2201      	movs	r2, #1
 80061b6:	4013      	ands	r3, r2
 80061b8:	d10c      	bne.n	80061d4 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80061ba:	1dfb      	adds	r3, r7, #7
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d006      	beq.n	80061d0 <find_volume+0x8c>
 80061c2:	187b      	adds	r3, r7, r1
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2204      	movs	r2, #4
 80061c8:	4013      	ands	r3, r2
 80061ca:	d001      	beq.n	80061d0 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 80061cc:	230a      	movs	r3, #10
 80061ce:	e252      	b.n	8006676 <find_volume+0x532>
			}
			return FR_OK;				/* The file system object is valid */
 80061d0:	2300      	movs	r3, #0
 80061d2:	e250      	b.n	8006676 <find_volume+0x532>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	2200      	movs	r2, #0
 80061d8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80061da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2537      	movs	r5, #55	; 0x37
 80061e8:	197c      	adds	r4, r7, r5
 80061ea:	0018      	movs	r0, r3
 80061ec:	f7fd ff46 	bl	800407c <disk_initialize>
 80061f0:	0003      	movs	r3, r0
 80061f2:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80061f4:	197b      	adds	r3, r7, r5
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2201      	movs	r2, #1
 80061fa:	4013      	ands	r3, r2
 80061fc:	d001      	beq.n	8006202 <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80061fe:	2303      	movs	r3, #3
 8006200:	e239      	b.n	8006676 <find_volume+0x532>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006202:	1dfb      	adds	r3, r7, #7
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d007      	beq.n	800621a <find_volume+0xd6>
 800620a:	2337      	movs	r3, #55	; 0x37
 800620c:	18fb      	adds	r3, r7, r3
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2204      	movs	r2, #4
 8006212:	4013      	ands	r3, r2
 8006214:	d001      	beq.n	800621a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8006216:	230a      	movs	r3, #10
 8006218:	e22d      	b.n	8006676 <find_volume+0x532>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621c:	7858      	ldrb	r0, [r3, #1]
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	330c      	adds	r3, #12
 8006222:	001a      	movs	r2, r3
 8006224:	2102      	movs	r1, #2
 8006226:	f7fd ffa9 	bl	800417c <disk_ioctl>
 800622a:	1e03      	subs	r3, r0, #0
 800622c:	d001      	beq.n	8006232 <find_volume+0xee>
 800622e:	2301      	movs	r3, #1
 8006230:	e221      	b.n	8006676 <find_volume+0x532>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	899a      	ldrh	r2, [r3, #12]
 8006236:	2380      	movs	r3, #128	; 0x80
 8006238:	015b      	lsls	r3, r3, #5
 800623a:	429a      	cmp	r2, r3
 800623c:	d80d      	bhi.n	800625a <find_volume+0x116>
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	899a      	ldrh	r2, [r3, #12]
 8006242:	2380      	movs	r3, #128	; 0x80
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	429a      	cmp	r2, r3
 8006248:	d307      	bcc.n	800625a <find_volume+0x116>
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	899b      	ldrh	r3, [r3, #12]
 800624e:	001a      	movs	r2, r3
 8006250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006252:	899b      	ldrh	r3, [r3, #12]
 8006254:	3b01      	subs	r3, #1
 8006256:	4013      	ands	r3, r2
 8006258:	d001      	beq.n	800625e <find_volume+0x11a>
 800625a:	2301      	movs	r3, #1
 800625c:	e20b      	b.n	8006676 <find_volume+0x532>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006262:	2557      	movs	r5, #87	; 0x57
 8006264:	197c      	adds	r4, r7, r5
 8006266:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	0011      	movs	r1, r2
 800626c:	0018      	movs	r0, r3
 800626e:	f7ff ff11 	bl	8006094 <check_fs>
 8006272:	0003      	movs	r3, r0
 8006274:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006276:	197b      	adds	r3, r7, r5
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d14b      	bne.n	8006316 <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800627e:	2300      	movs	r3, #0
 8006280:	643b      	str	r3, [r7, #64]	; 0x40
 8006282:	e01d      	b.n	80062c0 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006286:	3338      	adds	r3, #56	; 0x38
 8006288:	001a      	movs	r2, r3
 800628a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	33bf      	adds	r3, #191	; 0xbf
 8006290:	33ff      	adds	r3, #255	; 0xff
 8006292:	18d3      	adds	r3, r2, r3
 8006294:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	3304      	adds	r3, #4
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d006      	beq.n	80062ae <find_volume+0x16a>
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	3308      	adds	r3, #8
 80062a4:	0018      	movs	r0, r3
 80062a6:	f7fd ffac 	bl	8004202 <ld_dword>
 80062aa:	0003      	movs	r3, r0
 80062ac:	e000      	b.n	80062b0 <find_volume+0x16c>
 80062ae:	2300      	movs	r3, #0
 80062b0:	2214      	movs	r2, #20
 80062b2:	18ba      	adds	r2, r7, r2
 80062b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062b6:	0089      	lsls	r1, r1, #2
 80062b8:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80062ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062bc:	3301      	adds	r3, #1
 80062be:	643b      	str	r3, [r7, #64]	; 0x40
 80062c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d9de      	bls.n	8006284 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80062c6:	2300      	movs	r3, #0
 80062c8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80062ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <find_volume+0x192>
 80062d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d2:	3b01      	subs	r3, #1
 80062d4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80062d6:	2314      	movs	r3, #20
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062dc:	0092      	lsls	r2, r2, #2
 80062de:	58d3      	ldr	r3, [r2, r3]
 80062e0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80062e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d008      	beq.n	80062fa <find_volume+0x1b6>
 80062e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	0011      	movs	r1, r2
 80062ee:	0018      	movs	r0, r3
 80062f0:	f7ff fed0 	bl	8006094 <check_fs>
 80062f4:	0003      	movs	r3, r0
 80062f6:	001a      	movs	r2, r3
 80062f8:	e000      	b.n	80062fc <find_volume+0x1b8>
 80062fa:	2203      	movs	r2, #3
 80062fc:	2157      	movs	r1, #87	; 0x57
 80062fe:	187b      	adds	r3, r7, r1
 8006300:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006302:	187b      	adds	r3, r7, r1
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d905      	bls.n	8006316 <find_volume+0x1d2>
 800630a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630c:	3301      	adds	r3, #1
 800630e:	643b      	str	r3, [r7, #64]	; 0x40
 8006310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006312:	2b03      	cmp	r3, #3
 8006314:	d9df      	bls.n	80062d6 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006316:	2357      	movs	r3, #87	; 0x57
 8006318:	18fb      	adds	r3, r7, r3
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b04      	cmp	r3, #4
 800631e:	d101      	bne.n	8006324 <find_volume+0x1e0>
 8006320:	2301      	movs	r3, #1
 8006322:	e1a8      	b.n	8006676 <find_volume+0x532>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006324:	2357      	movs	r3, #87	; 0x57
 8006326:	18fb      	adds	r3, r7, r3
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d901      	bls.n	8006332 <find_volume+0x1ee>
 800632e:	230d      	movs	r3, #13
 8006330:	e1a1      	b.n	8006676 <find_volume+0x532>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006334:	3338      	adds	r3, #56	; 0x38
 8006336:	330b      	adds	r3, #11
 8006338:	0018      	movs	r0, r3
 800633a:	f7fd ff47 	bl	80041cc <ld_word>
 800633e:	0003      	movs	r3, r0
 8006340:	001a      	movs	r2, r3
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	899b      	ldrh	r3, [r3, #12]
 8006346:	429a      	cmp	r2, r3
 8006348:	d001      	beq.n	800634e <find_volume+0x20a>
 800634a:	230d      	movs	r3, #13
 800634c:	e193      	b.n	8006676 <find_volume+0x532>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	3338      	adds	r3, #56	; 0x38
 8006352:	3316      	adds	r3, #22
 8006354:	0018      	movs	r0, r3
 8006356:	f7fd ff39 	bl	80041cc <ld_word>
 800635a:	0003      	movs	r3, r0
 800635c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800635e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d107      	bne.n	8006374 <find_volume+0x230>
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	3338      	adds	r3, #56	; 0x38
 8006368:	3324      	adds	r3, #36	; 0x24
 800636a:	0018      	movs	r0, r3
 800636c:	f7fd ff49 	bl	8004202 <ld_dword>
 8006370:	0003      	movs	r3, r0
 8006372:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006378:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	2248      	movs	r2, #72	; 0x48
 800637e:	5c9a      	ldrb	r2, [r3, r2]
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	789b      	ldrb	r3, [r3, #2]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d005      	beq.n	8006398 <find_volume+0x254>
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	789b      	ldrb	r3, [r3, #2]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d001      	beq.n	8006398 <find_volume+0x254>
 8006394:	230d      	movs	r3, #13
 8006396:	e16e      	b.n	8006676 <find_volume+0x532>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	789b      	ldrb	r3, [r3, #2]
 800639c:	001a      	movs	r2, r3
 800639e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a0:	4353      	muls	r3, r2
 80063a2:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	2245      	movs	r2, #69	; 0x45
 80063a8:	5c9b      	ldrb	r3, [r3, r2]
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	895b      	ldrh	r3, [r3, #10]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <find_volume+0x284>
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	895b      	ldrh	r3, [r3, #10]
 80063bc:	001a      	movs	r2, r3
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	895b      	ldrh	r3, [r3, #10]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	4013      	ands	r3, r2
 80063c6:	d001      	beq.n	80063cc <find_volume+0x288>
 80063c8:	230d      	movs	r3, #13
 80063ca:	e154      	b.n	8006676 <find_volume+0x532>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80063cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ce:	3338      	adds	r3, #56	; 0x38
 80063d0:	3311      	adds	r3, #17
 80063d2:	0018      	movs	r0, r3
 80063d4:	f7fd fefa 	bl	80041cc <ld_word>
 80063d8:	0003      	movs	r3, r0
 80063da:	001a      	movs	r2, r3
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	891a      	ldrh	r2, [r3, #8]
 80063e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e6:	899b      	ldrh	r3, [r3, #12]
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	0019      	movs	r1, r3
 80063ee:	0010      	movs	r0, r2
 80063f0:	f7f9 ff1a 	bl	8000228 <__aeabi_uidivmod>
 80063f4:	000b      	movs	r3, r1
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <find_volume+0x2bc>
 80063fc:	230d      	movs	r3, #13
 80063fe:	e13a      	b.n	8006676 <find_volume+0x532>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	3338      	adds	r3, #56	; 0x38
 8006404:	3313      	adds	r3, #19
 8006406:	0018      	movs	r0, r3
 8006408:	f7fd fee0 	bl	80041cc <ld_word>
 800640c:	0003      	movs	r3, r0
 800640e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006412:	2b00      	cmp	r3, #0
 8006414:	d107      	bne.n	8006426 <find_volume+0x2e2>
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	3338      	adds	r3, #56	; 0x38
 800641a:	3320      	adds	r3, #32
 800641c:	0018      	movs	r0, r3
 800641e:	f7fd fef0 	bl	8004202 <ld_dword>
 8006422:	0003      	movs	r3, r0
 8006424:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006428:	3338      	adds	r3, #56	; 0x38
 800642a:	330e      	adds	r3, #14
 800642c:	252e      	movs	r5, #46	; 0x2e
 800642e:	197c      	adds	r4, r7, r5
 8006430:	0018      	movs	r0, r3
 8006432:	f7fd fecb 	bl	80041cc <ld_word>
 8006436:	0003      	movs	r3, r0
 8006438:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800643a:	197b      	adds	r3, r7, r5
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <find_volume+0x302>
 8006442:	230d      	movs	r3, #13
 8006444:	e117      	b.n	8006676 <find_volume+0x532>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006446:	232e      	movs	r3, #46	; 0x2e
 8006448:	18fb      	adds	r3, r7, r3
 800644a:	881a      	ldrh	r2, [r3, #0]
 800644c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644e:	18d4      	adds	r4, r2, r3
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	891a      	ldrh	r2, [r3, #8]
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	899b      	ldrh	r3, [r3, #12]
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	b29b      	uxth	r3, r3
 800645c:	0019      	movs	r1, r3
 800645e:	0010      	movs	r0, r2
 8006460:	f7f9 fe5c 	bl	800011c <__udivsi3>
 8006464:	0003      	movs	r3, r0
 8006466:	b29b      	uxth	r3, r3
 8006468:	18e3      	adds	r3, r4, r3
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800646c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	429a      	cmp	r2, r3
 8006472:	d203      	bcs.n	800647c <find_volume+0x338>
 8006474:	230d      	movs	r3, #13
 8006476:	e0fe      	b.n	8006676 <find_volume+0x532>
 8006478:	2000010c 	.word	0x2000010c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800647c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	1ad2      	subs	r2, r2, r3
 8006482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006484:	895b      	ldrh	r3, [r3, #10]
 8006486:	0019      	movs	r1, r3
 8006488:	0010      	movs	r0, r2
 800648a:	f7f9 fe47 	bl	800011c <__udivsi3>
 800648e:	0003      	movs	r3, r0
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <find_volume+0x358>
 8006498:	230d      	movs	r3, #13
 800649a:	e0ec      	b.n	8006676 <find_volume+0x532>
		fmt = FS_FAT32;
 800649c:	2157      	movs	r1, #87	; 0x57
 800649e:	187b      	adds	r3, r7, r1
 80064a0:	2203      	movs	r2, #3
 80064a2:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	4a76      	ldr	r2, [pc, #472]	; (8006680 <find_volume+0x53c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d802      	bhi.n	80064b2 <find_volume+0x36e>
 80064ac:	187b      	adds	r3, r7, r1
 80064ae:	2202      	movs	r2, #2
 80064b0:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	4a73      	ldr	r2, [pc, #460]	; (8006684 <find_volume+0x540>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d803      	bhi.n	80064c2 <find_volume+0x37e>
 80064ba:	2357      	movs	r3, #87	; 0x57
 80064bc:	18fb      	adds	r3, r7, r3
 80064be:	2201      	movs	r2, #1
 80064c0:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064ce:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80064d0:	232e      	movs	r3, #46	; 0x2e
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	881a      	ldrh	r2, [r3, #0]
 80064d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d8:	18d2      	adds	r2, r2, r3
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80064de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	18d2      	adds	r2, r2, r3
 80064e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80064e8:	2357      	movs	r3, #87	; 0x57
 80064ea:	18fb      	adds	r3, r7, r3
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d11d      	bne.n	800652e <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80064f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f4:	3338      	adds	r3, #56	; 0x38
 80064f6:	332a      	adds	r3, #42	; 0x2a
 80064f8:	0018      	movs	r0, r3
 80064fa:	f7fd fe67 	bl	80041cc <ld_word>
 80064fe:	1e03      	subs	r3, r0, #0
 8006500:	d001      	beq.n	8006506 <find_volume+0x3c2>
 8006502:	230d      	movs	r3, #13
 8006504:	e0b7      	b.n	8006676 <find_volume+0x532>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	891b      	ldrh	r3, [r3, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <find_volume+0x3ce>
 800650e:	230d      	movs	r3, #13
 8006510:	e0b1      	b.n	8006676 <find_volume+0x532>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006514:	3338      	adds	r3, #56	; 0x38
 8006516:	332c      	adds	r3, #44	; 0x2c
 8006518:	0018      	movs	r0, r3
 800651a:	f7fd fe72 	bl	8004202 <ld_dword>
 800651e:	0002      	movs	r2, r0
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	647b      	str	r3, [r7, #68]	; 0x44
 800652c:	e020      	b.n	8006570 <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	891b      	ldrh	r3, [r3, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <find_volume+0x3f6>
 8006536:	230d      	movs	r3, #13
 8006538:	e09d      	b.n	8006676 <find_volume+0x532>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800653a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800653e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006540:	18d2      	adds	r2, r2, r3
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006546:	2357      	movs	r3, #87	; 0x57
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d103      	bne.n	8006558 <find_volume+0x414>
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	e00a      	b.n	800656e <find_volume+0x42a>
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	0013      	movs	r3, r2
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	189b      	adds	r3, r3, r2
 8006562:	085a      	lsrs	r2, r3, #1
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	2101      	movs	r1, #1
 800656a:	400b      	ands	r3, r1
 800656c:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800656e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	6a1c      	ldr	r4, [r3, #32]
 8006574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006576:	899b      	ldrh	r3, [r3, #12]
 8006578:	001a      	movs	r2, r3
 800657a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657c:	18d3      	adds	r3, r2, r3
 800657e:	1e5a      	subs	r2, r3, #1
 8006580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006582:	899b      	ldrh	r3, [r3, #12]
 8006584:	0019      	movs	r1, r3
 8006586:	0010      	movs	r0, r2
 8006588:	f7f9 fdc8 	bl	800011c <__udivsi3>
 800658c:	0003      	movs	r3, r0
 800658e:	429c      	cmp	r4, r3
 8006590:	d201      	bcs.n	8006596 <find_volume+0x452>
 8006592:	230d      	movs	r3, #13
 8006594:	e06f      	b.n	8006676 <find_volume+0x532>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	2201      	movs	r2, #1
 800659a:	4252      	negs	r2, r2
 800659c:	619a      	str	r2, [r3, #24]
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80065a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a8:	2280      	movs	r2, #128	; 0x80
 80065aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80065ac:	2357      	movs	r3, #87	; 0x57
 80065ae:	18fb      	adds	r3, r7, r3
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d148      	bne.n	8006648 <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	3338      	adds	r3, #56	; 0x38
 80065ba:	3330      	adds	r3, #48	; 0x30
 80065bc:	0018      	movs	r0, r3
 80065be:	f7fd fe05 	bl	80041cc <ld_word>
 80065c2:	0003      	movs	r3, r0
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d13f      	bne.n	8006648 <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 80065c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ce:	0011      	movs	r1, r2
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7fe f8a7 	bl	8004724 <move_window>
 80065d6:	1e03      	subs	r3, r0, #0
 80065d8:	d136      	bne.n	8006648 <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	2200      	movs	r2, #0
 80065de:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	3338      	adds	r3, #56	; 0x38
 80065e4:	33ff      	adds	r3, #255	; 0xff
 80065e6:	33ff      	adds	r3, #255	; 0xff
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7fd fdef 	bl	80041cc <ld_word>
 80065ee:	0003      	movs	r3, r0
 80065f0:	001a      	movs	r2, r3
 80065f2:	4b25      	ldr	r3, [pc, #148]	; (8006688 <find_volume+0x544>)
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d127      	bne.n	8006648 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	3338      	adds	r3, #56	; 0x38
 80065fc:	0018      	movs	r0, r3
 80065fe:	f7fd fe00 	bl	8004202 <ld_dword>
 8006602:	0003      	movs	r3, r0
 8006604:	4a21      	ldr	r2, [pc, #132]	; (800668c <find_volume+0x548>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d11e      	bne.n	8006648 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	3338      	adds	r3, #56	; 0x38
 800660e:	33e5      	adds	r3, #229	; 0xe5
 8006610:	33ff      	adds	r3, #255	; 0xff
 8006612:	0018      	movs	r0, r3
 8006614:	f7fd fdf5 	bl	8004202 <ld_dword>
 8006618:	0003      	movs	r3, r0
 800661a:	4a1d      	ldr	r2, [pc, #116]	; (8006690 <find_volume+0x54c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d113      	bne.n	8006648 <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	3338      	adds	r3, #56	; 0x38
 8006624:	33e9      	adds	r3, #233	; 0xe9
 8006626:	33ff      	adds	r3, #255	; 0xff
 8006628:	0018      	movs	r0, r3
 800662a:	f7fd fdea 	bl	8004202 <ld_dword>
 800662e:	0002      	movs	r2, r0
 8006630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006632:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	3338      	adds	r3, #56	; 0x38
 8006638:	33ed      	adds	r3, #237	; 0xed
 800663a:	33ff      	adds	r3, #255	; 0xff
 800663c:	0018      	movs	r0, r3
 800663e:	f7fd fde0 	bl	8004202 <ld_dword>
 8006642:	0002      	movs	r2, r0
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664a:	2257      	movs	r2, #87	; 0x57
 800664c:	18ba      	adds	r2, r7, r2
 800664e:	7812      	ldrb	r2, [r2, #0]
 8006650:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006652:	4b10      	ldr	r3, [pc, #64]	; (8006694 <find_volume+0x550>)
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	3301      	adds	r3, #1
 8006658:	b29a      	uxth	r2, r3
 800665a:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <find_volume+0x550>)
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <find_volume+0x550>)
 8006660:	881a      	ldrh	r2, [r3, #0]
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	4a0b      	ldr	r2, [pc, #44]	; (8006698 <find_volume+0x554>)
 800666a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666e:	0018      	movs	r0, r3
 8006670:	f7fd fff0 	bl	8004654 <clear_lock>
#endif
	return FR_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	0018      	movs	r0, r3
 8006678:	46bd      	mov	sp, r7
 800667a:	b016      	add	sp, #88	; 0x58
 800667c:	bdb0      	pop	{r4, r5, r7, pc}
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	0000fff5 	.word	0x0000fff5
 8006684:	00000ff5 	.word	0x00000ff5
 8006688:	0000aa55 	.word	0x0000aa55
 800668c:	41615252 	.word	0x41615252
 8006690:	61417272 	.word	0x61417272
 8006694:	20000110 	.word	0x20000110
 8006698:	20000134 	.word	0x20000134

0800669c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800669c:	b590      	push	{r4, r7, lr}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80066a6:	240f      	movs	r4, #15
 80066a8:	193b      	adds	r3, r7, r4
 80066aa:	2209      	movs	r2, #9
 80066ac:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d01d      	beq.n	80066f0 <validate+0x54>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d019      	beq.n	80066f0 <validate+0x54>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d014      	beq.n	80066f0 <validate+0x54>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	889a      	ldrh	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	88db      	ldrh	r3, [r3, #6]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d10d      	bne.n	80066f0 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	0018      	movs	r0, r3
 80066dc:	f7fd fcac 	bl	8004038 <disk_status>
 80066e0:	0003      	movs	r3, r0
 80066e2:	001a      	movs	r2, r3
 80066e4:	2301      	movs	r3, #1
 80066e6:	4013      	ands	r3, r2
 80066e8:	d102      	bne.n	80066f0 <validate+0x54>
			res = FR_OK;
 80066ea:	193b      	adds	r3, r7, r4
 80066ec:	2200      	movs	r2, #0
 80066ee:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80066f0:	230f      	movs	r3, #15
 80066f2:	18fb      	adds	r3, r7, r3
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d102      	bne.n	8006700 <validate+0x64>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	e000      	b.n	8006702 <validate+0x66>
 8006700:	2200      	movs	r2, #0
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	601a      	str	r2, [r3, #0]
	return res;
 8006706:	230f      	movs	r3, #15
 8006708:	18fb      	adds	r3, r7, r3
 800670a:	781b      	ldrb	r3, [r3, #0]
}
 800670c:	0018      	movs	r0, r3
 800670e:	46bd      	mov	sp, r7
 8006710:	b005      	add	sp, #20
 8006712:	bd90      	pop	{r4, r7, pc}

08006714 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006714:	b5b0      	push	{r4, r5, r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	1dfb      	adds	r3, r7, #7
 8006720:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006726:	2310      	movs	r3, #16
 8006728:	18fb      	adds	r3, r7, r3
 800672a:	0018      	movs	r0, r3
 800672c:	f7ff fc70 	bl	8006010 <get_ldnumber>
 8006730:	0003      	movs	r3, r0
 8006732:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	2b00      	cmp	r3, #0
 8006738:	da01      	bge.n	800673e <f_mount+0x2a>
 800673a:	230b      	movs	r3, #11
 800673c:	e030      	b.n	80067a0 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800673e:	4b1a      	ldr	r3, [pc, #104]	; (80067a8 <f_mount+0x94>)
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	0092      	lsls	r2, r2, #2
 8006744:	58d3      	ldr	r3, [r2, r3]
 8006746:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d006      	beq.n	800675c <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	0018      	movs	r0, r3
 8006752:	f7fd ff7f 	bl	8004654 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2200      	movs	r2, #0
 800675a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006768:	68f9      	ldr	r1, [r7, #12]
 800676a:	4b0f      	ldr	r3, [pc, #60]	; (80067a8 <f_mount+0x94>)
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	0092      	lsls	r2, r2, #2
 8006770:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <f_mount+0x6c>
 8006778:	1dfb      	adds	r3, r7, #7
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d001      	beq.n	8006784 <f_mount+0x70>
 8006780:	2300      	movs	r3, #0
 8006782:	e00d      	b.n	80067a0 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006784:	2517      	movs	r5, #23
 8006786:	197c      	adds	r4, r7, r5
 8006788:	230c      	movs	r3, #12
 800678a:	18f9      	adds	r1, r7, r3
 800678c:	2308      	movs	r3, #8
 800678e:	18fb      	adds	r3, r7, r3
 8006790:	2200      	movs	r2, #0
 8006792:	0018      	movs	r0, r3
 8006794:	f7ff fcd6 	bl	8006144 <find_volume>
 8006798:	0003      	movs	r3, r0
 800679a:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800679c:	197b      	adds	r3, r7, r5
 800679e:	781b      	ldrb	r3, [r3, #0]
}
 80067a0:	0018      	movs	r0, r3
 80067a2:	46bd      	mov	sp, r7
 80067a4:	b008      	add	sp, #32
 80067a6:	bdb0      	pop	{r4, r5, r7, pc}
 80067a8:	2000010c 	.word	0x2000010c

080067ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80067ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ae:	b09b      	sub	sp, #108	; 0x6c
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	1dfb      	adds	r3, r7, #7
 80067b8:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <f_open+0x18>
 80067c0:	2309      	movs	r3, #9
 80067c2:	e1f4      	b.n	8006bae <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80067c4:	1dfb      	adds	r3, r7, #7
 80067c6:	1dfa      	adds	r2, r7, #7
 80067c8:	7812      	ldrb	r2, [r2, #0]
 80067ca:	213f      	movs	r1, #63	; 0x3f
 80067cc:	400a      	ands	r2, r1
 80067ce:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80067d0:	2567      	movs	r5, #103	; 0x67
 80067d2:	197c      	adds	r4, r7, r5
 80067d4:	1dfb      	adds	r3, r7, #7
 80067d6:	781a      	ldrb	r2, [r3, #0]
 80067d8:	2314      	movs	r3, #20
 80067da:	18f9      	adds	r1, r7, r3
 80067dc:	2308      	movs	r3, #8
 80067de:	18fb      	adds	r3, r7, r3
 80067e0:	0018      	movs	r0, r3
 80067e2:	f7ff fcaf 	bl	8006144 <find_volume>
 80067e6:	0003      	movs	r3, r0
 80067e8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80067ea:	197b      	adds	r3, r7, r5
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d000      	beq.n	80067f4 <f_open+0x48>
 80067f2:	e1d1      	b.n	8006b98 <f_open+0x3ec>
		dj.obj.fs = fs;
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	2618      	movs	r6, #24
 80067f8:	19bb      	adds	r3, r7, r6
 80067fa:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	197c      	adds	r4, r7, r5
 8006800:	19bb      	adds	r3, r7, r6
 8006802:	0011      	movs	r1, r2
 8006804:	0018      	movs	r0, r3
 8006806:	f7ff fb79 	bl	8005efc <follow_path>
 800680a:	0003      	movs	r3, r0
 800680c:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800680e:	0029      	movs	r1, r5
 8006810:	197b      	adds	r3, r7, r5
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d11b      	bne.n	8006850 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006818:	19bb      	adds	r3, r7, r6
 800681a:	222f      	movs	r2, #47	; 0x2f
 800681c:	5c9b      	ldrb	r3, [r3, r2]
 800681e:	b25b      	sxtb	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	da03      	bge.n	800682c <f_open+0x80>
				res = FR_INVALID_NAME;
 8006824:	187b      	adds	r3, r7, r1
 8006826:	2206      	movs	r2, #6
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e011      	b.n	8006850 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800682c:	1dfb      	adds	r3, r7, #7
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2201      	movs	r2, #1
 8006832:	4393      	bics	r3, r2
 8006834:	1e5a      	subs	r2, r3, #1
 8006836:	4193      	sbcs	r3, r2
 8006838:	b2db      	uxtb	r3, r3
 800683a:	001a      	movs	r2, r3
 800683c:	2367      	movs	r3, #103	; 0x67
 800683e:	18fc      	adds	r4, r7, r3
 8006840:	2318      	movs	r3, #24
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	0011      	movs	r1, r2
 8006846:	0018      	movs	r0, r3
 8006848:	f7fd fdba 	bl	80043c0 <chk_lock>
 800684c:	0003      	movs	r3, r0
 800684e:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006850:	1dfb      	adds	r3, r7, #7
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	221c      	movs	r2, #28
 8006856:	4013      	ands	r3, r2
 8006858:	d100      	bne.n	800685c <f_open+0xb0>
 800685a:	e096      	b.n	800698a <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 800685c:	2267      	movs	r2, #103	; 0x67
 800685e:	18bb      	adds	r3, r7, r2
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01a      	beq.n	800689c <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006866:	18bb      	adds	r3, r7, r2
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b04      	cmp	r3, #4
 800686c:	d10f      	bne.n	800688e <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800686e:	f7fd fdff 	bl	8004470 <enq_lock>
 8006872:	1e03      	subs	r3, r0, #0
 8006874:	d007      	beq.n	8006886 <f_open+0xda>
 8006876:	2318      	movs	r3, #24
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	0018      	movs	r0, r3
 800687c:	f7ff f82a 	bl	80058d4 <dir_register>
 8006880:	0003      	movs	r3, r0
 8006882:	001a      	movs	r2, r3
 8006884:	e000      	b.n	8006888 <f_open+0xdc>
 8006886:	2212      	movs	r2, #18
 8006888:	2367      	movs	r3, #103	; 0x67
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800688e:	1dfb      	adds	r3, r7, #7
 8006890:	1dfa      	adds	r2, r7, #7
 8006892:	7812      	ldrb	r2, [r2, #0]
 8006894:	2108      	movs	r1, #8
 8006896:	430a      	orrs	r2, r1
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	e014      	b.n	80068c6 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800689c:	2318      	movs	r3, #24
 800689e:	18fb      	adds	r3, r7, r3
 80068a0:	799b      	ldrb	r3, [r3, #6]
 80068a2:	001a      	movs	r2, r3
 80068a4:	2311      	movs	r3, #17
 80068a6:	4013      	ands	r3, r2
 80068a8:	d004      	beq.n	80068b4 <f_open+0x108>
					res = FR_DENIED;
 80068aa:	2367      	movs	r3, #103	; 0x67
 80068ac:	18fb      	adds	r3, r7, r3
 80068ae:	2207      	movs	r2, #7
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	e008      	b.n	80068c6 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80068b4:	1dfb      	adds	r3, r7, #7
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2204      	movs	r2, #4
 80068ba:	4013      	ands	r3, r2
 80068bc:	d003      	beq.n	80068c6 <f_open+0x11a>
 80068be:	2367      	movs	r3, #103	; 0x67
 80068c0:	18fb      	adds	r3, r7, r3
 80068c2:	2208      	movs	r2, #8
 80068c4:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80068c6:	2467      	movs	r4, #103	; 0x67
 80068c8:	193b      	adds	r3, r7, r4
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d000      	beq.n	80068d2 <f_open+0x126>
 80068d0:	e07b      	b.n	80069ca <f_open+0x21e>
 80068d2:	1dfb      	adds	r3, r7, #7
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2208      	movs	r2, #8
 80068d8:	4013      	ands	r3, r2
 80068da:	d100      	bne.n	80068de <f_open+0x132>
 80068dc:	e075      	b.n	80069ca <f_open+0x21e>
				dw = GET_FATTIME();
 80068de:	f7fd fb3f 	bl	8003f60 <get_fattime>
 80068e2:	0003      	movs	r3, r0
 80068e4:	65bb      	str	r3, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80068e6:	2518      	movs	r5, #24
 80068e8:	197b      	adds	r3, r7, r5
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	330e      	adds	r3, #14
 80068ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068f0:	0011      	movs	r1, r2
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7fd fcc4 	bl	8004280 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80068f8:	197b      	adds	r3, r7, r5
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	3316      	adds	r3, #22
 80068fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006900:	0011      	movs	r1, r2
 8006902:	0018      	movs	r0, r3
 8006904:	f7fd fcbc 	bl	8004280 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006908:	197b      	adds	r3, r7, r5
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	330b      	adds	r3, #11
 800690e:	2220      	movs	r2, #32
 8006910:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	197b      	adds	r3, r7, r5
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	0019      	movs	r1, r3
 800691a:	0010      	movs	r0, r2
 800691c:	f7fe fcef 	bl	80052fe <ld_clust>
 8006920:	0003      	movs	r3, r0
 8006922:	657b      	str	r3, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006924:	6978      	ldr	r0, [r7, #20]
 8006926:	197b      	adds	r3, r7, r5
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	2200      	movs	r2, #0
 800692c:	0019      	movs	r1, r3
 800692e:	f7fe fd05 	bl	800533c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006932:	197b      	adds	r3, r7, r5
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	331c      	adds	r3, #28
 8006938:	2100      	movs	r1, #0
 800693a:	0018      	movs	r0, r3
 800693c:	f7fd fca0 	bl	8004280 <st_dword>
					fs->wflag = 1;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2201      	movs	r2, #1
 8006944:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006948:	2b00      	cmp	r3, #0
 800694a:	d03e      	beq.n	80069ca <f_open+0x21e>
						dw = fs->winsect;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006950:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006952:	0026      	movs	r6, r4
 8006954:	193c      	adds	r4, r7, r4
 8006956:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006958:	197b      	adds	r3, r7, r5
 800695a:	2200      	movs	r2, #0
 800695c:	0018      	movs	r0, r3
 800695e:	f7fe f9ba 	bl	8004cd6 <remove_chain>
 8006962:	0003      	movs	r3, r0
 8006964:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 8006966:	19bb      	adds	r3, r7, r6
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d12d      	bne.n	80069ca <f_open+0x21e>
							res = move_window(fs, dw);
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	19bc      	adds	r4, r7, r6
 8006972:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006974:	0011      	movs	r1, r2
 8006976:	0018      	movs	r0, r3
 8006978:	f7fd fed4 	bl	8004724 <move_window>
 800697c:	0003      	movs	r3, r0
 800697e:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006984:	3a01      	subs	r2, #1
 8006986:	615a      	str	r2, [r3, #20]
 8006988:	e01f      	b.n	80069ca <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800698a:	2167      	movs	r1, #103	; 0x67
 800698c:	187b      	adds	r3, r7, r1
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11a      	bne.n	80069ca <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006994:	2318      	movs	r3, #24
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	799b      	ldrb	r3, [r3, #6]
 800699a:	001a      	movs	r2, r3
 800699c:	2310      	movs	r3, #16
 800699e:	4013      	ands	r3, r2
 80069a0:	d003      	beq.n	80069aa <f_open+0x1fe>
					res = FR_NO_FILE;
 80069a2:	187b      	adds	r3, r7, r1
 80069a4:	2204      	movs	r2, #4
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	e00f      	b.n	80069ca <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80069aa:	1dfb      	adds	r3, r7, #7
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2202      	movs	r2, #2
 80069b0:	4013      	ands	r3, r2
 80069b2:	d00a      	beq.n	80069ca <f_open+0x21e>
 80069b4:	2318      	movs	r3, #24
 80069b6:	18fb      	adds	r3, r7, r3
 80069b8:	799b      	ldrb	r3, [r3, #6]
 80069ba:	001a      	movs	r2, r3
 80069bc:	2301      	movs	r3, #1
 80069be:	4013      	ands	r3, r2
 80069c0:	d003      	beq.n	80069ca <f_open+0x21e>
						res = FR_DENIED;
 80069c2:	2367      	movs	r3, #103	; 0x67
 80069c4:	18fb      	adds	r3, r7, r3
 80069c6:	2207      	movs	r2, #7
 80069c8:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 80069ca:	2367      	movs	r3, #103	; 0x67
 80069cc:	18fb      	adds	r3, r7, r3
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d12b      	bne.n	8006a2c <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80069d4:	1dfb      	adds	r3, r7, #7
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2208      	movs	r2, #8
 80069da:	4013      	ands	r3, r2
 80069dc:	d005      	beq.n	80069ea <f_open+0x23e>
				mode |= FA_MODIFIED;
 80069de:	1dfb      	adds	r3, r7, #7
 80069e0:	1dfa      	adds	r2, r7, #7
 80069e2:	7812      	ldrb	r2, [r2, #0]
 80069e4:	2140      	movs	r1, #64	; 0x40
 80069e6:	430a      	orrs	r2, r1
 80069e8:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80069f2:	2118      	movs	r1, #24
 80069f4:	187b      	adds	r3, r7, r1
 80069f6:	6a1a      	ldr	r2, [r3, #32]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80069fc:	1dfb      	adds	r3, r7, #7
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2201      	movs	r2, #1
 8006a02:	4393      	bics	r3, r2
 8006a04:	1e5a      	subs	r2, r3, #1
 8006a06:	4193      	sbcs	r3, r2
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	001a      	movs	r2, r3
 8006a0c:	187b      	adds	r3, r7, r1
 8006a0e:	0011      	movs	r1, r2
 8006a10:	0018      	movs	r0, r3
 8006a12:	f7fd fd4b 	bl	80044ac <inc_lock>
 8006a16:	0002      	movs	r2, r0
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d103      	bne.n	8006a2c <f_open+0x280>
 8006a24:	2367      	movs	r3, #103	; 0x67
 8006a26:	18fb      	adds	r3, r7, r3
 8006a28:	2202      	movs	r2, #2
 8006a2a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006a2c:	2367      	movs	r3, #103	; 0x67
 8006a2e:	18fb      	adds	r3, r7, r3
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d000      	beq.n	8006a38 <f_open+0x28c>
 8006a36:	e0af      	b.n	8006b98 <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	2418      	movs	r4, #24
 8006a3c:	193b      	adds	r3, r7, r4
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	0019      	movs	r1, r3
 8006a42:	0010      	movs	r0, r2
 8006a44:	f7fe fc5b 	bl	80052fe <ld_clust>
 8006a48:	0002      	movs	r2, r0
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006a4e:	193b      	adds	r3, r7, r4
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	331c      	adds	r3, #28
 8006a54:	0018      	movs	r0, r3
 8006a56:	f7fd fbd4 	bl	8004202 <ld_dword>
 8006a5a:	0002      	movs	r2, r0
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	88da      	ldrh	r2, [r3, #6]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	1dfa      	adds	r2, r7, #7
 8006a78:	7812      	ldrb	r2, [r2, #0]
 8006a7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3330      	adds	r3, #48	; 0x30
 8006a92:	2280      	movs	r2, #128	; 0x80
 8006a94:	0152      	lsls	r2, r2, #5
 8006a96:	2100      	movs	r1, #0
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f7fd fc3a 	bl	8004312 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006a9e:	1dfb      	adds	r3, r7, #7
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d100      	bne.n	8006aaa <f_open+0x2fe>
 8006aa8:	e076      	b.n	8006b98 <f_open+0x3ec>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d100      	bne.n	8006ab4 <f_open+0x308>
 8006ab2:	e071      	b.n	8006b98 <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	895b      	ldrh	r3, [r3, #10]
 8006ac0:	001a      	movs	r2, r3
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	899b      	ldrh	r3, [r3, #12]
 8006ac6:	4353      	muls	r3, r2
 8006ac8:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ad6:	e019      	b.n	8006b0c <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006adc:	0011      	movs	r1, r2
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f7fd feee 	bl	80048c0 <get_fat>
 8006ae4:	0003      	movs	r3, r0
 8006ae6:	663b      	str	r3, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d803      	bhi.n	8006af6 <f_open+0x34a>
 8006aee:	2367      	movs	r3, #103	; 0x67
 8006af0:	18fb      	adds	r3, r7, r3
 8006af2:	2202      	movs	r2, #2
 8006af4:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006af8:	3301      	adds	r3, #1
 8006afa:	d103      	bne.n	8006b04 <f_open+0x358>
 8006afc:	2367      	movs	r3, #103	; 0x67
 8006afe:	18fb      	adds	r3, r7, r3
 8006b00:	2201      	movs	r2, #1
 8006b02:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b0c:	2367      	movs	r3, #103	; 0x67
 8006b0e:	18fb      	adds	r3, r7, r3
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <f_open+0x372>
 8006b16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d8dc      	bhi.n	8006ad8 <f_open+0x32c>
				}
				fp->clust = clst;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b22:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006b24:	2467      	movs	r4, #103	; 0x67
 8006b26:	193b      	adds	r3, r7, r4
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d134      	bne.n	8006b98 <f_open+0x3ec>
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	899b      	ldrh	r3, [r3, #12]
 8006b32:	001a      	movs	r2, r3
 8006b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b36:	0011      	movs	r1, r2
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f7f9 fb75 	bl	8000228 <__aeabi_uidivmod>
 8006b3e:	1e0b      	subs	r3, r1, #0
 8006b40:	d02a      	beq.n	8006b98 <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b46:	0011      	movs	r1, r2
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f7fd fe9d 	bl	8004888 <clust2sect>
 8006b4e:	0003      	movs	r3, r0
 8006b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <f_open+0x3b4>
						res = FR_INT_ERR;
 8006b58:	193b      	adds	r3, r7, r4
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	e01b      	b.n	8006b98 <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	899b      	ldrh	r3, [r3, #12]
 8006b64:	0019      	movs	r1, r3
 8006b66:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006b68:	f7f9 fad8 	bl	800011c <__udivsi3>
 8006b6c:	0003      	movs	r3, r0
 8006b6e:	001a      	movs	r2, r3
 8006b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b72:	18d2      	adds	r2, r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	7858      	ldrb	r0, [r3, #1]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3330      	adds	r3, #48	; 0x30
 8006b80:	0019      	movs	r1, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1a      	ldr	r2, [r3, #32]
 8006b86:	2301      	movs	r3, #1
 8006b88:	f7fd faa8 	bl	80040dc <disk_read>
 8006b8c:	1e03      	subs	r3, r0, #0
 8006b8e:	d003      	beq.n	8006b98 <f_open+0x3ec>
 8006b90:	2367      	movs	r3, #103	; 0x67
 8006b92:	18fb      	adds	r3, r7, r3
 8006b94:	2201      	movs	r2, #1
 8006b96:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006b98:	2367      	movs	r3, #103	; 0x67
 8006b9a:	18fb      	adds	r3, r7, r3
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <f_open+0x3fc>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006ba8:	2367      	movs	r3, #103	; 0x67
 8006baa:	18fb      	adds	r3, r7, r3
 8006bac:	781b      	ldrb	r3, [r3, #0]
}
 8006bae:	0018      	movs	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	b01b      	add	sp, #108	; 0x6c
 8006bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006bb6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006bb6:	b5b0      	push	{r4, r5, r7, lr}
 8006bb8:	b08e      	sub	sp, #56	; 0x38
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
 8006bc2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2537      	movs	r5, #55	; 0x37
 8006bd2:	197c      	adds	r4, r7, r5
 8006bd4:	2214      	movs	r2, #20
 8006bd6:	18ba      	adds	r2, r7, r2
 8006bd8:	0011      	movs	r1, r2
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f7ff fd5e 	bl	800669c <validate>
 8006be0:	0003      	movs	r3, r0
 8006be2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006be4:	197b      	adds	r3, r7, r5
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d107      	bne.n	8006bfc <f_read+0x46>
 8006bec:	197b      	adds	r3, r7, r5
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	7d52      	ldrb	r2, [r2, #21]
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	197b      	adds	r3, r7, r5
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <f_read+0x4e>
 8006bfc:	2337      	movs	r3, #55	; 0x37
 8006bfe:	18fb      	adds	r3, r7, r3
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	e137      	b.n	8006e74 <f_read+0x2be>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	7d1b      	ldrb	r3, [r3, #20]
 8006c08:	001a      	movs	r2, r3
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d101      	bne.n	8006c14 <f_read+0x5e>
 8006c10:	2307      	movs	r3, #7
 8006c12:	e12f      	b.n	8006e74 <f_read+0x2be>
	remain = fp->obj.objsize - fp->fptr;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d800      	bhi.n	8006c2a <f_read+0x74>
 8006c28:	e11f      	b.n	8006e6a <f_read+0x2b4>
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006c2e:	e11c      	b.n	8006e6a <f_read+0x2b4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	699a      	ldr	r2, [r3, #24]
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	899b      	ldrh	r3, [r3, #12]
 8006c38:	0019      	movs	r1, r3
 8006c3a:	0010      	movs	r0, r2
 8006c3c:	f7f9 faf4 	bl	8000228 <__aeabi_uidivmod>
 8006c40:	1e0b      	subs	r3, r1, #0
 8006c42:	d000      	beq.n	8006c46 <f_read+0x90>
 8006c44:	e0d7      	b.n	8006df6 <f_read+0x240>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	899b      	ldrh	r3, [r3, #12]
 8006c4e:	0019      	movs	r1, r3
 8006c50:	0010      	movs	r0, r2
 8006c52:	f7f9 fa63 	bl	800011c <__udivsi3>
 8006c56:	0003      	movs	r3, r0
 8006c58:	001a      	movs	r2, r3
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	895b      	ldrh	r3, [r3, #10]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	4013      	ands	r3, r2
 8006c62:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d131      	bne.n	8006cce <f_read+0x118>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d103      	bne.n	8006c7a <f_read+0xc4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	633b      	str	r3, [r7, #48]	; 0x30
 8006c78:	e016      	b.n	8006ca8 <f_read+0xf2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <f_read+0xe0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	699a      	ldr	r2, [r3, #24]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	0011      	movs	r1, r2
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f7fe f93c 	bl	8004f08 <clmt_clust>
 8006c90:	0003      	movs	r3, r0
 8006c92:	633b      	str	r3, [r7, #48]	; 0x30
 8006c94:	e008      	b.n	8006ca8 <f_read+0xf2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	0019      	movs	r1, r3
 8006c9e:	0010      	movs	r0, r2
 8006ca0:	f7fd fe0e 	bl	80048c0 <get_fat>
 8006ca4:	0003      	movs	r3, r0
 8006ca6:	633b      	str	r3, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d804      	bhi.n	8006cb8 <f_read+0x102>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	755a      	strb	r2, [r3, #21]
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e0dd      	b.n	8006e74 <f_read+0x2be>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	3301      	adds	r3, #1
 8006cbc:	d104      	bne.n	8006cc8 <f_read+0x112>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	755a      	strb	r2, [r3, #21]
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e0d5      	b.n	8006e74 <f_read+0x2be>
				fp->clust = clst;				/* Update current cluster */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ccc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	0019      	movs	r1, r3
 8006cd6:	0010      	movs	r0, r2
 8006cd8:	f7fd fdd6 	bl	8004888 <clust2sect>
 8006cdc:	0003      	movs	r3, r0
 8006cde:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d104      	bne.n	8006cf0 <f_read+0x13a>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	755a      	strb	r2, [r3, #21]
 8006cec:	2302      	movs	r3, #2
 8006cee:	e0c1      	b.n	8006e74 <f_read+0x2be>
			sect += csect;
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	18d3      	adds	r3, r2, r3
 8006cf6:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	899b      	ldrh	r3, [r3, #12]
 8006cfc:	0019      	movs	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7f9 fa0c 	bl	800011c <__udivsi3>
 8006d04:	0003      	movs	r3, r0
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d03e      	beq.n	8006d8c <f_read+0x1d6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	18d3      	adds	r3, r2, r3
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	8952      	ldrh	r2, [r2, #10]
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d905      	bls.n	8006d28 <f_read+0x172>
					cc = fs->csize - csect;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	895b      	ldrh	r3, [r3, #10]
 8006d20:	001a      	movs	r2, r3
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	7858      	ldrb	r0, [r3, #1]
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d32:	f7fd f9d3 	bl	80040dc <disk_read>
 8006d36:	1e03      	subs	r3, r0, #0
 8006d38:	d004      	beq.n	8006d44 <f_read+0x18e>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	755a      	strb	r2, [r3, #21]
 8006d40:	2301      	movs	r3, #1
 8006d42:	e097      	b.n	8006e74 <f_read+0x2be>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	7d1b      	ldrb	r3, [r3, #20]
 8006d48:	b25b      	sxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da17      	bge.n	8006d7e <f_read+0x1c8>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a1a      	ldr	r2, [r3, #32]
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d910      	bls.n	8006d7e <f_read+0x1c8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1a      	ldr	r2, [r3, #32]
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	8992      	ldrh	r2, [r2, #12]
 8006d68:	4353      	muls	r3, r2
 8006d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6c:	18d0      	adds	r0, r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3330      	adds	r3, #48	; 0x30
 8006d72:	0019      	movs	r1, r3
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	899b      	ldrh	r3, [r3, #12]
 8006d78:	001a      	movs	r2, r3
 8006d7a:	f7fd faab 	bl	80042d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	899b      	ldrh	r3, [r3, #12]
 8006d82:	001a      	movs	r2, r3
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	4353      	muls	r3, r2
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006d8a:	e05a      	b.n	8006e42 <f_read+0x28c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d02c      	beq.n	8006df0 <f_read+0x23a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	7d1b      	ldrb	r3, [r3, #20]
 8006d9a:	b25b      	sxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	da17      	bge.n	8006dd0 <f_read+0x21a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	7858      	ldrb	r0, [r3, #1]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3330      	adds	r3, #48	; 0x30
 8006da8:	0019      	movs	r1, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a1a      	ldr	r2, [r3, #32]
 8006dae:	2301      	movs	r3, #1
 8006db0:	f7fd f9bc 	bl	800412c <disk_write>
 8006db4:	1e03      	subs	r3, r0, #0
 8006db6:	d004      	beq.n	8006dc2 <f_read+0x20c>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	755a      	strb	r2, [r3, #21]
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e058      	b.n	8006e74 <f_read+0x2be>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	7d1b      	ldrb	r3, [r3, #20]
 8006dc6:	227f      	movs	r2, #127	; 0x7f
 8006dc8:	4013      	ands	r3, r2
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	7858      	ldrb	r0, [r3, #1]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3330      	adds	r3, #48	; 0x30
 8006dd8:	0019      	movs	r1, r3
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	2301      	movs	r3, #1
 8006dde:	f7fd f97d 	bl	80040dc <disk_read>
 8006de2:	1e03      	subs	r3, r0, #0
 8006de4:	d004      	beq.n	8006df0 <f_read+0x23a>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	755a      	strb	r2, [r3, #21]
 8006dec:	2301      	movs	r3, #1
 8006dee:	e041      	b.n	8006e74 <f_read+0x2be>
			}
#endif
			fp->sect = sect;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	899b      	ldrh	r3, [r3, #12]
 8006dfa:	001c      	movs	r4, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	699a      	ldr	r2, [r3, #24]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	899b      	ldrh	r3, [r3, #12]
 8006e04:	0019      	movs	r1, r3
 8006e06:	0010      	movs	r0, r2
 8006e08:	f7f9 fa0e 	bl	8000228 <__aeabi_uidivmod>
 8006e0c:	000b      	movs	r3, r1
 8006e0e:	1ae3      	subs	r3, r4, r3
 8006e10:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d901      	bls.n	8006e1e <f_read+0x268>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3330      	adds	r3, #48	; 0x30
 8006e22:	001c      	movs	r4, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	699a      	ldr	r2, [r3, #24]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	899b      	ldrh	r3, [r3, #12]
 8006e2c:	0019      	movs	r1, r3
 8006e2e:	0010      	movs	r0, r2
 8006e30:	f7f9 f9fa 	bl	8000228 <__aeabi_uidivmod>
 8006e34:	000b      	movs	r3, r1
 8006e36:	18e1      	adds	r1, r4, r3
 8006e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7fd fa49 	bl	80042d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e46:	18d3      	adds	r3, r2, r3
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	18d2      	adds	r2, r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	619a      	str	r2, [r3, #24]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	18d2      	adds	r2, r2, r3
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d000      	beq.n	8006e72 <f_read+0x2bc>
 8006e70:	e6de      	b.n	8006c30 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	0018      	movs	r0, r3
 8006e76:	46bd      	mov	sp, r7
 8006e78:	b00e      	add	sp, #56	; 0x38
 8006e7a:	bdb0      	pop	{r4, r5, r7, pc}

08006e7c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006e7c:	b5b0      	push	{r4, r5, r7, lr}
 8006e7e:	b08c      	sub	sp, #48	; 0x30
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	252f      	movs	r5, #47	; 0x2f
 8006e98:	197c      	adds	r4, r7, r5
 8006e9a:	2210      	movs	r2, #16
 8006e9c:	18ba      	adds	r2, r7, r2
 8006e9e:	0011      	movs	r1, r2
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	f7ff fbfb 	bl	800669c <validate>
 8006ea6:	0003      	movs	r3, r0
 8006ea8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006eaa:	197b      	adds	r3, r7, r5
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d107      	bne.n	8006ec2 <f_write+0x46>
 8006eb2:	197b      	adds	r3, r7, r5
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	7d52      	ldrb	r2, [r2, #21]
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	197b      	adds	r3, r7, r5
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <f_write+0x4e>
 8006ec2:	232f      	movs	r3, #47	; 0x2f
 8006ec4:	18fb      	adds	r3, r7, r3
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	e16f      	b.n	80071aa <f_write+0x32e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	7d1b      	ldrb	r3, [r3, #20]
 8006ece:	001a      	movs	r2, r3
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	d101      	bne.n	8006eda <f_write+0x5e>
 8006ed6:	2307      	movs	r3, #7
 8006ed8:	e167      	b.n	80071aa <f_write+0x32e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	699a      	ldr	r2, [r3, #24]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	18d2      	adds	r2, r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d300      	bcc.n	8006eec <f_write+0x70>
 8006eea:	e150      	b.n	800718e <f_write+0x312>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	43db      	mvns	r3, r3
 8006ef2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006ef4:	e14b      	b.n	800718e <f_write+0x312>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	899b      	ldrh	r3, [r3, #12]
 8006efe:	0019      	movs	r1, r3
 8006f00:	0010      	movs	r0, r2
 8006f02:	f7f9 f991 	bl	8000228 <__aeabi_uidivmod>
 8006f06:	1e0b      	subs	r3, r1, #0
 8006f08:	d000      	beq.n	8006f0c <f_write+0x90>
 8006f0a:	e0f4      	b.n	80070f6 <f_write+0x27a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	699a      	ldr	r2, [r3, #24]
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	899b      	ldrh	r3, [r3, #12]
 8006f14:	0019      	movs	r1, r3
 8006f16:	0010      	movs	r0, r2
 8006f18:	f7f9 f900 	bl	800011c <__udivsi3>
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	001a      	movs	r2, r3
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	895b      	ldrh	r3, [r3, #10]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	4013      	ands	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d146      	bne.n	8006fbe <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10d      	bne.n	8006f54 <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d11e      	bne.n	8006f82 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2100      	movs	r1, #0
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f7fd ff37 	bl	8004dbc <create_chain>
 8006f4e:	0003      	movs	r3, r0
 8006f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f52:	e016      	b.n	8006f82 <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d009      	beq.n	8006f70 <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	699a      	ldr	r2, [r3, #24]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	0011      	movs	r1, r2
 8006f64:	0018      	movs	r0, r3
 8006f66:	f7fd ffcf 	bl	8004f08 <clmt_clust>
 8006f6a:	0003      	movs	r3, r0
 8006f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f6e:	e008      	b.n	8006f82 <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	0019      	movs	r1, r3
 8006f78:	0010      	movs	r0, r2
 8006f7a:	f7fd ff1f 	bl	8004dbc <create_chain>
 8006f7e:	0003      	movs	r3, r0
 8006f80:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d100      	bne.n	8006f8a <f_write+0x10e>
 8006f88:	e106      	b.n	8007198 <f_write+0x31c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d104      	bne.n	8006f9a <f_write+0x11e>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2202      	movs	r2, #2
 8006f94:	755a      	strb	r2, [r3, #21]
 8006f96:	2302      	movs	r3, #2
 8006f98:	e107      	b.n	80071aa <f_write+0x32e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	d104      	bne.n	8006faa <f_write+0x12e>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	755a      	strb	r2, [r3, #21]
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e0ff      	b.n	80071aa <f_write+0x32e>
				fp->clust = clst;			/* Update current cluster */
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d102      	bne.n	8006fbe <f_write+0x142>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fbc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	7d1b      	ldrb	r3, [r3, #20]
 8006fc2:	b25b      	sxtb	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	da17      	bge.n	8006ff8 <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	7858      	ldrb	r0, [r3, #1]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3330      	adds	r3, #48	; 0x30
 8006fd0:	0019      	movs	r1, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a1a      	ldr	r2, [r3, #32]
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f7fd f8a8 	bl	800412c <disk_write>
 8006fdc:	1e03      	subs	r3, r0, #0
 8006fde:	d004      	beq.n	8006fea <f_write+0x16e>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	755a      	strb	r2, [r3, #21]
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e0df      	b.n	80071aa <f_write+0x32e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	7d1b      	ldrb	r3, [r3, #20]
 8006fee:	227f      	movs	r2, #127	; 0x7f
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	0019      	movs	r1, r3
 8007000:	0010      	movs	r0, r2
 8007002:	f7fd fc41 	bl	8004888 <clust2sect>
 8007006:	0003      	movs	r3, r0
 8007008:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <f_write+0x19e>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2202      	movs	r2, #2
 8007014:	755a      	strb	r2, [r3, #21]
 8007016:	2302      	movs	r3, #2
 8007018:	e0c7      	b.n	80071aa <f_write+0x32e>
			sect += csect;
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	18d3      	adds	r3, r2, r3
 8007020:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	899b      	ldrh	r3, [r3, #12]
 8007026:	0019      	movs	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7f9 f877 	bl	800011c <__udivsi3>
 800702e:	0003      	movs	r3, r0
 8007030:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d040      	beq.n	80070ba <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	18d3      	adds	r3, r2, r3
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	8952      	ldrh	r2, [r2, #10]
 8007042:	4293      	cmp	r3, r2
 8007044:	d905      	bls.n	8007052 <f_write+0x1d6>
					cc = fs->csize - csect;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	895b      	ldrh	r3, [r3, #10]
 800704a:	001a      	movs	r2, r3
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	7858      	ldrb	r0, [r3, #1]
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	69f9      	ldr	r1, [r7, #28]
 800705c:	f7fd f866 	bl	800412c <disk_write>
 8007060:	1e03      	subs	r3, r0, #0
 8007062:	d004      	beq.n	800706e <f_write+0x1f2>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	755a      	strb	r2, [r3, #21]
 800706a:	2301      	movs	r3, #1
 800706c:	e09d      	b.n	80071aa <f_write+0x32e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1a      	ldr	r2, [r3, #32]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	6a3a      	ldr	r2, [r7, #32]
 8007078:	429a      	cmp	r2, r3
 800707a:	d917      	bls.n	80070ac <f_write+0x230>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3330      	adds	r3, #48	; 0x30
 8007080:	0018      	movs	r0, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6a1a      	ldr	r2, [r3, #32]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	8992      	ldrh	r2, [r2, #12]
 800708e:	4353      	muls	r3, r2
 8007090:	69fa      	ldr	r2, [r7, #28]
 8007092:	18d1      	adds	r1, r2, r3
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	899b      	ldrh	r3, [r3, #12]
 8007098:	001a      	movs	r2, r3
 800709a:	f7fd f91b 	bl	80042d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	7d1b      	ldrb	r3, [r3, #20]
 80070a2:	227f      	movs	r2, #127	; 0x7f
 80070a4:	4013      	ands	r3, r2
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	899b      	ldrh	r3, [r3, #12]
 80070b0:	001a      	movs	r2, r3
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	4353      	muls	r3, r2
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80070b8:	e04b      	b.n	8007152 <f_write+0x2d6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d015      	beq.n	80070f0 <f_write+0x274>
				fp->fptr < fp->obj.objsize &&
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	699a      	ldr	r2, [r3, #24]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d20f      	bcs.n	80070f0 <f_write+0x274>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	7858      	ldrb	r0, [r3, #1]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3330      	adds	r3, #48	; 0x30
 80070d8:	0019      	movs	r1, r3
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	2301      	movs	r3, #1
 80070de:	f7fc fffd 	bl	80040dc <disk_read>
 80070e2:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 80070e4:	d004      	beq.n	80070f0 <f_write+0x274>
					ABORT(fs, FR_DISK_ERR);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	755a      	strb	r2, [r3, #21]
 80070ec:	2301      	movs	r3, #1
 80070ee:	e05c      	b.n	80071aa <f_write+0x32e>
			}
#endif
			fp->sect = sect;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	899b      	ldrh	r3, [r3, #12]
 80070fa:	001c      	movs	r4, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	699a      	ldr	r2, [r3, #24]
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	899b      	ldrh	r3, [r3, #12]
 8007104:	0019      	movs	r1, r3
 8007106:	0010      	movs	r0, r2
 8007108:	f7f9 f88e 	bl	8000228 <__aeabi_uidivmod>
 800710c:	000b      	movs	r3, r1
 800710e:	1ae3      	subs	r3, r4, r3
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d901      	bls.n	800711e <f_write+0x2a2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3330      	adds	r3, #48	; 0x30
 8007122:	001c      	movs	r4, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	899b      	ldrh	r3, [r3, #12]
 800712c:	0019      	movs	r1, r3
 800712e:	0010      	movs	r0, r2
 8007130:	f7f9 f87a 	bl	8000228 <__aeabi_uidivmod>
 8007134:	000b      	movs	r3, r1
 8007136:	18e3      	adds	r3, r4, r3
 8007138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800713a:	69f9      	ldr	r1, [r7, #28]
 800713c:	0018      	movs	r0, r3
 800713e:	f7fd f8c9 	bl	80042d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	7d1b      	ldrb	r3, [r3, #20]
 8007146:	2280      	movs	r2, #128	; 0x80
 8007148:	4252      	negs	r2, r2
 800714a:	4313      	orrs	r3, r2
 800714c:	b2da      	uxtb	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	18d3      	adds	r3, r2, r3
 8007158:	61fb      	str	r3, [r7, #28]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	18d2      	adds	r2, r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	619a      	str	r2, [r3, #24]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	68d9      	ldr	r1, [r3, #12]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	000b      	movs	r3, r1
 8007170:	4293      	cmp	r3, r2
 8007172:	d200      	bcs.n	8007176 <f_write+0x2fa>
 8007174:	0013      	movs	r3, r2
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	60d3      	str	r3, [r2, #12]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	18d2      	adds	r2, r2, r3
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d000      	beq.n	8007196 <f_write+0x31a>
 8007194:	e6af      	b.n	8006ef6 <f_write+0x7a>
 8007196:	e000      	b.n	800719a <f_write+0x31e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007198:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	7d1b      	ldrb	r3, [r3, #20]
 800719e:	2240      	movs	r2, #64	; 0x40
 80071a0:	4313      	orrs	r3, r2
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	0018      	movs	r0, r3
 80071ac:	46bd      	mov	sp, r7
 80071ae:	b00c      	add	sp, #48	; 0x30
 80071b0:	bdb0      	pop	{r4, r5, r7, pc}

080071b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80071b2:	b5b0      	push	{r4, r5, r7, lr}
 80071b4:	b086      	sub	sp, #24
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2517      	movs	r5, #23
 80071be:	197c      	adds	r4, r7, r5
 80071c0:	2208      	movs	r2, #8
 80071c2:	18ba      	adds	r2, r7, r2
 80071c4:	0011      	movs	r1, r2
 80071c6:	0018      	movs	r0, r3
 80071c8:	f7ff fa68 	bl	800669c <validate>
 80071cc:	0003      	movs	r3, r0
 80071ce:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80071d0:	197b      	adds	r3, r7, r5
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d16e      	bne.n	80072b6 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7d1b      	ldrb	r3, [r3, #20]
 80071dc:	001a      	movs	r2, r3
 80071de:	2340      	movs	r3, #64	; 0x40
 80071e0:	4013      	ands	r3, r2
 80071e2:	d068      	beq.n	80072b6 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	7d1b      	ldrb	r3, [r3, #20]
 80071e8:	b25b      	sxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	da14      	bge.n	8007218 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	7858      	ldrb	r0, [r3, #1]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3330      	adds	r3, #48	; 0x30
 80071f6:	0019      	movs	r1, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a1a      	ldr	r2, [r3, #32]
 80071fc:	2301      	movs	r3, #1
 80071fe:	f7fc ff95 	bl	800412c <disk_write>
 8007202:	1e03      	subs	r3, r0, #0
 8007204:	d001      	beq.n	800720a <f_sync+0x58>
 8007206:	2301      	movs	r3, #1
 8007208:	e058      	b.n	80072bc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7d1b      	ldrb	r3, [r3, #20]
 800720e:	227f      	movs	r2, #127	; 0x7f
 8007210:	4013      	ands	r3, r2
 8007212:	b2da      	uxtb	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007218:	f7fc fea2 	bl	8003f60 <get_fattime>
 800721c:	0003      	movs	r3, r0
 800721e:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	2517      	movs	r5, #23
 8007228:	197c      	adds	r4, r7, r5
 800722a:	0019      	movs	r1, r3
 800722c:	0010      	movs	r0, r2
 800722e:	f7fd fa79 	bl	8004724 <move_window>
 8007232:	0003      	movs	r3, r0
 8007234:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 8007236:	002c      	movs	r4, r5
 8007238:	193b      	adds	r3, r7, r4
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d13a      	bne.n	80072b6 <f_sync+0x104>
					dir = fp->dir_ptr;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	330b      	adds	r3, #11
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	330b      	adds	r3, #11
 8007250:	2120      	movs	r1, #32
 8007252:	430a      	orrs	r2, r1
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6818      	ldr	r0, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	0019      	movs	r1, r3
 8007264:	f7fe f86a 	bl	800533c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	331c      	adds	r3, #28
 800726c:	001a      	movs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	0019      	movs	r1, r3
 8007274:	0010      	movs	r0, r2
 8007276:	f7fd f803 	bl	8004280 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3316      	adds	r3, #22
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	0011      	movs	r1, r2
 8007282:	0018      	movs	r0, r3
 8007284:	f7fc fffc 	bl	8004280 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3312      	adds	r3, #18
 800728c:	2100      	movs	r1, #0
 800728e:	0018      	movs	r0, r3
 8007290:	f7fc ffd8 	bl	8004244 <st_word>
					fs->wflag = 1;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2201      	movs	r2, #1
 8007298:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	193c      	adds	r4, r7, r4
 800729e:	0018      	movs	r0, r3
 80072a0:	f7fd fa76 	bl	8004790 <sync_fs>
 80072a4:	0003      	movs	r3, r0
 80072a6:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	7d1b      	ldrb	r3, [r3, #20]
 80072ac:	2240      	movs	r2, #64	; 0x40
 80072ae:	4393      	bics	r3, r2
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80072b6:	2317      	movs	r3, #23
 80072b8:	18fb      	adds	r3, r7, r3
 80072ba:	781b      	ldrb	r3, [r3, #0]
}
 80072bc:	0018      	movs	r0, r3
 80072be:	46bd      	mov	sp, r7
 80072c0:	b006      	add	sp, #24
 80072c2:	bdb0      	pop	{r4, r5, r7, pc}

080072c4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80072c4:	b5b0      	push	{r4, r5, r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80072cc:	250f      	movs	r5, #15
 80072ce:	197c      	adds	r4, r7, r5
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	0018      	movs	r0, r3
 80072d4:	f7ff ff6d 	bl	80071b2 <f_sync>
 80072d8:	0003      	movs	r3, r0
 80072da:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 80072dc:	197b      	adds	r3, r7, r5
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d11c      	bne.n	800731e <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	197c      	adds	r4, r7, r5
 80072e8:	2208      	movs	r2, #8
 80072ea:	18ba      	adds	r2, r7, r2
 80072ec:	0011      	movs	r1, r2
 80072ee:	0018      	movs	r0, r3
 80072f0:	f7ff f9d4 	bl	800669c <validate>
 80072f4:	0003      	movs	r3, r0
 80072f6:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80072f8:	197b      	adds	r3, r7, r5
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10e      	bne.n	800731e <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	197c      	adds	r4, r7, r5
 8007306:	0018      	movs	r0, r3
 8007308:	f7fd f95a 	bl	80045c0 <dec_lock>
 800730c:	0003      	movs	r3, r0
 800730e:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8007310:	197b      	adds	r3, r7, r5
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800731e:	230f      	movs	r3, #15
 8007320:	18fb      	adds	r3, r7, r3
 8007322:	781b      	ldrb	r3, [r3, #0]
}
 8007324:	0018      	movs	r0, r3
 8007326:	46bd      	mov	sp, r7
 8007328:	b004      	add	sp, #16
 800732a:	bdb0      	pop	{r4, r5, r7, pc}

0800732c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800732c:	b5b0      	push	{r4, r5, r7, lr}
 800732e:	b092      	sub	sp, #72	; 0x48
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007338:	2547      	movs	r5, #71	; 0x47
 800733a:	197c      	adds	r4, r7, r5
 800733c:	2328      	movs	r3, #40	; 0x28
 800733e:	18f9      	adds	r1, r7, r3
 8007340:	230c      	movs	r3, #12
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	2200      	movs	r2, #0
 8007346:	0018      	movs	r0, r3
 8007348:	f7fe fefc 	bl	8006144 <find_volume>
 800734c:	0003      	movs	r3, r0
 800734e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007350:	197b      	adds	r3, r7, r5
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d000      	beq.n	800735a <f_getfree+0x2e>
 8007358:	e09e      	b.n	8007498 <f_getfree+0x16c>
		*fatfs = fs;				/* Return ptr to the fs object */
 800735a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	699a      	ldr	r2, [r3, #24]
 8007364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	3b02      	subs	r3, #2
 800736a:	429a      	cmp	r2, r3
 800736c:	d804      	bhi.n	8007378 <f_getfree+0x4c>
			*nclst = fs->free_clst;
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e08f      	b.n	8007498 <f_getfree+0x16c>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d12d      	bne.n	80073e0 <f_getfree+0xb4>
				clst = 2; obj.fs = fs;
 8007384:	2302      	movs	r3, #2
 8007386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800738a:	2314      	movs	r3, #20
 800738c:	18fb      	adds	r3, r7, r3
 800738e:	601a      	str	r2, [r3, #0]
				do {
					stat = get_fat(&obj, clst);
 8007390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007392:	2314      	movs	r3, #20
 8007394:	18fb      	adds	r3, r7, r3
 8007396:	0011      	movs	r1, r2
 8007398:	0018      	movs	r0, r3
 800739a:	f7fd fa91 	bl	80048c0 <get_fat>
 800739e:	0003      	movs	r3, r0
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	3301      	adds	r3, #1
 80073a6:	d104      	bne.n	80073b2 <f_getfree+0x86>
 80073a8:	2347      	movs	r3, #71	; 0x47
 80073aa:	18fb      	adds	r3, r7, r3
 80073ac:	2201      	movs	r2, #1
 80073ae:	701a      	strb	r2, [r3, #0]
 80073b0:	e065      	b.n	800747e <f_getfree+0x152>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d104      	bne.n	80073c2 <f_getfree+0x96>
 80073b8:	2347      	movs	r3, #71	; 0x47
 80073ba:	18fb      	adds	r3, r7, r3
 80073bc:	2202      	movs	r2, #2
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	e05d      	b.n	800747e <f_getfree+0x152>
					if (stat == 0) nfree++;
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d102      	bne.n	80073ce <f_getfree+0xa2>
 80073c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ca:	3301      	adds	r3, #1
 80073cc:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80073ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d0:	3301      	adds	r3, #1
 80073d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073da:	429a      	cmp	r2, r3
 80073dc:	d3d8      	bcc.n	8007390 <f_getfree+0x64>
 80073de:	e04e      	b.n	800747e <f_getfree+0x152>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ea:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80073ec:	2300      	movs	r3, #0
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
 80073f0:	2300      	movs	r3, #0
 80073f2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80073f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d114      	bne.n	8007424 <f_getfree+0xf8>
							res = move_window(fs, sect++);
 80073fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	63ba      	str	r2, [r7, #56]	; 0x38
 8007402:	2547      	movs	r5, #71	; 0x47
 8007404:	197c      	adds	r4, r7, r5
 8007406:	0019      	movs	r1, r3
 8007408:	f7fd f98c 	bl	8004724 <move_window>
 800740c:	0003      	movs	r3, r0
 800740e:	7023      	strb	r3, [r4, #0]
							if (res != FR_OK) break;
 8007410:	197b      	adds	r3, r7, r5
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d131      	bne.n	800747c <f_getfree+0x150>
							p = fs->win;
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	3338      	adds	r3, #56	; 0x38
 800741c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	899b      	ldrh	r3, [r3, #12]
 8007422:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d10f      	bne.n	800744c <f_getfree+0x120>
							if (ld_word(p) == 0) nfree++;
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	0018      	movs	r0, r3
 8007430:	f7fc fecc 	bl	80041cc <ld_word>
 8007434:	1e03      	subs	r3, r0, #0
 8007436:	d102      	bne.n	800743e <f_getfree+0x112>
 8007438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743a:	3301      	adds	r3, #1
 800743c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	3302      	adds	r3, #2
 8007442:	633b      	str	r3, [r7, #48]	; 0x30
 8007444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007446:	3b02      	subs	r3, #2
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
 800744a:	e010      	b.n	800746e <f_getfree+0x142>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	0018      	movs	r0, r3
 8007450:	f7fc fed7 	bl	8004202 <ld_dword>
 8007454:	0003      	movs	r3, r0
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	091b      	lsrs	r3, r3, #4
 800745a:	d102      	bne.n	8007462 <f_getfree+0x136>
 800745c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800745e:	3301      	adds	r3, #1
 8007460:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	3304      	adds	r3, #4
 8007466:	633b      	str	r3, [r7, #48]	; 0x30
 8007468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746a:	3b04      	subs	r3, #4
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800746e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007470:	3b01      	subs	r3, #1
 8007472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1bc      	bne.n	80073f4 <f_getfree+0xc8>
 800747a:	e000      	b.n	800747e <f_getfree+0x152>
							if (res != FR_OK) break;
 800747c:	46c0      	nop			; (mov r8, r8)
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007482:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007488:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	791a      	ldrb	r2, [r3, #4]
 800748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007490:	2101      	movs	r1, #1
 8007492:	430a      	orrs	r2, r1
 8007494:	b2d2      	uxtb	r2, r2
 8007496:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007498:	2347      	movs	r3, #71	; 0x47
 800749a:	18fb      	adds	r3, r7, r3
 800749c:	781b      	ldrb	r3, [r3, #0]
}
 800749e:	0018      	movs	r0, r3
 80074a0:	46bd      	mov	sp, r7
 80074a2:	b012      	add	sp, #72	; 0x48
 80074a4:	bdb0      	pop	{r4, r5, r7, pc}

080074a6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80074a6:	b590      	push	{r4, r7, lr}
 80074a8:	b089      	sub	sp, #36	; 0x24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
	int n = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80074ba:	e022      	b.n	8007502 <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80074bc:	2310      	movs	r3, #16
 80074be:	18fb      	adds	r3, r7, r3
 80074c0:	2414      	movs	r4, #20
 80074c2:	1939      	adds	r1, r7, r4
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f7ff fb75 	bl	8006bb6 <f_read>
		if (rc != 1) break;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d11d      	bne.n	800750e <f_gets+0x68>
		c = s[0];
 80074d2:	2117      	movs	r1, #23
 80074d4:	187b      	adds	r3, r7, r1
 80074d6:	193a      	adds	r2, r7, r4
 80074d8:	7812      	ldrb	r2, [r2, #0]
 80074da:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80074dc:	187b      	adds	r3, r7, r1
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b0d      	cmp	r3, #13
 80074e2:	d100      	bne.n	80074e6 <f_gets+0x40>
 80074e4:	e00d      	b.n	8007502 <f_gets+0x5c>
		*p++ = c;
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	61ba      	str	r2, [r7, #24]
 80074ec:	2117      	movs	r1, #23
 80074ee:	187a      	adds	r2, r7, r1
 80074f0:	7812      	ldrb	r2, [r2, #0]
 80074f2:	701a      	strb	r2, [r3, #0]
		n++;
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	3301      	adds	r3, #1
 80074f8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80074fa:	187b      	adds	r3, r7, r1
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b0a      	cmp	r3, #10
 8007500:	d007      	beq.n	8007512 <f_gets+0x6c>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	3b01      	subs	r3, #1
 8007506:	69fa      	ldr	r2, [r7, #28]
 8007508:	429a      	cmp	r2, r3
 800750a:	dbd7      	blt.n	80074bc <f_gets+0x16>
 800750c:	e002      	b.n	8007514 <f_gets+0x6e>
		if (rc != 1) break;
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	e000      	b.n	8007514 <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 8007512:	46c0      	nop			; (mov r8, r8)
	}
	*p = 0;
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	2200      	movs	r2, #0
 8007518:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <f_gets+0x7e>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	e000      	b.n	8007526 <f_gets+0x80>
 8007524:	2300      	movs	r3, #0
}
 8007526:	0018      	movs	r0, r3
 8007528:	46bd      	mov	sp, r7
 800752a:	b009      	add	sp, #36	; 0x24
 800752c:	bd90      	pop	{r4, r7, pc}

0800752e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	000a      	movs	r2, r1
 8007538:	1cfb      	adds	r3, r7, #3
 800753a:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800753c:	1cfb      	adds	r3, r7, #3
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b0a      	cmp	r3, #10
 8007542:	d104      	bne.n	800754e <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	210d      	movs	r1, #13
 8007548:	0018      	movs	r0, r3
 800754a:	f7ff fff0 	bl	800752e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	db26      	blt.n	80075a8 <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	60fa      	str	r2, [r7, #12]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	18d3      	adds	r3, r2, r3
 8007564:	1cfa      	adds	r2, r7, #3
 8007566:	7812      	ldrb	r2, [r2, #0]
 8007568:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b3c      	cmp	r3, #60	; 0x3c
 800756e:	dd12      	ble.n	8007596 <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	330c      	adds	r3, #12
 8007578:	0019      	movs	r1, r3
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	2308      	movs	r3, #8
 800757e:	18fb      	adds	r3, r7, r3
 8007580:	f7ff fc7c 	bl	8006e7c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	429a      	cmp	r2, r3
 800758a:	d101      	bne.n	8007590 <putc_bfd+0x62>
 800758c:	2300      	movs	r3, #0
 800758e:	e001      	b.n	8007594 <putc_bfd+0x66>
 8007590:	2301      	movs	r3, #1
 8007592:	425b      	negs	r3, r3
 8007594:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	609a      	str	r2, [r3, #8]
 80075a6:	e000      	b.n	80075aa <putc_bfd+0x7c>
	if (i < 0) return;
 80075a8:	46c0      	nop			; (mov r8, r8)
}
 80075aa:	46bd      	mov	sp, r7
 80075ac:	b004      	add	sp, #16
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	db15      	blt.n	80075ec <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	330c      	adds	r3, #12
 80075c8:	0019      	movs	r1, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	001a      	movs	r2, r3
 80075d0:	230c      	movs	r3, #12
 80075d2:	18fb      	adds	r3, r7, r3
 80075d4:	f7ff fc52 	bl	8006e7c <f_write>
 80075d8:	1e03      	subs	r3, r0, #0
 80075da:	d107      	bne.n	80075ec <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d102      	bne.n	80075ec <putc_flush+0x3c>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	e001      	b.n	80075f0 <putc_flush+0x40>
	return EOF;
 80075ec:	2301      	movs	r3, #1
 80075ee:	425b      	negs	r3, r3
}
 80075f0:	0018      	movs	r0, r3
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b004      	add	sp, #16
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	609a      	str	r2, [r3, #8]
}
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	46bd      	mov	sp, r7
 800761a:	b002      	add	sp, #8
 800761c:	bd80      	pop	{r7, pc}

0800761e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b096      	sub	sp, #88	; 0x58
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	230c      	movs	r3, #12
 800762c:	18fb      	adds	r3, r7, r3
 800762e:	0011      	movs	r1, r2
 8007630:	0018      	movs	r0, r3
 8007632:	f7ff ffe1 	bl	80075f8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007636:	e009      	b.n	800764c <f_puts+0x2e>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	781a      	ldrb	r2, [r3, #0]
 8007640:	230c      	movs	r3, #12
 8007642:	18fb      	adds	r3, r7, r3
 8007644:	0011      	movs	r1, r2
 8007646:	0018      	movs	r0, r3
 8007648:	f7ff ff71 	bl	800752e <putc_bfd>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1f1      	bne.n	8007638 <f_puts+0x1a>
	return putc_flush(&pb);
 8007654:	230c      	movs	r3, #12
 8007656:	18fb      	adds	r3, r7, r3
 8007658:	0018      	movs	r0, r3
 800765a:	f7ff ffa9 	bl	80075b0 <putc_flush>
 800765e:	0003      	movs	r3, r0
}
 8007660:	0018      	movs	r0, r3
 8007662:	46bd      	mov	sp, r7
 8007664:	b016      	add	sp, #88	; 0x58
 8007666:	bd80      	pop	{r7, pc}

08007668 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007668:	b590      	push	{r4, r7, lr}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	1dfb      	adds	r3, r7, #7
 8007674:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8007676:	2417      	movs	r4, #23
 8007678:	193b      	adds	r3, r7, r4
 800767a:	2201      	movs	r2, #1
 800767c:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800767e:	2016      	movs	r0, #22
 8007680:	183b      	adds	r3, r7, r0
 8007682:	2200      	movs	r2, #0
 8007684:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8007686:	4b21      	ldr	r3, [pc, #132]	; (800770c <FATFS_LinkDriverEx+0xa4>)
 8007688:	7a5b      	ldrb	r3, [r3, #9]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d136      	bne.n	80076fe <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007690:	4b1e      	ldr	r3, [pc, #120]	; (800770c <FATFS_LinkDriverEx+0xa4>)
 8007692:	7a5b      	ldrb	r3, [r3, #9]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	001a      	movs	r2, r3
 8007698:	4b1c      	ldr	r3, [pc, #112]	; (800770c <FATFS_LinkDriverEx+0xa4>)
 800769a:	2100      	movs	r1, #0
 800769c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800769e:	4b1b      	ldr	r3, [pc, #108]	; (800770c <FATFS_LinkDriverEx+0xa4>)
 80076a0:	7a5b      	ldrb	r3, [r3, #9]
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	4a19      	ldr	r2, [pc, #100]	; (800770c <FATFS_LinkDriverEx+0xa4>)
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	18d3      	adds	r3, r2, r3
 80076aa:	3304      	adds	r3, #4
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 80076b0:	4b16      	ldr	r3, [pc, #88]	; (800770c <FATFS_LinkDriverEx+0xa4>)
 80076b2:	7a5b      	ldrb	r3, [r3, #9]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	001a      	movs	r2, r3
 80076b8:	4b14      	ldr	r3, [pc, #80]	; (800770c <FATFS_LinkDriverEx+0xa4>)
 80076ba:	189b      	adds	r3, r3, r2
 80076bc:	1dfa      	adds	r2, r7, #7
 80076be:	7812      	ldrb	r2, [r2, #0]
 80076c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80076c2:	4b12      	ldr	r3, [pc, #72]	; (800770c <FATFS_LinkDriverEx+0xa4>)
 80076c4:	7a5b      	ldrb	r3, [r3, #9]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	b2d1      	uxtb	r1, r2
 80076cc:	4a0f      	ldr	r2, [pc, #60]	; (800770c <FATFS_LinkDriverEx+0xa4>)
 80076ce:	7251      	strb	r1, [r2, #9]
 80076d0:	183a      	adds	r2, r7, r0
 80076d2:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 80076d4:	183b      	adds	r3, r7, r0
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	3330      	adds	r3, #48	; 0x30
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	3301      	adds	r3, #1
 80076e4:	223a      	movs	r2, #58	; 0x3a
 80076e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	3302      	adds	r3, #2
 80076ec:	222f      	movs	r2, #47	; 0x2f
 80076ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	3303      	adds	r3, #3
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80076f8:	193b      	adds	r3, r7, r4
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80076fe:	2317      	movs	r3, #23
 8007700:	18fb      	adds	r3, r7, r3
 8007702:	781b      	ldrb	r3, [r3, #0]
}
 8007704:	0018      	movs	r0, r3
 8007706:	46bd      	mov	sp, r7
 8007708:	b007      	add	sp, #28
 800770a:	bd90      	pop	{r4, r7, pc}
 800770c:	20000334 	.word	0x20000334

08007710 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	0018      	movs	r0, r3
 8007722:	f7ff ffa1 	bl	8007668 <FATFS_LinkDriverEx>
 8007726:	0003      	movs	r3, r0
}
 8007728:	0018      	movs	r0, r3
 800772a:	46bd      	mov	sp, r7
 800772c:	b002      	add	sp, #8
 800772e:	bd80      	pop	{r7, pc}

08007730 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	0002      	movs	r2, r0
 8007738:	6039      	str	r1, [r7, #0]
 800773a:	1dbb      	adds	r3, r7, #6
 800773c:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800773e:	1dbb      	adds	r3, r7, #6
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	2b7f      	cmp	r3, #127	; 0x7f
 8007744:	d805      	bhi.n	8007752 <ff_convert+0x22>
		c = chr;
 8007746:	230e      	movs	r3, #14
 8007748:	18fb      	adds	r3, r7, r3
 800774a:	1dba      	adds	r2, r7, #6
 800774c:	8812      	ldrh	r2, [r2, #0]
 800774e:	801a      	strh	r2, [r3, #0]
 8007750:	e037      	b.n	80077c2 <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d010      	beq.n	800777a <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007758:	1dbb      	adds	r3, r7, #6
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	2bff      	cmp	r3, #255	; 0xff
 800775e:	d807      	bhi.n	8007770 <ff_convert+0x40>
 8007760:	1dbb      	adds	r3, r7, #6
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	3b80      	subs	r3, #128	; 0x80
 8007766:	001a      	movs	r2, r3
 8007768:	4b19      	ldr	r3, [pc, #100]	; (80077d0 <ff_convert+0xa0>)
 800776a:	0052      	lsls	r2, r2, #1
 800776c:	5ad2      	ldrh	r2, [r2, r3]
 800776e:	e000      	b.n	8007772 <ff_convert+0x42>
 8007770:	2200      	movs	r2, #0
 8007772:	230e      	movs	r3, #14
 8007774:	18fb      	adds	r3, r7, r3
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	e023      	b.n	80077c2 <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800777a:	230e      	movs	r3, #14
 800777c:	18fb      	adds	r3, r7, r3
 800777e:	2200      	movs	r2, #0
 8007780:	801a      	strh	r2, [r3, #0]
 8007782:	e00e      	b.n	80077a2 <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 8007784:	210e      	movs	r1, #14
 8007786:	187b      	adds	r3, r7, r1
 8007788:	881a      	ldrh	r2, [r3, #0]
 800778a:	4b11      	ldr	r3, [pc, #68]	; (80077d0 <ff_convert+0xa0>)
 800778c:	0052      	lsls	r2, r2, #1
 800778e:	5ad3      	ldrh	r3, [r2, r3]
 8007790:	1dba      	adds	r2, r7, #6
 8007792:	8812      	ldrh	r2, [r2, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d00a      	beq.n	80077ae <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 8007798:	187b      	adds	r3, r7, r1
 800779a:	881a      	ldrh	r2, [r3, #0]
 800779c:	187b      	adds	r3, r7, r1
 800779e:	3201      	adds	r2, #1
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	230e      	movs	r3, #14
 80077a4:	18fb      	adds	r3, r7, r3
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	2b7f      	cmp	r3, #127	; 0x7f
 80077aa:	d9eb      	bls.n	8007784 <ff_convert+0x54>
 80077ac:	e000      	b.n	80077b0 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 80077ae:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 80077b0:	210e      	movs	r1, #14
 80077b2:	187b      	adds	r3, r7, r1
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	3380      	adds	r3, #128	; 0x80
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	187b      	adds	r3, r7, r1
 80077bc:	21ff      	movs	r1, #255	; 0xff
 80077be:	400a      	ands	r2, r1
 80077c0:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 80077c2:	230e      	movs	r3, #14
 80077c4:	18fb      	adds	r3, r7, r3
 80077c6:	881b      	ldrh	r3, [r3, #0]
}
 80077c8:	0018      	movs	r0, r3
 80077ca:	46bd      	mov	sp, r7
 80077cc:	b004      	add	sp, #16
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	08008b44 	.word	0x08008b44

080077d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80077d4:	b5b0      	push	{r4, r5, r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	0002      	movs	r2, r0
 80077dc:	1dbb      	adds	r3, r7, #6
 80077de:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80077e0:	1dbb      	adds	r3, r7, #6
 80077e2:	881a      	ldrh	r2, [r3, #0]
 80077e4:	2380      	movs	r3, #128	; 0x80
 80077e6:	015b      	lsls	r3, r3, #5
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d201      	bcs.n	80077f0 <ff_wtoupper+0x1c>
 80077ec:	4b4d      	ldr	r3, [pc, #308]	; (8007924 <ff_wtoupper+0x150>)
 80077ee:	e000      	b.n	80077f2 <ff_wtoupper+0x1e>
 80077f0:	4b4d      	ldr	r3, [pc, #308]	; (8007928 <ff_wtoupper+0x154>)
 80077f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	1c9a      	adds	r2, r3, #2
 80077f8:	617a      	str	r2, [r7, #20]
 80077fa:	2412      	movs	r4, #18
 80077fc:	193a      	adds	r2, r7, r4
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 8007802:	193b      	adds	r3, r7, r4
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d100      	bne.n	800780c <ff_wtoupper+0x38>
 800780a:	e084      	b.n	8007916 <ff_wtoupper+0x142>
 800780c:	1dba      	adds	r2, r7, #6
 800780e:	193b      	adds	r3, r7, r4
 8007810:	8812      	ldrh	r2, [r2, #0]
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d200      	bcs.n	800781a <ff_wtoupper+0x46>
 8007818:	e07d      	b.n	8007916 <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	1c9a      	adds	r2, r3, #2
 800781e:	617a      	str	r2, [r7, #20]
 8007820:	2010      	movs	r0, #16
 8007822:	183a      	adds	r2, r7, r0
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	8013      	strh	r3, [r2, #0]
 8007828:	250e      	movs	r5, #14
 800782a:	197b      	adds	r3, r7, r5
 800782c:	183a      	adds	r2, r7, r0
 800782e:	8812      	ldrh	r2, [r2, #0]
 8007830:	0a12      	lsrs	r2, r2, #8
 8007832:	801a      	strh	r2, [r3, #0]
 8007834:	183b      	adds	r3, r7, r0
 8007836:	183a      	adds	r2, r7, r0
 8007838:	8812      	ldrh	r2, [r2, #0]
 800783a:	21ff      	movs	r1, #255	; 0xff
 800783c:	400a      	ands	r2, r1
 800783e:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 8007840:	1dbb      	adds	r3, r7, #6
 8007842:	881a      	ldrh	r2, [r3, #0]
 8007844:	193b      	adds	r3, r7, r4
 8007846:	8819      	ldrh	r1, [r3, #0]
 8007848:	183b      	adds	r3, r7, r0
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	18cb      	adds	r3, r1, r3
 800784e:	429a      	cmp	r2, r3
 8007850:	da52      	bge.n	80078f8 <ff_wtoupper+0x124>
			switch (cmd) {
 8007852:	197b      	adds	r3, r7, r5
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	2b08      	cmp	r3, #8
 8007858:	d85c      	bhi.n	8007914 <ff_wtoupper+0x140>
 800785a:	009a      	lsls	r2, r3, #2
 800785c:	4b33      	ldr	r3, [pc, #204]	; (800792c <ff_wtoupper+0x158>)
 800785e:	18d3      	adds	r3, r2, r3
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007864:	1dbb      	adds	r3, r7, #6
 8007866:	881a      	ldrh	r2, [r3, #0]
 8007868:	2312      	movs	r3, #18
 800786a:	18fb      	adds	r3, r7, r3
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	18d2      	adds	r2, r2, r3
 8007876:	1dbb      	adds	r3, r7, #6
 8007878:	8812      	ldrh	r2, [r2, #0]
 800787a:	801a      	strh	r2, [r3, #0]
 800787c:	e03b      	b.n	80078f6 <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800787e:	1dba      	adds	r2, r7, #6
 8007880:	2312      	movs	r3, #18
 8007882:	18fb      	adds	r3, r7, r3
 8007884:	8812      	ldrh	r2, [r2, #0]
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	b29b      	uxth	r3, r3
 800788c:	2201      	movs	r2, #1
 800788e:	4013      	ands	r3, r2
 8007890:	b29a      	uxth	r2, r3
 8007892:	1dbb      	adds	r3, r7, #6
 8007894:	1db9      	adds	r1, r7, #6
 8007896:	8809      	ldrh	r1, [r1, #0]
 8007898:	1a8a      	subs	r2, r1, r2
 800789a:	801a      	strh	r2, [r3, #0]
 800789c:	e02b      	b.n	80078f6 <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 800789e:	1dbb      	adds	r3, r7, #6
 80078a0:	1dba      	adds	r2, r7, #6
 80078a2:	8812      	ldrh	r2, [r2, #0]
 80078a4:	3a10      	subs	r2, #16
 80078a6:	801a      	strh	r2, [r3, #0]
 80078a8:	e025      	b.n	80078f6 <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80078aa:	1dbb      	adds	r3, r7, #6
 80078ac:	1dba      	adds	r2, r7, #6
 80078ae:	8812      	ldrh	r2, [r2, #0]
 80078b0:	3a20      	subs	r2, #32
 80078b2:	801a      	strh	r2, [r3, #0]
 80078b4:	e01f      	b.n	80078f6 <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80078b6:	1dbb      	adds	r3, r7, #6
 80078b8:	1dba      	adds	r2, r7, #6
 80078ba:	8812      	ldrh	r2, [r2, #0]
 80078bc:	3a30      	subs	r2, #48	; 0x30
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	e019      	b.n	80078f6 <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80078c2:	1dbb      	adds	r3, r7, #6
 80078c4:	1dba      	adds	r2, r7, #6
 80078c6:	8812      	ldrh	r2, [r2, #0]
 80078c8:	3a1a      	subs	r2, #26
 80078ca:	801a      	strh	r2, [r3, #0]
 80078cc:	e013      	b.n	80078f6 <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 80078ce:	1dbb      	adds	r3, r7, #6
 80078d0:	1dba      	adds	r2, r7, #6
 80078d2:	8812      	ldrh	r2, [r2, #0]
 80078d4:	3208      	adds	r2, #8
 80078d6:	801a      	strh	r2, [r3, #0]
 80078d8:	e00d      	b.n	80078f6 <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 80078da:	1dbb      	adds	r3, r7, #6
 80078dc:	1dba      	adds	r2, r7, #6
 80078de:	8812      	ldrh	r2, [r2, #0]
 80078e0:	3a50      	subs	r2, #80	; 0x50
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e007      	b.n	80078f6 <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80078e6:	1dbb      	adds	r3, r7, #6
 80078e8:	1dba      	adds	r2, r7, #6
 80078ea:	8812      	ldrh	r2, [r2, #0]
 80078ec:	4910      	ldr	r1, [pc, #64]	; (8007930 <ff_wtoupper+0x15c>)
 80078ee:	468c      	mov	ip, r1
 80078f0:	4462      	add	r2, ip
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	46c0      	nop			; (mov r8, r8)
			}
			break;
 80078f6:	e00d      	b.n	8007914 <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 80078f8:	230e      	movs	r3, #14
 80078fa:	18fb      	adds	r3, r7, r3
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d000      	beq.n	8007904 <ff_wtoupper+0x130>
 8007902:	e777      	b.n	80077f4 <ff_wtoupper+0x20>
 8007904:	2310      	movs	r3, #16
 8007906:	18fb      	adds	r3, r7, r3
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	18d3      	adds	r3, r2, r3
 8007910:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007912:	e76f      	b.n	80077f4 <ff_wtoupper+0x20>
			break;
 8007914:	46c0      	nop			; (mov r8, r8)
	}

	return chr;
 8007916:	1dbb      	adds	r3, r7, #6
 8007918:	881b      	ldrh	r3, [r3, #0]
}
 800791a:	0018      	movs	r0, r3
 800791c:	46bd      	mov	sp, r7
 800791e:	b006      	add	sp, #24
 8007920:	bdb0      	pop	{r4, r5, r7, pc}
 8007922:	46c0      	nop			; (mov r8, r8)
 8007924:	08008c68 	.word	0x08008c68
 8007928:	08008e5c 	.word	0x08008e5c
 800792c:	08008c44 	.word	0x08008c44
 8007930:	ffffe3a0 	.word	0xffffe3a0

08007934 <std>:
 8007934:	2300      	movs	r3, #0
 8007936:	b510      	push	{r4, lr}
 8007938:	0004      	movs	r4, r0
 800793a:	6003      	str	r3, [r0, #0]
 800793c:	6043      	str	r3, [r0, #4]
 800793e:	6083      	str	r3, [r0, #8]
 8007940:	8181      	strh	r1, [r0, #12]
 8007942:	6643      	str	r3, [r0, #100]	; 0x64
 8007944:	81c2      	strh	r2, [r0, #14]
 8007946:	6103      	str	r3, [r0, #16]
 8007948:	6143      	str	r3, [r0, #20]
 800794a:	6183      	str	r3, [r0, #24]
 800794c:	0019      	movs	r1, r3
 800794e:	2208      	movs	r2, #8
 8007950:	305c      	adds	r0, #92	; 0x5c
 8007952:	f000 fa15 	bl	8007d80 <memset>
 8007956:	4b0b      	ldr	r3, [pc, #44]	; (8007984 <std+0x50>)
 8007958:	6224      	str	r4, [r4, #32]
 800795a:	6263      	str	r3, [r4, #36]	; 0x24
 800795c:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <std+0x54>)
 800795e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007960:	4b0a      	ldr	r3, [pc, #40]	; (800798c <std+0x58>)
 8007962:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007964:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <std+0x5c>)
 8007966:	6323      	str	r3, [r4, #48]	; 0x30
 8007968:	4b0a      	ldr	r3, [pc, #40]	; (8007994 <std+0x60>)
 800796a:	429c      	cmp	r4, r3
 800796c:	d005      	beq.n	800797a <std+0x46>
 800796e:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <std+0x64>)
 8007970:	429c      	cmp	r4, r3
 8007972:	d002      	beq.n	800797a <std+0x46>
 8007974:	4b09      	ldr	r3, [pc, #36]	; (800799c <std+0x68>)
 8007976:	429c      	cmp	r4, r3
 8007978:	d103      	bne.n	8007982 <std+0x4e>
 800797a:	0020      	movs	r0, r4
 800797c:	3058      	adds	r0, #88	; 0x58
 800797e:	f000 fa7f 	bl	8007e80 <__retarget_lock_init_recursive>
 8007982:	bd10      	pop	{r4, pc}
 8007984:	08007b9d 	.word	0x08007b9d
 8007988:	08007bc5 	.word	0x08007bc5
 800798c:	08007bfd 	.word	0x08007bfd
 8007990:	08007c29 	.word	0x08007c29
 8007994:	20000340 	.word	0x20000340
 8007998:	200003a8 	.word	0x200003a8
 800799c:	20000410 	.word	0x20000410

080079a0 <stdio_exit_handler>:
 80079a0:	b510      	push	{r4, lr}
 80079a2:	4a03      	ldr	r2, [pc, #12]	; (80079b0 <stdio_exit_handler+0x10>)
 80079a4:	4903      	ldr	r1, [pc, #12]	; (80079b4 <stdio_exit_handler+0x14>)
 80079a6:	4804      	ldr	r0, [pc, #16]	; (80079b8 <stdio_exit_handler+0x18>)
 80079a8:	f000 f86c 	bl	8007a84 <_fwalk_sglue>
 80079ac:	bd10      	pop	{r4, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	20000024 	.word	0x20000024
 80079b4:	08008721 	.word	0x08008721
 80079b8:	20000030 	.word	0x20000030

080079bc <cleanup_stdio>:
 80079bc:	6841      	ldr	r1, [r0, #4]
 80079be:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <cleanup_stdio+0x30>)
 80079c0:	b510      	push	{r4, lr}
 80079c2:	0004      	movs	r4, r0
 80079c4:	4299      	cmp	r1, r3
 80079c6:	d001      	beq.n	80079cc <cleanup_stdio+0x10>
 80079c8:	f000 feaa 	bl	8008720 <_fflush_r>
 80079cc:	68a1      	ldr	r1, [r4, #8]
 80079ce:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <cleanup_stdio+0x34>)
 80079d0:	4299      	cmp	r1, r3
 80079d2:	d002      	beq.n	80079da <cleanup_stdio+0x1e>
 80079d4:	0020      	movs	r0, r4
 80079d6:	f000 fea3 	bl	8008720 <_fflush_r>
 80079da:	68e1      	ldr	r1, [r4, #12]
 80079dc:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <cleanup_stdio+0x38>)
 80079de:	4299      	cmp	r1, r3
 80079e0:	d002      	beq.n	80079e8 <cleanup_stdio+0x2c>
 80079e2:	0020      	movs	r0, r4
 80079e4:	f000 fe9c 	bl	8008720 <_fflush_r>
 80079e8:	bd10      	pop	{r4, pc}
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	20000340 	.word	0x20000340
 80079f0:	200003a8 	.word	0x200003a8
 80079f4:	20000410 	.word	0x20000410

080079f8 <global_stdio_init.part.0>:
 80079f8:	b510      	push	{r4, lr}
 80079fa:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <global_stdio_init.part.0+0x28>)
 80079fc:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <global_stdio_init.part.0+0x2c>)
 80079fe:	2104      	movs	r1, #4
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	4809      	ldr	r0, [pc, #36]	; (8007a28 <global_stdio_init.part.0+0x30>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	f7ff ff95 	bl	8007934 <std>
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	2109      	movs	r1, #9
 8007a0e:	4807      	ldr	r0, [pc, #28]	; (8007a2c <global_stdio_init.part.0+0x34>)
 8007a10:	f7ff ff90 	bl	8007934 <std>
 8007a14:	2202      	movs	r2, #2
 8007a16:	2112      	movs	r1, #18
 8007a18:	4805      	ldr	r0, [pc, #20]	; (8007a30 <global_stdio_init.part.0+0x38>)
 8007a1a:	f7ff ff8b 	bl	8007934 <std>
 8007a1e:	bd10      	pop	{r4, pc}
 8007a20:	20000478 	.word	0x20000478
 8007a24:	080079a1 	.word	0x080079a1
 8007a28:	20000340 	.word	0x20000340
 8007a2c:	200003a8 	.word	0x200003a8
 8007a30:	20000410 	.word	0x20000410

08007a34 <__sfp_lock_acquire>:
 8007a34:	b510      	push	{r4, lr}
 8007a36:	4802      	ldr	r0, [pc, #8]	; (8007a40 <__sfp_lock_acquire+0xc>)
 8007a38:	f000 fa23 	bl	8007e82 <__retarget_lock_acquire_recursive>
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	20000481 	.word	0x20000481

08007a44 <__sfp_lock_release>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	4802      	ldr	r0, [pc, #8]	; (8007a50 <__sfp_lock_release+0xc>)
 8007a48:	f000 fa1c 	bl	8007e84 <__retarget_lock_release_recursive>
 8007a4c:	bd10      	pop	{r4, pc}
 8007a4e:	46c0      	nop			; (mov r8, r8)
 8007a50:	20000481 	.word	0x20000481

08007a54 <__sinit>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	0004      	movs	r4, r0
 8007a58:	f7ff ffec 	bl	8007a34 <__sfp_lock_acquire>
 8007a5c:	6a23      	ldr	r3, [r4, #32]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <__sinit+0x14>
 8007a62:	f7ff ffef 	bl	8007a44 <__sfp_lock_release>
 8007a66:	bd10      	pop	{r4, pc}
 8007a68:	4b04      	ldr	r3, [pc, #16]	; (8007a7c <__sinit+0x28>)
 8007a6a:	6223      	str	r3, [r4, #32]
 8007a6c:	4b04      	ldr	r3, [pc, #16]	; (8007a80 <__sinit+0x2c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1f6      	bne.n	8007a62 <__sinit+0xe>
 8007a74:	f7ff ffc0 	bl	80079f8 <global_stdio_init.part.0>
 8007a78:	e7f3      	b.n	8007a62 <__sinit+0xe>
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	080079bd 	.word	0x080079bd
 8007a80:	20000478 	.word	0x20000478

08007a84 <_fwalk_sglue>:
 8007a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a86:	0014      	movs	r4, r2
 8007a88:	2600      	movs	r6, #0
 8007a8a:	9000      	str	r0, [sp, #0]
 8007a8c:	9101      	str	r1, [sp, #4]
 8007a8e:	68a5      	ldr	r5, [r4, #8]
 8007a90:	6867      	ldr	r7, [r4, #4]
 8007a92:	3f01      	subs	r7, #1
 8007a94:	d504      	bpl.n	8007aa0 <_fwalk_sglue+0x1c>
 8007a96:	6824      	ldr	r4, [r4, #0]
 8007a98:	2c00      	cmp	r4, #0
 8007a9a:	d1f8      	bne.n	8007a8e <_fwalk_sglue+0xa>
 8007a9c:	0030      	movs	r0, r6
 8007a9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007aa0:	89ab      	ldrh	r3, [r5, #12]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d908      	bls.n	8007ab8 <_fwalk_sglue+0x34>
 8007aa6:	220e      	movs	r2, #14
 8007aa8:	5eab      	ldrsh	r3, [r5, r2]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	d004      	beq.n	8007ab8 <_fwalk_sglue+0x34>
 8007aae:	0029      	movs	r1, r5
 8007ab0:	9800      	ldr	r0, [sp, #0]
 8007ab2:	9b01      	ldr	r3, [sp, #4]
 8007ab4:	4798      	blx	r3
 8007ab6:	4306      	orrs	r6, r0
 8007ab8:	3568      	adds	r5, #104	; 0x68
 8007aba:	e7ea      	b.n	8007a92 <_fwalk_sglue+0xe>

08007abc <iprintf>:
 8007abc:	b40f      	push	{r0, r1, r2, r3}
 8007abe:	b507      	push	{r0, r1, r2, lr}
 8007ac0:	4905      	ldr	r1, [pc, #20]	; (8007ad8 <iprintf+0x1c>)
 8007ac2:	ab04      	add	r3, sp, #16
 8007ac4:	6808      	ldr	r0, [r1, #0]
 8007ac6:	cb04      	ldmia	r3!, {r2}
 8007ac8:	6881      	ldr	r1, [r0, #8]
 8007aca:	9301      	str	r3, [sp, #4]
 8007acc:	f000 fb02 	bl	80080d4 <_vfiprintf_r>
 8007ad0:	b003      	add	sp, #12
 8007ad2:	bc08      	pop	{r3}
 8007ad4:	b004      	add	sp, #16
 8007ad6:	4718      	bx	r3
 8007ad8:	2000007c 	.word	0x2000007c

08007adc <_puts_r>:
 8007adc:	6a03      	ldr	r3, [r0, #32]
 8007ade:	b570      	push	{r4, r5, r6, lr}
 8007ae0:	0005      	movs	r5, r0
 8007ae2:	000e      	movs	r6, r1
 8007ae4:	6884      	ldr	r4, [r0, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <_puts_r+0x12>
 8007aea:	f7ff ffb3 	bl	8007a54 <__sinit>
 8007aee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007af0:	07db      	lsls	r3, r3, #31
 8007af2:	d405      	bmi.n	8007b00 <_puts_r+0x24>
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	059b      	lsls	r3, r3, #22
 8007af8:	d402      	bmi.n	8007b00 <_puts_r+0x24>
 8007afa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007afc:	f000 f9c1 	bl	8007e82 <__retarget_lock_acquire_recursive>
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	071b      	lsls	r3, r3, #28
 8007b04:	d502      	bpl.n	8007b0c <_puts_r+0x30>
 8007b06:	6923      	ldr	r3, [r4, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d11f      	bne.n	8007b4c <_puts_r+0x70>
 8007b0c:	0021      	movs	r1, r4
 8007b0e:	0028      	movs	r0, r5
 8007b10:	f000 f8d2 	bl	8007cb8 <__swsetup_r>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d019      	beq.n	8007b4c <_puts_r+0x70>
 8007b18:	2501      	movs	r5, #1
 8007b1a:	426d      	negs	r5, r5
 8007b1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b1e:	07db      	lsls	r3, r3, #31
 8007b20:	d405      	bmi.n	8007b2e <_puts_r+0x52>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	059b      	lsls	r3, r3, #22
 8007b26:	d402      	bmi.n	8007b2e <_puts_r+0x52>
 8007b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b2a:	f000 f9ab 	bl	8007e84 <__retarget_lock_release_recursive>
 8007b2e:	0028      	movs	r0, r5
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
 8007b32:	3601      	adds	r6, #1
 8007b34:	60a3      	str	r3, [r4, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	da04      	bge.n	8007b44 <_puts_r+0x68>
 8007b3a:	69a2      	ldr	r2, [r4, #24]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	dc16      	bgt.n	8007b6e <_puts_r+0x92>
 8007b40:	290a      	cmp	r1, #10
 8007b42:	d014      	beq.n	8007b6e <_puts_r+0x92>
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	6022      	str	r2, [r4, #0]
 8007b4a:	7019      	strb	r1, [r3, #0]
 8007b4c:	68a3      	ldr	r3, [r4, #8]
 8007b4e:	7831      	ldrb	r1, [r6, #0]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	2900      	cmp	r1, #0
 8007b54:	d1ed      	bne.n	8007b32 <_puts_r+0x56>
 8007b56:	60a3      	str	r3, [r4, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	da0f      	bge.n	8007b7c <_puts_r+0xa0>
 8007b5c:	0028      	movs	r0, r5
 8007b5e:	0022      	movs	r2, r4
 8007b60:	310a      	adds	r1, #10
 8007b62:	f000 f867 	bl	8007c34 <__swbuf_r>
 8007b66:	250a      	movs	r5, #10
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d1d7      	bne.n	8007b1c <_puts_r+0x40>
 8007b6c:	e7d4      	b.n	8007b18 <_puts_r+0x3c>
 8007b6e:	0022      	movs	r2, r4
 8007b70:	0028      	movs	r0, r5
 8007b72:	f000 f85f 	bl	8007c34 <__swbuf_r>
 8007b76:	3001      	adds	r0, #1
 8007b78:	d1e8      	bne.n	8007b4c <_puts_r+0x70>
 8007b7a:	e7cd      	b.n	8007b18 <_puts_r+0x3c>
 8007b7c:	250a      	movs	r5, #10
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	6022      	str	r2, [r4, #0]
 8007b84:	701d      	strb	r5, [r3, #0]
 8007b86:	e7c9      	b.n	8007b1c <_puts_r+0x40>

08007b88 <puts>:
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	4b03      	ldr	r3, [pc, #12]	; (8007b98 <puts+0x10>)
 8007b8c:	0001      	movs	r1, r0
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	f7ff ffa4 	bl	8007adc <_puts_r>
 8007b94:	bd10      	pop	{r4, pc}
 8007b96:	46c0      	nop			; (mov r8, r8)
 8007b98:	2000007c 	.word	0x2000007c

08007b9c <__sread>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	000c      	movs	r4, r1
 8007ba0:	250e      	movs	r5, #14
 8007ba2:	5f49      	ldrsh	r1, [r1, r5]
 8007ba4:	f000 f91a 	bl	8007ddc <_read_r>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	db03      	blt.n	8007bb4 <__sread+0x18>
 8007bac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007bae:	181b      	adds	r3, r3, r0
 8007bb0:	6563      	str	r3, [r4, #84]	; 0x54
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	4a02      	ldr	r2, [pc, #8]	; (8007bc0 <__sread+0x24>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	81a3      	strh	r3, [r4, #12]
 8007bbc:	e7f9      	b.n	8007bb2 <__sread+0x16>
 8007bbe:	46c0      	nop			; (mov r8, r8)
 8007bc0:	ffffefff 	.word	0xffffefff

08007bc4 <__swrite>:
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	001f      	movs	r7, r3
 8007bc8:	898b      	ldrh	r3, [r1, #12]
 8007bca:	0005      	movs	r5, r0
 8007bcc:	000c      	movs	r4, r1
 8007bce:	0016      	movs	r6, r2
 8007bd0:	05db      	lsls	r3, r3, #23
 8007bd2:	d505      	bpl.n	8007be0 <__swrite+0x1c>
 8007bd4:	230e      	movs	r3, #14
 8007bd6:	5ec9      	ldrsh	r1, [r1, r3]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2302      	movs	r3, #2
 8007bdc:	f000 f8ea 	bl	8007db4 <_lseek_r>
 8007be0:	89a3      	ldrh	r3, [r4, #12]
 8007be2:	4a05      	ldr	r2, [pc, #20]	; (8007bf8 <__swrite+0x34>)
 8007be4:	0028      	movs	r0, r5
 8007be6:	4013      	ands	r3, r2
 8007be8:	81a3      	strh	r3, [r4, #12]
 8007bea:	0032      	movs	r2, r6
 8007bec:	230e      	movs	r3, #14
 8007bee:	5ee1      	ldrsh	r1, [r4, r3]
 8007bf0:	003b      	movs	r3, r7
 8007bf2:	f000 f907 	bl	8007e04 <_write_r>
 8007bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bf8:	ffffefff 	.word	0xffffefff

08007bfc <__sseek>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	000c      	movs	r4, r1
 8007c00:	250e      	movs	r5, #14
 8007c02:	5f49      	ldrsh	r1, [r1, r5]
 8007c04:	f000 f8d6 	bl	8007db4 <_lseek_r>
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	1c42      	adds	r2, r0, #1
 8007c0c:	d103      	bne.n	8007c16 <__sseek+0x1a>
 8007c0e:	4a05      	ldr	r2, [pc, #20]	; (8007c24 <__sseek+0x28>)
 8007c10:	4013      	ands	r3, r2
 8007c12:	81a3      	strh	r3, [r4, #12]
 8007c14:	bd70      	pop	{r4, r5, r6, pc}
 8007c16:	2280      	movs	r2, #128	; 0x80
 8007c18:	0152      	lsls	r2, r2, #5
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	6560      	str	r0, [r4, #84]	; 0x54
 8007c20:	e7f8      	b.n	8007c14 <__sseek+0x18>
 8007c22:	46c0      	nop			; (mov r8, r8)
 8007c24:	ffffefff 	.word	0xffffefff

08007c28 <__sclose>:
 8007c28:	b510      	push	{r4, lr}
 8007c2a:	230e      	movs	r3, #14
 8007c2c:	5ec9      	ldrsh	r1, [r1, r3]
 8007c2e:	f000 f8af 	bl	8007d90 <_close_r>
 8007c32:	bd10      	pop	{r4, pc}

08007c34 <__swbuf_r>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	0006      	movs	r6, r0
 8007c38:	000d      	movs	r5, r1
 8007c3a:	0014      	movs	r4, r2
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d004      	beq.n	8007c4a <__swbuf_r+0x16>
 8007c40:	6a03      	ldr	r3, [r0, #32]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <__swbuf_r+0x16>
 8007c46:	f7ff ff05 	bl	8007a54 <__sinit>
 8007c4a:	69a3      	ldr	r3, [r4, #24]
 8007c4c:	60a3      	str	r3, [r4, #8]
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	071b      	lsls	r3, r3, #28
 8007c52:	d528      	bpl.n	8007ca6 <__swbuf_r+0x72>
 8007c54:	6923      	ldr	r3, [r4, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d025      	beq.n	8007ca6 <__swbuf_r+0x72>
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	6820      	ldr	r0, [r4, #0]
 8007c5e:	b2ef      	uxtb	r7, r5
 8007c60:	1ac0      	subs	r0, r0, r3
 8007c62:	6963      	ldr	r3, [r4, #20]
 8007c64:	b2ed      	uxtb	r5, r5
 8007c66:	4283      	cmp	r3, r0
 8007c68:	dc05      	bgt.n	8007c76 <__swbuf_r+0x42>
 8007c6a:	0021      	movs	r1, r4
 8007c6c:	0030      	movs	r0, r6
 8007c6e:	f000 fd57 	bl	8008720 <_fflush_r>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d11d      	bne.n	8007cb2 <__swbuf_r+0x7e>
 8007c76:	68a3      	ldr	r3, [r4, #8]
 8007c78:	3001      	adds	r0, #1
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	60a3      	str	r3, [r4, #8]
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	6022      	str	r2, [r4, #0]
 8007c84:	701f      	strb	r7, [r3, #0]
 8007c86:	6963      	ldr	r3, [r4, #20]
 8007c88:	4283      	cmp	r3, r0
 8007c8a:	d004      	beq.n	8007c96 <__swbuf_r+0x62>
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	07db      	lsls	r3, r3, #31
 8007c90:	d507      	bpl.n	8007ca2 <__swbuf_r+0x6e>
 8007c92:	2d0a      	cmp	r5, #10
 8007c94:	d105      	bne.n	8007ca2 <__swbuf_r+0x6e>
 8007c96:	0021      	movs	r1, r4
 8007c98:	0030      	movs	r0, r6
 8007c9a:	f000 fd41 	bl	8008720 <_fflush_r>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d107      	bne.n	8007cb2 <__swbuf_r+0x7e>
 8007ca2:	0028      	movs	r0, r5
 8007ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ca6:	0021      	movs	r1, r4
 8007ca8:	0030      	movs	r0, r6
 8007caa:	f000 f805 	bl	8007cb8 <__swsetup_r>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d0d3      	beq.n	8007c5a <__swbuf_r+0x26>
 8007cb2:	2501      	movs	r5, #1
 8007cb4:	426d      	negs	r5, r5
 8007cb6:	e7f4      	b.n	8007ca2 <__swbuf_r+0x6e>

08007cb8 <__swsetup_r>:
 8007cb8:	4b30      	ldr	r3, [pc, #192]	; (8007d7c <__swsetup_r+0xc4>)
 8007cba:	b570      	push	{r4, r5, r6, lr}
 8007cbc:	0005      	movs	r5, r0
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	000c      	movs	r4, r1
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d004      	beq.n	8007cd0 <__swsetup_r+0x18>
 8007cc6:	6a03      	ldr	r3, [r0, #32]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <__swsetup_r+0x18>
 8007ccc:	f7ff fec2 	bl	8007a54 <__sinit>
 8007cd0:	230c      	movs	r3, #12
 8007cd2:	5ee2      	ldrsh	r2, [r4, r3]
 8007cd4:	b293      	uxth	r3, r2
 8007cd6:	0711      	lsls	r1, r2, #28
 8007cd8:	d423      	bmi.n	8007d22 <__swsetup_r+0x6a>
 8007cda:	06d9      	lsls	r1, r3, #27
 8007cdc:	d407      	bmi.n	8007cee <__swsetup_r+0x36>
 8007cde:	2309      	movs	r3, #9
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	602b      	str	r3, [r5, #0]
 8007ce4:	3337      	adds	r3, #55	; 0x37
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	4240      	negs	r0, r0
 8007cec:	bd70      	pop	{r4, r5, r6, pc}
 8007cee:	075b      	lsls	r3, r3, #29
 8007cf0:	d513      	bpl.n	8007d1a <__swsetup_r+0x62>
 8007cf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	d008      	beq.n	8007d0a <__swsetup_r+0x52>
 8007cf8:	0023      	movs	r3, r4
 8007cfa:	3344      	adds	r3, #68	; 0x44
 8007cfc:	4299      	cmp	r1, r3
 8007cfe:	d002      	beq.n	8007d06 <__swsetup_r+0x4e>
 8007d00:	0028      	movs	r0, r5
 8007d02:	f000 f8c1 	bl	8007e88 <_free_r>
 8007d06:	2300      	movs	r3, #0
 8007d08:	6363      	str	r3, [r4, #52]	; 0x34
 8007d0a:	2224      	movs	r2, #36	; 0x24
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	4393      	bics	r3, r2
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	2300      	movs	r3, #0
 8007d14:	6063      	str	r3, [r4, #4]
 8007d16:	6923      	ldr	r3, [r4, #16]
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	89a2      	ldrh	r2, [r4, #12]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	81a3      	strh	r3, [r4, #12]
 8007d22:	6923      	ldr	r3, [r4, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10b      	bne.n	8007d40 <__swsetup_r+0x88>
 8007d28:	21a0      	movs	r1, #160	; 0xa0
 8007d2a:	2280      	movs	r2, #128	; 0x80
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	0089      	lsls	r1, r1, #2
 8007d30:	0092      	lsls	r2, r2, #2
 8007d32:	400b      	ands	r3, r1
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d003      	beq.n	8007d40 <__swsetup_r+0x88>
 8007d38:	0021      	movs	r1, r4
 8007d3a:	0028      	movs	r0, r5
 8007d3c:	f000 fd44 	bl	80087c8 <__smakebuf_r>
 8007d40:	220c      	movs	r2, #12
 8007d42:	5ea3      	ldrsh	r3, [r4, r2]
 8007d44:	2001      	movs	r0, #1
 8007d46:	001a      	movs	r2, r3
 8007d48:	b299      	uxth	r1, r3
 8007d4a:	4002      	ands	r2, r0
 8007d4c:	4203      	tst	r3, r0
 8007d4e:	d00f      	beq.n	8007d70 <__swsetup_r+0xb8>
 8007d50:	2200      	movs	r2, #0
 8007d52:	60a2      	str	r2, [r4, #8]
 8007d54:	6962      	ldr	r2, [r4, #20]
 8007d56:	4252      	negs	r2, r2
 8007d58:	61a2      	str	r2, [r4, #24]
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	6922      	ldr	r2, [r4, #16]
 8007d5e:	4282      	cmp	r2, r0
 8007d60:	d1c4      	bne.n	8007cec <__swsetup_r+0x34>
 8007d62:	0609      	lsls	r1, r1, #24
 8007d64:	d5c2      	bpl.n	8007cec <__swsetup_r+0x34>
 8007d66:	2240      	movs	r2, #64	; 0x40
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	81a3      	strh	r3, [r4, #12]
 8007d6c:	3801      	subs	r0, #1
 8007d6e:	e7bd      	b.n	8007cec <__swsetup_r+0x34>
 8007d70:	0788      	lsls	r0, r1, #30
 8007d72:	d400      	bmi.n	8007d76 <__swsetup_r+0xbe>
 8007d74:	6962      	ldr	r2, [r4, #20]
 8007d76:	60a2      	str	r2, [r4, #8]
 8007d78:	e7ef      	b.n	8007d5a <__swsetup_r+0xa2>
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	2000007c 	.word	0x2000007c

08007d80 <memset>:
 8007d80:	0003      	movs	r3, r0
 8007d82:	1882      	adds	r2, r0, r2
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d100      	bne.n	8007d8a <memset+0xa>
 8007d88:	4770      	bx	lr
 8007d8a:	7019      	strb	r1, [r3, #0]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	e7f9      	b.n	8007d84 <memset+0x4>

08007d90 <_close_r>:
 8007d90:	2300      	movs	r3, #0
 8007d92:	b570      	push	{r4, r5, r6, lr}
 8007d94:	4d06      	ldr	r5, [pc, #24]	; (8007db0 <_close_r+0x20>)
 8007d96:	0004      	movs	r4, r0
 8007d98:	0008      	movs	r0, r1
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	f7fa fb4c 	bl	8002438 <_close>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d103      	bne.n	8007dac <_close_r+0x1c>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d000      	beq.n	8007dac <_close_r+0x1c>
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	bd70      	pop	{r4, r5, r6, pc}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	2000047c 	.word	0x2000047c

08007db4 <_lseek_r>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	0004      	movs	r4, r0
 8007db8:	0008      	movs	r0, r1
 8007dba:	0011      	movs	r1, r2
 8007dbc:	001a      	movs	r2, r3
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	4d05      	ldr	r5, [pc, #20]	; (8007dd8 <_lseek_r+0x24>)
 8007dc2:	602b      	str	r3, [r5, #0]
 8007dc4:	f7fa fb59 	bl	800247a <_lseek>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d103      	bne.n	8007dd4 <_lseek_r+0x20>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d000      	beq.n	8007dd4 <_lseek_r+0x20>
 8007dd2:	6023      	str	r3, [r4, #0]
 8007dd4:	bd70      	pop	{r4, r5, r6, pc}
 8007dd6:	46c0      	nop			; (mov r8, r8)
 8007dd8:	2000047c 	.word	0x2000047c

08007ddc <_read_r>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	0004      	movs	r4, r0
 8007de0:	0008      	movs	r0, r1
 8007de2:	0011      	movs	r1, r2
 8007de4:	001a      	movs	r2, r3
 8007de6:	2300      	movs	r3, #0
 8007de8:	4d05      	ldr	r5, [pc, #20]	; (8007e00 <_read_r+0x24>)
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	f7fa faeb 	bl	80023c6 <_read>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d103      	bne.n	8007dfc <_read_r+0x20>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d000      	beq.n	8007dfc <_read_r+0x20>
 8007dfa:	6023      	str	r3, [r4, #0]
 8007dfc:	bd70      	pop	{r4, r5, r6, pc}
 8007dfe:	46c0      	nop			; (mov r8, r8)
 8007e00:	2000047c 	.word	0x2000047c

08007e04 <_write_r>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	0004      	movs	r4, r0
 8007e08:	0008      	movs	r0, r1
 8007e0a:	0011      	movs	r1, r2
 8007e0c:	001a      	movs	r2, r3
 8007e0e:	2300      	movs	r3, #0
 8007e10:	4d05      	ldr	r5, [pc, #20]	; (8007e28 <_write_r+0x24>)
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	f7fa faf4 	bl	8002400 <_write>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d103      	bne.n	8007e24 <_write_r+0x20>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d000      	beq.n	8007e24 <_write_r+0x20>
 8007e22:	6023      	str	r3, [r4, #0]
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	2000047c 	.word	0x2000047c

08007e2c <__errno>:
 8007e2c:	4b01      	ldr	r3, [pc, #4]	; (8007e34 <__errno+0x8>)
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	4770      	bx	lr
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	2000007c 	.word	0x2000007c

08007e38 <__libc_init_array>:
 8007e38:	b570      	push	{r4, r5, r6, lr}
 8007e3a:	2600      	movs	r6, #0
 8007e3c:	4c0c      	ldr	r4, [pc, #48]	; (8007e70 <__libc_init_array+0x38>)
 8007e3e:	4d0d      	ldr	r5, [pc, #52]	; (8007e74 <__libc_init_array+0x3c>)
 8007e40:	1b64      	subs	r4, r4, r5
 8007e42:	10a4      	asrs	r4, r4, #2
 8007e44:	42a6      	cmp	r6, r4
 8007e46:	d109      	bne.n	8007e5c <__libc_init_array+0x24>
 8007e48:	2600      	movs	r6, #0
 8007e4a:	f000 fd3d 	bl	80088c8 <_init>
 8007e4e:	4c0a      	ldr	r4, [pc, #40]	; (8007e78 <__libc_init_array+0x40>)
 8007e50:	4d0a      	ldr	r5, [pc, #40]	; (8007e7c <__libc_init_array+0x44>)
 8007e52:	1b64      	subs	r4, r4, r5
 8007e54:	10a4      	asrs	r4, r4, #2
 8007e56:	42a6      	cmp	r6, r4
 8007e58:	d105      	bne.n	8007e66 <__libc_init_array+0x2e>
 8007e5a:	bd70      	pop	{r4, r5, r6, pc}
 8007e5c:	00b3      	lsls	r3, r6, #2
 8007e5e:	58eb      	ldr	r3, [r5, r3]
 8007e60:	4798      	blx	r3
 8007e62:	3601      	adds	r6, #1
 8007e64:	e7ee      	b.n	8007e44 <__libc_init_array+0xc>
 8007e66:	00b3      	lsls	r3, r6, #2
 8007e68:	58eb      	ldr	r3, [r5, r3]
 8007e6a:	4798      	blx	r3
 8007e6c:	3601      	adds	r6, #1
 8007e6e:	e7f2      	b.n	8007e56 <__libc_init_array+0x1e>
 8007e70:	08008f54 	.word	0x08008f54
 8007e74:	08008f54 	.word	0x08008f54
 8007e78:	08008f58 	.word	0x08008f58
 8007e7c:	08008f54 	.word	0x08008f54

08007e80 <__retarget_lock_init_recursive>:
 8007e80:	4770      	bx	lr

08007e82 <__retarget_lock_acquire_recursive>:
 8007e82:	4770      	bx	lr

08007e84 <__retarget_lock_release_recursive>:
 8007e84:	4770      	bx	lr
	...

08007e88 <_free_r>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	0005      	movs	r5, r0
 8007e8c:	2900      	cmp	r1, #0
 8007e8e:	d010      	beq.n	8007eb2 <_free_r+0x2a>
 8007e90:	1f0c      	subs	r4, r1, #4
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	da00      	bge.n	8007e9a <_free_r+0x12>
 8007e98:	18e4      	adds	r4, r4, r3
 8007e9a:	0028      	movs	r0, r5
 8007e9c:	f000 f8e2 	bl	8008064 <__malloc_lock>
 8007ea0:	4a1d      	ldr	r2, [pc, #116]	; (8007f18 <_free_r+0x90>)
 8007ea2:	6813      	ldr	r3, [r2, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d105      	bne.n	8007eb4 <_free_r+0x2c>
 8007ea8:	6063      	str	r3, [r4, #4]
 8007eaa:	6014      	str	r4, [r2, #0]
 8007eac:	0028      	movs	r0, r5
 8007eae:	f000 f8e1 	bl	8008074 <__malloc_unlock>
 8007eb2:	bd70      	pop	{r4, r5, r6, pc}
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	d908      	bls.n	8007eca <_free_r+0x42>
 8007eb8:	6820      	ldr	r0, [r4, #0]
 8007eba:	1821      	adds	r1, r4, r0
 8007ebc:	428b      	cmp	r3, r1
 8007ebe:	d1f3      	bne.n	8007ea8 <_free_r+0x20>
 8007ec0:	6819      	ldr	r1, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	1809      	adds	r1, r1, r0
 8007ec6:	6021      	str	r1, [r4, #0]
 8007ec8:	e7ee      	b.n	8007ea8 <_free_r+0x20>
 8007eca:	001a      	movs	r2, r3
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <_free_r+0x4e>
 8007ed2:	42a3      	cmp	r3, r4
 8007ed4:	d9f9      	bls.n	8007eca <_free_r+0x42>
 8007ed6:	6811      	ldr	r1, [r2, #0]
 8007ed8:	1850      	adds	r0, r2, r1
 8007eda:	42a0      	cmp	r0, r4
 8007edc:	d10b      	bne.n	8007ef6 <_free_r+0x6e>
 8007ede:	6820      	ldr	r0, [r4, #0]
 8007ee0:	1809      	adds	r1, r1, r0
 8007ee2:	1850      	adds	r0, r2, r1
 8007ee4:	6011      	str	r1, [r2, #0]
 8007ee6:	4283      	cmp	r3, r0
 8007ee8:	d1e0      	bne.n	8007eac <_free_r+0x24>
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	1841      	adds	r1, r0, r1
 8007ef0:	6011      	str	r1, [r2, #0]
 8007ef2:	6053      	str	r3, [r2, #4]
 8007ef4:	e7da      	b.n	8007eac <_free_r+0x24>
 8007ef6:	42a0      	cmp	r0, r4
 8007ef8:	d902      	bls.n	8007f00 <_free_r+0x78>
 8007efa:	230c      	movs	r3, #12
 8007efc:	602b      	str	r3, [r5, #0]
 8007efe:	e7d5      	b.n	8007eac <_free_r+0x24>
 8007f00:	6820      	ldr	r0, [r4, #0]
 8007f02:	1821      	adds	r1, r4, r0
 8007f04:	428b      	cmp	r3, r1
 8007f06:	d103      	bne.n	8007f10 <_free_r+0x88>
 8007f08:	6819      	ldr	r1, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	1809      	adds	r1, r1, r0
 8007f0e:	6021      	str	r1, [r4, #0]
 8007f10:	6063      	str	r3, [r4, #4]
 8007f12:	6054      	str	r4, [r2, #4]
 8007f14:	e7ca      	b.n	8007eac <_free_r+0x24>
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	20000484 	.word	0x20000484

08007f1c <sbrk_aligned>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	4e0f      	ldr	r6, [pc, #60]	; (8007f5c <sbrk_aligned+0x40>)
 8007f20:	000d      	movs	r5, r1
 8007f22:	6831      	ldr	r1, [r6, #0]
 8007f24:	0004      	movs	r4, r0
 8007f26:	2900      	cmp	r1, #0
 8007f28:	d102      	bne.n	8007f30 <sbrk_aligned+0x14>
 8007f2a:	f000 fcaf 	bl	800888c <_sbrk_r>
 8007f2e:	6030      	str	r0, [r6, #0]
 8007f30:	0029      	movs	r1, r5
 8007f32:	0020      	movs	r0, r4
 8007f34:	f000 fcaa 	bl	800888c <_sbrk_r>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d00a      	beq.n	8007f52 <sbrk_aligned+0x36>
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	1cc5      	adds	r5, r0, #3
 8007f40:	439d      	bics	r5, r3
 8007f42:	42a8      	cmp	r0, r5
 8007f44:	d007      	beq.n	8007f56 <sbrk_aligned+0x3a>
 8007f46:	1a29      	subs	r1, r5, r0
 8007f48:	0020      	movs	r0, r4
 8007f4a:	f000 fc9f 	bl	800888c <_sbrk_r>
 8007f4e:	3001      	adds	r0, #1
 8007f50:	d101      	bne.n	8007f56 <sbrk_aligned+0x3a>
 8007f52:	2501      	movs	r5, #1
 8007f54:	426d      	negs	r5, r5
 8007f56:	0028      	movs	r0, r5
 8007f58:	bd70      	pop	{r4, r5, r6, pc}
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	20000488 	.word	0x20000488

08007f60 <_malloc_r>:
 8007f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f62:	2203      	movs	r2, #3
 8007f64:	1ccb      	adds	r3, r1, #3
 8007f66:	4393      	bics	r3, r2
 8007f68:	3308      	adds	r3, #8
 8007f6a:	0006      	movs	r6, r0
 8007f6c:	001f      	movs	r7, r3
 8007f6e:	2b0c      	cmp	r3, #12
 8007f70:	d238      	bcs.n	8007fe4 <_malloc_r+0x84>
 8007f72:	270c      	movs	r7, #12
 8007f74:	42b9      	cmp	r1, r7
 8007f76:	d837      	bhi.n	8007fe8 <_malloc_r+0x88>
 8007f78:	0030      	movs	r0, r6
 8007f7a:	f000 f873 	bl	8008064 <__malloc_lock>
 8007f7e:	4b38      	ldr	r3, [pc, #224]	; (8008060 <_malloc_r+0x100>)
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	001c      	movs	r4, r3
 8007f86:	2c00      	cmp	r4, #0
 8007f88:	d133      	bne.n	8007ff2 <_malloc_r+0x92>
 8007f8a:	0039      	movs	r1, r7
 8007f8c:	0030      	movs	r0, r6
 8007f8e:	f7ff ffc5 	bl	8007f1c <sbrk_aligned>
 8007f92:	0004      	movs	r4, r0
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d15e      	bne.n	8008056 <_malloc_r+0xf6>
 8007f98:	9b00      	ldr	r3, [sp, #0]
 8007f9a:	681c      	ldr	r4, [r3, #0]
 8007f9c:	0025      	movs	r5, r4
 8007f9e:	2d00      	cmp	r5, #0
 8007fa0:	d14e      	bne.n	8008040 <_malloc_r+0xe0>
 8007fa2:	2c00      	cmp	r4, #0
 8007fa4:	d051      	beq.n	800804a <_malloc_r+0xea>
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	0029      	movs	r1, r5
 8007faa:	18e3      	adds	r3, r4, r3
 8007fac:	0030      	movs	r0, r6
 8007fae:	9301      	str	r3, [sp, #4]
 8007fb0:	f000 fc6c 	bl	800888c <_sbrk_r>
 8007fb4:	9b01      	ldr	r3, [sp, #4]
 8007fb6:	4283      	cmp	r3, r0
 8007fb8:	d147      	bne.n	800804a <_malloc_r+0xea>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	0030      	movs	r0, r6
 8007fbe:	1aff      	subs	r7, r7, r3
 8007fc0:	0039      	movs	r1, r7
 8007fc2:	f7ff ffab 	bl	8007f1c <sbrk_aligned>
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	d03f      	beq.n	800804a <_malloc_r+0xea>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	19db      	adds	r3, r3, r7
 8007fce:	6023      	str	r3, [r4, #0]
 8007fd0:	9b00      	ldr	r3, [sp, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d040      	beq.n	800805a <_malloc_r+0xfa>
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	42a2      	cmp	r2, r4
 8007fdc:	d133      	bne.n	8008046 <_malloc_r+0xe6>
 8007fde:	2200      	movs	r2, #0
 8007fe0:	605a      	str	r2, [r3, #4]
 8007fe2:	e014      	b.n	800800e <_malloc_r+0xae>
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dac5      	bge.n	8007f74 <_malloc_r+0x14>
 8007fe8:	230c      	movs	r3, #12
 8007fea:	2500      	movs	r5, #0
 8007fec:	6033      	str	r3, [r6, #0]
 8007fee:	0028      	movs	r0, r5
 8007ff0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ff2:	6821      	ldr	r1, [r4, #0]
 8007ff4:	1bc9      	subs	r1, r1, r7
 8007ff6:	d420      	bmi.n	800803a <_malloc_r+0xda>
 8007ff8:	290b      	cmp	r1, #11
 8007ffa:	d918      	bls.n	800802e <_malloc_r+0xce>
 8007ffc:	19e2      	adds	r2, r4, r7
 8007ffe:	6027      	str	r7, [r4, #0]
 8008000:	42a3      	cmp	r3, r4
 8008002:	d112      	bne.n	800802a <_malloc_r+0xca>
 8008004:	9b00      	ldr	r3, [sp, #0]
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	6863      	ldr	r3, [r4, #4]
 800800a:	6011      	str	r1, [r2, #0]
 800800c:	6053      	str	r3, [r2, #4]
 800800e:	0030      	movs	r0, r6
 8008010:	0025      	movs	r5, r4
 8008012:	f000 f82f 	bl	8008074 <__malloc_unlock>
 8008016:	2207      	movs	r2, #7
 8008018:	350b      	adds	r5, #11
 800801a:	1d23      	adds	r3, r4, #4
 800801c:	4395      	bics	r5, r2
 800801e:	1aea      	subs	r2, r5, r3
 8008020:	429d      	cmp	r5, r3
 8008022:	d0e4      	beq.n	8007fee <_malloc_r+0x8e>
 8008024:	1b5b      	subs	r3, r3, r5
 8008026:	50a3      	str	r3, [r4, r2]
 8008028:	e7e1      	b.n	8007fee <_malloc_r+0x8e>
 800802a:	605a      	str	r2, [r3, #4]
 800802c:	e7ec      	b.n	8008008 <_malloc_r+0xa8>
 800802e:	6862      	ldr	r2, [r4, #4]
 8008030:	42a3      	cmp	r3, r4
 8008032:	d1d5      	bne.n	8007fe0 <_malloc_r+0x80>
 8008034:	9b00      	ldr	r3, [sp, #0]
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	e7e9      	b.n	800800e <_malloc_r+0xae>
 800803a:	0023      	movs	r3, r4
 800803c:	6864      	ldr	r4, [r4, #4]
 800803e:	e7a2      	b.n	8007f86 <_malloc_r+0x26>
 8008040:	002c      	movs	r4, r5
 8008042:	686d      	ldr	r5, [r5, #4]
 8008044:	e7ab      	b.n	8007f9e <_malloc_r+0x3e>
 8008046:	0013      	movs	r3, r2
 8008048:	e7c4      	b.n	8007fd4 <_malloc_r+0x74>
 800804a:	230c      	movs	r3, #12
 800804c:	0030      	movs	r0, r6
 800804e:	6033      	str	r3, [r6, #0]
 8008050:	f000 f810 	bl	8008074 <__malloc_unlock>
 8008054:	e7cb      	b.n	8007fee <_malloc_r+0x8e>
 8008056:	6027      	str	r7, [r4, #0]
 8008058:	e7d9      	b.n	800800e <_malloc_r+0xae>
 800805a:	605b      	str	r3, [r3, #4]
 800805c:	deff      	udf	#255	; 0xff
 800805e:	46c0      	nop			; (mov r8, r8)
 8008060:	20000484 	.word	0x20000484

08008064 <__malloc_lock>:
 8008064:	b510      	push	{r4, lr}
 8008066:	4802      	ldr	r0, [pc, #8]	; (8008070 <__malloc_lock+0xc>)
 8008068:	f7ff ff0b 	bl	8007e82 <__retarget_lock_acquire_recursive>
 800806c:	bd10      	pop	{r4, pc}
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	20000480 	.word	0x20000480

08008074 <__malloc_unlock>:
 8008074:	b510      	push	{r4, lr}
 8008076:	4802      	ldr	r0, [pc, #8]	; (8008080 <__malloc_unlock+0xc>)
 8008078:	f7ff ff04 	bl	8007e84 <__retarget_lock_release_recursive>
 800807c:	bd10      	pop	{r4, pc}
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	20000480 	.word	0x20000480

08008084 <__sfputc_r>:
 8008084:	6893      	ldr	r3, [r2, #8]
 8008086:	b510      	push	{r4, lr}
 8008088:	3b01      	subs	r3, #1
 800808a:	6093      	str	r3, [r2, #8]
 800808c:	2b00      	cmp	r3, #0
 800808e:	da04      	bge.n	800809a <__sfputc_r+0x16>
 8008090:	6994      	ldr	r4, [r2, #24]
 8008092:	42a3      	cmp	r3, r4
 8008094:	db07      	blt.n	80080a6 <__sfputc_r+0x22>
 8008096:	290a      	cmp	r1, #10
 8008098:	d005      	beq.n	80080a6 <__sfputc_r+0x22>
 800809a:	6813      	ldr	r3, [r2, #0]
 800809c:	1c58      	adds	r0, r3, #1
 800809e:	6010      	str	r0, [r2, #0]
 80080a0:	7019      	strb	r1, [r3, #0]
 80080a2:	0008      	movs	r0, r1
 80080a4:	bd10      	pop	{r4, pc}
 80080a6:	f7ff fdc5 	bl	8007c34 <__swbuf_r>
 80080aa:	0001      	movs	r1, r0
 80080ac:	e7f9      	b.n	80080a2 <__sfputc_r+0x1e>

080080ae <__sfputs_r>:
 80080ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b0:	0006      	movs	r6, r0
 80080b2:	000f      	movs	r7, r1
 80080b4:	0014      	movs	r4, r2
 80080b6:	18d5      	adds	r5, r2, r3
 80080b8:	42ac      	cmp	r4, r5
 80080ba:	d101      	bne.n	80080c0 <__sfputs_r+0x12>
 80080bc:	2000      	movs	r0, #0
 80080be:	e007      	b.n	80080d0 <__sfputs_r+0x22>
 80080c0:	7821      	ldrb	r1, [r4, #0]
 80080c2:	003a      	movs	r2, r7
 80080c4:	0030      	movs	r0, r6
 80080c6:	f7ff ffdd 	bl	8008084 <__sfputc_r>
 80080ca:	3401      	adds	r4, #1
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d1f3      	bne.n	80080b8 <__sfputs_r+0xa>
 80080d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080d4 <_vfiprintf_r>:
 80080d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080d6:	b0a1      	sub	sp, #132	; 0x84
 80080d8:	000f      	movs	r7, r1
 80080da:	0015      	movs	r5, r2
 80080dc:	001e      	movs	r6, r3
 80080de:	9003      	str	r0, [sp, #12]
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d004      	beq.n	80080ee <_vfiprintf_r+0x1a>
 80080e4:	6a03      	ldr	r3, [r0, #32]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <_vfiprintf_r+0x1a>
 80080ea:	f7ff fcb3 	bl	8007a54 <__sinit>
 80080ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080f0:	07db      	lsls	r3, r3, #31
 80080f2:	d405      	bmi.n	8008100 <_vfiprintf_r+0x2c>
 80080f4:	89bb      	ldrh	r3, [r7, #12]
 80080f6:	059b      	lsls	r3, r3, #22
 80080f8:	d402      	bmi.n	8008100 <_vfiprintf_r+0x2c>
 80080fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80080fc:	f7ff fec1 	bl	8007e82 <__retarget_lock_acquire_recursive>
 8008100:	89bb      	ldrh	r3, [r7, #12]
 8008102:	071b      	lsls	r3, r3, #28
 8008104:	d502      	bpl.n	800810c <_vfiprintf_r+0x38>
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d113      	bne.n	8008134 <_vfiprintf_r+0x60>
 800810c:	0039      	movs	r1, r7
 800810e:	9803      	ldr	r0, [sp, #12]
 8008110:	f7ff fdd2 	bl	8007cb8 <__swsetup_r>
 8008114:	2800      	cmp	r0, #0
 8008116:	d00d      	beq.n	8008134 <_vfiprintf_r+0x60>
 8008118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800811a:	07db      	lsls	r3, r3, #31
 800811c:	d503      	bpl.n	8008126 <_vfiprintf_r+0x52>
 800811e:	2001      	movs	r0, #1
 8008120:	4240      	negs	r0, r0
 8008122:	b021      	add	sp, #132	; 0x84
 8008124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008126:	89bb      	ldrh	r3, [r7, #12]
 8008128:	059b      	lsls	r3, r3, #22
 800812a:	d4f8      	bmi.n	800811e <_vfiprintf_r+0x4a>
 800812c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800812e:	f7ff fea9 	bl	8007e84 <__retarget_lock_release_recursive>
 8008132:	e7f4      	b.n	800811e <_vfiprintf_r+0x4a>
 8008134:	2300      	movs	r3, #0
 8008136:	ac08      	add	r4, sp, #32
 8008138:	6163      	str	r3, [r4, #20]
 800813a:	3320      	adds	r3, #32
 800813c:	7663      	strb	r3, [r4, #25]
 800813e:	3310      	adds	r3, #16
 8008140:	76a3      	strb	r3, [r4, #26]
 8008142:	9607      	str	r6, [sp, #28]
 8008144:	002e      	movs	r6, r5
 8008146:	7833      	ldrb	r3, [r6, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <_vfiprintf_r+0x7c>
 800814c:	2b25      	cmp	r3, #37	; 0x25
 800814e:	d148      	bne.n	80081e2 <_vfiprintf_r+0x10e>
 8008150:	1b73      	subs	r3, r6, r5
 8008152:	9305      	str	r3, [sp, #20]
 8008154:	42ae      	cmp	r6, r5
 8008156:	d00b      	beq.n	8008170 <_vfiprintf_r+0x9c>
 8008158:	002a      	movs	r2, r5
 800815a:	0039      	movs	r1, r7
 800815c:	9803      	ldr	r0, [sp, #12]
 800815e:	f7ff ffa6 	bl	80080ae <__sfputs_r>
 8008162:	3001      	adds	r0, #1
 8008164:	d100      	bne.n	8008168 <_vfiprintf_r+0x94>
 8008166:	e0af      	b.n	80082c8 <_vfiprintf_r+0x1f4>
 8008168:	6963      	ldr	r3, [r4, #20]
 800816a:	9a05      	ldr	r2, [sp, #20]
 800816c:	189b      	adds	r3, r3, r2
 800816e:	6163      	str	r3, [r4, #20]
 8008170:	7833      	ldrb	r3, [r6, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d100      	bne.n	8008178 <_vfiprintf_r+0xa4>
 8008176:	e0a7      	b.n	80082c8 <_vfiprintf_r+0x1f4>
 8008178:	2201      	movs	r2, #1
 800817a:	2300      	movs	r3, #0
 800817c:	4252      	negs	r2, r2
 800817e:	6062      	str	r2, [r4, #4]
 8008180:	a904      	add	r1, sp, #16
 8008182:	3254      	adds	r2, #84	; 0x54
 8008184:	1852      	adds	r2, r2, r1
 8008186:	1c75      	adds	r5, r6, #1
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	60e3      	str	r3, [r4, #12]
 800818c:	60a3      	str	r3, [r4, #8]
 800818e:	7013      	strb	r3, [r2, #0]
 8008190:	65a3      	str	r3, [r4, #88]	; 0x58
 8008192:	4b59      	ldr	r3, [pc, #356]	; (80082f8 <_vfiprintf_r+0x224>)
 8008194:	2205      	movs	r2, #5
 8008196:	0018      	movs	r0, r3
 8008198:	7829      	ldrb	r1, [r5, #0]
 800819a:	9305      	str	r3, [sp, #20]
 800819c:	f000 fb88 	bl	80088b0 <memchr>
 80081a0:	1c6e      	adds	r6, r5, #1
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d11f      	bne.n	80081e6 <_vfiprintf_r+0x112>
 80081a6:	6822      	ldr	r2, [r4, #0]
 80081a8:	06d3      	lsls	r3, r2, #27
 80081aa:	d504      	bpl.n	80081b6 <_vfiprintf_r+0xe2>
 80081ac:	2353      	movs	r3, #83	; 0x53
 80081ae:	a904      	add	r1, sp, #16
 80081b0:	185b      	adds	r3, r3, r1
 80081b2:	2120      	movs	r1, #32
 80081b4:	7019      	strb	r1, [r3, #0]
 80081b6:	0713      	lsls	r3, r2, #28
 80081b8:	d504      	bpl.n	80081c4 <_vfiprintf_r+0xf0>
 80081ba:	2353      	movs	r3, #83	; 0x53
 80081bc:	a904      	add	r1, sp, #16
 80081be:	185b      	adds	r3, r3, r1
 80081c0:	212b      	movs	r1, #43	; 0x2b
 80081c2:	7019      	strb	r1, [r3, #0]
 80081c4:	782b      	ldrb	r3, [r5, #0]
 80081c6:	2b2a      	cmp	r3, #42	; 0x2a
 80081c8:	d016      	beq.n	80081f8 <_vfiprintf_r+0x124>
 80081ca:	002e      	movs	r6, r5
 80081cc:	2100      	movs	r1, #0
 80081ce:	200a      	movs	r0, #10
 80081d0:	68e3      	ldr	r3, [r4, #12]
 80081d2:	7832      	ldrb	r2, [r6, #0]
 80081d4:	1c75      	adds	r5, r6, #1
 80081d6:	3a30      	subs	r2, #48	; 0x30
 80081d8:	2a09      	cmp	r2, #9
 80081da:	d94e      	bls.n	800827a <_vfiprintf_r+0x1a6>
 80081dc:	2900      	cmp	r1, #0
 80081de:	d111      	bne.n	8008204 <_vfiprintf_r+0x130>
 80081e0:	e017      	b.n	8008212 <_vfiprintf_r+0x13e>
 80081e2:	3601      	adds	r6, #1
 80081e4:	e7af      	b.n	8008146 <_vfiprintf_r+0x72>
 80081e6:	9b05      	ldr	r3, [sp, #20]
 80081e8:	6822      	ldr	r2, [r4, #0]
 80081ea:	1ac0      	subs	r0, r0, r3
 80081ec:	2301      	movs	r3, #1
 80081ee:	4083      	lsls	r3, r0
 80081f0:	4313      	orrs	r3, r2
 80081f2:	0035      	movs	r5, r6
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	e7cc      	b.n	8008192 <_vfiprintf_r+0xbe>
 80081f8:	9b07      	ldr	r3, [sp, #28]
 80081fa:	1d19      	adds	r1, r3, #4
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	9107      	str	r1, [sp, #28]
 8008200:	2b00      	cmp	r3, #0
 8008202:	db01      	blt.n	8008208 <_vfiprintf_r+0x134>
 8008204:	930b      	str	r3, [sp, #44]	; 0x2c
 8008206:	e004      	b.n	8008212 <_vfiprintf_r+0x13e>
 8008208:	425b      	negs	r3, r3
 800820a:	60e3      	str	r3, [r4, #12]
 800820c:	2302      	movs	r3, #2
 800820e:	4313      	orrs	r3, r2
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	7833      	ldrb	r3, [r6, #0]
 8008214:	2b2e      	cmp	r3, #46	; 0x2e
 8008216:	d10a      	bne.n	800822e <_vfiprintf_r+0x15a>
 8008218:	7873      	ldrb	r3, [r6, #1]
 800821a:	2b2a      	cmp	r3, #42	; 0x2a
 800821c:	d135      	bne.n	800828a <_vfiprintf_r+0x1b6>
 800821e:	9b07      	ldr	r3, [sp, #28]
 8008220:	3602      	adds	r6, #2
 8008222:	1d1a      	adds	r2, r3, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	9207      	str	r2, [sp, #28]
 8008228:	2b00      	cmp	r3, #0
 800822a:	db2b      	blt.n	8008284 <_vfiprintf_r+0x1b0>
 800822c:	9309      	str	r3, [sp, #36]	; 0x24
 800822e:	4d33      	ldr	r5, [pc, #204]	; (80082fc <_vfiprintf_r+0x228>)
 8008230:	2203      	movs	r2, #3
 8008232:	0028      	movs	r0, r5
 8008234:	7831      	ldrb	r1, [r6, #0]
 8008236:	f000 fb3b 	bl	80088b0 <memchr>
 800823a:	2800      	cmp	r0, #0
 800823c:	d006      	beq.n	800824c <_vfiprintf_r+0x178>
 800823e:	2340      	movs	r3, #64	; 0x40
 8008240:	1b40      	subs	r0, r0, r5
 8008242:	4083      	lsls	r3, r0
 8008244:	6822      	ldr	r2, [r4, #0]
 8008246:	3601      	adds	r6, #1
 8008248:	4313      	orrs	r3, r2
 800824a:	6023      	str	r3, [r4, #0]
 800824c:	7831      	ldrb	r1, [r6, #0]
 800824e:	2206      	movs	r2, #6
 8008250:	482b      	ldr	r0, [pc, #172]	; (8008300 <_vfiprintf_r+0x22c>)
 8008252:	1c75      	adds	r5, r6, #1
 8008254:	7621      	strb	r1, [r4, #24]
 8008256:	f000 fb2b 	bl	80088b0 <memchr>
 800825a:	2800      	cmp	r0, #0
 800825c:	d043      	beq.n	80082e6 <_vfiprintf_r+0x212>
 800825e:	4b29      	ldr	r3, [pc, #164]	; (8008304 <_vfiprintf_r+0x230>)
 8008260:	2b00      	cmp	r3, #0
 8008262:	d125      	bne.n	80082b0 <_vfiprintf_r+0x1dc>
 8008264:	2207      	movs	r2, #7
 8008266:	9b07      	ldr	r3, [sp, #28]
 8008268:	3307      	adds	r3, #7
 800826a:	4393      	bics	r3, r2
 800826c:	3308      	adds	r3, #8
 800826e:	9307      	str	r3, [sp, #28]
 8008270:	6963      	ldr	r3, [r4, #20]
 8008272:	9a04      	ldr	r2, [sp, #16]
 8008274:	189b      	adds	r3, r3, r2
 8008276:	6163      	str	r3, [r4, #20]
 8008278:	e764      	b.n	8008144 <_vfiprintf_r+0x70>
 800827a:	4343      	muls	r3, r0
 800827c:	002e      	movs	r6, r5
 800827e:	2101      	movs	r1, #1
 8008280:	189b      	adds	r3, r3, r2
 8008282:	e7a6      	b.n	80081d2 <_vfiprintf_r+0xfe>
 8008284:	2301      	movs	r3, #1
 8008286:	425b      	negs	r3, r3
 8008288:	e7d0      	b.n	800822c <_vfiprintf_r+0x158>
 800828a:	2300      	movs	r3, #0
 800828c:	200a      	movs	r0, #10
 800828e:	001a      	movs	r2, r3
 8008290:	3601      	adds	r6, #1
 8008292:	6063      	str	r3, [r4, #4]
 8008294:	7831      	ldrb	r1, [r6, #0]
 8008296:	1c75      	adds	r5, r6, #1
 8008298:	3930      	subs	r1, #48	; 0x30
 800829a:	2909      	cmp	r1, #9
 800829c:	d903      	bls.n	80082a6 <_vfiprintf_r+0x1d2>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0c5      	beq.n	800822e <_vfiprintf_r+0x15a>
 80082a2:	9209      	str	r2, [sp, #36]	; 0x24
 80082a4:	e7c3      	b.n	800822e <_vfiprintf_r+0x15a>
 80082a6:	4342      	muls	r2, r0
 80082a8:	002e      	movs	r6, r5
 80082aa:	2301      	movs	r3, #1
 80082ac:	1852      	adds	r2, r2, r1
 80082ae:	e7f1      	b.n	8008294 <_vfiprintf_r+0x1c0>
 80082b0:	aa07      	add	r2, sp, #28
 80082b2:	9200      	str	r2, [sp, #0]
 80082b4:	0021      	movs	r1, r4
 80082b6:	003a      	movs	r2, r7
 80082b8:	4b13      	ldr	r3, [pc, #76]	; (8008308 <_vfiprintf_r+0x234>)
 80082ba:	9803      	ldr	r0, [sp, #12]
 80082bc:	e000      	b.n	80082c0 <_vfiprintf_r+0x1ec>
 80082be:	bf00      	nop
 80082c0:	9004      	str	r0, [sp, #16]
 80082c2:	9b04      	ldr	r3, [sp, #16]
 80082c4:	3301      	adds	r3, #1
 80082c6:	d1d3      	bne.n	8008270 <_vfiprintf_r+0x19c>
 80082c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ca:	07db      	lsls	r3, r3, #31
 80082cc:	d405      	bmi.n	80082da <_vfiprintf_r+0x206>
 80082ce:	89bb      	ldrh	r3, [r7, #12]
 80082d0:	059b      	lsls	r3, r3, #22
 80082d2:	d402      	bmi.n	80082da <_vfiprintf_r+0x206>
 80082d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80082d6:	f7ff fdd5 	bl	8007e84 <__retarget_lock_release_recursive>
 80082da:	89bb      	ldrh	r3, [r7, #12]
 80082dc:	065b      	lsls	r3, r3, #25
 80082de:	d500      	bpl.n	80082e2 <_vfiprintf_r+0x20e>
 80082e0:	e71d      	b.n	800811e <_vfiprintf_r+0x4a>
 80082e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80082e4:	e71d      	b.n	8008122 <_vfiprintf_r+0x4e>
 80082e6:	aa07      	add	r2, sp, #28
 80082e8:	9200      	str	r2, [sp, #0]
 80082ea:	0021      	movs	r1, r4
 80082ec:	003a      	movs	r2, r7
 80082ee:	4b06      	ldr	r3, [pc, #24]	; (8008308 <_vfiprintf_r+0x234>)
 80082f0:	9803      	ldr	r0, [sp, #12]
 80082f2:	f000 f87b 	bl	80083ec <_printf_i>
 80082f6:	e7e3      	b.n	80082c0 <_vfiprintf_r+0x1ec>
 80082f8:	08008f18 	.word	0x08008f18
 80082fc:	08008f1e 	.word	0x08008f1e
 8008300:	08008f22 	.word	0x08008f22
 8008304:	00000000 	.word	0x00000000
 8008308:	080080af 	.word	0x080080af

0800830c <_printf_common>:
 800830c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800830e:	0016      	movs	r6, r2
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	688a      	ldr	r2, [r1, #8]
 8008314:	690b      	ldr	r3, [r1, #16]
 8008316:	000c      	movs	r4, r1
 8008318:	9000      	str	r0, [sp, #0]
 800831a:	4293      	cmp	r3, r2
 800831c:	da00      	bge.n	8008320 <_printf_common+0x14>
 800831e:	0013      	movs	r3, r2
 8008320:	0022      	movs	r2, r4
 8008322:	6033      	str	r3, [r6, #0]
 8008324:	3243      	adds	r2, #67	; 0x43
 8008326:	7812      	ldrb	r2, [r2, #0]
 8008328:	2a00      	cmp	r2, #0
 800832a:	d001      	beq.n	8008330 <_printf_common+0x24>
 800832c:	3301      	adds	r3, #1
 800832e:	6033      	str	r3, [r6, #0]
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	069b      	lsls	r3, r3, #26
 8008334:	d502      	bpl.n	800833c <_printf_common+0x30>
 8008336:	6833      	ldr	r3, [r6, #0]
 8008338:	3302      	adds	r3, #2
 800833a:	6033      	str	r3, [r6, #0]
 800833c:	6822      	ldr	r2, [r4, #0]
 800833e:	2306      	movs	r3, #6
 8008340:	0015      	movs	r5, r2
 8008342:	401d      	ands	r5, r3
 8008344:	421a      	tst	r2, r3
 8008346:	d027      	beq.n	8008398 <_printf_common+0x8c>
 8008348:	0023      	movs	r3, r4
 800834a:	3343      	adds	r3, #67	; 0x43
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	1e5a      	subs	r2, r3, #1
 8008350:	4193      	sbcs	r3, r2
 8008352:	6822      	ldr	r2, [r4, #0]
 8008354:	0692      	lsls	r2, r2, #26
 8008356:	d430      	bmi.n	80083ba <_printf_common+0xae>
 8008358:	0022      	movs	r2, r4
 800835a:	9901      	ldr	r1, [sp, #4]
 800835c:	9800      	ldr	r0, [sp, #0]
 800835e:	9d08      	ldr	r5, [sp, #32]
 8008360:	3243      	adds	r2, #67	; 0x43
 8008362:	47a8      	blx	r5
 8008364:	3001      	adds	r0, #1
 8008366:	d025      	beq.n	80083b4 <_printf_common+0xa8>
 8008368:	2206      	movs	r2, #6
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	2500      	movs	r5, #0
 800836e:	4013      	ands	r3, r2
 8008370:	2b04      	cmp	r3, #4
 8008372:	d105      	bne.n	8008380 <_printf_common+0x74>
 8008374:	6833      	ldr	r3, [r6, #0]
 8008376:	68e5      	ldr	r5, [r4, #12]
 8008378:	1aed      	subs	r5, r5, r3
 800837a:	43eb      	mvns	r3, r5
 800837c:	17db      	asrs	r3, r3, #31
 800837e:	401d      	ands	r5, r3
 8008380:	68a3      	ldr	r3, [r4, #8]
 8008382:	6922      	ldr	r2, [r4, #16]
 8008384:	4293      	cmp	r3, r2
 8008386:	dd01      	ble.n	800838c <_printf_common+0x80>
 8008388:	1a9b      	subs	r3, r3, r2
 800838a:	18ed      	adds	r5, r5, r3
 800838c:	2600      	movs	r6, #0
 800838e:	42b5      	cmp	r5, r6
 8008390:	d120      	bne.n	80083d4 <_printf_common+0xc8>
 8008392:	2000      	movs	r0, #0
 8008394:	e010      	b.n	80083b8 <_printf_common+0xac>
 8008396:	3501      	adds	r5, #1
 8008398:	68e3      	ldr	r3, [r4, #12]
 800839a:	6832      	ldr	r2, [r6, #0]
 800839c:	1a9b      	subs	r3, r3, r2
 800839e:	42ab      	cmp	r3, r5
 80083a0:	ddd2      	ble.n	8008348 <_printf_common+0x3c>
 80083a2:	0022      	movs	r2, r4
 80083a4:	2301      	movs	r3, #1
 80083a6:	9901      	ldr	r1, [sp, #4]
 80083a8:	9800      	ldr	r0, [sp, #0]
 80083aa:	9f08      	ldr	r7, [sp, #32]
 80083ac:	3219      	adds	r2, #25
 80083ae:	47b8      	blx	r7
 80083b0:	3001      	adds	r0, #1
 80083b2:	d1f0      	bne.n	8008396 <_printf_common+0x8a>
 80083b4:	2001      	movs	r0, #1
 80083b6:	4240      	negs	r0, r0
 80083b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083ba:	2030      	movs	r0, #48	; 0x30
 80083bc:	18e1      	adds	r1, r4, r3
 80083be:	3143      	adds	r1, #67	; 0x43
 80083c0:	7008      	strb	r0, [r1, #0]
 80083c2:	0021      	movs	r1, r4
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	3145      	adds	r1, #69	; 0x45
 80083c8:	7809      	ldrb	r1, [r1, #0]
 80083ca:	18a2      	adds	r2, r4, r2
 80083cc:	3243      	adds	r2, #67	; 0x43
 80083ce:	3302      	adds	r3, #2
 80083d0:	7011      	strb	r1, [r2, #0]
 80083d2:	e7c1      	b.n	8008358 <_printf_common+0x4c>
 80083d4:	0022      	movs	r2, r4
 80083d6:	2301      	movs	r3, #1
 80083d8:	9901      	ldr	r1, [sp, #4]
 80083da:	9800      	ldr	r0, [sp, #0]
 80083dc:	9f08      	ldr	r7, [sp, #32]
 80083de:	321a      	adds	r2, #26
 80083e0:	47b8      	blx	r7
 80083e2:	3001      	adds	r0, #1
 80083e4:	d0e6      	beq.n	80083b4 <_printf_common+0xa8>
 80083e6:	3601      	adds	r6, #1
 80083e8:	e7d1      	b.n	800838e <_printf_common+0x82>
	...

080083ec <_printf_i>:
 80083ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ee:	b08b      	sub	sp, #44	; 0x2c
 80083f0:	9206      	str	r2, [sp, #24]
 80083f2:	000a      	movs	r2, r1
 80083f4:	3243      	adds	r2, #67	; 0x43
 80083f6:	9307      	str	r3, [sp, #28]
 80083f8:	9005      	str	r0, [sp, #20]
 80083fa:	9204      	str	r2, [sp, #16]
 80083fc:	7e0a      	ldrb	r2, [r1, #24]
 80083fe:	000c      	movs	r4, r1
 8008400:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008402:	2a78      	cmp	r2, #120	; 0x78
 8008404:	d809      	bhi.n	800841a <_printf_i+0x2e>
 8008406:	2a62      	cmp	r2, #98	; 0x62
 8008408:	d80b      	bhi.n	8008422 <_printf_i+0x36>
 800840a:	2a00      	cmp	r2, #0
 800840c:	d100      	bne.n	8008410 <_printf_i+0x24>
 800840e:	e0be      	b.n	800858e <_printf_i+0x1a2>
 8008410:	497c      	ldr	r1, [pc, #496]	; (8008604 <_printf_i+0x218>)
 8008412:	9103      	str	r1, [sp, #12]
 8008414:	2a58      	cmp	r2, #88	; 0x58
 8008416:	d100      	bne.n	800841a <_printf_i+0x2e>
 8008418:	e093      	b.n	8008542 <_printf_i+0x156>
 800841a:	0026      	movs	r6, r4
 800841c:	3642      	adds	r6, #66	; 0x42
 800841e:	7032      	strb	r2, [r6, #0]
 8008420:	e022      	b.n	8008468 <_printf_i+0x7c>
 8008422:	0010      	movs	r0, r2
 8008424:	3863      	subs	r0, #99	; 0x63
 8008426:	2815      	cmp	r0, #21
 8008428:	d8f7      	bhi.n	800841a <_printf_i+0x2e>
 800842a:	f7f7 fe6d 	bl	8000108 <__gnu_thumb1_case_shi>
 800842e:	0016      	.short	0x0016
 8008430:	fff6001f 	.word	0xfff6001f
 8008434:	fff6fff6 	.word	0xfff6fff6
 8008438:	001ffff6 	.word	0x001ffff6
 800843c:	fff6fff6 	.word	0xfff6fff6
 8008440:	fff6fff6 	.word	0xfff6fff6
 8008444:	003600a3 	.word	0x003600a3
 8008448:	fff60083 	.word	0xfff60083
 800844c:	00b4fff6 	.word	0x00b4fff6
 8008450:	0036fff6 	.word	0x0036fff6
 8008454:	fff6fff6 	.word	0xfff6fff6
 8008458:	0087      	.short	0x0087
 800845a:	0026      	movs	r6, r4
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	3642      	adds	r6, #66	; 0x42
 8008460:	1d11      	adds	r1, r2, #4
 8008462:	6019      	str	r1, [r3, #0]
 8008464:	6813      	ldr	r3, [r2, #0]
 8008466:	7033      	strb	r3, [r6, #0]
 8008468:	2301      	movs	r3, #1
 800846a:	e0a2      	b.n	80085b2 <_printf_i+0x1c6>
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	6809      	ldr	r1, [r1, #0]
 8008470:	1d02      	adds	r2, r0, #4
 8008472:	060d      	lsls	r5, r1, #24
 8008474:	d50b      	bpl.n	800848e <_printf_i+0xa2>
 8008476:	6805      	ldr	r5, [r0, #0]
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	2d00      	cmp	r5, #0
 800847c:	da03      	bge.n	8008486 <_printf_i+0x9a>
 800847e:	232d      	movs	r3, #45	; 0x2d
 8008480:	9a04      	ldr	r2, [sp, #16]
 8008482:	426d      	negs	r5, r5
 8008484:	7013      	strb	r3, [r2, #0]
 8008486:	4b5f      	ldr	r3, [pc, #380]	; (8008604 <_printf_i+0x218>)
 8008488:	270a      	movs	r7, #10
 800848a:	9303      	str	r3, [sp, #12]
 800848c:	e01b      	b.n	80084c6 <_printf_i+0xda>
 800848e:	6805      	ldr	r5, [r0, #0]
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	0649      	lsls	r1, r1, #25
 8008494:	d5f1      	bpl.n	800847a <_printf_i+0x8e>
 8008496:	b22d      	sxth	r5, r5
 8008498:	e7ef      	b.n	800847a <_printf_i+0x8e>
 800849a:	680d      	ldr	r5, [r1, #0]
 800849c:	6819      	ldr	r1, [r3, #0]
 800849e:	1d08      	adds	r0, r1, #4
 80084a0:	6018      	str	r0, [r3, #0]
 80084a2:	062e      	lsls	r6, r5, #24
 80084a4:	d501      	bpl.n	80084aa <_printf_i+0xbe>
 80084a6:	680d      	ldr	r5, [r1, #0]
 80084a8:	e003      	b.n	80084b2 <_printf_i+0xc6>
 80084aa:	066d      	lsls	r5, r5, #25
 80084ac:	d5fb      	bpl.n	80084a6 <_printf_i+0xba>
 80084ae:	680d      	ldr	r5, [r1, #0]
 80084b0:	b2ad      	uxth	r5, r5
 80084b2:	4b54      	ldr	r3, [pc, #336]	; (8008604 <_printf_i+0x218>)
 80084b4:	2708      	movs	r7, #8
 80084b6:	9303      	str	r3, [sp, #12]
 80084b8:	2a6f      	cmp	r2, #111	; 0x6f
 80084ba:	d000      	beq.n	80084be <_printf_i+0xd2>
 80084bc:	3702      	adds	r7, #2
 80084be:	0023      	movs	r3, r4
 80084c0:	2200      	movs	r2, #0
 80084c2:	3343      	adds	r3, #67	; 0x43
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	6863      	ldr	r3, [r4, #4]
 80084c8:	60a3      	str	r3, [r4, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	db03      	blt.n	80084d6 <_printf_i+0xea>
 80084ce:	2104      	movs	r1, #4
 80084d0:	6822      	ldr	r2, [r4, #0]
 80084d2:	438a      	bics	r2, r1
 80084d4:	6022      	str	r2, [r4, #0]
 80084d6:	2d00      	cmp	r5, #0
 80084d8:	d102      	bne.n	80084e0 <_printf_i+0xf4>
 80084da:	9e04      	ldr	r6, [sp, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00c      	beq.n	80084fa <_printf_i+0x10e>
 80084e0:	9e04      	ldr	r6, [sp, #16]
 80084e2:	0028      	movs	r0, r5
 80084e4:	0039      	movs	r1, r7
 80084e6:	f7f7 fe9f 	bl	8000228 <__aeabi_uidivmod>
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	3e01      	subs	r6, #1
 80084ee:	5c5b      	ldrb	r3, [r3, r1]
 80084f0:	7033      	strb	r3, [r6, #0]
 80084f2:	002b      	movs	r3, r5
 80084f4:	0005      	movs	r5, r0
 80084f6:	429f      	cmp	r7, r3
 80084f8:	d9f3      	bls.n	80084e2 <_printf_i+0xf6>
 80084fa:	2f08      	cmp	r7, #8
 80084fc:	d109      	bne.n	8008512 <_printf_i+0x126>
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	07db      	lsls	r3, r3, #31
 8008502:	d506      	bpl.n	8008512 <_printf_i+0x126>
 8008504:	6862      	ldr	r2, [r4, #4]
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	429a      	cmp	r2, r3
 800850a:	dc02      	bgt.n	8008512 <_printf_i+0x126>
 800850c:	2330      	movs	r3, #48	; 0x30
 800850e:	3e01      	subs	r6, #1
 8008510:	7033      	strb	r3, [r6, #0]
 8008512:	9b04      	ldr	r3, [sp, #16]
 8008514:	1b9b      	subs	r3, r3, r6
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	9b07      	ldr	r3, [sp, #28]
 800851a:	0021      	movs	r1, r4
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	9805      	ldr	r0, [sp, #20]
 8008520:	9b06      	ldr	r3, [sp, #24]
 8008522:	aa09      	add	r2, sp, #36	; 0x24
 8008524:	f7ff fef2 	bl	800830c <_printf_common>
 8008528:	3001      	adds	r0, #1
 800852a:	d147      	bne.n	80085bc <_printf_i+0x1d0>
 800852c:	2001      	movs	r0, #1
 800852e:	4240      	negs	r0, r0
 8008530:	b00b      	add	sp, #44	; 0x2c
 8008532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008534:	2220      	movs	r2, #32
 8008536:	6809      	ldr	r1, [r1, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	6022      	str	r2, [r4, #0]
 800853c:	2278      	movs	r2, #120	; 0x78
 800853e:	4932      	ldr	r1, [pc, #200]	; (8008608 <_printf_i+0x21c>)
 8008540:	9103      	str	r1, [sp, #12]
 8008542:	0021      	movs	r1, r4
 8008544:	3145      	adds	r1, #69	; 0x45
 8008546:	700a      	strb	r2, [r1, #0]
 8008548:	6819      	ldr	r1, [r3, #0]
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	c920      	ldmia	r1!, {r5}
 800854e:	0610      	lsls	r0, r2, #24
 8008550:	d402      	bmi.n	8008558 <_printf_i+0x16c>
 8008552:	0650      	lsls	r0, r2, #25
 8008554:	d500      	bpl.n	8008558 <_printf_i+0x16c>
 8008556:	b2ad      	uxth	r5, r5
 8008558:	6019      	str	r1, [r3, #0]
 800855a:	07d3      	lsls	r3, r2, #31
 800855c:	d502      	bpl.n	8008564 <_printf_i+0x178>
 800855e:	2320      	movs	r3, #32
 8008560:	4313      	orrs	r3, r2
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	2710      	movs	r7, #16
 8008566:	2d00      	cmp	r5, #0
 8008568:	d1a9      	bne.n	80084be <_printf_i+0xd2>
 800856a:	2220      	movs	r2, #32
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	4393      	bics	r3, r2
 8008570:	6023      	str	r3, [r4, #0]
 8008572:	e7a4      	b.n	80084be <_printf_i+0xd2>
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	680d      	ldr	r5, [r1, #0]
 8008578:	1d10      	adds	r0, r2, #4
 800857a:	6949      	ldr	r1, [r1, #20]
 800857c:	6018      	str	r0, [r3, #0]
 800857e:	6813      	ldr	r3, [r2, #0]
 8008580:	062e      	lsls	r6, r5, #24
 8008582:	d501      	bpl.n	8008588 <_printf_i+0x19c>
 8008584:	6019      	str	r1, [r3, #0]
 8008586:	e002      	b.n	800858e <_printf_i+0x1a2>
 8008588:	066d      	lsls	r5, r5, #25
 800858a:	d5fb      	bpl.n	8008584 <_printf_i+0x198>
 800858c:	8019      	strh	r1, [r3, #0]
 800858e:	2300      	movs	r3, #0
 8008590:	9e04      	ldr	r6, [sp, #16]
 8008592:	6123      	str	r3, [r4, #16]
 8008594:	e7c0      	b.n	8008518 <_printf_i+0x12c>
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	1d11      	adds	r1, r2, #4
 800859a:	6019      	str	r1, [r3, #0]
 800859c:	6816      	ldr	r6, [r2, #0]
 800859e:	2100      	movs	r1, #0
 80085a0:	0030      	movs	r0, r6
 80085a2:	6862      	ldr	r2, [r4, #4]
 80085a4:	f000 f984 	bl	80088b0 <memchr>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d001      	beq.n	80085b0 <_printf_i+0x1c4>
 80085ac:	1b80      	subs	r0, r0, r6
 80085ae:	6060      	str	r0, [r4, #4]
 80085b0:	6863      	ldr	r3, [r4, #4]
 80085b2:	6123      	str	r3, [r4, #16]
 80085b4:	2300      	movs	r3, #0
 80085b6:	9a04      	ldr	r2, [sp, #16]
 80085b8:	7013      	strb	r3, [r2, #0]
 80085ba:	e7ad      	b.n	8008518 <_printf_i+0x12c>
 80085bc:	0032      	movs	r2, r6
 80085be:	6923      	ldr	r3, [r4, #16]
 80085c0:	9906      	ldr	r1, [sp, #24]
 80085c2:	9805      	ldr	r0, [sp, #20]
 80085c4:	9d07      	ldr	r5, [sp, #28]
 80085c6:	47a8      	blx	r5
 80085c8:	3001      	adds	r0, #1
 80085ca:	d0af      	beq.n	800852c <_printf_i+0x140>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	079b      	lsls	r3, r3, #30
 80085d0:	d415      	bmi.n	80085fe <_printf_i+0x212>
 80085d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d4:	68e0      	ldr	r0, [r4, #12]
 80085d6:	4298      	cmp	r0, r3
 80085d8:	daaa      	bge.n	8008530 <_printf_i+0x144>
 80085da:	0018      	movs	r0, r3
 80085dc:	e7a8      	b.n	8008530 <_printf_i+0x144>
 80085de:	0022      	movs	r2, r4
 80085e0:	2301      	movs	r3, #1
 80085e2:	9906      	ldr	r1, [sp, #24]
 80085e4:	9805      	ldr	r0, [sp, #20]
 80085e6:	9e07      	ldr	r6, [sp, #28]
 80085e8:	3219      	adds	r2, #25
 80085ea:	47b0      	blx	r6
 80085ec:	3001      	adds	r0, #1
 80085ee:	d09d      	beq.n	800852c <_printf_i+0x140>
 80085f0:	3501      	adds	r5, #1
 80085f2:	68e3      	ldr	r3, [r4, #12]
 80085f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085f6:	1a9b      	subs	r3, r3, r2
 80085f8:	42ab      	cmp	r3, r5
 80085fa:	dcf0      	bgt.n	80085de <_printf_i+0x1f2>
 80085fc:	e7e9      	b.n	80085d2 <_printf_i+0x1e6>
 80085fe:	2500      	movs	r5, #0
 8008600:	e7f7      	b.n	80085f2 <_printf_i+0x206>
 8008602:	46c0      	nop			; (mov r8, r8)
 8008604:	08008f29 	.word	0x08008f29
 8008608:	08008f3a 	.word	0x08008f3a

0800860c <__sflush_r>:
 800860c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800860e:	898b      	ldrh	r3, [r1, #12]
 8008610:	0005      	movs	r5, r0
 8008612:	000c      	movs	r4, r1
 8008614:	071a      	lsls	r2, r3, #28
 8008616:	d45c      	bmi.n	80086d2 <__sflush_r+0xc6>
 8008618:	684a      	ldr	r2, [r1, #4]
 800861a:	2a00      	cmp	r2, #0
 800861c:	dc04      	bgt.n	8008628 <__sflush_r+0x1c>
 800861e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008620:	2a00      	cmp	r2, #0
 8008622:	dc01      	bgt.n	8008628 <__sflush_r+0x1c>
 8008624:	2000      	movs	r0, #0
 8008626:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008628:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800862a:	2f00      	cmp	r7, #0
 800862c:	d0fa      	beq.n	8008624 <__sflush_r+0x18>
 800862e:	2200      	movs	r2, #0
 8008630:	2080      	movs	r0, #128	; 0x80
 8008632:	682e      	ldr	r6, [r5, #0]
 8008634:	602a      	str	r2, [r5, #0]
 8008636:	001a      	movs	r2, r3
 8008638:	0140      	lsls	r0, r0, #5
 800863a:	6a21      	ldr	r1, [r4, #32]
 800863c:	4002      	ands	r2, r0
 800863e:	4203      	tst	r3, r0
 8008640:	d034      	beq.n	80086ac <__sflush_r+0xa0>
 8008642:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	075b      	lsls	r3, r3, #29
 8008648:	d506      	bpl.n	8008658 <__sflush_r+0x4c>
 800864a:	6863      	ldr	r3, [r4, #4]
 800864c:	1ac0      	subs	r0, r0, r3
 800864e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <__sflush_r+0x4c>
 8008654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008656:	1ac0      	subs	r0, r0, r3
 8008658:	0002      	movs	r2, r0
 800865a:	2300      	movs	r3, #0
 800865c:	0028      	movs	r0, r5
 800865e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008660:	6a21      	ldr	r1, [r4, #32]
 8008662:	47b8      	blx	r7
 8008664:	89a2      	ldrh	r2, [r4, #12]
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	d106      	bne.n	8008678 <__sflush_r+0x6c>
 800866a:	6829      	ldr	r1, [r5, #0]
 800866c:	291d      	cmp	r1, #29
 800866e:	d82c      	bhi.n	80086ca <__sflush_r+0xbe>
 8008670:	4b2a      	ldr	r3, [pc, #168]	; (800871c <__sflush_r+0x110>)
 8008672:	410b      	asrs	r3, r1
 8008674:	07db      	lsls	r3, r3, #31
 8008676:	d428      	bmi.n	80086ca <__sflush_r+0xbe>
 8008678:	2300      	movs	r3, #0
 800867a:	6063      	str	r3, [r4, #4]
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	04d2      	lsls	r2, r2, #19
 8008682:	d505      	bpl.n	8008690 <__sflush_r+0x84>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <__sflush_r+0x82>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d100      	bne.n	8008690 <__sflush_r+0x84>
 800868e:	6560      	str	r0, [r4, #84]	; 0x54
 8008690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008692:	602e      	str	r6, [r5, #0]
 8008694:	2900      	cmp	r1, #0
 8008696:	d0c5      	beq.n	8008624 <__sflush_r+0x18>
 8008698:	0023      	movs	r3, r4
 800869a:	3344      	adds	r3, #68	; 0x44
 800869c:	4299      	cmp	r1, r3
 800869e:	d002      	beq.n	80086a6 <__sflush_r+0x9a>
 80086a0:	0028      	movs	r0, r5
 80086a2:	f7ff fbf1 	bl	8007e88 <_free_r>
 80086a6:	2000      	movs	r0, #0
 80086a8:	6360      	str	r0, [r4, #52]	; 0x34
 80086aa:	e7bc      	b.n	8008626 <__sflush_r+0x1a>
 80086ac:	2301      	movs	r3, #1
 80086ae:	0028      	movs	r0, r5
 80086b0:	47b8      	blx	r7
 80086b2:	1c43      	adds	r3, r0, #1
 80086b4:	d1c6      	bne.n	8008644 <__sflush_r+0x38>
 80086b6:	682b      	ldr	r3, [r5, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0c3      	beq.n	8008644 <__sflush_r+0x38>
 80086bc:	2b1d      	cmp	r3, #29
 80086be:	d001      	beq.n	80086c4 <__sflush_r+0xb8>
 80086c0:	2b16      	cmp	r3, #22
 80086c2:	d101      	bne.n	80086c8 <__sflush_r+0xbc>
 80086c4:	602e      	str	r6, [r5, #0]
 80086c6:	e7ad      	b.n	8008624 <__sflush_r+0x18>
 80086c8:	89a2      	ldrh	r2, [r4, #12]
 80086ca:	2340      	movs	r3, #64	; 0x40
 80086cc:	4313      	orrs	r3, r2
 80086ce:	81a3      	strh	r3, [r4, #12]
 80086d0:	e7a9      	b.n	8008626 <__sflush_r+0x1a>
 80086d2:	690e      	ldr	r6, [r1, #16]
 80086d4:	2e00      	cmp	r6, #0
 80086d6:	d0a5      	beq.n	8008624 <__sflush_r+0x18>
 80086d8:	680f      	ldr	r7, [r1, #0]
 80086da:	600e      	str	r6, [r1, #0]
 80086dc:	1bba      	subs	r2, r7, r6
 80086de:	9201      	str	r2, [sp, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	079b      	lsls	r3, r3, #30
 80086e4:	d100      	bne.n	80086e8 <__sflush_r+0xdc>
 80086e6:	694a      	ldr	r2, [r1, #20]
 80086e8:	60a2      	str	r2, [r4, #8]
 80086ea:	9b01      	ldr	r3, [sp, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dd99      	ble.n	8008624 <__sflush_r+0x18>
 80086f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80086f2:	0032      	movs	r2, r6
 80086f4:	001f      	movs	r7, r3
 80086f6:	0028      	movs	r0, r5
 80086f8:	9b01      	ldr	r3, [sp, #4]
 80086fa:	6a21      	ldr	r1, [r4, #32]
 80086fc:	47b8      	blx	r7
 80086fe:	2800      	cmp	r0, #0
 8008700:	dc06      	bgt.n	8008710 <__sflush_r+0x104>
 8008702:	2340      	movs	r3, #64	; 0x40
 8008704:	2001      	movs	r0, #1
 8008706:	89a2      	ldrh	r2, [r4, #12]
 8008708:	4240      	negs	r0, r0
 800870a:	4313      	orrs	r3, r2
 800870c:	81a3      	strh	r3, [r4, #12]
 800870e:	e78a      	b.n	8008626 <__sflush_r+0x1a>
 8008710:	9b01      	ldr	r3, [sp, #4]
 8008712:	1836      	adds	r6, r6, r0
 8008714:	1a1b      	subs	r3, r3, r0
 8008716:	9301      	str	r3, [sp, #4]
 8008718:	e7e7      	b.n	80086ea <__sflush_r+0xde>
 800871a:	46c0      	nop			; (mov r8, r8)
 800871c:	dfbffffe 	.word	0xdfbffffe

08008720 <_fflush_r>:
 8008720:	690b      	ldr	r3, [r1, #16]
 8008722:	b570      	push	{r4, r5, r6, lr}
 8008724:	0005      	movs	r5, r0
 8008726:	000c      	movs	r4, r1
 8008728:	2b00      	cmp	r3, #0
 800872a:	d102      	bne.n	8008732 <_fflush_r+0x12>
 800872c:	2500      	movs	r5, #0
 800872e:	0028      	movs	r0, r5
 8008730:	bd70      	pop	{r4, r5, r6, pc}
 8008732:	2800      	cmp	r0, #0
 8008734:	d004      	beq.n	8008740 <_fflush_r+0x20>
 8008736:	6a03      	ldr	r3, [r0, #32]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d101      	bne.n	8008740 <_fflush_r+0x20>
 800873c:	f7ff f98a 	bl	8007a54 <__sinit>
 8008740:	220c      	movs	r2, #12
 8008742:	5ea3      	ldrsh	r3, [r4, r2]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d0f1      	beq.n	800872c <_fflush_r+0xc>
 8008748:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800874a:	07d2      	lsls	r2, r2, #31
 800874c:	d404      	bmi.n	8008758 <_fflush_r+0x38>
 800874e:	059b      	lsls	r3, r3, #22
 8008750:	d402      	bmi.n	8008758 <_fflush_r+0x38>
 8008752:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008754:	f7ff fb95 	bl	8007e82 <__retarget_lock_acquire_recursive>
 8008758:	0028      	movs	r0, r5
 800875a:	0021      	movs	r1, r4
 800875c:	f7ff ff56 	bl	800860c <__sflush_r>
 8008760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008762:	0005      	movs	r5, r0
 8008764:	07db      	lsls	r3, r3, #31
 8008766:	d4e2      	bmi.n	800872e <_fflush_r+0xe>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	059b      	lsls	r3, r3, #22
 800876c:	d4df      	bmi.n	800872e <_fflush_r+0xe>
 800876e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008770:	f7ff fb88 	bl	8007e84 <__retarget_lock_release_recursive>
 8008774:	e7db      	b.n	800872e <_fflush_r+0xe>
	...

08008778 <__swhatbuf_r>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	000e      	movs	r6, r1
 800877c:	001d      	movs	r5, r3
 800877e:	230e      	movs	r3, #14
 8008780:	5ec9      	ldrsh	r1, [r1, r3]
 8008782:	0014      	movs	r4, r2
 8008784:	b096      	sub	sp, #88	; 0x58
 8008786:	2900      	cmp	r1, #0
 8008788:	da0c      	bge.n	80087a4 <__swhatbuf_r+0x2c>
 800878a:	89b2      	ldrh	r2, [r6, #12]
 800878c:	2380      	movs	r3, #128	; 0x80
 800878e:	0011      	movs	r1, r2
 8008790:	4019      	ands	r1, r3
 8008792:	421a      	tst	r2, r3
 8008794:	d013      	beq.n	80087be <__swhatbuf_r+0x46>
 8008796:	2100      	movs	r1, #0
 8008798:	3b40      	subs	r3, #64	; 0x40
 800879a:	2000      	movs	r0, #0
 800879c:	6029      	str	r1, [r5, #0]
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	b016      	add	sp, #88	; 0x58
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	466a      	mov	r2, sp
 80087a6:	f000 f84d 	bl	8008844 <_fstat_r>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	dbed      	blt.n	800878a <__swhatbuf_r+0x12>
 80087ae:	23f0      	movs	r3, #240	; 0xf0
 80087b0:	9901      	ldr	r1, [sp, #4]
 80087b2:	021b      	lsls	r3, r3, #8
 80087b4:	4019      	ands	r1, r3
 80087b6:	4b03      	ldr	r3, [pc, #12]	; (80087c4 <__swhatbuf_r+0x4c>)
 80087b8:	18c9      	adds	r1, r1, r3
 80087ba:	424b      	negs	r3, r1
 80087bc:	4159      	adcs	r1, r3
 80087be:	2380      	movs	r3, #128	; 0x80
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	e7ea      	b.n	800879a <__swhatbuf_r+0x22>
 80087c4:	ffffe000 	.word	0xffffe000

080087c8 <__smakebuf_r>:
 80087c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ca:	2602      	movs	r6, #2
 80087cc:	898b      	ldrh	r3, [r1, #12]
 80087ce:	0005      	movs	r5, r0
 80087d0:	000c      	movs	r4, r1
 80087d2:	4233      	tst	r3, r6
 80087d4:	d006      	beq.n	80087e4 <__smakebuf_r+0x1c>
 80087d6:	0023      	movs	r3, r4
 80087d8:	3347      	adds	r3, #71	; 0x47
 80087da:	6023      	str	r3, [r4, #0]
 80087dc:	6123      	str	r3, [r4, #16]
 80087de:	2301      	movs	r3, #1
 80087e0:	6163      	str	r3, [r4, #20]
 80087e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80087e4:	466a      	mov	r2, sp
 80087e6:	ab01      	add	r3, sp, #4
 80087e8:	f7ff ffc6 	bl	8008778 <__swhatbuf_r>
 80087ec:	9900      	ldr	r1, [sp, #0]
 80087ee:	0007      	movs	r7, r0
 80087f0:	0028      	movs	r0, r5
 80087f2:	f7ff fbb5 	bl	8007f60 <_malloc_r>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d108      	bne.n	800880c <__smakebuf_r+0x44>
 80087fa:	220c      	movs	r2, #12
 80087fc:	5ea3      	ldrsh	r3, [r4, r2]
 80087fe:	059a      	lsls	r2, r3, #22
 8008800:	d4ef      	bmi.n	80087e2 <__smakebuf_r+0x1a>
 8008802:	2203      	movs	r2, #3
 8008804:	4393      	bics	r3, r2
 8008806:	431e      	orrs	r6, r3
 8008808:	81a6      	strh	r6, [r4, #12]
 800880a:	e7e4      	b.n	80087d6 <__smakebuf_r+0xe>
 800880c:	2380      	movs	r3, #128	; 0x80
 800880e:	89a2      	ldrh	r2, [r4, #12]
 8008810:	6020      	str	r0, [r4, #0]
 8008812:	4313      	orrs	r3, r2
 8008814:	81a3      	strh	r3, [r4, #12]
 8008816:	9b00      	ldr	r3, [sp, #0]
 8008818:	6120      	str	r0, [r4, #16]
 800881a:	6163      	str	r3, [r4, #20]
 800881c:	9b01      	ldr	r3, [sp, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00c      	beq.n	800883c <__smakebuf_r+0x74>
 8008822:	0028      	movs	r0, r5
 8008824:	230e      	movs	r3, #14
 8008826:	5ee1      	ldrsh	r1, [r4, r3]
 8008828:	f000 f81e 	bl	8008868 <_isatty_r>
 800882c:	2800      	cmp	r0, #0
 800882e:	d005      	beq.n	800883c <__smakebuf_r+0x74>
 8008830:	2303      	movs	r3, #3
 8008832:	89a2      	ldrh	r2, [r4, #12]
 8008834:	439a      	bics	r2, r3
 8008836:	3b02      	subs	r3, #2
 8008838:	4313      	orrs	r3, r2
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	433b      	orrs	r3, r7
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	e7ce      	b.n	80087e2 <__smakebuf_r+0x1a>

08008844 <_fstat_r>:
 8008844:	2300      	movs	r3, #0
 8008846:	b570      	push	{r4, r5, r6, lr}
 8008848:	4d06      	ldr	r5, [pc, #24]	; (8008864 <_fstat_r+0x20>)
 800884a:	0004      	movs	r4, r0
 800884c:	0008      	movs	r0, r1
 800884e:	0011      	movs	r1, r2
 8008850:	602b      	str	r3, [r5, #0]
 8008852:	f7f9 fdfb 	bl	800244c <_fstat>
 8008856:	1c43      	adds	r3, r0, #1
 8008858:	d103      	bne.n	8008862 <_fstat_r+0x1e>
 800885a:	682b      	ldr	r3, [r5, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d000      	beq.n	8008862 <_fstat_r+0x1e>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd70      	pop	{r4, r5, r6, pc}
 8008864:	2000047c 	.word	0x2000047c

08008868 <_isatty_r>:
 8008868:	2300      	movs	r3, #0
 800886a:	b570      	push	{r4, r5, r6, lr}
 800886c:	4d06      	ldr	r5, [pc, #24]	; (8008888 <_isatty_r+0x20>)
 800886e:	0004      	movs	r4, r0
 8008870:	0008      	movs	r0, r1
 8008872:	602b      	str	r3, [r5, #0]
 8008874:	f7f9 fdf8 	bl	8002468 <_isatty>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d103      	bne.n	8008884 <_isatty_r+0x1c>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d000      	beq.n	8008884 <_isatty_r+0x1c>
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	bd70      	pop	{r4, r5, r6, pc}
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	2000047c 	.word	0x2000047c

0800888c <_sbrk_r>:
 800888c:	2300      	movs	r3, #0
 800888e:	b570      	push	{r4, r5, r6, lr}
 8008890:	4d06      	ldr	r5, [pc, #24]	; (80088ac <_sbrk_r+0x20>)
 8008892:	0004      	movs	r4, r0
 8008894:	0008      	movs	r0, r1
 8008896:	602b      	str	r3, [r5, #0]
 8008898:	f7f9 fdfa 	bl	8002490 <_sbrk>
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d103      	bne.n	80088a8 <_sbrk_r+0x1c>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d000      	beq.n	80088a8 <_sbrk_r+0x1c>
 80088a6:	6023      	str	r3, [r4, #0]
 80088a8:	bd70      	pop	{r4, r5, r6, pc}
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	2000047c 	.word	0x2000047c

080088b0 <memchr>:
 80088b0:	b2c9      	uxtb	r1, r1
 80088b2:	1882      	adds	r2, r0, r2
 80088b4:	4290      	cmp	r0, r2
 80088b6:	d101      	bne.n	80088bc <memchr+0xc>
 80088b8:	2000      	movs	r0, #0
 80088ba:	4770      	bx	lr
 80088bc:	7803      	ldrb	r3, [r0, #0]
 80088be:	428b      	cmp	r3, r1
 80088c0:	d0fb      	beq.n	80088ba <memchr+0xa>
 80088c2:	3001      	adds	r0, #1
 80088c4:	e7f6      	b.n	80088b4 <memchr+0x4>
	...

080088c8 <_init>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	46c0      	nop			; (mov r8, r8)
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr

080088d4 <_fini>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	46c0      	nop			; (mov r8, r8)
 80088d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088da:	bc08      	pop	{r3}
 80088dc:	469e      	mov	lr, r3
 80088de:	4770      	bx	lr
