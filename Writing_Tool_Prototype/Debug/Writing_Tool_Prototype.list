
Writing_Tool_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010090  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa8  08010150  08010150  00011150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010bf8  08010bf8  000121ec  2**0
                  CONTENTS
  4 .ARM          00000008  08010bf8  08010bf8  00011bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c00  08010c00  000121ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c00  08010c00  00011c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c04  08010c04  00011c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08010c08  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  200001ec  08010df4  000121ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  08010df4  00012708  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000121ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103d3  00000000  00000000  00012214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac4  00000000  00000000  000225e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  000250b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5c  00000000  00000000  00025f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143a7  00000000  00000000  00026ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015948  00000000  00000000  0003ae6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006eb4d  00000000  00000000  000507b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aac  00000000  00000000  000bf344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000c3df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08010138 	.word	0x08010138

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	08010138 	.word	0x08010138

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fbdd 	bl	8001bfc <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fb1d 	bl	8001a8c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fbcf 	bl	8001bfc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fbc5 	bl	8001bfc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fb47 	bl	8001b14 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fb3d 	bl	8001b14 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a2 	bl	8000620 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1824      	adds	r4, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	42a3      	cmp	r3, r4
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c23      	lsrs	r3, r4, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0424      	lsls	r4, r4, #16
 8000536:	1960      	adds	r0, r4, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 fa47 	bl	80029ec <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fe82 	bl	8002270 <__aeabi_dsub>
 800056c:	f002 fa3e 	bl	80029ec <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0004      	movs	r4, r0
 8000588:	000d      	movs	r5, r1
 800058a:	f7ff ff65 	bl	8000458 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x24>
 8000592:	0020      	movs	r0, r4
 8000594:	0029      	movs	r1, r5
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e9      	adds	r1, r5, r3
 80005aa:	0020      	movs	r0, r4
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x1e>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 fb8d 	bl	8001ce0 <__aeabi_dmul>
 80005c6:	f7ff ffbd 	bl	8000544 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f002 fa78 	bl	8002ac0 <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 fb84 	bl	8001ce0 <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fe46 	bl	8002270 <__aeabi_dsub>
 80005e4:	f7ff ffae 	bl	8000544 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f002 fa33 	bl	8002a64 <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 fb6d 	bl	8001ce0 <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f002 fa58 	bl	8002ac0 <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 fbbc 	bl	8000d90 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f002 fb4c 	bl	8002cdc <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f002 fb47 	bl	8002cdc <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_fdiv>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0244      	lsls	r4, r0, #9
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	0047      	lsls	r7, r0, #1
 80007c6:	1c0e      	adds	r6, r1, #0
 80007c8:	0a64      	lsrs	r4, r4, #9
 80007ca:	0e3f      	lsrs	r7, r7, #24
 80007cc:	0fc5      	lsrs	r5, r0, #31
 80007ce:	2f00      	cmp	r7, #0
 80007d0:	d03c      	beq.n	800084c <__aeabi_fdiv+0x94>
 80007d2:	2fff      	cmp	r7, #255	@ 0xff
 80007d4:	d042      	beq.n	800085c <__aeabi_fdiv+0xa4>
 80007d6:	2300      	movs	r3, #0
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	4699      	mov	r9, r3
 80007dc:	469a      	mov	sl, r3
 80007de:	00e4      	lsls	r4, r4, #3
 80007e0:	04d2      	lsls	r2, r2, #19
 80007e2:	4314      	orrs	r4, r2
 80007e4:	3f7f      	subs	r7, #127	@ 0x7f
 80007e6:	0273      	lsls	r3, r6, #9
 80007e8:	0a5b      	lsrs	r3, r3, #9
 80007ea:	4698      	mov	r8, r3
 80007ec:	0073      	lsls	r3, r6, #1
 80007ee:	0e1b      	lsrs	r3, r3, #24
 80007f0:	0ff6      	lsrs	r6, r6, #31
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d01b      	beq.n	800082e <__aeabi_fdiv+0x76>
 80007f6:	2bff      	cmp	r3, #255	@ 0xff
 80007f8:	d013      	beq.n	8000822 <__aeabi_fdiv+0x6a>
 80007fa:	4642      	mov	r2, r8
 80007fc:	2180      	movs	r1, #128	@ 0x80
 80007fe:	00d2      	lsls	r2, r2, #3
 8000800:	04c9      	lsls	r1, r1, #19
 8000802:	4311      	orrs	r1, r2
 8000804:	4688      	mov	r8, r1
 8000806:	2000      	movs	r0, #0
 8000808:	3b7f      	subs	r3, #127	@ 0x7f
 800080a:	0029      	movs	r1, r5
 800080c:	1aff      	subs	r7, r7, r3
 800080e:	464b      	mov	r3, r9
 8000810:	4071      	eors	r1, r6
 8000812:	b2c9      	uxtb	r1, r1
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d900      	bls.n	800081a <__aeabi_fdiv+0x62>
 8000818:	e0b5      	b.n	8000986 <__aeabi_fdiv+0x1ce>
 800081a:	4a74      	ldr	r2, [pc, #464]	@ (80009ec <__aeabi_fdiv+0x234>)
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	58d3      	ldr	r3, [r2, r3]
 8000820:	469f      	mov	pc, r3
 8000822:	4643      	mov	r3, r8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d13f      	bne.n	80008a8 <__aeabi_fdiv+0xf0>
 8000828:	3fff      	subs	r7, #255	@ 0xff
 800082a:	3302      	adds	r3, #2
 800082c:	e003      	b.n	8000836 <__aeabi_fdiv+0x7e>
 800082e:	4643      	mov	r3, r8
 8000830:	2b00      	cmp	r3, #0
 8000832:	d12d      	bne.n	8000890 <__aeabi_fdiv+0xd8>
 8000834:	2301      	movs	r3, #1
 8000836:	0029      	movs	r1, r5
 8000838:	464a      	mov	r2, r9
 800083a:	4071      	eors	r1, r6
 800083c:	b2c9      	uxtb	r1, r1
 800083e:	431a      	orrs	r2, r3
 8000840:	2a0e      	cmp	r2, #14
 8000842:	d838      	bhi.n	80008b6 <__aeabi_fdiv+0xfe>
 8000844:	486a      	ldr	r0, [pc, #424]	@ (80009f0 <__aeabi_fdiv+0x238>)
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	5882      	ldr	r2, [r0, r2]
 800084a:	4697      	mov	pc, r2
 800084c:	2c00      	cmp	r4, #0
 800084e:	d113      	bne.n	8000878 <__aeabi_fdiv+0xc0>
 8000850:	2304      	movs	r3, #4
 8000852:	4699      	mov	r9, r3
 8000854:	3b03      	subs	r3, #3
 8000856:	2700      	movs	r7, #0
 8000858:	469a      	mov	sl, r3
 800085a:	e7c4      	b.n	80007e6 <__aeabi_fdiv+0x2e>
 800085c:	2c00      	cmp	r4, #0
 800085e:	d105      	bne.n	800086c <__aeabi_fdiv+0xb4>
 8000860:	2308      	movs	r3, #8
 8000862:	4699      	mov	r9, r3
 8000864:	3b06      	subs	r3, #6
 8000866:	27ff      	movs	r7, #255	@ 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e7bc      	b.n	80007e6 <__aeabi_fdiv+0x2e>
 800086c:	230c      	movs	r3, #12
 800086e:	4699      	mov	r9, r3
 8000870:	3b09      	subs	r3, #9
 8000872:	27ff      	movs	r7, #255	@ 0xff
 8000874:	469a      	mov	sl, r3
 8000876:	e7b6      	b.n	80007e6 <__aeabi_fdiv+0x2e>
 8000878:	0020      	movs	r0, r4
 800087a:	f002 fa11 	bl	8002ca0 <__clzsi2>
 800087e:	2776      	movs	r7, #118	@ 0x76
 8000880:	1f43      	subs	r3, r0, #5
 8000882:	409c      	lsls	r4, r3
 8000884:	2300      	movs	r3, #0
 8000886:	427f      	negs	r7, r7
 8000888:	4699      	mov	r9, r3
 800088a:	469a      	mov	sl, r3
 800088c:	1a3f      	subs	r7, r7, r0
 800088e:	e7aa      	b.n	80007e6 <__aeabi_fdiv+0x2e>
 8000890:	4640      	mov	r0, r8
 8000892:	f002 fa05 	bl	8002ca0 <__clzsi2>
 8000896:	4642      	mov	r2, r8
 8000898:	1f43      	subs	r3, r0, #5
 800089a:	409a      	lsls	r2, r3
 800089c:	2376      	movs	r3, #118	@ 0x76
 800089e:	425b      	negs	r3, r3
 80008a0:	1a1b      	subs	r3, r3, r0
 80008a2:	4690      	mov	r8, r2
 80008a4:	2000      	movs	r0, #0
 80008a6:	e7b0      	b.n	800080a <__aeabi_fdiv+0x52>
 80008a8:	2303      	movs	r3, #3
 80008aa:	464a      	mov	r2, r9
 80008ac:	431a      	orrs	r2, r3
 80008ae:	4691      	mov	r9, r2
 80008b0:	2003      	movs	r0, #3
 80008b2:	33fc      	adds	r3, #252	@ 0xfc
 80008b4:	e7a9      	b.n	800080a <__aeabi_fdiv+0x52>
 80008b6:	000d      	movs	r5, r1
 80008b8:	20ff      	movs	r0, #255	@ 0xff
 80008ba:	2200      	movs	r2, #0
 80008bc:	05c0      	lsls	r0, r0, #23
 80008be:	07ed      	lsls	r5, r5, #31
 80008c0:	4310      	orrs	r0, r2
 80008c2:	4328      	orrs	r0, r5
 80008c4:	bce0      	pop	{r5, r6, r7}
 80008c6:	46ba      	mov	sl, r7
 80008c8:	46b1      	mov	r9, r6
 80008ca:	46a8      	mov	r8, r5
 80008cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ce:	000d      	movs	r5, r1
 80008d0:	2000      	movs	r0, #0
 80008d2:	2200      	movs	r2, #0
 80008d4:	e7f2      	b.n	80008bc <__aeabi_fdiv+0x104>
 80008d6:	4653      	mov	r3, sl
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d0ed      	beq.n	80008b8 <__aeabi_fdiv+0x100>
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d033      	beq.n	8000948 <__aeabi_fdiv+0x190>
 80008e0:	46a0      	mov	r8, r4
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d105      	bne.n	80008f2 <__aeabi_fdiv+0x13a>
 80008e6:	2000      	movs	r0, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	e7e7      	b.n	80008bc <__aeabi_fdiv+0x104>
 80008ec:	0035      	movs	r5, r6
 80008ee:	2803      	cmp	r0, #3
 80008f0:	d07a      	beq.n	80009e8 <__aeabi_fdiv+0x230>
 80008f2:	003b      	movs	r3, r7
 80008f4:	337f      	adds	r3, #127	@ 0x7f
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	dd2d      	ble.n	8000956 <__aeabi_fdiv+0x19e>
 80008fa:	4642      	mov	r2, r8
 80008fc:	0752      	lsls	r2, r2, #29
 80008fe:	d007      	beq.n	8000910 <__aeabi_fdiv+0x158>
 8000900:	220f      	movs	r2, #15
 8000902:	4641      	mov	r1, r8
 8000904:	400a      	ands	r2, r1
 8000906:	2a04      	cmp	r2, #4
 8000908:	d002      	beq.n	8000910 <__aeabi_fdiv+0x158>
 800090a:	2204      	movs	r2, #4
 800090c:	4694      	mov	ip, r2
 800090e:	44e0      	add	r8, ip
 8000910:	4642      	mov	r2, r8
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	d505      	bpl.n	8000922 <__aeabi_fdiv+0x16a>
 8000916:	4642      	mov	r2, r8
 8000918:	4b36      	ldr	r3, [pc, #216]	@ (80009f4 <__aeabi_fdiv+0x23c>)
 800091a:	401a      	ands	r2, r3
 800091c:	003b      	movs	r3, r7
 800091e:	4690      	mov	r8, r2
 8000920:	3380      	adds	r3, #128	@ 0x80
 8000922:	2bfe      	cmp	r3, #254	@ 0xfe
 8000924:	dcc8      	bgt.n	80008b8 <__aeabi_fdiv+0x100>
 8000926:	4642      	mov	r2, r8
 8000928:	0192      	lsls	r2, r2, #6
 800092a:	0a52      	lsrs	r2, r2, #9
 800092c:	b2d8      	uxtb	r0, r3
 800092e:	e7c5      	b.n	80008bc <__aeabi_fdiv+0x104>
 8000930:	2280      	movs	r2, #128	@ 0x80
 8000932:	2500      	movs	r5, #0
 8000934:	20ff      	movs	r0, #255	@ 0xff
 8000936:	03d2      	lsls	r2, r2, #15
 8000938:	e7c0      	b.n	80008bc <__aeabi_fdiv+0x104>
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	03d2      	lsls	r2, r2, #15
 800093e:	4214      	tst	r4, r2
 8000940:	d002      	beq.n	8000948 <__aeabi_fdiv+0x190>
 8000942:	4643      	mov	r3, r8
 8000944:	4213      	tst	r3, r2
 8000946:	d049      	beq.n	80009dc <__aeabi_fdiv+0x224>
 8000948:	2280      	movs	r2, #128	@ 0x80
 800094a:	03d2      	lsls	r2, r2, #15
 800094c:	4322      	orrs	r2, r4
 800094e:	0252      	lsls	r2, r2, #9
 8000950:	20ff      	movs	r0, #255	@ 0xff
 8000952:	0a52      	lsrs	r2, r2, #9
 8000954:	e7b2      	b.n	80008bc <__aeabi_fdiv+0x104>
 8000956:	2201      	movs	r2, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	2b1b      	cmp	r3, #27
 800095c:	dcc3      	bgt.n	80008e6 <__aeabi_fdiv+0x12e>
 800095e:	4642      	mov	r2, r8
 8000960:	40da      	lsrs	r2, r3
 8000962:	4643      	mov	r3, r8
 8000964:	379e      	adds	r7, #158	@ 0x9e
 8000966:	40bb      	lsls	r3, r7
 8000968:	1e59      	subs	r1, r3, #1
 800096a:	418b      	sbcs	r3, r1
 800096c:	431a      	orrs	r2, r3
 800096e:	0753      	lsls	r3, r2, #29
 8000970:	d004      	beq.n	800097c <__aeabi_fdiv+0x1c4>
 8000972:	230f      	movs	r3, #15
 8000974:	4013      	ands	r3, r2
 8000976:	2b04      	cmp	r3, #4
 8000978:	d000      	beq.n	800097c <__aeabi_fdiv+0x1c4>
 800097a:	3204      	adds	r2, #4
 800097c:	0153      	lsls	r3, r2, #5
 800097e:	d529      	bpl.n	80009d4 <__aeabi_fdiv+0x21c>
 8000980:	2001      	movs	r0, #1
 8000982:	2200      	movs	r2, #0
 8000984:	e79a      	b.n	80008bc <__aeabi_fdiv+0x104>
 8000986:	4642      	mov	r2, r8
 8000988:	0163      	lsls	r3, r4, #5
 800098a:	0155      	lsls	r5, r2, #5
 800098c:	42ab      	cmp	r3, r5
 800098e:	d215      	bcs.n	80009bc <__aeabi_fdiv+0x204>
 8000990:	201b      	movs	r0, #27
 8000992:	2200      	movs	r2, #0
 8000994:	3f01      	subs	r7, #1
 8000996:	2601      	movs	r6, #1
 8000998:	001c      	movs	r4, r3
 800099a:	0052      	lsls	r2, r2, #1
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	2c00      	cmp	r4, #0
 80009a0:	db01      	blt.n	80009a6 <__aeabi_fdiv+0x1ee>
 80009a2:	429d      	cmp	r5, r3
 80009a4:	d801      	bhi.n	80009aa <__aeabi_fdiv+0x1f2>
 80009a6:	1b5b      	subs	r3, r3, r5
 80009a8:	4332      	orrs	r2, r6
 80009aa:	3801      	subs	r0, #1
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d1f3      	bne.n	8000998 <__aeabi_fdiv+0x1e0>
 80009b0:	1e58      	subs	r0, r3, #1
 80009b2:	4183      	sbcs	r3, r0
 80009b4:	4313      	orrs	r3, r2
 80009b6:	4698      	mov	r8, r3
 80009b8:	000d      	movs	r5, r1
 80009ba:	e79a      	b.n	80008f2 <__aeabi_fdiv+0x13a>
 80009bc:	201a      	movs	r0, #26
 80009be:	2201      	movs	r2, #1
 80009c0:	1b5b      	subs	r3, r3, r5
 80009c2:	e7e8      	b.n	8000996 <__aeabi_fdiv+0x1de>
 80009c4:	3b02      	subs	r3, #2
 80009c6:	425a      	negs	r2, r3
 80009c8:	4153      	adcs	r3, r2
 80009ca:	425b      	negs	r3, r3
 80009cc:	0035      	movs	r5, r6
 80009ce:	2200      	movs	r2, #0
 80009d0:	b2d8      	uxtb	r0, r3
 80009d2:	e773      	b.n	80008bc <__aeabi_fdiv+0x104>
 80009d4:	0192      	lsls	r2, r2, #6
 80009d6:	2000      	movs	r0, #0
 80009d8:	0a52      	lsrs	r2, r2, #9
 80009da:	e76f      	b.n	80008bc <__aeabi_fdiv+0x104>
 80009dc:	431a      	orrs	r2, r3
 80009de:	0252      	lsls	r2, r2, #9
 80009e0:	0035      	movs	r5, r6
 80009e2:	20ff      	movs	r0, #255	@ 0xff
 80009e4:	0a52      	lsrs	r2, r2, #9
 80009e6:	e769      	b.n	80008bc <__aeabi_fdiv+0x104>
 80009e8:	4644      	mov	r4, r8
 80009ea:	e7ad      	b.n	8000948 <__aeabi_fdiv+0x190>
 80009ec:	08010204 	.word	0x08010204
 80009f0:	08010244 	.word	0x08010244
 80009f4:	f7ffffff 	.word	0xf7ffffff

080009f8 <__aeabi_fmul>:
 80009f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fa:	464f      	mov	r7, r9
 80009fc:	4646      	mov	r6, r8
 80009fe:	46d6      	mov	lr, sl
 8000a00:	0243      	lsls	r3, r0, #9
 8000a02:	0a5b      	lsrs	r3, r3, #9
 8000a04:	0045      	lsls	r5, r0, #1
 8000a06:	b5c0      	push	{r6, r7, lr}
 8000a08:	4699      	mov	r9, r3
 8000a0a:	1c0f      	adds	r7, r1, #0
 8000a0c:	0e2d      	lsrs	r5, r5, #24
 8000a0e:	0fc6      	lsrs	r6, r0, #31
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fmul+0x1e>
 8000a14:	e088      	b.n	8000b28 <__aeabi_fmul+0x130>
 8000a16:	2dff      	cmp	r5, #255	@ 0xff
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fmul+0x24>
 8000a1a:	e08d      	b.n	8000b38 <__aeabi_fmul+0x140>
 8000a1c:	2280      	movs	r2, #128	@ 0x80
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	04d2      	lsls	r2, r2, #19
 8000a22:	431a      	orrs	r2, r3
 8000a24:	2300      	movs	r3, #0
 8000a26:	4691      	mov	r9, r2
 8000a28:	4698      	mov	r8, r3
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	3d7f      	subs	r5, #127	@ 0x7f
 8000a2e:	027c      	lsls	r4, r7, #9
 8000a30:	007b      	lsls	r3, r7, #1
 8000a32:	0a64      	lsrs	r4, r4, #9
 8000a34:	0e1b      	lsrs	r3, r3, #24
 8000a36:	0fff      	lsrs	r7, r7, #31
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d068      	beq.n	8000b0e <__aeabi_fmul+0x116>
 8000a3c:	2bff      	cmp	r3, #255	@ 0xff
 8000a3e:	d021      	beq.n	8000a84 <__aeabi_fmul+0x8c>
 8000a40:	2280      	movs	r2, #128	@ 0x80
 8000a42:	00e4      	lsls	r4, r4, #3
 8000a44:	04d2      	lsls	r2, r2, #19
 8000a46:	4314      	orrs	r4, r2
 8000a48:	4642      	mov	r2, r8
 8000a4a:	3b7f      	subs	r3, #127	@ 0x7f
 8000a4c:	195b      	adds	r3, r3, r5
 8000a4e:	2100      	movs	r1, #0
 8000a50:	1c5d      	adds	r5, r3, #1
 8000a52:	2a0a      	cmp	r2, #10
 8000a54:	dc2e      	bgt.n	8000ab4 <__aeabi_fmul+0xbc>
 8000a56:	407e      	eors	r6, r7
 8000a58:	4642      	mov	r2, r8
 8000a5a:	2a02      	cmp	r2, #2
 8000a5c:	dc23      	bgt.n	8000aa6 <__aeabi_fmul+0xae>
 8000a5e:	3a01      	subs	r2, #1
 8000a60:	2a01      	cmp	r2, #1
 8000a62:	d900      	bls.n	8000a66 <__aeabi_fmul+0x6e>
 8000a64:	e0bd      	b.n	8000be2 <__aeabi_fmul+0x1ea>
 8000a66:	2902      	cmp	r1, #2
 8000a68:	d06e      	beq.n	8000b48 <__aeabi_fmul+0x150>
 8000a6a:	2901      	cmp	r1, #1
 8000a6c:	d12c      	bne.n	8000ac8 <__aeabi_fmul+0xd0>
 8000a6e:	2000      	movs	r0, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	05c0      	lsls	r0, r0, #23
 8000a74:	07f6      	lsls	r6, r6, #31
 8000a76:	4310      	orrs	r0, r2
 8000a78:	4330      	orrs	r0, r6
 8000a7a:	bce0      	pop	{r5, r6, r7}
 8000a7c:	46ba      	mov	sl, r7
 8000a7e:	46b1      	mov	r9, r6
 8000a80:	46a8      	mov	r8, r5
 8000a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a84:	002b      	movs	r3, r5
 8000a86:	33ff      	adds	r3, #255	@ 0xff
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	d065      	beq.n	8000b58 <__aeabi_fmul+0x160>
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	4641      	mov	r1, r8
 8000a90:	4311      	orrs	r1, r2
 8000a92:	0032      	movs	r2, r6
 8000a94:	3501      	adds	r5, #1
 8000a96:	4688      	mov	r8, r1
 8000a98:	407a      	eors	r2, r7
 8000a9a:	35ff      	adds	r5, #255	@ 0xff
 8000a9c:	290a      	cmp	r1, #10
 8000a9e:	dd00      	ble.n	8000aa2 <__aeabi_fmul+0xaa>
 8000aa0:	e0d8      	b.n	8000c54 <__aeabi_fmul+0x25c>
 8000aa2:	0016      	movs	r6, r2
 8000aa4:	2103      	movs	r1, #3
 8000aa6:	4640      	mov	r0, r8
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4082      	lsls	r2, r0
 8000aac:	20a6      	movs	r0, #166	@ 0xa6
 8000aae:	00c0      	lsls	r0, r0, #3
 8000ab0:	4202      	tst	r2, r0
 8000ab2:	d020      	beq.n	8000af6 <__aeabi_fmul+0xfe>
 8000ab4:	4653      	mov	r3, sl
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d046      	beq.n	8000b48 <__aeabi_fmul+0x150>
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_fmul+0xc8>
 8000abe:	e0bb      	b.n	8000c38 <__aeabi_fmul+0x240>
 8000ac0:	4651      	mov	r1, sl
 8000ac2:	464c      	mov	r4, r9
 8000ac4:	2901      	cmp	r1, #1
 8000ac6:	d0d2      	beq.n	8000a6e <__aeabi_fmul+0x76>
 8000ac8:	002b      	movs	r3, r5
 8000aca:	337f      	adds	r3, #127	@ 0x7f
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	dd70      	ble.n	8000bb2 <__aeabi_fmul+0x1ba>
 8000ad0:	0762      	lsls	r2, r4, #29
 8000ad2:	d004      	beq.n	8000ade <__aeabi_fmul+0xe6>
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	4022      	ands	r2, r4
 8000ad8:	2a04      	cmp	r2, #4
 8000ada:	d000      	beq.n	8000ade <__aeabi_fmul+0xe6>
 8000adc:	3404      	adds	r4, #4
 8000ade:	0122      	lsls	r2, r4, #4
 8000ae0:	d503      	bpl.n	8000aea <__aeabi_fmul+0xf2>
 8000ae2:	4b63      	ldr	r3, [pc, #396]	@ (8000c70 <__aeabi_fmul+0x278>)
 8000ae4:	401c      	ands	r4, r3
 8000ae6:	002b      	movs	r3, r5
 8000ae8:	3380      	adds	r3, #128	@ 0x80
 8000aea:	2bfe      	cmp	r3, #254	@ 0xfe
 8000aec:	dc2c      	bgt.n	8000b48 <__aeabi_fmul+0x150>
 8000aee:	01a2      	lsls	r2, r4, #6
 8000af0:	0a52      	lsrs	r2, r2, #9
 8000af2:	b2d8      	uxtb	r0, r3
 8000af4:	e7bd      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000af6:	2090      	movs	r0, #144	@ 0x90
 8000af8:	0080      	lsls	r0, r0, #2
 8000afa:	4202      	tst	r2, r0
 8000afc:	d127      	bne.n	8000b4e <__aeabi_fmul+0x156>
 8000afe:	38b9      	subs	r0, #185	@ 0xb9
 8000b00:	38ff      	subs	r0, #255	@ 0xff
 8000b02:	4210      	tst	r0, r2
 8000b04:	d06d      	beq.n	8000be2 <__aeabi_fmul+0x1ea>
 8000b06:	003e      	movs	r6, r7
 8000b08:	46a1      	mov	r9, r4
 8000b0a:	468a      	mov	sl, r1
 8000b0c:	e7d2      	b.n	8000ab4 <__aeabi_fmul+0xbc>
 8000b0e:	2c00      	cmp	r4, #0
 8000b10:	d141      	bne.n	8000b96 <__aeabi_fmul+0x19e>
 8000b12:	2301      	movs	r3, #1
 8000b14:	4642      	mov	r2, r8
 8000b16:	431a      	orrs	r2, r3
 8000b18:	4690      	mov	r8, r2
 8000b1a:	002b      	movs	r3, r5
 8000b1c:	4642      	mov	r2, r8
 8000b1e:	2101      	movs	r1, #1
 8000b20:	1c5d      	adds	r5, r3, #1
 8000b22:	2a0a      	cmp	r2, #10
 8000b24:	dd97      	ble.n	8000a56 <__aeabi_fmul+0x5e>
 8000b26:	e7c5      	b.n	8000ab4 <__aeabi_fmul+0xbc>
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d126      	bne.n	8000b7a <__aeabi_fmul+0x182>
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	4698      	mov	r8, r3
 8000b30:	3b03      	subs	r3, #3
 8000b32:	2500      	movs	r5, #0
 8000b34:	469a      	mov	sl, r3
 8000b36:	e77a      	b.n	8000a2e <__aeabi_fmul+0x36>
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d118      	bne.n	8000b6e <__aeabi_fmul+0x176>
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	4698      	mov	r8, r3
 8000b40:	3b06      	subs	r3, #6
 8000b42:	25ff      	movs	r5, #255	@ 0xff
 8000b44:	469a      	mov	sl, r3
 8000b46:	e772      	b.n	8000a2e <__aeabi_fmul+0x36>
 8000b48:	20ff      	movs	r0, #255	@ 0xff
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	e791      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000b4e:	2280      	movs	r2, #128	@ 0x80
 8000b50:	2600      	movs	r6, #0
 8000b52:	20ff      	movs	r0, #255	@ 0xff
 8000b54:	03d2      	lsls	r2, r2, #15
 8000b56:	e78c      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000b58:	4641      	mov	r1, r8
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	3501      	adds	r5, #1
 8000b5e:	4311      	orrs	r1, r2
 8000b60:	4688      	mov	r8, r1
 8000b62:	35ff      	adds	r5, #255	@ 0xff
 8000b64:	290a      	cmp	r1, #10
 8000b66:	dca5      	bgt.n	8000ab4 <__aeabi_fmul+0xbc>
 8000b68:	2102      	movs	r1, #2
 8000b6a:	407e      	eors	r6, r7
 8000b6c:	e774      	b.n	8000a58 <__aeabi_fmul+0x60>
 8000b6e:	230c      	movs	r3, #12
 8000b70:	4698      	mov	r8, r3
 8000b72:	3b09      	subs	r3, #9
 8000b74:	25ff      	movs	r5, #255	@ 0xff
 8000b76:	469a      	mov	sl, r3
 8000b78:	e759      	b.n	8000a2e <__aeabi_fmul+0x36>
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 f890 	bl	8002ca0 <__clzsi2>
 8000b80:	464a      	mov	r2, r9
 8000b82:	1f43      	subs	r3, r0, #5
 8000b84:	2576      	movs	r5, #118	@ 0x76
 8000b86:	409a      	lsls	r2, r3
 8000b88:	2300      	movs	r3, #0
 8000b8a:	426d      	negs	r5, r5
 8000b8c:	4691      	mov	r9, r2
 8000b8e:	4698      	mov	r8, r3
 8000b90:	469a      	mov	sl, r3
 8000b92:	1a2d      	subs	r5, r5, r0
 8000b94:	e74b      	b.n	8000a2e <__aeabi_fmul+0x36>
 8000b96:	0020      	movs	r0, r4
 8000b98:	f002 f882 	bl	8002ca0 <__clzsi2>
 8000b9c:	4642      	mov	r2, r8
 8000b9e:	1f43      	subs	r3, r0, #5
 8000ba0:	409c      	lsls	r4, r3
 8000ba2:	1a2b      	subs	r3, r5, r0
 8000ba4:	3b76      	subs	r3, #118	@ 0x76
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	1c5d      	adds	r5, r3, #1
 8000baa:	2a0a      	cmp	r2, #10
 8000bac:	dc00      	bgt.n	8000bb0 <__aeabi_fmul+0x1b8>
 8000bae:	e752      	b.n	8000a56 <__aeabi_fmul+0x5e>
 8000bb0:	e780      	b.n	8000ab4 <__aeabi_fmul+0xbc>
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b1b      	cmp	r3, #27
 8000bb8:	dd00      	ble.n	8000bbc <__aeabi_fmul+0x1c4>
 8000bba:	e758      	b.n	8000a6e <__aeabi_fmul+0x76>
 8000bbc:	359e      	adds	r5, #158	@ 0x9e
 8000bbe:	0022      	movs	r2, r4
 8000bc0:	40ac      	lsls	r4, r5
 8000bc2:	40da      	lsrs	r2, r3
 8000bc4:	1e63      	subs	r3, r4, #1
 8000bc6:	419c      	sbcs	r4, r3
 8000bc8:	4322      	orrs	r2, r4
 8000bca:	0753      	lsls	r3, r2, #29
 8000bcc:	d004      	beq.n	8000bd8 <__aeabi_fmul+0x1e0>
 8000bce:	230f      	movs	r3, #15
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d000      	beq.n	8000bd8 <__aeabi_fmul+0x1e0>
 8000bd6:	3204      	adds	r2, #4
 8000bd8:	0153      	lsls	r3, r2, #5
 8000bda:	d537      	bpl.n	8000c4c <__aeabi_fmul+0x254>
 8000bdc:	2001      	movs	r0, #1
 8000bde:	2200      	movs	r2, #0
 8000be0:	e747      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000be2:	0c21      	lsrs	r1, r4, #16
 8000be4:	464a      	mov	r2, r9
 8000be6:	0424      	lsls	r4, r4, #16
 8000be8:	0c24      	lsrs	r4, r4, #16
 8000bea:	0027      	movs	r7, r4
 8000bec:	0c10      	lsrs	r0, r2, #16
 8000bee:	0412      	lsls	r2, r2, #16
 8000bf0:	0c12      	lsrs	r2, r2, #16
 8000bf2:	4344      	muls	r4, r0
 8000bf4:	4357      	muls	r7, r2
 8000bf6:	4348      	muls	r0, r1
 8000bf8:	4351      	muls	r1, r2
 8000bfa:	0c3a      	lsrs	r2, r7, #16
 8000bfc:	1909      	adds	r1, r1, r4
 8000bfe:	1852      	adds	r2, r2, r1
 8000c00:	4294      	cmp	r4, r2
 8000c02:	d903      	bls.n	8000c0c <__aeabi_fmul+0x214>
 8000c04:	2180      	movs	r1, #128	@ 0x80
 8000c06:	0249      	lsls	r1, r1, #9
 8000c08:	468c      	mov	ip, r1
 8000c0a:	4460      	add	r0, ip
 8000c0c:	043f      	lsls	r7, r7, #16
 8000c0e:	0411      	lsls	r1, r2, #16
 8000c10:	0c3f      	lsrs	r7, r7, #16
 8000c12:	19c9      	adds	r1, r1, r7
 8000c14:	018c      	lsls	r4, r1, #6
 8000c16:	1e67      	subs	r7, r4, #1
 8000c18:	41bc      	sbcs	r4, r7
 8000c1a:	0c12      	lsrs	r2, r2, #16
 8000c1c:	0e89      	lsrs	r1, r1, #26
 8000c1e:	1812      	adds	r2, r2, r0
 8000c20:	430c      	orrs	r4, r1
 8000c22:	0192      	lsls	r2, r2, #6
 8000c24:	4314      	orrs	r4, r2
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	d50e      	bpl.n	8000c48 <__aeabi_fmul+0x250>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	0862      	lsrs	r2, r4, #1
 8000c2e:	401c      	ands	r4, r3
 8000c30:	4314      	orrs	r4, r2
 8000c32:	e749      	b.n	8000ac8 <__aeabi_fmul+0xd0>
 8000c34:	003e      	movs	r6, r7
 8000c36:	46a1      	mov	r9, r4
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	464b      	mov	r3, r9
 8000c3c:	03d2      	lsls	r2, r2, #15
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	0252      	lsls	r2, r2, #9
 8000c42:	20ff      	movs	r0, #255	@ 0xff
 8000c44:	0a52      	lsrs	r2, r2, #9
 8000c46:	e714      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000c48:	001d      	movs	r5, r3
 8000c4a:	e73d      	b.n	8000ac8 <__aeabi_fmul+0xd0>
 8000c4c:	0192      	lsls	r2, r2, #6
 8000c4e:	2000      	movs	r0, #0
 8000c50:	0a52      	lsrs	r2, r2, #9
 8000c52:	e70e      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000c54:	290f      	cmp	r1, #15
 8000c56:	d1ed      	bne.n	8000c34 <__aeabi_fmul+0x23c>
 8000c58:	2280      	movs	r2, #128	@ 0x80
 8000c5a:	464b      	mov	r3, r9
 8000c5c:	03d2      	lsls	r2, r2, #15
 8000c5e:	4213      	tst	r3, r2
 8000c60:	d0ea      	beq.n	8000c38 <__aeabi_fmul+0x240>
 8000c62:	4214      	tst	r4, r2
 8000c64:	d1e8      	bne.n	8000c38 <__aeabi_fmul+0x240>
 8000c66:	003e      	movs	r6, r7
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	4322      	orrs	r2, r4
 8000c6c:	e701      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	f7ffffff 	.word	0xf7ffffff

08000c74 <__aeabi_i2f>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	2800      	cmp	r0, #0
 8000c78:	d013      	beq.n	8000ca2 <__aeabi_i2f+0x2e>
 8000c7a:	17c3      	asrs	r3, r0, #31
 8000c7c:	18c5      	adds	r5, r0, r3
 8000c7e:	405d      	eors	r5, r3
 8000c80:	0fc4      	lsrs	r4, r0, #31
 8000c82:	0028      	movs	r0, r5
 8000c84:	f002 f80c 	bl	8002ca0 <__clzsi2>
 8000c88:	239e      	movs	r3, #158	@ 0x9e
 8000c8a:	0001      	movs	r1, r0
 8000c8c:	1a1b      	subs	r3, r3, r0
 8000c8e:	2b96      	cmp	r3, #150	@ 0x96
 8000c90:	dc0f      	bgt.n	8000cb2 <__aeabi_i2f+0x3e>
 8000c92:	2808      	cmp	r0, #8
 8000c94:	d034      	beq.n	8000d00 <__aeabi_i2f+0x8c>
 8000c96:	3908      	subs	r1, #8
 8000c98:	408d      	lsls	r5, r1
 8000c9a:	026d      	lsls	r5, r5, #9
 8000c9c:	0a6d      	lsrs	r5, r5, #9
 8000c9e:	b2d8      	uxtb	r0, r3
 8000ca0:	e002      	b.n	8000ca8 <__aeabi_i2f+0x34>
 8000ca2:	2400      	movs	r4, #0
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	2500      	movs	r5, #0
 8000ca8:	05c0      	lsls	r0, r0, #23
 8000caa:	4328      	orrs	r0, r5
 8000cac:	07e4      	lsls	r4, r4, #31
 8000cae:	4320      	orrs	r0, r4
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}
 8000cb2:	2b99      	cmp	r3, #153	@ 0x99
 8000cb4:	dc16      	bgt.n	8000ce4 <__aeabi_i2f+0x70>
 8000cb6:	1f42      	subs	r2, r0, #5
 8000cb8:	2805      	cmp	r0, #5
 8000cba:	d000      	beq.n	8000cbe <__aeabi_i2f+0x4a>
 8000cbc:	4095      	lsls	r5, r2
 8000cbe:	002a      	movs	r2, r5
 8000cc0:	4811      	ldr	r0, [pc, #68]	@ (8000d08 <__aeabi_i2f+0x94>)
 8000cc2:	4002      	ands	r2, r0
 8000cc4:	076e      	lsls	r6, r5, #29
 8000cc6:	d009      	beq.n	8000cdc <__aeabi_i2f+0x68>
 8000cc8:	260f      	movs	r6, #15
 8000cca:	4035      	ands	r5, r6
 8000ccc:	2d04      	cmp	r5, #4
 8000cce:	d005      	beq.n	8000cdc <__aeabi_i2f+0x68>
 8000cd0:	3204      	adds	r2, #4
 8000cd2:	0155      	lsls	r5, r2, #5
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_i2f+0x68>
 8000cd6:	239f      	movs	r3, #159	@ 0x9f
 8000cd8:	4002      	ands	r2, r0
 8000cda:	1a5b      	subs	r3, r3, r1
 8000cdc:	0192      	lsls	r2, r2, #6
 8000cde:	0a55      	lsrs	r5, r2, #9
 8000ce0:	b2d8      	uxtb	r0, r3
 8000ce2:	e7e1      	b.n	8000ca8 <__aeabi_i2f+0x34>
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	1a12      	subs	r2, r2, r0
 8000ce8:	0028      	movs	r0, r5
 8000cea:	40d0      	lsrs	r0, r2
 8000cec:	0002      	movs	r2, r0
 8000cee:	0008      	movs	r0, r1
 8000cf0:	301b      	adds	r0, #27
 8000cf2:	4085      	lsls	r5, r0
 8000cf4:	0028      	movs	r0, r5
 8000cf6:	1e45      	subs	r5, r0, #1
 8000cf8:	41a8      	sbcs	r0, r5
 8000cfa:	4302      	orrs	r2, r0
 8000cfc:	0015      	movs	r5, r2
 8000cfe:	e7de      	b.n	8000cbe <__aeabi_i2f+0x4a>
 8000d00:	026d      	lsls	r5, r5, #9
 8000d02:	2096      	movs	r0, #150	@ 0x96
 8000d04:	0a6d      	lsrs	r5, r5, #9
 8000d06:	e7cf      	b.n	8000ca8 <__aeabi_i2f+0x34>
 8000d08:	fbffffff 	.word	0xfbffffff

08000d0c <__aeabi_ui2f>:
 8000d0c:	b570      	push	{r4, r5, r6, lr}
 8000d0e:	1e04      	subs	r4, r0, #0
 8000d10:	d00e      	beq.n	8000d30 <__aeabi_ui2f+0x24>
 8000d12:	f001 ffc5 	bl	8002ca0 <__clzsi2>
 8000d16:	239e      	movs	r3, #158	@ 0x9e
 8000d18:	0001      	movs	r1, r0
 8000d1a:	1a1b      	subs	r3, r3, r0
 8000d1c:	2b96      	cmp	r3, #150	@ 0x96
 8000d1e:	dc0c      	bgt.n	8000d3a <__aeabi_ui2f+0x2e>
 8000d20:	2808      	cmp	r0, #8
 8000d22:	d02f      	beq.n	8000d84 <__aeabi_ui2f+0x78>
 8000d24:	3908      	subs	r1, #8
 8000d26:	408c      	lsls	r4, r1
 8000d28:	0264      	lsls	r4, r4, #9
 8000d2a:	0a64      	lsrs	r4, r4, #9
 8000d2c:	b2d8      	uxtb	r0, r3
 8000d2e:	e001      	b.n	8000d34 <__aeabi_ui2f+0x28>
 8000d30:	2000      	movs	r0, #0
 8000d32:	2400      	movs	r4, #0
 8000d34:	05c0      	lsls	r0, r0, #23
 8000d36:	4320      	orrs	r0, r4
 8000d38:	bd70      	pop	{r4, r5, r6, pc}
 8000d3a:	2b99      	cmp	r3, #153	@ 0x99
 8000d3c:	dc16      	bgt.n	8000d6c <__aeabi_ui2f+0x60>
 8000d3e:	1f42      	subs	r2, r0, #5
 8000d40:	2805      	cmp	r0, #5
 8000d42:	d000      	beq.n	8000d46 <__aeabi_ui2f+0x3a>
 8000d44:	4094      	lsls	r4, r2
 8000d46:	0022      	movs	r2, r4
 8000d48:	4810      	ldr	r0, [pc, #64]	@ (8000d8c <__aeabi_ui2f+0x80>)
 8000d4a:	4002      	ands	r2, r0
 8000d4c:	0765      	lsls	r5, r4, #29
 8000d4e:	d009      	beq.n	8000d64 <__aeabi_ui2f+0x58>
 8000d50:	250f      	movs	r5, #15
 8000d52:	402c      	ands	r4, r5
 8000d54:	2c04      	cmp	r4, #4
 8000d56:	d005      	beq.n	8000d64 <__aeabi_ui2f+0x58>
 8000d58:	3204      	adds	r2, #4
 8000d5a:	0154      	lsls	r4, r2, #5
 8000d5c:	d502      	bpl.n	8000d64 <__aeabi_ui2f+0x58>
 8000d5e:	239f      	movs	r3, #159	@ 0x9f
 8000d60:	4002      	ands	r2, r0
 8000d62:	1a5b      	subs	r3, r3, r1
 8000d64:	0192      	lsls	r2, r2, #6
 8000d66:	0a54      	lsrs	r4, r2, #9
 8000d68:	b2d8      	uxtb	r0, r3
 8000d6a:	e7e3      	b.n	8000d34 <__aeabi_ui2f+0x28>
 8000d6c:	0002      	movs	r2, r0
 8000d6e:	0020      	movs	r0, r4
 8000d70:	321b      	adds	r2, #27
 8000d72:	4090      	lsls	r0, r2
 8000d74:	0002      	movs	r2, r0
 8000d76:	1e50      	subs	r0, r2, #1
 8000d78:	4182      	sbcs	r2, r0
 8000d7a:	2005      	movs	r0, #5
 8000d7c:	1a40      	subs	r0, r0, r1
 8000d7e:	40c4      	lsrs	r4, r0
 8000d80:	4314      	orrs	r4, r2
 8000d82:	e7e0      	b.n	8000d46 <__aeabi_ui2f+0x3a>
 8000d84:	0264      	lsls	r4, r4, #9
 8000d86:	2096      	movs	r0, #150	@ 0x96
 8000d88:	0a64      	lsrs	r4, r4, #9
 8000d8a:	e7d3      	b.n	8000d34 <__aeabi_ui2f+0x28>
 8000d8c:	fbffffff 	.word	0xfbffffff

08000d90 <__aeabi_dadd>:
 8000d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d92:	4657      	mov	r7, sl
 8000d94:	464e      	mov	r6, r9
 8000d96:	4645      	mov	r5, r8
 8000d98:	46de      	mov	lr, fp
 8000d9a:	b5e0      	push	{r5, r6, r7, lr}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	9000      	str	r0, [sp, #0]
 8000da0:	9101      	str	r1, [sp, #4]
 8000da2:	030c      	lsls	r4, r1, #12
 8000da4:	004f      	lsls	r7, r1, #1
 8000da6:	0fce      	lsrs	r6, r1, #31
 8000da8:	0a61      	lsrs	r1, r4, #9
 8000daa:	9c00      	ldr	r4, [sp, #0]
 8000dac:	031d      	lsls	r5, r3, #12
 8000dae:	0f64      	lsrs	r4, r4, #29
 8000db0:	430c      	orrs	r4, r1
 8000db2:	9900      	ldr	r1, [sp, #0]
 8000db4:	9200      	str	r2, [sp, #0]
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	00c8      	lsls	r0, r1, #3
 8000dba:	0059      	lsls	r1, r3, #1
 8000dbc:	0d4b      	lsrs	r3, r1, #21
 8000dbe:	4699      	mov	r9, r3
 8000dc0:	9a00      	ldr	r2, [sp, #0]
 8000dc2:	9b01      	ldr	r3, [sp, #4]
 8000dc4:	0a6d      	lsrs	r5, r5, #9
 8000dc6:	0fd9      	lsrs	r1, r3, #31
 8000dc8:	0f53      	lsrs	r3, r2, #29
 8000dca:	432b      	orrs	r3, r5
 8000dcc:	469a      	mov	sl, r3
 8000dce:	9b00      	ldr	r3, [sp, #0]
 8000dd0:	0d7f      	lsrs	r7, r7, #21
 8000dd2:	00da      	lsls	r2, r3, #3
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	46b0      	mov	r8, r6
 8000dda:	1aba      	subs	r2, r7, r2
 8000ddc:	428e      	cmp	r6, r1
 8000dde:	d100      	bne.n	8000de2 <__aeabi_dadd+0x52>
 8000de0:	e0b0      	b.n	8000f44 <__aeabi_dadd+0x1b4>
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	dc00      	bgt.n	8000de8 <__aeabi_dadd+0x58>
 8000de6:	e078      	b.n	8000eda <__aeabi_dadd+0x14a>
 8000de8:	4649      	mov	r1, r9
 8000dea:	2900      	cmp	r1, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_dadd+0x60>
 8000dee:	e0e9      	b.n	8000fc4 <__aeabi_dadd+0x234>
 8000df0:	49c9      	ldr	r1, [pc, #804]	@ (8001118 <__aeabi_dadd+0x388>)
 8000df2:	428f      	cmp	r7, r1
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x68>
 8000df6:	e195      	b.n	8001124 <__aeabi_dadd+0x394>
 8000df8:	2501      	movs	r5, #1
 8000dfa:	2a38      	cmp	r2, #56	@ 0x38
 8000dfc:	dc16      	bgt.n	8000e2c <__aeabi_dadd+0x9c>
 8000dfe:	2180      	movs	r1, #128	@ 0x80
 8000e00:	4653      	mov	r3, sl
 8000e02:	0409      	lsls	r1, r1, #16
 8000e04:	430b      	orrs	r3, r1
 8000e06:	469a      	mov	sl, r3
 8000e08:	2a1f      	cmp	r2, #31
 8000e0a:	dd00      	ble.n	8000e0e <__aeabi_dadd+0x7e>
 8000e0c:	e1e7      	b.n	80011de <__aeabi_dadd+0x44e>
 8000e0e:	2120      	movs	r1, #32
 8000e10:	4655      	mov	r5, sl
 8000e12:	1a8b      	subs	r3, r1, r2
 8000e14:	4661      	mov	r1, ip
 8000e16:	409d      	lsls	r5, r3
 8000e18:	40d1      	lsrs	r1, r2
 8000e1a:	430d      	orrs	r5, r1
 8000e1c:	4661      	mov	r1, ip
 8000e1e:	4099      	lsls	r1, r3
 8000e20:	1e4b      	subs	r3, r1, #1
 8000e22:	4199      	sbcs	r1, r3
 8000e24:	4653      	mov	r3, sl
 8000e26:	40d3      	lsrs	r3, r2
 8000e28:	430d      	orrs	r5, r1
 8000e2a:	1ae4      	subs	r4, r4, r3
 8000e2c:	1b45      	subs	r5, r0, r5
 8000e2e:	42a8      	cmp	r0, r5
 8000e30:	4180      	sbcs	r0, r0
 8000e32:	4240      	negs	r0, r0
 8000e34:	1a24      	subs	r4, r4, r0
 8000e36:	0223      	lsls	r3, r4, #8
 8000e38:	d400      	bmi.n	8000e3c <__aeabi_dadd+0xac>
 8000e3a:	e10f      	b.n	800105c <__aeabi_dadd+0x2cc>
 8000e3c:	0264      	lsls	r4, r4, #9
 8000e3e:	0a64      	lsrs	r4, r4, #9
 8000e40:	2c00      	cmp	r4, #0
 8000e42:	d100      	bne.n	8000e46 <__aeabi_dadd+0xb6>
 8000e44:	e139      	b.n	80010ba <__aeabi_dadd+0x32a>
 8000e46:	0020      	movs	r0, r4
 8000e48:	f001 ff2a 	bl	8002ca0 <__clzsi2>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	3b08      	subs	r3, #8
 8000e50:	2120      	movs	r1, #32
 8000e52:	0028      	movs	r0, r5
 8000e54:	1aca      	subs	r2, r1, r3
 8000e56:	40d0      	lsrs	r0, r2
 8000e58:	409c      	lsls	r4, r3
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	409d      	lsls	r5, r3
 8000e5e:	4322      	orrs	r2, r4
 8000e60:	429f      	cmp	r7, r3
 8000e62:	dd00      	ble.n	8000e66 <__aeabi_dadd+0xd6>
 8000e64:	e173      	b.n	800114e <__aeabi_dadd+0x3be>
 8000e66:	1bd8      	subs	r0, r3, r7
 8000e68:	3001      	adds	r0, #1
 8000e6a:	1a09      	subs	r1, r1, r0
 8000e6c:	002c      	movs	r4, r5
 8000e6e:	408d      	lsls	r5, r1
 8000e70:	40c4      	lsrs	r4, r0
 8000e72:	1e6b      	subs	r3, r5, #1
 8000e74:	419d      	sbcs	r5, r3
 8000e76:	0013      	movs	r3, r2
 8000e78:	40c2      	lsrs	r2, r0
 8000e7a:	408b      	lsls	r3, r1
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	2700      	movs	r7, #0
 8000e80:	0014      	movs	r4, r2
 8000e82:	431d      	orrs	r5, r3
 8000e84:	076b      	lsls	r3, r5, #29
 8000e86:	d009      	beq.n	8000e9c <__aeabi_dadd+0x10c>
 8000e88:	230f      	movs	r3, #15
 8000e8a:	402b      	ands	r3, r5
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d005      	beq.n	8000e9c <__aeabi_dadd+0x10c>
 8000e90:	1d2b      	adds	r3, r5, #4
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	41ad      	sbcs	r5, r5
 8000e96:	426d      	negs	r5, r5
 8000e98:	1964      	adds	r4, r4, r5
 8000e9a:	001d      	movs	r5, r3
 8000e9c:	0223      	lsls	r3, r4, #8
 8000e9e:	d400      	bmi.n	8000ea2 <__aeabi_dadd+0x112>
 8000ea0:	e12d      	b.n	80010fe <__aeabi_dadd+0x36e>
 8000ea2:	4a9d      	ldr	r2, [pc, #628]	@ (8001118 <__aeabi_dadd+0x388>)
 8000ea4:	3701      	adds	r7, #1
 8000ea6:	4297      	cmp	r7, r2
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dadd+0x11c>
 8000eaa:	e0d3      	b.n	8001054 <__aeabi_dadd+0x2c4>
 8000eac:	4646      	mov	r6, r8
 8000eae:	499b      	ldr	r1, [pc, #620]	@ (800111c <__aeabi_dadd+0x38c>)
 8000eb0:	08ed      	lsrs	r5, r5, #3
 8000eb2:	4021      	ands	r1, r4
 8000eb4:	074a      	lsls	r2, r1, #29
 8000eb6:	432a      	orrs	r2, r5
 8000eb8:	057c      	lsls	r4, r7, #21
 8000eba:	024d      	lsls	r5, r1, #9
 8000ebc:	0b2d      	lsrs	r5, r5, #12
 8000ebe:	0d64      	lsrs	r4, r4, #21
 8000ec0:	0524      	lsls	r4, r4, #20
 8000ec2:	432c      	orrs	r4, r5
 8000ec4:	07f6      	lsls	r6, r6, #31
 8000ec6:	4334      	orrs	r4, r6
 8000ec8:	0010      	movs	r0, r2
 8000eca:	0021      	movs	r1, r4
 8000ecc:	b003      	add	sp, #12
 8000ece:	bcf0      	pop	{r4, r5, r6, r7}
 8000ed0:	46bb      	mov	fp, r7
 8000ed2:	46b2      	mov	sl, r6
 8000ed4:	46a9      	mov	r9, r5
 8000ed6:	46a0      	mov	r8, r4
 8000ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_dadd+0x150>
 8000ede:	e084      	b.n	8000fea <__aeabi_dadd+0x25a>
 8000ee0:	464a      	mov	r2, r9
 8000ee2:	1bd2      	subs	r2, r2, r7
 8000ee4:	2f00      	cmp	r7, #0
 8000ee6:	d000      	beq.n	8000eea <__aeabi_dadd+0x15a>
 8000ee8:	e16d      	b.n	80011c6 <__aeabi_dadd+0x436>
 8000eea:	0025      	movs	r5, r4
 8000eec:	4305      	orrs	r5, r0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_dadd+0x162>
 8000ef0:	e127      	b.n	8001142 <__aeabi_dadd+0x3b2>
 8000ef2:	1e56      	subs	r6, r2, #1
 8000ef4:	2a01      	cmp	r2, #1
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dadd+0x16a>
 8000ef8:	e23b      	b.n	8001372 <__aeabi_dadd+0x5e2>
 8000efa:	4d87      	ldr	r5, [pc, #540]	@ (8001118 <__aeabi_dadd+0x388>)
 8000efc:	42aa      	cmp	r2, r5
 8000efe:	d100      	bne.n	8000f02 <__aeabi_dadd+0x172>
 8000f00:	e26a      	b.n	80013d8 <__aeabi_dadd+0x648>
 8000f02:	2501      	movs	r5, #1
 8000f04:	2e38      	cmp	r6, #56	@ 0x38
 8000f06:	dc12      	bgt.n	8000f2e <__aeabi_dadd+0x19e>
 8000f08:	0032      	movs	r2, r6
 8000f0a:	2a1f      	cmp	r2, #31
 8000f0c:	dd00      	ble.n	8000f10 <__aeabi_dadd+0x180>
 8000f0e:	e1f8      	b.n	8001302 <__aeabi_dadd+0x572>
 8000f10:	2620      	movs	r6, #32
 8000f12:	0025      	movs	r5, r4
 8000f14:	1ab6      	subs	r6, r6, r2
 8000f16:	0007      	movs	r7, r0
 8000f18:	4653      	mov	r3, sl
 8000f1a:	40b0      	lsls	r0, r6
 8000f1c:	40d4      	lsrs	r4, r2
 8000f1e:	40b5      	lsls	r5, r6
 8000f20:	40d7      	lsrs	r7, r2
 8000f22:	1e46      	subs	r6, r0, #1
 8000f24:	41b0      	sbcs	r0, r6
 8000f26:	1b1b      	subs	r3, r3, r4
 8000f28:	469a      	mov	sl, r3
 8000f2a:	433d      	orrs	r5, r7
 8000f2c:	4305      	orrs	r5, r0
 8000f2e:	4662      	mov	r2, ip
 8000f30:	1b55      	subs	r5, r2, r5
 8000f32:	45ac      	cmp	ip, r5
 8000f34:	4192      	sbcs	r2, r2
 8000f36:	4653      	mov	r3, sl
 8000f38:	4252      	negs	r2, r2
 8000f3a:	000e      	movs	r6, r1
 8000f3c:	464f      	mov	r7, r9
 8000f3e:	4688      	mov	r8, r1
 8000f40:	1a9c      	subs	r4, r3, r2
 8000f42:	e778      	b.n	8000e36 <__aeabi_dadd+0xa6>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	dc00      	bgt.n	8000f4a <__aeabi_dadd+0x1ba>
 8000f48:	e08e      	b.n	8001068 <__aeabi_dadd+0x2d8>
 8000f4a:	4649      	mov	r1, r9
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d175      	bne.n	800103c <__aeabi_dadd+0x2ac>
 8000f50:	4661      	mov	r1, ip
 8000f52:	4653      	mov	r3, sl
 8000f54:	4319      	orrs	r1, r3
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dadd+0x1ca>
 8000f58:	e0f6      	b.n	8001148 <__aeabi_dadd+0x3b8>
 8000f5a:	1e51      	subs	r1, r2, #1
 8000f5c:	2a01      	cmp	r2, #1
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_dadd+0x1d2>
 8000f60:	e191      	b.n	8001286 <__aeabi_dadd+0x4f6>
 8000f62:	4d6d      	ldr	r5, [pc, #436]	@ (8001118 <__aeabi_dadd+0x388>)
 8000f64:	42aa      	cmp	r2, r5
 8000f66:	d100      	bne.n	8000f6a <__aeabi_dadd+0x1da>
 8000f68:	e0dc      	b.n	8001124 <__aeabi_dadd+0x394>
 8000f6a:	2501      	movs	r5, #1
 8000f6c:	2938      	cmp	r1, #56	@ 0x38
 8000f6e:	dc14      	bgt.n	8000f9a <__aeabi_dadd+0x20a>
 8000f70:	000a      	movs	r2, r1
 8000f72:	2a1f      	cmp	r2, #31
 8000f74:	dd00      	ble.n	8000f78 <__aeabi_dadd+0x1e8>
 8000f76:	e1a2      	b.n	80012be <__aeabi_dadd+0x52e>
 8000f78:	2120      	movs	r1, #32
 8000f7a:	4653      	mov	r3, sl
 8000f7c:	1a89      	subs	r1, r1, r2
 8000f7e:	408b      	lsls	r3, r1
 8000f80:	001d      	movs	r5, r3
 8000f82:	4663      	mov	r3, ip
 8000f84:	40d3      	lsrs	r3, r2
 8000f86:	431d      	orrs	r5, r3
 8000f88:	4663      	mov	r3, ip
 8000f8a:	408b      	lsls	r3, r1
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	1e4b      	subs	r3, r1, #1
 8000f90:	4199      	sbcs	r1, r3
 8000f92:	4653      	mov	r3, sl
 8000f94:	40d3      	lsrs	r3, r2
 8000f96:	430d      	orrs	r5, r1
 8000f98:	18e4      	adds	r4, r4, r3
 8000f9a:	182d      	adds	r5, r5, r0
 8000f9c:	4285      	cmp	r5, r0
 8000f9e:	4180      	sbcs	r0, r0
 8000fa0:	4240      	negs	r0, r0
 8000fa2:	1824      	adds	r4, r4, r0
 8000fa4:	0223      	lsls	r3, r4, #8
 8000fa6:	d559      	bpl.n	800105c <__aeabi_dadd+0x2cc>
 8000fa8:	4b5b      	ldr	r3, [pc, #364]	@ (8001118 <__aeabi_dadd+0x388>)
 8000faa:	3701      	adds	r7, #1
 8000fac:	429f      	cmp	r7, r3
 8000fae:	d051      	beq.n	8001054 <__aeabi_dadd+0x2c4>
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	4b5a      	ldr	r3, [pc, #360]	@ (800111c <__aeabi_dadd+0x38c>)
 8000fb4:	086a      	lsrs	r2, r5, #1
 8000fb6:	401c      	ands	r4, r3
 8000fb8:	4029      	ands	r1, r5
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	07e5      	lsls	r5, r4, #31
 8000fbe:	4315      	orrs	r5, r2
 8000fc0:	0864      	lsrs	r4, r4, #1
 8000fc2:	e75f      	b.n	8000e84 <__aeabi_dadd+0xf4>
 8000fc4:	4661      	mov	r1, ip
 8000fc6:	4653      	mov	r3, sl
 8000fc8:	4319      	orrs	r1, r3
 8000fca:	d100      	bne.n	8000fce <__aeabi_dadd+0x23e>
 8000fcc:	e0bc      	b.n	8001148 <__aeabi_dadd+0x3b8>
 8000fce:	1e51      	subs	r1, r2, #1
 8000fd0:	2a01      	cmp	r2, #1
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_dadd+0x246>
 8000fd4:	e164      	b.n	80012a0 <__aeabi_dadd+0x510>
 8000fd6:	4d50      	ldr	r5, [pc, #320]	@ (8001118 <__aeabi_dadd+0x388>)
 8000fd8:	42aa      	cmp	r2, r5
 8000fda:	d100      	bne.n	8000fde <__aeabi_dadd+0x24e>
 8000fdc:	e16a      	b.n	80012b4 <__aeabi_dadd+0x524>
 8000fde:	2501      	movs	r5, #1
 8000fe0:	2938      	cmp	r1, #56	@ 0x38
 8000fe2:	dd00      	ble.n	8000fe6 <__aeabi_dadd+0x256>
 8000fe4:	e722      	b.n	8000e2c <__aeabi_dadd+0x9c>
 8000fe6:	000a      	movs	r2, r1
 8000fe8:	e70e      	b.n	8000e08 <__aeabi_dadd+0x78>
 8000fea:	4a4d      	ldr	r2, [pc, #308]	@ (8001120 <__aeabi_dadd+0x390>)
 8000fec:	1c7d      	adds	r5, r7, #1
 8000fee:	4215      	tst	r5, r2
 8000ff0:	d000      	beq.n	8000ff4 <__aeabi_dadd+0x264>
 8000ff2:	e0d0      	b.n	8001196 <__aeabi_dadd+0x406>
 8000ff4:	0025      	movs	r5, r4
 8000ff6:	4662      	mov	r2, ip
 8000ff8:	4653      	mov	r3, sl
 8000ffa:	4305      	orrs	r5, r0
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	2f00      	cmp	r7, #0
 8001000:	d000      	beq.n	8001004 <__aeabi_dadd+0x274>
 8001002:	e137      	b.n	8001274 <__aeabi_dadd+0x4e4>
 8001004:	2d00      	cmp	r5, #0
 8001006:	d100      	bne.n	800100a <__aeabi_dadd+0x27a>
 8001008:	e1a8      	b.n	800135c <__aeabi_dadd+0x5cc>
 800100a:	2a00      	cmp	r2, #0
 800100c:	d100      	bne.n	8001010 <__aeabi_dadd+0x280>
 800100e:	e16a      	b.n	80012e6 <__aeabi_dadd+0x556>
 8001010:	4663      	mov	r3, ip
 8001012:	1ac5      	subs	r5, r0, r3
 8001014:	4653      	mov	r3, sl
 8001016:	1ae2      	subs	r2, r4, r3
 8001018:	42a8      	cmp	r0, r5
 800101a:	419b      	sbcs	r3, r3
 800101c:	425b      	negs	r3, r3
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	021a      	lsls	r2, r3, #8
 8001022:	d400      	bmi.n	8001026 <__aeabi_dadd+0x296>
 8001024:	e203      	b.n	800142e <__aeabi_dadd+0x69e>
 8001026:	4663      	mov	r3, ip
 8001028:	1a1d      	subs	r5, r3, r0
 800102a:	45ac      	cmp	ip, r5
 800102c:	4192      	sbcs	r2, r2
 800102e:	4653      	mov	r3, sl
 8001030:	4252      	negs	r2, r2
 8001032:	1b1c      	subs	r4, r3, r4
 8001034:	000e      	movs	r6, r1
 8001036:	4688      	mov	r8, r1
 8001038:	1aa4      	subs	r4, r4, r2
 800103a:	e723      	b.n	8000e84 <__aeabi_dadd+0xf4>
 800103c:	4936      	ldr	r1, [pc, #216]	@ (8001118 <__aeabi_dadd+0x388>)
 800103e:	428f      	cmp	r7, r1
 8001040:	d070      	beq.n	8001124 <__aeabi_dadd+0x394>
 8001042:	2501      	movs	r5, #1
 8001044:	2a38      	cmp	r2, #56	@ 0x38
 8001046:	dca8      	bgt.n	8000f9a <__aeabi_dadd+0x20a>
 8001048:	2180      	movs	r1, #128	@ 0x80
 800104a:	4653      	mov	r3, sl
 800104c:	0409      	lsls	r1, r1, #16
 800104e:	430b      	orrs	r3, r1
 8001050:	469a      	mov	sl, r3
 8001052:	e78e      	b.n	8000f72 <__aeabi_dadd+0x1e2>
 8001054:	003c      	movs	r4, r7
 8001056:	2500      	movs	r5, #0
 8001058:	2200      	movs	r2, #0
 800105a:	e731      	b.n	8000ec0 <__aeabi_dadd+0x130>
 800105c:	2307      	movs	r3, #7
 800105e:	402b      	ands	r3, r5
 8001060:	2b00      	cmp	r3, #0
 8001062:	d000      	beq.n	8001066 <__aeabi_dadd+0x2d6>
 8001064:	e710      	b.n	8000e88 <__aeabi_dadd+0xf8>
 8001066:	e093      	b.n	8001190 <__aeabi_dadd+0x400>
 8001068:	2a00      	cmp	r2, #0
 800106a:	d074      	beq.n	8001156 <__aeabi_dadd+0x3c6>
 800106c:	464a      	mov	r2, r9
 800106e:	1bd2      	subs	r2, r2, r7
 8001070:	2f00      	cmp	r7, #0
 8001072:	d100      	bne.n	8001076 <__aeabi_dadd+0x2e6>
 8001074:	e0c7      	b.n	8001206 <__aeabi_dadd+0x476>
 8001076:	4928      	ldr	r1, [pc, #160]	@ (8001118 <__aeabi_dadd+0x388>)
 8001078:	4589      	cmp	r9, r1
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x2ee>
 800107c:	e185      	b.n	800138a <__aeabi_dadd+0x5fa>
 800107e:	2501      	movs	r5, #1
 8001080:	2a38      	cmp	r2, #56	@ 0x38
 8001082:	dc12      	bgt.n	80010aa <__aeabi_dadd+0x31a>
 8001084:	2180      	movs	r1, #128	@ 0x80
 8001086:	0409      	lsls	r1, r1, #16
 8001088:	430c      	orrs	r4, r1
 800108a:	2a1f      	cmp	r2, #31
 800108c:	dd00      	ble.n	8001090 <__aeabi_dadd+0x300>
 800108e:	e1ab      	b.n	80013e8 <__aeabi_dadd+0x658>
 8001090:	2120      	movs	r1, #32
 8001092:	0025      	movs	r5, r4
 8001094:	1a89      	subs	r1, r1, r2
 8001096:	0007      	movs	r7, r0
 8001098:	4088      	lsls	r0, r1
 800109a:	408d      	lsls	r5, r1
 800109c:	40d7      	lsrs	r7, r2
 800109e:	1e41      	subs	r1, r0, #1
 80010a0:	4188      	sbcs	r0, r1
 80010a2:	40d4      	lsrs	r4, r2
 80010a4:	433d      	orrs	r5, r7
 80010a6:	4305      	orrs	r5, r0
 80010a8:	44a2      	add	sl, r4
 80010aa:	4465      	add	r5, ip
 80010ac:	4565      	cmp	r5, ip
 80010ae:	4192      	sbcs	r2, r2
 80010b0:	4252      	negs	r2, r2
 80010b2:	4452      	add	r2, sl
 80010b4:	0014      	movs	r4, r2
 80010b6:	464f      	mov	r7, r9
 80010b8:	e774      	b.n	8000fa4 <__aeabi_dadd+0x214>
 80010ba:	0028      	movs	r0, r5
 80010bc:	f001 fdf0 	bl	8002ca0 <__clzsi2>
 80010c0:	0003      	movs	r3, r0
 80010c2:	3318      	adds	r3, #24
 80010c4:	2b1f      	cmp	r3, #31
 80010c6:	dc00      	bgt.n	80010ca <__aeabi_dadd+0x33a>
 80010c8:	e6c2      	b.n	8000e50 <__aeabi_dadd+0xc0>
 80010ca:	002a      	movs	r2, r5
 80010cc:	3808      	subs	r0, #8
 80010ce:	4082      	lsls	r2, r0
 80010d0:	429f      	cmp	r7, r3
 80010d2:	dd00      	ble.n	80010d6 <__aeabi_dadd+0x346>
 80010d4:	e0a9      	b.n	800122a <__aeabi_dadd+0x49a>
 80010d6:	1bdb      	subs	r3, r3, r7
 80010d8:	1c58      	adds	r0, r3, #1
 80010da:	281f      	cmp	r0, #31
 80010dc:	dc00      	bgt.n	80010e0 <__aeabi_dadd+0x350>
 80010de:	e1ac      	b.n	800143a <__aeabi_dadd+0x6aa>
 80010e0:	0015      	movs	r5, r2
 80010e2:	3b1f      	subs	r3, #31
 80010e4:	40dd      	lsrs	r5, r3
 80010e6:	2820      	cmp	r0, #32
 80010e8:	d005      	beq.n	80010f6 <__aeabi_dadd+0x366>
 80010ea:	2340      	movs	r3, #64	@ 0x40
 80010ec:	1a1b      	subs	r3, r3, r0
 80010ee:	409a      	lsls	r2, r3
 80010f0:	1e53      	subs	r3, r2, #1
 80010f2:	419a      	sbcs	r2, r3
 80010f4:	4315      	orrs	r5, r2
 80010f6:	2307      	movs	r3, #7
 80010f8:	2700      	movs	r7, #0
 80010fa:	402b      	ands	r3, r5
 80010fc:	e7b0      	b.n	8001060 <__aeabi_dadd+0x2d0>
 80010fe:	08ed      	lsrs	r5, r5, #3
 8001100:	4b05      	ldr	r3, [pc, #20]	@ (8001118 <__aeabi_dadd+0x388>)
 8001102:	0762      	lsls	r2, r4, #29
 8001104:	432a      	orrs	r2, r5
 8001106:	08e4      	lsrs	r4, r4, #3
 8001108:	429f      	cmp	r7, r3
 800110a:	d00f      	beq.n	800112c <__aeabi_dadd+0x39c>
 800110c:	0324      	lsls	r4, r4, #12
 800110e:	0b25      	lsrs	r5, r4, #12
 8001110:	057c      	lsls	r4, r7, #21
 8001112:	0d64      	lsrs	r4, r4, #21
 8001114:	e6d4      	b.n	8000ec0 <__aeabi_dadd+0x130>
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	000007ff 	.word	0x000007ff
 800111c:	ff7fffff 	.word	0xff7fffff
 8001120:	000007fe 	.word	0x000007fe
 8001124:	08c0      	lsrs	r0, r0, #3
 8001126:	0762      	lsls	r2, r4, #29
 8001128:	4302      	orrs	r2, r0
 800112a:	08e4      	lsrs	r4, r4, #3
 800112c:	0013      	movs	r3, r2
 800112e:	4323      	orrs	r3, r4
 8001130:	d100      	bne.n	8001134 <__aeabi_dadd+0x3a4>
 8001132:	e186      	b.n	8001442 <__aeabi_dadd+0x6b2>
 8001134:	2580      	movs	r5, #128	@ 0x80
 8001136:	032d      	lsls	r5, r5, #12
 8001138:	4325      	orrs	r5, r4
 800113a:	032d      	lsls	r5, r5, #12
 800113c:	4cc3      	ldr	r4, [pc, #780]	@ (800144c <__aeabi_dadd+0x6bc>)
 800113e:	0b2d      	lsrs	r5, r5, #12
 8001140:	e6be      	b.n	8000ec0 <__aeabi_dadd+0x130>
 8001142:	4660      	mov	r0, ip
 8001144:	4654      	mov	r4, sl
 8001146:	000e      	movs	r6, r1
 8001148:	0017      	movs	r7, r2
 800114a:	08c5      	lsrs	r5, r0, #3
 800114c:	e7d8      	b.n	8001100 <__aeabi_dadd+0x370>
 800114e:	4cc0      	ldr	r4, [pc, #768]	@ (8001450 <__aeabi_dadd+0x6c0>)
 8001150:	1aff      	subs	r7, r7, r3
 8001152:	4014      	ands	r4, r2
 8001154:	e696      	b.n	8000e84 <__aeabi_dadd+0xf4>
 8001156:	4abf      	ldr	r2, [pc, #764]	@ (8001454 <__aeabi_dadd+0x6c4>)
 8001158:	1c79      	adds	r1, r7, #1
 800115a:	4211      	tst	r1, r2
 800115c:	d16b      	bne.n	8001236 <__aeabi_dadd+0x4a6>
 800115e:	0022      	movs	r2, r4
 8001160:	4302      	orrs	r2, r0
 8001162:	2f00      	cmp	r7, #0
 8001164:	d000      	beq.n	8001168 <__aeabi_dadd+0x3d8>
 8001166:	e0db      	b.n	8001320 <__aeabi_dadd+0x590>
 8001168:	2a00      	cmp	r2, #0
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x3de>
 800116c:	e12d      	b.n	80013ca <__aeabi_dadd+0x63a>
 800116e:	4662      	mov	r2, ip
 8001170:	4653      	mov	r3, sl
 8001172:	431a      	orrs	r2, r3
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x3e8>
 8001176:	e0b6      	b.n	80012e6 <__aeabi_dadd+0x556>
 8001178:	4663      	mov	r3, ip
 800117a:	18c5      	adds	r5, r0, r3
 800117c:	4285      	cmp	r5, r0
 800117e:	4180      	sbcs	r0, r0
 8001180:	4454      	add	r4, sl
 8001182:	4240      	negs	r0, r0
 8001184:	1824      	adds	r4, r4, r0
 8001186:	0223      	lsls	r3, r4, #8
 8001188:	d502      	bpl.n	8001190 <__aeabi_dadd+0x400>
 800118a:	000f      	movs	r7, r1
 800118c:	4bb0      	ldr	r3, [pc, #704]	@ (8001450 <__aeabi_dadd+0x6c0>)
 800118e:	401c      	ands	r4, r3
 8001190:	003a      	movs	r2, r7
 8001192:	0028      	movs	r0, r5
 8001194:	e7d8      	b.n	8001148 <__aeabi_dadd+0x3b8>
 8001196:	4662      	mov	r2, ip
 8001198:	1a85      	subs	r5, r0, r2
 800119a:	42a8      	cmp	r0, r5
 800119c:	4192      	sbcs	r2, r2
 800119e:	4653      	mov	r3, sl
 80011a0:	4252      	negs	r2, r2
 80011a2:	4691      	mov	r9, r2
 80011a4:	1ae3      	subs	r3, r4, r3
 80011a6:	001a      	movs	r2, r3
 80011a8:	464b      	mov	r3, r9
 80011aa:	1ad2      	subs	r2, r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	4691      	mov	r9, r2
 80011b0:	021a      	lsls	r2, r3, #8
 80011b2:	d454      	bmi.n	800125e <__aeabi_dadd+0x4ce>
 80011b4:	464a      	mov	r2, r9
 80011b6:	464c      	mov	r4, r9
 80011b8:	432a      	orrs	r2, r5
 80011ba:	d000      	beq.n	80011be <__aeabi_dadd+0x42e>
 80011bc:	e640      	b.n	8000e40 <__aeabi_dadd+0xb0>
 80011be:	2600      	movs	r6, #0
 80011c0:	2400      	movs	r4, #0
 80011c2:	2500      	movs	r5, #0
 80011c4:	e67c      	b.n	8000ec0 <__aeabi_dadd+0x130>
 80011c6:	4da1      	ldr	r5, [pc, #644]	@ (800144c <__aeabi_dadd+0x6bc>)
 80011c8:	45a9      	cmp	r9, r5
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x43e>
 80011cc:	e090      	b.n	80012f0 <__aeabi_dadd+0x560>
 80011ce:	2501      	movs	r5, #1
 80011d0:	2a38      	cmp	r2, #56	@ 0x38
 80011d2:	dd00      	ble.n	80011d6 <__aeabi_dadd+0x446>
 80011d4:	e6ab      	b.n	8000f2e <__aeabi_dadd+0x19e>
 80011d6:	2580      	movs	r5, #128	@ 0x80
 80011d8:	042d      	lsls	r5, r5, #16
 80011da:	432c      	orrs	r4, r5
 80011dc:	e695      	b.n	8000f0a <__aeabi_dadd+0x17a>
 80011de:	0011      	movs	r1, r2
 80011e0:	4655      	mov	r5, sl
 80011e2:	3920      	subs	r1, #32
 80011e4:	40cd      	lsrs	r5, r1
 80011e6:	46a9      	mov	r9, r5
 80011e8:	2a20      	cmp	r2, #32
 80011ea:	d006      	beq.n	80011fa <__aeabi_dadd+0x46a>
 80011ec:	2140      	movs	r1, #64	@ 0x40
 80011ee:	4653      	mov	r3, sl
 80011f0:	1a8a      	subs	r2, r1, r2
 80011f2:	4093      	lsls	r3, r2
 80011f4:	4662      	mov	r2, ip
 80011f6:	431a      	orrs	r2, r3
 80011f8:	4694      	mov	ip, r2
 80011fa:	4665      	mov	r5, ip
 80011fc:	1e6b      	subs	r3, r5, #1
 80011fe:	419d      	sbcs	r5, r3
 8001200:	464b      	mov	r3, r9
 8001202:	431d      	orrs	r5, r3
 8001204:	e612      	b.n	8000e2c <__aeabi_dadd+0x9c>
 8001206:	0021      	movs	r1, r4
 8001208:	4301      	orrs	r1, r0
 800120a:	d100      	bne.n	800120e <__aeabi_dadd+0x47e>
 800120c:	e0c4      	b.n	8001398 <__aeabi_dadd+0x608>
 800120e:	1e51      	subs	r1, r2, #1
 8001210:	2a01      	cmp	r2, #1
 8001212:	d100      	bne.n	8001216 <__aeabi_dadd+0x486>
 8001214:	e0fb      	b.n	800140e <__aeabi_dadd+0x67e>
 8001216:	4d8d      	ldr	r5, [pc, #564]	@ (800144c <__aeabi_dadd+0x6bc>)
 8001218:	42aa      	cmp	r2, r5
 800121a:	d100      	bne.n	800121e <__aeabi_dadd+0x48e>
 800121c:	e0b5      	b.n	800138a <__aeabi_dadd+0x5fa>
 800121e:	2501      	movs	r5, #1
 8001220:	2938      	cmp	r1, #56	@ 0x38
 8001222:	dd00      	ble.n	8001226 <__aeabi_dadd+0x496>
 8001224:	e741      	b.n	80010aa <__aeabi_dadd+0x31a>
 8001226:	000a      	movs	r2, r1
 8001228:	e72f      	b.n	800108a <__aeabi_dadd+0x2fa>
 800122a:	4c89      	ldr	r4, [pc, #548]	@ (8001450 <__aeabi_dadd+0x6c0>)
 800122c:	1aff      	subs	r7, r7, r3
 800122e:	4014      	ands	r4, r2
 8001230:	0762      	lsls	r2, r4, #29
 8001232:	08e4      	lsrs	r4, r4, #3
 8001234:	e76a      	b.n	800110c <__aeabi_dadd+0x37c>
 8001236:	4a85      	ldr	r2, [pc, #532]	@ (800144c <__aeabi_dadd+0x6bc>)
 8001238:	4291      	cmp	r1, r2
 800123a:	d100      	bne.n	800123e <__aeabi_dadd+0x4ae>
 800123c:	e0e3      	b.n	8001406 <__aeabi_dadd+0x676>
 800123e:	4663      	mov	r3, ip
 8001240:	18c2      	adds	r2, r0, r3
 8001242:	4282      	cmp	r2, r0
 8001244:	4180      	sbcs	r0, r0
 8001246:	0023      	movs	r3, r4
 8001248:	4240      	negs	r0, r0
 800124a:	4453      	add	r3, sl
 800124c:	181b      	adds	r3, r3, r0
 800124e:	07dd      	lsls	r5, r3, #31
 8001250:	085c      	lsrs	r4, r3, #1
 8001252:	2307      	movs	r3, #7
 8001254:	0852      	lsrs	r2, r2, #1
 8001256:	4315      	orrs	r5, r2
 8001258:	000f      	movs	r7, r1
 800125a:	402b      	ands	r3, r5
 800125c:	e700      	b.n	8001060 <__aeabi_dadd+0x2d0>
 800125e:	4663      	mov	r3, ip
 8001260:	1a1d      	subs	r5, r3, r0
 8001262:	45ac      	cmp	ip, r5
 8001264:	4192      	sbcs	r2, r2
 8001266:	4653      	mov	r3, sl
 8001268:	4252      	negs	r2, r2
 800126a:	1b1c      	subs	r4, r3, r4
 800126c:	000e      	movs	r6, r1
 800126e:	4688      	mov	r8, r1
 8001270:	1aa4      	subs	r4, r4, r2
 8001272:	e5e5      	b.n	8000e40 <__aeabi_dadd+0xb0>
 8001274:	2d00      	cmp	r5, #0
 8001276:	d000      	beq.n	800127a <__aeabi_dadd+0x4ea>
 8001278:	e091      	b.n	800139e <__aeabi_dadd+0x60e>
 800127a:	2a00      	cmp	r2, #0
 800127c:	d138      	bne.n	80012f0 <__aeabi_dadd+0x560>
 800127e:	2480      	movs	r4, #128	@ 0x80
 8001280:	2600      	movs	r6, #0
 8001282:	0324      	lsls	r4, r4, #12
 8001284:	e756      	b.n	8001134 <__aeabi_dadd+0x3a4>
 8001286:	4663      	mov	r3, ip
 8001288:	18c5      	adds	r5, r0, r3
 800128a:	4285      	cmp	r5, r0
 800128c:	4180      	sbcs	r0, r0
 800128e:	4454      	add	r4, sl
 8001290:	4240      	negs	r0, r0
 8001292:	1824      	adds	r4, r4, r0
 8001294:	2701      	movs	r7, #1
 8001296:	0223      	lsls	r3, r4, #8
 8001298:	d400      	bmi.n	800129c <__aeabi_dadd+0x50c>
 800129a:	e6df      	b.n	800105c <__aeabi_dadd+0x2cc>
 800129c:	2702      	movs	r7, #2
 800129e:	e687      	b.n	8000fb0 <__aeabi_dadd+0x220>
 80012a0:	4663      	mov	r3, ip
 80012a2:	1ac5      	subs	r5, r0, r3
 80012a4:	42a8      	cmp	r0, r5
 80012a6:	4180      	sbcs	r0, r0
 80012a8:	4653      	mov	r3, sl
 80012aa:	4240      	negs	r0, r0
 80012ac:	1ae4      	subs	r4, r4, r3
 80012ae:	2701      	movs	r7, #1
 80012b0:	1a24      	subs	r4, r4, r0
 80012b2:	e5c0      	b.n	8000e36 <__aeabi_dadd+0xa6>
 80012b4:	0762      	lsls	r2, r4, #29
 80012b6:	08c0      	lsrs	r0, r0, #3
 80012b8:	4302      	orrs	r2, r0
 80012ba:	08e4      	lsrs	r4, r4, #3
 80012bc:	e736      	b.n	800112c <__aeabi_dadd+0x39c>
 80012be:	0011      	movs	r1, r2
 80012c0:	4653      	mov	r3, sl
 80012c2:	3920      	subs	r1, #32
 80012c4:	40cb      	lsrs	r3, r1
 80012c6:	4699      	mov	r9, r3
 80012c8:	2a20      	cmp	r2, #32
 80012ca:	d006      	beq.n	80012da <__aeabi_dadd+0x54a>
 80012cc:	2140      	movs	r1, #64	@ 0x40
 80012ce:	4653      	mov	r3, sl
 80012d0:	1a8a      	subs	r2, r1, r2
 80012d2:	4093      	lsls	r3, r2
 80012d4:	4662      	mov	r2, ip
 80012d6:	431a      	orrs	r2, r3
 80012d8:	4694      	mov	ip, r2
 80012da:	4665      	mov	r5, ip
 80012dc:	1e6b      	subs	r3, r5, #1
 80012de:	419d      	sbcs	r5, r3
 80012e0:	464b      	mov	r3, r9
 80012e2:	431d      	orrs	r5, r3
 80012e4:	e659      	b.n	8000f9a <__aeabi_dadd+0x20a>
 80012e6:	0762      	lsls	r2, r4, #29
 80012e8:	08c0      	lsrs	r0, r0, #3
 80012ea:	4302      	orrs	r2, r0
 80012ec:	08e4      	lsrs	r4, r4, #3
 80012ee:	e70d      	b.n	800110c <__aeabi_dadd+0x37c>
 80012f0:	4653      	mov	r3, sl
 80012f2:	075a      	lsls	r2, r3, #29
 80012f4:	4663      	mov	r3, ip
 80012f6:	08d8      	lsrs	r0, r3, #3
 80012f8:	4653      	mov	r3, sl
 80012fa:	000e      	movs	r6, r1
 80012fc:	4302      	orrs	r2, r0
 80012fe:	08dc      	lsrs	r4, r3, #3
 8001300:	e714      	b.n	800112c <__aeabi_dadd+0x39c>
 8001302:	0015      	movs	r5, r2
 8001304:	0026      	movs	r6, r4
 8001306:	3d20      	subs	r5, #32
 8001308:	40ee      	lsrs	r6, r5
 800130a:	2a20      	cmp	r2, #32
 800130c:	d003      	beq.n	8001316 <__aeabi_dadd+0x586>
 800130e:	2540      	movs	r5, #64	@ 0x40
 8001310:	1aaa      	subs	r2, r5, r2
 8001312:	4094      	lsls	r4, r2
 8001314:	4320      	orrs	r0, r4
 8001316:	1e42      	subs	r2, r0, #1
 8001318:	4190      	sbcs	r0, r2
 800131a:	0005      	movs	r5, r0
 800131c:	4335      	orrs	r5, r6
 800131e:	e606      	b.n	8000f2e <__aeabi_dadd+0x19e>
 8001320:	2a00      	cmp	r2, #0
 8001322:	d07c      	beq.n	800141e <__aeabi_dadd+0x68e>
 8001324:	4662      	mov	r2, ip
 8001326:	4653      	mov	r3, sl
 8001328:	08c0      	lsrs	r0, r0, #3
 800132a:	431a      	orrs	r2, r3
 800132c:	d100      	bne.n	8001330 <__aeabi_dadd+0x5a0>
 800132e:	e6fa      	b.n	8001126 <__aeabi_dadd+0x396>
 8001330:	0762      	lsls	r2, r4, #29
 8001332:	4310      	orrs	r0, r2
 8001334:	2280      	movs	r2, #128	@ 0x80
 8001336:	08e4      	lsrs	r4, r4, #3
 8001338:	0312      	lsls	r2, r2, #12
 800133a:	4214      	tst	r4, r2
 800133c:	d008      	beq.n	8001350 <__aeabi_dadd+0x5c0>
 800133e:	08d9      	lsrs	r1, r3, #3
 8001340:	4211      	tst	r1, r2
 8001342:	d105      	bne.n	8001350 <__aeabi_dadd+0x5c0>
 8001344:	4663      	mov	r3, ip
 8001346:	08d8      	lsrs	r0, r3, #3
 8001348:	4653      	mov	r3, sl
 800134a:	000c      	movs	r4, r1
 800134c:	075b      	lsls	r3, r3, #29
 800134e:	4318      	orrs	r0, r3
 8001350:	0f42      	lsrs	r2, r0, #29
 8001352:	00c0      	lsls	r0, r0, #3
 8001354:	08c0      	lsrs	r0, r0, #3
 8001356:	0752      	lsls	r2, r2, #29
 8001358:	4302      	orrs	r2, r0
 800135a:	e6e7      	b.n	800112c <__aeabi_dadd+0x39c>
 800135c:	2a00      	cmp	r2, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0x5d2>
 8001360:	e72d      	b.n	80011be <__aeabi_dadd+0x42e>
 8001362:	4663      	mov	r3, ip
 8001364:	08d8      	lsrs	r0, r3, #3
 8001366:	4653      	mov	r3, sl
 8001368:	075a      	lsls	r2, r3, #29
 800136a:	000e      	movs	r6, r1
 800136c:	4302      	orrs	r2, r0
 800136e:	08dc      	lsrs	r4, r3, #3
 8001370:	e6cc      	b.n	800110c <__aeabi_dadd+0x37c>
 8001372:	4663      	mov	r3, ip
 8001374:	1a1d      	subs	r5, r3, r0
 8001376:	45ac      	cmp	ip, r5
 8001378:	4192      	sbcs	r2, r2
 800137a:	4653      	mov	r3, sl
 800137c:	4252      	negs	r2, r2
 800137e:	1b1c      	subs	r4, r3, r4
 8001380:	000e      	movs	r6, r1
 8001382:	4688      	mov	r8, r1
 8001384:	1aa4      	subs	r4, r4, r2
 8001386:	3701      	adds	r7, #1
 8001388:	e555      	b.n	8000e36 <__aeabi_dadd+0xa6>
 800138a:	4663      	mov	r3, ip
 800138c:	08d9      	lsrs	r1, r3, #3
 800138e:	4653      	mov	r3, sl
 8001390:	075a      	lsls	r2, r3, #29
 8001392:	430a      	orrs	r2, r1
 8001394:	08dc      	lsrs	r4, r3, #3
 8001396:	e6c9      	b.n	800112c <__aeabi_dadd+0x39c>
 8001398:	4660      	mov	r0, ip
 800139a:	4654      	mov	r4, sl
 800139c:	e6d4      	b.n	8001148 <__aeabi_dadd+0x3b8>
 800139e:	08c0      	lsrs	r0, r0, #3
 80013a0:	2a00      	cmp	r2, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_dadd+0x616>
 80013a4:	e6bf      	b.n	8001126 <__aeabi_dadd+0x396>
 80013a6:	0762      	lsls	r2, r4, #29
 80013a8:	4310      	orrs	r0, r2
 80013aa:	2280      	movs	r2, #128	@ 0x80
 80013ac:	08e4      	lsrs	r4, r4, #3
 80013ae:	0312      	lsls	r2, r2, #12
 80013b0:	4214      	tst	r4, r2
 80013b2:	d0cd      	beq.n	8001350 <__aeabi_dadd+0x5c0>
 80013b4:	08dd      	lsrs	r5, r3, #3
 80013b6:	4215      	tst	r5, r2
 80013b8:	d1ca      	bne.n	8001350 <__aeabi_dadd+0x5c0>
 80013ba:	4663      	mov	r3, ip
 80013bc:	08d8      	lsrs	r0, r3, #3
 80013be:	4653      	mov	r3, sl
 80013c0:	075b      	lsls	r3, r3, #29
 80013c2:	000e      	movs	r6, r1
 80013c4:	002c      	movs	r4, r5
 80013c6:	4318      	orrs	r0, r3
 80013c8:	e7c2      	b.n	8001350 <__aeabi_dadd+0x5c0>
 80013ca:	4663      	mov	r3, ip
 80013cc:	08d9      	lsrs	r1, r3, #3
 80013ce:	4653      	mov	r3, sl
 80013d0:	075a      	lsls	r2, r3, #29
 80013d2:	430a      	orrs	r2, r1
 80013d4:	08dc      	lsrs	r4, r3, #3
 80013d6:	e699      	b.n	800110c <__aeabi_dadd+0x37c>
 80013d8:	4663      	mov	r3, ip
 80013da:	08d8      	lsrs	r0, r3, #3
 80013dc:	4653      	mov	r3, sl
 80013de:	075a      	lsls	r2, r3, #29
 80013e0:	000e      	movs	r6, r1
 80013e2:	4302      	orrs	r2, r0
 80013e4:	08dc      	lsrs	r4, r3, #3
 80013e6:	e6a1      	b.n	800112c <__aeabi_dadd+0x39c>
 80013e8:	0011      	movs	r1, r2
 80013ea:	0027      	movs	r7, r4
 80013ec:	3920      	subs	r1, #32
 80013ee:	40cf      	lsrs	r7, r1
 80013f0:	2a20      	cmp	r2, #32
 80013f2:	d003      	beq.n	80013fc <__aeabi_dadd+0x66c>
 80013f4:	2140      	movs	r1, #64	@ 0x40
 80013f6:	1a8a      	subs	r2, r1, r2
 80013f8:	4094      	lsls	r4, r2
 80013fa:	4320      	orrs	r0, r4
 80013fc:	1e42      	subs	r2, r0, #1
 80013fe:	4190      	sbcs	r0, r2
 8001400:	0005      	movs	r5, r0
 8001402:	433d      	orrs	r5, r7
 8001404:	e651      	b.n	80010aa <__aeabi_dadd+0x31a>
 8001406:	000c      	movs	r4, r1
 8001408:	2500      	movs	r5, #0
 800140a:	2200      	movs	r2, #0
 800140c:	e558      	b.n	8000ec0 <__aeabi_dadd+0x130>
 800140e:	4460      	add	r0, ip
 8001410:	4560      	cmp	r0, ip
 8001412:	4192      	sbcs	r2, r2
 8001414:	4454      	add	r4, sl
 8001416:	4252      	negs	r2, r2
 8001418:	0005      	movs	r5, r0
 800141a:	18a4      	adds	r4, r4, r2
 800141c:	e73a      	b.n	8001294 <__aeabi_dadd+0x504>
 800141e:	4653      	mov	r3, sl
 8001420:	075a      	lsls	r2, r3, #29
 8001422:	4663      	mov	r3, ip
 8001424:	08d9      	lsrs	r1, r3, #3
 8001426:	4653      	mov	r3, sl
 8001428:	430a      	orrs	r2, r1
 800142a:	08dc      	lsrs	r4, r3, #3
 800142c:	e67e      	b.n	800112c <__aeabi_dadd+0x39c>
 800142e:	001a      	movs	r2, r3
 8001430:	001c      	movs	r4, r3
 8001432:	432a      	orrs	r2, r5
 8001434:	d000      	beq.n	8001438 <__aeabi_dadd+0x6a8>
 8001436:	e6ab      	b.n	8001190 <__aeabi_dadd+0x400>
 8001438:	e6c1      	b.n	80011be <__aeabi_dadd+0x42e>
 800143a:	2120      	movs	r1, #32
 800143c:	2500      	movs	r5, #0
 800143e:	1a09      	subs	r1, r1, r0
 8001440:	e519      	b.n	8000e76 <__aeabi_dadd+0xe6>
 8001442:	2200      	movs	r2, #0
 8001444:	2500      	movs	r5, #0
 8001446:	4c01      	ldr	r4, [pc, #4]	@ (800144c <__aeabi_dadd+0x6bc>)
 8001448:	e53a      	b.n	8000ec0 <__aeabi_dadd+0x130>
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	000007ff 	.word	0x000007ff
 8001450:	ff7fffff 	.word	0xff7fffff
 8001454:	000007fe 	.word	0x000007fe

08001458 <__aeabi_ddiv>:
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	46de      	mov	lr, fp
 800145c:	4645      	mov	r5, r8
 800145e:	4657      	mov	r7, sl
 8001460:	464e      	mov	r6, r9
 8001462:	b5e0      	push	{r5, r6, r7, lr}
 8001464:	b087      	sub	sp, #28
 8001466:	9200      	str	r2, [sp, #0]
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	030b      	lsls	r3, r1, #12
 800146c:	0b1b      	lsrs	r3, r3, #12
 800146e:	469b      	mov	fp, r3
 8001470:	0fca      	lsrs	r2, r1, #31
 8001472:	004b      	lsls	r3, r1, #1
 8001474:	0004      	movs	r4, r0
 8001476:	4680      	mov	r8, r0
 8001478:	0d5b      	lsrs	r3, r3, #21
 800147a:	9202      	str	r2, [sp, #8]
 800147c:	d100      	bne.n	8001480 <__aeabi_ddiv+0x28>
 800147e:	e16a      	b.n	8001756 <__aeabi_ddiv+0x2fe>
 8001480:	4ad4      	ldr	r2, [pc, #848]	@ (80017d4 <__aeabi_ddiv+0x37c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d100      	bne.n	8001488 <__aeabi_ddiv+0x30>
 8001486:	e18c      	b.n	80017a2 <__aeabi_ddiv+0x34a>
 8001488:	4659      	mov	r1, fp
 800148a:	0f42      	lsrs	r2, r0, #29
 800148c:	00c9      	lsls	r1, r1, #3
 800148e:	430a      	orrs	r2, r1
 8001490:	2180      	movs	r1, #128	@ 0x80
 8001492:	0409      	lsls	r1, r1, #16
 8001494:	4311      	orrs	r1, r2
 8001496:	00c2      	lsls	r2, r0, #3
 8001498:	4690      	mov	r8, r2
 800149a:	4acf      	ldr	r2, [pc, #828]	@ (80017d8 <__aeabi_ddiv+0x380>)
 800149c:	4689      	mov	r9, r1
 800149e:	4692      	mov	sl, r2
 80014a0:	449a      	add	sl, r3
 80014a2:	2300      	movs	r3, #0
 80014a4:	2400      	movs	r4, #0
 80014a6:	9303      	str	r3, [sp, #12]
 80014a8:	9e00      	ldr	r6, [sp, #0]
 80014aa:	9f01      	ldr	r7, [sp, #4]
 80014ac:	033b      	lsls	r3, r7, #12
 80014ae:	0b1b      	lsrs	r3, r3, #12
 80014b0:	469b      	mov	fp, r3
 80014b2:	007b      	lsls	r3, r7, #1
 80014b4:	0030      	movs	r0, r6
 80014b6:	0d5b      	lsrs	r3, r3, #21
 80014b8:	0ffd      	lsrs	r5, r7, #31
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_ddiv+0x68>
 80014be:	e128      	b.n	8001712 <__aeabi_ddiv+0x2ba>
 80014c0:	4ac4      	ldr	r2, [pc, #784]	@ (80017d4 <__aeabi_ddiv+0x37c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d100      	bne.n	80014c8 <__aeabi_ddiv+0x70>
 80014c6:	e177      	b.n	80017b8 <__aeabi_ddiv+0x360>
 80014c8:	4659      	mov	r1, fp
 80014ca:	0f72      	lsrs	r2, r6, #29
 80014cc:	00c9      	lsls	r1, r1, #3
 80014ce:	430a      	orrs	r2, r1
 80014d0:	2180      	movs	r1, #128	@ 0x80
 80014d2:	0409      	lsls	r1, r1, #16
 80014d4:	4311      	orrs	r1, r2
 80014d6:	468b      	mov	fp, r1
 80014d8:	49bf      	ldr	r1, [pc, #764]	@ (80017d8 <__aeabi_ddiv+0x380>)
 80014da:	00f2      	lsls	r2, r6, #3
 80014dc:	468c      	mov	ip, r1
 80014de:	4651      	mov	r1, sl
 80014e0:	4463      	add	r3, ip
 80014e2:	1acb      	subs	r3, r1, r3
 80014e4:	469a      	mov	sl, r3
 80014e6:	2300      	movs	r3, #0
 80014e8:	9e02      	ldr	r6, [sp, #8]
 80014ea:	406e      	eors	r6, r5
 80014ec:	2c0f      	cmp	r4, #15
 80014ee:	d827      	bhi.n	8001540 <__aeabi_ddiv+0xe8>
 80014f0:	49ba      	ldr	r1, [pc, #744]	@ (80017dc <__aeabi_ddiv+0x384>)
 80014f2:	00a4      	lsls	r4, r4, #2
 80014f4:	5909      	ldr	r1, [r1, r4]
 80014f6:	468f      	mov	pc, r1
 80014f8:	46cb      	mov	fp, r9
 80014fa:	4642      	mov	r2, r8
 80014fc:	9e02      	ldr	r6, [sp, #8]
 80014fe:	9b03      	ldr	r3, [sp, #12]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d016      	beq.n	8001532 <__aeabi_ddiv+0xda>
 8001504:	2b03      	cmp	r3, #3
 8001506:	d100      	bne.n	800150a <__aeabi_ddiv+0xb2>
 8001508:	e2a6      	b.n	8001a58 <__aeabi_ddiv+0x600>
 800150a:	2b01      	cmp	r3, #1
 800150c:	d000      	beq.n	8001510 <__aeabi_ddiv+0xb8>
 800150e:	e0df      	b.n	80016d0 <__aeabi_ddiv+0x278>
 8001510:	2200      	movs	r2, #0
 8001512:	2300      	movs	r3, #0
 8001514:	2400      	movs	r4, #0
 8001516:	4690      	mov	r8, r2
 8001518:	051b      	lsls	r3, r3, #20
 800151a:	4323      	orrs	r3, r4
 800151c:	07f6      	lsls	r6, r6, #31
 800151e:	4333      	orrs	r3, r6
 8001520:	4640      	mov	r0, r8
 8001522:	0019      	movs	r1, r3
 8001524:	b007      	add	sp, #28
 8001526:	bcf0      	pop	{r4, r5, r6, r7}
 8001528:	46bb      	mov	fp, r7
 800152a:	46b2      	mov	sl, r6
 800152c:	46a9      	mov	r9, r5
 800152e:	46a0      	mov	r8, r4
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	2200      	movs	r2, #0
 8001534:	2400      	movs	r4, #0
 8001536:	4690      	mov	r8, r2
 8001538:	4ba6      	ldr	r3, [pc, #664]	@ (80017d4 <__aeabi_ddiv+0x37c>)
 800153a:	e7ed      	b.n	8001518 <__aeabi_ddiv+0xc0>
 800153c:	002e      	movs	r6, r5
 800153e:	e7df      	b.n	8001500 <__aeabi_ddiv+0xa8>
 8001540:	45cb      	cmp	fp, r9
 8001542:	d200      	bcs.n	8001546 <__aeabi_ddiv+0xee>
 8001544:	e1d4      	b.n	80018f0 <__aeabi_ddiv+0x498>
 8001546:	d100      	bne.n	800154a <__aeabi_ddiv+0xf2>
 8001548:	e1cf      	b.n	80018ea <__aeabi_ddiv+0x492>
 800154a:	2301      	movs	r3, #1
 800154c:	425b      	negs	r3, r3
 800154e:	469c      	mov	ip, r3
 8001550:	4644      	mov	r4, r8
 8001552:	4648      	mov	r0, r9
 8001554:	2700      	movs	r7, #0
 8001556:	44e2      	add	sl, ip
 8001558:	465b      	mov	r3, fp
 800155a:	0e15      	lsrs	r5, r2, #24
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	431d      	orrs	r5, r3
 8001560:	0c19      	lsrs	r1, r3, #16
 8001562:	042b      	lsls	r3, r5, #16
 8001564:	0212      	lsls	r2, r2, #8
 8001566:	9500      	str	r5, [sp, #0]
 8001568:	0c1d      	lsrs	r5, r3, #16
 800156a:	4691      	mov	r9, r2
 800156c:	9102      	str	r1, [sp, #8]
 800156e:	9503      	str	r5, [sp, #12]
 8001570:	f7fe fe6c 	bl	800024c <__aeabi_uidivmod>
 8001574:	0002      	movs	r2, r0
 8001576:	436a      	muls	r2, r5
 8001578:	040b      	lsls	r3, r1, #16
 800157a:	0c21      	lsrs	r1, r4, #16
 800157c:	4680      	mov	r8, r0
 800157e:	4319      	orrs	r1, r3
 8001580:	428a      	cmp	r2, r1
 8001582:	d909      	bls.n	8001598 <__aeabi_ddiv+0x140>
 8001584:	9d00      	ldr	r5, [sp, #0]
 8001586:	2301      	movs	r3, #1
 8001588:	46ac      	mov	ip, r5
 800158a:	425b      	negs	r3, r3
 800158c:	4461      	add	r1, ip
 800158e:	469c      	mov	ip, r3
 8001590:	44e0      	add	r8, ip
 8001592:	428d      	cmp	r5, r1
 8001594:	d800      	bhi.n	8001598 <__aeabi_ddiv+0x140>
 8001596:	e1fb      	b.n	8001990 <__aeabi_ddiv+0x538>
 8001598:	1a88      	subs	r0, r1, r2
 800159a:	9902      	ldr	r1, [sp, #8]
 800159c:	f7fe fe56 	bl	800024c <__aeabi_uidivmod>
 80015a0:	9a03      	ldr	r2, [sp, #12]
 80015a2:	0424      	lsls	r4, r4, #16
 80015a4:	4342      	muls	r2, r0
 80015a6:	0409      	lsls	r1, r1, #16
 80015a8:	0c24      	lsrs	r4, r4, #16
 80015aa:	0003      	movs	r3, r0
 80015ac:	430c      	orrs	r4, r1
 80015ae:	42a2      	cmp	r2, r4
 80015b0:	d906      	bls.n	80015c0 <__aeabi_ddiv+0x168>
 80015b2:	9900      	ldr	r1, [sp, #0]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	468c      	mov	ip, r1
 80015b8:	4464      	add	r4, ip
 80015ba:	42a1      	cmp	r1, r4
 80015bc:	d800      	bhi.n	80015c0 <__aeabi_ddiv+0x168>
 80015be:	e1e1      	b.n	8001984 <__aeabi_ddiv+0x52c>
 80015c0:	1aa0      	subs	r0, r4, r2
 80015c2:	4642      	mov	r2, r8
 80015c4:	0412      	lsls	r2, r2, #16
 80015c6:	431a      	orrs	r2, r3
 80015c8:	4693      	mov	fp, r2
 80015ca:	464b      	mov	r3, r9
 80015cc:	4659      	mov	r1, fp
 80015ce:	0c1b      	lsrs	r3, r3, #16
 80015d0:	001d      	movs	r5, r3
 80015d2:	9304      	str	r3, [sp, #16]
 80015d4:	040b      	lsls	r3, r1, #16
 80015d6:	4649      	mov	r1, r9
 80015d8:	0409      	lsls	r1, r1, #16
 80015da:	0c09      	lsrs	r1, r1, #16
 80015dc:	000c      	movs	r4, r1
 80015de:	0c1b      	lsrs	r3, r3, #16
 80015e0:	435c      	muls	r4, r3
 80015e2:	0c12      	lsrs	r2, r2, #16
 80015e4:	436b      	muls	r3, r5
 80015e6:	4688      	mov	r8, r1
 80015e8:	4351      	muls	r1, r2
 80015ea:	436a      	muls	r2, r5
 80015ec:	0c25      	lsrs	r5, r4, #16
 80015ee:	46ac      	mov	ip, r5
 80015f0:	185b      	adds	r3, r3, r1
 80015f2:	4463      	add	r3, ip
 80015f4:	4299      	cmp	r1, r3
 80015f6:	d903      	bls.n	8001600 <__aeabi_ddiv+0x1a8>
 80015f8:	2180      	movs	r1, #128	@ 0x80
 80015fa:	0249      	lsls	r1, r1, #9
 80015fc:	468c      	mov	ip, r1
 80015fe:	4462      	add	r2, ip
 8001600:	0c19      	lsrs	r1, r3, #16
 8001602:	0424      	lsls	r4, r4, #16
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	0c24      	lsrs	r4, r4, #16
 8001608:	188a      	adds	r2, r1, r2
 800160a:	191c      	adds	r4, r3, r4
 800160c:	4290      	cmp	r0, r2
 800160e:	d302      	bcc.n	8001616 <__aeabi_ddiv+0x1be>
 8001610:	d116      	bne.n	8001640 <__aeabi_ddiv+0x1e8>
 8001612:	42a7      	cmp	r7, r4
 8001614:	d214      	bcs.n	8001640 <__aeabi_ddiv+0x1e8>
 8001616:	465b      	mov	r3, fp
 8001618:	9d00      	ldr	r5, [sp, #0]
 800161a:	3b01      	subs	r3, #1
 800161c:	444f      	add	r7, r9
 800161e:	9305      	str	r3, [sp, #20]
 8001620:	454f      	cmp	r7, r9
 8001622:	419b      	sbcs	r3, r3
 8001624:	46ac      	mov	ip, r5
 8001626:	425b      	negs	r3, r3
 8001628:	4463      	add	r3, ip
 800162a:	18c0      	adds	r0, r0, r3
 800162c:	4285      	cmp	r5, r0
 800162e:	d300      	bcc.n	8001632 <__aeabi_ddiv+0x1da>
 8001630:	e1a1      	b.n	8001976 <__aeabi_ddiv+0x51e>
 8001632:	4282      	cmp	r2, r0
 8001634:	d900      	bls.n	8001638 <__aeabi_ddiv+0x1e0>
 8001636:	e1f6      	b.n	8001a26 <__aeabi_ddiv+0x5ce>
 8001638:	d100      	bne.n	800163c <__aeabi_ddiv+0x1e4>
 800163a:	e1f1      	b.n	8001a20 <__aeabi_ddiv+0x5c8>
 800163c:	9b05      	ldr	r3, [sp, #20]
 800163e:	469b      	mov	fp, r3
 8001640:	1b3c      	subs	r4, r7, r4
 8001642:	42a7      	cmp	r7, r4
 8001644:	41bf      	sbcs	r7, r7
 8001646:	9d00      	ldr	r5, [sp, #0]
 8001648:	1a80      	subs	r0, r0, r2
 800164a:	427f      	negs	r7, r7
 800164c:	1bc0      	subs	r0, r0, r7
 800164e:	4285      	cmp	r5, r0
 8001650:	d100      	bne.n	8001654 <__aeabi_ddiv+0x1fc>
 8001652:	e1d0      	b.n	80019f6 <__aeabi_ddiv+0x59e>
 8001654:	9902      	ldr	r1, [sp, #8]
 8001656:	f7fe fdf9 	bl	800024c <__aeabi_uidivmod>
 800165a:	9a03      	ldr	r2, [sp, #12]
 800165c:	040b      	lsls	r3, r1, #16
 800165e:	4342      	muls	r2, r0
 8001660:	0c21      	lsrs	r1, r4, #16
 8001662:	0007      	movs	r7, r0
 8001664:	4319      	orrs	r1, r3
 8001666:	428a      	cmp	r2, r1
 8001668:	d900      	bls.n	800166c <__aeabi_ddiv+0x214>
 800166a:	e178      	b.n	800195e <__aeabi_ddiv+0x506>
 800166c:	1a88      	subs	r0, r1, r2
 800166e:	9902      	ldr	r1, [sp, #8]
 8001670:	f7fe fdec 	bl	800024c <__aeabi_uidivmod>
 8001674:	9a03      	ldr	r2, [sp, #12]
 8001676:	0424      	lsls	r4, r4, #16
 8001678:	4342      	muls	r2, r0
 800167a:	0409      	lsls	r1, r1, #16
 800167c:	0c24      	lsrs	r4, r4, #16
 800167e:	0003      	movs	r3, r0
 8001680:	430c      	orrs	r4, r1
 8001682:	42a2      	cmp	r2, r4
 8001684:	d900      	bls.n	8001688 <__aeabi_ddiv+0x230>
 8001686:	e15d      	b.n	8001944 <__aeabi_ddiv+0x4ec>
 8001688:	4641      	mov	r1, r8
 800168a:	1aa4      	subs	r4, r4, r2
 800168c:	043a      	lsls	r2, r7, #16
 800168e:	431a      	orrs	r2, r3
 8001690:	9d04      	ldr	r5, [sp, #16]
 8001692:	0413      	lsls	r3, r2, #16
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	4359      	muls	r1, r3
 8001698:	4647      	mov	r7, r8
 800169a:	436b      	muls	r3, r5
 800169c:	469c      	mov	ip, r3
 800169e:	0c10      	lsrs	r0, r2, #16
 80016a0:	4347      	muls	r7, r0
 80016a2:	0c0b      	lsrs	r3, r1, #16
 80016a4:	44bc      	add	ip, r7
 80016a6:	4463      	add	r3, ip
 80016a8:	4368      	muls	r0, r5
 80016aa:	429f      	cmp	r7, r3
 80016ac:	d903      	bls.n	80016b6 <__aeabi_ddiv+0x25e>
 80016ae:	2580      	movs	r5, #128	@ 0x80
 80016b0:	026d      	lsls	r5, r5, #9
 80016b2:	46ac      	mov	ip, r5
 80016b4:	4460      	add	r0, ip
 80016b6:	0c1f      	lsrs	r7, r3, #16
 80016b8:	0409      	lsls	r1, r1, #16
 80016ba:	041b      	lsls	r3, r3, #16
 80016bc:	0c09      	lsrs	r1, r1, #16
 80016be:	183f      	adds	r7, r7, r0
 80016c0:	185b      	adds	r3, r3, r1
 80016c2:	42bc      	cmp	r4, r7
 80016c4:	d200      	bcs.n	80016c8 <__aeabi_ddiv+0x270>
 80016c6:	e102      	b.n	80018ce <__aeabi_ddiv+0x476>
 80016c8:	d100      	bne.n	80016cc <__aeabi_ddiv+0x274>
 80016ca:	e0fd      	b.n	80018c8 <__aeabi_ddiv+0x470>
 80016cc:	2301      	movs	r3, #1
 80016ce:	431a      	orrs	r2, r3
 80016d0:	4b43      	ldr	r3, [pc, #268]	@ (80017e0 <__aeabi_ddiv+0x388>)
 80016d2:	4453      	add	r3, sl
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	dc00      	bgt.n	80016da <__aeabi_ddiv+0x282>
 80016d8:	e0ae      	b.n	8001838 <__aeabi_ddiv+0x3e0>
 80016da:	0751      	lsls	r1, r2, #29
 80016dc:	d000      	beq.n	80016e0 <__aeabi_ddiv+0x288>
 80016de:	e198      	b.n	8001a12 <__aeabi_ddiv+0x5ba>
 80016e0:	4659      	mov	r1, fp
 80016e2:	01c9      	lsls	r1, r1, #7
 80016e4:	d506      	bpl.n	80016f4 <__aeabi_ddiv+0x29c>
 80016e6:	4659      	mov	r1, fp
 80016e8:	4b3e      	ldr	r3, [pc, #248]	@ (80017e4 <__aeabi_ddiv+0x38c>)
 80016ea:	4019      	ands	r1, r3
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	468b      	mov	fp, r1
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4453      	add	r3, sl
 80016f4:	493c      	ldr	r1, [pc, #240]	@ (80017e8 <__aeabi_ddiv+0x390>)
 80016f6:	428b      	cmp	r3, r1
 80016f8:	dd00      	ble.n	80016fc <__aeabi_ddiv+0x2a4>
 80016fa:	e71a      	b.n	8001532 <__aeabi_ddiv+0xda>
 80016fc:	4659      	mov	r1, fp
 80016fe:	08d2      	lsrs	r2, r2, #3
 8001700:	0749      	lsls	r1, r1, #29
 8001702:	4311      	orrs	r1, r2
 8001704:	465a      	mov	r2, fp
 8001706:	055b      	lsls	r3, r3, #21
 8001708:	0254      	lsls	r4, r2, #9
 800170a:	4688      	mov	r8, r1
 800170c:	0b24      	lsrs	r4, r4, #12
 800170e:	0d5b      	lsrs	r3, r3, #21
 8001710:	e702      	b.n	8001518 <__aeabi_ddiv+0xc0>
 8001712:	465a      	mov	r2, fp
 8001714:	9b00      	ldr	r3, [sp, #0]
 8001716:	431a      	orrs	r2, r3
 8001718:	d100      	bne.n	800171c <__aeabi_ddiv+0x2c4>
 800171a:	e07e      	b.n	800181a <__aeabi_ddiv+0x3c2>
 800171c:	465b      	mov	r3, fp
 800171e:	2b00      	cmp	r3, #0
 8001720:	d100      	bne.n	8001724 <__aeabi_ddiv+0x2cc>
 8001722:	e100      	b.n	8001926 <__aeabi_ddiv+0x4ce>
 8001724:	4658      	mov	r0, fp
 8001726:	f001 fabb 	bl	8002ca0 <__clzsi2>
 800172a:	0002      	movs	r2, r0
 800172c:	0003      	movs	r3, r0
 800172e:	3a0b      	subs	r2, #11
 8001730:	271d      	movs	r7, #29
 8001732:	9e00      	ldr	r6, [sp, #0]
 8001734:	1aba      	subs	r2, r7, r2
 8001736:	0019      	movs	r1, r3
 8001738:	4658      	mov	r0, fp
 800173a:	40d6      	lsrs	r6, r2
 800173c:	3908      	subs	r1, #8
 800173e:	4088      	lsls	r0, r1
 8001740:	0032      	movs	r2, r6
 8001742:	4302      	orrs	r2, r0
 8001744:	4693      	mov	fp, r2
 8001746:	9a00      	ldr	r2, [sp, #0]
 8001748:	408a      	lsls	r2, r1
 800174a:	4928      	ldr	r1, [pc, #160]	@ (80017ec <__aeabi_ddiv+0x394>)
 800174c:	4453      	add	r3, sl
 800174e:	468a      	mov	sl, r1
 8001750:	449a      	add	sl, r3
 8001752:	2300      	movs	r3, #0
 8001754:	e6c8      	b.n	80014e8 <__aeabi_ddiv+0x90>
 8001756:	465b      	mov	r3, fp
 8001758:	4303      	orrs	r3, r0
 800175a:	4699      	mov	r9, r3
 800175c:	d056      	beq.n	800180c <__aeabi_ddiv+0x3b4>
 800175e:	465b      	mov	r3, fp
 8001760:	2b00      	cmp	r3, #0
 8001762:	d100      	bne.n	8001766 <__aeabi_ddiv+0x30e>
 8001764:	e0cd      	b.n	8001902 <__aeabi_ddiv+0x4aa>
 8001766:	4658      	mov	r0, fp
 8001768:	f001 fa9a 	bl	8002ca0 <__clzsi2>
 800176c:	230b      	movs	r3, #11
 800176e:	425b      	negs	r3, r3
 8001770:	469c      	mov	ip, r3
 8001772:	0002      	movs	r2, r0
 8001774:	4484      	add	ip, r0
 8001776:	4666      	mov	r6, ip
 8001778:	231d      	movs	r3, #29
 800177a:	1b9b      	subs	r3, r3, r6
 800177c:	0026      	movs	r6, r4
 800177e:	0011      	movs	r1, r2
 8001780:	4658      	mov	r0, fp
 8001782:	40de      	lsrs	r6, r3
 8001784:	3908      	subs	r1, #8
 8001786:	4088      	lsls	r0, r1
 8001788:	0033      	movs	r3, r6
 800178a:	4303      	orrs	r3, r0
 800178c:	4699      	mov	r9, r3
 800178e:	0023      	movs	r3, r4
 8001790:	408b      	lsls	r3, r1
 8001792:	4698      	mov	r8, r3
 8001794:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <__aeabi_ddiv+0x398>)
 8001796:	2400      	movs	r4, #0
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	469a      	mov	sl, r3
 800179c:	2300      	movs	r3, #0
 800179e:	9303      	str	r3, [sp, #12]
 80017a0:	e682      	b.n	80014a8 <__aeabi_ddiv+0x50>
 80017a2:	465a      	mov	r2, fp
 80017a4:	4302      	orrs	r2, r0
 80017a6:	4691      	mov	r9, r2
 80017a8:	d12a      	bne.n	8001800 <__aeabi_ddiv+0x3a8>
 80017aa:	2200      	movs	r2, #0
 80017ac:	469a      	mov	sl, r3
 80017ae:	2302      	movs	r3, #2
 80017b0:	4690      	mov	r8, r2
 80017b2:	2408      	movs	r4, #8
 80017b4:	9303      	str	r3, [sp, #12]
 80017b6:	e677      	b.n	80014a8 <__aeabi_ddiv+0x50>
 80017b8:	465a      	mov	r2, fp
 80017ba:	9b00      	ldr	r3, [sp, #0]
 80017bc:	431a      	orrs	r2, r3
 80017be:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <__aeabi_ddiv+0x39c>)
 80017c0:	469c      	mov	ip, r3
 80017c2:	44e2      	add	sl, ip
 80017c4:	2a00      	cmp	r2, #0
 80017c6:	d117      	bne.n	80017f8 <__aeabi_ddiv+0x3a0>
 80017c8:	2302      	movs	r3, #2
 80017ca:	431c      	orrs	r4, r3
 80017cc:	2300      	movs	r3, #0
 80017ce:	469b      	mov	fp, r3
 80017d0:	3302      	adds	r3, #2
 80017d2:	e689      	b.n	80014e8 <__aeabi_ddiv+0x90>
 80017d4:	000007ff 	.word	0x000007ff
 80017d8:	fffffc01 	.word	0xfffffc01
 80017dc:	08010280 	.word	0x08010280
 80017e0:	000003ff 	.word	0x000003ff
 80017e4:	feffffff 	.word	0xfeffffff
 80017e8:	000007fe 	.word	0x000007fe
 80017ec:	000003f3 	.word	0x000003f3
 80017f0:	fffffc0d 	.word	0xfffffc0d
 80017f4:	fffff801 	.word	0xfffff801
 80017f8:	2303      	movs	r3, #3
 80017fa:	0032      	movs	r2, r6
 80017fc:	431c      	orrs	r4, r3
 80017fe:	e673      	b.n	80014e8 <__aeabi_ddiv+0x90>
 8001800:	469a      	mov	sl, r3
 8001802:	2303      	movs	r3, #3
 8001804:	46d9      	mov	r9, fp
 8001806:	240c      	movs	r4, #12
 8001808:	9303      	str	r3, [sp, #12]
 800180a:	e64d      	b.n	80014a8 <__aeabi_ddiv+0x50>
 800180c:	2300      	movs	r3, #0
 800180e:	4698      	mov	r8, r3
 8001810:	469a      	mov	sl, r3
 8001812:	3301      	adds	r3, #1
 8001814:	2404      	movs	r4, #4
 8001816:	9303      	str	r3, [sp, #12]
 8001818:	e646      	b.n	80014a8 <__aeabi_ddiv+0x50>
 800181a:	2301      	movs	r3, #1
 800181c:	431c      	orrs	r4, r3
 800181e:	2300      	movs	r3, #0
 8001820:	469b      	mov	fp, r3
 8001822:	3301      	adds	r3, #1
 8001824:	e660      	b.n	80014e8 <__aeabi_ddiv+0x90>
 8001826:	2300      	movs	r3, #0
 8001828:	2480      	movs	r4, #128	@ 0x80
 800182a:	4698      	mov	r8, r3
 800182c:	2600      	movs	r6, #0
 800182e:	4b92      	ldr	r3, [pc, #584]	@ (8001a78 <__aeabi_ddiv+0x620>)
 8001830:	0324      	lsls	r4, r4, #12
 8001832:	e671      	b.n	8001518 <__aeabi_ddiv+0xc0>
 8001834:	2201      	movs	r2, #1
 8001836:	4252      	negs	r2, r2
 8001838:	2101      	movs	r1, #1
 800183a:	1ac9      	subs	r1, r1, r3
 800183c:	2938      	cmp	r1, #56	@ 0x38
 800183e:	dd00      	ble.n	8001842 <__aeabi_ddiv+0x3ea>
 8001840:	e666      	b.n	8001510 <__aeabi_ddiv+0xb8>
 8001842:	291f      	cmp	r1, #31
 8001844:	dc00      	bgt.n	8001848 <__aeabi_ddiv+0x3f0>
 8001846:	e0ab      	b.n	80019a0 <__aeabi_ddiv+0x548>
 8001848:	201f      	movs	r0, #31
 800184a:	4240      	negs	r0, r0
 800184c:	1ac3      	subs	r3, r0, r3
 800184e:	4658      	mov	r0, fp
 8001850:	40d8      	lsrs	r0, r3
 8001852:	0003      	movs	r3, r0
 8001854:	2920      	cmp	r1, #32
 8001856:	d004      	beq.n	8001862 <__aeabi_ddiv+0x40a>
 8001858:	4658      	mov	r0, fp
 800185a:	4988      	ldr	r1, [pc, #544]	@ (8001a7c <__aeabi_ddiv+0x624>)
 800185c:	4451      	add	r1, sl
 800185e:	4088      	lsls	r0, r1
 8001860:	4302      	orrs	r2, r0
 8001862:	1e51      	subs	r1, r2, #1
 8001864:	418a      	sbcs	r2, r1
 8001866:	431a      	orrs	r2, r3
 8001868:	2307      	movs	r3, #7
 800186a:	0019      	movs	r1, r3
 800186c:	2400      	movs	r4, #0
 800186e:	4011      	ands	r1, r2
 8001870:	4213      	tst	r3, r2
 8001872:	d00c      	beq.n	800188e <__aeabi_ddiv+0x436>
 8001874:	230f      	movs	r3, #15
 8001876:	4013      	ands	r3, r2
 8001878:	2b04      	cmp	r3, #4
 800187a:	d100      	bne.n	800187e <__aeabi_ddiv+0x426>
 800187c:	e0f9      	b.n	8001a72 <__aeabi_ddiv+0x61a>
 800187e:	1d11      	adds	r1, r2, #4
 8001880:	4291      	cmp	r1, r2
 8001882:	419b      	sbcs	r3, r3
 8001884:	000a      	movs	r2, r1
 8001886:	425b      	negs	r3, r3
 8001888:	0759      	lsls	r1, r3, #29
 800188a:	025b      	lsls	r3, r3, #9
 800188c:	0b1c      	lsrs	r4, r3, #12
 800188e:	08d2      	lsrs	r2, r2, #3
 8001890:	430a      	orrs	r2, r1
 8001892:	4690      	mov	r8, r2
 8001894:	2300      	movs	r3, #0
 8001896:	e63f      	b.n	8001518 <__aeabi_ddiv+0xc0>
 8001898:	2480      	movs	r4, #128	@ 0x80
 800189a:	464b      	mov	r3, r9
 800189c:	0324      	lsls	r4, r4, #12
 800189e:	4223      	tst	r3, r4
 80018a0:	d009      	beq.n	80018b6 <__aeabi_ddiv+0x45e>
 80018a2:	465b      	mov	r3, fp
 80018a4:	4223      	tst	r3, r4
 80018a6:	d106      	bne.n	80018b6 <__aeabi_ddiv+0x45e>
 80018a8:	431c      	orrs	r4, r3
 80018aa:	0324      	lsls	r4, r4, #12
 80018ac:	002e      	movs	r6, r5
 80018ae:	4690      	mov	r8, r2
 80018b0:	4b71      	ldr	r3, [pc, #452]	@ (8001a78 <__aeabi_ddiv+0x620>)
 80018b2:	0b24      	lsrs	r4, r4, #12
 80018b4:	e630      	b.n	8001518 <__aeabi_ddiv+0xc0>
 80018b6:	2480      	movs	r4, #128	@ 0x80
 80018b8:	464b      	mov	r3, r9
 80018ba:	0324      	lsls	r4, r4, #12
 80018bc:	431c      	orrs	r4, r3
 80018be:	0324      	lsls	r4, r4, #12
 80018c0:	9e02      	ldr	r6, [sp, #8]
 80018c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001a78 <__aeabi_ddiv+0x620>)
 80018c4:	0b24      	lsrs	r4, r4, #12
 80018c6:	e627      	b.n	8001518 <__aeabi_ddiv+0xc0>
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x476>
 80018cc:	e700      	b.n	80016d0 <__aeabi_ddiv+0x278>
 80018ce:	9800      	ldr	r0, [sp, #0]
 80018d0:	1e51      	subs	r1, r2, #1
 80018d2:	4684      	mov	ip, r0
 80018d4:	4464      	add	r4, ip
 80018d6:	4284      	cmp	r4, r0
 80018d8:	d200      	bcs.n	80018dc <__aeabi_ddiv+0x484>
 80018da:	e084      	b.n	80019e6 <__aeabi_ddiv+0x58e>
 80018dc:	42bc      	cmp	r4, r7
 80018de:	d200      	bcs.n	80018e2 <__aeabi_ddiv+0x48a>
 80018e0:	e0ae      	b.n	8001a40 <__aeabi_ddiv+0x5e8>
 80018e2:	d100      	bne.n	80018e6 <__aeabi_ddiv+0x48e>
 80018e4:	e0c1      	b.n	8001a6a <__aeabi_ddiv+0x612>
 80018e6:	000a      	movs	r2, r1
 80018e8:	e6f0      	b.n	80016cc <__aeabi_ddiv+0x274>
 80018ea:	4542      	cmp	r2, r8
 80018ec:	d900      	bls.n	80018f0 <__aeabi_ddiv+0x498>
 80018ee:	e62c      	b.n	800154a <__aeabi_ddiv+0xf2>
 80018f0:	464b      	mov	r3, r9
 80018f2:	07dc      	lsls	r4, r3, #31
 80018f4:	0858      	lsrs	r0, r3, #1
 80018f6:	4643      	mov	r3, r8
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	431c      	orrs	r4, r3
 80018fc:	4643      	mov	r3, r8
 80018fe:	07df      	lsls	r7, r3, #31
 8001900:	e62a      	b.n	8001558 <__aeabi_ddiv+0x100>
 8001902:	f001 f9cd 	bl	8002ca0 <__clzsi2>
 8001906:	2315      	movs	r3, #21
 8001908:	469c      	mov	ip, r3
 800190a:	4484      	add	ip, r0
 800190c:	0002      	movs	r2, r0
 800190e:	4663      	mov	r3, ip
 8001910:	3220      	adds	r2, #32
 8001912:	2b1c      	cmp	r3, #28
 8001914:	dc00      	bgt.n	8001918 <__aeabi_ddiv+0x4c0>
 8001916:	e72e      	b.n	8001776 <__aeabi_ddiv+0x31e>
 8001918:	0023      	movs	r3, r4
 800191a:	3808      	subs	r0, #8
 800191c:	4083      	lsls	r3, r0
 800191e:	4699      	mov	r9, r3
 8001920:	2300      	movs	r3, #0
 8001922:	4698      	mov	r8, r3
 8001924:	e736      	b.n	8001794 <__aeabi_ddiv+0x33c>
 8001926:	f001 f9bb 	bl	8002ca0 <__clzsi2>
 800192a:	0002      	movs	r2, r0
 800192c:	0003      	movs	r3, r0
 800192e:	3215      	adds	r2, #21
 8001930:	3320      	adds	r3, #32
 8001932:	2a1c      	cmp	r2, #28
 8001934:	dc00      	bgt.n	8001938 <__aeabi_ddiv+0x4e0>
 8001936:	e6fb      	b.n	8001730 <__aeabi_ddiv+0x2d8>
 8001938:	9900      	ldr	r1, [sp, #0]
 800193a:	3808      	subs	r0, #8
 800193c:	4081      	lsls	r1, r0
 800193e:	2200      	movs	r2, #0
 8001940:	468b      	mov	fp, r1
 8001942:	e702      	b.n	800174a <__aeabi_ddiv+0x2f2>
 8001944:	9900      	ldr	r1, [sp, #0]
 8001946:	3b01      	subs	r3, #1
 8001948:	468c      	mov	ip, r1
 800194a:	4464      	add	r4, ip
 800194c:	42a1      	cmp	r1, r4
 800194e:	d900      	bls.n	8001952 <__aeabi_ddiv+0x4fa>
 8001950:	e69a      	b.n	8001688 <__aeabi_ddiv+0x230>
 8001952:	42a2      	cmp	r2, r4
 8001954:	d800      	bhi.n	8001958 <__aeabi_ddiv+0x500>
 8001956:	e697      	b.n	8001688 <__aeabi_ddiv+0x230>
 8001958:	1e83      	subs	r3, r0, #2
 800195a:	4464      	add	r4, ip
 800195c:	e694      	b.n	8001688 <__aeabi_ddiv+0x230>
 800195e:	46ac      	mov	ip, r5
 8001960:	4461      	add	r1, ip
 8001962:	3f01      	subs	r7, #1
 8001964:	428d      	cmp	r5, r1
 8001966:	d900      	bls.n	800196a <__aeabi_ddiv+0x512>
 8001968:	e680      	b.n	800166c <__aeabi_ddiv+0x214>
 800196a:	428a      	cmp	r2, r1
 800196c:	d800      	bhi.n	8001970 <__aeabi_ddiv+0x518>
 800196e:	e67d      	b.n	800166c <__aeabi_ddiv+0x214>
 8001970:	1e87      	subs	r7, r0, #2
 8001972:	4461      	add	r1, ip
 8001974:	e67a      	b.n	800166c <__aeabi_ddiv+0x214>
 8001976:	4285      	cmp	r5, r0
 8001978:	d000      	beq.n	800197c <__aeabi_ddiv+0x524>
 800197a:	e65f      	b.n	800163c <__aeabi_ddiv+0x1e4>
 800197c:	45b9      	cmp	r9, r7
 800197e:	d900      	bls.n	8001982 <__aeabi_ddiv+0x52a>
 8001980:	e65c      	b.n	800163c <__aeabi_ddiv+0x1e4>
 8001982:	e656      	b.n	8001632 <__aeabi_ddiv+0x1da>
 8001984:	42a2      	cmp	r2, r4
 8001986:	d800      	bhi.n	800198a <__aeabi_ddiv+0x532>
 8001988:	e61a      	b.n	80015c0 <__aeabi_ddiv+0x168>
 800198a:	1e83      	subs	r3, r0, #2
 800198c:	4464      	add	r4, ip
 800198e:	e617      	b.n	80015c0 <__aeabi_ddiv+0x168>
 8001990:	428a      	cmp	r2, r1
 8001992:	d800      	bhi.n	8001996 <__aeabi_ddiv+0x53e>
 8001994:	e600      	b.n	8001598 <__aeabi_ddiv+0x140>
 8001996:	46ac      	mov	ip, r5
 8001998:	1e83      	subs	r3, r0, #2
 800199a:	4698      	mov	r8, r3
 800199c:	4461      	add	r1, ip
 800199e:	e5fb      	b.n	8001598 <__aeabi_ddiv+0x140>
 80019a0:	4837      	ldr	r0, [pc, #220]	@ (8001a80 <__aeabi_ddiv+0x628>)
 80019a2:	0014      	movs	r4, r2
 80019a4:	4450      	add	r0, sl
 80019a6:	4082      	lsls	r2, r0
 80019a8:	465b      	mov	r3, fp
 80019aa:	0017      	movs	r7, r2
 80019ac:	4083      	lsls	r3, r0
 80019ae:	40cc      	lsrs	r4, r1
 80019b0:	1e7a      	subs	r2, r7, #1
 80019b2:	4197      	sbcs	r7, r2
 80019b4:	4323      	orrs	r3, r4
 80019b6:	433b      	orrs	r3, r7
 80019b8:	001a      	movs	r2, r3
 80019ba:	465b      	mov	r3, fp
 80019bc:	40cb      	lsrs	r3, r1
 80019be:	0751      	lsls	r1, r2, #29
 80019c0:	d009      	beq.n	80019d6 <__aeabi_ddiv+0x57e>
 80019c2:	210f      	movs	r1, #15
 80019c4:	4011      	ands	r1, r2
 80019c6:	2904      	cmp	r1, #4
 80019c8:	d005      	beq.n	80019d6 <__aeabi_ddiv+0x57e>
 80019ca:	1d11      	adds	r1, r2, #4
 80019cc:	4291      	cmp	r1, r2
 80019ce:	4192      	sbcs	r2, r2
 80019d0:	4252      	negs	r2, r2
 80019d2:	189b      	adds	r3, r3, r2
 80019d4:	000a      	movs	r2, r1
 80019d6:	0219      	lsls	r1, r3, #8
 80019d8:	d400      	bmi.n	80019dc <__aeabi_ddiv+0x584>
 80019da:	e755      	b.n	8001888 <__aeabi_ddiv+0x430>
 80019dc:	2200      	movs	r2, #0
 80019de:	2301      	movs	r3, #1
 80019e0:	2400      	movs	r4, #0
 80019e2:	4690      	mov	r8, r2
 80019e4:	e598      	b.n	8001518 <__aeabi_ddiv+0xc0>
 80019e6:	000a      	movs	r2, r1
 80019e8:	42bc      	cmp	r4, r7
 80019ea:	d000      	beq.n	80019ee <__aeabi_ddiv+0x596>
 80019ec:	e66e      	b.n	80016cc <__aeabi_ddiv+0x274>
 80019ee:	454b      	cmp	r3, r9
 80019f0:	d000      	beq.n	80019f4 <__aeabi_ddiv+0x59c>
 80019f2:	e66b      	b.n	80016cc <__aeabi_ddiv+0x274>
 80019f4:	e66c      	b.n	80016d0 <__aeabi_ddiv+0x278>
 80019f6:	4b23      	ldr	r3, [pc, #140]	@ (8001a84 <__aeabi_ddiv+0x62c>)
 80019f8:	4a23      	ldr	r2, [pc, #140]	@ (8001a88 <__aeabi_ddiv+0x630>)
 80019fa:	4453      	add	r3, sl
 80019fc:	4592      	cmp	sl, r2
 80019fe:	da00      	bge.n	8001a02 <__aeabi_ddiv+0x5aa>
 8001a00:	e718      	b.n	8001834 <__aeabi_ddiv+0x3dc>
 8001a02:	2101      	movs	r1, #1
 8001a04:	4249      	negs	r1, r1
 8001a06:	1d0a      	adds	r2, r1, #4
 8001a08:	428a      	cmp	r2, r1
 8001a0a:	4189      	sbcs	r1, r1
 8001a0c:	4249      	negs	r1, r1
 8001a0e:	448b      	add	fp, r1
 8001a10:	e666      	b.n	80016e0 <__aeabi_ddiv+0x288>
 8001a12:	210f      	movs	r1, #15
 8001a14:	4011      	ands	r1, r2
 8001a16:	2904      	cmp	r1, #4
 8001a18:	d100      	bne.n	8001a1c <__aeabi_ddiv+0x5c4>
 8001a1a:	e661      	b.n	80016e0 <__aeabi_ddiv+0x288>
 8001a1c:	0011      	movs	r1, r2
 8001a1e:	e7f2      	b.n	8001a06 <__aeabi_ddiv+0x5ae>
 8001a20:	42bc      	cmp	r4, r7
 8001a22:	d800      	bhi.n	8001a26 <__aeabi_ddiv+0x5ce>
 8001a24:	e60a      	b.n	800163c <__aeabi_ddiv+0x1e4>
 8001a26:	2302      	movs	r3, #2
 8001a28:	425b      	negs	r3, r3
 8001a2a:	469c      	mov	ip, r3
 8001a2c:	9900      	ldr	r1, [sp, #0]
 8001a2e:	444f      	add	r7, r9
 8001a30:	454f      	cmp	r7, r9
 8001a32:	419b      	sbcs	r3, r3
 8001a34:	44e3      	add	fp, ip
 8001a36:	468c      	mov	ip, r1
 8001a38:	425b      	negs	r3, r3
 8001a3a:	4463      	add	r3, ip
 8001a3c:	18c0      	adds	r0, r0, r3
 8001a3e:	e5ff      	b.n	8001640 <__aeabi_ddiv+0x1e8>
 8001a40:	4649      	mov	r1, r9
 8001a42:	9d00      	ldr	r5, [sp, #0]
 8001a44:	0048      	lsls	r0, r1, #1
 8001a46:	4548      	cmp	r0, r9
 8001a48:	4189      	sbcs	r1, r1
 8001a4a:	46ac      	mov	ip, r5
 8001a4c:	4249      	negs	r1, r1
 8001a4e:	4461      	add	r1, ip
 8001a50:	4681      	mov	r9, r0
 8001a52:	3a02      	subs	r2, #2
 8001a54:	1864      	adds	r4, r4, r1
 8001a56:	e7c7      	b.n	80019e8 <__aeabi_ddiv+0x590>
 8001a58:	2480      	movs	r4, #128	@ 0x80
 8001a5a:	465b      	mov	r3, fp
 8001a5c:	0324      	lsls	r4, r4, #12
 8001a5e:	431c      	orrs	r4, r3
 8001a60:	0324      	lsls	r4, r4, #12
 8001a62:	4690      	mov	r8, r2
 8001a64:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <__aeabi_ddiv+0x620>)
 8001a66:	0b24      	lsrs	r4, r4, #12
 8001a68:	e556      	b.n	8001518 <__aeabi_ddiv+0xc0>
 8001a6a:	4599      	cmp	r9, r3
 8001a6c:	d3e8      	bcc.n	8001a40 <__aeabi_ddiv+0x5e8>
 8001a6e:	000a      	movs	r2, r1
 8001a70:	e7bd      	b.n	80019ee <__aeabi_ddiv+0x596>
 8001a72:	2300      	movs	r3, #0
 8001a74:	e708      	b.n	8001888 <__aeabi_ddiv+0x430>
 8001a76:	46c0      	nop			@ (mov r8, r8)
 8001a78:	000007ff 	.word	0x000007ff
 8001a7c:	0000043e 	.word	0x0000043e
 8001a80:	0000041e 	.word	0x0000041e
 8001a84:	000003ff 	.word	0x000003ff
 8001a88:	fffffc02 	.word	0xfffffc02

08001a8c <__eqdf2>:
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	4657      	mov	r7, sl
 8001a90:	46de      	mov	lr, fp
 8001a92:	464e      	mov	r6, r9
 8001a94:	4645      	mov	r5, r8
 8001a96:	b5e0      	push	{r5, r6, r7, lr}
 8001a98:	000d      	movs	r5, r1
 8001a9a:	0004      	movs	r4, r0
 8001a9c:	0fe8      	lsrs	r0, r5, #31
 8001a9e:	4683      	mov	fp, r0
 8001aa0:	0309      	lsls	r1, r1, #12
 8001aa2:	0fd8      	lsrs	r0, r3, #31
 8001aa4:	0b09      	lsrs	r1, r1, #12
 8001aa6:	4682      	mov	sl, r0
 8001aa8:	4819      	ldr	r0, [pc, #100]	@ (8001b10 <__eqdf2+0x84>)
 8001aaa:	468c      	mov	ip, r1
 8001aac:	031f      	lsls	r7, r3, #12
 8001aae:	0069      	lsls	r1, r5, #1
 8001ab0:	005e      	lsls	r6, r3, #1
 8001ab2:	0d49      	lsrs	r1, r1, #21
 8001ab4:	0b3f      	lsrs	r7, r7, #12
 8001ab6:	0d76      	lsrs	r6, r6, #21
 8001ab8:	4281      	cmp	r1, r0
 8001aba:	d018      	beq.n	8001aee <__eqdf2+0x62>
 8001abc:	4286      	cmp	r6, r0
 8001abe:	d00f      	beq.n	8001ae0 <__eqdf2+0x54>
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	42b1      	cmp	r1, r6
 8001ac4:	d10d      	bne.n	8001ae2 <__eqdf2+0x56>
 8001ac6:	45bc      	cmp	ip, r7
 8001ac8:	d10b      	bne.n	8001ae2 <__eqdf2+0x56>
 8001aca:	4294      	cmp	r4, r2
 8001acc:	d109      	bne.n	8001ae2 <__eqdf2+0x56>
 8001ace:	45d3      	cmp	fp, sl
 8001ad0:	d01c      	beq.n	8001b0c <__eqdf2+0x80>
 8001ad2:	2900      	cmp	r1, #0
 8001ad4:	d105      	bne.n	8001ae2 <__eqdf2+0x56>
 8001ad6:	4660      	mov	r0, ip
 8001ad8:	4320      	orrs	r0, r4
 8001ada:	1e43      	subs	r3, r0, #1
 8001adc:	4198      	sbcs	r0, r3
 8001ade:	e000      	b.n	8001ae2 <__eqdf2+0x56>
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ae4:	46bb      	mov	fp, r7
 8001ae6:	46b2      	mov	sl, r6
 8001ae8:	46a9      	mov	r9, r5
 8001aea:	46a0      	mov	r8, r4
 8001aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aee:	2001      	movs	r0, #1
 8001af0:	428e      	cmp	r6, r1
 8001af2:	d1f6      	bne.n	8001ae2 <__eqdf2+0x56>
 8001af4:	4661      	mov	r1, ip
 8001af6:	4339      	orrs	r1, r7
 8001af8:	000f      	movs	r7, r1
 8001afa:	4317      	orrs	r7, r2
 8001afc:	4327      	orrs	r7, r4
 8001afe:	d1f0      	bne.n	8001ae2 <__eqdf2+0x56>
 8001b00:	465b      	mov	r3, fp
 8001b02:	4652      	mov	r2, sl
 8001b04:	1a98      	subs	r0, r3, r2
 8001b06:	1e43      	subs	r3, r0, #1
 8001b08:	4198      	sbcs	r0, r3
 8001b0a:	e7ea      	b.n	8001ae2 <__eqdf2+0x56>
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	e7e8      	b.n	8001ae2 <__eqdf2+0x56>
 8001b10:	000007ff 	.word	0x000007ff

08001b14 <__gedf2>:
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	4657      	mov	r7, sl
 8001b18:	464e      	mov	r6, r9
 8001b1a:	4645      	mov	r5, r8
 8001b1c:	46de      	mov	lr, fp
 8001b1e:	b5e0      	push	{r5, r6, r7, lr}
 8001b20:	000d      	movs	r5, r1
 8001b22:	030f      	lsls	r7, r1, #12
 8001b24:	0b39      	lsrs	r1, r7, #12
 8001b26:	b083      	sub	sp, #12
 8001b28:	0004      	movs	r4, r0
 8001b2a:	4680      	mov	r8, r0
 8001b2c:	9101      	str	r1, [sp, #4]
 8001b2e:	0058      	lsls	r0, r3, #1
 8001b30:	0fe9      	lsrs	r1, r5, #31
 8001b32:	4f31      	ldr	r7, [pc, #196]	@ (8001bf8 <__gedf2+0xe4>)
 8001b34:	0d40      	lsrs	r0, r0, #21
 8001b36:	468c      	mov	ip, r1
 8001b38:	006e      	lsls	r6, r5, #1
 8001b3a:	0319      	lsls	r1, r3, #12
 8001b3c:	4682      	mov	sl, r0
 8001b3e:	4691      	mov	r9, r2
 8001b40:	0d76      	lsrs	r6, r6, #21
 8001b42:	0b09      	lsrs	r1, r1, #12
 8001b44:	0fd8      	lsrs	r0, r3, #31
 8001b46:	42be      	cmp	r6, r7
 8001b48:	d01f      	beq.n	8001b8a <__gedf2+0x76>
 8001b4a:	45ba      	cmp	sl, r7
 8001b4c:	d00f      	beq.n	8001b6e <__gedf2+0x5a>
 8001b4e:	2e00      	cmp	r6, #0
 8001b50:	d12f      	bne.n	8001bb2 <__gedf2+0x9e>
 8001b52:	4655      	mov	r5, sl
 8001b54:	9e01      	ldr	r6, [sp, #4]
 8001b56:	4334      	orrs	r4, r6
 8001b58:	2d00      	cmp	r5, #0
 8001b5a:	d127      	bne.n	8001bac <__gedf2+0x98>
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	d03a      	beq.n	8001bd6 <__gedf2+0xc2>
 8001b60:	2c00      	cmp	r4, #0
 8001b62:	d145      	bne.n	8001bf0 <__gedf2+0xdc>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d11a      	bne.n	8001b9e <__gedf2+0x8a>
 8001b68:	2001      	movs	r0, #1
 8001b6a:	4240      	negs	r0, r0
 8001b6c:	e017      	b.n	8001b9e <__gedf2+0x8a>
 8001b6e:	4311      	orrs	r1, r2
 8001b70:	d13b      	bne.n	8001bea <__gedf2+0xd6>
 8001b72:	2e00      	cmp	r6, #0
 8001b74:	d102      	bne.n	8001b7c <__gedf2+0x68>
 8001b76:	9f01      	ldr	r7, [sp, #4]
 8001b78:	4327      	orrs	r7, r4
 8001b7a:	d0f3      	beq.n	8001b64 <__gedf2+0x50>
 8001b7c:	4584      	cmp	ip, r0
 8001b7e:	d109      	bne.n	8001b94 <__gedf2+0x80>
 8001b80:	4663      	mov	r3, ip
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <__gedf2+0x54>
 8001b86:	4660      	mov	r0, ip
 8001b88:	e009      	b.n	8001b9e <__gedf2+0x8a>
 8001b8a:	9f01      	ldr	r7, [sp, #4]
 8001b8c:	4327      	orrs	r7, r4
 8001b8e:	d12c      	bne.n	8001bea <__gedf2+0xd6>
 8001b90:	45b2      	cmp	sl, r6
 8001b92:	d024      	beq.n	8001bde <__gedf2+0xca>
 8001b94:	4663      	mov	r3, ip
 8001b96:	2002      	movs	r0, #2
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	4018      	ands	r0, r3
 8001b9c:	3801      	subs	r0, #1
 8001b9e:	b003      	add	sp, #12
 8001ba0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba2:	46bb      	mov	fp, r7
 8001ba4:	46b2      	mov	sl, r6
 8001ba6:	46a9      	mov	r9, r5
 8001ba8:	46a0      	mov	r8, r4
 8001baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bac:	2c00      	cmp	r4, #0
 8001bae:	d0d9      	beq.n	8001b64 <__gedf2+0x50>
 8001bb0:	e7e4      	b.n	8001b7c <__gedf2+0x68>
 8001bb2:	4654      	mov	r4, sl
 8001bb4:	2c00      	cmp	r4, #0
 8001bb6:	d0ed      	beq.n	8001b94 <__gedf2+0x80>
 8001bb8:	4584      	cmp	ip, r0
 8001bba:	d1eb      	bne.n	8001b94 <__gedf2+0x80>
 8001bbc:	4556      	cmp	r6, sl
 8001bbe:	dce9      	bgt.n	8001b94 <__gedf2+0x80>
 8001bc0:	dbde      	blt.n	8001b80 <__gedf2+0x6c>
 8001bc2:	9b01      	ldr	r3, [sp, #4]
 8001bc4:	428b      	cmp	r3, r1
 8001bc6:	d8e5      	bhi.n	8001b94 <__gedf2+0x80>
 8001bc8:	d1da      	bne.n	8001b80 <__gedf2+0x6c>
 8001bca:	45c8      	cmp	r8, r9
 8001bcc:	d8e2      	bhi.n	8001b94 <__gedf2+0x80>
 8001bce:	2000      	movs	r0, #0
 8001bd0:	45c8      	cmp	r8, r9
 8001bd2:	d2e4      	bcs.n	8001b9e <__gedf2+0x8a>
 8001bd4:	e7d4      	b.n	8001b80 <__gedf2+0x6c>
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	d0e0      	beq.n	8001b9e <__gedf2+0x8a>
 8001bdc:	e7da      	b.n	8001b94 <__gedf2+0x80>
 8001bde:	4311      	orrs	r1, r2
 8001be0:	d103      	bne.n	8001bea <__gedf2+0xd6>
 8001be2:	4584      	cmp	ip, r0
 8001be4:	d1d6      	bne.n	8001b94 <__gedf2+0x80>
 8001be6:	2000      	movs	r0, #0
 8001be8:	e7d9      	b.n	8001b9e <__gedf2+0x8a>
 8001bea:	2002      	movs	r0, #2
 8001bec:	4240      	negs	r0, r0
 8001bee:	e7d6      	b.n	8001b9e <__gedf2+0x8a>
 8001bf0:	4584      	cmp	ip, r0
 8001bf2:	d0e6      	beq.n	8001bc2 <__gedf2+0xae>
 8001bf4:	e7ce      	b.n	8001b94 <__gedf2+0x80>
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	000007ff 	.word	0x000007ff

08001bfc <__ledf2>:
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	4657      	mov	r7, sl
 8001c00:	464e      	mov	r6, r9
 8001c02:	4645      	mov	r5, r8
 8001c04:	46de      	mov	lr, fp
 8001c06:	b5e0      	push	{r5, r6, r7, lr}
 8001c08:	000d      	movs	r5, r1
 8001c0a:	030f      	lsls	r7, r1, #12
 8001c0c:	0004      	movs	r4, r0
 8001c0e:	4680      	mov	r8, r0
 8001c10:	0fe8      	lsrs	r0, r5, #31
 8001c12:	0b39      	lsrs	r1, r7, #12
 8001c14:	4684      	mov	ip, r0
 8001c16:	b083      	sub	sp, #12
 8001c18:	0058      	lsls	r0, r3, #1
 8001c1a:	4f30      	ldr	r7, [pc, #192]	@ (8001cdc <__ledf2+0xe0>)
 8001c1c:	0d40      	lsrs	r0, r0, #21
 8001c1e:	9101      	str	r1, [sp, #4]
 8001c20:	031e      	lsls	r6, r3, #12
 8001c22:	0069      	lsls	r1, r5, #1
 8001c24:	4682      	mov	sl, r0
 8001c26:	4691      	mov	r9, r2
 8001c28:	0d49      	lsrs	r1, r1, #21
 8001c2a:	0b36      	lsrs	r6, r6, #12
 8001c2c:	0fd8      	lsrs	r0, r3, #31
 8001c2e:	42b9      	cmp	r1, r7
 8001c30:	d020      	beq.n	8001c74 <__ledf2+0x78>
 8001c32:	45ba      	cmp	sl, r7
 8001c34:	d00f      	beq.n	8001c56 <__ledf2+0x5a>
 8001c36:	2900      	cmp	r1, #0
 8001c38:	d12b      	bne.n	8001c92 <__ledf2+0x96>
 8001c3a:	9901      	ldr	r1, [sp, #4]
 8001c3c:	430c      	orrs	r4, r1
 8001c3e:	4651      	mov	r1, sl
 8001c40:	2900      	cmp	r1, #0
 8001c42:	d137      	bne.n	8001cb4 <__ledf2+0xb8>
 8001c44:	4332      	orrs	r2, r6
 8001c46:	d038      	beq.n	8001cba <__ledf2+0xbe>
 8001c48:	2c00      	cmp	r4, #0
 8001c4a:	d144      	bne.n	8001cd6 <__ledf2+0xda>
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d119      	bne.n	8001c84 <__ledf2+0x88>
 8001c50:	2001      	movs	r0, #1
 8001c52:	4240      	negs	r0, r0
 8001c54:	e016      	b.n	8001c84 <__ledf2+0x88>
 8001c56:	4316      	orrs	r6, r2
 8001c58:	d113      	bne.n	8001c82 <__ledf2+0x86>
 8001c5a:	2900      	cmp	r1, #0
 8001c5c:	d102      	bne.n	8001c64 <__ledf2+0x68>
 8001c5e:	9f01      	ldr	r7, [sp, #4]
 8001c60:	4327      	orrs	r7, r4
 8001c62:	d0f3      	beq.n	8001c4c <__ledf2+0x50>
 8001c64:	4584      	cmp	ip, r0
 8001c66:	d020      	beq.n	8001caa <__ledf2+0xae>
 8001c68:	4663      	mov	r3, ip
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	4018      	ands	r0, r3
 8001c70:	3801      	subs	r0, #1
 8001c72:	e007      	b.n	8001c84 <__ledf2+0x88>
 8001c74:	9f01      	ldr	r7, [sp, #4]
 8001c76:	4327      	orrs	r7, r4
 8001c78:	d103      	bne.n	8001c82 <__ledf2+0x86>
 8001c7a:	458a      	cmp	sl, r1
 8001c7c:	d1f4      	bne.n	8001c68 <__ledf2+0x6c>
 8001c7e:	4316      	orrs	r6, r2
 8001c80:	d01f      	beq.n	8001cc2 <__ledf2+0xc6>
 8001c82:	2002      	movs	r0, #2
 8001c84:	b003      	add	sp, #12
 8001c86:	bcf0      	pop	{r4, r5, r6, r7}
 8001c88:	46bb      	mov	fp, r7
 8001c8a:	46b2      	mov	sl, r6
 8001c8c:	46a9      	mov	r9, r5
 8001c8e:	46a0      	mov	r8, r4
 8001c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c92:	4654      	mov	r4, sl
 8001c94:	2c00      	cmp	r4, #0
 8001c96:	d0e7      	beq.n	8001c68 <__ledf2+0x6c>
 8001c98:	4584      	cmp	ip, r0
 8001c9a:	d1e5      	bne.n	8001c68 <__ledf2+0x6c>
 8001c9c:	4551      	cmp	r1, sl
 8001c9e:	dce3      	bgt.n	8001c68 <__ledf2+0x6c>
 8001ca0:	db03      	blt.n	8001caa <__ledf2+0xae>
 8001ca2:	9b01      	ldr	r3, [sp, #4]
 8001ca4:	42b3      	cmp	r3, r6
 8001ca6:	d8df      	bhi.n	8001c68 <__ledf2+0x6c>
 8001ca8:	d00f      	beq.n	8001cca <__ledf2+0xce>
 8001caa:	4663      	mov	r3, ip
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0cf      	beq.n	8001c50 <__ledf2+0x54>
 8001cb0:	4660      	mov	r0, ip
 8001cb2:	e7e7      	b.n	8001c84 <__ledf2+0x88>
 8001cb4:	2c00      	cmp	r4, #0
 8001cb6:	d0c9      	beq.n	8001c4c <__ledf2+0x50>
 8001cb8:	e7d4      	b.n	8001c64 <__ledf2+0x68>
 8001cba:	2000      	movs	r0, #0
 8001cbc:	2c00      	cmp	r4, #0
 8001cbe:	d0e1      	beq.n	8001c84 <__ledf2+0x88>
 8001cc0:	e7d2      	b.n	8001c68 <__ledf2+0x6c>
 8001cc2:	4584      	cmp	ip, r0
 8001cc4:	d1d0      	bne.n	8001c68 <__ledf2+0x6c>
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	e7dc      	b.n	8001c84 <__ledf2+0x88>
 8001cca:	45c8      	cmp	r8, r9
 8001ccc:	d8cc      	bhi.n	8001c68 <__ledf2+0x6c>
 8001cce:	2000      	movs	r0, #0
 8001cd0:	45c8      	cmp	r8, r9
 8001cd2:	d2d7      	bcs.n	8001c84 <__ledf2+0x88>
 8001cd4:	e7e9      	b.n	8001caa <__ledf2+0xae>
 8001cd6:	4584      	cmp	ip, r0
 8001cd8:	d0e3      	beq.n	8001ca2 <__ledf2+0xa6>
 8001cda:	e7c5      	b.n	8001c68 <__ledf2+0x6c>
 8001cdc:	000007ff 	.word	0x000007ff

08001ce0 <__aeabi_dmul>:
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	4657      	mov	r7, sl
 8001ce4:	46de      	mov	lr, fp
 8001ce6:	464e      	mov	r6, r9
 8001ce8:	4645      	mov	r5, r8
 8001cea:	b5e0      	push	{r5, r6, r7, lr}
 8001cec:	001f      	movs	r7, r3
 8001cee:	030b      	lsls	r3, r1, #12
 8001cf0:	0b1b      	lsrs	r3, r3, #12
 8001cf2:	0016      	movs	r6, r2
 8001cf4:	469a      	mov	sl, r3
 8001cf6:	0fca      	lsrs	r2, r1, #31
 8001cf8:	004b      	lsls	r3, r1, #1
 8001cfa:	0004      	movs	r4, r0
 8001cfc:	4693      	mov	fp, r2
 8001cfe:	b087      	sub	sp, #28
 8001d00:	0d5b      	lsrs	r3, r3, #21
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dmul+0x26>
 8001d04:	e0d5      	b.n	8001eb2 <__aeabi_dmul+0x1d2>
 8001d06:	4abb      	ldr	r2, [pc, #748]	@ (8001ff4 <__aeabi_dmul+0x314>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_dmul+0x2e>
 8001d0c:	e0f8      	b.n	8001f00 <__aeabi_dmul+0x220>
 8001d0e:	4651      	mov	r1, sl
 8001d10:	0f42      	lsrs	r2, r0, #29
 8001d12:	00c9      	lsls	r1, r1, #3
 8001d14:	430a      	orrs	r2, r1
 8001d16:	2180      	movs	r1, #128	@ 0x80
 8001d18:	0409      	lsls	r1, r1, #16
 8001d1a:	4311      	orrs	r1, r2
 8001d1c:	00c2      	lsls	r2, r0, #3
 8001d1e:	4691      	mov	r9, r2
 8001d20:	4ab5      	ldr	r2, [pc, #724]	@ (8001ff8 <__aeabi_dmul+0x318>)
 8001d22:	468a      	mov	sl, r1
 8001d24:	189d      	adds	r5, r3, r2
 8001d26:	2300      	movs	r3, #0
 8001d28:	4698      	mov	r8, r3
 8001d2a:	9302      	str	r3, [sp, #8]
 8001d2c:	033c      	lsls	r4, r7, #12
 8001d2e:	007b      	lsls	r3, r7, #1
 8001d30:	0ffa      	lsrs	r2, r7, #31
 8001d32:	0030      	movs	r0, r6
 8001d34:	0b24      	lsrs	r4, r4, #12
 8001d36:	0d5b      	lsrs	r3, r3, #21
 8001d38:	9200      	str	r2, [sp, #0]
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_dmul+0x5e>
 8001d3c:	e096      	b.n	8001e6c <__aeabi_dmul+0x18c>
 8001d3e:	4aad      	ldr	r2, [pc, #692]	@ (8001ff4 <__aeabi_dmul+0x314>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d031      	beq.n	8001da8 <__aeabi_dmul+0xc8>
 8001d44:	0f72      	lsrs	r2, r6, #29
 8001d46:	00e4      	lsls	r4, r4, #3
 8001d48:	4322      	orrs	r2, r4
 8001d4a:	2480      	movs	r4, #128	@ 0x80
 8001d4c:	0424      	lsls	r4, r4, #16
 8001d4e:	4314      	orrs	r4, r2
 8001d50:	4aa9      	ldr	r2, [pc, #676]	@ (8001ff8 <__aeabi_dmul+0x318>)
 8001d52:	00f0      	lsls	r0, r6, #3
 8001d54:	4694      	mov	ip, r2
 8001d56:	4463      	add	r3, ip
 8001d58:	195b      	adds	r3, r3, r5
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	9201      	str	r2, [sp, #4]
 8001d5e:	4642      	mov	r2, r8
 8001d60:	2600      	movs	r6, #0
 8001d62:	2a0a      	cmp	r2, #10
 8001d64:	dc42      	bgt.n	8001dec <__aeabi_dmul+0x10c>
 8001d66:	465a      	mov	r2, fp
 8001d68:	9900      	ldr	r1, [sp, #0]
 8001d6a:	404a      	eors	r2, r1
 8001d6c:	4693      	mov	fp, r2
 8001d6e:	4642      	mov	r2, r8
 8001d70:	2a02      	cmp	r2, #2
 8001d72:	dc32      	bgt.n	8001dda <__aeabi_dmul+0xfa>
 8001d74:	3a01      	subs	r2, #1
 8001d76:	2a01      	cmp	r2, #1
 8001d78:	d900      	bls.n	8001d7c <__aeabi_dmul+0x9c>
 8001d7a:	e149      	b.n	8002010 <__aeabi_dmul+0x330>
 8001d7c:	2e02      	cmp	r6, #2
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dmul+0xa2>
 8001d80:	e0ca      	b.n	8001f18 <__aeabi_dmul+0x238>
 8001d82:	2e01      	cmp	r6, #1
 8001d84:	d13d      	bne.n	8001e02 <__aeabi_dmul+0x122>
 8001d86:	2300      	movs	r3, #0
 8001d88:	2400      	movs	r4, #0
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	0010      	movs	r0, r2
 8001d8e:	465a      	mov	r2, fp
 8001d90:	051b      	lsls	r3, r3, #20
 8001d92:	4323      	orrs	r3, r4
 8001d94:	07d2      	lsls	r2, r2, #31
 8001d96:	4313      	orrs	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	b007      	add	sp, #28
 8001d9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d9e:	46bb      	mov	fp, r7
 8001da0:	46b2      	mov	sl, r6
 8001da2:	46a9      	mov	r9, r5
 8001da4:	46a0      	mov	r8, r4
 8001da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da8:	4b92      	ldr	r3, [pc, #584]	@ (8001ff4 <__aeabi_dmul+0x314>)
 8001daa:	4326      	orrs	r6, r4
 8001dac:	18eb      	adds	r3, r5, r3
 8001dae:	2e00      	cmp	r6, #0
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dmul+0xd4>
 8001db2:	e0bb      	b.n	8001f2c <__aeabi_dmul+0x24c>
 8001db4:	2203      	movs	r2, #3
 8001db6:	4641      	mov	r1, r8
 8001db8:	4311      	orrs	r1, r2
 8001dba:	465a      	mov	r2, fp
 8001dbc:	4688      	mov	r8, r1
 8001dbe:	9900      	ldr	r1, [sp, #0]
 8001dc0:	404a      	eors	r2, r1
 8001dc2:	2180      	movs	r1, #128	@ 0x80
 8001dc4:	0109      	lsls	r1, r1, #4
 8001dc6:	468c      	mov	ip, r1
 8001dc8:	0029      	movs	r1, r5
 8001dca:	4461      	add	r1, ip
 8001dcc:	9101      	str	r1, [sp, #4]
 8001dce:	4641      	mov	r1, r8
 8001dd0:	290a      	cmp	r1, #10
 8001dd2:	dd00      	ble.n	8001dd6 <__aeabi_dmul+0xf6>
 8001dd4:	e233      	b.n	800223e <__aeabi_dmul+0x55e>
 8001dd6:	4693      	mov	fp, r2
 8001dd8:	2603      	movs	r6, #3
 8001dda:	4642      	mov	r2, r8
 8001ddc:	2701      	movs	r7, #1
 8001dde:	4097      	lsls	r7, r2
 8001de0:	21a6      	movs	r1, #166	@ 0xa6
 8001de2:	003a      	movs	r2, r7
 8001de4:	00c9      	lsls	r1, r1, #3
 8001de6:	400a      	ands	r2, r1
 8001de8:	420f      	tst	r7, r1
 8001dea:	d031      	beq.n	8001e50 <__aeabi_dmul+0x170>
 8001dec:	9e02      	ldr	r6, [sp, #8]
 8001dee:	2e02      	cmp	r6, #2
 8001df0:	d100      	bne.n	8001df4 <__aeabi_dmul+0x114>
 8001df2:	e235      	b.n	8002260 <__aeabi_dmul+0x580>
 8001df4:	2e03      	cmp	r6, #3
 8001df6:	d100      	bne.n	8001dfa <__aeabi_dmul+0x11a>
 8001df8:	e1d2      	b.n	80021a0 <__aeabi_dmul+0x4c0>
 8001dfa:	4654      	mov	r4, sl
 8001dfc:	4648      	mov	r0, r9
 8001dfe:	2e01      	cmp	r6, #1
 8001e00:	d0c1      	beq.n	8001d86 <__aeabi_dmul+0xa6>
 8001e02:	9a01      	ldr	r2, [sp, #4]
 8001e04:	4b7d      	ldr	r3, [pc, #500]	@ (8001ffc <__aeabi_dmul+0x31c>)
 8001e06:	4694      	mov	ip, r2
 8001e08:	4463      	add	r3, ip
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	dc00      	bgt.n	8001e10 <__aeabi_dmul+0x130>
 8001e0e:	e0c0      	b.n	8001f92 <__aeabi_dmul+0x2b2>
 8001e10:	0742      	lsls	r2, r0, #29
 8001e12:	d009      	beq.n	8001e28 <__aeabi_dmul+0x148>
 8001e14:	220f      	movs	r2, #15
 8001e16:	4002      	ands	r2, r0
 8001e18:	2a04      	cmp	r2, #4
 8001e1a:	d005      	beq.n	8001e28 <__aeabi_dmul+0x148>
 8001e1c:	1d02      	adds	r2, r0, #4
 8001e1e:	4282      	cmp	r2, r0
 8001e20:	4180      	sbcs	r0, r0
 8001e22:	4240      	negs	r0, r0
 8001e24:	1824      	adds	r4, r4, r0
 8001e26:	0010      	movs	r0, r2
 8001e28:	01e2      	lsls	r2, r4, #7
 8001e2a:	d506      	bpl.n	8001e3a <__aeabi_dmul+0x15a>
 8001e2c:	4b74      	ldr	r3, [pc, #464]	@ (8002000 <__aeabi_dmul+0x320>)
 8001e2e:	9a01      	ldr	r2, [sp, #4]
 8001e30:	401c      	ands	r4, r3
 8001e32:	2380      	movs	r3, #128	@ 0x80
 8001e34:	4694      	mov	ip, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4463      	add	r3, ip
 8001e3a:	4a72      	ldr	r2, [pc, #456]	@ (8002004 <__aeabi_dmul+0x324>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	dc6b      	bgt.n	8001f18 <__aeabi_dmul+0x238>
 8001e40:	0762      	lsls	r2, r4, #29
 8001e42:	08c0      	lsrs	r0, r0, #3
 8001e44:	0264      	lsls	r4, r4, #9
 8001e46:	055b      	lsls	r3, r3, #21
 8001e48:	4302      	orrs	r2, r0
 8001e4a:	0b24      	lsrs	r4, r4, #12
 8001e4c:	0d5b      	lsrs	r3, r3, #21
 8001e4e:	e79d      	b.n	8001d8c <__aeabi_dmul+0xac>
 8001e50:	2190      	movs	r1, #144	@ 0x90
 8001e52:	0089      	lsls	r1, r1, #2
 8001e54:	420f      	tst	r7, r1
 8001e56:	d163      	bne.n	8001f20 <__aeabi_dmul+0x240>
 8001e58:	2288      	movs	r2, #136	@ 0x88
 8001e5a:	423a      	tst	r2, r7
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dmul+0x180>
 8001e5e:	e0d7      	b.n	8002010 <__aeabi_dmul+0x330>
 8001e60:	9b00      	ldr	r3, [sp, #0]
 8001e62:	46a2      	mov	sl, r4
 8001e64:	469b      	mov	fp, r3
 8001e66:	4681      	mov	r9, r0
 8001e68:	9602      	str	r6, [sp, #8]
 8001e6a:	e7bf      	b.n	8001dec <__aeabi_dmul+0x10c>
 8001e6c:	0023      	movs	r3, r4
 8001e6e:	4333      	orrs	r3, r6
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dmul+0x194>
 8001e72:	e07f      	b.n	8001f74 <__aeabi_dmul+0x294>
 8001e74:	2c00      	cmp	r4, #0
 8001e76:	d100      	bne.n	8001e7a <__aeabi_dmul+0x19a>
 8001e78:	e1ad      	b.n	80021d6 <__aeabi_dmul+0x4f6>
 8001e7a:	0020      	movs	r0, r4
 8001e7c:	f000 ff10 	bl	8002ca0 <__clzsi2>
 8001e80:	0002      	movs	r2, r0
 8001e82:	0003      	movs	r3, r0
 8001e84:	3a0b      	subs	r2, #11
 8001e86:	201d      	movs	r0, #29
 8001e88:	0019      	movs	r1, r3
 8001e8a:	1a82      	subs	r2, r0, r2
 8001e8c:	0030      	movs	r0, r6
 8001e8e:	3908      	subs	r1, #8
 8001e90:	40d0      	lsrs	r0, r2
 8001e92:	408c      	lsls	r4, r1
 8001e94:	4304      	orrs	r4, r0
 8001e96:	0030      	movs	r0, r6
 8001e98:	4088      	lsls	r0, r1
 8001e9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002008 <__aeabi_dmul+0x328>)
 8001e9c:	1aeb      	subs	r3, r5, r3
 8001e9e:	4694      	mov	ip, r2
 8001ea0:	4463      	add	r3, ip
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	9201      	str	r2, [sp, #4]
 8001ea6:	4642      	mov	r2, r8
 8001ea8:	2600      	movs	r6, #0
 8001eaa:	2a0a      	cmp	r2, #10
 8001eac:	dc00      	bgt.n	8001eb0 <__aeabi_dmul+0x1d0>
 8001eae:	e75a      	b.n	8001d66 <__aeabi_dmul+0x86>
 8001eb0:	e79c      	b.n	8001dec <__aeabi_dmul+0x10c>
 8001eb2:	4653      	mov	r3, sl
 8001eb4:	4303      	orrs	r3, r0
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	d054      	beq.n	8001f64 <__aeabi_dmul+0x284>
 8001eba:	4653      	mov	r3, sl
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dmul+0x1e2>
 8001ec0:	e177      	b.n	80021b2 <__aeabi_dmul+0x4d2>
 8001ec2:	4650      	mov	r0, sl
 8001ec4:	f000 feec 	bl	8002ca0 <__clzsi2>
 8001ec8:	230b      	movs	r3, #11
 8001eca:	425b      	negs	r3, r3
 8001ecc:	469c      	mov	ip, r3
 8001ece:	0002      	movs	r2, r0
 8001ed0:	4484      	add	ip, r0
 8001ed2:	0011      	movs	r1, r2
 8001ed4:	4650      	mov	r0, sl
 8001ed6:	3908      	subs	r1, #8
 8001ed8:	4088      	lsls	r0, r1
 8001eda:	231d      	movs	r3, #29
 8001edc:	4680      	mov	r8, r0
 8001ede:	4660      	mov	r0, ip
 8001ee0:	1a1b      	subs	r3, r3, r0
 8001ee2:	0020      	movs	r0, r4
 8001ee4:	40d8      	lsrs	r0, r3
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	4640      	mov	r0, r8
 8001eea:	4303      	orrs	r3, r0
 8001eec:	469a      	mov	sl, r3
 8001eee:	0023      	movs	r3, r4
 8001ef0:	408b      	lsls	r3, r1
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	4d44      	ldr	r5, [pc, #272]	@ (8002008 <__aeabi_dmul+0x328>)
 8001ef8:	4698      	mov	r8, r3
 8001efa:	1aad      	subs	r5, r5, r2
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	e715      	b.n	8001d2c <__aeabi_dmul+0x4c>
 8001f00:	4652      	mov	r2, sl
 8001f02:	4302      	orrs	r2, r0
 8001f04:	4691      	mov	r9, r2
 8001f06:	d126      	bne.n	8001f56 <__aeabi_dmul+0x276>
 8001f08:	2200      	movs	r2, #0
 8001f0a:	001d      	movs	r5, r3
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	4692      	mov	sl, r2
 8001f10:	3208      	adds	r2, #8
 8001f12:	4690      	mov	r8, r2
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	e709      	b.n	8001d2c <__aeabi_dmul+0x4c>
 8001f18:	2400      	movs	r4, #0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	4b35      	ldr	r3, [pc, #212]	@ (8001ff4 <__aeabi_dmul+0x314>)
 8001f1e:	e735      	b.n	8001d8c <__aeabi_dmul+0xac>
 8001f20:	2300      	movs	r3, #0
 8001f22:	2480      	movs	r4, #128	@ 0x80
 8001f24:	469b      	mov	fp, r3
 8001f26:	0324      	lsls	r4, r4, #12
 8001f28:	4b32      	ldr	r3, [pc, #200]	@ (8001ff4 <__aeabi_dmul+0x314>)
 8001f2a:	e72f      	b.n	8001d8c <__aeabi_dmul+0xac>
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4641      	mov	r1, r8
 8001f30:	4311      	orrs	r1, r2
 8001f32:	2280      	movs	r2, #128	@ 0x80
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	4694      	mov	ip, r2
 8001f38:	002a      	movs	r2, r5
 8001f3a:	4462      	add	r2, ip
 8001f3c:	4688      	mov	r8, r1
 8001f3e:	9201      	str	r2, [sp, #4]
 8001f40:	290a      	cmp	r1, #10
 8001f42:	dd00      	ble.n	8001f46 <__aeabi_dmul+0x266>
 8001f44:	e752      	b.n	8001dec <__aeabi_dmul+0x10c>
 8001f46:	465a      	mov	r2, fp
 8001f48:	2000      	movs	r0, #0
 8001f4a:	9900      	ldr	r1, [sp, #0]
 8001f4c:	0004      	movs	r4, r0
 8001f4e:	404a      	eors	r2, r1
 8001f50:	4693      	mov	fp, r2
 8001f52:	2602      	movs	r6, #2
 8001f54:	e70b      	b.n	8001d6e <__aeabi_dmul+0x8e>
 8001f56:	220c      	movs	r2, #12
 8001f58:	001d      	movs	r5, r3
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	4681      	mov	r9, r0
 8001f5e:	4690      	mov	r8, r2
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	e6e3      	b.n	8001d2c <__aeabi_dmul+0x4c>
 8001f64:	2300      	movs	r3, #0
 8001f66:	469a      	mov	sl, r3
 8001f68:	3304      	adds	r3, #4
 8001f6a:	4698      	mov	r8, r3
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	2500      	movs	r5, #0
 8001f70:	9302      	str	r3, [sp, #8]
 8001f72:	e6db      	b.n	8001d2c <__aeabi_dmul+0x4c>
 8001f74:	4642      	mov	r2, r8
 8001f76:	3301      	adds	r3, #1
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	002b      	movs	r3, r5
 8001f7c:	4690      	mov	r8, r2
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	9201      	str	r2, [sp, #4]
 8001f82:	4642      	mov	r2, r8
 8001f84:	2400      	movs	r4, #0
 8001f86:	2000      	movs	r0, #0
 8001f88:	2601      	movs	r6, #1
 8001f8a:	2a0a      	cmp	r2, #10
 8001f8c:	dc00      	bgt.n	8001f90 <__aeabi_dmul+0x2b0>
 8001f8e:	e6ea      	b.n	8001d66 <__aeabi_dmul+0x86>
 8001f90:	e72c      	b.n	8001dec <__aeabi_dmul+0x10c>
 8001f92:	2201      	movs	r2, #1
 8001f94:	1ad2      	subs	r2, r2, r3
 8001f96:	2a38      	cmp	r2, #56	@ 0x38
 8001f98:	dd00      	ble.n	8001f9c <__aeabi_dmul+0x2bc>
 8001f9a:	e6f4      	b.n	8001d86 <__aeabi_dmul+0xa6>
 8001f9c:	2a1f      	cmp	r2, #31
 8001f9e:	dc00      	bgt.n	8001fa2 <__aeabi_dmul+0x2c2>
 8001fa0:	e12a      	b.n	80021f8 <__aeabi_dmul+0x518>
 8001fa2:	211f      	movs	r1, #31
 8001fa4:	4249      	negs	r1, r1
 8001fa6:	1acb      	subs	r3, r1, r3
 8001fa8:	0021      	movs	r1, r4
 8001faa:	40d9      	lsrs	r1, r3
 8001fac:	000b      	movs	r3, r1
 8001fae:	2a20      	cmp	r2, #32
 8001fb0:	d005      	beq.n	8001fbe <__aeabi_dmul+0x2de>
 8001fb2:	4a16      	ldr	r2, [pc, #88]	@ (800200c <__aeabi_dmul+0x32c>)
 8001fb4:	9d01      	ldr	r5, [sp, #4]
 8001fb6:	4694      	mov	ip, r2
 8001fb8:	4465      	add	r5, ip
 8001fba:	40ac      	lsls	r4, r5
 8001fbc:	4320      	orrs	r0, r4
 8001fbe:	1e42      	subs	r2, r0, #1
 8001fc0:	4190      	sbcs	r0, r2
 8001fc2:	4318      	orrs	r0, r3
 8001fc4:	2307      	movs	r3, #7
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	2400      	movs	r4, #0
 8001fca:	4001      	ands	r1, r0
 8001fcc:	4203      	tst	r3, r0
 8001fce:	d00c      	beq.n	8001fea <__aeabi_dmul+0x30a>
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	4003      	ands	r3, r0
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d100      	bne.n	8001fda <__aeabi_dmul+0x2fa>
 8001fd8:	e140      	b.n	800225c <__aeabi_dmul+0x57c>
 8001fda:	1d03      	adds	r3, r0, #4
 8001fdc:	4283      	cmp	r3, r0
 8001fde:	41a4      	sbcs	r4, r4
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	4264      	negs	r4, r4
 8001fe4:	0761      	lsls	r1, r4, #29
 8001fe6:	0264      	lsls	r4, r4, #9
 8001fe8:	0b24      	lsrs	r4, r4, #12
 8001fea:	08c2      	lsrs	r2, r0, #3
 8001fec:	2300      	movs	r3, #0
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	e6cc      	b.n	8001d8c <__aeabi_dmul+0xac>
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	000007ff 	.word	0x000007ff
 8001ff8:	fffffc01 	.word	0xfffffc01
 8001ffc:	000003ff 	.word	0x000003ff
 8002000:	feffffff 	.word	0xfeffffff
 8002004:	000007fe 	.word	0x000007fe
 8002008:	fffffc0d 	.word	0xfffffc0d
 800200c:	0000043e 	.word	0x0000043e
 8002010:	4649      	mov	r1, r9
 8002012:	464a      	mov	r2, r9
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	0c09      	lsrs	r1, r1, #16
 8002018:	000d      	movs	r5, r1
 800201a:	0c16      	lsrs	r6, r2, #16
 800201c:	0c02      	lsrs	r2, r0, #16
 800201e:	0400      	lsls	r0, r0, #16
 8002020:	0c00      	lsrs	r0, r0, #16
 8002022:	4345      	muls	r5, r0
 8002024:	46ac      	mov	ip, r5
 8002026:	0005      	movs	r5, r0
 8002028:	4375      	muls	r5, r6
 800202a:	46a8      	mov	r8, r5
 800202c:	0015      	movs	r5, r2
 800202e:	000f      	movs	r7, r1
 8002030:	4375      	muls	r5, r6
 8002032:	9200      	str	r2, [sp, #0]
 8002034:	9502      	str	r5, [sp, #8]
 8002036:	002a      	movs	r2, r5
 8002038:	9d00      	ldr	r5, [sp, #0]
 800203a:	436f      	muls	r7, r5
 800203c:	4665      	mov	r5, ip
 800203e:	0c2d      	lsrs	r5, r5, #16
 8002040:	46a9      	mov	r9, r5
 8002042:	4447      	add	r7, r8
 8002044:	444f      	add	r7, r9
 8002046:	45b8      	cmp	r8, r7
 8002048:	d905      	bls.n	8002056 <__aeabi_dmul+0x376>
 800204a:	0015      	movs	r5, r2
 800204c:	2280      	movs	r2, #128	@ 0x80
 800204e:	0252      	lsls	r2, r2, #9
 8002050:	4690      	mov	r8, r2
 8002052:	4445      	add	r5, r8
 8002054:	9502      	str	r5, [sp, #8]
 8002056:	0c3d      	lsrs	r5, r7, #16
 8002058:	9503      	str	r5, [sp, #12]
 800205a:	4665      	mov	r5, ip
 800205c:	042d      	lsls	r5, r5, #16
 800205e:	043f      	lsls	r7, r7, #16
 8002060:	0c2d      	lsrs	r5, r5, #16
 8002062:	46ac      	mov	ip, r5
 8002064:	003d      	movs	r5, r7
 8002066:	4465      	add	r5, ip
 8002068:	9504      	str	r5, [sp, #16]
 800206a:	0c25      	lsrs	r5, r4, #16
 800206c:	0424      	lsls	r4, r4, #16
 800206e:	0c24      	lsrs	r4, r4, #16
 8002070:	46ac      	mov	ip, r5
 8002072:	0025      	movs	r5, r4
 8002074:	4375      	muls	r5, r6
 8002076:	46a8      	mov	r8, r5
 8002078:	4665      	mov	r5, ip
 800207a:	000f      	movs	r7, r1
 800207c:	4369      	muls	r1, r5
 800207e:	4441      	add	r1, r8
 8002080:	4689      	mov	r9, r1
 8002082:	4367      	muls	r7, r4
 8002084:	0c39      	lsrs	r1, r7, #16
 8002086:	4449      	add	r1, r9
 8002088:	436e      	muls	r6, r5
 800208a:	4588      	cmp	r8, r1
 800208c:	d903      	bls.n	8002096 <__aeabi_dmul+0x3b6>
 800208e:	2280      	movs	r2, #128	@ 0x80
 8002090:	0252      	lsls	r2, r2, #9
 8002092:	4690      	mov	r8, r2
 8002094:	4446      	add	r6, r8
 8002096:	0c0d      	lsrs	r5, r1, #16
 8002098:	46a8      	mov	r8, r5
 800209a:	0035      	movs	r5, r6
 800209c:	4445      	add	r5, r8
 800209e:	9505      	str	r5, [sp, #20]
 80020a0:	9d03      	ldr	r5, [sp, #12]
 80020a2:	043f      	lsls	r7, r7, #16
 80020a4:	46a8      	mov	r8, r5
 80020a6:	0c3f      	lsrs	r7, r7, #16
 80020a8:	0409      	lsls	r1, r1, #16
 80020aa:	19c9      	adds	r1, r1, r7
 80020ac:	4488      	add	r8, r1
 80020ae:	4645      	mov	r5, r8
 80020b0:	9503      	str	r5, [sp, #12]
 80020b2:	4655      	mov	r5, sl
 80020b4:	042e      	lsls	r6, r5, #16
 80020b6:	0c36      	lsrs	r6, r6, #16
 80020b8:	0c2f      	lsrs	r7, r5, #16
 80020ba:	0035      	movs	r5, r6
 80020bc:	4345      	muls	r5, r0
 80020be:	4378      	muls	r0, r7
 80020c0:	4681      	mov	r9, r0
 80020c2:	0038      	movs	r0, r7
 80020c4:	46a8      	mov	r8, r5
 80020c6:	0c2d      	lsrs	r5, r5, #16
 80020c8:	46aa      	mov	sl, r5
 80020ca:	9a00      	ldr	r2, [sp, #0]
 80020cc:	4350      	muls	r0, r2
 80020ce:	4372      	muls	r2, r6
 80020d0:	444a      	add	r2, r9
 80020d2:	4452      	add	r2, sl
 80020d4:	4591      	cmp	r9, r2
 80020d6:	d903      	bls.n	80020e0 <__aeabi_dmul+0x400>
 80020d8:	2580      	movs	r5, #128	@ 0x80
 80020da:	026d      	lsls	r5, r5, #9
 80020dc:	46a9      	mov	r9, r5
 80020de:	4448      	add	r0, r9
 80020e0:	0c15      	lsrs	r5, r2, #16
 80020e2:	46a9      	mov	r9, r5
 80020e4:	4645      	mov	r5, r8
 80020e6:	042d      	lsls	r5, r5, #16
 80020e8:	0c2d      	lsrs	r5, r5, #16
 80020ea:	46a8      	mov	r8, r5
 80020ec:	4665      	mov	r5, ip
 80020ee:	437d      	muls	r5, r7
 80020f0:	0412      	lsls	r2, r2, #16
 80020f2:	4448      	add	r0, r9
 80020f4:	4490      	add	r8, r2
 80020f6:	46a9      	mov	r9, r5
 80020f8:	0032      	movs	r2, r6
 80020fa:	4665      	mov	r5, ip
 80020fc:	4362      	muls	r2, r4
 80020fe:	436e      	muls	r6, r5
 8002100:	437c      	muls	r4, r7
 8002102:	0c17      	lsrs	r7, r2, #16
 8002104:	1936      	adds	r6, r6, r4
 8002106:	19bf      	adds	r7, r7, r6
 8002108:	42bc      	cmp	r4, r7
 800210a:	d903      	bls.n	8002114 <__aeabi_dmul+0x434>
 800210c:	2480      	movs	r4, #128	@ 0x80
 800210e:	0264      	lsls	r4, r4, #9
 8002110:	46a4      	mov	ip, r4
 8002112:	44e1      	add	r9, ip
 8002114:	9c02      	ldr	r4, [sp, #8]
 8002116:	9e03      	ldr	r6, [sp, #12]
 8002118:	46a4      	mov	ip, r4
 800211a:	9d05      	ldr	r5, [sp, #20]
 800211c:	4466      	add	r6, ip
 800211e:	428e      	cmp	r6, r1
 8002120:	4189      	sbcs	r1, r1
 8002122:	46ac      	mov	ip, r5
 8002124:	0412      	lsls	r2, r2, #16
 8002126:	043c      	lsls	r4, r7, #16
 8002128:	0c12      	lsrs	r2, r2, #16
 800212a:	18a2      	adds	r2, r4, r2
 800212c:	4462      	add	r2, ip
 800212e:	4249      	negs	r1, r1
 8002130:	1854      	adds	r4, r2, r1
 8002132:	4446      	add	r6, r8
 8002134:	46a4      	mov	ip, r4
 8002136:	4546      	cmp	r6, r8
 8002138:	41a4      	sbcs	r4, r4
 800213a:	4682      	mov	sl, r0
 800213c:	4264      	negs	r4, r4
 800213e:	46a0      	mov	r8, r4
 8002140:	42aa      	cmp	r2, r5
 8002142:	4192      	sbcs	r2, r2
 8002144:	458c      	cmp	ip, r1
 8002146:	4189      	sbcs	r1, r1
 8002148:	44e2      	add	sl, ip
 800214a:	44d0      	add	r8, sl
 800214c:	4249      	negs	r1, r1
 800214e:	4252      	negs	r2, r2
 8002150:	430a      	orrs	r2, r1
 8002152:	45a0      	cmp	r8, r4
 8002154:	41a4      	sbcs	r4, r4
 8002156:	4582      	cmp	sl, r0
 8002158:	4189      	sbcs	r1, r1
 800215a:	4264      	negs	r4, r4
 800215c:	4249      	negs	r1, r1
 800215e:	430c      	orrs	r4, r1
 8002160:	4641      	mov	r1, r8
 8002162:	0c3f      	lsrs	r7, r7, #16
 8002164:	19d2      	adds	r2, r2, r7
 8002166:	1912      	adds	r2, r2, r4
 8002168:	0dcc      	lsrs	r4, r1, #23
 800216a:	9904      	ldr	r1, [sp, #16]
 800216c:	0270      	lsls	r0, r6, #9
 800216e:	4308      	orrs	r0, r1
 8002170:	1e41      	subs	r1, r0, #1
 8002172:	4188      	sbcs	r0, r1
 8002174:	4641      	mov	r1, r8
 8002176:	444a      	add	r2, r9
 8002178:	0df6      	lsrs	r6, r6, #23
 800217a:	0252      	lsls	r2, r2, #9
 800217c:	4330      	orrs	r0, r6
 800217e:	0249      	lsls	r1, r1, #9
 8002180:	4314      	orrs	r4, r2
 8002182:	4308      	orrs	r0, r1
 8002184:	01d2      	lsls	r2, r2, #7
 8002186:	d535      	bpl.n	80021f4 <__aeabi_dmul+0x514>
 8002188:	2201      	movs	r2, #1
 800218a:	0843      	lsrs	r3, r0, #1
 800218c:	4002      	ands	r2, r0
 800218e:	4313      	orrs	r3, r2
 8002190:	07e0      	lsls	r0, r4, #31
 8002192:	4318      	orrs	r0, r3
 8002194:	0864      	lsrs	r4, r4, #1
 8002196:	e634      	b.n	8001e02 <__aeabi_dmul+0x122>
 8002198:	9b00      	ldr	r3, [sp, #0]
 800219a:	46a2      	mov	sl, r4
 800219c:	469b      	mov	fp, r3
 800219e:	4681      	mov	r9, r0
 80021a0:	2480      	movs	r4, #128	@ 0x80
 80021a2:	4653      	mov	r3, sl
 80021a4:	0324      	lsls	r4, r4, #12
 80021a6:	431c      	orrs	r4, r3
 80021a8:	0324      	lsls	r4, r4, #12
 80021aa:	464a      	mov	r2, r9
 80021ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002268 <__aeabi_dmul+0x588>)
 80021ae:	0b24      	lsrs	r4, r4, #12
 80021b0:	e5ec      	b.n	8001d8c <__aeabi_dmul+0xac>
 80021b2:	f000 fd75 	bl	8002ca0 <__clzsi2>
 80021b6:	2315      	movs	r3, #21
 80021b8:	469c      	mov	ip, r3
 80021ba:	4484      	add	ip, r0
 80021bc:	0002      	movs	r2, r0
 80021be:	4663      	mov	r3, ip
 80021c0:	3220      	adds	r2, #32
 80021c2:	2b1c      	cmp	r3, #28
 80021c4:	dc00      	bgt.n	80021c8 <__aeabi_dmul+0x4e8>
 80021c6:	e684      	b.n	8001ed2 <__aeabi_dmul+0x1f2>
 80021c8:	2300      	movs	r3, #0
 80021ca:	4699      	mov	r9, r3
 80021cc:	0023      	movs	r3, r4
 80021ce:	3808      	subs	r0, #8
 80021d0:	4083      	lsls	r3, r0
 80021d2:	469a      	mov	sl, r3
 80021d4:	e68e      	b.n	8001ef4 <__aeabi_dmul+0x214>
 80021d6:	f000 fd63 	bl	8002ca0 <__clzsi2>
 80021da:	0002      	movs	r2, r0
 80021dc:	0003      	movs	r3, r0
 80021de:	3215      	adds	r2, #21
 80021e0:	3320      	adds	r3, #32
 80021e2:	2a1c      	cmp	r2, #28
 80021e4:	dc00      	bgt.n	80021e8 <__aeabi_dmul+0x508>
 80021e6:	e64e      	b.n	8001e86 <__aeabi_dmul+0x1a6>
 80021e8:	0002      	movs	r2, r0
 80021ea:	0034      	movs	r4, r6
 80021ec:	3a08      	subs	r2, #8
 80021ee:	2000      	movs	r0, #0
 80021f0:	4094      	lsls	r4, r2
 80021f2:	e652      	b.n	8001e9a <__aeabi_dmul+0x1ba>
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	e604      	b.n	8001e02 <__aeabi_dmul+0x122>
 80021f8:	4b1c      	ldr	r3, [pc, #112]	@ (800226c <__aeabi_dmul+0x58c>)
 80021fa:	0021      	movs	r1, r4
 80021fc:	469c      	mov	ip, r3
 80021fe:	0003      	movs	r3, r0
 8002200:	9d01      	ldr	r5, [sp, #4]
 8002202:	40d3      	lsrs	r3, r2
 8002204:	4465      	add	r5, ip
 8002206:	40a9      	lsls	r1, r5
 8002208:	4319      	orrs	r1, r3
 800220a:	0003      	movs	r3, r0
 800220c:	40ab      	lsls	r3, r5
 800220e:	1e58      	subs	r0, r3, #1
 8002210:	4183      	sbcs	r3, r0
 8002212:	4319      	orrs	r1, r3
 8002214:	0008      	movs	r0, r1
 8002216:	40d4      	lsrs	r4, r2
 8002218:	074b      	lsls	r3, r1, #29
 800221a:	d009      	beq.n	8002230 <__aeabi_dmul+0x550>
 800221c:	230f      	movs	r3, #15
 800221e:	400b      	ands	r3, r1
 8002220:	2b04      	cmp	r3, #4
 8002222:	d005      	beq.n	8002230 <__aeabi_dmul+0x550>
 8002224:	1d0b      	adds	r3, r1, #4
 8002226:	428b      	cmp	r3, r1
 8002228:	4180      	sbcs	r0, r0
 800222a:	4240      	negs	r0, r0
 800222c:	1824      	adds	r4, r4, r0
 800222e:	0018      	movs	r0, r3
 8002230:	0223      	lsls	r3, r4, #8
 8002232:	d400      	bmi.n	8002236 <__aeabi_dmul+0x556>
 8002234:	e6d6      	b.n	8001fe4 <__aeabi_dmul+0x304>
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	2200      	movs	r2, #0
 800223c:	e5a6      	b.n	8001d8c <__aeabi_dmul+0xac>
 800223e:	290f      	cmp	r1, #15
 8002240:	d1aa      	bne.n	8002198 <__aeabi_dmul+0x4b8>
 8002242:	2380      	movs	r3, #128	@ 0x80
 8002244:	4652      	mov	r2, sl
 8002246:	031b      	lsls	r3, r3, #12
 8002248:	421a      	tst	r2, r3
 800224a:	d0a9      	beq.n	80021a0 <__aeabi_dmul+0x4c0>
 800224c:	421c      	tst	r4, r3
 800224e:	d1a7      	bne.n	80021a0 <__aeabi_dmul+0x4c0>
 8002250:	431c      	orrs	r4, r3
 8002252:	9b00      	ldr	r3, [sp, #0]
 8002254:	0002      	movs	r2, r0
 8002256:	469b      	mov	fp, r3
 8002258:	4b03      	ldr	r3, [pc, #12]	@ (8002268 <__aeabi_dmul+0x588>)
 800225a:	e597      	b.n	8001d8c <__aeabi_dmul+0xac>
 800225c:	2400      	movs	r4, #0
 800225e:	e6c1      	b.n	8001fe4 <__aeabi_dmul+0x304>
 8002260:	2400      	movs	r4, #0
 8002262:	4b01      	ldr	r3, [pc, #4]	@ (8002268 <__aeabi_dmul+0x588>)
 8002264:	0022      	movs	r2, r4
 8002266:	e591      	b.n	8001d8c <__aeabi_dmul+0xac>
 8002268:	000007ff 	.word	0x000007ff
 800226c:	0000041e 	.word	0x0000041e

08002270 <__aeabi_dsub>:
 8002270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002272:	464e      	mov	r6, r9
 8002274:	4645      	mov	r5, r8
 8002276:	46de      	mov	lr, fp
 8002278:	4657      	mov	r7, sl
 800227a:	b5e0      	push	{r5, r6, r7, lr}
 800227c:	b085      	sub	sp, #20
 800227e:	9000      	str	r0, [sp, #0]
 8002280:	9101      	str	r1, [sp, #4]
 8002282:	030c      	lsls	r4, r1, #12
 8002284:	004f      	lsls	r7, r1, #1
 8002286:	0fce      	lsrs	r6, r1, #31
 8002288:	0a61      	lsrs	r1, r4, #9
 800228a:	9c00      	ldr	r4, [sp, #0]
 800228c:	46b0      	mov	r8, r6
 800228e:	0f64      	lsrs	r4, r4, #29
 8002290:	430c      	orrs	r4, r1
 8002292:	9900      	ldr	r1, [sp, #0]
 8002294:	0d7f      	lsrs	r7, r7, #21
 8002296:	00c8      	lsls	r0, r1, #3
 8002298:	0011      	movs	r1, r2
 800229a:	001a      	movs	r2, r3
 800229c:	031b      	lsls	r3, r3, #12
 800229e:	469c      	mov	ip, r3
 80022a0:	9100      	str	r1, [sp, #0]
 80022a2:	9201      	str	r2, [sp, #4]
 80022a4:	0051      	lsls	r1, r2, #1
 80022a6:	0d4b      	lsrs	r3, r1, #21
 80022a8:	4699      	mov	r9, r3
 80022aa:	9b01      	ldr	r3, [sp, #4]
 80022ac:	9d00      	ldr	r5, [sp, #0]
 80022ae:	0fd9      	lsrs	r1, r3, #31
 80022b0:	4663      	mov	r3, ip
 80022b2:	0f6a      	lsrs	r2, r5, #29
 80022b4:	0a5b      	lsrs	r3, r3, #9
 80022b6:	4313      	orrs	r3, r2
 80022b8:	00ea      	lsls	r2, r5, #3
 80022ba:	4694      	mov	ip, r2
 80022bc:	4693      	mov	fp, r2
 80022be:	4ac1      	ldr	r2, [pc, #772]	@ (80025c4 <__aeabi_dsub+0x354>)
 80022c0:	9003      	str	r0, [sp, #12]
 80022c2:	9302      	str	r3, [sp, #8]
 80022c4:	4591      	cmp	r9, r2
 80022c6:	d100      	bne.n	80022ca <__aeabi_dsub+0x5a>
 80022c8:	e0cd      	b.n	8002466 <__aeabi_dsub+0x1f6>
 80022ca:	2501      	movs	r5, #1
 80022cc:	4069      	eors	r1, r5
 80022ce:	464d      	mov	r5, r9
 80022d0:	1b7d      	subs	r5, r7, r5
 80022d2:	46aa      	mov	sl, r5
 80022d4:	428e      	cmp	r6, r1
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x6a>
 80022d8:	e080      	b.n	80023dc <__aeabi_dsub+0x16c>
 80022da:	2d00      	cmp	r5, #0
 80022dc:	dc00      	bgt.n	80022e0 <__aeabi_dsub+0x70>
 80022de:	e335      	b.n	800294c <__aeabi_dsub+0x6dc>
 80022e0:	4649      	mov	r1, r9
 80022e2:	2900      	cmp	r1, #0
 80022e4:	d100      	bne.n	80022e8 <__aeabi_dsub+0x78>
 80022e6:	e0df      	b.n	80024a8 <__aeabi_dsub+0x238>
 80022e8:	4297      	cmp	r7, r2
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x7e>
 80022ec:	e194      	b.n	8002618 <__aeabi_dsub+0x3a8>
 80022ee:	4652      	mov	r2, sl
 80022f0:	2501      	movs	r5, #1
 80022f2:	2a38      	cmp	r2, #56	@ 0x38
 80022f4:	dc19      	bgt.n	800232a <__aeabi_dsub+0xba>
 80022f6:	2280      	movs	r2, #128	@ 0x80
 80022f8:	9b02      	ldr	r3, [sp, #8]
 80022fa:	0412      	lsls	r2, r2, #16
 80022fc:	4313      	orrs	r3, r2
 80022fe:	9302      	str	r3, [sp, #8]
 8002300:	4652      	mov	r2, sl
 8002302:	2a1f      	cmp	r2, #31
 8002304:	dd00      	ble.n	8002308 <__aeabi_dsub+0x98>
 8002306:	e1e3      	b.n	80026d0 <__aeabi_dsub+0x460>
 8002308:	4653      	mov	r3, sl
 800230a:	2220      	movs	r2, #32
 800230c:	4661      	mov	r1, ip
 800230e:	9d02      	ldr	r5, [sp, #8]
 8002310:	1ad2      	subs	r2, r2, r3
 8002312:	4095      	lsls	r5, r2
 8002314:	40d9      	lsrs	r1, r3
 8002316:	430d      	orrs	r5, r1
 8002318:	4661      	mov	r1, ip
 800231a:	4091      	lsls	r1, r2
 800231c:	000a      	movs	r2, r1
 800231e:	1e51      	subs	r1, r2, #1
 8002320:	418a      	sbcs	r2, r1
 8002322:	4315      	orrs	r5, r2
 8002324:	9a02      	ldr	r2, [sp, #8]
 8002326:	40da      	lsrs	r2, r3
 8002328:	1aa4      	subs	r4, r4, r2
 800232a:	1b45      	subs	r5, r0, r5
 800232c:	42a8      	cmp	r0, r5
 800232e:	4180      	sbcs	r0, r0
 8002330:	4240      	negs	r0, r0
 8002332:	1a24      	subs	r4, r4, r0
 8002334:	0223      	lsls	r3, r4, #8
 8002336:	d400      	bmi.n	800233a <__aeabi_dsub+0xca>
 8002338:	e13d      	b.n	80025b6 <__aeabi_dsub+0x346>
 800233a:	0264      	lsls	r4, r4, #9
 800233c:	0a64      	lsrs	r4, r4, #9
 800233e:	2c00      	cmp	r4, #0
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0xd4>
 8002342:	e147      	b.n	80025d4 <__aeabi_dsub+0x364>
 8002344:	0020      	movs	r0, r4
 8002346:	f000 fcab 	bl	8002ca0 <__clzsi2>
 800234a:	0003      	movs	r3, r0
 800234c:	3b08      	subs	r3, #8
 800234e:	2120      	movs	r1, #32
 8002350:	0028      	movs	r0, r5
 8002352:	1aca      	subs	r2, r1, r3
 8002354:	40d0      	lsrs	r0, r2
 8002356:	409c      	lsls	r4, r3
 8002358:	0002      	movs	r2, r0
 800235a:	409d      	lsls	r5, r3
 800235c:	4322      	orrs	r2, r4
 800235e:	429f      	cmp	r7, r3
 8002360:	dd00      	ble.n	8002364 <__aeabi_dsub+0xf4>
 8002362:	e177      	b.n	8002654 <__aeabi_dsub+0x3e4>
 8002364:	1bd8      	subs	r0, r3, r7
 8002366:	3001      	adds	r0, #1
 8002368:	1a09      	subs	r1, r1, r0
 800236a:	002c      	movs	r4, r5
 800236c:	408d      	lsls	r5, r1
 800236e:	40c4      	lsrs	r4, r0
 8002370:	1e6b      	subs	r3, r5, #1
 8002372:	419d      	sbcs	r5, r3
 8002374:	0013      	movs	r3, r2
 8002376:	40c2      	lsrs	r2, r0
 8002378:	408b      	lsls	r3, r1
 800237a:	4325      	orrs	r5, r4
 800237c:	2700      	movs	r7, #0
 800237e:	0014      	movs	r4, r2
 8002380:	431d      	orrs	r5, r3
 8002382:	076b      	lsls	r3, r5, #29
 8002384:	d009      	beq.n	800239a <__aeabi_dsub+0x12a>
 8002386:	230f      	movs	r3, #15
 8002388:	402b      	ands	r3, r5
 800238a:	2b04      	cmp	r3, #4
 800238c:	d005      	beq.n	800239a <__aeabi_dsub+0x12a>
 800238e:	1d2b      	adds	r3, r5, #4
 8002390:	42ab      	cmp	r3, r5
 8002392:	41ad      	sbcs	r5, r5
 8002394:	426d      	negs	r5, r5
 8002396:	1964      	adds	r4, r4, r5
 8002398:	001d      	movs	r5, r3
 800239a:	0223      	lsls	r3, r4, #8
 800239c:	d400      	bmi.n	80023a0 <__aeabi_dsub+0x130>
 800239e:	e140      	b.n	8002622 <__aeabi_dsub+0x3b2>
 80023a0:	4a88      	ldr	r2, [pc, #544]	@ (80025c4 <__aeabi_dsub+0x354>)
 80023a2:	3701      	adds	r7, #1
 80023a4:	4297      	cmp	r7, r2
 80023a6:	d100      	bne.n	80023aa <__aeabi_dsub+0x13a>
 80023a8:	e101      	b.n	80025ae <__aeabi_dsub+0x33e>
 80023aa:	2601      	movs	r6, #1
 80023ac:	4643      	mov	r3, r8
 80023ae:	4986      	ldr	r1, [pc, #536]	@ (80025c8 <__aeabi_dsub+0x358>)
 80023b0:	08ed      	lsrs	r5, r5, #3
 80023b2:	4021      	ands	r1, r4
 80023b4:	074a      	lsls	r2, r1, #29
 80023b6:	432a      	orrs	r2, r5
 80023b8:	057c      	lsls	r4, r7, #21
 80023ba:	024d      	lsls	r5, r1, #9
 80023bc:	0b2d      	lsrs	r5, r5, #12
 80023be:	0d64      	lsrs	r4, r4, #21
 80023c0:	401e      	ands	r6, r3
 80023c2:	0524      	lsls	r4, r4, #20
 80023c4:	432c      	orrs	r4, r5
 80023c6:	07f6      	lsls	r6, r6, #31
 80023c8:	4334      	orrs	r4, r6
 80023ca:	0010      	movs	r0, r2
 80023cc:	0021      	movs	r1, r4
 80023ce:	b005      	add	sp, #20
 80023d0:	bcf0      	pop	{r4, r5, r6, r7}
 80023d2:	46bb      	mov	fp, r7
 80023d4:	46b2      	mov	sl, r6
 80023d6:	46a9      	mov	r9, r5
 80023d8:	46a0      	mov	r8, r4
 80023da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023dc:	2d00      	cmp	r5, #0
 80023de:	dc00      	bgt.n	80023e2 <__aeabi_dsub+0x172>
 80023e0:	e2d0      	b.n	8002984 <__aeabi_dsub+0x714>
 80023e2:	4649      	mov	r1, r9
 80023e4:	2900      	cmp	r1, #0
 80023e6:	d000      	beq.n	80023ea <__aeabi_dsub+0x17a>
 80023e8:	e0d4      	b.n	8002594 <__aeabi_dsub+0x324>
 80023ea:	4661      	mov	r1, ip
 80023ec:	9b02      	ldr	r3, [sp, #8]
 80023ee:	4319      	orrs	r1, r3
 80023f0:	d100      	bne.n	80023f4 <__aeabi_dsub+0x184>
 80023f2:	e12b      	b.n	800264c <__aeabi_dsub+0x3dc>
 80023f4:	1e69      	subs	r1, r5, #1
 80023f6:	2d01      	cmp	r5, #1
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x18c>
 80023fa:	e1d9      	b.n	80027b0 <__aeabi_dsub+0x540>
 80023fc:	4295      	cmp	r5, r2
 80023fe:	d100      	bne.n	8002402 <__aeabi_dsub+0x192>
 8002400:	e10a      	b.n	8002618 <__aeabi_dsub+0x3a8>
 8002402:	2501      	movs	r5, #1
 8002404:	2938      	cmp	r1, #56	@ 0x38
 8002406:	dc17      	bgt.n	8002438 <__aeabi_dsub+0x1c8>
 8002408:	468a      	mov	sl, r1
 800240a:	4653      	mov	r3, sl
 800240c:	2b1f      	cmp	r3, #31
 800240e:	dd00      	ble.n	8002412 <__aeabi_dsub+0x1a2>
 8002410:	e1e7      	b.n	80027e2 <__aeabi_dsub+0x572>
 8002412:	2220      	movs	r2, #32
 8002414:	1ad2      	subs	r2, r2, r3
 8002416:	9b02      	ldr	r3, [sp, #8]
 8002418:	4661      	mov	r1, ip
 800241a:	4093      	lsls	r3, r2
 800241c:	001d      	movs	r5, r3
 800241e:	4653      	mov	r3, sl
 8002420:	40d9      	lsrs	r1, r3
 8002422:	4663      	mov	r3, ip
 8002424:	4093      	lsls	r3, r2
 8002426:	001a      	movs	r2, r3
 8002428:	430d      	orrs	r5, r1
 800242a:	1e51      	subs	r1, r2, #1
 800242c:	418a      	sbcs	r2, r1
 800242e:	4653      	mov	r3, sl
 8002430:	4315      	orrs	r5, r2
 8002432:	9a02      	ldr	r2, [sp, #8]
 8002434:	40da      	lsrs	r2, r3
 8002436:	18a4      	adds	r4, r4, r2
 8002438:	182d      	adds	r5, r5, r0
 800243a:	4285      	cmp	r5, r0
 800243c:	4180      	sbcs	r0, r0
 800243e:	4240      	negs	r0, r0
 8002440:	1824      	adds	r4, r4, r0
 8002442:	0223      	lsls	r3, r4, #8
 8002444:	d400      	bmi.n	8002448 <__aeabi_dsub+0x1d8>
 8002446:	e0b6      	b.n	80025b6 <__aeabi_dsub+0x346>
 8002448:	4b5e      	ldr	r3, [pc, #376]	@ (80025c4 <__aeabi_dsub+0x354>)
 800244a:	3701      	adds	r7, #1
 800244c:	429f      	cmp	r7, r3
 800244e:	d100      	bne.n	8002452 <__aeabi_dsub+0x1e2>
 8002450:	e0ad      	b.n	80025ae <__aeabi_dsub+0x33e>
 8002452:	2101      	movs	r1, #1
 8002454:	4b5c      	ldr	r3, [pc, #368]	@ (80025c8 <__aeabi_dsub+0x358>)
 8002456:	086a      	lsrs	r2, r5, #1
 8002458:	401c      	ands	r4, r3
 800245a:	4029      	ands	r1, r5
 800245c:	430a      	orrs	r2, r1
 800245e:	07e5      	lsls	r5, r4, #31
 8002460:	4315      	orrs	r5, r2
 8002462:	0864      	lsrs	r4, r4, #1
 8002464:	e78d      	b.n	8002382 <__aeabi_dsub+0x112>
 8002466:	4a59      	ldr	r2, [pc, #356]	@ (80025cc <__aeabi_dsub+0x35c>)
 8002468:	9b02      	ldr	r3, [sp, #8]
 800246a:	4692      	mov	sl, r2
 800246c:	4662      	mov	r2, ip
 800246e:	44ba      	add	sl, r7
 8002470:	431a      	orrs	r2, r3
 8002472:	d02c      	beq.n	80024ce <__aeabi_dsub+0x25e>
 8002474:	428e      	cmp	r6, r1
 8002476:	d02e      	beq.n	80024d6 <__aeabi_dsub+0x266>
 8002478:	4652      	mov	r2, sl
 800247a:	2a00      	cmp	r2, #0
 800247c:	d060      	beq.n	8002540 <__aeabi_dsub+0x2d0>
 800247e:	2f00      	cmp	r7, #0
 8002480:	d100      	bne.n	8002484 <__aeabi_dsub+0x214>
 8002482:	e0db      	b.n	800263c <__aeabi_dsub+0x3cc>
 8002484:	4663      	mov	r3, ip
 8002486:	000e      	movs	r6, r1
 8002488:	9c02      	ldr	r4, [sp, #8]
 800248a:	08d8      	lsrs	r0, r3, #3
 800248c:	0762      	lsls	r2, r4, #29
 800248e:	4302      	orrs	r2, r0
 8002490:	08e4      	lsrs	r4, r4, #3
 8002492:	0013      	movs	r3, r2
 8002494:	4323      	orrs	r3, r4
 8002496:	d100      	bne.n	800249a <__aeabi_dsub+0x22a>
 8002498:	e254      	b.n	8002944 <__aeabi_dsub+0x6d4>
 800249a:	2580      	movs	r5, #128	@ 0x80
 800249c:	032d      	lsls	r5, r5, #12
 800249e:	4325      	orrs	r5, r4
 80024a0:	032d      	lsls	r5, r5, #12
 80024a2:	4c48      	ldr	r4, [pc, #288]	@ (80025c4 <__aeabi_dsub+0x354>)
 80024a4:	0b2d      	lsrs	r5, r5, #12
 80024a6:	e78c      	b.n	80023c2 <__aeabi_dsub+0x152>
 80024a8:	4661      	mov	r1, ip
 80024aa:	9b02      	ldr	r3, [sp, #8]
 80024ac:	4319      	orrs	r1, r3
 80024ae:	d100      	bne.n	80024b2 <__aeabi_dsub+0x242>
 80024b0:	e0cc      	b.n	800264c <__aeabi_dsub+0x3dc>
 80024b2:	0029      	movs	r1, r5
 80024b4:	3901      	subs	r1, #1
 80024b6:	2d01      	cmp	r5, #1
 80024b8:	d100      	bne.n	80024bc <__aeabi_dsub+0x24c>
 80024ba:	e188      	b.n	80027ce <__aeabi_dsub+0x55e>
 80024bc:	4295      	cmp	r5, r2
 80024be:	d100      	bne.n	80024c2 <__aeabi_dsub+0x252>
 80024c0:	e0aa      	b.n	8002618 <__aeabi_dsub+0x3a8>
 80024c2:	2501      	movs	r5, #1
 80024c4:	2938      	cmp	r1, #56	@ 0x38
 80024c6:	dd00      	ble.n	80024ca <__aeabi_dsub+0x25a>
 80024c8:	e72f      	b.n	800232a <__aeabi_dsub+0xba>
 80024ca:	468a      	mov	sl, r1
 80024cc:	e718      	b.n	8002300 <__aeabi_dsub+0x90>
 80024ce:	2201      	movs	r2, #1
 80024d0:	4051      	eors	r1, r2
 80024d2:	428e      	cmp	r6, r1
 80024d4:	d1d0      	bne.n	8002478 <__aeabi_dsub+0x208>
 80024d6:	4653      	mov	r3, sl
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d100      	bne.n	80024de <__aeabi_dsub+0x26e>
 80024dc:	e0be      	b.n	800265c <__aeabi_dsub+0x3ec>
 80024de:	2f00      	cmp	r7, #0
 80024e0:	d000      	beq.n	80024e4 <__aeabi_dsub+0x274>
 80024e2:	e138      	b.n	8002756 <__aeabi_dsub+0x4e6>
 80024e4:	46ca      	mov	sl, r9
 80024e6:	0022      	movs	r2, r4
 80024e8:	4302      	orrs	r2, r0
 80024ea:	d100      	bne.n	80024ee <__aeabi_dsub+0x27e>
 80024ec:	e1e2      	b.n	80028b4 <__aeabi_dsub+0x644>
 80024ee:	4653      	mov	r3, sl
 80024f0:	1e59      	subs	r1, r3, #1
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dsub+0x288>
 80024f6:	e20d      	b.n	8002914 <__aeabi_dsub+0x6a4>
 80024f8:	4a32      	ldr	r2, [pc, #200]	@ (80025c4 <__aeabi_dsub+0x354>)
 80024fa:	4592      	cmp	sl, r2
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x290>
 80024fe:	e1d2      	b.n	80028a6 <__aeabi_dsub+0x636>
 8002500:	2701      	movs	r7, #1
 8002502:	2938      	cmp	r1, #56	@ 0x38
 8002504:	dc13      	bgt.n	800252e <__aeabi_dsub+0x2be>
 8002506:	291f      	cmp	r1, #31
 8002508:	dd00      	ble.n	800250c <__aeabi_dsub+0x29c>
 800250a:	e1ee      	b.n	80028ea <__aeabi_dsub+0x67a>
 800250c:	2220      	movs	r2, #32
 800250e:	9b02      	ldr	r3, [sp, #8]
 8002510:	1a52      	subs	r2, r2, r1
 8002512:	0025      	movs	r5, r4
 8002514:	0007      	movs	r7, r0
 8002516:	469a      	mov	sl, r3
 8002518:	40cc      	lsrs	r4, r1
 800251a:	4090      	lsls	r0, r2
 800251c:	4095      	lsls	r5, r2
 800251e:	40cf      	lsrs	r7, r1
 8002520:	44a2      	add	sl, r4
 8002522:	1e42      	subs	r2, r0, #1
 8002524:	4190      	sbcs	r0, r2
 8002526:	4653      	mov	r3, sl
 8002528:	432f      	orrs	r7, r5
 800252a:	4307      	orrs	r7, r0
 800252c:	9302      	str	r3, [sp, #8]
 800252e:	003d      	movs	r5, r7
 8002530:	4465      	add	r5, ip
 8002532:	4565      	cmp	r5, ip
 8002534:	4192      	sbcs	r2, r2
 8002536:	9b02      	ldr	r3, [sp, #8]
 8002538:	4252      	negs	r2, r2
 800253a:	464f      	mov	r7, r9
 800253c:	18d4      	adds	r4, r2, r3
 800253e:	e780      	b.n	8002442 <__aeabi_dsub+0x1d2>
 8002540:	4a23      	ldr	r2, [pc, #140]	@ (80025d0 <__aeabi_dsub+0x360>)
 8002542:	1c7d      	adds	r5, r7, #1
 8002544:	4215      	tst	r5, r2
 8002546:	d000      	beq.n	800254a <__aeabi_dsub+0x2da>
 8002548:	e0aa      	b.n	80026a0 <__aeabi_dsub+0x430>
 800254a:	4662      	mov	r2, ip
 800254c:	0025      	movs	r5, r4
 800254e:	9b02      	ldr	r3, [sp, #8]
 8002550:	4305      	orrs	r5, r0
 8002552:	431a      	orrs	r2, r3
 8002554:	2f00      	cmp	r7, #0
 8002556:	d000      	beq.n	800255a <__aeabi_dsub+0x2ea>
 8002558:	e0f5      	b.n	8002746 <__aeabi_dsub+0x4d6>
 800255a:	2d00      	cmp	r5, #0
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0x2f0>
 800255e:	e16b      	b.n	8002838 <__aeabi_dsub+0x5c8>
 8002560:	2a00      	cmp	r2, #0
 8002562:	d100      	bne.n	8002566 <__aeabi_dsub+0x2f6>
 8002564:	e152      	b.n	800280c <__aeabi_dsub+0x59c>
 8002566:	4663      	mov	r3, ip
 8002568:	1ac5      	subs	r5, r0, r3
 800256a:	9b02      	ldr	r3, [sp, #8]
 800256c:	1ae2      	subs	r2, r4, r3
 800256e:	42a8      	cmp	r0, r5
 8002570:	419b      	sbcs	r3, r3
 8002572:	425b      	negs	r3, r3
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	021a      	lsls	r2, r3, #8
 8002578:	d400      	bmi.n	800257c <__aeabi_dsub+0x30c>
 800257a:	e1d5      	b.n	8002928 <__aeabi_dsub+0x6b8>
 800257c:	4663      	mov	r3, ip
 800257e:	1a1d      	subs	r5, r3, r0
 8002580:	45ac      	cmp	ip, r5
 8002582:	4192      	sbcs	r2, r2
 8002584:	2601      	movs	r6, #1
 8002586:	9b02      	ldr	r3, [sp, #8]
 8002588:	4252      	negs	r2, r2
 800258a:	1b1c      	subs	r4, r3, r4
 800258c:	4688      	mov	r8, r1
 800258e:	1aa4      	subs	r4, r4, r2
 8002590:	400e      	ands	r6, r1
 8002592:	e6f6      	b.n	8002382 <__aeabi_dsub+0x112>
 8002594:	4297      	cmp	r7, r2
 8002596:	d03f      	beq.n	8002618 <__aeabi_dsub+0x3a8>
 8002598:	4652      	mov	r2, sl
 800259a:	2501      	movs	r5, #1
 800259c:	2a38      	cmp	r2, #56	@ 0x38
 800259e:	dd00      	ble.n	80025a2 <__aeabi_dsub+0x332>
 80025a0:	e74a      	b.n	8002438 <__aeabi_dsub+0x1c8>
 80025a2:	2280      	movs	r2, #128	@ 0x80
 80025a4:	9b02      	ldr	r3, [sp, #8]
 80025a6:	0412      	lsls	r2, r2, #16
 80025a8:	4313      	orrs	r3, r2
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	e72d      	b.n	800240a <__aeabi_dsub+0x19a>
 80025ae:	003c      	movs	r4, r7
 80025b0:	2500      	movs	r5, #0
 80025b2:	2200      	movs	r2, #0
 80025b4:	e705      	b.n	80023c2 <__aeabi_dsub+0x152>
 80025b6:	2307      	movs	r3, #7
 80025b8:	402b      	ands	r3, r5
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d000      	beq.n	80025c0 <__aeabi_dsub+0x350>
 80025be:	e6e2      	b.n	8002386 <__aeabi_dsub+0x116>
 80025c0:	e06b      	b.n	800269a <__aeabi_dsub+0x42a>
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	000007ff 	.word	0x000007ff
 80025c8:	ff7fffff 	.word	0xff7fffff
 80025cc:	fffff801 	.word	0xfffff801
 80025d0:	000007fe 	.word	0x000007fe
 80025d4:	0028      	movs	r0, r5
 80025d6:	f000 fb63 	bl	8002ca0 <__clzsi2>
 80025da:	0003      	movs	r3, r0
 80025dc:	3318      	adds	r3, #24
 80025de:	2b1f      	cmp	r3, #31
 80025e0:	dc00      	bgt.n	80025e4 <__aeabi_dsub+0x374>
 80025e2:	e6b4      	b.n	800234e <__aeabi_dsub+0xde>
 80025e4:	002a      	movs	r2, r5
 80025e6:	3808      	subs	r0, #8
 80025e8:	4082      	lsls	r2, r0
 80025ea:	429f      	cmp	r7, r3
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x380>
 80025ee:	e0b9      	b.n	8002764 <__aeabi_dsub+0x4f4>
 80025f0:	1bdb      	subs	r3, r3, r7
 80025f2:	1c58      	adds	r0, r3, #1
 80025f4:	281f      	cmp	r0, #31
 80025f6:	dc00      	bgt.n	80025fa <__aeabi_dsub+0x38a>
 80025f8:	e1a0      	b.n	800293c <__aeabi_dsub+0x6cc>
 80025fa:	0015      	movs	r5, r2
 80025fc:	3b1f      	subs	r3, #31
 80025fe:	40dd      	lsrs	r5, r3
 8002600:	2820      	cmp	r0, #32
 8002602:	d005      	beq.n	8002610 <__aeabi_dsub+0x3a0>
 8002604:	2340      	movs	r3, #64	@ 0x40
 8002606:	1a1b      	subs	r3, r3, r0
 8002608:	409a      	lsls	r2, r3
 800260a:	1e53      	subs	r3, r2, #1
 800260c:	419a      	sbcs	r2, r3
 800260e:	4315      	orrs	r5, r2
 8002610:	2307      	movs	r3, #7
 8002612:	2700      	movs	r7, #0
 8002614:	402b      	ands	r3, r5
 8002616:	e7d0      	b.n	80025ba <__aeabi_dsub+0x34a>
 8002618:	08c0      	lsrs	r0, r0, #3
 800261a:	0762      	lsls	r2, r4, #29
 800261c:	4302      	orrs	r2, r0
 800261e:	08e4      	lsrs	r4, r4, #3
 8002620:	e737      	b.n	8002492 <__aeabi_dsub+0x222>
 8002622:	08ea      	lsrs	r2, r5, #3
 8002624:	0763      	lsls	r3, r4, #29
 8002626:	431a      	orrs	r2, r3
 8002628:	4bd3      	ldr	r3, [pc, #844]	@ (8002978 <__aeabi_dsub+0x708>)
 800262a:	08e4      	lsrs	r4, r4, #3
 800262c:	429f      	cmp	r7, r3
 800262e:	d100      	bne.n	8002632 <__aeabi_dsub+0x3c2>
 8002630:	e72f      	b.n	8002492 <__aeabi_dsub+0x222>
 8002632:	0324      	lsls	r4, r4, #12
 8002634:	0b25      	lsrs	r5, r4, #12
 8002636:	057c      	lsls	r4, r7, #21
 8002638:	0d64      	lsrs	r4, r4, #21
 800263a:	e6c2      	b.n	80023c2 <__aeabi_dsub+0x152>
 800263c:	46ca      	mov	sl, r9
 800263e:	0022      	movs	r2, r4
 8002640:	4302      	orrs	r2, r0
 8002642:	d158      	bne.n	80026f6 <__aeabi_dsub+0x486>
 8002644:	4663      	mov	r3, ip
 8002646:	000e      	movs	r6, r1
 8002648:	9c02      	ldr	r4, [sp, #8]
 800264a:	9303      	str	r3, [sp, #12]
 800264c:	9b03      	ldr	r3, [sp, #12]
 800264e:	4657      	mov	r7, sl
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	e7e7      	b.n	8002624 <__aeabi_dsub+0x3b4>
 8002654:	4cc9      	ldr	r4, [pc, #804]	@ (800297c <__aeabi_dsub+0x70c>)
 8002656:	1aff      	subs	r7, r7, r3
 8002658:	4014      	ands	r4, r2
 800265a:	e692      	b.n	8002382 <__aeabi_dsub+0x112>
 800265c:	4dc8      	ldr	r5, [pc, #800]	@ (8002980 <__aeabi_dsub+0x710>)
 800265e:	1c7a      	adds	r2, r7, #1
 8002660:	422a      	tst	r2, r5
 8002662:	d000      	beq.n	8002666 <__aeabi_dsub+0x3f6>
 8002664:	e084      	b.n	8002770 <__aeabi_dsub+0x500>
 8002666:	0022      	movs	r2, r4
 8002668:	4302      	orrs	r2, r0
 800266a:	2f00      	cmp	r7, #0
 800266c:	d000      	beq.n	8002670 <__aeabi_dsub+0x400>
 800266e:	e0ef      	b.n	8002850 <__aeabi_dsub+0x5e0>
 8002670:	2a00      	cmp	r2, #0
 8002672:	d100      	bne.n	8002676 <__aeabi_dsub+0x406>
 8002674:	e0e5      	b.n	8002842 <__aeabi_dsub+0x5d2>
 8002676:	4662      	mov	r2, ip
 8002678:	9902      	ldr	r1, [sp, #8]
 800267a:	430a      	orrs	r2, r1
 800267c:	d100      	bne.n	8002680 <__aeabi_dsub+0x410>
 800267e:	e0c5      	b.n	800280c <__aeabi_dsub+0x59c>
 8002680:	4663      	mov	r3, ip
 8002682:	18c5      	adds	r5, r0, r3
 8002684:	468c      	mov	ip, r1
 8002686:	4285      	cmp	r5, r0
 8002688:	4180      	sbcs	r0, r0
 800268a:	4464      	add	r4, ip
 800268c:	4240      	negs	r0, r0
 800268e:	1824      	adds	r4, r4, r0
 8002690:	0223      	lsls	r3, r4, #8
 8002692:	d502      	bpl.n	800269a <__aeabi_dsub+0x42a>
 8002694:	4bb9      	ldr	r3, [pc, #740]	@ (800297c <__aeabi_dsub+0x70c>)
 8002696:	3701      	adds	r7, #1
 8002698:	401c      	ands	r4, r3
 800269a:	46ba      	mov	sl, r7
 800269c:	9503      	str	r5, [sp, #12]
 800269e:	e7d5      	b.n	800264c <__aeabi_dsub+0x3dc>
 80026a0:	4662      	mov	r2, ip
 80026a2:	1a85      	subs	r5, r0, r2
 80026a4:	42a8      	cmp	r0, r5
 80026a6:	4192      	sbcs	r2, r2
 80026a8:	4252      	negs	r2, r2
 80026aa:	4691      	mov	r9, r2
 80026ac:	9b02      	ldr	r3, [sp, #8]
 80026ae:	1ae3      	subs	r3, r4, r3
 80026b0:	001a      	movs	r2, r3
 80026b2:	464b      	mov	r3, r9
 80026b4:	1ad2      	subs	r2, r2, r3
 80026b6:	0013      	movs	r3, r2
 80026b8:	4691      	mov	r9, r2
 80026ba:	021a      	lsls	r2, r3, #8
 80026bc:	d46c      	bmi.n	8002798 <__aeabi_dsub+0x528>
 80026be:	464a      	mov	r2, r9
 80026c0:	464c      	mov	r4, r9
 80026c2:	432a      	orrs	r2, r5
 80026c4:	d000      	beq.n	80026c8 <__aeabi_dsub+0x458>
 80026c6:	e63a      	b.n	800233e <__aeabi_dsub+0xce>
 80026c8:	2600      	movs	r6, #0
 80026ca:	2400      	movs	r4, #0
 80026cc:	2500      	movs	r5, #0
 80026ce:	e678      	b.n	80023c2 <__aeabi_dsub+0x152>
 80026d0:	9902      	ldr	r1, [sp, #8]
 80026d2:	4653      	mov	r3, sl
 80026d4:	000d      	movs	r5, r1
 80026d6:	3a20      	subs	r2, #32
 80026d8:	40d5      	lsrs	r5, r2
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d006      	beq.n	80026ec <__aeabi_dsub+0x47c>
 80026de:	2240      	movs	r2, #64	@ 0x40
 80026e0:	1ad2      	subs	r2, r2, r3
 80026e2:	000b      	movs	r3, r1
 80026e4:	4093      	lsls	r3, r2
 80026e6:	4662      	mov	r2, ip
 80026e8:	431a      	orrs	r2, r3
 80026ea:	4693      	mov	fp, r2
 80026ec:	465b      	mov	r3, fp
 80026ee:	1e5a      	subs	r2, r3, #1
 80026f0:	4193      	sbcs	r3, r2
 80026f2:	431d      	orrs	r5, r3
 80026f4:	e619      	b.n	800232a <__aeabi_dsub+0xba>
 80026f6:	4653      	mov	r3, sl
 80026f8:	1e5a      	subs	r2, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d100      	bne.n	8002700 <__aeabi_dsub+0x490>
 80026fe:	e0c6      	b.n	800288e <__aeabi_dsub+0x61e>
 8002700:	4e9d      	ldr	r6, [pc, #628]	@ (8002978 <__aeabi_dsub+0x708>)
 8002702:	45b2      	cmp	sl, r6
 8002704:	d100      	bne.n	8002708 <__aeabi_dsub+0x498>
 8002706:	e6bd      	b.n	8002484 <__aeabi_dsub+0x214>
 8002708:	4688      	mov	r8, r1
 800270a:	000e      	movs	r6, r1
 800270c:	2501      	movs	r5, #1
 800270e:	2a38      	cmp	r2, #56	@ 0x38
 8002710:	dc10      	bgt.n	8002734 <__aeabi_dsub+0x4c4>
 8002712:	2a1f      	cmp	r2, #31
 8002714:	dc7f      	bgt.n	8002816 <__aeabi_dsub+0x5a6>
 8002716:	2120      	movs	r1, #32
 8002718:	0025      	movs	r5, r4
 800271a:	1a89      	subs	r1, r1, r2
 800271c:	0007      	movs	r7, r0
 800271e:	4088      	lsls	r0, r1
 8002720:	408d      	lsls	r5, r1
 8002722:	40d7      	lsrs	r7, r2
 8002724:	40d4      	lsrs	r4, r2
 8002726:	1e41      	subs	r1, r0, #1
 8002728:	4188      	sbcs	r0, r1
 800272a:	9b02      	ldr	r3, [sp, #8]
 800272c:	433d      	orrs	r5, r7
 800272e:	1b1b      	subs	r3, r3, r4
 8002730:	4305      	orrs	r5, r0
 8002732:	9302      	str	r3, [sp, #8]
 8002734:	4662      	mov	r2, ip
 8002736:	1b55      	subs	r5, r2, r5
 8002738:	45ac      	cmp	ip, r5
 800273a:	4192      	sbcs	r2, r2
 800273c:	9b02      	ldr	r3, [sp, #8]
 800273e:	4252      	negs	r2, r2
 8002740:	464f      	mov	r7, r9
 8002742:	1a9c      	subs	r4, r3, r2
 8002744:	e5f6      	b.n	8002334 <__aeabi_dsub+0xc4>
 8002746:	2d00      	cmp	r5, #0
 8002748:	d000      	beq.n	800274c <__aeabi_dsub+0x4dc>
 800274a:	e0b7      	b.n	80028bc <__aeabi_dsub+0x64c>
 800274c:	2a00      	cmp	r2, #0
 800274e:	d100      	bne.n	8002752 <__aeabi_dsub+0x4e2>
 8002750:	e0f0      	b.n	8002934 <__aeabi_dsub+0x6c4>
 8002752:	2601      	movs	r6, #1
 8002754:	400e      	ands	r6, r1
 8002756:	4663      	mov	r3, ip
 8002758:	9802      	ldr	r0, [sp, #8]
 800275a:	08d9      	lsrs	r1, r3, #3
 800275c:	0742      	lsls	r2, r0, #29
 800275e:	430a      	orrs	r2, r1
 8002760:	08c4      	lsrs	r4, r0, #3
 8002762:	e696      	b.n	8002492 <__aeabi_dsub+0x222>
 8002764:	4c85      	ldr	r4, [pc, #532]	@ (800297c <__aeabi_dsub+0x70c>)
 8002766:	1aff      	subs	r7, r7, r3
 8002768:	4014      	ands	r4, r2
 800276a:	0762      	lsls	r2, r4, #29
 800276c:	08e4      	lsrs	r4, r4, #3
 800276e:	e760      	b.n	8002632 <__aeabi_dsub+0x3c2>
 8002770:	4981      	ldr	r1, [pc, #516]	@ (8002978 <__aeabi_dsub+0x708>)
 8002772:	428a      	cmp	r2, r1
 8002774:	d100      	bne.n	8002778 <__aeabi_dsub+0x508>
 8002776:	e0c9      	b.n	800290c <__aeabi_dsub+0x69c>
 8002778:	4663      	mov	r3, ip
 800277a:	18c1      	adds	r1, r0, r3
 800277c:	4281      	cmp	r1, r0
 800277e:	4180      	sbcs	r0, r0
 8002780:	9b02      	ldr	r3, [sp, #8]
 8002782:	4240      	negs	r0, r0
 8002784:	18e3      	adds	r3, r4, r3
 8002786:	181b      	adds	r3, r3, r0
 8002788:	07dd      	lsls	r5, r3, #31
 800278a:	085c      	lsrs	r4, r3, #1
 800278c:	2307      	movs	r3, #7
 800278e:	0849      	lsrs	r1, r1, #1
 8002790:	430d      	orrs	r5, r1
 8002792:	0017      	movs	r7, r2
 8002794:	402b      	ands	r3, r5
 8002796:	e710      	b.n	80025ba <__aeabi_dsub+0x34a>
 8002798:	4663      	mov	r3, ip
 800279a:	1a1d      	subs	r5, r3, r0
 800279c:	45ac      	cmp	ip, r5
 800279e:	4192      	sbcs	r2, r2
 80027a0:	2601      	movs	r6, #1
 80027a2:	9b02      	ldr	r3, [sp, #8]
 80027a4:	4252      	negs	r2, r2
 80027a6:	1b1c      	subs	r4, r3, r4
 80027a8:	4688      	mov	r8, r1
 80027aa:	1aa4      	subs	r4, r4, r2
 80027ac:	400e      	ands	r6, r1
 80027ae:	e5c6      	b.n	800233e <__aeabi_dsub+0xce>
 80027b0:	4663      	mov	r3, ip
 80027b2:	18c5      	adds	r5, r0, r3
 80027b4:	9b02      	ldr	r3, [sp, #8]
 80027b6:	4285      	cmp	r5, r0
 80027b8:	4180      	sbcs	r0, r0
 80027ba:	469c      	mov	ip, r3
 80027bc:	4240      	negs	r0, r0
 80027be:	4464      	add	r4, ip
 80027c0:	1824      	adds	r4, r4, r0
 80027c2:	2701      	movs	r7, #1
 80027c4:	0223      	lsls	r3, r4, #8
 80027c6:	d400      	bmi.n	80027ca <__aeabi_dsub+0x55a>
 80027c8:	e6f5      	b.n	80025b6 <__aeabi_dsub+0x346>
 80027ca:	2702      	movs	r7, #2
 80027cc:	e641      	b.n	8002452 <__aeabi_dsub+0x1e2>
 80027ce:	4663      	mov	r3, ip
 80027d0:	1ac5      	subs	r5, r0, r3
 80027d2:	42a8      	cmp	r0, r5
 80027d4:	4180      	sbcs	r0, r0
 80027d6:	9b02      	ldr	r3, [sp, #8]
 80027d8:	4240      	negs	r0, r0
 80027da:	1ae4      	subs	r4, r4, r3
 80027dc:	2701      	movs	r7, #1
 80027de:	1a24      	subs	r4, r4, r0
 80027e0:	e5a8      	b.n	8002334 <__aeabi_dsub+0xc4>
 80027e2:	9d02      	ldr	r5, [sp, #8]
 80027e4:	4652      	mov	r2, sl
 80027e6:	002b      	movs	r3, r5
 80027e8:	3a20      	subs	r2, #32
 80027ea:	40d3      	lsrs	r3, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	4653      	mov	r3, sl
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d006      	beq.n	8002802 <__aeabi_dsub+0x592>
 80027f4:	2240      	movs	r2, #64	@ 0x40
 80027f6:	1ad2      	subs	r2, r2, r3
 80027f8:	002b      	movs	r3, r5
 80027fa:	4093      	lsls	r3, r2
 80027fc:	4662      	mov	r2, ip
 80027fe:	431a      	orrs	r2, r3
 8002800:	4693      	mov	fp, r2
 8002802:	465d      	mov	r5, fp
 8002804:	1e6b      	subs	r3, r5, #1
 8002806:	419d      	sbcs	r5, r3
 8002808:	430d      	orrs	r5, r1
 800280a:	e615      	b.n	8002438 <__aeabi_dsub+0x1c8>
 800280c:	0762      	lsls	r2, r4, #29
 800280e:	08c0      	lsrs	r0, r0, #3
 8002810:	4302      	orrs	r2, r0
 8002812:	08e4      	lsrs	r4, r4, #3
 8002814:	e70d      	b.n	8002632 <__aeabi_dsub+0x3c2>
 8002816:	0011      	movs	r1, r2
 8002818:	0027      	movs	r7, r4
 800281a:	3920      	subs	r1, #32
 800281c:	40cf      	lsrs	r7, r1
 800281e:	2a20      	cmp	r2, #32
 8002820:	d005      	beq.n	800282e <__aeabi_dsub+0x5be>
 8002822:	2140      	movs	r1, #64	@ 0x40
 8002824:	1a8a      	subs	r2, r1, r2
 8002826:	4094      	lsls	r4, r2
 8002828:	0025      	movs	r5, r4
 800282a:	4305      	orrs	r5, r0
 800282c:	9503      	str	r5, [sp, #12]
 800282e:	9d03      	ldr	r5, [sp, #12]
 8002830:	1e6a      	subs	r2, r5, #1
 8002832:	4195      	sbcs	r5, r2
 8002834:	433d      	orrs	r5, r7
 8002836:	e77d      	b.n	8002734 <__aeabi_dsub+0x4c4>
 8002838:	2a00      	cmp	r2, #0
 800283a:	d100      	bne.n	800283e <__aeabi_dsub+0x5ce>
 800283c:	e744      	b.n	80026c8 <__aeabi_dsub+0x458>
 800283e:	2601      	movs	r6, #1
 8002840:	400e      	ands	r6, r1
 8002842:	4663      	mov	r3, ip
 8002844:	08d9      	lsrs	r1, r3, #3
 8002846:	9b02      	ldr	r3, [sp, #8]
 8002848:	075a      	lsls	r2, r3, #29
 800284a:	430a      	orrs	r2, r1
 800284c:	08dc      	lsrs	r4, r3, #3
 800284e:	e6f0      	b.n	8002632 <__aeabi_dsub+0x3c2>
 8002850:	2a00      	cmp	r2, #0
 8002852:	d028      	beq.n	80028a6 <__aeabi_dsub+0x636>
 8002854:	4662      	mov	r2, ip
 8002856:	9f02      	ldr	r7, [sp, #8]
 8002858:	08c0      	lsrs	r0, r0, #3
 800285a:	433a      	orrs	r2, r7
 800285c:	d100      	bne.n	8002860 <__aeabi_dsub+0x5f0>
 800285e:	e6dc      	b.n	800261a <__aeabi_dsub+0x3aa>
 8002860:	0762      	lsls	r2, r4, #29
 8002862:	4310      	orrs	r0, r2
 8002864:	2280      	movs	r2, #128	@ 0x80
 8002866:	08e4      	lsrs	r4, r4, #3
 8002868:	0312      	lsls	r2, r2, #12
 800286a:	4214      	tst	r4, r2
 800286c:	d009      	beq.n	8002882 <__aeabi_dsub+0x612>
 800286e:	08fd      	lsrs	r5, r7, #3
 8002870:	4215      	tst	r5, r2
 8002872:	d106      	bne.n	8002882 <__aeabi_dsub+0x612>
 8002874:	4663      	mov	r3, ip
 8002876:	2601      	movs	r6, #1
 8002878:	002c      	movs	r4, r5
 800287a:	08d8      	lsrs	r0, r3, #3
 800287c:	077b      	lsls	r3, r7, #29
 800287e:	4318      	orrs	r0, r3
 8002880:	400e      	ands	r6, r1
 8002882:	0f42      	lsrs	r2, r0, #29
 8002884:	00c0      	lsls	r0, r0, #3
 8002886:	08c0      	lsrs	r0, r0, #3
 8002888:	0752      	lsls	r2, r2, #29
 800288a:	4302      	orrs	r2, r0
 800288c:	e601      	b.n	8002492 <__aeabi_dsub+0x222>
 800288e:	4663      	mov	r3, ip
 8002890:	1a1d      	subs	r5, r3, r0
 8002892:	45ac      	cmp	ip, r5
 8002894:	4192      	sbcs	r2, r2
 8002896:	9b02      	ldr	r3, [sp, #8]
 8002898:	4252      	negs	r2, r2
 800289a:	1b1c      	subs	r4, r3, r4
 800289c:	000e      	movs	r6, r1
 800289e:	4688      	mov	r8, r1
 80028a0:	2701      	movs	r7, #1
 80028a2:	1aa4      	subs	r4, r4, r2
 80028a4:	e546      	b.n	8002334 <__aeabi_dsub+0xc4>
 80028a6:	4663      	mov	r3, ip
 80028a8:	08d9      	lsrs	r1, r3, #3
 80028aa:	9b02      	ldr	r3, [sp, #8]
 80028ac:	075a      	lsls	r2, r3, #29
 80028ae:	430a      	orrs	r2, r1
 80028b0:	08dc      	lsrs	r4, r3, #3
 80028b2:	e5ee      	b.n	8002492 <__aeabi_dsub+0x222>
 80028b4:	4663      	mov	r3, ip
 80028b6:	9c02      	ldr	r4, [sp, #8]
 80028b8:	9303      	str	r3, [sp, #12]
 80028ba:	e6c7      	b.n	800264c <__aeabi_dsub+0x3dc>
 80028bc:	08c0      	lsrs	r0, r0, #3
 80028be:	2a00      	cmp	r2, #0
 80028c0:	d100      	bne.n	80028c4 <__aeabi_dsub+0x654>
 80028c2:	e6aa      	b.n	800261a <__aeabi_dsub+0x3aa>
 80028c4:	0762      	lsls	r2, r4, #29
 80028c6:	4310      	orrs	r0, r2
 80028c8:	2280      	movs	r2, #128	@ 0x80
 80028ca:	08e4      	lsrs	r4, r4, #3
 80028cc:	0312      	lsls	r2, r2, #12
 80028ce:	4214      	tst	r4, r2
 80028d0:	d0d7      	beq.n	8002882 <__aeabi_dsub+0x612>
 80028d2:	9f02      	ldr	r7, [sp, #8]
 80028d4:	08fd      	lsrs	r5, r7, #3
 80028d6:	4215      	tst	r5, r2
 80028d8:	d1d3      	bne.n	8002882 <__aeabi_dsub+0x612>
 80028da:	4663      	mov	r3, ip
 80028dc:	2601      	movs	r6, #1
 80028de:	08d8      	lsrs	r0, r3, #3
 80028e0:	077b      	lsls	r3, r7, #29
 80028e2:	002c      	movs	r4, r5
 80028e4:	4318      	orrs	r0, r3
 80028e6:	400e      	ands	r6, r1
 80028e8:	e7cb      	b.n	8002882 <__aeabi_dsub+0x612>
 80028ea:	000a      	movs	r2, r1
 80028ec:	0027      	movs	r7, r4
 80028ee:	3a20      	subs	r2, #32
 80028f0:	40d7      	lsrs	r7, r2
 80028f2:	2920      	cmp	r1, #32
 80028f4:	d005      	beq.n	8002902 <__aeabi_dsub+0x692>
 80028f6:	2240      	movs	r2, #64	@ 0x40
 80028f8:	1a52      	subs	r2, r2, r1
 80028fa:	4094      	lsls	r4, r2
 80028fc:	0025      	movs	r5, r4
 80028fe:	4305      	orrs	r5, r0
 8002900:	9503      	str	r5, [sp, #12]
 8002902:	9d03      	ldr	r5, [sp, #12]
 8002904:	1e6a      	subs	r2, r5, #1
 8002906:	4195      	sbcs	r5, r2
 8002908:	432f      	orrs	r7, r5
 800290a:	e610      	b.n	800252e <__aeabi_dsub+0x2be>
 800290c:	0014      	movs	r4, r2
 800290e:	2500      	movs	r5, #0
 8002910:	2200      	movs	r2, #0
 8002912:	e556      	b.n	80023c2 <__aeabi_dsub+0x152>
 8002914:	9b02      	ldr	r3, [sp, #8]
 8002916:	4460      	add	r0, ip
 8002918:	4699      	mov	r9, r3
 800291a:	4560      	cmp	r0, ip
 800291c:	4192      	sbcs	r2, r2
 800291e:	444c      	add	r4, r9
 8002920:	4252      	negs	r2, r2
 8002922:	0005      	movs	r5, r0
 8002924:	18a4      	adds	r4, r4, r2
 8002926:	e74c      	b.n	80027c2 <__aeabi_dsub+0x552>
 8002928:	001a      	movs	r2, r3
 800292a:	001c      	movs	r4, r3
 800292c:	432a      	orrs	r2, r5
 800292e:	d000      	beq.n	8002932 <__aeabi_dsub+0x6c2>
 8002930:	e6b3      	b.n	800269a <__aeabi_dsub+0x42a>
 8002932:	e6c9      	b.n	80026c8 <__aeabi_dsub+0x458>
 8002934:	2480      	movs	r4, #128	@ 0x80
 8002936:	2600      	movs	r6, #0
 8002938:	0324      	lsls	r4, r4, #12
 800293a:	e5ae      	b.n	800249a <__aeabi_dsub+0x22a>
 800293c:	2120      	movs	r1, #32
 800293e:	2500      	movs	r5, #0
 8002940:	1a09      	subs	r1, r1, r0
 8002942:	e517      	b.n	8002374 <__aeabi_dsub+0x104>
 8002944:	2200      	movs	r2, #0
 8002946:	2500      	movs	r5, #0
 8002948:	4c0b      	ldr	r4, [pc, #44]	@ (8002978 <__aeabi_dsub+0x708>)
 800294a:	e53a      	b.n	80023c2 <__aeabi_dsub+0x152>
 800294c:	2d00      	cmp	r5, #0
 800294e:	d100      	bne.n	8002952 <__aeabi_dsub+0x6e2>
 8002950:	e5f6      	b.n	8002540 <__aeabi_dsub+0x2d0>
 8002952:	464b      	mov	r3, r9
 8002954:	1bda      	subs	r2, r3, r7
 8002956:	4692      	mov	sl, r2
 8002958:	2f00      	cmp	r7, #0
 800295a:	d100      	bne.n	800295e <__aeabi_dsub+0x6ee>
 800295c:	e66f      	b.n	800263e <__aeabi_dsub+0x3ce>
 800295e:	2a38      	cmp	r2, #56	@ 0x38
 8002960:	dc05      	bgt.n	800296e <__aeabi_dsub+0x6fe>
 8002962:	2680      	movs	r6, #128	@ 0x80
 8002964:	0436      	lsls	r6, r6, #16
 8002966:	4334      	orrs	r4, r6
 8002968:	4688      	mov	r8, r1
 800296a:	000e      	movs	r6, r1
 800296c:	e6d1      	b.n	8002712 <__aeabi_dsub+0x4a2>
 800296e:	4688      	mov	r8, r1
 8002970:	000e      	movs	r6, r1
 8002972:	2501      	movs	r5, #1
 8002974:	e6de      	b.n	8002734 <__aeabi_dsub+0x4c4>
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	000007ff 	.word	0x000007ff
 800297c:	ff7fffff 	.word	0xff7fffff
 8002980:	000007fe 	.word	0x000007fe
 8002984:	2d00      	cmp	r5, #0
 8002986:	d100      	bne.n	800298a <__aeabi_dsub+0x71a>
 8002988:	e668      	b.n	800265c <__aeabi_dsub+0x3ec>
 800298a:	464b      	mov	r3, r9
 800298c:	1bd9      	subs	r1, r3, r7
 800298e:	2f00      	cmp	r7, #0
 8002990:	d101      	bne.n	8002996 <__aeabi_dsub+0x726>
 8002992:	468a      	mov	sl, r1
 8002994:	e5a7      	b.n	80024e6 <__aeabi_dsub+0x276>
 8002996:	2701      	movs	r7, #1
 8002998:	2938      	cmp	r1, #56	@ 0x38
 800299a:	dd00      	ble.n	800299e <__aeabi_dsub+0x72e>
 800299c:	e5c7      	b.n	800252e <__aeabi_dsub+0x2be>
 800299e:	2280      	movs	r2, #128	@ 0x80
 80029a0:	0412      	lsls	r2, r2, #16
 80029a2:	4314      	orrs	r4, r2
 80029a4:	e5af      	b.n	8002506 <__aeabi_dsub+0x296>
 80029a6:	46c0      	nop			@ (mov r8, r8)

080029a8 <__aeabi_dcmpun>:
 80029a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029aa:	46c6      	mov	lr, r8
 80029ac:	031e      	lsls	r6, r3, #12
 80029ae:	0b36      	lsrs	r6, r6, #12
 80029b0:	46b0      	mov	r8, r6
 80029b2:	4e0d      	ldr	r6, [pc, #52]	@ (80029e8 <__aeabi_dcmpun+0x40>)
 80029b4:	030c      	lsls	r4, r1, #12
 80029b6:	004d      	lsls	r5, r1, #1
 80029b8:	005f      	lsls	r7, r3, #1
 80029ba:	b500      	push	{lr}
 80029bc:	0b24      	lsrs	r4, r4, #12
 80029be:	0d6d      	lsrs	r5, r5, #21
 80029c0:	0d7f      	lsrs	r7, r7, #21
 80029c2:	42b5      	cmp	r5, r6
 80029c4:	d00b      	beq.n	80029de <__aeabi_dcmpun+0x36>
 80029c6:	4908      	ldr	r1, [pc, #32]	@ (80029e8 <__aeabi_dcmpun+0x40>)
 80029c8:	2000      	movs	r0, #0
 80029ca:	428f      	cmp	r7, r1
 80029cc:	d104      	bne.n	80029d8 <__aeabi_dcmpun+0x30>
 80029ce:	4646      	mov	r6, r8
 80029d0:	4316      	orrs	r6, r2
 80029d2:	0030      	movs	r0, r6
 80029d4:	1e43      	subs	r3, r0, #1
 80029d6:	4198      	sbcs	r0, r3
 80029d8:	bc80      	pop	{r7}
 80029da:	46b8      	mov	r8, r7
 80029dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029de:	4304      	orrs	r4, r0
 80029e0:	2001      	movs	r0, #1
 80029e2:	2c00      	cmp	r4, #0
 80029e4:	d1f8      	bne.n	80029d8 <__aeabi_dcmpun+0x30>
 80029e6:	e7ee      	b.n	80029c6 <__aeabi_dcmpun+0x1e>
 80029e8:	000007ff 	.word	0x000007ff

080029ec <__aeabi_d2iz>:
 80029ec:	000b      	movs	r3, r1
 80029ee:	0002      	movs	r2, r0
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	4d16      	ldr	r5, [pc, #88]	@ (8002a4c <__aeabi_d2iz+0x60>)
 80029f4:	030c      	lsls	r4, r1, #12
 80029f6:	b082      	sub	sp, #8
 80029f8:	0049      	lsls	r1, r1, #1
 80029fa:	2000      	movs	r0, #0
 80029fc:	9200      	str	r2, [sp, #0]
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	0b24      	lsrs	r4, r4, #12
 8002a02:	0d49      	lsrs	r1, r1, #21
 8002a04:	0fde      	lsrs	r6, r3, #31
 8002a06:	42a9      	cmp	r1, r5
 8002a08:	dd04      	ble.n	8002a14 <__aeabi_d2iz+0x28>
 8002a0a:	4811      	ldr	r0, [pc, #68]	@ (8002a50 <__aeabi_d2iz+0x64>)
 8002a0c:	4281      	cmp	r1, r0
 8002a0e:	dd03      	ble.n	8002a18 <__aeabi_d2iz+0x2c>
 8002a10:	4b10      	ldr	r3, [pc, #64]	@ (8002a54 <__aeabi_d2iz+0x68>)
 8002a12:	18f0      	adds	r0, r6, r3
 8002a14:	b002      	add	sp, #8
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	2080      	movs	r0, #128	@ 0x80
 8002a1a:	0340      	lsls	r0, r0, #13
 8002a1c:	4320      	orrs	r0, r4
 8002a1e:	4c0e      	ldr	r4, [pc, #56]	@ (8002a58 <__aeabi_d2iz+0x6c>)
 8002a20:	1a64      	subs	r4, r4, r1
 8002a22:	2c1f      	cmp	r4, #31
 8002a24:	dd08      	ble.n	8002a38 <__aeabi_d2iz+0x4c>
 8002a26:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <__aeabi_d2iz+0x70>)
 8002a28:	1a5b      	subs	r3, r3, r1
 8002a2a:	40d8      	lsrs	r0, r3
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	4258      	negs	r0, r3
 8002a30:	2e00      	cmp	r6, #0
 8002a32:	d1ef      	bne.n	8002a14 <__aeabi_d2iz+0x28>
 8002a34:	0018      	movs	r0, r3
 8002a36:	e7ed      	b.n	8002a14 <__aeabi_d2iz+0x28>
 8002a38:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <__aeabi_d2iz+0x74>)
 8002a3a:	9a00      	ldr	r2, [sp, #0]
 8002a3c:	469c      	mov	ip, r3
 8002a3e:	0003      	movs	r3, r0
 8002a40:	4461      	add	r1, ip
 8002a42:	408b      	lsls	r3, r1
 8002a44:	40e2      	lsrs	r2, r4
 8002a46:	4313      	orrs	r3, r2
 8002a48:	e7f1      	b.n	8002a2e <__aeabi_d2iz+0x42>
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	000003fe 	.word	0x000003fe
 8002a50:	0000041d 	.word	0x0000041d
 8002a54:	7fffffff 	.word	0x7fffffff
 8002a58:	00000433 	.word	0x00000433
 8002a5c:	00000413 	.word	0x00000413
 8002a60:	fffffbed 	.word	0xfffffbed

08002a64 <__aeabi_i2d>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d016      	beq.n	8002a98 <__aeabi_i2d+0x34>
 8002a6a:	17c3      	asrs	r3, r0, #31
 8002a6c:	18c5      	adds	r5, r0, r3
 8002a6e:	405d      	eors	r5, r3
 8002a70:	0fc4      	lsrs	r4, r0, #31
 8002a72:	0028      	movs	r0, r5
 8002a74:	f000 f914 	bl	8002ca0 <__clzsi2>
 8002a78:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <__aeabi_i2d+0x58>)
 8002a7a:	1a1b      	subs	r3, r3, r0
 8002a7c:	055b      	lsls	r3, r3, #21
 8002a7e:	0d5b      	lsrs	r3, r3, #21
 8002a80:	280a      	cmp	r0, #10
 8002a82:	dc14      	bgt.n	8002aae <__aeabi_i2d+0x4a>
 8002a84:	0002      	movs	r2, r0
 8002a86:	002e      	movs	r6, r5
 8002a88:	3215      	adds	r2, #21
 8002a8a:	4096      	lsls	r6, r2
 8002a8c:	220b      	movs	r2, #11
 8002a8e:	1a12      	subs	r2, r2, r0
 8002a90:	40d5      	lsrs	r5, r2
 8002a92:	032d      	lsls	r5, r5, #12
 8002a94:	0b2d      	lsrs	r5, r5, #12
 8002a96:	e003      	b.n	8002aa0 <__aeabi_i2d+0x3c>
 8002a98:	2400      	movs	r4, #0
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2500      	movs	r5, #0
 8002a9e:	2600      	movs	r6, #0
 8002aa0:	051b      	lsls	r3, r3, #20
 8002aa2:	432b      	orrs	r3, r5
 8002aa4:	07e4      	lsls	r4, r4, #31
 8002aa6:	4323      	orrs	r3, r4
 8002aa8:	0030      	movs	r0, r6
 8002aaa:	0019      	movs	r1, r3
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
 8002aae:	380b      	subs	r0, #11
 8002ab0:	4085      	lsls	r5, r0
 8002ab2:	032d      	lsls	r5, r5, #12
 8002ab4:	2600      	movs	r6, #0
 8002ab6:	0b2d      	lsrs	r5, r5, #12
 8002ab8:	e7f2      	b.n	8002aa0 <__aeabi_i2d+0x3c>
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	0000041e 	.word	0x0000041e

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d010      	beq.n	8002ae8 <__aeabi_ui2d+0x28>
 8002ac6:	f000 f8eb 	bl	8002ca0 <__clzsi2>
 8002aca:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <__aeabi_ui2d+0x44>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dc0f      	bgt.n	8002af6 <__aeabi_ui2d+0x36>
 8002ad6:	220b      	movs	r2, #11
 8002ad8:	0021      	movs	r1, r4
 8002ada:	1a12      	subs	r2, r2, r0
 8002adc:	40d1      	lsrs	r1, r2
 8002ade:	3015      	adds	r0, #21
 8002ae0:	030a      	lsls	r2, r1, #12
 8002ae2:	4084      	lsls	r4, r0
 8002ae4:	0b12      	lsrs	r2, r2, #12
 8002ae6:	e001      	b.n	8002aec <__aeabi_ui2d+0x2c>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2200      	movs	r2, #0
 8002aec:	051b      	lsls	r3, r3, #20
 8002aee:	4313      	orrs	r3, r2
 8002af0:	0020      	movs	r0, r4
 8002af2:	0019      	movs	r1, r3
 8002af4:	bd10      	pop	{r4, pc}
 8002af6:	0022      	movs	r2, r4
 8002af8:	380b      	subs	r0, #11
 8002afa:	4082      	lsls	r2, r0
 8002afc:	0312      	lsls	r2, r2, #12
 8002afe:	2400      	movs	r4, #0
 8002b00:	0b12      	lsrs	r2, r2, #12
 8002b02:	e7f3      	b.n	8002aec <__aeabi_ui2d+0x2c>
 8002b04:	0000041e 	.word	0x0000041e

08002b08 <__aeabi_f2d>:
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	0242      	lsls	r2, r0, #9
 8002b0c:	0043      	lsls	r3, r0, #1
 8002b0e:	0fc4      	lsrs	r4, r0, #31
 8002b10:	20fe      	movs	r0, #254	@ 0xfe
 8002b12:	0e1b      	lsrs	r3, r3, #24
 8002b14:	1c59      	adds	r1, r3, #1
 8002b16:	0a55      	lsrs	r5, r2, #9
 8002b18:	4208      	tst	r0, r1
 8002b1a:	d00c      	beq.n	8002b36 <__aeabi_f2d+0x2e>
 8002b1c:	21e0      	movs	r1, #224	@ 0xe0
 8002b1e:	0089      	lsls	r1, r1, #2
 8002b20:	468c      	mov	ip, r1
 8002b22:	076d      	lsls	r5, r5, #29
 8002b24:	0b12      	lsrs	r2, r2, #12
 8002b26:	4463      	add	r3, ip
 8002b28:	051b      	lsls	r3, r3, #20
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	07e4      	lsls	r4, r4, #31
 8002b2e:	4323      	orrs	r3, r4
 8002b30:	0028      	movs	r0, r5
 8002b32:	0019      	movs	r1, r3
 8002b34:	bd70      	pop	{r4, r5, r6, pc}
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d114      	bne.n	8002b64 <__aeabi_f2d+0x5c>
 8002b3a:	2d00      	cmp	r5, #0
 8002b3c:	d01b      	beq.n	8002b76 <__aeabi_f2d+0x6e>
 8002b3e:	0028      	movs	r0, r5
 8002b40:	f000 f8ae 	bl	8002ca0 <__clzsi2>
 8002b44:	280a      	cmp	r0, #10
 8002b46:	dc1c      	bgt.n	8002b82 <__aeabi_f2d+0x7a>
 8002b48:	230b      	movs	r3, #11
 8002b4a:	002a      	movs	r2, r5
 8002b4c:	1a1b      	subs	r3, r3, r0
 8002b4e:	40da      	lsrs	r2, r3
 8002b50:	0003      	movs	r3, r0
 8002b52:	3315      	adds	r3, #21
 8002b54:	409d      	lsls	r5, r3
 8002b56:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <__aeabi_f2d+0x88>)
 8002b58:	0312      	lsls	r2, r2, #12
 8002b5a:	1a1b      	subs	r3, r3, r0
 8002b5c:	055b      	lsls	r3, r3, #21
 8002b5e:	0b12      	lsrs	r2, r2, #12
 8002b60:	0d5b      	lsrs	r3, r3, #21
 8002b62:	e7e1      	b.n	8002b28 <__aeabi_f2d+0x20>
 8002b64:	2d00      	cmp	r5, #0
 8002b66:	d009      	beq.n	8002b7c <__aeabi_f2d+0x74>
 8002b68:	0b13      	lsrs	r3, r2, #12
 8002b6a:	2280      	movs	r2, #128	@ 0x80
 8002b6c:	0312      	lsls	r2, r2, #12
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	076d      	lsls	r5, r5, #29
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <__aeabi_f2d+0x8c>)
 8002b74:	e7d8      	b.n	8002b28 <__aeabi_f2d+0x20>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2200      	movs	r2, #0
 8002b7a:	e7d5      	b.n	8002b28 <__aeabi_f2d+0x20>
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <__aeabi_f2d+0x8c>)
 8002b80:	e7d2      	b.n	8002b28 <__aeabi_f2d+0x20>
 8002b82:	0003      	movs	r3, r0
 8002b84:	002a      	movs	r2, r5
 8002b86:	3b0b      	subs	r3, #11
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	2500      	movs	r5, #0
 8002b8c:	e7e3      	b.n	8002b56 <__aeabi_f2d+0x4e>
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	00000389 	.word	0x00000389
 8002b94:	000007ff 	.word	0x000007ff

08002b98 <__aeabi_d2f>:
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9a:	004b      	lsls	r3, r1, #1
 8002b9c:	030f      	lsls	r7, r1, #12
 8002b9e:	0d5b      	lsrs	r3, r3, #21
 8002ba0:	4c3b      	ldr	r4, [pc, #236]	@ (8002c90 <__aeabi_d2f+0xf8>)
 8002ba2:	0f45      	lsrs	r5, r0, #29
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	0a7f      	lsrs	r7, r7, #9
 8002ba8:	1c5e      	adds	r6, r3, #1
 8002baa:	432f      	orrs	r7, r5
 8002bac:	9000      	str	r0, [sp, #0]
 8002bae:	9101      	str	r1, [sp, #4]
 8002bb0:	0fca      	lsrs	r2, r1, #31
 8002bb2:	00c5      	lsls	r5, r0, #3
 8002bb4:	4226      	tst	r6, r4
 8002bb6:	d00b      	beq.n	8002bd0 <__aeabi_d2f+0x38>
 8002bb8:	4936      	ldr	r1, [pc, #216]	@ (8002c94 <__aeabi_d2f+0xfc>)
 8002bba:	185c      	adds	r4, r3, r1
 8002bbc:	2cfe      	cmp	r4, #254	@ 0xfe
 8002bbe:	dd13      	ble.n	8002be8 <__aeabi_d2f+0x50>
 8002bc0:	20ff      	movs	r0, #255	@ 0xff
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	05c0      	lsls	r0, r0, #23
 8002bc6:	4318      	orrs	r0, r3
 8002bc8:	07d2      	lsls	r2, r2, #31
 8002bca:	4310      	orrs	r0, r2
 8002bcc:	b003      	add	sp, #12
 8002bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <__aeabi_d2f+0x42>
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e7f4      	b.n	8002bc4 <__aeabi_d2f+0x2c>
 8002bda:	433d      	orrs	r5, r7
 8002bdc:	d0f0      	beq.n	8002bc0 <__aeabi_d2f+0x28>
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	03db      	lsls	r3, r3, #15
 8002be2:	20ff      	movs	r0, #255	@ 0xff
 8002be4:	433b      	orrs	r3, r7
 8002be6:	e7ed      	b.n	8002bc4 <__aeabi_d2f+0x2c>
 8002be8:	2c00      	cmp	r4, #0
 8002bea:	dd14      	ble.n	8002c16 <__aeabi_d2f+0x7e>
 8002bec:	9b00      	ldr	r3, [sp, #0]
 8002bee:	00ff      	lsls	r7, r7, #3
 8002bf0:	019b      	lsls	r3, r3, #6
 8002bf2:	1e58      	subs	r0, r3, #1
 8002bf4:	4183      	sbcs	r3, r0
 8002bf6:	0f69      	lsrs	r1, r5, #29
 8002bf8:	433b      	orrs	r3, r7
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	0759      	lsls	r1, r3, #29
 8002bfe:	d041      	beq.n	8002c84 <__aeabi_d2f+0xec>
 8002c00:	210f      	movs	r1, #15
 8002c02:	4019      	ands	r1, r3
 8002c04:	2904      	cmp	r1, #4
 8002c06:	d028      	beq.n	8002c5a <__aeabi_d2f+0xc2>
 8002c08:	3304      	adds	r3, #4
 8002c0a:	0159      	lsls	r1, r3, #5
 8002c0c:	d525      	bpl.n	8002c5a <__aeabi_d2f+0xc2>
 8002c0e:	3401      	adds	r4, #1
 8002c10:	2300      	movs	r3, #0
 8002c12:	b2e0      	uxtb	r0, r4
 8002c14:	e7d6      	b.n	8002bc4 <__aeabi_d2f+0x2c>
 8002c16:	0021      	movs	r1, r4
 8002c18:	3117      	adds	r1, #23
 8002c1a:	dbdb      	blt.n	8002bd4 <__aeabi_d2f+0x3c>
 8002c1c:	2180      	movs	r1, #128	@ 0x80
 8002c1e:	201e      	movs	r0, #30
 8002c20:	0409      	lsls	r1, r1, #16
 8002c22:	4339      	orrs	r1, r7
 8002c24:	1b00      	subs	r0, r0, r4
 8002c26:	281f      	cmp	r0, #31
 8002c28:	dd1b      	ble.n	8002c62 <__aeabi_d2f+0xca>
 8002c2a:	2602      	movs	r6, #2
 8002c2c:	4276      	negs	r6, r6
 8002c2e:	1b34      	subs	r4, r6, r4
 8002c30:	000e      	movs	r6, r1
 8002c32:	40e6      	lsrs	r6, r4
 8002c34:	0034      	movs	r4, r6
 8002c36:	2820      	cmp	r0, #32
 8002c38:	d004      	beq.n	8002c44 <__aeabi_d2f+0xac>
 8002c3a:	4817      	ldr	r0, [pc, #92]	@ (8002c98 <__aeabi_d2f+0x100>)
 8002c3c:	4684      	mov	ip, r0
 8002c3e:	4463      	add	r3, ip
 8002c40:	4099      	lsls	r1, r3
 8002c42:	430d      	orrs	r5, r1
 8002c44:	002b      	movs	r3, r5
 8002c46:	1e59      	subs	r1, r3, #1
 8002c48:	418b      	sbcs	r3, r1
 8002c4a:	4323      	orrs	r3, r4
 8002c4c:	0759      	lsls	r1, r3, #29
 8002c4e:	d015      	beq.n	8002c7c <__aeabi_d2f+0xe4>
 8002c50:	210f      	movs	r1, #15
 8002c52:	2400      	movs	r4, #0
 8002c54:	4019      	ands	r1, r3
 8002c56:	2904      	cmp	r1, #4
 8002c58:	d117      	bne.n	8002c8a <__aeabi_d2f+0xf2>
 8002c5a:	019b      	lsls	r3, r3, #6
 8002c5c:	0a5b      	lsrs	r3, r3, #9
 8002c5e:	b2e0      	uxtb	r0, r4
 8002c60:	e7b0      	b.n	8002bc4 <__aeabi_d2f+0x2c>
 8002c62:	4c0e      	ldr	r4, [pc, #56]	@ (8002c9c <__aeabi_d2f+0x104>)
 8002c64:	191c      	adds	r4, r3, r4
 8002c66:	002b      	movs	r3, r5
 8002c68:	40a5      	lsls	r5, r4
 8002c6a:	40c3      	lsrs	r3, r0
 8002c6c:	40a1      	lsls	r1, r4
 8002c6e:	1e68      	subs	r0, r5, #1
 8002c70:	4185      	sbcs	r5, r0
 8002c72:	4329      	orrs	r1, r5
 8002c74:	430b      	orrs	r3, r1
 8002c76:	2400      	movs	r4, #0
 8002c78:	0759      	lsls	r1, r3, #29
 8002c7a:	d1c1      	bne.n	8002c00 <__aeabi_d2f+0x68>
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	2000      	movs	r0, #0
 8002c80:	0a5b      	lsrs	r3, r3, #9
 8002c82:	e79f      	b.n	8002bc4 <__aeabi_d2f+0x2c>
 8002c84:	08db      	lsrs	r3, r3, #3
 8002c86:	b2e0      	uxtb	r0, r4
 8002c88:	e79c      	b.n	8002bc4 <__aeabi_d2f+0x2c>
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	e7e5      	b.n	8002c5a <__aeabi_d2f+0xc2>
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	000007fe 	.word	0x000007fe
 8002c94:	fffffc80 	.word	0xfffffc80
 8002c98:	fffffca2 	.word	0xfffffca2
 8002c9c:	fffffc82 	.word	0xfffffc82

08002ca0 <__clzsi2>:
 8002ca0:	211c      	movs	r1, #28
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	4298      	cmp	r0, r3
 8002ca8:	d301      	bcc.n	8002cae <__clzsi2+0xe>
 8002caa:	0c00      	lsrs	r0, r0, #16
 8002cac:	3910      	subs	r1, #16
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	4298      	cmp	r0, r3
 8002cb2:	d301      	bcc.n	8002cb8 <__clzsi2+0x18>
 8002cb4:	0a00      	lsrs	r0, r0, #8
 8002cb6:	3908      	subs	r1, #8
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	4298      	cmp	r0, r3
 8002cbc:	d301      	bcc.n	8002cc2 <__clzsi2+0x22>
 8002cbe:	0900      	lsrs	r0, r0, #4
 8002cc0:	3904      	subs	r1, #4
 8002cc2:	a202      	add	r2, pc, #8	@ (adr r2, 8002ccc <__clzsi2+0x2c>)
 8002cc4:	5c10      	ldrb	r0, [r2, r0]
 8002cc6:	1840      	adds	r0, r0, r1
 8002cc8:	4770      	bx	lr
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	02020304 	.word	0x02020304
 8002cd0:	01010101 	.word	0x01010101
	...

08002cdc <__clzdi2>:
 8002cdc:	b510      	push	{r4, lr}
 8002cde:	2900      	cmp	r1, #0
 8002ce0:	d103      	bne.n	8002cea <__clzdi2+0xe>
 8002ce2:	f7ff ffdd 	bl	8002ca0 <__clzsi2>
 8002ce6:	3020      	adds	r0, #32
 8002ce8:	e002      	b.n	8002cf0 <__clzdi2+0x14>
 8002cea:	0008      	movs	r0, r1
 8002cec:	f7ff ffd8 	bl	8002ca0 <__clzsi2>
 8002cf0:	bd10      	pop	{r4, pc}
 8002cf2:	46c0      	nop			@ (mov r8, r8)

08002cf4 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002cf8:	23a0      	movs	r3, #160	@ 0xa0
 8002cfa:	05db      	lsls	r3, r3, #23
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2110      	movs	r1, #16
 8002d00:	0018      	movs	r0, r3
 8002d02:	f003 f86a 	bl	8005dda <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002d06:	2001      	movs	r0, #1
 8002d08:	f002 f902 	bl	8004f10 <HAL_Delay>
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002d16:	23a0      	movs	r3, #160	@ 0xa0
 8002d18:	05db      	lsls	r3, r3, #23
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	2110      	movs	r1, #16
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f003 f85b 	bl	8005dda <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002d24:	2001      	movs	r0, #1
 8002d26:	f002 f8f3 	bl	8004f10 <HAL_Delay>
}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	0002      	movs	r2, r0
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <SPI_TxByte+0x30>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2202      	movs	r2, #2
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d1f8      	bne.n	8002d3e <SPI_TxByte+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002d4c:	1df9      	adds	r1, r7, #7
 8002d4e:	4804      	ldr	r0, [pc, #16]	@ (8002d60 <SPI_TxByte+0x30>)
 8002d50:	2364      	movs	r3, #100	@ 0x64
 8002d52:	2201      	movs	r2, #1
 8002d54:	f003 ffb3 	bl	8006cbe <HAL_SPI_Transmit>
}
 8002d58:	46c0      	nop			@ (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	2000026c 	.word	0x2000026c

08002d64 <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	000a      	movs	r2, r1
 8002d6e:	1cbb      	adds	r3, r7, #2
 8002d70:	801a      	strh	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <SPI_TxBuffer+0x34>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d1f8      	bne.n	8002d74 <SPI_TxBuffer+0x10>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002d82:	1cbb      	adds	r3, r7, #2
 8002d84:	881a      	ldrh	r2, [r3, #0]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4803      	ldr	r0, [pc, #12]	@ (8002d98 <SPI_TxBuffer+0x34>)
 8002d8a:	2364      	movs	r3, #100	@ 0x64
 8002d8c:	f003 ff97 	bl	8006cbe <HAL_SPI_Transmit>
}
 8002d90:	46c0      	nop			@ (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b002      	add	sp, #8
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	2000026c 	.word	0x2000026c

08002d9c <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8002da2:	1dfb      	adds	r3, r7, #7
 8002da4:	22ff      	movs	r2, #255	@ 0xff
 8002da6:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002da8:	46c0      	nop			@ (mov r8, r8)
 8002daa:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd4 <SPI_RxByte+0x38>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2202      	movs	r2, #2
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d1f8      	bne.n	8002daa <SPI_RxByte+0xe>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002db8:	1dba      	adds	r2, r7, #6
 8002dba:	1df9      	adds	r1, r7, #7
 8002dbc:	4805      	ldr	r0, [pc, #20]	@ (8002dd4 <SPI_RxByte+0x38>)
 8002dbe:	2364      	movs	r3, #100	@ 0x64
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f004 f8d8 	bl	8006f78 <HAL_SPI_TransmitReceive>
  return data;
 8002dc8:	1dbb      	adds	r3, r7, #6
 8002dca:	781b      	ldrb	r3, [r3, #0]
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	2000026c 	.word	0x2000026c

08002dd8 <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002de0:	f7ff ffdc 	bl	8002d9c <SPI_RxByte>
 8002de4:	0003      	movs	r3, r0
 8002de6:	001a      	movs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	701a      	strb	r2, [r3, #0]
}
 8002dec:	46c0      	nop			@ (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b002      	add	sp, #8
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <SD_ReadyWait+0x34>)
 8002dfc:	22fa      	movs	r2, #250	@ 0xfa
 8002dfe:	0052      	lsls	r2, r2, #1
 8002e00:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8002e02:	1dfc      	adds	r4, r7, #7
 8002e04:	f7ff ffca 	bl	8002d9c <SPI_RxByte>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 8002e0c:	1dfb      	adds	r3, r7, #7
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2bff      	cmp	r3, #255	@ 0xff
 8002e12:	d003      	beq.n	8002e1c <SD_ReadyWait+0x28>
 8002e14:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <SD_ReadyWait+0x34>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f2      	bne.n	8002e02 <SD_ReadyWait+0xe>
  return res;
 8002e1c:	1dfb      	adds	r3, r7, #7
 8002e1e:	781b      	ldrb	r3, [r3, #0]
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b003      	add	sp, #12
 8002e26:	bd90      	pop	{r4, r7, pc}
 8002e28:	2000020a 	.word	0x2000020a

08002e2c <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8002e32:	4b20      	ldr	r3, [pc, #128]	@ (8002eb4 <SD_PowerOn+0x88>)
 8002e34:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8002e36:	f7ff ff6c 	bl	8002d12 <DESELECT>
  for(int i = 0; i < 10; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	e005      	b.n	8002e4c <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 8002e40:	20ff      	movs	r0, #255	@ 0xff
 8002e42:	f7ff ff75 	bl	8002d30 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b09      	cmp	r3, #9
 8002e50:	ddf6      	ble.n	8002e40 <SD_PowerOn+0x14>
  }
  /* slave select */
  SELECT();
 8002e52:	f7ff ff4f 	bl	8002cf4 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8002e56:	003b      	movs	r3, r7
 8002e58:	2240      	movs	r2, #64	@ 0x40
 8002e5a:	701a      	strb	r2, [r3, #0]
  args[1] = 0;
 8002e5c:	003b      	movs	r3, r7
 8002e5e:	2200      	movs	r2, #0
 8002e60:	705a      	strb	r2, [r3, #1]
  args[2] = 0;
 8002e62:	003b      	movs	r3, r7
 8002e64:	2200      	movs	r2, #0
 8002e66:	709a      	strb	r2, [r3, #2]
  args[3] = 0;
 8002e68:	003b      	movs	r3, r7
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	70da      	strb	r2, [r3, #3]
  args[4] = 0;
 8002e6e:	003b      	movs	r3, r7
 8002e70:	2200      	movs	r2, #0
 8002e72:	711a      	strb	r2, [r3, #4]
  args[5] = 0x95;   /* CRC */
 8002e74:	003b      	movs	r3, r7
 8002e76:	2295      	movs	r2, #149	@ 0x95
 8002e78:	715a      	strb	r2, [r3, #5]
  SPI_TxBuffer(args, sizeof(args));
 8002e7a:	003b      	movs	r3, r7
 8002e7c:	2106      	movs	r1, #6
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7ff ff70 	bl	8002d64 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8002e84:	e002      	b.n	8002e8c <SD_PowerOn+0x60>
  {
    cnt--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8002e8c:	f7ff ff86 	bl	8002d9c <SPI_RxByte>
 8002e90:	0003      	movs	r3, r0
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d002      	beq.n	8002e9c <SD_PowerOn+0x70>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f4      	bne.n	8002e86 <SD_PowerOn+0x5a>
  }
  DESELECT();
 8002e9c:	f7ff ff39 	bl	8002d12 <DESELECT>
  SPI_TxByte(0XFF);
 8002ea0:	20ff      	movs	r0, #255	@ 0xff
 8002ea2:	f7ff ff45 	bl	8002d30 <SPI_TxByte>
  PowerFlag = 1;
 8002ea6:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <SD_PowerOn+0x8c>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
}
 8002eac:	46c0      	nop			@ (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b004      	add	sp, #16
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	00001fff 	.word	0x00001fff
 8002eb8:	2000020d 	.word	0x2000020d

08002ebc <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002ec0:	4b02      	ldr	r3, [pc, #8]	@ (8002ecc <SD_PowerOff+0x10>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	2000020d 	.word	0x2000020d

08002ed0 <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  return PowerFlag;
 8002ed4:	4b02      	ldr	r3, [pc, #8]	@ (8002ee0 <SD_CheckPower+0x10>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	2000020d 	.word	0x2000020d

08002ee4 <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002ee4:	b5b0      	push	{r4, r5, r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <SD_RxDataBlock+0x64>)
 8002ef0:	22c8      	movs	r2, #200	@ 0xc8
 8002ef2:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8002ef4:	250f      	movs	r5, #15
 8002ef6:	197c      	adds	r4, r7, r5
 8002ef8:	f7ff ff50 	bl	8002d9c <SPI_RxByte>
 8002efc:	0003      	movs	r3, r0
 8002efe:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 8002f00:	197b      	adds	r3, r7, r5
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2bff      	cmp	r3, #255	@ 0xff
 8002f06:	d103      	bne.n	8002f10 <SD_RxDataBlock+0x2c>
 8002f08:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <SD_RxDataBlock+0x64>)
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f1      	bne.n	8002ef4 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8002f10:	230f      	movs	r3, #15
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2bfe      	cmp	r3, #254	@ 0xfe
 8002f18:	d001      	beq.n	8002f1e <SD_RxDataBlock+0x3a>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e00f      	b.n	8002f3e <SD_RxDataBlock+0x5a>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff ff57 	bl	8002dd8 <SPI_RxBytePtr>
  } while(len--);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	1e5a      	subs	r2, r3, #1
 8002f2e:	603a      	str	r2, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f4      	bne.n	8002f1e <SD_RxDataBlock+0x3a>
  /* discard CRC */
  SPI_RxByte();
 8002f34:	f7ff ff32 	bl	8002d9c <SPI_RxByte>
  SPI_RxByte();
 8002f38:	f7ff ff30 	bl	8002d9c <SPI_RxByte>
  return TRUE;
 8002f3c:	2301      	movs	r3, #1
}
 8002f3e:	0018      	movs	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b004      	add	sp, #16
 8002f44:	bdb0      	pop	{r4, r5, r7, pc}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	20000208 	.word	0x20000208

08002f4c <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	000a      	movs	r2, r1
 8002f56:	1cfb      	adds	r3, r7, #3
 8002f58:	701a      	strb	r2, [r3, #0]
  uint8_t resp;
  uint8_t i = 0;
 8002f5a:	230e      	movs	r3, #14
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8002f62:	f7ff ff47 	bl	8002df4 <SD_ReadyWait>
 8002f66:	0003      	movs	r3, r0
 8002f68:	2bff      	cmp	r3, #255	@ 0xff
 8002f6a:	d001      	beq.n	8002f70 <SD_TxDataBlock+0x24>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e03c      	b.n	8002fea <SD_TxDataBlock+0x9e>
  /* transmit token */
  SPI_TxByte(token);
 8002f70:	1cfb      	adds	r3, r7, #3
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7ff fedb 	bl	8002d30 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8002f7a:	1cfb      	adds	r3, r7, #3
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2bfd      	cmp	r3, #253	@ 0xfd
 8002f80:	d029      	beq.n	8002fd6 <SD_TxDataBlock+0x8a>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8002f82:	2380      	movs	r3, #128	@ 0x80
 8002f84:	009a      	lsls	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0011      	movs	r1, r2
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7ff feea 	bl	8002d64 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8002f90:	f7ff ff04 	bl	8002d9c <SPI_RxByte>
    SPI_RxByte();
 8002f94:	f7ff ff02 	bl	8002d9c <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8002f98:	e011      	b.n	8002fbe <SD_TxDataBlock+0x72>
    {
      resp = SPI_RxByte();
 8002f9a:	250f      	movs	r5, #15
 8002f9c:	197c      	adds	r4, r7, r5
 8002f9e:	f7ff fefd 	bl	8002d9c <SPI_RxByte>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	7023      	strb	r3, [r4, #0]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8002fa6:	197b      	adds	r3, r7, r5
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	221f      	movs	r2, #31
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d00b      	beq.n	8002fca <SD_TxDataBlock+0x7e>
      i++;
 8002fb2:	210e      	movs	r1, #14
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	781a      	ldrb	r2, [r3, #0]
 8002fb8:	187b      	adds	r3, r7, r1
 8002fba:	3201      	adds	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
    while (i <= 64)
 8002fbe:	230e      	movs	r3, #14
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b40      	cmp	r3, #64	@ 0x40
 8002fc6:	d9e8      	bls.n	8002f9a <SD_TxDataBlock+0x4e>
 8002fc8:	e000      	b.n	8002fcc <SD_TxDataBlock+0x80>
      if ((resp & 0x1F) == 0x05) break;
 8002fca:	46c0      	nop			@ (mov r8, r8)
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8002fcc:	46c0      	nop			@ (mov r8, r8)
 8002fce:	f7ff fee5 	bl	8002d9c <SPI_RxByte>
 8002fd2:	1e03      	subs	r3, r0, #0
 8002fd4:	d0fb      	beq.n	8002fce <SD_TxDataBlock+0x82>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8002fd6:	230f      	movs	r3, #15
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	221f      	movs	r2, #31
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d101      	bne.n	8002fe8 <SD_TxDataBlock+0x9c>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <SD_TxDataBlock+0x9e>
  return FALSE;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b004      	add	sp, #16
 8002ff0:	bdb0      	pop	{r4, r5, r7, pc}

08002ff2 <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002ff2:	b5b0      	push	{r4, r5, r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	6039      	str	r1, [r7, #0]
 8002ffc:	1dfb      	adds	r3, r7, #7
 8002ffe:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003000:	f7ff fef8 	bl	8002df4 <SD_ReadyWait>
 8003004:	0003      	movs	r3, r0
 8003006:	2bff      	cmp	r3, #255	@ 0xff
 8003008:	d001      	beq.n	800300e <SD_SendCmd+0x1c>
 800300a:	23ff      	movs	r3, #255	@ 0xff
 800300c:	e059      	b.n	80030c2 <SD_SendCmd+0xd0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800300e:	1dfb      	adds	r3, r7, #7
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	0018      	movs	r0, r3
 8003014:	f7ff fe8c 	bl	8002d30 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	0e1b      	lsrs	r3, r3, #24
 800301c:	b2db      	uxtb	r3, r3
 800301e:	0018      	movs	r0, r3
 8003020:	f7ff fe86 	bl	8002d30 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	b2db      	uxtb	r3, r3
 800302a:	0018      	movs	r0, r3
 800302c:	f7ff fe80 	bl	8002d30 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	b2db      	uxtb	r3, r3
 8003036:	0018      	movs	r0, r3
 8003038:	f7ff fe7a 	bl	8002d30 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff fe75 	bl	8002d30 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8003046:	1dfb      	adds	r3, r7, #7
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b40      	cmp	r3, #64	@ 0x40
 800304c:	d104      	bne.n	8003058 <SD_SendCmd+0x66>
 800304e:	230f      	movs	r3, #15
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2295      	movs	r2, #149	@ 0x95
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e00c      	b.n	8003072 <SD_SendCmd+0x80>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8003058:	1dfb      	adds	r3, r7, #7
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b48      	cmp	r3, #72	@ 0x48
 800305e:	d104      	bne.n	800306a <SD_SendCmd+0x78>
 8003060:	230f      	movs	r3, #15
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2287      	movs	r2, #135	@ 0x87
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	e003      	b.n	8003072 <SD_SendCmd+0x80>
  else crc = 1;
 800306a:	230f      	movs	r3, #15
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
  /* transmit CRC */
  SPI_TxByte(crc);
 8003072:	230f      	movs	r3, #15
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff fe59 	bl	8002d30 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800307e:	1dfb      	adds	r3, r7, #7
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b4c      	cmp	r3, #76	@ 0x4c
 8003084:	d101      	bne.n	800308a <SD_SendCmd+0x98>
 8003086:	f7ff fe89 	bl	8002d9c <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800308a:	230e      	movs	r3, #14
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	220a      	movs	r2, #10
 8003090:	701a      	strb	r2, [r3, #0]
  do {
    res = SPI_RxByte();
 8003092:	250d      	movs	r5, #13
 8003094:	197c      	adds	r4, r7, r5
 8003096:	f7ff fe81 	bl	8002d9c <SPI_RxByte>
 800309a:	0003      	movs	r3, r0
 800309c:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 800309e:	197b      	adds	r3, r7, r5
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	b25b      	sxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	da09      	bge.n	80030bc <SD_SendCmd+0xca>
 80030a8:	210e      	movs	r1, #14
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	187a      	adds	r2, r7, r1
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	3a01      	subs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ea      	bne.n	8003092 <SD_SendCmd+0xa0>
  return res;
 80030bc:	230d      	movs	r3, #13
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	781b      	ldrb	r3, [r3, #0]
}
 80030c2:	0018      	movs	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b004      	add	sp, #16
 80030c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080030cc <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80030cc:	b5b0      	push	{r4, r5, r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	0002      	movs	r2, r0
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <SD_disk_initialize+0x18>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0f2      	b.n	80032ca <SD_disk_initialize+0x1fe>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80030e4:	4b7b      	ldr	r3, [pc, #492]	@ (80032d4 <SD_disk_initialize+0x208>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	001a      	movs	r2, r3
 80030ec:	2302      	movs	r3, #2
 80030ee:	4013      	ands	r3, r2
 80030f0:	d003      	beq.n	80030fa <SD_disk_initialize+0x2e>
 80030f2:	4b78      	ldr	r3, [pc, #480]	@ (80032d4 <SD_disk_initialize+0x208>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	e0e7      	b.n	80032ca <SD_disk_initialize+0x1fe>
  /* power on */
  SD_PowerOn();
 80030fa:	f7ff fe97 	bl	8002e2c <SD_PowerOn>
  /* slave select */
  SELECT();
 80030fe:	f7ff fdf9 	bl	8002cf4 <SELECT>
  /* check disk type */
  type = 0;
 8003102:	230e      	movs	r3, #14
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800310a:	2100      	movs	r1, #0
 800310c:	2040      	movs	r0, #64	@ 0x40
 800310e:	f7ff ff70 	bl	8002ff2 <SD_SendCmd>
 8003112:	0003      	movs	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	d000      	beq.n	800311a <SD_disk_initialize+0x4e>
 8003118:	e0bc      	b.n	8003294 <SD_disk_initialize+0x1c8>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800311a:	4b6f      	ldr	r3, [pc, #444]	@ (80032d8 <SD_disk_initialize+0x20c>)
 800311c:	22fa      	movs	r2, #250	@ 0xfa
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003122:	23d5      	movs	r3, #213	@ 0xd5
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	0019      	movs	r1, r3
 8003128:	2048      	movs	r0, #72	@ 0x48
 800312a:	f7ff ff62 	bl	8002ff2 <SD_SendCmd>
 800312e:	0003      	movs	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d000      	beq.n	8003136 <SD_disk_initialize+0x6a>
 8003134:	e06b      	b.n	800320e <SD_disk_initialize+0x142>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8003136:	230f      	movs	r3, #15
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e00e      	b.n	800315e <SD_disk_initialize+0x92>
      {
        ocr[n] = SPI_RxByte();
 8003140:	250f      	movs	r5, #15
 8003142:	197b      	adds	r3, r7, r5
 8003144:	781c      	ldrb	r4, [r3, #0]
 8003146:	f7ff fe29 	bl	8002d9c <SPI_RxByte>
 800314a:	0003      	movs	r3, r0
 800314c:	001a      	movs	r2, r3
 800314e:	2308      	movs	r3, #8
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 8003154:	197b      	adds	r3, r7, r5
 8003156:	781a      	ldrb	r2, [r3, #0]
 8003158:	197b      	adds	r3, r7, r5
 800315a:	3201      	adds	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	230f      	movs	r3, #15
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b03      	cmp	r3, #3
 8003166:	d9eb      	bls.n	8003140 <SD_disk_initialize+0x74>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003168:	2208      	movs	r2, #8
 800316a:	18bb      	adds	r3, r7, r2
 800316c:	789b      	ldrb	r3, [r3, #2]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d000      	beq.n	8003174 <SD_disk_initialize+0xa8>
 8003172:	e08f      	b.n	8003294 <SD_disk_initialize+0x1c8>
 8003174:	18bb      	adds	r3, r7, r2
 8003176:	78db      	ldrb	r3, [r3, #3]
 8003178:	2baa      	cmp	r3, #170	@ 0xaa
 800317a:	d000      	beq.n	800317e <SD_disk_initialize+0xb2>
 800317c:	e08a      	b.n	8003294 <SD_disk_initialize+0x1c8>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800317e:	2100      	movs	r1, #0
 8003180:	2077      	movs	r0, #119	@ 0x77
 8003182:	f7ff ff36 	bl	8002ff2 <SD_SendCmd>
 8003186:	0003      	movs	r3, r0
 8003188:	2b01      	cmp	r3, #1
 800318a:	d807      	bhi.n	800319c <SD_disk_initialize+0xd0>
 800318c:	2380      	movs	r3, #128	@ 0x80
 800318e:	05db      	lsls	r3, r3, #23
 8003190:	0019      	movs	r1, r3
 8003192:	2069      	movs	r0, #105	@ 0x69
 8003194:	f7ff ff2d 	bl	8002ff2 <SD_SendCmd>
 8003198:	1e03      	subs	r3, r0, #0
 800319a:	d004      	beq.n	80031a6 <SD_disk_initialize+0xda>
        } while (Timer1);
 800319c:	4b4e      	ldr	r3, [pc, #312]	@ (80032d8 <SD_disk_initialize+0x20c>)
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ec      	bne.n	800317e <SD_disk_initialize+0xb2>
 80031a4:	e000      	b.n	80031a8 <SD_disk_initialize+0xdc>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80031a6:	46c0      	nop			@ (mov r8, r8)
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80031a8:	4b4b      	ldr	r3, [pc, #300]	@ (80032d8 <SD_disk_initialize+0x20c>)
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d100      	bne.n	80031b2 <SD_disk_initialize+0xe6>
 80031b0:	e070      	b.n	8003294 <SD_disk_initialize+0x1c8>
 80031b2:	2100      	movs	r1, #0
 80031b4:	207a      	movs	r0, #122	@ 0x7a
 80031b6:	f7ff ff1c 	bl	8002ff2 <SD_SendCmd>
 80031ba:	1e03      	subs	r3, r0, #0
 80031bc:	d000      	beq.n	80031c0 <SD_disk_initialize+0xf4>
 80031be:	e069      	b.n	8003294 <SD_disk_initialize+0x1c8>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80031c0:	230f      	movs	r3, #15
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e00e      	b.n	80031e8 <SD_disk_initialize+0x11c>
          {
            ocr[n] = SPI_RxByte();
 80031ca:	250f      	movs	r5, #15
 80031cc:	197b      	adds	r3, r7, r5
 80031ce:	781c      	ldrb	r4, [r3, #0]
 80031d0:	f7ff fde4 	bl	8002d9c <SPI_RxByte>
 80031d4:	0003      	movs	r3, r0
 80031d6:	001a      	movs	r2, r3
 80031d8:	2308      	movs	r3, #8
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 80031de:	197b      	adds	r3, r7, r5
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	197b      	adds	r3, r7, r5
 80031e4:	3201      	adds	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
 80031e8:	230f      	movs	r3, #15
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d9eb      	bls.n	80031ca <SD_disk_initialize+0xfe>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80031f2:	2308      	movs	r3, #8
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	001a      	movs	r2, r3
 80031fa:	2340      	movs	r3, #64	@ 0x40
 80031fc:	4013      	ands	r3, r2
 80031fe:	d001      	beq.n	8003204 <SD_disk_initialize+0x138>
 8003200:	220c      	movs	r2, #12
 8003202:	e000      	b.n	8003206 <SD_disk_initialize+0x13a>
 8003204:	2204      	movs	r2, #4
 8003206:	230e      	movs	r3, #14
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e042      	b.n	8003294 <SD_disk_initialize+0x1c8>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800320e:	2100      	movs	r1, #0
 8003210:	2077      	movs	r0, #119	@ 0x77
 8003212:	f7ff feee 	bl	8002ff2 <SD_SendCmd>
 8003216:	0003      	movs	r3, r0
 8003218:	2b01      	cmp	r3, #1
 800321a:	d808      	bhi.n	800322e <SD_disk_initialize+0x162>
 800321c:	2100      	movs	r1, #0
 800321e:	2069      	movs	r0, #105	@ 0x69
 8003220:	f7ff fee7 	bl	8002ff2 <SD_SendCmd>
 8003224:	0003      	movs	r3, r0
 8003226:	2b01      	cmp	r3, #1
 8003228:	d801      	bhi.n	800322e <SD_disk_initialize+0x162>
 800322a:	2202      	movs	r2, #2
 800322c:	e000      	b.n	8003230 <SD_disk_initialize+0x164>
 800322e:	2201      	movs	r2, #1
 8003230:	230e      	movs	r3, #14
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	701a      	strb	r2, [r3, #0]
      do
      {
        if (type == CT_SD1)
 8003236:	230e      	movs	r3, #14
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d10d      	bne.n	800325c <SD_disk_initialize+0x190>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003240:	2100      	movs	r1, #0
 8003242:	2077      	movs	r0, #119	@ 0x77
 8003244:	f7ff fed5 	bl	8002ff2 <SD_SendCmd>
 8003248:	0003      	movs	r3, r0
 800324a:	2b01      	cmp	r3, #1
 800324c:	d80c      	bhi.n	8003268 <SD_disk_initialize+0x19c>
 800324e:	2100      	movs	r1, #0
 8003250:	2069      	movs	r0, #105	@ 0x69
 8003252:	f7ff fece 	bl	8002ff2 <SD_SendCmd>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d106      	bne.n	8003268 <SD_disk_initialize+0x19c>
 800325a:	e00b      	b.n	8003274 <SD_disk_initialize+0x1a8>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800325c:	2100      	movs	r1, #0
 800325e:	2041      	movs	r0, #65	@ 0x41
 8003260:	f7ff fec7 	bl	8002ff2 <SD_SendCmd>
 8003264:	1e03      	subs	r3, r0, #0
 8003266:	d004      	beq.n	8003272 <SD_disk_initialize+0x1a6>
        }
      } while (Timer1);
 8003268:	4b1b      	ldr	r3, [pc, #108]	@ (80032d8 <SD_disk_initialize+0x20c>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1e2      	bne.n	8003236 <SD_disk_initialize+0x16a>
 8003270:	e000      	b.n	8003274 <SD_disk_initialize+0x1a8>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003272:	46c0      	nop			@ (mov r8, r8)
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003274:	4b18      	ldr	r3, [pc, #96]	@ (80032d8 <SD_disk_initialize+0x20c>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <SD_disk_initialize+0x1c0>
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	0019      	movs	r1, r3
 8003282:	2050      	movs	r0, #80	@ 0x50
 8003284:	f7ff feb5 	bl	8002ff2 <SD_SendCmd>
 8003288:	1e03      	subs	r3, r0, #0
 800328a:	d003      	beq.n	8003294 <SD_disk_initialize+0x1c8>
 800328c:	230e      	movs	r3, #14
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
    }
  }
  CardType = type;
 8003294:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <SD_disk_initialize+0x210>)
 8003296:	240e      	movs	r4, #14
 8003298:	193a      	adds	r2, r7, r4
 800329a:	7812      	ldrb	r2, [r2, #0]
 800329c:	701a      	strb	r2, [r3, #0]
  /* Idle */
  DESELECT();
 800329e:	f7ff fd38 	bl	8002d12 <DESELECT>
  SPI_RxByte();
 80032a2:	f7ff fd7b 	bl	8002d9c <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80032a6:	193b      	adds	r3, r7, r4
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <SD_disk_initialize+0x1f4>
  {
    Stat &= ~STA_NOINIT;
 80032ae:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <SD_disk_initialize+0x208>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2201      	movs	r2, #1
 80032b6:	4393      	bics	r3, r2
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <SD_disk_initialize+0x208>)
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e001      	b.n	80032c4 <SD_disk_initialize+0x1f8>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80032c0:	f7ff fdfc 	bl	8002ebc <SD_PowerOff>
  }
  return Stat;
 80032c4:	4b03      	ldr	r3, [pc, #12]	@ (80032d4 <SD_disk_initialize+0x208>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
}
 80032ca:	0018      	movs	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b004      	add	sp, #16
 80032d0:	bdb0      	pop	{r4, r5, r7, pc}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	20000000 	.word	0x20000000
 80032d8:	20000208 	.word	0x20000208
 80032dc:	2000020c 	.word	0x2000020c

080032e0 <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	0002      	movs	r2, r0
 80032e8:	1dfb      	adds	r3, r7, #7
 80032ea:	701a      	strb	r2, [r3, #0]
  if (drv) return STA_NOINIT;
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <SD_disk_status+0x18>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e002      	b.n	80032fe <SD_disk_status+0x1e>
  return Stat;
 80032f8:	4b03      	ldr	r3, [pc, #12]	@ (8003308 <SD_disk_status+0x28>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b2db      	uxtb	r3, r3
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b002      	add	sp, #8
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	20000000 	.word	0x20000000

0800330c <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	210f      	movs	r1, #15
 800331a:	187b      	adds	r3, r7, r1
 800331c:	1c02      	adds	r2, r0, #0
 800331e:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003320:	187b      	adds	r3, r7, r1
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <SD_disk_read+0x22>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <SD_disk_read+0x26>
 800332e:	2304      	movs	r3, #4
 8003330:	e053      	b.n	80033da <SD_disk_read+0xce>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003332:	4b2c      	ldr	r3, [pc, #176]	@ (80033e4 <SD_disk_read+0xd8>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	001a      	movs	r2, r3
 800333a:	2301      	movs	r3, #1
 800333c:	4013      	ands	r3, r2
 800333e:	d001      	beq.n	8003344 <SD_disk_read+0x38>
 8003340:	2303      	movs	r3, #3
 8003342:	e04a      	b.n	80033da <SD_disk_read+0xce>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003344:	4b28      	ldr	r3, [pc, #160]	@ (80033e8 <SD_disk_read+0xdc>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	001a      	movs	r2, r3
 800334a:	2304      	movs	r3, #4
 800334c:	4013      	ands	r3, r2
 800334e:	d102      	bne.n	8003356 <SD_disk_read+0x4a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	025b      	lsls	r3, r3, #9
 8003354:	607b      	str	r3, [r7, #4]
  SELECT();
 8003356:	f7ff fccd 	bl	8002cf4 <SELECT>
  if (count == 1)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d112      	bne.n	8003386 <SD_disk_read+0x7a>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	0019      	movs	r1, r3
 8003364:	2051      	movs	r0, #81	@ 0x51
 8003366:	f7ff fe44 	bl	8002ff2 <SD_SendCmd>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d12d      	bne.n	80033ca <SD_disk_read+0xbe>
 800336e:	2380      	movs	r3, #128	@ 0x80
 8003370:	009a      	lsls	r2, r3, #2
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	0011      	movs	r1, r2
 8003376:	0018      	movs	r0, r3
 8003378:	f7ff fdb4 	bl	8002ee4 <SD_RxDataBlock>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d024      	beq.n	80033ca <SD_disk_read+0xbe>
 8003380:	2300      	movs	r3, #0
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	e021      	b.n	80033ca <SD_disk_read+0xbe>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	0019      	movs	r1, r3
 800338a:	2052      	movs	r0, #82	@ 0x52
 800338c:	f7ff fe31 	bl	8002ff2 <SD_SendCmd>
 8003390:	1e03      	subs	r3, r0, #0
 8003392:	d11a      	bne.n	80033ca <SD_disk_read+0xbe>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8003394:	2380      	movs	r3, #128	@ 0x80
 8003396:	009a      	lsls	r2, r3, #2
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	0011      	movs	r1, r2
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff fda1 	bl	8002ee4 <SD_RxDataBlock>
 80033a2:	1e03      	subs	r3, r0, #0
 80033a4:	d00c      	beq.n	80033c0 <SD_disk_read+0xb4>
        buff += 512;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2280      	movs	r2, #128	@ 0x80
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	4694      	mov	ip, r2
 80033ae:	4463      	add	r3, ip
 80033b0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1ea      	bne.n	8003394 <SD_disk_read+0x88>
 80033be:	e000      	b.n	80033c2 <SD_disk_read+0xb6>
        if (!SD_RxDataBlock(buff, 512)) break;
 80033c0:	46c0      	nop			@ (mov r8, r8)
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80033c2:	2100      	movs	r1, #0
 80033c4:	204c      	movs	r0, #76	@ 0x4c
 80033c6:	f7ff fe14 	bl	8002ff2 <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 80033ca:	f7ff fca2 	bl	8002d12 <DESELECT>
  SPI_RxByte();
 80033ce:	f7ff fce5 	bl	8002d9c <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	1e5a      	subs	r2, r3, #1
 80033d6:	4193      	sbcs	r3, r2
 80033d8:	b2db      	uxtb	r3, r3
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b004      	add	sp, #16
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	20000000 	.word	0x20000000
 80033e8:	2000020c 	.word	0x2000020c

080033ec <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	210f      	movs	r1, #15
 80033fa:	187b      	adds	r3, r7, r1
 80033fc:	1c02      	adds	r2, r0, #0
 80033fe:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003400:	187b      	adds	r3, r7, r1
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <SD_disk_write+0x22>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <SD_disk_write+0x26>
 800340e:	2304      	movs	r3, #4
 8003410:	e06b      	b.n	80034ea <SD_disk_write+0xfe>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003412:	4b38      	ldr	r3, [pc, #224]	@ (80034f4 <SD_disk_write+0x108>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	001a      	movs	r2, r3
 800341a:	2301      	movs	r3, #1
 800341c:	4013      	ands	r3, r2
 800341e:	d001      	beq.n	8003424 <SD_disk_write+0x38>
 8003420:	2303      	movs	r3, #3
 8003422:	e062      	b.n	80034ea <SD_disk_write+0xfe>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8003424:	4b33      	ldr	r3, [pc, #204]	@ (80034f4 <SD_disk_write+0x108>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	001a      	movs	r2, r3
 800342c:	2304      	movs	r3, #4
 800342e:	4013      	ands	r3, r2
 8003430:	d001      	beq.n	8003436 <SD_disk_write+0x4a>
 8003432:	2302      	movs	r3, #2
 8003434:	e059      	b.n	80034ea <SD_disk_write+0xfe>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003436:	4b30      	ldr	r3, [pc, #192]	@ (80034f8 <SD_disk_write+0x10c>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	001a      	movs	r2, r3
 800343c:	2304      	movs	r3, #4
 800343e:	4013      	ands	r3, r2
 8003440:	d102      	bne.n	8003448 <SD_disk_write+0x5c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	025b      	lsls	r3, r3, #9
 8003446:	607b      	str	r3, [r7, #4]
  SELECT();
 8003448:	f7ff fc54 	bl	8002cf4 <SELECT>
  if (count == 1)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d110      	bne.n	8003474 <SD_disk_write+0x88>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	0019      	movs	r1, r3
 8003456:	2058      	movs	r0, #88	@ 0x58
 8003458:	f7ff fdcb 	bl	8002ff2 <SD_SendCmd>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d13c      	bne.n	80034da <SD_disk_write+0xee>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	21fe      	movs	r1, #254	@ 0xfe
 8003464:	0018      	movs	r0, r3
 8003466:	f7ff fd71 	bl	8002f4c <SD_TxDataBlock>
 800346a:	1e03      	subs	r3, r0, #0
 800346c:	d035      	beq.n	80034da <SD_disk_write+0xee>
      count = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	e032      	b.n	80034da <SD_disk_write+0xee>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8003474:	4b20      	ldr	r3, [pc, #128]	@ (80034f8 <SD_disk_write+0x10c>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	001a      	movs	r2, r3
 800347a:	2302      	movs	r3, #2
 800347c:	4013      	ands	r3, r2
 800347e:	d008      	beq.n	8003492 <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 8003480:	2100      	movs	r1, #0
 8003482:	2077      	movs	r0, #119	@ 0x77
 8003484:	f7ff fdb5 	bl	8002ff2 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	0019      	movs	r1, r3
 800348c:	2057      	movs	r0, #87	@ 0x57
 800348e:	f7ff fdb0 	bl	8002ff2 <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	0019      	movs	r1, r3
 8003496:	2059      	movs	r0, #89	@ 0x59
 8003498:	f7ff fdab 	bl	8002ff2 <SD_SendCmd>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d11c      	bne.n	80034da <SD_disk_write+0xee>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	21fc      	movs	r1, #252	@ 0xfc
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7ff fd51 	bl	8002f4c <SD_TxDataBlock>
 80034aa:	1e03      	subs	r3, r0, #0
 80034ac:	d00c      	beq.n	80034c8 <SD_disk_write+0xdc>
        buff += 512;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2280      	movs	r2, #128	@ 0x80
 80034b2:	0092      	lsls	r2, r2, #2
 80034b4:	4694      	mov	ip, r2
 80034b6:	4463      	add	r3, ip
 80034b8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	3b01      	subs	r3, #1
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ec      	bne.n	80034a0 <SD_disk_write+0xb4>
 80034c6:	e000      	b.n	80034ca <SD_disk_write+0xde>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80034c8:	46c0      	nop			@ (mov r8, r8)
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80034ca:	21fd      	movs	r1, #253	@ 0xfd
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7ff fd3d 	bl	8002f4c <SD_TxDataBlock>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d101      	bne.n	80034da <SD_disk_write+0xee>
      {
        count = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 80034da:	f7ff fc1a 	bl	8002d12 <DESELECT>
  SPI_RxByte();
 80034de:	f7ff fc5d 	bl	8002d9c <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	1e5a      	subs	r2, r3, #1
 80034e6:	4193      	sbcs	r3, r2
 80034e8:	b2db      	uxtb	r3, r3
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	20000000 	.word	0x20000000
 80034f8:	2000020c 	.word	0x2000020c

080034fc <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b08b      	sub	sp, #44	@ 0x2c
 8003500:	af00      	add	r7, sp, #0
 8003502:	603a      	str	r2, [r7, #0]
 8003504:	1dfb      	adds	r3, r7, #7
 8003506:	1c02      	adds	r2, r0, #0
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	1dbb      	adds	r3, r7, #6
 800350c:	1c0a      	adds	r2, r1, #0
 800350e:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8003514:	1dfb      	adds	r3, r7, #7
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <SD_disk_ioctl+0x24>
 800351c:	2304      	movs	r3, #4
 800351e:	e119      	b.n	8003754 <SD_disk_ioctl+0x258>
  res = RES_ERROR;
 8003520:	2327      	movs	r3, #39	@ 0x27
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
  if (ctrl == CTRL_POWER)
 8003528:	1dbb      	adds	r3, r7, #6
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b05      	cmp	r3, #5
 800352e:	d127      	bne.n	8003580 <SD_disk_ioctl+0x84>
  {
    switch (*ptr)
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d013      	beq.n	8003560 <SD_disk_ioctl+0x64>
 8003538:	dc1d      	bgt.n	8003576 <SD_disk_ioctl+0x7a>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <SD_disk_ioctl+0x48>
 800353e:	2b01      	cmp	r3, #1
 8003540:	d007      	beq.n	8003552 <SD_disk_ioctl+0x56>
 8003542:	e018      	b.n	8003576 <SD_disk_ioctl+0x7a>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8003544:	f7ff fcba 	bl	8002ebc <SD_PowerOff>
      res = RES_OK;
 8003548:	2327      	movs	r3, #39	@ 0x27
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
      break;
 8003550:	e0fd      	b.n	800374e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();   /* Power On */
 8003552:	f7ff fc6b 	bl	8002e2c <SD_PowerOn>
      res = RES_OK;
 8003556:	2327      	movs	r3, #39	@ 0x27
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
      break;
 800355e:	e0f6      	b.n	800374e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	1c5c      	adds	r4, r3, #1
 8003564:	f7ff fcb4 	bl	8002ed0 <SD_CheckPower>
 8003568:	0003      	movs	r3, r0
 800356a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800356c:	2327      	movs	r3, #39	@ 0x27
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
      break;
 8003574:	e0eb      	b.n	800374e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8003576:	2327      	movs	r3, #39	@ 0x27
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2204      	movs	r2, #4
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	e0e6      	b.n	800374e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003580:	4b76      	ldr	r3, [pc, #472]	@ (800375c <SD_disk_ioctl+0x260>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	001a      	movs	r2, r3
 8003588:	2301      	movs	r3, #1
 800358a:	4013      	ands	r3, r2
 800358c:	d001      	beq.n	8003592 <SD_disk_ioctl+0x96>
 800358e:	2303      	movs	r3, #3
 8003590:	e0e0      	b.n	8003754 <SD_disk_ioctl+0x258>
    SELECT();
 8003592:	f7ff fbaf 	bl	8002cf4 <SELECT>
    switch (ctrl)
 8003596:	1dbb      	adds	r3, r7, #6
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b0d      	cmp	r3, #13
 800359c:	d900      	bls.n	80035a0 <SD_disk_ioctl+0xa4>
 800359e:	e0c6      	b.n	800372e <SD_disk_ioctl+0x232>
 80035a0:	009a      	lsls	r2, r3, #2
 80035a2:	4b6f      	ldr	r3, [pc, #444]	@ (8003760 <SD_disk_ioctl+0x264>)
 80035a4:	18d3      	adds	r3, r2, r3
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80035aa:	2100      	movs	r1, #0
 80035ac:	2049      	movs	r0, #73	@ 0x49
 80035ae:	f7ff fd20 	bl	8002ff2 <SD_SendCmd>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d000      	beq.n	80035b8 <SD_disk_ioctl+0xbc>
 80035b6:	e0bf      	b.n	8003738 <SD_disk_ioctl+0x23c>
 80035b8:	240c      	movs	r4, #12
 80035ba:	193b      	adds	r3, r7, r4
 80035bc:	2110      	movs	r1, #16
 80035be:	0018      	movs	r0, r3
 80035c0:	f7ff fc90 	bl	8002ee4 <SD_RxDataBlock>
 80035c4:	1e03      	subs	r3, r0, #0
 80035c6:	d100      	bne.n	80035ca <SD_disk_ioctl+0xce>
 80035c8:	e0b6      	b.n	8003738 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80035ca:	0022      	movs	r2, r4
 80035cc:	18bb      	adds	r3, r7, r2
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	099b      	lsrs	r3, r3, #6
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d113      	bne.n	8003600 <SD_disk_ioctl+0x104>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80035d8:	0011      	movs	r1, r2
 80035da:	18bb      	adds	r3, r7, r2
 80035dc:	7a5b      	ldrb	r3, [r3, #9]
 80035de:	001a      	movs	r2, r3
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	7a1b      	ldrb	r3, [r3, #8]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	18d3      	adds	r3, r2, r3
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	211e      	movs	r1, #30
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	3201      	adds	r2, #1
 80035f2:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	029a      	lsls	r2, r3, #10
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e039      	b.n	8003674 <SD_disk_ioctl+0x178>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003600:	200c      	movs	r0, #12
 8003602:	183b      	adds	r3, r7, r0
 8003604:	795b      	ldrb	r3, [r3, #5]
 8003606:	220f      	movs	r2, #15
 8003608:	4013      	ands	r3, r2
 800360a:	b2da      	uxtb	r2, r3
 800360c:	183b      	adds	r3, r7, r0
 800360e:	7a9b      	ldrb	r3, [r3, #10]
 8003610:	09db      	lsrs	r3, r3, #7
 8003612:	b2db      	uxtb	r3, r3
 8003614:	18d3      	adds	r3, r2, r3
 8003616:	b2da      	uxtb	r2, r3
 8003618:	183b      	adds	r3, r7, r0
 800361a:	7a5b      	ldrb	r3, [r3, #9]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2106      	movs	r1, #6
 8003622:	400b      	ands	r3, r1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	18d3      	adds	r3, r2, r3
 8003628:	b2da      	uxtb	r2, r3
 800362a:	2426      	movs	r4, #38	@ 0x26
 800362c:	193b      	adds	r3, r7, r4
 800362e:	3202      	adds	r2, #2
 8003630:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003632:	183b      	adds	r3, r7, r0
 8003634:	7a1b      	ldrb	r3, [r3, #8]
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	b2db      	uxtb	r3, r3
 800363a:	001a      	movs	r2, r3
 800363c:	183b      	adds	r3, r7, r0
 800363e:	79db      	ldrb	r3, [r3, #7]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	b29b      	uxth	r3, r3
 8003644:	18d3      	adds	r3, r2, r3
 8003646:	b29a      	uxth	r2, r3
 8003648:	183b      	adds	r3, r7, r0
 800364a:	799b      	ldrb	r3, [r3, #6]
 800364c:	029b      	lsls	r3, r3, #10
 800364e:	b299      	uxth	r1, r3
 8003650:	23c0      	movs	r3, #192	@ 0xc0
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	400b      	ands	r3, r1
 8003656:	b29b      	uxth	r3, r3
 8003658:	18d3      	adds	r3, r2, r3
 800365a:	b29a      	uxth	r2, r3
 800365c:	211e      	movs	r1, #30
 800365e:	187b      	adds	r3, r7, r1
 8003660:	3201      	adds	r2, #1
 8003662:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003664:	187b      	adds	r3, r7, r1
 8003666:	881a      	ldrh	r2, [r3, #0]
 8003668:	193b      	adds	r3, r7, r4
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	3b09      	subs	r3, #9
 800366e:	409a      	lsls	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8003674:	2327      	movs	r3, #39	@ 0x27
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800367c:	e05c      	b.n	8003738 <SD_disk_ioctl+0x23c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2280      	movs	r2, #128	@ 0x80
 8003682:	0092      	lsls	r2, r2, #2
 8003684:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003686:	2327      	movs	r3, #39	@ 0x27
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
      break;
 800368e:	e05a      	b.n	8003746 <SD_disk_ioctl+0x24a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003690:	f7ff fbb0 	bl	8002df4 <SD_ReadyWait>
 8003694:	0003      	movs	r3, r0
 8003696:	2bff      	cmp	r3, #255	@ 0xff
 8003698:	d150      	bne.n	800373c <SD_disk_ioctl+0x240>
 800369a:	2327      	movs	r3, #39	@ 0x27
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
      break;
 80036a2:	e04b      	b.n	800373c <SD_disk_ioctl+0x240>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80036a4:	2100      	movs	r1, #0
 80036a6:	2049      	movs	r0, #73	@ 0x49
 80036a8:	f7ff fca3 	bl	8002ff2 <SD_SendCmd>
 80036ac:	1e03      	subs	r3, r0, #0
 80036ae:	d147      	bne.n	8003740 <SD_disk_ioctl+0x244>
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	2110      	movs	r1, #16
 80036b4:	0018      	movs	r0, r3
 80036b6:	f7ff fc15 	bl	8002ee4 <SD_RxDataBlock>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d040      	beq.n	8003740 <SD_disk_ioctl+0x244>
 80036be:	2327      	movs	r3, #39	@ 0x27
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
      break;
 80036c6:	e03b      	b.n	8003740 <SD_disk_ioctl+0x244>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80036c8:	2100      	movs	r1, #0
 80036ca:	204a      	movs	r0, #74	@ 0x4a
 80036cc:	f7ff fc91 	bl	8002ff2 <SD_SendCmd>
 80036d0:	1e03      	subs	r3, r0, #0
 80036d2:	d137      	bne.n	8003744 <SD_disk_ioctl+0x248>
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	2110      	movs	r1, #16
 80036d8:	0018      	movs	r0, r3
 80036da:	f7ff fc03 	bl	8002ee4 <SD_RxDataBlock>
 80036de:	1e03      	subs	r3, r0, #0
 80036e0:	d030      	beq.n	8003744 <SD_disk_ioctl+0x248>
 80036e2:	2327      	movs	r3, #39	@ 0x27
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
      break;
 80036ea:	e02b      	b.n	8003744 <SD_disk_ioctl+0x248>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80036ec:	2100      	movs	r1, #0
 80036ee:	207a      	movs	r0, #122	@ 0x7a
 80036f0:	f7ff fc7f 	bl	8002ff2 <SD_SendCmd>
 80036f4:	1e03      	subs	r3, r0, #0
 80036f6:	d11a      	bne.n	800372e <SD_disk_ioctl+0x232>
      {
        for (n = 0; n < 4; n++)
 80036f8:	2326      	movs	r3, #38	@ 0x26
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	e00c      	b.n	800371c <SD_disk_ioctl+0x220>
        {
          *ptr++ = SPI_RxByte();
 8003702:	6a3c      	ldr	r4, [r7, #32]
 8003704:	1c63      	adds	r3, r4, #1
 8003706:	623b      	str	r3, [r7, #32]
 8003708:	f7ff fb48 	bl	8002d9c <SPI_RxByte>
 800370c:	0003      	movs	r3, r0
 800370e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003710:	2126      	movs	r1, #38	@ 0x26
 8003712:	187b      	adds	r3, r7, r1
 8003714:	781a      	ldrb	r2, [r3, #0]
 8003716:	187b      	adds	r3, r7, r1
 8003718:	3201      	adds	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	2326      	movs	r3, #38	@ 0x26
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b03      	cmp	r3, #3
 8003724:	d9ed      	bls.n	8003702 <SD_disk_ioctl+0x206>
        }
        res = RES_OK;
 8003726:	2327      	movs	r3, #39	@ 0x27
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	2200      	movs	r2, #0
 800372c:	701a      	strb	r2, [r3, #0]
      }
    default:
      res = RES_PARERR;
 800372e:	2327      	movs	r3, #39	@ 0x27
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	2204      	movs	r2, #4
 8003734:	701a      	strb	r2, [r3, #0]
 8003736:	e006      	b.n	8003746 <SD_disk_ioctl+0x24a>
      break;
 8003738:	46c0      	nop			@ (mov r8, r8)
 800373a:	e004      	b.n	8003746 <SD_disk_ioctl+0x24a>
      break;
 800373c:	46c0      	nop			@ (mov r8, r8)
 800373e:	e002      	b.n	8003746 <SD_disk_ioctl+0x24a>
      break;
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	e000      	b.n	8003746 <SD_disk_ioctl+0x24a>
      break;
 8003744:	46c0      	nop			@ (mov r8, r8)
    }
    DESELECT();
 8003746:	f7ff fae4 	bl	8002d12 <DESELECT>
    SPI_RxByte();
 800374a:	f7ff fb27 	bl	8002d9c <SPI_RxByte>
  }
  return res;
 800374e:	2327      	movs	r3, #39	@ 0x27
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	781b      	ldrb	r3, [r3, #0]
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b00b      	add	sp, #44	@ 0x2c
 800375a:	bd90      	pop	{r4, r7, pc}
 800375c:	20000000 	.word	0x20000000
 8003760:	080102c0 	.word	0x080102c0

08003764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003766:	b0b3      	sub	sp, #204	@ 0xcc
 8003768:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800376a:	f001 fb61 	bl	8004e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800376e:	f000 f8eb 	bl	8003948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003772:	f000 fa4f 	bl	8003c14 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003776:	f000 f9e5 	bl	8003b44 <MX_SPI1_Init>
  MX_FATFS_Init();
 800377a:	f004 fc05 	bl	8007f88 <MX_FATFS_Init>
  MX_ADC_Init();
 800377e:	f000 f94f 	bl	8003a20 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8003782:	f000 fa17 	bl	8003bb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int number = read_SD();
 8003786:	f000 fba7 	bl	8003ed8 <read_SD>
 800378a:	0003      	movs	r3, r0
 800378c:	2284      	movs	r2, #132	@ 0x84
 800378e:	2018      	movs	r0, #24
 8003790:	1811      	adds	r1, r2, r0
 8003792:	19c9      	adds	r1, r1, r7
 8003794:	600b      	str	r3, [r1, #0]
  communicate_value(number);
 8003796:	1813      	adds	r3, r2, r0
 8003798:	19db      	adds	r3, r3, r7
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0018      	movs	r0, r3
 800379e:	f000 fbef 	bl	8003f80 <communicate_value>
  HAL_Delay(2000);
 80037a2:	23fa      	movs	r3, #250	@ 0xfa
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	0018      	movs	r0, r3
 80037a8:	f001 fbb2 	bl	8004f10 <HAL_Delay>

   char msg[128];
   start_time_ms = HAL_GetTick();
 80037ac:	f001 fba6 	bl	8004efc <HAL_GetTick>
 80037b0:	0002      	movs	r2, r0
 80037b2:	4b57      	ldr	r3, [pc, #348]	@ (8003910 <main+0x1ac>)
 80037b4:	601a      	str	r2, [r3, #0]
   HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80037b6:	4b57      	ldr	r3, [pc, #348]	@ (8003914 <main+0x1b0>)
 80037b8:	2100      	movs	r1, #0
 80037ba:	0018      	movs	r0, r3
 80037bc:	f002 f820 	bl	8005800 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1) {
      if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET) {
 80037c0:	23a0      	movs	r3, #160	@ 0xa0
 80037c2:	05db      	lsls	r3, r3, #23
 80037c4:	2101      	movs	r1, #1
 80037c6:	0018      	movs	r0, r3
 80037c8:	f002 faea 	bl	8005da0 <HAL_GPIO_ReadPin>
 80037cc:	0003      	movs	r3, r0
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d000      	beq.n	80037d4 <main+0x70>
 80037d2:	e08f      	b.n	80038f4 <main+0x190>
         HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_SET);
 80037d4:	23a0      	movs	r3, #160	@ 0xa0
 80037d6:	05db      	lsls	r3, r3, #23
 80037d8:	2201      	movs	r2, #1
 80037da:	2102      	movs	r1, #2
 80037dc:	0018      	movs	r0, r3
 80037de:	f002 fafc 	bl	8005dda <HAL_GPIO_WritePin>
         uint32_t current_time_ms = HAL_GetTick();
 80037e2:	f001 fb8b 	bl	8004efc <HAL_GetTick>
 80037e6:	0003      	movs	r3, r0
 80037e8:	2280      	movs	r2, #128	@ 0x80
 80037ea:	2018      	movs	r0, #24
 80037ec:	1811      	adds	r1, r2, r0
 80037ee:	19c9      	adds	r1, r1, r7
 80037f0:	600b      	str	r3, [r1, #0]
         seconds_since_start = (current_time_ms - start_time_ms) / 1000.0f;
 80037f2:	4b47      	ldr	r3, [pc, #284]	@ (8003910 <main+0x1ac>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	1812      	adds	r2, r2, r0
 80037f8:	19d2      	adds	r2, r2, r7
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	0018      	movs	r0, r3
 8003800:	f7fd fa84 	bl	8000d0c <__aeabi_ui2f>
 8003804:	1c03      	adds	r3, r0, #0
 8003806:	4944      	ldr	r1, [pc, #272]	@ (8003918 <main+0x1b4>)
 8003808:	1c18      	adds	r0, r3, #0
 800380a:	f7fc ffd5 	bl	80007b8 <__aeabi_fdiv>
 800380e:	1c03      	adds	r3, r0, #0
 8003810:	1c1a      	adds	r2, r3, #0
 8003812:	4b42      	ldr	r3, [pc, #264]	@ (800391c <main+0x1b8>)
 8003814:	601a      	str	r2, [r3, #0]
         readNumber();
 8003816:	f000 fe7b 	bl	8004510 <readNumber>
         Measurement_of_ADC_Voltage_18650();
 800381a:	f000 fc31 	bl	8004080 <Measurement_of_ADC_Voltage_18650>
         Measurement_of_ADC_Voltage_CMOS();
 800381e:	f000 fc8f 	bl	8004140 <Measurement_of_ADC_Voltage_CMOS>
         Measurement_of_ADC_Current_CMOS();
 8003822:	f000 fd3d 	bl	80042a0 <Measurement_of_ADC_Current_CMOS>
         Measurement_of_ADC_Current_18650();
 8003826:	f000 fceb 	bl	8004200 <Measurement_of_ADC_Current_18650>
         Measurement_of_Load_Voltage();
 800382a:	f000 fd89 	bl	8004340 <Measurement_of_Load_Voltage>
         C_CMOS = Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS(V_DiffAmp_CMOS, valueToAdjust);
 800382e:	4b3c      	ldr	r3, [pc, #240]	@ (8003920 <main+0x1bc>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b3c      	ldr	r3, [pc, #240]	@ (8003924 <main+0x1c0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	0019      	movs	r1, r3
 8003838:	1c10      	adds	r0, r2, #0
 800383a:	f001 f819 	bl	8004870 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS>
 800383e:	1c02      	adds	r2, r0, #0
 8003840:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <main+0x1c4>)
 8003842:	601a      	str	r2, [r3, #0]
         C_18650 = Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650(V_DiffAmp_18650, valueToAdjust);
 8003844:	4b39      	ldr	r3, [pc, #228]	@ (800392c <main+0x1c8>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4b36      	ldr	r3, [pc, #216]	@ (8003924 <main+0x1c0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0019      	movs	r1, r3
 800384e:	1c10      	adds	r0, r2, #0
 8003850:	f001 f862 	bl	8004918 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650>
 8003854:	1c02      	adds	r2, r0, #0
 8003856:	4b36      	ldr	r3, [pc, #216]	@ (8003930 <main+0x1cc>)
 8003858:	601a      	str	r2, [r3, #0]

         process_SD_card();
 800385a:	f000 fa81 	bl	8003d60 <process_SD_card>
         sprintf(msg, "%.3f,%.3f,%.5f,%.3f,%.5f,%d,%d\r\n",
 800385e:	4b2f      	ldr	r3, [pc, #188]	@ (800391c <main+0x1b8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	1c18      	adds	r0, r3, #0
 8003864:	f7ff f950 	bl	8002b08 <__aeabi_f2d>
 8003868:	6138      	str	r0, [r7, #16]
 800386a:	6179      	str	r1, [r7, #20]
 800386c:	4b31      	ldr	r3, [pc, #196]	@ (8003934 <main+0x1d0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	1c18      	adds	r0, r3, #0
 8003872:	f7ff f949 	bl	8002b08 <__aeabi_f2d>
 8003876:	0004      	movs	r4, r0
 8003878:	000d      	movs	r5, r1
 800387a:	4b2d      	ldr	r3, [pc, #180]	@ (8003930 <main+0x1cc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	1c18      	adds	r0, r3, #0
 8003880:	f7ff f942 	bl	8002b08 <__aeabi_f2d>
 8003884:	60b8      	str	r0, [r7, #8]
 8003886:	60f9      	str	r1, [r7, #12]
 8003888:	4b2b      	ldr	r3, [pc, #172]	@ (8003938 <main+0x1d4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	1c18      	adds	r0, r3, #0
 800388e:	f7ff f93b 	bl	8002b08 <__aeabi_f2d>
 8003892:	6038      	str	r0, [r7, #0]
 8003894:	6079      	str	r1, [r7, #4]
 8003896:	4b24      	ldr	r3, [pc, #144]	@ (8003928 <main+0x1c4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	1c18      	adds	r0, r3, #0
 800389c:	f7ff f934 	bl	8002b08 <__aeabi_f2d>
 80038a0:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <main+0x1c0>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b25      	ldr	r3, [pc, #148]	@ (800393c <main+0x1d8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4e25      	ldr	r6, [pc, #148]	@ (8003940 <main+0x1dc>)
 80038aa:	46b4      	mov	ip, r6
 80038ac:	2618      	movs	r6, #24
 80038ae:	19be      	adds	r6, r7, r6
 80038b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80038b2:	9208      	str	r2, [sp, #32]
 80038b4:	9006      	str	r0, [sp, #24]
 80038b6:	9107      	str	r1, [sp, #28]
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	9104      	str	r1, [sp, #16]
 80038be:	9205      	str	r2, [sp, #20]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	9102      	str	r1, [sp, #8]
 80038c6:	9203      	str	r2, [sp, #12]
 80038c8:	9400      	str	r4, [sp, #0]
 80038ca:	9501      	str	r5, [sp, #4]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	4661      	mov	r1, ip
 80038d2:	0030      	movs	r0, r6
 80038d4:	f008 ffa4 	bl	800c820 <siprintf>
                       V_CMOS,         // CMOS Voltage
         			  C_CMOS,         // CMOS Current
                       valueToAdjust,  // Threshold

         			  write_num);//Total number of measurements
               HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80038d8:	2418      	movs	r4, #24
 80038da:	193b      	adds	r3, r7, r4
 80038dc:	0018      	movs	r0, r3
 80038de:	f7fc fc13 	bl	8000108 <strlen>
 80038e2:	0003      	movs	r3, r0
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	2301      	movs	r3, #1
 80038e8:	425b      	negs	r3, r3
 80038ea:	1939      	adds	r1, r7, r4
 80038ec:	4815      	ldr	r0, [pc, #84]	@ (8003944 <main+0x1e0>)
 80038ee:	f003 fe37 	bl	8007560 <HAL_UART_Transmit>
 80038f2:	e006      	b.n	8003902 <main+0x19e>
      } else {
         HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 80038f4:	23a0      	movs	r3, #160	@ 0xa0
 80038f6:	05db      	lsls	r3, r3, #23
 80038f8:	2200      	movs	r2, #0
 80038fa:	2102      	movs	r1, #2
 80038fc:	0018      	movs	r0, r3
 80038fe:	f002 fa6c 	bl	8005dda <HAL_GPIO_WritePin>
      }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      write_num++;
 8003902:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <main+0x1d8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <main+0x1d8>)
 800390a:	601a      	str	r2, [r3, #0]
      if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET) {
 800390c:	e758      	b.n	80037c0 <main+0x5c>
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	20000370 	.word	0x20000370
 8003914:	20000210 	.word	0x20000210
 8003918:	447a0000 	.word	0x447a0000
 800391c:	2000036c 	.word	0x2000036c
 8003920:	2000035c 	.word	0x2000035c
 8003924:	20000374 	.word	0x20000374
 8003928:	20000360 	.word	0x20000360
 800392c:	20000358 	.word	0x20000358
 8003930:	20000364 	.word	0x20000364
 8003934:	20000350 	.word	0x20000350
 8003938:	20000354 	.word	0x20000354
 800393c:	2000034c 	.word	0x2000034c
 8003940:	08010150 	.word	0x08010150
 8003944:	200002c4 	.word	0x200002c4

08003948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b099      	sub	sp, #100	@ 0x64
 800394c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800394e:	242c      	movs	r4, #44	@ 0x2c
 8003950:	193b      	adds	r3, r7, r4
 8003952:	0018      	movs	r0, r3
 8003954:	2334      	movs	r3, #52	@ 0x34
 8003956:	001a      	movs	r2, r3
 8003958:	2100      	movs	r1, #0
 800395a:	f008 ffcd 	bl	800c8f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800395e:	2318      	movs	r3, #24
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	0018      	movs	r0, r3
 8003964:	2314      	movs	r3, #20
 8003966:	001a      	movs	r2, r3
 8003968:	2100      	movs	r1, #0
 800396a:	f008 ffc5 	bl	800c8f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800396e:	003b      	movs	r3, r7
 8003970:	0018      	movs	r0, r3
 8003972:	2318      	movs	r3, #24
 8003974:	001a      	movs	r2, r3
 8003976:	2100      	movs	r1, #0
 8003978:	f008 ffbe 	bl	800c8f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800397c:	4b26      	ldr	r3, [pc, #152]	@ (8003a18 <SystemClock_Config+0xd0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a26      	ldr	r2, [pc, #152]	@ (8003a1c <SystemClock_Config+0xd4>)
 8003982:	401a      	ands	r2, r3
 8003984:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <SystemClock_Config+0xd0>)
 8003986:	2180      	movs	r1, #128	@ 0x80
 8003988:	0109      	lsls	r1, r1, #4
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800398e:	0021      	movs	r1, r4
 8003990:	187b      	adds	r3, r7, r1
 8003992:	2210      	movs	r2, #16
 8003994:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003996:	187b      	adds	r3, r7, r1
 8003998:	2201      	movs	r2, #1
 800399a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800399c:	187b      	adds	r3, r7, r1
 800399e:	2200      	movs	r2, #0
 80039a0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	22c0      	movs	r2, #192	@ 0xc0
 80039a6:	0212      	lsls	r2, r2, #8
 80039a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80039aa:	187b      	adds	r3, r7, r1
 80039ac:	2200      	movs	r2, #0
 80039ae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	0018      	movs	r0, r3
 80039b4:	f002 fa2e 	bl	8005e14 <HAL_RCC_OscConfig>
 80039b8:	1e03      	subs	r3, r0, #0
 80039ba:	d001      	beq.n	80039c0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80039bc:	f001 f800 	bl	80049c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039c0:	2118      	movs	r1, #24
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	220f      	movs	r2, #15
 80039c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	2200      	movs	r2, #0
 80039cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039ce:	187b      	adds	r3, r7, r1
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039d4:	187b      	adds	r3, r7, r1
 80039d6:	2200      	movs	r2, #0
 80039d8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	2200      	movs	r2, #0
 80039de:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	2100      	movs	r1, #0
 80039e4:	0018      	movs	r0, r3
 80039e6:	f002 fd91 	bl	800650c <HAL_RCC_ClockConfig>
 80039ea:	1e03      	subs	r3, r0, #0
 80039ec:	d001      	beq.n	80039f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80039ee:	f000 ffe7 	bl	80049c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80039f2:	003b      	movs	r3, r7
 80039f4:	2202      	movs	r2, #2
 80039f6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039f8:	003b      	movs	r3, r7
 80039fa:	2200      	movs	r2, #0
 80039fc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039fe:	003b      	movs	r3, r7
 8003a00:	0018      	movs	r0, r3
 8003a02:	f002 ffa7 	bl	8006954 <HAL_RCCEx_PeriphCLKConfig>
 8003a06:	1e03      	subs	r3, r0, #0
 8003a08:	d001      	beq.n	8003a0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003a0a:	f000 ffd9 	bl	80049c0 <Error_Handler>
  }
}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b019      	add	sp, #100	@ 0x64
 8003a14:	bd90      	pop	{r4, r7, pc}
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	ffffe7ff 	.word	0xffffe7ff

08003a20 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a26:	003b      	movs	r3, r7
 8003a28:	0018      	movs	r0, r3
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	001a      	movs	r2, r3
 8003a2e:	2100      	movs	r1, #0
 8003a30:	f008 ff62 	bl	800c8f8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003a34:	4b3d      	ldr	r3, [pc, #244]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a36:	4a3e      	ldr	r2, [pc, #248]	@ (8003b30 <MX_ADC_Init+0x110>)
 8003a38:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003a3a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a40:	4b3a      	ldr	r3, [pc, #232]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a42:	2280      	movs	r2, #128	@ 0x80
 8003a44:	0612      	lsls	r2, r2, #24
 8003a46:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003a48:	4b38      	ldr	r3, [pc, #224]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8003a4e:	4b37      	ldr	r3, [pc, #220]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a50:	2207      	movs	r2, #7
 8003a52:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003a54:	4b35      	ldr	r3, [pc, #212]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a5a:	4b34      	ldr	r3, [pc, #208]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003a60:	4b32      	ldr	r3, [pc, #200]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a62:	2220      	movs	r2, #32
 8003a64:	2101      	movs	r1, #1
 8003a66:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003a68:	4b30      	ldr	r3, [pc, #192]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a6a:	2221      	movs	r2, #33	@ 0x21
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a70:	4b2e      	ldr	r3, [pc, #184]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a76:	4b2d      	ldr	r3, [pc, #180]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a78:	22c2      	movs	r2, #194	@ 0xc2
 8003a7a:	32ff      	adds	r2, #255	@ 0xff
 8003a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a80:	222c      	movs	r2, #44	@ 0x2c
 8003a82:	2100      	movs	r1, #0
 8003a84:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a86:	4b29      	ldr	r3, [pc, #164]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a88:	2204      	movs	r2, #4
 8003a8a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003a8c:	4b27      	ldr	r3, [pc, #156]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003a92:	4b26      	ldr	r3, [pc, #152]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8003a98:	4b24      	ldr	r3, [pc, #144]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003a9e:	4b23      	ldr	r3, [pc, #140]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003aa4:	4b21      	ldr	r3, [pc, #132]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f001 fa56 	bl	8004f58 <HAL_ADC_Init>
 8003aac:	1e03      	subs	r3, r0, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003ab0:	f000 ff86 	bl	80049c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003ab4:	003b      	movs	r3, r7
 8003ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b34 <MX_ADC_Init+0x114>)
 8003ab8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003aba:	003b      	movs	r3, r7
 8003abc:	2280      	movs	r2, #128	@ 0x80
 8003abe:	0152      	lsls	r2, r2, #5
 8003ac0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003ac2:	003a      	movs	r2, r7
 8003ac4:	4b19      	ldr	r3, [pc, #100]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f001 fcf5 	bl	80054b8 <HAL_ADC_ConfigChannel>
 8003ace:	1e03      	subs	r3, r0, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003ad2:	f000 ff75 	bl	80049c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003ad6:	003b      	movs	r3, r7
 8003ad8:	4a17      	ldr	r2, [pc, #92]	@ (8003b38 <MX_ADC_Init+0x118>)
 8003ada:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003adc:	003a      	movs	r2, r7
 8003ade:	4b13      	ldr	r3, [pc, #76]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003ae0:	0011      	movs	r1, r2
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f001 fce8 	bl	80054b8 <HAL_ADC_ConfigChannel>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d001      	beq.n	8003af0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003aec:	f000 ff68 	bl	80049c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003af0:	003b      	movs	r3, r7
 8003af2:	4a12      	ldr	r2, [pc, #72]	@ (8003b3c <MX_ADC_Init+0x11c>)
 8003af4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003af6:	003a      	movs	r2, r7
 8003af8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003afa:	0011      	movs	r1, r2
 8003afc:	0018      	movs	r0, r3
 8003afe:	f001 fcdb 	bl	80054b8 <HAL_ADC_ConfigChannel>
 8003b02:	1e03      	subs	r3, r0, #0
 8003b04:	d001      	beq.n	8003b0a <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8003b06:	f000 ff5b 	bl	80049c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003b0a:	003b      	movs	r3, r7
 8003b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b40 <MX_ADC_Init+0x120>)
 8003b0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b10:	003a      	movs	r2, r7
 8003b12:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <MX_ADC_Init+0x10c>)
 8003b14:	0011      	movs	r1, r2
 8003b16:	0018      	movs	r0, r3
 8003b18:	f001 fcce 	bl	80054b8 <HAL_ADC_ConfigChannel>
 8003b1c:	1e03      	subs	r3, r0, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8003b20:	f000 ff4e 	bl	80049c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003b24:	46c0      	nop			@ (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000210 	.word	0x20000210
 8003b30:	40012400 	.word	0x40012400
 8003b34:	24000200 	.word	0x24000200
 8003b38:	30001000 	.word	0x30001000
 8003b3c:	34002000 	.word	0x34002000
 8003b40:	3c008000 	.word	0x3c008000

08003b44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003b48:	4b18      	ldr	r3, [pc, #96]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b4a:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <MX_SPI1_Init+0x6c>)
 8003b4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b4e:	4b17      	ldr	r3, [pc, #92]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b50:	2282      	movs	r2, #130	@ 0x82
 8003b52:	0052      	lsls	r2, r2, #1
 8003b54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b56:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b5c:	4b13      	ldr	r3, [pc, #76]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b62:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b68:	4b10      	ldr	r3, [pc, #64]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b70:	2280      	movs	r2, #128	@ 0x80
 8003b72:	0092      	lsls	r2, r2, #2
 8003b74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b76:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b82:	4b0a      	ldr	r3, [pc, #40]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b88:	4b08      	ldr	r3, [pc, #32]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003b8e:	4b07      	ldr	r3, [pc, #28]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b90:	2207      	movs	r2, #7
 8003b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b94:	4b05      	ldr	r3, [pc, #20]	@ (8003bac <MX_SPI1_Init+0x68>)
 8003b96:	0018      	movs	r0, r3
 8003b98:	f003 f808 	bl	8006bac <HAL_SPI_Init>
 8003b9c:	1e03      	subs	r3, r0, #0
 8003b9e:	d001      	beq.n	8003ba4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ba0:	f000 ff0e 	bl	80049c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ba4:	46c0      	nop			@ (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	2000026c 	.word	0x2000026c
 8003bb0:	40013000 	.word	0x40013000

08003bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003bb8:	4b14      	ldr	r3, [pc, #80]	@ (8003c0c <MX_USART2_UART_Init+0x58>)
 8003bba:	4a15      	ldr	r2, [pc, #84]	@ (8003c10 <MX_USART2_UART_Init+0x5c>)
 8003bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003bbe:	4b13      	ldr	r3, [pc, #76]	@ (8003c0c <MX_USART2_UART_Init+0x58>)
 8003bc0:	22e1      	movs	r2, #225	@ 0xe1
 8003bc2:	0252      	lsls	r2, r2, #9
 8003bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bc6:	4b11      	ldr	r3, [pc, #68]	@ (8003c0c <MX_USART2_UART_Init+0x58>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8003c0c <MX_USART2_UART_Init+0x58>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003c0c <MX_USART2_UART_Init+0x58>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c0c <MX_USART2_UART_Init+0x58>)
 8003bda:	220c      	movs	r2, #12
 8003bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bde:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <MX_USART2_UART_Init+0x58>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003be4:	4b09      	ldr	r3, [pc, #36]	@ (8003c0c <MX_USART2_UART_Init+0x58>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bea:	4b08      	ldr	r3, [pc, #32]	@ (8003c0c <MX_USART2_UART_Init+0x58>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bf0:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <MX_USART2_UART_Init+0x58>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bf6:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <MX_USART2_UART_Init+0x58>)
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f003 fc5d 	bl	80074b8 <HAL_UART_Init>
 8003bfe:	1e03      	subs	r3, r0, #0
 8003c00:	d001      	beq.n	8003c06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003c02:	f000 fedd 	bl	80049c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	200002c4 	.word	0x200002c4
 8003c10:	40004400 	.word	0x40004400

08003c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b089      	sub	sp, #36	@ 0x24
 8003c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c1a:	240c      	movs	r4, #12
 8003c1c:	193b      	adds	r3, r7, r4
 8003c1e:	0018      	movs	r0, r3
 8003c20:	2314      	movs	r3, #20
 8003c22:	001a      	movs	r2, r3
 8003c24:	2100      	movs	r1, #0
 8003c26:	f008 fe67 	bl	800c8f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c2a:	4b44      	ldr	r3, [pc, #272]	@ (8003d3c <MX_GPIO_Init+0x128>)
 8003c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c2e:	4b43      	ldr	r3, [pc, #268]	@ (8003d3c <MX_GPIO_Init+0x128>)
 8003c30:	2104      	movs	r1, #4
 8003c32:	430a      	orrs	r2, r1
 8003c34:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c36:	4b41      	ldr	r3, [pc, #260]	@ (8003d3c <MX_GPIO_Init+0x128>)
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c42:	4b3e      	ldr	r3, [pc, #248]	@ (8003d3c <MX_GPIO_Init+0x128>)
 8003c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c46:	4b3d      	ldr	r3, [pc, #244]	@ (8003d3c <MX_GPIO_Init+0x128>)
 8003c48:	2101      	movs	r1, #1
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d3c <MX_GPIO_Init+0x128>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	2201      	movs	r2, #1
 8003c54:	4013      	ands	r3, r2
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5a:	4b38      	ldr	r3, [pc, #224]	@ (8003d3c <MX_GPIO_Init+0x128>)
 8003c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c5e:	4b37      	ldr	r3, [pc, #220]	@ (8003d3c <MX_GPIO_Init+0x128>)
 8003c60:	2102      	movs	r1, #2
 8003c62:	430a      	orrs	r2, r1
 8003c64:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c66:	4b35      	ldr	r3, [pc, #212]	@ (8003d3c <MX_GPIO_Init+0x128>)
 8003c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CardDetect_Output_Pin|GPIO_PIN_4|User_Input_Status_Light_Red_Pin|User_Input_Status_Light_Green_Pin
 8003c72:	4933      	ldr	r1, [pc, #204]	@ (8003d40 <MX_GPIO_Init+0x12c>)
 8003c74:	23a0      	movs	r3, #160	@ 0xa0
 8003c76:	05db      	lsls	r3, r3, #23
 8003c78:	2200      	movs	r2, #0
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f002 f8ad 	bl	8005dda <HAL_GPIO_WritePin>
                          |User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_OUT_DATA_Pin|SD_OUT_DIGIT_Pin, GPIO_PIN_RESET);
 8003c80:	4b30      	ldr	r3, [pc, #192]	@ (8003d44 <MX_GPIO_Init+0x130>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	2130      	movs	r1, #48	@ 0x30
 8003c86:	0018      	movs	r0, r3
 8003c88:	f002 f8a7 	bl	8005dda <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Discrete_Bit_0_Pin Discrete_Bit_1_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_0_Pin|Discrete_Bit_1_Pin;
 8003c8c:	193b      	adds	r3, r7, r4
 8003c8e:	2203      	movs	r2, #3
 8003c90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c92:	193b      	adds	r3, r7, r4
 8003c94:	2200      	movs	r2, #0
 8003c96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	193b      	adds	r3, r7, r4
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c9e:	193b      	adds	r3, r7, r4
 8003ca0:	4a29      	ldr	r2, [pc, #164]	@ (8003d48 <MX_GPIO_Init+0x134>)
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	0010      	movs	r0, r2
 8003ca6:	f001 fefd 	bl	8005aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Input_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Input_Pin;
 8003caa:	193b      	adds	r3, r7, r4
 8003cac:	2201      	movs	r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cb0:	193b      	adds	r3, r7, r4
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	193b      	adds	r3, r7, r4
 8003cb8:	2200      	movs	r2, #0
 8003cba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_CardDetect_Input_GPIO_Port, &GPIO_InitStruct);
 8003cbc:	193a      	adds	r2, r7, r4
 8003cbe:	23a0      	movs	r3, #160	@ 0xa0
 8003cc0:	05db      	lsls	r3, r3, #23
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f001 feed 	bl	8005aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CardDetect_Output_Pin PA4 User_Input_Status_Light_Red_Pin User_Input_Status_Light_Green_Pin
                           User_Input_Status_Light_Blue_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Output_Pin|GPIO_PIN_4|User_Input_Status_Light_Red_Pin|User_Input_Status_Light_Green_Pin
 8003cca:	193b      	adds	r3, r7, r4
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d40 <MX_GPIO_Init+0x12c>)
 8003cce:	601a      	str	r2, [r3, #0]
                          |User_Input_Status_Light_Blue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd0:	193b      	adds	r3, r7, r4
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	193b      	adds	r3, r7, r4
 8003cd8:	2200      	movs	r2, #0
 8003cda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cdc:	193b      	adds	r3, r7, r4
 8003cde:	2200      	movs	r2, #0
 8003ce0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce2:	193a      	adds	r2, r7, r4
 8003ce4:	23a0      	movs	r3, #160	@ 0xa0
 8003ce6:	05db      	lsls	r3, r3, #23
 8003ce8:	0011      	movs	r1, r2
 8003cea:	0018      	movs	r0, r3
 8003cec:	f001 feda 	bl	8005aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Discrete_Bit_2_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_2_Pin;
 8003cf0:	193b      	adds	r3, r7, r4
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cf6:	193b      	adds	r3, r7, r4
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	193b      	adds	r3, r7, r4
 8003cfe:	2200      	movs	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Discrete_Bit_2_GPIO_Port, &GPIO_InitStruct);
 8003d02:	193b      	adds	r3, r7, r4
 8003d04:	4a0f      	ldr	r2, [pc, #60]	@ (8003d44 <MX_GPIO_Init+0x130>)
 8003d06:	0019      	movs	r1, r3
 8003d08:	0010      	movs	r0, r2
 8003d0a:	f001 fecb 	bl	8005aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_OUT_DATA_Pin SD_OUT_DIGIT_Pin */
  GPIO_InitStruct.Pin = SD_OUT_DATA_Pin|SD_OUT_DIGIT_Pin;
 8003d0e:	0021      	movs	r1, r4
 8003d10:	187b      	adds	r3, r7, r1
 8003d12:	2230      	movs	r2, #48	@ 0x30
 8003d14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	2201      	movs	r2, #1
 8003d1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	2200      	movs	r2, #0
 8003d20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d22:	187b      	adds	r3, r7, r1
 8003d24:	2200      	movs	r2, #0
 8003d26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	4a06      	ldr	r2, [pc, #24]	@ (8003d44 <MX_GPIO_Init+0x130>)
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	0010      	movs	r0, r2
 8003d30:	f001 feb8 	bl	8005aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d34:	46c0      	nop			@ (mov r8, r8)
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b009      	add	sp, #36	@ 0x24
 8003d3a:	bd90      	pop	{r4, r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	00000712 	.word	0x00000712
 8003d44:	50000400 	.word	0x50000400
 8003d48:	50000800 	.word	0x50000800

08003d4c <__io_putchar>:
   set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
   /* Place your implementation of fputc here */
   /* e.g. write a character to the UART3 and Loop until the end of transmission
    */
   // HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
   return ch;
 8003d54:	687b      	ldr	r3, [r7, #4]
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b002      	add	sp, #8
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <process_SD_card>:
 *
 * Note: The ACT light on the SD card breakout board should be flickering if functioning properly. It is
 *       not working properly when the light either stays ON or stays OFF. In that case, check that the
 *       breakout board is correctly wired.
 */
void process_SD_card(void) {
 8003d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d62:	46c6      	mov	lr, r8
 8003d64:	b500      	push	{lr}
 8003d66:	4c4e      	ldr	r4, [pc, #312]	@ (8003ea0 <process_SD_card+0x140>)
 8003d68:	44a5      	add	sp, r4
 8003d6a:	af0e      	add	r7, sp, #56	@ 0x38

   // Buffer for storing the complete string to write
   char writeBuffer[500];  // Adjust the size based on your needs

   // Attempt to mount the SD Card
   fres = f_mount(&FatFs, "", 1);  // 1=mount now
 8003d6c:	4d4d      	ldr	r5, [pc, #308]	@ (8003ea4 <process_SD_card+0x144>)
 8003d6e:	2620      	movs	r6, #32
 8003d70:	19ab      	adds	r3, r5, r6
 8003d72:	19dc      	adds	r4, r3, r7
 8003d74:	494c      	ldr	r1, [pc, #304]	@ (8003ea8 <process_SD_card+0x148>)
 8003d76:	4b4d      	ldr	r3, [pc, #308]	@ (8003eac <process_SD_card+0x14c>)
 8003d78:	199b      	adds	r3, r3, r6
 8003d7a:	19db      	adds	r3, r3, r7
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f006 fcf2 	bl	800a768 <f_mount>
 8003d84:	0003      	movs	r3, r0
 8003d86:	7023      	strb	r3, [r4, #0]
   if (fres != FR_OK) return;      // Exit if fail to mount
 8003d88:	19ab      	adds	r3, r5, r6
 8003d8a:	19db      	adds	r3, r3, r7
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d000      	beq.n	8003d94 <process_SD_card+0x34>
 8003d92:	e07d      	b.n	8003e90 <process_SD_card+0x130>

   // Open or create the file and append data
   fres = f_open(&fil, "Readings.csv", FA_WRITE | FA_READ | FA_OPEN_APPEND);
 8003d94:	19ab      	adds	r3, r5, r6
 8003d96:	19dc      	adds	r4, r3, r7
 8003d98:	4945      	ldr	r1, [pc, #276]	@ (8003eb0 <process_SD_card+0x150>)
 8003d9a:	23fa      	movs	r3, #250	@ 0xfa
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	199b      	adds	r3, r3, r6
 8003da0:	19db      	adds	r3, r3, r7
 8003da2:	2233      	movs	r2, #51	@ 0x33
 8003da4:	0018      	movs	r0, r3
 8003da6:	f006 fd2b 	bl	800a800 <f_open>
 8003daa:	0003      	movs	r3, r0
 8003dac:	7023      	strb	r3, [r4, #0]
   if (fres != FR_OK) {
 8003dae:	19ab      	adds	r3, r5, r6
 8003db0:	19db      	adds	r3, r3, r7
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d006      	beq.n	8003dc6 <process_SD_card+0x66>
      f_mount(NULL, "", 0);  // Dismount the SD card if fail to open
 8003db8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea8 <process_SD_card+0x148>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f006 fcd2 	bl	800a768 <f_mount>
      return;                // Exit if fail to open/create the file
 8003dc4:	e065      	b.n	8003e92 <process_SD_card+0x132>
   }

   // Prepare the data string
   snprintf(writeBuffer, sizeof(writeBuffer), "%.3f,%.3f,%.5f,%.3f,%.5f,%.3f,%d,%d,\n",
 8003dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <process_SD_card+0x154>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	1c18      	adds	r0, r3, #0
 8003dcc:	f7fe fe9c 	bl	8002b08 <__aeabi_f2d>
 8003dd0:	0004      	movs	r4, r0
 8003dd2:	000d      	movs	r5, r1
 8003dd4:	4b38      	ldr	r3, [pc, #224]	@ (8003eb8 <process_SD_card+0x158>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	1c18      	adds	r0, r3, #0
 8003dda:	f7fe fe95 	bl	8002b08 <__aeabi_f2d>
 8003dde:	61b8      	str	r0, [r7, #24]
 8003de0:	61f9      	str	r1, [r7, #28]
 8003de2:	4b36      	ldr	r3, [pc, #216]	@ (8003ebc <process_SD_card+0x15c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	1c18      	adds	r0, r3, #0
 8003de8:	f7fe fe8e 	bl	8002b08 <__aeabi_f2d>
 8003dec:	6138      	str	r0, [r7, #16]
 8003dee:	6179      	str	r1, [r7, #20]
 8003df0:	4b33      	ldr	r3, [pc, #204]	@ (8003ec0 <process_SD_card+0x160>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	1c18      	adds	r0, r3, #0
 8003df6:	f7fe fe87 	bl	8002b08 <__aeabi_f2d>
 8003dfa:	60b8      	str	r0, [r7, #8]
 8003dfc:	60f9      	str	r1, [r7, #12]
 8003dfe:	4b31      	ldr	r3, [pc, #196]	@ (8003ec4 <process_SD_card+0x164>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	1c18      	adds	r0, r3, #0
 8003e04:	f7fe fe80 	bl	8002b08 <__aeabi_f2d>
 8003e08:	6038      	str	r0, [r7, #0]
 8003e0a:	6079      	str	r1, [r7, #4]
 8003e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec8 <process_SD_card+0x168>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	1c18      	adds	r0, r3, #0
 8003e12:	f7fe fe79 	bl	8002b08 <__aeabi_f2d>
 8003e16:	4b2d      	ldr	r3, [pc, #180]	@ (8003ecc <process_SD_card+0x16c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4698      	mov	r8, r3
 8003e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed0 <process_SD_card+0x170>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed4 <process_SD_card+0x174>)
 8003e22:	469c      	mov	ip, r3
 8003e24:	23fa      	movs	r3, #250	@ 0xfa
 8003e26:	005e      	lsls	r6, r3, #1
 8003e28:	2320      	movs	r3, #32
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	920d      	str	r2, [sp, #52]	@ 0x34
 8003e2e:	4642      	mov	r2, r8
 8003e30:	920c      	str	r2, [sp, #48]	@ 0x30
 8003e32:	900a      	str	r0, [sp, #40]	@ 0x28
 8003e34:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003e36:	6839      	ldr	r1, [r7, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	9108      	str	r1, [sp, #32]
 8003e3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	9106      	str	r1, [sp, #24]
 8003e44:	9207      	str	r2, [sp, #28]
 8003e46:	6939      	ldr	r1, [r7, #16]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	9104      	str	r1, [sp, #16]
 8003e4c:	9205      	str	r2, [sp, #20]
 8003e4e:	69b9      	ldr	r1, [r7, #24]
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	9102      	str	r1, [sp, #8]
 8003e54:	9203      	str	r2, [sp, #12]
 8003e56:	9400      	str	r4, [sp, #0]
 8003e58:	9501      	str	r5, [sp, #4]
 8003e5a:	4662      	mov	r2, ip
 8003e5c:	0031      	movs	r1, r6
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f008 fcaa 	bl	800c7b8 <sniprintf>
			Load_Voltage,// CMOS Current
            valueToAdjust,
			write_num);       // Switch State

   // Write the prepared string to the file
   f_puts(writeBuffer, &fil);
 8003e64:	24fa      	movs	r4, #250	@ 0xfa
 8003e66:	0064      	lsls	r4, r4, #1
 8003e68:	2520      	movs	r5, #32
 8003e6a:	1963      	adds	r3, r4, r5
 8003e6c:	19da      	adds	r2, r3, r7
 8003e6e:	197b      	adds	r3, r7, r5
 8003e70:	0011      	movs	r1, r2
 8003e72:	0018      	movs	r0, r3
 8003e74:	f007 fb40 	bl	800b4f8 <f_puts>

   // Close the file to ensure data is written to the SD card
   f_close(&fil);
 8003e78:	1963      	adds	r3, r4, r5
 8003e7a:	19db      	adds	r3, r3, r7
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f007 fa4b 	bl	800b318 <f_close>

   // Dismount the SD card
   f_mount(NULL, "", 0);
 8003e82:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <process_SD_card+0x148>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	0019      	movs	r1, r3
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f006 fc6d 	bl	800a768 <f_mount>
 8003e8e:	e000      	b.n	8003e92 <process_SD_card+0x132>
   if (fres != FR_OK) return;      // Exit if fail to mount
 8003e90:	46c0      	nop			@ (mov r8, r8)
}
 8003e92:	46bd      	mov	sp, r7
 8003e94:	238a      	movs	r3, #138	@ 0x8a
 8003e96:	019b      	lsls	r3, r3, #6
 8003e98:	449d      	add	sp, r3
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	46b8      	mov	r8, r7
 8003e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ea0:	ffffdd48 	.word	0xffffdd48
 8003ea4:	0000225f 	.word	0x0000225f
 8003ea8:	08010174 	.word	0x08010174
 8003eac:	00001224 	.word	0x00001224
 8003eb0:	08010178 	.word	0x08010178
 8003eb4:	2000036c 	.word	0x2000036c
 8003eb8:	20000350 	.word	0x20000350
 8003ebc:	20000364 	.word	0x20000364
 8003ec0:	20000354 	.word	0x20000354
 8003ec4:	20000360 	.word	0x20000360
 8003ec8:	20000368 	.word	0x20000368
 8003ecc:	20000374 	.word	0x20000374
 8003ed0:	2000034c 	.word	0x2000034c
 8003ed4:	08010188 	.word	0x08010188

08003ed8 <read_SD>:
 *
 * @return an integer that represents the the custom switching threshold value in mA. Will return 0 if file does not
 * exist
 */
int read_SD(void)
{
 8003ed8:	b5b0      	push	{r4, r5, r7, lr}
 8003eda:	4c23      	ldr	r4, [pc, #140]	@ (8003f68 <read_SD+0x90>)
 8003edc:	44a5      	add	sp, r4
 8003ede:	af00      	add	r7, sp, #0

	   // Buffer for storing the complete string to read
	   char readBuffer[6];  // Adjust the size based on your needs

	   // Attempt to mount the SD Card
	   fres = f_mount(&FatFs, "", 1);  // 1=mount now
 8003ee0:	4d22      	ldr	r5, [pc, #136]	@ (8003f6c <read_SD+0x94>)
 8003ee2:	197c      	adds	r4, r7, r5
 8003ee4:	4922      	ldr	r1, [pc, #136]	@ (8003f70 <read_SD+0x98>)
 8003ee6:	4b23      	ldr	r3, [pc, #140]	@ (8003f74 <read_SD+0x9c>)
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	2201      	movs	r2, #1
 8003eec:	0018      	movs	r0, r3
 8003eee:	f006 fc3b 	bl	800a768 <f_mount>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	7023      	strb	r3, [r4, #0]
	   if (fres != FR_OK) return 0;      // Exit if fail to mount
 8003ef6:	197b      	adds	r3, r7, r5
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <read_SD+0x2a>
 8003efe:	2300      	movs	r3, #0
 8003f00:	e02c      	b.n	8003f5c <read_SD+0x84>

	   // Open or create the file and append data
	   fres = f_open(&fil, "config.txt", FA_READ);
 8003f02:	4d1a      	ldr	r5, [pc, #104]	@ (8003f6c <read_SD+0x94>)
 8003f04:	197c      	adds	r4, r7, r5
 8003f06:	491c      	ldr	r1, [pc, #112]	@ (8003f78 <read_SD+0xa0>)
 8003f08:	230c      	movs	r3, #12
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f006 fc76 	bl	800a800 <f_open>
 8003f14:	0003      	movs	r3, r0
 8003f16:	7023      	strb	r3, [r4, #0]
	   if (fres != FR_OK)
 8003f18:	197b      	adds	r3, r7, r5
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <read_SD+0x58>
	   {
	      f_mount(NULL, "", 0);  // Dismount the SD card if fail to open
 8003f20:	4b13      	ldr	r3, [pc, #76]	@ (8003f70 <read_SD+0x98>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	0019      	movs	r1, r3
 8003f26:	2000      	movs	r0, #0
 8003f28:	f006 fc1e 	bl	800a768 <f_mount>
	      return 0;                // Exit if fail to open the file
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e015      	b.n	8003f5c <read_SD+0x84>
	   }

	   f_gets(readBuffer, sizeof(readBuffer), &fil); //store read values to string buffer
 8003f30:	240c      	movs	r4, #12
 8003f32:	193a      	adds	r2, r7, r4
 8003f34:	1d3b      	adds	r3, r7, #4
 8003f36:	2106      	movs	r1, #6
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f007 fa21 	bl	800b380 <f_gets>

	   // Close the file
	   f_close(&fil);
 8003f3e:	193b      	adds	r3, r7, r4
 8003f40:	0018      	movs	r0, r3
 8003f42:	f007 f9e9 	bl	800b318 <f_close>

	   // Dismount the SD card
	   f_mount(NULL, "", 0);
 8003f46:	4b0a      	ldr	r3, [pc, #40]	@ (8003f70 <read_SD+0x98>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f006 fc0b 	bl	800a768 <f_mount>

	   return atoi(readBuffer);
 8003f52:	1d3b      	adds	r3, r7, #4
 8003f54:	0018      	movs	r0, r3
 8003f56:	f007 fc5b 	bl	800b810 <atoi>
 8003f5a:	0003      	movs	r3, r0

}//end of read_SD()
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <read_SD+0xa4>)
 8003f62:	449d      	add	sp, r3
 8003f64:	bdb0      	pop	{r4, r5, r7, pc}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	ffffdf88 	.word	0xffffdf88
 8003f6c:	00002077 	.word	0x00002077
 8003f70:	08010174 	.word	0x08010174
 8003f74:	0000103c 	.word	0x0000103c
 8003f78:	080101b0 	.word	0x080101b0
 8003f7c:	00002078 	.word	0x00002078

08003f80 <communicate_value>:
 * @param: number is an integer that represents the threshold value between 0 - 9999 to be sent from the Writing
 * board to the Switching board (typically obtained from read_SD())
 *
 */
void communicate_value(int number)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	int place = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]

	if(number > 0) //if the given number is greater than zero
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	dd55      	ble.n	800403e <communicate_value+0xbe>
	{
		while(place < 4)//while the number of "places" (1's, 10's, 100's, 1000's place) sent out is less than 4 (starting at 0 for a total of 4 digits)
 8003f92:	e03b      	b.n	800400c <communicate_value+0x8c>
		{
			int digit = number%10; //get the last digit of the given number
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	210a      	movs	r1, #10
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7fc fa41 	bl	8000420 <__aeabi_idivmod>
 8003f9e:	000b      	movs	r3, r1
 8003fa0:	60bb      	str	r3, [r7, #8]

			while(digit > 0)
 8003fa2:	e014      	b.n	8003fce <communicate_value+0x4e>
			{
				// Set Red
				HAL_GPIO_WritePin(GPIOB, SD_OUT_DATA_Pin, GPIO_PIN_SET); //Send "1" on data pin
 8003fa4:	4b35      	ldr	r3, [pc, #212]	@ (800407c <communicate_value+0xfc>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	2110      	movs	r1, #16
 8003faa:	0018      	movs	r0, r3
 8003fac:	f001 ff15 	bl	8005dda <HAL_GPIO_WritePin>
				HAL_Delay(7);
 8003fb0:	2007      	movs	r0, #7
 8003fb2:	f000 ffad 	bl	8004f10 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, SD_OUT_DATA_Pin, GPIO_PIN_RESET);//Send "0" on data pin
 8003fb6:	4b31      	ldr	r3, [pc, #196]	@ (800407c <communicate_value+0xfc>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2110      	movs	r1, #16
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f001 ff0c 	bl	8005dda <HAL_GPIO_WritePin>
				HAL_Delay(5);
 8003fc2:	2005      	movs	r0, #5
 8003fc4:	f000 ffa4 	bl	8004f10 <HAL_Delay>
				digit--;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	60bb      	str	r3, [r7, #8]
			while(digit > 0)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	dce7      	bgt.n	8003fa4 <communicate_value+0x24>
			}//digit finished sending

			// Set Green
			HAL_GPIO_WritePin(GPIOB, SD_OUT_DIGIT_Pin, GPIO_PIN_SET);//Send "1" on digit pin
 8003fd4:	4b29      	ldr	r3, [pc, #164]	@ (800407c <communicate_value+0xfc>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	2120      	movs	r1, #32
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f001 fefd 	bl	8005dda <HAL_GPIO_WritePin>
			HAL_Delay(7);
 8003fe0:	2007      	movs	r0, #7
 8003fe2:	f000 ff95 	bl	8004f10 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, SD_OUT_DIGIT_Pin, GPIO_PIN_RESET);//Send "0" on digit pin
 8003fe6:	4b25      	ldr	r3, [pc, #148]	@ (800407c <communicate_value+0xfc>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2120      	movs	r1, #32
 8003fec:	0018      	movs	r0, r3
 8003fee:	f001 fef4 	bl	8005dda <HAL_GPIO_WritePin>
			HAL_Delay(5);
 8003ff2:	2005      	movs	r0, #5
 8003ff4:	f000 ff8c 	bl	8004f10 <HAL_Delay>

			number = number/10; //set the number to be a factor of 10 less (if number was 1000, number is now 100)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	210a      	movs	r1, #10
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f7fc f929 	bl	8000254 <__divsi3>
 8004002:	0003      	movs	r3, r0
 8004004:	607b      	str	r3, [r7, #4]
			place++; //indicates the "place" of the number has increased to the next "place"
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3301      	adds	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
		while(place < 4)//while the number of "places" (1's, 10's, 100's, 1000's place) sent out is less than 4 (starting at 0 for a total of 4 digits)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b03      	cmp	r3, #3
 8004010:	ddc0      	ble.n	8003f94 <communicate_value+0x14>
 8004012:	e030      	b.n	8004076 <communicate_value+0xf6>
	}
	else //otherwise send that the number is 0
	{
		while(place < 4)
		{
			HAL_GPIO_WritePin(GPIOB, SD_OUT_DIGIT_Pin, GPIO_PIN_SET);//Send "1" on digit pin
 8004014:	4b19      	ldr	r3, [pc, #100]	@ (800407c <communicate_value+0xfc>)
 8004016:	2201      	movs	r2, #1
 8004018:	2120      	movs	r1, #32
 800401a:	0018      	movs	r0, r3
 800401c:	f001 fedd 	bl	8005dda <HAL_GPIO_WritePin>
			HAL_Delay(7);
 8004020:	2007      	movs	r0, #7
 8004022:	f000 ff75 	bl	8004f10 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, SD_OUT_DIGIT_Pin, GPIO_PIN_RESET);//Send "0" on digit pin
 8004026:	4b15      	ldr	r3, [pc, #84]	@ (800407c <communicate_value+0xfc>)
 8004028:	2200      	movs	r2, #0
 800402a:	2120      	movs	r1, #32
 800402c:	0018      	movs	r0, r3
 800402e:	f001 fed4 	bl	8005dda <HAL_GPIO_WritePin>
			HAL_Delay(5);
 8004032:	2005      	movs	r0, #5
 8004034:	f000 ff6c 	bl	8004f10 <HAL_Delay>

			place++;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3301      	adds	r3, #1
 800403c:	60fb      	str	r3, [r7, #12]
		while(place < 4)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b03      	cmp	r3, #3
 8004042:	dde7      	ble.n	8004014 <communicate_value+0x94>
		}
		// Set Blue
				      HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin,
 8004044:	2380      	movs	r3, #128	@ 0x80
 8004046:	0059      	lsls	r1, r3, #1
 8004048:	23a0      	movs	r3, #160	@ 0xa0
 800404a:	05db      	lsls	r3, r3, #23
 800404c:	2200      	movs	r2, #0
 800404e:	0018      	movs	r0, r3
 8004050:	f001 fec3 	bl	8005dda <HAL_GPIO_WritePin>
				                        GPIO_PIN_RESET);
				      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 8004054:	2380      	movs	r3, #128	@ 0x80
 8004056:	0099      	lsls	r1, r3, #2
 8004058:	23a0      	movs	r3, #160	@ 0xa0
 800405a:	05db      	lsls	r3, r3, #23
 800405c:	2200      	movs	r2, #0
 800405e:	0018      	movs	r0, r3
 8004060:	f001 febb 	bl	8005dda <HAL_GPIO_WritePin>
				                        GPIO_PIN_RESET);
				      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 8004064:	2380      	movs	r3, #128	@ 0x80
 8004066:	00d9      	lsls	r1, r3, #3
 8004068:	23a0      	movs	r3, #160	@ 0xa0
 800406a:	05db      	lsls	r3, r3, #23
 800406c:	2201      	movs	r2, #1
 800406e:	0018      	movs	r0, r3
 8004070:	f001 feb3 	bl	8005dda <HAL_GPIO_WritePin>
				                        GPIO_PIN_SET);
		return;
 8004074:	46c0      	nop			@ (mov r8, r8)
	}

}
 8004076:	46bd      	mov	sp, r7
 8004078:	b004      	add	sp, #16
 800407a:	bd80      	pop	{r7, pc}
 800407c:	50000400 	.word	0x50000400

08004080 <Measurement_of_ADC_Voltage_18650>:
 *
 * CHSELR is set to 0x8000h (channel 15)
 * Calls ADC_Select_Voltage18650() to set channel
 * Converted values store to V_18650
 */
void Measurement_of_ADC_Voltage_18650() {
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
   HAL_ADC_Stop(&hadc);
 8004086:	4b27      	ldr	r3, [pc, #156]	@ (8004124 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8004088:	0018      	movs	r0, r3
 800408a:	f001 f92d 	bl	80052e8 <HAL_ADC_Stop>
   HAL_ADC_Init(&hadc);
 800408e:	4b25      	ldr	r3, [pc, #148]	@ (8004124 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8004090:	0018      	movs	r0, r3
 8004092:	f000 ff61 	bl	8004f58 <HAL_ADC_Init>
   float V_ref = 3.3;  // This is known for each micro controller from data sheet, V_ref = power supply in
 8004096:	4b24      	ldr	r3, [pc, #144]	@ (8004128 <Measurement_of_ADC_Voltage_18650+0xa8>)
 8004098:	60fb      	str	r3, [r7, #12]
   float ADC_resolution = (4096 - 1);  // 2^12 - 1
 800409a:	4b24      	ldr	r3, [pc, #144]	@ (800412c <Measurement_of_ADC_Voltage_18650+0xac>)
 800409c:	60bb      	str	r3, [r7, #8]
   float V_stepSize = V_ref / ADC_resolution;
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f7fc fb89 	bl	80007b8 <__aeabi_fdiv>
 80040a6:	1c03      	adds	r3, r0, #0
 80040a8:	607b      	str	r3, [r7, #4]
   // ADC
   /* Start ADC Conversion for ADC1 */
   ADC1->CHSELR = 0x8000;
 80040aa:	4b21      	ldr	r3, [pc, #132]	@ (8004130 <Measurement_of_ADC_Voltage_18650+0xb0>)
 80040ac:	2280      	movs	r2, #128	@ 0x80
 80040ae:	0212      	lsls	r2, r2, #8
 80040b0:	629a      	str	r2, [r3, #40]	@ 0x28
   ADC_Select_Voltage18650();
 80040b2:	f000 f9a5 	bl	8004400 <ADC_Select_Voltage18650>
   HAL_ADC_Start(&hadc);
 80040b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004124 <Measurement_of_ADC_Voltage_18650+0xa4>)
 80040b8:	0018      	movs	r0, r3
 80040ba:	f001 f8c1 	bl	8005240 <HAL_ADC_Start>
   uint16_t rawValue1;
   if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 80040be:	2301      	movs	r3, #1
 80040c0:	425a      	negs	r2, r3
 80040c2:	4b18      	ldr	r3, [pc, #96]	@ (8004124 <Measurement_of_ADC_Voltage_18650+0xa4>)
 80040c4:	0011      	movs	r1, r2
 80040c6:	0018      	movs	r0, r3
 80040c8:	f001 f94e 	bl	8005368 <HAL_ADC_PollForConversion>
 80040cc:	1e03      	subs	r3, r0, #0
 80040ce:	d121      	bne.n	8004114 <Measurement_of_ADC_Voltage_18650+0x94>
      /* Read the ADC1 value */
      rawValue1 = HAL_ADC_GetValue(&hadc);
 80040d0:	4b14      	ldr	r3, [pc, #80]	@ (8004124 <Measurement_of_ADC_Voltage_18650+0xa4>)
 80040d2:	0018      	movs	r0, r3
 80040d4:	f001 f9e4 	bl	80054a0 <HAL_ADC_GetValue>
 80040d8:	0002      	movs	r2, r0
 80040da:	1cbb      	adds	r3, r7, #2
 80040dc:	801a      	strh	r2, [r3, #0]
      V_18650 = ((rawValue1 * V_stepSize) * (1/.65));
 80040de:	1cbb      	adds	r3, r7, #2
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	0018      	movs	r0, r3
 80040e4:	f7fc fdc6 	bl	8000c74 <__aeabi_i2f>
 80040e8:	1c03      	adds	r3, r0, #0
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	1c18      	adds	r0, r3, #0
 80040ee:	f7fc fc83 	bl	80009f8 <__aeabi_fmul>
 80040f2:	1c03      	adds	r3, r0, #0
 80040f4:	1c18      	adds	r0, r3, #0
 80040f6:	f7fe fd07 	bl	8002b08 <__aeabi_f2d>
 80040fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004134 <Measurement_of_ADC_Voltage_18650+0xb4>)
 80040fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004138 <Measurement_of_ADC_Voltage_18650+0xb8>)
 80040fe:	f7fd fdef 	bl	8001ce0 <__aeabi_dmul>
 8004102:	0002      	movs	r2, r0
 8004104:	000b      	movs	r3, r1
 8004106:	0010      	movs	r0, r2
 8004108:	0019      	movs	r1, r3
 800410a:	f7fe fd45 	bl	8002b98 <__aeabi_d2f>
 800410e:	1c02      	adds	r2, r0, #0
 8004110:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <Measurement_of_ADC_Voltage_18650+0xbc>)
 8004112:	601a      	str	r2, [r3, #0]

      // V_18650 = rawValue1;
   }
   HAL_ADC_Stop(&hadc);
 8004114:	4b03      	ldr	r3, [pc, #12]	@ (8004124 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8004116:	0018      	movs	r0, r3
 8004118:	f001 f8e6 	bl	80052e8 <HAL_ADC_Stop>
}
 800411c:	46c0      	nop			@ (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b004      	add	sp, #16
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20000210 	.word	0x20000210
 8004128:	40533333 	.word	0x40533333
 800412c:	457ff000 	.word	0x457ff000
 8004130:	40012400 	.word	0x40012400
 8004134:	d89d89d8 	.word	0xd89d89d8
 8004138:	3ff89d89 	.word	0x3ff89d89
 800413c:	20000350 	.word	0x20000350

08004140 <Measurement_of_ADC_Voltage_CMOS>:
 *
 * CHSELR is set to 0x2000h (channel 13)
 * Calls ADC_Select_VoltageCMOS() to set channel
 * Converted values store to V_CMOS
 */
void Measurement_of_ADC_Voltage_CMOS() {
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
   HAL_ADC_Stop(&hadc);
 8004146:	4b27      	ldr	r3, [pc, #156]	@ (80041e4 <Measurement_of_ADC_Voltage_CMOS+0xa4>)
 8004148:	0018      	movs	r0, r3
 800414a:	f001 f8cd 	bl	80052e8 <HAL_ADC_Stop>
   HAL_ADC_Init(&hadc);
 800414e:	4b25      	ldr	r3, [pc, #148]	@ (80041e4 <Measurement_of_ADC_Voltage_CMOS+0xa4>)
 8004150:	0018      	movs	r0, r3
 8004152:	f000 ff01 	bl	8004f58 <HAL_ADC_Init>
   float V_ref = 3.3;  // This is known for each micro controller from data
 8004156:	4b24      	ldr	r3, [pc, #144]	@ (80041e8 <Measurement_of_ADC_Voltage_CMOS+0xa8>)
 8004158:	60fb      	str	r3, [r7, #12]
   // sheet, V_ref = power supply in
   float ADC_resolution = (4096 - 1);  // 2^12 - 1
 800415a:	4b24      	ldr	r3, [pc, #144]	@ (80041ec <Measurement_of_ADC_Voltage_CMOS+0xac>)
 800415c:	60bb      	str	r3, [r7, #8]
   float V_stepSize = V_ref / ADC_resolution;
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7fc fb29 	bl	80007b8 <__aeabi_fdiv>
 8004166:	1c03      	adds	r3, r0, #0
 8004168:	607b      	str	r3, [r7, #4]
   // ADC
   /* Start ADC Conversion for ADC1 */
   ADC1->CHSELR = 0x2000;
 800416a:	4b21      	ldr	r3, [pc, #132]	@ (80041f0 <Measurement_of_ADC_Voltage_CMOS+0xb0>)
 800416c:	2280      	movs	r2, #128	@ 0x80
 800416e:	0192      	lsls	r2, r2, #6
 8004170:	629a      	str	r2, [r3, #40]	@ 0x28
   ADC_Select_VoltageCMOS();
 8004172:	f000 f967 	bl	8004444 <ADC_Select_VoltageCMOS>
   HAL_ADC_Start(&hadc);
 8004176:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <Measurement_of_ADC_Voltage_CMOS+0xa4>)
 8004178:	0018      	movs	r0, r3
 800417a:	f001 f861 	bl	8005240 <HAL_ADC_Start>
   uint16_t rawValue2;
   if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 800417e:	2301      	movs	r3, #1
 8004180:	425a      	negs	r2, r3
 8004182:	4b18      	ldr	r3, [pc, #96]	@ (80041e4 <Measurement_of_ADC_Voltage_CMOS+0xa4>)
 8004184:	0011      	movs	r1, r2
 8004186:	0018      	movs	r0, r3
 8004188:	f001 f8ee 	bl	8005368 <HAL_ADC_PollForConversion>
 800418c:	1e03      	subs	r3, r0, #0
 800418e:	d121      	bne.n	80041d4 <Measurement_of_ADC_Voltage_CMOS+0x94>
      /* Read the ADC1 value */
      rawValue2 = HAL_ADC_GetValue(&hadc);
 8004190:	4b14      	ldr	r3, [pc, #80]	@ (80041e4 <Measurement_of_ADC_Voltage_CMOS+0xa4>)
 8004192:	0018      	movs	r0, r3
 8004194:	f001 f984 	bl	80054a0 <HAL_ADC_GetValue>
 8004198:	0002      	movs	r2, r0
 800419a:	1cbb      	adds	r3, r7, #2
 800419c:	801a      	strh	r2, [r3, #0]
      V_CMOS = ((rawValue2 * V_stepSize) * (1/.65));
 800419e:	1cbb      	adds	r3, r7, #2
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fc fd66 	bl	8000c74 <__aeabi_i2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	1c18      	adds	r0, r3, #0
 80041ae:	f7fc fc23 	bl	80009f8 <__aeabi_fmul>
 80041b2:	1c03      	adds	r3, r0, #0
 80041b4:	1c18      	adds	r0, r3, #0
 80041b6:	f7fe fca7 	bl	8002b08 <__aeabi_f2d>
 80041ba:	4a0e      	ldr	r2, [pc, #56]	@ (80041f4 <Measurement_of_ADC_Voltage_CMOS+0xb4>)
 80041bc:	4b0e      	ldr	r3, [pc, #56]	@ (80041f8 <Measurement_of_ADC_Voltage_CMOS+0xb8>)
 80041be:	f7fd fd8f 	bl	8001ce0 <__aeabi_dmul>
 80041c2:	0002      	movs	r2, r0
 80041c4:	000b      	movs	r3, r1
 80041c6:	0010      	movs	r0, r2
 80041c8:	0019      	movs	r1, r3
 80041ca:	f7fe fce5 	bl	8002b98 <__aeabi_d2f>
 80041ce:	1c02      	adds	r2, r0, #0
 80041d0:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <Measurement_of_ADC_Voltage_CMOS+0xbc>)
 80041d2:	601a      	str	r2, [r3, #0]
      // V_CMOS = rawValue2;
   }
   HAL_ADC_Stop(&hadc);
 80041d4:	4b03      	ldr	r3, [pc, #12]	@ (80041e4 <Measurement_of_ADC_Voltage_CMOS+0xa4>)
 80041d6:	0018      	movs	r0, r3
 80041d8:	f001 f886 	bl	80052e8 <HAL_ADC_Stop>
}
 80041dc:	46c0      	nop			@ (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b004      	add	sp, #16
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000210 	.word	0x20000210
 80041e8:	40533333 	.word	0x40533333
 80041ec:	457ff000 	.word	0x457ff000
 80041f0:	40012400 	.word	0x40012400
 80041f4:	d89d89d8 	.word	0xd89d89d8
 80041f8:	3ff89d89 	.word	0x3ff89d89
 80041fc:	20000354 	.word	0x20000354

08004200 <Measurement_of_ADC_Current_18650>:
 *
 * CHSELR is set to 0x0200h (channel 9)
 * Calls ADC_Select_Current18650() to set channel
 * Converted values store to C_18650
 */
void Measurement_of_ADC_Current_18650() {
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
   HAL_ADC_Stop(&hadc);
 8004206:	4b21      	ldr	r3, [pc, #132]	@ (800428c <Measurement_of_ADC_Current_18650+0x8c>)
 8004208:	0018      	movs	r0, r3
 800420a:	f001 f86d 	bl	80052e8 <HAL_ADC_Stop>
   HAL_ADC_Init(&hadc);
 800420e:	4b1f      	ldr	r3, [pc, #124]	@ (800428c <Measurement_of_ADC_Current_18650+0x8c>)
 8004210:	0018      	movs	r0, r3
 8004212:	f000 fea1 	bl	8004f58 <HAL_ADC_Init>
   float V_ref = 3.3;  // This is known for each micro controller from data
 8004216:	4b1e      	ldr	r3, [pc, #120]	@ (8004290 <Measurement_of_ADC_Current_18650+0x90>)
 8004218:	60fb      	str	r3, [r7, #12]
   // sheet, V_ref = power supply in
   float ADC_resolution = (4096 - 1);  // 2^12 - 1
 800421a:	4b1e      	ldr	r3, [pc, #120]	@ (8004294 <Measurement_of_ADC_Current_18650+0x94>)
 800421c:	60bb      	str	r3, [r7, #8]
   float V_stepSize = V_ref / ADC_resolution;
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7fc fac9 	bl	80007b8 <__aeabi_fdiv>
 8004226:	1c03      	adds	r3, r0, #0
 8004228:	607b      	str	r3, [r7, #4]
   // ADC
   /* Start ADC Conversion for ADC1 */
   ADC1->CHSELR = 0x0200;
 800422a:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <Measurement_of_ADC_Current_18650+0x98>)
 800422c:	2280      	movs	r2, #128	@ 0x80
 800422e:	0092      	lsls	r2, r2, #2
 8004230:	629a      	str	r2, [r3, #40]	@ 0x28
   ADC_Select_Current18650();
 8004232:	f000 f929 	bl	8004488 <ADC_Select_Current18650>
   HAL_ADC_Start(&hadc);
 8004236:	4b15      	ldr	r3, [pc, #84]	@ (800428c <Measurement_of_ADC_Current_18650+0x8c>)
 8004238:	0018      	movs	r0, r3
 800423a:	f001 f801 	bl	8005240 <HAL_ADC_Start>
   uint16_t rawValue3;
   if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 800423e:	2301      	movs	r3, #1
 8004240:	425a      	negs	r2, r3
 8004242:	4b12      	ldr	r3, [pc, #72]	@ (800428c <Measurement_of_ADC_Current_18650+0x8c>)
 8004244:	0011      	movs	r1, r2
 8004246:	0018      	movs	r0, r3
 8004248:	f001 f88e 	bl	8005368 <HAL_ADC_PollForConversion>
 800424c:	1e03      	subs	r3, r0, #0
 800424e:	d114      	bne.n	800427a <Measurement_of_ADC_Current_18650+0x7a>
      /* Read the ADC1 value */
      rawValue3 = HAL_ADC_GetValue(&hadc);
 8004250:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <Measurement_of_ADC_Current_18650+0x8c>)
 8004252:	0018      	movs	r0, r3
 8004254:	f001 f924 	bl	80054a0 <HAL_ADC_GetValue>
 8004258:	0002      	movs	r2, r0
 800425a:	1cbb      	adds	r3, r7, #2
 800425c:	801a      	strh	r2, [r3, #0]
      V_DiffAmp_18650 = ((rawValue3 * V_stepSize));
 800425e:	1cbb      	adds	r3, r7, #2
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	0018      	movs	r0, r3
 8004264:	f7fc fd06 	bl	8000c74 <__aeabi_i2f>
 8004268:	1c03      	adds	r3, r0, #0
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	1c18      	adds	r0, r3, #0
 800426e:	f7fc fbc3 	bl	80009f8 <__aeabi_fmul>
 8004272:	1c03      	adds	r3, r0, #0
 8004274:	1c1a      	adds	r2, r3, #0
 8004276:	4b09      	ldr	r3, [pc, #36]	@ (800429c <Measurement_of_ADC_Current_18650+0x9c>)
 8004278:	601a      	str	r2, [r3, #0]
      // C_18650 = rawValue3;
      // 50)/.0299562); //I_load = ((V_ADC / 50 gain) / .03 calibrated shunt)
   }
   HAL_ADC_Stop(&hadc);
 800427a:	4b04      	ldr	r3, [pc, #16]	@ (800428c <Measurement_of_ADC_Current_18650+0x8c>)
 800427c:	0018      	movs	r0, r3
 800427e:	f001 f833 	bl	80052e8 <HAL_ADC_Stop>
}
 8004282:	46c0      	nop			@ (mov r8, r8)
 8004284:	46bd      	mov	sp, r7
 8004286:	b004      	add	sp, #16
 8004288:	bd80      	pop	{r7, pc}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	20000210 	.word	0x20000210
 8004290:	40533333 	.word	0x40533333
 8004294:	457ff000 	.word	0x457ff000
 8004298:	40012400 	.word	0x40012400
 800429c:	20000358 	.word	0x20000358

080042a0 <Measurement_of_ADC_Current_CMOS>:
 *
 * CHSELR is set to 0x1000h (channel 8)
 * Calls ADC_Select_CurrentCMOS() to set channel
 * Converted values store to C_CMOS
 */
void Measurement_of_ADC_Current_CMOS() {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
   HAL_ADC_Stop(&hadc);
 80042a6:	4b21      	ldr	r3, [pc, #132]	@ (800432c <Measurement_of_ADC_Current_CMOS+0x8c>)
 80042a8:	0018      	movs	r0, r3
 80042aa:	f001 f81d 	bl	80052e8 <HAL_ADC_Stop>
   HAL_ADC_Init(&hadc);
 80042ae:	4b1f      	ldr	r3, [pc, #124]	@ (800432c <Measurement_of_ADC_Current_CMOS+0x8c>)
 80042b0:	0018      	movs	r0, r3
 80042b2:	f000 fe51 	bl	8004f58 <HAL_ADC_Init>
   float V_ref = 3.3;  // This is known for each micro controller from data
 80042b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004330 <Measurement_of_ADC_Current_CMOS+0x90>)
 80042b8:	60fb      	str	r3, [r7, #12]
   // sheet, V_ref = power supply in
   float ADC_resolution = (4096 - 1);  // 2^12 - 1
 80042ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004334 <Measurement_of_ADC_Current_CMOS+0x94>)
 80042bc:	60bb      	str	r3, [r7, #8]
   float V_stepSize = V_ref / ADC_resolution;
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f7fc fa79 	bl	80007b8 <__aeabi_fdiv>
 80042c6:	1c03      	adds	r3, r0, #0
 80042c8:	607b      	str	r3, [r7, #4]
   // ADC
   /* Start ADC Conversion for ADC1 */
   ADC1->CHSELR = 0x1000;
 80042ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004338 <Measurement_of_ADC_Current_CMOS+0x98>)
 80042cc:	2280      	movs	r2, #128	@ 0x80
 80042ce:	0152      	lsls	r2, r2, #5
 80042d0:	629a      	str	r2, [r3, #40]	@ 0x28
   ADC_Select_CurrentCMOS();
 80042d2:	f000 f8fb 	bl	80044cc <ADC_Select_CurrentCMOS>
   HAL_ADC_Start(&hadc);
 80042d6:	4b15      	ldr	r3, [pc, #84]	@ (800432c <Measurement_of_ADC_Current_CMOS+0x8c>)
 80042d8:	0018      	movs	r0, r3
 80042da:	f000 ffb1 	bl	8005240 <HAL_ADC_Start>
   uint16_t rawValue4;
   if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 80042de:	2301      	movs	r3, #1
 80042e0:	425a      	negs	r2, r3
 80042e2:	4b12      	ldr	r3, [pc, #72]	@ (800432c <Measurement_of_ADC_Current_CMOS+0x8c>)
 80042e4:	0011      	movs	r1, r2
 80042e6:	0018      	movs	r0, r3
 80042e8:	f001 f83e 	bl	8005368 <HAL_ADC_PollForConversion>
 80042ec:	1e03      	subs	r3, r0, #0
 80042ee:	d114      	bne.n	800431a <Measurement_of_ADC_Current_CMOS+0x7a>
      /* Read the ADC1 value */
      rawValue4 = HAL_ADC_GetValue(&hadc);
 80042f0:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <Measurement_of_ADC_Current_CMOS+0x8c>)
 80042f2:	0018      	movs	r0, r3
 80042f4:	f001 f8d4 	bl	80054a0 <HAL_ADC_GetValue>
 80042f8:	0002      	movs	r2, r0
 80042fa:	1cbb      	adds	r3, r7, #2
 80042fc:	801a      	strh	r2, [r3, #0]
      V_DiffAmp_CMOS = ((rawValue4 * V_stepSize));
 80042fe:	1cbb      	adds	r3, r7, #2
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	0018      	movs	r0, r3
 8004304:	f7fc fcb6 	bl	8000c74 <__aeabi_i2f>
 8004308:	1c03      	adds	r3, r0, #0
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	1c18      	adds	r0, r3, #0
 800430e:	f7fc fb73 	bl	80009f8 <__aeabi_fmul>
 8004312:	1c03      	adds	r3, r0, #0
 8004314:	1c1a      	adds	r2, r3, #0
 8004316:	4b09      	ldr	r3, [pc, #36]	@ (800433c <Measurement_of_ADC_Current_CMOS+0x9c>)
 8004318:	601a      	str	r2, [r3, #0]
      // C_CMOS = rawValue4;
      /// 20)/4.713492); // I_load = (( V_ADC / 20 Gain ) / 4.71 calibrated shunt
      /// )
   }
   HAL_ADC_Stop(&hadc);
 800431a:	4b04      	ldr	r3, [pc, #16]	@ (800432c <Measurement_of_ADC_Current_CMOS+0x8c>)
 800431c:	0018      	movs	r0, r3
 800431e:	f000 ffe3 	bl	80052e8 <HAL_ADC_Stop>
}
 8004322:	46c0      	nop			@ (mov r8, r8)
 8004324:	46bd      	mov	sp, r7
 8004326:	b004      	add	sp, #16
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	20000210 	.word	0x20000210
 8004330:	40533333 	.word	0x40533333
 8004334:	457ff000 	.word	0x457ff000
 8004338:	40012400 	.word	0x40012400
 800433c:	2000035c 	.word	0x2000035c

08004340 <Measurement_of_Load_Voltage>:

void Measurement_of_Load_Voltage() {
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
   HAL_ADC_Stop(&hadc);
 8004346:	4b27      	ldr	r3, [pc, #156]	@ (80043e4 <Measurement_of_Load_Voltage+0xa4>)
 8004348:	0018      	movs	r0, r3
 800434a:	f000 ffcd 	bl	80052e8 <HAL_ADC_Stop>
   HAL_ADC_Init(&hadc);
 800434e:	4b25      	ldr	r3, [pc, #148]	@ (80043e4 <Measurement_of_Load_Voltage+0xa4>)
 8004350:	0018      	movs	r0, r3
 8004352:	f000 fe01 	bl	8004f58 <HAL_ADC_Init>
   float V_ref = 3.3;  // This is known for each micro controller from data
 8004356:	4b24      	ldr	r3, [pc, #144]	@ (80043e8 <Measurement_of_Load_Voltage+0xa8>)
 8004358:	60fb      	str	r3, [r7, #12]
   // sheet, V_ref = power supply in
   float ADC_resolution = (4096 - 1);  // 2^12 - 1
 800435a:	4b24      	ldr	r3, [pc, #144]	@ (80043ec <Measurement_of_Load_Voltage+0xac>)
 800435c:	60bb      	str	r3, [r7, #8]
   float V_stepSize = V_ref / ADC_resolution;
 800435e:	68b9      	ldr	r1, [r7, #8]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7fc fa29 	bl	80007b8 <__aeabi_fdiv>
 8004366:	1c03      	adds	r3, r0, #0
 8004368:	607b      	str	r3, [r7, #4]
   // ADC
   /* Start ADC Conversion for ADC1 */
   ADC1->CHSELR = 0x0004;
 800436a:	4b21      	ldr	r3, [pc, #132]	@ (80043f0 <Measurement_of_Load_Voltage+0xb0>)
 800436c:	2204      	movs	r2, #4
 800436e:	629a      	str	r2, [r3, #40]	@ 0x28
   ADC_Select_CurrentCMOS();
 8004370:	f000 f8ac 	bl	80044cc <ADC_Select_CurrentCMOS>
   HAL_ADC_Start(&hadc);
 8004374:	4b1b      	ldr	r3, [pc, #108]	@ (80043e4 <Measurement_of_Load_Voltage+0xa4>)
 8004376:	0018      	movs	r0, r3
 8004378:	f000 ff62 	bl	8005240 <HAL_ADC_Start>
   uint16_t rawValue5;
   if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 800437c:	2301      	movs	r3, #1
 800437e:	425a      	negs	r2, r3
 8004380:	4b18      	ldr	r3, [pc, #96]	@ (80043e4 <Measurement_of_Load_Voltage+0xa4>)
 8004382:	0011      	movs	r1, r2
 8004384:	0018      	movs	r0, r3
 8004386:	f000 ffef 	bl	8005368 <HAL_ADC_PollForConversion>
 800438a:	1e03      	subs	r3, r0, #0
 800438c:	d121      	bne.n	80043d2 <Measurement_of_Load_Voltage+0x92>
      /* Read the ADC1 value */
      rawValue5 = HAL_ADC_GetValue(&hadc);
 800438e:	4b15      	ldr	r3, [pc, #84]	@ (80043e4 <Measurement_of_Load_Voltage+0xa4>)
 8004390:	0018      	movs	r0, r3
 8004392:	f001 f885 	bl	80054a0 <HAL_ADC_GetValue>
 8004396:	0002      	movs	r2, r0
 8004398:	1cbb      	adds	r3, r7, #2
 800439a:	801a      	strh	r2, [r3, #0]
      Load_Voltage = ((rawValue5 * V_stepSize) * (1/.65));
 800439c:	1cbb      	adds	r3, r7, #2
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7fc fc67 	bl	8000c74 <__aeabi_i2f>
 80043a6:	1c03      	adds	r3, r0, #0
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	1c18      	adds	r0, r3, #0
 80043ac:	f7fc fb24 	bl	80009f8 <__aeabi_fmul>
 80043b0:	1c03      	adds	r3, r0, #0
 80043b2:	1c18      	adds	r0, r3, #0
 80043b4:	f7fe fba8 	bl	8002b08 <__aeabi_f2d>
 80043b8:	4a0e      	ldr	r2, [pc, #56]	@ (80043f4 <Measurement_of_Load_Voltage+0xb4>)
 80043ba:	4b0f      	ldr	r3, [pc, #60]	@ (80043f8 <Measurement_of_Load_Voltage+0xb8>)
 80043bc:	f7fd fc90 	bl	8001ce0 <__aeabi_dmul>
 80043c0:	0002      	movs	r2, r0
 80043c2:	000b      	movs	r3, r1
 80043c4:	0010      	movs	r0, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	f7fe fbe6 	bl	8002b98 <__aeabi_d2f>
 80043cc:	1c02      	adds	r2, r0, #0
 80043ce:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <Measurement_of_Load_Voltage+0xbc>)
 80043d0:	601a      	str	r2, [r3, #0]
      // C_CMOS = rawValue4;
      /// 20)/4.713492); // I_load = (( V_ADC / 20 Gain ) / 4.71 calibrated shunt
      /// )
   }
   HAL_ADC_Stop(&hadc);
 80043d2:	4b04      	ldr	r3, [pc, #16]	@ (80043e4 <Measurement_of_Load_Voltage+0xa4>)
 80043d4:	0018      	movs	r0, r3
 80043d6:	f000 ff87 	bl	80052e8 <HAL_ADC_Stop>
}
 80043da:	46c0      	nop			@ (mov r8, r8)
 80043dc:	46bd      	mov	sp, r7
 80043de:	b004      	add	sp, #16
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	20000210 	.word	0x20000210
 80043e8:	40533333 	.word	0x40533333
 80043ec:	457ff000 	.word	0x457ff000
 80043f0:	40012400 	.word	0x40012400
 80043f4:	d89d89d8 	.word	0xd89d89d8
 80043f8:	3ff89d89 	.word	0x3ff89d89
 80043fc:	20000368 	.word	0x20000368

08004400 <ADC_Select_Voltage18650>:
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
      Error_Handler();
   }
}

void ADC_Select_Voltage18650() {
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
   ADC_ChannelConfTypeDef sConfig = {0};
 8004406:	003b      	movs	r3, r7
 8004408:	0018      	movs	r0, r3
 800440a:	2308      	movs	r3, #8
 800440c:	001a      	movs	r2, r3
 800440e:	2100      	movs	r1, #0
 8004410:	f008 fa72 	bl	800c8f8 <memset>
   sConfig.Channel = ADC_CHANNEL_15;
 8004414:	003b      	movs	r3, r7
 8004416:	4a09      	ldr	r2, [pc, #36]	@ (800443c <ADC_Select_Voltage18650+0x3c>)
 8004418:	601a      	str	r2, [r3, #0]
   sConfig.Rank = 0;
 800441a:	003b      	movs	r3, r7
 800441c:	2200      	movs	r2, #0
 800441e:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004420:	003a      	movs	r2, r7
 8004422:	4b07      	ldr	r3, [pc, #28]	@ (8004440 <ADC_Select_Voltage18650+0x40>)
 8004424:	0011      	movs	r1, r2
 8004426:	0018      	movs	r0, r3
 8004428:	f001 f846 	bl	80054b8 <HAL_ADC_ConfigChannel>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d001      	beq.n	8004434 <ADC_Select_Voltage18650+0x34>
      Error_Handler();
 8004430:	f000 fac6 	bl	80049c0 <Error_Handler>
   }
}
 8004434:	46c0      	nop			@ (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	b002      	add	sp, #8
 800443a:	bd80      	pop	{r7, pc}
 800443c:	3c008000 	.word	0x3c008000
 8004440:	20000210 	.word	0x20000210

08004444 <ADC_Select_VoltageCMOS>:
/*
 * ADC_Select_VoltageCMOS() selects the channel that relates to the VOLTAGE of the CMOS battery.
 * It sets sConfig to its respective channel (13) and channel rank. It then checks if the channel
 * has been configured correctly.
 */
void ADC_Select_VoltageCMOS() {
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
   ADC_ChannelConfTypeDef sConfig = {0};
 800444a:	003b      	movs	r3, r7
 800444c:	0018      	movs	r0, r3
 800444e:	2308      	movs	r3, #8
 8004450:	001a      	movs	r2, r3
 8004452:	2100      	movs	r1, #0
 8004454:	f008 fa50 	bl	800c8f8 <memset>
   sConfig.Channel = ADC_CHANNEL_13;
 8004458:	003b      	movs	r3, r7
 800445a:	4a09      	ldr	r2, [pc, #36]	@ (8004480 <ADC_Select_VoltageCMOS+0x3c>)
 800445c:	601a      	str	r2, [r3, #0]
   sConfig.Rank = 0;
 800445e:	003b      	movs	r3, r7
 8004460:	2200      	movs	r2, #0
 8004462:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004464:	003a      	movs	r2, r7
 8004466:	4b07      	ldr	r3, [pc, #28]	@ (8004484 <ADC_Select_VoltageCMOS+0x40>)
 8004468:	0011      	movs	r1, r2
 800446a:	0018      	movs	r0, r3
 800446c:	f001 f824 	bl	80054b8 <HAL_ADC_ConfigChannel>
 8004470:	1e03      	subs	r3, r0, #0
 8004472:	d001      	beq.n	8004478 <ADC_Select_VoltageCMOS+0x34>
      Error_Handler();
 8004474:	f000 faa4 	bl	80049c0 <Error_Handler>
   }
}
 8004478:	46c0      	nop			@ (mov r8, r8)
 800447a:	46bd      	mov	sp, r7
 800447c:	b002      	add	sp, #8
 800447e:	bd80      	pop	{r7, pc}
 8004480:	34002000 	.word	0x34002000
 8004484:	20000210 	.word	0x20000210

08004488 <ADC_Select_Current18650>:
/*
 * ADC_Select_Current18650() selects the channel that relates to the CURRENT of the 18650 battery.
 * It sets sConfig to its respective channel (9) and channel rank. It then checks if the channel
 * has been configured correctly.
 */
void ADC_Select_Current18650() {
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
   ADC_ChannelConfTypeDef sConfig = {0};
 800448e:	003b      	movs	r3, r7
 8004490:	0018      	movs	r0, r3
 8004492:	2308      	movs	r3, #8
 8004494:	001a      	movs	r2, r3
 8004496:	2100      	movs	r1, #0
 8004498:	f008 fa2e 	bl	800c8f8 <memset>
   sConfig.Channel = ADC_CHANNEL_9;
 800449c:	003b      	movs	r3, r7
 800449e:	4a09      	ldr	r2, [pc, #36]	@ (80044c4 <ADC_Select_Current18650+0x3c>)
 80044a0:	601a      	str	r2, [r3, #0]
   sConfig.Rank = 0;
 80044a2:	003b      	movs	r3, r7
 80044a4:	2200      	movs	r2, #0
 80044a6:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80044a8:	003a      	movs	r2, r7
 80044aa:	4b07      	ldr	r3, [pc, #28]	@ (80044c8 <ADC_Select_Current18650+0x40>)
 80044ac:	0011      	movs	r1, r2
 80044ae:	0018      	movs	r0, r3
 80044b0:	f001 f802 	bl	80054b8 <HAL_ADC_ConfigChannel>
 80044b4:	1e03      	subs	r3, r0, #0
 80044b6:	d001      	beq.n	80044bc <ADC_Select_Current18650+0x34>
      Error_Handler();
 80044b8:	f000 fa82 	bl	80049c0 <Error_Handler>
   }
}
 80044bc:	46c0      	nop			@ (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	b002      	add	sp, #8
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	24000200 	.word	0x24000200
 80044c8:	20000210 	.word	0x20000210

080044cc <ADC_Select_CurrentCMOS>:
/*
 * ADC_Select_CurrentCMOS() selects the channel that relates to the CURRENT of the CMOS battery.
 * It sets sConfig to its respective channel (12) and channel rank. It then checks if the channel
 * has been configured correctly.
 */
void ADC_Select_CurrentCMOS() {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
   ADC_ChannelConfTypeDef sConfig = {0};
 80044d2:	003b      	movs	r3, r7
 80044d4:	0018      	movs	r0, r3
 80044d6:	2308      	movs	r3, #8
 80044d8:	001a      	movs	r2, r3
 80044da:	2100      	movs	r1, #0
 80044dc:	f008 fa0c 	bl	800c8f8 <memset>
   sConfig.Channel = ADC_CHANNEL_12;
 80044e0:	003b      	movs	r3, r7
 80044e2:	4a09      	ldr	r2, [pc, #36]	@ (8004508 <ADC_Select_CurrentCMOS+0x3c>)
 80044e4:	601a      	str	r2, [r3, #0]
   sConfig.Rank = 0;
 80044e6:	003b      	movs	r3, r7
 80044e8:	2200      	movs	r2, #0
 80044ea:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80044ec:	003a      	movs	r2, r7
 80044ee:	4b07      	ldr	r3, [pc, #28]	@ (800450c <ADC_Select_CurrentCMOS+0x40>)
 80044f0:	0011      	movs	r1, r2
 80044f2:	0018      	movs	r0, r3
 80044f4:	f000 ffe0 	bl	80054b8 <HAL_ADC_ConfigChannel>
 80044f8:	1e03      	subs	r3, r0, #0
 80044fa:	d001      	beq.n	8004500 <ADC_Select_CurrentCMOS+0x34>
      Error_Handler();
 80044fc:	f000 fa60 	bl	80049c0 <Error_Handler>
   }
}
 8004500:	46c0      	nop			@ (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}
 8004508:	30001000 	.word	0x30001000
 800450c:	20000210 	.word	0x20000210

08004510 <readNumber>:
 * readNumber() reads the inputs from the discrete bits (output from Switching board) and sets the
 * valueToAdjust variable and writing LED color to its respective value and color.
 *
 * It is used to read both threshold input and which state the switching board is in.
 */
void readNumber() {
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8004514:	4bd3      	ldr	r3, [pc, #844]	@ (8004864 <readNumber+0x354>)
 8004516:	2101      	movs	r1, #1
 8004518:	0018      	movs	r0, r3
 800451a:	f001 fc41 	bl	8005da0 <HAL_GPIO_ReadPin>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d12b      	bne.n	800457a <readNumber+0x6a>
 8004522:	4bd0      	ldr	r3, [pc, #832]	@ (8004864 <readNumber+0x354>)
 8004524:	2102      	movs	r1, #2
 8004526:	0018      	movs	r0, r3
 8004528:	f001 fc3a 	bl	8005da0 <HAL_GPIO_ReadPin>
 800452c:	1e03      	subs	r3, r0, #0
 800452e:	d124      	bne.n	800457a <readNumber+0x6a>
       HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0) {
 8004530:	4bcd      	ldr	r3, [pc, #820]	@ (8004868 <readNumber+0x358>)
 8004532:	2101      	movs	r1, #1
 8004534:	0018      	movs	r0, r3
 8004536:	f001 fc33 	bl	8005da0 <HAL_GPIO_ReadPin>
 800453a:	1e03      	subs	r3, r0, #0
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 800453c:	d11d      	bne.n	800457a <readNumber+0x6a>
      HAL_Delay(5);
 800453e:	2005      	movs	r0, #5
 8004540:	f000 fce6 	bl	8004f10 <HAL_Delay>
      valueToAdjust = 1;
 8004544:	4bc9      	ldr	r3, [pc, #804]	@ (800486c <readNumber+0x35c>)
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]
      // Set LED to Off
      HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin,
 800454a:	2380      	movs	r3, #128	@ 0x80
 800454c:	0059      	lsls	r1, r3, #1
 800454e:	23a0      	movs	r3, #160	@ 0xa0
 8004550:	05db      	lsls	r3, r3, #23
 8004552:	2200      	movs	r2, #0
 8004554:	0018      	movs	r0, r3
 8004556:	f001 fc40 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_RESET);
      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	0099      	lsls	r1, r3, #2
 800455e:	23a0      	movs	r3, #160	@ 0xa0
 8004560:	05db      	lsls	r3, r3, #23
 8004562:	2200      	movs	r2, #0
 8004564:	0018      	movs	r0, r3
 8004566:	f001 fc38 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_RESET);
      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 800456a:	2380      	movs	r3, #128	@ 0x80
 800456c:	00d9      	lsls	r1, r3, #3
 800456e:	23a0      	movs	r3, #160	@ 0xa0
 8004570:	05db      	lsls	r3, r3, #23
 8004572:	2200      	movs	r2, #0
 8004574:	0018      	movs	r0, r3
 8004576:	f001 fc30 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_RESET);
   }

   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 800457a:	4bba      	ldr	r3, [pc, #744]	@ (8004864 <readNumber+0x354>)
 800457c:	2101      	movs	r1, #1
 800457e:	0018      	movs	r0, r3
 8004580:	f001 fc0e 	bl	8005da0 <HAL_GPIO_ReadPin>
 8004584:	0003      	movs	r3, r0
 8004586:	2b01      	cmp	r3, #1
 8004588:	d12b      	bne.n	80045e2 <readNumber+0xd2>
 800458a:	4bb6      	ldr	r3, [pc, #728]	@ (8004864 <readNumber+0x354>)
 800458c:	2102      	movs	r1, #2
 800458e:	0018      	movs	r0, r3
 8004590:	f001 fc06 	bl	8005da0 <HAL_GPIO_ReadPin>
 8004594:	1e03      	subs	r3, r0, #0
 8004596:	d124      	bne.n	80045e2 <readNumber+0xd2>
       HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0) {
 8004598:	4bb3      	ldr	r3, [pc, #716]	@ (8004868 <readNumber+0x358>)
 800459a:	2101      	movs	r1, #1
 800459c:	0018      	movs	r0, r3
 800459e:	f001 fbff 	bl	8005da0 <HAL_GPIO_ReadPin>
 80045a2:	1e03      	subs	r3, r0, #0
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 80045a4:	d11d      	bne.n	80045e2 <readNumber+0xd2>
      HAL_Delay(5);
 80045a6:	2005      	movs	r0, #5
 80045a8:	f000 fcb2 	bl	8004f10 <HAL_Delay>
      valueToAdjust = 2;
 80045ac:	4baf      	ldr	r3, [pc, #700]	@ (800486c <readNumber+0x35c>)
 80045ae:	2202      	movs	r2, #2
 80045b0:	601a      	str	r2, [r3, #0]
      // Set Red
      HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 80045b2:	2380      	movs	r3, #128	@ 0x80
 80045b4:	0059      	lsls	r1, r3, #1
 80045b6:	23a0      	movs	r3, #160	@ 0xa0
 80045b8:	05db      	lsls	r3, r3, #23
 80045ba:	2201      	movs	r2, #1
 80045bc:	0018      	movs	r0, r3
 80045be:	f001 fc0c 	bl	8005dda <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 80045c2:	2380      	movs	r3, #128	@ 0x80
 80045c4:	0099      	lsls	r1, r3, #2
 80045c6:	23a0      	movs	r3, #160	@ 0xa0
 80045c8:	05db      	lsls	r3, r3, #23
 80045ca:	2200      	movs	r2, #0
 80045cc:	0018      	movs	r0, r3
 80045ce:	f001 fc04 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_RESET);
      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 80045d2:	2380      	movs	r3, #128	@ 0x80
 80045d4:	00d9      	lsls	r1, r3, #3
 80045d6:	23a0      	movs	r3, #160	@ 0xa0
 80045d8:	05db      	lsls	r3, r3, #23
 80045da:	2200      	movs	r2, #0
 80045dc:	0018      	movs	r0, r3
 80045de:	f001 fbfc 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_RESET);
   }
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80045e2:	4ba0      	ldr	r3, [pc, #640]	@ (8004864 <readNumber+0x354>)
 80045e4:	2101      	movs	r1, #1
 80045e6:	0018      	movs	r0, r3
 80045e8:	f001 fbda 	bl	8005da0 <HAL_GPIO_ReadPin>
 80045ec:	1e03      	subs	r3, r0, #0
 80045ee:	d12c      	bne.n	800464a <readNumber+0x13a>
 80045f0:	4b9c      	ldr	r3, [pc, #624]	@ (8004864 <readNumber+0x354>)
 80045f2:	2102      	movs	r1, #2
 80045f4:	0018      	movs	r0, r3
 80045f6:	f001 fbd3 	bl	8005da0 <HAL_GPIO_ReadPin>
 80045fa:	0003      	movs	r3, r0
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d124      	bne.n	800464a <readNumber+0x13a>
       HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0) {
 8004600:	4b99      	ldr	r3, [pc, #612]	@ (8004868 <readNumber+0x358>)
 8004602:	2101      	movs	r1, #1
 8004604:	0018      	movs	r0, r3
 8004606:	f001 fbcb 	bl	8005da0 <HAL_GPIO_ReadPin>
 800460a:	1e03      	subs	r3, r0, #0
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 800460c:	d11d      	bne.n	800464a <readNumber+0x13a>
      HAL_Delay(5);
 800460e:	2005      	movs	r0, #5
 8004610:	f000 fc7e 	bl	8004f10 <HAL_Delay>
      valueToAdjust = 3;
 8004614:	4b95      	ldr	r3, [pc, #596]	@ (800486c <readNumber+0x35c>)
 8004616:	2203      	movs	r2, #3
 8004618:	601a      	str	r2, [r3, #0]
      // Set Yellow
      HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 800461a:	2380      	movs	r3, #128	@ 0x80
 800461c:	0059      	lsls	r1, r3, #1
 800461e:	23a0      	movs	r3, #160	@ 0xa0
 8004620:	05db      	lsls	r3, r3, #23
 8004622:	2201      	movs	r2, #1
 8004624:	0018      	movs	r0, r3
 8004626:	f001 fbd8 	bl	8005dda <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 800462a:	2380      	movs	r3, #128	@ 0x80
 800462c:	0099      	lsls	r1, r3, #2
 800462e:	23a0      	movs	r3, #160	@ 0xa0
 8004630:	05db      	lsls	r3, r3, #23
 8004632:	2201      	movs	r2, #1
 8004634:	0018      	movs	r0, r3
 8004636:	f001 fbd0 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_SET);
      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 800463a:	2380      	movs	r3, #128	@ 0x80
 800463c:	00d9      	lsls	r1, r3, #3
 800463e:	23a0      	movs	r3, #160	@ 0xa0
 8004640:	05db      	lsls	r3, r3, #23
 8004642:	2200      	movs	r2, #0
 8004644:	0018      	movs	r0, r3
 8004646:	f001 fbc8 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_RESET);
   }
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 800464a:	4b86      	ldr	r3, [pc, #536]	@ (8004864 <readNumber+0x354>)
 800464c:	2101      	movs	r1, #1
 800464e:	0018      	movs	r0, r3
 8004650:	f001 fba6 	bl	8005da0 <HAL_GPIO_ReadPin>
 8004654:	0003      	movs	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d12c      	bne.n	80046b4 <readNumber+0x1a4>
 800465a:	4b82      	ldr	r3, [pc, #520]	@ (8004864 <readNumber+0x354>)
 800465c:	2102      	movs	r1, #2
 800465e:	0018      	movs	r0, r3
 8004660:	f001 fb9e 	bl	8005da0 <HAL_GPIO_ReadPin>
 8004664:	0003      	movs	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d124      	bne.n	80046b4 <readNumber+0x1a4>
       HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0) {
 800466a:	4b7f      	ldr	r3, [pc, #508]	@ (8004868 <readNumber+0x358>)
 800466c:	2101      	movs	r1, #1
 800466e:	0018      	movs	r0, r3
 8004670:	f001 fb96 	bl	8005da0 <HAL_GPIO_ReadPin>
 8004674:	1e03      	subs	r3, r0, #0
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8004676:	d11d      	bne.n	80046b4 <readNumber+0x1a4>
      HAL_Delay(5);
 8004678:	2005      	movs	r0, #5
 800467a:	f000 fc49 	bl	8004f10 <HAL_Delay>
      valueToAdjust = 4;
 800467e:	4b7b      	ldr	r3, [pc, #492]	@ (800486c <readNumber+0x35c>)
 8004680:	2204      	movs	r2, #4
 8004682:	601a      	str	r2, [r3, #0]
      // Set Green
      HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin,
 8004684:	2380      	movs	r3, #128	@ 0x80
 8004686:	0059      	lsls	r1, r3, #1
 8004688:	23a0      	movs	r3, #160	@ 0xa0
 800468a:	05db      	lsls	r3, r3, #23
 800468c:	2200      	movs	r2, #0
 800468e:	0018      	movs	r0, r3
 8004690:	f001 fba3 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_RESET);
      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 8004694:	2380      	movs	r3, #128	@ 0x80
 8004696:	0099      	lsls	r1, r3, #2
 8004698:	23a0      	movs	r3, #160	@ 0xa0
 800469a:	05db      	lsls	r3, r3, #23
 800469c:	2201      	movs	r2, #1
 800469e:	0018      	movs	r0, r3
 80046a0:	f001 fb9b 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_SET);
      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 80046a4:	2380      	movs	r3, #128	@ 0x80
 80046a6:	00d9      	lsls	r1, r3, #3
 80046a8:	23a0      	movs	r3, #160	@ 0xa0
 80046aa:	05db      	lsls	r3, r3, #23
 80046ac:	2200      	movs	r2, #0
 80046ae:	0018      	movs	r0, r3
 80046b0:	f001 fb93 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_RESET);
   }
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 80046b4:	4b6b      	ldr	r3, [pc, #428]	@ (8004864 <readNumber+0x354>)
 80046b6:	2101      	movs	r1, #1
 80046b8:	0018      	movs	r0, r3
 80046ba:	f001 fb71 	bl	8005da0 <HAL_GPIO_ReadPin>
 80046be:	1e03      	subs	r3, r0, #0
 80046c0:	d12c      	bne.n	800471c <readNumber+0x20c>
 80046c2:	4b68      	ldr	r3, [pc, #416]	@ (8004864 <readNumber+0x354>)
 80046c4:	2102      	movs	r1, #2
 80046c6:	0018      	movs	r0, r3
 80046c8:	f001 fb6a 	bl	8005da0 <HAL_GPIO_ReadPin>
 80046cc:	1e03      	subs	r3, r0, #0
 80046ce:	d125      	bne.n	800471c <readNumber+0x20c>
       HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1) {
 80046d0:	4b65      	ldr	r3, [pc, #404]	@ (8004868 <readNumber+0x358>)
 80046d2:	2101      	movs	r1, #1
 80046d4:	0018      	movs	r0, r3
 80046d6:	f001 fb63 	bl	8005da0 <HAL_GPIO_ReadPin>
 80046da:	0003      	movs	r3, r0
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d11d      	bne.n	800471c <readNumber+0x20c>
      HAL_Delay(5);
 80046e0:	2005      	movs	r0, #5
 80046e2:	f000 fc15 	bl	8004f10 <HAL_Delay>
      valueToAdjust = 5;
 80046e6:	4b61      	ldr	r3, [pc, #388]	@ (800486c <readNumber+0x35c>)
 80046e8:	2205      	movs	r2, #5
 80046ea:	601a      	str	r2, [r3, #0]
      // Set Cyan
      HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin,
 80046ec:	2380      	movs	r3, #128	@ 0x80
 80046ee:	0059      	lsls	r1, r3, #1
 80046f0:	23a0      	movs	r3, #160	@ 0xa0
 80046f2:	05db      	lsls	r3, r3, #23
 80046f4:	2200      	movs	r2, #0
 80046f6:	0018      	movs	r0, r3
 80046f8:	f001 fb6f 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_RESET);
      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 80046fc:	2380      	movs	r3, #128	@ 0x80
 80046fe:	0099      	lsls	r1, r3, #2
 8004700:	23a0      	movs	r3, #160	@ 0xa0
 8004702:	05db      	lsls	r3, r3, #23
 8004704:	2201      	movs	r2, #1
 8004706:	0018      	movs	r0, r3
 8004708:	f001 fb67 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_SET);
      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 800470c:	2380      	movs	r3, #128	@ 0x80
 800470e:	00d9      	lsls	r1, r3, #3
 8004710:	23a0      	movs	r3, #160	@ 0xa0
 8004712:	05db      	lsls	r3, r3, #23
 8004714:	2201      	movs	r2, #1
 8004716:	0018      	movs	r0, r3
 8004718:	f001 fb5f 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_SET);
   }
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 800471c:	4b51      	ldr	r3, [pc, #324]	@ (8004864 <readNumber+0x354>)
 800471e:	2101      	movs	r1, #1
 8004720:	0018      	movs	r0, r3
 8004722:	f001 fb3d 	bl	8005da0 <HAL_GPIO_ReadPin>
 8004726:	0003      	movs	r3, r0
 8004728:	2b01      	cmp	r3, #1
 800472a:	d12c      	bne.n	8004786 <readNumber+0x276>
 800472c:	4b4d      	ldr	r3, [pc, #308]	@ (8004864 <readNumber+0x354>)
 800472e:	2102      	movs	r1, #2
 8004730:	0018      	movs	r0, r3
 8004732:	f001 fb35 	bl	8005da0 <HAL_GPIO_ReadPin>
 8004736:	1e03      	subs	r3, r0, #0
 8004738:	d125      	bne.n	8004786 <readNumber+0x276>
       HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1) {
 800473a:	4b4b      	ldr	r3, [pc, #300]	@ (8004868 <readNumber+0x358>)
 800473c:	2101      	movs	r1, #1
 800473e:	0018      	movs	r0, r3
 8004740:	f001 fb2e 	bl	8005da0 <HAL_GPIO_ReadPin>
 8004744:	0003      	movs	r3, r0
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8004746:	2b01      	cmp	r3, #1
 8004748:	d11d      	bne.n	8004786 <readNumber+0x276>
      HAL_Delay(5);
 800474a:	2005      	movs	r0, #5
 800474c:	f000 fbe0 	bl	8004f10 <HAL_Delay>
      valueToAdjust = 6;
 8004750:	4b46      	ldr	r3, [pc, #280]	@ (800486c <readNumber+0x35c>)
 8004752:	2206      	movs	r2, #6
 8004754:	601a      	str	r2, [r3, #0]
      // Set Blue
      HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin,
 8004756:	2380      	movs	r3, #128	@ 0x80
 8004758:	0059      	lsls	r1, r3, #1
 800475a:	23a0      	movs	r3, #160	@ 0xa0
 800475c:	05db      	lsls	r3, r3, #23
 800475e:	2200      	movs	r2, #0
 8004760:	0018      	movs	r0, r3
 8004762:	f001 fb3a 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_RESET);
      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 8004766:	2380      	movs	r3, #128	@ 0x80
 8004768:	0099      	lsls	r1, r3, #2
 800476a:	23a0      	movs	r3, #160	@ 0xa0
 800476c:	05db      	lsls	r3, r3, #23
 800476e:	2200      	movs	r2, #0
 8004770:	0018      	movs	r0, r3
 8004772:	f001 fb32 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_RESET);
      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 8004776:	2380      	movs	r3, #128	@ 0x80
 8004778:	00d9      	lsls	r1, r3, #3
 800477a:	23a0      	movs	r3, #160	@ 0xa0
 800477c:	05db      	lsls	r3, r3, #23
 800477e:	2201      	movs	r2, #1
 8004780:	0018      	movs	r0, r3
 8004782:	f001 fb2a 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_SET);
   }
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8004786:	4b37      	ldr	r3, [pc, #220]	@ (8004864 <readNumber+0x354>)
 8004788:	2101      	movs	r1, #1
 800478a:	0018      	movs	r0, r3
 800478c:	f001 fb08 	bl	8005da0 <HAL_GPIO_ReadPin>
 8004790:	1e03      	subs	r3, r0, #0
 8004792:	d12d      	bne.n	80047f0 <readNumber+0x2e0>
 8004794:	4b33      	ldr	r3, [pc, #204]	@ (8004864 <readNumber+0x354>)
 8004796:	2102      	movs	r1, #2
 8004798:	0018      	movs	r0, r3
 800479a:	f001 fb01 	bl	8005da0 <HAL_GPIO_ReadPin>
 800479e:	0003      	movs	r3, r0
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d125      	bne.n	80047f0 <readNumber+0x2e0>
       HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1) {
 80047a4:	4b30      	ldr	r3, [pc, #192]	@ (8004868 <readNumber+0x358>)
 80047a6:	2101      	movs	r1, #1
 80047a8:	0018      	movs	r0, r3
 80047aa:	f001 faf9 	bl	8005da0 <HAL_GPIO_ReadPin>
 80047ae:	0003      	movs	r3, r0
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d11d      	bne.n	80047f0 <readNumber+0x2e0>
      HAL_Delay(5);
 80047b4:	2005      	movs	r0, #5
 80047b6:	f000 fbab 	bl	8004f10 <HAL_Delay>
      valueToAdjust = 7;
 80047ba:	4b2c      	ldr	r3, [pc, #176]	@ (800486c <readNumber+0x35c>)
 80047bc:	2207      	movs	r2, #7
 80047be:	601a      	str	r2, [r3, #0]
      // Set Magenta
      HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 80047c0:	2380      	movs	r3, #128	@ 0x80
 80047c2:	0059      	lsls	r1, r3, #1
 80047c4:	23a0      	movs	r3, #160	@ 0xa0
 80047c6:	05db      	lsls	r3, r3, #23
 80047c8:	2201      	movs	r2, #1
 80047ca:	0018      	movs	r0, r3
 80047cc:	f001 fb05 	bl	8005dda <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 80047d0:	2380      	movs	r3, #128	@ 0x80
 80047d2:	0099      	lsls	r1, r3, #2
 80047d4:	23a0      	movs	r3, #160	@ 0xa0
 80047d6:	05db      	lsls	r3, r3, #23
 80047d8:	2200      	movs	r2, #0
 80047da:	0018      	movs	r0, r3
 80047dc:	f001 fafd 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_RESET);
      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 80047e0:	2380      	movs	r3, #128	@ 0x80
 80047e2:	00d9      	lsls	r1, r3, #3
 80047e4:	23a0      	movs	r3, #160	@ 0xa0
 80047e6:	05db      	lsls	r3, r3, #23
 80047e8:	2201      	movs	r2, #1
 80047ea:	0018      	movs	r0, r3
 80047ec:	f001 faf5 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_SET);
   }
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80047f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004864 <readNumber+0x354>)
 80047f2:	2101      	movs	r1, #1
 80047f4:	0018      	movs	r0, r3
 80047f6:	f001 fad3 	bl	8005da0 <HAL_GPIO_ReadPin>
 80047fa:	0003      	movs	r3, r0
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d12d      	bne.n	800485c <readNumber+0x34c>
 8004800:	4b18      	ldr	r3, [pc, #96]	@ (8004864 <readNumber+0x354>)
 8004802:	2102      	movs	r1, #2
 8004804:	0018      	movs	r0, r3
 8004806:	f001 facb 	bl	8005da0 <HAL_GPIO_ReadPin>
 800480a:	0003      	movs	r3, r0
 800480c:	2b01      	cmp	r3, #1
 800480e:	d125      	bne.n	800485c <readNumber+0x34c>
       HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1) {
 8004810:	4b15      	ldr	r3, [pc, #84]	@ (8004868 <readNumber+0x358>)
 8004812:	2101      	movs	r1, #1
 8004814:	0018      	movs	r0, r3
 8004816:	f001 fac3 	bl	8005da0 <HAL_GPIO_ReadPin>
 800481a:	0003      	movs	r3, r0
   if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 && HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 800481c:	2b01      	cmp	r3, #1
 800481e:	d11d      	bne.n	800485c <readNumber+0x34c>
      HAL_Delay(5);
 8004820:	2005      	movs	r0, #5
 8004822:	f000 fb75 	bl	8004f10 <HAL_Delay>
      valueToAdjust = 8;
 8004826:	4b11      	ldr	r3, [pc, #68]	@ (800486c <readNumber+0x35c>)
 8004828:	2208      	movs	r2, #8
 800482a:	601a      	str	r2, [r3, #0]
      // Set White
      HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 800482c:	2380      	movs	r3, #128	@ 0x80
 800482e:	0059      	lsls	r1, r3, #1
 8004830:	23a0      	movs	r3, #160	@ 0xa0
 8004832:	05db      	lsls	r3, r3, #23
 8004834:	2201      	movs	r2, #1
 8004836:	0018      	movs	r0, r3
 8004838:	f001 facf 	bl	8005dda <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 800483c:	2380      	movs	r3, #128	@ 0x80
 800483e:	0099      	lsls	r1, r3, #2
 8004840:	23a0      	movs	r3, #160	@ 0xa0
 8004842:	05db      	lsls	r3, r3, #23
 8004844:	2201      	movs	r2, #1
 8004846:	0018      	movs	r0, r3
 8004848:	f001 fac7 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_SET);
      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 800484c:	2380      	movs	r3, #128	@ 0x80
 800484e:	00d9      	lsls	r1, r3, #3
 8004850:	23a0      	movs	r3, #160	@ 0xa0
 8004852:	05db      	lsls	r3, r3, #23
 8004854:	2201      	movs	r2, #1
 8004856:	0018      	movs	r0, r3
 8004858:	f001 fabf 	bl	8005dda <HAL_GPIO_WritePin>
                        GPIO_PIN_SET);
   }
}
 800485c:	46c0      	nop			@ (mov r8, r8)
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	50000800 	.word	0x50000800
 8004868:	50000400 	.word	0x50000400
 800486c:	20000374 	.word	0x20000374

08004870 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS>:
 * @return Converted value representing the current of the LOW battery in Amps
 *
 * NOTE: If the LOW battery is not currently active (the state is not 0-3), then it will return a 0
 */
float Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS(float V_DiffAmp, int state)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
	switch(state)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b04      	cmp	r3, #4
 800487e:	d02a      	beq.n	80048d6 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x66>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b04      	cmp	r3, #4
 8004884:	dc36      	bgt.n	80048f4 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x84>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d015      	beq.n	80048b8 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x48>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b03      	cmp	r3, #3
 8004890:	dc30      	bgt.n	80048f4 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x84>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d003      	beq.n	80048a0 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x30>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d006      	beq.n	80048ac <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x3c>
 800489e:	e029      	b.n	80048f4 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x84>
	{
	case 1: return (V_DiffAmp/905); break;   //conversion for LS_1
 80048a0:	4917      	ldr	r1, [pc, #92]	@ (8004900 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x90>)
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fb ff88 	bl	80007b8 <__aeabi_fdiv>
 80048a8:	1c03      	adds	r3, r0, #0
 80048aa:	e024      	b.n	80048f6 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x86>
	case 2: return (V_DiffAmp/99.); break;  //conversion for LS_2
 80048ac:	4915      	ldr	r1, [pc, #84]	@ (8004904 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x94>)
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fb ff82 	bl	80007b8 <__aeabi_fdiv>
 80048b4:	1c03      	adds	r3, r0, #0
 80048b6:	e01e      	b.n	80048f6 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x86>
	case 3: return (V_DiffAmp/10.4); break;  //conversion for LS_3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fe f925 	bl	8002b08 <__aeabi_f2d>
 80048be:	4a12      	ldr	r2, [pc, #72]	@ (8004908 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x98>)
 80048c0:	4b12      	ldr	r3, [pc, #72]	@ (800490c <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x9c>)
 80048c2:	f7fc fdc9 	bl	8001458 <__aeabi_ddiv>
 80048c6:	0002      	movs	r2, r0
 80048c8:	000b      	movs	r3, r1
 80048ca:	0010      	movs	r0, r2
 80048cc:	0019      	movs	r1, r3
 80048ce:	f7fe f963 	bl	8002b98 <__aeabi_d2f>
 80048d2:	1c03      	adds	r3, r0, #0
 80048d4:	e00f      	b.n	80048f6 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x86>
	case 4: return (V_DiffAmp/1.22); break; //conversion for LS_4
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fe f916 	bl	8002b08 <__aeabi_f2d>
 80048dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004910 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0xa0>)
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0xa4>)
 80048e0:	f7fc fdba 	bl	8001458 <__aeabi_ddiv>
 80048e4:	0002      	movs	r2, r0
 80048e6:	000b      	movs	r3, r1
 80048e8:	0010      	movs	r0, r2
 80048ea:	0019      	movs	r1, r3
 80048ec:	f7fe f954 	bl	8002b98 <__aeabi_d2f>
 80048f0:	1c03      	adds	r3, r0, #0
 80048f2:	e000      	b.n	80048f6 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_CMOS+0x86>
	default: return 0; break;
 80048f4:	2300      	movs	r3, #0
	}
}
 80048f6:	1c18      	adds	r0, r3, #0
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b002      	add	sp, #8
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	46c0      	nop			@ (mov r8, r8)
 8004900:	44624000 	.word	0x44624000
 8004904:	42c60000 	.word	0x42c60000
 8004908:	cccccccd 	.word	0xcccccccd
 800490c:	4024cccc 	.word	0x4024cccc
 8004910:	b851eb85 	.word	0xb851eb85
 8004914:	3ff3851e 	.word	0x3ff3851e

08004918 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650>:
 * @return Converted value representing the current of the HIGH battery in Amps
 *
 * NOTE: If the HIGH battery is not currently active (the state is not 4-7), then it will return a 0
 */
float Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650(float V_DiffAmp, int state)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
	switch(state)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d02a      	beq.n	800497e <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x66>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b08      	cmp	r3, #8
 800492c:	dc36      	bgt.n	800499c <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x84>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b07      	cmp	r3, #7
 8004932:	d01e      	beq.n	8004972 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x5a>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b07      	cmp	r3, #7
 8004938:	dc30      	bgt.n	800499c <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x84>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b05      	cmp	r3, #5
 800493e:	d003      	beq.n	8004948 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x30>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b06      	cmp	r3, #6
 8004944:	d006      	beq.n	8004954 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x3c>
 8004946:	e029      	b.n	800499c <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x84>
	{
	case 5: return (V_DiffAmp/885); break;   //conversion for LS_5
 8004948:	4917      	ldr	r1, [pc, #92]	@ (80049a8 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x90>)
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fb ff34 	bl	80007b8 <__aeabi_fdiv>
 8004950:	1c03      	adds	r3, r0, #0
 8004952:	e024      	b.n	800499e <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x86>
	case 6: return (V_DiffAmp/98.7); break;   //conversion for LS_6
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7fe f8d7 	bl	8002b08 <__aeabi_f2d>
 800495a:	4a14      	ldr	r2, [pc, #80]	@ (80049ac <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x94>)
 800495c:	4b14      	ldr	r3, [pc, #80]	@ (80049b0 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x98>)
 800495e:	f7fc fd7b 	bl	8001458 <__aeabi_ddiv>
 8004962:	0002      	movs	r2, r0
 8004964:	000b      	movs	r3, r1
 8004966:	0010      	movs	r0, r2
 8004968:	0019      	movs	r1, r3
 800496a:	f7fe f915 	bl	8002b98 <__aeabi_d2f>
 800496e:	1c03      	adds	r3, r0, #0
 8004970:	e015      	b.n	800499e <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x86>
	case 7: return (V_DiffAmp/11.0); break;  //conversion for LS_7
 8004972:	4910      	ldr	r1, [pc, #64]	@ (80049b4 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x9c>)
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fb ff1f 	bl	80007b8 <__aeabi_fdiv>
 800497a:	1c03      	adds	r3, r0, #0
 800497c:	e00f      	b.n	800499e <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x86>
	case 8: return (V_DiffAmp/1.17); break;  //conversion for LS_8
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fe f8c2 	bl	8002b08 <__aeabi_f2d>
 8004984:	4a0c      	ldr	r2, [pc, #48]	@ (80049b8 <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0xa0>)
 8004986:	4b0d      	ldr	r3, [pc, #52]	@ (80049bc <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0xa4>)
 8004988:	f7fc fd66 	bl	8001458 <__aeabi_ddiv>
 800498c:	0002      	movs	r2, r0
 800498e:	000b      	movs	r3, r1
 8004990:	0010      	movs	r0, r2
 8004992:	0019      	movs	r1, r3
 8004994:	f7fe f900 	bl	8002b98 <__aeabi_d2f>
 8004998:	1c03      	adds	r3, r0, #0
 800499a:	e000      	b.n	800499e <Convert_Measurement_of_ADC_Voltage_DiffAmp_to_Current_18650+0x86>
	default: return 0; break;
 800499c:	2300      	movs	r3, #0
	}
}
 800499e:	1c18      	adds	r0, r3, #0
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b002      	add	sp, #8
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	445d4000 	.word	0x445d4000
 80049ac:	cccccccd 	.word	0xcccccccd
 80049b0:	4058accc 	.word	0x4058accc
 80049b4:	41300000 	.word	0x41300000
 80049b8:	eb851eb8 	.word	0xeb851eb8
 80049bc:	3ff2b851 	.word	0x3ff2b851

080049c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049c4:	b672      	cpsid	i
}
 80049c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while (1) {
 80049c8:	46c0      	nop			@ (mov r8, r8)
 80049ca:	e7fd      	b.n	80049c8 <Error_Handler+0x8>

080049cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d0:	4b07      	ldr	r3, [pc, #28]	@ (80049f0 <HAL_MspInit+0x24>)
 80049d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049d4:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <HAL_MspInit+0x24>)
 80049d6:	2101      	movs	r1, #1
 80049d8:	430a      	orrs	r2, r1
 80049da:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80049dc:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <HAL_MspInit+0x24>)
 80049de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049e0:	4b03      	ldr	r3, [pc, #12]	@ (80049f0 <HAL_MspInit+0x24>)
 80049e2:	2180      	movs	r1, #128	@ 0x80
 80049e4:	0549      	lsls	r1, r1, #21
 80049e6:	430a      	orrs	r2, r1
 80049e8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000

080049f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	b08b      	sub	sp, #44	@ 0x2c
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049fc:	2414      	movs	r4, #20
 80049fe:	193b      	adds	r3, r7, r4
 8004a00:	0018      	movs	r0, r3
 8004a02:	2314      	movs	r3, #20
 8004a04:	001a      	movs	r2, r3
 8004a06:	2100      	movs	r1, #0
 8004a08:	f007 ff76 	bl	800c8f8 <memset>
  if(hadc->Instance==ADC1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a22      	ldr	r2, [pc, #136]	@ (8004a9c <HAL_ADC_MspInit+0xa8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d13d      	bne.n	8004a92 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a16:	4b22      	ldr	r3, [pc, #136]	@ (8004aa0 <HAL_ADC_MspInit+0xac>)
 8004a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a1a:	4b21      	ldr	r3, [pc, #132]	@ (8004aa0 <HAL_ADC_MspInit+0xac>)
 8004a1c:	2180      	movs	r1, #128	@ 0x80
 8004a1e:	0089      	lsls	r1, r1, #2
 8004a20:	430a      	orrs	r2, r1
 8004a22:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a24:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa0 <HAL_ADC_MspInit+0xac>)
 8004a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a28:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa0 <HAL_ADC_MspInit+0xac>)
 8004a2a:	2104      	movs	r1, #4
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a30:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <HAL_ADC_MspInit+0xac>)
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	2204      	movs	r2, #4
 8004a36:	4013      	ands	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a3c:	4b18      	ldr	r3, [pc, #96]	@ (8004aa0 <HAL_ADC_MspInit+0xac>)
 8004a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a40:	4b17      	ldr	r3, [pc, #92]	@ (8004aa0 <HAL_ADC_MspInit+0xac>)
 8004a42:	2102      	movs	r1, #2
 8004a44:	430a      	orrs	r2, r1
 8004a46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a48:	4b15      	ldr	r3, [pc, #84]	@ (8004aa0 <HAL_ADC_MspInit+0xac>)
 8004a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	4013      	ands	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC5     ------> ADC_IN15
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Current_ADC_CMOS_Pin|Voltage_ADC_CMOS_Pin|Voltage_ADC_18650_Pin;
 8004a54:	193b      	adds	r3, r7, r4
 8004a56:	222c      	movs	r2, #44	@ 0x2c
 8004a58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a5a:	193b      	adds	r3, r7, r4
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a60:	193b      	adds	r3, r7, r4
 8004a62:	2200      	movs	r2, #0
 8004a64:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a66:	193b      	adds	r3, r7, r4
 8004a68:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa4 <HAL_ADC_MspInit+0xb0>)
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	0010      	movs	r0, r2
 8004a6e:	f001 f819 	bl	8005aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Current_ADC_18650_Pin;
 8004a72:	0021      	movs	r1, r4
 8004a74:	187b      	adds	r3, r7, r1
 8004a76:	2202      	movs	r2, #2
 8004a78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a7a:	187b      	adds	r3, r7, r1
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	187b      	adds	r3, r7, r1
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Current_ADC_18650_GPIO_Port, &GPIO_InitStruct);
 8004a86:	187b      	adds	r3, r7, r1
 8004a88:	4a07      	ldr	r2, [pc, #28]	@ (8004aa8 <HAL_ADC_MspInit+0xb4>)
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	0010      	movs	r0, r2
 8004a8e:	f001 f809 	bl	8005aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b00b      	add	sp, #44	@ 0x2c
 8004a98:	bd90      	pop	{r4, r7, pc}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	40012400 	.word	0x40012400
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	50000800 	.word	0x50000800
 8004aa8:	50000400 	.word	0x50000400

08004aac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b089      	sub	sp, #36	@ 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab4:	240c      	movs	r4, #12
 8004ab6:	193b      	adds	r3, r7, r4
 8004ab8:	0018      	movs	r0, r3
 8004aba:	2314      	movs	r3, #20
 8004abc:	001a      	movs	r2, r3
 8004abe:	2100      	movs	r1, #0
 8004ac0:	f007 ff1a 	bl	800c8f8 <memset>
  if(hspi->Instance==SPI1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a18      	ldr	r2, [pc, #96]	@ (8004b2c <HAL_SPI_MspInit+0x80>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d129      	bne.n	8004b22 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ace:	4b18      	ldr	r3, [pc, #96]	@ (8004b30 <HAL_SPI_MspInit+0x84>)
 8004ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ad2:	4b17      	ldr	r3, [pc, #92]	@ (8004b30 <HAL_SPI_MspInit+0x84>)
 8004ad4:	2180      	movs	r1, #128	@ 0x80
 8004ad6:	0149      	lsls	r1, r1, #5
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004adc:	4b14      	ldr	r3, [pc, #80]	@ (8004b30 <HAL_SPI_MspInit+0x84>)
 8004ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae0:	4b13      	ldr	r3, [pc, #76]	@ (8004b30 <HAL_SPI_MspInit+0x84>)
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ae8:	4b11      	ldr	r3, [pc, #68]	@ (8004b30 <HAL_SPI_MspInit+0x84>)
 8004aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aec:	2201      	movs	r2, #1
 8004aee:	4013      	ands	r3, r2
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004af4:	0021      	movs	r1, r4
 8004af6:	187b      	adds	r3, r7, r1
 8004af8:	22e0      	movs	r2, #224	@ 0xe0
 8004afa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afc:	187b      	adds	r3, r7, r1
 8004afe:	2202      	movs	r2, #2
 8004b00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b02:	187b      	adds	r3, r7, r1
 8004b04:	2200      	movs	r2, #0
 8004b06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b08:	187b      	adds	r3, r7, r1
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004b0e:	187b      	adds	r3, r7, r1
 8004b10:	2200      	movs	r2, #0
 8004b12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b14:	187a      	adds	r2, r7, r1
 8004b16:	23a0      	movs	r3, #160	@ 0xa0
 8004b18:	05db      	lsls	r3, r3, #23
 8004b1a:	0011      	movs	r1, r2
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 ffc1 	bl	8005aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b009      	add	sp, #36	@ 0x24
 8004b28:	bd90      	pop	{r4, r7, pc}
 8004b2a:	46c0      	nop			@ (mov r8, r8)
 8004b2c:	40013000 	.word	0x40013000
 8004b30:	40021000 	.word	0x40021000

08004b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b089      	sub	sp, #36	@ 0x24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b3c:	240c      	movs	r4, #12
 8004b3e:	193b      	adds	r3, r7, r4
 8004b40:	0018      	movs	r0, r3
 8004b42:	2314      	movs	r3, #20
 8004b44:	001a      	movs	r2, r3
 8004b46:	2100      	movs	r1, #0
 8004b48:	f007 fed6 	bl	800c8f8 <memset>
  if(huart->Instance==USART2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a18      	ldr	r2, [pc, #96]	@ (8004bb4 <HAL_UART_MspInit+0x80>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d129      	bne.n	8004baa <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b56:	4b18      	ldr	r3, [pc, #96]	@ (8004bb8 <HAL_UART_MspInit+0x84>)
 8004b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b5a:	4b17      	ldr	r3, [pc, #92]	@ (8004bb8 <HAL_UART_MspInit+0x84>)
 8004b5c:	2180      	movs	r1, #128	@ 0x80
 8004b5e:	0289      	lsls	r1, r1, #10
 8004b60:	430a      	orrs	r2, r1
 8004b62:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b64:	4b14      	ldr	r3, [pc, #80]	@ (8004bb8 <HAL_UART_MspInit+0x84>)
 8004b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b68:	4b13      	ldr	r3, [pc, #76]	@ (8004bb8 <HAL_UART_MspInit+0x84>)
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004b70:	4b11      	ldr	r3, [pc, #68]	@ (8004bb8 <HAL_UART_MspInit+0x84>)
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b74:	2201      	movs	r2, #1
 8004b76:	4013      	ands	r3, r2
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b7c:	0021      	movs	r1, r4
 8004b7e:	187b      	adds	r3, r7, r1
 8004b80:	220c      	movs	r2, #12
 8004b82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b84:	187b      	adds	r3, r7, r1
 8004b86:	2202      	movs	r2, #2
 8004b88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8a:	187b      	adds	r3, r7, r1
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b90:	187b      	adds	r3, r7, r1
 8004b92:	2203      	movs	r2, #3
 8004b94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004b96:	187b      	adds	r3, r7, r1
 8004b98:	2204      	movs	r2, #4
 8004b9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b9c:	187a      	adds	r2, r7, r1
 8004b9e:	23a0      	movs	r3, #160	@ 0xa0
 8004ba0:	05db      	lsls	r3, r3, #23
 8004ba2:	0011      	movs	r1, r2
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f000 ff7d 	bl	8005aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004baa:	46c0      	nop			@ (mov r8, r8)
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b009      	add	sp, #36	@ 0x24
 8004bb0:	bd90      	pop	{r4, r7, pc}
 8004bb2:	46c0      	nop			@ (mov r8, r8)
 8004bb4:	40004400 	.word	0x40004400
 8004bb8:	40021000 	.word	0x40021000

08004bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004bc0:	46c0      	nop			@ (mov r8, r8)
 8004bc2:	e7fd      	b.n	8004bc0 <NMI_Handler+0x4>

08004bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bc8:	46c0      	nop			@ (mov r8, r8)
 8004bca:	e7fd      	b.n	8004bc8 <HardFault_Handler+0x4>

08004bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004bd0:	46c0      	nop			@ (mov r8, r8)
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	if(Timer1 > 0)
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c0c <PendSV_Handler+0x34>)
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <PendSV_Handler+0x18>
	  Timer1--;
 8004be4:	4b09      	ldr	r3, [pc, #36]	@ (8004c0c <PendSV_Handler+0x34>)
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	4b07      	ldr	r3, [pc, #28]	@ (8004c0c <PendSV_Handler+0x34>)
 8004bee:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8004bf0:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <PendSV_Handler+0x38>)
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <PendSV_Handler+0x2c>
	  Timer2--;
 8004bf8:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <PendSV_Handler+0x38>)
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	4b03      	ldr	r3, [pc, #12]	@ (8004c10 <PendSV_Handler+0x38>)
 8004c02:	801a      	strh	r2, [r3, #0]
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c04:	46c0      	nop			@ (mov r8, r8)
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	20000208 	.word	0x20000208
 8004c10:	2000020a 	.word	0x2000020a

08004c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c18:	f000 f95e 	bl	8004ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c1c:	46c0      	nop			@ (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	af00      	add	r7, sp, #0
  return 1;
 8004c26:	2301      	movs	r3, #1
}
 8004c28:	0018      	movs	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <_kill>:

int _kill(int pid, int sig)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c38:	f007 feb8 	bl	800c9ac <__errno>
 8004c3c:	0003      	movs	r3, r0
 8004c3e:	2216      	movs	r2, #22
 8004c40:	601a      	str	r2, [r3, #0]
  return -1;
 8004c42:	2301      	movs	r3, #1
 8004c44:	425b      	negs	r3, r3
}
 8004c46:	0018      	movs	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b002      	add	sp, #8
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <_exit>:

void _exit (int status)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004c56:	2301      	movs	r3, #1
 8004c58:	425a      	negs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	0011      	movs	r1, r2
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7ff ffe5 	bl	8004c2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c64:	46c0      	nop			@ (mov r8, r8)
 8004c66:	e7fd      	b.n	8004c64 <_exit+0x16>

08004c68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e00a      	b.n	8004c90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c7a:	e000      	b.n	8004c7e <_read+0x16>
 8004c7c:	bf00      	nop
 8004c7e:	0001      	movs	r1, r0
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	60ba      	str	r2, [r7, #8]
 8004c86:	b2ca      	uxtb	r2, r1
 8004c88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	dbf0      	blt.n	8004c7a <_read+0x12>
  }

  return len;
 8004c98:	687b      	ldr	r3, [r7, #4]
}
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b006      	add	sp, #24
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b086      	sub	sp, #24
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	e009      	b.n	8004cc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	60ba      	str	r2, [r7, #8]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7ff f845 	bl	8003d4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	dbf1      	blt.n	8004cb4 <_write+0x12>
  }
  return len;
 8004cd0:	687b      	ldr	r3, [r7, #4]
}
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b006      	add	sp, #24
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <_close>:

int _close(int file)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	425b      	negs	r3, r3
}
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	b002      	add	sp, #8
 8004cec:	bd80      	pop	{r7, pc}

08004cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2280      	movs	r2, #128	@ 0x80
 8004cfc:	0192      	lsls	r2, r2, #6
 8004cfe:	605a      	str	r2, [r3, #4]
  return 0;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b002      	add	sp, #8
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <_isatty>:

int _isatty(int file)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d12:	2301      	movs	r3, #1
}
 8004d14:	0018      	movs	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b004      	add	sp, #16
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d3c:	4a14      	ldr	r2, [pc, #80]	@ (8004d90 <_sbrk+0x5c>)
 8004d3e:	4b15      	ldr	r3, [pc, #84]	@ (8004d94 <_sbrk+0x60>)
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d48:	4b13      	ldr	r3, [pc, #76]	@ (8004d98 <_sbrk+0x64>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d50:	4b11      	ldr	r3, [pc, #68]	@ (8004d98 <_sbrk+0x64>)
 8004d52:	4a12      	ldr	r2, [pc, #72]	@ (8004d9c <_sbrk+0x68>)
 8004d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d56:	4b10      	ldr	r3, [pc, #64]	@ (8004d98 <_sbrk+0x64>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d207      	bcs.n	8004d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d64:	f007 fe22 	bl	800c9ac <__errno>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	220c      	movs	r2, #12
 8004d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	425b      	negs	r3, r3
 8004d72:	e009      	b.n	8004d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d74:	4b08      	ldr	r3, [pc, #32]	@ (8004d98 <_sbrk+0x64>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d7a:	4b07      	ldr	r3, [pc, #28]	@ (8004d98 <_sbrk+0x64>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	18d2      	adds	r2, r2, r3
 8004d82:	4b05      	ldr	r3, [pc, #20]	@ (8004d98 <_sbrk+0x64>)
 8004d84:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004d86:	68fb      	ldr	r3, [r7, #12]
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b006      	add	sp, #24
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20005000 	.word	0x20005000
 8004d94:	00000400 	.word	0x00000400
 8004d98:	20000378 	.word	0x20000378
 8004d9c:	20000708 	.word	0x20000708

08004da0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004da4:	46c0      	nop			@ (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004dac:	4813      	ldr	r0, [pc, #76]	@ (8004dfc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004dae:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004db0:	f7ff fff6 	bl	8004da0 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8004db4:	4812      	ldr	r0, [pc, #72]	@ (8004e00 <LoopForever+0x6>)
    LDR R1, [R0]
 8004db6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8004db8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8004dba:	4a12      	ldr	r2, [pc, #72]	@ (8004e04 <LoopForever+0xa>)
    CMP R1, R2
 8004dbc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8004dbe:	d105      	bne.n	8004dcc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8004dc0:	4811      	ldr	r0, [pc, #68]	@ (8004e08 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8004dc2:	4912      	ldr	r1, [pc, #72]	@ (8004e0c <LoopForever+0x12>)
    STR R1, [R0]
 8004dc4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8004dc6:	4812      	ldr	r0, [pc, #72]	@ (8004e10 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8004dc8:	4912      	ldr	r1, [pc, #72]	@ (8004e14 <LoopForever+0x1a>)
    STR R1, [R0]
 8004dca:	6001      	str	r1, [r0, #0]

08004dcc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004dcc:	4812      	ldr	r0, [pc, #72]	@ (8004e18 <LoopForever+0x1e>)
  ldr r1, =_edata
 8004dce:	4913      	ldr	r1, [pc, #76]	@ (8004e1c <LoopForever+0x22>)
  ldr r2, =_sidata
 8004dd0:	4a13      	ldr	r2, [pc, #76]	@ (8004e20 <LoopForever+0x26>)
  movs r3, #0
 8004dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004dd4:	e002      	b.n	8004ddc <LoopCopyDataInit>

08004dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dda:	3304      	adds	r3, #4

08004ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004de0:	d3f9      	bcc.n	8004dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004de2:	4a10      	ldr	r2, [pc, #64]	@ (8004e24 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8004de4:	4c10      	ldr	r4, [pc, #64]	@ (8004e28 <LoopForever+0x2e>)
  movs r3, #0
 8004de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004de8:	e001      	b.n	8004dee <LoopFillZerobss>

08004dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dec:	3204      	adds	r2, #4

08004dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004df0:	d3fb      	bcc.n	8004dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004df2:	f007 fde1 	bl	800c9b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004df6:	f7fe fcb5 	bl	8003764 <main>

08004dfa <LoopForever>:

LoopForever:
    b LoopForever
 8004dfa:	e7fe      	b.n	8004dfa <LoopForever>
   ldr   r0, =_estack
 8004dfc:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8004e00:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8004e04:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8004e08:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8004e0c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8004e10:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8004e14:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8004e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e1c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004e20:	08010c08 	.word	0x08010c08
  ldr r2, =_sbss
 8004e24:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8004e28:	20000708 	.word	0x20000708

08004e2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e2c:	e7fe      	b.n	8004e2c <ADC1_IRQHandler>
	...

08004e30 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004e36:	1dfb      	adds	r3, r7, #7
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <HAL_Init+0x3c>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <HAL_Init+0x3c>)
 8004e42:	2140      	movs	r1, #64	@ 0x40
 8004e44:	430a      	orrs	r2, r1
 8004e46:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e48:	2003      	movs	r0, #3
 8004e4a:	f000 f811 	bl	8004e70 <HAL_InitTick>
 8004e4e:	1e03      	subs	r3, r0, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004e52:	1dfb      	adds	r3, r7, #7
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e001      	b.n	8004e5e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004e5a:	f7ff fdb7 	bl	80049cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004e5e:	1dfb      	adds	r3, r7, #7
 8004e60:	781b      	ldrb	r3, [r3, #0]
}
 8004e62:	0018      	movs	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b002      	add	sp, #8
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			@ (mov r8, r8)
 8004e6c:	40022000 	.word	0x40022000

08004e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e70:	b590      	push	{r4, r7, lr}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e78:	4b14      	ldr	r3, [pc, #80]	@ (8004ecc <HAL_InitTick+0x5c>)
 8004e7a:	681c      	ldr	r4, [r3, #0]
 8004e7c:	4b14      	ldr	r3, [pc, #80]	@ (8004ed0 <HAL_InitTick+0x60>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	0019      	movs	r1, r3
 8004e82:	23fa      	movs	r3, #250	@ 0xfa
 8004e84:	0098      	lsls	r0, r3, #2
 8004e86:	f7fb f95b 	bl	8000140 <__udivsi3>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	0020      	movs	r0, r4
 8004e90:	f7fb f956 	bl	8000140 <__udivsi3>
 8004e94:	0003      	movs	r3, r0
 8004e96:	0018      	movs	r0, r3
 8004e98:	f000 fdf7 	bl	8005a8a <HAL_SYSTICK_Config>
 8004e9c:	1e03      	subs	r3, r0, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e00f      	b.n	8004ec4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d80b      	bhi.n	8004ec2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	2301      	movs	r3, #1
 8004eae:	425b      	negs	r3, r3
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f000 fdd4 	bl	8005a60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004eb8:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <HAL_InitTick+0x64>)
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b003      	add	sp, #12
 8004eca:	bd90      	pop	{r4, r7, pc}
 8004ecc:	20000004 	.word	0x20000004
 8004ed0:	2000000c 	.word	0x2000000c
 8004ed4:	20000008 	.word	0x20000008

08004ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004edc:	4b05      	ldr	r3, [pc, #20]	@ (8004ef4 <HAL_IncTick+0x1c>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	001a      	movs	r2, r3
 8004ee2:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <HAL_IncTick+0x20>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	18d2      	adds	r2, r2, r3
 8004ee8:	4b03      	ldr	r3, [pc, #12]	@ (8004ef8 <HAL_IncTick+0x20>)
 8004eea:	601a      	str	r2, [r3, #0]
}
 8004eec:	46c0      	nop			@ (mov r8, r8)
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	2000000c 	.word	0x2000000c
 8004ef8:	2000037c 	.word	0x2000037c

08004efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  return uwTick;
 8004f00:	4b02      	ldr	r3, [pc, #8]	@ (8004f0c <HAL_GetTick+0x10>)
 8004f02:	681b      	ldr	r3, [r3, #0]
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	46c0      	nop			@ (mov r8, r8)
 8004f0c:	2000037c 	.word	0x2000037c

08004f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f18:	f7ff fff0 	bl	8004efc <HAL_GetTick>
 8004f1c:	0003      	movs	r3, r0
 8004f1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3301      	adds	r3, #1
 8004f28:	d005      	beq.n	8004f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f54 <HAL_Delay+0x44>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	001a      	movs	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	189b      	adds	r3, r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	f7ff ffe0 	bl	8004efc <HAL_GetTick>
 8004f3c:	0002      	movs	r2, r0
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d8f7      	bhi.n	8004f38 <HAL_Delay+0x28>
  {
  }
}
 8004f48:	46c0      	nop			@ (mov r8, r8)
 8004f4a:	46c0      	nop			@ (mov r8, r8)
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b004      	add	sp, #16
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	46c0      	nop			@ (mov r8, r8)
 8004f54:	2000000c 	.word	0x2000000c

08004f58 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e159      	b.n	800521e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2250      	movs	r2, #80	@ 0x50
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0018      	movs	r0, r3
 8004f84:	f7ff fd36 	bl	80049f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8c:	2210      	movs	r2, #16
 8004f8e:	4013      	ands	r3, r2
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d005      	beq.n	8004fa0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004f9e:	d00b      	beq.n	8004fb8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa4:	2210      	movs	r2, #16
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2250      	movs	r2, #80	@ 0x50
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e132      	b.n	800521e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbc:	4a9a      	ldr	r2, [pc, #616]	@ (8005228 <HAL_ADC_Init+0x2d0>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2203      	movs	r2, #3
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d108      	bne.n	8004fe8 <HAL_ADC_Init+0x90>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_ADC_Init+0x90>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_ADC_Init+0x92>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d149      	bne.n	8005082 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	23c0      	movs	r3, #192	@ 0xc0
 8004ff4:	061b      	lsls	r3, r3, #24
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d00b      	beq.n	8005012 <HAL_ADC_Init+0xba>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	2380      	movs	r3, #128	@ 0x80
 8005000:	05db      	lsls	r3, r3, #23
 8005002:	429a      	cmp	r2, r3
 8005004:	d005      	beq.n	8005012 <HAL_ADC_Init+0xba>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	2380      	movs	r3, #128	@ 0x80
 800500c:	061b      	lsls	r3, r3, #24
 800500e:	429a      	cmp	r2, r3
 8005010:	d111      	bne.n	8005036 <HAL_ADC_Init+0xde>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	0092      	lsls	r2, r2, #2
 800501e:	0892      	lsrs	r2, r2, #2
 8005020:	611a      	str	r2, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6919      	ldr	r1, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	611a      	str	r2, [r3, #16]
 8005034:	e014      	b.n	8005060 <HAL_ADC_Init+0x108>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	0092      	lsls	r2, r2, #2
 8005042:	0892      	lsrs	r2, r2, #2
 8005044:	611a      	str	r2, [r3, #16]
 8005046:	4b79      	ldr	r3, [pc, #484]	@ (800522c <HAL_ADC_Init+0x2d4>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4b78      	ldr	r3, [pc, #480]	@ (800522c <HAL_ADC_Init+0x2d4>)
 800504c:	4978      	ldr	r1, [pc, #480]	@ (8005230 <HAL_ADC_Init+0x2d8>)
 800504e:	400a      	ands	r2, r1
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	4b76      	ldr	r3, [pc, #472]	@ (800522c <HAL_ADC_Init+0x2d4>)
 8005054:	6819      	ldr	r1, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	4b74      	ldr	r3, [pc, #464]	@ (800522c <HAL_ADC_Init+0x2d4>)
 800505c:	430a      	orrs	r2, r1
 800505e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2118      	movs	r1, #24
 800506c:	438a      	bics	r2, r1
 800506e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68d9      	ldr	r1, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005082:	4b6a      	ldr	r3, [pc, #424]	@ (800522c <HAL_ADC_Init+0x2d4>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4b69      	ldr	r3, [pc, #420]	@ (800522c <HAL_ADC_Init+0x2d4>)
 8005088:	496a      	ldr	r1, [pc, #424]	@ (8005234 <HAL_ADC_Init+0x2dc>)
 800508a:	400a      	ands	r2, r1
 800508c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800508e:	4b67      	ldr	r3, [pc, #412]	@ (800522c <HAL_ADC_Init+0x2d4>)
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005096:	065a      	lsls	r2, r3, #25
 8005098:	4b64      	ldr	r3, [pc, #400]	@ (800522c <HAL_ADC_Init+0x2d4>)
 800509a:	430a      	orrs	r2, r1
 800509c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	2380      	movs	r3, #128	@ 0x80
 80050a6:	055b      	lsls	r3, r3, #21
 80050a8:	4013      	ands	r3, r2
 80050aa:	d108      	bne.n	80050be <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2180      	movs	r1, #128	@ 0x80
 80050b8:	0549      	lsls	r1, r1, #21
 80050ba:	430a      	orrs	r2, r1
 80050bc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	495b      	ldr	r1, [pc, #364]	@ (8005238 <HAL_ADC_Init+0x2e0>)
 80050ca:	400a      	ands	r2, r1
 80050cc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68d9      	ldr	r1, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d101      	bne.n	80050e4 <HAL_ADC_Init+0x18c>
 80050e0:	2304      	movs	r3, #4
 80050e2:	e000      	b.n	80050e6 <HAL_ADC_Init+0x18e>
 80050e4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80050e6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2020      	movs	r0, #32
 80050ec:	5c1b      	ldrb	r3, [r3, r0]
 80050ee:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80050f0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	202c      	movs	r0, #44	@ 0x2c
 80050f6:	5c1b      	ldrb	r3, [r3, r0]
 80050f8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80050fa:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005100:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005108:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005110:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800511e:	23c2      	movs	r3, #194	@ 0xc2
 8005120:	33ff      	adds	r3, #255	@ 0xff
 8005122:	429a      	cmp	r2, r3
 8005124:	d00b      	beq.n	800513e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68d9      	ldr	r1, [r3, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2221      	movs	r2, #33	@ 0x21
 8005142:	5c9b      	ldrb	r3, [r3, r2]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d11a      	bne.n	800517e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	5c9b      	ldrb	r3, [r3, r2]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2180      	movs	r1, #128	@ 0x80
 800515e:	0249      	lsls	r1, r1, #9
 8005160:	430a      	orrs	r2, r1
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e00b      	b.n	800517e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516a:	2220      	movs	r2, #32
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005176:	2201      	movs	r2, #1
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005182:	2b01      	cmp	r3, #1
 8005184:	d11f      	bne.n	80051c6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	492a      	ldr	r1, [pc, #168]	@ (800523c <HAL_ADC_Init+0x2e4>)
 8005192:	400a      	ands	r2, r1
 8005194:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6919      	ldr	r1, [r3, #16]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80051a4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80051aa:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2101      	movs	r1, #1
 80051c0:	430a      	orrs	r2, r1
 80051c2:	611a      	str	r2, [r3, #16]
 80051c4:	e00e      	b.n	80051e4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2201      	movs	r2, #1
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d107      	bne.n	80051e4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2101      	movs	r1, #1
 80051e0:	438a      	bics	r2, r1
 80051e2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695a      	ldr	r2, [r3, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2107      	movs	r1, #7
 80051f0:	438a      	bics	r2, r1
 80051f2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6959      	ldr	r1, [r3, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005210:	2203      	movs	r2, #3
 8005212:	4393      	bics	r3, r2
 8005214:	2201      	movs	r2, #1
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	0018      	movs	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	b002      	add	sp, #8
 8005224:	bd80      	pop	{r7, pc}
 8005226:	46c0      	nop			@ (mov r8, r8)
 8005228:	fffffefd 	.word	0xfffffefd
 800522c:	40012708 	.word	0x40012708
 8005230:	ffc3ffff 	.word	0xffc3ffff
 8005234:	fdffffff 	.word	0xfdffffff
 8005238:	fffe0219 	.word	0xfffe0219
 800523c:	fffffc03 	.word	0xfffffc03

08005240 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005240:	b590      	push	{r4, r7, lr}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005248:	230f      	movs	r3, #15
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2204      	movs	r2, #4
 8005258:	4013      	ands	r3, r2
 800525a:	d138      	bne.n	80052ce <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2250      	movs	r2, #80	@ 0x50
 8005260:	5c9b      	ldrb	r3, [r3, r2]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_ADC_Start+0x2a>
 8005266:	2302      	movs	r3, #2
 8005268:	e038      	b.n	80052dc <HAL_ADC_Start+0x9c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2250      	movs	r2, #80	@ 0x50
 800526e:	2101      	movs	r1, #1
 8005270:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d007      	beq.n	800528a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800527a:	230f      	movs	r3, #15
 800527c:	18fc      	adds	r4, r7, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	0018      	movs	r0, r3
 8005282:	f000 f981 	bl	8005588 <ADC_Enable>
 8005286:	0003      	movs	r3, r0
 8005288:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800528a:	230f      	movs	r3, #15
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d120      	bne.n	80052d6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005298:	4a12      	ldr	r2, [pc, #72]	@ (80052e4 <HAL_ADC_Start+0xa4>)
 800529a:	4013      	ands	r3, r2
 800529c:	2280      	movs	r2, #128	@ 0x80
 800529e:	0052      	lsls	r2, r2, #1
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2250      	movs	r2, #80	@ 0x50
 80052b0:	2100      	movs	r1, #0
 80052b2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	221c      	movs	r2, #28
 80052ba:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2104      	movs	r1, #4
 80052c8:	430a      	orrs	r2, r1
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	e003      	b.n	80052d6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80052ce:	230f      	movs	r3, #15
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	2202      	movs	r2, #2
 80052d4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80052d6:	230f      	movs	r3, #15
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	781b      	ldrb	r3, [r3, #0]
}
 80052dc:	0018      	movs	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	b005      	add	sp, #20
 80052e2:	bd90      	pop	{r4, r7, pc}
 80052e4:	fffff0fe 	.word	0xfffff0fe

080052e8 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80052e8:	b5b0      	push	{r4, r5, r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052f0:	230f      	movs	r3, #15
 80052f2:	18fb      	adds	r3, r7, r3
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2250      	movs	r2, #80	@ 0x50
 80052fc:	5c9b      	ldrb	r3, [r3, r2]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_ADC_Stop+0x1e>
 8005302:	2302      	movs	r3, #2
 8005304:	e029      	b.n	800535a <HAL_ADC_Stop+0x72>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2250      	movs	r2, #80	@ 0x50
 800530a:	2101      	movs	r1, #1
 800530c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800530e:	250f      	movs	r5, #15
 8005310:	197c      	adds	r4, r7, r5
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0018      	movs	r0, r3
 8005316:	f000 fa06 	bl	8005726 <ADC_ConversionStop>
 800531a:	0003      	movs	r3, r0
 800531c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800531e:	197b      	adds	r3, r7, r5
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d112      	bne.n	800534c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005326:	197c      	adds	r4, r7, r5
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	0018      	movs	r0, r3
 800532c:	f000 f994 	bl	8005658 <ADC_Disable>
 8005330:	0003      	movs	r3, r0
 8005332:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005334:	197b      	adds	r3, r7, r5
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d107      	bne.n	800534c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005340:	4a08      	ldr	r2, [pc, #32]	@ (8005364 <HAL_ADC_Stop+0x7c>)
 8005342:	4013      	ands	r3, r2
 8005344:	2201      	movs	r2, #1
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2250      	movs	r2, #80	@ 0x50
 8005350:	2100      	movs	r1, #0
 8005352:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8005354:	230f      	movs	r3, #15
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	781b      	ldrb	r3, [r3, #0]
}
 800535a:	0018      	movs	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	b004      	add	sp, #16
 8005360:	bdb0      	pop	{r4, r5, r7, pc}
 8005362:	46c0      	nop			@ (mov r8, r8)
 8005364:	fffffefe 	.word	0xfffffefe

08005368 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	2b08      	cmp	r3, #8
 8005380:	d102      	bne.n	8005388 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8005382:	2308      	movs	r3, #8
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	e014      	b.n	80053b2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	4013      	ands	r3, r2
 8005392:	2b01      	cmp	r3, #1
 8005394:	d10b      	bne.n	80053ae <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539a:	2220      	movs	r2, #32
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2250      	movs	r2, #80	@ 0x50
 80053a6:	2100      	movs	r1, #0
 80053a8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e072      	b.n	8005494 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80053ae:	230c      	movs	r3, #12
 80053b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80053b2:	f7ff fda3 	bl	8004efc <HAL_GetTick>
 80053b6:	0003      	movs	r3, r0
 80053b8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80053ba:	e01f      	b.n	80053fc <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	3301      	adds	r3, #1
 80053c0:	d01c      	beq.n	80053fc <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_ADC_PollForConversion+0x70>
 80053c8:	f7ff fd98 	bl	8004efc <HAL_GetTick>
 80053cc:	0002      	movs	r2, r0
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d211      	bcs.n	80053fc <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4013      	ands	r3, r2
 80053e2:	d10b      	bne.n	80053fc <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e8:	2204      	movs	r2, #4
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2250      	movs	r2, #80	@ 0x50
 80053f4:	2100      	movs	r1, #0
 80053f6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e04b      	b.n	8005494 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4013      	ands	r3, r2
 8005406:	d0d9      	beq.n	80053bc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540c:	2280      	movs	r2, #128	@ 0x80
 800540e:	0092      	lsls	r2, r2, #2
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	23c0      	movs	r3, #192	@ 0xc0
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	4013      	ands	r3, r2
 8005422:	d12e      	bne.n	8005482 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800542a:	2b00      	cmp	r3, #0
 800542c:	d129      	bne.n	8005482 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2208      	movs	r2, #8
 8005436:	4013      	ands	r3, r2
 8005438:	2b08      	cmp	r3, #8
 800543a:	d122      	bne.n	8005482 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2204      	movs	r2, #4
 8005444:	4013      	ands	r3, r2
 8005446:	d110      	bne.n	800546a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	210c      	movs	r1, #12
 8005454:	438a      	bics	r2, r1
 8005456:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545c:	4a0f      	ldr	r2, [pc, #60]	@ (800549c <HAL_ADC_PollForConversion+0x134>)
 800545e:	4013      	ands	r3, r2
 8005460:	2201      	movs	r2, #1
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	655a      	str	r2, [r3, #84]	@ 0x54
 8005468:	e00b      	b.n	8005482 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546e:	2220      	movs	r2, #32
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547a:	2201      	movs	r2, #1
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d103      	bne.n	8005492 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	220c      	movs	r2, #12
 8005490:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	0018      	movs	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	b004      	add	sp, #16
 800549a:	bd80      	pop	{r7, pc}
 800549c:	fffffefe 	.word	0xfffffefe

080054a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80054ae:	0018      	movs	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b002      	add	sp, #8
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2250      	movs	r2, #80	@ 0x50
 80054c6:	5c9b      	ldrb	r3, [r3, r2]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x18>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e050      	b.n	8005572 <HAL_ADC_ConfigChannel+0xba>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2250      	movs	r2, #80	@ 0x50
 80054d4:	2101      	movs	r1, #1
 80054d6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2204      	movs	r2, #4
 80054e0:	4013      	ands	r3, r2
 80054e2:	d00b      	beq.n	80054fc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e8:	2220      	movs	r2, #32
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2250      	movs	r2, #80	@ 0x50
 80054f4:	2100      	movs	r1, #0
 80054f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e03a      	b.n	8005572 <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	4a1e      	ldr	r2, [pc, #120]	@ (800557c <HAL_ADC_ConfigChannel+0xc4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d018      	beq.n	8005538 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	035b      	lsls	r3, r3, #13
 8005512:	0b5a      	lsrs	r2, r3, #13
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	2380      	movs	r3, #128	@ 0x80
 8005522:	029b      	lsls	r3, r3, #10
 8005524:	4013      	ands	r3, r2
 8005526:	d01f      	beq.n	8005568 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8005528:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <HAL_ADC_ConfigChannel+0xc8>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b14      	ldr	r3, [pc, #80]	@ (8005580 <HAL_ADC_ConfigChannel+0xc8>)
 800552e:	2180      	movs	r1, #128	@ 0x80
 8005530:	03c9      	lsls	r1, r1, #15
 8005532:	430a      	orrs	r2, r1
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e017      	b.n	8005568 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	035b      	lsls	r3, r3, #13
 8005544:	0b5b      	lsrs	r3, r3, #13
 8005546:	43d9      	mvns	r1, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	400a      	ands	r2, r1
 800554e:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	2380      	movs	r3, #128	@ 0x80
 8005556:	029b      	lsls	r3, r3, #10
 8005558:	4013      	ands	r3, r2
 800555a:	d005      	beq.n	8005568 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800555c:	4b08      	ldr	r3, [pc, #32]	@ (8005580 <HAL_ADC_ConfigChannel+0xc8>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4b07      	ldr	r3, [pc, #28]	@ (8005580 <HAL_ADC_ConfigChannel+0xc8>)
 8005562:	4908      	ldr	r1, [pc, #32]	@ (8005584 <HAL_ADC_ConfigChannel+0xcc>)
 8005564:	400a      	ands	r2, r1
 8005566:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2250      	movs	r2, #80	@ 0x50
 800556c:	2100      	movs	r1, #0
 800556e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	0018      	movs	r0, r3
 8005574:	46bd      	mov	sp, r7
 8005576:	b002      	add	sp, #8
 8005578:	bd80      	pop	{r7, pc}
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	00001001 	.word	0x00001001
 8005580:	40012708 	.word	0x40012708
 8005584:	ffbfffff 	.word	0xffbfffff

08005588 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2203      	movs	r2, #3
 800559c:	4013      	ands	r3, r2
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d108      	bne.n	80055b4 <ADC_Enable+0x2c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2201      	movs	r2, #1
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <ADC_Enable+0x2c>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <ADC_Enable+0x2e>
 80055b4:	2300      	movs	r3, #0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d146      	bne.n	8005648 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a24      	ldr	r2, [pc, #144]	@ (8005654 <ADC_Enable+0xcc>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	d00d      	beq.n	80055e2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ca:	2210      	movs	r2, #16
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d6:	2201      	movs	r2, #1
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e033      	b.n	800564a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2101      	movs	r1, #1
 80055ee:	430a      	orrs	r2, r1
 80055f0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80055f2:	2001      	movs	r0, #1
 80055f4:	f000 f8e4 	bl	80057c0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80055f8:	f7ff fc80 	bl	8004efc <HAL_GetTick>
 80055fc:	0003      	movs	r3, r0
 80055fe:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005600:	e01b      	b.n	800563a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005602:	f7ff fc7b 	bl	8004efc <HAL_GetTick>
 8005606:	0002      	movs	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b0a      	cmp	r3, #10
 800560e:	d914      	bls.n	800563a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2201      	movs	r2, #1
 8005618:	4013      	ands	r3, r2
 800561a:	2b01      	cmp	r3, #1
 800561c:	d00d      	beq.n	800563a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005622:	2210      	movs	r2, #16
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562e:	2201      	movs	r2, #1
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e007      	b.n	800564a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2201      	movs	r2, #1
 8005642:	4013      	ands	r3, r2
 8005644:	2b01      	cmp	r3, #1
 8005646:	d1dc      	bne.n	8005602 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	0018      	movs	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	b004      	add	sp, #16
 8005650:	bd80      	pop	{r7, pc}
 8005652:	46c0      	nop			@ (mov r8, r8)
 8005654:	80000017 	.word	0x80000017

08005658 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2203      	movs	r2, #3
 800566c:	4013      	ands	r3, r2
 800566e:	2b01      	cmp	r3, #1
 8005670:	d108      	bne.n	8005684 <ADC_Disable+0x2c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2201      	movs	r2, #1
 800567a:	4013      	ands	r3, r2
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <ADC_Disable+0x2c>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <ADC_Disable+0x2e>
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d048      	beq.n	800571c <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	2205      	movs	r2, #5
 8005692:	4013      	ands	r3, r2
 8005694:	2b01      	cmp	r3, #1
 8005696:	d110      	bne.n	80056ba <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2102      	movs	r1, #2
 80056a4:	430a      	orrs	r2, r1
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2203      	movs	r2, #3
 80056ae:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80056b0:	f7ff fc24 	bl	8004efc <HAL_GetTick>
 80056b4:	0003      	movs	r3, r0
 80056b6:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80056b8:	e029      	b.n	800570e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056be:	2210      	movs	r2, #16
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ca:	2201      	movs	r2, #1
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e023      	b.n	800571e <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80056d6:	f7ff fc11 	bl	8004efc <HAL_GetTick>
 80056da:	0002      	movs	r2, r0
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b0a      	cmp	r3, #10
 80056e2:	d914      	bls.n	800570e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2201      	movs	r2, #1
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d10d      	bne.n	800570e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f6:	2210      	movs	r2, #16
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005702:	2201      	movs	r2, #1
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e007      	b.n	800571e <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2201      	movs	r2, #1
 8005716:	4013      	ands	r3, r2
 8005718:	2b01      	cmp	r3, #1
 800571a:	d0dc      	beq.n	80056d6 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	0018      	movs	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	b004      	add	sp, #16
 8005724:	bd80      	pop	{r7, pc}

08005726 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2204      	movs	r2, #4
 800573a:	4013      	ands	r3, r2
 800573c:	d03a      	beq.n	80057b4 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2204      	movs	r2, #4
 8005746:	4013      	ands	r3, r2
 8005748:	2b04      	cmp	r3, #4
 800574a:	d10d      	bne.n	8005768 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2202      	movs	r2, #2
 8005754:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8005756:	d107      	bne.n	8005768 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2110      	movs	r1, #16
 8005764:	430a      	orrs	r2, r1
 8005766:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005768:	f7ff fbc8 	bl	8004efc <HAL_GetTick>
 800576c:	0003      	movs	r3, r0
 800576e:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005770:	e01a      	b.n	80057a8 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005772:	f7ff fbc3 	bl	8004efc <HAL_GetTick>
 8005776:	0002      	movs	r2, r0
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b0a      	cmp	r3, #10
 800577e:	d913      	bls.n	80057a8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2204      	movs	r2, #4
 8005788:	4013      	ands	r3, r2
 800578a:	d00d      	beq.n	80057a8 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005790:	2210      	movs	r2, #16
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800579c:	2201      	movs	r2, #1
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e006      	b.n	80057b6 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2204      	movs	r2, #4
 80057b0:	4013      	ands	r3, r2
 80057b2:	d1de      	bne.n	8005772 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	0018      	movs	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	b004      	add	sp, #16
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80057c8:	4b0b      	ldr	r3, [pc, #44]	@ (80057f8 <ADC_DelayMicroSecond+0x38>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	490b      	ldr	r1, [pc, #44]	@ (80057fc <ADC_DelayMicroSecond+0x3c>)
 80057ce:	0018      	movs	r0, r3
 80057d0:	f7fa fcb6 	bl	8000140 <__udivsi3>
 80057d4:	0003      	movs	r3, r0
 80057d6:	001a      	movs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4353      	muls	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80057de:	e002      	b.n	80057e6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f9      	bne.n	80057e0 <ADC_DelayMicroSecond+0x20>
  }
}
 80057ec:	46c0      	nop			@ (mov r8, r8)
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b004      	add	sp, #16
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	20000004 	.word	0x20000004
 80057fc:	000f4240 	.word	0x000f4240

08005800 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800580a:	2317      	movs	r3, #23
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2250      	movs	r2, #80	@ 0x50
 800581e:	5c9b      	ldrb	r3, [r3, r2]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_ADCEx_Calibration_Start+0x28>
 8005824:	2302      	movs	r3, #2
 8005826:	e083      	b.n	8005930 <HAL_ADCEx_Calibration_Start+0x130>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2250      	movs	r2, #80	@ 0x50
 800582c:	2101      	movs	r1, #1
 800582e:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2203      	movs	r2, #3
 8005838:	4013      	ands	r3, r2
 800583a:	2b01      	cmp	r3, #1
 800583c:	d108      	bne.n	8005850 <HAL_ADCEx_Calibration_Start+0x50>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2201      	movs	r2, #1
 8005846:	4013      	ands	r3, r2
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_ADCEx_Calibration_Start+0x50>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <HAL_ADCEx_Calibration_Start+0x52>
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d15b      	bne.n	800590e <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585a:	4a37      	ldr	r2, [pc, #220]	@ (8005938 <HAL_ADCEx_Calibration_Start+0x138>)
 800585c:	4013      	ands	r3, r2
 800585e:	2202      	movs	r2, #2
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2203      	movs	r2, #3
 800586e:	4013      	ands	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2103      	movs	r1, #3
 800587e:	438a      	bics	r2, r1
 8005880:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2180      	movs	r1, #128	@ 0x80
 800588e:	0609      	lsls	r1, r1, #24
 8005890:	430a      	orrs	r2, r1
 8005892:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8005894:	f7ff fb32 	bl	8004efc <HAL_GetTick>
 8005898:	0003      	movs	r3, r0
 800589a:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800589c:	e01d      	b.n	80058da <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800589e:	f7ff fb2d 	bl	8004efc <HAL_GetTick>
 80058a2:	0002      	movs	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b0a      	cmp	r3, #10
 80058aa:	d916      	bls.n	80058da <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	0fdb      	lsrs	r3, r3, #31
 80058b4:	07da      	lsls	r2, r3, #31
 80058b6:	2380      	movs	r3, #128	@ 0x80
 80058b8:	061b      	lsls	r3, r3, #24
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d10d      	bne.n	80058da <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c2:	2212      	movs	r2, #18
 80058c4:	4393      	bics	r3, r2
 80058c6:	2210      	movs	r2, #16
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2250      	movs	r2, #80	@ 0x50
 80058d2:	2100      	movs	r1, #0
 80058d4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e02a      	b.n	8005930 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	0fdb      	lsrs	r3, r3, #31
 80058e2:	07da      	lsls	r2, r3, #31
 80058e4:	2380      	movs	r3, #128	@ 0x80
 80058e6:	061b      	lsls	r3, r3, #24
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d0d8      	beq.n	800589e <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68d9      	ldr	r1, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005900:	2203      	movs	r2, #3
 8005902:	4393      	bics	r3, r2
 8005904:	2201      	movs	r2, #1
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	655a      	str	r2, [r3, #84]	@ 0x54
 800590c:	e009      	b.n	8005922 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005912:	2220      	movs	r2, #32
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800591a:	2317      	movs	r3, #23
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2250      	movs	r2, #80	@ 0x50
 8005926:	2100      	movs	r1, #0
 8005928:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800592a:	2317      	movs	r3, #23
 800592c:	18fb      	adds	r3, r7, r3
 800592e:	781b      	ldrb	r3, [r3, #0]
}
 8005930:	0018      	movs	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	b006      	add	sp, #24
 8005936:	bd80      	pop	{r7, pc}
 8005938:	fffffefd 	.word	0xfffffefd

0800593c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800593c:	b590      	push	{r4, r7, lr}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	0002      	movs	r2, r0
 8005944:	6039      	str	r1, [r7, #0]
 8005946:	1dfb      	adds	r3, r7, #7
 8005948:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800594a:	1dfb      	adds	r3, r7, #7
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005950:	d828      	bhi.n	80059a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005952:	4a2f      	ldr	r2, [pc, #188]	@ (8005a10 <__NVIC_SetPriority+0xd4>)
 8005954:	1dfb      	adds	r3, r7, #7
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	b25b      	sxtb	r3, r3
 800595a:	089b      	lsrs	r3, r3, #2
 800595c:	33c0      	adds	r3, #192	@ 0xc0
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	589b      	ldr	r3, [r3, r2]
 8005962:	1dfa      	adds	r2, r7, #7
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	0011      	movs	r1, r2
 8005968:	2203      	movs	r2, #3
 800596a:	400a      	ands	r2, r1
 800596c:	00d2      	lsls	r2, r2, #3
 800596e:	21ff      	movs	r1, #255	@ 0xff
 8005970:	4091      	lsls	r1, r2
 8005972:	000a      	movs	r2, r1
 8005974:	43d2      	mvns	r2, r2
 8005976:	401a      	ands	r2, r3
 8005978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	019b      	lsls	r3, r3, #6
 800597e:	22ff      	movs	r2, #255	@ 0xff
 8005980:	401a      	ands	r2, r3
 8005982:	1dfb      	adds	r3, r7, #7
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	0018      	movs	r0, r3
 8005988:	2303      	movs	r3, #3
 800598a:	4003      	ands	r3, r0
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005990:	481f      	ldr	r0, [pc, #124]	@ (8005a10 <__NVIC_SetPriority+0xd4>)
 8005992:	1dfb      	adds	r3, r7, #7
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	b25b      	sxtb	r3, r3
 8005998:	089b      	lsrs	r3, r3, #2
 800599a:	430a      	orrs	r2, r1
 800599c:	33c0      	adds	r3, #192	@ 0xc0
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80059a2:	e031      	b.n	8005a08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a14 <__NVIC_SetPriority+0xd8>)
 80059a6:	1dfb      	adds	r3, r7, #7
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	0019      	movs	r1, r3
 80059ac:	230f      	movs	r3, #15
 80059ae:	400b      	ands	r3, r1
 80059b0:	3b08      	subs	r3, #8
 80059b2:	089b      	lsrs	r3, r3, #2
 80059b4:	3306      	adds	r3, #6
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	18d3      	adds	r3, r2, r3
 80059ba:	3304      	adds	r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	1dfa      	adds	r2, r7, #7
 80059c0:	7812      	ldrb	r2, [r2, #0]
 80059c2:	0011      	movs	r1, r2
 80059c4:	2203      	movs	r2, #3
 80059c6:	400a      	ands	r2, r1
 80059c8:	00d2      	lsls	r2, r2, #3
 80059ca:	21ff      	movs	r1, #255	@ 0xff
 80059cc:	4091      	lsls	r1, r2
 80059ce:	000a      	movs	r2, r1
 80059d0:	43d2      	mvns	r2, r2
 80059d2:	401a      	ands	r2, r3
 80059d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	019b      	lsls	r3, r3, #6
 80059da:	22ff      	movs	r2, #255	@ 0xff
 80059dc:	401a      	ands	r2, r3
 80059de:	1dfb      	adds	r3, r7, #7
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	0018      	movs	r0, r3
 80059e4:	2303      	movs	r3, #3
 80059e6:	4003      	ands	r3, r0
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059ec:	4809      	ldr	r0, [pc, #36]	@ (8005a14 <__NVIC_SetPriority+0xd8>)
 80059ee:	1dfb      	adds	r3, r7, #7
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	001c      	movs	r4, r3
 80059f4:	230f      	movs	r3, #15
 80059f6:	4023      	ands	r3, r4
 80059f8:	3b08      	subs	r3, #8
 80059fa:	089b      	lsrs	r3, r3, #2
 80059fc:	430a      	orrs	r2, r1
 80059fe:	3306      	adds	r3, #6
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	18c3      	adds	r3, r0, r3
 8005a04:	3304      	adds	r3, #4
 8005a06:	601a      	str	r2, [r3, #0]
}
 8005a08:	46c0      	nop			@ (mov r8, r8)
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b003      	add	sp, #12
 8005a0e:	bd90      	pop	{r4, r7, pc}
 8005a10:	e000e100 	.word	0xe000e100
 8005a14:	e000ed00 	.word	0xe000ed00

08005a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	1e5a      	subs	r2, r3, #1
 8005a24:	2380      	movs	r3, #128	@ 0x80
 8005a26:	045b      	lsls	r3, r3, #17
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d301      	bcc.n	8005a30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e010      	b.n	8005a52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a30:	4b0a      	ldr	r3, [pc, #40]	@ (8005a5c <SysTick_Config+0x44>)
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	3a01      	subs	r2, #1
 8005a36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a38:	2301      	movs	r3, #1
 8005a3a:	425b      	negs	r3, r3
 8005a3c:	2103      	movs	r1, #3
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f7ff ff7c 	bl	800593c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a44:	4b05      	ldr	r3, [pc, #20]	@ (8005a5c <SysTick_Config+0x44>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a4a:	4b04      	ldr	r3, [pc, #16]	@ (8005a5c <SysTick_Config+0x44>)
 8005a4c:	2207      	movs	r2, #7
 8005a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b002      	add	sp, #8
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	e000e010 	.word	0xe000e010

08005a60 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	210f      	movs	r1, #15
 8005a6c:	187b      	adds	r3, r7, r1
 8005a6e:	1c02      	adds	r2, r0, #0
 8005a70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	187b      	adds	r3, r7, r1
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	b25b      	sxtb	r3, r3
 8005a7a:	0011      	movs	r1, r2
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f7ff ff5d 	bl	800593c <__NVIC_SetPriority>
}
 8005a82:	46c0      	nop			@ (mov r8, r8)
 8005a84:	46bd      	mov	sp, r7
 8005a86:	b004      	add	sp, #16
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f7ff ffbf 	bl	8005a18 <SysTick_Config>
 8005a9a:	0003      	movs	r3, r0
}
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b002      	add	sp, #8
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005aba:	e155      	b.n	8005d68 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4091      	lsls	r1, r2
 8005ac6:	000a      	movs	r2, r1
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d100      	bne.n	8005ad4 <HAL_GPIO_Init+0x30>
 8005ad2:	e146      	b.n	8005d62 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2203      	movs	r2, #3
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d005      	beq.n	8005aec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d130      	bne.n	8005b4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	2203      	movs	r2, #3
 8005af8:	409a      	lsls	r2, r3
 8005afa:	0013      	movs	r3, r2
 8005afc:	43da      	mvns	r2, r3
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	4013      	ands	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	409a      	lsls	r2, r3
 8005b0e:	0013      	movs	r3, r2
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b22:	2201      	movs	r2, #1
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	409a      	lsls	r2, r3
 8005b28:	0013      	movs	r3, r2
 8005b2a:	43da      	mvns	r2, r3
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	091b      	lsrs	r3, r3, #4
 8005b38:	2201      	movs	r2, #1
 8005b3a:	401a      	ands	r2, r3
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	409a      	lsls	r2, r3
 8005b40:	0013      	movs	r3, r2
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2203      	movs	r2, #3
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d017      	beq.n	8005b8a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	2203      	movs	r2, #3
 8005b66:	409a      	lsls	r2, r3
 8005b68:	0013      	movs	r3, r2
 8005b6a:	43da      	mvns	r2, r3
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	409a      	lsls	r2, r3
 8005b7c:	0013      	movs	r3, r2
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2203      	movs	r2, #3
 8005b90:	4013      	ands	r3, r2
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d123      	bne.n	8005bde <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	08da      	lsrs	r2, r3, #3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3208      	adds	r2, #8
 8005b9e:	0092      	lsls	r2, r2, #2
 8005ba0:	58d3      	ldr	r3, [r2, r3]
 8005ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2207      	movs	r2, #7
 8005ba8:	4013      	ands	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	220f      	movs	r2, #15
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	0013      	movs	r3, r2
 8005bb2:	43da      	mvns	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2107      	movs	r1, #7
 8005bc2:	400b      	ands	r3, r1
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	409a      	lsls	r2, r3
 8005bc8:	0013      	movs	r3, r2
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	08da      	lsrs	r2, r3, #3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3208      	adds	r2, #8
 8005bd8:	0092      	lsls	r2, r2, #2
 8005bda:	6939      	ldr	r1, [r7, #16]
 8005bdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	2203      	movs	r2, #3
 8005bea:	409a      	lsls	r2, r3
 8005bec:	0013      	movs	r3, r2
 8005bee:	43da      	mvns	r2, r3
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	401a      	ands	r2, r3
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	409a      	lsls	r2, r3
 8005c04:	0013      	movs	r3, r2
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	23c0      	movs	r3, #192	@ 0xc0
 8005c18:	029b      	lsls	r3, r3, #10
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d100      	bne.n	8005c20 <HAL_GPIO_Init+0x17c>
 8005c1e:	e0a0      	b.n	8005d62 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c20:	4b57      	ldr	r3, [pc, #348]	@ (8005d80 <HAL_GPIO_Init+0x2dc>)
 8005c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c24:	4b56      	ldr	r3, [pc, #344]	@ (8005d80 <HAL_GPIO_Init+0x2dc>)
 8005c26:	2101      	movs	r1, #1
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c2c:	4a55      	ldr	r2, [pc, #340]	@ (8005d84 <HAL_GPIO_Init+0x2e0>)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	089b      	lsrs	r3, r3, #2
 8005c32:	3302      	adds	r3, #2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	589b      	ldr	r3, [r3, r2]
 8005c38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2203      	movs	r2, #3
 8005c3e:	4013      	ands	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	220f      	movs	r2, #15
 8005c44:	409a      	lsls	r2, r3
 8005c46:	0013      	movs	r3, r2
 8005c48:	43da      	mvns	r2, r3
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	23a0      	movs	r3, #160	@ 0xa0
 8005c54:	05db      	lsls	r3, r3, #23
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d01f      	beq.n	8005c9a <HAL_GPIO_Init+0x1f6>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a4a      	ldr	r2, [pc, #296]	@ (8005d88 <HAL_GPIO_Init+0x2e4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d019      	beq.n	8005c96 <HAL_GPIO_Init+0x1f2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a49      	ldr	r2, [pc, #292]	@ (8005d8c <HAL_GPIO_Init+0x2e8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d013      	beq.n	8005c92 <HAL_GPIO_Init+0x1ee>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a48      	ldr	r2, [pc, #288]	@ (8005d90 <HAL_GPIO_Init+0x2ec>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00d      	beq.n	8005c8e <HAL_GPIO_Init+0x1ea>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a47      	ldr	r2, [pc, #284]	@ (8005d94 <HAL_GPIO_Init+0x2f0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d007      	beq.n	8005c8a <HAL_GPIO_Init+0x1e6>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a46      	ldr	r2, [pc, #280]	@ (8005d98 <HAL_GPIO_Init+0x2f4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d101      	bne.n	8005c86 <HAL_GPIO_Init+0x1e2>
 8005c82:	2305      	movs	r3, #5
 8005c84:	e00a      	b.n	8005c9c <HAL_GPIO_Init+0x1f8>
 8005c86:	2306      	movs	r3, #6
 8005c88:	e008      	b.n	8005c9c <HAL_GPIO_Init+0x1f8>
 8005c8a:	2304      	movs	r3, #4
 8005c8c:	e006      	b.n	8005c9c <HAL_GPIO_Init+0x1f8>
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e004      	b.n	8005c9c <HAL_GPIO_Init+0x1f8>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e002      	b.n	8005c9c <HAL_GPIO_Init+0x1f8>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_GPIO_Init+0x1f8>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	2103      	movs	r1, #3
 8005ca0:	400a      	ands	r2, r1
 8005ca2:	0092      	lsls	r2, r2, #2
 8005ca4:	4093      	lsls	r3, r2
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cac:	4935      	ldr	r1, [pc, #212]	@ (8005d84 <HAL_GPIO_Init+0x2e0>)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	089b      	lsrs	r3, r3, #2
 8005cb2:	3302      	adds	r3, #2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cba:	4b38      	ldr	r3, [pc, #224]	@ (8005d9c <HAL_GPIO_Init+0x2f8>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	43da      	mvns	r2, r3
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	2380      	movs	r3, #128	@ 0x80
 8005cd0:	035b      	lsls	r3, r3, #13
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d003      	beq.n	8005cde <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005cde:	4b2f      	ldr	r3, [pc, #188]	@ (8005d9c <HAL_GPIO_Init+0x2f8>)
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8005d9c <HAL_GPIO_Init+0x2f8>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	43da      	mvns	r2, r3
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	2380      	movs	r3, #128	@ 0x80
 8005cfa:	039b      	lsls	r3, r3, #14
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d003      	beq.n	8005d08 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005d08:	4b24      	ldr	r3, [pc, #144]	@ (8005d9c <HAL_GPIO_Init+0x2f8>)
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8005d0e:	4b23      	ldr	r3, [pc, #140]	@ (8005d9c <HAL_GPIO_Init+0x2f8>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	43da      	mvns	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	2380      	movs	r3, #128	@ 0x80
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	4013      	ands	r3, r2
 8005d28:	d003      	beq.n	8005d32 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005d32:	4b1a      	ldr	r3, [pc, #104]	@ (8005d9c <HAL_GPIO_Init+0x2f8>)
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d38:	4b18      	ldr	r3, [pc, #96]	@ (8005d9c <HAL_GPIO_Init+0x2f8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	43da      	mvns	r2, r3
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4013      	ands	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	2380      	movs	r3, #128	@ 0x80
 8005d4e:	025b      	lsls	r3, r3, #9
 8005d50:	4013      	ands	r3, r2
 8005d52:	d003      	beq.n	8005d5c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d9c <HAL_GPIO_Init+0x2f8>)
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	3301      	adds	r3, #1
 8005d66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	40da      	lsrs	r2, r3
 8005d70:	1e13      	subs	r3, r2, #0
 8005d72:	d000      	beq.n	8005d76 <HAL_GPIO_Init+0x2d2>
 8005d74:	e6a2      	b.n	8005abc <HAL_GPIO_Init+0x18>
  }
}
 8005d76:	46c0      	nop			@ (mov r8, r8)
 8005d78:	46c0      	nop			@ (mov r8, r8)
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b006      	add	sp, #24
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40021000 	.word	0x40021000
 8005d84:	40010000 	.word	0x40010000
 8005d88:	50000400 	.word	0x50000400
 8005d8c:	50000800 	.word	0x50000800
 8005d90:	50000c00 	.word	0x50000c00
 8005d94:	50001000 	.word	0x50001000
 8005d98:	50001c00 	.word	0x50001c00
 8005d9c:	40010400 	.word	0x40010400

08005da0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	000a      	movs	r2, r1
 8005daa:	1cbb      	adds	r3, r7, #2
 8005dac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	1cba      	adds	r2, r7, #2
 8005db4:	8812      	ldrh	r2, [r2, #0]
 8005db6:	4013      	ands	r3, r2
 8005db8:	d004      	beq.n	8005dc4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005dba:	230f      	movs	r3, #15
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	e003      	b.n	8005dcc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005dc4:	230f      	movs	r3, #15
 8005dc6:	18fb      	adds	r3, r7, r3
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005dcc:	230f      	movs	r3, #15
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	781b      	ldrb	r3, [r3, #0]
}
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	b004      	add	sp, #16
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	0008      	movs	r0, r1
 8005de4:	0011      	movs	r1, r2
 8005de6:	1cbb      	adds	r3, r7, #2
 8005de8:	1c02      	adds	r2, r0, #0
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	1c7b      	adds	r3, r7, #1
 8005dee:	1c0a      	adds	r2, r1, #0
 8005df0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005df2:	1c7b      	adds	r3, r7, #1
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d004      	beq.n	8005e04 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dfa:	1cbb      	adds	r3, r7, #2
 8005dfc:	881a      	ldrh	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005e02:	e003      	b.n	8005e0c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005e04:	1cbb      	adds	r3, r7, #2
 8005e06:	881a      	ldrh	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005e0c:	46c0      	nop			@ (mov r8, r8)
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b002      	add	sp, #8
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e14:	b5b0      	push	{r4, r5, r7, lr}
 8005e16:	b08a      	sub	sp, #40	@ 0x28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d102      	bne.n	8005e28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f000 fb6c 	bl	8006500 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e28:	4bc8      	ldr	r3, [pc, #800]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	220c      	movs	r2, #12
 8005e2e:	4013      	ands	r3, r2
 8005e30:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e32:	4bc6      	ldr	r3, [pc, #792]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	2380      	movs	r3, #128	@ 0x80
 8005e38:	025b      	lsls	r3, r3, #9
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2201      	movs	r2, #1
 8005e44:	4013      	ands	r3, r2
 8005e46:	d100      	bne.n	8005e4a <HAL_RCC_OscConfig+0x36>
 8005e48:	e07d      	b.n	8005f46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d007      	beq.n	8005e60 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	2b0c      	cmp	r3, #12
 8005e54:	d112      	bne.n	8005e7c <HAL_RCC_OscConfig+0x68>
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	2380      	movs	r3, #128	@ 0x80
 8005e5a:	025b      	lsls	r3, r3, #9
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d10d      	bne.n	8005e7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e60:	4bba      	ldr	r3, [pc, #744]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	2380      	movs	r3, #128	@ 0x80
 8005e66:	029b      	lsls	r3, r3, #10
 8005e68:	4013      	ands	r3, r2
 8005e6a:	d100      	bne.n	8005e6e <HAL_RCC_OscConfig+0x5a>
 8005e6c:	e06a      	b.n	8005f44 <HAL_RCC_OscConfig+0x130>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d166      	bne.n	8005f44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f000 fb42 	bl	8006500 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	2380      	movs	r3, #128	@ 0x80
 8005e82:	025b      	lsls	r3, r3, #9
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d107      	bne.n	8005e98 <HAL_RCC_OscConfig+0x84>
 8005e88:	4bb0      	ldr	r3, [pc, #704]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4baf      	ldr	r3, [pc, #700]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005e8e:	2180      	movs	r1, #128	@ 0x80
 8005e90:	0249      	lsls	r1, r1, #9
 8005e92:	430a      	orrs	r2, r1
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	e027      	b.n	8005ee8 <HAL_RCC_OscConfig+0xd4>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	23a0      	movs	r3, #160	@ 0xa0
 8005e9e:	02db      	lsls	r3, r3, #11
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d10e      	bne.n	8005ec2 <HAL_RCC_OscConfig+0xae>
 8005ea4:	4ba9      	ldr	r3, [pc, #676]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4ba8      	ldr	r3, [pc, #672]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005eaa:	2180      	movs	r1, #128	@ 0x80
 8005eac:	02c9      	lsls	r1, r1, #11
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	4ba6      	ldr	r3, [pc, #664]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4ba5      	ldr	r3, [pc, #660]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005eb8:	2180      	movs	r1, #128	@ 0x80
 8005eba:	0249      	lsls	r1, r1, #9
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	e012      	b.n	8005ee8 <HAL_RCC_OscConfig+0xd4>
 8005ec2:	4ba2      	ldr	r3, [pc, #648]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4ba1      	ldr	r3, [pc, #644]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005ec8:	49a1      	ldr	r1, [pc, #644]	@ (8006150 <HAL_RCC_OscConfig+0x33c>)
 8005eca:	400a      	ands	r2, r1
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	4b9f      	ldr	r3, [pc, #636]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	2380      	movs	r3, #128	@ 0x80
 8005ed4:	025b      	lsls	r3, r3, #9
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4b9b      	ldr	r3, [pc, #620]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	4b9a      	ldr	r3, [pc, #616]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005ee2:	499c      	ldr	r1, [pc, #624]	@ (8006154 <HAL_RCC_OscConfig+0x340>)
 8005ee4:	400a      	ands	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d014      	beq.n	8005f1a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef0:	f7ff f804 	bl	8004efc <HAL_GetTick>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005efa:	f7fe ffff 	bl	8004efc <HAL_GetTick>
 8005efe:	0002      	movs	r2, r0
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b64      	cmp	r3, #100	@ 0x64
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e2f9      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f0c:	4b8f      	ldr	r3, [pc, #572]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	2380      	movs	r3, #128	@ 0x80
 8005f12:	029b      	lsls	r3, r3, #10
 8005f14:	4013      	ands	r3, r2
 8005f16:	d0f0      	beq.n	8005efa <HAL_RCC_OscConfig+0xe6>
 8005f18:	e015      	b.n	8005f46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1a:	f7fe ffef 	bl	8004efc <HAL_GetTick>
 8005f1e:	0003      	movs	r3, r0
 8005f20:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f24:	f7fe ffea 	bl	8004efc <HAL_GetTick>
 8005f28:	0002      	movs	r2, r0
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b64      	cmp	r3, #100	@ 0x64
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e2e4      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f36:	4b85      	ldr	r3, [pc, #532]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	2380      	movs	r3, #128	@ 0x80
 8005f3c:	029b      	lsls	r3, r3, #10
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d1f0      	bne.n	8005f24 <HAL_RCC_OscConfig+0x110>
 8005f42:	e000      	b.n	8005f46 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f44:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d100      	bne.n	8005f52 <HAL_RCC_OscConfig+0x13e>
 8005f50:	e099      	b.n	8006086 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d009      	beq.n	8005f74 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005f60:	4b7a      	ldr	r3, [pc, #488]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	4b79      	ldr	r3, [pc, #484]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005f66:	2120      	movs	r1, #32
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	2220      	movs	r2, #32
 8005f70:	4393      	bics	r3, r2
 8005f72:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d005      	beq.n	8005f86 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b0c      	cmp	r3, #12
 8005f7e:	d13e      	bne.n	8005ffe <HAL_RCC_OscConfig+0x1ea>
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d13b      	bne.n	8005ffe <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005f86:	4b71      	ldr	r3, [pc, #452]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	d004      	beq.n	8005f9a <HAL_RCC_OscConfig+0x186>
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e2b2      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9a:	4b6c      	ldr	r3, [pc, #432]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8006158 <HAL_RCC_OscConfig+0x344>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	0019      	movs	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	021a      	lsls	r2, r3, #8
 8005faa:	4b68      	ldr	r3, [pc, #416]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005fac:	430a      	orrs	r2, r1
 8005fae:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005fb0:	4b66      	ldr	r3, [pc, #408]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2209      	movs	r2, #9
 8005fb6:	4393      	bics	r3, r2
 8005fb8:	0019      	movs	r1, r3
 8005fba:	4b64      	ldr	r3, [pc, #400]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fc2:	f000 fbeb 	bl	800679c <HAL_RCC_GetSysClockFreq>
 8005fc6:	0001      	movs	r1, r0
 8005fc8:	4b60      	ldr	r3, [pc, #384]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	091b      	lsrs	r3, r3, #4
 8005fce:	220f      	movs	r2, #15
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	4a62      	ldr	r2, [pc, #392]	@ (800615c <HAL_RCC_OscConfig+0x348>)
 8005fd4:	5cd3      	ldrb	r3, [r2, r3]
 8005fd6:	000a      	movs	r2, r1
 8005fd8:	40da      	lsrs	r2, r3
 8005fda:	4b61      	ldr	r3, [pc, #388]	@ (8006160 <HAL_RCC_OscConfig+0x34c>)
 8005fdc:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005fde:	4b61      	ldr	r3, [pc, #388]	@ (8006164 <HAL_RCC_OscConfig+0x350>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2513      	movs	r5, #19
 8005fe4:	197c      	adds	r4, r7, r5
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f7fe ff42 	bl	8004e70 <HAL_InitTick>
 8005fec:	0003      	movs	r3, r0
 8005fee:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005ff0:	197b      	adds	r3, r7, r5
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d046      	beq.n	8006086 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8005ff8:	197b      	adds	r3, r7, r5
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	e280      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	d027      	beq.n	8006054 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006004:	4b51      	ldr	r3, [pc, #324]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2209      	movs	r2, #9
 800600a:	4393      	bics	r3, r2
 800600c:	0019      	movs	r1, r3
 800600e:	4b4f      	ldr	r3, [pc, #316]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8006010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006012:	430a      	orrs	r2, r1
 8006014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006016:	f7fe ff71 	bl	8004efc <HAL_GetTick>
 800601a:	0003      	movs	r3, r0
 800601c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006020:	f7fe ff6c 	bl	8004efc <HAL_GetTick>
 8006024:	0002      	movs	r2, r0
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e266      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006032:	4b46      	ldr	r3, [pc, #280]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2204      	movs	r2, #4
 8006038:	4013      	ands	r3, r2
 800603a:	d0f1      	beq.n	8006020 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800603c:	4b43      	ldr	r3, [pc, #268]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4a45      	ldr	r2, [pc, #276]	@ (8006158 <HAL_RCC_OscConfig+0x344>)
 8006042:	4013      	ands	r3, r2
 8006044:	0019      	movs	r1, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	021a      	lsls	r2, r3, #8
 800604c:	4b3f      	ldr	r3, [pc, #252]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
 8006052:	e018      	b.n	8006086 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006054:	4b3d      	ldr	r3, [pc, #244]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	4b3c      	ldr	r3, [pc, #240]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 800605a:	2101      	movs	r1, #1
 800605c:	438a      	bics	r2, r1
 800605e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006060:	f7fe ff4c 	bl	8004efc <HAL_GetTick>
 8006064:	0003      	movs	r3, r0
 8006066:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006068:	e008      	b.n	800607c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800606a:	f7fe ff47 	bl	8004efc <HAL_GetTick>
 800606e:	0002      	movs	r2, r0
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e241      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800607c:	4b33      	ldr	r3, [pc, #204]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2204      	movs	r2, #4
 8006082:	4013      	ands	r3, r2
 8006084:	d1f1      	bne.n	800606a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2210      	movs	r2, #16
 800608c:	4013      	ands	r3, r2
 800608e:	d100      	bne.n	8006092 <HAL_RCC_OscConfig+0x27e>
 8006090:	e0a1      	b.n	80061d6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d140      	bne.n	800611a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006098:	4b2c      	ldr	r3, [pc, #176]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	2380      	movs	r3, #128	@ 0x80
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4013      	ands	r3, r2
 80060a2:	d005      	beq.n	80060b0 <HAL_RCC_OscConfig+0x29c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e227      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060b0:	4b26      	ldr	r3, [pc, #152]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006168 <HAL_RCC_OscConfig+0x354>)
 80060b6:	4013      	ands	r3, r2
 80060b8:	0019      	movs	r1, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1a      	ldr	r2, [r3, #32]
 80060be:	4b23      	ldr	r3, [pc, #140]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 80060c0:	430a      	orrs	r2, r1
 80060c2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060c4:	4b21      	ldr	r3, [pc, #132]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	0a19      	lsrs	r1, r3, #8
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	061a      	lsls	r2, r3, #24
 80060d2:	4b1e      	ldr	r3, [pc, #120]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 80060d4:	430a      	orrs	r2, r1
 80060d6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	0b5b      	lsrs	r3, r3, #13
 80060de:	3301      	adds	r3, #1
 80060e0:	2280      	movs	r2, #128	@ 0x80
 80060e2:	0212      	lsls	r2, r2, #8
 80060e4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80060e6:	4b19      	ldr	r3, [pc, #100]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	091b      	lsrs	r3, r3, #4
 80060ec:	210f      	movs	r1, #15
 80060ee:	400b      	ands	r3, r1
 80060f0:	491a      	ldr	r1, [pc, #104]	@ (800615c <HAL_RCC_OscConfig+0x348>)
 80060f2:	5ccb      	ldrb	r3, [r1, r3]
 80060f4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80060f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006160 <HAL_RCC_OscConfig+0x34c>)
 80060f8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80060fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006164 <HAL_RCC_OscConfig+0x350>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2513      	movs	r5, #19
 8006100:	197c      	adds	r4, r7, r5
 8006102:	0018      	movs	r0, r3
 8006104:	f7fe feb4 	bl	8004e70 <HAL_InitTick>
 8006108:	0003      	movs	r3, r0
 800610a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800610c:	197b      	adds	r3, r7, r5
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d060      	beq.n	80061d6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8006114:	197b      	adds	r3, r7, r5
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	e1f2      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d03f      	beq.n	80061a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006122:	4b0a      	ldr	r3, [pc, #40]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	4b09      	ldr	r3, [pc, #36]	@ (800614c <HAL_RCC_OscConfig+0x338>)
 8006128:	2180      	movs	r1, #128	@ 0x80
 800612a:	0049      	lsls	r1, r1, #1
 800612c:	430a      	orrs	r2, r1
 800612e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006130:	f7fe fee4 	bl	8004efc <HAL_GetTick>
 8006134:	0003      	movs	r3, r0
 8006136:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006138:	e018      	b.n	800616c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800613a:	f7fe fedf 	bl	8004efc <HAL_GetTick>
 800613e:	0002      	movs	r2, r0
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d911      	bls.n	800616c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e1d9      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
 800614c:	40021000 	.word	0x40021000
 8006150:	fffeffff 	.word	0xfffeffff
 8006154:	fffbffff 	.word	0xfffbffff
 8006158:	ffffe0ff 	.word	0xffffe0ff
 800615c:	080102f8 	.word	0x080102f8
 8006160:	20000004 	.word	0x20000004
 8006164:	20000008 	.word	0x20000008
 8006168:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800616c:	4bc9      	ldr	r3, [pc, #804]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	2380      	movs	r3, #128	@ 0x80
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4013      	ands	r3, r2
 8006176:	d0e0      	beq.n	800613a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006178:	4bc6      	ldr	r3, [pc, #792]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4ac6      	ldr	r2, [pc, #792]	@ (8006498 <HAL_RCC_OscConfig+0x684>)
 800617e:	4013      	ands	r3, r2
 8006180:	0019      	movs	r1, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1a      	ldr	r2, [r3, #32]
 8006186:	4bc3      	ldr	r3, [pc, #780]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006188:	430a      	orrs	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800618c:	4bc1      	ldr	r3, [pc, #772]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	021b      	lsls	r3, r3, #8
 8006192:	0a19      	lsrs	r1, r3, #8
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	061a      	lsls	r2, r3, #24
 800619a:	4bbe      	ldr	r3, [pc, #760]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 800619c:	430a      	orrs	r2, r1
 800619e:	605a      	str	r2, [r3, #4]
 80061a0:	e019      	b.n	80061d6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061a2:	4bbc      	ldr	r3, [pc, #752]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4bbb      	ldr	r3, [pc, #748]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80061a8:	49bc      	ldr	r1, [pc, #752]	@ (800649c <HAL_RCC_OscConfig+0x688>)
 80061aa:	400a      	ands	r2, r1
 80061ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ae:	f7fe fea5 	bl	8004efc <HAL_GetTick>
 80061b2:	0003      	movs	r3, r0
 80061b4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061b8:	f7fe fea0 	bl	8004efc <HAL_GetTick>
 80061bc:	0002      	movs	r2, r0
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e19a      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80061ca:	4bb2      	ldr	r3, [pc, #712]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	2380      	movs	r3, #128	@ 0x80
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4013      	ands	r3, r2
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2208      	movs	r2, #8
 80061dc:	4013      	ands	r3, r2
 80061de:	d036      	beq.n	800624e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d019      	beq.n	800621c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061e8:	4baa      	ldr	r3, [pc, #680]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80061ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061ec:	4ba9      	ldr	r3, [pc, #676]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80061ee:	2101      	movs	r1, #1
 80061f0:	430a      	orrs	r2, r1
 80061f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061f4:	f7fe fe82 	bl	8004efc <HAL_GetTick>
 80061f8:	0003      	movs	r3, r0
 80061fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061fe:	f7fe fe7d 	bl	8004efc <HAL_GetTick>
 8006202:	0002      	movs	r2, r0
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e177      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006210:	4ba0      	ldr	r3, [pc, #640]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006214:	2202      	movs	r2, #2
 8006216:	4013      	ands	r3, r2
 8006218:	d0f1      	beq.n	80061fe <HAL_RCC_OscConfig+0x3ea>
 800621a:	e018      	b.n	800624e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800621c:	4b9d      	ldr	r3, [pc, #628]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 800621e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006220:	4b9c      	ldr	r3, [pc, #624]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006222:	2101      	movs	r1, #1
 8006224:	438a      	bics	r2, r1
 8006226:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006228:	f7fe fe68 	bl	8004efc <HAL_GetTick>
 800622c:	0003      	movs	r3, r0
 800622e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006232:	f7fe fe63 	bl	8004efc <HAL_GetTick>
 8006236:	0002      	movs	r2, r0
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e15d      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006244:	4b93      	ldr	r3, [pc, #588]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006248:	2202      	movs	r2, #2
 800624a:	4013      	ands	r3, r2
 800624c:	d1f1      	bne.n	8006232 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2204      	movs	r2, #4
 8006254:	4013      	ands	r3, r2
 8006256:	d100      	bne.n	800625a <HAL_RCC_OscConfig+0x446>
 8006258:	e0ae      	b.n	80063b8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800625a:	2023      	movs	r0, #35	@ 0x23
 800625c:	183b      	adds	r3, r7, r0
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006262:	4b8c      	ldr	r3, [pc, #560]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006266:	2380      	movs	r3, #128	@ 0x80
 8006268:	055b      	lsls	r3, r3, #21
 800626a:	4013      	ands	r3, r2
 800626c:	d109      	bne.n	8006282 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800626e:	4b89      	ldr	r3, [pc, #548]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006272:	4b88      	ldr	r3, [pc, #544]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006274:	2180      	movs	r1, #128	@ 0x80
 8006276:	0549      	lsls	r1, r1, #21
 8006278:	430a      	orrs	r2, r1
 800627a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800627c:	183b      	adds	r3, r7, r0
 800627e:	2201      	movs	r2, #1
 8006280:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006282:	4b87      	ldr	r3, [pc, #540]	@ (80064a0 <HAL_RCC_OscConfig+0x68c>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	2380      	movs	r3, #128	@ 0x80
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	4013      	ands	r3, r2
 800628c:	d11a      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800628e:	4b84      	ldr	r3, [pc, #528]	@ (80064a0 <HAL_RCC_OscConfig+0x68c>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b83      	ldr	r3, [pc, #524]	@ (80064a0 <HAL_RCC_OscConfig+0x68c>)
 8006294:	2180      	movs	r1, #128	@ 0x80
 8006296:	0049      	lsls	r1, r1, #1
 8006298:	430a      	orrs	r2, r1
 800629a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800629c:	f7fe fe2e 	bl	8004efc <HAL_GetTick>
 80062a0:	0003      	movs	r3, r0
 80062a2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a6:	f7fe fe29 	bl	8004efc <HAL_GetTick>
 80062aa:	0002      	movs	r2, r0
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b64      	cmp	r3, #100	@ 0x64
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e123      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b8:	4b79      	ldr	r3, [pc, #484]	@ (80064a0 <HAL_RCC_OscConfig+0x68c>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	2380      	movs	r3, #128	@ 0x80
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	4013      	ands	r3, r2
 80062c2:	d0f0      	beq.n	80062a6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	2380      	movs	r3, #128	@ 0x80
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d107      	bne.n	80062e0 <HAL_RCC_OscConfig+0x4cc>
 80062d0:	4b70      	ldr	r3, [pc, #448]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80062d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062d4:	4b6f      	ldr	r3, [pc, #444]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80062d6:	2180      	movs	r1, #128	@ 0x80
 80062d8:	0049      	lsls	r1, r1, #1
 80062da:	430a      	orrs	r2, r1
 80062dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80062de:	e031      	b.n	8006344 <HAL_RCC_OscConfig+0x530>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10c      	bne.n	8006302 <HAL_RCC_OscConfig+0x4ee>
 80062e8:	4b6a      	ldr	r3, [pc, #424]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80062ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062ec:	4b69      	ldr	r3, [pc, #420]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80062ee:	496b      	ldr	r1, [pc, #428]	@ (800649c <HAL_RCC_OscConfig+0x688>)
 80062f0:	400a      	ands	r2, r1
 80062f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80062f4:	4b67      	ldr	r3, [pc, #412]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80062f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062f8:	4b66      	ldr	r3, [pc, #408]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80062fa:	496a      	ldr	r1, [pc, #424]	@ (80064a4 <HAL_RCC_OscConfig+0x690>)
 80062fc:	400a      	ands	r2, r1
 80062fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8006300:	e020      	b.n	8006344 <HAL_RCC_OscConfig+0x530>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	23a0      	movs	r3, #160	@ 0xa0
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	429a      	cmp	r2, r3
 800630c:	d10e      	bne.n	800632c <HAL_RCC_OscConfig+0x518>
 800630e:	4b61      	ldr	r3, [pc, #388]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006310:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006312:	4b60      	ldr	r3, [pc, #384]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006314:	2180      	movs	r1, #128	@ 0x80
 8006316:	00c9      	lsls	r1, r1, #3
 8006318:	430a      	orrs	r2, r1
 800631a:	651a      	str	r2, [r3, #80]	@ 0x50
 800631c:	4b5d      	ldr	r3, [pc, #372]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 800631e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006320:	4b5c      	ldr	r3, [pc, #368]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006322:	2180      	movs	r1, #128	@ 0x80
 8006324:	0049      	lsls	r1, r1, #1
 8006326:	430a      	orrs	r2, r1
 8006328:	651a      	str	r2, [r3, #80]	@ 0x50
 800632a:	e00b      	b.n	8006344 <HAL_RCC_OscConfig+0x530>
 800632c:	4b59      	ldr	r3, [pc, #356]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 800632e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006330:	4b58      	ldr	r3, [pc, #352]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006332:	495a      	ldr	r1, [pc, #360]	@ (800649c <HAL_RCC_OscConfig+0x688>)
 8006334:	400a      	ands	r2, r1
 8006336:	651a      	str	r2, [r3, #80]	@ 0x50
 8006338:	4b56      	ldr	r3, [pc, #344]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 800633a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800633c:	4b55      	ldr	r3, [pc, #340]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 800633e:	4959      	ldr	r1, [pc, #356]	@ (80064a4 <HAL_RCC_OscConfig+0x690>)
 8006340:	400a      	ands	r2, r1
 8006342:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d015      	beq.n	8006378 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800634c:	f7fe fdd6 	bl	8004efc <HAL_GetTick>
 8006350:	0003      	movs	r3, r0
 8006352:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006354:	e009      	b.n	800636a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006356:	f7fe fdd1 	bl	8004efc <HAL_GetTick>
 800635a:	0002      	movs	r2, r0
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	4a51      	ldr	r2, [pc, #324]	@ (80064a8 <HAL_RCC_OscConfig+0x694>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e0ca      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800636a:	4b4a      	ldr	r3, [pc, #296]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 800636c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800636e:	2380      	movs	r3, #128	@ 0x80
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4013      	ands	r3, r2
 8006374:	d0ef      	beq.n	8006356 <HAL_RCC_OscConfig+0x542>
 8006376:	e014      	b.n	80063a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006378:	f7fe fdc0 	bl	8004efc <HAL_GetTick>
 800637c:	0003      	movs	r3, r0
 800637e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006380:	e009      	b.n	8006396 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006382:	f7fe fdbb 	bl	8004efc <HAL_GetTick>
 8006386:	0002      	movs	r2, r0
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	4a46      	ldr	r2, [pc, #280]	@ (80064a8 <HAL_RCC_OscConfig+0x694>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e0b4      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006396:	4b3f      	ldr	r3, [pc, #252]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006398:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800639a:	2380      	movs	r3, #128	@ 0x80
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4013      	ands	r3, r2
 80063a0:	d1ef      	bne.n	8006382 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063a2:	2323      	movs	r3, #35	@ 0x23
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d105      	bne.n	80063b8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ac:	4b39      	ldr	r3, [pc, #228]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80063ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063b0:	4b38      	ldr	r3, [pc, #224]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80063b2:	493e      	ldr	r1, [pc, #248]	@ (80064ac <HAL_RCC_OscConfig+0x698>)
 80063b4:	400a      	ands	r2, r1
 80063b6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d100      	bne.n	80063c2 <HAL_RCC_OscConfig+0x5ae>
 80063c0:	e09d      	b.n	80064fe <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	2b0c      	cmp	r3, #12
 80063c6:	d100      	bne.n	80063ca <HAL_RCC_OscConfig+0x5b6>
 80063c8:	e076      	b.n	80064b8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d145      	bne.n	800645e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d2:	4b30      	ldr	r3, [pc, #192]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80063d8:	4935      	ldr	r1, [pc, #212]	@ (80064b0 <HAL_RCC_OscConfig+0x69c>)
 80063da:	400a      	ands	r2, r1
 80063dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063de:	f7fe fd8d 	bl	8004efc <HAL_GetTick>
 80063e2:	0003      	movs	r3, r0
 80063e4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063e8:	f7fe fd88 	bl	8004efc <HAL_GetTick>
 80063ec:	0002      	movs	r2, r0
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e082      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80063fa:	4b26      	ldr	r3, [pc, #152]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	2380      	movs	r3, #128	@ 0x80
 8006400:	049b      	lsls	r3, r3, #18
 8006402:	4013      	ands	r3, r2
 8006404:	d1f0      	bne.n	80063e8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006406:	4b23      	ldr	r3, [pc, #140]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4a2a      	ldr	r2, [pc, #168]	@ (80064b4 <HAL_RCC_OscConfig+0x6a0>)
 800640c:	4013      	ands	r3, r2
 800640e:	0019      	movs	r1, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641e:	431a      	orrs	r2, r3
 8006420:	4b1c      	ldr	r3, [pc, #112]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006422:	430a      	orrs	r2, r1
 8006424:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006426:	4b1b      	ldr	r3, [pc, #108]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4b1a      	ldr	r3, [pc, #104]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 800642c:	2180      	movs	r1, #128	@ 0x80
 800642e:	0449      	lsls	r1, r1, #17
 8006430:	430a      	orrs	r2, r1
 8006432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006434:	f7fe fd62 	bl	8004efc <HAL_GetTick>
 8006438:	0003      	movs	r3, r0
 800643a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800643e:	f7fe fd5d 	bl	8004efc <HAL_GetTick>
 8006442:	0002      	movs	r2, r0
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e057      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006450:	4b10      	ldr	r3, [pc, #64]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	2380      	movs	r3, #128	@ 0x80
 8006456:	049b      	lsls	r3, r3, #18
 8006458:	4013      	ands	r3, r2
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x62a>
 800645c:	e04f      	b.n	80064fe <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800645e:	4b0d      	ldr	r3, [pc, #52]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b0c      	ldr	r3, [pc, #48]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006464:	4912      	ldr	r1, [pc, #72]	@ (80064b0 <HAL_RCC_OscConfig+0x69c>)
 8006466:	400a      	ands	r2, r1
 8006468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646a:	f7fe fd47 	bl	8004efc <HAL_GetTick>
 800646e:	0003      	movs	r3, r0
 8006470:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006474:	f7fe fd42 	bl	8004efc <HAL_GetTick>
 8006478:	0002      	movs	r2, r0
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e03c      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006486:	4b03      	ldr	r3, [pc, #12]	@ (8006494 <HAL_RCC_OscConfig+0x680>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	2380      	movs	r3, #128	@ 0x80
 800648c:	049b      	lsls	r3, r3, #18
 800648e:	4013      	ands	r3, r2
 8006490:	d1f0      	bne.n	8006474 <HAL_RCC_OscConfig+0x660>
 8006492:	e034      	b.n	80064fe <HAL_RCC_OscConfig+0x6ea>
 8006494:	40021000 	.word	0x40021000
 8006498:	ffff1fff 	.word	0xffff1fff
 800649c:	fffffeff 	.word	0xfffffeff
 80064a0:	40007000 	.word	0x40007000
 80064a4:	fffffbff 	.word	0xfffffbff
 80064a8:	00001388 	.word	0x00001388
 80064ac:	efffffff 	.word	0xefffffff
 80064b0:	feffffff 	.word	0xfeffffff
 80064b4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e01d      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80064c4:	4b10      	ldr	r3, [pc, #64]	@ (8006508 <HAL_RCC_OscConfig+0x6f4>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	2380      	movs	r3, #128	@ 0x80
 80064ce:	025b      	lsls	r3, r3, #9
 80064d0:	401a      	ands	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d10f      	bne.n	80064fa <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	23f0      	movs	r3, #240	@ 0xf0
 80064de:	039b      	lsls	r3, r3, #14
 80064e0:	401a      	ands	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d107      	bne.n	80064fa <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	23c0      	movs	r3, #192	@ 0xc0
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	401a      	ands	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d001      	beq.n	80064fe <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	0018      	movs	r0, r3
 8006502:	46bd      	mov	sp, r7
 8006504:	b00a      	add	sp, #40	@ 0x28
 8006506:	bdb0      	pop	{r4, r5, r7, pc}
 8006508:	40021000 	.word	0x40021000

0800650c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800650c:	b5b0      	push	{r4, r5, r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e128      	b.n	8006772 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006520:	4b96      	ldr	r3, [pc, #600]	@ (800677c <HAL_RCC_ClockConfig+0x270>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2201      	movs	r2, #1
 8006526:	4013      	ands	r3, r2
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d91e      	bls.n	800656c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652e:	4b93      	ldr	r3, [pc, #588]	@ (800677c <HAL_RCC_ClockConfig+0x270>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2201      	movs	r2, #1
 8006534:	4393      	bics	r3, r2
 8006536:	0019      	movs	r1, r3
 8006538:	4b90      	ldr	r3, [pc, #576]	@ (800677c <HAL_RCC_ClockConfig+0x270>)
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006540:	f7fe fcdc 	bl	8004efc <HAL_GetTick>
 8006544:	0003      	movs	r3, r0
 8006546:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006548:	e009      	b.n	800655e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800654a:	f7fe fcd7 	bl	8004efc <HAL_GetTick>
 800654e:	0002      	movs	r2, r0
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	4a8a      	ldr	r2, [pc, #552]	@ (8006780 <HAL_RCC_ClockConfig+0x274>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d901      	bls.n	800655e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e109      	b.n	8006772 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800655e:	4b87      	ldr	r3, [pc, #540]	@ (800677c <HAL_RCC_ClockConfig+0x270>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2201      	movs	r2, #1
 8006564:	4013      	ands	r3, r2
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d1ee      	bne.n	800654a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2202      	movs	r2, #2
 8006572:	4013      	ands	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006576:	4b83      	ldr	r3, [pc, #524]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	22f0      	movs	r2, #240	@ 0xf0
 800657c:	4393      	bics	r3, r2
 800657e:	0019      	movs	r1, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	4b7f      	ldr	r3, [pc, #508]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 8006586:	430a      	orrs	r2, r1
 8006588:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2201      	movs	r2, #1
 8006590:	4013      	ands	r3, r2
 8006592:	d100      	bne.n	8006596 <HAL_RCC_ClockConfig+0x8a>
 8006594:	e089      	b.n	80066aa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d107      	bne.n	80065ae <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800659e:	4b79      	ldr	r3, [pc, #484]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	2380      	movs	r3, #128	@ 0x80
 80065a4:	029b      	lsls	r3, r3, #10
 80065a6:	4013      	ands	r3, r2
 80065a8:	d120      	bne.n	80065ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e0e1      	b.n	8006772 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d107      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065b6:	4b73      	ldr	r3, [pc, #460]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	2380      	movs	r3, #128	@ 0x80
 80065bc:	049b      	lsls	r3, r3, #18
 80065be:	4013      	ands	r3, r2
 80065c0:	d114      	bne.n	80065ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e0d5      	b.n	8006772 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d106      	bne.n	80065dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ce:	4b6d      	ldr	r3, [pc, #436]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2204      	movs	r2, #4
 80065d4:	4013      	ands	r3, r2
 80065d6:	d109      	bne.n	80065ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e0ca      	b.n	8006772 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80065dc:	4b69      	ldr	r3, [pc, #420]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	2380      	movs	r3, #128	@ 0x80
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4013      	ands	r3, r2
 80065e6:	d101      	bne.n	80065ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e0c2      	b.n	8006772 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ec:	4b65      	ldr	r3, [pc, #404]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	2203      	movs	r2, #3
 80065f2:	4393      	bics	r3, r2
 80065f4:	0019      	movs	r1, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	4b62      	ldr	r3, [pc, #392]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 80065fc:	430a      	orrs	r2, r1
 80065fe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006600:	f7fe fc7c 	bl	8004efc <HAL_GetTick>
 8006604:	0003      	movs	r3, r0
 8006606:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d111      	bne.n	8006634 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006610:	e009      	b.n	8006626 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006612:	f7fe fc73 	bl	8004efc <HAL_GetTick>
 8006616:	0002      	movs	r2, r0
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	4a58      	ldr	r2, [pc, #352]	@ (8006780 <HAL_RCC_ClockConfig+0x274>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e0a5      	b.n	8006772 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006626:	4b57      	ldr	r3, [pc, #348]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	220c      	movs	r2, #12
 800662c:	4013      	ands	r3, r2
 800662e:	2b08      	cmp	r3, #8
 8006630:	d1ef      	bne.n	8006612 <HAL_RCC_ClockConfig+0x106>
 8006632:	e03a      	b.n	80066aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b03      	cmp	r3, #3
 800663a:	d111      	bne.n	8006660 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800663c:	e009      	b.n	8006652 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800663e:	f7fe fc5d 	bl	8004efc <HAL_GetTick>
 8006642:	0002      	movs	r2, r0
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	4a4d      	ldr	r2, [pc, #308]	@ (8006780 <HAL_RCC_ClockConfig+0x274>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e08f      	b.n	8006772 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006652:	4b4c      	ldr	r3, [pc, #304]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	220c      	movs	r2, #12
 8006658:	4013      	ands	r3, r2
 800665a:	2b0c      	cmp	r3, #12
 800665c:	d1ef      	bne.n	800663e <HAL_RCC_ClockConfig+0x132>
 800665e:	e024      	b.n	80066aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d11b      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006668:	e009      	b.n	800667e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800666a:	f7fe fc47 	bl	8004efc <HAL_GetTick>
 800666e:	0002      	movs	r2, r0
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	4a42      	ldr	r2, [pc, #264]	@ (8006780 <HAL_RCC_ClockConfig+0x274>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e079      	b.n	8006772 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800667e:	4b41      	ldr	r3, [pc, #260]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	220c      	movs	r2, #12
 8006684:	4013      	ands	r3, r2
 8006686:	2b04      	cmp	r3, #4
 8006688:	d1ef      	bne.n	800666a <HAL_RCC_ClockConfig+0x15e>
 800668a:	e00e      	b.n	80066aa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800668c:	f7fe fc36 	bl	8004efc <HAL_GetTick>
 8006690:	0002      	movs	r2, r0
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	4a3a      	ldr	r2, [pc, #232]	@ (8006780 <HAL_RCC_ClockConfig+0x274>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e068      	b.n	8006772 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80066a0:	4b38      	ldr	r3, [pc, #224]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	220c      	movs	r2, #12
 80066a6:	4013      	ands	r3, r2
 80066a8:	d1f0      	bne.n	800668c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066aa:	4b34      	ldr	r3, [pc, #208]	@ (800677c <HAL_RCC_ClockConfig+0x270>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2201      	movs	r2, #1
 80066b0:	4013      	ands	r3, r2
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d21e      	bcs.n	80066f6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b8:	4b30      	ldr	r3, [pc, #192]	@ (800677c <HAL_RCC_ClockConfig+0x270>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2201      	movs	r2, #1
 80066be:	4393      	bics	r3, r2
 80066c0:	0019      	movs	r1, r3
 80066c2:	4b2e      	ldr	r3, [pc, #184]	@ (800677c <HAL_RCC_ClockConfig+0x270>)
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80066ca:	f7fe fc17 	bl	8004efc <HAL_GetTick>
 80066ce:	0003      	movs	r3, r0
 80066d0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066d2:	e009      	b.n	80066e8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066d4:	f7fe fc12 	bl	8004efc <HAL_GetTick>
 80066d8:	0002      	movs	r2, r0
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	4a28      	ldr	r2, [pc, #160]	@ (8006780 <HAL_RCC_ClockConfig+0x274>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e044      	b.n	8006772 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e8:	4b24      	ldr	r3, [pc, #144]	@ (800677c <HAL_RCC_ClockConfig+0x270>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2201      	movs	r2, #1
 80066ee:	4013      	ands	r3, r2
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d1ee      	bne.n	80066d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2204      	movs	r2, #4
 80066fc:	4013      	ands	r3, r2
 80066fe:	d009      	beq.n	8006714 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006700:	4b20      	ldr	r3, [pc, #128]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	4a20      	ldr	r2, [pc, #128]	@ (8006788 <HAL_RCC_ClockConfig+0x27c>)
 8006706:	4013      	ands	r3, r2
 8006708:	0019      	movs	r1, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	4b1d      	ldr	r3, [pc, #116]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 8006710:	430a      	orrs	r2, r1
 8006712:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2208      	movs	r2, #8
 800671a:	4013      	ands	r3, r2
 800671c:	d00a      	beq.n	8006734 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800671e:	4b19      	ldr	r3, [pc, #100]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	4a1a      	ldr	r2, [pc, #104]	@ (800678c <HAL_RCC_ClockConfig+0x280>)
 8006724:	4013      	ands	r3, r2
 8006726:	0019      	movs	r1, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	00da      	lsls	r2, r3, #3
 800672e:	4b15      	ldr	r3, [pc, #84]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 8006730:	430a      	orrs	r2, r1
 8006732:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006734:	f000 f832 	bl	800679c <HAL_RCC_GetSysClockFreq>
 8006738:	0001      	movs	r1, r0
 800673a:	4b12      	ldr	r3, [pc, #72]	@ (8006784 <HAL_RCC_ClockConfig+0x278>)
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	091b      	lsrs	r3, r3, #4
 8006740:	220f      	movs	r2, #15
 8006742:	4013      	ands	r3, r2
 8006744:	4a12      	ldr	r2, [pc, #72]	@ (8006790 <HAL_RCC_ClockConfig+0x284>)
 8006746:	5cd3      	ldrb	r3, [r2, r3]
 8006748:	000a      	movs	r2, r1
 800674a:	40da      	lsrs	r2, r3
 800674c:	4b11      	ldr	r3, [pc, #68]	@ (8006794 <HAL_RCC_ClockConfig+0x288>)
 800674e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006750:	4b11      	ldr	r3, [pc, #68]	@ (8006798 <HAL_RCC_ClockConfig+0x28c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	250b      	movs	r5, #11
 8006756:	197c      	adds	r4, r7, r5
 8006758:	0018      	movs	r0, r3
 800675a:	f7fe fb89 	bl	8004e70 <HAL_InitTick>
 800675e:	0003      	movs	r3, r0
 8006760:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006762:	197b      	adds	r3, r7, r5
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800676a:	197b      	adds	r3, r7, r5
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	e000      	b.n	8006772 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	0018      	movs	r0, r3
 8006774:	46bd      	mov	sp, r7
 8006776:	b004      	add	sp, #16
 8006778:	bdb0      	pop	{r4, r5, r7, pc}
 800677a:	46c0      	nop			@ (mov r8, r8)
 800677c:	40022000 	.word	0x40022000
 8006780:	00001388 	.word	0x00001388
 8006784:	40021000 	.word	0x40021000
 8006788:	fffff8ff 	.word	0xfffff8ff
 800678c:	ffffc7ff 	.word	0xffffc7ff
 8006790:	080102f8 	.word	0x080102f8
 8006794:	20000004 	.word	0x20000004
 8006798:	20000008 	.word	0x20000008

0800679c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800679c:	b5b0      	push	{r4, r5, r7, lr}
 800679e:	b08e      	sub	sp, #56	@ 0x38
 80067a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80067a2:	4b4c      	ldr	r3, [pc, #304]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067aa:	230c      	movs	r3, #12
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b0c      	cmp	r3, #12
 80067b0:	d014      	beq.n	80067dc <HAL_RCC_GetSysClockFreq+0x40>
 80067b2:	d900      	bls.n	80067b6 <HAL_RCC_GetSysClockFreq+0x1a>
 80067b4:	e07b      	b.n	80068ae <HAL_RCC_GetSysClockFreq+0x112>
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d002      	beq.n	80067c0 <HAL_RCC_GetSysClockFreq+0x24>
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d00b      	beq.n	80067d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80067be:	e076      	b.n	80068ae <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80067c0:	4b44      	ldr	r3, [pc, #272]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2210      	movs	r2, #16
 80067c6:	4013      	ands	r3, r2
 80067c8:	d002      	beq.n	80067d0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80067ca:	4b43      	ldr	r3, [pc, #268]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80067cc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80067ce:	e07c      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80067d0:	4b42      	ldr	r3, [pc, #264]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x140>)
 80067d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80067d4:	e079      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067d6:	4b42      	ldr	r3, [pc, #264]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x144>)
 80067d8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80067da:	e076      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80067dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067de:	0c9a      	lsrs	r2, r3, #18
 80067e0:	230f      	movs	r3, #15
 80067e2:	401a      	ands	r2, r3
 80067e4:	4b3f      	ldr	r3, [pc, #252]	@ (80068e4 <HAL_RCC_GetSysClockFreq+0x148>)
 80067e6:	5c9b      	ldrb	r3, [r3, r2]
 80067e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80067ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ec:	0d9a      	lsrs	r2, r3, #22
 80067ee:	2303      	movs	r3, #3
 80067f0:	4013      	ands	r3, r2
 80067f2:	3301      	adds	r3, #1
 80067f4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067f6:	4b37      	ldr	r3, [pc, #220]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	2380      	movs	r3, #128	@ 0x80
 80067fc:	025b      	lsls	r3, r3, #9
 80067fe:	4013      	ands	r3, r2
 8006800:	d01a      	beq.n	8006838 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006804:	61bb      	str	r3, [r7, #24]
 8006806:	2300      	movs	r3, #0
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	4a35      	ldr	r2, [pc, #212]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x144>)
 800680c:	2300      	movs	r3, #0
 800680e:	69b8      	ldr	r0, [r7, #24]
 8006810:	69f9      	ldr	r1, [r7, #28]
 8006812:	f7f9 fe69 	bl	80004e8 <__aeabi_lmul>
 8006816:	0002      	movs	r2, r0
 8006818:	000b      	movs	r3, r1
 800681a:	0010      	movs	r0, r2
 800681c:	0019      	movs	r1, r3
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f7f9 fe3d 	bl	80004a8 <__aeabi_uldivmod>
 800682e:	0002      	movs	r2, r0
 8006830:	000b      	movs	r3, r1
 8006832:	0013      	movs	r3, r2
 8006834:	637b      	str	r3, [r7, #52]	@ 0x34
 8006836:	e037      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006838:	4b26      	ldr	r3, [pc, #152]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2210      	movs	r2, #16
 800683e:	4013      	ands	r3, r2
 8006840:	d01a      	beq.n	8006878 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006844:	60bb      	str	r3, [r7, #8]
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	4a23      	ldr	r2, [pc, #140]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800684c:	2300      	movs	r3, #0
 800684e:	68b8      	ldr	r0, [r7, #8]
 8006850:	68f9      	ldr	r1, [r7, #12]
 8006852:	f7f9 fe49 	bl	80004e8 <__aeabi_lmul>
 8006856:	0002      	movs	r2, r0
 8006858:	000b      	movs	r3, r1
 800685a:	0010      	movs	r0, r2
 800685c:	0019      	movs	r1, r3
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	603b      	str	r3, [r7, #0]
 8006862:	2300      	movs	r3, #0
 8006864:	607b      	str	r3, [r7, #4]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f7f9 fe1d 	bl	80004a8 <__aeabi_uldivmod>
 800686e:	0002      	movs	r2, r0
 8006870:	000b      	movs	r3, r1
 8006872:	0013      	movs	r3, r2
 8006874:	637b      	str	r3, [r7, #52]	@ 0x34
 8006876:	e017      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687a:	0018      	movs	r0, r3
 800687c:	2300      	movs	r3, #0
 800687e:	0019      	movs	r1, r3
 8006880:	4a16      	ldr	r2, [pc, #88]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x140>)
 8006882:	2300      	movs	r3, #0
 8006884:	f7f9 fe30 	bl	80004e8 <__aeabi_lmul>
 8006888:	0002      	movs	r2, r0
 800688a:	000b      	movs	r3, r1
 800688c:	0010      	movs	r0, r2
 800688e:	0019      	movs	r1, r3
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	001c      	movs	r4, r3
 8006894:	2300      	movs	r3, #0
 8006896:	001d      	movs	r5, r3
 8006898:	0022      	movs	r2, r4
 800689a:	002b      	movs	r3, r5
 800689c:	f7f9 fe04 	bl	80004a8 <__aeabi_uldivmod>
 80068a0:	0002      	movs	r2, r0
 80068a2:	000b      	movs	r3, r1
 80068a4:	0013      	movs	r3, r2
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80068a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068aa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80068ac:	e00d      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80068ae:	4b09      	ldr	r3, [pc, #36]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	0b5b      	lsrs	r3, r3, #13
 80068b4:	2207      	movs	r2, #7
 80068b6:	4013      	ands	r3, r2
 80068b8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	3301      	adds	r3, #1
 80068be:	2280      	movs	r2, #128	@ 0x80
 80068c0:	0212      	lsls	r2, r2, #8
 80068c2:	409a      	lsls	r2, r3
 80068c4:	0013      	movs	r3, r2
 80068c6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80068c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80068ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80068cc:	0018      	movs	r0, r3
 80068ce:	46bd      	mov	sp, r7
 80068d0:	b00e      	add	sp, #56	@ 0x38
 80068d2:	bdb0      	pop	{r4, r5, r7, pc}
 80068d4:	40021000 	.word	0x40021000
 80068d8:	003d0900 	.word	0x003d0900
 80068dc:	00f42400 	.word	0x00f42400
 80068e0:	007a1200 	.word	0x007a1200
 80068e4:	08010310 	.word	0x08010310

080068e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068ec:	4b02      	ldr	r3, [pc, #8]	@ (80068f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80068ee:	681b      	ldr	r3, [r3, #0]
}
 80068f0:	0018      	movs	r0, r3
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	46c0      	nop			@ (mov r8, r8)
 80068f8:	20000004 	.word	0x20000004

080068fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006900:	f7ff fff2 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 8006904:	0001      	movs	r1, r0
 8006906:	4b06      	ldr	r3, [pc, #24]	@ (8006920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	2207      	movs	r2, #7
 800690e:	4013      	ands	r3, r2
 8006910:	4a04      	ldr	r2, [pc, #16]	@ (8006924 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006912:	5cd3      	ldrb	r3, [r2, r3]
 8006914:	40d9      	lsrs	r1, r3
 8006916:	000b      	movs	r3, r1
}
 8006918:	0018      	movs	r0, r3
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	46c0      	nop			@ (mov r8, r8)
 8006920:	40021000 	.word	0x40021000
 8006924:	08010308 	.word	0x08010308

08006928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800692c:	f7ff ffdc 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 8006930:	0001      	movs	r1, r0
 8006932:	4b06      	ldr	r3, [pc, #24]	@ (800694c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	0adb      	lsrs	r3, r3, #11
 8006938:	2207      	movs	r2, #7
 800693a:	4013      	ands	r3, r2
 800693c:	4a04      	ldr	r2, [pc, #16]	@ (8006950 <HAL_RCC_GetPCLK2Freq+0x28>)
 800693e:	5cd3      	ldrb	r3, [r2, r3]
 8006940:	40d9      	lsrs	r1, r3
 8006942:	000b      	movs	r3, r1
}
 8006944:	0018      	movs	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	46c0      	nop			@ (mov r8, r8)
 800694c:	40021000 	.word	0x40021000
 8006950:	08010308 	.word	0x08010308

08006954 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800695c:	2017      	movs	r0, #23
 800695e:	183b      	adds	r3, r7, r0
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2220      	movs	r2, #32
 800696a:	4013      	ands	r3, r2
 800696c:	d100      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800696e:	e0c7      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006970:	4b84      	ldr	r3, [pc, #528]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006972:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006974:	2380      	movs	r3, #128	@ 0x80
 8006976:	055b      	lsls	r3, r3, #21
 8006978:	4013      	ands	r3, r2
 800697a:	d109      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800697c:	4b81      	ldr	r3, [pc, #516]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800697e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006980:	4b80      	ldr	r3, [pc, #512]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006982:	2180      	movs	r1, #128	@ 0x80
 8006984:	0549      	lsls	r1, r1, #21
 8006986:	430a      	orrs	r2, r1
 8006988:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800698a:	183b      	adds	r3, r7, r0
 800698c:	2201      	movs	r2, #1
 800698e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006990:	4b7d      	ldr	r3, [pc, #500]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	2380      	movs	r3, #128	@ 0x80
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	4013      	ands	r3, r2
 800699a:	d11a      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800699c:	4b7a      	ldr	r3, [pc, #488]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	4b79      	ldr	r3, [pc, #484]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80069a2:	2180      	movs	r1, #128	@ 0x80
 80069a4:	0049      	lsls	r1, r1, #1
 80069a6:	430a      	orrs	r2, r1
 80069a8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069aa:	f7fe faa7 	bl	8004efc <HAL_GetTick>
 80069ae:	0003      	movs	r3, r0
 80069b0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069b2:	e008      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069b4:	f7fe faa2 	bl	8004efc <HAL_GetTick>
 80069b8:	0002      	movs	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b64      	cmp	r3, #100	@ 0x64
 80069c0:	d901      	bls.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e0d9      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c6:	4b70      	ldr	r3, [pc, #448]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	2380      	movs	r3, #128	@ 0x80
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	4013      	ands	r3, r2
 80069d0:	d0f0      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80069d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	23c0      	movs	r3, #192	@ 0xc0
 80069d8:	039b      	lsls	r3, r3, #14
 80069da:	4013      	ands	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	23c0      	movs	r3, #192	@ 0xc0
 80069e4:	039b      	lsls	r3, r3, #14
 80069e6:	4013      	ands	r3, r2
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d013      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	23c0      	movs	r3, #192	@ 0xc0
 80069f4:	029b      	lsls	r3, r3, #10
 80069f6:	401a      	ands	r2, r3
 80069f8:	23c0      	movs	r3, #192	@ 0xc0
 80069fa:	029b      	lsls	r3, r3, #10
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d10a      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a00:	4b60      	ldr	r3, [pc, #384]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	2380      	movs	r3, #128	@ 0x80
 8006a06:	029b      	lsls	r3, r3, #10
 8006a08:	401a      	ands	r2, r3
 8006a0a:	2380      	movs	r3, #128	@ 0x80
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d101      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e0b1      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006a16:	4b5b      	ldr	r3, [pc, #364]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a1a:	23c0      	movs	r3, #192	@ 0xc0
 8006a1c:	029b      	lsls	r3, r3, #10
 8006a1e:	4013      	ands	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d03b      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	23c0      	movs	r3, #192	@ 0xc0
 8006a2e:	029b      	lsls	r3, r3, #10
 8006a30:	4013      	ands	r3, r2
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d033      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	4013      	ands	r3, r2
 8006a40:	d02e      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006a42:	4b50      	ldr	r3, [pc, #320]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a46:	4a51      	ldr	r2, [pc, #324]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a50:	4b4c      	ldr	r3, [pc, #304]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a52:	2180      	movs	r1, #128	@ 0x80
 8006a54:	0309      	lsls	r1, r1, #12
 8006a56:	430a      	orrs	r2, r1
 8006a58:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a5e:	4b49      	ldr	r3, [pc, #292]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a60:	494b      	ldr	r1, [pc, #300]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006a62:	400a      	ands	r2, r1
 8006a64:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006a66:	4b47      	ldr	r3, [pc, #284]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	2380      	movs	r3, #128	@ 0x80
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	4013      	ands	r3, r2
 8006a74:	d014      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a76:	f7fe fa41 	bl	8004efc <HAL_GetTick>
 8006a7a:	0003      	movs	r3, r0
 8006a7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a7e:	e009      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a80:	f7fe fa3c 	bl	8004efc <HAL_GetTick>
 8006a84:	0002      	movs	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	4a42      	ldr	r2, [pc, #264]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e072      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a94:	4b3b      	ldr	r3, [pc, #236]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a98:	2380      	movs	r3, #128	@ 0x80
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	d0ef      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	d01f      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	23c0      	movs	r3, #192	@ 0xc0
 8006ab0:	029b      	lsls	r3, r3, #10
 8006ab2:	401a      	ands	r2, r3
 8006ab4:	23c0      	movs	r3, #192	@ 0xc0
 8006ab6:	029b      	lsls	r3, r3, #10
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d10c      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006abc:	4b31      	ldr	r3, [pc, #196]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a35      	ldr	r2, [pc, #212]	@ (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	0019      	movs	r1, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	23c0      	movs	r3, #192	@ 0xc0
 8006acc:	039b      	lsls	r3, r3, #14
 8006ace:	401a      	ands	r2, r3
 8006ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006ad8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	23c0      	movs	r3, #192	@ 0xc0
 8006ae0:	029b      	lsls	r3, r3, #10
 8006ae2:	401a      	ands	r2, r3
 8006ae4:	4b27      	ldr	r3, [pc, #156]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006aea:	2317      	movs	r3, #23
 8006aec:	18fb      	adds	r3, r7, r3
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d105      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006af4:	4b23      	ldr	r3, [pc, #140]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006af6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006af8:	4b22      	ldr	r3, [pc, #136]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006afa:	4928      	ldr	r1, [pc, #160]	@ (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006afc:	400a      	ands	r2, r1
 8006afe:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2202      	movs	r2, #2
 8006b06:	4013      	ands	r3, r2
 8006b08:	d009      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b0e:	220c      	movs	r2, #12
 8006b10:	4393      	bics	r3, r2
 8006b12:	0019      	movs	r1, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	4b1a      	ldr	r3, [pc, #104]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2204      	movs	r2, #4
 8006b24:	4013      	ands	r3, r2
 8006b26:	d009      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b28:	4b16      	ldr	r3, [pc, #88]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006b2e:	4013      	ands	r3, r2
 8006b30:	0019      	movs	r1, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	4b13      	ldr	r3, [pc, #76]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2208      	movs	r2, #8
 8006b42:	4013      	ands	r3, r2
 8006b44:	d009      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b46:	4b0f      	ldr	r3, [pc, #60]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b4a:	4a16      	ldr	r2, [pc, #88]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	0019      	movs	r1, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	4b0b      	ldr	r3, [pc, #44]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b56:	430a      	orrs	r2, r1
 8006b58:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2280      	movs	r2, #128	@ 0x80
 8006b60:	4013      	ands	r3, r2
 8006b62:	d009      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006b64:	4b07      	ldr	r3, [pc, #28]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b68:	4a0f      	ldr	r2, [pc, #60]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	0019      	movs	r1, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695a      	ldr	r2, [r3, #20]
 8006b72:	4b04      	ldr	r3, [pc, #16]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b74:	430a      	orrs	r2, r1
 8006b76:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	b006      	add	sp, #24
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	46c0      	nop			@ (mov r8, r8)
 8006b84:	40021000 	.word	0x40021000
 8006b88:	40007000 	.word	0x40007000
 8006b8c:	fffcffff 	.word	0xfffcffff
 8006b90:	fff7ffff 	.word	0xfff7ffff
 8006b94:	00001388 	.word	0x00001388
 8006b98:	ffcfffff 	.word	0xffcfffff
 8006b9c:	efffffff 	.word	0xefffffff
 8006ba0:	fffff3ff 	.word	0xfffff3ff
 8006ba4:	ffffcfff 	.word	0xffffcfff
 8006ba8:	fff3ffff 	.word	0xfff3ffff

08006bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e07b      	b.n	8006cb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d109      	bne.n	8006bda <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	2382      	movs	r3, #130	@ 0x82
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d009      	beq.n	8006be6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	61da      	str	r2, [r3, #28]
 8006bd8:	e005      	b.n	8006be6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2251      	movs	r2, #81	@ 0x51
 8006bf0:	5c9b      	ldrb	r3, [r3, r2]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2250      	movs	r2, #80	@ 0x50
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	0018      	movs	r0, r3
 8006c04:	f7fd ff52 	bl	8004aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2251      	movs	r2, #81	@ 0x51
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2140      	movs	r1, #64	@ 0x40
 8006c1c:	438a      	bics	r2, r1
 8006c1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	2382      	movs	r3, #130	@ 0x82
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	401a      	ands	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6899      	ldr	r1, [r3, #8]
 8006c2e:	2384      	movs	r3, #132	@ 0x84
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	400b      	ands	r3, r1
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68d9      	ldr	r1, [r3, #12]
 8006c3a:	2380      	movs	r3, #128	@ 0x80
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	400b      	ands	r3, r1
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2102      	movs	r1, #2
 8006c48:	400b      	ands	r3, r1
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	2101      	movs	r1, #1
 8006c52:	400b      	ands	r3, r1
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6999      	ldr	r1, [r3, #24]
 8006c5a:	2380      	movs	r3, #128	@ 0x80
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	400b      	ands	r3, r1
 8006c60:	431a      	orrs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	2138      	movs	r1, #56	@ 0x38
 8006c68:	400b      	ands	r3, r1
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	2180      	movs	r1, #128	@ 0x80
 8006c72:	400b      	ands	r3, r1
 8006c74:	431a      	orrs	r2, r3
 8006c76:	0011      	movs	r1, r2
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c7c:	2380      	movs	r3, #128	@ 0x80
 8006c7e:	019b      	lsls	r3, r3, #6
 8006c80:	401a      	ands	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	0c1b      	lsrs	r3, r3, #16
 8006c90:	2204      	movs	r2, #4
 8006c92:	4013      	ands	r3, r2
 8006c94:	0019      	movs	r1, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9a:	2210      	movs	r2, #16
 8006c9c:	401a      	ands	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2251      	movs	r2, #81	@ 0x51
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	b002      	add	sp, #8
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b088      	sub	sp, #32
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	60f8      	str	r0, [r7, #12]
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	603b      	str	r3, [r7, #0]
 8006cca:	1dbb      	adds	r3, r7, #6
 8006ccc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cce:	231f      	movs	r3, #31
 8006cd0:	18fb      	adds	r3, r7, r3
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2250      	movs	r2, #80	@ 0x50
 8006cda:	5c9b      	ldrb	r3, [r3, r2]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_SPI_Transmit+0x26>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e145      	b.n	8006f70 <HAL_SPI_Transmit+0x2b2>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2250      	movs	r2, #80	@ 0x50
 8006ce8:	2101      	movs	r1, #1
 8006cea:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cec:	f7fe f906 	bl	8004efc <HAL_GetTick>
 8006cf0:	0003      	movs	r3, r0
 8006cf2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006cf4:	2316      	movs	r3, #22
 8006cf6:	18fb      	adds	r3, r7, r3
 8006cf8:	1dba      	adds	r2, r7, #6
 8006cfa:	8812      	ldrh	r2, [r2, #0]
 8006cfc:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2251      	movs	r2, #81	@ 0x51
 8006d02:	5c9b      	ldrb	r3, [r3, r2]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d004      	beq.n	8006d14 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006d0a:	231f      	movs	r3, #31
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	2202      	movs	r2, #2
 8006d10:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d12:	e126      	b.n	8006f62 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_SPI_Transmit+0x64>
 8006d1a:	1dbb      	adds	r3, r7, #6
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d104      	bne.n	8006d2c <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006d22:	231f      	movs	r3, #31
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	2201      	movs	r2, #1
 8006d28:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d2a:	e11a      	b.n	8006f62 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2251      	movs	r2, #81	@ 0x51
 8006d30:	2103      	movs	r1, #3
 8006d32:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	1dba      	adds	r2, r7, #6
 8006d44:	8812      	ldrh	r2, [r2, #0]
 8006d46:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	1dba      	adds	r2, r7, #6
 8006d4c:	8812      	ldrh	r2, [r2, #0]
 8006d4e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	2380      	movs	r3, #128	@ 0x80
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d110      	bne.n	8006d9c <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2140      	movs	r1, #64	@ 0x40
 8006d86:	438a      	bics	r2, r1
 8006d88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2180      	movs	r1, #128	@ 0x80
 8006d96:	01c9      	lsls	r1, r1, #7
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2240      	movs	r2, #64	@ 0x40
 8006da4:	4013      	ands	r3, r2
 8006da6:	2b40      	cmp	r3, #64	@ 0x40
 8006da8:	d007      	beq.n	8006dba <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2140      	movs	r1, #64	@ 0x40
 8006db6:	430a      	orrs	r2, r1
 8006db8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	2380      	movs	r3, #128	@ 0x80
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d152      	bne.n	8006e6c <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <HAL_SPI_Transmit+0x11a>
 8006dce:	2316      	movs	r3, #22
 8006dd0:	18fb      	adds	r3, r7, r3
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d143      	bne.n	8006e60 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ddc:	881a      	ldrh	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de8:	1c9a      	adds	r2, r3, #2
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006dfc:	e030      	b.n	8006e60 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	2202      	movs	r2, #2
 8006e06:	4013      	ands	r3, r2
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d112      	bne.n	8006e32 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e10:	881a      	ldrh	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1c:	1c9a      	adds	r2, r3, #2
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e30:	e016      	b.n	8006e60 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e32:	f7fe f863 	bl	8004efc <HAL_GetTick>
 8006e36:	0002      	movs	r2, r0
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d802      	bhi.n	8006e48 <HAL_SPI_Transmit+0x18a>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	3301      	adds	r3, #1
 8006e46:	d102      	bne.n	8006e4e <HAL_SPI_Transmit+0x190>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d108      	bne.n	8006e60 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8006e4e:	231f      	movs	r3, #31
 8006e50:	18fb      	adds	r3, r7, r3
 8006e52:	2203      	movs	r2, #3
 8006e54:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2251      	movs	r2, #81	@ 0x51
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	5499      	strb	r1, [r3, r2]
          goto error;
 8006e5e:	e080      	b.n	8006f62 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1c9      	bne.n	8006dfe <HAL_SPI_Transmit+0x140>
 8006e6a:	e053      	b.n	8006f14 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d004      	beq.n	8006e7e <HAL_SPI_Transmit+0x1c0>
 8006e74:	2316      	movs	r3, #22
 8006e76:	18fb      	adds	r3, r7, r3
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d145      	bne.n	8006f0a <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	330c      	adds	r3, #12
 8006e88:	7812      	ldrb	r2, [r2, #0]
 8006e8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ea4:	e031      	b.n	8006f0a <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2202      	movs	r2, #2
 8006eae:	4013      	ands	r3, r2
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d113      	bne.n	8006edc <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	7812      	ldrb	r2, [r2, #0]
 8006ec0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006eda:	e016      	b.n	8006f0a <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006edc:	f7fe f80e 	bl	8004efc <HAL_GetTick>
 8006ee0:	0002      	movs	r2, r0
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d802      	bhi.n	8006ef2 <HAL_SPI_Transmit+0x234>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	d102      	bne.n	8006ef8 <HAL_SPI_Transmit+0x23a>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d108      	bne.n	8006f0a <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8006ef8:	231f      	movs	r3, #31
 8006efa:	18fb      	adds	r3, r7, r3
 8006efc:	2203      	movs	r2, #3
 8006efe:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2251      	movs	r2, #81	@ 0x51
 8006f04:	2101      	movs	r1, #1
 8006f06:	5499      	strb	r1, [r3, r2]
          goto error;
 8006f08:	e02b      	b.n	8006f62 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1c8      	bne.n	8006ea6 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	f000 fa86 	bl	800742c <SPI_EndRxTxTransaction>
 8006f20:	1e03      	subs	r3, r0, #0
 8006f22:	d002      	beq.n	8006f2a <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10a      	bne.n	8006f48 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f32:	2300      	movs	r3, #0
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	613b      	str	r3, [r7, #16]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	613b      	str	r3, [r7, #16]
 8006f46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8006f50:	231f      	movs	r3, #31
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	2201      	movs	r2, #1
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	e003      	b.n	8006f62 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2251      	movs	r2, #81	@ 0x51
 8006f5e:	2101      	movs	r1, #1
 8006f60:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2250      	movs	r2, #80	@ 0x50
 8006f66:	2100      	movs	r1, #0
 8006f68:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006f6a:	231f      	movs	r3, #31
 8006f6c:	18fb      	adds	r3, r7, r3
 8006f6e:	781b      	ldrb	r3, [r3, #0]
}
 8006f70:	0018      	movs	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b008      	add	sp, #32
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08c      	sub	sp, #48	@ 0x30
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	001a      	movs	r2, r3
 8006f86:	1cbb      	adds	r3, r7, #2
 8006f88:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f8e:	232b      	movs	r3, #43	@ 0x2b
 8006f90:	18fb      	adds	r3, r7, r3
 8006f92:	2200      	movs	r2, #0
 8006f94:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2250      	movs	r2, #80	@ 0x50
 8006f9a:	5c9b      	ldrb	r3, [r3, r2]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_SPI_TransmitReceive+0x2c>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e1b0      	b.n	8007306 <HAL_SPI_TransmitReceive+0x38e>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2250      	movs	r2, #80	@ 0x50
 8006fa8:	2101      	movs	r1, #1
 8006faa:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fac:	f7fd ffa6 	bl	8004efc <HAL_GetTick>
 8006fb0:	0003      	movs	r3, r0
 8006fb2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006fb4:	2023      	movs	r0, #35	@ 0x23
 8006fb6:	183b      	adds	r3, r7, r0
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	2151      	movs	r1, #81	@ 0x51
 8006fbc:	5c52      	ldrb	r2, [r2, r1]
 8006fbe:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006fc6:	231a      	movs	r3, #26
 8006fc8:	18fb      	adds	r3, r7, r3
 8006fca:	1cba      	adds	r2, r7, #2
 8006fcc:	8812      	ldrh	r2, [r2, #0]
 8006fce:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fd0:	183b      	adds	r3, r7, r0
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d011      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0x84>
 8006fd8:	69fa      	ldr	r2, [r7, #28]
 8006fda:	2382      	movs	r3, #130	@ 0x82
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d107      	bne.n	8006ff2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d103      	bne.n	8006ff2 <HAL_SPI_TransmitReceive+0x7a>
 8006fea:	183b      	adds	r3, r7, r0
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d004      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006ff2:	232b      	movs	r3, #43	@ 0x2b
 8006ff4:	18fb      	adds	r3, r7, r3
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ffa:	e17d      	b.n	80072f8 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d006      	beq.n	8007010 <HAL_SPI_TransmitReceive+0x98>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_SPI_TransmitReceive+0x98>
 8007008:	1cbb      	adds	r3, r7, #2
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007010:	232b      	movs	r3, #43	@ 0x2b
 8007012:	18fb      	adds	r3, r7, r3
 8007014:	2201      	movs	r2, #1
 8007016:	701a      	strb	r2, [r3, #0]
    goto error;
 8007018:	e16e      	b.n	80072f8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2251      	movs	r2, #81	@ 0x51
 800701e:	5c9b      	ldrb	r3, [r3, r2]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b04      	cmp	r3, #4
 8007024:	d003      	beq.n	800702e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2251      	movs	r2, #81	@ 0x51
 800702a:	2105      	movs	r1, #5
 800702c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	1cba      	adds	r2, r7, #2
 800703e:	8812      	ldrh	r2, [r2, #0]
 8007040:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1cba      	adds	r2, r7, #2
 8007046:	8812      	ldrh	r2, [r2, #0]
 8007048:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	1cba      	adds	r2, r7, #2
 8007054:	8812      	ldrh	r2, [r2, #0]
 8007056:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	1cba      	adds	r2, r7, #2
 800705c:	8812      	ldrh	r2, [r2, #0]
 800705e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2240      	movs	r2, #64	@ 0x40
 8007074:	4013      	ands	r3, r2
 8007076:	2b40      	cmp	r3, #64	@ 0x40
 8007078:	d007      	beq.n	800708a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2140      	movs	r1, #64	@ 0x40
 8007086:	430a      	orrs	r2, r1
 8007088:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	2380      	movs	r3, #128	@ 0x80
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	429a      	cmp	r2, r3
 8007094:	d000      	beq.n	8007098 <HAL_SPI_TransmitReceive+0x120>
 8007096:	e07f      	b.n	8007198 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d005      	beq.n	80070ac <HAL_SPI_TransmitReceive+0x134>
 80070a0:	231a      	movs	r3, #26
 80070a2:	18fb      	adds	r3, r7, r3
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d000      	beq.n	80070ac <HAL_SPI_TransmitReceive+0x134>
 80070aa:	e06a      	b.n	8007182 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b0:	881a      	ldrh	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070bc:	1c9a      	adds	r2, r3, #2
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070d0:	e057      	b.n	8007182 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	2202      	movs	r2, #2
 80070da:	4013      	ands	r3, r2
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d11b      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x1a0>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d016      	beq.n	8007118 <HAL_SPI_TransmitReceive+0x1a0>
 80070ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d113      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f4:	881a      	ldrh	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007100:	1c9a      	adds	r2, r3, #2
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	2201      	movs	r2, #1
 8007120:	4013      	ands	r3, r2
 8007122:	2b01      	cmp	r3, #1
 8007124:	d119      	bne.n	800715a <HAL_SPI_TransmitReceive+0x1e2>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800712a:	b29b      	uxth	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d014      	beq.n	800715a <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713a:	b292      	uxth	r2, r2
 800713c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	1c9a      	adds	r2, r3, #2
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800714c:	b29b      	uxth	r3, r3
 800714e:	3b01      	subs	r3, #1
 8007150:	b29a      	uxth	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007156:	2301      	movs	r3, #1
 8007158:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800715a:	f7fd fecf 	bl	8004efc <HAL_GetTick>
 800715e:	0002      	movs	r2, r0
 8007160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007166:	429a      	cmp	r2, r3
 8007168:	d80b      	bhi.n	8007182 <HAL_SPI_TransmitReceive+0x20a>
 800716a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716c:	3301      	adds	r3, #1
 800716e:	d008      	beq.n	8007182 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8007170:	232b      	movs	r3, #43	@ 0x2b
 8007172:	18fb      	adds	r3, r7, r3
 8007174:	2203      	movs	r2, #3
 8007176:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2251      	movs	r2, #81	@ 0x51
 800717c:	2101      	movs	r1, #1
 800717e:	5499      	strb	r1, [r3, r2]
        goto error;
 8007180:	e0ba      	b.n	80072f8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1a2      	bne.n	80070d2 <HAL_SPI_TransmitReceive+0x15a>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d19d      	bne.n	80070d2 <HAL_SPI_TransmitReceive+0x15a>
 8007196:	e083      	b.n	80072a0 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <HAL_SPI_TransmitReceive+0x234>
 80071a0:	231a      	movs	r3, #26
 80071a2:	18fb      	adds	r3, r7, r3
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d000      	beq.n	80071ac <HAL_SPI_TransmitReceive+0x234>
 80071aa:	e06f      	b.n	800728c <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	330c      	adds	r3, #12
 80071b6:	7812      	ldrb	r2, [r2, #0]
 80071b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	3b01      	subs	r3, #1
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071d2:	e05b      	b.n	800728c <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2202      	movs	r2, #2
 80071dc:	4013      	ands	r3, r2
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d11c      	bne.n	800721c <HAL_SPI_TransmitReceive+0x2a4>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d017      	beq.n	800721c <HAL_SPI_TransmitReceive+0x2a4>
 80071ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d114      	bne.n	800721c <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	330c      	adds	r3, #12
 80071fc:	7812      	ldrb	r2, [r2, #0]
 80071fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800720e:	b29b      	uxth	r3, r3
 8007210:	3b01      	subs	r3, #1
 8007212:	b29a      	uxth	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	2201      	movs	r2, #1
 8007224:	4013      	ands	r3, r2
 8007226:	2b01      	cmp	r3, #1
 8007228:	d119      	bne.n	800725e <HAL_SPI_TransmitReceive+0x2e6>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800722e:	b29b      	uxth	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d014      	beq.n	800725e <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007250:	b29b      	uxth	r3, r3
 8007252:	3b01      	subs	r3, #1
 8007254:	b29a      	uxth	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800725a:	2301      	movs	r3, #1
 800725c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800725e:	f7fd fe4d 	bl	8004efc <HAL_GetTick>
 8007262:	0002      	movs	r2, r0
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800726a:	429a      	cmp	r2, r3
 800726c:	d802      	bhi.n	8007274 <HAL_SPI_TransmitReceive+0x2fc>
 800726e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007270:	3301      	adds	r3, #1
 8007272:	d102      	bne.n	800727a <HAL_SPI_TransmitReceive+0x302>
 8007274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007276:	2b00      	cmp	r3, #0
 8007278:	d108      	bne.n	800728c <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800727a:	232b      	movs	r3, #43	@ 0x2b
 800727c:	18fb      	adds	r3, r7, r3
 800727e:	2203      	movs	r2, #3
 8007280:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2251      	movs	r2, #81	@ 0x51
 8007286:	2101      	movs	r1, #1
 8007288:	5499      	strb	r1, [r3, r2]
        goto error;
 800728a:	e035      	b.n	80072f8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d19e      	bne.n	80071d4 <HAL_SPI_TransmitReceive+0x25c>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d199      	bne.n	80071d4 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	0018      	movs	r0, r3
 80072a8:	f000 f8c0 	bl	800742c <SPI_EndRxTxTransaction>
 80072ac:	1e03      	subs	r3, r0, #0
 80072ae:	d007      	beq.n	80072c0 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 80072b0:	232b      	movs	r3, #43	@ 0x2b
 80072b2:	18fb      	adds	r3, r7, r3
 80072b4:	2201      	movs	r2, #1
 80072b6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80072be:	e01b      	b.n	80072f8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072c8:	2300      	movs	r3, #0
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80072e6:	232b      	movs	r3, #43	@ 0x2b
 80072e8:	18fb      	adds	r3, r7, r3
 80072ea:	2201      	movs	r2, #1
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	e003      	b.n	80072f8 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2251      	movs	r2, #81	@ 0x51
 80072f4:	2101      	movs	r1, #1
 80072f6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2250      	movs	r2, #80	@ 0x50
 80072fc:	2100      	movs	r1, #0
 80072fe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007300:	232b      	movs	r3, #43	@ 0x2b
 8007302:	18fb      	adds	r3, r7, r3
 8007304:	781b      	ldrb	r3, [r3, #0]
}
 8007306:	0018      	movs	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	b00c      	add	sp, #48	@ 0x30
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	1dfb      	adds	r3, r7, #7
 800731e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007320:	f7fd fdec 	bl	8004efc <HAL_GetTick>
 8007324:	0002      	movs	r2, r0
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	1a9b      	subs	r3, r3, r2
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	18d3      	adds	r3, r2, r3
 800732e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007330:	f7fd fde4 	bl	8004efc <HAL_GetTick>
 8007334:	0003      	movs	r3, r0
 8007336:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007338:	4b3a      	ldr	r3, [pc, #232]	@ (8007424 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	015b      	lsls	r3, r3, #5
 800733e:	0d1b      	lsrs	r3, r3, #20
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	4353      	muls	r3, r2
 8007344:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007346:	e058      	b.n	80073fa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	3301      	adds	r3, #1
 800734c:	d055      	beq.n	80073fa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800734e:	f7fd fdd5 	bl	8004efc <HAL_GetTick>
 8007352:	0002      	movs	r2, r0
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	429a      	cmp	r2, r3
 800735c:	d902      	bls.n	8007364 <SPI_WaitFlagStateUntilTimeout+0x54>
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d142      	bne.n	80073ea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	21e0      	movs	r1, #224	@ 0xe0
 8007370:	438a      	bics	r2, r1
 8007372:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	2382      	movs	r3, #130	@ 0x82
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	429a      	cmp	r2, r3
 800737e:	d113      	bne.n	80073a8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	2380      	movs	r3, #128	@ 0x80
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	429a      	cmp	r2, r3
 800738a:	d005      	beq.n	8007398 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	2380      	movs	r3, #128	@ 0x80
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	429a      	cmp	r2, r3
 8007396:	d107      	bne.n	80073a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2140      	movs	r1, #64	@ 0x40
 80073a4:	438a      	bics	r2, r1
 80073a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073ac:	2380      	movs	r3, #128	@ 0x80
 80073ae:	019b      	lsls	r3, r3, #6
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d110      	bne.n	80073d6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	491a      	ldr	r1, [pc, #104]	@ (8007428 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80073c0:	400a      	ands	r2, r1
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2180      	movs	r1, #128	@ 0x80
 80073d0:	0189      	lsls	r1, r1, #6
 80073d2:	430a      	orrs	r2, r1
 80073d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2251      	movs	r2, #81	@ 0x51
 80073da:	2101      	movs	r1, #1
 80073dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2250      	movs	r2, #80	@ 0x50
 80073e2:	2100      	movs	r1, #0
 80073e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e017      	b.n	800741a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	4013      	ands	r3, r2
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	425a      	negs	r2, r3
 800740a:	4153      	adcs	r3, r2
 800740c:	b2db      	uxtb	r3, r3
 800740e:	001a      	movs	r2, r3
 8007410:	1dfb      	adds	r3, r7, #7
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	429a      	cmp	r2, r3
 8007416:	d197      	bne.n	8007348 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	0018      	movs	r0, r3
 800741c:	46bd      	mov	sp, r7
 800741e:	b008      	add	sp, #32
 8007420:	bd80      	pop	{r7, pc}
 8007422:	46c0      	nop			@ (mov r8, r8)
 8007424:	20000004 	.word	0x20000004
 8007428:	ffffdfff 	.word	0xffffdfff

0800742c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af02      	add	r7, sp, #8
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007438:	4b1d      	ldr	r3, [pc, #116]	@ (80074b0 <SPI_EndRxTxTransaction+0x84>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	491d      	ldr	r1, [pc, #116]	@ (80074b4 <SPI_EndRxTxTransaction+0x88>)
 800743e:	0018      	movs	r0, r3
 8007440:	f7f8 fe7e 	bl	8000140 <__udivsi3>
 8007444:	0003      	movs	r3, r0
 8007446:	001a      	movs	r2, r3
 8007448:	0013      	movs	r3, r2
 800744a:	015b      	lsls	r3, r3, #5
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	189b      	adds	r3, r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	2382      	movs	r3, #130	@ 0x82
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	429a      	cmp	r2, r3
 8007460:	d112      	bne.n	8007488 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	0013      	movs	r3, r2
 800746c:	2200      	movs	r2, #0
 800746e:	2180      	movs	r1, #128	@ 0x80
 8007470:	f7ff ff4e 	bl	8007310 <SPI_WaitFlagStateUntilTimeout>
 8007474:	1e03      	subs	r3, r0, #0
 8007476:	d016      	beq.n	80074a6 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747c:	2220      	movs	r2, #32
 800747e:	431a      	orrs	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e00f      	b.n	80074a8 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	3b01      	subs	r3, #1
 8007492:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2280      	movs	r2, #128	@ 0x80
 800749c:	4013      	ands	r3, r2
 800749e:	2b80      	cmp	r3, #128	@ 0x80
 80074a0:	d0f2      	beq.n	8007488 <SPI_EndRxTxTransaction+0x5c>
 80074a2:	e000      	b.n	80074a6 <SPI_EndRxTxTransaction+0x7a>
        break;
 80074a4:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	0018      	movs	r0, r3
 80074aa:	46bd      	mov	sp, r7
 80074ac:	b006      	add	sp, #24
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20000004 	.word	0x20000004
 80074b4:	016e3600 	.word	0x016e3600

080074b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e044      	b.n	8007554 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d107      	bne.n	80074e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2278      	movs	r2, #120	@ 0x78
 80074d6:	2100      	movs	r1, #0
 80074d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	0018      	movs	r0, r3
 80074de:	f7fd fb29 	bl	8004b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2224      	movs	r2, #36	@ 0x24
 80074e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2101      	movs	r1, #1
 80074f4:	438a      	bics	r2, r1
 80074f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	0018      	movs	r0, r3
 80074fc:	f000 f8d0 	bl	80076a0 <UART_SetConfig>
 8007500:	0003      	movs	r3, r0
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e024      	b.n	8007554 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	0018      	movs	r0, r3
 8007516:	f000 fb0d 	bl	8007b34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	490d      	ldr	r1, [pc, #52]	@ (800755c <HAL_UART_Init+0xa4>)
 8007526:	400a      	ands	r2, r1
 8007528:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	212a      	movs	r1, #42	@ 0x2a
 8007536:	438a      	bics	r2, r1
 8007538:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2101      	movs	r1, #1
 8007546:	430a      	orrs	r2, r1
 8007548:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	0018      	movs	r0, r3
 800754e:	f000 fba5 	bl	8007c9c <UART_CheckIdleState>
 8007552:	0003      	movs	r3, r0
}
 8007554:	0018      	movs	r0, r3
 8007556:	46bd      	mov	sp, r7
 8007558:	b002      	add	sp, #8
 800755a:	bd80      	pop	{r7, pc}
 800755c:	ffffb7ff 	.word	0xffffb7ff

08007560 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	@ 0x28
 8007564:	af02      	add	r7, sp, #8
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	1dbb      	adds	r3, r7, #6
 800756e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007574:	2b20      	cmp	r3, #32
 8007576:	d000      	beq.n	800757a <HAL_UART_Transmit+0x1a>
 8007578:	e08c      	b.n	8007694 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_UART_Transmit+0x28>
 8007580:	1dbb      	adds	r3, r7, #6
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e084      	b.n	8007696 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	2380      	movs	r3, #128	@ 0x80
 8007592:	015b      	lsls	r3, r3, #5
 8007594:	429a      	cmp	r2, r3
 8007596:	d109      	bne.n	80075ac <HAL_UART_Transmit+0x4c>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d105      	bne.n	80075ac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2201      	movs	r2, #1
 80075a4:	4013      	ands	r3, r2
 80075a6:	d001      	beq.n	80075ac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e074      	b.n	8007696 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2284      	movs	r2, #132	@ 0x84
 80075b0:	2100      	movs	r1, #0
 80075b2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2221      	movs	r2, #33	@ 0x21
 80075b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075ba:	f7fd fc9f 	bl	8004efc <HAL_GetTick>
 80075be:	0003      	movs	r3, r0
 80075c0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1dba      	adds	r2, r7, #6
 80075c6:	2150      	movs	r1, #80	@ 0x50
 80075c8:	8812      	ldrh	r2, [r2, #0]
 80075ca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	1dba      	adds	r2, r7, #6
 80075d0:	2152      	movs	r1, #82	@ 0x52
 80075d2:	8812      	ldrh	r2, [r2, #0]
 80075d4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	689a      	ldr	r2, [r3, #8]
 80075da:	2380      	movs	r3, #128	@ 0x80
 80075dc:	015b      	lsls	r3, r3, #5
 80075de:	429a      	cmp	r2, r3
 80075e0:	d108      	bne.n	80075f4 <HAL_UART_Transmit+0x94>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d104      	bne.n	80075f4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	61bb      	str	r3, [r7, #24]
 80075f2:	e003      	b.n	80075fc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075fc:	e02f      	b.n	800765e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	0013      	movs	r3, r2
 8007608:	2200      	movs	r2, #0
 800760a:	2180      	movs	r1, #128	@ 0x80
 800760c:	f000 fbee 	bl	8007dec <UART_WaitOnFlagUntilTimeout>
 8007610:	1e03      	subs	r3, r0, #0
 8007612:	d004      	beq.n	800761e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e03b      	b.n	8007696 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10b      	bne.n	800763c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	001a      	movs	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	05d2      	lsls	r2, r2, #23
 8007630:	0dd2      	lsrs	r2, r2, #23
 8007632:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	3302      	adds	r3, #2
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	e007      	b.n	800764c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	781a      	ldrb	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	3301      	adds	r3, #1
 800764a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2252      	movs	r2, #82	@ 0x52
 8007650:	5a9b      	ldrh	r3, [r3, r2]
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	b299      	uxth	r1, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2252      	movs	r2, #82	@ 0x52
 800765c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2252      	movs	r2, #82	@ 0x52
 8007662:	5a9b      	ldrh	r3, [r3, r2]
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1c9      	bne.n	80075fe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	0013      	movs	r3, r2
 8007674:	2200      	movs	r2, #0
 8007676:	2140      	movs	r1, #64	@ 0x40
 8007678:	f000 fbb8 	bl	8007dec <UART_WaitOnFlagUntilTimeout>
 800767c:	1e03      	subs	r3, r0, #0
 800767e:	d004      	beq.n	800768a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2220      	movs	r2, #32
 8007684:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e005      	b.n	8007696 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2220      	movs	r2, #32
 800768e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	e000      	b.n	8007696 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
  }
}
 8007696:	0018      	movs	r0, r3
 8007698:	46bd      	mov	sp, r7
 800769a:	b008      	add	sp, #32
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076a0:	b5b0      	push	{r4, r5, r7, lr}
 80076a2:	b08e      	sub	sp, #56	@ 0x38
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076a8:	231a      	movs	r3, #26
 80076aa:	2218      	movs	r2, #24
 80076ac:	189b      	adds	r3, r3, r2
 80076ae:	19db      	adds	r3, r3, r7
 80076b0:	2200      	movs	r2, #0
 80076b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	431a      	orrs	r2, r3
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4ab4      	ldr	r2, [pc, #720]	@ (80079a4 <UART_SetConfig+0x304>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	0019      	movs	r1, r3
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076de:	430a      	orrs	r2, r1
 80076e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	4aaf      	ldr	r2, [pc, #700]	@ (80079a8 <UART_SetConfig+0x308>)
 80076ea:	4013      	ands	r3, r2
 80076ec:	0019      	movs	r1, r3
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4aa9      	ldr	r2, [pc, #676]	@ (80079ac <UART_SetConfig+0x30c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d004      	beq.n	8007714 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007710:	4313      	orrs	r3, r2
 8007712:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	4aa5      	ldr	r2, [pc, #660]	@ (80079b0 <UART_SetConfig+0x310>)
 800771c:	4013      	ands	r3, r2
 800771e:	0019      	movs	r1, r3
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007726:	430a      	orrs	r2, r1
 8007728:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4aa1      	ldr	r2, [pc, #644]	@ (80079b4 <UART_SetConfig+0x314>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d131      	bne.n	8007798 <UART_SetConfig+0xf8>
 8007734:	4ba0      	ldr	r3, [pc, #640]	@ (80079b8 <UART_SetConfig+0x318>)
 8007736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007738:	220c      	movs	r2, #12
 800773a:	4013      	ands	r3, r2
 800773c:	2b0c      	cmp	r3, #12
 800773e:	d01d      	beq.n	800777c <UART_SetConfig+0xdc>
 8007740:	d823      	bhi.n	800778a <UART_SetConfig+0xea>
 8007742:	2b08      	cmp	r3, #8
 8007744:	d00c      	beq.n	8007760 <UART_SetConfig+0xc0>
 8007746:	d820      	bhi.n	800778a <UART_SetConfig+0xea>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <UART_SetConfig+0xb2>
 800774c:	2b04      	cmp	r3, #4
 800774e:	d00e      	beq.n	800776e <UART_SetConfig+0xce>
 8007750:	e01b      	b.n	800778a <UART_SetConfig+0xea>
 8007752:	231b      	movs	r3, #27
 8007754:	2218      	movs	r2, #24
 8007756:	189b      	adds	r3, r3, r2
 8007758:	19db      	adds	r3, r3, r7
 800775a:	2200      	movs	r2, #0
 800775c:	701a      	strb	r2, [r3, #0]
 800775e:	e065      	b.n	800782c <UART_SetConfig+0x18c>
 8007760:	231b      	movs	r3, #27
 8007762:	2218      	movs	r2, #24
 8007764:	189b      	adds	r3, r3, r2
 8007766:	19db      	adds	r3, r3, r7
 8007768:	2202      	movs	r2, #2
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	e05e      	b.n	800782c <UART_SetConfig+0x18c>
 800776e:	231b      	movs	r3, #27
 8007770:	2218      	movs	r2, #24
 8007772:	189b      	adds	r3, r3, r2
 8007774:	19db      	adds	r3, r3, r7
 8007776:	2204      	movs	r2, #4
 8007778:	701a      	strb	r2, [r3, #0]
 800777a:	e057      	b.n	800782c <UART_SetConfig+0x18c>
 800777c:	231b      	movs	r3, #27
 800777e:	2218      	movs	r2, #24
 8007780:	189b      	adds	r3, r3, r2
 8007782:	19db      	adds	r3, r3, r7
 8007784:	2208      	movs	r2, #8
 8007786:	701a      	strb	r2, [r3, #0]
 8007788:	e050      	b.n	800782c <UART_SetConfig+0x18c>
 800778a:	231b      	movs	r3, #27
 800778c:	2218      	movs	r2, #24
 800778e:	189b      	adds	r3, r3, r2
 8007790:	19db      	adds	r3, r3, r7
 8007792:	2210      	movs	r2, #16
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	e049      	b.n	800782c <UART_SetConfig+0x18c>
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a83      	ldr	r2, [pc, #524]	@ (80079ac <UART_SetConfig+0x30c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d13e      	bne.n	8007820 <UART_SetConfig+0x180>
 80077a2:	4b85      	ldr	r3, [pc, #532]	@ (80079b8 <UART_SetConfig+0x318>)
 80077a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077a6:	23c0      	movs	r3, #192	@ 0xc0
 80077a8:	011b      	lsls	r3, r3, #4
 80077aa:	4013      	ands	r3, r2
 80077ac:	22c0      	movs	r2, #192	@ 0xc0
 80077ae:	0112      	lsls	r2, r2, #4
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d027      	beq.n	8007804 <UART_SetConfig+0x164>
 80077b4:	22c0      	movs	r2, #192	@ 0xc0
 80077b6:	0112      	lsls	r2, r2, #4
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d82a      	bhi.n	8007812 <UART_SetConfig+0x172>
 80077bc:	2280      	movs	r2, #128	@ 0x80
 80077be:	0112      	lsls	r2, r2, #4
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d011      	beq.n	80077e8 <UART_SetConfig+0x148>
 80077c4:	2280      	movs	r2, #128	@ 0x80
 80077c6:	0112      	lsls	r2, r2, #4
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d822      	bhi.n	8007812 <UART_SetConfig+0x172>
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <UART_SetConfig+0x13a>
 80077d0:	2280      	movs	r2, #128	@ 0x80
 80077d2:	00d2      	lsls	r2, r2, #3
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00e      	beq.n	80077f6 <UART_SetConfig+0x156>
 80077d8:	e01b      	b.n	8007812 <UART_SetConfig+0x172>
 80077da:	231b      	movs	r3, #27
 80077dc:	2218      	movs	r2, #24
 80077de:	189b      	adds	r3, r3, r2
 80077e0:	19db      	adds	r3, r3, r7
 80077e2:	2200      	movs	r2, #0
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	e021      	b.n	800782c <UART_SetConfig+0x18c>
 80077e8:	231b      	movs	r3, #27
 80077ea:	2218      	movs	r2, #24
 80077ec:	189b      	adds	r3, r3, r2
 80077ee:	19db      	adds	r3, r3, r7
 80077f0:	2202      	movs	r2, #2
 80077f2:	701a      	strb	r2, [r3, #0]
 80077f4:	e01a      	b.n	800782c <UART_SetConfig+0x18c>
 80077f6:	231b      	movs	r3, #27
 80077f8:	2218      	movs	r2, #24
 80077fa:	189b      	adds	r3, r3, r2
 80077fc:	19db      	adds	r3, r3, r7
 80077fe:	2204      	movs	r2, #4
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	e013      	b.n	800782c <UART_SetConfig+0x18c>
 8007804:	231b      	movs	r3, #27
 8007806:	2218      	movs	r2, #24
 8007808:	189b      	adds	r3, r3, r2
 800780a:	19db      	adds	r3, r3, r7
 800780c:	2208      	movs	r2, #8
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	e00c      	b.n	800782c <UART_SetConfig+0x18c>
 8007812:	231b      	movs	r3, #27
 8007814:	2218      	movs	r2, #24
 8007816:	189b      	adds	r3, r3, r2
 8007818:	19db      	adds	r3, r3, r7
 800781a:	2210      	movs	r2, #16
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	e005      	b.n	800782c <UART_SetConfig+0x18c>
 8007820:	231b      	movs	r3, #27
 8007822:	2218      	movs	r2, #24
 8007824:	189b      	adds	r3, r3, r2
 8007826:	19db      	adds	r3, r3, r7
 8007828:	2210      	movs	r2, #16
 800782a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a5e      	ldr	r2, [pc, #376]	@ (80079ac <UART_SetConfig+0x30c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d000      	beq.n	8007838 <UART_SetConfig+0x198>
 8007836:	e084      	b.n	8007942 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007838:	231b      	movs	r3, #27
 800783a:	2218      	movs	r2, #24
 800783c:	189b      	adds	r3, r3, r2
 800783e:	19db      	adds	r3, r3, r7
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b08      	cmp	r3, #8
 8007844:	d01d      	beq.n	8007882 <UART_SetConfig+0x1e2>
 8007846:	dc20      	bgt.n	800788a <UART_SetConfig+0x1ea>
 8007848:	2b04      	cmp	r3, #4
 800784a:	d015      	beq.n	8007878 <UART_SetConfig+0x1d8>
 800784c:	dc1d      	bgt.n	800788a <UART_SetConfig+0x1ea>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <UART_SetConfig+0x1b8>
 8007852:	2b02      	cmp	r3, #2
 8007854:	d005      	beq.n	8007862 <UART_SetConfig+0x1c2>
 8007856:	e018      	b.n	800788a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007858:	f7ff f850 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 800785c:	0003      	movs	r3, r0
 800785e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007860:	e01c      	b.n	800789c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007862:	4b55      	ldr	r3, [pc, #340]	@ (80079b8 <UART_SetConfig+0x318>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2210      	movs	r2, #16
 8007868:	4013      	ands	r3, r2
 800786a:	d002      	beq.n	8007872 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800786c:	4b53      	ldr	r3, [pc, #332]	@ (80079bc <UART_SetConfig+0x31c>)
 800786e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007870:	e014      	b.n	800789c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8007872:	4b53      	ldr	r3, [pc, #332]	@ (80079c0 <UART_SetConfig+0x320>)
 8007874:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007876:	e011      	b.n	800789c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007878:	f7fe ff90 	bl	800679c <HAL_RCC_GetSysClockFreq>
 800787c:	0003      	movs	r3, r0
 800787e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007880:	e00c      	b.n	800789c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007882:	2380      	movs	r3, #128	@ 0x80
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007888:	e008      	b.n	800789c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800788e:	231a      	movs	r3, #26
 8007890:	2218      	movs	r2, #24
 8007892:	189b      	adds	r3, r3, r2
 8007894:	19db      	adds	r3, r3, r7
 8007896:	2201      	movs	r2, #1
 8007898:	701a      	strb	r2, [r3, #0]
        break;
 800789a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800789c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d100      	bne.n	80078a4 <UART_SetConfig+0x204>
 80078a2:	e12f      	b.n	8007b04 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	0013      	movs	r3, r2
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	189b      	adds	r3, r3, r2
 80078ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d305      	bcc.n	80078c0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078bc:	429a      	cmp	r2, r3
 80078be:	d906      	bls.n	80078ce <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80078c0:	231a      	movs	r3, #26
 80078c2:	2218      	movs	r2, #24
 80078c4:	189b      	adds	r3, r3, r2
 80078c6:	19db      	adds	r3, r3, r7
 80078c8:	2201      	movs	r2, #1
 80078ca:	701a      	strb	r2, [r3, #0]
 80078cc:	e11a      	b.n	8007b04 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80078ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	2300      	movs	r3, #0
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	6939      	ldr	r1, [r7, #16]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	000b      	movs	r3, r1
 80078dc:	0e1b      	lsrs	r3, r3, #24
 80078de:	0010      	movs	r0, r2
 80078e0:	0205      	lsls	r5, r0, #8
 80078e2:	431d      	orrs	r5, r3
 80078e4:	000b      	movs	r3, r1
 80078e6:	021c      	lsls	r4, r3, #8
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	085b      	lsrs	r3, r3, #1
 80078ee:	60bb      	str	r3, [r7, #8]
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68b8      	ldr	r0, [r7, #8]
 80078f6:	68f9      	ldr	r1, [r7, #12]
 80078f8:	1900      	adds	r0, r0, r4
 80078fa:	4169      	adcs	r1, r5
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	603b      	str	r3, [r7, #0]
 8007902:	2300      	movs	r3, #0
 8007904:	607b      	str	r3, [r7, #4]
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f7f8 fdcd 	bl	80004a8 <__aeabi_uldivmod>
 800790e:	0002      	movs	r2, r0
 8007910:	000b      	movs	r3, r1
 8007912:	0013      	movs	r3, r2
 8007914:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007918:	23c0      	movs	r3, #192	@ 0xc0
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	429a      	cmp	r2, r3
 800791e:	d309      	bcc.n	8007934 <UART_SetConfig+0x294>
 8007920:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007922:	2380      	movs	r3, #128	@ 0x80
 8007924:	035b      	lsls	r3, r3, #13
 8007926:	429a      	cmp	r2, r3
 8007928:	d204      	bcs.n	8007934 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007930:	60da      	str	r2, [r3, #12]
 8007932:	e0e7      	b.n	8007b04 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8007934:	231a      	movs	r3, #26
 8007936:	2218      	movs	r2, #24
 8007938:	189b      	adds	r3, r3, r2
 800793a:	19db      	adds	r3, r3, r7
 800793c:	2201      	movs	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	e0e0      	b.n	8007b04 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	69da      	ldr	r2, [r3, #28]
 8007946:	2380      	movs	r3, #128	@ 0x80
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	429a      	cmp	r2, r3
 800794c:	d000      	beq.n	8007950 <UART_SetConfig+0x2b0>
 800794e:	e082      	b.n	8007a56 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8007950:	231b      	movs	r3, #27
 8007952:	2218      	movs	r2, #24
 8007954:	189b      	adds	r3, r3, r2
 8007956:	19db      	adds	r3, r3, r7
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b08      	cmp	r3, #8
 800795c:	d834      	bhi.n	80079c8 <UART_SetConfig+0x328>
 800795e:	009a      	lsls	r2, r3, #2
 8007960:	4b18      	ldr	r3, [pc, #96]	@ (80079c4 <UART_SetConfig+0x324>)
 8007962:	18d3      	adds	r3, r2, r3
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007968:	f7fe ffc8 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 800796c:	0003      	movs	r3, r0
 800796e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007970:	e033      	b.n	80079da <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007972:	f7fe ffd9 	bl	8006928 <HAL_RCC_GetPCLK2Freq>
 8007976:	0003      	movs	r3, r0
 8007978:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800797a:	e02e      	b.n	80079da <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800797c:	4b0e      	ldr	r3, [pc, #56]	@ (80079b8 <UART_SetConfig+0x318>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2210      	movs	r2, #16
 8007982:	4013      	ands	r3, r2
 8007984:	d002      	beq.n	800798c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007986:	4b0d      	ldr	r3, [pc, #52]	@ (80079bc <UART_SetConfig+0x31c>)
 8007988:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800798a:	e026      	b.n	80079da <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 800798c:	4b0c      	ldr	r3, [pc, #48]	@ (80079c0 <UART_SetConfig+0x320>)
 800798e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007990:	e023      	b.n	80079da <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007992:	f7fe ff03 	bl	800679c <HAL_RCC_GetSysClockFreq>
 8007996:	0003      	movs	r3, r0
 8007998:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800799a:	e01e      	b.n	80079da <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800799c:	2380      	movs	r3, #128	@ 0x80
 800799e:	021b      	lsls	r3, r3, #8
 80079a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80079a2:	e01a      	b.n	80079da <UART_SetConfig+0x33a>
 80079a4:	efff69f3 	.word	0xefff69f3
 80079a8:	ffffcfff 	.word	0xffffcfff
 80079ac:	40004800 	.word	0x40004800
 80079b0:	fffff4ff 	.word	0xfffff4ff
 80079b4:	40004400 	.word	0x40004400
 80079b8:	40021000 	.word	0x40021000
 80079bc:	003d0900 	.word	0x003d0900
 80079c0:	00f42400 	.word	0x00f42400
 80079c4:	0801031c 	.word	0x0801031c
      default:
        pclk = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80079cc:	231a      	movs	r3, #26
 80079ce:	2218      	movs	r2, #24
 80079d0:	189b      	adds	r3, r3, r2
 80079d2:	19db      	adds	r3, r3, r7
 80079d4:	2201      	movs	r2, #1
 80079d6:	701a      	strb	r2, [r3, #0]
        break;
 80079d8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d100      	bne.n	80079e2 <UART_SetConfig+0x342>
 80079e0:	e090      	b.n	8007b04 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e4:	005a      	lsls	r2, r3, #1
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	18d2      	adds	r2, r2, r3
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	0019      	movs	r1, r3
 80079f4:	0010      	movs	r0, r2
 80079f6:	f7f8 fba3 	bl	8000140 <__udivsi3>
 80079fa:	0003      	movs	r3, r0
 80079fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a00:	2b0f      	cmp	r3, #15
 8007a02:	d921      	bls.n	8007a48 <UART_SetConfig+0x3a8>
 8007a04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a06:	2380      	movs	r3, #128	@ 0x80
 8007a08:	025b      	lsls	r3, r3, #9
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d21c      	bcs.n	8007a48 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	200e      	movs	r0, #14
 8007a14:	2418      	movs	r4, #24
 8007a16:	1903      	adds	r3, r0, r4
 8007a18:	19db      	adds	r3, r3, r7
 8007a1a:	210f      	movs	r1, #15
 8007a1c:	438a      	bics	r2, r1
 8007a1e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a22:	085b      	lsrs	r3, r3, #1
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2207      	movs	r2, #7
 8007a28:	4013      	ands	r3, r2
 8007a2a:	b299      	uxth	r1, r3
 8007a2c:	1903      	adds	r3, r0, r4
 8007a2e:	19db      	adds	r3, r3, r7
 8007a30:	1902      	adds	r2, r0, r4
 8007a32:	19d2      	adds	r2, r2, r7
 8007a34:	8812      	ldrh	r2, [r2, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	1902      	adds	r2, r0, r4
 8007a40:	19d2      	adds	r2, r2, r7
 8007a42:	8812      	ldrh	r2, [r2, #0]
 8007a44:	60da      	str	r2, [r3, #12]
 8007a46:	e05d      	b.n	8007b04 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8007a48:	231a      	movs	r3, #26
 8007a4a:	2218      	movs	r2, #24
 8007a4c:	189b      	adds	r3, r3, r2
 8007a4e:	19db      	adds	r3, r3, r7
 8007a50:	2201      	movs	r2, #1
 8007a52:	701a      	strb	r2, [r3, #0]
 8007a54:	e056      	b.n	8007b04 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a56:	231b      	movs	r3, #27
 8007a58:	2218      	movs	r2, #24
 8007a5a:	189b      	adds	r3, r3, r2
 8007a5c:	19db      	adds	r3, r3, r7
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d822      	bhi.n	8007aaa <UART_SetConfig+0x40a>
 8007a64:	009a      	lsls	r2, r3, #2
 8007a66:	4b2f      	ldr	r3, [pc, #188]	@ (8007b24 <UART_SetConfig+0x484>)
 8007a68:	18d3      	adds	r3, r2, r3
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a6e:	f7fe ff45 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 8007a72:	0003      	movs	r3, r0
 8007a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007a76:	e021      	b.n	8007abc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a78:	f7fe ff56 	bl	8006928 <HAL_RCC_GetPCLK2Freq>
 8007a7c:	0003      	movs	r3, r0
 8007a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007a80:	e01c      	b.n	8007abc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a82:	4b29      	ldr	r3, [pc, #164]	@ (8007b28 <UART_SetConfig+0x488>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2210      	movs	r2, #16
 8007a88:	4013      	ands	r3, r2
 8007a8a:	d002      	beq.n	8007a92 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007a8c:	4b27      	ldr	r3, [pc, #156]	@ (8007b2c <UART_SetConfig+0x48c>)
 8007a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a90:	e014      	b.n	8007abc <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8007a92:	4b27      	ldr	r3, [pc, #156]	@ (8007b30 <UART_SetConfig+0x490>)
 8007a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007a96:	e011      	b.n	8007abc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a98:	f7fe fe80 	bl	800679c <HAL_RCC_GetSysClockFreq>
 8007a9c:	0003      	movs	r3, r0
 8007a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007aa0:	e00c      	b.n	8007abc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aa2:	2380      	movs	r3, #128	@ 0x80
 8007aa4:	021b      	lsls	r3, r3, #8
 8007aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007aa8:	e008      	b.n	8007abc <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007aae:	231a      	movs	r3, #26
 8007ab0:	2218      	movs	r2, #24
 8007ab2:	189b      	adds	r3, r3, r2
 8007ab4:	19db      	adds	r3, r3, r7
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
        break;
 8007aba:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d020      	beq.n	8007b04 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	085a      	lsrs	r2, r3, #1
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aca:	18d2      	adds	r2, r2, r3
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	0019      	movs	r1, r3
 8007ad2:	0010      	movs	r0, r2
 8007ad4:	f7f8 fb34 	bl	8000140 <__udivsi3>
 8007ad8:	0003      	movs	r3, r0
 8007ada:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	2b0f      	cmp	r3, #15
 8007ae0:	d90a      	bls.n	8007af8 <UART_SetConfig+0x458>
 8007ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ae4:	2380      	movs	r3, #128	@ 0x80
 8007ae6:	025b      	lsls	r3, r3, #9
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d205      	bcs.n	8007af8 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60da      	str	r2, [r3, #12]
 8007af6:	e005      	b.n	8007b04 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8007af8:	231a      	movs	r3, #26
 8007afa:	2218      	movs	r2, #24
 8007afc:	189b      	adds	r3, r3, r2
 8007afe:	19db      	adds	r3, r3, r7
 8007b00:	2201      	movs	r2, #1
 8007b02:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	2200      	movs	r2, #0
 8007b08:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b10:	231a      	movs	r3, #26
 8007b12:	2218      	movs	r2, #24
 8007b14:	189b      	adds	r3, r3, r2
 8007b16:	19db      	adds	r3, r3, r7
 8007b18:	781b      	ldrb	r3, [r3, #0]
}
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	b00e      	add	sp, #56	@ 0x38
 8007b20:	bdb0      	pop	{r4, r5, r7, pc}
 8007b22:	46c0      	nop			@ (mov r8, r8)
 8007b24:	08010340 	.word	0x08010340
 8007b28:	40021000 	.word	0x40021000
 8007b2c:	003d0900 	.word	0x003d0900
 8007b30:	00f42400 	.word	0x00f42400

08007b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b40:	2201      	movs	r2, #1
 8007b42:	4013      	ands	r3, r2
 8007b44:	d00b      	beq.n	8007b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	4a4a      	ldr	r2, [pc, #296]	@ (8007c78 <UART_AdvFeatureConfig+0x144>)
 8007b4e:	4013      	ands	r3, r2
 8007b50:	0019      	movs	r1, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b62:	2202      	movs	r2, #2
 8007b64:	4013      	ands	r3, r2
 8007b66:	d00b      	beq.n	8007b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	4a43      	ldr	r2, [pc, #268]	@ (8007c7c <UART_AdvFeatureConfig+0x148>)
 8007b70:	4013      	ands	r3, r2
 8007b72:	0019      	movs	r1, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b84:	2204      	movs	r2, #4
 8007b86:	4013      	ands	r3, r2
 8007b88:	d00b      	beq.n	8007ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a3b      	ldr	r2, [pc, #236]	@ (8007c80 <UART_AdvFeatureConfig+0x14c>)
 8007b92:	4013      	ands	r3, r2
 8007b94:	0019      	movs	r1, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba6:	2208      	movs	r2, #8
 8007ba8:	4013      	ands	r3, r2
 8007baa:	d00b      	beq.n	8007bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	4a34      	ldr	r2, [pc, #208]	@ (8007c84 <UART_AdvFeatureConfig+0x150>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	0019      	movs	r1, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc8:	2210      	movs	r2, #16
 8007bca:	4013      	ands	r3, r2
 8007bcc:	d00b      	beq.n	8007be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8007c88 <UART_AdvFeatureConfig+0x154>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	0019      	movs	r1, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bea:	2220      	movs	r2, #32
 8007bec:	4013      	ands	r3, r2
 8007bee:	d00b      	beq.n	8007c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	4a25      	ldr	r2, [pc, #148]	@ (8007c8c <UART_AdvFeatureConfig+0x158>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	0019      	movs	r1, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0c:	2240      	movs	r2, #64	@ 0x40
 8007c0e:	4013      	ands	r3, r2
 8007c10:	d01d      	beq.n	8007c4e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	4a1d      	ldr	r2, [pc, #116]	@ (8007c90 <UART_AdvFeatureConfig+0x15c>)
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	0019      	movs	r1, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c2e:	2380      	movs	r3, #128	@ 0x80
 8007c30:	035b      	lsls	r3, r3, #13
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d10b      	bne.n	8007c4e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	4a15      	ldr	r2, [pc, #84]	@ (8007c94 <UART_AdvFeatureConfig+0x160>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	0019      	movs	r1, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c52:	2280      	movs	r2, #128	@ 0x80
 8007c54:	4013      	ands	r3, r2
 8007c56:	d00b      	beq.n	8007c70 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8007c98 <UART_AdvFeatureConfig+0x164>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	0019      	movs	r1, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	605a      	str	r2, [r3, #4]
  }
}
 8007c70:	46c0      	nop			@ (mov r8, r8)
 8007c72:	46bd      	mov	sp, r7
 8007c74:	b002      	add	sp, #8
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	fffdffff 	.word	0xfffdffff
 8007c7c:	fffeffff 	.word	0xfffeffff
 8007c80:	fffbffff 	.word	0xfffbffff
 8007c84:	ffff7fff 	.word	0xffff7fff
 8007c88:	ffffefff 	.word	0xffffefff
 8007c8c:	ffffdfff 	.word	0xffffdfff
 8007c90:	ffefffff 	.word	0xffefffff
 8007c94:	ff9fffff 	.word	0xff9fffff
 8007c98:	fff7ffff 	.word	0xfff7ffff

08007c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b092      	sub	sp, #72	@ 0x48
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2284      	movs	r2, #132	@ 0x84
 8007ca8:	2100      	movs	r1, #0
 8007caa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cac:	f7fd f926 	bl	8004efc <HAL_GetTick>
 8007cb0:	0003      	movs	r3, r0
 8007cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2208      	movs	r2, #8
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d12c      	bne.n	8007d1c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc4:	2280      	movs	r2, #128	@ 0x80
 8007cc6:	0391      	lsls	r1, r2, #14
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	4a46      	ldr	r2, [pc, #280]	@ (8007de4 <UART_CheckIdleState+0x148>)
 8007ccc:	9200      	str	r2, [sp, #0]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f000 f88c 	bl	8007dec <UART_WaitOnFlagUntilTimeout>
 8007cd4:	1e03      	subs	r3, r0, #0
 8007cd6:	d021      	beq.n	8007d1c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8007cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce8:	f383 8810 	msr	PRIMASK, r3
}
 8007cec:	46c0      	nop			@ (mov r8, r8)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2180      	movs	r1, #128	@ 0x80
 8007cfa:	438a      	bics	r2, r1
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d04:	f383 8810 	msr	PRIMASK, r3
}
 8007d08:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2278      	movs	r2, #120	@ 0x78
 8007d14:	2100      	movs	r1, #0
 8007d16:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e05f      	b.n	8007ddc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2204      	movs	r2, #4
 8007d24:	4013      	ands	r3, r2
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d146      	bne.n	8007db8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2c:	2280      	movs	r2, #128	@ 0x80
 8007d2e:	03d1      	lsls	r1, r2, #15
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	4a2c      	ldr	r2, [pc, #176]	@ (8007de4 <UART_CheckIdleState+0x148>)
 8007d34:	9200      	str	r2, [sp, #0]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f000 f858 	bl	8007dec <UART_WaitOnFlagUntilTimeout>
 8007d3c:	1e03      	subs	r3, r0, #0
 8007d3e:	d03b      	beq.n	8007db8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d40:	f3ef 8310 	mrs	r3, PRIMASK
 8007d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d46:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f383 8810 	msr	PRIMASK, r3
}
 8007d54:	46c0      	nop			@ (mov r8, r8)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4921      	ldr	r1, [pc, #132]	@ (8007de8 <UART_CheckIdleState+0x14c>)
 8007d62:	400a      	ands	r2, r1
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f383 8810 	msr	PRIMASK, r3
}
 8007d70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d72:	f3ef 8310 	mrs	r3, PRIMASK
 8007d76:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d78:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	f383 8810 	msr	PRIMASK, r3
}
 8007d86:	46c0      	nop			@ (mov r8, r8)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689a      	ldr	r2, [r3, #8]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2101      	movs	r1, #1
 8007d94:	438a      	bics	r2, r1
 8007d96:	609a      	str	r2, [r3, #8]
 8007d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	f383 8810 	msr	PRIMASK, r3
}
 8007da2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2280      	movs	r2, #128	@ 0x80
 8007da8:	2120      	movs	r1, #32
 8007daa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2278      	movs	r2, #120	@ 0x78
 8007db0:	2100      	movs	r1, #0
 8007db2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e011      	b.n	8007ddc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2280      	movs	r2, #128	@ 0x80
 8007dc2:	2120      	movs	r1, #32
 8007dc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2278      	movs	r2, #120	@ 0x78
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	0018      	movs	r0, r3
 8007dde:	46bd      	mov	sp, r7
 8007de0:	b010      	add	sp, #64	@ 0x40
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	01ffffff 	.word	0x01ffffff
 8007de8:	fffffedf 	.word	0xfffffedf

08007dec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	1dfb      	adds	r3, r7, #7
 8007dfa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dfc:	e04b      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	3301      	adds	r3, #1
 8007e02:	d048      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e04:	f7fd f87a 	bl	8004efc <HAL_GetTick>
 8007e08:	0002      	movs	r2, r0
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d302      	bcc.n	8007e1a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e04b      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2204      	movs	r2, #4
 8007e26:	4013      	ands	r3, r2
 8007e28:	d035      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	2208      	movs	r2, #8
 8007e32:	4013      	ands	r3, r2
 8007e34:	2b08      	cmp	r3, #8
 8007e36:	d111      	bne.n	8007e5c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2208      	movs	r2, #8
 8007e3e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	0018      	movs	r0, r3
 8007e44:	f000 f83c 	bl	8007ec0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2284      	movs	r2, #132	@ 0x84
 8007e4c:	2108      	movs	r1, #8
 8007e4e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2278      	movs	r2, #120	@ 0x78
 8007e54:	2100      	movs	r1, #0
 8007e56:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e02c      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	69da      	ldr	r2, [r3, #28]
 8007e62:	2380      	movs	r3, #128	@ 0x80
 8007e64:	011b      	lsls	r3, r3, #4
 8007e66:	401a      	ands	r2, r3
 8007e68:	2380      	movs	r3, #128	@ 0x80
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d112      	bne.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2280      	movs	r2, #128	@ 0x80
 8007e76:	0112      	lsls	r2, r2, #4
 8007e78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f000 f81f 	bl	8007ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2284      	movs	r2, #132	@ 0x84
 8007e86:	2120      	movs	r1, #32
 8007e88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2278      	movs	r2, #120	@ 0x78
 8007e8e:	2100      	movs	r1, #0
 8007e90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e00f      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	425a      	negs	r2, r3
 8007ea6:	4153      	adcs	r3, r2
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	001a      	movs	r2, r3
 8007eac:	1dfb      	adds	r3, r7, #7
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d0a4      	beq.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b004      	add	sp, #16
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08e      	sub	sp, #56	@ 0x38
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8007ece:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	f383 8810 	msr	PRIMASK, r3
}
 8007edc:	46c0      	nop			@ (mov r8, r8)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4926      	ldr	r1, [pc, #152]	@ (8007f84 <UART_EndRxTransfer+0xc4>)
 8007eea:	400a      	ands	r2, r1
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	f383 8810 	msr	PRIMASK, r3
}
 8007ef8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007efa:	f3ef 8310 	mrs	r3, PRIMASK
 8007efe:	623b      	str	r3, [r7, #32]
  return(result);
 8007f00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f04:	2301      	movs	r3, #1
 8007f06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	f383 8810 	msr	PRIMASK, r3
}
 8007f0e:	46c0      	nop			@ (mov r8, r8)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	438a      	bics	r2, r1
 8007f1e:	609a      	str	r2, [r3, #8]
 8007f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f26:	f383 8810 	msr	PRIMASK, r3
}
 8007f2a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d118      	bne.n	8007f66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f34:	f3ef 8310 	mrs	r3, PRIMASK
 8007f38:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f3e:	2301      	movs	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f383 8810 	msr	PRIMASK, r3
}
 8007f48:	46c0      	nop			@ (mov r8, r8)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2110      	movs	r1, #16
 8007f56:	438a      	bics	r2, r1
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f383 8810 	msr	PRIMASK, r3
}
 8007f64:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2280      	movs	r2, #128	@ 0x80
 8007f6a:	2120      	movs	r1, #32
 8007f6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007f7a:	46c0      	nop			@ (mov r8, r8)
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b00e      	add	sp, #56	@ 0x38
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	fffffedf 	.word	0xfffffedf

08007f88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007f8c:	4a06      	ldr	r2, [pc, #24]	@ (8007fa8 <MX_FATFS_Init+0x20>)
 8007f8e:	4b07      	ldr	r3, [pc, #28]	@ (8007fac <MX_FATFS_Init+0x24>)
 8007f90:	0011      	movs	r1, r2
 8007f92:	0018      	movs	r0, r3
 8007f94:	f003 fb2a 	bl	800b5ec <FATFS_LinkDriver>
 8007f98:	0003      	movs	r3, r0
 8007f9a:	001a      	movs	r2, r3
 8007f9c:	4b04      	ldr	r3, [pc, #16]	@ (8007fb0 <MX_FATFS_Init+0x28>)
 8007f9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007fa0:	46c0      	nop			@ (mov r8, r8)
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	46c0      	nop			@ (mov r8, r8)
 8007fa8:	20000384 	.word	0x20000384
 8007fac:	20000010 	.word	0x20000010
 8007fb0:	20000380 	.word	0x20000380

08007fb4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007fb8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007fba:	0018      	movs	r0, r3
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	0002      	movs	r2, r0
 8007fc8:	1dfb      	adds	r3, r7, #7
 8007fca:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8007fcc:	1dfb      	adds	r3, r7, #7
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	f7fb f87b 	bl	80030cc <SD_disk_initialize>
 8007fd6:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8007fd8:	0018      	movs	r0, r3
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	b002      	add	sp, #8
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	0002      	movs	r2, r0
 8007fe8:	1dfb      	adds	r3, r7, #7
 8007fea:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8007fec:	1dfb      	adds	r3, r7, #7
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	f7fb f975 	bl	80032e0 <SD_disk_status>
 8007ff6:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8007ff8:	0018      	movs	r0, r3
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	b002      	add	sp, #8
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008000:	b5b0      	push	{r4, r5, r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	250f      	movs	r5, #15
 800800e:	197b      	adds	r3, r7, r5
 8008010:	1c02      	adds	r2, r0, #0
 8008012:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8008014:	683c      	ldr	r4, [r7, #0]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	197b      	adds	r3, r7, r5
 800801c:	7818      	ldrb	r0, [r3, #0]
 800801e:	0023      	movs	r3, r4
 8008020:	f7fb f974 	bl	800330c <SD_disk_read>
 8008024:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8008026:	0018      	movs	r0, r3
 8008028:	46bd      	mov	sp, r7
 800802a:	b004      	add	sp, #16
 800802c:	bdb0      	pop	{r4, r5, r7, pc}

0800802e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800802e:	b5b0      	push	{r4, r5, r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
 800803a:	250f      	movs	r5, #15
 800803c:	197b      	adds	r3, r7, r5
 800803e:	1c02      	adds	r2, r0, #0
 8008040:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8008042:	683c      	ldr	r4, [r7, #0]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	197b      	adds	r3, r7, r5
 800804a:	7818      	ldrb	r0, [r3, #0]
 800804c:	0023      	movs	r3, r4
 800804e:	f7fb f9cd 	bl	80033ec <SD_disk_write>
 8008052:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8008054:	0018      	movs	r0, r3
 8008056:	46bd      	mov	sp, r7
 8008058:	b004      	add	sp, #16
 800805a:	bdb0      	pop	{r4, r5, r7, pc}

0800805c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	603a      	str	r2, [r7, #0]
 8008064:	1dfb      	adds	r3, r7, #7
 8008066:	1c02      	adds	r2, r0, #0
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	1dbb      	adds	r3, r7, #6
 800806c:	1c0a      	adds	r2, r1, #0
 800806e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	1dbb      	adds	r3, r7, #6
 8008074:	7819      	ldrb	r1, [r3, #0]
 8008076:	1dfb      	adds	r3, r7, #7
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	0018      	movs	r0, r3
 800807c:	f7fb fa3e 	bl	80034fc <SD_disk_ioctl>
 8008080:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8008082:	0018      	movs	r0, r3
 8008084:	46bd      	mov	sp, r7
 8008086:	b002      	add	sp, #8
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800808c:	b5b0      	push	{r4, r5, r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	0002      	movs	r2, r0
 8008094:	1dfb      	adds	r3, r7, #7
 8008096:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008098:	1dfb      	adds	r3, r7, #7
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	4a0b      	ldr	r2, [pc, #44]	@ (80080cc <disk_status+0x40>)
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	18d3      	adds	r3, r2, r3
 80080a2:	3304      	adds	r3, #4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	1dfa      	adds	r2, r7, #7
 80080aa:	7812      	ldrb	r2, [r2, #0]
 80080ac:	4907      	ldr	r1, [pc, #28]	@ (80080cc <disk_status+0x40>)
 80080ae:	188a      	adds	r2, r1, r2
 80080b0:	7a12      	ldrb	r2, [r2, #8]
 80080b2:	250f      	movs	r5, #15
 80080b4:	197c      	adds	r4, r7, r5
 80080b6:	0010      	movs	r0, r2
 80080b8:	4798      	blx	r3
 80080ba:	0003      	movs	r3, r0
 80080bc:	7023      	strb	r3, [r4, #0]
  return stat;
 80080be:	197b      	adds	r3, r7, r5
 80080c0:	781b      	ldrb	r3, [r3, #0]
}
 80080c2:	0018      	movs	r0, r3
 80080c4:	46bd      	mov	sp, r7
 80080c6:	b004      	add	sp, #16
 80080c8:	bdb0      	pop	{r4, r5, r7, pc}
 80080ca:	46c0      	nop			@ (mov r8, r8)
 80080cc:	200005b0 	.word	0x200005b0

080080d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80080d0:	b590      	push	{r4, r7, lr}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	0002      	movs	r2, r0
 80080d8:	1dfb      	adds	r3, r7, #7
 80080da:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80080dc:	200f      	movs	r0, #15
 80080de:	183b      	adds	r3, r7, r0
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80080e4:	1dfb      	adds	r3, r7, #7
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	4a10      	ldr	r2, [pc, #64]	@ (800812c <disk_initialize+0x5c>)
 80080ea:	5cd3      	ldrb	r3, [r2, r3]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d116      	bne.n	800811e <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 80080f0:	1dfb      	adds	r3, r7, #7
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	4a0d      	ldr	r2, [pc, #52]	@ (800812c <disk_initialize+0x5c>)
 80080f6:	2101      	movs	r1, #1
 80080f8:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80080fa:	1dfb      	adds	r3, r7, #7
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	4a0b      	ldr	r2, [pc, #44]	@ (800812c <disk_initialize+0x5c>)
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	18d3      	adds	r3, r2, r3
 8008104:	3304      	adds	r3, #4
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	1dfa      	adds	r2, r7, #7
 800810c:	7812      	ldrb	r2, [r2, #0]
 800810e:	4907      	ldr	r1, [pc, #28]	@ (800812c <disk_initialize+0x5c>)
 8008110:	188a      	adds	r2, r1, r2
 8008112:	7a12      	ldrb	r2, [r2, #8]
 8008114:	183c      	adds	r4, r7, r0
 8008116:	0010      	movs	r0, r2
 8008118:	4798      	blx	r3
 800811a:	0003      	movs	r3, r0
 800811c:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 800811e:	230f      	movs	r3, #15
 8008120:	18fb      	adds	r3, r7, r3
 8008122:	781b      	ldrb	r3, [r3, #0]
}
 8008124:	0018      	movs	r0, r3
 8008126:	46bd      	mov	sp, r7
 8008128:	b005      	add	sp, #20
 800812a:	bd90      	pop	{r4, r7, pc}
 800812c:	200005b0 	.word	0x200005b0

08008130 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	607a      	str	r2, [r7, #4]
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	210f      	movs	r1, #15
 800813e:	187b      	adds	r3, r7, r1
 8008140:	1c02      	adds	r2, r0, #0
 8008142:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008144:	187b      	adds	r3, r7, r1
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	4a0c      	ldr	r2, [pc, #48]	@ (800817c <disk_read+0x4c>)
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	18d3      	adds	r3, r2, r3
 800814e:	3304      	adds	r3, #4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689d      	ldr	r5, [r3, #8]
 8008154:	187b      	adds	r3, r7, r1
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	4a08      	ldr	r2, [pc, #32]	@ (800817c <disk_read+0x4c>)
 800815a:	18d3      	adds	r3, r2, r3
 800815c:	7a18      	ldrb	r0, [r3, #8]
 800815e:	2617      	movs	r6, #23
 8008160:	19bc      	adds	r4, r7, r6
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	68b9      	ldr	r1, [r7, #8]
 8008168:	47a8      	blx	r5
 800816a:	0003      	movs	r3, r0
 800816c:	7023      	strb	r3, [r4, #0]
  return res;
 800816e:	19bb      	adds	r3, r7, r6
 8008170:	781b      	ldrb	r3, [r3, #0]
}
 8008172:	0018      	movs	r0, r3
 8008174:	46bd      	mov	sp, r7
 8008176:	b007      	add	sp, #28
 8008178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800817a:	46c0      	nop			@ (mov r8, r8)
 800817c:	200005b0 	.word	0x200005b0

08008180 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	607a      	str	r2, [r7, #4]
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	210f      	movs	r1, #15
 800818e:	187b      	adds	r3, r7, r1
 8008190:	1c02      	adds	r2, r0, #0
 8008192:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008194:	187b      	adds	r3, r7, r1
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	4a0c      	ldr	r2, [pc, #48]	@ (80081cc <disk_write+0x4c>)
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	18d3      	adds	r3, r2, r3
 800819e:	3304      	adds	r3, #4
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68dd      	ldr	r5, [r3, #12]
 80081a4:	187b      	adds	r3, r7, r1
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	4a08      	ldr	r2, [pc, #32]	@ (80081cc <disk_write+0x4c>)
 80081aa:	18d3      	adds	r3, r2, r3
 80081ac:	7a18      	ldrb	r0, [r3, #8]
 80081ae:	2617      	movs	r6, #23
 80081b0:	19bc      	adds	r4, r7, r6
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	47a8      	blx	r5
 80081ba:	0003      	movs	r3, r0
 80081bc:	7023      	strb	r3, [r4, #0]
  return res;
 80081be:	19bb      	adds	r3, r7, r6
 80081c0:	781b      	ldrb	r3, [r3, #0]
}
 80081c2:	0018      	movs	r0, r3
 80081c4:	46bd      	mov	sp, r7
 80081c6:	b007      	add	sp, #28
 80081c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ca:	46c0      	nop			@ (mov r8, r8)
 80081cc:	200005b0 	.word	0x200005b0

080081d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80081d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	603a      	str	r2, [r7, #0]
 80081d8:	1dfb      	adds	r3, r7, #7
 80081da:	1c02      	adds	r2, r0, #0
 80081dc:	701a      	strb	r2, [r3, #0]
 80081de:	1dbb      	adds	r3, r7, #6
 80081e0:	1c0a      	adds	r2, r1, #0
 80081e2:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80081e4:	1dfb      	adds	r3, r7, #7
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	4a0c      	ldr	r2, [pc, #48]	@ (800821c <disk_ioctl+0x4c>)
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	18d3      	adds	r3, r2, r3
 80081ee:	3304      	adds	r3, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	1dfa      	adds	r2, r7, #7
 80081f6:	7812      	ldrb	r2, [r2, #0]
 80081f8:	4908      	ldr	r1, [pc, #32]	@ (800821c <disk_ioctl+0x4c>)
 80081fa:	188a      	adds	r2, r1, r2
 80081fc:	7a10      	ldrb	r0, [r2, #8]
 80081fe:	260f      	movs	r6, #15
 8008200:	19bc      	adds	r4, r7, r6
 8008202:	683d      	ldr	r5, [r7, #0]
 8008204:	1dba      	adds	r2, r7, #6
 8008206:	7811      	ldrb	r1, [r2, #0]
 8008208:	002a      	movs	r2, r5
 800820a:	4798      	blx	r3
 800820c:	0003      	movs	r3, r0
 800820e:	7023      	strb	r3, [r4, #0]
  return res;
 8008210:	19bb      	adds	r3, r7, r6
 8008212:	781b      	ldrb	r3, [r3, #0]
}
 8008214:	0018      	movs	r0, r3
 8008216:	46bd      	mov	sp, r7
 8008218:	b005      	add	sp, #20
 800821a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800821c:	200005b0 	.word	0x200005b0

08008220 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3301      	adds	r3, #1
 800822c:	781a      	ldrb	r2, [r3, #0]
 800822e:	210e      	movs	r1, #14
 8008230:	187b      	adds	r3, r7, r1
 8008232:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8008234:	187b      	adds	r3, r7, r1
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	021b      	lsls	r3, r3, #8
 800823a:	b21a      	sxth	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	b21b      	sxth	r3, r3
 8008242:	4313      	orrs	r3, r2
 8008244:	b21a      	sxth	r2, r3
 8008246:	187b      	adds	r3, r7, r1
 8008248:	801a      	strh	r2, [r3, #0]
	return rv;
 800824a:	187b      	adds	r3, r7, r1
 800824c:	881b      	ldrh	r3, [r3, #0]
}
 800824e:	0018      	movs	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	b004      	add	sp, #16
 8008254:	bd80      	pop	{r7, pc}

08008256 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3303      	adds	r3, #3
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	3202      	adds	r2, #2
 800826e:	7812      	ldrb	r2, [r2, #0]
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	021b      	lsls	r3, r3, #8
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	3201      	adds	r2, #1
 800827c:	7812      	ldrb	r2, [r2, #0]
 800827e:	4313      	orrs	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	021b      	lsls	r3, r3, #8
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	7812      	ldrb	r2, [r2, #0]
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]
	return rv;
 800828e:	68fb      	ldr	r3, [r7, #12]
}
 8008290:	0018      	movs	r0, r3
 8008292:	46bd      	mov	sp, r7
 8008294:	b004      	add	sp, #16
 8008296:	bd80      	pop	{r7, pc}

08008298 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	000a      	movs	r2, r1
 80082a2:	1cbb      	adds	r3, r7, #2
 80082a4:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	1cba      	adds	r2, r7, #2
 80082ae:	8812      	ldrh	r2, [r2, #0]
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	701a      	strb	r2, [r3, #0]
 80082b4:	1cbb      	adds	r3, r7, #2
 80082b6:	1cba      	adds	r2, r7, #2
 80082b8:	8812      	ldrh	r2, [r2, #0]
 80082ba:	0a12      	lsrs	r2, r2, #8
 80082bc:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	1cba      	adds	r2, r7, #2
 80082c6:	8812      	ldrh	r2, [r2, #0]
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	701a      	strb	r2, [r3, #0]
}
 80082cc:	46c0      	nop			@ (mov r8, r8)
 80082ce:	46bd      	mov	sp, r7
 80082d0:	b002      	add	sp, #8
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	b2d2      	uxtb	r2, r2
 80082e8:	701a      	strb	r2, [r3, #0]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	0a1b      	lsrs	r3, r3, #8
 80082ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	607a      	str	r2, [r7, #4]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	b2d2      	uxtb	r2, r2
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	701a      	strb	r2, [r3, #0]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	0a1b      	lsrs	r3, r3, #8
 8008312:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	607a      	str	r2, [r7, #4]
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	b2d2      	uxtb	r2, r2
 800831e:	701a      	strb	r2, [r3, #0]
}
 8008320:	46c0      	nop			@ (mov r8, r8)
 8008322:	46bd      	mov	sp, r7
 8008324:	b002      	add	sp, #8
 8008326:	bd80      	pop	{r7, pc}

08008328 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00d      	beq.n	800835e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	1c53      	adds	r3, r2, #1
 8008346:	613b      	str	r3, [r7, #16]
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	1c59      	adds	r1, r3, #1
 800834c:	6179      	str	r1, [r7, #20]
 800834e:	7812      	ldrb	r2, [r2, #0]
 8008350:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3b01      	subs	r3, #1
 8008356:	607b      	str	r3, [r7, #4]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1f1      	bne.n	8008342 <mem_cpy+0x1a>
	}
}
 800835e:	46c0      	nop			@ (mov r8, r8)
 8008360:	46bd      	mov	sp, r7
 8008362:	b006      	add	sp, #24
 8008364:	bd80      	pop	{r7, pc}

08008366 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008366:	b580      	push	{r7, lr}
 8008368:	b086      	sub	sp, #24
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	1c5a      	adds	r2, r3, #1
 800837a:	617a      	str	r2, [r7, #20]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3b01      	subs	r3, #1
 8008386:	607b      	str	r3, [r7, #4]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1f3      	bne.n	8008376 <mem_set+0x10>
}
 800838e:	46c0      	nop			@ (mov r8, r8)
 8008390:	46c0      	nop			@ (mov r8, r8)
 8008392:	46bd      	mov	sp, r7
 8008394:	b006      	add	sp, #24
 8008396:	bd80      	pop	{r7, pc}

08008398 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	61fb      	str	r3, [r7, #28]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	61fa      	str	r2, [r7, #28]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	0019      	movs	r1, r3
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	61ba      	str	r2, [r7, #24]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	1acb      	subs	r3, r1, r3
 80083c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	607b      	str	r3, [r7, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <mem_cmp+0x40>
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0eb      	beq.n	80083b0 <mem_cmp+0x18>

	return r;
 80083d8:	697b      	ldr	r3, [r7, #20]
}
 80083da:	0018      	movs	r0, r3
 80083dc:	46bd      	mov	sp, r7
 80083de:	b008      	add	sp, #32
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80083ec:	e002      	b.n	80083f4 <chk_chr+0x12>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3301      	adds	r3, #1
 80083f2:	607b      	str	r3, [r7, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <chk_chr+0x26>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	001a      	movs	r2, r3
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	4293      	cmp	r3, r2
 8008406:	d1f2      	bne.n	80083ee <chk_chr+0xc>
	return *str;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	781b      	ldrb	r3, [r3, #0]
}
 800840c:	0018      	movs	r0, r3
 800840e:	46bd      	mov	sp, r7
 8008410:	b002      	add	sp, #8
 8008412:	bd80      	pop	{r7, pc}

08008414 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800841e:	2300      	movs	r3, #0
 8008420:	60bb      	str	r3, [r7, #8]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	e027      	b.n	8008478 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8008428:	4b25      	ldr	r3, [pc, #148]	@ (80084c0 <chk_lock+0xac>)
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	0112      	lsls	r2, r2, #4
 800842e:	58d3      	ldr	r3, [r2, r3]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01c      	beq.n	800846e <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008434:	4b22      	ldr	r3, [pc, #136]	@ (80084c0 <chk_lock+0xac>)
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	0112      	lsls	r2, r2, #4
 800843a:	58d2      	ldr	r2, [r2, r3]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	429a      	cmp	r2, r3
 8008442:	d116      	bne.n	8008472 <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8008444:	4a1e      	ldr	r2, [pc, #120]	@ (80084c0 <chk_lock+0xac>)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	011b      	lsls	r3, r3, #4
 800844a:	18d3      	adds	r3, r2, r3
 800844c:	3304      	adds	r3, #4
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008454:	429a      	cmp	r2, r3
 8008456:	d10c      	bne.n	8008472 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8008458:	4a19      	ldr	r2, [pc, #100]	@ (80084c0 <chk_lock+0xac>)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	011b      	lsls	r3, r3, #4
 800845e:	18d3      	adds	r3, r2, r3
 8008460:	3308      	adds	r3, #8
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008468:	429a      	cmp	r2, r3
 800846a:	d102      	bne.n	8008472 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 800846c:	e007      	b.n	800847e <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 800846e:	2301      	movs	r3, #1
 8008470:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3301      	adds	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d9d4      	bls.n	8008428 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2b02      	cmp	r3, #2
 8008482:	d109      	bne.n	8008498 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d102      	bne.n	8008490 <chk_lock+0x7c>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b02      	cmp	r3, #2
 800848e:	d101      	bne.n	8008494 <chk_lock+0x80>
 8008490:	2300      	movs	r3, #0
 8008492:	e011      	b.n	80084b8 <chk_lock+0xa4>
 8008494:	2312      	movs	r3, #18
 8008496:	e00f      	b.n	80084b8 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d109      	bne.n	80084b2 <chk_lock+0x9e>
 800849e:	4a08      	ldr	r2, [pc, #32]	@ (80084c0 <chk_lock+0xac>)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	011b      	lsls	r3, r3, #4
 80084a4:	18d3      	adds	r3, r2, r3
 80084a6:	330c      	adds	r3, #12
 80084a8:	881a      	ldrh	r2, [r3, #0]
 80084aa:	2380      	movs	r3, #128	@ 0x80
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d101      	bne.n	80084b6 <chk_lock+0xa2>
 80084b2:	2310      	movs	r3, #16
 80084b4:	e000      	b.n	80084b8 <chk_lock+0xa4>
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	0018      	movs	r0, r3
 80084ba:	46bd      	mov	sp, r7
 80084bc:	b004      	add	sp, #16
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	20000390 	.word	0x20000390

080084c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80084ca:	2300      	movs	r3, #0
 80084cc:	607b      	str	r3, [r7, #4]
 80084ce:	e002      	b.n	80084d6 <enq_lock+0x12>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3301      	adds	r3, #1
 80084d4:	607b      	str	r3, [r7, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d805      	bhi.n	80084e8 <enq_lock+0x24>
 80084dc:	4b07      	ldr	r3, [pc, #28]	@ (80084fc <enq_lock+0x38>)
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	0112      	lsls	r2, r2, #4
 80084e2:	58d3      	ldr	r3, [r2, r3]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1f3      	bne.n	80084d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	3b02      	subs	r3, #2
 80084ec:	1e5a      	subs	r2, r3, #1
 80084ee:	4193      	sbcs	r3, r2
 80084f0:	b2db      	uxtb	r3, r3
}
 80084f2:	0018      	movs	r0, r3
 80084f4:	46bd      	mov	sp, r7
 80084f6:	b002      	add	sp, #8
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	46c0      	nop			@ (mov r8, r8)
 80084fc:	20000390 	.word	0x20000390

08008500 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	e01e      	b.n	800854e <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8008510:	4b3f      	ldr	r3, [pc, #252]	@ (8008610 <inc_lock+0x110>)
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	0112      	lsls	r2, r2, #4
 8008516:	58d2      	ldr	r2, [r2, r3]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	429a      	cmp	r2, r3
 800851e:	d113      	bne.n	8008548 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8008520:	4a3b      	ldr	r2, [pc, #236]	@ (8008610 <inc_lock+0x110>)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	18d3      	adds	r3, r2, r3
 8008528:	3304      	adds	r3, #4
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008530:	429a      	cmp	r2, r3
 8008532:	d109      	bne.n	8008548 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8008534:	4a36      	ldr	r2, [pc, #216]	@ (8008610 <inc_lock+0x110>)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	011b      	lsls	r3, r3, #4
 800853a:	18d3      	adds	r3, r2, r3
 800853c:	3308      	adds	r3, #8
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008544:	429a      	cmp	r2, r3
 8008546:	d006      	beq.n	8008556 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3301      	adds	r3, #1
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d9dd      	bls.n	8008510 <inc_lock+0x10>
 8008554:	e000      	b.n	8008558 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8008556:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d130      	bne.n	80085c0 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800855e:	2300      	movs	r3, #0
 8008560:	60fb      	str	r3, [r7, #12]
 8008562:	e002      	b.n	800856a <inc_lock+0x6a>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d805      	bhi.n	800857c <inc_lock+0x7c>
 8008570:	4b27      	ldr	r3, [pc, #156]	@ (8008610 <inc_lock+0x110>)
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	0112      	lsls	r2, r2, #4
 8008576:	58d3      	ldr	r3, [r2, r3]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1f3      	bne.n	8008564 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d101      	bne.n	8008586 <inc_lock+0x86>
 8008582:	2300      	movs	r3, #0
 8008584:	e03f      	b.n	8008606 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6819      	ldr	r1, [r3, #0]
 800858a:	4b21      	ldr	r3, [pc, #132]	@ (8008610 <inc_lock+0x110>)
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	0112      	lsls	r2, r2, #4
 8008590:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689a      	ldr	r2, [r3, #8]
 8008596:	491e      	ldr	r1, [pc, #120]	@ (8008610 <inc_lock+0x110>)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	011b      	lsls	r3, r3, #4
 800859c:	18cb      	adds	r3, r1, r3
 800859e:	3304      	adds	r3, #4
 80085a0:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695a      	ldr	r2, [r3, #20]
 80085a6:	491a      	ldr	r1, [pc, #104]	@ (8008610 <inc_lock+0x110>)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	011b      	lsls	r3, r3, #4
 80085ac:	18cb      	adds	r3, r1, r3
 80085ae:	3308      	adds	r3, #8
 80085b0:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80085b2:	4a17      	ldr	r2, [pc, #92]	@ (8008610 <inc_lock+0x110>)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	011b      	lsls	r3, r3, #4
 80085b8:	18d3      	adds	r3, r2, r3
 80085ba:	330c      	adds	r3, #12
 80085bc:	2200      	movs	r2, #0
 80085be:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d009      	beq.n	80085da <inc_lock+0xda>
 80085c6:	4a12      	ldr	r2, [pc, #72]	@ (8008610 <inc_lock+0x110>)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	18d3      	adds	r3, r2, r3
 80085ce:	330c      	adds	r3, #12
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <inc_lock+0xda>
 80085d6:	2300      	movs	r3, #0
 80085d8:	e015      	b.n	8008606 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d108      	bne.n	80085f2 <inc_lock+0xf2>
 80085e0:	4a0b      	ldr	r2, [pc, #44]	@ (8008610 <inc_lock+0x110>)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	18d3      	adds	r3, r2, r3
 80085e8:	330c      	adds	r3, #12
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	3301      	adds	r3, #1
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	e001      	b.n	80085f6 <inc_lock+0xf6>
 80085f2:	2380      	movs	r3, #128	@ 0x80
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	4906      	ldr	r1, [pc, #24]	@ (8008610 <inc_lock+0x110>)
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	0112      	lsls	r2, r2, #4
 80085fc:	188a      	adds	r2, r1, r2
 80085fe:	320c      	adds	r2, #12
 8008600:	8013      	strh	r3, [r2, #0]

	return i + 1;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3301      	adds	r3, #1
}
 8008606:	0018      	movs	r0, r3
 8008608:	46bd      	mov	sp, r7
 800860a:	b004      	add	sp, #16
 800860c:	bd80      	pop	{r7, pc}
 800860e:	46c0      	nop			@ (mov r8, r8)
 8008610:	20000390 	.word	0x20000390

08008614 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3b01      	subs	r3, #1
 8008620:	607b      	str	r3, [r7, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d832      	bhi.n	800868e <dec_lock+0x7a>
		n = Files[i].ctr;
 8008628:	200e      	movs	r0, #14
 800862a:	183b      	adds	r3, r7, r0
 800862c:	491d      	ldr	r1, [pc, #116]	@ (80086a4 <dec_lock+0x90>)
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	0112      	lsls	r2, r2, #4
 8008632:	188a      	adds	r2, r1, r2
 8008634:	320c      	adds	r2, #12
 8008636:	8812      	ldrh	r2, [r2, #0]
 8008638:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800863a:	183b      	adds	r3, r7, r0
 800863c:	881a      	ldrh	r2, [r3, #0]
 800863e:	2380      	movs	r3, #128	@ 0x80
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	429a      	cmp	r2, r3
 8008644:	d102      	bne.n	800864c <dec_lock+0x38>
 8008646:	183b      	adds	r3, r7, r0
 8008648:	2200      	movs	r2, #0
 800864a:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 800864c:	210e      	movs	r1, #14
 800864e:	187b      	adds	r3, r7, r1
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <dec_lock+0x4c>
 8008656:	187b      	adds	r3, r7, r1
 8008658:	881a      	ldrh	r2, [r3, #0]
 800865a:	187b      	adds	r3, r7, r1
 800865c:	3a01      	subs	r2, #1
 800865e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8008660:	4a10      	ldr	r2, [pc, #64]	@ (80086a4 <dec_lock+0x90>)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	011b      	lsls	r3, r3, #4
 8008666:	18d3      	adds	r3, r2, r3
 8008668:	330c      	adds	r3, #12
 800866a:	210e      	movs	r1, #14
 800866c:	187a      	adds	r2, r7, r1
 800866e:	8812      	ldrh	r2, [r2, #0]
 8008670:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008672:	187b      	adds	r3, r7, r1
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d104      	bne.n	8008684 <dec_lock+0x70>
 800867a:	4b0a      	ldr	r3, [pc, #40]	@ (80086a4 <dec_lock+0x90>)
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	0112      	lsls	r2, r2, #4
 8008680:	2100      	movs	r1, #0
 8008682:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8008684:	230d      	movs	r3, #13
 8008686:	18fb      	adds	r3, r7, r3
 8008688:	2200      	movs	r2, #0
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	e003      	b.n	8008696 <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800868e:	230d      	movs	r3, #13
 8008690:	18fb      	adds	r3, r7, r3
 8008692:	2202      	movs	r2, #2
 8008694:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8008696:	230d      	movs	r3, #13
 8008698:	18fb      	adds	r3, r7, r3
 800869a:	781b      	ldrb	r3, [r3, #0]
}
 800869c:	0018      	movs	r0, r3
 800869e:	46bd      	mov	sp, r7
 80086a0:	b004      	add	sp, #16
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	20000390 	.word	0x20000390

080086a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	e00e      	b.n	80086d4 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80086b6:	4b0b      	ldr	r3, [pc, #44]	@ (80086e4 <clear_lock+0x3c>)
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	0112      	lsls	r2, r2, #4
 80086bc:	58d3      	ldr	r3, [r2, r3]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d104      	bne.n	80086ce <clear_lock+0x26>
 80086c4:	4b07      	ldr	r3, [pc, #28]	@ (80086e4 <clear_lock+0x3c>)
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	0112      	lsls	r2, r2, #4
 80086ca:	2100      	movs	r1, #0
 80086cc:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3301      	adds	r3, #1
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d9ed      	bls.n	80086b6 <clear_lock+0xe>
	}
}
 80086da:	46c0      	nop			@ (mov r8, r8)
 80086dc:	46c0      	nop			@ (mov r8, r8)
 80086de:	46bd      	mov	sp, r7
 80086e0:	b004      	add	sp, #16
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20000390 	.word	0x20000390

080086e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80086e8:	b590      	push	{r4, r7, lr}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80086f0:	240f      	movs	r4, #15
 80086f2:	193b      	adds	r3, r7, r4
 80086f4:	2200      	movs	r2, #0
 80086f6:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	78db      	ldrb	r3, [r3, #3]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d034      	beq.n	800876a <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008704:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	7858      	ldrb	r0, [r3, #1]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	3338      	adds	r3, #56	@ 0x38
 800870e:	0019      	movs	r1, r3
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	2301      	movs	r3, #1
 8008714:	f7ff fd34 	bl	8008180 <disk_write>
 8008718:	1e03      	subs	r3, r0, #0
 800871a:	d003      	beq.n	8008724 <sync_window+0x3c>
			res = FR_DISK_ERR;
 800871c:	193b      	adds	r3, r7, r4
 800871e:	2201      	movs	r2, #1
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	e022      	b.n	800876a <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	1ad2      	subs	r2, r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	429a      	cmp	r2, r3
 8008738:	d217      	bcs.n	800876a <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	789b      	ldrb	r3, [r3, #2]
 800873e:	613b      	str	r3, [r7, #16]
 8008740:	e010      	b.n	8008764 <sync_window+0x7c>
					wsect += fs->fsize;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	18d3      	adds	r3, r2, r3
 800874a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7858      	ldrb	r0, [r3, #1]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3338      	adds	r3, #56	@ 0x38
 8008754:	0019      	movs	r1, r3
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	2301      	movs	r3, #1
 800875a:	f7ff fd11 	bl	8008180 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	3b01      	subs	r3, #1
 8008762:	613b      	str	r3, [r7, #16]
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d8eb      	bhi.n	8008742 <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 800876a:	230f      	movs	r3, #15
 800876c:	18fb      	adds	r3, r7, r3
 800876e:	781b      	ldrb	r3, [r3, #0]
}
 8008770:	0018      	movs	r0, r3
 8008772:	46bd      	mov	sp, r7
 8008774:	b007      	add	sp, #28
 8008776:	bd90      	pop	{r4, r7, pc}

08008778 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008778:	b5b0      	push	{r4, r5, r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008782:	250f      	movs	r5, #15
 8008784:	197b      	adds	r3, r7, r5
 8008786:	2200      	movs	r2, #0
 8008788:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d01f      	beq.n	80087d4 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008794:	197c      	adds	r4, r7, r5
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	0018      	movs	r0, r3
 800879a:	f7ff ffa5 	bl	80086e8 <sync_window>
 800879e:	0003      	movs	r3, r0
 80087a0:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80087a2:	002c      	movs	r4, r5
 80087a4:	193b      	adds	r3, r7, r4
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d113      	bne.n	80087d4 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	7858      	ldrb	r0, [r3, #1]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3338      	adds	r3, #56	@ 0x38
 80087b4:	0019      	movs	r1, r3
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	2301      	movs	r3, #1
 80087ba:	f7ff fcb9 	bl	8008130 <disk_read>
 80087be:	1e03      	subs	r3, r0, #0
 80087c0:	d005      	beq.n	80087ce <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80087c2:	2301      	movs	r3, #1
 80087c4:	425b      	negs	r3, r3
 80087c6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80087c8:	193b      	adds	r3, r7, r4
 80087ca:	2201      	movs	r2, #1
 80087cc:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80087d4:	230f      	movs	r3, #15
 80087d6:	18fb      	adds	r3, r7, r3
 80087d8:	781b      	ldrb	r3, [r3, #0]
}
 80087da:	0018      	movs	r0, r3
 80087dc:	46bd      	mov	sp, r7
 80087de:	b004      	add	sp, #16
 80087e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080087e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80087e4:	b5b0      	push	{r4, r5, r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80087ec:	250f      	movs	r5, #15
 80087ee:	197c      	adds	r4, r7, r5
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	0018      	movs	r0, r3
 80087f4:	f7ff ff78 	bl	80086e8 <sync_window>
 80087f8:	0003      	movs	r3, r0
 80087fa:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80087fc:	197b      	adds	r3, r7, r5
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d15e      	bne.n	80088c2 <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	2b03      	cmp	r3, #3
 800880a:	d14d      	bne.n	80088a8 <sync_fs+0xc4>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	791b      	ldrb	r3, [r3, #4]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d149      	bne.n	80088a8 <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3338      	adds	r3, #56	@ 0x38
 8008818:	0018      	movs	r0, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	899b      	ldrh	r3, [r3, #12]
 800881e:	001a      	movs	r2, r3
 8008820:	2100      	movs	r1, #0
 8008822:	f7ff fda0 	bl	8008366 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3338      	adds	r3, #56	@ 0x38
 800882a:	33ff      	adds	r3, #255	@ 0xff
 800882c:	33ff      	adds	r3, #255	@ 0xff
 800882e:	4a28      	ldr	r2, [pc, #160]	@ (80088d0 <sync_fs+0xec>)
 8008830:	0011      	movs	r1, r2
 8008832:	0018      	movs	r0, r3
 8008834:	f7ff fd30 	bl	8008298 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	3338      	adds	r3, #56	@ 0x38
 800883c:	4a25      	ldr	r2, [pc, #148]	@ (80088d4 <sync_fs+0xf0>)
 800883e:	0011      	movs	r1, r2
 8008840:	0018      	movs	r0, r3
 8008842:	f7ff fd47 	bl	80082d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3338      	adds	r3, #56	@ 0x38
 800884a:	33e5      	adds	r3, #229	@ 0xe5
 800884c:	33ff      	adds	r3, #255	@ 0xff
 800884e:	4a22      	ldr	r2, [pc, #136]	@ (80088d8 <sync_fs+0xf4>)
 8008850:	0011      	movs	r1, r2
 8008852:	0018      	movs	r0, r3
 8008854:	f7ff fd3e 	bl	80082d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3338      	adds	r3, #56	@ 0x38
 800885c:	33e9      	adds	r3, #233	@ 0xe9
 800885e:	33ff      	adds	r3, #255	@ 0xff
 8008860:	001a      	movs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	0019      	movs	r1, r3
 8008868:	0010      	movs	r0, r2
 800886a:	f7ff fd33 	bl	80082d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3338      	adds	r3, #56	@ 0x38
 8008872:	33ed      	adds	r3, #237	@ 0xed
 8008874:	33ff      	adds	r3, #255	@ 0xff
 8008876:	001a      	movs	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	0019      	movs	r1, r3
 800887e:	0010      	movs	r0, r2
 8008880:	f7ff fd28 	bl	80082d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7858      	ldrb	r0, [r3, #1]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3338      	adds	r3, #56	@ 0x38
 8008896:	0019      	movs	r1, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800889c:	2301      	movs	r3, #1
 800889e:	f7ff fc6f 	bl	8008180 <disk_write>
			fs->fsi_flag = 0;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	2200      	movs	r2, #0
 80088ae:	2100      	movs	r1, #0
 80088b0:	0018      	movs	r0, r3
 80088b2:	f7ff fc8d 	bl	80081d0 <disk_ioctl>
 80088b6:	1e03      	subs	r3, r0, #0
 80088b8:	d003      	beq.n	80088c2 <sync_fs+0xde>
 80088ba:	230f      	movs	r3, #15
 80088bc:	18fb      	adds	r3, r7, r3
 80088be:	2201      	movs	r2, #1
 80088c0:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80088c2:	230f      	movs	r3, #15
 80088c4:	18fb      	adds	r3, r7, r3
 80088c6:	781b      	ldrb	r3, [r3, #0]
}
 80088c8:	0018      	movs	r0, r3
 80088ca:	46bd      	mov	sp, r7
 80088cc:	b004      	add	sp, #16
 80088ce:	bdb0      	pop	{r4, r5, r7, pc}
 80088d0:	0000aa55 	.word	0x0000aa55
 80088d4:	41615252 	.word	0x41615252
 80088d8:	61417272 	.word	0x61417272

080088dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	3b02      	subs	r3, #2
 80088ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	3b02      	subs	r3, #2
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d301      	bcc.n	80088fc <clust2sect+0x20>
 80088f8:	2300      	movs	r3, #0
 80088fa:	e007      	b.n	800890c <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	895b      	ldrh	r3, [r3, #10]
 8008900:	001a      	movs	r2, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	435a      	muls	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800890a:	18d3      	adds	r3, r2, r3
}
 800890c:	0018      	movs	r0, r3
 800890e:	46bd      	mov	sp, r7
 8008910:	b002      	add	sp, #8
 8008912:	bd80      	pop	{r7, pc}

08008914 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008914:	b590      	push	{r4, r7, lr}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d904      	bls.n	8008934 <get_fat+0x20>
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	429a      	cmp	r2, r3
 8008932:	d302      	bcc.n	800893a <get_fat+0x26>
		val = 1;	/* Internal error */
 8008934:	2301      	movs	r3, #1
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	e0c1      	b.n	8008abe <get_fat+0x1aa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800893a:	2301      	movs	r3, #1
 800893c:	425b      	negs	r3, r3
 800893e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b03      	cmp	r3, #3
 8008946:	d100      	bne.n	800894a <get_fat+0x36>
 8008948:	e087      	b.n	8008a5a <get_fat+0x146>
 800894a:	dd00      	ble.n	800894e <get_fat+0x3a>
 800894c:	e0ad      	b.n	8008aaa <get_fat+0x196>
 800894e:	2b01      	cmp	r3, #1
 8008950:	d002      	beq.n	8008958 <get_fat+0x44>
 8008952:	2b02      	cmp	r3, #2
 8008954:	d05b      	beq.n	8008a0e <get_fat+0xfa>
 8008956:	e0a8      	b.n	8008aaa <get_fat+0x196>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	085b      	lsrs	r3, r3, #1
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	18d3      	adds	r3, r2, r3
 8008964:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	899b      	ldrh	r3, [r3, #12]
 800896e:	0019      	movs	r1, r3
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f7f7 fbe5 	bl	8000140 <__udivsi3>
 8008976:	0003      	movs	r3, r0
 8008978:	18e2      	adds	r2, r4, r3
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	0011      	movs	r1, r2
 800897e:	0018      	movs	r0, r3
 8008980:	f7ff fefa 	bl	8008778 <move_window>
 8008984:	1e03      	subs	r3, r0, #0
 8008986:	d000      	beq.n	800898a <get_fat+0x76>
 8008988:	e092      	b.n	8008ab0 <get_fat+0x19c>
			wc = fs->win[bc++ % SS(fs)];
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	60fa      	str	r2, [r7, #12]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	8992      	ldrh	r2, [r2, #12]
 8008994:	0011      	movs	r1, r2
 8008996:	0018      	movs	r0, r3
 8008998:	f7f7 fc58 	bl	800024c <__aeabi_uidivmod>
 800899c:	000b      	movs	r3, r1
 800899e:	0019      	movs	r1, r3
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2238      	movs	r2, #56	@ 0x38
 80089a4:	185b      	adds	r3, r3, r1
 80089a6:	189b      	adds	r3, r3, r2
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	899b      	ldrh	r3, [r3, #12]
 80089b4:	0019      	movs	r1, r3
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f7f7 fbc2 	bl	8000140 <__udivsi3>
 80089bc:	0003      	movs	r3, r0
 80089be:	18e2      	adds	r2, r4, r3
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	0011      	movs	r1, r2
 80089c4:	0018      	movs	r0, r3
 80089c6:	f7ff fed7 	bl	8008778 <move_window>
 80089ca:	1e03      	subs	r3, r0, #0
 80089cc:	d000      	beq.n	80089d0 <get_fat+0xbc>
 80089ce:	e071      	b.n	8008ab4 <get_fat+0x1a0>
			wc |= fs->win[bc % SS(fs)] << 8;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	899b      	ldrh	r3, [r3, #12]
 80089d4:	001a      	movs	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	0011      	movs	r1, r2
 80089da:	0018      	movs	r0, r3
 80089dc:	f7f7 fc36 	bl	800024c <__aeabi_uidivmod>
 80089e0:	000b      	movs	r3, r1
 80089e2:	0019      	movs	r1, r3
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2238      	movs	r2, #56	@ 0x38
 80089e8:	185b      	adds	r3, r3, r1
 80089ea:	189b      	adds	r3, r3, r2
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	021b      	lsls	r3, r3, #8
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2201      	movs	r2, #1
 80089fa:	4013      	ands	r3, r2
 80089fc:	d002      	beq.n	8008a04 <get_fat+0xf0>
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	091b      	lsrs	r3, r3, #4
 8008a02:	e002      	b.n	8008a0a <get_fat+0xf6>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	051b      	lsls	r3, r3, #20
 8008a08:	0d1b      	lsrs	r3, r3, #20
 8008a0a:	617b      	str	r3, [r7, #20]
			break;
 8008a0c:	e057      	b.n	8008abe <get_fat+0x1aa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	899b      	ldrh	r3, [r3, #12]
 8008a16:	085b      	lsrs	r3, r3, #1
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	0019      	movs	r1, r3
 8008a1c:	6838      	ldr	r0, [r7, #0]
 8008a1e:	f7f7 fb8f 	bl	8000140 <__udivsi3>
 8008a22:	0003      	movs	r3, r0
 8008a24:	18e2      	adds	r2, r4, r3
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	0011      	movs	r1, r2
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	f7ff fea4 	bl	8008778 <move_window>
 8008a30:	1e03      	subs	r3, r0, #0
 8008a32:	d141      	bne.n	8008ab8 <get_fat+0x1a4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	3338      	adds	r3, #56	@ 0x38
 8008a38:	001c      	movs	r4, r3
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	005a      	lsls	r2, r3, #1
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	899b      	ldrh	r3, [r3, #12]
 8008a42:	0019      	movs	r1, r3
 8008a44:	0010      	movs	r0, r2
 8008a46:	f7f7 fc01 	bl	800024c <__aeabi_uidivmod>
 8008a4a:	000b      	movs	r3, r1
 8008a4c:	18e3      	adds	r3, r4, r3
 8008a4e:	0018      	movs	r0, r3
 8008a50:	f7ff fbe6 	bl	8008220 <ld_word>
 8008a54:	0003      	movs	r3, r0
 8008a56:	617b      	str	r3, [r7, #20]
			break;
 8008a58:	e031      	b.n	8008abe <get_fat+0x1aa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	899b      	ldrh	r3, [r3, #12]
 8008a62:	089b      	lsrs	r3, r3, #2
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	0019      	movs	r1, r3
 8008a68:	6838      	ldr	r0, [r7, #0]
 8008a6a:	f7f7 fb69 	bl	8000140 <__udivsi3>
 8008a6e:	0003      	movs	r3, r0
 8008a70:	18e2      	adds	r2, r4, r3
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	0011      	movs	r1, r2
 8008a76:	0018      	movs	r0, r3
 8008a78:	f7ff fe7e 	bl	8008778 <move_window>
 8008a7c:	1e03      	subs	r3, r0, #0
 8008a7e:	d11d      	bne.n	8008abc <get_fat+0x1a8>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	3338      	adds	r3, #56	@ 0x38
 8008a84:	001c      	movs	r4, r3
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	009a      	lsls	r2, r3, #2
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	899b      	ldrh	r3, [r3, #12]
 8008a8e:	0019      	movs	r1, r3
 8008a90:	0010      	movs	r0, r2
 8008a92:	f7f7 fbdb 	bl	800024c <__aeabi_uidivmod>
 8008a96:	000b      	movs	r3, r1
 8008a98:	18e3      	adds	r3, r4, r3
 8008a9a:	0018      	movs	r0, r3
 8008a9c:	f7ff fbdb 	bl	8008256 <ld_dword>
 8008aa0:	0003      	movs	r3, r0
 8008aa2:	011b      	lsls	r3, r3, #4
 8008aa4:	091b      	lsrs	r3, r3, #4
 8008aa6:	617b      	str	r3, [r7, #20]
			break;
 8008aa8:	e009      	b.n	8008abe <get_fat+0x1aa>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008aaa:	2301      	movs	r3, #1
 8008aac:	617b      	str	r3, [r7, #20]
 8008aae:	e006      	b.n	8008abe <get_fat+0x1aa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ab0:	46c0      	nop			@ (mov r8, r8)
 8008ab2:	e004      	b.n	8008abe <get_fat+0x1aa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ab4:	46c0      	nop			@ (mov r8, r8)
 8008ab6:	e002      	b.n	8008abe <get_fat+0x1aa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ab8:	46c0      	nop			@ (mov r8, r8)
 8008aba:	e000      	b.n	8008abe <get_fat+0x1aa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008abc:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 8008abe:	697b      	ldr	r3, [r7, #20]
}
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	b007      	add	sp, #28
 8008ac6:	bd90      	pop	{r4, r7, pc}

08008ac8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008ac8:	b5b0      	push	{r4, r5, r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008ad4:	231f      	movs	r3, #31
 8008ad6:	18fb      	adds	r3, r7, r3
 8008ad8:	2202      	movs	r2, #2
 8008ada:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d800      	bhi.n	8008ae4 <put_fat+0x1c>
 8008ae2:	e11a      	b.n	8008d1a <put_fat+0x252>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d300      	bcc.n	8008af0 <put_fat+0x28>
 8008aee:	e114      	b.n	8008d1a <put_fat+0x252>
		switch (fs->fs_type) {
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d100      	bne.n	8008afa <put_fat+0x32>
 8008af8:	e0c1      	b.n	8008c7e <put_fat+0x1b6>
 8008afa:	dd00      	ble.n	8008afe <put_fat+0x36>
 8008afc:	e10d      	b.n	8008d1a <put_fat+0x252>
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d003      	beq.n	8008b0a <put_fat+0x42>
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d100      	bne.n	8008b08 <put_fat+0x40>
 8008b06:	e08a      	b.n	8008c1e <put_fat+0x156>
 8008b08:	e107      	b.n	8008d1a <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	61bb      	str	r3, [r7, #24]
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	085b      	lsrs	r3, r3, #1
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	18d3      	adds	r3, r2, r3
 8008b16:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	899b      	ldrh	r3, [r3, #12]
 8008b20:	0019      	movs	r1, r3
 8008b22:	69b8      	ldr	r0, [r7, #24]
 8008b24:	f7f7 fb0c 	bl	8000140 <__udivsi3>
 8008b28:	0003      	movs	r3, r0
 8008b2a:	18e2      	adds	r2, r4, r3
 8008b2c:	251f      	movs	r5, #31
 8008b2e:	197c      	adds	r4, r7, r5
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	0011      	movs	r1, r2
 8008b34:	0018      	movs	r0, r3
 8008b36:	f7ff fe1f 	bl	8008778 <move_window>
 8008b3a:	0003      	movs	r3, r0
 8008b3c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8008b3e:	197b      	adds	r3, r7, r5
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d000      	beq.n	8008b48 <put_fat+0x80>
 8008b46:	e0e1      	b.n	8008d0c <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	3338      	adds	r3, #56	@ 0x38
 8008b4c:	001c      	movs	r4, r3
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	1c5a      	adds	r2, r3, #1
 8008b52:	61ba      	str	r2, [r7, #24]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	8992      	ldrh	r2, [r2, #12]
 8008b58:	0011      	movs	r1, r2
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	f7f7 fb76 	bl	800024c <__aeabi_uidivmod>
 8008b60:	000b      	movs	r3, r1
 8008b62:	18e3      	adds	r3, r4, r3
 8008b64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	d00d      	beq.n	8008b8a <put_fat+0xc2>
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	b25b      	sxtb	r3, r3
 8008b74:	220f      	movs	r2, #15
 8008b76:	4013      	ands	r3, r2
 8008b78:	b25a      	sxtb	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	b25b      	sxtb	r3, r3
 8008b82:	4313      	orrs	r3, r2
 8008b84:	b25b      	sxtb	r3, r3
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	e001      	b.n	8008b8e <put_fat+0xc6>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2201      	movs	r2, #1
 8008b96:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	899b      	ldrh	r3, [r3, #12]
 8008ba0:	0019      	movs	r1, r3
 8008ba2:	69b8      	ldr	r0, [r7, #24]
 8008ba4:	f7f7 facc 	bl	8000140 <__udivsi3>
 8008ba8:	0003      	movs	r3, r0
 8008baa:	18e2      	adds	r2, r4, r3
 8008bac:	251f      	movs	r5, #31
 8008bae:	197c      	adds	r4, r7, r5
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	0011      	movs	r1, r2
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f7ff fddf 	bl	8008778 <move_window>
 8008bba:	0003      	movs	r3, r0
 8008bbc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8008bbe:	197b      	adds	r3, r7, r5
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d000      	beq.n	8008bc8 <put_fat+0x100>
 8008bc6:	e0a3      	b.n	8008d10 <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	3338      	adds	r3, #56	@ 0x38
 8008bcc:	001c      	movs	r4, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	899b      	ldrh	r3, [r3, #12]
 8008bd2:	001a      	movs	r2, r3
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	0011      	movs	r1, r2
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f7f7 fb37 	bl	800024c <__aeabi_uidivmod>
 8008bde:	000b      	movs	r3, r1
 8008be0:	18e3      	adds	r3, r4, r3
 8008be2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2201      	movs	r2, #1
 8008be8:	4013      	ands	r3, r2
 8008bea:	d003      	beq.n	8008bf4 <put_fat+0x12c>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	091b      	lsrs	r3, r3, #4
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	e00e      	b.n	8008c12 <put_fat+0x14a>
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	b25b      	sxtb	r3, r3
 8008bfa:	220f      	movs	r2, #15
 8008bfc:	4393      	bics	r3, r2
 8008bfe:	b25a      	sxtb	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	0a1b      	lsrs	r3, r3, #8
 8008c04:	b25b      	sxtb	r3, r3
 8008c06:	210f      	movs	r1, #15
 8008c08:	400b      	ands	r3, r1
 8008c0a:	b25b      	sxtb	r3, r3
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	b25b      	sxtb	r3, r3
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	70da      	strb	r2, [r3, #3]
			break;
 8008c1c:	e07d      	b.n	8008d1a <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	899b      	ldrh	r3, [r3, #12]
 8008c26:	085b      	lsrs	r3, r3, #1
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	0019      	movs	r1, r3
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	f7f7 fa87 	bl	8000140 <__udivsi3>
 8008c32:	0003      	movs	r3, r0
 8008c34:	18e2      	adds	r2, r4, r3
 8008c36:	251f      	movs	r5, #31
 8008c38:	197c      	adds	r4, r7, r5
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	0011      	movs	r1, r2
 8008c3e:	0018      	movs	r0, r3
 8008c40:	f7ff fd9a 	bl	8008778 <move_window>
 8008c44:	0003      	movs	r3, r0
 8008c46:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8008c48:	197b      	adds	r3, r7, r5
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d161      	bne.n	8008d14 <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3338      	adds	r3, #56	@ 0x38
 8008c54:	001c      	movs	r4, r3
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	005a      	lsls	r2, r3, #1
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	899b      	ldrh	r3, [r3, #12]
 8008c5e:	0019      	movs	r1, r3
 8008c60:	0010      	movs	r0, r2
 8008c62:	f7f7 faf3 	bl	800024c <__aeabi_uidivmod>
 8008c66:	000b      	movs	r3, r1
 8008c68:	18e3      	adds	r3, r4, r3
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	b292      	uxth	r2, r2
 8008c6e:	0011      	movs	r1, r2
 8008c70:	0018      	movs	r0, r3
 8008c72:	f7ff fb11 	bl	8008298 <st_word>
			fs->wflag = 1;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	70da      	strb	r2, [r3, #3]
			break;
 8008c7c:	e04d      	b.n	8008d1a <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	899b      	ldrh	r3, [r3, #12]
 8008c86:	089b      	lsrs	r3, r3, #2
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	0019      	movs	r1, r3
 8008c8c:	68b8      	ldr	r0, [r7, #8]
 8008c8e:	f7f7 fa57 	bl	8000140 <__udivsi3>
 8008c92:	0003      	movs	r3, r0
 8008c94:	18e2      	adds	r2, r4, r3
 8008c96:	251f      	movs	r5, #31
 8008c98:	197c      	adds	r4, r7, r5
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	0011      	movs	r1, r2
 8008c9e:	0018      	movs	r0, r3
 8008ca0:	f7ff fd6a 	bl	8008778 <move_window>
 8008ca4:	0003      	movs	r3, r0
 8008ca6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8008ca8:	197b      	adds	r3, r7, r5
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d133      	bne.n	8008d18 <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	011b      	lsls	r3, r3, #4
 8008cb4:	091c      	lsrs	r4, r3, #4
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3338      	adds	r3, #56	@ 0x38
 8008cba:	001d      	movs	r5, r3
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	009a      	lsls	r2, r3, #2
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	899b      	ldrh	r3, [r3, #12]
 8008cc4:	0019      	movs	r1, r3
 8008cc6:	0010      	movs	r0, r2
 8008cc8:	f7f7 fac0 	bl	800024c <__aeabi_uidivmod>
 8008ccc:	000b      	movs	r3, r1
 8008cce:	18eb      	adds	r3, r5, r3
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f7ff fac0 	bl	8008256 <ld_dword>
 8008cd6:	0003      	movs	r3, r0
 8008cd8:	0f1b      	lsrs	r3, r3, #28
 8008cda:	071b      	lsls	r3, r3, #28
 8008cdc:	4323      	orrs	r3, r4
 8008cde:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	3338      	adds	r3, #56	@ 0x38
 8008ce4:	001c      	movs	r4, r3
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	009a      	lsls	r2, r3, #2
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	899b      	ldrh	r3, [r3, #12]
 8008cee:	0019      	movs	r1, r3
 8008cf0:	0010      	movs	r0, r2
 8008cf2:	f7f7 faab 	bl	800024c <__aeabi_uidivmod>
 8008cf6:	000b      	movs	r3, r1
 8008cf8:	18e3      	adds	r3, r4, r3
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	0011      	movs	r1, r2
 8008cfe:	0018      	movs	r0, r3
 8008d00:	f7ff fae8 	bl	80082d4 <st_dword>
			fs->wflag = 1;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2201      	movs	r2, #1
 8008d08:	70da      	strb	r2, [r3, #3]
			break;
 8008d0a:	e006      	b.n	8008d1a <put_fat+0x252>
			if (res != FR_OK) break;
 8008d0c:	46c0      	nop			@ (mov r8, r8)
 8008d0e:	e004      	b.n	8008d1a <put_fat+0x252>
			if (res != FR_OK) break;
 8008d10:	46c0      	nop			@ (mov r8, r8)
 8008d12:	e002      	b.n	8008d1a <put_fat+0x252>
			if (res != FR_OK) break;
 8008d14:	46c0      	nop			@ (mov r8, r8)
 8008d16:	e000      	b.n	8008d1a <put_fat+0x252>
			if (res != FR_OK) break;
 8008d18:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 8008d1a:	231f      	movs	r3, #31
 8008d1c:	18fb      	adds	r3, r7, r3
 8008d1e:	781b      	ldrb	r3, [r3, #0]
}
 8008d20:	0018      	movs	r0, r3
 8008d22:	46bd      	mov	sp, r7
 8008d24:	b008      	add	sp, #32
 8008d26:	bdb0      	pop	{r4, r5, r7, pc}

08008d28 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008d28:	b5b0      	push	{r4, r5, r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008d34:	231f      	movs	r3, #31
 8008d36:	18fb      	adds	r3, r7, r3
 8008d38:	2200      	movs	r2, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d904      	bls.n	8008d52 <remove_chain+0x2a>
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	69db      	ldr	r3, [r3, #28]
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d301      	bcc.n	8008d56 <remove_chain+0x2e>
 8008d52:	2302      	movs	r3, #2
 8008d54:	e057      	b.n	8008e06 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d011      	beq.n	8008d80 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008d5c:	251f      	movs	r5, #31
 8008d5e:	197c      	adds	r4, r7, r5
 8008d60:	2301      	movs	r3, #1
 8008d62:	425a      	negs	r2, r3
 8008d64:	6879      	ldr	r1, [r7, #4]
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	0018      	movs	r0, r3
 8008d6a:	f7ff fead 	bl	8008ac8 <put_fat>
 8008d6e:	0003      	movs	r3, r0
 8008d70:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8008d72:	197b      	adds	r3, r7, r5
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <remove_chain+0x58>
 8008d7a:	197b      	adds	r3, r7, r5
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	e042      	b.n	8008e06 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	0011      	movs	r1, r2
 8008d86:	0018      	movs	r0, r3
 8008d88:	f7ff fdc4 	bl	8008914 <get_fat>
 8008d8c:	0003      	movs	r3, r0
 8008d8e:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d035      	beq.n	8008e02 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d101      	bne.n	8008da0 <remove_chain+0x78>
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e032      	b.n	8008e06 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	3301      	adds	r3, #1
 8008da4:	d101      	bne.n	8008daa <remove_chain+0x82>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e02d      	b.n	8008e06 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008daa:	251f      	movs	r5, #31
 8008dac:	197c      	adds	r4, r7, r5
 8008dae:	68b9      	ldr	r1, [r7, #8]
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	2200      	movs	r2, #0
 8008db4:	0018      	movs	r0, r3
 8008db6:	f7ff fe87 	bl	8008ac8 <put_fat>
 8008dba:	0003      	movs	r3, r0
 8008dbc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8008dbe:	197b      	adds	r3, r7, r5
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d002      	beq.n	8008dcc <remove_chain+0xa4>
 8008dc6:	197b      	adds	r3, r7, r5
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	e01c      	b.n	8008e06 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	699a      	ldr	r2, [r3, #24]
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	3b02      	subs	r3, #2
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d20b      	bcs.n	8008df2 <remove_chain+0xca>
			fs->free_clst++;
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	791b      	ldrb	r3, [r3, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	4313      	orrs	r3, r2
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d3bf      	bcc.n	8008d80 <remove_chain+0x58>
 8008e00:	e000      	b.n	8008e04 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8008e02:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	0018      	movs	r0, r3
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	b008      	add	sp, #32
 8008e0c:	bdb0      	pop	{r4, r5, r7, pc}

08008e0e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008e0e:	b5b0      	push	{r4, r5, r7, lr}
 8008e10:	b088      	sub	sp, #32
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10d      	bne.n	8008e40 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	695b      	ldr	r3, [r3, #20]
 8008e28:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d004      	beq.n	8008e3a <create_chain+0x2c>
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d31d      	bcc.n	8008e76 <create_chain+0x68>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	61bb      	str	r3, [r7, #24]
 8008e3e:	e01a      	b.n	8008e76 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008e40:	683a      	ldr	r2, [r7, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	0011      	movs	r1, r2
 8008e46:	0018      	movs	r0, r3
 8008e48:	f7ff fd64 	bl	8008914 <get_fat>
 8008e4c:	0003      	movs	r3, r0
 8008e4e:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d801      	bhi.n	8008e5a <create_chain+0x4c>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e07b      	b.n	8008f52 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	d101      	bne.n	8008e64 <create_chain+0x56>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	e076      	b.n	8008f52 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d201      	bcs.n	8008e72 <create_chain+0x64>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	e06f      	b.n	8008f52 <create_chain+0x144>
		scl = clst;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	69fa      	ldr	r2, [r7, #28]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d307      	bcc.n	8008e9a <create_chain+0x8c>
				ncl = 2;
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d901      	bls.n	8008e9a <create_chain+0x8c>
 8008e96:	2300      	movs	r3, #0
 8008e98:	e05b      	b.n	8008f52 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008e9a:	69fa      	ldr	r2, [r7, #28]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	0011      	movs	r1, r2
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7ff fd37 	bl	8008914 <get_fat>
 8008ea6:	0003      	movs	r3, r0
 8008ea8:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00d      	beq.n	8008ecc <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d002      	beq.n	8008ebc <create_chain+0xae>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	d101      	bne.n	8008ec0 <create_chain+0xb2>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	e048      	b.n	8008f52 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 8008ec0:	69fa      	ldr	r2, [r7, #28]
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d1d8      	bne.n	8008e7a <create_chain+0x6c>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e042      	b.n	8008f52 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8008ecc:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008ece:	2517      	movs	r5, #23
 8008ed0:	197c      	adds	r4, r7, r5
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	425a      	negs	r2, r3
 8008ed6:	69f9      	ldr	r1, [r7, #28]
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	0018      	movs	r0, r3
 8008edc:	f7ff fdf4 	bl	8008ac8 <put_fat>
 8008ee0:	0003      	movs	r3, r0
 8008ee2:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 8008ee4:	197b      	adds	r3, r7, r5
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10b      	bne.n	8008f04 <create_chain+0xf6>
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d008      	beq.n	8008f04 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008ef2:	197c      	adds	r4, r7, r5
 8008ef4:	69fa      	ldr	r2, [r7, #28]
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	0018      	movs	r0, r3
 8008efc:	f7ff fde4 	bl	8008ac8 <put_fat>
 8008f00:	0003      	movs	r3, r0
 8008f02:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008f04:	2317      	movs	r3, #23
 8008f06:	18fb      	adds	r3, r7, r3
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d116      	bne.n	8008f3c <create_chain+0x12e>
		fs->last_clst = ncl;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	69fa      	ldr	r2, [r7, #28]
 8008f12:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	699a      	ldr	r2, [r3, #24]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	3b02      	subs	r3, #2
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d804      	bhi.n	8008f2c <create_chain+0x11e>
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	1e5a      	subs	r2, r3, #1
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	791b      	ldrb	r3, [r3, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	4313      	orrs	r3, r2
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	711a      	strb	r2, [r3, #4]
 8008f3a:	e009      	b.n	8008f50 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008f3c:	2317      	movs	r3, #23
 8008f3e:	18fb      	adds	r3, r7, r3
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d102      	bne.n	8008f4c <create_chain+0x13e>
 8008f46:	2301      	movs	r3, #1
 8008f48:	425b      	negs	r3, r3
 8008f4a:	e000      	b.n	8008f4e <create_chain+0x140>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008f50:	69fb      	ldr	r3, [r7, #28]
}
 8008f52:	0018      	movs	r0, r3
 8008f54:	46bd      	mov	sp, r7
 8008f56:	b008      	add	sp, #32
 8008f58:	bdb0      	pop	{r4, r5, r7, pc}

08008f5a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b086      	sub	sp, #24
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6e:	3304      	adds	r3, #4
 8008f70:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	899b      	ldrh	r3, [r3, #12]
 8008f76:	0019      	movs	r1, r3
 8008f78:	6838      	ldr	r0, [r7, #0]
 8008f7a:	f7f7 f8e1 	bl	8000140 <__udivsi3>
 8008f7e:	0003      	movs	r3, r0
 8008f80:	001a      	movs	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	895b      	ldrh	r3, [r3, #10]
 8008f86:	0019      	movs	r1, r3
 8008f88:	0010      	movs	r0, r2
 8008f8a:	f7f7 f8d9 	bl	8000140 <__udivsi3>
 8008f8e:	0003      	movs	r3, r0
 8008f90:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	1d1a      	adds	r2, r3, #4
 8008f96:	613a      	str	r2, [r7, #16]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <clmt_clust+0x4c>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e010      	b.n	8008fc8 <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d307      	bcc.n	8008fbe <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	617b      	str	r3, [r7, #20]
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008fbc:	e7e9      	b.n	8008f92 <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 8008fbe:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	18d3      	adds	r3, r2, r3
}
 8008fc8:	0018      	movs	r0, r3
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	b006      	add	sp, #24
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008fd0:	b590      	push	{r4, r7, lr}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	2380      	movs	r3, #128	@ 0x80
 8008fe4:	039b      	lsls	r3, r3, #14
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d203      	bcs.n	8008ff2 <dir_sdi+0x22>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	221f      	movs	r2, #31
 8008fee:	4013      	ands	r3, r2
 8008ff0:	d001      	beq.n	8008ff6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	e074      	b.n	80090e0 <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d106      	bne.n	8009016 <dir_sdi+0x46>
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2b02      	cmp	r3, #2
 800900e:	d902      	bls.n	8009016 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009014:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10c      	bne.n	8009036 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	095b      	lsrs	r3, r3, #5
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	8912      	ldrh	r2, [r2, #8]
 8009024:	4293      	cmp	r3, r2
 8009026:	d301      	bcc.n	800902c <dir_sdi+0x5c>
 8009028:	2302      	movs	r3, #2
 800902a:	e059      	b.n	80090e0 <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	61da      	str	r2, [r3, #28]
 8009034:	e02f      	b.n	8009096 <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	895b      	ldrh	r3, [r3, #10]
 800903a:	001a      	movs	r2, r3
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	899b      	ldrh	r3, [r3, #12]
 8009040:	4353      	muls	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009044:	e01a      	b.n	800907c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	0011      	movs	r1, r2
 800904c:	0018      	movs	r0, r3
 800904e:	f7ff fc61 	bl	8008914 <get_fat>
 8009052:	0003      	movs	r3, r0
 8009054:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	3301      	adds	r3, #1
 800905a:	d101      	bne.n	8009060 <dir_sdi+0x90>
 800905c:	2301      	movs	r3, #1
 800905e:	e03f      	b.n	80090e0 <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d904      	bls.n	8009070 <dir_sdi+0xa0>
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	429a      	cmp	r2, r3
 800906e:	d301      	bcc.n	8009074 <dir_sdi+0xa4>
 8009070:	2302      	movs	r3, #2
 8009072:	e035      	b.n	80090e0 <dir_sdi+0x110>
			ofs -= csz;
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	429a      	cmp	r2, r3
 8009082:	d2e0      	bcs.n	8009046 <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	0011      	movs	r1, r2
 800908a:	0018      	movs	r0, r3
 800908c:	f7ff fc26 	bl	80088dc <clust2sect>
 8009090:	0002      	movs	r2, r0
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <dir_sdi+0xd8>
 80090a4:	2302      	movs	r3, #2
 80090a6:	e01b      	b.n	80090e0 <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	69dc      	ldr	r4, [r3, #28]
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	899b      	ldrh	r3, [r3, #12]
 80090b0:	0019      	movs	r1, r3
 80090b2:	6838      	ldr	r0, [r7, #0]
 80090b4:	f7f7 f844 	bl	8000140 <__udivsi3>
 80090b8:	0003      	movs	r3, r0
 80090ba:	18e2      	adds	r2, r4, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	3338      	adds	r3, #56	@ 0x38
 80090c4:	001c      	movs	r4, r3
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	899b      	ldrh	r3, [r3, #12]
 80090ca:	001a      	movs	r2, r3
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	0011      	movs	r1, r2
 80090d0:	0018      	movs	r0, r3
 80090d2:	f7f7 f8bb 	bl	800024c <__aeabi_uidivmod>
 80090d6:	000b      	movs	r3, r1
 80090d8:	18e2      	adds	r2, r4, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	0018      	movs	r0, r3
 80090e2:	46bd      	mov	sp, r7
 80090e4:	b007      	add	sp, #28
 80090e6:	bd90      	pop	{r4, r7, pc}

080090e8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80090e8:	b590      	push	{r4, r7, lr}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	3320      	adds	r3, #32
 80090fe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d004      	beq.n	8009112 <dir_next+0x2a>
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	2380      	movs	r3, #128	@ 0x80
 800910c:	039b      	lsls	r3, r3, #14
 800910e:	429a      	cmp	r2, r3
 8009110:	d301      	bcc.n	8009116 <dir_next+0x2e>
 8009112:	2304      	movs	r3, #4
 8009114:	e0c0      	b.n	8009298 <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	899b      	ldrh	r3, [r3, #12]
 800911a:	001a      	movs	r2, r3
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	0011      	movs	r1, r2
 8009120:	0018      	movs	r0, r3
 8009122:	f7f7 f893 	bl	800024c <__aeabi_uidivmod>
 8009126:	1e0b      	subs	r3, r1, #0
 8009128:	d000      	beq.n	800912c <dir_next+0x44>
 800912a:	e0a2      	b.n	8009272 <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	1c5a      	adds	r2, r3, #1
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10b      	bne.n	8009156 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	095b      	lsrs	r3, r3, #5
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	8912      	ldrh	r2, [r2, #8]
 8009146:	4293      	cmp	r3, r2
 8009148:	d200      	bcs.n	800914c <dir_next+0x64>
 800914a:	e092      	b.n	8009272 <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	61da      	str	r2, [r3, #28]
 8009152:	2304      	movs	r3, #4
 8009154:	e0a0      	b.n	8009298 <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	899b      	ldrh	r3, [r3, #12]
 800915a:	0019      	movs	r1, r3
 800915c:	68b8      	ldr	r0, [r7, #8]
 800915e:	f7f6 ffef 	bl	8000140 <__udivsi3>
 8009162:	0003      	movs	r3, r0
 8009164:	001a      	movs	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	895b      	ldrh	r3, [r3, #10]
 800916a:	3b01      	subs	r3, #1
 800916c:	4013      	ands	r3, r2
 800916e:	d000      	beq.n	8009172 <dir_next+0x8a>
 8009170:	e07f      	b.n	8009272 <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	0019      	movs	r1, r3
 800917a:	0010      	movs	r0, r2
 800917c:	f7ff fbca 	bl	8008914 <get_fat>
 8009180:	0003      	movs	r3, r0
 8009182:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d801      	bhi.n	800918e <dir_next+0xa6>
 800918a:	2302      	movs	r3, #2
 800918c:	e084      	b.n	8009298 <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	3301      	adds	r3, #1
 8009192:	d101      	bne.n	8009198 <dir_next+0xb0>
 8009194:	2301      	movs	r3, #1
 8009196:	e07f      	b.n	8009298 <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d35b      	bcc.n	800925a <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d104      	bne.n	80091b2 <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	61da      	str	r2, [r3, #28]
 80091ae:	2304      	movs	r3, #4
 80091b0:	e072      	b.n	8009298 <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	0019      	movs	r1, r3
 80091ba:	0010      	movs	r0, r2
 80091bc:	f7ff fe27 	bl	8008e0e <create_chain>
 80091c0:	0003      	movs	r3, r0
 80091c2:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <dir_next+0xe6>
 80091ca:	2307      	movs	r3, #7
 80091cc:	e064      	b.n	8009298 <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d101      	bne.n	80091d8 <dir_next+0xf0>
 80091d4:	2302      	movs	r3, #2
 80091d6:	e05f      	b.n	8009298 <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	3301      	adds	r3, #1
 80091dc:	d101      	bne.n	80091e2 <dir_next+0xfa>
 80091de:	2301      	movs	r3, #1
 80091e0:	e05a      	b.n	8009298 <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	0018      	movs	r0, r3
 80091e6:	f7ff fa7f 	bl	80086e8 <sync_window>
 80091ea:	1e03      	subs	r3, r0, #0
 80091ec:	d001      	beq.n	80091f2 <dir_next+0x10a>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e052      	b.n	8009298 <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3338      	adds	r3, #56	@ 0x38
 80091f6:	0018      	movs	r0, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	899b      	ldrh	r3, [r3, #12]
 80091fc:	001a      	movs	r2, r3
 80091fe:	2100      	movs	r1, #0
 8009200:	f7ff f8b1 	bl	8008366 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009204:	2300      	movs	r3, #0
 8009206:	613b      	str	r3, [r7, #16]
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	0011      	movs	r1, r2
 800920e:	0018      	movs	r0, r3
 8009210:	f7ff fb64 	bl	80088dc <clust2sect>
 8009214:	0002      	movs	r2, r0
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	635a      	str	r2, [r3, #52]	@ 0x34
 800921a:	e012      	b.n	8009242 <dir_next+0x15a>
						fs->wflag = 1;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2201      	movs	r2, #1
 8009220:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	0018      	movs	r0, r3
 8009226:	f7ff fa5f 	bl	80086e8 <sync_window>
 800922a:	1e03      	subs	r3, r0, #0
 800922c:	d001      	beq.n	8009232 <dir_next+0x14a>
 800922e:	2301      	movs	r3, #1
 8009230:	e032      	b.n	8009298 <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	3301      	adds	r3, #1
 8009236:	613b      	str	r3, [r7, #16]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	635a      	str	r2, [r3, #52]	@ 0x34
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	895b      	ldrh	r3, [r3, #10]
 8009246:	001a      	movs	r2, r3
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	4293      	cmp	r3, r2
 800924c:	d3e6      	bcc.n	800921c <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	1ad2      	subs	r2, r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	0011      	movs	r1, r2
 8009266:	0018      	movs	r0, r3
 8009268:	f7ff fb38 	bl	80088dc <clust2sect>
 800926c:	0002      	movs	r2, r0
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3338      	adds	r3, #56	@ 0x38
 800927c:	001c      	movs	r4, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	899b      	ldrh	r3, [r3, #12]
 8009282:	001a      	movs	r2, r3
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	0011      	movs	r1, r2
 8009288:	0018      	movs	r0, r3
 800928a:	f7f6 ffdf 	bl	800024c <__aeabi_uidivmod>
 800928e:	000b      	movs	r3, r1
 8009290:	18e2      	adds	r2, r4, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	0018      	movs	r0, r3
 800929a:	46bd      	mov	sp, r7
 800929c:	b007      	add	sp, #28
 800929e:	bd90      	pop	{r4, r7, pc}

080092a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80092a0:	b5b0      	push	{r4, r5, r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80092b0:	2517      	movs	r5, #23
 80092b2:	197c      	adds	r4, r7, r5
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2100      	movs	r1, #0
 80092b8:	0018      	movs	r0, r3
 80092ba:	f7ff fe89 	bl	8008fd0 <dir_sdi>
 80092be:	0003      	movs	r3, r0
 80092c0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80092c2:	197b      	adds	r3, r7, r5
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d133      	bne.n	8009332 <dir_alloc+0x92>
		n = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	69da      	ldr	r2, [r3, #28]
 80092d2:	2517      	movs	r5, #23
 80092d4:	197c      	adds	r4, r7, r5
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	0011      	movs	r1, r2
 80092da:	0018      	movs	r0, r3
 80092dc:	f7ff fa4c 	bl	8008778 <move_window>
 80092e0:	0003      	movs	r3, r0
 80092e2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80092e4:	197b      	adds	r3, r7, r5
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d121      	bne.n	8009330 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a1b      	ldr	r3, [r3, #32]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2be5      	cmp	r3, #229	@ 0xe5
 80092f4:	d004      	beq.n	8009300 <dir_alloc+0x60>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d107      	bne.n	8009310 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	3301      	adds	r3, #1
 8009304:	613b      	str	r3, [r7, #16]
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	429a      	cmp	r2, r3
 800930c:	d102      	bne.n	8009314 <dir_alloc+0x74>
 800930e:	e010      	b.n	8009332 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009310:	2300      	movs	r3, #0
 8009312:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009314:	2517      	movs	r5, #23
 8009316:	197c      	adds	r4, r7, r5
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2101      	movs	r1, #1
 800931c:	0018      	movs	r0, r3
 800931e:	f7ff fee3 	bl	80090e8 <dir_next>
 8009322:	0003      	movs	r3, r0
 8009324:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009326:	197b      	adds	r3, r7, r5
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0cf      	beq.n	80092ce <dir_alloc+0x2e>
 800932e:	e000      	b.n	8009332 <dir_alloc+0x92>
			if (res != FR_OK) break;
 8009330:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009332:	2217      	movs	r2, #23
 8009334:	18bb      	adds	r3, r7, r2
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b04      	cmp	r3, #4
 800933a:	d102      	bne.n	8009342 <dir_alloc+0xa2>
 800933c:	18bb      	adds	r3, r7, r2
 800933e:	2207      	movs	r2, #7
 8009340:	701a      	strb	r2, [r3, #0]
	return res;
 8009342:	2317      	movs	r3, #23
 8009344:	18fb      	adds	r3, r7, r3
 8009346:	781b      	ldrb	r3, [r3, #0]
}
 8009348:	0018      	movs	r0, r3
 800934a:	46bd      	mov	sp, r7
 800934c:	b006      	add	sp, #24
 800934e:	bdb0      	pop	{r4, r5, r7, pc}

08009350 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	331a      	adds	r3, #26
 800935e:	0018      	movs	r0, r3
 8009360:	f7fe ff5e 	bl	8008220 <ld_word>
 8009364:	0003      	movs	r3, r0
 8009366:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b03      	cmp	r3, #3
 800936e:	d109      	bne.n	8009384 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	3314      	adds	r3, #20
 8009374:	0018      	movs	r0, r3
 8009376:	f7fe ff53 	bl	8008220 <ld_word>
 800937a:	0003      	movs	r3, r0
 800937c:	041b      	lsls	r3, r3, #16
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	4313      	orrs	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009384:	68fb      	ldr	r3, [r7, #12]
}
 8009386:	0018      	movs	r0, r3
 8009388:	46bd      	mov	sp, r7
 800938a:	b004      	add	sp, #16
 800938c:	bd80      	pop	{r7, pc}

0800938e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	60f8      	str	r0, [r7, #12]
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	331a      	adds	r3, #26
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	b292      	uxth	r2, r2
 80093a2:	0011      	movs	r1, r2
 80093a4:	0018      	movs	r0, r3
 80093a6:	f7fe ff77 	bl	8008298 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d109      	bne.n	80093c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	3314      	adds	r3, #20
 80093b6:	001a      	movs	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	0c1b      	lsrs	r3, r3, #16
 80093bc:	b29b      	uxth	r3, r3
 80093be:	0019      	movs	r1, r3
 80093c0:	0010      	movs	r0, r2
 80093c2:	f7fe ff69 	bl	8008298 <st_word>
	}
}
 80093c6:	46c0      	nop			@ (mov r8, r8)
 80093c8:	46bd      	mov	sp, r7
 80093ca:	b004      	add	sp, #16
 80093cc:	bd80      	pop	{r7, pc}
	...

080093d0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80093d0:	b5b0      	push	{r4, r5, r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	331a      	adds	r3, #26
 80093de:	0018      	movs	r0, r3
 80093e0:	f7fe ff1e 	bl	8008220 <ld_word>
 80093e4:	1e03      	subs	r3, r0, #0
 80093e6:	d001      	beq.n	80093ec <cmp_lfn+0x1c>
 80093e8:	2300      	movs	r3, #0
 80093ea:	e068      	b.n	80094be <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	001a      	movs	r2, r3
 80093f2:	233f      	movs	r3, #63	@ 0x3f
 80093f4:	4013      	ands	r3, r2
 80093f6:	1e5a      	subs	r2, r3, #1
 80093f8:	0013      	movs	r3, r2
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	189b      	adds	r3, r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	189b      	adds	r3, r3, r2
 8009402:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009404:	230e      	movs	r3, #14
 8009406:	18fb      	adds	r3, r7, r3
 8009408:	2201      	movs	r2, #1
 800940a:	801a      	strh	r2, [r3, #0]
 800940c:	2300      	movs	r3, #0
 800940e:	613b      	str	r3, [r7, #16]
 8009410:	e03d      	b.n	800948e <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009412:	4a2d      	ldr	r2, [pc, #180]	@ (80094c8 <cmp_lfn+0xf8>)
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	18d3      	adds	r3, r2, r3
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	001a      	movs	r2, r3
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	189b      	adds	r3, r3, r2
 8009420:	250c      	movs	r5, #12
 8009422:	197c      	adds	r4, r7, r5
 8009424:	0018      	movs	r0, r3
 8009426:	f7fe fefb 	bl	8008220 <ld_word>
 800942a:	0003      	movs	r3, r0
 800942c:	8023      	strh	r3, [r4, #0]
		if (wc) {
 800942e:	230e      	movs	r3, #14
 8009430:	18fb      	adds	r3, r7, r3
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d01f      	beq.n	8009478 <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2bfe      	cmp	r3, #254	@ 0xfe
 800943c:	d813      	bhi.n	8009466 <cmp_lfn+0x96>
 800943e:	197b      	adds	r3, r7, r5
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	0018      	movs	r0, r3
 8009444:	f002 f934 	bl	800b6b0 <ff_wtoupper>
 8009448:	0003      	movs	r3, r0
 800944a:	001c      	movs	r4, r3
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	617a      	str	r2, [r7, #20]
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	18d3      	adds	r3, r2, r3
 8009458:	881b      	ldrh	r3, [r3, #0]
 800945a:	0018      	movs	r0, r3
 800945c:	f002 f928 	bl	800b6b0 <ff_wtoupper>
 8009460:	0003      	movs	r3, r0
 8009462:	429c      	cmp	r4, r3
 8009464:	d001      	beq.n	800946a <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 8009466:	2300      	movs	r3, #0
 8009468:	e029      	b.n	80094be <cmp_lfn+0xee>
			}
			wc = uc;
 800946a:	230e      	movs	r3, #14
 800946c:	18fb      	adds	r3, r7, r3
 800946e:	220c      	movs	r2, #12
 8009470:	18ba      	adds	r2, r7, r2
 8009472:	8812      	ldrh	r2, [r2, #0]
 8009474:	801a      	strh	r2, [r3, #0]
 8009476:	e007      	b.n	8009488 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009478:	230c      	movs	r3, #12
 800947a:	18fb      	adds	r3, r7, r3
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	4a13      	ldr	r2, [pc, #76]	@ (80094cc <cmp_lfn+0xfc>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d001      	beq.n	8009488 <cmp_lfn+0xb8>
 8009484:	2300      	movs	r3, #0
 8009486:	e01a      	b.n	80094be <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	3301      	adds	r3, #1
 800948c:	613b      	str	r3, [r7, #16]
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	2b0c      	cmp	r3, #12
 8009492:	d9be      	bls.n	8009412 <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	001a      	movs	r2, r3
 800949a:	2340      	movs	r3, #64	@ 0x40
 800949c:	4013      	ands	r3, r2
 800949e:	d00d      	beq.n	80094bc <cmp_lfn+0xec>
 80094a0:	230e      	movs	r3, #14
 80094a2:	18fb      	adds	r3, r7, r3
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d008      	beq.n	80094bc <cmp_lfn+0xec>
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	18d3      	adds	r3, r2, r3
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d001      	beq.n	80094bc <cmp_lfn+0xec>
 80094b8:	2300      	movs	r3, #0
 80094ba:	e000      	b.n	80094be <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 80094bc:	2301      	movs	r3, #1
}
 80094be:	0018      	movs	r0, r3
 80094c0:	46bd      	mov	sp, r7
 80094c2:	b006      	add	sp, #24
 80094c4:	bdb0      	pop	{r4, r5, r7, pc}
 80094c6:	46c0      	nop			@ (mov r8, r8)
 80094c8:	080103e4 	.word	0x080103e4
 80094cc:	0000ffff 	.word	0x0000ffff

080094d0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80094d0:	b590      	push	{r4, r7, lr}
 80094d2:	b089      	sub	sp, #36	@ 0x24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	0019      	movs	r1, r3
 80094dc:	1dfb      	adds	r3, r7, #7
 80094de:	701a      	strb	r2, [r3, #0]
 80094e0:	1dbb      	adds	r3, r7, #6
 80094e2:	1c0a      	adds	r2, r1, #0
 80094e4:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	330d      	adds	r3, #13
 80094ea:	1dba      	adds	r2, r7, #6
 80094ec:	7812      	ldrb	r2, [r2, #0]
 80094ee:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	330b      	adds	r3, #11
 80094f4:	220f      	movs	r2, #15
 80094f6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	330c      	adds	r3, #12
 80094fc:	2200      	movs	r2, #0
 80094fe:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	331a      	adds	r3, #26
 8009504:	2100      	movs	r1, #0
 8009506:	0018      	movs	r0, r3
 8009508:	f7fe fec6 	bl	8008298 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800950c:	1dfb      	adds	r3, r7, #7
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	1e5a      	subs	r2, r3, #1
 8009512:	0013      	movs	r3, r2
 8009514:	005b      	lsls	r3, r3, #1
 8009516:	189b      	adds	r3, r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	189b      	adds	r3, r3, r2
 800951c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800951e:	2316      	movs	r3, #22
 8009520:	18fb      	adds	r3, r7, r3
 8009522:	2200      	movs	r2, #0
 8009524:	801a      	strh	r2, [r3, #0]
 8009526:	2300      	movs	r3, #0
 8009528:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800952a:	2116      	movs	r1, #22
 800952c:	187b      	adds	r3, r7, r1
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	4a21      	ldr	r2, [pc, #132]	@ (80095b8 <put_lfn+0xe8>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d008      	beq.n	8009548 <put_lfn+0x78>
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	1c5a      	adds	r2, r3, #1
 800953a:	61fa      	str	r2, [r7, #28]
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	18d2      	adds	r2, r2, r3
 8009542:	187b      	adds	r3, r7, r1
 8009544:	8812      	ldrh	r2, [r2, #0]
 8009546:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009548:	4a1c      	ldr	r2, [pc, #112]	@ (80095bc <put_lfn+0xec>)
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	18d3      	adds	r3, r2, r3
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	001a      	movs	r2, r3
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	189a      	adds	r2, r3, r2
 8009556:	2416      	movs	r4, #22
 8009558:	193b      	adds	r3, r7, r4
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	0019      	movs	r1, r3
 800955e:	0010      	movs	r0, r2
 8009560:	f7fe fe9a 	bl	8008298 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009564:	0022      	movs	r2, r4
 8009566:	18bb      	adds	r3, r7, r2
 8009568:	881b      	ldrh	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d103      	bne.n	8009576 <put_lfn+0xa6>
 800956e:	18bb      	adds	r3, r7, r2
 8009570:	2201      	movs	r2, #1
 8009572:	4252      	negs	r2, r2
 8009574:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	3301      	adds	r3, #1
 800957a:	61bb      	str	r3, [r7, #24]
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2b0c      	cmp	r3, #12
 8009580:	d9d3      	bls.n	800952a <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009582:	2316      	movs	r3, #22
 8009584:	18fb      	adds	r3, r7, r3
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	4a0b      	ldr	r2, [pc, #44]	@ (80095b8 <put_lfn+0xe8>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d006      	beq.n	800959c <put_lfn+0xcc>
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	005b      	lsls	r3, r3, #1
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	18d3      	adds	r3, r2, r3
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d105      	bne.n	80095a8 <put_lfn+0xd8>
 800959c:	1dfb      	adds	r3, r7, #7
 800959e:	1dfa      	adds	r2, r7, #7
 80095a0:	7812      	ldrb	r2, [r2, #0]
 80095a2:	2140      	movs	r1, #64	@ 0x40
 80095a4:	430a      	orrs	r2, r1
 80095a6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	1dfa      	adds	r2, r7, #7
 80095ac:	7812      	ldrb	r2, [r2, #0]
 80095ae:	701a      	strb	r2, [r3, #0]
}
 80095b0:	46c0      	nop			@ (mov r8, r8)
 80095b2:	46bd      	mov	sp, r7
 80095b4:	b009      	add	sp, #36	@ 0x24
 80095b6:	bd90      	pop	{r4, r7, pc}
 80095b8:	0000ffff 	.word	0x0000ffff
 80095bc:	080103e4 	.word	0x080103e4

080095c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b08c      	sub	sp, #48	@ 0x30
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80095ce:	68b9      	ldr	r1, [r7, #8]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	220b      	movs	r2, #11
 80095d4:	0018      	movs	r0, r3
 80095d6:	f7fe fea7 	bl	8008328 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2b05      	cmp	r3, #5
 80095de:	d92f      	bls.n	8009640 <gen_numname+0x80>
		sr = seq;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80095e4:	e026      	b.n	8009634 <gen_numname+0x74>
			wc = *lfn++;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	1c9a      	adds	r2, r3, #2
 80095ea:	607a      	str	r2, [r7, #4]
 80095ec:	2222      	movs	r2, #34	@ 0x22
 80095ee:	18ba      	adds	r2, r7, r2
 80095f0:	881b      	ldrh	r3, [r3, #0]
 80095f2:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 80095f4:	2300      	movs	r3, #0
 80095f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095f8:	e019      	b.n	800962e <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	005a      	lsls	r2, r3, #1
 80095fe:	2022      	movs	r0, #34	@ 0x22
 8009600:	183b      	adds	r3, r7, r0
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	2101      	movs	r1, #1
 8009606:	400b      	ands	r3, r1
 8009608:	18d3      	adds	r3, r2, r3
 800960a:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800960c:	183b      	adds	r3, r7, r0
 800960e:	183a      	adds	r2, r7, r0
 8009610:	8812      	ldrh	r2, [r2, #0]
 8009612:	0852      	lsrs	r2, r2, #1
 8009614:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 8009616:	69fa      	ldr	r2, [r7, #28]
 8009618:	2380      	movs	r3, #128	@ 0x80
 800961a:	025b      	lsls	r3, r3, #9
 800961c:	4013      	ands	r3, r2
 800961e:	d003      	beq.n	8009628 <gen_numname+0x68>
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	4a30      	ldr	r2, [pc, #192]	@ (80096e4 <gen_numname+0x124>)
 8009624:	4053      	eors	r3, r2
 8009626:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962a:	3301      	adds	r3, #1
 800962c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800962e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009630:	2b0f      	cmp	r3, #15
 8009632:	d9e2      	bls.n	80095fa <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1d4      	bne.n	80095e6 <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009640:	2307      	movs	r3, #7
 8009642:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	b2db      	uxtb	r3, r3
 8009648:	220f      	movs	r2, #15
 800964a:	4013      	ands	r3, r2
 800964c:	b2da      	uxtb	r2, r3
 800964e:	212f      	movs	r1, #47	@ 0x2f
 8009650:	187b      	adds	r3, r7, r1
 8009652:	3230      	adds	r2, #48	@ 0x30
 8009654:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8009656:	187b      	adds	r3, r7, r1
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2b39      	cmp	r3, #57	@ 0x39
 800965c:	d904      	bls.n	8009668 <gen_numname+0xa8>
 800965e:	187b      	adds	r3, r7, r1
 8009660:	187a      	adds	r2, r7, r1
 8009662:	7812      	ldrb	r2, [r2, #0]
 8009664:	3207      	adds	r2, #7
 8009666:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8009668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966a:	1e5a      	subs	r2, r3, #1
 800966c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800966e:	2014      	movs	r0, #20
 8009670:	183a      	adds	r2, r7, r0
 8009672:	212f      	movs	r1, #47	@ 0x2f
 8009674:	1879      	adds	r1, r7, r1
 8009676:	7809      	ldrb	r1, [r1, #0]
 8009678:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	091b      	lsrs	r3, r3, #4
 800967e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1de      	bne.n	8009644 <gen_numname+0x84>
	ns[i] = '~';
 8009686:	183a      	adds	r2, r7, r0
 8009688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968a:	18d3      	adds	r3, r2, r3
 800968c:	227e      	movs	r2, #126	@ 0x7e
 800968e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009690:	2300      	movs	r3, #0
 8009692:	627b      	str	r3, [r7, #36]	@ 0x24
 8009694:	e002      	b.n	800969c <gen_numname+0xdc>
 8009696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009698:	3301      	adds	r3, #1
 800969a:	627b      	str	r3, [r7, #36]	@ 0x24
 800969c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800969e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d205      	bcs.n	80096b0 <gen_numname+0xf0>
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	18d3      	adds	r3, r2, r3
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b20      	cmp	r3, #32
 80096ae:	d1f2      	bne.n	8009696 <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80096b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b2:	2b07      	cmp	r3, #7
 80096b4:	d806      	bhi.n	80096c4 <gen_numname+0x104>
 80096b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80096bc:	2214      	movs	r2, #20
 80096be:	18ba      	adds	r2, r7, r2
 80096c0:	5cd1      	ldrb	r1, [r2, r3]
 80096c2:	e000      	b.n	80096c6 <gen_numname+0x106>
 80096c4:	2120      	movs	r1, #32
 80096c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	18d3      	adds	r3, r2, r3
 80096d0:	1c0a      	adds	r2, r1, #0
 80096d2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80096d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d6:	2b07      	cmp	r3, #7
 80096d8:	d9ea      	bls.n	80096b0 <gen_numname+0xf0>
}
 80096da:	46c0      	nop			@ (mov r8, r8)
 80096dc:	46c0      	nop			@ (mov r8, r8)
 80096de:	46bd      	mov	sp, r7
 80096e0:	b00c      	add	sp, #48	@ 0x30
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	00011021 	.word	0x00011021

080096e8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80096f0:	230f      	movs	r3, #15
 80096f2:	18fb      	adds	r3, r7, r3
 80096f4:	2200      	movs	r2, #0
 80096f6:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 80096f8:	230b      	movs	r3, #11
 80096fa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80096fc:	200f      	movs	r0, #15
 80096fe:	183b      	adds	r3, r7, r0
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	b2da      	uxtb	r2, r3
 8009704:	0852      	lsrs	r2, r2, #1
 8009706:	01db      	lsls	r3, r3, #7
 8009708:	4313      	orrs	r3, r2
 800970a:	b2d9      	uxtb	r1, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	607a      	str	r2, [r7, #4]
 8009712:	781a      	ldrb	r2, [r3, #0]
 8009714:	183b      	adds	r3, r7, r0
 8009716:	188a      	adds	r2, r1, r2
 8009718:	701a      	strb	r2, [r3, #0]
	} while (--n);
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	3b01      	subs	r3, #1
 800971e:	60bb      	str	r3, [r7, #8]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1ea      	bne.n	80096fc <sum_sfn+0x14>
	return sum;
 8009726:	183b      	adds	r3, r7, r0
 8009728:	781b      	ldrb	r3, [r3, #0]
}
 800972a:	0018      	movs	r0, r3
 800972c:	46bd      	mov	sp, r7
 800972e:	b004      	add	sp, #16
 8009730:	bd80      	pop	{r7, pc}

08009732 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009732:	b5b0      	push	{r4, r5, r7, lr}
 8009734:	b086      	sub	sp, #24
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009740:	2517      	movs	r5, #23
 8009742:	197c      	adds	r4, r7, r5
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2100      	movs	r1, #0
 8009748:	0018      	movs	r0, r3
 800974a:	f7ff fc41 	bl	8008fd0 <dir_sdi>
 800974e:	0003      	movs	r3, r0
 8009750:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8009752:	197b      	adds	r3, r7, r5
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <dir_find+0x2e>
 800975a:	197b      	adds	r3, r7, r5
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	e0df      	b.n	8009920 <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009760:	2114      	movs	r1, #20
 8009762:	187b      	adds	r3, r7, r1
 8009764:	22ff      	movs	r2, #255	@ 0xff
 8009766:	701a      	strb	r2, [r3, #0]
 8009768:	2315      	movs	r3, #21
 800976a:	18fb      	adds	r3, r7, r3
 800976c:	187a      	adds	r2, r7, r1
 800976e:	7812      	ldrb	r2, [r2, #0]
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	4252      	negs	r2, r2
 8009778:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	69da      	ldr	r2, [r3, #28]
 800977e:	2517      	movs	r5, #23
 8009780:	197c      	adds	r4, r7, r5
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	0011      	movs	r1, r2
 8009786:	0018      	movs	r0, r3
 8009788:	f7fe fff6 	bl	8008778 <move_window>
 800978c:	0003      	movs	r3, r0
 800978e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8009790:	0029      	movs	r1, r5
 8009792:	187b      	adds	r3, r7, r1
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d000      	beq.n	800979c <dir_find+0x6a>
 800979a:	e0b9      	b.n	8009910 <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a1a      	ldr	r2, [r3, #32]
 80097a0:	2016      	movs	r0, #22
 80097a2:	183b      	adds	r3, r7, r0
 80097a4:	7812      	ldrb	r2, [r2, #0]
 80097a6:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80097a8:	183b      	adds	r3, r7, r0
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d103      	bne.n	80097b8 <dir_find+0x86>
 80097b0:	187b      	adds	r3, r7, r1
 80097b2:	2204      	movs	r2, #4
 80097b4:	701a      	strb	r2, [r3, #0]
 80097b6:	e0b0      	b.n	800991a <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	330b      	adds	r3, #11
 80097be:	781a      	ldrb	r2, [r3, #0]
 80097c0:	200f      	movs	r0, #15
 80097c2:	183b      	adds	r3, r7, r0
 80097c4:	213f      	movs	r1, #63	@ 0x3f
 80097c6:	400a      	ands	r2, r1
 80097c8:	701a      	strb	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	0001      	movs	r1, r0
 80097ce:	187a      	adds	r2, r7, r1
 80097d0:	7812      	ldrb	r2, [r2, #0]
 80097d2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80097d4:	2316      	movs	r3, #22
 80097d6:	18fb      	adds	r3, r7, r3
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2be5      	cmp	r3, #229	@ 0xe5
 80097dc:	d008      	beq.n	80097f0 <dir_find+0xbe>
 80097de:	187b      	adds	r3, r7, r1
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	2208      	movs	r2, #8
 80097e4:	4013      	ands	r3, r2
 80097e6:	d00c      	beq.n	8009802 <dir_find+0xd0>
 80097e8:	187b      	adds	r3, r7, r1
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b0f      	cmp	r3, #15
 80097ee:	d008      	beq.n	8009802 <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80097f0:	2315      	movs	r3, #21
 80097f2:	18fb      	adds	r3, r7, r3
 80097f4:	22ff      	movs	r2, #255	@ 0xff
 80097f6:	701a      	strb	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	4252      	negs	r2, r2
 80097fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8009800:	e077      	b.n	80098f2 <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009802:	230f      	movs	r3, #15
 8009804:	18fb      	adds	r3, r7, r3
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	2b0f      	cmp	r3, #15
 800980a:	d148      	bne.n	800989e <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	222f      	movs	r2, #47	@ 0x2f
 8009810:	5c9b      	ldrb	r3, [r3, r2]
 8009812:	001a      	movs	r2, r3
 8009814:	2340      	movs	r3, #64	@ 0x40
 8009816:	4013      	ands	r3, r2
 8009818:	d000      	beq.n	800981c <dir_find+0xea>
 800981a:	e06a      	b.n	80098f2 <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800981c:	2116      	movs	r1, #22
 800981e:	187b      	adds	r3, r7, r1
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2240      	movs	r2, #64	@ 0x40
 8009824:	4013      	ands	r3, r2
 8009826:	d015      	beq.n	8009854 <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a1a      	ldr	r2, [r3, #32]
 800982c:	2314      	movs	r3, #20
 800982e:	18fb      	adds	r3, r7, r3
 8009830:	7b52      	ldrb	r2, [r2, #13]
 8009832:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009834:	187b      	adds	r3, r7, r1
 8009836:	0008      	movs	r0, r1
 8009838:	187a      	adds	r2, r7, r1
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	2140      	movs	r1, #64	@ 0x40
 800983e:	438a      	bics	r2, r1
 8009840:	701a      	strb	r2, [r3, #0]
 8009842:	2315      	movs	r3, #21
 8009844:	18fb      	adds	r3, r7, r3
 8009846:	183a      	adds	r2, r7, r0
 8009848:	7812      	ldrb	r2, [r2, #0]
 800984a:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	695a      	ldr	r2, [r3, #20]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009854:	2316      	movs	r3, #22
 8009856:	18fa      	adds	r2, r7, r3
 8009858:	2415      	movs	r4, #21
 800985a:	193b      	adds	r3, r7, r4
 800985c:	7812      	ldrb	r2, [r2, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	429a      	cmp	r2, r3
 8009862:	d117      	bne.n	8009894 <dir_find+0x162>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	330d      	adds	r3, #13
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2214      	movs	r2, #20
 800986e:	18ba      	adds	r2, r7, r2
 8009870:	7812      	ldrb	r2, [r2, #0]
 8009872:	429a      	cmp	r2, r3
 8009874:	d10e      	bne.n	8009894 <dir_find+0x162>
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	691a      	ldr	r2, [r3, #16]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	0019      	movs	r1, r3
 8009880:	0010      	movs	r0, r2
 8009882:	f7ff fda5 	bl	80093d0 <cmp_lfn>
 8009886:	1e03      	subs	r3, r0, #0
 8009888:	d004      	beq.n	8009894 <dir_find+0x162>
 800988a:	193b      	adds	r3, r7, r4
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	3b01      	subs	r3, #1
 8009890:	b2da      	uxtb	r2, r3
 8009892:	e000      	b.n	8009896 <dir_find+0x164>
 8009894:	22ff      	movs	r2, #255	@ 0xff
 8009896:	2315      	movs	r3, #21
 8009898:	18fb      	adds	r3, r7, r3
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	e029      	b.n	80098f2 <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800989e:	2315      	movs	r3, #21
 80098a0:	18fb      	adds	r3, r7, r3
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10b      	bne.n	80098c0 <dir_find+0x18e>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	0018      	movs	r0, r3
 80098ae:	f7ff ff1b 	bl	80096e8 <sum_sfn>
 80098b2:	0003      	movs	r3, r0
 80098b4:	001a      	movs	r2, r3
 80098b6:	2314      	movs	r3, #20
 80098b8:	18fb      	adds	r3, r7, r3
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	4293      	cmp	r3, r2
 80098be:	d029      	beq.n	8009914 <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	222f      	movs	r2, #47	@ 0x2f
 80098c4:	5c9b      	ldrb	r3, [r3, r2]
 80098c6:	001a      	movs	r2, r3
 80098c8:	2301      	movs	r3, #1
 80098ca:	4013      	ands	r3, r2
 80098cc:	d109      	bne.n	80098e2 <dir_find+0x1b0>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a18      	ldr	r0, [r3, #32]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3324      	adds	r3, #36	@ 0x24
 80098d6:	220b      	movs	r2, #11
 80098d8:	0019      	movs	r1, r3
 80098da:	f7fe fd5d 	bl	8008398 <mem_cmp>
 80098de:	1e03      	subs	r3, r0, #0
 80098e0:	d01a      	beq.n	8009918 <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80098e2:	2315      	movs	r3, #21
 80098e4:	18fb      	adds	r3, r7, r3
 80098e6:	22ff      	movs	r2, #255	@ 0xff
 80098e8:	701a      	strb	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	4252      	negs	r2, r2
 80098f0:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80098f2:	2517      	movs	r5, #23
 80098f4:	197c      	adds	r4, r7, r5
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2100      	movs	r1, #0
 80098fa:	0018      	movs	r0, r3
 80098fc:	f7ff fbf4 	bl	80090e8 <dir_next>
 8009900:	0003      	movs	r3, r0
 8009902:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8009904:	197b      	adds	r3, r7, r5
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d100      	bne.n	800990e <dir_find+0x1dc>
 800990c:	e735      	b.n	800977a <dir_find+0x48>
 800990e:	e004      	b.n	800991a <dir_find+0x1e8>
		if (res != FR_OK) break;
 8009910:	46c0      	nop			@ (mov r8, r8)
 8009912:	e002      	b.n	800991a <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009914:	46c0      	nop			@ (mov r8, r8)
 8009916:	e000      	b.n	800991a <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009918:	46c0      	nop			@ (mov r8, r8)

	return res;
 800991a:	2317      	movs	r3, #23
 800991c:	18fb      	adds	r3, r7, r3
 800991e:	781b      	ldrb	r3, [r3, #0]
}
 8009920:	0018      	movs	r0, r3
 8009922:	46bd      	mov	sp, r7
 8009924:	b006      	add	sp, #24
 8009926:	bdb0      	pop	{r4, r5, r7, pc}

08009928 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009928:	b5b0      	push	{r4, r5, r7, lr}
 800992a:	b08c      	sub	sp, #48	@ 0x30
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	222f      	movs	r2, #47	@ 0x2f
 800993a:	5c9b      	ldrb	r3, [r3, r2]
 800993c:	001a      	movs	r2, r3
 800993e:	23a0      	movs	r3, #160	@ 0xa0
 8009940:	4013      	ands	r3, r2
 8009942:	d001      	beq.n	8009948 <dir_register+0x20>
 8009944:	2306      	movs	r3, #6
 8009946:	e0fb      	b.n	8009b40 <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009948:	2300      	movs	r3, #0
 800994a:	627b      	str	r3, [r7, #36]	@ 0x24
 800994c:	e002      	b.n	8009954 <dir_register+0x2c>
 800994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009950:	3301      	adds	r3, #1
 8009952:	627b      	str	r3, [r7, #36]	@ 0x24
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	691a      	ldr	r2, [r3, #16]
 8009958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	18d3      	adds	r3, r2, r3
 800995e:	881b      	ldrh	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1f4      	bne.n	800994e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3324      	adds	r3, #36	@ 0x24
 8009968:	0019      	movs	r1, r3
 800996a:	240c      	movs	r4, #12
 800996c:	193b      	adds	r3, r7, r4
 800996e:	220c      	movs	r2, #12
 8009970:	0018      	movs	r0, r3
 8009972:	f7fe fcd9 	bl	8008328 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009976:	193b      	adds	r3, r7, r4
 8009978:	7adb      	ldrb	r3, [r3, #11]
 800997a:	001a      	movs	r2, r3
 800997c:	2301      	movs	r3, #1
 800997e:	4013      	ands	r3, r2
 8009980:	d037      	beq.n	80099f2 <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	222f      	movs	r2, #47	@ 0x2f
 8009986:	2140      	movs	r1, #64	@ 0x40
 8009988:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 800998a:	2301      	movs	r3, #1
 800998c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800998e:	e018      	b.n	80099c2 <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	3324      	adds	r3, #36	@ 0x24
 8009994:	0018      	movs	r0, r3
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	691a      	ldr	r2, [r3, #16]
 800999a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999c:	210c      	movs	r1, #12
 800999e:	1879      	adds	r1, r7, r1
 80099a0:	f7ff fe0e 	bl	80095c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80099a4:	252f      	movs	r5, #47	@ 0x2f
 80099a6:	197c      	adds	r4, r7, r5
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	0018      	movs	r0, r3
 80099ac:	f7ff fec1 	bl	8009732 <dir_find>
 80099b0:	0003      	movs	r3, r0
 80099b2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80099b4:	197b      	adds	r3, r7, r5
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d106      	bne.n	80099ca <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 80099bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099be:	3301      	adds	r3, #1
 80099c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c4:	2b63      	cmp	r3, #99	@ 0x63
 80099c6:	d9e3      	bls.n	8009990 <dir_register+0x68>
 80099c8:	e000      	b.n	80099cc <dir_register+0xa4>
			if (res != FR_OK) break;
 80099ca:	46c0      	nop			@ (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80099cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ce:	2b64      	cmp	r3, #100	@ 0x64
 80099d0:	d101      	bne.n	80099d6 <dir_register+0xae>
 80099d2:	2307      	movs	r3, #7
 80099d4:	e0b4      	b.n	8009b40 <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80099d6:	222f      	movs	r2, #47	@ 0x2f
 80099d8:	18bb      	adds	r3, r7, r2
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b04      	cmp	r3, #4
 80099de:	d002      	beq.n	80099e6 <dir_register+0xbe>
 80099e0:	18bb      	adds	r3, r7, r2
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	e0ac      	b.n	8009b40 <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80099e6:	230c      	movs	r3, #12
 80099e8:	18fb      	adds	r3, r7, r3
 80099ea:	7ad9      	ldrb	r1, [r3, #11]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	222f      	movs	r2, #47	@ 0x2f
 80099f0:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80099f2:	230c      	movs	r3, #12
 80099f4:	18fb      	adds	r3, r7, r3
 80099f6:	7adb      	ldrb	r3, [r3, #11]
 80099f8:	001a      	movs	r2, r3
 80099fa:	2302      	movs	r3, #2
 80099fc:	4013      	ands	r3, r2
 80099fe:	d008      	beq.n	8009a12 <dir_register+0xea>
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a02:	330c      	adds	r3, #12
 8009a04:	210d      	movs	r1, #13
 8009a06:	0018      	movs	r0, r3
 8009a08:	f7f6 fb9a 	bl	8000140 <__udivsi3>
 8009a0c:	0003      	movs	r3, r0
 8009a0e:	3301      	adds	r3, #1
 8009a10:	e000      	b.n	8009a14 <dir_register+0xec>
 8009a12:	2301      	movs	r3, #1
 8009a14:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009a16:	252f      	movs	r5, #47	@ 0x2f
 8009a18:	197c      	adds	r4, r7, r5
 8009a1a:	6a3a      	ldr	r2, [r7, #32]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	0011      	movs	r1, r2
 8009a20:	0018      	movs	r0, r3
 8009a22:	f7ff fc3d 	bl	80092a0 <dir_alloc>
 8009a26:	0003      	movs	r3, r0
 8009a28:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009a2a:	0029      	movs	r1, r5
 8009a2c:	187b      	adds	r3, r7, r1
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d153      	bne.n	8009adc <dir_register+0x1b4>
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	623b      	str	r3, [r7, #32]
 8009a3a:	6a3b      	ldr	r3, [r7, #32]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d04d      	beq.n	8009adc <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	695a      	ldr	r2, [r3, #20]
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	015b      	lsls	r3, r3, #5
 8009a48:	1ad2      	subs	r2, r2, r3
 8009a4a:	000d      	movs	r5, r1
 8009a4c:	187c      	adds	r4, r7, r1
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	0011      	movs	r1, r2
 8009a52:	0018      	movs	r0, r3
 8009a54:	f7ff fabc 	bl	8008fd0 <dir_sdi>
 8009a58:	0003      	movs	r3, r0
 8009a5a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8009a5c:	197b      	adds	r3, r7, r5
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d13b      	bne.n	8009adc <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	3324      	adds	r3, #36	@ 0x24
 8009a68:	221b      	movs	r2, #27
 8009a6a:	18bc      	adds	r4, r7, r2
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	f7ff fe3b 	bl	80096e8 <sum_sfn>
 8009a72:	0003      	movs	r3, r0
 8009a74:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	69da      	ldr	r2, [r3, #28]
 8009a7a:	252f      	movs	r5, #47	@ 0x2f
 8009a7c:	197c      	adds	r4, r7, r5
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	0011      	movs	r1, r2
 8009a82:	0018      	movs	r0, r3
 8009a84:	f7fe fe78 	bl	8008778 <move_window>
 8009a88:	0003      	movs	r3, r0
 8009a8a:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 8009a8c:	002c      	movs	r4, r5
 8009a8e:	193b      	adds	r3, r7, r4
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d121      	bne.n	8009ada <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	6918      	ldr	r0, [r3, #16]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a19      	ldr	r1, [r3, #32]
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	231b      	movs	r3, #27
 8009aa4:	18fb      	adds	r3, r7, r3
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	f7ff fd12 	bl	80094d0 <put_lfn>
				fs->wflag = 1;
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009ab2:	0025      	movs	r5, r4
 8009ab4:	193c      	adds	r4, r7, r4
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2100      	movs	r1, #0
 8009aba:	0018      	movs	r0, r3
 8009abc:	f7ff fb14 	bl	80090e8 <dir_next>
 8009ac0:	0003      	movs	r3, r0
 8009ac2:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 8009ac4:	197b      	adds	r3, r7, r5
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d107      	bne.n	8009adc <dir_register+0x1b4>
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	623b      	str	r3, [r7, #32]
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1ce      	bne.n	8009a76 <dir_register+0x14e>
 8009ad8:	e000      	b.n	8009adc <dir_register+0x1b4>
				if (res != FR_OK) break;
 8009ada:	46c0      	nop			@ (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009adc:	252f      	movs	r5, #47	@ 0x2f
 8009ade:	197b      	adds	r3, r7, r5
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d129      	bne.n	8009b3a <dir_register+0x212>
		res = move_window(fs, dp->sect);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	69da      	ldr	r2, [r3, #28]
 8009aea:	197c      	adds	r4, r7, r5
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	0011      	movs	r1, r2
 8009af0:	0018      	movs	r0, r3
 8009af2:	f7fe fe41 	bl	8008778 <move_window>
 8009af6:	0003      	movs	r3, r0
 8009af8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8009afa:	197b      	adds	r3, r7, r5
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d11b      	bne.n	8009b3a <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	2220      	movs	r2, #32
 8009b08:	2100      	movs	r1, #0
 8009b0a:	0018      	movs	r0, r3
 8009b0c:	f7fe fc2b 	bl	8008366 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a18      	ldr	r0, [r3, #32]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3324      	adds	r3, #36	@ 0x24
 8009b18:	220b      	movs	r2, #11
 8009b1a:	0019      	movs	r1, r3
 8009b1c:	f7fe fc04 	bl	8008328 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	222f      	movs	r2, #47	@ 0x2f
 8009b24:	5c9a      	ldrb	r2, [r3, r2]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	330c      	adds	r3, #12
 8009b2c:	2118      	movs	r1, #24
 8009b2e:	400a      	ands	r2, r1
 8009b30:	b2d2      	uxtb	r2, r2
 8009b32:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	2201      	movs	r2, #1
 8009b38:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009b3a:	232f      	movs	r3, #47	@ 0x2f
 8009b3c:	18fb      	adds	r3, r7, r3
 8009b3e:	781b      	ldrb	r3, [r3, #0]
}
 8009b40:	0018      	movs	r0, r3
 8009b42:	46bd      	mov	sp, r7
 8009b44:	b00c      	add	sp, #48	@ 0x30
 8009b46:	bdb0      	pop	{r4, r5, r7, pc}

08009b48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009b48:	b5b0      	push	{r4, r5, r7, lr}
 8009b4a:	b08a      	sub	sp, #40	@ 0x28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	613b      	str	r3, [r7, #16]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	60fb      	str	r3, [r7, #12]
 8009b60:	2300      	movs	r3, #0
 8009b62:	617b      	str	r3, [r7, #20]
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	1c5a      	adds	r2, r3, #1
 8009b6c:	61ba      	str	r2, [r7, #24]
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	18d3      	adds	r3, r2, r3
 8009b72:	781a      	ldrb	r2, [r3, #0]
 8009b74:	2124      	movs	r1, #36	@ 0x24
 8009b76:	187b      	adds	r3, r7, r1
 8009b78:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 8009b7a:	000a      	movs	r2, r1
 8009b7c:	18bb      	adds	r3, r7, r2
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	2b1f      	cmp	r3, #31
 8009b82:	d94e      	bls.n	8009c22 <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009b84:	18bb      	adds	r3, r7, r2
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	2b2f      	cmp	r3, #47	@ 0x2f
 8009b8a:	d007      	beq.n	8009b9c <create_name+0x54>
 8009b8c:	18bb      	adds	r3, r7, r2
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	2b5c      	cmp	r3, #92	@ 0x5c
 8009b92:	d110      	bne.n	8009bb6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009b94:	e002      	b.n	8009b9c <create_name+0x54>
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	61bb      	str	r3, [r7, #24]
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	18d3      	adds	r3, r2, r3
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	2b2f      	cmp	r3, #47	@ 0x2f
 8009ba6:	d0f6      	beq.n	8009b96 <create_name+0x4e>
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	18d3      	adds	r3, r2, r3
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	2b5c      	cmp	r3, #92	@ 0x5c
 8009bb2:	d0f0      	beq.n	8009b96 <create_name+0x4e>
			break;
 8009bb4:	e036      	b.n	8009c24 <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2bfe      	cmp	r3, #254	@ 0xfe
 8009bba:	d901      	bls.n	8009bc0 <create_name+0x78>
 8009bbc:	2306      	movs	r3, #6
 8009bbe:	e1c2      	b.n	8009f46 <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009bc0:	2524      	movs	r5, #36	@ 0x24
 8009bc2:	197b      	adds	r3, r7, r5
 8009bc4:	197a      	adds	r2, r7, r5
 8009bc6:	8812      	ldrh	r2, [r2, #0]
 8009bc8:	21ff      	movs	r1, #255	@ 0xff
 8009bca:	400a      	ands	r2, r1
 8009bcc:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009bce:	197c      	adds	r4, r7, r5
 8009bd0:	197b      	adds	r3, r7, r5
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	0018      	movs	r0, r3
 8009bd8:	f001 fd18 	bl	800b60c <ff_convert>
 8009bdc:	0003      	movs	r3, r0
 8009bde:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009be0:	197b      	adds	r3, r7, r5
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d101      	bne.n	8009bec <create_name+0xa4>
 8009be8:	2306      	movs	r3, #6
 8009bea:	e1ac      	b.n	8009f46 <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009bec:	2224      	movs	r2, #36	@ 0x24
 8009bee:	18bb      	adds	r3, r7, r2
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009bf4:	d80a      	bhi.n	8009c0c <create_name+0xc4>
 8009bf6:	18bb      	adds	r3, r7, r2
 8009bf8:	881a      	ldrh	r2, [r3, #0]
 8009bfa:	4ba7      	ldr	r3, [pc, #668]	@ (8009e98 <create_name+0x350>)
 8009bfc:	0011      	movs	r1, r2
 8009bfe:	0018      	movs	r0, r3
 8009c00:	f7fe fbef 	bl	80083e2 <chk_chr>
 8009c04:	1e03      	subs	r3, r0, #0
 8009c06:	d001      	beq.n	8009c0c <create_name+0xc4>
 8009c08:	2306      	movs	r3, #6
 8009c0a:	e19c      	b.n	8009f46 <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	617a      	str	r2, [r7, #20]
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	18d3      	adds	r3, r2, r3
 8009c18:	2224      	movs	r2, #36	@ 0x24
 8009c1a:	18ba      	adds	r2, r7, r2
 8009c1c:	8812      	ldrh	r2, [r2, #0]
 8009c1e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009c20:	e7a2      	b.n	8009b68 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009c22:	46c0      	nop			@ (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	18d2      	adds	r2, r2, r3
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009c2e:	2324      	movs	r3, #36	@ 0x24
 8009c30:	18fb      	adds	r3, r7, r3
 8009c32:	881b      	ldrh	r3, [r3, #0]
 8009c34:	2b1f      	cmp	r3, #31
 8009c36:	d801      	bhi.n	8009c3c <create_name+0xf4>
 8009c38:	2204      	movs	r2, #4
 8009c3a:	e000      	b.n	8009c3e <create_name+0xf6>
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2327      	movs	r3, #39	@ 0x27
 8009c40:	18fb      	adds	r3, r7, r3
 8009c42:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009c44:	e016      	b.n	8009c74 <create_name+0x12c>
		w = lfn[di - 1];
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	4a94      	ldr	r2, [pc, #592]	@ (8009e9c <create_name+0x354>)
 8009c4a:	4694      	mov	ip, r2
 8009c4c:	4463      	add	r3, ip
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	18d2      	adds	r2, r2, r3
 8009c54:	2124      	movs	r1, #36	@ 0x24
 8009c56:	187b      	adds	r3, r7, r1
 8009c58:	8812      	ldrh	r2, [r2, #0]
 8009c5a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8009c5c:	000a      	movs	r2, r1
 8009c5e:	18bb      	adds	r3, r7, r2
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	2b20      	cmp	r3, #32
 8009c64:	d003      	beq.n	8009c6e <create_name+0x126>
 8009c66:	18bb      	adds	r3, r7, r2
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c6c:	d106      	bne.n	8009c7c <create_name+0x134>
		di--;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1e5      	bne.n	8009c46 <create_name+0xfe>
 8009c7a:	e000      	b.n	8009c7e <create_name+0x136>
		if (w != ' ' && w != '.') break;
 8009c7c:	46c0      	nop			@ (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	005b      	lsls	r3, r3, #1
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	18d3      	adds	r3, r2, r3
 8009c86:	2200      	movs	r2, #0
 8009c88:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d101      	bne.n	8009c94 <create_name+0x14c>
 8009c90:	2306      	movs	r3, #6
 8009c92:	e158      	b.n	8009f46 <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3324      	adds	r3, #36	@ 0x24
 8009c98:	220b      	movs	r2, #11
 8009c9a:	2120      	movs	r1, #32
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	f7fe fb62 	bl	8008366 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	61bb      	str	r3, [r7, #24]
 8009ca6:	e002      	b.n	8009cae <create_name+0x166>
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	3301      	adds	r3, #1
 8009cac:	61bb      	str	r3, [r7, #24]
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	18d3      	adds	r3, r2, r3
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	d0f5      	beq.n	8009ca8 <create_name+0x160>
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	18d3      	adds	r3, r2, r3
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cc8:	d0ee      	beq.n	8009ca8 <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00a      	beq.n	8009ce6 <create_name+0x19e>
 8009cd0:	2227      	movs	r2, #39	@ 0x27
 8009cd2:	18bb      	adds	r3, r7, r2
 8009cd4:	18ba      	adds	r2, r7, r2
 8009cd6:	7812      	ldrb	r2, [r2, #0]
 8009cd8:	2103      	movs	r1, #3
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009cde:	e002      	b.n	8009ce6 <create_name+0x19e>
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	617b      	str	r3, [r7, #20]
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d009      	beq.n	8009d00 <create_name+0x1b8>
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	4a6b      	ldr	r2, [pc, #428]	@ (8009e9c <create_name+0x354>)
 8009cf0:	4694      	mov	ip, r2
 8009cf2:	4463      	add	r3, ip
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	18d3      	adds	r3, r2, r3
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cfe:	d1ef      	bne.n	8009ce0 <create_name+0x198>

	i = b = 0; ni = 8;
 8009d00:	2326      	movs	r3, #38	@ 0x26
 8009d02:	18fb      	adds	r3, r7, r3
 8009d04:	2200      	movs	r2, #0
 8009d06:	701a      	strb	r2, [r3, #0]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	623b      	str	r3, [r7, #32]
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	61ba      	str	r2, [r7, #24]
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	18d2      	adds	r2, r2, r3
 8009d1c:	2124      	movs	r1, #36	@ 0x24
 8009d1e:	187b      	adds	r3, r7, r1
 8009d20:	8812      	ldrh	r2, [r2, #0]
 8009d22:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 8009d24:	000a      	movs	r2, r1
 8009d26:	18bb      	adds	r3, r7, r2
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d100      	bne.n	8009d30 <create_name+0x1e8>
 8009d2e:	e0b1      	b.n	8009e94 <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009d30:	18bb      	adds	r3, r7, r2
 8009d32:	881b      	ldrh	r3, [r3, #0]
 8009d34:	2b20      	cmp	r3, #32
 8009d36:	d007      	beq.n	8009d48 <create_name+0x200>
 8009d38:	18bb      	adds	r3, r7, r2
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d3e:	d10b      	bne.n	8009d58 <create_name+0x210>
 8009d40:	69ba      	ldr	r2, [r7, #24]
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d007      	beq.n	8009d58 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 8009d48:	2227      	movs	r2, #39	@ 0x27
 8009d4a:	18bb      	adds	r3, r7, r2
 8009d4c:	18ba      	adds	r2, r7, r2
 8009d4e:	7812      	ldrb	r2, [r2, #0]
 8009d50:	2103      	movs	r1, #3
 8009d52:	430a      	orrs	r2, r1
 8009d54:	701a      	strb	r2, [r3, #0]
 8009d56:	e09c      	b.n	8009e92 <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009d58:	6a3a      	ldr	r2, [r7, #32]
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d203      	bcs.n	8009d68 <create_name+0x220>
 8009d60:	69ba      	ldr	r2, [r7, #24]
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d127      	bne.n	8009db8 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	2b0b      	cmp	r3, #11
 8009d6c:	d107      	bne.n	8009d7e <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 8009d6e:	2227      	movs	r2, #39	@ 0x27
 8009d70:	18bb      	adds	r3, r7, r2
 8009d72:	18ba      	adds	r2, r7, r2
 8009d74:	7812      	ldrb	r2, [r2, #0]
 8009d76:	2103      	movs	r1, #3
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	701a      	strb	r2, [r3, #0]
 8009d7c:	e095      	b.n	8009eaa <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009d7e:	69ba      	ldr	r2, [r7, #24]
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d006      	beq.n	8009d94 <create_name+0x24c>
 8009d86:	2227      	movs	r2, #39	@ 0x27
 8009d88:	18bb      	adds	r3, r7, r2
 8009d8a:	18ba      	adds	r2, r7, r2
 8009d8c:	7812      	ldrb	r2, [r2, #0]
 8009d8e:	2103      	movs	r1, #3
 8009d90:	430a      	orrs	r2, r1
 8009d92:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 8009d94:	69ba      	ldr	r2, [r7, #24]
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d900      	bls.n	8009d9e <create_name+0x256>
 8009d9c:	e084      	b.n	8009ea8 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	61bb      	str	r3, [r7, #24]
 8009da2:	2308      	movs	r3, #8
 8009da4:	623b      	str	r3, [r7, #32]
 8009da6:	230b      	movs	r3, #11
 8009da8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009daa:	2226      	movs	r2, #38	@ 0x26
 8009dac:	18bb      	adds	r3, r7, r2
 8009dae:	18ba      	adds	r2, r7, r2
 8009db0:	7812      	ldrb	r2, [r2, #0]
 8009db2:	0092      	lsls	r2, r2, #2
 8009db4:	701a      	strb	r2, [r3, #0]
 8009db6:	e06c      	b.n	8009e92 <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009db8:	2524      	movs	r5, #36	@ 0x24
 8009dba:	197b      	adds	r3, r7, r5
 8009dbc:	881b      	ldrh	r3, [r3, #0]
 8009dbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8009dc0:	d91a      	bls.n	8009df8 <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009dc2:	197c      	adds	r4, r7, r5
 8009dc4:	197b      	adds	r3, r7, r5
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	2100      	movs	r1, #0
 8009dca:	0018      	movs	r0, r3
 8009dcc:	f001 fc1e 	bl	800b60c <ff_convert>
 8009dd0:	0003      	movs	r3, r0
 8009dd2:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009dd4:	197b      	adds	r3, r7, r5
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d006      	beq.n	8009dea <create_name+0x2a2>
 8009ddc:	197b      	adds	r3, r7, r5
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	3b80      	subs	r3, #128	@ 0x80
 8009de2:	4a2f      	ldr	r2, [pc, #188]	@ (8009ea0 <create_name+0x358>)
 8009de4:	5cd2      	ldrb	r2, [r2, r3]
 8009de6:	197b      	adds	r3, r7, r5
 8009de8:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009dea:	2227      	movs	r2, #39	@ 0x27
 8009dec:	18bb      	adds	r3, r7, r2
 8009dee:	18ba      	adds	r2, r7, r2
 8009df0:	7812      	ldrb	r2, [r2, #0]
 8009df2:	2102      	movs	r1, #2
 8009df4:	430a      	orrs	r2, r1
 8009df6:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009df8:	2224      	movs	r2, #36	@ 0x24
 8009dfa:	18bb      	adds	r3, r7, r2
 8009dfc:	881b      	ldrh	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d008      	beq.n	8009e14 <create_name+0x2cc>
 8009e02:	18bb      	adds	r3, r7, r2
 8009e04:	881a      	ldrh	r2, [r3, #0]
 8009e06:	4b27      	ldr	r3, [pc, #156]	@ (8009ea4 <create_name+0x35c>)
 8009e08:	0011      	movs	r1, r2
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f7fe fae9 	bl	80083e2 <chk_chr>
 8009e10:	1e03      	subs	r3, r0, #0
 8009e12:	d00b      	beq.n	8009e2c <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009e14:	2324      	movs	r3, #36	@ 0x24
 8009e16:	18fb      	adds	r3, r7, r3
 8009e18:	225f      	movs	r2, #95	@ 0x5f
 8009e1a:	801a      	strh	r2, [r3, #0]
 8009e1c:	2227      	movs	r2, #39	@ 0x27
 8009e1e:	18bb      	adds	r3, r7, r2
 8009e20:	18ba      	adds	r2, r7, r2
 8009e22:	7812      	ldrb	r2, [r2, #0]
 8009e24:	2103      	movs	r1, #3
 8009e26:	430a      	orrs	r2, r1
 8009e28:	701a      	strb	r2, [r3, #0]
 8009e2a:	e025      	b.n	8009e78 <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009e2c:	2224      	movs	r2, #36	@ 0x24
 8009e2e:	18bb      	adds	r3, r7, r2
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	2b40      	cmp	r3, #64	@ 0x40
 8009e34:	d90b      	bls.n	8009e4e <create_name+0x306>
 8009e36:	18bb      	adds	r3, r7, r2
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	2b5a      	cmp	r3, #90	@ 0x5a
 8009e3c:	d807      	bhi.n	8009e4e <create_name+0x306>
					b |= 2;
 8009e3e:	2226      	movs	r2, #38	@ 0x26
 8009e40:	18bb      	adds	r3, r7, r2
 8009e42:	18ba      	adds	r2, r7, r2
 8009e44:	7812      	ldrb	r2, [r2, #0]
 8009e46:	2102      	movs	r1, #2
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	701a      	strb	r2, [r3, #0]
 8009e4c:	e014      	b.n	8009e78 <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009e4e:	2024      	movs	r0, #36	@ 0x24
 8009e50:	183b      	adds	r3, r7, r0
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	2b60      	cmp	r3, #96	@ 0x60
 8009e56:	d90f      	bls.n	8009e78 <create_name+0x330>
 8009e58:	183b      	adds	r3, r7, r0
 8009e5a:	881b      	ldrh	r3, [r3, #0]
 8009e5c:	2b7a      	cmp	r3, #122	@ 0x7a
 8009e5e:	d80b      	bhi.n	8009e78 <create_name+0x330>
						b |= 1; w -= 0x20;
 8009e60:	2226      	movs	r2, #38	@ 0x26
 8009e62:	18bb      	adds	r3, r7, r2
 8009e64:	18ba      	adds	r2, r7, r2
 8009e66:	7812      	ldrb	r2, [r2, #0]
 8009e68:	2101      	movs	r1, #1
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	701a      	strb	r2, [r3, #0]
 8009e6e:	183b      	adds	r3, r7, r0
 8009e70:	183a      	adds	r2, r7, r0
 8009e72:	8812      	ldrh	r2, [r2, #0]
 8009e74:	3a20      	subs	r2, #32
 8009e76:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	1c5a      	adds	r2, r3, #1
 8009e7c:	623a      	str	r2, [r7, #32]
 8009e7e:	2224      	movs	r2, #36	@ 0x24
 8009e80:	18ba      	adds	r2, r7, r2
 8009e82:	8812      	ldrh	r2, [r2, #0]
 8009e84:	b2d0      	uxtb	r0, r2
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	2124      	movs	r1, #36	@ 0x24
 8009e8a:	18d3      	adds	r3, r2, r3
 8009e8c:	185b      	adds	r3, r3, r1
 8009e8e:	1c02      	adds	r2, r0, #0
 8009e90:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8009e92:	e73d      	b.n	8009d10 <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 8009e94:	46c0      	nop			@ (mov r8, r8)
 8009e96:	e008      	b.n	8009eaa <create_name+0x362>
 8009e98:	080101bc 	.word	0x080101bc
 8009e9c:	7fffffff 	.word	0x7fffffff
 8009ea0:	08010364 	.word	0x08010364
 8009ea4:	080101c8 	.word	0x080101c8
			if (si > di) break;			/* No extension */
 8009ea8:	46c0      	nop			@ (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2224      	movs	r2, #36	@ 0x24
 8009eae:	5c9b      	ldrb	r3, [r3, r2]
 8009eb0:	2be5      	cmp	r3, #229	@ 0xe5
 8009eb2:	d103      	bne.n	8009ebc <create_name+0x374>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2224      	movs	r2, #36	@ 0x24
 8009eb8:	2105      	movs	r1, #5
 8009eba:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	2b08      	cmp	r3, #8
 8009ec0:	d105      	bne.n	8009ece <create_name+0x386>
 8009ec2:	2226      	movs	r2, #38	@ 0x26
 8009ec4:	18bb      	adds	r3, r7, r2
 8009ec6:	18ba      	adds	r2, r7, r2
 8009ec8:	7812      	ldrb	r2, [r2, #0]
 8009eca:	0092      	lsls	r2, r2, #2
 8009ecc:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009ece:	2126      	movs	r1, #38	@ 0x26
 8009ed0:	187b      	adds	r3, r7, r1
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	220c      	movs	r2, #12
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	2b0c      	cmp	r3, #12
 8009eda:	d005      	beq.n	8009ee8 <create_name+0x3a0>
 8009edc:	187b      	adds	r3, r7, r1
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	2203      	movs	r2, #3
 8009ee2:	4013      	ands	r3, r2
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d106      	bne.n	8009ef6 <create_name+0x3ae>
 8009ee8:	2227      	movs	r2, #39	@ 0x27
 8009eea:	18bb      	adds	r3, r7, r2
 8009eec:	18ba      	adds	r2, r7, r2
 8009eee:	7812      	ldrb	r2, [r2, #0]
 8009ef0:	2102      	movs	r1, #2
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009ef6:	2127      	movs	r1, #39	@ 0x27
 8009ef8:	187b      	adds	r3, r7, r1
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	2202      	movs	r2, #2
 8009efe:	4013      	ands	r3, r2
 8009f00:	d11a      	bne.n	8009f38 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009f02:	2326      	movs	r3, #38	@ 0x26
 8009f04:	18fb      	adds	r3, r7, r3
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2203      	movs	r2, #3
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d105      	bne.n	8009f1c <create_name+0x3d4>
 8009f10:	187b      	adds	r3, r7, r1
 8009f12:	187a      	adds	r2, r7, r1
 8009f14:	7812      	ldrb	r2, [r2, #0]
 8009f16:	2110      	movs	r1, #16
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009f1c:	2326      	movs	r3, #38	@ 0x26
 8009f1e:	18fb      	adds	r3, r7, r3
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	220c      	movs	r2, #12
 8009f24:	4013      	ands	r3, r2
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	d106      	bne.n	8009f38 <create_name+0x3f0>
 8009f2a:	2227      	movs	r2, #39	@ 0x27
 8009f2c:	18bb      	adds	r3, r7, r2
 8009f2e:	18ba      	adds	r2, r7, r2
 8009f30:	7812      	ldrb	r2, [r2, #0]
 8009f32:	2108      	movs	r1, #8
 8009f34:	430a      	orrs	r2, r1
 8009f36:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2227      	movs	r2, #39	@ 0x27
 8009f3c:	18ba      	adds	r2, r7, r2
 8009f3e:	212f      	movs	r1, #47	@ 0x2f
 8009f40:	7812      	ldrb	r2, [r2, #0]
 8009f42:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 8009f44:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009f46:	0018      	movs	r0, r3
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	b00a      	add	sp, #40	@ 0x28
 8009f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8009f4e:	46c0      	nop			@ (mov r8, r8)

08009f50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009f50:	b5b0      	push	{r4, r5, r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009f64:	e002      	b.n	8009f6c <follow_path+0x1c>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b2f      	cmp	r3, #47	@ 0x2f
 8009f72:	d0f8      	beq.n	8009f66 <follow_path+0x16>
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b5c      	cmp	r3, #92	@ 0x5c
 8009f7a:	d0f4      	beq.n	8009f66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	2b1f      	cmp	r3, #31
 8009f88:	d80d      	bhi.n	8009fa6 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	222f      	movs	r2, #47	@ 0x2f
 8009f8e:	2180      	movs	r1, #128	@ 0x80
 8009f90:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 8009f92:	2317      	movs	r3, #23
 8009f94:	18fc      	adds	r4, r7, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2100      	movs	r1, #0
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	f7ff f818 	bl	8008fd0 <dir_sdi>
 8009fa0:	0003      	movs	r3, r0
 8009fa2:	7023      	strb	r3, [r4, #0]
 8009fa4:	e057      	b.n	800a056 <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009fa6:	2517      	movs	r5, #23
 8009fa8:	197c      	adds	r4, r7, r5
 8009faa:	003a      	movs	r2, r7
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	0011      	movs	r1, r2
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	f7ff fdc9 	bl	8009b48 <create_name>
 8009fb6:	0003      	movs	r3, r0
 8009fb8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009fba:	197b      	adds	r3, r7, r5
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d144      	bne.n	800a04c <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009fc2:	197c      	adds	r4, r7, r5
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	0018      	movs	r0, r3
 8009fc8:	f7ff fbb3 	bl	8009732 <dir_find>
 8009fcc:	0003      	movs	r3, r0
 8009fce:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8009fd0:	200b      	movs	r0, #11
 8009fd2:	183b      	adds	r3, r7, r0
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	212f      	movs	r1, #47	@ 0x2f
 8009fd8:	5c52      	ldrb	r2, [r2, r1]
 8009fda:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8009fdc:	197b      	adds	r3, r7, r5
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00c      	beq.n	8009ffe <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009fe4:	197b      	adds	r3, r7, r5
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	2b04      	cmp	r3, #4
 8009fea:	d131      	bne.n	800a050 <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009fec:	183b      	adds	r3, r7, r0
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	2204      	movs	r2, #4
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	d12c      	bne.n	800a050 <follow_path+0x100>
 8009ff6:	197b      	adds	r3, r7, r5
 8009ff8:	2205      	movs	r2, #5
 8009ffa:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8009ffc:	e028      	b.n	800a050 <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ffe:	230b      	movs	r3, #11
 800a000:	18fb      	adds	r3, r7, r3
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2204      	movs	r2, #4
 800a006:	4013      	ands	r3, r2
 800a008:	d124      	bne.n	800a054 <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	799b      	ldrb	r3, [r3, #6]
 800a00e:	001a      	movs	r2, r3
 800a010:	2310      	movs	r3, #16
 800a012:	4013      	ands	r3, r2
 800a014:	d104      	bne.n	800a020 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 800a016:	2317      	movs	r3, #23
 800a018:	18fb      	adds	r3, r7, r3
 800a01a:	2205      	movs	r2, #5
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	e01a      	b.n	800a056 <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	3338      	adds	r3, #56	@ 0x38
 800a024:	001c      	movs	r4, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	695a      	ldr	r2, [r3, #20]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	899b      	ldrh	r3, [r3, #12]
 800a02e:	0019      	movs	r1, r3
 800a030:	0010      	movs	r0, r2
 800a032:	f7f6 f90b 	bl	800024c <__aeabi_uidivmod>
 800a036:	000b      	movs	r3, r1
 800a038:	18e2      	adds	r2, r4, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	0011      	movs	r1, r2
 800a03e:	0018      	movs	r0, r3
 800a040:	f7ff f986 	bl	8009350 <ld_clust>
 800a044:	0002      	movs	r2, r0
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a04a:	e7ac      	b.n	8009fa6 <follow_path+0x56>
			if (res != FR_OK) break;
 800a04c:	46c0      	nop			@ (mov r8, r8)
 800a04e:	e002      	b.n	800a056 <follow_path+0x106>
				break;
 800a050:	46c0      	nop			@ (mov r8, r8)
 800a052:	e000      	b.n	800a056 <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a054:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 800a056:	2317      	movs	r3, #23
 800a058:	18fb      	adds	r3, r7, r3
 800a05a:	781b      	ldrb	r3, [r3, #0]
}
 800a05c:	0018      	movs	r0, r3
 800a05e:	46bd      	mov	sp, r7
 800a060:	b006      	add	sp, #24
 800a062:	bdb0      	pop	{r4, r5, r7, pc}

0800a064 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a06c:	2301      	movs	r3, #1
 800a06e:	425b      	negs	r3, r3
 800a070:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d031      	beq.n	800a0de <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	e002      	b.n	800a088 <get_ldnumber+0x24>
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	3301      	adds	r3, #1
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	2b1f      	cmp	r3, #31
 800a08e:	d903      	bls.n	800a098 <get_ldnumber+0x34>
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b3a      	cmp	r3, #58	@ 0x3a
 800a096:	d1f4      	bne.n	800a082 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b3a      	cmp	r3, #58	@ 0x3a
 800a09e:	d11c      	bne.n	800a0da <get_ldnumber+0x76>
			tp = *path;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	60fa      	str	r2, [r7, #12]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	3b30      	subs	r3, #48	@ 0x30
 800a0b0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	2b09      	cmp	r3, #9
 800a0b6:	d80e      	bhi.n	800a0d6 <get_ldnumber+0x72>
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d10a      	bne.n	800a0d6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d107      	bne.n	800a0d6 <get_ldnumber+0x72>
					vol = (int)i;
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	617b      	str	r3, [r7, #20]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	e002      	b.n	800a0e0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a0da:	2300      	movs	r3, #0
 800a0dc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a0de:	693b      	ldr	r3, [r7, #16]
}
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	b006      	add	sp, #24
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	70da      	strb	r2, [r3, #3]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	4252      	negs	r2, r2
 800a0fe:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	0011      	movs	r1, r2
 800a106:	0018      	movs	r0, r3
 800a108:	f7fe fb36 	bl	8008778 <move_window>
 800a10c:	1e03      	subs	r3, r0, #0
 800a10e:	d001      	beq.n	800a114 <check_fs+0x2c>
 800a110:	2304      	movs	r3, #4
 800a112:	e037      	b.n	800a184 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3338      	adds	r3, #56	@ 0x38
 800a118:	33ff      	adds	r3, #255	@ 0xff
 800a11a:	33ff      	adds	r3, #255	@ 0xff
 800a11c:	0018      	movs	r0, r3
 800a11e:	f7fe f87f 	bl	8008220 <ld_word>
 800a122:	0003      	movs	r3, r0
 800a124:	001a      	movs	r2, r3
 800a126:	4b19      	ldr	r3, [pc, #100]	@ (800a18c <check_fs+0xa4>)
 800a128:	429a      	cmp	r2, r3
 800a12a:	d001      	beq.n	800a130 <check_fs+0x48>
 800a12c:	2303      	movs	r3, #3
 800a12e:	e029      	b.n	800a184 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2238      	movs	r2, #56	@ 0x38
 800a134:	5c9b      	ldrb	r3, [r3, r2]
 800a136:	2be9      	cmp	r3, #233	@ 0xe9
 800a138:	d009      	beq.n	800a14e <check_fs+0x66>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2238      	movs	r2, #56	@ 0x38
 800a13e:	5c9b      	ldrb	r3, [r3, r2]
 800a140:	2beb      	cmp	r3, #235	@ 0xeb
 800a142:	d11e      	bne.n	800a182 <check_fs+0x9a>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	223a      	movs	r2, #58	@ 0x3a
 800a148:	5c9b      	ldrb	r3, [r3, r2]
 800a14a:	2b90      	cmp	r3, #144	@ 0x90
 800a14c:	d119      	bne.n	800a182 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	3338      	adds	r3, #56	@ 0x38
 800a152:	3336      	adds	r3, #54	@ 0x36
 800a154:	0018      	movs	r0, r3
 800a156:	f7fe f87e 	bl	8008256 <ld_dword>
 800a15a:	0003      	movs	r3, r0
 800a15c:	021b      	lsls	r3, r3, #8
 800a15e:	0a1b      	lsrs	r3, r3, #8
 800a160:	4a0b      	ldr	r2, [pc, #44]	@ (800a190 <check_fs+0xa8>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d101      	bne.n	800a16a <check_fs+0x82>
 800a166:	2300      	movs	r3, #0
 800a168:	e00c      	b.n	800a184 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	3338      	adds	r3, #56	@ 0x38
 800a16e:	3352      	adds	r3, #82	@ 0x52
 800a170:	0018      	movs	r0, r3
 800a172:	f7fe f870 	bl	8008256 <ld_dword>
 800a176:	0003      	movs	r3, r0
 800a178:	4a06      	ldr	r2, [pc, #24]	@ (800a194 <check_fs+0xac>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d101      	bne.n	800a182 <check_fs+0x9a>
 800a17e:	2300      	movs	r3, #0
 800a180:	e000      	b.n	800a184 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a182:	2302      	movs	r3, #2
}
 800a184:	0018      	movs	r0, r3
 800a186:	46bd      	mov	sp, r7
 800a188:	b002      	add	sp, #8
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	0000aa55 	.word	0x0000aa55
 800a190:	00544146 	.word	0x00544146
 800a194:	33544146 	.word	0x33544146

0800a198 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a198:	b5b0      	push	{r4, r5, r7, lr}
 800a19a:	b096      	sub	sp, #88	@ 0x58
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	1dfb      	adds	r3, r7, #7
 800a1a4:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f7ff ff58 	bl	800a064 <get_ldnumber>
 800a1b4:	0003      	movs	r3, r0
 800a1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	da01      	bge.n	800a1c2 <find_volume+0x2a>
 800a1be:	230b      	movs	r3, #11
 800a1c0:	e283      	b.n	800a6ca <find_volume+0x532>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a1c2:	4bc2      	ldr	r3, [pc, #776]	@ (800a4cc <find_volume+0x334>)
 800a1c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a1c6:	0092      	lsls	r2, r2, #2
 800a1c8:	58d3      	ldr	r3, [r2, r3]
 800a1ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <find_volume+0x3e>
 800a1d2:	230c      	movs	r3, #12
 800a1d4:	e279      	b.n	800a6ca <find_volume+0x532>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a1dc:	1dfb      	adds	r3, r7, #7
 800a1de:	1dfa      	adds	r2, r7, #7
 800a1e0:	7812      	ldrb	r2, [r2, #0]
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	438a      	bics	r2, r1
 800a1e6:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01b      	beq.n	800a228 <find_volume+0x90>
		stat = disk_status(fs->drv);
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f2:	785b      	ldrb	r3, [r3, #1]
 800a1f4:	2537      	movs	r5, #55	@ 0x37
 800a1f6:	197c      	adds	r4, r7, r5
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	f7fd ff47 	bl	800808c <disk_status>
 800a1fe:	0003      	movs	r3, r0
 800a200:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a202:	0029      	movs	r1, r5
 800a204:	187b      	adds	r3, r7, r1
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	2201      	movs	r2, #1
 800a20a:	4013      	ands	r3, r2
 800a20c:	d10c      	bne.n	800a228 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a20e:	1dfb      	adds	r3, r7, #7
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d006      	beq.n	800a224 <find_volume+0x8c>
 800a216:	187b      	adds	r3, r7, r1
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	2204      	movs	r2, #4
 800a21c:	4013      	ands	r3, r2
 800a21e:	d001      	beq.n	800a224 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 800a220:	230a      	movs	r3, #10
 800a222:	e252      	b.n	800a6ca <find_volume+0x532>
			}
			return FR_OK;				/* The file system object is valid */
 800a224:	2300      	movs	r3, #0
 800a226:	e250      	b.n	800a6ca <find_volume+0x532>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22a:	2200      	movs	r2, #0
 800a22c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a230:	b2da      	uxtb	r2, r3
 800a232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a234:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a238:	785b      	ldrb	r3, [r3, #1]
 800a23a:	2537      	movs	r5, #55	@ 0x37
 800a23c:	197c      	adds	r4, r7, r5
 800a23e:	0018      	movs	r0, r3
 800a240:	f7fd ff46 	bl	80080d0 <disk_initialize>
 800a244:	0003      	movs	r3, r0
 800a246:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a248:	197b      	adds	r3, r7, r5
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	2201      	movs	r2, #1
 800a24e:	4013      	ands	r3, r2
 800a250:	d001      	beq.n	800a256 <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a252:	2303      	movs	r3, #3
 800a254:	e239      	b.n	800a6ca <find_volume+0x532>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a256:	1dfb      	adds	r3, r7, #7
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d007      	beq.n	800a26e <find_volume+0xd6>
 800a25e:	2337      	movs	r3, #55	@ 0x37
 800a260:	18fb      	adds	r3, r7, r3
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	2204      	movs	r2, #4
 800a266:	4013      	ands	r3, r2
 800a268:	d001      	beq.n	800a26e <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800a26a:	230a      	movs	r3, #10
 800a26c:	e22d      	b.n	800a6ca <find_volume+0x532>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a270:	7858      	ldrb	r0, [r3, #1]
 800a272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a274:	330c      	adds	r3, #12
 800a276:	001a      	movs	r2, r3
 800a278:	2102      	movs	r1, #2
 800a27a:	f7fd ffa9 	bl	80081d0 <disk_ioctl>
 800a27e:	1e03      	subs	r3, r0, #0
 800a280:	d001      	beq.n	800a286 <find_volume+0xee>
 800a282:	2301      	movs	r3, #1
 800a284:	e221      	b.n	800a6ca <find_volume+0x532>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a288:	899a      	ldrh	r2, [r3, #12]
 800a28a:	2380      	movs	r3, #128	@ 0x80
 800a28c:	015b      	lsls	r3, r3, #5
 800a28e:	429a      	cmp	r2, r3
 800a290:	d80d      	bhi.n	800a2ae <find_volume+0x116>
 800a292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a294:	899a      	ldrh	r2, [r3, #12]
 800a296:	2380      	movs	r3, #128	@ 0x80
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d307      	bcc.n	800a2ae <find_volume+0x116>
 800a29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a0:	899b      	ldrh	r3, [r3, #12]
 800a2a2:	001a      	movs	r2, r3
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a6:	899b      	ldrh	r3, [r3, #12]
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	d001      	beq.n	800a2b2 <find_volume+0x11a>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e20b      	b.n	800a6ca <find_volume+0x532>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a2b6:	2557      	movs	r5, #87	@ 0x57
 800a2b8:	197c      	adds	r4, r7, r5
 800a2ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2be:	0011      	movs	r1, r2
 800a2c0:	0018      	movs	r0, r3
 800a2c2:	f7ff ff11 	bl	800a0e8 <check_fs>
 800a2c6:	0003      	movs	r3, r0
 800a2c8:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a2ca:	197b      	adds	r3, r7, r5
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d14b      	bne.n	800a36a <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2d6:	e01d      	b.n	800a314 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2da:	3338      	adds	r3, #56	@ 0x38
 800a2dc:	001a      	movs	r2, r3
 800a2de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2e0:	011b      	lsls	r3, r3, #4
 800a2e2:	33bf      	adds	r3, #191	@ 0xbf
 800a2e4:	33ff      	adds	r3, #255	@ 0xff
 800a2e6:	18d3      	adds	r3, r2, r3
 800a2e8:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d006      	beq.n	800a302 <find_volume+0x16a>
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	f7fd ffac 	bl	8008256 <ld_dword>
 800a2fe:	0003      	movs	r3, r0
 800a300:	e000      	b.n	800a304 <find_volume+0x16c>
 800a302:	2300      	movs	r3, #0
 800a304:	2214      	movs	r2, #20
 800a306:	18ba      	adds	r2, r7, r2
 800a308:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a30a:	0089      	lsls	r1, r1, #2
 800a30c:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a30e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a310:	3301      	adds	r3, #1
 800a312:	643b      	str	r3, [r7, #64]	@ 0x40
 800a314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a316:	2b03      	cmp	r3, #3
 800a318:	d9de      	bls.n	800a2d8 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a31a:	2300      	movs	r3, #0
 800a31c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a31e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <find_volume+0x192>
 800a324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a326:	3b01      	subs	r3, #1
 800a328:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a32a:	2314      	movs	r3, #20
 800a32c:	18fb      	adds	r3, r7, r3
 800a32e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a330:	0092      	lsls	r2, r2, #2
 800a332:	58d3      	ldr	r3, [r2, r3]
 800a334:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d008      	beq.n	800a34e <find_volume+0x1b6>
 800a33c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a340:	0011      	movs	r1, r2
 800a342:	0018      	movs	r0, r3
 800a344:	f7ff fed0 	bl	800a0e8 <check_fs>
 800a348:	0003      	movs	r3, r0
 800a34a:	001a      	movs	r2, r3
 800a34c:	e000      	b.n	800a350 <find_volume+0x1b8>
 800a34e:	2203      	movs	r2, #3
 800a350:	2157      	movs	r1, #87	@ 0x57
 800a352:	187b      	adds	r3, r7, r1
 800a354:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a356:	187b      	adds	r3, r7, r1
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d905      	bls.n	800a36a <find_volume+0x1d2>
 800a35e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a360:	3301      	adds	r3, #1
 800a362:	643b      	str	r3, [r7, #64]	@ 0x40
 800a364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a366:	2b03      	cmp	r3, #3
 800a368:	d9df      	bls.n	800a32a <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a36a:	2357      	movs	r3, #87	@ 0x57
 800a36c:	18fb      	adds	r3, r7, r3
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	2b04      	cmp	r3, #4
 800a372:	d101      	bne.n	800a378 <find_volume+0x1e0>
 800a374:	2301      	movs	r3, #1
 800a376:	e1a8      	b.n	800a6ca <find_volume+0x532>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a378:	2357      	movs	r3, #87	@ 0x57
 800a37a:	18fb      	adds	r3, r7, r3
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d901      	bls.n	800a386 <find_volume+0x1ee>
 800a382:	230d      	movs	r3, #13
 800a384:	e1a1      	b.n	800a6ca <find_volume+0x532>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a388:	3338      	adds	r3, #56	@ 0x38
 800a38a:	330b      	adds	r3, #11
 800a38c:	0018      	movs	r0, r3
 800a38e:	f7fd ff47 	bl	8008220 <ld_word>
 800a392:	0003      	movs	r3, r0
 800a394:	001a      	movs	r2, r3
 800a396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a398:	899b      	ldrh	r3, [r3, #12]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d001      	beq.n	800a3a2 <find_volume+0x20a>
 800a39e:	230d      	movs	r3, #13
 800a3a0:	e193      	b.n	800a6ca <find_volume+0x532>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a4:	3338      	adds	r3, #56	@ 0x38
 800a3a6:	3316      	adds	r3, #22
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	f7fd ff39 	bl	8008220 <ld_word>
 800a3ae:	0003      	movs	r3, r0
 800a3b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a3b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d107      	bne.n	800a3c8 <find_volume+0x230>
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ba:	3338      	adds	r3, #56	@ 0x38
 800a3bc:	3324      	adds	r3, #36	@ 0x24
 800a3be:	0018      	movs	r0, r3
 800a3c0:	f7fd ff49 	bl	8008256 <ld_dword>
 800a3c4:	0003      	movs	r3, r0
 800a3c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a3cc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d0:	2248      	movs	r2, #72	@ 0x48
 800a3d2:	5c9a      	ldrb	r2, [r3, r2]
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3da:	789b      	ldrb	r3, [r3, #2]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d005      	beq.n	800a3ec <find_volume+0x254>
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e2:	789b      	ldrb	r3, [r3, #2]
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d001      	beq.n	800a3ec <find_volume+0x254>
 800a3e8:	230d      	movs	r3, #13
 800a3ea:	e16e      	b.n	800a6ca <find_volume+0x532>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ee:	789b      	ldrb	r3, [r3, #2]
 800a3f0:	001a      	movs	r2, r3
 800a3f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3f4:	4353      	muls	r3, r2
 800a3f6:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fa:	2245      	movs	r2, #69	@ 0x45
 800a3fc:	5c9b      	ldrb	r3, [r3, r2]
 800a3fe:	001a      	movs	r2, r3
 800a400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a402:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a406:	895b      	ldrh	r3, [r3, #10]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d007      	beq.n	800a41c <find_volume+0x284>
 800a40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40e:	895b      	ldrh	r3, [r3, #10]
 800a410:	001a      	movs	r2, r3
 800a412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a414:	895b      	ldrh	r3, [r3, #10]
 800a416:	3b01      	subs	r3, #1
 800a418:	4013      	ands	r3, r2
 800a41a:	d001      	beq.n	800a420 <find_volume+0x288>
 800a41c:	230d      	movs	r3, #13
 800a41e:	e154      	b.n	800a6ca <find_volume+0x532>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	3338      	adds	r3, #56	@ 0x38
 800a424:	3311      	adds	r3, #17
 800a426:	0018      	movs	r0, r3
 800a428:	f7fd fefa 	bl	8008220 <ld_word>
 800a42c:	0003      	movs	r3, r0
 800a42e:	001a      	movs	r2, r3
 800a430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a432:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a436:	891a      	ldrh	r2, [r3, #8]
 800a438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43a:	899b      	ldrh	r3, [r3, #12]
 800a43c:	095b      	lsrs	r3, r3, #5
 800a43e:	b29b      	uxth	r3, r3
 800a440:	0019      	movs	r1, r3
 800a442:	0010      	movs	r0, r2
 800a444:	f7f5 ff02 	bl	800024c <__aeabi_uidivmod>
 800a448:	000b      	movs	r3, r1
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <find_volume+0x2bc>
 800a450:	230d      	movs	r3, #13
 800a452:	e13a      	b.n	800a6ca <find_volume+0x532>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a456:	3338      	adds	r3, #56	@ 0x38
 800a458:	3313      	adds	r3, #19
 800a45a:	0018      	movs	r0, r3
 800a45c:	f7fd fee0 	bl	8008220 <ld_word>
 800a460:	0003      	movs	r3, r0
 800a462:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a466:	2b00      	cmp	r3, #0
 800a468:	d107      	bne.n	800a47a <find_volume+0x2e2>
 800a46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46c:	3338      	adds	r3, #56	@ 0x38
 800a46e:	3320      	adds	r3, #32
 800a470:	0018      	movs	r0, r3
 800a472:	f7fd fef0 	bl	8008256 <ld_dword>
 800a476:	0003      	movs	r3, r0
 800a478:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47c:	3338      	adds	r3, #56	@ 0x38
 800a47e:	330e      	adds	r3, #14
 800a480:	252e      	movs	r5, #46	@ 0x2e
 800a482:	197c      	adds	r4, r7, r5
 800a484:	0018      	movs	r0, r3
 800a486:	f7fd fecb 	bl	8008220 <ld_word>
 800a48a:	0003      	movs	r3, r0
 800a48c:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a48e:	197b      	adds	r3, r7, r5
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <find_volume+0x302>
 800a496:	230d      	movs	r3, #13
 800a498:	e117      	b.n	800a6ca <find_volume+0x532>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a49a:	232e      	movs	r3, #46	@ 0x2e
 800a49c:	18fb      	adds	r3, r7, r3
 800a49e:	881a      	ldrh	r2, [r3, #0]
 800a4a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4a2:	18d4      	adds	r4, r2, r3
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a6:	891a      	ldrh	r2, [r3, #8]
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4aa:	899b      	ldrh	r3, [r3, #12]
 800a4ac:	095b      	lsrs	r3, r3, #5
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	0019      	movs	r1, r3
 800a4b2:	0010      	movs	r0, r2
 800a4b4:	f7f5 fe44 	bl	8000140 <__udivsi3>
 800a4b8:	0003      	movs	r3, r0
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	18e3      	adds	r3, r4, r3
 800a4be:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a4c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d203      	bcs.n	800a4d0 <find_volume+0x338>
 800a4c8:	230d      	movs	r3, #13
 800a4ca:	e0fe      	b.n	800a6ca <find_volume+0x532>
 800a4cc:	20000388 	.word	0x20000388
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a4d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d4:	1ad2      	subs	r2, r2, r3
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d8:	895b      	ldrh	r3, [r3, #10]
 800a4da:	0019      	movs	r1, r3
 800a4dc:	0010      	movs	r0, r2
 800a4de:	f7f5 fe2f 	bl	8000140 <__udivsi3>
 800a4e2:	0003      	movs	r3, r0
 800a4e4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <find_volume+0x358>
 800a4ec:	230d      	movs	r3, #13
 800a4ee:	e0ec      	b.n	800a6ca <find_volume+0x532>
		fmt = FS_FAT32;
 800a4f0:	2157      	movs	r1, #87	@ 0x57
 800a4f2:	187b      	adds	r3, r7, r1
 800a4f4:	2203      	movs	r2, #3
 800a4f6:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fa:	4a76      	ldr	r2, [pc, #472]	@ (800a6d4 <find_volume+0x53c>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d802      	bhi.n	800a506 <find_volume+0x36e>
 800a500:	187b      	adds	r3, r7, r1
 800a502:	2202      	movs	r2, #2
 800a504:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a508:	4a73      	ldr	r2, [pc, #460]	@ (800a6d8 <find_volume+0x540>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d803      	bhi.n	800a516 <find_volume+0x37e>
 800a50e:	2357      	movs	r3, #87	@ 0x57
 800a510:	18fb      	adds	r3, r7, r3
 800a512:	2201      	movs	r2, #1
 800a514:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a518:	1c9a      	adds	r2, r3, #2
 800a51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a520:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a522:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a524:	232e      	movs	r3, #46	@ 0x2e
 800a526:	18fb      	adds	r3, r7, r3
 800a528:	881a      	ldrh	r2, [r3, #0]
 800a52a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a52c:	18d2      	adds	r2, r2, r3
 800a52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a530:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a532:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a536:	18d2      	adds	r2, r2, r3
 800a538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800a53c:	2357      	movs	r3, #87	@ 0x57
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	2b03      	cmp	r3, #3
 800a544:	d11d      	bne.n	800a582 <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a548:	3338      	adds	r3, #56	@ 0x38
 800a54a:	332a      	adds	r3, #42	@ 0x2a
 800a54c:	0018      	movs	r0, r3
 800a54e:	f7fd fe67 	bl	8008220 <ld_word>
 800a552:	1e03      	subs	r3, r0, #0
 800a554:	d001      	beq.n	800a55a <find_volume+0x3c2>
 800a556:	230d      	movs	r3, #13
 800a558:	e0b7      	b.n	800a6ca <find_volume+0x532>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55c:	891b      	ldrh	r3, [r3, #8]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <find_volume+0x3ce>
 800a562:	230d      	movs	r3, #13
 800a564:	e0b1      	b.n	800a6ca <find_volume+0x532>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a568:	3338      	adds	r3, #56	@ 0x38
 800a56a:	332c      	adds	r3, #44	@ 0x2c
 800a56c:	0018      	movs	r0, r3
 800a56e:	f7fd fe72 	bl	8008256 <ld_dword>
 800a572:	0002      	movs	r2, r0
 800a574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a576:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57a:	69db      	ldr	r3, [r3, #28]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a580:	e020      	b.n	800a5c4 <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a584:	891b      	ldrh	r3, [r3, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <find_volume+0x3f6>
 800a58a:	230d      	movs	r3, #13
 800a58c:	e09d      	b.n	800a6ca <find_volume+0x532>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a590:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a594:	18d2      	adds	r2, r2, r3
 800a596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a598:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a59a:	2357      	movs	r3, #87	@ 0x57
 800a59c:	18fb      	adds	r3, r7, r3
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d103      	bne.n	800a5ac <find_volume+0x414>
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	005b      	lsls	r3, r3, #1
 800a5aa:	e00a      	b.n	800a5c2 <find_volume+0x42a>
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ae:	69da      	ldr	r2, [r3, #28]
 800a5b0:	0013      	movs	r3, r2
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	189b      	adds	r3, r3, r2
 800a5b6:	085a      	lsrs	r2, r3, #1
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	2101      	movs	r1, #1
 800a5be:	400b      	ands	r3, r1
 800a5c0:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a5c2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c6:	6a1c      	ldr	r4, [r3, #32]
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ca:	899b      	ldrh	r3, [r3, #12]
 800a5cc:	001a      	movs	r2, r3
 800a5ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5d0:	18d3      	adds	r3, r2, r3
 800a5d2:	1e5a      	subs	r2, r3, #1
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d6:	899b      	ldrh	r3, [r3, #12]
 800a5d8:	0019      	movs	r1, r3
 800a5da:	0010      	movs	r0, r2
 800a5dc:	f7f5 fdb0 	bl	8000140 <__udivsi3>
 800a5e0:	0003      	movs	r3, r0
 800a5e2:	429c      	cmp	r4, r3
 800a5e4:	d201      	bcs.n	800a5ea <find_volume+0x452>
 800a5e6:	230d      	movs	r3, #13
 800a5e8:	e06f      	b.n	800a6ca <find_volume+0x532>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	4252      	negs	r2, r2
 800a5f0:	619a      	str	r2, [r3, #24]
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f4:	699a      	ldr	r2, [r3, #24]
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fc:	2280      	movs	r2, #128	@ 0x80
 800a5fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a600:	2357      	movs	r3, #87	@ 0x57
 800a602:	18fb      	adds	r3, r7, r3
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	2b03      	cmp	r3, #3
 800a608:	d148      	bne.n	800a69c <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60c:	3338      	adds	r3, #56	@ 0x38
 800a60e:	3330      	adds	r3, #48	@ 0x30
 800a610:	0018      	movs	r0, r3
 800a612:	f7fd fe05 	bl	8008220 <ld_word>
 800a616:	0003      	movs	r3, r0
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d13f      	bne.n	800a69c <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a61c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a622:	0011      	movs	r1, r2
 800a624:	0018      	movs	r0, r3
 800a626:	f7fe f8a7 	bl	8008778 <move_window>
 800a62a:	1e03      	subs	r3, r0, #0
 800a62c:	d136      	bne.n	800a69c <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 800a62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a630:	2200      	movs	r2, #0
 800a632:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a636:	3338      	adds	r3, #56	@ 0x38
 800a638:	33ff      	adds	r3, #255	@ 0xff
 800a63a:	33ff      	adds	r3, #255	@ 0xff
 800a63c:	0018      	movs	r0, r3
 800a63e:	f7fd fdef 	bl	8008220 <ld_word>
 800a642:	0003      	movs	r3, r0
 800a644:	001a      	movs	r2, r3
 800a646:	4b25      	ldr	r3, [pc, #148]	@ (800a6dc <find_volume+0x544>)
 800a648:	429a      	cmp	r2, r3
 800a64a:	d127      	bne.n	800a69c <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64e:	3338      	adds	r3, #56	@ 0x38
 800a650:	0018      	movs	r0, r3
 800a652:	f7fd fe00 	bl	8008256 <ld_dword>
 800a656:	0003      	movs	r3, r0
 800a658:	4a21      	ldr	r2, [pc, #132]	@ (800a6e0 <find_volume+0x548>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d11e      	bne.n	800a69c <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a660:	3338      	adds	r3, #56	@ 0x38
 800a662:	33e5      	adds	r3, #229	@ 0xe5
 800a664:	33ff      	adds	r3, #255	@ 0xff
 800a666:	0018      	movs	r0, r3
 800a668:	f7fd fdf5 	bl	8008256 <ld_dword>
 800a66c:	0003      	movs	r3, r0
 800a66e:	4a1d      	ldr	r2, [pc, #116]	@ (800a6e4 <find_volume+0x54c>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d113      	bne.n	800a69c <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a676:	3338      	adds	r3, #56	@ 0x38
 800a678:	33e9      	adds	r3, #233	@ 0xe9
 800a67a:	33ff      	adds	r3, #255	@ 0xff
 800a67c:	0018      	movs	r0, r3
 800a67e:	f7fd fdea 	bl	8008256 <ld_dword>
 800a682:	0002      	movs	r2, r0
 800a684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a686:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68a:	3338      	adds	r3, #56	@ 0x38
 800a68c:	33ed      	adds	r3, #237	@ 0xed
 800a68e:	33ff      	adds	r3, #255	@ 0xff
 800a690:	0018      	movs	r0, r3
 800a692:	f7fd fde0 	bl	8008256 <ld_dword>
 800a696:	0002      	movs	r2, r0
 800a698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69e:	2257      	movs	r2, #87	@ 0x57
 800a6a0:	18ba      	adds	r2, r7, r2
 800a6a2:	7812      	ldrb	r2, [r2, #0]
 800a6a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a6a6:	4b10      	ldr	r3, [pc, #64]	@ (800a6e8 <find_volume+0x550>)
 800a6a8:	881b      	ldrh	r3, [r3, #0]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	4b0e      	ldr	r3, [pc, #56]	@ (800a6e8 <find_volume+0x550>)
 800a6b0:	801a      	strh	r2, [r3, #0]
 800a6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e8 <find_volume+0x550>)
 800a6b4:	881a      	ldrh	r2, [r3, #0]
 800a6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6bc:	4a0b      	ldr	r2, [pc, #44]	@ (800a6ec <find_volume+0x554>)
 800a6be:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c2:	0018      	movs	r0, r3
 800a6c4:	f7fd fff0 	bl	80086a8 <clear_lock>
#endif
	return FR_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	0018      	movs	r0, r3
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	b016      	add	sp, #88	@ 0x58
 800a6d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a6d2:	46c0      	nop			@ (mov r8, r8)
 800a6d4:	0000fff5 	.word	0x0000fff5
 800a6d8:	00000ff5 	.word	0x00000ff5
 800a6dc:	0000aa55 	.word	0x0000aa55
 800a6e0:	41615252 	.word	0x41615252
 800a6e4:	61417272 	.word	0x61417272
 800a6e8:	2000038c 	.word	0x2000038c
 800a6ec:	200003b0 	.word	0x200003b0

0800a6f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a6f0:	b590      	push	{r4, r7, lr}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a6fa:	240f      	movs	r4, #15
 800a6fc:	193b      	adds	r3, r7, r4
 800a6fe:	2209      	movs	r2, #9
 800a700:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d01d      	beq.n	800a744 <validate+0x54>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d019      	beq.n	800a744 <validate+0x54>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d014      	beq.n	800a744 <validate+0x54>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	889a      	ldrh	r2, [r3, #4]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	88db      	ldrh	r3, [r3, #6]
 800a724:	429a      	cmp	r2, r3
 800a726:	d10d      	bne.n	800a744 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	785b      	ldrb	r3, [r3, #1]
 800a72e:	0018      	movs	r0, r3
 800a730:	f7fd fcac 	bl	800808c <disk_status>
 800a734:	0003      	movs	r3, r0
 800a736:	001a      	movs	r2, r3
 800a738:	2301      	movs	r3, #1
 800a73a:	4013      	ands	r3, r2
 800a73c:	d102      	bne.n	800a744 <validate+0x54>
			res = FR_OK;
 800a73e:	193b      	adds	r3, r7, r4
 800a740:	2200      	movs	r2, #0
 800a742:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a744:	230f      	movs	r3, #15
 800a746:	18fb      	adds	r3, r7, r3
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d102      	bne.n	800a754 <validate+0x64>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	e000      	b.n	800a756 <validate+0x66>
 800a754:	2200      	movs	r2, #0
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	601a      	str	r2, [r3, #0]
	return res;
 800a75a:	230f      	movs	r3, #15
 800a75c:	18fb      	adds	r3, r7, r3
 800a75e:	781b      	ldrb	r3, [r3, #0]
}
 800a760:	0018      	movs	r0, r3
 800a762:	46bd      	mov	sp, r7
 800a764:	b005      	add	sp, #20
 800a766:	bd90      	pop	{r4, r7, pc}

0800a768 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a768:	b5b0      	push	{r4, r5, r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	1dfb      	adds	r3, r7, #7
 800a774:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a77a:	2310      	movs	r3, #16
 800a77c:	18fb      	adds	r3, r7, r3
 800a77e:	0018      	movs	r0, r3
 800a780:	f7ff fc70 	bl	800a064 <get_ldnumber>
 800a784:	0003      	movs	r3, r0
 800a786:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	da01      	bge.n	800a792 <f_mount+0x2a>
 800a78e:	230b      	movs	r3, #11
 800a790:	e030      	b.n	800a7f4 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a792:	4b1a      	ldr	r3, [pc, #104]	@ (800a7fc <f_mount+0x94>)
 800a794:	69fa      	ldr	r2, [r7, #28]
 800a796:	0092      	lsls	r2, r2, #2
 800a798:	58d3      	ldr	r3, [r2, r3]
 800a79a:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d006      	beq.n	800a7b0 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	f7fd ff7f 	bl	80086a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d002      	beq.n	800a7bc <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a7bc:	68f9      	ldr	r1, [r7, #12]
 800a7be:	4b0f      	ldr	r3, [pc, #60]	@ (800a7fc <f_mount+0x94>)
 800a7c0:	69fa      	ldr	r2, [r7, #28]
 800a7c2:	0092      	lsls	r2, r2, #2
 800a7c4:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <f_mount+0x6c>
 800a7cc:	1dfb      	adds	r3, r7, #7
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d001      	beq.n	800a7d8 <f_mount+0x70>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	e00d      	b.n	800a7f4 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a7d8:	2517      	movs	r5, #23
 800a7da:	197c      	adds	r4, r7, r5
 800a7dc:	230c      	movs	r3, #12
 800a7de:	18f9      	adds	r1, r7, r3
 800a7e0:	2308      	movs	r3, #8
 800a7e2:	18fb      	adds	r3, r7, r3
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	0018      	movs	r0, r3
 800a7e8:	f7ff fcd6 	bl	800a198 <find_volume>
 800a7ec:	0003      	movs	r3, r0
 800a7ee:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800a7f0:	197b      	adds	r3, r7, r5
 800a7f2:	781b      	ldrb	r3, [r3, #0]
}
 800a7f4:	0018      	movs	r0, r3
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	b008      	add	sp, #32
 800a7fa:	bdb0      	pop	{r4, r5, r7, pc}
 800a7fc:	20000388 	.word	0x20000388

0800a800 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a802:	b09b      	sub	sp, #108	@ 0x6c
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	1dfb      	adds	r3, r7, #7
 800a80c:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <f_open+0x18>
 800a814:	2309      	movs	r3, #9
 800a816:	e1f4      	b.n	800ac02 <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a818:	1dfb      	adds	r3, r7, #7
 800a81a:	1dfa      	adds	r2, r7, #7
 800a81c:	7812      	ldrb	r2, [r2, #0]
 800a81e:	213f      	movs	r1, #63	@ 0x3f
 800a820:	400a      	ands	r2, r1
 800a822:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800a824:	2567      	movs	r5, #103	@ 0x67
 800a826:	197c      	adds	r4, r7, r5
 800a828:	1dfb      	adds	r3, r7, #7
 800a82a:	781a      	ldrb	r2, [r3, #0]
 800a82c:	2314      	movs	r3, #20
 800a82e:	18f9      	adds	r1, r7, r3
 800a830:	2308      	movs	r3, #8
 800a832:	18fb      	adds	r3, r7, r3
 800a834:	0018      	movs	r0, r3
 800a836:	f7ff fcaf 	bl	800a198 <find_volume>
 800a83a:	0003      	movs	r3, r0
 800a83c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800a83e:	197b      	adds	r3, r7, r5
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d000      	beq.n	800a848 <f_open+0x48>
 800a846:	e1d1      	b.n	800abec <f_open+0x3ec>
		dj.obj.fs = fs;
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	2618      	movs	r6, #24
 800a84c:	19bb      	adds	r3, r7, r6
 800a84e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	197c      	adds	r4, r7, r5
 800a854:	19bb      	adds	r3, r7, r6
 800a856:	0011      	movs	r1, r2
 800a858:	0018      	movs	r0, r3
 800a85a:	f7ff fb79 	bl	8009f50 <follow_path>
 800a85e:	0003      	movs	r3, r0
 800a860:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a862:	0029      	movs	r1, r5
 800a864:	197b      	adds	r3, r7, r5
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d11b      	bne.n	800a8a4 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a86c:	19bb      	adds	r3, r7, r6
 800a86e:	222f      	movs	r2, #47	@ 0x2f
 800a870:	5c9b      	ldrb	r3, [r3, r2]
 800a872:	b25b      	sxtb	r3, r3
 800a874:	2b00      	cmp	r3, #0
 800a876:	da03      	bge.n	800a880 <f_open+0x80>
				res = FR_INVALID_NAME;
 800a878:	187b      	adds	r3, r7, r1
 800a87a:	2206      	movs	r2, #6
 800a87c:	701a      	strb	r2, [r3, #0]
 800a87e:	e011      	b.n	800a8a4 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a880:	1dfb      	adds	r3, r7, #7
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	2201      	movs	r2, #1
 800a886:	429a      	cmp	r2, r3
 800a888:	419b      	sbcs	r3, r3
 800a88a:	425b      	negs	r3, r3
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	001a      	movs	r2, r3
 800a890:	2367      	movs	r3, #103	@ 0x67
 800a892:	18fc      	adds	r4, r7, r3
 800a894:	2318      	movs	r3, #24
 800a896:	18fb      	adds	r3, r7, r3
 800a898:	0011      	movs	r1, r2
 800a89a:	0018      	movs	r0, r3
 800a89c:	f7fd fdba 	bl	8008414 <chk_lock>
 800a8a0:	0003      	movs	r3, r0
 800a8a2:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a8a4:	1dfb      	adds	r3, r7, #7
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	221c      	movs	r2, #28
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	d100      	bne.n	800a8b0 <f_open+0xb0>
 800a8ae:	e096      	b.n	800a9de <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 800a8b0:	2267      	movs	r2, #103	@ 0x67
 800a8b2:	18bb      	adds	r3, r7, r2
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d01a      	beq.n	800a8f0 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a8ba:	18bb      	adds	r3, r7, r2
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	2b04      	cmp	r3, #4
 800a8c0:	d10f      	bne.n	800a8e2 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a8c2:	f7fd fdff 	bl	80084c4 <enq_lock>
 800a8c6:	1e03      	subs	r3, r0, #0
 800a8c8:	d007      	beq.n	800a8da <f_open+0xda>
 800a8ca:	2318      	movs	r3, #24
 800a8cc:	18fb      	adds	r3, r7, r3
 800a8ce:	0018      	movs	r0, r3
 800a8d0:	f7ff f82a 	bl	8009928 <dir_register>
 800a8d4:	0003      	movs	r3, r0
 800a8d6:	001a      	movs	r2, r3
 800a8d8:	e000      	b.n	800a8dc <f_open+0xdc>
 800a8da:	2212      	movs	r2, #18
 800a8dc:	2367      	movs	r3, #103	@ 0x67
 800a8de:	18fb      	adds	r3, r7, r3
 800a8e0:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a8e2:	1dfb      	adds	r3, r7, #7
 800a8e4:	1dfa      	adds	r2, r7, #7
 800a8e6:	7812      	ldrb	r2, [r2, #0]
 800a8e8:	2108      	movs	r1, #8
 800a8ea:	430a      	orrs	r2, r1
 800a8ec:	701a      	strb	r2, [r3, #0]
 800a8ee:	e014      	b.n	800a91a <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a8f0:	2318      	movs	r3, #24
 800a8f2:	18fb      	adds	r3, r7, r3
 800a8f4:	799b      	ldrb	r3, [r3, #6]
 800a8f6:	001a      	movs	r2, r3
 800a8f8:	2311      	movs	r3, #17
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	d004      	beq.n	800a908 <f_open+0x108>
					res = FR_DENIED;
 800a8fe:	2367      	movs	r3, #103	@ 0x67
 800a900:	18fb      	adds	r3, r7, r3
 800a902:	2207      	movs	r2, #7
 800a904:	701a      	strb	r2, [r3, #0]
 800a906:	e008      	b.n	800a91a <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a908:	1dfb      	adds	r3, r7, #7
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2204      	movs	r2, #4
 800a90e:	4013      	ands	r3, r2
 800a910:	d003      	beq.n	800a91a <f_open+0x11a>
 800a912:	2367      	movs	r3, #103	@ 0x67
 800a914:	18fb      	adds	r3, r7, r3
 800a916:	2208      	movs	r2, #8
 800a918:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a91a:	2467      	movs	r4, #103	@ 0x67
 800a91c:	193b      	adds	r3, r7, r4
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d000      	beq.n	800a926 <f_open+0x126>
 800a924:	e07b      	b.n	800aa1e <f_open+0x21e>
 800a926:	1dfb      	adds	r3, r7, #7
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	2208      	movs	r2, #8
 800a92c:	4013      	ands	r3, r2
 800a92e:	d100      	bne.n	800a932 <f_open+0x132>
 800a930:	e075      	b.n	800aa1e <f_open+0x21e>
				dw = GET_FATTIME();
 800a932:	f7fd fb3f 	bl	8007fb4 <get_fattime>
 800a936:	0003      	movs	r3, r0
 800a938:	65bb      	str	r3, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a93a:	2518      	movs	r5, #24
 800a93c:	197b      	adds	r3, r7, r5
 800a93e:	6a1b      	ldr	r3, [r3, #32]
 800a940:	330e      	adds	r3, #14
 800a942:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a944:	0011      	movs	r1, r2
 800a946:	0018      	movs	r0, r3
 800a948:	f7fd fcc4 	bl	80082d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a94c:	197b      	adds	r3, r7, r5
 800a94e:	6a1b      	ldr	r3, [r3, #32]
 800a950:	3316      	adds	r3, #22
 800a952:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a954:	0011      	movs	r1, r2
 800a956:	0018      	movs	r0, r3
 800a958:	f7fd fcbc 	bl	80082d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a95c:	197b      	adds	r3, r7, r5
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	330b      	adds	r3, #11
 800a962:	2220      	movs	r2, #32
 800a964:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	197b      	adds	r3, r7, r5
 800a96a:	6a1b      	ldr	r3, [r3, #32]
 800a96c:	0019      	movs	r1, r3
 800a96e:	0010      	movs	r0, r2
 800a970:	f7fe fcee 	bl	8009350 <ld_clust>
 800a974:	0003      	movs	r3, r0
 800a976:	657b      	str	r3, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a978:	6978      	ldr	r0, [r7, #20]
 800a97a:	197b      	adds	r3, r7, r5
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	2200      	movs	r2, #0
 800a980:	0019      	movs	r1, r3
 800a982:	f7fe fd04 	bl	800938e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a986:	197b      	adds	r3, r7, r5
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	331c      	adds	r3, #28
 800a98c:	2100      	movs	r1, #0
 800a98e:	0018      	movs	r0, r3
 800a990:	f7fd fca0 	bl	80082d4 <st_dword>
					fs->wflag = 1;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2201      	movs	r2, #1
 800a998:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a99a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d03e      	beq.n	800aa1e <f_open+0x21e>
						dw = fs->winsect;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9a4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a9a6:	0026      	movs	r6, r4
 800a9a8:	193c      	adds	r4, r7, r4
 800a9aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a9ac:	197b      	adds	r3, r7, r5
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	0018      	movs	r0, r3
 800a9b2:	f7fe f9b9 	bl	8008d28 <remove_chain>
 800a9b6:	0003      	movs	r3, r0
 800a9b8:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800a9ba:	19bb      	adds	r3, r7, r6
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d12d      	bne.n	800aa1e <f_open+0x21e>
							res = move_window(fs, dw);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	19bc      	adds	r4, r7, r6
 800a9c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a9c8:	0011      	movs	r1, r2
 800a9ca:	0018      	movs	r0, r3
 800a9cc:	f7fd fed4 	bl	8008778 <move_window>
 800a9d0:	0003      	movs	r3, r0
 800a9d2:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a9d8:	3a01      	subs	r2, #1
 800a9da:	615a      	str	r2, [r3, #20]
 800a9dc:	e01f      	b.n	800aa1e <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a9de:	2167      	movs	r1, #103	@ 0x67
 800a9e0:	187b      	adds	r3, r7, r1
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d11a      	bne.n	800aa1e <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a9e8:	2318      	movs	r3, #24
 800a9ea:	18fb      	adds	r3, r7, r3
 800a9ec:	799b      	ldrb	r3, [r3, #6]
 800a9ee:	001a      	movs	r2, r3
 800a9f0:	2310      	movs	r3, #16
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	d003      	beq.n	800a9fe <f_open+0x1fe>
					res = FR_NO_FILE;
 800a9f6:	187b      	adds	r3, r7, r1
 800a9f8:	2204      	movs	r2, #4
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	e00f      	b.n	800aa1e <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a9fe:	1dfb      	adds	r3, r7, #7
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	2202      	movs	r2, #2
 800aa04:	4013      	ands	r3, r2
 800aa06:	d00a      	beq.n	800aa1e <f_open+0x21e>
 800aa08:	2318      	movs	r3, #24
 800aa0a:	18fb      	adds	r3, r7, r3
 800aa0c:	799b      	ldrb	r3, [r3, #6]
 800aa0e:	001a      	movs	r2, r3
 800aa10:	2301      	movs	r3, #1
 800aa12:	4013      	ands	r3, r2
 800aa14:	d003      	beq.n	800aa1e <f_open+0x21e>
						res = FR_DENIED;
 800aa16:	2367      	movs	r3, #103	@ 0x67
 800aa18:	18fb      	adds	r3, r7, r3
 800aa1a:	2207      	movs	r2, #7
 800aa1c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 800aa1e:	2367      	movs	r3, #103	@ 0x67
 800aa20:	18fb      	adds	r3, r7, r3
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d12b      	bne.n	800aa80 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aa28:	1dfb      	adds	r3, r7, #7
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	4013      	ands	r3, r2
 800aa30:	d005      	beq.n	800aa3e <f_open+0x23e>
				mode |= FA_MODIFIED;
 800aa32:	1dfb      	adds	r3, r7, #7
 800aa34:	1dfa      	adds	r2, r7, #7
 800aa36:	7812      	ldrb	r2, [r2, #0]
 800aa38:	2140      	movs	r1, #64	@ 0x40
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800aa46:	2118      	movs	r1, #24
 800aa48:	187b      	adds	r3, r7, r1
 800aa4a:	6a1a      	ldr	r2, [r3, #32]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa50:	1dfb      	adds	r3, r7, #7
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	2201      	movs	r2, #1
 800aa56:	429a      	cmp	r2, r3
 800aa58:	419b      	sbcs	r3, r3
 800aa5a:	425b      	negs	r3, r3
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	001a      	movs	r2, r3
 800aa60:	187b      	adds	r3, r7, r1
 800aa62:	0011      	movs	r1, r2
 800aa64:	0018      	movs	r0, r3
 800aa66:	f7fd fd4b 	bl	8008500 <inc_lock>
 800aa6a:	0002      	movs	r2, r0
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d103      	bne.n	800aa80 <f_open+0x280>
 800aa78:	2367      	movs	r3, #103	@ 0x67
 800aa7a:	18fb      	adds	r3, r7, r3
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aa80:	2367      	movs	r3, #103	@ 0x67
 800aa82:	18fb      	adds	r3, r7, r3
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d000      	beq.n	800aa8c <f_open+0x28c>
 800aa8a:	e0af      	b.n	800abec <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	2418      	movs	r4, #24
 800aa90:	193b      	adds	r3, r7, r4
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	0019      	movs	r1, r3
 800aa96:	0010      	movs	r0, r2
 800aa98:	f7fe fc5a 	bl	8009350 <ld_clust>
 800aa9c:	0002      	movs	r2, r0
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aaa2:	193b      	adds	r3, r7, r4
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	331c      	adds	r3, #28
 800aaa8:	0018      	movs	r0, r3
 800aaaa:	f7fd fbd4 	bl	8008256 <ld_dword>
 800aaae:	0002      	movs	r2, r0
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	88da      	ldrh	r2, [r3, #6]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	1dfa      	adds	r2, r7, #7
 800aacc:	7812      	ldrb	r2, [r2, #0]
 800aace:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	3330      	adds	r3, #48	@ 0x30
 800aae6:	2280      	movs	r2, #128	@ 0x80
 800aae8:	0152      	lsls	r2, r2, #5
 800aaea:	2100      	movs	r1, #0
 800aaec:	0018      	movs	r0, r3
 800aaee:	f7fd fc3a 	bl	8008366 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aaf2:	1dfb      	adds	r3, r7, #7
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	2220      	movs	r2, #32
 800aaf8:	4013      	ands	r3, r2
 800aafa:	d100      	bne.n	800aafe <f_open+0x2fe>
 800aafc:	e076      	b.n	800abec <f_open+0x3ec>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d100      	bne.n	800ab08 <f_open+0x308>
 800ab06:	e071      	b.n	800abec <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	68da      	ldr	r2, [r3, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	895b      	ldrh	r3, [r3, #10]
 800ab14:	001a      	movs	r2, r3
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	899b      	ldrh	r3, [r3, #12]
 800ab1a:	4353      	muls	r3, r2
 800ab1c:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab2a:	e019      	b.n	800ab60 <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab30:	0011      	movs	r1, r2
 800ab32:	0018      	movs	r0, r3
 800ab34:	f7fd feee 	bl	8008914 <get_fat>
 800ab38:	0003      	movs	r3, r0
 800ab3a:	663b      	str	r3, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ab3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d803      	bhi.n	800ab4a <f_open+0x34a>
 800ab42:	2367      	movs	r3, #103	@ 0x67
 800ab44:	18fb      	adds	r3, r7, r3
 800ab46:	2202      	movs	r2, #2
 800ab48:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ab4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	d103      	bne.n	800ab58 <f_open+0x358>
 800ab50:	2367      	movs	r3, #103	@ 0x67
 800ab52:	18fb      	adds	r3, r7, r3
 800ab54:	2201      	movs	r2, #1
 800ab56:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab60:	2367      	movs	r3, #103	@ 0x67
 800ab62:	18fb      	adds	r3, r7, r3
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d103      	bne.n	800ab72 <f_open+0x372>
 800ab6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d8dc      	bhi.n	800ab2c <f_open+0x32c>
				}
				fp->clust = clst;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab76:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ab78:	2467      	movs	r4, #103	@ 0x67
 800ab7a:	193b      	adds	r3, r7, r4
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d134      	bne.n	800abec <f_open+0x3ec>
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	899b      	ldrh	r3, [r3, #12]
 800ab86:	001a      	movs	r2, r3
 800ab88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab8a:	0011      	movs	r1, r2
 800ab8c:	0018      	movs	r0, r3
 800ab8e:	f7f5 fb5d 	bl	800024c <__aeabi_uidivmod>
 800ab92:	1e0b      	subs	r3, r1, #0
 800ab94:	d02a      	beq.n	800abec <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab9a:	0011      	movs	r1, r2
 800ab9c:	0018      	movs	r0, r3
 800ab9e:	f7fd fe9d 	bl	80088dc <clust2sect>
 800aba2:	0003      	movs	r3, r0
 800aba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d103      	bne.n	800abb4 <f_open+0x3b4>
						res = FR_INT_ERR;
 800abac:	193b      	adds	r3, r7, r4
 800abae:	2202      	movs	r2, #2
 800abb0:	701a      	strb	r2, [r3, #0]
 800abb2:	e01b      	b.n	800abec <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	899b      	ldrh	r3, [r3, #12]
 800abb8:	0019      	movs	r1, r3
 800abba:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800abbc:	f7f5 fac0 	bl	8000140 <__udivsi3>
 800abc0:	0003      	movs	r3, r0
 800abc2:	001a      	movs	r2, r3
 800abc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abc6:	18d2      	adds	r2, r2, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	7858      	ldrb	r0, [r3, #1]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3330      	adds	r3, #48	@ 0x30
 800abd4:	0019      	movs	r1, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6a1a      	ldr	r2, [r3, #32]
 800abda:	2301      	movs	r3, #1
 800abdc:	f7fd faa8 	bl	8008130 <disk_read>
 800abe0:	1e03      	subs	r3, r0, #0
 800abe2:	d003      	beq.n	800abec <f_open+0x3ec>
 800abe4:	2367      	movs	r3, #103	@ 0x67
 800abe6:	18fb      	adds	r3, r7, r3
 800abe8:	2201      	movs	r2, #1
 800abea:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800abec:	2367      	movs	r3, #103	@ 0x67
 800abee:	18fb      	adds	r3, r7, r3
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <f_open+0x3fc>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800abfc:	2367      	movs	r3, #103	@ 0x67
 800abfe:	18fb      	adds	r3, r7, r3
 800ac00:	781b      	ldrb	r3, [r3, #0]
}
 800ac02:	0018      	movs	r0, r3
 800ac04:	46bd      	mov	sp, r7
 800ac06:	b01b      	add	sp, #108	@ 0x6c
 800ac08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac0a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ac0a:	b5b0      	push	{r4, r5, r7, lr}
 800ac0c:	b08e      	sub	sp, #56	@ 0x38
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	60f8      	str	r0, [r7, #12]
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	607a      	str	r2, [r7, #4]
 800ac16:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2537      	movs	r5, #55	@ 0x37
 800ac26:	197c      	adds	r4, r7, r5
 800ac28:	2214      	movs	r2, #20
 800ac2a:	18ba      	adds	r2, r7, r2
 800ac2c:	0011      	movs	r1, r2
 800ac2e:	0018      	movs	r0, r3
 800ac30:	f7ff fd5e 	bl	800a6f0 <validate>
 800ac34:	0003      	movs	r3, r0
 800ac36:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac38:	197b      	adds	r3, r7, r5
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d107      	bne.n	800ac50 <f_read+0x46>
 800ac40:	197b      	adds	r3, r7, r5
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	7d52      	ldrb	r2, [r2, #21]
 800ac46:	701a      	strb	r2, [r3, #0]
 800ac48:	197b      	adds	r3, r7, r5
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d003      	beq.n	800ac58 <f_read+0x4e>
 800ac50:	2337      	movs	r3, #55	@ 0x37
 800ac52:	18fb      	adds	r3, r7, r3
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	e137      	b.n	800aec8 <f_read+0x2be>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	7d1b      	ldrb	r3, [r3, #20]
 800ac5c:	001a      	movs	r2, r3
 800ac5e:	2301      	movs	r3, #1
 800ac60:	4013      	ands	r3, r2
 800ac62:	d101      	bne.n	800ac68 <f_read+0x5e>
 800ac64:	2307      	movs	r3, #7
 800ac66:	e12f      	b.n	800aec8 <f_read+0x2be>
	remain = fp->obj.objsize - fp->fptr;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	68da      	ldr	r2, [r3, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d800      	bhi.n	800ac7e <f_read+0x74>
 800ac7c:	e11f      	b.n	800aebe <f_read+0x2b4>
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ac82:	e11c      	b.n	800aebe <f_read+0x2b4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	699a      	ldr	r2, [r3, #24]
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	899b      	ldrh	r3, [r3, #12]
 800ac8c:	0019      	movs	r1, r3
 800ac8e:	0010      	movs	r0, r2
 800ac90:	f7f5 fadc 	bl	800024c <__aeabi_uidivmod>
 800ac94:	1e0b      	subs	r3, r1, #0
 800ac96:	d000      	beq.n	800ac9a <f_read+0x90>
 800ac98:	e0d7      	b.n	800ae4a <f_read+0x240>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	699a      	ldr	r2, [r3, #24]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	899b      	ldrh	r3, [r3, #12]
 800aca2:	0019      	movs	r1, r3
 800aca4:	0010      	movs	r0, r2
 800aca6:	f7f5 fa4b 	bl	8000140 <__udivsi3>
 800acaa:	0003      	movs	r3, r0
 800acac:	001a      	movs	r2, r3
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	895b      	ldrh	r3, [r3, #10]
 800acb2:	3b01      	subs	r3, #1
 800acb4:	4013      	ands	r3, r2
 800acb6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d131      	bne.n	800ad22 <f_read+0x118>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d103      	bne.n	800acce <f_read+0xc4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	633b      	str	r3, [r7, #48]	@ 0x30
 800accc:	e016      	b.n	800acfc <f_read+0xf2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d009      	beq.n	800acea <f_read+0xe0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	699a      	ldr	r2, [r3, #24]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	0011      	movs	r1, r2
 800acde:	0018      	movs	r0, r3
 800ace0:	f7fe f93b 	bl	8008f5a <clmt_clust>
 800ace4:	0003      	movs	r3, r0
 800ace6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ace8:	e008      	b.n	800acfc <f_read+0xf2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	0019      	movs	r1, r3
 800acf2:	0010      	movs	r0, r2
 800acf4:	f7fd fe0e 	bl	8008914 <get_fat>
 800acf8:	0003      	movs	r3, r0
 800acfa:	633b      	str	r3, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800acfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d804      	bhi.n	800ad0c <f_read+0x102>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2202      	movs	r2, #2
 800ad06:	755a      	strb	r2, [r3, #21]
 800ad08:	2302      	movs	r3, #2
 800ad0a:	e0dd      	b.n	800aec8 <f_read+0x2be>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0e:	3301      	adds	r3, #1
 800ad10:	d104      	bne.n	800ad1c <f_read+0x112>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2201      	movs	r2, #1
 800ad16:	755a      	strb	r2, [r3, #21]
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e0d5      	b.n	800aec8 <f_read+0x2be>
				fp->clust = clst;				/* Update current cluster */
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad20:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	69db      	ldr	r3, [r3, #28]
 800ad28:	0019      	movs	r1, r3
 800ad2a:	0010      	movs	r0, r2
 800ad2c:	f7fd fdd6 	bl	80088dc <clust2sect>
 800ad30:	0003      	movs	r3, r0
 800ad32:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d104      	bne.n	800ad44 <f_read+0x13a>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2202      	movs	r2, #2
 800ad3e:	755a      	strb	r2, [r3, #21]
 800ad40:	2302      	movs	r3, #2
 800ad42:	e0c1      	b.n	800aec8 <f_read+0x2be>
			sect += csect;
 800ad44:	69ba      	ldr	r2, [r7, #24]
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	18d3      	adds	r3, r2, r3
 800ad4a:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	899b      	ldrh	r3, [r3, #12]
 800ad50:	0019      	movs	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7f5 f9f4 	bl	8000140 <__udivsi3>
 800ad58:	0003      	movs	r3, r0
 800ad5a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ad5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d03e      	beq.n	800ade0 <f_read+0x1d6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad62:	69fa      	ldr	r2, [r7, #28]
 800ad64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad66:	18d3      	adds	r3, r2, r3
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	8952      	ldrh	r2, [r2, #10]
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d905      	bls.n	800ad7c <f_read+0x172>
					cc = fs->csize - csect;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	895b      	ldrh	r3, [r3, #10]
 800ad74:	001a      	movs	r2, r3
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	7858      	ldrb	r0, [r3, #1]
 800ad80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad86:	f7fd f9d3 	bl	8008130 <disk_read>
 800ad8a:	1e03      	subs	r3, r0, #0
 800ad8c:	d004      	beq.n	800ad98 <f_read+0x18e>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2201      	movs	r2, #1
 800ad92:	755a      	strb	r2, [r3, #21]
 800ad94:	2301      	movs	r3, #1
 800ad96:	e097      	b.n	800aec8 <f_read+0x2be>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	7d1b      	ldrb	r3, [r3, #20]
 800ad9c:	b25b      	sxtb	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	da17      	bge.n	800add2 <f_read+0x1c8>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6a1a      	ldr	r2, [r3, #32]
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adac:	429a      	cmp	r2, r3
 800adae:	d910      	bls.n	800add2 <f_read+0x1c8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6a1a      	ldr	r2, [r3, #32]
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	8992      	ldrh	r2, [r2, #12]
 800adbc:	4353      	muls	r3, r2
 800adbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adc0:	18d0      	adds	r0, r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3330      	adds	r3, #48	@ 0x30
 800adc6:	0019      	movs	r1, r3
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	899b      	ldrh	r3, [r3, #12]
 800adcc:	001a      	movs	r2, r3
 800adce:	f7fd faab 	bl	8008328 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	899b      	ldrh	r3, [r3, #12]
 800add6:	001a      	movs	r2, r3
 800add8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adda:	4353      	muls	r3, r2
 800addc:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800adde:	e05a      	b.n	800ae96 <f_read+0x28c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	69ba      	ldr	r2, [r7, #24]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d02c      	beq.n	800ae44 <f_read+0x23a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	7d1b      	ldrb	r3, [r3, #20]
 800adee:	b25b      	sxtb	r3, r3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	da17      	bge.n	800ae24 <f_read+0x21a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	7858      	ldrb	r0, [r3, #1]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	3330      	adds	r3, #48	@ 0x30
 800adfc:	0019      	movs	r1, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6a1a      	ldr	r2, [r3, #32]
 800ae02:	2301      	movs	r3, #1
 800ae04:	f7fd f9bc 	bl	8008180 <disk_write>
 800ae08:	1e03      	subs	r3, r0, #0
 800ae0a:	d004      	beq.n	800ae16 <f_read+0x20c>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	755a      	strb	r2, [r3, #21]
 800ae12:	2301      	movs	r3, #1
 800ae14:	e058      	b.n	800aec8 <f_read+0x2be>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	7d1b      	ldrb	r3, [r3, #20]
 800ae1a:	227f      	movs	r2, #127	@ 0x7f
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	b2da      	uxtb	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	7858      	ldrb	r0, [r3, #1]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3330      	adds	r3, #48	@ 0x30
 800ae2c:	0019      	movs	r1, r3
 800ae2e:	69ba      	ldr	r2, [r7, #24]
 800ae30:	2301      	movs	r3, #1
 800ae32:	f7fd f97d 	bl	8008130 <disk_read>
 800ae36:	1e03      	subs	r3, r0, #0
 800ae38:	d004      	beq.n	800ae44 <f_read+0x23a>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	755a      	strb	r2, [r3, #21]
 800ae40:	2301      	movs	r3, #1
 800ae42:	e041      	b.n	800aec8 <f_read+0x2be>
			}
#endif
			fp->sect = sect;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	69ba      	ldr	r2, [r7, #24]
 800ae48:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	899b      	ldrh	r3, [r3, #12]
 800ae4e:	001c      	movs	r4, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	699a      	ldr	r2, [r3, #24]
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	899b      	ldrh	r3, [r3, #12]
 800ae58:	0019      	movs	r1, r3
 800ae5a:	0010      	movs	r0, r2
 800ae5c:	f7f5 f9f6 	bl	800024c <__aeabi_uidivmod>
 800ae60:	000b      	movs	r3, r1
 800ae62:	1ae3      	subs	r3, r4, r3
 800ae64:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ae66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d901      	bls.n	800ae72 <f_read+0x268>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3330      	adds	r3, #48	@ 0x30
 800ae76:	001c      	movs	r4, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	699a      	ldr	r2, [r3, #24]
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	899b      	ldrh	r3, [r3, #12]
 800ae80:	0019      	movs	r1, r3
 800ae82:	0010      	movs	r0, r2
 800ae84:	f7f5 f9e2 	bl	800024c <__aeabi_uidivmod>
 800ae88:	000b      	movs	r3, r1
 800ae8a:	18e1      	adds	r1, r4, r3
 800ae8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae90:	0018      	movs	r0, r3
 800ae92:	f7fd fa49 	bl	8008328 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ae96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9a:	18d3      	adds	r3, r2, r3
 800ae9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	699a      	ldr	r2, [r3, #24]
 800aea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea4:	18d2      	adds	r2, r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	619a      	str	r2, [r3, #24]
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb0:	18d2      	adds	r2, r2, r3
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	601a      	str	r2, [r3, #0]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d000      	beq.n	800aec6 <f_read+0x2bc>
 800aec4:	e6de      	b.n	800ac84 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	0018      	movs	r0, r3
 800aeca:	46bd      	mov	sp, r7
 800aecc:	b00e      	add	sp, #56	@ 0x38
 800aece:	bdb0      	pop	{r4, r5, r7, pc}

0800aed0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aed0:	b5b0      	push	{r4, r5, r7, lr}
 800aed2:	b08c      	sub	sp, #48	@ 0x30
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	2200      	movs	r2, #0
 800aee6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	252f      	movs	r5, #47	@ 0x2f
 800aeec:	197c      	adds	r4, r7, r5
 800aeee:	2210      	movs	r2, #16
 800aef0:	18ba      	adds	r2, r7, r2
 800aef2:	0011      	movs	r1, r2
 800aef4:	0018      	movs	r0, r3
 800aef6:	f7ff fbfb 	bl	800a6f0 <validate>
 800aefa:	0003      	movs	r3, r0
 800aefc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aefe:	197b      	adds	r3, r7, r5
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d107      	bne.n	800af16 <f_write+0x46>
 800af06:	197b      	adds	r3, r7, r5
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	7d52      	ldrb	r2, [r2, #21]
 800af0c:	701a      	strb	r2, [r3, #0]
 800af0e:	197b      	adds	r3, r7, r5
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <f_write+0x4e>
 800af16:	232f      	movs	r3, #47	@ 0x2f
 800af18:	18fb      	adds	r3, r7, r3
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	e16f      	b.n	800b1fe <f_write+0x32e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	7d1b      	ldrb	r3, [r3, #20]
 800af22:	001a      	movs	r2, r3
 800af24:	2302      	movs	r3, #2
 800af26:	4013      	ands	r3, r2
 800af28:	d101      	bne.n	800af2e <f_write+0x5e>
 800af2a:	2307      	movs	r3, #7
 800af2c:	e167      	b.n	800b1fe <f_write+0x32e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	699a      	ldr	r2, [r3, #24]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	18d2      	adds	r2, r2, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d300      	bcc.n	800af40 <f_write+0x70>
 800af3e:	e150      	b.n	800b1e2 <f_write+0x312>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	43db      	mvns	r3, r3
 800af46:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800af48:	e14b      	b.n	800b1e2 <f_write+0x312>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	699a      	ldr	r2, [r3, #24]
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	899b      	ldrh	r3, [r3, #12]
 800af52:	0019      	movs	r1, r3
 800af54:	0010      	movs	r0, r2
 800af56:	f7f5 f979 	bl	800024c <__aeabi_uidivmod>
 800af5a:	1e0b      	subs	r3, r1, #0
 800af5c:	d000      	beq.n	800af60 <f_write+0x90>
 800af5e:	e0f4      	b.n	800b14a <f_write+0x27a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	699a      	ldr	r2, [r3, #24]
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	899b      	ldrh	r3, [r3, #12]
 800af68:	0019      	movs	r1, r3
 800af6a:	0010      	movs	r0, r2
 800af6c:	f7f5 f8e8 	bl	8000140 <__udivsi3>
 800af70:	0003      	movs	r3, r0
 800af72:	001a      	movs	r2, r3
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	895b      	ldrh	r3, [r3, #10]
 800af78:	3b01      	subs	r3, #1
 800af7a:	4013      	ands	r3, r2
 800af7c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d146      	bne.n	800b012 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10d      	bne.n	800afa8 <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800af92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af94:	2b00      	cmp	r3, #0
 800af96:	d11e      	bne.n	800afd6 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2100      	movs	r1, #0
 800af9c:	0018      	movs	r0, r3
 800af9e:	f7fd ff36 	bl	8008e0e <create_chain>
 800afa2:	0003      	movs	r3, r0
 800afa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afa6:	e016      	b.n	800afd6 <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afac:	2b00      	cmp	r3, #0
 800afae:	d009      	beq.n	800afc4 <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	699a      	ldr	r2, [r3, #24]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	0011      	movs	r1, r2
 800afb8:	0018      	movs	r0, r3
 800afba:	f7fd ffce 	bl	8008f5a <clmt_clust>
 800afbe:	0003      	movs	r3, r0
 800afc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afc2:	e008      	b.n	800afd6 <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	69db      	ldr	r3, [r3, #28]
 800afca:	0019      	movs	r1, r3
 800afcc:	0010      	movs	r0, r2
 800afce:	f7fd ff1e 	bl	8008e0e <create_chain>
 800afd2:	0003      	movs	r3, r0
 800afd4:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800afd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d100      	bne.n	800afde <f_write+0x10e>
 800afdc:	e106      	b.n	800b1ec <f_write+0x31c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800afde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d104      	bne.n	800afee <f_write+0x11e>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2202      	movs	r2, #2
 800afe8:	755a      	strb	r2, [r3, #21]
 800afea:	2302      	movs	r3, #2
 800afec:	e107      	b.n	800b1fe <f_write+0x32e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800afee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff0:	3301      	adds	r3, #1
 800aff2:	d104      	bne.n	800affe <f_write+0x12e>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2201      	movs	r2, #1
 800aff8:	755a      	strb	r2, [r3, #21]
 800affa:	2301      	movs	r3, #1
 800affc:	e0ff      	b.n	800b1fe <f_write+0x32e>
				fp->clust = clst;			/* Update current cluster */
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b002:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d102      	bne.n	800b012 <f_write+0x142>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b010:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	7d1b      	ldrb	r3, [r3, #20]
 800b016:	b25b      	sxtb	r3, r3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	da17      	bge.n	800b04c <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	7858      	ldrb	r0, [r3, #1]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	3330      	adds	r3, #48	@ 0x30
 800b024:	0019      	movs	r1, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6a1a      	ldr	r2, [r3, #32]
 800b02a:	2301      	movs	r3, #1
 800b02c:	f7fd f8a8 	bl	8008180 <disk_write>
 800b030:	1e03      	subs	r3, r0, #0
 800b032:	d004      	beq.n	800b03e <f_write+0x16e>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2201      	movs	r2, #1
 800b038:	755a      	strb	r2, [r3, #21]
 800b03a:	2301      	movs	r3, #1
 800b03c:	e0df      	b.n	800b1fe <f_write+0x32e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	7d1b      	ldrb	r3, [r3, #20]
 800b042:	227f      	movs	r2, #127	@ 0x7f
 800b044:	4013      	ands	r3, r2
 800b046:	b2da      	uxtb	r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	69db      	ldr	r3, [r3, #28]
 800b052:	0019      	movs	r1, r3
 800b054:	0010      	movs	r0, r2
 800b056:	f7fd fc41 	bl	80088dc <clust2sect>
 800b05a:	0003      	movs	r3, r0
 800b05c:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d104      	bne.n	800b06e <f_write+0x19e>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2202      	movs	r2, #2
 800b068:	755a      	strb	r2, [r3, #21]
 800b06a:	2302      	movs	r3, #2
 800b06c:	e0c7      	b.n	800b1fe <f_write+0x32e>
			sect += csect;
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	18d3      	adds	r3, r2, r3
 800b074:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	899b      	ldrh	r3, [r3, #12]
 800b07a:	0019      	movs	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7f5 f85f 	bl	8000140 <__udivsi3>
 800b082:	0003      	movs	r3, r0
 800b084:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d040      	beq.n	800b10e <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b08c:	69ba      	ldr	r2, [r7, #24]
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	18d3      	adds	r3, r2, r3
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	8952      	ldrh	r2, [r2, #10]
 800b096:	4293      	cmp	r3, r2
 800b098:	d905      	bls.n	800b0a6 <f_write+0x1d6>
					cc = fs->csize - csect;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	895b      	ldrh	r3, [r3, #10]
 800b09e:	001a      	movs	r2, r3
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	7858      	ldrb	r0, [r3, #1]
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	697a      	ldr	r2, [r7, #20]
 800b0ae:	69f9      	ldr	r1, [r7, #28]
 800b0b0:	f7fd f866 	bl	8008180 <disk_write>
 800b0b4:	1e03      	subs	r3, r0, #0
 800b0b6:	d004      	beq.n	800b0c2 <f_write+0x1f2>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	755a      	strb	r2, [r3, #21]
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e09d      	b.n	800b1fe <f_write+0x32e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6a1a      	ldr	r2, [r3, #32]
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	6a3a      	ldr	r2, [r7, #32]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d917      	bls.n	800b100 <f_write+0x230>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3330      	adds	r3, #48	@ 0x30
 800b0d4:	0018      	movs	r0, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6a1a      	ldr	r2, [r3, #32]
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	8992      	ldrh	r2, [r2, #12]
 800b0e2:	4353      	muls	r3, r2
 800b0e4:	69fa      	ldr	r2, [r7, #28]
 800b0e6:	18d1      	adds	r1, r2, r3
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	899b      	ldrh	r3, [r3, #12]
 800b0ec:	001a      	movs	r2, r3
 800b0ee:	f7fd f91b 	bl	8008328 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	7d1b      	ldrb	r3, [r3, #20]
 800b0f6:	227f      	movs	r2, #127	@ 0x7f
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	899b      	ldrh	r3, [r3, #12]
 800b104:	001a      	movs	r2, r3
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	4353      	muls	r3, r2
 800b10a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b10c:	e04b      	b.n	800b1a6 <f_write+0x2d6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	429a      	cmp	r2, r3
 800b116:	d015      	beq.n	800b144 <f_write+0x274>
				fp->fptr < fp->obj.objsize &&
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	699a      	ldr	r2, [r3, #24]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b120:	429a      	cmp	r2, r3
 800b122:	d20f      	bcs.n	800b144 <f_write+0x274>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	7858      	ldrb	r0, [r3, #1]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3330      	adds	r3, #48	@ 0x30
 800b12c:	0019      	movs	r1, r3
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	2301      	movs	r3, #1
 800b132:	f7fc fffd 	bl	8008130 <disk_read>
 800b136:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 800b138:	d004      	beq.n	800b144 <f_write+0x274>
					ABORT(fs, FR_DISK_ERR);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2201      	movs	r2, #1
 800b13e:	755a      	strb	r2, [r3, #21]
 800b140:	2301      	movs	r3, #1
 800b142:	e05c      	b.n	800b1fe <f_write+0x32e>
			}
#endif
			fp->sect = sect;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	899b      	ldrh	r3, [r3, #12]
 800b14e:	001c      	movs	r4, r3
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	699a      	ldr	r2, [r3, #24]
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	899b      	ldrh	r3, [r3, #12]
 800b158:	0019      	movs	r1, r3
 800b15a:	0010      	movs	r0, r2
 800b15c:	f7f5 f876 	bl	800024c <__aeabi_uidivmod>
 800b160:	000b      	movs	r3, r1
 800b162:	1ae3      	subs	r3, r4, r3
 800b164:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d901      	bls.n	800b172 <f_write+0x2a2>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3330      	adds	r3, #48	@ 0x30
 800b176:	001c      	movs	r4, r3
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	699a      	ldr	r2, [r3, #24]
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	899b      	ldrh	r3, [r3, #12]
 800b180:	0019      	movs	r1, r3
 800b182:	0010      	movs	r0, r2
 800b184:	f7f5 f862 	bl	800024c <__aeabi_uidivmod>
 800b188:	000b      	movs	r3, r1
 800b18a:	18e3      	adds	r3, r4, r3
 800b18c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b18e:	69f9      	ldr	r1, [r7, #28]
 800b190:	0018      	movs	r0, r3
 800b192:	f7fd f8c9 	bl	8008328 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	7d1b      	ldrb	r3, [r3, #20]
 800b19a:	2280      	movs	r2, #128	@ 0x80
 800b19c:	4252      	negs	r2, r2
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	b2da      	uxtb	r2, r3
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b1a6:	69fa      	ldr	r2, [r7, #28]
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1aa:	18d3      	adds	r3, r2, r3
 800b1ac:	61fb      	str	r3, [r7, #28]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	699a      	ldr	r2, [r3, #24]
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b4:	18d2      	adds	r2, r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	619a      	str	r2, [r3, #24]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	68d9      	ldr	r1, [r3, #12]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	699a      	ldr	r2, [r3, #24]
 800b1c2:	000b      	movs	r3, r1
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d200      	bcs.n	800b1ca <f_write+0x2fa>
 800b1c8:	0013      	movs	r3, r2
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	60d3      	str	r3, [r2, #12]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d4:	18d2      	adds	r2, r2, r3
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d000      	beq.n	800b1ea <f_write+0x31a>
 800b1e8:	e6af      	b.n	800af4a <f_write+0x7a>
 800b1ea:	e000      	b.n	800b1ee <f_write+0x31e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b1ec:	46c0      	nop			@ (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	7d1b      	ldrb	r3, [r3, #20]
 800b1f2:	2240      	movs	r2, #64	@ 0x40
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	0018      	movs	r0, r3
 800b200:	46bd      	mov	sp, r7
 800b202:	b00c      	add	sp, #48	@ 0x30
 800b204:	bdb0      	pop	{r4, r5, r7, pc}

0800b206 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b206:	b5b0      	push	{r4, r5, r7, lr}
 800b208:	b086      	sub	sp, #24
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2517      	movs	r5, #23
 800b212:	197c      	adds	r4, r7, r5
 800b214:	2208      	movs	r2, #8
 800b216:	18ba      	adds	r2, r7, r2
 800b218:	0011      	movs	r1, r2
 800b21a:	0018      	movs	r0, r3
 800b21c:	f7ff fa68 	bl	800a6f0 <validate>
 800b220:	0003      	movs	r3, r0
 800b222:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800b224:	197b      	adds	r3, r7, r5
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d16e      	bne.n	800b30a <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	7d1b      	ldrb	r3, [r3, #20]
 800b230:	001a      	movs	r2, r3
 800b232:	2340      	movs	r3, #64	@ 0x40
 800b234:	4013      	ands	r3, r2
 800b236:	d068      	beq.n	800b30a <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	7d1b      	ldrb	r3, [r3, #20]
 800b23c:	b25b      	sxtb	r3, r3
 800b23e:	2b00      	cmp	r3, #0
 800b240:	da14      	bge.n	800b26c <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	7858      	ldrb	r0, [r3, #1]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3330      	adds	r3, #48	@ 0x30
 800b24a:	0019      	movs	r1, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a1a      	ldr	r2, [r3, #32]
 800b250:	2301      	movs	r3, #1
 800b252:	f7fc ff95 	bl	8008180 <disk_write>
 800b256:	1e03      	subs	r3, r0, #0
 800b258:	d001      	beq.n	800b25e <f_sync+0x58>
 800b25a:	2301      	movs	r3, #1
 800b25c:	e058      	b.n	800b310 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	7d1b      	ldrb	r3, [r3, #20]
 800b262:	227f      	movs	r2, #127	@ 0x7f
 800b264:	4013      	ands	r3, r2
 800b266:	b2da      	uxtb	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b26c:	f7fc fea2 	bl	8007fb4 <get_fattime>
 800b270:	0003      	movs	r3, r0
 800b272:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b27a:	2517      	movs	r5, #23
 800b27c:	197c      	adds	r4, r7, r5
 800b27e:	0019      	movs	r1, r3
 800b280:	0010      	movs	r0, r2
 800b282:	f7fd fa79 	bl	8008778 <move_window>
 800b286:	0003      	movs	r3, r0
 800b288:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 800b28a:	002c      	movs	r4, r5
 800b28c:	193b      	adds	r3, r7, r4
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d13a      	bne.n	800b30a <f_sync+0x104>
					dir = fp->dir_ptr;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b298:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	330b      	adds	r3, #11
 800b29e:	781a      	ldrb	r2, [r3, #0]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	330b      	adds	r3, #11
 800b2a4:	2120      	movs	r1, #32
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	b2d2      	uxtb	r2, r2
 800b2aa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6818      	ldr	r0, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	689a      	ldr	r2, [r3, #8]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	0019      	movs	r1, r3
 800b2b8:	f7fe f869 	bl	800938e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	331c      	adds	r3, #28
 800b2c0:	001a      	movs	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	0019      	movs	r1, r3
 800b2c8:	0010      	movs	r0, r2
 800b2ca:	f7fd f803 	bl	80082d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	3316      	adds	r3, #22
 800b2d2:	693a      	ldr	r2, [r7, #16]
 800b2d4:	0011      	movs	r1, r2
 800b2d6:	0018      	movs	r0, r3
 800b2d8:	f7fc fffc 	bl	80082d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	3312      	adds	r3, #18
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	0018      	movs	r0, r3
 800b2e4:	f7fc ffd8 	bl	8008298 <st_word>
					fs->wflag = 1;
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	193c      	adds	r4, r7, r4
 800b2f2:	0018      	movs	r0, r3
 800b2f4:	f7fd fa76 	bl	80087e4 <sync_fs>
 800b2f8:	0003      	movs	r3, r0
 800b2fa:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	7d1b      	ldrb	r3, [r3, #20]
 800b300:	2240      	movs	r2, #64	@ 0x40
 800b302:	4393      	bics	r3, r2
 800b304:	b2da      	uxtb	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b30a:	2317      	movs	r3, #23
 800b30c:	18fb      	adds	r3, r7, r3
 800b30e:	781b      	ldrb	r3, [r3, #0]
}
 800b310:	0018      	movs	r0, r3
 800b312:	46bd      	mov	sp, r7
 800b314:	b006      	add	sp, #24
 800b316:	bdb0      	pop	{r4, r5, r7, pc}

0800b318 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b318:	b5b0      	push	{r4, r5, r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b320:	250f      	movs	r5, #15
 800b322:	197c      	adds	r4, r7, r5
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	0018      	movs	r0, r3
 800b328:	f7ff ff6d 	bl	800b206 <f_sync>
 800b32c:	0003      	movs	r3, r0
 800b32e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800b330:	197b      	adds	r3, r7, r5
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d11c      	bne.n	800b372 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	197c      	adds	r4, r7, r5
 800b33c:	2208      	movs	r2, #8
 800b33e:	18ba      	adds	r2, r7, r2
 800b340:	0011      	movs	r1, r2
 800b342:	0018      	movs	r0, r3
 800b344:	f7ff f9d4 	bl	800a6f0 <validate>
 800b348:	0003      	movs	r3, r0
 800b34a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800b34c:	197b      	adds	r3, r7, r5
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10e      	bne.n	800b372 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	197c      	adds	r4, r7, r5
 800b35a:	0018      	movs	r0, r3
 800b35c:	f7fd f95a 	bl	8008614 <dec_lock>
 800b360:	0003      	movs	r3, r0
 800b362:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 800b364:	197b      	adds	r3, r7, r5
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b372:	230f      	movs	r3, #15
 800b374:	18fb      	adds	r3, r7, r3
 800b376:	781b      	ldrb	r3, [r3, #0]
}
 800b378:	0018      	movs	r0, r3
 800b37a:	46bd      	mov	sp, r7
 800b37c:	b004      	add	sp, #16
 800b37e:	bdb0      	pop	{r4, r5, r7, pc}

0800b380 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800b380:	b590      	push	{r4, r7, lr}
 800b382:	b089      	sub	sp, #36	@ 0x24
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800b38c:	2300      	movs	r3, #0
 800b38e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b394:	e022      	b.n	800b3dc <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800b396:	2310      	movs	r3, #16
 800b398:	18fb      	adds	r3, r7, r3
 800b39a:	2414      	movs	r4, #20
 800b39c:	1939      	adds	r1, r7, r4
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f7ff fc32 	bl	800ac0a <f_read>
		if (rc != 1) break;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d11d      	bne.n	800b3e8 <f_gets+0x68>
		c = s[0];
 800b3ac:	2117      	movs	r1, #23
 800b3ae:	187b      	adds	r3, r7, r1
 800b3b0:	193a      	adds	r2, r7, r4
 800b3b2:	7812      	ldrb	r2, [r2, #0]
 800b3b4:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800b3b6:	187b      	adds	r3, r7, r1
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b0d      	cmp	r3, #13
 800b3bc:	d00d      	beq.n	800b3da <f_gets+0x5a>
		*p++ = c;
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	1c5a      	adds	r2, r3, #1
 800b3c2:	61ba      	str	r2, [r7, #24]
 800b3c4:	187a      	adds	r2, r7, r1
 800b3c6:	7812      	ldrb	r2, [r2, #0]
 800b3c8:	701a      	strb	r2, [r3, #0]
		n++;
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800b3d0:	187b      	adds	r3, r7, r1
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	2b0a      	cmp	r3, #10
 800b3d6:	d009      	beq.n	800b3ec <f_gets+0x6c>
 800b3d8:	e000      	b.n	800b3dc <f_gets+0x5c>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800b3da:	46c0      	nop			@ (mov r8, r8)
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	69fa      	ldr	r2, [r7, #28]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	dbd7      	blt.n	800b396 <f_gets+0x16>
 800b3e6:	e002      	b.n	800b3ee <f_gets+0x6e>
		if (rc != 1) break;
 800b3e8:	46c0      	nop			@ (mov r8, r8)
 800b3ea:	e000      	b.n	800b3ee <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 800b3ec:	46c0      	nop			@ (mov r8, r8)
	}
	*p = 0;
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d001      	beq.n	800b3fe <f_gets+0x7e>
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	e000      	b.n	800b400 <f_gets+0x80>
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	0018      	movs	r0, r3
 800b402:	46bd      	mov	sp, r7
 800b404:	b009      	add	sp, #36	@ 0x24
 800b406:	bd90      	pop	{r4, r7, pc}

0800b408 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	000a      	movs	r2, r1
 800b412:	1cfb      	adds	r3, r7, #3
 800b414:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b416:	1cfb      	adds	r3, r7, #3
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	2b0a      	cmp	r3, #10
 800b41c:	d104      	bne.n	800b428 <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	210d      	movs	r1, #13
 800b422:	0018      	movs	r0, r3
 800b424:	f7ff fff0 	bl	800b408 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	db26      	blt.n	800b482 <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	1c5a      	adds	r2, r3, #1
 800b438:	60fa      	str	r2, [r7, #12]
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	18d3      	adds	r3, r2, r3
 800b43e:	1cfa      	adds	r2, r7, #3
 800b440:	7812      	ldrb	r2, [r2, #0]
 800b442:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b3c      	cmp	r3, #60	@ 0x3c
 800b448:	dd12      	ble.n	800b470 <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6818      	ldr	r0, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	330c      	adds	r3, #12
 800b452:	0019      	movs	r1, r3
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	2308      	movs	r3, #8
 800b458:	18fb      	adds	r3, r7, r3
 800b45a:	f7ff fd39 	bl	800aed0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	429a      	cmp	r2, r3
 800b464:	d101      	bne.n	800b46a <putc_bfd+0x62>
 800b466:	2300      	movs	r3, #0
 800b468:	e001      	b.n	800b46e <putc_bfd+0x66>
 800b46a:	2301      	movs	r3, #1
 800b46c:	425b      	negs	r3, r3
 800b46e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	1c5a      	adds	r2, r3, #1
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	609a      	str	r2, [r3, #8]
 800b480:	e000      	b.n	800b484 <putc_bfd+0x7c>
	if (i < 0) return;
 800b482:	46c0      	nop			@ (mov r8, r8)
}
 800b484:	46bd      	mov	sp, r7
 800b486:	b004      	add	sp, #16
 800b488:	bd80      	pop	{r7, pc}

0800b48a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b084      	sub	sp, #16
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	db15      	blt.n	800b4c6 <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6818      	ldr	r0, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	330c      	adds	r3, #12
 800b4a2:	0019      	movs	r1, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	001a      	movs	r2, r3
 800b4aa:	230c      	movs	r3, #12
 800b4ac:	18fb      	adds	r3, r7, r3
 800b4ae:	f7ff fd0f 	bl	800aed0 <f_write>
 800b4b2:	1e03      	subs	r3, r0, #0
 800b4b4:	d107      	bne.n	800b4c6 <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d102      	bne.n	800b4c6 <putc_flush+0x3c>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	e001      	b.n	800b4ca <putc_flush+0x40>
	return EOF;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	425b      	negs	r3, r3
}
 800b4ca:	0018      	movs	r0, r3
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	b004      	add	sp, #16
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b082      	sub	sp, #8
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	605a      	str	r2, [r3, #4]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	609a      	str	r2, [r3, #8]
}
 800b4f0:	46c0      	nop			@ (mov r8, r8)
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	b002      	add	sp, #8
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b096      	sub	sp, #88	@ 0x58
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	230c      	movs	r3, #12
 800b506:	18fb      	adds	r3, r7, r3
 800b508:	0011      	movs	r1, r2
 800b50a:	0018      	movs	r0, r3
 800b50c:	f7ff ffe1 	bl	800b4d2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800b510:	e009      	b.n	800b526 <f_puts+0x2e>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	1c5a      	adds	r2, r3, #1
 800b516:	607a      	str	r2, [r7, #4]
 800b518:	781a      	ldrb	r2, [r3, #0]
 800b51a:	230c      	movs	r3, #12
 800b51c:	18fb      	adds	r3, r7, r3
 800b51e:	0011      	movs	r1, r2
 800b520:	0018      	movs	r0, r3
 800b522:	f7ff ff71 	bl	800b408 <putc_bfd>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1f1      	bne.n	800b512 <f_puts+0x1a>
	return putc_flush(&pb);
 800b52e:	230c      	movs	r3, #12
 800b530:	18fb      	adds	r3, r7, r3
 800b532:	0018      	movs	r0, r3
 800b534:	f7ff ffa9 	bl	800b48a <putc_flush>
 800b538:	0003      	movs	r3, r0
}
 800b53a:	0018      	movs	r0, r3
 800b53c:	46bd      	mov	sp, r7
 800b53e:	b016      	add	sp, #88	@ 0x58
 800b540:	bd80      	pop	{r7, pc}
	...

0800b544 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b544:	b590      	push	{r4, r7, lr}
 800b546:	b087      	sub	sp, #28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	1dfb      	adds	r3, r7, #7
 800b550:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800b552:	2417      	movs	r4, #23
 800b554:	193b      	adds	r3, r7, r4
 800b556:	2201      	movs	r2, #1
 800b558:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800b55a:	2016      	movs	r0, #22
 800b55c:	183b      	adds	r3, r7, r0
 800b55e:	2200      	movs	r2, #0
 800b560:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 800b562:	4b21      	ldr	r3, [pc, #132]	@ (800b5e8 <FATFS_LinkDriverEx+0xa4>)
 800b564:	7a5b      	ldrb	r3, [r3, #9]
 800b566:	b2db      	uxtb	r3, r3
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d136      	bne.n	800b5da <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b56c:	4b1e      	ldr	r3, [pc, #120]	@ (800b5e8 <FATFS_LinkDriverEx+0xa4>)
 800b56e:	7a5b      	ldrb	r3, [r3, #9]
 800b570:	b2db      	uxtb	r3, r3
 800b572:	001a      	movs	r2, r3
 800b574:	4b1c      	ldr	r3, [pc, #112]	@ (800b5e8 <FATFS_LinkDriverEx+0xa4>)
 800b576:	2100      	movs	r1, #0
 800b578:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b57a:	4b1b      	ldr	r3, [pc, #108]	@ (800b5e8 <FATFS_LinkDriverEx+0xa4>)
 800b57c:	7a5b      	ldrb	r3, [r3, #9]
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	4a19      	ldr	r2, [pc, #100]	@ (800b5e8 <FATFS_LinkDriverEx+0xa4>)
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	18d3      	adds	r3, r2, r3
 800b586:	3304      	adds	r3, #4
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 800b58c:	4b16      	ldr	r3, [pc, #88]	@ (800b5e8 <FATFS_LinkDriverEx+0xa4>)
 800b58e:	7a5b      	ldrb	r3, [r3, #9]
 800b590:	b2db      	uxtb	r3, r3
 800b592:	001a      	movs	r2, r3
 800b594:	4b14      	ldr	r3, [pc, #80]	@ (800b5e8 <FATFS_LinkDriverEx+0xa4>)
 800b596:	189b      	adds	r3, r3, r2
 800b598:	1dfa      	adds	r2, r7, #7
 800b59a:	7812      	ldrb	r2, [r2, #0]
 800b59c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b59e:	4b12      	ldr	r3, [pc, #72]	@ (800b5e8 <FATFS_LinkDriverEx+0xa4>)
 800b5a0:	7a5b      	ldrb	r3, [r3, #9]
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	b2d1      	uxtb	r1, r2
 800b5a8:	4a0f      	ldr	r2, [pc, #60]	@ (800b5e8 <FATFS_LinkDriverEx+0xa4>)
 800b5aa:	7251      	strb	r1, [r2, #9]
 800b5ac:	183a      	adds	r2, r7, r0
 800b5ae:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800b5b0:	183b      	adds	r3, r7, r0
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	3330      	adds	r3, #48	@ 0x30
 800b5b6:	b2da      	uxtb	r2, r3
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	223a      	movs	r2, #58	@ 0x3a
 800b5c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	3302      	adds	r3, #2
 800b5c8:	222f      	movs	r2, #47	@ 0x2f
 800b5ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	3303      	adds	r3, #3
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b5d4:	193b      	adds	r3, r7, r4
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b5da:	2317      	movs	r3, #23
 800b5dc:	18fb      	adds	r3, r7, r3
 800b5de:	781b      	ldrb	r3, [r3, #0]
}
 800b5e0:	0018      	movs	r0, r3
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	b007      	add	sp, #28
 800b5e6:	bd90      	pop	{r4, r7, pc}
 800b5e8:	200005b0 	.word	0x200005b0

0800b5ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	0018      	movs	r0, r3
 800b5fe:	f7ff ffa1 	bl	800b544 <FATFS_LinkDriverEx>
 800b602:	0003      	movs	r3, r0
}
 800b604:	0018      	movs	r0, r3
 800b606:	46bd      	mov	sp, r7
 800b608:	b002      	add	sp, #8
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	0002      	movs	r2, r0
 800b614:	6039      	str	r1, [r7, #0]
 800b616:	1dbb      	adds	r3, r7, #6
 800b618:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b61a:	1dbb      	adds	r3, r7, #6
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b620:	d805      	bhi.n	800b62e <ff_convert+0x22>
		c = chr;
 800b622:	230e      	movs	r3, #14
 800b624:	18fb      	adds	r3, r7, r3
 800b626:	1dba      	adds	r2, r7, #6
 800b628:	8812      	ldrh	r2, [r2, #0]
 800b62a:	801a      	strh	r2, [r3, #0]
 800b62c:	e037      	b.n	800b69e <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d010      	beq.n	800b656 <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b634:	1dbb      	adds	r3, r7, #6
 800b636:	881b      	ldrh	r3, [r3, #0]
 800b638:	2bff      	cmp	r3, #255	@ 0xff
 800b63a:	d807      	bhi.n	800b64c <ff_convert+0x40>
 800b63c:	1dbb      	adds	r3, r7, #6
 800b63e:	881b      	ldrh	r3, [r3, #0]
 800b640:	3b80      	subs	r3, #128	@ 0x80
 800b642:	001a      	movs	r2, r3
 800b644:	4b19      	ldr	r3, [pc, #100]	@ (800b6ac <ff_convert+0xa0>)
 800b646:	0052      	lsls	r2, r2, #1
 800b648:	5ad2      	ldrh	r2, [r2, r3]
 800b64a:	e000      	b.n	800b64e <ff_convert+0x42>
 800b64c:	2200      	movs	r2, #0
 800b64e:	230e      	movs	r3, #14
 800b650:	18fb      	adds	r3, r7, r3
 800b652:	801a      	strh	r2, [r3, #0]
 800b654:	e023      	b.n	800b69e <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b656:	230e      	movs	r3, #14
 800b658:	18fb      	adds	r3, r7, r3
 800b65a:	2200      	movs	r2, #0
 800b65c:	801a      	strh	r2, [r3, #0]
 800b65e:	e00e      	b.n	800b67e <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 800b660:	210e      	movs	r1, #14
 800b662:	187b      	adds	r3, r7, r1
 800b664:	881a      	ldrh	r2, [r3, #0]
 800b666:	4b11      	ldr	r3, [pc, #68]	@ (800b6ac <ff_convert+0xa0>)
 800b668:	0052      	lsls	r2, r2, #1
 800b66a:	5ad3      	ldrh	r3, [r2, r3]
 800b66c:	1dba      	adds	r2, r7, #6
 800b66e:	8812      	ldrh	r2, [r2, #0]
 800b670:	429a      	cmp	r2, r3
 800b672:	d00a      	beq.n	800b68a <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 800b674:	187b      	adds	r3, r7, r1
 800b676:	881a      	ldrh	r2, [r3, #0]
 800b678:	187b      	adds	r3, r7, r1
 800b67a:	3201      	adds	r2, #1
 800b67c:	801a      	strh	r2, [r3, #0]
 800b67e:	230e      	movs	r3, #14
 800b680:	18fb      	adds	r3, r7, r3
 800b682:	881b      	ldrh	r3, [r3, #0]
 800b684:	2b7f      	cmp	r3, #127	@ 0x7f
 800b686:	d9eb      	bls.n	800b660 <ff_convert+0x54>
 800b688:	e000      	b.n	800b68c <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 800b68a:	46c0      	nop			@ (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 800b68c:	210e      	movs	r1, #14
 800b68e:	187b      	adds	r3, r7, r1
 800b690:	881b      	ldrh	r3, [r3, #0]
 800b692:	3380      	adds	r3, #128	@ 0x80
 800b694:	b29a      	uxth	r2, r3
 800b696:	187b      	adds	r3, r7, r1
 800b698:	21ff      	movs	r1, #255	@ 0xff
 800b69a:	400a      	ands	r2, r1
 800b69c:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 800b69e:	230e      	movs	r3, #14
 800b6a0:	18fb      	adds	r3, r7, r3
 800b6a2:	881b      	ldrh	r3, [r3, #0]
}
 800b6a4:	0018      	movs	r0, r3
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	b004      	add	sp, #16
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	080103f4 	.word	0x080103f4

0800b6b0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b6b0:	b5b0      	push	{r4, r5, r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	0002      	movs	r2, r0
 800b6b8:	1dbb      	adds	r3, r7, #6
 800b6ba:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b6bc:	1dbb      	adds	r3, r7, #6
 800b6be:	881a      	ldrh	r2, [r3, #0]
 800b6c0:	2380      	movs	r3, #128	@ 0x80
 800b6c2:	015b      	lsls	r3, r3, #5
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d201      	bcs.n	800b6cc <ff_wtoupper+0x1c>
 800b6c8:	4b4d      	ldr	r3, [pc, #308]	@ (800b800 <ff_wtoupper+0x150>)
 800b6ca:	e000      	b.n	800b6ce <ff_wtoupper+0x1e>
 800b6cc:	4b4d      	ldr	r3, [pc, #308]	@ (800b804 <ff_wtoupper+0x154>)
 800b6ce:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	1c9a      	adds	r2, r3, #2
 800b6d4:	617a      	str	r2, [r7, #20]
 800b6d6:	2412      	movs	r4, #18
 800b6d8:	193a      	adds	r2, r7, r4
 800b6da:	881b      	ldrh	r3, [r3, #0]
 800b6dc:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 800b6de:	193b      	adds	r3, r7, r4
 800b6e0:	881b      	ldrh	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d100      	bne.n	800b6e8 <ff_wtoupper+0x38>
 800b6e6:	e084      	b.n	800b7f2 <ff_wtoupper+0x142>
 800b6e8:	1dba      	adds	r2, r7, #6
 800b6ea:	193b      	adds	r3, r7, r4
 800b6ec:	8812      	ldrh	r2, [r2, #0]
 800b6ee:	881b      	ldrh	r3, [r3, #0]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d200      	bcs.n	800b6f6 <ff_wtoupper+0x46>
 800b6f4:	e07d      	b.n	800b7f2 <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	1c9a      	adds	r2, r3, #2
 800b6fa:	617a      	str	r2, [r7, #20]
 800b6fc:	2010      	movs	r0, #16
 800b6fe:	183a      	adds	r2, r7, r0
 800b700:	881b      	ldrh	r3, [r3, #0]
 800b702:	8013      	strh	r3, [r2, #0]
 800b704:	250e      	movs	r5, #14
 800b706:	197b      	adds	r3, r7, r5
 800b708:	183a      	adds	r2, r7, r0
 800b70a:	8812      	ldrh	r2, [r2, #0]
 800b70c:	0a12      	lsrs	r2, r2, #8
 800b70e:	801a      	strh	r2, [r3, #0]
 800b710:	183b      	adds	r3, r7, r0
 800b712:	183a      	adds	r2, r7, r0
 800b714:	8812      	ldrh	r2, [r2, #0]
 800b716:	21ff      	movs	r1, #255	@ 0xff
 800b718:	400a      	ands	r2, r1
 800b71a:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 800b71c:	1dbb      	adds	r3, r7, #6
 800b71e:	881a      	ldrh	r2, [r3, #0]
 800b720:	193b      	adds	r3, r7, r4
 800b722:	8819      	ldrh	r1, [r3, #0]
 800b724:	183b      	adds	r3, r7, r0
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	18cb      	adds	r3, r1, r3
 800b72a:	429a      	cmp	r2, r3
 800b72c:	da52      	bge.n	800b7d4 <ff_wtoupper+0x124>
			switch (cmd) {
 800b72e:	197b      	adds	r3, r7, r5
 800b730:	881b      	ldrh	r3, [r3, #0]
 800b732:	2b08      	cmp	r3, #8
 800b734:	d85c      	bhi.n	800b7f0 <ff_wtoupper+0x140>
 800b736:	009a      	lsls	r2, r3, #2
 800b738:	4b33      	ldr	r3, [pc, #204]	@ (800b808 <ff_wtoupper+0x158>)
 800b73a:	18d3      	adds	r3, r2, r3
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b740:	1dbb      	adds	r3, r7, #6
 800b742:	881a      	ldrh	r2, [r3, #0]
 800b744:	2312      	movs	r3, #18
 800b746:	18fb      	adds	r3, r7, r3
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	005b      	lsls	r3, r3, #1
 800b74e:	697a      	ldr	r2, [r7, #20]
 800b750:	18d2      	adds	r2, r2, r3
 800b752:	1dbb      	adds	r3, r7, #6
 800b754:	8812      	ldrh	r2, [r2, #0]
 800b756:	801a      	strh	r2, [r3, #0]
 800b758:	e03b      	b.n	800b7d2 <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b75a:	1dba      	adds	r2, r7, #6
 800b75c:	2312      	movs	r3, #18
 800b75e:	18fb      	adds	r3, r7, r3
 800b760:	8812      	ldrh	r2, [r2, #0]
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	b29b      	uxth	r3, r3
 800b768:	2201      	movs	r2, #1
 800b76a:	4013      	ands	r3, r2
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	1dbb      	adds	r3, r7, #6
 800b770:	1db9      	adds	r1, r7, #6
 800b772:	8809      	ldrh	r1, [r1, #0]
 800b774:	1a8a      	subs	r2, r1, r2
 800b776:	801a      	strh	r2, [r3, #0]
 800b778:	e02b      	b.n	800b7d2 <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b77a:	1dbb      	adds	r3, r7, #6
 800b77c:	1dba      	adds	r2, r7, #6
 800b77e:	8812      	ldrh	r2, [r2, #0]
 800b780:	3a10      	subs	r2, #16
 800b782:	801a      	strh	r2, [r3, #0]
 800b784:	e025      	b.n	800b7d2 <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b786:	1dbb      	adds	r3, r7, #6
 800b788:	1dba      	adds	r2, r7, #6
 800b78a:	8812      	ldrh	r2, [r2, #0]
 800b78c:	3a20      	subs	r2, #32
 800b78e:	801a      	strh	r2, [r3, #0]
 800b790:	e01f      	b.n	800b7d2 <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b792:	1dbb      	adds	r3, r7, #6
 800b794:	1dba      	adds	r2, r7, #6
 800b796:	8812      	ldrh	r2, [r2, #0]
 800b798:	3a30      	subs	r2, #48	@ 0x30
 800b79a:	801a      	strh	r2, [r3, #0]
 800b79c:	e019      	b.n	800b7d2 <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b79e:	1dbb      	adds	r3, r7, #6
 800b7a0:	1dba      	adds	r2, r7, #6
 800b7a2:	8812      	ldrh	r2, [r2, #0]
 800b7a4:	3a1a      	subs	r2, #26
 800b7a6:	801a      	strh	r2, [r3, #0]
 800b7a8:	e013      	b.n	800b7d2 <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b7aa:	1dbb      	adds	r3, r7, #6
 800b7ac:	1dba      	adds	r2, r7, #6
 800b7ae:	8812      	ldrh	r2, [r2, #0]
 800b7b0:	3208      	adds	r2, #8
 800b7b2:	801a      	strh	r2, [r3, #0]
 800b7b4:	e00d      	b.n	800b7d2 <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b7b6:	1dbb      	adds	r3, r7, #6
 800b7b8:	1dba      	adds	r2, r7, #6
 800b7ba:	8812      	ldrh	r2, [r2, #0]
 800b7bc:	3a50      	subs	r2, #80	@ 0x50
 800b7be:	801a      	strh	r2, [r3, #0]
 800b7c0:	e007      	b.n	800b7d2 <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b7c2:	1dbb      	adds	r3, r7, #6
 800b7c4:	1dba      	adds	r2, r7, #6
 800b7c6:	8812      	ldrh	r2, [r2, #0]
 800b7c8:	4910      	ldr	r1, [pc, #64]	@ (800b80c <ff_wtoupper+0x15c>)
 800b7ca:	468c      	mov	ip, r1
 800b7cc:	4462      	add	r2, ip
 800b7ce:	801a      	strh	r2, [r3, #0]
 800b7d0:	46c0      	nop			@ (mov r8, r8)
			}
			break;
 800b7d2:	e00d      	b.n	800b7f0 <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 800b7d4:	230e      	movs	r3, #14
 800b7d6:	18fb      	adds	r3, r7, r3
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d000      	beq.n	800b7e0 <ff_wtoupper+0x130>
 800b7de:	e777      	b.n	800b6d0 <ff_wtoupper+0x20>
 800b7e0:	2310      	movs	r3, #16
 800b7e2:	18fb      	adds	r3, r7, r3
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	005b      	lsls	r3, r3, #1
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	18d3      	adds	r3, r2, r3
 800b7ec:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b7ee:	e76f      	b.n	800b6d0 <ff_wtoupper+0x20>
			break;
 800b7f0:	46c0      	nop			@ (mov r8, r8)
	}

	return chr;
 800b7f2:	1dbb      	adds	r3, r7, #6
 800b7f4:	881b      	ldrh	r3, [r3, #0]
}
 800b7f6:	0018      	movs	r0, r3
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	b006      	add	sp, #24
 800b7fc:	bdb0      	pop	{r4, r5, r7, pc}
 800b7fe:	46c0      	nop			@ (mov r8, r8)
 800b800:	08010518 	.word	0x08010518
 800b804:	0801070c 	.word	0x0801070c
 800b808:	080104f4 	.word	0x080104f4
 800b80c:	ffffe3a0 	.word	0xffffe3a0

0800b810 <atoi>:
 800b810:	b510      	push	{r4, lr}
 800b812:	220a      	movs	r2, #10
 800b814:	2100      	movs	r1, #0
 800b816:	f000 f88f 	bl	800b938 <strtol>
 800b81a:	bd10      	pop	{r4, pc}

0800b81c <_strtol_l.constprop.0>:
 800b81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b81e:	b085      	sub	sp, #20
 800b820:	0017      	movs	r7, r2
 800b822:	001e      	movs	r6, r3
 800b824:	9003      	str	r0, [sp, #12]
 800b826:	9101      	str	r1, [sp, #4]
 800b828:	2b24      	cmp	r3, #36	@ 0x24
 800b82a:	d844      	bhi.n	800b8b6 <_strtol_l.constprop.0+0x9a>
 800b82c:	000c      	movs	r4, r1
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d041      	beq.n	800b8b6 <_strtol_l.constprop.0+0x9a>
 800b832:	4b3d      	ldr	r3, [pc, #244]	@ (800b928 <_strtol_l.constprop.0+0x10c>)
 800b834:	2208      	movs	r2, #8
 800b836:	469c      	mov	ip, r3
 800b838:	0023      	movs	r3, r4
 800b83a:	4661      	mov	r1, ip
 800b83c:	781d      	ldrb	r5, [r3, #0]
 800b83e:	3401      	adds	r4, #1
 800b840:	5d48      	ldrb	r0, [r1, r5]
 800b842:	0001      	movs	r1, r0
 800b844:	4011      	ands	r1, r2
 800b846:	4210      	tst	r0, r2
 800b848:	d1f6      	bne.n	800b838 <_strtol_l.constprop.0+0x1c>
 800b84a:	2d2d      	cmp	r5, #45	@ 0x2d
 800b84c:	d13a      	bne.n	800b8c4 <_strtol_l.constprop.0+0xa8>
 800b84e:	7825      	ldrb	r5, [r4, #0]
 800b850:	1c9c      	adds	r4, r3, #2
 800b852:	2301      	movs	r3, #1
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	2210      	movs	r2, #16
 800b858:	0033      	movs	r3, r6
 800b85a:	4393      	bics	r3, r2
 800b85c:	d109      	bne.n	800b872 <_strtol_l.constprop.0+0x56>
 800b85e:	2d30      	cmp	r5, #48	@ 0x30
 800b860:	d136      	bne.n	800b8d0 <_strtol_l.constprop.0+0xb4>
 800b862:	2120      	movs	r1, #32
 800b864:	7823      	ldrb	r3, [r4, #0]
 800b866:	438b      	bics	r3, r1
 800b868:	2b58      	cmp	r3, #88	@ 0x58
 800b86a:	d131      	bne.n	800b8d0 <_strtol_l.constprop.0+0xb4>
 800b86c:	0016      	movs	r6, r2
 800b86e:	7865      	ldrb	r5, [r4, #1]
 800b870:	3402      	adds	r4, #2
 800b872:	4a2e      	ldr	r2, [pc, #184]	@ (800b92c <_strtol_l.constprop.0+0x110>)
 800b874:	9b00      	ldr	r3, [sp, #0]
 800b876:	4694      	mov	ip, r2
 800b878:	4463      	add	r3, ip
 800b87a:	0031      	movs	r1, r6
 800b87c:	0018      	movs	r0, r3
 800b87e:	9302      	str	r3, [sp, #8]
 800b880:	f7f4 fce4 	bl	800024c <__aeabi_uidivmod>
 800b884:	2200      	movs	r2, #0
 800b886:	4684      	mov	ip, r0
 800b888:	0010      	movs	r0, r2
 800b88a:	002b      	movs	r3, r5
 800b88c:	3b30      	subs	r3, #48	@ 0x30
 800b88e:	2b09      	cmp	r3, #9
 800b890:	d825      	bhi.n	800b8de <_strtol_l.constprop.0+0xc2>
 800b892:	001d      	movs	r5, r3
 800b894:	42ae      	cmp	r6, r5
 800b896:	dd31      	ble.n	800b8fc <_strtol_l.constprop.0+0xe0>
 800b898:	1c53      	adds	r3, r2, #1
 800b89a:	d009      	beq.n	800b8b0 <_strtol_l.constprop.0+0x94>
 800b89c:	2201      	movs	r2, #1
 800b89e:	4252      	negs	r2, r2
 800b8a0:	4584      	cmp	ip, r0
 800b8a2:	d305      	bcc.n	800b8b0 <_strtol_l.constprop.0+0x94>
 800b8a4:	d101      	bne.n	800b8aa <_strtol_l.constprop.0+0x8e>
 800b8a6:	42a9      	cmp	r1, r5
 800b8a8:	db25      	blt.n	800b8f6 <_strtol_l.constprop.0+0xda>
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	4370      	muls	r0, r6
 800b8ae:	1828      	adds	r0, r5, r0
 800b8b0:	7825      	ldrb	r5, [r4, #0]
 800b8b2:	3401      	adds	r4, #1
 800b8b4:	e7e9      	b.n	800b88a <_strtol_l.constprop.0+0x6e>
 800b8b6:	f001 f879 	bl	800c9ac <__errno>
 800b8ba:	2316      	movs	r3, #22
 800b8bc:	6003      	str	r3, [r0, #0]
 800b8be:	2000      	movs	r0, #0
 800b8c0:	b005      	add	sp, #20
 800b8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8c4:	9100      	str	r1, [sp, #0]
 800b8c6:	2d2b      	cmp	r5, #43	@ 0x2b
 800b8c8:	d1c5      	bne.n	800b856 <_strtol_l.constprop.0+0x3a>
 800b8ca:	7825      	ldrb	r5, [r4, #0]
 800b8cc:	1c9c      	adds	r4, r3, #2
 800b8ce:	e7c2      	b.n	800b856 <_strtol_l.constprop.0+0x3a>
 800b8d0:	2e00      	cmp	r6, #0
 800b8d2:	d1ce      	bne.n	800b872 <_strtol_l.constprop.0+0x56>
 800b8d4:	3608      	adds	r6, #8
 800b8d6:	2d30      	cmp	r5, #48	@ 0x30
 800b8d8:	d0cb      	beq.n	800b872 <_strtol_l.constprop.0+0x56>
 800b8da:	3602      	adds	r6, #2
 800b8dc:	e7c9      	b.n	800b872 <_strtol_l.constprop.0+0x56>
 800b8de:	002b      	movs	r3, r5
 800b8e0:	3b41      	subs	r3, #65	@ 0x41
 800b8e2:	2b19      	cmp	r3, #25
 800b8e4:	d801      	bhi.n	800b8ea <_strtol_l.constprop.0+0xce>
 800b8e6:	3d37      	subs	r5, #55	@ 0x37
 800b8e8:	e7d4      	b.n	800b894 <_strtol_l.constprop.0+0x78>
 800b8ea:	002b      	movs	r3, r5
 800b8ec:	3b61      	subs	r3, #97	@ 0x61
 800b8ee:	2b19      	cmp	r3, #25
 800b8f0:	d804      	bhi.n	800b8fc <_strtol_l.constprop.0+0xe0>
 800b8f2:	3d57      	subs	r5, #87	@ 0x57
 800b8f4:	e7ce      	b.n	800b894 <_strtol_l.constprop.0+0x78>
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	4252      	negs	r2, r2
 800b8fa:	e7d9      	b.n	800b8b0 <_strtol_l.constprop.0+0x94>
 800b8fc:	1c53      	adds	r3, r2, #1
 800b8fe:	d108      	bne.n	800b912 <_strtol_l.constprop.0+0xf6>
 800b900:	2322      	movs	r3, #34	@ 0x22
 800b902:	9a03      	ldr	r2, [sp, #12]
 800b904:	9802      	ldr	r0, [sp, #8]
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	2f00      	cmp	r7, #0
 800b90a:	d0d9      	beq.n	800b8c0 <_strtol_l.constprop.0+0xa4>
 800b90c:	1e63      	subs	r3, r4, #1
 800b90e:	9301      	str	r3, [sp, #4]
 800b910:	e007      	b.n	800b922 <_strtol_l.constprop.0+0x106>
 800b912:	9b00      	ldr	r3, [sp, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d000      	beq.n	800b91a <_strtol_l.constprop.0+0xfe>
 800b918:	4240      	negs	r0, r0
 800b91a:	2f00      	cmp	r7, #0
 800b91c:	d0d0      	beq.n	800b8c0 <_strtol_l.constprop.0+0xa4>
 800b91e:	2a00      	cmp	r2, #0
 800b920:	d1f4      	bne.n	800b90c <_strtol_l.constprop.0+0xf0>
 800b922:	9b01      	ldr	r3, [sp, #4]
 800b924:	603b      	str	r3, [r7, #0]
 800b926:	e7cb      	b.n	800b8c0 <_strtol_l.constprop.0+0xa4>
 800b928:	080107c9 	.word	0x080107c9
 800b92c:	7fffffff 	.word	0x7fffffff

0800b930 <_strtol_r>:
 800b930:	b510      	push	{r4, lr}
 800b932:	f7ff ff73 	bl	800b81c <_strtol_l.constprop.0>
 800b936:	bd10      	pop	{r4, pc}

0800b938 <strtol>:
 800b938:	b510      	push	{r4, lr}
 800b93a:	4c04      	ldr	r4, [pc, #16]	@ (800b94c <strtol+0x14>)
 800b93c:	0013      	movs	r3, r2
 800b93e:	000a      	movs	r2, r1
 800b940:	0001      	movs	r1, r0
 800b942:	6820      	ldr	r0, [r4, #0]
 800b944:	f7ff ff6a 	bl	800b81c <_strtol_l.constprop.0>
 800b948:	bd10      	pop	{r4, pc}
 800b94a:	46c0      	nop			@ (mov r8, r8)
 800b94c:	20000030 	.word	0x20000030

0800b950 <__cvt>:
 800b950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b952:	001f      	movs	r7, r3
 800b954:	2300      	movs	r3, #0
 800b956:	0016      	movs	r6, r2
 800b958:	b08b      	sub	sp, #44	@ 0x2c
 800b95a:	429f      	cmp	r7, r3
 800b95c:	da04      	bge.n	800b968 <__cvt+0x18>
 800b95e:	2180      	movs	r1, #128	@ 0x80
 800b960:	0609      	lsls	r1, r1, #24
 800b962:	187b      	adds	r3, r7, r1
 800b964:	001f      	movs	r7, r3
 800b966:	232d      	movs	r3, #45	@ 0x2d
 800b968:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b96a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b96c:	7013      	strb	r3, [r2, #0]
 800b96e:	2320      	movs	r3, #32
 800b970:	2203      	movs	r2, #3
 800b972:	439d      	bics	r5, r3
 800b974:	2d46      	cmp	r5, #70	@ 0x46
 800b976:	d007      	beq.n	800b988 <__cvt+0x38>
 800b978:	002b      	movs	r3, r5
 800b97a:	3b45      	subs	r3, #69	@ 0x45
 800b97c:	4259      	negs	r1, r3
 800b97e:	414b      	adcs	r3, r1
 800b980:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b982:	3a01      	subs	r2, #1
 800b984:	18cb      	adds	r3, r1, r3
 800b986:	9310      	str	r3, [sp, #64]	@ 0x40
 800b988:	ab09      	add	r3, sp, #36	@ 0x24
 800b98a:	9304      	str	r3, [sp, #16]
 800b98c:	ab08      	add	r3, sp, #32
 800b98e:	9303      	str	r3, [sp, #12]
 800b990:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b992:	9200      	str	r2, [sp, #0]
 800b994:	9302      	str	r3, [sp, #8]
 800b996:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b998:	0032      	movs	r2, r6
 800b99a:	9301      	str	r3, [sp, #4]
 800b99c:	003b      	movs	r3, r7
 800b99e:	f001 f8cf 	bl	800cb40 <_dtoa_r>
 800b9a2:	0004      	movs	r4, r0
 800b9a4:	2d47      	cmp	r5, #71	@ 0x47
 800b9a6:	d11b      	bne.n	800b9e0 <__cvt+0x90>
 800b9a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b9aa:	07db      	lsls	r3, r3, #31
 800b9ac:	d511      	bpl.n	800b9d2 <__cvt+0x82>
 800b9ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b9b0:	18c3      	adds	r3, r0, r3
 800b9b2:	9307      	str	r3, [sp, #28]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	0030      	movs	r0, r6
 800b9ba:	0039      	movs	r1, r7
 800b9bc:	f7f4 fd46 	bl	800044c <__aeabi_dcmpeq>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d001      	beq.n	800b9c8 <__cvt+0x78>
 800b9c4:	9b07      	ldr	r3, [sp, #28]
 800b9c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9c8:	2230      	movs	r2, #48	@ 0x30
 800b9ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9cc:	9907      	ldr	r1, [sp, #28]
 800b9ce:	428b      	cmp	r3, r1
 800b9d0:	d320      	bcc.n	800ba14 <__cvt+0xc4>
 800b9d2:	0020      	movs	r0, r4
 800b9d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b9d8:	1b1b      	subs	r3, r3, r4
 800b9da:	6013      	str	r3, [r2, #0]
 800b9dc:	b00b      	add	sp, #44	@ 0x2c
 800b9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b9e2:	18c3      	adds	r3, r0, r3
 800b9e4:	9307      	str	r3, [sp, #28]
 800b9e6:	2d46      	cmp	r5, #70	@ 0x46
 800b9e8:	d1e4      	bne.n	800b9b4 <__cvt+0x64>
 800b9ea:	7803      	ldrb	r3, [r0, #0]
 800b9ec:	2b30      	cmp	r3, #48	@ 0x30
 800b9ee:	d10c      	bne.n	800ba0a <__cvt+0xba>
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	0030      	movs	r0, r6
 800b9f6:	0039      	movs	r1, r7
 800b9f8:	f7f4 fd28 	bl	800044c <__aeabi_dcmpeq>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	d104      	bne.n	800ba0a <__cvt+0xba>
 800ba00:	2301      	movs	r3, #1
 800ba02:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ba04:	1a9b      	subs	r3, r3, r2
 800ba06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba08:	6013      	str	r3, [r2, #0]
 800ba0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ba0c:	9a07      	ldr	r2, [sp, #28]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	18d3      	adds	r3, r2, r3
 800ba12:	e7ce      	b.n	800b9b2 <__cvt+0x62>
 800ba14:	1c59      	adds	r1, r3, #1
 800ba16:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba18:	701a      	strb	r2, [r3, #0]
 800ba1a:	e7d6      	b.n	800b9ca <__cvt+0x7a>

0800ba1c <__exponent>:
 800ba1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba1e:	232b      	movs	r3, #43	@ 0x2b
 800ba20:	0005      	movs	r5, r0
 800ba22:	000c      	movs	r4, r1
 800ba24:	b085      	sub	sp, #20
 800ba26:	7002      	strb	r2, [r0, #0]
 800ba28:	2900      	cmp	r1, #0
 800ba2a:	da01      	bge.n	800ba30 <__exponent+0x14>
 800ba2c:	424c      	negs	r4, r1
 800ba2e:	3302      	adds	r3, #2
 800ba30:	706b      	strb	r3, [r5, #1]
 800ba32:	2c09      	cmp	r4, #9
 800ba34:	dd2c      	ble.n	800ba90 <__exponent+0x74>
 800ba36:	ab02      	add	r3, sp, #8
 800ba38:	1dde      	adds	r6, r3, #7
 800ba3a:	0020      	movs	r0, r4
 800ba3c:	210a      	movs	r1, #10
 800ba3e:	f7f4 fcef 	bl	8000420 <__aeabi_idivmod>
 800ba42:	0037      	movs	r7, r6
 800ba44:	3130      	adds	r1, #48	@ 0x30
 800ba46:	3e01      	subs	r6, #1
 800ba48:	0020      	movs	r0, r4
 800ba4a:	7031      	strb	r1, [r6, #0]
 800ba4c:	210a      	movs	r1, #10
 800ba4e:	9401      	str	r4, [sp, #4]
 800ba50:	f7f4 fc00 	bl	8000254 <__divsi3>
 800ba54:	9b01      	ldr	r3, [sp, #4]
 800ba56:	0004      	movs	r4, r0
 800ba58:	2b63      	cmp	r3, #99	@ 0x63
 800ba5a:	dcee      	bgt.n	800ba3a <__exponent+0x1e>
 800ba5c:	1eba      	subs	r2, r7, #2
 800ba5e:	1ca8      	adds	r0, r5, #2
 800ba60:	0001      	movs	r1, r0
 800ba62:	0013      	movs	r3, r2
 800ba64:	3430      	adds	r4, #48	@ 0x30
 800ba66:	7014      	strb	r4, [r2, #0]
 800ba68:	ac02      	add	r4, sp, #8
 800ba6a:	3407      	adds	r4, #7
 800ba6c:	429c      	cmp	r4, r3
 800ba6e:	d80a      	bhi.n	800ba86 <__exponent+0x6a>
 800ba70:	2300      	movs	r3, #0
 800ba72:	42a2      	cmp	r2, r4
 800ba74:	d803      	bhi.n	800ba7e <__exponent+0x62>
 800ba76:	3309      	adds	r3, #9
 800ba78:	aa02      	add	r2, sp, #8
 800ba7a:	189b      	adds	r3, r3, r2
 800ba7c:	1bdb      	subs	r3, r3, r7
 800ba7e:	18c0      	adds	r0, r0, r3
 800ba80:	1b40      	subs	r0, r0, r5
 800ba82:	b005      	add	sp, #20
 800ba84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba86:	781c      	ldrb	r4, [r3, #0]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	700c      	strb	r4, [r1, #0]
 800ba8c:	3101      	adds	r1, #1
 800ba8e:	e7eb      	b.n	800ba68 <__exponent+0x4c>
 800ba90:	2330      	movs	r3, #48	@ 0x30
 800ba92:	18e4      	adds	r4, r4, r3
 800ba94:	70ab      	strb	r3, [r5, #2]
 800ba96:	1d28      	adds	r0, r5, #4
 800ba98:	70ec      	strb	r4, [r5, #3]
 800ba9a:	e7f1      	b.n	800ba80 <__exponent+0x64>

0800ba9c <_printf_float>:
 800ba9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba9e:	b097      	sub	sp, #92	@ 0x5c
 800baa0:	000d      	movs	r5, r1
 800baa2:	920a      	str	r2, [sp, #40]	@ 0x28
 800baa4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800baa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baa8:	9009      	str	r0, [sp, #36]	@ 0x24
 800baaa:	f000 ff2d 	bl	800c908 <_localeconv_r>
 800baae:	6803      	ldr	r3, [r0, #0]
 800bab0:	0018      	movs	r0, r3
 800bab2:	930d      	str	r3, [sp, #52]	@ 0x34
 800bab4:	f7f4 fb28 	bl	8000108 <strlen>
 800bab8:	2300      	movs	r3, #0
 800baba:	900f      	str	r0, [sp, #60]	@ 0x3c
 800babc:	9314      	str	r3, [sp, #80]	@ 0x50
 800babe:	7e2b      	ldrb	r3, [r5, #24]
 800bac0:	2207      	movs	r2, #7
 800bac2:	930c      	str	r3, [sp, #48]	@ 0x30
 800bac4:	682b      	ldr	r3, [r5, #0]
 800bac6:	930e      	str	r3, [sp, #56]	@ 0x38
 800bac8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	05c9      	lsls	r1, r1, #23
 800bace:	d545      	bpl.n	800bb5c <_printf_float+0xc0>
 800bad0:	189b      	adds	r3, r3, r2
 800bad2:	4393      	bics	r3, r2
 800bad4:	001a      	movs	r2, r3
 800bad6:	3208      	adds	r2, #8
 800bad8:	6022      	str	r2, [r4, #0]
 800bada:	2201      	movs	r2, #1
 800badc:	681e      	ldr	r6, [r3, #0]
 800bade:	685f      	ldr	r7, [r3, #4]
 800bae0:	007b      	lsls	r3, r7, #1
 800bae2:	085b      	lsrs	r3, r3, #1
 800bae4:	9311      	str	r3, [sp, #68]	@ 0x44
 800bae6:	9610      	str	r6, [sp, #64]	@ 0x40
 800bae8:	64ae      	str	r6, [r5, #72]	@ 0x48
 800baea:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800baec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800baee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800baf0:	4ba7      	ldr	r3, [pc, #668]	@ (800bd90 <_printf_float+0x2f4>)
 800baf2:	4252      	negs	r2, r2
 800baf4:	f7f6 ff58 	bl	80029a8 <__aeabi_dcmpun>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	d131      	bne.n	800bb60 <_printf_float+0xc4>
 800bafc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bafe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800bb00:	2201      	movs	r2, #1
 800bb02:	4ba3      	ldr	r3, [pc, #652]	@ (800bd90 <_printf_float+0x2f4>)
 800bb04:	4252      	negs	r2, r2
 800bb06:	f7f4 fcb1 	bl	800046c <__aeabi_dcmple>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d128      	bne.n	800bb60 <_printf_float+0xc4>
 800bb0e:	2200      	movs	r2, #0
 800bb10:	2300      	movs	r3, #0
 800bb12:	0030      	movs	r0, r6
 800bb14:	0039      	movs	r1, r7
 800bb16:	f7f4 fc9f 	bl	8000458 <__aeabi_dcmplt>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d003      	beq.n	800bb26 <_printf_float+0x8a>
 800bb1e:	002b      	movs	r3, r5
 800bb20:	222d      	movs	r2, #45	@ 0x2d
 800bb22:	3343      	adds	r3, #67	@ 0x43
 800bb24:	701a      	strb	r2, [r3, #0]
 800bb26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb28:	4f9a      	ldr	r7, [pc, #616]	@ (800bd94 <_printf_float+0x2f8>)
 800bb2a:	2b47      	cmp	r3, #71	@ 0x47
 800bb2c:	d900      	bls.n	800bb30 <_printf_float+0x94>
 800bb2e:	4f9a      	ldr	r7, [pc, #616]	@ (800bd98 <_printf_float+0x2fc>)
 800bb30:	2303      	movs	r3, #3
 800bb32:	2400      	movs	r4, #0
 800bb34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb36:	612b      	str	r3, [r5, #16]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	439a      	bics	r2, r3
 800bb3c:	602a      	str	r2, [r5, #0]
 800bb3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb40:	0029      	movs	r1, r5
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb48:	aa15      	add	r2, sp, #84	@ 0x54
 800bb4a:	f000 f9e5 	bl	800bf18 <_printf_common>
 800bb4e:	3001      	adds	r0, #1
 800bb50:	d000      	beq.n	800bb54 <_printf_float+0xb8>
 800bb52:	e09f      	b.n	800bc94 <_printf_float+0x1f8>
 800bb54:	2001      	movs	r0, #1
 800bb56:	4240      	negs	r0, r0
 800bb58:	b017      	add	sp, #92	@ 0x5c
 800bb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb5c:	3307      	adds	r3, #7
 800bb5e:	e7b8      	b.n	800bad2 <_printf_float+0x36>
 800bb60:	0032      	movs	r2, r6
 800bb62:	003b      	movs	r3, r7
 800bb64:	0030      	movs	r0, r6
 800bb66:	0039      	movs	r1, r7
 800bb68:	f7f6 ff1e 	bl	80029a8 <__aeabi_dcmpun>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d00b      	beq.n	800bb88 <_printf_float+0xec>
 800bb70:	2f00      	cmp	r7, #0
 800bb72:	da03      	bge.n	800bb7c <_printf_float+0xe0>
 800bb74:	002b      	movs	r3, r5
 800bb76:	222d      	movs	r2, #45	@ 0x2d
 800bb78:	3343      	adds	r3, #67	@ 0x43
 800bb7a:	701a      	strb	r2, [r3, #0]
 800bb7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb7e:	4f87      	ldr	r7, [pc, #540]	@ (800bd9c <_printf_float+0x300>)
 800bb80:	2b47      	cmp	r3, #71	@ 0x47
 800bb82:	d9d5      	bls.n	800bb30 <_printf_float+0x94>
 800bb84:	4f86      	ldr	r7, [pc, #536]	@ (800bda0 <_printf_float+0x304>)
 800bb86:	e7d3      	b.n	800bb30 <_printf_float+0x94>
 800bb88:	2220      	movs	r2, #32
 800bb8a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800bb8c:	686b      	ldr	r3, [r5, #4]
 800bb8e:	4394      	bics	r4, r2
 800bb90:	1c5a      	adds	r2, r3, #1
 800bb92:	d146      	bne.n	800bc22 <_printf_float+0x186>
 800bb94:	3307      	adds	r3, #7
 800bb96:	606b      	str	r3, [r5, #4]
 800bb98:	2380      	movs	r3, #128	@ 0x80
 800bb9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	2200      	movs	r2, #0
 800bba2:	602b      	str	r3, [r5, #0]
 800bba4:	9206      	str	r2, [sp, #24]
 800bba6:	aa14      	add	r2, sp, #80	@ 0x50
 800bba8:	9205      	str	r2, [sp, #20]
 800bbaa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bbac:	a90a      	add	r1, sp, #40	@ 0x28
 800bbae:	9204      	str	r2, [sp, #16]
 800bbb0:	aa13      	add	r2, sp, #76	@ 0x4c
 800bbb2:	9203      	str	r2, [sp, #12]
 800bbb4:	2223      	movs	r2, #35	@ 0x23
 800bbb6:	1852      	adds	r2, r2, r1
 800bbb8:	9202      	str	r2, [sp, #8]
 800bbba:	9301      	str	r3, [sp, #4]
 800bbbc:	686b      	ldr	r3, [r5, #4]
 800bbbe:	0032      	movs	r2, r6
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbc4:	003b      	movs	r3, r7
 800bbc6:	f7ff fec3 	bl	800b950 <__cvt>
 800bbca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bbcc:	0007      	movs	r7, r0
 800bbce:	2c47      	cmp	r4, #71	@ 0x47
 800bbd0:	d12d      	bne.n	800bc2e <_printf_float+0x192>
 800bbd2:	1cd3      	adds	r3, r2, #3
 800bbd4:	db02      	blt.n	800bbdc <_printf_float+0x140>
 800bbd6:	686b      	ldr	r3, [r5, #4]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	dd48      	ble.n	800bc6e <_printf_float+0x1d2>
 800bbdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbde:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bbe0:	3b02      	subs	r3, #2
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	930c      	str	r3, [sp, #48]	@ 0x30
 800bbe6:	0028      	movs	r0, r5
 800bbe8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bbea:	3901      	subs	r1, #1
 800bbec:	3050      	adds	r0, #80	@ 0x50
 800bbee:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bbf0:	f7ff ff14 	bl	800ba1c <__exponent>
 800bbf4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bbf6:	0004      	movs	r4, r0
 800bbf8:	1813      	adds	r3, r2, r0
 800bbfa:	612b      	str	r3, [r5, #16]
 800bbfc:	2a01      	cmp	r2, #1
 800bbfe:	dc02      	bgt.n	800bc06 <_printf_float+0x16a>
 800bc00:	682a      	ldr	r2, [r5, #0]
 800bc02:	07d2      	lsls	r2, r2, #31
 800bc04:	d501      	bpl.n	800bc0a <_printf_float+0x16e>
 800bc06:	3301      	adds	r3, #1
 800bc08:	612b      	str	r3, [r5, #16]
 800bc0a:	2323      	movs	r3, #35	@ 0x23
 800bc0c:	aa0a      	add	r2, sp, #40	@ 0x28
 800bc0e:	189b      	adds	r3, r3, r2
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d100      	bne.n	800bc18 <_printf_float+0x17c>
 800bc16:	e792      	b.n	800bb3e <_printf_float+0xa2>
 800bc18:	002b      	movs	r3, r5
 800bc1a:	222d      	movs	r2, #45	@ 0x2d
 800bc1c:	3343      	adds	r3, #67	@ 0x43
 800bc1e:	701a      	strb	r2, [r3, #0]
 800bc20:	e78d      	b.n	800bb3e <_printf_float+0xa2>
 800bc22:	2c47      	cmp	r4, #71	@ 0x47
 800bc24:	d1b8      	bne.n	800bb98 <_printf_float+0xfc>
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1b6      	bne.n	800bb98 <_printf_float+0xfc>
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	e7b3      	b.n	800bb96 <_printf_float+0xfa>
 800bc2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc30:	0011      	movs	r1, r2
 800bc32:	2b65      	cmp	r3, #101	@ 0x65
 800bc34:	d9d7      	bls.n	800bbe6 <_printf_float+0x14a>
 800bc36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc38:	2b66      	cmp	r3, #102	@ 0x66
 800bc3a:	d11a      	bne.n	800bc72 <_printf_float+0x1d6>
 800bc3c:	686b      	ldr	r3, [r5, #4]
 800bc3e:	2a00      	cmp	r2, #0
 800bc40:	dd09      	ble.n	800bc56 <_printf_float+0x1ba>
 800bc42:	612a      	str	r2, [r5, #16]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d102      	bne.n	800bc4e <_printf_float+0x1b2>
 800bc48:	6829      	ldr	r1, [r5, #0]
 800bc4a:	07c9      	lsls	r1, r1, #31
 800bc4c:	d50b      	bpl.n	800bc66 <_printf_float+0x1ca>
 800bc4e:	3301      	adds	r3, #1
 800bc50:	189b      	adds	r3, r3, r2
 800bc52:	612b      	str	r3, [r5, #16]
 800bc54:	e007      	b.n	800bc66 <_printf_float+0x1ca>
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d103      	bne.n	800bc62 <_printf_float+0x1c6>
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	6829      	ldr	r1, [r5, #0]
 800bc5e:	4211      	tst	r1, r2
 800bc60:	d000      	beq.n	800bc64 <_printf_float+0x1c8>
 800bc62:	1c9a      	adds	r2, r3, #2
 800bc64:	612a      	str	r2, [r5, #16]
 800bc66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc68:	2400      	movs	r4, #0
 800bc6a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800bc6c:	e7cd      	b.n	800bc0a <_printf_float+0x16e>
 800bc6e:	2367      	movs	r3, #103	@ 0x67
 800bc70:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc72:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bc74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bc76:	4299      	cmp	r1, r3
 800bc78:	db06      	blt.n	800bc88 <_printf_float+0x1ec>
 800bc7a:	682b      	ldr	r3, [r5, #0]
 800bc7c:	6129      	str	r1, [r5, #16]
 800bc7e:	07db      	lsls	r3, r3, #31
 800bc80:	d5f1      	bpl.n	800bc66 <_printf_float+0x1ca>
 800bc82:	3101      	adds	r1, #1
 800bc84:	6129      	str	r1, [r5, #16]
 800bc86:	e7ee      	b.n	800bc66 <_printf_float+0x1ca>
 800bc88:	2201      	movs	r2, #1
 800bc8a:	2900      	cmp	r1, #0
 800bc8c:	dce0      	bgt.n	800bc50 <_printf_float+0x1b4>
 800bc8e:	1892      	adds	r2, r2, r2
 800bc90:	1a52      	subs	r2, r2, r1
 800bc92:	e7dd      	b.n	800bc50 <_printf_float+0x1b4>
 800bc94:	682a      	ldr	r2, [r5, #0]
 800bc96:	0553      	lsls	r3, r2, #21
 800bc98:	d408      	bmi.n	800bcac <_printf_float+0x210>
 800bc9a:	692b      	ldr	r3, [r5, #16]
 800bc9c:	003a      	movs	r2, r7
 800bc9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bca0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bca2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bca4:	47a0      	blx	r4
 800bca6:	3001      	adds	r0, #1
 800bca8:	d129      	bne.n	800bcfe <_printf_float+0x262>
 800bcaa:	e753      	b.n	800bb54 <_printf_float+0xb8>
 800bcac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bcae:	2b65      	cmp	r3, #101	@ 0x65
 800bcb0:	d800      	bhi.n	800bcb4 <_printf_float+0x218>
 800bcb2:	e0da      	b.n	800be6a <_printf_float+0x3ce>
 800bcb4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800bcb6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bcb8:	2200      	movs	r2, #0
 800bcba:	2300      	movs	r3, #0
 800bcbc:	f7f4 fbc6 	bl	800044c <__aeabi_dcmpeq>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	d033      	beq.n	800bd2c <_printf_float+0x290>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	4a37      	ldr	r2, [pc, #220]	@ (800bda4 <_printf_float+0x308>)
 800bcc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bcca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bccc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bcce:	47a0      	blx	r4
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	d100      	bne.n	800bcd6 <_printf_float+0x23a>
 800bcd4:	e73e      	b.n	800bb54 <_printf_float+0xb8>
 800bcd6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800bcd8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bcda:	42b3      	cmp	r3, r6
 800bcdc:	db02      	blt.n	800bce4 <_printf_float+0x248>
 800bcde:	682b      	ldr	r3, [r5, #0]
 800bce0:	07db      	lsls	r3, r3, #31
 800bce2:	d50c      	bpl.n	800bcfe <_printf_float+0x262>
 800bce4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bce6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bce8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bcec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcee:	47a0      	blx	r4
 800bcf0:	2400      	movs	r4, #0
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	d100      	bne.n	800bcf8 <_printf_float+0x25c>
 800bcf6:	e72d      	b.n	800bb54 <_printf_float+0xb8>
 800bcf8:	1e73      	subs	r3, r6, #1
 800bcfa:	42a3      	cmp	r3, r4
 800bcfc:	dc0a      	bgt.n	800bd14 <_printf_float+0x278>
 800bcfe:	682b      	ldr	r3, [r5, #0]
 800bd00:	079b      	lsls	r3, r3, #30
 800bd02:	d500      	bpl.n	800bd06 <_printf_float+0x26a>
 800bd04:	e105      	b.n	800bf12 <_printf_float+0x476>
 800bd06:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bd08:	68e8      	ldr	r0, [r5, #12]
 800bd0a:	4298      	cmp	r0, r3
 800bd0c:	db00      	blt.n	800bd10 <_printf_float+0x274>
 800bd0e:	e723      	b.n	800bb58 <_printf_float+0xbc>
 800bd10:	0018      	movs	r0, r3
 800bd12:	e721      	b.n	800bb58 <_printf_float+0xbc>
 800bd14:	002a      	movs	r2, r5
 800bd16:	2301      	movs	r3, #1
 800bd18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd1c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bd1e:	321a      	adds	r2, #26
 800bd20:	47b8      	blx	r7
 800bd22:	3001      	adds	r0, #1
 800bd24:	d100      	bne.n	800bd28 <_printf_float+0x28c>
 800bd26:	e715      	b.n	800bb54 <_printf_float+0xb8>
 800bd28:	3401      	adds	r4, #1
 800bd2a:	e7e5      	b.n	800bcf8 <_printf_float+0x25c>
 800bd2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	dc3a      	bgt.n	800bda8 <_printf_float+0x30c>
 800bd32:	2301      	movs	r3, #1
 800bd34:	4a1b      	ldr	r2, [pc, #108]	@ (800bda4 <_printf_float+0x308>)
 800bd36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd3a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bd3c:	47a0      	blx	r4
 800bd3e:	3001      	adds	r0, #1
 800bd40:	d100      	bne.n	800bd44 <_printf_float+0x2a8>
 800bd42:	e707      	b.n	800bb54 <_printf_float+0xb8>
 800bd44:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800bd46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd48:	4333      	orrs	r3, r6
 800bd4a:	d102      	bne.n	800bd52 <_printf_float+0x2b6>
 800bd4c:	682b      	ldr	r3, [r5, #0]
 800bd4e:	07db      	lsls	r3, r3, #31
 800bd50:	d5d5      	bpl.n	800bcfe <_printf_float+0x262>
 800bd52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd5a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bd5c:	47a0      	blx	r4
 800bd5e:	2300      	movs	r3, #0
 800bd60:	3001      	adds	r0, #1
 800bd62:	d100      	bne.n	800bd66 <_printf_float+0x2ca>
 800bd64:	e6f6      	b.n	800bb54 <_printf_float+0xb8>
 800bd66:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd68:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd6a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bd6c:	425b      	negs	r3, r3
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	dc01      	bgt.n	800bd76 <_printf_float+0x2da>
 800bd72:	0033      	movs	r3, r6
 800bd74:	e792      	b.n	800bc9c <_printf_float+0x200>
 800bd76:	002a      	movs	r2, r5
 800bd78:	2301      	movs	r3, #1
 800bd7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd7e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bd80:	321a      	adds	r2, #26
 800bd82:	47a0      	blx	r4
 800bd84:	3001      	adds	r0, #1
 800bd86:	d100      	bne.n	800bd8a <_printf_float+0x2ee>
 800bd88:	e6e4      	b.n	800bb54 <_printf_float+0xb8>
 800bd8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	e7ea      	b.n	800bd66 <_printf_float+0x2ca>
 800bd90:	7fefffff 	.word	0x7fefffff
 800bd94:	080108c9 	.word	0x080108c9
 800bd98:	080108cd 	.word	0x080108cd
 800bd9c:	080108d1 	.word	0x080108d1
 800bda0:	080108d5 	.word	0x080108d5
 800bda4:	080108d9 	.word	0x080108d9
 800bda8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bdaa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800bdac:	930c      	str	r3, [sp, #48]	@ 0x30
 800bdae:	429e      	cmp	r6, r3
 800bdb0:	dd00      	ble.n	800bdb4 <_printf_float+0x318>
 800bdb2:	001e      	movs	r6, r3
 800bdb4:	2e00      	cmp	r6, #0
 800bdb6:	dc31      	bgt.n	800be1c <_printf_float+0x380>
 800bdb8:	43f3      	mvns	r3, r6
 800bdba:	2400      	movs	r4, #0
 800bdbc:	17db      	asrs	r3, r3, #31
 800bdbe:	4033      	ands	r3, r6
 800bdc0:	930e      	str	r3, [sp, #56]	@ 0x38
 800bdc2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800bdc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdc6:	1af3      	subs	r3, r6, r3
 800bdc8:	42a3      	cmp	r3, r4
 800bdca:	dc30      	bgt.n	800be2e <_printf_float+0x392>
 800bdcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bdce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	dc38      	bgt.n	800be46 <_printf_float+0x3aa>
 800bdd4:	682b      	ldr	r3, [r5, #0]
 800bdd6:	07db      	lsls	r3, r3, #31
 800bdd8:	d435      	bmi.n	800be46 <_printf_float+0x3aa>
 800bdda:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800bddc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdde:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bde0:	1b9b      	subs	r3, r3, r6
 800bde2:	1b14      	subs	r4, r2, r4
 800bde4:	429c      	cmp	r4, r3
 800bde6:	dd00      	ble.n	800bdea <_printf_float+0x34e>
 800bde8:	001c      	movs	r4, r3
 800bdea:	2c00      	cmp	r4, #0
 800bdec:	dc34      	bgt.n	800be58 <_printf_float+0x3bc>
 800bdee:	43e3      	mvns	r3, r4
 800bdf0:	2600      	movs	r6, #0
 800bdf2:	17db      	asrs	r3, r3, #31
 800bdf4:	401c      	ands	r4, r3
 800bdf6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bdf8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	1b1b      	subs	r3, r3, r4
 800bdfe:	42b3      	cmp	r3, r6
 800be00:	dc00      	bgt.n	800be04 <_printf_float+0x368>
 800be02:	e77c      	b.n	800bcfe <_printf_float+0x262>
 800be04:	002a      	movs	r2, r5
 800be06:	2301      	movs	r3, #1
 800be08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be0c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800be0e:	321a      	adds	r2, #26
 800be10:	47b8      	blx	r7
 800be12:	3001      	adds	r0, #1
 800be14:	d100      	bne.n	800be18 <_printf_float+0x37c>
 800be16:	e69d      	b.n	800bb54 <_printf_float+0xb8>
 800be18:	3601      	adds	r6, #1
 800be1a:	e7ec      	b.n	800bdf6 <_printf_float+0x35a>
 800be1c:	0033      	movs	r3, r6
 800be1e:	003a      	movs	r2, r7
 800be20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be24:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800be26:	47a0      	blx	r4
 800be28:	3001      	adds	r0, #1
 800be2a:	d1c5      	bne.n	800bdb8 <_printf_float+0x31c>
 800be2c:	e692      	b.n	800bb54 <_printf_float+0xb8>
 800be2e:	002a      	movs	r2, r5
 800be30:	2301      	movs	r3, #1
 800be32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be36:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800be38:	321a      	adds	r2, #26
 800be3a:	47b0      	blx	r6
 800be3c:	3001      	adds	r0, #1
 800be3e:	d100      	bne.n	800be42 <_printf_float+0x3a6>
 800be40:	e688      	b.n	800bb54 <_printf_float+0xb8>
 800be42:	3401      	adds	r4, #1
 800be44:	e7bd      	b.n	800bdc2 <_printf_float+0x326>
 800be46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be4e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800be50:	47a0      	blx	r4
 800be52:	3001      	adds	r0, #1
 800be54:	d1c1      	bne.n	800bdda <_printf_float+0x33e>
 800be56:	e67d      	b.n	800bb54 <_printf_float+0xb8>
 800be58:	19ba      	adds	r2, r7, r6
 800be5a:	0023      	movs	r3, r4
 800be5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be60:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800be62:	47b0      	blx	r6
 800be64:	3001      	adds	r0, #1
 800be66:	d1c2      	bne.n	800bdee <_printf_float+0x352>
 800be68:	e674      	b.n	800bb54 <_printf_float+0xb8>
 800be6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800be6e:	2b01      	cmp	r3, #1
 800be70:	dc02      	bgt.n	800be78 <_printf_float+0x3dc>
 800be72:	2301      	movs	r3, #1
 800be74:	421a      	tst	r2, r3
 800be76:	d039      	beq.n	800beec <_printf_float+0x450>
 800be78:	2301      	movs	r3, #1
 800be7a:	003a      	movs	r2, r7
 800be7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be80:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800be82:	47b0      	blx	r6
 800be84:	3001      	adds	r0, #1
 800be86:	d100      	bne.n	800be8a <_printf_float+0x3ee>
 800be88:	e664      	b.n	800bb54 <_printf_float+0xb8>
 800be8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be92:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800be94:	47b0      	blx	r6
 800be96:	3001      	adds	r0, #1
 800be98:	d100      	bne.n	800be9c <_printf_float+0x400>
 800be9a:	e65b      	b.n	800bb54 <_printf_float+0xb8>
 800be9c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800be9e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bea2:	2200      	movs	r2, #0
 800bea4:	3b01      	subs	r3, #1
 800bea6:	930c      	str	r3, [sp, #48]	@ 0x30
 800bea8:	2300      	movs	r3, #0
 800beaa:	f7f4 facf 	bl	800044c <__aeabi_dcmpeq>
 800beae:	2800      	cmp	r0, #0
 800beb0:	d11a      	bne.n	800bee8 <_printf_float+0x44c>
 800beb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800beb4:	1c7a      	adds	r2, r7, #1
 800beb6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800beb8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800beba:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bebc:	47b0      	blx	r6
 800bebe:	3001      	adds	r0, #1
 800bec0:	d10e      	bne.n	800bee0 <_printf_float+0x444>
 800bec2:	e647      	b.n	800bb54 <_printf_float+0xb8>
 800bec4:	002a      	movs	r2, r5
 800bec6:	2301      	movs	r3, #1
 800bec8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800beca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800becc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bece:	321a      	adds	r2, #26
 800bed0:	47b8      	blx	r7
 800bed2:	3001      	adds	r0, #1
 800bed4:	d100      	bne.n	800bed8 <_printf_float+0x43c>
 800bed6:	e63d      	b.n	800bb54 <_printf_float+0xb8>
 800bed8:	3601      	adds	r6, #1
 800beda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bedc:	429e      	cmp	r6, r3
 800bede:	dbf1      	blt.n	800bec4 <_printf_float+0x428>
 800bee0:	002a      	movs	r2, r5
 800bee2:	0023      	movs	r3, r4
 800bee4:	3250      	adds	r2, #80	@ 0x50
 800bee6:	e6da      	b.n	800bc9e <_printf_float+0x202>
 800bee8:	2600      	movs	r6, #0
 800beea:	e7f6      	b.n	800beda <_printf_float+0x43e>
 800beec:	003a      	movs	r2, r7
 800beee:	e7e2      	b.n	800beb6 <_printf_float+0x41a>
 800bef0:	002a      	movs	r2, r5
 800bef2:	2301      	movs	r3, #1
 800bef4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bef8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800befa:	3219      	adds	r2, #25
 800befc:	47b0      	blx	r6
 800befe:	3001      	adds	r0, #1
 800bf00:	d100      	bne.n	800bf04 <_printf_float+0x468>
 800bf02:	e627      	b.n	800bb54 <_printf_float+0xb8>
 800bf04:	3401      	adds	r4, #1
 800bf06:	68eb      	ldr	r3, [r5, #12]
 800bf08:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bf0a:	1a9b      	subs	r3, r3, r2
 800bf0c:	42a3      	cmp	r3, r4
 800bf0e:	dcef      	bgt.n	800bef0 <_printf_float+0x454>
 800bf10:	e6f9      	b.n	800bd06 <_printf_float+0x26a>
 800bf12:	2400      	movs	r4, #0
 800bf14:	e7f7      	b.n	800bf06 <_printf_float+0x46a>
 800bf16:	46c0      	nop			@ (mov r8, r8)

0800bf18 <_printf_common>:
 800bf18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf1a:	0016      	movs	r6, r2
 800bf1c:	9301      	str	r3, [sp, #4]
 800bf1e:	688a      	ldr	r2, [r1, #8]
 800bf20:	690b      	ldr	r3, [r1, #16]
 800bf22:	000c      	movs	r4, r1
 800bf24:	9000      	str	r0, [sp, #0]
 800bf26:	4293      	cmp	r3, r2
 800bf28:	da00      	bge.n	800bf2c <_printf_common+0x14>
 800bf2a:	0013      	movs	r3, r2
 800bf2c:	0022      	movs	r2, r4
 800bf2e:	6033      	str	r3, [r6, #0]
 800bf30:	3243      	adds	r2, #67	@ 0x43
 800bf32:	7812      	ldrb	r2, [r2, #0]
 800bf34:	2a00      	cmp	r2, #0
 800bf36:	d001      	beq.n	800bf3c <_printf_common+0x24>
 800bf38:	3301      	adds	r3, #1
 800bf3a:	6033      	str	r3, [r6, #0]
 800bf3c:	6823      	ldr	r3, [r4, #0]
 800bf3e:	069b      	lsls	r3, r3, #26
 800bf40:	d502      	bpl.n	800bf48 <_printf_common+0x30>
 800bf42:	6833      	ldr	r3, [r6, #0]
 800bf44:	3302      	adds	r3, #2
 800bf46:	6033      	str	r3, [r6, #0]
 800bf48:	6822      	ldr	r2, [r4, #0]
 800bf4a:	2306      	movs	r3, #6
 800bf4c:	0015      	movs	r5, r2
 800bf4e:	401d      	ands	r5, r3
 800bf50:	421a      	tst	r2, r3
 800bf52:	d027      	beq.n	800bfa4 <_printf_common+0x8c>
 800bf54:	0023      	movs	r3, r4
 800bf56:	3343      	adds	r3, #67	@ 0x43
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	1e5a      	subs	r2, r3, #1
 800bf5c:	4193      	sbcs	r3, r2
 800bf5e:	6822      	ldr	r2, [r4, #0]
 800bf60:	0692      	lsls	r2, r2, #26
 800bf62:	d430      	bmi.n	800bfc6 <_printf_common+0xae>
 800bf64:	0022      	movs	r2, r4
 800bf66:	9901      	ldr	r1, [sp, #4]
 800bf68:	9800      	ldr	r0, [sp, #0]
 800bf6a:	9d08      	ldr	r5, [sp, #32]
 800bf6c:	3243      	adds	r2, #67	@ 0x43
 800bf6e:	47a8      	blx	r5
 800bf70:	3001      	adds	r0, #1
 800bf72:	d025      	beq.n	800bfc0 <_printf_common+0xa8>
 800bf74:	2206      	movs	r2, #6
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	2500      	movs	r5, #0
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	2b04      	cmp	r3, #4
 800bf7e:	d105      	bne.n	800bf8c <_printf_common+0x74>
 800bf80:	6833      	ldr	r3, [r6, #0]
 800bf82:	68e5      	ldr	r5, [r4, #12]
 800bf84:	1aed      	subs	r5, r5, r3
 800bf86:	43eb      	mvns	r3, r5
 800bf88:	17db      	asrs	r3, r3, #31
 800bf8a:	401d      	ands	r5, r3
 800bf8c:	68a3      	ldr	r3, [r4, #8]
 800bf8e:	6922      	ldr	r2, [r4, #16]
 800bf90:	4293      	cmp	r3, r2
 800bf92:	dd01      	ble.n	800bf98 <_printf_common+0x80>
 800bf94:	1a9b      	subs	r3, r3, r2
 800bf96:	18ed      	adds	r5, r5, r3
 800bf98:	2600      	movs	r6, #0
 800bf9a:	42b5      	cmp	r5, r6
 800bf9c:	d120      	bne.n	800bfe0 <_printf_common+0xc8>
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	e010      	b.n	800bfc4 <_printf_common+0xac>
 800bfa2:	3501      	adds	r5, #1
 800bfa4:	68e3      	ldr	r3, [r4, #12]
 800bfa6:	6832      	ldr	r2, [r6, #0]
 800bfa8:	1a9b      	subs	r3, r3, r2
 800bfaa:	42ab      	cmp	r3, r5
 800bfac:	ddd2      	ble.n	800bf54 <_printf_common+0x3c>
 800bfae:	0022      	movs	r2, r4
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	9901      	ldr	r1, [sp, #4]
 800bfb4:	9800      	ldr	r0, [sp, #0]
 800bfb6:	9f08      	ldr	r7, [sp, #32]
 800bfb8:	3219      	adds	r2, #25
 800bfba:	47b8      	blx	r7
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	d1f0      	bne.n	800bfa2 <_printf_common+0x8a>
 800bfc0:	2001      	movs	r0, #1
 800bfc2:	4240      	negs	r0, r0
 800bfc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfc6:	2030      	movs	r0, #48	@ 0x30
 800bfc8:	18e1      	adds	r1, r4, r3
 800bfca:	3143      	adds	r1, #67	@ 0x43
 800bfcc:	7008      	strb	r0, [r1, #0]
 800bfce:	0021      	movs	r1, r4
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	3145      	adds	r1, #69	@ 0x45
 800bfd4:	7809      	ldrb	r1, [r1, #0]
 800bfd6:	18a2      	adds	r2, r4, r2
 800bfd8:	3243      	adds	r2, #67	@ 0x43
 800bfda:	3302      	adds	r3, #2
 800bfdc:	7011      	strb	r1, [r2, #0]
 800bfde:	e7c1      	b.n	800bf64 <_printf_common+0x4c>
 800bfe0:	0022      	movs	r2, r4
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	9901      	ldr	r1, [sp, #4]
 800bfe6:	9800      	ldr	r0, [sp, #0]
 800bfe8:	9f08      	ldr	r7, [sp, #32]
 800bfea:	321a      	adds	r2, #26
 800bfec:	47b8      	blx	r7
 800bfee:	3001      	adds	r0, #1
 800bff0:	d0e6      	beq.n	800bfc0 <_printf_common+0xa8>
 800bff2:	3601      	adds	r6, #1
 800bff4:	e7d1      	b.n	800bf9a <_printf_common+0x82>
	...

0800bff8 <_printf_i>:
 800bff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bffa:	b08b      	sub	sp, #44	@ 0x2c
 800bffc:	9206      	str	r2, [sp, #24]
 800bffe:	000a      	movs	r2, r1
 800c000:	3243      	adds	r2, #67	@ 0x43
 800c002:	9307      	str	r3, [sp, #28]
 800c004:	9005      	str	r0, [sp, #20]
 800c006:	9203      	str	r2, [sp, #12]
 800c008:	7e0a      	ldrb	r2, [r1, #24]
 800c00a:	000c      	movs	r4, r1
 800c00c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c00e:	2a78      	cmp	r2, #120	@ 0x78
 800c010:	d809      	bhi.n	800c026 <_printf_i+0x2e>
 800c012:	2a62      	cmp	r2, #98	@ 0x62
 800c014:	d80b      	bhi.n	800c02e <_printf_i+0x36>
 800c016:	2a00      	cmp	r2, #0
 800c018:	d100      	bne.n	800c01c <_printf_i+0x24>
 800c01a:	e0bc      	b.n	800c196 <_printf_i+0x19e>
 800c01c:	497b      	ldr	r1, [pc, #492]	@ (800c20c <_printf_i+0x214>)
 800c01e:	9104      	str	r1, [sp, #16]
 800c020:	2a58      	cmp	r2, #88	@ 0x58
 800c022:	d100      	bne.n	800c026 <_printf_i+0x2e>
 800c024:	e090      	b.n	800c148 <_printf_i+0x150>
 800c026:	0025      	movs	r5, r4
 800c028:	3542      	adds	r5, #66	@ 0x42
 800c02a:	702a      	strb	r2, [r5, #0]
 800c02c:	e022      	b.n	800c074 <_printf_i+0x7c>
 800c02e:	0010      	movs	r0, r2
 800c030:	3863      	subs	r0, #99	@ 0x63
 800c032:	2815      	cmp	r0, #21
 800c034:	d8f7      	bhi.n	800c026 <_printf_i+0x2e>
 800c036:	f7f4 f879 	bl	800012c <__gnu_thumb1_case_shi>
 800c03a:	0016      	.short	0x0016
 800c03c:	fff6001f 	.word	0xfff6001f
 800c040:	fff6fff6 	.word	0xfff6fff6
 800c044:	001ffff6 	.word	0x001ffff6
 800c048:	fff6fff6 	.word	0xfff6fff6
 800c04c:	fff6fff6 	.word	0xfff6fff6
 800c050:	003600a1 	.word	0x003600a1
 800c054:	fff60080 	.word	0xfff60080
 800c058:	00b2fff6 	.word	0x00b2fff6
 800c05c:	0036fff6 	.word	0x0036fff6
 800c060:	fff6fff6 	.word	0xfff6fff6
 800c064:	0084      	.short	0x0084
 800c066:	0025      	movs	r5, r4
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	3542      	adds	r5, #66	@ 0x42
 800c06c:	1d11      	adds	r1, r2, #4
 800c06e:	6019      	str	r1, [r3, #0]
 800c070:	6813      	ldr	r3, [r2, #0]
 800c072:	702b      	strb	r3, [r5, #0]
 800c074:	2301      	movs	r3, #1
 800c076:	e0a0      	b.n	800c1ba <_printf_i+0x1c2>
 800c078:	6818      	ldr	r0, [r3, #0]
 800c07a:	6809      	ldr	r1, [r1, #0]
 800c07c:	1d02      	adds	r2, r0, #4
 800c07e:	060d      	lsls	r5, r1, #24
 800c080:	d50b      	bpl.n	800c09a <_printf_i+0xa2>
 800c082:	6806      	ldr	r6, [r0, #0]
 800c084:	601a      	str	r2, [r3, #0]
 800c086:	2e00      	cmp	r6, #0
 800c088:	da03      	bge.n	800c092 <_printf_i+0x9a>
 800c08a:	232d      	movs	r3, #45	@ 0x2d
 800c08c:	9a03      	ldr	r2, [sp, #12]
 800c08e:	4276      	negs	r6, r6
 800c090:	7013      	strb	r3, [r2, #0]
 800c092:	4b5e      	ldr	r3, [pc, #376]	@ (800c20c <_printf_i+0x214>)
 800c094:	270a      	movs	r7, #10
 800c096:	9304      	str	r3, [sp, #16]
 800c098:	e018      	b.n	800c0cc <_printf_i+0xd4>
 800c09a:	6806      	ldr	r6, [r0, #0]
 800c09c:	601a      	str	r2, [r3, #0]
 800c09e:	0649      	lsls	r1, r1, #25
 800c0a0:	d5f1      	bpl.n	800c086 <_printf_i+0x8e>
 800c0a2:	b236      	sxth	r6, r6
 800c0a4:	e7ef      	b.n	800c086 <_printf_i+0x8e>
 800c0a6:	6808      	ldr	r0, [r1, #0]
 800c0a8:	6819      	ldr	r1, [r3, #0]
 800c0aa:	c940      	ldmia	r1!, {r6}
 800c0ac:	0605      	lsls	r5, r0, #24
 800c0ae:	d402      	bmi.n	800c0b6 <_printf_i+0xbe>
 800c0b0:	0640      	lsls	r0, r0, #25
 800c0b2:	d500      	bpl.n	800c0b6 <_printf_i+0xbe>
 800c0b4:	b2b6      	uxth	r6, r6
 800c0b6:	6019      	str	r1, [r3, #0]
 800c0b8:	4b54      	ldr	r3, [pc, #336]	@ (800c20c <_printf_i+0x214>)
 800c0ba:	270a      	movs	r7, #10
 800c0bc:	9304      	str	r3, [sp, #16]
 800c0be:	2a6f      	cmp	r2, #111	@ 0x6f
 800c0c0:	d100      	bne.n	800c0c4 <_printf_i+0xcc>
 800c0c2:	3f02      	subs	r7, #2
 800c0c4:	0023      	movs	r3, r4
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	3343      	adds	r3, #67	@ 0x43
 800c0ca:	701a      	strb	r2, [r3, #0]
 800c0cc:	6863      	ldr	r3, [r4, #4]
 800c0ce:	60a3      	str	r3, [r4, #8]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	db03      	blt.n	800c0dc <_printf_i+0xe4>
 800c0d4:	2104      	movs	r1, #4
 800c0d6:	6822      	ldr	r2, [r4, #0]
 800c0d8:	438a      	bics	r2, r1
 800c0da:	6022      	str	r2, [r4, #0]
 800c0dc:	2e00      	cmp	r6, #0
 800c0de:	d102      	bne.n	800c0e6 <_printf_i+0xee>
 800c0e0:	9d03      	ldr	r5, [sp, #12]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00c      	beq.n	800c100 <_printf_i+0x108>
 800c0e6:	9d03      	ldr	r5, [sp, #12]
 800c0e8:	0030      	movs	r0, r6
 800c0ea:	0039      	movs	r1, r7
 800c0ec:	f7f4 f8ae 	bl	800024c <__aeabi_uidivmod>
 800c0f0:	9b04      	ldr	r3, [sp, #16]
 800c0f2:	3d01      	subs	r5, #1
 800c0f4:	5c5b      	ldrb	r3, [r3, r1]
 800c0f6:	702b      	strb	r3, [r5, #0]
 800c0f8:	0033      	movs	r3, r6
 800c0fa:	0006      	movs	r6, r0
 800c0fc:	429f      	cmp	r7, r3
 800c0fe:	d9f3      	bls.n	800c0e8 <_printf_i+0xf0>
 800c100:	2f08      	cmp	r7, #8
 800c102:	d109      	bne.n	800c118 <_printf_i+0x120>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	07db      	lsls	r3, r3, #31
 800c108:	d506      	bpl.n	800c118 <_printf_i+0x120>
 800c10a:	6862      	ldr	r2, [r4, #4]
 800c10c:	6923      	ldr	r3, [r4, #16]
 800c10e:	429a      	cmp	r2, r3
 800c110:	dc02      	bgt.n	800c118 <_printf_i+0x120>
 800c112:	2330      	movs	r3, #48	@ 0x30
 800c114:	3d01      	subs	r5, #1
 800c116:	702b      	strb	r3, [r5, #0]
 800c118:	9b03      	ldr	r3, [sp, #12]
 800c11a:	1b5b      	subs	r3, r3, r5
 800c11c:	6123      	str	r3, [r4, #16]
 800c11e:	9b07      	ldr	r3, [sp, #28]
 800c120:	0021      	movs	r1, r4
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	9805      	ldr	r0, [sp, #20]
 800c126:	9b06      	ldr	r3, [sp, #24]
 800c128:	aa09      	add	r2, sp, #36	@ 0x24
 800c12a:	f7ff fef5 	bl	800bf18 <_printf_common>
 800c12e:	3001      	adds	r0, #1
 800c130:	d148      	bne.n	800c1c4 <_printf_i+0x1cc>
 800c132:	2001      	movs	r0, #1
 800c134:	4240      	negs	r0, r0
 800c136:	b00b      	add	sp, #44	@ 0x2c
 800c138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c13a:	2220      	movs	r2, #32
 800c13c:	6809      	ldr	r1, [r1, #0]
 800c13e:	430a      	orrs	r2, r1
 800c140:	6022      	str	r2, [r4, #0]
 800c142:	2278      	movs	r2, #120	@ 0x78
 800c144:	4932      	ldr	r1, [pc, #200]	@ (800c210 <_printf_i+0x218>)
 800c146:	9104      	str	r1, [sp, #16]
 800c148:	0021      	movs	r1, r4
 800c14a:	3145      	adds	r1, #69	@ 0x45
 800c14c:	700a      	strb	r2, [r1, #0]
 800c14e:	6819      	ldr	r1, [r3, #0]
 800c150:	6822      	ldr	r2, [r4, #0]
 800c152:	c940      	ldmia	r1!, {r6}
 800c154:	0610      	lsls	r0, r2, #24
 800c156:	d402      	bmi.n	800c15e <_printf_i+0x166>
 800c158:	0650      	lsls	r0, r2, #25
 800c15a:	d500      	bpl.n	800c15e <_printf_i+0x166>
 800c15c:	b2b6      	uxth	r6, r6
 800c15e:	6019      	str	r1, [r3, #0]
 800c160:	07d3      	lsls	r3, r2, #31
 800c162:	d502      	bpl.n	800c16a <_printf_i+0x172>
 800c164:	2320      	movs	r3, #32
 800c166:	4313      	orrs	r3, r2
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	2e00      	cmp	r6, #0
 800c16c:	d001      	beq.n	800c172 <_printf_i+0x17a>
 800c16e:	2710      	movs	r7, #16
 800c170:	e7a8      	b.n	800c0c4 <_printf_i+0xcc>
 800c172:	2220      	movs	r2, #32
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	4393      	bics	r3, r2
 800c178:	6023      	str	r3, [r4, #0]
 800c17a:	e7f8      	b.n	800c16e <_printf_i+0x176>
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	680d      	ldr	r5, [r1, #0]
 800c180:	1d10      	adds	r0, r2, #4
 800c182:	6949      	ldr	r1, [r1, #20]
 800c184:	6018      	str	r0, [r3, #0]
 800c186:	6813      	ldr	r3, [r2, #0]
 800c188:	062e      	lsls	r6, r5, #24
 800c18a:	d501      	bpl.n	800c190 <_printf_i+0x198>
 800c18c:	6019      	str	r1, [r3, #0]
 800c18e:	e002      	b.n	800c196 <_printf_i+0x19e>
 800c190:	066d      	lsls	r5, r5, #25
 800c192:	d5fb      	bpl.n	800c18c <_printf_i+0x194>
 800c194:	8019      	strh	r1, [r3, #0]
 800c196:	2300      	movs	r3, #0
 800c198:	9d03      	ldr	r5, [sp, #12]
 800c19a:	6123      	str	r3, [r4, #16]
 800c19c:	e7bf      	b.n	800c11e <_printf_i+0x126>
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	1d11      	adds	r1, r2, #4
 800c1a2:	6019      	str	r1, [r3, #0]
 800c1a4:	6815      	ldr	r5, [r2, #0]
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	0028      	movs	r0, r5
 800c1aa:	6862      	ldr	r2, [r4, #4]
 800c1ac:	f000 fc2b 	bl	800ca06 <memchr>
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	d001      	beq.n	800c1b8 <_printf_i+0x1c0>
 800c1b4:	1b40      	subs	r0, r0, r5
 800c1b6:	6060      	str	r0, [r4, #4]
 800c1b8:	6863      	ldr	r3, [r4, #4]
 800c1ba:	6123      	str	r3, [r4, #16]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	9a03      	ldr	r2, [sp, #12]
 800c1c0:	7013      	strb	r3, [r2, #0]
 800c1c2:	e7ac      	b.n	800c11e <_printf_i+0x126>
 800c1c4:	002a      	movs	r2, r5
 800c1c6:	6923      	ldr	r3, [r4, #16]
 800c1c8:	9906      	ldr	r1, [sp, #24]
 800c1ca:	9805      	ldr	r0, [sp, #20]
 800c1cc:	9d07      	ldr	r5, [sp, #28]
 800c1ce:	47a8      	blx	r5
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	d0ae      	beq.n	800c132 <_printf_i+0x13a>
 800c1d4:	6823      	ldr	r3, [r4, #0]
 800c1d6:	079b      	lsls	r3, r3, #30
 800c1d8:	d415      	bmi.n	800c206 <_printf_i+0x20e>
 800c1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1dc:	68e0      	ldr	r0, [r4, #12]
 800c1de:	4298      	cmp	r0, r3
 800c1e0:	daa9      	bge.n	800c136 <_printf_i+0x13e>
 800c1e2:	0018      	movs	r0, r3
 800c1e4:	e7a7      	b.n	800c136 <_printf_i+0x13e>
 800c1e6:	0022      	movs	r2, r4
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	9906      	ldr	r1, [sp, #24]
 800c1ec:	9805      	ldr	r0, [sp, #20]
 800c1ee:	9e07      	ldr	r6, [sp, #28]
 800c1f0:	3219      	adds	r2, #25
 800c1f2:	47b0      	blx	r6
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	d09c      	beq.n	800c132 <_printf_i+0x13a>
 800c1f8:	3501      	adds	r5, #1
 800c1fa:	68e3      	ldr	r3, [r4, #12]
 800c1fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1fe:	1a9b      	subs	r3, r3, r2
 800c200:	42ab      	cmp	r3, r5
 800c202:	dcf0      	bgt.n	800c1e6 <_printf_i+0x1ee>
 800c204:	e7e9      	b.n	800c1da <_printf_i+0x1e2>
 800c206:	2500      	movs	r5, #0
 800c208:	e7f7      	b.n	800c1fa <_printf_i+0x202>
 800c20a:	46c0      	nop			@ (mov r8, r8)
 800c20c:	080108db 	.word	0x080108db
 800c210:	080108ec 	.word	0x080108ec

0800c214 <_scanf_float>:
 800c214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c216:	b08b      	sub	sp, #44	@ 0x2c
 800c218:	0016      	movs	r6, r2
 800c21a:	9003      	str	r0, [sp, #12]
 800c21c:	22ae      	movs	r2, #174	@ 0xae
 800c21e:	2000      	movs	r0, #0
 800c220:	9307      	str	r3, [sp, #28]
 800c222:	688b      	ldr	r3, [r1, #8]
 800c224:	000c      	movs	r4, r1
 800c226:	1e59      	subs	r1, r3, #1
 800c228:	0052      	lsls	r2, r2, #1
 800c22a:	9006      	str	r0, [sp, #24]
 800c22c:	4291      	cmp	r1, r2
 800c22e:	d905      	bls.n	800c23c <_scanf_float+0x28>
 800c230:	3b5e      	subs	r3, #94	@ 0x5e
 800c232:	3bff      	subs	r3, #255	@ 0xff
 800c234:	9306      	str	r3, [sp, #24]
 800c236:	235e      	movs	r3, #94	@ 0x5e
 800c238:	33ff      	adds	r3, #255	@ 0xff
 800c23a:	60a3      	str	r3, [r4, #8]
 800c23c:	23f0      	movs	r3, #240	@ 0xf0
 800c23e:	6822      	ldr	r2, [r4, #0]
 800c240:	00db      	lsls	r3, r3, #3
 800c242:	4313      	orrs	r3, r2
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	0023      	movs	r3, r4
 800c248:	2500      	movs	r5, #0
 800c24a:	331c      	adds	r3, #28
 800c24c:	001f      	movs	r7, r3
 800c24e:	9304      	str	r3, [sp, #16]
 800c250:	9502      	str	r5, [sp, #8]
 800c252:	9509      	str	r5, [sp, #36]	@ 0x24
 800c254:	9508      	str	r5, [sp, #32]
 800c256:	9501      	str	r5, [sp, #4]
 800c258:	9505      	str	r5, [sp, #20]
 800c25a:	68a2      	ldr	r2, [r4, #8]
 800c25c:	2a00      	cmp	r2, #0
 800c25e:	d00a      	beq.n	800c276 <_scanf_float+0x62>
 800c260:	6833      	ldr	r3, [r6, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b4e      	cmp	r3, #78	@ 0x4e
 800c266:	d844      	bhi.n	800c2f2 <_scanf_float+0xde>
 800c268:	0018      	movs	r0, r3
 800c26a:	2b40      	cmp	r3, #64	@ 0x40
 800c26c:	d82c      	bhi.n	800c2c8 <_scanf_float+0xb4>
 800c26e:	382b      	subs	r0, #43	@ 0x2b
 800c270:	b2c1      	uxtb	r1, r0
 800c272:	290e      	cmp	r1, #14
 800c274:	d92a      	bls.n	800c2cc <_scanf_float+0xb8>
 800c276:	9b01      	ldr	r3, [sp, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d003      	beq.n	800c284 <_scanf_float+0x70>
 800c27c:	6823      	ldr	r3, [r4, #0]
 800c27e:	4aa6      	ldr	r2, [pc, #664]	@ (800c518 <_scanf_float+0x304>)
 800c280:	4013      	ands	r3, r2
 800c282:	6023      	str	r3, [r4, #0]
 800c284:	9b02      	ldr	r3, [sp, #8]
 800c286:	3b01      	subs	r3, #1
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d900      	bls.n	800c28e <_scanf_float+0x7a>
 800c28c:	e0fe      	b.n	800c48c <_scanf_float+0x278>
 800c28e:	25be      	movs	r5, #190	@ 0xbe
 800c290:	006d      	lsls	r5, r5, #1
 800c292:	9b04      	ldr	r3, [sp, #16]
 800c294:	429f      	cmp	r7, r3
 800c296:	d900      	bls.n	800c29a <_scanf_float+0x86>
 800c298:	e0ee      	b.n	800c478 <_scanf_float+0x264>
 800c29a:	2001      	movs	r0, #1
 800c29c:	b00b      	add	sp, #44	@ 0x2c
 800c29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a0:	0018      	movs	r0, r3
 800c2a2:	3861      	subs	r0, #97	@ 0x61
 800c2a4:	280d      	cmp	r0, #13
 800c2a6:	d8e6      	bhi.n	800c276 <_scanf_float+0x62>
 800c2a8:	f7f3 ff40 	bl	800012c <__gnu_thumb1_case_shi>
 800c2ac:	ffe50089 	.word	0xffe50089
 800c2b0:	ffe5ffe5 	.word	0xffe5ffe5
 800c2b4:	00a700bb 	.word	0x00a700bb
 800c2b8:	ffe5ffe5 	.word	0xffe5ffe5
 800c2bc:	ffe5008f 	.word	0xffe5008f
 800c2c0:	ffe5ffe5 	.word	0xffe5ffe5
 800c2c4:	006bffe5 	.word	0x006bffe5
 800c2c8:	3841      	subs	r0, #65	@ 0x41
 800c2ca:	e7eb      	b.n	800c2a4 <_scanf_float+0x90>
 800c2cc:	280e      	cmp	r0, #14
 800c2ce:	d8d2      	bhi.n	800c276 <_scanf_float+0x62>
 800c2d0:	f7f3 ff2c 	bl	800012c <__gnu_thumb1_case_shi>
 800c2d4:	ffd1004f 	.word	0xffd1004f
 800c2d8:	009d004f 	.word	0x009d004f
 800c2dc:	0021ffd1 	.word	0x0021ffd1
 800c2e0:	00410041 	.word	0x00410041
 800c2e4:	00410041 	.word	0x00410041
 800c2e8:	00410041 	.word	0x00410041
 800c2ec:	00410041 	.word	0x00410041
 800c2f0:	0041      	.short	0x0041
 800c2f2:	2b6e      	cmp	r3, #110	@ 0x6e
 800c2f4:	d80a      	bhi.n	800c30c <_scanf_float+0xf8>
 800c2f6:	2b60      	cmp	r3, #96	@ 0x60
 800c2f8:	d8d2      	bhi.n	800c2a0 <_scanf_float+0x8c>
 800c2fa:	2b54      	cmp	r3, #84	@ 0x54
 800c2fc:	d100      	bne.n	800c300 <_scanf_float+0xec>
 800c2fe:	e081      	b.n	800c404 <_scanf_float+0x1f0>
 800c300:	2b59      	cmp	r3, #89	@ 0x59
 800c302:	d1b8      	bne.n	800c276 <_scanf_float+0x62>
 800c304:	2d07      	cmp	r5, #7
 800c306:	d1b6      	bne.n	800c276 <_scanf_float+0x62>
 800c308:	2508      	movs	r5, #8
 800c30a:	e02f      	b.n	800c36c <_scanf_float+0x158>
 800c30c:	2b74      	cmp	r3, #116	@ 0x74
 800c30e:	d079      	beq.n	800c404 <_scanf_float+0x1f0>
 800c310:	2b79      	cmp	r3, #121	@ 0x79
 800c312:	d0f7      	beq.n	800c304 <_scanf_float+0xf0>
 800c314:	e7af      	b.n	800c276 <_scanf_float+0x62>
 800c316:	6821      	ldr	r1, [r4, #0]
 800c318:	05c8      	lsls	r0, r1, #23
 800c31a:	d51c      	bpl.n	800c356 <_scanf_float+0x142>
 800c31c:	2380      	movs	r3, #128	@ 0x80
 800c31e:	4399      	bics	r1, r3
 800c320:	9b01      	ldr	r3, [sp, #4]
 800c322:	6021      	str	r1, [r4, #0]
 800c324:	3301      	adds	r3, #1
 800c326:	9301      	str	r3, [sp, #4]
 800c328:	9b06      	ldr	r3, [sp, #24]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d003      	beq.n	800c336 <_scanf_float+0x122>
 800c32e:	3b01      	subs	r3, #1
 800c330:	3201      	adds	r2, #1
 800c332:	9306      	str	r3, [sp, #24]
 800c334:	60a2      	str	r2, [r4, #8]
 800c336:	68a3      	ldr	r3, [r4, #8]
 800c338:	3b01      	subs	r3, #1
 800c33a:	60a3      	str	r3, [r4, #8]
 800c33c:	6923      	ldr	r3, [r4, #16]
 800c33e:	3301      	adds	r3, #1
 800c340:	6123      	str	r3, [r4, #16]
 800c342:	6873      	ldr	r3, [r6, #4]
 800c344:	3b01      	subs	r3, #1
 800c346:	6073      	str	r3, [r6, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	dc00      	bgt.n	800c34e <_scanf_float+0x13a>
 800c34c:	e08a      	b.n	800c464 <_scanf_float+0x250>
 800c34e:	6833      	ldr	r3, [r6, #0]
 800c350:	3301      	adds	r3, #1
 800c352:	6033      	str	r3, [r6, #0]
 800c354:	e781      	b.n	800c25a <_scanf_float+0x46>
 800c356:	9a02      	ldr	r2, [sp, #8]
 800c358:	1951      	adds	r1, r2, r5
 800c35a:	2900      	cmp	r1, #0
 800c35c:	d000      	beq.n	800c360 <_scanf_float+0x14c>
 800c35e:	e78a      	b.n	800c276 <_scanf_float+0x62>
 800c360:	000d      	movs	r5, r1
 800c362:	6822      	ldr	r2, [r4, #0]
 800c364:	486d      	ldr	r0, [pc, #436]	@ (800c51c <_scanf_float+0x308>)
 800c366:	9102      	str	r1, [sp, #8]
 800c368:	4002      	ands	r2, r0
 800c36a:	6022      	str	r2, [r4, #0]
 800c36c:	703b      	strb	r3, [r7, #0]
 800c36e:	3701      	adds	r7, #1
 800c370:	e7e1      	b.n	800c336 <_scanf_float+0x122>
 800c372:	2180      	movs	r1, #128	@ 0x80
 800c374:	6822      	ldr	r2, [r4, #0]
 800c376:	420a      	tst	r2, r1
 800c378:	d100      	bne.n	800c37c <_scanf_float+0x168>
 800c37a:	e77c      	b.n	800c276 <_scanf_float+0x62>
 800c37c:	438a      	bics	r2, r1
 800c37e:	6022      	str	r2, [r4, #0]
 800c380:	e7f4      	b.n	800c36c <_scanf_float+0x158>
 800c382:	9a02      	ldr	r2, [sp, #8]
 800c384:	2a00      	cmp	r2, #0
 800c386:	d10f      	bne.n	800c3a8 <_scanf_float+0x194>
 800c388:	9a01      	ldr	r2, [sp, #4]
 800c38a:	2a00      	cmp	r2, #0
 800c38c:	d10f      	bne.n	800c3ae <_scanf_float+0x19a>
 800c38e:	6822      	ldr	r2, [r4, #0]
 800c390:	21e0      	movs	r1, #224	@ 0xe0
 800c392:	0010      	movs	r0, r2
 800c394:	00c9      	lsls	r1, r1, #3
 800c396:	4008      	ands	r0, r1
 800c398:	4288      	cmp	r0, r1
 800c39a:	d108      	bne.n	800c3ae <_scanf_float+0x19a>
 800c39c:	4960      	ldr	r1, [pc, #384]	@ (800c520 <_scanf_float+0x30c>)
 800c39e:	400a      	ands	r2, r1
 800c3a0:	6022      	str	r2, [r4, #0]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	9202      	str	r2, [sp, #8]
 800c3a6:	e7e1      	b.n	800c36c <_scanf_float+0x158>
 800c3a8:	9a02      	ldr	r2, [sp, #8]
 800c3aa:	2a02      	cmp	r2, #2
 800c3ac:	d058      	beq.n	800c460 <_scanf_float+0x24c>
 800c3ae:	2d01      	cmp	r5, #1
 800c3b0:	d002      	beq.n	800c3b8 <_scanf_float+0x1a4>
 800c3b2:	2d04      	cmp	r5, #4
 800c3b4:	d000      	beq.n	800c3b8 <_scanf_float+0x1a4>
 800c3b6:	e75e      	b.n	800c276 <_scanf_float+0x62>
 800c3b8:	3501      	adds	r5, #1
 800c3ba:	b2ed      	uxtb	r5, r5
 800c3bc:	e7d6      	b.n	800c36c <_scanf_float+0x158>
 800c3be:	9a02      	ldr	r2, [sp, #8]
 800c3c0:	2a01      	cmp	r2, #1
 800c3c2:	d000      	beq.n	800c3c6 <_scanf_float+0x1b2>
 800c3c4:	e757      	b.n	800c276 <_scanf_float+0x62>
 800c3c6:	2202      	movs	r2, #2
 800c3c8:	e7ec      	b.n	800c3a4 <_scanf_float+0x190>
 800c3ca:	2d00      	cmp	r5, #0
 800c3cc:	d110      	bne.n	800c3f0 <_scanf_float+0x1dc>
 800c3ce:	9a01      	ldr	r2, [sp, #4]
 800c3d0:	2a00      	cmp	r2, #0
 800c3d2:	d000      	beq.n	800c3d6 <_scanf_float+0x1c2>
 800c3d4:	e752      	b.n	800c27c <_scanf_float+0x68>
 800c3d6:	6822      	ldr	r2, [r4, #0]
 800c3d8:	21e0      	movs	r1, #224	@ 0xe0
 800c3da:	0010      	movs	r0, r2
 800c3dc:	00c9      	lsls	r1, r1, #3
 800c3de:	4008      	ands	r0, r1
 800c3e0:	4288      	cmp	r0, r1
 800c3e2:	d000      	beq.n	800c3e6 <_scanf_float+0x1d2>
 800c3e4:	e11d      	b.n	800c622 <_scanf_float+0x40e>
 800c3e6:	494e      	ldr	r1, [pc, #312]	@ (800c520 <_scanf_float+0x30c>)
 800c3e8:	3501      	adds	r5, #1
 800c3ea:	400a      	ands	r2, r1
 800c3ec:	6022      	str	r2, [r4, #0]
 800c3ee:	e7bd      	b.n	800c36c <_scanf_float+0x158>
 800c3f0:	21fd      	movs	r1, #253	@ 0xfd
 800c3f2:	1eea      	subs	r2, r5, #3
 800c3f4:	420a      	tst	r2, r1
 800c3f6:	d0df      	beq.n	800c3b8 <_scanf_float+0x1a4>
 800c3f8:	e73d      	b.n	800c276 <_scanf_float+0x62>
 800c3fa:	2d02      	cmp	r5, #2
 800c3fc:	d000      	beq.n	800c400 <_scanf_float+0x1ec>
 800c3fe:	e73a      	b.n	800c276 <_scanf_float+0x62>
 800c400:	2503      	movs	r5, #3
 800c402:	e7b3      	b.n	800c36c <_scanf_float+0x158>
 800c404:	2d06      	cmp	r5, #6
 800c406:	d000      	beq.n	800c40a <_scanf_float+0x1f6>
 800c408:	e735      	b.n	800c276 <_scanf_float+0x62>
 800c40a:	2507      	movs	r5, #7
 800c40c:	e7ae      	b.n	800c36c <_scanf_float+0x158>
 800c40e:	6822      	ldr	r2, [r4, #0]
 800c410:	0591      	lsls	r1, r2, #22
 800c412:	d400      	bmi.n	800c416 <_scanf_float+0x202>
 800c414:	e72f      	b.n	800c276 <_scanf_float+0x62>
 800c416:	4943      	ldr	r1, [pc, #268]	@ (800c524 <_scanf_float+0x310>)
 800c418:	400a      	ands	r2, r1
 800c41a:	6022      	str	r2, [r4, #0]
 800c41c:	9a01      	ldr	r2, [sp, #4]
 800c41e:	9205      	str	r2, [sp, #20]
 800c420:	e7a4      	b.n	800c36c <_scanf_float+0x158>
 800c422:	21a0      	movs	r1, #160	@ 0xa0
 800c424:	2080      	movs	r0, #128	@ 0x80
 800c426:	6822      	ldr	r2, [r4, #0]
 800c428:	00c9      	lsls	r1, r1, #3
 800c42a:	4011      	ands	r1, r2
 800c42c:	00c0      	lsls	r0, r0, #3
 800c42e:	4281      	cmp	r1, r0
 800c430:	d006      	beq.n	800c440 <_scanf_float+0x22c>
 800c432:	4202      	tst	r2, r0
 800c434:	d100      	bne.n	800c438 <_scanf_float+0x224>
 800c436:	e71e      	b.n	800c276 <_scanf_float+0x62>
 800c438:	9901      	ldr	r1, [sp, #4]
 800c43a:	2900      	cmp	r1, #0
 800c43c:	d100      	bne.n	800c440 <_scanf_float+0x22c>
 800c43e:	e0f0      	b.n	800c622 <_scanf_float+0x40e>
 800c440:	0591      	lsls	r1, r2, #22
 800c442:	d404      	bmi.n	800c44e <_scanf_float+0x23a>
 800c444:	9901      	ldr	r1, [sp, #4]
 800c446:	9805      	ldr	r0, [sp, #20]
 800c448:	9709      	str	r7, [sp, #36]	@ 0x24
 800c44a:	1a09      	subs	r1, r1, r0
 800c44c:	9108      	str	r1, [sp, #32]
 800c44e:	4934      	ldr	r1, [pc, #208]	@ (800c520 <_scanf_float+0x30c>)
 800c450:	400a      	ands	r2, r1
 800c452:	21c0      	movs	r1, #192	@ 0xc0
 800c454:	0049      	lsls	r1, r1, #1
 800c456:	430a      	orrs	r2, r1
 800c458:	6022      	str	r2, [r4, #0]
 800c45a:	2200      	movs	r2, #0
 800c45c:	9201      	str	r2, [sp, #4]
 800c45e:	e785      	b.n	800c36c <_scanf_float+0x158>
 800c460:	2203      	movs	r2, #3
 800c462:	e79f      	b.n	800c3a4 <_scanf_float+0x190>
 800c464:	23c0      	movs	r3, #192	@ 0xc0
 800c466:	005b      	lsls	r3, r3, #1
 800c468:	0031      	movs	r1, r6
 800c46a:	58e3      	ldr	r3, [r4, r3]
 800c46c:	9803      	ldr	r0, [sp, #12]
 800c46e:	4798      	blx	r3
 800c470:	2800      	cmp	r0, #0
 800c472:	d100      	bne.n	800c476 <_scanf_float+0x262>
 800c474:	e6f1      	b.n	800c25a <_scanf_float+0x46>
 800c476:	e6fe      	b.n	800c276 <_scanf_float+0x62>
 800c478:	3f01      	subs	r7, #1
 800c47a:	5963      	ldr	r3, [r4, r5]
 800c47c:	0032      	movs	r2, r6
 800c47e:	7839      	ldrb	r1, [r7, #0]
 800c480:	9803      	ldr	r0, [sp, #12]
 800c482:	4798      	blx	r3
 800c484:	6923      	ldr	r3, [r4, #16]
 800c486:	3b01      	subs	r3, #1
 800c488:	6123      	str	r3, [r4, #16]
 800c48a:	e702      	b.n	800c292 <_scanf_float+0x7e>
 800c48c:	1e6b      	subs	r3, r5, #1
 800c48e:	2b06      	cmp	r3, #6
 800c490:	d80e      	bhi.n	800c4b0 <_scanf_float+0x29c>
 800c492:	9702      	str	r7, [sp, #8]
 800c494:	2d02      	cmp	r5, #2
 800c496:	d920      	bls.n	800c4da <_scanf_float+0x2c6>
 800c498:	1beb      	subs	r3, r5, r7
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	9306      	str	r3, [sp, #24]
 800c49e:	9b02      	ldr	r3, [sp, #8]
 800c4a0:	9a06      	ldr	r2, [sp, #24]
 800c4a2:	189b      	adds	r3, r3, r2
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	d127      	bne.n	800c4fa <_scanf_float+0x2e6>
 800c4aa:	3d03      	subs	r5, #3
 800c4ac:	b2ed      	uxtb	r5, r5
 800c4ae:	1b7f      	subs	r7, r7, r5
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	05da      	lsls	r2, r3, #23
 800c4b4:	d553      	bpl.n	800c55e <_scanf_float+0x34a>
 800c4b6:	055b      	lsls	r3, r3, #21
 800c4b8:	d536      	bpl.n	800c528 <_scanf_float+0x314>
 800c4ba:	25be      	movs	r5, #190	@ 0xbe
 800c4bc:	006d      	lsls	r5, r5, #1
 800c4be:	9b04      	ldr	r3, [sp, #16]
 800c4c0:	429f      	cmp	r7, r3
 800c4c2:	d800      	bhi.n	800c4c6 <_scanf_float+0x2b2>
 800c4c4:	e6e9      	b.n	800c29a <_scanf_float+0x86>
 800c4c6:	3f01      	subs	r7, #1
 800c4c8:	5963      	ldr	r3, [r4, r5]
 800c4ca:	0032      	movs	r2, r6
 800c4cc:	7839      	ldrb	r1, [r7, #0]
 800c4ce:	9803      	ldr	r0, [sp, #12]
 800c4d0:	4798      	blx	r3
 800c4d2:	6923      	ldr	r3, [r4, #16]
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	6123      	str	r3, [r4, #16]
 800c4d8:	e7f1      	b.n	800c4be <_scanf_float+0x2aa>
 800c4da:	25be      	movs	r5, #190	@ 0xbe
 800c4dc:	006d      	lsls	r5, r5, #1
 800c4de:	9b04      	ldr	r3, [sp, #16]
 800c4e0:	429f      	cmp	r7, r3
 800c4e2:	d800      	bhi.n	800c4e6 <_scanf_float+0x2d2>
 800c4e4:	e6d9      	b.n	800c29a <_scanf_float+0x86>
 800c4e6:	3f01      	subs	r7, #1
 800c4e8:	5963      	ldr	r3, [r4, r5]
 800c4ea:	0032      	movs	r2, r6
 800c4ec:	7839      	ldrb	r1, [r7, #0]
 800c4ee:	9803      	ldr	r0, [sp, #12]
 800c4f0:	4798      	blx	r3
 800c4f2:	6923      	ldr	r3, [r4, #16]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	6123      	str	r3, [r4, #16]
 800c4f8:	e7f1      	b.n	800c4de <_scanf_float+0x2ca>
 800c4fa:	9b02      	ldr	r3, [sp, #8]
 800c4fc:	0032      	movs	r2, r6
 800c4fe:	3b01      	subs	r3, #1
 800c500:	7819      	ldrb	r1, [r3, #0]
 800c502:	9302      	str	r3, [sp, #8]
 800c504:	23be      	movs	r3, #190	@ 0xbe
 800c506:	005b      	lsls	r3, r3, #1
 800c508:	58e3      	ldr	r3, [r4, r3]
 800c50a:	9803      	ldr	r0, [sp, #12]
 800c50c:	4798      	blx	r3
 800c50e:	6923      	ldr	r3, [r4, #16]
 800c510:	3b01      	subs	r3, #1
 800c512:	6123      	str	r3, [r4, #16]
 800c514:	e7c3      	b.n	800c49e <_scanf_float+0x28a>
 800c516:	46c0      	nop			@ (mov r8, r8)
 800c518:	fffffeff 	.word	0xfffffeff
 800c51c:	fffffe7f 	.word	0xfffffe7f
 800c520:	fffff87f 	.word	0xfffff87f
 800c524:	fffffd7f 	.word	0xfffffd7f
 800c528:	6923      	ldr	r3, [r4, #16]
 800c52a:	1e7d      	subs	r5, r7, #1
 800c52c:	7829      	ldrb	r1, [r5, #0]
 800c52e:	3b01      	subs	r3, #1
 800c530:	6123      	str	r3, [r4, #16]
 800c532:	2965      	cmp	r1, #101	@ 0x65
 800c534:	d00c      	beq.n	800c550 <_scanf_float+0x33c>
 800c536:	2945      	cmp	r1, #69	@ 0x45
 800c538:	d00a      	beq.n	800c550 <_scanf_float+0x33c>
 800c53a:	23be      	movs	r3, #190	@ 0xbe
 800c53c:	005b      	lsls	r3, r3, #1
 800c53e:	58e3      	ldr	r3, [r4, r3]
 800c540:	0032      	movs	r2, r6
 800c542:	9803      	ldr	r0, [sp, #12]
 800c544:	4798      	blx	r3
 800c546:	6923      	ldr	r3, [r4, #16]
 800c548:	1ebd      	subs	r5, r7, #2
 800c54a:	3b01      	subs	r3, #1
 800c54c:	7829      	ldrb	r1, [r5, #0]
 800c54e:	6123      	str	r3, [r4, #16]
 800c550:	23be      	movs	r3, #190	@ 0xbe
 800c552:	005b      	lsls	r3, r3, #1
 800c554:	0032      	movs	r2, r6
 800c556:	58e3      	ldr	r3, [r4, r3]
 800c558:	9803      	ldr	r0, [sp, #12]
 800c55a:	4798      	blx	r3
 800c55c:	002f      	movs	r7, r5
 800c55e:	6821      	ldr	r1, [r4, #0]
 800c560:	2310      	movs	r3, #16
 800c562:	000a      	movs	r2, r1
 800c564:	401a      	ands	r2, r3
 800c566:	4219      	tst	r1, r3
 800c568:	d001      	beq.n	800c56e <_scanf_float+0x35a>
 800c56a:	2000      	movs	r0, #0
 800c56c:	e696      	b.n	800c29c <_scanf_float+0x88>
 800c56e:	21c0      	movs	r1, #192	@ 0xc0
 800c570:	703a      	strb	r2, [r7, #0]
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	00c9      	lsls	r1, r1, #3
 800c576:	400b      	ands	r3, r1
 800c578:	2180      	movs	r1, #128	@ 0x80
 800c57a:	00c9      	lsls	r1, r1, #3
 800c57c:	428b      	cmp	r3, r1
 800c57e:	d11c      	bne.n	800c5ba <_scanf_float+0x3a6>
 800c580:	9b05      	ldr	r3, [sp, #20]
 800c582:	9a01      	ldr	r2, [sp, #4]
 800c584:	9905      	ldr	r1, [sp, #20]
 800c586:	1a9a      	subs	r2, r3, r2
 800c588:	9b01      	ldr	r3, [sp, #4]
 800c58a:	428b      	cmp	r3, r1
 800c58c:	d121      	bne.n	800c5d2 <_scanf_float+0x3be>
 800c58e:	2200      	movs	r2, #0
 800c590:	9904      	ldr	r1, [sp, #16]
 800c592:	9803      	ldr	r0, [sp, #12]
 800c594:	f002 fca2 	bl	800eedc <_strtod_r>
 800c598:	9b07      	ldr	r3, [sp, #28]
 800c59a:	6822      	ldr	r2, [r4, #0]
 800c59c:	0006      	movs	r6, r0
 800c59e:	000f      	movs	r7, r1
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	0791      	lsls	r1, r2, #30
 800c5a4:	d522      	bpl.n	800c5ec <_scanf_float+0x3d8>
 800c5a6:	9907      	ldr	r1, [sp, #28]
 800c5a8:	1d1a      	adds	r2, r3, #4
 800c5aa:	600a      	str	r2, [r1, #0]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	601e      	str	r6, [r3, #0]
 800c5b0:	605f      	str	r7, [r3, #4]
 800c5b2:	68e3      	ldr	r3, [r4, #12]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	60e3      	str	r3, [r4, #12]
 800c5b8:	e7d7      	b.n	800c56a <_scanf_float+0x356>
 800c5ba:	9b08      	ldr	r3, [sp, #32]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d0e6      	beq.n	800c58e <_scanf_float+0x37a>
 800c5c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c2:	9803      	ldr	r0, [sp, #12]
 800c5c4:	1c59      	adds	r1, r3, #1
 800c5c6:	230a      	movs	r3, #10
 800c5c8:	f7ff f9b2 	bl	800b930 <_strtol_r>
 800c5cc:	9b08      	ldr	r3, [sp, #32]
 800c5ce:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800c5d0:	1ac2      	subs	r2, r0, r3
 800c5d2:	0023      	movs	r3, r4
 800c5d4:	3370      	adds	r3, #112	@ 0x70
 800c5d6:	33ff      	adds	r3, #255	@ 0xff
 800c5d8:	429f      	cmp	r7, r3
 800c5da:	d302      	bcc.n	800c5e2 <_scanf_float+0x3ce>
 800c5dc:	0027      	movs	r7, r4
 800c5de:	376f      	adds	r7, #111	@ 0x6f
 800c5e0:	37ff      	adds	r7, #255	@ 0xff
 800c5e2:	0038      	movs	r0, r7
 800c5e4:	4910      	ldr	r1, [pc, #64]	@ (800c628 <_scanf_float+0x414>)
 800c5e6:	f000 f91b 	bl	800c820 <siprintf>
 800c5ea:	e7d0      	b.n	800c58e <_scanf_float+0x37a>
 800c5ec:	1d19      	adds	r1, r3, #4
 800c5ee:	0752      	lsls	r2, r2, #29
 800c5f0:	d502      	bpl.n	800c5f8 <_scanf_float+0x3e4>
 800c5f2:	9a07      	ldr	r2, [sp, #28]
 800c5f4:	6011      	str	r1, [r2, #0]
 800c5f6:	e7d9      	b.n	800c5ac <_scanf_float+0x398>
 800c5f8:	9a07      	ldr	r2, [sp, #28]
 800c5fa:	0030      	movs	r0, r6
 800c5fc:	6011      	str	r1, [r2, #0]
 800c5fe:	681d      	ldr	r5, [r3, #0]
 800c600:	0032      	movs	r2, r6
 800c602:	003b      	movs	r3, r7
 800c604:	0039      	movs	r1, r7
 800c606:	f7f6 f9cf 	bl	80029a8 <__aeabi_dcmpun>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d004      	beq.n	800c618 <_scanf_float+0x404>
 800c60e:	4807      	ldr	r0, [pc, #28]	@ (800c62c <_scanf_float+0x418>)
 800c610:	f000 fa04 	bl	800ca1c <nanf>
 800c614:	6028      	str	r0, [r5, #0]
 800c616:	e7cc      	b.n	800c5b2 <_scanf_float+0x39e>
 800c618:	0030      	movs	r0, r6
 800c61a:	0039      	movs	r1, r7
 800c61c:	f7f6 fabc 	bl	8002b98 <__aeabi_d2f>
 800c620:	e7f8      	b.n	800c614 <_scanf_float+0x400>
 800c622:	2300      	movs	r3, #0
 800c624:	9301      	str	r3, [sp, #4]
 800c626:	e62d      	b.n	800c284 <_scanf_float+0x70>
 800c628:	080108fd 	.word	0x080108fd
 800c62c:	08010b94 	.word	0x08010b94

0800c630 <std>:
 800c630:	2300      	movs	r3, #0
 800c632:	b510      	push	{r4, lr}
 800c634:	0004      	movs	r4, r0
 800c636:	6003      	str	r3, [r0, #0]
 800c638:	6043      	str	r3, [r0, #4]
 800c63a:	6083      	str	r3, [r0, #8]
 800c63c:	8181      	strh	r1, [r0, #12]
 800c63e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c640:	81c2      	strh	r2, [r0, #14]
 800c642:	6103      	str	r3, [r0, #16]
 800c644:	6143      	str	r3, [r0, #20]
 800c646:	6183      	str	r3, [r0, #24]
 800c648:	0019      	movs	r1, r3
 800c64a:	2208      	movs	r2, #8
 800c64c:	305c      	adds	r0, #92	@ 0x5c
 800c64e:	f000 f953 	bl	800c8f8 <memset>
 800c652:	4b0b      	ldr	r3, [pc, #44]	@ (800c680 <std+0x50>)
 800c654:	6224      	str	r4, [r4, #32]
 800c656:	6263      	str	r3, [r4, #36]	@ 0x24
 800c658:	4b0a      	ldr	r3, [pc, #40]	@ (800c684 <std+0x54>)
 800c65a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c65c:	4b0a      	ldr	r3, [pc, #40]	@ (800c688 <std+0x58>)
 800c65e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c660:	4b0a      	ldr	r3, [pc, #40]	@ (800c68c <std+0x5c>)
 800c662:	6323      	str	r3, [r4, #48]	@ 0x30
 800c664:	4b0a      	ldr	r3, [pc, #40]	@ (800c690 <std+0x60>)
 800c666:	429c      	cmp	r4, r3
 800c668:	d005      	beq.n	800c676 <std+0x46>
 800c66a:	4b0a      	ldr	r3, [pc, #40]	@ (800c694 <std+0x64>)
 800c66c:	429c      	cmp	r4, r3
 800c66e:	d002      	beq.n	800c676 <std+0x46>
 800c670:	4b09      	ldr	r3, [pc, #36]	@ (800c698 <std+0x68>)
 800c672:	429c      	cmp	r4, r3
 800c674:	d103      	bne.n	800c67e <std+0x4e>
 800c676:	0020      	movs	r0, r4
 800c678:	3058      	adds	r0, #88	@ 0x58
 800c67a:	f000 f9c1 	bl	800ca00 <__retarget_lock_init_recursive>
 800c67e:	bd10      	pop	{r4, pc}
 800c680:	0800c861 	.word	0x0800c861
 800c684:	0800c889 	.word	0x0800c889
 800c688:	0800c8c1 	.word	0x0800c8c1
 800c68c:	0800c8ed 	.word	0x0800c8ed
 800c690:	200005bc 	.word	0x200005bc
 800c694:	20000624 	.word	0x20000624
 800c698:	2000068c 	.word	0x2000068c

0800c69c <stdio_exit_handler>:
 800c69c:	b510      	push	{r4, lr}
 800c69e:	4a03      	ldr	r2, [pc, #12]	@ (800c6ac <stdio_exit_handler+0x10>)
 800c6a0:	4903      	ldr	r1, [pc, #12]	@ (800c6b0 <stdio_exit_handler+0x14>)
 800c6a2:	4804      	ldr	r0, [pc, #16]	@ (800c6b4 <stdio_exit_handler+0x18>)
 800c6a4:	f000 f86c 	bl	800c780 <_fwalk_sglue>
 800c6a8:	bd10      	pop	{r4, pc}
 800c6aa:	46c0      	nop			@ (mov r8, r8)
 800c6ac:	20000024 	.word	0x20000024
 800c6b0:	0800f2b5 	.word	0x0800f2b5
 800c6b4:	20000034 	.word	0x20000034

0800c6b8 <cleanup_stdio>:
 800c6b8:	6841      	ldr	r1, [r0, #4]
 800c6ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e8 <cleanup_stdio+0x30>)
 800c6bc:	b510      	push	{r4, lr}
 800c6be:	0004      	movs	r4, r0
 800c6c0:	4299      	cmp	r1, r3
 800c6c2:	d001      	beq.n	800c6c8 <cleanup_stdio+0x10>
 800c6c4:	f002 fdf6 	bl	800f2b4 <_fflush_r>
 800c6c8:	68a1      	ldr	r1, [r4, #8]
 800c6ca:	4b08      	ldr	r3, [pc, #32]	@ (800c6ec <cleanup_stdio+0x34>)
 800c6cc:	4299      	cmp	r1, r3
 800c6ce:	d002      	beq.n	800c6d6 <cleanup_stdio+0x1e>
 800c6d0:	0020      	movs	r0, r4
 800c6d2:	f002 fdef 	bl	800f2b4 <_fflush_r>
 800c6d6:	68e1      	ldr	r1, [r4, #12]
 800c6d8:	4b05      	ldr	r3, [pc, #20]	@ (800c6f0 <cleanup_stdio+0x38>)
 800c6da:	4299      	cmp	r1, r3
 800c6dc:	d002      	beq.n	800c6e4 <cleanup_stdio+0x2c>
 800c6de:	0020      	movs	r0, r4
 800c6e0:	f002 fde8 	bl	800f2b4 <_fflush_r>
 800c6e4:	bd10      	pop	{r4, pc}
 800c6e6:	46c0      	nop			@ (mov r8, r8)
 800c6e8:	200005bc 	.word	0x200005bc
 800c6ec:	20000624 	.word	0x20000624
 800c6f0:	2000068c 	.word	0x2000068c

0800c6f4 <global_stdio_init.part.0>:
 800c6f4:	b510      	push	{r4, lr}
 800c6f6:	4b09      	ldr	r3, [pc, #36]	@ (800c71c <global_stdio_init.part.0+0x28>)
 800c6f8:	4a09      	ldr	r2, [pc, #36]	@ (800c720 <global_stdio_init.part.0+0x2c>)
 800c6fa:	2104      	movs	r1, #4
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	4809      	ldr	r0, [pc, #36]	@ (800c724 <global_stdio_init.part.0+0x30>)
 800c700:	2200      	movs	r2, #0
 800c702:	f7ff ff95 	bl	800c630 <std>
 800c706:	2201      	movs	r2, #1
 800c708:	2109      	movs	r1, #9
 800c70a:	4807      	ldr	r0, [pc, #28]	@ (800c728 <global_stdio_init.part.0+0x34>)
 800c70c:	f7ff ff90 	bl	800c630 <std>
 800c710:	2202      	movs	r2, #2
 800c712:	2112      	movs	r1, #18
 800c714:	4805      	ldr	r0, [pc, #20]	@ (800c72c <global_stdio_init.part.0+0x38>)
 800c716:	f7ff ff8b 	bl	800c630 <std>
 800c71a:	bd10      	pop	{r4, pc}
 800c71c:	200006f4 	.word	0x200006f4
 800c720:	0800c69d 	.word	0x0800c69d
 800c724:	200005bc 	.word	0x200005bc
 800c728:	20000624 	.word	0x20000624
 800c72c:	2000068c 	.word	0x2000068c

0800c730 <__sfp_lock_acquire>:
 800c730:	b510      	push	{r4, lr}
 800c732:	4802      	ldr	r0, [pc, #8]	@ (800c73c <__sfp_lock_acquire+0xc>)
 800c734:	f000 f965 	bl	800ca02 <__retarget_lock_acquire_recursive>
 800c738:	bd10      	pop	{r4, pc}
 800c73a:	46c0      	nop			@ (mov r8, r8)
 800c73c:	200006fd 	.word	0x200006fd

0800c740 <__sfp_lock_release>:
 800c740:	b510      	push	{r4, lr}
 800c742:	4802      	ldr	r0, [pc, #8]	@ (800c74c <__sfp_lock_release+0xc>)
 800c744:	f000 f95e 	bl	800ca04 <__retarget_lock_release_recursive>
 800c748:	bd10      	pop	{r4, pc}
 800c74a:	46c0      	nop			@ (mov r8, r8)
 800c74c:	200006fd 	.word	0x200006fd

0800c750 <__sinit>:
 800c750:	b510      	push	{r4, lr}
 800c752:	0004      	movs	r4, r0
 800c754:	f7ff ffec 	bl	800c730 <__sfp_lock_acquire>
 800c758:	6a23      	ldr	r3, [r4, #32]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d002      	beq.n	800c764 <__sinit+0x14>
 800c75e:	f7ff ffef 	bl	800c740 <__sfp_lock_release>
 800c762:	bd10      	pop	{r4, pc}
 800c764:	4b04      	ldr	r3, [pc, #16]	@ (800c778 <__sinit+0x28>)
 800c766:	6223      	str	r3, [r4, #32]
 800c768:	4b04      	ldr	r3, [pc, #16]	@ (800c77c <__sinit+0x2c>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1f6      	bne.n	800c75e <__sinit+0xe>
 800c770:	f7ff ffc0 	bl	800c6f4 <global_stdio_init.part.0>
 800c774:	e7f3      	b.n	800c75e <__sinit+0xe>
 800c776:	46c0      	nop			@ (mov r8, r8)
 800c778:	0800c6b9 	.word	0x0800c6b9
 800c77c:	200006f4 	.word	0x200006f4

0800c780 <_fwalk_sglue>:
 800c780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c782:	0014      	movs	r4, r2
 800c784:	2600      	movs	r6, #0
 800c786:	9000      	str	r0, [sp, #0]
 800c788:	9101      	str	r1, [sp, #4]
 800c78a:	68a5      	ldr	r5, [r4, #8]
 800c78c:	6867      	ldr	r7, [r4, #4]
 800c78e:	3f01      	subs	r7, #1
 800c790:	d504      	bpl.n	800c79c <_fwalk_sglue+0x1c>
 800c792:	6824      	ldr	r4, [r4, #0]
 800c794:	2c00      	cmp	r4, #0
 800c796:	d1f8      	bne.n	800c78a <_fwalk_sglue+0xa>
 800c798:	0030      	movs	r0, r6
 800c79a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c79c:	89ab      	ldrh	r3, [r5, #12]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d908      	bls.n	800c7b4 <_fwalk_sglue+0x34>
 800c7a2:	220e      	movs	r2, #14
 800c7a4:	5eab      	ldrsh	r3, [r5, r2]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	d004      	beq.n	800c7b4 <_fwalk_sglue+0x34>
 800c7aa:	0029      	movs	r1, r5
 800c7ac:	9800      	ldr	r0, [sp, #0]
 800c7ae:	9b01      	ldr	r3, [sp, #4]
 800c7b0:	4798      	blx	r3
 800c7b2:	4306      	orrs	r6, r0
 800c7b4:	3568      	adds	r5, #104	@ 0x68
 800c7b6:	e7ea      	b.n	800c78e <_fwalk_sglue+0xe>

0800c7b8 <sniprintf>:
 800c7b8:	b40c      	push	{r2, r3}
 800c7ba:	b530      	push	{r4, r5, lr}
 800c7bc:	4b17      	ldr	r3, [pc, #92]	@ (800c81c <sniprintf+0x64>)
 800c7be:	000c      	movs	r4, r1
 800c7c0:	681d      	ldr	r5, [r3, #0]
 800c7c2:	b09d      	sub	sp, #116	@ 0x74
 800c7c4:	2900      	cmp	r1, #0
 800c7c6:	da08      	bge.n	800c7da <sniprintf+0x22>
 800c7c8:	238b      	movs	r3, #139	@ 0x8b
 800c7ca:	2001      	movs	r0, #1
 800c7cc:	602b      	str	r3, [r5, #0]
 800c7ce:	4240      	negs	r0, r0
 800c7d0:	b01d      	add	sp, #116	@ 0x74
 800c7d2:	bc30      	pop	{r4, r5}
 800c7d4:	bc08      	pop	{r3}
 800c7d6:	b002      	add	sp, #8
 800c7d8:	4718      	bx	r3
 800c7da:	2382      	movs	r3, #130	@ 0x82
 800c7dc:	466a      	mov	r2, sp
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	8293      	strh	r3, [r2, #20]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9002      	str	r0, [sp, #8]
 800c7e6:	9006      	str	r0, [sp, #24]
 800c7e8:	4299      	cmp	r1, r3
 800c7ea:	d000      	beq.n	800c7ee <sniprintf+0x36>
 800c7ec:	1e4b      	subs	r3, r1, #1
 800c7ee:	9304      	str	r3, [sp, #16]
 800c7f0:	9307      	str	r3, [sp, #28]
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	466a      	mov	r2, sp
 800c7f6:	425b      	negs	r3, r3
 800c7f8:	82d3      	strh	r3, [r2, #22]
 800c7fa:	0028      	movs	r0, r5
 800c7fc:	ab21      	add	r3, sp, #132	@ 0x84
 800c7fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c800:	a902      	add	r1, sp, #8
 800c802:	9301      	str	r3, [sp, #4]
 800c804:	f002 fbd2 	bl	800efac <_svfiprintf_r>
 800c808:	1c43      	adds	r3, r0, #1
 800c80a:	da01      	bge.n	800c810 <sniprintf+0x58>
 800c80c:	238b      	movs	r3, #139	@ 0x8b
 800c80e:	602b      	str	r3, [r5, #0]
 800c810:	2c00      	cmp	r4, #0
 800c812:	d0dd      	beq.n	800c7d0 <sniprintf+0x18>
 800c814:	2200      	movs	r2, #0
 800c816:	9b02      	ldr	r3, [sp, #8]
 800c818:	701a      	strb	r2, [r3, #0]
 800c81a:	e7d9      	b.n	800c7d0 <sniprintf+0x18>
 800c81c:	20000030 	.word	0x20000030

0800c820 <siprintf>:
 800c820:	b40e      	push	{r1, r2, r3}
 800c822:	b500      	push	{lr}
 800c824:	490b      	ldr	r1, [pc, #44]	@ (800c854 <siprintf+0x34>)
 800c826:	b09c      	sub	sp, #112	@ 0x70
 800c828:	ab1d      	add	r3, sp, #116	@ 0x74
 800c82a:	9002      	str	r0, [sp, #8]
 800c82c:	9006      	str	r0, [sp, #24]
 800c82e:	9107      	str	r1, [sp, #28]
 800c830:	9104      	str	r1, [sp, #16]
 800c832:	4809      	ldr	r0, [pc, #36]	@ (800c858 <siprintf+0x38>)
 800c834:	4909      	ldr	r1, [pc, #36]	@ (800c85c <siprintf+0x3c>)
 800c836:	cb04      	ldmia	r3!, {r2}
 800c838:	9105      	str	r1, [sp, #20]
 800c83a:	6800      	ldr	r0, [r0, #0]
 800c83c:	a902      	add	r1, sp, #8
 800c83e:	9301      	str	r3, [sp, #4]
 800c840:	f002 fbb4 	bl	800efac <_svfiprintf_r>
 800c844:	2200      	movs	r2, #0
 800c846:	9b02      	ldr	r3, [sp, #8]
 800c848:	701a      	strb	r2, [r3, #0]
 800c84a:	b01c      	add	sp, #112	@ 0x70
 800c84c:	bc08      	pop	{r3}
 800c84e:	b003      	add	sp, #12
 800c850:	4718      	bx	r3
 800c852:	46c0      	nop			@ (mov r8, r8)
 800c854:	7fffffff 	.word	0x7fffffff
 800c858:	20000030 	.word	0x20000030
 800c85c:	ffff0208 	.word	0xffff0208

0800c860 <__sread>:
 800c860:	b570      	push	{r4, r5, r6, lr}
 800c862:	000c      	movs	r4, r1
 800c864:	250e      	movs	r5, #14
 800c866:	5f49      	ldrsh	r1, [r1, r5]
 800c868:	f000 f878 	bl	800c95c <_read_r>
 800c86c:	2800      	cmp	r0, #0
 800c86e:	db03      	blt.n	800c878 <__sread+0x18>
 800c870:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c872:	181b      	adds	r3, r3, r0
 800c874:	6563      	str	r3, [r4, #84]	@ 0x54
 800c876:	bd70      	pop	{r4, r5, r6, pc}
 800c878:	89a3      	ldrh	r3, [r4, #12]
 800c87a:	4a02      	ldr	r2, [pc, #8]	@ (800c884 <__sread+0x24>)
 800c87c:	4013      	ands	r3, r2
 800c87e:	81a3      	strh	r3, [r4, #12]
 800c880:	e7f9      	b.n	800c876 <__sread+0x16>
 800c882:	46c0      	nop			@ (mov r8, r8)
 800c884:	ffffefff 	.word	0xffffefff

0800c888 <__swrite>:
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88a:	001f      	movs	r7, r3
 800c88c:	898b      	ldrh	r3, [r1, #12]
 800c88e:	0005      	movs	r5, r0
 800c890:	000c      	movs	r4, r1
 800c892:	0016      	movs	r6, r2
 800c894:	05db      	lsls	r3, r3, #23
 800c896:	d505      	bpl.n	800c8a4 <__swrite+0x1c>
 800c898:	230e      	movs	r3, #14
 800c89a:	5ec9      	ldrsh	r1, [r1, r3]
 800c89c:	2200      	movs	r2, #0
 800c89e:	2302      	movs	r3, #2
 800c8a0:	f000 f848 	bl	800c934 <_lseek_r>
 800c8a4:	89a3      	ldrh	r3, [r4, #12]
 800c8a6:	4a05      	ldr	r2, [pc, #20]	@ (800c8bc <__swrite+0x34>)
 800c8a8:	0028      	movs	r0, r5
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	81a3      	strh	r3, [r4, #12]
 800c8ae:	0032      	movs	r2, r6
 800c8b0:	230e      	movs	r3, #14
 800c8b2:	5ee1      	ldrsh	r1, [r4, r3]
 800c8b4:	003b      	movs	r3, r7
 800c8b6:	f000 f865 	bl	800c984 <_write_r>
 800c8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8bc:	ffffefff 	.word	0xffffefff

0800c8c0 <__sseek>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	000c      	movs	r4, r1
 800c8c4:	250e      	movs	r5, #14
 800c8c6:	5f49      	ldrsh	r1, [r1, r5]
 800c8c8:	f000 f834 	bl	800c934 <_lseek_r>
 800c8cc:	89a3      	ldrh	r3, [r4, #12]
 800c8ce:	1c42      	adds	r2, r0, #1
 800c8d0:	d103      	bne.n	800c8da <__sseek+0x1a>
 800c8d2:	4a05      	ldr	r2, [pc, #20]	@ (800c8e8 <__sseek+0x28>)
 800c8d4:	4013      	ands	r3, r2
 800c8d6:	81a3      	strh	r3, [r4, #12]
 800c8d8:	bd70      	pop	{r4, r5, r6, pc}
 800c8da:	2280      	movs	r2, #128	@ 0x80
 800c8dc:	0152      	lsls	r2, r2, #5
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	81a3      	strh	r3, [r4, #12]
 800c8e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8e4:	e7f8      	b.n	800c8d8 <__sseek+0x18>
 800c8e6:	46c0      	nop			@ (mov r8, r8)
 800c8e8:	ffffefff 	.word	0xffffefff

0800c8ec <__sclose>:
 800c8ec:	b510      	push	{r4, lr}
 800c8ee:	230e      	movs	r3, #14
 800c8f0:	5ec9      	ldrsh	r1, [r1, r3]
 800c8f2:	f000 f80d 	bl	800c910 <_close_r>
 800c8f6:	bd10      	pop	{r4, pc}

0800c8f8 <memset>:
 800c8f8:	0003      	movs	r3, r0
 800c8fa:	1882      	adds	r2, r0, r2
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d100      	bne.n	800c902 <memset+0xa>
 800c900:	4770      	bx	lr
 800c902:	7019      	strb	r1, [r3, #0]
 800c904:	3301      	adds	r3, #1
 800c906:	e7f9      	b.n	800c8fc <memset+0x4>

0800c908 <_localeconv_r>:
 800c908:	4800      	ldr	r0, [pc, #0]	@ (800c90c <_localeconv_r+0x4>)
 800c90a:	4770      	bx	lr
 800c90c:	20000170 	.word	0x20000170

0800c910 <_close_r>:
 800c910:	2300      	movs	r3, #0
 800c912:	b570      	push	{r4, r5, r6, lr}
 800c914:	4d06      	ldr	r5, [pc, #24]	@ (800c930 <_close_r+0x20>)
 800c916:	0004      	movs	r4, r0
 800c918:	0008      	movs	r0, r1
 800c91a:	602b      	str	r3, [r5, #0]
 800c91c:	f7f8 f9dd 	bl	8004cda <_close>
 800c920:	1c43      	adds	r3, r0, #1
 800c922:	d103      	bne.n	800c92c <_close_r+0x1c>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d000      	beq.n	800c92c <_close_r+0x1c>
 800c92a:	6023      	str	r3, [r4, #0]
 800c92c:	bd70      	pop	{r4, r5, r6, pc}
 800c92e:	46c0      	nop			@ (mov r8, r8)
 800c930:	200006f8 	.word	0x200006f8

0800c934 <_lseek_r>:
 800c934:	b570      	push	{r4, r5, r6, lr}
 800c936:	0004      	movs	r4, r0
 800c938:	0008      	movs	r0, r1
 800c93a:	0011      	movs	r1, r2
 800c93c:	001a      	movs	r2, r3
 800c93e:	2300      	movs	r3, #0
 800c940:	4d05      	ldr	r5, [pc, #20]	@ (800c958 <_lseek_r+0x24>)
 800c942:	602b      	str	r3, [r5, #0]
 800c944:	f7f8 f9ea 	bl	8004d1c <_lseek>
 800c948:	1c43      	adds	r3, r0, #1
 800c94a:	d103      	bne.n	800c954 <_lseek_r+0x20>
 800c94c:	682b      	ldr	r3, [r5, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d000      	beq.n	800c954 <_lseek_r+0x20>
 800c952:	6023      	str	r3, [r4, #0]
 800c954:	bd70      	pop	{r4, r5, r6, pc}
 800c956:	46c0      	nop			@ (mov r8, r8)
 800c958:	200006f8 	.word	0x200006f8

0800c95c <_read_r>:
 800c95c:	b570      	push	{r4, r5, r6, lr}
 800c95e:	0004      	movs	r4, r0
 800c960:	0008      	movs	r0, r1
 800c962:	0011      	movs	r1, r2
 800c964:	001a      	movs	r2, r3
 800c966:	2300      	movs	r3, #0
 800c968:	4d05      	ldr	r5, [pc, #20]	@ (800c980 <_read_r+0x24>)
 800c96a:	602b      	str	r3, [r5, #0]
 800c96c:	f7f8 f97c 	bl	8004c68 <_read>
 800c970:	1c43      	adds	r3, r0, #1
 800c972:	d103      	bne.n	800c97c <_read_r+0x20>
 800c974:	682b      	ldr	r3, [r5, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d000      	beq.n	800c97c <_read_r+0x20>
 800c97a:	6023      	str	r3, [r4, #0]
 800c97c:	bd70      	pop	{r4, r5, r6, pc}
 800c97e:	46c0      	nop			@ (mov r8, r8)
 800c980:	200006f8 	.word	0x200006f8

0800c984 <_write_r>:
 800c984:	b570      	push	{r4, r5, r6, lr}
 800c986:	0004      	movs	r4, r0
 800c988:	0008      	movs	r0, r1
 800c98a:	0011      	movs	r1, r2
 800c98c:	001a      	movs	r2, r3
 800c98e:	2300      	movs	r3, #0
 800c990:	4d05      	ldr	r5, [pc, #20]	@ (800c9a8 <_write_r+0x24>)
 800c992:	602b      	str	r3, [r5, #0]
 800c994:	f7f8 f985 	bl	8004ca2 <_write>
 800c998:	1c43      	adds	r3, r0, #1
 800c99a:	d103      	bne.n	800c9a4 <_write_r+0x20>
 800c99c:	682b      	ldr	r3, [r5, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d000      	beq.n	800c9a4 <_write_r+0x20>
 800c9a2:	6023      	str	r3, [r4, #0]
 800c9a4:	bd70      	pop	{r4, r5, r6, pc}
 800c9a6:	46c0      	nop			@ (mov r8, r8)
 800c9a8:	200006f8 	.word	0x200006f8

0800c9ac <__errno>:
 800c9ac:	4b01      	ldr	r3, [pc, #4]	@ (800c9b4 <__errno+0x8>)
 800c9ae:	6818      	ldr	r0, [r3, #0]
 800c9b0:	4770      	bx	lr
 800c9b2:	46c0      	nop			@ (mov r8, r8)
 800c9b4:	20000030 	.word	0x20000030

0800c9b8 <__libc_init_array>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	2600      	movs	r6, #0
 800c9bc:	4c0c      	ldr	r4, [pc, #48]	@ (800c9f0 <__libc_init_array+0x38>)
 800c9be:	4d0d      	ldr	r5, [pc, #52]	@ (800c9f4 <__libc_init_array+0x3c>)
 800c9c0:	1b64      	subs	r4, r4, r5
 800c9c2:	10a4      	asrs	r4, r4, #2
 800c9c4:	42a6      	cmp	r6, r4
 800c9c6:	d109      	bne.n	800c9dc <__libc_init_array+0x24>
 800c9c8:	2600      	movs	r6, #0
 800c9ca:	f003 fbb5 	bl	8010138 <_init>
 800c9ce:	4c0a      	ldr	r4, [pc, #40]	@ (800c9f8 <__libc_init_array+0x40>)
 800c9d0:	4d0a      	ldr	r5, [pc, #40]	@ (800c9fc <__libc_init_array+0x44>)
 800c9d2:	1b64      	subs	r4, r4, r5
 800c9d4:	10a4      	asrs	r4, r4, #2
 800c9d6:	42a6      	cmp	r6, r4
 800c9d8:	d105      	bne.n	800c9e6 <__libc_init_array+0x2e>
 800c9da:	bd70      	pop	{r4, r5, r6, pc}
 800c9dc:	00b3      	lsls	r3, r6, #2
 800c9de:	58eb      	ldr	r3, [r5, r3]
 800c9e0:	4798      	blx	r3
 800c9e2:	3601      	adds	r6, #1
 800c9e4:	e7ee      	b.n	800c9c4 <__libc_init_array+0xc>
 800c9e6:	00b3      	lsls	r3, r6, #2
 800c9e8:	58eb      	ldr	r3, [r5, r3]
 800c9ea:	4798      	blx	r3
 800c9ec:	3601      	adds	r6, #1
 800c9ee:	e7f2      	b.n	800c9d6 <__libc_init_array+0x1e>
 800c9f0:	08010c00 	.word	0x08010c00
 800c9f4:	08010c00 	.word	0x08010c00
 800c9f8:	08010c04 	.word	0x08010c04
 800c9fc:	08010c00 	.word	0x08010c00

0800ca00 <__retarget_lock_init_recursive>:
 800ca00:	4770      	bx	lr

0800ca02 <__retarget_lock_acquire_recursive>:
 800ca02:	4770      	bx	lr

0800ca04 <__retarget_lock_release_recursive>:
 800ca04:	4770      	bx	lr

0800ca06 <memchr>:
 800ca06:	b2c9      	uxtb	r1, r1
 800ca08:	1882      	adds	r2, r0, r2
 800ca0a:	4290      	cmp	r0, r2
 800ca0c:	d101      	bne.n	800ca12 <memchr+0xc>
 800ca0e:	2000      	movs	r0, #0
 800ca10:	4770      	bx	lr
 800ca12:	7803      	ldrb	r3, [r0, #0]
 800ca14:	428b      	cmp	r3, r1
 800ca16:	d0fb      	beq.n	800ca10 <memchr+0xa>
 800ca18:	3001      	adds	r0, #1
 800ca1a:	e7f6      	b.n	800ca0a <memchr+0x4>

0800ca1c <nanf>:
 800ca1c:	4800      	ldr	r0, [pc, #0]	@ (800ca20 <nanf+0x4>)
 800ca1e:	4770      	bx	lr
 800ca20:	7fc00000 	.word	0x7fc00000

0800ca24 <quorem>:
 800ca24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca26:	6902      	ldr	r2, [r0, #16]
 800ca28:	690f      	ldr	r7, [r1, #16]
 800ca2a:	b087      	sub	sp, #28
 800ca2c:	0006      	movs	r6, r0
 800ca2e:	000b      	movs	r3, r1
 800ca30:	2000      	movs	r0, #0
 800ca32:	9102      	str	r1, [sp, #8]
 800ca34:	42ba      	cmp	r2, r7
 800ca36:	db6d      	blt.n	800cb14 <quorem+0xf0>
 800ca38:	3f01      	subs	r7, #1
 800ca3a:	00bc      	lsls	r4, r7, #2
 800ca3c:	3314      	adds	r3, #20
 800ca3e:	9305      	str	r3, [sp, #20]
 800ca40:	191b      	adds	r3, r3, r4
 800ca42:	9303      	str	r3, [sp, #12]
 800ca44:	0033      	movs	r3, r6
 800ca46:	3314      	adds	r3, #20
 800ca48:	191c      	adds	r4, r3, r4
 800ca4a:	9301      	str	r3, [sp, #4]
 800ca4c:	6823      	ldr	r3, [r4, #0]
 800ca4e:	9304      	str	r3, [sp, #16]
 800ca50:	9b03      	ldr	r3, [sp, #12]
 800ca52:	9804      	ldr	r0, [sp, #16]
 800ca54:	681d      	ldr	r5, [r3, #0]
 800ca56:	3501      	adds	r5, #1
 800ca58:	0029      	movs	r1, r5
 800ca5a:	f7f3 fb71 	bl	8000140 <__udivsi3>
 800ca5e:	9b04      	ldr	r3, [sp, #16]
 800ca60:	9000      	str	r0, [sp, #0]
 800ca62:	42ab      	cmp	r3, r5
 800ca64:	d32b      	bcc.n	800cabe <quorem+0x9a>
 800ca66:	9b05      	ldr	r3, [sp, #20]
 800ca68:	9d01      	ldr	r5, [sp, #4]
 800ca6a:	469c      	mov	ip, r3
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	9305      	str	r3, [sp, #20]
 800ca70:	9304      	str	r3, [sp, #16]
 800ca72:	4662      	mov	r2, ip
 800ca74:	ca08      	ldmia	r2!, {r3}
 800ca76:	6828      	ldr	r0, [r5, #0]
 800ca78:	4694      	mov	ip, r2
 800ca7a:	9a00      	ldr	r2, [sp, #0]
 800ca7c:	b299      	uxth	r1, r3
 800ca7e:	4351      	muls	r1, r2
 800ca80:	9a05      	ldr	r2, [sp, #20]
 800ca82:	0c1b      	lsrs	r3, r3, #16
 800ca84:	1889      	adds	r1, r1, r2
 800ca86:	9a00      	ldr	r2, [sp, #0]
 800ca88:	4353      	muls	r3, r2
 800ca8a:	0c0a      	lsrs	r2, r1, #16
 800ca8c:	189b      	adds	r3, r3, r2
 800ca8e:	0c1a      	lsrs	r2, r3, #16
 800ca90:	b289      	uxth	r1, r1
 800ca92:	9205      	str	r2, [sp, #20]
 800ca94:	b282      	uxth	r2, r0
 800ca96:	1a52      	subs	r2, r2, r1
 800ca98:	9904      	ldr	r1, [sp, #16]
 800ca9a:	0c00      	lsrs	r0, r0, #16
 800ca9c:	1852      	adds	r2, r2, r1
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	1411      	asrs	r1, r2, #16
 800caa2:	1ac3      	subs	r3, r0, r3
 800caa4:	185b      	adds	r3, r3, r1
 800caa6:	1419      	asrs	r1, r3, #16
 800caa8:	b292      	uxth	r2, r2
 800caaa:	041b      	lsls	r3, r3, #16
 800caac:	431a      	orrs	r2, r3
 800caae:	9b03      	ldr	r3, [sp, #12]
 800cab0:	9104      	str	r1, [sp, #16]
 800cab2:	c504      	stmia	r5!, {r2}
 800cab4:	4563      	cmp	r3, ip
 800cab6:	d2dc      	bcs.n	800ca72 <quorem+0x4e>
 800cab8:	6823      	ldr	r3, [r4, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d030      	beq.n	800cb20 <quorem+0xfc>
 800cabe:	0030      	movs	r0, r6
 800cac0:	9902      	ldr	r1, [sp, #8]
 800cac2:	f001 fa11 	bl	800dee8 <__mcmp>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	db23      	blt.n	800cb12 <quorem+0xee>
 800caca:	0034      	movs	r4, r6
 800cacc:	2500      	movs	r5, #0
 800cace:	9902      	ldr	r1, [sp, #8]
 800cad0:	3414      	adds	r4, #20
 800cad2:	3114      	adds	r1, #20
 800cad4:	6823      	ldr	r3, [r4, #0]
 800cad6:	c901      	ldmia	r1!, {r0}
 800cad8:	9302      	str	r3, [sp, #8]
 800cada:	466b      	mov	r3, sp
 800cadc:	891b      	ldrh	r3, [r3, #8]
 800cade:	b282      	uxth	r2, r0
 800cae0:	1a9a      	subs	r2, r3, r2
 800cae2:	9b02      	ldr	r3, [sp, #8]
 800cae4:	1952      	adds	r2, r2, r5
 800cae6:	0c00      	lsrs	r0, r0, #16
 800cae8:	0c1b      	lsrs	r3, r3, #16
 800caea:	1a1b      	subs	r3, r3, r0
 800caec:	1410      	asrs	r0, r2, #16
 800caee:	181b      	adds	r3, r3, r0
 800caf0:	141d      	asrs	r5, r3, #16
 800caf2:	b292      	uxth	r2, r2
 800caf4:	041b      	lsls	r3, r3, #16
 800caf6:	431a      	orrs	r2, r3
 800caf8:	9b03      	ldr	r3, [sp, #12]
 800cafa:	c404      	stmia	r4!, {r2}
 800cafc:	428b      	cmp	r3, r1
 800cafe:	d2e9      	bcs.n	800cad4 <quorem+0xb0>
 800cb00:	9a01      	ldr	r2, [sp, #4]
 800cb02:	00bb      	lsls	r3, r7, #2
 800cb04:	18d3      	adds	r3, r2, r3
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	2a00      	cmp	r2, #0
 800cb0a:	d013      	beq.n	800cb34 <quorem+0x110>
 800cb0c:	9b00      	ldr	r3, [sp, #0]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	9800      	ldr	r0, [sp, #0]
 800cb14:	b007      	add	sp, #28
 800cb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d104      	bne.n	800cb28 <quorem+0x104>
 800cb1e:	3f01      	subs	r7, #1
 800cb20:	9b01      	ldr	r3, [sp, #4]
 800cb22:	3c04      	subs	r4, #4
 800cb24:	42a3      	cmp	r3, r4
 800cb26:	d3f7      	bcc.n	800cb18 <quorem+0xf4>
 800cb28:	6137      	str	r7, [r6, #16]
 800cb2a:	e7c8      	b.n	800cabe <quorem+0x9a>
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	2a00      	cmp	r2, #0
 800cb30:	d104      	bne.n	800cb3c <quorem+0x118>
 800cb32:	3f01      	subs	r7, #1
 800cb34:	9a01      	ldr	r2, [sp, #4]
 800cb36:	3b04      	subs	r3, #4
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d3f7      	bcc.n	800cb2c <quorem+0x108>
 800cb3c:	6137      	str	r7, [r6, #16]
 800cb3e:	e7e5      	b.n	800cb0c <quorem+0xe8>

0800cb40 <_dtoa_r>:
 800cb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb42:	0014      	movs	r4, r2
 800cb44:	001d      	movs	r5, r3
 800cb46:	69c6      	ldr	r6, [r0, #28]
 800cb48:	b09d      	sub	sp, #116	@ 0x74
 800cb4a:	940a      	str	r4, [sp, #40]	@ 0x28
 800cb4c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800cb4e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800cb50:	9003      	str	r0, [sp, #12]
 800cb52:	2e00      	cmp	r6, #0
 800cb54:	d10f      	bne.n	800cb76 <_dtoa_r+0x36>
 800cb56:	2010      	movs	r0, #16
 800cb58:	f000 fe30 	bl	800d7bc <malloc>
 800cb5c:	9b03      	ldr	r3, [sp, #12]
 800cb5e:	1e02      	subs	r2, r0, #0
 800cb60:	61d8      	str	r0, [r3, #28]
 800cb62:	d104      	bne.n	800cb6e <_dtoa_r+0x2e>
 800cb64:	21ef      	movs	r1, #239	@ 0xef
 800cb66:	4bc7      	ldr	r3, [pc, #796]	@ (800ce84 <_dtoa_r+0x344>)
 800cb68:	48c7      	ldr	r0, [pc, #796]	@ (800ce88 <_dtoa_r+0x348>)
 800cb6a:	f002 fc15 	bl	800f398 <__assert_func>
 800cb6e:	6046      	str	r6, [r0, #4]
 800cb70:	6086      	str	r6, [r0, #8]
 800cb72:	6006      	str	r6, [r0, #0]
 800cb74:	60c6      	str	r6, [r0, #12]
 800cb76:	9b03      	ldr	r3, [sp, #12]
 800cb78:	69db      	ldr	r3, [r3, #28]
 800cb7a:	6819      	ldr	r1, [r3, #0]
 800cb7c:	2900      	cmp	r1, #0
 800cb7e:	d00b      	beq.n	800cb98 <_dtoa_r+0x58>
 800cb80:	685a      	ldr	r2, [r3, #4]
 800cb82:	2301      	movs	r3, #1
 800cb84:	4093      	lsls	r3, r2
 800cb86:	604a      	str	r2, [r1, #4]
 800cb88:	608b      	str	r3, [r1, #8]
 800cb8a:	9803      	ldr	r0, [sp, #12]
 800cb8c:	f000 ff16 	bl	800d9bc <_Bfree>
 800cb90:	2200      	movs	r2, #0
 800cb92:	9b03      	ldr	r3, [sp, #12]
 800cb94:	69db      	ldr	r3, [r3, #28]
 800cb96:	601a      	str	r2, [r3, #0]
 800cb98:	2d00      	cmp	r5, #0
 800cb9a:	da1e      	bge.n	800cbda <_dtoa_r+0x9a>
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	603b      	str	r3, [r7, #0]
 800cba0:	006b      	lsls	r3, r5, #1
 800cba2:	085b      	lsrs	r3, r3, #1
 800cba4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cba6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800cba8:	4bb8      	ldr	r3, [pc, #736]	@ (800ce8c <_dtoa_r+0x34c>)
 800cbaa:	4ab8      	ldr	r2, [pc, #736]	@ (800ce8c <_dtoa_r+0x34c>)
 800cbac:	403b      	ands	r3, r7
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d116      	bne.n	800cbe0 <_dtoa_r+0xa0>
 800cbb2:	4bb7      	ldr	r3, [pc, #732]	@ (800ce90 <_dtoa_r+0x350>)
 800cbb4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cbb6:	6013      	str	r3, [r2, #0]
 800cbb8:	033b      	lsls	r3, r7, #12
 800cbba:	0b1b      	lsrs	r3, r3, #12
 800cbbc:	4323      	orrs	r3, r4
 800cbbe:	d101      	bne.n	800cbc4 <_dtoa_r+0x84>
 800cbc0:	f000 fd83 	bl	800d6ca <_dtoa_r+0xb8a>
 800cbc4:	4bb3      	ldr	r3, [pc, #716]	@ (800ce94 <_dtoa_r+0x354>)
 800cbc6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800cbc8:	9308      	str	r3, [sp, #32]
 800cbca:	2a00      	cmp	r2, #0
 800cbcc:	d002      	beq.n	800cbd4 <_dtoa_r+0x94>
 800cbce:	4bb2      	ldr	r3, [pc, #712]	@ (800ce98 <_dtoa_r+0x358>)
 800cbd0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800cbd2:	6013      	str	r3, [r2, #0]
 800cbd4:	9808      	ldr	r0, [sp, #32]
 800cbd6:	b01d      	add	sp, #116	@ 0x74
 800cbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbda:	2300      	movs	r3, #0
 800cbdc:	603b      	str	r3, [r7, #0]
 800cbde:	e7e2      	b.n	800cba6 <_dtoa_r+0x66>
 800cbe0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cbe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbe4:	9212      	str	r2, [sp, #72]	@ 0x48
 800cbe6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cbe8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cbea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cbec:	2200      	movs	r2, #0
 800cbee:	2300      	movs	r3, #0
 800cbf0:	f7f3 fc2c 	bl	800044c <__aeabi_dcmpeq>
 800cbf4:	1e06      	subs	r6, r0, #0
 800cbf6:	d00b      	beq.n	800cc10 <_dtoa_r+0xd0>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cbfc:	6013      	str	r3, [r2, #0]
 800cbfe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d002      	beq.n	800cc0a <_dtoa_r+0xca>
 800cc04:	4ba5      	ldr	r3, [pc, #660]	@ (800ce9c <_dtoa_r+0x35c>)
 800cc06:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	4ba5      	ldr	r3, [pc, #660]	@ (800cea0 <_dtoa_r+0x360>)
 800cc0c:	9308      	str	r3, [sp, #32]
 800cc0e:	e7e1      	b.n	800cbd4 <_dtoa_r+0x94>
 800cc10:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc12:	9301      	str	r3, [sp, #4]
 800cc14:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	9803      	ldr	r0, [sp, #12]
 800cc1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cc1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc1e:	f001 fa85 	bl	800e12c <__d2b>
 800cc22:	007a      	lsls	r2, r7, #1
 800cc24:	9005      	str	r0, [sp, #20]
 800cc26:	0d52      	lsrs	r2, r2, #21
 800cc28:	d100      	bne.n	800cc2c <_dtoa_r+0xec>
 800cc2a:	e07b      	b.n	800cd24 <_dtoa_r+0x1e4>
 800cc2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc2e:	9618      	str	r6, [sp, #96]	@ 0x60
 800cc30:	0319      	lsls	r1, r3, #12
 800cc32:	4b9c      	ldr	r3, [pc, #624]	@ (800cea4 <_dtoa_r+0x364>)
 800cc34:	0b09      	lsrs	r1, r1, #12
 800cc36:	430b      	orrs	r3, r1
 800cc38:	499b      	ldr	r1, [pc, #620]	@ (800cea8 <_dtoa_r+0x368>)
 800cc3a:	1857      	adds	r7, r2, r1
 800cc3c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cc3e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cc40:	0019      	movs	r1, r3
 800cc42:	2200      	movs	r2, #0
 800cc44:	4b99      	ldr	r3, [pc, #612]	@ (800ceac <_dtoa_r+0x36c>)
 800cc46:	f7f5 fb13 	bl	8002270 <__aeabi_dsub>
 800cc4a:	4a99      	ldr	r2, [pc, #612]	@ (800ceb0 <_dtoa_r+0x370>)
 800cc4c:	4b99      	ldr	r3, [pc, #612]	@ (800ceb4 <_dtoa_r+0x374>)
 800cc4e:	f7f5 f847 	bl	8001ce0 <__aeabi_dmul>
 800cc52:	4a99      	ldr	r2, [pc, #612]	@ (800ceb8 <_dtoa_r+0x378>)
 800cc54:	4b99      	ldr	r3, [pc, #612]	@ (800cebc <_dtoa_r+0x37c>)
 800cc56:	f7f4 f89b 	bl	8000d90 <__aeabi_dadd>
 800cc5a:	0004      	movs	r4, r0
 800cc5c:	0038      	movs	r0, r7
 800cc5e:	000d      	movs	r5, r1
 800cc60:	f7f5 ff00 	bl	8002a64 <__aeabi_i2d>
 800cc64:	4a96      	ldr	r2, [pc, #600]	@ (800cec0 <_dtoa_r+0x380>)
 800cc66:	4b97      	ldr	r3, [pc, #604]	@ (800cec4 <_dtoa_r+0x384>)
 800cc68:	f7f5 f83a 	bl	8001ce0 <__aeabi_dmul>
 800cc6c:	0002      	movs	r2, r0
 800cc6e:	000b      	movs	r3, r1
 800cc70:	0020      	movs	r0, r4
 800cc72:	0029      	movs	r1, r5
 800cc74:	f7f4 f88c 	bl	8000d90 <__aeabi_dadd>
 800cc78:	0004      	movs	r4, r0
 800cc7a:	000d      	movs	r5, r1
 800cc7c:	f7f5 feb6 	bl	80029ec <__aeabi_d2iz>
 800cc80:	2200      	movs	r2, #0
 800cc82:	9004      	str	r0, [sp, #16]
 800cc84:	2300      	movs	r3, #0
 800cc86:	0020      	movs	r0, r4
 800cc88:	0029      	movs	r1, r5
 800cc8a:	f7f3 fbe5 	bl	8000458 <__aeabi_dcmplt>
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	d00b      	beq.n	800ccaa <_dtoa_r+0x16a>
 800cc92:	9804      	ldr	r0, [sp, #16]
 800cc94:	f7f5 fee6 	bl	8002a64 <__aeabi_i2d>
 800cc98:	002b      	movs	r3, r5
 800cc9a:	0022      	movs	r2, r4
 800cc9c:	f7f3 fbd6 	bl	800044c <__aeabi_dcmpeq>
 800cca0:	4243      	negs	r3, r0
 800cca2:	4158      	adcs	r0, r3
 800cca4:	9b04      	ldr	r3, [sp, #16]
 800cca6:	1a1b      	subs	r3, r3, r0
 800cca8:	9304      	str	r3, [sp, #16]
 800ccaa:	2301      	movs	r3, #1
 800ccac:	9315      	str	r3, [sp, #84]	@ 0x54
 800ccae:	9b04      	ldr	r3, [sp, #16]
 800ccb0:	2b16      	cmp	r3, #22
 800ccb2:	d810      	bhi.n	800ccd6 <_dtoa_r+0x196>
 800ccb4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ccb6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ccb8:	9a04      	ldr	r2, [sp, #16]
 800ccba:	4b83      	ldr	r3, [pc, #524]	@ (800cec8 <_dtoa_r+0x388>)
 800ccbc:	00d2      	lsls	r2, r2, #3
 800ccbe:	189b      	adds	r3, r3, r2
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	f7f3 fbc8 	bl	8000458 <__aeabi_dcmplt>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d047      	beq.n	800cd5c <_dtoa_r+0x21c>
 800cccc:	9b04      	ldr	r3, [sp, #16]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	9304      	str	r3, [sp, #16]
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	9315      	str	r3, [sp, #84]	@ 0x54
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ccda:	9206      	str	r2, [sp, #24]
 800ccdc:	1bdb      	subs	r3, r3, r7
 800ccde:	1e5a      	subs	r2, r3, #1
 800cce0:	d53e      	bpl.n	800cd60 <_dtoa_r+0x220>
 800cce2:	2201      	movs	r2, #1
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	9306      	str	r3, [sp, #24]
 800cce8:	2300      	movs	r3, #0
 800ccea:	930d      	str	r3, [sp, #52]	@ 0x34
 800ccec:	9b04      	ldr	r3, [sp, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	db38      	blt.n	800cd64 <_dtoa_r+0x224>
 800ccf2:	9a04      	ldr	r2, [sp, #16]
 800ccf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ccf6:	4694      	mov	ip, r2
 800ccf8:	4463      	add	r3, ip
 800ccfa:	930d      	str	r3, [sp, #52]	@ 0x34
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	9214      	str	r2, [sp, #80]	@ 0x50
 800cd00:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cd04:	2401      	movs	r4, #1
 800cd06:	2b09      	cmp	r3, #9
 800cd08:	d867      	bhi.n	800cdda <_dtoa_r+0x29a>
 800cd0a:	2b05      	cmp	r3, #5
 800cd0c:	dd02      	ble.n	800cd14 <_dtoa_r+0x1d4>
 800cd0e:	2400      	movs	r4, #0
 800cd10:	3b04      	subs	r3, #4
 800cd12:	9322      	str	r3, [sp, #136]	@ 0x88
 800cd14:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cd16:	1e98      	subs	r0, r3, #2
 800cd18:	2803      	cmp	r0, #3
 800cd1a:	d867      	bhi.n	800cdec <_dtoa_r+0x2ac>
 800cd1c:	f7f3 f9fc 	bl	8000118 <__gnu_thumb1_case_uqi>
 800cd20:	5b383a2b 	.word	0x5b383a2b
 800cd24:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800cd26:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800cd28:	18f6      	adds	r6, r6, r3
 800cd2a:	4b68      	ldr	r3, [pc, #416]	@ (800cecc <_dtoa_r+0x38c>)
 800cd2c:	18f2      	adds	r2, r6, r3
 800cd2e:	2a20      	cmp	r2, #32
 800cd30:	dd0f      	ble.n	800cd52 <_dtoa_r+0x212>
 800cd32:	2340      	movs	r3, #64	@ 0x40
 800cd34:	1a9b      	subs	r3, r3, r2
 800cd36:	409f      	lsls	r7, r3
 800cd38:	4b65      	ldr	r3, [pc, #404]	@ (800ced0 <_dtoa_r+0x390>)
 800cd3a:	0038      	movs	r0, r7
 800cd3c:	18f3      	adds	r3, r6, r3
 800cd3e:	40dc      	lsrs	r4, r3
 800cd40:	4320      	orrs	r0, r4
 800cd42:	f7f5 febd 	bl	8002ac0 <__aeabi_ui2d>
 800cd46:	2201      	movs	r2, #1
 800cd48:	4b62      	ldr	r3, [pc, #392]	@ (800ced4 <_dtoa_r+0x394>)
 800cd4a:	1e77      	subs	r7, r6, #1
 800cd4c:	18cb      	adds	r3, r1, r3
 800cd4e:	9218      	str	r2, [sp, #96]	@ 0x60
 800cd50:	e776      	b.n	800cc40 <_dtoa_r+0x100>
 800cd52:	2320      	movs	r3, #32
 800cd54:	0020      	movs	r0, r4
 800cd56:	1a9b      	subs	r3, r3, r2
 800cd58:	4098      	lsls	r0, r3
 800cd5a:	e7f2      	b.n	800cd42 <_dtoa_r+0x202>
 800cd5c:	9015      	str	r0, [sp, #84]	@ 0x54
 800cd5e:	e7ba      	b.n	800ccd6 <_dtoa_r+0x196>
 800cd60:	920d      	str	r2, [sp, #52]	@ 0x34
 800cd62:	e7c3      	b.n	800ccec <_dtoa_r+0x1ac>
 800cd64:	9b06      	ldr	r3, [sp, #24]
 800cd66:	9a04      	ldr	r2, [sp, #16]
 800cd68:	1a9b      	subs	r3, r3, r2
 800cd6a:	9306      	str	r3, [sp, #24]
 800cd6c:	4253      	negs	r3, r2
 800cd6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd70:	2300      	movs	r3, #0
 800cd72:	9314      	str	r3, [sp, #80]	@ 0x50
 800cd74:	e7c5      	b.n	800cd02 <_dtoa_r+0x1c2>
 800cd76:	2300      	movs	r3, #0
 800cd78:	9310      	str	r3, [sp, #64]	@ 0x40
 800cd7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd7c:	930e      	str	r3, [sp, #56]	@ 0x38
 800cd7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	dc13      	bgt.n	800cdac <_dtoa_r+0x26c>
 800cd84:	2301      	movs	r3, #1
 800cd86:	001a      	movs	r2, r3
 800cd88:	930e      	str	r3, [sp, #56]	@ 0x38
 800cd8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd8c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800cd8e:	e00d      	b.n	800cdac <_dtoa_r+0x26c>
 800cd90:	2301      	movs	r3, #1
 800cd92:	e7f1      	b.n	800cd78 <_dtoa_r+0x238>
 800cd94:	2300      	movs	r3, #0
 800cd96:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cd98:	9310      	str	r3, [sp, #64]	@ 0x40
 800cd9a:	4694      	mov	ip, r2
 800cd9c:	9b04      	ldr	r3, [sp, #16]
 800cd9e:	4463      	add	r3, ip
 800cda0:	930e      	str	r3, [sp, #56]	@ 0x38
 800cda2:	3301      	adds	r3, #1
 800cda4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	dc00      	bgt.n	800cdac <_dtoa_r+0x26c>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	9a03      	ldr	r2, [sp, #12]
 800cdae:	2100      	movs	r1, #0
 800cdb0:	69d0      	ldr	r0, [r2, #28]
 800cdb2:	2204      	movs	r2, #4
 800cdb4:	0015      	movs	r5, r2
 800cdb6:	3514      	adds	r5, #20
 800cdb8:	429d      	cmp	r5, r3
 800cdba:	d91b      	bls.n	800cdf4 <_dtoa_r+0x2b4>
 800cdbc:	6041      	str	r1, [r0, #4]
 800cdbe:	9803      	ldr	r0, [sp, #12]
 800cdc0:	f000 fdb8 	bl	800d934 <_Balloc>
 800cdc4:	9008      	str	r0, [sp, #32]
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d117      	bne.n	800cdfa <_dtoa_r+0x2ba>
 800cdca:	21b0      	movs	r1, #176	@ 0xb0
 800cdcc:	4b42      	ldr	r3, [pc, #264]	@ (800ced8 <_dtoa_r+0x398>)
 800cdce:	482e      	ldr	r0, [pc, #184]	@ (800ce88 <_dtoa_r+0x348>)
 800cdd0:	9a08      	ldr	r2, [sp, #32]
 800cdd2:	31ff      	adds	r1, #255	@ 0xff
 800cdd4:	e6c9      	b.n	800cb6a <_dtoa_r+0x2a>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e7dd      	b.n	800cd96 <_dtoa_r+0x256>
 800cdda:	2300      	movs	r3, #0
 800cddc:	9410      	str	r4, [sp, #64]	@ 0x40
 800cdde:	9322      	str	r3, [sp, #136]	@ 0x88
 800cde0:	3b01      	subs	r3, #1
 800cde2:	930e      	str	r3, [sp, #56]	@ 0x38
 800cde4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cde6:	2200      	movs	r2, #0
 800cde8:	3313      	adds	r3, #19
 800cdea:	e7cf      	b.n	800cd8c <_dtoa_r+0x24c>
 800cdec:	2301      	movs	r3, #1
 800cdee:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdf0:	3b02      	subs	r3, #2
 800cdf2:	e7f6      	b.n	800cde2 <_dtoa_r+0x2a2>
 800cdf4:	3101      	adds	r1, #1
 800cdf6:	0052      	lsls	r2, r2, #1
 800cdf8:	e7dc      	b.n	800cdb4 <_dtoa_r+0x274>
 800cdfa:	9b03      	ldr	r3, [sp, #12]
 800cdfc:	9a08      	ldr	r2, [sp, #32]
 800cdfe:	69db      	ldr	r3, [r3, #28]
 800ce00:	601a      	str	r2, [r3, #0]
 800ce02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce04:	2b0e      	cmp	r3, #14
 800ce06:	d900      	bls.n	800ce0a <_dtoa_r+0x2ca>
 800ce08:	e0d9      	b.n	800cfbe <_dtoa_r+0x47e>
 800ce0a:	2c00      	cmp	r4, #0
 800ce0c:	d100      	bne.n	800ce10 <_dtoa_r+0x2d0>
 800ce0e:	e0d6      	b.n	800cfbe <_dtoa_r+0x47e>
 800ce10:	9b04      	ldr	r3, [sp, #16]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	dd64      	ble.n	800cee0 <_dtoa_r+0x3a0>
 800ce16:	210f      	movs	r1, #15
 800ce18:	9a04      	ldr	r2, [sp, #16]
 800ce1a:	4b2b      	ldr	r3, [pc, #172]	@ (800cec8 <_dtoa_r+0x388>)
 800ce1c:	400a      	ands	r2, r1
 800ce1e:	00d2      	lsls	r2, r2, #3
 800ce20:	189b      	adds	r3, r3, r2
 800ce22:	681e      	ldr	r6, [r3, #0]
 800ce24:	685f      	ldr	r7, [r3, #4]
 800ce26:	9b04      	ldr	r3, [sp, #16]
 800ce28:	2402      	movs	r4, #2
 800ce2a:	111d      	asrs	r5, r3, #4
 800ce2c:	05db      	lsls	r3, r3, #23
 800ce2e:	d50a      	bpl.n	800ce46 <_dtoa_r+0x306>
 800ce30:	4b2a      	ldr	r3, [pc, #168]	@ (800cedc <_dtoa_r+0x39c>)
 800ce32:	400d      	ands	r5, r1
 800ce34:	6a1a      	ldr	r2, [r3, #32]
 800ce36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ce3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ce3c:	f7f4 fb0c 	bl	8001458 <__aeabi_ddiv>
 800ce40:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce42:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ce44:	3401      	adds	r4, #1
 800ce46:	4b25      	ldr	r3, [pc, #148]	@ (800cedc <_dtoa_r+0x39c>)
 800ce48:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce4a:	2d00      	cmp	r5, #0
 800ce4c:	d108      	bne.n	800ce60 <_dtoa_r+0x320>
 800ce4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce52:	0032      	movs	r2, r6
 800ce54:	003b      	movs	r3, r7
 800ce56:	f7f4 faff 	bl	8001458 <__aeabi_ddiv>
 800ce5a:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ce5e:	e05a      	b.n	800cf16 <_dtoa_r+0x3d6>
 800ce60:	2301      	movs	r3, #1
 800ce62:	421d      	tst	r5, r3
 800ce64:	d009      	beq.n	800ce7a <_dtoa_r+0x33a>
 800ce66:	18e4      	adds	r4, r4, r3
 800ce68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce6a:	0030      	movs	r0, r6
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	0039      	movs	r1, r7
 800ce72:	f7f4 ff35 	bl	8001ce0 <__aeabi_dmul>
 800ce76:	0006      	movs	r6, r0
 800ce78:	000f      	movs	r7, r1
 800ce7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce7c:	106d      	asrs	r5, r5, #1
 800ce7e:	3308      	adds	r3, #8
 800ce80:	e7e2      	b.n	800ce48 <_dtoa_r+0x308>
 800ce82:	46c0      	nop			@ (mov r8, r8)
 800ce84:	0801090f 	.word	0x0801090f
 800ce88:	08010926 	.word	0x08010926
 800ce8c:	7ff00000 	.word	0x7ff00000
 800ce90:	0000270f 	.word	0x0000270f
 800ce94:	0801090b 	.word	0x0801090b
 800ce98:	0801090e 	.word	0x0801090e
 800ce9c:	080108da 	.word	0x080108da
 800cea0:	080108d9 	.word	0x080108d9
 800cea4:	3ff00000 	.word	0x3ff00000
 800cea8:	fffffc01 	.word	0xfffffc01
 800ceac:	3ff80000 	.word	0x3ff80000
 800ceb0:	636f4361 	.word	0x636f4361
 800ceb4:	3fd287a7 	.word	0x3fd287a7
 800ceb8:	8b60c8b3 	.word	0x8b60c8b3
 800cebc:	3fc68a28 	.word	0x3fc68a28
 800cec0:	509f79fb 	.word	0x509f79fb
 800cec4:	3fd34413 	.word	0x3fd34413
 800cec8:	08010a20 	.word	0x08010a20
 800cecc:	00000432 	.word	0x00000432
 800ced0:	00000412 	.word	0x00000412
 800ced4:	fe100000 	.word	0xfe100000
 800ced8:	0801097e 	.word	0x0801097e
 800cedc:	080109f8 	.word	0x080109f8
 800cee0:	9b04      	ldr	r3, [sp, #16]
 800cee2:	2402      	movs	r4, #2
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d016      	beq.n	800cf16 <_dtoa_r+0x3d6>
 800cee8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ceea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ceec:	220f      	movs	r2, #15
 800ceee:	425d      	negs	r5, r3
 800cef0:	402a      	ands	r2, r5
 800cef2:	4bd7      	ldr	r3, [pc, #860]	@ (800d250 <_dtoa_r+0x710>)
 800cef4:	00d2      	lsls	r2, r2, #3
 800cef6:	189b      	adds	r3, r3, r2
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	f7f4 fef0 	bl	8001ce0 <__aeabi_dmul>
 800cf00:	2701      	movs	r7, #1
 800cf02:	2300      	movs	r3, #0
 800cf04:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf06:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cf08:	4ed2      	ldr	r6, [pc, #840]	@ (800d254 <_dtoa_r+0x714>)
 800cf0a:	112d      	asrs	r5, r5, #4
 800cf0c:	2d00      	cmp	r5, #0
 800cf0e:	d000      	beq.n	800cf12 <_dtoa_r+0x3d2>
 800cf10:	e0ba      	b.n	800d088 <_dtoa_r+0x548>
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1a1      	bne.n	800ce5a <_dtoa_r+0x31a>
 800cf16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cf18:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800cf1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d100      	bne.n	800cf22 <_dtoa_r+0x3e2>
 800cf20:	e0bd      	b.n	800d09e <_dtoa_r+0x55e>
 800cf22:	2200      	movs	r2, #0
 800cf24:	0030      	movs	r0, r6
 800cf26:	0039      	movs	r1, r7
 800cf28:	4bcb      	ldr	r3, [pc, #812]	@ (800d258 <_dtoa_r+0x718>)
 800cf2a:	f7f3 fa95 	bl	8000458 <__aeabi_dcmplt>
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	d100      	bne.n	800cf34 <_dtoa_r+0x3f4>
 800cf32:	e0b4      	b.n	800d09e <_dtoa_r+0x55e>
 800cf34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d100      	bne.n	800cf3c <_dtoa_r+0x3fc>
 800cf3a:	e0b0      	b.n	800d09e <_dtoa_r+0x55e>
 800cf3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	dd39      	ble.n	800cfb6 <_dtoa_r+0x476>
 800cf42:	9b04      	ldr	r3, [sp, #16]
 800cf44:	2200      	movs	r2, #0
 800cf46:	3b01      	subs	r3, #1
 800cf48:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf4a:	0030      	movs	r0, r6
 800cf4c:	4bc3      	ldr	r3, [pc, #780]	@ (800d25c <_dtoa_r+0x71c>)
 800cf4e:	0039      	movs	r1, r7
 800cf50:	f7f4 fec6 	bl	8001ce0 <__aeabi_dmul>
 800cf54:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf56:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cf58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf5a:	3401      	adds	r4, #1
 800cf5c:	0020      	movs	r0, r4
 800cf5e:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf60:	f7f5 fd80 	bl	8002a64 <__aeabi_i2d>
 800cf64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf68:	f7f4 feba 	bl	8001ce0 <__aeabi_dmul>
 800cf6c:	4bbc      	ldr	r3, [pc, #752]	@ (800d260 <_dtoa_r+0x720>)
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f7f3 ff0e 	bl	8000d90 <__aeabi_dadd>
 800cf74:	4bbb      	ldr	r3, [pc, #748]	@ (800d264 <_dtoa_r+0x724>)
 800cf76:	0006      	movs	r6, r0
 800cf78:	18cf      	adds	r7, r1, r3
 800cf7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d000      	beq.n	800cf82 <_dtoa_r+0x442>
 800cf80:	e091      	b.n	800d0a6 <_dtoa_r+0x566>
 800cf82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cf84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cf86:	2200      	movs	r2, #0
 800cf88:	4bb7      	ldr	r3, [pc, #732]	@ (800d268 <_dtoa_r+0x728>)
 800cf8a:	f7f5 f971 	bl	8002270 <__aeabi_dsub>
 800cf8e:	0032      	movs	r2, r6
 800cf90:	003b      	movs	r3, r7
 800cf92:	0004      	movs	r4, r0
 800cf94:	000d      	movs	r5, r1
 800cf96:	f7f3 fa73 	bl	8000480 <__aeabi_dcmpgt>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d000      	beq.n	800cfa0 <_dtoa_r+0x460>
 800cf9e:	e29d      	b.n	800d4dc <_dtoa_r+0x99c>
 800cfa0:	2180      	movs	r1, #128	@ 0x80
 800cfa2:	0609      	lsls	r1, r1, #24
 800cfa4:	187b      	adds	r3, r7, r1
 800cfa6:	0032      	movs	r2, r6
 800cfa8:	0020      	movs	r0, r4
 800cfaa:	0029      	movs	r1, r5
 800cfac:	f7f3 fa54 	bl	8000458 <__aeabi_dcmplt>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d000      	beq.n	800cfb6 <_dtoa_r+0x476>
 800cfb4:	e130      	b.n	800d218 <_dtoa_r+0x6d8>
 800cfb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cfb8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800cfba:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfbc:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cfbe:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	da00      	bge.n	800cfc6 <_dtoa_r+0x486>
 800cfc4:	e177      	b.n	800d2b6 <_dtoa_r+0x776>
 800cfc6:	9a04      	ldr	r2, [sp, #16]
 800cfc8:	2a0e      	cmp	r2, #14
 800cfca:	dd00      	ble.n	800cfce <_dtoa_r+0x48e>
 800cfcc:	e173      	b.n	800d2b6 <_dtoa_r+0x776>
 800cfce:	4ba0      	ldr	r3, [pc, #640]	@ (800d250 <_dtoa_r+0x710>)
 800cfd0:	00d2      	lsls	r2, r2, #3
 800cfd2:	189b      	adds	r3, r3, r2
 800cfd4:	685c      	ldr	r4, [r3, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	9306      	str	r3, [sp, #24]
 800cfda:	9407      	str	r4, [sp, #28]
 800cfdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	da03      	bge.n	800cfea <_dtoa_r+0x4aa>
 800cfe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dc00      	bgt.n	800cfea <_dtoa_r+0x4aa>
 800cfe8:	e106      	b.n	800d1f8 <_dtoa_r+0x6b8>
 800cfea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cfec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800cfee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cff0:	9d08      	ldr	r5, [sp, #32]
 800cff2:	3b01      	subs	r3, #1
 800cff4:	195b      	adds	r3, r3, r5
 800cff6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cff8:	9a06      	ldr	r2, [sp, #24]
 800cffa:	9b07      	ldr	r3, [sp, #28]
 800cffc:	0030      	movs	r0, r6
 800cffe:	0039      	movs	r1, r7
 800d000:	f7f4 fa2a 	bl	8001458 <__aeabi_ddiv>
 800d004:	f7f5 fcf2 	bl	80029ec <__aeabi_d2iz>
 800d008:	9009      	str	r0, [sp, #36]	@ 0x24
 800d00a:	f7f5 fd2b 	bl	8002a64 <__aeabi_i2d>
 800d00e:	9a06      	ldr	r2, [sp, #24]
 800d010:	9b07      	ldr	r3, [sp, #28]
 800d012:	f7f4 fe65 	bl	8001ce0 <__aeabi_dmul>
 800d016:	0002      	movs	r2, r0
 800d018:	000b      	movs	r3, r1
 800d01a:	0030      	movs	r0, r6
 800d01c:	0039      	movs	r1, r7
 800d01e:	f7f5 f927 	bl	8002270 <__aeabi_dsub>
 800d022:	002b      	movs	r3, r5
 800d024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d026:	3501      	adds	r5, #1
 800d028:	3230      	adds	r2, #48	@ 0x30
 800d02a:	701a      	strb	r2, [r3, #0]
 800d02c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d02e:	002c      	movs	r4, r5
 800d030:	429a      	cmp	r2, r3
 800d032:	d000      	beq.n	800d036 <_dtoa_r+0x4f6>
 800d034:	e131      	b.n	800d29a <_dtoa_r+0x75a>
 800d036:	0002      	movs	r2, r0
 800d038:	000b      	movs	r3, r1
 800d03a:	f7f3 fea9 	bl	8000d90 <__aeabi_dadd>
 800d03e:	9a06      	ldr	r2, [sp, #24]
 800d040:	9b07      	ldr	r3, [sp, #28]
 800d042:	0006      	movs	r6, r0
 800d044:	000f      	movs	r7, r1
 800d046:	f7f3 fa1b 	bl	8000480 <__aeabi_dcmpgt>
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d000      	beq.n	800d050 <_dtoa_r+0x510>
 800d04e:	e10f      	b.n	800d270 <_dtoa_r+0x730>
 800d050:	9a06      	ldr	r2, [sp, #24]
 800d052:	9b07      	ldr	r3, [sp, #28]
 800d054:	0030      	movs	r0, r6
 800d056:	0039      	movs	r1, r7
 800d058:	f7f3 f9f8 	bl	800044c <__aeabi_dcmpeq>
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d003      	beq.n	800d068 <_dtoa_r+0x528>
 800d060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d062:	07dd      	lsls	r5, r3, #31
 800d064:	d500      	bpl.n	800d068 <_dtoa_r+0x528>
 800d066:	e103      	b.n	800d270 <_dtoa_r+0x730>
 800d068:	9905      	ldr	r1, [sp, #20]
 800d06a:	9803      	ldr	r0, [sp, #12]
 800d06c:	f000 fca6 	bl	800d9bc <_Bfree>
 800d070:	2300      	movs	r3, #0
 800d072:	7023      	strb	r3, [r4, #0]
 800d074:	9b04      	ldr	r3, [sp, #16]
 800d076:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d078:	3301      	adds	r3, #1
 800d07a:	6013      	str	r3, [r2, #0]
 800d07c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d100      	bne.n	800d084 <_dtoa_r+0x544>
 800d082:	e5a7      	b.n	800cbd4 <_dtoa_r+0x94>
 800d084:	601c      	str	r4, [r3, #0]
 800d086:	e5a5      	b.n	800cbd4 <_dtoa_r+0x94>
 800d088:	423d      	tst	r5, r7
 800d08a:	d005      	beq.n	800d098 <_dtoa_r+0x558>
 800d08c:	6832      	ldr	r2, [r6, #0]
 800d08e:	6873      	ldr	r3, [r6, #4]
 800d090:	f7f4 fe26 	bl	8001ce0 <__aeabi_dmul>
 800d094:	003b      	movs	r3, r7
 800d096:	3401      	adds	r4, #1
 800d098:	106d      	asrs	r5, r5, #1
 800d09a:	3608      	adds	r6, #8
 800d09c:	e736      	b.n	800cf0c <_dtoa_r+0x3cc>
 800d09e:	9b04      	ldr	r3, [sp, #16]
 800d0a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0a4:	e75a      	b.n	800cf5c <_dtoa_r+0x41c>
 800d0a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d0a8:	4b69      	ldr	r3, [pc, #420]	@ (800d250 <_dtoa_r+0x710>)
 800d0aa:	3a01      	subs	r2, #1
 800d0ac:	00d2      	lsls	r2, r2, #3
 800d0ae:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d0b0:	189b      	adds	r3, r3, r2
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	2900      	cmp	r1, #0
 800d0b8:	d04c      	beq.n	800d154 <_dtoa_r+0x614>
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	496b      	ldr	r1, [pc, #428]	@ (800d26c <_dtoa_r+0x72c>)
 800d0be:	f7f4 f9cb 	bl	8001458 <__aeabi_ddiv>
 800d0c2:	0032      	movs	r2, r6
 800d0c4:	003b      	movs	r3, r7
 800d0c6:	f7f5 f8d3 	bl	8002270 <__aeabi_dsub>
 800d0ca:	9a08      	ldr	r2, [sp, #32]
 800d0cc:	0006      	movs	r6, r0
 800d0ce:	4694      	mov	ip, r2
 800d0d0:	000f      	movs	r7, r1
 800d0d2:	9b08      	ldr	r3, [sp, #32]
 800d0d4:	9316      	str	r3, [sp, #88]	@ 0x58
 800d0d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0d8:	4463      	add	r3, ip
 800d0da:	9311      	str	r3, [sp, #68]	@ 0x44
 800d0dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d0de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d0e0:	f7f5 fc84 	bl	80029ec <__aeabi_d2iz>
 800d0e4:	0005      	movs	r5, r0
 800d0e6:	f7f5 fcbd 	bl	8002a64 <__aeabi_i2d>
 800d0ea:	0002      	movs	r2, r0
 800d0ec:	000b      	movs	r3, r1
 800d0ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d0f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d0f2:	f7f5 f8bd 	bl	8002270 <__aeabi_dsub>
 800d0f6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d0f8:	3530      	adds	r5, #48	@ 0x30
 800d0fa:	1c5c      	adds	r4, r3, #1
 800d0fc:	701d      	strb	r5, [r3, #0]
 800d0fe:	0032      	movs	r2, r6
 800d100:	003b      	movs	r3, r7
 800d102:	900a      	str	r0, [sp, #40]	@ 0x28
 800d104:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d106:	f7f3 f9a7 	bl	8000458 <__aeabi_dcmplt>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	d16a      	bne.n	800d1e4 <_dtoa_r+0x6a4>
 800d10e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d110:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d112:	2000      	movs	r0, #0
 800d114:	4950      	ldr	r1, [pc, #320]	@ (800d258 <_dtoa_r+0x718>)
 800d116:	f7f5 f8ab 	bl	8002270 <__aeabi_dsub>
 800d11a:	0032      	movs	r2, r6
 800d11c:	003b      	movs	r3, r7
 800d11e:	f7f3 f99b 	bl	8000458 <__aeabi_dcmplt>
 800d122:	2800      	cmp	r0, #0
 800d124:	d000      	beq.n	800d128 <_dtoa_r+0x5e8>
 800d126:	e0a5      	b.n	800d274 <_dtoa_r+0x734>
 800d128:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d12a:	42a3      	cmp	r3, r4
 800d12c:	d100      	bne.n	800d130 <_dtoa_r+0x5f0>
 800d12e:	e742      	b.n	800cfb6 <_dtoa_r+0x476>
 800d130:	2200      	movs	r2, #0
 800d132:	0030      	movs	r0, r6
 800d134:	0039      	movs	r1, r7
 800d136:	4b49      	ldr	r3, [pc, #292]	@ (800d25c <_dtoa_r+0x71c>)
 800d138:	f7f4 fdd2 	bl	8001ce0 <__aeabi_dmul>
 800d13c:	2200      	movs	r2, #0
 800d13e:	0006      	movs	r6, r0
 800d140:	000f      	movs	r7, r1
 800d142:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d146:	4b45      	ldr	r3, [pc, #276]	@ (800d25c <_dtoa_r+0x71c>)
 800d148:	f7f4 fdca 	bl	8001ce0 <__aeabi_dmul>
 800d14c:	9416      	str	r4, [sp, #88]	@ 0x58
 800d14e:	900a      	str	r0, [sp, #40]	@ 0x28
 800d150:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d152:	e7c3      	b.n	800d0dc <_dtoa_r+0x59c>
 800d154:	0030      	movs	r0, r6
 800d156:	0039      	movs	r1, r7
 800d158:	f7f4 fdc2 	bl	8001ce0 <__aeabi_dmul>
 800d15c:	9d08      	ldr	r5, [sp, #32]
 800d15e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d160:	002b      	movs	r3, r5
 800d162:	4694      	mov	ip, r2
 800d164:	9016      	str	r0, [sp, #88]	@ 0x58
 800d166:	9117      	str	r1, [sp, #92]	@ 0x5c
 800d168:	4463      	add	r3, ip
 800d16a:	9319      	str	r3, [sp, #100]	@ 0x64
 800d16c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d16e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d170:	f7f5 fc3c 	bl	80029ec <__aeabi_d2iz>
 800d174:	0004      	movs	r4, r0
 800d176:	f7f5 fc75 	bl	8002a64 <__aeabi_i2d>
 800d17a:	000b      	movs	r3, r1
 800d17c:	0002      	movs	r2, r0
 800d17e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d180:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d182:	f7f5 f875 	bl	8002270 <__aeabi_dsub>
 800d186:	3430      	adds	r4, #48	@ 0x30
 800d188:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d18a:	702c      	strb	r4, [r5, #0]
 800d18c:	3501      	adds	r5, #1
 800d18e:	0006      	movs	r6, r0
 800d190:	000f      	movs	r7, r1
 800d192:	42ab      	cmp	r3, r5
 800d194:	d129      	bne.n	800d1ea <_dtoa_r+0x6aa>
 800d196:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800d198:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800d19a:	9b08      	ldr	r3, [sp, #32]
 800d19c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800d19e:	469c      	mov	ip, r3
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	4b32      	ldr	r3, [pc, #200]	@ (800d26c <_dtoa_r+0x72c>)
 800d1a4:	4464      	add	r4, ip
 800d1a6:	f7f3 fdf3 	bl	8000d90 <__aeabi_dadd>
 800d1aa:	0002      	movs	r2, r0
 800d1ac:	000b      	movs	r3, r1
 800d1ae:	0030      	movs	r0, r6
 800d1b0:	0039      	movs	r1, r7
 800d1b2:	f7f3 f965 	bl	8000480 <__aeabi_dcmpgt>
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d15c      	bne.n	800d274 <_dtoa_r+0x734>
 800d1ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d1bc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d1be:	2000      	movs	r0, #0
 800d1c0:	492a      	ldr	r1, [pc, #168]	@ (800d26c <_dtoa_r+0x72c>)
 800d1c2:	f7f5 f855 	bl	8002270 <__aeabi_dsub>
 800d1c6:	0002      	movs	r2, r0
 800d1c8:	000b      	movs	r3, r1
 800d1ca:	0030      	movs	r0, r6
 800d1cc:	0039      	movs	r1, r7
 800d1ce:	f7f3 f943 	bl	8000458 <__aeabi_dcmplt>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d100      	bne.n	800d1d8 <_dtoa_r+0x698>
 800d1d6:	e6ee      	b.n	800cfb6 <_dtoa_r+0x476>
 800d1d8:	0023      	movs	r3, r4
 800d1da:	3c01      	subs	r4, #1
 800d1dc:	7822      	ldrb	r2, [r4, #0]
 800d1de:	2a30      	cmp	r2, #48	@ 0x30
 800d1e0:	d0fa      	beq.n	800d1d8 <_dtoa_r+0x698>
 800d1e2:	001c      	movs	r4, r3
 800d1e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1e6:	9304      	str	r3, [sp, #16]
 800d1e8:	e73e      	b.n	800d068 <_dtoa_r+0x528>
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	4b1b      	ldr	r3, [pc, #108]	@ (800d25c <_dtoa_r+0x71c>)
 800d1ee:	f7f4 fd77 	bl	8001ce0 <__aeabi_dmul>
 800d1f2:	900a      	str	r0, [sp, #40]	@ 0x28
 800d1f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d1f6:	e7b9      	b.n	800d16c <_dtoa_r+0x62c>
 800d1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d10c      	bne.n	800d218 <_dtoa_r+0x6d8>
 800d1fe:	9806      	ldr	r0, [sp, #24]
 800d200:	9907      	ldr	r1, [sp, #28]
 800d202:	2200      	movs	r2, #0
 800d204:	4b18      	ldr	r3, [pc, #96]	@ (800d268 <_dtoa_r+0x728>)
 800d206:	f7f4 fd6b 	bl	8001ce0 <__aeabi_dmul>
 800d20a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d20c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d20e:	f7f3 f941 	bl	8000494 <__aeabi_dcmpge>
 800d212:	2800      	cmp	r0, #0
 800d214:	d100      	bne.n	800d218 <_dtoa_r+0x6d8>
 800d216:	e164      	b.n	800d4e2 <_dtoa_r+0x9a2>
 800d218:	2600      	movs	r6, #0
 800d21a:	0037      	movs	r7, r6
 800d21c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d21e:	9c08      	ldr	r4, [sp, #32]
 800d220:	43db      	mvns	r3, r3
 800d222:	930c      	str	r3, [sp, #48]	@ 0x30
 800d224:	2300      	movs	r3, #0
 800d226:	9304      	str	r3, [sp, #16]
 800d228:	0031      	movs	r1, r6
 800d22a:	9803      	ldr	r0, [sp, #12]
 800d22c:	f000 fbc6 	bl	800d9bc <_Bfree>
 800d230:	2f00      	cmp	r7, #0
 800d232:	d0d7      	beq.n	800d1e4 <_dtoa_r+0x6a4>
 800d234:	9b04      	ldr	r3, [sp, #16]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d005      	beq.n	800d246 <_dtoa_r+0x706>
 800d23a:	42bb      	cmp	r3, r7
 800d23c:	d003      	beq.n	800d246 <_dtoa_r+0x706>
 800d23e:	0019      	movs	r1, r3
 800d240:	9803      	ldr	r0, [sp, #12]
 800d242:	f000 fbbb 	bl	800d9bc <_Bfree>
 800d246:	0039      	movs	r1, r7
 800d248:	9803      	ldr	r0, [sp, #12]
 800d24a:	f000 fbb7 	bl	800d9bc <_Bfree>
 800d24e:	e7c9      	b.n	800d1e4 <_dtoa_r+0x6a4>
 800d250:	08010a20 	.word	0x08010a20
 800d254:	080109f8 	.word	0x080109f8
 800d258:	3ff00000 	.word	0x3ff00000
 800d25c:	40240000 	.word	0x40240000
 800d260:	401c0000 	.word	0x401c0000
 800d264:	fcc00000 	.word	0xfcc00000
 800d268:	40140000 	.word	0x40140000
 800d26c:	3fe00000 	.word	0x3fe00000
 800d270:	9b04      	ldr	r3, [sp, #16]
 800d272:	930c      	str	r3, [sp, #48]	@ 0x30
 800d274:	0023      	movs	r3, r4
 800d276:	001c      	movs	r4, r3
 800d278:	3b01      	subs	r3, #1
 800d27a:	781a      	ldrb	r2, [r3, #0]
 800d27c:	2a39      	cmp	r2, #57	@ 0x39
 800d27e:	d108      	bne.n	800d292 <_dtoa_r+0x752>
 800d280:	9a08      	ldr	r2, [sp, #32]
 800d282:	429a      	cmp	r2, r3
 800d284:	d1f7      	bne.n	800d276 <_dtoa_r+0x736>
 800d286:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d288:	9908      	ldr	r1, [sp, #32]
 800d28a:	3201      	adds	r2, #1
 800d28c:	920c      	str	r2, [sp, #48]	@ 0x30
 800d28e:	2230      	movs	r2, #48	@ 0x30
 800d290:	700a      	strb	r2, [r1, #0]
 800d292:	781a      	ldrb	r2, [r3, #0]
 800d294:	3201      	adds	r2, #1
 800d296:	701a      	strb	r2, [r3, #0]
 800d298:	e7a4      	b.n	800d1e4 <_dtoa_r+0x6a4>
 800d29a:	2200      	movs	r2, #0
 800d29c:	4bc6      	ldr	r3, [pc, #792]	@ (800d5b8 <_dtoa_r+0xa78>)
 800d29e:	f7f4 fd1f 	bl	8001ce0 <__aeabi_dmul>
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	0006      	movs	r6, r0
 800d2a8:	000f      	movs	r7, r1
 800d2aa:	f7f3 f8cf 	bl	800044c <__aeabi_dcmpeq>
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	d100      	bne.n	800d2b4 <_dtoa_r+0x774>
 800d2b2:	e6a1      	b.n	800cff8 <_dtoa_r+0x4b8>
 800d2b4:	e6d8      	b.n	800d068 <_dtoa_r+0x528>
 800d2b6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800d2b8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d2ba:	9c06      	ldr	r4, [sp, #24]
 800d2bc:	2f00      	cmp	r7, #0
 800d2be:	d014      	beq.n	800d2ea <_dtoa_r+0x7aa>
 800d2c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d2c2:	2a01      	cmp	r2, #1
 800d2c4:	dd00      	ble.n	800d2c8 <_dtoa_r+0x788>
 800d2c6:	e0c8      	b.n	800d45a <_dtoa_r+0x91a>
 800d2c8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d2ca:	2a00      	cmp	r2, #0
 800d2cc:	d100      	bne.n	800d2d0 <_dtoa_r+0x790>
 800d2ce:	e0be      	b.n	800d44e <_dtoa_r+0x90e>
 800d2d0:	4aba      	ldr	r2, [pc, #744]	@ (800d5bc <_dtoa_r+0xa7c>)
 800d2d2:	189b      	adds	r3, r3, r2
 800d2d4:	9a06      	ldr	r2, [sp, #24]
 800d2d6:	2101      	movs	r1, #1
 800d2d8:	18d2      	adds	r2, r2, r3
 800d2da:	9206      	str	r2, [sp, #24]
 800d2dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2de:	9803      	ldr	r0, [sp, #12]
 800d2e0:	18d3      	adds	r3, r2, r3
 800d2e2:	930d      	str	r3, [sp, #52]	@ 0x34
 800d2e4:	f000 fc6e 	bl	800dbc4 <__i2b>
 800d2e8:	0007      	movs	r7, r0
 800d2ea:	2c00      	cmp	r4, #0
 800d2ec:	d00e      	beq.n	800d30c <_dtoa_r+0x7cc>
 800d2ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	dd0b      	ble.n	800d30c <_dtoa_r+0x7cc>
 800d2f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2f6:	0023      	movs	r3, r4
 800d2f8:	4294      	cmp	r4, r2
 800d2fa:	dd00      	ble.n	800d2fe <_dtoa_r+0x7be>
 800d2fc:	0013      	movs	r3, r2
 800d2fe:	9a06      	ldr	r2, [sp, #24]
 800d300:	1ae4      	subs	r4, r4, r3
 800d302:	1ad2      	subs	r2, r2, r3
 800d304:	9206      	str	r2, [sp, #24]
 800d306:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d308:	1ad3      	subs	r3, r2, r3
 800d30a:	930d      	str	r3, [sp, #52]	@ 0x34
 800d30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d01f      	beq.n	800d352 <_dtoa_r+0x812>
 800d312:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d314:	2b00      	cmp	r3, #0
 800d316:	d100      	bne.n	800d31a <_dtoa_r+0x7da>
 800d318:	e0b5      	b.n	800d486 <_dtoa_r+0x946>
 800d31a:	2d00      	cmp	r5, #0
 800d31c:	d010      	beq.n	800d340 <_dtoa_r+0x800>
 800d31e:	0039      	movs	r1, r7
 800d320:	002a      	movs	r2, r5
 800d322:	9803      	ldr	r0, [sp, #12]
 800d324:	f000 fd18 	bl	800dd58 <__pow5mult>
 800d328:	9a05      	ldr	r2, [sp, #20]
 800d32a:	0001      	movs	r1, r0
 800d32c:	0007      	movs	r7, r0
 800d32e:	9803      	ldr	r0, [sp, #12]
 800d330:	f000 fc60 	bl	800dbf4 <__multiply>
 800d334:	0006      	movs	r6, r0
 800d336:	9905      	ldr	r1, [sp, #20]
 800d338:	9803      	ldr	r0, [sp, #12]
 800d33a:	f000 fb3f 	bl	800d9bc <_Bfree>
 800d33e:	9605      	str	r6, [sp, #20]
 800d340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d342:	1b5a      	subs	r2, r3, r5
 800d344:	42ab      	cmp	r3, r5
 800d346:	d004      	beq.n	800d352 <_dtoa_r+0x812>
 800d348:	9905      	ldr	r1, [sp, #20]
 800d34a:	9803      	ldr	r0, [sp, #12]
 800d34c:	f000 fd04 	bl	800dd58 <__pow5mult>
 800d350:	9005      	str	r0, [sp, #20]
 800d352:	2101      	movs	r1, #1
 800d354:	9803      	ldr	r0, [sp, #12]
 800d356:	f000 fc35 	bl	800dbc4 <__i2b>
 800d35a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d35c:	0006      	movs	r6, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d100      	bne.n	800d364 <_dtoa_r+0x824>
 800d362:	e1bc      	b.n	800d6de <_dtoa_r+0xb9e>
 800d364:	001a      	movs	r2, r3
 800d366:	0001      	movs	r1, r0
 800d368:	9803      	ldr	r0, [sp, #12]
 800d36a:	f000 fcf5 	bl	800dd58 <__pow5mult>
 800d36e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d370:	0006      	movs	r6, r0
 800d372:	2500      	movs	r5, #0
 800d374:	2b01      	cmp	r3, #1
 800d376:	dc16      	bgt.n	800d3a6 <_dtoa_r+0x866>
 800d378:	2500      	movs	r5, #0
 800d37a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d37c:	42ab      	cmp	r3, r5
 800d37e:	d10e      	bne.n	800d39e <_dtoa_r+0x85e>
 800d380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d382:	031b      	lsls	r3, r3, #12
 800d384:	42ab      	cmp	r3, r5
 800d386:	d10a      	bne.n	800d39e <_dtoa_r+0x85e>
 800d388:	4b8d      	ldr	r3, [pc, #564]	@ (800d5c0 <_dtoa_r+0xa80>)
 800d38a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d38c:	4213      	tst	r3, r2
 800d38e:	d006      	beq.n	800d39e <_dtoa_r+0x85e>
 800d390:	9b06      	ldr	r3, [sp, #24]
 800d392:	3501      	adds	r5, #1
 800d394:	3301      	adds	r3, #1
 800d396:	9306      	str	r3, [sp, #24]
 800d398:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d39a:	3301      	adds	r3, #1
 800d39c:	930d      	str	r3, [sp, #52]	@ 0x34
 800d39e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d3a0:	2001      	movs	r0, #1
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d008      	beq.n	800d3b8 <_dtoa_r+0x878>
 800d3a6:	6933      	ldr	r3, [r6, #16]
 800d3a8:	3303      	adds	r3, #3
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	18f3      	adds	r3, r6, r3
 800d3ae:	6858      	ldr	r0, [r3, #4]
 800d3b0:	f000 fbb8 	bl	800db24 <__hi0bits>
 800d3b4:	2320      	movs	r3, #32
 800d3b6:	1a18      	subs	r0, r3, r0
 800d3b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d3ba:	1818      	adds	r0, r3, r0
 800d3bc:	0002      	movs	r2, r0
 800d3be:	231f      	movs	r3, #31
 800d3c0:	401a      	ands	r2, r3
 800d3c2:	4218      	tst	r0, r3
 800d3c4:	d065      	beq.n	800d492 <_dtoa_r+0x952>
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	1a9b      	subs	r3, r3, r2
 800d3ca:	2b04      	cmp	r3, #4
 800d3cc:	dd5d      	ble.n	800d48a <_dtoa_r+0x94a>
 800d3ce:	231c      	movs	r3, #28
 800d3d0:	1a9b      	subs	r3, r3, r2
 800d3d2:	9a06      	ldr	r2, [sp, #24]
 800d3d4:	18e4      	adds	r4, r4, r3
 800d3d6:	18d2      	adds	r2, r2, r3
 800d3d8:	9206      	str	r2, [sp, #24]
 800d3da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3dc:	18d3      	adds	r3, r2, r3
 800d3de:	930d      	str	r3, [sp, #52]	@ 0x34
 800d3e0:	9b06      	ldr	r3, [sp, #24]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	dd05      	ble.n	800d3f2 <_dtoa_r+0x8b2>
 800d3e6:	001a      	movs	r2, r3
 800d3e8:	9905      	ldr	r1, [sp, #20]
 800d3ea:	9803      	ldr	r0, [sp, #12]
 800d3ec:	f000 fd10 	bl	800de10 <__lshift>
 800d3f0:	9005      	str	r0, [sp, #20]
 800d3f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	dd05      	ble.n	800d404 <_dtoa_r+0x8c4>
 800d3f8:	0031      	movs	r1, r6
 800d3fa:	001a      	movs	r2, r3
 800d3fc:	9803      	ldr	r0, [sp, #12]
 800d3fe:	f000 fd07 	bl	800de10 <__lshift>
 800d402:	0006      	movs	r6, r0
 800d404:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d406:	2b00      	cmp	r3, #0
 800d408:	d045      	beq.n	800d496 <_dtoa_r+0x956>
 800d40a:	0031      	movs	r1, r6
 800d40c:	9805      	ldr	r0, [sp, #20]
 800d40e:	f000 fd6b 	bl	800dee8 <__mcmp>
 800d412:	2800      	cmp	r0, #0
 800d414:	da3f      	bge.n	800d496 <_dtoa_r+0x956>
 800d416:	9b04      	ldr	r3, [sp, #16]
 800d418:	220a      	movs	r2, #10
 800d41a:	3b01      	subs	r3, #1
 800d41c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d41e:	9905      	ldr	r1, [sp, #20]
 800d420:	2300      	movs	r3, #0
 800d422:	9803      	ldr	r0, [sp, #12]
 800d424:	f000 faee 	bl	800da04 <__multadd>
 800d428:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d42a:	9005      	str	r0, [sp, #20]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d100      	bne.n	800d432 <_dtoa_r+0x8f2>
 800d430:	e15c      	b.n	800d6ec <_dtoa_r+0xbac>
 800d432:	2300      	movs	r3, #0
 800d434:	0039      	movs	r1, r7
 800d436:	220a      	movs	r2, #10
 800d438:	9803      	ldr	r0, [sp, #12]
 800d43a:	f000 fae3 	bl	800da04 <__multadd>
 800d43e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d440:	0007      	movs	r7, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	dc55      	bgt.n	800d4f2 <_dtoa_r+0x9b2>
 800d446:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d448:	2b02      	cmp	r3, #2
 800d44a:	dc2d      	bgt.n	800d4a8 <_dtoa_r+0x968>
 800d44c:	e051      	b.n	800d4f2 <_dtoa_r+0x9b2>
 800d44e:	2336      	movs	r3, #54	@ 0x36
 800d450:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d452:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d454:	9c06      	ldr	r4, [sp, #24]
 800d456:	1a9b      	subs	r3, r3, r2
 800d458:	e73c      	b.n	800d2d4 <_dtoa_r+0x794>
 800d45a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d45c:	1e5d      	subs	r5, r3, #1
 800d45e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d460:	42ab      	cmp	r3, r5
 800d462:	db08      	blt.n	800d476 <_dtoa_r+0x936>
 800d464:	1b5d      	subs	r5, r3, r5
 800d466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d468:	9c06      	ldr	r4, [sp, #24]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	db00      	blt.n	800d470 <_dtoa_r+0x930>
 800d46e:	e731      	b.n	800d2d4 <_dtoa_r+0x794>
 800d470:	1ae4      	subs	r4, r4, r3
 800d472:	2300      	movs	r3, #0
 800d474:	e72e      	b.n	800d2d4 <_dtoa_r+0x794>
 800d476:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d478:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d47a:	1aeb      	subs	r3, r5, r3
 800d47c:	18d3      	adds	r3, r2, r3
 800d47e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800d480:	9314      	str	r3, [sp, #80]	@ 0x50
 800d482:	2500      	movs	r5, #0
 800d484:	e7ef      	b.n	800d466 <_dtoa_r+0x926>
 800d486:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d488:	e75e      	b.n	800d348 <_dtoa_r+0x808>
 800d48a:	2b04      	cmp	r3, #4
 800d48c:	d0a8      	beq.n	800d3e0 <_dtoa_r+0x8a0>
 800d48e:	331c      	adds	r3, #28
 800d490:	e79f      	b.n	800d3d2 <_dtoa_r+0x892>
 800d492:	0013      	movs	r3, r2
 800d494:	e7fb      	b.n	800d48e <_dtoa_r+0x94e>
 800d496:	9b04      	ldr	r3, [sp, #16]
 800d498:	930c      	str	r3, [sp, #48]	@ 0x30
 800d49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d49c:	930e      	str	r3, [sp, #56]	@ 0x38
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	dc23      	bgt.n	800d4ea <_dtoa_r+0x9aa>
 800d4a2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	dd20      	ble.n	800d4ea <_dtoa_r+0x9aa>
 800d4a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d000      	beq.n	800d4b0 <_dtoa_r+0x970>
 800d4ae:	e6b5      	b.n	800d21c <_dtoa_r+0x6dc>
 800d4b0:	0031      	movs	r1, r6
 800d4b2:	2205      	movs	r2, #5
 800d4b4:	9803      	ldr	r0, [sp, #12]
 800d4b6:	f000 faa5 	bl	800da04 <__multadd>
 800d4ba:	0006      	movs	r6, r0
 800d4bc:	0001      	movs	r1, r0
 800d4be:	9805      	ldr	r0, [sp, #20]
 800d4c0:	f000 fd12 	bl	800dee8 <__mcmp>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	dc00      	bgt.n	800d4ca <_dtoa_r+0x98a>
 800d4c8:	e6a8      	b.n	800d21c <_dtoa_r+0x6dc>
 800d4ca:	9b08      	ldr	r3, [sp, #32]
 800d4cc:	9a08      	ldr	r2, [sp, #32]
 800d4ce:	1c5c      	adds	r4, r3, #1
 800d4d0:	2331      	movs	r3, #49	@ 0x31
 800d4d2:	7013      	strb	r3, [r2, #0]
 800d4d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4da:	e6a3      	b.n	800d224 <_dtoa_r+0x6e4>
 800d4dc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800d4de:	0037      	movs	r7, r6
 800d4e0:	e7f3      	b.n	800d4ca <_dtoa_r+0x98a>
 800d4e2:	9b04      	ldr	r3, [sp, #16]
 800d4e4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800d4e6:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4e8:	e7f9      	b.n	800d4de <_dtoa_r+0x99e>
 800d4ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d100      	bne.n	800d4f2 <_dtoa_r+0x9b2>
 800d4f0:	e100      	b.n	800d6f4 <_dtoa_r+0xbb4>
 800d4f2:	2c00      	cmp	r4, #0
 800d4f4:	dd05      	ble.n	800d502 <_dtoa_r+0x9c2>
 800d4f6:	0039      	movs	r1, r7
 800d4f8:	0022      	movs	r2, r4
 800d4fa:	9803      	ldr	r0, [sp, #12]
 800d4fc:	f000 fc88 	bl	800de10 <__lshift>
 800d500:	0007      	movs	r7, r0
 800d502:	0038      	movs	r0, r7
 800d504:	2d00      	cmp	r5, #0
 800d506:	d018      	beq.n	800d53a <_dtoa_r+0x9fa>
 800d508:	6879      	ldr	r1, [r7, #4]
 800d50a:	9803      	ldr	r0, [sp, #12]
 800d50c:	f000 fa12 	bl	800d934 <_Balloc>
 800d510:	1e04      	subs	r4, r0, #0
 800d512:	d105      	bne.n	800d520 <_dtoa_r+0x9e0>
 800d514:	0022      	movs	r2, r4
 800d516:	4b2b      	ldr	r3, [pc, #172]	@ (800d5c4 <_dtoa_r+0xa84>)
 800d518:	482b      	ldr	r0, [pc, #172]	@ (800d5c8 <_dtoa_r+0xa88>)
 800d51a:	492c      	ldr	r1, [pc, #176]	@ (800d5cc <_dtoa_r+0xa8c>)
 800d51c:	f7ff fb25 	bl	800cb6a <_dtoa_r+0x2a>
 800d520:	0039      	movs	r1, r7
 800d522:	693a      	ldr	r2, [r7, #16]
 800d524:	310c      	adds	r1, #12
 800d526:	3202      	adds	r2, #2
 800d528:	0092      	lsls	r2, r2, #2
 800d52a:	300c      	adds	r0, #12
 800d52c:	f001 ff24 	bl	800f378 <memcpy>
 800d530:	2201      	movs	r2, #1
 800d532:	0021      	movs	r1, r4
 800d534:	9803      	ldr	r0, [sp, #12]
 800d536:	f000 fc6b 	bl	800de10 <__lshift>
 800d53a:	9b08      	ldr	r3, [sp, #32]
 800d53c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d53e:	9306      	str	r3, [sp, #24]
 800d540:	3b01      	subs	r3, #1
 800d542:	189b      	adds	r3, r3, r2
 800d544:	2201      	movs	r2, #1
 800d546:	9704      	str	r7, [sp, #16]
 800d548:	0007      	movs	r7, r0
 800d54a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d54c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d54e:	4013      	ands	r3, r2
 800d550:	930e      	str	r3, [sp, #56]	@ 0x38
 800d552:	0031      	movs	r1, r6
 800d554:	9805      	ldr	r0, [sp, #20]
 800d556:	f7ff fa65 	bl	800ca24 <quorem>
 800d55a:	9904      	ldr	r1, [sp, #16]
 800d55c:	0005      	movs	r5, r0
 800d55e:	900a      	str	r0, [sp, #40]	@ 0x28
 800d560:	9805      	ldr	r0, [sp, #20]
 800d562:	f000 fcc1 	bl	800dee8 <__mcmp>
 800d566:	003a      	movs	r2, r7
 800d568:	900d      	str	r0, [sp, #52]	@ 0x34
 800d56a:	0031      	movs	r1, r6
 800d56c:	9803      	ldr	r0, [sp, #12]
 800d56e:	f000 fcd7 	bl	800df20 <__mdiff>
 800d572:	2201      	movs	r2, #1
 800d574:	68c3      	ldr	r3, [r0, #12]
 800d576:	0004      	movs	r4, r0
 800d578:	3530      	adds	r5, #48	@ 0x30
 800d57a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d104      	bne.n	800d58a <_dtoa_r+0xa4a>
 800d580:	0001      	movs	r1, r0
 800d582:	9805      	ldr	r0, [sp, #20]
 800d584:	f000 fcb0 	bl	800dee8 <__mcmp>
 800d588:	9009      	str	r0, [sp, #36]	@ 0x24
 800d58a:	0021      	movs	r1, r4
 800d58c:	9803      	ldr	r0, [sp, #12]
 800d58e:	f000 fa15 	bl	800d9bc <_Bfree>
 800d592:	9b06      	ldr	r3, [sp, #24]
 800d594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d596:	1c5c      	adds	r4, r3, #1
 800d598:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d59a:	4313      	orrs	r3, r2
 800d59c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	d116      	bne.n	800d5d0 <_dtoa_r+0xa90>
 800d5a2:	2d39      	cmp	r5, #57	@ 0x39
 800d5a4:	d02f      	beq.n	800d606 <_dtoa_r+0xac6>
 800d5a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	dd01      	ble.n	800d5b0 <_dtoa_r+0xa70>
 800d5ac:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800d5ae:	3531      	adds	r5, #49	@ 0x31
 800d5b0:	9b06      	ldr	r3, [sp, #24]
 800d5b2:	701d      	strb	r5, [r3, #0]
 800d5b4:	e638      	b.n	800d228 <_dtoa_r+0x6e8>
 800d5b6:	46c0      	nop			@ (mov r8, r8)
 800d5b8:	40240000 	.word	0x40240000
 800d5bc:	00000433 	.word	0x00000433
 800d5c0:	7ff00000 	.word	0x7ff00000
 800d5c4:	0801097e 	.word	0x0801097e
 800d5c8:	08010926 	.word	0x08010926
 800d5cc:	000002ef 	.word	0x000002ef
 800d5d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	db04      	blt.n	800d5e0 <_dtoa_r+0xaa0>
 800d5d6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	d11e      	bne.n	800d61e <_dtoa_r+0xade>
 800d5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	dde4      	ble.n	800d5b0 <_dtoa_r+0xa70>
 800d5e6:	9905      	ldr	r1, [sp, #20]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	9803      	ldr	r0, [sp, #12]
 800d5ec:	f000 fc10 	bl	800de10 <__lshift>
 800d5f0:	0031      	movs	r1, r6
 800d5f2:	9005      	str	r0, [sp, #20]
 800d5f4:	f000 fc78 	bl	800dee8 <__mcmp>
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	dc02      	bgt.n	800d602 <_dtoa_r+0xac2>
 800d5fc:	d1d8      	bne.n	800d5b0 <_dtoa_r+0xa70>
 800d5fe:	07eb      	lsls	r3, r5, #31
 800d600:	d5d6      	bpl.n	800d5b0 <_dtoa_r+0xa70>
 800d602:	2d39      	cmp	r5, #57	@ 0x39
 800d604:	d1d2      	bne.n	800d5ac <_dtoa_r+0xa6c>
 800d606:	2339      	movs	r3, #57	@ 0x39
 800d608:	9a06      	ldr	r2, [sp, #24]
 800d60a:	7013      	strb	r3, [r2, #0]
 800d60c:	0023      	movs	r3, r4
 800d60e:	001c      	movs	r4, r3
 800d610:	3b01      	subs	r3, #1
 800d612:	781a      	ldrb	r2, [r3, #0]
 800d614:	2a39      	cmp	r2, #57	@ 0x39
 800d616:	d04f      	beq.n	800d6b8 <_dtoa_r+0xb78>
 800d618:	3201      	adds	r2, #1
 800d61a:	701a      	strb	r2, [r3, #0]
 800d61c:	e604      	b.n	800d228 <_dtoa_r+0x6e8>
 800d61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d620:	2b00      	cmp	r3, #0
 800d622:	dd03      	ble.n	800d62c <_dtoa_r+0xaec>
 800d624:	2d39      	cmp	r5, #57	@ 0x39
 800d626:	d0ee      	beq.n	800d606 <_dtoa_r+0xac6>
 800d628:	3501      	adds	r5, #1
 800d62a:	e7c1      	b.n	800d5b0 <_dtoa_r+0xa70>
 800d62c:	9b06      	ldr	r3, [sp, #24]
 800d62e:	9a06      	ldr	r2, [sp, #24]
 800d630:	701d      	strb	r5, [r3, #0]
 800d632:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d634:	4293      	cmp	r3, r2
 800d636:	d02a      	beq.n	800d68e <_dtoa_r+0xb4e>
 800d638:	2300      	movs	r3, #0
 800d63a:	220a      	movs	r2, #10
 800d63c:	9905      	ldr	r1, [sp, #20]
 800d63e:	9803      	ldr	r0, [sp, #12]
 800d640:	f000 f9e0 	bl	800da04 <__multadd>
 800d644:	9b04      	ldr	r3, [sp, #16]
 800d646:	9005      	str	r0, [sp, #20]
 800d648:	42bb      	cmp	r3, r7
 800d64a:	d109      	bne.n	800d660 <_dtoa_r+0xb20>
 800d64c:	2300      	movs	r3, #0
 800d64e:	220a      	movs	r2, #10
 800d650:	9904      	ldr	r1, [sp, #16]
 800d652:	9803      	ldr	r0, [sp, #12]
 800d654:	f000 f9d6 	bl	800da04 <__multadd>
 800d658:	9004      	str	r0, [sp, #16]
 800d65a:	0007      	movs	r7, r0
 800d65c:	9406      	str	r4, [sp, #24]
 800d65e:	e778      	b.n	800d552 <_dtoa_r+0xa12>
 800d660:	9904      	ldr	r1, [sp, #16]
 800d662:	2300      	movs	r3, #0
 800d664:	220a      	movs	r2, #10
 800d666:	9803      	ldr	r0, [sp, #12]
 800d668:	f000 f9cc 	bl	800da04 <__multadd>
 800d66c:	2300      	movs	r3, #0
 800d66e:	9004      	str	r0, [sp, #16]
 800d670:	220a      	movs	r2, #10
 800d672:	0039      	movs	r1, r7
 800d674:	9803      	ldr	r0, [sp, #12]
 800d676:	f000 f9c5 	bl	800da04 <__multadd>
 800d67a:	e7ee      	b.n	800d65a <_dtoa_r+0xb1a>
 800d67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d67e:	2401      	movs	r4, #1
 800d680:	2b00      	cmp	r3, #0
 800d682:	dd00      	ble.n	800d686 <_dtoa_r+0xb46>
 800d684:	001c      	movs	r4, r3
 800d686:	9b08      	ldr	r3, [sp, #32]
 800d688:	191c      	adds	r4, r3, r4
 800d68a:	2300      	movs	r3, #0
 800d68c:	9304      	str	r3, [sp, #16]
 800d68e:	9905      	ldr	r1, [sp, #20]
 800d690:	2201      	movs	r2, #1
 800d692:	9803      	ldr	r0, [sp, #12]
 800d694:	f000 fbbc 	bl	800de10 <__lshift>
 800d698:	0031      	movs	r1, r6
 800d69a:	9005      	str	r0, [sp, #20]
 800d69c:	f000 fc24 	bl	800dee8 <__mcmp>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	dcb3      	bgt.n	800d60c <_dtoa_r+0xacc>
 800d6a4:	d101      	bne.n	800d6aa <_dtoa_r+0xb6a>
 800d6a6:	07ed      	lsls	r5, r5, #31
 800d6a8:	d4b0      	bmi.n	800d60c <_dtoa_r+0xacc>
 800d6aa:	0023      	movs	r3, r4
 800d6ac:	001c      	movs	r4, r3
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	781a      	ldrb	r2, [r3, #0]
 800d6b2:	2a30      	cmp	r2, #48	@ 0x30
 800d6b4:	d0fa      	beq.n	800d6ac <_dtoa_r+0xb6c>
 800d6b6:	e5b7      	b.n	800d228 <_dtoa_r+0x6e8>
 800d6b8:	9a08      	ldr	r2, [sp, #32]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d1a7      	bne.n	800d60e <_dtoa_r+0xace>
 800d6be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	930c      	str	r3, [sp, #48]	@ 0x30
 800d6c4:	2331      	movs	r3, #49	@ 0x31
 800d6c6:	7013      	strb	r3, [r2, #0]
 800d6c8:	e5ae      	b.n	800d228 <_dtoa_r+0x6e8>
 800d6ca:	4b15      	ldr	r3, [pc, #84]	@ (800d720 <_dtoa_r+0xbe0>)
 800d6cc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d6ce:	9308      	str	r3, [sp, #32]
 800d6d0:	4b14      	ldr	r3, [pc, #80]	@ (800d724 <_dtoa_r+0xbe4>)
 800d6d2:	2a00      	cmp	r2, #0
 800d6d4:	d001      	beq.n	800d6da <_dtoa_r+0xb9a>
 800d6d6:	f7ff fa7b 	bl	800cbd0 <_dtoa_r+0x90>
 800d6da:	f7ff fa7b 	bl	800cbd4 <_dtoa_r+0x94>
 800d6de:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	dc00      	bgt.n	800d6e6 <_dtoa_r+0xba6>
 800d6e4:	e648      	b.n	800d378 <_dtoa_r+0x838>
 800d6e6:	2001      	movs	r0, #1
 800d6e8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d6ea:	e665      	b.n	800d3b8 <_dtoa_r+0x878>
 800d6ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	dc00      	bgt.n	800d6f4 <_dtoa_r+0xbb4>
 800d6f2:	e6d6      	b.n	800d4a2 <_dtoa_r+0x962>
 800d6f4:	2400      	movs	r4, #0
 800d6f6:	0031      	movs	r1, r6
 800d6f8:	9805      	ldr	r0, [sp, #20]
 800d6fa:	f7ff f993 	bl	800ca24 <quorem>
 800d6fe:	9b08      	ldr	r3, [sp, #32]
 800d700:	3030      	adds	r0, #48	@ 0x30
 800d702:	5518      	strb	r0, [r3, r4]
 800d704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d706:	3401      	adds	r4, #1
 800d708:	0005      	movs	r5, r0
 800d70a:	429c      	cmp	r4, r3
 800d70c:	dab6      	bge.n	800d67c <_dtoa_r+0xb3c>
 800d70e:	2300      	movs	r3, #0
 800d710:	220a      	movs	r2, #10
 800d712:	9905      	ldr	r1, [sp, #20]
 800d714:	9803      	ldr	r0, [sp, #12]
 800d716:	f000 f975 	bl	800da04 <__multadd>
 800d71a:	9005      	str	r0, [sp, #20]
 800d71c:	e7eb      	b.n	800d6f6 <_dtoa_r+0xbb6>
 800d71e:	46c0      	nop			@ (mov r8, r8)
 800d720:	08010902 	.word	0x08010902
 800d724:	0801090a 	.word	0x0801090a

0800d728 <_free_r>:
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	0005      	movs	r5, r0
 800d72c:	1e0c      	subs	r4, r1, #0
 800d72e:	d010      	beq.n	800d752 <_free_r+0x2a>
 800d730:	3c04      	subs	r4, #4
 800d732:	6823      	ldr	r3, [r4, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	da00      	bge.n	800d73a <_free_r+0x12>
 800d738:	18e4      	adds	r4, r4, r3
 800d73a:	0028      	movs	r0, r5
 800d73c:	f000 f8ea 	bl	800d914 <__malloc_lock>
 800d740:	4a1d      	ldr	r2, [pc, #116]	@ (800d7b8 <_free_r+0x90>)
 800d742:	6813      	ldr	r3, [r2, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d105      	bne.n	800d754 <_free_r+0x2c>
 800d748:	6063      	str	r3, [r4, #4]
 800d74a:	6014      	str	r4, [r2, #0]
 800d74c:	0028      	movs	r0, r5
 800d74e:	f000 f8e9 	bl	800d924 <__malloc_unlock>
 800d752:	bd70      	pop	{r4, r5, r6, pc}
 800d754:	42a3      	cmp	r3, r4
 800d756:	d908      	bls.n	800d76a <_free_r+0x42>
 800d758:	6820      	ldr	r0, [r4, #0]
 800d75a:	1821      	adds	r1, r4, r0
 800d75c:	428b      	cmp	r3, r1
 800d75e:	d1f3      	bne.n	800d748 <_free_r+0x20>
 800d760:	6819      	ldr	r1, [r3, #0]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	1809      	adds	r1, r1, r0
 800d766:	6021      	str	r1, [r4, #0]
 800d768:	e7ee      	b.n	800d748 <_free_r+0x20>
 800d76a:	001a      	movs	r2, r3
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d001      	beq.n	800d776 <_free_r+0x4e>
 800d772:	42a3      	cmp	r3, r4
 800d774:	d9f9      	bls.n	800d76a <_free_r+0x42>
 800d776:	6811      	ldr	r1, [r2, #0]
 800d778:	1850      	adds	r0, r2, r1
 800d77a:	42a0      	cmp	r0, r4
 800d77c:	d10b      	bne.n	800d796 <_free_r+0x6e>
 800d77e:	6820      	ldr	r0, [r4, #0]
 800d780:	1809      	adds	r1, r1, r0
 800d782:	1850      	adds	r0, r2, r1
 800d784:	6011      	str	r1, [r2, #0]
 800d786:	4283      	cmp	r3, r0
 800d788:	d1e0      	bne.n	800d74c <_free_r+0x24>
 800d78a:	6818      	ldr	r0, [r3, #0]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	1841      	adds	r1, r0, r1
 800d790:	6011      	str	r1, [r2, #0]
 800d792:	6053      	str	r3, [r2, #4]
 800d794:	e7da      	b.n	800d74c <_free_r+0x24>
 800d796:	42a0      	cmp	r0, r4
 800d798:	d902      	bls.n	800d7a0 <_free_r+0x78>
 800d79a:	230c      	movs	r3, #12
 800d79c:	602b      	str	r3, [r5, #0]
 800d79e:	e7d5      	b.n	800d74c <_free_r+0x24>
 800d7a0:	6820      	ldr	r0, [r4, #0]
 800d7a2:	1821      	adds	r1, r4, r0
 800d7a4:	428b      	cmp	r3, r1
 800d7a6:	d103      	bne.n	800d7b0 <_free_r+0x88>
 800d7a8:	6819      	ldr	r1, [r3, #0]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	1809      	adds	r1, r1, r0
 800d7ae:	6021      	str	r1, [r4, #0]
 800d7b0:	6063      	str	r3, [r4, #4]
 800d7b2:	6054      	str	r4, [r2, #4]
 800d7b4:	e7ca      	b.n	800d74c <_free_r+0x24>
 800d7b6:	46c0      	nop			@ (mov r8, r8)
 800d7b8:	20000704 	.word	0x20000704

0800d7bc <malloc>:
 800d7bc:	b510      	push	{r4, lr}
 800d7be:	4b03      	ldr	r3, [pc, #12]	@ (800d7cc <malloc+0x10>)
 800d7c0:	0001      	movs	r1, r0
 800d7c2:	6818      	ldr	r0, [r3, #0]
 800d7c4:	f000 f826 	bl	800d814 <_malloc_r>
 800d7c8:	bd10      	pop	{r4, pc}
 800d7ca:	46c0      	nop			@ (mov r8, r8)
 800d7cc:	20000030 	.word	0x20000030

0800d7d0 <sbrk_aligned>:
 800d7d0:	b570      	push	{r4, r5, r6, lr}
 800d7d2:	4e0f      	ldr	r6, [pc, #60]	@ (800d810 <sbrk_aligned+0x40>)
 800d7d4:	000d      	movs	r5, r1
 800d7d6:	6831      	ldr	r1, [r6, #0]
 800d7d8:	0004      	movs	r4, r0
 800d7da:	2900      	cmp	r1, #0
 800d7dc:	d102      	bne.n	800d7e4 <sbrk_aligned+0x14>
 800d7de:	f001 fdb9 	bl	800f354 <_sbrk_r>
 800d7e2:	6030      	str	r0, [r6, #0]
 800d7e4:	0029      	movs	r1, r5
 800d7e6:	0020      	movs	r0, r4
 800d7e8:	f001 fdb4 	bl	800f354 <_sbrk_r>
 800d7ec:	1c43      	adds	r3, r0, #1
 800d7ee:	d103      	bne.n	800d7f8 <sbrk_aligned+0x28>
 800d7f0:	2501      	movs	r5, #1
 800d7f2:	426d      	negs	r5, r5
 800d7f4:	0028      	movs	r0, r5
 800d7f6:	bd70      	pop	{r4, r5, r6, pc}
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	1cc5      	adds	r5, r0, #3
 800d7fc:	439d      	bics	r5, r3
 800d7fe:	42a8      	cmp	r0, r5
 800d800:	d0f8      	beq.n	800d7f4 <sbrk_aligned+0x24>
 800d802:	1a29      	subs	r1, r5, r0
 800d804:	0020      	movs	r0, r4
 800d806:	f001 fda5 	bl	800f354 <_sbrk_r>
 800d80a:	3001      	adds	r0, #1
 800d80c:	d1f2      	bne.n	800d7f4 <sbrk_aligned+0x24>
 800d80e:	e7ef      	b.n	800d7f0 <sbrk_aligned+0x20>
 800d810:	20000700 	.word	0x20000700

0800d814 <_malloc_r>:
 800d814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d816:	2203      	movs	r2, #3
 800d818:	1ccb      	adds	r3, r1, #3
 800d81a:	4393      	bics	r3, r2
 800d81c:	3308      	adds	r3, #8
 800d81e:	0005      	movs	r5, r0
 800d820:	001f      	movs	r7, r3
 800d822:	2b0c      	cmp	r3, #12
 800d824:	d234      	bcs.n	800d890 <_malloc_r+0x7c>
 800d826:	270c      	movs	r7, #12
 800d828:	42b9      	cmp	r1, r7
 800d82a:	d833      	bhi.n	800d894 <_malloc_r+0x80>
 800d82c:	0028      	movs	r0, r5
 800d82e:	f000 f871 	bl	800d914 <__malloc_lock>
 800d832:	4e37      	ldr	r6, [pc, #220]	@ (800d910 <_malloc_r+0xfc>)
 800d834:	6833      	ldr	r3, [r6, #0]
 800d836:	001c      	movs	r4, r3
 800d838:	2c00      	cmp	r4, #0
 800d83a:	d12f      	bne.n	800d89c <_malloc_r+0x88>
 800d83c:	0039      	movs	r1, r7
 800d83e:	0028      	movs	r0, r5
 800d840:	f7ff ffc6 	bl	800d7d0 <sbrk_aligned>
 800d844:	0004      	movs	r4, r0
 800d846:	1c43      	adds	r3, r0, #1
 800d848:	d15f      	bne.n	800d90a <_malloc_r+0xf6>
 800d84a:	6834      	ldr	r4, [r6, #0]
 800d84c:	9400      	str	r4, [sp, #0]
 800d84e:	9b00      	ldr	r3, [sp, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d14a      	bne.n	800d8ea <_malloc_r+0xd6>
 800d854:	2c00      	cmp	r4, #0
 800d856:	d052      	beq.n	800d8fe <_malloc_r+0xea>
 800d858:	6823      	ldr	r3, [r4, #0]
 800d85a:	0028      	movs	r0, r5
 800d85c:	18e3      	adds	r3, r4, r3
 800d85e:	9900      	ldr	r1, [sp, #0]
 800d860:	9301      	str	r3, [sp, #4]
 800d862:	f001 fd77 	bl	800f354 <_sbrk_r>
 800d866:	9b01      	ldr	r3, [sp, #4]
 800d868:	4283      	cmp	r3, r0
 800d86a:	d148      	bne.n	800d8fe <_malloc_r+0xea>
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	0028      	movs	r0, r5
 800d870:	1aff      	subs	r7, r7, r3
 800d872:	0039      	movs	r1, r7
 800d874:	f7ff ffac 	bl	800d7d0 <sbrk_aligned>
 800d878:	3001      	adds	r0, #1
 800d87a:	d040      	beq.n	800d8fe <_malloc_r+0xea>
 800d87c:	6823      	ldr	r3, [r4, #0]
 800d87e:	19db      	adds	r3, r3, r7
 800d880:	6023      	str	r3, [r4, #0]
 800d882:	6833      	ldr	r3, [r6, #0]
 800d884:	685a      	ldr	r2, [r3, #4]
 800d886:	2a00      	cmp	r2, #0
 800d888:	d133      	bne.n	800d8f2 <_malloc_r+0xde>
 800d88a:	9b00      	ldr	r3, [sp, #0]
 800d88c:	6033      	str	r3, [r6, #0]
 800d88e:	e019      	b.n	800d8c4 <_malloc_r+0xb0>
 800d890:	2b00      	cmp	r3, #0
 800d892:	dac9      	bge.n	800d828 <_malloc_r+0x14>
 800d894:	230c      	movs	r3, #12
 800d896:	602b      	str	r3, [r5, #0]
 800d898:	2000      	movs	r0, #0
 800d89a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d89c:	6821      	ldr	r1, [r4, #0]
 800d89e:	1bc9      	subs	r1, r1, r7
 800d8a0:	d420      	bmi.n	800d8e4 <_malloc_r+0xd0>
 800d8a2:	290b      	cmp	r1, #11
 800d8a4:	d90a      	bls.n	800d8bc <_malloc_r+0xa8>
 800d8a6:	19e2      	adds	r2, r4, r7
 800d8a8:	6027      	str	r7, [r4, #0]
 800d8aa:	42a3      	cmp	r3, r4
 800d8ac:	d104      	bne.n	800d8b8 <_malloc_r+0xa4>
 800d8ae:	6032      	str	r2, [r6, #0]
 800d8b0:	6863      	ldr	r3, [r4, #4]
 800d8b2:	6011      	str	r1, [r2, #0]
 800d8b4:	6053      	str	r3, [r2, #4]
 800d8b6:	e005      	b.n	800d8c4 <_malloc_r+0xb0>
 800d8b8:	605a      	str	r2, [r3, #4]
 800d8ba:	e7f9      	b.n	800d8b0 <_malloc_r+0x9c>
 800d8bc:	6862      	ldr	r2, [r4, #4]
 800d8be:	42a3      	cmp	r3, r4
 800d8c0:	d10e      	bne.n	800d8e0 <_malloc_r+0xcc>
 800d8c2:	6032      	str	r2, [r6, #0]
 800d8c4:	0028      	movs	r0, r5
 800d8c6:	f000 f82d 	bl	800d924 <__malloc_unlock>
 800d8ca:	0020      	movs	r0, r4
 800d8cc:	2207      	movs	r2, #7
 800d8ce:	300b      	adds	r0, #11
 800d8d0:	1d23      	adds	r3, r4, #4
 800d8d2:	4390      	bics	r0, r2
 800d8d4:	1ac2      	subs	r2, r0, r3
 800d8d6:	4298      	cmp	r0, r3
 800d8d8:	d0df      	beq.n	800d89a <_malloc_r+0x86>
 800d8da:	1a1b      	subs	r3, r3, r0
 800d8dc:	50a3      	str	r3, [r4, r2]
 800d8de:	e7dc      	b.n	800d89a <_malloc_r+0x86>
 800d8e0:	605a      	str	r2, [r3, #4]
 800d8e2:	e7ef      	b.n	800d8c4 <_malloc_r+0xb0>
 800d8e4:	0023      	movs	r3, r4
 800d8e6:	6864      	ldr	r4, [r4, #4]
 800d8e8:	e7a6      	b.n	800d838 <_malloc_r+0x24>
 800d8ea:	9c00      	ldr	r4, [sp, #0]
 800d8ec:	6863      	ldr	r3, [r4, #4]
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	e7ad      	b.n	800d84e <_malloc_r+0x3a>
 800d8f2:	001a      	movs	r2, r3
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	42a3      	cmp	r3, r4
 800d8f8:	d1fb      	bne.n	800d8f2 <_malloc_r+0xde>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	e7da      	b.n	800d8b4 <_malloc_r+0xa0>
 800d8fe:	230c      	movs	r3, #12
 800d900:	0028      	movs	r0, r5
 800d902:	602b      	str	r3, [r5, #0]
 800d904:	f000 f80e 	bl	800d924 <__malloc_unlock>
 800d908:	e7c6      	b.n	800d898 <_malloc_r+0x84>
 800d90a:	6007      	str	r7, [r0, #0]
 800d90c:	e7da      	b.n	800d8c4 <_malloc_r+0xb0>
 800d90e:	46c0      	nop			@ (mov r8, r8)
 800d910:	20000704 	.word	0x20000704

0800d914 <__malloc_lock>:
 800d914:	b510      	push	{r4, lr}
 800d916:	4802      	ldr	r0, [pc, #8]	@ (800d920 <__malloc_lock+0xc>)
 800d918:	f7ff f873 	bl	800ca02 <__retarget_lock_acquire_recursive>
 800d91c:	bd10      	pop	{r4, pc}
 800d91e:	46c0      	nop			@ (mov r8, r8)
 800d920:	200006fc 	.word	0x200006fc

0800d924 <__malloc_unlock>:
 800d924:	b510      	push	{r4, lr}
 800d926:	4802      	ldr	r0, [pc, #8]	@ (800d930 <__malloc_unlock+0xc>)
 800d928:	f7ff f86c 	bl	800ca04 <__retarget_lock_release_recursive>
 800d92c:	bd10      	pop	{r4, pc}
 800d92e:	46c0      	nop			@ (mov r8, r8)
 800d930:	200006fc 	.word	0x200006fc

0800d934 <_Balloc>:
 800d934:	b570      	push	{r4, r5, r6, lr}
 800d936:	69c5      	ldr	r5, [r0, #28]
 800d938:	0006      	movs	r6, r0
 800d93a:	000c      	movs	r4, r1
 800d93c:	2d00      	cmp	r5, #0
 800d93e:	d10e      	bne.n	800d95e <_Balloc+0x2a>
 800d940:	2010      	movs	r0, #16
 800d942:	f7ff ff3b 	bl	800d7bc <malloc>
 800d946:	1e02      	subs	r2, r0, #0
 800d948:	61f0      	str	r0, [r6, #28]
 800d94a:	d104      	bne.n	800d956 <_Balloc+0x22>
 800d94c:	216b      	movs	r1, #107	@ 0x6b
 800d94e:	4b19      	ldr	r3, [pc, #100]	@ (800d9b4 <_Balloc+0x80>)
 800d950:	4819      	ldr	r0, [pc, #100]	@ (800d9b8 <_Balloc+0x84>)
 800d952:	f001 fd21 	bl	800f398 <__assert_func>
 800d956:	6045      	str	r5, [r0, #4]
 800d958:	6085      	str	r5, [r0, #8]
 800d95a:	6005      	str	r5, [r0, #0]
 800d95c:	60c5      	str	r5, [r0, #12]
 800d95e:	69f5      	ldr	r5, [r6, #28]
 800d960:	68eb      	ldr	r3, [r5, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d013      	beq.n	800d98e <_Balloc+0x5a>
 800d966:	69f3      	ldr	r3, [r6, #28]
 800d968:	00a2      	lsls	r2, r4, #2
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	189b      	adds	r3, r3, r2
 800d96e:	6818      	ldr	r0, [r3, #0]
 800d970:	2800      	cmp	r0, #0
 800d972:	d118      	bne.n	800d9a6 <_Balloc+0x72>
 800d974:	2101      	movs	r1, #1
 800d976:	000d      	movs	r5, r1
 800d978:	40a5      	lsls	r5, r4
 800d97a:	1d6a      	adds	r2, r5, #5
 800d97c:	0030      	movs	r0, r6
 800d97e:	0092      	lsls	r2, r2, #2
 800d980:	f001 fd28 	bl	800f3d4 <_calloc_r>
 800d984:	2800      	cmp	r0, #0
 800d986:	d00c      	beq.n	800d9a2 <_Balloc+0x6e>
 800d988:	6044      	str	r4, [r0, #4]
 800d98a:	6085      	str	r5, [r0, #8]
 800d98c:	e00d      	b.n	800d9aa <_Balloc+0x76>
 800d98e:	2221      	movs	r2, #33	@ 0x21
 800d990:	2104      	movs	r1, #4
 800d992:	0030      	movs	r0, r6
 800d994:	f001 fd1e 	bl	800f3d4 <_calloc_r>
 800d998:	69f3      	ldr	r3, [r6, #28]
 800d99a:	60e8      	str	r0, [r5, #12]
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1e1      	bne.n	800d966 <_Balloc+0x32>
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	bd70      	pop	{r4, r5, r6, pc}
 800d9a6:	6802      	ldr	r2, [r0, #0]
 800d9a8:	601a      	str	r2, [r3, #0]
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	6103      	str	r3, [r0, #16]
 800d9ae:	60c3      	str	r3, [r0, #12]
 800d9b0:	e7f8      	b.n	800d9a4 <_Balloc+0x70>
 800d9b2:	46c0      	nop			@ (mov r8, r8)
 800d9b4:	0801090f 	.word	0x0801090f
 800d9b8:	0801098f 	.word	0x0801098f

0800d9bc <_Bfree>:
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	69c6      	ldr	r6, [r0, #28]
 800d9c0:	0005      	movs	r5, r0
 800d9c2:	000c      	movs	r4, r1
 800d9c4:	2e00      	cmp	r6, #0
 800d9c6:	d10e      	bne.n	800d9e6 <_Bfree+0x2a>
 800d9c8:	2010      	movs	r0, #16
 800d9ca:	f7ff fef7 	bl	800d7bc <malloc>
 800d9ce:	1e02      	subs	r2, r0, #0
 800d9d0:	61e8      	str	r0, [r5, #28]
 800d9d2:	d104      	bne.n	800d9de <_Bfree+0x22>
 800d9d4:	218f      	movs	r1, #143	@ 0x8f
 800d9d6:	4b09      	ldr	r3, [pc, #36]	@ (800d9fc <_Bfree+0x40>)
 800d9d8:	4809      	ldr	r0, [pc, #36]	@ (800da00 <_Bfree+0x44>)
 800d9da:	f001 fcdd 	bl	800f398 <__assert_func>
 800d9de:	6046      	str	r6, [r0, #4]
 800d9e0:	6086      	str	r6, [r0, #8]
 800d9e2:	6006      	str	r6, [r0, #0]
 800d9e4:	60c6      	str	r6, [r0, #12]
 800d9e6:	2c00      	cmp	r4, #0
 800d9e8:	d007      	beq.n	800d9fa <_Bfree+0x3e>
 800d9ea:	69eb      	ldr	r3, [r5, #28]
 800d9ec:	6862      	ldr	r2, [r4, #4]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	0092      	lsls	r2, r2, #2
 800d9f2:	189b      	adds	r3, r3, r2
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	6022      	str	r2, [r4, #0]
 800d9f8:	601c      	str	r4, [r3, #0]
 800d9fa:	bd70      	pop	{r4, r5, r6, pc}
 800d9fc:	0801090f 	.word	0x0801090f
 800da00:	0801098f 	.word	0x0801098f

0800da04 <__multadd>:
 800da04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da06:	000f      	movs	r7, r1
 800da08:	9001      	str	r0, [sp, #4]
 800da0a:	000c      	movs	r4, r1
 800da0c:	001e      	movs	r6, r3
 800da0e:	2000      	movs	r0, #0
 800da10:	690d      	ldr	r5, [r1, #16]
 800da12:	3714      	adds	r7, #20
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	3001      	adds	r0, #1
 800da18:	b299      	uxth	r1, r3
 800da1a:	4351      	muls	r1, r2
 800da1c:	0c1b      	lsrs	r3, r3, #16
 800da1e:	4353      	muls	r3, r2
 800da20:	1989      	adds	r1, r1, r6
 800da22:	0c0e      	lsrs	r6, r1, #16
 800da24:	199b      	adds	r3, r3, r6
 800da26:	0c1e      	lsrs	r6, r3, #16
 800da28:	b289      	uxth	r1, r1
 800da2a:	041b      	lsls	r3, r3, #16
 800da2c:	185b      	adds	r3, r3, r1
 800da2e:	c708      	stmia	r7!, {r3}
 800da30:	4285      	cmp	r5, r0
 800da32:	dcef      	bgt.n	800da14 <__multadd+0x10>
 800da34:	2e00      	cmp	r6, #0
 800da36:	d022      	beq.n	800da7e <__multadd+0x7a>
 800da38:	68a3      	ldr	r3, [r4, #8]
 800da3a:	42ab      	cmp	r3, r5
 800da3c:	dc19      	bgt.n	800da72 <__multadd+0x6e>
 800da3e:	6861      	ldr	r1, [r4, #4]
 800da40:	9801      	ldr	r0, [sp, #4]
 800da42:	3101      	adds	r1, #1
 800da44:	f7ff ff76 	bl	800d934 <_Balloc>
 800da48:	1e07      	subs	r7, r0, #0
 800da4a:	d105      	bne.n	800da58 <__multadd+0x54>
 800da4c:	003a      	movs	r2, r7
 800da4e:	21ba      	movs	r1, #186	@ 0xba
 800da50:	4b0c      	ldr	r3, [pc, #48]	@ (800da84 <__multadd+0x80>)
 800da52:	480d      	ldr	r0, [pc, #52]	@ (800da88 <__multadd+0x84>)
 800da54:	f001 fca0 	bl	800f398 <__assert_func>
 800da58:	0021      	movs	r1, r4
 800da5a:	6922      	ldr	r2, [r4, #16]
 800da5c:	310c      	adds	r1, #12
 800da5e:	3202      	adds	r2, #2
 800da60:	0092      	lsls	r2, r2, #2
 800da62:	300c      	adds	r0, #12
 800da64:	f001 fc88 	bl	800f378 <memcpy>
 800da68:	0021      	movs	r1, r4
 800da6a:	9801      	ldr	r0, [sp, #4]
 800da6c:	f7ff ffa6 	bl	800d9bc <_Bfree>
 800da70:	003c      	movs	r4, r7
 800da72:	1d2b      	adds	r3, r5, #4
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	18e3      	adds	r3, r4, r3
 800da78:	3501      	adds	r5, #1
 800da7a:	605e      	str	r6, [r3, #4]
 800da7c:	6125      	str	r5, [r4, #16]
 800da7e:	0020      	movs	r0, r4
 800da80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800da82:	46c0      	nop			@ (mov r8, r8)
 800da84:	0801097e 	.word	0x0801097e
 800da88:	0801098f 	.word	0x0801098f

0800da8c <__s2b>:
 800da8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da8e:	0007      	movs	r7, r0
 800da90:	0018      	movs	r0, r3
 800da92:	000c      	movs	r4, r1
 800da94:	3008      	adds	r0, #8
 800da96:	2109      	movs	r1, #9
 800da98:	9301      	str	r3, [sp, #4]
 800da9a:	0015      	movs	r5, r2
 800da9c:	f7f2 fbda 	bl	8000254 <__divsi3>
 800daa0:	2301      	movs	r3, #1
 800daa2:	2100      	movs	r1, #0
 800daa4:	4283      	cmp	r3, r0
 800daa6:	db0a      	blt.n	800dabe <__s2b+0x32>
 800daa8:	0038      	movs	r0, r7
 800daaa:	f7ff ff43 	bl	800d934 <_Balloc>
 800daae:	1e01      	subs	r1, r0, #0
 800dab0:	d108      	bne.n	800dac4 <__s2b+0x38>
 800dab2:	000a      	movs	r2, r1
 800dab4:	4b19      	ldr	r3, [pc, #100]	@ (800db1c <__s2b+0x90>)
 800dab6:	481a      	ldr	r0, [pc, #104]	@ (800db20 <__s2b+0x94>)
 800dab8:	31d3      	adds	r1, #211	@ 0xd3
 800daba:	f001 fc6d 	bl	800f398 <__assert_func>
 800dabe:	005b      	lsls	r3, r3, #1
 800dac0:	3101      	adds	r1, #1
 800dac2:	e7ef      	b.n	800daa4 <__s2b+0x18>
 800dac4:	9b08      	ldr	r3, [sp, #32]
 800dac6:	6143      	str	r3, [r0, #20]
 800dac8:	2301      	movs	r3, #1
 800daca:	6103      	str	r3, [r0, #16]
 800dacc:	2d09      	cmp	r5, #9
 800dace:	dd18      	ble.n	800db02 <__s2b+0x76>
 800dad0:	0023      	movs	r3, r4
 800dad2:	3309      	adds	r3, #9
 800dad4:	001e      	movs	r6, r3
 800dad6:	9300      	str	r3, [sp, #0]
 800dad8:	1964      	adds	r4, r4, r5
 800dada:	7833      	ldrb	r3, [r6, #0]
 800dadc:	220a      	movs	r2, #10
 800dade:	0038      	movs	r0, r7
 800dae0:	3b30      	subs	r3, #48	@ 0x30
 800dae2:	f7ff ff8f 	bl	800da04 <__multadd>
 800dae6:	3601      	adds	r6, #1
 800dae8:	0001      	movs	r1, r0
 800daea:	42a6      	cmp	r6, r4
 800daec:	d1f5      	bne.n	800dada <__s2b+0x4e>
 800daee:	002c      	movs	r4, r5
 800daf0:	9b00      	ldr	r3, [sp, #0]
 800daf2:	3c08      	subs	r4, #8
 800daf4:	191c      	adds	r4, r3, r4
 800daf6:	002e      	movs	r6, r5
 800daf8:	9b01      	ldr	r3, [sp, #4]
 800dafa:	429e      	cmp	r6, r3
 800dafc:	db04      	blt.n	800db08 <__s2b+0x7c>
 800dafe:	0008      	movs	r0, r1
 800db00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db02:	2509      	movs	r5, #9
 800db04:	340a      	adds	r4, #10
 800db06:	e7f6      	b.n	800daf6 <__s2b+0x6a>
 800db08:	1b63      	subs	r3, r4, r5
 800db0a:	5d9b      	ldrb	r3, [r3, r6]
 800db0c:	220a      	movs	r2, #10
 800db0e:	0038      	movs	r0, r7
 800db10:	3b30      	subs	r3, #48	@ 0x30
 800db12:	f7ff ff77 	bl	800da04 <__multadd>
 800db16:	3601      	adds	r6, #1
 800db18:	0001      	movs	r1, r0
 800db1a:	e7ed      	b.n	800daf8 <__s2b+0x6c>
 800db1c:	0801097e 	.word	0x0801097e
 800db20:	0801098f 	.word	0x0801098f

0800db24 <__hi0bits>:
 800db24:	2280      	movs	r2, #128	@ 0x80
 800db26:	0003      	movs	r3, r0
 800db28:	0252      	lsls	r2, r2, #9
 800db2a:	2000      	movs	r0, #0
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d201      	bcs.n	800db34 <__hi0bits+0x10>
 800db30:	041b      	lsls	r3, r3, #16
 800db32:	3010      	adds	r0, #16
 800db34:	2280      	movs	r2, #128	@ 0x80
 800db36:	0452      	lsls	r2, r2, #17
 800db38:	4293      	cmp	r3, r2
 800db3a:	d201      	bcs.n	800db40 <__hi0bits+0x1c>
 800db3c:	3008      	adds	r0, #8
 800db3e:	021b      	lsls	r3, r3, #8
 800db40:	2280      	movs	r2, #128	@ 0x80
 800db42:	0552      	lsls	r2, r2, #21
 800db44:	4293      	cmp	r3, r2
 800db46:	d201      	bcs.n	800db4c <__hi0bits+0x28>
 800db48:	3004      	adds	r0, #4
 800db4a:	011b      	lsls	r3, r3, #4
 800db4c:	2280      	movs	r2, #128	@ 0x80
 800db4e:	05d2      	lsls	r2, r2, #23
 800db50:	4293      	cmp	r3, r2
 800db52:	d201      	bcs.n	800db58 <__hi0bits+0x34>
 800db54:	3002      	adds	r0, #2
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	2b00      	cmp	r3, #0
 800db5a:	db03      	blt.n	800db64 <__hi0bits+0x40>
 800db5c:	3001      	adds	r0, #1
 800db5e:	4213      	tst	r3, r2
 800db60:	d100      	bne.n	800db64 <__hi0bits+0x40>
 800db62:	2020      	movs	r0, #32
 800db64:	4770      	bx	lr

0800db66 <__lo0bits>:
 800db66:	6803      	ldr	r3, [r0, #0]
 800db68:	0001      	movs	r1, r0
 800db6a:	2207      	movs	r2, #7
 800db6c:	0018      	movs	r0, r3
 800db6e:	4010      	ands	r0, r2
 800db70:	4213      	tst	r3, r2
 800db72:	d00d      	beq.n	800db90 <__lo0bits+0x2a>
 800db74:	3a06      	subs	r2, #6
 800db76:	2000      	movs	r0, #0
 800db78:	4213      	tst	r3, r2
 800db7a:	d105      	bne.n	800db88 <__lo0bits+0x22>
 800db7c:	3002      	adds	r0, #2
 800db7e:	4203      	tst	r3, r0
 800db80:	d003      	beq.n	800db8a <__lo0bits+0x24>
 800db82:	40d3      	lsrs	r3, r2
 800db84:	0010      	movs	r0, r2
 800db86:	600b      	str	r3, [r1, #0]
 800db88:	4770      	bx	lr
 800db8a:	089b      	lsrs	r3, r3, #2
 800db8c:	600b      	str	r3, [r1, #0]
 800db8e:	e7fb      	b.n	800db88 <__lo0bits+0x22>
 800db90:	b29a      	uxth	r2, r3
 800db92:	2a00      	cmp	r2, #0
 800db94:	d101      	bne.n	800db9a <__lo0bits+0x34>
 800db96:	2010      	movs	r0, #16
 800db98:	0c1b      	lsrs	r3, r3, #16
 800db9a:	b2da      	uxtb	r2, r3
 800db9c:	2a00      	cmp	r2, #0
 800db9e:	d101      	bne.n	800dba4 <__lo0bits+0x3e>
 800dba0:	3008      	adds	r0, #8
 800dba2:	0a1b      	lsrs	r3, r3, #8
 800dba4:	071a      	lsls	r2, r3, #28
 800dba6:	d101      	bne.n	800dbac <__lo0bits+0x46>
 800dba8:	3004      	adds	r0, #4
 800dbaa:	091b      	lsrs	r3, r3, #4
 800dbac:	079a      	lsls	r2, r3, #30
 800dbae:	d101      	bne.n	800dbb4 <__lo0bits+0x4e>
 800dbb0:	3002      	adds	r0, #2
 800dbb2:	089b      	lsrs	r3, r3, #2
 800dbb4:	07da      	lsls	r2, r3, #31
 800dbb6:	d4e9      	bmi.n	800db8c <__lo0bits+0x26>
 800dbb8:	3001      	adds	r0, #1
 800dbba:	085b      	lsrs	r3, r3, #1
 800dbbc:	d1e6      	bne.n	800db8c <__lo0bits+0x26>
 800dbbe:	2020      	movs	r0, #32
 800dbc0:	e7e2      	b.n	800db88 <__lo0bits+0x22>
	...

0800dbc4 <__i2b>:
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	000c      	movs	r4, r1
 800dbc8:	2101      	movs	r1, #1
 800dbca:	f7ff feb3 	bl	800d934 <_Balloc>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d107      	bne.n	800dbe2 <__i2b+0x1e>
 800dbd2:	2146      	movs	r1, #70	@ 0x46
 800dbd4:	4c05      	ldr	r4, [pc, #20]	@ (800dbec <__i2b+0x28>)
 800dbd6:	0002      	movs	r2, r0
 800dbd8:	4b05      	ldr	r3, [pc, #20]	@ (800dbf0 <__i2b+0x2c>)
 800dbda:	0020      	movs	r0, r4
 800dbdc:	31ff      	adds	r1, #255	@ 0xff
 800dbde:	f001 fbdb 	bl	800f398 <__assert_func>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	6144      	str	r4, [r0, #20]
 800dbe6:	6103      	str	r3, [r0, #16]
 800dbe8:	bd10      	pop	{r4, pc}
 800dbea:	46c0      	nop			@ (mov r8, r8)
 800dbec:	0801098f 	.word	0x0801098f
 800dbf0:	0801097e 	.word	0x0801097e

0800dbf4 <__multiply>:
 800dbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbf6:	0014      	movs	r4, r2
 800dbf8:	690a      	ldr	r2, [r1, #16]
 800dbfa:	6923      	ldr	r3, [r4, #16]
 800dbfc:	000d      	movs	r5, r1
 800dbfe:	b08b      	sub	sp, #44	@ 0x2c
 800dc00:	429a      	cmp	r2, r3
 800dc02:	db02      	blt.n	800dc0a <__multiply+0x16>
 800dc04:	0023      	movs	r3, r4
 800dc06:	000c      	movs	r4, r1
 800dc08:	001d      	movs	r5, r3
 800dc0a:	6927      	ldr	r7, [r4, #16]
 800dc0c:	692e      	ldr	r6, [r5, #16]
 800dc0e:	6861      	ldr	r1, [r4, #4]
 800dc10:	19bb      	adds	r3, r7, r6
 800dc12:	9303      	str	r3, [sp, #12]
 800dc14:	68a3      	ldr	r3, [r4, #8]
 800dc16:	19ba      	adds	r2, r7, r6
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	da00      	bge.n	800dc1e <__multiply+0x2a>
 800dc1c:	3101      	adds	r1, #1
 800dc1e:	f7ff fe89 	bl	800d934 <_Balloc>
 800dc22:	9002      	str	r0, [sp, #8]
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d106      	bne.n	800dc36 <__multiply+0x42>
 800dc28:	21b1      	movs	r1, #177	@ 0xb1
 800dc2a:	4b49      	ldr	r3, [pc, #292]	@ (800dd50 <__multiply+0x15c>)
 800dc2c:	4849      	ldr	r0, [pc, #292]	@ (800dd54 <__multiply+0x160>)
 800dc2e:	9a02      	ldr	r2, [sp, #8]
 800dc30:	0049      	lsls	r1, r1, #1
 800dc32:	f001 fbb1 	bl	800f398 <__assert_func>
 800dc36:	9b02      	ldr	r3, [sp, #8]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	3314      	adds	r3, #20
 800dc3c:	469c      	mov	ip, r3
 800dc3e:	19bb      	adds	r3, r7, r6
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4463      	add	r3, ip
 800dc44:	9304      	str	r3, [sp, #16]
 800dc46:	4663      	mov	r3, ip
 800dc48:	9904      	ldr	r1, [sp, #16]
 800dc4a:	428b      	cmp	r3, r1
 800dc4c:	d32a      	bcc.n	800dca4 <__multiply+0xb0>
 800dc4e:	0023      	movs	r3, r4
 800dc50:	00bf      	lsls	r7, r7, #2
 800dc52:	3314      	adds	r3, #20
 800dc54:	3514      	adds	r5, #20
 800dc56:	9308      	str	r3, [sp, #32]
 800dc58:	00b6      	lsls	r6, r6, #2
 800dc5a:	19db      	adds	r3, r3, r7
 800dc5c:	9305      	str	r3, [sp, #20]
 800dc5e:	19ab      	adds	r3, r5, r6
 800dc60:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc62:	2304      	movs	r3, #4
 800dc64:	9306      	str	r3, [sp, #24]
 800dc66:	0023      	movs	r3, r4
 800dc68:	9a05      	ldr	r2, [sp, #20]
 800dc6a:	3315      	adds	r3, #21
 800dc6c:	9501      	str	r5, [sp, #4]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d305      	bcc.n	800dc7e <__multiply+0x8a>
 800dc72:	1b13      	subs	r3, r2, r4
 800dc74:	3b15      	subs	r3, #21
 800dc76:	089b      	lsrs	r3, r3, #2
 800dc78:	3301      	adds	r3, #1
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	9306      	str	r3, [sp, #24]
 800dc7e:	9b01      	ldr	r3, [sp, #4]
 800dc80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d310      	bcc.n	800dca8 <__multiply+0xb4>
 800dc86:	9b03      	ldr	r3, [sp, #12]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	dd05      	ble.n	800dc98 <__multiply+0xa4>
 800dc8c:	9b04      	ldr	r3, [sp, #16]
 800dc8e:	3b04      	subs	r3, #4
 800dc90:	9304      	str	r3, [sp, #16]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d056      	beq.n	800dd46 <__multiply+0x152>
 800dc98:	9b02      	ldr	r3, [sp, #8]
 800dc9a:	9a03      	ldr	r2, [sp, #12]
 800dc9c:	0018      	movs	r0, r3
 800dc9e:	611a      	str	r2, [r3, #16]
 800dca0:	b00b      	add	sp, #44	@ 0x2c
 800dca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dca4:	c304      	stmia	r3!, {r2}
 800dca6:	e7cf      	b.n	800dc48 <__multiply+0x54>
 800dca8:	9b01      	ldr	r3, [sp, #4]
 800dcaa:	6818      	ldr	r0, [r3, #0]
 800dcac:	b280      	uxth	r0, r0
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d01e      	beq.n	800dcf0 <__multiply+0xfc>
 800dcb2:	4667      	mov	r7, ip
 800dcb4:	2500      	movs	r5, #0
 800dcb6:	9e08      	ldr	r6, [sp, #32]
 800dcb8:	ce02      	ldmia	r6!, {r1}
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	9307      	str	r3, [sp, #28]
 800dcbe:	b28b      	uxth	r3, r1
 800dcc0:	4343      	muls	r3, r0
 800dcc2:	001a      	movs	r2, r3
 800dcc4:	466b      	mov	r3, sp
 800dcc6:	0c09      	lsrs	r1, r1, #16
 800dcc8:	8b9b      	ldrh	r3, [r3, #28]
 800dcca:	4341      	muls	r1, r0
 800dccc:	18d3      	adds	r3, r2, r3
 800dcce:	9a07      	ldr	r2, [sp, #28]
 800dcd0:	195b      	adds	r3, r3, r5
 800dcd2:	0c12      	lsrs	r2, r2, #16
 800dcd4:	1889      	adds	r1, r1, r2
 800dcd6:	0c1a      	lsrs	r2, r3, #16
 800dcd8:	188a      	adds	r2, r1, r2
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	0c15      	lsrs	r5, r2, #16
 800dcde:	0412      	lsls	r2, r2, #16
 800dce0:	431a      	orrs	r2, r3
 800dce2:	9b05      	ldr	r3, [sp, #20]
 800dce4:	c704      	stmia	r7!, {r2}
 800dce6:	42b3      	cmp	r3, r6
 800dce8:	d8e6      	bhi.n	800dcb8 <__multiply+0xc4>
 800dcea:	4663      	mov	r3, ip
 800dcec:	9a06      	ldr	r2, [sp, #24]
 800dcee:	509d      	str	r5, [r3, r2]
 800dcf0:	9b01      	ldr	r3, [sp, #4]
 800dcf2:	6818      	ldr	r0, [r3, #0]
 800dcf4:	0c00      	lsrs	r0, r0, #16
 800dcf6:	d020      	beq.n	800dd3a <__multiply+0x146>
 800dcf8:	4663      	mov	r3, ip
 800dcfa:	0025      	movs	r5, r4
 800dcfc:	4661      	mov	r1, ip
 800dcfe:	2700      	movs	r7, #0
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	3514      	adds	r5, #20
 800dd04:	682a      	ldr	r2, [r5, #0]
 800dd06:	680e      	ldr	r6, [r1, #0]
 800dd08:	b292      	uxth	r2, r2
 800dd0a:	4342      	muls	r2, r0
 800dd0c:	0c36      	lsrs	r6, r6, #16
 800dd0e:	1992      	adds	r2, r2, r6
 800dd10:	19d2      	adds	r2, r2, r7
 800dd12:	0416      	lsls	r6, r2, #16
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	431e      	orrs	r6, r3
 800dd18:	600e      	str	r6, [r1, #0]
 800dd1a:	cd40      	ldmia	r5!, {r6}
 800dd1c:	684b      	ldr	r3, [r1, #4]
 800dd1e:	0c36      	lsrs	r6, r6, #16
 800dd20:	4346      	muls	r6, r0
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	0c12      	lsrs	r2, r2, #16
 800dd26:	18f3      	adds	r3, r6, r3
 800dd28:	189b      	adds	r3, r3, r2
 800dd2a:	9a05      	ldr	r2, [sp, #20]
 800dd2c:	0c1f      	lsrs	r7, r3, #16
 800dd2e:	3104      	adds	r1, #4
 800dd30:	42aa      	cmp	r2, r5
 800dd32:	d8e7      	bhi.n	800dd04 <__multiply+0x110>
 800dd34:	4662      	mov	r2, ip
 800dd36:	9906      	ldr	r1, [sp, #24]
 800dd38:	5053      	str	r3, [r2, r1]
 800dd3a:	9b01      	ldr	r3, [sp, #4]
 800dd3c:	3304      	adds	r3, #4
 800dd3e:	9301      	str	r3, [sp, #4]
 800dd40:	2304      	movs	r3, #4
 800dd42:	449c      	add	ip, r3
 800dd44:	e79b      	b.n	800dc7e <__multiply+0x8a>
 800dd46:	9b03      	ldr	r3, [sp, #12]
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	9303      	str	r3, [sp, #12]
 800dd4c:	e79b      	b.n	800dc86 <__multiply+0x92>
 800dd4e:	46c0      	nop			@ (mov r8, r8)
 800dd50:	0801097e 	.word	0x0801097e
 800dd54:	0801098f 	.word	0x0801098f

0800dd58 <__pow5mult>:
 800dd58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd5a:	2303      	movs	r3, #3
 800dd5c:	0015      	movs	r5, r2
 800dd5e:	0007      	movs	r7, r0
 800dd60:	000e      	movs	r6, r1
 800dd62:	401a      	ands	r2, r3
 800dd64:	421d      	tst	r5, r3
 800dd66:	d008      	beq.n	800dd7a <__pow5mult+0x22>
 800dd68:	4925      	ldr	r1, [pc, #148]	@ (800de00 <__pow5mult+0xa8>)
 800dd6a:	3a01      	subs	r2, #1
 800dd6c:	0092      	lsls	r2, r2, #2
 800dd6e:	5852      	ldr	r2, [r2, r1]
 800dd70:	2300      	movs	r3, #0
 800dd72:	0031      	movs	r1, r6
 800dd74:	f7ff fe46 	bl	800da04 <__multadd>
 800dd78:	0006      	movs	r6, r0
 800dd7a:	10ad      	asrs	r5, r5, #2
 800dd7c:	d03d      	beq.n	800ddfa <__pow5mult+0xa2>
 800dd7e:	69fc      	ldr	r4, [r7, #28]
 800dd80:	2c00      	cmp	r4, #0
 800dd82:	d10f      	bne.n	800dda4 <__pow5mult+0x4c>
 800dd84:	2010      	movs	r0, #16
 800dd86:	f7ff fd19 	bl	800d7bc <malloc>
 800dd8a:	1e02      	subs	r2, r0, #0
 800dd8c:	61f8      	str	r0, [r7, #28]
 800dd8e:	d105      	bne.n	800dd9c <__pow5mult+0x44>
 800dd90:	21b4      	movs	r1, #180	@ 0xb4
 800dd92:	4b1c      	ldr	r3, [pc, #112]	@ (800de04 <__pow5mult+0xac>)
 800dd94:	481c      	ldr	r0, [pc, #112]	@ (800de08 <__pow5mult+0xb0>)
 800dd96:	31ff      	adds	r1, #255	@ 0xff
 800dd98:	f001 fafe 	bl	800f398 <__assert_func>
 800dd9c:	6044      	str	r4, [r0, #4]
 800dd9e:	6084      	str	r4, [r0, #8]
 800dda0:	6004      	str	r4, [r0, #0]
 800dda2:	60c4      	str	r4, [r0, #12]
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	689c      	ldr	r4, [r3, #8]
 800dda8:	9301      	str	r3, [sp, #4]
 800ddaa:	2c00      	cmp	r4, #0
 800ddac:	d108      	bne.n	800ddc0 <__pow5mult+0x68>
 800ddae:	0038      	movs	r0, r7
 800ddb0:	4916      	ldr	r1, [pc, #88]	@ (800de0c <__pow5mult+0xb4>)
 800ddb2:	f7ff ff07 	bl	800dbc4 <__i2b>
 800ddb6:	9b01      	ldr	r3, [sp, #4]
 800ddb8:	0004      	movs	r4, r0
 800ddba:	6098      	str	r0, [r3, #8]
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	6003      	str	r3, [r0, #0]
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	421d      	tst	r5, r3
 800ddc4:	d00a      	beq.n	800dddc <__pow5mult+0x84>
 800ddc6:	0031      	movs	r1, r6
 800ddc8:	0022      	movs	r2, r4
 800ddca:	0038      	movs	r0, r7
 800ddcc:	f7ff ff12 	bl	800dbf4 <__multiply>
 800ddd0:	0031      	movs	r1, r6
 800ddd2:	9001      	str	r0, [sp, #4]
 800ddd4:	0038      	movs	r0, r7
 800ddd6:	f7ff fdf1 	bl	800d9bc <_Bfree>
 800ddda:	9e01      	ldr	r6, [sp, #4]
 800dddc:	106d      	asrs	r5, r5, #1
 800ddde:	d00c      	beq.n	800ddfa <__pow5mult+0xa2>
 800dde0:	6820      	ldr	r0, [r4, #0]
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d107      	bne.n	800ddf6 <__pow5mult+0x9e>
 800dde6:	0022      	movs	r2, r4
 800dde8:	0021      	movs	r1, r4
 800ddea:	0038      	movs	r0, r7
 800ddec:	f7ff ff02 	bl	800dbf4 <__multiply>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	6020      	str	r0, [r4, #0]
 800ddf4:	6003      	str	r3, [r0, #0]
 800ddf6:	0004      	movs	r4, r0
 800ddf8:	e7e2      	b.n	800ddc0 <__pow5mult+0x68>
 800ddfa:	0030      	movs	r0, r6
 800ddfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ddfe:	46c0      	nop			@ (mov r8, r8)
 800de00:	080109e8 	.word	0x080109e8
 800de04:	0801090f 	.word	0x0801090f
 800de08:	0801098f 	.word	0x0801098f
 800de0c:	00000271 	.word	0x00000271

0800de10 <__lshift>:
 800de10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de12:	000c      	movs	r4, r1
 800de14:	0016      	movs	r6, r2
 800de16:	6923      	ldr	r3, [r4, #16]
 800de18:	1157      	asrs	r7, r2, #5
 800de1a:	b085      	sub	sp, #20
 800de1c:	18fb      	adds	r3, r7, r3
 800de1e:	9301      	str	r3, [sp, #4]
 800de20:	3301      	adds	r3, #1
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	6849      	ldr	r1, [r1, #4]
 800de26:	68a3      	ldr	r3, [r4, #8]
 800de28:	9002      	str	r0, [sp, #8]
 800de2a:	9a00      	ldr	r2, [sp, #0]
 800de2c:	4293      	cmp	r3, r2
 800de2e:	db10      	blt.n	800de52 <__lshift+0x42>
 800de30:	9802      	ldr	r0, [sp, #8]
 800de32:	f7ff fd7f 	bl	800d934 <_Balloc>
 800de36:	2300      	movs	r3, #0
 800de38:	0001      	movs	r1, r0
 800de3a:	0005      	movs	r5, r0
 800de3c:	001a      	movs	r2, r3
 800de3e:	3114      	adds	r1, #20
 800de40:	4298      	cmp	r0, r3
 800de42:	d10c      	bne.n	800de5e <__lshift+0x4e>
 800de44:	21ef      	movs	r1, #239	@ 0xef
 800de46:	002a      	movs	r2, r5
 800de48:	4b25      	ldr	r3, [pc, #148]	@ (800dee0 <__lshift+0xd0>)
 800de4a:	4826      	ldr	r0, [pc, #152]	@ (800dee4 <__lshift+0xd4>)
 800de4c:	0049      	lsls	r1, r1, #1
 800de4e:	f001 faa3 	bl	800f398 <__assert_func>
 800de52:	3101      	adds	r1, #1
 800de54:	005b      	lsls	r3, r3, #1
 800de56:	e7e8      	b.n	800de2a <__lshift+0x1a>
 800de58:	0098      	lsls	r0, r3, #2
 800de5a:	500a      	str	r2, [r1, r0]
 800de5c:	3301      	adds	r3, #1
 800de5e:	42bb      	cmp	r3, r7
 800de60:	dbfa      	blt.n	800de58 <__lshift+0x48>
 800de62:	43fb      	mvns	r3, r7
 800de64:	17db      	asrs	r3, r3, #31
 800de66:	401f      	ands	r7, r3
 800de68:	00bf      	lsls	r7, r7, #2
 800de6a:	0023      	movs	r3, r4
 800de6c:	201f      	movs	r0, #31
 800de6e:	19c9      	adds	r1, r1, r7
 800de70:	0037      	movs	r7, r6
 800de72:	6922      	ldr	r2, [r4, #16]
 800de74:	3314      	adds	r3, #20
 800de76:	0092      	lsls	r2, r2, #2
 800de78:	189a      	adds	r2, r3, r2
 800de7a:	4007      	ands	r7, r0
 800de7c:	4206      	tst	r6, r0
 800de7e:	d029      	beq.n	800ded4 <__lshift+0xc4>
 800de80:	3001      	adds	r0, #1
 800de82:	1bc0      	subs	r0, r0, r7
 800de84:	9003      	str	r0, [sp, #12]
 800de86:	468c      	mov	ip, r1
 800de88:	2000      	movs	r0, #0
 800de8a:	681e      	ldr	r6, [r3, #0]
 800de8c:	40be      	lsls	r6, r7
 800de8e:	4306      	orrs	r6, r0
 800de90:	4660      	mov	r0, ip
 800de92:	c040      	stmia	r0!, {r6}
 800de94:	4684      	mov	ip, r0
 800de96:	9e03      	ldr	r6, [sp, #12]
 800de98:	cb01      	ldmia	r3!, {r0}
 800de9a:	40f0      	lsrs	r0, r6
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d8f4      	bhi.n	800de8a <__lshift+0x7a>
 800dea0:	0026      	movs	r6, r4
 800dea2:	3615      	adds	r6, #21
 800dea4:	2304      	movs	r3, #4
 800dea6:	42b2      	cmp	r2, r6
 800dea8:	d304      	bcc.n	800deb4 <__lshift+0xa4>
 800deaa:	1b13      	subs	r3, r2, r4
 800deac:	3b15      	subs	r3, #21
 800deae:	089b      	lsrs	r3, r3, #2
 800deb0:	3301      	adds	r3, #1
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	50c8      	str	r0, [r1, r3]
 800deb6:	2800      	cmp	r0, #0
 800deb8:	d002      	beq.n	800dec0 <__lshift+0xb0>
 800deba:	9b01      	ldr	r3, [sp, #4]
 800debc:	3302      	adds	r3, #2
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	9b00      	ldr	r3, [sp, #0]
 800dec2:	9802      	ldr	r0, [sp, #8]
 800dec4:	3b01      	subs	r3, #1
 800dec6:	0021      	movs	r1, r4
 800dec8:	612b      	str	r3, [r5, #16]
 800deca:	f7ff fd77 	bl	800d9bc <_Bfree>
 800dece:	0028      	movs	r0, r5
 800ded0:	b005      	add	sp, #20
 800ded2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ded4:	cb01      	ldmia	r3!, {r0}
 800ded6:	c101      	stmia	r1!, {r0}
 800ded8:	429a      	cmp	r2, r3
 800deda:	d8fb      	bhi.n	800ded4 <__lshift+0xc4>
 800dedc:	e7f0      	b.n	800dec0 <__lshift+0xb0>
 800dede:	46c0      	nop			@ (mov r8, r8)
 800dee0:	0801097e 	.word	0x0801097e
 800dee4:	0801098f 	.word	0x0801098f

0800dee8 <__mcmp>:
 800dee8:	b530      	push	{r4, r5, lr}
 800deea:	690b      	ldr	r3, [r1, #16]
 800deec:	6904      	ldr	r4, [r0, #16]
 800deee:	0002      	movs	r2, r0
 800def0:	1ae0      	subs	r0, r4, r3
 800def2:	429c      	cmp	r4, r3
 800def4:	d10f      	bne.n	800df16 <__mcmp+0x2e>
 800def6:	3214      	adds	r2, #20
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	3114      	adds	r1, #20
 800defc:	0014      	movs	r4, r2
 800defe:	18c9      	adds	r1, r1, r3
 800df00:	18d2      	adds	r2, r2, r3
 800df02:	3a04      	subs	r2, #4
 800df04:	3904      	subs	r1, #4
 800df06:	6815      	ldr	r5, [r2, #0]
 800df08:	680b      	ldr	r3, [r1, #0]
 800df0a:	429d      	cmp	r5, r3
 800df0c:	d004      	beq.n	800df18 <__mcmp+0x30>
 800df0e:	2001      	movs	r0, #1
 800df10:	429d      	cmp	r5, r3
 800df12:	d200      	bcs.n	800df16 <__mcmp+0x2e>
 800df14:	3802      	subs	r0, #2
 800df16:	bd30      	pop	{r4, r5, pc}
 800df18:	4294      	cmp	r4, r2
 800df1a:	d3f2      	bcc.n	800df02 <__mcmp+0x1a>
 800df1c:	e7fb      	b.n	800df16 <__mcmp+0x2e>
	...

0800df20 <__mdiff>:
 800df20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df22:	000c      	movs	r4, r1
 800df24:	b087      	sub	sp, #28
 800df26:	9000      	str	r0, [sp, #0]
 800df28:	0011      	movs	r1, r2
 800df2a:	0020      	movs	r0, r4
 800df2c:	0017      	movs	r7, r2
 800df2e:	f7ff ffdb 	bl	800dee8 <__mcmp>
 800df32:	1e05      	subs	r5, r0, #0
 800df34:	d110      	bne.n	800df58 <__mdiff+0x38>
 800df36:	0001      	movs	r1, r0
 800df38:	9800      	ldr	r0, [sp, #0]
 800df3a:	f7ff fcfb 	bl	800d934 <_Balloc>
 800df3e:	1e02      	subs	r2, r0, #0
 800df40:	d104      	bne.n	800df4c <__mdiff+0x2c>
 800df42:	4b40      	ldr	r3, [pc, #256]	@ (800e044 <__mdiff+0x124>)
 800df44:	4840      	ldr	r0, [pc, #256]	@ (800e048 <__mdiff+0x128>)
 800df46:	4941      	ldr	r1, [pc, #260]	@ (800e04c <__mdiff+0x12c>)
 800df48:	f001 fa26 	bl	800f398 <__assert_func>
 800df4c:	2301      	movs	r3, #1
 800df4e:	6145      	str	r5, [r0, #20]
 800df50:	6103      	str	r3, [r0, #16]
 800df52:	0010      	movs	r0, r2
 800df54:	b007      	add	sp, #28
 800df56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df58:	2600      	movs	r6, #0
 800df5a:	42b0      	cmp	r0, r6
 800df5c:	da03      	bge.n	800df66 <__mdiff+0x46>
 800df5e:	0023      	movs	r3, r4
 800df60:	003c      	movs	r4, r7
 800df62:	001f      	movs	r7, r3
 800df64:	3601      	adds	r6, #1
 800df66:	6861      	ldr	r1, [r4, #4]
 800df68:	9800      	ldr	r0, [sp, #0]
 800df6a:	f7ff fce3 	bl	800d934 <_Balloc>
 800df6e:	1e02      	subs	r2, r0, #0
 800df70:	d103      	bne.n	800df7a <__mdiff+0x5a>
 800df72:	4b34      	ldr	r3, [pc, #208]	@ (800e044 <__mdiff+0x124>)
 800df74:	4834      	ldr	r0, [pc, #208]	@ (800e048 <__mdiff+0x128>)
 800df76:	4936      	ldr	r1, [pc, #216]	@ (800e050 <__mdiff+0x130>)
 800df78:	e7e6      	b.n	800df48 <__mdiff+0x28>
 800df7a:	6923      	ldr	r3, [r4, #16]
 800df7c:	3414      	adds	r4, #20
 800df7e:	9300      	str	r3, [sp, #0]
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	18e3      	adds	r3, r4, r3
 800df84:	0021      	movs	r1, r4
 800df86:	9401      	str	r4, [sp, #4]
 800df88:	003c      	movs	r4, r7
 800df8a:	9302      	str	r3, [sp, #8]
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	3414      	adds	r4, #20
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	18e3      	adds	r3, r4, r3
 800df94:	9303      	str	r3, [sp, #12]
 800df96:	0003      	movs	r3, r0
 800df98:	60c6      	str	r6, [r0, #12]
 800df9a:	468c      	mov	ip, r1
 800df9c:	2000      	movs	r0, #0
 800df9e:	3314      	adds	r3, #20
 800dfa0:	9304      	str	r3, [sp, #16]
 800dfa2:	9305      	str	r3, [sp, #20]
 800dfa4:	4663      	mov	r3, ip
 800dfa6:	cb20      	ldmia	r3!, {r5}
 800dfa8:	b2a9      	uxth	r1, r5
 800dfaa:	000e      	movs	r6, r1
 800dfac:	469c      	mov	ip, r3
 800dfae:	cc08      	ldmia	r4!, {r3}
 800dfb0:	0c2d      	lsrs	r5, r5, #16
 800dfb2:	b299      	uxth	r1, r3
 800dfb4:	1a71      	subs	r1, r6, r1
 800dfb6:	1809      	adds	r1, r1, r0
 800dfb8:	0c1b      	lsrs	r3, r3, #16
 800dfba:	1408      	asrs	r0, r1, #16
 800dfbc:	1aeb      	subs	r3, r5, r3
 800dfbe:	181b      	adds	r3, r3, r0
 800dfc0:	1418      	asrs	r0, r3, #16
 800dfc2:	b289      	uxth	r1, r1
 800dfc4:	041b      	lsls	r3, r3, #16
 800dfc6:	4319      	orrs	r1, r3
 800dfc8:	9b05      	ldr	r3, [sp, #20]
 800dfca:	c302      	stmia	r3!, {r1}
 800dfcc:	9305      	str	r3, [sp, #20]
 800dfce:	9b03      	ldr	r3, [sp, #12]
 800dfd0:	42a3      	cmp	r3, r4
 800dfd2:	d8e7      	bhi.n	800dfa4 <__mdiff+0x84>
 800dfd4:	0039      	movs	r1, r7
 800dfd6:	9c03      	ldr	r4, [sp, #12]
 800dfd8:	3115      	adds	r1, #21
 800dfda:	2304      	movs	r3, #4
 800dfdc:	428c      	cmp	r4, r1
 800dfde:	d304      	bcc.n	800dfea <__mdiff+0xca>
 800dfe0:	1be3      	subs	r3, r4, r7
 800dfe2:	3b15      	subs	r3, #21
 800dfe4:	089b      	lsrs	r3, r3, #2
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	9901      	ldr	r1, [sp, #4]
 800dfec:	18cd      	adds	r5, r1, r3
 800dfee:	9904      	ldr	r1, [sp, #16]
 800dff0:	002e      	movs	r6, r5
 800dff2:	18cb      	adds	r3, r1, r3
 800dff4:	001f      	movs	r7, r3
 800dff6:	9902      	ldr	r1, [sp, #8]
 800dff8:	428e      	cmp	r6, r1
 800dffa:	d311      	bcc.n	800e020 <__mdiff+0x100>
 800dffc:	9c02      	ldr	r4, [sp, #8]
 800dffe:	1ee9      	subs	r1, r5, #3
 800e000:	2000      	movs	r0, #0
 800e002:	428c      	cmp	r4, r1
 800e004:	d304      	bcc.n	800e010 <__mdiff+0xf0>
 800e006:	0021      	movs	r1, r4
 800e008:	3103      	adds	r1, #3
 800e00a:	1b49      	subs	r1, r1, r5
 800e00c:	0889      	lsrs	r1, r1, #2
 800e00e:	0088      	lsls	r0, r1, #2
 800e010:	181b      	adds	r3, r3, r0
 800e012:	3b04      	subs	r3, #4
 800e014:	6819      	ldr	r1, [r3, #0]
 800e016:	2900      	cmp	r1, #0
 800e018:	d010      	beq.n	800e03c <__mdiff+0x11c>
 800e01a:	9b00      	ldr	r3, [sp, #0]
 800e01c:	6113      	str	r3, [r2, #16]
 800e01e:	e798      	b.n	800df52 <__mdiff+0x32>
 800e020:	4684      	mov	ip, r0
 800e022:	ce02      	ldmia	r6!, {r1}
 800e024:	b288      	uxth	r0, r1
 800e026:	4460      	add	r0, ip
 800e028:	1400      	asrs	r0, r0, #16
 800e02a:	0c0c      	lsrs	r4, r1, #16
 800e02c:	1904      	adds	r4, r0, r4
 800e02e:	4461      	add	r1, ip
 800e030:	1420      	asrs	r0, r4, #16
 800e032:	b289      	uxth	r1, r1
 800e034:	0424      	lsls	r4, r4, #16
 800e036:	4321      	orrs	r1, r4
 800e038:	c702      	stmia	r7!, {r1}
 800e03a:	e7dc      	b.n	800dff6 <__mdiff+0xd6>
 800e03c:	9900      	ldr	r1, [sp, #0]
 800e03e:	3901      	subs	r1, #1
 800e040:	9100      	str	r1, [sp, #0]
 800e042:	e7e6      	b.n	800e012 <__mdiff+0xf2>
 800e044:	0801097e 	.word	0x0801097e
 800e048:	0801098f 	.word	0x0801098f
 800e04c:	00000237 	.word	0x00000237
 800e050:	00000245 	.word	0x00000245

0800e054 <__ulp>:
 800e054:	b510      	push	{r4, lr}
 800e056:	2400      	movs	r4, #0
 800e058:	4b0c      	ldr	r3, [pc, #48]	@ (800e08c <__ulp+0x38>)
 800e05a:	4a0d      	ldr	r2, [pc, #52]	@ (800e090 <__ulp+0x3c>)
 800e05c:	400b      	ands	r3, r1
 800e05e:	189b      	adds	r3, r3, r2
 800e060:	42a3      	cmp	r3, r4
 800e062:	dc06      	bgt.n	800e072 <__ulp+0x1e>
 800e064:	425b      	negs	r3, r3
 800e066:	151a      	asrs	r2, r3, #20
 800e068:	2a13      	cmp	r2, #19
 800e06a:	dc05      	bgt.n	800e078 <__ulp+0x24>
 800e06c:	2380      	movs	r3, #128	@ 0x80
 800e06e:	031b      	lsls	r3, r3, #12
 800e070:	4113      	asrs	r3, r2
 800e072:	0019      	movs	r1, r3
 800e074:	0020      	movs	r0, r4
 800e076:	bd10      	pop	{r4, pc}
 800e078:	3a14      	subs	r2, #20
 800e07a:	2401      	movs	r4, #1
 800e07c:	2a1e      	cmp	r2, #30
 800e07e:	dc02      	bgt.n	800e086 <__ulp+0x32>
 800e080:	2480      	movs	r4, #128	@ 0x80
 800e082:	0624      	lsls	r4, r4, #24
 800e084:	40d4      	lsrs	r4, r2
 800e086:	2300      	movs	r3, #0
 800e088:	e7f3      	b.n	800e072 <__ulp+0x1e>
 800e08a:	46c0      	nop			@ (mov r8, r8)
 800e08c:	7ff00000 	.word	0x7ff00000
 800e090:	fcc00000 	.word	0xfcc00000

0800e094 <__b2d>:
 800e094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e096:	0006      	movs	r6, r0
 800e098:	6903      	ldr	r3, [r0, #16]
 800e09a:	3614      	adds	r6, #20
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	18f3      	adds	r3, r6, r3
 800e0a0:	1f1d      	subs	r5, r3, #4
 800e0a2:	682c      	ldr	r4, [r5, #0]
 800e0a4:	000f      	movs	r7, r1
 800e0a6:	0020      	movs	r0, r4
 800e0a8:	9301      	str	r3, [sp, #4]
 800e0aa:	f7ff fd3b 	bl	800db24 <__hi0bits>
 800e0ae:	2220      	movs	r2, #32
 800e0b0:	1a12      	subs	r2, r2, r0
 800e0b2:	603a      	str	r2, [r7, #0]
 800e0b4:	0003      	movs	r3, r0
 800e0b6:	4a1c      	ldr	r2, [pc, #112]	@ (800e128 <__b2d+0x94>)
 800e0b8:	280a      	cmp	r0, #10
 800e0ba:	dc15      	bgt.n	800e0e8 <__b2d+0x54>
 800e0bc:	210b      	movs	r1, #11
 800e0be:	0027      	movs	r7, r4
 800e0c0:	1a09      	subs	r1, r1, r0
 800e0c2:	40cf      	lsrs	r7, r1
 800e0c4:	433a      	orrs	r2, r7
 800e0c6:	468c      	mov	ip, r1
 800e0c8:	0011      	movs	r1, r2
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	42ae      	cmp	r6, r5
 800e0ce:	d202      	bcs.n	800e0d6 <__b2d+0x42>
 800e0d0:	9a01      	ldr	r2, [sp, #4]
 800e0d2:	3a08      	subs	r2, #8
 800e0d4:	6812      	ldr	r2, [r2, #0]
 800e0d6:	3315      	adds	r3, #21
 800e0d8:	409c      	lsls	r4, r3
 800e0da:	4663      	mov	r3, ip
 800e0dc:	0027      	movs	r7, r4
 800e0de:	40da      	lsrs	r2, r3
 800e0e0:	4317      	orrs	r7, r2
 800e0e2:	0038      	movs	r0, r7
 800e0e4:	b003      	add	sp, #12
 800e0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0e8:	2700      	movs	r7, #0
 800e0ea:	42ae      	cmp	r6, r5
 800e0ec:	d202      	bcs.n	800e0f4 <__b2d+0x60>
 800e0ee:	9d01      	ldr	r5, [sp, #4]
 800e0f0:	3d08      	subs	r5, #8
 800e0f2:	682f      	ldr	r7, [r5, #0]
 800e0f4:	210b      	movs	r1, #11
 800e0f6:	4249      	negs	r1, r1
 800e0f8:	468c      	mov	ip, r1
 800e0fa:	449c      	add	ip, r3
 800e0fc:	2b0b      	cmp	r3, #11
 800e0fe:	d010      	beq.n	800e122 <__b2d+0x8e>
 800e100:	4661      	mov	r1, ip
 800e102:	2320      	movs	r3, #32
 800e104:	408c      	lsls	r4, r1
 800e106:	1a5b      	subs	r3, r3, r1
 800e108:	0039      	movs	r1, r7
 800e10a:	40d9      	lsrs	r1, r3
 800e10c:	430c      	orrs	r4, r1
 800e10e:	4322      	orrs	r2, r4
 800e110:	0011      	movs	r1, r2
 800e112:	2200      	movs	r2, #0
 800e114:	42b5      	cmp	r5, r6
 800e116:	d901      	bls.n	800e11c <__b2d+0x88>
 800e118:	3d04      	subs	r5, #4
 800e11a:	682a      	ldr	r2, [r5, #0]
 800e11c:	4664      	mov	r4, ip
 800e11e:	40a7      	lsls	r7, r4
 800e120:	e7dd      	b.n	800e0de <__b2d+0x4a>
 800e122:	4322      	orrs	r2, r4
 800e124:	0011      	movs	r1, r2
 800e126:	e7dc      	b.n	800e0e2 <__b2d+0x4e>
 800e128:	3ff00000 	.word	0x3ff00000

0800e12c <__d2b>:
 800e12c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e12e:	2101      	movs	r1, #1
 800e130:	0016      	movs	r6, r2
 800e132:	001f      	movs	r7, r3
 800e134:	f7ff fbfe 	bl	800d934 <_Balloc>
 800e138:	1e04      	subs	r4, r0, #0
 800e13a:	d105      	bne.n	800e148 <__d2b+0x1c>
 800e13c:	0022      	movs	r2, r4
 800e13e:	4b25      	ldr	r3, [pc, #148]	@ (800e1d4 <__d2b+0xa8>)
 800e140:	4825      	ldr	r0, [pc, #148]	@ (800e1d8 <__d2b+0xac>)
 800e142:	4926      	ldr	r1, [pc, #152]	@ (800e1dc <__d2b+0xb0>)
 800e144:	f001 f928 	bl	800f398 <__assert_func>
 800e148:	033b      	lsls	r3, r7, #12
 800e14a:	007d      	lsls	r5, r7, #1
 800e14c:	0b1b      	lsrs	r3, r3, #12
 800e14e:	0d6d      	lsrs	r5, r5, #21
 800e150:	d002      	beq.n	800e158 <__d2b+0x2c>
 800e152:	2280      	movs	r2, #128	@ 0x80
 800e154:	0352      	lsls	r2, r2, #13
 800e156:	4313      	orrs	r3, r2
 800e158:	9301      	str	r3, [sp, #4]
 800e15a:	2e00      	cmp	r6, #0
 800e15c:	d025      	beq.n	800e1aa <__d2b+0x7e>
 800e15e:	4668      	mov	r0, sp
 800e160:	9600      	str	r6, [sp, #0]
 800e162:	f7ff fd00 	bl	800db66 <__lo0bits>
 800e166:	9b01      	ldr	r3, [sp, #4]
 800e168:	9900      	ldr	r1, [sp, #0]
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d01b      	beq.n	800e1a6 <__d2b+0x7a>
 800e16e:	2220      	movs	r2, #32
 800e170:	001e      	movs	r6, r3
 800e172:	1a12      	subs	r2, r2, r0
 800e174:	4096      	lsls	r6, r2
 800e176:	0032      	movs	r2, r6
 800e178:	40c3      	lsrs	r3, r0
 800e17a:	430a      	orrs	r2, r1
 800e17c:	6162      	str	r2, [r4, #20]
 800e17e:	9301      	str	r3, [sp, #4]
 800e180:	9e01      	ldr	r6, [sp, #4]
 800e182:	61a6      	str	r6, [r4, #24]
 800e184:	1e73      	subs	r3, r6, #1
 800e186:	419e      	sbcs	r6, r3
 800e188:	3601      	adds	r6, #1
 800e18a:	6126      	str	r6, [r4, #16]
 800e18c:	2d00      	cmp	r5, #0
 800e18e:	d014      	beq.n	800e1ba <__d2b+0x8e>
 800e190:	2635      	movs	r6, #53	@ 0x35
 800e192:	4b13      	ldr	r3, [pc, #76]	@ (800e1e0 <__d2b+0xb4>)
 800e194:	18ed      	adds	r5, r5, r3
 800e196:	9b08      	ldr	r3, [sp, #32]
 800e198:	182d      	adds	r5, r5, r0
 800e19a:	601d      	str	r5, [r3, #0]
 800e19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e19e:	1a36      	subs	r6, r6, r0
 800e1a0:	601e      	str	r6, [r3, #0]
 800e1a2:	0020      	movs	r0, r4
 800e1a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e1a6:	6161      	str	r1, [r4, #20]
 800e1a8:	e7ea      	b.n	800e180 <__d2b+0x54>
 800e1aa:	a801      	add	r0, sp, #4
 800e1ac:	f7ff fcdb 	bl	800db66 <__lo0bits>
 800e1b0:	9b01      	ldr	r3, [sp, #4]
 800e1b2:	2601      	movs	r6, #1
 800e1b4:	6163      	str	r3, [r4, #20]
 800e1b6:	3020      	adds	r0, #32
 800e1b8:	e7e7      	b.n	800e18a <__d2b+0x5e>
 800e1ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e1e4 <__d2b+0xb8>)
 800e1bc:	18c0      	adds	r0, r0, r3
 800e1be:	9b08      	ldr	r3, [sp, #32]
 800e1c0:	6018      	str	r0, [r3, #0]
 800e1c2:	4b09      	ldr	r3, [pc, #36]	@ (800e1e8 <__d2b+0xbc>)
 800e1c4:	18f3      	adds	r3, r6, r3
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	18e3      	adds	r3, r4, r3
 800e1ca:	6958      	ldr	r0, [r3, #20]
 800e1cc:	f7ff fcaa 	bl	800db24 <__hi0bits>
 800e1d0:	0176      	lsls	r6, r6, #5
 800e1d2:	e7e3      	b.n	800e19c <__d2b+0x70>
 800e1d4:	0801097e 	.word	0x0801097e
 800e1d8:	0801098f 	.word	0x0801098f
 800e1dc:	0000030f 	.word	0x0000030f
 800e1e0:	fffffbcd 	.word	0xfffffbcd
 800e1e4:	fffffbce 	.word	0xfffffbce
 800e1e8:	3fffffff 	.word	0x3fffffff

0800e1ec <__ratio>:
 800e1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ee:	b087      	sub	sp, #28
 800e1f0:	000f      	movs	r7, r1
 800e1f2:	a904      	add	r1, sp, #16
 800e1f4:	0006      	movs	r6, r0
 800e1f6:	f7ff ff4d 	bl	800e094 <__b2d>
 800e1fa:	9000      	str	r0, [sp, #0]
 800e1fc:	9101      	str	r1, [sp, #4]
 800e1fe:	9b00      	ldr	r3, [sp, #0]
 800e200:	9c01      	ldr	r4, [sp, #4]
 800e202:	0038      	movs	r0, r7
 800e204:	a905      	add	r1, sp, #20
 800e206:	9302      	str	r3, [sp, #8]
 800e208:	9403      	str	r4, [sp, #12]
 800e20a:	f7ff ff43 	bl	800e094 <__b2d>
 800e20e:	000d      	movs	r5, r1
 800e210:	0002      	movs	r2, r0
 800e212:	000b      	movs	r3, r1
 800e214:	6930      	ldr	r0, [r6, #16]
 800e216:	6939      	ldr	r1, [r7, #16]
 800e218:	9e04      	ldr	r6, [sp, #16]
 800e21a:	1a40      	subs	r0, r0, r1
 800e21c:	9905      	ldr	r1, [sp, #20]
 800e21e:	0140      	lsls	r0, r0, #5
 800e220:	1a71      	subs	r1, r6, r1
 800e222:	1841      	adds	r1, r0, r1
 800e224:	0508      	lsls	r0, r1, #20
 800e226:	2900      	cmp	r1, #0
 800e228:	dd08      	ble.n	800e23c <__ratio+0x50>
 800e22a:	9901      	ldr	r1, [sp, #4]
 800e22c:	1841      	adds	r1, r0, r1
 800e22e:	9103      	str	r1, [sp, #12]
 800e230:	9802      	ldr	r0, [sp, #8]
 800e232:	9903      	ldr	r1, [sp, #12]
 800e234:	f7f3 f910 	bl	8001458 <__aeabi_ddiv>
 800e238:	b007      	add	sp, #28
 800e23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e23c:	1a2b      	subs	r3, r5, r0
 800e23e:	e7f7      	b.n	800e230 <__ratio+0x44>

0800e240 <__copybits>:
 800e240:	b570      	push	{r4, r5, r6, lr}
 800e242:	0014      	movs	r4, r2
 800e244:	0005      	movs	r5, r0
 800e246:	3901      	subs	r1, #1
 800e248:	6913      	ldr	r3, [r2, #16]
 800e24a:	1149      	asrs	r1, r1, #5
 800e24c:	3101      	adds	r1, #1
 800e24e:	0089      	lsls	r1, r1, #2
 800e250:	3414      	adds	r4, #20
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	1841      	adds	r1, r0, r1
 800e256:	18e3      	adds	r3, r4, r3
 800e258:	42a3      	cmp	r3, r4
 800e25a:	d80d      	bhi.n	800e278 <__copybits+0x38>
 800e25c:	0014      	movs	r4, r2
 800e25e:	3411      	adds	r4, #17
 800e260:	2500      	movs	r5, #0
 800e262:	429c      	cmp	r4, r3
 800e264:	d803      	bhi.n	800e26e <__copybits+0x2e>
 800e266:	1a9b      	subs	r3, r3, r2
 800e268:	3b11      	subs	r3, #17
 800e26a:	089b      	lsrs	r3, r3, #2
 800e26c:	009d      	lsls	r5, r3, #2
 800e26e:	2300      	movs	r3, #0
 800e270:	1940      	adds	r0, r0, r5
 800e272:	4281      	cmp	r1, r0
 800e274:	d803      	bhi.n	800e27e <__copybits+0x3e>
 800e276:	bd70      	pop	{r4, r5, r6, pc}
 800e278:	cc40      	ldmia	r4!, {r6}
 800e27a:	c540      	stmia	r5!, {r6}
 800e27c:	e7ec      	b.n	800e258 <__copybits+0x18>
 800e27e:	c008      	stmia	r0!, {r3}
 800e280:	e7f7      	b.n	800e272 <__copybits+0x32>

0800e282 <__any_on>:
 800e282:	0002      	movs	r2, r0
 800e284:	6900      	ldr	r0, [r0, #16]
 800e286:	b510      	push	{r4, lr}
 800e288:	3214      	adds	r2, #20
 800e28a:	114b      	asrs	r3, r1, #5
 800e28c:	4298      	cmp	r0, r3
 800e28e:	db13      	blt.n	800e2b8 <__any_on+0x36>
 800e290:	dd0c      	ble.n	800e2ac <__any_on+0x2a>
 800e292:	241f      	movs	r4, #31
 800e294:	0008      	movs	r0, r1
 800e296:	4020      	ands	r0, r4
 800e298:	4221      	tst	r1, r4
 800e29a:	d007      	beq.n	800e2ac <__any_on+0x2a>
 800e29c:	0099      	lsls	r1, r3, #2
 800e29e:	588c      	ldr	r4, [r1, r2]
 800e2a0:	0021      	movs	r1, r4
 800e2a2:	40c1      	lsrs	r1, r0
 800e2a4:	4081      	lsls	r1, r0
 800e2a6:	2001      	movs	r0, #1
 800e2a8:	428c      	cmp	r4, r1
 800e2aa:	d104      	bne.n	800e2b6 <__any_on+0x34>
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	18d3      	adds	r3, r2, r3
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d803      	bhi.n	800e2bc <__any_on+0x3a>
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	bd10      	pop	{r4, pc}
 800e2b8:	0003      	movs	r3, r0
 800e2ba:	e7f7      	b.n	800e2ac <__any_on+0x2a>
 800e2bc:	3b04      	subs	r3, #4
 800e2be:	6819      	ldr	r1, [r3, #0]
 800e2c0:	2900      	cmp	r1, #0
 800e2c2:	d0f5      	beq.n	800e2b0 <__any_on+0x2e>
 800e2c4:	2001      	movs	r0, #1
 800e2c6:	e7f6      	b.n	800e2b6 <__any_on+0x34>

0800e2c8 <sulp>:
 800e2c8:	b570      	push	{r4, r5, r6, lr}
 800e2ca:	0016      	movs	r6, r2
 800e2cc:	000d      	movs	r5, r1
 800e2ce:	f7ff fec1 	bl	800e054 <__ulp>
 800e2d2:	2e00      	cmp	r6, #0
 800e2d4:	d00d      	beq.n	800e2f2 <sulp+0x2a>
 800e2d6:	236b      	movs	r3, #107	@ 0x6b
 800e2d8:	006a      	lsls	r2, r5, #1
 800e2da:	0d52      	lsrs	r2, r2, #21
 800e2dc:	1a9b      	subs	r3, r3, r2
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	dd07      	ble.n	800e2f2 <sulp+0x2a>
 800e2e2:	2400      	movs	r4, #0
 800e2e4:	4a03      	ldr	r2, [pc, #12]	@ (800e2f4 <sulp+0x2c>)
 800e2e6:	051b      	lsls	r3, r3, #20
 800e2e8:	189d      	adds	r5, r3, r2
 800e2ea:	002b      	movs	r3, r5
 800e2ec:	0022      	movs	r2, r4
 800e2ee:	f7f3 fcf7 	bl	8001ce0 <__aeabi_dmul>
 800e2f2:	bd70      	pop	{r4, r5, r6, pc}
 800e2f4:	3ff00000 	.word	0x3ff00000

0800e2f8 <_strtod_l>:
 800e2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2fa:	b0a3      	sub	sp, #140	@ 0x8c
 800e2fc:	921b      	str	r2, [sp, #108]	@ 0x6c
 800e2fe:	2200      	movs	r2, #0
 800e300:	2600      	movs	r6, #0
 800e302:	2700      	movs	r7, #0
 800e304:	9005      	str	r0, [sp, #20]
 800e306:	9109      	str	r1, [sp, #36]	@ 0x24
 800e308:	921e      	str	r2, [sp, #120]	@ 0x78
 800e30a:	911d      	str	r1, [sp, #116]	@ 0x74
 800e30c:	780a      	ldrb	r2, [r1, #0]
 800e30e:	2a2b      	cmp	r2, #43	@ 0x2b
 800e310:	d053      	beq.n	800e3ba <_strtod_l+0xc2>
 800e312:	d83f      	bhi.n	800e394 <_strtod_l+0x9c>
 800e314:	2a0d      	cmp	r2, #13
 800e316:	d839      	bhi.n	800e38c <_strtod_l+0x94>
 800e318:	2a08      	cmp	r2, #8
 800e31a:	d839      	bhi.n	800e390 <_strtod_l+0x98>
 800e31c:	2a00      	cmp	r2, #0
 800e31e:	d042      	beq.n	800e3a6 <_strtod_l+0xae>
 800e320:	2200      	movs	r2, #0
 800e322:	9212      	str	r2, [sp, #72]	@ 0x48
 800e324:	2100      	movs	r1, #0
 800e326:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800e328:	910c      	str	r1, [sp, #48]	@ 0x30
 800e32a:	782a      	ldrb	r2, [r5, #0]
 800e32c:	2a30      	cmp	r2, #48	@ 0x30
 800e32e:	d000      	beq.n	800e332 <_strtod_l+0x3a>
 800e330:	e083      	b.n	800e43a <_strtod_l+0x142>
 800e332:	786a      	ldrb	r2, [r5, #1]
 800e334:	3120      	adds	r1, #32
 800e336:	438a      	bics	r2, r1
 800e338:	2a58      	cmp	r2, #88	@ 0x58
 800e33a:	d000      	beq.n	800e33e <_strtod_l+0x46>
 800e33c:	e073      	b.n	800e426 <_strtod_l+0x12e>
 800e33e:	9302      	str	r3, [sp, #8]
 800e340:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e342:	4a95      	ldr	r2, [pc, #596]	@ (800e598 <_strtod_l+0x2a0>)
 800e344:	9301      	str	r3, [sp, #4]
 800e346:	ab1e      	add	r3, sp, #120	@ 0x78
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	9805      	ldr	r0, [sp, #20]
 800e34c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e34e:	a91d      	add	r1, sp, #116	@ 0x74
 800e350:	f001 f8d6 	bl	800f500 <__gethex>
 800e354:	230f      	movs	r3, #15
 800e356:	0002      	movs	r2, r0
 800e358:	401a      	ands	r2, r3
 800e35a:	0004      	movs	r4, r0
 800e35c:	9206      	str	r2, [sp, #24]
 800e35e:	4218      	tst	r0, r3
 800e360:	d005      	beq.n	800e36e <_strtod_l+0x76>
 800e362:	2a06      	cmp	r2, #6
 800e364:	d12b      	bne.n	800e3be <_strtod_l+0xc6>
 800e366:	2300      	movs	r3, #0
 800e368:	3501      	adds	r5, #1
 800e36a:	951d      	str	r5, [sp, #116]	@ 0x74
 800e36c:	9312      	str	r3, [sp, #72]	@ 0x48
 800e36e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <_strtod_l+0x82>
 800e374:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e376:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e378:	6013      	str	r3, [r2, #0]
 800e37a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d019      	beq.n	800e3b4 <_strtod_l+0xbc>
 800e380:	2380      	movs	r3, #128	@ 0x80
 800e382:	0030      	movs	r0, r6
 800e384:	061b      	lsls	r3, r3, #24
 800e386:	18f9      	adds	r1, r7, r3
 800e388:	b023      	add	sp, #140	@ 0x8c
 800e38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e38c:	2a20      	cmp	r2, #32
 800e38e:	d1c7      	bne.n	800e320 <_strtod_l+0x28>
 800e390:	3101      	adds	r1, #1
 800e392:	e7ba      	b.n	800e30a <_strtod_l+0x12>
 800e394:	2a2d      	cmp	r2, #45	@ 0x2d
 800e396:	d1c3      	bne.n	800e320 <_strtod_l+0x28>
 800e398:	3a2c      	subs	r2, #44	@ 0x2c
 800e39a:	9212      	str	r2, [sp, #72]	@ 0x48
 800e39c:	1c4a      	adds	r2, r1, #1
 800e39e:	921d      	str	r2, [sp, #116]	@ 0x74
 800e3a0:	784a      	ldrb	r2, [r1, #1]
 800e3a2:	2a00      	cmp	r2, #0
 800e3a4:	d1be      	bne.n	800e324 <_strtod_l+0x2c>
 800e3a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3a8:	931d      	str	r3, [sp, #116]	@ 0x74
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	9312      	str	r3, [sp, #72]	@ 0x48
 800e3ae:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d1df      	bne.n	800e374 <_strtod_l+0x7c>
 800e3b4:	0030      	movs	r0, r6
 800e3b6:	0039      	movs	r1, r7
 800e3b8:	e7e6      	b.n	800e388 <_strtod_l+0x90>
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	e7ed      	b.n	800e39a <_strtod_l+0xa2>
 800e3be:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e3c0:	2a00      	cmp	r2, #0
 800e3c2:	d007      	beq.n	800e3d4 <_strtod_l+0xdc>
 800e3c4:	2135      	movs	r1, #53	@ 0x35
 800e3c6:	a820      	add	r0, sp, #128	@ 0x80
 800e3c8:	f7ff ff3a 	bl	800e240 <__copybits>
 800e3cc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e3ce:	9805      	ldr	r0, [sp, #20]
 800e3d0:	f7ff faf4 	bl	800d9bc <_Bfree>
 800e3d4:	9806      	ldr	r0, [sp, #24]
 800e3d6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e3d8:	3801      	subs	r0, #1
 800e3da:	2804      	cmp	r0, #4
 800e3dc:	d806      	bhi.n	800e3ec <_strtod_l+0xf4>
 800e3de:	f7f1 fe9b 	bl	8000118 <__gnu_thumb1_case_uqi>
 800e3e2:	0312      	.short	0x0312
 800e3e4:	1e1c      	.short	0x1e1c
 800e3e6:	12          	.byte	0x12
 800e3e7:	00          	.byte	0x00
 800e3e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e3ea:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800e3ec:	05e4      	lsls	r4, r4, #23
 800e3ee:	d502      	bpl.n	800e3f6 <_strtod_l+0xfe>
 800e3f0:	2380      	movs	r3, #128	@ 0x80
 800e3f2:	061b      	lsls	r3, r3, #24
 800e3f4:	431f      	orrs	r7, r3
 800e3f6:	4b69      	ldr	r3, [pc, #420]	@ (800e59c <_strtod_l+0x2a4>)
 800e3f8:	423b      	tst	r3, r7
 800e3fa:	d1b8      	bne.n	800e36e <_strtod_l+0x76>
 800e3fc:	f7fe fad6 	bl	800c9ac <__errno>
 800e400:	2322      	movs	r3, #34	@ 0x22
 800e402:	6003      	str	r3, [r0, #0]
 800e404:	e7b3      	b.n	800e36e <_strtod_l+0x76>
 800e406:	4966      	ldr	r1, [pc, #408]	@ (800e5a0 <_strtod_l+0x2a8>)
 800e408:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e40a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e40c:	400a      	ands	r2, r1
 800e40e:	4965      	ldr	r1, [pc, #404]	@ (800e5a4 <_strtod_l+0x2ac>)
 800e410:	185b      	adds	r3, r3, r1
 800e412:	051b      	lsls	r3, r3, #20
 800e414:	431a      	orrs	r2, r3
 800e416:	0017      	movs	r7, r2
 800e418:	e7e8      	b.n	800e3ec <_strtod_l+0xf4>
 800e41a:	4f60      	ldr	r7, [pc, #384]	@ (800e59c <_strtod_l+0x2a4>)
 800e41c:	e7e6      	b.n	800e3ec <_strtod_l+0xf4>
 800e41e:	2601      	movs	r6, #1
 800e420:	4f61      	ldr	r7, [pc, #388]	@ (800e5a8 <_strtod_l+0x2b0>)
 800e422:	4276      	negs	r6, r6
 800e424:	e7e2      	b.n	800e3ec <_strtod_l+0xf4>
 800e426:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e428:	1c5a      	adds	r2, r3, #1
 800e42a:	921d      	str	r2, [sp, #116]	@ 0x74
 800e42c:	785b      	ldrb	r3, [r3, #1]
 800e42e:	2b30      	cmp	r3, #48	@ 0x30
 800e430:	d0f9      	beq.n	800e426 <_strtod_l+0x12e>
 800e432:	2b00      	cmp	r3, #0
 800e434:	d09b      	beq.n	800e36e <_strtod_l+0x76>
 800e436:	2301      	movs	r3, #1
 800e438:	930c      	str	r3, [sp, #48]	@ 0x30
 800e43a:	2500      	movs	r5, #0
 800e43c:	220a      	movs	r2, #10
 800e43e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e440:	950d      	str	r5, [sp, #52]	@ 0x34
 800e442:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e444:	9508      	str	r5, [sp, #32]
 800e446:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e448:	7804      	ldrb	r4, [r0, #0]
 800e44a:	0023      	movs	r3, r4
 800e44c:	3b30      	subs	r3, #48	@ 0x30
 800e44e:	b2d9      	uxtb	r1, r3
 800e450:	2909      	cmp	r1, #9
 800e452:	d927      	bls.n	800e4a4 <_strtod_l+0x1ac>
 800e454:	2201      	movs	r2, #1
 800e456:	4955      	ldr	r1, [pc, #340]	@ (800e5ac <_strtod_l+0x2b4>)
 800e458:	f000 ff6a 	bl	800f330 <strncmp>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d031      	beq.n	800e4c4 <_strtod_l+0x1cc>
 800e460:	2000      	movs	r0, #0
 800e462:	0023      	movs	r3, r4
 800e464:	4684      	mov	ip, r0
 800e466:	9a08      	ldr	r2, [sp, #32]
 800e468:	900e      	str	r0, [sp, #56]	@ 0x38
 800e46a:	9206      	str	r2, [sp, #24]
 800e46c:	2220      	movs	r2, #32
 800e46e:	0019      	movs	r1, r3
 800e470:	4391      	bics	r1, r2
 800e472:	000a      	movs	r2, r1
 800e474:	2100      	movs	r1, #0
 800e476:	9107      	str	r1, [sp, #28]
 800e478:	2a45      	cmp	r2, #69	@ 0x45
 800e47a:	d000      	beq.n	800e47e <_strtod_l+0x186>
 800e47c:	e0c0      	b.n	800e600 <_strtod_l+0x308>
 800e47e:	9b06      	ldr	r3, [sp, #24]
 800e480:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e482:	4303      	orrs	r3, r0
 800e484:	4313      	orrs	r3, r2
 800e486:	428b      	cmp	r3, r1
 800e488:	d08d      	beq.n	800e3a6 <_strtod_l+0xae>
 800e48a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e48c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e48e:	3301      	adds	r3, #1
 800e490:	931d      	str	r3, [sp, #116]	@ 0x74
 800e492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e494:	785b      	ldrb	r3, [r3, #1]
 800e496:	2b2b      	cmp	r3, #43	@ 0x2b
 800e498:	d070      	beq.n	800e57c <_strtod_l+0x284>
 800e49a:	000c      	movs	r4, r1
 800e49c:	2b2d      	cmp	r3, #45	@ 0x2d
 800e49e:	d173      	bne.n	800e588 <_strtod_l+0x290>
 800e4a0:	2401      	movs	r4, #1
 800e4a2:	e06c      	b.n	800e57e <_strtod_l+0x286>
 800e4a4:	9908      	ldr	r1, [sp, #32]
 800e4a6:	2908      	cmp	r1, #8
 800e4a8:	dc09      	bgt.n	800e4be <_strtod_l+0x1c6>
 800e4aa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e4ac:	4351      	muls	r1, r2
 800e4ae:	185b      	adds	r3, r3, r1
 800e4b0:	930d      	str	r3, [sp, #52]	@ 0x34
 800e4b2:	9b08      	ldr	r3, [sp, #32]
 800e4b4:	3001      	adds	r0, #1
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	9308      	str	r3, [sp, #32]
 800e4ba:	901d      	str	r0, [sp, #116]	@ 0x74
 800e4bc:	e7c3      	b.n	800e446 <_strtod_l+0x14e>
 800e4be:	4355      	muls	r5, r2
 800e4c0:	195d      	adds	r5, r3, r5
 800e4c2:	e7f6      	b.n	800e4b2 <_strtod_l+0x1ba>
 800e4c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e4c6:	1c5a      	adds	r2, r3, #1
 800e4c8:	921d      	str	r2, [sp, #116]	@ 0x74
 800e4ca:	9a08      	ldr	r2, [sp, #32]
 800e4cc:	785b      	ldrb	r3, [r3, #1]
 800e4ce:	2a00      	cmp	r2, #0
 800e4d0:	d03a      	beq.n	800e548 <_strtod_l+0x250>
 800e4d2:	900e      	str	r0, [sp, #56]	@ 0x38
 800e4d4:	9206      	str	r2, [sp, #24]
 800e4d6:	001a      	movs	r2, r3
 800e4d8:	3a30      	subs	r2, #48	@ 0x30
 800e4da:	2a09      	cmp	r2, #9
 800e4dc:	d912      	bls.n	800e504 <_strtod_l+0x20c>
 800e4de:	2201      	movs	r2, #1
 800e4e0:	4694      	mov	ip, r2
 800e4e2:	e7c3      	b.n	800e46c <_strtod_l+0x174>
 800e4e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e4e6:	3001      	adds	r0, #1
 800e4e8:	1c5a      	adds	r2, r3, #1
 800e4ea:	921d      	str	r2, [sp, #116]	@ 0x74
 800e4ec:	785b      	ldrb	r3, [r3, #1]
 800e4ee:	2b30      	cmp	r3, #48	@ 0x30
 800e4f0:	d0f8      	beq.n	800e4e4 <_strtod_l+0x1ec>
 800e4f2:	001a      	movs	r2, r3
 800e4f4:	3a31      	subs	r2, #49	@ 0x31
 800e4f6:	2a08      	cmp	r2, #8
 800e4f8:	d83b      	bhi.n	800e572 <_strtod_l+0x27a>
 800e4fa:	900e      	str	r0, [sp, #56]	@ 0x38
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e500:	9006      	str	r0, [sp, #24]
 800e502:	9213      	str	r2, [sp, #76]	@ 0x4c
 800e504:	001a      	movs	r2, r3
 800e506:	1c41      	adds	r1, r0, #1
 800e508:	3a30      	subs	r2, #48	@ 0x30
 800e50a:	2b30      	cmp	r3, #48	@ 0x30
 800e50c:	d016      	beq.n	800e53c <_strtod_l+0x244>
 800e50e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e510:	185b      	adds	r3, r3, r1
 800e512:	930e      	str	r3, [sp, #56]	@ 0x38
 800e514:	9b06      	ldr	r3, [sp, #24]
 800e516:	210a      	movs	r1, #10
 800e518:	469c      	mov	ip, r3
 800e51a:	4484      	add	ip, r0
 800e51c:	459c      	cmp	ip, r3
 800e51e:	d115      	bne.n	800e54c <_strtod_l+0x254>
 800e520:	9906      	ldr	r1, [sp, #24]
 800e522:	9b06      	ldr	r3, [sp, #24]
 800e524:	3101      	adds	r1, #1
 800e526:	1809      	adds	r1, r1, r0
 800e528:	181b      	adds	r3, r3, r0
 800e52a:	9106      	str	r1, [sp, #24]
 800e52c:	2b08      	cmp	r3, #8
 800e52e:	dc19      	bgt.n	800e564 <_strtod_l+0x26c>
 800e530:	230a      	movs	r3, #10
 800e532:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e534:	434b      	muls	r3, r1
 800e536:	2100      	movs	r1, #0
 800e538:	18d3      	adds	r3, r2, r3
 800e53a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e53c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e53e:	0008      	movs	r0, r1
 800e540:	1c5a      	adds	r2, r3, #1
 800e542:	921d      	str	r2, [sp, #116]	@ 0x74
 800e544:	785b      	ldrb	r3, [r3, #1]
 800e546:	e7c6      	b.n	800e4d6 <_strtod_l+0x1de>
 800e548:	9808      	ldr	r0, [sp, #32]
 800e54a:	e7d0      	b.n	800e4ee <_strtod_l+0x1f6>
 800e54c:	1c5c      	adds	r4, r3, #1
 800e54e:	2b08      	cmp	r3, #8
 800e550:	dc04      	bgt.n	800e55c <_strtod_l+0x264>
 800e552:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e554:	434b      	muls	r3, r1
 800e556:	930d      	str	r3, [sp, #52]	@ 0x34
 800e558:	0023      	movs	r3, r4
 800e55a:	e7df      	b.n	800e51c <_strtod_l+0x224>
 800e55c:	2c10      	cmp	r4, #16
 800e55e:	dcfb      	bgt.n	800e558 <_strtod_l+0x260>
 800e560:	434d      	muls	r5, r1
 800e562:	e7f9      	b.n	800e558 <_strtod_l+0x260>
 800e564:	2100      	movs	r1, #0
 800e566:	2b0f      	cmp	r3, #15
 800e568:	dce8      	bgt.n	800e53c <_strtod_l+0x244>
 800e56a:	230a      	movs	r3, #10
 800e56c:	435d      	muls	r5, r3
 800e56e:	1955      	adds	r5, r2, r5
 800e570:	e7e4      	b.n	800e53c <_strtod_l+0x244>
 800e572:	2200      	movs	r2, #0
 800e574:	920e      	str	r2, [sp, #56]	@ 0x38
 800e576:	9206      	str	r2, [sp, #24]
 800e578:	3201      	adds	r2, #1
 800e57a:	e7b1      	b.n	800e4e0 <_strtod_l+0x1e8>
 800e57c:	2400      	movs	r4, #0
 800e57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e580:	3302      	adds	r3, #2
 800e582:	931d      	str	r3, [sp, #116]	@ 0x74
 800e584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e586:	789b      	ldrb	r3, [r3, #2]
 800e588:	001a      	movs	r2, r3
 800e58a:	3a30      	subs	r2, #48	@ 0x30
 800e58c:	2a09      	cmp	r2, #9
 800e58e:	d913      	bls.n	800e5b8 <_strtod_l+0x2c0>
 800e590:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e592:	921d      	str	r2, [sp, #116]	@ 0x74
 800e594:	2200      	movs	r2, #0
 800e596:	e032      	b.n	800e5fe <_strtod_l+0x306>
 800e598:	08010b00 	.word	0x08010b00
 800e59c:	7ff00000 	.word	0x7ff00000
 800e5a0:	ffefffff 	.word	0xffefffff
 800e5a4:	00000433 	.word	0x00000433
 800e5a8:	7fffffff 	.word	0x7fffffff
 800e5ac:	08010ae8 	.word	0x08010ae8
 800e5b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e5b2:	1c5a      	adds	r2, r3, #1
 800e5b4:	921d      	str	r2, [sp, #116]	@ 0x74
 800e5b6:	785b      	ldrb	r3, [r3, #1]
 800e5b8:	2b30      	cmp	r3, #48	@ 0x30
 800e5ba:	d0f9      	beq.n	800e5b0 <_strtod_l+0x2b8>
 800e5bc:	2200      	movs	r2, #0
 800e5be:	9207      	str	r2, [sp, #28]
 800e5c0:	001a      	movs	r2, r3
 800e5c2:	3a31      	subs	r2, #49	@ 0x31
 800e5c4:	2a08      	cmp	r2, #8
 800e5c6:	d81b      	bhi.n	800e600 <_strtod_l+0x308>
 800e5c8:	3b30      	subs	r3, #48	@ 0x30
 800e5ca:	9310      	str	r3, [sp, #64]	@ 0x40
 800e5cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e5ce:	9307      	str	r3, [sp, #28]
 800e5d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e5d2:	1c59      	adds	r1, r3, #1
 800e5d4:	911d      	str	r1, [sp, #116]	@ 0x74
 800e5d6:	785b      	ldrb	r3, [r3, #1]
 800e5d8:	001a      	movs	r2, r3
 800e5da:	3a30      	subs	r2, #48	@ 0x30
 800e5dc:	2a09      	cmp	r2, #9
 800e5de:	d93a      	bls.n	800e656 <_strtod_l+0x35e>
 800e5e0:	9a07      	ldr	r2, [sp, #28]
 800e5e2:	1a8a      	subs	r2, r1, r2
 800e5e4:	49b4      	ldr	r1, [pc, #720]	@ (800e8b8 <_strtod_l+0x5c0>)
 800e5e6:	9107      	str	r1, [sp, #28]
 800e5e8:	2a08      	cmp	r2, #8
 800e5ea:	dc04      	bgt.n	800e5f6 <_strtod_l+0x2fe>
 800e5ec:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e5ee:	9207      	str	r2, [sp, #28]
 800e5f0:	428a      	cmp	r2, r1
 800e5f2:	dd00      	ble.n	800e5f6 <_strtod_l+0x2fe>
 800e5f4:	9107      	str	r1, [sp, #28]
 800e5f6:	2c00      	cmp	r4, #0
 800e5f8:	d002      	beq.n	800e600 <_strtod_l+0x308>
 800e5fa:	9a07      	ldr	r2, [sp, #28]
 800e5fc:	4252      	negs	r2, r2
 800e5fe:	9207      	str	r2, [sp, #28]
 800e600:	9a06      	ldr	r2, [sp, #24]
 800e602:	2a00      	cmp	r2, #0
 800e604:	d14d      	bne.n	800e6a2 <_strtod_l+0x3aa>
 800e606:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e608:	4310      	orrs	r0, r2
 800e60a:	d000      	beq.n	800e60e <_strtod_l+0x316>
 800e60c:	e6af      	b.n	800e36e <_strtod_l+0x76>
 800e60e:	4662      	mov	r2, ip
 800e610:	2a00      	cmp	r2, #0
 800e612:	d000      	beq.n	800e616 <_strtod_l+0x31e>
 800e614:	e6c7      	b.n	800e3a6 <_strtod_l+0xae>
 800e616:	2b69      	cmp	r3, #105	@ 0x69
 800e618:	d027      	beq.n	800e66a <_strtod_l+0x372>
 800e61a:	dc23      	bgt.n	800e664 <_strtod_l+0x36c>
 800e61c:	2b49      	cmp	r3, #73	@ 0x49
 800e61e:	d024      	beq.n	800e66a <_strtod_l+0x372>
 800e620:	2b4e      	cmp	r3, #78	@ 0x4e
 800e622:	d000      	beq.n	800e626 <_strtod_l+0x32e>
 800e624:	e6bf      	b.n	800e3a6 <_strtod_l+0xae>
 800e626:	49a5      	ldr	r1, [pc, #660]	@ (800e8bc <_strtod_l+0x5c4>)
 800e628:	a81d      	add	r0, sp, #116	@ 0x74
 800e62a:	f001 f99f 	bl	800f96c <__match>
 800e62e:	2800      	cmp	r0, #0
 800e630:	d100      	bne.n	800e634 <_strtod_l+0x33c>
 800e632:	e6b8      	b.n	800e3a6 <_strtod_l+0xae>
 800e634:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	2b28      	cmp	r3, #40	@ 0x28
 800e63a:	d12c      	bne.n	800e696 <_strtod_l+0x39e>
 800e63c:	49a0      	ldr	r1, [pc, #640]	@ (800e8c0 <_strtod_l+0x5c8>)
 800e63e:	aa20      	add	r2, sp, #128	@ 0x80
 800e640:	a81d      	add	r0, sp, #116	@ 0x74
 800e642:	f001 f9a7 	bl	800f994 <__hexnan>
 800e646:	2805      	cmp	r0, #5
 800e648:	d125      	bne.n	800e696 <_strtod_l+0x39e>
 800e64a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e64c:	4a9d      	ldr	r2, [pc, #628]	@ (800e8c4 <_strtod_l+0x5cc>)
 800e64e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e650:	431a      	orrs	r2, r3
 800e652:	0017      	movs	r7, r2
 800e654:	e68b      	b.n	800e36e <_strtod_l+0x76>
 800e656:	220a      	movs	r2, #10
 800e658:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e65a:	434a      	muls	r2, r1
 800e65c:	18d2      	adds	r2, r2, r3
 800e65e:	3a30      	subs	r2, #48	@ 0x30
 800e660:	9210      	str	r2, [sp, #64]	@ 0x40
 800e662:	e7b5      	b.n	800e5d0 <_strtod_l+0x2d8>
 800e664:	2b6e      	cmp	r3, #110	@ 0x6e
 800e666:	d0de      	beq.n	800e626 <_strtod_l+0x32e>
 800e668:	e69d      	b.n	800e3a6 <_strtod_l+0xae>
 800e66a:	4997      	ldr	r1, [pc, #604]	@ (800e8c8 <_strtod_l+0x5d0>)
 800e66c:	a81d      	add	r0, sp, #116	@ 0x74
 800e66e:	f001 f97d 	bl	800f96c <__match>
 800e672:	2800      	cmp	r0, #0
 800e674:	d100      	bne.n	800e678 <_strtod_l+0x380>
 800e676:	e696      	b.n	800e3a6 <_strtod_l+0xae>
 800e678:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e67a:	4994      	ldr	r1, [pc, #592]	@ (800e8cc <_strtod_l+0x5d4>)
 800e67c:	3b01      	subs	r3, #1
 800e67e:	a81d      	add	r0, sp, #116	@ 0x74
 800e680:	931d      	str	r3, [sp, #116]	@ 0x74
 800e682:	f001 f973 	bl	800f96c <__match>
 800e686:	2800      	cmp	r0, #0
 800e688:	d102      	bne.n	800e690 <_strtod_l+0x398>
 800e68a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e68c:	3301      	adds	r3, #1
 800e68e:	931d      	str	r3, [sp, #116]	@ 0x74
 800e690:	2600      	movs	r6, #0
 800e692:	4f8c      	ldr	r7, [pc, #560]	@ (800e8c4 <_strtod_l+0x5cc>)
 800e694:	e66b      	b.n	800e36e <_strtod_l+0x76>
 800e696:	488e      	ldr	r0, [pc, #568]	@ (800e8d0 <_strtod_l+0x5d8>)
 800e698:	f000 fe78 	bl	800f38c <nan>
 800e69c:	0006      	movs	r6, r0
 800e69e:	000f      	movs	r7, r1
 800e6a0:	e665      	b.n	800e36e <_strtod_l+0x76>
 800e6a2:	9b07      	ldr	r3, [sp, #28]
 800e6a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6a6:	1a9b      	subs	r3, r3, r2
 800e6a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e6aa:	9b08      	ldr	r3, [sp, #32]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d101      	bne.n	800e6b4 <_strtod_l+0x3bc>
 800e6b0:	9b06      	ldr	r3, [sp, #24]
 800e6b2:	9308      	str	r3, [sp, #32]
 800e6b4:	9c06      	ldr	r4, [sp, #24]
 800e6b6:	2c10      	cmp	r4, #16
 800e6b8:	dd00      	ble.n	800e6bc <_strtod_l+0x3c4>
 800e6ba:	2410      	movs	r4, #16
 800e6bc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e6be:	f7f4 f9ff 	bl	8002ac0 <__aeabi_ui2d>
 800e6c2:	9b06      	ldr	r3, [sp, #24]
 800e6c4:	0006      	movs	r6, r0
 800e6c6:	000f      	movs	r7, r1
 800e6c8:	2b09      	cmp	r3, #9
 800e6ca:	dc13      	bgt.n	800e6f4 <_strtod_l+0x3fc>
 800e6cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d100      	bne.n	800e6d4 <_strtod_l+0x3dc>
 800e6d2:	e64c      	b.n	800e36e <_strtod_l+0x76>
 800e6d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	dc00      	bgt.n	800e6dc <_strtod_l+0x3e4>
 800e6da:	e07e      	b.n	800e7da <_strtod_l+0x4e2>
 800e6dc:	2b16      	cmp	r3, #22
 800e6de:	dc63      	bgt.n	800e7a8 <_strtod_l+0x4b0>
 800e6e0:	497c      	ldr	r1, [pc, #496]	@ (800e8d4 <_strtod_l+0x5dc>)
 800e6e2:	00db      	lsls	r3, r3, #3
 800e6e4:	18c9      	adds	r1, r1, r3
 800e6e6:	0032      	movs	r2, r6
 800e6e8:	6808      	ldr	r0, [r1, #0]
 800e6ea:	6849      	ldr	r1, [r1, #4]
 800e6ec:	003b      	movs	r3, r7
 800e6ee:	f7f3 faf7 	bl	8001ce0 <__aeabi_dmul>
 800e6f2:	e7d3      	b.n	800e69c <_strtod_l+0x3a4>
 800e6f4:	0022      	movs	r2, r4
 800e6f6:	4b77      	ldr	r3, [pc, #476]	@ (800e8d4 <_strtod_l+0x5dc>)
 800e6f8:	3a09      	subs	r2, #9
 800e6fa:	00d2      	lsls	r2, r2, #3
 800e6fc:	189b      	adds	r3, r3, r2
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	f7f3 faed 	bl	8001ce0 <__aeabi_dmul>
 800e706:	0006      	movs	r6, r0
 800e708:	0028      	movs	r0, r5
 800e70a:	000f      	movs	r7, r1
 800e70c:	f7f4 f9d8 	bl	8002ac0 <__aeabi_ui2d>
 800e710:	000b      	movs	r3, r1
 800e712:	0002      	movs	r2, r0
 800e714:	0039      	movs	r1, r7
 800e716:	0030      	movs	r0, r6
 800e718:	f7f2 fb3a 	bl	8000d90 <__aeabi_dadd>
 800e71c:	9b06      	ldr	r3, [sp, #24]
 800e71e:	0006      	movs	r6, r0
 800e720:	000f      	movs	r7, r1
 800e722:	2b0f      	cmp	r3, #15
 800e724:	ddd2      	ble.n	800e6cc <_strtod_l+0x3d4>
 800e726:	9b06      	ldr	r3, [sp, #24]
 800e728:	1b1c      	subs	r4, r3, r4
 800e72a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e72c:	18e4      	adds	r4, r4, r3
 800e72e:	2c00      	cmp	r4, #0
 800e730:	dc00      	bgt.n	800e734 <_strtod_l+0x43c>
 800e732:	e09b      	b.n	800e86c <_strtod_l+0x574>
 800e734:	220f      	movs	r2, #15
 800e736:	0023      	movs	r3, r4
 800e738:	4013      	ands	r3, r2
 800e73a:	4214      	tst	r4, r2
 800e73c:	d00a      	beq.n	800e754 <_strtod_l+0x45c>
 800e73e:	4965      	ldr	r1, [pc, #404]	@ (800e8d4 <_strtod_l+0x5dc>)
 800e740:	00db      	lsls	r3, r3, #3
 800e742:	18c9      	adds	r1, r1, r3
 800e744:	0032      	movs	r2, r6
 800e746:	6808      	ldr	r0, [r1, #0]
 800e748:	6849      	ldr	r1, [r1, #4]
 800e74a:	003b      	movs	r3, r7
 800e74c:	f7f3 fac8 	bl	8001ce0 <__aeabi_dmul>
 800e750:	0006      	movs	r6, r0
 800e752:	000f      	movs	r7, r1
 800e754:	230f      	movs	r3, #15
 800e756:	439c      	bics	r4, r3
 800e758:	d073      	beq.n	800e842 <_strtod_l+0x54a>
 800e75a:	3326      	adds	r3, #38	@ 0x26
 800e75c:	33ff      	adds	r3, #255	@ 0xff
 800e75e:	429c      	cmp	r4, r3
 800e760:	dd4b      	ble.n	800e7fa <_strtod_l+0x502>
 800e762:	2300      	movs	r3, #0
 800e764:	9306      	str	r3, [sp, #24]
 800e766:	9307      	str	r3, [sp, #28]
 800e768:	930d      	str	r3, [sp, #52]	@ 0x34
 800e76a:	9308      	str	r3, [sp, #32]
 800e76c:	2322      	movs	r3, #34	@ 0x22
 800e76e:	2600      	movs	r6, #0
 800e770:	9a05      	ldr	r2, [sp, #20]
 800e772:	4f54      	ldr	r7, [pc, #336]	@ (800e8c4 <_strtod_l+0x5cc>)
 800e774:	6013      	str	r3, [r2, #0]
 800e776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e778:	42b3      	cmp	r3, r6
 800e77a:	d100      	bne.n	800e77e <_strtod_l+0x486>
 800e77c:	e5f7      	b.n	800e36e <_strtod_l+0x76>
 800e77e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e780:	9805      	ldr	r0, [sp, #20]
 800e782:	f7ff f91b 	bl	800d9bc <_Bfree>
 800e786:	9908      	ldr	r1, [sp, #32]
 800e788:	9805      	ldr	r0, [sp, #20]
 800e78a:	f7ff f917 	bl	800d9bc <_Bfree>
 800e78e:	9907      	ldr	r1, [sp, #28]
 800e790:	9805      	ldr	r0, [sp, #20]
 800e792:	f7ff f913 	bl	800d9bc <_Bfree>
 800e796:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e798:	9805      	ldr	r0, [sp, #20]
 800e79a:	f7ff f90f 	bl	800d9bc <_Bfree>
 800e79e:	9906      	ldr	r1, [sp, #24]
 800e7a0:	9805      	ldr	r0, [sp, #20]
 800e7a2:	f7ff f90b 	bl	800d9bc <_Bfree>
 800e7a6:	e5e2      	b.n	800e36e <_strtod_l+0x76>
 800e7a8:	2325      	movs	r3, #37	@ 0x25
 800e7aa:	9a06      	ldr	r2, [sp, #24]
 800e7ac:	1a9b      	subs	r3, r3, r2
 800e7ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	dbb8      	blt.n	800e726 <_strtod_l+0x42e>
 800e7b4:	240f      	movs	r4, #15
 800e7b6:	9b06      	ldr	r3, [sp, #24]
 800e7b8:	4d46      	ldr	r5, [pc, #280]	@ (800e8d4 <_strtod_l+0x5dc>)
 800e7ba:	1ae4      	subs	r4, r4, r3
 800e7bc:	00e1      	lsls	r1, r4, #3
 800e7be:	1869      	adds	r1, r5, r1
 800e7c0:	0032      	movs	r2, r6
 800e7c2:	6808      	ldr	r0, [r1, #0]
 800e7c4:	6849      	ldr	r1, [r1, #4]
 800e7c6:	003b      	movs	r3, r7
 800e7c8:	f7f3 fa8a 	bl	8001ce0 <__aeabi_dmul>
 800e7cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e7ce:	1b1c      	subs	r4, r3, r4
 800e7d0:	00e4      	lsls	r4, r4, #3
 800e7d2:	192d      	adds	r5, r5, r4
 800e7d4:	682a      	ldr	r2, [r5, #0]
 800e7d6:	686b      	ldr	r3, [r5, #4]
 800e7d8:	e789      	b.n	800e6ee <_strtod_l+0x3f6>
 800e7da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e7dc:	3316      	adds	r3, #22
 800e7de:	dba2      	blt.n	800e726 <_strtod_l+0x42e>
 800e7e0:	9907      	ldr	r1, [sp, #28]
 800e7e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7e4:	4b3b      	ldr	r3, [pc, #236]	@ (800e8d4 <_strtod_l+0x5dc>)
 800e7e6:	1a52      	subs	r2, r2, r1
 800e7e8:	00d2      	lsls	r2, r2, #3
 800e7ea:	189b      	adds	r3, r3, r2
 800e7ec:	0030      	movs	r0, r6
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	0039      	movs	r1, r7
 800e7f4:	f7f2 fe30 	bl	8001458 <__aeabi_ddiv>
 800e7f8:	e750      	b.n	800e69c <_strtod_l+0x3a4>
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	0030      	movs	r0, r6
 800e7fe:	0039      	movs	r1, r7
 800e800:	4d35      	ldr	r5, [pc, #212]	@ (800e8d8 <_strtod_l+0x5e0>)
 800e802:	1124      	asrs	r4, r4, #4
 800e804:	9309      	str	r3, [sp, #36]	@ 0x24
 800e806:	2c01      	cmp	r4, #1
 800e808:	dc1e      	bgt.n	800e848 <_strtod_l+0x550>
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d001      	beq.n	800e812 <_strtod_l+0x51a>
 800e80e:	0006      	movs	r6, r0
 800e810:	000f      	movs	r7, r1
 800e812:	4b32      	ldr	r3, [pc, #200]	@ (800e8dc <_strtod_l+0x5e4>)
 800e814:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e816:	18ff      	adds	r7, r7, r3
 800e818:	4b2f      	ldr	r3, [pc, #188]	@ (800e8d8 <_strtod_l+0x5e0>)
 800e81a:	00d5      	lsls	r5, r2, #3
 800e81c:	195d      	adds	r5, r3, r5
 800e81e:	0032      	movs	r2, r6
 800e820:	6828      	ldr	r0, [r5, #0]
 800e822:	6869      	ldr	r1, [r5, #4]
 800e824:	003b      	movs	r3, r7
 800e826:	f7f3 fa5b 	bl	8001ce0 <__aeabi_dmul>
 800e82a:	4b26      	ldr	r3, [pc, #152]	@ (800e8c4 <_strtod_l+0x5cc>)
 800e82c:	4a2c      	ldr	r2, [pc, #176]	@ (800e8e0 <_strtod_l+0x5e8>)
 800e82e:	0006      	movs	r6, r0
 800e830:	400b      	ands	r3, r1
 800e832:	4293      	cmp	r3, r2
 800e834:	d895      	bhi.n	800e762 <_strtod_l+0x46a>
 800e836:	4a2b      	ldr	r2, [pc, #172]	@ (800e8e4 <_strtod_l+0x5ec>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d913      	bls.n	800e864 <_strtod_l+0x56c>
 800e83c:	2601      	movs	r6, #1
 800e83e:	4f2a      	ldr	r7, [pc, #168]	@ (800e8e8 <_strtod_l+0x5f0>)
 800e840:	4276      	negs	r6, r6
 800e842:	2300      	movs	r3, #0
 800e844:	9309      	str	r3, [sp, #36]	@ 0x24
 800e846:	e086      	b.n	800e956 <_strtod_l+0x65e>
 800e848:	2201      	movs	r2, #1
 800e84a:	4214      	tst	r4, r2
 800e84c:	d004      	beq.n	800e858 <_strtod_l+0x560>
 800e84e:	682a      	ldr	r2, [r5, #0]
 800e850:	686b      	ldr	r3, [r5, #4]
 800e852:	f7f3 fa45 	bl	8001ce0 <__aeabi_dmul>
 800e856:	2301      	movs	r3, #1
 800e858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e85a:	1064      	asrs	r4, r4, #1
 800e85c:	3201      	adds	r2, #1
 800e85e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e860:	3508      	adds	r5, #8
 800e862:	e7d0      	b.n	800e806 <_strtod_l+0x50e>
 800e864:	23d4      	movs	r3, #212	@ 0xd4
 800e866:	049b      	lsls	r3, r3, #18
 800e868:	18cf      	adds	r7, r1, r3
 800e86a:	e7ea      	b.n	800e842 <_strtod_l+0x54a>
 800e86c:	2c00      	cmp	r4, #0
 800e86e:	d0e8      	beq.n	800e842 <_strtod_l+0x54a>
 800e870:	4264      	negs	r4, r4
 800e872:	230f      	movs	r3, #15
 800e874:	0022      	movs	r2, r4
 800e876:	401a      	ands	r2, r3
 800e878:	421c      	tst	r4, r3
 800e87a:	d00a      	beq.n	800e892 <_strtod_l+0x59a>
 800e87c:	4b15      	ldr	r3, [pc, #84]	@ (800e8d4 <_strtod_l+0x5dc>)
 800e87e:	00d2      	lsls	r2, r2, #3
 800e880:	189b      	adds	r3, r3, r2
 800e882:	0030      	movs	r0, r6
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	0039      	movs	r1, r7
 800e88a:	f7f2 fde5 	bl	8001458 <__aeabi_ddiv>
 800e88e:	0006      	movs	r6, r0
 800e890:	000f      	movs	r7, r1
 800e892:	1124      	asrs	r4, r4, #4
 800e894:	d0d5      	beq.n	800e842 <_strtod_l+0x54a>
 800e896:	2c1f      	cmp	r4, #31
 800e898:	dd28      	ble.n	800e8ec <_strtod_l+0x5f4>
 800e89a:	2300      	movs	r3, #0
 800e89c:	9306      	str	r3, [sp, #24]
 800e89e:	9307      	str	r3, [sp, #28]
 800e8a0:	930d      	str	r3, [sp, #52]	@ 0x34
 800e8a2:	9308      	str	r3, [sp, #32]
 800e8a4:	2322      	movs	r3, #34	@ 0x22
 800e8a6:	9a05      	ldr	r2, [sp, #20]
 800e8a8:	2600      	movs	r6, #0
 800e8aa:	6013      	str	r3, [r2, #0]
 800e8ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8ae:	2700      	movs	r7, #0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d000      	beq.n	800e8b6 <_strtod_l+0x5be>
 800e8b4:	e763      	b.n	800e77e <_strtod_l+0x486>
 800e8b6:	e55a      	b.n	800e36e <_strtod_l+0x76>
 800e8b8:	00004e1f 	.word	0x00004e1f
 800e8bc:	080108d6 	.word	0x080108d6
 800e8c0:	08010aec 	.word	0x08010aec
 800e8c4:	7ff00000 	.word	0x7ff00000
 800e8c8:	080108ce 	.word	0x080108ce
 800e8cc:	08010905 	.word	0x08010905
 800e8d0:	08010b94 	.word	0x08010b94
 800e8d4:	08010a20 	.word	0x08010a20
 800e8d8:	080109f8 	.word	0x080109f8
 800e8dc:	fcb00000 	.word	0xfcb00000
 800e8e0:	7ca00000 	.word	0x7ca00000
 800e8e4:	7c900000 	.word	0x7c900000
 800e8e8:	7fefffff 	.word	0x7fefffff
 800e8ec:	2310      	movs	r3, #16
 800e8ee:	0022      	movs	r2, r4
 800e8f0:	401a      	ands	r2, r3
 800e8f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8f4:	421c      	tst	r4, r3
 800e8f6:	d001      	beq.n	800e8fc <_strtod_l+0x604>
 800e8f8:	335a      	adds	r3, #90	@ 0x5a
 800e8fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8fc:	0030      	movs	r0, r6
 800e8fe:	0039      	movs	r1, r7
 800e900:	2300      	movs	r3, #0
 800e902:	4dbf      	ldr	r5, [pc, #764]	@ (800ec00 <_strtod_l+0x908>)
 800e904:	2201      	movs	r2, #1
 800e906:	4214      	tst	r4, r2
 800e908:	d004      	beq.n	800e914 <_strtod_l+0x61c>
 800e90a:	682a      	ldr	r2, [r5, #0]
 800e90c:	686b      	ldr	r3, [r5, #4]
 800e90e:	f7f3 f9e7 	bl	8001ce0 <__aeabi_dmul>
 800e912:	2301      	movs	r3, #1
 800e914:	1064      	asrs	r4, r4, #1
 800e916:	3508      	adds	r5, #8
 800e918:	2c00      	cmp	r4, #0
 800e91a:	d1f3      	bne.n	800e904 <_strtod_l+0x60c>
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d001      	beq.n	800e924 <_strtod_l+0x62c>
 800e920:	0006      	movs	r6, r0
 800e922:	000f      	movs	r7, r1
 800e924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00d      	beq.n	800e946 <_strtod_l+0x64e>
 800e92a:	236b      	movs	r3, #107	@ 0x6b
 800e92c:	007a      	lsls	r2, r7, #1
 800e92e:	0d52      	lsrs	r2, r2, #21
 800e930:	0039      	movs	r1, r7
 800e932:	1a9b      	subs	r3, r3, r2
 800e934:	2b00      	cmp	r3, #0
 800e936:	dd06      	ble.n	800e946 <_strtod_l+0x64e>
 800e938:	2b1f      	cmp	r3, #31
 800e93a:	dd5a      	ble.n	800e9f2 <_strtod_l+0x6fa>
 800e93c:	2600      	movs	r6, #0
 800e93e:	2b34      	cmp	r3, #52	@ 0x34
 800e940:	dd50      	ble.n	800e9e4 <_strtod_l+0x6ec>
 800e942:	27dc      	movs	r7, #220	@ 0xdc
 800e944:	04bf      	lsls	r7, r7, #18
 800e946:	2200      	movs	r2, #0
 800e948:	2300      	movs	r3, #0
 800e94a:	0030      	movs	r0, r6
 800e94c:	0039      	movs	r1, r7
 800e94e:	f7f1 fd7d 	bl	800044c <__aeabi_dcmpeq>
 800e952:	2800      	cmp	r0, #0
 800e954:	d1a1      	bne.n	800e89a <_strtod_l+0x5a2>
 800e956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e958:	9a08      	ldr	r2, [sp, #32]
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e95e:	9b06      	ldr	r3, [sp, #24]
 800e960:	9805      	ldr	r0, [sp, #20]
 800e962:	f7ff f893 	bl	800da8c <__s2b>
 800e966:	900d      	str	r0, [sp, #52]	@ 0x34
 800e968:	2800      	cmp	r0, #0
 800e96a:	d100      	bne.n	800e96e <_strtod_l+0x676>
 800e96c:	e6f9      	b.n	800e762 <_strtod_l+0x46a>
 800e96e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e970:	9907      	ldr	r1, [sp, #28]
 800e972:	17da      	asrs	r2, r3, #31
 800e974:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e976:	1a5b      	subs	r3, r3, r1
 800e978:	401a      	ands	r2, r3
 800e97a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e97c:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e97e:	43db      	mvns	r3, r3
 800e980:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e982:	17db      	asrs	r3, r3, #31
 800e984:	401a      	ands	r2, r3
 800e986:	2300      	movs	r3, #0
 800e988:	921a      	str	r2, [sp, #104]	@ 0x68
 800e98a:	9306      	str	r3, [sp, #24]
 800e98c:	9307      	str	r3, [sp, #28]
 800e98e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e990:	9805      	ldr	r0, [sp, #20]
 800e992:	6859      	ldr	r1, [r3, #4]
 800e994:	f7fe ffce 	bl	800d934 <_Balloc>
 800e998:	9008      	str	r0, [sp, #32]
 800e99a:	2800      	cmp	r0, #0
 800e99c:	d100      	bne.n	800e9a0 <_strtod_l+0x6a8>
 800e99e:	e6e5      	b.n	800e76c <_strtod_l+0x474>
 800e9a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e9a2:	300c      	adds	r0, #12
 800e9a4:	0019      	movs	r1, r3
 800e9a6:	691a      	ldr	r2, [r3, #16]
 800e9a8:	310c      	adds	r1, #12
 800e9aa:	3202      	adds	r2, #2
 800e9ac:	0092      	lsls	r2, r2, #2
 800e9ae:	f000 fce3 	bl	800f378 <memcpy>
 800e9b2:	ab20      	add	r3, sp, #128	@ 0x80
 800e9b4:	9301      	str	r3, [sp, #4]
 800e9b6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e9b8:	9300      	str	r3, [sp, #0]
 800e9ba:	0032      	movs	r2, r6
 800e9bc:	003b      	movs	r3, r7
 800e9be:	9805      	ldr	r0, [sp, #20]
 800e9c0:	9610      	str	r6, [sp, #64]	@ 0x40
 800e9c2:	9711      	str	r7, [sp, #68]	@ 0x44
 800e9c4:	f7ff fbb2 	bl	800e12c <__d2b>
 800e9c8:	901e      	str	r0, [sp, #120]	@ 0x78
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	d100      	bne.n	800e9d0 <_strtod_l+0x6d8>
 800e9ce:	e6cd      	b.n	800e76c <_strtod_l+0x474>
 800e9d0:	2101      	movs	r1, #1
 800e9d2:	9805      	ldr	r0, [sp, #20]
 800e9d4:	f7ff f8f6 	bl	800dbc4 <__i2b>
 800e9d8:	9007      	str	r0, [sp, #28]
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	d10e      	bne.n	800e9fc <_strtod_l+0x704>
 800e9de:	2300      	movs	r3, #0
 800e9e0:	9307      	str	r3, [sp, #28]
 800e9e2:	e6c3      	b.n	800e76c <_strtod_l+0x474>
 800e9e4:	234b      	movs	r3, #75	@ 0x4b
 800e9e6:	1a9a      	subs	r2, r3, r2
 800e9e8:	3b4c      	subs	r3, #76	@ 0x4c
 800e9ea:	4093      	lsls	r3, r2
 800e9ec:	4019      	ands	r1, r3
 800e9ee:	000f      	movs	r7, r1
 800e9f0:	e7a9      	b.n	800e946 <_strtod_l+0x64e>
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	4252      	negs	r2, r2
 800e9f6:	409a      	lsls	r2, r3
 800e9f8:	4016      	ands	r6, r2
 800e9fa:	e7a4      	b.n	800e946 <_strtod_l+0x64e>
 800e9fc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e9fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ea00:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800ea02:	1ad4      	subs	r4, r2, r3
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	db01      	blt.n	800ea0c <_strtod_l+0x714>
 800ea08:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800ea0a:	195d      	adds	r5, r3, r5
 800ea0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea0e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ea10:	1a5b      	subs	r3, r3, r1
 800ea12:	2136      	movs	r1, #54	@ 0x36
 800ea14:	189b      	adds	r3, r3, r2
 800ea16:	1a8a      	subs	r2, r1, r2
 800ea18:	497a      	ldr	r1, [pc, #488]	@ (800ec04 <_strtod_l+0x90c>)
 800ea1a:	2001      	movs	r0, #1
 800ea1c:	468c      	mov	ip, r1
 800ea1e:	2100      	movs	r1, #0
 800ea20:	3b01      	subs	r3, #1
 800ea22:	9116      	str	r1, [sp, #88]	@ 0x58
 800ea24:	9014      	str	r0, [sp, #80]	@ 0x50
 800ea26:	4563      	cmp	r3, ip
 800ea28:	da06      	bge.n	800ea38 <_strtod_l+0x740>
 800ea2a:	4661      	mov	r1, ip
 800ea2c:	1ac9      	subs	r1, r1, r3
 800ea2e:	1a52      	subs	r2, r2, r1
 800ea30:	291f      	cmp	r1, #31
 800ea32:	dc3f      	bgt.n	800eab4 <_strtod_l+0x7bc>
 800ea34:	4088      	lsls	r0, r1
 800ea36:	9014      	str	r0, [sp, #80]	@ 0x50
 800ea38:	18ab      	adds	r3, r5, r2
 800ea3a:	930e      	str	r3, [sp, #56]	@ 0x38
 800ea3c:	18a4      	adds	r4, r4, r2
 800ea3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea42:	191c      	adds	r4, r3, r4
 800ea44:	002b      	movs	r3, r5
 800ea46:	4295      	cmp	r5, r2
 800ea48:	dd00      	ble.n	800ea4c <_strtod_l+0x754>
 800ea4a:	0013      	movs	r3, r2
 800ea4c:	42a3      	cmp	r3, r4
 800ea4e:	dd00      	ble.n	800ea52 <_strtod_l+0x75a>
 800ea50:	0023      	movs	r3, r4
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	dd04      	ble.n	800ea60 <_strtod_l+0x768>
 800ea56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea58:	1ae4      	subs	r4, r4, r3
 800ea5a:	1ad2      	subs	r2, r2, r3
 800ea5c:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea5e:	1aed      	subs	r5, r5, r3
 800ea60:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	dd16      	ble.n	800ea94 <_strtod_l+0x79c>
 800ea66:	001a      	movs	r2, r3
 800ea68:	9907      	ldr	r1, [sp, #28]
 800ea6a:	9805      	ldr	r0, [sp, #20]
 800ea6c:	f7ff f974 	bl	800dd58 <__pow5mult>
 800ea70:	9007      	str	r0, [sp, #28]
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d0b3      	beq.n	800e9de <_strtod_l+0x6e6>
 800ea76:	0001      	movs	r1, r0
 800ea78:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800ea7a:	9805      	ldr	r0, [sp, #20]
 800ea7c:	f7ff f8ba 	bl	800dbf4 <__multiply>
 800ea80:	9013      	str	r0, [sp, #76]	@ 0x4c
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d100      	bne.n	800ea88 <_strtod_l+0x790>
 800ea86:	e671      	b.n	800e76c <_strtod_l+0x474>
 800ea88:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ea8a:	9805      	ldr	r0, [sp, #20]
 800ea8c:	f7fe ff96 	bl	800d9bc <_Bfree>
 800ea90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ea92:	931e      	str	r3, [sp, #120]	@ 0x78
 800ea94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	dc12      	bgt.n	800eac0 <_strtod_l+0x7c8>
 800ea9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	dd18      	ble.n	800ead2 <_strtod_l+0x7da>
 800eaa0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eaa2:	9908      	ldr	r1, [sp, #32]
 800eaa4:	9805      	ldr	r0, [sp, #20]
 800eaa6:	f7ff f957 	bl	800dd58 <__pow5mult>
 800eaaa:	9008      	str	r0, [sp, #32]
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d110      	bne.n	800ead2 <_strtod_l+0x7da>
 800eab0:	2300      	movs	r3, #0
 800eab2:	e65a      	b.n	800e76a <_strtod_l+0x472>
 800eab4:	4954      	ldr	r1, [pc, #336]	@ (800ec08 <_strtod_l+0x910>)
 800eab6:	1acb      	subs	r3, r1, r3
 800eab8:	0001      	movs	r1, r0
 800eaba:	4099      	lsls	r1, r3
 800eabc:	9116      	str	r1, [sp, #88]	@ 0x58
 800eabe:	e7ba      	b.n	800ea36 <_strtod_l+0x73e>
 800eac0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eac2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800eac4:	9805      	ldr	r0, [sp, #20]
 800eac6:	f7ff f9a3 	bl	800de10 <__lshift>
 800eaca:	901e      	str	r0, [sp, #120]	@ 0x78
 800eacc:	2800      	cmp	r0, #0
 800eace:	d1e4      	bne.n	800ea9a <_strtod_l+0x7a2>
 800ead0:	e64c      	b.n	800e76c <_strtod_l+0x474>
 800ead2:	2c00      	cmp	r4, #0
 800ead4:	dd07      	ble.n	800eae6 <_strtod_l+0x7ee>
 800ead6:	0022      	movs	r2, r4
 800ead8:	9908      	ldr	r1, [sp, #32]
 800eada:	9805      	ldr	r0, [sp, #20]
 800eadc:	f7ff f998 	bl	800de10 <__lshift>
 800eae0:	9008      	str	r0, [sp, #32]
 800eae2:	2800      	cmp	r0, #0
 800eae4:	d0e4      	beq.n	800eab0 <_strtod_l+0x7b8>
 800eae6:	2d00      	cmp	r5, #0
 800eae8:	dd08      	ble.n	800eafc <_strtod_l+0x804>
 800eaea:	002a      	movs	r2, r5
 800eaec:	9907      	ldr	r1, [sp, #28]
 800eaee:	9805      	ldr	r0, [sp, #20]
 800eaf0:	f7ff f98e 	bl	800de10 <__lshift>
 800eaf4:	9007      	str	r0, [sp, #28]
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d100      	bne.n	800eafc <_strtod_l+0x804>
 800eafa:	e637      	b.n	800e76c <_strtod_l+0x474>
 800eafc:	9a08      	ldr	r2, [sp, #32]
 800eafe:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800eb00:	9805      	ldr	r0, [sp, #20]
 800eb02:	f7ff fa0d 	bl	800df20 <__mdiff>
 800eb06:	9006      	str	r0, [sp, #24]
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d100      	bne.n	800eb0e <_strtod_l+0x816>
 800eb0c:	e62e      	b.n	800e76c <_strtod_l+0x474>
 800eb0e:	68c3      	ldr	r3, [r0, #12]
 800eb10:	9907      	ldr	r1, [sp, #28]
 800eb12:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eb14:	2300      	movs	r3, #0
 800eb16:	60c3      	str	r3, [r0, #12]
 800eb18:	f7ff f9e6 	bl	800dee8 <__mcmp>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	da3b      	bge.n	800eb98 <_strtod_l+0x8a0>
 800eb20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eb22:	4333      	orrs	r3, r6
 800eb24:	d167      	bne.n	800ebf6 <_strtod_l+0x8fe>
 800eb26:	033b      	lsls	r3, r7, #12
 800eb28:	d165      	bne.n	800ebf6 <_strtod_l+0x8fe>
 800eb2a:	22d6      	movs	r2, #214	@ 0xd6
 800eb2c:	4b37      	ldr	r3, [pc, #220]	@ (800ec0c <_strtod_l+0x914>)
 800eb2e:	04d2      	lsls	r2, r2, #19
 800eb30:	403b      	ands	r3, r7
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d95f      	bls.n	800ebf6 <_strtod_l+0x8fe>
 800eb36:	9b06      	ldr	r3, [sp, #24]
 800eb38:	695b      	ldr	r3, [r3, #20]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d103      	bne.n	800eb46 <_strtod_l+0x84e>
 800eb3e:	9b06      	ldr	r3, [sp, #24]
 800eb40:	691b      	ldr	r3, [r3, #16]
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	dd57      	ble.n	800ebf6 <_strtod_l+0x8fe>
 800eb46:	9906      	ldr	r1, [sp, #24]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	9805      	ldr	r0, [sp, #20]
 800eb4c:	f7ff f960 	bl	800de10 <__lshift>
 800eb50:	9907      	ldr	r1, [sp, #28]
 800eb52:	9006      	str	r0, [sp, #24]
 800eb54:	f7ff f9c8 	bl	800dee8 <__mcmp>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	dd4c      	ble.n	800ebf6 <_strtod_l+0x8fe>
 800eb5c:	4b2b      	ldr	r3, [pc, #172]	@ (800ec0c <_strtod_l+0x914>)
 800eb5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb60:	403b      	ands	r3, r7
 800eb62:	2a00      	cmp	r2, #0
 800eb64:	d074      	beq.n	800ec50 <_strtod_l+0x958>
 800eb66:	22d6      	movs	r2, #214	@ 0xd6
 800eb68:	04d2      	lsls	r2, r2, #19
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d870      	bhi.n	800ec50 <_strtod_l+0x958>
 800eb6e:	22dc      	movs	r2, #220	@ 0xdc
 800eb70:	0492      	lsls	r2, r2, #18
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d800      	bhi.n	800eb78 <_strtod_l+0x880>
 800eb76:	e695      	b.n	800e8a4 <_strtod_l+0x5ac>
 800eb78:	0030      	movs	r0, r6
 800eb7a:	0039      	movs	r1, r7
 800eb7c:	4b24      	ldr	r3, [pc, #144]	@ (800ec10 <_strtod_l+0x918>)
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f7f3 f8ae 	bl	8001ce0 <__aeabi_dmul>
 800eb84:	4b21      	ldr	r3, [pc, #132]	@ (800ec0c <_strtod_l+0x914>)
 800eb86:	0006      	movs	r6, r0
 800eb88:	000f      	movs	r7, r1
 800eb8a:	420b      	tst	r3, r1
 800eb8c:	d000      	beq.n	800eb90 <_strtod_l+0x898>
 800eb8e:	e5f6      	b.n	800e77e <_strtod_l+0x486>
 800eb90:	2322      	movs	r3, #34	@ 0x22
 800eb92:	9a05      	ldr	r2, [sp, #20]
 800eb94:	6013      	str	r3, [r2, #0]
 800eb96:	e5f2      	b.n	800e77e <_strtod_l+0x486>
 800eb98:	970e      	str	r7, [sp, #56]	@ 0x38
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	d175      	bne.n	800ec8a <_strtod_l+0x992>
 800eb9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eba0:	033b      	lsls	r3, r7, #12
 800eba2:	0b1b      	lsrs	r3, r3, #12
 800eba4:	2a00      	cmp	r2, #0
 800eba6:	d039      	beq.n	800ec1c <_strtod_l+0x924>
 800eba8:	4a1a      	ldr	r2, [pc, #104]	@ (800ec14 <_strtod_l+0x91c>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d138      	bne.n	800ec20 <_strtod_l+0x928>
 800ebae:	2101      	movs	r1, #1
 800ebb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebb2:	4249      	negs	r1, r1
 800ebb4:	0032      	movs	r2, r6
 800ebb6:	0008      	movs	r0, r1
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d00b      	beq.n	800ebd4 <_strtod_l+0x8dc>
 800ebbc:	24d4      	movs	r4, #212	@ 0xd4
 800ebbe:	4b13      	ldr	r3, [pc, #76]	@ (800ec0c <_strtod_l+0x914>)
 800ebc0:	0008      	movs	r0, r1
 800ebc2:	403b      	ands	r3, r7
 800ebc4:	04e4      	lsls	r4, r4, #19
 800ebc6:	42a3      	cmp	r3, r4
 800ebc8:	d804      	bhi.n	800ebd4 <_strtod_l+0x8dc>
 800ebca:	306c      	adds	r0, #108	@ 0x6c
 800ebcc:	0d1b      	lsrs	r3, r3, #20
 800ebce:	1ac3      	subs	r3, r0, r3
 800ebd0:	4099      	lsls	r1, r3
 800ebd2:	0008      	movs	r0, r1
 800ebd4:	4282      	cmp	r2, r0
 800ebd6:	d123      	bne.n	800ec20 <_strtod_l+0x928>
 800ebd8:	4b0f      	ldr	r3, [pc, #60]	@ (800ec18 <_strtod_l+0x920>)
 800ebda:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ebdc:	4299      	cmp	r1, r3
 800ebde:	d102      	bne.n	800ebe6 <_strtod_l+0x8ee>
 800ebe0:	3201      	adds	r2, #1
 800ebe2:	d100      	bne.n	800ebe6 <_strtod_l+0x8ee>
 800ebe4:	e5c2      	b.n	800e76c <_strtod_l+0x474>
 800ebe6:	4b09      	ldr	r3, [pc, #36]	@ (800ec0c <_strtod_l+0x914>)
 800ebe8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebea:	2600      	movs	r6, #0
 800ebec:	401a      	ands	r2, r3
 800ebee:	0013      	movs	r3, r2
 800ebf0:	2280      	movs	r2, #128	@ 0x80
 800ebf2:	0352      	lsls	r2, r2, #13
 800ebf4:	189f      	adds	r7, r3, r2
 800ebf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1bd      	bne.n	800eb78 <_strtod_l+0x880>
 800ebfc:	e5bf      	b.n	800e77e <_strtod_l+0x486>
 800ebfe:	46c0      	nop			@ (mov r8, r8)
 800ec00:	08010b18 	.word	0x08010b18
 800ec04:	fffffc02 	.word	0xfffffc02
 800ec08:	fffffbe2 	.word	0xfffffbe2
 800ec0c:	7ff00000 	.word	0x7ff00000
 800ec10:	39500000 	.word	0x39500000
 800ec14:	000fffff 	.word	0x000fffff
 800ec18:	7fefffff 	.word	0x7fefffff
 800ec1c:	4333      	orrs	r3, r6
 800ec1e:	d09d      	beq.n	800eb5c <_strtod_l+0x864>
 800ec20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d01c      	beq.n	800ec60 <_strtod_l+0x968>
 800ec26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec28:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ec2a:	4213      	tst	r3, r2
 800ec2c:	d0e3      	beq.n	800ebf6 <_strtod_l+0x8fe>
 800ec2e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ec30:	0030      	movs	r0, r6
 800ec32:	0039      	movs	r1, r7
 800ec34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d016      	beq.n	800ec68 <_strtod_l+0x970>
 800ec3a:	f7ff fb45 	bl	800e2c8 <sulp>
 800ec3e:	0002      	movs	r2, r0
 800ec40:	000b      	movs	r3, r1
 800ec42:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ec44:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ec46:	f7f2 f8a3 	bl	8000d90 <__aeabi_dadd>
 800ec4a:	0006      	movs	r6, r0
 800ec4c:	000f      	movs	r7, r1
 800ec4e:	e7d2      	b.n	800ebf6 <_strtod_l+0x8fe>
 800ec50:	2601      	movs	r6, #1
 800ec52:	4a92      	ldr	r2, [pc, #584]	@ (800ee9c <_strtod_l+0xba4>)
 800ec54:	4276      	negs	r6, r6
 800ec56:	189b      	adds	r3, r3, r2
 800ec58:	4a91      	ldr	r2, [pc, #580]	@ (800eea0 <_strtod_l+0xba8>)
 800ec5a:	431a      	orrs	r2, r3
 800ec5c:	0017      	movs	r7, r2
 800ec5e:	e7ca      	b.n	800ebf6 <_strtod_l+0x8fe>
 800ec60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ec62:	4233      	tst	r3, r6
 800ec64:	d0c7      	beq.n	800ebf6 <_strtod_l+0x8fe>
 800ec66:	e7e2      	b.n	800ec2e <_strtod_l+0x936>
 800ec68:	f7ff fb2e 	bl	800e2c8 <sulp>
 800ec6c:	0002      	movs	r2, r0
 800ec6e:	000b      	movs	r3, r1
 800ec70:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ec72:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ec74:	f7f3 fafc 	bl	8002270 <__aeabi_dsub>
 800ec78:	2200      	movs	r2, #0
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	0006      	movs	r6, r0
 800ec7e:	000f      	movs	r7, r1
 800ec80:	f7f1 fbe4 	bl	800044c <__aeabi_dcmpeq>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d0b6      	beq.n	800ebf6 <_strtod_l+0x8fe>
 800ec88:	e60c      	b.n	800e8a4 <_strtod_l+0x5ac>
 800ec8a:	9907      	ldr	r1, [sp, #28]
 800ec8c:	9806      	ldr	r0, [sp, #24]
 800ec8e:	f7ff faad 	bl	800e1ec <__ratio>
 800ec92:	2380      	movs	r3, #128	@ 0x80
 800ec94:	2200      	movs	r2, #0
 800ec96:	05db      	lsls	r3, r3, #23
 800ec98:	0004      	movs	r4, r0
 800ec9a:	000d      	movs	r5, r1
 800ec9c:	f7f1 fbe6 	bl	800046c <__aeabi_dcmple>
 800eca0:	2800      	cmp	r0, #0
 800eca2:	d06c      	beq.n	800ed7e <_strtod_l+0xa86>
 800eca4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d177      	bne.n	800ed9a <_strtod_l+0xaa2>
 800ecaa:	2e00      	cmp	r6, #0
 800ecac:	d157      	bne.n	800ed5e <_strtod_l+0xa66>
 800ecae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecb0:	031b      	lsls	r3, r3, #12
 800ecb2:	d15a      	bne.n	800ed6a <_strtod_l+0xa72>
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	0020      	movs	r0, r4
 800ecb8:	0029      	movs	r1, r5
 800ecba:	4b7a      	ldr	r3, [pc, #488]	@ (800eea4 <_strtod_l+0xbac>)
 800ecbc:	f7f1 fbcc 	bl	8000458 <__aeabi_dcmplt>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d159      	bne.n	800ed78 <_strtod_l+0xa80>
 800ecc4:	0020      	movs	r0, r4
 800ecc6:	0029      	movs	r1, r5
 800ecc8:	2200      	movs	r2, #0
 800ecca:	4b77      	ldr	r3, [pc, #476]	@ (800eea8 <_strtod_l+0xbb0>)
 800eccc:	f7f3 f808 	bl	8001ce0 <__aeabi_dmul>
 800ecd0:	0004      	movs	r4, r0
 800ecd2:	000d      	movs	r5, r1
 800ecd4:	2380      	movs	r3, #128	@ 0x80
 800ecd6:	061b      	lsls	r3, r3, #24
 800ecd8:	18eb      	adds	r3, r5, r3
 800ecda:	940a      	str	r4, [sp, #40]	@ 0x28
 800ecdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ecde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ece0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ece2:	9214      	str	r2, [sp, #80]	@ 0x50
 800ece4:	9315      	str	r3, [sp, #84]	@ 0x54
 800ece6:	4a71      	ldr	r2, [pc, #452]	@ (800eeac <_strtod_l+0xbb4>)
 800ece8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecea:	4013      	ands	r3, r2
 800ecec:	9316      	str	r3, [sp, #88]	@ 0x58
 800ecee:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ecf0:	4b6f      	ldr	r3, [pc, #444]	@ (800eeb0 <_strtod_l+0xbb8>)
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d000      	beq.n	800ecf8 <_strtod_l+0xa00>
 800ecf6:	e087      	b.n	800ee08 <_strtod_l+0xb10>
 800ecf8:	4a6e      	ldr	r2, [pc, #440]	@ (800eeb4 <_strtod_l+0xbbc>)
 800ecfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecfc:	4694      	mov	ip, r2
 800ecfe:	4463      	add	r3, ip
 800ed00:	001f      	movs	r7, r3
 800ed02:	0030      	movs	r0, r6
 800ed04:	0019      	movs	r1, r3
 800ed06:	f7ff f9a5 	bl	800e054 <__ulp>
 800ed0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed0e:	f7f2 ffe7 	bl	8001ce0 <__aeabi_dmul>
 800ed12:	0032      	movs	r2, r6
 800ed14:	003b      	movs	r3, r7
 800ed16:	f7f2 f83b 	bl	8000d90 <__aeabi_dadd>
 800ed1a:	4a64      	ldr	r2, [pc, #400]	@ (800eeac <_strtod_l+0xbb4>)
 800ed1c:	4b66      	ldr	r3, [pc, #408]	@ (800eeb8 <_strtod_l+0xbc0>)
 800ed1e:	0006      	movs	r6, r0
 800ed20:	400a      	ands	r2, r1
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d940      	bls.n	800eda8 <_strtod_l+0xab0>
 800ed26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ed28:	4a64      	ldr	r2, [pc, #400]	@ (800eebc <_strtod_l+0xbc4>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d103      	bne.n	800ed36 <_strtod_l+0xa3e>
 800ed2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed30:	3301      	adds	r3, #1
 800ed32:	d100      	bne.n	800ed36 <_strtod_l+0xa3e>
 800ed34:	e51a      	b.n	800e76c <_strtod_l+0x474>
 800ed36:	2601      	movs	r6, #1
 800ed38:	4f60      	ldr	r7, [pc, #384]	@ (800eebc <_strtod_l+0xbc4>)
 800ed3a:	4276      	negs	r6, r6
 800ed3c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ed3e:	9805      	ldr	r0, [sp, #20]
 800ed40:	f7fe fe3c 	bl	800d9bc <_Bfree>
 800ed44:	9908      	ldr	r1, [sp, #32]
 800ed46:	9805      	ldr	r0, [sp, #20]
 800ed48:	f7fe fe38 	bl	800d9bc <_Bfree>
 800ed4c:	9907      	ldr	r1, [sp, #28]
 800ed4e:	9805      	ldr	r0, [sp, #20]
 800ed50:	f7fe fe34 	bl	800d9bc <_Bfree>
 800ed54:	9906      	ldr	r1, [sp, #24]
 800ed56:	9805      	ldr	r0, [sp, #20]
 800ed58:	f7fe fe30 	bl	800d9bc <_Bfree>
 800ed5c:	e617      	b.n	800e98e <_strtod_l+0x696>
 800ed5e:	2e01      	cmp	r6, #1
 800ed60:	d103      	bne.n	800ed6a <_strtod_l+0xa72>
 800ed62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d100      	bne.n	800ed6a <_strtod_l+0xa72>
 800ed68:	e59c      	b.n	800e8a4 <_strtod_l+0x5ac>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	4c54      	ldr	r4, [pc, #336]	@ (800eec0 <_strtod_l+0xbc8>)
 800ed6e:	4d4d      	ldr	r5, [pc, #308]	@ (800eea4 <_strtod_l+0xbac>)
 800ed70:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed72:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ed74:	2400      	movs	r4, #0
 800ed76:	e7b2      	b.n	800ecde <_strtod_l+0x9e6>
 800ed78:	2400      	movs	r4, #0
 800ed7a:	4d4b      	ldr	r5, [pc, #300]	@ (800eea8 <_strtod_l+0xbb0>)
 800ed7c:	e7aa      	b.n	800ecd4 <_strtod_l+0x9dc>
 800ed7e:	0020      	movs	r0, r4
 800ed80:	0029      	movs	r1, r5
 800ed82:	4b49      	ldr	r3, [pc, #292]	@ (800eea8 <_strtod_l+0xbb0>)
 800ed84:	2200      	movs	r2, #0
 800ed86:	f7f2 ffab 	bl	8001ce0 <__aeabi_dmul>
 800ed8a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed8c:	0004      	movs	r4, r0
 800ed8e:	000d      	movs	r5, r1
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d09f      	beq.n	800ecd4 <_strtod_l+0x9dc>
 800ed94:	940a      	str	r4, [sp, #40]	@ 0x28
 800ed96:	950b      	str	r5, [sp, #44]	@ 0x2c
 800ed98:	e7a1      	b.n	800ecde <_strtod_l+0x9e6>
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	4c41      	ldr	r4, [pc, #260]	@ (800eea4 <_strtod_l+0xbac>)
 800ed9e:	0025      	movs	r5, r4
 800eda0:	930a      	str	r3, [sp, #40]	@ 0x28
 800eda2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eda4:	001c      	movs	r4, r3
 800eda6:	e79a      	b.n	800ecde <_strtod_l+0x9e6>
 800eda8:	23d4      	movs	r3, #212	@ 0xd4
 800edaa:	049b      	lsls	r3, r3, #18
 800edac:	18cf      	adds	r7, r1, r3
 800edae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edb0:	9710      	str	r7, [sp, #64]	@ 0x40
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d1c2      	bne.n	800ed3c <_strtod_l+0xa44>
 800edb6:	4b3d      	ldr	r3, [pc, #244]	@ (800eeac <_strtod_l+0xbb4>)
 800edb8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800edba:	403b      	ands	r3, r7
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d1bd      	bne.n	800ed3c <_strtod_l+0xa44>
 800edc0:	0020      	movs	r0, r4
 800edc2:	0029      	movs	r1, r5
 800edc4:	f7f1 fbdc 	bl	8000580 <__aeabi_d2lz>
 800edc8:	f7f1 fc14 	bl	80005f4 <__aeabi_l2d>
 800edcc:	0002      	movs	r2, r0
 800edce:	000b      	movs	r3, r1
 800edd0:	0020      	movs	r0, r4
 800edd2:	0029      	movs	r1, r5
 800edd4:	f7f3 fa4c 	bl	8002270 <__aeabi_dsub>
 800edd8:	033c      	lsls	r4, r7, #12
 800edda:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eddc:	0b24      	lsrs	r4, r4, #12
 800edde:	4334      	orrs	r4, r6
 800ede0:	900e      	str	r0, [sp, #56]	@ 0x38
 800ede2:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ede4:	4a37      	ldr	r2, [pc, #220]	@ (800eec4 <_strtod_l+0xbcc>)
 800ede6:	431c      	orrs	r4, r3
 800ede8:	d052      	beq.n	800ee90 <_strtod_l+0xb98>
 800edea:	4b37      	ldr	r3, [pc, #220]	@ (800eec8 <_strtod_l+0xbd0>)
 800edec:	f7f1 fb34 	bl	8000458 <__aeabi_dcmplt>
 800edf0:	2800      	cmp	r0, #0
 800edf2:	d000      	beq.n	800edf6 <_strtod_l+0xafe>
 800edf4:	e4c3      	b.n	800e77e <_strtod_l+0x486>
 800edf6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800edf8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800edfa:	4a34      	ldr	r2, [pc, #208]	@ (800eecc <_strtod_l+0xbd4>)
 800edfc:	4b2a      	ldr	r3, [pc, #168]	@ (800eea8 <_strtod_l+0xbb0>)
 800edfe:	f7f1 fb3f 	bl	8000480 <__aeabi_dcmpgt>
 800ee02:	2800      	cmp	r0, #0
 800ee04:	d09a      	beq.n	800ed3c <_strtod_l+0xa44>
 800ee06:	e4ba      	b.n	800e77e <_strtod_l+0x486>
 800ee08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d02a      	beq.n	800ee64 <_strtod_l+0xb6c>
 800ee0e:	23d4      	movs	r3, #212	@ 0xd4
 800ee10:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ee12:	04db      	lsls	r3, r3, #19
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d825      	bhi.n	800ee64 <_strtod_l+0xb6c>
 800ee18:	0020      	movs	r0, r4
 800ee1a:	0029      	movs	r1, r5
 800ee1c:	4a2c      	ldr	r2, [pc, #176]	@ (800eed0 <_strtod_l+0xbd8>)
 800ee1e:	4b2d      	ldr	r3, [pc, #180]	@ (800eed4 <_strtod_l+0xbdc>)
 800ee20:	f7f1 fb24 	bl	800046c <__aeabi_dcmple>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d016      	beq.n	800ee56 <_strtod_l+0xb5e>
 800ee28:	0020      	movs	r0, r4
 800ee2a:	0029      	movs	r1, r5
 800ee2c:	f7f1 fb8a 	bl	8000544 <__aeabi_d2uiz>
 800ee30:	2800      	cmp	r0, #0
 800ee32:	d100      	bne.n	800ee36 <_strtod_l+0xb3e>
 800ee34:	3001      	adds	r0, #1
 800ee36:	f7f3 fe43 	bl	8002ac0 <__aeabi_ui2d>
 800ee3a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ee3c:	0004      	movs	r4, r0
 800ee3e:	000d      	movs	r5, r1
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d122      	bne.n	800ee8a <_strtod_l+0xb92>
 800ee44:	2380      	movs	r3, #128	@ 0x80
 800ee46:	061b      	lsls	r3, r3, #24
 800ee48:	18cb      	adds	r3, r1, r3
 800ee4a:	9018      	str	r0, [sp, #96]	@ 0x60
 800ee4c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ee4e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ee50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee52:	9214      	str	r2, [sp, #80]	@ 0x50
 800ee54:	9315      	str	r3, [sp, #84]	@ 0x54
 800ee56:	22d6      	movs	r2, #214	@ 0xd6
 800ee58:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ee5a:	04d2      	lsls	r2, r2, #19
 800ee5c:	189b      	adds	r3, r3, r2
 800ee5e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ee60:	1a9b      	subs	r3, r3, r2
 800ee62:	9315      	str	r3, [sp, #84]	@ 0x54
 800ee64:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ee66:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ee68:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ee6a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800ee6c:	f7ff f8f2 	bl	800e054 <__ulp>
 800ee70:	0002      	movs	r2, r0
 800ee72:	000b      	movs	r3, r1
 800ee74:	0030      	movs	r0, r6
 800ee76:	0039      	movs	r1, r7
 800ee78:	f7f2 ff32 	bl	8001ce0 <__aeabi_dmul>
 800ee7c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ee7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ee80:	f7f1 ff86 	bl	8000d90 <__aeabi_dadd>
 800ee84:	0006      	movs	r6, r0
 800ee86:	000f      	movs	r7, r1
 800ee88:	e791      	b.n	800edae <_strtod_l+0xab6>
 800ee8a:	9418      	str	r4, [sp, #96]	@ 0x60
 800ee8c:	9519      	str	r5, [sp, #100]	@ 0x64
 800ee8e:	e7de      	b.n	800ee4e <_strtod_l+0xb56>
 800ee90:	4b11      	ldr	r3, [pc, #68]	@ (800eed8 <_strtod_l+0xbe0>)
 800ee92:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800ee94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ee96:	f7f1 fadf 	bl	8000458 <__aeabi_dcmplt>
 800ee9a:	e7b2      	b.n	800ee02 <_strtod_l+0xb0a>
 800ee9c:	fff00000 	.word	0xfff00000
 800eea0:	000fffff 	.word	0x000fffff
 800eea4:	3ff00000 	.word	0x3ff00000
 800eea8:	3fe00000 	.word	0x3fe00000
 800eeac:	7ff00000 	.word	0x7ff00000
 800eeb0:	7fe00000 	.word	0x7fe00000
 800eeb4:	fcb00000 	.word	0xfcb00000
 800eeb8:	7c9fffff 	.word	0x7c9fffff
 800eebc:	7fefffff 	.word	0x7fefffff
 800eec0:	bff00000 	.word	0xbff00000
 800eec4:	94a03595 	.word	0x94a03595
 800eec8:	3fdfffff 	.word	0x3fdfffff
 800eecc:	35afe535 	.word	0x35afe535
 800eed0:	ffc00000 	.word	0xffc00000
 800eed4:	41dfffff 	.word	0x41dfffff
 800eed8:	3fcfffff 	.word	0x3fcfffff

0800eedc <_strtod_r>:
 800eedc:	b510      	push	{r4, lr}
 800eede:	4b02      	ldr	r3, [pc, #8]	@ (800eee8 <_strtod_r+0xc>)
 800eee0:	f7ff fa0a 	bl	800e2f8 <_strtod_l>
 800eee4:	bd10      	pop	{r4, pc}
 800eee6:	46c0      	nop			@ (mov r8, r8)
 800eee8:	20000080 	.word	0x20000080

0800eeec <__ssputs_r>:
 800eeec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeee:	688e      	ldr	r6, [r1, #8]
 800eef0:	b085      	sub	sp, #20
 800eef2:	001f      	movs	r7, r3
 800eef4:	000c      	movs	r4, r1
 800eef6:	680b      	ldr	r3, [r1, #0]
 800eef8:	9002      	str	r0, [sp, #8]
 800eefa:	9203      	str	r2, [sp, #12]
 800eefc:	42be      	cmp	r6, r7
 800eefe:	d830      	bhi.n	800ef62 <__ssputs_r+0x76>
 800ef00:	210c      	movs	r1, #12
 800ef02:	5e62      	ldrsh	r2, [r4, r1]
 800ef04:	2190      	movs	r1, #144	@ 0x90
 800ef06:	00c9      	lsls	r1, r1, #3
 800ef08:	420a      	tst	r2, r1
 800ef0a:	d028      	beq.n	800ef5e <__ssputs_r+0x72>
 800ef0c:	2003      	movs	r0, #3
 800ef0e:	6921      	ldr	r1, [r4, #16]
 800ef10:	1a5b      	subs	r3, r3, r1
 800ef12:	9301      	str	r3, [sp, #4]
 800ef14:	6963      	ldr	r3, [r4, #20]
 800ef16:	4343      	muls	r3, r0
 800ef18:	9801      	ldr	r0, [sp, #4]
 800ef1a:	0fdd      	lsrs	r5, r3, #31
 800ef1c:	18ed      	adds	r5, r5, r3
 800ef1e:	1c7b      	adds	r3, r7, #1
 800ef20:	181b      	adds	r3, r3, r0
 800ef22:	106d      	asrs	r5, r5, #1
 800ef24:	42ab      	cmp	r3, r5
 800ef26:	d900      	bls.n	800ef2a <__ssputs_r+0x3e>
 800ef28:	001d      	movs	r5, r3
 800ef2a:	0552      	lsls	r2, r2, #21
 800ef2c:	d528      	bpl.n	800ef80 <__ssputs_r+0x94>
 800ef2e:	0029      	movs	r1, r5
 800ef30:	9802      	ldr	r0, [sp, #8]
 800ef32:	f7fe fc6f 	bl	800d814 <_malloc_r>
 800ef36:	1e06      	subs	r6, r0, #0
 800ef38:	d02c      	beq.n	800ef94 <__ssputs_r+0xa8>
 800ef3a:	9a01      	ldr	r2, [sp, #4]
 800ef3c:	6921      	ldr	r1, [r4, #16]
 800ef3e:	f000 fa1b 	bl	800f378 <memcpy>
 800ef42:	89a2      	ldrh	r2, [r4, #12]
 800ef44:	4b18      	ldr	r3, [pc, #96]	@ (800efa8 <__ssputs_r+0xbc>)
 800ef46:	401a      	ands	r2, r3
 800ef48:	2380      	movs	r3, #128	@ 0x80
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	81a3      	strh	r3, [r4, #12]
 800ef4e:	9b01      	ldr	r3, [sp, #4]
 800ef50:	6126      	str	r6, [r4, #16]
 800ef52:	18f6      	adds	r6, r6, r3
 800ef54:	6026      	str	r6, [r4, #0]
 800ef56:	003e      	movs	r6, r7
 800ef58:	6165      	str	r5, [r4, #20]
 800ef5a:	1aed      	subs	r5, r5, r3
 800ef5c:	60a5      	str	r5, [r4, #8]
 800ef5e:	42be      	cmp	r6, r7
 800ef60:	d900      	bls.n	800ef64 <__ssputs_r+0x78>
 800ef62:	003e      	movs	r6, r7
 800ef64:	0032      	movs	r2, r6
 800ef66:	9903      	ldr	r1, [sp, #12]
 800ef68:	6820      	ldr	r0, [r4, #0]
 800ef6a:	f000 f9ce 	bl	800f30a <memmove>
 800ef6e:	2000      	movs	r0, #0
 800ef70:	68a3      	ldr	r3, [r4, #8]
 800ef72:	1b9b      	subs	r3, r3, r6
 800ef74:	60a3      	str	r3, [r4, #8]
 800ef76:	6823      	ldr	r3, [r4, #0]
 800ef78:	199b      	adds	r3, r3, r6
 800ef7a:	6023      	str	r3, [r4, #0]
 800ef7c:	b005      	add	sp, #20
 800ef7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef80:	002a      	movs	r2, r5
 800ef82:	9802      	ldr	r0, [sp, #8]
 800ef84:	f000 fdc0 	bl	800fb08 <_realloc_r>
 800ef88:	1e06      	subs	r6, r0, #0
 800ef8a:	d1e0      	bne.n	800ef4e <__ssputs_r+0x62>
 800ef8c:	6921      	ldr	r1, [r4, #16]
 800ef8e:	9802      	ldr	r0, [sp, #8]
 800ef90:	f7fe fbca 	bl	800d728 <_free_r>
 800ef94:	230c      	movs	r3, #12
 800ef96:	2001      	movs	r0, #1
 800ef98:	9a02      	ldr	r2, [sp, #8]
 800ef9a:	4240      	negs	r0, r0
 800ef9c:	6013      	str	r3, [r2, #0]
 800ef9e:	89a2      	ldrh	r2, [r4, #12]
 800efa0:	3334      	adds	r3, #52	@ 0x34
 800efa2:	4313      	orrs	r3, r2
 800efa4:	81a3      	strh	r3, [r4, #12]
 800efa6:	e7e9      	b.n	800ef7c <__ssputs_r+0x90>
 800efa8:	fffffb7f 	.word	0xfffffb7f

0800efac <_svfiprintf_r>:
 800efac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efae:	b0a1      	sub	sp, #132	@ 0x84
 800efb0:	9003      	str	r0, [sp, #12]
 800efb2:	001d      	movs	r5, r3
 800efb4:	898b      	ldrh	r3, [r1, #12]
 800efb6:	000f      	movs	r7, r1
 800efb8:	0016      	movs	r6, r2
 800efba:	061b      	lsls	r3, r3, #24
 800efbc:	d511      	bpl.n	800efe2 <_svfiprintf_r+0x36>
 800efbe:	690b      	ldr	r3, [r1, #16]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d10e      	bne.n	800efe2 <_svfiprintf_r+0x36>
 800efc4:	2140      	movs	r1, #64	@ 0x40
 800efc6:	f7fe fc25 	bl	800d814 <_malloc_r>
 800efca:	6038      	str	r0, [r7, #0]
 800efcc:	6138      	str	r0, [r7, #16]
 800efce:	2800      	cmp	r0, #0
 800efd0:	d105      	bne.n	800efde <_svfiprintf_r+0x32>
 800efd2:	230c      	movs	r3, #12
 800efd4:	9a03      	ldr	r2, [sp, #12]
 800efd6:	6013      	str	r3, [r2, #0]
 800efd8:	2001      	movs	r0, #1
 800efda:	4240      	negs	r0, r0
 800efdc:	e0cf      	b.n	800f17e <_svfiprintf_r+0x1d2>
 800efde:	2340      	movs	r3, #64	@ 0x40
 800efe0:	617b      	str	r3, [r7, #20]
 800efe2:	2300      	movs	r3, #0
 800efe4:	ac08      	add	r4, sp, #32
 800efe6:	6163      	str	r3, [r4, #20]
 800efe8:	3320      	adds	r3, #32
 800efea:	7663      	strb	r3, [r4, #25]
 800efec:	3310      	adds	r3, #16
 800efee:	76a3      	strb	r3, [r4, #26]
 800eff0:	9507      	str	r5, [sp, #28]
 800eff2:	0035      	movs	r5, r6
 800eff4:	782b      	ldrb	r3, [r5, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d001      	beq.n	800effe <_svfiprintf_r+0x52>
 800effa:	2b25      	cmp	r3, #37	@ 0x25
 800effc:	d148      	bne.n	800f090 <_svfiprintf_r+0xe4>
 800effe:	1bab      	subs	r3, r5, r6
 800f000:	9305      	str	r3, [sp, #20]
 800f002:	42b5      	cmp	r5, r6
 800f004:	d00b      	beq.n	800f01e <_svfiprintf_r+0x72>
 800f006:	0032      	movs	r2, r6
 800f008:	0039      	movs	r1, r7
 800f00a:	9803      	ldr	r0, [sp, #12]
 800f00c:	f7ff ff6e 	bl	800eeec <__ssputs_r>
 800f010:	3001      	adds	r0, #1
 800f012:	d100      	bne.n	800f016 <_svfiprintf_r+0x6a>
 800f014:	e0ae      	b.n	800f174 <_svfiprintf_r+0x1c8>
 800f016:	6963      	ldr	r3, [r4, #20]
 800f018:	9a05      	ldr	r2, [sp, #20]
 800f01a:	189b      	adds	r3, r3, r2
 800f01c:	6163      	str	r3, [r4, #20]
 800f01e:	782b      	ldrb	r3, [r5, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d100      	bne.n	800f026 <_svfiprintf_r+0x7a>
 800f024:	e0a6      	b.n	800f174 <_svfiprintf_r+0x1c8>
 800f026:	2201      	movs	r2, #1
 800f028:	2300      	movs	r3, #0
 800f02a:	4252      	negs	r2, r2
 800f02c:	6062      	str	r2, [r4, #4]
 800f02e:	a904      	add	r1, sp, #16
 800f030:	3254      	adds	r2, #84	@ 0x54
 800f032:	1852      	adds	r2, r2, r1
 800f034:	1c6e      	adds	r6, r5, #1
 800f036:	6023      	str	r3, [r4, #0]
 800f038:	60e3      	str	r3, [r4, #12]
 800f03a:	60a3      	str	r3, [r4, #8]
 800f03c:	7013      	strb	r3, [r2, #0]
 800f03e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f040:	4b54      	ldr	r3, [pc, #336]	@ (800f194 <_svfiprintf_r+0x1e8>)
 800f042:	2205      	movs	r2, #5
 800f044:	0018      	movs	r0, r3
 800f046:	7831      	ldrb	r1, [r6, #0]
 800f048:	9305      	str	r3, [sp, #20]
 800f04a:	f7fd fcdc 	bl	800ca06 <memchr>
 800f04e:	1c75      	adds	r5, r6, #1
 800f050:	2800      	cmp	r0, #0
 800f052:	d11f      	bne.n	800f094 <_svfiprintf_r+0xe8>
 800f054:	6822      	ldr	r2, [r4, #0]
 800f056:	06d3      	lsls	r3, r2, #27
 800f058:	d504      	bpl.n	800f064 <_svfiprintf_r+0xb8>
 800f05a:	2353      	movs	r3, #83	@ 0x53
 800f05c:	a904      	add	r1, sp, #16
 800f05e:	185b      	adds	r3, r3, r1
 800f060:	2120      	movs	r1, #32
 800f062:	7019      	strb	r1, [r3, #0]
 800f064:	0713      	lsls	r3, r2, #28
 800f066:	d504      	bpl.n	800f072 <_svfiprintf_r+0xc6>
 800f068:	2353      	movs	r3, #83	@ 0x53
 800f06a:	a904      	add	r1, sp, #16
 800f06c:	185b      	adds	r3, r3, r1
 800f06e:	212b      	movs	r1, #43	@ 0x2b
 800f070:	7019      	strb	r1, [r3, #0]
 800f072:	7833      	ldrb	r3, [r6, #0]
 800f074:	2b2a      	cmp	r3, #42	@ 0x2a
 800f076:	d016      	beq.n	800f0a6 <_svfiprintf_r+0xfa>
 800f078:	0035      	movs	r5, r6
 800f07a:	2100      	movs	r1, #0
 800f07c:	200a      	movs	r0, #10
 800f07e:	68e3      	ldr	r3, [r4, #12]
 800f080:	782a      	ldrb	r2, [r5, #0]
 800f082:	1c6e      	adds	r6, r5, #1
 800f084:	3a30      	subs	r2, #48	@ 0x30
 800f086:	2a09      	cmp	r2, #9
 800f088:	d950      	bls.n	800f12c <_svfiprintf_r+0x180>
 800f08a:	2900      	cmp	r1, #0
 800f08c:	d111      	bne.n	800f0b2 <_svfiprintf_r+0x106>
 800f08e:	e017      	b.n	800f0c0 <_svfiprintf_r+0x114>
 800f090:	3501      	adds	r5, #1
 800f092:	e7af      	b.n	800eff4 <_svfiprintf_r+0x48>
 800f094:	9b05      	ldr	r3, [sp, #20]
 800f096:	6822      	ldr	r2, [r4, #0]
 800f098:	1ac0      	subs	r0, r0, r3
 800f09a:	2301      	movs	r3, #1
 800f09c:	4083      	lsls	r3, r0
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	002e      	movs	r6, r5
 800f0a2:	6023      	str	r3, [r4, #0]
 800f0a4:	e7cc      	b.n	800f040 <_svfiprintf_r+0x94>
 800f0a6:	9b07      	ldr	r3, [sp, #28]
 800f0a8:	1d19      	adds	r1, r3, #4
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	9107      	str	r1, [sp, #28]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	db01      	blt.n	800f0b6 <_svfiprintf_r+0x10a>
 800f0b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0b4:	e004      	b.n	800f0c0 <_svfiprintf_r+0x114>
 800f0b6:	425b      	negs	r3, r3
 800f0b8:	60e3      	str	r3, [r4, #12]
 800f0ba:	2302      	movs	r3, #2
 800f0bc:	4313      	orrs	r3, r2
 800f0be:	6023      	str	r3, [r4, #0]
 800f0c0:	782b      	ldrb	r3, [r5, #0]
 800f0c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0c4:	d10c      	bne.n	800f0e0 <_svfiprintf_r+0x134>
 800f0c6:	786b      	ldrb	r3, [r5, #1]
 800f0c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0ca:	d134      	bne.n	800f136 <_svfiprintf_r+0x18a>
 800f0cc:	9b07      	ldr	r3, [sp, #28]
 800f0ce:	3502      	adds	r5, #2
 800f0d0:	1d1a      	adds	r2, r3, #4
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	9207      	str	r2, [sp, #28]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	da01      	bge.n	800f0de <_svfiprintf_r+0x132>
 800f0da:	2301      	movs	r3, #1
 800f0dc:	425b      	negs	r3, r3
 800f0de:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0e0:	4e2d      	ldr	r6, [pc, #180]	@ (800f198 <_svfiprintf_r+0x1ec>)
 800f0e2:	2203      	movs	r2, #3
 800f0e4:	0030      	movs	r0, r6
 800f0e6:	7829      	ldrb	r1, [r5, #0]
 800f0e8:	f7fd fc8d 	bl	800ca06 <memchr>
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	d006      	beq.n	800f0fe <_svfiprintf_r+0x152>
 800f0f0:	2340      	movs	r3, #64	@ 0x40
 800f0f2:	1b80      	subs	r0, r0, r6
 800f0f4:	4083      	lsls	r3, r0
 800f0f6:	6822      	ldr	r2, [r4, #0]
 800f0f8:	3501      	adds	r5, #1
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	6023      	str	r3, [r4, #0]
 800f0fe:	7829      	ldrb	r1, [r5, #0]
 800f100:	2206      	movs	r2, #6
 800f102:	4826      	ldr	r0, [pc, #152]	@ (800f19c <_svfiprintf_r+0x1f0>)
 800f104:	1c6e      	adds	r6, r5, #1
 800f106:	7621      	strb	r1, [r4, #24]
 800f108:	f7fd fc7d 	bl	800ca06 <memchr>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d038      	beq.n	800f182 <_svfiprintf_r+0x1d6>
 800f110:	4b23      	ldr	r3, [pc, #140]	@ (800f1a0 <_svfiprintf_r+0x1f4>)
 800f112:	2b00      	cmp	r3, #0
 800f114:	d122      	bne.n	800f15c <_svfiprintf_r+0x1b0>
 800f116:	2207      	movs	r2, #7
 800f118:	9b07      	ldr	r3, [sp, #28]
 800f11a:	3307      	adds	r3, #7
 800f11c:	4393      	bics	r3, r2
 800f11e:	3308      	adds	r3, #8
 800f120:	9307      	str	r3, [sp, #28]
 800f122:	6963      	ldr	r3, [r4, #20]
 800f124:	9a04      	ldr	r2, [sp, #16]
 800f126:	189b      	adds	r3, r3, r2
 800f128:	6163      	str	r3, [r4, #20]
 800f12a:	e762      	b.n	800eff2 <_svfiprintf_r+0x46>
 800f12c:	4343      	muls	r3, r0
 800f12e:	0035      	movs	r5, r6
 800f130:	2101      	movs	r1, #1
 800f132:	189b      	adds	r3, r3, r2
 800f134:	e7a4      	b.n	800f080 <_svfiprintf_r+0xd4>
 800f136:	2300      	movs	r3, #0
 800f138:	200a      	movs	r0, #10
 800f13a:	0019      	movs	r1, r3
 800f13c:	3501      	adds	r5, #1
 800f13e:	6063      	str	r3, [r4, #4]
 800f140:	782a      	ldrb	r2, [r5, #0]
 800f142:	1c6e      	adds	r6, r5, #1
 800f144:	3a30      	subs	r2, #48	@ 0x30
 800f146:	2a09      	cmp	r2, #9
 800f148:	d903      	bls.n	800f152 <_svfiprintf_r+0x1a6>
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d0c8      	beq.n	800f0e0 <_svfiprintf_r+0x134>
 800f14e:	9109      	str	r1, [sp, #36]	@ 0x24
 800f150:	e7c6      	b.n	800f0e0 <_svfiprintf_r+0x134>
 800f152:	4341      	muls	r1, r0
 800f154:	0035      	movs	r5, r6
 800f156:	2301      	movs	r3, #1
 800f158:	1889      	adds	r1, r1, r2
 800f15a:	e7f1      	b.n	800f140 <_svfiprintf_r+0x194>
 800f15c:	aa07      	add	r2, sp, #28
 800f15e:	9200      	str	r2, [sp, #0]
 800f160:	0021      	movs	r1, r4
 800f162:	003a      	movs	r2, r7
 800f164:	4b0f      	ldr	r3, [pc, #60]	@ (800f1a4 <_svfiprintf_r+0x1f8>)
 800f166:	9803      	ldr	r0, [sp, #12]
 800f168:	f7fc fc98 	bl	800ba9c <_printf_float>
 800f16c:	9004      	str	r0, [sp, #16]
 800f16e:	9b04      	ldr	r3, [sp, #16]
 800f170:	3301      	adds	r3, #1
 800f172:	d1d6      	bne.n	800f122 <_svfiprintf_r+0x176>
 800f174:	89bb      	ldrh	r3, [r7, #12]
 800f176:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f178:	065b      	lsls	r3, r3, #25
 800f17a:	d500      	bpl.n	800f17e <_svfiprintf_r+0x1d2>
 800f17c:	e72c      	b.n	800efd8 <_svfiprintf_r+0x2c>
 800f17e:	b021      	add	sp, #132	@ 0x84
 800f180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f182:	aa07      	add	r2, sp, #28
 800f184:	9200      	str	r2, [sp, #0]
 800f186:	0021      	movs	r1, r4
 800f188:	003a      	movs	r2, r7
 800f18a:	4b06      	ldr	r3, [pc, #24]	@ (800f1a4 <_svfiprintf_r+0x1f8>)
 800f18c:	9803      	ldr	r0, [sp, #12]
 800f18e:	f7fc ff33 	bl	800bff8 <_printf_i>
 800f192:	e7eb      	b.n	800f16c <_svfiprintf_r+0x1c0>
 800f194:	08010b40 	.word	0x08010b40
 800f198:	08010b46 	.word	0x08010b46
 800f19c:	08010b4a 	.word	0x08010b4a
 800f1a0:	0800ba9d 	.word	0x0800ba9d
 800f1a4:	0800eeed 	.word	0x0800eeed

0800f1a8 <__sflush_r>:
 800f1a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1aa:	220c      	movs	r2, #12
 800f1ac:	5e8b      	ldrsh	r3, [r1, r2]
 800f1ae:	0005      	movs	r5, r0
 800f1b0:	000c      	movs	r4, r1
 800f1b2:	071a      	lsls	r2, r3, #28
 800f1b4:	d456      	bmi.n	800f264 <__sflush_r+0xbc>
 800f1b6:	684a      	ldr	r2, [r1, #4]
 800f1b8:	2a00      	cmp	r2, #0
 800f1ba:	dc02      	bgt.n	800f1c2 <__sflush_r+0x1a>
 800f1bc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f1be:	2a00      	cmp	r2, #0
 800f1c0:	dd4e      	ble.n	800f260 <__sflush_r+0xb8>
 800f1c2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f1c4:	2f00      	cmp	r7, #0
 800f1c6:	d04b      	beq.n	800f260 <__sflush_r+0xb8>
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	2080      	movs	r0, #128	@ 0x80
 800f1cc:	682e      	ldr	r6, [r5, #0]
 800f1ce:	602a      	str	r2, [r5, #0]
 800f1d0:	001a      	movs	r2, r3
 800f1d2:	0140      	lsls	r0, r0, #5
 800f1d4:	6a21      	ldr	r1, [r4, #32]
 800f1d6:	4002      	ands	r2, r0
 800f1d8:	4203      	tst	r3, r0
 800f1da:	d033      	beq.n	800f244 <__sflush_r+0x9c>
 800f1dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f1de:	89a3      	ldrh	r3, [r4, #12]
 800f1e0:	075b      	lsls	r3, r3, #29
 800f1e2:	d506      	bpl.n	800f1f2 <__sflush_r+0x4a>
 800f1e4:	6863      	ldr	r3, [r4, #4]
 800f1e6:	1ad2      	subs	r2, r2, r3
 800f1e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d001      	beq.n	800f1f2 <__sflush_r+0x4a>
 800f1ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f1f0:	1ad2      	subs	r2, r2, r3
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	0028      	movs	r0, r5
 800f1f6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f1f8:	6a21      	ldr	r1, [r4, #32]
 800f1fa:	47b8      	blx	r7
 800f1fc:	89a2      	ldrh	r2, [r4, #12]
 800f1fe:	1c43      	adds	r3, r0, #1
 800f200:	d106      	bne.n	800f210 <__sflush_r+0x68>
 800f202:	6829      	ldr	r1, [r5, #0]
 800f204:	291d      	cmp	r1, #29
 800f206:	d846      	bhi.n	800f296 <__sflush_r+0xee>
 800f208:	4b29      	ldr	r3, [pc, #164]	@ (800f2b0 <__sflush_r+0x108>)
 800f20a:	410b      	asrs	r3, r1
 800f20c:	07db      	lsls	r3, r3, #31
 800f20e:	d442      	bmi.n	800f296 <__sflush_r+0xee>
 800f210:	2300      	movs	r3, #0
 800f212:	6063      	str	r3, [r4, #4]
 800f214:	6923      	ldr	r3, [r4, #16]
 800f216:	6023      	str	r3, [r4, #0]
 800f218:	04d2      	lsls	r2, r2, #19
 800f21a:	d505      	bpl.n	800f228 <__sflush_r+0x80>
 800f21c:	1c43      	adds	r3, r0, #1
 800f21e:	d102      	bne.n	800f226 <__sflush_r+0x7e>
 800f220:	682b      	ldr	r3, [r5, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d100      	bne.n	800f228 <__sflush_r+0x80>
 800f226:	6560      	str	r0, [r4, #84]	@ 0x54
 800f228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f22a:	602e      	str	r6, [r5, #0]
 800f22c:	2900      	cmp	r1, #0
 800f22e:	d017      	beq.n	800f260 <__sflush_r+0xb8>
 800f230:	0023      	movs	r3, r4
 800f232:	3344      	adds	r3, #68	@ 0x44
 800f234:	4299      	cmp	r1, r3
 800f236:	d002      	beq.n	800f23e <__sflush_r+0x96>
 800f238:	0028      	movs	r0, r5
 800f23a:	f7fe fa75 	bl	800d728 <_free_r>
 800f23e:	2300      	movs	r3, #0
 800f240:	6363      	str	r3, [r4, #52]	@ 0x34
 800f242:	e00d      	b.n	800f260 <__sflush_r+0xb8>
 800f244:	2301      	movs	r3, #1
 800f246:	0028      	movs	r0, r5
 800f248:	47b8      	blx	r7
 800f24a:	0002      	movs	r2, r0
 800f24c:	1c43      	adds	r3, r0, #1
 800f24e:	d1c6      	bne.n	800f1de <__sflush_r+0x36>
 800f250:	682b      	ldr	r3, [r5, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d0c3      	beq.n	800f1de <__sflush_r+0x36>
 800f256:	2b1d      	cmp	r3, #29
 800f258:	d001      	beq.n	800f25e <__sflush_r+0xb6>
 800f25a:	2b16      	cmp	r3, #22
 800f25c:	d11a      	bne.n	800f294 <__sflush_r+0xec>
 800f25e:	602e      	str	r6, [r5, #0]
 800f260:	2000      	movs	r0, #0
 800f262:	e01e      	b.n	800f2a2 <__sflush_r+0xfa>
 800f264:	690e      	ldr	r6, [r1, #16]
 800f266:	2e00      	cmp	r6, #0
 800f268:	d0fa      	beq.n	800f260 <__sflush_r+0xb8>
 800f26a:	680f      	ldr	r7, [r1, #0]
 800f26c:	600e      	str	r6, [r1, #0]
 800f26e:	1bba      	subs	r2, r7, r6
 800f270:	9201      	str	r2, [sp, #4]
 800f272:	2200      	movs	r2, #0
 800f274:	079b      	lsls	r3, r3, #30
 800f276:	d100      	bne.n	800f27a <__sflush_r+0xd2>
 800f278:	694a      	ldr	r2, [r1, #20]
 800f27a:	60a2      	str	r2, [r4, #8]
 800f27c:	9b01      	ldr	r3, [sp, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	ddee      	ble.n	800f260 <__sflush_r+0xb8>
 800f282:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f284:	0032      	movs	r2, r6
 800f286:	001f      	movs	r7, r3
 800f288:	0028      	movs	r0, r5
 800f28a:	9b01      	ldr	r3, [sp, #4]
 800f28c:	6a21      	ldr	r1, [r4, #32]
 800f28e:	47b8      	blx	r7
 800f290:	2800      	cmp	r0, #0
 800f292:	dc07      	bgt.n	800f2a4 <__sflush_r+0xfc>
 800f294:	89a2      	ldrh	r2, [r4, #12]
 800f296:	2340      	movs	r3, #64	@ 0x40
 800f298:	2001      	movs	r0, #1
 800f29a:	4313      	orrs	r3, r2
 800f29c:	b21b      	sxth	r3, r3
 800f29e:	81a3      	strh	r3, [r4, #12]
 800f2a0:	4240      	negs	r0, r0
 800f2a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f2a4:	9b01      	ldr	r3, [sp, #4]
 800f2a6:	1836      	adds	r6, r6, r0
 800f2a8:	1a1b      	subs	r3, r3, r0
 800f2aa:	9301      	str	r3, [sp, #4]
 800f2ac:	e7e6      	b.n	800f27c <__sflush_r+0xd4>
 800f2ae:	46c0      	nop			@ (mov r8, r8)
 800f2b0:	dfbffffe 	.word	0xdfbffffe

0800f2b4 <_fflush_r>:
 800f2b4:	690b      	ldr	r3, [r1, #16]
 800f2b6:	b570      	push	{r4, r5, r6, lr}
 800f2b8:	0005      	movs	r5, r0
 800f2ba:	000c      	movs	r4, r1
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d102      	bne.n	800f2c6 <_fflush_r+0x12>
 800f2c0:	2500      	movs	r5, #0
 800f2c2:	0028      	movs	r0, r5
 800f2c4:	bd70      	pop	{r4, r5, r6, pc}
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	d004      	beq.n	800f2d4 <_fflush_r+0x20>
 800f2ca:	6a03      	ldr	r3, [r0, #32]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d101      	bne.n	800f2d4 <_fflush_r+0x20>
 800f2d0:	f7fd fa3e 	bl	800c750 <__sinit>
 800f2d4:	220c      	movs	r2, #12
 800f2d6:	5ea3      	ldrsh	r3, [r4, r2]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d0f1      	beq.n	800f2c0 <_fflush_r+0xc>
 800f2dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f2de:	07d2      	lsls	r2, r2, #31
 800f2e0:	d404      	bmi.n	800f2ec <_fflush_r+0x38>
 800f2e2:	059b      	lsls	r3, r3, #22
 800f2e4:	d402      	bmi.n	800f2ec <_fflush_r+0x38>
 800f2e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2e8:	f7fd fb8b 	bl	800ca02 <__retarget_lock_acquire_recursive>
 800f2ec:	0028      	movs	r0, r5
 800f2ee:	0021      	movs	r1, r4
 800f2f0:	f7ff ff5a 	bl	800f1a8 <__sflush_r>
 800f2f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2f6:	0005      	movs	r5, r0
 800f2f8:	07db      	lsls	r3, r3, #31
 800f2fa:	d4e2      	bmi.n	800f2c2 <_fflush_r+0xe>
 800f2fc:	89a3      	ldrh	r3, [r4, #12]
 800f2fe:	059b      	lsls	r3, r3, #22
 800f300:	d4df      	bmi.n	800f2c2 <_fflush_r+0xe>
 800f302:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f304:	f7fd fb7e 	bl	800ca04 <__retarget_lock_release_recursive>
 800f308:	e7db      	b.n	800f2c2 <_fflush_r+0xe>

0800f30a <memmove>:
 800f30a:	b510      	push	{r4, lr}
 800f30c:	4288      	cmp	r0, r1
 800f30e:	d806      	bhi.n	800f31e <memmove+0x14>
 800f310:	2300      	movs	r3, #0
 800f312:	429a      	cmp	r2, r3
 800f314:	d008      	beq.n	800f328 <memmove+0x1e>
 800f316:	5ccc      	ldrb	r4, [r1, r3]
 800f318:	54c4      	strb	r4, [r0, r3]
 800f31a:	3301      	adds	r3, #1
 800f31c:	e7f9      	b.n	800f312 <memmove+0x8>
 800f31e:	188b      	adds	r3, r1, r2
 800f320:	4298      	cmp	r0, r3
 800f322:	d2f5      	bcs.n	800f310 <memmove+0x6>
 800f324:	3a01      	subs	r2, #1
 800f326:	d200      	bcs.n	800f32a <memmove+0x20>
 800f328:	bd10      	pop	{r4, pc}
 800f32a:	5c8b      	ldrb	r3, [r1, r2]
 800f32c:	5483      	strb	r3, [r0, r2]
 800f32e:	e7f9      	b.n	800f324 <memmove+0x1a>

0800f330 <strncmp>:
 800f330:	b530      	push	{r4, r5, lr}
 800f332:	0005      	movs	r5, r0
 800f334:	1e10      	subs	r0, r2, #0
 800f336:	d00b      	beq.n	800f350 <strncmp+0x20>
 800f338:	2400      	movs	r4, #0
 800f33a:	3a01      	subs	r2, #1
 800f33c:	5d2b      	ldrb	r3, [r5, r4]
 800f33e:	5d08      	ldrb	r0, [r1, r4]
 800f340:	4283      	cmp	r3, r0
 800f342:	d104      	bne.n	800f34e <strncmp+0x1e>
 800f344:	42a2      	cmp	r2, r4
 800f346:	d002      	beq.n	800f34e <strncmp+0x1e>
 800f348:	3401      	adds	r4, #1
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d1f6      	bne.n	800f33c <strncmp+0xc>
 800f34e:	1a18      	subs	r0, r3, r0
 800f350:	bd30      	pop	{r4, r5, pc}
	...

0800f354 <_sbrk_r>:
 800f354:	2300      	movs	r3, #0
 800f356:	b570      	push	{r4, r5, r6, lr}
 800f358:	4d06      	ldr	r5, [pc, #24]	@ (800f374 <_sbrk_r+0x20>)
 800f35a:	0004      	movs	r4, r0
 800f35c:	0008      	movs	r0, r1
 800f35e:	602b      	str	r3, [r5, #0]
 800f360:	f7f5 fce8 	bl	8004d34 <_sbrk>
 800f364:	1c43      	adds	r3, r0, #1
 800f366:	d103      	bne.n	800f370 <_sbrk_r+0x1c>
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d000      	beq.n	800f370 <_sbrk_r+0x1c>
 800f36e:	6023      	str	r3, [r4, #0]
 800f370:	bd70      	pop	{r4, r5, r6, pc}
 800f372:	46c0      	nop			@ (mov r8, r8)
 800f374:	200006f8 	.word	0x200006f8

0800f378 <memcpy>:
 800f378:	2300      	movs	r3, #0
 800f37a:	b510      	push	{r4, lr}
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d100      	bne.n	800f382 <memcpy+0xa>
 800f380:	bd10      	pop	{r4, pc}
 800f382:	5ccc      	ldrb	r4, [r1, r3]
 800f384:	54c4      	strb	r4, [r0, r3]
 800f386:	3301      	adds	r3, #1
 800f388:	e7f8      	b.n	800f37c <memcpy+0x4>
	...

0800f38c <nan>:
 800f38c:	2000      	movs	r0, #0
 800f38e:	4901      	ldr	r1, [pc, #4]	@ (800f394 <nan+0x8>)
 800f390:	4770      	bx	lr
 800f392:	46c0      	nop			@ (mov r8, r8)
 800f394:	7ff80000 	.word	0x7ff80000

0800f398 <__assert_func>:
 800f398:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f39a:	0014      	movs	r4, r2
 800f39c:	001a      	movs	r2, r3
 800f39e:	4b09      	ldr	r3, [pc, #36]	@ (800f3c4 <__assert_func+0x2c>)
 800f3a0:	0005      	movs	r5, r0
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	000e      	movs	r6, r1
 800f3a6:	68d8      	ldr	r0, [r3, #12]
 800f3a8:	4b07      	ldr	r3, [pc, #28]	@ (800f3c8 <__assert_func+0x30>)
 800f3aa:	2c00      	cmp	r4, #0
 800f3ac:	d101      	bne.n	800f3b2 <__assert_func+0x1a>
 800f3ae:	4b07      	ldr	r3, [pc, #28]	@ (800f3cc <__assert_func+0x34>)
 800f3b0:	001c      	movs	r4, r3
 800f3b2:	4907      	ldr	r1, [pc, #28]	@ (800f3d0 <__assert_func+0x38>)
 800f3b4:	9301      	str	r3, [sp, #4]
 800f3b6:	9402      	str	r4, [sp, #8]
 800f3b8:	002b      	movs	r3, r5
 800f3ba:	9600      	str	r6, [sp, #0]
 800f3bc:	f000 fbe0 	bl	800fb80 <fiprintf>
 800f3c0:	f000 fbee 	bl	800fba0 <abort>
 800f3c4:	20000030 	.word	0x20000030
 800f3c8:	08010b59 	.word	0x08010b59
 800f3cc:	08010b94 	.word	0x08010b94
 800f3d0:	08010b66 	.word	0x08010b66

0800f3d4 <_calloc_r>:
 800f3d4:	b570      	push	{r4, r5, r6, lr}
 800f3d6:	0c0b      	lsrs	r3, r1, #16
 800f3d8:	0c15      	lsrs	r5, r2, #16
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d11e      	bne.n	800f41c <_calloc_r+0x48>
 800f3de:	2d00      	cmp	r5, #0
 800f3e0:	d10c      	bne.n	800f3fc <_calloc_r+0x28>
 800f3e2:	b289      	uxth	r1, r1
 800f3e4:	b294      	uxth	r4, r2
 800f3e6:	434c      	muls	r4, r1
 800f3e8:	0021      	movs	r1, r4
 800f3ea:	f7fe fa13 	bl	800d814 <_malloc_r>
 800f3ee:	1e05      	subs	r5, r0, #0
 800f3f0:	d01a      	beq.n	800f428 <_calloc_r+0x54>
 800f3f2:	0022      	movs	r2, r4
 800f3f4:	2100      	movs	r1, #0
 800f3f6:	f7fd fa7f 	bl	800c8f8 <memset>
 800f3fa:	e016      	b.n	800f42a <_calloc_r+0x56>
 800f3fc:	1c2b      	adds	r3, r5, #0
 800f3fe:	1c0c      	adds	r4, r1, #0
 800f400:	b289      	uxth	r1, r1
 800f402:	b292      	uxth	r2, r2
 800f404:	434a      	muls	r2, r1
 800f406:	b29b      	uxth	r3, r3
 800f408:	b2a1      	uxth	r1, r4
 800f40a:	4359      	muls	r1, r3
 800f40c:	0c14      	lsrs	r4, r2, #16
 800f40e:	190c      	adds	r4, r1, r4
 800f410:	0c23      	lsrs	r3, r4, #16
 800f412:	d107      	bne.n	800f424 <_calloc_r+0x50>
 800f414:	0424      	lsls	r4, r4, #16
 800f416:	b292      	uxth	r2, r2
 800f418:	4314      	orrs	r4, r2
 800f41a:	e7e5      	b.n	800f3e8 <_calloc_r+0x14>
 800f41c:	2d00      	cmp	r5, #0
 800f41e:	d101      	bne.n	800f424 <_calloc_r+0x50>
 800f420:	1c14      	adds	r4, r2, #0
 800f422:	e7ed      	b.n	800f400 <_calloc_r+0x2c>
 800f424:	230c      	movs	r3, #12
 800f426:	6003      	str	r3, [r0, #0]
 800f428:	2500      	movs	r5, #0
 800f42a:	0028      	movs	r0, r5
 800f42c:	bd70      	pop	{r4, r5, r6, pc}

0800f42e <rshift>:
 800f42e:	0002      	movs	r2, r0
 800f430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f432:	6904      	ldr	r4, [r0, #16]
 800f434:	b085      	sub	sp, #20
 800f436:	3214      	adds	r2, #20
 800f438:	114b      	asrs	r3, r1, #5
 800f43a:	0016      	movs	r6, r2
 800f43c:	9302      	str	r3, [sp, #8]
 800f43e:	429c      	cmp	r4, r3
 800f440:	dd31      	ble.n	800f4a6 <rshift+0x78>
 800f442:	261f      	movs	r6, #31
 800f444:	000f      	movs	r7, r1
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	00a5      	lsls	r5, r4, #2
 800f44a:	18d3      	adds	r3, r2, r3
 800f44c:	4037      	ands	r7, r6
 800f44e:	1955      	adds	r5, r2, r5
 800f450:	9300      	str	r3, [sp, #0]
 800f452:	9701      	str	r7, [sp, #4]
 800f454:	4231      	tst	r1, r6
 800f456:	d10d      	bne.n	800f474 <rshift+0x46>
 800f458:	0016      	movs	r6, r2
 800f45a:	0019      	movs	r1, r3
 800f45c:	428d      	cmp	r5, r1
 800f45e:	d836      	bhi.n	800f4ce <rshift+0xa0>
 800f460:	9b00      	ldr	r3, [sp, #0]
 800f462:	2600      	movs	r6, #0
 800f464:	3b03      	subs	r3, #3
 800f466:	429d      	cmp	r5, r3
 800f468:	d302      	bcc.n	800f470 <rshift+0x42>
 800f46a:	9b02      	ldr	r3, [sp, #8]
 800f46c:	1ae4      	subs	r4, r4, r3
 800f46e:	00a6      	lsls	r6, r4, #2
 800f470:	1996      	adds	r6, r2, r6
 800f472:	e018      	b.n	800f4a6 <rshift+0x78>
 800f474:	2120      	movs	r1, #32
 800f476:	9e01      	ldr	r6, [sp, #4]
 800f478:	9f01      	ldr	r7, [sp, #4]
 800f47a:	1b89      	subs	r1, r1, r6
 800f47c:	9e00      	ldr	r6, [sp, #0]
 800f47e:	9103      	str	r1, [sp, #12]
 800f480:	ce02      	ldmia	r6!, {r1}
 800f482:	4694      	mov	ip, r2
 800f484:	40f9      	lsrs	r1, r7
 800f486:	42b5      	cmp	r5, r6
 800f488:	d816      	bhi.n	800f4b8 <rshift+0x8a>
 800f48a:	9b00      	ldr	r3, [sp, #0]
 800f48c:	2600      	movs	r6, #0
 800f48e:	3301      	adds	r3, #1
 800f490:	429d      	cmp	r5, r3
 800f492:	d303      	bcc.n	800f49c <rshift+0x6e>
 800f494:	9b02      	ldr	r3, [sp, #8]
 800f496:	1ae4      	subs	r4, r4, r3
 800f498:	00a6      	lsls	r6, r4, #2
 800f49a:	3e04      	subs	r6, #4
 800f49c:	1996      	adds	r6, r2, r6
 800f49e:	6031      	str	r1, [r6, #0]
 800f4a0:	2900      	cmp	r1, #0
 800f4a2:	d000      	beq.n	800f4a6 <rshift+0x78>
 800f4a4:	3604      	adds	r6, #4
 800f4a6:	1ab1      	subs	r1, r6, r2
 800f4a8:	1089      	asrs	r1, r1, #2
 800f4aa:	6101      	str	r1, [r0, #16]
 800f4ac:	4296      	cmp	r6, r2
 800f4ae:	d101      	bne.n	800f4b4 <rshift+0x86>
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	6143      	str	r3, [r0, #20]
 800f4b4:	b005      	add	sp, #20
 800f4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4b8:	6837      	ldr	r7, [r6, #0]
 800f4ba:	9b03      	ldr	r3, [sp, #12]
 800f4bc:	409f      	lsls	r7, r3
 800f4be:	430f      	orrs	r7, r1
 800f4c0:	4661      	mov	r1, ip
 800f4c2:	c180      	stmia	r1!, {r7}
 800f4c4:	468c      	mov	ip, r1
 800f4c6:	9b01      	ldr	r3, [sp, #4]
 800f4c8:	ce02      	ldmia	r6!, {r1}
 800f4ca:	40d9      	lsrs	r1, r3
 800f4cc:	e7db      	b.n	800f486 <rshift+0x58>
 800f4ce:	c980      	ldmia	r1!, {r7}
 800f4d0:	c680      	stmia	r6!, {r7}
 800f4d2:	e7c3      	b.n	800f45c <rshift+0x2e>

0800f4d4 <__hexdig_fun>:
 800f4d4:	0002      	movs	r2, r0
 800f4d6:	3a30      	subs	r2, #48	@ 0x30
 800f4d8:	0003      	movs	r3, r0
 800f4da:	2a09      	cmp	r2, #9
 800f4dc:	d802      	bhi.n	800f4e4 <__hexdig_fun+0x10>
 800f4de:	3b20      	subs	r3, #32
 800f4e0:	b2d8      	uxtb	r0, r3
 800f4e2:	4770      	bx	lr
 800f4e4:	0002      	movs	r2, r0
 800f4e6:	3a61      	subs	r2, #97	@ 0x61
 800f4e8:	2a05      	cmp	r2, #5
 800f4ea:	d801      	bhi.n	800f4f0 <__hexdig_fun+0x1c>
 800f4ec:	3b47      	subs	r3, #71	@ 0x47
 800f4ee:	e7f7      	b.n	800f4e0 <__hexdig_fun+0xc>
 800f4f0:	001a      	movs	r2, r3
 800f4f2:	3a41      	subs	r2, #65	@ 0x41
 800f4f4:	2000      	movs	r0, #0
 800f4f6:	2a05      	cmp	r2, #5
 800f4f8:	d8f3      	bhi.n	800f4e2 <__hexdig_fun+0xe>
 800f4fa:	3b27      	subs	r3, #39	@ 0x27
 800f4fc:	e7f0      	b.n	800f4e0 <__hexdig_fun+0xc>
	...

0800f500 <__gethex>:
 800f500:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f502:	b089      	sub	sp, #36	@ 0x24
 800f504:	9307      	str	r3, [sp, #28]
 800f506:	680b      	ldr	r3, [r1, #0]
 800f508:	9201      	str	r2, [sp, #4]
 800f50a:	9003      	str	r0, [sp, #12]
 800f50c:	9106      	str	r1, [sp, #24]
 800f50e:	1c9a      	adds	r2, r3, #2
 800f510:	0011      	movs	r1, r2
 800f512:	3201      	adds	r2, #1
 800f514:	1e50      	subs	r0, r2, #1
 800f516:	7800      	ldrb	r0, [r0, #0]
 800f518:	2830      	cmp	r0, #48	@ 0x30
 800f51a:	d0f9      	beq.n	800f510 <__gethex+0x10>
 800f51c:	1acb      	subs	r3, r1, r3
 800f51e:	3b02      	subs	r3, #2
 800f520:	9305      	str	r3, [sp, #20]
 800f522:	9100      	str	r1, [sp, #0]
 800f524:	f7ff ffd6 	bl	800f4d4 <__hexdig_fun>
 800f528:	2300      	movs	r3, #0
 800f52a:	001d      	movs	r5, r3
 800f52c:	9302      	str	r3, [sp, #8]
 800f52e:	4298      	cmp	r0, r3
 800f530:	d11e      	bne.n	800f570 <__gethex+0x70>
 800f532:	2201      	movs	r2, #1
 800f534:	49a6      	ldr	r1, [pc, #664]	@ (800f7d0 <__gethex+0x2d0>)
 800f536:	9800      	ldr	r0, [sp, #0]
 800f538:	f7ff fefa 	bl	800f330 <strncmp>
 800f53c:	0007      	movs	r7, r0
 800f53e:	42a8      	cmp	r0, r5
 800f540:	d000      	beq.n	800f544 <__gethex+0x44>
 800f542:	e06a      	b.n	800f61a <__gethex+0x11a>
 800f544:	9b00      	ldr	r3, [sp, #0]
 800f546:	7858      	ldrb	r0, [r3, #1]
 800f548:	1c5c      	adds	r4, r3, #1
 800f54a:	f7ff ffc3 	bl	800f4d4 <__hexdig_fun>
 800f54e:	2301      	movs	r3, #1
 800f550:	9302      	str	r3, [sp, #8]
 800f552:	42a8      	cmp	r0, r5
 800f554:	d02f      	beq.n	800f5b6 <__gethex+0xb6>
 800f556:	9400      	str	r4, [sp, #0]
 800f558:	9b00      	ldr	r3, [sp, #0]
 800f55a:	7818      	ldrb	r0, [r3, #0]
 800f55c:	2830      	cmp	r0, #48	@ 0x30
 800f55e:	d009      	beq.n	800f574 <__gethex+0x74>
 800f560:	f7ff ffb8 	bl	800f4d4 <__hexdig_fun>
 800f564:	4242      	negs	r2, r0
 800f566:	4142      	adcs	r2, r0
 800f568:	2301      	movs	r3, #1
 800f56a:	0025      	movs	r5, r4
 800f56c:	9202      	str	r2, [sp, #8]
 800f56e:	9305      	str	r3, [sp, #20]
 800f570:	9c00      	ldr	r4, [sp, #0]
 800f572:	e004      	b.n	800f57e <__gethex+0x7e>
 800f574:	9b00      	ldr	r3, [sp, #0]
 800f576:	3301      	adds	r3, #1
 800f578:	9300      	str	r3, [sp, #0]
 800f57a:	e7ed      	b.n	800f558 <__gethex+0x58>
 800f57c:	3401      	adds	r4, #1
 800f57e:	7820      	ldrb	r0, [r4, #0]
 800f580:	f7ff ffa8 	bl	800f4d4 <__hexdig_fun>
 800f584:	1e07      	subs	r7, r0, #0
 800f586:	d1f9      	bne.n	800f57c <__gethex+0x7c>
 800f588:	2201      	movs	r2, #1
 800f58a:	0020      	movs	r0, r4
 800f58c:	4990      	ldr	r1, [pc, #576]	@ (800f7d0 <__gethex+0x2d0>)
 800f58e:	f7ff fecf 	bl	800f330 <strncmp>
 800f592:	2800      	cmp	r0, #0
 800f594:	d10d      	bne.n	800f5b2 <__gethex+0xb2>
 800f596:	2d00      	cmp	r5, #0
 800f598:	d106      	bne.n	800f5a8 <__gethex+0xa8>
 800f59a:	3401      	adds	r4, #1
 800f59c:	0025      	movs	r5, r4
 800f59e:	7820      	ldrb	r0, [r4, #0]
 800f5a0:	f7ff ff98 	bl	800f4d4 <__hexdig_fun>
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	d102      	bne.n	800f5ae <__gethex+0xae>
 800f5a8:	1b2d      	subs	r5, r5, r4
 800f5aa:	00af      	lsls	r7, r5, #2
 800f5ac:	e003      	b.n	800f5b6 <__gethex+0xb6>
 800f5ae:	3401      	adds	r4, #1
 800f5b0:	e7f5      	b.n	800f59e <__gethex+0x9e>
 800f5b2:	2d00      	cmp	r5, #0
 800f5b4:	d1f8      	bne.n	800f5a8 <__gethex+0xa8>
 800f5b6:	2220      	movs	r2, #32
 800f5b8:	7823      	ldrb	r3, [r4, #0]
 800f5ba:	0026      	movs	r6, r4
 800f5bc:	4393      	bics	r3, r2
 800f5be:	2b50      	cmp	r3, #80	@ 0x50
 800f5c0:	d11d      	bne.n	800f5fe <__gethex+0xfe>
 800f5c2:	7863      	ldrb	r3, [r4, #1]
 800f5c4:	2b2b      	cmp	r3, #43	@ 0x2b
 800f5c6:	d02d      	beq.n	800f624 <__gethex+0x124>
 800f5c8:	2b2d      	cmp	r3, #45	@ 0x2d
 800f5ca:	d02f      	beq.n	800f62c <__gethex+0x12c>
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	1c66      	adds	r6, r4, #1
 800f5d0:	9304      	str	r3, [sp, #16]
 800f5d2:	7830      	ldrb	r0, [r6, #0]
 800f5d4:	f7ff ff7e 	bl	800f4d4 <__hexdig_fun>
 800f5d8:	1e43      	subs	r3, r0, #1
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	0005      	movs	r5, r0
 800f5de:	2b18      	cmp	r3, #24
 800f5e0:	d82a      	bhi.n	800f638 <__gethex+0x138>
 800f5e2:	7870      	ldrb	r0, [r6, #1]
 800f5e4:	f7ff ff76 	bl	800f4d4 <__hexdig_fun>
 800f5e8:	1e43      	subs	r3, r0, #1
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	3601      	adds	r6, #1
 800f5ee:	3d10      	subs	r5, #16
 800f5f0:	2b18      	cmp	r3, #24
 800f5f2:	d91d      	bls.n	800f630 <__gethex+0x130>
 800f5f4:	9b04      	ldr	r3, [sp, #16]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d000      	beq.n	800f5fc <__gethex+0xfc>
 800f5fa:	426d      	negs	r5, r5
 800f5fc:	197f      	adds	r7, r7, r5
 800f5fe:	9b06      	ldr	r3, [sp, #24]
 800f600:	601e      	str	r6, [r3, #0]
 800f602:	9b02      	ldr	r3, [sp, #8]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d019      	beq.n	800f63c <__gethex+0x13c>
 800f608:	9b05      	ldr	r3, [sp, #20]
 800f60a:	2606      	movs	r6, #6
 800f60c:	425a      	negs	r2, r3
 800f60e:	4153      	adcs	r3, r2
 800f610:	425b      	negs	r3, r3
 800f612:	401e      	ands	r6, r3
 800f614:	0030      	movs	r0, r6
 800f616:	b009      	add	sp, #36	@ 0x24
 800f618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f61a:	2301      	movs	r3, #1
 800f61c:	2700      	movs	r7, #0
 800f61e:	9c00      	ldr	r4, [sp, #0]
 800f620:	9302      	str	r3, [sp, #8]
 800f622:	e7c8      	b.n	800f5b6 <__gethex+0xb6>
 800f624:	2300      	movs	r3, #0
 800f626:	9304      	str	r3, [sp, #16]
 800f628:	1ca6      	adds	r6, r4, #2
 800f62a:	e7d2      	b.n	800f5d2 <__gethex+0xd2>
 800f62c:	2301      	movs	r3, #1
 800f62e:	e7fa      	b.n	800f626 <__gethex+0x126>
 800f630:	230a      	movs	r3, #10
 800f632:	435d      	muls	r5, r3
 800f634:	182d      	adds	r5, r5, r0
 800f636:	e7d4      	b.n	800f5e2 <__gethex+0xe2>
 800f638:	0026      	movs	r6, r4
 800f63a:	e7e0      	b.n	800f5fe <__gethex+0xfe>
 800f63c:	9b00      	ldr	r3, [sp, #0]
 800f63e:	9902      	ldr	r1, [sp, #8]
 800f640:	1ae3      	subs	r3, r4, r3
 800f642:	3b01      	subs	r3, #1
 800f644:	2b07      	cmp	r3, #7
 800f646:	dc0a      	bgt.n	800f65e <__gethex+0x15e>
 800f648:	9803      	ldr	r0, [sp, #12]
 800f64a:	f7fe f973 	bl	800d934 <_Balloc>
 800f64e:	1e05      	subs	r5, r0, #0
 800f650:	d108      	bne.n	800f664 <__gethex+0x164>
 800f652:	002a      	movs	r2, r5
 800f654:	21e4      	movs	r1, #228	@ 0xe4
 800f656:	4b5f      	ldr	r3, [pc, #380]	@ (800f7d4 <__gethex+0x2d4>)
 800f658:	485f      	ldr	r0, [pc, #380]	@ (800f7d8 <__gethex+0x2d8>)
 800f65a:	f7ff fe9d 	bl	800f398 <__assert_func>
 800f65e:	3101      	adds	r1, #1
 800f660:	105b      	asrs	r3, r3, #1
 800f662:	e7ef      	b.n	800f644 <__gethex+0x144>
 800f664:	0003      	movs	r3, r0
 800f666:	3314      	adds	r3, #20
 800f668:	9302      	str	r3, [sp, #8]
 800f66a:	9305      	str	r3, [sp, #20]
 800f66c:	2300      	movs	r3, #0
 800f66e:	001e      	movs	r6, r3
 800f670:	9304      	str	r3, [sp, #16]
 800f672:	9b00      	ldr	r3, [sp, #0]
 800f674:	42a3      	cmp	r3, r4
 800f676:	d338      	bcc.n	800f6ea <__gethex+0x1ea>
 800f678:	9c05      	ldr	r4, [sp, #20]
 800f67a:	9b02      	ldr	r3, [sp, #8]
 800f67c:	c440      	stmia	r4!, {r6}
 800f67e:	1ae4      	subs	r4, r4, r3
 800f680:	10a4      	asrs	r4, r4, #2
 800f682:	0030      	movs	r0, r6
 800f684:	612c      	str	r4, [r5, #16]
 800f686:	f7fe fa4d 	bl	800db24 <__hi0bits>
 800f68a:	9b01      	ldr	r3, [sp, #4]
 800f68c:	0164      	lsls	r4, r4, #5
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	1a26      	subs	r6, r4, r0
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	429e      	cmp	r6, r3
 800f696:	dd52      	ble.n	800f73e <__gethex+0x23e>
 800f698:	1af6      	subs	r6, r6, r3
 800f69a:	0031      	movs	r1, r6
 800f69c:	0028      	movs	r0, r5
 800f69e:	f7fe fdf0 	bl	800e282 <__any_on>
 800f6a2:	1e04      	subs	r4, r0, #0
 800f6a4:	d00f      	beq.n	800f6c6 <__gethex+0x1c6>
 800f6a6:	2401      	movs	r4, #1
 800f6a8:	231f      	movs	r3, #31
 800f6aa:	0020      	movs	r0, r4
 800f6ac:	1e72      	subs	r2, r6, #1
 800f6ae:	4013      	ands	r3, r2
 800f6b0:	4098      	lsls	r0, r3
 800f6b2:	0003      	movs	r3, r0
 800f6b4:	1151      	asrs	r1, r2, #5
 800f6b6:	9802      	ldr	r0, [sp, #8]
 800f6b8:	0089      	lsls	r1, r1, #2
 800f6ba:	5809      	ldr	r1, [r1, r0]
 800f6bc:	4219      	tst	r1, r3
 800f6be:	d002      	beq.n	800f6c6 <__gethex+0x1c6>
 800f6c0:	42a2      	cmp	r2, r4
 800f6c2:	dc34      	bgt.n	800f72e <__gethex+0x22e>
 800f6c4:	2402      	movs	r4, #2
 800f6c6:	0031      	movs	r1, r6
 800f6c8:	0028      	movs	r0, r5
 800f6ca:	f7ff feb0 	bl	800f42e <rshift>
 800f6ce:	19bf      	adds	r7, r7, r6
 800f6d0:	9b01      	ldr	r3, [sp, #4]
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	42bb      	cmp	r3, r7
 800f6d6:	da42      	bge.n	800f75e <__gethex+0x25e>
 800f6d8:	0029      	movs	r1, r5
 800f6da:	9803      	ldr	r0, [sp, #12]
 800f6dc:	f7fe f96e 	bl	800d9bc <_Bfree>
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6e4:	26a3      	movs	r6, #163	@ 0xa3
 800f6e6:	6013      	str	r3, [r2, #0]
 800f6e8:	e794      	b.n	800f614 <__gethex+0x114>
 800f6ea:	3c01      	subs	r4, #1
 800f6ec:	7823      	ldrb	r3, [r4, #0]
 800f6ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800f6f0:	d012      	beq.n	800f718 <__gethex+0x218>
 800f6f2:	9b04      	ldr	r3, [sp, #16]
 800f6f4:	2b20      	cmp	r3, #32
 800f6f6:	d104      	bne.n	800f702 <__gethex+0x202>
 800f6f8:	9b05      	ldr	r3, [sp, #20]
 800f6fa:	c340      	stmia	r3!, {r6}
 800f6fc:	2600      	movs	r6, #0
 800f6fe:	9305      	str	r3, [sp, #20]
 800f700:	9604      	str	r6, [sp, #16]
 800f702:	7820      	ldrb	r0, [r4, #0]
 800f704:	f7ff fee6 	bl	800f4d4 <__hexdig_fun>
 800f708:	230f      	movs	r3, #15
 800f70a:	4018      	ands	r0, r3
 800f70c:	9b04      	ldr	r3, [sp, #16]
 800f70e:	4098      	lsls	r0, r3
 800f710:	3304      	adds	r3, #4
 800f712:	4306      	orrs	r6, r0
 800f714:	9304      	str	r3, [sp, #16]
 800f716:	e7ac      	b.n	800f672 <__gethex+0x172>
 800f718:	9b00      	ldr	r3, [sp, #0]
 800f71a:	42a3      	cmp	r3, r4
 800f71c:	d8e9      	bhi.n	800f6f2 <__gethex+0x1f2>
 800f71e:	2201      	movs	r2, #1
 800f720:	0020      	movs	r0, r4
 800f722:	492b      	ldr	r1, [pc, #172]	@ (800f7d0 <__gethex+0x2d0>)
 800f724:	f7ff fe04 	bl	800f330 <strncmp>
 800f728:	2800      	cmp	r0, #0
 800f72a:	d1e2      	bne.n	800f6f2 <__gethex+0x1f2>
 800f72c:	e7a1      	b.n	800f672 <__gethex+0x172>
 800f72e:	0028      	movs	r0, r5
 800f730:	1eb1      	subs	r1, r6, #2
 800f732:	f7fe fda6 	bl	800e282 <__any_on>
 800f736:	2800      	cmp	r0, #0
 800f738:	d0c4      	beq.n	800f6c4 <__gethex+0x1c4>
 800f73a:	2403      	movs	r4, #3
 800f73c:	e7c3      	b.n	800f6c6 <__gethex+0x1c6>
 800f73e:	9b00      	ldr	r3, [sp, #0]
 800f740:	2400      	movs	r4, #0
 800f742:	429e      	cmp	r6, r3
 800f744:	dac4      	bge.n	800f6d0 <__gethex+0x1d0>
 800f746:	1b9e      	subs	r6, r3, r6
 800f748:	0029      	movs	r1, r5
 800f74a:	0032      	movs	r2, r6
 800f74c:	9803      	ldr	r0, [sp, #12]
 800f74e:	f7fe fb5f 	bl	800de10 <__lshift>
 800f752:	0003      	movs	r3, r0
 800f754:	3314      	adds	r3, #20
 800f756:	0005      	movs	r5, r0
 800f758:	1bbf      	subs	r7, r7, r6
 800f75a:	9302      	str	r3, [sp, #8]
 800f75c:	e7b8      	b.n	800f6d0 <__gethex+0x1d0>
 800f75e:	9b01      	ldr	r3, [sp, #4]
 800f760:	685e      	ldr	r6, [r3, #4]
 800f762:	42be      	cmp	r6, r7
 800f764:	dd6f      	ble.n	800f846 <__gethex+0x346>
 800f766:	9b00      	ldr	r3, [sp, #0]
 800f768:	1bf6      	subs	r6, r6, r7
 800f76a:	42b3      	cmp	r3, r6
 800f76c:	dc36      	bgt.n	800f7dc <__gethex+0x2dc>
 800f76e:	9b01      	ldr	r3, [sp, #4]
 800f770:	68db      	ldr	r3, [r3, #12]
 800f772:	2b02      	cmp	r3, #2
 800f774:	d024      	beq.n	800f7c0 <__gethex+0x2c0>
 800f776:	2b03      	cmp	r3, #3
 800f778:	d026      	beq.n	800f7c8 <__gethex+0x2c8>
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	d117      	bne.n	800f7ae <__gethex+0x2ae>
 800f77e:	9b00      	ldr	r3, [sp, #0]
 800f780:	42b3      	cmp	r3, r6
 800f782:	d114      	bne.n	800f7ae <__gethex+0x2ae>
 800f784:	2b01      	cmp	r3, #1
 800f786:	d10b      	bne.n	800f7a0 <__gethex+0x2a0>
 800f788:	9b01      	ldr	r3, [sp, #4]
 800f78a:	9a07      	ldr	r2, [sp, #28]
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	2662      	movs	r6, #98	@ 0x62
 800f790:	6013      	str	r3, [r2, #0]
 800f792:	2301      	movs	r3, #1
 800f794:	9a02      	ldr	r2, [sp, #8]
 800f796:	612b      	str	r3, [r5, #16]
 800f798:	6013      	str	r3, [r2, #0]
 800f79a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f79c:	601d      	str	r5, [r3, #0]
 800f79e:	e739      	b.n	800f614 <__gethex+0x114>
 800f7a0:	9900      	ldr	r1, [sp, #0]
 800f7a2:	0028      	movs	r0, r5
 800f7a4:	3901      	subs	r1, #1
 800f7a6:	f7fe fd6c 	bl	800e282 <__any_on>
 800f7aa:	2800      	cmp	r0, #0
 800f7ac:	d1ec      	bne.n	800f788 <__gethex+0x288>
 800f7ae:	0029      	movs	r1, r5
 800f7b0:	9803      	ldr	r0, [sp, #12]
 800f7b2:	f7fe f903 	bl	800d9bc <_Bfree>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7ba:	2650      	movs	r6, #80	@ 0x50
 800f7bc:	6013      	str	r3, [r2, #0]
 800f7be:	e729      	b.n	800f614 <__gethex+0x114>
 800f7c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d1f3      	bne.n	800f7ae <__gethex+0x2ae>
 800f7c6:	e7df      	b.n	800f788 <__gethex+0x288>
 800f7c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1dc      	bne.n	800f788 <__gethex+0x288>
 800f7ce:	e7ee      	b.n	800f7ae <__gethex+0x2ae>
 800f7d0:	08010ae8 	.word	0x08010ae8
 800f7d4:	0801097e 	.word	0x0801097e
 800f7d8:	08010b95 	.word	0x08010b95
 800f7dc:	1e77      	subs	r7, r6, #1
 800f7de:	2c00      	cmp	r4, #0
 800f7e0:	d12f      	bne.n	800f842 <__gethex+0x342>
 800f7e2:	2f00      	cmp	r7, #0
 800f7e4:	d004      	beq.n	800f7f0 <__gethex+0x2f0>
 800f7e6:	0039      	movs	r1, r7
 800f7e8:	0028      	movs	r0, r5
 800f7ea:	f7fe fd4a 	bl	800e282 <__any_on>
 800f7ee:	0004      	movs	r4, r0
 800f7f0:	231f      	movs	r3, #31
 800f7f2:	117a      	asrs	r2, r7, #5
 800f7f4:	401f      	ands	r7, r3
 800f7f6:	3b1e      	subs	r3, #30
 800f7f8:	40bb      	lsls	r3, r7
 800f7fa:	9902      	ldr	r1, [sp, #8]
 800f7fc:	0092      	lsls	r2, r2, #2
 800f7fe:	5852      	ldr	r2, [r2, r1]
 800f800:	421a      	tst	r2, r3
 800f802:	d001      	beq.n	800f808 <__gethex+0x308>
 800f804:	2302      	movs	r3, #2
 800f806:	431c      	orrs	r4, r3
 800f808:	9b00      	ldr	r3, [sp, #0]
 800f80a:	0031      	movs	r1, r6
 800f80c:	1b9b      	subs	r3, r3, r6
 800f80e:	2602      	movs	r6, #2
 800f810:	0028      	movs	r0, r5
 800f812:	9300      	str	r3, [sp, #0]
 800f814:	f7ff fe0b 	bl	800f42e <rshift>
 800f818:	9b01      	ldr	r3, [sp, #4]
 800f81a:	685f      	ldr	r7, [r3, #4]
 800f81c:	2c00      	cmp	r4, #0
 800f81e:	d03f      	beq.n	800f8a0 <__gethex+0x3a0>
 800f820:	9b01      	ldr	r3, [sp, #4]
 800f822:	68db      	ldr	r3, [r3, #12]
 800f824:	2b02      	cmp	r3, #2
 800f826:	d010      	beq.n	800f84a <__gethex+0x34a>
 800f828:	2b03      	cmp	r3, #3
 800f82a:	d012      	beq.n	800f852 <__gethex+0x352>
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d106      	bne.n	800f83e <__gethex+0x33e>
 800f830:	07a2      	lsls	r2, r4, #30
 800f832:	d504      	bpl.n	800f83e <__gethex+0x33e>
 800f834:	9a02      	ldr	r2, [sp, #8]
 800f836:	6812      	ldr	r2, [r2, #0]
 800f838:	4314      	orrs	r4, r2
 800f83a:	421c      	tst	r4, r3
 800f83c:	d10c      	bne.n	800f858 <__gethex+0x358>
 800f83e:	2310      	movs	r3, #16
 800f840:	e02d      	b.n	800f89e <__gethex+0x39e>
 800f842:	2401      	movs	r4, #1
 800f844:	e7d4      	b.n	800f7f0 <__gethex+0x2f0>
 800f846:	2601      	movs	r6, #1
 800f848:	e7e8      	b.n	800f81c <__gethex+0x31c>
 800f84a:	2301      	movs	r3, #1
 800f84c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f84e:	1a9b      	subs	r3, r3, r2
 800f850:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f852:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f854:	2b00      	cmp	r3, #0
 800f856:	d0f2      	beq.n	800f83e <__gethex+0x33e>
 800f858:	692b      	ldr	r3, [r5, #16]
 800f85a:	2000      	movs	r0, #0
 800f85c:	9302      	str	r3, [sp, #8]
 800f85e:	009b      	lsls	r3, r3, #2
 800f860:	9304      	str	r3, [sp, #16]
 800f862:	002b      	movs	r3, r5
 800f864:	9a04      	ldr	r2, [sp, #16]
 800f866:	3314      	adds	r3, #20
 800f868:	1899      	adds	r1, r3, r2
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	1c54      	adds	r4, r2, #1
 800f86e:	d01c      	beq.n	800f8aa <__gethex+0x3aa>
 800f870:	3201      	adds	r2, #1
 800f872:	601a      	str	r2, [r3, #0]
 800f874:	002b      	movs	r3, r5
 800f876:	3314      	adds	r3, #20
 800f878:	2e02      	cmp	r6, #2
 800f87a:	d13f      	bne.n	800f8fc <__gethex+0x3fc>
 800f87c:	9a01      	ldr	r2, [sp, #4]
 800f87e:	9900      	ldr	r1, [sp, #0]
 800f880:	6812      	ldr	r2, [r2, #0]
 800f882:	3a01      	subs	r2, #1
 800f884:	428a      	cmp	r2, r1
 800f886:	d109      	bne.n	800f89c <__gethex+0x39c>
 800f888:	000a      	movs	r2, r1
 800f88a:	201f      	movs	r0, #31
 800f88c:	4010      	ands	r0, r2
 800f88e:	2201      	movs	r2, #1
 800f890:	4082      	lsls	r2, r0
 800f892:	1149      	asrs	r1, r1, #5
 800f894:	0089      	lsls	r1, r1, #2
 800f896:	58cb      	ldr	r3, [r1, r3]
 800f898:	4213      	tst	r3, r2
 800f89a:	d13d      	bne.n	800f918 <__gethex+0x418>
 800f89c:	2320      	movs	r3, #32
 800f89e:	431e      	orrs	r6, r3
 800f8a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8a2:	601d      	str	r5, [r3, #0]
 800f8a4:	9b07      	ldr	r3, [sp, #28]
 800f8a6:	601f      	str	r7, [r3, #0]
 800f8a8:	e6b4      	b.n	800f614 <__gethex+0x114>
 800f8aa:	c301      	stmia	r3!, {r0}
 800f8ac:	4299      	cmp	r1, r3
 800f8ae:	d8dc      	bhi.n	800f86a <__gethex+0x36a>
 800f8b0:	68ab      	ldr	r3, [r5, #8]
 800f8b2:	9a02      	ldr	r2, [sp, #8]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	db18      	blt.n	800f8ea <__gethex+0x3ea>
 800f8b8:	6869      	ldr	r1, [r5, #4]
 800f8ba:	9803      	ldr	r0, [sp, #12]
 800f8bc:	3101      	adds	r1, #1
 800f8be:	f7fe f839 	bl	800d934 <_Balloc>
 800f8c2:	1e04      	subs	r4, r0, #0
 800f8c4:	d104      	bne.n	800f8d0 <__gethex+0x3d0>
 800f8c6:	0022      	movs	r2, r4
 800f8c8:	2184      	movs	r1, #132	@ 0x84
 800f8ca:	4b1d      	ldr	r3, [pc, #116]	@ (800f940 <__gethex+0x440>)
 800f8cc:	481d      	ldr	r0, [pc, #116]	@ (800f944 <__gethex+0x444>)
 800f8ce:	e6c4      	b.n	800f65a <__gethex+0x15a>
 800f8d0:	0029      	movs	r1, r5
 800f8d2:	692a      	ldr	r2, [r5, #16]
 800f8d4:	310c      	adds	r1, #12
 800f8d6:	3202      	adds	r2, #2
 800f8d8:	0092      	lsls	r2, r2, #2
 800f8da:	300c      	adds	r0, #12
 800f8dc:	f7ff fd4c 	bl	800f378 <memcpy>
 800f8e0:	0029      	movs	r1, r5
 800f8e2:	9803      	ldr	r0, [sp, #12]
 800f8e4:	f7fe f86a 	bl	800d9bc <_Bfree>
 800f8e8:	0025      	movs	r5, r4
 800f8ea:	692b      	ldr	r3, [r5, #16]
 800f8ec:	1c5a      	adds	r2, r3, #1
 800f8ee:	612a      	str	r2, [r5, #16]
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	3304      	adds	r3, #4
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	18eb      	adds	r3, r5, r3
 800f8f8:	605a      	str	r2, [r3, #4]
 800f8fa:	e7bb      	b.n	800f874 <__gethex+0x374>
 800f8fc:	692a      	ldr	r2, [r5, #16]
 800f8fe:	9902      	ldr	r1, [sp, #8]
 800f900:	428a      	cmp	r2, r1
 800f902:	dd0b      	ble.n	800f91c <__gethex+0x41c>
 800f904:	2101      	movs	r1, #1
 800f906:	0028      	movs	r0, r5
 800f908:	f7ff fd91 	bl	800f42e <rshift>
 800f90c:	9b01      	ldr	r3, [sp, #4]
 800f90e:	3701      	adds	r7, #1
 800f910:	689b      	ldr	r3, [r3, #8]
 800f912:	42bb      	cmp	r3, r7
 800f914:	da00      	bge.n	800f918 <__gethex+0x418>
 800f916:	e6df      	b.n	800f6d8 <__gethex+0x1d8>
 800f918:	2601      	movs	r6, #1
 800f91a:	e7bf      	b.n	800f89c <__gethex+0x39c>
 800f91c:	221f      	movs	r2, #31
 800f91e:	9c00      	ldr	r4, [sp, #0]
 800f920:	9900      	ldr	r1, [sp, #0]
 800f922:	4014      	ands	r4, r2
 800f924:	4211      	tst	r1, r2
 800f926:	d0f7      	beq.n	800f918 <__gethex+0x418>
 800f928:	9a04      	ldr	r2, [sp, #16]
 800f92a:	189b      	adds	r3, r3, r2
 800f92c:	3b04      	subs	r3, #4
 800f92e:	6818      	ldr	r0, [r3, #0]
 800f930:	f7fe f8f8 	bl	800db24 <__hi0bits>
 800f934:	2320      	movs	r3, #32
 800f936:	1b1b      	subs	r3, r3, r4
 800f938:	4298      	cmp	r0, r3
 800f93a:	dbe3      	blt.n	800f904 <__gethex+0x404>
 800f93c:	e7ec      	b.n	800f918 <__gethex+0x418>
 800f93e:	46c0      	nop			@ (mov r8, r8)
 800f940:	0801097e 	.word	0x0801097e
 800f944:	08010b95 	.word	0x08010b95

0800f948 <L_shift>:
 800f948:	2308      	movs	r3, #8
 800f94a:	b570      	push	{r4, r5, r6, lr}
 800f94c:	2520      	movs	r5, #32
 800f94e:	1a9a      	subs	r2, r3, r2
 800f950:	0092      	lsls	r2, r2, #2
 800f952:	1aad      	subs	r5, r5, r2
 800f954:	6843      	ldr	r3, [r0, #4]
 800f956:	6804      	ldr	r4, [r0, #0]
 800f958:	001e      	movs	r6, r3
 800f95a:	40ae      	lsls	r6, r5
 800f95c:	40d3      	lsrs	r3, r2
 800f95e:	4334      	orrs	r4, r6
 800f960:	6004      	str	r4, [r0, #0]
 800f962:	6043      	str	r3, [r0, #4]
 800f964:	3004      	adds	r0, #4
 800f966:	4288      	cmp	r0, r1
 800f968:	d3f4      	bcc.n	800f954 <L_shift+0xc>
 800f96a:	bd70      	pop	{r4, r5, r6, pc}

0800f96c <__match>:
 800f96c:	b530      	push	{r4, r5, lr}
 800f96e:	6803      	ldr	r3, [r0, #0]
 800f970:	780c      	ldrb	r4, [r1, #0]
 800f972:	3301      	adds	r3, #1
 800f974:	2c00      	cmp	r4, #0
 800f976:	d102      	bne.n	800f97e <__match+0x12>
 800f978:	6003      	str	r3, [r0, #0]
 800f97a:	2001      	movs	r0, #1
 800f97c:	bd30      	pop	{r4, r5, pc}
 800f97e:	781a      	ldrb	r2, [r3, #0]
 800f980:	0015      	movs	r5, r2
 800f982:	3d41      	subs	r5, #65	@ 0x41
 800f984:	2d19      	cmp	r5, #25
 800f986:	d800      	bhi.n	800f98a <__match+0x1e>
 800f988:	3220      	adds	r2, #32
 800f98a:	3101      	adds	r1, #1
 800f98c:	42a2      	cmp	r2, r4
 800f98e:	d0ef      	beq.n	800f970 <__match+0x4>
 800f990:	2000      	movs	r0, #0
 800f992:	e7f3      	b.n	800f97c <__match+0x10>

0800f994 <__hexnan>:
 800f994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f996:	680b      	ldr	r3, [r1, #0]
 800f998:	b08b      	sub	sp, #44	@ 0x2c
 800f99a:	9201      	str	r2, [sp, #4]
 800f99c:	9901      	ldr	r1, [sp, #4]
 800f99e:	115a      	asrs	r2, r3, #5
 800f9a0:	0092      	lsls	r2, r2, #2
 800f9a2:	188a      	adds	r2, r1, r2
 800f9a4:	9202      	str	r2, [sp, #8]
 800f9a6:	0019      	movs	r1, r3
 800f9a8:	221f      	movs	r2, #31
 800f9aa:	4011      	ands	r1, r2
 800f9ac:	9008      	str	r0, [sp, #32]
 800f9ae:	9106      	str	r1, [sp, #24]
 800f9b0:	4213      	tst	r3, r2
 800f9b2:	d002      	beq.n	800f9ba <__hexnan+0x26>
 800f9b4:	9b02      	ldr	r3, [sp, #8]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	9302      	str	r3, [sp, #8]
 800f9ba:	9b02      	ldr	r3, [sp, #8]
 800f9bc:	2500      	movs	r5, #0
 800f9be:	1f1f      	subs	r7, r3, #4
 800f9c0:	003e      	movs	r6, r7
 800f9c2:	003c      	movs	r4, r7
 800f9c4:	9b08      	ldr	r3, [sp, #32]
 800f9c6:	603d      	str	r5, [r7, #0]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	9507      	str	r5, [sp, #28]
 800f9cc:	9305      	str	r3, [sp, #20]
 800f9ce:	9503      	str	r5, [sp, #12]
 800f9d0:	9b05      	ldr	r3, [sp, #20]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9d6:	9b05      	ldr	r3, [sp, #20]
 800f9d8:	785b      	ldrb	r3, [r3, #1]
 800f9da:	9304      	str	r3, [sp, #16]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d028      	beq.n	800fa32 <__hexnan+0x9e>
 800f9e0:	9804      	ldr	r0, [sp, #16]
 800f9e2:	f7ff fd77 	bl	800f4d4 <__hexdig_fun>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d155      	bne.n	800fa96 <__hexnan+0x102>
 800f9ea:	9b04      	ldr	r3, [sp, #16]
 800f9ec:	2b20      	cmp	r3, #32
 800f9ee:	d819      	bhi.n	800fa24 <__hexnan+0x90>
 800f9f0:	9b03      	ldr	r3, [sp, #12]
 800f9f2:	9a07      	ldr	r2, [sp, #28]
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	dd12      	ble.n	800fa1e <__hexnan+0x8a>
 800f9f8:	42b4      	cmp	r4, r6
 800f9fa:	d206      	bcs.n	800fa0a <__hexnan+0x76>
 800f9fc:	2d07      	cmp	r5, #7
 800f9fe:	dc04      	bgt.n	800fa0a <__hexnan+0x76>
 800fa00:	002a      	movs	r2, r5
 800fa02:	0031      	movs	r1, r6
 800fa04:	0020      	movs	r0, r4
 800fa06:	f7ff ff9f 	bl	800f948 <L_shift>
 800fa0a:	9b01      	ldr	r3, [sp, #4]
 800fa0c:	2508      	movs	r5, #8
 800fa0e:	429c      	cmp	r4, r3
 800fa10:	d905      	bls.n	800fa1e <__hexnan+0x8a>
 800fa12:	1f26      	subs	r6, r4, #4
 800fa14:	2500      	movs	r5, #0
 800fa16:	0034      	movs	r4, r6
 800fa18:	9b03      	ldr	r3, [sp, #12]
 800fa1a:	6035      	str	r5, [r6, #0]
 800fa1c:	9307      	str	r3, [sp, #28]
 800fa1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa20:	9305      	str	r3, [sp, #20]
 800fa22:	e7d5      	b.n	800f9d0 <__hexnan+0x3c>
 800fa24:	9b04      	ldr	r3, [sp, #16]
 800fa26:	2b29      	cmp	r3, #41	@ 0x29
 800fa28:	d15a      	bne.n	800fae0 <__hexnan+0x14c>
 800fa2a:	9b05      	ldr	r3, [sp, #20]
 800fa2c:	9a08      	ldr	r2, [sp, #32]
 800fa2e:	3302      	adds	r3, #2
 800fa30:	6013      	str	r3, [r2, #0]
 800fa32:	9b03      	ldr	r3, [sp, #12]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d053      	beq.n	800fae0 <__hexnan+0x14c>
 800fa38:	42b4      	cmp	r4, r6
 800fa3a:	d206      	bcs.n	800fa4a <__hexnan+0xb6>
 800fa3c:	2d07      	cmp	r5, #7
 800fa3e:	dc04      	bgt.n	800fa4a <__hexnan+0xb6>
 800fa40:	002a      	movs	r2, r5
 800fa42:	0031      	movs	r1, r6
 800fa44:	0020      	movs	r0, r4
 800fa46:	f7ff ff7f 	bl	800f948 <L_shift>
 800fa4a:	9b01      	ldr	r3, [sp, #4]
 800fa4c:	429c      	cmp	r4, r3
 800fa4e:	d936      	bls.n	800fabe <__hexnan+0x12a>
 800fa50:	001a      	movs	r2, r3
 800fa52:	0023      	movs	r3, r4
 800fa54:	cb02      	ldmia	r3!, {r1}
 800fa56:	c202      	stmia	r2!, {r1}
 800fa58:	429f      	cmp	r7, r3
 800fa5a:	d2fb      	bcs.n	800fa54 <__hexnan+0xc0>
 800fa5c:	9b02      	ldr	r3, [sp, #8]
 800fa5e:	1c61      	adds	r1, r4, #1
 800fa60:	1eda      	subs	r2, r3, #3
 800fa62:	2304      	movs	r3, #4
 800fa64:	4291      	cmp	r1, r2
 800fa66:	d805      	bhi.n	800fa74 <__hexnan+0xe0>
 800fa68:	9b02      	ldr	r3, [sp, #8]
 800fa6a:	3b04      	subs	r3, #4
 800fa6c:	1b1b      	subs	r3, r3, r4
 800fa6e:	089b      	lsrs	r3, r3, #2
 800fa70:	3301      	adds	r3, #1
 800fa72:	009b      	lsls	r3, r3, #2
 800fa74:	9a01      	ldr	r2, [sp, #4]
 800fa76:	18d3      	adds	r3, r2, r3
 800fa78:	2200      	movs	r2, #0
 800fa7a:	c304      	stmia	r3!, {r2}
 800fa7c:	429f      	cmp	r7, r3
 800fa7e:	d2fc      	bcs.n	800fa7a <__hexnan+0xe6>
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d104      	bne.n	800fa90 <__hexnan+0xfc>
 800fa86:	9b01      	ldr	r3, [sp, #4]
 800fa88:	429f      	cmp	r7, r3
 800fa8a:	d127      	bne.n	800fadc <__hexnan+0x148>
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	603b      	str	r3, [r7, #0]
 800fa90:	2005      	movs	r0, #5
 800fa92:	b00b      	add	sp, #44	@ 0x2c
 800fa94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa96:	9b03      	ldr	r3, [sp, #12]
 800fa98:	3501      	adds	r5, #1
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	9303      	str	r3, [sp, #12]
 800fa9e:	2d08      	cmp	r5, #8
 800faa0:	dd06      	ble.n	800fab0 <__hexnan+0x11c>
 800faa2:	9b01      	ldr	r3, [sp, #4]
 800faa4:	429c      	cmp	r4, r3
 800faa6:	d9ba      	bls.n	800fa1e <__hexnan+0x8a>
 800faa8:	2300      	movs	r3, #0
 800faaa:	2501      	movs	r5, #1
 800faac:	3c04      	subs	r4, #4
 800faae:	6023      	str	r3, [r4, #0]
 800fab0:	220f      	movs	r2, #15
 800fab2:	6823      	ldr	r3, [r4, #0]
 800fab4:	4010      	ands	r0, r2
 800fab6:	011b      	lsls	r3, r3, #4
 800fab8:	4303      	orrs	r3, r0
 800faba:	6023      	str	r3, [r4, #0]
 800fabc:	e7af      	b.n	800fa1e <__hexnan+0x8a>
 800fabe:	9b06      	ldr	r3, [sp, #24]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d0dd      	beq.n	800fa80 <__hexnan+0xec>
 800fac4:	2320      	movs	r3, #32
 800fac6:	9a06      	ldr	r2, [sp, #24]
 800fac8:	9902      	ldr	r1, [sp, #8]
 800faca:	1a9b      	subs	r3, r3, r2
 800facc:	2201      	movs	r2, #1
 800face:	4252      	negs	r2, r2
 800fad0:	40da      	lsrs	r2, r3
 800fad2:	3904      	subs	r1, #4
 800fad4:	680b      	ldr	r3, [r1, #0]
 800fad6:	4013      	ands	r3, r2
 800fad8:	600b      	str	r3, [r1, #0]
 800fada:	e7d1      	b.n	800fa80 <__hexnan+0xec>
 800fadc:	3f04      	subs	r7, #4
 800fade:	e7cf      	b.n	800fa80 <__hexnan+0xec>
 800fae0:	2004      	movs	r0, #4
 800fae2:	e7d6      	b.n	800fa92 <__hexnan+0xfe>

0800fae4 <__ascii_mbtowc>:
 800fae4:	b082      	sub	sp, #8
 800fae6:	2900      	cmp	r1, #0
 800fae8:	d100      	bne.n	800faec <__ascii_mbtowc+0x8>
 800faea:	a901      	add	r1, sp, #4
 800faec:	1e10      	subs	r0, r2, #0
 800faee:	d006      	beq.n	800fafe <__ascii_mbtowc+0x1a>
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d006      	beq.n	800fb02 <__ascii_mbtowc+0x1e>
 800faf4:	7813      	ldrb	r3, [r2, #0]
 800faf6:	600b      	str	r3, [r1, #0]
 800faf8:	7810      	ldrb	r0, [r2, #0]
 800fafa:	1e43      	subs	r3, r0, #1
 800fafc:	4198      	sbcs	r0, r3
 800fafe:	b002      	add	sp, #8
 800fb00:	4770      	bx	lr
 800fb02:	2002      	movs	r0, #2
 800fb04:	4240      	negs	r0, r0
 800fb06:	e7fa      	b.n	800fafe <__ascii_mbtowc+0x1a>

0800fb08 <_realloc_r>:
 800fb08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb0a:	0006      	movs	r6, r0
 800fb0c:	000c      	movs	r4, r1
 800fb0e:	0015      	movs	r5, r2
 800fb10:	2900      	cmp	r1, #0
 800fb12:	d105      	bne.n	800fb20 <_realloc_r+0x18>
 800fb14:	0011      	movs	r1, r2
 800fb16:	f7fd fe7d 	bl	800d814 <_malloc_r>
 800fb1a:	0004      	movs	r4, r0
 800fb1c:	0020      	movs	r0, r4
 800fb1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fb20:	2a00      	cmp	r2, #0
 800fb22:	d103      	bne.n	800fb2c <_realloc_r+0x24>
 800fb24:	f7fd fe00 	bl	800d728 <_free_r>
 800fb28:	2400      	movs	r4, #0
 800fb2a:	e7f7      	b.n	800fb1c <_realloc_r+0x14>
 800fb2c:	f000 f83f 	bl	800fbae <_malloc_usable_size_r>
 800fb30:	0007      	movs	r7, r0
 800fb32:	4285      	cmp	r5, r0
 800fb34:	d802      	bhi.n	800fb3c <_realloc_r+0x34>
 800fb36:	0843      	lsrs	r3, r0, #1
 800fb38:	42ab      	cmp	r3, r5
 800fb3a:	d3ef      	bcc.n	800fb1c <_realloc_r+0x14>
 800fb3c:	0029      	movs	r1, r5
 800fb3e:	0030      	movs	r0, r6
 800fb40:	f7fd fe68 	bl	800d814 <_malloc_r>
 800fb44:	9001      	str	r0, [sp, #4]
 800fb46:	2800      	cmp	r0, #0
 800fb48:	d0ee      	beq.n	800fb28 <_realloc_r+0x20>
 800fb4a:	002a      	movs	r2, r5
 800fb4c:	42bd      	cmp	r5, r7
 800fb4e:	d900      	bls.n	800fb52 <_realloc_r+0x4a>
 800fb50:	003a      	movs	r2, r7
 800fb52:	0021      	movs	r1, r4
 800fb54:	9801      	ldr	r0, [sp, #4]
 800fb56:	f7ff fc0f 	bl	800f378 <memcpy>
 800fb5a:	0021      	movs	r1, r4
 800fb5c:	0030      	movs	r0, r6
 800fb5e:	f7fd fde3 	bl	800d728 <_free_r>
 800fb62:	9c01      	ldr	r4, [sp, #4]
 800fb64:	e7da      	b.n	800fb1c <_realloc_r+0x14>

0800fb66 <__ascii_wctomb>:
 800fb66:	0003      	movs	r3, r0
 800fb68:	1e08      	subs	r0, r1, #0
 800fb6a:	d005      	beq.n	800fb78 <__ascii_wctomb+0x12>
 800fb6c:	2aff      	cmp	r2, #255	@ 0xff
 800fb6e:	d904      	bls.n	800fb7a <__ascii_wctomb+0x14>
 800fb70:	228a      	movs	r2, #138	@ 0x8a
 800fb72:	2001      	movs	r0, #1
 800fb74:	601a      	str	r2, [r3, #0]
 800fb76:	4240      	negs	r0, r0
 800fb78:	4770      	bx	lr
 800fb7a:	2001      	movs	r0, #1
 800fb7c:	700a      	strb	r2, [r1, #0]
 800fb7e:	e7fb      	b.n	800fb78 <__ascii_wctomb+0x12>

0800fb80 <fiprintf>:
 800fb80:	b40e      	push	{r1, r2, r3}
 800fb82:	b517      	push	{r0, r1, r2, r4, lr}
 800fb84:	4c05      	ldr	r4, [pc, #20]	@ (800fb9c <fiprintf+0x1c>)
 800fb86:	ab05      	add	r3, sp, #20
 800fb88:	cb04      	ldmia	r3!, {r2}
 800fb8a:	0001      	movs	r1, r0
 800fb8c:	6820      	ldr	r0, [r4, #0]
 800fb8e:	9301      	str	r3, [sp, #4]
 800fb90:	f000 f83c 	bl	800fc0c <_vfiprintf_r>
 800fb94:	bc1e      	pop	{r1, r2, r3, r4}
 800fb96:	bc08      	pop	{r3}
 800fb98:	b003      	add	sp, #12
 800fb9a:	4718      	bx	r3
 800fb9c:	20000030 	.word	0x20000030

0800fba0 <abort>:
 800fba0:	2006      	movs	r0, #6
 800fba2:	b510      	push	{r4, lr}
 800fba4:	f000 fa18 	bl	800ffd8 <raise>
 800fba8:	2001      	movs	r0, #1
 800fbaa:	f7f5 f850 	bl	8004c4e <_exit>

0800fbae <_malloc_usable_size_r>:
 800fbae:	1f0b      	subs	r3, r1, #4
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	1f18      	subs	r0, r3, #4
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	da01      	bge.n	800fbbc <_malloc_usable_size_r+0xe>
 800fbb8:	580b      	ldr	r3, [r1, r0]
 800fbba:	18c0      	adds	r0, r0, r3
 800fbbc:	4770      	bx	lr

0800fbbe <__sfputc_r>:
 800fbbe:	6893      	ldr	r3, [r2, #8]
 800fbc0:	b510      	push	{r4, lr}
 800fbc2:	3b01      	subs	r3, #1
 800fbc4:	6093      	str	r3, [r2, #8]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	da04      	bge.n	800fbd4 <__sfputc_r+0x16>
 800fbca:	6994      	ldr	r4, [r2, #24]
 800fbcc:	42a3      	cmp	r3, r4
 800fbce:	db07      	blt.n	800fbe0 <__sfputc_r+0x22>
 800fbd0:	290a      	cmp	r1, #10
 800fbd2:	d005      	beq.n	800fbe0 <__sfputc_r+0x22>
 800fbd4:	6813      	ldr	r3, [r2, #0]
 800fbd6:	1c58      	adds	r0, r3, #1
 800fbd8:	6010      	str	r0, [r2, #0]
 800fbda:	7019      	strb	r1, [r3, #0]
 800fbdc:	0008      	movs	r0, r1
 800fbde:	bd10      	pop	{r4, pc}
 800fbe0:	f000 f930 	bl	800fe44 <__swbuf_r>
 800fbe4:	0001      	movs	r1, r0
 800fbe6:	e7f9      	b.n	800fbdc <__sfputc_r+0x1e>

0800fbe8 <__sfputs_r>:
 800fbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbea:	0006      	movs	r6, r0
 800fbec:	000f      	movs	r7, r1
 800fbee:	0014      	movs	r4, r2
 800fbf0:	18d5      	adds	r5, r2, r3
 800fbf2:	42ac      	cmp	r4, r5
 800fbf4:	d101      	bne.n	800fbfa <__sfputs_r+0x12>
 800fbf6:	2000      	movs	r0, #0
 800fbf8:	e007      	b.n	800fc0a <__sfputs_r+0x22>
 800fbfa:	7821      	ldrb	r1, [r4, #0]
 800fbfc:	003a      	movs	r2, r7
 800fbfe:	0030      	movs	r0, r6
 800fc00:	f7ff ffdd 	bl	800fbbe <__sfputc_r>
 800fc04:	3401      	adds	r4, #1
 800fc06:	1c43      	adds	r3, r0, #1
 800fc08:	d1f3      	bne.n	800fbf2 <__sfputs_r+0xa>
 800fc0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc0c <_vfiprintf_r>:
 800fc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc0e:	b0a1      	sub	sp, #132	@ 0x84
 800fc10:	000f      	movs	r7, r1
 800fc12:	0015      	movs	r5, r2
 800fc14:	001e      	movs	r6, r3
 800fc16:	9003      	str	r0, [sp, #12]
 800fc18:	2800      	cmp	r0, #0
 800fc1a:	d004      	beq.n	800fc26 <_vfiprintf_r+0x1a>
 800fc1c:	6a03      	ldr	r3, [r0, #32]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d101      	bne.n	800fc26 <_vfiprintf_r+0x1a>
 800fc22:	f7fc fd95 	bl	800c750 <__sinit>
 800fc26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc28:	07db      	lsls	r3, r3, #31
 800fc2a:	d405      	bmi.n	800fc38 <_vfiprintf_r+0x2c>
 800fc2c:	89bb      	ldrh	r3, [r7, #12]
 800fc2e:	059b      	lsls	r3, r3, #22
 800fc30:	d402      	bmi.n	800fc38 <_vfiprintf_r+0x2c>
 800fc32:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fc34:	f7fc fee5 	bl	800ca02 <__retarget_lock_acquire_recursive>
 800fc38:	89bb      	ldrh	r3, [r7, #12]
 800fc3a:	071b      	lsls	r3, r3, #28
 800fc3c:	d502      	bpl.n	800fc44 <_vfiprintf_r+0x38>
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d113      	bne.n	800fc6c <_vfiprintf_r+0x60>
 800fc44:	0039      	movs	r1, r7
 800fc46:	9803      	ldr	r0, [sp, #12]
 800fc48:	f000 f93e 	bl	800fec8 <__swsetup_r>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d00d      	beq.n	800fc6c <_vfiprintf_r+0x60>
 800fc50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc52:	07db      	lsls	r3, r3, #31
 800fc54:	d503      	bpl.n	800fc5e <_vfiprintf_r+0x52>
 800fc56:	2001      	movs	r0, #1
 800fc58:	4240      	negs	r0, r0
 800fc5a:	b021      	add	sp, #132	@ 0x84
 800fc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc5e:	89bb      	ldrh	r3, [r7, #12]
 800fc60:	059b      	lsls	r3, r3, #22
 800fc62:	d4f8      	bmi.n	800fc56 <_vfiprintf_r+0x4a>
 800fc64:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fc66:	f7fc fecd 	bl	800ca04 <__retarget_lock_release_recursive>
 800fc6a:	e7f4      	b.n	800fc56 <_vfiprintf_r+0x4a>
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	ac08      	add	r4, sp, #32
 800fc70:	6163      	str	r3, [r4, #20]
 800fc72:	3320      	adds	r3, #32
 800fc74:	7663      	strb	r3, [r4, #25]
 800fc76:	3310      	adds	r3, #16
 800fc78:	76a3      	strb	r3, [r4, #26]
 800fc7a:	9607      	str	r6, [sp, #28]
 800fc7c:	002e      	movs	r6, r5
 800fc7e:	7833      	ldrb	r3, [r6, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d001      	beq.n	800fc88 <_vfiprintf_r+0x7c>
 800fc84:	2b25      	cmp	r3, #37	@ 0x25
 800fc86:	d148      	bne.n	800fd1a <_vfiprintf_r+0x10e>
 800fc88:	1b73      	subs	r3, r6, r5
 800fc8a:	9305      	str	r3, [sp, #20]
 800fc8c:	42ae      	cmp	r6, r5
 800fc8e:	d00b      	beq.n	800fca8 <_vfiprintf_r+0x9c>
 800fc90:	002a      	movs	r2, r5
 800fc92:	0039      	movs	r1, r7
 800fc94:	9803      	ldr	r0, [sp, #12]
 800fc96:	f7ff ffa7 	bl	800fbe8 <__sfputs_r>
 800fc9a:	3001      	adds	r0, #1
 800fc9c:	d100      	bne.n	800fca0 <_vfiprintf_r+0x94>
 800fc9e:	e0ae      	b.n	800fdfe <_vfiprintf_r+0x1f2>
 800fca0:	6963      	ldr	r3, [r4, #20]
 800fca2:	9a05      	ldr	r2, [sp, #20]
 800fca4:	189b      	adds	r3, r3, r2
 800fca6:	6163      	str	r3, [r4, #20]
 800fca8:	7833      	ldrb	r3, [r6, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d100      	bne.n	800fcb0 <_vfiprintf_r+0xa4>
 800fcae:	e0a6      	b.n	800fdfe <_vfiprintf_r+0x1f2>
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	4252      	negs	r2, r2
 800fcb6:	6062      	str	r2, [r4, #4]
 800fcb8:	a904      	add	r1, sp, #16
 800fcba:	3254      	adds	r2, #84	@ 0x54
 800fcbc:	1852      	adds	r2, r2, r1
 800fcbe:	1c75      	adds	r5, r6, #1
 800fcc0:	6023      	str	r3, [r4, #0]
 800fcc2:	60e3      	str	r3, [r4, #12]
 800fcc4:	60a3      	str	r3, [r4, #8]
 800fcc6:	7013      	strb	r3, [r2, #0]
 800fcc8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800fcca:	4b59      	ldr	r3, [pc, #356]	@ (800fe30 <_vfiprintf_r+0x224>)
 800fccc:	2205      	movs	r2, #5
 800fcce:	0018      	movs	r0, r3
 800fcd0:	7829      	ldrb	r1, [r5, #0]
 800fcd2:	9305      	str	r3, [sp, #20]
 800fcd4:	f7fc fe97 	bl	800ca06 <memchr>
 800fcd8:	1c6e      	adds	r6, r5, #1
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	d11f      	bne.n	800fd1e <_vfiprintf_r+0x112>
 800fcde:	6822      	ldr	r2, [r4, #0]
 800fce0:	06d3      	lsls	r3, r2, #27
 800fce2:	d504      	bpl.n	800fcee <_vfiprintf_r+0xe2>
 800fce4:	2353      	movs	r3, #83	@ 0x53
 800fce6:	a904      	add	r1, sp, #16
 800fce8:	185b      	adds	r3, r3, r1
 800fcea:	2120      	movs	r1, #32
 800fcec:	7019      	strb	r1, [r3, #0]
 800fcee:	0713      	lsls	r3, r2, #28
 800fcf0:	d504      	bpl.n	800fcfc <_vfiprintf_r+0xf0>
 800fcf2:	2353      	movs	r3, #83	@ 0x53
 800fcf4:	a904      	add	r1, sp, #16
 800fcf6:	185b      	adds	r3, r3, r1
 800fcf8:	212b      	movs	r1, #43	@ 0x2b
 800fcfa:	7019      	strb	r1, [r3, #0]
 800fcfc:	782b      	ldrb	r3, [r5, #0]
 800fcfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd00:	d016      	beq.n	800fd30 <_vfiprintf_r+0x124>
 800fd02:	002e      	movs	r6, r5
 800fd04:	2100      	movs	r1, #0
 800fd06:	200a      	movs	r0, #10
 800fd08:	68e3      	ldr	r3, [r4, #12]
 800fd0a:	7832      	ldrb	r2, [r6, #0]
 800fd0c:	1c75      	adds	r5, r6, #1
 800fd0e:	3a30      	subs	r2, #48	@ 0x30
 800fd10:	2a09      	cmp	r2, #9
 800fd12:	d950      	bls.n	800fdb6 <_vfiprintf_r+0x1aa>
 800fd14:	2900      	cmp	r1, #0
 800fd16:	d111      	bne.n	800fd3c <_vfiprintf_r+0x130>
 800fd18:	e017      	b.n	800fd4a <_vfiprintf_r+0x13e>
 800fd1a:	3601      	adds	r6, #1
 800fd1c:	e7af      	b.n	800fc7e <_vfiprintf_r+0x72>
 800fd1e:	9b05      	ldr	r3, [sp, #20]
 800fd20:	6822      	ldr	r2, [r4, #0]
 800fd22:	1ac0      	subs	r0, r0, r3
 800fd24:	2301      	movs	r3, #1
 800fd26:	4083      	lsls	r3, r0
 800fd28:	4313      	orrs	r3, r2
 800fd2a:	0035      	movs	r5, r6
 800fd2c:	6023      	str	r3, [r4, #0]
 800fd2e:	e7cc      	b.n	800fcca <_vfiprintf_r+0xbe>
 800fd30:	9b07      	ldr	r3, [sp, #28]
 800fd32:	1d19      	adds	r1, r3, #4
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	9107      	str	r1, [sp, #28]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	db01      	blt.n	800fd40 <_vfiprintf_r+0x134>
 800fd3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd3e:	e004      	b.n	800fd4a <_vfiprintf_r+0x13e>
 800fd40:	425b      	negs	r3, r3
 800fd42:	60e3      	str	r3, [r4, #12]
 800fd44:	2302      	movs	r3, #2
 800fd46:	4313      	orrs	r3, r2
 800fd48:	6023      	str	r3, [r4, #0]
 800fd4a:	7833      	ldrb	r3, [r6, #0]
 800fd4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd4e:	d10c      	bne.n	800fd6a <_vfiprintf_r+0x15e>
 800fd50:	7873      	ldrb	r3, [r6, #1]
 800fd52:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd54:	d134      	bne.n	800fdc0 <_vfiprintf_r+0x1b4>
 800fd56:	9b07      	ldr	r3, [sp, #28]
 800fd58:	3602      	adds	r6, #2
 800fd5a:	1d1a      	adds	r2, r3, #4
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	9207      	str	r2, [sp, #28]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	da01      	bge.n	800fd68 <_vfiprintf_r+0x15c>
 800fd64:	2301      	movs	r3, #1
 800fd66:	425b      	negs	r3, r3
 800fd68:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd6a:	4d32      	ldr	r5, [pc, #200]	@ (800fe34 <_vfiprintf_r+0x228>)
 800fd6c:	2203      	movs	r2, #3
 800fd6e:	0028      	movs	r0, r5
 800fd70:	7831      	ldrb	r1, [r6, #0]
 800fd72:	f7fc fe48 	bl	800ca06 <memchr>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	d006      	beq.n	800fd88 <_vfiprintf_r+0x17c>
 800fd7a:	2340      	movs	r3, #64	@ 0x40
 800fd7c:	1b40      	subs	r0, r0, r5
 800fd7e:	4083      	lsls	r3, r0
 800fd80:	6822      	ldr	r2, [r4, #0]
 800fd82:	3601      	adds	r6, #1
 800fd84:	4313      	orrs	r3, r2
 800fd86:	6023      	str	r3, [r4, #0]
 800fd88:	7831      	ldrb	r1, [r6, #0]
 800fd8a:	2206      	movs	r2, #6
 800fd8c:	482a      	ldr	r0, [pc, #168]	@ (800fe38 <_vfiprintf_r+0x22c>)
 800fd8e:	1c75      	adds	r5, r6, #1
 800fd90:	7621      	strb	r1, [r4, #24]
 800fd92:	f7fc fe38 	bl	800ca06 <memchr>
 800fd96:	2800      	cmp	r0, #0
 800fd98:	d040      	beq.n	800fe1c <_vfiprintf_r+0x210>
 800fd9a:	4b28      	ldr	r3, [pc, #160]	@ (800fe3c <_vfiprintf_r+0x230>)
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d122      	bne.n	800fde6 <_vfiprintf_r+0x1da>
 800fda0:	2207      	movs	r2, #7
 800fda2:	9b07      	ldr	r3, [sp, #28]
 800fda4:	3307      	adds	r3, #7
 800fda6:	4393      	bics	r3, r2
 800fda8:	3308      	adds	r3, #8
 800fdaa:	9307      	str	r3, [sp, #28]
 800fdac:	6963      	ldr	r3, [r4, #20]
 800fdae:	9a04      	ldr	r2, [sp, #16]
 800fdb0:	189b      	adds	r3, r3, r2
 800fdb2:	6163      	str	r3, [r4, #20]
 800fdb4:	e762      	b.n	800fc7c <_vfiprintf_r+0x70>
 800fdb6:	4343      	muls	r3, r0
 800fdb8:	002e      	movs	r6, r5
 800fdba:	2101      	movs	r1, #1
 800fdbc:	189b      	adds	r3, r3, r2
 800fdbe:	e7a4      	b.n	800fd0a <_vfiprintf_r+0xfe>
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	200a      	movs	r0, #10
 800fdc4:	0019      	movs	r1, r3
 800fdc6:	3601      	adds	r6, #1
 800fdc8:	6063      	str	r3, [r4, #4]
 800fdca:	7832      	ldrb	r2, [r6, #0]
 800fdcc:	1c75      	adds	r5, r6, #1
 800fdce:	3a30      	subs	r2, #48	@ 0x30
 800fdd0:	2a09      	cmp	r2, #9
 800fdd2:	d903      	bls.n	800fddc <_vfiprintf_r+0x1d0>
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d0c8      	beq.n	800fd6a <_vfiprintf_r+0x15e>
 800fdd8:	9109      	str	r1, [sp, #36]	@ 0x24
 800fdda:	e7c6      	b.n	800fd6a <_vfiprintf_r+0x15e>
 800fddc:	4341      	muls	r1, r0
 800fdde:	002e      	movs	r6, r5
 800fde0:	2301      	movs	r3, #1
 800fde2:	1889      	adds	r1, r1, r2
 800fde4:	e7f1      	b.n	800fdca <_vfiprintf_r+0x1be>
 800fde6:	aa07      	add	r2, sp, #28
 800fde8:	9200      	str	r2, [sp, #0]
 800fdea:	0021      	movs	r1, r4
 800fdec:	003a      	movs	r2, r7
 800fdee:	4b14      	ldr	r3, [pc, #80]	@ (800fe40 <_vfiprintf_r+0x234>)
 800fdf0:	9803      	ldr	r0, [sp, #12]
 800fdf2:	f7fb fe53 	bl	800ba9c <_printf_float>
 800fdf6:	9004      	str	r0, [sp, #16]
 800fdf8:	9b04      	ldr	r3, [sp, #16]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	d1d6      	bne.n	800fdac <_vfiprintf_r+0x1a0>
 800fdfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe00:	07db      	lsls	r3, r3, #31
 800fe02:	d405      	bmi.n	800fe10 <_vfiprintf_r+0x204>
 800fe04:	89bb      	ldrh	r3, [r7, #12]
 800fe06:	059b      	lsls	r3, r3, #22
 800fe08:	d402      	bmi.n	800fe10 <_vfiprintf_r+0x204>
 800fe0a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fe0c:	f7fc fdfa 	bl	800ca04 <__retarget_lock_release_recursive>
 800fe10:	89bb      	ldrh	r3, [r7, #12]
 800fe12:	065b      	lsls	r3, r3, #25
 800fe14:	d500      	bpl.n	800fe18 <_vfiprintf_r+0x20c>
 800fe16:	e71e      	b.n	800fc56 <_vfiprintf_r+0x4a>
 800fe18:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800fe1a:	e71e      	b.n	800fc5a <_vfiprintf_r+0x4e>
 800fe1c:	aa07      	add	r2, sp, #28
 800fe1e:	9200      	str	r2, [sp, #0]
 800fe20:	0021      	movs	r1, r4
 800fe22:	003a      	movs	r2, r7
 800fe24:	4b06      	ldr	r3, [pc, #24]	@ (800fe40 <_vfiprintf_r+0x234>)
 800fe26:	9803      	ldr	r0, [sp, #12]
 800fe28:	f7fc f8e6 	bl	800bff8 <_printf_i>
 800fe2c:	e7e3      	b.n	800fdf6 <_vfiprintf_r+0x1ea>
 800fe2e:	46c0      	nop			@ (mov r8, r8)
 800fe30:	08010b40 	.word	0x08010b40
 800fe34:	08010b46 	.word	0x08010b46
 800fe38:	08010b4a 	.word	0x08010b4a
 800fe3c:	0800ba9d 	.word	0x0800ba9d
 800fe40:	0800fbe9 	.word	0x0800fbe9

0800fe44 <__swbuf_r>:
 800fe44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe46:	0006      	movs	r6, r0
 800fe48:	000d      	movs	r5, r1
 800fe4a:	0014      	movs	r4, r2
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	d004      	beq.n	800fe5a <__swbuf_r+0x16>
 800fe50:	6a03      	ldr	r3, [r0, #32]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d101      	bne.n	800fe5a <__swbuf_r+0x16>
 800fe56:	f7fc fc7b 	bl	800c750 <__sinit>
 800fe5a:	69a3      	ldr	r3, [r4, #24]
 800fe5c:	60a3      	str	r3, [r4, #8]
 800fe5e:	89a3      	ldrh	r3, [r4, #12]
 800fe60:	071b      	lsls	r3, r3, #28
 800fe62:	d502      	bpl.n	800fe6a <__swbuf_r+0x26>
 800fe64:	6923      	ldr	r3, [r4, #16]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d109      	bne.n	800fe7e <__swbuf_r+0x3a>
 800fe6a:	0021      	movs	r1, r4
 800fe6c:	0030      	movs	r0, r6
 800fe6e:	f000 f82b 	bl	800fec8 <__swsetup_r>
 800fe72:	2800      	cmp	r0, #0
 800fe74:	d003      	beq.n	800fe7e <__swbuf_r+0x3a>
 800fe76:	2501      	movs	r5, #1
 800fe78:	426d      	negs	r5, r5
 800fe7a:	0028      	movs	r0, r5
 800fe7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe7e:	6923      	ldr	r3, [r4, #16]
 800fe80:	6820      	ldr	r0, [r4, #0]
 800fe82:	b2ef      	uxtb	r7, r5
 800fe84:	1ac0      	subs	r0, r0, r3
 800fe86:	6963      	ldr	r3, [r4, #20]
 800fe88:	b2ed      	uxtb	r5, r5
 800fe8a:	4283      	cmp	r3, r0
 800fe8c:	dc05      	bgt.n	800fe9a <__swbuf_r+0x56>
 800fe8e:	0021      	movs	r1, r4
 800fe90:	0030      	movs	r0, r6
 800fe92:	f7ff fa0f 	bl	800f2b4 <_fflush_r>
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d1ed      	bne.n	800fe76 <__swbuf_r+0x32>
 800fe9a:	68a3      	ldr	r3, [r4, #8]
 800fe9c:	3001      	adds	r0, #1
 800fe9e:	3b01      	subs	r3, #1
 800fea0:	60a3      	str	r3, [r4, #8]
 800fea2:	6823      	ldr	r3, [r4, #0]
 800fea4:	1c5a      	adds	r2, r3, #1
 800fea6:	6022      	str	r2, [r4, #0]
 800fea8:	701f      	strb	r7, [r3, #0]
 800feaa:	6963      	ldr	r3, [r4, #20]
 800feac:	4283      	cmp	r3, r0
 800feae:	d004      	beq.n	800feba <__swbuf_r+0x76>
 800feb0:	89a3      	ldrh	r3, [r4, #12]
 800feb2:	07db      	lsls	r3, r3, #31
 800feb4:	d5e1      	bpl.n	800fe7a <__swbuf_r+0x36>
 800feb6:	2d0a      	cmp	r5, #10
 800feb8:	d1df      	bne.n	800fe7a <__swbuf_r+0x36>
 800feba:	0021      	movs	r1, r4
 800febc:	0030      	movs	r0, r6
 800febe:	f7ff f9f9 	bl	800f2b4 <_fflush_r>
 800fec2:	2800      	cmp	r0, #0
 800fec4:	d0d9      	beq.n	800fe7a <__swbuf_r+0x36>
 800fec6:	e7d6      	b.n	800fe76 <__swbuf_r+0x32>

0800fec8 <__swsetup_r>:
 800fec8:	4b2d      	ldr	r3, [pc, #180]	@ (800ff80 <__swsetup_r+0xb8>)
 800feca:	b570      	push	{r4, r5, r6, lr}
 800fecc:	0005      	movs	r5, r0
 800fece:	6818      	ldr	r0, [r3, #0]
 800fed0:	000c      	movs	r4, r1
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d004      	beq.n	800fee0 <__swsetup_r+0x18>
 800fed6:	6a03      	ldr	r3, [r0, #32]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d101      	bne.n	800fee0 <__swsetup_r+0x18>
 800fedc:	f7fc fc38 	bl	800c750 <__sinit>
 800fee0:	230c      	movs	r3, #12
 800fee2:	5ee2      	ldrsh	r2, [r4, r3]
 800fee4:	0713      	lsls	r3, r2, #28
 800fee6:	d423      	bmi.n	800ff30 <__swsetup_r+0x68>
 800fee8:	06d3      	lsls	r3, r2, #27
 800feea:	d407      	bmi.n	800fefc <__swsetup_r+0x34>
 800feec:	2309      	movs	r3, #9
 800feee:	602b      	str	r3, [r5, #0]
 800fef0:	2340      	movs	r3, #64	@ 0x40
 800fef2:	2001      	movs	r0, #1
 800fef4:	4313      	orrs	r3, r2
 800fef6:	81a3      	strh	r3, [r4, #12]
 800fef8:	4240      	negs	r0, r0
 800fefa:	e03a      	b.n	800ff72 <__swsetup_r+0xaa>
 800fefc:	0752      	lsls	r2, r2, #29
 800fefe:	d513      	bpl.n	800ff28 <__swsetup_r+0x60>
 800ff00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff02:	2900      	cmp	r1, #0
 800ff04:	d008      	beq.n	800ff18 <__swsetup_r+0x50>
 800ff06:	0023      	movs	r3, r4
 800ff08:	3344      	adds	r3, #68	@ 0x44
 800ff0a:	4299      	cmp	r1, r3
 800ff0c:	d002      	beq.n	800ff14 <__swsetup_r+0x4c>
 800ff0e:	0028      	movs	r0, r5
 800ff10:	f7fd fc0a 	bl	800d728 <_free_r>
 800ff14:	2300      	movs	r3, #0
 800ff16:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff18:	2224      	movs	r2, #36	@ 0x24
 800ff1a:	89a3      	ldrh	r3, [r4, #12]
 800ff1c:	4393      	bics	r3, r2
 800ff1e:	81a3      	strh	r3, [r4, #12]
 800ff20:	2300      	movs	r3, #0
 800ff22:	6063      	str	r3, [r4, #4]
 800ff24:	6923      	ldr	r3, [r4, #16]
 800ff26:	6023      	str	r3, [r4, #0]
 800ff28:	2308      	movs	r3, #8
 800ff2a:	89a2      	ldrh	r2, [r4, #12]
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	81a3      	strh	r3, [r4, #12]
 800ff30:	6923      	ldr	r3, [r4, #16]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d10b      	bne.n	800ff4e <__swsetup_r+0x86>
 800ff36:	21a0      	movs	r1, #160	@ 0xa0
 800ff38:	2280      	movs	r2, #128	@ 0x80
 800ff3a:	89a3      	ldrh	r3, [r4, #12]
 800ff3c:	0089      	lsls	r1, r1, #2
 800ff3e:	0092      	lsls	r2, r2, #2
 800ff40:	400b      	ands	r3, r1
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d003      	beq.n	800ff4e <__swsetup_r+0x86>
 800ff46:	0021      	movs	r1, r4
 800ff48:	0028      	movs	r0, r5
 800ff4a:	f000 f88f 	bl	801006c <__smakebuf_r>
 800ff4e:	230c      	movs	r3, #12
 800ff50:	5ee2      	ldrsh	r2, [r4, r3]
 800ff52:	2101      	movs	r1, #1
 800ff54:	0013      	movs	r3, r2
 800ff56:	400b      	ands	r3, r1
 800ff58:	420a      	tst	r2, r1
 800ff5a:	d00b      	beq.n	800ff74 <__swsetup_r+0xac>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	60a3      	str	r3, [r4, #8]
 800ff60:	6963      	ldr	r3, [r4, #20]
 800ff62:	425b      	negs	r3, r3
 800ff64:	61a3      	str	r3, [r4, #24]
 800ff66:	2000      	movs	r0, #0
 800ff68:	6923      	ldr	r3, [r4, #16]
 800ff6a:	4283      	cmp	r3, r0
 800ff6c:	d101      	bne.n	800ff72 <__swsetup_r+0xaa>
 800ff6e:	0613      	lsls	r3, r2, #24
 800ff70:	d4be      	bmi.n	800fef0 <__swsetup_r+0x28>
 800ff72:	bd70      	pop	{r4, r5, r6, pc}
 800ff74:	0791      	lsls	r1, r2, #30
 800ff76:	d400      	bmi.n	800ff7a <__swsetup_r+0xb2>
 800ff78:	6963      	ldr	r3, [r4, #20]
 800ff7a:	60a3      	str	r3, [r4, #8]
 800ff7c:	e7f3      	b.n	800ff66 <__swsetup_r+0x9e>
 800ff7e:	46c0      	nop			@ (mov r8, r8)
 800ff80:	20000030 	.word	0x20000030

0800ff84 <_raise_r>:
 800ff84:	b570      	push	{r4, r5, r6, lr}
 800ff86:	0004      	movs	r4, r0
 800ff88:	000d      	movs	r5, r1
 800ff8a:	291f      	cmp	r1, #31
 800ff8c:	d904      	bls.n	800ff98 <_raise_r+0x14>
 800ff8e:	2316      	movs	r3, #22
 800ff90:	6003      	str	r3, [r0, #0]
 800ff92:	2001      	movs	r0, #1
 800ff94:	4240      	negs	r0, r0
 800ff96:	bd70      	pop	{r4, r5, r6, pc}
 800ff98:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d004      	beq.n	800ffa8 <_raise_r+0x24>
 800ff9e:	008a      	lsls	r2, r1, #2
 800ffa0:	189b      	adds	r3, r3, r2
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	2a00      	cmp	r2, #0
 800ffa6:	d108      	bne.n	800ffba <_raise_r+0x36>
 800ffa8:	0020      	movs	r0, r4
 800ffaa:	f000 f831 	bl	8010010 <_getpid_r>
 800ffae:	002a      	movs	r2, r5
 800ffb0:	0001      	movs	r1, r0
 800ffb2:	0020      	movs	r0, r4
 800ffb4:	f000 f81a 	bl	800ffec <_kill_r>
 800ffb8:	e7ed      	b.n	800ff96 <_raise_r+0x12>
 800ffba:	2a01      	cmp	r2, #1
 800ffbc:	d009      	beq.n	800ffd2 <_raise_r+0x4e>
 800ffbe:	1c51      	adds	r1, r2, #1
 800ffc0:	d103      	bne.n	800ffca <_raise_r+0x46>
 800ffc2:	2316      	movs	r3, #22
 800ffc4:	6003      	str	r3, [r0, #0]
 800ffc6:	2001      	movs	r0, #1
 800ffc8:	e7e5      	b.n	800ff96 <_raise_r+0x12>
 800ffca:	2100      	movs	r1, #0
 800ffcc:	0028      	movs	r0, r5
 800ffce:	6019      	str	r1, [r3, #0]
 800ffd0:	4790      	blx	r2
 800ffd2:	2000      	movs	r0, #0
 800ffd4:	e7df      	b.n	800ff96 <_raise_r+0x12>
	...

0800ffd8 <raise>:
 800ffd8:	b510      	push	{r4, lr}
 800ffda:	4b03      	ldr	r3, [pc, #12]	@ (800ffe8 <raise+0x10>)
 800ffdc:	0001      	movs	r1, r0
 800ffde:	6818      	ldr	r0, [r3, #0]
 800ffe0:	f7ff ffd0 	bl	800ff84 <_raise_r>
 800ffe4:	bd10      	pop	{r4, pc}
 800ffe6:	46c0      	nop			@ (mov r8, r8)
 800ffe8:	20000030 	.word	0x20000030

0800ffec <_kill_r>:
 800ffec:	2300      	movs	r3, #0
 800ffee:	b570      	push	{r4, r5, r6, lr}
 800fff0:	4d06      	ldr	r5, [pc, #24]	@ (801000c <_kill_r+0x20>)
 800fff2:	0004      	movs	r4, r0
 800fff4:	0008      	movs	r0, r1
 800fff6:	0011      	movs	r1, r2
 800fff8:	602b      	str	r3, [r5, #0]
 800fffa:	f7f4 fe18 	bl	8004c2e <_kill>
 800fffe:	1c43      	adds	r3, r0, #1
 8010000:	d103      	bne.n	801000a <_kill_r+0x1e>
 8010002:	682b      	ldr	r3, [r5, #0]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d000      	beq.n	801000a <_kill_r+0x1e>
 8010008:	6023      	str	r3, [r4, #0]
 801000a:	bd70      	pop	{r4, r5, r6, pc}
 801000c:	200006f8 	.word	0x200006f8

08010010 <_getpid_r>:
 8010010:	b510      	push	{r4, lr}
 8010012:	f7f4 fe06 	bl	8004c22 <_getpid>
 8010016:	bd10      	pop	{r4, pc}

08010018 <__swhatbuf_r>:
 8010018:	b570      	push	{r4, r5, r6, lr}
 801001a:	000e      	movs	r6, r1
 801001c:	001d      	movs	r5, r3
 801001e:	230e      	movs	r3, #14
 8010020:	5ec9      	ldrsh	r1, [r1, r3]
 8010022:	0014      	movs	r4, r2
 8010024:	b096      	sub	sp, #88	@ 0x58
 8010026:	2900      	cmp	r1, #0
 8010028:	da0c      	bge.n	8010044 <__swhatbuf_r+0x2c>
 801002a:	89b2      	ldrh	r2, [r6, #12]
 801002c:	2380      	movs	r3, #128	@ 0x80
 801002e:	0011      	movs	r1, r2
 8010030:	4019      	ands	r1, r3
 8010032:	421a      	tst	r2, r3
 8010034:	d114      	bne.n	8010060 <__swhatbuf_r+0x48>
 8010036:	2380      	movs	r3, #128	@ 0x80
 8010038:	00db      	lsls	r3, r3, #3
 801003a:	2000      	movs	r0, #0
 801003c:	6029      	str	r1, [r5, #0]
 801003e:	6023      	str	r3, [r4, #0]
 8010040:	b016      	add	sp, #88	@ 0x58
 8010042:	bd70      	pop	{r4, r5, r6, pc}
 8010044:	466a      	mov	r2, sp
 8010046:	f000 f853 	bl	80100f0 <_fstat_r>
 801004a:	2800      	cmp	r0, #0
 801004c:	dbed      	blt.n	801002a <__swhatbuf_r+0x12>
 801004e:	23f0      	movs	r3, #240	@ 0xf0
 8010050:	9901      	ldr	r1, [sp, #4]
 8010052:	021b      	lsls	r3, r3, #8
 8010054:	4019      	ands	r1, r3
 8010056:	4b04      	ldr	r3, [pc, #16]	@ (8010068 <__swhatbuf_r+0x50>)
 8010058:	18c9      	adds	r1, r1, r3
 801005a:	424b      	negs	r3, r1
 801005c:	4159      	adcs	r1, r3
 801005e:	e7ea      	b.n	8010036 <__swhatbuf_r+0x1e>
 8010060:	2100      	movs	r1, #0
 8010062:	2340      	movs	r3, #64	@ 0x40
 8010064:	e7e9      	b.n	801003a <__swhatbuf_r+0x22>
 8010066:	46c0      	nop			@ (mov r8, r8)
 8010068:	ffffe000 	.word	0xffffe000

0801006c <__smakebuf_r>:
 801006c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801006e:	2602      	movs	r6, #2
 8010070:	898b      	ldrh	r3, [r1, #12]
 8010072:	0005      	movs	r5, r0
 8010074:	000c      	movs	r4, r1
 8010076:	b085      	sub	sp, #20
 8010078:	4233      	tst	r3, r6
 801007a:	d007      	beq.n	801008c <__smakebuf_r+0x20>
 801007c:	0023      	movs	r3, r4
 801007e:	3347      	adds	r3, #71	@ 0x47
 8010080:	6023      	str	r3, [r4, #0]
 8010082:	6123      	str	r3, [r4, #16]
 8010084:	2301      	movs	r3, #1
 8010086:	6163      	str	r3, [r4, #20]
 8010088:	b005      	add	sp, #20
 801008a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801008c:	ab03      	add	r3, sp, #12
 801008e:	aa02      	add	r2, sp, #8
 8010090:	f7ff ffc2 	bl	8010018 <__swhatbuf_r>
 8010094:	9f02      	ldr	r7, [sp, #8]
 8010096:	9001      	str	r0, [sp, #4]
 8010098:	0039      	movs	r1, r7
 801009a:	0028      	movs	r0, r5
 801009c:	f7fd fbba 	bl	800d814 <_malloc_r>
 80100a0:	2800      	cmp	r0, #0
 80100a2:	d108      	bne.n	80100b6 <__smakebuf_r+0x4a>
 80100a4:	220c      	movs	r2, #12
 80100a6:	5ea3      	ldrsh	r3, [r4, r2]
 80100a8:	059a      	lsls	r2, r3, #22
 80100aa:	d4ed      	bmi.n	8010088 <__smakebuf_r+0x1c>
 80100ac:	2203      	movs	r2, #3
 80100ae:	4393      	bics	r3, r2
 80100b0:	431e      	orrs	r6, r3
 80100b2:	81a6      	strh	r6, [r4, #12]
 80100b4:	e7e2      	b.n	801007c <__smakebuf_r+0x10>
 80100b6:	2380      	movs	r3, #128	@ 0x80
 80100b8:	89a2      	ldrh	r2, [r4, #12]
 80100ba:	6020      	str	r0, [r4, #0]
 80100bc:	4313      	orrs	r3, r2
 80100be:	81a3      	strh	r3, [r4, #12]
 80100c0:	9b03      	ldr	r3, [sp, #12]
 80100c2:	6120      	str	r0, [r4, #16]
 80100c4:	6167      	str	r7, [r4, #20]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d00c      	beq.n	80100e4 <__smakebuf_r+0x78>
 80100ca:	0028      	movs	r0, r5
 80100cc:	230e      	movs	r3, #14
 80100ce:	5ee1      	ldrsh	r1, [r4, r3]
 80100d0:	f000 f820 	bl	8010114 <_isatty_r>
 80100d4:	2800      	cmp	r0, #0
 80100d6:	d005      	beq.n	80100e4 <__smakebuf_r+0x78>
 80100d8:	2303      	movs	r3, #3
 80100da:	89a2      	ldrh	r2, [r4, #12]
 80100dc:	439a      	bics	r2, r3
 80100de:	3b02      	subs	r3, #2
 80100e0:	4313      	orrs	r3, r2
 80100e2:	81a3      	strh	r3, [r4, #12]
 80100e4:	89a3      	ldrh	r3, [r4, #12]
 80100e6:	9a01      	ldr	r2, [sp, #4]
 80100e8:	4313      	orrs	r3, r2
 80100ea:	81a3      	strh	r3, [r4, #12]
 80100ec:	e7cc      	b.n	8010088 <__smakebuf_r+0x1c>
	...

080100f0 <_fstat_r>:
 80100f0:	2300      	movs	r3, #0
 80100f2:	b570      	push	{r4, r5, r6, lr}
 80100f4:	4d06      	ldr	r5, [pc, #24]	@ (8010110 <_fstat_r+0x20>)
 80100f6:	0004      	movs	r4, r0
 80100f8:	0008      	movs	r0, r1
 80100fa:	0011      	movs	r1, r2
 80100fc:	602b      	str	r3, [r5, #0]
 80100fe:	f7f4 fdf6 	bl	8004cee <_fstat>
 8010102:	1c43      	adds	r3, r0, #1
 8010104:	d103      	bne.n	801010e <_fstat_r+0x1e>
 8010106:	682b      	ldr	r3, [r5, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d000      	beq.n	801010e <_fstat_r+0x1e>
 801010c:	6023      	str	r3, [r4, #0]
 801010e:	bd70      	pop	{r4, r5, r6, pc}
 8010110:	200006f8 	.word	0x200006f8

08010114 <_isatty_r>:
 8010114:	2300      	movs	r3, #0
 8010116:	b570      	push	{r4, r5, r6, lr}
 8010118:	4d06      	ldr	r5, [pc, #24]	@ (8010134 <_isatty_r+0x20>)
 801011a:	0004      	movs	r4, r0
 801011c:	0008      	movs	r0, r1
 801011e:	602b      	str	r3, [r5, #0]
 8010120:	f7f4 fdf3 	bl	8004d0a <_isatty>
 8010124:	1c43      	adds	r3, r0, #1
 8010126:	d103      	bne.n	8010130 <_isatty_r+0x1c>
 8010128:	682b      	ldr	r3, [r5, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d000      	beq.n	8010130 <_isatty_r+0x1c>
 801012e:	6023      	str	r3, [r4, #0]
 8010130:	bd70      	pop	{r4, r5, r6, pc}
 8010132:	46c0      	nop			@ (mov r8, r8)
 8010134:	200006f8 	.word	0x200006f8

08010138 <_init>:
 8010138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801013a:	46c0      	nop			@ (mov r8, r8)
 801013c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801013e:	bc08      	pop	{r3}
 8010140:	469e      	mov	lr, r3
 8010142:	4770      	bx	lr

08010144 <_fini>:
 8010144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010146:	46c0      	nop			@ (mov r8, r8)
 8010148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801014a:	bc08      	pop	{r3}
 801014c:	469e      	mov	lr, r3
 801014e:	4770      	bx	lr
