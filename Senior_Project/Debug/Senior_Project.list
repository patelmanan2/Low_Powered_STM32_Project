
Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  0800ec40  0800ec40  0001ec40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f680  0800f680  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f680  0800f680  0001f680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f688  0800f688  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f688  0800f688  0001f688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f68c  0800f68c  0001f68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200001ec  0800f87c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  0800f87c  000206d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e73a  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029b6  00000000  00000000  0002e991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00031348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b77  00000000  00000000  00032238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013c3d  00000000  00000000  00032daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172d2  00000000  00000000  000469ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006af0a  00000000  00000000  0005dcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b30  00000000  00000000  000c8bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000cd6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ec24 	.word	0x0800ec24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800ec24 	.word	0x0800ec24

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fda7 	bl	8001f90 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fcf7 	bl	8001e40 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd99 	bl	8001f90 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd8f 	bl	8001f90 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd1f 	bl	8001ec4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd15 	bl	8001ec4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 fbdf 	bl	8002d1c <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f002 f838 	bl	80025dc <__aeabi_dsub>
 800056c:	f002 fbd6 	bl	8002d1c <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fd47 	bl	8002058 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fc0a 	bl	8002de8 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fd3e 	bl	8002058 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fffa 	bl	80025dc <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 fbc3 	bl	8002d88 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fd27 	bl	8002058 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 fbea 	bl	8002de8 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fdc4 	bl	80011a4 <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 fce2 	bl	800300c <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 fcdd 	bl	800300c <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	4647      	mov	r7, r8
 80007c0:	46ce      	mov	lr, r9
 80007c2:	024a      	lsls	r2, r1, #9
 80007c4:	0243      	lsls	r3, r0, #9
 80007c6:	0045      	lsls	r5, r0, #1
 80007c8:	0fc4      	lsrs	r4, r0, #31
 80007ca:	0a50      	lsrs	r0, r2, #9
 80007cc:	4680      	mov	r8, r0
 80007ce:	0048      	lsls	r0, r1, #1
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	0e00      	lsrs	r0, r0, #24
 80007d4:	0992      	lsrs	r2, r2, #6
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	001e      	movs	r6, r3
 80007dc:	4681      	mov	r9, r0
 80007de:	0002      	movs	r2, r0
 80007e0:	0e2d      	lsrs	r5, r5, #24
 80007e2:	00df      	lsls	r7, r3, #3
 80007e4:	0fc9      	lsrs	r1, r1, #31
 80007e6:	428c      	cmp	r4, r1
 80007e8:	d024      	beq.n	8000834 <__aeabi_fadd+0x78>
 80007ea:	1a28      	subs	r0, r5, r0
 80007ec:	2800      	cmp	r0, #0
 80007ee:	dd0e      	ble.n	800080e <__aeabi_fadd+0x52>
 80007f0:	2a00      	cmp	r2, #0
 80007f2:	d13e      	bne.n	8000872 <__aeabi_fadd+0xb6>
 80007f4:	4662      	mov	r2, ip
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e0fd      	b.n	80009f8 <__aeabi_fadd+0x23c>
 80007fc:	1e42      	subs	r2, r0, #1
 80007fe:	2801      	cmp	r0, #1
 8000800:	d100      	bne.n	8000804 <__aeabi_fadd+0x48>
 8000802:	e137      	b.n	8000a74 <__aeabi_fadd+0x2b8>
 8000804:	28ff      	cmp	r0, #255	; 0xff
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x4e>
 8000808:	e0a9      	b.n	800095e <__aeabi_fadd+0x1a2>
 800080a:	0010      	movs	r0, r2
 800080c:	e039      	b.n	8000882 <__aeabi_fadd+0xc6>
 800080e:	2800      	cmp	r0, #0
 8000810:	d063      	beq.n	80008da <__aeabi_fadd+0x11e>
 8000812:	464b      	mov	r3, r9
 8000814:	1b52      	subs	r2, r2, r5
 8000816:	2d00      	cmp	r5, #0
 8000818:	d000      	beq.n	800081c <__aeabi_fadd+0x60>
 800081a:	e0e0      	b.n	80009de <__aeabi_fadd+0x222>
 800081c:	2f00      	cmp	r7, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fadd+0x66>
 8000820:	e0ce      	b.n	80009c0 <__aeabi_fadd+0x204>
 8000822:	1e53      	subs	r3, r2, #1
 8000824:	2a01      	cmp	r2, #1
 8000826:	d100      	bne.n	800082a <__aeabi_fadd+0x6e>
 8000828:	e155      	b.n	8000ad6 <__aeabi_fadd+0x31a>
 800082a:	2aff      	cmp	r2, #255	; 0xff
 800082c:	d100      	bne.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e094      	b.n	800095a <__aeabi_fadd+0x19e>
 8000830:	001a      	movs	r2, r3
 8000832:	e0d9      	b.n	80009e8 <__aeabi_fadd+0x22c>
 8000834:	1a2a      	subs	r2, r5, r0
 8000836:	2a00      	cmp	r2, #0
 8000838:	dc00      	bgt.n	800083c <__aeabi_fadd+0x80>
 800083a:	e099      	b.n	8000970 <__aeabi_fadd+0x1b4>
 800083c:	2800      	cmp	r0, #0
 800083e:	d062      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000840:	2dff      	cmp	r5, #255	; 0xff
 8000842:	d100      	bne.n	8000846 <__aeabi_fadd+0x8a>
 8000844:	e08b      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	4661      	mov	r1, ip
 800084a:	04db      	lsls	r3, r3, #19
 800084c:	4319      	orrs	r1, r3
 800084e:	468c      	mov	ip, r1
 8000850:	2a1b      	cmp	r2, #27
 8000852:	dc00      	bgt.n	8000856 <__aeabi_fadd+0x9a>
 8000854:	e0d2      	b.n	80009fc <__aeabi_fadd+0x240>
 8000856:	2301      	movs	r3, #1
 8000858:	19db      	adds	r3, r3, r7
 800085a:	015a      	lsls	r2, r3, #5
 800085c:	d56a      	bpl.n	8000934 <__aeabi_fadd+0x178>
 800085e:	3501      	adds	r5, #1
 8000860:	2dff      	cmp	r5, #255	; 0xff
 8000862:	d05b      	beq.n	800091c <__aeabi_fadd+0x160>
 8000864:	2201      	movs	r2, #1
 8000866:	49a3      	ldr	r1, [pc, #652]	; (8000af4 <__aeabi_fadd+0x338>)
 8000868:	401a      	ands	r2, r3
 800086a:	085b      	lsrs	r3, r3, #1
 800086c:	400b      	ands	r3, r1
 800086e:	4313      	orrs	r3, r2
 8000870:	e01c      	b.n	80008ac <__aeabi_fadd+0xf0>
 8000872:	2dff      	cmp	r5, #255	; 0xff
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0xbc>
 8000876:	e072      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	4662      	mov	r2, ip
 800087c:	04db      	lsls	r3, r3, #19
 800087e:	431a      	orrs	r2, r3
 8000880:	4694      	mov	ip, r2
 8000882:	281b      	cmp	r0, #27
 8000884:	dc00      	bgt.n	8000888 <__aeabi_fadd+0xcc>
 8000886:	e090      	b.n	80009aa <__aeabi_fadd+0x1ee>
 8000888:	2301      	movs	r3, #1
 800088a:	1afb      	subs	r3, r7, r3
 800088c:	015a      	lsls	r2, r3, #5
 800088e:	d551      	bpl.n	8000934 <__aeabi_fadd+0x178>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	099e      	lsrs	r6, r3, #6
 8000894:	0030      	movs	r0, r6
 8000896:	f002 fb9b 	bl	8002fd0 <__clzsi2>
 800089a:	0033      	movs	r3, r6
 800089c:	3805      	subs	r0, #5
 800089e:	4083      	lsls	r3, r0
 80008a0:	4285      	cmp	r5, r0
 80008a2:	dc00      	bgt.n	80008a6 <__aeabi_fadd+0xea>
 80008a4:	e075      	b.n	8000992 <__aeabi_fadd+0x1d6>
 80008a6:	4a94      	ldr	r2, [pc, #592]	; (8000af8 <__aeabi_fadd+0x33c>)
 80008a8:	1a2d      	subs	r5, r5, r0
 80008aa:	4013      	ands	r3, r2
 80008ac:	075a      	lsls	r2, r3, #29
 80008ae:	d004      	beq.n	80008ba <__aeabi_fadd+0xfe>
 80008b0:	220f      	movs	r2, #15
 80008b2:	401a      	ands	r2, r3
 80008b4:	2a04      	cmp	r2, #4
 80008b6:	d000      	beq.n	80008ba <__aeabi_fadd+0xfe>
 80008b8:	3304      	adds	r3, #4
 80008ba:	015a      	lsls	r2, r3, #5
 80008bc:	d53c      	bpl.n	8000938 <__aeabi_fadd+0x17c>
 80008be:	1c68      	adds	r0, r5, #1
 80008c0:	2dfe      	cmp	r5, #254	; 0xfe
 80008c2:	d02b      	beq.n	800091c <__aeabi_fadd+0x160>
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	0a5e      	lsrs	r6, r3, #9
 80008c8:	b2c0      	uxtb	r0, r0
 80008ca:	05c0      	lsls	r0, r0, #23
 80008cc:	4330      	orrs	r0, r6
 80008ce:	07e4      	lsls	r4, r4, #31
 80008d0:	4320      	orrs	r0, r4
 80008d2:	bcc0      	pop	{r6, r7}
 80008d4:	46b9      	mov	r9, r7
 80008d6:	46b0      	mov	r8, r6
 80008d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008da:	20fe      	movs	r0, #254	; 0xfe
 80008dc:	1c6a      	adds	r2, r5, #1
 80008de:	4210      	tst	r0, r2
 80008e0:	d172      	bne.n	80009c8 <__aeabi_fadd+0x20c>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fadd+0x12c>
 80008e6:	e0ae      	b.n	8000a46 <__aeabi_fadd+0x28a>
 80008e8:	2f00      	cmp	r7, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_fadd+0x132>
 80008ec:	e0ec      	b.n	8000ac8 <__aeabi_fadd+0x30c>
 80008ee:	4663      	mov	r3, ip
 80008f0:	2000      	movs	r0, #0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0e9      	beq.n	80008ca <__aeabi_fadd+0x10e>
 80008f6:	1afb      	subs	r3, r7, r3
 80008f8:	015a      	lsls	r2, r3, #5
 80008fa:	d400      	bmi.n	80008fe <__aeabi_fadd+0x142>
 80008fc:	e0f3      	b.n	8000ae6 <__aeabi_fadd+0x32a>
 80008fe:	4663      	mov	r3, ip
 8000900:	000c      	movs	r4, r1
 8000902:	1bdb      	subs	r3, r3, r7
 8000904:	e7d2      	b.n	80008ac <__aeabi_fadd+0xf0>
 8000906:	4661      	mov	r1, ip
 8000908:	2900      	cmp	r1, #0
 800090a:	d05b      	beq.n	80009c4 <__aeabi_fadd+0x208>
 800090c:	1e51      	subs	r1, r2, #1
 800090e:	2a01      	cmp	r2, #1
 8000910:	d100      	bne.n	8000914 <__aeabi_fadd+0x158>
 8000912:	e0a7      	b.n	8000a64 <__aeabi_fadd+0x2a8>
 8000914:	2aff      	cmp	r2, #255	; 0xff
 8000916:	d022      	beq.n	800095e <__aeabi_fadd+0x1a2>
 8000918:	000a      	movs	r2, r1
 800091a:	e799      	b.n	8000850 <__aeabi_fadd+0x94>
 800091c:	20ff      	movs	r0, #255	; 0xff
 800091e:	2600      	movs	r6, #0
 8000920:	e7d3      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000922:	21fe      	movs	r1, #254	; 0xfe
 8000924:	1c6a      	adds	r2, r5, #1
 8000926:	4211      	tst	r1, r2
 8000928:	d073      	beq.n	8000a12 <__aeabi_fadd+0x256>
 800092a:	2aff      	cmp	r2, #255	; 0xff
 800092c:	d0f6      	beq.n	800091c <__aeabi_fadd+0x160>
 800092e:	0015      	movs	r5, r2
 8000930:	4467      	add	r7, ip
 8000932:	087b      	lsrs	r3, r7, #1
 8000934:	075a      	lsls	r2, r3, #29
 8000936:	d1bb      	bne.n	80008b0 <__aeabi_fadd+0xf4>
 8000938:	08db      	lsrs	r3, r3, #3
 800093a:	2dff      	cmp	r5, #255	; 0xff
 800093c:	d00f      	beq.n	800095e <__aeabi_fadd+0x1a2>
 800093e:	025b      	lsls	r3, r3, #9
 8000940:	0a5e      	lsrs	r6, r3, #9
 8000942:	b2e8      	uxtb	r0, r5
 8000944:	e7c1      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000946:	4662      	mov	r2, ip
 8000948:	2a00      	cmp	r2, #0
 800094a:	d008      	beq.n	800095e <__aeabi_fadd+0x1a2>
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	03d2      	lsls	r2, r2, #15
 8000950:	4213      	tst	r3, r2
 8000952:	d004      	beq.n	800095e <__aeabi_fadd+0x1a2>
 8000954:	4640      	mov	r0, r8
 8000956:	4210      	tst	r0, r2
 8000958:	d101      	bne.n	800095e <__aeabi_fadd+0x1a2>
 800095a:	000c      	movs	r4, r1
 800095c:	4643      	mov	r3, r8
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0dc      	beq.n	800091c <__aeabi_fadd+0x160>
 8000962:	2680      	movs	r6, #128	; 0x80
 8000964:	03f6      	lsls	r6, r6, #15
 8000966:	431e      	orrs	r6, r3
 8000968:	0276      	lsls	r6, r6, #9
 800096a:	20ff      	movs	r0, #255	; 0xff
 800096c:	0a76      	lsrs	r6, r6, #9
 800096e:	e7ac      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000970:	2a00      	cmp	r2, #0
 8000972:	d0d6      	beq.n	8000922 <__aeabi_fadd+0x166>
 8000974:	1b42      	subs	r2, r0, r5
 8000976:	2d00      	cmp	r5, #0
 8000978:	d05c      	beq.n	8000a34 <__aeabi_fadd+0x278>
 800097a:	28ff      	cmp	r0, #255	; 0xff
 800097c:	d0ee      	beq.n	800095c <__aeabi_fadd+0x1a0>
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	04db      	lsls	r3, r3, #19
 8000982:	431f      	orrs	r7, r3
 8000984:	2a1b      	cmp	r2, #27
 8000986:	dc00      	bgt.n	800098a <__aeabi_fadd+0x1ce>
 8000988:	e082      	b.n	8000a90 <__aeabi_fadd+0x2d4>
 800098a:	2301      	movs	r3, #1
 800098c:	464d      	mov	r5, r9
 800098e:	4463      	add	r3, ip
 8000990:	e763      	b.n	800085a <__aeabi_fadd+0x9e>
 8000992:	2220      	movs	r2, #32
 8000994:	1b40      	subs	r0, r0, r5
 8000996:	3001      	adds	r0, #1
 8000998:	1a12      	subs	r2, r2, r0
 800099a:	0019      	movs	r1, r3
 800099c:	4093      	lsls	r3, r2
 800099e:	40c1      	lsrs	r1, r0
 80009a0:	1e5a      	subs	r2, r3, #1
 80009a2:	4193      	sbcs	r3, r2
 80009a4:	2500      	movs	r5, #0
 80009a6:	430b      	orrs	r3, r1
 80009a8:	e780      	b.n	80008ac <__aeabi_fadd+0xf0>
 80009aa:	2320      	movs	r3, #32
 80009ac:	4661      	mov	r1, ip
 80009ae:	1a1b      	subs	r3, r3, r0
 80009b0:	4099      	lsls	r1, r3
 80009b2:	4662      	mov	r2, ip
 80009b4:	000b      	movs	r3, r1
 80009b6:	40c2      	lsrs	r2, r0
 80009b8:	1e59      	subs	r1, r3, #1
 80009ba:	418b      	sbcs	r3, r1
 80009bc:	4313      	orrs	r3, r2
 80009be:	e764      	b.n	800088a <__aeabi_fadd+0xce>
 80009c0:	000c      	movs	r4, r1
 80009c2:	4643      	mov	r3, r8
 80009c4:	0015      	movs	r5, r2
 80009c6:	e7b8      	b.n	800093a <__aeabi_fadd+0x17e>
 80009c8:	4663      	mov	r3, ip
 80009ca:	1afe      	subs	r6, r7, r3
 80009cc:	0173      	lsls	r3, r6, #5
 80009ce:	d445      	bmi.n	8000a5c <__aeabi_fadd+0x2a0>
 80009d0:	2e00      	cmp	r6, #0
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fadd+0x21a>
 80009d4:	e75e      	b.n	8000894 <__aeabi_fadd+0xd8>
 80009d6:	2400      	movs	r4, #0
 80009d8:	2000      	movs	r0, #0
 80009da:	2600      	movs	r6, #0
 80009dc:	e775      	b.n	80008ca <__aeabi_fadd+0x10e>
 80009de:	2bff      	cmp	r3, #255	; 0xff
 80009e0:	d0bb      	beq.n	800095a <__aeabi_fadd+0x19e>
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	04db      	lsls	r3, r3, #19
 80009e6:	431f      	orrs	r7, r3
 80009e8:	2a1b      	cmp	r2, #27
 80009ea:	dd47      	ble.n	8000a7c <__aeabi_fadd+0x2c0>
 80009ec:	2301      	movs	r3, #1
 80009ee:	4662      	mov	r2, ip
 80009f0:	000c      	movs	r4, r1
 80009f2:	464d      	mov	r5, r9
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	e749      	b.n	800088c <__aeabi_fadd+0xd0>
 80009f8:	0005      	movs	r5, r0
 80009fa:	e79e      	b.n	800093a <__aeabi_fadd+0x17e>
 80009fc:	4661      	mov	r1, ip
 80009fe:	2320      	movs	r3, #32
 8000a00:	40d1      	lsrs	r1, r2
 8000a02:	1a9b      	subs	r3, r3, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	4193      	sbcs	r3, r2
 8000a0e:	430b      	orrs	r3, r1
 8000a10:	e722      	b.n	8000858 <__aeabi_fadd+0x9c>
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	d146      	bne.n	8000aa4 <__aeabi_fadd+0x2e8>
 8000a16:	2f00      	cmp	r7, #0
 8000a18:	d062      	beq.n	8000ae0 <__aeabi_fadd+0x324>
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d100      	bne.n	8000a24 <__aeabi_fadd+0x268>
 8000a22:	e752      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000a24:	003b      	movs	r3, r7
 8000a26:	4463      	add	r3, ip
 8000a28:	015a      	lsls	r2, r3, #5
 8000a2a:	d583      	bpl.n	8000934 <__aeabi_fadd+0x178>
 8000a2c:	4a32      	ldr	r2, [pc, #200]	; (8000af8 <__aeabi_fadd+0x33c>)
 8000a2e:	3501      	adds	r5, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	e77f      	b.n	8000934 <__aeabi_fadd+0x178>
 8000a34:	2f00      	cmp	r7, #0
 8000a36:	d0c4      	beq.n	80009c2 <__aeabi_fadd+0x206>
 8000a38:	1e53      	subs	r3, r2, #1
 8000a3a:	2a01      	cmp	r2, #1
 8000a3c:	d012      	beq.n	8000a64 <__aeabi_fadd+0x2a8>
 8000a3e:	2aff      	cmp	r2, #255	; 0xff
 8000a40:	d08c      	beq.n	800095c <__aeabi_fadd+0x1a0>
 8000a42:	001a      	movs	r2, r3
 8000a44:	e79e      	b.n	8000984 <__aeabi_fadd+0x1c8>
 8000a46:	2f00      	cmp	r7, #0
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fadd+0x290>
 8000a4a:	e77c      	b.n	8000946 <__aeabi_fadd+0x18a>
 8000a4c:	4663      	mov	r3, ip
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d183      	bne.n	800095a <__aeabi_fadd+0x19e>
 8000a52:	2680      	movs	r6, #128	; 0x80
 8000a54:	2400      	movs	r4, #0
 8000a56:	20ff      	movs	r0, #255	; 0xff
 8000a58:	03f6      	lsls	r6, r6, #15
 8000a5a:	e736      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	000c      	movs	r4, r1
 8000a60:	1bde      	subs	r6, r3, r7
 8000a62:	e717      	b.n	8000894 <__aeabi_fadd+0xd8>
 8000a64:	003b      	movs	r3, r7
 8000a66:	4463      	add	r3, ip
 8000a68:	2501      	movs	r5, #1
 8000a6a:	015a      	lsls	r2, r3, #5
 8000a6c:	d400      	bmi.n	8000a70 <__aeabi_fadd+0x2b4>
 8000a6e:	e761      	b.n	8000934 <__aeabi_fadd+0x178>
 8000a70:	2502      	movs	r5, #2
 8000a72:	e6f7      	b.n	8000864 <__aeabi_fadd+0xa8>
 8000a74:	4663      	mov	r3, ip
 8000a76:	2501      	movs	r5, #1
 8000a78:	1afb      	subs	r3, r7, r3
 8000a7a:	e707      	b.n	800088c <__aeabi_fadd+0xd0>
 8000a7c:	2320      	movs	r3, #32
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	0038      	movs	r0, r7
 8000a82:	409f      	lsls	r7, r3
 8000a84:	003b      	movs	r3, r7
 8000a86:	40d0      	lsrs	r0, r2
 8000a88:	1e5a      	subs	r2, r3, #1
 8000a8a:	4193      	sbcs	r3, r2
 8000a8c:	4303      	orrs	r3, r0
 8000a8e:	e7ae      	b.n	80009ee <__aeabi_fadd+0x232>
 8000a90:	2320      	movs	r3, #32
 8000a92:	1a9b      	subs	r3, r3, r2
 8000a94:	0039      	movs	r1, r7
 8000a96:	409f      	lsls	r7, r3
 8000a98:	003b      	movs	r3, r7
 8000a9a:	40d1      	lsrs	r1, r2
 8000a9c:	1e5a      	subs	r2, r3, #1
 8000a9e:	4193      	sbcs	r3, r2
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	e773      	b.n	800098c <__aeabi_fadd+0x1d0>
 8000aa4:	2f00      	cmp	r7, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fadd+0x2ee>
 8000aa8:	e758      	b.n	800095c <__aeabi_fadd+0x1a0>
 8000aaa:	4662      	mov	r2, ip
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000ab0:	e755      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	03d2      	lsls	r2, r2, #15
 8000ab6:	4213      	tst	r3, r2
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fadd+0x300>
 8000aba:	e750      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000abc:	4641      	mov	r1, r8
 8000abe:	4211      	tst	r1, r2
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_fadd+0x308>
 8000ac2:	e74c      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000ac4:	4643      	mov	r3, r8
 8000ac6:	e74a      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000ac8:	4663      	mov	r3, ip
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d083      	beq.n	80009d6 <__aeabi_fadd+0x21a>
 8000ace:	000c      	movs	r4, r1
 8000ad0:	4646      	mov	r6, r8
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	e6f9      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	000c      	movs	r4, r1
 8000ada:	1bdb      	subs	r3, r3, r7
 8000adc:	3501      	adds	r5, #1
 8000ade:	e6d5      	b.n	800088c <__aeabi_fadd+0xd0>
 8000ae0:	4646      	mov	r6, r8
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e6f1      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d000      	beq.n	8000aec <__aeabi_fadd+0x330>
 8000aea:	e723      	b.n	8000934 <__aeabi_fadd+0x178>
 8000aec:	2400      	movs	r4, #0
 8000aee:	2600      	movs	r6, #0
 8000af0:	e6eb      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	7dffffff 	.word	0x7dffffff
 8000af8:	fbffffff 	.word	0xfbffffff

08000afc <__aeabi_fdiv>:
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	464f      	mov	r7, r9
 8000b00:	4646      	mov	r6, r8
 8000b02:	46d6      	mov	lr, sl
 8000b04:	0245      	lsls	r5, r0, #9
 8000b06:	b5c0      	push	{r6, r7, lr}
 8000b08:	0047      	lsls	r7, r0, #1
 8000b0a:	1c0c      	adds	r4, r1, #0
 8000b0c:	0a6d      	lsrs	r5, r5, #9
 8000b0e:	0e3f      	lsrs	r7, r7, #24
 8000b10:	0fc6      	lsrs	r6, r0, #31
 8000b12:	2f00      	cmp	r7, #0
 8000b14:	d100      	bne.n	8000b18 <__aeabi_fdiv+0x1c>
 8000b16:	e06f      	b.n	8000bf8 <__aeabi_fdiv+0xfc>
 8000b18:	2fff      	cmp	r7, #255	; 0xff
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_fdiv+0x22>
 8000b1c:	e074      	b.n	8000c08 <__aeabi_fdiv+0x10c>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	4699      	mov	r9, r3
 8000b24:	469a      	mov	sl, r3
 8000b26:	00ed      	lsls	r5, r5, #3
 8000b28:	04d2      	lsls	r2, r2, #19
 8000b2a:	4315      	orrs	r5, r2
 8000b2c:	3f7f      	subs	r7, #127	; 0x7f
 8000b2e:	0263      	lsls	r3, r4, #9
 8000b30:	0a5b      	lsrs	r3, r3, #9
 8000b32:	4698      	mov	r8, r3
 8000b34:	0063      	lsls	r3, r4, #1
 8000b36:	0e1b      	lsrs	r3, r3, #24
 8000b38:	0fe4      	lsrs	r4, r4, #31
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d04d      	beq.n	8000bda <__aeabi_fdiv+0xde>
 8000b3e:	2bff      	cmp	r3, #255	; 0xff
 8000b40:	d045      	beq.n	8000bce <__aeabi_fdiv+0xd2>
 8000b42:	4642      	mov	r2, r8
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	00d2      	lsls	r2, r2, #3
 8000b48:	04c9      	lsls	r1, r1, #19
 8000b4a:	4311      	orrs	r1, r2
 8000b4c:	4688      	mov	r8, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	3b7f      	subs	r3, #127	; 0x7f
 8000b52:	0031      	movs	r1, r6
 8000b54:	1aff      	subs	r7, r7, r3
 8000b56:	464b      	mov	r3, r9
 8000b58:	4061      	eors	r1, r4
 8000b5a:	b2c9      	uxtb	r1, r1
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d900      	bls.n	8000b62 <__aeabi_fdiv+0x66>
 8000b60:	e0b8      	b.n	8000cd4 <__aeabi_fdiv+0x1d8>
 8000b62:	4870      	ldr	r0, [pc, #448]	; (8000d24 <__aeabi_fdiv+0x228>)
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	58c3      	ldr	r3, [r0, r3]
 8000b68:	469f      	mov	pc, r3
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	0026      	movs	r6, r4
 8000b70:	4645      	mov	r5, r8
 8000b72:	4692      	mov	sl, r2
 8000b74:	4653      	mov	r3, sl
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fdiv+0x80>
 8000b7a:	e08d      	b.n	8000c98 <__aeabi_fdiv+0x19c>
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_fdiv+0x86>
 8000b80:	e0a1      	b.n	8000cc6 <__aeabi_fdiv+0x1ca>
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d018      	beq.n	8000bb8 <__aeabi_fdiv+0xbc>
 8000b86:	003b      	movs	r3, r7
 8000b88:	337f      	adds	r3, #127	; 0x7f
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	dd6d      	ble.n	8000c6a <__aeabi_fdiv+0x16e>
 8000b8e:	076a      	lsls	r2, r5, #29
 8000b90:	d004      	beq.n	8000b9c <__aeabi_fdiv+0xa0>
 8000b92:	220f      	movs	r2, #15
 8000b94:	402a      	ands	r2, r5
 8000b96:	2a04      	cmp	r2, #4
 8000b98:	d000      	beq.n	8000b9c <__aeabi_fdiv+0xa0>
 8000b9a:	3504      	adds	r5, #4
 8000b9c:	012a      	lsls	r2, r5, #4
 8000b9e:	d503      	bpl.n	8000ba8 <__aeabi_fdiv+0xac>
 8000ba0:	4b61      	ldr	r3, [pc, #388]	; (8000d28 <__aeabi_fdiv+0x22c>)
 8000ba2:	401d      	ands	r5, r3
 8000ba4:	003b      	movs	r3, r7
 8000ba6:	3380      	adds	r3, #128	; 0x80
 8000ba8:	2bfe      	cmp	r3, #254	; 0xfe
 8000baa:	dd00      	ble.n	8000bae <__aeabi_fdiv+0xb2>
 8000bac:	e074      	b.n	8000c98 <__aeabi_fdiv+0x19c>
 8000bae:	01aa      	lsls	r2, r5, #6
 8000bb0:	0a52      	lsrs	r2, r2, #9
 8000bb2:	b2d8      	uxtb	r0, r3
 8000bb4:	e002      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000bb6:	000e      	movs	r6, r1
 8000bb8:	2000      	movs	r0, #0
 8000bba:	2200      	movs	r2, #0
 8000bbc:	05c0      	lsls	r0, r0, #23
 8000bbe:	07f6      	lsls	r6, r6, #31
 8000bc0:	4310      	orrs	r0, r2
 8000bc2:	4330      	orrs	r0, r6
 8000bc4:	bce0      	pop	{r5, r6, r7}
 8000bc6:	46ba      	mov	sl, r7
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	46a8      	mov	r8, r5
 8000bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bce:	4643      	mov	r3, r8
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d13f      	bne.n	8000c54 <__aeabi_fdiv+0x158>
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	3fff      	subs	r7, #255	; 0xff
 8000bd8:	e003      	b.n	8000be2 <__aeabi_fdiv+0xe6>
 8000bda:	4643      	mov	r3, r8
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d12d      	bne.n	8000c3c <__aeabi_fdiv+0x140>
 8000be0:	2201      	movs	r2, #1
 8000be2:	0031      	movs	r1, r6
 8000be4:	464b      	mov	r3, r9
 8000be6:	4061      	eors	r1, r4
 8000be8:	b2c9      	uxtb	r1, r1
 8000bea:	4313      	orrs	r3, r2
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d838      	bhi.n	8000c62 <__aeabi_fdiv+0x166>
 8000bf0:	484e      	ldr	r0, [pc, #312]	; (8000d2c <__aeabi_fdiv+0x230>)
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	58c3      	ldr	r3, [r0, r3]
 8000bf6:	469f      	mov	pc, r3
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d113      	bne.n	8000c24 <__aeabi_fdiv+0x128>
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	4699      	mov	r9, r3
 8000c00:	3b03      	subs	r3, #3
 8000c02:	2700      	movs	r7, #0
 8000c04:	469a      	mov	sl, r3
 8000c06:	e792      	b.n	8000b2e <__aeabi_fdiv+0x32>
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d105      	bne.n	8000c18 <__aeabi_fdiv+0x11c>
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	4699      	mov	r9, r3
 8000c10:	3b06      	subs	r3, #6
 8000c12:	27ff      	movs	r7, #255	; 0xff
 8000c14:	469a      	mov	sl, r3
 8000c16:	e78a      	b.n	8000b2e <__aeabi_fdiv+0x32>
 8000c18:	230c      	movs	r3, #12
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	3b09      	subs	r3, #9
 8000c1e:	27ff      	movs	r7, #255	; 0xff
 8000c20:	469a      	mov	sl, r3
 8000c22:	e784      	b.n	8000b2e <__aeabi_fdiv+0x32>
 8000c24:	0028      	movs	r0, r5
 8000c26:	f002 f9d3 	bl	8002fd0 <__clzsi2>
 8000c2a:	2776      	movs	r7, #118	; 0x76
 8000c2c:	1f43      	subs	r3, r0, #5
 8000c2e:	409d      	lsls	r5, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	427f      	negs	r7, r7
 8000c34:	4699      	mov	r9, r3
 8000c36:	469a      	mov	sl, r3
 8000c38:	1a3f      	subs	r7, r7, r0
 8000c3a:	e778      	b.n	8000b2e <__aeabi_fdiv+0x32>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	f002 f9c7 	bl	8002fd0 <__clzsi2>
 8000c42:	4642      	mov	r2, r8
 8000c44:	1f43      	subs	r3, r0, #5
 8000c46:	409a      	lsls	r2, r3
 8000c48:	2376      	movs	r3, #118	; 0x76
 8000c4a:	425b      	negs	r3, r3
 8000c4c:	4690      	mov	r8, r2
 8000c4e:	1a1b      	subs	r3, r3, r0
 8000c50:	2200      	movs	r2, #0
 8000c52:	e77e      	b.n	8000b52 <__aeabi_fdiv+0x56>
 8000c54:	2303      	movs	r3, #3
 8000c56:	464a      	mov	r2, r9
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	4691      	mov	r9, r2
 8000c5c:	33fc      	adds	r3, #252	; 0xfc
 8000c5e:	2203      	movs	r2, #3
 8000c60:	e777      	b.n	8000b52 <__aeabi_fdiv+0x56>
 8000c62:	000e      	movs	r6, r1
 8000c64:	20ff      	movs	r0, #255	; 0xff
 8000c66:	2200      	movs	r2, #0
 8000c68:	e7a8      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b1b      	cmp	r3, #27
 8000c70:	dca2      	bgt.n	8000bb8 <__aeabi_fdiv+0xbc>
 8000c72:	379e      	adds	r7, #158	; 0x9e
 8000c74:	002a      	movs	r2, r5
 8000c76:	40bd      	lsls	r5, r7
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	1e6b      	subs	r3, r5, #1
 8000c7c:	419d      	sbcs	r5, r3
 8000c7e:	4315      	orrs	r5, r2
 8000c80:	076a      	lsls	r2, r5, #29
 8000c82:	d004      	beq.n	8000c8e <__aeabi_fdiv+0x192>
 8000c84:	220f      	movs	r2, #15
 8000c86:	402a      	ands	r2, r5
 8000c88:	2a04      	cmp	r2, #4
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fdiv+0x192>
 8000c8c:	3504      	adds	r5, #4
 8000c8e:	016a      	lsls	r2, r5, #5
 8000c90:	d544      	bpl.n	8000d1c <__aeabi_fdiv+0x220>
 8000c92:	2001      	movs	r0, #1
 8000c94:	2200      	movs	r2, #0
 8000c96:	e791      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000c98:	20ff      	movs	r0, #255	; 0xff
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e78e      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	20ff      	movs	r0, #255	; 0xff
 8000ca4:	03d2      	lsls	r2, r2, #15
 8000ca6:	e789      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	4698      	mov	r8, r3
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	03d2      	lsls	r2, r2, #15
 8000cb0:	4215      	tst	r5, r2
 8000cb2:	d008      	beq.n	8000cc6 <__aeabi_fdiv+0x1ca>
 8000cb4:	4643      	mov	r3, r8
 8000cb6:	4213      	tst	r3, r2
 8000cb8:	d105      	bne.n	8000cc6 <__aeabi_fdiv+0x1ca>
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	0252      	lsls	r2, r2, #9
 8000cbe:	0026      	movs	r6, r4
 8000cc0:	20ff      	movs	r0, #255	; 0xff
 8000cc2:	0a52      	lsrs	r2, r2, #9
 8000cc4:	e77a      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	03d2      	lsls	r2, r2, #15
 8000cca:	432a      	orrs	r2, r5
 8000ccc:	0252      	lsls	r2, r2, #9
 8000cce:	20ff      	movs	r0, #255	; 0xff
 8000cd0:	0a52      	lsrs	r2, r2, #9
 8000cd2:	e773      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000cd4:	4642      	mov	r2, r8
 8000cd6:	016b      	lsls	r3, r5, #5
 8000cd8:	0155      	lsls	r5, r2, #5
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	d21a      	bcs.n	8000d14 <__aeabi_fdiv+0x218>
 8000cde:	201b      	movs	r0, #27
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	3f01      	subs	r7, #1
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	001c      	movs	r4, r3
 8000ce8:	0052      	lsls	r2, r2, #1
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	db01      	blt.n	8000cf4 <__aeabi_fdiv+0x1f8>
 8000cf0:	429d      	cmp	r5, r3
 8000cf2:	d801      	bhi.n	8000cf8 <__aeabi_fdiv+0x1fc>
 8000cf4:	1b5b      	subs	r3, r3, r5
 8000cf6:	4332      	orrs	r2, r6
 8000cf8:	3801      	subs	r0, #1
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d1f3      	bne.n	8000ce6 <__aeabi_fdiv+0x1ea>
 8000cfe:	1e58      	subs	r0, r3, #1
 8000d00:	4183      	sbcs	r3, r0
 8000d02:	4313      	orrs	r3, r2
 8000d04:	001d      	movs	r5, r3
 8000d06:	003b      	movs	r3, r7
 8000d08:	337f      	adds	r3, #127	; 0x7f
 8000d0a:	000e      	movs	r6, r1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	dd00      	ble.n	8000d12 <__aeabi_fdiv+0x216>
 8000d10:	e73d      	b.n	8000b8e <__aeabi_fdiv+0x92>
 8000d12:	e7aa      	b.n	8000c6a <__aeabi_fdiv+0x16e>
 8000d14:	201a      	movs	r0, #26
 8000d16:	2201      	movs	r2, #1
 8000d18:	1b5b      	subs	r3, r3, r5
 8000d1a:	e7e3      	b.n	8000ce4 <__aeabi_fdiv+0x1e8>
 8000d1c:	01aa      	lsls	r2, r5, #6
 8000d1e:	2000      	movs	r0, #0
 8000d20:	0a52      	lsrs	r2, r2, #9
 8000d22:	e74b      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000d24:	0800ecdc 	.word	0x0800ecdc
 8000d28:	f7ffffff 	.word	0xf7ffffff
 8000d2c:	0800ed1c 	.word	0x0800ed1c

08000d30 <__aeabi_fsub>:
 8000d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d32:	46c6      	mov	lr, r8
 8000d34:	0243      	lsls	r3, r0, #9
 8000d36:	0a5b      	lsrs	r3, r3, #9
 8000d38:	0045      	lsls	r5, r0, #1
 8000d3a:	00da      	lsls	r2, r3, #3
 8000d3c:	0fc4      	lsrs	r4, r0, #31
 8000d3e:	0248      	lsls	r0, r1, #9
 8000d40:	004f      	lsls	r7, r1, #1
 8000d42:	4694      	mov	ip, r2
 8000d44:	0a42      	lsrs	r2, r0, #9
 8000d46:	001e      	movs	r6, r3
 8000d48:	4690      	mov	r8, r2
 8000d4a:	b500      	push	{lr}
 8000d4c:	0e2d      	lsrs	r5, r5, #24
 8000d4e:	0e3f      	lsrs	r7, r7, #24
 8000d50:	0fc9      	lsrs	r1, r1, #31
 8000d52:	0980      	lsrs	r0, r0, #6
 8000d54:	2fff      	cmp	r7, #255	; 0xff
 8000d56:	d059      	beq.n	8000e0c <__aeabi_fsub+0xdc>
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4051      	eors	r1, r2
 8000d5c:	428c      	cmp	r4, r1
 8000d5e:	d039      	beq.n	8000dd4 <__aeabi_fsub+0xa4>
 8000d60:	1bea      	subs	r2, r5, r7
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	dd58      	ble.n	8000e18 <__aeabi_fsub+0xe8>
 8000d66:	2f00      	cmp	r7, #0
 8000d68:	d068      	beq.n	8000e3c <__aeabi_fsub+0x10c>
 8000d6a:	2dff      	cmp	r5, #255	; 0xff
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_fsub+0x40>
 8000d6e:	e0d1      	b.n	8000f14 <__aeabi_fsub+0x1e4>
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	04db      	lsls	r3, r3, #19
 8000d74:	4318      	orrs	r0, r3
 8000d76:	2a1b      	cmp	r2, #27
 8000d78:	dc00      	bgt.n	8000d7c <__aeabi_fsub+0x4c>
 8000d7a:	e0e3      	b.n	8000f44 <__aeabi_fsub+0x214>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	4662      	mov	r2, ip
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	015a      	lsls	r2, r3, #5
 8000d84:	d400      	bmi.n	8000d88 <__aeabi_fsub+0x58>
 8000d86:	e0ac      	b.n	8000ee2 <__aeabi_fsub+0x1b2>
 8000d88:	019b      	lsls	r3, r3, #6
 8000d8a:	099e      	lsrs	r6, r3, #6
 8000d8c:	0030      	movs	r0, r6
 8000d8e:	f002 f91f 	bl	8002fd0 <__clzsi2>
 8000d92:	0033      	movs	r3, r6
 8000d94:	3805      	subs	r0, #5
 8000d96:	4083      	lsls	r3, r0
 8000d98:	4285      	cmp	r5, r0
 8000d9a:	dc00      	bgt.n	8000d9e <__aeabi_fsub+0x6e>
 8000d9c:	e0c6      	b.n	8000f2c <__aeabi_fsub+0x1fc>
 8000d9e:	4ab2      	ldr	r2, [pc, #712]	; (8001068 <__aeabi_fsub+0x338>)
 8000da0:	1a2d      	subs	r5, r5, r0
 8000da2:	4013      	ands	r3, r2
 8000da4:	075a      	lsls	r2, r3, #29
 8000da6:	d004      	beq.n	8000db2 <__aeabi_fsub+0x82>
 8000da8:	220f      	movs	r2, #15
 8000daa:	401a      	ands	r2, r3
 8000dac:	2a04      	cmp	r2, #4
 8000dae:	d000      	beq.n	8000db2 <__aeabi_fsub+0x82>
 8000db0:	3304      	adds	r3, #4
 8000db2:	015a      	lsls	r2, r3, #5
 8000db4:	d400      	bmi.n	8000db8 <__aeabi_fsub+0x88>
 8000db6:	e097      	b.n	8000ee8 <__aeabi_fsub+0x1b8>
 8000db8:	1c6a      	adds	r2, r5, #1
 8000dba:	2dfe      	cmp	r5, #254	; 0xfe
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fsub+0x90>
 8000dbe:	e084      	b.n	8000eca <__aeabi_fsub+0x19a>
 8000dc0:	019b      	lsls	r3, r3, #6
 8000dc2:	0a5e      	lsrs	r6, r3, #9
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	05d0      	lsls	r0, r2, #23
 8000dc8:	4330      	orrs	r0, r6
 8000dca:	07e4      	lsls	r4, r4, #31
 8000dcc:	4320      	orrs	r0, r4
 8000dce:	bc80      	pop	{r7}
 8000dd0:	46b8      	mov	r8, r7
 8000dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd4:	1bea      	subs	r2, r5, r7
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	dd41      	ble.n	8000e5e <__aeabi_fsub+0x12e>
 8000dda:	2f00      	cmp	r7, #0
 8000ddc:	d06b      	beq.n	8000eb6 <__aeabi_fsub+0x186>
 8000dde:	2dff      	cmp	r5, #255	; 0xff
 8000de0:	d100      	bne.n	8000de4 <__aeabi_fsub+0xb4>
 8000de2:	e097      	b.n	8000f14 <__aeabi_fsub+0x1e4>
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	04db      	lsls	r3, r3, #19
 8000de8:	4318      	orrs	r0, r3
 8000dea:	2a1b      	cmp	r2, #27
 8000dec:	dc00      	bgt.n	8000df0 <__aeabi_fsub+0xc0>
 8000dee:	e0cc      	b.n	8000f8a <__aeabi_fsub+0x25a>
 8000df0:	2301      	movs	r3, #1
 8000df2:	4463      	add	r3, ip
 8000df4:	015a      	lsls	r2, r3, #5
 8000df6:	d574      	bpl.n	8000ee2 <__aeabi_fsub+0x1b2>
 8000df8:	3501      	adds	r5, #1
 8000dfa:	2dff      	cmp	r5, #255	; 0xff
 8000dfc:	d065      	beq.n	8000eca <__aeabi_fsub+0x19a>
 8000dfe:	2201      	movs	r2, #1
 8000e00:	499a      	ldr	r1, [pc, #616]	; (800106c <__aeabi_fsub+0x33c>)
 8000e02:	401a      	ands	r2, r3
 8000e04:	085b      	lsrs	r3, r3, #1
 8000e06:	400b      	ands	r3, r1
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	e7cb      	b.n	8000da4 <__aeabi_fsub+0x74>
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d01f      	beq.n	8000e50 <__aeabi_fsub+0x120>
 8000e10:	428c      	cmp	r4, r1
 8000e12:	d022      	beq.n	8000e5a <__aeabi_fsub+0x12a>
 8000e14:	002a      	movs	r2, r5
 8000e16:	3aff      	subs	r2, #255	; 0xff
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	d035      	beq.n	8000e88 <__aeabi_fsub+0x158>
 8000e1c:	1b7a      	subs	r2, r7, r5
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d000      	beq.n	8000e24 <__aeabi_fsub+0xf4>
 8000e22:	e099      	b.n	8000f58 <__aeabi_fsub+0x228>
 8000e24:	4663      	mov	r3, ip
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_fsub+0xfc>
 8000e2a:	e0dd      	b.n	8000fe8 <__aeabi_fsub+0x2b8>
 8000e2c:	1e53      	subs	r3, r2, #1
 8000e2e:	2a01      	cmp	r2, #1
 8000e30:	d100      	bne.n	8000e34 <__aeabi_fsub+0x104>
 8000e32:	e105      	b.n	8001040 <__aeabi_fsub+0x310>
 8000e34:	2aff      	cmp	r2, #255	; 0xff
 8000e36:	d06b      	beq.n	8000f10 <__aeabi_fsub+0x1e0>
 8000e38:	001a      	movs	r2, r3
 8000e3a:	e094      	b.n	8000f66 <__aeabi_fsub+0x236>
 8000e3c:	2800      	cmp	r0, #0
 8000e3e:	d073      	beq.n	8000f28 <__aeabi_fsub+0x1f8>
 8000e40:	1e51      	subs	r1, r2, #1
 8000e42:	2a01      	cmp	r2, #1
 8000e44:	d100      	bne.n	8000e48 <__aeabi_fsub+0x118>
 8000e46:	e0df      	b.n	8001008 <__aeabi_fsub+0x2d8>
 8000e48:	2aff      	cmp	r2, #255	; 0xff
 8000e4a:	d063      	beq.n	8000f14 <__aeabi_fsub+0x1e4>
 8000e4c:	000a      	movs	r2, r1
 8000e4e:	e792      	b.n	8000d76 <__aeabi_fsub+0x46>
 8000e50:	2201      	movs	r2, #1
 8000e52:	4051      	eors	r1, r2
 8000e54:	42a1      	cmp	r1, r4
 8000e56:	d000      	beq.n	8000e5a <__aeabi_fsub+0x12a>
 8000e58:	e782      	b.n	8000d60 <__aeabi_fsub+0x30>
 8000e5a:	002a      	movs	r2, r5
 8000e5c:	3aff      	subs	r2, #255	; 0xff
 8000e5e:	2a00      	cmp	r2, #0
 8000e60:	d036      	beq.n	8000ed0 <__aeabi_fsub+0x1a0>
 8000e62:	1b7a      	subs	r2, r7, r5
 8000e64:	2d00      	cmp	r5, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fsub+0x13a>
 8000e68:	e0aa      	b.n	8000fc0 <__aeabi_fsub+0x290>
 8000e6a:	2fff      	cmp	r7, #255	; 0xff
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_fsub+0x140>
 8000e6e:	e0da      	b.n	8001026 <__aeabi_fsub+0x2f6>
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	4661      	mov	r1, ip
 8000e74:	04db      	lsls	r3, r3, #19
 8000e76:	4319      	orrs	r1, r3
 8000e78:	468c      	mov	ip, r1
 8000e7a:	2a1b      	cmp	r2, #27
 8000e7c:	dc00      	bgt.n	8000e80 <__aeabi_fsub+0x150>
 8000e7e:	e0d4      	b.n	800102a <__aeabi_fsub+0x2fa>
 8000e80:	2301      	movs	r3, #1
 8000e82:	003d      	movs	r5, r7
 8000e84:	181b      	adds	r3, r3, r0
 8000e86:	e7b5      	b.n	8000df4 <__aeabi_fsub+0xc4>
 8000e88:	27fe      	movs	r7, #254	; 0xfe
 8000e8a:	1c6a      	adds	r2, r5, #1
 8000e8c:	4217      	tst	r7, r2
 8000e8e:	d171      	bne.n	8000f74 <__aeabi_fsub+0x244>
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d000      	beq.n	8000e96 <__aeabi_fsub+0x166>
 8000e94:	e09e      	b.n	8000fd4 <__aeabi_fsub+0x2a4>
 8000e96:	4663      	mov	r3, ip
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_fsub+0x16e>
 8000e9c:	e0d5      	b.n	800104a <__aeabi_fsub+0x31a>
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x176>
 8000ea4:	e78f      	b.n	8000dc6 <__aeabi_fsub+0x96>
 8000ea6:	1a1b      	subs	r3, r3, r0
 8000ea8:	015e      	lsls	r6, r3, #5
 8000eaa:	d400      	bmi.n	8000eae <__aeabi_fsub+0x17e>
 8000eac:	e0d6      	b.n	800105c <__aeabi_fsub+0x32c>
 8000eae:	4663      	mov	r3, ip
 8000eb0:	000c      	movs	r4, r1
 8000eb2:	1ac3      	subs	r3, r0, r3
 8000eb4:	e776      	b.n	8000da4 <__aeabi_fsub+0x74>
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d036      	beq.n	8000f28 <__aeabi_fsub+0x1f8>
 8000eba:	1e51      	subs	r1, r2, #1
 8000ebc:	2a01      	cmp	r2, #1
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_fsub+0x192>
 8000ec0:	e09a      	b.n	8000ff8 <__aeabi_fsub+0x2c8>
 8000ec2:	2aff      	cmp	r2, #255	; 0xff
 8000ec4:	d026      	beq.n	8000f14 <__aeabi_fsub+0x1e4>
 8000ec6:	000a      	movs	r2, r1
 8000ec8:	e78f      	b.n	8000dea <__aeabi_fsub+0xba>
 8000eca:	22ff      	movs	r2, #255	; 0xff
 8000ecc:	2600      	movs	r6, #0
 8000ece:	e77a      	b.n	8000dc6 <__aeabi_fsub+0x96>
 8000ed0:	27fe      	movs	r7, #254	; 0xfe
 8000ed2:	1c6a      	adds	r2, r5, #1
 8000ed4:	4217      	tst	r7, r2
 8000ed6:	d062      	beq.n	8000f9e <__aeabi_fsub+0x26e>
 8000ed8:	2aff      	cmp	r2, #255	; 0xff
 8000eda:	d0f6      	beq.n	8000eca <__aeabi_fsub+0x19a>
 8000edc:	0015      	movs	r5, r2
 8000ede:	4460      	add	r0, ip
 8000ee0:	0843      	lsrs	r3, r0, #1
 8000ee2:	075a      	lsls	r2, r3, #29
 8000ee4:	d000      	beq.n	8000ee8 <__aeabi_fsub+0x1b8>
 8000ee6:	e75f      	b.n	8000da8 <__aeabi_fsub+0x78>
 8000ee8:	08db      	lsrs	r3, r3, #3
 8000eea:	2dff      	cmp	r5, #255	; 0xff
 8000eec:	d012      	beq.n	8000f14 <__aeabi_fsub+0x1e4>
 8000eee:	025b      	lsls	r3, r3, #9
 8000ef0:	0a5e      	lsrs	r6, r3, #9
 8000ef2:	b2ea      	uxtb	r2, r5
 8000ef4:	e767      	b.n	8000dc6 <__aeabi_fsub+0x96>
 8000ef6:	4662      	mov	r2, ip
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	d100      	bne.n	8000efe <__aeabi_fsub+0x1ce>
 8000efc:	e093      	b.n	8001026 <__aeabi_fsub+0x2f6>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	d008      	beq.n	8000f14 <__aeabi_fsub+0x1e4>
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	03d2      	lsls	r2, r2, #15
 8000f06:	4213      	tst	r3, r2
 8000f08:	d004      	beq.n	8000f14 <__aeabi_fsub+0x1e4>
 8000f0a:	4640      	mov	r0, r8
 8000f0c:	4210      	tst	r0, r2
 8000f0e:	d101      	bne.n	8000f14 <__aeabi_fsub+0x1e4>
 8000f10:	000c      	movs	r4, r1
 8000f12:	4643      	mov	r3, r8
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0d8      	beq.n	8000eca <__aeabi_fsub+0x19a>
 8000f18:	2680      	movs	r6, #128	; 0x80
 8000f1a:	03f6      	lsls	r6, r6, #15
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	0276      	lsls	r6, r6, #9
 8000f20:	22ff      	movs	r2, #255	; 0xff
 8000f22:	0a76      	lsrs	r6, r6, #9
 8000f24:	e74f      	b.n	8000dc6 <__aeabi_fsub+0x96>
 8000f26:	4643      	mov	r3, r8
 8000f28:	0015      	movs	r5, r2
 8000f2a:	e7de      	b.n	8000eea <__aeabi_fsub+0x1ba>
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	1b40      	subs	r0, r0, r5
 8000f30:	3001      	adds	r0, #1
 8000f32:	1a12      	subs	r2, r2, r0
 8000f34:	0019      	movs	r1, r3
 8000f36:	4093      	lsls	r3, r2
 8000f38:	40c1      	lsrs	r1, r0
 8000f3a:	1e5a      	subs	r2, r3, #1
 8000f3c:	4193      	sbcs	r3, r2
 8000f3e:	2500      	movs	r5, #0
 8000f40:	430b      	orrs	r3, r1
 8000f42:	e72f      	b.n	8000da4 <__aeabi_fsub+0x74>
 8000f44:	2320      	movs	r3, #32
 8000f46:	1a9b      	subs	r3, r3, r2
 8000f48:	0001      	movs	r1, r0
 8000f4a:	4098      	lsls	r0, r3
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	40d1      	lsrs	r1, r2
 8000f50:	1e5a      	subs	r2, r3, #1
 8000f52:	4193      	sbcs	r3, r2
 8000f54:	430b      	orrs	r3, r1
 8000f56:	e712      	b.n	8000d7e <__aeabi_fsub+0x4e>
 8000f58:	2fff      	cmp	r7, #255	; 0xff
 8000f5a:	d0d9      	beq.n	8000f10 <__aeabi_fsub+0x1e0>
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	4664      	mov	r4, ip
 8000f60:	04db      	lsls	r3, r3, #19
 8000f62:	431c      	orrs	r4, r3
 8000f64:	46a4      	mov	ip, r4
 8000f66:	2a1b      	cmp	r2, #27
 8000f68:	dd52      	ble.n	8001010 <__aeabi_fsub+0x2e0>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	000c      	movs	r4, r1
 8000f6e:	003d      	movs	r5, r7
 8000f70:	1ac3      	subs	r3, r0, r3
 8000f72:	e706      	b.n	8000d82 <__aeabi_fsub+0x52>
 8000f74:	4663      	mov	r3, ip
 8000f76:	1a1e      	subs	r6, r3, r0
 8000f78:	0173      	lsls	r3, r6, #5
 8000f7a:	d439      	bmi.n	8000ff0 <__aeabi_fsub+0x2c0>
 8000f7c:	2e00      	cmp	r6, #0
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fsub+0x252>
 8000f80:	e704      	b.n	8000d8c <__aeabi_fsub+0x5c>
 8000f82:	2400      	movs	r4, #0
 8000f84:	2200      	movs	r2, #0
 8000f86:	2600      	movs	r6, #0
 8000f88:	e71d      	b.n	8000dc6 <__aeabi_fsub+0x96>
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	0001      	movs	r1, r0
 8000f90:	4098      	lsls	r0, r3
 8000f92:	0003      	movs	r3, r0
 8000f94:	40d1      	lsrs	r1, r2
 8000f96:	1e5a      	subs	r2, r3, #1
 8000f98:	4193      	sbcs	r3, r2
 8000f9a:	430b      	orrs	r3, r1
 8000f9c:	e729      	b.n	8000df2 <__aeabi_fsub+0xc2>
 8000f9e:	2d00      	cmp	r5, #0
 8000fa0:	d1a9      	bne.n	8000ef6 <__aeabi_fsub+0x1c6>
 8000fa2:	4663      	mov	r3, ip
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d056      	beq.n	8001056 <__aeabi_fsub+0x326>
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_fsub+0x280>
 8000fae:	e70a      	b.n	8000dc6 <__aeabi_fsub+0x96>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	4463      	add	r3, ip
 8000fb4:	015a      	lsls	r2, r3, #5
 8000fb6:	d594      	bpl.n	8000ee2 <__aeabi_fsub+0x1b2>
 8000fb8:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <__aeabi_fsub+0x338>)
 8000fba:	3501      	adds	r5, #1
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	e790      	b.n	8000ee2 <__aeabi_fsub+0x1b2>
 8000fc0:	4663      	mov	r3, ip
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0af      	beq.n	8000f26 <__aeabi_fsub+0x1f6>
 8000fc6:	1e53      	subs	r3, r2, #1
 8000fc8:	2a01      	cmp	r2, #1
 8000fca:	d015      	beq.n	8000ff8 <__aeabi_fsub+0x2c8>
 8000fcc:	2aff      	cmp	r2, #255	; 0xff
 8000fce:	d02a      	beq.n	8001026 <__aeabi_fsub+0x2f6>
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	e752      	b.n	8000e7a <__aeabi_fsub+0x14a>
 8000fd4:	4662      	mov	r2, ip
 8000fd6:	2a00      	cmp	r2, #0
 8000fd8:	d191      	bne.n	8000efe <__aeabi_fsub+0x1ce>
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d198      	bne.n	8000f10 <__aeabi_fsub+0x1e0>
 8000fde:	2680      	movs	r6, #128	; 0x80
 8000fe0:	2400      	movs	r4, #0
 8000fe2:	22ff      	movs	r2, #255	; 0xff
 8000fe4:	03f6      	lsls	r6, r6, #15
 8000fe6:	e6ee      	b.n	8000dc6 <__aeabi_fsub+0x96>
 8000fe8:	000c      	movs	r4, r1
 8000fea:	4643      	mov	r3, r8
 8000fec:	0015      	movs	r5, r2
 8000fee:	e77c      	b.n	8000eea <__aeabi_fsub+0x1ba>
 8000ff0:	4663      	mov	r3, ip
 8000ff2:	000c      	movs	r4, r1
 8000ff4:	1ac6      	subs	r6, r0, r3
 8000ff6:	e6c9      	b.n	8000d8c <__aeabi_fsub+0x5c>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	4463      	add	r3, ip
 8000ffc:	2501      	movs	r5, #1
 8000ffe:	015a      	lsls	r2, r3, #5
 8001000:	d400      	bmi.n	8001004 <__aeabi_fsub+0x2d4>
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fsub+0x1b2>
 8001004:	2502      	movs	r5, #2
 8001006:	e6fa      	b.n	8000dfe <__aeabi_fsub+0xce>
 8001008:	4663      	mov	r3, ip
 800100a:	2501      	movs	r5, #1
 800100c:	1a1b      	subs	r3, r3, r0
 800100e:	e6b8      	b.n	8000d82 <__aeabi_fsub+0x52>
 8001010:	4664      	mov	r4, ip
 8001012:	2320      	movs	r3, #32
 8001014:	40d4      	lsrs	r4, r2
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	4662      	mov	r2, ip
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	4193      	sbcs	r3, r2
 8001022:	4323      	orrs	r3, r4
 8001024:	e7a2      	b.n	8000f6c <__aeabi_fsub+0x23c>
 8001026:	4643      	mov	r3, r8
 8001028:	e774      	b.n	8000f14 <__aeabi_fsub+0x1e4>
 800102a:	4661      	mov	r1, ip
 800102c:	2320      	movs	r3, #32
 800102e:	40d1      	lsrs	r1, r2
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	4662      	mov	r2, ip
 8001034:	409a      	lsls	r2, r3
 8001036:	0013      	movs	r3, r2
 8001038:	1e5a      	subs	r2, r3, #1
 800103a:	4193      	sbcs	r3, r2
 800103c:	430b      	orrs	r3, r1
 800103e:	e720      	b.n	8000e82 <__aeabi_fsub+0x152>
 8001040:	4663      	mov	r3, ip
 8001042:	000c      	movs	r4, r1
 8001044:	2501      	movs	r5, #1
 8001046:	1ac3      	subs	r3, r0, r3
 8001048:	e69b      	b.n	8000d82 <__aeabi_fsub+0x52>
 800104a:	2800      	cmp	r0, #0
 800104c:	d099      	beq.n	8000f82 <__aeabi_fsub+0x252>
 800104e:	000c      	movs	r4, r1
 8001050:	4646      	mov	r6, r8
 8001052:	2200      	movs	r2, #0
 8001054:	e6b7      	b.n	8000dc6 <__aeabi_fsub+0x96>
 8001056:	4646      	mov	r6, r8
 8001058:	2200      	movs	r2, #0
 800105a:	e6b4      	b.n	8000dc6 <__aeabi_fsub+0x96>
 800105c:	2b00      	cmp	r3, #0
 800105e:	d000      	beq.n	8001062 <__aeabi_fsub+0x332>
 8001060:	e73f      	b.n	8000ee2 <__aeabi_fsub+0x1b2>
 8001062:	2400      	movs	r4, #0
 8001064:	2600      	movs	r6, #0
 8001066:	e6ae      	b.n	8000dc6 <__aeabi_fsub+0x96>
 8001068:	fbffffff 	.word	0xfbffffff
 800106c:	7dffffff 	.word	0x7dffffff

08001070 <__aeabi_i2f>:
 8001070:	b570      	push	{r4, r5, r6, lr}
 8001072:	2800      	cmp	r0, #0
 8001074:	d013      	beq.n	800109e <__aeabi_i2f+0x2e>
 8001076:	17c3      	asrs	r3, r0, #31
 8001078:	18c5      	adds	r5, r0, r3
 800107a:	405d      	eors	r5, r3
 800107c:	0fc4      	lsrs	r4, r0, #31
 800107e:	0028      	movs	r0, r5
 8001080:	f001 ffa6 	bl	8002fd0 <__clzsi2>
 8001084:	239e      	movs	r3, #158	; 0x9e
 8001086:	0001      	movs	r1, r0
 8001088:	1a1b      	subs	r3, r3, r0
 800108a:	2b96      	cmp	r3, #150	; 0x96
 800108c:	dc0f      	bgt.n	80010ae <__aeabi_i2f+0x3e>
 800108e:	2808      	cmp	r0, #8
 8001090:	d031      	beq.n	80010f6 <__aeabi_i2f+0x86>
 8001092:	3908      	subs	r1, #8
 8001094:	408d      	lsls	r5, r1
 8001096:	026d      	lsls	r5, r5, #9
 8001098:	0a6d      	lsrs	r5, r5, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e002      	b.n	80010a4 <__aeabi_i2f+0x34>
 800109e:	2400      	movs	r4, #0
 80010a0:	2000      	movs	r0, #0
 80010a2:	2500      	movs	r5, #0
 80010a4:	05c0      	lsls	r0, r0, #23
 80010a6:	4328      	orrs	r0, r5
 80010a8:	07e4      	lsls	r4, r4, #31
 80010aa:	4320      	orrs	r0, r4
 80010ac:	bd70      	pop	{r4, r5, r6, pc}
 80010ae:	2b99      	cmp	r3, #153	; 0x99
 80010b0:	dd0c      	ble.n	80010cc <__aeabi_i2f+0x5c>
 80010b2:	2205      	movs	r2, #5
 80010b4:	1a12      	subs	r2, r2, r0
 80010b6:	0028      	movs	r0, r5
 80010b8:	40d0      	lsrs	r0, r2
 80010ba:	0002      	movs	r2, r0
 80010bc:	0008      	movs	r0, r1
 80010be:	301b      	adds	r0, #27
 80010c0:	4085      	lsls	r5, r0
 80010c2:	0028      	movs	r0, r5
 80010c4:	1e45      	subs	r5, r0, #1
 80010c6:	41a8      	sbcs	r0, r5
 80010c8:	4302      	orrs	r2, r0
 80010ca:	0015      	movs	r5, r2
 80010cc:	2905      	cmp	r1, #5
 80010ce:	dc16      	bgt.n	80010fe <__aeabi_i2f+0x8e>
 80010d0:	002a      	movs	r2, r5
 80010d2:	480f      	ldr	r0, [pc, #60]	; (8001110 <__aeabi_i2f+0xa0>)
 80010d4:	4002      	ands	r2, r0
 80010d6:	076e      	lsls	r6, r5, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_i2f+0x7e>
 80010da:	260f      	movs	r6, #15
 80010dc:	4035      	ands	r5, r6
 80010de:	2d04      	cmp	r5, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_i2f+0x7e>
 80010e2:	3204      	adds	r2, #4
 80010e4:	0155      	lsls	r5, r2, #5
 80010e6:	d502      	bpl.n	80010ee <__aeabi_i2f+0x7e>
 80010e8:	239f      	movs	r3, #159	; 0x9f
 80010ea:	4002      	ands	r2, r0
 80010ec:	1a5b      	subs	r3, r3, r1
 80010ee:	0192      	lsls	r2, r2, #6
 80010f0:	0a55      	lsrs	r5, r2, #9
 80010f2:	b2d8      	uxtb	r0, r3
 80010f4:	e7d6      	b.n	80010a4 <__aeabi_i2f+0x34>
 80010f6:	026d      	lsls	r5, r5, #9
 80010f8:	2096      	movs	r0, #150	; 0x96
 80010fa:	0a6d      	lsrs	r5, r5, #9
 80010fc:	e7d2      	b.n	80010a4 <__aeabi_i2f+0x34>
 80010fe:	1f4a      	subs	r2, r1, #5
 8001100:	4095      	lsls	r5, r2
 8001102:	002a      	movs	r2, r5
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <__aeabi_i2f+0xa0>)
 8001106:	4002      	ands	r2, r0
 8001108:	076e      	lsls	r6, r5, #29
 800110a:	d0f0      	beq.n	80010ee <__aeabi_i2f+0x7e>
 800110c:	e7e5      	b.n	80010da <__aeabi_i2f+0x6a>
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	fbffffff 	.word	0xfbffffff

08001114 <__aeabi_ui2f>:
 8001114:	b570      	push	{r4, r5, r6, lr}
 8001116:	1e04      	subs	r4, r0, #0
 8001118:	d00e      	beq.n	8001138 <__aeabi_ui2f+0x24>
 800111a:	f001 ff59 	bl	8002fd0 <__clzsi2>
 800111e:	239e      	movs	r3, #158	; 0x9e
 8001120:	0001      	movs	r1, r0
 8001122:	1a1b      	subs	r3, r3, r0
 8001124:	2b96      	cmp	r3, #150	; 0x96
 8001126:	dc0c      	bgt.n	8001142 <__aeabi_ui2f+0x2e>
 8001128:	2808      	cmp	r0, #8
 800112a:	d02c      	beq.n	8001186 <__aeabi_ui2f+0x72>
 800112c:	3908      	subs	r1, #8
 800112e:	408c      	lsls	r4, r1
 8001130:	0264      	lsls	r4, r4, #9
 8001132:	0a64      	lsrs	r4, r4, #9
 8001134:	b2d8      	uxtb	r0, r3
 8001136:	e001      	b.n	800113c <__aeabi_ui2f+0x28>
 8001138:	2000      	movs	r0, #0
 800113a:	2400      	movs	r4, #0
 800113c:	05c0      	lsls	r0, r0, #23
 800113e:	4320      	orrs	r0, r4
 8001140:	bd70      	pop	{r4, r5, r6, pc}
 8001142:	2b99      	cmp	r3, #153	; 0x99
 8001144:	dd0a      	ble.n	800115c <__aeabi_ui2f+0x48>
 8001146:	0002      	movs	r2, r0
 8001148:	0020      	movs	r0, r4
 800114a:	321b      	adds	r2, #27
 800114c:	4090      	lsls	r0, r2
 800114e:	0002      	movs	r2, r0
 8001150:	1e50      	subs	r0, r2, #1
 8001152:	4182      	sbcs	r2, r0
 8001154:	2005      	movs	r0, #5
 8001156:	1a40      	subs	r0, r0, r1
 8001158:	40c4      	lsrs	r4, r0
 800115a:	4314      	orrs	r4, r2
 800115c:	2905      	cmp	r1, #5
 800115e:	dc16      	bgt.n	800118e <__aeabi_ui2f+0x7a>
 8001160:	0022      	movs	r2, r4
 8001162:	480f      	ldr	r0, [pc, #60]	; (80011a0 <__aeabi_ui2f+0x8c>)
 8001164:	4002      	ands	r2, r0
 8001166:	0765      	lsls	r5, r4, #29
 8001168:	d009      	beq.n	800117e <__aeabi_ui2f+0x6a>
 800116a:	250f      	movs	r5, #15
 800116c:	402c      	ands	r4, r5
 800116e:	2c04      	cmp	r4, #4
 8001170:	d005      	beq.n	800117e <__aeabi_ui2f+0x6a>
 8001172:	3204      	adds	r2, #4
 8001174:	0154      	lsls	r4, r2, #5
 8001176:	d502      	bpl.n	800117e <__aeabi_ui2f+0x6a>
 8001178:	239f      	movs	r3, #159	; 0x9f
 800117a:	4002      	ands	r2, r0
 800117c:	1a5b      	subs	r3, r3, r1
 800117e:	0192      	lsls	r2, r2, #6
 8001180:	0a54      	lsrs	r4, r2, #9
 8001182:	b2d8      	uxtb	r0, r3
 8001184:	e7da      	b.n	800113c <__aeabi_ui2f+0x28>
 8001186:	0264      	lsls	r4, r4, #9
 8001188:	2096      	movs	r0, #150	; 0x96
 800118a:	0a64      	lsrs	r4, r4, #9
 800118c:	e7d6      	b.n	800113c <__aeabi_ui2f+0x28>
 800118e:	1f4a      	subs	r2, r1, #5
 8001190:	4094      	lsls	r4, r2
 8001192:	0022      	movs	r2, r4
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <__aeabi_ui2f+0x8c>)
 8001196:	4002      	ands	r2, r0
 8001198:	0765      	lsls	r5, r4, #29
 800119a:	d0f0      	beq.n	800117e <__aeabi_ui2f+0x6a>
 800119c:	e7e5      	b.n	800116a <__aeabi_ui2f+0x56>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	fbffffff 	.word	0xfbffffff

080011a4 <__aeabi_dadd>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	464f      	mov	r7, r9
 80011a8:	4646      	mov	r6, r8
 80011aa:	46d6      	mov	lr, sl
 80011ac:	0004      	movs	r4, r0
 80011ae:	b5c0      	push	{r6, r7, lr}
 80011b0:	001f      	movs	r7, r3
 80011b2:	030b      	lsls	r3, r1, #12
 80011b4:	0010      	movs	r0, r2
 80011b6:	004e      	lsls	r6, r1, #1
 80011b8:	0a5b      	lsrs	r3, r3, #9
 80011ba:	0fcd      	lsrs	r5, r1, #31
 80011bc:	0f61      	lsrs	r1, r4, #29
 80011be:	007a      	lsls	r2, r7, #1
 80011c0:	4319      	orrs	r1, r3
 80011c2:	00e3      	lsls	r3, r4, #3
 80011c4:	033c      	lsls	r4, r7, #12
 80011c6:	0fff      	lsrs	r7, r7, #31
 80011c8:	46bc      	mov	ip, r7
 80011ca:	0a64      	lsrs	r4, r4, #9
 80011cc:	0f47      	lsrs	r7, r0, #29
 80011ce:	4327      	orrs	r7, r4
 80011d0:	0d76      	lsrs	r6, r6, #21
 80011d2:	0d52      	lsrs	r2, r2, #21
 80011d4:	00c0      	lsls	r0, r0, #3
 80011d6:	46b9      	mov	r9, r7
 80011d8:	4680      	mov	r8, r0
 80011da:	1ab7      	subs	r7, r6, r2
 80011dc:	4565      	cmp	r5, ip
 80011de:	d100      	bne.n	80011e2 <__aeabi_dadd+0x3e>
 80011e0:	e09b      	b.n	800131a <__aeabi_dadd+0x176>
 80011e2:	2f00      	cmp	r7, #0
 80011e4:	dc00      	bgt.n	80011e8 <__aeabi_dadd+0x44>
 80011e6:	e084      	b.n	80012f2 <__aeabi_dadd+0x14e>
 80011e8:	2a00      	cmp	r2, #0
 80011ea:	d100      	bne.n	80011ee <__aeabi_dadd+0x4a>
 80011ec:	e0be      	b.n	800136c <__aeabi_dadd+0x1c8>
 80011ee:	4ac8      	ldr	r2, [pc, #800]	; (8001510 <__aeabi_dadd+0x36c>)
 80011f0:	4296      	cmp	r6, r2
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dadd+0x52>
 80011f4:	e124      	b.n	8001440 <__aeabi_dadd+0x29c>
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	464c      	mov	r4, r9
 80011fa:	0412      	lsls	r2, r2, #16
 80011fc:	4314      	orrs	r4, r2
 80011fe:	46a1      	mov	r9, r4
 8001200:	2f38      	cmp	r7, #56	; 0x38
 8001202:	dd00      	ble.n	8001206 <__aeabi_dadd+0x62>
 8001204:	e167      	b.n	80014d6 <__aeabi_dadd+0x332>
 8001206:	2f1f      	cmp	r7, #31
 8001208:	dd00      	ble.n	800120c <__aeabi_dadd+0x68>
 800120a:	e1d6      	b.n	80015ba <__aeabi_dadd+0x416>
 800120c:	2220      	movs	r2, #32
 800120e:	464c      	mov	r4, r9
 8001210:	1bd2      	subs	r2, r2, r7
 8001212:	4094      	lsls	r4, r2
 8001214:	46a2      	mov	sl, r4
 8001216:	4644      	mov	r4, r8
 8001218:	40fc      	lsrs	r4, r7
 800121a:	0020      	movs	r0, r4
 800121c:	4654      	mov	r4, sl
 800121e:	4304      	orrs	r4, r0
 8001220:	4640      	mov	r0, r8
 8001222:	4090      	lsls	r0, r2
 8001224:	1e42      	subs	r2, r0, #1
 8001226:	4190      	sbcs	r0, r2
 8001228:	464a      	mov	r2, r9
 800122a:	40fa      	lsrs	r2, r7
 800122c:	4304      	orrs	r4, r0
 800122e:	1a89      	subs	r1, r1, r2
 8001230:	1b1c      	subs	r4, r3, r4
 8001232:	42a3      	cmp	r3, r4
 8001234:	4192      	sbcs	r2, r2
 8001236:	4252      	negs	r2, r2
 8001238:	1a8b      	subs	r3, r1, r2
 800123a:	469a      	mov	sl, r3
 800123c:	4653      	mov	r3, sl
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	d400      	bmi.n	8001244 <__aeabi_dadd+0xa0>
 8001242:	e0d4      	b.n	80013ee <__aeabi_dadd+0x24a>
 8001244:	4653      	mov	r3, sl
 8001246:	025a      	lsls	r2, r3, #9
 8001248:	0a53      	lsrs	r3, r2, #9
 800124a:	469a      	mov	sl, r3
 800124c:	4653      	mov	r3, sl
 800124e:	2b00      	cmp	r3, #0
 8001250:	d100      	bne.n	8001254 <__aeabi_dadd+0xb0>
 8001252:	e104      	b.n	800145e <__aeabi_dadd+0x2ba>
 8001254:	4650      	mov	r0, sl
 8001256:	f001 febb 	bl	8002fd0 <__clzsi2>
 800125a:	0003      	movs	r3, r0
 800125c:	3b08      	subs	r3, #8
 800125e:	2220      	movs	r2, #32
 8001260:	0020      	movs	r0, r4
 8001262:	1ad2      	subs	r2, r2, r3
 8001264:	4651      	mov	r1, sl
 8001266:	40d0      	lsrs	r0, r2
 8001268:	4099      	lsls	r1, r3
 800126a:	0002      	movs	r2, r0
 800126c:	409c      	lsls	r4, r3
 800126e:	430a      	orrs	r2, r1
 8001270:	42b3      	cmp	r3, r6
 8001272:	da00      	bge.n	8001276 <__aeabi_dadd+0xd2>
 8001274:	e102      	b.n	800147c <__aeabi_dadd+0x2d8>
 8001276:	1b9b      	subs	r3, r3, r6
 8001278:	1c59      	adds	r1, r3, #1
 800127a:	291f      	cmp	r1, #31
 800127c:	dd00      	ble.n	8001280 <__aeabi_dadd+0xdc>
 800127e:	e0a7      	b.n	80013d0 <__aeabi_dadd+0x22c>
 8001280:	2320      	movs	r3, #32
 8001282:	0010      	movs	r0, r2
 8001284:	0026      	movs	r6, r4
 8001286:	1a5b      	subs	r3, r3, r1
 8001288:	409c      	lsls	r4, r3
 800128a:	4098      	lsls	r0, r3
 800128c:	40ce      	lsrs	r6, r1
 800128e:	40ca      	lsrs	r2, r1
 8001290:	1e63      	subs	r3, r4, #1
 8001292:	419c      	sbcs	r4, r3
 8001294:	4330      	orrs	r0, r6
 8001296:	4692      	mov	sl, r2
 8001298:	2600      	movs	r6, #0
 800129a:	4304      	orrs	r4, r0
 800129c:	0763      	lsls	r3, r4, #29
 800129e:	d009      	beq.n	80012b4 <__aeabi_dadd+0x110>
 80012a0:	230f      	movs	r3, #15
 80012a2:	4023      	ands	r3, r4
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d005      	beq.n	80012b4 <__aeabi_dadd+0x110>
 80012a8:	1d23      	adds	r3, r4, #4
 80012aa:	42a3      	cmp	r3, r4
 80012ac:	41a4      	sbcs	r4, r4
 80012ae:	4264      	negs	r4, r4
 80012b0:	44a2      	add	sl, r4
 80012b2:	001c      	movs	r4, r3
 80012b4:	4653      	mov	r3, sl
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	d400      	bmi.n	80012bc <__aeabi_dadd+0x118>
 80012ba:	e09b      	b.n	80013f4 <__aeabi_dadd+0x250>
 80012bc:	4b94      	ldr	r3, [pc, #592]	; (8001510 <__aeabi_dadd+0x36c>)
 80012be:	3601      	adds	r6, #1
 80012c0:	429e      	cmp	r6, r3
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0x122>
 80012c4:	e0b8      	b.n	8001438 <__aeabi_dadd+0x294>
 80012c6:	4653      	mov	r3, sl
 80012c8:	4992      	ldr	r1, [pc, #584]	; (8001514 <__aeabi_dadd+0x370>)
 80012ca:	08e4      	lsrs	r4, r4, #3
 80012cc:	400b      	ands	r3, r1
 80012ce:	0019      	movs	r1, r3
 80012d0:	075b      	lsls	r3, r3, #29
 80012d2:	4323      	orrs	r3, r4
 80012d4:	0572      	lsls	r2, r6, #21
 80012d6:	024c      	lsls	r4, r1, #9
 80012d8:	0b24      	lsrs	r4, r4, #12
 80012da:	0d52      	lsrs	r2, r2, #21
 80012dc:	0512      	lsls	r2, r2, #20
 80012de:	07ed      	lsls	r5, r5, #31
 80012e0:	4322      	orrs	r2, r4
 80012e2:	432a      	orrs	r2, r5
 80012e4:	0018      	movs	r0, r3
 80012e6:	0011      	movs	r1, r2
 80012e8:	bce0      	pop	{r5, r6, r7}
 80012ea:	46ba      	mov	sl, r7
 80012ec:	46b1      	mov	r9, r6
 80012ee:	46a8      	mov	r8, r5
 80012f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f2:	2f00      	cmp	r7, #0
 80012f4:	d048      	beq.n	8001388 <__aeabi_dadd+0x1e4>
 80012f6:	1b97      	subs	r7, r2, r6
 80012f8:	2e00      	cmp	r6, #0
 80012fa:	d000      	beq.n	80012fe <__aeabi_dadd+0x15a>
 80012fc:	e10e      	b.n	800151c <__aeabi_dadd+0x378>
 80012fe:	000c      	movs	r4, r1
 8001300:	431c      	orrs	r4, r3
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0x162>
 8001304:	e1b7      	b.n	8001676 <__aeabi_dadd+0x4d2>
 8001306:	1e7c      	subs	r4, r7, #1
 8001308:	2f01      	cmp	r7, #1
 800130a:	d100      	bne.n	800130e <__aeabi_dadd+0x16a>
 800130c:	e226      	b.n	800175c <__aeabi_dadd+0x5b8>
 800130e:	4d80      	ldr	r5, [pc, #512]	; (8001510 <__aeabi_dadd+0x36c>)
 8001310:	42af      	cmp	r7, r5
 8001312:	d100      	bne.n	8001316 <__aeabi_dadd+0x172>
 8001314:	e1d5      	b.n	80016c2 <__aeabi_dadd+0x51e>
 8001316:	0027      	movs	r7, r4
 8001318:	e107      	b.n	800152a <__aeabi_dadd+0x386>
 800131a:	2f00      	cmp	r7, #0
 800131c:	dc00      	bgt.n	8001320 <__aeabi_dadd+0x17c>
 800131e:	e0b2      	b.n	8001486 <__aeabi_dadd+0x2e2>
 8001320:	2a00      	cmp	r2, #0
 8001322:	d047      	beq.n	80013b4 <__aeabi_dadd+0x210>
 8001324:	4a7a      	ldr	r2, [pc, #488]	; (8001510 <__aeabi_dadd+0x36c>)
 8001326:	4296      	cmp	r6, r2
 8001328:	d100      	bne.n	800132c <__aeabi_dadd+0x188>
 800132a:	e089      	b.n	8001440 <__aeabi_dadd+0x29c>
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	464c      	mov	r4, r9
 8001330:	0412      	lsls	r2, r2, #16
 8001332:	4314      	orrs	r4, r2
 8001334:	46a1      	mov	r9, r4
 8001336:	2f38      	cmp	r7, #56	; 0x38
 8001338:	dc6b      	bgt.n	8001412 <__aeabi_dadd+0x26e>
 800133a:	2f1f      	cmp	r7, #31
 800133c:	dc00      	bgt.n	8001340 <__aeabi_dadd+0x19c>
 800133e:	e16e      	b.n	800161e <__aeabi_dadd+0x47a>
 8001340:	003a      	movs	r2, r7
 8001342:	4648      	mov	r0, r9
 8001344:	3a20      	subs	r2, #32
 8001346:	40d0      	lsrs	r0, r2
 8001348:	4684      	mov	ip, r0
 800134a:	2f20      	cmp	r7, #32
 800134c:	d007      	beq.n	800135e <__aeabi_dadd+0x1ba>
 800134e:	2240      	movs	r2, #64	; 0x40
 8001350:	4648      	mov	r0, r9
 8001352:	1bd2      	subs	r2, r2, r7
 8001354:	4090      	lsls	r0, r2
 8001356:	0002      	movs	r2, r0
 8001358:	4640      	mov	r0, r8
 800135a:	4310      	orrs	r0, r2
 800135c:	4680      	mov	r8, r0
 800135e:	4640      	mov	r0, r8
 8001360:	1e42      	subs	r2, r0, #1
 8001362:	4190      	sbcs	r0, r2
 8001364:	4662      	mov	r2, ip
 8001366:	0004      	movs	r4, r0
 8001368:	4314      	orrs	r4, r2
 800136a:	e057      	b.n	800141c <__aeabi_dadd+0x278>
 800136c:	464a      	mov	r2, r9
 800136e:	4302      	orrs	r2, r0
 8001370:	d100      	bne.n	8001374 <__aeabi_dadd+0x1d0>
 8001372:	e103      	b.n	800157c <__aeabi_dadd+0x3d8>
 8001374:	1e7a      	subs	r2, r7, #1
 8001376:	2f01      	cmp	r7, #1
 8001378:	d100      	bne.n	800137c <__aeabi_dadd+0x1d8>
 800137a:	e193      	b.n	80016a4 <__aeabi_dadd+0x500>
 800137c:	4c64      	ldr	r4, [pc, #400]	; (8001510 <__aeabi_dadd+0x36c>)
 800137e:	42a7      	cmp	r7, r4
 8001380:	d100      	bne.n	8001384 <__aeabi_dadd+0x1e0>
 8001382:	e18a      	b.n	800169a <__aeabi_dadd+0x4f6>
 8001384:	0017      	movs	r7, r2
 8001386:	e73b      	b.n	8001200 <__aeabi_dadd+0x5c>
 8001388:	4c63      	ldr	r4, [pc, #396]	; (8001518 <__aeabi_dadd+0x374>)
 800138a:	1c72      	adds	r2, r6, #1
 800138c:	4222      	tst	r2, r4
 800138e:	d000      	beq.n	8001392 <__aeabi_dadd+0x1ee>
 8001390:	e0e0      	b.n	8001554 <__aeabi_dadd+0x3b0>
 8001392:	000a      	movs	r2, r1
 8001394:	431a      	orrs	r2, r3
 8001396:	2e00      	cmp	r6, #0
 8001398:	d000      	beq.n	800139c <__aeabi_dadd+0x1f8>
 800139a:	e174      	b.n	8001686 <__aeabi_dadd+0x4e2>
 800139c:	2a00      	cmp	r2, #0
 800139e:	d100      	bne.n	80013a2 <__aeabi_dadd+0x1fe>
 80013a0:	e1d0      	b.n	8001744 <__aeabi_dadd+0x5a0>
 80013a2:	464a      	mov	r2, r9
 80013a4:	4302      	orrs	r2, r0
 80013a6:	d000      	beq.n	80013aa <__aeabi_dadd+0x206>
 80013a8:	e1e3      	b.n	8001772 <__aeabi_dadd+0x5ce>
 80013aa:	074a      	lsls	r2, r1, #29
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	08c9      	lsrs	r1, r1, #3
 80013b2:	e029      	b.n	8001408 <__aeabi_dadd+0x264>
 80013b4:	464a      	mov	r2, r9
 80013b6:	4302      	orrs	r2, r0
 80013b8:	d100      	bne.n	80013bc <__aeabi_dadd+0x218>
 80013ba:	e17d      	b.n	80016b8 <__aeabi_dadd+0x514>
 80013bc:	1e7a      	subs	r2, r7, #1
 80013be:	2f01      	cmp	r7, #1
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dadd+0x220>
 80013c2:	e0e0      	b.n	8001586 <__aeabi_dadd+0x3e2>
 80013c4:	4c52      	ldr	r4, [pc, #328]	; (8001510 <__aeabi_dadd+0x36c>)
 80013c6:	42a7      	cmp	r7, r4
 80013c8:	d100      	bne.n	80013cc <__aeabi_dadd+0x228>
 80013ca:	e166      	b.n	800169a <__aeabi_dadd+0x4f6>
 80013cc:	0017      	movs	r7, r2
 80013ce:	e7b2      	b.n	8001336 <__aeabi_dadd+0x192>
 80013d0:	0010      	movs	r0, r2
 80013d2:	3b1f      	subs	r3, #31
 80013d4:	40d8      	lsrs	r0, r3
 80013d6:	2920      	cmp	r1, #32
 80013d8:	d003      	beq.n	80013e2 <__aeabi_dadd+0x23e>
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	1a5b      	subs	r3, r3, r1
 80013de:	409a      	lsls	r2, r3
 80013e0:	4314      	orrs	r4, r2
 80013e2:	1e63      	subs	r3, r4, #1
 80013e4:	419c      	sbcs	r4, r3
 80013e6:	2300      	movs	r3, #0
 80013e8:	2600      	movs	r6, #0
 80013ea:	469a      	mov	sl, r3
 80013ec:	4304      	orrs	r4, r0
 80013ee:	0763      	lsls	r3, r4, #29
 80013f0:	d000      	beq.n	80013f4 <__aeabi_dadd+0x250>
 80013f2:	e755      	b.n	80012a0 <__aeabi_dadd+0xfc>
 80013f4:	4652      	mov	r2, sl
 80013f6:	08e3      	lsrs	r3, r4, #3
 80013f8:	0752      	lsls	r2, r2, #29
 80013fa:	4313      	orrs	r3, r2
 80013fc:	4652      	mov	r2, sl
 80013fe:	0037      	movs	r7, r6
 8001400:	08d1      	lsrs	r1, r2, #3
 8001402:	4a43      	ldr	r2, [pc, #268]	; (8001510 <__aeabi_dadd+0x36c>)
 8001404:	4297      	cmp	r7, r2
 8001406:	d01f      	beq.n	8001448 <__aeabi_dadd+0x2a4>
 8001408:	0309      	lsls	r1, r1, #12
 800140a:	057a      	lsls	r2, r7, #21
 800140c:	0b0c      	lsrs	r4, r1, #12
 800140e:	0d52      	lsrs	r2, r2, #21
 8001410:	e764      	b.n	80012dc <__aeabi_dadd+0x138>
 8001412:	4642      	mov	r2, r8
 8001414:	464c      	mov	r4, r9
 8001416:	4314      	orrs	r4, r2
 8001418:	1e62      	subs	r2, r4, #1
 800141a:	4194      	sbcs	r4, r2
 800141c:	18e4      	adds	r4, r4, r3
 800141e:	429c      	cmp	r4, r3
 8001420:	4192      	sbcs	r2, r2
 8001422:	4252      	negs	r2, r2
 8001424:	4692      	mov	sl, r2
 8001426:	448a      	add	sl, r1
 8001428:	4653      	mov	r3, sl
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	d5df      	bpl.n	80013ee <__aeabi_dadd+0x24a>
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <__aeabi_dadd+0x36c>)
 8001430:	3601      	adds	r6, #1
 8001432:	429e      	cmp	r6, r3
 8001434:	d000      	beq.n	8001438 <__aeabi_dadd+0x294>
 8001436:	e0b3      	b.n	80015a0 <__aeabi_dadd+0x3fc>
 8001438:	0032      	movs	r2, r6
 800143a:	2400      	movs	r4, #0
 800143c:	2300      	movs	r3, #0
 800143e:	e74d      	b.n	80012dc <__aeabi_dadd+0x138>
 8001440:	074a      	lsls	r2, r1, #29
 8001442:	08db      	lsrs	r3, r3, #3
 8001444:	4313      	orrs	r3, r2
 8001446:	08c9      	lsrs	r1, r1, #3
 8001448:	001a      	movs	r2, r3
 800144a:	430a      	orrs	r2, r1
 800144c:	d100      	bne.n	8001450 <__aeabi_dadd+0x2ac>
 800144e:	e200      	b.n	8001852 <__aeabi_dadd+0x6ae>
 8001450:	2480      	movs	r4, #128	; 0x80
 8001452:	0324      	lsls	r4, r4, #12
 8001454:	430c      	orrs	r4, r1
 8001456:	0324      	lsls	r4, r4, #12
 8001458:	4a2d      	ldr	r2, [pc, #180]	; (8001510 <__aeabi_dadd+0x36c>)
 800145a:	0b24      	lsrs	r4, r4, #12
 800145c:	e73e      	b.n	80012dc <__aeabi_dadd+0x138>
 800145e:	0020      	movs	r0, r4
 8001460:	f001 fdb6 	bl	8002fd0 <__clzsi2>
 8001464:	0003      	movs	r3, r0
 8001466:	3318      	adds	r3, #24
 8001468:	2b1f      	cmp	r3, #31
 800146a:	dc00      	bgt.n	800146e <__aeabi_dadd+0x2ca>
 800146c:	e6f7      	b.n	800125e <__aeabi_dadd+0xba>
 800146e:	0022      	movs	r2, r4
 8001470:	3808      	subs	r0, #8
 8001472:	4082      	lsls	r2, r0
 8001474:	2400      	movs	r4, #0
 8001476:	42b3      	cmp	r3, r6
 8001478:	db00      	blt.n	800147c <__aeabi_dadd+0x2d8>
 800147a:	e6fc      	b.n	8001276 <__aeabi_dadd+0xd2>
 800147c:	1af6      	subs	r6, r6, r3
 800147e:	4b25      	ldr	r3, [pc, #148]	; (8001514 <__aeabi_dadd+0x370>)
 8001480:	401a      	ands	r2, r3
 8001482:	4692      	mov	sl, r2
 8001484:	e70a      	b.n	800129c <__aeabi_dadd+0xf8>
 8001486:	2f00      	cmp	r7, #0
 8001488:	d02b      	beq.n	80014e2 <__aeabi_dadd+0x33e>
 800148a:	1b97      	subs	r7, r2, r6
 800148c:	2e00      	cmp	r6, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x2ee>
 8001490:	e0b8      	b.n	8001604 <__aeabi_dadd+0x460>
 8001492:	4c1f      	ldr	r4, [pc, #124]	; (8001510 <__aeabi_dadd+0x36c>)
 8001494:	42a2      	cmp	r2, r4
 8001496:	d100      	bne.n	800149a <__aeabi_dadd+0x2f6>
 8001498:	e11c      	b.n	80016d4 <__aeabi_dadd+0x530>
 800149a:	2480      	movs	r4, #128	; 0x80
 800149c:	0424      	lsls	r4, r4, #16
 800149e:	4321      	orrs	r1, r4
 80014a0:	2f38      	cmp	r7, #56	; 0x38
 80014a2:	dd00      	ble.n	80014a6 <__aeabi_dadd+0x302>
 80014a4:	e11e      	b.n	80016e4 <__aeabi_dadd+0x540>
 80014a6:	2f1f      	cmp	r7, #31
 80014a8:	dd00      	ble.n	80014ac <__aeabi_dadd+0x308>
 80014aa:	e19e      	b.n	80017ea <__aeabi_dadd+0x646>
 80014ac:	2620      	movs	r6, #32
 80014ae:	000c      	movs	r4, r1
 80014b0:	1bf6      	subs	r6, r6, r7
 80014b2:	0018      	movs	r0, r3
 80014b4:	40b3      	lsls	r3, r6
 80014b6:	40b4      	lsls	r4, r6
 80014b8:	40f8      	lsrs	r0, r7
 80014ba:	1e5e      	subs	r6, r3, #1
 80014bc:	41b3      	sbcs	r3, r6
 80014be:	40f9      	lsrs	r1, r7
 80014c0:	4304      	orrs	r4, r0
 80014c2:	431c      	orrs	r4, r3
 80014c4:	4489      	add	r9, r1
 80014c6:	4444      	add	r4, r8
 80014c8:	4544      	cmp	r4, r8
 80014ca:	419b      	sbcs	r3, r3
 80014cc:	425b      	negs	r3, r3
 80014ce:	444b      	add	r3, r9
 80014d0:	469a      	mov	sl, r3
 80014d2:	0016      	movs	r6, r2
 80014d4:	e7a8      	b.n	8001428 <__aeabi_dadd+0x284>
 80014d6:	4642      	mov	r2, r8
 80014d8:	464c      	mov	r4, r9
 80014da:	4314      	orrs	r4, r2
 80014dc:	1e62      	subs	r2, r4, #1
 80014de:	4194      	sbcs	r4, r2
 80014e0:	e6a6      	b.n	8001230 <__aeabi_dadd+0x8c>
 80014e2:	4c0d      	ldr	r4, [pc, #52]	; (8001518 <__aeabi_dadd+0x374>)
 80014e4:	1c72      	adds	r2, r6, #1
 80014e6:	4222      	tst	r2, r4
 80014e8:	d000      	beq.n	80014ec <__aeabi_dadd+0x348>
 80014ea:	e0a8      	b.n	800163e <__aeabi_dadd+0x49a>
 80014ec:	000a      	movs	r2, r1
 80014ee:	431a      	orrs	r2, r3
 80014f0:	2e00      	cmp	r6, #0
 80014f2:	d000      	beq.n	80014f6 <__aeabi_dadd+0x352>
 80014f4:	e10a      	b.n	800170c <__aeabi_dadd+0x568>
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	d100      	bne.n	80014fc <__aeabi_dadd+0x358>
 80014fa:	e15e      	b.n	80017ba <__aeabi_dadd+0x616>
 80014fc:	464a      	mov	r2, r9
 80014fe:	4302      	orrs	r2, r0
 8001500:	d000      	beq.n	8001504 <__aeabi_dadd+0x360>
 8001502:	e161      	b.n	80017c8 <__aeabi_dadd+0x624>
 8001504:	074a      	lsls	r2, r1, #29
 8001506:	08db      	lsrs	r3, r3, #3
 8001508:	4313      	orrs	r3, r2
 800150a:	08c9      	lsrs	r1, r1, #3
 800150c:	e77c      	b.n	8001408 <__aeabi_dadd+0x264>
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	000007ff 	.word	0x000007ff
 8001514:	ff7fffff 	.word	0xff7fffff
 8001518:	000007fe 	.word	0x000007fe
 800151c:	4ccf      	ldr	r4, [pc, #828]	; (800185c <__aeabi_dadd+0x6b8>)
 800151e:	42a2      	cmp	r2, r4
 8001520:	d100      	bne.n	8001524 <__aeabi_dadd+0x380>
 8001522:	e0ce      	b.n	80016c2 <__aeabi_dadd+0x51e>
 8001524:	2480      	movs	r4, #128	; 0x80
 8001526:	0424      	lsls	r4, r4, #16
 8001528:	4321      	orrs	r1, r4
 800152a:	2f38      	cmp	r7, #56	; 0x38
 800152c:	dc5b      	bgt.n	80015e6 <__aeabi_dadd+0x442>
 800152e:	2f1f      	cmp	r7, #31
 8001530:	dd00      	ble.n	8001534 <__aeabi_dadd+0x390>
 8001532:	e0dc      	b.n	80016ee <__aeabi_dadd+0x54a>
 8001534:	2520      	movs	r5, #32
 8001536:	000c      	movs	r4, r1
 8001538:	1bed      	subs	r5, r5, r7
 800153a:	001e      	movs	r6, r3
 800153c:	40ab      	lsls	r3, r5
 800153e:	40ac      	lsls	r4, r5
 8001540:	40fe      	lsrs	r6, r7
 8001542:	1e5d      	subs	r5, r3, #1
 8001544:	41ab      	sbcs	r3, r5
 8001546:	4334      	orrs	r4, r6
 8001548:	40f9      	lsrs	r1, r7
 800154a:	431c      	orrs	r4, r3
 800154c:	464b      	mov	r3, r9
 800154e:	1a5b      	subs	r3, r3, r1
 8001550:	4699      	mov	r9, r3
 8001552:	e04c      	b.n	80015ee <__aeabi_dadd+0x44a>
 8001554:	464a      	mov	r2, r9
 8001556:	1a1c      	subs	r4, r3, r0
 8001558:	1a88      	subs	r0, r1, r2
 800155a:	42a3      	cmp	r3, r4
 800155c:	4192      	sbcs	r2, r2
 800155e:	4252      	negs	r2, r2
 8001560:	4692      	mov	sl, r2
 8001562:	0002      	movs	r2, r0
 8001564:	4650      	mov	r0, sl
 8001566:	1a12      	subs	r2, r2, r0
 8001568:	4692      	mov	sl, r2
 800156a:	0212      	lsls	r2, r2, #8
 800156c:	d478      	bmi.n	8001660 <__aeabi_dadd+0x4bc>
 800156e:	4653      	mov	r3, sl
 8001570:	4323      	orrs	r3, r4
 8001572:	d000      	beq.n	8001576 <__aeabi_dadd+0x3d2>
 8001574:	e66a      	b.n	800124c <__aeabi_dadd+0xa8>
 8001576:	2100      	movs	r1, #0
 8001578:	2500      	movs	r5, #0
 800157a:	e745      	b.n	8001408 <__aeabi_dadd+0x264>
 800157c:	074a      	lsls	r2, r1, #29
 800157e:	08db      	lsrs	r3, r3, #3
 8001580:	4313      	orrs	r3, r2
 8001582:	08c9      	lsrs	r1, r1, #3
 8001584:	e73d      	b.n	8001402 <__aeabi_dadd+0x25e>
 8001586:	181c      	adds	r4, r3, r0
 8001588:	429c      	cmp	r4, r3
 800158a:	419b      	sbcs	r3, r3
 800158c:	4449      	add	r1, r9
 800158e:	468a      	mov	sl, r1
 8001590:	425b      	negs	r3, r3
 8001592:	449a      	add	sl, r3
 8001594:	4653      	mov	r3, sl
 8001596:	2601      	movs	r6, #1
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	d400      	bmi.n	800159e <__aeabi_dadd+0x3fa>
 800159c:	e727      	b.n	80013ee <__aeabi_dadd+0x24a>
 800159e:	2602      	movs	r6, #2
 80015a0:	4652      	mov	r2, sl
 80015a2:	4baf      	ldr	r3, [pc, #700]	; (8001860 <__aeabi_dadd+0x6bc>)
 80015a4:	2101      	movs	r1, #1
 80015a6:	401a      	ands	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	4021      	ands	r1, r4
 80015ac:	0862      	lsrs	r2, r4, #1
 80015ae:	430a      	orrs	r2, r1
 80015b0:	07dc      	lsls	r4, r3, #31
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	469a      	mov	sl, r3
 80015b6:	4314      	orrs	r4, r2
 80015b8:	e670      	b.n	800129c <__aeabi_dadd+0xf8>
 80015ba:	003a      	movs	r2, r7
 80015bc:	464c      	mov	r4, r9
 80015be:	3a20      	subs	r2, #32
 80015c0:	40d4      	lsrs	r4, r2
 80015c2:	46a4      	mov	ip, r4
 80015c4:	2f20      	cmp	r7, #32
 80015c6:	d007      	beq.n	80015d8 <__aeabi_dadd+0x434>
 80015c8:	2240      	movs	r2, #64	; 0x40
 80015ca:	4648      	mov	r0, r9
 80015cc:	1bd2      	subs	r2, r2, r7
 80015ce:	4090      	lsls	r0, r2
 80015d0:	0002      	movs	r2, r0
 80015d2:	4640      	mov	r0, r8
 80015d4:	4310      	orrs	r0, r2
 80015d6:	4680      	mov	r8, r0
 80015d8:	4640      	mov	r0, r8
 80015da:	1e42      	subs	r2, r0, #1
 80015dc:	4190      	sbcs	r0, r2
 80015de:	4662      	mov	r2, ip
 80015e0:	0004      	movs	r4, r0
 80015e2:	4314      	orrs	r4, r2
 80015e4:	e624      	b.n	8001230 <__aeabi_dadd+0x8c>
 80015e6:	4319      	orrs	r1, r3
 80015e8:	000c      	movs	r4, r1
 80015ea:	1e63      	subs	r3, r4, #1
 80015ec:	419c      	sbcs	r4, r3
 80015ee:	4643      	mov	r3, r8
 80015f0:	1b1c      	subs	r4, r3, r4
 80015f2:	45a0      	cmp	r8, r4
 80015f4:	419b      	sbcs	r3, r3
 80015f6:	4649      	mov	r1, r9
 80015f8:	425b      	negs	r3, r3
 80015fa:	1acb      	subs	r3, r1, r3
 80015fc:	469a      	mov	sl, r3
 80015fe:	4665      	mov	r5, ip
 8001600:	0016      	movs	r6, r2
 8001602:	e61b      	b.n	800123c <__aeabi_dadd+0x98>
 8001604:	000c      	movs	r4, r1
 8001606:	431c      	orrs	r4, r3
 8001608:	d100      	bne.n	800160c <__aeabi_dadd+0x468>
 800160a:	e0c7      	b.n	800179c <__aeabi_dadd+0x5f8>
 800160c:	1e7c      	subs	r4, r7, #1
 800160e:	2f01      	cmp	r7, #1
 8001610:	d100      	bne.n	8001614 <__aeabi_dadd+0x470>
 8001612:	e0f9      	b.n	8001808 <__aeabi_dadd+0x664>
 8001614:	4e91      	ldr	r6, [pc, #580]	; (800185c <__aeabi_dadd+0x6b8>)
 8001616:	42b7      	cmp	r7, r6
 8001618:	d05c      	beq.n	80016d4 <__aeabi_dadd+0x530>
 800161a:	0027      	movs	r7, r4
 800161c:	e740      	b.n	80014a0 <__aeabi_dadd+0x2fc>
 800161e:	2220      	movs	r2, #32
 8001620:	464c      	mov	r4, r9
 8001622:	4640      	mov	r0, r8
 8001624:	1bd2      	subs	r2, r2, r7
 8001626:	4094      	lsls	r4, r2
 8001628:	40f8      	lsrs	r0, r7
 800162a:	4304      	orrs	r4, r0
 800162c:	4640      	mov	r0, r8
 800162e:	4090      	lsls	r0, r2
 8001630:	1e42      	subs	r2, r0, #1
 8001632:	4190      	sbcs	r0, r2
 8001634:	464a      	mov	r2, r9
 8001636:	40fa      	lsrs	r2, r7
 8001638:	4304      	orrs	r4, r0
 800163a:	1889      	adds	r1, r1, r2
 800163c:	e6ee      	b.n	800141c <__aeabi_dadd+0x278>
 800163e:	4c87      	ldr	r4, [pc, #540]	; (800185c <__aeabi_dadd+0x6b8>)
 8001640:	42a2      	cmp	r2, r4
 8001642:	d100      	bne.n	8001646 <__aeabi_dadd+0x4a2>
 8001644:	e6f9      	b.n	800143a <__aeabi_dadd+0x296>
 8001646:	1818      	adds	r0, r3, r0
 8001648:	4298      	cmp	r0, r3
 800164a:	419b      	sbcs	r3, r3
 800164c:	4449      	add	r1, r9
 800164e:	425b      	negs	r3, r3
 8001650:	18cb      	adds	r3, r1, r3
 8001652:	07dc      	lsls	r4, r3, #31
 8001654:	0840      	lsrs	r0, r0, #1
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	469a      	mov	sl, r3
 800165a:	0016      	movs	r6, r2
 800165c:	4304      	orrs	r4, r0
 800165e:	e6c6      	b.n	80013ee <__aeabi_dadd+0x24a>
 8001660:	4642      	mov	r2, r8
 8001662:	1ad4      	subs	r4, r2, r3
 8001664:	45a0      	cmp	r8, r4
 8001666:	4180      	sbcs	r0, r0
 8001668:	464b      	mov	r3, r9
 800166a:	4240      	negs	r0, r0
 800166c:	1a59      	subs	r1, r3, r1
 800166e:	1a0b      	subs	r3, r1, r0
 8001670:	469a      	mov	sl, r3
 8001672:	4665      	mov	r5, ip
 8001674:	e5ea      	b.n	800124c <__aeabi_dadd+0xa8>
 8001676:	464b      	mov	r3, r9
 8001678:	464a      	mov	r2, r9
 800167a:	08c0      	lsrs	r0, r0, #3
 800167c:	075b      	lsls	r3, r3, #29
 800167e:	4665      	mov	r5, ip
 8001680:	4303      	orrs	r3, r0
 8001682:	08d1      	lsrs	r1, r2, #3
 8001684:	e6bd      	b.n	8001402 <__aeabi_dadd+0x25e>
 8001686:	2a00      	cmp	r2, #0
 8001688:	d000      	beq.n	800168c <__aeabi_dadd+0x4e8>
 800168a:	e08e      	b.n	80017aa <__aeabi_dadd+0x606>
 800168c:	464b      	mov	r3, r9
 800168e:	4303      	orrs	r3, r0
 8001690:	d117      	bne.n	80016c2 <__aeabi_dadd+0x51e>
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	2500      	movs	r5, #0
 8001696:	0309      	lsls	r1, r1, #12
 8001698:	e6da      	b.n	8001450 <__aeabi_dadd+0x2ac>
 800169a:	074a      	lsls	r2, r1, #29
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	4313      	orrs	r3, r2
 80016a0:	08c9      	lsrs	r1, r1, #3
 80016a2:	e6d1      	b.n	8001448 <__aeabi_dadd+0x2a4>
 80016a4:	1a1c      	subs	r4, r3, r0
 80016a6:	464a      	mov	r2, r9
 80016a8:	42a3      	cmp	r3, r4
 80016aa:	419b      	sbcs	r3, r3
 80016ac:	1a89      	subs	r1, r1, r2
 80016ae:	425b      	negs	r3, r3
 80016b0:	1acb      	subs	r3, r1, r3
 80016b2:	469a      	mov	sl, r3
 80016b4:	2601      	movs	r6, #1
 80016b6:	e5c1      	b.n	800123c <__aeabi_dadd+0x98>
 80016b8:	074a      	lsls	r2, r1, #29
 80016ba:	08db      	lsrs	r3, r3, #3
 80016bc:	4313      	orrs	r3, r2
 80016be:	08c9      	lsrs	r1, r1, #3
 80016c0:	e69f      	b.n	8001402 <__aeabi_dadd+0x25e>
 80016c2:	4643      	mov	r3, r8
 80016c4:	08d8      	lsrs	r0, r3, #3
 80016c6:	464b      	mov	r3, r9
 80016c8:	464a      	mov	r2, r9
 80016ca:	075b      	lsls	r3, r3, #29
 80016cc:	4665      	mov	r5, ip
 80016ce:	4303      	orrs	r3, r0
 80016d0:	08d1      	lsrs	r1, r2, #3
 80016d2:	e6b9      	b.n	8001448 <__aeabi_dadd+0x2a4>
 80016d4:	4643      	mov	r3, r8
 80016d6:	08d8      	lsrs	r0, r3, #3
 80016d8:	464b      	mov	r3, r9
 80016da:	464a      	mov	r2, r9
 80016dc:	075b      	lsls	r3, r3, #29
 80016de:	4303      	orrs	r3, r0
 80016e0:	08d1      	lsrs	r1, r2, #3
 80016e2:	e6b1      	b.n	8001448 <__aeabi_dadd+0x2a4>
 80016e4:	4319      	orrs	r1, r3
 80016e6:	000c      	movs	r4, r1
 80016e8:	1e63      	subs	r3, r4, #1
 80016ea:	419c      	sbcs	r4, r3
 80016ec:	e6eb      	b.n	80014c6 <__aeabi_dadd+0x322>
 80016ee:	003c      	movs	r4, r7
 80016f0:	000d      	movs	r5, r1
 80016f2:	3c20      	subs	r4, #32
 80016f4:	40e5      	lsrs	r5, r4
 80016f6:	2f20      	cmp	r7, #32
 80016f8:	d003      	beq.n	8001702 <__aeabi_dadd+0x55e>
 80016fa:	2440      	movs	r4, #64	; 0x40
 80016fc:	1be4      	subs	r4, r4, r7
 80016fe:	40a1      	lsls	r1, r4
 8001700:	430b      	orrs	r3, r1
 8001702:	001c      	movs	r4, r3
 8001704:	1e63      	subs	r3, r4, #1
 8001706:	419c      	sbcs	r4, r3
 8001708:	432c      	orrs	r4, r5
 800170a:	e770      	b.n	80015ee <__aeabi_dadd+0x44a>
 800170c:	2a00      	cmp	r2, #0
 800170e:	d0e1      	beq.n	80016d4 <__aeabi_dadd+0x530>
 8001710:	464a      	mov	r2, r9
 8001712:	4302      	orrs	r2, r0
 8001714:	d0c1      	beq.n	800169a <__aeabi_dadd+0x4f6>
 8001716:	074a      	lsls	r2, r1, #29
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	4313      	orrs	r3, r2
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	08c9      	lsrs	r1, r1, #3
 8001720:	0312      	lsls	r2, r2, #12
 8001722:	4211      	tst	r1, r2
 8001724:	d008      	beq.n	8001738 <__aeabi_dadd+0x594>
 8001726:	4648      	mov	r0, r9
 8001728:	08c4      	lsrs	r4, r0, #3
 800172a:	4214      	tst	r4, r2
 800172c:	d104      	bne.n	8001738 <__aeabi_dadd+0x594>
 800172e:	4643      	mov	r3, r8
 8001730:	0021      	movs	r1, r4
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	0742      	lsls	r2, r0, #29
 8001736:	4313      	orrs	r3, r2
 8001738:	0f5a      	lsrs	r2, r3, #29
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	0752      	lsls	r2, r2, #29
 800173e:	08db      	lsrs	r3, r3, #3
 8001740:	4313      	orrs	r3, r2
 8001742:	e681      	b.n	8001448 <__aeabi_dadd+0x2a4>
 8001744:	464b      	mov	r3, r9
 8001746:	4303      	orrs	r3, r0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x5a8>
 800174a:	e714      	b.n	8001576 <__aeabi_dadd+0x3d2>
 800174c:	464b      	mov	r3, r9
 800174e:	464a      	mov	r2, r9
 8001750:	08c0      	lsrs	r0, r0, #3
 8001752:	075b      	lsls	r3, r3, #29
 8001754:	4665      	mov	r5, ip
 8001756:	4303      	orrs	r3, r0
 8001758:	08d1      	lsrs	r1, r2, #3
 800175a:	e655      	b.n	8001408 <__aeabi_dadd+0x264>
 800175c:	1ac4      	subs	r4, r0, r3
 800175e:	45a0      	cmp	r8, r4
 8001760:	4180      	sbcs	r0, r0
 8001762:	464b      	mov	r3, r9
 8001764:	4240      	negs	r0, r0
 8001766:	1a59      	subs	r1, r3, r1
 8001768:	1a0b      	subs	r3, r1, r0
 800176a:	469a      	mov	sl, r3
 800176c:	4665      	mov	r5, ip
 800176e:	2601      	movs	r6, #1
 8001770:	e564      	b.n	800123c <__aeabi_dadd+0x98>
 8001772:	1a1c      	subs	r4, r3, r0
 8001774:	464a      	mov	r2, r9
 8001776:	42a3      	cmp	r3, r4
 8001778:	4180      	sbcs	r0, r0
 800177a:	1a8a      	subs	r2, r1, r2
 800177c:	4240      	negs	r0, r0
 800177e:	1a12      	subs	r2, r2, r0
 8001780:	4692      	mov	sl, r2
 8001782:	0212      	lsls	r2, r2, #8
 8001784:	d549      	bpl.n	800181a <__aeabi_dadd+0x676>
 8001786:	4642      	mov	r2, r8
 8001788:	1ad4      	subs	r4, r2, r3
 800178a:	45a0      	cmp	r8, r4
 800178c:	4180      	sbcs	r0, r0
 800178e:	464b      	mov	r3, r9
 8001790:	4240      	negs	r0, r0
 8001792:	1a59      	subs	r1, r3, r1
 8001794:	1a0b      	subs	r3, r1, r0
 8001796:	469a      	mov	sl, r3
 8001798:	4665      	mov	r5, ip
 800179a:	e57f      	b.n	800129c <__aeabi_dadd+0xf8>
 800179c:	464b      	mov	r3, r9
 800179e:	464a      	mov	r2, r9
 80017a0:	08c0      	lsrs	r0, r0, #3
 80017a2:	075b      	lsls	r3, r3, #29
 80017a4:	4303      	orrs	r3, r0
 80017a6:	08d1      	lsrs	r1, r2, #3
 80017a8:	e62b      	b.n	8001402 <__aeabi_dadd+0x25e>
 80017aa:	464a      	mov	r2, r9
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	4302      	orrs	r2, r0
 80017b0:	d138      	bne.n	8001824 <__aeabi_dadd+0x680>
 80017b2:	074a      	lsls	r2, r1, #29
 80017b4:	4313      	orrs	r3, r2
 80017b6:	08c9      	lsrs	r1, r1, #3
 80017b8:	e646      	b.n	8001448 <__aeabi_dadd+0x2a4>
 80017ba:	464b      	mov	r3, r9
 80017bc:	464a      	mov	r2, r9
 80017be:	08c0      	lsrs	r0, r0, #3
 80017c0:	075b      	lsls	r3, r3, #29
 80017c2:	4303      	orrs	r3, r0
 80017c4:	08d1      	lsrs	r1, r2, #3
 80017c6:	e61f      	b.n	8001408 <__aeabi_dadd+0x264>
 80017c8:	181c      	adds	r4, r3, r0
 80017ca:	429c      	cmp	r4, r3
 80017cc:	419b      	sbcs	r3, r3
 80017ce:	4449      	add	r1, r9
 80017d0:	468a      	mov	sl, r1
 80017d2:	425b      	negs	r3, r3
 80017d4:	449a      	add	sl, r3
 80017d6:	4653      	mov	r3, sl
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	d400      	bmi.n	80017de <__aeabi_dadd+0x63a>
 80017dc:	e607      	b.n	80013ee <__aeabi_dadd+0x24a>
 80017de:	4652      	mov	r2, sl
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <__aeabi_dadd+0x6bc>)
 80017e2:	2601      	movs	r6, #1
 80017e4:	401a      	ands	r2, r3
 80017e6:	4692      	mov	sl, r2
 80017e8:	e601      	b.n	80013ee <__aeabi_dadd+0x24a>
 80017ea:	003c      	movs	r4, r7
 80017ec:	000e      	movs	r6, r1
 80017ee:	3c20      	subs	r4, #32
 80017f0:	40e6      	lsrs	r6, r4
 80017f2:	2f20      	cmp	r7, #32
 80017f4:	d003      	beq.n	80017fe <__aeabi_dadd+0x65a>
 80017f6:	2440      	movs	r4, #64	; 0x40
 80017f8:	1be4      	subs	r4, r4, r7
 80017fa:	40a1      	lsls	r1, r4
 80017fc:	430b      	orrs	r3, r1
 80017fe:	001c      	movs	r4, r3
 8001800:	1e63      	subs	r3, r4, #1
 8001802:	419c      	sbcs	r4, r3
 8001804:	4334      	orrs	r4, r6
 8001806:	e65e      	b.n	80014c6 <__aeabi_dadd+0x322>
 8001808:	4443      	add	r3, r8
 800180a:	4283      	cmp	r3, r0
 800180c:	4180      	sbcs	r0, r0
 800180e:	4449      	add	r1, r9
 8001810:	468a      	mov	sl, r1
 8001812:	4240      	negs	r0, r0
 8001814:	001c      	movs	r4, r3
 8001816:	4482      	add	sl, r0
 8001818:	e6bc      	b.n	8001594 <__aeabi_dadd+0x3f0>
 800181a:	4653      	mov	r3, sl
 800181c:	4323      	orrs	r3, r4
 800181e:	d100      	bne.n	8001822 <__aeabi_dadd+0x67e>
 8001820:	e6a9      	b.n	8001576 <__aeabi_dadd+0x3d2>
 8001822:	e5e4      	b.n	80013ee <__aeabi_dadd+0x24a>
 8001824:	074a      	lsls	r2, r1, #29
 8001826:	4313      	orrs	r3, r2
 8001828:	2280      	movs	r2, #128	; 0x80
 800182a:	08c9      	lsrs	r1, r1, #3
 800182c:	0312      	lsls	r2, r2, #12
 800182e:	4211      	tst	r1, r2
 8001830:	d009      	beq.n	8001846 <__aeabi_dadd+0x6a2>
 8001832:	4648      	mov	r0, r9
 8001834:	08c4      	lsrs	r4, r0, #3
 8001836:	4214      	tst	r4, r2
 8001838:	d105      	bne.n	8001846 <__aeabi_dadd+0x6a2>
 800183a:	4643      	mov	r3, r8
 800183c:	4665      	mov	r5, ip
 800183e:	0021      	movs	r1, r4
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	0742      	lsls	r2, r0, #29
 8001844:	4313      	orrs	r3, r2
 8001846:	0f5a      	lsrs	r2, r3, #29
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	08db      	lsrs	r3, r3, #3
 800184c:	0752      	lsls	r2, r2, #29
 800184e:	4313      	orrs	r3, r2
 8001850:	e5fa      	b.n	8001448 <__aeabi_dadd+0x2a4>
 8001852:	2300      	movs	r3, #0
 8001854:	4a01      	ldr	r2, [pc, #4]	; (800185c <__aeabi_dadd+0x6b8>)
 8001856:	001c      	movs	r4, r3
 8001858:	e540      	b.n	80012dc <__aeabi_dadd+0x138>
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	000007ff 	.word	0x000007ff
 8001860:	ff7fffff 	.word	0xff7fffff

08001864 <__aeabi_ddiv>:
 8001864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001866:	4657      	mov	r7, sl
 8001868:	464e      	mov	r6, r9
 800186a:	4645      	mov	r5, r8
 800186c:	46de      	mov	lr, fp
 800186e:	b5e0      	push	{r5, r6, r7, lr}
 8001870:	030c      	lsls	r4, r1, #12
 8001872:	001f      	movs	r7, r3
 8001874:	004b      	lsls	r3, r1, #1
 8001876:	4681      	mov	r9, r0
 8001878:	4692      	mov	sl, r2
 800187a:	0005      	movs	r5, r0
 800187c:	b085      	sub	sp, #20
 800187e:	0b24      	lsrs	r4, r4, #12
 8001880:	0d5b      	lsrs	r3, r3, #21
 8001882:	0fce      	lsrs	r6, r1, #31
 8001884:	2b00      	cmp	r3, #0
 8001886:	d100      	bne.n	800188a <__aeabi_ddiv+0x26>
 8001888:	e152      	b.n	8001b30 <__aeabi_ddiv+0x2cc>
 800188a:	4ad2      	ldr	r2, [pc, #840]	; (8001bd4 <__aeabi_ddiv+0x370>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d100      	bne.n	8001892 <__aeabi_ddiv+0x2e>
 8001890:	e16e      	b.n	8001b70 <__aeabi_ddiv+0x30c>
 8001892:	0f42      	lsrs	r2, r0, #29
 8001894:	00e4      	lsls	r4, r4, #3
 8001896:	4314      	orrs	r4, r2
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	0412      	lsls	r2, r2, #16
 800189c:	4322      	orrs	r2, r4
 800189e:	4690      	mov	r8, r2
 80018a0:	4acd      	ldr	r2, [pc, #820]	; (8001bd8 <__aeabi_ddiv+0x374>)
 80018a2:	00c5      	lsls	r5, r0, #3
 80018a4:	4693      	mov	fp, r2
 80018a6:	449b      	add	fp, r3
 80018a8:	2300      	movs	r3, #0
 80018aa:	4699      	mov	r9, r3
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	033c      	lsls	r4, r7, #12
 80018b0:	007b      	lsls	r3, r7, #1
 80018b2:	4650      	mov	r0, sl
 80018b4:	0b24      	lsrs	r4, r4, #12
 80018b6:	0d5b      	lsrs	r3, r3, #21
 80018b8:	0fff      	lsrs	r7, r7, #31
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d100      	bne.n	80018c0 <__aeabi_ddiv+0x5c>
 80018be:	e11a      	b.n	8001af6 <__aeabi_ddiv+0x292>
 80018c0:	4ac4      	ldr	r2, [pc, #784]	; (8001bd4 <__aeabi_ddiv+0x370>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d100      	bne.n	80018c8 <__aeabi_ddiv+0x64>
 80018c6:	e15e      	b.n	8001b86 <__aeabi_ddiv+0x322>
 80018c8:	0f42      	lsrs	r2, r0, #29
 80018ca:	00e4      	lsls	r4, r4, #3
 80018cc:	4322      	orrs	r2, r4
 80018ce:	2480      	movs	r4, #128	; 0x80
 80018d0:	0424      	lsls	r4, r4, #16
 80018d2:	4314      	orrs	r4, r2
 80018d4:	4ac0      	ldr	r2, [pc, #768]	; (8001bd8 <__aeabi_ddiv+0x374>)
 80018d6:	00c1      	lsls	r1, r0, #3
 80018d8:	4694      	mov	ip, r2
 80018da:	465a      	mov	r2, fp
 80018dc:	4463      	add	r3, ip
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	469b      	mov	fp, r3
 80018e2:	2000      	movs	r0, #0
 80018e4:	0033      	movs	r3, r6
 80018e6:	407b      	eors	r3, r7
 80018e8:	469a      	mov	sl, r3
 80018ea:	464b      	mov	r3, r9
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d827      	bhi.n	8001940 <__aeabi_ddiv+0xdc>
 80018f0:	4aba      	ldr	r2, [pc, #744]	; (8001bdc <__aeabi_ddiv+0x378>)
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	58d3      	ldr	r3, [r2, r3]
 80018f6:	469f      	mov	pc, r3
 80018f8:	46b2      	mov	sl, r6
 80018fa:	9b00      	ldr	r3, [sp, #0]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d016      	beq.n	800192e <__aeabi_ddiv+0xca>
 8001900:	2b03      	cmp	r3, #3
 8001902:	d100      	bne.n	8001906 <__aeabi_ddiv+0xa2>
 8001904:	e287      	b.n	8001e16 <__aeabi_ddiv+0x5b2>
 8001906:	2b01      	cmp	r3, #1
 8001908:	d000      	beq.n	800190c <__aeabi_ddiv+0xa8>
 800190a:	e0d5      	b.n	8001ab8 <__aeabi_ddiv+0x254>
 800190c:	2300      	movs	r3, #0
 800190e:	2200      	movs	r2, #0
 8001910:	2500      	movs	r5, #0
 8001912:	051b      	lsls	r3, r3, #20
 8001914:	4313      	orrs	r3, r2
 8001916:	4652      	mov	r2, sl
 8001918:	07d2      	lsls	r2, r2, #31
 800191a:	4313      	orrs	r3, r2
 800191c:	0028      	movs	r0, r5
 800191e:	0019      	movs	r1, r3
 8001920:	b005      	add	sp, #20
 8001922:	bcf0      	pop	{r4, r5, r6, r7}
 8001924:	46bb      	mov	fp, r7
 8001926:	46b2      	mov	sl, r6
 8001928:	46a9      	mov	r9, r5
 800192a:	46a0      	mov	r8, r4
 800192c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192e:	2200      	movs	r2, #0
 8001930:	2500      	movs	r5, #0
 8001932:	4ba8      	ldr	r3, [pc, #672]	; (8001bd4 <__aeabi_ddiv+0x370>)
 8001934:	e7ed      	b.n	8001912 <__aeabi_ddiv+0xae>
 8001936:	46ba      	mov	sl, r7
 8001938:	46a0      	mov	r8, r4
 800193a:	000d      	movs	r5, r1
 800193c:	9000      	str	r0, [sp, #0]
 800193e:	e7dc      	b.n	80018fa <__aeabi_ddiv+0x96>
 8001940:	4544      	cmp	r4, r8
 8001942:	d200      	bcs.n	8001946 <__aeabi_ddiv+0xe2>
 8001944:	e1c4      	b.n	8001cd0 <__aeabi_ddiv+0x46c>
 8001946:	d100      	bne.n	800194a <__aeabi_ddiv+0xe6>
 8001948:	e1bf      	b.n	8001cca <__aeabi_ddiv+0x466>
 800194a:	2301      	movs	r3, #1
 800194c:	425b      	negs	r3, r3
 800194e:	469c      	mov	ip, r3
 8001950:	002e      	movs	r6, r5
 8001952:	4640      	mov	r0, r8
 8001954:	2500      	movs	r5, #0
 8001956:	44e3      	add	fp, ip
 8001958:	0223      	lsls	r3, r4, #8
 800195a:	0e0c      	lsrs	r4, r1, #24
 800195c:	431c      	orrs	r4, r3
 800195e:	0c1b      	lsrs	r3, r3, #16
 8001960:	4699      	mov	r9, r3
 8001962:	0423      	lsls	r3, r4, #16
 8001964:	020a      	lsls	r2, r1, #8
 8001966:	0c1f      	lsrs	r7, r3, #16
 8001968:	4649      	mov	r1, r9
 800196a:	9200      	str	r2, [sp, #0]
 800196c:	9701      	str	r7, [sp, #4]
 800196e:	f7fe fc6d 	bl	800024c <__aeabi_uidivmod>
 8001972:	0002      	movs	r2, r0
 8001974:	437a      	muls	r2, r7
 8001976:	040b      	lsls	r3, r1, #16
 8001978:	0c31      	lsrs	r1, r6, #16
 800197a:	4680      	mov	r8, r0
 800197c:	4319      	orrs	r1, r3
 800197e:	428a      	cmp	r2, r1
 8001980:	d907      	bls.n	8001992 <__aeabi_ddiv+0x12e>
 8001982:	2301      	movs	r3, #1
 8001984:	425b      	negs	r3, r3
 8001986:	469c      	mov	ip, r3
 8001988:	1909      	adds	r1, r1, r4
 800198a:	44e0      	add	r8, ip
 800198c:	428c      	cmp	r4, r1
 800198e:	d800      	bhi.n	8001992 <__aeabi_ddiv+0x12e>
 8001990:	e201      	b.n	8001d96 <__aeabi_ddiv+0x532>
 8001992:	1a88      	subs	r0, r1, r2
 8001994:	4649      	mov	r1, r9
 8001996:	f7fe fc59 	bl	800024c <__aeabi_uidivmod>
 800199a:	9a01      	ldr	r2, [sp, #4]
 800199c:	0436      	lsls	r6, r6, #16
 800199e:	4342      	muls	r2, r0
 80019a0:	0409      	lsls	r1, r1, #16
 80019a2:	0c36      	lsrs	r6, r6, #16
 80019a4:	0003      	movs	r3, r0
 80019a6:	430e      	orrs	r6, r1
 80019a8:	42b2      	cmp	r2, r6
 80019aa:	d904      	bls.n	80019b6 <__aeabi_ddiv+0x152>
 80019ac:	1936      	adds	r6, r6, r4
 80019ae:	3b01      	subs	r3, #1
 80019b0:	42b4      	cmp	r4, r6
 80019b2:	d800      	bhi.n	80019b6 <__aeabi_ddiv+0x152>
 80019b4:	e1e9      	b.n	8001d8a <__aeabi_ddiv+0x526>
 80019b6:	1ab0      	subs	r0, r6, r2
 80019b8:	4642      	mov	r2, r8
 80019ba:	9e00      	ldr	r6, [sp, #0]
 80019bc:	0412      	lsls	r2, r2, #16
 80019be:	431a      	orrs	r2, r3
 80019c0:	0c33      	lsrs	r3, r6, #16
 80019c2:	001f      	movs	r7, r3
 80019c4:	0c11      	lsrs	r1, r2, #16
 80019c6:	4690      	mov	r8, r2
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	0413      	lsls	r3, r2, #16
 80019cc:	0432      	lsls	r2, r6, #16
 80019ce:	0c16      	lsrs	r6, r2, #16
 80019d0:	0032      	movs	r2, r6
 80019d2:	0c1b      	lsrs	r3, r3, #16
 80019d4:	435a      	muls	r2, r3
 80019d6:	9603      	str	r6, [sp, #12]
 80019d8:	437b      	muls	r3, r7
 80019da:	434e      	muls	r6, r1
 80019dc:	4379      	muls	r1, r7
 80019de:	0c17      	lsrs	r7, r2, #16
 80019e0:	46bc      	mov	ip, r7
 80019e2:	199b      	adds	r3, r3, r6
 80019e4:	4463      	add	r3, ip
 80019e6:	429e      	cmp	r6, r3
 80019e8:	d903      	bls.n	80019f2 <__aeabi_ddiv+0x18e>
 80019ea:	2680      	movs	r6, #128	; 0x80
 80019ec:	0276      	lsls	r6, r6, #9
 80019ee:	46b4      	mov	ip, r6
 80019f0:	4461      	add	r1, ip
 80019f2:	0c1e      	lsrs	r6, r3, #16
 80019f4:	1871      	adds	r1, r6, r1
 80019f6:	0416      	lsls	r6, r2, #16
 80019f8:	041b      	lsls	r3, r3, #16
 80019fa:	0c36      	lsrs	r6, r6, #16
 80019fc:	199e      	adds	r6, r3, r6
 80019fe:	4288      	cmp	r0, r1
 8001a00:	d302      	bcc.n	8001a08 <__aeabi_ddiv+0x1a4>
 8001a02:	d112      	bne.n	8001a2a <__aeabi_ddiv+0x1c6>
 8001a04:	42b5      	cmp	r5, r6
 8001a06:	d210      	bcs.n	8001a2a <__aeabi_ddiv+0x1c6>
 8001a08:	4643      	mov	r3, r8
 8001a0a:	1e5a      	subs	r2, r3, #1
 8001a0c:	9b00      	ldr	r3, [sp, #0]
 8001a0e:	469c      	mov	ip, r3
 8001a10:	4465      	add	r5, ip
 8001a12:	001f      	movs	r7, r3
 8001a14:	429d      	cmp	r5, r3
 8001a16:	419b      	sbcs	r3, r3
 8001a18:	425b      	negs	r3, r3
 8001a1a:	191b      	adds	r3, r3, r4
 8001a1c:	18c0      	adds	r0, r0, r3
 8001a1e:	4284      	cmp	r4, r0
 8001a20:	d200      	bcs.n	8001a24 <__aeabi_ddiv+0x1c0>
 8001a22:	e19e      	b.n	8001d62 <__aeabi_ddiv+0x4fe>
 8001a24:	d100      	bne.n	8001a28 <__aeabi_ddiv+0x1c4>
 8001a26:	e199      	b.n	8001d5c <__aeabi_ddiv+0x4f8>
 8001a28:	4690      	mov	r8, r2
 8001a2a:	1bae      	subs	r6, r5, r6
 8001a2c:	42b5      	cmp	r5, r6
 8001a2e:	41ad      	sbcs	r5, r5
 8001a30:	1a40      	subs	r0, r0, r1
 8001a32:	426d      	negs	r5, r5
 8001a34:	1b40      	subs	r0, r0, r5
 8001a36:	4284      	cmp	r4, r0
 8001a38:	d100      	bne.n	8001a3c <__aeabi_ddiv+0x1d8>
 8001a3a:	e1d2      	b.n	8001de2 <__aeabi_ddiv+0x57e>
 8001a3c:	4649      	mov	r1, r9
 8001a3e:	f7fe fc05 	bl	800024c <__aeabi_uidivmod>
 8001a42:	9a01      	ldr	r2, [sp, #4]
 8001a44:	040b      	lsls	r3, r1, #16
 8001a46:	4342      	muls	r2, r0
 8001a48:	0c31      	lsrs	r1, r6, #16
 8001a4a:	0005      	movs	r5, r0
 8001a4c:	4319      	orrs	r1, r3
 8001a4e:	428a      	cmp	r2, r1
 8001a50:	d900      	bls.n	8001a54 <__aeabi_ddiv+0x1f0>
 8001a52:	e16c      	b.n	8001d2e <__aeabi_ddiv+0x4ca>
 8001a54:	1a88      	subs	r0, r1, r2
 8001a56:	4649      	mov	r1, r9
 8001a58:	f7fe fbf8 	bl	800024c <__aeabi_uidivmod>
 8001a5c:	9a01      	ldr	r2, [sp, #4]
 8001a5e:	0436      	lsls	r6, r6, #16
 8001a60:	4342      	muls	r2, r0
 8001a62:	0409      	lsls	r1, r1, #16
 8001a64:	0c36      	lsrs	r6, r6, #16
 8001a66:	0003      	movs	r3, r0
 8001a68:	430e      	orrs	r6, r1
 8001a6a:	42b2      	cmp	r2, r6
 8001a6c:	d900      	bls.n	8001a70 <__aeabi_ddiv+0x20c>
 8001a6e:	e153      	b.n	8001d18 <__aeabi_ddiv+0x4b4>
 8001a70:	9803      	ldr	r0, [sp, #12]
 8001a72:	1ab6      	subs	r6, r6, r2
 8001a74:	0002      	movs	r2, r0
 8001a76:	042d      	lsls	r5, r5, #16
 8001a78:	431d      	orrs	r5, r3
 8001a7a:	9f02      	ldr	r7, [sp, #8]
 8001a7c:	042b      	lsls	r3, r5, #16
 8001a7e:	0c1b      	lsrs	r3, r3, #16
 8001a80:	435a      	muls	r2, r3
 8001a82:	437b      	muls	r3, r7
 8001a84:	469c      	mov	ip, r3
 8001a86:	0c29      	lsrs	r1, r5, #16
 8001a88:	4348      	muls	r0, r1
 8001a8a:	0c13      	lsrs	r3, r2, #16
 8001a8c:	4484      	add	ip, r0
 8001a8e:	4463      	add	r3, ip
 8001a90:	4379      	muls	r1, r7
 8001a92:	4298      	cmp	r0, r3
 8001a94:	d903      	bls.n	8001a9e <__aeabi_ddiv+0x23a>
 8001a96:	2080      	movs	r0, #128	; 0x80
 8001a98:	0240      	lsls	r0, r0, #9
 8001a9a:	4684      	mov	ip, r0
 8001a9c:	4461      	add	r1, ip
 8001a9e:	0c18      	lsrs	r0, r3, #16
 8001aa0:	0412      	lsls	r2, r2, #16
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	0c12      	lsrs	r2, r2, #16
 8001aa6:	1840      	adds	r0, r0, r1
 8001aa8:	189b      	adds	r3, r3, r2
 8001aaa:	4286      	cmp	r6, r0
 8001aac:	d200      	bcs.n	8001ab0 <__aeabi_ddiv+0x24c>
 8001aae:	e100      	b.n	8001cb2 <__aeabi_ddiv+0x44e>
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_ddiv+0x250>
 8001ab2:	e0fb      	b.n	8001cac <__aeabi_ddiv+0x448>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	431d      	orrs	r5, r3
 8001ab8:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <__aeabi_ddiv+0x37c>)
 8001aba:	445b      	add	r3, fp
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	dc00      	bgt.n	8001ac2 <__aeabi_ddiv+0x25e>
 8001ac0:	e0aa      	b.n	8001c18 <__aeabi_ddiv+0x3b4>
 8001ac2:	076a      	lsls	r2, r5, #29
 8001ac4:	d000      	beq.n	8001ac8 <__aeabi_ddiv+0x264>
 8001ac6:	e13d      	b.n	8001d44 <__aeabi_ddiv+0x4e0>
 8001ac8:	08e9      	lsrs	r1, r5, #3
 8001aca:	4642      	mov	r2, r8
 8001acc:	01d2      	lsls	r2, r2, #7
 8001ace:	d506      	bpl.n	8001ade <__aeabi_ddiv+0x27a>
 8001ad0:	4642      	mov	r2, r8
 8001ad2:	4b44      	ldr	r3, [pc, #272]	; (8001be4 <__aeabi_ddiv+0x380>)
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	4690      	mov	r8, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	445b      	add	r3, fp
 8001ade:	4a42      	ldr	r2, [pc, #264]	; (8001be8 <__aeabi_ddiv+0x384>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	dd00      	ble.n	8001ae6 <__aeabi_ddiv+0x282>
 8001ae4:	e723      	b.n	800192e <__aeabi_ddiv+0xca>
 8001ae6:	4642      	mov	r2, r8
 8001ae8:	055b      	lsls	r3, r3, #21
 8001aea:	0755      	lsls	r5, r2, #29
 8001aec:	0252      	lsls	r2, r2, #9
 8001aee:	430d      	orrs	r5, r1
 8001af0:	0b12      	lsrs	r2, r2, #12
 8001af2:	0d5b      	lsrs	r3, r3, #21
 8001af4:	e70d      	b.n	8001912 <__aeabi_ddiv+0xae>
 8001af6:	4651      	mov	r1, sl
 8001af8:	4321      	orrs	r1, r4
 8001afa:	d100      	bne.n	8001afe <__aeabi_ddiv+0x29a>
 8001afc:	e07c      	b.n	8001bf8 <__aeabi_ddiv+0x394>
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d100      	bne.n	8001b04 <__aeabi_ddiv+0x2a0>
 8001b02:	e0fb      	b.n	8001cfc <__aeabi_ddiv+0x498>
 8001b04:	0020      	movs	r0, r4
 8001b06:	f001 fa63 	bl	8002fd0 <__clzsi2>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	3a0b      	subs	r2, #11
 8001b0e:	231d      	movs	r3, #29
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	4652      	mov	r2, sl
 8001b14:	0001      	movs	r1, r0
 8001b16:	40da      	lsrs	r2, r3
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3908      	subs	r1, #8
 8001b1c:	408b      	lsls	r3, r1
 8001b1e:	408c      	lsls	r4, r1
 8001b20:	0019      	movs	r1, r3
 8001b22:	4314      	orrs	r4, r2
 8001b24:	4b31      	ldr	r3, [pc, #196]	; (8001bec <__aeabi_ddiv+0x388>)
 8001b26:	4458      	add	r0, fp
 8001b28:	469b      	mov	fp, r3
 8001b2a:	4483      	add	fp, r0
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	e6d9      	b.n	80018e4 <__aeabi_ddiv+0x80>
 8001b30:	0003      	movs	r3, r0
 8001b32:	4323      	orrs	r3, r4
 8001b34:	4698      	mov	r8, r3
 8001b36:	d044      	beq.n	8001bc2 <__aeabi_ddiv+0x35e>
 8001b38:	2c00      	cmp	r4, #0
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_ddiv+0x2da>
 8001b3c:	e0cf      	b.n	8001cde <__aeabi_ddiv+0x47a>
 8001b3e:	0020      	movs	r0, r4
 8001b40:	f001 fa46 	bl	8002fd0 <__clzsi2>
 8001b44:	0001      	movs	r1, r0
 8001b46:	0002      	movs	r2, r0
 8001b48:	390b      	subs	r1, #11
 8001b4a:	231d      	movs	r3, #29
 8001b4c:	1a5b      	subs	r3, r3, r1
 8001b4e:	4649      	mov	r1, r9
 8001b50:	0010      	movs	r0, r2
 8001b52:	40d9      	lsrs	r1, r3
 8001b54:	3808      	subs	r0, #8
 8001b56:	4084      	lsls	r4, r0
 8001b58:	000b      	movs	r3, r1
 8001b5a:	464d      	mov	r5, r9
 8001b5c:	4323      	orrs	r3, r4
 8001b5e:	4698      	mov	r8, r3
 8001b60:	4085      	lsls	r5, r0
 8001b62:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <__aeabi_ddiv+0x38c>)
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	469b      	mov	fp, r3
 8001b68:	2300      	movs	r3, #0
 8001b6a:	4699      	mov	r9, r3
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	e69e      	b.n	80018ae <__aeabi_ddiv+0x4a>
 8001b70:	0002      	movs	r2, r0
 8001b72:	4322      	orrs	r2, r4
 8001b74:	4690      	mov	r8, r2
 8001b76:	d11d      	bne.n	8001bb4 <__aeabi_ddiv+0x350>
 8001b78:	2208      	movs	r2, #8
 8001b7a:	469b      	mov	fp, r3
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	2500      	movs	r5, #0
 8001b80:	4691      	mov	r9, r2
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	e693      	b.n	80018ae <__aeabi_ddiv+0x4a>
 8001b86:	4651      	mov	r1, sl
 8001b88:	4321      	orrs	r1, r4
 8001b8a:	d109      	bne.n	8001ba0 <__aeabi_ddiv+0x33c>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	464a      	mov	r2, r9
 8001b90:	431a      	orrs	r2, r3
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <__aeabi_ddiv+0x390>)
 8001b94:	4691      	mov	r9, r2
 8001b96:	469c      	mov	ip, r3
 8001b98:	2400      	movs	r4, #0
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	44e3      	add	fp, ip
 8001b9e:	e6a1      	b.n	80018e4 <__aeabi_ddiv+0x80>
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	464a      	mov	r2, r9
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <__aeabi_ddiv+0x390>)
 8001ba8:	4691      	mov	r9, r2
 8001baa:	469c      	mov	ip, r3
 8001bac:	4651      	mov	r1, sl
 8001bae:	2003      	movs	r0, #3
 8001bb0:	44e3      	add	fp, ip
 8001bb2:	e697      	b.n	80018e4 <__aeabi_ddiv+0x80>
 8001bb4:	220c      	movs	r2, #12
 8001bb6:	469b      	mov	fp, r3
 8001bb8:	2303      	movs	r3, #3
 8001bba:	46a0      	mov	r8, r4
 8001bbc:	4691      	mov	r9, r2
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	e675      	b.n	80018ae <__aeabi_ddiv+0x4a>
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	4699      	mov	r9, r3
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	469b      	mov	fp, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	2500      	movs	r5, #0
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	e66d      	b.n	80018ae <__aeabi_ddiv+0x4a>
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	000007ff 	.word	0x000007ff
 8001bd8:	fffffc01 	.word	0xfffffc01
 8001bdc:	0800ed5c 	.word	0x0800ed5c
 8001be0:	000003ff 	.word	0x000003ff
 8001be4:	feffffff 	.word	0xfeffffff
 8001be8:	000007fe 	.word	0x000007fe
 8001bec:	000003f3 	.word	0x000003f3
 8001bf0:	fffffc0d 	.word	0xfffffc0d
 8001bf4:	fffff801 	.word	0xfffff801
 8001bf8:	464a      	mov	r2, r9
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	4691      	mov	r9, r2
 8001c00:	2400      	movs	r4, #0
 8001c02:	2001      	movs	r0, #1
 8001c04:	e66e      	b.n	80018e4 <__aeabi_ddiv+0x80>
 8001c06:	2300      	movs	r3, #0
 8001c08:	2280      	movs	r2, #128	; 0x80
 8001c0a:	469a      	mov	sl, r3
 8001c0c:	2500      	movs	r5, #0
 8001c0e:	4b88      	ldr	r3, [pc, #544]	; (8001e30 <__aeabi_ddiv+0x5cc>)
 8001c10:	0312      	lsls	r2, r2, #12
 8001c12:	e67e      	b.n	8001912 <__aeabi_ddiv+0xae>
 8001c14:	2501      	movs	r5, #1
 8001c16:	426d      	negs	r5, r5
 8001c18:	2201      	movs	r2, #1
 8001c1a:	1ad2      	subs	r2, r2, r3
 8001c1c:	2a38      	cmp	r2, #56	; 0x38
 8001c1e:	dd00      	ble.n	8001c22 <__aeabi_ddiv+0x3be>
 8001c20:	e674      	b.n	800190c <__aeabi_ddiv+0xa8>
 8001c22:	2a1f      	cmp	r2, #31
 8001c24:	dc00      	bgt.n	8001c28 <__aeabi_ddiv+0x3c4>
 8001c26:	e0bd      	b.n	8001da4 <__aeabi_ddiv+0x540>
 8001c28:	211f      	movs	r1, #31
 8001c2a:	4249      	negs	r1, r1
 8001c2c:	1acb      	subs	r3, r1, r3
 8001c2e:	4641      	mov	r1, r8
 8001c30:	40d9      	lsrs	r1, r3
 8001c32:	000b      	movs	r3, r1
 8001c34:	2a20      	cmp	r2, #32
 8001c36:	d004      	beq.n	8001c42 <__aeabi_ddiv+0x3de>
 8001c38:	4641      	mov	r1, r8
 8001c3a:	4a7e      	ldr	r2, [pc, #504]	; (8001e34 <__aeabi_ddiv+0x5d0>)
 8001c3c:	445a      	add	r2, fp
 8001c3e:	4091      	lsls	r1, r2
 8001c40:	430d      	orrs	r5, r1
 8001c42:	0029      	movs	r1, r5
 8001c44:	1e4a      	subs	r2, r1, #1
 8001c46:	4191      	sbcs	r1, r2
 8001c48:	4319      	orrs	r1, r3
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	001d      	movs	r5, r3
 8001c4e:	2200      	movs	r2, #0
 8001c50:	400d      	ands	r5, r1
 8001c52:	420b      	tst	r3, r1
 8001c54:	d100      	bne.n	8001c58 <__aeabi_ddiv+0x3f4>
 8001c56:	e0d0      	b.n	8001dfa <__aeabi_ddiv+0x596>
 8001c58:	220f      	movs	r2, #15
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	2a04      	cmp	r2, #4
 8001c60:	d100      	bne.n	8001c64 <__aeabi_ddiv+0x400>
 8001c62:	e0c7      	b.n	8001df4 <__aeabi_ddiv+0x590>
 8001c64:	1d0a      	adds	r2, r1, #4
 8001c66:	428a      	cmp	r2, r1
 8001c68:	4189      	sbcs	r1, r1
 8001c6a:	4249      	negs	r1, r1
 8001c6c:	185b      	adds	r3, r3, r1
 8001c6e:	0011      	movs	r1, r2
 8001c70:	021a      	lsls	r2, r3, #8
 8001c72:	d400      	bmi.n	8001c76 <__aeabi_ddiv+0x412>
 8001c74:	e0be      	b.n	8001df4 <__aeabi_ddiv+0x590>
 8001c76:	2301      	movs	r3, #1
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	e649      	b.n	8001912 <__aeabi_ddiv+0xae>
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	4643      	mov	r3, r8
 8001c82:	0312      	lsls	r2, r2, #12
 8001c84:	4213      	tst	r3, r2
 8001c86:	d008      	beq.n	8001c9a <__aeabi_ddiv+0x436>
 8001c88:	4214      	tst	r4, r2
 8001c8a:	d106      	bne.n	8001c9a <__aeabi_ddiv+0x436>
 8001c8c:	4322      	orrs	r2, r4
 8001c8e:	0312      	lsls	r2, r2, #12
 8001c90:	46ba      	mov	sl, r7
 8001c92:	000d      	movs	r5, r1
 8001c94:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <__aeabi_ddiv+0x5cc>)
 8001c96:	0b12      	lsrs	r2, r2, #12
 8001c98:	e63b      	b.n	8001912 <__aeabi_ddiv+0xae>
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	4643      	mov	r3, r8
 8001c9e:	0312      	lsls	r2, r2, #12
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	0312      	lsls	r2, r2, #12
 8001ca4:	46b2      	mov	sl, r6
 8001ca6:	4b62      	ldr	r3, [pc, #392]	; (8001e30 <__aeabi_ddiv+0x5cc>)
 8001ca8:	0b12      	lsrs	r2, r2, #12
 8001caa:	e632      	b.n	8001912 <__aeabi_ddiv+0xae>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_ddiv+0x44e>
 8001cb0:	e702      	b.n	8001ab8 <__aeabi_ddiv+0x254>
 8001cb2:	19a6      	adds	r6, r4, r6
 8001cb4:	1e6a      	subs	r2, r5, #1
 8001cb6:	42a6      	cmp	r6, r4
 8001cb8:	d200      	bcs.n	8001cbc <__aeabi_ddiv+0x458>
 8001cba:	e089      	b.n	8001dd0 <__aeabi_ddiv+0x56c>
 8001cbc:	4286      	cmp	r6, r0
 8001cbe:	d200      	bcs.n	8001cc2 <__aeabi_ddiv+0x45e>
 8001cc0:	e09f      	b.n	8001e02 <__aeabi_ddiv+0x59e>
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_ddiv+0x462>
 8001cc4:	e0af      	b.n	8001e26 <__aeabi_ddiv+0x5c2>
 8001cc6:	0015      	movs	r5, r2
 8001cc8:	e6f4      	b.n	8001ab4 <__aeabi_ddiv+0x250>
 8001cca:	42a9      	cmp	r1, r5
 8001ccc:	d900      	bls.n	8001cd0 <__aeabi_ddiv+0x46c>
 8001cce:	e63c      	b.n	800194a <__aeabi_ddiv+0xe6>
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	07de      	lsls	r6, r3, #31
 8001cd4:	0858      	lsrs	r0, r3, #1
 8001cd6:	086b      	lsrs	r3, r5, #1
 8001cd8:	431e      	orrs	r6, r3
 8001cda:	07ed      	lsls	r5, r5, #31
 8001cdc:	e63c      	b.n	8001958 <__aeabi_ddiv+0xf4>
 8001cde:	f001 f977 	bl	8002fd0 <__clzsi2>
 8001ce2:	0001      	movs	r1, r0
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	3115      	adds	r1, #21
 8001ce8:	3220      	adds	r2, #32
 8001cea:	291c      	cmp	r1, #28
 8001cec:	dc00      	bgt.n	8001cf0 <__aeabi_ddiv+0x48c>
 8001cee:	e72c      	b.n	8001b4a <__aeabi_ddiv+0x2e6>
 8001cf0:	464b      	mov	r3, r9
 8001cf2:	3808      	subs	r0, #8
 8001cf4:	4083      	lsls	r3, r0
 8001cf6:	2500      	movs	r5, #0
 8001cf8:	4698      	mov	r8, r3
 8001cfa:	e732      	b.n	8001b62 <__aeabi_ddiv+0x2fe>
 8001cfc:	f001 f968 	bl	8002fd0 <__clzsi2>
 8001d00:	0003      	movs	r3, r0
 8001d02:	001a      	movs	r2, r3
 8001d04:	3215      	adds	r2, #21
 8001d06:	3020      	adds	r0, #32
 8001d08:	2a1c      	cmp	r2, #28
 8001d0a:	dc00      	bgt.n	8001d0e <__aeabi_ddiv+0x4aa>
 8001d0c:	e6ff      	b.n	8001b0e <__aeabi_ddiv+0x2aa>
 8001d0e:	4654      	mov	r4, sl
 8001d10:	3b08      	subs	r3, #8
 8001d12:	2100      	movs	r1, #0
 8001d14:	409c      	lsls	r4, r3
 8001d16:	e705      	b.n	8001b24 <__aeabi_ddiv+0x2c0>
 8001d18:	1936      	adds	r6, r6, r4
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	42b4      	cmp	r4, r6
 8001d1e:	d900      	bls.n	8001d22 <__aeabi_ddiv+0x4be>
 8001d20:	e6a6      	b.n	8001a70 <__aeabi_ddiv+0x20c>
 8001d22:	42b2      	cmp	r2, r6
 8001d24:	d800      	bhi.n	8001d28 <__aeabi_ddiv+0x4c4>
 8001d26:	e6a3      	b.n	8001a70 <__aeabi_ddiv+0x20c>
 8001d28:	1e83      	subs	r3, r0, #2
 8001d2a:	1936      	adds	r6, r6, r4
 8001d2c:	e6a0      	b.n	8001a70 <__aeabi_ddiv+0x20c>
 8001d2e:	1909      	adds	r1, r1, r4
 8001d30:	3d01      	subs	r5, #1
 8001d32:	428c      	cmp	r4, r1
 8001d34:	d900      	bls.n	8001d38 <__aeabi_ddiv+0x4d4>
 8001d36:	e68d      	b.n	8001a54 <__aeabi_ddiv+0x1f0>
 8001d38:	428a      	cmp	r2, r1
 8001d3a:	d800      	bhi.n	8001d3e <__aeabi_ddiv+0x4da>
 8001d3c:	e68a      	b.n	8001a54 <__aeabi_ddiv+0x1f0>
 8001d3e:	1e85      	subs	r5, r0, #2
 8001d40:	1909      	adds	r1, r1, r4
 8001d42:	e687      	b.n	8001a54 <__aeabi_ddiv+0x1f0>
 8001d44:	220f      	movs	r2, #15
 8001d46:	402a      	ands	r2, r5
 8001d48:	2a04      	cmp	r2, #4
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_ddiv+0x4ea>
 8001d4c:	e6bc      	b.n	8001ac8 <__aeabi_ddiv+0x264>
 8001d4e:	1d29      	adds	r1, r5, #4
 8001d50:	42a9      	cmp	r1, r5
 8001d52:	41ad      	sbcs	r5, r5
 8001d54:	426d      	negs	r5, r5
 8001d56:	08c9      	lsrs	r1, r1, #3
 8001d58:	44a8      	add	r8, r5
 8001d5a:	e6b6      	b.n	8001aca <__aeabi_ddiv+0x266>
 8001d5c:	42af      	cmp	r7, r5
 8001d5e:	d900      	bls.n	8001d62 <__aeabi_ddiv+0x4fe>
 8001d60:	e662      	b.n	8001a28 <__aeabi_ddiv+0x1c4>
 8001d62:	4281      	cmp	r1, r0
 8001d64:	d804      	bhi.n	8001d70 <__aeabi_ddiv+0x50c>
 8001d66:	d000      	beq.n	8001d6a <__aeabi_ddiv+0x506>
 8001d68:	e65e      	b.n	8001a28 <__aeabi_ddiv+0x1c4>
 8001d6a:	42ae      	cmp	r6, r5
 8001d6c:	d800      	bhi.n	8001d70 <__aeabi_ddiv+0x50c>
 8001d6e:	e65b      	b.n	8001a28 <__aeabi_ddiv+0x1c4>
 8001d70:	2302      	movs	r3, #2
 8001d72:	425b      	negs	r3, r3
 8001d74:	469c      	mov	ip, r3
 8001d76:	9b00      	ldr	r3, [sp, #0]
 8001d78:	44e0      	add	r8, ip
 8001d7a:	469c      	mov	ip, r3
 8001d7c:	4465      	add	r5, ip
 8001d7e:	429d      	cmp	r5, r3
 8001d80:	419b      	sbcs	r3, r3
 8001d82:	425b      	negs	r3, r3
 8001d84:	191b      	adds	r3, r3, r4
 8001d86:	18c0      	adds	r0, r0, r3
 8001d88:	e64f      	b.n	8001a2a <__aeabi_ddiv+0x1c6>
 8001d8a:	42b2      	cmp	r2, r6
 8001d8c:	d800      	bhi.n	8001d90 <__aeabi_ddiv+0x52c>
 8001d8e:	e612      	b.n	80019b6 <__aeabi_ddiv+0x152>
 8001d90:	1e83      	subs	r3, r0, #2
 8001d92:	1936      	adds	r6, r6, r4
 8001d94:	e60f      	b.n	80019b6 <__aeabi_ddiv+0x152>
 8001d96:	428a      	cmp	r2, r1
 8001d98:	d800      	bhi.n	8001d9c <__aeabi_ddiv+0x538>
 8001d9a:	e5fa      	b.n	8001992 <__aeabi_ddiv+0x12e>
 8001d9c:	1e83      	subs	r3, r0, #2
 8001d9e:	4698      	mov	r8, r3
 8001da0:	1909      	adds	r1, r1, r4
 8001da2:	e5f6      	b.n	8001992 <__aeabi_ddiv+0x12e>
 8001da4:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <__aeabi_ddiv+0x5d4>)
 8001da6:	0028      	movs	r0, r5
 8001da8:	445b      	add	r3, fp
 8001daa:	4641      	mov	r1, r8
 8001dac:	409d      	lsls	r5, r3
 8001dae:	4099      	lsls	r1, r3
 8001db0:	40d0      	lsrs	r0, r2
 8001db2:	1e6b      	subs	r3, r5, #1
 8001db4:	419d      	sbcs	r5, r3
 8001db6:	4643      	mov	r3, r8
 8001db8:	4301      	orrs	r1, r0
 8001dba:	4329      	orrs	r1, r5
 8001dbc:	40d3      	lsrs	r3, r2
 8001dbe:	074a      	lsls	r2, r1, #29
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_ddiv+0x560>
 8001dc2:	e755      	b.n	8001c70 <__aeabi_ddiv+0x40c>
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	2a04      	cmp	r2, #4
 8001dca:	d000      	beq.n	8001dce <__aeabi_ddiv+0x56a>
 8001dcc:	e74a      	b.n	8001c64 <__aeabi_ddiv+0x400>
 8001dce:	e74f      	b.n	8001c70 <__aeabi_ddiv+0x40c>
 8001dd0:	0015      	movs	r5, r2
 8001dd2:	4286      	cmp	r6, r0
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_ddiv+0x574>
 8001dd6:	e66d      	b.n	8001ab4 <__aeabi_ddiv+0x250>
 8001dd8:	9a00      	ldr	r2, [sp, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_ddiv+0x57c>
 8001dde:	e669      	b.n	8001ab4 <__aeabi_ddiv+0x250>
 8001de0:	e66a      	b.n	8001ab8 <__aeabi_ddiv+0x254>
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <__aeabi_ddiv+0x5d8>)
 8001de4:	445b      	add	r3, fp
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	dc00      	bgt.n	8001dec <__aeabi_ddiv+0x588>
 8001dea:	e713      	b.n	8001c14 <__aeabi_ddiv+0x3b0>
 8001dec:	2501      	movs	r5, #1
 8001dee:	2100      	movs	r1, #0
 8001df0:	44a8      	add	r8, r5
 8001df2:	e66a      	b.n	8001aca <__aeabi_ddiv+0x266>
 8001df4:	075d      	lsls	r5, r3, #29
 8001df6:	025b      	lsls	r3, r3, #9
 8001df8:	0b1a      	lsrs	r2, r3, #12
 8001dfa:	08c9      	lsrs	r1, r1, #3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	430d      	orrs	r5, r1
 8001e00:	e587      	b.n	8001912 <__aeabi_ddiv+0xae>
 8001e02:	9900      	ldr	r1, [sp, #0]
 8001e04:	3d02      	subs	r5, #2
 8001e06:	004a      	lsls	r2, r1, #1
 8001e08:	428a      	cmp	r2, r1
 8001e0a:	41bf      	sbcs	r7, r7
 8001e0c:	427f      	negs	r7, r7
 8001e0e:	193f      	adds	r7, r7, r4
 8001e10:	19f6      	adds	r6, r6, r7
 8001e12:	9200      	str	r2, [sp, #0]
 8001e14:	e7dd      	b.n	8001dd2 <__aeabi_ddiv+0x56e>
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	4643      	mov	r3, r8
 8001e1a:	0312      	lsls	r2, r2, #12
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	0312      	lsls	r2, r2, #12
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <__aeabi_ddiv+0x5cc>)
 8001e22:	0b12      	lsrs	r2, r2, #12
 8001e24:	e575      	b.n	8001912 <__aeabi_ddiv+0xae>
 8001e26:	9900      	ldr	r1, [sp, #0]
 8001e28:	4299      	cmp	r1, r3
 8001e2a:	d3ea      	bcc.n	8001e02 <__aeabi_ddiv+0x59e>
 8001e2c:	0015      	movs	r5, r2
 8001e2e:	e7d3      	b.n	8001dd8 <__aeabi_ddiv+0x574>
 8001e30:	000007ff 	.word	0x000007ff
 8001e34:	0000043e 	.word	0x0000043e
 8001e38:	0000041e 	.word	0x0000041e
 8001e3c:	000003ff 	.word	0x000003ff

08001e40 <__eqdf2>:
 8001e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e42:	464e      	mov	r6, r9
 8001e44:	4645      	mov	r5, r8
 8001e46:	46de      	mov	lr, fp
 8001e48:	4657      	mov	r7, sl
 8001e4a:	4690      	mov	r8, r2
 8001e4c:	b5e0      	push	{r5, r6, r7, lr}
 8001e4e:	0017      	movs	r7, r2
 8001e50:	031a      	lsls	r2, r3, #12
 8001e52:	0b12      	lsrs	r2, r2, #12
 8001e54:	0005      	movs	r5, r0
 8001e56:	4684      	mov	ip, r0
 8001e58:	4819      	ldr	r0, [pc, #100]	; (8001ec0 <__eqdf2+0x80>)
 8001e5a:	030e      	lsls	r6, r1, #12
 8001e5c:	004c      	lsls	r4, r1, #1
 8001e5e:	4691      	mov	r9, r2
 8001e60:	005a      	lsls	r2, r3, #1
 8001e62:	0fdb      	lsrs	r3, r3, #31
 8001e64:	469b      	mov	fp, r3
 8001e66:	0b36      	lsrs	r6, r6, #12
 8001e68:	0d64      	lsrs	r4, r4, #21
 8001e6a:	0fc9      	lsrs	r1, r1, #31
 8001e6c:	0d52      	lsrs	r2, r2, #21
 8001e6e:	4284      	cmp	r4, r0
 8001e70:	d019      	beq.n	8001ea6 <__eqdf2+0x66>
 8001e72:	4282      	cmp	r2, r0
 8001e74:	d010      	beq.n	8001e98 <__eqdf2+0x58>
 8001e76:	2001      	movs	r0, #1
 8001e78:	4294      	cmp	r4, r2
 8001e7a:	d10e      	bne.n	8001e9a <__eqdf2+0x5a>
 8001e7c:	454e      	cmp	r6, r9
 8001e7e:	d10c      	bne.n	8001e9a <__eqdf2+0x5a>
 8001e80:	2001      	movs	r0, #1
 8001e82:	45c4      	cmp	ip, r8
 8001e84:	d109      	bne.n	8001e9a <__eqdf2+0x5a>
 8001e86:	4559      	cmp	r1, fp
 8001e88:	d017      	beq.n	8001eba <__eqdf2+0x7a>
 8001e8a:	2c00      	cmp	r4, #0
 8001e8c:	d105      	bne.n	8001e9a <__eqdf2+0x5a>
 8001e8e:	0030      	movs	r0, r6
 8001e90:	4328      	orrs	r0, r5
 8001e92:	1e43      	subs	r3, r0, #1
 8001e94:	4198      	sbcs	r0, r3
 8001e96:	e000      	b.n	8001e9a <__eqdf2+0x5a>
 8001e98:	2001      	movs	r0, #1
 8001e9a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e9c:	46bb      	mov	fp, r7
 8001e9e:	46b2      	mov	sl, r6
 8001ea0:	46a9      	mov	r9, r5
 8001ea2:	46a0      	mov	r8, r4
 8001ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea6:	0033      	movs	r3, r6
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	432b      	orrs	r3, r5
 8001eac:	d1f5      	bne.n	8001e9a <__eqdf2+0x5a>
 8001eae:	42a2      	cmp	r2, r4
 8001eb0:	d1f3      	bne.n	8001e9a <__eqdf2+0x5a>
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	433b      	orrs	r3, r7
 8001eb6:	d1f0      	bne.n	8001e9a <__eqdf2+0x5a>
 8001eb8:	e7e2      	b.n	8001e80 <__eqdf2+0x40>
 8001eba:	2000      	movs	r0, #0
 8001ebc:	e7ed      	b.n	8001e9a <__eqdf2+0x5a>
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	000007ff 	.word	0x000007ff

08001ec4 <__gedf2>:
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	4647      	mov	r7, r8
 8001ec8:	46ce      	mov	lr, r9
 8001eca:	0004      	movs	r4, r0
 8001ecc:	0018      	movs	r0, r3
 8001ece:	0016      	movs	r6, r2
 8001ed0:	031b      	lsls	r3, r3, #12
 8001ed2:	0b1b      	lsrs	r3, r3, #12
 8001ed4:	4d2d      	ldr	r5, [pc, #180]	; (8001f8c <__gedf2+0xc8>)
 8001ed6:	004a      	lsls	r2, r1, #1
 8001ed8:	4699      	mov	r9, r3
 8001eda:	b580      	push	{r7, lr}
 8001edc:	0043      	lsls	r3, r0, #1
 8001ede:	030f      	lsls	r7, r1, #12
 8001ee0:	46a4      	mov	ip, r4
 8001ee2:	46b0      	mov	r8, r6
 8001ee4:	0b3f      	lsrs	r7, r7, #12
 8001ee6:	0d52      	lsrs	r2, r2, #21
 8001ee8:	0fc9      	lsrs	r1, r1, #31
 8001eea:	0d5b      	lsrs	r3, r3, #21
 8001eec:	0fc0      	lsrs	r0, r0, #31
 8001eee:	42aa      	cmp	r2, r5
 8001ef0:	d021      	beq.n	8001f36 <__gedf2+0x72>
 8001ef2:	42ab      	cmp	r3, r5
 8001ef4:	d013      	beq.n	8001f1e <__gedf2+0x5a>
 8001ef6:	2a00      	cmp	r2, #0
 8001ef8:	d122      	bne.n	8001f40 <__gedf2+0x7c>
 8001efa:	433c      	orrs	r4, r7
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <__gedf2+0x42>
 8001f00:	464d      	mov	r5, r9
 8001f02:	432e      	orrs	r6, r5
 8001f04:	d022      	beq.n	8001f4c <__gedf2+0x88>
 8001f06:	2c00      	cmp	r4, #0
 8001f08:	d010      	beq.n	8001f2c <__gedf2+0x68>
 8001f0a:	4281      	cmp	r1, r0
 8001f0c:	d022      	beq.n	8001f54 <__gedf2+0x90>
 8001f0e:	2002      	movs	r0, #2
 8001f10:	3901      	subs	r1, #1
 8001f12:	4008      	ands	r0, r1
 8001f14:	3801      	subs	r0, #1
 8001f16:	bcc0      	pop	{r6, r7}
 8001f18:	46b9      	mov	r9, r7
 8001f1a:	46b0      	mov	r8, r6
 8001f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1e:	464d      	mov	r5, r9
 8001f20:	432e      	orrs	r6, r5
 8001f22:	d129      	bne.n	8001f78 <__gedf2+0xb4>
 8001f24:	2a00      	cmp	r2, #0
 8001f26:	d1f0      	bne.n	8001f0a <__gedf2+0x46>
 8001f28:	433c      	orrs	r4, r7
 8001f2a:	d1ee      	bne.n	8001f0a <__gedf2+0x46>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d1f2      	bne.n	8001f16 <__gedf2+0x52>
 8001f30:	2001      	movs	r0, #1
 8001f32:	4240      	negs	r0, r0
 8001f34:	e7ef      	b.n	8001f16 <__gedf2+0x52>
 8001f36:	003d      	movs	r5, r7
 8001f38:	4325      	orrs	r5, r4
 8001f3a:	d11d      	bne.n	8001f78 <__gedf2+0xb4>
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d0ee      	beq.n	8001f1e <__gedf2+0x5a>
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e2      	bne.n	8001f0a <__gedf2+0x46>
 8001f44:	464c      	mov	r4, r9
 8001f46:	4326      	orrs	r6, r4
 8001f48:	d1df      	bne.n	8001f0a <__gedf2+0x46>
 8001f4a:	e7e0      	b.n	8001f0e <__gedf2+0x4a>
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	2c00      	cmp	r4, #0
 8001f50:	d0e1      	beq.n	8001f16 <__gedf2+0x52>
 8001f52:	e7dc      	b.n	8001f0e <__gedf2+0x4a>
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dc0a      	bgt.n	8001f6e <__gedf2+0xaa>
 8001f58:	dbe8      	blt.n	8001f2c <__gedf2+0x68>
 8001f5a:	454f      	cmp	r7, r9
 8001f5c:	d8d7      	bhi.n	8001f0e <__gedf2+0x4a>
 8001f5e:	d00e      	beq.n	8001f7e <__gedf2+0xba>
 8001f60:	2000      	movs	r0, #0
 8001f62:	454f      	cmp	r7, r9
 8001f64:	d2d7      	bcs.n	8001f16 <__gedf2+0x52>
 8001f66:	2900      	cmp	r1, #0
 8001f68:	d0e2      	beq.n	8001f30 <__gedf2+0x6c>
 8001f6a:	0008      	movs	r0, r1
 8001f6c:	e7d3      	b.n	8001f16 <__gedf2+0x52>
 8001f6e:	4243      	negs	r3, r0
 8001f70:	4158      	adcs	r0, r3
 8001f72:	0040      	lsls	r0, r0, #1
 8001f74:	3801      	subs	r0, #1
 8001f76:	e7ce      	b.n	8001f16 <__gedf2+0x52>
 8001f78:	2002      	movs	r0, #2
 8001f7a:	4240      	negs	r0, r0
 8001f7c:	e7cb      	b.n	8001f16 <__gedf2+0x52>
 8001f7e:	45c4      	cmp	ip, r8
 8001f80:	d8c5      	bhi.n	8001f0e <__gedf2+0x4a>
 8001f82:	2000      	movs	r0, #0
 8001f84:	45c4      	cmp	ip, r8
 8001f86:	d2c6      	bcs.n	8001f16 <__gedf2+0x52>
 8001f88:	e7ed      	b.n	8001f66 <__gedf2+0xa2>
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	000007ff 	.word	0x000007ff

08001f90 <__ledf2>:
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	4647      	mov	r7, r8
 8001f94:	46ce      	mov	lr, r9
 8001f96:	0004      	movs	r4, r0
 8001f98:	0018      	movs	r0, r3
 8001f9a:	0016      	movs	r6, r2
 8001f9c:	031b      	lsls	r3, r3, #12
 8001f9e:	0b1b      	lsrs	r3, r3, #12
 8001fa0:	4d2c      	ldr	r5, [pc, #176]	; (8002054 <__ledf2+0xc4>)
 8001fa2:	004a      	lsls	r2, r1, #1
 8001fa4:	4699      	mov	r9, r3
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	0043      	lsls	r3, r0, #1
 8001faa:	030f      	lsls	r7, r1, #12
 8001fac:	46a4      	mov	ip, r4
 8001fae:	46b0      	mov	r8, r6
 8001fb0:	0b3f      	lsrs	r7, r7, #12
 8001fb2:	0d52      	lsrs	r2, r2, #21
 8001fb4:	0fc9      	lsrs	r1, r1, #31
 8001fb6:	0d5b      	lsrs	r3, r3, #21
 8001fb8:	0fc0      	lsrs	r0, r0, #31
 8001fba:	42aa      	cmp	r2, r5
 8001fbc:	d00d      	beq.n	8001fda <__ledf2+0x4a>
 8001fbe:	42ab      	cmp	r3, r5
 8001fc0:	d010      	beq.n	8001fe4 <__ledf2+0x54>
 8001fc2:	2a00      	cmp	r2, #0
 8001fc4:	d127      	bne.n	8002016 <__ledf2+0x86>
 8001fc6:	433c      	orrs	r4, r7
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d111      	bne.n	8001ff0 <__ledf2+0x60>
 8001fcc:	464d      	mov	r5, r9
 8001fce:	432e      	orrs	r6, r5
 8001fd0:	d10e      	bne.n	8001ff0 <__ledf2+0x60>
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	2c00      	cmp	r4, #0
 8001fd6:	d015      	beq.n	8002004 <__ledf2+0x74>
 8001fd8:	e00e      	b.n	8001ff8 <__ledf2+0x68>
 8001fda:	003d      	movs	r5, r7
 8001fdc:	4325      	orrs	r5, r4
 8001fde:	d110      	bne.n	8002002 <__ledf2+0x72>
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d118      	bne.n	8002016 <__ledf2+0x86>
 8001fe4:	464d      	mov	r5, r9
 8001fe6:	432e      	orrs	r6, r5
 8001fe8:	d10b      	bne.n	8002002 <__ledf2+0x72>
 8001fea:	2a00      	cmp	r2, #0
 8001fec:	d102      	bne.n	8001ff4 <__ledf2+0x64>
 8001fee:	433c      	orrs	r4, r7
 8001ff0:	2c00      	cmp	r4, #0
 8001ff2:	d00b      	beq.n	800200c <__ledf2+0x7c>
 8001ff4:	4281      	cmp	r1, r0
 8001ff6:	d014      	beq.n	8002022 <__ledf2+0x92>
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	3901      	subs	r1, #1
 8001ffc:	4008      	ands	r0, r1
 8001ffe:	3801      	subs	r0, #1
 8002000:	e000      	b.n	8002004 <__ledf2+0x74>
 8002002:	2002      	movs	r0, #2
 8002004:	bcc0      	pop	{r6, r7}
 8002006:	46b9      	mov	r9, r7
 8002008:	46b0      	mov	r8, r6
 800200a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200c:	2800      	cmp	r0, #0
 800200e:	d1f9      	bne.n	8002004 <__ledf2+0x74>
 8002010:	2001      	movs	r0, #1
 8002012:	4240      	negs	r0, r0
 8002014:	e7f6      	b.n	8002004 <__ledf2+0x74>
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1ec      	bne.n	8001ff4 <__ledf2+0x64>
 800201a:	464c      	mov	r4, r9
 800201c:	4326      	orrs	r6, r4
 800201e:	d1e9      	bne.n	8001ff4 <__ledf2+0x64>
 8002020:	e7ea      	b.n	8001ff8 <__ledf2+0x68>
 8002022:	429a      	cmp	r2, r3
 8002024:	dd04      	ble.n	8002030 <__ledf2+0xa0>
 8002026:	4243      	negs	r3, r0
 8002028:	4158      	adcs	r0, r3
 800202a:	0040      	lsls	r0, r0, #1
 800202c:	3801      	subs	r0, #1
 800202e:	e7e9      	b.n	8002004 <__ledf2+0x74>
 8002030:	429a      	cmp	r2, r3
 8002032:	dbeb      	blt.n	800200c <__ledf2+0x7c>
 8002034:	454f      	cmp	r7, r9
 8002036:	d8df      	bhi.n	8001ff8 <__ledf2+0x68>
 8002038:	d006      	beq.n	8002048 <__ledf2+0xb8>
 800203a:	2000      	movs	r0, #0
 800203c:	454f      	cmp	r7, r9
 800203e:	d2e1      	bcs.n	8002004 <__ledf2+0x74>
 8002040:	2900      	cmp	r1, #0
 8002042:	d0e5      	beq.n	8002010 <__ledf2+0x80>
 8002044:	0008      	movs	r0, r1
 8002046:	e7dd      	b.n	8002004 <__ledf2+0x74>
 8002048:	45c4      	cmp	ip, r8
 800204a:	d8d5      	bhi.n	8001ff8 <__ledf2+0x68>
 800204c:	2000      	movs	r0, #0
 800204e:	45c4      	cmp	ip, r8
 8002050:	d2d8      	bcs.n	8002004 <__ledf2+0x74>
 8002052:	e7f5      	b.n	8002040 <__ledf2+0xb0>
 8002054:	000007ff 	.word	0x000007ff

08002058 <__aeabi_dmul>:
 8002058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205a:	4645      	mov	r5, r8
 800205c:	46de      	mov	lr, fp
 800205e:	4657      	mov	r7, sl
 8002060:	464e      	mov	r6, r9
 8002062:	b5e0      	push	{r5, r6, r7, lr}
 8002064:	001f      	movs	r7, r3
 8002066:	030b      	lsls	r3, r1, #12
 8002068:	0b1b      	lsrs	r3, r3, #12
 800206a:	469b      	mov	fp, r3
 800206c:	004d      	lsls	r5, r1, #1
 800206e:	0fcb      	lsrs	r3, r1, #31
 8002070:	0004      	movs	r4, r0
 8002072:	4691      	mov	r9, r2
 8002074:	4698      	mov	r8, r3
 8002076:	b087      	sub	sp, #28
 8002078:	0d6d      	lsrs	r5, r5, #21
 800207a:	d100      	bne.n	800207e <__aeabi_dmul+0x26>
 800207c:	e1cd      	b.n	800241a <__aeabi_dmul+0x3c2>
 800207e:	4bce      	ldr	r3, [pc, #824]	; (80023b8 <__aeabi_dmul+0x360>)
 8002080:	429d      	cmp	r5, r3
 8002082:	d100      	bne.n	8002086 <__aeabi_dmul+0x2e>
 8002084:	e1e9      	b.n	800245a <__aeabi_dmul+0x402>
 8002086:	465a      	mov	r2, fp
 8002088:	0f43      	lsrs	r3, r0, #29
 800208a:	00d2      	lsls	r2, r2, #3
 800208c:	4313      	orrs	r3, r2
 800208e:	2280      	movs	r2, #128	; 0x80
 8002090:	0412      	lsls	r2, r2, #16
 8002092:	431a      	orrs	r2, r3
 8002094:	00c3      	lsls	r3, r0, #3
 8002096:	469a      	mov	sl, r3
 8002098:	4bc8      	ldr	r3, [pc, #800]	; (80023bc <__aeabi_dmul+0x364>)
 800209a:	4693      	mov	fp, r2
 800209c:	469c      	mov	ip, r3
 800209e:	2300      	movs	r3, #0
 80020a0:	2600      	movs	r6, #0
 80020a2:	4465      	add	r5, ip
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	033c      	lsls	r4, r7, #12
 80020a8:	007b      	lsls	r3, r7, #1
 80020aa:	4648      	mov	r0, r9
 80020ac:	0b24      	lsrs	r4, r4, #12
 80020ae:	0d5b      	lsrs	r3, r3, #21
 80020b0:	0fff      	lsrs	r7, r7, #31
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dmul+0x60>
 80020b6:	e189      	b.n	80023cc <__aeabi_dmul+0x374>
 80020b8:	4abf      	ldr	r2, [pc, #764]	; (80023b8 <__aeabi_dmul+0x360>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d019      	beq.n	80020f2 <__aeabi_dmul+0x9a>
 80020be:	0f42      	lsrs	r2, r0, #29
 80020c0:	00e4      	lsls	r4, r4, #3
 80020c2:	4322      	orrs	r2, r4
 80020c4:	2480      	movs	r4, #128	; 0x80
 80020c6:	0424      	lsls	r4, r4, #16
 80020c8:	4314      	orrs	r4, r2
 80020ca:	4abc      	ldr	r2, [pc, #752]	; (80023bc <__aeabi_dmul+0x364>)
 80020cc:	2100      	movs	r1, #0
 80020ce:	4694      	mov	ip, r2
 80020d0:	4642      	mov	r2, r8
 80020d2:	4463      	add	r3, ip
 80020d4:	195b      	adds	r3, r3, r5
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	9b01      	ldr	r3, [sp, #4]
 80020da:	407a      	eors	r2, r7
 80020dc:	3301      	adds	r3, #1
 80020de:	00c0      	lsls	r0, r0, #3
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	9302      	str	r3, [sp, #8]
 80020e4:	2e0a      	cmp	r6, #10
 80020e6:	dd1c      	ble.n	8002122 <__aeabi_dmul+0xca>
 80020e8:	003a      	movs	r2, r7
 80020ea:	2e0b      	cmp	r6, #11
 80020ec:	d05e      	beq.n	80021ac <__aeabi_dmul+0x154>
 80020ee:	4647      	mov	r7, r8
 80020f0:	e056      	b.n	80021a0 <__aeabi_dmul+0x148>
 80020f2:	4649      	mov	r1, r9
 80020f4:	4bb0      	ldr	r3, [pc, #704]	; (80023b8 <__aeabi_dmul+0x360>)
 80020f6:	4321      	orrs	r1, r4
 80020f8:	18eb      	adds	r3, r5, r3
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	2900      	cmp	r1, #0
 80020fe:	d12a      	bne.n	8002156 <__aeabi_dmul+0xfe>
 8002100:	2080      	movs	r0, #128	; 0x80
 8002102:	2202      	movs	r2, #2
 8002104:	0100      	lsls	r0, r0, #4
 8002106:	002b      	movs	r3, r5
 8002108:	4684      	mov	ip, r0
 800210a:	4316      	orrs	r6, r2
 800210c:	4642      	mov	r2, r8
 800210e:	4463      	add	r3, ip
 8002110:	407a      	eors	r2, r7
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	9302      	str	r3, [sp, #8]
 8002116:	2e0a      	cmp	r6, #10
 8002118:	dd00      	ble.n	800211c <__aeabi_dmul+0xc4>
 800211a:	e231      	b.n	8002580 <__aeabi_dmul+0x528>
 800211c:	2000      	movs	r0, #0
 800211e:	2400      	movs	r4, #0
 8002120:	2102      	movs	r1, #2
 8002122:	2e02      	cmp	r6, #2
 8002124:	dc26      	bgt.n	8002174 <__aeabi_dmul+0x11c>
 8002126:	3e01      	subs	r6, #1
 8002128:	2e01      	cmp	r6, #1
 800212a:	d852      	bhi.n	80021d2 <__aeabi_dmul+0x17a>
 800212c:	2902      	cmp	r1, #2
 800212e:	d04c      	beq.n	80021ca <__aeabi_dmul+0x172>
 8002130:	2901      	cmp	r1, #1
 8002132:	d000      	beq.n	8002136 <__aeabi_dmul+0xde>
 8002134:	e118      	b.n	8002368 <__aeabi_dmul+0x310>
 8002136:	2300      	movs	r3, #0
 8002138:	2400      	movs	r4, #0
 800213a:	2500      	movs	r5, #0
 800213c:	051b      	lsls	r3, r3, #20
 800213e:	4323      	orrs	r3, r4
 8002140:	07d2      	lsls	r2, r2, #31
 8002142:	4313      	orrs	r3, r2
 8002144:	0028      	movs	r0, r5
 8002146:	0019      	movs	r1, r3
 8002148:	b007      	add	sp, #28
 800214a:	bcf0      	pop	{r4, r5, r6, r7}
 800214c:	46bb      	mov	fp, r7
 800214e:	46b2      	mov	sl, r6
 8002150:	46a9      	mov	r9, r5
 8002152:	46a0      	mov	r8, r4
 8002154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	2203      	movs	r2, #3
 800215a:	0109      	lsls	r1, r1, #4
 800215c:	002b      	movs	r3, r5
 800215e:	468c      	mov	ip, r1
 8002160:	4316      	orrs	r6, r2
 8002162:	4642      	mov	r2, r8
 8002164:	4463      	add	r3, ip
 8002166:	407a      	eors	r2, r7
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	9302      	str	r3, [sp, #8]
 800216c:	2e0a      	cmp	r6, #10
 800216e:	dd00      	ble.n	8002172 <__aeabi_dmul+0x11a>
 8002170:	e228      	b.n	80025c4 <__aeabi_dmul+0x56c>
 8002172:	2103      	movs	r1, #3
 8002174:	2501      	movs	r5, #1
 8002176:	40b5      	lsls	r5, r6
 8002178:	46ac      	mov	ip, r5
 800217a:	26a6      	movs	r6, #166	; 0xa6
 800217c:	4663      	mov	r3, ip
 800217e:	00f6      	lsls	r6, r6, #3
 8002180:	4035      	ands	r5, r6
 8002182:	4233      	tst	r3, r6
 8002184:	d10b      	bne.n	800219e <__aeabi_dmul+0x146>
 8002186:	2690      	movs	r6, #144	; 0x90
 8002188:	00b6      	lsls	r6, r6, #2
 800218a:	4233      	tst	r3, r6
 800218c:	d118      	bne.n	80021c0 <__aeabi_dmul+0x168>
 800218e:	3eb9      	subs	r6, #185	; 0xb9
 8002190:	3eff      	subs	r6, #255	; 0xff
 8002192:	421e      	tst	r6, r3
 8002194:	d01d      	beq.n	80021d2 <__aeabi_dmul+0x17a>
 8002196:	46a3      	mov	fp, r4
 8002198:	4682      	mov	sl, r0
 800219a:	9100      	str	r1, [sp, #0]
 800219c:	e000      	b.n	80021a0 <__aeabi_dmul+0x148>
 800219e:	0017      	movs	r7, r2
 80021a0:	9900      	ldr	r1, [sp, #0]
 80021a2:	003a      	movs	r2, r7
 80021a4:	2902      	cmp	r1, #2
 80021a6:	d010      	beq.n	80021ca <__aeabi_dmul+0x172>
 80021a8:	465c      	mov	r4, fp
 80021aa:	4650      	mov	r0, sl
 80021ac:	2903      	cmp	r1, #3
 80021ae:	d1bf      	bne.n	8002130 <__aeabi_dmul+0xd8>
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	031b      	lsls	r3, r3, #12
 80021b4:	431c      	orrs	r4, r3
 80021b6:	0324      	lsls	r4, r4, #12
 80021b8:	0005      	movs	r5, r0
 80021ba:	4b7f      	ldr	r3, [pc, #508]	; (80023b8 <__aeabi_dmul+0x360>)
 80021bc:	0b24      	lsrs	r4, r4, #12
 80021be:	e7bd      	b.n	800213c <__aeabi_dmul+0xe4>
 80021c0:	2480      	movs	r4, #128	; 0x80
 80021c2:	2200      	movs	r2, #0
 80021c4:	4b7c      	ldr	r3, [pc, #496]	; (80023b8 <__aeabi_dmul+0x360>)
 80021c6:	0324      	lsls	r4, r4, #12
 80021c8:	e7b8      	b.n	800213c <__aeabi_dmul+0xe4>
 80021ca:	2400      	movs	r4, #0
 80021cc:	2500      	movs	r5, #0
 80021ce:	4b7a      	ldr	r3, [pc, #488]	; (80023b8 <__aeabi_dmul+0x360>)
 80021d0:	e7b4      	b.n	800213c <__aeabi_dmul+0xe4>
 80021d2:	4653      	mov	r3, sl
 80021d4:	041e      	lsls	r6, r3, #16
 80021d6:	0c36      	lsrs	r6, r6, #16
 80021d8:	0c1f      	lsrs	r7, r3, #16
 80021da:	0033      	movs	r3, r6
 80021dc:	0c01      	lsrs	r1, r0, #16
 80021de:	0400      	lsls	r0, r0, #16
 80021e0:	0c00      	lsrs	r0, r0, #16
 80021e2:	4343      	muls	r3, r0
 80021e4:	4698      	mov	r8, r3
 80021e6:	0003      	movs	r3, r0
 80021e8:	437b      	muls	r3, r7
 80021ea:	4699      	mov	r9, r3
 80021ec:	0033      	movs	r3, r6
 80021ee:	434b      	muls	r3, r1
 80021f0:	469c      	mov	ip, r3
 80021f2:	4643      	mov	r3, r8
 80021f4:	000d      	movs	r5, r1
 80021f6:	0c1b      	lsrs	r3, r3, #16
 80021f8:	469a      	mov	sl, r3
 80021fa:	437d      	muls	r5, r7
 80021fc:	44cc      	add	ip, r9
 80021fe:	44d4      	add	ip, sl
 8002200:	9500      	str	r5, [sp, #0]
 8002202:	45e1      	cmp	r9, ip
 8002204:	d904      	bls.n	8002210 <__aeabi_dmul+0x1b8>
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	025b      	lsls	r3, r3, #9
 800220a:	4699      	mov	r9, r3
 800220c:	444d      	add	r5, r9
 800220e:	9500      	str	r5, [sp, #0]
 8002210:	4663      	mov	r3, ip
 8002212:	0c1b      	lsrs	r3, r3, #16
 8002214:	001d      	movs	r5, r3
 8002216:	4663      	mov	r3, ip
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	469c      	mov	ip, r3
 800221c:	4643      	mov	r3, r8
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	4698      	mov	r8, r3
 8002224:	4663      	mov	r3, ip
 8002226:	4443      	add	r3, r8
 8002228:	9303      	str	r3, [sp, #12]
 800222a:	0c23      	lsrs	r3, r4, #16
 800222c:	4698      	mov	r8, r3
 800222e:	0033      	movs	r3, r6
 8002230:	0424      	lsls	r4, r4, #16
 8002232:	0c24      	lsrs	r4, r4, #16
 8002234:	4363      	muls	r3, r4
 8002236:	469c      	mov	ip, r3
 8002238:	0023      	movs	r3, r4
 800223a:	437b      	muls	r3, r7
 800223c:	4699      	mov	r9, r3
 800223e:	4643      	mov	r3, r8
 8002240:	435e      	muls	r6, r3
 8002242:	435f      	muls	r7, r3
 8002244:	444e      	add	r6, r9
 8002246:	4663      	mov	r3, ip
 8002248:	46b2      	mov	sl, r6
 800224a:	0c1e      	lsrs	r6, r3, #16
 800224c:	4456      	add	r6, sl
 800224e:	45b1      	cmp	r9, r6
 8002250:	d903      	bls.n	800225a <__aeabi_dmul+0x202>
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	025b      	lsls	r3, r3, #9
 8002256:	4699      	mov	r9, r3
 8002258:	444f      	add	r7, r9
 800225a:	0c33      	lsrs	r3, r6, #16
 800225c:	4699      	mov	r9, r3
 800225e:	003b      	movs	r3, r7
 8002260:	444b      	add	r3, r9
 8002262:	9305      	str	r3, [sp, #20]
 8002264:	4663      	mov	r3, ip
 8002266:	46ac      	mov	ip, r5
 8002268:	041f      	lsls	r7, r3, #16
 800226a:	0c3f      	lsrs	r7, r7, #16
 800226c:	0436      	lsls	r6, r6, #16
 800226e:	19f6      	adds	r6, r6, r7
 8002270:	44b4      	add	ip, r6
 8002272:	4663      	mov	r3, ip
 8002274:	9304      	str	r3, [sp, #16]
 8002276:	465b      	mov	r3, fp
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	469c      	mov	ip, r3
 800227c:	465b      	mov	r3, fp
 800227e:	041f      	lsls	r7, r3, #16
 8002280:	0c3f      	lsrs	r7, r7, #16
 8002282:	003b      	movs	r3, r7
 8002284:	4343      	muls	r3, r0
 8002286:	4699      	mov	r9, r3
 8002288:	4663      	mov	r3, ip
 800228a:	4343      	muls	r3, r0
 800228c:	469a      	mov	sl, r3
 800228e:	464b      	mov	r3, r9
 8002290:	4660      	mov	r0, ip
 8002292:	0c1b      	lsrs	r3, r3, #16
 8002294:	469b      	mov	fp, r3
 8002296:	4348      	muls	r0, r1
 8002298:	4379      	muls	r1, r7
 800229a:	4451      	add	r1, sl
 800229c:	4459      	add	r1, fp
 800229e:	458a      	cmp	sl, r1
 80022a0:	d903      	bls.n	80022aa <__aeabi_dmul+0x252>
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	025b      	lsls	r3, r3, #9
 80022a6:	469a      	mov	sl, r3
 80022a8:	4450      	add	r0, sl
 80022aa:	0c0b      	lsrs	r3, r1, #16
 80022ac:	469a      	mov	sl, r3
 80022ae:	464b      	mov	r3, r9
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	0c1b      	lsrs	r3, r3, #16
 80022b4:	4699      	mov	r9, r3
 80022b6:	003b      	movs	r3, r7
 80022b8:	4363      	muls	r3, r4
 80022ba:	0409      	lsls	r1, r1, #16
 80022bc:	4645      	mov	r5, r8
 80022be:	4449      	add	r1, r9
 80022c0:	4699      	mov	r9, r3
 80022c2:	4663      	mov	r3, ip
 80022c4:	435c      	muls	r4, r3
 80022c6:	436b      	muls	r3, r5
 80022c8:	469c      	mov	ip, r3
 80022ca:	464b      	mov	r3, r9
 80022cc:	0c1b      	lsrs	r3, r3, #16
 80022ce:	4698      	mov	r8, r3
 80022d0:	436f      	muls	r7, r5
 80022d2:	193f      	adds	r7, r7, r4
 80022d4:	4447      	add	r7, r8
 80022d6:	4450      	add	r0, sl
 80022d8:	42bc      	cmp	r4, r7
 80022da:	d903      	bls.n	80022e4 <__aeabi_dmul+0x28c>
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	025b      	lsls	r3, r3, #9
 80022e0:	4698      	mov	r8, r3
 80022e2:	44c4      	add	ip, r8
 80022e4:	9b04      	ldr	r3, [sp, #16]
 80022e6:	9d00      	ldr	r5, [sp, #0]
 80022e8:	4698      	mov	r8, r3
 80022ea:	4445      	add	r5, r8
 80022ec:	42b5      	cmp	r5, r6
 80022ee:	41b6      	sbcs	r6, r6
 80022f0:	4273      	negs	r3, r6
 80022f2:	4698      	mov	r8, r3
 80022f4:	464b      	mov	r3, r9
 80022f6:	041e      	lsls	r6, r3, #16
 80022f8:	9b05      	ldr	r3, [sp, #20]
 80022fa:	043c      	lsls	r4, r7, #16
 80022fc:	4699      	mov	r9, r3
 80022fe:	0c36      	lsrs	r6, r6, #16
 8002300:	19a4      	adds	r4, r4, r6
 8002302:	444c      	add	r4, r9
 8002304:	46a1      	mov	r9, r4
 8002306:	4683      	mov	fp, r0
 8002308:	186e      	adds	r6, r5, r1
 800230a:	44c1      	add	r9, r8
 800230c:	428e      	cmp	r6, r1
 800230e:	4189      	sbcs	r1, r1
 8002310:	44cb      	add	fp, r9
 8002312:	465d      	mov	r5, fp
 8002314:	4249      	negs	r1, r1
 8002316:	186d      	adds	r5, r5, r1
 8002318:	429c      	cmp	r4, r3
 800231a:	41a4      	sbcs	r4, r4
 800231c:	45c1      	cmp	r9, r8
 800231e:	419b      	sbcs	r3, r3
 8002320:	4583      	cmp	fp, r0
 8002322:	4180      	sbcs	r0, r0
 8002324:	428d      	cmp	r5, r1
 8002326:	4189      	sbcs	r1, r1
 8002328:	425b      	negs	r3, r3
 800232a:	4264      	negs	r4, r4
 800232c:	431c      	orrs	r4, r3
 800232e:	4240      	negs	r0, r0
 8002330:	9b03      	ldr	r3, [sp, #12]
 8002332:	4249      	negs	r1, r1
 8002334:	4301      	orrs	r1, r0
 8002336:	0270      	lsls	r0, r6, #9
 8002338:	0c3f      	lsrs	r7, r7, #16
 800233a:	4318      	orrs	r0, r3
 800233c:	19e4      	adds	r4, r4, r7
 800233e:	1e47      	subs	r7, r0, #1
 8002340:	41b8      	sbcs	r0, r7
 8002342:	1864      	adds	r4, r4, r1
 8002344:	4464      	add	r4, ip
 8002346:	0df6      	lsrs	r6, r6, #23
 8002348:	0261      	lsls	r1, r4, #9
 800234a:	4330      	orrs	r0, r6
 800234c:	0dec      	lsrs	r4, r5, #23
 800234e:	026e      	lsls	r6, r5, #9
 8002350:	430c      	orrs	r4, r1
 8002352:	4330      	orrs	r0, r6
 8002354:	01c9      	lsls	r1, r1, #7
 8002356:	d400      	bmi.n	800235a <__aeabi_dmul+0x302>
 8002358:	e0f1      	b.n	800253e <__aeabi_dmul+0x4e6>
 800235a:	2101      	movs	r1, #1
 800235c:	0843      	lsrs	r3, r0, #1
 800235e:	4001      	ands	r1, r0
 8002360:	430b      	orrs	r3, r1
 8002362:	07e0      	lsls	r0, r4, #31
 8002364:	4318      	orrs	r0, r3
 8002366:	0864      	lsrs	r4, r4, #1
 8002368:	4915      	ldr	r1, [pc, #84]	; (80023c0 <__aeabi_dmul+0x368>)
 800236a:	9b02      	ldr	r3, [sp, #8]
 800236c:	468c      	mov	ip, r1
 800236e:	4463      	add	r3, ip
 8002370:	2b00      	cmp	r3, #0
 8002372:	dc00      	bgt.n	8002376 <__aeabi_dmul+0x31e>
 8002374:	e097      	b.n	80024a6 <__aeabi_dmul+0x44e>
 8002376:	0741      	lsls	r1, r0, #29
 8002378:	d009      	beq.n	800238e <__aeabi_dmul+0x336>
 800237a:	210f      	movs	r1, #15
 800237c:	4001      	ands	r1, r0
 800237e:	2904      	cmp	r1, #4
 8002380:	d005      	beq.n	800238e <__aeabi_dmul+0x336>
 8002382:	1d01      	adds	r1, r0, #4
 8002384:	4281      	cmp	r1, r0
 8002386:	4180      	sbcs	r0, r0
 8002388:	4240      	negs	r0, r0
 800238a:	1824      	adds	r4, r4, r0
 800238c:	0008      	movs	r0, r1
 800238e:	01e1      	lsls	r1, r4, #7
 8002390:	d506      	bpl.n	80023a0 <__aeabi_dmul+0x348>
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	00c9      	lsls	r1, r1, #3
 8002396:	468c      	mov	ip, r1
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <__aeabi_dmul+0x36c>)
 800239a:	401c      	ands	r4, r3
 800239c:	9b02      	ldr	r3, [sp, #8]
 800239e:	4463      	add	r3, ip
 80023a0:	4909      	ldr	r1, [pc, #36]	; (80023c8 <__aeabi_dmul+0x370>)
 80023a2:	428b      	cmp	r3, r1
 80023a4:	dd00      	ble.n	80023a8 <__aeabi_dmul+0x350>
 80023a6:	e710      	b.n	80021ca <__aeabi_dmul+0x172>
 80023a8:	0761      	lsls	r1, r4, #29
 80023aa:	08c5      	lsrs	r5, r0, #3
 80023ac:	0264      	lsls	r4, r4, #9
 80023ae:	055b      	lsls	r3, r3, #21
 80023b0:	430d      	orrs	r5, r1
 80023b2:	0b24      	lsrs	r4, r4, #12
 80023b4:	0d5b      	lsrs	r3, r3, #21
 80023b6:	e6c1      	b.n	800213c <__aeabi_dmul+0xe4>
 80023b8:	000007ff 	.word	0x000007ff
 80023bc:	fffffc01 	.word	0xfffffc01
 80023c0:	000003ff 	.word	0x000003ff
 80023c4:	feffffff 	.word	0xfeffffff
 80023c8:	000007fe 	.word	0x000007fe
 80023cc:	464b      	mov	r3, r9
 80023ce:	4323      	orrs	r3, r4
 80023d0:	d059      	beq.n	8002486 <__aeabi_dmul+0x42e>
 80023d2:	2c00      	cmp	r4, #0
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dmul+0x380>
 80023d6:	e0a3      	b.n	8002520 <__aeabi_dmul+0x4c8>
 80023d8:	0020      	movs	r0, r4
 80023da:	f000 fdf9 	bl	8002fd0 <__clzsi2>
 80023de:	0001      	movs	r1, r0
 80023e0:	0003      	movs	r3, r0
 80023e2:	390b      	subs	r1, #11
 80023e4:	221d      	movs	r2, #29
 80023e6:	1a52      	subs	r2, r2, r1
 80023e8:	4649      	mov	r1, r9
 80023ea:	0018      	movs	r0, r3
 80023ec:	40d1      	lsrs	r1, r2
 80023ee:	464a      	mov	r2, r9
 80023f0:	3808      	subs	r0, #8
 80023f2:	4082      	lsls	r2, r0
 80023f4:	4084      	lsls	r4, r0
 80023f6:	0010      	movs	r0, r2
 80023f8:	430c      	orrs	r4, r1
 80023fa:	4a74      	ldr	r2, [pc, #464]	; (80025cc <__aeabi_dmul+0x574>)
 80023fc:	1aeb      	subs	r3, r5, r3
 80023fe:	4694      	mov	ip, r2
 8002400:	4642      	mov	r2, r8
 8002402:	4463      	add	r3, ip
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	9b01      	ldr	r3, [sp, #4]
 8002408:	407a      	eors	r2, r7
 800240a:	3301      	adds	r3, #1
 800240c:	2100      	movs	r1, #0
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	2e0a      	cmp	r6, #10
 8002414:	dd00      	ble.n	8002418 <__aeabi_dmul+0x3c0>
 8002416:	e667      	b.n	80020e8 <__aeabi_dmul+0x90>
 8002418:	e683      	b.n	8002122 <__aeabi_dmul+0xca>
 800241a:	465b      	mov	r3, fp
 800241c:	4303      	orrs	r3, r0
 800241e:	469a      	mov	sl, r3
 8002420:	d02a      	beq.n	8002478 <__aeabi_dmul+0x420>
 8002422:	465b      	mov	r3, fp
 8002424:	2b00      	cmp	r3, #0
 8002426:	d06d      	beq.n	8002504 <__aeabi_dmul+0x4ac>
 8002428:	4658      	mov	r0, fp
 800242a:	f000 fdd1 	bl	8002fd0 <__clzsi2>
 800242e:	0001      	movs	r1, r0
 8002430:	0003      	movs	r3, r0
 8002432:	390b      	subs	r1, #11
 8002434:	221d      	movs	r2, #29
 8002436:	1a52      	subs	r2, r2, r1
 8002438:	0021      	movs	r1, r4
 800243a:	0018      	movs	r0, r3
 800243c:	465d      	mov	r5, fp
 800243e:	40d1      	lsrs	r1, r2
 8002440:	3808      	subs	r0, #8
 8002442:	4085      	lsls	r5, r0
 8002444:	000a      	movs	r2, r1
 8002446:	4084      	lsls	r4, r0
 8002448:	432a      	orrs	r2, r5
 800244a:	4693      	mov	fp, r2
 800244c:	46a2      	mov	sl, r4
 800244e:	4d5f      	ldr	r5, [pc, #380]	; (80025cc <__aeabi_dmul+0x574>)
 8002450:	2600      	movs	r6, #0
 8002452:	1aed      	subs	r5, r5, r3
 8002454:	2300      	movs	r3, #0
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	e625      	b.n	80020a6 <__aeabi_dmul+0x4e>
 800245a:	465b      	mov	r3, fp
 800245c:	4303      	orrs	r3, r0
 800245e:	469a      	mov	sl, r3
 8002460:	d105      	bne.n	800246e <__aeabi_dmul+0x416>
 8002462:	2300      	movs	r3, #0
 8002464:	469b      	mov	fp, r3
 8002466:	3302      	adds	r3, #2
 8002468:	2608      	movs	r6, #8
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	e61b      	b.n	80020a6 <__aeabi_dmul+0x4e>
 800246e:	2303      	movs	r3, #3
 8002470:	4682      	mov	sl, r0
 8002472:	260c      	movs	r6, #12
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	e616      	b.n	80020a6 <__aeabi_dmul+0x4e>
 8002478:	2300      	movs	r3, #0
 800247a:	469b      	mov	fp, r3
 800247c:	3301      	adds	r3, #1
 800247e:	2604      	movs	r6, #4
 8002480:	2500      	movs	r5, #0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	e60f      	b.n	80020a6 <__aeabi_dmul+0x4e>
 8002486:	4642      	mov	r2, r8
 8002488:	3301      	adds	r3, #1
 800248a:	9501      	str	r5, [sp, #4]
 800248c:	431e      	orrs	r6, r3
 800248e:	9b01      	ldr	r3, [sp, #4]
 8002490:	407a      	eors	r2, r7
 8002492:	3301      	adds	r3, #1
 8002494:	2400      	movs	r4, #0
 8002496:	2000      	movs	r0, #0
 8002498:	2101      	movs	r1, #1
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	9302      	str	r3, [sp, #8]
 800249e:	2e0a      	cmp	r6, #10
 80024a0:	dd00      	ble.n	80024a4 <__aeabi_dmul+0x44c>
 80024a2:	e621      	b.n	80020e8 <__aeabi_dmul+0x90>
 80024a4:	e63d      	b.n	8002122 <__aeabi_dmul+0xca>
 80024a6:	2101      	movs	r1, #1
 80024a8:	1ac9      	subs	r1, r1, r3
 80024aa:	2938      	cmp	r1, #56	; 0x38
 80024ac:	dd00      	ble.n	80024b0 <__aeabi_dmul+0x458>
 80024ae:	e642      	b.n	8002136 <__aeabi_dmul+0xde>
 80024b0:	291f      	cmp	r1, #31
 80024b2:	dd47      	ble.n	8002544 <__aeabi_dmul+0x4ec>
 80024b4:	261f      	movs	r6, #31
 80024b6:	0025      	movs	r5, r4
 80024b8:	4276      	negs	r6, r6
 80024ba:	1af3      	subs	r3, r6, r3
 80024bc:	40dd      	lsrs	r5, r3
 80024be:	002b      	movs	r3, r5
 80024c0:	2920      	cmp	r1, #32
 80024c2:	d005      	beq.n	80024d0 <__aeabi_dmul+0x478>
 80024c4:	4942      	ldr	r1, [pc, #264]	; (80025d0 <__aeabi_dmul+0x578>)
 80024c6:	9d02      	ldr	r5, [sp, #8]
 80024c8:	468c      	mov	ip, r1
 80024ca:	4465      	add	r5, ip
 80024cc:	40ac      	lsls	r4, r5
 80024ce:	4320      	orrs	r0, r4
 80024d0:	1e41      	subs	r1, r0, #1
 80024d2:	4188      	sbcs	r0, r1
 80024d4:	4318      	orrs	r0, r3
 80024d6:	2307      	movs	r3, #7
 80024d8:	001d      	movs	r5, r3
 80024da:	2400      	movs	r4, #0
 80024dc:	4005      	ands	r5, r0
 80024de:	4203      	tst	r3, r0
 80024e0:	d04a      	beq.n	8002578 <__aeabi_dmul+0x520>
 80024e2:	230f      	movs	r3, #15
 80024e4:	2400      	movs	r4, #0
 80024e6:	4003      	ands	r3, r0
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d042      	beq.n	8002572 <__aeabi_dmul+0x51a>
 80024ec:	1d03      	adds	r3, r0, #4
 80024ee:	4283      	cmp	r3, r0
 80024f0:	4180      	sbcs	r0, r0
 80024f2:	4240      	negs	r0, r0
 80024f4:	1824      	adds	r4, r4, r0
 80024f6:	0018      	movs	r0, r3
 80024f8:	0223      	lsls	r3, r4, #8
 80024fa:	d53a      	bpl.n	8002572 <__aeabi_dmul+0x51a>
 80024fc:	2301      	movs	r3, #1
 80024fe:	2400      	movs	r4, #0
 8002500:	2500      	movs	r5, #0
 8002502:	e61b      	b.n	800213c <__aeabi_dmul+0xe4>
 8002504:	f000 fd64 	bl	8002fd0 <__clzsi2>
 8002508:	0001      	movs	r1, r0
 800250a:	0003      	movs	r3, r0
 800250c:	3115      	adds	r1, #21
 800250e:	3320      	adds	r3, #32
 8002510:	291c      	cmp	r1, #28
 8002512:	dd8f      	ble.n	8002434 <__aeabi_dmul+0x3dc>
 8002514:	3808      	subs	r0, #8
 8002516:	2200      	movs	r2, #0
 8002518:	4084      	lsls	r4, r0
 800251a:	4692      	mov	sl, r2
 800251c:	46a3      	mov	fp, r4
 800251e:	e796      	b.n	800244e <__aeabi_dmul+0x3f6>
 8002520:	f000 fd56 	bl	8002fd0 <__clzsi2>
 8002524:	0001      	movs	r1, r0
 8002526:	0003      	movs	r3, r0
 8002528:	3115      	adds	r1, #21
 800252a:	3320      	adds	r3, #32
 800252c:	291c      	cmp	r1, #28
 800252e:	dc00      	bgt.n	8002532 <__aeabi_dmul+0x4da>
 8002530:	e758      	b.n	80023e4 <__aeabi_dmul+0x38c>
 8002532:	0002      	movs	r2, r0
 8002534:	464c      	mov	r4, r9
 8002536:	3a08      	subs	r2, #8
 8002538:	2000      	movs	r0, #0
 800253a:	4094      	lsls	r4, r2
 800253c:	e75d      	b.n	80023fa <__aeabi_dmul+0x3a2>
 800253e:	9b01      	ldr	r3, [sp, #4]
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	e711      	b.n	8002368 <__aeabi_dmul+0x310>
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <__aeabi_dmul+0x57c>)
 8002546:	0026      	movs	r6, r4
 8002548:	469c      	mov	ip, r3
 800254a:	0003      	movs	r3, r0
 800254c:	9d02      	ldr	r5, [sp, #8]
 800254e:	40cb      	lsrs	r3, r1
 8002550:	4465      	add	r5, ip
 8002552:	40ae      	lsls	r6, r5
 8002554:	431e      	orrs	r6, r3
 8002556:	0003      	movs	r3, r0
 8002558:	40ab      	lsls	r3, r5
 800255a:	1e58      	subs	r0, r3, #1
 800255c:	4183      	sbcs	r3, r0
 800255e:	0030      	movs	r0, r6
 8002560:	4318      	orrs	r0, r3
 8002562:	40cc      	lsrs	r4, r1
 8002564:	0743      	lsls	r3, r0, #29
 8002566:	d0c7      	beq.n	80024f8 <__aeabi_dmul+0x4a0>
 8002568:	230f      	movs	r3, #15
 800256a:	4003      	ands	r3, r0
 800256c:	2b04      	cmp	r3, #4
 800256e:	d1bd      	bne.n	80024ec <__aeabi_dmul+0x494>
 8002570:	e7c2      	b.n	80024f8 <__aeabi_dmul+0x4a0>
 8002572:	0765      	lsls	r5, r4, #29
 8002574:	0264      	lsls	r4, r4, #9
 8002576:	0b24      	lsrs	r4, r4, #12
 8002578:	08c0      	lsrs	r0, r0, #3
 800257a:	2300      	movs	r3, #0
 800257c:	4305      	orrs	r5, r0
 800257e:	e5dd      	b.n	800213c <__aeabi_dmul+0xe4>
 8002580:	2500      	movs	r5, #0
 8002582:	2302      	movs	r3, #2
 8002584:	2e0f      	cmp	r6, #15
 8002586:	d10c      	bne.n	80025a2 <__aeabi_dmul+0x54a>
 8002588:	2480      	movs	r4, #128	; 0x80
 800258a:	465b      	mov	r3, fp
 800258c:	0324      	lsls	r4, r4, #12
 800258e:	4223      	tst	r3, r4
 8002590:	d00e      	beq.n	80025b0 <__aeabi_dmul+0x558>
 8002592:	4221      	tst	r1, r4
 8002594:	d10c      	bne.n	80025b0 <__aeabi_dmul+0x558>
 8002596:	430c      	orrs	r4, r1
 8002598:	0324      	lsls	r4, r4, #12
 800259a:	003a      	movs	r2, r7
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <__aeabi_dmul+0x580>)
 800259e:	0b24      	lsrs	r4, r4, #12
 80025a0:	e5cc      	b.n	800213c <__aeabi_dmul+0xe4>
 80025a2:	2e0b      	cmp	r6, #11
 80025a4:	d000      	beq.n	80025a8 <__aeabi_dmul+0x550>
 80025a6:	e5a2      	b.n	80020ee <__aeabi_dmul+0x96>
 80025a8:	468b      	mov	fp, r1
 80025aa:	46aa      	mov	sl, r5
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	e5f7      	b.n	80021a0 <__aeabi_dmul+0x148>
 80025b0:	2480      	movs	r4, #128	; 0x80
 80025b2:	465b      	mov	r3, fp
 80025b4:	0324      	lsls	r4, r4, #12
 80025b6:	431c      	orrs	r4, r3
 80025b8:	0324      	lsls	r4, r4, #12
 80025ba:	4642      	mov	r2, r8
 80025bc:	4655      	mov	r5, sl
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <__aeabi_dmul+0x580>)
 80025c0:	0b24      	lsrs	r4, r4, #12
 80025c2:	e5bb      	b.n	800213c <__aeabi_dmul+0xe4>
 80025c4:	464d      	mov	r5, r9
 80025c6:	0021      	movs	r1, r4
 80025c8:	2303      	movs	r3, #3
 80025ca:	e7db      	b.n	8002584 <__aeabi_dmul+0x52c>
 80025cc:	fffffc0d 	.word	0xfffffc0d
 80025d0:	0000043e 	.word	0x0000043e
 80025d4:	0000041e 	.word	0x0000041e
 80025d8:	000007ff 	.word	0x000007ff

080025dc <__aeabi_dsub>:
 80025dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025de:	4657      	mov	r7, sl
 80025e0:	464e      	mov	r6, r9
 80025e2:	4645      	mov	r5, r8
 80025e4:	46de      	mov	lr, fp
 80025e6:	b5e0      	push	{r5, r6, r7, lr}
 80025e8:	000d      	movs	r5, r1
 80025ea:	0004      	movs	r4, r0
 80025ec:	0019      	movs	r1, r3
 80025ee:	0010      	movs	r0, r2
 80025f0:	032b      	lsls	r3, r5, #12
 80025f2:	0a5b      	lsrs	r3, r3, #9
 80025f4:	0f62      	lsrs	r2, r4, #29
 80025f6:	431a      	orrs	r2, r3
 80025f8:	00e3      	lsls	r3, r4, #3
 80025fa:	030c      	lsls	r4, r1, #12
 80025fc:	0a64      	lsrs	r4, r4, #9
 80025fe:	0f47      	lsrs	r7, r0, #29
 8002600:	4327      	orrs	r7, r4
 8002602:	4cd0      	ldr	r4, [pc, #832]	; (8002944 <__aeabi_dsub+0x368>)
 8002604:	006e      	lsls	r6, r5, #1
 8002606:	4691      	mov	r9, r2
 8002608:	b083      	sub	sp, #12
 800260a:	004a      	lsls	r2, r1, #1
 800260c:	00c0      	lsls	r0, r0, #3
 800260e:	4698      	mov	r8, r3
 8002610:	46a2      	mov	sl, r4
 8002612:	0d76      	lsrs	r6, r6, #21
 8002614:	0fed      	lsrs	r5, r5, #31
 8002616:	0d52      	lsrs	r2, r2, #21
 8002618:	0fc9      	lsrs	r1, r1, #31
 800261a:	9001      	str	r0, [sp, #4]
 800261c:	42a2      	cmp	r2, r4
 800261e:	d100      	bne.n	8002622 <__aeabi_dsub+0x46>
 8002620:	e0b9      	b.n	8002796 <__aeabi_dsub+0x1ba>
 8002622:	2401      	movs	r4, #1
 8002624:	4061      	eors	r1, r4
 8002626:	468b      	mov	fp, r1
 8002628:	428d      	cmp	r5, r1
 800262a:	d100      	bne.n	800262e <__aeabi_dsub+0x52>
 800262c:	e08d      	b.n	800274a <__aeabi_dsub+0x16e>
 800262e:	1ab4      	subs	r4, r6, r2
 8002630:	46a4      	mov	ip, r4
 8002632:	2c00      	cmp	r4, #0
 8002634:	dc00      	bgt.n	8002638 <__aeabi_dsub+0x5c>
 8002636:	e0b7      	b.n	80027a8 <__aeabi_dsub+0x1cc>
 8002638:	2a00      	cmp	r2, #0
 800263a:	d100      	bne.n	800263e <__aeabi_dsub+0x62>
 800263c:	e0cb      	b.n	80027d6 <__aeabi_dsub+0x1fa>
 800263e:	4ac1      	ldr	r2, [pc, #772]	; (8002944 <__aeabi_dsub+0x368>)
 8002640:	4296      	cmp	r6, r2
 8002642:	d100      	bne.n	8002646 <__aeabi_dsub+0x6a>
 8002644:	e186      	b.n	8002954 <__aeabi_dsub+0x378>
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	0412      	lsls	r2, r2, #16
 800264a:	4317      	orrs	r7, r2
 800264c:	4662      	mov	r2, ip
 800264e:	2a38      	cmp	r2, #56	; 0x38
 8002650:	dd00      	ble.n	8002654 <__aeabi_dsub+0x78>
 8002652:	e1a4      	b.n	800299e <__aeabi_dsub+0x3c2>
 8002654:	2a1f      	cmp	r2, #31
 8002656:	dd00      	ble.n	800265a <__aeabi_dsub+0x7e>
 8002658:	e21d      	b.n	8002a96 <__aeabi_dsub+0x4ba>
 800265a:	4661      	mov	r1, ip
 800265c:	2220      	movs	r2, #32
 800265e:	003c      	movs	r4, r7
 8002660:	1a52      	subs	r2, r2, r1
 8002662:	0001      	movs	r1, r0
 8002664:	4090      	lsls	r0, r2
 8002666:	4094      	lsls	r4, r2
 8002668:	1e42      	subs	r2, r0, #1
 800266a:	4190      	sbcs	r0, r2
 800266c:	4662      	mov	r2, ip
 800266e:	46a0      	mov	r8, r4
 8002670:	4664      	mov	r4, ip
 8002672:	40d7      	lsrs	r7, r2
 8002674:	464a      	mov	r2, r9
 8002676:	40e1      	lsrs	r1, r4
 8002678:	4644      	mov	r4, r8
 800267a:	1bd2      	subs	r2, r2, r7
 800267c:	4691      	mov	r9, r2
 800267e:	430c      	orrs	r4, r1
 8002680:	4304      	orrs	r4, r0
 8002682:	1b1c      	subs	r4, r3, r4
 8002684:	42a3      	cmp	r3, r4
 8002686:	4192      	sbcs	r2, r2
 8002688:	464b      	mov	r3, r9
 800268a:	4252      	negs	r2, r2
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	469a      	mov	sl, r3
 8002690:	4653      	mov	r3, sl
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	d400      	bmi.n	8002698 <__aeabi_dsub+0xbc>
 8002696:	e12b      	b.n	80028f0 <__aeabi_dsub+0x314>
 8002698:	4653      	mov	r3, sl
 800269a:	025a      	lsls	r2, r3, #9
 800269c:	0a53      	lsrs	r3, r2, #9
 800269e:	469a      	mov	sl, r3
 80026a0:	4653      	mov	r3, sl
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d100      	bne.n	80026a8 <__aeabi_dsub+0xcc>
 80026a6:	e166      	b.n	8002976 <__aeabi_dsub+0x39a>
 80026a8:	4650      	mov	r0, sl
 80026aa:	f000 fc91 	bl	8002fd0 <__clzsi2>
 80026ae:	0003      	movs	r3, r0
 80026b0:	3b08      	subs	r3, #8
 80026b2:	2220      	movs	r2, #32
 80026b4:	0020      	movs	r0, r4
 80026b6:	1ad2      	subs	r2, r2, r3
 80026b8:	4651      	mov	r1, sl
 80026ba:	40d0      	lsrs	r0, r2
 80026bc:	4099      	lsls	r1, r3
 80026be:	0002      	movs	r2, r0
 80026c0:	409c      	lsls	r4, r3
 80026c2:	430a      	orrs	r2, r1
 80026c4:	429e      	cmp	r6, r3
 80026c6:	dd00      	ble.n	80026ca <__aeabi_dsub+0xee>
 80026c8:	e164      	b.n	8002994 <__aeabi_dsub+0x3b8>
 80026ca:	1b9b      	subs	r3, r3, r6
 80026cc:	1c59      	adds	r1, r3, #1
 80026ce:	291f      	cmp	r1, #31
 80026d0:	dd00      	ble.n	80026d4 <__aeabi_dsub+0xf8>
 80026d2:	e0fe      	b.n	80028d2 <__aeabi_dsub+0x2f6>
 80026d4:	2320      	movs	r3, #32
 80026d6:	0010      	movs	r0, r2
 80026d8:	0026      	movs	r6, r4
 80026da:	1a5b      	subs	r3, r3, r1
 80026dc:	409c      	lsls	r4, r3
 80026de:	4098      	lsls	r0, r3
 80026e0:	40ce      	lsrs	r6, r1
 80026e2:	40ca      	lsrs	r2, r1
 80026e4:	1e63      	subs	r3, r4, #1
 80026e6:	419c      	sbcs	r4, r3
 80026e8:	4330      	orrs	r0, r6
 80026ea:	4692      	mov	sl, r2
 80026ec:	2600      	movs	r6, #0
 80026ee:	4304      	orrs	r4, r0
 80026f0:	0763      	lsls	r3, r4, #29
 80026f2:	d009      	beq.n	8002708 <__aeabi_dsub+0x12c>
 80026f4:	230f      	movs	r3, #15
 80026f6:	4023      	ands	r3, r4
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d005      	beq.n	8002708 <__aeabi_dsub+0x12c>
 80026fc:	1d23      	adds	r3, r4, #4
 80026fe:	42a3      	cmp	r3, r4
 8002700:	41a4      	sbcs	r4, r4
 8002702:	4264      	negs	r4, r4
 8002704:	44a2      	add	sl, r4
 8002706:	001c      	movs	r4, r3
 8002708:	4653      	mov	r3, sl
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	d400      	bmi.n	8002710 <__aeabi_dsub+0x134>
 800270e:	e0f2      	b.n	80028f6 <__aeabi_dsub+0x31a>
 8002710:	4b8c      	ldr	r3, [pc, #560]	; (8002944 <__aeabi_dsub+0x368>)
 8002712:	3601      	adds	r6, #1
 8002714:	429e      	cmp	r6, r3
 8002716:	d100      	bne.n	800271a <__aeabi_dsub+0x13e>
 8002718:	e10f      	b.n	800293a <__aeabi_dsub+0x35e>
 800271a:	4653      	mov	r3, sl
 800271c:	498a      	ldr	r1, [pc, #552]	; (8002948 <__aeabi_dsub+0x36c>)
 800271e:	08e4      	lsrs	r4, r4, #3
 8002720:	400b      	ands	r3, r1
 8002722:	0019      	movs	r1, r3
 8002724:	075b      	lsls	r3, r3, #29
 8002726:	4323      	orrs	r3, r4
 8002728:	0572      	lsls	r2, r6, #21
 800272a:	024c      	lsls	r4, r1, #9
 800272c:	0b24      	lsrs	r4, r4, #12
 800272e:	0d52      	lsrs	r2, r2, #21
 8002730:	0512      	lsls	r2, r2, #20
 8002732:	4322      	orrs	r2, r4
 8002734:	07ed      	lsls	r5, r5, #31
 8002736:	432a      	orrs	r2, r5
 8002738:	0018      	movs	r0, r3
 800273a:	0011      	movs	r1, r2
 800273c:	b003      	add	sp, #12
 800273e:	bcf0      	pop	{r4, r5, r6, r7}
 8002740:	46bb      	mov	fp, r7
 8002742:	46b2      	mov	sl, r6
 8002744:	46a9      	mov	r9, r5
 8002746:	46a0      	mov	r8, r4
 8002748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800274a:	1ab4      	subs	r4, r6, r2
 800274c:	46a4      	mov	ip, r4
 800274e:	2c00      	cmp	r4, #0
 8002750:	dd59      	ble.n	8002806 <__aeabi_dsub+0x22a>
 8002752:	2a00      	cmp	r2, #0
 8002754:	d100      	bne.n	8002758 <__aeabi_dsub+0x17c>
 8002756:	e0b0      	b.n	80028ba <__aeabi_dsub+0x2de>
 8002758:	4556      	cmp	r6, sl
 800275a:	d100      	bne.n	800275e <__aeabi_dsub+0x182>
 800275c:	e0fa      	b.n	8002954 <__aeabi_dsub+0x378>
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	0412      	lsls	r2, r2, #16
 8002762:	4317      	orrs	r7, r2
 8002764:	4662      	mov	r2, ip
 8002766:	2a38      	cmp	r2, #56	; 0x38
 8002768:	dd00      	ble.n	800276c <__aeabi_dsub+0x190>
 800276a:	e0d4      	b.n	8002916 <__aeabi_dsub+0x33a>
 800276c:	2a1f      	cmp	r2, #31
 800276e:	dc00      	bgt.n	8002772 <__aeabi_dsub+0x196>
 8002770:	e1c0      	b.n	8002af4 <__aeabi_dsub+0x518>
 8002772:	0039      	movs	r1, r7
 8002774:	3a20      	subs	r2, #32
 8002776:	40d1      	lsrs	r1, r2
 8002778:	4662      	mov	r2, ip
 800277a:	2a20      	cmp	r2, #32
 800277c:	d006      	beq.n	800278c <__aeabi_dsub+0x1b0>
 800277e:	4664      	mov	r4, ip
 8002780:	2240      	movs	r2, #64	; 0x40
 8002782:	1b12      	subs	r2, r2, r4
 8002784:	003c      	movs	r4, r7
 8002786:	4094      	lsls	r4, r2
 8002788:	4304      	orrs	r4, r0
 800278a:	9401      	str	r4, [sp, #4]
 800278c:	9c01      	ldr	r4, [sp, #4]
 800278e:	1e62      	subs	r2, r4, #1
 8002790:	4194      	sbcs	r4, r2
 8002792:	430c      	orrs	r4, r1
 8002794:	e0c3      	b.n	800291e <__aeabi_dsub+0x342>
 8002796:	003c      	movs	r4, r7
 8002798:	4304      	orrs	r4, r0
 800279a:	d02b      	beq.n	80027f4 <__aeabi_dsub+0x218>
 800279c:	468b      	mov	fp, r1
 800279e:	428d      	cmp	r5, r1
 80027a0:	d02e      	beq.n	8002800 <__aeabi_dsub+0x224>
 80027a2:	4c6a      	ldr	r4, [pc, #424]	; (800294c <__aeabi_dsub+0x370>)
 80027a4:	46a4      	mov	ip, r4
 80027a6:	44b4      	add	ip, r6
 80027a8:	4664      	mov	r4, ip
 80027aa:	2c00      	cmp	r4, #0
 80027ac:	d05f      	beq.n	800286e <__aeabi_dsub+0x292>
 80027ae:	1b94      	subs	r4, r2, r6
 80027b0:	46a4      	mov	ip, r4
 80027b2:	2e00      	cmp	r6, #0
 80027b4:	d000      	beq.n	80027b8 <__aeabi_dsub+0x1dc>
 80027b6:	e120      	b.n	80029fa <__aeabi_dsub+0x41e>
 80027b8:	464c      	mov	r4, r9
 80027ba:	431c      	orrs	r4, r3
 80027bc:	d100      	bne.n	80027c0 <__aeabi_dsub+0x1e4>
 80027be:	e1c7      	b.n	8002b50 <__aeabi_dsub+0x574>
 80027c0:	4661      	mov	r1, ip
 80027c2:	1e4c      	subs	r4, r1, #1
 80027c4:	2901      	cmp	r1, #1
 80027c6:	d100      	bne.n	80027ca <__aeabi_dsub+0x1ee>
 80027c8:	e223      	b.n	8002c12 <__aeabi_dsub+0x636>
 80027ca:	4d5e      	ldr	r5, [pc, #376]	; (8002944 <__aeabi_dsub+0x368>)
 80027cc:	45ac      	cmp	ip, r5
 80027ce:	d100      	bne.n	80027d2 <__aeabi_dsub+0x1f6>
 80027d0:	e1d8      	b.n	8002b84 <__aeabi_dsub+0x5a8>
 80027d2:	46a4      	mov	ip, r4
 80027d4:	e11a      	b.n	8002a0c <__aeabi_dsub+0x430>
 80027d6:	003a      	movs	r2, r7
 80027d8:	4302      	orrs	r2, r0
 80027da:	d100      	bne.n	80027de <__aeabi_dsub+0x202>
 80027dc:	e0e4      	b.n	80029a8 <__aeabi_dsub+0x3cc>
 80027de:	0022      	movs	r2, r4
 80027e0:	3a01      	subs	r2, #1
 80027e2:	2c01      	cmp	r4, #1
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x20c>
 80027e6:	e1c3      	b.n	8002b70 <__aeabi_dsub+0x594>
 80027e8:	4956      	ldr	r1, [pc, #344]	; (8002944 <__aeabi_dsub+0x368>)
 80027ea:	428c      	cmp	r4, r1
 80027ec:	d100      	bne.n	80027f0 <__aeabi_dsub+0x214>
 80027ee:	e0b1      	b.n	8002954 <__aeabi_dsub+0x378>
 80027f0:	4694      	mov	ip, r2
 80027f2:	e72b      	b.n	800264c <__aeabi_dsub+0x70>
 80027f4:	2401      	movs	r4, #1
 80027f6:	4061      	eors	r1, r4
 80027f8:	468b      	mov	fp, r1
 80027fa:	428d      	cmp	r5, r1
 80027fc:	d000      	beq.n	8002800 <__aeabi_dsub+0x224>
 80027fe:	e716      	b.n	800262e <__aeabi_dsub+0x52>
 8002800:	4952      	ldr	r1, [pc, #328]	; (800294c <__aeabi_dsub+0x370>)
 8002802:	468c      	mov	ip, r1
 8002804:	44b4      	add	ip, r6
 8002806:	4664      	mov	r4, ip
 8002808:	2c00      	cmp	r4, #0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x232>
 800280c:	e0d3      	b.n	80029b6 <__aeabi_dsub+0x3da>
 800280e:	1b91      	subs	r1, r2, r6
 8002810:	468c      	mov	ip, r1
 8002812:	2e00      	cmp	r6, #0
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x23c>
 8002816:	e15e      	b.n	8002ad6 <__aeabi_dsub+0x4fa>
 8002818:	494a      	ldr	r1, [pc, #296]	; (8002944 <__aeabi_dsub+0x368>)
 800281a:	428a      	cmp	r2, r1
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x244>
 800281e:	e1be      	b.n	8002b9e <__aeabi_dsub+0x5c2>
 8002820:	2180      	movs	r1, #128	; 0x80
 8002822:	464c      	mov	r4, r9
 8002824:	0409      	lsls	r1, r1, #16
 8002826:	430c      	orrs	r4, r1
 8002828:	46a1      	mov	r9, r4
 800282a:	4661      	mov	r1, ip
 800282c:	2938      	cmp	r1, #56	; 0x38
 800282e:	dd00      	ble.n	8002832 <__aeabi_dsub+0x256>
 8002830:	e1ba      	b.n	8002ba8 <__aeabi_dsub+0x5cc>
 8002832:	291f      	cmp	r1, #31
 8002834:	dd00      	ble.n	8002838 <__aeabi_dsub+0x25c>
 8002836:	e227      	b.n	8002c88 <__aeabi_dsub+0x6ac>
 8002838:	2420      	movs	r4, #32
 800283a:	1a64      	subs	r4, r4, r1
 800283c:	4649      	mov	r1, r9
 800283e:	40a1      	lsls	r1, r4
 8002840:	001e      	movs	r6, r3
 8002842:	4688      	mov	r8, r1
 8002844:	4661      	mov	r1, ip
 8002846:	40a3      	lsls	r3, r4
 8002848:	40ce      	lsrs	r6, r1
 800284a:	4641      	mov	r1, r8
 800284c:	1e5c      	subs	r4, r3, #1
 800284e:	41a3      	sbcs	r3, r4
 8002850:	4331      	orrs	r1, r6
 8002852:	4319      	orrs	r1, r3
 8002854:	000c      	movs	r4, r1
 8002856:	4663      	mov	r3, ip
 8002858:	4649      	mov	r1, r9
 800285a:	40d9      	lsrs	r1, r3
 800285c:	187f      	adds	r7, r7, r1
 800285e:	1824      	adds	r4, r4, r0
 8002860:	4284      	cmp	r4, r0
 8002862:	419b      	sbcs	r3, r3
 8002864:	425b      	negs	r3, r3
 8002866:	469a      	mov	sl, r3
 8002868:	0016      	movs	r6, r2
 800286a:	44ba      	add	sl, r7
 800286c:	e05d      	b.n	800292a <__aeabi_dsub+0x34e>
 800286e:	4c38      	ldr	r4, [pc, #224]	; (8002950 <__aeabi_dsub+0x374>)
 8002870:	1c72      	adds	r2, r6, #1
 8002872:	4222      	tst	r2, r4
 8002874:	d000      	beq.n	8002878 <__aeabi_dsub+0x29c>
 8002876:	e0df      	b.n	8002a38 <__aeabi_dsub+0x45c>
 8002878:	464a      	mov	r2, r9
 800287a:	431a      	orrs	r2, r3
 800287c:	2e00      	cmp	r6, #0
 800287e:	d000      	beq.n	8002882 <__aeabi_dsub+0x2a6>
 8002880:	e15c      	b.n	8002b3c <__aeabi_dsub+0x560>
 8002882:	2a00      	cmp	r2, #0
 8002884:	d100      	bne.n	8002888 <__aeabi_dsub+0x2ac>
 8002886:	e1cf      	b.n	8002c28 <__aeabi_dsub+0x64c>
 8002888:	003a      	movs	r2, r7
 800288a:	4302      	orrs	r2, r0
 800288c:	d100      	bne.n	8002890 <__aeabi_dsub+0x2b4>
 800288e:	e17f      	b.n	8002b90 <__aeabi_dsub+0x5b4>
 8002890:	1a1c      	subs	r4, r3, r0
 8002892:	464a      	mov	r2, r9
 8002894:	42a3      	cmp	r3, r4
 8002896:	4189      	sbcs	r1, r1
 8002898:	1bd2      	subs	r2, r2, r7
 800289a:	4249      	negs	r1, r1
 800289c:	1a52      	subs	r2, r2, r1
 800289e:	4692      	mov	sl, r2
 80028a0:	0212      	lsls	r2, r2, #8
 80028a2:	d400      	bmi.n	80028a6 <__aeabi_dsub+0x2ca>
 80028a4:	e20a      	b.n	8002cbc <__aeabi_dsub+0x6e0>
 80028a6:	1ac4      	subs	r4, r0, r3
 80028a8:	42a0      	cmp	r0, r4
 80028aa:	4180      	sbcs	r0, r0
 80028ac:	464b      	mov	r3, r9
 80028ae:	4240      	negs	r0, r0
 80028b0:	1aff      	subs	r7, r7, r3
 80028b2:	1a3b      	subs	r3, r7, r0
 80028b4:	469a      	mov	sl, r3
 80028b6:	465d      	mov	r5, fp
 80028b8:	e71a      	b.n	80026f0 <__aeabi_dsub+0x114>
 80028ba:	003a      	movs	r2, r7
 80028bc:	4302      	orrs	r2, r0
 80028be:	d073      	beq.n	80029a8 <__aeabi_dsub+0x3cc>
 80028c0:	0022      	movs	r2, r4
 80028c2:	3a01      	subs	r2, #1
 80028c4:	2c01      	cmp	r4, #1
 80028c6:	d100      	bne.n	80028ca <__aeabi_dsub+0x2ee>
 80028c8:	e0cb      	b.n	8002a62 <__aeabi_dsub+0x486>
 80028ca:	4554      	cmp	r4, sl
 80028cc:	d042      	beq.n	8002954 <__aeabi_dsub+0x378>
 80028ce:	4694      	mov	ip, r2
 80028d0:	e748      	b.n	8002764 <__aeabi_dsub+0x188>
 80028d2:	0010      	movs	r0, r2
 80028d4:	3b1f      	subs	r3, #31
 80028d6:	40d8      	lsrs	r0, r3
 80028d8:	2920      	cmp	r1, #32
 80028da:	d003      	beq.n	80028e4 <__aeabi_dsub+0x308>
 80028dc:	2340      	movs	r3, #64	; 0x40
 80028de:	1a5b      	subs	r3, r3, r1
 80028e0:	409a      	lsls	r2, r3
 80028e2:	4314      	orrs	r4, r2
 80028e4:	1e63      	subs	r3, r4, #1
 80028e6:	419c      	sbcs	r4, r3
 80028e8:	2300      	movs	r3, #0
 80028ea:	2600      	movs	r6, #0
 80028ec:	469a      	mov	sl, r3
 80028ee:	4304      	orrs	r4, r0
 80028f0:	0763      	lsls	r3, r4, #29
 80028f2:	d000      	beq.n	80028f6 <__aeabi_dsub+0x31a>
 80028f4:	e6fe      	b.n	80026f4 <__aeabi_dsub+0x118>
 80028f6:	4652      	mov	r2, sl
 80028f8:	08e3      	lsrs	r3, r4, #3
 80028fa:	0752      	lsls	r2, r2, #29
 80028fc:	4313      	orrs	r3, r2
 80028fe:	4652      	mov	r2, sl
 8002900:	46b4      	mov	ip, r6
 8002902:	08d2      	lsrs	r2, r2, #3
 8002904:	490f      	ldr	r1, [pc, #60]	; (8002944 <__aeabi_dsub+0x368>)
 8002906:	458c      	cmp	ip, r1
 8002908:	d02a      	beq.n	8002960 <__aeabi_dsub+0x384>
 800290a:	0312      	lsls	r2, r2, #12
 800290c:	0b14      	lsrs	r4, r2, #12
 800290e:	4662      	mov	r2, ip
 8002910:	0552      	lsls	r2, r2, #21
 8002912:	0d52      	lsrs	r2, r2, #21
 8002914:	e70c      	b.n	8002730 <__aeabi_dsub+0x154>
 8002916:	003c      	movs	r4, r7
 8002918:	4304      	orrs	r4, r0
 800291a:	1e62      	subs	r2, r4, #1
 800291c:	4194      	sbcs	r4, r2
 800291e:	18e4      	adds	r4, r4, r3
 8002920:	429c      	cmp	r4, r3
 8002922:	4192      	sbcs	r2, r2
 8002924:	4252      	negs	r2, r2
 8002926:	444a      	add	r2, r9
 8002928:	4692      	mov	sl, r2
 800292a:	4653      	mov	r3, sl
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	d5df      	bpl.n	80028f0 <__aeabi_dsub+0x314>
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <__aeabi_dsub+0x368>)
 8002932:	3601      	adds	r6, #1
 8002934:	429e      	cmp	r6, r3
 8002936:	d000      	beq.n	800293a <__aeabi_dsub+0x35e>
 8002938:	e0a0      	b.n	8002a7c <__aeabi_dsub+0x4a0>
 800293a:	0032      	movs	r2, r6
 800293c:	2400      	movs	r4, #0
 800293e:	2300      	movs	r3, #0
 8002940:	e6f6      	b.n	8002730 <__aeabi_dsub+0x154>
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	000007ff 	.word	0x000007ff
 8002948:	ff7fffff 	.word	0xff7fffff
 800294c:	fffff801 	.word	0xfffff801
 8002950:	000007fe 	.word	0x000007fe
 8002954:	08db      	lsrs	r3, r3, #3
 8002956:	464a      	mov	r2, r9
 8002958:	0752      	lsls	r2, r2, #29
 800295a:	4313      	orrs	r3, r2
 800295c:	464a      	mov	r2, r9
 800295e:	08d2      	lsrs	r2, r2, #3
 8002960:	0019      	movs	r1, r3
 8002962:	4311      	orrs	r1, r2
 8002964:	d100      	bne.n	8002968 <__aeabi_dsub+0x38c>
 8002966:	e1b5      	b.n	8002cd4 <__aeabi_dsub+0x6f8>
 8002968:	2480      	movs	r4, #128	; 0x80
 800296a:	0324      	lsls	r4, r4, #12
 800296c:	4314      	orrs	r4, r2
 800296e:	0324      	lsls	r4, r4, #12
 8002970:	4ad5      	ldr	r2, [pc, #852]	; (8002cc8 <__aeabi_dsub+0x6ec>)
 8002972:	0b24      	lsrs	r4, r4, #12
 8002974:	e6dc      	b.n	8002730 <__aeabi_dsub+0x154>
 8002976:	0020      	movs	r0, r4
 8002978:	f000 fb2a 	bl	8002fd0 <__clzsi2>
 800297c:	0003      	movs	r3, r0
 800297e:	3318      	adds	r3, #24
 8002980:	2b1f      	cmp	r3, #31
 8002982:	dc00      	bgt.n	8002986 <__aeabi_dsub+0x3aa>
 8002984:	e695      	b.n	80026b2 <__aeabi_dsub+0xd6>
 8002986:	0022      	movs	r2, r4
 8002988:	3808      	subs	r0, #8
 800298a:	4082      	lsls	r2, r0
 800298c:	2400      	movs	r4, #0
 800298e:	429e      	cmp	r6, r3
 8002990:	dc00      	bgt.n	8002994 <__aeabi_dsub+0x3b8>
 8002992:	e69a      	b.n	80026ca <__aeabi_dsub+0xee>
 8002994:	1af6      	subs	r6, r6, r3
 8002996:	4bcd      	ldr	r3, [pc, #820]	; (8002ccc <__aeabi_dsub+0x6f0>)
 8002998:	401a      	ands	r2, r3
 800299a:	4692      	mov	sl, r2
 800299c:	e6a8      	b.n	80026f0 <__aeabi_dsub+0x114>
 800299e:	003c      	movs	r4, r7
 80029a0:	4304      	orrs	r4, r0
 80029a2:	1e62      	subs	r2, r4, #1
 80029a4:	4194      	sbcs	r4, r2
 80029a6:	e66c      	b.n	8002682 <__aeabi_dsub+0xa6>
 80029a8:	464a      	mov	r2, r9
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	0752      	lsls	r2, r2, #29
 80029ae:	4313      	orrs	r3, r2
 80029b0:	464a      	mov	r2, r9
 80029b2:	08d2      	lsrs	r2, r2, #3
 80029b4:	e7a6      	b.n	8002904 <__aeabi_dsub+0x328>
 80029b6:	4cc6      	ldr	r4, [pc, #792]	; (8002cd0 <__aeabi_dsub+0x6f4>)
 80029b8:	1c72      	adds	r2, r6, #1
 80029ba:	4222      	tst	r2, r4
 80029bc:	d000      	beq.n	80029c0 <__aeabi_dsub+0x3e4>
 80029be:	e0ac      	b.n	8002b1a <__aeabi_dsub+0x53e>
 80029c0:	464a      	mov	r2, r9
 80029c2:	431a      	orrs	r2, r3
 80029c4:	2e00      	cmp	r6, #0
 80029c6:	d000      	beq.n	80029ca <__aeabi_dsub+0x3ee>
 80029c8:	e105      	b.n	8002bd6 <__aeabi_dsub+0x5fa>
 80029ca:	2a00      	cmp	r2, #0
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x3f4>
 80029ce:	e156      	b.n	8002c7e <__aeabi_dsub+0x6a2>
 80029d0:	003a      	movs	r2, r7
 80029d2:	4302      	orrs	r2, r0
 80029d4:	d100      	bne.n	80029d8 <__aeabi_dsub+0x3fc>
 80029d6:	e0db      	b.n	8002b90 <__aeabi_dsub+0x5b4>
 80029d8:	181c      	adds	r4, r3, r0
 80029da:	429c      	cmp	r4, r3
 80029dc:	419b      	sbcs	r3, r3
 80029de:	444f      	add	r7, r9
 80029e0:	46ba      	mov	sl, r7
 80029e2:	425b      	negs	r3, r3
 80029e4:	449a      	add	sl, r3
 80029e6:	4653      	mov	r3, sl
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	d400      	bmi.n	80029ee <__aeabi_dsub+0x412>
 80029ec:	e780      	b.n	80028f0 <__aeabi_dsub+0x314>
 80029ee:	4652      	mov	r2, sl
 80029f0:	4bb6      	ldr	r3, [pc, #728]	; (8002ccc <__aeabi_dsub+0x6f0>)
 80029f2:	2601      	movs	r6, #1
 80029f4:	401a      	ands	r2, r3
 80029f6:	4692      	mov	sl, r2
 80029f8:	e77a      	b.n	80028f0 <__aeabi_dsub+0x314>
 80029fa:	4cb3      	ldr	r4, [pc, #716]	; (8002cc8 <__aeabi_dsub+0x6ec>)
 80029fc:	42a2      	cmp	r2, r4
 80029fe:	d100      	bne.n	8002a02 <__aeabi_dsub+0x426>
 8002a00:	e0c0      	b.n	8002b84 <__aeabi_dsub+0x5a8>
 8002a02:	2480      	movs	r4, #128	; 0x80
 8002a04:	464d      	mov	r5, r9
 8002a06:	0424      	lsls	r4, r4, #16
 8002a08:	4325      	orrs	r5, r4
 8002a0a:	46a9      	mov	r9, r5
 8002a0c:	4664      	mov	r4, ip
 8002a0e:	2c38      	cmp	r4, #56	; 0x38
 8002a10:	dc53      	bgt.n	8002aba <__aeabi_dsub+0x4de>
 8002a12:	4661      	mov	r1, ip
 8002a14:	2c1f      	cmp	r4, #31
 8002a16:	dd00      	ble.n	8002a1a <__aeabi_dsub+0x43e>
 8002a18:	e0cd      	b.n	8002bb6 <__aeabi_dsub+0x5da>
 8002a1a:	2520      	movs	r5, #32
 8002a1c:	001e      	movs	r6, r3
 8002a1e:	1b2d      	subs	r5, r5, r4
 8002a20:	464c      	mov	r4, r9
 8002a22:	40ab      	lsls	r3, r5
 8002a24:	40ac      	lsls	r4, r5
 8002a26:	40ce      	lsrs	r6, r1
 8002a28:	1e5d      	subs	r5, r3, #1
 8002a2a:	41ab      	sbcs	r3, r5
 8002a2c:	4334      	orrs	r4, r6
 8002a2e:	4323      	orrs	r3, r4
 8002a30:	464c      	mov	r4, r9
 8002a32:	40cc      	lsrs	r4, r1
 8002a34:	1b3f      	subs	r7, r7, r4
 8002a36:	e045      	b.n	8002ac4 <__aeabi_dsub+0x4e8>
 8002a38:	464a      	mov	r2, r9
 8002a3a:	1a1c      	subs	r4, r3, r0
 8002a3c:	1bd1      	subs	r1, r2, r7
 8002a3e:	42a3      	cmp	r3, r4
 8002a40:	4192      	sbcs	r2, r2
 8002a42:	4252      	negs	r2, r2
 8002a44:	4692      	mov	sl, r2
 8002a46:	000a      	movs	r2, r1
 8002a48:	4651      	mov	r1, sl
 8002a4a:	1a52      	subs	r2, r2, r1
 8002a4c:	4692      	mov	sl, r2
 8002a4e:	0212      	lsls	r2, r2, #8
 8002a50:	d500      	bpl.n	8002a54 <__aeabi_dsub+0x478>
 8002a52:	e083      	b.n	8002b5c <__aeabi_dsub+0x580>
 8002a54:	4653      	mov	r3, sl
 8002a56:	4323      	orrs	r3, r4
 8002a58:	d000      	beq.n	8002a5c <__aeabi_dsub+0x480>
 8002a5a:	e621      	b.n	80026a0 <__aeabi_dsub+0xc4>
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2500      	movs	r5, #0
 8002a60:	e753      	b.n	800290a <__aeabi_dsub+0x32e>
 8002a62:	181c      	adds	r4, r3, r0
 8002a64:	429c      	cmp	r4, r3
 8002a66:	419b      	sbcs	r3, r3
 8002a68:	444f      	add	r7, r9
 8002a6a:	46ba      	mov	sl, r7
 8002a6c:	425b      	negs	r3, r3
 8002a6e:	449a      	add	sl, r3
 8002a70:	4653      	mov	r3, sl
 8002a72:	2601      	movs	r6, #1
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	d400      	bmi.n	8002a7a <__aeabi_dsub+0x49e>
 8002a78:	e73a      	b.n	80028f0 <__aeabi_dsub+0x314>
 8002a7a:	2602      	movs	r6, #2
 8002a7c:	4652      	mov	r2, sl
 8002a7e:	4b93      	ldr	r3, [pc, #588]	; (8002ccc <__aeabi_dsub+0x6f0>)
 8002a80:	2101      	movs	r1, #1
 8002a82:	401a      	ands	r2, r3
 8002a84:	0013      	movs	r3, r2
 8002a86:	4021      	ands	r1, r4
 8002a88:	0862      	lsrs	r2, r4, #1
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	07dc      	lsls	r4, r3, #31
 8002a8e:	085b      	lsrs	r3, r3, #1
 8002a90:	469a      	mov	sl, r3
 8002a92:	4314      	orrs	r4, r2
 8002a94:	e62c      	b.n	80026f0 <__aeabi_dsub+0x114>
 8002a96:	0039      	movs	r1, r7
 8002a98:	3a20      	subs	r2, #32
 8002a9a:	40d1      	lsrs	r1, r2
 8002a9c:	4662      	mov	r2, ip
 8002a9e:	2a20      	cmp	r2, #32
 8002aa0:	d006      	beq.n	8002ab0 <__aeabi_dsub+0x4d4>
 8002aa2:	4664      	mov	r4, ip
 8002aa4:	2240      	movs	r2, #64	; 0x40
 8002aa6:	1b12      	subs	r2, r2, r4
 8002aa8:	003c      	movs	r4, r7
 8002aaa:	4094      	lsls	r4, r2
 8002aac:	4304      	orrs	r4, r0
 8002aae:	9401      	str	r4, [sp, #4]
 8002ab0:	9c01      	ldr	r4, [sp, #4]
 8002ab2:	1e62      	subs	r2, r4, #1
 8002ab4:	4194      	sbcs	r4, r2
 8002ab6:	430c      	orrs	r4, r1
 8002ab8:	e5e3      	b.n	8002682 <__aeabi_dsub+0xa6>
 8002aba:	4649      	mov	r1, r9
 8002abc:	4319      	orrs	r1, r3
 8002abe:	000b      	movs	r3, r1
 8002ac0:	1e5c      	subs	r4, r3, #1
 8002ac2:	41a3      	sbcs	r3, r4
 8002ac4:	1ac4      	subs	r4, r0, r3
 8002ac6:	42a0      	cmp	r0, r4
 8002ac8:	419b      	sbcs	r3, r3
 8002aca:	425b      	negs	r3, r3
 8002acc:	1afb      	subs	r3, r7, r3
 8002ace:	469a      	mov	sl, r3
 8002ad0:	465d      	mov	r5, fp
 8002ad2:	0016      	movs	r6, r2
 8002ad4:	e5dc      	b.n	8002690 <__aeabi_dsub+0xb4>
 8002ad6:	4649      	mov	r1, r9
 8002ad8:	4319      	orrs	r1, r3
 8002ada:	d100      	bne.n	8002ade <__aeabi_dsub+0x502>
 8002adc:	e0ae      	b.n	8002c3c <__aeabi_dsub+0x660>
 8002ade:	4661      	mov	r1, ip
 8002ae0:	4664      	mov	r4, ip
 8002ae2:	3901      	subs	r1, #1
 8002ae4:	2c01      	cmp	r4, #1
 8002ae6:	d100      	bne.n	8002aea <__aeabi_dsub+0x50e>
 8002ae8:	e0e0      	b.n	8002cac <__aeabi_dsub+0x6d0>
 8002aea:	4c77      	ldr	r4, [pc, #476]	; (8002cc8 <__aeabi_dsub+0x6ec>)
 8002aec:	45a4      	cmp	ip, r4
 8002aee:	d056      	beq.n	8002b9e <__aeabi_dsub+0x5c2>
 8002af0:	468c      	mov	ip, r1
 8002af2:	e69a      	b.n	800282a <__aeabi_dsub+0x24e>
 8002af4:	4661      	mov	r1, ip
 8002af6:	2220      	movs	r2, #32
 8002af8:	003c      	movs	r4, r7
 8002afa:	1a52      	subs	r2, r2, r1
 8002afc:	4094      	lsls	r4, r2
 8002afe:	0001      	movs	r1, r0
 8002b00:	4090      	lsls	r0, r2
 8002b02:	46a0      	mov	r8, r4
 8002b04:	4664      	mov	r4, ip
 8002b06:	1e42      	subs	r2, r0, #1
 8002b08:	4190      	sbcs	r0, r2
 8002b0a:	4662      	mov	r2, ip
 8002b0c:	40e1      	lsrs	r1, r4
 8002b0e:	4644      	mov	r4, r8
 8002b10:	40d7      	lsrs	r7, r2
 8002b12:	430c      	orrs	r4, r1
 8002b14:	4304      	orrs	r4, r0
 8002b16:	44b9      	add	r9, r7
 8002b18:	e701      	b.n	800291e <__aeabi_dsub+0x342>
 8002b1a:	496b      	ldr	r1, [pc, #428]	; (8002cc8 <__aeabi_dsub+0x6ec>)
 8002b1c:	428a      	cmp	r2, r1
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x546>
 8002b20:	e70c      	b.n	800293c <__aeabi_dsub+0x360>
 8002b22:	1818      	adds	r0, r3, r0
 8002b24:	4298      	cmp	r0, r3
 8002b26:	419b      	sbcs	r3, r3
 8002b28:	444f      	add	r7, r9
 8002b2a:	425b      	negs	r3, r3
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	07dc      	lsls	r4, r3, #31
 8002b30:	0840      	lsrs	r0, r0, #1
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	469a      	mov	sl, r3
 8002b36:	0016      	movs	r6, r2
 8002b38:	4304      	orrs	r4, r0
 8002b3a:	e6d9      	b.n	80028f0 <__aeabi_dsub+0x314>
 8002b3c:	2a00      	cmp	r2, #0
 8002b3e:	d000      	beq.n	8002b42 <__aeabi_dsub+0x566>
 8002b40:	e081      	b.n	8002c46 <__aeabi_dsub+0x66a>
 8002b42:	003b      	movs	r3, r7
 8002b44:	4303      	orrs	r3, r0
 8002b46:	d11d      	bne.n	8002b84 <__aeabi_dsub+0x5a8>
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	2500      	movs	r5, #0
 8002b4c:	0312      	lsls	r2, r2, #12
 8002b4e:	e70b      	b.n	8002968 <__aeabi_dsub+0x38c>
 8002b50:	08c0      	lsrs	r0, r0, #3
 8002b52:	077b      	lsls	r3, r7, #29
 8002b54:	465d      	mov	r5, fp
 8002b56:	4303      	orrs	r3, r0
 8002b58:	08fa      	lsrs	r2, r7, #3
 8002b5a:	e6d3      	b.n	8002904 <__aeabi_dsub+0x328>
 8002b5c:	1ac4      	subs	r4, r0, r3
 8002b5e:	42a0      	cmp	r0, r4
 8002b60:	4180      	sbcs	r0, r0
 8002b62:	464b      	mov	r3, r9
 8002b64:	4240      	negs	r0, r0
 8002b66:	1aff      	subs	r7, r7, r3
 8002b68:	1a3b      	subs	r3, r7, r0
 8002b6a:	469a      	mov	sl, r3
 8002b6c:	465d      	mov	r5, fp
 8002b6e:	e597      	b.n	80026a0 <__aeabi_dsub+0xc4>
 8002b70:	1a1c      	subs	r4, r3, r0
 8002b72:	464a      	mov	r2, r9
 8002b74:	42a3      	cmp	r3, r4
 8002b76:	419b      	sbcs	r3, r3
 8002b78:	1bd7      	subs	r7, r2, r7
 8002b7a:	425b      	negs	r3, r3
 8002b7c:	1afb      	subs	r3, r7, r3
 8002b7e:	469a      	mov	sl, r3
 8002b80:	2601      	movs	r6, #1
 8002b82:	e585      	b.n	8002690 <__aeabi_dsub+0xb4>
 8002b84:	08c0      	lsrs	r0, r0, #3
 8002b86:	077b      	lsls	r3, r7, #29
 8002b88:	465d      	mov	r5, fp
 8002b8a:	4303      	orrs	r3, r0
 8002b8c:	08fa      	lsrs	r2, r7, #3
 8002b8e:	e6e7      	b.n	8002960 <__aeabi_dsub+0x384>
 8002b90:	464a      	mov	r2, r9
 8002b92:	08db      	lsrs	r3, r3, #3
 8002b94:	0752      	lsls	r2, r2, #29
 8002b96:	4313      	orrs	r3, r2
 8002b98:	464a      	mov	r2, r9
 8002b9a:	08d2      	lsrs	r2, r2, #3
 8002b9c:	e6b5      	b.n	800290a <__aeabi_dsub+0x32e>
 8002b9e:	08c0      	lsrs	r0, r0, #3
 8002ba0:	077b      	lsls	r3, r7, #29
 8002ba2:	4303      	orrs	r3, r0
 8002ba4:	08fa      	lsrs	r2, r7, #3
 8002ba6:	e6db      	b.n	8002960 <__aeabi_dsub+0x384>
 8002ba8:	4649      	mov	r1, r9
 8002baa:	4319      	orrs	r1, r3
 8002bac:	000b      	movs	r3, r1
 8002bae:	1e59      	subs	r1, r3, #1
 8002bb0:	418b      	sbcs	r3, r1
 8002bb2:	001c      	movs	r4, r3
 8002bb4:	e653      	b.n	800285e <__aeabi_dsub+0x282>
 8002bb6:	464d      	mov	r5, r9
 8002bb8:	3c20      	subs	r4, #32
 8002bba:	40e5      	lsrs	r5, r4
 8002bbc:	2920      	cmp	r1, #32
 8002bbe:	d005      	beq.n	8002bcc <__aeabi_dsub+0x5f0>
 8002bc0:	2440      	movs	r4, #64	; 0x40
 8002bc2:	1a64      	subs	r4, r4, r1
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	40a1      	lsls	r1, r4
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	4698      	mov	r8, r3
 8002bcc:	4643      	mov	r3, r8
 8002bce:	1e5c      	subs	r4, r3, #1
 8002bd0:	41a3      	sbcs	r3, r4
 8002bd2:	432b      	orrs	r3, r5
 8002bd4:	e776      	b.n	8002ac4 <__aeabi_dsub+0x4e8>
 8002bd6:	2a00      	cmp	r2, #0
 8002bd8:	d0e1      	beq.n	8002b9e <__aeabi_dsub+0x5c2>
 8002bda:	003a      	movs	r2, r7
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	4302      	orrs	r2, r0
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dsub+0x608>
 8002be2:	e6b8      	b.n	8002956 <__aeabi_dsub+0x37a>
 8002be4:	464a      	mov	r2, r9
 8002be6:	0752      	lsls	r2, r2, #29
 8002be8:	2480      	movs	r4, #128	; 0x80
 8002bea:	4313      	orrs	r3, r2
 8002bec:	464a      	mov	r2, r9
 8002bee:	0324      	lsls	r4, r4, #12
 8002bf0:	08d2      	lsrs	r2, r2, #3
 8002bf2:	4222      	tst	r2, r4
 8002bf4:	d007      	beq.n	8002c06 <__aeabi_dsub+0x62a>
 8002bf6:	08fe      	lsrs	r6, r7, #3
 8002bf8:	4226      	tst	r6, r4
 8002bfa:	d104      	bne.n	8002c06 <__aeabi_dsub+0x62a>
 8002bfc:	465d      	mov	r5, fp
 8002bfe:	0032      	movs	r2, r6
 8002c00:	08c3      	lsrs	r3, r0, #3
 8002c02:	077f      	lsls	r7, r7, #29
 8002c04:	433b      	orrs	r3, r7
 8002c06:	0f59      	lsrs	r1, r3, #29
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	0749      	lsls	r1, r1, #29
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	e6a6      	b.n	8002960 <__aeabi_dsub+0x384>
 8002c12:	1ac4      	subs	r4, r0, r3
 8002c14:	42a0      	cmp	r0, r4
 8002c16:	4180      	sbcs	r0, r0
 8002c18:	464b      	mov	r3, r9
 8002c1a:	4240      	negs	r0, r0
 8002c1c:	1aff      	subs	r7, r7, r3
 8002c1e:	1a3b      	subs	r3, r7, r0
 8002c20:	469a      	mov	sl, r3
 8002c22:	465d      	mov	r5, fp
 8002c24:	2601      	movs	r6, #1
 8002c26:	e533      	b.n	8002690 <__aeabi_dsub+0xb4>
 8002c28:	003b      	movs	r3, r7
 8002c2a:	4303      	orrs	r3, r0
 8002c2c:	d100      	bne.n	8002c30 <__aeabi_dsub+0x654>
 8002c2e:	e715      	b.n	8002a5c <__aeabi_dsub+0x480>
 8002c30:	08c0      	lsrs	r0, r0, #3
 8002c32:	077b      	lsls	r3, r7, #29
 8002c34:	465d      	mov	r5, fp
 8002c36:	4303      	orrs	r3, r0
 8002c38:	08fa      	lsrs	r2, r7, #3
 8002c3a:	e666      	b.n	800290a <__aeabi_dsub+0x32e>
 8002c3c:	08c0      	lsrs	r0, r0, #3
 8002c3e:	077b      	lsls	r3, r7, #29
 8002c40:	4303      	orrs	r3, r0
 8002c42:	08fa      	lsrs	r2, r7, #3
 8002c44:	e65e      	b.n	8002904 <__aeabi_dsub+0x328>
 8002c46:	003a      	movs	r2, r7
 8002c48:	08db      	lsrs	r3, r3, #3
 8002c4a:	4302      	orrs	r2, r0
 8002c4c:	d100      	bne.n	8002c50 <__aeabi_dsub+0x674>
 8002c4e:	e682      	b.n	8002956 <__aeabi_dsub+0x37a>
 8002c50:	464a      	mov	r2, r9
 8002c52:	0752      	lsls	r2, r2, #29
 8002c54:	2480      	movs	r4, #128	; 0x80
 8002c56:	4313      	orrs	r3, r2
 8002c58:	464a      	mov	r2, r9
 8002c5a:	0324      	lsls	r4, r4, #12
 8002c5c:	08d2      	lsrs	r2, r2, #3
 8002c5e:	4222      	tst	r2, r4
 8002c60:	d007      	beq.n	8002c72 <__aeabi_dsub+0x696>
 8002c62:	08fe      	lsrs	r6, r7, #3
 8002c64:	4226      	tst	r6, r4
 8002c66:	d104      	bne.n	8002c72 <__aeabi_dsub+0x696>
 8002c68:	465d      	mov	r5, fp
 8002c6a:	0032      	movs	r2, r6
 8002c6c:	08c3      	lsrs	r3, r0, #3
 8002c6e:	077f      	lsls	r7, r7, #29
 8002c70:	433b      	orrs	r3, r7
 8002c72:	0f59      	lsrs	r1, r3, #29
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	0749      	lsls	r1, r1, #29
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	e670      	b.n	8002960 <__aeabi_dsub+0x384>
 8002c7e:	08c0      	lsrs	r0, r0, #3
 8002c80:	077b      	lsls	r3, r7, #29
 8002c82:	4303      	orrs	r3, r0
 8002c84:	08fa      	lsrs	r2, r7, #3
 8002c86:	e640      	b.n	800290a <__aeabi_dsub+0x32e>
 8002c88:	464c      	mov	r4, r9
 8002c8a:	3920      	subs	r1, #32
 8002c8c:	40cc      	lsrs	r4, r1
 8002c8e:	4661      	mov	r1, ip
 8002c90:	2920      	cmp	r1, #32
 8002c92:	d006      	beq.n	8002ca2 <__aeabi_dsub+0x6c6>
 8002c94:	4666      	mov	r6, ip
 8002c96:	2140      	movs	r1, #64	; 0x40
 8002c98:	1b89      	subs	r1, r1, r6
 8002c9a:	464e      	mov	r6, r9
 8002c9c:	408e      	lsls	r6, r1
 8002c9e:	4333      	orrs	r3, r6
 8002ca0:	4698      	mov	r8, r3
 8002ca2:	4643      	mov	r3, r8
 8002ca4:	1e59      	subs	r1, r3, #1
 8002ca6:	418b      	sbcs	r3, r1
 8002ca8:	431c      	orrs	r4, r3
 8002caa:	e5d8      	b.n	800285e <__aeabi_dsub+0x282>
 8002cac:	181c      	adds	r4, r3, r0
 8002cae:	4284      	cmp	r4, r0
 8002cb0:	4180      	sbcs	r0, r0
 8002cb2:	444f      	add	r7, r9
 8002cb4:	46ba      	mov	sl, r7
 8002cb6:	4240      	negs	r0, r0
 8002cb8:	4482      	add	sl, r0
 8002cba:	e6d9      	b.n	8002a70 <__aeabi_dsub+0x494>
 8002cbc:	4653      	mov	r3, sl
 8002cbe:	4323      	orrs	r3, r4
 8002cc0:	d100      	bne.n	8002cc4 <__aeabi_dsub+0x6e8>
 8002cc2:	e6cb      	b.n	8002a5c <__aeabi_dsub+0x480>
 8002cc4:	e614      	b.n	80028f0 <__aeabi_dsub+0x314>
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	000007ff 	.word	0x000007ff
 8002ccc:	ff7fffff 	.word	0xff7fffff
 8002cd0:	000007fe 	.word	0x000007fe
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	4a01      	ldr	r2, [pc, #4]	; (8002cdc <__aeabi_dsub+0x700>)
 8002cd8:	001c      	movs	r4, r3
 8002cda:	e529      	b.n	8002730 <__aeabi_dsub+0x154>
 8002cdc:	000007ff 	.word	0x000007ff

08002ce0 <__aeabi_dcmpun>:
 8002ce0:	b570      	push	{r4, r5, r6, lr}
 8002ce2:	0005      	movs	r5, r0
 8002ce4:	480c      	ldr	r0, [pc, #48]	; (8002d18 <__aeabi_dcmpun+0x38>)
 8002ce6:	031c      	lsls	r4, r3, #12
 8002ce8:	0016      	movs	r6, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	030a      	lsls	r2, r1, #12
 8002cee:	0049      	lsls	r1, r1, #1
 8002cf0:	0b12      	lsrs	r2, r2, #12
 8002cf2:	0d49      	lsrs	r1, r1, #21
 8002cf4:	0b24      	lsrs	r4, r4, #12
 8002cf6:	0d5b      	lsrs	r3, r3, #21
 8002cf8:	4281      	cmp	r1, r0
 8002cfa:	d008      	beq.n	8002d0e <__aeabi_dcmpun+0x2e>
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <__aeabi_dcmpun+0x38>)
 8002cfe:	2000      	movs	r0, #0
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d103      	bne.n	8002d0c <__aeabi_dcmpun+0x2c>
 8002d04:	0020      	movs	r0, r4
 8002d06:	4330      	orrs	r0, r6
 8002d08:	1e43      	subs	r3, r0, #1
 8002d0a:	4198      	sbcs	r0, r3
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	2001      	movs	r0, #1
 8002d10:	432a      	orrs	r2, r5
 8002d12:	d1fb      	bne.n	8002d0c <__aeabi_dcmpun+0x2c>
 8002d14:	e7f2      	b.n	8002cfc <__aeabi_dcmpun+0x1c>
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	000007ff 	.word	0x000007ff

08002d1c <__aeabi_d2iz>:
 8002d1c:	000a      	movs	r2, r1
 8002d1e:	b530      	push	{r4, r5, lr}
 8002d20:	4c13      	ldr	r4, [pc, #76]	; (8002d70 <__aeabi_d2iz+0x54>)
 8002d22:	0053      	lsls	r3, r2, #1
 8002d24:	0309      	lsls	r1, r1, #12
 8002d26:	0005      	movs	r5, r0
 8002d28:	0b09      	lsrs	r1, r1, #12
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	0d5b      	lsrs	r3, r3, #21
 8002d2e:	0fd2      	lsrs	r2, r2, #31
 8002d30:	42a3      	cmp	r3, r4
 8002d32:	dd04      	ble.n	8002d3e <__aeabi_d2iz+0x22>
 8002d34:	480f      	ldr	r0, [pc, #60]	; (8002d74 <__aeabi_d2iz+0x58>)
 8002d36:	4283      	cmp	r3, r0
 8002d38:	dd02      	ble.n	8002d40 <__aeabi_d2iz+0x24>
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <__aeabi_d2iz+0x5c>)
 8002d3c:	18d0      	adds	r0, r2, r3
 8002d3e:	bd30      	pop	{r4, r5, pc}
 8002d40:	2080      	movs	r0, #128	; 0x80
 8002d42:	0340      	lsls	r0, r0, #13
 8002d44:	4301      	orrs	r1, r0
 8002d46:	480d      	ldr	r0, [pc, #52]	; (8002d7c <__aeabi_d2iz+0x60>)
 8002d48:	1ac0      	subs	r0, r0, r3
 8002d4a:	281f      	cmp	r0, #31
 8002d4c:	dd08      	ble.n	8002d60 <__aeabi_d2iz+0x44>
 8002d4e:	480c      	ldr	r0, [pc, #48]	; (8002d80 <__aeabi_d2iz+0x64>)
 8002d50:	1ac3      	subs	r3, r0, r3
 8002d52:	40d9      	lsrs	r1, r3
 8002d54:	000b      	movs	r3, r1
 8002d56:	4258      	negs	r0, r3
 8002d58:	2a00      	cmp	r2, #0
 8002d5a:	d1f0      	bne.n	8002d3e <__aeabi_d2iz+0x22>
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	e7ee      	b.n	8002d3e <__aeabi_d2iz+0x22>
 8002d60:	4c08      	ldr	r4, [pc, #32]	; (8002d84 <__aeabi_d2iz+0x68>)
 8002d62:	40c5      	lsrs	r5, r0
 8002d64:	46a4      	mov	ip, r4
 8002d66:	4463      	add	r3, ip
 8002d68:	4099      	lsls	r1, r3
 8002d6a:	000b      	movs	r3, r1
 8002d6c:	432b      	orrs	r3, r5
 8002d6e:	e7f2      	b.n	8002d56 <__aeabi_d2iz+0x3a>
 8002d70:	000003fe 	.word	0x000003fe
 8002d74:	0000041d 	.word	0x0000041d
 8002d78:	7fffffff 	.word	0x7fffffff
 8002d7c:	00000433 	.word	0x00000433
 8002d80:	00000413 	.word	0x00000413
 8002d84:	fffffbed 	.word	0xfffffbed

08002d88 <__aeabi_i2d>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	d016      	beq.n	8002dbc <__aeabi_i2d+0x34>
 8002d8e:	17c3      	asrs	r3, r0, #31
 8002d90:	18c5      	adds	r5, r0, r3
 8002d92:	405d      	eors	r5, r3
 8002d94:	0fc4      	lsrs	r4, r0, #31
 8002d96:	0028      	movs	r0, r5
 8002d98:	f000 f91a 	bl	8002fd0 <__clzsi2>
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <__aeabi_i2d+0x5c>)
 8002d9e:	1a1b      	subs	r3, r3, r0
 8002da0:	280a      	cmp	r0, #10
 8002da2:	dc16      	bgt.n	8002dd2 <__aeabi_i2d+0x4a>
 8002da4:	0002      	movs	r2, r0
 8002da6:	002e      	movs	r6, r5
 8002da8:	3215      	adds	r2, #21
 8002daa:	4096      	lsls	r6, r2
 8002dac:	220b      	movs	r2, #11
 8002dae:	1a12      	subs	r2, r2, r0
 8002db0:	40d5      	lsrs	r5, r2
 8002db2:	055b      	lsls	r3, r3, #21
 8002db4:	032d      	lsls	r5, r5, #12
 8002db6:	0b2d      	lsrs	r5, r5, #12
 8002db8:	0d5b      	lsrs	r3, r3, #21
 8002dba:	e003      	b.n	8002dc4 <__aeabi_i2d+0x3c>
 8002dbc:	2400      	movs	r4, #0
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2500      	movs	r5, #0
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	051b      	lsls	r3, r3, #20
 8002dc6:	432b      	orrs	r3, r5
 8002dc8:	07e4      	lsls	r4, r4, #31
 8002dca:	4323      	orrs	r3, r4
 8002dcc:	0030      	movs	r0, r6
 8002dce:	0019      	movs	r1, r3
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
 8002dd2:	380b      	subs	r0, #11
 8002dd4:	4085      	lsls	r5, r0
 8002dd6:	055b      	lsls	r3, r3, #21
 8002dd8:	032d      	lsls	r5, r5, #12
 8002dda:	2600      	movs	r6, #0
 8002ddc:	0b2d      	lsrs	r5, r5, #12
 8002dde:	0d5b      	lsrs	r3, r3, #21
 8002de0:	e7f0      	b.n	8002dc4 <__aeabi_i2d+0x3c>
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	0000041e 	.word	0x0000041e

08002de8 <__aeabi_ui2d>:
 8002de8:	b510      	push	{r4, lr}
 8002dea:	1e04      	subs	r4, r0, #0
 8002dec:	d010      	beq.n	8002e10 <__aeabi_ui2d+0x28>
 8002dee:	f000 f8ef 	bl	8002fd0 <__clzsi2>
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <__aeabi_ui2d+0x48>)
 8002df4:	1a1b      	subs	r3, r3, r0
 8002df6:	280a      	cmp	r0, #10
 8002df8:	dc11      	bgt.n	8002e1e <__aeabi_ui2d+0x36>
 8002dfa:	220b      	movs	r2, #11
 8002dfc:	0021      	movs	r1, r4
 8002dfe:	1a12      	subs	r2, r2, r0
 8002e00:	40d1      	lsrs	r1, r2
 8002e02:	3015      	adds	r0, #21
 8002e04:	030a      	lsls	r2, r1, #12
 8002e06:	055b      	lsls	r3, r3, #21
 8002e08:	4084      	lsls	r4, r0
 8002e0a:	0b12      	lsrs	r2, r2, #12
 8002e0c:	0d5b      	lsrs	r3, r3, #21
 8002e0e:	e001      	b.n	8002e14 <__aeabi_ui2d+0x2c>
 8002e10:	2300      	movs	r3, #0
 8002e12:	2200      	movs	r2, #0
 8002e14:	051b      	lsls	r3, r3, #20
 8002e16:	4313      	orrs	r3, r2
 8002e18:	0020      	movs	r0, r4
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	bd10      	pop	{r4, pc}
 8002e1e:	0022      	movs	r2, r4
 8002e20:	380b      	subs	r0, #11
 8002e22:	4082      	lsls	r2, r0
 8002e24:	055b      	lsls	r3, r3, #21
 8002e26:	0312      	lsls	r2, r2, #12
 8002e28:	2400      	movs	r4, #0
 8002e2a:	0b12      	lsrs	r2, r2, #12
 8002e2c:	0d5b      	lsrs	r3, r3, #21
 8002e2e:	e7f1      	b.n	8002e14 <__aeabi_ui2d+0x2c>
 8002e30:	0000041e 	.word	0x0000041e

08002e34 <__aeabi_f2d>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	0242      	lsls	r2, r0, #9
 8002e38:	0043      	lsls	r3, r0, #1
 8002e3a:	0fc4      	lsrs	r4, r0, #31
 8002e3c:	20fe      	movs	r0, #254	; 0xfe
 8002e3e:	0e1b      	lsrs	r3, r3, #24
 8002e40:	1c59      	adds	r1, r3, #1
 8002e42:	0a55      	lsrs	r5, r2, #9
 8002e44:	4208      	tst	r0, r1
 8002e46:	d00c      	beq.n	8002e62 <__aeabi_f2d+0x2e>
 8002e48:	21e0      	movs	r1, #224	; 0xe0
 8002e4a:	0089      	lsls	r1, r1, #2
 8002e4c:	468c      	mov	ip, r1
 8002e4e:	076d      	lsls	r5, r5, #29
 8002e50:	0b12      	lsrs	r2, r2, #12
 8002e52:	4463      	add	r3, ip
 8002e54:	051b      	lsls	r3, r3, #20
 8002e56:	4313      	orrs	r3, r2
 8002e58:	07e4      	lsls	r4, r4, #31
 8002e5a:	4323      	orrs	r3, r4
 8002e5c:	0028      	movs	r0, r5
 8002e5e:	0019      	movs	r1, r3
 8002e60:	bd70      	pop	{r4, r5, r6, pc}
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d114      	bne.n	8002e90 <__aeabi_f2d+0x5c>
 8002e66:	2d00      	cmp	r5, #0
 8002e68:	d01b      	beq.n	8002ea2 <__aeabi_f2d+0x6e>
 8002e6a:	0028      	movs	r0, r5
 8002e6c:	f000 f8b0 	bl	8002fd0 <__clzsi2>
 8002e70:	280a      	cmp	r0, #10
 8002e72:	dc1c      	bgt.n	8002eae <__aeabi_f2d+0x7a>
 8002e74:	230b      	movs	r3, #11
 8002e76:	002a      	movs	r2, r5
 8002e78:	1a1b      	subs	r3, r3, r0
 8002e7a:	40da      	lsrs	r2, r3
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	3315      	adds	r3, #21
 8002e80:	409d      	lsls	r5, r3
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <__aeabi_f2d+0x88>)
 8002e84:	0312      	lsls	r2, r2, #12
 8002e86:	1a1b      	subs	r3, r3, r0
 8002e88:	055b      	lsls	r3, r3, #21
 8002e8a:	0b12      	lsrs	r2, r2, #12
 8002e8c:	0d5b      	lsrs	r3, r3, #21
 8002e8e:	e7e1      	b.n	8002e54 <__aeabi_f2d+0x20>
 8002e90:	2d00      	cmp	r5, #0
 8002e92:	d009      	beq.n	8002ea8 <__aeabi_f2d+0x74>
 8002e94:	0b13      	lsrs	r3, r2, #12
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	0312      	lsls	r2, r2, #12
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	076d      	lsls	r5, r5, #29
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <__aeabi_f2d+0x8c>)
 8002ea0:	e7d8      	b.n	8002e54 <__aeabi_f2d+0x20>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	e7d5      	b.n	8002e54 <__aeabi_f2d+0x20>
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <__aeabi_f2d+0x8c>)
 8002eac:	e7d2      	b.n	8002e54 <__aeabi_f2d+0x20>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	002a      	movs	r2, r5
 8002eb2:	3b0b      	subs	r3, #11
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	2500      	movs	r5, #0
 8002eb8:	e7e3      	b.n	8002e82 <__aeabi_f2d+0x4e>
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	00000389 	.word	0x00000389
 8002ec0:	000007ff 	.word	0x000007ff

08002ec4 <__aeabi_d2f>:
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec8:	004b      	lsls	r3, r1, #1
 8002eca:	030d      	lsls	r5, r1, #12
 8002ecc:	0f40      	lsrs	r0, r0, #29
 8002ece:	0d5b      	lsrs	r3, r3, #21
 8002ed0:	0fcc      	lsrs	r4, r1, #31
 8002ed2:	0a6d      	lsrs	r5, r5, #9
 8002ed4:	493a      	ldr	r1, [pc, #232]	; (8002fc0 <__aeabi_d2f+0xfc>)
 8002ed6:	4305      	orrs	r5, r0
 8002ed8:	1c58      	adds	r0, r3, #1
 8002eda:	00d7      	lsls	r7, r2, #3
 8002edc:	4208      	tst	r0, r1
 8002ede:	d00a      	beq.n	8002ef6 <__aeabi_d2f+0x32>
 8002ee0:	4938      	ldr	r1, [pc, #224]	; (8002fc4 <__aeabi_d2f+0x100>)
 8002ee2:	1859      	adds	r1, r3, r1
 8002ee4:	29fe      	cmp	r1, #254	; 0xfe
 8002ee6:	dd16      	ble.n	8002f16 <__aeabi_d2f+0x52>
 8002ee8:	20ff      	movs	r0, #255	; 0xff
 8002eea:	2200      	movs	r2, #0
 8002eec:	05c0      	lsls	r0, r0, #23
 8002eee:	4310      	orrs	r0, r2
 8002ef0:	07e4      	lsls	r4, r4, #31
 8002ef2:	4320      	orrs	r0, r4
 8002ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <__aeabi_d2f+0x44>
 8002efa:	433d      	orrs	r5, r7
 8002efc:	d026      	beq.n	8002f4c <__aeabi_d2f+0x88>
 8002efe:	2205      	movs	r2, #5
 8002f00:	0192      	lsls	r2, r2, #6
 8002f02:	0a52      	lsrs	r2, r2, #9
 8002f04:	b2d8      	uxtb	r0, r3
 8002f06:	e7f1      	b.n	8002eec <__aeabi_d2f+0x28>
 8002f08:	432f      	orrs	r7, r5
 8002f0a:	d0ed      	beq.n	8002ee8 <__aeabi_d2f+0x24>
 8002f0c:	2280      	movs	r2, #128	; 0x80
 8002f0e:	03d2      	lsls	r2, r2, #15
 8002f10:	20ff      	movs	r0, #255	; 0xff
 8002f12:	432a      	orrs	r2, r5
 8002f14:	e7ea      	b.n	8002eec <__aeabi_d2f+0x28>
 8002f16:	2900      	cmp	r1, #0
 8002f18:	dd1b      	ble.n	8002f52 <__aeabi_d2f+0x8e>
 8002f1a:	0192      	lsls	r2, r2, #6
 8002f1c:	1e50      	subs	r0, r2, #1
 8002f1e:	4182      	sbcs	r2, r0
 8002f20:	00ed      	lsls	r5, r5, #3
 8002f22:	0f7f      	lsrs	r7, r7, #29
 8002f24:	432a      	orrs	r2, r5
 8002f26:	433a      	orrs	r2, r7
 8002f28:	0753      	lsls	r3, r2, #29
 8002f2a:	d047      	beq.n	8002fbc <__aeabi_d2f+0xf8>
 8002f2c:	230f      	movs	r3, #15
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d000      	beq.n	8002f36 <__aeabi_d2f+0x72>
 8002f34:	3204      	adds	r2, #4
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	04db      	lsls	r3, r3, #19
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d03e      	beq.n	8002fbc <__aeabi_d2f+0xf8>
 8002f3e:	1c48      	adds	r0, r1, #1
 8002f40:	29fe      	cmp	r1, #254	; 0xfe
 8002f42:	d0d1      	beq.n	8002ee8 <__aeabi_d2f+0x24>
 8002f44:	0192      	lsls	r2, r2, #6
 8002f46:	0a52      	lsrs	r2, r2, #9
 8002f48:	b2c0      	uxtb	r0, r0
 8002f4a:	e7cf      	b.n	8002eec <__aeabi_d2f+0x28>
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	2200      	movs	r2, #0
 8002f50:	e7cc      	b.n	8002eec <__aeabi_d2f+0x28>
 8002f52:	000a      	movs	r2, r1
 8002f54:	3217      	adds	r2, #23
 8002f56:	db2f      	blt.n	8002fb8 <__aeabi_d2f+0xf4>
 8002f58:	2680      	movs	r6, #128	; 0x80
 8002f5a:	0436      	lsls	r6, r6, #16
 8002f5c:	432e      	orrs	r6, r5
 8002f5e:	251e      	movs	r5, #30
 8002f60:	1a6d      	subs	r5, r5, r1
 8002f62:	2d1f      	cmp	r5, #31
 8002f64:	dd11      	ble.n	8002f8a <__aeabi_d2f+0xc6>
 8002f66:	2202      	movs	r2, #2
 8002f68:	4252      	negs	r2, r2
 8002f6a:	1a52      	subs	r2, r2, r1
 8002f6c:	0031      	movs	r1, r6
 8002f6e:	40d1      	lsrs	r1, r2
 8002f70:	2d20      	cmp	r5, #32
 8002f72:	d004      	beq.n	8002f7e <__aeabi_d2f+0xba>
 8002f74:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <__aeabi_d2f+0x104>)
 8002f76:	4694      	mov	ip, r2
 8002f78:	4463      	add	r3, ip
 8002f7a:	409e      	lsls	r6, r3
 8002f7c:	4337      	orrs	r7, r6
 8002f7e:	003a      	movs	r2, r7
 8002f80:	1e53      	subs	r3, r2, #1
 8002f82:	419a      	sbcs	r2, r3
 8002f84:	430a      	orrs	r2, r1
 8002f86:	2100      	movs	r1, #0
 8002f88:	e7ce      	b.n	8002f28 <__aeabi_d2f+0x64>
 8002f8a:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <__aeabi_d2f+0x108>)
 8002f8c:	0038      	movs	r0, r7
 8002f8e:	4694      	mov	ip, r2
 8002f90:	4463      	add	r3, ip
 8002f92:	4098      	lsls	r0, r3
 8002f94:	003a      	movs	r2, r7
 8002f96:	1e41      	subs	r1, r0, #1
 8002f98:	4188      	sbcs	r0, r1
 8002f9a:	409e      	lsls	r6, r3
 8002f9c:	40ea      	lsrs	r2, r5
 8002f9e:	4330      	orrs	r0, r6
 8002fa0:	4302      	orrs	r2, r0
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	0753      	lsls	r3, r2, #29
 8002fa6:	d1c1      	bne.n	8002f2c <__aeabi_d2f+0x68>
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	0013      	movs	r3, r2
 8002fac:	04c9      	lsls	r1, r1, #19
 8002fae:	2001      	movs	r0, #1
 8002fb0:	400b      	ands	r3, r1
 8002fb2:	420a      	tst	r2, r1
 8002fb4:	d1c6      	bne.n	8002f44 <__aeabi_d2f+0x80>
 8002fb6:	e7a3      	b.n	8002f00 <__aeabi_d2f+0x3c>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e7a0      	b.n	8002efe <__aeabi_d2f+0x3a>
 8002fbc:	000b      	movs	r3, r1
 8002fbe:	e79f      	b.n	8002f00 <__aeabi_d2f+0x3c>
 8002fc0:	000007fe 	.word	0x000007fe
 8002fc4:	fffffc80 	.word	0xfffffc80
 8002fc8:	fffffca2 	.word	0xfffffca2
 8002fcc:	fffffc82 	.word	0xfffffc82

08002fd0 <__clzsi2>:
 8002fd0:	211c      	movs	r1, #28
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	4298      	cmp	r0, r3
 8002fd8:	d301      	bcc.n	8002fde <__clzsi2+0xe>
 8002fda:	0c00      	lsrs	r0, r0, #16
 8002fdc:	3910      	subs	r1, #16
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	4298      	cmp	r0, r3
 8002fe2:	d301      	bcc.n	8002fe8 <__clzsi2+0x18>
 8002fe4:	0a00      	lsrs	r0, r0, #8
 8002fe6:	3908      	subs	r1, #8
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	4298      	cmp	r0, r3
 8002fec:	d301      	bcc.n	8002ff2 <__clzsi2+0x22>
 8002fee:	0900      	lsrs	r0, r0, #4
 8002ff0:	3904      	subs	r1, #4
 8002ff2:	a202      	add	r2, pc, #8	; (adr r2, 8002ffc <__clzsi2+0x2c>)
 8002ff4:	5c10      	ldrb	r0, [r2, r0]
 8002ff6:	1840      	adds	r0, r0, r1
 8002ff8:	4770      	bx	lr
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	02020304 	.word	0x02020304
 8003000:	01010101 	.word	0x01010101
	...

0800300c <__clzdi2>:
 800300c:	b510      	push	{r4, lr}
 800300e:	2900      	cmp	r1, #0
 8003010:	d103      	bne.n	800301a <__clzdi2+0xe>
 8003012:	f7ff ffdd 	bl	8002fd0 <__clzsi2>
 8003016:	3020      	adds	r0, #32
 8003018:	e002      	b.n	8003020 <__clzdi2+0x14>
 800301a:	0008      	movs	r0, r1
 800301c:	f7ff ffd8 	bl	8002fd0 <__clzsi2>
 8003020:	bd10      	pop	{r4, pc}
 8003022:	46c0      	nop			; (mov r8, r8)

08003024 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003028:	23a0      	movs	r3, #160	; 0xa0
 800302a:	05db      	lsls	r3, r3, #23
 800302c:	2200      	movs	r2, #0
 800302e:	2110      	movs	r1, #16
 8003030:	0018      	movs	r0, r3
 8003032:	f002 f89e 	bl	8005172 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003036:	2001      	movs	r0, #1
 8003038:	f001 fc4c 	bl	80048d4 <HAL_Delay>
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003046:	23a0      	movs	r3, #160	; 0xa0
 8003048:	05db      	lsls	r3, r3, #23
 800304a:	2201      	movs	r2, #1
 800304c:	2110      	movs	r1, #16
 800304e:	0018      	movs	r0, r3
 8003050:	f002 f88f 	bl	8005172 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003054:	2001      	movs	r0, #1
 8003056:	f001 fc3d 	bl	80048d4 <HAL_Delay>
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	0002      	movs	r2, r0
 8003068:	1dfb      	adds	r3, r7, #7
 800306a:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <SPI_TxByte+0x30>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2202      	movs	r2, #2
 8003076:	4013      	ands	r3, r2
 8003078:	2b02      	cmp	r3, #2
 800307a:	d1f8      	bne.n	800306e <SPI_TxByte+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800307c:	1df9      	adds	r1, r7, #7
 800307e:	4804      	ldr	r0, [pc, #16]	; (8003090 <SPI_TxByte+0x30>)
 8003080:	2364      	movs	r3, #100	; 0x64
 8003082:	2201      	movs	r2, #1
 8003084:	f003 f8fb 	bl	800627e <HAL_SPI_Transmit>
}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}
 8003090:	200002c0 	.word	0x200002c0

08003094 <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	000a      	movs	r2, r1
 800309e:	1cbb      	adds	r3, r7, #2
 80030a0:	801a      	strh	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <SPI_TxBuffer+0x34>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2202      	movs	r2, #2
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d1f8      	bne.n	80030a4 <SPI_TxBuffer+0x10>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80030b2:	1cbb      	adds	r3, r7, #2
 80030b4:	881a      	ldrh	r2, [r3, #0]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4803      	ldr	r0, [pc, #12]	; (80030c8 <SPI_TxBuffer+0x34>)
 80030ba:	2364      	movs	r3, #100	; 0x64
 80030bc:	f003 f8df 	bl	800627e <HAL_SPI_Transmit>
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b002      	add	sp, #8
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200002c0 	.word	0x200002c0

080030cc <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80030d2:	1dfb      	adds	r3, r7, #7
 80030d4:	22ff      	movs	r2, #255	; 0xff
 80030d6:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <SPI_RxByte+0x38>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2202      	movs	r2, #2
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d1f8      	bne.n	80030da <SPI_RxByte+0xe>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80030e8:	1dba      	adds	r2, r7, #6
 80030ea:	1df9      	adds	r1, r7, #7
 80030ec:	4805      	ldr	r0, [pc, #20]	; (8003104 <SPI_RxByte+0x38>)
 80030ee:	2364      	movs	r3, #100	; 0x64
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2301      	movs	r3, #1
 80030f4:	f003 fa20 	bl	8006538 <HAL_SPI_TransmitReceive>
  return data;
 80030f8:	1dbb      	adds	r3, r7, #6
 80030fa:	781b      	ldrb	r3, [r3, #0]
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200002c0 	.word	0x200002c0

08003108 <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8003110:	f7ff ffdc 	bl	80030cc <SPI_RxByte>
 8003114:	0003      	movs	r3, r0
 8003116:	001a      	movs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	701a      	strb	r2, [r3, #0]
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <SD_ReadyWait+0x34>)
 800312c:	22fa      	movs	r2, #250	; 0xfa
 800312e:	0052      	lsls	r2, r2, #1
 8003130:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8003132:	1dfc      	adds	r4, r7, #7
 8003134:	f7ff ffca 	bl	80030cc <SPI_RxByte>
 8003138:	0003      	movs	r3, r0
 800313a:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 800313c:	1dfb      	adds	r3, r7, #7
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2bff      	cmp	r3, #255	; 0xff
 8003142:	d003      	beq.n	800314c <SD_ReadyWait+0x28>
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <SD_ReadyWait+0x34>)
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f2      	bne.n	8003132 <SD_ReadyWait+0xe>
  return res;
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	781b      	ldrb	r3, [r3, #0]
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b003      	add	sp, #12
 8003156:	bd90      	pop	{r4, r7, pc}
 8003158:	2000020a 	.word	0x2000020a

0800315c <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <SD_PowerOn+0x88>)
 8003164:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8003166:	f7ff ff6c 	bl	8003042 <DESELECT>
  for(int i = 0; i < 10; i++)
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	e005      	b.n	800317c <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 8003170:	20ff      	movs	r0, #255	; 0xff
 8003172:	f7ff ff75 	bl	8003060 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3301      	adds	r3, #1
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b09      	cmp	r3, #9
 8003180:	ddf6      	ble.n	8003170 <SD_PowerOn+0x14>
  }
  /* slave select */
  SELECT();
 8003182:	f7ff ff4f 	bl	8003024 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8003186:	003b      	movs	r3, r7
 8003188:	2240      	movs	r2, #64	; 0x40
 800318a:	701a      	strb	r2, [r3, #0]
  args[1] = 0;
 800318c:	003b      	movs	r3, r7
 800318e:	2200      	movs	r2, #0
 8003190:	705a      	strb	r2, [r3, #1]
  args[2] = 0;
 8003192:	003b      	movs	r3, r7
 8003194:	2200      	movs	r2, #0
 8003196:	709a      	strb	r2, [r3, #2]
  args[3] = 0;
 8003198:	003b      	movs	r3, r7
 800319a:	2200      	movs	r2, #0
 800319c:	70da      	strb	r2, [r3, #3]
  args[4] = 0;
 800319e:	003b      	movs	r3, r7
 80031a0:	2200      	movs	r2, #0
 80031a2:	711a      	strb	r2, [r3, #4]
  args[5] = 0x95;   /* CRC */
 80031a4:	003b      	movs	r3, r7
 80031a6:	2295      	movs	r2, #149	; 0x95
 80031a8:	715a      	strb	r2, [r3, #5]
  SPI_TxBuffer(args, sizeof(args));
 80031aa:	003b      	movs	r3, r7
 80031ac:	2106      	movs	r1, #6
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7ff ff70 	bl	8003094 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80031b4:	e002      	b.n	80031bc <SD_PowerOn+0x60>
  {
    cnt--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80031bc:	f7ff ff86 	bl	80030cc <SPI_RxByte>
 80031c0:	0003      	movs	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d002      	beq.n	80031cc <SD_PowerOn+0x70>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f4      	bne.n	80031b6 <SD_PowerOn+0x5a>
  }
  DESELECT();
 80031cc:	f7ff ff39 	bl	8003042 <DESELECT>
  SPI_TxByte(0XFF);
 80031d0:	20ff      	movs	r0, #255	; 0xff
 80031d2:	f7ff ff45 	bl	8003060 <SPI_TxByte>
  PowerFlag = 1;
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <SD_PowerOn+0x8c>)
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b004      	add	sp, #16
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	00001fff 	.word	0x00001fff
 80031e8:	2000020d 	.word	0x2000020d

080031ec <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80031f0:	4b02      	ldr	r3, [pc, #8]	; (80031fc <SD_PowerOff+0x10>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	2000020d 	.word	0x2000020d

08003200 <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  return PowerFlag;
 8003204:	4b02      	ldr	r3, [pc, #8]	; (8003210 <SD_CheckPower+0x10>)
 8003206:	781b      	ldrb	r3, [r3, #0]
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	2000020d 	.word	0x2000020d

08003214 <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003214:	b5b0      	push	{r4, r5, r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <SD_RxDataBlock+0x64>)
 8003220:	22c8      	movs	r2, #200	; 0xc8
 8003222:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8003224:	250f      	movs	r5, #15
 8003226:	197c      	adds	r4, r7, r5
 8003228:	f7ff ff50 	bl	80030cc <SPI_RxByte>
 800322c:	0003      	movs	r3, r0
 800322e:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 8003230:	197b      	adds	r3, r7, r5
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2bff      	cmp	r3, #255	; 0xff
 8003236:	d103      	bne.n	8003240 <SD_RxDataBlock+0x2c>
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <SD_RxDataBlock+0x64>)
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f1      	bne.n	8003224 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8003240:	230f      	movs	r3, #15
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2bfe      	cmp	r3, #254	; 0xfe
 8003248:	d001      	beq.n	800324e <SD_RxDataBlock+0x3a>
 800324a:	2300      	movs	r3, #0
 800324c:	e00f      	b.n	800326e <SD_RxDataBlock+0x5a>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff ff57 	bl	8003108 <SPI_RxBytePtr>
  } while(len--);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	1e5a      	subs	r2, r3, #1
 800325e:	603a      	str	r2, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f4      	bne.n	800324e <SD_RxDataBlock+0x3a>
  /* discard CRC */
  SPI_RxByte();
 8003264:	f7ff ff32 	bl	80030cc <SPI_RxByte>
  SPI_RxByte();
 8003268:	f7ff ff30 	bl	80030cc <SPI_RxByte>
  return TRUE;
 800326c:	2301      	movs	r3, #1
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	b004      	add	sp, #16
 8003274:	bdb0      	pop	{r4, r5, r7, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	20000208 	.word	0x20000208

0800327c <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800327c:	b5b0      	push	{r4, r5, r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	000a      	movs	r2, r1
 8003286:	1cfb      	adds	r3, r7, #3
 8003288:	701a      	strb	r2, [r3, #0]
  uint8_t resp;
  uint8_t i = 0;
 800328a:	230e      	movs	r3, #14
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8003292:	f7ff ff47 	bl	8003124 <SD_ReadyWait>
 8003296:	0003      	movs	r3, r0
 8003298:	2bff      	cmp	r3, #255	; 0xff
 800329a:	d001      	beq.n	80032a0 <SD_TxDataBlock+0x24>
 800329c:	2300      	movs	r3, #0
 800329e:	e03c      	b.n	800331a <SD_TxDataBlock+0x9e>
  /* transmit token */
  SPI_TxByte(token);
 80032a0:	1cfb      	adds	r3, r7, #3
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff fedb 	bl	8003060 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80032aa:	1cfb      	adds	r3, r7, #3
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2bfd      	cmp	r3, #253	; 0xfd
 80032b0:	d029      	beq.n	8003306 <SD_TxDataBlock+0x8a>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	009a      	lsls	r2, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	0011      	movs	r1, r2
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7ff feea 	bl	8003094 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 80032c0:	f7ff ff04 	bl	80030cc <SPI_RxByte>
    SPI_RxByte();
 80032c4:	f7ff ff02 	bl	80030cc <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 80032c8:	e011      	b.n	80032ee <SD_TxDataBlock+0x72>
    {
      resp = SPI_RxByte();
 80032ca:	250f      	movs	r5, #15
 80032cc:	197c      	adds	r4, r7, r5
 80032ce:	f7ff fefd 	bl	80030cc <SPI_RxByte>
 80032d2:	0003      	movs	r3, r0
 80032d4:	7023      	strb	r3, [r4, #0]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80032d6:	197b      	adds	r3, r7, r5
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	221f      	movs	r2, #31
 80032dc:	4013      	ands	r3, r2
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d00b      	beq.n	80032fa <SD_TxDataBlock+0x7e>
      i++;
 80032e2:	210e      	movs	r1, #14
 80032e4:	187b      	adds	r3, r7, r1
 80032e6:	781a      	ldrb	r2, [r3, #0]
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	3201      	adds	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
    while (i <= 64)
 80032ee:	230e      	movs	r3, #14
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d9e8      	bls.n	80032ca <SD_TxDataBlock+0x4e>
 80032f8:	e000      	b.n	80032fc <SD_TxDataBlock+0x80>
      if ((resp & 0x1F) == 0x05) break;
 80032fa:	46c0      	nop			; (mov r8, r8)
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	f7ff fee5 	bl	80030cc <SPI_RxByte>
 8003302:	1e03      	subs	r3, r0, #0
 8003304:	d0fb      	beq.n	80032fe <SD_TxDataBlock+0x82>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8003306:	230f      	movs	r3, #15
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	221f      	movs	r2, #31
 800330e:	4013      	ands	r3, r2
 8003310:	2b05      	cmp	r3, #5
 8003312:	d101      	bne.n	8003318 <SD_TxDataBlock+0x9c>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <SD_TxDataBlock+0x9e>
  return FALSE;
 8003318:	2300      	movs	r3, #0
}
 800331a:	0018      	movs	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	b004      	add	sp, #16
 8003320:	bdb0      	pop	{r4, r5, r7, pc}

08003322 <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003322:	b5b0      	push	{r4, r5, r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	0002      	movs	r2, r0
 800332a:	6039      	str	r1, [r7, #0]
 800332c:	1dfb      	adds	r3, r7, #7
 800332e:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003330:	f7ff fef8 	bl	8003124 <SD_ReadyWait>
 8003334:	0003      	movs	r3, r0
 8003336:	2bff      	cmp	r3, #255	; 0xff
 8003338:	d001      	beq.n	800333e <SD_SendCmd+0x1c>
 800333a:	23ff      	movs	r3, #255	; 0xff
 800333c:	e059      	b.n	80033f2 <SD_SendCmd+0xd0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800333e:	1dfb      	adds	r3, r7, #7
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	0018      	movs	r0, r3
 8003344:	f7ff fe8c 	bl	8003060 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	0e1b      	lsrs	r3, r3, #24
 800334c:	b2db      	uxtb	r3, r3
 800334e:	0018      	movs	r0, r3
 8003350:	f7ff fe86 	bl	8003060 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	b2db      	uxtb	r3, r3
 800335a:	0018      	movs	r0, r3
 800335c:	f7ff fe80 	bl	8003060 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	b2db      	uxtb	r3, r3
 8003366:	0018      	movs	r0, r3
 8003368:	f7ff fe7a 	bl	8003060 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	0018      	movs	r0, r3
 8003372:	f7ff fe75 	bl	8003060 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8003376:	1dfb      	adds	r3, r7, #7
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b40      	cmp	r3, #64	; 0x40
 800337c:	d104      	bne.n	8003388 <SD_SendCmd+0x66>
 800337e:	230f      	movs	r3, #15
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	2295      	movs	r2, #149	; 0x95
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	e00c      	b.n	80033a2 <SD_SendCmd+0x80>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8003388:	1dfb      	adds	r3, r7, #7
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b48      	cmp	r3, #72	; 0x48
 800338e:	d104      	bne.n	800339a <SD_SendCmd+0x78>
 8003390:	230f      	movs	r3, #15
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2287      	movs	r2, #135	; 0x87
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e003      	b.n	80033a2 <SD_SendCmd+0x80>
  else crc = 1;
 800339a:	230f      	movs	r3, #15
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
  /* transmit CRC */
  SPI_TxByte(crc);
 80033a2:	230f      	movs	r3, #15
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff fe59 	bl	8003060 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80033ae:	1dfb      	adds	r3, r7, #7
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b4c      	cmp	r3, #76	; 0x4c
 80033b4:	d101      	bne.n	80033ba <SD_SendCmd+0x98>
 80033b6:	f7ff fe89 	bl	80030cc <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 80033ba:	230e      	movs	r3, #14
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	220a      	movs	r2, #10
 80033c0:	701a      	strb	r2, [r3, #0]
  do {
    res = SPI_RxByte();
 80033c2:	250d      	movs	r5, #13
 80033c4:	197c      	adds	r4, r7, r5
 80033c6:	f7ff fe81 	bl	80030cc <SPI_RxByte>
 80033ca:	0003      	movs	r3, r0
 80033cc:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 80033ce:	197b      	adds	r3, r7, r5
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	da09      	bge.n	80033ec <SD_SendCmd+0xca>
 80033d8:	210e      	movs	r1, #14
 80033da:	187b      	adds	r3, r7, r1
 80033dc:	187a      	adds	r2, r7, r1
 80033de:	7812      	ldrb	r2, [r2, #0]
 80033e0:	3a01      	subs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
 80033e4:	187b      	adds	r3, r7, r1
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1ea      	bne.n	80033c2 <SD_SendCmd+0xa0>
  return res;
 80033ec:	230d      	movs	r3, #13
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	781b      	ldrb	r3, [r3, #0]
}
 80033f2:	0018      	movs	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b004      	add	sp, #16
 80033f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080033fc <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80033fc:	b5b0      	push	{r4, r5, r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	0002      	movs	r2, r0
 8003404:	1dfb      	adds	r3, r7, #7
 8003406:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8003408:	1dfb      	adds	r3, r7, #7
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <SD_disk_initialize+0x18>
 8003410:	2301      	movs	r3, #1
 8003412:	e0f2      	b.n	80035fa <SD_disk_initialize+0x1fe>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8003414:	4b7b      	ldr	r3, [pc, #492]	; (8003604 <SD_disk_initialize+0x208>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	001a      	movs	r2, r3
 800341c:	2302      	movs	r3, #2
 800341e:	4013      	ands	r3, r2
 8003420:	d003      	beq.n	800342a <SD_disk_initialize+0x2e>
 8003422:	4b78      	ldr	r3, [pc, #480]	; (8003604 <SD_disk_initialize+0x208>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	e0e7      	b.n	80035fa <SD_disk_initialize+0x1fe>
  /* power on */
  SD_PowerOn();
 800342a:	f7ff fe97 	bl	800315c <SD_PowerOn>
  /* slave select */
  SELECT();
 800342e:	f7ff fdf9 	bl	8003024 <SELECT>
  /* check disk type */
  type = 0;
 8003432:	230e      	movs	r3, #14
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800343a:	2100      	movs	r1, #0
 800343c:	2040      	movs	r0, #64	; 0x40
 800343e:	f7ff ff70 	bl	8003322 <SD_SendCmd>
 8003442:	0003      	movs	r3, r0
 8003444:	2b01      	cmp	r3, #1
 8003446:	d000      	beq.n	800344a <SD_disk_initialize+0x4e>
 8003448:	e0bc      	b.n	80035c4 <SD_disk_initialize+0x1c8>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800344a:	4b6f      	ldr	r3, [pc, #444]	; (8003608 <SD_disk_initialize+0x20c>)
 800344c:	22fa      	movs	r2, #250	; 0xfa
 800344e:	0092      	lsls	r2, r2, #2
 8003450:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003452:	23d5      	movs	r3, #213	; 0xd5
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	0019      	movs	r1, r3
 8003458:	2048      	movs	r0, #72	; 0x48
 800345a:	f7ff ff62 	bl	8003322 <SD_SendCmd>
 800345e:	0003      	movs	r3, r0
 8003460:	2b01      	cmp	r3, #1
 8003462:	d000      	beq.n	8003466 <SD_disk_initialize+0x6a>
 8003464:	e06b      	b.n	800353e <SD_disk_initialize+0x142>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8003466:	230f      	movs	r3, #15
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e00e      	b.n	800348e <SD_disk_initialize+0x92>
      {
        ocr[n] = SPI_RxByte();
 8003470:	250f      	movs	r5, #15
 8003472:	197b      	adds	r3, r7, r5
 8003474:	781c      	ldrb	r4, [r3, #0]
 8003476:	f7ff fe29 	bl	80030cc <SPI_RxByte>
 800347a:	0003      	movs	r3, r0
 800347c:	001a      	movs	r2, r3
 800347e:	2308      	movs	r3, #8
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 8003484:	197b      	adds	r3, r7, r5
 8003486:	781a      	ldrb	r2, [r3, #0]
 8003488:	197b      	adds	r3, r7, r5
 800348a:	3201      	adds	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	230f      	movs	r3, #15
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d9eb      	bls.n	8003470 <SD_disk_initialize+0x74>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003498:	2208      	movs	r2, #8
 800349a:	18bb      	adds	r3, r7, r2
 800349c:	789b      	ldrb	r3, [r3, #2]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d000      	beq.n	80034a4 <SD_disk_initialize+0xa8>
 80034a2:	e08f      	b.n	80035c4 <SD_disk_initialize+0x1c8>
 80034a4:	18bb      	adds	r3, r7, r2
 80034a6:	78db      	ldrb	r3, [r3, #3]
 80034a8:	2baa      	cmp	r3, #170	; 0xaa
 80034aa:	d000      	beq.n	80034ae <SD_disk_initialize+0xb2>
 80034ac:	e08a      	b.n	80035c4 <SD_disk_initialize+0x1c8>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80034ae:	2100      	movs	r1, #0
 80034b0:	2077      	movs	r0, #119	; 0x77
 80034b2:	f7ff ff36 	bl	8003322 <SD_SendCmd>
 80034b6:	0003      	movs	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d807      	bhi.n	80034cc <SD_disk_initialize+0xd0>
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	05db      	lsls	r3, r3, #23
 80034c0:	0019      	movs	r1, r3
 80034c2:	2069      	movs	r0, #105	; 0x69
 80034c4:	f7ff ff2d 	bl	8003322 <SD_SendCmd>
 80034c8:	1e03      	subs	r3, r0, #0
 80034ca:	d004      	beq.n	80034d6 <SD_disk_initialize+0xda>
        } while (Timer1);
 80034cc:	4b4e      	ldr	r3, [pc, #312]	; (8003608 <SD_disk_initialize+0x20c>)
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1ec      	bne.n	80034ae <SD_disk_initialize+0xb2>
 80034d4:	e000      	b.n	80034d8 <SD_disk_initialize+0xdc>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80034d6:	46c0      	nop			; (mov r8, r8)
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80034d8:	4b4b      	ldr	r3, [pc, #300]	; (8003608 <SD_disk_initialize+0x20c>)
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d100      	bne.n	80034e2 <SD_disk_initialize+0xe6>
 80034e0:	e070      	b.n	80035c4 <SD_disk_initialize+0x1c8>
 80034e2:	2100      	movs	r1, #0
 80034e4:	207a      	movs	r0, #122	; 0x7a
 80034e6:	f7ff ff1c 	bl	8003322 <SD_SendCmd>
 80034ea:	1e03      	subs	r3, r0, #0
 80034ec:	d000      	beq.n	80034f0 <SD_disk_initialize+0xf4>
 80034ee:	e069      	b.n	80035c4 <SD_disk_initialize+0x1c8>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80034f0:	230f      	movs	r3, #15
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	e00e      	b.n	8003518 <SD_disk_initialize+0x11c>
          {
            ocr[n] = SPI_RxByte();
 80034fa:	250f      	movs	r5, #15
 80034fc:	197b      	adds	r3, r7, r5
 80034fe:	781c      	ldrb	r4, [r3, #0]
 8003500:	f7ff fde4 	bl	80030cc <SPI_RxByte>
 8003504:	0003      	movs	r3, r0
 8003506:	001a      	movs	r2, r3
 8003508:	2308      	movs	r3, #8
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 800350e:	197b      	adds	r3, r7, r5
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	197b      	adds	r3, r7, r5
 8003514:	3201      	adds	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	230f      	movs	r3, #15
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d9eb      	bls.n	80034fa <SD_disk_initialize+0xfe>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003522:	2308      	movs	r3, #8
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	001a      	movs	r2, r3
 800352a:	2340      	movs	r3, #64	; 0x40
 800352c:	4013      	ands	r3, r2
 800352e:	d001      	beq.n	8003534 <SD_disk_initialize+0x138>
 8003530:	220c      	movs	r2, #12
 8003532:	e000      	b.n	8003536 <SD_disk_initialize+0x13a>
 8003534:	2204      	movs	r2, #4
 8003536:	230e      	movs	r3, #14
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	e042      	b.n	80035c4 <SD_disk_initialize+0x1c8>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800353e:	2100      	movs	r1, #0
 8003540:	2077      	movs	r0, #119	; 0x77
 8003542:	f7ff feee 	bl	8003322 <SD_SendCmd>
 8003546:	0003      	movs	r3, r0
 8003548:	2b01      	cmp	r3, #1
 800354a:	d808      	bhi.n	800355e <SD_disk_initialize+0x162>
 800354c:	2100      	movs	r1, #0
 800354e:	2069      	movs	r0, #105	; 0x69
 8003550:	f7ff fee7 	bl	8003322 <SD_SendCmd>
 8003554:	0003      	movs	r3, r0
 8003556:	2b01      	cmp	r3, #1
 8003558:	d801      	bhi.n	800355e <SD_disk_initialize+0x162>
 800355a:	2202      	movs	r2, #2
 800355c:	e000      	b.n	8003560 <SD_disk_initialize+0x164>
 800355e:	2201      	movs	r2, #1
 8003560:	230e      	movs	r3, #14
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	701a      	strb	r2, [r3, #0]
      do
      {
        if (type == CT_SD1)
 8003566:	230e      	movs	r3, #14
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d10d      	bne.n	800358c <SD_disk_initialize+0x190>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003570:	2100      	movs	r1, #0
 8003572:	2077      	movs	r0, #119	; 0x77
 8003574:	f7ff fed5 	bl	8003322 <SD_SendCmd>
 8003578:	0003      	movs	r3, r0
 800357a:	2b01      	cmp	r3, #1
 800357c:	d80c      	bhi.n	8003598 <SD_disk_initialize+0x19c>
 800357e:	2100      	movs	r1, #0
 8003580:	2069      	movs	r0, #105	; 0x69
 8003582:	f7ff fece 	bl	8003322 <SD_SendCmd>
 8003586:	1e03      	subs	r3, r0, #0
 8003588:	d106      	bne.n	8003598 <SD_disk_initialize+0x19c>
 800358a:	e00b      	b.n	80035a4 <SD_disk_initialize+0x1a8>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800358c:	2100      	movs	r1, #0
 800358e:	2041      	movs	r0, #65	; 0x41
 8003590:	f7ff fec7 	bl	8003322 <SD_SendCmd>
 8003594:	1e03      	subs	r3, r0, #0
 8003596:	d004      	beq.n	80035a2 <SD_disk_initialize+0x1a6>
        }
      } while (Timer1);
 8003598:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <SD_disk_initialize+0x20c>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e2      	bne.n	8003566 <SD_disk_initialize+0x16a>
 80035a0:	e000      	b.n	80035a4 <SD_disk_initialize+0x1a8>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80035a2:	46c0      	nop			; (mov r8, r8)
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80035a4:	4b18      	ldr	r3, [pc, #96]	; (8003608 <SD_disk_initialize+0x20c>)
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <SD_disk_initialize+0x1c0>
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	0019      	movs	r1, r3
 80035b2:	2050      	movs	r0, #80	; 0x50
 80035b4:	f7ff feb5 	bl	8003322 <SD_SendCmd>
 80035b8:	1e03      	subs	r3, r0, #0
 80035ba:	d003      	beq.n	80035c4 <SD_disk_initialize+0x1c8>
 80035bc:	230e      	movs	r3, #14
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
    }
  }
  CardType = type;
 80035c4:	4b11      	ldr	r3, [pc, #68]	; (800360c <SD_disk_initialize+0x210>)
 80035c6:	240e      	movs	r4, #14
 80035c8:	193a      	adds	r2, r7, r4
 80035ca:	7812      	ldrb	r2, [r2, #0]
 80035cc:	701a      	strb	r2, [r3, #0]
  /* Idle */
  DESELECT();
 80035ce:	f7ff fd38 	bl	8003042 <DESELECT>
  SPI_RxByte();
 80035d2:	f7ff fd7b 	bl	80030cc <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <SD_disk_initialize+0x1f4>
  {
    Stat &= ~STA_NOINIT;
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <SD_disk_initialize+0x208>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2201      	movs	r2, #1
 80035e6:	4393      	bics	r3, r2
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <SD_disk_initialize+0x208>)
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	e001      	b.n	80035f4 <SD_disk_initialize+0x1f8>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80035f0:	f7ff fdfc 	bl	80031ec <SD_PowerOff>
  }
  return Stat;
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <SD_disk_initialize+0x208>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b2db      	uxtb	r3, r3
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bdb0      	pop	{r4, r5, r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	20000000 	.word	0x20000000
 8003608:	20000208 	.word	0x20000208
 800360c:	2000020c 	.word	0x2000020c

08003610 <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	0002      	movs	r2, r0
 8003618:	1dfb      	adds	r3, r7, #7
 800361a:	701a      	strb	r2, [r3, #0]
  if (drv) return STA_NOINIT;
 800361c:	1dfb      	adds	r3, r7, #7
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <SD_disk_status+0x18>
 8003624:	2301      	movs	r3, #1
 8003626:	e002      	b.n	800362e <SD_disk_status+0x1e>
  return Stat;
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <SD_disk_status+0x28>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b2db      	uxtb	r3, r3
}
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b002      	add	sp, #8
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	20000000 	.word	0x20000000

0800363c <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	210f      	movs	r1, #15
 800364a:	187b      	adds	r3, r7, r1
 800364c:	1c02      	adds	r2, r0, #0
 800364e:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003650:	187b      	adds	r3, r7, r1
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d102      	bne.n	800365e <SD_disk_read+0x22>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <SD_disk_read+0x26>
 800365e:	2304      	movs	r3, #4
 8003660:	e053      	b.n	800370a <SD_disk_read+0xce>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003662:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <SD_disk_read+0xd8>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	001a      	movs	r2, r3
 800366a:	2301      	movs	r3, #1
 800366c:	4013      	ands	r3, r2
 800366e:	d001      	beq.n	8003674 <SD_disk_read+0x38>
 8003670:	2303      	movs	r3, #3
 8003672:	e04a      	b.n	800370a <SD_disk_read+0xce>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <SD_disk_read+0xdc>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	001a      	movs	r2, r3
 800367a:	2304      	movs	r3, #4
 800367c:	4013      	ands	r3, r2
 800367e:	d102      	bne.n	8003686 <SD_disk_read+0x4a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	025b      	lsls	r3, r3, #9
 8003684:	607b      	str	r3, [r7, #4]
  SELECT();
 8003686:	f7ff fccd 	bl	8003024 <SELECT>
  if (count == 1)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d112      	bne.n	80036b6 <SD_disk_read+0x7a>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	0019      	movs	r1, r3
 8003694:	2051      	movs	r0, #81	; 0x51
 8003696:	f7ff fe44 	bl	8003322 <SD_SendCmd>
 800369a:	1e03      	subs	r3, r0, #0
 800369c:	d12d      	bne.n	80036fa <SD_disk_read+0xbe>
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	009a      	lsls	r2, r3, #2
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	0011      	movs	r1, r2
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7ff fdb4 	bl	8003214 <SD_RxDataBlock>
 80036ac:	1e03      	subs	r3, r0, #0
 80036ae:	d024      	beq.n	80036fa <SD_disk_read+0xbe>
 80036b0:	2300      	movs	r3, #0
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	e021      	b.n	80036fa <SD_disk_read+0xbe>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0019      	movs	r1, r3
 80036ba:	2052      	movs	r0, #82	; 0x52
 80036bc:	f7ff fe31 	bl	8003322 <SD_SendCmd>
 80036c0:	1e03      	subs	r3, r0, #0
 80036c2:	d11a      	bne.n	80036fa <SD_disk_read+0xbe>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	009a      	lsls	r2, r3, #2
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	0011      	movs	r1, r2
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff fda1 	bl	8003214 <SD_RxDataBlock>
 80036d2:	1e03      	subs	r3, r0, #0
 80036d4:	d00c      	beq.n	80036f0 <SD_disk_read+0xb4>
        buff += 512;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2280      	movs	r2, #128	; 0x80
 80036da:	0092      	lsls	r2, r2, #2
 80036dc:	4694      	mov	ip, r2
 80036de:	4463      	add	r3, ip
 80036e0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1ea      	bne.n	80036c4 <SD_disk_read+0x88>
 80036ee:	e000      	b.n	80036f2 <SD_disk_read+0xb6>
        if (!SD_RxDataBlock(buff, 512)) break;
 80036f0:	46c0      	nop			; (mov r8, r8)
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80036f2:	2100      	movs	r1, #0
 80036f4:	204c      	movs	r0, #76	; 0x4c
 80036f6:	f7ff fe14 	bl	8003322 <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 80036fa:	f7ff fca2 	bl	8003042 <DESELECT>
  SPI_RxByte();
 80036fe:	f7ff fce5 	bl	80030cc <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	1e5a      	subs	r2, r3, #1
 8003706:	4193      	sbcs	r3, r2
 8003708:	b2db      	uxtb	r3, r3
}
 800370a:	0018      	movs	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	20000000 	.word	0x20000000
 8003718:	2000020c 	.word	0x2000020c

0800371c <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	210f      	movs	r1, #15
 800372a:	187b      	adds	r3, r7, r1
 800372c:	1c02      	adds	r2, r0, #0
 800372e:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003730:	187b      	adds	r3, r7, r1
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <SD_disk_write+0x22>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <SD_disk_write+0x26>
 800373e:	2304      	movs	r3, #4
 8003740:	e06b      	b.n	800381a <SD_disk_write+0xfe>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003742:	4b38      	ldr	r3, [pc, #224]	; (8003824 <SD_disk_write+0x108>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	001a      	movs	r2, r3
 800374a:	2301      	movs	r3, #1
 800374c:	4013      	ands	r3, r2
 800374e:	d001      	beq.n	8003754 <SD_disk_write+0x38>
 8003750:	2303      	movs	r3, #3
 8003752:	e062      	b.n	800381a <SD_disk_write+0xfe>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8003754:	4b33      	ldr	r3, [pc, #204]	; (8003824 <SD_disk_write+0x108>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	001a      	movs	r2, r3
 800375c:	2304      	movs	r3, #4
 800375e:	4013      	ands	r3, r2
 8003760:	d001      	beq.n	8003766 <SD_disk_write+0x4a>
 8003762:	2302      	movs	r3, #2
 8003764:	e059      	b.n	800381a <SD_disk_write+0xfe>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003766:	4b30      	ldr	r3, [pc, #192]	; (8003828 <SD_disk_write+0x10c>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	001a      	movs	r2, r3
 800376c:	2304      	movs	r3, #4
 800376e:	4013      	ands	r3, r2
 8003770:	d102      	bne.n	8003778 <SD_disk_write+0x5c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	025b      	lsls	r3, r3, #9
 8003776:	607b      	str	r3, [r7, #4]
  SELECT();
 8003778:	f7ff fc54 	bl	8003024 <SELECT>
  if (count == 1)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d110      	bne.n	80037a4 <SD_disk_write+0x88>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	0019      	movs	r1, r3
 8003786:	2058      	movs	r0, #88	; 0x58
 8003788:	f7ff fdcb 	bl	8003322 <SD_SendCmd>
 800378c:	1e03      	subs	r3, r0, #0
 800378e:	d13c      	bne.n	800380a <SD_disk_write+0xee>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	21fe      	movs	r1, #254	; 0xfe
 8003794:	0018      	movs	r0, r3
 8003796:	f7ff fd71 	bl	800327c <SD_TxDataBlock>
 800379a:	1e03      	subs	r3, r0, #0
 800379c:	d035      	beq.n	800380a <SD_disk_write+0xee>
      count = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	e032      	b.n	800380a <SD_disk_write+0xee>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80037a4:	4b20      	ldr	r3, [pc, #128]	; (8003828 <SD_disk_write+0x10c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	001a      	movs	r2, r3
 80037aa:	2302      	movs	r3, #2
 80037ac:	4013      	ands	r3, r2
 80037ae:	d008      	beq.n	80037c2 <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 80037b0:	2100      	movs	r1, #0
 80037b2:	2077      	movs	r0, #119	; 0x77
 80037b4:	f7ff fdb5 	bl	8003322 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	0019      	movs	r1, r3
 80037bc:	2057      	movs	r0, #87	; 0x57
 80037be:	f7ff fdb0 	bl	8003322 <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	0019      	movs	r1, r3
 80037c6:	2059      	movs	r0, #89	; 0x59
 80037c8:	f7ff fdab 	bl	8003322 <SD_SendCmd>
 80037cc:	1e03      	subs	r3, r0, #0
 80037ce:	d11c      	bne.n	800380a <SD_disk_write+0xee>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	21fc      	movs	r1, #252	; 0xfc
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7ff fd51 	bl	800327c <SD_TxDataBlock>
 80037da:	1e03      	subs	r3, r0, #0
 80037dc:	d00c      	beq.n	80037f8 <SD_disk_write+0xdc>
        buff += 512;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2280      	movs	r2, #128	; 0x80
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	4694      	mov	ip, r2
 80037e6:	4463      	add	r3, ip
 80037e8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1ec      	bne.n	80037d0 <SD_disk_write+0xb4>
 80037f6:	e000      	b.n	80037fa <SD_disk_write+0xde>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80037f8:	46c0      	nop			; (mov r8, r8)
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80037fa:	21fd      	movs	r1, #253	; 0xfd
 80037fc:	2000      	movs	r0, #0
 80037fe:	f7ff fd3d 	bl	800327c <SD_TxDataBlock>
 8003802:	1e03      	subs	r3, r0, #0
 8003804:	d101      	bne.n	800380a <SD_disk_write+0xee>
      {
        count = 1;
 8003806:	2301      	movs	r3, #1
 8003808:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 800380a:	f7ff fc1a 	bl	8003042 <DESELECT>
  SPI_RxByte();
 800380e:	f7ff fc5d 	bl	80030cc <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	1e5a      	subs	r2, r3, #1
 8003816:	4193      	sbcs	r3, r2
 8003818:	b2db      	uxtb	r3, r3
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b004      	add	sp, #16
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	20000000 	.word	0x20000000
 8003828:	2000020c 	.word	0x2000020c

0800382c <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b08b      	sub	sp, #44	; 0x2c
 8003830:	af00      	add	r7, sp, #0
 8003832:	603a      	str	r2, [r7, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	1c02      	adds	r2, r0, #0
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	1dbb      	adds	r3, r7, #6
 800383c:	1c0a      	adds	r2, r1, #0
 800383e:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8003844:	1dfb      	adds	r3, r7, #7
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <SD_disk_ioctl+0x24>
 800384c:	2304      	movs	r3, #4
 800384e:	e11b      	b.n	8003a88 <SD_disk_ioctl+0x25c>
  res = RES_ERROR;
 8003850:	2327      	movs	r3, #39	; 0x27
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
  if (ctrl == CTRL_POWER)
 8003858:	1dbb      	adds	r3, r7, #6
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b05      	cmp	r3, #5
 800385e:	d127      	bne.n	80038b0 <SD_disk_ioctl+0x84>
  {
    switch (*ptr)
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d013      	beq.n	8003890 <SD_disk_ioctl+0x64>
 8003868:	dc1d      	bgt.n	80038a6 <SD_disk_ioctl+0x7a>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <SD_disk_ioctl+0x48>
 800386e:	2b01      	cmp	r3, #1
 8003870:	d007      	beq.n	8003882 <SD_disk_ioctl+0x56>
 8003872:	e018      	b.n	80038a6 <SD_disk_ioctl+0x7a>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8003874:	f7ff fcba 	bl	80031ec <SD_PowerOff>
      res = RES_OK;
 8003878:	2327      	movs	r3, #39	; 0x27
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
      break;
 8003880:	e0ff      	b.n	8003a82 <SD_disk_ioctl+0x256>
    case 1:
      SD_PowerOn();   /* Power On */
 8003882:	f7ff fc6b 	bl	800315c <SD_PowerOn>
      res = RES_OK;
 8003886:	2327      	movs	r3, #39	; 0x27
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
      break;
 800388e:	e0f8      	b.n	8003a82 <SD_disk_ioctl+0x256>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	1c5c      	adds	r4, r3, #1
 8003894:	f7ff fcb4 	bl	8003200 <SD_CheckPower>
 8003898:	0003      	movs	r3, r0
 800389a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800389c:	2327      	movs	r3, #39	; 0x27
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
      break;
 80038a4:	e0ed      	b.n	8003a82 <SD_disk_ioctl+0x256>
    default:
      res = RES_PARERR;
 80038a6:	2327      	movs	r3, #39	; 0x27
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	2204      	movs	r2, #4
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e0e8      	b.n	8003a82 <SD_disk_ioctl+0x256>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80038b0:	4b77      	ldr	r3, [pc, #476]	; (8003a90 <SD_disk_ioctl+0x264>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	001a      	movs	r2, r3
 80038b8:	2301      	movs	r3, #1
 80038ba:	4013      	ands	r3, r2
 80038bc:	d001      	beq.n	80038c2 <SD_disk_ioctl+0x96>
 80038be:	2303      	movs	r3, #3
 80038c0:	e0e2      	b.n	8003a88 <SD_disk_ioctl+0x25c>
    SELECT();
 80038c2:	f7ff fbaf 	bl	8003024 <SELECT>
    switch (ctrl)
 80038c6:	1dbb      	adds	r3, r7, #6
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b0d      	cmp	r3, #13
 80038cc:	d900      	bls.n	80038d0 <SD_disk_ioctl+0xa4>
 80038ce:	e0c8      	b.n	8003a62 <SD_disk_ioctl+0x236>
 80038d0:	009a      	lsls	r2, r3, #2
 80038d2:	4b70      	ldr	r3, [pc, #448]	; (8003a94 <SD_disk_ioctl+0x268>)
 80038d4:	18d3      	adds	r3, r2, r3
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80038da:	2100      	movs	r1, #0
 80038dc:	2049      	movs	r0, #73	; 0x49
 80038de:	f7ff fd20 	bl	8003322 <SD_SendCmd>
 80038e2:	1e03      	subs	r3, r0, #0
 80038e4:	d000      	beq.n	80038e8 <SD_disk_ioctl+0xbc>
 80038e6:	e0c1      	b.n	8003a6c <SD_disk_ioctl+0x240>
 80038e8:	240c      	movs	r4, #12
 80038ea:	193b      	adds	r3, r7, r4
 80038ec:	2110      	movs	r1, #16
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7ff fc90 	bl	8003214 <SD_RxDataBlock>
 80038f4:	1e03      	subs	r3, r0, #0
 80038f6:	d100      	bne.n	80038fa <SD_disk_ioctl+0xce>
 80038f8:	e0b8      	b.n	8003a6c <SD_disk_ioctl+0x240>
      {
        if ((csd[0] >> 6) == 1)
 80038fa:	0022      	movs	r2, r4
 80038fc:	18bb      	adds	r3, r7, r2
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	099b      	lsrs	r3, r3, #6
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d114      	bne.n	8003932 <SD_disk_ioctl+0x106>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003908:	0011      	movs	r1, r2
 800390a:	18bb      	adds	r3, r7, r2
 800390c:	7a5b      	ldrb	r3, [r3, #9]
 800390e:	b29a      	uxth	r2, r3
 8003910:	187b      	adds	r3, r7, r1
 8003912:	7a1b      	ldrb	r3, [r3, #8]
 8003914:	b29b      	uxth	r3, r3
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	b29b      	uxth	r3, r3
 800391a:	18d3      	adds	r3, r2, r3
 800391c:	b29a      	uxth	r2, r3
 800391e:	211e      	movs	r1, #30
 8003920:	187b      	adds	r3, r7, r1
 8003922:	3201      	adds	r2, #1
 8003924:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 8003926:	187b      	adds	r3, r7, r1
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	029a      	lsls	r2, r3, #10
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e03a      	b.n	80039a8 <SD_disk_ioctl+0x17c>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003932:	200c      	movs	r0, #12
 8003934:	183b      	adds	r3, r7, r0
 8003936:	795b      	ldrb	r3, [r3, #5]
 8003938:	220f      	movs	r2, #15
 800393a:	4013      	ands	r3, r2
 800393c:	b2da      	uxtb	r2, r3
 800393e:	183b      	adds	r3, r7, r0
 8003940:	7a9b      	ldrb	r3, [r3, #10]
 8003942:	09db      	lsrs	r3, r3, #7
 8003944:	b2db      	uxtb	r3, r3
 8003946:	18d3      	adds	r3, r2, r3
 8003948:	b2da      	uxtb	r2, r3
 800394a:	183b      	adds	r3, r7, r0
 800394c:	7a5b      	ldrb	r3, [r3, #9]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2106      	movs	r1, #6
 8003954:	400b      	ands	r3, r1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	18d3      	adds	r3, r2, r3
 800395a:	b2da      	uxtb	r2, r3
 800395c:	2426      	movs	r4, #38	; 0x26
 800395e:	193b      	adds	r3, r7, r4
 8003960:	3202      	adds	r2, #2
 8003962:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003964:	183b      	adds	r3, r7, r0
 8003966:	7a1b      	ldrb	r3, [r3, #8]
 8003968:	099b      	lsrs	r3, r3, #6
 800396a:	b2db      	uxtb	r3, r3
 800396c:	b29a      	uxth	r2, r3
 800396e:	183b      	adds	r3, r7, r0
 8003970:	79db      	ldrb	r3, [r3, #7]
 8003972:	b29b      	uxth	r3, r3
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	b29b      	uxth	r3, r3
 8003978:	18d3      	adds	r3, r2, r3
 800397a:	b29a      	uxth	r2, r3
 800397c:	183b      	adds	r3, r7, r0
 800397e:	799b      	ldrb	r3, [r3, #6]
 8003980:	029b      	lsls	r3, r3, #10
 8003982:	b299      	uxth	r1, r3
 8003984:	23c0      	movs	r3, #192	; 0xc0
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	400b      	ands	r3, r1
 800398a:	b29b      	uxth	r3, r3
 800398c:	18d3      	adds	r3, r2, r3
 800398e:	b29a      	uxth	r2, r3
 8003990:	211e      	movs	r1, #30
 8003992:	187b      	adds	r3, r7, r1
 8003994:	3201      	adds	r2, #1
 8003996:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003998:	187b      	adds	r3, r7, r1
 800399a:	881a      	ldrh	r2, [r3, #0]
 800399c:	193b      	adds	r3, r7, r4
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	3b09      	subs	r3, #9
 80039a2:	409a      	lsls	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80039a8:	2327      	movs	r3, #39	; 0x27
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
      }
      break;
 80039b0:	e05c      	b.n	8003a6c <SD_disk_ioctl+0x240>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	0092      	lsls	r2, r2, #2
 80039b8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80039ba:	2327      	movs	r3, #39	; 0x27
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
      break;
 80039c2:	e05a      	b.n	8003a7a <SD_disk_ioctl+0x24e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80039c4:	f7ff fbae 	bl	8003124 <SD_ReadyWait>
 80039c8:	0003      	movs	r3, r0
 80039ca:	2bff      	cmp	r3, #255	; 0xff
 80039cc:	d150      	bne.n	8003a70 <SD_disk_ioctl+0x244>
 80039ce:	2327      	movs	r3, #39	; 0x27
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
      break;
 80039d6:	e04b      	b.n	8003a70 <SD_disk_ioctl+0x244>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80039d8:	2100      	movs	r1, #0
 80039da:	2049      	movs	r0, #73	; 0x49
 80039dc:	f7ff fca1 	bl	8003322 <SD_SendCmd>
 80039e0:	1e03      	subs	r3, r0, #0
 80039e2:	d147      	bne.n	8003a74 <SD_disk_ioctl+0x248>
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	2110      	movs	r1, #16
 80039e8:	0018      	movs	r0, r3
 80039ea:	f7ff fc13 	bl	8003214 <SD_RxDataBlock>
 80039ee:	1e03      	subs	r3, r0, #0
 80039f0:	d040      	beq.n	8003a74 <SD_disk_ioctl+0x248>
 80039f2:	2327      	movs	r3, #39	; 0x27
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
      break;
 80039fa:	e03b      	b.n	8003a74 <SD_disk_ioctl+0x248>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80039fc:	2100      	movs	r1, #0
 80039fe:	204a      	movs	r0, #74	; 0x4a
 8003a00:	f7ff fc8f 	bl	8003322 <SD_SendCmd>
 8003a04:	1e03      	subs	r3, r0, #0
 8003a06:	d137      	bne.n	8003a78 <SD_disk_ioctl+0x24c>
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7ff fc01 	bl	8003214 <SD_RxDataBlock>
 8003a12:	1e03      	subs	r3, r0, #0
 8003a14:	d030      	beq.n	8003a78 <SD_disk_ioctl+0x24c>
 8003a16:	2327      	movs	r3, #39	; 0x27
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
      break;
 8003a1e:	e02b      	b.n	8003a78 <SD_disk_ioctl+0x24c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8003a20:	2100      	movs	r1, #0
 8003a22:	207a      	movs	r0, #122	; 0x7a
 8003a24:	f7ff fc7d 	bl	8003322 <SD_SendCmd>
 8003a28:	1e03      	subs	r3, r0, #0
 8003a2a:	d11a      	bne.n	8003a62 <SD_disk_ioctl+0x236>
      {
        for (n = 0; n < 4; n++)
 8003a2c:	2326      	movs	r3, #38	; 0x26
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	e00c      	b.n	8003a50 <SD_disk_ioctl+0x224>
        {
          *ptr++ = SPI_RxByte();
 8003a36:	6a3c      	ldr	r4, [r7, #32]
 8003a38:	1c63      	adds	r3, r4, #1
 8003a3a:	623b      	str	r3, [r7, #32]
 8003a3c:	f7ff fb46 	bl	80030cc <SPI_RxByte>
 8003a40:	0003      	movs	r3, r0
 8003a42:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003a44:	2126      	movs	r1, #38	; 0x26
 8003a46:	187b      	adds	r3, r7, r1
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	187b      	adds	r3, r7, r1
 8003a4c:	3201      	adds	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	2326      	movs	r3, #38	; 0x26
 8003a52:	18fb      	adds	r3, r7, r3
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d9ed      	bls.n	8003a36 <SD_disk_ioctl+0x20a>
        }
        res = RES_OK;
 8003a5a:	2327      	movs	r3, #39	; 0x27
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
      }
    default:
      res = RES_PARERR;
 8003a62:	2327      	movs	r3, #39	; 0x27
 8003a64:	18fb      	adds	r3, r7, r3
 8003a66:	2204      	movs	r2, #4
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	e006      	b.n	8003a7a <SD_disk_ioctl+0x24e>
      break;
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	e004      	b.n	8003a7a <SD_disk_ioctl+0x24e>
      break;
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	e002      	b.n	8003a7a <SD_disk_ioctl+0x24e>
      break;
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	e000      	b.n	8003a7a <SD_disk_ioctl+0x24e>
      break;
 8003a78:	46c0      	nop			; (mov r8, r8)
    }
    DESELECT();
 8003a7a:	f7ff fae2 	bl	8003042 <DESELECT>
    SPI_RxByte();
 8003a7e:	f7ff fb25 	bl	80030cc <SPI_RxByte>
  }
  return res;
 8003a82:	2327      	movs	r3, #39	; 0x27
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	781b      	ldrb	r3, [r3, #0]
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b00b      	add	sp, #44	; 0x2c
 8003a8e:	bd90      	pop	{r4, r7, pc}
 8003a90:	20000000 	.word	0x20000000
 8003a94:	0800ed9c 	.word	0x0800ed9c

08003a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a9e:	f000 fea9 	bl	80047f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003aa2:	f000 f96b 	bl	8003d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003aa6:	f000 fadf 	bl	8004068 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003aaa:	f000 faa5 	bl	8003ff8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8003aae:	f002 ffe3 	bl	8006a78 <MX_FATFS_Init>
  MX_ADC_Init();
 8003ab2:	f000 f9cf 	bl	8003e54 <MX_ADC_Init>
  MX_I2C1_Init();
 8003ab6:	f000 fa5f 	bl	8003f78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  start_time_ms = HAL_GetTick();
 8003aba:	f000 ff01 	bl	80048c0 <HAL_GetTick>
 8003abe:	0002      	movs	r2, r0
 8003ac0:	4b9c      	ldr	r3, [pc, #624]	; (8003d34 <main+0x29c>)
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t currentPlusState = HAL_GPIO_ReadPin(GPIOC, Plus_Pin);
 8003ac4:	1dfc      	adds	r4, r7, #7
 8003ac6:	4b9c      	ldr	r3, [pc, #624]	; (8003d38 <main+0x2a0>)
 8003ac8:	2102      	movs	r1, #2
 8003aca:	0018      	movs	r0, r3
 8003acc:	f001 fb34 	bl	8005138 <HAL_GPIO_ReadPin>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	7023      	strb	r3, [r4, #0]
	      uint8_t currentMinusState = HAL_GPIO_ReadPin(GPIOC, Minus_Pin);
 8003ad4:	1dbc      	adds	r4, r7, #6
 8003ad6:	4b98      	ldr	r3, [pc, #608]	; (8003d38 <main+0x2a0>)
 8003ad8:	2101      	movs	r1, #1
 8003ada:	0018      	movs	r0, r3
 8003adc:	f001 fb2c 	bl	8005138 <HAL_GPIO_ReadPin>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	7023      	strb	r3, [r4, #0]

	      if (currentPlusState == GPIO_PIN_SET || currentMinusState == GPIO_PIN_SET) {
 8003ae4:	1dfb      	adds	r3, r7, #7
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d004      	beq.n	8003af6 <main+0x5e>
 8003aec:	1dbb      	adds	r3, r7, #6
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d000      	beq.n	8003af6 <main+0x5e>
 8003af4:	e0b0      	b.n	8003c58 <main+0x1c0>
	          if ((HAL_GetTick() - lastDebounceTime) > debounceDelay) {
 8003af6:	f000 fee3 	bl	80048c0 <HAL_GetTick>
 8003afa:	0002      	movs	r2, r0
 8003afc:	4b8f      	ldr	r3, [pc, #572]	; (8003d3c <main+0x2a4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2232      	movs	r2, #50	; 0x32
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d800      	bhi.n	8003b0a <main+0x72>
 8003b08:	e0a6      	b.n	8003c58 <main+0x1c0>
	              // Only update the value if the state has changed
	              if ((currentPlusState == GPIO_PIN_SET && lastPlusState != GPIO_PIN_SET) ||
 8003b0a:	1dfb      	adds	r3, r7, #7
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d103      	bne.n	8003b1a <main+0x82>
 8003b12:	4b8b      	ldr	r3, [pc, #556]	; (8003d40 <main+0x2a8>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <main+0x92>
 8003b1a:	1dbb      	adds	r3, r7, #6
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d122      	bne.n	8003b68 <main+0xd0>
	                  (currentMinusState == GPIO_PIN_SET && lastMinusState != GPIO_PIN_SET)) {
 8003b22:	4b88      	ldr	r3, [pc, #544]	; (8003d44 <main+0x2ac>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d01e      	beq.n	8003b68 <main+0xd0>
	                  if (currentPlusState == GPIO_PIN_SET) {
 8003b2a:	1dfb      	adds	r3, r7, #7
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d10b      	bne.n	8003b4a <main+0xb2>
	                      valueToAdjust++;
 8003b32:	4b85      	ldr	r3, [pc, #532]	; (8003d48 <main+0x2b0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	21fe      	movs	r1, #254	; 0xfe
 8003b38:	0589      	lsls	r1, r1, #22
 8003b3a:	1c18      	adds	r0, r3, #0
 8003b3c:	f7fc fe3e 	bl	80007bc <__aeabi_fadd>
 8003b40:	1c03      	adds	r3, r0, #0
 8003b42:	1c1a      	adds	r2, r3, #0
 8003b44:	4b80      	ldr	r3, [pc, #512]	; (8003d48 <main+0x2b0>)
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	e00e      	b.n	8003b68 <main+0xd0>
	                  } else if (currentMinusState == GPIO_PIN_SET) {
 8003b4a:	1dbb      	adds	r3, r7, #6
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d10a      	bne.n	8003b68 <main+0xd0>
	                      valueToAdjust--;
 8003b52:	4b7d      	ldr	r3, [pc, #500]	; (8003d48 <main+0x2b0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	21fe      	movs	r1, #254	; 0xfe
 8003b58:	0589      	lsls	r1, r1, #22
 8003b5a:	1c18      	adds	r0, r3, #0
 8003b5c:	f7fd f8e8 	bl	8000d30 <__aeabi_fsub>
 8003b60:	1c03      	adds	r3, r0, #0
 8003b62:	1c1a      	adds	r2, r3, #0
 8003b64:	4b78      	ldr	r3, [pc, #480]	; (8003d48 <main+0x2b0>)
 8003b66:	601a      	str	r2, [r3, #0]
	                  }
	              }

	              flashingStartTime = HAL_GetTick();
 8003b68:	f000 feaa 	bl	80048c0 <HAL_GetTick>
 8003b6c:	0002      	movs	r2, r0
 8003b6e:	4b77      	ldr	r3, [pc, #476]	; (8003d4c <main+0x2b4>)
 8003b70:	601a      	str	r2, [r3, #0]
	              while ((HAL_GetTick() - flashingStartTime) < flashingDuration) {
 8003b72:	e05c      	b.n	8003c2e <main+0x196>
	                  // Save the last state before reading the current state
	                  lastPlusState = currentPlusState;
 8003b74:	4b72      	ldr	r3, [pc, #456]	; (8003d40 <main+0x2a8>)
 8003b76:	1dfa      	adds	r2, r7, #7
 8003b78:	7812      	ldrb	r2, [r2, #0]
 8003b7a:	701a      	strb	r2, [r3, #0]
	                  lastMinusState = currentMinusState;
 8003b7c:	4b71      	ldr	r3, [pc, #452]	; (8003d44 <main+0x2ac>)
 8003b7e:	1dba      	adds	r2, r7, #6
 8003b80:	7812      	ldrb	r2, [r2, #0]
 8003b82:	701a      	strb	r2, [r3, #0]

	                  currentPlusState = HAL_GPIO_ReadPin(GPIOC, Plus_Pin);
 8003b84:	1dfc      	adds	r4, r7, #7
 8003b86:	4b6c      	ldr	r3, [pc, #432]	; (8003d38 <main+0x2a0>)
 8003b88:	2102      	movs	r1, #2
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f001 fad4 	bl	8005138 <HAL_GPIO_ReadPin>
 8003b90:	0003      	movs	r3, r0
 8003b92:	7023      	strb	r3, [r4, #0]
	                  currentMinusState = HAL_GPIO_ReadPin(GPIOC, Minus_Pin);
 8003b94:	1dbc      	adds	r4, r7, #6
 8003b96:	4b68      	ldr	r3, [pc, #416]	; (8003d38 <main+0x2a0>)
 8003b98:	2101      	movs	r1, #1
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f001 facc 	bl	8005138 <HAL_GPIO_ReadPin>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	7023      	strb	r3, [r4, #0]

	                  // Check for subsequent button presses to restart the timer
	                  if (currentPlusState == GPIO_PIN_SET || currentMinusState == GPIO_PIN_SET) {
 8003ba4:	1dfb      	adds	r3, r7, #7
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d003      	beq.n	8003bb4 <main+0x11c>
 8003bac:	1dbb      	adds	r3, r7, #6
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d133      	bne.n	8003c1c <main+0x184>
	                      flashingStartTime = HAL_GetTick(); // Restart the 5-second interval
 8003bb4:	f000 fe84 	bl	80048c0 <HAL_GetTick>
 8003bb8:	0002      	movs	r2, r0
 8003bba:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <main+0x2b4>)
 8003bbc:	601a      	str	r2, [r3, #0]

	                      // Only update the value if the state has changed
	                      if ((currentPlusState == GPIO_PIN_SET && lastPlusState != GPIO_PIN_SET) ||
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d103      	bne.n	8003bce <main+0x136>
 8003bc6:	4b5e      	ldr	r3, [pc, #376]	; (8003d40 <main+0x2a8>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d107      	bne.n	8003bde <main+0x146>
 8003bce:	1dbb      	adds	r3, r7, #6
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d122      	bne.n	8003c1c <main+0x184>
	                          (currentMinusState == GPIO_PIN_SET && lastMinusState != GPIO_PIN_SET)) {
 8003bd6:	4b5b      	ldr	r3, [pc, #364]	; (8003d44 <main+0x2ac>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d01e      	beq.n	8003c1c <main+0x184>
	                          if (currentPlusState == GPIO_PIN_SET) {
 8003bde:	1dfb      	adds	r3, r7, #7
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10b      	bne.n	8003bfe <main+0x166>
	                              valueToAdjust++;
 8003be6:	4b58      	ldr	r3, [pc, #352]	; (8003d48 <main+0x2b0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	21fe      	movs	r1, #254	; 0xfe
 8003bec:	0589      	lsls	r1, r1, #22
 8003bee:	1c18      	adds	r0, r3, #0
 8003bf0:	f7fc fde4 	bl	80007bc <__aeabi_fadd>
 8003bf4:	1c03      	adds	r3, r0, #0
 8003bf6:	1c1a      	adds	r2, r3, #0
 8003bf8:	4b53      	ldr	r3, [pc, #332]	; (8003d48 <main+0x2b0>)
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	e00e      	b.n	8003c1c <main+0x184>
	                          } else if (currentMinusState == GPIO_PIN_SET) {
 8003bfe:	1dbb      	adds	r3, r7, #6
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d10a      	bne.n	8003c1c <main+0x184>
	                              valueToAdjust--;
 8003c06:	4b50      	ldr	r3, [pc, #320]	; (8003d48 <main+0x2b0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	21fe      	movs	r1, #254	; 0xfe
 8003c0c:	0589      	lsls	r1, r1, #22
 8003c0e:	1c18      	adds	r0, r3, #0
 8003c10:	f7fd f88e 	bl	8000d30 <__aeabi_fsub>
 8003c14:	1c03      	adds	r3, r0, #0
 8003c16:	1c1a      	adds	r2, r3, #0
 8003c18:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <main+0x2b0>)
 8003c1a:	601a      	str	r2, [r3, #0]
	                          }
	                      }
	                  }

	                  HAL_GPIO_TogglePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin);
 8003c1c:	23a0      	movs	r3, #160	; 0xa0
 8003c1e:	05db      	lsls	r3, r3, #23
 8003c20:	2102      	movs	r1, #2
 8003c22:	0018      	movs	r0, r3
 8003c24:	f001 fac2 	bl	80051ac <HAL_GPIO_TogglePin>
	                  HAL_Delay(100);
 8003c28:	2064      	movs	r0, #100	; 0x64
 8003c2a:	f000 fe53 	bl	80048d4 <HAL_Delay>
	              while ((HAL_GetTick() - flashingStartTime) < flashingDuration) {
 8003c2e:	f000 fe47 	bl	80048c0 <HAL_GetTick>
 8003c32:	0002      	movs	r2, r0
 8003c34:	4b45      	ldr	r3, [pc, #276]	; (8003d4c <main+0x2b4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	4a45      	ldr	r2, [pc, #276]	; (8003d50 <main+0x2b8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d399      	bcc.n	8003b74 <main+0xdc>
	              }

	              HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 8003c40:	23a0      	movs	r3, #160	; 0xa0
 8003c42:	05db      	lsls	r3, r3, #23
 8003c44:	2200      	movs	r2, #0
 8003c46:	2102      	movs	r1, #2
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f001 fa92 	bl	8005172 <HAL_GPIO_WritePin>
	              lastDebounceTime = HAL_GetTick();
 8003c4e:	f000 fe37 	bl	80048c0 <HAL_GetTick>
 8003c52:	0002      	movs	r2, r0
 8003c54:	4b39      	ldr	r3, [pc, #228]	; (8003d3c <main+0x2a4>)
 8003c56:	601a      	str	r2, [r3, #0]
	          }
	      }

	      // Save the last state at the end of the loop
	      lastPlusState = currentPlusState;
 8003c58:	4b39      	ldr	r3, [pc, #228]	; (8003d40 <main+0x2a8>)
 8003c5a:	1dfa      	adds	r2, r7, #7
 8003c5c:	7812      	ldrb	r2, [r2, #0]
 8003c5e:	701a      	strb	r2, [r3, #0]
	      lastMinusState = currentMinusState;
 8003c60:	4b38      	ldr	r3, [pc, #224]	; (8003d44 <main+0x2ac>)
 8003c62:	1dba      	adds	r2, r7, #6
 8003c64:	7812      	ldrb	r2, [r2, #0]
 8003c66:	701a      	strb	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 8003c68:	23a0      	movs	r3, #160	; 0xa0
 8003c6a:	05db      	lsls	r3, r3, #23
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f001 fa62 	bl	8005138 <HAL_GPIO_ReadPin>
 8003c74:	0003      	movs	r3, r0
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d11f      	bne.n	8003cba <main+0x222>
	 		  {
	 			  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_SET);
 8003c7a:	23a0      	movs	r3, #160	; 0xa0
 8003c7c:	05db      	lsls	r3, r3, #23
 8003c7e:	2201      	movs	r2, #1
 8003c80:	2102      	movs	r1, #2
 8003c82:	0018      	movs	r0, r3
 8003c84:	f001 fa75 	bl	8005172 <HAL_GPIO_WritePin>
	 			  uint32_t current_time_ms = HAL_GetTick();
 8003c88:	f000 fe1a 	bl	80048c0 <HAL_GetTick>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	603b      	str	r3, [r7, #0]
	 			  seconds_since_start = (current_time_ms - start_time_ms) / 1000.0f;
 8003c90:	4b28      	ldr	r3, [pc, #160]	; (8003d34 <main+0x29c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f7fd fa3b 	bl	8001114 <__aeabi_ui2f>
 8003c9e:	1c03      	adds	r3, r0, #0
 8003ca0:	492c      	ldr	r1, [pc, #176]	; (8003d54 <main+0x2bc>)
 8003ca2:	1c18      	adds	r0, r3, #0
 8003ca4:	f7fc ff2a 	bl	8000afc <__aeabi_fdiv>
 8003ca8:	1c03      	adds	r3, r0, #0
 8003caa:	1c1a      	adds	r2, r3, #0
 8003cac:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <main+0x2c0>)
 8003cae:	601a      	str	r2, [r3, #0]
	 			  Continuous_Same_State_Average();
 8003cb0:	f000 fb36 	bl	8004320 <Continuous_Same_State_Average>
	 			  process_SD_card();
 8003cb4:	f000 fa70 	bl	8004198 <process_SD_card>
 8003cb8:	e006      	b.n	8003cc8 <main+0x230>
	 		  }
	 		  else
	 		  {
	 			  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 8003cba:	23a0      	movs	r3, #160	; 0xa0
 8003cbc:	05db      	lsls	r3, r3, #23
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f001 fa55 	bl	8005172 <HAL_GPIO_WritePin>

	 	  }
	  if (state == State_CMOS) {
 8003cc8:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <main+0x2c4>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10e      	bne.n	8003cee <main+0x256>
	 	              // if(Voltage_Current_Read)
	 		  	 	 if(C_CMOS >= 0.03) //threshold
 8003cd0:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <main+0x2c8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	1c18      	adds	r0, r3, #0
 8003cd6:	f7ff f8ad 	bl	8002e34 <__aeabi_f2d>
 8003cda:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <main+0x2cc>)
 8003cdc:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <main+0x2d0>)
 8003cde:	f7fc fbd9 	bl	8000494 <__aeabi_dcmpge>
 8003ce2:	1e03      	subs	r3, r0, #0
 8003ce4:	d015      	beq.n	8003d12 <main+0x27a>
	 		  	 		 state = State_18650;  // 18650 Mode >= 20mA //1
 8003ce6:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <main+0x2c4>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	e011      	b.n	8003d12 <main+0x27a>
	 	          } else if(state == State_18650){
 8003cee:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <main+0x2c4>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d10d      	bne.n	8003d12 <main+0x27a>
	 	        	  if(C_18650 <= .01) //threshold
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <main+0x2d4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	1c18      	adds	r0, r3, #0
 8003cfc:	f7ff f89a 	bl	8002e34 <__aeabi_f2d>
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <main+0x2d8>)
 8003d02:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <main+0x2dc>)
 8003d04:	f7fc fbb2 	bl	800046c <__aeabi_dcmple>
 8003d08:	1e03      	subs	r3, r0, #0
 8003d0a:	d002      	beq.n	8003d12 <main+0x27a>
	 	              state = State_CMOS;  // Cmos Mode > //2
 8003d0c:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <main+0x2c4>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
//	 		  HAL_GPIO_WritePin(Load_Switch_18650_GPIO_Port, Load_Switch_18650_Pin, GPIO_PIN_RESET);
//	 		  HAL_GPIO_WritePin(Load_Switch_CMOS_GPIO_Port, Load_Switch_CMOS_Pin, GPIO_PIN_RESET);
//	 		  Error_Handler();

	 	  }
	 	  switch (state) {
 8003d12:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <main+0x2c4>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <main+0x288>
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d004      	beq.n	8003d28 <main+0x290>
 8003d1e:	e007      	b.n	8003d30 <main+0x298>
	 	              case State_CMOS: {  //0
	 	            	  Switch_State = 0;
 8003d20:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <main+0x2e0>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
	 	                  break;
 8003d26:	e003      	b.n	8003d30 <main+0x298>
	 	              }
	 	              case State_18650: { //1
	 	            	  Switch_State = 1;
 8003d28:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <main+0x2e0>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
	 	                  break;
 8003d2e:	46c0      	nop			; (mov r8, r8)
  {
 8003d30:	e6c8      	b.n	8003ac4 <main+0x2c>
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	20000334 	.word	0x20000334
 8003d38:	50000800 	.word	0x50000800
 8003d3c:	20000338 	.word	0x20000338
 8003d40:	20000344 	.word	0x20000344
 8003d44:	20000345 	.word	0x20000345
 8003d48:	20000340 	.word	0x20000340
 8003d4c:	2000033c 	.word	0x2000033c
 8003d50:	00001388 	.word	0x00001388
 8003d54:	447a0000 	.word	0x447a0000
 8003d58:	20000330 	.word	0x20000330
 8003d5c:	20000346 	.word	0x20000346
 8003d60:	2000031c 	.word	0x2000031c
 8003d64:	eb851eb8 	.word	0xeb851eb8
 8003d68:	3f9eb851 	.word	0x3f9eb851
 8003d6c:	20000320 	.word	0x20000320
 8003d70:	47ae147b 	.word	0x47ae147b
 8003d74:	3f847ae1 	.word	0x3f847ae1
 8003d78:	2000032c 	.word	0x2000032c

08003d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d7c:	b590      	push	{r4, r7, lr}
 8003d7e:	b099      	sub	sp, #100	; 0x64
 8003d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d82:	242c      	movs	r4, #44	; 0x2c
 8003d84:	193b      	adds	r3, r7, r4
 8003d86:	0018      	movs	r0, r3
 8003d88:	2334      	movs	r3, #52	; 0x34
 8003d8a:	001a      	movs	r2, r3
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	f007 fa6d 	bl	800b26c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d92:	2318      	movs	r3, #24
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	0018      	movs	r0, r3
 8003d98:	2314      	movs	r3, #20
 8003d9a:	001a      	movs	r2, r3
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	f007 fa65 	bl	800b26c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003da2:	003b      	movs	r3, r7
 8003da4:	0018      	movs	r0, r3
 8003da6:	2318      	movs	r3, #24
 8003da8:	001a      	movs	r2, r3
 8003daa:	2100      	movs	r1, #0
 8003dac:	f007 fa5e 	bl	800b26c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db0:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <SystemClock_Config+0xd0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a26      	ldr	r2, [pc, #152]	; (8003e50 <SystemClock_Config+0xd4>)
 8003db6:	401a      	ands	r2, r3
 8003db8:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <SystemClock_Config+0xd0>)
 8003dba:	2180      	movs	r1, #128	; 0x80
 8003dbc:	0109      	lsls	r1, r1, #4
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003dc2:	0021      	movs	r1, r4
 8003dc4:	187b      	adds	r3, r7, r1
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	2201      	movs	r2, #1
 8003dce:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003dd6:	187b      	adds	r3, r7, r1
 8003dd8:	22a0      	movs	r2, #160	; 0xa0
 8003dda:	0212      	lsls	r2, r2, #8
 8003ddc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	2200      	movs	r2, #0
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	0018      	movs	r0, r3
 8003de8:	f001 fb2a 	bl	8005440 <HAL_RCC_OscConfig>
 8003dec:	1e03      	subs	r3, r0, #0
 8003dee:	d001      	beq.n	8003df4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003df0:	f000 faea 	bl	80043c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003df4:	2118      	movs	r1, #24
 8003df6:	187b      	adds	r3, r7, r1
 8003df8:	220f      	movs	r2, #15
 8003dfa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003dfc:	187b      	adds	r3, r7, r1
 8003dfe:	2200      	movs	r2, #0
 8003e00:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e02:	187b      	adds	r3, r7, r1
 8003e04:	2200      	movs	r2, #0
 8003e06:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	2200      	movs	r2, #0
 8003e12:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	2100      	movs	r1, #0
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f001 fe8d 	bl	8005b38 <HAL_RCC_ClockConfig>
 8003e1e:	1e03      	subs	r3, r0, #0
 8003e20:	d001      	beq.n	8003e26 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003e22:	f000 fad1 	bl	80043c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003e26:	003b      	movs	r3, r7
 8003e28:	2208      	movs	r2, #8
 8003e2a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003e2c:	003b      	movs	r3, r7
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e32:	003b      	movs	r3, r7
 8003e34:	0018      	movs	r0, r3
 8003e36:	f002 f86d 	bl	8005f14 <HAL_RCCEx_PeriphCLKConfig>
 8003e3a:	1e03      	subs	r3, r0, #0
 8003e3c:	d001      	beq.n	8003e42 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003e3e:	f000 fac3 	bl	80043c8 <Error_Handler>
  }
}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b019      	add	sp, #100	; 0x64
 8003e48:	bd90      	pop	{r4, r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	40007000 	.word	0x40007000
 8003e50:	ffffe7ff 	.word	0xffffe7ff

08003e54 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e5a:	003b      	movs	r3, r7
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	2308      	movs	r3, #8
 8003e60:	001a      	movs	r2, r3
 8003e62:	2100      	movs	r1, #0
 8003e64:	f007 fa02 	bl	800b26c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003e68:	4b3d      	ldr	r3, [pc, #244]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003e6a:	4a3e      	ldr	r2, [pc, #248]	; (8003f64 <MX_ADC_Init+0x110>)
 8003e6c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003e6e:	4b3c      	ldr	r3, [pc, #240]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003e74:	4b3a      	ldr	r3, [pc, #232]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003e76:	2280      	movs	r2, #128	; 0x80
 8003e78:	0612      	lsls	r2, r2, #24
 8003e7a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003e7c:	4b38      	ldr	r3, [pc, #224]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003e82:	4b37      	ldr	r3, [pc, #220]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003e88:	4b35      	ldr	r3, [pc, #212]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e8e:	4b34      	ldr	r3, [pc, #208]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003e94:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003e96:	2220      	movs	r2, #32
 8003e98:	2100      	movs	r1, #0
 8003e9a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003e9c:	4b30      	ldr	r3, [pc, #192]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003e9e:	2221      	movs	r2, #33	; 0x21
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ea4:	4b2e      	ldr	r3, [pc, #184]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003eaa:	4b2d      	ldr	r3, [pc, #180]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003eac:	22c2      	movs	r2, #194	; 0xc2
 8003eae:	32ff      	adds	r2, #255	; 0xff
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003eb2:	4b2b      	ldr	r3, [pc, #172]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003eb4:	222c      	movs	r2, #44	; 0x2c
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003eba:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003ec0:	4b27      	ldr	r3, [pc, #156]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003ec6:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8003ecc:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003ed2:	4b23      	ldr	r3, [pc, #140]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003ed8:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003eda:	0018      	movs	r0, r3
 8003edc:	f000 fd1e 	bl	800491c <HAL_ADC_Init>
 8003ee0:	1e03      	subs	r3, r0, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003ee4:	f000 fa70 	bl	80043c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003ee8:	003b      	movs	r3, r7
 8003eea:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <MX_ADC_Init+0x114>)
 8003eec:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003eee:	003b      	movs	r3, r7
 8003ef0:	2280      	movs	r2, #128	; 0x80
 8003ef2:	0152      	lsls	r2, r2, #5
 8003ef4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003ef6:	003a      	movs	r2, r7
 8003ef8:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003efa:	0011      	movs	r1, r2
 8003efc:	0018      	movs	r0, r3
 8003efe:	f000 fe81 	bl	8004c04 <HAL_ADC_ConfigChannel>
 8003f02:	1e03      	subs	r3, r0, #0
 8003f04:	d001      	beq.n	8003f0a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003f06:	f000 fa5f 	bl	80043c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003f0a:	003b      	movs	r3, r7
 8003f0c:	4a17      	ldr	r2, [pc, #92]	; (8003f6c <MX_ADC_Init+0x118>)
 8003f0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f10:	003a      	movs	r2, r7
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003f14:	0011      	movs	r1, r2
 8003f16:	0018      	movs	r0, r3
 8003f18:	f000 fe74 	bl	8004c04 <HAL_ADC_ConfigChannel>
 8003f1c:	1e03      	subs	r3, r0, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003f20:	f000 fa52 	bl	80043c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003f24:	003b      	movs	r3, r7
 8003f26:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <MX_ADC_Init+0x11c>)
 8003f28:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f2a:	003a      	movs	r2, r7
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003f2e:	0011      	movs	r1, r2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 fe67 	bl	8004c04 <HAL_ADC_ConfigChannel>
 8003f36:	1e03      	subs	r3, r0, #0
 8003f38:	d001      	beq.n	8003f3e <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8003f3a:	f000 fa45 	bl	80043c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003f3e:	003b      	movs	r3, r7
 8003f40:	4a0c      	ldr	r2, [pc, #48]	; (8003f74 <MX_ADC_Init+0x120>)
 8003f42:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f44:	003a      	movs	r2, r7
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <MX_ADC_Init+0x10c>)
 8003f48:	0011      	movs	r1, r2
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f000 fe5a 	bl	8004c04 <HAL_ADC_ConfigChannel>
 8003f50:	1e03      	subs	r3, r0, #0
 8003f52:	d001      	beq.n	8003f58 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8003f54:	f000 fa38 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b002      	add	sp, #8
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000210 	.word	0x20000210
 8003f64:	40012400 	.word	0x40012400
 8003f68:	30001000 	.word	0x30001000
 8003f6c:	34002000 	.word	0x34002000
 8003f70:	38004000 	.word	0x38004000
 8003f74:	3c008000 	.word	0x3c008000

08003f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <MX_I2C1_Init+0x78>)
 8003f7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <MX_I2C1_Init+0x7c>)
 8003f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8003f82:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <MX_I2C1_Init+0x78>)
 8003f84:	22e1      	movs	r2, #225	; 0xe1
 8003f86:	00d2      	lsls	r2, r2, #3
 8003f88:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003f8a:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <MX_I2C1_Init+0x78>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f90:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <MX_I2C1_Init+0x78>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f96:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <MX_I2C1_Init+0x78>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003f9c:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <MX_I2C1_Init+0x78>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <MX_I2C1_Init+0x78>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <MX_I2C1_Init+0x78>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <MX_I2C1_Init+0x78>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <MX_I2C1_Init+0x78>)
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f001 f914 	bl	80051e4 <HAL_I2C_Init>
 8003fbc:	1e03      	subs	r3, r0, #0
 8003fbe:	d001      	beq.n	8003fc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003fc0:	f000 fa02 	bl	80043c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <MX_I2C1_Init+0x78>)
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f001 f9a1 	bl	8005310 <HAL_I2CEx_ConfigAnalogFilter>
 8003fce:	1e03      	subs	r3, r0, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003fd2:	f000 f9f9 	bl	80043c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <MX_I2C1_Init+0x78>)
 8003fd8:	2100      	movs	r1, #0
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f001 f9e4 	bl	80053a8 <HAL_I2CEx_ConfigDigitalFilter>
 8003fe0:	1e03      	subs	r3, r0, #0
 8003fe2:	d001      	beq.n	8003fe8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003fe4:	f000 f9f0 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	2000026c 	.word	0x2000026c
 8003ff4:	40005400 	.word	0x40005400

08003ff8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <MX_SPI1_Init+0x68>)
 8003ffe:	4a19      	ldr	r2, [pc, #100]	; (8004064 <MX_SPI1_Init+0x6c>)
 8004000:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <MX_SPI1_Init+0x68>)
 8004004:	2282      	movs	r2, #130	; 0x82
 8004006:	0052      	lsls	r2, r2, #1
 8004008:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800400a:	4b15      	ldr	r3, [pc, #84]	; (8004060 <MX_SPI1_Init+0x68>)
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004010:	4b13      	ldr	r3, [pc, #76]	; (8004060 <MX_SPI1_Init+0x68>)
 8004012:	2200      	movs	r2, #0
 8004014:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <MX_SPI1_Init+0x68>)
 8004018:	2200      	movs	r2, #0
 800401a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800401c:	4b10      	ldr	r3, [pc, #64]	; (8004060 <MX_SPI1_Init+0x68>)
 800401e:	2200      	movs	r2, #0
 8004020:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <MX_SPI1_Init+0x68>)
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	0092      	lsls	r2, r2, #2
 8004028:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <MX_SPI1_Init+0x68>)
 800402c:	2200      	movs	r2, #0
 800402e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <MX_SPI1_Init+0x68>)
 8004032:	2200      	movs	r2, #0
 8004034:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <MX_SPI1_Init+0x68>)
 8004038:	2200      	movs	r2, #0
 800403a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800403c:	4b08      	ldr	r3, [pc, #32]	; (8004060 <MX_SPI1_Init+0x68>)
 800403e:	2200      	movs	r2, #0
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <MX_SPI1_Init+0x68>)
 8004044:	2207      	movs	r2, #7
 8004046:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <MX_SPI1_Init+0x68>)
 800404a:	0018      	movs	r0, r3
 800404c:	f002 f88e 	bl	800616c <HAL_SPI_Init>
 8004050:	1e03      	subs	r3, r0, #0
 8004052:	d001      	beq.n	8004058 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004054:	f000 f9b8 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	200002c0 	.word	0x200002c0
 8004064:	40013000 	.word	0x40013000

08004068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b089      	sub	sp, #36	; 0x24
 800406c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406e:	240c      	movs	r4, #12
 8004070:	193b      	adds	r3, r7, r4
 8004072:	0018      	movs	r0, r3
 8004074:	2314      	movs	r3, #20
 8004076:	001a      	movs	r2, r3
 8004078:	2100      	movs	r1, #0
 800407a:	f007 f8f7 	bl	800b26c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800407e:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <MX_GPIO_Init+0x10c>)
 8004080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004082:	4b3c      	ldr	r3, [pc, #240]	; (8004174 <MX_GPIO_Init+0x10c>)
 8004084:	2104      	movs	r1, #4
 8004086:	430a      	orrs	r2, r1
 8004088:	62da      	str	r2, [r3, #44]	; 0x2c
 800408a:	4b3a      	ldr	r3, [pc, #232]	; (8004174 <MX_GPIO_Init+0x10c>)
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	2204      	movs	r2, #4
 8004090:	4013      	ands	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004096:	4b37      	ldr	r3, [pc, #220]	; (8004174 <MX_GPIO_Init+0x10c>)
 8004098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409a:	4b36      	ldr	r3, [pc, #216]	; (8004174 <MX_GPIO_Init+0x10c>)
 800409c:	2101      	movs	r1, #1
 800409e:	430a      	orrs	r2, r1
 80040a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80040a2:	4b34      	ldr	r3, [pc, #208]	; (8004174 <MX_GPIO_Init+0x10c>)
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	2201      	movs	r2, #1
 80040a8:	4013      	ands	r3, r2
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <MX_GPIO_Init+0x10c>)
 80040b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b2:	4b30      	ldr	r3, [pc, #192]	; (8004174 <MX_GPIO_Init+0x10c>)
 80040b4:	2102      	movs	r1, #2
 80040b6:	430a      	orrs	r2, r1
 80040b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80040ba:	4b2e      	ldr	r3, [pc, #184]	; (8004174 <MX_GPIO_Init+0x10c>)
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	2202      	movs	r2, #2
 80040c0:	4013      	ands	r3, r2
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CardDetect_Output_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 80040c6:	23a0      	movs	r3, #160	; 0xa0
 80040c8:	05db      	lsls	r3, r3, #23
 80040ca:	2200      	movs	r2, #0
 80040cc:	2112      	movs	r1, #18
 80040ce:	0018      	movs	r0, r3
 80040d0:	f001 f84f 	bl	8005172 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80040d4:	4928      	ldr	r1, [pc, #160]	; (8004178 <MX_GPIO_Init+0x110>)
 80040d6:	4b29      	ldr	r3, [pc, #164]	; (800417c <MX_GPIO_Init+0x114>)
 80040d8:	2200      	movs	r2, #0
 80040da:	0018      	movs	r0, r3
 80040dc:	f001 f849 	bl	8005172 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |Load_Switch_CMOS_Pin|Load_Switch_18650_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Minus_Pin Plus_Pin */
  GPIO_InitStruct.Pin = Minus_Pin|Plus_Pin;
 80040e0:	193b      	adds	r3, r7, r4
 80040e2:	2203      	movs	r2, #3
 80040e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040e6:	193b      	adds	r3, r7, r4
 80040e8:	2200      	movs	r2, #0
 80040ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	193b      	adds	r3, r7, r4
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f2:	193b      	adds	r3, r7, r4
 80040f4:	4a22      	ldr	r2, [pc, #136]	; (8004180 <MX_GPIO_Init+0x118>)
 80040f6:	0019      	movs	r1, r3
 80040f8:	0010      	movs	r0, r2
 80040fa:	f000 fe9f 	bl	8004e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Input_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Input_Pin;
 80040fe:	193b      	adds	r3, r7, r4
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004104:	193b      	adds	r3, r7, r4
 8004106:	2200      	movs	r2, #0
 8004108:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410a:	193b      	adds	r3, r7, r4
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_CardDetect_Input_GPIO_Port, &GPIO_InitStruct);
 8004110:	193a      	adds	r2, r7, r4
 8004112:	23a0      	movs	r3, #160	; 0xa0
 8004114:	05db      	lsls	r3, r3, #23
 8004116:	0011      	movs	r1, r2
 8004118:	0018      	movs	r0, r3
 800411a:	f000 fe8f 	bl	8004e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CardDetect_Output_Pin PA4 */
  GPIO_InitStruct.Pin = SD_CardDetect_Output_Pin|GPIO_PIN_4;
 800411e:	193b      	adds	r3, r7, r4
 8004120:	2212      	movs	r2, #18
 8004122:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004124:	193b      	adds	r3, r7, r4
 8004126:	2201      	movs	r2, #1
 8004128:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412a:	193b      	adds	r3, r7, r4
 800412c:	2200      	movs	r2, #0
 800412e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004130:	193b      	adds	r3, r7, r4
 8004132:	2200      	movs	r2, #0
 8004134:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004136:	193a      	adds	r2, r7, r4
 8004138:	23a0      	movs	r3, #160	; 0xa0
 800413a:	05db      	lsls	r3, r3, #23
 800413c:	0011      	movs	r1, r2
 800413e:	0018      	movs	r0, r3
 8004140:	f000 fe7c 	bl	8004e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 PB3 PB4
                           Load_Switch_CMOS_Pin Load_Switch_18650_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8004144:	0021      	movs	r1, r4
 8004146:	187b      	adds	r3, r7, r1
 8004148:	4a0b      	ldr	r2, [pc, #44]	; (8004178 <MX_GPIO_Init+0x110>)
 800414a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |Load_Switch_CMOS_Pin|Load_Switch_18650_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800414c:	187b      	adds	r3, r7, r1
 800414e:	2201      	movs	r2, #1
 8004150:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	187b      	adds	r3, r7, r1
 8004154:	2200      	movs	r2, #0
 8004156:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004158:	187b      	adds	r3, r7, r1
 800415a:	2200      	movs	r2, #0
 800415c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800415e:	187b      	adds	r3, r7, r1
 8004160:	4a06      	ldr	r2, [pc, #24]	; (800417c <MX_GPIO_Init+0x114>)
 8004162:	0019      	movs	r1, r3
 8004164:	0010      	movs	r0, r2
 8004166:	f000 fe69 	bl	8004e3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b009      	add	sp, #36	; 0x24
 8004170:	bd90      	pop	{r4, r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	40021000 	.word	0x40021000
 8004178:	0000f31e 	.word	0x0000f31e
 800417c:	50000400 	.word	0x50000400
 8004180:	50000800 	.word	0x50000800

08004184 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  //HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
 800418c:	687b      	ldr	r3, [r7, #4]
}
 800418e:	0018      	movs	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	b002      	add	sp, #8
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <process_SD_card>:

void process_SD_card( void )
{
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	4c53      	ldr	r4, [pc, #332]	; (80042e8 <process_SD_card+0x150>)
 800419c:	44a5      	add	sp, r4
 800419e:	af00      	add	r7, sp, #0
  char res_SwitchState[7];

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 80041a0:	4e52      	ldr	r6, [pc, #328]	; (80042ec <process_SD_card+0x154>)
 80041a2:	19bc      	adds	r4, r7, r6
 80041a4:	4952      	ldr	r1, [pc, #328]	; (80042f0 <process_SD_card+0x158>)
 80041a6:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <process_SD_card+0x15c>)
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	2201      	movs	r2, #1
 80041ac:	0018      	movs	r0, r3
 80041ae:	f005 f853 	bl	8009258 <f_mount>
 80041b2:	0003      	movs	r3, r0
 80041b4:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK)
 80041b6:	19bb      	adds	r3, r7, r6
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d000      	beq.n	80041c0 <process_SD_card+0x28>
 80041be:	e085      	b.n	80042cc <process_SD_card+0x134>
    {
      //printf("No SD Card found : (%i)\r\n", fres);
      break;
    }
    //Open the file
    fres = f_open(&fil, "TestingReadings.csv", FA_WRITE | FA_READ | FA_OPEN_APPEND);
 80041c0:	19bc      	adds	r4, r7, r6
 80041c2:	494d      	ldr	r1, [pc, #308]	; (80042f8 <process_SD_card+0x160>)
 80041c4:	2554      	movs	r5, #84	; 0x54
 80041c6:	197b      	adds	r3, r7, r5
 80041c8:	2233      	movs	r2, #51	; 0x33
 80041ca:	0018      	movs	r0, r3
 80041cc:	f005 f890 	bl	80092f0 <f_open>
 80041d0:	0003      	movs	r3, r0
 80041d2:	7023      	strb	r3, [r4, #0]
    if(fres != FR_OK)
 80041d4:	19bb      	adds	r3, r7, r6
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d179      	bne.n	80042d0 <process_SD_card+0x138>
    }
    //printf("Writing data!!!\r\n");
    //write the data

    //Write the Time for each write
    sprintf(res_time,"%.3f,", valueToAdjust); //Position A //seconds since start, changed for testing
 80041dc:	4b47      	ldr	r3, [pc, #284]	; (80042fc <process_SD_card+0x164>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	1c18      	adds	r0, r3, #0
 80041e2:	f7fe fe27 	bl	8002e34 <__aeabi_f2d>
 80041e6:	0002      	movs	r2, r0
 80041e8:	000b      	movs	r3, r1
 80041ea:	4945      	ldr	r1, [pc, #276]	; (8004300 <process_SD_card+0x168>)
 80041ec:	260c      	movs	r6, #12
 80041ee:	19b8      	adds	r0, r7, r6
 80041f0:	f006 ffd0 	bl	800b194 <siprintf>
    f_puts(res_time, &fil);
 80041f4:	002c      	movs	r4, r5
 80041f6:	193a      	adds	r2, r7, r4
 80041f8:	19bb      	adds	r3, r7, r6
 80041fa:	0011      	movs	r1, r2
 80041fc:	0018      	movs	r0, r3
 80041fe:	f005 fef3 	bl	8009fe8 <f_puts>

    //Write the 18650 Voltage Readings
    sprintf(res_18650, "%.3f,", Continuous_Average); //Position B
 8004202:	4b40      	ldr	r3, [pc, #256]	; (8004304 <process_SD_card+0x16c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	1c18      	adds	r0, r3, #0
 8004208:	f7fe fe14 	bl	8002e34 <__aeabi_f2d>
 800420c:	0002      	movs	r2, r0
 800420e:	000b      	movs	r3, r1
 8004210:	493b      	ldr	r1, [pc, #236]	; (8004300 <process_SD_card+0x168>)
 8004212:	2548      	movs	r5, #72	; 0x48
 8004214:	1978      	adds	r0, r7, r5
 8004216:	f006 ffbd 	bl	800b194 <siprintf>
    f_puts(res_18650, &fil);
 800421a:	193a      	adds	r2, r7, r4
 800421c:	197b      	adds	r3, r7, r5
 800421e:	0011      	movs	r1, r2
 8004220:	0018      	movs	r0, r3
 8004222:	f005 fee1 	bl	8009fe8 <f_puts>

    //Write the 18650 Current Readings
    sprintf(res_C18650, "%.3f,", C_18650); //Position C
 8004226:	4b38      	ldr	r3, [pc, #224]	; (8004308 <process_SD_card+0x170>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1c18      	adds	r0, r3, #0
 800422c:	f7fe fe02 	bl	8002e34 <__aeabi_f2d>
 8004230:	0002      	movs	r2, r0
 8004232:	000b      	movs	r3, r1
 8004234:	4932      	ldr	r1, [pc, #200]	; (8004300 <process_SD_card+0x168>)
 8004236:	2540      	movs	r5, #64	; 0x40
 8004238:	1978      	adds	r0, r7, r5
 800423a:	f006 ffab 	bl	800b194 <siprintf>
    f_puts(res_C18650, &fil);
 800423e:	193a      	adds	r2, r7, r4
 8004240:	197b      	adds	r3, r7, r5
 8004242:	0011      	movs	r1, r2
 8004244:	0018      	movs	r0, r3
 8004246:	f005 fecf 	bl	8009fe8 <f_puts>

    //Write the CMOS Voltage Readings
    sprintf(res_CMOS, "%.3f,", V_CMOS); //Position D
 800424a:	4b30      	ldr	r3, [pc, #192]	; (800430c <process_SD_card+0x174>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	1c18      	adds	r0, r3, #0
 8004250:	f7fe fdf0 	bl	8002e34 <__aeabi_f2d>
 8004254:	0002      	movs	r2, r0
 8004256:	000b      	movs	r3, r1
 8004258:	4929      	ldr	r1, [pc, #164]	; (8004300 <process_SD_card+0x168>)
 800425a:	252c      	movs	r5, #44	; 0x2c
 800425c:	1978      	adds	r0, r7, r5
 800425e:	f006 ff99 	bl	800b194 <siprintf>
    f_puts(res_CMOS,&fil);
 8004262:	193a      	adds	r2, r7, r4
 8004264:	197b      	adds	r3, r7, r5
 8004266:	0011      	movs	r1, r2
 8004268:	0018      	movs	r0, r3
 800426a:	f005 febd 	bl	8009fe8 <f_puts>

    //Write the CMOS Current Readings
    sprintf(res_CCMOS, "%.3f,", C_CMOS); //Position E
 800426e:	4b28      	ldr	r3, [pc, #160]	; (8004310 <process_SD_card+0x178>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	1c18      	adds	r0, r3, #0
 8004274:	f7fe fdde 	bl	8002e34 <__aeabi_f2d>
 8004278:	0002      	movs	r2, r0
 800427a:	000b      	movs	r3, r1
 800427c:	4920      	ldr	r1, [pc, #128]	; (8004300 <process_SD_card+0x168>)
 800427e:	2534      	movs	r5, #52	; 0x34
 8004280:	1978      	adds	r0, r7, r5
 8004282:	f006 ff87 	bl	800b194 <siprintf>
    f_puts(res_CCMOS, &fil);
 8004286:	193a      	adds	r2, r7, r4
 8004288:	197b      	adds	r3, r7, r5
 800428a:	0011      	movs	r1, r2
 800428c:	0018      	movs	r0, r3
 800428e:	f005 feab 	bl	8009fe8 <f_puts>

    //Writes the Switch State, 0 = State_CMOS / 1 = State_18650
    sprintf(res_SwitchState,"%u, \n", Switch_State); //Position F
 8004292:	4b20      	ldr	r3, [pc, #128]	; (8004314 <process_SD_card+0x17c>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4920      	ldr	r1, [pc, #128]	; (8004318 <process_SD_card+0x180>)
 8004298:	1d3b      	adds	r3, r7, #4
 800429a:	0018      	movs	r0, r3
 800429c:	f006 ff7a 	bl	800b194 <siprintf>
    f_puts(res_SwitchState, &fil);
 80042a0:	193a      	adds	r2, r7, r4
 80042a2:	1d3b      	adds	r3, r7, #4
 80042a4:	0011      	movs	r1, r2
 80042a6:	0018      	movs	r0, r3
 80042a8:	f005 fe9e 	bl	8009fe8 <f_puts>

    //close your file
    f_close(&fil);
 80042ac:	193b      	adds	r3, r7, r4
 80042ae:	0018      	movs	r0, r3
 80042b0:	f005 fdaa 	bl	8009e08 <f_close>
    //Open the file
    //read the data
    f_gets(buf, sizeof(buf), &fil);
 80042b4:	193a      	adds	r2, r7, r4
 80042b6:	2350      	movs	r3, #80	; 0x50
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	2101      	movs	r1, #1
 80042bc:	0018      	movs	r0, r3
 80042be:	f005 fdd7 	bl	8009e70 <f_gets>
    //printf("Read Data : %s\n", buf);
    //close your file
    f_close(&fil);
 80042c2:	193b      	adds	r3, r7, r4
 80042c4:	0018      	movs	r0, r3
 80042c6:	f005 fd9f 	bl	8009e08 <f_close>
 80042ca:	e002      	b.n	80042d2 <process_SD_card+0x13a>
      break;
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	e000      	b.n	80042d2 <process_SD_card+0x13a>
      break;
 80042d0:	46c0      	nop			; (mov r8, r8)
      //printf("Cannot able to delete the file\n");
    }
#endif
  } while(0);
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <process_SD_card+0x158>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	0019      	movs	r1, r3
 80042d8:	2000      	movs	r0, #0
 80042da:	f004 ffbd 	bl	8009258 <f_mount>
}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	46bd      	mov	sp, r7
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <process_SD_card+0x184>)
 80042e4:	449d      	add	sp, r3
 80042e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042e8:	ffffdf3c 	.word	0xffffdf3c
 80042ec:	000020bf 	.word	0x000020bf
 80042f0:	0800ec40 	.word	0x0800ec40
 80042f4:	00001084 	.word	0x00001084
 80042f8:	0800ec44 	.word	0x0800ec44
 80042fc:	20000340 	.word	0x20000340
 8004300:	0800ec58 	.word	0x0800ec58
 8004304:	20000324 	.word	0x20000324
 8004308:	20000320 	.word	0x20000320
 800430c:	20000318 	.word	0x20000318
 8004310:	2000031c 	.word	0x2000031c
 8004314:	2000032c 	.word	0x2000032c
 8004318:	0800ec60 	.word	0x0800ec60
 800431c:	000020c4 	.word	0x000020c4

08004320 <Continuous_Same_State_Average>:
Error_Handler();
}

}

void Continuous_Same_State_Average() {
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b08f      	sub	sp, #60	; 0x3c
 8004324:	af00      	add	r7, sp, #0
float test_voltages[] = {1.4, 1.41, 1.42, 1.43, 1.44, 1.45, 1.46, 1.47, 1.48, 1.49, 1.5};
 8004326:	003b      	movs	r3, r7
 8004328:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <Continuous_Same_State_Average+0x78>)
 800432a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800432c:	c313      	stmia	r3!, {r0, r1, r4}
 800432e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004330:	c313      	stmia	r3!, {r0, r1, r4}
 8004332:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004334:	c313      	stmia	r3!, {r0, r1, r4}
 8004336:	ca03      	ldmia	r2!, {r0, r1}
 8004338:	c303      	stmia	r3!, {r0, r1}
float voltage_sum = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
int x = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	633b      	str	r3, [r7, #48]	; 0x30

int array_length = sizeof(test_voltages) / sizeof(test_voltages[0]);
 8004342:	230b      	movs	r3, #11
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
for (i = 0; i < array_length; i++) {
 8004346:	4b15      	ldr	r3, [pc, #84]	; (800439c <Continuous_Same_State_Average+0x7c>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e012      	b.n	8004374 <Continuous_Same_State_Average+0x54>
    voltage_sum += test_voltages[i];
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <Continuous_Same_State_Average+0x7c>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	003b      	movs	r3, r7
 8004354:	0092      	lsls	r2, r2, #2
 8004356:	58d3      	ldr	r3, [r2, r3]
 8004358:	1c19      	adds	r1, r3, #0
 800435a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800435c:	f7fc fa2e 	bl	80007bc <__aeabi_fadd>
 8004360:	1c03      	adds	r3, r0, #0
 8004362:	637b      	str	r3, [r7, #52]	; 0x34
    x++;
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	3301      	adds	r3, #1
 8004368:	633b      	str	r3, [r7, #48]	; 0x30
for (i = 0; i < array_length; i++) {
 800436a:	4b0c      	ldr	r3, [pc, #48]	; (800439c <Continuous_Same_State_Average+0x7c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <Continuous_Same_State_Average+0x7c>)
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <Continuous_Same_State_Average+0x7c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800437a:	429a      	cmp	r2, r3
 800437c:	dce7      	bgt.n	800434e <Continuous_Same_State_Average+0x2e>
}

Continuous_Average = Calculate_Continuous_Average(voltage_sum, x);
 800437e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004382:	0011      	movs	r1, r2
 8004384:	1c18      	adds	r0, r3, #0
 8004386:	f000 f80d 	bl	80043a4 <Calculate_Continuous_Average>
 800438a:	1c02      	adds	r2, r0, #0
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <Continuous_Same_State_Average+0x80>)
 800438e:	601a      	str	r2, [r3, #0]
}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b00f      	add	sp, #60	; 0x3c
 8004396:	bd90      	pop	{r4, r7, pc}
 8004398:	0800ec68 	.word	0x0800ec68
 800439c:	20000328 	.word	0x20000328
 80043a0:	20000324 	.word	0x20000324

080043a4 <Calculate_Continuous_Average>:

float Calculate_Continuous_Average(float sum_voltages, int number_of_voltages){
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
	return sum_voltages/number_of_voltages;
 80043ae:	6838      	ldr	r0, [r7, #0]
 80043b0:	f7fc fe5e 	bl	8001070 <__aeabi_i2f>
 80043b4:	1c03      	adds	r3, r0, #0
 80043b6:	1c19      	adds	r1, r3, #0
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7fc fb9f 	bl	8000afc <__aeabi_fdiv>
 80043be:	1c03      	adds	r3, r0, #0
}
 80043c0:	1c18      	adds	r0, r3, #0
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b002      	add	sp, #8
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043cc:	b672      	cpsid	i
}
 80043ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043d0:	e7fe      	b.n	80043d0 <Error_Handler+0x8>
	...

080043d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d8:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <HAL_MspInit+0x24>)
 80043da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_MspInit+0x24>)
 80043de:	2101      	movs	r1, #1
 80043e0:	430a      	orrs	r2, r1
 80043e2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <HAL_MspInit+0x24>)
 80043e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <HAL_MspInit+0x24>)
 80043ea:	2180      	movs	r1, #128	; 0x80
 80043ec:	0549      	lsls	r1, r1, #21
 80043ee:	430a      	orrs	r2, r1
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000

080043fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80043fc:	b590      	push	{r4, r7, lr}
 80043fe:	b089      	sub	sp, #36	; 0x24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004404:	240c      	movs	r4, #12
 8004406:	193b      	adds	r3, r7, r4
 8004408:	0018      	movs	r0, r3
 800440a:	2314      	movs	r3, #20
 800440c:	001a      	movs	r2, r3
 800440e:	2100      	movs	r1, #0
 8004410:	f006 ff2c 	bl	800b26c <memset>
  if(hadc->Instance==ADC1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a14      	ldr	r2, [pc, #80]	; (800446c <HAL_ADC_MspInit+0x70>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d121      	bne.n	8004462 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <HAL_ADC_MspInit+0x74>)
 8004420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004422:	4b13      	ldr	r3, [pc, #76]	; (8004470 <HAL_ADC_MspInit+0x74>)
 8004424:	2180      	movs	r1, #128	; 0x80
 8004426:	0089      	lsls	r1, r1, #2
 8004428:	430a      	orrs	r2, r1
 800442a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800442c:	4b10      	ldr	r3, [pc, #64]	; (8004470 <HAL_ADC_MspInit+0x74>)
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <HAL_ADC_MspInit+0x74>)
 8004432:	2104      	movs	r1, #4
 8004434:	430a      	orrs	r2, r1
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c
 8004438:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <HAL_ADC_MspInit+0x74>)
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	2204      	movs	r2, #4
 800443e:	4013      	ands	r3, r2
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = Current_ADC_CMOS_Pin|Voltage_ADC_CMOS_Pin|Current_ADC_18650_Pin|Voltage_ADC_18650_Pin;
 8004444:	193b      	adds	r3, r7, r4
 8004446:	223c      	movs	r2, #60	; 0x3c
 8004448:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800444a:	193b      	adds	r3, r7, r4
 800444c:	2203      	movs	r2, #3
 800444e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004450:	193b      	adds	r3, r7, r4
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004456:	193b      	adds	r3, r7, r4
 8004458:	4a06      	ldr	r2, [pc, #24]	; (8004474 <HAL_ADC_MspInit+0x78>)
 800445a:	0019      	movs	r1, r3
 800445c:	0010      	movs	r0, r2
 800445e:	f000 fced 	bl	8004e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	46bd      	mov	sp, r7
 8004466:	b009      	add	sp, #36	; 0x24
 8004468:	bd90      	pop	{r4, r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	40012400 	.word	0x40012400
 8004470:	40021000 	.word	0x40021000
 8004474:	50000800 	.word	0x50000800

08004478 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b089      	sub	sp, #36	; 0x24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004480:	240c      	movs	r4, #12
 8004482:	193b      	adds	r3, r7, r4
 8004484:	0018      	movs	r0, r3
 8004486:	2314      	movs	r3, #20
 8004488:	001a      	movs	r2, r3
 800448a:	2100      	movs	r1, #0
 800448c:	f006 feee 	bl	800b26c <memset>
  if(hi2c->Instance==I2C1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <HAL_I2C_MspInit+0x80>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d12a      	bne.n	80044f0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800449a:	4b18      	ldr	r3, [pc, #96]	; (80044fc <HAL_I2C_MspInit+0x84>)
 800449c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449e:	4b17      	ldr	r3, [pc, #92]	; (80044fc <HAL_I2C_MspInit+0x84>)
 80044a0:	2101      	movs	r1, #1
 80044a2:	430a      	orrs	r2, r1
 80044a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <HAL_I2C_MspInit+0x84>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	2201      	movs	r2, #1
 80044ac:	4013      	ands	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044b2:	193b      	adds	r3, r7, r4
 80044b4:	22c0      	movs	r2, #192	; 0xc0
 80044b6:	00d2      	lsls	r2, r2, #3
 80044b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044ba:	0021      	movs	r1, r4
 80044bc:	187b      	adds	r3, r7, r1
 80044be:	2212      	movs	r2, #18
 80044c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	187b      	adds	r3, r7, r1
 80044c4:	2200      	movs	r2, #0
 80044c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c8:	187b      	adds	r3, r7, r1
 80044ca:	2203      	movs	r2, #3
 80044cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80044ce:	187b      	adds	r3, r7, r1
 80044d0:	2206      	movs	r2, #6
 80044d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d4:	187a      	adds	r2, r7, r1
 80044d6:	23a0      	movs	r3, #160	; 0xa0
 80044d8:	05db      	lsls	r3, r3, #23
 80044da:	0011      	movs	r1, r2
 80044dc:	0018      	movs	r0, r3
 80044de:	f000 fcad 	bl	8004e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044e2:	4b06      	ldr	r3, [pc, #24]	; (80044fc <HAL_I2C_MspInit+0x84>)
 80044e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_I2C_MspInit+0x84>)
 80044e8:	2180      	movs	r1, #128	; 0x80
 80044ea:	0389      	lsls	r1, r1, #14
 80044ec:	430a      	orrs	r2, r1
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80044f0:	46c0      	nop			; (mov r8, r8)
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b009      	add	sp, #36	; 0x24
 80044f6:	bd90      	pop	{r4, r7, pc}
 80044f8:	40005400 	.word	0x40005400
 80044fc:	40021000 	.word	0x40021000

08004500 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004500:	b590      	push	{r4, r7, lr}
 8004502:	b089      	sub	sp, #36	; 0x24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004508:	240c      	movs	r4, #12
 800450a:	193b      	adds	r3, r7, r4
 800450c:	0018      	movs	r0, r3
 800450e:	2314      	movs	r3, #20
 8004510:	001a      	movs	r2, r3
 8004512:	2100      	movs	r1, #0
 8004514:	f006 feaa 	bl	800b26c <memset>
  if(hspi->Instance==SPI1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a18      	ldr	r2, [pc, #96]	; (8004580 <HAL_SPI_MspInit+0x80>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d129      	bne.n	8004576 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004522:	4b18      	ldr	r3, [pc, #96]	; (8004584 <HAL_SPI_MspInit+0x84>)
 8004524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <HAL_SPI_MspInit+0x84>)
 8004528:	2180      	movs	r1, #128	; 0x80
 800452a:	0149      	lsls	r1, r1, #5
 800452c:	430a      	orrs	r2, r1
 800452e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004530:	4b14      	ldr	r3, [pc, #80]	; (8004584 <HAL_SPI_MspInit+0x84>)
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_SPI_MspInit+0x84>)
 8004536:	2101      	movs	r1, #1
 8004538:	430a      	orrs	r2, r1
 800453a:	62da      	str	r2, [r3, #44]	; 0x2c
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <HAL_SPI_MspInit+0x84>)
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	2201      	movs	r2, #1
 8004542:	4013      	ands	r3, r2
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004548:	0021      	movs	r1, r4
 800454a:	187b      	adds	r3, r7, r1
 800454c:	22e0      	movs	r2, #224	; 0xe0
 800454e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004550:	187b      	adds	r3, r7, r1
 8004552:	2202      	movs	r2, #2
 8004554:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004556:	187b      	adds	r3, r7, r1
 8004558:	2200      	movs	r2, #0
 800455a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800455c:	187b      	adds	r3, r7, r1
 800455e:	2203      	movs	r2, #3
 8004560:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004562:	187b      	adds	r3, r7, r1
 8004564:	2200      	movs	r2, #0
 8004566:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004568:	187a      	adds	r2, r7, r1
 800456a:	23a0      	movs	r3, #160	; 0xa0
 800456c:	05db      	lsls	r3, r3, #23
 800456e:	0011      	movs	r1, r2
 8004570:	0018      	movs	r0, r3
 8004572:	f000 fc63 	bl	8004e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	46bd      	mov	sp, r7
 800457a:	b009      	add	sp, #36	; 0x24
 800457c:	bd90      	pop	{r4, r7, pc}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	40013000 	.word	0x40013000
 8004584:	40021000 	.word	0x40021000

08004588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800458c:	e7fe      	b.n	800458c <NMI_Handler+0x4>

0800458e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004592:	e7fe      	b.n	8004592 <HardFault_Handler+0x4>

08004594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	if(Timer1 > 0)
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <PendSV_Handler+0x34>)
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <PendSV_Handler+0x18>
	  Timer1--;
 80045ac:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <PendSV_Handler+0x34>)
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <PendSV_Handler+0x34>)
 80045b6:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80045b8:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <PendSV_Handler+0x38>)
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <PendSV_Handler+0x2c>
	  Timer2--;
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <PendSV_Handler+0x38>)
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <PendSV_Handler+0x38>)
 80045ca:	801a      	strh	r2, [r3, #0]
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	20000208 	.word	0x20000208
 80045d8:	2000020a 	.word	0x2000020a

080045dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045e0:	f000 f95c 	bl	800489c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045e4:	46c0      	nop			; (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	af00      	add	r7, sp, #0
  return 1;
 80045ee:	2301      	movs	r3, #1
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <_kill>:

int _kill(int pid, int sig)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004600:	f006 fe8e 	bl	800b320 <__errno>
 8004604:	0003      	movs	r3, r0
 8004606:	2216      	movs	r2, #22
 8004608:	601a      	str	r2, [r3, #0]
  return -1;
 800460a:	2301      	movs	r3, #1
 800460c:	425b      	negs	r3, r3
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}

08004616 <_exit>:

void _exit (int status)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800461e:	2301      	movs	r3, #1
 8004620:	425a      	negs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	0011      	movs	r1, r2
 8004626:	0018      	movs	r0, r3
 8004628:	f7ff ffe5 	bl	80045f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 800462c:	e7fe      	b.n	800462c <_exit+0x16>

0800462e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e00a      	b.n	8004656 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004640:	e000      	b.n	8004644 <_read+0x16>
 8004642:	bf00      	nop
 8004644:	0001      	movs	r1, r0
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	60ba      	str	r2, [r7, #8]
 800464c:	b2ca      	uxtb	r2, r1
 800464e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	3301      	adds	r3, #1
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	429a      	cmp	r2, r3
 800465c:	dbf0      	blt.n	8004640 <_read+0x12>
  }

  return len;
 800465e:	687b      	ldr	r3, [r7, #4]
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b006      	add	sp, #24
 8004666:	bd80      	pop	{r7, pc}

08004668 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	e009      	b.n	800468e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	60ba      	str	r2, [r7, #8]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	0018      	movs	r0, r3
 8004684:	f7ff fd7e 	bl	8004184 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	3301      	adds	r3, #1
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	429a      	cmp	r2, r3
 8004694:	dbf1      	blt.n	800467a <_write+0x12>
  }
  return len;
 8004696:	687b      	ldr	r3, [r7, #4]
}
 8004698:	0018      	movs	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	b006      	add	sp, #24
 800469e:	bd80      	pop	{r7, pc}

080046a0 <_close>:

int _close(int file)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046a8:	2301      	movs	r3, #1
 80046aa:	425b      	negs	r3, r3
}
 80046ac:	0018      	movs	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b002      	add	sp, #8
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2280      	movs	r2, #128	; 0x80
 80046c2:	0192      	lsls	r2, r2, #6
 80046c4:	605a      	str	r2, [r3, #4]
  return 0;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b002      	add	sp, #8
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <_isatty>:

int _isatty(int file)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046d8:	2301      	movs	r3, #1
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b002      	add	sp, #8
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	0018      	movs	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b004      	add	sp, #16
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004700:	4a14      	ldr	r2, [pc, #80]	; (8004754 <_sbrk+0x5c>)
 8004702:	4b15      	ldr	r3, [pc, #84]	; (8004758 <_sbrk+0x60>)
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800470c:	4b13      	ldr	r3, [pc, #76]	; (800475c <_sbrk+0x64>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004714:	4b11      	ldr	r3, [pc, #68]	; (800475c <_sbrk+0x64>)
 8004716:	4a12      	ldr	r2, [pc, #72]	; (8004760 <_sbrk+0x68>)
 8004718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <_sbrk+0x64>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	18d3      	adds	r3, r2, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	429a      	cmp	r2, r3
 8004726:	d207      	bcs.n	8004738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004728:	f006 fdfa 	bl	800b320 <__errno>
 800472c:	0003      	movs	r3, r0
 800472e:	220c      	movs	r2, #12
 8004730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004732:	2301      	movs	r3, #1
 8004734:	425b      	negs	r3, r3
 8004736:	e009      	b.n	800474c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004738:	4b08      	ldr	r3, [pc, #32]	; (800475c <_sbrk+0x64>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800473e:	4b07      	ldr	r3, [pc, #28]	; (800475c <_sbrk+0x64>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	18d2      	adds	r2, r2, r3
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <_sbrk+0x64>)
 8004748:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800474a:	68fb      	ldr	r3, [r7, #12]
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b006      	add	sp, #24
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20005000 	.word	0x20005000
 8004758:	00000400 	.word	0x00000400
 800475c:	20000348 	.word	0x20000348
 8004760:	200006d8 	.word	0x200006d8

08004764 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004768:	46c0      	nop			; (mov r8, r8)
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004770:	4813      	ldr	r0, [pc, #76]	; (80047c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004772:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004774:	f7ff fff6 	bl	8004764 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8004778:	4812      	ldr	r0, [pc, #72]	; (80047c4 <LoopForever+0x6>)
    LDR R1, [R0]
 800477a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800477c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800477e:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <LoopForever+0xa>)
    CMP R1, R2
 8004780:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8004782:	d105      	bne.n	8004790 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8004784:	4811      	ldr	r0, [pc, #68]	; (80047cc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8004786:	4912      	ldr	r1, [pc, #72]	; (80047d0 <LoopForever+0x12>)
    STR R1, [R0]
 8004788:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800478a:	4812      	ldr	r0, [pc, #72]	; (80047d4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800478c:	4912      	ldr	r1, [pc, #72]	; (80047d8 <LoopForever+0x1a>)
    STR R1, [R0]
 800478e:	6001      	str	r1, [r0, #0]

08004790 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004790:	4812      	ldr	r0, [pc, #72]	; (80047dc <LoopForever+0x1e>)
  ldr r1, =_edata
 8004792:	4913      	ldr	r1, [pc, #76]	; (80047e0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8004794:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <LoopForever+0x26>)
  movs r3, #0
 8004796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004798:	e002      	b.n	80047a0 <LoopCopyDataInit>

0800479a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800479a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800479c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800479e:	3304      	adds	r3, #4

080047a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047a4:	d3f9      	bcc.n	800479a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047a6:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80047a8:	4c10      	ldr	r4, [pc, #64]	; (80047ec <LoopForever+0x2e>)
  movs r3, #0
 80047aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047ac:	e001      	b.n	80047b2 <LoopFillZerobss>

080047ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047b0:	3204      	adds	r2, #4

080047b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047b4:	d3fb      	bcc.n	80047ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047b6:	f006 fdb9 	bl	800b32c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047ba:	f7ff f96d 	bl	8003a98 <main>

080047be <LoopForever>:

LoopForever:
    b LoopForever
 80047be:	e7fe      	b.n	80047be <LoopForever>
   ldr   r0, =_estack
 80047c0:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 80047c4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80047c8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80047cc:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80047d0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80047d4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80047d8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80047dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047e0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80047e4:	0800f690 	.word	0x0800f690
  ldr r2, =_sbss
 80047e8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80047ec:	200006d8 	.word	0x200006d8

080047f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047f0:	e7fe      	b.n	80047f0 <ADC1_IRQHandler>
	...

080047f4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047fa:	1dfb      	adds	r3, r7, #7
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_Init+0x3c>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_Init+0x3c>)
 8004806:	2140      	movs	r1, #64	; 0x40
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800480c:	2003      	movs	r0, #3
 800480e:	f000 f811 	bl	8004834 <HAL_InitTick>
 8004812:	1e03      	subs	r3, r0, #0
 8004814:	d003      	beq.n	800481e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e001      	b.n	8004822 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800481e:	f7ff fdd9 	bl	80043d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004822:	1dfb      	adds	r3, r7, #7
 8004824:	781b      	ldrb	r3, [r3, #0]
}
 8004826:	0018      	movs	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	b002      	add	sp, #8
 800482c:	bd80      	pop	{r7, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	40022000 	.word	0x40022000

08004834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800483c:	4b14      	ldr	r3, [pc, #80]	; (8004890 <HAL_InitTick+0x5c>)
 800483e:	681c      	ldr	r4, [r3, #0]
 8004840:	4b14      	ldr	r3, [pc, #80]	; (8004894 <HAL_InitTick+0x60>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	0019      	movs	r1, r3
 8004846:	23fa      	movs	r3, #250	; 0xfa
 8004848:	0098      	lsls	r0, r3, #2
 800484a:	f7fb fc79 	bl	8000140 <__udivsi3>
 800484e:	0003      	movs	r3, r0
 8004850:	0019      	movs	r1, r3
 8004852:	0020      	movs	r0, r4
 8004854:	f7fb fc74 	bl	8000140 <__udivsi3>
 8004858:	0003      	movs	r3, r0
 800485a:	0018      	movs	r0, r3
 800485c:	f000 fae1 	bl	8004e22 <HAL_SYSTICK_Config>
 8004860:	1e03      	subs	r3, r0, #0
 8004862:	d001      	beq.n	8004868 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e00f      	b.n	8004888 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b03      	cmp	r3, #3
 800486c:	d80b      	bhi.n	8004886 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	2301      	movs	r3, #1
 8004872:	425b      	negs	r3, r3
 8004874:	2200      	movs	r2, #0
 8004876:	0018      	movs	r0, r3
 8004878:	f000 fabe 	bl	8004df8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <HAL_InitTick+0x64>)
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	e000      	b.n	8004888 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	b003      	add	sp, #12
 800488e:	bd90      	pop	{r4, r7, pc}
 8004890:	20000004 	.word	0x20000004
 8004894:	2000000c 	.word	0x2000000c
 8004898:	20000008 	.word	0x20000008

0800489c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_IncTick+0x1c>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	001a      	movs	r2, r3
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <HAL_IncTick+0x20>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	18d2      	adds	r2, r2, r3
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_IncTick+0x20>)
 80048ae:	601a      	str	r2, [r3, #0]
}
 80048b0:	46c0      	nop			; (mov r8, r8)
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	2000000c 	.word	0x2000000c
 80048bc:	2000034c 	.word	0x2000034c

080048c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  return uwTick;
 80048c4:	4b02      	ldr	r3, [pc, #8]	; (80048d0 <HAL_GetTick+0x10>)
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	0018      	movs	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	2000034c 	.word	0x2000034c

080048d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048dc:	f7ff fff0 	bl	80048c0 <HAL_GetTick>
 80048e0:	0003      	movs	r3, r0
 80048e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3301      	adds	r3, #1
 80048ec:	d005      	beq.n	80048fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <HAL_Delay+0x44>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	001a      	movs	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	f7ff ffe0 	bl	80048c0 <HAL_GetTick>
 8004900:	0002      	movs	r2, r0
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	429a      	cmp	r2, r3
 800490a:	d8f7      	bhi.n	80048fc <HAL_Delay+0x28>
  {
  }
}
 800490c:	46c0      	nop			; (mov r8, r8)
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b004      	add	sp, #16
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	2000000c 	.word	0x2000000c

0800491c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e159      	b.n	8004be2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2250      	movs	r2, #80	; 0x50
 8004940:	2100      	movs	r1, #0
 8004942:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	0018      	movs	r0, r3
 8004948:	f7ff fd58 	bl	80043fc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004950:	2210      	movs	r2, #16
 8004952:	4013      	ands	r3, r2
 8004954:	2b10      	cmp	r3, #16
 8004956:	d005      	beq.n	8004964 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2204      	movs	r2, #4
 8004960:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004962:	d00b      	beq.n	800497c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	2210      	movs	r2, #16
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2250      	movs	r2, #80	; 0x50
 8004974:	2100      	movs	r1, #0
 8004976:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e132      	b.n	8004be2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004980:	4a9a      	ldr	r2, [pc, #616]	; (8004bec <HAL_ADC_Init+0x2d0>)
 8004982:	4013      	ands	r3, r2
 8004984:	2202      	movs	r2, #2
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2203      	movs	r2, #3
 8004994:	4013      	ands	r3, r2
 8004996:	2b01      	cmp	r3, #1
 8004998:	d108      	bne.n	80049ac <HAL_ADC_Init+0x90>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2201      	movs	r2, #1
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_ADC_Init+0x90>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_ADC_Init+0x92>
 80049ac:	2300      	movs	r3, #0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d149      	bne.n	8004a46 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	23c0      	movs	r3, #192	; 0xc0
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d00b      	beq.n	80049d6 <HAL_ADC_Init+0xba>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	2380      	movs	r3, #128	; 0x80
 80049c4:	05db      	lsls	r3, r3, #23
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d005      	beq.n	80049d6 <HAL_ADC_Init+0xba>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	2380      	movs	r3, #128	; 0x80
 80049d0:	061b      	lsls	r3, r3, #24
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d111      	bne.n	80049fa <HAL_ADC_Init+0xde>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	0092      	lsls	r2, r2, #2
 80049e2:	0892      	lsrs	r2, r2, #2
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6919      	ldr	r1, [r3, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	611a      	str	r2, [r3, #16]
 80049f8:	e014      	b.n	8004a24 <HAL_ADC_Init+0x108>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	0092      	lsls	r2, r2, #2
 8004a06:	0892      	lsrs	r2, r2, #2
 8004a08:	611a      	str	r2, [r3, #16]
 8004a0a:	4b79      	ldr	r3, [pc, #484]	; (8004bf0 <HAL_ADC_Init+0x2d4>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b78      	ldr	r3, [pc, #480]	; (8004bf0 <HAL_ADC_Init+0x2d4>)
 8004a10:	4978      	ldr	r1, [pc, #480]	; (8004bf4 <HAL_ADC_Init+0x2d8>)
 8004a12:	400a      	ands	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	4b76      	ldr	r3, [pc, #472]	; (8004bf0 <HAL_ADC_Init+0x2d4>)
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	4b74      	ldr	r3, [pc, #464]	; (8004bf0 <HAL_ADC_Init+0x2d4>)
 8004a20:	430a      	orrs	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2118      	movs	r1, #24
 8004a30:	438a      	bics	r2, r1
 8004a32:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68d9      	ldr	r1, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004a46:	4b6a      	ldr	r3, [pc, #424]	; (8004bf0 <HAL_ADC_Init+0x2d4>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b69      	ldr	r3, [pc, #420]	; (8004bf0 <HAL_ADC_Init+0x2d4>)
 8004a4c:	496a      	ldr	r1, [pc, #424]	; (8004bf8 <HAL_ADC_Init+0x2dc>)
 8004a4e:	400a      	ands	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8004a52:	4b67      	ldr	r3, [pc, #412]	; (8004bf0 <HAL_ADC_Init+0x2d4>)
 8004a54:	6819      	ldr	r1, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5a:	065a      	lsls	r2, r3, #25
 8004a5c:	4b64      	ldr	r3, [pc, #400]	; (8004bf0 <HAL_ADC_Init+0x2d4>)
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	055b      	lsls	r3, r3, #21
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d108      	bne.n	8004a82 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2180      	movs	r1, #128	; 0x80
 8004a7c:	0549      	lsls	r1, r1, #21
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	495b      	ldr	r1, [pc, #364]	; (8004bfc <HAL_ADC_Init+0x2e0>)
 8004a8e:	400a      	ands	r2, r1
 8004a90:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68d9      	ldr	r1, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d101      	bne.n	8004aa8 <HAL_ADC_Init+0x18c>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	e000      	b.n	8004aaa <HAL_ADC_Init+0x18e>
 8004aa8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004aaa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2020      	movs	r0, #32
 8004ab0:	5c1b      	ldrb	r3, [r3, r0]
 8004ab2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004ab4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	202c      	movs	r0, #44	; 0x2c
 8004aba:	5c1b      	ldrb	r3, [r3, r0]
 8004abc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004abe:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004ac4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004acc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004ad4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ae2:	23c2      	movs	r3, #194	; 0xc2
 8004ae4:	33ff      	adds	r3, #255	; 0xff
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d00b      	beq.n	8004b02 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68d9      	ldr	r1, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2221      	movs	r2, #33	; 0x21
 8004b06:	5c9b      	ldrb	r3, [r3, r2]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d11a      	bne.n	8004b42 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	5c9b      	ldrb	r3, [r3, r2]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2180      	movs	r1, #128	; 0x80
 8004b22:	0249      	lsls	r1, r1, #9
 8004b24:	430a      	orrs	r2, r1
 8004b26:	60da      	str	r2, [r3, #12]
 8004b28:	e00b      	b.n	8004b42 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	2220      	movs	r2, #32
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d11f      	bne.n	8004b8a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	492a      	ldr	r1, [pc, #168]	; (8004c00 <HAL_ADC_Init+0x2e4>)
 8004b56:	400a      	ands	r2, r1
 8004b58:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6919      	ldr	r1, [r3, #16]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004b68:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8004b6e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2101      	movs	r1, #1
 8004b84:	430a      	orrs	r2, r1
 8004b86:	611a      	str	r2, [r3, #16]
 8004b88:	e00e      	b.n	8004ba8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2201      	movs	r2, #1
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	438a      	bics	r2, r1
 8004ba6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2107      	movs	r1, #7
 8004bb4:	438a      	bics	r2, r1
 8004bb6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6959      	ldr	r1, [r3, #20]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	4393      	bics	r3, r2
 8004bd8:	2201      	movs	r2, #1
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	0018      	movs	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b002      	add	sp, #8
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	fffffefd 	.word	0xfffffefd
 8004bf0:	40012708 	.word	0x40012708
 8004bf4:	ffc3ffff 	.word	0xffc3ffff
 8004bf8:	fdffffff 	.word	0xfdffffff
 8004bfc:	fffe0219 	.word	0xfffe0219
 8004c00:	fffffc03 	.word	0xfffffc03

08004c04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2250      	movs	r2, #80	; 0x50
 8004c12:	5c9b      	ldrb	r3, [r3, r2]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x18>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e050      	b.n	8004cbe <HAL_ADC_ConfigChannel+0xba>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2250      	movs	r2, #80	; 0x50
 8004c20:	2101      	movs	r1, #1
 8004c22:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d00b      	beq.n	8004c48 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c34:	2220      	movs	r2, #32
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2250      	movs	r2, #80	; 0x50
 8004c40:	2100      	movs	r1, #0
 8004c42:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e03a      	b.n	8004cbe <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4a1e      	ldr	r2, [pc, #120]	; (8004cc8 <HAL_ADC_ConfigChannel+0xc4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	035b      	lsls	r3, r3, #13
 8004c5e:	0b5a      	lsrs	r2, r3, #13
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	029b      	lsls	r3, r3, #10
 8004c70:	4013      	ands	r3, r2
 8004c72:	d01f      	beq.n	8004cb4 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8004c74:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <HAL_ADC_ConfigChannel+0xc8>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <HAL_ADC_ConfigChannel+0xc8>)
 8004c7a:	2180      	movs	r1, #128	; 0x80
 8004c7c:	03c9      	lsls	r1, r1, #15
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	e017      	b.n	8004cb4 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	035b      	lsls	r3, r3, #13
 8004c90:	0b5b      	lsrs	r3, r3, #13
 8004c92:	43d9      	mvns	r1, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	400a      	ands	r2, r1
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	029b      	lsls	r3, r3, #10
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d005      	beq.n	8004cb4 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8004ca8:	4b08      	ldr	r3, [pc, #32]	; (8004ccc <HAL_ADC_ConfigChannel+0xc8>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <HAL_ADC_ConfigChannel+0xc8>)
 8004cae:	4908      	ldr	r1, [pc, #32]	; (8004cd0 <HAL_ADC_ConfigChannel+0xcc>)
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2250      	movs	r2, #80	; 0x50
 8004cb8:	2100      	movs	r1, #0
 8004cba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b002      	add	sp, #8
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	00001001 	.word	0x00001001
 8004ccc:	40012708 	.word	0x40012708
 8004cd0:	ffbfffff 	.word	0xffbfffff

08004cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	0002      	movs	r2, r0
 8004cdc:	6039      	str	r1, [r7, #0]
 8004cde:	1dfb      	adds	r3, r7, #7
 8004ce0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ce2:	1dfb      	adds	r3, r7, #7
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce8:	d828      	bhi.n	8004d3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cea:	4a2f      	ldr	r2, [pc, #188]	; (8004da8 <__NVIC_SetPriority+0xd4>)
 8004cec:	1dfb      	adds	r3, r7, #7
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	b25b      	sxtb	r3, r3
 8004cf2:	089b      	lsrs	r3, r3, #2
 8004cf4:	33c0      	adds	r3, #192	; 0xc0
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	589b      	ldr	r3, [r3, r2]
 8004cfa:	1dfa      	adds	r2, r7, #7
 8004cfc:	7812      	ldrb	r2, [r2, #0]
 8004cfe:	0011      	movs	r1, r2
 8004d00:	2203      	movs	r2, #3
 8004d02:	400a      	ands	r2, r1
 8004d04:	00d2      	lsls	r2, r2, #3
 8004d06:	21ff      	movs	r1, #255	; 0xff
 8004d08:	4091      	lsls	r1, r2
 8004d0a:	000a      	movs	r2, r1
 8004d0c:	43d2      	mvns	r2, r2
 8004d0e:	401a      	ands	r2, r3
 8004d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	019b      	lsls	r3, r3, #6
 8004d16:	22ff      	movs	r2, #255	; 0xff
 8004d18:	401a      	ands	r2, r3
 8004d1a:	1dfb      	adds	r3, r7, #7
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	0018      	movs	r0, r3
 8004d20:	2303      	movs	r3, #3
 8004d22:	4003      	ands	r3, r0
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d28:	481f      	ldr	r0, [pc, #124]	; (8004da8 <__NVIC_SetPriority+0xd4>)
 8004d2a:	1dfb      	adds	r3, r7, #7
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b25b      	sxtb	r3, r3
 8004d30:	089b      	lsrs	r3, r3, #2
 8004d32:	430a      	orrs	r2, r1
 8004d34:	33c0      	adds	r3, #192	; 0xc0
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004d3a:	e031      	b.n	8004da0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d3c:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <__NVIC_SetPriority+0xd8>)
 8004d3e:	1dfb      	adds	r3, r7, #7
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	0019      	movs	r1, r3
 8004d44:	230f      	movs	r3, #15
 8004d46:	400b      	ands	r3, r1
 8004d48:	3b08      	subs	r3, #8
 8004d4a:	089b      	lsrs	r3, r3, #2
 8004d4c:	3306      	adds	r3, #6
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	18d3      	adds	r3, r2, r3
 8004d52:	3304      	adds	r3, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	1dfa      	adds	r2, r7, #7
 8004d58:	7812      	ldrb	r2, [r2, #0]
 8004d5a:	0011      	movs	r1, r2
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	400a      	ands	r2, r1
 8004d60:	00d2      	lsls	r2, r2, #3
 8004d62:	21ff      	movs	r1, #255	; 0xff
 8004d64:	4091      	lsls	r1, r2
 8004d66:	000a      	movs	r2, r1
 8004d68:	43d2      	mvns	r2, r2
 8004d6a:	401a      	ands	r2, r3
 8004d6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	019b      	lsls	r3, r3, #6
 8004d72:	22ff      	movs	r2, #255	; 0xff
 8004d74:	401a      	ands	r2, r3
 8004d76:	1dfb      	adds	r3, r7, #7
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	4003      	ands	r3, r0
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d84:	4809      	ldr	r0, [pc, #36]	; (8004dac <__NVIC_SetPriority+0xd8>)
 8004d86:	1dfb      	adds	r3, r7, #7
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	001c      	movs	r4, r3
 8004d8c:	230f      	movs	r3, #15
 8004d8e:	4023      	ands	r3, r4
 8004d90:	3b08      	subs	r3, #8
 8004d92:	089b      	lsrs	r3, r3, #2
 8004d94:	430a      	orrs	r2, r1
 8004d96:	3306      	adds	r3, #6
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	18c3      	adds	r3, r0, r3
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	601a      	str	r2, [r3, #0]
}
 8004da0:	46c0      	nop			; (mov r8, r8)
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b003      	add	sp, #12
 8004da6:	bd90      	pop	{r4, r7, pc}
 8004da8:	e000e100 	.word	0xe000e100
 8004dac:	e000ed00 	.word	0xe000ed00

08004db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	1e5a      	subs	r2, r3, #1
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	045b      	lsls	r3, r3, #17
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d301      	bcc.n	8004dc8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e010      	b.n	8004dea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <SysTick_Config+0x44>)
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	3a01      	subs	r2, #1
 8004dce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	425b      	negs	r3, r3
 8004dd4:	2103      	movs	r1, #3
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f7ff ff7c 	bl	8004cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <SysTick_Config+0x44>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004de2:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <SysTick_Config+0x44>)
 8004de4:	2207      	movs	r2, #7
 8004de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	0018      	movs	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b002      	add	sp, #8
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	e000e010 	.word	0xe000e010

08004df8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	210f      	movs	r1, #15
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	1c02      	adds	r2, r0, #0
 8004e08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	187b      	adds	r3, r7, r1
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	b25b      	sxtb	r3, r3
 8004e12:	0011      	movs	r1, r2
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7ff ff5d 	bl	8004cd4 <__NVIC_SetPriority>
}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b004      	add	sp, #16
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f7ff ffbf 	bl	8004db0 <SysTick_Config>
 8004e32:	0003      	movs	r3, r0
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b002      	add	sp, #8
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004e52:	e155      	b.n	8005100 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2101      	movs	r1, #1
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4091      	lsls	r1, r2
 8004e5e:	000a      	movs	r2, r1
 8004e60:	4013      	ands	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d100      	bne.n	8004e6c <HAL_GPIO_Init+0x30>
 8004e6a:	e146      	b.n	80050fa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2203      	movs	r2, #3
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d005      	beq.n	8004e84 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d130      	bne.n	8004ee6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	2203      	movs	r2, #3
 8004e90:	409a      	lsls	r2, r3
 8004e92:	0013      	movs	r3, r2
 8004e94:	43da      	mvns	r2, r3
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	409a      	lsls	r2, r3
 8004ea6:	0013      	movs	r3, r2
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eba:	2201      	movs	r2, #1
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	0013      	movs	r3, r2
 8004ec2:	43da      	mvns	r2, r3
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	409a      	lsls	r2, r3
 8004ed8:	0013      	movs	r3, r2
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2203      	movs	r2, #3
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d017      	beq.n	8004f22 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	2203      	movs	r2, #3
 8004efe:	409a      	lsls	r2, r3
 8004f00:	0013      	movs	r3, r2
 8004f02:	43da      	mvns	r2, r3
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4013      	ands	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	409a      	lsls	r2, r3
 8004f14:	0013      	movs	r3, r2
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2203      	movs	r2, #3
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d123      	bne.n	8004f76 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	08da      	lsrs	r2, r3, #3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3208      	adds	r2, #8
 8004f36:	0092      	lsls	r2, r2, #2
 8004f38:	58d3      	ldr	r3, [r2, r3]
 8004f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2207      	movs	r2, #7
 8004f40:	4013      	ands	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	220f      	movs	r2, #15
 8004f46:	409a      	lsls	r2, r3
 8004f48:	0013      	movs	r3, r2
 8004f4a:	43da      	mvns	r2, r3
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2107      	movs	r1, #7
 8004f5a:	400b      	ands	r3, r1
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	409a      	lsls	r2, r3
 8004f60:	0013      	movs	r3, r2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	08da      	lsrs	r2, r3, #3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3208      	adds	r2, #8
 8004f70:	0092      	lsls	r2, r2, #2
 8004f72:	6939      	ldr	r1, [r7, #16]
 8004f74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	2203      	movs	r2, #3
 8004f82:	409a      	lsls	r2, r3
 8004f84:	0013      	movs	r3, r2
 8004f86:	43da      	mvns	r2, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2203      	movs	r2, #3
 8004f94:	401a      	ands	r2, r3
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	0013      	movs	r3, r2
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	23c0      	movs	r3, #192	; 0xc0
 8004fb0:	029b      	lsls	r3, r3, #10
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d100      	bne.n	8004fb8 <HAL_GPIO_Init+0x17c>
 8004fb6:	e0a0      	b.n	80050fa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb8:	4b57      	ldr	r3, [pc, #348]	; (8005118 <HAL_GPIO_Init+0x2dc>)
 8004fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbc:	4b56      	ldr	r3, [pc, #344]	; (8005118 <HAL_GPIO_Init+0x2dc>)
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fc4:	4a55      	ldr	r2, [pc, #340]	; (800511c <HAL_GPIO_Init+0x2e0>)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	3302      	adds	r3, #2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	589b      	ldr	r3, [r3, r2]
 8004fd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	220f      	movs	r2, #15
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	0013      	movs	r3, r2
 8004fe0:	43da      	mvns	r2, r3
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	23a0      	movs	r3, #160	; 0xa0
 8004fec:	05db      	lsls	r3, r3, #23
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d01f      	beq.n	8005032 <HAL_GPIO_Init+0x1f6>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a4a      	ldr	r2, [pc, #296]	; (8005120 <HAL_GPIO_Init+0x2e4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d019      	beq.n	800502e <HAL_GPIO_Init+0x1f2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a49      	ldr	r2, [pc, #292]	; (8005124 <HAL_GPIO_Init+0x2e8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <HAL_GPIO_Init+0x1ee>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a48      	ldr	r2, [pc, #288]	; (8005128 <HAL_GPIO_Init+0x2ec>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00d      	beq.n	8005026 <HAL_GPIO_Init+0x1ea>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a47      	ldr	r2, [pc, #284]	; (800512c <HAL_GPIO_Init+0x2f0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <HAL_GPIO_Init+0x1e6>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a46      	ldr	r2, [pc, #280]	; (8005130 <HAL_GPIO_Init+0x2f4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d101      	bne.n	800501e <HAL_GPIO_Init+0x1e2>
 800501a:	2305      	movs	r3, #5
 800501c:	e00a      	b.n	8005034 <HAL_GPIO_Init+0x1f8>
 800501e:	2306      	movs	r3, #6
 8005020:	e008      	b.n	8005034 <HAL_GPIO_Init+0x1f8>
 8005022:	2304      	movs	r3, #4
 8005024:	e006      	b.n	8005034 <HAL_GPIO_Init+0x1f8>
 8005026:	2303      	movs	r3, #3
 8005028:	e004      	b.n	8005034 <HAL_GPIO_Init+0x1f8>
 800502a:	2302      	movs	r3, #2
 800502c:	e002      	b.n	8005034 <HAL_GPIO_Init+0x1f8>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <HAL_GPIO_Init+0x1f8>
 8005032:	2300      	movs	r3, #0
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	2103      	movs	r1, #3
 8005038:	400a      	ands	r2, r1
 800503a:	0092      	lsls	r2, r2, #2
 800503c:	4093      	lsls	r3, r2
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005044:	4935      	ldr	r1, [pc, #212]	; (800511c <HAL_GPIO_Init+0x2e0>)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	089b      	lsrs	r3, r3, #2
 800504a:	3302      	adds	r3, #2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005052:	4b38      	ldr	r3, [pc, #224]	; (8005134 <HAL_GPIO_Init+0x2f8>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	43da      	mvns	r2, r3
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	035b      	lsls	r3, r3, #13
 800506a:	4013      	ands	r3, r2
 800506c:	d003      	beq.n	8005076 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005076:	4b2f      	ldr	r3, [pc, #188]	; (8005134 <HAL_GPIO_Init+0x2f8>)
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800507c:	4b2d      	ldr	r3, [pc, #180]	; (8005134 <HAL_GPIO_Init+0x2f8>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	43da      	mvns	r2, r3
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	4013      	ands	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	039b      	lsls	r3, r3, #14
 8005094:	4013      	ands	r3, r2
 8005096:	d003      	beq.n	80050a0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80050a0:	4b24      	ldr	r3, [pc, #144]	; (8005134 <HAL_GPIO_Init+0x2f8>)
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80050a6:	4b23      	ldr	r3, [pc, #140]	; (8005134 <HAL_GPIO_Init+0x2f8>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	43da      	mvns	r2, r3
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	4013      	ands	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	2380      	movs	r3, #128	; 0x80
 80050bc:	029b      	lsls	r3, r3, #10
 80050be:	4013      	ands	r3, r2
 80050c0:	d003      	beq.n	80050ca <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80050ca:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <HAL_GPIO_Init+0x2f8>)
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050d0:	4b18      	ldr	r3, [pc, #96]	; (8005134 <HAL_GPIO_Init+0x2f8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	43da      	mvns	r2, r3
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	025b      	lsls	r3, r3, #9
 80050e8:	4013      	ands	r3, r2
 80050ea:	d003      	beq.n	80050f4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80050f4:	4b0f      	ldr	r3, [pc, #60]	; (8005134 <HAL_GPIO_Init+0x2f8>)
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	3301      	adds	r3, #1
 80050fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	40da      	lsrs	r2, r3
 8005108:	1e13      	subs	r3, r2, #0
 800510a:	d000      	beq.n	800510e <HAL_GPIO_Init+0x2d2>
 800510c:	e6a2      	b.n	8004e54 <HAL_GPIO_Init+0x18>
  }
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46c0      	nop			; (mov r8, r8)
 8005112:	46bd      	mov	sp, r7
 8005114:	b006      	add	sp, #24
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40021000 	.word	0x40021000
 800511c:	40010000 	.word	0x40010000
 8005120:	50000400 	.word	0x50000400
 8005124:	50000800 	.word	0x50000800
 8005128:	50000c00 	.word	0x50000c00
 800512c:	50001000 	.word	0x50001000
 8005130:	50001c00 	.word	0x50001c00
 8005134:	40010400 	.word	0x40010400

08005138 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	000a      	movs	r2, r1
 8005142:	1cbb      	adds	r3, r7, #2
 8005144:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	1cba      	adds	r2, r7, #2
 800514c:	8812      	ldrh	r2, [r2, #0]
 800514e:	4013      	ands	r3, r2
 8005150:	d004      	beq.n	800515c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005152:	230f      	movs	r3, #15
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	2201      	movs	r2, #1
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	e003      	b.n	8005164 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800515c:	230f      	movs	r3, #15
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005164:	230f      	movs	r3, #15
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	781b      	ldrb	r3, [r3, #0]
}
 800516a:	0018      	movs	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	b004      	add	sp, #16
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	0008      	movs	r0, r1
 800517c:	0011      	movs	r1, r2
 800517e:	1cbb      	adds	r3, r7, #2
 8005180:	1c02      	adds	r2, r0, #0
 8005182:	801a      	strh	r2, [r3, #0]
 8005184:	1c7b      	adds	r3, r7, #1
 8005186:	1c0a      	adds	r2, r1, #0
 8005188:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800518a:	1c7b      	adds	r3, r7, #1
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005192:	1cbb      	adds	r3, r7, #2
 8005194:	881a      	ldrh	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800519a:	e003      	b.n	80051a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800519c:	1cbb      	adds	r3, r7, #2
 800519e:	881a      	ldrh	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051a4:	46c0      	nop			; (mov r8, r8)
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b002      	add	sp, #8
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	000a      	movs	r2, r1
 80051b6:	1cbb      	adds	r3, r7, #2
 80051b8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051c0:	1cbb      	adds	r3, r7, #2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4013      	ands	r3, r2
 80051c8:	041a      	lsls	r2, r3, #16
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	43db      	mvns	r3, r3
 80051ce:	1cb9      	adds	r1, r7, #2
 80051d0:	8809      	ldrh	r1, [r1, #0]
 80051d2:	400b      	ands	r3, r1
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	619a      	str	r2, [r3, #24]
}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	46bd      	mov	sp, r7
 80051de:	b004      	add	sp, #16
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e082      	b.n	80052fc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2241      	movs	r2, #65	; 0x41
 80051fa:	5c9b      	ldrb	r3, [r3, r2]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2240      	movs	r2, #64	; 0x40
 8005206:	2100      	movs	r1, #0
 8005208:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	0018      	movs	r0, r3
 800520e:	f7ff f933 	bl	8004478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2241      	movs	r2, #65	; 0x41
 8005216:	2124      	movs	r1, #36	; 0x24
 8005218:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2101      	movs	r1, #1
 8005226:	438a      	bics	r2, r1
 8005228:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4934      	ldr	r1, [pc, #208]	; (8005304 <HAL_I2C_Init+0x120>)
 8005234:	400a      	ands	r2, r1
 8005236:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4931      	ldr	r1, [pc, #196]	; (8005308 <HAL_I2C_Init+0x124>)
 8005244:	400a      	ands	r2, r1
 8005246:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d108      	bne.n	8005262 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2180      	movs	r1, #128	; 0x80
 800525a:	0209      	lsls	r1, r1, #8
 800525c:	430a      	orrs	r2, r1
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	e007      	b.n	8005272 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2184      	movs	r1, #132	; 0x84
 800526c:	0209      	lsls	r1, r1, #8
 800526e:	430a      	orrs	r2, r1
 8005270:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d104      	bne.n	8005284 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2280      	movs	r2, #128	; 0x80
 8005280:	0112      	lsls	r2, r2, #4
 8005282:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	491f      	ldr	r1, [pc, #124]	; (800530c <HAL_I2C_Init+0x128>)
 8005290:	430a      	orrs	r2, r1
 8005292:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	491a      	ldr	r1, [pc, #104]	; (8005308 <HAL_I2C_Init+0x124>)
 80052a0:	400a      	ands	r2, r1
 80052a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	431a      	orrs	r2, r3
 80052ae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69d9      	ldr	r1, [r3, #28]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1a      	ldr	r2, [r3, #32]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2101      	movs	r1, #1
 80052da:	430a      	orrs	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2241      	movs	r2, #65	; 0x41
 80052e8:	2120      	movs	r1, #32
 80052ea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2242      	movs	r2, #66	; 0x42
 80052f6:	2100      	movs	r1, #0
 80052f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b002      	add	sp, #8
 8005302:	bd80      	pop	{r7, pc}
 8005304:	f0ffffff 	.word	0xf0ffffff
 8005308:	ffff7fff 	.word	0xffff7fff
 800530c:	02008000 	.word	0x02008000

08005310 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2241      	movs	r2, #65	; 0x41
 800531e:	5c9b      	ldrb	r3, [r3, r2]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b20      	cmp	r3, #32
 8005324:	d138      	bne.n	8005398 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2240      	movs	r2, #64	; 0x40
 800532a:	5c9b      	ldrb	r3, [r3, r2]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005330:	2302      	movs	r3, #2
 8005332:	e032      	b.n	800539a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2240      	movs	r2, #64	; 0x40
 8005338:	2101      	movs	r1, #1
 800533a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2241      	movs	r2, #65	; 0x41
 8005340:	2124      	movs	r1, #36	; 0x24
 8005342:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2101      	movs	r1, #1
 8005350:	438a      	bics	r2, r1
 8005352:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4911      	ldr	r1, [pc, #68]	; (80053a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005360:	400a      	ands	r2, r1
 8005362:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6819      	ldr	r1, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2101      	movs	r1, #1
 8005380:	430a      	orrs	r2, r1
 8005382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2241      	movs	r2, #65	; 0x41
 8005388:	2120      	movs	r1, #32
 800538a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2240      	movs	r2, #64	; 0x40
 8005390:	2100      	movs	r1, #0
 8005392:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	e000      	b.n	800539a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005398:	2302      	movs	r3, #2
  }
}
 800539a:	0018      	movs	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	b002      	add	sp, #8
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	ffffefff 	.word	0xffffefff

080053a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2241      	movs	r2, #65	; 0x41
 80053b6:	5c9b      	ldrb	r3, [r3, r2]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	d139      	bne.n	8005432 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2240      	movs	r2, #64	; 0x40
 80053c2:	5c9b      	ldrb	r3, [r3, r2]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e033      	b.n	8005434 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2240      	movs	r2, #64	; 0x40
 80053d0:	2101      	movs	r1, #1
 80053d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2241      	movs	r2, #65	; 0x41
 80053d8:	2124      	movs	r1, #36	; 0x24
 80053da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2101      	movs	r1, #1
 80053e8:	438a      	bics	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4a11      	ldr	r2, [pc, #68]	; (800543c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2101      	movs	r1, #1
 800541a:	430a      	orrs	r2, r1
 800541c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2241      	movs	r2, #65	; 0x41
 8005422:	2120      	movs	r1, #32
 8005424:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2240      	movs	r2, #64	; 0x40
 800542a:	2100      	movs	r1, #0
 800542c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	e000      	b.n	8005434 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005432:	2302      	movs	r3, #2
  }
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	b004      	add	sp, #16
 800543a:	bd80      	pop	{r7, pc}
 800543c:	fffff0ff 	.word	0xfffff0ff

08005440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005440:	b5b0      	push	{r4, r5, r7, lr}
 8005442:	b08a      	sub	sp, #40	; 0x28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	f000 fb6c 	bl	8005b2c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005454:	4bc8      	ldr	r3, [pc, #800]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	220c      	movs	r2, #12
 800545a:	4013      	ands	r3, r2
 800545c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800545e:	4bc6      	ldr	r3, [pc, #792]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	025b      	lsls	r3, r3, #9
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2201      	movs	r2, #1
 8005470:	4013      	ands	r3, r2
 8005472:	d100      	bne.n	8005476 <HAL_RCC_OscConfig+0x36>
 8005474:	e07d      	b.n	8005572 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b08      	cmp	r3, #8
 800547a:	d007      	beq.n	800548c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b0c      	cmp	r3, #12
 8005480:	d112      	bne.n	80054a8 <HAL_RCC_OscConfig+0x68>
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	025b      	lsls	r3, r3, #9
 8005488:	429a      	cmp	r2, r3
 800548a:	d10d      	bne.n	80054a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800548c:	4bba      	ldr	r3, [pc, #744]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	029b      	lsls	r3, r3, #10
 8005494:	4013      	ands	r3, r2
 8005496:	d100      	bne.n	800549a <HAL_RCC_OscConfig+0x5a>
 8005498:	e06a      	b.n	8005570 <HAL_RCC_OscConfig+0x130>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d166      	bne.n	8005570 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	f000 fb42 	bl	8005b2c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	2380      	movs	r3, #128	; 0x80
 80054ae:	025b      	lsls	r3, r3, #9
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d107      	bne.n	80054c4 <HAL_RCC_OscConfig+0x84>
 80054b4:	4bb0      	ldr	r3, [pc, #704]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4baf      	ldr	r3, [pc, #700]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80054ba:	2180      	movs	r1, #128	; 0x80
 80054bc:	0249      	lsls	r1, r1, #9
 80054be:	430a      	orrs	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	e027      	b.n	8005514 <HAL_RCC_OscConfig+0xd4>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	23a0      	movs	r3, #160	; 0xa0
 80054ca:	02db      	lsls	r3, r3, #11
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d10e      	bne.n	80054ee <HAL_RCC_OscConfig+0xae>
 80054d0:	4ba9      	ldr	r3, [pc, #676]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4ba8      	ldr	r3, [pc, #672]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80054d6:	2180      	movs	r1, #128	; 0x80
 80054d8:	02c9      	lsls	r1, r1, #11
 80054da:	430a      	orrs	r2, r1
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	4ba6      	ldr	r3, [pc, #664]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4ba5      	ldr	r3, [pc, #660]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80054e4:	2180      	movs	r1, #128	; 0x80
 80054e6:	0249      	lsls	r1, r1, #9
 80054e8:	430a      	orrs	r2, r1
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e012      	b.n	8005514 <HAL_RCC_OscConfig+0xd4>
 80054ee:	4ba2      	ldr	r3, [pc, #648]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	4ba1      	ldr	r3, [pc, #644]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80054f4:	49a1      	ldr	r1, [pc, #644]	; (800577c <HAL_RCC_OscConfig+0x33c>)
 80054f6:	400a      	ands	r2, r1
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	4b9f      	ldr	r3, [pc, #636]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	2380      	movs	r3, #128	; 0x80
 8005500:	025b      	lsls	r3, r3, #9
 8005502:	4013      	ands	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4b9b      	ldr	r3, [pc, #620]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b9a      	ldr	r3, [pc, #616]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 800550e:	499c      	ldr	r1, [pc, #624]	; (8005780 <HAL_RCC_OscConfig+0x340>)
 8005510:	400a      	ands	r2, r1
 8005512:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d014      	beq.n	8005546 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7ff f9d0 	bl	80048c0 <HAL_GetTick>
 8005520:	0003      	movs	r3, r0
 8005522:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005526:	f7ff f9cb 	bl	80048c0 <HAL_GetTick>
 800552a:	0002      	movs	r2, r0
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b64      	cmp	r3, #100	; 0x64
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e2f9      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005538:	4b8f      	ldr	r3, [pc, #572]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	029b      	lsls	r3, r3, #10
 8005540:	4013      	ands	r3, r2
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0xe6>
 8005544:	e015      	b.n	8005572 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005546:	f7ff f9bb 	bl	80048c0 <HAL_GetTick>
 800554a:	0003      	movs	r3, r0
 800554c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005550:	f7ff f9b6 	bl	80048c0 <HAL_GetTick>
 8005554:	0002      	movs	r2, r0
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	; 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e2e4      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005562:	4b85      	ldr	r3, [pc, #532]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	2380      	movs	r3, #128	; 0x80
 8005568:	029b      	lsls	r3, r3, #10
 800556a:	4013      	ands	r3, r2
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x110>
 800556e:	e000      	b.n	8005572 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005570:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2202      	movs	r2, #2
 8005578:	4013      	ands	r3, r2
 800557a:	d100      	bne.n	800557e <HAL_RCC_OscConfig+0x13e>
 800557c:	e099      	b.n	80056b2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	2220      	movs	r2, #32
 8005588:	4013      	ands	r3, r2
 800558a:	d009      	beq.n	80055a0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800558c:	4b7a      	ldr	r3, [pc, #488]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4b79      	ldr	r3, [pc, #484]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 8005592:	2120      	movs	r1, #32
 8005594:	430a      	orrs	r2, r1
 8005596:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	2220      	movs	r2, #32
 800559c:	4393      	bics	r3, r2
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d005      	beq.n	80055b2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	2b0c      	cmp	r3, #12
 80055aa:	d13e      	bne.n	800562a <HAL_RCC_OscConfig+0x1ea>
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d13b      	bne.n	800562a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80055b2:	4b71      	ldr	r3, [pc, #452]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2204      	movs	r2, #4
 80055b8:	4013      	ands	r3, r2
 80055ba:	d004      	beq.n	80055c6 <HAL_RCC_OscConfig+0x186>
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e2b2      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c6:	4b6c      	ldr	r3, [pc, #432]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	4a6e      	ldr	r2, [pc, #440]	; (8005784 <HAL_RCC_OscConfig+0x344>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	0019      	movs	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	021a      	lsls	r2, r3, #8
 80055d6:	4b68      	ldr	r3, [pc, #416]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80055d8:	430a      	orrs	r2, r1
 80055da:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80055dc:	4b66      	ldr	r3, [pc, #408]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2209      	movs	r2, #9
 80055e2:	4393      	bics	r3, r2
 80055e4:	0019      	movs	r1, r3
 80055e6:	4b64      	ldr	r3, [pc, #400]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80055e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ea:	430a      	orrs	r2, r1
 80055ec:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055ee:	f000 fbeb 	bl	8005dc8 <HAL_RCC_GetSysClockFreq>
 80055f2:	0001      	movs	r1, r0
 80055f4:	4b60      	ldr	r3, [pc, #384]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	220f      	movs	r2, #15
 80055fc:	4013      	ands	r3, r2
 80055fe:	4a62      	ldr	r2, [pc, #392]	; (8005788 <HAL_RCC_OscConfig+0x348>)
 8005600:	5cd3      	ldrb	r3, [r2, r3]
 8005602:	000a      	movs	r2, r1
 8005604:	40da      	lsrs	r2, r3
 8005606:	4b61      	ldr	r3, [pc, #388]	; (800578c <HAL_RCC_OscConfig+0x34c>)
 8005608:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800560a:	4b61      	ldr	r3, [pc, #388]	; (8005790 <HAL_RCC_OscConfig+0x350>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2513      	movs	r5, #19
 8005610:	197c      	adds	r4, r7, r5
 8005612:	0018      	movs	r0, r3
 8005614:	f7ff f90e 	bl	8004834 <HAL_InitTick>
 8005618:	0003      	movs	r3, r0
 800561a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800561c:	197b      	adds	r3, r7, r5
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d046      	beq.n	80056b2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8005624:	197b      	adds	r3, r7, r5
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	e280      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	2b00      	cmp	r3, #0
 800562e:	d027      	beq.n	8005680 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005630:	4b51      	ldr	r3, [pc, #324]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2209      	movs	r2, #9
 8005636:	4393      	bics	r3, r2
 8005638:	0019      	movs	r1, r3
 800563a:	4b4f      	ldr	r3, [pc, #316]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 800563c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563e:	430a      	orrs	r2, r1
 8005640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005642:	f7ff f93d 	bl	80048c0 <HAL_GetTick>
 8005646:	0003      	movs	r3, r0
 8005648:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800564c:	f7ff f938 	bl	80048c0 <HAL_GetTick>
 8005650:	0002      	movs	r2, r0
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e266      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800565e:	4b46      	ldr	r3, [pc, #280]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2204      	movs	r2, #4
 8005664:	4013      	ands	r3, r2
 8005666:	d0f1      	beq.n	800564c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005668:	4b43      	ldr	r3, [pc, #268]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4a45      	ldr	r2, [pc, #276]	; (8005784 <HAL_RCC_OscConfig+0x344>)
 800566e:	4013      	ands	r3, r2
 8005670:	0019      	movs	r1, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	021a      	lsls	r2, r3, #8
 8005678:	4b3f      	ldr	r3, [pc, #252]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
 800567e:	e018      	b.n	80056b2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005680:	4b3d      	ldr	r3, [pc, #244]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4b3c      	ldr	r3, [pc, #240]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 8005686:	2101      	movs	r1, #1
 8005688:	438a      	bics	r2, r1
 800568a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568c:	f7ff f918 	bl	80048c0 <HAL_GetTick>
 8005690:	0003      	movs	r3, r0
 8005692:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005696:	f7ff f913 	bl	80048c0 <HAL_GetTick>
 800569a:	0002      	movs	r2, r0
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e241      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056a8:	4b33      	ldr	r3, [pc, #204]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2204      	movs	r2, #4
 80056ae:	4013      	ands	r3, r2
 80056b0:	d1f1      	bne.n	8005696 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2210      	movs	r2, #16
 80056b8:	4013      	ands	r3, r2
 80056ba:	d100      	bne.n	80056be <HAL_RCC_OscConfig+0x27e>
 80056bc:	e0a1      	b.n	8005802 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d140      	bne.n	8005746 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056c4:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4013      	ands	r3, r2
 80056ce:	d005      	beq.n	80056dc <HAL_RCC_OscConfig+0x29c>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e227      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056dc:	4b26      	ldr	r3, [pc, #152]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <HAL_RCC_OscConfig+0x354>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	0019      	movs	r1, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1a      	ldr	r2, [r3, #32]
 80056ea:	4b23      	ldr	r3, [pc, #140]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056f0:	4b21      	ldr	r3, [pc, #132]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	0a19      	lsrs	r1, r3, #8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	061a      	lsls	r2, r3, #24
 80056fe:	4b1e      	ldr	r3, [pc, #120]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	0b5b      	lsrs	r3, r3, #13
 800570a:	3301      	adds	r3, #1
 800570c:	2280      	movs	r2, #128	; 0x80
 800570e:	0212      	lsls	r2, r2, #8
 8005710:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005712:	4b19      	ldr	r3, [pc, #100]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	091b      	lsrs	r3, r3, #4
 8005718:	210f      	movs	r1, #15
 800571a:	400b      	ands	r3, r1
 800571c:	491a      	ldr	r1, [pc, #104]	; (8005788 <HAL_RCC_OscConfig+0x348>)
 800571e:	5ccb      	ldrb	r3, [r1, r3]
 8005720:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005722:	4b1a      	ldr	r3, [pc, #104]	; (800578c <HAL_RCC_OscConfig+0x34c>)
 8005724:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005726:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <HAL_RCC_OscConfig+0x350>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2513      	movs	r5, #19
 800572c:	197c      	adds	r4, r7, r5
 800572e:	0018      	movs	r0, r3
 8005730:	f7ff f880 	bl	8004834 <HAL_InitTick>
 8005734:	0003      	movs	r3, r0
 8005736:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005738:	197b      	adds	r3, r7, r5
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d060      	beq.n	8005802 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8005740:	197b      	adds	r3, r7, r5
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	e1f2      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d03f      	beq.n	80057ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800574e:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <HAL_RCC_OscConfig+0x338>)
 8005754:	2180      	movs	r1, #128	; 0x80
 8005756:	0049      	lsls	r1, r1, #1
 8005758:	430a      	orrs	r2, r1
 800575a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575c:	f7ff f8b0 	bl	80048c0 <HAL_GetTick>
 8005760:	0003      	movs	r3, r0
 8005762:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005764:	e018      	b.n	8005798 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005766:	f7ff f8ab 	bl	80048c0 <HAL_GetTick>
 800576a:	0002      	movs	r2, r0
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d911      	bls.n	8005798 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e1d9      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
 8005778:	40021000 	.word	0x40021000
 800577c:	fffeffff 	.word	0xfffeffff
 8005780:	fffbffff 	.word	0xfffbffff
 8005784:	ffffe0ff 	.word	0xffffe0ff
 8005788:	0800edd4 	.word	0x0800edd4
 800578c:	20000004 	.word	0x20000004
 8005790:	20000008 	.word	0x20000008
 8005794:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005798:	4bc9      	ldr	r3, [pc, #804]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4013      	ands	r3, r2
 80057a2:	d0e0      	beq.n	8005766 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057a4:	4bc6      	ldr	r3, [pc, #792]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	4ac6      	ldr	r2, [pc, #792]	; (8005ac4 <HAL_RCC_OscConfig+0x684>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	0019      	movs	r1, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1a      	ldr	r2, [r3, #32]
 80057b2:	4bc3      	ldr	r3, [pc, #780]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057b8:	4bc1      	ldr	r3, [pc, #772]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	0a19      	lsrs	r1, r3, #8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	061a      	lsls	r2, r3, #24
 80057c6:	4bbe      	ldr	r3, [pc, #760]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 80057c8:	430a      	orrs	r2, r1
 80057ca:	605a      	str	r2, [r3, #4]
 80057cc:	e019      	b.n	8005802 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057ce:	4bbc      	ldr	r3, [pc, #752]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4bbb      	ldr	r3, [pc, #748]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 80057d4:	49bc      	ldr	r1, [pc, #752]	; (8005ac8 <HAL_RCC_OscConfig+0x688>)
 80057d6:	400a      	ands	r2, r1
 80057d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057da:	f7ff f871 	bl	80048c0 <HAL_GetTick>
 80057de:	0003      	movs	r3, r0
 80057e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057e4:	f7ff f86c 	bl	80048c0 <HAL_GetTick>
 80057e8:	0002      	movs	r2, r0
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e19a      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80057f6:	4bb2      	ldr	r3, [pc, #712]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4013      	ands	r3, r2
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2208      	movs	r2, #8
 8005808:	4013      	ands	r3, r2
 800580a:	d036      	beq.n	800587a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d019      	beq.n	8005848 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005814:	4baa      	ldr	r3, [pc, #680]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005818:	4ba9      	ldr	r3, [pc, #676]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800581a:	2101      	movs	r1, #1
 800581c:	430a      	orrs	r2, r1
 800581e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005820:	f7ff f84e 	bl	80048c0 <HAL_GetTick>
 8005824:	0003      	movs	r3, r0
 8005826:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800582a:	f7ff f849 	bl	80048c0 <HAL_GetTick>
 800582e:	0002      	movs	r2, r0
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e177      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800583c:	4ba0      	ldr	r3, [pc, #640]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800583e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005840:	2202      	movs	r2, #2
 8005842:	4013      	ands	r3, r2
 8005844:	d0f1      	beq.n	800582a <HAL_RCC_OscConfig+0x3ea>
 8005846:	e018      	b.n	800587a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005848:	4b9d      	ldr	r3, [pc, #628]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800584a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800584c:	4b9c      	ldr	r3, [pc, #624]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800584e:	2101      	movs	r1, #1
 8005850:	438a      	bics	r2, r1
 8005852:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005854:	f7ff f834 	bl	80048c0 <HAL_GetTick>
 8005858:	0003      	movs	r3, r0
 800585a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800585e:	f7ff f82f 	bl	80048c0 <HAL_GetTick>
 8005862:	0002      	movs	r2, r0
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e15d      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005870:	4b93      	ldr	r3, [pc, #588]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005874:	2202      	movs	r2, #2
 8005876:	4013      	ands	r3, r2
 8005878:	d1f1      	bne.n	800585e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2204      	movs	r2, #4
 8005880:	4013      	ands	r3, r2
 8005882:	d100      	bne.n	8005886 <HAL_RCC_OscConfig+0x446>
 8005884:	e0ae      	b.n	80059e4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005886:	2023      	movs	r0, #35	; 0x23
 8005888:	183b      	adds	r3, r7, r0
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800588e:	4b8c      	ldr	r3, [pc, #560]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005892:	2380      	movs	r3, #128	; 0x80
 8005894:	055b      	lsls	r3, r3, #21
 8005896:	4013      	ands	r3, r2
 8005898:	d109      	bne.n	80058ae <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800589a:	4b89      	ldr	r3, [pc, #548]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800589c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800589e:	4b88      	ldr	r3, [pc, #544]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 80058a0:	2180      	movs	r1, #128	; 0x80
 80058a2:	0549      	lsls	r1, r1, #21
 80058a4:	430a      	orrs	r2, r1
 80058a6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80058a8:	183b      	adds	r3, r7, r0
 80058aa:	2201      	movs	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ae:	4b87      	ldr	r3, [pc, #540]	; (8005acc <HAL_RCC_OscConfig+0x68c>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	4013      	ands	r3, r2
 80058b8:	d11a      	bne.n	80058f0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ba:	4b84      	ldr	r3, [pc, #528]	; (8005acc <HAL_RCC_OscConfig+0x68c>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b83      	ldr	r3, [pc, #524]	; (8005acc <HAL_RCC_OscConfig+0x68c>)
 80058c0:	2180      	movs	r1, #128	; 0x80
 80058c2:	0049      	lsls	r1, r1, #1
 80058c4:	430a      	orrs	r2, r1
 80058c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058c8:	f7fe fffa 	bl	80048c0 <HAL_GetTick>
 80058cc:	0003      	movs	r3, r0
 80058ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d2:	f7fe fff5 	bl	80048c0 <HAL_GetTick>
 80058d6:	0002      	movs	r2, r0
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b64      	cmp	r3, #100	; 0x64
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e123      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e4:	4b79      	ldr	r3, [pc, #484]	; (8005acc <HAL_RCC_OscConfig+0x68c>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	2380      	movs	r3, #128	; 0x80
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	4013      	ands	r3, r2
 80058ee:	d0f0      	beq.n	80058d2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	2380      	movs	r3, #128	; 0x80
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d107      	bne.n	800590c <HAL_RCC_OscConfig+0x4cc>
 80058fc:	4b70      	ldr	r3, [pc, #448]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 80058fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005900:	4b6f      	ldr	r3, [pc, #444]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005902:	2180      	movs	r1, #128	; 0x80
 8005904:	0049      	lsls	r1, r1, #1
 8005906:	430a      	orrs	r2, r1
 8005908:	651a      	str	r2, [r3, #80]	; 0x50
 800590a:	e031      	b.n	8005970 <HAL_RCC_OscConfig+0x530>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10c      	bne.n	800592e <HAL_RCC_OscConfig+0x4ee>
 8005914:	4b6a      	ldr	r3, [pc, #424]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005918:	4b69      	ldr	r3, [pc, #420]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800591a:	496b      	ldr	r1, [pc, #428]	; (8005ac8 <HAL_RCC_OscConfig+0x688>)
 800591c:	400a      	ands	r2, r1
 800591e:	651a      	str	r2, [r3, #80]	; 0x50
 8005920:	4b67      	ldr	r3, [pc, #412]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005924:	4b66      	ldr	r3, [pc, #408]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005926:	496a      	ldr	r1, [pc, #424]	; (8005ad0 <HAL_RCC_OscConfig+0x690>)
 8005928:	400a      	ands	r2, r1
 800592a:	651a      	str	r2, [r3, #80]	; 0x50
 800592c:	e020      	b.n	8005970 <HAL_RCC_OscConfig+0x530>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	23a0      	movs	r3, #160	; 0xa0
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	429a      	cmp	r2, r3
 8005938:	d10e      	bne.n	8005958 <HAL_RCC_OscConfig+0x518>
 800593a:	4b61      	ldr	r3, [pc, #388]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800593c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800593e:	4b60      	ldr	r3, [pc, #384]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005940:	2180      	movs	r1, #128	; 0x80
 8005942:	00c9      	lsls	r1, r1, #3
 8005944:	430a      	orrs	r2, r1
 8005946:	651a      	str	r2, [r3, #80]	; 0x50
 8005948:	4b5d      	ldr	r3, [pc, #372]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800594a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800594c:	4b5c      	ldr	r3, [pc, #368]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800594e:	2180      	movs	r1, #128	; 0x80
 8005950:	0049      	lsls	r1, r1, #1
 8005952:	430a      	orrs	r2, r1
 8005954:	651a      	str	r2, [r3, #80]	; 0x50
 8005956:	e00b      	b.n	8005970 <HAL_RCC_OscConfig+0x530>
 8005958:	4b59      	ldr	r3, [pc, #356]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800595a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800595c:	4b58      	ldr	r3, [pc, #352]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800595e:	495a      	ldr	r1, [pc, #360]	; (8005ac8 <HAL_RCC_OscConfig+0x688>)
 8005960:	400a      	ands	r2, r1
 8005962:	651a      	str	r2, [r3, #80]	; 0x50
 8005964:	4b56      	ldr	r3, [pc, #344]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005968:	4b55      	ldr	r3, [pc, #340]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 800596a:	4959      	ldr	r1, [pc, #356]	; (8005ad0 <HAL_RCC_OscConfig+0x690>)
 800596c:	400a      	ands	r2, r1
 800596e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d015      	beq.n	80059a4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005978:	f7fe ffa2 	bl	80048c0 <HAL_GetTick>
 800597c:	0003      	movs	r3, r0
 800597e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005980:	e009      	b.n	8005996 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005982:	f7fe ff9d 	bl	80048c0 <HAL_GetTick>
 8005986:	0002      	movs	r2, r0
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	4a51      	ldr	r2, [pc, #324]	; (8005ad4 <HAL_RCC_OscConfig+0x694>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e0ca      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005996:	4b4a      	ldr	r3, [pc, #296]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800599a:	2380      	movs	r3, #128	; 0x80
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4013      	ands	r3, r2
 80059a0:	d0ef      	beq.n	8005982 <HAL_RCC_OscConfig+0x542>
 80059a2:	e014      	b.n	80059ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a4:	f7fe ff8c 	bl	80048c0 <HAL_GetTick>
 80059a8:	0003      	movs	r3, r0
 80059aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059ac:	e009      	b.n	80059c2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ae:	f7fe ff87 	bl	80048c0 <HAL_GetTick>
 80059b2:	0002      	movs	r2, r0
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	4a46      	ldr	r2, [pc, #280]	; (8005ad4 <HAL_RCC_OscConfig+0x694>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e0b4      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059c2:	4b3f      	ldr	r3, [pc, #252]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 80059c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059c6:	2380      	movs	r3, #128	; 0x80
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4013      	ands	r3, r2
 80059cc:	d1ef      	bne.n	80059ae <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059ce:	2323      	movs	r3, #35	; 0x23
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d105      	bne.n	80059e4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d8:	4b39      	ldr	r3, [pc, #228]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 80059da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059dc:	4b38      	ldr	r3, [pc, #224]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 80059de:	493e      	ldr	r1, [pc, #248]	; (8005ad8 <HAL_RCC_OscConfig+0x698>)
 80059e0:	400a      	ands	r2, r1
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d100      	bne.n	80059ee <HAL_RCC_OscConfig+0x5ae>
 80059ec:	e09d      	b.n	8005b2a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	2b0c      	cmp	r3, #12
 80059f2:	d100      	bne.n	80059f6 <HAL_RCC_OscConfig+0x5b6>
 80059f4:	e076      	b.n	8005ae4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d145      	bne.n	8005a8a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059fe:	4b30      	ldr	r3, [pc, #192]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	4b2f      	ldr	r3, [pc, #188]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005a04:	4935      	ldr	r1, [pc, #212]	; (8005adc <HAL_RCC_OscConfig+0x69c>)
 8005a06:	400a      	ands	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0a:	f7fe ff59 	bl	80048c0 <HAL_GetTick>
 8005a0e:	0003      	movs	r3, r0
 8005a10:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a14:	f7fe ff54 	bl	80048c0 <HAL_GetTick>
 8005a18:	0002      	movs	r2, r0
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e082      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a26:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	2380      	movs	r3, #128	; 0x80
 8005a2c:	049b      	lsls	r3, r3, #18
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a32:	4b23      	ldr	r3, [pc, #140]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	4a2a      	ldr	r2, [pc, #168]	; (8005ae0 <HAL_RCC_OscConfig+0x6a0>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	0019      	movs	r1, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a52:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005a58:	2180      	movs	r1, #128	; 0x80
 8005a5a:	0449      	lsls	r1, r1, #17
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a60:	f7fe ff2e 	bl	80048c0 <HAL_GetTick>
 8005a64:	0003      	movs	r3, r0
 8005a66:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a6a:	f7fe ff29 	bl	80048c0 <HAL_GetTick>
 8005a6e:	0002      	movs	r2, r0
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e057      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005a7c:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	049b      	lsls	r3, r3, #18
 8005a84:	4013      	ands	r3, r2
 8005a86:	d0f0      	beq.n	8005a6a <HAL_RCC_OscConfig+0x62a>
 8005a88:	e04f      	b.n	8005b2a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005a90:	4912      	ldr	r1, [pc, #72]	; (8005adc <HAL_RCC_OscConfig+0x69c>)
 8005a92:	400a      	ands	r2, r1
 8005a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a96:	f7fe ff13 	bl	80048c0 <HAL_GetTick>
 8005a9a:	0003      	movs	r3, r0
 8005a9c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aa0:	f7fe ff0e 	bl	80048c0 <HAL_GetTick>
 8005aa4:	0002      	movs	r2, r0
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e03c      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005ab2:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <HAL_RCC_OscConfig+0x680>)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	049b      	lsls	r3, r3, #18
 8005aba:	4013      	ands	r3, r2
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x660>
 8005abe:	e034      	b.n	8005b2a <HAL_RCC_OscConfig+0x6ea>
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	ffff1fff 	.word	0xffff1fff
 8005ac8:	fffffeff 	.word	0xfffffeff
 8005acc:	40007000 	.word	0x40007000
 8005ad0:	fffffbff 	.word	0xfffffbff
 8005ad4:	00001388 	.word	0x00001388
 8005ad8:	efffffff 	.word	0xefffffff
 8005adc:	feffffff 	.word	0xfeffffff
 8005ae0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e01d      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005af0:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <HAL_RCC_OscConfig+0x6f4>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	025b      	lsls	r3, r3, #9
 8005afc:	401a      	ands	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d10f      	bne.n	8005b26 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	23f0      	movs	r3, #240	; 0xf0
 8005b0a:	039b      	lsls	r3, r3, #14
 8005b0c:	401a      	ands	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d107      	bne.n	8005b26 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	23c0      	movs	r3, #192	; 0xc0
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	401a      	ands	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d001      	beq.n	8005b2a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b00a      	add	sp, #40	; 0x28
 8005b32:	bdb0      	pop	{r4, r5, r7, pc}
 8005b34:	40021000 	.word	0x40021000

08005b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b38:	b5b0      	push	{r4, r5, r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e128      	b.n	8005d9e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b4c:	4b96      	ldr	r3, [pc, #600]	; (8005da8 <HAL_RCC_ClockConfig+0x270>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2201      	movs	r2, #1
 8005b52:	4013      	ands	r3, r2
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d91e      	bls.n	8005b98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5a:	4b93      	ldr	r3, [pc, #588]	; (8005da8 <HAL_RCC_ClockConfig+0x270>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	4393      	bics	r3, r2
 8005b62:	0019      	movs	r1, r3
 8005b64:	4b90      	ldr	r3, [pc, #576]	; (8005da8 <HAL_RCC_ClockConfig+0x270>)
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b6c:	f7fe fea8 	bl	80048c0 <HAL_GetTick>
 8005b70:	0003      	movs	r3, r0
 8005b72:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b74:	e009      	b.n	8005b8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b76:	f7fe fea3 	bl	80048c0 <HAL_GetTick>
 8005b7a:	0002      	movs	r2, r0
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	4a8a      	ldr	r2, [pc, #552]	; (8005dac <HAL_RCC_ClockConfig+0x274>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e109      	b.n	8005d9e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8a:	4b87      	ldr	r3, [pc, #540]	; (8005da8 <HAL_RCC_ClockConfig+0x270>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	4013      	ands	r3, r2
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d1ee      	bne.n	8005b76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d009      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba2:	4b83      	ldr	r3, [pc, #524]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	22f0      	movs	r2, #240	; 0xf0
 8005ba8:	4393      	bics	r3, r2
 8005baa:	0019      	movs	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	4b7f      	ldr	r3, [pc, #508]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	d100      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0x8a>
 8005bc0:	e089      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d107      	bne.n	8005bda <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bca:	4b79      	ldr	r3, [pc, #484]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	2380      	movs	r3, #128	; 0x80
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d120      	bne.n	8005c18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e0e1      	b.n	8005d9e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d107      	bne.n	8005bf2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005be2:	4b73      	ldr	r3, [pc, #460]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	2380      	movs	r3, #128	; 0x80
 8005be8:	049b      	lsls	r3, r3, #18
 8005bea:	4013      	ands	r3, r2
 8005bec:	d114      	bne.n	8005c18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e0d5      	b.n	8005d9e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d106      	bne.n	8005c08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bfa:	4b6d      	ldr	r3, [pc, #436]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2204      	movs	r2, #4
 8005c00:	4013      	ands	r3, r2
 8005c02:	d109      	bne.n	8005c18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e0ca      	b.n	8005d9e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c08:	4b69      	ldr	r3, [pc, #420]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4013      	ands	r3, r2
 8005c12:	d101      	bne.n	8005c18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0c2      	b.n	8005d9e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c18:	4b65      	ldr	r3, [pc, #404]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	4393      	bics	r3, r2
 8005c20:	0019      	movs	r1, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	4b62      	ldr	r3, [pc, #392]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c2c:	f7fe fe48 	bl	80048c0 <HAL_GetTick>
 8005c30:	0003      	movs	r3, r0
 8005c32:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d111      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c3c:	e009      	b.n	8005c52 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c3e:	f7fe fe3f 	bl	80048c0 <HAL_GetTick>
 8005c42:	0002      	movs	r2, r0
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	4a58      	ldr	r2, [pc, #352]	; (8005dac <HAL_RCC_ClockConfig+0x274>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e0a5      	b.n	8005d9e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c52:	4b57      	ldr	r3, [pc, #348]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	220c      	movs	r2, #12
 8005c58:	4013      	ands	r3, r2
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d1ef      	bne.n	8005c3e <HAL_RCC_ClockConfig+0x106>
 8005c5e:	e03a      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d111      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c68:	e009      	b.n	8005c7e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c6a:	f7fe fe29 	bl	80048c0 <HAL_GetTick>
 8005c6e:	0002      	movs	r2, r0
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	4a4d      	ldr	r2, [pc, #308]	; (8005dac <HAL_RCC_ClockConfig+0x274>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e08f      	b.n	8005d9e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c7e:	4b4c      	ldr	r3, [pc, #304]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	220c      	movs	r2, #12
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b0c      	cmp	r3, #12
 8005c88:	d1ef      	bne.n	8005c6a <HAL_RCC_ClockConfig+0x132>
 8005c8a:	e024      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d11b      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c94:	e009      	b.n	8005caa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c96:	f7fe fe13 	bl	80048c0 <HAL_GetTick>
 8005c9a:	0002      	movs	r2, r0
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	4a42      	ldr	r2, [pc, #264]	; (8005dac <HAL_RCC_ClockConfig+0x274>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e079      	b.n	8005d9e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005caa:	4b41      	ldr	r3, [pc, #260]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	220c      	movs	r2, #12
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d1ef      	bne.n	8005c96 <HAL_RCC_ClockConfig+0x15e>
 8005cb6:	e00e      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb8:	f7fe fe02 	bl	80048c0 <HAL_GetTick>
 8005cbc:	0002      	movs	r2, r0
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	4a3a      	ldr	r2, [pc, #232]	; (8005dac <HAL_RCC_ClockConfig+0x274>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e068      	b.n	8005d9e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ccc:	4b38      	ldr	r3, [pc, #224]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	220c      	movs	r2, #12
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d1f0      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd6:	4b34      	ldr	r3, [pc, #208]	; (8005da8 <HAL_RCC_ClockConfig+0x270>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	4013      	ands	r3, r2
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d21e      	bcs.n	8005d22 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce4:	4b30      	ldr	r3, [pc, #192]	; (8005da8 <HAL_RCC_ClockConfig+0x270>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	4393      	bics	r3, r2
 8005cec:	0019      	movs	r1, r3
 8005cee:	4b2e      	ldr	r3, [pc, #184]	; (8005da8 <HAL_RCC_ClockConfig+0x270>)
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005cf6:	f7fe fde3 	bl	80048c0 <HAL_GetTick>
 8005cfa:	0003      	movs	r3, r0
 8005cfc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	e009      	b.n	8005d14 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d00:	f7fe fdde 	bl	80048c0 <HAL_GetTick>
 8005d04:	0002      	movs	r2, r0
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	4a28      	ldr	r2, [pc, #160]	; (8005dac <HAL_RCC_ClockConfig+0x274>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e044      	b.n	8005d9e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d14:	4b24      	ldr	r3, [pc, #144]	; (8005da8 <HAL_RCC_ClockConfig+0x270>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d1ee      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2204      	movs	r2, #4
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d009      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d2c:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4a20      	ldr	r2, [pc, #128]	; (8005db4 <HAL_RCC_ClockConfig+0x27c>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	0019      	movs	r1, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2208      	movs	r2, #8
 8005d46:	4013      	ands	r3, r2
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d4a:	4b19      	ldr	r3, [pc, #100]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	4a1a      	ldr	r2, [pc, #104]	; (8005db8 <HAL_RCC_ClockConfig+0x280>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	0019      	movs	r1, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	00da      	lsls	r2, r3, #3
 8005d5a:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d60:	f000 f832 	bl	8005dc8 <HAL_RCC_GetSysClockFreq>
 8005d64:	0001      	movs	r1, r0
 8005d66:	4b12      	ldr	r3, [pc, #72]	; (8005db0 <HAL_RCC_ClockConfig+0x278>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	091b      	lsrs	r3, r3, #4
 8005d6c:	220f      	movs	r2, #15
 8005d6e:	4013      	ands	r3, r2
 8005d70:	4a12      	ldr	r2, [pc, #72]	; (8005dbc <HAL_RCC_ClockConfig+0x284>)
 8005d72:	5cd3      	ldrb	r3, [r2, r3]
 8005d74:	000a      	movs	r2, r1
 8005d76:	40da      	lsrs	r2, r3
 8005d78:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <HAL_RCC_ClockConfig+0x288>)
 8005d7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d7c:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <HAL_RCC_ClockConfig+0x28c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	250b      	movs	r5, #11
 8005d82:	197c      	adds	r4, r7, r5
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7fe fd55 	bl	8004834 <HAL_InitTick>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005d8e:	197b      	adds	r3, r7, r5
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005d96:	197b      	adds	r3, r7, r5
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	e000      	b.n	8005d9e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	0018      	movs	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	b004      	add	sp, #16
 8005da4:	bdb0      	pop	{r4, r5, r7, pc}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	40022000 	.word	0x40022000
 8005dac:	00001388 	.word	0x00001388
 8005db0:	40021000 	.word	0x40021000
 8005db4:	fffff8ff 	.word	0xfffff8ff
 8005db8:	ffffc7ff 	.word	0xffffc7ff
 8005dbc:	0800edd4 	.word	0x0800edd4
 8005dc0:	20000004 	.word	0x20000004
 8005dc4:	20000008 	.word	0x20000008

08005dc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc8:	b5b0      	push	{r4, r5, r7, lr}
 8005dca:	b08e      	sub	sp, #56	; 0x38
 8005dcc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005dce:	4b4c      	ldr	r3, [pc, #304]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x138>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b0c      	cmp	r3, #12
 8005ddc:	d014      	beq.n	8005e08 <HAL_RCC_GetSysClockFreq+0x40>
 8005dde:	d900      	bls.n	8005de2 <HAL_RCC_GetSysClockFreq+0x1a>
 8005de0:	e07b      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x112>
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d002      	beq.n	8005dec <HAL_RCC_GetSysClockFreq+0x24>
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	d00b      	beq.n	8005e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dea:	e076      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005dec:	4b44      	ldr	r3, [pc, #272]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x138>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2210      	movs	r2, #16
 8005df2:	4013      	ands	r3, r2
 8005df4:	d002      	beq.n	8005dfc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005df6:	4b43      	ldr	r3, [pc, #268]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005df8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005dfa:	e07c      	b.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005dfc:	4b42      	ldr	r3, [pc, #264]	; (8005f08 <HAL_RCC_GetSysClockFreq+0x140>)
 8005dfe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e00:	e079      	b.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e02:	4b42      	ldr	r3, [pc, #264]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x144>)
 8005e04:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e06:	e076      	b.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	0c9a      	lsrs	r2, r3, #18
 8005e0c:	230f      	movs	r3, #15
 8005e0e:	401a      	ands	r2, r3
 8005e10:	4b3f      	ldr	r3, [pc, #252]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x148>)
 8005e12:	5c9b      	ldrb	r3, [r3, r2]
 8005e14:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	0d9a      	lsrs	r2, r3, #22
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	3301      	adds	r3, #1
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e22:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	2380      	movs	r3, #128	; 0x80
 8005e28:	025b      	lsls	r3, r3, #9
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d01a      	beq.n	8005e64 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	2300      	movs	r3, #0
 8005e34:	61fb      	str	r3, [r7, #28]
 8005e36:	4a35      	ldr	r2, [pc, #212]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x144>)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	69b8      	ldr	r0, [r7, #24]
 8005e3c:	69f9      	ldr	r1, [r7, #28]
 8005e3e:	f7fa fb53 	bl	80004e8 <__aeabi_lmul>
 8005e42:	0002      	movs	r2, r0
 8005e44:	000b      	movs	r3, r1
 8005e46:	0010      	movs	r0, r2
 8005e48:	0019      	movs	r1, r3
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f7fa fb27 	bl	80004a8 <__aeabi_uldivmod>
 8005e5a:	0002      	movs	r2, r0
 8005e5c:	000b      	movs	r3, r1
 8005e5e:	0013      	movs	r3, r2
 8005e60:	637b      	str	r3, [r7, #52]	; 0x34
 8005e62:	e037      	b.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005e64:	4b26      	ldr	r3, [pc, #152]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2210      	movs	r2, #16
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d01a      	beq.n	8005ea4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	60bb      	str	r3, [r7, #8]
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	4a23      	ldr	r2, [pc, #140]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	68b8      	ldr	r0, [r7, #8]
 8005e7c:	68f9      	ldr	r1, [r7, #12]
 8005e7e:	f7fa fb33 	bl	80004e8 <__aeabi_lmul>
 8005e82:	0002      	movs	r2, r0
 8005e84:	000b      	movs	r3, r1
 8005e86:	0010      	movs	r0, r2
 8005e88:	0019      	movs	r1, r3
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	603b      	str	r3, [r7, #0]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f7fa fb07 	bl	80004a8 <__aeabi_uldivmod>
 8005e9a:	0002      	movs	r2, r0
 8005e9c:	000b      	movs	r3, r1
 8005e9e:	0013      	movs	r3, r2
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea2:	e017      	b.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	0019      	movs	r1, r3
 8005eac:	4a16      	ldr	r2, [pc, #88]	; (8005f08 <HAL_RCC_GetSysClockFreq+0x140>)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f7fa fb1a 	bl	80004e8 <__aeabi_lmul>
 8005eb4:	0002      	movs	r2, r0
 8005eb6:	000b      	movs	r3, r1
 8005eb8:	0010      	movs	r0, r2
 8005eba:	0019      	movs	r1, r3
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	001c      	movs	r4, r3
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	001d      	movs	r5, r3
 8005ec4:	0022      	movs	r2, r4
 8005ec6:	002b      	movs	r3, r5
 8005ec8:	f7fa faee 	bl	80004a8 <__aeabi_uldivmod>
 8005ecc:	0002      	movs	r2, r0
 8005ece:	000b      	movs	r3, r1
 8005ed0:	0013      	movs	r3, r2
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ed8:	e00d      	b.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x138>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	0b5b      	lsrs	r3, r3, #13
 8005ee0:	2207      	movs	r2, #7
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	2280      	movs	r2, #128	; 0x80
 8005eec:	0212      	lsls	r2, r2, #8
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	0013      	movs	r3, r2
 8005ef2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ef4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005ef8:	0018      	movs	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b00e      	add	sp, #56	; 0x38
 8005efe:	bdb0      	pop	{r4, r5, r7, pc}
 8005f00:	40021000 	.word	0x40021000
 8005f04:	003d0900 	.word	0x003d0900
 8005f08:	00f42400 	.word	0x00f42400
 8005f0c:	007a1200 	.word	0x007a1200
 8005f10:	0800ede4 	.word	0x0800ede4

08005f14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005f1c:	2017      	movs	r0, #23
 8005f1e:	183b      	adds	r3, r7, r0
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	d100      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005f2e:	e0c7      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f30:	4b84      	ldr	r3, [pc, #528]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f34:	2380      	movs	r3, #128	; 0x80
 8005f36:	055b      	lsls	r3, r3, #21
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d109      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f3c:	4b81      	ldr	r3, [pc, #516]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f40:	4b80      	ldr	r3, [pc, #512]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005f42:	2180      	movs	r1, #128	; 0x80
 8005f44:	0549      	lsls	r1, r1, #21
 8005f46:	430a      	orrs	r2, r1
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005f4a:	183b      	adds	r3, r7, r0
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f50:	4b7d      	ldr	r3, [pc, #500]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d11a      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f5c:	4b7a      	ldr	r3, [pc, #488]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b79      	ldr	r3, [pc, #484]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005f62:	2180      	movs	r1, #128	; 0x80
 8005f64:	0049      	lsls	r1, r1, #1
 8005f66:	430a      	orrs	r2, r1
 8005f68:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f6a:	f7fe fca9 	bl	80048c0 <HAL_GetTick>
 8005f6e:	0003      	movs	r3, r0
 8005f70:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f72:	e008      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f74:	f7fe fca4 	bl	80048c0 <HAL_GetTick>
 8005f78:	0002      	movs	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b64      	cmp	r3, #100	; 0x64
 8005f80:	d901      	bls.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e0d9      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f86:	4b70      	ldr	r3, [pc, #448]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	2380      	movs	r3, #128	; 0x80
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	4013      	ands	r3, r2
 8005f90:	d0f0      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005f92:	4b6c      	ldr	r3, [pc, #432]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	23c0      	movs	r3, #192	; 0xc0
 8005f98:	039b      	lsls	r3, r3, #14
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	23c0      	movs	r3, #192	; 0xc0
 8005fa4:	039b      	lsls	r3, r3, #14
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d013      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	23c0      	movs	r3, #192	; 0xc0
 8005fb4:	029b      	lsls	r3, r3, #10
 8005fb6:	401a      	ands	r2, r3
 8005fb8:	23c0      	movs	r3, #192	; 0xc0
 8005fba:	029b      	lsls	r3, r3, #10
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d10a      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fc0:	4b60      	ldr	r3, [pc, #384]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	029b      	lsls	r3, r3, #10
 8005fc8:	401a      	ands	r2, r3
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	029b      	lsls	r3, r3, #10
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d101      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e0b1      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005fd6:	4b5b      	ldr	r3, [pc, #364]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fda:	23c0      	movs	r3, #192	; 0xc0
 8005fdc:	029b      	lsls	r3, r3, #10
 8005fde:	4013      	ands	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d03b      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	23c0      	movs	r3, #192	; 0xc0
 8005fee:	029b      	lsls	r3, r3, #10
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d033      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	4013      	ands	r3, r2
 8006000:	d02e      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006002:	4b50      	ldr	r3, [pc, #320]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006006:	4a51      	ldr	r2, [pc, #324]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8006008:	4013      	ands	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800600c:	4b4d      	ldr	r3, [pc, #308]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800600e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006010:	4b4c      	ldr	r3, [pc, #304]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006012:	2180      	movs	r1, #128	; 0x80
 8006014:	0309      	lsls	r1, r1, #12
 8006016:	430a      	orrs	r2, r1
 8006018:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800601a:	4b4a      	ldr	r3, [pc, #296]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800601c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800601e:	4b49      	ldr	r3, [pc, #292]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006020:	494b      	ldr	r1, [pc, #300]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006022:	400a      	ands	r2, r1
 8006024:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006026:	4b47      	ldr	r3, [pc, #284]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	2380      	movs	r3, #128	; 0x80
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	4013      	ands	r3, r2
 8006034:	d014      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006036:	f7fe fc43 	bl	80048c0 <HAL_GetTick>
 800603a:	0003      	movs	r3, r0
 800603c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800603e:	e009      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006040:	f7fe fc3e 	bl	80048c0 <HAL_GetTick>
 8006044:	0002      	movs	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	4a42      	ldr	r2, [pc, #264]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e072      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006054:	4b3b      	ldr	r3, [pc, #236]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4013      	ands	r3, r2
 800605e:	d0ef      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2220      	movs	r2, #32
 8006066:	4013      	ands	r3, r2
 8006068:	d01f      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	23c0      	movs	r3, #192	; 0xc0
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	401a      	ands	r2, r3
 8006074:	23c0      	movs	r3, #192	; 0xc0
 8006076:	029b      	lsls	r3, r3, #10
 8006078:	429a      	cmp	r2, r3
 800607a:	d10c      	bne.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800607c:	4b31      	ldr	r3, [pc, #196]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a35      	ldr	r2, [pc, #212]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006082:	4013      	ands	r3, r2
 8006084:	0019      	movs	r1, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	23c0      	movs	r3, #192	; 0xc0
 800608c:	039b      	lsls	r3, r3, #14
 800608e:	401a      	ands	r2, r3
 8006090:	4b2c      	ldr	r3, [pc, #176]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006092:	430a      	orrs	r2, r1
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006098:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	23c0      	movs	r3, #192	; 0xc0
 80060a0:	029b      	lsls	r3, r3, #10
 80060a2:	401a      	ands	r2, r3
 80060a4:	4b27      	ldr	r3, [pc, #156]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80060a6:	430a      	orrs	r2, r1
 80060a8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060aa:	2317      	movs	r3, #23
 80060ac:	18fb      	adds	r3, r7, r3
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d105      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b4:	4b23      	ldr	r3, [pc, #140]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80060b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b8:	4b22      	ldr	r3, [pc, #136]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80060ba:	4928      	ldr	r1, [pc, #160]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80060bc:	400a      	ands	r2, r1
 80060be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2202      	movs	r2, #2
 80060c6:	4013      	ands	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060ca:	4b1e      	ldr	r3, [pc, #120]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80060cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ce:	220c      	movs	r2, #12
 80060d0:	4393      	bics	r3, r2
 80060d2:	0019      	movs	r1, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80060da:	430a      	orrs	r2, r1
 80060dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2204      	movs	r2, #4
 80060e4:	4013      	ands	r3, r2
 80060e6:	d009      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060e8:	4b16      	ldr	r3, [pc, #88]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80060ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ec:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	0019      	movs	r1, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	4b13      	ldr	r3, [pc, #76]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80060f8:	430a      	orrs	r2, r1
 80060fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2208      	movs	r2, #8
 8006102:	4013      	ands	r3, r2
 8006104:	d009      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006106:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610a:	4a16      	ldr	r2, [pc, #88]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800610c:	4013      	ands	r3, r2
 800610e:	0019      	movs	r1, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691a      	ldr	r2, [r3, #16]
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006116:	430a      	orrs	r2, r1
 8006118:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2280      	movs	r2, #128	; 0x80
 8006120:	4013      	ands	r3, r2
 8006122:	d009      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006124:	4b07      	ldr	r3, [pc, #28]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006128:	4a0f      	ldr	r2, [pc, #60]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800612a:	4013      	ands	r3, r2
 800612c:	0019      	movs	r1, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	4b04      	ldr	r3, [pc, #16]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006134:	430a      	orrs	r2, r1
 8006136:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	b006      	add	sp, #24
 8006140:	bd80      	pop	{r7, pc}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	40021000 	.word	0x40021000
 8006148:	40007000 	.word	0x40007000
 800614c:	fffcffff 	.word	0xfffcffff
 8006150:	fff7ffff 	.word	0xfff7ffff
 8006154:	00001388 	.word	0x00001388
 8006158:	ffcfffff 	.word	0xffcfffff
 800615c:	efffffff 	.word	0xefffffff
 8006160:	fffff3ff 	.word	0xfffff3ff
 8006164:	ffffcfff 	.word	0xffffcfff
 8006168:	fff3ffff 	.word	0xfff3ffff

0800616c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e07b      	b.n	8006276 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	2382      	movs	r3, #130	; 0x82
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	429a      	cmp	r2, r3
 8006190:	d009      	beq.n	80061a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	61da      	str	r2, [r3, #28]
 8006198:	e005      	b.n	80061a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2251      	movs	r2, #81	; 0x51
 80061b0:	5c9b      	ldrb	r3, [r3, r2]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d107      	bne.n	80061c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2250      	movs	r2, #80	; 0x50
 80061bc:	2100      	movs	r1, #0
 80061be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	0018      	movs	r0, r3
 80061c4:	f7fe f99c 	bl	8004500 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2251      	movs	r2, #81	; 0x51
 80061cc:	2102      	movs	r1, #2
 80061ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2140      	movs	r1, #64	; 0x40
 80061dc:	438a      	bics	r2, r1
 80061de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	2382      	movs	r3, #130	; 0x82
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	401a      	ands	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6899      	ldr	r1, [r3, #8]
 80061ee:	2384      	movs	r3, #132	; 0x84
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	400b      	ands	r3, r1
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68d9      	ldr	r1, [r3, #12]
 80061fa:	2380      	movs	r3, #128	; 0x80
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	400b      	ands	r3, r1
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2102      	movs	r1, #2
 8006208:	400b      	ands	r3, r1
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	2101      	movs	r1, #1
 8006212:	400b      	ands	r3, r1
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6999      	ldr	r1, [r3, #24]
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	400b      	ands	r3, r1
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	2138      	movs	r1, #56	; 0x38
 8006228:	400b      	ands	r3, r1
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	2180      	movs	r1, #128	; 0x80
 8006232:	400b      	ands	r3, r1
 8006234:	431a      	orrs	r2, r3
 8006236:	0011      	movs	r1, r2
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	019b      	lsls	r3, r3, #6
 8006240:	401a      	ands	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	0c1b      	lsrs	r3, r3, #16
 8006250:	2204      	movs	r2, #4
 8006252:	4013      	ands	r3, r2
 8006254:	0019      	movs	r1, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	2210      	movs	r2, #16
 800625c:	401a      	ands	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2251      	movs	r2, #81	; 0x51
 8006270:	2101      	movs	r1, #1
 8006272:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	0018      	movs	r0, r3
 8006278:	46bd      	mov	sp, r7
 800627a:	b002      	add	sp, #8
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b088      	sub	sp, #32
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	1dbb      	adds	r3, r7, #6
 800628c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800628e:	231f      	movs	r3, #31
 8006290:	18fb      	adds	r3, r7, r3
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2250      	movs	r2, #80	; 0x50
 800629a:	5c9b      	ldrb	r3, [r3, r2]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_SPI_Transmit+0x26>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e145      	b.n	8006530 <HAL_SPI_Transmit+0x2b2>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2250      	movs	r2, #80	; 0x50
 80062a8:	2101      	movs	r1, #1
 80062aa:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ac:	f7fe fb08 	bl	80048c0 <HAL_GetTick>
 80062b0:	0003      	movs	r3, r0
 80062b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80062b4:	2316      	movs	r3, #22
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	1dba      	adds	r2, r7, #6
 80062ba:	8812      	ldrh	r2, [r2, #0]
 80062bc:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2251      	movs	r2, #81	; 0x51
 80062c2:	5c9b      	ldrb	r3, [r3, r2]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d004      	beq.n	80062d4 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80062ca:	231f      	movs	r3, #31
 80062cc:	18fb      	adds	r3, r7, r3
 80062ce:	2202      	movs	r2, #2
 80062d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80062d2:	e126      	b.n	8006522 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_SPI_Transmit+0x64>
 80062da:	1dbb      	adds	r3, r7, #6
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d104      	bne.n	80062ec <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80062e2:	231f      	movs	r3, #31
 80062e4:	18fb      	adds	r3, r7, r3
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80062ea:	e11a      	b.n	8006522 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2251      	movs	r2, #81	; 0x51
 80062f0:	2103      	movs	r1, #3
 80062f2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1dba      	adds	r2, r7, #6
 8006304:	8812      	ldrh	r2, [r2, #0]
 8006306:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1dba      	adds	r2, r7, #6
 800630c:	8812      	ldrh	r2, [r2, #0]
 800630e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	2380      	movs	r3, #128	; 0x80
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	429a      	cmp	r2, r3
 8006338:	d110      	bne.n	800635c <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2140      	movs	r1, #64	; 0x40
 8006346:	438a      	bics	r2, r1
 8006348:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2180      	movs	r1, #128	; 0x80
 8006356:	01c9      	lsls	r1, r1, #7
 8006358:	430a      	orrs	r2, r1
 800635a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2240      	movs	r2, #64	; 0x40
 8006364:	4013      	ands	r3, r2
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	d007      	beq.n	800637a <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2140      	movs	r1, #64	; 0x40
 8006376:	430a      	orrs	r2, r1
 8006378:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	2380      	movs	r3, #128	; 0x80
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	429a      	cmp	r2, r3
 8006384:	d152      	bne.n	800642c <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d004      	beq.n	8006398 <HAL_SPI_Transmit+0x11a>
 800638e:	2316      	movs	r3, #22
 8006390:	18fb      	adds	r3, r7, r3
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d143      	bne.n	8006420 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	881a      	ldrh	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	1c9a      	adds	r2, r3, #2
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063bc:	e030      	b.n	8006420 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2202      	movs	r2, #2
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d112      	bne.n	80063f2 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	881a      	ldrh	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	1c9a      	adds	r2, r3, #2
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80063f0:	e016      	b.n	8006420 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063f2:	f7fe fa65 	bl	80048c0 <HAL_GetTick>
 80063f6:	0002      	movs	r2, r0
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d802      	bhi.n	8006408 <HAL_SPI_Transmit+0x18a>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	d102      	bne.n	800640e <HAL_SPI_Transmit+0x190>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d108      	bne.n	8006420 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 800640e:	231f      	movs	r3, #31
 8006410:	18fb      	adds	r3, r7, r3
 8006412:	2203      	movs	r2, #3
 8006414:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2251      	movs	r2, #81	; 0x51
 800641a:	2101      	movs	r1, #1
 800641c:	5499      	strb	r1, [r3, r2]
          goto error;
 800641e:	e080      	b.n	8006522 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1c9      	bne.n	80063be <HAL_SPI_Transmit+0x140>
 800642a:	e053      	b.n	80064d4 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <HAL_SPI_Transmit+0x1c0>
 8006434:	2316      	movs	r3, #22
 8006436:	18fb      	adds	r3, r7, r3
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d145      	bne.n	80064ca <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	330c      	adds	r3, #12
 8006448:	7812      	ldrb	r2, [r2, #0]
 800644a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006464:	e031      	b.n	80064ca <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2202      	movs	r2, #2
 800646e:	4013      	ands	r3, r2
 8006470:	2b02      	cmp	r3, #2
 8006472:	d113      	bne.n	800649c <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	330c      	adds	r3, #12
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	86da      	strh	r2, [r3, #54]	; 0x36
 800649a:	e016      	b.n	80064ca <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800649c:	f7fe fa10 	bl	80048c0 <HAL_GetTick>
 80064a0:	0002      	movs	r2, r0
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d802      	bhi.n	80064b2 <HAL_SPI_Transmit+0x234>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	3301      	adds	r3, #1
 80064b0:	d102      	bne.n	80064b8 <HAL_SPI_Transmit+0x23a>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d108      	bne.n	80064ca <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 80064b8:	231f      	movs	r3, #31
 80064ba:	18fb      	adds	r3, r7, r3
 80064bc:	2203      	movs	r2, #3
 80064be:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2251      	movs	r2, #81	; 0x51
 80064c4:	2101      	movs	r1, #1
 80064c6:	5499      	strb	r1, [r3, r2]
          goto error;
 80064c8:	e02b      	b.n	8006522 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1c8      	bne.n	8006466 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	0018      	movs	r0, r3
 80064dc:	f000 fa86 	bl	80069ec <SPI_EndRxTxTransaction>
 80064e0:	1e03      	subs	r3, r0, #0
 80064e2:	d002      	beq.n	80064ea <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064f2:	2300      	movs	r3, #0
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650c:	2b00      	cmp	r3, #0
 800650e:	d004      	beq.n	800651a <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8006510:	231f      	movs	r3, #31
 8006512:	18fb      	adds	r3, r7, r3
 8006514:	2201      	movs	r2, #1
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	e003      	b.n	8006522 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2251      	movs	r2, #81	; 0x51
 800651e:	2101      	movs	r1, #1
 8006520:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2250      	movs	r2, #80	; 0x50
 8006526:	2100      	movs	r1, #0
 8006528:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800652a:	231f      	movs	r3, #31
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	781b      	ldrb	r3, [r3, #0]
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	b008      	add	sp, #32
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	; 0x30
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	001a      	movs	r2, r3
 8006546:	1cbb      	adds	r3, r7, #2
 8006548:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800654a:	2301      	movs	r3, #1
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800654e:	232b      	movs	r3, #43	; 0x2b
 8006550:	18fb      	adds	r3, r7, r3
 8006552:	2200      	movs	r2, #0
 8006554:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2250      	movs	r2, #80	; 0x50
 800655a:	5c9b      	ldrb	r3, [r3, r2]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_SPI_TransmitReceive+0x2c>
 8006560:	2302      	movs	r3, #2
 8006562:	e1b0      	b.n	80068c6 <HAL_SPI_TransmitReceive+0x38e>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2250      	movs	r2, #80	; 0x50
 8006568:	2101      	movs	r1, #1
 800656a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800656c:	f7fe f9a8 	bl	80048c0 <HAL_GetTick>
 8006570:	0003      	movs	r3, r0
 8006572:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006574:	2023      	movs	r0, #35	; 0x23
 8006576:	183b      	adds	r3, r7, r0
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	2151      	movs	r1, #81	; 0x51
 800657c:	5c52      	ldrb	r2, [r2, r1]
 800657e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006586:	231a      	movs	r3, #26
 8006588:	18fb      	adds	r3, r7, r3
 800658a:	1cba      	adds	r2, r7, #2
 800658c:	8812      	ldrh	r2, [r2, #0]
 800658e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006590:	183b      	adds	r3, r7, r0
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d011      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x84>
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	2382      	movs	r3, #130	; 0x82
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	429a      	cmp	r2, r3
 80065a0:	d107      	bne.n	80065b2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <HAL_SPI_TransmitReceive+0x7a>
 80065aa:	183b      	adds	r3, r7, r0
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d004      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80065b2:	232b      	movs	r3, #43	; 0x2b
 80065b4:	18fb      	adds	r3, r7, r3
 80065b6:	2202      	movs	r2, #2
 80065b8:	701a      	strb	r2, [r3, #0]
    goto error;
 80065ba:	e17d      	b.n	80068b8 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d006      	beq.n	80065d0 <HAL_SPI_TransmitReceive+0x98>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_SPI_TransmitReceive+0x98>
 80065c8:	1cbb      	adds	r3, r7, #2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d104      	bne.n	80065da <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80065d0:	232b      	movs	r3, #43	; 0x2b
 80065d2:	18fb      	adds	r3, r7, r3
 80065d4:	2201      	movs	r2, #1
 80065d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80065d8:	e16e      	b.n	80068b8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2251      	movs	r2, #81	; 0x51
 80065de:	5c9b      	ldrb	r3, [r3, r2]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d003      	beq.n	80065ee <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2251      	movs	r2, #81	; 0x51
 80065ea:	2105      	movs	r1, #5
 80065ec:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	1cba      	adds	r2, r7, #2
 80065fe:	8812      	ldrh	r2, [r2, #0]
 8006600:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	1cba      	adds	r2, r7, #2
 8006606:	8812      	ldrh	r2, [r2, #0]
 8006608:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	1cba      	adds	r2, r7, #2
 8006614:	8812      	ldrh	r2, [r2, #0]
 8006616:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	1cba      	adds	r2, r7, #2
 800661c:	8812      	ldrh	r2, [r2, #0]
 800661e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2240      	movs	r2, #64	; 0x40
 8006634:	4013      	ands	r3, r2
 8006636:	2b40      	cmp	r3, #64	; 0x40
 8006638:	d007      	beq.n	800664a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2140      	movs	r1, #64	; 0x40
 8006646:	430a      	orrs	r2, r1
 8006648:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	2380      	movs	r3, #128	; 0x80
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	429a      	cmp	r2, r3
 8006654:	d000      	beq.n	8006658 <HAL_SPI_TransmitReceive+0x120>
 8006656:	e07f      	b.n	8006758 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <HAL_SPI_TransmitReceive+0x134>
 8006660:	231a      	movs	r3, #26
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d000      	beq.n	800666c <HAL_SPI_TransmitReceive+0x134>
 800666a:	e06a      	b.n	8006742 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	881a      	ldrh	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	1c9a      	adds	r2, r3, #2
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006690:	e057      	b.n	8006742 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2202      	movs	r2, #2
 800669a:	4013      	ands	r3, r2
 800669c:	2b02      	cmp	r3, #2
 800669e:	d11b      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x1a0>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d016      	beq.n	80066d8 <HAL_SPI_TransmitReceive+0x1a0>
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d113      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	881a      	ldrh	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	1c9a      	adds	r2, r3, #2
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2201      	movs	r2, #1
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d119      	bne.n	800671a <HAL_SPI_TransmitReceive+0x1e2>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d014      	beq.n	800671a <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	b292      	uxth	r2, r2
 80066fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	1c9a      	adds	r2, r3, #2
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006716:	2301      	movs	r3, #1
 8006718:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800671a:	f7fe f8d1 	bl	80048c0 <HAL_GetTick>
 800671e:	0002      	movs	r2, r0
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006726:	429a      	cmp	r2, r3
 8006728:	d80b      	bhi.n	8006742 <HAL_SPI_TransmitReceive+0x20a>
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	3301      	adds	r3, #1
 800672e:	d008      	beq.n	8006742 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8006730:	232b      	movs	r3, #43	; 0x2b
 8006732:	18fb      	adds	r3, r7, r3
 8006734:	2203      	movs	r2, #3
 8006736:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2251      	movs	r2, #81	; 0x51
 800673c:	2101      	movs	r1, #1
 800673e:	5499      	strb	r1, [r3, r2]
        goto error;
 8006740:	e0ba      	b.n	80068b8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006746:	b29b      	uxth	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1a2      	bne.n	8006692 <HAL_SPI_TransmitReceive+0x15a>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006750:	b29b      	uxth	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d19d      	bne.n	8006692 <HAL_SPI_TransmitReceive+0x15a>
 8006756:	e083      	b.n	8006860 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_SPI_TransmitReceive+0x234>
 8006760:	231a      	movs	r3, #26
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d000      	beq.n	800676c <HAL_SPI_TransmitReceive+0x234>
 800676a:	e06f      	b.n	800684c <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	7812      	ldrb	r2, [r2, #0]
 8006778:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006792:	e05b      	b.n	800684c <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2202      	movs	r2, #2
 800679c:	4013      	ands	r3, r2
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d11c      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x2a4>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d017      	beq.n	80067dc <HAL_SPI_TransmitReceive+0x2a4>
 80067ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d114      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	7812      	ldrb	r2, [r2, #0]
 80067be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2201      	movs	r2, #1
 80067e4:	4013      	ands	r3, r2
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d119      	bne.n	800681e <HAL_SPI_TransmitReceive+0x2e6>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d014      	beq.n	800681e <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800681a:	2301      	movs	r3, #1
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800681e:	f7fe f84f 	bl	80048c0 <HAL_GetTick>
 8006822:	0002      	movs	r2, r0
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800682a:	429a      	cmp	r2, r3
 800682c:	d802      	bhi.n	8006834 <HAL_SPI_TransmitReceive+0x2fc>
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	3301      	adds	r3, #1
 8006832:	d102      	bne.n	800683a <HAL_SPI_TransmitReceive+0x302>
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	2b00      	cmp	r3, #0
 8006838:	d108      	bne.n	800684c <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800683a:	232b      	movs	r3, #43	; 0x2b
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	2203      	movs	r2, #3
 8006840:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2251      	movs	r2, #81	; 0x51
 8006846:	2101      	movs	r1, #1
 8006848:	5499      	strb	r1, [r3, r2]
        goto error;
 800684a:	e035      	b.n	80068b8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006850:	b29b      	uxth	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d19e      	bne.n	8006794 <HAL_SPI_TransmitReceive+0x25c>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d199      	bne.n	8006794 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	0018      	movs	r0, r3
 8006868:	f000 f8c0 	bl	80069ec <SPI_EndRxTxTransaction>
 800686c:	1e03      	subs	r3, r0, #0
 800686e:	d007      	beq.n	8006880 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8006870:	232b      	movs	r3, #43	; 0x2b
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	2201      	movs	r2, #1
 8006876:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2220      	movs	r2, #32
 800687c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800687e:	e01b      	b.n	80068b8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10a      	bne.n	800689e <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80068a6:	232b      	movs	r3, #43	; 0x2b
 80068a8:	18fb      	adds	r3, r7, r3
 80068aa:	2201      	movs	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e003      	b.n	80068b8 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2251      	movs	r2, #81	; 0x51
 80068b4:	2101      	movs	r1, #1
 80068b6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2250      	movs	r2, #80	; 0x50
 80068bc:	2100      	movs	r1, #0
 80068be:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80068c0:	232b      	movs	r3, #43	; 0x2b
 80068c2:	18fb      	adds	r3, r7, r3
 80068c4:	781b      	ldrb	r3, [r3, #0]
}
 80068c6:	0018      	movs	r0, r3
 80068c8:	46bd      	mov	sp, r7
 80068ca:	b00c      	add	sp, #48	; 0x30
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	1dfb      	adds	r3, r7, #7
 80068de:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068e0:	f7fd ffee 	bl	80048c0 <HAL_GetTick>
 80068e4:	0002      	movs	r2, r0
 80068e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	18d3      	adds	r3, r2, r3
 80068ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068f0:	f7fd ffe6 	bl	80048c0 <HAL_GetTick>
 80068f4:	0003      	movs	r3, r0
 80068f6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068f8:	4b3a      	ldr	r3, [pc, #232]	; (80069e4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	015b      	lsls	r3, r3, #5
 80068fe:	0d1b      	lsrs	r3, r3, #20
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	4353      	muls	r3, r2
 8006904:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006906:	e058      	b.n	80069ba <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	3301      	adds	r3, #1
 800690c:	d055      	beq.n	80069ba <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800690e:	f7fd ffd7 	bl	80048c0 <HAL_GetTick>
 8006912:	0002      	movs	r2, r0
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	429a      	cmp	r2, r3
 800691c:	d902      	bls.n	8006924 <SPI_WaitFlagStateUntilTimeout+0x54>
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d142      	bne.n	80069aa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	21e0      	movs	r1, #224	; 0xe0
 8006930:	438a      	bics	r2, r1
 8006932:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	2382      	movs	r3, #130	; 0x82
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	429a      	cmp	r2, r3
 800693e:	d113      	bne.n	8006968 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	2380      	movs	r3, #128	; 0x80
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	429a      	cmp	r2, r3
 800694a:	d005      	beq.n	8006958 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	2380      	movs	r3, #128	; 0x80
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	429a      	cmp	r2, r3
 8006956:	d107      	bne.n	8006968 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2140      	movs	r1, #64	; 0x40
 8006964:	438a      	bics	r2, r1
 8006966:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800696c:	2380      	movs	r3, #128	; 0x80
 800696e:	019b      	lsls	r3, r3, #6
 8006970:	429a      	cmp	r2, r3
 8006972:	d110      	bne.n	8006996 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	491a      	ldr	r1, [pc, #104]	; (80069e8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006980:	400a      	ands	r2, r1
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2180      	movs	r1, #128	; 0x80
 8006990:	0189      	lsls	r1, r1, #6
 8006992:	430a      	orrs	r2, r1
 8006994:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2251      	movs	r2, #81	; 0x51
 800699a:	2101      	movs	r1, #1
 800699c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2250      	movs	r2, #80	; 0x50
 80069a2:	2100      	movs	r1, #0
 80069a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e017      	b.n	80069da <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	4013      	ands	r3, r2
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	425a      	negs	r2, r3
 80069ca:	4153      	adcs	r3, r2
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	001a      	movs	r2, r3
 80069d0:	1dfb      	adds	r3, r7, #7
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d197      	bne.n	8006908 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	0018      	movs	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	b008      	add	sp, #32
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	20000004 	.word	0x20000004
 80069e8:	ffffdfff 	.word	0xffffdfff

080069ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069f8:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <SPI_EndRxTxTransaction+0x84>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	491d      	ldr	r1, [pc, #116]	; (8006a74 <SPI_EndRxTxTransaction+0x88>)
 80069fe:	0018      	movs	r0, r3
 8006a00:	f7f9 fb9e 	bl	8000140 <__udivsi3>
 8006a04:	0003      	movs	r3, r0
 8006a06:	001a      	movs	r2, r3
 8006a08:	0013      	movs	r3, r2
 8006a0a:	015b      	lsls	r3, r3, #5
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	189b      	adds	r3, r3, r2
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	2382      	movs	r3, #130	; 0x82
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d112      	bne.n	8006a48 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	0013      	movs	r3, r2
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2180      	movs	r1, #128	; 0x80
 8006a30:	f7ff ff4e 	bl	80068d0 <SPI_WaitFlagStateUntilTimeout>
 8006a34:	1e03      	subs	r3, r0, #0
 8006a36:	d016      	beq.n	8006a66 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e00f      	b.n	8006a68 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	3b01      	subs	r3, #1
 8006a52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	2280      	movs	r2, #128	; 0x80
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	2b80      	cmp	r3, #128	; 0x80
 8006a60:	d0f2      	beq.n	8006a48 <SPI_EndRxTxTransaction+0x5c>
 8006a62:	e000      	b.n	8006a66 <SPI_EndRxTxTransaction+0x7a>
        break;
 8006a64:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	0018      	movs	r0, r3
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	b006      	add	sp, #24
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20000004 	.word	0x20000004
 8006a74:	016e3600 	.word	0x016e3600

08006a78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a7c:	4a06      	ldr	r2, [pc, #24]	; (8006a98 <MX_FATFS_Init+0x20>)
 8006a7e:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <MX_FATFS_Init+0x24>)
 8006a80:	0011      	movs	r1, r2
 8006a82:	0018      	movs	r0, r3
 8006a84:	f003 fb2a 	bl	800a0dc <FATFS_LinkDriver>
 8006a88:	0003      	movs	r3, r0
 8006a8a:	001a      	movs	r2, r3
 8006a8c:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <MX_FATFS_Init+0x28>)
 8006a8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006a90:	46c0      	nop			; (mov r8, r8)
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	20000354 	.word	0x20000354
 8006a9c:	20000010 	.word	0x20000010
 8006aa0:	20000350 	.word	0x20000350

08006aa4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006aa8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006aaa:	0018      	movs	r0, r3
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	0002      	movs	r2, r0
 8006ab8:	1dfb      	adds	r3, r7, #7
 8006aba:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006abc:	1dfb      	adds	r3, r7, #7
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f7fc fc9b 	bl	80033fc <SD_disk_initialize>
 8006ac6:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8006ac8:	0018      	movs	r0, r3
 8006aca:	46bd      	mov	sp, r7
 8006acc:	b002      	add	sp, #8
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	0002      	movs	r2, r0
 8006ad8:	1dfb      	adds	r3, r7, #7
 8006ada:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006adc:	1dfb      	adds	r3, r7, #7
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f7fc fd95 	bl	8003610 <SD_disk_status>
 8006ae6:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8006ae8:	0018      	movs	r0, r3
 8006aea:	46bd      	mov	sp, r7
 8006aec:	b002      	add	sp, #8
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006af0:	b5b0      	push	{r4, r5, r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	250f      	movs	r5, #15
 8006afe:	197b      	adds	r3, r7, r5
 8006b00:	1c02      	adds	r2, r0, #0
 8006b02:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006b04:	683c      	ldr	r4, [r7, #0]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	197b      	adds	r3, r7, r5
 8006b0c:	7818      	ldrb	r0, [r3, #0]
 8006b0e:	0023      	movs	r3, r4
 8006b10:	f7fc fd94 	bl	800363c <SD_disk_read>
 8006b14:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8006b16:	0018      	movs	r0, r3
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b004      	add	sp, #16
 8006b1c:	bdb0      	pop	{r4, r5, r7, pc}

08006b1e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006b1e:	b5b0      	push	{r4, r5, r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
 8006b2a:	250f      	movs	r5, #15
 8006b2c:	197b      	adds	r3, r7, r5
 8006b2e:	1c02      	adds	r2, r0, #0
 8006b30:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006b32:	683c      	ldr	r4, [r7, #0]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	197b      	adds	r3, r7, r5
 8006b3a:	7818      	ldrb	r0, [r3, #0]
 8006b3c:	0023      	movs	r3, r4
 8006b3e:	f7fc fded 	bl	800371c <SD_disk_write>
 8006b42:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8006b44:	0018      	movs	r0, r3
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b004      	add	sp, #16
 8006b4a:	bdb0      	pop	{r4, r5, r7, pc}

08006b4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	603a      	str	r2, [r7, #0]
 8006b54:	1dfb      	adds	r3, r7, #7
 8006b56:	1c02      	adds	r2, r0, #0
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	1dbb      	adds	r3, r7, #6
 8006b5c:	1c0a      	adds	r2, r1, #0
 8006b5e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	1dbb      	adds	r3, r7, #6
 8006b64:	7819      	ldrb	r1, [r3, #0]
 8006b66:	1dfb      	adds	r3, r7, #7
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	f7fc fe5e 	bl	800382c <SD_disk_ioctl>
 8006b70:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8006b72:	0018      	movs	r0, r3
 8006b74:	46bd      	mov	sp, r7
 8006b76:	b002      	add	sp, #8
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006b7c:	b5b0      	push	{r4, r5, r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	0002      	movs	r2, r0
 8006b84:	1dfb      	adds	r3, r7, #7
 8006b86:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006b88:	1dfb      	adds	r3, r7, #7
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	4a0b      	ldr	r2, [pc, #44]	; (8006bbc <disk_status+0x40>)
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	18d3      	adds	r3, r2, r3
 8006b92:	3304      	adds	r3, #4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	1dfa      	adds	r2, r7, #7
 8006b9a:	7812      	ldrb	r2, [r2, #0]
 8006b9c:	4907      	ldr	r1, [pc, #28]	; (8006bbc <disk_status+0x40>)
 8006b9e:	188a      	adds	r2, r1, r2
 8006ba0:	7a12      	ldrb	r2, [r2, #8]
 8006ba2:	250f      	movs	r5, #15
 8006ba4:	197c      	adds	r4, r7, r5
 8006ba6:	0010      	movs	r0, r2
 8006ba8:	4798      	blx	r3
 8006baa:	0003      	movs	r3, r0
 8006bac:	7023      	strb	r3, [r4, #0]
  return stat;
 8006bae:	197b      	adds	r3, r7, r5
 8006bb0:	781b      	ldrb	r3, [r3, #0]
}
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	b004      	add	sp, #16
 8006bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8006bba:	46c0      	nop			; (mov r8, r8)
 8006bbc:	20000580 	.word	0x20000580

08006bc0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006bc0:	b590      	push	{r4, r7, lr}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	0002      	movs	r2, r0
 8006bc8:	1dfb      	adds	r3, r7, #7
 8006bca:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8006bcc:	200f      	movs	r0, #15
 8006bce:	183b      	adds	r3, r7, r0
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 8006bd4:	1dfb      	adds	r3, r7, #7
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	4a10      	ldr	r2, [pc, #64]	; (8006c1c <disk_initialize+0x5c>)
 8006bda:	5cd3      	ldrb	r3, [r2, r3]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d116      	bne.n	8006c0e <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 8006be0:	1dfb      	adds	r3, r7, #7
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	4a0d      	ldr	r2, [pc, #52]	; (8006c1c <disk_initialize+0x5c>)
 8006be6:	2101      	movs	r1, #1
 8006be8:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006bea:	1dfb      	adds	r3, r7, #7
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	4a0b      	ldr	r2, [pc, #44]	; (8006c1c <disk_initialize+0x5c>)
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	18d3      	adds	r3, r2, r3
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	1dfa      	adds	r2, r7, #7
 8006bfc:	7812      	ldrb	r2, [r2, #0]
 8006bfe:	4907      	ldr	r1, [pc, #28]	; (8006c1c <disk_initialize+0x5c>)
 8006c00:	188a      	adds	r2, r1, r2
 8006c02:	7a12      	ldrb	r2, [r2, #8]
 8006c04:	183c      	adds	r4, r7, r0
 8006c06:	0010      	movs	r0, r2
 8006c08:	4798      	blx	r3
 8006c0a:	0003      	movs	r3, r0
 8006c0c:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8006c0e:	230f      	movs	r3, #15
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	781b      	ldrb	r3, [r3, #0]
}
 8006c14:	0018      	movs	r0, r3
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b005      	add	sp, #20
 8006c1a:	bd90      	pop	{r4, r7, pc}
 8006c1c:	20000580 	.word	0x20000580

08006c20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	210f      	movs	r1, #15
 8006c2e:	187b      	adds	r3, r7, r1
 8006c30:	1c02      	adds	r2, r0, #0
 8006c32:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006c34:	187b      	adds	r3, r7, r1
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	4a0c      	ldr	r2, [pc, #48]	; (8006c6c <disk_read+0x4c>)
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	18d3      	adds	r3, r2, r3
 8006c3e:	3304      	adds	r3, #4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689d      	ldr	r5, [r3, #8]
 8006c44:	187b      	adds	r3, r7, r1
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	4a08      	ldr	r2, [pc, #32]	; (8006c6c <disk_read+0x4c>)
 8006c4a:	18d3      	adds	r3, r2, r3
 8006c4c:	7a18      	ldrb	r0, [r3, #8]
 8006c4e:	2617      	movs	r6, #23
 8006c50:	19bc      	adds	r4, r7, r6
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	47a8      	blx	r5
 8006c5a:	0003      	movs	r3, r0
 8006c5c:	7023      	strb	r3, [r4, #0]
  return res;
 8006c5e:	19bb      	adds	r3, r7, r6
 8006c60:	781b      	ldrb	r3, [r3, #0]
}
 8006c62:	0018      	movs	r0, r3
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b007      	add	sp, #28
 8006c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	20000580 	.word	0x20000580

08006c70 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	210f      	movs	r1, #15
 8006c7e:	187b      	adds	r3, r7, r1
 8006c80:	1c02      	adds	r2, r0, #0
 8006c82:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c84:	187b      	adds	r3, r7, r1
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	4a0c      	ldr	r2, [pc, #48]	; (8006cbc <disk_write+0x4c>)
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	18d3      	adds	r3, r2, r3
 8006c8e:	3304      	adds	r3, #4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68dd      	ldr	r5, [r3, #12]
 8006c94:	187b      	adds	r3, r7, r1
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	4a08      	ldr	r2, [pc, #32]	; (8006cbc <disk_write+0x4c>)
 8006c9a:	18d3      	adds	r3, r2, r3
 8006c9c:	7a18      	ldrb	r0, [r3, #8]
 8006c9e:	2617      	movs	r6, #23
 8006ca0:	19bc      	adds	r4, r7, r6
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	68b9      	ldr	r1, [r7, #8]
 8006ca8:	47a8      	blx	r5
 8006caa:	0003      	movs	r3, r0
 8006cac:	7023      	strb	r3, [r4, #0]
  return res;
 8006cae:	19bb      	adds	r3, r7, r6
 8006cb0:	781b      	ldrb	r3, [r3, #0]
}
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	b007      	add	sp, #28
 8006cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	20000580 	.word	0x20000580

08006cc0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	603a      	str	r2, [r7, #0]
 8006cc8:	1dfb      	adds	r3, r7, #7
 8006cca:	1c02      	adds	r2, r0, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	1dbb      	adds	r3, r7, #6
 8006cd0:	1c0a      	adds	r2, r1, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006cd4:	1dfb      	adds	r3, r7, #7
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	4a0c      	ldr	r2, [pc, #48]	; (8006d0c <disk_ioctl+0x4c>)
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	18d3      	adds	r3, r2, r3
 8006cde:	3304      	adds	r3, #4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	1dfa      	adds	r2, r7, #7
 8006ce6:	7812      	ldrb	r2, [r2, #0]
 8006ce8:	4908      	ldr	r1, [pc, #32]	; (8006d0c <disk_ioctl+0x4c>)
 8006cea:	188a      	adds	r2, r1, r2
 8006cec:	7a10      	ldrb	r0, [r2, #8]
 8006cee:	260f      	movs	r6, #15
 8006cf0:	19bc      	adds	r4, r7, r6
 8006cf2:	683d      	ldr	r5, [r7, #0]
 8006cf4:	1dba      	adds	r2, r7, #6
 8006cf6:	7811      	ldrb	r1, [r2, #0]
 8006cf8:	002a      	movs	r2, r5
 8006cfa:	4798      	blx	r3
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	7023      	strb	r3, [r4, #0]
  return res;
 8006d00:	19bb      	adds	r3, r7, r6
 8006d02:	781b      	ldrb	r3, [r3, #0]
}
 8006d04:	0018      	movs	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b005      	add	sp, #20
 8006d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d0c:	20000580 	.word	0x20000580

08006d10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	781a      	ldrb	r2, [r3, #0]
 8006d1e:	210e      	movs	r1, #14
 8006d20:	187b      	adds	r3, r7, r1
 8006d22:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8006d24:	187b      	adds	r3, r7, r1
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	b21a      	sxth	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	b21b      	sxth	r3, r3
 8006d32:	4313      	orrs	r3, r2
 8006d34:	b21a      	sxth	r2, r3
 8006d36:	187b      	adds	r3, r7, r1
 8006d38:	801a      	strh	r2, [r3, #0]
	return rv;
 8006d3a:	187b      	adds	r3, r7, r1
 8006d3c:	881b      	ldrh	r3, [r3, #0]
}
 8006d3e:	0018      	movs	r0, r3
 8006d40:	46bd      	mov	sp, r7
 8006d42:	b004      	add	sp, #16
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3303      	adds	r3, #3
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	3202      	adds	r2, #2
 8006d5e:	7812      	ldrb	r2, [r2, #0]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	3201      	adds	r2, #1
 8006d6c:	7812      	ldrb	r2, [r2, #0]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
	return rv;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
}
 8006d80:	0018      	movs	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b004      	add	sp, #16
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	000a      	movs	r2, r1
 8006d92:	1cbb      	adds	r3, r7, #2
 8006d94:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	1cba      	adds	r2, r7, #2
 8006d9e:	8812      	ldrh	r2, [r2, #0]
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	1cbb      	adds	r3, r7, #2
 8006da6:	1cba      	adds	r2, r7, #2
 8006da8:	8812      	ldrh	r2, [r2, #0]
 8006daa:	0a12      	lsrs	r2, r2, #8
 8006dac:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	1cba      	adds	r2, r7, #2
 8006db6:	8812      	ldrh	r2, [r2, #0]
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]
}
 8006dbc:	46c0      	nop			; (mov r8, r8)
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	b002      	add	sp, #8
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	0a1b      	lsrs	r3, r3, #8
 8006dde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	0a1b      	lsrs	r3, r3, #8
 8006df0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	0a1b      	lsrs	r3, r3, #8
 8006e02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]
}
 8006e10:	46c0      	nop			; (mov r8, r8)
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b002      	add	sp, #8
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00d      	beq.n	8006e4e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	1c53      	adds	r3, r2, #1
 8006e36:	613b      	str	r3, [r7, #16]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	1c59      	adds	r1, r3, #1
 8006e3c:	6179      	str	r1, [r7, #20]
 8006e3e:	7812      	ldrb	r2, [r2, #0]
 8006e40:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	607b      	str	r3, [r7, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f1      	bne.n	8006e32 <mem_cpy+0x1a>
	}
}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	46bd      	mov	sp, r7
 8006e52:	b006      	add	sp, #24
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b086      	sub	sp, #24
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	617a      	str	r2, [r7, #20]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	607b      	str	r3, [r7, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f3      	bne.n	8006e66 <mem_set+0x10>
}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	46c0      	nop			; (mov r8, r8)
 8006e82:	46bd      	mov	sp, r7
 8006e84:	b006      	add	sp, #24
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	61fa      	str	r2, [r7, #28]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	0019      	movs	r1, r3
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	61ba      	str	r2, [r7, #24]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	1acb      	subs	r3, r1, r3
 8006eb4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	607b      	str	r3, [r7, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <mem_cmp+0x40>
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0eb      	beq.n	8006ea0 <mem_cmp+0x18>

	return r;
 8006ec8:	697b      	ldr	r3, [r7, #20]
}
 8006eca:	0018      	movs	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b008      	add	sp, #32
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006edc:	e002      	b.n	8006ee4 <chk_chr+0x12>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	607b      	str	r3, [r7, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d005      	beq.n	8006ef8 <chk_chr+0x26>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	001a      	movs	r2, r3
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d1f2      	bne.n	8006ede <chk_chr+0xc>
	return *str;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	781b      	ldrb	r3, [r3, #0]
}
 8006efc:	0018      	movs	r0, r3
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b002      	add	sp, #8
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	e027      	b.n	8006f68 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8006f18:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <chk_lock+0xac>)
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	0112      	lsls	r2, r2, #4
 8006f1e:	58d3      	ldr	r3, [r2, r3]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01c      	beq.n	8006f5e <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f24:	4b22      	ldr	r3, [pc, #136]	; (8006fb0 <chk_lock+0xac>)
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	0112      	lsls	r2, r2, #4
 8006f2a:	58d2      	ldr	r2, [r2, r3]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d116      	bne.n	8006f62 <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8006f34:	4a1e      	ldr	r2, [pc, #120]	; (8006fb0 <chk_lock+0xac>)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	18d3      	adds	r3, r2, r3
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d10c      	bne.n	8006f62 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006f48:	4a19      	ldr	r2, [pc, #100]	; (8006fb0 <chk_lock+0xac>)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	18d3      	adds	r3, r2, r3
 8006f50:	3308      	adds	r3, #8
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d102      	bne.n	8006f62 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006f5c:	e007      	b.n	8006f6e <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d9d4      	bls.n	8006f18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d109      	bne.n	8006f88 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d102      	bne.n	8006f80 <chk_lock+0x7c>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d101      	bne.n	8006f84 <chk_lock+0x80>
 8006f80:	2300      	movs	r3, #0
 8006f82:	e011      	b.n	8006fa8 <chk_lock+0xa4>
 8006f84:	2312      	movs	r3, #18
 8006f86:	e00f      	b.n	8006fa8 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <chk_lock+0x9e>
 8006f8e:	4a08      	ldr	r2, [pc, #32]	; (8006fb0 <chk_lock+0xac>)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	18d3      	adds	r3, r2, r3
 8006f96:	330c      	adds	r3, #12
 8006f98:	881a      	ldrh	r2, [r3, #0]
 8006f9a:	2380      	movs	r3, #128	; 0x80
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d101      	bne.n	8006fa6 <chk_lock+0xa2>
 8006fa2:	2310      	movs	r3, #16
 8006fa4:	e000      	b.n	8006fa8 <chk_lock+0xa4>
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	0018      	movs	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	b004      	add	sp, #16
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20000360 	.word	0x20000360

08006fb4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	607b      	str	r3, [r7, #4]
 8006fbe:	e002      	b.n	8006fc6 <enq_lock+0x12>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d805      	bhi.n	8006fd8 <enq_lock+0x24>
 8006fcc:	4b07      	ldr	r3, [pc, #28]	; (8006fec <enq_lock+0x38>)
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	0112      	lsls	r2, r2, #4
 8006fd2:	58d3      	ldr	r3, [r2, r3]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1f3      	bne.n	8006fc0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3b02      	subs	r3, #2
 8006fdc:	1e5a      	subs	r2, r3, #1
 8006fde:	4193      	sbcs	r3, r2
 8006fe0:	b2db      	uxtb	r3, r3
}
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b002      	add	sp, #8
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	46c0      	nop			; (mov r8, r8)
 8006fec:	20000360 	.word	0x20000360

08006ff0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	e01e      	b.n	800703e <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8007000:	4b3f      	ldr	r3, [pc, #252]	; (8007100 <inc_lock+0x110>)
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	0112      	lsls	r2, r2, #4
 8007006:	58d2      	ldr	r2, [r2, r3]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d113      	bne.n	8007038 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8007010:	4a3b      	ldr	r2, [pc, #236]	; (8007100 <inc_lock+0x110>)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	18d3      	adds	r3, r2, r3
 8007018:	3304      	adds	r3, #4
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007020:	429a      	cmp	r2, r3
 8007022:	d109      	bne.n	8007038 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8007024:	4a36      	ldr	r2, [pc, #216]	; (8007100 <inc_lock+0x110>)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	18d3      	adds	r3, r2, r3
 800702c:	3308      	adds	r3, #8
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007034:	429a      	cmp	r2, r3
 8007036:	d006      	beq.n	8007046 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3301      	adds	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d9dd      	bls.n	8007000 <inc_lock+0x10>
 8007044:	e000      	b.n	8007048 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8007046:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b02      	cmp	r3, #2
 800704c:	d130      	bne.n	80070b0 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	e002      	b.n	800705a <inc_lock+0x6a>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d805      	bhi.n	800706c <inc_lock+0x7c>
 8007060:	4b27      	ldr	r3, [pc, #156]	; (8007100 <inc_lock+0x110>)
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	0112      	lsls	r2, r2, #4
 8007066:	58d3      	ldr	r3, [r2, r3]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1f3      	bne.n	8007054 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b02      	cmp	r3, #2
 8007070:	d101      	bne.n	8007076 <inc_lock+0x86>
 8007072:	2300      	movs	r3, #0
 8007074:	e03f      	b.n	80070f6 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6819      	ldr	r1, [r3, #0]
 800707a:	4b21      	ldr	r3, [pc, #132]	; (8007100 <inc_lock+0x110>)
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	0112      	lsls	r2, r2, #4
 8007080:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	491e      	ldr	r1, [pc, #120]	; (8007100 <inc_lock+0x110>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	18cb      	adds	r3, r1, r3
 800708e:	3304      	adds	r3, #4
 8007090:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695a      	ldr	r2, [r3, #20]
 8007096:	491a      	ldr	r1, [pc, #104]	; (8007100 <inc_lock+0x110>)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	011b      	lsls	r3, r3, #4
 800709c:	18cb      	adds	r3, r1, r3
 800709e:	3308      	adds	r3, #8
 80070a0:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80070a2:	4a17      	ldr	r2, [pc, #92]	; (8007100 <inc_lock+0x110>)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	18d3      	adds	r3, r2, r3
 80070aa:	330c      	adds	r3, #12
 80070ac:	2200      	movs	r2, #0
 80070ae:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <inc_lock+0xda>
 80070b6:	4a12      	ldr	r2, [pc, #72]	; (8007100 <inc_lock+0x110>)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	18d3      	adds	r3, r2, r3
 80070be:	330c      	adds	r3, #12
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <inc_lock+0xda>
 80070c6:	2300      	movs	r3, #0
 80070c8:	e015      	b.n	80070f6 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d108      	bne.n	80070e2 <inc_lock+0xf2>
 80070d0:	4a0b      	ldr	r2, [pc, #44]	; (8007100 <inc_lock+0x110>)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	18d3      	adds	r3, r2, r3
 80070d8:	330c      	adds	r3, #12
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	3301      	adds	r3, #1
 80070de:	b29b      	uxth	r3, r3
 80070e0:	e001      	b.n	80070e6 <inc_lock+0xf6>
 80070e2:	2380      	movs	r3, #128	; 0x80
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	4906      	ldr	r1, [pc, #24]	; (8007100 <inc_lock+0x110>)
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	0112      	lsls	r2, r2, #4
 80070ec:	188a      	adds	r2, r1, r2
 80070ee:	320c      	adds	r2, #12
 80070f0:	8013      	strh	r3, [r2, #0]

	return i + 1;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3301      	adds	r3, #1
}
 80070f6:	0018      	movs	r0, r3
 80070f8:	46bd      	mov	sp, r7
 80070fa:	b004      	add	sp, #16
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	20000360 	.word	0x20000360

08007104 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3b01      	subs	r3, #1
 8007110:	607b      	str	r3, [r7, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d832      	bhi.n	800717e <dec_lock+0x7a>
		n = Files[i].ctr;
 8007118:	200e      	movs	r0, #14
 800711a:	183b      	adds	r3, r7, r0
 800711c:	491d      	ldr	r1, [pc, #116]	; (8007194 <dec_lock+0x90>)
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	0112      	lsls	r2, r2, #4
 8007122:	188a      	adds	r2, r1, r2
 8007124:	320c      	adds	r2, #12
 8007126:	8812      	ldrh	r2, [r2, #0]
 8007128:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800712a:	183b      	adds	r3, r7, r0
 800712c:	881a      	ldrh	r2, [r3, #0]
 800712e:	2380      	movs	r3, #128	; 0x80
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	429a      	cmp	r2, r3
 8007134:	d102      	bne.n	800713c <dec_lock+0x38>
 8007136:	183b      	adds	r3, r7, r0
 8007138:	2200      	movs	r2, #0
 800713a:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 800713c:	210e      	movs	r1, #14
 800713e:	187b      	adds	r3, r7, r1
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d004      	beq.n	8007150 <dec_lock+0x4c>
 8007146:	187b      	adds	r3, r7, r1
 8007148:	881a      	ldrh	r2, [r3, #0]
 800714a:	187b      	adds	r3, r7, r1
 800714c:	3a01      	subs	r2, #1
 800714e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8007150:	4a10      	ldr	r2, [pc, #64]	; (8007194 <dec_lock+0x90>)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	18d3      	adds	r3, r2, r3
 8007158:	330c      	adds	r3, #12
 800715a:	210e      	movs	r1, #14
 800715c:	187a      	adds	r2, r7, r1
 800715e:	8812      	ldrh	r2, [r2, #0]
 8007160:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007162:	187b      	adds	r3, r7, r1
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <dec_lock+0x70>
 800716a:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <dec_lock+0x90>)
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	0112      	lsls	r2, r2, #4
 8007170:	2100      	movs	r1, #0
 8007172:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8007174:	230d      	movs	r3, #13
 8007176:	18fb      	adds	r3, r7, r3
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	e003      	b.n	8007186 <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800717e:	230d      	movs	r3, #13
 8007180:	18fb      	adds	r3, r7, r3
 8007182:	2202      	movs	r2, #2
 8007184:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8007186:	230d      	movs	r3, #13
 8007188:	18fb      	adds	r3, r7, r3
 800718a:	781b      	ldrb	r3, [r3, #0]
}
 800718c:	0018      	movs	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	b004      	add	sp, #16
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20000360 	.word	0x20000360

08007198 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	e00e      	b.n	80071c4 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80071a6:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <clear_lock+0x3c>)
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	0112      	lsls	r2, r2, #4
 80071ac:	58d3      	ldr	r3, [r2, r3]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d104      	bne.n	80071be <clear_lock+0x26>
 80071b4:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <clear_lock+0x3c>)
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	0112      	lsls	r2, r2, #4
 80071ba:	2100      	movs	r1, #0
 80071bc:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3301      	adds	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d9ed      	bls.n	80071a6 <clear_lock+0xe>
	}
}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	46c0      	nop			; (mov r8, r8)
 80071ce:	46bd      	mov	sp, r7
 80071d0:	b004      	add	sp, #16
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20000360 	.word	0x20000360

080071d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80071d8:	b590      	push	{r4, r7, lr}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80071e0:	240f      	movs	r4, #15
 80071e2:	193b      	adds	r3, r7, r4
 80071e4:	2200      	movs	r2, #0
 80071e6:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	78db      	ldrb	r3, [r3, #3]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d034      	beq.n	800725a <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	7858      	ldrb	r0, [r3, #1]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3338      	adds	r3, #56	; 0x38
 80071fe:	0019      	movs	r1, r3
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	2301      	movs	r3, #1
 8007204:	f7ff fd34 	bl	8006c70 <disk_write>
 8007208:	1e03      	subs	r3, r0, #0
 800720a:	d003      	beq.n	8007214 <sync_window+0x3c>
			res = FR_DISK_ERR;
 800720c:	193b      	adds	r3, r7, r4
 800720e:	2201      	movs	r2, #1
 8007210:	701a      	strb	r2, [r3, #0]
 8007212:	e022      	b.n	800725a <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	1ad2      	subs	r2, r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	429a      	cmp	r2, r3
 8007228:	d217      	bcs.n	800725a <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	789b      	ldrb	r3, [r3, #2]
 800722e:	613b      	str	r3, [r7, #16]
 8007230:	e010      	b.n	8007254 <sync_window+0x7c>
					wsect += fs->fsize;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	18d3      	adds	r3, r2, r3
 800723a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	7858      	ldrb	r0, [r3, #1]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3338      	adds	r3, #56	; 0x38
 8007244:	0019      	movs	r1, r3
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	2301      	movs	r3, #1
 800724a:	f7ff fd11 	bl	8006c70 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	3b01      	subs	r3, #1
 8007252:	613b      	str	r3, [r7, #16]
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d8eb      	bhi.n	8007232 <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 800725a:	230f      	movs	r3, #15
 800725c:	18fb      	adds	r3, r7, r3
 800725e:	781b      	ldrb	r3, [r3, #0]
}
 8007260:	0018      	movs	r0, r3
 8007262:	46bd      	mov	sp, r7
 8007264:	b007      	add	sp, #28
 8007266:	bd90      	pop	{r4, r7, pc}

08007268 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007268:	b5b0      	push	{r4, r5, r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007272:	250f      	movs	r5, #15
 8007274:	197b      	adds	r3, r7, r5
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d01f      	beq.n	80072c4 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007284:	197c      	adds	r4, r7, r5
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	0018      	movs	r0, r3
 800728a:	f7ff ffa5 	bl	80071d8 <sync_window>
 800728e:	0003      	movs	r3, r0
 8007290:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007292:	002c      	movs	r4, r5
 8007294:	193b      	adds	r3, r7, r4
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d113      	bne.n	80072c4 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	7858      	ldrb	r0, [r3, #1]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3338      	adds	r3, #56	; 0x38
 80072a4:	0019      	movs	r1, r3
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	2301      	movs	r3, #1
 80072aa:	f7ff fcb9 	bl	8006c20 <disk_read>
 80072ae:	1e03      	subs	r3, r0, #0
 80072b0:	d005      	beq.n	80072be <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80072b2:	2301      	movs	r3, #1
 80072b4:	425b      	negs	r3, r3
 80072b6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80072b8:	193b      	adds	r3, r7, r4
 80072ba:	2201      	movs	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80072c4:	230f      	movs	r3, #15
 80072c6:	18fb      	adds	r3, r7, r3
 80072c8:	781b      	ldrb	r3, [r3, #0]
}
 80072ca:	0018      	movs	r0, r3
 80072cc:	46bd      	mov	sp, r7
 80072ce:	b004      	add	sp, #16
 80072d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080072d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80072d4:	b5b0      	push	{r4, r5, r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80072dc:	250f      	movs	r5, #15
 80072de:	197c      	adds	r4, r7, r5
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	0018      	movs	r0, r3
 80072e4:	f7ff ff78 	bl	80071d8 <sync_window>
 80072e8:	0003      	movs	r3, r0
 80072ea:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80072ec:	197b      	adds	r3, r7, r5
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d15e      	bne.n	80073b2 <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d14d      	bne.n	8007398 <sync_fs+0xc4>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	791b      	ldrb	r3, [r3, #4]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d149      	bne.n	8007398 <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3338      	adds	r3, #56	; 0x38
 8007308:	0018      	movs	r0, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	899b      	ldrh	r3, [r3, #12]
 800730e:	001a      	movs	r2, r3
 8007310:	2100      	movs	r1, #0
 8007312:	f7ff fda0 	bl	8006e56 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	3338      	adds	r3, #56	; 0x38
 800731a:	33ff      	adds	r3, #255	; 0xff
 800731c:	33ff      	adds	r3, #255	; 0xff
 800731e:	4a28      	ldr	r2, [pc, #160]	; (80073c0 <sync_fs+0xec>)
 8007320:	0011      	movs	r1, r2
 8007322:	0018      	movs	r0, r3
 8007324:	f7ff fd30 	bl	8006d88 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3338      	adds	r3, #56	; 0x38
 800732c:	4a25      	ldr	r2, [pc, #148]	; (80073c4 <sync_fs+0xf0>)
 800732e:	0011      	movs	r1, r2
 8007330:	0018      	movs	r0, r3
 8007332:	f7ff fd47 	bl	8006dc4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3338      	adds	r3, #56	; 0x38
 800733a:	33e5      	adds	r3, #229	; 0xe5
 800733c:	33ff      	adds	r3, #255	; 0xff
 800733e:	4a22      	ldr	r2, [pc, #136]	; (80073c8 <sync_fs+0xf4>)
 8007340:	0011      	movs	r1, r2
 8007342:	0018      	movs	r0, r3
 8007344:	f7ff fd3e 	bl	8006dc4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3338      	adds	r3, #56	; 0x38
 800734c:	33e9      	adds	r3, #233	; 0xe9
 800734e:	33ff      	adds	r3, #255	; 0xff
 8007350:	001a      	movs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	0019      	movs	r1, r3
 8007358:	0010      	movs	r0, r2
 800735a:	f7ff fd33 	bl	8006dc4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3338      	adds	r3, #56	; 0x38
 8007362:	33ed      	adds	r3, #237	; 0xed
 8007364:	33ff      	adds	r3, #255	; 0xff
 8007366:	001a      	movs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	0019      	movs	r1, r3
 800736e:	0010      	movs	r0, r2
 8007370:	f7ff fd28 	bl	8006dc4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	7858      	ldrb	r0, [r3, #1]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3338      	adds	r3, #56	; 0x38
 8007386:	0019      	movs	r1, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800738c:	2301      	movs	r3, #1
 800738e:	f7ff fc6f 	bl	8006c70 <disk_write>
			fs->fsi_flag = 0;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	785b      	ldrb	r3, [r3, #1]
 800739c:	2200      	movs	r2, #0
 800739e:	2100      	movs	r1, #0
 80073a0:	0018      	movs	r0, r3
 80073a2:	f7ff fc8d 	bl	8006cc0 <disk_ioctl>
 80073a6:	1e03      	subs	r3, r0, #0
 80073a8:	d003      	beq.n	80073b2 <sync_fs+0xde>
 80073aa:	230f      	movs	r3, #15
 80073ac:	18fb      	adds	r3, r7, r3
 80073ae:	2201      	movs	r2, #1
 80073b0:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80073b2:	230f      	movs	r3, #15
 80073b4:	18fb      	adds	r3, r7, r3
 80073b6:	781b      	ldrb	r3, [r3, #0]
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b004      	add	sp, #16
 80073be:	bdb0      	pop	{r4, r5, r7, pc}
 80073c0:	0000aa55 	.word	0x0000aa55
 80073c4:	41615252 	.word	0x41615252
 80073c8:	61417272 	.word	0x61417272

080073cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	3b02      	subs	r3, #2
 80073da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	3b02      	subs	r3, #2
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d301      	bcc.n	80073ec <clust2sect+0x20>
 80073e8:	2300      	movs	r3, #0
 80073ea:	e007      	b.n	80073fc <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	895b      	ldrh	r3, [r3, #10]
 80073f0:	001a      	movs	r2, r3
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	435a      	muls	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fa:	18d3      	adds	r3, r2, r3
}
 80073fc:	0018      	movs	r0, r3
 80073fe:	46bd      	mov	sp, r7
 8007400:	b002      	add	sp, #8
 8007402:	bd80      	pop	{r7, pc}

08007404 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007404:	b590      	push	{r4, r7, lr}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d904      	bls.n	8007424 <get_fat+0x20>
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d302      	bcc.n	800742a <get_fat+0x26>
		val = 1;	/* Internal error */
 8007424:	2301      	movs	r3, #1
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e0c2      	b.n	80075b0 <get_fat+0x1ac>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800742a:	2301      	movs	r3, #1
 800742c:	425b      	negs	r3, r3
 800742e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b03      	cmp	r3, #3
 8007436:	d100      	bne.n	800743a <get_fat+0x36>
 8007438:	e088      	b.n	800754c <get_fat+0x148>
 800743a:	dd00      	ble.n	800743e <get_fat+0x3a>
 800743c:	e0ae      	b.n	800759c <get_fat+0x198>
 800743e:	2b01      	cmp	r3, #1
 8007440:	d002      	beq.n	8007448 <get_fat+0x44>
 8007442:	2b02      	cmp	r3, #2
 8007444:	d05c      	beq.n	8007500 <get_fat+0xfc>
 8007446:	e0a9      	b.n	800759c <get_fat+0x198>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	18d3      	adds	r3, r2, r3
 8007454:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	899b      	ldrh	r3, [r3, #12]
 800745e:	0019      	movs	r1, r3
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f7f8 fe6d 	bl	8000140 <__udivsi3>
 8007466:	0003      	movs	r3, r0
 8007468:	18e2      	adds	r2, r4, r3
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	0011      	movs	r1, r2
 800746e:	0018      	movs	r0, r3
 8007470:	f7ff fefa 	bl	8007268 <move_window>
 8007474:	1e03      	subs	r3, r0, #0
 8007476:	d000      	beq.n	800747a <get_fat+0x76>
 8007478:	e093      	b.n	80075a2 <get_fat+0x19e>
			wc = fs->win[bc++ % SS(fs)];
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	60fa      	str	r2, [r7, #12]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	8992      	ldrh	r2, [r2, #12]
 8007484:	0011      	movs	r1, r2
 8007486:	0018      	movs	r0, r3
 8007488:	f7f8 fee0 	bl	800024c <__aeabi_uidivmod>
 800748c:	000b      	movs	r3, r1
 800748e:	0019      	movs	r1, r3
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	2238      	movs	r2, #56	; 0x38
 8007494:	185b      	adds	r3, r3, r1
 8007496:	189b      	adds	r3, r3, r2
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	899b      	ldrh	r3, [r3, #12]
 80074a4:	0019      	movs	r1, r3
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f7f8 fe4a 	bl	8000140 <__udivsi3>
 80074ac:	0003      	movs	r3, r0
 80074ae:	18e2      	adds	r2, r4, r3
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	0011      	movs	r1, r2
 80074b4:	0018      	movs	r0, r3
 80074b6:	f7ff fed7 	bl	8007268 <move_window>
 80074ba:	1e03      	subs	r3, r0, #0
 80074bc:	d000      	beq.n	80074c0 <get_fat+0xbc>
 80074be:	e072      	b.n	80075a6 <get_fat+0x1a2>
			wc |= fs->win[bc % SS(fs)] << 8;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	899b      	ldrh	r3, [r3, #12]
 80074c4:	001a      	movs	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	0011      	movs	r1, r2
 80074ca:	0018      	movs	r0, r3
 80074cc:	f7f8 febe 	bl	800024c <__aeabi_uidivmod>
 80074d0:	000b      	movs	r3, r1
 80074d2:	0019      	movs	r1, r3
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	2238      	movs	r2, #56	; 0x38
 80074d8:	185b      	adds	r3, r3, r1
 80074da:	189b      	adds	r3, r3, r2
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	001a      	movs	r2, r3
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2201      	movs	r2, #1
 80074ec:	4013      	ands	r3, r2
 80074ee:	d002      	beq.n	80074f6 <get_fat+0xf2>
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	091b      	lsrs	r3, r3, #4
 80074f4:	e002      	b.n	80074fc <get_fat+0xf8>
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	051b      	lsls	r3, r3, #20
 80074fa:	0d1b      	lsrs	r3, r3, #20
 80074fc:	617b      	str	r3, [r7, #20]
			break;
 80074fe:	e057      	b.n	80075b0 <get_fat+0x1ac>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	899b      	ldrh	r3, [r3, #12]
 8007508:	085b      	lsrs	r3, r3, #1
 800750a:	b29b      	uxth	r3, r3
 800750c:	0019      	movs	r1, r3
 800750e:	6838      	ldr	r0, [r7, #0]
 8007510:	f7f8 fe16 	bl	8000140 <__udivsi3>
 8007514:	0003      	movs	r3, r0
 8007516:	18e2      	adds	r2, r4, r3
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	0011      	movs	r1, r2
 800751c:	0018      	movs	r0, r3
 800751e:	f7ff fea3 	bl	8007268 <move_window>
 8007522:	1e03      	subs	r3, r0, #0
 8007524:	d141      	bne.n	80075aa <get_fat+0x1a6>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3338      	adds	r3, #56	; 0x38
 800752a:	001c      	movs	r4, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	005a      	lsls	r2, r3, #1
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	899b      	ldrh	r3, [r3, #12]
 8007534:	0019      	movs	r1, r3
 8007536:	0010      	movs	r0, r2
 8007538:	f7f8 fe88 	bl	800024c <__aeabi_uidivmod>
 800753c:	000b      	movs	r3, r1
 800753e:	18e3      	adds	r3, r4, r3
 8007540:	0018      	movs	r0, r3
 8007542:	f7ff fbe5 	bl	8006d10 <ld_word>
 8007546:	0003      	movs	r3, r0
 8007548:	617b      	str	r3, [r7, #20]
			break;
 800754a:	e031      	b.n	80075b0 <get_fat+0x1ac>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	899b      	ldrh	r3, [r3, #12]
 8007554:	089b      	lsrs	r3, r3, #2
 8007556:	b29b      	uxth	r3, r3
 8007558:	0019      	movs	r1, r3
 800755a:	6838      	ldr	r0, [r7, #0]
 800755c:	f7f8 fdf0 	bl	8000140 <__udivsi3>
 8007560:	0003      	movs	r3, r0
 8007562:	18e2      	adds	r2, r4, r3
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	0011      	movs	r1, r2
 8007568:	0018      	movs	r0, r3
 800756a:	f7ff fe7d 	bl	8007268 <move_window>
 800756e:	1e03      	subs	r3, r0, #0
 8007570:	d11d      	bne.n	80075ae <get_fat+0x1aa>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	3338      	adds	r3, #56	; 0x38
 8007576:	001c      	movs	r4, r3
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	009a      	lsls	r2, r3, #2
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	899b      	ldrh	r3, [r3, #12]
 8007580:	0019      	movs	r1, r3
 8007582:	0010      	movs	r0, r2
 8007584:	f7f8 fe62 	bl	800024c <__aeabi_uidivmod>
 8007588:	000b      	movs	r3, r1
 800758a:	18e3      	adds	r3, r4, r3
 800758c:	0018      	movs	r0, r3
 800758e:	f7ff fbda 	bl	8006d46 <ld_dword>
 8007592:	0003      	movs	r3, r0
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	091b      	lsrs	r3, r3, #4
 8007598:	617b      	str	r3, [r7, #20]
			break;
 800759a:	e009      	b.n	80075b0 <get_fat+0x1ac>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800759c:	2301      	movs	r3, #1
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	e006      	b.n	80075b0 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	e004      	b.n	80075b0 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075a6:	46c0      	nop			; (mov r8, r8)
 80075a8:	e002      	b.n	80075b0 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	e000      	b.n	80075b0 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075ae:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 80075b0:	697b      	ldr	r3, [r7, #20]
}
 80075b2:	0018      	movs	r0, r3
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b007      	add	sp, #28
 80075b8:	bd90      	pop	{r4, r7, pc}

080075ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80075ba:	b5b0      	push	{r4, r5, r7, lr}
 80075bc:	b088      	sub	sp, #32
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80075c6:	231f      	movs	r3, #31
 80075c8:	18fb      	adds	r3, r7, r3
 80075ca:	2202      	movs	r2, #2
 80075cc:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d800      	bhi.n	80075d6 <put_fat+0x1c>
 80075d4:	e11a      	b.n	800780c <put_fat+0x252>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d300      	bcc.n	80075e2 <put_fat+0x28>
 80075e0:	e114      	b.n	800780c <put_fat+0x252>
		switch (fs->fs_type) {
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d100      	bne.n	80075ec <put_fat+0x32>
 80075ea:	e0c1      	b.n	8007770 <put_fat+0x1b6>
 80075ec:	dd00      	ble.n	80075f0 <put_fat+0x36>
 80075ee:	e10d      	b.n	800780c <put_fat+0x252>
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d003      	beq.n	80075fc <put_fat+0x42>
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d100      	bne.n	80075fa <put_fat+0x40>
 80075f8:	e08a      	b.n	8007710 <put_fat+0x156>
 80075fa:	e107      	b.n	800780c <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	61bb      	str	r3, [r7, #24]
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	18d3      	adds	r3, r2, r3
 8007608:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	899b      	ldrh	r3, [r3, #12]
 8007612:	0019      	movs	r1, r3
 8007614:	69b8      	ldr	r0, [r7, #24]
 8007616:	f7f8 fd93 	bl	8000140 <__udivsi3>
 800761a:	0003      	movs	r3, r0
 800761c:	18e2      	adds	r2, r4, r3
 800761e:	251f      	movs	r5, #31
 8007620:	197c      	adds	r4, r7, r5
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	0011      	movs	r1, r2
 8007626:	0018      	movs	r0, r3
 8007628:	f7ff fe1e 	bl	8007268 <move_window>
 800762c:	0003      	movs	r3, r0
 800762e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007630:	197b      	adds	r3, r7, r5
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d000      	beq.n	800763a <put_fat+0x80>
 8007638:	e0e1      	b.n	80077fe <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3338      	adds	r3, #56	; 0x38
 800763e:	001c      	movs	r4, r3
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	61ba      	str	r2, [r7, #24]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	8992      	ldrh	r2, [r2, #12]
 800764a:	0011      	movs	r1, r2
 800764c:	0018      	movs	r0, r3
 800764e:	f7f8 fdfd 	bl	800024c <__aeabi_uidivmod>
 8007652:	000b      	movs	r3, r1
 8007654:	18e3      	adds	r3, r4, r3
 8007656:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2201      	movs	r2, #1
 800765c:	4013      	ands	r3, r2
 800765e:	d00d      	beq.n	800767c <put_fat+0xc2>
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b25b      	sxtb	r3, r3
 8007666:	220f      	movs	r2, #15
 8007668:	4013      	ands	r3, r2
 800766a:	b25a      	sxtb	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	011b      	lsls	r3, r3, #4
 8007672:	b25b      	sxtb	r3, r3
 8007674:	4313      	orrs	r3, r2
 8007676:	b25b      	sxtb	r3, r3
 8007678:	b2db      	uxtb	r3, r3
 800767a:	e001      	b.n	8007680 <put_fat+0xc6>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	b2db      	uxtb	r3, r3
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	899b      	ldrh	r3, [r3, #12]
 8007692:	0019      	movs	r1, r3
 8007694:	69b8      	ldr	r0, [r7, #24]
 8007696:	f7f8 fd53 	bl	8000140 <__udivsi3>
 800769a:	0003      	movs	r3, r0
 800769c:	18e2      	adds	r2, r4, r3
 800769e:	251f      	movs	r5, #31
 80076a0:	197c      	adds	r4, r7, r5
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	0011      	movs	r1, r2
 80076a6:	0018      	movs	r0, r3
 80076a8:	f7ff fdde 	bl	8007268 <move_window>
 80076ac:	0003      	movs	r3, r0
 80076ae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80076b0:	197b      	adds	r3, r7, r5
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d000      	beq.n	80076ba <put_fat+0x100>
 80076b8:	e0a3      	b.n	8007802 <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3338      	adds	r3, #56	; 0x38
 80076be:	001c      	movs	r4, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	899b      	ldrh	r3, [r3, #12]
 80076c4:	001a      	movs	r2, r3
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	0011      	movs	r1, r2
 80076ca:	0018      	movs	r0, r3
 80076cc:	f7f8 fdbe 	bl	800024c <__aeabi_uidivmod>
 80076d0:	000b      	movs	r3, r1
 80076d2:	18e3      	adds	r3, r4, r3
 80076d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2201      	movs	r2, #1
 80076da:	4013      	ands	r3, r2
 80076dc:	d003      	beq.n	80076e6 <put_fat+0x12c>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	091b      	lsrs	r3, r3, #4
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	e00e      	b.n	8007704 <put_fat+0x14a>
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	b25b      	sxtb	r3, r3
 80076ec:	220f      	movs	r2, #15
 80076ee:	4393      	bics	r3, r2
 80076f0:	b25a      	sxtb	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	0a1b      	lsrs	r3, r3, #8
 80076f6:	b25b      	sxtb	r3, r3
 80076f8:	210f      	movs	r1, #15
 80076fa:	400b      	ands	r3, r1
 80076fc:	b25b      	sxtb	r3, r3
 80076fe:	4313      	orrs	r3, r2
 8007700:	b25b      	sxtb	r3, r3
 8007702:	b2db      	uxtb	r3, r3
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	70da      	strb	r2, [r3, #3]
			break;
 800770e:	e07d      	b.n	800780c <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	899b      	ldrh	r3, [r3, #12]
 8007718:	085b      	lsrs	r3, r3, #1
 800771a:	b29b      	uxth	r3, r3
 800771c:	0019      	movs	r1, r3
 800771e:	68b8      	ldr	r0, [r7, #8]
 8007720:	f7f8 fd0e 	bl	8000140 <__udivsi3>
 8007724:	0003      	movs	r3, r0
 8007726:	18e2      	adds	r2, r4, r3
 8007728:	251f      	movs	r5, #31
 800772a:	197c      	adds	r4, r7, r5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	0011      	movs	r1, r2
 8007730:	0018      	movs	r0, r3
 8007732:	f7ff fd99 	bl	8007268 <move_window>
 8007736:	0003      	movs	r3, r0
 8007738:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800773a:	197b      	adds	r3, r7, r5
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d161      	bne.n	8007806 <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3338      	adds	r3, #56	; 0x38
 8007746:	001c      	movs	r4, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	005a      	lsls	r2, r3, #1
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	899b      	ldrh	r3, [r3, #12]
 8007750:	0019      	movs	r1, r3
 8007752:	0010      	movs	r0, r2
 8007754:	f7f8 fd7a 	bl	800024c <__aeabi_uidivmod>
 8007758:	000b      	movs	r3, r1
 800775a:	18e3      	adds	r3, r4, r3
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	b292      	uxth	r2, r2
 8007760:	0011      	movs	r1, r2
 8007762:	0018      	movs	r0, r3
 8007764:	f7ff fb10 	bl	8006d88 <st_word>
			fs->wflag = 1;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2201      	movs	r2, #1
 800776c:	70da      	strb	r2, [r3, #3]
			break;
 800776e:	e04d      	b.n	800780c <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	899b      	ldrh	r3, [r3, #12]
 8007778:	089b      	lsrs	r3, r3, #2
 800777a:	b29b      	uxth	r3, r3
 800777c:	0019      	movs	r1, r3
 800777e:	68b8      	ldr	r0, [r7, #8]
 8007780:	f7f8 fcde 	bl	8000140 <__udivsi3>
 8007784:	0003      	movs	r3, r0
 8007786:	18e2      	adds	r2, r4, r3
 8007788:	251f      	movs	r5, #31
 800778a:	197c      	adds	r4, r7, r5
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	0011      	movs	r1, r2
 8007790:	0018      	movs	r0, r3
 8007792:	f7ff fd69 	bl	8007268 <move_window>
 8007796:	0003      	movs	r3, r0
 8007798:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800779a:	197b      	adds	r3, r7, r5
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d133      	bne.n	800780a <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	091c      	lsrs	r4, r3, #4
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3338      	adds	r3, #56	; 0x38
 80077ac:	001d      	movs	r5, r3
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	009a      	lsls	r2, r3, #2
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	899b      	ldrh	r3, [r3, #12]
 80077b6:	0019      	movs	r1, r3
 80077b8:	0010      	movs	r0, r2
 80077ba:	f7f8 fd47 	bl	800024c <__aeabi_uidivmod>
 80077be:	000b      	movs	r3, r1
 80077c0:	18eb      	adds	r3, r5, r3
 80077c2:	0018      	movs	r0, r3
 80077c4:	f7ff fabf 	bl	8006d46 <ld_dword>
 80077c8:	0003      	movs	r3, r0
 80077ca:	0f1b      	lsrs	r3, r3, #28
 80077cc:	071b      	lsls	r3, r3, #28
 80077ce:	4323      	orrs	r3, r4
 80077d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3338      	adds	r3, #56	; 0x38
 80077d6:	001c      	movs	r4, r3
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	009a      	lsls	r2, r3, #2
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	899b      	ldrh	r3, [r3, #12]
 80077e0:	0019      	movs	r1, r3
 80077e2:	0010      	movs	r0, r2
 80077e4:	f7f8 fd32 	bl	800024c <__aeabi_uidivmod>
 80077e8:	000b      	movs	r3, r1
 80077ea:	18e3      	adds	r3, r4, r3
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	0011      	movs	r1, r2
 80077f0:	0018      	movs	r0, r3
 80077f2:	f7ff fae7 	bl	8006dc4 <st_dword>
			fs->wflag = 1;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	70da      	strb	r2, [r3, #3]
			break;
 80077fc:	e006      	b.n	800780c <put_fat+0x252>
			if (res != FR_OK) break;
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	e004      	b.n	800780c <put_fat+0x252>
			if (res != FR_OK) break;
 8007802:	46c0      	nop			; (mov r8, r8)
 8007804:	e002      	b.n	800780c <put_fat+0x252>
			if (res != FR_OK) break;
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	e000      	b.n	800780c <put_fat+0x252>
			if (res != FR_OK) break;
 800780a:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 800780c:	231f      	movs	r3, #31
 800780e:	18fb      	adds	r3, r7, r3
 8007810:	781b      	ldrb	r3, [r3, #0]
}
 8007812:	0018      	movs	r0, r3
 8007814:	46bd      	mov	sp, r7
 8007816:	b008      	add	sp, #32
 8007818:	bdb0      	pop	{r4, r5, r7, pc}

0800781a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800781a:	b5b0      	push	{r4, r5, r7, lr}
 800781c:	b088      	sub	sp, #32
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007826:	231f      	movs	r3, #31
 8007828:	18fb      	adds	r3, r7, r3
 800782a:	2200      	movs	r2, #0
 800782c:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d904      	bls.n	8007844 <remove_chain+0x2a>
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	429a      	cmp	r2, r3
 8007842:	d301      	bcc.n	8007848 <remove_chain+0x2e>
 8007844:	2302      	movs	r3, #2
 8007846:	e057      	b.n	80078f8 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d011      	beq.n	8007872 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800784e:	251f      	movs	r5, #31
 8007850:	197c      	adds	r4, r7, r5
 8007852:	2301      	movs	r3, #1
 8007854:	425a      	negs	r2, r3
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	0018      	movs	r0, r3
 800785c:	f7ff fead 	bl	80075ba <put_fat>
 8007860:	0003      	movs	r3, r0
 8007862:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8007864:	197b      	adds	r3, r7, r5
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <remove_chain+0x58>
 800786c:	197b      	adds	r3, r7, r5
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	e042      	b.n	80078f8 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	0011      	movs	r1, r2
 8007878:	0018      	movs	r0, r3
 800787a:	f7ff fdc3 	bl	8007404 <get_fat>
 800787e:	0003      	movs	r3, r0
 8007880:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d035      	beq.n	80078f4 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <remove_chain+0x78>
 800788e:	2302      	movs	r3, #2
 8007890:	e032      	b.n	80078f8 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	3301      	adds	r3, #1
 8007896:	d101      	bne.n	800789c <remove_chain+0x82>
 8007898:	2301      	movs	r3, #1
 800789a:	e02d      	b.n	80078f8 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800789c:	251f      	movs	r5, #31
 800789e:	197c      	adds	r4, r7, r5
 80078a0:	68b9      	ldr	r1, [r7, #8]
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2200      	movs	r2, #0
 80078a6:	0018      	movs	r0, r3
 80078a8:	f7ff fe87 	bl	80075ba <put_fat>
 80078ac:	0003      	movs	r3, r0
 80078ae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 80078b0:	197b      	adds	r3, r7, r5
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <remove_chain+0xa4>
 80078b8:	197b      	adds	r3, r7, r5
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	e01c      	b.n	80078f8 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	3b02      	subs	r3, #2
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d20b      	bcs.n	80078e4 <remove_chain+0xca>
			fs->free_clst++;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	791b      	ldrb	r3, [r3, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	4313      	orrs	r3, r2
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d3bf      	bcc.n	8007872 <remove_chain+0x58>
 80078f2:	e000      	b.n	80078f6 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 80078f4:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	0018      	movs	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b008      	add	sp, #32
 80078fe:	bdb0      	pop	{r4, r5, r7, pc}

08007900 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007900:	b5b0      	push	{r4, r5, r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10d      	bne.n	8007932 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d004      	beq.n	800792c <create_chain+0x2c>
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	429a      	cmp	r2, r3
 800792a:	d31d      	bcc.n	8007968 <create_chain+0x68>
 800792c:	2301      	movs	r3, #1
 800792e:	61bb      	str	r3, [r7, #24]
 8007930:	e01a      	b.n	8007968 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	0011      	movs	r1, r2
 8007938:	0018      	movs	r0, r3
 800793a:	f7ff fd63 	bl	8007404 <get_fat>
 800793e:	0003      	movs	r3, r0
 8007940:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d801      	bhi.n	800794c <create_chain+0x4c>
 8007948:	2301      	movs	r3, #1
 800794a:	e07b      	b.n	8007a44 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	3301      	adds	r3, #1
 8007950:	d101      	bne.n	8007956 <create_chain+0x56>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	e076      	b.n	8007a44 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	429a      	cmp	r2, r3
 800795e:	d201      	bcs.n	8007964 <create_chain+0x64>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	e06f      	b.n	8007a44 <create_chain+0x144>
		scl = clst;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	3301      	adds	r3, #1
 8007970:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	429a      	cmp	r2, r3
 800797a:	d307      	bcc.n	800798c <create_chain+0x8c>
				ncl = 2;
 800797c:	2302      	movs	r3, #2
 800797e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	429a      	cmp	r2, r3
 8007986:	d901      	bls.n	800798c <create_chain+0x8c>
 8007988:	2300      	movs	r3, #0
 800798a:	e05b      	b.n	8007a44 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	0011      	movs	r1, r2
 8007992:	0018      	movs	r0, r3
 8007994:	f7ff fd36 	bl	8007404 <get_fat>
 8007998:	0003      	movs	r3, r0
 800799a:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00d      	beq.n	80079be <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d002      	beq.n	80079ae <create_chain+0xae>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	d101      	bne.n	80079b2 <create_chain+0xb2>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	e048      	b.n	8007a44 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 80079b2:	69fa      	ldr	r2, [r7, #28]
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d1d8      	bne.n	800796c <create_chain+0x6c>
 80079ba:	2300      	movs	r3, #0
 80079bc:	e042      	b.n	8007a44 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 80079be:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80079c0:	2517      	movs	r5, #23
 80079c2:	197c      	adds	r4, r7, r5
 80079c4:	2301      	movs	r3, #1
 80079c6:	425a      	negs	r2, r3
 80079c8:	69f9      	ldr	r1, [r7, #28]
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	0018      	movs	r0, r3
 80079ce:	f7ff fdf4 	bl	80075ba <put_fat>
 80079d2:	0003      	movs	r3, r0
 80079d4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 80079d6:	197b      	adds	r3, r7, r5
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10b      	bne.n	80079f6 <create_chain+0xf6>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80079e4:	197c      	adds	r4, r7, r5
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	0018      	movs	r0, r3
 80079ee:	f7ff fde4 	bl	80075ba <put_fat>
 80079f2:	0003      	movs	r3, r0
 80079f4:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80079f6:	2317      	movs	r3, #23
 80079f8:	18fb      	adds	r3, r7, r3
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d116      	bne.n	8007a2e <create_chain+0x12e>
		fs->last_clst = ncl;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	699a      	ldr	r2, [r3, #24]
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	3b02      	subs	r3, #2
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d804      	bhi.n	8007a1e <create_chain+0x11e>
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	1e5a      	subs	r2, r3, #1
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	791b      	ldrb	r3, [r3, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	4313      	orrs	r3, r2
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	711a      	strb	r2, [r3, #4]
 8007a2c:	e009      	b.n	8007a42 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007a2e:	2317      	movs	r3, #23
 8007a30:	18fb      	adds	r3, r7, r3
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d102      	bne.n	8007a3e <create_chain+0x13e>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	425b      	negs	r3, r3
 8007a3c:	e000      	b.n	8007a40 <create_chain+0x140>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007a42:	69fb      	ldr	r3, [r7, #28]
}
 8007a44:	0018      	movs	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	b008      	add	sp, #32
 8007a4a:	bdb0      	pop	{r4, r5, r7, pc}

08007a4c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	3304      	adds	r3, #4
 8007a62:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	899b      	ldrh	r3, [r3, #12]
 8007a68:	0019      	movs	r1, r3
 8007a6a:	6838      	ldr	r0, [r7, #0]
 8007a6c:	f7f8 fb68 	bl	8000140 <__udivsi3>
 8007a70:	0003      	movs	r3, r0
 8007a72:	001a      	movs	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	895b      	ldrh	r3, [r3, #10]
 8007a78:	0019      	movs	r1, r3
 8007a7a:	0010      	movs	r0, r2
 8007a7c:	f7f8 fb60 	bl	8000140 <__udivsi3>
 8007a80:	0003      	movs	r3, r0
 8007a82:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1d1a      	adds	r2, r3, #4
 8007a88:	613a      	str	r2, [r7, #16]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <clmt_clust+0x4c>
 8007a94:	2300      	movs	r3, #0
 8007a96:	e010      	b.n	8007aba <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d307      	bcc.n	8007ab0 <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007aae:	e7e9      	b.n	8007a84 <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 8007ab0:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	18d3      	adds	r3, r2, r3
}
 8007aba:	0018      	movs	r0, r3
 8007abc:	46bd      	mov	sp, r7
 8007abe:	b006      	add	sp, #24
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007ac2:	b590      	push	{r4, r7, lr}
 8007ac4:	b087      	sub	sp, #28
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	2380      	movs	r3, #128	; 0x80
 8007ad6:	039b      	lsls	r3, r3, #14
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d203      	bcs.n	8007ae4 <dir_sdi+0x22>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	221f      	movs	r2, #31
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	d001      	beq.n	8007ae8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e074      	b.n	8007bd2 <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d106      	bne.n	8007b08 <dir_sdi+0x46>
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d902      	bls.n	8007b08 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10c      	bne.n	8007b28 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	095b      	lsrs	r3, r3, #5
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	8912      	ldrh	r2, [r2, #8]
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d301      	bcc.n	8007b1e <dir_sdi+0x5c>
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	e059      	b.n	8007bd2 <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	61da      	str	r2, [r3, #28]
 8007b26:	e02f      	b.n	8007b88 <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	895b      	ldrh	r3, [r3, #10]
 8007b2c:	001a      	movs	r2, r3
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	899b      	ldrh	r3, [r3, #12]
 8007b32:	4353      	muls	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b36:	e01a      	b.n	8007b6e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	0011      	movs	r1, r2
 8007b3e:	0018      	movs	r0, r3
 8007b40:	f7ff fc60 	bl	8007404 <get_fat>
 8007b44:	0003      	movs	r3, r0
 8007b46:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	d101      	bne.n	8007b52 <dir_sdi+0x90>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e03f      	b.n	8007bd2 <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d904      	bls.n	8007b62 <dir_sdi+0xa0>
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d301      	bcc.n	8007b66 <dir_sdi+0xa4>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e035      	b.n	8007bd2 <dir_sdi+0x110>
			ofs -= csz;
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d2e0      	bcs.n	8007b38 <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	0011      	movs	r1, r2
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	f7ff fc25 	bl	80073cc <clust2sect>
 8007b82:	0002      	movs	r2, r0
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <dir_sdi+0xd8>
 8007b96:	2302      	movs	r3, #2
 8007b98:	e01b      	b.n	8007bd2 <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69dc      	ldr	r4, [r3, #28]
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	899b      	ldrh	r3, [r3, #12]
 8007ba2:	0019      	movs	r1, r3
 8007ba4:	6838      	ldr	r0, [r7, #0]
 8007ba6:	f7f8 facb 	bl	8000140 <__udivsi3>
 8007baa:	0003      	movs	r3, r0
 8007bac:	18e2      	adds	r2, r4, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	3338      	adds	r3, #56	; 0x38
 8007bb6:	001c      	movs	r4, r3
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	899b      	ldrh	r3, [r3, #12]
 8007bbc:	001a      	movs	r2, r3
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	0011      	movs	r1, r2
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f7f8 fb42 	bl	800024c <__aeabi_uidivmod>
 8007bc8:	000b      	movs	r3, r1
 8007bca:	18e2      	adds	r2, r4, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	b007      	add	sp, #28
 8007bd8:	bd90      	pop	{r4, r7, pc}

08007bda <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007bda:	b590      	push	{r4, r7, lr}
 8007bdc:	b087      	sub	sp, #28
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	3320      	adds	r3, #32
 8007bf0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d004      	beq.n	8007c04 <dir_next+0x2a>
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	2380      	movs	r3, #128	; 0x80
 8007bfe:	039b      	lsls	r3, r3, #14
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d301      	bcc.n	8007c08 <dir_next+0x2e>
 8007c04:	2304      	movs	r3, #4
 8007c06:	e0c0      	b.n	8007d8a <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	899b      	ldrh	r3, [r3, #12]
 8007c0c:	001a      	movs	r2, r3
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	0011      	movs	r1, r2
 8007c12:	0018      	movs	r0, r3
 8007c14:	f7f8 fb1a 	bl	800024c <__aeabi_uidivmod>
 8007c18:	1e0b      	subs	r3, r1, #0
 8007c1a:	d000      	beq.n	8007c1e <dir_next+0x44>
 8007c1c:	e0a2      	b.n	8007d64 <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10b      	bne.n	8007c48 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	8912      	ldrh	r2, [r2, #8]
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d200      	bcs.n	8007c3e <dir_next+0x64>
 8007c3c:	e092      	b.n	8007d64 <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	61da      	str	r2, [r3, #28]
 8007c44:	2304      	movs	r3, #4
 8007c46:	e0a0      	b.n	8007d8a <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	899b      	ldrh	r3, [r3, #12]
 8007c4c:	0019      	movs	r1, r3
 8007c4e:	68b8      	ldr	r0, [r7, #8]
 8007c50:	f7f8 fa76 	bl	8000140 <__udivsi3>
 8007c54:	0003      	movs	r3, r0
 8007c56:	001a      	movs	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	895b      	ldrh	r3, [r3, #10]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	4013      	ands	r3, r2
 8007c60:	d000      	beq.n	8007c64 <dir_next+0x8a>
 8007c62:	e07f      	b.n	8007d64 <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	0019      	movs	r1, r3
 8007c6c:	0010      	movs	r0, r2
 8007c6e:	f7ff fbc9 	bl	8007404 <get_fat>
 8007c72:	0003      	movs	r3, r0
 8007c74:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d801      	bhi.n	8007c80 <dir_next+0xa6>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e084      	b.n	8007d8a <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	3301      	adds	r3, #1
 8007c84:	d101      	bne.n	8007c8a <dir_next+0xb0>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e07f      	b.n	8007d8a <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d35b      	bcc.n	8007d4c <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d104      	bne.n	8007ca4 <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	61da      	str	r2, [r3, #28]
 8007ca0:	2304      	movs	r3, #4
 8007ca2:	e072      	b.n	8007d8a <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	0019      	movs	r1, r3
 8007cac:	0010      	movs	r0, r2
 8007cae:	f7ff fe27 	bl	8007900 <create_chain>
 8007cb2:	0003      	movs	r3, r0
 8007cb4:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <dir_next+0xe6>
 8007cbc:	2307      	movs	r3, #7
 8007cbe:	e064      	b.n	8007d8a <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <dir_next+0xf0>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e05f      	b.n	8007d8a <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <dir_next+0xfa>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e05a      	b.n	8007d8a <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f7ff fa7e 	bl	80071d8 <sync_window>
 8007cdc:	1e03      	subs	r3, r0, #0
 8007cde:	d001      	beq.n	8007ce4 <dir_next+0x10a>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e052      	b.n	8007d8a <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3338      	adds	r3, #56	; 0x38
 8007ce8:	0018      	movs	r0, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	899b      	ldrh	r3, [r3, #12]
 8007cee:	001a      	movs	r2, r3
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	f7ff f8b0 	bl	8006e56 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	613b      	str	r3, [r7, #16]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	0011      	movs	r1, r2
 8007d00:	0018      	movs	r0, r3
 8007d02:	f7ff fb63 	bl	80073cc <clust2sect>
 8007d06:	0002      	movs	r2, r0
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	635a      	str	r2, [r3, #52]	; 0x34
 8007d0c:	e012      	b.n	8007d34 <dir_next+0x15a>
						fs->wflag = 1;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2201      	movs	r2, #1
 8007d12:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	0018      	movs	r0, r3
 8007d18:	f7ff fa5e 	bl	80071d8 <sync_window>
 8007d1c:	1e03      	subs	r3, r0, #0
 8007d1e:	d001      	beq.n	8007d24 <dir_next+0x14a>
 8007d20:	2301      	movs	r3, #1
 8007d22:	e032      	b.n	8007d8a <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	3301      	adds	r3, #1
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	635a      	str	r2, [r3, #52]	; 0x34
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	895b      	ldrh	r3, [r3, #10]
 8007d38:	001a      	movs	r2, r3
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d3e6      	bcc.n	8007d0e <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	1ad2      	subs	r2, r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	0011      	movs	r1, r2
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f7ff fb37 	bl	80073cc <clust2sect>
 8007d5e:	0002      	movs	r2, r0
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3338      	adds	r3, #56	; 0x38
 8007d6e:	001c      	movs	r4, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	899b      	ldrh	r3, [r3, #12]
 8007d74:	001a      	movs	r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	0011      	movs	r1, r2
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f7f8 fa66 	bl	800024c <__aeabi_uidivmod>
 8007d80:	000b      	movs	r3, r1
 8007d82:	18e2      	adds	r2, r4, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	b007      	add	sp, #28
 8007d90:	bd90      	pop	{r4, r7, pc}

08007d92 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007d92:	b5b0      	push	{r4, r5, r7, lr}
 8007d94:	b086      	sub	sp, #24
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007da2:	2517      	movs	r5, #23
 8007da4:	197c      	adds	r4, r7, r5
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2100      	movs	r1, #0
 8007daa:	0018      	movs	r0, r3
 8007dac:	f7ff fe89 	bl	8007ac2 <dir_sdi>
 8007db0:	0003      	movs	r3, r0
 8007db2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007db4:	197b      	adds	r3, r7, r5
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d133      	bne.n	8007e24 <dir_alloc+0x92>
		n = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	69da      	ldr	r2, [r3, #28]
 8007dc4:	2517      	movs	r5, #23
 8007dc6:	197c      	adds	r4, r7, r5
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	0011      	movs	r1, r2
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f7ff fa4b 	bl	8007268 <move_window>
 8007dd2:	0003      	movs	r3, r0
 8007dd4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007dd6:	197b      	adds	r3, r7, r5
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d121      	bne.n	8007e22 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2be5      	cmp	r3, #229	; 0xe5
 8007de6:	d004      	beq.n	8007df2 <dir_alloc+0x60>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d107      	bne.n	8007e02 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3301      	adds	r3, #1
 8007df6:	613b      	str	r3, [r7, #16]
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d102      	bne.n	8007e06 <dir_alloc+0x74>
 8007e00:	e010      	b.n	8007e24 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007e02:	2300      	movs	r3, #0
 8007e04:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007e06:	2517      	movs	r5, #23
 8007e08:	197c      	adds	r4, r7, r5
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f7ff fee3 	bl	8007bda <dir_next>
 8007e14:	0003      	movs	r3, r0
 8007e16:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007e18:	197b      	adds	r3, r7, r5
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d0cf      	beq.n	8007dc0 <dir_alloc+0x2e>
 8007e20:	e000      	b.n	8007e24 <dir_alloc+0x92>
			if (res != FR_OK) break;
 8007e22:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007e24:	2217      	movs	r2, #23
 8007e26:	18bb      	adds	r3, r7, r2
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d102      	bne.n	8007e34 <dir_alloc+0xa2>
 8007e2e:	18bb      	adds	r3, r7, r2
 8007e30:	2207      	movs	r2, #7
 8007e32:	701a      	strb	r2, [r3, #0]
	return res;
 8007e34:	2317      	movs	r3, #23
 8007e36:	18fb      	adds	r3, r7, r3
 8007e38:	781b      	ldrb	r3, [r3, #0]
}
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	b006      	add	sp, #24
 8007e40:	bdb0      	pop	{r4, r5, r7, pc}

08007e42 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	331a      	adds	r3, #26
 8007e50:	0018      	movs	r0, r3
 8007e52:	f7fe ff5d 	bl	8006d10 <ld_word>
 8007e56:	0003      	movs	r3, r0
 8007e58:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d109      	bne.n	8007e76 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	3314      	adds	r3, #20
 8007e66:	0018      	movs	r0, r3
 8007e68:	f7fe ff52 	bl	8006d10 <ld_word>
 8007e6c:	0003      	movs	r3, r0
 8007e6e:	041b      	lsls	r3, r3, #16
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007e76:	68fb      	ldr	r3, [r7, #12]
}
 8007e78:	0018      	movs	r0, r3
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	b004      	add	sp, #16
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	331a      	adds	r3, #26
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	b292      	uxth	r2, r2
 8007e94:	0011      	movs	r1, r2
 8007e96:	0018      	movs	r0, r3
 8007e98:	f7fe ff76 	bl	8006d88 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d109      	bne.n	8007eb8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	3314      	adds	r3, #20
 8007ea8:	001a      	movs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	0c1b      	lsrs	r3, r3, #16
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	0010      	movs	r0, r2
 8007eb4:	f7fe ff68 	bl	8006d88 <st_word>
	}
}
 8007eb8:	46c0      	nop			; (mov r8, r8)
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	b004      	add	sp, #16
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007ec0:	b5b0      	push	{r4, r5, r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	331a      	adds	r3, #26
 8007ece:	0018      	movs	r0, r3
 8007ed0:	f7fe ff1e 	bl	8006d10 <ld_word>
 8007ed4:	1e03      	subs	r3, r0, #0
 8007ed6:	d001      	beq.n	8007edc <cmp_lfn+0x1c>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	e068      	b.n	8007fae <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	001a      	movs	r2, r3
 8007ee2:	233f      	movs	r3, #63	; 0x3f
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	1e5a      	subs	r2, r3, #1
 8007ee8:	0013      	movs	r3, r2
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	189b      	adds	r3, r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	189b      	adds	r3, r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007ef4:	230e      	movs	r3, #14
 8007ef6:	18fb      	adds	r3, r7, r3
 8007ef8:	2201      	movs	r2, #1
 8007efa:	801a      	strh	r2, [r3, #0]
 8007efc:	2300      	movs	r3, #0
 8007efe:	613b      	str	r3, [r7, #16]
 8007f00:	e03d      	b.n	8007f7e <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007f02:	4a2d      	ldr	r2, [pc, #180]	; (8007fb8 <cmp_lfn+0xf8>)
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	18d3      	adds	r3, r2, r3
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	001a      	movs	r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	189b      	adds	r3, r3, r2
 8007f10:	250c      	movs	r5, #12
 8007f12:	197c      	adds	r4, r7, r5
 8007f14:	0018      	movs	r0, r3
 8007f16:	f7fe fefb 	bl	8006d10 <ld_word>
 8007f1a:	0003      	movs	r3, r0
 8007f1c:	8023      	strh	r3, [r4, #0]
		if (wc) {
 8007f1e:	230e      	movs	r3, #14
 8007f20:	18fb      	adds	r3, r7, r3
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01f      	beq.n	8007f68 <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2bfe      	cmp	r3, #254	; 0xfe
 8007f2c:	d813      	bhi.n	8007f56 <cmp_lfn+0x96>
 8007f2e:	197b      	adds	r3, r7, r5
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	0018      	movs	r0, r3
 8007f34:	f002 f934 	bl	800a1a0 <ff_wtoupper>
 8007f38:	0003      	movs	r3, r0
 8007f3a:	001c      	movs	r4, r3
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	617a      	str	r2, [r7, #20]
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	18d3      	adds	r3, r2, r3
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	0018      	movs	r0, r3
 8007f4c:	f002 f928 	bl	800a1a0 <ff_wtoupper>
 8007f50:	0003      	movs	r3, r0
 8007f52:	429c      	cmp	r4, r3
 8007f54:	d001      	beq.n	8007f5a <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 8007f56:	2300      	movs	r3, #0
 8007f58:	e029      	b.n	8007fae <cmp_lfn+0xee>
			}
			wc = uc;
 8007f5a:	230e      	movs	r3, #14
 8007f5c:	18fb      	adds	r3, r7, r3
 8007f5e:	220c      	movs	r2, #12
 8007f60:	18ba      	adds	r2, r7, r2
 8007f62:	8812      	ldrh	r2, [r2, #0]
 8007f64:	801a      	strh	r2, [r3, #0]
 8007f66:	e007      	b.n	8007f78 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007f68:	230c      	movs	r3, #12
 8007f6a:	18fb      	adds	r3, r7, r3
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	4a13      	ldr	r2, [pc, #76]	; (8007fbc <cmp_lfn+0xfc>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d001      	beq.n	8007f78 <cmp_lfn+0xb8>
 8007f74:	2300      	movs	r3, #0
 8007f76:	e01a      	b.n	8007fae <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	613b      	str	r3, [r7, #16]
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	2b0c      	cmp	r3, #12
 8007f82:	d9be      	bls.n	8007f02 <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	001a      	movs	r2, r3
 8007f8a:	2340      	movs	r3, #64	; 0x40
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	d00d      	beq.n	8007fac <cmp_lfn+0xec>
 8007f90:	230e      	movs	r3, #14
 8007f92:	18fb      	adds	r3, r7, r3
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d008      	beq.n	8007fac <cmp_lfn+0xec>
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	18d3      	adds	r3, r2, r3
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <cmp_lfn+0xec>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e000      	b.n	8007fae <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 8007fac:	2301      	movs	r3, #1
}
 8007fae:	0018      	movs	r0, r3
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	b006      	add	sp, #24
 8007fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	0800ee70 	.word	0x0800ee70
 8007fbc:	0000ffff 	.word	0x0000ffff

08007fc0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007fc0:	b590      	push	{r4, r7, lr}
 8007fc2:	b089      	sub	sp, #36	; 0x24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	0019      	movs	r1, r3
 8007fcc:	1dfb      	adds	r3, r7, #7
 8007fce:	701a      	strb	r2, [r3, #0]
 8007fd0:	1dbb      	adds	r3, r7, #6
 8007fd2:	1c0a      	adds	r2, r1, #0
 8007fd4:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	330d      	adds	r3, #13
 8007fda:	1dba      	adds	r2, r7, #6
 8007fdc:	7812      	ldrb	r2, [r2, #0]
 8007fde:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	330b      	adds	r3, #11
 8007fe4:	220f      	movs	r2, #15
 8007fe6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	330c      	adds	r3, #12
 8007fec:	2200      	movs	r2, #0
 8007fee:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	331a      	adds	r3, #26
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	f7fe fec6 	bl	8006d88 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007ffc:	1dfb      	adds	r3, r7, #7
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	1e5a      	subs	r2, r3, #1
 8008002:	0013      	movs	r3, r2
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	189b      	adds	r3, r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	189b      	adds	r3, r3, r2
 800800c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800800e:	2316      	movs	r3, #22
 8008010:	18fb      	adds	r3, r7, r3
 8008012:	2200      	movs	r2, #0
 8008014:	801a      	strh	r2, [r3, #0]
 8008016:	2300      	movs	r3, #0
 8008018:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800801a:	2116      	movs	r1, #22
 800801c:	187b      	adds	r3, r7, r1
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	4a21      	ldr	r2, [pc, #132]	; (80080a8 <put_lfn+0xe8>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d008      	beq.n	8008038 <put_lfn+0x78>
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	61fa      	str	r2, [r7, #28]
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	18d2      	adds	r2, r2, r3
 8008032:	187b      	adds	r3, r7, r1
 8008034:	8812      	ldrh	r2, [r2, #0]
 8008036:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008038:	4a1c      	ldr	r2, [pc, #112]	; (80080ac <put_lfn+0xec>)
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	18d3      	adds	r3, r2, r3
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	001a      	movs	r2, r3
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	189a      	adds	r2, r3, r2
 8008046:	2416      	movs	r4, #22
 8008048:	193b      	adds	r3, r7, r4
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	0019      	movs	r1, r3
 800804e:	0010      	movs	r0, r2
 8008050:	f7fe fe9a 	bl	8006d88 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008054:	0022      	movs	r2, r4
 8008056:	18bb      	adds	r3, r7, r2
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d103      	bne.n	8008066 <put_lfn+0xa6>
 800805e:	18bb      	adds	r3, r7, r2
 8008060:	2201      	movs	r2, #1
 8008062:	4252      	negs	r2, r2
 8008064:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	3301      	adds	r3, #1
 800806a:	61bb      	str	r3, [r7, #24]
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	2b0c      	cmp	r3, #12
 8008070:	d9d3      	bls.n	800801a <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008072:	2316      	movs	r3, #22
 8008074:	18fb      	adds	r3, r7, r3
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	4a0b      	ldr	r2, [pc, #44]	; (80080a8 <put_lfn+0xe8>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d006      	beq.n	800808c <put_lfn+0xcc>
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	18d3      	adds	r3, r2, r3
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d105      	bne.n	8008098 <put_lfn+0xd8>
 800808c:	1dfb      	adds	r3, r7, #7
 800808e:	1dfa      	adds	r2, r7, #7
 8008090:	7812      	ldrb	r2, [r2, #0]
 8008092:	2140      	movs	r1, #64	; 0x40
 8008094:	430a      	orrs	r2, r1
 8008096:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	1dfa      	adds	r2, r7, #7
 800809c:	7812      	ldrb	r2, [r2, #0]
 800809e:	701a      	strb	r2, [r3, #0]
}
 80080a0:	46c0      	nop			; (mov r8, r8)
 80080a2:	46bd      	mov	sp, r7
 80080a4:	b009      	add	sp, #36	; 0x24
 80080a6:	bd90      	pop	{r4, r7, pc}
 80080a8:	0000ffff 	.word	0x0000ffff
 80080ac:	0800ee70 	.word	0x0800ee70

080080b0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08c      	sub	sp, #48	; 0x30
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	220b      	movs	r2, #11
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7fe fea7 	bl	8006e18 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b05      	cmp	r3, #5
 80080ce:	d92f      	bls.n	8008130 <gen_numname+0x80>
		sr = seq;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80080d4:	e026      	b.n	8008124 <gen_numname+0x74>
			wc = *lfn++;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	1c9a      	adds	r2, r3, #2
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	2222      	movs	r2, #34	; 0x22
 80080de:	18ba      	adds	r2, r7, r2
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 80080e4:	2300      	movs	r3, #0
 80080e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80080e8:	e019      	b.n	800811e <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	005a      	lsls	r2, r3, #1
 80080ee:	2022      	movs	r0, #34	; 0x22
 80080f0:	183b      	adds	r3, r7, r0
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	2101      	movs	r1, #1
 80080f6:	400b      	ands	r3, r1
 80080f8:	18d3      	adds	r3, r2, r3
 80080fa:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80080fc:	183b      	adds	r3, r7, r0
 80080fe:	183a      	adds	r2, r7, r0
 8008100:	8812      	ldrh	r2, [r2, #0]
 8008102:	0852      	lsrs	r2, r2, #1
 8008104:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 8008106:	69fa      	ldr	r2, [r7, #28]
 8008108:	2380      	movs	r3, #128	; 0x80
 800810a:	025b      	lsls	r3, r3, #9
 800810c:	4013      	ands	r3, r2
 800810e:	d003      	beq.n	8008118 <gen_numname+0x68>
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4a30      	ldr	r2, [pc, #192]	; (80081d4 <gen_numname+0x124>)
 8008114:	4053      	eors	r3, r2
 8008116:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	3301      	adds	r3, #1
 800811c:	62bb      	str	r3, [r7, #40]	; 0x28
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	2b0f      	cmp	r3, #15
 8008122:	d9e2      	bls.n	80080ea <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1d4      	bne.n	80080d6 <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008130:	2307      	movs	r3, #7
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	220f      	movs	r2, #15
 800813a:	4013      	ands	r3, r2
 800813c:	b2da      	uxtb	r2, r3
 800813e:	212f      	movs	r1, #47	; 0x2f
 8008140:	187b      	adds	r3, r7, r1
 8008142:	3230      	adds	r2, #48	; 0x30
 8008144:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8008146:	187b      	adds	r3, r7, r1
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	2b39      	cmp	r3, #57	; 0x39
 800814c:	d904      	bls.n	8008158 <gen_numname+0xa8>
 800814e:	187b      	adds	r3, r7, r1
 8008150:	187a      	adds	r2, r7, r1
 8008152:	7812      	ldrb	r2, [r2, #0]
 8008154:	3207      	adds	r2, #7
 8008156:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	1e5a      	subs	r2, r3, #1
 800815c:	62ba      	str	r2, [r7, #40]	; 0x28
 800815e:	2014      	movs	r0, #20
 8008160:	183a      	adds	r2, r7, r0
 8008162:	212f      	movs	r1, #47	; 0x2f
 8008164:	1879      	adds	r1, r7, r1
 8008166:	7809      	ldrb	r1, [r1, #0]
 8008168:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	091b      	lsrs	r3, r3, #4
 800816e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1de      	bne.n	8008134 <gen_numname+0x84>
	ns[i] = '~';
 8008176:	183a      	adds	r2, r7, r0
 8008178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817a:	18d3      	adds	r3, r2, r3
 800817c:	227e      	movs	r2, #126	; 0x7e
 800817e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008180:	2300      	movs	r3, #0
 8008182:	627b      	str	r3, [r7, #36]	; 0x24
 8008184:	e002      	b.n	800818c <gen_numname+0xdc>
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	3301      	adds	r3, #1
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
 800818c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	429a      	cmp	r2, r3
 8008192:	d205      	bcs.n	80081a0 <gen_numname+0xf0>
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	18d3      	adds	r3, r2, r3
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b20      	cmp	r3, #32
 800819e:	d1f2      	bne.n	8008186 <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	2b07      	cmp	r3, #7
 80081a4:	d806      	bhi.n	80081b4 <gen_numname+0x104>
 80081a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80081ac:	2214      	movs	r2, #20
 80081ae:	18ba      	adds	r2, r7, r2
 80081b0:	5cd1      	ldrb	r1, [r2, r3]
 80081b2:	e000      	b.n	80081b6 <gen_numname+0x106>
 80081b4:	2120      	movs	r1, #32
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	627a      	str	r2, [r7, #36]	; 0x24
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	18d3      	adds	r3, r2, r3
 80081c0:	1c0a      	adds	r2, r1, #0
 80081c2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	2b07      	cmp	r3, #7
 80081c8:	d9ea      	bls.n	80081a0 <gen_numname+0xf0>
}
 80081ca:	46c0      	nop			; (mov r8, r8)
 80081cc:	46c0      	nop			; (mov r8, r8)
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b00c      	add	sp, #48	; 0x30
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	00011021 	.word	0x00011021

080081d8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80081e0:	230f      	movs	r3, #15
 80081e2:	18fb      	adds	r3, r7, r3
 80081e4:	2200      	movs	r2, #0
 80081e6:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 80081e8:	230b      	movs	r3, #11
 80081ea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80081ec:	200f      	movs	r0, #15
 80081ee:	183b      	adds	r3, r7, r0
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	0852      	lsrs	r2, r2, #1
 80081f6:	01db      	lsls	r3, r3, #7
 80081f8:	4313      	orrs	r3, r2
 80081fa:	b2d9      	uxtb	r1, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	607a      	str	r2, [r7, #4]
 8008202:	781a      	ldrb	r2, [r3, #0]
 8008204:	183b      	adds	r3, r7, r0
 8008206:	188a      	adds	r2, r1, r2
 8008208:	701a      	strb	r2, [r3, #0]
	} while (--n);
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	3b01      	subs	r3, #1
 800820e:	60bb      	str	r3, [r7, #8]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1ea      	bne.n	80081ec <sum_sfn+0x14>
	return sum;
 8008216:	183b      	adds	r3, r7, r0
 8008218:	781b      	ldrb	r3, [r3, #0]
}
 800821a:	0018      	movs	r0, r3
 800821c:	46bd      	mov	sp, r7
 800821e:	b004      	add	sp, #16
 8008220:	bd80      	pop	{r7, pc}

08008222 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008222:	b5b0      	push	{r4, r5, r7, lr}
 8008224:	b086      	sub	sp, #24
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008230:	2517      	movs	r5, #23
 8008232:	197c      	adds	r4, r7, r5
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2100      	movs	r1, #0
 8008238:	0018      	movs	r0, r3
 800823a:	f7ff fc42 	bl	8007ac2 <dir_sdi>
 800823e:	0003      	movs	r3, r0
 8008240:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8008242:	197b      	adds	r3, r7, r5
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <dir_find+0x2e>
 800824a:	197b      	adds	r3, r7, r5
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	e0df      	b.n	8008410 <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008250:	2114      	movs	r1, #20
 8008252:	187b      	adds	r3, r7, r1
 8008254:	22ff      	movs	r2, #255	; 0xff
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	2315      	movs	r3, #21
 800825a:	18fb      	adds	r3, r7, r3
 800825c:	187a      	adds	r2, r7, r1
 800825e:	7812      	ldrb	r2, [r2, #0]
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	4252      	negs	r2, r2
 8008268:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	69da      	ldr	r2, [r3, #28]
 800826e:	2517      	movs	r5, #23
 8008270:	197c      	adds	r4, r7, r5
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	0011      	movs	r1, r2
 8008276:	0018      	movs	r0, r3
 8008278:	f7fe fff6 	bl	8007268 <move_window>
 800827c:	0003      	movs	r3, r0
 800827e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8008280:	0029      	movs	r1, r5
 8008282:	187b      	adds	r3, r7, r1
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d000      	beq.n	800828c <dir_find+0x6a>
 800828a:	e0b9      	b.n	8008400 <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a1a      	ldr	r2, [r3, #32]
 8008290:	2016      	movs	r0, #22
 8008292:	183b      	adds	r3, r7, r0
 8008294:	7812      	ldrb	r2, [r2, #0]
 8008296:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008298:	183b      	adds	r3, r7, r0
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d103      	bne.n	80082a8 <dir_find+0x86>
 80082a0:	187b      	adds	r3, r7, r1
 80082a2:	2204      	movs	r2, #4
 80082a4:	701a      	strb	r2, [r3, #0]
 80082a6:	e0b0      	b.n	800840a <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	330b      	adds	r3, #11
 80082ae:	781a      	ldrb	r2, [r3, #0]
 80082b0:	200f      	movs	r0, #15
 80082b2:	183b      	adds	r3, r7, r0
 80082b4:	213f      	movs	r1, #63	; 0x3f
 80082b6:	400a      	ands	r2, r1
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	0001      	movs	r1, r0
 80082be:	187a      	adds	r2, r7, r1
 80082c0:	7812      	ldrb	r2, [r2, #0]
 80082c2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80082c4:	2316      	movs	r3, #22
 80082c6:	18fb      	adds	r3, r7, r3
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2be5      	cmp	r3, #229	; 0xe5
 80082cc:	d008      	beq.n	80082e0 <dir_find+0xbe>
 80082ce:	187b      	adds	r3, r7, r1
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2208      	movs	r2, #8
 80082d4:	4013      	ands	r3, r2
 80082d6:	d00c      	beq.n	80082f2 <dir_find+0xd0>
 80082d8:	187b      	adds	r3, r7, r1
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b0f      	cmp	r3, #15
 80082de:	d008      	beq.n	80082f2 <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80082e0:	2315      	movs	r3, #21
 80082e2:	18fb      	adds	r3, r7, r3
 80082e4:	22ff      	movs	r2, #255	; 0xff
 80082e6:	701a      	strb	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	4252      	negs	r2, r2
 80082ee:	631a      	str	r2, [r3, #48]	; 0x30
 80082f0:	e077      	b.n	80083e2 <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80082f2:	230f      	movs	r3, #15
 80082f4:	18fb      	adds	r3, r7, r3
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	2b0f      	cmp	r3, #15
 80082fa:	d148      	bne.n	800838e <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	222f      	movs	r2, #47	; 0x2f
 8008300:	5c9b      	ldrb	r3, [r3, r2]
 8008302:	001a      	movs	r2, r3
 8008304:	2340      	movs	r3, #64	; 0x40
 8008306:	4013      	ands	r3, r2
 8008308:	d000      	beq.n	800830c <dir_find+0xea>
 800830a:	e06a      	b.n	80083e2 <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800830c:	2116      	movs	r1, #22
 800830e:	187b      	adds	r3, r7, r1
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2240      	movs	r2, #64	; 0x40
 8008314:	4013      	ands	r3, r2
 8008316:	d015      	beq.n	8008344 <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a1a      	ldr	r2, [r3, #32]
 800831c:	2314      	movs	r3, #20
 800831e:	18fb      	adds	r3, r7, r3
 8008320:	7b52      	ldrb	r2, [r2, #13]
 8008322:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008324:	187b      	adds	r3, r7, r1
 8008326:	0008      	movs	r0, r1
 8008328:	187a      	adds	r2, r7, r1
 800832a:	7812      	ldrb	r2, [r2, #0]
 800832c:	2140      	movs	r1, #64	; 0x40
 800832e:	438a      	bics	r2, r1
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	2315      	movs	r3, #21
 8008334:	18fb      	adds	r3, r7, r3
 8008336:	183a      	adds	r2, r7, r0
 8008338:	7812      	ldrb	r2, [r2, #0]
 800833a:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	695a      	ldr	r2, [r3, #20]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008344:	2316      	movs	r3, #22
 8008346:	18fa      	adds	r2, r7, r3
 8008348:	2415      	movs	r4, #21
 800834a:	193b      	adds	r3, r7, r4
 800834c:	7812      	ldrb	r2, [r2, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	429a      	cmp	r2, r3
 8008352:	d117      	bne.n	8008384 <dir_find+0x162>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a1b      	ldr	r3, [r3, #32]
 8008358:	330d      	adds	r3, #13
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2214      	movs	r2, #20
 800835e:	18ba      	adds	r2, r7, r2
 8008360:	7812      	ldrb	r2, [r2, #0]
 8008362:	429a      	cmp	r2, r3
 8008364:	d10e      	bne.n	8008384 <dir_find+0x162>
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	691a      	ldr	r2, [r3, #16]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	0019      	movs	r1, r3
 8008370:	0010      	movs	r0, r2
 8008372:	f7ff fda5 	bl	8007ec0 <cmp_lfn>
 8008376:	1e03      	subs	r3, r0, #0
 8008378:	d004      	beq.n	8008384 <dir_find+0x162>
 800837a:	193b      	adds	r3, r7, r4
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	3b01      	subs	r3, #1
 8008380:	b2da      	uxtb	r2, r3
 8008382:	e000      	b.n	8008386 <dir_find+0x164>
 8008384:	22ff      	movs	r2, #255	; 0xff
 8008386:	2315      	movs	r3, #21
 8008388:	18fb      	adds	r3, r7, r3
 800838a:	701a      	strb	r2, [r3, #0]
 800838c:	e029      	b.n	80083e2 <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800838e:	2315      	movs	r3, #21
 8008390:	18fb      	adds	r3, r7, r3
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10b      	bne.n	80083b0 <dir_find+0x18e>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	0018      	movs	r0, r3
 800839e:	f7ff ff1b 	bl	80081d8 <sum_sfn>
 80083a2:	0003      	movs	r3, r0
 80083a4:	001a      	movs	r2, r3
 80083a6:	2314      	movs	r3, #20
 80083a8:	18fb      	adds	r3, r7, r3
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d029      	beq.n	8008404 <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	222f      	movs	r2, #47	; 0x2f
 80083b4:	5c9b      	ldrb	r3, [r3, r2]
 80083b6:	001a      	movs	r2, r3
 80083b8:	2301      	movs	r3, #1
 80083ba:	4013      	ands	r3, r2
 80083bc:	d109      	bne.n	80083d2 <dir_find+0x1b0>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a18      	ldr	r0, [r3, #32]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3324      	adds	r3, #36	; 0x24
 80083c6:	220b      	movs	r2, #11
 80083c8:	0019      	movs	r1, r3
 80083ca:	f7fe fd5d 	bl	8006e88 <mem_cmp>
 80083ce:	1e03      	subs	r3, r0, #0
 80083d0:	d01a      	beq.n	8008408 <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80083d2:	2315      	movs	r3, #21
 80083d4:	18fb      	adds	r3, r7, r3
 80083d6:	22ff      	movs	r2, #255	; 0xff
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	4252      	negs	r2, r2
 80083e0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80083e2:	2517      	movs	r5, #23
 80083e4:	197c      	adds	r4, r7, r5
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2100      	movs	r1, #0
 80083ea:	0018      	movs	r0, r3
 80083ec:	f7ff fbf5 	bl	8007bda <dir_next>
 80083f0:	0003      	movs	r3, r0
 80083f2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80083f4:	197b      	adds	r3, r7, r5
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d100      	bne.n	80083fe <dir_find+0x1dc>
 80083fc:	e735      	b.n	800826a <dir_find+0x48>
 80083fe:	e004      	b.n	800840a <dir_find+0x1e8>
		if (res != FR_OK) break;
 8008400:	46c0      	nop			; (mov r8, r8)
 8008402:	e002      	b.n	800840a <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008404:	46c0      	nop			; (mov r8, r8)
 8008406:	e000      	b.n	800840a <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008408:	46c0      	nop			; (mov r8, r8)

	return res;
 800840a:	2317      	movs	r3, #23
 800840c:	18fb      	adds	r3, r7, r3
 800840e:	781b      	ldrb	r3, [r3, #0]
}
 8008410:	0018      	movs	r0, r3
 8008412:	46bd      	mov	sp, r7
 8008414:	b006      	add	sp, #24
 8008416:	bdb0      	pop	{r4, r5, r7, pc}

08008418 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008418:	b5b0      	push	{r4, r5, r7, lr}
 800841a:	b08c      	sub	sp, #48	; 0x30
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	222f      	movs	r2, #47	; 0x2f
 800842a:	5c9b      	ldrb	r3, [r3, r2]
 800842c:	001a      	movs	r2, r3
 800842e:	23a0      	movs	r3, #160	; 0xa0
 8008430:	4013      	ands	r3, r2
 8008432:	d001      	beq.n	8008438 <dir_register+0x20>
 8008434:	2306      	movs	r3, #6
 8008436:	e0fb      	b.n	8008630 <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008438:	2300      	movs	r3, #0
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
 800843c:	e002      	b.n	8008444 <dir_register+0x2c>
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	3301      	adds	r3, #1
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	691a      	ldr	r2, [r3, #16]
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	005b      	lsls	r3, r3, #1
 800844c:	18d3      	adds	r3, r2, r3
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1f4      	bne.n	800843e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3324      	adds	r3, #36	; 0x24
 8008458:	0019      	movs	r1, r3
 800845a:	240c      	movs	r4, #12
 800845c:	193b      	adds	r3, r7, r4
 800845e:	220c      	movs	r2, #12
 8008460:	0018      	movs	r0, r3
 8008462:	f7fe fcd9 	bl	8006e18 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008466:	193b      	adds	r3, r7, r4
 8008468:	7adb      	ldrb	r3, [r3, #11]
 800846a:	001a      	movs	r2, r3
 800846c:	2301      	movs	r3, #1
 800846e:	4013      	ands	r3, r2
 8008470:	d037      	beq.n	80084e2 <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	222f      	movs	r2, #47	; 0x2f
 8008476:	2140      	movs	r1, #64	; 0x40
 8008478:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 800847a:	2301      	movs	r3, #1
 800847c:	62bb      	str	r3, [r7, #40]	; 0x28
 800847e:	e018      	b.n	80084b2 <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	3324      	adds	r3, #36	; 0x24
 8008484:	0018      	movs	r0, r3
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	210c      	movs	r1, #12
 800848e:	1879      	adds	r1, r7, r1
 8008490:	f7ff fe0e 	bl	80080b0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008494:	252f      	movs	r5, #47	; 0x2f
 8008496:	197c      	adds	r4, r7, r5
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	0018      	movs	r0, r3
 800849c:	f7ff fec1 	bl	8008222 <dir_find>
 80084a0:	0003      	movs	r3, r0
 80084a2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80084a4:	197b      	adds	r3, r7, r5
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d106      	bne.n	80084ba <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	3301      	adds	r3, #1
 80084b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	2b63      	cmp	r3, #99	; 0x63
 80084b6:	d9e3      	bls.n	8008480 <dir_register+0x68>
 80084b8:	e000      	b.n	80084bc <dir_register+0xa4>
			if (res != FR_OK) break;
 80084ba:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	2b64      	cmp	r3, #100	; 0x64
 80084c0:	d101      	bne.n	80084c6 <dir_register+0xae>
 80084c2:	2307      	movs	r3, #7
 80084c4:	e0b4      	b.n	8008630 <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80084c6:	222f      	movs	r2, #47	; 0x2f
 80084c8:	18bb      	adds	r3, r7, r2
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d002      	beq.n	80084d6 <dir_register+0xbe>
 80084d0:	18bb      	adds	r3, r7, r2
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	e0ac      	b.n	8008630 <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80084d6:	230c      	movs	r3, #12
 80084d8:	18fb      	adds	r3, r7, r3
 80084da:	7ad9      	ldrb	r1, [r3, #11]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	222f      	movs	r2, #47	; 0x2f
 80084e0:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80084e2:	230c      	movs	r3, #12
 80084e4:	18fb      	adds	r3, r7, r3
 80084e6:	7adb      	ldrb	r3, [r3, #11]
 80084e8:	001a      	movs	r2, r3
 80084ea:	2302      	movs	r3, #2
 80084ec:	4013      	ands	r3, r2
 80084ee:	d008      	beq.n	8008502 <dir_register+0xea>
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	330c      	adds	r3, #12
 80084f4:	210d      	movs	r1, #13
 80084f6:	0018      	movs	r0, r3
 80084f8:	f7f7 fe22 	bl	8000140 <__udivsi3>
 80084fc:	0003      	movs	r3, r0
 80084fe:	3301      	adds	r3, #1
 8008500:	e000      	b.n	8008504 <dir_register+0xec>
 8008502:	2301      	movs	r3, #1
 8008504:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008506:	252f      	movs	r5, #47	; 0x2f
 8008508:	197c      	adds	r4, r7, r5
 800850a:	6a3a      	ldr	r2, [r7, #32]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	0011      	movs	r1, r2
 8008510:	0018      	movs	r0, r3
 8008512:	f7ff fc3e 	bl	8007d92 <dir_alloc>
 8008516:	0003      	movs	r3, r0
 8008518:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800851a:	0029      	movs	r1, r5
 800851c:	187b      	adds	r3, r7, r1
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d153      	bne.n	80085cc <dir_register+0x1b4>
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	3b01      	subs	r3, #1
 8008528:	623b      	str	r3, [r7, #32]
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d04d      	beq.n	80085cc <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	695a      	ldr	r2, [r3, #20]
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	015b      	lsls	r3, r3, #5
 8008538:	1ad2      	subs	r2, r2, r3
 800853a:	000d      	movs	r5, r1
 800853c:	187c      	adds	r4, r7, r1
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	0011      	movs	r1, r2
 8008542:	0018      	movs	r0, r3
 8008544:	f7ff fabd 	bl	8007ac2 <dir_sdi>
 8008548:	0003      	movs	r3, r0
 800854a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800854c:	197b      	adds	r3, r7, r5
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d13b      	bne.n	80085cc <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	3324      	adds	r3, #36	; 0x24
 8008558:	221b      	movs	r2, #27
 800855a:	18bc      	adds	r4, r7, r2
 800855c:	0018      	movs	r0, r3
 800855e:	f7ff fe3b 	bl	80081d8 <sum_sfn>
 8008562:	0003      	movs	r3, r0
 8008564:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	69da      	ldr	r2, [r3, #28]
 800856a:	252f      	movs	r5, #47	; 0x2f
 800856c:	197c      	adds	r4, r7, r5
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	0011      	movs	r1, r2
 8008572:	0018      	movs	r0, r3
 8008574:	f7fe fe78 	bl	8007268 <move_window>
 8008578:	0003      	movs	r3, r0
 800857a:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 800857c:	002c      	movs	r4, r5
 800857e:	193b      	adds	r3, r7, r4
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d121      	bne.n	80085ca <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	6918      	ldr	r0, [r3, #16]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a19      	ldr	r1, [r3, #32]
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	b2da      	uxtb	r2, r3
 8008592:	231b      	movs	r3, #27
 8008594:	18fb      	adds	r3, r7, r3
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	f7ff fd12 	bl	8007fc0 <put_lfn>
				fs->wflag = 1;
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	2201      	movs	r2, #1
 80085a0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80085a2:	0025      	movs	r5, r4
 80085a4:	193c      	adds	r4, r7, r4
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2100      	movs	r1, #0
 80085aa:	0018      	movs	r0, r3
 80085ac:	f7ff fb15 	bl	8007bda <dir_next>
 80085b0:	0003      	movs	r3, r0
 80085b2:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 80085b4:	197b      	adds	r3, r7, r5
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d107      	bne.n	80085cc <dir_register+0x1b4>
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	3b01      	subs	r3, #1
 80085c0:	623b      	str	r3, [r7, #32]
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1ce      	bne.n	8008566 <dir_register+0x14e>
 80085c8:	e000      	b.n	80085cc <dir_register+0x1b4>
				if (res != FR_OK) break;
 80085ca:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80085cc:	252f      	movs	r5, #47	; 0x2f
 80085ce:	197b      	adds	r3, r7, r5
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d129      	bne.n	800862a <dir_register+0x212>
		res = move_window(fs, dp->sect);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	69da      	ldr	r2, [r3, #28]
 80085da:	197c      	adds	r4, r7, r5
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	0011      	movs	r1, r2
 80085e0:	0018      	movs	r0, r3
 80085e2:	f7fe fe41 	bl	8007268 <move_window>
 80085e6:	0003      	movs	r3, r0
 80085e8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80085ea:	197b      	adds	r3, r7, r5
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d11b      	bne.n	800862a <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	2220      	movs	r2, #32
 80085f8:	2100      	movs	r1, #0
 80085fa:	0018      	movs	r0, r3
 80085fc:	f7fe fc2b 	bl	8006e56 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a18      	ldr	r0, [r3, #32]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3324      	adds	r3, #36	; 0x24
 8008608:	220b      	movs	r2, #11
 800860a:	0019      	movs	r1, r3
 800860c:	f7fe fc04 	bl	8006e18 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	222f      	movs	r2, #47	; 0x2f
 8008614:	5c9a      	ldrb	r2, [r3, r2]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	330c      	adds	r3, #12
 800861c:	2118      	movs	r1, #24
 800861e:	400a      	ands	r2, r1
 8008620:	b2d2      	uxtb	r2, r2
 8008622:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	2201      	movs	r2, #1
 8008628:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800862a:	232f      	movs	r3, #47	; 0x2f
 800862c:	18fb      	adds	r3, r7, r3
 800862e:	781b      	ldrb	r3, [r3, #0]
}
 8008630:	0018      	movs	r0, r3
 8008632:	46bd      	mov	sp, r7
 8008634:	b00c      	add	sp, #48	; 0x30
 8008636:	bdb0      	pop	{r4, r5, r7, pc}

08008638 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008638:	b5b0      	push	{r4, r5, r7, lr}
 800863a:	b08a      	sub	sp, #40	; 0x28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	613b      	str	r3, [r7, #16]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	2300      	movs	r3, #0
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	61ba      	str	r2, [r7, #24]
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	18d3      	adds	r3, r2, r3
 8008662:	781a      	ldrb	r2, [r3, #0]
 8008664:	2124      	movs	r1, #36	; 0x24
 8008666:	187b      	adds	r3, r7, r1
 8008668:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 800866a:	000a      	movs	r2, r1
 800866c:	18bb      	adds	r3, r7, r2
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	2b1f      	cmp	r3, #31
 8008672:	d94e      	bls.n	8008712 <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008674:	18bb      	adds	r3, r7, r2
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	2b2f      	cmp	r3, #47	; 0x2f
 800867a:	d007      	beq.n	800868c <create_name+0x54>
 800867c:	18bb      	adds	r3, r7, r2
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	2b5c      	cmp	r3, #92	; 0x5c
 8008682:	d110      	bne.n	80086a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008684:	e002      	b.n	800868c <create_name+0x54>
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	3301      	adds	r3, #1
 800868a:	61bb      	str	r3, [r7, #24]
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	18d3      	adds	r3, r2, r3
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b2f      	cmp	r3, #47	; 0x2f
 8008696:	d0f6      	beq.n	8008686 <create_name+0x4e>
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	18d3      	adds	r3, r2, r3
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b5c      	cmp	r3, #92	; 0x5c
 80086a2:	d0f0      	beq.n	8008686 <create_name+0x4e>
			break;
 80086a4:	e036      	b.n	8008714 <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2bfe      	cmp	r3, #254	; 0xfe
 80086aa:	d901      	bls.n	80086b0 <create_name+0x78>
 80086ac:	2306      	movs	r3, #6
 80086ae:	e1c2      	b.n	8008a36 <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 80086b0:	2524      	movs	r5, #36	; 0x24
 80086b2:	197b      	adds	r3, r7, r5
 80086b4:	197a      	adds	r2, r7, r5
 80086b6:	8812      	ldrh	r2, [r2, #0]
 80086b8:	21ff      	movs	r1, #255	; 0xff
 80086ba:	400a      	ands	r2, r1
 80086bc:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80086be:	197c      	adds	r4, r7, r5
 80086c0:	197b      	adds	r3, r7, r5
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	2101      	movs	r1, #1
 80086c6:	0018      	movs	r0, r3
 80086c8:	f001 fd18 	bl	800a0fc <ff_convert>
 80086cc:	0003      	movs	r3, r0
 80086ce:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80086d0:	197b      	adds	r3, r7, r5
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <create_name+0xa4>
 80086d8:	2306      	movs	r3, #6
 80086da:	e1ac      	b.n	8008a36 <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80086dc:	2224      	movs	r2, #36	; 0x24
 80086de:	18bb      	adds	r3, r7, r2
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	2b7f      	cmp	r3, #127	; 0x7f
 80086e4:	d80a      	bhi.n	80086fc <create_name+0xc4>
 80086e6:	18bb      	adds	r3, r7, r2
 80086e8:	881a      	ldrh	r2, [r3, #0]
 80086ea:	4ba7      	ldr	r3, [pc, #668]	; (8008988 <create_name+0x350>)
 80086ec:	0011      	movs	r1, r2
 80086ee:	0018      	movs	r0, r3
 80086f0:	f7fe fbef 	bl	8006ed2 <chk_chr>
 80086f4:	1e03      	subs	r3, r0, #0
 80086f6:	d001      	beq.n	80086fc <create_name+0xc4>
 80086f8:	2306      	movs	r3, #6
 80086fa:	e19c      	b.n	8008a36 <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	617a      	str	r2, [r7, #20]
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	18d3      	adds	r3, r2, r3
 8008708:	2224      	movs	r2, #36	; 0x24
 800870a:	18ba      	adds	r2, r7, r2
 800870c:	8812      	ldrh	r2, [r2, #0]
 800870e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008710:	e7a2      	b.n	8008658 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008712:	46c0      	nop			; (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	18d2      	adds	r2, r2, r3
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800871e:	2324      	movs	r3, #36	; 0x24
 8008720:	18fb      	adds	r3, r7, r3
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	2b1f      	cmp	r3, #31
 8008726:	d801      	bhi.n	800872c <create_name+0xf4>
 8008728:	2204      	movs	r2, #4
 800872a:	e000      	b.n	800872e <create_name+0xf6>
 800872c:	2200      	movs	r2, #0
 800872e:	2327      	movs	r3, #39	; 0x27
 8008730:	18fb      	adds	r3, r7, r3
 8008732:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008734:	e016      	b.n	8008764 <create_name+0x12c>
		w = lfn[di - 1];
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	4a94      	ldr	r2, [pc, #592]	; (800898c <create_name+0x354>)
 800873a:	4694      	mov	ip, r2
 800873c:	4463      	add	r3, ip
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	18d2      	adds	r2, r2, r3
 8008744:	2124      	movs	r1, #36	; 0x24
 8008746:	187b      	adds	r3, r7, r1
 8008748:	8812      	ldrh	r2, [r2, #0]
 800874a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 800874c:	000a      	movs	r2, r1
 800874e:	18bb      	adds	r3, r7, r2
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	2b20      	cmp	r3, #32
 8008754:	d003      	beq.n	800875e <create_name+0x126>
 8008756:	18bb      	adds	r3, r7, r2
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	2b2e      	cmp	r3, #46	; 0x2e
 800875c:	d106      	bne.n	800876c <create_name+0x134>
		di--;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	3b01      	subs	r3, #1
 8008762:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1e5      	bne.n	8008736 <create_name+0xfe>
 800876a:	e000      	b.n	800876e <create_name+0x136>
		if (w != ' ' && w != '.') break;
 800876c:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	18d3      	adds	r3, r2, r3
 8008776:	2200      	movs	r2, #0
 8008778:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <create_name+0x14c>
 8008780:	2306      	movs	r3, #6
 8008782:	e158      	b.n	8008a36 <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3324      	adds	r3, #36	; 0x24
 8008788:	220b      	movs	r2, #11
 800878a:	2120      	movs	r1, #32
 800878c:	0018      	movs	r0, r3
 800878e:	f7fe fb62 	bl	8006e56 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008792:	2300      	movs	r3, #0
 8008794:	61bb      	str	r3, [r7, #24]
 8008796:	e002      	b.n	800879e <create_name+0x166>
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	3301      	adds	r3, #1
 800879c:	61bb      	str	r3, [r7, #24]
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	005b      	lsls	r3, r3, #1
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	18d3      	adds	r3, r2, r3
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	2b20      	cmp	r3, #32
 80087aa:	d0f5      	beq.n	8008798 <create_name+0x160>
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	18d3      	adds	r3, r2, r3
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	2b2e      	cmp	r3, #46	; 0x2e
 80087b8:	d0ee      	beq.n	8008798 <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00a      	beq.n	80087d6 <create_name+0x19e>
 80087c0:	2227      	movs	r2, #39	; 0x27
 80087c2:	18bb      	adds	r3, r7, r2
 80087c4:	18ba      	adds	r2, r7, r2
 80087c6:	7812      	ldrb	r2, [r2, #0]
 80087c8:	2103      	movs	r1, #3
 80087ca:	430a      	orrs	r2, r1
 80087cc:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80087ce:	e002      	b.n	80087d6 <create_name+0x19e>
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	617b      	str	r3, [r7, #20]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d009      	beq.n	80087f0 <create_name+0x1b8>
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	4a6b      	ldr	r2, [pc, #428]	; (800898c <create_name+0x354>)
 80087e0:	4694      	mov	ip, r2
 80087e2:	4463      	add	r3, ip
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	18d3      	adds	r3, r2, r3
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	2b2e      	cmp	r3, #46	; 0x2e
 80087ee:	d1ef      	bne.n	80087d0 <create_name+0x198>

	i = b = 0; ni = 8;
 80087f0:	2326      	movs	r3, #38	; 0x26
 80087f2:	18fb      	adds	r3, r7, r3
 80087f4:	2200      	movs	r2, #0
 80087f6:	701a      	strb	r2, [r3, #0]
 80087f8:	2300      	movs	r3, #0
 80087fa:	623b      	str	r3, [r7, #32]
 80087fc:	2308      	movs	r3, #8
 80087fe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	61ba      	str	r2, [r7, #24]
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	18d2      	adds	r2, r2, r3
 800880c:	2124      	movs	r1, #36	; 0x24
 800880e:	187b      	adds	r3, r7, r1
 8008810:	8812      	ldrh	r2, [r2, #0]
 8008812:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 8008814:	000a      	movs	r2, r1
 8008816:	18bb      	adds	r3, r7, r2
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d100      	bne.n	8008820 <create_name+0x1e8>
 800881e:	e0b1      	b.n	8008984 <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008820:	18bb      	adds	r3, r7, r2
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	2b20      	cmp	r3, #32
 8008826:	d007      	beq.n	8008838 <create_name+0x200>
 8008828:	18bb      	adds	r3, r7, r2
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	2b2e      	cmp	r3, #46	; 0x2e
 800882e:	d10b      	bne.n	8008848 <create_name+0x210>
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	429a      	cmp	r2, r3
 8008836:	d007      	beq.n	8008848 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 8008838:	2227      	movs	r2, #39	; 0x27
 800883a:	18bb      	adds	r3, r7, r2
 800883c:	18ba      	adds	r2, r7, r2
 800883e:	7812      	ldrb	r2, [r2, #0]
 8008840:	2103      	movs	r1, #3
 8008842:	430a      	orrs	r2, r1
 8008844:	701a      	strb	r2, [r3, #0]
 8008846:	e09c      	b.n	8008982 <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008848:	6a3a      	ldr	r2, [r7, #32]
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	429a      	cmp	r2, r3
 800884e:	d203      	bcs.n	8008858 <create_name+0x220>
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	429a      	cmp	r2, r3
 8008856:	d127      	bne.n	80088a8 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	2b0b      	cmp	r3, #11
 800885c:	d107      	bne.n	800886e <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 800885e:	2227      	movs	r2, #39	; 0x27
 8008860:	18bb      	adds	r3, r7, r2
 8008862:	18ba      	adds	r2, r7, r2
 8008864:	7812      	ldrb	r2, [r2, #0]
 8008866:	2103      	movs	r1, #3
 8008868:	430a      	orrs	r2, r1
 800886a:	701a      	strb	r2, [r3, #0]
 800886c:	e095      	b.n	800899a <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	429a      	cmp	r2, r3
 8008874:	d006      	beq.n	8008884 <create_name+0x24c>
 8008876:	2227      	movs	r2, #39	; 0x27
 8008878:	18bb      	adds	r3, r7, r2
 800887a:	18ba      	adds	r2, r7, r2
 800887c:	7812      	ldrb	r2, [r2, #0]
 800887e:	2103      	movs	r1, #3
 8008880:	430a      	orrs	r2, r1
 8008882:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	429a      	cmp	r2, r3
 800888a:	d900      	bls.n	800888e <create_name+0x256>
 800888c:	e084      	b.n	8008998 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	61bb      	str	r3, [r7, #24]
 8008892:	2308      	movs	r3, #8
 8008894:	623b      	str	r3, [r7, #32]
 8008896:	230b      	movs	r3, #11
 8008898:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800889a:	2226      	movs	r2, #38	; 0x26
 800889c:	18bb      	adds	r3, r7, r2
 800889e:	18ba      	adds	r2, r7, r2
 80088a0:	7812      	ldrb	r2, [r2, #0]
 80088a2:	0092      	lsls	r2, r2, #2
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	e06c      	b.n	8008982 <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80088a8:	2524      	movs	r5, #36	; 0x24
 80088aa:	197b      	adds	r3, r7, r5
 80088ac:	881b      	ldrh	r3, [r3, #0]
 80088ae:	2b7f      	cmp	r3, #127	; 0x7f
 80088b0:	d91a      	bls.n	80088e8 <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80088b2:	197c      	adds	r4, r7, r5
 80088b4:	197b      	adds	r3, r7, r5
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	2100      	movs	r1, #0
 80088ba:	0018      	movs	r0, r3
 80088bc:	f001 fc1e 	bl	800a0fc <ff_convert>
 80088c0:	0003      	movs	r3, r0
 80088c2:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80088c4:	197b      	adds	r3, r7, r5
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d006      	beq.n	80088da <create_name+0x2a2>
 80088cc:	197b      	adds	r3, r7, r5
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	3b80      	subs	r3, #128	; 0x80
 80088d2:	4a2f      	ldr	r2, [pc, #188]	; (8008990 <create_name+0x358>)
 80088d4:	5cd2      	ldrb	r2, [r2, r3]
 80088d6:	197b      	adds	r3, r7, r5
 80088d8:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80088da:	2227      	movs	r2, #39	; 0x27
 80088dc:	18bb      	adds	r3, r7, r2
 80088de:	18ba      	adds	r2, r7, r2
 80088e0:	7812      	ldrb	r2, [r2, #0]
 80088e2:	2102      	movs	r1, #2
 80088e4:	430a      	orrs	r2, r1
 80088e6:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80088e8:	2224      	movs	r2, #36	; 0x24
 80088ea:	18bb      	adds	r3, r7, r2
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d008      	beq.n	8008904 <create_name+0x2cc>
 80088f2:	18bb      	adds	r3, r7, r2
 80088f4:	881a      	ldrh	r2, [r3, #0]
 80088f6:	4b27      	ldr	r3, [pc, #156]	; (8008994 <create_name+0x35c>)
 80088f8:	0011      	movs	r1, r2
 80088fa:	0018      	movs	r0, r3
 80088fc:	f7fe fae9 	bl	8006ed2 <chk_chr>
 8008900:	1e03      	subs	r3, r0, #0
 8008902:	d00b      	beq.n	800891c <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008904:	2324      	movs	r3, #36	; 0x24
 8008906:	18fb      	adds	r3, r7, r3
 8008908:	225f      	movs	r2, #95	; 0x5f
 800890a:	801a      	strh	r2, [r3, #0]
 800890c:	2227      	movs	r2, #39	; 0x27
 800890e:	18bb      	adds	r3, r7, r2
 8008910:	18ba      	adds	r2, r7, r2
 8008912:	7812      	ldrb	r2, [r2, #0]
 8008914:	2103      	movs	r1, #3
 8008916:	430a      	orrs	r2, r1
 8008918:	701a      	strb	r2, [r3, #0]
 800891a:	e025      	b.n	8008968 <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800891c:	2224      	movs	r2, #36	; 0x24
 800891e:	18bb      	adds	r3, r7, r2
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	2b40      	cmp	r3, #64	; 0x40
 8008924:	d90b      	bls.n	800893e <create_name+0x306>
 8008926:	18bb      	adds	r3, r7, r2
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	2b5a      	cmp	r3, #90	; 0x5a
 800892c:	d807      	bhi.n	800893e <create_name+0x306>
					b |= 2;
 800892e:	2226      	movs	r2, #38	; 0x26
 8008930:	18bb      	adds	r3, r7, r2
 8008932:	18ba      	adds	r2, r7, r2
 8008934:	7812      	ldrb	r2, [r2, #0]
 8008936:	2102      	movs	r1, #2
 8008938:	430a      	orrs	r2, r1
 800893a:	701a      	strb	r2, [r3, #0]
 800893c:	e014      	b.n	8008968 <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800893e:	2024      	movs	r0, #36	; 0x24
 8008940:	183b      	adds	r3, r7, r0
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	2b60      	cmp	r3, #96	; 0x60
 8008946:	d90f      	bls.n	8008968 <create_name+0x330>
 8008948:	183b      	adds	r3, r7, r0
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	2b7a      	cmp	r3, #122	; 0x7a
 800894e:	d80b      	bhi.n	8008968 <create_name+0x330>
						b |= 1; w -= 0x20;
 8008950:	2226      	movs	r2, #38	; 0x26
 8008952:	18bb      	adds	r3, r7, r2
 8008954:	18ba      	adds	r2, r7, r2
 8008956:	7812      	ldrb	r2, [r2, #0]
 8008958:	2101      	movs	r1, #1
 800895a:	430a      	orrs	r2, r1
 800895c:	701a      	strb	r2, [r3, #0]
 800895e:	183b      	adds	r3, r7, r0
 8008960:	183a      	adds	r2, r7, r0
 8008962:	8812      	ldrh	r2, [r2, #0]
 8008964:	3a20      	subs	r2, #32
 8008966:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	623a      	str	r2, [r7, #32]
 800896e:	2224      	movs	r2, #36	; 0x24
 8008970:	18ba      	adds	r2, r7, r2
 8008972:	8812      	ldrh	r2, [r2, #0]
 8008974:	b2d0      	uxtb	r0, r2
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	2124      	movs	r1, #36	; 0x24
 800897a:	18d3      	adds	r3, r2, r3
 800897c:	185b      	adds	r3, r3, r1
 800897e:	1c02      	adds	r2, r0, #0
 8008980:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8008982:	e73d      	b.n	8008800 <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 8008984:	46c0      	nop			; (mov r8, r8)
 8008986:	e008      	b.n	800899a <create_name+0x362>
 8008988:	0800ec94 	.word	0x0800ec94
 800898c:	7fffffff 	.word	0x7fffffff
 8008990:	0800edf0 	.word	0x0800edf0
 8008994:	0800eca0 	.word	0x0800eca0
			if (si > di) break;			/* No extension */
 8008998:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2224      	movs	r2, #36	; 0x24
 800899e:	5c9b      	ldrb	r3, [r3, r2]
 80089a0:	2be5      	cmp	r3, #229	; 0xe5
 80089a2:	d103      	bne.n	80089ac <create_name+0x374>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2224      	movs	r2, #36	; 0x24
 80089a8:	2105      	movs	r1, #5
 80089aa:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	2b08      	cmp	r3, #8
 80089b0:	d105      	bne.n	80089be <create_name+0x386>
 80089b2:	2226      	movs	r2, #38	; 0x26
 80089b4:	18bb      	adds	r3, r7, r2
 80089b6:	18ba      	adds	r2, r7, r2
 80089b8:	7812      	ldrb	r2, [r2, #0]
 80089ba:	0092      	lsls	r2, r2, #2
 80089bc:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80089be:	2126      	movs	r1, #38	; 0x26
 80089c0:	187b      	adds	r3, r7, r1
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	220c      	movs	r2, #12
 80089c6:	4013      	ands	r3, r2
 80089c8:	2b0c      	cmp	r3, #12
 80089ca:	d005      	beq.n	80089d8 <create_name+0x3a0>
 80089cc:	187b      	adds	r3, r7, r1
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2203      	movs	r2, #3
 80089d2:	4013      	ands	r3, r2
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d106      	bne.n	80089e6 <create_name+0x3ae>
 80089d8:	2227      	movs	r2, #39	; 0x27
 80089da:	18bb      	adds	r3, r7, r2
 80089dc:	18ba      	adds	r2, r7, r2
 80089de:	7812      	ldrb	r2, [r2, #0]
 80089e0:	2102      	movs	r1, #2
 80089e2:	430a      	orrs	r2, r1
 80089e4:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80089e6:	2127      	movs	r1, #39	; 0x27
 80089e8:	187b      	adds	r3, r7, r1
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2202      	movs	r2, #2
 80089ee:	4013      	ands	r3, r2
 80089f0:	d11a      	bne.n	8008a28 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80089f2:	2326      	movs	r3, #38	; 0x26
 80089f4:	18fb      	adds	r3, r7, r3
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	2203      	movs	r2, #3
 80089fa:	4013      	ands	r3, r2
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d105      	bne.n	8008a0c <create_name+0x3d4>
 8008a00:	187b      	adds	r3, r7, r1
 8008a02:	187a      	adds	r2, r7, r1
 8008a04:	7812      	ldrb	r2, [r2, #0]
 8008a06:	2110      	movs	r1, #16
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008a0c:	2326      	movs	r3, #38	; 0x26
 8008a0e:	18fb      	adds	r3, r7, r3
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	220c      	movs	r2, #12
 8008a14:	4013      	ands	r3, r2
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	d106      	bne.n	8008a28 <create_name+0x3f0>
 8008a1a:	2227      	movs	r2, #39	; 0x27
 8008a1c:	18bb      	adds	r3, r7, r2
 8008a1e:	18ba      	adds	r2, r7, r2
 8008a20:	7812      	ldrb	r2, [r2, #0]
 8008a22:	2108      	movs	r1, #8
 8008a24:	430a      	orrs	r2, r1
 8008a26:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2227      	movs	r2, #39	; 0x27
 8008a2c:	18ba      	adds	r2, r7, r2
 8008a2e:	212f      	movs	r1, #47	; 0x2f
 8008a30:	7812      	ldrb	r2, [r2, #0]
 8008a32:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 8008a34:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008a36:	0018      	movs	r0, r3
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	b00a      	add	sp, #40	; 0x28
 8008a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a3e:	46c0      	nop			; (mov r8, r8)

08008a40 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008a40:	b5b0      	push	{r4, r5, r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008a54:	e002      	b.n	8008a5c <follow_path+0x1c>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	603b      	str	r3, [r7, #0]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b2f      	cmp	r3, #47	; 0x2f
 8008a62:	d0f8      	beq.n	8008a56 <follow_path+0x16>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2b5c      	cmp	r3, #92	; 0x5c
 8008a6a:	d0f4      	beq.n	8008a56 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	2b1f      	cmp	r3, #31
 8008a78:	d80d      	bhi.n	8008a96 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	222f      	movs	r2, #47	; 0x2f
 8008a7e:	2180      	movs	r1, #128	; 0x80
 8008a80:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 8008a82:	2317      	movs	r3, #23
 8008a84:	18fc      	adds	r4, r7, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2100      	movs	r1, #0
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	f7ff f819 	bl	8007ac2 <dir_sdi>
 8008a90:	0003      	movs	r3, r0
 8008a92:	7023      	strb	r3, [r4, #0]
 8008a94:	e057      	b.n	8008b46 <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008a96:	2517      	movs	r5, #23
 8008a98:	197c      	adds	r4, r7, r5
 8008a9a:	003a      	movs	r2, r7
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	0011      	movs	r1, r2
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	f7ff fdc9 	bl	8008638 <create_name>
 8008aa6:	0003      	movs	r3, r0
 8008aa8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8008aaa:	197b      	adds	r3, r7, r5
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d144      	bne.n	8008b3c <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008ab2:	197c      	adds	r4, r7, r5
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	f7ff fbb3 	bl	8008222 <dir_find>
 8008abc:	0003      	movs	r3, r0
 8008abe:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8008ac0:	200b      	movs	r0, #11
 8008ac2:	183b      	adds	r3, r7, r0
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	212f      	movs	r1, #47	; 0x2f
 8008ac8:	5c52      	ldrb	r2, [r2, r1]
 8008aca:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8008acc:	197b      	adds	r3, r7, r5
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00c      	beq.n	8008aee <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008ad4:	197b      	adds	r3, r7, r5
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d131      	bne.n	8008b40 <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008adc:	183b      	adds	r3, r7, r0
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2204      	movs	r2, #4
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	d12c      	bne.n	8008b40 <follow_path+0x100>
 8008ae6:	197b      	adds	r3, r7, r5
 8008ae8:	2205      	movs	r2, #5
 8008aea:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8008aec:	e028      	b.n	8008b40 <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008aee:	230b      	movs	r3, #11
 8008af0:	18fb      	adds	r3, r7, r3
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2204      	movs	r2, #4
 8008af6:	4013      	ands	r3, r2
 8008af8:	d124      	bne.n	8008b44 <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	799b      	ldrb	r3, [r3, #6]
 8008afe:	001a      	movs	r2, r3
 8008b00:	2310      	movs	r3, #16
 8008b02:	4013      	ands	r3, r2
 8008b04:	d104      	bne.n	8008b10 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8008b06:	2317      	movs	r3, #23
 8008b08:	18fb      	adds	r3, r7, r3
 8008b0a:	2205      	movs	r2, #5
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	e01a      	b.n	8008b46 <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3338      	adds	r3, #56	; 0x38
 8008b14:	001c      	movs	r4, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	695a      	ldr	r2, [r3, #20]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	899b      	ldrh	r3, [r3, #12]
 8008b1e:	0019      	movs	r1, r3
 8008b20:	0010      	movs	r0, r2
 8008b22:	f7f7 fb93 	bl	800024c <__aeabi_uidivmod>
 8008b26:	000b      	movs	r3, r1
 8008b28:	18e2      	adds	r2, r4, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	0011      	movs	r1, r2
 8008b2e:	0018      	movs	r0, r3
 8008b30:	f7ff f987 	bl	8007e42 <ld_clust>
 8008b34:	0002      	movs	r2, r0
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008b3a:	e7ac      	b.n	8008a96 <follow_path+0x56>
			if (res != FR_OK) break;
 8008b3c:	46c0      	nop			; (mov r8, r8)
 8008b3e:	e002      	b.n	8008b46 <follow_path+0x106>
				break;
 8008b40:	46c0      	nop			; (mov r8, r8)
 8008b42:	e000      	b.n	8008b46 <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008b44:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 8008b46:	2317      	movs	r3, #23
 8008b48:	18fb      	adds	r3, r7, r3
 8008b4a:	781b      	ldrb	r3, [r3, #0]
}
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	b006      	add	sp, #24
 8008b52:	bdb0      	pop	{r4, r5, r7, pc}

08008b54 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	425b      	negs	r3, r3
 8008b60:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d031      	beq.n	8008bce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	e002      	b.n	8008b78 <get_ldnumber+0x24>
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	3301      	adds	r3, #1
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b1f      	cmp	r3, #31
 8008b7e:	d903      	bls.n	8008b88 <get_ldnumber+0x34>
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2b3a      	cmp	r3, #58	; 0x3a
 8008b86:	d1f4      	bne.n	8008b72 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b3a      	cmp	r3, #58	; 0x3a
 8008b8e:	d11c      	bne.n	8008bca <get_ldnumber+0x76>
			tp = *path;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	60fa      	str	r2, [r7, #12]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	3b30      	subs	r3, #48	; 0x30
 8008ba0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b09      	cmp	r3, #9
 8008ba6:	d80e      	bhi.n	8008bc6 <get_ldnumber+0x72>
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d10a      	bne.n	8008bc6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d107      	bne.n	8008bc6 <get_ldnumber+0x72>
					vol = (int)i;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	617b      	str	r3, [r7, #20]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	e002      	b.n	8008bd0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008bca:	2300      	movs	r3, #0
 8008bcc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008bce:	693b      	ldr	r3, [r7, #16]
}
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b006      	add	sp, #24
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	70da      	strb	r2, [r3, #3]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	4252      	negs	r2, r2
 8008bee:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	0011      	movs	r1, r2
 8008bf6:	0018      	movs	r0, r3
 8008bf8:	f7fe fb36 	bl	8007268 <move_window>
 8008bfc:	1e03      	subs	r3, r0, #0
 8008bfe:	d001      	beq.n	8008c04 <check_fs+0x2c>
 8008c00:	2304      	movs	r3, #4
 8008c02:	e037      	b.n	8008c74 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	3338      	adds	r3, #56	; 0x38
 8008c08:	33ff      	adds	r3, #255	; 0xff
 8008c0a:	33ff      	adds	r3, #255	; 0xff
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	f7fe f87f 	bl	8006d10 <ld_word>
 8008c12:	0003      	movs	r3, r0
 8008c14:	001a      	movs	r2, r3
 8008c16:	4b19      	ldr	r3, [pc, #100]	; (8008c7c <check_fs+0xa4>)
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d001      	beq.n	8008c20 <check_fs+0x48>
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e029      	b.n	8008c74 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2238      	movs	r2, #56	; 0x38
 8008c24:	5c9b      	ldrb	r3, [r3, r2]
 8008c26:	2be9      	cmp	r3, #233	; 0xe9
 8008c28:	d009      	beq.n	8008c3e <check_fs+0x66>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2238      	movs	r2, #56	; 0x38
 8008c2e:	5c9b      	ldrb	r3, [r3, r2]
 8008c30:	2beb      	cmp	r3, #235	; 0xeb
 8008c32:	d11e      	bne.n	8008c72 <check_fs+0x9a>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	223a      	movs	r2, #58	; 0x3a
 8008c38:	5c9b      	ldrb	r3, [r3, r2]
 8008c3a:	2b90      	cmp	r3, #144	; 0x90
 8008c3c:	d119      	bne.n	8008c72 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3338      	adds	r3, #56	; 0x38
 8008c42:	3336      	adds	r3, #54	; 0x36
 8008c44:	0018      	movs	r0, r3
 8008c46:	f7fe f87e 	bl	8006d46 <ld_dword>
 8008c4a:	0003      	movs	r3, r0
 8008c4c:	021b      	lsls	r3, r3, #8
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	4a0b      	ldr	r2, [pc, #44]	; (8008c80 <check_fs+0xa8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d101      	bne.n	8008c5a <check_fs+0x82>
 8008c56:	2300      	movs	r3, #0
 8008c58:	e00c      	b.n	8008c74 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3338      	adds	r3, #56	; 0x38
 8008c5e:	3352      	adds	r3, #82	; 0x52
 8008c60:	0018      	movs	r0, r3
 8008c62:	f7fe f870 	bl	8006d46 <ld_dword>
 8008c66:	0003      	movs	r3, r0
 8008c68:	4a06      	ldr	r2, [pc, #24]	; (8008c84 <check_fs+0xac>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d101      	bne.n	8008c72 <check_fs+0x9a>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e000      	b.n	8008c74 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008c72:	2302      	movs	r3, #2
}
 8008c74:	0018      	movs	r0, r3
 8008c76:	46bd      	mov	sp, r7
 8008c78:	b002      	add	sp, #8
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	0000aa55 	.word	0x0000aa55
 8008c80:	00544146 	.word	0x00544146
 8008c84:	33544146 	.word	0x33544146

08008c88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008c88:	b5b0      	push	{r4, r5, r7, lr}
 8008c8a:	b096      	sub	sp, #88	; 0x58
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	1dfb      	adds	r3, r7, #7
 8008c94:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	0018      	movs	r0, r3
 8008ca0:	f7ff ff58 	bl	8008b54 <get_ldnumber>
 8008ca4:	0003      	movs	r3, r0
 8008ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	da01      	bge.n	8008cb2 <find_volume+0x2a>
 8008cae:	230b      	movs	r3, #11
 8008cb0:	e283      	b.n	80091ba <find_volume+0x532>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008cb2:	4bc2      	ldr	r3, [pc, #776]	; (8008fbc <find_volume+0x334>)
 8008cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cb6:	0092      	lsls	r2, r2, #2
 8008cb8:	58d3      	ldr	r3, [r2, r3]
 8008cba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <find_volume+0x3e>
 8008cc2:	230c      	movs	r3, #12
 8008cc4:	e279      	b.n	80091ba <find_volume+0x532>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008ccc:	1dfb      	adds	r3, r7, #7
 8008cce:	1dfa      	adds	r2, r7, #7
 8008cd0:	7812      	ldrb	r2, [r2, #0]
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	438a      	bics	r2, r1
 8008cd6:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d01b      	beq.n	8008d18 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce2:	785b      	ldrb	r3, [r3, #1]
 8008ce4:	2537      	movs	r5, #55	; 0x37
 8008ce6:	197c      	adds	r4, r7, r5
 8008ce8:	0018      	movs	r0, r3
 8008cea:	f7fd ff47 	bl	8006b7c <disk_status>
 8008cee:	0003      	movs	r3, r0
 8008cf0:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008cf2:	0029      	movs	r1, r5
 8008cf4:	187b      	adds	r3, r7, r1
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	d10c      	bne.n	8008d18 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008cfe:	1dfb      	adds	r3, r7, #7
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d006      	beq.n	8008d14 <find_volume+0x8c>
 8008d06:	187b      	adds	r3, r7, r1
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2204      	movs	r2, #4
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	d001      	beq.n	8008d14 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8008d10:	230a      	movs	r3, #10
 8008d12:	e252      	b.n	80091ba <find_volume+0x532>
			}
			return FR_OK;				/* The file system object is valid */
 8008d14:	2300      	movs	r3, #0
 8008d16:	e250      	b.n	80091ba <find_volume+0x532>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d24:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	2537      	movs	r5, #55	; 0x37
 8008d2c:	197c      	adds	r4, r7, r5
 8008d2e:	0018      	movs	r0, r3
 8008d30:	f7fd ff46 	bl	8006bc0 <disk_initialize>
 8008d34:	0003      	movs	r3, r0
 8008d36:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008d38:	197b      	adds	r3, r7, r5
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	4013      	ands	r3, r2
 8008d40:	d001      	beq.n	8008d46 <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008d42:	2303      	movs	r3, #3
 8008d44:	e239      	b.n	80091ba <find_volume+0x532>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008d46:	1dfb      	adds	r3, r7, #7
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d007      	beq.n	8008d5e <find_volume+0xd6>
 8008d4e:	2337      	movs	r3, #55	; 0x37
 8008d50:	18fb      	adds	r3, r7, r3
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2204      	movs	r2, #4
 8008d56:	4013      	ands	r3, r2
 8008d58:	d001      	beq.n	8008d5e <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8008d5a:	230a      	movs	r3, #10
 8008d5c:	e22d      	b.n	80091ba <find_volume+0x532>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	7858      	ldrb	r0, [r3, #1]
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	330c      	adds	r3, #12
 8008d66:	001a      	movs	r2, r3
 8008d68:	2102      	movs	r1, #2
 8008d6a:	f7fd ffa9 	bl	8006cc0 <disk_ioctl>
 8008d6e:	1e03      	subs	r3, r0, #0
 8008d70:	d001      	beq.n	8008d76 <find_volume+0xee>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e221      	b.n	80091ba <find_volume+0x532>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d78:	899a      	ldrh	r2, [r3, #12]
 8008d7a:	2380      	movs	r3, #128	; 0x80
 8008d7c:	015b      	lsls	r3, r3, #5
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d80d      	bhi.n	8008d9e <find_volume+0x116>
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	899a      	ldrh	r2, [r3, #12]
 8008d86:	2380      	movs	r3, #128	; 0x80
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d307      	bcc.n	8008d9e <find_volume+0x116>
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	899b      	ldrh	r3, [r3, #12]
 8008d92:	001a      	movs	r2, r3
 8008d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d96:	899b      	ldrh	r3, [r3, #12]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	d001      	beq.n	8008da2 <find_volume+0x11a>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e20b      	b.n	80091ba <find_volume+0x532>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008da6:	2557      	movs	r5, #87	; 0x57
 8008da8:	197c      	adds	r4, r7, r5
 8008daa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	0011      	movs	r1, r2
 8008db0:	0018      	movs	r0, r3
 8008db2:	f7ff ff11 	bl	8008bd8 <check_fs>
 8008db6:	0003      	movs	r3, r0
 8008db8:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008dba:	197b      	adds	r3, r7, r5
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d14b      	bne.n	8008e5a <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8008dc6:	e01d      	b.n	8008e04 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	3338      	adds	r3, #56	; 0x38
 8008dcc:	001a      	movs	r2, r3
 8008dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd0:	011b      	lsls	r3, r3, #4
 8008dd2:	33bf      	adds	r3, #191	; 0xbf
 8008dd4:	33ff      	adds	r3, #255	; 0xff
 8008dd6:	18d3      	adds	r3, r2, r3
 8008dd8:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	3304      	adds	r3, #4
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d006      	beq.n	8008df2 <find_volume+0x16a>
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	3308      	adds	r3, #8
 8008de8:	0018      	movs	r0, r3
 8008dea:	f7fd ffac 	bl	8006d46 <ld_dword>
 8008dee:	0003      	movs	r3, r0
 8008df0:	e000      	b.n	8008df4 <find_volume+0x16c>
 8008df2:	2300      	movs	r3, #0
 8008df4:	2214      	movs	r2, #20
 8008df6:	18ba      	adds	r2, r7, r2
 8008df8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dfa:	0089      	lsls	r1, r1, #2
 8008dfc:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e00:	3301      	adds	r3, #1
 8008e02:	643b      	str	r3, [r7, #64]	; 0x40
 8008e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d9de      	bls.n	8008dc8 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <find_volume+0x192>
 8008e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e16:	3b01      	subs	r3, #1
 8008e18:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008e1a:	2314      	movs	r3, #20
 8008e1c:	18fb      	adds	r3, r7, r3
 8008e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e20:	0092      	lsls	r2, r2, #2
 8008e22:	58d3      	ldr	r3, [r2, r3]
 8008e24:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d008      	beq.n	8008e3e <find_volume+0x1b6>
 8008e2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	0011      	movs	r1, r2
 8008e32:	0018      	movs	r0, r3
 8008e34:	f7ff fed0 	bl	8008bd8 <check_fs>
 8008e38:	0003      	movs	r3, r0
 8008e3a:	001a      	movs	r2, r3
 8008e3c:	e000      	b.n	8008e40 <find_volume+0x1b8>
 8008e3e:	2203      	movs	r2, #3
 8008e40:	2157      	movs	r1, #87	; 0x57
 8008e42:	187b      	adds	r3, r7, r1
 8008e44:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008e46:	187b      	adds	r3, r7, r1
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d905      	bls.n	8008e5a <find_volume+0x1d2>
 8008e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e50:	3301      	adds	r3, #1
 8008e52:	643b      	str	r3, [r7, #64]	; 0x40
 8008e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d9df      	bls.n	8008e1a <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008e5a:	2357      	movs	r3, #87	; 0x57
 8008e5c:	18fb      	adds	r3, r7, r3
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d101      	bne.n	8008e68 <find_volume+0x1e0>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e1a8      	b.n	80091ba <find_volume+0x532>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008e68:	2357      	movs	r3, #87	; 0x57
 8008e6a:	18fb      	adds	r3, r7, r3
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d901      	bls.n	8008e76 <find_volume+0x1ee>
 8008e72:	230d      	movs	r3, #13
 8008e74:	e1a1      	b.n	80091ba <find_volume+0x532>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e78:	3338      	adds	r3, #56	; 0x38
 8008e7a:	330b      	adds	r3, #11
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	f7fd ff47 	bl	8006d10 <ld_word>
 8008e82:	0003      	movs	r3, r0
 8008e84:	001a      	movs	r2, r3
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	899b      	ldrh	r3, [r3, #12]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d001      	beq.n	8008e92 <find_volume+0x20a>
 8008e8e:	230d      	movs	r3, #13
 8008e90:	e193      	b.n	80091ba <find_volume+0x532>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e94:	3338      	adds	r3, #56	; 0x38
 8008e96:	3316      	adds	r3, #22
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f7fd ff39 	bl	8006d10 <ld_word>
 8008e9e:	0003      	movs	r3, r0
 8008ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d107      	bne.n	8008eb8 <find_volume+0x230>
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eaa:	3338      	adds	r3, #56	; 0x38
 8008eac:	3324      	adds	r3, #36	; 0x24
 8008eae:	0018      	movs	r0, r3
 8008eb0:	f7fd ff49 	bl	8006d46 <ld_dword>
 8008eb4:	0003      	movs	r3, r0
 8008eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ebc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec0:	2248      	movs	r2, #72	; 0x48
 8008ec2:	5c9a      	ldrb	r2, [r3, r2]
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eca:	789b      	ldrb	r3, [r3, #2]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d005      	beq.n	8008edc <find_volume+0x254>
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	789b      	ldrb	r3, [r3, #2]
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d001      	beq.n	8008edc <find_volume+0x254>
 8008ed8:	230d      	movs	r3, #13
 8008eda:	e16e      	b.n	80091ba <find_volume+0x532>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ede:	789b      	ldrb	r3, [r3, #2]
 8008ee0:	001a      	movs	r2, r3
 8008ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ee4:	4353      	muls	r3, r2
 8008ee6:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	2245      	movs	r2, #69	; 0x45
 8008eec:	5c9b      	ldrb	r3, [r3, r2]
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef6:	895b      	ldrh	r3, [r3, #10]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d007      	beq.n	8008f0c <find_volume+0x284>
 8008efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efe:	895b      	ldrh	r3, [r3, #10]
 8008f00:	001a      	movs	r2, r3
 8008f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f04:	895b      	ldrh	r3, [r3, #10]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	4013      	ands	r3, r2
 8008f0a:	d001      	beq.n	8008f10 <find_volume+0x288>
 8008f0c:	230d      	movs	r3, #13
 8008f0e:	e154      	b.n	80091ba <find_volume+0x532>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f12:	3338      	adds	r3, #56	; 0x38
 8008f14:	3311      	adds	r3, #17
 8008f16:	0018      	movs	r0, r3
 8008f18:	f7fd fefa 	bl	8006d10 <ld_word>
 8008f1c:	0003      	movs	r3, r0
 8008f1e:	001a      	movs	r2, r3
 8008f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	891a      	ldrh	r2, [r3, #8]
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	899b      	ldrh	r3, [r3, #12]
 8008f2c:	095b      	lsrs	r3, r3, #5
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	0019      	movs	r1, r3
 8008f32:	0010      	movs	r0, r2
 8008f34:	f7f7 f98a 	bl	800024c <__aeabi_uidivmod>
 8008f38:	000b      	movs	r3, r1
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <find_volume+0x2bc>
 8008f40:	230d      	movs	r3, #13
 8008f42:	e13a      	b.n	80091ba <find_volume+0x532>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	3338      	adds	r3, #56	; 0x38
 8008f48:	3313      	adds	r3, #19
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	f7fd fee0 	bl	8006d10 <ld_word>
 8008f50:	0003      	movs	r3, r0
 8008f52:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d107      	bne.n	8008f6a <find_volume+0x2e2>
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5c:	3338      	adds	r3, #56	; 0x38
 8008f5e:	3320      	adds	r3, #32
 8008f60:	0018      	movs	r0, r3
 8008f62:	f7fd fef0 	bl	8006d46 <ld_dword>
 8008f66:	0003      	movs	r3, r0
 8008f68:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	3338      	adds	r3, #56	; 0x38
 8008f6e:	330e      	adds	r3, #14
 8008f70:	252e      	movs	r5, #46	; 0x2e
 8008f72:	197c      	adds	r4, r7, r5
 8008f74:	0018      	movs	r0, r3
 8008f76:	f7fd fecb 	bl	8006d10 <ld_word>
 8008f7a:	0003      	movs	r3, r0
 8008f7c:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008f7e:	197b      	adds	r3, r7, r5
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <find_volume+0x302>
 8008f86:	230d      	movs	r3, #13
 8008f88:	e117      	b.n	80091ba <find_volume+0x532>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008f8a:	232e      	movs	r3, #46	; 0x2e
 8008f8c:	18fb      	adds	r3, r7, r3
 8008f8e:	881a      	ldrh	r2, [r3, #0]
 8008f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f92:	18d4      	adds	r4, r2, r3
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	891a      	ldrh	r2, [r3, #8]
 8008f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9a:	899b      	ldrh	r3, [r3, #12]
 8008f9c:	095b      	lsrs	r3, r3, #5
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	0019      	movs	r1, r3
 8008fa2:	0010      	movs	r0, r2
 8008fa4:	f7f7 f8cc 	bl	8000140 <__udivsi3>
 8008fa8:	0003      	movs	r3, r0
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	18e3      	adds	r3, r4, r3
 8008fae:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d203      	bcs.n	8008fc0 <find_volume+0x338>
 8008fb8:	230d      	movs	r3, #13
 8008fba:	e0fe      	b.n	80091ba <find_volume+0x532>
 8008fbc:	20000358 	.word	0x20000358
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc4:	1ad2      	subs	r2, r2, r3
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc8:	895b      	ldrh	r3, [r3, #10]
 8008fca:	0019      	movs	r1, r3
 8008fcc:	0010      	movs	r0, r2
 8008fce:	f7f7 f8b7 	bl	8000140 <__udivsi3>
 8008fd2:	0003      	movs	r3, r0
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <find_volume+0x358>
 8008fdc:	230d      	movs	r3, #13
 8008fde:	e0ec      	b.n	80091ba <find_volume+0x532>
		fmt = FS_FAT32;
 8008fe0:	2157      	movs	r1, #87	; 0x57
 8008fe2:	187b      	adds	r3, r7, r1
 8008fe4:	2203      	movs	r2, #3
 8008fe6:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	4a76      	ldr	r2, [pc, #472]	; (80091c4 <find_volume+0x53c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d802      	bhi.n	8008ff6 <find_volume+0x36e>
 8008ff0:	187b      	adds	r3, r7, r1
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	4a73      	ldr	r2, [pc, #460]	; (80091c8 <find_volume+0x540>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d803      	bhi.n	8009006 <find_volume+0x37e>
 8008ffe:	2357      	movs	r3, #87	; 0x57
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	2201      	movs	r2, #1
 8009004:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	1c9a      	adds	r2, r3, #2
 800900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009012:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009014:	232e      	movs	r3, #46	; 0x2e
 8009016:	18fb      	adds	r3, r7, r3
 8009018:	881a      	ldrh	r2, [r3, #0]
 800901a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800901c:	18d2      	adds	r2, r2, r3
 800901e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009020:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009022:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	18d2      	adds	r2, r2, r3
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800902c:	2357      	movs	r3, #87	; 0x57
 800902e:	18fb      	adds	r3, r7, r3
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b03      	cmp	r3, #3
 8009034:	d11d      	bne.n	8009072 <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	3338      	adds	r3, #56	; 0x38
 800903a:	332a      	adds	r3, #42	; 0x2a
 800903c:	0018      	movs	r0, r3
 800903e:	f7fd fe67 	bl	8006d10 <ld_word>
 8009042:	1e03      	subs	r3, r0, #0
 8009044:	d001      	beq.n	800904a <find_volume+0x3c2>
 8009046:	230d      	movs	r3, #13
 8009048:	e0b7      	b.n	80091ba <find_volume+0x532>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	891b      	ldrh	r3, [r3, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <find_volume+0x3ce>
 8009052:	230d      	movs	r3, #13
 8009054:	e0b1      	b.n	80091ba <find_volume+0x532>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	3338      	adds	r3, #56	; 0x38
 800905a:	332c      	adds	r3, #44	; 0x2c
 800905c:	0018      	movs	r0, r3
 800905e:	f7fd fe72 	bl	8006d46 <ld_dword>
 8009062:	0002      	movs	r2, r0
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	647b      	str	r3, [r7, #68]	; 0x44
 8009070:	e020      	b.n	80090b4 <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009074:	891b      	ldrh	r3, [r3, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <find_volume+0x3f6>
 800907a:	230d      	movs	r3, #13
 800907c:	e09d      	b.n	80091ba <find_volume+0x532>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800907e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009084:	18d2      	adds	r2, r2, r3
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800908a:	2357      	movs	r3, #87	; 0x57
 800908c:	18fb      	adds	r3, r7, r3
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d103      	bne.n	800909c <find_volume+0x414>
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	e00a      	b.n	80090b2 <find_volume+0x42a>
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	69da      	ldr	r2, [r3, #28]
 80090a0:	0013      	movs	r3, r2
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	189b      	adds	r3, r3, r2
 80090a6:	085a      	lsrs	r2, r3, #1
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	2101      	movs	r1, #1
 80090ae:	400b      	ands	r3, r1
 80090b0:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80090b2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	6a1c      	ldr	r4, [r3, #32]
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	899b      	ldrh	r3, [r3, #12]
 80090bc:	001a      	movs	r2, r3
 80090be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090c0:	18d3      	adds	r3, r2, r3
 80090c2:	1e5a      	subs	r2, r3, #1
 80090c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c6:	899b      	ldrh	r3, [r3, #12]
 80090c8:	0019      	movs	r1, r3
 80090ca:	0010      	movs	r0, r2
 80090cc:	f7f7 f838 	bl	8000140 <__udivsi3>
 80090d0:	0003      	movs	r3, r0
 80090d2:	429c      	cmp	r4, r3
 80090d4:	d201      	bcs.n	80090da <find_volume+0x452>
 80090d6:	230d      	movs	r3, #13
 80090d8:	e06f      	b.n	80091ba <find_volume+0x532>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80090da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090dc:	2201      	movs	r2, #1
 80090de:	4252      	negs	r2, r2
 80090e0:	619a      	str	r2, [r3, #24]
 80090e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e4:	699a      	ldr	r2, [r3, #24]
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	2280      	movs	r2, #128	; 0x80
 80090ee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80090f0:	2357      	movs	r3, #87	; 0x57
 80090f2:	18fb      	adds	r3, r7, r3
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d148      	bne.n	800918c <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	3338      	adds	r3, #56	; 0x38
 80090fe:	3330      	adds	r3, #48	; 0x30
 8009100:	0018      	movs	r0, r3
 8009102:	f7fd fe05 	bl	8006d10 <ld_word>
 8009106:	0003      	movs	r3, r0
 8009108:	2b01      	cmp	r3, #1
 800910a:	d13f      	bne.n	800918c <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 800910c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	0011      	movs	r1, r2
 8009114:	0018      	movs	r0, r3
 8009116:	f7fe f8a7 	bl	8007268 <move_window>
 800911a:	1e03      	subs	r3, r0, #0
 800911c:	d136      	bne.n	800918c <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	2200      	movs	r2, #0
 8009122:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	3338      	adds	r3, #56	; 0x38
 8009128:	33ff      	adds	r3, #255	; 0xff
 800912a:	33ff      	adds	r3, #255	; 0xff
 800912c:	0018      	movs	r0, r3
 800912e:	f7fd fdef 	bl	8006d10 <ld_word>
 8009132:	0003      	movs	r3, r0
 8009134:	001a      	movs	r2, r3
 8009136:	4b25      	ldr	r3, [pc, #148]	; (80091cc <find_volume+0x544>)
 8009138:	429a      	cmp	r2, r3
 800913a:	d127      	bne.n	800918c <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800913c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913e:	3338      	adds	r3, #56	; 0x38
 8009140:	0018      	movs	r0, r3
 8009142:	f7fd fe00 	bl	8006d46 <ld_dword>
 8009146:	0003      	movs	r3, r0
 8009148:	4a21      	ldr	r2, [pc, #132]	; (80091d0 <find_volume+0x548>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d11e      	bne.n	800918c <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009150:	3338      	adds	r3, #56	; 0x38
 8009152:	33e5      	adds	r3, #229	; 0xe5
 8009154:	33ff      	adds	r3, #255	; 0xff
 8009156:	0018      	movs	r0, r3
 8009158:	f7fd fdf5 	bl	8006d46 <ld_dword>
 800915c:	0003      	movs	r3, r0
 800915e:	4a1d      	ldr	r2, [pc, #116]	; (80091d4 <find_volume+0x54c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d113      	bne.n	800918c <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	3338      	adds	r3, #56	; 0x38
 8009168:	33e9      	adds	r3, #233	; 0xe9
 800916a:	33ff      	adds	r3, #255	; 0xff
 800916c:	0018      	movs	r0, r3
 800916e:	f7fd fdea 	bl	8006d46 <ld_dword>
 8009172:	0002      	movs	r2, r0
 8009174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009176:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	3338      	adds	r3, #56	; 0x38
 800917c:	33ed      	adds	r3, #237	; 0xed
 800917e:	33ff      	adds	r3, #255	; 0xff
 8009180:	0018      	movs	r0, r3
 8009182:	f7fd fde0 	bl	8006d46 <ld_dword>
 8009186:	0002      	movs	r2, r0
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	2257      	movs	r2, #87	; 0x57
 8009190:	18ba      	adds	r2, r7, r2
 8009192:	7812      	ldrb	r2, [r2, #0]
 8009194:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009196:	4b10      	ldr	r3, [pc, #64]	; (80091d8 <find_volume+0x550>)
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	3301      	adds	r3, #1
 800919c:	b29a      	uxth	r2, r3
 800919e:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <find_volume+0x550>)
 80091a0:	801a      	strh	r2, [r3, #0]
 80091a2:	4b0d      	ldr	r3, [pc, #52]	; (80091d8 <find_volume+0x550>)
 80091a4:	881a      	ldrh	r2, [r3, #0]
 80091a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	4a0b      	ldr	r2, [pc, #44]	; (80091dc <find_volume+0x554>)
 80091ae:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80091b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b2:	0018      	movs	r0, r3
 80091b4:	f7fd fff0 	bl	8007198 <clear_lock>
#endif
	return FR_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	0018      	movs	r0, r3
 80091bc:	46bd      	mov	sp, r7
 80091be:	b016      	add	sp, #88	; 0x58
 80091c0:	bdb0      	pop	{r4, r5, r7, pc}
 80091c2:	46c0      	nop			; (mov r8, r8)
 80091c4:	0000fff5 	.word	0x0000fff5
 80091c8:	00000ff5 	.word	0x00000ff5
 80091cc:	0000aa55 	.word	0x0000aa55
 80091d0:	41615252 	.word	0x41615252
 80091d4:	61417272 	.word	0x61417272
 80091d8:	2000035c 	.word	0x2000035c
 80091dc:	20000380 	.word	0x20000380

080091e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80091e0:	b590      	push	{r4, r7, lr}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80091ea:	240f      	movs	r4, #15
 80091ec:	193b      	adds	r3, r7, r4
 80091ee:	2209      	movs	r2, #9
 80091f0:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d01d      	beq.n	8009234 <validate+0x54>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d019      	beq.n	8009234 <validate+0x54>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d014      	beq.n	8009234 <validate+0x54>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	889a      	ldrh	r2, [r3, #4]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	88db      	ldrh	r3, [r3, #6]
 8009214:	429a      	cmp	r2, r3
 8009216:	d10d      	bne.n	8009234 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	785b      	ldrb	r3, [r3, #1]
 800921e:	0018      	movs	r0, r3
 8009220:	f7fd fcac 	bl	8006b7c <disk_status>
 8009224:	0003      	movs	r3, r0
 8009226:	001a      	movs	r2, r3
 8009228:	2301      	movs	r3, #1
 800922a:	4013      	ands	r3, r2
 800922c:	d102      	bne.n	8009234 <validate+0x54>
			res = FR_OK;
 800922e:	193b      	adds	r3, r7, r4
 8009230:	2200      	movs	r2, #0
 8009232:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009234:	230f      	movs	r3, #15
 8009236:	18fb      	adds	r3, r7, r3
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d102      	bne.n	8009244 <validate+0x64>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	e000      	b.n	8009246 <validate+0x66>
 8009244:	2200      	movs	r2, #0
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	601a      	str	r2, [r3, #0]
	return res;
 800924a:	230f      	movs	r3, #15
 800924c:	18fb      	adds	r3, r7, r3
 800924e:	781b      	ldrb	r3, [r3, #0]
}
 8009250:	0018      	movs	r0, r3
 8009252:	46bd      	mov	sp, r7
 8009254:	b005      	add	sp, #20
 8009256:	bd90      	pop	{r4, r7, pc}

08009258 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009258:	b5b0      	push	{r4, r5, r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	1dfb      	adds	r3, r7, #7
 8009264:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800926a:	2310      	movs	r3, #16
 800926c:	18fb      	adds	r3, r7, r3
 800926e:	0018      	movs	r0, r3
 8009270:	f7ff fc70 	bl	8008b54 <get_ldnumber>
 8009274:	0003      	movs	r3, r0
 8009276:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	2b00      	cmp	r3, #0
 800927c:	da01      	bge.n	8009282 <f_mount+0x2a>
 800927e:	230b      	movs	r3, #11
 8009280:	e030      	b.n	80092e4 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009282:	4b1a      	ldr	r3, [pc, #104]	; (80092ec <f_mount+0x94>)
 8009284:	69fa      	ldr	r2, [r7, #28]
 8009286:	0092      	lsls	r2, r2, #2
 8009288:	58d3      	ldr	r3, [r2, r3]
 800928a:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d006      	beq.n	80092a0 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	0018      	movs	r0, r3
 8009296:	f7fd ff7f 	bl	8007198 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	2200      	movs	r2, #0
 800929e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d002      	beq.n	80092ac <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80092ac:	68f9      	ldr	r1, [r7, #12]
 80092ae:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <f_mount+0x94>)
 80092b0:	69fa      	ldr	r2, [r7, #28]
 80092b2:	0092      	lsls	r2, r2, #2
 80092b4:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <f_mount+0x6c>
 80092bc:	1dfb      	adds	r3, r7, #7
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d001      	beq.n	80092c8 <f_mount+0x70>
 80092c4:	2300      	movs	r3, #0
 80092c6:	e00d      	b.n	80092e4 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80092c8:	2517      	movs	r5, #23
 80092ca:	197c      	adds	r4, r7, r5
 80092cc:	230c      	movs	r3, #12
 80092ce:	18f9      	adds	r1, r7, r3
 80092d0:	2308      	movs	r3, #8
 80092d2:	18fb      	adds	r3, r7, r3
 80092d4:	2200      	movs	r2, #0
 80092d6:	0018      	movs	r0, r3
 80092d8:	f7ff fcd6 	bl	8008c88 <find_volume>
 80092dc:	0003      	movs	r3, r0
 80092de:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 80092e0:	197b      	adds	r3, r7, r5
 80092e2:	781b      	ldrb	r3, [r3, #0]
}
 80092e4:	0018      	movs	r0, r3
 80092e6:	46bd      	mov	sp, r7
 80092e8:	b008      	add	sp, #32
 80092ea:	bdb0      	pop	{r4, r5, r7, pc}
 80092ec:	20000358 	.word	0x20000358

080092f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80092f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092f2:	b09b      	sub	sp, #108	; 0x6c
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	1dfb      	adds	r3, r7, #7
 80092fc:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <f_open+0x18>
 8009304:	2309      	movs	r3, #9
 8009306:	e1f4      	b.n	80096f2 <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009308:	1dfb      	adds	r3, r7, #7
 800930a:	1dfa      	adds	r2, r7, #7
 800930c:	7812      	ldrb	r2, [r2, #0]
 800930e:	213f      	movs	r1, #63	; 0x3f
 8009310:	400a      	ands	r2, r1
 8009312:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8009314:	2567      	movs	r5, #103	; 0x67
 8009316:	197c      	adds	r4, r7, r5
 8009318:	1dfb      	adds	r3, r7, #7
 800931a:	781a      	ldrb	r2, [r3, #0]
 800931c:	2314      	movs	r3, #20
 800931e:	18f9      	adds	r1, r7, r3
 8009320:	2308      	movs	r3, #8
 8009322:	18fb      	adds	r3, r7, r3
 8009324:	0018      	movs	r0, r3
 8009326:	f7ff fcaf 	bl	8008c88 <find_volume>
 800932a:	0003      	movs	r3, r0
 800932c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800932e:	197b      	adds	r3, r7, r5
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d000      	beq.n	8009338 <f_open+0x48>
 8009336:	e1d1      	b.n	80096dc <f_open+0x3ec>
		dj.obj.fs = fs;
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	2618      	movs	r6, #24
 800933c:	19bb      	adds	r3, r7, r6
 800933e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	197c      	adds	r4, r7, r5
 8009344:	19bb      	adds	r3, r7, r6
 8009346:	0011      	movs	r1, r2
 8009348:	0018      	movs	r0, r3
 800934a:	f7ff fb79 	bl	8008a40 <follow_path>
 800934e:	0003      	movs	r3, r0
 8009350:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009352:	0029      	movs	r1, r5
 8009354:	197b      	adds	r3, r7, r5
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d11b      	bne.n	8009394 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800935c:	19bb      	adds	r3, r7, r6
 800935e:	222f      	movs	r2, #47	; 0x2f
 8009360:	5c9b      	ldrb	r3, [r3, r2]
 8009362:	b25b      	sxtb	r3, r3
 8009364:	2b00      	cmp	r3, #0
 8009366:	da03      	bge.n	8009370 <f_open+0x80>
				res = FR_INVALID_NAME;
 8009368:	187b      	adds	r3, r7, r1
 800936a:	2206      	movs	r2, #6
 800936c:	701a      	strb	r2, [r3, #0]
 800936e:	e011      	b.n	8009394 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009370:	1dfb      	adds	r3, r7, #7
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	2201      	movs	r2, #1
 8009376:	4393      	bics	r3, r2
 8009378:	1e5a      	subs	r2, r3, #1
 800937a:	4193      	sbcs	r3, r2
 800937c:	b2db      	uxtb	r3, r3
 800937e:	001a      	movs	r2, r3
 8009380:	2367      	movs	r3, #103	; 0x67
 8009382:	18fc      	adds	r4, r7, r3
 8009384:	2318      	movs	r3, #24
 8009386:	18fb      	adds	r3, r7, r3
 8009388:	0011      	movs	r1, r2
 800938a:	0018      	movs	r0, r3
 800938c:	f7fd fdba 	bl	8006f04 <chk_lock>
 8009390:	0003      	movs	r3, r0
 8009392:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009394:	1dfb      	adds	r3, r7, #7
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	221c      	movs	r2, #28
 800939a:	4013      	ands	r3, r2
 800939c:	d100      	bne.n	80093a0 <f_open+0xb0>
 800939e:	e096      	b.n	80094ce <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 80093a0:	2267      	movs	r2, #103	; 0x67
 80093a2:	18bb      	adds	r3, r7, r2
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d01a      	beq.n	80093e0 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80093aa:	18bb      	adds	r3, r7, r2
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d10f      	bne.n	80093d2 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80093b2:	f7fd fdff 	bl	8006fb4 <enq_lock>
 80093b6:	1e03      	subs	r3, r0, #0
 80093b8:	d007      	beq.n	80093ca <f_open+0xda>
 80093ba:	2318      	movs	r3, #24
 80093bc:	18fb      	adds	r3, r7, r3
 80093be:	0018      	movs	r0, r3
 80093c0:	f7ff f82a 	bl	8008418 <dir_register>
 80093c4:	0003      	movs	r3, r0
 80093c6:	001a      	movs	r2, r3
 80093c8:	e000      	b.n	80093cc <f_open+0xdc>
 80093ca:	2212      	movs	r2, #18
 80093cc:	2367      	movs	r3, #103	; 0x67
 80093ce:	18fb      	adds	r3, r7, r3
 80093d0:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80093d2:	1dfb      	adds	r3, r7, #7
 80093d4:	1dfa      	adds	r2, r7, #7
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	2108      	movs	r1, #8
 80093da:	430a      	orrs	r2, r1
 80093dc:	701a      	strb	r2, [r3, #0]
 80093de:	e014      	b.n	800940a <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80093e0:	2318      	movs	r3, #24
 80093e2:	18fb      	adds	r3, r7, r3
 80093e4:	799b      	ldrb	r3, [r3, #6]
 80093e6:	001a      	movs	r2, r3
 80093e8:	2311      	movs	r3, #17
 80093ea:	4013      	ands	r3, r2
 80093ec:	d004      	beq.n	80093f8 <f_open+0x108>
					res = FR_DENIED;
 80093ee:	2367      	movs	r3, #103	; 0x67
 80093f0:	18fb      	adds	r3, r7, r3
 80093f2:	2207      	movs	r2, #7
 80093f4:	701a      	strb	r2, [r3, #0]
 80093f6:	e008      	b.n	800940a <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80093f8:	1dfb      	adds	r3, r7, #7
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2204      	movs	r2, #4
 80093fe:	4013      	ands	r3, r2
 8009400:	d003      	beq.n	800940a <f_open+0x11a>
 8009402:	2367      	movs	r3, #103	; 0x67
 8009404:	18fb      	adds	r3, r7, r3
 8009406:	2208      	movs	r2, #8
 8009408:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800940a:	2467      	movs	r4, #103	; 0x67
 800940c:	193b      	adds	r3, r7, r4
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d000      	beq.n	8009416 <f_open+0x126>
 8009414:	e07b      	b.n	800950e <f_open+0x21e>
 8009416:	1dfb      	adds	r3, r7, #7
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2208      	movs	r2, #8
 800941c:	4013      	ands	r3, r2
 800941e:	d100      	bne.n	8009422 <f_open+0x132>
 8009420:	e075      	b.n	800950e <f_open+0x21e>
				dw = GET_FATTIME();
 8009422:	f7fd fb3f 	bl	8006aa4 <get_fattime>
 8009426:	0003      	movs	r3, r0
 8009428:	65bb      	str	r3, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800942a:	2518      	movs	r5, #24
 800942c:	197b      	adds	r3, r7, r5
 800942e:	6a1b      	ldr	r3, [r3, #32]
 8009430:	330e      	adds	r3, #14
 8009432:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009434:	0011      	movs	r1, r2
 8009436:	0018      	movs	r0, r3
 8009438:	f7fd fcc4 	bl	8006dc4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800943c:	197b      	adds	r3, r7, r5
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	3316      	adds	r3, #22
 8009442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009444:	0011      	movs	r1, r2
 8009446:	0018      	movs	r0, r3
 8009448:	f7fd fcbc 	bl	8006dc4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800944c:	197b      	adds	r3, r7, r5
 800944e:	6a1b      	ldr	r3, [r3, #32]
 8009450:	330b      	adds	r3, #11
 8009452:	2220      	movs	r2, #32
 8009454:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	197b      	adds	r3, r7, r5
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	0019      	movs	r1, r3
 800945e:	0010      	movs	r0, r2
 8009460:	f7fe fcef 	bl	8007e42 <ld_clust>
 8009464:	0003      	movs	r3, r0
 8009466:	657b      	str	r3, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009468:	6978      	ldr	r0, [r7, #20]
 800946a:	197b      	adds	r3, r7, r5
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	2200      	movs	r2, #0
 8009470:	0019      	movs	r1, r3
 8009472:	f7fe fd05 	bl	8007e80 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009476:	197b      	adds	r3, r7, r5
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	331c      	adds	r3, #28
 800947c:	2100      	movs	r1, #0
 800947e:	0018      	movs	r0, r3
 8009480:	f7fd fca0 	bl	8006dc4 <st_dword>
					fs->wflag = 1;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	2201      	movs	r2, #1
 8009488:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800948a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800948c:	2b00      	cmp	r3, #0
 800948e:	d03e      	beq.n	800950e <f_open+0x21e>
						dw = fs->winsect;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009494:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009496:	0026      	movs	r6, r4
 8009498:	193c      	adds	r4, r7, r4
 800949a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800949c:	197b      	adds	r3, r7, r5
 800949e:	2200      	movs	r2, #0
 80094a0:	0018      	movs	r0, r3
 80094a2:	f7fe f9ba 	bl	800781a <remove_chain>
 80094a6:	0003      	movs	r3, r0
 80094a8:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 80094aa:	19bb      	adds	r3, r7, r6
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d12d      	bne.n	800950e <f_open+0x21e>
							res = move_window(fs, dw);
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	19bc      	adds	r4, r7, r6
 80094b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094b8:	0011      	movs	r1, r2
 80094ba:	0018      	movs	r0, r3
 80094bc:	f7fd fed4 	bl	8007268 <move_window>
 80094c0:	0003      	movs	r3, r0
 80094c2:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094c8:	3a01      	subs	r2, #1
 80094ca:	615a      	str	r2, [r3, #20]
 80094cc:	e01f      	b.n	800950e <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80094ce:	2167      	movs	r1, #103	; 0x67
 80094d0:	187b      	adds	r3, r7, r1
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d11a      	bne.n	800950e <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80094d8:	2318      	movs	r3, #24
 80094da:	18fb      	adds	r3, r7, r3
 80094dc:	799b      	ldrb	r3, [r3, #6]
 80094de:	001a      	movs	r2, r3
 80094e0:	2310      	movs	r3, #16
 80094e2:	4013      	ands	r3, r2
 80094e4:	d003      	beq.n	80094ee <f_open+0x1fe>
					res = FR_NO_FILE;
 80094e6:	187b      	adds	r3, r7, r1
 80094e8:	2204      	movs	r2, #4
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	e00f      	b.n	800950e <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80094ee:	1dfb      	adds	r3, r7, #7
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	2202      	movs	r2, #2
 80094f4:	4013      	ands	r3, r2
 80094f6:	d00a      	beq.n	800950e <f_open+0x21e>
 80094f8:	2318      	movs	r3, #24
 80094fa:	18fb      	adds	r3, r7, r3
 80094fc:	799b      	ldrb	r3, [r3, #6]
 80094fe:	001a      	movs	r2, r3
 8009500:	2301      	movs	r3, #1
 8009502:	4013      	ands	r3, r2
 8009504:	d003      	beq.n	800950e <f_open+0x21e>
						res = FR_DENIED;
 8009506:	2367      	movs	r3, #103	; 0x67
 8009508:	18fb      	adds	r3, r7, r3
 800950a:	2207      	movs	r2, #7
 800950c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 800950e:	2367      	movs	r3, #103	; 0x67
 8009510:	18fb      	adds	r3, r7, r3
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d12b      	bne.n	8009570 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009518:	1dfb      	adds	r3, r7, #7
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	2208      	movs	r2, #8
 800951e:	4013      	ands	r3, r2
 8009520:	d005      	beq.n	800952e <f_open+0x23e>
				mode |= FA_MODIFIED;
 8009522:	1dfb      	adds	r3, r7, #7
 8009524:	1dfa      	adds	r2, r7, #7
 8009526:	7812      	ldrb	r2, [r2, #0]
 8009528:	2140      	movs	r1, #64	; 0x40
 800952a:	430a      	orrs	r2, r1
 800952c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009536:	2118      	movs	r1, #24
 8009538:	187b      	adds	r3, r7, r1
 800953a:	6a1a      	ldr	r2, [r3, #32]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009540:	1dfb      	adds	r3, r7, #7
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2201      	movs	r2, #1
 8009546:	4393      	bics	r3, r2
 8009548:	1e5a      	subs	r2, r3, #1
 800954a:	4193      	sbcs	r3, r2
 800954c:	b2db      	uxtb	r3, r3
 800954e:	001a      	movs	r2, r3
 8009550:	187b      	adds	r3, r7, r1
 8009552:	0011      	movs	r1, r2
 8009554:	0018      	movs	r0, r3
 8009556:	f7fd fd4b 	bl	8006ff0 <inc_lock>
 800955a:	0002      	movs	r2, r0
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d103      	bne.n	8009570 <f_open+0x280>
 8009568:	2367      	movs	r3, #103	; 0x67
 800956a:	18fb      	adds	r3, r7, r3
 800956c:	2202      	movs	r2, #2
 800956e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009570:	2367      	movs	r3, #103	; 0x67
 8009572:	18fb      	adds	r3, r7, r3
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d000      	beq.n	800957c <f_open+0x28c>
 800957a:	e0af      	b.n	80096dc <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	2418      	movs	r4, #24
 8009580:	193b      	adds	r3, r7, r4
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	0019      	movs	r1, r3
 8009586:	0010      	movs	r0, r2
 8009588:	f7fe fc5b 	bl	8007e42 <ld_clust>
 800958c:	0002      	movs	r2, r0
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009592:	193b      	adds	r3, r7, r4
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	331c      	adds	r3, #28
 8009598:	0018      	movs	r0, r3
 800959a:	f7fd fbd4 	bl	8006d46 <ld_dword>
 800959e:	0002      	movs	r2, r0
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	88da      	ldrh	r2, [r3, #6]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	1dfa      	adds	r2, r7, #7
 80095bc:	7812      	ldrb	r2, [r2, #0]
 80095be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3330      	adds	r3, #48	; 0x30
 80095d6:	2280      	movs	r2, #128	; 0x80
 80095d8:	0152      	lsls	r2, r2, #5
 80095da:	2100      	movs	r1, #0
 80095dc:	0018      	movs	r0, r3
 80095de:	f7fd fc3a 	bl	8006e56 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80095e2:	1dfb      	adds	r3, r7, #7
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2220      	movs	r2, #32
 80095e8:	4013      	ands	r3, r2
 80095ea:	d100      	bne.n	80095ee <f_open+0x2fe>
 80095ec:	e076      	b.n	80096dc <f_open+0x3ec>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d100      	bne.n	80095f8 <f_open+0x308>
 80095f6:	e071      	b.n	80096dc <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	68da      	ldr	r2, [r3, #12]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	895b      	ldrh	r3, [r3, #10]
 8009604:	001a      	movs	r2, r3
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	899b      	ldrh	r3, [r3, #12]
 800960a:	4353      	muls	r3, r2
 800960c:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800961a:	e019      	b.n	8009650 <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009620:	0011      	movs	r1, r2
 8009622:	0018      	movs	r0, r3
 8009624:	f7fd feee 	bl	8007404 <get_fat>
 8009628:	0003      	movs	r3, r0
 800962a:	663b      	str	r3, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800962c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800962e:	2b01      	cmp	r3, #1
 8009630:	d803      	bhi.n	800963a <f_open+0x34a>
 8009632:	2367      	movs	r3, #103	; 0x67
 8009634:	18fb      	adds	r3, r7, r3
 8009636:	2202      	movs	r2, #2
 8009638:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800963a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800963c:	3301      	adds	r3, #1
 800963e:	d103      	bne.n	8009648 <f_open+0x358>
 8009640:	2367      	movs	r3, #103	; 0x67
 8009642:	18fb      	adds	r3, r7, r3
 8009644:	2201      	movs	r2, #1
 8009646:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009648:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800964a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009650:	2367      	movs	r3, #103	; 0x67
 8009652:	18fb      	adds	r3, r7, r3
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d103      	bne.n	8009662 <f_open+0x372>
 800965a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800965c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800965e:	429a      	cmp	r2, r3
 8009660:	d8dc      	bhi.n	800961c <f_open+0x32c>
				}
				fp->clust = clst;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009666:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009668:	2467      	movs	r4, #103	; 0x67
 800966a:	193b      	adds	r3, r7, r4
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d134      	bne.n	80096dc <f_open+0x3ec>
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	899b      	ldrh	r3, [r3, #12]
 8009676:	001a      	movs	r2, r3
 8009678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800967a:	0011      	movs	r1, r2
 800967c:	0018      	movs	r0, r3
 800967e:	f7f6 fde5 	bl	800024c <__aeabi_uidivmod>
 8009682:	1e0b      	subs	r3, r1, #0
 8009684:	d02a      	beq.n	80096dc <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800968a:	0011      	movs	r1, r2
 800968c:	0018      	movs	r0, r3
 800968e:	f7fd fe9d 	bl	80073cc <clust2sect>
 8009692:	0003      	movs	r3, r0
 8009694:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009698:	2b00      	cmp	r3, #0
 800969a:	d103      	bne.n	80096a4 <f_open+0x3b4>
						res = FR_INT_ERR;
 800969c:	193b      	adds	r3, r7, r4
 800969e:	2202      	movs	r2, #2
 80096a0:	701a      	strb	r2, [r3, #0]
 80096a2:	e01b      	b.n	80096dc <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	899b      	ldrh	r3, [r3, #12]
 80096a8:	0019      	movs	r1, r3
 80096aa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80096ac:	f7f6 fd48 	bl	8000140 <__udivsi3>
 80096b0:	0003      	movs	r3, r0
 80096b2:	001a      	movs	r2, r3
 80096b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b6:	18d2      	adds	r2, r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	7858      	ldrb	r0, [r3, #1]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	3330      	adds	r3, #48	; 0x30
 80096c4:	0019      	movs	r1, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6a1a      	ldr	r2, [r3, #32]
 80096ca:	2301      	movs	r3, #1
 80096cc:	f7fd faa8 	bl	8006c20 <disk_read>
 80096d0:	1e03      	subs	r3, r0, #0
 80096d2:	d003      	beq.n	80096dc <f_open+0x3ec>
 80096d4:	2367      	movs	r3, #103	; 0x67
 80096d6:	18fb      	adds	r3, r7, r3
 80096d8:	2201      	movs	r2, #1
 80096da:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80096dc:	2367      	movs	r3, #103	; 0x67
 80096de:	18fb      	adds	r3, r7, r3
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <f_open+0x3fc>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80096ec:	2367      	movs	r3, #103	; 0x67
 80096ee:	18fb      	adds	r3, r7, r3
 80096f0:	781b      	ldrb	r3, [r3, #0]
}
 80096f2:	0018      	movs	r0, r3
 80096f4:	46bd      	mov	sp, r7
 80096f6:	b01b      	add	sp, #108	; 0x6c
 80096f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096fa <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80096fa:	b5b0      	push	{r4, r5, r7, lr}
 80096fc:	b08e      	sub	sp, #56	; 0x38
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
 8009706:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2537      	movs	r5, #55	; 0x37
 8009716:	197c      	adds	r4, r7, r5
 8009718:	2214      	movs	r2, #20
 800971a:	18ba      	adds	r2, r7, r2
 800971c:	0011      	movs	r1, r2
 800971e:	0018      	movs	r0, r3
 8009720:	f7ff fd5e 	bl	80091e0 <validate>
 8009724:	0003      	movs	r3, r0
 8009726:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009728:	197b      	adds	r3, r7, r5
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d107      	bne.n	8009740 <f_read+0x46>
 8009730:	197b      	adds	r3, r7, r5
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	7d52      	ldrb	r2, [r2, #21]
 8009736:	701a      	strb	r2, [r3, #0]
 8009738:	197b      	adds	r3, r7, r5
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d003      	beq.n	8009748 <f_read+0x4e>
 8009740:	2337      	movs	r3, #55	; 0x37
 8009742:	18fb      	adds	r3, r7, r3
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	e137      	b.n	80099b8 <f_read+0x2be>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	7d1b      	ldrb	r3, [r3, #20]
 800974c:	001a      	movs	r2, r3
 800974e:	2301      	movs	r3, #1
 8009750:	4013      	ands	r3, r2
 8009752:	d101      	bne.n	8009758 <f_read+0x5e>
 8009754:	2307      	movs	r3, #7
 8009756:	e12f      	b.n	80099b8 <f_read+0x2be>
	remain = fp->obj.objsize - fp->fptr;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	429a      	cmp	r2, r3
 800976a:	d800      	bhi.n	800976e <f_read+0x74>
 800976c:	e11f      	b.n	80099ae <f_read+0x2b4>
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009772:	e11c      	b.n	80099ae <f_read+0x2b4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	699a      	ldr	r2, [r3, #24]
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	899b      	ldrh	r3, [r3, #12]
 800977c:	0019      	movs	r1, r3
 800977e:	0010      	movs	r0, r2
 8009780:	f7f6 fd64 	bl	800024c <__aeabi_uidivmod>
 8009784:	1e0b      	subs	r3, r1, #0
 8009786:	d000      	beq.n	800978a <f_read+0x90>
 8009788:	e0d7      	b.n	800993a <f_read+0x240>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	699a      	ldr	r2, [r3, #24]
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	899b      	ldrh	r3, [r3, #12]
 8009792:	0019      	movs	r1, r3
 8009794:	0010      	movs	r0, r2
 8009796:	f7f6 fcd3 	bl	8000140 <__udivsi3>
 800979a:	0003      	movs	r3, r0
 800979c:	001a      	movs	r2, r3
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	895b      	ldrh	r3, [r3, #10]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	4013      	ands	r3, r2
 80097a6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d131      	bne.n	8009812 <f_read+0x118>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d103      	bne.n	80097be <f_read+0xc4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	633b      	str	r3, [r7, #48]	; 0x30
 80097bc:	e016      	b.n	80097ec <f_read+0xf2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d009      	beq.n	80097da <f_read+0xe0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	699a      	ldr	r2, [r3, #24]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	0011      	movs	r1, r2
 80097ce:	0018      	movs	r0, r3
 80097d0:	f7fe f93c 	bl	8007a4c <clmt_clust>
 80097d4:	0003      	movs	r3, r0
 80097d6:	633b      	str	r3, [r7, #48]	; 0x30
 80097d8:	e008      	b.n	80097ec <f_read+0xf2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	69db      	ldr	r3, [r3, #28]
 80097e0:	0019      	movs	r1, r3
 80097e2:	0010      	movs	r0, r2
 80097e4:	f7fd fe0e 	bl	8007404 <get_fat>
 80097e8:	0003      	movs	r3, r0
 80097ea:	633b      	str	r3, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d804      	bhi.n	80097fc <f_read+0x102>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2202      	movs	r2, #2
 80097f6:	755a      	strb	r2, [r3, #21]
 80097f8:	2302      	movs	r3, #2
 80097fa:	e0dd      	b.n	80099b8 <f_read+0x2be>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fe:	3301      	adds	r3, #1
 8009800:	d104      	bne.n	800980c <f_read+0x112>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	755a      	strb	r2, [r3, #21]
 8009808:	2301      	movs	r3, #1
 800980a:	e0d5      	b.n	80099b8 <f_read+0x2be>
				fp->clust = clst;				/* Update current cluster */
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009810:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	0019      	movs	r1, r3
 800981a:	0010      	movs	r0, r2
 800981c:	f7fd fdd6 	bl	80073cc <clust2sect>
 8009820:	0003      	movs	r3, r0
 8009822:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d104      	bne.n	8009834 <f_read+0x13a>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2202      	movs	r2, #2
 800982e:	755a      	strb	r2, [r3, #21]
 8009830:	2302      	movs	r3, #2
 8009832:	e0c1      	b.n	80099b8 <f_read+0x2be>
			sect += csect;
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	18d3      	adds	r3, r2, r3
 800983a:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	899b      	ldrh	r3, [r3, #12]
 8009840:	0019      	movs	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7f6 fc7c 	bl	8000140 <__udivsi3>
 8009848:	0003      	movs	r3, r0
 800984a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	2b00      	cmp	r3, #0
 8009850:	d03e      	beq.n	80098d0 <f_read+0x1d6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009852:	69fa      	ldr	r2, [r7, #28]
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	18d3      	adds	r3, r2, r3
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	8952      	ldrh	r2, [r2, #10]
 800985c:	4293      	cmp	r3, r2
 800985e:	d905      	bls.n	800986c <f_read+0x172>
					cc = fs->csize - csect;
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	895b      	ldrh	r3, [r3, #10]
 8009864:	001a      	movs	r2, r3
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	7858      	ldrb	r0, [r3, #1]
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	69ba      	ldr	r2, [r7, #24]
 8009874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009876:	f7fd f9d3 	bl	8006c20 <disk_read>
 800987a:	1e03      	subs	r3, r0, #0
 800987c:	d004      	beq.n	8009888 <f_read+0x18e>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2201      	movs	r2, #1
 8009882:	755a      	strb	r2, [r3, #21]
 8009884:	2301      	movs	r3, #1
 8009886:	e097      	b.n	80099b8 <f_read+0x2be>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	7d1b      	ldrb	r3, [r3, #20]
 800988c:	b25b      	sxtb	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	da17      	bge.n	80098c2 <f_read+0x1c8>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a1a      	ldr	r2, [r3, #32]
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800989c:	429a      	cmp	r2, r3
 800989e:	d910      	bls.n	80098c2 <f_read+0x1c8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6a1a      	ldr	r2, [r3, #32]
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	8992      	ldrh	r2, [r2, #12]
 80098ac:	4353      	muls	r3, r2
 80098ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b0:	18d0      	adds	r0, r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3330      	adds	r3, #48	; 0x30
 80098b6:	0019      	movs	r1, r3
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	899b      	ldrh	r3, [r3, #12]
 80098bc:	001a      	movs	r2, r3
 80098be:	f7fd faab 	bl	8006e18 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	899b      	ldrh	r3, [r3, #12]
 80098c6:	001a      	movs	r2, r3
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	4353      	muls	r3, r2
 80098cc:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80098ce:	e05a      	b.n	8009986 <f_read+0x28c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d02c      	beq.n	8009934 <f_read+0x23a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	7d1b      	ldrb	r3, [r3, #20]
 80098de:	b25b      	sxtb	r3, r3
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	da17      	bge.n	8009914 <f_read+0x21a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	7858      	ldrb	r0, [r3, #1]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3330      	adds	r3, #48	; 0x30
 80098ec:	0019      	movs	r1, r3
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6a1a      	ldr	r2, [r3, #32]
 80098f2:	2301      	movs	r3, #1
 80098f4:	f7fd f9bc 	bl	8006c70 <disk_write>
 80098f8:	1e03      	subs	r3, r0, #0
 80098fa:	d004      	beq.n	8009906 <f_read+0x20c>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2201      	movs	r2, #1
 8009900:	755a      	strb	r2, [r3, #21]
 8009902:	2301      	movs	r3, #1
 8009904:	e058      	b.n	80099b8 <f_read+0x2be>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	7d1b      	ldrb	r3, [r3, #20]
 800990a:	227f      	movs	r2, #127	; 0x7f
 800990c:	4013      	ands	r3, r2
 800990e:	b2da      	uxtb	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	7858      	ldrb	r0, [r3, #1]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	3330      	adds	r3, #48	; 0x30
 800991c:	0019      	movs	r1, r3
 800991e:	69ba      	ldr	r2, [r7, #24]
 8009920:	2301      	movs	r3, #1
 8009922:	f7fd f97d 	bl	8006c20 <disk_read>
 8009926:	1e03      	subs	r3, r0, #0
 8009928:	d004      	beq.n	8009934 <f_read+0x23a>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2201      	movs	r2, #1
 800992e:	755a      	strb	r2, [r3, #21]
 8009930:	2301      	movs	r3, #1
 8009932:	e041      	b.n	80099b8 <f_read+0x2be>
			}
#endif
			fp->sect = sect;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	69ba      	ldr	r2, [r7, #24]
 8009938:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	899b      	ldrh	r3, [r3, #12]
 800993e:	001c      	movs	r4, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	699a      	ldr	r2, [r3, #24]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	899b      	ldrh	r3, [r3, #12]
 8009948:	0019      	movs	r1, r3
 800994a:	0010      	movs	r0, r2
 800994c:	f7f6 fc7e 	bl	800024c <__aeabi_uidivmod>
 8009950:	000b      	movs	r3, r1
 8009952:	1ae3      	subs	r3, r4, r3
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	429a      	cmp	r2, r3
 800995c:	d901      	bls.n	8009962 <f_read+0x268>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3330      	adds	r3, #48	; 0x30
 8009966:	001c      	movs	r4, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	699a      	ldr	r2, [r3, #24]
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	899b      	ldrh	r3, [r3, #12]
 8009970:	0019      	movs	r1, r3
 8009972:	0010      	movs	r0, r2
 8009974:	f7f6 fc6a 	bl	800024c <__aeabi_uidivmod>
 8009978:	000b      	movs	r3, r1
 800997a:	18e1      	adds	r1, r4, r3
 800997c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	0018      	movs	r0, r3
 8009982:	f7fd fa49 	bl	8006e18 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998a:	18d3      	adds	r3, r2, r3
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	699a      	ldr	r2, [r3, #24]
 8009992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009994:	18d2      	adds	r2, r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	619a      	str	r2, [r3, #24]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a0:	18d2      	adds	r2, r2, r3
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	601a      	str	r2, [r3, #0]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d000      	beq.n	80099b6 <f_read+0x2bc>
 80099b4:	e6de      	b.n	8009774 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	0018      	movs	r0, r3
 80099ba:	46bd      	mov	sp, r7
 80099bc:	b00e      	add	sp, #56	; 0x38
 80099be:	bdb0      	pop	{r4, r5, r7, pc}

080099c0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80099c0:	b5b0      	push	{r4, r5, r7, lr}
 80099c2:	b08c      	sub	sp, #48	; 0x30
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2200      	movs	r2, #0
 80099d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	252f      	movs	r5, #47	; 0x2f
 80099dc:	197c      	adds	r4, r7, r5
 80099de:	2210      	movs	r2, #16
 80099e0:	18ba      	adds	r2, r7, r2
 80099e2:	0011      	movs	r1, r2
 80099e4:	0018      	movs	r0, r3
 80099e6:	f7ff fbfb 	bl	80091e0 <validate>
 80099ea:	0003      	movs	r3, r0
 80099ec:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80099ee:	197b      	adds	r3, r7, r5
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d107      	bne.n	8009a06 <f_write+0x46>
 80099f6:	197b      	adds	r3, r7, r5
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	7d52      	ldrb	r2, [r2, #21]
 80099fc:	701a      	strb	r2, [r3, #0]
 80099fe:	197b      	adds	r3, r7, r5
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d003      	beq.n	8009a0e <f_write+0x4e>
 8009a06:	232f      	movs	r3, #47	; 0x2f
 8009a08:	18fb      	adds	r3, r7, r3
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	e16f      	b.n	8009cee <f_write+0x32e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	7d1b      	ldrb	r3, [r3, #20]
 8009a12:	001a      	movs	r2, r3
 8009a14:	2302      	movs	r3, #2
 8009a16:	4013      	ands	r3, r2
 8009a18:	d101      	bne.n	8009a1e <f_write+0x5e>
 8009a1a:	2307      	movs	r3, #7
 8009a1c:	e167      	b.n	8009cee <f_write+0x32e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	699a      	ldr	r2, [r3, #24]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	18d2      	adds	r2, r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d300      	bcc.n	8009a30 <f_write+0x70>
 8009a2e:	e150      	b.n	8009cd2 <f_write+0x312>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	43db      	mvns	r3, r3
 8009a36:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009a38:	e14b      	b.n	8009cd2 <f_write+0x312>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	699a      	ldr	r2, [r3, #24]
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	899b      	ldrh	r3, [r3, #12]
 8009a42:	0019      	movs	r1, r3
 8009a44:	0010      	movs	r0, r2
 8009a46:	f7f6 fc01 	bl	800024c <__aeabi_uidivmod>
 8009a4a:	1e0b      	subs	r3, r1, #0
 8009a4c:	d000      	beq.n	8009a50 <f_write+0x90>
 8009a4e:	e0f4      	b.n	8009c3a <f_write+0x27a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	699a      	ldr	r2, [r3, #24]
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	899b      	ldrh	r3, [r3, #12]
 8009a58:	0019      	movs	r1, r3
 8009a5a:	0010      	movs	r0, r2
 8009a5c:	f7f6 fb70 	bl	8000140 <__udivsi3>
 8009a60:	0003      	movs	r3, r0
 8009a62:	001a      	movs	r2, r3
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	895b      	ldrh	r3, [r3, #10]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d146      	bne.n	8009b02 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10d      	bne.n	8009a98 <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d11e      	bne.n	8009ac6 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	0018      	movs	r0, r3
 8009a8e:	f7fd ff37 	bl	8007900 <create_chain>
 8009a92:	0003      	movs	r3, r0
 8009a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a96:	e016      	b.n	8009ac6 <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d009      	beq.n	8009ab4 <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	699a      	ldr	r2, [r3, #24]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	0011      	movs	r1, r2
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	f7fd ffcf 	bl	8007a4c <clmt_clust>
 8009aae:	0003      	movs	r3, r0
 8009ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ab2:	e008      	b.n	8009ac6 <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	69db      	ldr	r3, [r3, #28]
 8009aba:	0019      	movs	r1, r3
 8009abc:	0010      	movs	r0, r2
 8009abe:	f7fd ff1f 	bl	8007900 <create_chain>
 8009ac2:	0003      	movs	r3, r0
 8009ac4:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d100      	bne.n	8009ace <f_write+0x10e>
 8009acc:	e106      	b.n	8009cdc <f_write+0x31c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d104      	bne.n	8009ade <f_write+0x11e>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	755a      	strb	r2, [r3, #21]
 8009ada:	2302      	movs	r3, #2
 8009adc:	e107      	b.n	8009cee <f_write+0x32e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	d104      	bne.n	8009aee <f_write+0x12e>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	755a      	strb	r2, [r3, #21]
 8009aea:	2301      	movs	r3, #1
 8009aec:	e0ff      	b.n	8009cee <f_write+0x32e>
				fp->clust = clst;			/* Update current cluster */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009af2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d102      	bne.n	8009b02 <f_write+0x142>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b00:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	7d1b      	ldrb	r3, [r3, #20]
 8009b06:	b25b      	sxtb	r3, r3
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	da17      	bge.n	8009b3c <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	7858      	ldrb	r0, [r3, #1]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3330      	adds	r3, #48	; 0x30
 8009b14:	0019      	movs	r1, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6a1a      	ldr	r2, [r3, #32]
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	f7fd f8a8 	bl	8006c70 <disk_write>
 8009b20:	1e03      	subs	r3, r0, #0
 8009b22:	d004      	beq.n	8009b2e <f_write+0x16e>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2201      	movs	r2, #1
 8009b28:	755a      	strb	r2, [r3, #21]
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e0df      	b.n	8009cee <f_write+0x32e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	7d1b      	ldrb	r3, [r3, #20]
 8009b32:	227f      	movs	r2, #127	; 0x7f
 8009b34:	4013      	ands	r3, r2
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	0019      	movs	r1, r3
 8009b44:	0010      	movs	r0, r2
 8009b46:	f7fd fc41 	bl	80073cc <clust2sect>
 8009b4a:	0003      	movs	r3, r0
 8009b4c:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d104      	bne.n	8009b5e <f_write+0x19e>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2202      	movs	r2, #2
 8009b58:	755a      	strb	r2, [r3, #21]
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	e0c7      	b.n	8009cee <f_write+0x32e>
			sect += csect;
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	18d3      	adds	r3, r2, r3
 8009b64:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	899b      	ldrh	r3, [r3, #12]
 8009b6a:	0019      	movs	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7f6 fae7 	bl	8000140 <__udivsi3>
 8009b72:	0003      	movs	r3, r0
 8009b74:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d040      	beq.n	8009bfe <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b7c:	69ba      	ldr	r2, [r7, #24]
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	18d3      	adds	r3, r2, r3
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	8952      	ldrh	r2, [r2, #10]
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d905      	bls.n	8009b96 <f_write+0x1d6>
					cc = fs->csize - csect;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	895b      	ldrh	r3, [r3, #10]
 8009b8e:	001a      	movs	r2, r3
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	7858      	ldrb	r0, [r3, #1]
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	69f9      	ldr	r1, [r7, #28]
 8009ba0:	f7fd f866 	bl	8006c70 <disk_write>
 8009ba4:	1e03      	subs	r3, r0, #0
 8009ba6:	d004      	beq.n	8009bb2 <f_write+0x1f2>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2201      	movs	r2, #1
 8009bac:	755a      	strb	r2, [r3, #21]
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e09d      	b.n	8009cee <f_write+0x32e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6a1a      	ldr	r2, [r3, #32]
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	6a3a      	ldr	r2, [r7, #32]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d917      	bls.n	8009bf0 <f_write+0x230>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3330      	adds	r3, #48	; 0x30
 8009bc4:	0018      	movs	r0, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6a1a      	ldr	r2, [r3, #32]
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	8992      	ldrh	r2, [r2, #12]
 8009bd2:	4353      	muls	r3, r2
 8009bd4:	69fa      	ldr	r2, [r7, #28]
 8009bd6:	18d1      	adds	r1, r2, r3
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	899b      	ldrh	r3, [r3, #12]
 8009bdc:	001a      	movs	r2, r3
 8009bde:	f7fd f91b 	bl	8006e18 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	7d1b      	ldrb	r3, [r3, #20]
 8009be6:	227f      	movs	r2, #127	; 0x7f
 8009be8:	4013      	ands	r3, r2
 8009bea:	b2da      	uxtb	r2, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	899b      	ldrh	r3, [r3, #12]
 8009bf4:	001a      	movs	r2, r3
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	4353      	muls	r3, r2
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009bfc:	e04b      	b.n	8009c96 <f_write+0x2d6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d015      	beq.n	8009c34 <f_write+0x274>
				fp->fptr < fp->obj.objsize &&
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	699a      	ldr	r2, [r3, #24]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d20f      	bcs.n	8009c34 <f_write+0x274>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	7858      	ldrb	r0, [r3, #1]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3330      	adds	r3, #48	; 0x30
 8009c1c:	0019      	movs	r1, r3
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	2301      	movs	r3, #1
 8009c22:	f7fc fffd 	bl	8006c20 <disk_read>
 8009c26:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 8009c28:	d004      	beq.n	8009c34 <f_write+0x274>
					ABORT(fs, FR_DISK_ERR);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	755a      	strb	r2, [r3, #21]
 8009c30:	2301      	movs	r3, #1
 8009c32:	e05c      	b.n	8009cee <f_write+0x32e>
			}
#endif
			fp->sect = sect;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	899b      	ldrh	r3, [r3, #12]
 8009c3e:	001c      	movs	r4, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	699a      	ldr	r2, [r3, #24]
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	899b      	ldrh	r3, [r3, #12]
 8009c48:	0019      	movs	r1, r3
 8009c4a:	0010      	movs	r0, r2
 8009c4c:	f7f6 fafe 	bl	800024c <__aeabi_uidivmod>
 8009c50:	000b      	movs	r3, r1
 8009c52:	1ae3      	subs	r3, r4, r3
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d901      	bls.n	8009c62 <f_write+0x2a2>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3330      	adds	r3, #48	; 0x30
 8009c66:	001c      	movs	r4, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	699a      	ldr	r2, [r3, #24]
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	899b      	ldrh	r3, [r3, #12]
 8009c70:	0019      	movs	r1, r3
 8009c72:	0010      	movs	r0, r2
 8009c74:	f7f6 faea 	bl	800024c <__aeabi_uidivmod>
 8009c78:	000b      	movs	r3, r1
 8009c7a:	18e3      	adds	r3, r4, r3
 8009c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7e:	69f9      	ldr	r1, [r7, #28]
 8009c80:	0018      	movs	r0, r3
 8009c82:	f7fd f8c9 	bl	8006e18 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	7d1b      	ldrb	r3, [r3, #20]
 8009c8a:	2280      	movs	r2, #128	; 0x80
 8009c8c:	4252      	negs	r2, r2
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009c96:	69fa      	ldr	r2, [r7, #28]
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	18d3      	adds	r3, r2, r3
 8009c9c:	61fb      	str	r3, [r7, #28]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	699a      	ldr	r2, [r3, #24]
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	18d2      	adds	r2, r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	619a      	str	r2, [r3, #24]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	68d9      	ldr	r1, [r3, #12]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	699a      	ldr	r2, [r3, #24]
 8009cb2:	000b      	movs	r3, r1
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d200      	bcs.n	8009cba <f_write+0x2fa>
 8009cb8:	0013      	movs	r3, r2
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	60d3      	str	r3, [r2, #12]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	18d2      	adds	r2, r2, r3
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	601a      	str	r2, [r3, #0]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d000      	beq.n	8009cda <f_write+0x31a>
 8009cd8:	e6af      	b.n	8009a3a <f_write+0x7a>
 8009cda:	e000      	b.n	8009cde <f_write+0x31e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009cdc:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	7d1b      	ldrb	r3, [r3, #20]
 8009ce2:	2240      	movs	r2, #64	; 0x40
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	0018      	movs	r0, r3
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	b00c      	add	sp, #48	; 0x30
 8009cf4:	bdb0      	pop	{r4, r5, r7, pc}

08009cf6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009cf6:	b5b0      	push	{r4, r5, r7, lr}
 8009cf8:	b086      	sub	sp, #24
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2517      	movs	r5, #23
 8009d02:	197c      	adds	r4, r7, r5
 8009d04:	2208      	movs	r2, #8
 8009d06:	18ba      	adds	r2, r7, r2
 8009d08:	0011      	movs	r1, r2
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f7ff fa68 	bl	80091e0 <validate>
 8009d10:	0003      	movs	r3, r0
 8009d12:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009d14:	197b      	adds	r3, r7, r5
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d16e      	bne.n	8009dfa <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7d1b      	ldrb	r3, [r3, #20]
 8009d20:	001a      	movs	r2, r3
 8009d22:	2340      	movs	r3, #64	; 0x40
 8009d24:	4013      	ands	r3, r2
 8009d26:	d068      	beq.n	8009dfa <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	7d1b      	ldrb	r3, [r3, #20]
 8009d2c:	b25b      	sxtb	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	da14      	bge.n	8009d5c <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	7858      	ldrb	r0, [r3, #1]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3330      	adds	r3, #48	; 0x30
 8009d3a:	0019      	movs	r1, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a1a      	ldr	r2, [r3, #32]
 8009d40:	2301      	movs	r3, #1
 8009d42:	f7fc ff95 	bl	8006c70 <disk_write>
 8009d46:	1e03      	subs	r3, r0, #0
 8009d48:	d001      	beq.n	8009d4e <f_sync+0x58>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e058      	b.n	8009e00 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	7d1b      	ldrb	r3, [r3, #20]
 8009d52:	227f      	movs	r2, #127	; 0x7f
 8009d54:	4013      	ands	r3, r2
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009d5c:	f7fc fea2 	bl	8006aa4 <get_fattime>
 8009d60:	0003      	movs	r3, r0
 8009d62:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6a:	2517      	movs	r5, #23
 8009d6c:	197c      	adds	r4, r7, r5
 8009d6e:	0019      	movs	r1, r3
 8009d70:	0010      	movs	r0, r2
 8009d72:	f7fd fa79 	bl	8007268 <move_window>
 8009d76:	0003      	movs	r3, r0
 8009d78:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 8009d7a:	002c      	movs	r4, r5
 8009d7c:	193b      	adds	r3, r7, r4
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d13a      	bne.n	8009dfa <f_sync+0x104>
					dir = fp->dir_ptr;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d88:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	330b      	adds	r3, #11
 8009d8e:	781a      	ldrb	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	330b      	adds	r3, #11
 8009d94:	2120      	movs	r1, #32
 8009d96:	430a      	orrs	r2, r1
 8009d98:	b2d2      	uxtb	r2, r2
 8009d9a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6818      	ldr	r0, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689a      	ldr	r2, [r3, #8]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	0019      	movs	r1, r3
 8009da8:	f7fe f86a 	bl	8007e80 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	331c      	adds	r3, #28
 8009db0:	001a      	movs	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	0019      	movs	r1, r3
 8009db8:	0010      	movs	r0, r2
 8009dba:	f7fd f803 	bl	8006dc4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3316      	adds	r3, #22
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	0011      	movs	r1, r2
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	f7fc fffc 	bl	8006dc4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	3312      	adds	r3, #18
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	f7fc ffd8 	bl	8006d88 <st_word>
					fs->wflag = 1;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	193c      	adds	r4, r7, r4
 8009de2:	0018      	movs	r0, r3
 8009de4:	f7fd fa76 	bl	80072d4 <sync_fs>
 8009de8:	0003      	movs	r3, r0
 8009dea:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	7d1b      	ldrb	r3, [r3, #20]
 8009df0:	2240      	movs	r2, #64	; 0x40
 8009df2:	4393      	bics	r3, r2
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009dfa:	2317      	movs	r3, #23
 8009dfc:	18fb      	adds	r3, r7, r3
 8009dfe:	781b      	ldrb	r3, [r3, #0]
}
 8009e00:	0018      	movs	r0, r3
 8009e02:	46bd      	mov	sp, r7
 8009e04:	b006      	add	sp, #24
 8009e06:	bdb0      	pop	{r4, r5, r7, pc}

08009e08 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009e08:	b5b0      	push	{r4, r5, r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009e10:	250f      	movs	r5, #15
 8009e12:	197c      	adds	r4, r7, r5
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	0018      	movs	r0, r3
 8009e18:	f7ff ff6d 	bl	8009cf6 <f_sync>
 8009e1c:	0003      	movs	r3, r0
 8009e1e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8009e20:	197b      	adds	r3, r7, r5
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d11c      	bne.n	8009e62 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	197c      	adds	r4, r7, r5
 8009e2c:	2208      	movs	r2, #8
 8009e2e:	18ba      	adds	r2, r7, r2
 8009e30:	0011      	movs	r1, r2
 8009e32:	0018      	movs	r0, r3
 8009e34:	f7ff f9d4 	bl	80091e0 <validate>
 8009e38:	0003      	movs	r3, r0
 8009e3a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8009e3c:	197b      	adds	r3, r7, r5
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10e      	bne.n	8009e62 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	197c      	adds	r4, r7, r5
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	f7fd f95a 	bl	8007104 <dec_lock>
 8009e50:	0003      	movs	r3, r0
 8009e52:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8009e54:	197b      	adds	r3, r7, r5
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d102      	bne.n	8009e62 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009e62:	230f      	movs	r3, #15
 8009e64:	18fb      	adds	r3, r7, r3
 8009e66:	781b      	ldrb	r3, [r3, #0]
}
 8009e68:	0018      	movs	r0, r3
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	b004      	add	sp, #16
 8009e6e:	bdb0      	pop	{r4, r5, r7, pc}

08009e70 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009e70:	b590      	push	{r4, r7, lr}
 8009e72:	b089      	sub	sp, #36	; 0x24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009e84:	e022      	b.n	8009ecc <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009e86:	2310      	movs	r3, #16
 8009e88:	18fb      	adds	r3, r7, r3
 8009e8a:	2414      	movs	r4, #20
 8009e8c:	1939      	adds	r1, r7, r4
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f7ff fc32 	bl	80096fa <f_read>
		if (rc != 1) break;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d11d      	bne.n	8009ed8 <f_gets+0x68>
		c = s[0];
 8009e9c:	2117      	movs	r1, #23
 8009e9e:	187b      	adds	r3, r7, r1
 8009ea0:	193a      	adds	r2, r7, r4
 8009ea2:	7812      	ldrb	r2, [r2, #0]
 8009ea4:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009ea6:	187b      	adds	r3, r7, r1
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	2b0d      	cmp	r3, #13
 8009eac:	d100      	bne.n	8009eb0 <f_gets+0x40>
 8009eae:	e00d      	b.n	8009ecc <f_gets+0x5c>
		*p++ = c;
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	61ba      	str	r2, [r7, #24]
 8009eb6:	2117      	movs	r1, #23
 8009eb8:	187a      	adds	r2, r7, r1
 8009eba:	7812      	ldrb	r2, [r2, #0]
 8009ebc:	701a      	strb	r2, [r3, #0]
		n++;
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009ec4:	187b      	adds	r3, r7, r1
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2b0a      	cmp	r3, #10
 8009eca:	d007      	beq.n	8009edc <f_gets+0x6c>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	69fa      	ldr	r2, [r7, #28]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	dbd7      	blt.n	8009e86 <f_gets+0x16>
 8009ed6:	e002      	b.n	8009ede <f_gets+0x6e>
		if (rc != 1) break;
 8009ed8:	46c0      	nop			; (mov r8, r8)
 8009eda:	e000      	b.n	8009ede <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 8009edc:	46c0      	nop			; (mov r8, r8)
	}
	*p = 0;
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <f_gets+0x7e>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	e000      	b.n	8009ef0 <f_gets+0x80>
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	b009      	add	sp, #36	; 0x24
 8009ef6:	bd90      	pop	{r4, r7, pc}

08009ef8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	000a      	movs	r2, r1
 8009f02:	1cfb      	adds	r3, r7, #3
 8009f04:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009f06:	1cfb      	adds	r3, r7, #3
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	2b0a      	cmp	r3, #10
 8009f0c:	d104      	bne.n	8009f18 <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	210d      	movs	r1, #13
 8009f12:	0018      	movs	r0, r3
 8009f14:	f7ff fff0 	bl	8009ef8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	db26      	blt.n	8009f72 <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	60fa      	str	r2, [r7, #12]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	18d3      	adds	r3, r2, r3
 8009f2e:	1cfa      	adds	r2, r7, #3
 8009f30:	7812      	ldrb	r2, [r2, #0]
 8009f32:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2b3c      	cmp	r3, #60	; 0x3c
 8009f38:	dd12      	ble.n	8009f60 <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	330c      	adds	r3, #12
 8009f42:	0019      	movs	r1, r3
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	2308      	movs	r3, #8
 8009f48:	18fb      	adds	r3, r7, r3
 8009f4a:	f7ff fd39 	bl	80099c0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d101      	bne.n	8009f5a <putc_bfd+0x62>
 8009f56:	2300      	movs	r3, #0
 8009f58:	e001      	b.n	8009f5e <putc_bfd+0x66>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	425b      	negs	r3, r3
 8009f5e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	1c5a      	adds	r2, r3, #1
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	609a      	str	r2, [r3, #8]
 8009f70:	e000      	b.n	8009f74 <putc_bfd+0x7c>
	if (i < 0) return;
 8009f72:	46c0      	nop			; (mov r8, r8)
}
 8009f74:	46bd      	mov	sp, r7
 8009f76:	b004      	add	sp, #16
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	db15      	blt.n	8009fb6 <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6818      	ldr	r0, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	330c      	adds	r3, #12
 8009f92:	0019      	movs	r1, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	001a      	movs	r2, r3
 8009f9a:	230c      	movs	r3, #12
 8009f9c:	18fb      	adds	r3, r7, r3
 8009f9e:	f7ff fd0f 	bl	80099c0 <f_write>
 8009fa2:	1e03      	subs	r3, r0, #0
 8009fa4:	d107      	bne.n	8009fb6 <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d102      	bne.n	8009fb6 <putc_flush+0x3c>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	e001      	b.n	8009fba <putc_flush+0x40>
	return EOF;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	425b      	negs	r3, r3
}
 8009fba:	0018      	movs	r0, r3
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	b004      	add	sp, #16
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b082      	sub	sp, #8
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	605a      	str	r2, [r3, #4]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	609a      	str	r2, [r3, #8]
}
 8009fe0:	46c0      	nop			; (mov r8, r8)
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	b002      	add	sp, #8
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b096      	sub	sp, #88	; 0x58
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	230c      	movs	r3, #12
 8009ff6:	18fb      	adds	r3, r7, r3
 8009ff8:	0011      	movs	r1, r2
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f7ff ffe1 	bl	8009fc2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a000:	e009      	b.n	800a016 <f_puts+0x2e>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	1c5a      	adds	r2, r3, #1
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	781a      	ldrb	r2, [r3, #0]
 800a00a:	230c      	movs	r3, #12
 800a00c:	18fb      	adds	r3, r7, r3
 800a00e:	0011      	movs	r1, r2
 800a010:	0018      	movs	r0, r3
 800a012:	f7ff ff71 	bl	8009ef8 <putc_bfd>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1f1      	bne.n	800a002 <f_puts+0x1a>
	return putc_flush(&pb);
 800a01e:	230c      	movs	r3, #12
 800a020:	18fb      	adds	r3, r7, r3
 800a022:	0018      	movs	r0, r3
 800a024:	f7ff ffa9 	bl	8009f7a <putc_flush>
 800a028:	0003      	movs	r3, r0
}
 800a02a:	0018      	movs	r0, r3
 800a02c:	46bd      	mov	sp, r7
 800a02e:	b016      	add	sp, #88	; 0x58
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a034:	b590      	push	{r4, r7, lr}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	1dfb      	adds	r3, r7, #7
 800a040:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800a042:	2417      	movs	r4, #23
 800a044:	193b      	adds	r3, r7, r4
 800a046:	2201      	movs	r2, #1
 800a048:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800a04a:	2016      	movs	r0, #22
 800a04c:	183b      	adds	r3, r7, r0
 800a04e:	2200      	movs	r2, #0
 800a050:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 800a052:	4b21      	ldr	r3, [pc, #132]	; (800a0d8 <FATFS_LinkDriverEx+0xa4>)
 800a054:	7a5b      	ldrb	r3, [r3, #9]
 800a056:	b2db      	uxtb	r3, r3
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d136      	bne.n	800a0ca <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a05c:	4b1e      	ldr	r3, [pc, #120]	; (800a0d8 <FATFS_LinkDriverEx+0xa4>)
 800a05e:	7a5b      	ldrb	r3, [r3, #9]
 800a060:	b2db      	uxtb	r3, r3
 800a062:	001a      	movs	r2, r3
 800a064:	4b1c      	ldr	r3, [pc, #112]	; (800a0d8 <FATFS_LinkDriverEx+0xa4>)
 800a066:	2100      	movs	r1, #0
 800a068:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a06a:	4b1b      	ldr	r3, [pc, #108]	; (800a0d8 <FATFS_LinkDriverEx+0xa4>)
 800a06c:	7a5b      	ldrb	r3, [r3, #9]
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	4a19      	ldr	r2, [pc, #100]	; (800a0d8 <FATFS_LinkDriverEx+0xa4>)
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	18d3      	adds	r3, r2, r3
 800a076:	3304      	adds	r3, #4
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 800a07c:	4b16      	ldr	r3, [pc, #88]	; (800a0d8 <FATFS_LinkDriverEx+0xa4>)
 800a07e:	7a5b      	ldrb	r3, [r3, #9]
 800a080:	b2db      	uxtb	r3, r3
 800a082:	001a      	movs	r2, r3
 800a084:	4b14      	ldr	r3, [pc, #80]	; (800a0d8 <FATFS_LinkDriverEx+0xa4>)
 800a086:	189b      	adds	r3, r3, r2
 800a088:	1dfa      	adds	r2, r7, #7
 800a08a:	7812      	ldrb	r2, [r2, #0]
 800a08c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a08e:	4b12      	ldr	r3, [pc, #72]	; (800a0d8 <FATFS_LinkDriverEx+0xa4>)
 800a090:	7a5b      	ldrb	r3, [r3, #9]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	b2d1      	uxtb	r1, r2
 800a098:	4a0f      	ldr	r2, [pc, #60]	; (800a0d8 <FATFS_LinkDriverEx+0xa4>)
 800a09a:	7251      	strb	r1, [r2, #9]
 800a09c:	183a      	adds	r2, r7, r0
 800a09e:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800a0a0:	183b      	adds	r3, r7, r0
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	3330      	adds	r3, #48	; 0x30
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	223a      	movs	r2, #58	; 0x3a
 800a0b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	3302      	adds	r3, #2
 800a0b8:	222f      	movs	r2, #47	; 0x2f
 800a0ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	3303      	adds	r3, #3
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a0c4:	193b      	adds	r3, r7, r4
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800a0ca:	2317      	movs	r3, #23
 800a0cc:	18fb      	adds	r3, r7, r3
 800a0ce:	781b      	ldrb	r3, [r3, #0]
}
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	b007      	add	sp, #28
 800a0d6:	bd90      	pop	{r4, r7, pc}
 800a0d8:	20000580 	.word	0x20000580

0800a0dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a0e6:	6839      	ldr	r1, [r7, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f7ff ffa1 	bl	800a034 <FATFS_LinkDriverEx>
 800a0f2:	0003      	movs	r3, r0
}
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	b002      	add	sp, #8
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	0002      	movs	r2, r0
 800a104:	6039      	str	r1, [r7, #0]
 800a106:	1dbb      	adds	r3, r7, #6
 800a108:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a10a:	1dbb      	adds	r3, r7, #6
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	2b7f      	cmp	r3, #127	; 0x7f
 800a110:	d805      	bhi.n	800a11e <ff_convert+0x22>
		c = chr;
 800a112:	230e      	movs	r3, #14
 800a114:	18fb      	adds	r3, r7, r3
 800a116:	1dba      	adds	r2, r7, #6
 800a118:	8812      	ldrh	r2, [r2, #0]
 800a11a:	801a      	strh	r2, [r3, #0]
 800a11c:	e037      	b.n	800a18e <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d010      	beq.n	800a146 <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a124:	1dbb      	adds	r3, r7, #6
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	2bff      	cmp	r3, #255	; 0xff
 800a12a:	d807      	bhi.n	800a13c <ff_convert+0x40>
 800a12c:	1dbb      	adds	r3, r7, #6
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	3b80      	subs	r3, #128	; 0x80
 800a132:	001a      	movs	r2, r3
 800a134:	4b19      	ldr	r3, [pc, #100]	; (800a19c <ff_convert+0xa0>)
 800a136:	0052      	lsls	r2, r2, #1
 800a138:	5ad2      	ldrh	r2, [r2, r3]
 800a13a:	e000      	b.n	800a13e <ff_convert+0x42>
 800a13c:	2200      	movs	r2, #0
 800a13e:	230e      	movs	r3, #14
 800a140:	18fb      	adds	r3, r7, r3
 800a142:	801a      	strh	r2, [r3, #0]
 800a144:	e023      	b.n	800a18e <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a146:	230e      	movs	r3, #14
 800a148:	18fb      	adds	r3, r7, r3
 800a14a:	2200      	movs	r2, #0
 800a14c:	801a      	strh	r2, [r3, #0]
 800a14e:	e00e      	b.n	800a16e <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 800a150:	210e      	movs	r1, #14
 800a152:	187b      	adds	r3, r7, r1
 800a154:	881a      	ldrh	r2, [r3, #0]
 800a156:	4b11      	ldr	r3, [pc, #68]	; (800a19c <ff_convert+0xa0>)
 800a158:	0052      	lsls	r2, r2, #1
 800a15a:	5ad3      	ldrh	r3, [r2, r3]
 800a15c:	1dba      	adds	r2, r7, #6
 800a15e:	8812      	ldrh	r2, [r2, #0]
 800a160:	429a      	cmp	r2, r3
 800a162:	d00a      	beq.n	800a17a <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 800a164:	187b      	adds	r3, r7, r1
 800a166:	881a      	ldrh	r2, [r3, #0]
 800a168:	187b      	adds	r3, r7, r1
 800a16a:	3201      	adds	r2, #1
 800a16c:	801a      	strh	r2, [r3, #0]
 800a16e:	230e      	movs	r3, #14
 800a170:	18fb      	adds	r3, r7, r3
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	2b7f      	cmp	r3, #127	; 0x7f
 800a176:	d9eb      	bls.n	800a150 <ff_convert+0x54>
 800a178:	e000      	b.n	800a17c <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 800a17a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 800a17c:	210e      	movs	r1, #14
 800a17e:	187b      	adds	r3, r7, r1
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	3380      	adds	r3, #128	; 0x80
 800a184:	b29a      	uxth	r2, r3
 800a186:	187b      	adds	r3, r7, r1
 800a188:	21ff      	movs	r1, #255	; 0xff
 800a18a:	400a      	ands	r2, r1
 800a18c:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 800a18e:	230e      	movs	r3, #14
 800a190:	18fb      	adds	r3, r7, r3
 800a192:	881b      	ldrh	r3, [r3, #0]
}
 800a194:	0018      	movs	r0, r3
 800a196:	46bd      	mov	sp, r7
 800a198:	b004      	add	sp, #16
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	0800ee80 	.word	0x0800ee80

0800a1a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a1a0:	b5b0      	push	{r4, r5, r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	0002      	movs	r2, r0
 800a1a8:	1dbb      	adds	r3, r7, #6
 800a1aa:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a1ac:	1dbb      	adds	r3, r7, #6
 800a1ae:	881a      	ldrh	r2, [r3, #0]
 800a1b0:	2380      	movs	r3, #128	; 0x80
 800a1b2:	015b      	lsls	r3, r3, #5
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d201      	bcs.n	800a1bc <ff_wtoupper+0x1c>
 800a1b8:	4b4d      	ldr	r3, [pc, #308]	; (800a2f0 <ff_wtoupper+0x150>)
 800a1ba:	e000      	b.n	800a1be <ff_wtoupper+0x1e>
 800a1bc:	4b4d      	ldr	r3, [pc, #308]	; (800a2f4 <ff_wtoupper+0x154>)
 800a1be:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	1c9a      	adds	r2, r3, #2
 800a1c4:	617a      	str	r2, [r7, #20]
 800a1c6:	2412      	movs	r4, #18
 800a1c8:	193a      	adds	r2, r7, r4
 800a1ca:	881b      	ldrh	r3, [r3, #0]
 800a1cc:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 800a1ce:	193b      	adds	r3, r7, r4
 800a1d0:	881b      	ldrh	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d100      	bne.n	800a1d8 <ff_wtoupper+0x38>
 800a1d6:	e084      	b.n	800a2e2 <ff_wtoupper+0x142>
 800a1d8:	1dba      	adds	r2, r7, #6
 800a1da:	193b      	adds	r3, r7, r4
 800a1dc:	8812      	ldrh	r2, [r2, #0]
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d200      	bcs.n	800a1e6 <ff_wtoupper+0x46>
 800a1e4:	e07d      	b.n	800a2e2 <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	1c9a      	adds	r2, r3, #2
 800a1ea:	617a      	str	r2, [r7, #20]
 800a1ec:	2010      	movs	r0, #16
 800a1ee:	183a      	adds	r2, r7, r0
 800a1f0:	881b      	ldrh	r3, [r3, #0]
 800a1f2:	8013      	strh	r3, [r2, #0]
 800a1f4:	250e      	movs	r5, #14
 800a1f6:	197b      	adds	r3, r7, r5
 800a1f8:	183a      	adds	r2, r7, r0
 800a1fa:	8812      	ldrh	r2, [r2, #0]
 800a1fc:	0a12      	lsrs	r2, r2, #8
 800a1fe:	801a      	strh	r2, [r3, #0]
 800a200:	183b      	adds	r3, r7, r0
 800a202:	183a      	adds	r2, r7, r0
 800a204:	8812      	ldrh	r2, [r2, #0]
 800a206:	21ff      	movs	r1, #255	; 0xff
 800a208:	400a      	ands	r2, r1
 800a20a:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 800a20c:	1dbb      	adds	r3, r7, #6
 800a20e:	881a      	ldrh	r2, [r3, #0]
 800a210:	193b      	adds	r3, r7, r4
 800a212:	8819      	ldrh	r1, [r3, #0]
 800a214:	183b      	adds	r3, r7, r0
 800a216:	881b      	ldrh	r3, [r3, #0]
 800a218:	18cb      	adds	r3, r1, r3
 800a21a:	429a      	cmp	r2, r3
 800a21c:	da52      	bge.n	800a2c4 <ff_wtoupper+0x124>
			switch (cmd) {
 800a21e:	197b      	adds	r3, r7, r5
 800a220:	881b      	ldrh	r3, [r3, #0]
 800a222:	2b08      	cmp	r3, #8
 800a224:	d85c      	bhi.n	800a2e0 <ff_wtoupper+0x140>
 800a226:	009a      	lsls	r2, r3, #2
 800a228:	4b33      	ldr	r3, [pc, #204]	; (800a2f8 <ff_wtoupper+0x158>)
 800a22a:	18d3      	adds	r3, r2, r3
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a230:	1dbb      	adds	r3, r7, #6
 800a232:	881a      	ldrh	r2, [r3, #0]
 800a234:	2312      	movs	r3, #18
 800a236:	18fb      	adds	r3, r7, r3
 800a238:	881b      	ldrh	r3, [r3, #0]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	005b      	lsls	r3, r3, #1
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	18d2      	adds	r2, r2, r3
 800a242:	1dbb      	adds	r3, r7, #6
 800a244:	8812      	ldrh	r2, [r2, #0]
 800a246:	801a      	strh	r2, [r3, #0]
 800a248:	e03b      	b.n	800a2c2 <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a24a:	1dba      	adds	r2, r7, #6
 800a24c:	2312      	movs	r3, #18
 800a24e:	18fb      	adds	r3, r7, r3
 800a250:	8812      	ldrh	r2, [r2, #0]
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	b29b      	uxth	r3, r3
 800a258:	2201      	movs	r2, #1
 800a25a:	4013      	ands	r3, r2
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	1dbb      	adds	r3, r7, #6
 800a260:	1db9      	adds	r1, r7, #6
 800a262:	8809      	ldrh	r1, [r1, #0]
 800a264:	1a8a      	subs	r2, r1, r2
 800a266:	801a      	strh	r2, [r3, #0]
 800a268:	e02b      	b.n	800a2c2 <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a26a:	1dbb      	adds	r3, r7, #6
 800a26c:	1dba      	adds	r2, r7, #6
 800a26e:	8812      	ldrh	r2, [r2, #0]
 800a270:	3a10      	subs	r2, #16
 800a272:	801a      	strh	r2, [r3, #0]
 800a274:	e025      	b.n	800a2c2 <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a276:	1dbb      	adds	r3, r7, #6
 800a278:	1dba      	adds	r2, r7, #6
 800a27a:	8812      	ldrh	r2, [r2, #0]
 800a27c:	3a20      	subs	r2, #32
 800a27e:	801a      	strh	r2, [r3, #0]
 800a280:	e01f      	b.n	800a2c2 <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a282:	1dbb      	adds	r3, r7, #6
 800a284:	1dba      	adds	r2, r7, #6
 800a286:	8812      	ldrh	r2, [r2, #0]
 800a288:	3a30      	subs	r2, #48	; 0x30
 800a28a:	801a      	strh	r2, [r3, #0]
 800a28c:	e019      	b.n	800a2c2 <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a28e:	1dbb      	adds	r3, r7, #6
 800a290:	1dba      	adds	r2, r7, #6
 800a292:	8812      	ldrh	r2, [r2, #0]
 800a294:	3a1a      	subs	r2, #26
 800a296:	801a      	strh	r2, [r3, #0]
 800a298:	e013      	b.n	800a2c2 <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a29a:	1dbb      	adds	r3, r7, #6
 800a29c:	1dba      	adds	r2, r7, #6
 800a29e:	8812      	ldrh	r2, [r2, #0]
 800a2a0:	3208      	adds	r2, #8
 800a2a2:	801a      	strh	r2, [r3, #0]
 800a2a4:	e00d      	b.n	800a2c2 <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a2a6:	1dbb      	adds	r3, r7, #6
 800a2a8:	1dba      	adds	r2, r7, #6
 800a2aa:	8812      	ldrh	r2, [r2, #0]
 800a2ac:	3a50      	subs	r2, #80	; 0x50
 800a2ae:	801a      	strh	r2, [r3, #0]
 800a2b0:	e007      	b.n	800a2c2 <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a2b2:	1dbb      	adds	r3, r7, #6
 800a2b4:	1dba      	adds	r2, r7, #6
 800a2b6:	8812      	ldrh	r2, [r2, #0]
 800a2b8:	4910      	ldr	r1, [pc, #64]	; (800a2fc <ff_wtoupper+0x15c>)
 800a2ba:	468c      	mov	ip, r1
 800a2bc:	4462      	add	r2, ip
 800a2be:	801a      	strh	r2, [r3, #0]
 800a2c0:	46c0      	nop			; (mov r8, r8)
			}
			break;
 800a2c2:	e00d      	b.n	800a2e0 <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 800a2c4:	230e      	movs	r3, #14
 800a2c6:	18fb      	adds	r3, r7, r3
 800a2c8:	881b      	ldrh	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d000      	beq.n	800a2d0 <ff_wtoupper+0x130>
 800a2ce:	e777      	b.n	800a1c0 <ff_wtoupper+0x20>
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	18fb      	adds	r3, r7, r3
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	005b      	lsls	r3, r3, #1
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	18d3      	adds	r3, r2, r3
 800a2dc:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a2de:	e76f      	b.n	800a1c0 <ff_wtoupper+0x20>
			break;
 800a2e0:	46c0      	nop			; (mov r8, r8)
	}

	return chr;
 800a2e2:	1dbb      	adds	r3, r7, #6
 800a2e4:	881b      	ldrh	r3, [r3, #0]
}
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	b006      	add	sp, #24
 800a2ec:	bdb0      	pop	{r4, r5, r7, pc}
 800a2ee:	46c0      	nop			; (mov r8, r8)
 800a2f0:	0800efa4 	.word	0x0800efa4
 800a2f4:	0800f198 	.word	0x0800f198
 800a2f8:	0800ef80 	.word	0x0800ef80
 800a2fc:	ffffe3a0 	.word	0xffffe3a0

0800a300 <__cvt>:
 800a300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a302:	001e      	movs	r6, r3
 800a304:	2300      	movs	r3, #0
 800a306:	0014      	movs	r4, r2
 800a308:	b08b      	sub	sp, #44	; 0x2c
 800a30a:	429e      	cmp	r6, r3
 800a30c:	da04      	bge.n	800a318 <__cvt+0x18>
 800a30e:	2180      	movs	r1, #128	; 0x80
 800a310:	0609      	lsls	r1, r1, #24
 800a312:	1873      	adds	r3, r6, r1
 800a314:	001e      	movs	r6, r3
 800a316:	232d      	movs	r3, #45	; 0x2d
 800a318:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a31a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a31c:	7013      	strb	r3, [r2, #0]
 800a31e:	2320      	movs	r3, #32
 800a320:	2203      	movs	r2, #3
 800a322:	439f      	bics	r7, r3
 800a324:	2f46      	cmp	r7, #70	; 0x46
 800a326:	d007      	beq.n	800a338 <__cvt+0x38>
 800a328:	003b      	movs	r3, r7
 800a32a:	3b45      	subs	r3, #69	; 0x45
 800a32c:	4259      	negs	r1, r3
 800a32e:	414b      	adcs	r3, r1
 800a330:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a332:	3a01      	subs	r2, #1
 800a334:	18cb      	adds	r3, r1, r3
 800a336:	9310      	str	r3, [sp, #64]	; 0x40
 800a338:	ab09      	add	r3, sp, #36	; 0x24
 800a33a:	9304      	str	r3, [sp, #16]
 800a33c:	ab08      	add	r3, sp, #32
 800a33e:	9303      	str	r3, [sp, #12]
 800a340:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a342:	9200      	str	r2, [sp, #0]
 800a344:	9302      	str	r3, [sp, #8]
 800a346:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a348:	0022      	movs	r2, r4
 800a34a:	9301      	str	r3, [sp, #4]
 800a34c:	0033      	movs	r3, r6
 800a34e:	f001 f8b3 	bl	800b4b8 <_dtoa_r>
 800a352:	0005      	movs	r5, r0
 800a354:	2f47      	cmp	r7, #71	; 0x47
 800a356:	d102      	bne.n	800a35e <__cvt+0x5e>
 800a358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a35a:	07db      	lsls	r3, r3, #31
 800a35c:	d528      	bpl.n	800a3b0 <__cvt+0xb0>
 800a35e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a360:	18eb      	adds	r3, r5, r3
 800a362:	9307      	str	r3, [sp, #28]
 800a364:	2f46      	cmp	r7, #70	; 0x46
 800a366:	d114      	bne.n	800a392 <__cvt+0x92>
 800a368:	782b      	ldrb	r3, [r5, #0]
 800a36a:	2b30      	cmp	r3, #48	; 0x30
 800a36c:	d10c      	bne.n	800a388 <__cvt+0x88>
 800a36e:	2200      	movs	r2, #0
 800a370:	2300      	movs	r3, #0
 800a372:	0020      	movs	r0, r4
 800a374:	0031      	movs	r1, r6
 800a376:	f7f6 f869 	bl	800044c <__aeabi_dcmpeq>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d104      	bne.n	800a388 <__cvt+0x88>
 800a37e:	2301      	movs	r3, #1
 800a380:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a382:	1a9b      	subs	r3, r3, r2
 800a384:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a386:	6013      	str	r3, [r2, #0]
 800a388:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a38a:	9a07      	ldr	r2, [sp, #28]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	18d3      	adds	r3, r2, r3
 800a390:	9307      	str	r3, [sp, #28]
 800a392:	2200      	movs	r2, #0
 800a394:	2300      	movs	r3, #0
 800a396:	0020      	movs	r0, r4
 800a398:	0031      	movs	r1, r6
 800a39a:	f7f6 f857 	bl	800044c <__aeabi_dcmpeq>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d001      	beq.n	800a3a6 <__cvt+0xa6>
 800a3a2:	9b07      	ldr	r3, [sp, #28]
 800a3a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a6:	2230      	movs	r2, #48	; 0x30
 800a3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3aa:	9907      	ldr	r1, [sp, #28]
 800a3ac:	428b      	cmp	r3, r1
 800a3ae:	d306      	bcc.n	800a3be <__cvt+0xbe>
 800a3b0:	0028      	movs	r0, r5
 800a3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a3b6:	1b5b      	subs	r3, r3, r5
 800a3b8:	6013      	str	r3, [r2, #0]
 800a3ba:	b00b      	add	sp, #44	; 0x2c
 800a3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3be:	1c59      	adds	r1, r3, #1
 800a3c0:	9109      	str	r1, [sp, #36]	; 0x24
 800a3c2:	701a      	strb	r2, [r3, #0]
 800a3c4:	e7f0      	b.n	800a3a8 <__cvt+0xa8>

0800a3c6 <__exponent>:
 800a3c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3c8:	1c83      	adds	r3, r0, #2
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	9303      	str	r3, [sp, #12]
 800a3ce:	0005      	movs	r5, r0
 800a3d0:	000c      	movs	r4, r1
 800a3d2:	232b      	movs	r3, #43	; 0x2b
 800a3d4:	7002      	strb	r2, [r0, #0]
 800a3d6:	2900      	cmp	r1, #0
 800a3d8:	da01      	bge.n	800a3de <__exponent+0x18>
 800a3da:	424c      	negs	r4, r1
 800a3dc:	3302      	adds	r3, #2
 800a3de:	706b      	strb	r3, [r5, #1]
 800a3e0:	2c09      	cmp	r4, #9
 800a3e2:	dd2f      	ble.n	800a444 <__exponent+0x7e>
 800a3e4:	270a      	movs	r7, #10
 800a3e6:	ab04      	add	r3, sp, #16
 800a3e8:	1dde      	adds	r6, r3, #7
 800a3ea:	0020      	movs	r0, r4
 800a3ec:	0039      	movs	r1, r7
 800a3ee:	9601      	str	r6, [sp, #4]
 800a3f0:	f7f6 f816 	bl	8000420 <__aeabi_idivmod>
 800a3f4:	3e01      	subs	r6, #1
 800a3f6:	3130      	adds	r1, #48	; 0x30
 800a3f8:	0020      	movs	r0, r4
 800a3fa:	7031      	strb	r1, [r6, #0]
 800a3fc:	0039      	movs	r1, r7
 800a3fe:	9402      	str	r4, [sp, #8]
 800a400:	f7f5 ff28 	bl	8000254 <__divsi3>
 800a404:	9b02      	ldr	r3, [sp, #8]
 800a406:	0004      	movs	r4, r0
 800a408:	2b63      	cmp	r3, #99	; 0x63
 800a40a:	dcee      	bgt.n	800a3ea <__exponent+0x24>
 800a40c:	9b01      	ldr	r3, [sp, #4]
 800a40e:	3430      	adds	r4, #48	; 0x30
 800a410:	1e9a      	subs	r2, r3, #2
 800a412:	0013      	movs	r3, r2
 800a414:	9903      	ldr	r1, [sp, #12]
 800a416:	7014      	strb	r4, [r2, #0]
 800a418:	a804      	add	r0, sp, #16
 800a41a:	3007      	adds	r0, #7
 800a41c:	4298      	cmp	r0, r3
 800a41e:	d80c      	bhi.n	800a43a <__exponent+0x74>
 800a420:	2300      	movs	r3, #0
 800a422:	4282      	cmp	r2, r0
 800a424:	d804      	bhi.n	800a430 <__exponent+0x6a>
 800a426:	aa04      	add	r2, sp, #16
 800a428:	3309      	adds	r3, #9
 800a42a:	189b      	adds	r3, r3, r2
 800a42c:	9a01      	ldr	r2, [sp, #4]
 800a42e:	1a9b      	subs	r3, r3, r2
 800a430:	9a03      	ldr	r2, [sp, #12]
 800a432:	18d3      	adds	r3, r2, r3
 800a434:	1b58      	subs	r0, r3, r5
 800a436:	b007      	add	sp, #28
 800a438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a43a:	7818      	ldrb	r0, [r3, #0]
 800a43c:	3301      	adds	r3, #1
 800a43e:	7008      	strb	r0, [r1, #0]
 800a440:	3101      	adds	r1, #1
 800a442:	e7e9      	b.n	800a418 <__exponent+0x52>
 800a444:	2330      	movs	r3, #48	; 0x30
 800a446:	3430      	adds	r4, #48	; 0x30
 800a448:	70ab      	strb	r3, [r5, #2]
 800a44a:	70ec      	strb	r4, [r5, #3]
 800a44c:	1d2b      	adds	r3, r5, #4
 800a44e:	e7f1      	b.n	800a434 <__exponent+0x6e>

0800a450 <_printf_float>:
 800a450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a452:	b095      	sub	sp, #84	; 0x54
 800a454:	000c      	movs	r4, r1
 800a456:	9208      	str	r2, [sp, #32]
 800a458:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a45a:	9309      	str	r3, [sp, #36]	; 0x24
 800a45c:	0007      	movs	r7, r0
 800a45e:	f000 ff0d 	bl	800b27c <_localeconv_r>
 800a462:	6803      	ldr	r3, [r0, #0]
 800a464:	0018      	movs	r0, r3
 800a466:	930c      	str	r3, [sp, #48]	; 0x30
 800a468:	f7f5 fe4e 	bl	8000108 <strlen>
 800a46c:	2300      	movs	r3, #0
 800a46e:	9312      	str	r3, [sp, #72]	; 0x48
 800a470:	7e23      	ldrb	r3, [r4, #24]
 800a472:	2207      	movs	r2, #7
 800a474:	930a      	str	r3, [sp, #40]	; 0x28
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	900d      	str	r0, [sp, #52]	; 0x34
 800a47a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a47c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a47e:	682b      	ldr	r3, [r5, #0]
 800a480:	05c9      	lsls	r1, r1, #23
 800a482:	d547      	bpl.n	800a514 <_printf_float+0xc4>
 800a484:	189b      	adds	r3, r3, r2
 800a486:	4393      	bics	r3, r2
 800a488:	001a      	movs	r2, r3
 800a48a:	3208      	adds	r2, #8
 800a48c:	602a      	str	r2, [r5, #0]
 800a48e:	681e      	ldr	r6, [r3, #0]
 800a490:	685d      	ldr	r5, [r3, #4]
 800a492:	0032      	movs	r2, r6
 800a494:	002b      	movs	r3, r5
 800a496:	64a2      	str	r2, [r4, #72]	; 0x48
 800a498:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a49a:	2201      	movs	r2, #1
 800a49c:	006b      	lsls	r3, r5, #1
 800a49e:	085b      	lsrs	r3, r3, #1
 800a4a0:	930e      	str	r3, [sp, #56]	; 0x38
 800a4a2:	0030      	movs	r0, r6
 800a4a4:	4bab      	ldr	r3, [pc, #684]	; (800a754 <_printf_float+0x304>)
 800a4a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a4a8:	4252      	negs	r2, r2
 800a4aa:	f7f8 fc19 	bl	8002ce0 <__aeabi_dcmpun>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d132      	bne.n	800a518 <_printf_float+0xc8>
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	0030      	movs	r0, r6
 800a4b6:	4ba7      	ldr	r3, [pc, #668]	; (800a754 <_printf_float+0x304>)
 800a4b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a4ba:	4252      	negs	r2, r2
 800a4bc:	f7f5 ffd6 	bl	800046c <__aeabi_dcmple>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d129      	bne.n	800a518 <_printf_float+0xc8>
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	0030      	movs	r0, r6
 800a4ca:	0029      	movs	r1, r5
 800a4cc:	f7f5 ffc4 	bl	8000458 <__aeabi_dcmplt>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d003      	beq.n	800a4dc <_printf_float+0x8c>
 800a4d4:	0023      	movs	r3, r4
 800a4d6:	222d      	movs	r2, #45	; 0x2d
 800a4d8:	3343      	adds	r3, #67	; 0x43
 800a4da:	701a      	strb	r2, [r3, #0]
 800a4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4de:	4d9e      	ldr	r5, [pc, #632]	; (800a758 <_printf_float+0x308>)
 800a4e0:	2b47      	cmp	r3, #71	; 0x47
 800a4e2:	d900      	bls.n	800a4e6 <_printf_float+0x96>
 800a4e4:	4d9d      	ldr	r5, [pc, #628]	; (800a75c <_printf_float+0x30c>)
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4ea:	6123      	str	r3, [r4, #16]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	439a      	bics	r2, r3
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	6022      	str	r2, [r4, #0]
 800a4f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f8:	0021      	movs	r1, r4
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	0038      	movs	r0, r7
 800a4fe:	9b08      	ldr	r3, [sp, #32]
 800a500:	aa13      	add	r2, sp, #76	; 0x4c
 800a502:	f000 f9fb 	bl	800a8fc <_printf_common>
 800a506:	3001      	adds	r0, #1
 800a508:	d000      	beq.n	800a50c <_printf_float+0xbc>
 800a50a:	e0a3      	b.n	800a654 <_printf_float+0x204>
 800a50c:	2001      	movs	r0, #1
 800a50e:	4240      	negs	r0, r0
 800a510:	b015      	add	sp, #84	; 0x54
 800a512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a514:	3307      	adds	r3, #7
 800a516:	e7b6      	b.n	800a486 <_printf_float+0x36>
 800a518:	0032      	movs	r2, r6
 800a51a:	002b      	movs	r3, r5
 800a51c:	0030      	movs	r0, r6
 800a51e:	0029      	movs	r1, r5
 800a520:	f7f8 fbde 	bl	8002ce0 <__aeabi_dcmpun>
 800a524:	2800      	cmp	r0, #0
 800a526:	d00b      	beq.n	800a540 <_printf_float+0xf0>
 800a528:	2d00      	cmp	r5, #0
 800a52a:	da03      	bge.n	800a534 <_printf_float+0xe4>
 800a52c:	0023      	movs	r3, r4
 800a52e:	222d      	movs	r2, #45	; 0x2d
 800a530:	3343      	adds	r3, #67	; 0x43
 800a532:	701a      	strb	r2, [r3, #0]
 800a534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a536:	4d8a      	ldr	r5, [pc, #552]	; (800a760 <_printf_float+0x310>)
 800a538:	2b47      	cmp	r3, #71	; 0x47
 800a53a:	d9d4      	bls.n	800a4e6 <_printf_float+0x96>
 800a53c:	4d89      	ldr	r5, [pc, #548]	; (800a764 <_printf_float+0x314>)
 800a53e:	e7d2      	b.n	800a4e6 <_printf_float+0x96>
 800a540:	2220      	movs	r2, #32
 800a542:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a544:	6863      	ldr	r3, [r4, #4]
 800a546:	4391      	bics	r1, r2
 800a548:	910e      	str	r1, [sp, #56]	; 0x38
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	d14a      	bne.n	800a5e4 <_printf_float+0x194>
 800a54e:	3307      	adds	r3, #7
 800a550:	6063      	str	r3, [r4, #4]
 800a552:	2380      	movs	r3, #128	; 0x80
 800a554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	4313      	orrs	r3, r2
 800a55a:	2200      	movs	r2, #0
 800a55c:	9206      	str	r2, [sp, #24]
 800a55e:	aa12      	add	r2, sp, #72	; 0x48
 800a560:	9205      	str	r2, [sp, #20]
 800a562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	9204      	str	r2, [sp, #16]
 800a568:	aa11      	add	r2, sp, #68	; 0x44
 800a56a:	9203      	str	r2, [sp, #12]
 800a56c:	2223      	movs	r2, #35	; 0x23
 800a56e:	a908      	add	r1, sp, #32
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	6863      	ldr	r3, [r4, #4]
 800a574:	1852      	adds	r2, r2, r1
 800a576:	9202      	str	r2, [sp, #8]
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	0032      	movs	r2, r6
 800a57c:	002b      	movs	r3, r5
 800a57e:	0038      	movs	r0, r7
 800a580:	f7ff febe 	bl	800a300 <__cvt>
 800a584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a586:	0005      	movs	r5, r0
 800a588:	2b47      	cmp	r3, #71	; 0x47
 800a58a:	d109      	bne.n	800a5a0 <_printf_float+0x150>
 800a58c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a58e:	1cda      	adds	r2, r3, #3
 800a590:	db02      	blt.n	800a598 <_printf_float+0x148>
 800a592:	6862      	ldr	r2, [r4, #4]
 800a594:	4293      	cmp	r3, r2
 800a596:	dd49      	ble.n	800a62c <_printf_float+0x1dc>
 800a598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a59a:	3b02      	subs	r3, #2
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	930a      	str	r3, [sp, #40]	; 0x28
 800a5a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a5a4:	2b65      	cmp	r3, #101	; 0x65
 800a5a6:	d824      	bhi.n	800a5f2 <_printf_float+0x1a2>
 800a5a8:	0020      	movs	r0, r4
 800a5aa:	001a      	movs	r2, r3
 800a5ac:	3901      	subs	r1, #1
 800a5ae:	3050      	adds	r0, #80	; 0x50
 800a5b0:	9111      	str	r1, [sp, #68]	; 0x44
 800a5b2:	f7ff ff08 	bl	800a3c6 <__exponent>
 800a5b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5b8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a5ba:	1813      	adds	r3, r2, r0
 800a5bc:	6123      	str	r3, [r4, #16]
 800a5be:	2a01      	cmp	r2, #1
 800a5c0:	dc02      	bgt.n	800a5c8 <_printf_float+0x178>
 800a5c2:	6822      	ldr	r2, [r4, #0]
 800a5c4:	07d2      	lsls	r2, r2, #31
 800a5c6:	d501      	bpl.n	800a5cc <_printf_float+0x17c>
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	6123      	str	r3, [r4, #16]
 800a5cc:	2323      	movs	r3, #35	; 0x23
 800a5ce:	aa08      	add	r2, sp, #32
 800a5d0:	189b      	adds	r3, r3, r2
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d100      	bne.n	800a5da <_printf_float+0x18a>
 800a5d8:	e78d      	b.n	800a4f6 <_printf_float+0xa6>
 800a5da:	0023      	movs	r3, r4
 800a5dc:	222d      	movs	r2, #45	; 0x2d
 800a5de:	3343      	adds	r3, #67	; 0x43
 800a5e0:	701a      	strb	r2, [r3, #0]
 800a5e2:	e788      	b.n	800a4f6 <_printf_float+0xa6>
 800a5e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5e6:	2a47      	cmp	r2, #71	; 0x47
 800a5e8:	d1b3      	bne.n	800a552 <_printf_float+0x102>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1b1      	bne.n	800a552 <_printf_float+0x102>
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	e7ae      	b.n	800a550 <_printf_float+0x100>
 800a5f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5f4:	2b66      	cmp	r3, #102	; 0x66
 800a5f6:	d11b      	bne.n	800a630 <_printf_float+0x1e0>
 800a5f8:	6863      	ldr	r3, [r4, #4]
 800a5fa:	2900      	cmp	r1, #0
 800a5fc:	dd09      	ble.n	800a612 <_printf_float+0x1c2>
 800a5fe:	6121      	str	r1, [r4, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d102      	bne.n	800a60a <_printf_float+0x1ba>
 800a604:	6822      	ldr	r2, [r4, #0]
 800a606:	07d2      	lsls	r2, r2, #31
 800a608:	d50b      	bpl.n	800a622 <_printf_float+0x1d2>
 800a60a:	3301      	adds	r3, #1
 800a60c:	185b      	adds	r3, r3, r1
 800a60e:	6123      	str	r3, [r4, #16]
 800a610:	e007      	b.n	800a622 <_printf_float+0x1d2>
 800a612:	2b00      	cmp	r3, #0
 800a614:	d103      	bne.n	800a61e <_printf_float+0x1ce>
 800a616:	2201      	movs	r2, #1
 800a618:	6821      	ldr	r1, [r4, #0]
 800a61a:	4211      	tst	r1, r2
 800a61c:	d000      	beq.n	800a620 <_printf_float+0x1d0>
 800a61e:	1c9a      	adds	r2, r3, #2
 800a620:	6122      	str	r2, [r4, #16]
 800a622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a624:	65a3      	str	r3, [r4, #88]	; 0x58
 800a626:	2300      	movs	r3, #0
 800a628:	930b      	str	r3, [sp, #44]	; 0x2c
 800a62a:	e7cf      	b.n	800a5cc <_printf_float+0x17c>
 800a62c:	2367      	movs	r3, #103	; 0x67
 800a62e:	930a      	str	r3, [sp, #40]	; 0x28
 800a630:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a632:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a634:	4299      	cmp	r1, r3
 800a636:	db06      	blt.n	800a646 <_printf_float+0x1f6>
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	6121      	str	r1, [r4, #16]
 800a63c:	07db      	lsls	r3, r3, #31
 800a63e:	d5f0      	bpl.n	800a622 <_printf_float+0x1d2>
 800a640:	3101      	adds	r1, #1
 800a642:	6121      	str	r1, [r4, #16]
 800a644:	e7ed      	b.n	800a622 <_printf_float+0x1d2>
 800a646:	2201      	movs	r2, #1
 800a648:	2900      	cmp	r1, #0
 800a64a:	dc01      	bgt.n	800a650 <_printf_float+0x200>
 800a64c:	1892      	adds	r2, r2, r2
 800a64e:	1a52      	subs	r2, r2, r1
 800a650:	189b      	adds	r3, r3, r2
 800a652:	e7dc      	b.n	800a60e <_printf_float+0x1be>
 800a654:	6822      	ldr	r2, [r4, #0]
 800a656:	0553      	lsls	r3, r2, #21
 800a658:	d408      	bmi.n	800a66c <_printf_float+0x21c>
 800a65a:	6923      	ldr	r3, [r4, #16]
 800a65c:	002a      	movs	r2, r5
 800a65e:	0038      	movs	r0, r7
 800a660:	9908      	ldr	r1, [sp, #32]
 800a662:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a664:	47a8      	blx	r5
 800a666:	3001      	adds	r0, #1
 800a668:	d12a      	bne.n	800a6c0 <_printf_float+0x270>
 800a66a:	e74f      	b.n	800a50c <_printf_float+0xbc>
 800a66c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a66e:	2b65      	cmp	r3, #101	; 0x65
 800a670:	d800      	bhi.n	800a674 <_printf_float+0x224>
 800a672:	e0ec      	b.n	800a84e <_printf_float+0x3fe>
 800a674:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a676:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a678:	2200      	movs	r2, #0
 800a67a:	2300      	movs	r3, #0
 800a67c:	f7f5 fee6 	bl	800044c <__aeabi_dcmpeq>
 800a680:	2800      	cmp	r0, #0
 800a682:	d034      	beq.n	800a6ee <_printf_float+0x29e>
 800a684:	2301      	movs	r3, #1
 800a686:	0038      	movs	r0, r7
 800a688:	4a37      	ldr	r2, [pc, #220]	; (800a768 <_printf_float+0x318>)
 800a68a:	9908      	ldr	r1, [sp, #32]
 800a68c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a68e:	47a8      	blx	r5
 800a690:	3001      	adds	r0, #1
 800a692:	d100      	bne.n	800a696 <_printf_float+0x246>
 800a694:	e73a      	b.n	800a50c <_printf_float+0xbc>
 800a696:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a698:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a69a:	429a      	cmp	r2, r3
 800a69c:	db02      	blt.n	800a6a4 <_printf_float+0x254>
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	07db      	lsls	r3, r3, #31
 800a6a2:	d50d      	bpl.n	800a6c0 <_printf_float+0x270>
 800a6a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a6a6:	0038      	movs	r0, r7
 800a6a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6ac:	9908      	ldr	r1, [sp, #32]
 800a6ae:	47a8      	blx	r5
 800a6b0:	2500      	movs	r5, #0
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	d100      	bne.n	800a6b8 <_printf_float+0x268>
 800a6b6:	e729      	b.n	800a50c <_printf_float+0xbc>
 800a6b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	42ab      	cmp	r3, r5
 800a6be:	dc0a      	bgt.n	800a6d6 <_printf_float+0x286>
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	079b      	lsls	r3, r3, #30
 800a6c4:	d500      	bpl.n	800a6c8 <_printf_float+0x278>
 800a6c6:	e116      	b.n	800a8f6 <_printf_float+0x4a6>
 800a6c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6ca:	68e0      	ldr	r0, [r4, #12]
 800a6cc:	4298      	cmp	r0, r3
 800a6ce:	db00      	blt.n	800a6d2 <_printf_float+0x282>
 800a6d0:	e71e      	b.n	800a510 <_printf_float+0xc0>
 800a6d2:	0018      	movs	r0, r3
 800a6d4:	e71c      	b.n	800a510 <_printf_float+0xc0>
 800a6d6:	0022      	movs	r2, r4
 800a6d8:	2301      	movs	r3, #1
 800a6da:	0038      	movs	r0, r7
 800a6dc:	9908      	ldr	r1, [sp, #32]
 800a6de:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a6e0:	321a      	adds	r2, #26
 800a6e2:	47b0      	blx	r6
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d100      	bne.n	800a6ea <_printf_float+0x29a>
 800a6e8:	e710      	b.n	800a50c <_printf_float+0xbc>
 800a6ea:	3501      	adds	r5, #1
 800a6ec:	e7e4      	b.n	800a6b8 <_printf_float+0x268>
 800a6ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	dc3b      	bgt.n	800a76c <_printf_float+0x31c>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	0038      	movs	r0, r7
 800a6f8:	4a1b      	ldr	r2, [pc, #108]	; (800a768 <_printf_float+0x318>)
 800a6fa:	9908      	ldr	r1, [sp, #32]
 800a6fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a6fe:	47b0      	blx	r6
 800a700:	3001      	adds	r0, #1
 800a702:	d100      	bne.n	800a706 <_printf_float+0x2b6>
 800a704:	e702      	b.n	800a50c <_printf_float+0xbc>
 800a706:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a708:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a70a:	4313      	orrs	r3, r2
 800a70c:	d102      	bne.n	800a714 <_printf_float+0x2c4>
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	07db      	lsls	r3, r3, #31
 800a712:	d5d5      	bpl.n	800a6c0 <_printf_float+0x270>
 800a714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a716:	0038      	movs	r0, r7
 800a718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a71a:	9908      	ldr	r1, [sp, #32]
 800a71c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a71e:	47b0      	blx	r6
 800a720:	2300      	movs	r3, #0
 800a722:	3001      	adds	r0, #1
 800a724:	d100      	bne.n	800a728 <_printf_float+0x2d8>
 800a726:	e6f1      	b.n	800a50c <_printf_float+0xbc>
 800a728:	930a      	str	r3, [sp, #40]	; 0x28
 800a72a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a72c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a72e:	425b      	negs	r3, r3
 800a730:	4293      	cmp	r3, r2
 800a732:	dc01      	bgt.n	800a738 <_printf_float+0x2e8>
 800a734:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a736:	e791      	b.n	800a65c <_printf_float+0x20c>
 800a738:	0022      	movs	r2, r4
 800a73a:	2301      	movs	r3, #1
 800a73c:	0038      	movs	r0, r7
 800a73e:	9908      	ldr	r1, [sp, #32]
 800a740:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a742:	321a      	adds	r2, #26
 800a744:	47b0      	blx	r6
 800a746:	3001      	adds	r0, #1
 800a748:	d100      	bne.n	800a74c <_printf_float+0x2fc>
 800a74a:	e6df      	b.n	800a50c <_printf_float+0xbc>
 800a74c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a74e:	3301      	adds	r3, #1
 800a750:	e7ea      	b.n	800a728 <_printf_float+0x2d8>
 800a752:	46c0      	nop			; (mov r8, r8)
 800a754:	7fefffff 	.word	0x7fefffff
 800a758:	0800f254 	.word	0x0800f254
 800a75c:	0800f258 	.word	0x0800f258
 800a760:	0800f25c 	.word	0x0800f25c
 800a764:	0800f260 	.word	0x0800f260
 800a768:	0800f264 	.word	0x0800f264
 800a76c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a76e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a770:	920a      	str	r2, [sp, #40]	; 0x28
 800a772:	429a      	cmp	r2, r3
 800a774:	dd00      	ble.n	800a778 <_printf_float+0x328>
 800a776:	930a      	str	r3, [sp, #40]	; 0x28
 800a778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	dc3d      	bgt.n	800a7fa <_printf_float+0x3aa>
 800a77e:	2300      	movs	r3, #0
 800a780:	930e      	str	r3, [sp, #56]	; 0x38
 800a782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a784:	43db      	mvns	r3, r3
 800a786:	17db      	asrs	r3, r3, #31
 800a788:	930f      	str	r3, [sp, #60]	; 0x3c
 800a78a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a78c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a78e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a792:	4013      	ands	r3, r2
 800a794:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a79a:	4293      	cmp	r3, r2
 800a79c:	dc36      	bgt.n	800a80c <_printf_float+0x3bc>
 800a79e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	db40      	blt.n	800a828 <_printf_float+0x3d8>
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	07db      	lsls	r3, r3, #31
 800a7aa:	d43d      	bmi.n	800a828 <_printf_float+0x3d8>
 800a7ac:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a7ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7b2:	1af3      	subs	r3, r6, r3
 800a7b4:	1ab6      	subs	r6, r6, r2
 800a7b6:	429e      	cmp	r6, r3
 800a7b8:	dd00      	ble.n	800a7bc <_printf_float+0x36c>
 800a7ba:	001e      	movs	r6, r3
 800a7bc:	2e00      	cmp	r6, #0
 800a7be:	dc3c      	bgt.n	800a83a <_printf_float+0x3ea>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a7c4:	43f3      	mvns	r3, r6
 800a7c6:	17db      	asrs	r3, r3, #31
 800a7c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7ce:	1a9b      	subs	r3, r3, r2
 800a7d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7d2:	4032      	ands	r2, r6
 800a7d4:	1a9b      	subs	r3, r3, r2
 800a7d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	dc00      	bgt.n	800a7de <_printf_float+0x38e>
 800a7dc:	e770      	b.n	800a6c0 <_printf_float+0x270>
 800a7de:	0022      	movs	r2, r4
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	0038      	movs	r0, r7
 800a7e4:	9908      	ldr	r1, [sp, #32]
 800a7e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a7e8:	321a      	adds	r2, #26
 800a7ea:	47a8      	blx	r5
 800a7ec:	3001      	adds	r0, #1
 800a7ee:	d100      	bne.n	800a7f2 <_printf_float+0x3a2>
 800a7f0:	e68c      	b.n	800a50c <_printf_float+0xbc>
 800a7f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a7f8:	e7e7      	b.n	800a7ca <_printf_float+0x37a>
 800a7fa:	002a      	movs	r2, r5
 800a7fc:	0038      	movs	r0, r7
 800a7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a800:	9908      	ldr	r1, [sp, #32]
 800a802:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a804:	47b0      	blx	r6
 800a806:	3001      	adds	r0, #1
 800a808:	d1b9      	bne.n	800a77e <_printf_float+0x32e>
 800a80a:	e67f      	b.n	800a50c <_printf_float+0xbc>
 800a80c:	0022      	movs	r2, r4
 800a80e:	2301      	movs	r3, #1
 800a810:	0038      	movs	r0, r7
 800a812:	9908      	ldr	r1, [sp, #32]
 800a814:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a816:	321a      	adds	r2, #26
 800a818:	47b0      	blx	r6
 800a81a:	3001      	adds	r0, #1
 800a81c:	d100      	bne.n	800a820 <_printf_float+0x3d0>
 800a81e:	e675      	b.n	800a50c <_printf_float+0xbc>
 800a820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a822:	3301      	adds	r3, #1
 800a824:	930e      	str	r3, [sp, #56]	; 0x38
 800a826:	e7b0      	b.n	800a78a <_printf_float+0x33a>
 800a828:	0038      	movs	r0, r7
 800a82a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a82c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a82e:	9908      	ldr	r1, [sp, #32]
 800a830:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a832:	47b0      	blx	r6
 800a834:	3001      	adds	r0, #1
 800a836:	d1b9      	bne.n	800a7ac <_printf_float+0x35c>
 800a838:	e668      	b.n	800a50c <_printf_float+0xbc>
 800a83a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a83c:	0038      	movs	r0, r7
 800a83e:	18ea      	adds	r2, r5, r3
 800a840:	9908      	ldr	r1, [sp, #32]
 800a842:	0033      	movs	r3, r6
 800a844:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a846:	47a8      	blx	r5
 800a848:	3001      	adds	r0, #1
 800a84a:	d1b9      	bne.n	800a7c0 <_printf_float+0x370>
 800a84c:	e65e      	b.n	800a50c <_printf_float+0xbc>
 800a84e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a850:	2b01      	cmp	r3, #1
 800a852:	dc02      	bgt.n	800a85a <_printf_float+0x40a>
 800a854:	2301      	movs	r3, #1
 800a856:	421a      	tst	r2, r3
 800a858:	d03a      	beq.n	800a8d0 <_printf_float+0x480>
 800a85a:	2301      	movs	r3, #1
 800a85c:	002a      	movs	r2, r5
 800a85e:	0038      	movs	r0, r7
 800a860:	9908      	ldr	r1, [sp, #32]
 800a862:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a864:	47b0      	blx	r6
 800a866:	3001      	adds	r0, #1
 800a868:	d100      	bne.n	800a86c <_printf_float+0x41c>
 800a86a:	e64f      	b.n	800a50c <_printf_float+0xbc>
 800a86c:	0038      	movs	r0, r7
 800a86e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a872:	9908      	ldr	r1, [sp, #32]
 800a874:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a876:	47b0      	blx	r6
 800a878:	3001      	adds	r0, #1
 800a87a:	d100      	bne.n	800a87e <_printf_float+0x42e>
 800a87c:	e646      	b.n	800a50c <_printf_float+0xbc>
 800a87e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a880:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a882:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a884:	2200      	movs	r2, #0
 800a886:	001e      	movs	r6, r3
 800a888:	2300      	movs	r3, #0
 800a88a:	f7f5 fddf 	bl	800044c <__aeabi_dcmpeq>
 800a88e:	2800      	cmp	r0, #0
 800a890:	d11c      	bne.n	800a8cc <_printf_float+0x47c>
 800a892:	0033      	movs	r3, r6
 800a894:	1c6a      	adds	r2, r5, #1
 800a896:	3b01      	subs	r3, #1
 800a898:	0038      	movs	r0, r7
 800a89a:	9908      	ldr	r1, [sp, #32]
 800a89c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a89e:	47a8      	blx	r5
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	d10f      	bne.n	800a8c4 <_printf_float+0x474>
 800a8a4:	e632      	b.n	800a50c <_printf_float+0xbc>
 800a8a6:	0022      	movs	r2, r4
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	0038      	movs	r0, r7
 800a8ac:	9908      	ldr	r1, [sp, #32]
 800a8ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a8b0:	321a      	adds	r2, #26
 800a8b2:	47b0      	blx	r6
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d100      	bne.n	800a8ba <_printf_float+0x46a>
 800a8b8:	e628      	b.n	800a50c <_printf_float+0xbc>
 800a8ba:	3501      	adds	r5, #1
 800a8bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	42ab      	cmp	r3, r5
 800a8c2:	dcf0      	bgt.n	800a8a6 <_printf_float+0x456>
 800a8c4:	0022      	movs	r2, r4
 800a8c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8c8:	3250      	adds	r2, #80	; 0x50
 800a8ca:	e6c8      	b.n	800a65e <_printf_float+0x20e>
 800a8cc:	2500      	movs	r5, #0
 800a8ce:	e7f5      	b.n	800a8bc <_printf_float+0x46c>
 800a8d0:	002a      	movs	r2, r5
 800a8d2:	e7e1      	b.n	800a898 <_printf_float+0x448>
 800a8d4:	0022      	movs	r2, r4
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	0038      	movs	r0, r7
 800a8da:	9908      	ldr	r1, [sp, #32]
 800a8dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a8de:	3219      	adds	r2, #25
 800a8e0:	47b0      	blx	r6
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	d100      	bne.n	800a8e8 <_printf_float+0x498>
 800a8e6:	e611      	b.n	800a50c <_printf_float+0xbc>
 800a8e8:	3501      	adds	r5, #1
 800a8ea:	68e3      	ldr	r3, [r4, #12]
 800a8ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8ee:	1a9b      	subs	r3, r3, r2
 800a8f0:	42ab      	cmp	r3, r5
 800a8f2:	dcef      	bgt.n	800a8d4 <_printf_float+0x484>
 800a8f4:	e6e8      	b.n	800a6c8 <_printf_float+0x278>
 800a8f6:	2500      	movs	r5, #0
 800a8f8:	e7f7      	b.n	800a8ea <_printf_float+0x49a>
 800a8fa:	46c0      	nop			; (mov r8, r8)

0800a8fc <_printf_common>:
 800a8fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8fe:	0016      	movs	r6, r2
 800a900:	9301      	str	r3, [sp, #4]
 800a902:	688a      	ldr	r2, [r1, #8]
 800a904:	690b      	ldr	r3, [r1, #16]
 800a906:	000c      	movs	r4, r1
 800a908:	9000      	str	r0, [sp, #0]
 800a90a:	4293      	cmp	r3, r2
 800a90c:	da00      	bge.n	800a910 <_printf_common+0x14>
 800a90e:	0013      	movs	r3, r2
 800a910:	0022      	movs	r2, r4
 800a912:	6033      	str	r3, [r6, #0]
 800a914:	3243      	adds	r2, #67	; 0x43
 800a916:	7812      	ldrb	r2, [r2, #0]
 800a918:	2a00      	cmp	r2, #0
 800a91a:	d001      	beq.n	800a920 <_printf_common+0x24>
 800a91c:	3301      	adds	r3, #1
 800a91e:	6033      	str	r3, [r6, #0]
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	069b      	lsls	r3, r3, #26
 800a924:	d502      	bpl.n	800a92c <_printf_common+0x30>
 800a926:	6833      	ldr	r3, [r6, #0]
 800a928:	3302      	adds	r3, #2
 800a92a:	6033      	str	r3, [r6, #0]
 800a92c:	6822      	ldr	r2, [r4, #0]
 800a92e:	2306      	movs	r3, #6
 800a930:	0015      	movs	r5, r2
 800a932:	401d      	ands	r5, r3
 800a934:	421a      	tst	r2, r3
 800a936:	d027      	beq.n	800a988 <_printf_common+0x8c>
 800a938:	0023      	movs	r3, r4
 800a93a:	3343      	adds	r3, #67	; 0x43
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	1e5a      	subs	r2, r3, #1
 800a940:	4193      	sbcs	r3, r2
 800a942:	6822      	ldr	r2, [r4, #0]
 800a944:	0692      	lsls	r2, r2, #26
 800a946:	d430      	bmi.n	800a9aa <_printf_common+0xae>
 800a948:	0022      	movs	r2, r4
 800a94a:	9901      	ldr	r1, [sp, #4]
 800a94c:	9800      	ldr	r0, [sp, #0]
 800a94e:	9d08      	ldr	r5, [sp, #32]
 800a950:	3243      	adds	r2, #67	; 0x43
 800a952:	47a8      	blx	r5
 800a954:	3001      	adds	r0, #1
 800a956:	d025      	beq.n	800a9a4 <_printf_common+0xa8>
 800a958:	2206      	movs	r2, #6
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	2500      	movs	r5, #0
 800a95e:	4013      	ands	r3, r2
 800a960:	2b04      	cmp	r3, #4
 800a962:	d105      	bne.n	800a970 <_printf_common+0x74>
 800a964:	6833      	ldr	r3, [r6, #0]
 800a966:	68e5      	ldr	r5, [r4, #12]
 800a968:	1aed      	subs	r5, r5, r3
 800a96a:	43eb      	mvns	r3, r5
 800a96c:	17db      	asrs	r3, r3, #31
 800a96e:	401d      	ands	r5, r3
 800a970:	68a3      	ldr	r3, [r4, #8]
 800a972:	6922      	ldr	r2, [r4, #16]
 800a974:	4293      	cmp	r3, r2
 800a976:	dd01      	ble.n	800a97c <_printf_common+0x80>
 800a978:	1a9b      	subs	r3, r3, r2
 800a97a:	18ed      	adds	r5, r5, r3
 800a97c:	2600      	movs	r6, #0
 800a97e:	42b5      	cmp	r5, r6
 800a980:	d120      	bne.n	800a9c4 <_printf_common+0xc8>
 800a982:	2000      	movs	r0, #0
 800a984:	e010      	b.n	800a9a8 <_printf_common+0xac>
 800a986:	3501      	adds	r5, #1
 800a988:	68e3      	ldr	r3, [r4, #12]
 800a98a:	6832      	ldr	r2, [r6, #0]
 800a98c:	1a9b      	subs	r3, r3, r2
 800a98e:	42ab      	cmp	r3, r5
 800a990:	ddd2      	ble.n	800a938 <_printf_common+0x3c>
 800a992:	0022      	movs	r2, r4
 800a994:	2301      	movs	r3, #1
 800a996:	9901      	ldr	r1, [sp, #4]
 800a998:	9800      	ldr	r0, [sp, #0]
 800a99a:	9f08      	ldr	r7, [sp, #32]
 800a99c:	3219      	adds	r2, #25
 800a99e:	47b8      	blx	r7
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	d1f0      	bne.n	800a986 <_printf_common+0x8a>
 800a9a4:	2001      	movs	r0, #1
 800a9a6:	4240      	negs	r0, r0
 800a9a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a9aa:	2030      	movs	r0, #48	; 0x30
 800a9ac:	18e1      	adds	r1, r4, r3
 800a9ae:	3143      	adds	r1, #67	; 0x43
 800a9b0:	7008      	strb	r0, [r1, #0]
 800a9b2:	0021      	movs	r1, r4
 800a9b4:	1c5a      	adds	r2, r3, #1
 800a9b6:	3145      	adds	r1, #69	; 0x45
 800a9b8:	7809      	ldrb	r1, [r1, #0]
 800a9ba:	18a2      	adds	r2, r4, r2
 800a9bc:	3243      	adds	r2, #67	; 0x43
 800a9be:	3302      	adds	r3, #2
 800a9c0:	7011      	strb	r1, [r2, #0]
 800a9c2:	e7c1      	b.n	800a948 <_printf_common+0x4c>
 800a9c4:	0022      	movs	r2, r4
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	9901      	ldr	r1, [sp, #4]
 800a9ca:	9800      	ldr	r0, [sp, #0]
 800a9cc:	9f08      	ldr	r7, [sp, #32]
 800a9ce:	321a      	adds	r2, #26
 800a9d0:	47b8      	blx	r7
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	d0e6      	beq.n	800a9a4 <_printf_common+0xa8>
 800a9d6:	3601      	adds	r6, #1
 800a9d8:	e7d1      	b.n	800a97e <_printf_common+0x82>
	...

0800a9dc <_printf_i>:
 800a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9de:	b08b      	sub	sp, #44	; 0x2c
 800a9e0:	9206      	str	r2, [sp, #24]
 800a9e2:	000a      	movs	r2, r1
 800a9e4:	3243      	adds	r2, #67	; 0x43
 800a9e6:	9307      	str	r3, [sp, #28]
 800a9e8:	9005      	str	r0, [sp, #20]
 800a9ea:	9204      	str	r2, [sp, #16]
 800a9ec:	7e0a      	ldrb	r2, [r1, #24]
 800a9ee:	000c      	movs	r4, r1
 800a9f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9f2:	2a78      	cmp	r2, #120	; 0x78
 800a9f4:	d809      	bhi.n	800aa0a <_printf_i+0x2e>
 800a9f6:	2a62      	cmp	r2, #98	; 0x62
 800a9f8:	d80b      	bhi.n	800aa12 <_printf_i+0x36>
 800a9fa:	2a00      	cmp	r2, #0
 800a9fc:	d100      	bne.n	800aa00 <_printf_i+0x24>
 800a9fe:	e0be      	b.n	800ab7e <_printf_i+0x1a2>
 800aa00:	497c      	ldr	r1, [pc, #496]	; (800abf4 <_printf_i+0x218>)
 800aa02:	9103      	str	r1, [sp, #12]
 800aa04:	2a58      	cmp	r2, #88	; 0x58
 800aa06:	d100      	bne.n	800aa0a <_printf_i+0x2e>
 800aa08:	e093      	b.n	800ab32 <_printf_i+0x156>
 800aa0a:	0026      	movs	r6, r4
 800aa0c:	3642      	adds	r6, #66	; 0x42
 800aa0e:	7032      	strb	r2, [r6, #0]
 800aa10:	e022      	b.n	800aa58 <_printf_i+0x7c>
 800aa12:	0010      	movs	r0, r2
 800aa14:	3863      	subs	r0, #99	; 0x63
 800aa16:	2815      	cmp	r0, #21
 800aa18:	d8f7      	bhi.n	800aa0a <_printf_i+0x2e>
 800aa1a:	f7f5 fb87 	bl	800012c <__gnu_thumb1_case_shi>
 800aa1e:	0016      	.short	0x0016
 800aa20:	fff6001f 	.word	0xfff6001f
 800aa24:	fff6fff6 	.word	0xfff6fff6
 800aa28:	001ffff6 	.word	0x001ffff6
 800aa2c:	fff6fff6 	.word	0xfff6fff6
 800aa30:	fff6fff6 	.word	0xfff6fff6
 800aa34:	003600a3 	.word	0x003600a3
 800aa38:	fff60083 	.word	0xfff60083
 800aa3c:	00b4fff6 	.word	0x00b4fff6
 800aa40:	0036fff6 	.word	0x0036fff6
 800aa44:	fff6fff6 	.word	0xfff6fff6
 800aa48:	0087      	.short	0x0087
 800aa4a:	0026      	movs	r6, r4
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	3642      	adds	r6, #66	; 0x42
 800aa50:	1d11      	adds	r1, r2, #4
 800aa52:	6019      	str	r1, [r3, #0]
 800aa54:	6813      	ldr	r3, [r2, #0]
 800aa56:	7033      	strb	r3, [r6, #0]
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e0a2      	b.n	800aba2 <_printf_i+0x1c6>
 800aa5c:	6818      	ldr	r0, [r3, #0]
 800aa5e:	6809      	ldr	r1, [r1, #0]
 800aa60:	1d02      	adds	r2, r0, #4
 800aa62:	060d      	lsls	r5, r1, #24
 800aa64:	d50b      	bpl.n	800aa7e <_printf_i+0xa2>
 800aa66:	6805      	ldr	r5, [r0, #0]
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	2d00      	cmp	r5, #0
 800aa6c:	da03      	bge.n	800aa76 <_printf_i+0x9a>
 800aa6e:	232d      	movs	r3, #45	; 0x2d
 800aa70:	9a04      	ldr	r2, [sp, #16]
 800aa72:	426d      	negs	r5, r5
 800aa74:	7013      	strb	r3, [r2, #0]
 800aa76:	4b5f      	ldr	r3, [pc, #380]	; (800abf4 <_printf_i+0x218>)
 800aa78:	270a      	movs	r7, #10
 800aa7a:	9303      	str	r3, [sp, #12]
 800aa7c:	e01b      	b.n	800aab6 <_printf_i+0xda>
 800aa7e:	6805      	ldr	r5, [r0, #0]
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	0649      	lsls	r1, r1, #25
 800aa84:	d5f1      	bpl.n	800aa6a <_printf_i+0x8e>
 800aa86:	b22d      	sxth	r5, r5
 800aa88:	e7ef      	b.n	800aa6a <_printf_i+0x8e>
 800aa8a:	680d      	ldr	r5, [r1, #0]
 800aa8c:	6819      	ldr	r1, [r3, #0]
 800aa8e:	1d08      	adds	r0, r1, #4
 800aa90:	6018      	str	r0, [r3, #0]
 800aa92:	062e      	lsls	r6, r5, #24
 800aa94:	d501      	bpl.n	800aa9a <_printf_i+0xbe>
 800aa96:	680d      	ldr	r5, [r1, #0]
 800aa98:	e003      	b.n	800aaa2 <_printf_i+0xc6>
 800aa9a:	066d      	lsls	r5, r5, #25
 800aa9c:	d5fb      	bpl.n	800aa96 <_printf_i+0xba>
 800aa9e:	680d      	ldr	r5, [r1, #0]
 800aaa0:	b2ad      	uxth	r5, r5
 800aaa2:	4b54      	ldr	r3, [pc, #336]	; (800abf4 <_printf_i+0x218>)
 800aaa4:	2708      	movs	r7, #8
 800aaa6:	9303      	str	r3, [sp, #12]
 800aaa8:	2a6f      	cmp	r2, #111	; 0x6f
 800aaaa:	d000      	beq.n	800aaae <_printf_i+0xd2>
 800aaac:	3702      	adds	r7, #2
 800aaae:	0023      	movs	r3, r4
 800aab0:	2200      	movs	r2, #0
 800aab2:	3343      	adds	r3, #67	; 0x43
 800aab4:	701a      	strb	r2, [r3, #0]
 800aab6:	6863      	ldr	r3, [r4, #4]
 800aab8:	60a3      	str	r3, [r4, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	db03      	blt.n	800aac6 <_printf_i+0xea>
 800aabe:	2104      	movs	r1, #4
 800aac0:	6822      	ldr	r2, [r4, #0]
 800aac2:	438a      	bics	r2, r1
 800aac4:	6022      	str	r2, [r4, #0]
 800aac6:	2d00      	cmp	r5, #0
 800aac8:	d102      	bne.n	800aad0 <_printf_i+0xf4>
 800aaca:	9e04      	ldr	r6, [sp, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00c      	beq.n	800aaea <_printf_i+0x10e>
 800aad0:	9e04      	ldr	r6, [sp, #16]
 800aad2:	0028      	movs	r0, r5
 800aad4:	0039      	movs	r1, r7
 800aad6:	f7f5 fbb9 	bl	800024c <__aeabi_uidivmod>
 800aada:	9b03      	ldr	r3, [sp, #12]
 800aadc:	3e01      	subs	r6, #1
 800aade:	5c5b      	ldrb	r3, [r3, r1]
 800aae0:	7033      	strb	r3, [r6, #0]
 800aae2:	002b      	movs	r3, r5
 800aae4:	0005      	movs	r5, r0
 800aae6:	429f      	cmp	r7, r3
 800aae8:	d9f3      	bls.n	800aad2 <_printf_i+0xf6>
 800aaea:	2f08      	cmp	r7, #8
 800aaec:	d109      	bne.n	800ab02 <_printf_i+0x126>
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	07db      	lsls	r3, r3, #31
 800aaf2:	d506      	bpl.n	800ab02 <_printf_i+0x126>
 800aaf4:	6862      	ldr	r2, [r4, #4]
 800aaf6:	6923      	ldr	r3, [r4, #16]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	dc02      	bgt.n	800ab02 <_printf_i+0x126>
 800aafc:	2330      	movs	r3, #48	; 0x30
 800aafe:	3e01      	subs	r6, #1
 800ab00:	7033      	strb	r3, [r6, #0]
 800ab02:	9b04      	ldr	r3, [sp, #16]
 800ab04:	1b9b      	subs	r3, r3, r6
 800ab06:	6123      	str	r3, [r4, #16]
 800ab08:	9b07      	ldr	r3, [sp, #28]
 800ab0a:	0021      	movs	r1, r4
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	9805      	ldr	r0, [sp, #20]
 800ab10:	9b06      	ldr	r3, [sp, #24]
 800ab12:	aa09      	add	r2, sp, #36	; 0x24
 800ab14:	f7ff fef2 	bl	800a8fc <_printf_common>
 800ab18:	3001      	adds	r0, #1
 800ab1a:	d147      	bne.n	800abac <_printf_i+0x1d0>
 800ab1c:	2001      	movs	r0, #1
 800ab1e:	4240      	negs	r0, r0
 800ab20:	b00b      	add	sp, #44	; 0x2c
 800ab22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab24:	2220      	movs	r2, #32
 800ab26:	6809      	ldr	r1, [r1, #0]
 800ab28:	430a      	orrs	r2, r1
 800ab2a:	6022      	str	r2, [r4, #0]
 800ab2c:	2278      	movs	r2, #120	; 0x78
 800ab2e:	4932      	ldr	r1, [pc, #200]	; (800abf8 <_printf_i+0x21c>)
 800ab30:	9103      	str	r1, [sp, #12]
 800ab32:	0021      	movs	r1, r4
 800ab34:	3145      	adds	r1, #69	; 0x45
 800ab36:	700a      	strb	r2, [r1, #0]
 800ab38:	6819      	ldr	r1, [r3, #0]
 800ab3a:	6822      	ldr	r2, [r4, #0]
 800ab3c:	c920      	ldmia	r1!, {r5}
 800ab3e:	0610      	lsls	r0, r2, #24
 800ab40:	d402      	bmi.n	800ab48 <_printf_i+0x16c>
 800ab42:	0650      	lsls	r0, r2, #25
 800ab44:	d500      	bpl.n	800ab48 <_printf_i+0x16c>
 800ab46:	b2ad      	uxth	r5, r5
 800ab48:	6019      	str	r1, [r3, #0]
 800ab4a:	07d3      	lsls	r3, r2, #31
 800ab4c:	d502      	bpl.n	800ab54 <_printf_i+0x178>
 800ab4e:	2320      	movs	r3, #32
 800ab50:	4313      	orrs	r3, r2
 800ab52:	6023      	str	r3, [r4, #0]
 800ab54:	2710      	movs	r7, #16
 800ab56:	2d00      	cmp	r5, #0
 800ab58:	d1a9      	bne.n	800aaae <_printf_i+0xd2>
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	4393      	bics	r3, r2
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	e7a4      	b.n	800aaae <_printf_i+0xd2>
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	680d      	ldr	r5, [r1, #0]
 800ab68:	1d10      	adds	r0, r2, #4
 800ab6a:	6949      	ldr	r1, [r1, #20]
 800ab6c:	6018      	str	r0, [r3, #0]
 800ab6e:	6813      	ldr	r3, [r2, #0]
 800ab70:	062e      	lsls	r6, r5, #24
 800ab72:	d501      	bpl.n	800ab78 <_printf_i+0x19c>
 800ab74:	6019      	str	r1, [r3, #0]
 800ab76:	e002      	b.n	800ab7e <_printf_i+0x1a2>
 800ab78:	066d      	lsls	r5, r5, #25
 800ab7a:	d5fb      	bpl.n	800ab74 <_printf_i+0x198>
 800ab7c:	8019      	strh	r1, [r3, #0]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9e04      	ldr	r6, [sp, #16]
 800ab82:	6123      	str	r3, [r4, #16]
 800ab84:	e7c0      	b.n	800ab08 <_printf_i+0x12c>
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	1d11      	adds	r1, r2, #4
 800ab8a:	6019      	str	r1, [r3, #0]
 800ab8c:	6816      	ldr	r6, [r2, #0]
 800ab8e:	2100      	movs	r1, #0
 800ab90:	0030      	movs	r0, r6
 800ab92:	6862      	ldr	r2, [r4, #4]
 800ab94:	f000 fbf1 	bl	800b37a <memchr>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d001      	beq.n	800aba0 <_printf_i+0x1c4>
 800ab9c:	1b80      	subs	r0, r0, r6
 800ab9e:	6060      	str	r0, [r4, #4]
 800aba0:	6863      	ldr	r3, [r4, #4]
 800aba2:	6123      	str	r3, [r4, #16]
 800aba4:	2300      	movs	r3, #0
 800aba6:	9a04      	ldr	r2, [sp, #16]
 800aba8:	7013      	strb	r3, [r2, #0]
 800abaa:	e7ad      	b.n	800ab08 <_printf_i+0x12c>
 800abac:	0032      	movs	r2, r6
 800abae:	6923      	ldr	r3, [r4, #16]
 800abb0:	9906      	ldr	r1, [sp, #24]
 800abb2:	9805      	ldr	r0, [sp, #20]
 800abb4:	9d07      	ldr	r5, [sp, #28]
 800abb6:	47a8      	blx	r5
 800abb8:	3001      	adds	r0, #1
 800abba:	d0af      	beq.n	800ab1c <_printf_i+0x140>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	079b      	lsls	r3, r3, #30
 800abc0:	d415      	bmi.n	800abee <_printf_i+0x212>
 800abc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc4:	68e0      	ldr	r0, [r4, #12]
 800abc6:	4298      	cmp	r0, r3
 800abc8:	daaa      	bge.n	800ab20 <_printf_i+0x144>
 800abca:	0018      	movs	r0, r3
 800abcc:	e7a8      	b.n	800ab20 <_printf_i+0x144>
 800abce:	0022      	movs	r2, r4
 800abd0:	2301      	movs	r3, #1
 800abd2:	9906      	ldr	r1, [sp, #24]
 800abd4:	9805      	ldr	r0, [sp, #20]
 800abd6:	9e07      	ldr	r6, [sp, #28]
 800abd8:	3219      	adds	r2, #25
 800abda:	47b0      	blx	r6
 800abdc:	3001      	adds	r0, #1
 800abde:	d09d      	beq.n	800ab1c <_printf_i+0x140>
 800abe0:	3501      	adds	r5, #1
 800abe2:	68e3      	ldr	r3, [r4, #12]
 800abe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abe6:	1a9b      	subs	r3, r3, r2
 800abe8:	42ab      	cmp	r3, r5
 800abea:	dcf0      	bgt.n	800abce <_printf_i+0x1f2>
 800abec:	e7e9      	b.n	800abc2 <_printf_i+0x1e6>
 800abee:	2500      	movs	r5, #0
 800abf0:	e7f7      	b.n	800abe2 <_printf_i+0x206>
 800abf2:	46c0      	nop			; (mov r8, r8)
 800abf4:	0800f266 	.word	0x0800f266
 800abf8:	0800f277 	.word	0x0800f277

0800abfc <_scanf_float>:
 800abfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abfe:	b08b      	sub	sp, #44	; 0x2c
 800ac00:	0016      	movs	r6, r2
 800ac02:	9002      	str	r0, [sp, #8]
 800ac04:	22ae      	movs	r2, #174	; 0xae
 800ac06:	2000      	movs	r0, #0
 800ac08:	9307      	str	r3, [sp, #28]
 800ac0a:	688b      	ldr	r3, [r1, #8]
 800ac0c:	000f      	movs	r7, r1
 800ac0e:	1e59      	subs	r1, r3, #1
 800ac10:	0052      	lsls	r2, r2, #1
 800ac12:	9006      	str	r0, [sp, #24]
 800ac14:	4291      	cmp	r1, r2
 800ac16:	d905      	bls.n	800ac24 <_scanf_float+0x28>
 800ac18:	3b5e      	subs	r3, #94	; 0x5e
 800ac1a:	3bff      	subs	r3, #255	; 0xff
 800ac1c:	9306      	str	r3, [sp, #24]
 800ac1e:	235e      	movs	r3, #94	; 0x5e
 800ac20:	33ff      	adds	r3, #255	; 0xff
 800ac22:	60bb      	str	r3, [r7, #8]
 800ac24:	23f0      	movs	r3, #240	; 0xf0
 800ac26:	683a      	ldr	r2, [r7, #0]
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	603b      	str	r3, [r7, #0]
 800ac2e:	003b      	movs	r3, r7
 800ac30:	2400      	movs	r4, #0
 800ac32:	331c      	adds	r3, #28
 800ac34:	001d      	movs	r5, r3
 800ac36:	9304      	str	r3, [sp, #16]
 800ac38:	9403      	str	r4, [sp, #12]
 800ac3a:	9409      	str	r4, [sp, #36]	; 0x24
 800ac3c:	9408      	str	r4, [sp, #32]
 800ac3e:	9401      	str	r4, [sp, #4]
 800ac40:	9405      	str	r4, [sp, #20]
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	2a00      	cmp	r2, #0
 800ac46:	d00a      	beq.n	800ac5e <_scanf_float+0x62>
 800ac48:	6833      	ldr	r3, [r6, #0]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2b4e      	cmp	r3, #78	; 0x4e
 800ac4e:	d844      	bhi.n	800acda <_scanf_float+0xde>
 800ac50:	0018      	movs	r0, r3
 800ac52:	2b40      	cmp	r3, #64	; 0x40
 800ac54:	d82c      	bhi.n	800acb0 <_scanf_float+0xb4>
 800ac56:	382b      	subs	r0, #43	; 0x2b
 800ac58:	b2c1      	uxtb	r1, r0
 800ac5a:	290e      	cmp	r1, #14
 800ac5c:	d92a      	bls.n	800acb4 <_scanf_float+0xb8>
 800ac5e:	9b01      	ldr	r3, [sp, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d003      	beq.n	800ac6c <_scanf_float+0x70>
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	4aa3      	ldr	r2, [pc, #652]	; (800aef4 <_scanf_float+0x2f8>)
 800ac68:	4013      	ands	r3, r2
 800ac6a:	603b      	str	r3, [r7, #0]
 800ac6c:	9b03      	ldr	r3, [sp, #12]
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d900      	bls.n	800ac76 <_scanf_float+0x7a>
 800ac74:	e0f9      	b.n	800ae6a <_scanf_float+0x26e>
 800ac76:	24be      	movs	r4, #190	; 0xbe
 800ac78:	0064      	lsls	r4, r4, #1
 800ac7a:	9b04      	ldr	r3, [sp, #16]
 800ac7c:	429d      	cmp	r5, r3
 800ac7e:	d900      	bls.n	800ac82 <_scanf_float+0x86>
 800ac80:	e0e9      	b.n	800ae56 <_scanf_float+0x25a>
 800ac82:	2301      	movs	r3, #1
 800ac84:	9303      	str	r3, [sp, #12]
 800ac86:	e183      	b.n	800af90 <_scanf_float+0x394>
 800ac88:	0018      	movs	r0, r3
 800ac8a:	3861      	subs	r0, #97	; 0x61
 800ac8c:	280d      	cmp	r0, #13
 800ac8e:	d8e6      	bhi.n	800ac5e <_scanf_float+0x62>
 800ac90:	f7f5 fa4c 	bl	800012c <__gnu_thumb1_case_shi>
 800ac94:	ffe50083 	.word	0xffe50083
 800ac98:	ffe5ffe5 	.word	0xffe5ffe5
 800ac9c:	00a200b6 	.word	0x00a200b6
 800aca0:	ffe5ffe5 	.word	0xffe5ffe5
 800aca4:	ffe50089 	.word	0xffe50089
 800aca8:	ffe5ffe5 	.word	0xffe5ffe5
 800acac:	0065ffe5 	.word	0x0065ffe5
 800acb0:	3841      	subs	r0, #65	; 0x41
 800acb2:	e7eb      	b.n	800ac8c <_scanf_float+0x90>
 800acb4:	280e      	cmp	r0, #14
 800acb6:	d8d2      	bhi.n	800ac5e <_scanf_float+0x62>
 800acb8:	f7f5 fa38 	bl	800012c <__gnu_thumb1_case_shi>
 800acbc:	ffd1004b 	.word	0xffd1004b
 800acc0:	0098004b 	.word	0x0098004b
 800acc4:	0020ffd1 	.word	0x0020ffd1
 800acc8:	00400040 	.word	0x00400040
 800accc:	00400040 	.word	0x00400040
 800acd0:	00400040 	.word	0x00400040
 800acd4:	00400040 	.word	0x00400040
 800acd8:	0040      	.short	0x0040
 800acda:	2b6e      	cmp	r3, #110	; 0x6e
 800acdc:	d809      	bhi.n	800acf2 <_scanf_float+0xf6>
 800acde:	2b60      	cmp	r3, #96	; 0x60
 800ace0:	d8d2      	bhi.n	800ac88 <_scanf_float+0x8c>
 800ace2:	2b54      	cmp	r3, #84	; 0x54
 800ace4:	d07d      	beq.n	800ade2 <_scanf_float+0x1e6>
 800ace6:	2b59      	cmp	r3, #89	; 0x59
 800ace8:	d1b9      	bne.n	800ac5e <_scanf_float+0x62>
 800acea:	2c07      	cmp	r4, #7
 800acec:	d1b7      	bne.n	800ac5e <_scanf_float+0x62>
 800acee:	2408      	movs	r4, #8
 800acf0:	e02c      	b.n	800ad4c <_scanf_float+0x150>
 800acf2:	2b74      	cmp	r3, #116	; 0x74
 800acf4:	d075      	beq.n	800ade2 <_scanf_float+0x1e6>
 800acf6:	2b79      	cmp	r3, #121	; 0x79
 800acf8:	d0f7      	beq.n	800acea <_scanf_float+0xee>
 800acfa:	e7b0      	b.n	800ac5e <_scanf_float+0x62>
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	05c8      	lsls	r0, r1, #23
 800ad00:	d51c      	bpl.n	800ad3c <_scanf_float+0x140>
 800ad02:	2380      	movs	r3, #128	; 0x80
 800ad04:	4399      	bics	r1, r3
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	6039      	str	r1, [r7, #0]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	9b06      	ldr	r3, [sp, #24]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d003      	beq.n	800ad1c <_scanf_float+0x120>
 800ad14:	3b01      	subs	r3, #1
 800ad16:	3201      	adds	r2, #1
 800ad18:	9306      	str	r3, [sp, #24]
 800ad1a:	60ba      	str	r2, [r7, #8]
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	60bb      	str	r3, [r7, #8]
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	3301      	adds	r3, #1
 800ad26:	613b      	str	r3, [r7, #16]
 800ad28:	6873      	ldr	r3, [r6, #4]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	6073      	str	r3, [r6, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	dc00      	bgt.n	800ad34 <_scanf_float+0x138>
 800ad32:	e086      	b.n	800ae42 <_scanf_float+0x246>
 800ad34:	6833      	ldr	r3, [r6, #0]
 800ad36:	3301      	adds	r3, #1
 800ad38:	6033      	str	r3, [r6, #0]
 800ad3a:	e782      	b.n	800ac42 <_scanf_float+0x46>
 800ad3c:	9a03      	ldr	r2, [sp, #12]
 800ad3e:	1912      	adds	r2, r2, r4
 800ad40:	2a00      	cmp	r2, #0
 800ad42:	d18c      	bne.n	800ac5e <_scanf_float+0x62>
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	496c      	ldr	r1, [pc, #432]	; (800aef8 <_scanf_float+0x2fc>)
 800ad48:	400a      	ands	r2, r1
 800ad4a:	603a      	str	r2, [r7, #0]
 800ad4c:	702b      	strb	r3, [r5, #0]
 800ad4e:	3501      	adds	r5, #1
 800ad50:	e7e4      	b.n	800ad1c <_scanf_float+0x120>
 800ad52:	2180      	movs	r1, #128	; 0x80
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	420a      	tst	r2, r1
 800ad58:	d081      	beq.n	800ac5e <_scanf_float+0x62>
 800ad5a:	438a      	bics	r2, r1
 800ad5c:	e7f5      	b.n	800ad4a <_scanf_float+0x14e>
 800ad5e:	9a03      	ldr	r2, [sp, #12]
 800ad60:	2a00      	cmp	r2, #0
 800ad62:	d10f      	bne.n	800ad84 <_scanf_float+0x188>
 800ad64:	9a01      	ldr	r2, [sp, #4]
 800ad66:	2a00      	cmp	r2, #0
 800ad68:	d10f      	bne.n	800ad8a <_scanf_float+0x18e>
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	21e0      	movs	r1, #224	; 0xe0
 800ad6e:	0010      	movs	r0, r2
 800ad70:	00c9      	lsls	r1, r1, #3
 800ad72:	4008      	ands	r0, r1
 800ad74:	4288      	cmp	r0, r1
 800ad76:	d108      	bne.n	800ad8a <_scanf_float+0x18e>
 800ad78:	4960      	ldr	r1, [pc, #384]	; (800aefc <_scanf_float+0x300>)
 800ad7a:	400a      	ands	r2, r1
 800ad7c:	603a      	str	r2, [r7, #0]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	9203      	str	r2, [sp, #12]
 800ad82:	e7e3      	b.n	800ad4c <_scanf_float+0x150>
 800ad84:	9a03      	ldr	r2, [sp, #12]
 800ad86:	2a02      	cmp	r2, #2
 800ad88:	d059      	beq.n	800ae3e <_scanf_float+0x242>
 800ad8a:	2c01      	cmp	r4, #1
 800ad8c:	d002      	beq.n	800ad94 <_scanf_float+0x198>
 800ad8e:	2c04      	cmp	r4, #4
 800ad90:	d000      	beq.n	800ad94 <_scanf_float+0x198>
 800ad92:	e764      	b.n	800ac5e <_scanf_float+0x62>
 800ad94:	3401      	adds	r4, #1
 800ad96:	b2e4      	uxtb	r4, r4
 800ad98:	e7d8      	b.n	800ad4c <_scanf_float+0x150>
 800ad9a:	9a03      	ldr	r2, [sp, #12]
 800ad9c:	2a01      	cmp	r2, #1
 800ad9e:	d000      	beq.n	800ada2 <_scanf_float+0x1a6>
 800ada0:	e75d      	b.n	800ac5e <_scanf_float+0x62>
 800ada2:	2202      	movs	r2, #2
 800ada4:	e7ec      	b.n	800ad80 <_scanf_float+0x184>
 800ada6:	2c00      	cmp	r4, #0
 800ada8:	d110      	bne.n	800adcc <_scanf_float+0x1d0>
 800adaa:	9a01      	ldr	r2, [sp, #4]
 800adac:	2a00      	cmp	r2, #0
 800adae:	d000      	beq.n	800adb2 <_scanf_float+0x1b6>
 800adb0:	e758      	b.n	800ac64 <_scanf_float+0x68>
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	21e0      	movs	r1, #224	; 0xe0
 800adb6:	0010      	movs	r0, r2
 800adb8:	00c9      	lsls	r1, r1, #3
 800adba:	4008      	ands	r0, r1
 800adbc:	4288      	cmp	r0, r1
 800adbe:	d000      	beq.n	800adc2 <_scanf_float+0x1c6>
 800adc0:	e754      	b.n	800ac6c <_scanf_float+0x70>
 800adc2:	494e      	ldr	r1, [pc, #312]	; (800aefc <_scanf_float+0x300>)
 800adc4:	3401      	adds	r4, #1
 800adc6:	400a      	ands	r2, r1
 800adc8:	603a      	str	r2, [r7, #0]
 800adca:	e7bf      	b.n	800ad4c <_scanf_float+0x150>
 800adcc:	21fd      	movs	r1, #253	; 0xfd
 800adce:	1ee2      	subs	r2, r4, #3
 800add0:	420a      	tst	r2, r1
 800add2:	d000      	beq.n	800add6 <_scanf_float+0x1da>
 800add4:	e743      	b.n	800ac5e <_scanf_float+0x62>
 800add6:	e7dd      	b.n	800ad94 <_scanf_float+0x198>
 800add8:	2c02      	cmp	r4, #2
 800adda:	d000      	beq.n	800adde <_scanf_float+0x1e2>
 800addc:	e73f      	b.n	800ac5e <_scanf_float+0x62>
 800adde:	2403      	movs	r4, #3
 800ade0:	e7b4      	b.n	800ad4c <_scanf_float+0x150>
 800ade2:	2c06      	cmp	r4, #6
 800ade4:	d000      	beq.n	800ade8 <_scanf_float+0x1ec>
 800ade6:	e73a      	b.n	800ac5e <_scanf_float+0x62>
 800ade8:	2407      	movs	r4, #7
 800adea:	e7af      	b.n	800ad4c <_scanf_float+0x150>
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	0591      	lsls	r1, r2, #22
 800adf0:	d400      	bmi.n	800adf4 <_scanf_float+0x1f8>
 800adf2:	e734      	b.n	800ac5e <_scanf_float+0x62>
 800adf4:	4942      	ldr	r1, [pc, #264]	; (800af00 <_scanf_float+0x304>)
 800adf6:	400a      	ands	r2, r1
 800adf8:	603a      	str	r2, [r7, #0]
 800adfa:	9a01      	ldr	r2, [sp, #4]
 800adfc:	9205      	str	r2, [sp, #20]
 800adfe:	e7a5      	b.n	800ad4c <_scanf_float+0x150>
 800ae00:	21a0      	movs	r1, #160	; 0xa0
 800ae02:	2080      	movs	r0, #128	; 0x80
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	00c9      	lsls	r1, r1, #3
 800ae08:	4011      	ands	r1, r2
 800ae0a:	00c0      	lsls	r0, r0, #3
 800ae0c:	4281      	cmp	r1, r0
 800ae0e:	d006      	beq.n	800ae1e <_scanf_float+0x222>
 800ae10:	4202      	tst	r2, r0
 800ae12:	d100      	bne.n	800ae16 <_scanf_float+0x21a>
 800ae14:	e723      	b.n	800ac5e <_scanf_float+0x62>
 800ae16:	9901      	ldr	r1, [sp, #4]
 800ae18:	2900      	cmp	r1, #0
 800ae1a:	d100      	bne.n	800ae1e <_scanf_float+0x222>
 800ae1c:	e726      	b.n	800ac6c <_scanf_float+0x70>
 800ae1e:	0591      	lsls	r1, r2, #22
 800ae20:	d404      	bmi.n	800ae2c <_scanf_float+0x230>
 800ae22:	9901      	ldr	r1, [sp, #4]
 800ae24:	9805      	ldr	r0, [sp, #20]
 800ae26:	9509      	str	r5, [sp, #36]	; 0x24
 800ae28:	1a09      	subs	r1, r1, r0
 800ae2a:	9108      	str	r1, [sp, #32]
 800ae2c:	4933      	ldr	r1, [pc, #204]	; (800aefc <_scanf_float+0x300>)
 800ae2e:	400a      	ands	r2, r1
 800ae30:	21c0      	movs	r1, #192	; 0xc0
 800ae32:	0049      	lsls	r1, r1, #1
 800ae34:	430a      	orrs	r2, r1
 800ae36:	603a      	str	r2, [r7, #0]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	9201      	str	r2, [sp, #4]
 800ae3c:	e786      	b.n	800ad4c <_scanf_float+0x150>
 800ae3e:	2203      	movs	r2, #3
 800ae40:	e79e      	b.n	800ad80 <_scanf_float+0x184>
 800ae42:	23c0      	movs	r3, #192	; 0xc0
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	0031      	movs	r1, r6
 800ae48:	58fb      	ldr	r3, [r7, r3]
 800ae4a:	9802      	ldr	r0, [sp, #8]
 800ae4c:	4798      	blx	r3
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d100      	bne.n	800ae54 <_scanf_float+0x258>
 800ae52:	e6f6      	b.n	800ac42 <_scanf_float+0x46>
 800ae54:	e703      	b.n	800ac5e <_scanf_float+0x62>
 800ae56:	3d01      	subs	r5, #1
 800ae58:	593b      	ldr	r3, [r7, r4]
 800ae5a:	0032      	movs	r2, r6
 800ae5c:	7829      	ldrb	r1, [r5, #0]
 800ae5e:	9802      	ldr	r0, [sp, #8]
 800ae60:	4798      	blx	r3
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	613b      	str	r3, [r7, #16]
 800ae68:	e707      	b.n	800ac7a <_scanf_float+0x7e>
 800ae6a:	1e63      	subs	r3, r4, #1
 800ae6c:	2b06      	cmp	r3, #6
 800ae6e:	d80e      	bhi.n	800ae8e <_scanf_float+0x292>
 800ae70:	9503      	str	r5, [sp, #12]
 800ae72:	2c02      	cmp	r4, #2
 800ae74:	d920      	bls.n	800aeb8 <_scanf_float+0x2bc>
 800ae76:	1b63      	subs	r3, r4, r5
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	9306      	str	r3, [sp, #24]
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	9a06      	ldr	r2, [sp, #24]
 800ae80:	189b      	adds	r3, r3, r2
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b03      	cmp	r3, #3
 800ae86:	d827      	bhi.n	800aed8 <_scanf_float+0x2dc>
 800ae88:	3c03      	subs	r4, #3
 800ae8a:	b2e4      	uxtb	r4, r4
 800ae8c:	1b2d      	subs	r5, r5, r4
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	05da      	lsls	r2, r3, #23
 800ae92:	d552      	bpl.n	800af3a <_scanf_float+0x33e>
 800ae94:	055b      	lsls	r3, r3, #21
 800ae96:	d535      	bpl.n	800af04 <_scanf_float+0x308>
 800ae98:	24be      	movs	r4, #190	; 0xbe
 800ae9a:	0064      	lsls	r4, r4, #1
 800ae9c:	9b04      	ldr	r3, [sp, #16]
 800ae9e:	429d      	cmp	r5, r3
 800aea0:	d800      	bhi.n	800aea4 <_scanf_float+0x2a8>
 800aea2:	e6ee      	b.n	800ac82 <_scanf_float+0x86>
 800aea4:	3d01      	subs	r5, #1
 800aea6:	593b      	ldr	r3, [r7, r4]
 800aea8:	0032      	movs	r2, r6
 800aeaa:	7829      	ldrb	r1, [r5, #0]
 800aeac:	9802      	ldr	r0, [sp, #8]
 800aeae:	4798      	blx	r3
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	613b      	str	r3, [r7, #16]
 800aeb6:	e7f1      	b.n	800ae9c <_scanf_float+0x2a0>
 800aeb8:	24be      	movs	r4, #190	; 0xbe
 800aeba:	0064      	lsls	r4, r4, #1
 800aebc:	9b04      	ldr	r3, [sp, #16]
 800aebe:	429d      	cmp	r5, r3
 800aec0:	d800      	bhi.n	800aec4 <_scanf_float+0x2c8>
 800aec2:	e6de      	b.n	800ac82 <_scanf_float+0x86>
 800aec4:	3d01      	subs	r5, #1
 800aec6:	593b      	ldr	r3, [r7, r4]
 800aec8:	0032      	movs	r2, r6
 800aeca:	7829      	ldrb	r1, [r5, #0]
 800aecc:	9802      	ldr	r0, [sp, #8]
 800aece:	4798      	blx	r3
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	3b01      	subs	r3, #1
 800aed4:	613b      	str	r3, [r7, #16]
 800aed6:	e7f1      	b.n	800aebc <_scanf_float+0x2c0>
 800aed8:	9b03      	ldr	r3, [sp, #12]
 800aeda:	0032      	movs	r2, r6
 800aedc:	3b01      	subs	r3, #1
 800aede:	7819      	ldrb	r1, [r3, #0]
 800aee0:	9303      	str	r3, [sp, #12]
 800aee2:	23be      	movs	r3, #190	; 0xbe
 800aee4:	005b      	lsls	r3, r3, #1
 800aee6:	58fb      	ldr	r3, [r7, r3]
 800aee8:	9802      	ldr	r0, [sp, #8]
 800aeea:	4798      	blx	r3
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	613b      	str	r3, [r7, #16]
 800aef2:	e7c3      	b.n	800ae7c <_scanf_float+0x280>
 800aef4:	fffffeff 	.word	0xfffffeff
 800aef8:	fffffe7f 	.word	0xfffffe7f
 800aefc:	fffff87f 	.word	0xfffff87f
 800af00:	fffffd7f 	.word	0xfffffd7f
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	1e6c      	subs	r4, r5, #1
 800af08:	7821      	ldrb	r1, [r4, #0]
 800af0a:	3b01      	subs	r3, #1
 800af0c:	613b      	str	r3, [r7, #16]
 800af0e:	2965      	cmp	r1, #101	; 0x65
 800af10:	d00c      	beq.n	800af2c <_scanf_float+0x330>
 800af12:	2945      	cmp	r1, #69	; 0x45
 800af14:	d00a      	beq.n	800af2c <_scanf_float+0x330>
 800af16:	23be      	movs	r3, #190	; 0xbe
 800af18:	005b      	lsls	r3, r3, #1
 800af1a:	58fb      	ldr	r3, [r7, r3]
 800af1c:	0032      	movs	r2, r6
 800af1e:	9802      	ldr	r0, [sp, #8]
 800af20:	4798      	blx	r3
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	1eac      	subs	r4, r5, #2
 800af26:	3b01      	subs	r3, #1
 800af28:	7821      	ldrb	r1, [r4, #0]
 800af2a:	613b      	str	r3, [r7, #16]
 800af2c:	23be      	movs	r3, #190	; 0xbe
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	0032      	movs	r2, r6
 800af32:	58fb      	ldr	r3, [r7, r3]
 800af34:	9802      	ldr	r0, [sp, #8]
 800af36:	4798      	blx	r3
 800af38:	0025      	movs	r5, r4
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	2310      	movs	r3, #16
 800af3e:	0011      	movs	r1, r2
 800af40:	4019      	ands	r1, r3
 800af42:	9103      	str	r1, [sp, #12]
 800af44:	421a      	tst	r2, r3
 800af46:	d15b      	bne.n	800b000 <_scanf_float+0x404>
 800af48:	22c0      	movs	r2, #192	; 0xc0
 800af4a:	7029      	strb	r1, [r5, #0]
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	00d2      	lsls	r2, r2, #3
 800af50:	4013      	ands	r3, r2
 800af52:	2280      	movs	r2, #128	; 0x80
 800af54:	00d2      	lsls	r2, r2, #3
 800af56:	4293      	cmp	r3, r2
 800af58:	d11d      	bne.n	800af96 <_scanf_float+0x39a>
 800af5a:	9b05      	ldr	r3, [sp, #20]
 800af5c:	9a01      	ldr	r2, [sp, #4]
 800af5e:	9901      	ldr	r1, [sp, #4]
 800af60:	1a9a      	subs	r2, r3, r2
 800af62:	428b      	cmp	r3, r1
 800af64:	d124      	bne.n	800afb0 <_scanf_float+0x3b4>
 800af66:	2200      	movs	r2, #0
 800af68:	9904      	ldr	r1, [sp, #16]
 800af6a:	9802      	ldr	r0, [sp, #8]
 800af6c:	f002 fc98 	bl	800d8a0 <_strtod_r>
 800af70:	9b07      	ldr	r3, [sp, #28]
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	0004      	movs	r4, r0
 800af76:	000d      	movs	r5, r1
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	0791      	lsls	r1, r2, #30
 800af7c:	d525      	bpl.n	800afca <_scanf_float+0x3ce>
 800af7e:	9907      	ldr	r1, [sp, #28]
 800af80:	1d1a      	adds	r2, r3, #4
 800af82:	600a      	str	r2, [r1, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	601c      	str	r4, [r3, #0]
 800af88:	605d      	str	r5, [r3, #4]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3301      	adds	r3, #1
 800af8e:	60fb      	str	r3, [r7, #12]
 800af90:	9803      	ldr	r0, [sp, #12]
 800af92:	b00b      	add	sp, #44	; 0x2c
 800af94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af96:	9b08      	ldr	r3, [sp, #32]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d0e4      	beq.n	800af66 <_scanf_float+0x36a>
 800af9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9e:	9a03      	ldr	r2, [sp, #12]
 800afa0:	1c59      	adds	r1, r3, #1
 800afa2:	9802      	ldr	r0, [sp, #8]
 800afa4:	230a      	movs	r3, #10
 800afa6:	f002 fd09 	bl	800d9bc <_strtol_r>
 800afaa:	9b08      	ldr	r3, [sp, #32]
 800afac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800afae:	1ac2      	subs	r2, r0, r3
 800afb0:	003b      	movs	r3, r7
 800afb2:	3370      	adds	r3, #112	; 0x70
 800afb4:	33ff      	adds	r3, #255	; 0xff
 800afb6:	429d      	cmp	r5, r3
 800afb8:	d302      	bcc.n	800afc0 <_scanf_float+0x3c4>
 800afba:	003d      	movs	r5, r7
 800afbc:	356f      	adds	r5, #111	; 0x6f
 800afbe:	35ff      	adds	r5, #255	; 0xff
 800afc0:	0028      	movs	r0, r5
 800afc2:	4910      	ldr	r1, [pc, #64]	; (800b004 <_scanf_float+0x408>)
 800afc4:	f000 f8e6 	bl	800b194 <siprintf>
 800afc8:	e7cd      	b.n	800af66 <_scanf_float+0x36a>
 800afca:	1d19      	adds	r1, r3, #4
 800afcc:	0752      	lsls	r2, r2, #29
 800afce:	d502      	bpl.n	800afd6 <_scanf_float+0x3da>
 800afd0:	9a07      	ldr	r2, [sp, #28]
 800afd2:	6011      	str	r1, [r2, #0]
 800afd4:	e7d6      	b.n	800af84 <_scanf_float+0x388>
 800afd6:	9a07      	ldr	r2, [sp, #28]
 800afd8:	0020      	movs	r0, r4
 800afda:	6011      	str	r1, [r2, #0]
 800afdc:	681e      	ldr	r6, [r3, #0]
 800afde:	0022      	movs	r2, r4
 800afe0:	002b      	movs	r3, r5
 800afe2:	0029      	movs	r1, r5
 800afe4:	f7f7 fe7c 	bl	8002ce0 <__aeabi_dcmpun>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d004      	beq.n	800aff6 <_scanf_float+0x3fa>
 800afec:	4806      	ldr	r0, [pc, #24]	; (800b008 <_scanf_float+0x40c>)
 800afee:	f000 f9cf 	bl	800b390 <nanf>
 800aff2:	6030      	str	r0, [r6, #0]
 800aff4:	e7c9      	b.n	800af8a <_scanf_float+0x38e>
 800aff6:	0020      	movs	r0, r4
 800aff8:	0029      	movs	r1, r5
 800affa:	f7f7 ff63 	bl	8002ec4 <__aeabi_d2f>
 800affe:	e7f8      	b.n	800aff2 <_scanf_float+0x3f6>
 800b000:	2300      	movs	r3, #0
 800b002:	e63f      	b.n	800ac84 <_scanf_float+0x88>
 800b004:	0800f288 	.word	0x0800f288
 800b008:	0800f61d 	.word	0x0800f61d

0800b00c <std>:
 800b00c:	2300      	movs	r3, #0
 800b00e:	b510      	push	{r4, lr}
 800b010:	0004      	movs	r4, r0
 800b012:	6003      	str	r3, [r0, #0]
 800b014:	6043      	str	r3, [r0, #4]
 800b016:	6083      	str	r3, [r0, #8]
 800b018:	8181      	strh	r1, [r0, #12]
 800b01a:	6643      	str	r3, [r0, #100]	; 0x64
 800b01c:	81c2      	strh	r2, [r0, #14]
 800b01e:	6103      	str	r3, [r0, #16]
 800b020:	6143      	str	r3, [r0, #20]
 800b022:	6183      	str	r3, [r0, #24]
 800b024:	0019      	movs	r1, r3
 800b026:	2208      	movs	r2, #8
 800b028:	305c      	adds	r0, #92	; 0x5c
 800b02a:	f000 f91f 	bl	800b26c <memset>
 800b02e:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <std+0x50>)
 800b030:	6224      	str	r4, [r4, #32]
 800b032:	6263      	str	r3, [r4, #36]	; 0x24
 800b034:	4b0a      	ldr	r3, [pc, #40]	; (800b060 <std+0x54>)
 800b036:	62a3      	str	r3, [r4, #40]	; 0x28
 800b038:	4b0a      	ldr	r3, [pc, #40]	; (800b064 <std+0x58>)
 800b03a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b03c:	4b0a      	ldr	r3, [pc, #40]	; (800b068 <std+0x5c>)
 800b03e:	6323      	str	r3, [r4, #48]	; 0x30
 800b040:	4b0a      	ldr	r3, [pc, #40]	; (800b06c <std+0x60>)
 800b042:	429c      	cmp	r4, r3
 800b044:	d005      	beq.n	800b052 <std+0x46>
 800b046:	4b0a      	ldr	r3, [pc, #40]	; (800b070 <std+0x64>)
 800b048:	429c      	cmp	r4, r3
 800b04a:	d002      	beq.n	800b052 <std+0x46>
 800b04c:	4b09      	ldr	r3, [pc, #36]	; (800b074 <std+0x68>)
 800b04e:	429c      	cmp	r4, r3
 800b050:	d103      	bne.n	800b05a <std+0x4e>
 800b052:	0020      	movs	r0, r4
 800b054:	3058      	adds	r0, #88	; 0x58
 800b056:	f000 f98d 	bl	800b374 <__retarget_lock_init_recursive>
 800b05a:	bd10      	pop	{r4, pc}
 800b05c:	0800b1d5 	.word	0x0800b1d5
 800b060:	0800b1fd 	.word	0x0800b1fd
 800b064:	0800b235 	.word	0x0800b235
 800b068:	0800b261 	.word	0x0800b261
 800b06c:	2000058c 	.word	0x2000058c
 800b070:	200005f4 	.word	0x200005f4
 800b074:	2000065c 	.word	0x2000065c

0800b078 <stdio_exit_handler>:
 800b078:	b510      	push	{r4, lr}
 800b07a:	4a03      	ldr	r2, [pc, #12]	; (800b088 <stdio_exit_handler+0x10>)
 800b07c:	4903      	ldr	r1, [pc, #12]	; (800b08c <stdio_exit_handler+0x14>)
 800b07e:	4804      	ldr	r0, [pc, #16]	; (800b090 <stdio_exit_handler+0x18>)
 800b080:	f000 f86c 	bl	800b15c <_fwalk_sglue>
 800b084:	bd10      	pop	{r4, pc}
 800b086:	46c0      	nop			; (mov r8, r8)
 800b088:	20000024 	.word	0x20000024
 800b08c:	0800dd9d 	.word	0x0800dd9d
 800b090:	20000030 	.word	0x20000030

0800b094 <cleanup_stdio>:
 800b094:	6841      	ldr	r1, [r0, #4]
 800b096:	4b0b      	ldr	r3, [pc, #44]	; (800b0c4 <cleanup_stdio+0x30>)
 800b098:	b510      	push	{r4, lr}
 800b09a:	0004      	movs	r4, r0
 800b09c:	4299      	cmp	r1, r3
 800b09e:	d001      	beq.n	800b0a4 <cleanup_stdio+0x10>
 800b0a0:	f002 fe7c 	bl	800dd9c <_fflush_r>
 800b0a4:	68a1      	ldr	r1, [r4, #8]
 800b0a6:	4b08      	ldr	r3, [pc, #32]	; (800b0c8 <cleanup_stdio+0x34>)
 800b0a8:	4299      	cmp	r1, r3
 800b0aa:	d002      	beq.n	800b0b2 <cleanup_stdio+0x1e>
 800b0ac:	0020      	movs	r0, r4
 800b0ae:	f002 fe75 	bl	800dd9c <_fflush_r>
 800b0b2:	68e1      	ldr	r1, [r4, #12]
 800b0b4:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <cleanup_stdio+0x38>)
 800b0b6:	4299      	cmp	r1, r3
 800b0b8:	d002      	beq.n	800b0c0 <cleanup_stdio+0x2c>
 800b0ba:	0020      	movs	r0, r4
 800b0bc:	f002 fe6e 	bl	800dd9c <_fflush_r>
 800b0c0:	bd10      	pop	{r4, pc}
 800b0c2:	46c0      	nop			; (mov r8, r8)
 800b0c4:	2000058c 	.word	0x2000058c
 800b0c8:	200005f4 	.word	0x200005f4
 800b0cc:	2000065c 	.word	0x2000065c

0800b0d0 <global_stdio_init.part.0>:
 800b0d0:	b510      	push	{r4, lr}
 800b0d2:	4b09      	ldr	r3, [pc, #36]	; (800b0f8 <global_stdio_init.part.0+0x28>)
 800b0d4:	4a09      	ldr	r2, [pc, #36]	; (800b0fc <global_stdio_init.part.0+0x2c>)
 800b0d6:	2104      	movs	r1, #4
 800b0d8:	601a      	str	r2, [r3, #0]
 800b0da:	4809      	ldr	r0, [pc, #36]	; (800b100 <global_stdio_init.part.0+0x30>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f7ff ff95 	bl	800b00c <std>
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	2109      	movs	r1, #9
 800b0e6:	4807      	ldr	r0, [pc, #28]	; (800b104 <global_stdio_init.part.0+0x34>)
 800b0e8:	f7ff ff90 	bl	800b00c <std>
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	2112      	movs	r1, #18
 800b0f0:	4805      	ldr	r0, [pc, #20]	; (800b108 <global_stdio_init.part.0+0x38>)
 800b0f2:	f7ff ff8b 	bl	800b00c <std>
 800b0f6:	bd10      	pop	{r4, pc}
 800b0f8:	200006c4 	.word	0x200006c4
 800b0fc:	0800b079 	.word	0x0800b079
 800b100:	2000058c 	.word	0x2000058c
 800b104:	200005f4 	.word	0x200005f4
 800b108:	2000065c 	.word	0x2000065c

0800b10c <__sfp_lock_acquire>:
 800b10c:	b510      	push	{r4, lr}
 800b10e:	4802      	ldr	r0, [pc, #8]	; (800b118 <__sfp_lock_acquire+0xc>)
 800b110:	f000 f931 	bl	800b376 <__retarget_lock_acquire_recursive>
 800b114:	bd10      	pop	{r4, pc}
 800b116:	46c0      	nop			; (mov r8, r8)
 800b118:	200006cd 	.word	0x200006cd

0800b11c <__sfp_lock_release>:
 800b11c:	b510      	push	{r4, lr}
 800b11e:	4802      	ldr	r0, [pc, #8]	; (800b128 <__sfp_lock_release+0xc>)
 800b120:	f000 f92a 	bl	800b378 <__retarget_lock_release_recursive>
 800b124:	bd10      	pop	{r4, pc}
 800b126:	46c0      	nop			; (mov r8, r8)
 800b128:	200006cd 	.word	0x200006cd

0800b12c <__sinit>:
 800b12c:	b510      	push	{r4, lr}
 800b12e:	0004      	movs	r4, r0
 800b130:	f7ff ffec 	bl	800b10c <__sfp_lock_acquire>
 800b134:	6a23      	ldr	r3, [r4, #32]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d002      	beq.n	800b140 <__sinit+0x14>
 800b13a:	f7ff ffef 	bl	800b11c <__sfp_lock_release>
 800b13e:	bd10      	pop	{r4, pc}
 800b140:	4b04      	ldr	r3, [pc, #16]	; (800b154 <__sinit+0x28>)
 800b142:	6223      	str	r3, [r4, #32]
 800b144:	4b04      	ldr	r3, [pc, #16]	; (800b158 <__sinit+0x2c>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1f6      	bne.n	800b13a <__sinit+0xe>
 800b14c:	f7ff ffc0 	bl	800b0d0 <global_stdio_init.part.0>
 800b150:	e7f3      	b.n	800b13a <__sinit+0xe>
 800b152:	46c0      	nop			; (mov r8, r8)
 800b154:	0800b095 	.word	0x0800b095
 800b158:	200006c4 	.word	0x200006c4

0800b15c <_fwalk_sglue>:
 800b15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b15e:	0014      	movs	r4, r2
 800b160:	2600      	movs	r6, #0
 800b162:	9000      	str	r0, [sp, #0]
 800b164:	9101      	str	r1, [sp, #4]
 800b166:	68a5      	ldr	r5, [r4, #8]
 800b168:	6867      	ldr	r7, [r4, #4]
 800b16a:	3f01      	subs	r7, #1
 800b16c:	d504      	bpl.n	800b178 <_fwalk_sglue+0x1c>
 800b16e:	6824      	ldr	r4, [r4, #0]
 800b170:	2c00      	cmp	r4, #0
 800b172:	d1f8      	bne.n	800b166 <_fwalk_sglue+0xa>
 800b174:	0030      	movs	r0, r6
 800b176:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b178:	89ab      	ldrh	r3, [r5, #12]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d908      	bls.n	800b190 <_fwalk_sglue+0x34>
 800b17e:	220e      	movs	r2, #14
 800b180:	5eab      	ldrsh	r3, [r5, r2]
 800b182:	3301      	adds	r3, #1
 800b184:	d004      	beq.n	800b190 <_fwalk_sglue+0x34>
 800b186:	0029      	movs	r1, r5
 800b188:	9800      	ldr	r0, [sp, #0]
 800b18a:	9b01      	ldr	r3, [sp, #4]
 800b18c:	4798      	blx	r3
 800b18e:	4306      	orrs	r6, r0
 800b190:	3568      	adds	r5, #104	; 0x68
 800b192:	e7ea      	b.n	800b16a <_fwalk_sglue+0xe>

0800b194 <siprintf>:
 800b194:	b40e      	push	{r1, r2, r3}
 800b196:	b500      	push	{lr}
 800b198:	490b      	ldr	r1, [pc, #44]	; (800b1c8 <siprintf+0x34>)
 800b19a:	b09c      	sub	sp, #112	; 0x70
 800b19c:	ab1d      	add	r3, sp, #116	; 0x74
 800b19e:	9002      	str	r0, [sp, #8]
 800b1a0:	9006      	str	r0, [sp, #24]
 800b1a2:	9107      	str	r1, [sp, #28]
 800b1a4:	9104      	str	r1, [sp, #16]
 800b1a6:	4809      	ldr	r0, [pc, #36]	; (800b1cc <siprintf+0x38>)
 800b1a8:	4909      	ldr	r1, [pc, #36]	; (800b1d0 <siprintf+0x3c>)
 800b1aa:	cb04      	ldmia	r3!, {r2}
 800b1ac:	9105      	str	r1, [sp, #20]
 800b1ae:	6800      	ldr	r0, [r0, #0]
 800b1b0:	a902      	add	r1, sp, #8
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	f002 fc68 	bl	800da88 <_svfiprintf_r>
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	9b02      	ldr	r3, [sp, #8]
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	b01c      	add	sp, #112	; 0x70
 800b1c0:	bc08      	pop	{r3}
 800b1c2:	b003      	add	sp, #12
 800b1c4:	4718      	bx	r3
 800b1c6:	46c0      	nop			; (mov r8, r8)
 800b1c8:	7fffffff 	.word	0x7fffffff
 800b1cc:	2000007c 	.word	0x2000007c
 800b1d0:	ffff0208 	.word	0xffff0208

0800b1d4 <__sread>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	000c      	movs	r4, r1
 800b1d8:	250e      	movs	r5, #14
 800b1da:	5f49      	ldrsh	r1, [r1, r5]
 800b1dc:	f000 f878 	bl	800b2d0 <_read_r>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	db03      	blt.n	800b1ec <__sread+0x18>
 800b1e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b1e6:	181b      	adds	r3, r3, r0
 800b1e8:	6563      	str	r3, [r4, #84]	; 0x54
 800b1ea:	bd70      	pop	{r4, r5, r6, pc}
 800b1ec:	89a3      	ldrh	r3, [r4, #12]
 800b1ee:	4a02      	ldr	r2, [pc, #8]	; (800b1f8 <__sread+0x24>)
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	81a3      	strh	r3, [r4, #12]
 800b1f4:	e7f9      	b.n	800b1ea <__sread+0x16>
 800b1f6:	46c0      	nop			; (mov r8, r8)
 800b1f8:	ffffefff 	.word	0xffffefff

0800b1fc <__swrite>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	001f      	movs	r7, r3
 800b200:	898b      	ldrh	r3, [r1, #12]
 800b202:	0005      	movs	r5, r0
 800b204:	000c      	movs	r4, r1
 800b206:	0016      	movs	r6, r2
 800b208:	05db      	lsls	r3, r3, #23
 800b20a:	d505      	bpl.n	800b218 <__swrite+0x1c>
 800b20c:	230e      	movs	r3, #14
 800b20e:	5ec9      	ldrsh	r1, [r1, r3]
 800b210:	2200      	movs	r2, #0
 800b212:	2302      	movs	r3, #2
 800b214:	f000 f848 	bl	800b2a8 <_lseek_r>
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	4a05      	ldr	r2, [pc, #20]	; (800b230 <__swrite+0x34>)
 800b21c:	0028      	movs	r0, r5
 800b21e:	4013      	ands	r3, r2
 800b220:	81a3      	strh	r3, [r4, #12]
 800b222:	0032      	movs	r2, r6
 800b224:	230e      	movs	r3, #14
 800b226:	5ee1      	ldrsh	r1, [r4, r3]
 800b228:	003b      	movs	r3, r7
 800b22a:	f000 f865 	bl	800b2f8 <_write_r>
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b230:	ffffefff 	.word	0xffffefff

0800b234 <__sseek>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	000c      	movs	r4, r1
 800b238:	250e      	movs	r5, #14
 800b23a:	5f49      	ldrsh	r1, [r1, r5]
 800b23c:	f000 f834 	bl	800b2a8 <_lseek_r>
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	1c42      	adds	r2, r0, #1
 800b244:	d103      	bne.n	800b24e <__sseek+0x1a>
 800b246:	4a05      	ldr	r2, [pc, #20]	; (800b25c <__sseek+0x28>)
 800b248:	4013      	ands	r3, r2
 800b24a:	81a3      	strh	r3, [r4, #12]
 800b24c:	bd70      	pop	{r4, r5, r6, pc}
 800b24e:	2280      	movs	r2, #128	; 0x80
 800b250:	0152      	lsls	r2, r2, #5
 800b252:	4313      	orrs	r3, r2
 800b254:	81a3      	strh	r3, [r4, #12]
 800b256:	6560      	str	r0, [r4, #84]	; 0x54
 800b258:	e7f8      	b.n	800b24c <__sseek+0x18>
 800b25a:	46c0      	nop			; (mov r8, r8)
 800b25c:	ffffefff 	.word	0xffffefff

0800b260 <__sclose>:
 800b260:	b510      	push	{r4, lr}
 800b262:	230e      	movs	r3, #14
 800b264:	5ec9      	ldrsh	r1, [r1, r3]
 800b266:	f000 f80d 	bl	800b284 <_close_r>
 800b26a:	bd10      	pop	{r4, pc}

0800b26c <memset>:
 800b26c:	0003      	movs	r3, r0
 800b26e:	1882      	adds	r2, r0, r2
 800b270:	4293      	cmp	r3, r2
 800b272:	d100      	bne.n	800b276 <memset+0xa>
 800b274:	4770      	bx	lr
 800b276:	7019      	strb	r1, [r3, #0]
 800b278:	3301      	adds	r3, #1
 800b27a:	e7f9      	b.n	800b270 <memset+0x4>

0800b27c <_localeconv_r>:
 800b27c:	4800      	ldr	r0, [pc, #0]	; (800b280 <_localeconv_r+0x4>)
 800b27e:	4770      	bx	lr
 800b280:	20000170 	.word	0x20000170

0800b284 <_close_r>:
 800b284:	2300      	movs	r3, #0
 800b286:	b570      	push	{r4, r5, r6, lr}
 800b288:	4d06      	ldr	r5, [pc, #24]	; (800b2a4 <_close_r+0x20>)
 800b28a:	0004      	movs	r4, r0
 800b28c:	0008      	movs	r0, r1
 800b28e:	602b      	str	r3, [r5, #0]
 800b290:	f7f9 fa06 	bl	80046a0 <_close>
 800b294:	1c43      	adds	r3, r0, #1
 800b296:	d103      	bne.n	800b2a0 <_close_r+0x1c>
 800b298:	682b      	ldr	r3, [r5, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d000      	beq.n	800b2a0 <_close_r+0x1c>
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	bd70      	pop	{r4, r5, r6, pc}
 800b2a2:	46c0      	nop			; (mov r8, r8)
 800b2a4:	200006c8 	.word	0x200006c8

0800b2a8 <_lseek_r>:
 800b2a8:	b570      	push	{r4, r5, r6, lr}
 800b2aa:	0004      	movs	r4, r0
 800b2ac:	0008      	movs	r0, r1
 800b2ae:	0011      	movs	r1, r2
 800b2b0:	001a      	movs	r2, r3
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	4d05      	ldr	r5, [pc, #20]	; (800b2cc <_lseek_r+0x24>)
 800b2b6:	602b      	str	r3, [r5, #0]
 800b2b8:	f7f9 fa13 	bl	80046e2 <_lseek>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d103      	bne.n	800b2c8 <_lseek_r+0x20>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d000      	beq.n	800b2c8 <_lseek_r+0x20>
 800b2c6:	6023      	str	r3, [r4, #0]
 800b2c8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ca:	46c0      	nop			; (mov r8, r8)
 800b2cc:	200006c8 	.word	0x200006c8

0800b2d0 <_read_r>:
 800b2d0:	b570      	push	{r4, r5, r6, lr}
 800b2d2:	0004      	movs	r4, r0
 800b2d4:	0008      	movs	r0, r1
 800b2d6:	0011      	movs	r1, r2
 800b2d8:	001a      	movs	r2, r3
 800b2da:	2300      	movs	r3, #0
 800b2dc:	4d05      	ldr	r5, [pc, #20]	; (800b2f4 <_read_r+0x24>)
 800b2de:	602b      	str	r3, [r5, #0]
 800b2e0:	f7f9 f9a5 	bl	800462e <_read>
 800b2e4:	1c43      	adds	r3, r0, #1
 800b2e6:	d103      	bne.n	800b2f0 <_read_r+0x20>
 800b2e8:	682b      	ldr	r3, [r5, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d000      	beq.n	800b2f0 <_read_r+0x20>
 800b2ee:	6023      	str	r3, [r4, #0]
 800b2f0:	bd70      	pop	{r4, r5, r6, pc}
 800b2f2:	46c0      	nop			; (mov r8, r8)
 800b2f4:	200006c8 	.word	0x200006c8

0800b2f8 <_write_r>:
 800b2f8:	b570      	push	{r4, r5, r6, lr}
 800b2fa:	0004      	movs	r4, r0
 800b2fc:	0008      	movs	r0, r1
 800b2fe:	0011      	movs	r1, r2
 800b300:	001a      	movs	r2, r3
 800b302:	2300      	movs	r3, #0
 800b304:	4d05      	ldr	r5, [pc, #20]	; (800b31c <_write_r+0x24>)
 800b306:	602b      	str	r3, [r5, #0]
 800b308:	f7f9 f9ae 	bl	8004668 <_write>
 800b30c:	1c43      	adds	r3, r0, #1
 800b30e:	d103      	bne.n	800b318 <_write_r+0x20>
 800b310:	682b      	ldr	r3, [r5, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d000      	beq.n	800b318 <_write_r+0x20>
 800b316:	6023      	str	r3, [r4, #0]
 800b318:	bd70      	pop	{r4, r5, r6, pc}
 800b31a:	46c0      	nop			; (mov r8, r8)
 800b31c:	200006c8 	.word	0x200006c8

0800b320 <__errno>:
 800b320:	4b01      	ldr	r3, [pc, #4]	; (800b328 <__errno+0x8>)
 800b322:	6818      	ldr	r0, [r3, #0]
 800b324:	4770      	bx	lr
 800b326:	46c0      	nop			; (mov r8, r8)
 800b328:	2000007c 	.word	0x2000007c

0800b32c <__libc_init_array>:
 800b32c:	b570      	push	{r4, r5, r6, lr}
 800b32e:	2600      	movs	r6, #0
 800b330:	4c0c      	ldr	r4, [pc, #48]	; (800b364 <__libc_init_array+0x38>)
 800b332:	4d0d      	ldr	r5, [pc, #52]	; (800b368 <__libc_init_array+0x3c>)
 800b334:	1b64      	subs	r4, r4, r5
 800b336:	10a4      	asrs	r4, r4, #2
 800b338:	42a6      	cmp	r6, r4
 800b33a:	d109      	bne.n	800b350 <__libc_init_array+0x24>
 800b33c:	2600      	movs	r6, #0
 800b33e:	f003 fc71 	bl	800ec24 <_init>
 800b342:	4c0a      	ldr	r4, [pc, #40]	; (800b36c <__libc_init_array+0x40>)
 800b344:	4d0a      	ldr	r5, [pc, #40]	; (800b370 <__libc_init_array+0x44>)
 800b346:	1b64      	subs	r4, r4, r5
 800b348:	10a4      	asrs	r4, r4, #2
 800b34a:	42a6      	cmp	r6, r4
 800b34c:	d105      	bne.n	800b35a <__libc_init_array+0x2e>
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	00b3      	lsls	r3, r6, #2
 800b352:	58eb      	ldr	r3, [r5, r3]
 800b354:	4798      	blx	r3
 800b356:	3601      	adds	r6, #1
 800b358:	e7ee      	b.n	800b338 <__libc_init_array+0xc>
 800b35a:	00b3      	lsls	r3, r6, #2
 800b35c:	58eb      	ldr	r3, [r5, r3]
 800b35e:	4798      	blx	r3
 800b360:	3601      	adds	r6, #1
 800b362:	e7f2      	b.n	800b34a <__libc_init_array+0x1e>
 800b364:	0800f688 	.word	0x0800f688
 800b368:	0800f688 	.word	0x0800f688
 800b36c:	0800f68c 	.word	0x0800f68c
 800b370:	0800f688 	.word	0x0800f688

0800b374 <__retarget_lock_init_recursive>:
 800b374:	4770      	bx	lr

0800b376 <__retarget_lock_acquire_recursive>:
 800b376:	4770      	bx	lr

0800b378 <__retarget_lock_release_recursive>:
 800b378:	4770      	bx	lr

0800b37a <memchr>:
 800b37a:	b2c9      	uxtb	r1, r1
 800b37c:	1882      	adds	r2, r0, r2
 800b37e:	4290      	cmp	r0, r2
 800b380:	d101      	bne.n	800b386 <memchr+0xc>
 800b382:	2000      	movs	r0, #0
 800b384:	4770      	bx	lr
 800b386:	7803      	ldrb	r3, [r0, #0]
 800b388:	428b      	cmp	r3, r1
 800b38a:	d0fb      	beq.n	800b384 <memchr+0xa>
 800b38c:	3001      	adds	r0, #1
 800b38e:	e7f6      	b.n	800b37e <memchr+0x4>

0800b390 <nanf>:
 800b390:	4800      	ldr	r0, [pc, #0]	; (800b394 <nanf+0x4>)
 800b392:	4770      	bx	lr
 800b394:	7fc00000 	.word	0x7fc00000

0800b398 <quorem>:
 800b398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b39a:	6902      	ldr	r2, [r0, #16]
 800b39c:	690b      	ldr	r3, [r1, #16]
 800b39e:	b089      	sub	sp, #36	; 0x24
 800b3a0:	0007      	movs	r7, r0
 800b3a2:	9104      	str	r1, [sp, #16]
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	db69      	blt.n	800b47e <quorem+0xe6>
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	009c      	lsls	r4, r3, #2
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	000b      	movs	r3, r1
 800b3b2:	3314      	adds	r3, #20
 800b3b4:	9306      	str	r3, [sp, #24]
 800b3b6:	191b      	adds	r3, r3, r4
 800b3b8:	9305      	str	r3, [sp, #20]
 800b3ba:	003b      	movs	r3, r7
 800b3bc:	3314      	adds	r3, #20
 800b3be:	9303      	str	r3, [sp, #12]
 800b3c0:	191c      	adds	r4, r3, r4
 800b3c2:	9b05      	ldr	r3, [sp, #20]
 800b3c4:	6826      	ldr	r6, [r4, #0]
 800b3c6:	681d      	ldr	r5, [r3, #0]
 800b3c8:	0030      	movs	r0, r6
 800b3ca:	3501      	adds	r5, #1
 800b3cc:	0029      	movs	r1, r5
 800b3ce:	f7f4 feb7 	bl	8000140 <__udivsi3>
 800b3d2:	9002      	str	r0, [sp, #8]
 800b3d4:	42ae      	cmp	r6, r5
 800b3d6:	d329      	bcc.n	800b42c <quorem+0x94>
 800b3d8:	9b06      	ldr	r3, [sp, #24]
 800b3da:	2600      	movs	r6, #0
 800b3dc:	469c      	mov	ip, r3
 800b3de:	9d03      	ldr	r5, [sp, #12]
 800b3e0:	9606      	str	r6, [sp, #24]
 800b3e2:	4662      	mov	r2, ip
 800b3e4:	ca08      	ldmia	r2!, {r3}
 800b3e6:	6828      	ldr	r0, [r5, #0]
 800b3e8:	4694      	mov	ip, r2
 800b3ea:	9a02      	ldr	r2, [sp, #8]
 800b3ec:	b299      	uxth	r1, r3
 800b3ee:	4351      	muls	r1, r2
 800b3f0:	0c1b      	lsrs	r3, r3, #16
 800b3f2:	4353      	muls	r3, r2
 800b3f4:	1989      	adds	r1, r1, r6
 800b3f6:	0c0a      	lsrs	r2, r1, #16
 800b3f8:	189b      	adds	r3, r3, r2
 800b3fa:	9307      	str	r3, [sp, #28]
 800b3fc:	0c1e      	lsrs	r6, r3, #16
 800b3fe:	9b06      	ldr	r3, [sp, #24]
 800b400:	b282      	uxth	r2, r0
 800b402:	18d2      	adds	r2, r2, r3
 800b404:	466b      	mov	r3, sp
 800b406:	b289      	uxth	r1, r1
 800b408:	8b9b      	ldrh	r3, [r3, #28]
 800b40a:	1a52      	subs	r2, r2, r1
 800b40c:	0c01      	lsrs	r1, r0, #16
 800b40e:	1ac9      	subs	r1, r1, r3
 800b410:	1413      	asrs	r3, r2, #16
 800b412:	18cb      	adds	r3, r1, r3
 800b414:	1419      	asrs	r1, r3, #16
 800b416:	b292      	uxth	r2, r2
 800b418:	041b      	lsls	r3, r3, #16
 800b41a:	4313      	orrs	r3, r2
 800b41c:	c508      	stmia	r5!, {r3}
 800b41e:	9b05      	ldr	r3, [sp, #20]
 800b420:	9106      	str	r1, [sp, #24]
 800b422:	4563      	cmp	r3, ip
 800b424:	d2dd      	bcs.n	800b3e2 <quorem+0x4a>
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d030      	beq.n	800b48e <quorem+0xf6>
 800b42c:	0038      	movs	r0, r7
 800b42e:	9904      	ldr	r1, [sp, #16]
 800b430:	f001 fa2a 	bl	800c888 <__mcmp>
 800b434:	2800      	cmp	r0, #0
 800b436:	db21      	blt.n	800b47c <quorem+0xe4>
 800b438:	0038      	movs	r0, r7
 800b43a:	2600      	movs	r6, #0
 800b43c:	9b02      	ldr	r3, [sp, #8]
 800b43e:	9c04      	ldr	r4, [sp, #16]
 800b440:	3301      	adds	r3, #1
 800b442:	9302      	str	r3, [sp, #8]
 800b444:	3014      	adds	r0, #20
 800b446:	3414      	adds	r4, #20
 800b448:	6803      	ldr	r3, [r0, #0]
 800b44a:	cc02      	ldmia	r4!, {r1}
 800b44c:	b29d      	uxth	r5, r3
 800b44e:	19ad      	adds	r5, r5, r6
 800b450:	b28a      	uxth	r2, r1
 800b452:	1aaa      	subs	r2, r5, r2
 800b454:	0c09      	lsrs	r1, r1, #16
 800b456:	0c1b      	lsrs	r3, r3, #16
 800b458:	1a5b      	subs	r3, r3, r1
 800b45a:	1411      	asrs	r1, r2, #16
 800b45c:	185b      	adds	r3, r3, r1
 800b45e:	141e      	asrs	r6, r3, #16
 800b460:	b292      	uxth	r2, r2
 800b462:	041b      	lsls	r3, r3, #16
 800b464:	4313      	orrs	r3, r2
 800b466:	c008      	stmia	r0!, {r3}
 800b468:	9b05      	ldr	r3, [sp, #20]
 800b46a:	42a3      	cmp	r3, r4
 800b46c:	d2ec      	bcs.n	800b448 <quorem+0xb0>
 800b46e:	9b01      	ldr	r3, [sp, #4]
 800b470:	9a03      	ldr	r2, [sp, #12]
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	18d3      	adds	r3, r2, r3
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	2a00      	cmp	r2, #0
 800b47a:	d015      	beq.n	800b4a8 <quorem+0x110>
 800b47c:	9802      	ldr	r0, [sp, #8]
 800b47e:	b009      	add	sp, #36	; 0x24
 800b480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d106      	bne.n	800b496 <quorem+0xfe>
 800b488:	9b01      	ldr	r3, [sp, #4]
 800b48a:	3b01      	subs	r3, #1
 800b48c:	9301      	str	r3, [sp, #4]
 800b48e:	9b03      	ldr	r3, [sp, #12]
 800b490:	3c04      	subs	r4, #4
 800b492:	42a3      	cmp	r3, r4
 800b494:	d3f5      	bcc.n	800b482 <quorem+0xea>
 800b496:	9b01      	ldr	r3, [sp, #4]
 800b498:	613b      	str	r3, [r7, #16]
 800b49a:	e7c7      	b.n	800b42c <quorem+0x94>
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	2a00      	cmp	r2, #0
 800b4a0:	d106      	bne.n	800b4b0 <quorem+0x118>
 800b4a2:	9a01      	ldr	r2, [sp, #4]
 800b4a4:	3a01      	subs	r2, #1
 800b4a6:	9201      	str	r2, [sp, #4]
 800b4a8:	9a03      	ldr	r2, [sp, #12]
 800b4aa:	3b04      	subs	r3, #4
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d3f5      	bcc.n	800b49c <quorem+0x104>
 800b4b0:	9b01      	ldr	r3, [sp, #4]
 800b4b2:	613b      	str	r3, [r7, #16]
 800b4b4:	e7e2      	b.n	800b47c <quorem+0xe4>
	...

0800b4b8 <_dtoa_r>:
 800b4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ba:	0014      	movs	r4, r2
 800b4bc:	001d      	movs	r5, r3
 800b4be:	69c6      	ldr	r6, [r0, #28]
 800b4c0:	b09d      	sub	sp, #116	; 0x74
 800b4c2:	9408      	str	r4, [sp, #32]
 800b4c4:	9509      	str	r5, [sp, #36]	; 0x24
 800b4c6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800b4c8:	9004      	str	r0, [sp, #16]
 800b4ca:	2e00      	cmp	r6, #0
 800b4cc:	d10f      	bne.n	800b4ee <_dtoa_r+0x36>
 800b4ce:	2010      	movs	r0, #16
 800b4d0:	f000 fe4a 	bl	800c168 <malloc>
 800b4d4:	9b04      	ldr	r3, [sp, #16]
 800b4d6:	1e02      	subs	r2, r0, #0
 800b4d8:	61d8      	str	r0, [r3, #28]
 800b4da:	d104      	bne.n	800b4e6 <_dtoa_r+0x2e>
 800b4dc:	21ef      	movs	r1, #239	; 0xef
 800b4de:	4bc6      	ldr	r3, [pc, #792]	; (800b7f8 <_dtoa_r+0x340>)
 800b4e0:	48c6      	ldr	r0, [pc, #792]	; (800b7fc <_dtoa_r+0x344>)
 800b4e2:	f002 fccd 	bl	800de80 <__assert_func>
 800b4e6:	6046      	str	r6, [r0, #4]
 800b4e8:	6086      	str	r6, [r0, #8]
 800b4ea:	6006      	str	r6, [r0, #0]
 800b4ec:	60c6      	str	r6, [r0, #12]
 800b4ee:	9b04      	ldr	r3, [sp, #16]
 800b4f0:	69db      	ldr	r3, [r3, #28]
 800b4f2:	6819      	ldr	r1, [r3, #0]
 800b4f4:	2900      	cmp	r1, #0
 800b4f6:	d00b      	beq.n	800b510 <_dtoa_r+0x58>
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	4093      	lsls	r3, r2
 800b4fe:	604a      	str	r2, [r1, #4]
 800b500:	608b      	str	r3, [r1, #8]
 800b502:	9804      	ldr	r0, [sp, #16]
 800b504:	f000 ff32 	bl	800c36c <_Bfree>
 800b508:	2200      	movs	r2, #0
 800b50a:	9b04      	ldr	r3, [sp, #16]
 800b50c:	69db      	ldr	r3, [r3, #28]
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	2d00      	cmp	r5, #0
 800b512:	da1e      	bge.n	800b552 <_dtoa_r+0x9a>
 800b514:	2301      	movs	r3, #1
 800b516:	603b      	str	r3, [r7, #0]
 800b518:	006b      	lsls	r3, r5, #1
 800b51a:	085b      	lsrs	r3, r3, #1
 800b51c:	9309      	str	r3, [sp, #36]	; 0x24
 800b51e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b520:	4bb7      	ldr	r3, [pc, #732]	; (800b800 <_dtoa_r+0x348>)
 800b522:	4ab7      	ldr	r2, [pc, #732]	; (800b800 <_dtoa_r+0x348>)
 800b524:	403b      	ands	r3, r7
 800b526:	4293      	cmp	r3, r2
 800b528:	d116      	bne.n	800b558 <_dtoa_r+0xa0>
 800b52a:	4bb6      	ldr	r3, [pc, #728]	; (800b804 <_dtoa_r+0x34c>)
 800b52c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b52e:	6013      	str	r3, [r2, #0]
 800b530:	033b      	lsls	r3, r7, #12
 800b532:	0b1b      	lsrs	r3, r3, #12
 800b534:	4323      	orrs	r3, r4
 800b536:	d101      	bne.n	800b53c <_dtoa_r+0x84>
 800b538:	f000 fdb5 	bl	800c0a6 <_dtoa_r+0xbee>
 800b53c:	4bb2      	ldr	r3, [pc, #712]	; (800b808 <_dtoa_r+0x350>)
 800b53e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b540:	9306      	str	r3, [sp, #24]
 800b542:	2a00      	cmp	r2, #0
 800b544:	d002      	beq.n	800b54c <_dtoa_r+0x94>
 800b546:	4bb1      	ldr	r3, [pc, #708]	; (800b80c <_dtoa_r+0x354>)
 800b548:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	9806      	ldr	r0, [sp, #24]
 800b54e:	b01d      	add	sp, #116	; 0x74
 800b550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b552:	2300      	movs	r3, #0
 800b554:	603b      	str	r3, [r7, #0]
 800b556:	e7e2      	b.n	800b51e <_dtoa_r+0x66>
 800b558:	9a08      	ldr	r2, [sp, #32]
 800b55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b55c:	9210      	str	r2, [sp, #64]	; 0x40
 800b55e:	9311      	str	r3, [sp, #68]	; 0x44
 800b560:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b562:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b564:	2200      	movs	r2, #0
 800b566:	2300      	movs	r3, #0
 800b568:	f7f4 ff70 	bl	800044c <__aeabi_dcmpeq>
 800b56c:	1e06      	subs	r6, r0, #0
 800b56e:	d009      	beq.n	800b584 <_dtoa_r+0xcc>
 800b570:	2301      	movs	r3, #1
 800b572:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b574:	6013      	str	r3, [r2, #0]
 800b576:	4ba6      	ldr	r3, [pc, #664]	; (800b810 <_dtoa_r+0x358>)
 800b578:	9306      	str	r3, [sp, #24]
 800b57a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d0e5      	beq.n	800b54c <_dtoa_r+0x94>
 800b580:	4ba4      	ldr	r3, [pc, #656]	; (800b814 <_dtoa_r+0x35c>)
 800b582:	e7e1      	b.n	800b548 <_dtoa_r+0x90>
 800b584:	ab1a      	add	r3, sp, #104	; 0x68
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	ab1b      	add	r3, sp, #108	; 0x6c
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	9804      	ldr	r0, [sp, #16]
 800b58e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b592:	f001 fa95 	bl	800cac0 <__d2b>
 800b596:	007a      	lsls	r2, r7, #1
 800b598:	9005      	str	r0, [sp, #20]
 800b59a:	0d52      	lsrs	r2, r2, #21
 800b59c:	d100      	bne.n	800b5a0 <_dtoa_r+0xe8>
 800b59e:	e07b      	b.n	800b698 <_dtoa_r+0x1e0>
 800b5a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5a2:	9617      	str	r6, [sp, #92]	; 0x5c
 800b5a4:	0319      	lsls	r1, r3, #12
 800b5a6:	4b9c      	ldr	r3, [pc, #624]	; (800b818 <_dtoa_r+0x360>)
 800b5a8:	0b09      	lsrs	r1, r1, #12
 800b5aa:	430b      	orrs	r3, r1
 800b5ac:	499b      	ldr	r1, [pc, #620]	; (800b81c <_dtoa_r+0x364>)
 800b5ae:	1857      	adds	r7, r2, r1
 800b5b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b5b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b5b4:	0019      	movs	r1, r3
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	4b99      	ldr	r3, [pc, #612]	; (800b820 <_dtoa_r+0x368>)
 800b5ba:	f7f7 f80f 	bl	80025dc <__aeabi_dsub>
 800b5be:	4a99      	ldr	r2, [pc, #612]	; (800b824 <_dtoa_r+0x36c>)
 800b5c0:	4b99      	ldr	r3, [pc, #612]	; (800b828 <_dtoa_r+0x370>)
 800b5c2:	f7f6 fd49 	bl	8002058 <__aeabi_dmul>
 800b5c6:	4a99      	ldr	r2, [pc, #612]	; (800b82c <_dtoa_r+0x374>)
 800b5c8:	4b99      	ldr	r3, [pc, #612]	; (800b830 <_dtoa_r+0x378>)
 800b5ca:	f7f5 fdeb 	bl	80011a4 <__aeabi_dadd>
 800b5ce:	0004      	movs	r4, r0
 800b5d0:	0038      	movs	r0, r7
 800b5d2:	000d      	movs	r5, r1
 800b5d4:	f7f7 fbd8 	bl	8002d88 <__aeabi_i2d>
 800b5d8:	4a96      	ldr	r2, [pc, #600]	; (800b834 <_dtoa_r+0x37c>)
 800b5da:	4b97      	ldr	r3, [pc, #604]	; (800b838 <_dtoa_r+0x380>)
 800b5dc:	f7f6 fd3c 	bl	8002058 <__aeabi_dmul>
 800b5e0:	0002      	movs	r2, r0
 800b5e2:	000b      	movs	r3, r1
 800b5e4:	0020      	movs	r0, r4
 800b5e6:	0029      	movs	r1, r5
 800b5e8:	f7f5 fddc 	bl	80011a4 <__aeabi_dadd>
 800b5ec:	0004      	movs	r4, r0
 800b5ee:	000d      	movs	r5, r1
 800b5f0:	f7f7 fb94 	bl	8002d1c <__aeabi_d2iz>
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	9003      	str	r0, [sp, #12]
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	0020      	movs	r0, r4
 800b5fc:	0029      	movs	r1, r5
 800b5fe:	f7f4 ff2b 	bl	8000458 <__aeabi_dcmplt>
 800b602:	2800      	cmp	r0, #0
 800b604:	d00b      	beq.n	800b61e <_dtoa_r+0x166>
 800b606:	9803      	ldr	r0, [sp, #12]
 800b608:	f7f7 fbbe 	bl	8002d88 <__aeabi_i2d>
 800b60c:	002b      	movs	r3, r5
 800b60e:	0022      	movs	r2, r4
 800b610:	f7f4 ff1c 	bl	800044c <__aeabi_dcmpeq>
 800b614:	4243      	negs	r3, r0
 800b616:	4158      	adcs	r0, r3
 800b618:	9b03      	ldr	r3, [sp, #12]
 800b61a:	1a1b      	subs	r3, r3, r0
 800b61c:	9303      	str	r3, [sp, #12]
 800b61e:	2301      	movs	r3, #1
 800b620:	9316      	str	r3, [sp, #88]	; 0x58
 800b622:	9b03      	ldr	r3, [sp, #12]
 800b624:	2b16      	cmp	r3, #22
 800b626:	d810      	bhi.n	800b64a <_dtoa_r+0x192>
 800b628:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b62a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b62c:	9a03      	ldr	r2, [sp, #12]
 800b62e:	4b83      	ldr	r3, [pc, #524]	; (800b83c <_dtoa_r+0x384>)
 800b630:	00d2      	lsls	r2, r2, #3
 800b632:	189b      	adds	r3, r3, r2
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	f7f4 ff0e 	bl	8000458 <__aeabi_dcmplt>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d047      	beq.n	800b6d0 <_dtoa_r+0x218>
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	3b01      	subs	r3, #1
 800b644:	9303      	str	r3, [sp, #12]
 800b646:	2300      	movs	r3, #0
 800b648:	9316      	str	r3, [sp, #88]	; 0x58
 800b64a:	2200      	movs	r2, #0
 800b64c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b64e:	920a      	str	r2, [sp, #40]	; 0x28
 800b650:	1bdb      	subs	r3, r3, r7
 800b652:	1e5a      	subs	r2, r3, #1
 800b654:	d53e      	bpl.n	800b6d4 <_dtoa_r+0x21c>
 800b656:	2201      	movs	r2, #1
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	930a      	str	r3, [sp, #40]	; 0x28
 800b65c:	2300      	movs	r3, #0
 800b65e:	930c      	str	r3, [sp, #48]	; 0x30
 800b660:	9b03      	ldr	r3, [sp, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	db38      	blt.n	800b6d8 <_dtoa_r+0x220>
 800b666:	9a03      	ldr	r2, [sp, #12]
 800b668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b66a:	4694      	mov	ip, r2
 800b66c:	4463      	add	r3, ip
 800b66e:	930c      	str	r3, [sp, #48]	; 0x30
 800b670:	2300      	movs	r3, #0
 800b672:	9213      	str	r2, [sp, #76]	; 0x4c
 800b674:	930d      	str	r3, [sp, #52]	; 0x34
 800b676:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b678:	2401      	movs	r4, #1
 800b67a:	2b09      	cmp	r3, #9
 800b67c:	d867      	bhi.n	800b74e <_dtoa_r+0x296>
 800b67e:	2b05      	cmp	r3, #5
 800b680:	dd02      	ble.n	800b688 <_dtoa_r+0x1d0>
 800b682:	2400      	movs	r4, #0
 800b684:	3b04      	subs	r3, #4
 800b686:	9322      	str	r3, [sp, #136]	; 0x88
 800b688:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b68a:	1e98      	subs	r0, r3, #2
 800b68c:	2803      	cmp	r0, #3
 800b68e:	d867      	bhi.n	800b760 <_dtoa_r+0x2a8>
 800b690:	f7f4 fd42 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b694:	5b383a2b 	.word	0x5b383a2b
 800b698:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b69a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800b69c:	18f6      	adds	r6, r6, r3
 800b69e:	4b68      	ldr	r3, [pc, #416]	; (800b840 <_dtoa_r+0x388>)
 800b6a0:	18f2      	adds	r2, r6, r3
 800b6a2:	2a20      	cmp	r2, #32
 800b6a4:	dd0f      	ble.n	800b6c6 <_dtoa_r+0x20e>
 800b6a6:	2340      	movs	r3, #64	; 0x40
 800b6a8:	1a9b      	subs	r3, r3, r2
 800b6aa:	409f      	lsls	r7, r3
 800b6ac:	4b65      	ldr	r3, [pc, #404]	; (800b844 <_dtoa_r+0x38c>)
 800b6ae:	0038      	movs	r0, r7
 800b6b0:	18f3      	adds	r3, r6, r3
 800b6b2:	40dc      	lsrs	r4, r3
 800b6b4:	4320      	orrs	r0, r4
 800b6b6:	f7f7 fb97 	bl	8002de8 <__aeabi_ui2d>
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	4b62      	ldr	r3, [pc, #392]	; (800b848 <_dtoa_r+0x390>)
 800b6be:	1e77      	subs	r7, r6, #1
 800b6c0:	18cb      	adds	r3, r1, r3
 800b6c2:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6c4:	e776      	b.n	800b5b4 <_dtoa_r+0xfc>
 800b6c6:	2320      	movs	r3, #32
 800b6c8:	0020      	movs	r0, r4
 800b6ca:	1a9b      	subs	r3, r3, r2
 800b6cc:	4098      	lsls	r0, r3
 800b6ce:	e7f2      	b.n	800b6b6 <_dtoa_r+0x1fe>
 800b6d0:	9016      	str	r0, [sp, #88]	; 0x58
 800b6d2:	e7ba      	b.n	800b64a <_dtoa_r+0x192>
 800b6d4:	920c      	str	r2, [sp, #48]	; 0x30
 800b6d6:	e7c3      	b.n	800b660 <_dtoa_r+0x1a8>
 800b6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6da:	9a03      	ldr	r2, [sp, #12]
 800b6dc:	1a9b      	subs	r3, r3, r2
 800b6de:	930a      	str	r3, [sp, #40]	; 0x28
 800b6e0:	4253      	negs	r3, r2
 800b6e2:	930d      	str	r3, [sp, #52]	; 0x34
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9313      	str	r3, [sp, #76]	; 0x4c
 800b6e8:	e7c5      	b.n	800b676 <_dtoa_r+0x1be>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b6f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6f2:	9307      	str	r3, [sp, #28]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dc13      	bgt.n	800b720 <_dtoa_r+0x268>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	001a      	movs	r2, r3
 800b6fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6fe:	9307      	str	r3, [sp, #28]
 800b700:	9223      	str	r2, [sp, #140]	; 0x8c
 800b702:	e00d      	b.n	800b720 <_dtoa_r+0x268>
 800b704:	2301      	movs	r3, #1
 800b706:	e7f1      	b.n	800b6ec <_dtoa_r+0x234>
 800b708:	2300      	movs	r3, #0
 800b70a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b70c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b70e:	4694      	mov	ip, r2
 800b710:	9b03      	ldr	r3, [sp, #12]
 800b712:	4463      	add	r3, ip
 800b714:	930b      	str	r3, [sp, #44]	; 0x2c
 800b716:	3301      	adds	r3, #1
 800b718:	9307      	str	r3, [sp, #28]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dc00      	bgt.n	800b720 <_dtoa_r+0x268>
 800b71e:	2301      	movs	r3, #1
 800b720:	9a04      	ldr	r2, [sp, #16]
 800b722:	2100      	movs	r1, #0
 800b724:	69d0      	ldr	r0, [r2, #28]
 800b726:	2204      	movs	r2, #4
 800b728:	0015      	movs	r5, r2
 800b72a:	3514      	adds	r5, #20
 800b72c:	429d      	cmp	r5, r3
 800b72e:	d91b      	bls.n	800b768 <_dtoa_r+0x2b0>
 800b730:	6041      	str	r1, [r0, #4]
 800b732:	9804      	ldr	r0, [sp, #16]
 800b734:	f000 fdd6 	bl	800c2e4 <_Balloc>
 800b738:	9006      	str	r0, [sp, #24]
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d117      	bne.n	800b76e <_dtoa_r+0x2b6>
 800b73e:	21b0      	movs	r1, #176	; 0xb0
 800b740:	4b42      	ldr	r3, [pc, #264]	; (800b84c <_dtoa_r+0x394>)
 800b742:	482e      	ldr	r0, [pc, #184]	; (800b7fc <_dtoa_r+0x344>)
 800b744:	9a06      	ldr	r2, [sp, #24]
 800b746:	31ff      	adds	r1, #255	; 0xff
 800b748:	e6cb      	b.n	800b4e2 <_dtoa_r+0x2a>
 800b74a:	2301      	movs	r3, #1
 800b74c:	e7dd      	b.n	800b70a <_dtoa_r+0x252>
 800b74e:	2300      	movs	r3, #0
 800b750:	940f      	str	r4, [sp, #60]	; 0x3c
 800b752:	9322      	str	r3, [sp, #136]	; 0x88
 800b754:	3b01      	subs	r3, #1
 800b756:	930b      	str	r3, [sp, #44]	; 0x2c
 800b758:	9307      	str	r3, [sp, #28]
 800b75a:	2200      	movs	r2, #0
 800b75c:	3313      	adds	r3, #19
 800b75e:	e7cf      	b.n	800b700 <_dtoa_r+0x248>
 800b760:	2301      	movs	r3, #1
 800b762:	930f      	str	r3, [sp, #60]	; 0x3c
 800b764:	3b02      	subs	r3, #2
 800b766:	e7f6      	b.n	800b756 <_dtoa_r+0x29e>
 800b768:	3101      	adds	r1, #1
 800b76a:	0052      	lsls	r2, r2, #1
 800b76c:	e7dc      	b.n	800b728 <_dtoa_r+0x270>
 800b76e:	9b04      	ldr	r3, [sp, #16]
 800b770:	9a06      	ldr	r2, [sp, #24]
 800b772:	69db      	ldr	r3, [r3, #28]
 800b774:	601a      	str	r2, [r3, #0]
 800b776:	9b07      	ldr	r3, [sp, #28]
 800b778:	2b0e      	cmp	r3, #14
 800b77a:	d900      	bls.n	800b77e <_dtoa_r+0x2c6>
 800b77c:	e0e5      	b.n	800b94a <_dtoa_r+0x492>
 800b77e:	2c00      	cmp	r4, #0
 800b780:	d100      	bne.n	800b784 <_dtoa_r+0x2cc>
 800b782:	e0e2      	b.n	800b94a <_dtoa_r+0x492>
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	2b00      	cmp	r3, #0
 800b788:	dd64      	ble.n	800b854 <_dtoa_r+0x39c>
 800b78a:	210f      	movs	r1, #15
 800b78c:	9a03      	ldr	r2, [sp, #12]
 800b78e:	4b2b      	ldr	r3, [pc, #172]	; (800b83c <_dtoa_r+0x384>)
 800b790:	400a      	ands	r2, r1
 800b792:	00d2      	lsls	r2, r2, #3
 800b794:	189b      	adds	r3, r3, r2
 800b796:	681e      	ldr	r6, [r3, #0]
 800b798:	685f      	ldr	r7, [r3, #4]
 800b79a:	9b03      	ldr	r3, [sp, #12]
 800b79c:	2402      	movs	r4, #2
 800b79e:	111d      	asrs	r5, r3, #4
 800b7a0:	05db      	lsls	r3, r3, #23
 800b7a2:	d50a      	bpl.n	800b7ba <_dtoa_r+0x302>
 800b7a4:	4b2a      	ldr	r3, [pc, #168]	; (800b850 <_dtoa_r+0x398>)
 800b7a6:	400d      	ands	r5, r1
 800b7a8:	6a1a      	ldr	r2, [r3, #32]
 800b7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b7ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b7b0:	f7f6 f858 	bl	8001864 <__aeabi_ddiv>
 800b7b4:	9008      	str	r0, [sp, #32]
 800b7b6:	9109      	str	r1, [sp, #36]	; 0x24
 800b7b8:	3401      	adds	r4, #1
 800b7ba:	4b25      	ldr	r3, [pc, #148]	; (800b850 <_dtoa_r+0x398>)
 800b7bc:	930e      	str	r3, [sp, #56]	; 0x38
 800b7be:	2d00      	cmp	r5, #0
 800b7c0:	d108      	bne.n	800b7d4 <_dtoa_r+0x31c>
 800b7c2:	9808      	ldr	r0, [sp, #32]
 800b7c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7c6:	0032      	movs	r2, r6
 800b7c8:	003b      	movs	r3, r7
 800b7ca:	f7f6 f84b 	bl	8001864 <__aeabi_ddiv>
 800b7ce:	9008      	str	r0, [sp, #32]
 800b7d0:	9109      	str	r1, [sp, #36]	; 0x24
 800b7d2:	e05a      	b.n	800b88a <_dtoa_r+0x3d2>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	421d      	tst	r5, r3
 800b7d8:	d009      	beq.n	800b7ee <_dtoa_r+0x336>
 800b7da:	18e4      	adds	r4, r4, r3
 800b7dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7de:	0030      	movs	r0, r6
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	0039      	movs	r1, r7
 800b7e6:	f7f6 fc37 	bl	8002058 <__aeabi_dmul>
 800b7ea:	0006      	movs	r6, r0
 800b7ec:	000f      	movs	r7, r1
 800b7ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7f0:	106d      	asrs	r5, r5, #1
 800b7f2:	3308      	adds	r3, #8
 800b7f4:	e7e2      	b.n	800b7bc <_dtoa_r+0x304>
 800b7f6:	46c0      	nop			; (mov r8, r8)
 800b7f8:	0800f29a 	.word	0x0800f29a
 800b7fc:	0800f2b1 	.word	0x0800f2b1
 800b800:	7ff00000 	.word	0x7ff00000
 800b804:	0000270f 	.word	0x0000270f
 800b808:	0800f296 	.word	0x0800f296
 800b80c:	0800f299 	.word	0x0800f299
 800b810:	0800f264 	.word	0x0800f264
 800b814:	0800f265 	.word	0x0800f265
 800b818:	3ff00000 	.word	0x3ff00000
 800b81c:	fffffc01 	.word	0xfffffc01
 800b820:	3ff80000 	.word	0x3ff80000
 800b824:	636f4361 	.word	0x636f4361
 800b828:	3fd287a7 	.word	0x3fd287a7
 800b82c:	8b60c8b3 	.word	0x8b60c8b3
 800b830:	3fc68a28 	.word	0x3fc68a28
 800b834:	509f79fb 	.word	0x509f79fb
 800b838:	3fd34413 	.word	0x3fd34413
 800b83c:	0800f3a0 	.word	0x0800f3a0
 800b840:	00000432 	.word	0x00000432
 800b844:	00000412 	.word	0x00000412
 800b848:	fe100000 	.word	0xfe100000
 800b84c:	0800f309 	.word	0x0800f309
 800b850:	0800f378 	.word	0x0800f378
 800b854:	9b03      	ldr	r3, [sp, #12]
 800b856:	2402      	movs	r4, #2
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d016      	beq.n	800b88a <_dtoa_r+0x3d2>
 800b85c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b85e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b860:	220f      	movs	r2, #15
 800b862:	425d      	negs	r5, r3
 800b864:	402a      	ands	r2, r5
 800b866:	4bdd      	ldr	r3, [pc, #884]	; (800bbdc <_dtoa_r+0x724>)
 800b868:	00d2      	lsls	r2, r2, #3
 800b86a:	189b      	adds	r3, r3, r2
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	f7f6 fbf2 	bl	8002058 <__aeabi_dmul>
 800b874:	2701      	movs	r7, #1
 800b876:	2300      	movs	r3, #0
 800b878:	9008      	str	r0, [sp, #32]
 800b87a:	9109      	str	r1, [sp, #36]	; 0x24
 800b87c:	4ed8      	ldr	r6, [pc, #864]	; (800bbe0 <_dtoa_r+0x728>)
 800b87e:	112d      	asrs	r5, r5, #4
 800b880:	2d00      	cmp	r5, #0
 800b882:	d000      	beq.n	800b886 <_dtoa_r+0x3ce>
 800b884:	e091      	b.n	800b9aa <_dtoa_r+0x4f2>
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1a1      	bne.n	800b7ce <_dtoa_r+0x316>
 800b88a:	9e08      	ldr	r6, [sp, #32]
 800b88c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b88e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b890:	2b00      	cmp	r3, #0
 800b892:	d100      	bne.n	800b896 <_dtoa_r+0x3de>
 800b894:	e094      	b.n	800b9c0 <_dtoa_r+0x508>
 800b896:	2200      	movs	r2, #0
 800b898:	0030      	movs	r0, r6
 800b89a:	0039      	movs	r1, r7
 800b89c:	4bd1      	ldr	r3, [pc, #836]	; (800bbe4 <_dtoa_r+0x72c>)
 800b89e:	f7f4 fddb 	bl	8000458 <__aeabi_dcmplt>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d100      	bne.n	800b8a8 <_dtoa_r+0x3f0>
 800b8a6:	e08b      	b.n	800b9c0 <_dtoa_r+0x508>
 800b8a8:	9b07      	ldr	r3, [sp, #28]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d100      	bne.n	800b8b0 <_dtoa_r+0x3f8>
 800b8ae:	e087      	b.n	800b9c0 <_dtoa_r+0x508>
 800b8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	dd45      	ble.n	800b942 <_dtoa_r+0x48a>
 800b8b6:	9b03      	ldr	r3, [sp, #12]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	930e      	str	r3, [sp, #56]	; 0x38
 800b8be:	0030      	movs	r0, r6
 800b8c0:	4bc9      	ldr	r3, [pc, #804]	; (800bbe8 <_dtoa_r+0x730>)
 800b8c2:	0039      	movs	r1, r7
 800b8c4:	f7f6 fbc8 	bl	8002058 <__aeabi_dmul>
 800b8c8:	9008      	str	r0, [sp, #32]
 800b8ca:	9109      	str	r1, [sp, #36]	; 0x24
 800b8cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ce:	3401      	adds	r4, #1
 800b8d0:	0020      	movs	r0, r4
 800b8d2:	9e08      	ldr	r6, [sp, #32]
 800b8d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b8d6:	9312      	str	r3, [sp, #72]	; 0x48
 800b8d8:	f7f7 fa56 	bl	8002d88 <__aeabi_i2d>
 800b8dc:	0032      	movs	r2, r6
 800b8de:	003b      	movs	r3, r7
 800b8e0:	f7f6 fbba 	bl	8002058 <__aeabi_dmul>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4bc1      	ldr	r3, [pc, #772]	; (800bbec <_dtoa_r+0x734>)
 800b8e8:	f7f5 fc5c 	bl	80011a4 <__aeabi_dadd>
 800b8ec:	4ac0      	ldr	r2, [pc, #768]	; (800bbf0 <_dtoa_r+0x738>)
 800b8ee:	9014      	str	r0, [sp, #80]	; 0x50
 800b8f0:	9115      	str	r1, [sp, #84]	; 0x54
 800b8f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b8f6:	4694      	mov	ip, r2
 800b8f8:	9308      	str	r3, [sp, #32]
 800b8fa:	9409      	str	r4, [sp, #36]	; 0x24
 800b8fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8fe:	4463      	add	r3, ip
 800b900:	9318      	str	r3, [sp, #96]	; 0x60
 800b902:	9309      	str	r3, [sp, #36]	; 0x24
 800b904:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b906:	2b00      	cmp	r3, #0
 800b908:	d15e      	bne.n	800b9c8 <_dtoa_r+0x510>
 800b90a:	2200      	movs	r2, #0
 800b90c:	4bb9      	ldr	r3, [pc, #740]	; (800bbf4 <_dtoa_r+0x73c>)
 800b90e:	0030      	movs	r0, r6
 800b910:	0039      	movs	r1, r7
 800b912:	f7f6 fe63 	bl	80025dc <__aeabi_dsub>
 800b916:	9a08      	ldr	r2, [sp, #32]
 800b918:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b91a:	0004      	movs	r4, r0
 800b91c:	000d      	movs	r5, r1
 800b91e:	f7f4 fdaf 	bl	8000480 <__aeabi_dcmpgt>
 800b922:	2800      	cmp	r0, #0
 800b924:	d000      	beq.n	800b928 <_dtoa_r+0x470>
 800b926:	e2b3      	b.n	800be90 <_dtoa_r+0x9d8>
 800b928:	48b3      	ldr	r0, [pc, #716]	; (800bbf8 <_dtoa_r+0x740>)
 800b92a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b92c:	4684      	mov	ip, r0
 800b92e:	4461      	add	r1, ip
 800b930:	000b      	movs	r3, r1
 800b932:	0020      	movs	r0, r4
 800b934:	0029      	movs	r1, r5
 800b936:	9a08      	ldr	r2, [sp, #32]
 800b938:	f7f4 fd8e 	bl	8000458 <__aeabi_dcmplt>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d000      	beq.n	800b942 <_dtoa_r+0x48a>
 800b940:	e2a3      	b.n	800be8a <_dtoa_r+0x9d2>
 800b942:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b944:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b946:	9308      	str	r3, [sp, #32]
 800b948:	9409      	str	r4, [sp, #36]	; 0x24
 800b94a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	da00      	bge.n	800b952 <_dtoa_r+0x49a>
 800b950:	e179      	b.n	800bc46 <_dtoa_r+0x78e>
 800b952:	9a03      	ldr	r2, [sp, #12]
 800b954:	2a0e      	cmp	r2, #14
 800b956:	dd00      	ble.n	800b95a <_dtoa_r+0x4a2>
 800b958:	e175      	b.n	800bc46 <_dtoa_r+0x78e>
 800b95a:	4ba0      	ldr	r3, [pc, #640]	; (800bbdc <_dtoa_r+0x724>)
 800b95c:	00d2      	lsls	r2, r2, #3
 800b95e:	189b      	adds	r3, r3, r2
 800b960:	681e      	ldr	r6, [r3, #0]
 800b962:	685f      	ldr	r7, [r3, #4]
 800b964:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b966:	2b00      	cmp	r3, #0
 800b968:	db00      	blt.n	800b96c <_dtoa_r+0x4b4>
 800b96a:	e0e5      	b.n	800bb38 <_dtoa_r+0x680>
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	dd00      	ble.n	800b974 <_dtoa_r+0x4bc>
 800b972:	e0e1      	b.n	800bb38 <_dtoa_r+0x680>
 800b974:	d000      	beq.n	800b978 <_dtoa_r+0x4c0>
 800b976:	e288      	b.n	800be8a <_dtoa_r+0x9d2>
 800b978:	2200      	movs	r2, #0
 800b97a:	0030      	movs	r0, r6
 800b97c:	0039      	movs	r1, r7
 800b97e:	4b9d      	ldr	r3, [pc, #628]	; (800bbf4 <_dtoa_r+0x73c>)
 800b980:	f7f6 fb6a 	bl	8002058 <__aeabi_dmul>
 800b984:	9a08      	ldr	r2, [sp, #32]
 800b986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b988:	f7f4 fd84 	bl	8000494 <__aeabi_dcmpge>
 800b98c:	9e07      	ldr	r6, [sp, #28]
 800b98e:	0037      	movs	r7, r6
 800b990:	2800      	cmp	r0, #0
 800b992:	d000      	beq.n	800b996 <_dtoa_r+0x4de>
 800b994:	e25f      	b.n	800be56 <_dtoa_r+0x99e>
 800b996:	9b06      	ldr	r3, [sp, #24]
 800b998:	9a06      	ldr	r2, [sp, #24]
 800b99a:	3301      	adds	r3, #1
 800b99c:	9308      	str	r3, [sp, #32]
 800b99e:	2331      	movs	r3, #49	; 0x31
 800b9a0:	7013      	strb	r3, [r2, #0]
 800b9a2:	9b03      	ldr	r3, [sp, #12]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	9303      	str	r3, [sp, #12]
 800b9a8:	e25a      	b.n	800be60 <_dtoa_r+0x9a8>
 800b9aa:	423d      	tst	r5, r7
 800b9ac:	d005      	beq.n	800b9ba <_dtoa_r+0x502>
 800b9ae:	6832      	ldr	r2, [r6, #0]
 800b9b0:	6873      	ldr	r3, [r6, #4]
 800b9b2:	f7f6 fb51 	bl	8002058 <__aeabi_dmul>
 800b9b6:	003b      	movs	r3, r7
 800b9b8:	3401      	adds	r4, #1
 800b9ba:	106d      	asrs	r5, r5, #1
 800b9bc:	3608      	adds	r6, #8
 800b9be:	e75f      	b.n	800b880 <_dtoa_r+0x3c8>
 800b9c0:	9b03      	ldr	r3, [sp, #12]
 800b9c2:	930e      	str	r3, [sp, #56]	; 0x38
 800b9c4:	9b07      	ldr	r3, [sp, #28]
 800b9c6:	e783      	b.n	800b8d0 <_dtoa_r+0x418>
 800b9c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9ca:	4b84      	ldr	r3, [pc, #528]	; (800bbdc <_dtoa_r+0x724>)
 800b9cc:	3a01      	subs	r2, #1
 800b9ce:	00d2      	lsls	r2, r2, #3
 800b9d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b9d2:	189b      	adds	r3, r3, r2
 800b9d4:	9c08      	ldr	r4, [sp, #32]
 800b9d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	2900      	cmp	r1, #0
 800b9de:	d051      	beq.n	800ba84 <_dtoa_r+0x5cc>
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	4986      	ldr	r1, [pc, #536]	; (800bbfc <_dtoa_r+0x744>)
 800b9e4:	f7f5 ff3e 	bl	8001864 <__aeabi_ddiv>
 800b9e8:	0022      	movs	r2, r4
 800b9ea:	002b      	movs	r3, r5
 800b9ec:	f7f6 fdf6 	bl	80025dc <__aeabi_dsub>
 800b9f0:	9a06      	ldr	r2, [sp, #24]
 800b9f2:	0004      	movs	r4, r0
 800b9f4:	4694      	mov	ip, r2
 800b9f6:	000d      	movs	r5, r1
 800b9f8:	9b06      	ldr	r3, [sp, #24]
 800b9fa:	9314      	str	r3, [sp, #80]	; 0x50
 800b9fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b9fe:	4463      	add	r3, ip
 800ba00:	9318      	str	r3, [sp, #96]	; 0x60
 800ba02:	0039      	movs	r1, r7
 800ba04:	0030      	movs	r0, r6
 800ba06:	f7f7 f989 	bl	8002d1c <__aeabi_d2iz>
 800ba0a:	9012      	str	r0, [sp, #72]	; 0x48
 800ba0c:	f7f7 f9bc 	bl	8002d88 <__aeabi_i2d>
 800ba10:	0002      	movs	r2, r0
 800ba12:	000b      	movs	r3, r1
 800ba14:	0030      	movs	r0, r6
 800ba16:	0039      	movs	r1, r7
 800ba18:	f7f6 fde0 	bl	80025dc <__aeabi_dsub>
 800ba1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba20:	3301      	adds	r3, #1
 800ba22:	9308      	str	r3, [sp, #32]
 800ba24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba26:	0006      	movs	r6, r0
 800ba28:	3330      	adds	r3, #48	; 0x30
 800ba2a:	7013      	strb	r3, [r2, #0]
 800ba2c:	0022      	movs	r2, r4
 800ba2e:	002b      	movs	r3, r5
 800ba30:	000f      	movs	r7, r1
 800ba32:	f7f4 fd11 	bl	8000458 <__aeabi_dcmplt>
 800ba36:	2800      	cmp	r0, #0
 800ba38:	d174      	bne.n	800bb24 <_dtoa_r+0x66c>
 800ba3a:	0032      	movs	r2, r6
 800ba3c:	003b      	movs	r3, r7
 800ba3e:	2000      	movs	r0, #0
 800ba40:	4968      	ldr	r1, [pc, #416]	; (800bbe4 <_dtoa_r+0x72c>)
 800ba42:	f7f6 fdcb 	bl	80025dc <__aeabi_dsub>
 800ba46:	0022      	movs	r2, r4
 800ba48:	002b      	movs	r3, r5
 800ba4a:	f7f4 fd05 	bl	8000458 <__aeabi_dcmplt>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d000      	beq.n	800ba54 <_dtoa_r+0x59c>
 800ba52:	e0d7      	b.n	800bc04 <_dtoa_r+0x74c>
 800ba54:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ba56:	9a08      	ldr	r2, [sp, #32]
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d100      	bne.n	800ba5e <_dtoa_r+0x5a6>
 800ba5c:	e771      	b.n	800b942 <_dtoa_r+0x48a>
 800ba5e:	2200      	movs	r2, #0
 800ba60:	0020      	movs	r0, r4
 800ba62:	0029      	movs	r1, r5
 800ba64:	4b60      	ldr	r3, [pc, #384]	; (800bbe8 <_dtoa_r+0x730>)
 800ba66:	f7f6 faf7 	bl	8002058 <__aeabi_dmul>
 800ba6a:	4b5f      	ldr	r3, [pc, #380]	; (800bbe8 <_dtoa_r+0x730>)
 800ba6c:	0004      	movs	r4, r0
 800ba6e:	000d      	movs	r5, r1
 800ba70:	0030      	movs	r0, r6
 800ba72:	0039      	movs	r1, r7
 800ba74:	2200      	movs	r2, #0
 800ba76:	f7f6 faef 	bl	8002058 <__aeabi_dmul>
 800ba7a:	9b08      	ldr	r3, [sp, #32]
 800ba7c:	0006      	movs	r6, r0
 800ba7e:	000f      	movs	r7, r1
 800ba80:	9314      	str	r3, [sp, #80]	; 0x50
 800ba82:	e7be      	b.n	800ba02 <_dtoa_r+0x54a>
 800ba84:	0020      	movs	r0, r4
 800ba86:	0029      	movs	r1, r5
 800ba88:	f7f6 fae6 	bl	8002058 <__aeabi_dmul>
 800ba8c:	9a06      	ldr	r2, [sp, #24]
 800ba8e:	9b06      	ldr	r3, [sp, #24]
 800ba90:	4694      	mov	ip, r2
 800ba92:	9308      	str	r3, [sp, #32]
 800ba94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba96:	9014      	str	r0, [sp, #80]	; 0x50
 800ba98:	9115      	str	r1, [sp, #84]	; 0x54
 800ba9a:	4463      	add	r3, ip
 800ba9c:	9319      	str	r3, [sp, #100]	; 0x64
 800ba9e:	0030      	movs	r0, r6
 800baa0:	0039      	movs	r1, r7
 800baa2:	f7f7 f93b 	bl	8002d1c <__aeabi_d2iz>
 800baa6:	9018      	str	r0, [sp, #96]	; 0x60
 800baa8:	f7f7 f96e 	bl	8002d88 <__aeabi_i2d>
 800baac:	0002      	movs	r2, r0
 800baae:	000b      	movs	r3, r1
 800bab0:	0030      	movs	r0, r6
 800bab2:	0039      	movs	r1, r7
 800bab4:	f7f6 fd92 	bl	80025dc <__aeabi_dsub>
 800bab8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800baba:	9b08      	ldr	r3, [sp, #32]
 800babc:	3630      	adds	r6, #48	; 0x30
 800babe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bac0:	701e      	strb	r6, [r3, #0]
 800bac2:	3301      	adds	r3, #1
 800bac4:	0004      	movs	r4, r0
 800bac6:	000d      	movs	r5, r1
 800bac8:	9308      	str	r3, [sp, #32]
 800baca:	4293      	cmp	r3, r2
 800bacc:	d12d      	bne.n	800bb2a <_dtoa_r+0x672>
 800bace:	9814      	ldr	r0, [sp, #80]	; 0x50
 800bad0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bad2:	9a06      	ldr	r2, [sp, #24]
 800bad4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bad6:	4694      	mov	ip, r2
 800bad8:	4463      	add	r3, ip
 800bada:	2200      	movs	r2, #0
 800badc:	9308      	str	r3, [sp, #32]
 800bade:	4b47      	ldr	r3, [pc, #284]	; (800bbfc <_dtoa_r+0x744>)
 800bae0:	f7f5 fb60 	bl	80011a4 <__aeabi_dadd>
 800bae4:	0002      	movs	r2, r0
 800bae6:	000b      	movs	r3, r1
 800bae8:	0020      	movs	r0, r4
 800baea:	0029      	movs	r1, r5
 800baec:	f7f4 fcc8 	bl	8000480 <__aeabi_dcmpgt>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d000      	beq.n	800baf6 <_dtoa_r+0x63e>
 800baf4:	e086      	b.n	800bc04 <_dtoa_r+0x74c>
 800baf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800baf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bafa:	2000      	movs	r0, #0
 800bafc:	493f      	ldr	r1, [pc, #252]	; (800bbfc <_dtoa_r+0x744>)
 800bafe:	f7f6 fd6d 	bl	80025dc <__aeabi_dsub>
 800bb02:	0002      	movs	r2, r0
 800bb04:	000b      	movs	r3, r1
 800bb06:	0020      	movs	r0, r4
 800bb08:	0029      	movs	r1, r5
 800bb0a:	f7f4 fca5 	bl	8000458 <__aeabi_dcmplt>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d100      	bne.n	800bb14 <_dtoa_r+0x65c>
 800bb12:	e716      	b.n	800b942 <_dtoa_r+0x48a>
 800bb14:	9b08      	ldr	r3, [sp, #32]
 800bb16:	001a      	movs	r2, r3
 800bb18:	3a01      	subs	r2, #1
 800bb1a:	9208      	str	r2, [sp, #32]
 800bb1c:	7812      	ldrb	r2, [r2, #0]
 800bb1e:	2a30      	cmp	r2, #48	; 0x30
 800bb20:	d0f8      	beq.n	800bb14 <_dtoa_r+0x65c>
 800bb22:	9308      	str	r3, [sp, #32]
 800bb24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb26:	9303      	str	r3, [sp, #12]
 800bb28:	e046      	b.n	800bbb8 <_dtoa_r+0x700>
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	4b2e      	ldr	r3, [pc, #184]	; (800bbe8 <_dtoa_r+0x730>)
 800bb2e:	f7f6 fa93 	bl	8002058 <__aeabi_dmul>
 800bb32:	0006      	movs	r6, r0
 800bb34:	000f      	movs	r7, r1
 800bb36:	e7b2      	b.n	800ba9e <_dtoa_r+0x5e6>
 800bb38:	9b06      	ldr	r3, [sp, #24]
 800bb3a:	9a06      	ldr	r2, [sp, #24]
 800bb3c:	930a      	str	r3, [sp, #40]	; 0x28
 800bb3e:	9b07      	ldr	r3, [sp, #28]
 800bb40:	9c08      	ldr	r4, [sp, #32]
 800bb42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bb44:	3b01      	subs	r3, #1
 800bb46:	189b      	adds	r3, r3, r2
 800bb48:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb4a:	0032      	movs	r2, r6
 800bb4c:	003b      	movs	r3, r7
 800bb4e:	0020      	movs	r0, r4
 800bb50:	0029      	movs	r1, r5
 800bb52:	f7f5 fe87 	bl	8001864 <__aeabi_ddiv>
 800bb56:	f7f7 f8e1 	bl	8002d1c <__aeabi_d2iz>
 800bb5a:	9007      	str	r0, [sp, #28]
 800bb5c:	f7f7 f914 	bl	8002d88 <__aeabi_i2d>
 800bb60:	0032      	movs	r2, r6
 800bb62:	003b      	movs	r3, r7
 800bb64:	f7f6 fa78 	bl	8002058 <__aeabi_dmul>
 800bb68:	0002      	movs	r2, r0
 800bb6a:	000b      	movs	r3, r1
 800bb6c:	0020      	movs	r0, r4
 800bb6e:	0029      	movs	r1, r5
 800bb70:	f7f6 fd34 	bl	80025dc <__aeabi_dsub>
 800bb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb76:	001a      	movs	r2, r3
 800bb78:	3201      	adds	r2, #1
 800bb7a:	920a      	str	r2, [sp, #40]	; 0x28
 800bb7c:	9208      	str	r2, [sp, #32]
 800bb7e:	9a07      	ldr	r2, [sp, #28]
 800bb80:	3230      	adds	r2, #48	; 0x30
 800bb82:	701a      	strb	r2, [r3, #0]
 800bb84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d14f      	bne.n	800bc2a <_dtoa_r+0x772>
 800bb8a:	0002      	movs	r2, r0
 800bb8c:	000b      	movs	r3, r1
 800bb8e:	f7f5 fb09 	bl	80011a4 <__aeabi_dadd>
 800bb92:	0032      	movs	r2, r6
 800bb94:	003b      	movs	r3, r7
 800bb96:	0004      	movs	r4, r0
 800bb98:	000d      	movs	r5, r1
 800bb9a:	f7f4 fc71 	bl	8000480 <__aeabi_dcmpgt>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d12e      	bne.n	800bc00 <_dtoa_r+0x748>
 800bba2:	0032      	movs	r2, r6
 800bba4:	003b      	movs	r3, r7
 800bba6:	0020      	movs	r0, r4
 800bba8:	0029      	movs	r1, r5
 800bbaa:	f7f4 fc4f 	bl	800044c <__aeabi_dcmpeq>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d002      	beq.n	800bbb8 <_dtoa_r+0x700>
 800bbb2:	9b07      	ldr	r3, [sp, #28]
 800bbb4:	07de      	lsls	r6, r3, #31
 800bbb6:	d423      	bmi.n	800bc00 <_dtoa_r+0x748>
 800bbb8:	9905      	ldr	r1, [sp, #20]
 800bbba:	9804      	ldr	r0, [sp, #16]
 800bbbc:	f000 fbd6 	bl	800c36c <_Bfree>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	9a08      	ldr	r2, [sp, #32]
 800bbc4:	7013      	strb	r3, [r2, #0]
 800bbc6:	9b03      	ldr	r3, [sp, #12]
 800bbc8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bbca:	3301      	adds	r3, #1
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d100      	bne.n	800bbd6 <_dtoa_r+0x71e>
 800bbd4:	e4ba      	b.n	800b54c <_dtoa_r+0x94>
 800bbd6:	9a08      	ldr	r2, [sp, #32]
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	e4b7      	b.n	800b54c <_dtoa_r+0x94>
 800bbdc:	0800f3a0 	.word	0x0800f3a0
 800bbe0:	0800f378 	.word	0x0800f378
 800bbe4:	3ff00000 	.word	0x3ff00000
 800bbe8:	40240000 	.word	0x40240000
 800bbec:	401c0000 	.word	0x401c0000
 800bbf0:	fcc00000 	.word	0xfcc00000
 800bbf4:	40140000 	.word	0x40140000
 800bbf8:	7cc00000 	.word	0x7cc00000
 800bbfc:	3fe00000 	.word	0x3fe00000
 800bc00:	9b03      	ldr	r3, [sp, #12]
 800bc02:	930e      	str	r3, [sp, #56]	; 0x38
 800bc04:	9b08      	ldr	r3, [sp, #32]
 800bc06:	9308      	str	r3, [sp, #32]
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	781a      	ldrb	r2, [r3, #0]
 800bc0c:	2a39      	cmp	r2, #57	; 0x39
 800bc0e:	d108      	bne.n	800bc22 <_dtoa_r+0x76a>
 800bc10:	9a06      	ldr	r2, [sp, #24]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d1f7      	bne.n	800bc06 <_dtoa_r+0x74e>
 800bc16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc18:	9906      	ldr	r1, [sp, #24]
 800bc1a:	3201      	adds	r2, #1
 800bc1c:	920e      	str	r2, [sp, #56]	; 0x38
 800bc1e:	2230      	movs	r2, #48	; 0x30
 800bc20:	700a      	strb	r2, [r1, #0]
 800bc22:	781a      	ldrb	r2, [r3, #0]
 800bc24:	3201      	adds	r2, #1
 800bc26:	701a      	strb	r2, [r3, #0]
 800bc28:	e77c      	b.n	800bb24 <_dtoa_r+0x66c>
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	4ba9      	ldr	r3, [pc, #676]	; (800bed4 <_dtoa_r+0xa1c>)
 800bc2e:	f7f6 fa13 	bl	8002058 <__aeabi_dmul>
 800bc32:	2200      	movs	r2, #0
 800bc34:	2300      	movs	r3, #0
 800bc36:	0004      	movs	r4, r0
 800bc38:	000d      	movs	r5, r1
 800bc3a:	f7f4 fc07 	bl	800044c <__aeabi_dcmpeq>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d100      	bne.n	800bc44 <_dtoa_r+0x78c>
 800bc42:	e782      	b.n	800bb4a <_dtoa_r+0x692>
 800bc44:	e7b8      	b.n	800bbb8 <_dtoa_r+0x700>
 800bc46:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800bc48:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bc4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bc4c:	2f00      	cmp	r7, #0
 800bc4e:	d012      	beq.n	800bc76 <_dtoa_r+0x7be>
 800bc50:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bc52:	2a01      	cmp	r2, #1
 800bc54:	dc6e      	bgt.n	800bd34 <_dtoa_r+0x87c>
 800bc56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	d065      	beq.n	800bd28 <_dtoa_r+0x870>
 800bc5c:	4a9e      	ldr	r2, [pc, #632]	; (800bed8 <_dtoa_r+0xa20>)
 800bc5e:	189b      	adds	r3, r3, r2
 800bc60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc62:	2101      	movs	r1, #1
 800bc64:	18d2      	adds	r2, r2, r3
 800bc66:	920a      	str	r2, [sp, #40]	; 0x28
 800bc68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc6a:	9804      	ldr	r0, [sp, #16]
 800bc6c:	18d3      	adds	r3, r2, r3
 800bc6e:	930c      	str	r3, [sp, #48]	; 0x30
 800bc70:	f000 fc78 	bl	800c564 <__i2b>
 800bc74:	0007      	movs	r7, r0
 800bc76:	2c00      	cmp	r4, #0
 800bc78:	d00e      	beq.n	800bc98 <_dtoa_r+0x7e0>
 800bc7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dd0b      	ble.n	800bc98 <_dtoa_r+0x7e0>
 800bc80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc82:	0023      	movs	r3, r4
 800bc84:	4294      	cmp	r4, r2
 800bc86:	dd00      	ble.n	800bc8a <_dtoa_r+0x7d2>
 800bc88:	0013      	movs	r3, r2
 800bc8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc8c:	1ae4      	subs	r4, r4, r3
 800bc8e:	1ad2      	subs	r2, r2, r3
 800bc90:	920a      	str	r2, [sp, #40]	; 0x28
 800bc92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	930c      	str	r3, [sp, #48]	; 0x30
 800bc98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d01e      	beq.n	800bcdc <_dtoa_r+0x824>
 800bc9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d05c      	beq.n	800bd5e <_dtoa_r+0x8a6>
 800bca4:	2d00      	cmp	r5, #0
 800bca6:	dd10      	ble.n	800bcca <_dtoa_r+0x812>
 800bca8:	0039      	movs	r1, r7
 800bcaa:	002a      	movs	r2, r5
 800bcac:	9804      	ldr	r0, [sp, #16]
 800bcae:	f000 fd21 	bl	800c6f4 <__pow5mult>
 800bcb2:	9a05      	ldr	r2, [sp, #20]
 800bcb4:	0001      	movs	r1, r0
 800bcb6:	0007      	movs	r7, r0
 800bcb8:	9804      	ldr	r0, [sp, #16]
 800bcba:	f000 fc6b 	bl	800c594 <__multiply>
 800bcbe:	0006      	movs	r6, r0
 800bcc0:	9905      	ldr	r1, [sp, #20]
 800bcc2:	9804      	ldr	r0, [sp, #16]
 800bcc4:	f000 fb52 	bl	800c36c <_Bfree>
 800bcc8:	9605      	str	r6, [sp, #20]
 800bcca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bccc:	1b5a      	subs	r2, r3, r5
 800bcce:	42ab      	cmp	r3, r5
 800bcd0:	d004      	beq.n	800bcdc <_dtoa_r+0x824>
 800bcd2:	9905      	ldr	r1, [sp, #20]
 800bcd4:	9804      	ldr	r0, [sp, #16]
 800bcd6:	f000 fd0d 	bl	800c6f4 <__pow5mult>
 800bcda:	9005      	str	r0, [sp, #20]
 800bcdc:	2101      	movs	r1, #1
 800bcde:	9804      	ldr	r0, [sp, #16]
 800bce0:	f000 fc40 	bl	800c564 <__i2b>
 800bce4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bce6:	0006      	movs	r6, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	dd3a      	ble.n	800bd62 <_dtoa_r+0x8aa>
 800bcec:	001a      	movs	r2, r3
 800bcee:	0001      	movs	r1, r0
 800bcf0:	9804      	ldr	r0, [sp, #16]
 800bcf2:	f000 fcff 	bl	800c6f4 <__pow5mult>
 800bcf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bcf8:	0006      	movs	r6, r0
 800bcfa:	2500      	movs	r5, #0
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	dc38      	bgt.n	800bd72 <_dtoa_r+0x8ba>
 800bd00:	2500      	movs	r5, #0
 800bd02:	9b08      	ldr	r3, [sp, #32]
 800bd04:	42ab      	cmp	r3, r5
 800bd06:	d130      	bne.n	800bd6a <_dtoa_r+0x8b2>
 800bd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd0a:	031b      	lsls	r3, r3, #12
 800bd0c:	42ab      	cmp	r3, r5
 800bd0e:	d12c      	bne.n	800bd6a <_dtoa_r+0x8b2>
 800bd10:	4b72      	ldr	r3, [pc, #456]	; (800bedc <_dtoa_r+0xa24>)
 800bd12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd14:	4213      	tst	r3, r2
 800bd16:	d028      	beq.n	800bd6a <_dtoa_r+0x8b2>
 800bd18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd1a:	3501      	adds	r5, #1
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd22:	3301      	adds	r3, #1
 800bd24:	930c      	str	r3, [sp, #48]	; 0x30
 800bd26:	e020      	b.n	800bd6a <_dtoa_r+0x8b2>
 800bd28:	2336      	movs	r3, #54	; 0x36
 800bd2a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bd2c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bd2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bd30:	1a9b      	subs	r3, r3, r2
 800bd32:	e795      	b.n	800bc60 <_dtoa_r+0x7a8>
 800bd34:	9b07      	ldr	r3, [sp, #28]
 800bd36:	1e5d      	subs	r5, r3, #1
 800bd38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd3a:	42ab      	cmp	r3, r5
 800bd3c:	db07      	blt.n	800bd4e <_dtoa_r+0x896>
 800bd3e:	1b5d      	subs	r5, r3, r5
 800bd40:	9b07      	ldr	r3, [sp, #28]
 800bd42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	da8b      	bge.n	800bc60 <_dtoa_r+0x7a8>
 800bd48:	1ae4      	subs	r4, r4, r3
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e788      	b.n	800bc60 <_dtoa_r+0x7a8>
 800bd4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd52:	1aeb      	subs	r3, r5, r3
 800bd54:	18d3      	adds	r3, r2, r3
 800bd56:	950d      	str	r5, [sp, #52]	; 0x34
 800bd58:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd5a:	2500      	movs	r5, #0
 800bd5c:	e7f0      	b.n	800bd40 <_dtoa_r+0x888>
 800bd5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd60:	e7b7      	b.n	800bcd2 <_dtoa_r+0x81a>
 800bd62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd64:	2500      	movs	r5, #0
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	ddca      	ble.n	800bd00 <_dtoa_r+0x848>
 800bd6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd6c:	2001      	movs	r0, #1
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d008      	beq.n	800bd84 <_dtoa_r+0x8cc>
 800bd72:	6933      	ldr	r3, [r6, #16]
 800bd74:	3303      	adds	r3, #3
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	18f3      	adds	r3, r6, r3
 800bd7a:	6858      	ldr	r0, [r3, #4]
 800bd7c:	f000 fbaa 	bl	800c4d4 <__hi0bits>
 800bd80:	2320      	movs	r3, #32
 800bd82:	1a18      	subs	r0, r3, r0
 800bd84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd86:	1818      	adds	r0, r3, r0
 800bd88:	0002      	movs	r2, r0
 800bd8a:	231f      	movs	r3, #31
 800bd8c:	401a      	ands	r2, r3
 800bd8e:	4218      	tst	r0, r3
 800bd90:	d047      	beq.n	800be22 <_dtoa_r+0x96a>
 800bd92:	3301      	adds	r3, #1
 800bd94:	1a9b      	subs	r3, r3, r2
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	dd3f      	ble.n	800be1a <_dtoa_r+0x962>
 800bd9a:	231c      	movs	r3, #28
 800bd9c:	1a9b      	subs	r3, r3, r2
 800bd9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bda0:	18e4      	adds	r4, r4, r3
 800bda2:	18d2      	adds	r2, r2, r3
 800bda4:	920a      	str	r2, [sp, #40]	; 0x28
 800bda6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bda8:	18d3      	adds	r3, r2, r3
 800bdaa:	930c      	str	r3, [sp, #48]	; 0x30
 800bdac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	dd05      	ble.n	800bdbe <_dtoa_r+0x906>
 800bdb2:	001a      	movs	r2, r3
 800bdb4:	9905      	ldr	r1, [sp, #20]
 800bdb6:	9804      	ldr	r0, [sp, #16]
 800bdb8:	f000 fcf8 	bl	800c7ac <__lshift>
 800bdbc:	9005      	str	r0, [sp, #20]
 800bdbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	dd05      	ble.n	800bdd0 <_dtoa_r+0x918>
 800bdc4:	0031      	movs	r1, r6
 800bdc6:	001a      	movs	r2, r3
 800bdc8:	9804      	ldr	r0, [sp, #16]
 800bdca:	f000 fcef 	bl	800c7ac <__lshift>
 800bdce:	0006      	movs	r6, r0
 800bdd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d027      	beq.n	800be26 <_dtoa_r+0x96e>
 800bdd6:	0031      	movs	r1, r6
 800bdd8:	9805      	ldr	r0, [sp, #20]
 800bdda:	f000 fd55 	bl	800c888 <__mcmp>
 800bdde:	2800      	cmp	r0, #0
 800bde0:	da21      	bge.n	800be26 <_dtoa_r+0x96e>
 800bde2:	9b03      	ldr	r3, [sp, #12]
 800bde4:	220a      	movs	r2, #10
 800bde6:	3b01      	subs	r3, #1
 800bde8:	9303      	str	r3, [sp, #12]
 800bdea:	9905      	ldr	r1, [sp, #20]
 800bdec:	2300      	movs	r3, #0
 800bdee:	9804      	ldr	r0, [sp, #16]
 800bdf0:	f000 fae0 	bl	800c3b4 <__multadd>
 800bdf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdf6:	9005      	str	r0, [sp, #20]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d100      	bne.n	800bdfe <_dtoa_r+0x946>
 800bdfc:	e15d      	b.n	800c0ba <_dtoa_r+0xc02>
 800bdfe:	2300      	movs	r3, #0
 800be00:	0039      	movs	r1, r7
 800be02:	220a      	movs	r2, #10
 800be04:	9804      	ldr	r0, [sp, #16]
 800be06:	f000 fad5 	bl	800c3b4 <__multadd>
 800be0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be0c:	0007      	movs	r7, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	dc49      	bgt.n	800bea6 <_dtoa_r+0x9ee>
 800be12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be14:	2b02      	cmp	r3, #2
 800be16:	dc0e      	bgt.n	800be36 <_dtoa_r+0x97e>
 800be18:	e045      	b.n	800bea6 <_dtoa_r+0x9ee>
 800be1a:	2b04      	cmp	r3, #4
 800be1c:	d0c6      	beq.n	800bdac <_dtoa_r+0x8f4>
 800be1e:	331c      	adds	r3, #28
 800be20:	e7bd      	b.n	800bd9e <_dtoa_r+0x8e6>
 800be22:	0013      	movs	r3, r2
 800be24:	e7fb      	b.n	800be1e <_dtoa_r+0x966>
 800be26:	9b07      	ldr	r3, [sp, #28]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	dc36      	bgt.n	800be9a <_dtoa_r+0x9e2>
 800be2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be2e:	2b02      	cmp	r3, #2
 800be30:	dd33      	ble.n	800be9a <_dtoa_r+0x9e2>
 800be32:	9b07      	ldr	r3, [sp, #28]
 800be34:	930b      	str	r3, [sp, #44]	; 0x2c
 800be36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10c      	bne.n	800be56 <_dtoa_r+0x99e>
 800be3c:	0031      	movs	r1, r6
 800be3e:	2205      	movs	r2, #5
 800be40:	9804      	ldr	r0, [sp, #16]
 800be42:	f000 fab7 	bl	800c3b4 <__multadd>
 800be46:	0006      	movs	r6, r0
 800be48:	0001      	movs	r1, r0
 800be4a:	9805      	ldr	r0, [sp, #20]
 800be4c:	f000 fd1c 	bl	800c888 <__mcmp>
 800be50:	2800      	cmp	r0, #0
 800be52:	dd00      	ble.n	800be56 <_dtoa_r+0x99e>
 800be54:	e59f      	b.n	800b996 <_dtoa_r+0x4de>
 800be56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be58:	43db      	mvns	r3, r3
 800be5a:	9303      	str	r3, [sp, #12]
 800be5c:	9b06      	ldr	r3, [sp, #24]
 800be5e:	9308      	str	r3, [sp, #32]
 800be60:	2500      	movs	r5, #0
 800be62:	0031      	movs	r1, r6
 800be64:	9804      	ldr	r0, [sp, #16]
 800be66:	f000 fa81 	bl	800c36c <_Bfree>
 800be6a:	2f00      	cmp	r7, #0
 800be6c:	d100      	bne.n	800be70 <_dtoa_r+0x9b8>
 800be6e:	e6a3      	b.n	800bbb8 <_dtoa_r+0x700>
 800be70:	2d00      	cmp	r5, #0
 800be72:	d005      	beq.n	800be80 <_dtoa_r+0x9c8>
 800be74:	42bd      	cmp	r5, r7
 800be76:	d003      	beq.n	800be80 <_dtoa_r+0x9c8>
 800be78:	0029      	movs	r1, r5
 800be7a:	9804      	ldr	r0, [sp, #16]
 800be7c:	f000 fa76 	bl	800c36c <_Bfree>
 800be80:	0039      	movs	r1, r7
 800be82:	9804      	ldr	r0, [sp, #16]
 800be84:	f000 fa72 	bl	800c36c <_Bfree>
 800be88:	e696      	b.n	800bbb8 <_dtoa_r+0x700>
 800be8a:	2600      	movs	r6, #0
 800be8c:	0037      	movs	r7, r6
 800be8e:	e7e2      	b.n	800be56 <_dtoa_r+0x99e>
 800be90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be92:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800be94:	9303      	str	r3, [sp, #12]
 800be96:	0037      	movs	r7, r6
 800be98:	e57d      	b.n	800b996 <_dtoa_r+0x4de>
 800be9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d100      	bne.n	800bea2 <_dtoa_r+0x9ea>
 800bea0:	e0c3      	b.n	800c02a <_dtoa_r+0xb72>
 800bea2:	9b07      	ldr	r3, [sp, #28]
 800bea4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bea6:	2c00      	cmp	r4, #0
 800bea8:	dd05      	ble.n	800beb6 <_dtoa_r+0x9fe>
 800beaa:	0039      	movs	r1, r7
 800beac:	0022      	movs	r2, r4
 800beae:	9804      	ldr	r0, [sp, #16]
 800beb0:	f000 fc7c 	bl	800c7ac <__lshift>
 800beb4:	0007      	movs	r7, r0
 800beb6:	0038      	movs	r0, r7
 800beb8:	2d00      	cmp	r5, #0
 800beba:	d024      	beq.n	800bf06 <_dtoa_r+0xa4e>
 800bebc:	6879      	ldr	r1, [r7, #4]
 800bebe:	9804      	ldr	r0, [sp, #16]
 800bec0:	f000 fa10 	bl	800c2e4 <_Balloc>
 800bec4:	1e04      	subs	r4, r0, #0
 800bec6:	d111      	bne.n	800beec <_dtoa_r+0xa34>
 800bec8:	0022      	movs	r2, r4
 800beca:	4b05      	ldr	r3, [pc, #20]	; (800bee0 <_dtoa_r+0xa28>)
 800becc:	4805      	ldr	r0, [pc, #20]	; (800bee4 <_dtoa_r+0xa2c>)
 800bece:	4906      	ldr	r1, [pc, #24]	; (800bee8 <_dtoa_r+0xa30>)
 800bed0:	f7ff fb07 	bl	800b4e2 <_dtoa_r+0x2a>
 800bed4:	40240000 	.word	0x40240000
 800bed8:	00000433 	.word	0x00000433
 800bedc:	7ff00000 	.word	0x7ff00000
 800bee0:	0800f309 	.word	0x0800f309
 800bee4:	0800f2b1 	.word	0x0800f2b1
 800bee8:	000002ef 	.word	0x000002ef
 800beec:	0039      	movs	r1, r7
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	310c      	adds	r1, #12
 800bef2:	3202      	adds	r2, #2
 800bef4:	0092      	lsls	r2, r2, #2
 800bef6:	300c      	adds	r0, #12
 800bef8:	f001 ffb2 	bl	800de60 <memcpy>
 800befc:	2201      	movs	r2, #1
 800befe:	0021      	movs	r1, r4
 800bf00:	9804      	ldr	r0, [sp, #16]
 800bf02:	f000 fc53 	bl	800c7ac <__lshift>
 800bf06:	9b06      	ldr	r3, [sp, #24]
 800bf08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf0a:	9307      	str	r3, [sp, #28]
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	189b      	adds	r3, r3, r2
 800bf10:	2201      	movs	r2, #1
 800bf12:	003d      	movs	r5, r7
 800bf14:	0007      	movs	r7, r0
 800bf16:	930e      	str	r3, [sp, #56]	; 0x38
 800bf18:	9b08      	ldr	r3, [sp, #32]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	930d      	str	r3, [sp, #52]	; 0x34
 800bf1e:	0031      	movs	r1, r6
 800bf20:	9805      	ldr	r0, [sp, #20]
 800bf22:	f7ff fa39 	bl	800b398 <quorem>
 800bf26:	0029      	movs	r1, r5
 800bf28:	0004      	movs	r4, r0
 800bf2a:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf2c:	9805      	ldr	r0, [sp, #20]
 800bf2e:	f000 fcab 	bl	800c888 <__mcmp>
 800bf32:	003a      	movs	r2, r7
 800bf34:	900c      	str	r0, [sp, #48]	; 0x30
 800bf36:	0031      	movs	r1, r6
 800bf38:	9804      	ldr	r0, [sp, #16]
 800bf3a:	f000 fcc1 	bl	800c8c0 <__mdiff>
 800bf3e:	2201      	movs	r2, #1
 800bf40:	68c3      	ldr	r3, [r0, #12]
 800bf42:	3430      	adds	r4, #48	; 0x30
 800bf44:	9008      	str	r0, [sp, #32]
 800bf46:	920a      	str	r2, [sp, #40]	; 0x28
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d104      	bne.n	800bf56 <_dtoa_r+0xa9e>
 800bf4c:	0001      	movs	r1, r0
 800bf4e:	9805      	ldr	r0, [sp, #20]
 800bf50:	f000 fc9a 	bl	800c888 <__mcmp>
 800bf54:	900a      	str	r0, [sp, #40]	; 0x28
 800bf56:	9908      	ldr	r1, [sp, #32]
 800bf58:	9804      	ldr	r0, [sp, #16]
 800bf5a:	f000 fa07 	bl	800c36c <_Bfree>
 800bf5e:	9b07      	ldr	r3, [sp, #28]
 800bf60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf62:	3301      	adds	r3, #1
 800bf64:	9308      	str	r3, [sp, #32]
 800bf66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	d109      	bne.n	800bf84 <_dtoa_r+0xacc>
 800bf70:	2c39      	cmp	r4, #57	; 0x39
 800bf72:	d022      	beq.n	800bfba <_dtoa_r+0xb02>
 800bf74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	dd01      	ble.n	800bf7e <_dtoa_r+0xac6>
 800bf7a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bf7c:	3431      	adds	r4, #49	; 0x31
 800bf7e:	9b07      	ldr	r3, [sp, #28]
 800bf80:	701c      	strb	r4, [r3, #0]
 800bf82:	e76e      	b.n	800be62 <_dtoa_r+0x9aa>
 800bf84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	db04      	blt.n	800bf94 <_dtoa_r+0xadc>
 800bf8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf90:	4313      	orrs	r3, r2
 800bf92:	d11e      	bne.n	800bfd2 <_dtoa_r+0xb1a>
 800bf94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	ddf1      	ble.n	800bf7e <_dtoa_r+0xac6>
 800bf9a:	9905      	ldr	r1, [sp, #20]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	9804      	ldr	r0, [sp, #16]
 800bfa0:	f000 fc04 	bl	800c7ac <__lshift>
 800bfa4:	0031      	movs	r1, r6
 800bfa6:	9005      	str	r0, [sp, #20]
 800bfa8:	f000 fc6e 	bl	800c888 <__mcmp>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	dc02      	bgt.n	800bfb6 <_dtoa_r+0xafe>
 800bfb0:	d1e5      	bne.n	800bf7e <_dtoa_r+0xac6>
 800bfb2:	07e3      	lsls	r3, r4, #31
 800bfb4:	d5e3      	bpl.n	800bf7e <_dtoa_r+0xac6>
 800bfb6:	2c39      	cmp	r4, #57	; 0x39
 800bfb8:	d1df      	bne.n	800bf7a <_dtoa_r+0xac2>
 800bfba:	2339      	movs	r3, #57	; 0x39
 800bfbc:	9a07      	ldr	r2, [sp, #28]
 800bfbe:	7013      	strb	r3, [r2, #0]
 800bfc0:	9b08      	ldr	r3, [sp, #32]
 800bfc2:	9308      	str	r3, [sp, #32]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	781a      	ldrb	r2, [r3, #0]
 800bfc8:	2a39      	cmp	r2, #57	; 0x39
 800bfca:	d063      	beq.n	800c094 <_dtoa_r+0xbdc>
 800bfcc:	3201      	adds	r2, #1
 800bfce:	701a      	strb	r2, [r3, #0]
 800bfd0:	e747      	b.n	800be62 <_dtoa_r+0x9aa>
 800bfd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	dd03      	ble.n	800bfe0 <_dtoa_r+0xb28>
 800bfd8:	2c39      	cmp	r4, #57	; 0x39
 800bfda:	d0ee      	beq.n	800bfba <_dtoa_r+0xb02>
 800bfdc:	3401      	adds	r4, #1
 800bfde:	e7ce      	b.n	800bf7e <_dtoa_r+0xac6>
 800bfe0:	9b07      	ldr	r3, [sp, #28]
 800bfe2:	9a07      	ldr	r2, [sp, #28]
 800bfe4:	701c      	strb	r4, [r3, #0]
 800bfe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d03e      	beq.n	800c06a <_dtoa_r+0xbb2>
 800bfec:	2300      	movs	r3, #0
 800bfee:	220a      	movs	r2, #10
 800bff0:	9905      	ldr	r1, [sp, #20]
 800bff2:	9804      	ldr	r0, [sp, #16]
 800bff4:	f000 f9de 	bl	800c3b4 <__multadd>
 800bff8:	2300      	movs	r3, #0
 800bffa:	9005      	str	r0, [sp, #20]
 800bffc:	220a      	movs	r2, #10
 800bffe:	0029      	movs	r1, r5
 800c000:	9804      	ldr	r0, [sp, #16]
 800c002:	42bd      	cmp	r5, r7
 800c004:	d106      	bne.n	800c014 <_dtoa_r+0xb5c>
 800c006:	f000 f9d5 	bl	800c3b4 <__multadd>
 800c00a:	0005      	movs	r5, r0
 800c00c:	0007      	movs	r7, r0
 800c00e:	9b08      	ldr	r3, [sp, #32]
 800c010:	9307      	str	r3, [sp, #28]
 800c012:	e784      	b.n	800bf1e <_dtoa_r+0xa66>
 800c014:	f000 f9ce 	bl	800c3b4 <__multadd>
 800c018:	0039      	movs	r1, r7
 800c01a:	0005      	movs	r5, r0
 800c01c:	2300      	movs	r3, #0
 800c01e:	220a      	movs	r2, #10
 800c020:	9804      	ldr	r0, [sp, #16]
 800c022:	f000 f9c7 	bl	800c3b4 <__multadd>
 800c026:	0007      	movs	r7, r0
 800c028:	e7f1      	b.n	800c00e <_dtoa_r+0xb56>
 800c02a:	9b07      	ldr	r3, [sp, #28]
 800c02c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c02e:	2500      	movs	r5, #0
 800c030:	0031      	movs	r1, r6
 800c032:	9805      	ldr	r0, [sp, #20]
 800c034:	f7ff f9b0 	bl	800b398 <quorem>
 800c038:	9b06      	ldr	r3, [sp, #24]
 800c03a:	3030      	adds	r0, #48	; 0x30
 800c03c:	5558      	strb	r0, [r3, r5]
 800c03e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c040:	3501      	adds	r5, #1
 800c042:	0004      	movs	r4, r0
 800c044:	42ab      	cmp	r3, r5
 800c046:	dd07      	ble.n	800c058 <_dtoa_r+0xba0>
 800c048:	2300      	movs	r3, #0
 800c04a:	220a      	movs	r2, #10
 800c04c:	9905      	ldr	r1, [sp, #20]
 800c04e:	9804      	ldr	r0, [sp, #16]
 800c050:	f000 f9b0 	bl	800c3b4 <__multadd>
 800c054:	9005      	str	r0, [sp, #20]
 800c056:	e7eb      	b.n	800c030 <_dtoa_r+0xb78>
 800c058:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c05a:	2301      	movs	r3, #1
 800c05c:	2a00      	cmp	r2, #0
 800c05e:	dd00      	ble.n	800c062 <_dtoa_r+0xbaa>
 800c060:	0013      	movs	r3, r2
 800c062:	2500      	movs	r5, #0
 800c064:	9a06      	ldr	r2, [sp, #24]
 800c066:	18d3      	adds	r3, r2, r3
 800c068:	9308      	str	r3, [sp, #32]
 800c06a:	9905      	ldr	r1, [sp, #20]
 800c06c:	2201      	movs	r2, #1
 800c06e:	9804      	ldr	r0, [sp, #16]
 800c070:	f000 fb9c 	bl	800c7ac <__lshift>
 800c074:	0031      	movs	r1, r6
 800c076:	9005      	str	r0, [sp, #20]
 800c078:	f000 fc06 	bl	800c888 <__mcmp>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	dc9f      	bgt.n	800bfc0 <_dtoa_r+0xb08>
 800c080:	d101      	bne.n	800c086 <_dtoa_r+0xbce>
 800c082:	07e4      	lsls	r4, r4, #31
 800c084:	d49c      	bmi.n	800bfc0 <_dtoa_r+0xb08>
 800c086:	9b08      	ldr	r3, [sp, #32]
 800c088:	9308      	str	r3, [sp, #32]
 800c08a:	3b01      	subs	r3, #1
 800c08c:	781a      	ldrb	r2, [r3, #0]
 800c08e:	2a30      	cmp	r2, #48	; 0x30
 800c090:	d0fa      	beq.n	800c088 <_dtoa_r+0xbd0>
 800c092:	e6e6      	b.n	800be62 <_dtoa_r+0x9aa>
 800c094:	9a06      	ldr	r2, [sp, #24]
 800c096:	429a      	cmp	r2, r3
 800c098:	d193      	bne.n	800bfc2 <_dtoa_r+0xb0a>
 800c09a:	9b03      	ldr	r3, [sp, #12]
 800c09c:	3301      	adds	r3, #1
 800c09e:	9303      	str	r3, [sp, #12]
 800c0a0:	2331      	movs	r3, #49	; 0x31
 800c0a2:	7013      	strb	r3, [r2, #0]
 800c0a4:	e6dd      	b.n	800be62 <_dtoa_r+0x9aa>
 800c0a6:	4b09      	ldr	r3, [pc, #36]	; (800c0cc <_dtoa_r+0xc14>)
 800c0a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c0aa:	9306      	str	r3, [sp, #24]
 800c0ac:	4b08      	ldr	r3, [pc, #32]	; (800c0d0 <_dtoa_r+0xc18>)
 800c0ae:	2a00      	cmp	r2, #0
 800c0b0:	d001      	beq.n	800c0b6 <_dtoa_r+0xbfe>
 800c0b2:	f7ff fa49 	bl	800b548 <_dtoa_r+0x90>
 800c0b6:	f7ff fa49 	bl	800b54c <_dtoa_r+0x94>
 800c0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dcb6      	bgt.n	800c02e <_dtoa_r+0xb76>
 800c0c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	dd00      	ble.n	800c0c8 <_dtoa_r+0xc10>
 800c0c6:	e6b6      	b.n	800be36 <_dtoa_r+0x97e>
 800c0c8:	e7b1      	b.n	800c02e <_dtoa_r+0xb76>
 800c0ca:	46c0      	nop			; (mov r8, r8)
 800c0cc:	0800f28d 	.word	0x0800f28d
 800c0d0:	0800f295 	.word	0x0800f295

0800c0d4 <_free_r>:
 800c0d4:	b570      	push	{r4, r5, r6, lr}
 800c0d6:	0005      	movs	r5, r0
 800c0d8:	2900      	cmp	r1, #0
 800c0da:	d010      	beq.n	800c0fe <_free_r+0x2a>
 800c0dc:	1f0c      	subs	r4, r1, #4
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	da00      	bge.n	800c0e6 <_free_r+0x12>
 800c0e4:	18e4      	adds	r4, r4, r3
 800c0e6:	0028      	movs	r0, r5
 800c0e8:	f000 f8ec 	bl	800c2c4 <__malloc_lock>
 800c0ec:	4a1d      	ldr	r2, [pc, #116]	; (800c164 <_free_r+0x90>)
 800c0ee:	6813      	ldr	r3, [r2, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d105      	bne.n	800c100 <_free_r+0x2c>
 800c0f4:	6063      	str	r3, [r4, #4]
 800c0f6:	6014      	str	r4, [r2, #0]
 800c0f8:	0028      	movs	r0, r5
 800c0fa:	f000 f8eb 	bl	800c2d4 <__malloc_unlock>
 800c0fe:	bd70      	pop	{r4, r5, r6, pc}
 800c100:	42a3      	cmp	r3, r4
 800c102:	d908      	bls.n	800c116 <_free_r+0x42>
 800c104:	6820      	ldr	r0, [r4, #0]
 800c106:	1821      	adds	r1, r4, r0
 800c108:	428b      	cmp	r3, r1
 800c10a:	d1f3      	bne.n	800c0f4 <_free_r+0x20>
 800c10c:	6819      	ldr	r1, [r3, #0]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	1809      	adds	r1, r1, r0
 800c112:	6021      	str	r1, [r4, #0]
 800c114:	e7ee      	b.n	800c0f4 <_free_r+0x20>
 800c116:	001a      	movs	r2, r3
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d001      	beq.n	800c122 <_free_r+0x4e>
 800c11e:	42a3      	cmp	r3, r4
 800c120:	d9f9      	bls.n	800c116 <_free_r+0x42>
 800c122:	6811      	ldr	r1, [r2, #0]
 800c124:	1850      	adds	r0, r2, r1
 800c126:	42a0      	cmp	r0, r4
 800c128:	d10b      	bne.n	800c142 <_free_r+0x6e>
 800c12a:	6820      	ldr	r0, [r4, #0]
 800c12c:	1809      	adds	r1, r1, r0
 800c12e:	1850      	adds	r0, r2, r1
 800c130:	6011      	str	r1, [r2, #0]
 800c132:	4283      	cmp	r3, r0
 800c134:	d1e0      	bne.n	800c0f8 <_free_r+0x24>
 800c136:	6818      	ldr	r0, [r3, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	1841      	adds	r1, r0, r1
 800c13c:	6011      	str	r1, [r2, #0]
 800c13e:	6053      	str	r3, [r2, #4]
 800c140:	e7da      	b.n	800c0f8 <_free_r+0x24>
 800c142:	42a0      	cmp	r0, r4
 800c144:	d902      	bls.n	800c14c <_free_r+0x78>
 800c146:	230c      	movs	r3, #12
 800c148:	602b      	str	r3, [r5, #0]
 800c14a:	e7d5      	b.n	800c0f8 <_free_r+0x24>
 800c14c:	6820      	ldr	r0, [r4, #0]
 800c14e:	1821      	adds	r1, r4, r0
 800c150:	428b      	cmp	r3, r1
 800c152:	d103      	bne.n	800c15c <_free_r+0x88>
 800c154:	6819      	ldr	r1, [r3, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	1809      	adds	r1, r1, r0
 800c15a:	6021      	str	r1, [r4, #0]
 800c15c:	6063      	str	r3, [r4, #4]
 800c15e:	6054      	str	r4, [r2, #4]
 800c160:	e7ca      	b.n	800c0f8 <_free_r+0x24>
 800c162:	46c0      	nop			; (mov r8, r8)
 800c164:	200006d0 	.word	0x200006d0

0800c168 <malloc>:
 800c168:	b510      	push	{r4, lr}
 800c16a:	4b03      	ldr	r3, [pc, #12]	; (800c178 <malloc+0x10>)
 800c16c:	0001      	movs	r1, r0
 800c16e:	6818      	ldr	r0, [r3, #0]
 800c170:	f000 f826 	bl	800c1c0 <_malloc_r>
 800c174:	bd10      	pop	{r4, pc}
 800c176:	46c0      	nop			; (mov r8, r8)
 800c178:	2000007c 	.word	0x2000007c

0800c17c <sbrk_aligned>:
 800c17c:	b570      	push	{r4, r5, r6, lr}
 800c17e:	4e0f      	ldr	r6, [pc, #60]	; (800c1bc <sbrk_aligned+0x40>)
 800c180:	000d      	movs	r5, r1
 800c182:	6831      	ldr	r1, [r6, #0]
 800c184:	0004      	movs	r4, r0
 800c186:	2900      	cmp	r1, #0
 800c188:	d102      	bne.n	800c190 <sbrk_aligned+0x14>
 800c18a:	f001 fe57 	bl	800de3c <_sbrk_r>
 800c18e:	6030      	str	r0, [r6, #0]
 800c190:	0029      	movs	r1, r5
 800c192:	0020      	movs	r0, r4
 800c194:	f001 fe52 	bl	800de3c <_sbrk_r>
 800c198:	1c43      	adds	r3, r0, #1
 800c19a:	d00a      	beq.n	800c1b2 <sbrk_aligned+0x36>
 800c19c:	2303      	movs	r3, #3
 800c19e:	1cc5      	adds	r5, r0, #3
 800c1a0:	439d      	bics	r5, r3
 800c1a2:	42a8      	cmp	r0, r5
 800c1a4:	d007      	beq.n	800c1b6 <sbrk_aligned+0x3a>
 800c1a6:	1a29      	subs	r1, r5, r0
 800c1a8:	0020      	movs	r0, r4
 800c1aa:	f001 fe47 	bl	800de3c <_sbrk_r>
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	d101      	bne.n	800c1b6 <sbrk_aligned+0x3a>
 800c1b2:	2501      	movs	r5, #1
 800c1b4:	426d      	negs	r5, r5
 800c1b6:	0028      	movs	r0, r5
 800c1b8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ba:	46c0      	nop			; (mov r8, r8)
 800c1bc:	200006d4 	.word	0x200006d4

0800c1c0 <_malloc_r>:
 800c1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1c2:	2203      	movs	r2, #3
 800c1c4:	1ccb      	adds	r3, r1, #3
 800c1c6:	4393      	bics	r3, r2
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	0006      	movs	r6, r0
 800c1cc:	001f      	movs	r7, r3
 800c1ce:	2b0c      	cmp	r3, #12
 800c1d0:	d238      	bcs.n	800c244 <_malloc_r+0x84>
 800c1d2:	270c      	movs	r7, #12
 800c1d4:	42b9      	cmp	r1, r7
 800c1d6:	d837      	bhi.n	800c248 <_malloc_r+0x88>
 800c1d8:	0030      	movs	r0, r6
 800c1da:	f000 f873 	bl	800c2c4 <__malloc_lock>
 800c1de:	4b38      	ldr	r3, [pc, #224]	; (800c2c0 <_malloc_r+0x100>)
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	001c      	movs	r4, r3
 800c1e6:	2c00      	cmp	r4, #0
 800c1e8:	d133      	bne.n	800c252 <_malloc_r+0x92>
 800c1ea:	0039      	movs	r1, r7
 800c1ec:	0030      	movs	r0, r6
 800c1ee:	f7ff ffc5 	bl	800c17c <sbrk_aligned>
 800c1f2:	0004      	movs	r4, r0
 800c1f4:	1c43      	adds	r3, r0, #1
 800c1f6:	d15e      	bne.n	800c2b6 <_malloc_r+0xf6>
 800c1f8:	9b00      	ldr	r3, [sp, #0]
 800c1fa:	681c      	ldr	r4, [r3, #0]
 800c1fc:	0025      	movs	r5, r4
 800c1fe:	2d00      	cmp	r5, #0
 800c200:	d14e      	bne.n	800c2a0 <_malloc_r+0xe0>
 800c202:	2c00      	cmp	r4, #0
 800c204:	d051      	beq.n	800c2aa <_malloc_r+0xea>
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	0029      	movs	r1, r5
 800c20a:	18e3      	adds	r3, r4, r3
 800c20c:	0030      	movs	r0, r6
 800c20e:	9301      	str	r3, [sp, #4]
 800c210:	f001 fe14 	bl	800de3c <_sbrk_r>
 800c214:	9b01      	ldr	r3, [sp, #4]
 800c216:	4283      	cmp	r3, r0
 800c218:	d147      	bne.n	800c2aa <_malloc_r+0xea>
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	0030      	movs	r0, r6
 800c21e:	1aff      	subs	r7, r7, r3
 800c220:	0039      	movs	r1, r7
 800c222:	f7ff ffab 	bl	800c17c <sbrk_aligned>
 800c226:	3001      	adds	r0, #1
 800c228:	d03f      	beq.n	800c2aa <_malloc_r+0xea>
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	19db      	adds	r3, r3, r7
 800c22e:	6023      	str	r3, [r4, #0]
 800c230:	9b00      	ldr	r3, [sp, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d040      	beq.n	800c2ba <_malloc_r+0xfa>
 800c238:	685a      	ldr	r2, [r3, #4]
 800c23a:	42a2      	cmp	r2, r4
 800c23c:	d133      	bne.n	800c2a6 <_malloc_r+0xe6>
 800c23e:	2200      	movs	r2, #0
 800c240:	605a      	str	r2, [r3, #4]
 800c242:	e014      	b.n	800c26e <_malloc_r+0xae>
 800c244:	2b00      	cmp	r3, #0
 800c246:	dac5      	bge.n	800c1d4 <_malloc_r+0x14>
 800c248:	230c      	movs	r3, #12
 800c24a:	2500      	movs	r5, #0
 800c24c:	6033      	str	r3, [r6, #0]
 800c24e:	0028      	movs	r0, r5
 800c250:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c252:	6821      	ldr	r1, [r4, #0]
 800c254:	1bc9      	subs	r1, r1, r7
 800c256:	d420      	bmi.n	800c29a <_malloc_r+0xda>
 800c258:	290b      	cmp	r1, #11
 800c25a:	d918      	bls.n	800c28e <_malloc_r+0xce>
 800c25c:	19e2      	adds	r2, r4, r7
 800c25e:	6027      	str	r7, [r4, #0]
 800c260:	42a3      	cmp	r3, r4
 800c262:	d112      	bne.n	800c28a <_malloc_r+0xca>
 800c264:	9b00      	ldr	r3, [sp, #0]
 800c266:	601a      	str	r2, [r3, #0]
 800c268:	6863      	ldr	r3, [r4, #4]
 800c26a:	6011      	str	r1, [r2, #0]
 800c26c:	6053      	str	r3, [r2, #4]
 800c26e:	0030      	movs	r0, r6
 800c270:	0025      	movs	r5, r4
 800c272:	f000 f82f 	bl	800c2d4 <__malloc_unlock>
 800c276:	2207      	movs	r2, #7
 800c278:	350b      	adds	r5, #11
 800c27a:	1d23      	adds	r3, r4, #4
 800c27c:	4395      	bics	r5, r2
 800c27e:	1aea      	subs	r2, r5, r3
 800c280:	429d      	cmp	r5, r3
 800c282:	d0e4      	beq.n	800c24e <_malloc_r+0x8e>
 800c284:	1b5b      	subs	r3, r3, r5
 800c286:	50a3      	str	r3, [r4, r2]
 800c288:	e7e1      	b.n	800c24e <_malloc_r+0x8e>
 800c28a:	605a      	str	r2, [r3, #4]
 800c28c:	e7ec      	b.n	800c268 <_malloc_r+0xa8>
 800c28e:	6862      	ldr	r2, [r4, #4]
 800c290:	42a3      	cmp	r3, r4
 800c292:	d1d5      	bne.n	800c240 <_malloc_r+0x80>
 800c294:	9b00      	ldr	r3, [sp, #0]
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	e7e9      	b.n	800c26e <_malloc_r+0xae>
 800c29a:	0023      	movs	r3, r4
 800c29c:	6864      	ldr	r4, [r4, #4]
 800c29e:	e7a2      	b.n	800c1e6 <_malloc_r+0x26>
 800c2a0:	002c      	movs	r4, r5
 800c2a2:	686d      	ldr	r5, [r5, #4]
 800c2a4:	e7ab      	b.n	800c1fe <_malloc_r+0x3e>
 800c2a6:	0013      	movs	r3, r2
 800c2a8:	e7c4      	b.n	800c234 <_malloc_r+0x74>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	0030      	movs	r0, r6
 800c2ae:	6033      	str	r3, [r6, #0]
 800c2b0:	f000 f810 	bl	800c2d4 <__malloc_unlock>
 800c2b4:	e7cb      	b.n	800c24e <_malloc_r+0x8e>
 800c2b6:	6027      	str	r7, [r4, #0]
 800c2b8:	e7d9      	b.n	800c26e <_malloc_r+0xae>
 800c2ba:	605b      	str	r3, [r3, #4]
 800c2bc:	deff      	udf	#255	; 0xff
 800c2be:	46c0      	nop			; (mov r8, r8)
 800c2c0:	200006d0 	.word	0x200006d0

0800c2c4 <__malloc_lock>:
 800c2c4:	b510      	push	{r4, lr}
 800c2c6:	4802      	ldr	r0, [pc, #8]	; (800c2d0 <__malloc_lock+0xc>)
 800c2c8:	f7ff f855 	bl	800b376 <__retarget_lock_acquire_recursive>
 800c2cc:	bd10      	pop	{r4, pc}
 800c2ce:	46c0      	nop			; (mov r8, r8)
 800c2d0:	200006cc 	.word	0x200006cc

0800c2d4 <__malloc_unlock>:
 800c2d4:	b510      	push	{r4, lr}
 800c2d6:	4802      	ldr	r0, [pc, #8]	; (800c2e0 <__malloc_unlock+0xc>)
 800c2d8:	f7ff f84e 	bl	800b378 <__retarget_lock_release_recursive>
 800c2dc:	bd10      	pop	{r4, pc}
 800c2de:	46c0      	nop			; (mov r8, r8)
 800c2e0:	200006cc 	.word	0x200006cc

0800c2e4 <_Balloc>:
 800c2e4:	b570      	push	{r4, r5, r6, lr}
 800c2e6:	69c5      	ldr	r5, [r0, #28]
 800c2e8:	0006      	movs	r6, r0
 800c2ea:	000c      	movs	r4, r1
 800c2ec:	2d00      	cmp	r5, #0
 800c2ee:	d10e      	bne.n	800c30e <_Balloc+0x2a>
 800c2f0:	2010      	movs	r0, #16
 800c2f2:	f7ff ff39 	bl	800c168 <malloc>
 800c2f6:	1e02      	subs	r2, r0, #0
 800c2f8:	61f0      	str	r0, [r6, #28]
 800c2fa:	d104      	bne.n	800c306 <_Balloc+0x22>
 800c2fc:	216b      	movs	r1, #107	; 0x6b
 800c2fe:	4b19      	ldr	r3, [pc, #100]	; (800c364 <_Balloc+0x80>)
 800c300:	4819      	ldr	r0, [pc, #100]	; (800c368 <_Balloc+0x84>)
 800c302:	f001 fdbd 	bl	800de80 <__assert_func>
 800c306:	6045      	str	r5, [r0, #4]
 800c308:	6085      	str	r5, [r0, #8]
 800c30a:	6005      	str	r5, [r0, #0]
 800c30c:	60c5      	str	r5, [r0, #12]
 800c30e:	69f5      	ldr	r5, [r6, #28]
 800c310:	68eb      	ldr	r3, [r5, #12]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d013      	beq.n	800c33e <_Balloc+0x5a>
 800c316:	69f3      	ldr	r3, [r6, #28]
 800c318:	00a2      	lsls	r2, r4, #2
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	189b      	adds	r3, r3, r2
 800c31e:	6818      	ldr	r0, [r3, #0]
 800c320:	2800      	cmp	r0, #0
 800c322:	d118      	bne.n	800c356 <_Balloc+0x72>
 800c324:	2101      	movs	r1, #1
 800c326:	000d      	movs	r5, r1
 800c328:	40a5      	lsls	r5, r4
 800c32a:	1d6a      	adds	r2, r5, #5
 800c32c:	0030      	movs	r0, r6
 800c32e:	0092      	lsls	r2, r2, #2
 800c330:	f001 fdc4 	bl	800debc <_calloc_r>
 800c334:	2800      	cmp	r0, #0
 800c336:	d00c      	beq.n	800c352 <_Balloc+0x6e>
 800c338:	6044      	str	r4, [r0, #4]
 800c33a:	6085      	str	r5, [r0, #8]
 800c33c:	e00d      	b.n	800c35a <_Balloc+0x76>
 800c33e:	2221      	movs	r2, #33	; 0x21
 800c340:	2104      	movs	r1, #4
 800c342:	0030      	movs	r0, r6
 800c344:	f001 fdba 	bl	800debc <_calloc_r>
 800c348:	69f3      	ldr	r3, [r6, #28]
 800c34a:	60e8      	str	r0, [r5, #12]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1e1      	bne.n	800c316 <_Balloc+0x32>
 800c352:	2000      	movs	r0, #0
 800c354:	bd70      	pop	{r4, r5, r6, pc}
 800c356:	6802      	ldr	r2, [r0, #0]
 800c358:	601a      	str	r2, [r3, #0]
 800c35a:	2300      	movs	r3, #0
 800c35c:	6103      	str	r3, [r0, #16]
 800c35e:	60c3      	str	r3, [r0, #12]
 800c360:	e7f8      	b.n	800c354 <_Balloc+0x70>
 800c362:	46c0      	nop			; (mov r8, r8)
 800c364:	0800f29a 	.word	0x0800f29a
 800c368:	0800f31a 	.word	0x0800f31a

0800c36c <_Bfree>:
 800c36c:	b570      	push	{r4, r5, r6, lr}
 800c36e:	69c6      	ldr	r6, [r0, #28]
 800c370:	0005      	movs	r5, r0
 800c372:	000c      	movs	r4, r1
 800c374:	2e00      	cmp	r6, #0
 800c376:	d10e      	bne.n	800c396 <_Bfree+0x2a>
 800c378:	2010      	movs	r0, #16
 800c37a:	f7ff fef5 	bl	800c168 <malloc>
 800c37e:	1e02      	subs	r2, r0, #0
 800c380:	61e8      	str	r0, [r5, #28]
 800c382:	d104      	bne.n	800c38e <_Bfree+0x22>
 800c384:	218f      	movs	r1, #143	; 0x8f
 800c386:	4b09      	ldr	r3, [pc, #36]	; (800c3ac <_Bfree+0x40>)
 800c388:	4809      	ldr	r0, [pc, #36]	; (800c3b0 <_Bfree+0x44>)
 800c38a:	f001 fd79 	bl	800de80 <__assert_func>
 800c38e:	6046      	str	r6, [r0, #4]
 800c390:	6086      	str	r6, [r0, #8]
 800c392:	6006      	str	r6, [r0, #0]
 800c394:	60c6      	str	r6, [r0, #12]
 800c396:	2c00      	cmp	r4, #0
 800c398:	d007      	beq.n	800c3aa <_Bfree+0x3e>
 800c39a:	69eb      	ldr	r3, [r5, #28]
 800c39c:	6862      	ldr	r2, [r4, #4]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	0092      	lsls	r2, r2, #2
 800c3a2:	189b      	adds	r3, r3, r2
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	6022      	str	r2, [r4, #0]
 800c3a8:	601c      	str	r4, [r3, #0]
 800c3aa:	bd70      	pop	{r4, r5, r6, pc}
 800c3ac:	0800f29a 	.word	0x0800f29a
 800c3b0:	0800f31a 	.word	0x0800f31a

0800c3b4 <__multadd>:
 800c3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3b6:	000e      	movs	r6, r1
 800c3b8:	9001      	str	r0, [sp, #4]
 800c3ba:	000c      	movs	r4, r1
 800c3bc:	001d      	movs	r5, r3
 800c3be:	2000      	movs	r0, #0
 800c3c0:	690f      	ldr	r7, [r1, #16]
 800c3c2:	3614      	adds	r6, #20
 800c3c4:	6833      	ldr	r3, [r6, #0]
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	b299      	uxth	r1, r3
 800c3ca:	4351      	muls	r1, r2
 800c3cc:	0c1b      	lsrs	r3, r3, #16
 800c3ce:	4353      	muls	r3, r2
 800c3d0:	1949      	adds	r1, r1, r5
 800c3d2:	0c0d      	lsrs	r5, r1, #16
 800c3d4:	195b      	adds	r3, r3, r5
 800c3d6:	0c1d      	lsrs	r5, r3, #16
 800c3d8:	b289      	uxth	r1, r1
 800c3da:	041b      	lsls	r3, r3, #16
 800c3dc:	185b      	adds	r3, r3, r1
 800c3de:	c608      	stmia	r6!, {r3}
 800c3e0:	4287      	cmp	r7, r0
 800c3e2:	dcef      	bgt.n	800c3c4 <__multadd+0x10>
 800c3e4:	2d00      	cmp	r5, #0
 800c3e6:	d022      	beq.n	800c42e <__multadd+0x7a>
 800c3e8:	68a3      	ldr	r3, [r4, #8]
 800c3ea:	42bb      	cmp	r3, r7
 800c3ec:	dc19      	bgt.n	800c422 <__multadd+0x6e>
 800c3ee:	6861      	ldr	r1, [r4, #4]
 800c3f0:	9801      	ldr	r0, [sp, #4]
 800c3f2:	3101      	adds	r1, #1
 800c3f4:	f7ff ff76 	bl	800c2e4 <_Balloc>
 800c3f8:	1e06      	subs	r6, r0, #0
 800c3fa:	d105      	bne.n	800c408 <__multadd+0x54>
 800c3fc:	0032      	movs	r2, r6
 800c3fe:	21ba      	movs	r1, #186	; 0xba
 800c400:	4b0c      	ldr	r3, [pc, #48]	; (800c434 <__multadd+0x80>)
 800c402:	480d      	ldr	r0, [pc, #52]	; (800c438 <__multadd+0x84>)
 800c404:	f001 fd3c 	bl	800de80 <__assert_func>
 800c408:	0021      	movs	r1, r4
 800c40a:	6922      	ldr	r2, [r4, #16]
 800c40c:	310c      	adds	r1, #12
 800c40e:	3202      	adds	r2, #2
 800c410:	0092      	lsls	r2, r2, #2
 800c412:	300c      	adds	r0, #12
 800c414:	f001 fd24 	bl	800de60 <memcpy>
 800c418:	0021      	movs	r1, r4
 800c41a:	9801      	ldr	r0, [sp, #4]
 800c41c:	f7ff ffa6 	bl	800c36c <_Bfree>
 800c420:	0034      	movs	r4, r6
 800c422:	1d3b      	adds	r3, r7, #4
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	18e3      	adds	r3, r4, r3
 800c428:	605d      	str	r5, [r3, #4]
 800c42a:	1c7b      	adds	r3, r7, #1
 800c42c:	6123      	str	r3, [r4, #16]
 800c42e:	0020      	movs	r0, r4
 800c430:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c432:	46c0      	nop			; (mov r8, r8)
 800c434:	0800f309 	.word	0x0800f309
 800c438:	0800f31a 	.word	0x0800f31a

0800c43c <__s2b>:
 800c43c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c43e:	0006      	movs	r6, r0
 800c440:	0018      	movs	r0, r3
 800c442:	000c      	movs	r4, r1
 800c444:	3008      	adds	r0, #8
 800c446:	2109      	movs	r1, #9
 800c448:	9301      	str	r3, [sp, #4]
 800c44a:	0015      	movs	r5, r2
 800c44c:	f7f3 ff02 	bl	8000254 <__divsi3>
 800c450:	2301      	movs	r3, #1
 800c452:	2100      	movs	r1, #0
 800c454:	4283      	cmp	r3, r0
 800c456:	db0a      	blt.n	800c46e <__s2b+0x32>
 800c458:	0030      	movs	r0, r6
 800c45a:	f7ff ff43 	bl	800c2e4 <_Balloc>
 800c45e:	1e01      	subs	r1, r0, #0
 800c460:	d108      	bne.n	800c474 <__s2b+0x38>
 800c462:	000a      	movs	r2, r1
 800c464:	4b19      	ldr	r3, [pc, #100]	; (800c4cc <__s2b+0x90>)
 800c466:	481a      	ldr	r0, [pc, #104]	; (800c4d0 <__s2b+0x94>)
 800c468:	31d3      	adds	r1, #211	; 0xd3
 800c46a:	f001 fd09 	bl	800de80 <__assert_func>
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	3101      	adds	r1, #1
 800c472:	e7ef      	b.n	800c454 <__s2b+0x18>
 800c474:	9b08      	ldr	r3, [sp, #32]
 800c476:	6143      	str	r3, [r0, #20]
 800c478:	2301      	movs	r3, #1
 800c47a:	6103      	str	r3, [r0, #16]
 800c47c:	2d09      	cmp	r5, #9
 800c47e:	dd18      	ble.n	800c4b2 <__s2b+0x76>
 800c480:	0023      	movs	r3, r4
 800c482:	3309      	adds	r3, #9
 800c484:	001f      	movs	r7, r3
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	1964      	adds	r4, r4, r5
 800c48a:	783b      	ldrb	r3, [r7, #0]
 800c48c:	220a      	movs	r2, #10
 800c48e:	0030      	movs	r0, r6
 800c490:	3b30      	subs	r3, #48	; 0x30
 800c492:	f7ff ff8f 	bl	800c3b4 <__multadd>
 800c496:	3701      	adds	r7, #1
 800c498:	0001      	movs	r1, r0
 800c49a:	42a7      	cmp	r7, r4
 800c49c:	d1f5      	bne.n	800c48a <__s2b+0x4e>
 800c49e:	002c      	movs	r4, r5
 800c4a0:	9b00      	ldr	r3, [sp, #0]
 800c4a2:	3c08      	subs	r4, #8
 800c4a4:	191c      	adds	r4, r3, r4
 800c4a6:	002f      	movs	r7, r5
 800c4a8:	9b01      	ldr	r3, [sp, #4]
 800c4aa:	429f      	cmp	r7, r3
 800c4ac:	db04      	blt.n	800c4b8 <__s2b+0x7c>
 800c4ae:	0008      	movs	r0, r1
 800c4b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c4b2:	2509      	movs	r5, #9
 800c4b4:	340a      	adds	r4, #10
 800c4b6:	e7f6      	b.n	800c4a6 <__s2b+0x6a>
 800c4b8:	1b63      	subs	r3, r4, r5
 800c4ba:	5ddb      	ldrb	r3, [r3, r7]
 800c4bc:	220a      	movs	r2, #10
 800c4be:	0030      	movs	r0, r6
 800c4c0:	3b30      	subs	r3, #48	; 0x30
 800c4c2:	f7ff ff77 	bl	800c3b4 <__multadd>
 800c4c6:	3701      	adds	r7, #1
 800c4c8:	0001      	movs	r1, r0
 800c4ca:	e7ed      	b.n	800c4a8 <__s2b+0x6c>
 800c4cc:	0800f309 	.word	0x0800f309
 800c4d0:	0800f31a 	.word	0x0800f31a

0800c4d4 <__hi0bits>:
 800c4d4:	0003      	movs	r3, r0
 800c4d6:	0c02      	lsrs	r2, r0, #16
 800c4d8:	2000      	movs	r0, #0
 800c4da:	4282      	cmp	r2, r0
 800c4dc:	d101      	bne.n	800c4e2 <__hi0bits+0xe>
 800c4de:	041b      	lsls	r3, r3, #16
 800c4e0:	3010      	adds	r0, #16
 800c4e2:	0e1a      	lsrs	r2, r3, #24
 800c4e4:	d101      	bne.n	800c4ea <__hi0bits+0x16>
 800c4e6:	3008      	adds	r0, #8
 800c4e8:	021b      	lsls	r3, r3, #8
 800c4ea:	0f1a      	lsrs	r2, r3, #28
 800c4ec:	d101      	bne.n	800c4f2 <__hi0bits+0x1e>
 800c4ee:	3004      	adds	r0, #4
 800c4f0:	011b      	lsls	r3, r3, #4
 800c4f2:	0f9a      	lsrs	r2, r3, #30
 800c4f4:	d101      	bne.n	800c4fa <__hi0bits+0x26>
 800c4f6:	3002      	adds	r0, #2
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	db03      	blt.n	800c506 <__hi0bits+0x32>
 800c4fe:	3001      	adds	r0, #1
 800c500:	005b      	lsls	r3, r3, #1
 800c502:	d400      	bmi.n	800c506 <__hi0bits+0x32>
 800c504:	2020      	movs	r0, #32
 800c506:	4770      	bx	lr

0800c508 <__lo0bits>:
 800c508:	6803      	ldr	r3, [r0, #0]
 800c50a:	0001      	movs	r1, r0
 800c50c:	2207      	movs	r2, #7
 800c50e:	0018      	movs	r0, r3
 800c510:	4010      	ands	r0, r2
 800c512:	4213      	tst	r3, r2
 800c514:	d00d      	beq.n	800c532 <__lo0bits+0x2a>
 800c516:	3a06      	subs	r2, #6
 800c518:	2000      	movs	r0, #0
 800c51a:	4213      	tst	r3, r2
 800c51c:	d105      	bne.n	800c52a <__lo0bits+0x22>
 800c51e:	3002      	adds	r0, #2
 800c520:	4203      	tst	r3, r0
 800c522:	d003      	beq.n	800c52c <__lo0bits+0x24>
 800c524:	40d3      	lsrs	r3, r2
 800c526:	0010      	movs	r0, r2
 800c528:	600b      	str	r3, [r1, #0]
 800c52a:	4770      	bx	lr
 800c52c:	089b      	lsrs	r3, r3, #2
 800c52e:	600b      	str	r3, [r1, #0]
 800c530:	e7fb      	b.n	800c52a <__lo0bits+0x22>
 800c532:	b29a      	uxth	r2, r3
 800c534:	2a00      	cmp	r2, #0
 800c536:	d101      	bne.n	800c53c <__lo0bits+0x34>
 800c538:	2010      	movs	r0, #16
 800c53a:	0c1b      	lsrs	r3, r3, #16
 800c53c:	b2da      	uxtb	r2, r3
 800c53e:	2a00      	cmp	r2, #0
 800c540:	d101      	bne.n	800c546 <__lo0bits+0x3e>
 800c542:	3008      	adds	r0, #8
 800c544:	0a1b      	lsrs	r3, r3, #8
 800c546:	071a      	lsls	r2, r3, #28
 800c548:	d101      	bne.n	800c54e <__lo0bits+0x46>
 800c54a:	3004      	adds	r0, #4
 800c54c:	091b      	lsrs	r3, r3, #4
 800c54e:	079a      	lsls	r2, r3, #30
 800c550:	d101      	bne.n	800c556 <__lo0bits+0x4e>
 800c552:	3002      	adds	r0, #2
 800c554:	089b      	lsrs	r3, r3, #2
 800c556:	07da      	lsls	r2, r3, #31
 800c558:	d4e9      	bmi.n	800c52e <__lo0bits+0x26>
 800c55a:	3001      	adds	r0, #1
 800c55c:	085b      	lsrs	r3, r3, #1
 800c55e:	d1e6      	bne.n	800c52e <__lo0bits+0x26>
 800c560:	2020      	movs	r0, #32
 800c562:	e7e2      	b.n	800c52a <__lo0bits+0x22>

0800c564 <__i2b>:
 800c564:	b510      	push	{r4, lr}
 800c566:	000c      	movs	r4, r1
 800c568:	2101      	movs	r1, #1
 800c56a:	f7ff febb 	bl	800c2e4 <_Balloc>
 800c56e:	2800      	cmp	r0, #0
 800c570:	d107      	bne.n	800c582 <__i2b+0x1e>
 800c572:	2146      	movs	r1, #70	; 0x46
 800c574:	4c05      	ldr	r4, [pc, #20]	; (800c58c <__i2b+0x28>)
 800c576:	0002      	movs	r2, r0
 800c578:	4b05      	ldr	r3, [pc, #20]	; (800c590 <__i2b+0x2c>)
 800c57a:	0020      	movs	r0, r4
 800c57c:	31ff      	adds	r1, #255	; 0xff
 800c57e:	f001 fc7f 	bl	800de80 <__assert_func>
 800c582:	2301      	movs	r3, #1
 800c584:	6144      	str	r4, [r0, #20]
 800c586:	6103      	str	r3, [r0, #16]
 800c588:	bd10      	pop	{r4, pc}
 800c58a:	46c0      	nop			; (mov r8, r8)
 800c58c:	0800f31a 	.word	0x0800f31a
 800c590:	0800f309 	.word	0x0800f309

0800c594 <__multiply>:
 800c594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c596:	0015      	movs	r5, r2
 800c598:	690a      	ldr	r2, [r1, #16]
 800c59a:	692b      	ldr	r3, [r5, #16]
 800c59c:	000c      	movs	r4, r1
 800c59e:	b08b      	sub	sp, #44	; 0x2c
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	da01      	bge.n	800c5a8 <__multiply+0x14>
 800c5a4:	002c      	movs	r4, r5
 800c5a6:	000d      	movs	r5, r1
 800c5a8:	6927      	ldr	r7, [r4, #16]
 800c5aa:	692e      	ldr	r6, [r5, #16]
 800c5ac:	6861      	ldr	r1, [r4, #4]
 800c5ae:	19bb      	adds	r3, r7, r6
 800c5b0:	9303      	str	r3, [sp, #12]
 800c5b2:	68a3      	ldr	r3, [r4, #8]
 800c5b4:	19ba      	adds	r2, r7, r6
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	da00      	bge.n	800c5bc <__multiply+0x28>
 800c5ba:	3101      	adds	r1, #1
 800c5bc:	f7ff fe92 	bl	800c2e4 <_Balloc>
 800c5c0:	9002      	str	r0, [sp, #8]
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d106      	bne.n	800c5d4 <__multiply+0x40>
 800c5c6:	21b1      	movs	r1, #177	; 0xb1
 800c5c8:	4b48      	ldr	r3, [pc, #288]	; (800c6ec <__multiply+0x158>)
 800c5ca:	4849      	ldr	r0, [pc, #292]	; (800c6f0 <__multiply+0x15c>)
 800c5cc:	9a02      	ldr	r2, [sp, #8]
 800c5ce:	0049      	lsls	r1, r1, #1
 800c5d0:	f001 fc56 	bl	800de80 <__assert_func>
 800c5d4:	9b02      	ldr	r3, [sp, #8]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	3314      	adds	r3, #20
 800c5da:	469c      	mov	ip, r3
 800c5dc:	19bb      	adds	r3, r7, r6
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	4463      	add	r3, ip
 800c5e2:	9304      	str	r3, [sp, #16]
 800c5e4:	4663      	mov	r3, ip
 800c5e6:	9904      	ldr	r1, [sp, #16]
 800c5e8:	428b      	cmp	r3, r1
 800c5ea:	d32a      	bcc.n	800c642 <__multiply+0xae>
 800c5ec:	0023      	movs	r3, r4
 800c5ee:	00bf      	lsls	r7, r7, #2
 800c5f0:	3314      	adds	r3, #20
 800c5f2:	3514      	adds	r5, #20
 800c5f4:	9308      	str	r3, [sp, #32]
 800c5f6:	00b6      	lsls	r6, r6, #2
 800c5f8:	19db      	adds	r3, r3, r7
 800c5fa:	9305      	str	r3, [sp, #20]
 800c5fc:	19ab      	adds	r3, r5, r6
 800c5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c600:	2304      	movs	r3, #4
 800c602:	9306      	str	r3, [sp, #24]
 800c604:	0023      	movs	r3, r4
 800c606:	9a05      	ldr	r2, [sp, #20]
 800c608:	3315      	adds	r3, #21
 800c60a:	9501      	str	r5, [sp, #4]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d305      	bcc.n	800c61c <__multiply+0x88>
 800c610:	1b13      	subs	r3, r2, r4
 800c612:	3b15      	subs	r3, #21
 800c614:	089b      	lsrs	r3, r3, #2
 800c616:	3301      	adds	r3, #1
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	9306      	str	r3, [sp, #24]
 800c61c:	9b01      	ldr	r3, [sp, #4]
 800c61e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c620:	4293      	cmp	r3, r2
 800c622:	d310      	bcc.n	800c646 <__multiply+0xb2>
 800c624:	9b03      	ldr	r3, [sp, #12]
 800c626:	2b00      	cmp	r3, #0
 800c628:	dd05      	ble.n	800c636 <__multiply+0xa2>
 800c62a:	9b04      	ldr	r3, [sp, #16]
 800c62c:	3b04      	subs	r3, #4
 800c62e:	9304      	str	r3, [sp, #16]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d056      	beq.n	800c6e4 <__multiply+0x150>
 800c636:	9b02      	ldr	r3, [sp, #8]
 800c638:	9a03      	ldr	r2, [sp, #12]
 800c63a:	0018      	movs	r0, r3
 800c63c:	611a      	str	r2, [r3, #16]
 800c63e:	b00b      	add	sp, #44	; 0x2c
 800c640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c642:	c304      	stmia	r3!, {r2}
 800c644:	e7cf      	b.n	800c5e6 <__multiply+0x52>
 800c646:	9b01      	ldr	r3, [sp, #4]
 800c648:	6818      	ldr	r0, [r3, #0]
 800c64a:	b280      	uxth	r0, r0
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d01e      	beq.n	800c68e <__multiply+0xfa>
 800c650:	4667      	mov	r7, ip
 800c652:	2500      	movs	r5, #0
 800c654:	9e08      	ldr	r6, [sp, #32]
 800c656:	ce02      	ldmia	r6!, {r1}
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	9307      	str	r3, [sp, #28]
 800c65c:	b28b      	uxth	r3, r1
 800c65e:	4343      	muls	r3, r0
 800c660:	001a      	movs	r2, r3
 800c662:	466b      	mov	r3, sp
 800c664:	8b9b      	ldrh	r3, [r3, #28]
 800c666:	18d3      	adds	r3, r2, r3
 800c668:	195b      	adds	r3, r3, r5
 800c66a:	0c0d      	lsrs	r5, r1, #16
 800c66c:	4345      	muls	r5, r0
 800c66e:	9a07      	ldr	r2, [sp, #28]
 800c670:	0c11      	lsrs	r1, r2, #16
 800c672:	1869      	adds	r1, r5, r1
 800c674:	0c1a      	lsrs	r2, r3, #16
 800c676:	188a      	adds	r2, r1, r2
 800c678:	b29b      	uxth	r3, r3
 800c67a:	0c15      	lsrs	r5, r2, #16
 800c67c:	0412      	lsls	r2, r2, #16
 800c67e:	431a      	orrs	r2, r3
 800c680:	9b05      	ldr	r3, [sp, #20]
 800c682:	c704      	stmia	r7!, {r2}
 800c684:	42b3      	cmp	r3, r6
 800c686:	d8e6      	bhi.n	800c656 <__multiply+0xc2>
 800c688:	4663      	mov	r3, ip
 800c68a:	9a06      	ldr	r2, [sp, #24]
 800c68c:	509d      	str	r5, [r3, r2]
 800c68e:	9b01      	ldr	r3, [sp, #4]
 800c690:	6818      	ldr	r0, [r3, #0]
 800c692:	0c00      	lsrs	r0, r0, #16
 800c694:	d020      	beq.n	800c6d8 <__multiply+0x144>
 800c696:	4663      	mov	r3, ip
 800c698:	0025      	movs	r5, r4
 800c69a:	4661      	mov	r1, ip
 800c69c:	2700      	movs	r7, #0
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	3514      	adds	r5, #20
 800c6a2:	682a      	ldr	r2, [r5, #0]
 800c6a4:	680e      	ldr	r6, [r1, #0]
 800c6a6:	b292      	uxth	r2, r2
 800c6a8:	4342      	muls	r2, r0
 800c6aa:	0c36      	lsrs	r6, r6, #16
 800c6ac:	1992      	adds	r2, r2, r6
 800c6ae:	19d2      	adds	r2, r2, r7
 800c6b0:	0416      	lsls	r6, r2, #16
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	431e      	orrs	r6, r3
 800c6b6:	600e      	str	r6, [r1, #0]
 800c6b8:	cd40      	ldmia	r5!, {r6}
 800c6ba:	684b      	ldr	r3, [r1, #4]
 800c6bc:	0c36      	lsrs	r6, r6, #16
 800c6be:	4346      	muls	r6, r0
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	0c12      	lsrs	r2, r2, #16
 800c6c4:	18f3      	adds	r3, r6, r3
 800c6c6:	189b      	adds	r3, r3, r2
 800c6c8:	9a05      	ldr	r2, [sp, #20]
 800c6ca:	0c1f      	lsrs	r7, r3, #16
 800c6cc:	3104      	adds	r1, #4
 800c6ce:	42aa      	cmp	r2, r5
 800c6d0:	d8e7      	bhi.n	800c6a2 <__multiply+0x10e>
 800c6d2:	4662      	mov	r2, ip
 800c6d4:	9906      	ldr	r1, [sp, #24]
 800c6d6:	5053      	str	r3, [r2, r1]
 800c6d8:	9b01      	ldr	r3, [sp, #4]
 800c6da:	3304      	adds	r3, #4
 800c6dc:	9301      	str	r3, [sp, #4]
 800c6de:	2304      	movs	r3, #4
 800c6e0:	449c      	add	ip, r3
 800c6e2:	e79b      	b.n	800c61c <__multiply+0x88>
 800c6e4:	9b03      	ldr	r3, [sp, #12]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	9303      	str	r3, [sp, #12]
 800c6ea:	e79b      	b.n	800c624 <__multiply+0x90>
 800c6ec:	0800f309 	.word	0x0800f309
 800c6f0:	0800f31a 	.word	0x0800f31a

0800c6f4 <__pow5mult>:
 800c6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6f6:	2303      	movs	r3, #3
 800c6f8:	0015      	movs	r5, r2
 800c6fa:	0007      	movs	r7, r0
 800c6fc:	000e      	movs	r6, r1
 800c6fe:	401a      	ands	r2, r3
 800c700:	421d      	tst	r5, r3
 800c702:	d008      	beq.n	800c716 <__pow5mult+0x22>
 800c704:	4925      	ldr	r1, [pc, #148]	; (800c79c <__pow5mult+0xa8>)
 800c706:	3a01      	subs	r2, #1
 800c708:	0092      	lsls	r2, r2, #2
 800c70a:	5852      	ldr	r2, [r2, r1]
 800c70c:	2300      	movs	r3, #0
 800c70e:	0031      	movs	r1, r6
 800c710:	f7ff fe50 	bl	800c3b4 <__multadd>
 800c714:	0006      	movs	r6, r0
 800c716:	10ad      	asrs	r5, r5, #2
 800c718:	d03d      	beq.n	800c796 <__pow5mult+0xa2>
 800c71a:	69fc      	ldr	r4, [r7, #28]
 800c71c:	2c00      	cmp	r4, #0
 800c71e:	d10f      	bne.n	800c740 <__pow5mult+0x4c>
 800c720:	2010      	movs	r0, #16
 800c722:	f7ff fd21 	bl	800c168 <malloc>
 800c726:	1e02      	subs	r2, r0, #0
 800c728:	61f8      	str	r0, [r7, #28]
 800c72a:	d105      	bne.n	800c738 <__pow5mult+0x44>
 800c72c:	21b4      	movs	r1, #180	; 0xb4
 800c72e:	4b1c      	ldr	r3, [pc, #112]	; (800c7a0 <__pow5mult+0xac>)
 800c730:	481c      	ldr	r0, [pc, #112]	; (800c7a4 <__pow5mult+0xb0>)
 800c732:	31ff      	adds	r1, #255	; 0xff
 800c734:	f001 fba4 	bl	800de80 <__assert_func>
 800c738:	6044      	str	r4, [r0, #4]
 800c73a:	6084      	str	r4, [r0, #8]
 800c73c:	6004      	str	r4, [r0, #0]
 800c73e:	60c4      	str	r4, [r0, #12]
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	689c      	ldr	r4, [r3, #8]
 800c744:	9301      	str	r3, [sp, #4]
 800c746:	2c00      	cmp	r4, #0
 800c748:	d108      	bne.n	800c75c <__pow5mult+0x68>
 800c74a:	0038      	movs	r0, r7
 800c74c:	4916      	ldr	r1, [pc, #88]	; (800c7a8 <__pow5mult+0xb4>)
 800c74e:	f7ff ff09 	bl	800c564 <__i2b>
 800c752:	9b01      	ldr	r3, [sp, #4]
 800c754:	0004      	movs	r4, r0
 800c756:	6098      	str	r0, [r3, #8]
 800c758:	2300      	movs	r3, #0
 800c75a:	6003      	str	r3, [r0, #0]
 800c75c:	2301      	movs	r3, #1
 800c75e:	421d      	tst	r5, r3
 800c760:	d00a      	beq.n	800c778 <__pow5mult+0x84>
 800c762:	0031      	movs	r1, r6
 800c764:	0022      	movs	r2, r4
 800c766:	0038      	movs	r0, r7
 800c768:	f7ff ff14 	bl	800c594 <__multiply>
 800c76c:	0031      	movs	r1, r6
 800c76e:	9001      	str	r0, [sp, #4]
 800c770:	0038      	movs	r0, r7
 800c772:	f7ff fdfb 	bl	800c36c <_Bfree>
 800c776:	9e01      	ldr	r6, [sp, #4]
 800c778:	106d      	asrs	r5, r5, #1
 800c77a:	d00c      	beq.n	800c796 <__pow5mult+0xa2>
 800c77c:	6820      	ldr	r0, [r4, #0]
 800c77e:	2800      	cmp	r0, #0
 800c780:	d107      	bne.n	800c792 <__pow5mult+0x9e>
 800c782:	0022      	movs	r2, r4
 800c784:	0021      	movs	r1, r4
 800c786:	0038      	movs	r0, r7
 800c788:	f7ff ff04 	bl	800c594 <__multiply>
 800c78c:	2300      	movs	r3, #0
 800c78e:	6020      	str	r0, [r4, #0]
 800c790:	6003      	str	r3, [r0, #0]
 800c792:	0004      	movs	r4, r0
 800c794:	e7e2      	b.n	800c75c <__pow5mult+0x68>
 800c796:	0030      	movs	r0, r6
 800c798:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c79a:	46c0      	nop			; (mov r8, r8)
 800c79c:	0800f468 	.word	0x0800f468
 800c7a0:	0800f29a 	.word	0x0800f29a
 800c7a4:	0800f31a 	.word	0x0800f31a
 800c7a8:	00000271 	.word	0x00000271

0800c7ac <__lshift>:
 800c7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ae:	000c      	movs	r4, r1
 800c7b0:	0017      	movs	r7, r2
 800c7b2:	6923      	ldr	r3, [r4, #16]
 800c7b4:	1155      	asrs	r5, r2, #5
 800c7b6:	b087      	sub	sp, #28
 800c7b8:	18eb      	adds	r3, r5, r3
 800c7ba:	9302      	str	r3, [sp, #8]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	9301      	str	r3, [sp, #4]
 800c7c0:	6849      	ldr	r1, [r1, #4]
 800c7c2:	68a3      	ldr	r3, [r4, #8]
 800c7c4:	9004      	str	r0, [sp, #16]
 800c7c6:	9a01      	ldr	r2, [sp, #4]
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	db10      	blt.n	800c7ee <__lshift+0x42>
 800c7cc:	9804      	ldr	r0, [sp, #16]
 800c7ce:	f7ff fd89 	bl	800c2e4 <_Balloc>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	0002      	movs	r2, r0
 800c7d6:	0006      	movs	r6, r0
 800c7d8:	0019      	movs	r1, r3
 800c7da:	3214      	adds	r2, #20
 800c7dc:	4298      	cmp	r0, r3
 800c7de:	d10c      	bne.n	800c7fa <__lshift+0x4e>
 800c7e0:	31df      	adds	r1, #223	; 0xdf
 800c7e2:	0032      	movs	r2, r6
 800c7e4:	4b26      	ldr	r3, [pc, #152]	; (800c880 <__lshift+0xd4>)
 800c7e6:	4827      	ldr	r0, [pc, #156]	; (800c884 <__lshift+0xd8>)
 800c7e8:	31ff      	adds	r1, #255	; 0xff
 800c7ea:	f001 fb49 	bl	800de80 <__assert_func>
 800c7ee:	3101      	adds	r1, #1
 800c7f0:	005b      	lsls	r3, r3, #1
 800c7f2:	e7e8      	b.n	800c7c6 <__lshift+0x1a>
 800c7f4:	0098      	lsls	r0, r3, #2
 800c7f6:	5011      	str	r1, [r2, r0]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	42ab      	cmp	r3, r5
 800c7fc:	dbfa      	blt.n	800c7f4 <__lshift+0x48>
 800c7fe:	43eb      	mvns	r3, r5
 800c800:	17db      	asrs	r3, r3, #31
 800c802:	401d      	ands	r5, r3
 800c804:	211f      	movs	r1, #31
 800c806:	0023      	movs	r3, r4
 800c808:	0038      	movs	r0, r7
 800c80a:	00ad      	lsls	r5, r5, #2
 800c80c:	1955      	adds	r5, r2, r5
 800c80e:	6922      	ldr	r2, [r4, #16]
 800c810:	3314      	adds	r3, #20
 800c812:	0092      	lsls	r2, r2, #2
 800c814:	4008      	ands	r0, r1
 800c816:	4684      	mov	ip, r0
 800c818:	189a      	adds	r2, r3, r2
 800c81a:	420f      	tst	r7, r1
 800c81c:	d02a      	beq.n	800c874 <__lshift+0xc8>
 800c81e:	3101      	adds	r1, #1
 800c820:	1a09      	subs	r1, r1, r0
 800c822:	9105      	str	r1, [sp, #20]
 800c824:	2100      	movs	r1, #0
 800c826:	9503      	str	r5, [sp, #12]
 800c828:	4667      	mov	r7, ip
 800c82a:	6818      	ldr	r0, [r3, #0]
 800c82c:	40b8      	lsls	r0, r7
 800c82e:	4308      	orrs	r0, r1
 800c830:	9903      	ldr	r1, [sp, #12]
 800c832:	c101      	stmia	r1!, {r0}
 800c834:	9103      	str	r1, [sp, #12]
 800c836:	9805      	ldr	r0, [sp, #20]
 800c838:	cb02      	ldmia	r3!, {r1}
 800c83a:	40c1      	lsrs	r1, r0
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d8f3      	bhi.n	800c828 <__lshift+0x7c>
 800c840:	0020      	movs	r0, r4
 800c842:	3015      	adds	r0, #21
 800c844:	2304      	movs	r3, #4
 800c846:	4282      	cmp	r2, r0
 800c848:	d304      	bcc.n	800c854 <__lshift+0xa8>
 800c84a:	1b13      	subs	r3, r2, r4
 800c84c:	3b15      	subs	r3, #21
 800c84e:	089b      	lsrs	r3, r3, #2
 800c850:	3301      	adds	r3, #1
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	50e9      	str	r1, [r5, r3]
 800c856:	2900      	cmp	r1, #0
 800c858:	d002      	beq.n	800c860 <__lshift+0xb4>
 800c85a:	9b02      	ldr	r3, [sp, #8]
 800c85c:	3302      	adds	r3, #2
 800c85e:	9301      	str	r3, [sp, #4]
 800c860:	9b01      	ldr	r3, [sp, #4]
 800c862:	9804      	ldr	r0, [sp, #16]
 800c864:	3b01      	subs	r3, #1
 800c866:	0021      	movs	r1, r4
 800c868:	6133      	str	r3, [r6, #16]
 800c86a:	f7ff fd7f 	bl	800c36c <_Bfree>
 800c86e:	0030      	movs	r0, r6
 800c870:	b007      	add	sp, #28
 800c872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c874:	cb02      	ldmia	r3!, {r1}
 800c876:	c502      	stmia	r5!, {r1}
 800c878:	429a      	cmp	r2, r3
 800c87a:	d8fb      	bhi.n	800c874 <__lshift+0xc8>
 800c87c:	e7f0      	b.n	800c860 <__lshift+0xb4>
 800c87e:	46c0      	nop			; (mov r8, r8)
 800c880:	0800f309 	.word	0x0800f309
 800c884:	0800f31a 	.word	0x0800f31a

0800c888 <__mcmp>:
 800c888:	b530      	push	{r4, r5, lr}
 800c88a:	690b      	ldr	r3, [r1, #16]
 800c88c:	6904      	ldr	r4, [r0, #16]
 800c88e:	0002      	movs	r2, r0
 800c890:	1ae0      	subs	r0, r4, r3
 800c892:	429c      	cmp	r4, r3
 800c894:	d10e      	bne.n	800c8b4 <__mcmp+0x2c>
 800c896:	3214      	adds	r2, #20
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	3114      	adds	r1, #20
 800c89c:	0014      	movs	r4, r2
 800c89e:	18c9      	adds	r1, r1, r3
 800c8a0:	18d2      	adds	r2, r2, r3
 800c8a2:	3a04      	subs	r2, #4
 800c8a4:	3904      	subs	r1, #4
 800c8a6:	6815      	ldr	r5, [r2, #0]
 800c8a8:	680b      	ldr	r3, [r1, #0]
 800c8aa:	429d      	cmp	r5, r3
 800c8ac:	d003      	beq.n	800c8b6 <__mcmp+0x2e>
 800c8ae:	2001      	movs	r0, #1
 800c8b0:	429d      	cmp	r5, r3
 800c8b2:	d303      	bcc.n	800c8bc <__mcmp+0x34>
 800c8b4:	bd30      	pop	{r4, r5, pc}
 800c8b6:	4294      	cmp	r4, r2
 800c8b8:	d3f3      	bcc.n	800c8a2 <__mcmp+0x1a>
 800c8ba:	e7fb      	b.n	800c8b4 <__mcmp+0x2c>
 800c8bc:	4240      	negs	r0, r0
 800c8be:	e7f9      	b.n	800c8b4 <__mcmp+0x2c>

0800c8c0 <__mdiff>:
 800c8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8c2:	000e      	movs	r6, r1
 800c8c4:	0007      	movs	r7, r0
 800c8c6:	0011      	movs	r1, r2
 800c8c8:	0030      	movs	r0, r6
 800c8ca:	b087      	sub	sp, #28
 800c8cc:	0014      	movs	r4, r2
 800c8ce:	f7ff ffdb 	bl	800c888 <__mcmp>
 800c8d2:	1e05      	subs	r5, r0, #0
 800c8d4:	d110      	bne.n	800c8f8 <__mdiff+0x38>
 800c8d6:	0001      	movs	r1, r0
 800c8d8:	0038      	movs	r0, r7
 800c8da:	f7ff fd03 	bl	800c2e4 <_Balloc>
 800c8de:	1e02      	subs	r2, r0, #0
 800c8e0:	d104      	bne.n	800c8ec <__mdiff+0x2c>
 800c8e2:	4b3f      	ldr	r3, [pc, #252]	; (800c9e0 <__mdiff+0x120>)
 800c8e4:	483f      	ldr	r0, [pc, #252]	; (800c9e4 <__mdiff+0x124>)
 800c8e6:	4940      	ldr	r1, [pc, #256]	; (800c9e8 <__mdiff+0x128>)
 800c8e8:	f001 faca 	bl	800de80 <__assert_func>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	6145      	str	r5, [r0, #20]
 800c8f0:	6103      	str	r3, [r0, #16]
 800c8f2:	0010      	movs	r0, r2
 800c8f4:	b007      	add	sp, #28
 800c8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	9301      	str	r3, [sp, #4]
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	db04      	blt.n	800c90a <__mdiff+0x4a>
 800c900:	0023      	movs	r3, r4
 800c902:	0034      	movs	r4, r6
 800c904:	001e      	movs	r6, r3
 800c906:	2300      	movs	r3, #0
 800c908:	9301      	str	r3, [sp, #4]
 800c90a:	0038      	movs	r0, r7
 800c90c:	6861      	ldr	r1, [r4, #4]
 800c90e:	f7ff fce9 	bl	800c2e4 <_Balloc>
 800c912:	1e02      	subs	r2, r0, #0
 800c914:	d103      	bne.n	800c91e <__mdiff+0x5e>
 800c916:	4b32      	ldr	r3, [pc, #200]	; (800c9e0 <__mdiff+0x120>)
 800c918:	4832      	ldr	r0, [pc, #200]	; (800c9e4 <__mdiff+0x124>)
 800c91a:	4934      	ldr	r1, [pc, #208]	; (800c9ec <__mdiff+0x12c>)
 800c91c:	e7e4      	b.n	800c8e8 <__mdiff+0x28>
 800c91e:	9b01      	ldr	r3, [sp, #4]
 800c920:	2700      	movs	r7, #0
 800c922:	60c3      	str	r3, [r0, #12]
 800c924:	6920      	ldr	r0, [r4, #16]
 800c926:	3414      	adds	r4, #20
 800c928:	0083      	lsls	r3, r0, #2
 800c92a:	18e3      	adds	r3, r4, r3
 800c92c:	0021      	movs	r1, r4
 800c92e:	9401      	str	r4, [sp, #4]
 800c930:	0034      	movs	r4, r6
 800c932:	9302      	str	r3, [sp, #8]
 800c934:	6933      	ldr	r3, [r6, #16]
 800c936:	3414      	adds	r4, #20
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	18e3      	adds	r3, r4, r3
 800c93c:	9303      	str	r3, [sp, #12]
 800c93e:	0013      	movs	r3, r2
 800c940:	3314      	adds	r3, #20
 800c942:	469c      	mov	ip, r3
 800c944:	9305      	str	r3, [sp, #20]
 800c946:	9104      	str	r1, [sp, #16]
 800c948:	9b04      	ldr	r3, [sp, #16]
 800c94a:	cc02      	ldmia	r4!, {r1}
 800c94c:	cb20      	ldmia	r3!, {r5}
 800c94e:	9304      	str	r3, [sp, #16]
 800c950:	b2ab      	uxth	r3, r5
 800c952:	19df      	adds	r7, r3, r7
 800c954:	b28b      	uxth	r3, r1
 800c956:	1afb      	subs	r3, r7, r3
 800c958:	0c09      	lsrs	r1, r1, #16
 800c95a:	0c2d      	lsrs	r5, r5, #16
 800c95c:	1a6d      	subs	r5, r5, r1
 800c95e:	1419      	asrs	r1, r3, #16
 800c960:	1869      	adds	r1, r5, r1
 800c962:	b29b      	uxth	r3, r3
 800c964:	140f      	asrs	r7, r1, #16
 800c966:	0409      	lsls	r1, r1, #16
 800c968:	4319      	orrs	r1, r3
 800c96a:	4663      	mov	r3, ip
 800c96c:	c302      	stmia	r3!, {r1}
 800c96e:	469c      	mov	ip, r3
 800c970:	9b03      	ldr	r3, [sp, #12]
 800c972:	42a3      	cmp	r3, r4
 800c974:	d8e8      	bhi.n	800c948 <__mdiff+0x88>
 800c976:	0031      	movs	r1, r6
 800c978:	9c03      	ldr	r4, [sp, #12]
 800c97a:	3115      	adds	r1, #21
 800c97c:	2304      	movs	r3, #4
 800c97e:	428c      	cmp	r4, r1
 800c980:	d304      	bcc.n	800c98c <__mdiff+0xcc>
 800c982:	1ba3      	subs	r3, r4, r6
 800c984:	3b15      	subs	r3, #21
 800c986:	089b      	lsrs	r3, r3, #2
 800c988:	3301      	adds	r3, #1
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	9901      	ldr	r1, [sp, #4]
 800c98e:	18cd      	adds	r5, r1, r3
 800c990:	9905      	ldr	r1, [sp, #20]
 800c992:	002e      	movs	r6, r5
 800c994:	18cb      	adds	r3, r1, r3
 800c996:	469c      	mov	ip, r3
 800c998:	9902      	ldr	r1, [sp, #8]
 800c99a:	428e      	cmp	r6, r1
 800c99c:	d310      	bcc.n	800c9c0 <__mdiff+0x100>
 800c99e:	9e02      	ldr	r6, [sp, #8]
 800c9a0:	1ee9      	subs	r1, r5, #3
 800c9a2:	2400      	movs	r4, #0
 800c9a4:	428e      	cmp	r6, r1
 800c9a6:	d304      	bcc.n	800c9b2 <__mdiff+0xf2>
 800c9a8:	0031      	movs	r1, r6
 800c9aa:	3103      	adds	r1, #3
 800c9ac:	1b49      	subs	r1, r1, r5
 800c9ae:	0889      	lsrs	r1, r1, #2
 800c9b0:	008c      	lsls	r4, r1, #2
 800c9b2:	191b      	adds	r3, r3, r4
 800c9b4:	3b04      	subs	r3, #4
 800c9b6:	6819      	ldr	r1, [r3, #0]
 800c9b8:	2900      	cmp	r1, #0
 800c9ba:	d00f      	beq.n	800c9dc <__mdiff+0x11c>
 800c9bc:	6110      	str	r0, [r2, #16]
 800c9be:	e798      	b.n	800c8f2 <__mdiff+0x32>
 800c9c0:	ce02      	ldmia	r6!, {r1}
 800c9c2:	b28c      	uxth	r4, r1
 800c9c4:	19e4      	adds	r4, r4, r7
 800c9c6:	0c0f      	lsrs	r7, r1, #16
 800c9c8:	1421      	asrs	r1, r4, #16
 800c9ca:	1879      	adds	r1, r7, r1
 800c9cc:	b2a4      	uxth	r4, r4
 800c9ce:	140f      	asrs	r7, r1, #16
 800c9d0:	0409      	lsls	r1, r1, #16
 800c9d2:	4321      	orrs	r1, r4
 800c9d4:	4664      	mov	r4, ip
 800c9d6:	c402      	stmia	r4!, {r1}
 800c9d8:	46a4      	mov	ip, r4
 800c9da:	e7dd      	b.n	800c998 <__mdiff+0xd8>
 800c9dc:	3801      	subs	r0, #1
 800c9de:	e7e9      	b.n	800c9b4 <__mdiff+0xf4>
 800c9e0:	0800f309 	.word	0x0800f309
 800c9e4:	0800f31a 	.word	0x0800f31a
 800c9e8:	00000237 	.word	0x00000237
 800c9ec:	00000245 	.word	0x00000245

0800c9f0 <__ulp>:
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	4b0b      	ldr	r3, [pc, #44]	; (800ca20 <__ulp+0x30>)
 800c9f4:	4019      	ands	r1, r3
 800c9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ca24 <__ulp+0x34>)
 800c9f8:	18c9      	adds	r1, r1, r3
 800c9fa:	4281      	cmp	r1, r0
 800c9fc:	dc06      	bgt.n	800ca0c <__ulp+0x1c>
 800c9fe:	4249      	negs	r1, r1
 800ca00:	150b      	asrs	r3, r1, #20
 800ca02:	2b13      	cmp	r3, #19
 800ca04:	dc03      	bgt.n	800ca0e <__ulp+0x1e>
 800ca06:	2180      	movs	r1, #128	; 0x80
 800ca08:	0309      	lsls	r1, r1, #12
 800ca0a:	4119      	asrs	r1, r3
 800ca0c:	4770      	bx	lr
 800ca0e:	3b14      	subs	r3, #20
 800ca10:	2001      	movs	r0, #1
 800ca12:	2b1e      	cmp	r3, #30
 800ca14:	dc02      	bgt.n	800ca1c <__ulp+0x2c>
 800ca16:	2080      	movs	r0, #128	; 0x80
 800ca18:	0600      	lsls	r0, r0, #24
 800ca1a:	40d8      	lsrs	r0, r3
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	e7f5      	b.n	800ca0c <__ulp+0x1c>
 800ca20:	7ff00000 	.word	0x7ff00000
 800ca24:	fcc00000 	.word	0xfcc00000

0800ca28 <__b2d>:
 800ca28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca2a:	0006      	movs	r6, r0
 800ca2c:	6903      	ldr	r3, [r0, #16]
 800ca2e:	3614      	adds	r6, #20
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	18f3      	adds	r3, r6, r3
 800ca34:	1f1d      	subs	r5, r3, #4
 800ca36:	682c      	ldr	r4, [r5, #0]
 800ca38:	000f      	movs	r7, r1
 800ca3a:	0020      	movs	r0, r4
 800ca3c:	9301      	str	r3, [sp, #4]
 800ca3e:	f7ff fd49 	bl	800c4d4 <__hi0bits>
 800ca42:	2220      	movs	r2, #32
 800ca44:	1a12      	subs	r2, r2, r0
 800ca46:	603a      	str	r2, [r7, #0]
 800ca48:	0003      	movs	r3, r0
 800ca4a:	4a1c      	ldr	r2, [pc, #112]	; (800cabc <__b2d+0x94>)
 800ca4c:	280a      	cmp	r0, #10
 800ca4e:	dc15      	bgt.n	800ca7c <__b2d+0x54>
 800ca50:	210b      	movs	r1, #11
 800ca52:	0027      	movs	r7, r4
 800ca54:	1a09      	subs	r1, r1, r0
 800ca56:	40cf      	lsrs	r7, r1
 800ca58:	433a      	orrs	r2, r7
 800ca5a:	468c      	mov	ip, r1
 800ca5c:	0011      	movs	r1, r2
 800ca5e:	2200      	movs	r2, #0
 800ca60:	42ae      	cmp	r6, r5
 800ca62:	d202      	bcs.n	800ca6a <__b2d+0x42>
 800ca64:	9a01      	ldr	r2, [sp, #4]
 800ca66:	3a08      	subs	r2, #8
 800ca68:	6812      	ldr	r2, [r2, #0]
 800ca6a:	3315      	adds	r3, #21
 800ca6c:	409c      	lsls	r4, r3
 800ca6e:	4663      	mov	r3, ip
 800ca70:	0027      	movs	r7, r4
 800ca72:	40da      	lsrs	r2, r3
 800ca74:	4317      	orrs	r7, r2
 800ca76:	0038      	movs	r0, r7
 800ca78:	b003      	add	sp, #12
 800ca7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca7c:	2700      	movs	r7, #0
 800ca7e:	42ae      	cmp	r6, r5
 800ca80:	d202      	bcs.n	800ca88 <__b2d+0x60>
 800ca82:	9d01      	ldr	r5, [sp, #4]
 800ca84:	3d08      	subs	r5, #8
 800ca86:	682f      	ldr	r7, [r5, #0]
 800ca88:	210b      	movs	r1, #11
 800ca8a:	4249      	negs	r1, r1
 800ca8c:	468c      	mov	ip, r1
 800ca8e:	449c      	add	ip, r3
 800ca90:	2b0b      	cmp	r3, #11
 800ca92:	d010      	beq.n	800cab6 <__b2d+0x8e>
 800ca94:	4661      	mov	r1, ip
 800ca96:	2320      	movs	r3, #32
 800ca98:	408c      	lsls	r4, r1
 800ca9a:	1a5b      	subs	r3, r3, r1
 800ca9c:	0039      	movs	r1, r7
 800ca9e:	40d9      	lsrs	r1, r3
 800caa0:	430c      	orrs	r4, r1
 800caa2:	4322      	orrs	r2, r4
 800caa4:	0011      	movs	r1, r2
 800caa6:	2200      	movs	r2, #0
 800caa8:	42b5      	cmp	r5, r6
 800caaa:	d901      	bls.n	800cab0 <__b2d+0x88>
 800caac:	3d04      	subs	r5, #4
 800caae:	682a      	ldr	r2, [r5, #0]
 800cab0:	4664      	mov	r4, ip
 800cab2:	40a7      	lsls	r7, r4
 800cab4:	e7dd      	b.n	800ca72 <__b2d+0x4a>
 800cab6:	4322      	orrs	r2, r4
 800cab8:	0011      	movs	r1, r2
 800caba:	e7dc      	b.n	800ca76 <__b2d+0x4e>
 800cabc:	3ff00000 	.word	0x3ff00000

0800cac0 <__d2b>:
 800cac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cac2:	2101      	movs	r1, #1
 800cac4:	0014      	movs	r4, r2
 800cac6:	001d      	movs	r5, r3
 800cac8:	9f08      	ldr	r7, [sp, #32]
 800caca:	f7ff fc0b 	bl	800c2e4 <_Balloc>
 800cace:	1e06      	subs	r6, r0, #0
 800cad0:	d105      	bne.n	800cade <__d2b+0x1e>
 800cad2:	0032      	movs	r2, r6
 800cad4:	4b24      	ldr	r3, [pc, #144]	; (800cb68 <__d2b+0xa8>)
 800cad6:	4825      	ldr	r0, [pc, #148]	; (800cb6c <__d2b+0xac>)
 800cad8:	4925      	ldr	r1, [pc, #148]	; (800cb70 <__d2b+0xb0>)
 800cada:	f001 f9d1 	bl	800de80 <__assert_func>
 800cade:	032b      	lsls	r3, r5, #12
 800cae0:	006d      	lsls	r5, r5, #1
 800cae2:	0b1b      	lsrs	r3, r3, #12
 800cae4:	0d6d      	lsrs	r5, r5, #21
 800cae6:	d125      	bne.n	800cb34 <__d2b+0x74>
 800cae8:	9301      	str	r3, [sp, #4]
 800caea:	2c00      	cmp	r4, #0
 800caec:	d028      	beq.n	800cb40 <__d2b+0x80>
 800caee:	4668      	mov	r0, sp
 800caf0:	9400      	str	r4, [sp, #0]
 800caf2:	f7ff fd09 	bl	800c508 <__lo0bits>
 800caf6:	9b01      	ldr	r3, [sp, #4]
 800caf8:	9900      	ldr	r1, [sp, #0]
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d01e      	beq.n	800cb3c <__d2b+0x7c>
 800cafe:	2220      	movs	r2, #32
 800cb00:	001c      	movs	r4, r3
 800cb02:	1a12      	subs	r2, r2, r0
 800cb04:	4094      	lsls	r4, r2
 800cb06:	0022      	movs	r2, r4
 800cb08:	40c3      	lsrs	r3, r0
 800cb0a:	430a      	orrs	r2, r1
 800cb0c:	6172      	str	r2, [r6, #20]
 800cb0e:	9301      	str	r3, [sp, #4]
 800cb10:	9c01      	ldr	r4, [sp, #4]
 800cb12:	61b4      	str	r4, [r6, #24]
 800cb14:	1e63      	subs	r3, r4, #1
 800cb16:	419c      	sbcs	r4, r3
 800cb18:	3401      	adds	r4, #1
 800cb1a:	6134      	str	r4, [r6, #16]
 800cb1c:	2d00      	cmp	r5, #0
 800cb1e:	d017      	beq.n	800cb50 <__d2b+0x90>
 800cb20:	2435      	movs	r4, #53	; 0x35
 800cb22:	4b14      	ldr	r3, [pc, #80]	; (800cb74 <__d2b+0xb4>)
 800cb24:	18ed      	adds	r5, r5, r3
 800cb26:	182d      	adds	r5, r5, r0
 800cb28:	603d      	str	r5, [r7, #0]
 800cb2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb2c:	1a24      	subs	r4, r4, r0
 800cb2e:	601c      	str	r4, [r3, #0]
 800cb30:	0030      	movs	r0, r6
 800cb32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb34:	2280      	movs	r2, #128	; 0x80
 800cb36:	0352      	lsls	r2, r2, #13
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	e7d5      	b.n	800cae8 <__d2b+0x28>
 800cb3c:	6171      	str	r1, [r6, #20]
 800cb3e:	e7e7      	b.n	800cb10 <__d2b+0x50>
 800cb40:	a801      	add	r0, sp, #4
 800cb42:	f7ff fce1 	bl	800c508 <__lo0bits>
 800cb46:	9b01      	ldr	r3, [sp, #4]
 800cb48:	2401      	movs	r4, #1
 800cb4a:	6173      	str	r3, [r6, #20]
 800cb4c:	3020      	adds	r0, #32
 800cb4e:	e7e4      	b.n	800cb1a <__d2b+0x5a>
 800cb50:	4b09      	ldr	r3, [pc, #36]	; (800cb78 <__d2b+0xb8>)
 800cb52:	18c0      	adds	r0, r0, r3
 800cb54:	4b09      	ldr	r3, [pc, #36]	; (800cb7c <__d2b+0xbc>)
 800cb56:	6038      	str	r0, [r7, #0]
 800cb58:	18e3      	adds	r3, r4, r3
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	18f3      	adds	r3, r6, r3
 800cb5e:	6958      	ldr	r0, [r3, #20]
 800cb60:	f7ff fcb8 	bl	800c4d4 <__hi0bits>
 800cb64:	0164      	lsls	r4, r4, #5
 800cb66:	e7e0      	b.n	800cb2a <__d2b+0x6a>
 800cb68:	0800f309 	.word	0x0800f309
 800cb6c:	0800f31a 	.word	0x0800f31a
 800cb70:	0000030f 	.word	0x0000030f
 800cb74:	fffffbcd 	.word	0xfffffbcd
 800cb78:	fffffbce 	.word	0xfffffbce
 800cb7c:	3fffffff 	.word	0x3fffffff

0800cb80 <__ratio>:
 800cb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb82:	b087      	sub	sp, #28
 800cb84:	000f      	movs	r7, r1
 800cb86:	a904      	add	r1, sp, #16
 800cb88:	0006      	movs	r6, r0
 800cb8a:	f7ff ff4d 	bl	800ca28 <__b2d>
 800cb8e:	9000      	str	r0, [sp, #0]
 800cb90:	9101      	str	r1, [sp, #4]
 800cb92:	9c00      	ldr	r4, [sp, #0]
 800cb94:	9d01      	ldr	r5, [sp, #4]
 800cb96:	0038      	movs	r0, r7
 800cb98:	a905      	add	r1, sp, #20
 800cb9a:	f7ff ff45 	bl	800ca28 <__b2d>
 800cb9e:	9002      	str	r0, [sp, #8]
 800cba0:	9103      	str	r1, [sp, #12]
 800cba2:	9a02      	ldr	r2, [sp, #8]
 800cba4:	9b03      	ldr	r3, [sp, #12]
 800cba6:	6930      	ldr	r0, [r6, #16]
 800cba8:	6939      	ldr	r1, [r7, #16]
 800cbaa:	9e04      	ldr	r6, [sp, #16]
 800cbac:	1a40      	subs	r0, r0, r1
 800cbae:	9905      	ldr	r1, [sp, #20]
 800cbb0:	0140      	lsls	r0, r0, #5
 800cbb2:	1a71      	subs	r1, r6, r1
 800cbb4:	1841      	adds	r1, r0, r1
 800cbb6:	0508      	lsls	r0, r1, #20
 800cbb8:	2900      	cmp	r1, #0
 800cbba:	dd07      	ble.n	800cbcc <__ratio+0x4c>
 800cbbc:	9901      	ldr	r1, [sp, #4]
 800cbbe:	1845      	adds	r5, r0, r1
 800cbc0:	0020      	movs	r0, r4
 800cbc2:	0029      	movs	r1, r5
 800cbc4:	f7f4 fe4e 	bl	8001864 <__aeabi_ddiv>
 800cbc8:	b007      	add	sp, #28
 800cbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbcc:	9903      	ldr	r1, [sp, #12]
 800cbce:	1a0b      	subs	r3, r1, r0
 800cbd0:	e7f6      	b.n	800cbc0 <__ratio+0x40>

0800cbd2 <__copybits>:
 800cbd2:	b570      	push	{r4, r5, r6, lr}
 800cbd4:	0014      	movs	r4, r2
 800cbd6:	0005      	movs	r5, r0
 800cbd8:	3901      	subs	r1, #1
 800cbda:	6913      	ldr	r3, [r2, #16]
 800cbdc:	1149      	asrs	r1, r1, #5
 800cbde:	3101      	adds	r1, #1
 800cbe0:	0089      	lsls	r1, r1, #2
 800cbe2:	3414      	adds	r4, #20
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	1841      	adds	r1, r0, r1
 800cbe8:	18e3      	adds	r3, r4, r3
 800cbea:	42a3      	cmp	r3, r4
 800cbec:	d80d      	bhi.n	800cc0a <__copybits+0x38>
 800cbee:	0014      	movs	r4, r2
 800cbf0:	3411      	adds	r4, #17
 800cbf2:	2500      	movs	r5, #0
 800cbf4:	429c      	cmp	r4, r3
 800cbf6:	d803      	bhi.n	800cc00 <__copybits+0x2e>
 800cbf8:	1a9b      	subs	r3, r3, r2
 800cbfa:	3b11      	subs	r3, #17
 800cbfc:	089b      	lsrs	r3, r3, #2
 800cbfe:	009d      	lsls	r5, r3, #2
 800cc00:	2300      	movs	r3, #0
 800cc02:	1940      	adds	r0, r0, r5
 800cc04:	4281      	cmp	r1, r0
 800cc06:	d803      	bhi.n	800cc10 <__copybits+0x3e>
 800cc08:	bd70      	pop	{r4, r5, r6, pc}
 800cc0a:	cc40      	ldmia	r4!, {r6}
 800cc0c:	c540      	stmia	r5!, {r6}
 800cc0e:	e7ec      	b.n	800cbea <__copybits+0x18>
 800cc10:	c008      	stmia	r0!, {r3}
 800cc12:	e7f7      	b.n	800cc04 <__copybits+0x32>

0800cc14 <__any_on>:
 800cc14:	0002      	movs	r2, r0
 800cc16:	6900      	ldr	r0, [r0, #16]
 800cc18:	b510      	push	{r4, lr}
 800cc1a:	3214      	adds	r2, #20
 800cc1c:	114b      	asrs	r3, r1, #5
 800cc1e:	4298      	cmp	r0, r3
 800cc20:	db13      	blt.n	800cc4a <__any_on+0x36>
 800cc22:	dd0c      	ble.n	800cc3e <__any_on+0x2a>
 800cc24:	241f      	movs	r4, #31
 800cc26:	0008      	movs	r0, r1
 800cc28:	4020      	ands	r0, r4
 800cc2a:	4221      	tst	r1, r4
 800cc2c:	d007      	beq.n	800cc3e <__any_on+0x2a>
 800cc2e:	0099      	lsls	r1, r3, #2
 800cc30:	588c      	ldr	r4, [r1, r2]
 800cc32:	0021      	movs	r1, r4
 800cc34:	40c1      	lsrs	r1, r0
 800cc36:	4081      	lsls	r1, r0
 800cc38:	2001      	movs	r0, #1
 800cc3a:	428c      	cmp	r4, r1
 800cc3c:	d104      	bne.n	800cc48 <__any_on+0x34>
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	18d3      	adds	r3, r2, r3
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d803      	bhi.n	800cc4e <__any_on+0x3a>
 800cc46:	2000      	movs	r0, #0
 800cc48:	bd10      	pop	{r4, pc}
 800cc4a:	0003      	movs	r3, r0
 800cc4c:	e7f7      	b.n	800cc3e <__any_on+0x2a>
 800cc4e:	3b04      	subs	r3, #4
 800cc50:	6819      	ldr	r1, [r3, #0]
 800cc52:	2900      	cmp	r1, #0
 800cc54:	d0f5      	beq.n	800cc42 <__any_on+0x2e>
 800cc56:	2001      	movs	r0, #1
 800cc58:	e7f6      	b.n	800cc48 <__any_on+0x34>
	...

0800cc5c <sulp>:
 800cc5c:	b570      	push	{r4, r5, r6, lr}
 800cc5e:	0016      	movs	r6, r2
 800cc60:	000d      	movs	r5, r1
 800cc62:	f7ff fec5 	bl	800c9f0 <__ulp>
 800cc66:	2e00      	cmp	r6, #0
 800cc68:	d00d      	beq.n	800cc86 <sulp+0x2a>
 800cc6a:	236b      	movs	r3, #107	; 0x6b
 800cc6c:	006a      	lsls	r2, r5, #1
 800cc6e:	0d52      	lsrs	r2, r2, #21
 800cc70:	1a9b      	subs	r3, r3, r2
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	dd07      	ble.n	800cc86 <sulp+0x2a>
 800cc76:	2400      	movs	r4, #0
 800cc78:	4a03      	ldr	r2, [pc, #12]	; (800cc88 <sulp+0x2c>)
 800cc7a:	051b      	lsls	r3, r3, #20
 800cc7c:	189d      	adds	r5, r3, r2
 800cc7e:	002b      	movs	r3, r5
 800cc80:	0022      	movs	r2, r4
 800cc82:	f7f5 f9e9 	bl	8002058 <__aeabi_dmul>
 800cc86:	bd70      	pop	{r4, r5, r6, pc}
 800cc88:	3ff00000 	.word	0x3ff00000

0800cc8c <_strtod_l>:
 800cc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc8e:	b0a1      	sub	sp, #132	; 0x84
 800cc90:	9219      	str	r2, [sp, #100]	; 0x64
 800cc92:	2200      	movs	r2, #0
 800cc94:	2600      	movs	r6, #0
 800cc96:	2700      	movs	r7, #0
 800cc98:	9004      	str	r0, [sp, #16]
 800cc9a:	9107      	str	r1, [sp, #28]
 800cc9c:	921c      	str	r2, [sp, #112]	; 0x70
 800cc9e:	911b      	str	r1, [sp, #108]	; 0x6c
 800cca0:	780a      	ldrb	r2, [r1, #0]
 800cca2:	2a2b      	cmp	r2, #43	; 0x2b
 800cca4:	d055      	beq.n	800cd52 <_strtod_l+0xc6>
 800cca6:	d841      	bhi.n	800cd2c <_strtod_l+0xa0>
 800cca8:	2a0d      	cmp	r2, #13
 800ccaa:	d83b      	bhi.n	800cd24 <_strtod_l+0x98>
 800ccac:	2a08      	cmp	r2, #8
 800ccae:	d83b      	bhi.n	800cd28 <_strtod_l+0x9c>
 800ccb0:	2a00      	cmp	r2, #0
 800ccb2:	d044      	beq.n	800cd3e <_strtod_l+0xb2>
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	920f      	str	r2, [sp, #60]	; 0x3c
 800ccb8:	2100      	movs	r1, #0
 800ccba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ccbc:	9109      	str	r1, [sp, #36]	; 0x24
 800ccbe:	782a      	ldrb	r2, [r5, #0]
 800ccc0:	2a30      	cmp	r2, #48	; 0x30
 800ccc2:	d000      	beq.n	800ccc6 <_strtod_l+0x3a>
 800ccc4:	e085      	b.n	800cdd2 <_strtod_l+0x146>
 800ccc6:	786a      	ldrb	r2, [r5, #1]
 800ccc8:	3120      	adds	r1, #32
 800ccca:	438a      	bics	r2, r1
 800cccc:	2a58      	cmp	r2, #88	; 0x58
 800ccce:	d000      	beq.n	800ccd2 <_strtod_l+0x46>
 800ccd0:	e075      	b.n	800cdbe <_strtod_l+0x132>
 800ccd2:	9302      	str	r3, [sp, #8]
 800ccd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccd6:	4a97      	ldr	r2, [pc, #604]	; (800cf34 <_strtod_l+0x2a8>)
 800ccd8:	9301      	str	r3, [sp, #4]
 800ccda:	ab1c      	add	r3, sp, #112	; 0x70
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	9804      	ldr	r0, [sp, #16]
 800cce0:	ab1d      	add	r3, sp, #116	; 0x74
 800cce2:	a91b      	add	r1, sp, #108	; 0x6c
 800cce4:	f001 f982 	bl	800dfec <__gethex>
 800cce8:	230f      	movs	r3, #15
 800ccea:	0002      	movs	r2, r0
 800ccec:	401a      	ands	r2, r3
 800ccee:	0004      	movs	r4, r0
 800ccf0:	9205      	str	r2, [sp, #20]
 800ccf2:	4218      	tst	r0, r3
 800ccf4:	d005      	beq.n	800cd02 <_strtod_l+0x76>
 800ccf6:	2a06      	cmp	r2, #6
 800ccf8:	d12d      	bne.n	800cd56 <_strtod_l+0xca>
 800ccfa:	1c6b      	adds	r3, r5, #1
 800ccfc:	931b      	str	r3, [sp, #108]	; 0x6c
 800ccfe:	2300      	movs	r3, #0
 800cd00:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d002      	beq.n	800cd0e <_strtod_l+0x82>
 800cd08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cd0c:	6013      	str	r3, [r2, #0]
 800cd0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d01b      	beq.n	800cd4c <_strtod_l+0xc0>
 800cd14:	2380      	movs	r3, #128	; 0x80
 800cd16:	0032      	movs	r2, r6
 800cd18:	061b      	lsls	r3, r3, #24
 800cd1a:	18fb      	adds	r3, r7, r3
 800cd1c:	0010      	movs	r0, r2
 800cd1e:	0019      	movs	r1, r3
 800cd20:	b021      	add	sp, #132	; 0x84
 800cd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd24:	2a20      	cmp	r2, #32
 800cd26:	d1c5      	bne.n	800ccb4 <_strtod_l+0x28>
 800cd28:	3101      	adds	r1, #1
 800cd2a:	e7b8      	b.n	800cc9e <_strtod_l+0x12>
 800cd2c:	2a2d      	cmp	r2, #45	; 0x2d
 800cd2e:	d1c1      	bne.n	800ccb4 <_strtod_l+0x28>
 800cd30:	3a2c      	subs	r2, #44	; 0x2c
 800cd32:	920f      	str	r2, [sp, #60]	; 0x3c
 800cd34:	1c4a      	adds	r2, r1, #1
 800cd36:	921b      	str	r2, [sp, #108]	; 0x6c
 800cd38:	784a      	ldrb	r2, [r1, #1]
 800cd3a:	2a00      	cmp	r2, #0
 800cd3c:	d1bc      	bne.n	800ccb8 <_strtod_l+0x2c>
 800cd3e:	9b07      	ldr	r3, [sp, #28]
 800cd40:	931b      	str	r3, [sp, #108]	; 0x6c
 800cd42:	2300      	movs	r3, #0
 800cd44:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1dd      	bne.n	800cd08 <_strtod_l+0x7c>
 800cd4c:	0032      	movs	r2, r6
 800cd4e:	003b      	movs	r3, r7
 800cd50:	e7e4      	b.n	800cd1c <_strtod_l+0x90>
 800cd52:	2200      	movs	r2, #0
 800cd54:	e7ed      	b.n	800cd32 <_strtod_l+0xa6>
 800cd56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cd58:	2a00      	cmp	r2, #0
 800cd5a:	d007      	beq.n	800cd6c <_strtod_l+0xe0>
 800cd5c:	2135      	movs	r1, #53	; 0x35
 800cd5e:	a81e      	add	r0, sp, #120	; 0x78
 800cd60:	f7ff ff37 	bl	800cbd2 <__copybits>
 800cd64:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd66:	9804      	ldr	r0, [sp, #16]
 800cd68:	f7ff fb00 	bl	800c36c <_Bfree>
 800cd6c:	9805      	ldr	r0, [sp, #20]
 800cd6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd70:	3801      	subs	r0, #1
 800cd72:	2804      	cmp	r0, #4
 800cd74:	d806      	bhi.n	800cd84 <_strtod_l+0xf8>
 800cd76:	f7f3 f9cf 	bl	8000118 <__gnu_thumb1_case_uqi>
 800cd7a:	0312      	.short	0x0312
 800cd7c:	1e1c      	.short	0x1e1c
 800cd7e:	12          	.byte	0x12
 800cd7f:	00          	.byte	0x00
 800cd80:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cd82:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800cd84:	05e4      	lsls	r4, r4, #23
 800cd86:	d502      	bpl.n	800cd8e <_strtod_l+0x102>
 800cd88:	2380      	movs	r3, #128	; 0x80
 800cd8a:	061b      	lsls	r3, r3, #24
 800cd8c:	431f      	orrs	r7, r3
 800cd8e:	4b6a      	ldr	r3, [pc, #424]	; (800cf38 <_strtod_l+0x2ac>)
 800cd90:	423b      	tst	r3, r7
 800cd92:	d1b6      	bne.n	800cd02 <_strtod_l+0x76>
 800cd94:	f7fe fac4 	bl	800b320 <__errno>
 800cd98:	2322      	movs	r3, #34	; 0x22
 800cd9a:	6003      	str	r3, [r0, #0]
 800cd9c:	e7b1      	b.n	800cd02 <_strtod_l+0x76>
 800cd9e:	4967      	ldr	r1, [pc, #412]	; (800cf3c <_strtod_l+0x2b0>)
 800cda0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cda2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cda4:	400a      	ands	r2, r1
 800cda6:	4966      	ldr	r1, [pc, #408]	; (800cf40 <_strtod_l+0x2b4>)
 800cda8:	185b      	adds	r3, r3, r1
 800cdaa:	051b      	lsls	r3, r3, #20
 800cdac:	431a      	orrs	r2, r3
 800cdae:	0017      	movs	r7, r2
 800cdb0:	e7e8      	b.n	800cd84 <_strtod_l+0xf8>
 800cdb2:	4f61      	ldr	r7, [pc, #388]	; (800cf38 <_strtod_l+0x2ac>)
 800cdb4:	e7e6      	b.n	800cd84 <_strtod_l+0xf8>
 800cdb6:	2601      	movs	r6, #1
 800cdb8:	4f62      	ldr	r7, [pc, #392]	; (800cf44 <_strtod_l+0x2b8>)
 800cdba:	4276      	negs	r6, r6
 800cdbc:	e7e2      	b.n	800cd84 <_strtod_l+0xf8>
 800cdbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdc0:	1c5a      	adds	r2, r3, #1
 800cdc2:	921b      	str	r2, [sp, #108]	; 0x6c
 800cdc4:	785b      	ldrb	r3, [r3, #1]
 800cdc6:	2b30      	cmp	r3, #48	; 0x30
 800cdc8:	d0f9      	beq.n	800cdbe <_strtod_l+0x132>
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d099      	beq.n	800cd02 <_strtod_l+0x76>
 800cdce:	2301      	movs	r3, #1
 800cdd0:	9309      	str	r3, [sp, #36]	; 0x24
 800cdd2:	2500      	movs	r5, #0
 800cdd4:	220a      	movs	r2, #10
 800cdd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdd8:	950d      	str	r5, [sp, #52]	; 0x34
 800cdda:	9310      	str	r3, [sp, #64]	; 0x40
 800cddc:	9508      	str	r5, [sp, #32]
 800cdde:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800cde0:	7804      	ldrb	r4, [r0, #0]
 800cde2:	0023      	movs	r3, r4
 800cde4:	3b30      	subs	r3, #48	; 0x30
 800cde6:	b2d9      	uxtb	r1, r3
 800cde8:	2909      	cmp	r1, #9
 800cdea:	d927      	bls.n	800ce3c <_strtod_l+0x1b0>
 800cdec:	2201      	movs	r2, #1
 800cdee:	4956      	ldr	r1, [pc, #344]	; (800cf48 <_strtod_l+0x2bc>)
 800cdf0:	f001 f812 	bl	800de18 <strncmp>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d031      	beq.n	800ce5c <_strtod_l+0x1d0>
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	0023      	movs	r3, r4
 800cdfc:	4684      	mov	ip, r0
 800cdfe:	9a08      	ldr	r2, [sp, #32]
 800ce00:	900c      	str	r0, [sp, #48]	; 0x30
 800ce02:	9205      	str	r2, [sp, #20]
 800ce04:	2220      	movs	r2, #32
 800ce06:	0019      	movs	r1, r3
 800ce08:	4391      	bics	r1, r2
 800ce0a:	000a      	movs	r2, r1
 800ce0c:	2100      	movs	r1, #0
 800ce0e:	9106      	str	r1, [sp, #24]
 800ce10:	2a45      	cmp	r2, #69	; 0x45
 800ce12:	d000      	beq.n	800ce16 <_strtod_l+0x18a>
 800ce14:	e0c2      	b.n	800cf9c <_strtod_l+0x310>
 800ce16:	9b05      	ldr	r3, [sp, #20]
 800ce18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce1a:	4303      	orrs	r3, r0
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	428b      	cmp	r3, r1
 800ce20:	d08d      	beq.n	800cd3e <_strtod_l+0xb2>
 800ce22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce24:	9307      	str	r3, [sp, #28]
 800ce26:	3301      	adds	r3, #1
 800ce28:	931b      	str	r3, [sp, #108]	; 0x6c
 800ce2a:	9b07      	ldr	r3, [sp, #28]
 800ce2c:	785b      	ldrb	r3, [r3, #1]
 800ce2e:	2b2b      	cmp	r3, #43	; 0x2b
 800ce30:	d071      	beq.n	800cf16 <_strtod_l+0x28a>
 800ce32:	000c      	movs	r4, r1
 800ce34:	2b2d      	cmp	r3, #45	; 0x2d
 800ce36:	d174      	bne.n	800cf22 <_strtod_l+0x296>
 800ce38:	2401      	movs	r4, #1
 800ce3a:	e06d      	b.n	800cf18 <_strtod_l+0x28c>
 800ce3c:	9908      	ldr	r1, [sp, #32]
 800ce3e:	2908      	cmp	r1, #8
 800ce40:	dc09      	bgt.n	800ce56 <_strtod_l+0x1ca>
 800ce42:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ce44:	4351      	muls	r1, r2
 800ce46:	185b      	adds	r3, r3, r1
 800ce48:	930d      	str	r3, [sp, #52]	; 0x34
 800ce4a:	9b08      	ldr	r3, [sp, #32]
 800ce4c:	3001      	adds	r0, #1
 800ce4e:	3301      	adds	r3, #1
 800ce50:	9308      	str	r3, [sp, #32]
 800ce52:	901b      	str	r0, [sp, #108]	; 0x6c
 800ce54:	e7c3      	b.n	800cdde <_strtod_l+0x152>
 800ce56:	4355      	muls	r5, r2
 800ce58:	195d      	adds	r5, r3, r5
 800ce5a:	e7f6      	b.n	800ce4a <_strtod_l+0x1be>
 800ce5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce5e:	1c5a      	adds	r2, r3, #1
 800ce60:	921b      	str	r2, [sp, #108]	; 0x6c
 800ce62:	9a08      	ldr	r2, [sp, #32]
 800ce64:	785b      	ldrb	r3, [r3, #1]
 800ce66:	2a00      	cmp	r2, #0
 800ce68:	d03a      	beq.n	800cee0 <_strtod_l+0x254>
 800ce6a:	900c      	str	r0, [sp, #48]	; 0x30
 800ce6c:	9205      	str	r2, [sp, #20]
 800ce6e:	001a      	movs	r2, r3
 800ce70:	3a30      	subs	r2, #48	; 0x30
 800ce72:	2a09      	cmp	r2, #9
 800ce74:	d912      	bls.n	800ce9c <_strtod_l+0x210>
 800ce76:	2201      	movs	r2, #1
 800ce78:	4694      	mov	ip, r2
 800ce7a:	e7c3      	b.n	800ce04 <_strtod_l+0x178>
 800ce7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce7e:	3001      	adds	r0, #1
 800ce80:	1c5a      	adds	r2, r3, #1
 800ce82:	921b      	str	r2, [sp, #108]	; 0x6c
 800ce84:	785b      	ldrb	r3, [r3, #1]
 800ce86:	2b30      	cmp	r3, #48	; 0x30
 800ce88:	d0f8      	beq.n	800ce7c <_strtod_l+0x1f0>
 800ce8a:	001a      	movs	r2, r3
 800ce8c:	3a31      	subs	r2, #49	; 0x31
 800ce8e:	2a08      	cmp	r2, #8
 800ce90:	d83c      	bhi.n	800cf0c <_strtod_l+0x280>
 800ce92:	900c      	str	r0, [sp, #48]	; 0x30
 800ce94:	2000      	movs	r0, #0
 800ce96:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ce98:	9005      	str	r0, [sp, #20]
 800ce9a:	9210      	str	r2, [sp, #64]	; 0x40
 800ce9c:	001a      	movs	r2, r3
 800ce9e:	1c41      	adds	r1, r0, #1
 800cea0:	3a30      	subs	r2, #48	; 0x30
 800cea2:	2b30      	cmp	r3, #48	; 0x30
 800cea4:	d016      	beq.n	800ced4 <_strtod_l+0x248>
 800cea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cea8:	185b      	adds	r3, r3, r1
 800ceaa:	930c      	str	r3, [sp, #48]	; 0x30
 800ceac:	9b05      	ldr	r3, [sp, #20]
 800ceae:	210a      	movs	r1, #10
 800ceb0:	469c      	mov	ip, r3
 800ceb2:	4484      	add	ip, r0
 800ceb4:	4563      	cmp	r3, ip
 800ceb6:	d115      	bne.n	800cee4 <_strtod_l+0x258>
 800ceb8:	9905      	ldr	r1, [sp, #20]
 800ceba:	9b05      	ldr	r3, [sp, #20]
 800cebc:	3101      	adds	r1, #1
 800cebe:	1809      	adds	r1, r1, r0
 800cec0:	181b      	adds	r3, r3, r0
 800cec2:	9105      	str	r1, [sp, #20]
 800cec4:	2b08      	cmp	r3, #8
 800cec6:	dc19      	bgt.n	800cefc <_strtod_l+0x270>
 800cec8:	230a      	movs	r3, #10
 800ceca:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cecc:	434b      	muls	r3, r1
 800cece:	2100      	movs	r1, #0
 800ced0:	18d3      	adds	r3, r2, r3
 800ced2:	930d      	str	r3, [sp, #52]	; 0x34
 800ced4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ced6:	0008      	movs	r0, r1
 800ced8:	1c5a      	adds	r2, r3, #1
 800ceda:	921b      	str	r2, [sp, #108]	; 0x6c
 800cedc:	785b      	ldrb	r3, [r3, #1]
 800cede:	e7c6      	b.n	800ce6e <_strtod_l+0x1e2>
 800cee0:	9808      	ldr	r0, [sp, #32]
 800cee2:	e7d0      	b.n	800ce86 <_strtod_l+0x1fa>
 800cee4:	1c5c      	adds	r4, r3, #1
 800cee6:	2b08      	cmp	r3, #8
 800cee8:	dc04      	bgt.n	800cef4 <_strtod_l+0x268>
 800ceea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ceec:	434b      	muls	r3, r1
 800ceee:	930d      	str	r3, [sp, #52]	; 0x34
 800cef0:	0023      	movs	r3, r4
 800cef2:	e7df      	b.n	800ceb4 <_strtod_l+0x228>
 800cef4:	2c10      	cmp	r4, #16
 800cef6:	dcfb      	bgt.n	800cef0 <_strtod_l+0x264>
 800cef8:	434d      	muls	r5, r1
 800cefa:	e7f9      	b.n	800cef0 <_strtod_l+0x264>
 800cefc:	9b05      	ldr	r3, [sp, #20]
 800cefe:	2100      	movs	r1, #0
 800cf00:	2b10      	cmp	r3, #16
 800cf02:	dce7      	bgt.n	800ced4 <_strtod_l+0x248>
 800cf04:	230a      	movs	r3, #10
 800cf06:	435d      	muls	r5, r3
 800cf08:	1955      	adds	r5, r2, r5
 800cf0a:	e7e3      	b.n	800ced4 <_strtod_l+0x248>
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	920c      	str	r2, [sp, #48]	; 0x30
 800cf10:	9205      	str	r2, [sp, #20]
 800cf12:	3201      	adds	r2, #1
 800cf14:	e7b0      	b.n	800ce78 <_strtod_l+0x1ec>
 800cf16:	2400      	movs	r4, #0
 800cf18:	9b07      	ldr	r3, [sp, #28]
 800cf1a:	3302      	adds	r3, #2
 800cf1c:	931b      	str	r3, [sp, #108]	; 0x6c
 800cf1e:	9b07      	ldr	r3, [sp, #28]
 800cf20:	789b      	ldrb	r3, [r3, #2]
 800cf22:	001a      	movs	r2, r3
 800cf24:	3a30      	subs	r2, #48	; 0x30
 800cf26:	2a09      	cmp	r2, #9
 800cf28:	d914      	bls.n	800cf54 <_strtod_l+0x2c8>
 800cf2a:	9a07      	ldr	r2, [sp, #28]
 800cf2c:	921b      	str	r2, [sp, #108]	; 0x6c
 800cf2e:	2200      	movs	r2, #0
 800cf30:	e033      	b.n	800cf9a <_strtod_l+0x30e>
 800cf32:	46c0      	nop			; (mov r8, r8)
 800cf34:	0800f478 	.word	0x0800f478
 800cf38:	7ff00000 	.word	0x7ff00000
 800cf3c:	ffefffff 	.word	0xffefffff
 800cf40:	00000433 	.word	0x00000433
 800cf44:	7fffffff 	.word	0x7fffffff
 800cf48:	0800f474 	.word	0x0800f474
 800cf4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	921b      	str	r2, [sp, #108]	; 0x6c
 800cf52:	785b      	ldrb	r3, [r3, #1]
 800cf54:	2b30      	cmp	r3, #48	; 0x30
 800cf56:	d0f9      	beq.n	800cf4c <_strtod_l+0x2c0>
 800cf58:	2200      	movs	r2, #0
 800cf5a:	9206      	str	r2, [sp, #24]
 800cf5c:	001a      	movs	r2, r3
 800cf5e:	3a31      	subs	r2, #49	; 0x31
 800cf60:	2a08      	cmp	r2, #8
 800cf62:	d81b      	bhi.n	800cf9c <_strtod_l+0x310>
 800cf64:	3b30      	subs	r3, #48	; 0x30
 800cf66:	930e      	str	r3, [sp, #56]	; 0x38
 800cf68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf6a:	9306      	str	r3, [sp, #24]
 800cf6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf6e:	1c59      	adds	r1, r3, #1
 800cf70:	911b      	str	r1, [sp, #108]	; 0x6c
 800cf72:	785b      	ldrb	r3, [r3, #1]
 800cf74:	001a      	movs	r2, r3
 800cf76:	3a30      	subs	r2, #48	; 0x30
 800cf78:	2a09      	cmp	r2, #9
 800cf7a:	d93a      	bls.n	800cff2 <_strtod_l+0x366>
 800cf7c:	9a06      	ldr	r2, [sp, #24]
 800cf7e:	1a8a      	subs	r2, r1, r2
 800cf80:	49b2      	ldr	r1, [pc, #712]	; (800d24c <_strtod_l+0x5c0>)
 800cf82:	9106      	str	r1, [sp, #24]
 800cf84:	2a08      	cmp	r2, #8
 800cf86:	dc04      	bgt.n	800cf92 <_strtod_l+0x306>
 800cf88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf8a:	9206      	str	r2, [sp, #24]
 800cf8c:	428a      	cmp	r2, r1
 800cf8e:	dd00      	ble.n	800cf92 <_strtod_l+0x306>
 800cf90:	9106      	str	r1, [sp, #24]
 800cf92:	2c00      	cmp	r4, #0
 800cf94:	d002      	beq.n	800cf9c <_strtod_l+0x310>
 800cf96:	9a06      	ldr	r2, [sp, #24]
 800cf98:	4252      	negs	r2, r2
 800cf9a:	9206      	str	r2, [sp, #24]
 800cf9c:	9a05      	ldr	r2, [sp, #20]
 800cf9e:	2a00      	cmp	r2, #0
 800cfa0:	d14d      	bne.n	800d03e <_strtod_l+0x3b2>
 800cfa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfa4:	4310      	orrs	r0, r2
 800cfa6:	d000      	beq.n	800cfaa <_strtod_l+0x31e>
 800cfa8:	e6ab      	b.n	800cd02 <_strtod_l+0x76>
 800cfaa:	4662      	mov	r2, ip
 800cfac:	2a00      	cmp	r2, #0
 800cfae:	d000      	beq.n	800cfb2 <_strtod_l+0x326>
 800cfb0:	e6c5      	b.n	800cd3e <_strtod_l+0xb2>
 800cfb2:	2b69      	cmp	r3, #105	; 0x69
 800cfb4:	d027      	beq.n	800d006 <_strtod_l+0x37a>
 800cfb6:	dc23      	bgt.n	800d000 <_strtod_l+0x374>
 800cfb8:	2b49      	cmp	r3, #73	; 0x49
 800cfba:	d024      	beq.n	800d006 <_strtod_l+0x37a>
 800cfbc:	2b4e      	cmp	r3, #78	; 0x4e
 800cfbe:	d000      	beq.n	800cfc2 <_strtod_l+0x336>
 800cfc0:	e6bd      	b.n	800cd3e <_strtod_l+0xb2>
 800cfc2:	49a3      	ldr	r1, [pc, #652]	; (800d250 <_strtod_l+0x5c4>)
 800cfc4:	a81b      	add	r0, sp, #108	; 0x6c
 800cfc6:	f001 fa47 	bl	800e458 <__match>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d100      	bne.n	800cfd0 <_strtod_l+0x344>
 800cfce:	e6b6      	b.n	800cd3e <_strtod_l+0xb2>
 800cfd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	2b28      	cmp	r3, #40	; 0x28
 800cfd6:	d12c      	bne.n	800d032 <_strtod_l+0x3a6>
 800cfd8:	499e      	ldr	r1, [pc, #632]	; (800d254 <_strtod_l+0x5c8>)
 800cfda:	aa1e      	add	r2, sp, #120	; 0x78
 800cfdc:	a81b      	add	r0, sp, #108	; 0x6c
 800cfde:	f001 fa4f 	bl	800e480 <__hexnan>
 800cfe2:	2805      	cmp	r0, #5
 800cfe4:	d125      	bne.n	800d032 <_strtod_l+0x3a6>
 800cfe6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cfe8:	4a9b      	ldr	r2, [pc, #620]	; (800d258 <_strtod_l+0x5cc>)
 800cfea:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cfec:	431a      	orrs	r2, r3
 800cfee:	0017      	movs	r7, r2
 800cff0:	e687      	b.n	800cd02 <_strtod_l+0x76>
 800cff2:	220a      	movs	r2, #10
 800cff4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cff6:	434a      	muls	r2, r1
 800cff8:	18d2      	adds	r2, r2, r3
 800cffa:	3a30      	subs	r2, #48	; 0x30
 800cffc:	920e      	str	r2, [sp, #56]	; 0x38
 800cffe:	e7b5      	b.n	800cf6c <_strtod_l+0x2e0>
 800d000:	2b6e      	cmp	r3, #110	; 0x6e
 800d002:	d0de      	beq.n	800cfc2 <_strtod_l+0x336>
 800d004:	e69b      	b.n	800cd3e <_strtod_l+0xb2>
 800d006:	4995      	ldr	r1, [pc, #596]	; (800d25c <_strtod_l+0x5d0>)
 800d008:	a81b      	add	r0, sp, #108	; 0x6c
 800d00a:	f001 fa25 	bl	800e458 <__match>
 800d00e:	2800      	cmp	r0, #0
 800d010:	d100      	bne.n	800d014 <_strtod_l+0x388>
 800d012:	e694      	b.n	800cd3e <_strtod_l+0xb2>
 800d014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d016:	4992      	ldr	r1, [pc, #584]	; (800d260 <_strtod_l+0x5d4>)
 800d018:	3b01      	subs	r3, #1
 800d01a:	a81b      	add	r0, sp, #108	; 0x6c
 800d01c:	931b      	str	r3, [sp, #108]	; 0x6c
 800d01e:	f001 fa1b 	bl	800e458 <__match>
 800d022:	2800      	cmp	r0, #0
 800d024:	d102      	bne.n	800d02c <_strtod_l+0x3a0>
 800d026:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d028:	3301      	adds	r3, #1
 800d02a:	931b      	str	r3, [sp, #108]	; 0x6c
 800d02c:	2600      	movs	r6, #0
 800d02e:	4f8a      	ldr	r7, [pc, #552]	; (800d258 <_strtod_l+0x5cc>)
 800d030:	e667      	b.n	800cd02 <_strtod_l+0x76>
 800d032:	488c      	ldr	r0, [pc, #560]	; (800d264 <_strtod_l+0x5d8>)
 800d034:	f000 ff1e 	bl	800de74 <nan>
 800d038:	0006      	movs	r6, r0
 800d03a:	000f      	movs	r7, r1
 800d03c:	e661      	b.n	800cd02 <_strtod_l+0x76>
 800d03e:	9b06      	ldr	r3, [sp, #24]
 800d040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d042:	1a9b      	subs	r3, r3, r2
 800d044:	9309      	str	r3, [sp, #36]	; 0x24
 800d046:	9b08      	ldr	r3, [sp, #32]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d101      	bne.n	800d050 <_strtod_l+0x3c4>
 800d04c:	9b05      	ldr	r3, [sp, #20]
 800d04e:	9308      	str	r3, [sp, #32]
 800d050:	9c05      	ldr	r4, [sp, #20]
 800d052:	2c10      	cmp	r4, #16
 800d054:	dd00      	ble.n	800d058 <_strtod_l+0x3cc>
 800d056:	2410      	movs	r4, #16
 800d058:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d05a:	f7f5 fec5 	bl	8002de8 <__aeabi_ui2d>
 800d05e:	9b05      	ldr	r3, [sp, #20]
 800d060:	0006      	movs	r6, r0
 800d062:	000f      	movs	r7, r1
 800d064:	2b09      	cmp	r3, #9
 800d066:	dd15      	ble.n	800d094 <_strtod_l+0x408>
 800d068:	0022      	movs	r2, r4
 800d06a:	4b7f      	ldr	r3, [pc, #508]	; (800d268 <_strtod_l+0x5dc>)
 800d06c:	3a09      	subs	r2, #9
 800d06e:	00d2      	lsls	r2, r2, #3
 800d070:	189b      	adds	r3, r3, r2
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	f7f4 ffef 	bl	8002058 <__aeabi_dmul>
 800d07a:	0006      	movs	r6, r0
 800d07c:	0028      	movs	r0, r5
 800d07e:	000f      	movs	r7, r1
 800d080:	f7f5 feb2 	bl	8002de8 <__aeabi_ui2d>
 800d084:	0002      	movs	r2, r0
 800d086:	000b      	movs	r3, r1
 800d088:	0030      	movs	r0, r6
 800d08a:	0039      	movs	r1, r7
 800d08c:	f7f4 f88a 	bl	80011a4 <__aeabi_dadd>
 800d090:	0006      	movs	r6, r0
 800d092:	000f      	movs	r7, r1
 800d094:	9b05      	ldr	r3, [sp, #20]
 800d096:	2b0f      	cmp	r3, #15
 800d098:	dc39      	bgt.n	800d10e <_strtod_l+0x482>
 800d09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d100      	bne.n	800d0a2 <_strtod_l+0x416>
 800d0a0:	e62f      	b.n	800cd02 <_strtod_l+0x76>
 800d0a2:	dd24      	ble.n	800d0ee <_strtod_l+0x462>
 800d0a4:	2b16      	cmp	r3, #22
 800d0a6:	dc09      	bgt.n	800d0bc <_strtod_l+0x430>
 800d0a8:	496f      	ldr	r1, [pc, #444]	; (800d268 <_strtod_l+0x5dc>)
 800d0aa:	00db      	lsls	r3, r3, #3
 800d0ac:	18c9      	adds	r1, r1, r3
 800d0ae:	0032      	movs	r2, r6
 800d0b0:	6808      	ldr	r0, [r1, #0]
 800d0b2:	6849      	ldr	r1, [r1, #4]
 800d0b4:	003b      	movs	r3, r7
 800d0b6:	f7f4 ffcf 	bl	8002058 <__aeabi_dmul>
 800d0ba:	e7bd      	b.n	800d038 <_strtod_l+0x3ac>
 800d0bc:	2325      	movs	r3, #37	; 0x25
 800d0be:	9a05      	ldr	r2, [sp, #20]
 800d0c0:	1a9b      	subs	r3, r3, r2
 800d0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	db22      	blt.n	800d10e <_strtod_l+0x482>
 800d0c8:	240f      	movs	r4, #15
 800d0ca:	9b05      	ldr	r3, [sp, #20]
 800d0cc:	4d66      	ldr	r5, [pc, #408]	; (800d268 <_strtod_l+0x5dc>)
 800d0ce:	1ae4      	subs	r4, r4, r3
 800d0d0:	00e1      	lsls	r1, r4, #3
 800d0d2:	1869      	adds	r1, r5, r1
 800d0d4:	0032      	movs	r2, r6
 800d0d6:	6808      	ldr	r0, [r1, #0]
 800d0d8:	6849      	ldr	r1, [r1, #4]
 800d0da:	003b      	movs	r3, r7
 800d0dc:	f7f4 ffbc 	bl	8002058 <__aeabi_dmul>
 800d0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e2:	1b1c      	subs	r4, r3, r4
 800d0e4:	00e4      	lsls	r4, r4, #3
 800d0e6:	192d      	adds	r5, r5, r4
 800d0e8:	682a      	ldr	r2, [r5, #0]
 800d0ea:	686b      	ldr	r3, [r5, #4]
 800d0ec:	e7e3      	b.n	800d0b6 <_strtod_l+0x42a>
 800d0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f0:	3316      	adds	r3, #22
 800d0f2:	db0c      	blt.n	800d10e <_strtod_l+0x482>
 800d0f4:	9906      	ldr	r1, [sp, #24]
 800d0f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0f8:	4b5b      	ldr	r3, [pc, #364]	; (800d268 <_strtod_l+0x5dc>)
 800d0fa:	1a52      	subs	r2, r2, r1
 800d0fc:	00d2      	lsls	r2, r2, #3
 800d0fe:	189b      	adds	r3, r3, r2
 800d100:	0030      	movs	r0, r6
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	0039      	movs	r1, r7
 800d108:	f7f4 fbac 	bl	8001864 <__aeabi_ddiv>
 800d10c:	e794      	b.n	800d038 <_strtod_l+0x3ac>
 800d10e:	9b05      	ldr	r3, [sp, #20]
 800d110:	1b1c      	subs	r4, r3, r4
 800d112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d114:	18e4      	adds	r4, r4, r3
 800d116:	2c00      	cmp	r4, #0
 800d118:	dd72      	ble.n	800d200 <_strtod_l+0x574>
 800d11a:	220f      	movs	r2, #15
 800d11c:	0023      	movs	r3, r4
 800d11e:	4013      	ands	r3, r2
 800d120:	4214      	tst	r4, r2
 800d122:	d00a      	beq.n	800d13a <_strtod_l+0x4ae>
 800d124:	4950      	ldr	r1, [pc, #320]	; (800d268 <_strtod_l+0x5dc>)
 800d126:	00db      	lsls	r3, r3, #3
 800d128:	18c9      	adds	r1, r1, r3
 800d12a:	0032      	movs	r2, r6
 800d12c:	6808      	ldr	r0, [r1, #0]
 800d12e:	6849      	ldr	r1, [r1, #4]
 800d130:	003b      	movs	r3, r7
 800d132:	f7f4 ff91 	bl	8002058 <__aeabi_dmul>
 800d136:	0006      	movs	r6, r0
 800d138:	000f      	movs	r7, r1
 800d13a:	230f      	movs	r3, #15
 800d13c:	439c      	bics	r4, r3
 800d13e:	d04a      	beq.n	800d1d6 <_strtod_l+0x54a>
 800d140:	3326      	adds	r3, #38	; 0x26
 800d142:	33ff      	adds	r3, #255	; 0xff
 800d144:	429c      	cmp	r4, r3
 800d146:	dd22      	ble.n	800d18e <_strtod_l+0x502>
 800d148:	2300      	movs	r3, #0
 800d14a:	9305      	str	r3, [sp, #20]
 800d14c:	9306      	str	r3, [sp, #24]
 800d14e:	930d      	str	r3, [sp, #52]	; 0x34
 800d150:	9308      	str	r3, [sp, #32]
 800d152:	2322      	movs	r3, #34	; 0x22
 800d154:	2600      	movs	r6, #0
 800d156:	9a04      	ldr	r2, [sp, #16]
 800d158:	4f3f      	ldr	r7, [pc, #252]	; (800d258 <_strtod_l+0x5cc>)
 800d15a:	6013      	str	r3, [r2, #0]
 800d15c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d15e:	42b3      	cmp	r3, r6
 800d160:	d100      	bne.n	800d164 <_strtod_l+0x4d8>
 800d162:	e5ce      	b.n	800cd02 <_strtod_l+0x76>
 800d164:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d166:	9804      	ldr	r0, [sp, #16]
 800d168:	f7ff f900 	bl	800c36c <_Bfree>
 800d16c:	9908      	ldr	r1, [sp, #32]
 800d16e:	9804      	ldr	r0, [sp, #16]
 800d170:	f7ff f8fc 	bl	800c36c <_Bfree>
 800d174:	9906      	ldr	r1, [sp, #24]
 800d176:	9804      	ldr	r0, [sp, #16]
 800d178:	f7ff f8f8 	bl	800c36c <_Bfree>
 800d17c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d17e:	9804      	ldr	r0, [sp, #16]
 800d180:	f7ff f8f4 	bl	800c36c <_Bfree>
 800d184:	9905      	ldr	r1, [sp, #20]
 800d186:	9804      	ldr	r0, [sp, #16]
 800d188:	f7ff f8f0 	bl	800c36c <_Bfree>
 800d18c:	e5b9      	b.n	800cd02 <_strtod_l+0x76>
 800d18e:	2300      	movs	r3, #0
 800d190:	0030      	movs	r0, r6
 800d192:	0039      	movs	r1, r7
 800d194:	4d35      	ldr	r5, [pc, #212]	; (800d26c <_strtod_l+0x5e0>)
 800d196:	1124      	asrs	r4, r4, #4
 800d198:	9307      	str	r3, [sp, #28]
 800d19a:	2c01      	cmp	r4, #1
 800d19c:	dc1e      	bgt.n	800d1dc <_strtod_l+0x550>
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <_strtod_l+0x51a>
 800d1a2:	0006      	movs	r6, r0
 800d1a4:	000f      	movs	r7, r1
 800d1a6:	4b32      	ldr	r3, [pc, #200]	; (800d270 <_strtod_l+0x5e4>)
 800d1a8:	9a07      	ldr	r2, [sp, #28]
 800d1aa:	18ff      	adds	r7, r7, r3
 800d1ac:	4b2f      	ldr	r3, [pc, #188]	; (800d26c <_strtod_l+0x5e0>)
 800d1ae:	00d2      	lsls	r2, r2, #3
 800d1b0:	189d      	adds	r5, r3, r2
 800d1b2:	6828      	ldr	r0, [r5, #0]
 800d1b4:	6869      	ldr	r1, [r5, #4]
 800d1b6:	0032      	movs	r2, r6
 800d1b8:	003b      	movs	r3, r7
 800d1ba:	f7f4 ff4d 	bl	8002058 <__aeabi_dmul>
 800d1be:	4b26      	ldr	r3, [pc, #152]	; (800d258 <_strtod_l+0x5cc>)
 800d1c0:	4a2c      	ldr	r2, [pc, #176]	; (800d274 <_strtod_l+0x5e8>)
 800d1c2:	0006      	movs	r6, r0
 800d1c4:	400b      	ands	r3, r1
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d8be      	bhi.n	800d148 <_strtod_l+0x4bc>
 800d1ca:	4a2b      	ldr	r2, [pc, #172]	; (800d278 <_strtod_l+0x5ec>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d913      	bls.n	800d1f8 <_strtod_l+0x56c>
 800d1d0:	2601      	movs	r6, #1
 800d1d2:	4f2a      	ldr	r7, [pc, #168]	; (800d27c <_strtod_l+0x5f0>)
 800d1d4:	4276      	negs	r6, r6
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	9307      	str	r3, [sp, #28]
 800d1da:	e088      	b.n	800d2ee <_strtod_l+0x662>
 800d1dc:	2201      	movs	r2, #1
 800d1de:	4214      	tst	r4, r2
 800d1e0:	d004      	beq.n	800d1ec <_strtod_l+0x560>
 800d1e2:	682a      	ldr	r2, [r5, #0]
 800d1e4:	686b      	ldr	r3, [r5, #4]
 800d1e6:	f7f4 ff37 	bl	8002058 <__aeabi_dmul>
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	9a07      	ldr	r2, [sp, #28]
 800d1ee:	1064      	asrs	r4, r4, #1
 800d1f0:	3201      	adds	r2, #1
 800d1f2:	9207      	str	r2, [sp, #28]
 800d1f4:	3508      	adds	r5, #8
 800d1f6:	e7d0      	b.n	800d19a <_strtod_l+0x50e>
 800d1f8:	23d4      	movs	r3, #212	; 0xd4
 800d1fa:	049b      	lsls	r3, r3, #18
 800d1fc:	18cf      	adds	r7, r1, r3
 800d1fe:	e7ea      	b.n	800d1d6 <_strtod_l+0x54a>
 800d200:	2c00      	cmp	r4, #0
 800d202:	d0e8      	beq.n	800d1d6 <_strtod_l+0x54a>
 800d204:	4264      	negs	r4, r4
 800d206:	230f      	movs	r3, #15
 800d208:	0022      	movs	r2, r4
 800d20a:	401a      	ands	r2, r3
 800d20c:	421c      	tst	r4, r3
 800d20e:	d00a      	beq.n	800d226 <_strtod_l+0x59a>
 800d210:	4b15      	ldr	r3, [pc, #84]	; (800d268 <_strtod_l+0x5dc>)
 800d212:	00d2      	lsls	r2, r2, #3
 800d214:	189b      	adds	r3, r3, r2
 800d216:	0030      	movs	r0, r6
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	0039      	movs	r1, r7
 800d21e:	f7f4 fb21 	bl	8001864 <__aeabi_ddiv>
 800d222:	0006      	movs	r6, r0
 800d224:	000f      	movs	r7, r1
 800d226:	1124      	asrs	r4, r4, #4
 800d228:	d0d5      	beq.n	800d1d6 <_strtod_l+0x54a>
 800d22a:	2c1f      	cmp	r4, #31
 800d22c:	dd28      	ble.n	800d280 <_strtod_l+0x5f4>
 800d22e:	2300      	movs	r3, #0
 800d230:	9305      	str	r3, [sp, #20]
 800d232:	9306      	str	r3, [sp, #24]
 800d234:	930d      	str	r3, [sp, #52]	; 0x34
 800d236:	9308      	str	r3, [sp, #32]
 800d238:	2322      	movs	r3, #34	; 0x22
 800d23a:	9a04      	ldr	r2, [sp, #16]
 800d23c:	2600      	movs	r6, #0
 800d23e:	6013      	str	r3, [r2, #0]
 800d240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d242:	2700      	movs	r7, #0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d18d      	bne.n	800d164 <_strtod_l+0x4d8>
 800d248:	e55b      	b.n	800cd02 <_strtod_l+0x76>
 800d24a:	46c0      	nop			; (mov r8, r8)
 800d24c:	00004e1f 	.word	0x00004e1f
 800d250:	0800f261 	.word	0x0800f261
 800d254:	0800f48c 	.word	0x0800f48c
 800d258:	7ff00000 	.word	0x7ff00000
 800d25c:	0800f259 	.word	0x0800f259
 800d260:	0800f290 	.word	0x0800f290
 800d264:	0800f61d 	.word	0x0800f61d
 800d268:	0800f3a0 	.word	0x0800f3a0
 800d26c:	0800f378 	.word	0x0800f378
 800d270:	fcb00000 	.word	0xfcb00000
 800d274:	7ca00000 	.word	0x7ca00000
 800d278:	7c900000 	.word	0x7c900000
 800d27c:	7fefffff 	.word	0x7fefffff
 800d280:	2310      	movs	r3, #16
 800d282:	0022      	movs	r2, r4
 800d284:	401a      	ands	r2, r3
 800d286:	9207      	str	r2, [sp, #28]
 800d288:	421c      	tst	r4, r3
 800d28a:	d001      	beq.n	800d290 <_strtod_l+0x604>
 800d28c:	335a      	adds	r3, #90	; 0x5a
 800d28e:	9307      	str	r3, [sp, #28]
 800d290:	0030      	movs	r0, r6
 800d292:	0039      	movs	r1, r7
 800d294:	2300      	movs	r3, #0
 800d296:	4dc4      	ldr	r5, [pc, #784]	; (800d5a8 <_strtod_l+0x91c>)
 800d298:	2201      	movs	r2, #1
 800d29a:	4214      	tst	r4, r2
 800d29c:	d004      	beq.n	800d2a8 <_strtod_l+0x61c>
 800d29e:	682a      	ldr	r2, [r5, #0]
 800d2a0:	686b      	ldr	r3, [r5, #4]
 800d2a2:	f7f4 fed9 	bl	8002058 <__aeabi_dmul>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	1064      	asrs	r4, r4, #1
 800d2aa:	3508      	adds	r5, #8
 800d2ac:	2c00      	cmp	r4, #0
 800d2ae:	d1f3      	bne.n	800d298 <_strtod_l+0x60c>
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <_strtod_l+0x62c>
 800d2b4:	0006      	movs	r6, r0
 800d2b6:	000f      	movs	r7, r1
 800d2b8:	9b07      	ldr	r3, [sp, #28]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00f      	beq.n	800d2de <_strtod_l+0x652>
 800d2be:	236b      	movs	r3, #107	; 0x6b
 800d2c0:	007a      	lsls	r2, r7, #1
 800d2c2:	0d52      	lsrs	r2, r2, #21
 800d2c4:	0039      	movs	r1, r7
 800d2c6:	1a9b      	subs	r3, r3, r2
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	dd08      	ble.n	800d2de <_strtod_l+0x652>
 800d2cc:	2b1f      	cmp	r3, #31
 800d2ce:	dc00      	bgt.n	800d2d2 <_strtod_l+0x646>
 800d2d0:	e121      	b.n	800d516 <_strtod_l+0x88a>
 800d2d2:	2600      	movs	r6, #0
 800d2d4:	2b34      	cmp	r3, #52	; 0x34
 800d2d6:	dc00      	bgt.n	800d2da <_strtod_l+0x64e>
 800d2d8:	e116      	b.n	800d508 <_strtod_l+0x87c>
 800d2da:	27dc      	movs	r7, #220	; 0xdc
 800d2dc:	04bf      	lsls	r7, r7, #18
 800d2de:	2200      	movs	r2, #0
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	0030      	movs	r0, r6
 800d2e4:	0039      	movs	r1, r7
 800d2e6:	f7f3 f8b1 	bl	800044c <__aeabi_dcmpeq>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d19f      	bne.n	800d22e <_strtod_l+0x5a2>
 800d2ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2f0:	9a08      	ldr	r2, [sp, #32]
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d2f6:	9b05      	ldr	r3, [sp, #20]
 800d2f8:	9804      	ldr	r0, [sp, #16]
 800d2fa:	f7ff f89f 	bl	800c43c <__s2b>
 800d2fe:	900d      	str	r0, [sp, #52]	; 0x34
 800d300:	2800      	cmp	r0, #0
 800d302:	d100      	bne.n	800d306 <_strtod_l+0x67a>
 800d304:	e720      	b.n	800d148 <_strtod_l+0x4bc>
 800d306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d308:	9906      	ldr	r1, [sp, #24]
 800d30a:	17da      	asrs	r2, r3, #31
 800d30c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d30e:	1a5b      	subs	r3, r3, r1
 800d310:	401a      	ands	r2, r3
 800d312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d314:	9215      	str	r2, [sp, #84]	; 0x54
 800d316:	43db      	mvns	r3, r3
 800d318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d31a:	17db      	asrs	r3, r3, #31
 800d31c:	401a      	ands	r2, r3
 800d31e:	2300      	movs	r3, #0
 800d320:	9218      	str	r2, [sp, #96]	; 0x60
 800d322:	9305      	str	r3, [sp, #20]
 800d324:	9306      	str	r3, [sp, #24]
 800d326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d328:	9804      	ldr	r0, [sp, #16]
 800d32a:	6859      	ldr	r1, [r3, #4]
 800d32c:	f7fe ffda 	bl	800c2e4 <_Balloc>
 800d330:	9008      	str	r0, [sp, #32]
 800d332:	2800      	cmp	r0, #0
 800d334:	d100      	bne.n	800d338 <_strtod_l+0x6ac>
 800d336:	e70c      	b.n	800d152 <_strtod_l+0x4c6>
 800d338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d33a:	300c      	adds	r0, #12
 800d33c:	0019      	movs	r1, r3
 800d33e:	691a      	ldr	r2, [r3, #16]
 800d340:	310c      	adds	r1, #12
 800d342:	3202      	adds	r2, #2
 800d344:	0092      	lsls	r2, r2, #2
 800d346:	f000 fd8b 	bl	800de60 <memcpy>
 800d34a:	ab1e      	add	r3, sp, #120	; 0x78
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	ab1d      	add	r3, sp, #116	; 0x74
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	0032      	movs	r2, r6
 800d354:	003b      	movs	r3, r7
 800d356:	9804      	ldr	r0, [sp, #16]
 800d358:	9610      	str	r6, [sp, #64]	; 0x40
 800d35a:	9711      	str	r7, [sp, #68]	; 0x44
 800d35c:	f7ff fbb0 	bl	800cac0 <__d2b>
 800d360:	901c      	str	r0, [sp, #112]	; 0x70
 800d362:	2800      	cmp	r0, #0
 800d364:	d100      	bne.n	800d368 <_strtod_l+0x6dc>
 800d366:	e6f4      	b.n	800d152 <_strtod_l+0x4c6>
 800d368:	2101      	movs	r1, #1
 800d36a:	9804      	ldr	r0, [sp, #16]
 800d36c:	f7ff f8fa 	bl	800c564 <__i2b>
 800d370:	9006      	str	r0, [sp, #24]
 800d372:	2800      	cmp	r0, #0
 800d374:	d100      	bne.n	800d378 <_strtod_l+0x6ec>
 800d376:	e6ec      	b.n	800d152 <_strtod_l+0x4c6>
 800d378:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d37a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d37c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d37e:	1ad4      	subs	r4, r2, r3
 800d380:	2b00      	cmp	r3, #0
 800d382:	db01      	blt.n	800d388 <_strtod_l+0x6fc>
 800d384:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800d386:	195d      	adds	r5, r3, r5
 800d388:	9907      	ldr	r1, [sp, #28]
 800d38a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d38c:	1a5b      	subs	r3, r3, r1
 800d38e:	2136      	movs	r1, #54	; 0x36
 800d390:	189b      	adds	r3, r3, r2
 800d392:	1a8a      	subs	r2, r1, r2
 800d394:	4985      	ldr	r1, [pc, #532]	; (800d5ac <_strtod_l+0x920>)
 800d396:	2001      	movs	r0, #1
 800d398:	468c      	mov	ip, r1
 800d39a:	2100      	movs	r1, #0
 800d39c:	3b01      	subs	r3, #1
 800d39e:	9114      	str	r1, [sp, #80]	; 0x50
 800d3a0:	9012      	str	r0, [sp, #72]	; 0x48
 800d3a2:	4563      	cmp	r3, ip
 800d3a4:	da07      	bge.n	800d3b6 <_strtod_l+0x72a>
 800d3a6:	4661      	mov	r1, ip
 800d3a8:	1ac9      	subs	r1, r1, r3
 800d3aa:	1a52      	subs	r2, r2, r1
 800d3ac:	291f      	cmp	r1, #31
 800d3ae:	dd00      	ble.n	800d3b2 <_strtod_l+0x726>
 800d3b0:	e0b6      	b.n	800d520 <_strtod_l+0x894>
 800d3b2:	4088      	lsls	r0, r1
 800d3b4:	9012      	str	r0, [sp, #72]	; 0x48
 800d3b6:	18ab      	adds	r3, r5, r2
 800d3b8:	930c      	str	r3, [sp, #48]	; 0x30
 800d3ba:	18a4      	adds	r4, r4, r2
 800d3bc:	9b07      	ldr	r3, [sp, #28]
 800d3be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3c0:	191c      	adds	r4, r3, r4
 800d3c2:	002b      	movs	r3, r5
 800d3c4:	4295      	cmp	r5, r2
 800d3c6:	dd00      	ble.n	800d3ca <_strtod_l+0x73e>
 800d3c8:	0013      	movs	r3, r2
 800d3ca:	42a3      	cmp	r3, r4
 800d3cc:	dd00      	ble.n	800d3d0 <_strtod_l+0x744>
 800d3ce:	0023      	movs	r3, r4
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	dd04      	ble.n	800d3de <_strtod_l+0x752>
 800d3d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3d6:	1ae4      	subs	r4, r4, r3
 800d3d8:	1ad2      	subs	r2, r2, r3
 800d3da:	920c      	str	r2, [sp, #48]	; 0x30
 800d3dc:	1aed      	subs	r5, r5, r3
 800d3de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	dd17      	ble.n	800d414 <_strtod_l+0x788>
 800d3e4:	001a      	movs	r2, r3
 800d3e6:	9906      	ldr	r1, [sp, #24]
 800d3e8:	9804      	ldr	r0, [sp, #16]
 800d3ea:	f7ff f983 	bl	800c6f4 <__pow5mult>
 800d3ee:	9006      	str	r0, [sp, #24]
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d100      	bne.n	800d3f6 <_strtod_l+0x76a>
 800d3f4:	e6ad      	b.n	800d152 <_strtod_l+0x4c6>
 800d3f6:	0001      	movs	r1, r0
 800d3f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d3fa:	9804      	ldr	r0, [sp, #16]
 800d3fc:	f7ff f8ca 	bl	800c594 <__multiply>
 800d400:	900e      	str	r0, [sp, #56]	; 0x38
 800d402:	2800      	cmp	r0, #0
 800d404:	d100      	bne.n	800d408 <_strtod_l+0x77c>
 800d406:	e6a4      	b.n	800d152 <_strtod_l+0x4c6>
 800d408:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d40a:	9804      	ldr	r0, [sp, #16]
 800d40c:	f7fe ffae 	bl	800c36c <_Bfree>
 800d410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d412:	931c      	str	r3, [sp, #112]	; 0x70
 800d414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d416:	2b00      	cmp	r3, #0
 800d418:	dd00      	ble.n	800d41c <_strtod_l+0x790>
 800d41a:	e087      	b.n	800d52c <_strtod_l+0x8a0>
 800d41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d41e:	2b00      	cmp	r3, #0
 800d420:	dd08      	ble.n	800d434 <_strtod_l+0x7a8>
 800d422:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d424:	9908      	ldr	r1, [sp, #32]
 800d426:	9804      	ldr	r0, [sp, #16]
 800d428:	f7ff f964 	bl	800c6f4 <__pow5mult>
 800d42c:	9008      	str	r0, [sp, #32]
 800d42e:	2800      	cmp	r0, #0
 800d430:	d100      	bne.n	800d434 <_strtod_l+0x7a8>
 800d432:	e68e      	b.n	800d152 <_strtod_l+0x4c6>
 800d434:	2c00      	cmp	r4, #0
 800d436:	dd08      	ble.n	800d44a <_strtod_l+0x7be>
 800d438:	0022      	movs	r2, r4
 800d43a:	9908      	ldr	r1, [sp, #32]
 800d43c:	9804      	ldr	r0, [sp, #16]
 800d43e:	f7ff f9b5 	bl	800c7ac <__lshift>
 800d442:	9008      	str	r0, [sp, #32]
 800d444:	2800      	cmp	r0, #0
 800d446:	d100      	bne.n	800d44a <_strtod_l+0x7be>
 800d448:	e683      	b.n	800d152 <_strtod_l+0x4c6>
 800d44a:	2d00      	cmp	r5, #0
 800d44c:	dd08      	ble.n	800d460 <_strtod_l+0x7d4>
 800d44e:	002a      	movs	r2, r5
 800d450:	9906      	ldr	r1, [sp, #24]
 800d452:	9804      	ldr	r0, [sp, #16]
 800d454:	f7ff f9aa 	bl	800c7ac <__lshift>
 800d458:	9006      	str	r0, [sp, #24]
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d100      	bne.n	800d460 <_strtod_l+0x7d4>
 800d45e:	e678      	b.n	800d152 <_strtod_l+0x4c6>
 800d460:	9a08      	ldr	r2, [sp, #32]
 800d462:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d464:	9804      	ldr	r0, [sp, #16]
 800d466:	f7ff fa2b 	bl	800c8c0 <__mdiff>
 800d46a:	9005      	str	r0, [sp, #20]
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d100      	bne.n	800d472 <_strtod_l+0x7e6>
 800d470:	e66f      	b.n	800d152 <_strtod_l+0x4c6>
 800d472:	2200      	movs	r2, #0
 800d474:	68c3      	ldr	r3, [r0, #12]
 800d476:	9906      	ldr	r1, [sp, #24]
 800d478:	60c2      	str	r2, [r0, #12]
 800d47a:	930c      	str	r3, [sp, #48]	; 0x30
 800d47c:	f7ff fa04 	bl	800c888 <__mcmp>
 800d480:	2800      	cmp	r0, #0
 800d482:	da5d      	bge.n	800d540 <_strtod_l+0x8b4>
 800d484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d486:	4333      	orrs	r3, r6
 800d488:	d000      	beq.n	800d48c <_strtod_l+0x800>
 800d48a:	e088      	b.n	800d59e <_strtod_l+0x912>
 800d48c:	033b      	lsls	r3, r7, #12
 800d48e:	d000      	beq.n	800d492 <_strtod_l+0x806>
 800d490:	e085      	b.n	800d59e <_strtod_l+0x912>
 800d492:	22d6      	movs	r2, #214	; 0xd6
 800d494:	4b46      	ldr	r3, [pc, #280]	; (800d5b0 <_strtod_l+0x924>)
 800d496:	04d2      	lsls	r2, r2, #19
 800d498:	403b      	ands	r3, r7
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d97f      	bls.n	800d59e <_strtod_l+0x912>
 800d49e:	9b05      	ldr	r3, [sp, #20]
 800d4a0:	695b      	ldr	r3, [r3, #20]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d103      	bne.n	800d4ae <_strtod_l+0x822>
 800d4a6:	9b05      	ldr	r3, [sp, #20]
 800d4a8:	691b      	ldr	r3, [r3, #16]
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	dd77      	ble.n	800d59e <_strtod_l+0x912>
 800d4ae:	9905      	ldr	r1, [sp, #20]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	9804      	ldr	r0, [sp, #16]
 800d4b4:	f7ff f97a 	bl	800c7ac <__lshift>
 800d4b8:	9906      	ldr	r1, [sp, #24]
 800d4ba:	9005      	str	r0, [sp, #20]
 800d4bc:	f7ff f9e4 	bl	800c888 <__mcmp>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	dd6c      	ble.n	800d59e <_strtod_l+0x912>
 800d4c4:	9907      	ldr	r1, [sp, #28]
 800d4c6:	003b      	movs	r3, r7
 800d4c8:	4a39      	ldr	r2, [pc, #228]	; (800d5b0 <_strtod_l+0x924>)
 800d4ca:	2900      	cmp	r1, #0
 800d4cc:	d100      	bne.n	800d4d0 <_strtod_l+0x844>
 800d4ce:	e094      	b.n	800d5fa <_strtod_l+0x96e>
 800d4d0:	0011      	movs	r1, r2
 800d4d2:	20d6      	movs	r0, #214	; 0xd6
 800d4d4:	4039      	ands	r1, r7
 800d4d6:	04c0      	lsls	r0, r0, #19
 800d4d8:	4281      	cmp	r1, r0
 800d4da:	dd00      	ble.n	800d4de <_strtod_l+0x852>
 800d4dc:	e08d      	b.n	800d5fa <_strtod_l+0x96e>
 800d4de:	23dc      	movs	r3, #220	; 0xdc
 800d4e0:	049b      	lsls	r3, r3, #18
 800d4e2:	4299      	cmp	r1, r3
 800d4e4:	dc00      	bgt.n	800d4e8 <_strtod_l+0x85c>
 800d4e6:	e6a7      	b.n	800d238 <_strtod_l+0x5ac>
 800d4e8:	0030      	movs	r0, r6
 800d4ea:	0039      	movs	r1, r7
 800d4ec:	4b31      	ldr	r3, [pc, #196]	; (800d5b4 <_strtod_l+0x928>)
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f7f4 fdb2 	bl	8002058 <__aeabi_dmul>
 800d4f4:	4b2e      	ldr	r3, [pc, #184]	; (800d5b0 <_strtod_l+0x924>)
 800d4f6:	0006      	movs	r6, r0
 800d4f8:	000f      	movs	r7, r1
 800d4fa:	420b      	tst	r3, r1
 800d4fc:	d000      	beq.n	800d500 <_strtod_l+0x874>
 800d4fe:	e631      	b.n	800d164 <_strtod_l+0x4d8>
 800d500:	2322      	movs	r3, #34	; 0x22
 800d502:	9a04      	ldr	r2, [sp, #16]
 800d504:	6013      	str	r3, [r2, #0]
 800d506:	e62d      	b.n	800d164 <_strtod_l+0x4d8>
 800d508:	234b      	movs	r3, #75	; 0x4b
 800d50a:	1a9a      	subs	r2, r3, r2
 800d50c:	3b4c      	subs	r3, #76	; 0x4c
 800d50e:	4093      	lsls	r3, r2
 800d510:	4019      	ands	r1, r3
 800d512:	000f      	movs	r7, r1
 800d514:	e6e3      	b.n	800d2de <_strtod_l+0x652>
 800d516:	2201      	movs	r2, #1
 800d518:	4252      	negs	r2, r2
 800d51a:	409a      	lsls	r2, r3
 800d51c:	4016      	ands	r6, r2
 800d51e:	e6de      	b.n	800d2de <_strtod_l+0x652>
 800d520:	4925      	ldr	r1, [pc, #148]	; (800d5b8 <_strtod_l+0x92c>)
 800d522:	1acb      	subs	r3, r1, r3
 800d524:	0001      	movs	r1, r0
 800d526:	4099      	lsls	r1, r3
 800d528:	9114      	str	r1, [sp, #80]	; 0x50
 800d52a:	e743      	b.n	800d3b4 <_strtod_l+0x728>
 800d52c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d52e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d530:	9804      	ldr	r0, [sp, #16]
 800d532:	f7ff f93b 	bl	800c7ac <__lshift>
 800d536:	901c      	str	r0, [sp, #112]	; 0x70
 800d538:	2800      	cmp	r0, #0
 800d53a:	d000      	beq.n	800d53e <_strtod_l+0x8b2>
 800d53c:	e76e      	b.n	800d41c <_strtod_l+0x790>
 800d53e:	e608      	b.n	800d152 <_strtod_l+0x4c6>
 800d540:	970e      	str	r7, [sp, #56]	; 0x38
 800d542:	2800      	cmp	r0, #0
 800d544:	d177      	bne.n	800d636 <_strtod_l+0x9aa>
 800d546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d548:	033b      	lsls	r3, r7, #12
 800d54a:	0b1b      	lsrs	r3, r3, #12
 800d54c:	2a00      	cmp	r2, #0
 800d54e:	d039      	beq.n	800d5c4 <_strtod_l+0x938>
 800d550:	4a1a      	ldr	r2, [pc, #104]	; (800d5bc <_strtod_l+0x930>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d139      	bne.n	800d5ca <_strtod_l+0x93e>
 800d556:	2101      	movs	r1, #1
 800d558:	9b07      	ldr	r3, [sp, #28]
 800d55a:	4249      	negs	r1, r1
 800d55c:	0032      	movs	r2, r6
 800d55e:	0008      	movs	r0, r1
 800d560:	2b00      	cmp	r3, #0
 800d562:	d00b      	beq.n	800d57c <_strtod_l+0x8f0>
 800d564:	24d4      	movs	r4, #212	; 0xd4
 800d566:	4b12      	ldr	r3, [pc, #72]	; (800d5b0 <_strtod_l+0x924>)
 800d568:	0008      	movs	r0, r1
 800d56a:	403b      	ands	r3, r7
 800d56c:	04e4      	lsls	r4, r4, #19
 800d56e:	42a3      	cmp	r3, r4
 800d570:	d804      	bhi.n	800d57c <_strtod_l+0x8f0>
 800d572:	306c      	adds	r0, #108	; 0x6c
 800d574:	0d1b      	lsrs	r3, r3, #20
 800d576:	1ac3      	subs	r3, r0, r3
 800d578:	4099      	lsls	r1, r3
 800d57a:	0008      	movs	r0, r1
 800d57c:	4282      	cmp	r2, r0
 800d57e:	d124      	bne.n	800d5ca <_strtod_l+0x93e>
 800d580:	4b0f      	ldr	r3, [pc, #60]	; (800d5c0 <_strtod_l+0x934>)
 800d582:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d584:	4299      	cmp	r1, r3
 800d586:	d102      	bne.n	800d58e <_strtod_l+0x902>
 800d588:	3201      	adds	r2, #1
 800d58a:	d100      	bne.n	800d58e <_strtod_l+0x902>
 800d58c:	e5e1      	b.n	800d152 <_strtod_l+0x4c6>
 800d58e:	4b08      	ldr	r3, [pc, #32]	; (800d5b0 <_strtod_l+0x924>)
 800d590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d592:	2600      	movs	r6, #0
 800d594:	401a      	ands	r2, r3
 800d596:	0013      	movs	r3, r2
 800d598:	2280      	movs	r2, #128	; 0x80
 800d59a:	0352      	lsls	r2, r2, #13
 800d59c:	189f      	adds	r7, r3, r2
 800d59e:	9b07      	ldr	r3, [sp, #28]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1a1      	bne.n	800d4e8 <_strtod_l+0x85c>
 800d5a4:	e5de      	b.n	800d164 <_strtod_l+0x4d8>
 800d5a6:	46c0      	nop			; (mov r8, r8)
 800d5a8:	0800f4a0 	.word	0x0800f4a0
 800d5ac:	fffffc02 	.word	0xfffffc02
 800d5b0:	7ff00000 	.word	0x7ff00000
 800d5b4:	39500000 	.word	0x39500000
 800d5b8:	fffffbe2 	.word	0xfffffbe2
 800d5bc:	000fffff 	.word	0x000fffff
 800d5c0:	7fefffff 	.word	0x7fefffff
 800d5c4:	4333      	orrs	r3, r6
 800d5c6:	d100      	bne.n	800d5ca <_strtod_l+0x93e>
 800d5c8:	e77c      	b.n	800d4c4 <_strtod_l+0x838>
 800d5ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d01d      	beq.n	800d60c <_strtod_l+0x980>
 800d5d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d5d4:	4213      	tst	r3, r2
 800d5d6:	d0e2      	beq.n	800d59e <_strtod_l+0x912>
 800d5d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5da:	0030      	movs	r0, r6
 800d5dc:	0039      	movs	r1, r7
 800d5de:	9a07      	ldr	r2, [sp, #28]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d017      	beq.n	800d614 <_strtod_l+0x988>
 800d5e4:	f7ff fb3a 	bl	800cc5c <sulp>
 800d5e8:	0002      	movs	r2, r0
 800d5ea:	000b      	movs	r3, r1
 800d5ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d5ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d5f0:	f7f3 fdd8 	bl	80011a4 <__aeabi_dadd>
 800d5f4:	0006      	movs	r6, r0
 800d5f6:	000f      	movs	r7, r1
 800d5f8:	e7d1      	b.n	800d59e <_strtod_l+0x912>
 800d5fa:	2601      	movs	r6, #1
 800d5fc:	4013      	ands	r3, r2
 800d5fe:	4a98      	ldr	r2, [pc, #608]	; (800d860 <_strtod_l+0xbd4>)
 800d600:	4276      	negs	r6, r6
 800d602:	189b      	adds	r3, r3, r2
 800d604:	4a97      	ldr	r2, [pc, #604]	; (800d864 <_strtod_l+0xbd8>)
 800d606:	431a      	orrs	r2, r3
 800d608:	0017      	movs	r7, r2
 800d60a:	e7c8      	b.n	800d59e <_strtod_l+0x912>
 800d60c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d60e:	4233      	tst	r3, r6
 800d610:	d0c5      	beq.n	800d59e <_strtod_l+0x912>
 800d612:	e7e1      	b.n	800d5d8 <_strtod_l+0x94c>
 800d614:	f7ff fb22 	bl	800cc5c <sulp>
 800d618:	0002      	movs	r2, r0
 800d61a:	000b      	movs	r3, r1
 800d61c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d61e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d620:	f7f4 ffdc 	bl	80025dc <__aeabi_dsub>
 800d624:	2200      	movs	r2, #0
 800d626:	2300      	movs	r3, #0
 800d628:	0006      	movs	r6, r0
 800d62a:	000f      	movs	r7, r1
 800d62c:	f7f2 ff0e 	bl	800044c <__aeabi_dcmpeq>
 800d630:	2800      	cmp	r0, #0
 800d632:	d0b4      	beq.n	800d59e <_strtod_l+0x912>
 800d634:	e600      	b.n	800d238 <_strtod_l+0x5ac>
 800d636:	9906      	ldr	r1, [sp, #24]
 800d638:	9805      	ldr	r0, [sp, #20]
 800d63a:	f7ff faa1 	bl	800cb80 <__ratio>
 800d63e:	2380      	movs	r3, #128	; 0x80
 800d640:	2200      	movs	r2, #0
 800d642:	05db      	lsls	r3, r3, #23
 800d644:	0004      	movs	r4, r0
 800d646:	000d      	movs	r5, r1
 800d648:	f7f2 ff10 	bl	800046c <__aeabi_dcmple>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d06d      	beq.n	800d72c <_strtod_l+0xaa0>
 800d650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d652:	2b00      	cmp	r3, #0
 800d654:	d000      	beq.n	800d658 <_strtod_l+0x9cc>
 800d656:	e07e      	b.n	800d756 <_strtod_l+0xaca>
 800d658:	2e00      	cmp	r6, #0
 800d65a:	d158      	bne.n	800d70e <_strtod_l+0xa82>
 800d65c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d65e:	031b      	lsls	r3, r3, #12
 800d660:	d000      	beq.n	800d664 <_strtod_l+0x9d8>
 800d662:	e07f      	b.n	800d764 <_strtod_l+0xad8>
 800d664:	2200      	movs	r2, #0
 800d666:	0020      	movs	r0, r4
 800d668:	0029      	movs	r1, r5
 800d66a:	4b7f      	ldr	r3, [pc, #508]	; (800d868 <_strtod_l+0xbdc>)
 800d66c:	f7f2 fef4 	bl	8000458 <__aeabi_dcmplt>
 800d670:	2800      	cmp	r0, #0
 800d672:	d158      	bne.n	800d726 <_strtod_l+0xa9a>
 800d674:	0020      	movs	r0, r4
 800d676:	0029      	movs	r1, r5
 800d678:	2200      	movs	r2, #0
 800d67a:	4b7c      	ldr	r3, [pc, #496]	; (800d86c <_strtod_l+0xbe0>)
 800d67c:	f7f4 fcec 	bl	8002058 <__aeabi_dmul>
 800d680:	0004      	movs	r4, r0
 800d682:	000d      	movs	r5, r1
 800d684:	2380      	movs	r3, #128	; 0x80
 800d686:	061b      	lsls	r3, r3, #24
 800d688:	940a      	str	r4, [sp, #40]	; 0x28
 800d68a:	18eb      	adds	r3, r5, r3
 800d68c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d68e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d692:	9212      	str	r2, [sp, #72]	; 0x48
 800d694:	9313      	str	r3, [sp, #76]	; 0x4c
 800d696:	4a76      	ldr	r2, [pc, #472]	; (800d870 <_strtod_l+0xbe4>)
 800d698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d69a:	4013      	ands	r3, r2
 800d69c:	9314      	str	r3, [sp, #80]	; 0x50
 800d69e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d6a0:	4b74      	ldr	r3, [pc, #464]	; (800d874 <_strtod_l+0xbe8>)
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d000      	beq.n	800d6a8 <_strtod_l+0xa1c>
 800d6a6:	e091      	b.n	800d7cc <_strtod_l+0xb40>
 800d6a8:	4a73      	ldr	r2, [pc, #460]	; (800d878 <_strtod_l+0xbec>)
 800d6aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6ac:	4694      	mov	ip, r2
 800d6ae:	4463      	add	r3, ip
 800d6b0:	001f      	movs	r7, r3
 800d6b2:	0030      	movs	r0, r6
 800d6b4:	0019      	movs	r1, r3
 800d6b6:	f7ff f99b 	bl	800c9f0 <__ulp>
 800d6ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6be:	f7f4 fccb 	bl	8002058 <__aeabi_dmul>
 800d6c2:	0032      	movs	r2, r6
 800d6c4:	003b      	movs	r3, r7
 800d6c6:	f7f3 fd6d 	bl	80011a4 <__aeabi_dadd>
 800d6ca:	4a69      	ldr	r2, [pc, #420]	; (800d870 <_strtod_l+0xbe4>)
 800d6cc:	4b6b      	ldr	r3, [pc, #428]	; (800d87c <_strtod_l+0xbf0>)
 800d6ce:	0006      	movs	r6, r0
 800d6d0:	400a      	ands	r2, r1
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d949      	bls.n	800d76a <_strtod_l+0xade>
 800d6d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d6d8:	4b69      	ldr	r3, [pc, #420]	; (800d880 <_strtod_l+0xbf4>)
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d103      	bne.n	800d6e6 <_strtod_l+0xa5a>
 800d6de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	d100      	bne.n	800d6e6 <_strtod_l+0xa5a>
 800d6e4:	e535      	b.n	800d152 <_strtod_l+0x4c6>
 800d6e6:	2601      	movs	r6, #1
 800d6e8:	4f65      	ldr	r7, [pc, #404]	; (800d880 <_strtod_l+0xbf4>)
 800d6ea:	4276      	negs	r6, r6
 800d6ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d6ee:	9804      	ldr	r0, [sp, #16]
 800d6f0:	f7fe fe3c 	bl	800c36c <_Bfree>
 800d6f4:	9908      	ldr	r1, [sp, #32]
 800d6f6:	9804      	ldr	r0, [sp, #16]
 800d6f8:	f7fe fe38 	bl	800c36c <_Bfree>
 800d6fc:	9906      	ldr	r1, [sp, #24]
 800d6fe:	9804      	ldr	r0, [sp, #16]
 800d700:	f7fe fe34 	bl	800c36c <_Bfree>
 800d704:	9905      	ldr	r1, [sp, #20]
 800d706:	9804      	ldr	r0, [sp, #16]
 800d708:	f7fe fe30 	bl	800c36c <_Bfree>
 800d70c:	e60b      	b.n	800d326 <_strtod_l+0x69a>
 800d70e:	2e01      	cmp	r6, #1
 800d710:	d103      	bne.n	800d71a <_strtod_l+0xa8e>
 800d712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d714:	2b00      	cmp	r3, #0
 800d716:	d100      	bne.n	800d71a <_strtod_l+0xa8e>
 800d718:	e58e      	b.n	800d238 <_strtod_l+0x5ac>
 800d71a:	2300      	movs	r3, #0
 800d71c:	4c59      	ldr	r4, [pc, #356]	; (800d884 <_strtod_l+0xbf8>)
 800d71e:	930a      	str	r3, [sp, #40]	; 0x28
 800d720:	940b      	str	r4, [sp, #44]	; 0x2c
 800d722:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d724:	e01c      	b.n	800d760 <_strtod_l+0xad4>
 800d726:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d728:	4d50      	ldr	r5, [pc, #320]	; (800d86c <_strtod_l+0xbe0>)
 800d72a:	e7ab      	b.n	800d684 <_strtod_l+0x9f8>
 800d72c:	2200      	movs	r2, #0
 800d72e:	0020      	movs	r0, r4
 800d730:	0029      	movs	r1, r5
 800d732:	4b4e      	ldr	r3, [pc, #312]	; (800d86c <_strtod_l+0xbe0>)
 800d734:	f7f4 fc90 	bl	8002058 <__aeabi_dmul>
 800d738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d73a:	0004      	movs	r4, r0
 800d73c:	000b      	movs	r3, r1
 800d73e:	000d      	movs	r5, r1
 800d740:	2a00      	cmp	r2, #0
 800d742:	d104      	bne.n	800d74e <_strtod_l+0xac2>
 800d744:	2280      	movs	r2, #128	; 0x80
 800d746:	0612      	lsls	r2, r2, #24
 800d748:	900a      	str	r0, [sp, #40]	; 0x28
 800d74a:	188b      	adds	r3, r1, r2
 800d74c:	e79e      	b.n	800d68c <_strtod_l+0xa00>
 800d74e:	0002      	movs	r2, r0
 800d750:	920a      	str	r2, [sp, #40]	; 0x28
 800d752:	930b      	str	r3, [sp, #44]	; 0x2c
 800d754:	e79b      	b.n	800d68e <_strtod_l+0xa02>
 800d756:	2300      	movs	r3, #0
 800d758:	4c43      	ldr	r4, [pc, #268]	; (800d868 <_strtod_l+0xbdc>)
 800d75a:	930a      	str	r3, [sp, #40]	; 0x28
 800d75c:	940b      	str	r4, [sp, #44]	; 0x2c
 800d75e:	2400      	movs	r4, #0
 800d760:	4d41      	ldr	r5, [pc, #260]	; (800d868 <_strtod_l+0xbdc>)
 800d762:	e794      	b.n	800d68e <_strtod_l+0xa02>
 800d764:	2300      	movs	r3, #0
 800d766:	4c47      	ldr	r4, [pc, #284]	; (800d884 <_strtod_l+0xbf8>)
 800d768:	e7f7      	b.n	800d75a <_strtod_l+0xace>
 800d76a:	23d4      	movs	r3, #212	; 0xd4
 800d76c:	049b      	lsls	r3, r3, #18
 800d76e:	18cf      	adds	r7, r1, r3
 800d770:	9b07      	ldr	r3, [sp, #28]
 800d772:	970e      	str	r7, [sp, #56]	; 0x38
 800d774:	2b00      	cmp	r3, #0
 800d776:	d1b9      	bne.n	800d6ec <_strtod_l+0xa60>
 800d778:	4b3d      	ldr	r3, [pc, #244]	; (800d870 <_strtod_l+0xbe4>)
 800d77a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d77c:	403b      	ands	r3, r7
 800d77e:	429a      	cmp	r2, r3
 800d780:	d1b4      	bne.n	800d6ec <_strtod_l+0xa60>
 800d782:	0020      	movs	r0, r4
 800d784:	0029      	movs	r1, r5
 800d786:	f7f2 fefb 	bl	8000580 <__aeabi_d2lz>
 800d78a:	f7f2 ff35 	bl	80005f8 <__aeabi_l2d>
 800d78e:	0002      	movs	r2, r0
 800d790:	000b      	movs	r3, r1
 800d792:	0020      	movs	r0, r4
 800d794:	0029      	movs	r1, r5
 800d796:	f7f4 ff21 	bl	80025dc <__aeabi_dsub>
 800d79a:	033b      	lsls	r3, r7, #12
 800d79c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d79e:	0b1b      	lsrs	r3, r3, #12
 800d7a0:	4333      	orrs	r3, r6
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	0004      	movs	r4, r0
 800d7a6:	000d      	movs	r5, r1
 800d7a8:	4a37      	ldr	r2, [pc, #220]	; (800d888 <_strtod_l+0xbfc>)
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d054      	beq.n	800d858 <_strtod_l+0xbcc>
 800d7ae:	4b37      	ldr	r3, [pc, #220]	; (800d88c <_strtod_l+0xc00>)
 800d7b0:	f7f2 fe52 	bl	8000458 <__aeabi_dcmplt>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	d000      	beq.n	800d7ba <_strtod_l+0xb2e>
 800d7b8:	e4d4      	b.n	800d164 <_strtod_l+0x4d8>
 800d7ba:	0020      	movs	r0, r4
 800d7bc:	0029      	movs	r1, r5
 800d7be:	4a34      	ldr	r2, [pc, #208]	; (800d890 <_strtod_l+0xc04>)
 800d7c0:	4b2a      	ldr	r3, [pc, #168]	; (800d86c <_strtod_l+0xbe0>)
 800d7c2:	f7f2 fe5d 	bl	8000480 <__aeabi_dcmpgt>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d090      	beq.n	800d6ec <_strtod_l+0xa60>
 800d7ca:	e4cb      	b.n	800d164 <_strtod_l+0x4d8>
 800d7cc:	9b07      	ldr	r3, [sp, #28]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d02b      	beq.n	800d82a <_strtod_l+0xb9e>
 800d7d2:	23d4      	movs	r3, #212	; 0xd4
 800d7d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d7d6:	04db      	lsls	r3, r3, #19
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d826      	bhi.n	800d82a <_strtod_l+0xb9e>
 800d7dc:	0020      	movs	r0, r4
 800d7de:	0029      	movs	r1, r5
 800d7e0:	4a2c      	ldr	r2, [pc, #176]	; (800d894 <_strtod_l+0xc08>)
 800d7e2:	4b2d      	ldr	r3, [pc, #180]	; (800d898 <_strtod_l+0xc0c>)
 800d7e4:	f7f2 fe42 	bl	800046c <__aeabi_dcmple>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d017      	beq.n	800d81c <_strtod_l+0xb90>
 800d7ec:	0020      	movs	r0, r4
 800d7ee:	0029      	movs	r1, r5
 800d7f0:	f7f2 fea8 	bl	8000544 <__aeabi_d2uiz>
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	d100      	bne.n	800d7fa <_strtod_l+0xb6e>
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	f7f5 faf5 	bl	8002de8 <__aeabi_ui2d>
 800d7fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d800:	0004      	movs	r4, r0
 800d802:	000b      	movs	r3, r1
 800d804:	000d      	movs	r5, r1
 800d806:	2a00      	cmp	r2, #0
 800d808:	d122      	bne.n	800d850 <_strtod_l+0xbc4>
 800d80a:	2280      	movs	r2, #128	; 0x80
 800d80c:	0612      	lsls	r2, r2, #24
 800d80e:	188b      	adds	r3, r1, r2
 800d810:	9016      	str	r0, [sp, #88]	; 0x58
 800d812:	9317      	str	r3, [sp, #92]	; 0x5c
 800d814:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d816:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d818:	9212      	str	r2, [sp, #72]	; 0x48
 800d81a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d81c:	22d6      	movs	r2, #214	; 0xd6
 800d81e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d820:	04d2      	lsls	r2, r2, #19
 800d822:	189b      	adds	r3, r3, r2
 800d824:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d826:	1a9b      	subs	r3, r3, r2
 800d828:	9313      	str	r3, [sp, #76]	; 0x4c
 800d82a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d82c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d82e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d830:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d832:	f7ff f8dd 	bl	800c9f0 <__ulp>
 800d836:	0002      	movs	r2, r0
 800d838:	000b      	movs	r3, r1
 800d83a:	0030      	movs	r0, r6
 800d83c:	0039      	movs	r1, r7
 800d83e:	f7f4 fc0b 	bl	8002058 <__aeabi_dmul>
 800d842:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d844:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d846:	f7f3 fcad 	bl	80011a4 <__aeabi_dadd>
 800d84a:	0006      	movs	r6, r0
 800d84c:	000f      	movs	r7, r1
 800d84e:	e78f      	b.n	800d770 <_strtod_l+0xae4>
 800d850:	0002      	movs	r2, r0
 800d852:	9216      	str	r2, [sp, #88]	; 0x58
 800d854:	9317      	str	r3, [sp, #92]	; 0x5c
 800d856:	e7dd      	b.n	800d814 <_strtod_l+0xb88>
 800d858:	4b10      	ldr	r3, [pc, #64]	; (800d89c <_strtod_l+0xc10>)
 800d85a:	f7f2 fdfd 	bl	8000458 <__aeabi_dcmplt>
 800d85e:	e7b2      	b.n	800d7c6 <_strtod_l+0xb3a>
 800d860:	fff00000 	.word	0xfff00000
 800d864:	000fffff 	.word	0x000fffff
 800d868:	3ff00000 	.word	0x3ff00000
 800d86c:	3fe00000 	.word	0x3fe00000
 800d870:	7ff00000 	.word	0x7ff00000
 800d874:	7fe00000 	.word	0x7fe00000
 800d878:	fcb00000 	.word	0xfcb00000
 800d87c:	7c9fffff 	.word	0x7c9fffff
 800d880:	7fefffff 	.word	0x7fefffff
 800d884:	bff00000 	.word	0xbff00000
 800d888:	94a03595 	.word	0x94a03595
 800d88c:	3fdfffff 	.word	0x3fdfffff
 800d890:	35afe535 	.word	0x35afe535
 800d894:	ffc00000 	.word	0xffc00000
 800d898:	41dfffff 	.word	0x41dfffff
 800d89c:	3fcfffff 	.word	0x3fcfffff

0800d8a0 <_strtod_r>:
 800d8a0:	b510      	push	{r4, lr}
 800d8a2:	4b02      	ldr	r3, [pc, #8]	; (800d8ac <_strtod_r+0xc>)
 800d8a4:	f7ff f9f2 	bl	800cc8c <_strtod_l>
 800d8a8:	bd10      	pop	{r4, pc}
 800d8aa:	46c0      	nop			; (mov r8, r8)
 800d8ac:	20000080 	.word	0x20000080

0800d8b0 <_strtol_l.constprop.0>:
 800d8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8b2:	b087      	sub	sp, #28
 800d8b4:	001e      	movs	r6, r3
 800d8b6:	9005      	str	r0, [sp, #20]
 800d8b8:	9101      	str	r1, [sp, #4]
 800d8ba:	9202      	str	r2, [sp, #8]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d048      	beq.n	800d952 <_strtol_l.constprop.0+0xa2>
 800d8c0:	000b      	movs	r3, r1
 800d8c2:	2e24      	cmp	r6, #36	; 0x24
 800d8c4:	d845      	bhi.n	800d952 <_strtol_l.constprop.0+0xa2>
 800d8c6:	4a3b      	ldr	r2, [pc, #236]	; (800d9b4 <_strtol_l.constprop.0+0x104>)
 800d8c8:	2108      	movs	r1, #8
 800d8ca:	4694      	mov	ip, r2
 800d8cc:	001a      	movs	r2, r3
 800d8ce:	4660      	mov	r0, ip
 800d8d0:	7814      	ldrb	r4, [r2, #0]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	5d00      	ldrb	r0, [r0, r4]
 800d8d6:	001d      	movs	r5, r3
 800d8d8:	0007      	movs	r7, r0
 800d8da:	400f      	ands	r7, r1
 800d8dc:	4208      	tst	r0, r1
 800d8de:	d1f5      	bne.n	800d8cc <_strtol_l.constprop.0+0x1c>
 800d8e0:	2c2d      	cmp	r4, #45	; 0x2d
 800d8e2:	d13d      	bne.n	800d960 <_strtol_l.constprop.0+0xb0>
 800d8e4:	2701      	movs	r7, #1
 800d8e6:	781c      	ldrb	r4, [r3, #0]
 800d8e8:	1c95      	adds	r5, r2, #2
 800d8ea:	2e00      	cmp	r6, #0
 800d8ec:	d05e      	beq.n	800d9ac <_strtol_l.constprop.0+0xfc>
 800d8ee:	2e10      	cmp	r6, #16
 800d8f0:	d109      	bne.n	800d906 <_strtol_l.constprop.0+0x56>
 800d8f2:	2c30      	cmp	r4, #48	; 0x30
 800d8f4:	d107      	bne.n	800d906 <_strtol_l.constprop.0+0x56>
 800d8f6:	2220      	movs	r2, #32
 800d8f8:	782b      	ldrb	r3, [r5, #0]
 800d8fa:	4393      	bics	r3, r2
 800d8fc:	2b58      	cmp	r3, #88	; 0x58
 800d8fe:	d150      	bne.n	800d9a2 <_strtol_l.constprop.0+0xf2>
 800d900:	2610      	movs	r6, #16
 800d902:	786c      	ldrb	r4, [r5, #1]
 800d904:	3502      	adds	r5, #2
 800d906:	4b2c      	ldr	r3, [pc, #176]	; (800d9b8 <_strtol_l.constprop.0+0x108>)
 800d908:	0031      	movs	r1, r6
 800d90a:	18fb      	adds	r3, r7, r3
 800d90c:	0018      	movs	r0, r3
 800d90e:	9303      	str	r3, [sp, #12]
 800d910:	f7f2 fc9c 	bl	800024c <__aeabi_uidivmod>
 800d914:	2200      	movs	r2, #0
 800d916:	9104      	str	r1, [sp, #16]
 800d918:	2101      	movs	r1, #1
 800d91a:	4684      	mov	ip, r0
 800d91c:	0010      	movs	r0, r2
 800d91e:	4249      	negs	r1, r1
 800d920:	0023      	movs	r3, r4
 800d922:	3b30      	subs	r3, #48	; 0x30
 800d924:	2b09      	cmp	r3, #9
 800d926:	d903      	bls.n	800d930 <_strtol_l.constprop.0+0x80>
 800d928:	3b11      	subs	r3, #17
 800d92a:	2b19      	cmp	r3, #25
 800d92c:	d81d      	bhi.n	800d96a <_strtol_l.constprop.0+0xba>
 800d92e:	330a      	adds	r3, #10
 800d930:	429e      	cmp	r6, r3
 800d932:	dd1e      	ble.n	800d972 <_strtol_l.constprop.0+0xc2>
 800d934:	1c54      	adds	r4, r2, #1
 800d936:	d009      	beq.n	800d94c <_strtol_l.constprop.0+0x9c>
 800d938:	000a      	movs	r2, r1
 800d93a:	4584      	cmp	ip, r0
 800d93c:	d306      	bcc.n	800d94c <_strtol_l.constprop.0+0x9c>
 800d93e:	d102      	bne.n	800d946 <_strtol_l.constprop.0+0x96>
 800d940:	9c04      	ldr	r4, [sp, #16]
 800d942:	429c      	cmp	r4, r3
 800d944:	db02      	blt.n	800d94c <_strtol_l.constprop.0+0x9c>
 800d946:	2201      	movs	r2, #1
 800d948:	4370      	muls	r0, r6
 800d94a:	1818      	adds	r0, r3, r0
 800d94c:	782c      	ldrb	r4, [r5, #0]
 800d94e:	3501      	adds	r5, #1
 800d950:	e7e6      	b.n	800d920 <_strtol_l.constprop.0+0x70>
 800d952:	f7fd fce5 	bl	800b320 <__errno>
 800d956:	2316      	movs	r3, #22
 800d958:	6003      	str	r3, [r0, #0]
 800d95a:	2000      	movs	r0, #0
 800d95c:	b007      	add	sp, #28
 800d95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d960:	2c2b      	cmp	r4, #43	; 0x2b
 800d962:	d1c2      	bne.n	800d8ea <_strtol_l.constprop.0+0x3a>
 800d964:	781c      	ldrb	r4, [r3, #0]
 800d966:	1c95      	adds	r5, r2, #2
 800d968:	e7bf      	b.n	800d8ea <_strtol_l.constprop.0+0x3a>
 800d96a:	0023      	movs	r3, r4
 800d96c:	3b61      	subs	r3, #97	; 0x61
 800d96e:	2b19      	cmp	r3, #25
 800d970:	d9dd      	bls.n	800d92e <_strtol_l.constprop.0+0x7e>
 800d972:	1c53      	adds	r3, r2, #1
 800d974:	d109      	bne.n	800d98a <_strtol_l.constprop.0+0xda>
 800d976:	2322      	movs	r3, #34	; 0x22
 800d978:	9a05      	ldr	r2, [sp, #20]
 800d97a:	9803      	ldr	r0, [sp, #12]
 800d97c:	6013      	str	r3, [r2, #0]
 800d97e:	9b02      	ldr	r3, [sp, #8]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d0eb      	beq.n	800d95c <_strtol_l.constprop.0+0xac>
 800d984:	1e6b      	subs	r3, r5, #1
 800d986:	9301      	str	r3, [sp, #4]
 800d988:	e007      	b.n	800d99a <_strtol_l.constprop.0+0xea>
 800d98a:	2f00      	cmp	r7, #0
 800d98c:	d000      	beq.n	800d990 <_strtol_l.constprop.0+0xe0>
 800d98e:	4240      	negs	r0, r0
 800d990:	9b02      	ldr	r3, [sp, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d0e2      	beq.n	800d95c <_strtol_l.constprop.0+0xac>
 800d996:	2a00      	cmp	r2, #0
 800d998:	d1f4      	bne.n	800d984 <_strtol_l.constprop.0+0xd4>
 800d99a:	9b02      	ldr	r3, [sp, #8]
 800d99c:	9a01      	ldr	r2, [sp, #4]
 800d99e:	601a      	str	r2, [r3, #0]
 800d9a0:	e7dc      	b.n	800d95c <_strtol_l.constprop.0+0xac>
 800d9a2:	2430      	movs	r4, #48	; 0x30
 800d9a4:	2e00      	cmp	r6, #0
 800d9a6:	d1ae      	bne.n	800d906 <_strtol_l.constprop.0+0x56>
 800d9a8:	3608      	adds	r6, #8
 800d9aa:	e7ac      	b.n	800d906 <_strtol_l.constprop.0+0x56>
 800d9ac:	2c30      	cmp	r4, #48	; 0x30
 800d9ae:	d0a2      	beq.n	800d8f6 <_strtol_l.constprop.0+0x46>
 800d9b0:	260a      	movs	r6, #10
 800d9b2:	e7a8      	b.n	800d906 <_strtol_l.constprop.0+0x56>
 800d9b4:	0800f4c9 	.word	0x0800f4c9
 800d9b8:	7fffffff 	.word	0x7fffffff

0800d9bc <_strtol_r>:
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	f7ff ff77 	bl	800d8b0 <_strtol_l.constprop.0>
 800d9c2:	bd10      	pop	{r4, pc}

0800d9c4 <__ssputs_r>:
 800d9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	9301      	str	r3, [sp, #4]
 800d9ca:	9203      	str	r2, [sp, #12]
 800d9cc:	688e      	ldr	r6, [r1, #8]
 800d9ce:	9a01      	ldr	r2, [sp, #4]
 800d9d0:	0007      	movs	r7, r0
 800d9d2:	000c      	movs	r4, r1
 800d9d4:	680b      	ldr	r3, [r1, #0]
 800d9d6:	4296      	cmp	r6, r2
 800d9d8:	d831      	bhi.n	800da3e <__ssputs_r+0x7a>
 800d9da:	898a      	ldrh	r2, [r1, #12]
 800d9dc:	2190      	movs	r1, #144	; 0x90
 800d9de:	00c9      	lsls	r1, r1, #3
 800d9e0:	420a      	tst	r2, r1
 800d9e2:	d029      	beq.n	800da38 <__ssputs_r+0x74>
 800d9e4:	2003      	movs	r0, #3
 800d9e6:	6921      	ldr	r1, [r4, #16]
 800d9e8:	1a5b      	subs	r3, r3, r1
 800d9ea:	9302      	str	r3, [sp, #8]
 800d9ec:	6963      	ldr	r3, [r4, #20]
 800d9ee:	4343      	muls	r3, r0
 800d9f0:	0fdd      	lsrs	r5, r3, #31
 800d9f2:	18ed      	adds	r5, r5, r3
 800d9f4:	9b01      	ldr	r3, [sp, #4]
 800d9f6:	9802      	ldr	r0, [sp, #8]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	181b      	adds	r3, r3, r0
 800d9fc:	106d      	asrs	r5, r5, #1
 800d9fe:	42ab      	cmp	r3, r5
 800da00:	d900      	bls.n	800da04 <__ssputs_r+0x40>
 800da02:	001d      	movs	r5, r3
 800da04:	0552      	lsls	r2, r2, #21
 800da06:	d529      	bpl.n	800da5c <__ssputs_r+0x98>
 800da08:	0029      	movs	r1, r5
 800da0a:	0038      	movs	r0, r7
 800da0c:	f7fe fbd8 	bl	800c1c0 <_malloc_r>
 800da10:	1e06      	subs	r6, r0, #0
 800da12:	d02d      	beq.n	800da70 <__ssputs_r+0xac>
 800da14:	9a02      	ldr	r2, [sp, #8]
 800da16:	6921      	ldr	r1, [r4, #16]
 800da18:	f000 fa22 	bl	800de60 <memcpy>
 800da1c:	89a2      	ldrh	r2, [r4, #12]
 800da1e:	4b19      	ldr	r3, [pc, #100]	; (800da84 <__ssputs_r+0xc0>)
 800da20:	401a      	ands	r2, r3
 800da22:	2380      	movs	r3, #128	; 0x80
 800da24:	4313      	orrs	r3, r2
 800da26:	81a3      	strh	r3, [r4, #12]
 800da28:	9b02      	ldr	r3, [sp, #8]
 800da2a:	6126      	str	r6, [r4, #16]
 800da2c:	18f6      	adds	r6, r6, r3
 800da2e:	6026      	str	r6, [r4, #0]
 800da30:	6165      	str	r5, [r4, #20]
 800da32:	9e01      	ldr	r6, [sp, #4]
 800da34:	1aed      	subs	r5, r5, r3
 800da36:	60a5      	str	r5, [r4, #8]
 800da38:	9b01      	ldr	r3, [sp, #4]
 800da3a:	429e      	cmp	r6, r3
 800da3c:	d900      	bls.n	800da40 <__ssputs_r+0x7c>
 800da3e:	9e01      	ldr	r6, [sp, #4]
 800da40:	0032      	movs	r2, r6
 800da42:	9903      	ldr	r1, [sp, #12]
 800da44:	6820      	ldr	r0, [r4, #0]
 800da46:	f000 f9d4 	bl	800ddf2 <memmove>
 800da4a:	2000      	movs	r0, #0
 800da4c:	68a3      	ldr	r3, [r4, #8]
 800da4e:	1b9b      	subs	r3, r3, r6
 800da50:	60a3      	str	r3, [r4, #8]
 800da52:	6823      	ldr	r3, [r4, #0]
 800da54:	199b      	adds	r3, r3, r6
 800da56:	6023      	str	r3, [r4, #0]
 800da58:	b005      	add	sp, #20
 800da5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da5c:	002a      	movs	r2, r5
 800da5e:	0038      	movs	r0, r7
 800da60:	f000 fdc8 	bl	800e5f4 <_realloc_r>
 800da64:	1e06      	subs	r6, r0, #0
 800da66:	d1df      	bne.n	800da28 <__ssputs_r+0x64>
 800da68:	0038      	movs	r0, r7
 800da6a:	6921      	ldr	r1, [r4, #16]
 800da6c:	f7fe fb32 	bl	800c0d4 <_free_r>
 800da70:	230c      	movs	r3, #12
 800da72:	2001      	movs	r0, #1
 800da74:	603b      	str	r3, [r7, #0]
 800da76:	89a2      	ldrh	r2, [r4, #12]
 800da78:	3334      	adds	r3, #52	; 0x34
 800da7a:	4313      	orrs	r3, r2
 800da7c:	81a3      	strh	r3, [r4, #12]
 800da7e:	4240      	negs	r0, r0
 800da80:	e7ea      	b.n	800da58 <__ssputs_r+0x94>
 800da82:	46c0      	nop			; (mov r8, r8)
 800da84:	fffffb7f 	.word	0xfffffb7f

0800da88 <_svfiprintf_r>:
 800da88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da8a:	b0a1      	sub	sp, #132	; 0x84
 800da8c:	9003      	str	r0, [sp, #12]
 800da8e:	001d      	movs	r5, r3
 800da90:	898b      	ldrh	r3, [r1, #12]
 800da92:	000f      	movs	r7, r1
 800da94:	0016      	movs	r6, r2
 800da96:	061b      	lsls	r3, r3, #24
 800da98:	d511      	bpl.n	800dabe <_svfiprintf_r+0x36>
 800da9a:	690b      	ldr	r3, [r1, #16]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d10e      	bne.n	800dabe <_svfiprintf_r+0x36>
 800daa0:	2140      	movs	r1, #64	; 0x40
 800daa2:	f7fe fb8d 	bl	800c1c0 <_malloc_r>
 800daa6:	6038      	str	r0, [r7, #0]
 800daa8:	6138      	str	r0, [r7, #16]
 800daaa:	2800      	cmp	r0, #0
 800daac:	d105      	bne.n	800daba <_svfiprintf_r+0x32>
 800daae:	230c      	movs	r3, #12
 800dab0:	9a03      	ldr	r2, [sp, #12]
 800dab2:	3801      	subs	r0, #1
 800dab4:	6013      	str	r3, [r2, #0]
 800dab6:	b021      	add	sp, #132	; 0x84
 800dab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daba:	2340      	movs	r3, #64	; 0x40
 800dabc:	617b      	str	r3, [r7, #20]
 800dabe:	2300      	movs	r3, #0
 800dac0:	ac08      	add	r4, sp, #32
 800dac2:	6163      	str	r3, [r4, #20]
 800dac4:	3320      	adds	r3, #32
 800dac6:	7663      	strb	r3, [r4, #25]
 800dac8:	3310      	adds	r3, #16
 800daca:	76a3      	strb	r3, [r4, #26]
 800dacc:	9507      	str	r5, [sp, #28]
 800dace:	0035      	movs	r5, r6
 800dad0:	782b      	ldrb	r3, [r5, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d001      	beq.n	800dada <_svfiprintf_r+0x52>
 800dad6:	2b25      	cmp	r3, #37	; 0x25
 800dad8:	d148      	bne.n	800db6c <_svfiprintf_r+0xe4>
 800dada:	1bab      	subs	r3, r5, r6
 800dadc:	9305      	str	r3, [sp, #20]
 800dade:	42b5      	cmp	r5, r6
 800dae0:	d00b      	beq.n	800dafa <_svfiprintf_r+0x72>
 800dae2:	0032      	movs	r2, r6
 800dae4:	0039      	movs	r1, r7
 800dae6:	9803      	ldr	r0, [sp, #12]
 800dae8:	f7ff ff6c 	bl	800d9c4 <__ssputs_r>
 800daec:	3001      	adds	r0, #1
 800daee:	d100      	bne.n	800daf2 <_svfiprintf_r+0x6a>
 800daf0:	e0af      	b.n	800dc52 <_svfiprintf_r+0x1ca>
 800daf2:	6963      	ldr	r3, [r4, #20]
 800daf4:	9a05      	ldr	r2, [sp, #20]
 800daf6:	189b      	adds	r3, r3, r2
 800daf8:	6163      	str	r3, [r4, #20]
 800dafa:	782b      	ldrb	r3, [r5, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d100      	bne.n	800db02 <_svfiprintf_r+0x7a>
 800db00:	e0a7      	b.n	800dc52 <_svfiprintf_r+0x1ca>
 800db02:	2201      	movs	r2, #1
 800db04:	2300      	movs	r3, #0
 800db06:	4252      	negs	r2, r2
 800db08:	6062      	str	r2, [r4, #4]
 800db0a:	a904      	add	r1, sp, #16
 800db0c:	3254      	adds	r2, #84	; 0x54
 800db0e:	1852      	adds	r2, r2, r1
 800db10:	1c6e      	adds	r6, r5, #1
 800db12:	6023      	str	r3, [r4, #0]
 800db14:	60e3      	str	r3, [r4, #12]
 800db16:	60a3      	str	r3, [r4, #8]
 800db18:	7013      	strb	r3, [r2, #0]
 800db1a:	65a3      	str	r3, [r4, #88]	; 0x58
 800db1c:	4b55      	ldr	r3, [pc, #340]	; (800dc74 <_svfiprintf_r+0x1ec>)
 800db1e:	2205      	movs	r2, #5
 800db20:	0018      	movs	r0, r3
 800db22:	7831      	ldrb	r1, [r6, #0]
 800db24:	9305      	str	r3, [sp, #20]
 800db26:	f7fd fc28 	bl	800b37a <memchr>
 800db2a:	1c75      	adds	r5, r6, #1
 800db2c:	2800      	cmp	r0, #0
 800db2e:	d11f      	bne.n	800db70 <_svfiprintf_r+0xe8>
 800db30:	6822      	ldr	r2, [r4, #0]
 800db32:	06d3      	lsls	r3, r2, #27
 800db34:	d504      	bpl.n	800db40 <_svfiprintf_r+0xb8>
 800db36:	2353      	movs	r3, #83	; 0x53
 800db38:	a904      	add	r1, sp, #16
 800db3a:	185b      	adds	r3, r3, r1
 800db3c:	2120      	movs	r1, #32
 800db3e:	7019      	strb	r1, [r3, #0]
 800db40:	0713      	lsls	r3, r2, #28
 800db42:	d504      	bpl.n	800db4e <_svfiprintf_r+0xc6>
 800db44:	2353      	movs	r3, #83	; 0x53
 800db46:	a904      	add	r1, sp, #16
 800db48:	185b      	adds	r3, r3, r1
 800db4a:	212b      	movs	r1, #43	; 0x2b
 800db4c:	7019      	strb	r1, [r3, #0]
 800db4e:	7833      	ldrb	r3, [r6, #0]
 800db50:	2b2a      	cmp	r3, #42	; 0x2a
 800db52:	d016      	beq.n	800db82 <_svfiprintf_r+0xfa>
 800db54:	0035      	movs	r5, r6
 800db56:	2100      	movs	r1, #0
 800db58:	200a      	movs	r0, #10
 800db5a:	68e3      	ldr	r3, [r4, #12]
 800db5c:	782a      	ldrb	r2, [r5, #0]
 800db5e:	1c6e      	adds	r6, r5, #1
 800db60:	3a30      	subs	r2, #48	; 0x30
 800db62:	2a09      	cmp	r2, #9
 800db64:	d94e      	bls.n	800dc04 <_svfiprintf_r+0x17c>
 800db66:	2900      	cmp	r1, #0
 800db68:	d111      	bne.n	800db8e <_svfiprintf_r+0x106>
 800db6a:	e017      	b.n	800db9c <_svfiprintf_r+0x114>
 800db6c:	3501      	adds	r5, #1
 800db6e:	e7af      	b.n	800dad0 <_svfiprintf_r+0x48>
 800db70:	9b05      	ldr	r3, [sp, #20]
 800db72:	6822      	ldr	r2, [r4, #0]
 800db74:	1ac0      	subs	r0, r0, r3
 800db76:	2301      	movs	r3, #1
 800db78:	4083      	lsls	r3, r0
 800db7a:	4313      	orrs	r3, r2
 800db7c:	002e      	movs	r6, r5
 800db7e:	6023      	str	r3, [r4, #0]
 800db80:	e7cc      	b.n	800db1c <_svfiprintf_r+0x94>
 800db82:	9b07      	ldr	r3, [sp, #28]
 800db84:	1d19      	adds	r1, r3, #4
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	9107      	str	r1, [sp, #28]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	db01      	blt.n	800db92 <_svfiprintf_r+0x10a>
 800db8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800db90:	e004      	b.n	800db9c <_svfiprintf_r+0x114>
 800db92:	425b      	negs	r3, r3
 800db94:	60e3      	str	r3, [r4, #12]
 800db96:	2302      	movs	r3, #2
 800db98:	4313      	orrs	r3, r2
 800db9a:	6023      	str	r3, [r4, #0]
 800db9c:	782b      	ldrb	r3, [r5, #0]
 800db9e:	2b2e      	cmp	r3, #46	; 0x2e
 800dba0:	d10a      	bne.n	800dbb8 <_svfiprintf_r+0x130>
 800dba2:	786b      	ldrb	r3, [r5, #1]
 800dba4:	2b2a      	cmp	r3, #42	; 0x2a
 800dba6:	d135      	bne.n	800dc14 <_svfiprintf_r+0x18c>
 800dba8:	9b07      	ldr	r3, [sp, #28]
 800dbaa:	3502      	adds	r5, #2
 800dbac:	1d1a      	adds	r2, r3, #4
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	9207      	str	r2, [sp, #28]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	db2b      	blt.n	800dc0e <_svfiprintf_r+0x186>
 800dbb6:	9309      	str	r3, [sp, #36]	; 0x24
 800dbb8:	4e2f      	ldr	r6, [pc, #188]	; (800dc78 <_svfiprintf_r+0x1f0>)
 800dbba:	2203      	movs	r2, #3
 800dbbc:	0030      	movs	r0, r6
 800dbbe:	7829      	ldrb	r1, [r5, #0]
 800dbc0:	f7fd fbdb 	bl	800b37a <memchr>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d006      	beq.n	800dbd6 <_svfiprintf_r+0x14e>
 800dbc8:	2340      	movs	r3, #64	; 0x40
 800dbca:	1b80      	subs	r0, r0, r6
 800dbcc:	4083      	lsls	r3, r0
 800dbce:	6822      	ldr	r2, [r4, #0]
 800dbd0:	3501      	adds	r5, #1
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	6023      	str	r3, [r4, #0]
 800dbd6:	7829      	ldrb	r1, [r5, #0]
 800dbd8:	2206      	movs	r2, #6
 800dbda:	4828      	ldr	r0, [pc, #160]	; (800dc7c <_svfiprintf_r+0x1f4>)
 800dbdc:	1c6e      	adds	r6, r5, #1
 800dbde:	7621      	strb	r1, [r4, #24]
 800dbe0:	f7fd fbcb 	bl	800b37a <memchr>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d03c      	beq.n	800dc62 <_svfiprintf_r+0x1da>
 800dbe8:	4b25      	ldr	r3, [pc, #148]	; (800dc80 <_svfiprintf_r+0x1f8>)
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d125      	bne.n	800dc3a <_svfiprintf_r+0x1b2>
 800dbee:	2207      	movs	r2, #7
 800dbf0:	9b07      	ldr	r3, [sp, #28]
 800dbf2:	3307      	adds	r3, #7
 800dbf4:	4393      	bics	r3, r2
 800dbf6:	3308      	adds	r3, #8
 800dbf8:	9307      	str	r3, [sp, #28]
 800dbfa:	6963      	ldr	r3, [r4, #20]
 800dbfc:	9a04      	ldr	r2, [sp, #16]
 800dbfe:	189b      	adds	r3, r3, r2
 800dc00:	6163      	str	r3, [r4, #20]
 800dc02:	e764      	b.n	800dace <_svfiprintf_r+0x46>
 800dc04:	4343      	muls	r3, r0
 800dc06:	0035      	movs	r5, r6
 800dc08:	2101      	movs	r1, #1
 800dc0a:	189b      	adds	r3, r3, r2
 800dc0c:	e7a6      	b.n	800db5c <_svfiprintf_r+0xd4>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	425b      	negs	r3, r3
 800dc12:	e7d0      	b.n	800dbb6 <_svfiprintf_r+0x12e>
 800dc14:	2300      	movs	r3, #0
 800dc16:	200a      	movs	r0, #10
 800dc18:	001a      	movs	r2, r3
 800dc1a:	3501      	adds	r5, #1
 800dc1c:	6063      	str	r3, [r4, #4]
 800dc1e:	7829      	ldrb	r1, [r5, #0]
 800dc20:	1c6e      	adds	r6, r5, #1
 800dc22:	3930      	subs	r1, #48	; 0x30
 800dc24:	2909      	cmp	r1, #9
 800dc26:	d903      	bls.n	800dc30 <_svfiprintf_r+0x1a8>
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d0c5      	beq.n	800dbb8 <_svfiprintf_r+0x130>
 800dc2c:	9209      	str	r2, [sp, #36]	; 0x24
 800dc2e:	e7c3      	b.n	800dbb8 <_svfiprintf_r+0x130>
 800dc30:	4342      	muls	r2, r0
 800dc32:	0035      	movs	r5, r6
 800dc34:	2301      	movs	r3, #1
 800dc36:	1852      	adds	r2, r2, r1
 800dc38:	e7f1      	b.n	800dc1e <_svfiprintf_r+0x196>
 800dc3a:	aa07      	add	r2, sp, #28
 800dc3c:	9200      	str	r2, [sp, #0]
 800dc3e:	0021      	movs	r1, r4
 800dc40:	003a      	movs	r2, r7
 800dc42:	4b10      	ldr	r3, [pc, #64]	; (800dc84 <_svfiprintf_r+0x1fc>)
 800dc44:	9803      	ldr	r0, [sp, #12]
 800dc46:	f7fc fc03 	bl	800a450 <_printf_float>
 800dc4a:	9004      	str	r0, [sp, #16]
 800dc4c:	9b04      	ldr	r3, [sp, #16]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	d1d3      	bne.n	800dbfa <_svfiprintf_r+0x172>
 800dc52:	89bb      	ldrh	r3, [r7, #12]
 800dc54:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dc56:	065b      	lsls	r3, r3, #25
 800dc58:	d400      	bmi.n	800dc5c <_svfiprintf_r+0x1d4>
 800dc5a:	e72c      	b.n	800dab6 <_svfiprintf_r+0x2e>
 800dc5c:	2001      	movs	r0, #1
 800dc5e:	4240      	negs	r0, r0
 800dc60:	e729      	b.n	800dab6 <_svfiprintf_r+0x2e>
 800dc62:	aa07      	add	r2, sp, #28
 800dc64:	9200      	str	r2, [sp, #0]
 800dc66:	0021      	movs	r1, r4
 800dc68:	003a      	movs	r2, r7
 800dc6a:	4b06      	ldr	r3, [pc, #24]	; (800dc84 <_svfiprintf_r+0x1fc>)
 800dc6c:	9803      	ldr	r0, [sp, #12]
 800dc6e:	f7fc feb5 	bl	800a9dc <_printf_i>
 800dc72:	e7ea      	b.n	800dc4a <_svfiprintf_r+0x1c2>
 800dc74:	0800f5c9 	.word	0x0800f5c9
 800dc78:	0800f5cf 	.word	0x0800f5cf
 800dc7c:	0800f5d3 	.word	0x0800f5d3
 800dc80:	0800a451 	.word	0x0800a451
 800dc84:	0800d9c5 	.word	0x0800d9c5

0800dc88 <__sflush_r>:
 800dc88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc8a:	898b      	ldrh	r3, [r1, #12]
 800dc8c:	0005      	movs	r5, r0
 800dc8e:	000c      	movs	r4, r1
 800dc90:	071a      	lsls	r2, r3, #28
 800dc92:	d45c      	bmi.n	800dd4e <__sflush_r+0xc6>
 800dc94:	684a      	ldr	r2, [r1, #4]
 800dc96:	2a00      	cmp	r2, #0
 800dc98:	dc04      	bgt.n	800dca4 <__sflush_r+0x1c>
 800dc9a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800dc9c:	2a00      	cmp	r2, #0
 800dc9e:	dc01      	bgt.n	800dca4 <__sflush_r+0x1c>
 800dca0:	2000      	movs	r0, #0
 800dca2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dca4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800dca6:	2f00      	cmp	r7, #0
 800dca8:	d0fa      	beq.n	800dca0 <__sflush_r+0x18>
 800dcaa:	2200      	movs	r2, #0
 800dcac:	2080      	movs	r0, #128	; 0x80
 800dcae:	682e      	ldr	r6, [r5, #0]
 800dcb0:	602a      	str	r2, [r5, #0]
 800dcb2:	001a      	movs	r2, r3
 800dcb4:	0140      	lsls	r0, r0, #5
 800dcb6:	6a21      	ldr	r1, [r4, #32]
 800dcb8:	4002      	ands	r2, r0
 800dcba:	4203      	tst	r3, r0
 800dcbc:	d034      	beq.n	800dd28 <__sflush_r+0xa0>
 800dcbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dcc0:	89a3      	ldrh	r3, [r4, #12]
 800dcc2:	075b      	lsls	r3, r3, #29
 800dcc4:	d506      	bpl.n	800dcd4 <__sflush_r+0x4c>
 800dcc6:	6863      	ldr	r3, [r4, #4]
 800dcc8:	1ac0      	subs	r0, r0, r3
 800dcca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d001      	beq.n	800dcd4 <__sflush_r+0x4c>
 800dcd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcd2:	1ac0      	subs	r0, r0, r3
 800dcd4:	0002      	movs	r2, r0
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	0028      	movs	r0, r5
 800dcda:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800dcdc:	6a21      	ldr	r1, [r4, #32]
 800dcde:	47b8      	blx	r7
 800dce0:	89a2      	ldrh	r2, [r4, #12]
 800dce2:	1c43      	adds	r3, r0, #1
 800dce4:	d106      	bne.n	800dcf4 <__sflush_r+0x6c>
 800dce6:	6829      	ldr	r1, [r5, #0]
 800dce8:	291d      	cmp	r1, #29
 800dcea:	d82c      	bhi.n	800dd46 <__sflush_r+0xbe>
 800dcec:	4b2a      	ldr	r3, [pc, #168]	; (800dd98 <__sflush_r+0x110>)
 800dcee:	410b      	asrs	r3, r1
 800dcf0:	07db      	lsls	r3, r3, #31
 800dcf2:	d428      	bmi.n	800dd46 <__sflush_r+0xbe>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	6063      	str	r3, [r4, #4]
 800dcf8:	6923      	ldr	r3, [r4, #16]
 800dcfa:	6023      	str	r3, [r4, #0]
 800dcfc:	04d2      	lsls	r2, r2, #19
 800dcfe:	d505      	bpl.n	800dd0c <__sflush_r+0x84>
 800dd00:	1c43      	adds	r3, r0, #1
 800dd02:	d102      	bne.n	800dd0a <__sflush_r+0x82>
 800dd04:	682b      	ldr	r3, [r5, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d100      	bne.n	800dd0c <__sflush_r+0x84>
 800dd0a:	6560      	str	r0, [r4, #84]	; 0x54
 800dd0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd0e:	602e      	str	r6, [r5, #0]
 800dd10:	2900      	cmp	r1, #0
 800dd12:	d0c5      	beq.n	800dca0 <__sflush_r+0x18>
 800dd14:	0023      	movs	r3, r4
 800dd16:	3344      	adds	r3, #68	; 0x44
 800dd18:	4299      	cmp	r1, r3
 800dd1a:	d002      	beq.n	800dd22 <__sflush_r+0x9a>
 800dd1c:	0028      	movs	r0, r5
 800dd1e:	f7fe f9d9 	bl	800c0d4 <_free_r>
 800dd22:	2000      	movs	r0, #0
 800dd24:	6360      	str	r0, [r4, #52]	; 0x34
 800dd26:	e7bc      	b.n	800dca2 <__sflush_r+0x1a>
 800dd28:	2301      	movs	r3, #1
 800dd2a:	0028      	movs	r0, r5
 800dd2c:	47b8      	blx	r7
 800dd2e:	1c43      	adds	r3, r0, #1
 800dd30:	d1c6      	bne.n	800dcc0 <__sflush_r+0x38>
 800dd32:	682b      	ldr	r3, [r5, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d0c3      	beq.n	800dcc0 <__sflush_r+0x38>
 800dd38:	2b1d      	cmp	r3, #29
 800dd3a:	d001      	beq.n	800dd40 <__sflush_r+0xb8>
 800dd3c:	2b16      	cmp	r3, #22
 800dd3e:	d101      	bne.n	800dd44 <__sflush_r+0xbc>
 800dd40:	602e      	str	r6, [r5, #0]
 800dd42:	e7ad      	b.n	800dca0 <__sflush_r+0x18>
 800dd44:	89a2      	ldrh	r2, [r4, #12]
 800dd46:	2340      	movs	r3, #64	; 0x40
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	81a3      	strh	r3, [r4, #12]
 800dd4c:	e7a9      	b.n	800dca2 <__sflush_r+0x1a>
 800dd4e:	690e      	ldr	r6, [r1, #16]
 800dd50:	2e00      	cmp	r6, #0
 800dd52:	d0a5      	beq.n	800dca0 <__sflush_r+0x18>
 800dd54:	680f      	ldr	r7, [r1, #0]
 800dd56:	600e      	str	r6, [r1, #0]
 800dd58:	1bba      	subs	r2, r7, r6
 800dd5a:	9201      	str	r2, [sp, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	079b      	lsls	r3, r3, #30
 800dd60:	d100      	bne.n	800dd64 <__sflush_r+0xdc>
 800dd62:	694a      	ldr	r2, [r1, #20]
 800dd64:	60a2      	str	r2, [r4, #8]
 800dd66:	9b01      	ldr	r3, [sp, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	dd99      	ble.n	800dca0 <__sflush_r+0x18>
 800dd6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dd6e:	0032      	movs	r2, r6
 800dd70:	001f      	movs	r7, r3
 800dd72:	0028      	movs	r0, r5
 800dd74:	9b01      	ldr	r3, [sp, #4]
 800dd76:	6a21      	ldr	r1, [r4, #32]
 800dd78:	47b8      	blx	r7
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	dc06      	bgt.n	800dd8c <__sflush_r+0x104>
 800dd7e:	2340      	movs	r3, #64	; 0x40
 800dd80:	2001      	movs	r0, #1
 800dd82:	89a2      	ldrh	r2, [r4, #12]
 800dd84:	4240      	negs	r0, r0
 800dd86:	4313      	orrs	r3, r2
 800dd88:	81a3      	strh	r3, [r4, #12]
 800dd8a:	e78a      	b.n	800dca2 <__sflush_r+0x1a>
 800dd8c:	9b01      	ldr	r3, [sp, #4]
 800dd8e:	1836      	adds	r6, r6, r0
 800dd90:	1a1b      	subs	r3, r3, r0
 800dd92:	9301      	str	r3, [sp, #4]
 800dd94:	e7e7      	b.n	800dd66 <__sflush_r+0xde>
 800dd96:	46c0      	nop			; (mov r8, r8)
 800dd98:	dfbffffe 	.word	0xdfbffffe

0800dd9c <_fflush_r>:
 800dd9c:	690b      	ldr	r3, [r1, #16]
 800dd9e:	b570      	push	{r4, r5, r6, lr}
 800dda0:	0005      	movs	r5, r0
 800dda2:	000c      	movs	r4, r1
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d102      	bne.n	800ddae <_fflush_r+0x12>
 800dda8:	2500      	movs	r5, #0
 800ddaa:	0028      	movs	r0, r5
 800ddac:	bd70      	pop	{r4, r5, r6, pc}
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	d004      	beq.n	800ddbc <_fflush_r+0x20>
 800ddb2:	6a03      	ldr	r3, [r0, #32]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d101      	bne.n	800ddbc <_fflush_r+0x20>
 800ddb8:	f7fd f9b8 	bl	800b12c <__sinit>
 800ddbc:	220c      	movs	r2, #12
 800ddbe:	5ea3      	ldrsh	r3, [r4, r2]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d0f1      	beq.n	800dda8 <_fflush_r+0xc>
 800ddc4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ddc6:	07d2      	lsls	r2, r2, #31
 800ddc8:	d404      	bmi.n	800ddd4 <_fflush_r+0x38>
 800ddca:	059b      	lsls	r3, r3, #22
 800ddcc:	d402      	bmi.n	800ddd4 <_fflush_r+0x38>
 800ddce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddd0:	f7fd fad1 	bl	800b376 <__retarget_lock_acquire_recursive>
 800ddd4:	0028      	movs	r0, r5
 800ddd6:	0021      	movs	r1, r4
 800ddd8:	f7ff ff56 	bl	800dc88 <__sflush_r>
 800dddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddde:	0005      	movs	r5, r0
 800dde0:	07db      	lsls	r3, r3, #31
 800dde2:	d4e2      	bmi.n	800ddaa <_fflush_r+0xe>
 800dde4:	89a3      	ldrh	r3, [r4, #12]
 800dde6:	059b      	lsls	r3, r3, #22
 800dde8:	d4df      	bmi.n	800ddaa <_fflush_r+0xe>
 800ddea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddec:	f7fd fac4 	bl	800b378 <__retarget_lock_release_recursive>
 800ddf0:	e7db      	b.n	800ddaa <_fflush_r+0xe>

0800ddf2 <memmove>:
 800ddf2:	b510      	push	{r4, lr}
 800ddf4:	4288      	cmp	r0, r1
 800ddf6:	d902      	bls.n	800ddfe <memmove+0xc>
 800ddf8:	188b      	adds	r3, r1, r2
 800ddfa:	4298      	cmp	r0, r3
 800ddfc:	d303      	bcc.n	800de06 <memmove+0x14>
 800ddfe:	2300      	movs	r3, #0
 800de00:	e007      	b.n	800de12 <memmove+0x20>
 800de02:	5c8b      	ldrb	r3, [r1, r2]
 800de04:	5483      	strb	r3, [r0, r2]
 800de06:	3a01      	subs	r2, #1
 800de08:	d2fb      	bcs.n	800de02 <memmove+0x10>
 800de0a:	bd10      	pop	{r4, pc}
 800de0c:	5ccc      	ldrb	r4, [r1, r3]
 800de0e:	54c4      	strb	r4, [r0, r3]
 800de10:	3301      	adds	r3, #1
 800de12:	429a      	cmp	r2, r3
 800de14:	d1fa      	bne.n	800de0c <memmove+0x1a>
 800de16:	e7f8      	b.n	800de0a <memmove+0x18>

0800de18 <strncmp>:
 800de18:	b530      	push	{r4, r5, lr}
 800de1a:	0005      	movs	r5, r0
 800de1c:	1e10      	subs	r0, r2, #0
 800de1e:	d00b      	beq.n	800de38 <strncmp+0x20>
 800de20:	2400      	movs	r4, #0
 800de22:	3a01      	subs	r2, #1
 800de24:	5d2b      	ldrb	r3, [r5, r4]
 800de26:	5d08      	ldrb	r0, [r1, r4]
 800de28:	4283      	cmp	r3, r0
 800de2a:	d104      	bne.n	800de36 <strncmp+0x1e>
 800de2c:	42a2      	cmp	r2, r4
 800de2e:	d002      	beq.n	800de36 <strncmp+0x1e>
 800de30:	3401      	adds	r4, #1
 800de32:	2b00      	cmp	r3, #0
 800de34:	d1f6      	bne.n	800de24 <strncmp+0xc>
 800de36:	1a18      	subs	r0, r3, r0
 800de38:	bd30      	pop	{r4, r5, pc}
	...

0800de3c <_sbrk_r>:
 800de3c:	2300      	movs	r3, #0
 800de3e:	b570      	push	{r4, r5, r6, lr}
 800de40:	4d06      	ldr	r5, [pc, #24]	; (800de5c <_sbrk_r+0x20>)
 800de42:	0004      	movs	r4, r0
 800de44:	0008      	movs	r0, r1
 800de46:	602b      	str	r3, [r5, #0]
 800de48:	f7f6 fc56 	bl	80046f8 <_sbrk>
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	d103      	bne.n	800de58 <_sbrk_r+0x1c>
 800de50:	682b      	ldr	r3, [r5, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d000      	beq.n	800de58 <_sbrk_r+0x1c>
 800de56:	6023      	str	r3, [r4, #0]
 800de58:	bd70      	pop	{r4, r5, r6, pc}
 800de5a:	46c0      	nop			; (mov r8, r8)
 800de5c:	200006c8 	.word	0x200006c8

0800de60 <memcpy>:
 800de60:	2300      	movs	r3, #0
 800de62:	b510      	push	{r4, lr}
 800de64:	429a      	cmp	r2, r3
 800de66:	d100      	bne.n	800de6a <memcpy+0xa>
 800de68:	bd10      	pop	{r4, pc}
 800de6a:	5ccc      	ldrb	r4, [r1, r3]
 800de6c:	54c4      	strb	r4, [r0, r3]
 800de6e:	3301      	adds	r3, #1
 800de70:	e7f8      	b.n	800de64 <memcpy+0x4>
	...

0800de74 <nan>:
 800de74:	2000      	movs	r0, #0
 800de76:	4901      	ldr	r1, [pc, #4]	; (800de7c <nan+0x8>)
 800de78:	4770      	bx	lr
 800de7a:	46c0      	nop			; (mov r8, r8)
 800de7c:	7ff80000 	.word	0x7ff80000

0800de80 <__assert_func>:
 800de80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800de82:	0014      	movs	r4, r2
 800de84:	001a      	movs	r2, r3
 800de86:	4b09      	ldr	r3, [pc, #36]	; (800deac <__assert_func+0x2c>)
 800de88:	0005      	movs	r5, r0
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	000e      	movs	r6, r1
 800de8e:	68d8      	ldr	r0, [r3, #12]
 800de90:	4b07      	ldr	r3, [pc, #28]	; (800deb0 <__assert_func+0x30>)
 800de92:	2c00      	cmp	r4, #0
 800de94:	d101      	bne.n	800de9a <__assert_func+0x1a>
 800de96:	4b07      	ldr	r3, [pc, #28]	; (800deb4 <__assert_func+0x34>)
 800de98:	001c      	movs	r4, r3
 800de9a:	4907      	ldr	r1, [pc, #28]	; (800deb8 <__assert_func+0x38>)
 800de9c:	9301      	str	r3, [sp, #4]
 800de9e:	9402      	str	r4, [sp, #8]
 800dea0:	002b      	movs	r3, r5
 800dea2:	9600      	str	r6, [sp, #0]
 800dea4:	f000 fbe2 	bl	800e66c <fiprintf>
 800dea8:	f000 fbf0 	bl	800e68c <abort>
 800deac:	2000007c 	.word	0x2000007c
 800deb0:	0800f5e2 	.word	0x0800f5e2
 800deb4:	0800f61d 	.word	0x0800f61d
 800deb8:	0800f5ef 	.word	0x0800f5ef

0800debc <_calloc_r>:
 800debc:	b570      	push	{r4, r5, r6, lr}
 800debe:	0c0b      	lsrs	r3, r1, #16
 800dec0:	0c15      	lsrs	r5, r2, #16
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d11e      	bne.n	800df04 <_calloc_r+0x48>
 800dec6:	2d00      	cmp	r5, #0
 800dec8:	d10c      	bne.n	800dee4 <_calloc_r+0x28>
 800deca:	b289      	uxth	r1, r1
 800decc:	b294      	uxth	r4, r2
 800dece:	434c      	muls	r4, r1
 800ded0:	0021      	movs	r1, r4
 800ded2:	f7fe f975 	bl	800c1c0 <_malloc_r>
 800ded6:	1e05      	subs	r5, r0, #0
 800ded8:	d01b      	beq.n	800df12 <_calloc_r+0x56>
 800deda:	0022      	movs	r2, r4
 800dedc:	2100      	movs	r1, #0
 800dede:	f7fd f9c5 	bl	800b26c <memset>
 800dee2:	e016      	b.n	800df12 <_calloc_r+0x56>
 800dee4:	1c2b      	adds	r3, r5, #0
 800dee6:	1c0c      	adds	r4, r1, #0
 800dee8:	b289      	uxth	r1, r1
 800deea:	b292      	uxth	r2, r2
 800deec:	434a      	muls	r2, r1
 800deee:	b2a1      	uxth	r1, r4
 800def0:	b29c      	uxth	r4, r3
 800def2:	434c      	muls	r4, r1
 800def4:	0c13      	lsrs	r3, r2, #16
 800def6:	18e4      	adds	r4, r4, r3
 800def8:	0c23      	lsrs	r3, r4, #16
 800defa:	d107      	bne.n	800df0c <_calloc_r+0x50>
 800defc:	0424      	lsls	r4, r4, #16
 800defe:	b292      	uxth	r2, r2
 800df00:	4314      	orrs	r4, r2
 800df02:	e7e5      	b.n	800ded0 <_calloc_r+0x14>
 800df04:	2d00      	cmp	r5, #0
 800df06:	d101      	bne.n	800df0c <_calloc_r+0x50>
 800df08:	1c14      	adds	r4, r2, #0
 800df0a:	e7ed      	b.n	800dee8 <_calloc_r+0x2c>
 800df0c:	230c      	movs	r3, #12
 800df0e:	2500      	movs	r5, #0
 800df10:	6003      	str	r3, [r0, #0]
 800df12:	0028      	movs	r0, r5
 800df14:	bd70      	pop	{r4, r5, r6, pc}

0800df16 <rshift>:
 800df16:	0002      	movs	r2, r0
 800df18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df1a:	6904      	ldr	r4, [r0, #16]
 800df1c:	114b      	asrs	r3, r1, #5
 800df1e:	b085      	sub	sp, #20
 800df20:	3214      	adds	r2, #20
 800df22:	9302      	str	r3, [sp, #8]
 800df24:	114d      	asrs	r5, r1, #5
 800df26:	0013      	movs	r3, r2
 800df28:	42ac      	cmp	r4, r5
 800df2a:	dd32      	ble.n	800df92 <rshift+0x7c>
 800df2c:	261f      	movs	r6, #31
 800df2e:	000f      	movs	r7, r1
 800df30:	114b      	asrs	r3, r1, #5
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	00a5      	lsls	r5, r4, #2
 800df36:	18d3      	adds	r3, r2, r3
 800df38:	4037      	ands	r7, r6
 800df3a:	1955      	adds	r5, r2, r5
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	9701      	str	r7, [sp, #4]
 800df40:	4231      	tst	r1, r6
 800df42:	d10d      	bne.n	800df60 <rshift+0x4a>
 800df44:	0016      	movs	r6, r2
 800df46:	0019      	movs	r1, r3
 800df48:	428d      	cmp	r5, r1
 800df4a:	d836      	bhi.n	800dfba <rshift+0xa4>
 800df4c:	9900      	ldr	r1, [sp, #0]
 800df4e:	2300      	movs	r3, #0
 800df50:	3903      	subs	r1, #3
 800df52:	428d      	cmp	r5, r1
 800df54:	d302      	bcc.n	800df5c <rshift+0x46>
 800df56:	9b02      	ldr	r3, [sp, #8]
 800df58:	1ae4      	subs	r4, r4, r3
 800df5a:	00a3      	lsls	r3, r4, #2
 800df5c:	18d3      	adds	r3, r2, r3
 800df5e:	e018      	b.n	800df92 <rshift+0x7c>
 800df60:	2120      	movs	r1, #32
 800df62:	9e01      	ldr	r6, [sp, #4]
 800df64:	9f01      	ldr	r7, [sp, #4]
 800df66:	1b89      	subs	r1, r1, r6
 800df68:	9e00      	ldr	r6, [sp, #0]
 800df6a:	9103      	str	r1, [sp, #12]
 800df6c:	ce02      	ldmia	r6!, {r1}
 800df6e:	4694      	mov	ip, r2
 800df70:	40f9      	lsrs	r1, r7
 800df72:	42b5      	cmp	r5, r6
 800df74:	d816      	bhi.n	800dfa4 <rshift+0x8e>
 800df76:	9e00      	ldr	r6, [sp, #0]
 800df78:	2300      	movs	r3, #0
 800df7a:	3601      	adds	r6, #1
 800df7c:	42b5      	cmp	r5, r6
 800df7e:	d303      	bcc.n	800df88 <rshift+0x72>
 800df80:	9b02      	ldr	r3, [sp, #8]
 800df82:	1ae3      	subs	r3, r4, r3
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	3b04      	subs	r3, #4
 800df88:	18d3      	adds	r3, r2, r3
 800df8a:	6019      	str	r1, [r3, #0]
 800df8c:	2900      	cmp	r1, #0
 800df8e:	d000      	beq.n	800df92 <rshift+0x7c>
 800df90:	3304      	adds	r3, #4
 800df92:	1a99      	subs	r1, r3, r2
 800df94:	1089      	asrs	r1, r1, #2
 800df96:	6101      	str	r1, [r0, #16]
 800df98:	4293      	cmp	r3, r2
 800df9a:	d101      	bne.n	800dfa0 <rshift+0x8a>
 800df9c:	2300      	movs	r3, #0
 800df9e:	6143      	str	r3, [r0, #20]
 800dfa0:	b005      	add	sp, #20
 800dfa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfa4:	6837      	ldr	r7, [r6, #0]
 800dfa6:	9b03      	ldr	r3, [sp, #12]
 800dfa8:	409f      	lsls	r7, r3
 800dfaa:	430f      	orrs	r7, r1
 800dfac:	4661      	mov	r1, ip
 800dfae:	c180      	stmia	r1!, {r7}
 800dfb0:	468c      	mov	ip, r1
 800dfb2:	9b01      	ldr	r3, [sp, #4]
 800dfb4:	ce02      	ldmia	r6!, {r1}
 800dfb6:	40d9      	lsrs	r1, r3
 800dfb8:	e7db      	b.n	800df72 <rshift+0x5c>
 800dfba:	c980      	ldmia	r1!, {r7}
 800dfbc:	c680      	stmia	r6!, {r7}
 800dfbe:	e7c3      	b.n	800df48 <rshift+0x32>

0800dfc0 <__hexdig_fun>:
 800dfc0:	0002      	movs	r2, r0
 800dfc2:	3a30      	subs	r2, #48	; 0x30
 800dfc4:	0003      	movs	r3, r0
 800dfc6:	2a09      	cmp	r2, #9
 800dfc8:	d802      	bhi.n	800dfd0 <__hexdig_fun+0x10>
 800dfca:	3b20      	subs	r3, #32
 800dfcc:	b2d8      	uxtb	r0, r3
 800dfce:	4770      	bx	lr
 800dfd0:	0002      	movs	r2, r0
 800dfd2:	3a61      	subs	r2, #97	; 0x61
 800dfd4:	2a05      	cmp	r2, #5
 800dfd6:	d801      	bhi.n	800dfdc <__hexdig_fun+0x1c>
 800dfd8:	3b47      	subs	r3, #71	; 0x47
 800dfda:	e7f7      	b.n	800dfcc <__hexdig_fun+0xc>
 800dfdc:	001a      	movs	r2, r3
 800dfde:	3a41      	subs	r2, #65	; 0x41
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	2a05      	cmp	r2, #5
 800dfe4:	d8f3      	bhi.n	800dfce <__hexdig_fun+0xe>
 800dfe6:	3b27      	subs	r3, #39	; 0x27
 800dfe8:	e7f0      	b.n	800dfcc <__hexdig_fun+0xc>
	...

0800dfec <__gethex>:
 800dfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfee:	b089      	sub	sp, #36	; 0x24
 800dff0:	9307      	str	r3, [sp, #28]
 800dff2:	2302      	movs	r3, #2
 800dff4:	9201      	str	r2, [sp, #4]
 800dff6:	680a      	ldr	r2, [r1, #0]
 800dff8:	425b      	negs	r3, r3
 800dffa:	9003      	str	r0, [sp, #12]
 800dffc:	9106      	str	r1, [sp, #24]
 800dffe:	1c96      	adds	r6, r2, #2
 800e000:	1a9b      	subs	r3, r3, r2
 800e002:	199a      	adds	r2, r3, r6
 800e004:	9600      	str	r6, [sp, #0]
 800e006:	9205      	str	r2, [sp, #20]
 800e008:	9a00      	ldr	r2, [sp, #0]
 800e00a:	3601      	adds	r6, #1
 800e00c:	7810      	ldrb	r0, [r2, #0]
 800e00e:	2830      	cmp	r0, #48	; 0x30
 800e010:	d0f7      	beq.n	800e002 <__gethex+0x16>
 800e012:	f7ff ffd5 	bl	800dfc0 <__hexdig_fun>
 800e016:	2300      	movs	r3, #0
 800e018:	001d      	movs	r5, r3
 800e01a:	9302      	str	r3, [sp, #8]
 800e01c:	4298      	cmp	r0, r3
 800e01e:	d11d      	bne.n	800e05c <__gethex+0x70>
 800e020:	2201      	movs	r2, #1
 800e022:	49a6      	ldr	r1, [pc, #664]	; (800e2bc <__gethex+0x2d0>)
 800e024:	9800      	ldr	r0, [sp, #0]
 800e026:	f7ff fef7 	bl	800de18 <strncmp>
 800e02a:	0007      	movs	r7, r0
 800e02c:	42a8      	cmp	r0, r5
 800e02e:	d169      	bne.n	800e104 <__gethex+0x118>
 800e030:	9b00      	ldr	r3, [sp, #0]
 800e032:	0034      	movs	r4, r6
 800e034:	7858      	ldrb	r0, [r3, #1]
 800e036:	f7ff ffc3 	bl	800dfc0 <__hexdig_fun>
 800e03a:	2301      	movs	r3, #1
 800e03c:	9302      	str	r3, [sp, #8]
 800e03e:	42a8      	cmp	r0, r5
 800e040:	d02f      	beq.n	800e0a2 <__gethex+0xb6>
 800e042:	9600      	str	r6, [sp, #0]
 800e044:	9b00      	ldr	r3, [sp, #0]
 800e046:	7818      	ldrb	r0, [r3, #0]
 800e048:	2830      	cmp	r0, #48	; 0x30
 800e04a:	d009      	beq.n	800e060 <__gethex+0x74>
 800e04c:	f7ff ffb8 	bl	800dfc0 <__hexdig_fun>
 800e050:	4242      	negs	r2, r0
 800e052:	4142      	adcs	r2, r0
 800e054:	2301      	movs	r3, #1
 800e056:	0035      	movs	r5, r6
 800e058:	9202      	str	r2, [sp, #8]
 800e05a:	9305      	str	r3, [sp, #20]
 800e05c:	9c00      	ldr	r4, [sp, #0]
 800e05e:	e004      	b.n	800e06a <__gethex+0x7e>
 800e060:	9b00      	ldr	r3, [sp, #0]
 800e062:	3301      	adds	r3, #1
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	e7ed      	b.n	800e044 <__gethex+0x58>
 800e068:	3401      	adds	r4, #1
 800e06a:	7820      	ldrb	r0, [r4, #0]
 800e06c:	f7ff ffa8 	bl	800dfc0 <__hexdig_fun>
 800e070:	1e07      	subs	r7, r0, #0
 800e072:	d1f9      	bne.n	800e068 <__gethex+0x7c>
 800e074:	2201      	movs	r2, #1
 800e076:	0020      	movs	r0, r4
 800e078:	4990      	ldr	r1, [pc, #576]	; (800e2bc <__gethex+0x2d0>)
 800e07a:	f7ff fecd 	bl	800de18 <strncmp>
 800e07e:	2800      	cmp	r0, #0
 800e080:	d10d      	bne.n	800e09e <__gethex+0xb2>
 800e082:	2d00      	cmp	r5, #0
 800e084:	d106      	bne.n	800e094 <__gethex+0xa8>
 800e086:	3401      	adds	r4, #1
 800e088:	0025      	movs	r5, r4
 800e08a:	7820      	ldrb	r0, [r4, #0]
 800e08c:	f7ff ff98 	bl	800dfc0 <__hexdig_fun>
 800e090:	2800      	cmp	r0, #0
 800e092:	d102      	bne.n	800e09a <__gethex+0xae>
 800e094:	1b2d      	subs	r5, r5, r4
 800e096:	00af      	lsls	r7, r5, #2
 800e098:	e003      	b.n	800e0a2 <__gethex+0xb6>
 800e09a:	3401      	adds	r4, #1
 800e09c:	e7f5      	b.n	800e08a <__gethex+0x9e>
 800e09e:	2d00      	cmp	r5, #0
 800e0a0:	d1f8      	bne.n	800e094 <__gethex+0xa8>
 800e0a2:	2220      	movs	r2, #32
 800e0a4:	7823      	ldrb	r3, [r4, #0]
 800e0a6:	0026      	movs	r6, r4
 800e0a8:	4393      	bics	r3, r2
 800e0aa:	2b50      	cmp	r3, #80	; 0x50
 800e0ac:	d11d      	bne.n	800e0ea <__gethex+0xfe>
 800e0ae:	7863      	ldrb	r3, [r4, #1]
 800e0b0:	2b2b      	cmp	r3, #43	; 0x2b
 800e0b2:	d02c      	beq.n	800e10e <__gethex+0x122>
 800e0b4:	2b2d      	cmp	r3, #45	; 0x2d
 800e0b6:	d02e      	beq.n	800e116 <__gethex+0x12a>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	1c66      	adds	r6, r4, #1
 800e0bc:	9304      	str	r3, [sp, #16]
 800e0be:	7830      	ldrb	r0, [r6, #0]
 800e0c0:	f7ff ff7e 	bl	800dfc0 <__hexdig_fun>
 800e0c4:	1e43      	subs	r3, r0, #1
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	2b18      	cmp	r3, #24
 800e0ca:	d82b      	bhi.n	800e124 <__gethex+0x138>
 800e0cc:	3810      	subs	r0, #16
 800e0ce:	0005      	movs	r5, r0
 800e0d0:	7870      	ldrb	r0, [r6, #1]
 800e0d2:	f7ff ff75 	bl	800dfc0 <__hexdig_fun>
 800e0d6:	1e43      	subs	r3, r0, #1
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	3601      	adds	r6, #1
 800e0dc:	2b18      	cmp	r3, #24
 800e0de:	d91c      	bls.n	800e11a <__gethex+0x12e>
 800e0e0:	9b04      	ldr	r3, [sp, #16]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d000      	beq.n	800e0e8 <__gethex+0xfc>
 800e0e6:	426d      	negs	r5, r5
 800e0e8:	197f      	adds	r7, r7, r5
 800e0ea:	9b06      	ldr	r3, [sp, #24]
 800e0ec:	601e      	str	r6, [r3, #0]
 800e0ee:	9b02      	ldr	r3, [sp, #8]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d019      	beq.n	800e128 <__gethex+0x13c>
 800e0f4:	2600      	movs	r6, #0
 800e0f6:	9b05      	ldr	r3, [sp, #20]
 800e0f8:	42b3      	cmp	r3, r6
 800e0fa:	d100      	bne.n	800e0fe <__gethex+0x112>
 800e0fc:	3606      	adds	r6, #6
 800e0fe:	0030      	movs	r0, r6
 800e100:	b009      	add	sp, #36	; 0x24
 800e102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e104:	2301      	movs	r3, #1
 800e106:	2700      	movs	r7, #0
 800e108:	9c00      	ldr	r4, [sp, #0]
 800e10a:	9302      	str	r3, [sp, #8]
 800e10c:	e7c9      	b.n	800e0a2 <__gethex+0xb6>
 800e10e:	2300      	movs	r3, #0
 800e110:	9304      	str	r3, [sp, #16]
 800e112:	1ca6      	adds	r6, r4, #2
 800e114:	e7d3      	b.n	800e0be <__gethex+0xd2>
 800e116:	2301      	movs	r3, #1
 800e118:	e7fa      	b.n	800e110 <__gethex+0x124>
 800e11a:	230a      	movs	r3, #10
 800e11c:	435d      	muls	r5, r3
 800e11e:	182d      	adds	r5, r5, r0
 800e120:	3d10      	subs	r5, #16
 800e122:	e7d5      	b.n	800e0d0 <__gethex+0xe4>
 800e124:	0026      	movs	r6, r4
 800e126:	e7e0      	b.n	800e0ea <__gethex+0xfe>
 800e128:	9b00      	ldr	r3, [sp, #0]
 800e12a:	9902      	ldr	r1, [sp, #8]
 800e12c:	1ae3      	subs	r3, r4, r3
 800e12e:	3b01      	subs	r3, #1
 800e130:	2b07      	cmp	r3, #7
 800e132:	dc0a      	bgt.n	800e14a <__gethex+0x15e>
 800e134:	9803      	ldr	r0, [sp, #12]
 800e136:	f7fe f8d5 	bl	800c2e4 <_Balloc>
 800e13a:	1e05      	subs	r5, r0, #0
 800e13c:	d108      	bne.n	800e150 <__gethex+0x164>
 800e13e:	002a      	movs	r2, r5
 800e140:	21e4      	movs	r1, #228	; 0xe4
 800e142:	4b5f      	ldr	r3, [pc, #380]	; (800e2c0 <__gethex+0x2d4>)
 800e144:	485f      	ldr	r0, [pc, #380]	; (800e2c4 <__gethex+0x2d8>)
 800e146:	f7ff fe9b 	bl	800de80 <__assert_func>
 800e14a:	3101      	adds	r1, #1
 800e14c:	105b      	asrs	r3, r3, #1
 800e14e:	e7ef      	b.n	800e130 <__gethex+0x144>
 800e150:	0003      	movs	r3, r0
 800e152:	3314      	adds	r3, #20
 800e154:	9302      	str	r3, [sp, #8]
 800e156:	9305      	str	r3, [sp, #20]
 800e158:	2300      	movs	r3, #0
 800e15a:	001e      	movs	r6, r3
 800e15c:	9304      	str	r3, [sp, #16]
 800e15e:	9b00      	ldr	r3, [sp, #0]
 800e160:	42a3      	cmp	r3, r4
 800e162:	d33f      	bcc.n	800e1e4 <__gethex+0x1f8>
 800e164:	9c05      	ldr	r4, [sp, #20]
 800e166:	9b02      	ldr	r3, [sp, #8]
 800e168:	c440      	stmia	r4!, {r6}
 800e16a:	1ae4      	subs	r4, r4, r3
 800e16c:	10a4      	asrs	r4, r4, #2
 800e16e:	0030      	movs	r0, r6
 800e170:	612c      	str	r4, [r5, #16]
 800e172:	f7fe f9af 	bl	800c4d4 <__hi0bits>
 800e176:	9b01      	ldr	r3, [sp, #4]
 800e178:	0164      	lsls	r4, r4, #5
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	1a26      	subs	r6, r4, r0
 800e17e:	9300      	str	r3, [sp, #0]
 800e180:	429e      	cmp	r6, r3
 800e182:	dd51      	ble.n	800e228 <__gethex+0x23c>
 800e184:	1af6      	subs	r6, r6, r3
 800e186:	0031      	movs	r1, r6
 800e188:	0028      	movs	r0, r5
 800e18a:	f7fe fd43 	bl	800cc14 <__any_on>
 800e18e:	1e04      	subs	r4, r0, #0
 800e190:	d016      	beq.n	800e1c0 <__gethex+0x1d4>
 800e192:	2401      	movs	r4, #1
 800e194:	231f      	movs	r3, #31
 800e196:	0020      	movs	r0, r4
 800e198:	1e72      	subs	r2, r6, #1
 800e19a:	4013      	ands	r3, r2
 800e19c:	4098      	lsls	r0, r3
 800e19e:	0003      	movs	r3, r0
 800e1a0:	1151      	asrs	r1, r2, #5
 800e1a2:	9802      	ldr	r0, [sp, #8]
 800e1a4:	0089      	lsls	r1, r1, #2
 800e1a6:	5809      	ldr	r1, [r1, r0]
 800e1a8:	4219      	tst	r1, r3
 800e1aa:	d009      	beq.n	800e1c0 <__gethex+0x1d4>
 800e1ac:	42a2      	cmp	r2, r4
 800e1ae:	dd06      	ble.n	800e1be <__gethex+0x1d2>
 800e1b0:	0028      	movs	r0, r5
 800e1b2:	1eb1      	subs	r1, r6, #2
 800e1b4:	f7fe fd2e 	bl	800cc14 <__any_on>
 800e1b8:	3402      	adds	r4, #2
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	d100      	bne.n	800e1c0 <__gethex+0x1d4>
 800e1be:	2402      	movs	r4, #2
 800e1c0:	0031      	movs	r1, r6
 800e1c2:	0028      	movs	r0, r5
 800e1c4:	f7ff fea7 	bl	800df16 <rshift>
 800e1c8:	19bf      	adds	r7, r7, r6
 800e1ca:	9b01      	ldr	r3, [sp, #4]
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	42bb      	cmp	r3, r7
 800e1d0:	da3a      	bge.n	800e248 <__gethex+0x25c>
 800e1d2:	0029      	movs	r1, r5
 800e1d4:	9803      	ldr	r0, [sp, #12]
 800e1d6:	f7fe f8c9 	bl	800c36c <_Bfree>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1de:	26a3      	movs	r6, #163	; 0xa3
 800e1e0:	6013      	str	r3, [r2, #0]
 800e1e2:	e78c      	b.n	800e0fe <__gethex+0x112>
 800e1e4:	3c01      	subs	r4, #1
 800e1e6:	7823      	ldrb	r3, [r4, #0]
 800e1e8:	2b2e      	cmp	r3, #46	; 0x2e
 800e1ea:	d012      	beq.n	800e212 <__gethex+0x226>
 800e1ec:	9b04      	ldr	r3, [sp, #16]
 800e1ee:	2b20      	cmp	r3, #32
 800e1f0:	d104      	bne.n	800e1fc <__gethex+0x210>
 800e1f2:	9b05      	ldr	r3, [sp, #20]
 800e1f4:	c340      	stmia	r3!, {r6}
 800e1f6:	2600      	movs	r6, #0
 800e1f8:	9305      	str	r3, [sp, #20]
 800e1fa:	9604      	str	r6, [sp, #16]
 800e1fc:	7820      	ldrb	r0, [r4, #0]
 800e1fe:	f7ff fedf 	bl	800dfc0 <__hexdig_fun>
 800e202:	230f      	movs	r3, #15
 800e204:	4018      	ands	r0, r3
 800e206:	9b04      	ldr	r3, [sp, #16]
 800e208:	4098      	lsls	r0, r3
 800e20a:	3304      	adds	r3, #4
 800e20c:	4306      	orrs	r6, r0
 800e20e:	9304      	str	r3, [sp, #16]
 800e210:	e7a5      	b.n	800e15e <__gethex+0x172>
 800e212:	9b00      	ldr	r3, [sp, #0]
 800e214:	42a3      	cmp	r3, r4
 800e216:	d8e9      	bhi.n	800e1ec <__gethex+0x200>
 800e218:	2201      	movs	r2, #1
 800e21a:	0020      	movs	r0, r4
 800e21c:	4927      	ldr	r1, [pc, #156]	; (800e2bc <__gethex+0x2d0>)
 800e21e:	f7ff fdfb 	bl	800de18 <strncmp>
 800e222:	2800      	cmp	r0, #0
 800e224:	d1e2      	bne.n	800e1ec <__gethex+0x200>
 800e226:	e79a      	b.n	800e15e <__gethex+0x172>
 800e228:	9b00      	ldr	r3, [sp, #0]
 800e22a:	2400      	movs	r4, #0
 800e22c:	429e      	cmp	r6, r3
 800e22e:	dacc      	bge.n	800e1ca <__gethex+0x1de>
 800e230:	1b9e      	subs	r6, r3, r6
 800e232:	0029      	movs	r1, r5
 800e234:	0032      	movs	r2, r6
 800e236:	9803      	ldr	r0, [sp, #12]
 800e238:	f7fe fab8 	bl	800c7ac <__lshift>
 800e23c:	0003      	movs	r3, r0
 800e23e:	3314      	adds	r3, #20
 800e240:	0005      	movs	r5, r0
 800e242:	1bbf      	subs	r7, r7, r6
 800e244:	9302      	str	r3, [sp, #8]
 800e246:	e7c0      	b.n	800e1ca <__gethex+0x1de>
 800e248:	9b01      	ldr	r3, [sp, #4]
 800e24a:	685e      	ldr	r6, [r3, #4]
 800e24c:	42be      	cmp	r6, r7
 800e24e:	dd70      	ble.n	800e332 <__gethex+0x346>
 800e250:	9b00      	ldr	r3, [sp, #0]
 800e252:	1bf6      	subs	r6, r6, r7
 800e254:	42b3      	cmp	r3, r6
 800e256:	dc37      	bgt.n	800e2c8 <__gethex+0x2dc>
 800e258:	9b01      	ldr	r3, [sp, #4]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	2b02      	cmp	r3, #2
 800e25e:	d024      	beq.n	800e2aa <__gethex+0x2be>
 800e260:	2b03      	cmp	r3, #3
 800e262:	d026      	beq.n	800e2b2 <__gethex+0x2c6>
 800e264:	2b01      	cmp	r3, #1
 800e266:	d117      	bne.n	800e298 <__gethex+0x2ac>
 800e268:	9b00      	ldr	r3, [sp, #0]
 800e26a:	42b3      	cmp	r3, r6
 800e26c:	d114      	bne.n	800e298 <__gethex+0x2ac>
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d10b      	bne.n	800e28a <__gethex+0x29e>
 800e272:	9b01      	ldr	r3, [sp, #4]
 800e274:	9a07      	ldr	r2, [sp, #28]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	2662      	movs	r6, #98	; 0x62
 800e27a:	6013      	str	r3, [r2, #0]
 800e27c:	2301      	movs	r3, #1
 800e27e:	9a02      	ldr	r2, [sp, #8]
 800e280:	612b      	str	r3, [r5, #16]
 800e282:	6013      	str	r3, [r2, #0]
 800e284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e286:	601d      	str	r5, [r3, #0]
 800e288:	e739      	b.n	800e0fe <__gethex+0x112>
 800e28a:	9900      	ldr	r1, [sp, #0]
 800e28c:	0028      	movs	r0, r5
 800e28e:	3901      	subs	r1, #1
 800e290:	f7fe fcc0 	bl	800cc14 <__any_on>
 800e294:	2800      	cmp	r0, #0
 800e296:	d1ec      	bne.n	800e272 <__gethex+0x286>
 800e298:	0029      	movs	r1, r5
 800e29a:	9803      	ldr	r0, [sp, #12]
 800e29c:	f7fe f866 	bl	800c36c <_Bfree>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2a4:	2650      	movs	r6, #80	; 0x50
 800e2a6:	6013      	str	r3, [r2, #0]
 800e2a8:	e729      	b.n	800e0fe <__gethex+0x112>
 800e2aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d1f3      	bne.n	800e298 <__gethex+0x2ac>
 800e2b0:	e7df      	b.n	800e272 <__gethex+0x286>
 800e2b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d1dc      	bne.n	800e272 <__gethex+0x286>
 800e2b8:	e7ee      	b.n	800e298 <__gethex+0x2ac>
 800e2ba:	46c0      	nop			; (mov r8, r8)
 800e2bc:	0800f474 	.word	0x0800f474
 800e2c0:	0800f309 	.word	0x0800f309
 800e2c4:	0800f61e 	.word	0x0800f61e
 800e2c8:	1e77      	subs	r7, r6, #1
 800e2ca:	2c00      	cmp	r4, #0
 800e2cc:	d12f      	bne.n	800e32e <__gethex+0x342>
 800e2ce:	2f00      	cmp	r7, #0
 800e2d0:	d004      	beq.n	800e2dc <__gethex+0x2f0>
 800e2d2:	0039      	movs	r1, r7
 800e2d4:	0028      	movs	r0, r5
 800e2d6:	f7fe fc9d 	bl	800cc14 <__any_on>
 800e2da:	0004      	movs	r4, r0
 800e2dc:	231f      	movs	r3, #31
 800e2de:	117a      	asrs	r2, r7, #5
 800e2e0:	401f      	ands	r7, r3
 800e2e2:	3b1e      	subs	r3, #30
 800e2e4:	40bb      	lsls	r3, r7
 800e2e6:	9902      	ldr	r1, [sp, #8]
 800e2e8:	0092      	lsls	r2, r2, #2
 800e2ea:	5852      	ldr	r2, [r2, r1]
 800e2ec:	421a      	tst	r2, r3
 800e2ee:	d001      	beq.n	800e2f4 <__gethex+0x308>
 800e2f0:	2302      	movs	r3, #2
 800e2f2:	431c      	orrs	r4, r3
 800e2f4:	9b00      	ldr	r3, [sp, #0]
 800e2f6:	0031      	movs	r1, r6
 800e2f8:	1b9b      	subs	r3, r3, r6
 800e2fa:	2602      	movs	r6, #2
 800e2fc:	0028      	movs	r0, r5
 800e2fe:	9300      	str	r3, [sp, #0]
 800e300:	f7ff fe09 	bl	800df16 <rshift>
 800e304:	9b01      	ldr	r3, [sp, #4]
 800e306:	685f      	ldr	r7, [r3, #4]
 800e308:	2c00      	cmp	r4, #0
 800e30a:	d041      	beq.n	800e390 <__gethex+0x3a4>
 800e30c:	9b01      	ldr	r3, [sp, #4]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	2b02      	cmp	r3, #2
 800e312:	d010      	beq.n	800e336 <__gethex+0x34a>
 800e314:	2b03      	cmp	r3, #3
 800e316:	d012      	beq.n	800e33e <__gethex+0x352>
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d106      	bne.n	800e32a <__gethex+0x33e>
 800e31c:	07a2      	lsls	r2, r4, #30
 800e31e:	d504      	bpl.n	800e32a <__gethex+0x33e>
 800e320:	9a02      	ldr	r2, [sp, #8]
 800e322:	6812      	ldr	r2, [r2, #0]
 800e324:	4314      	orrs	r4, r2
 800e326:	421c      	tst	r4, r3
 800e328:	d10c      	bne.n	800e344 <__gethex+0x358>
 800e32a:	2310      	movs	r3, #16
 800e32c:	e02f      	b.n	800e38e <__gethex+0x3a2>
 800e32e:	2401      	movs	r4, #1
 800e330:	e7d4      	b.n	800e2dc <__gethex+0x2f0>
 800e332:	2601      	movs	r6, #1
 800e334:	e7e8      	b.n	800e308 <__gethex+0x31c>
 800e336:	2301      	movs	r3, #1
 800e338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e33a:	1a9b      	subs	r3, r3, r2
 800e33c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e33e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e340:	2b00      	cmp	r3, #0
 800e342:	d0f2      	beq.n	800e32a <__gethex+0x33e>
 800e344:	692b      	ldr	r3, [r5, #16]
 800e346:	2000      	movs	r0, #0
 800e348:	9302      	str	r3, [sp, #8]
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	9304      	str	r3, [sp, #16]
 800e34e:	002b      	movs	r3, r5
 800e350:	9a04      	ldr	r2, [sp, #16]
 800e352:	3314      	adds	r3, #20
 800e354:	1899      	adds	r1, r3, r2
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	1c54      	adds	r4, r2, #1
 800e35a:	d01e      	beq.n	800e39a <__gethex+0x3ae>
 800e35c:	3201      	adds	r2, #1
 800e35e:	601a      	str	r2, [r3, #0]
 800e360:	002b      	movs	r3, r5
 800e362:	3314      	adds	r3, #20
 800e364:	2e02      	cmp	r6, #2
 800e366:	d141      	bne.n	800e3ec <__gethex+0x400>
 800e368:	9a01      	ldr	r2, [sp, #4]
 800e36a:	9900      	ldr	r1, [sp, #0]
 800e36c:	6812      	ldr	r2, [r2, #0]
 800e36e:	3a01      	subs	r2, #1
 800e370:	428a      	cmp	r2, r1
 800e372:	d10b      	bne.n	800e38c <__gethex+0x3a0>
 800e374:	221f      	movs	r2, #31
 800e376:	9800      	ldr	r0, [sp, #0]
 800e378:	1149      	asrs	r1, r1, #5
 800e37a:	4002      	ands	r2, r0
 800e37c:	2001      	movs	r0, #1
 800e37e:	0004      	movs	r4, r0
 800e380:	4094      	lsls	r4, r2
 800e382:	0089      	lsls	r1, r1, #2
 800e384:	58cb      	ldr	r3, [r1, r3]
 800e386:	4223      	tst	r3, r4
 800e388:	d000      	beq.n	800e38c <__gethex+0x3a0>
 800e38a:	2601      	movs	r6, #1
 800e38c:	2320      	movs	r3, #32
 800e38e:	431e      	orrs	r6, r3
 800e390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e392:	601d      	str	r5, [r3, #0]
 800e394:	9b07      	ldr	r3, [sp, #28]
 800e396:	601f      	str	r7, [r3, #0]
 800e398:	e6b1      	b.n	800e0fe <__gethex+0x112>
 800e39a:	c301      	stmia	r3!, {r0}
 800e39c:	4299      	cmp	r1, r3
 800e39e:	d8da      	bhi.n	800e356 <__gethex+0x36a>
 800e3a0:	68ab      	ldr	r3, [r5, #8]
 800e3a2:	9a02      	ldr	r2, [sp, #8]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	db18      	blt.n	800e3da <__gethex+0x3ee>
 800e3a8:	6869      	ldr	r1, [r5, #4]
 800e3aa:	9803      	ldr	r0, [sp, #12]
 800e3ac:	3101      	adds	r1, #1
 800e3ae:	f7fd ff99 	bl	800c2e4 <_Balloc>
 800e3b2:	1e04      	subs	r4, r0, #0
 800e3b4:	d104      	bne.n	800e3c0 <__gethex+0x3d4>
 800e3b6:	0022      	movs	r2, r4
 800e3b8:	2184      	movs	r1, #132	; 0x84
 800e3ba:	4b1c      	ldr	r3, [pc, #112]	; (800e42c <__gethex+0x440>)
 800e3bc:	481c      	ldr	r0, [pc, #112]	; (800e430 <__gethex+0x444>)
 800e3be:	e6c2      	b.n	800e146 <__gethex+0x15a>
 800e3c0:	0029      	movs	r1, r5
 800e3c2:	692a      	ldr	r2, [r5, #16]
 800e3c4:	310c      	adds	r1, #12
 800e3c6:	3202      	adds	r2, #2
 800e3c8:	0092      	lsls	r2, r2, #2
 800e3ca:	300c      	adds	r0, #12
 800e3cc:	f7ff fd48 	bl	800de60 <memcpy>
 800e3d0:	0029      	movs	r1, r5
 800e3d2:	9803      	ldr	r0, [sp, #12]
 800e3d4:	f7fd ffca 	bl	800c36c <_Bfree>
 800e3d8:	0025      	movs	r5, r4
 800e3da:	692b      	ldr	r3, [r5, #16]
 800e3dc:	1c5a      	adds	r2, r3, #1
 800e3de:	612a      	str	r2, [r5, #16]
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	18eb      	adds	r3, r5, r3
 800e3e8:	605a      	str	r2, [r3, #4]
 800e3ea:	e7b9      	b.n	800e360 <__gethex+0x374>
 800e3ec:	692a      	ldr	r2, [r5, #16]
 800e3ee:	9902      	ldr	r1, [sp, #8]
 800e3f0:	428a      	cmp	r2, r1
 800e3f2:	dd09      	ble.n	800e408 <__gethex+0x41c>
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	0028      	movs	r0, r5
 800e3f8:	f7ff fd8d 	bl	800df16 <rshift>
 800e3fc:	9b01      	ldr	r3, [sp, #4]
 800e3fe:	3701      	adds	r7, #1
 800e400:	689b      	ldr	r3, [r3, #8]
 800e402:	42bb      	cmp	r3, r7
 800e404:	dac1      	bge.n	800e38a <__gethex+0x39e>
 800e406:	e6e4      	b.n	800e1d2 <__gethex+0x1e6>
 800e408:	221f      	movs	r2, #31
 800e40a:	9c00      	ldr	r4, [sp, #0]
 800e40c:	9900      	ldr	r1, [sp, #0]
 800e40e:	2601      	movs	r6, #1
 800e410:	4014      	ands	r4, r2
 800e412:	4211      	tst	r1, r2
 800e414:	d0ba      	beq.n	800e38c <__gethex+0x3a0>
 800e416:	9a04      	ldr	r2, [sp, #16]
 800e418:	189b      	adds	r3, r3, r2
 800e41a:	3b04      	subs	r3, #4
 800e41c:	6818      	ldr	r0, [r3, #0]
 800e41e:	f7fe f859 	bl	800c4d4 <__hi0bits>
 800e422:	2320      	movs	r3, #32
 800e424:	1b1b      	subs	r3, r3, r4
 800e426:	4298      	cmp	r0, r3
 800e428:	dbe4      	blt.n	800e3f4 <__gethex+0x408>
 800e42a:	e7af      	b.n	800e38c <__gethex+0x3a0>
 800e42c:	0800f309 	.word	0x0800f309
 800e430:	0800f61e 	.word	0x0800f61e

0800e434 <L_shift>:
 800e434:	2308      	movs	r3, #8
 800e436:	b570      	push	{r4, r5, r6, lr}
 800e438:	2520      	movs	r5, #32
 800e43a:	1a9a      	subs	r2, r3, r2
 800e43c:	0092      	lsls	r2, r2, #2
 800e43e:	1aad      	subs	r5, r5, r2
 800e440:	6843      	ldr	r3, [r0, #4]
 800e442:	6804      	ldr	r4, [r0, #0]
 800e444:	001e      	movs	r6, r3
 800e446:	40ae      	lsls	r6, r5
 800e448:	40d3      	lsrs	r3, r2
 800e44a:	4334      	orrs	r4, r6
 800e44c:	6004      	str	r4, [r0, #0]
 800e44e:	6043      	str	r3, [r0, #4]
 800e450:	3004      	adds	r0, #4
 800e452:	4288      	cmp	r0, r1
 800e454:	d3f4      	bcc.n	800e440 <L_shift+0xc>
 800e456:	bd70      	pop	{r4, r5, r6, pc}

0800e458 <__match>:
 800e458:	b530      	push	{r4, r5, lr}
 800e45a:	6803      	ldr	r3, [r0, #0]
 800e45c:	780c      	ldrb	r4, [r1, #0]
 800e45e:	3301      	adds	r3, #1
 800e460:	2c00      	cmp	r4, #0
 800e462:	d102      	bne.n	800e46a <__match+0x12>
 800e464:	6003      	str	r3, [r0, #0]
 800e466:	2001      	movs	r0, #1
 800e468:	bd30      	pop	{r4, r5, pc}
 800e46a:	781a      	ldrb	r2, [r3, #0]
 800e46c:	0015      	movs	r5, r2
 800e46e:	3d41      	subs	r5, #65	; 0x41
 800e470:	2d19      	cmp	r5, #25
 800e472:	d800      	bhi.n	800e476 <__match+0x1e>
 800e474:	3220      	adds	r2, #32
 800e476:	3101      	adds	r1, #1
 800e478:	42a2      	cmp	r2, r4
 800e47a:	d0ef      	beq.n	800e45c <__match+0x4>
 800e47c:	2000      	movs	r0, #0
 800e47e:	e7f3      	b.n	800e468 <__match+0x10>

0800e480 <__hexnan>:
 800e480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e482:	680b      	ldr	r3, [r1, #0]
 800e484:	b08b      	sub	sp, #44	; 0x2c
 800e486:	9201      	str	r2, [sp, #4]
 800e488:	9901      	ldr	r1, [sp, #4]
 800e48a:	115a      	asrs	r2, r3, #5
 800e48c:	0092      	lsls	r2, r2, #2
 800e48e:	188a      	adds	r2, r1, r2
 800e490:	9202      	str	r2, [sp, #8]
 800e492:	0019      	movs	r1, r3
 800e494:	221f      	movs	r2, #31
 800e496:	4011      	ands	r1, r2
 800e498:	9008      	str	r0, [sp, #32]
 800e49a:	9106      	str	r1, [sp, #24]
 800e49c:	4213      	tst	r3, r2
 800e49e:	d002      	beq.n	800e4a6 <__hexnan+0x26>
 800e4a0:	9b02      	ldr	r3, [sp, #8]
 800e4a2:	3304      	adds	r3, #4
 800e4a4:	9302      	str	r3, [sp, #8]
 800e4a6:	9b02      	ldr	r3, [sp, #8]
 800e4a8:	2500      	movs	r5, #0
 800e4aa:	1f1f      	subs	r7, r3, #4
 800e4ac:	003e      	movs	r6, r7
 800e4ae:	003c      	movs	r4, r7
 800e4b0:	9b08      	ldr	r3, [sp, #32]
 800e4b2:	603d      	str	r5, [r7, #0]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	9507      	str	r5, [sp, #28]
 800e4b8:	9305      	str	r3, [sp, #20]
 800e4ba:	9503      	str	r5, [sp, #12]
 800e4bc:	9b05      	ldr	r3, [sp, #20]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	9309      	str	r3, [sp, #36]	; 0x24
 800e4c2:	9b05      	ldr	r3, [sp, #20]
 800e4c4:	785b      	ldrb	r3, [r3, #1]
 800e4c6:	9304      	str	r3, [sp, #16]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d028      	beq.n	800e51e <__hexnan+0x9e>
 800e4cc:	9804      	ldr	r0, [sp, #16]
 800e4ce:	f7ff fd77 	bl	800dfc0 <__hexdig_fun>
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	d154      	bne.n	800e580 <__hexnan+0x100>
 800e4d6:	9b04      	ldr	r3, [sp, #16]
 800e4d8:	2b20      	cmp	r3, #32
 800e4da:	d819      	bhi.n	800e510 <__hexnan+0x90>
 800e4dc:	9b03      	ldr	r3, [sp, #12]
 800e4de:	9a07      	ldr	r2, [sp, #28]
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	dd12      	ble.n	800e50a <__hexnan+0x8a>
 800e4e4:	42b4      	cmp	r4, r6
 800e4e6:	d206      	bcs.n	800e4f6 <__hexnan+0x76>
 800e4e8:	2d07      	cmp	r5, #7
 800e4ea:	dc04      	bgt.n	800e4f6 <__hexnan+0x76>
 800e4ec:	002a      	movs	r2, r5
 800e4ee:	0031      	movs	r1, r6
 800e4f0:	0020      	movs	r0, r4
 800e4f2:	f7ff ff9f 	bl	800e434 <L_shift>
 800e4f6:	9b01      	ldr	r3, [sp, #4]
 800e4f8:	2508      	movs	r5, #8
 800e4fa:	429c      	cmp	r4, r3
 800e4fc:	d905      	bls.n	800e50a <__hexnan+0x8a>
 800e4fe:	1f26      	subs	r6, r4, #4
 800e500:	2500      	movs	r5, #0
 800e502:	0034      	movs	r4, r6
 800e504:	9b03      	ldr	r3, [sp, #12]
 800e506:	6035      	str	r5, [r6, #0]
 800e508:	9307      	str	r3, [sp, #28]
 800e50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e50c:	9305      	str	r3, [sp, #20]
 800e50e:	e7d5      	b.n	800e4bc <__hexnan+0x3c>
 800e510:	9b04      	ldr	r3, [sp, #16]
 800e512:	2b29      	cmp	r3, #41	; 0x29
 800e514:	d159      	bne.n	800e5ca <__hexnan+0x14a>
 800e516:	9b05      	ldr	r3, [sp, #20]
 800e518:	9a08      	ldr	r2, [sp, #32]
 800e51a:	3302      	adds	r3, #2
 800e51c:	6013      	str	r3, [r2, #0]
 800e51e:	9b03      	ldr	r3, [sp, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d052      	beq.n	800e5ca <__hexnan+0x14a>
 800e524:	42b4      	cmp	r4, r6
 800e526:	d206      	bcs.n	800e536 <__hexnan+0xb6>
 800e528:	2d07      	cmp	r5, #7
 800e52a:	dc04      	bgt.n	800e536 <__hexnan+0xb6>
 800e52c:	002a      	movs	r2, r5
 800e52e:	0031      	movs	r1, r6
 800e530:	0020      	movs	r0, r4
 800e532:	f7ff ff7f 	bl	800e434 <L_shift>
 800e536:	9b01      	ldr	r3, [sp, #4]
 800e538:	429c      	cmp	r4, r3
 800e53a:	d935      	bls.n	800e5a8 <__hexnan+0x128>
 800e53c:	001a      	movs	r2, r3
 800e53e:	0023      	movs	r3, r4
 800e540:	cb02      	ldmia	r3!, {r1}
 800e542:	c202      	stmia	r2!, {r1}
 800e544:	429f      	cmp	r7, r3
 800e546:	d2fb      	bcs.n	800e540 <__hexnan+0xc0>
 800e548:	9b02      	ldr	r3, [sp, #8]
 800e54a:	1c62      	adds	r2, r4, #1
 800e54c:	1ed9      	subs	r1, r3, #3
 800e54e:	2304      	movs	r3, #4
 800e550:	4291      	cmp	r1, r2
 800e552:	d305      	bcc.n	800e560 <__hexnan+0xe0>
 800e554:	9b02      	ldr	r3, [sp, #8]
 800e556:	3b04      	subs	r3, #4
 800e558:	1b1b      	subs	r3, r3, r4
 800e55a:	089b      	lsrs	r3, r3, #2
 800e55c:	3301      	adds	r3, #1
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	9a01      	ldr	r2, [sp, #4]
 800e562:	18d3      	adds	r3, r2, r3
 800e564:	2200      	movs	r2, #0
 800e566:	c304      	stmia	r3!, {r2}
 800e568:	429f      	cmp	r7, r3
 800e56a:	d2fc      	bcs.n	800e566 <__hexnan+0xe6>
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d104      	bne.n	800e57c <__hexnan+0xfc>
 800e572:	9b01      	ldr	r3, [sp, #4]
 800e574:	429f      	cmp	r7, r3
 800e576:	d126      	bne.n	800e5c6 <__hexnan+0x146>
 800e578:	2301      	movs	r3, #1
 800e57a:	603b      	str	r3, [r7, #0]
 800e57c:	2005      	movs	r0, #5
 800e57e:	e025      	b.n	800e5cc <__hexnan+0x14c>
 800e580:	9b03      	ldr	r3, [sp, #12]
 800e582:	3501      	adds	r5, #1
 800e584:	3301      	adds	r3, #1
 800e586:	9303      	str	r3, [sp, #12]
 800e588:	2d08      	cmp	r5, #8
 800e58a:	dd06      	ble.n	800e59a <__hexnan+0x11a>
 800e58c:	9b01      	ldr	r3, [sp, #4]
 800e58e:	429c      	cmp	r4, r3
 800e590:	d9bb      	bls.n	800e50a <__hexnan+0x8a>
 800e592:	2300      	movs	r3, #0
 800e594:	2501      	movs	r5, #1
 800e596:	3c04      	subs	r4, #4
 800e598:	6023      	str	r3, [r4, #0]
 800e59a:	220f      	movs	r2, #15
 800e59c:	6823      	ldr	r3, [r4, #0]
 800e59e:	4010      	ands	r0, r2
 800e5a0:	011b      	lsls	r3, r3, #4
 800e5a2:	4303      	orrs	r3, r0
 800e5a4:	6023      	str	r3, [r4, #0]
 800e5a6:	e7b0      	b.n	800e50a <__hexnan+0x8a>
 800e5a8:	9b06      	ldr	r3, [sp, #24]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d0de      	beq.n	800e56c <__hexnan+0xec>
 800e5ae:	2320      	movs	r3, #32
 800e5b0:	9a06      	ldr	r2, [sp, #24]
 800e5b2:	9902      	ldr	r1, [sp, #8]
 800e5b4:	1a9b      	subs	r3, r3, r2
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	4252      	negs	r2, r2
 800e5ba:	40da      	lsrs	r2, r3
 800e5bc:	3904      	subs	r1, #4
 800e5be:	680b      	ldr	r3, [r1, #0]
 800e5c0:	4013      	ands	r3, r2
 800e5c2:	600b      	str	r3, [r1, #0]
 800e5c4:	e7d2      	b.n	800e56c <__hexnan+0xec>
 800e5c6:	3f04      	subs	r7, #4
 800e5c8:	e7d0      	b.n	800e56c <__hexnan+0xec>
 800e5ca:	2004      	movs	r0, #4
 800e5cc:	b00b      	add	sp, #44	; 0x2c
 800e5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e5d0 <__ascii_mbtowc>:
 800e5d0:	b082      	sub	sp, #8
 800e5d2:	2900      	cmp	r1, #0
 800e5d4:	d100      	bne.n	800e5d8 <__ascii_mbtowc+0x8>
 800e5d6:	a901      	add	r1, sp, #4
 800e5d8:	1e10      	subs	r0, r2, #0
 800e5da:	d006      	beq.n	800e5ea <__ascii_mbtowc+0x1a>
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d006      	beq.n	800e5ee <__ascii_mbtowc+0x1e>
 800e5e0:	7813      	ldrb	r3, [r2, #0]
 800e5e2:	600b      	str	r3, [r1, #0]
 800e5e4:	7810      	ldrb	r0, [r2, #0]
 800e5e6:	1e43      	subs	r3, r0, #1
 800e5e8:	4198      	sbcs	r0, r3
 800e5ea:	b002      	add	sp, #8
 800e5ec:	4770      	bx	lr
 800e5ee:	2002      	movs	r0, #2
 800e5f0:	4240      	negs	r0, r0
 800e5f2:	e7fa      	b.n	800e5ea <__ascii_mbtowc+0x1a>

0800e5f4 <_realloc_r>:
 800e5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5f6:	0007      	movs	r7, r0
 800e5f8:	000e      	movs	r6, r1
 800e5fa:	0014      	movs	r4, r2
 800e5fc:	2900      	cmp	r1, #0
 800e5fe:	d105      	bne.n	800e60c <_realloc_r+0x18>
 800e600:	0011      	movs	r1, r2
 800e602:	f7fd fddd 	bl	800c1c0 <_malloc_r>
 800e606:	0005      	movs	r5, r0
 800e608:	0028      	movs	r0, r5
 800e60a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e60c:	2a00      	cmp	r2, #0
 800e60e:	d103      	bne.n	800e618 <_realloc_r+0x24>
 800e610:	f7fd fd60 	bl	800c0d4 <_free_r>
 800e614:	0025      	movs	r5, r4
 800e616:	e7f7      	b.n	800e608 <_realloc_r+0x14>
 800e618:	f000 f83f 	bl	800e69a <_malloc_usable_size_r>
 800e61c:	9001      	str	r0, [sp, #4]
 800e61e:	4284      	cmp	r4, r0
 800e620:	d803      	bhi.n	800e62a <_realloc_r+0x36>
 800e622:	0035      	movs	r5, r6
 800e624:	0843      	lsrs	r3, r0, #1
 800e626:	42a3      	cmp	r3, r4
 800e628:	d3ee      	bcc.n	800e608 <_realloc_r+0x14>
 800e62a:	0021      	movs	r1, r4
 800e62c:	0038      	movs	r0, r7
 800e62e:	f7fd fdc7 	bl	800c1c0 <_malloc_r>
 800e632:	1e05      	subs	r5, r0, #0
 800e634:	d0e8      	beq.n	800e608 <_realloc_r+0x14>
 800e636:	9b01      	ldr	r3, [sp, #4]
 800e638:	0022      	movs	r2, r4
 800e63a:	429c      	cmp	r4, r3
 800e63c:	d900      	bls.n	800e640 <_realloc_r+0x4c>
 800e63e:	001a      	movs	r2, r3
 800e640:	0031      	movs	r1, r6
 800e642:	0028      	movs	r0, r5
 800e644:	f7ff fc0c 	bl	800de60 <memcpy>
 800e648:	0031      	movs	r1, r6
 800e64a:	0038      	movs	r0, r7
 800e64c:	f7fd fd42 	bl	800c0d4 <_free_r>
 800e650:	e7da      	b.n	800e608 <_realloc_r+0x14>

0800e652 <__ascii_wctomb>:
 800e652:	0003      	movs	r3, r0
 800e654:	1e08      	subs	r0, r1, #0
 800e656:	d005      	beq.n	800e664 <__ascii_wctomb+0x12>
 800e658:	2aff      	cmp	r2, #255	; 0xff
 800e65a:	d904      	bls.n	800e666 <__ascii_wctomb+0x14>
 800e65c:	228a      	movs	r2, #138	; 0x8a
 800e65e:	2001      	movs	r0, #1
 800e660:	601a      	str	r2, [r3, #0]
 800e662:	4240      	negs	r0, r0
 800e664:	4770      	bx	lr
 800e666:	2001      	movs	r0, #1
 800e668:	700a      	strb	r2, [r1, #0]
 800e66a:	e7fb      	b.n	800e664 <__ascii_wctomb+0x12>

0800e66c <fiprintf>:
 800e66c:	b40e      	push	{r1, r2, r3}
 800e66e:	b517      	push	{r0, r1, r2, r4, lr}
 800e670:	4c05      	ldr	r4, [pc, #20]	; (800e688 <fiprintf+0x1c>)
 800e672:	ab05      	add	r3, sp, #20
 800e674:	cb04      	ldmia	r3!, {r2}
 800e676:	0001      	movs	r1, r0
 800e678:	6820      	ldr	r0, [r4, #0]
 800e67a:	9301      	str	r3, [sp, #4]
 800e67c:	f000 f83c 	bl	800e6f8 <_vfiprintf_r>
 800e680:	bc1e      	pop	{r1, r2, r3, r4}
 800e682:	bc08      	pop	{r3}
 800e684:	b003      	add	sp, #12
 800e686:	4718      	bx	r3
 800e688:	2000007c 	.word	0x2000007c

0800e68c <abort>:
 800e68c:	2006      	movs	r0, #6
 800e68e:	b510      	push	{r4, lr}
 800e690:	f000 fa1e 	bl	800ead0 <raise>
 800e694:	2001      	movs	r0, #1
 800e696:	f7f5 ffbe 	bl	8004616 <_exit>

0800e69a <_malloc_usable_size_r>:
 800e69a:	1f0b      	subs	r3, r1, #4
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	1f18      	subs	r0, r3, #4
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	da01      	bge.n	800e6a8 <_malloc_usable_size_r+0xe>
 800e6a4:	580b      	ldr	r3, [r1, r0]
 800e6a6:	18c0      	adds	r0, r0, r3
 800e6a8:	4770      	bx	lr

0800e6aa <__sfputc_r>:
 800e6aa:	6893      	ldr	r3, [r2, #8]
 800e6ac:	b510      	push	{r4, lr}
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	6093      	str	r3, [r2, #8]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	da04      	bge.n	800e6c0 <__sfputc_r+0x16>
 800e6b6:	6994      	ldr	r4, [r2, #24]
 800e6b8:	42a3      	cmp	r3, r4
 800e6ba:	db07      	blt.n	800e6cc <__sfputc_r+0x22>
 800e6bc:	290a      	cmp	r1, #10
 800e6be:	d005      	beq.n	800e6cc <__sfputc_r+0x22>
 800e6c0:	6813      	ldr	r3, [r2, #0]
 800e6c2:	1c58      	adds	r0, r3, #1
 800e6c4:	6010      	str	r0, [r2, #0]
 800e6c6:	7019      	strb	r1, [r3, #0]
 800e6c8:	0008      	movs	r0, r1
 800e6ca:	bd10      	pop	{r4, pc}
 800e6cc:	f000 f930 	bl	800e930 <__swbuf_r>
 800e6d0:	0001      	movs	r1, r0
 800e6d2:	e7f9      	b.n	800e6c8 <__sfputc_r+0x1e>

0800e6d4 <__sfputs_r>:
 800e6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d6:	0006      	movs	r6, r0
 800e6d8:	000f      	movs	r7, r1
 800e6da:	0014      	movs	r4, r2
 800e6dc:	18d5      	adds	r5, r2, r3
 800e6de:	42ac      	cmp	r4, r5
 800e6e0:	d101      	bne.n	800e6e6 <__sfputs_r+0x12>
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	e007      	b.n	800e6f6 <__sfputs_r+0x22>
 800e6e6:	7821      	ldrb	r1, [r4, #0]
 800e6e8:	003a      	movs	r2, r7
 800e6ea:	0030      	movs	r0, r6
 800e6ec:	f7ff ffdd 	bl	800e6aa <__sfputc_r>
 800e6f0:	3401      	adds	r4, #1
 800e6f2:	1c43      	adds	r3, r0, #1
 800e6f4:	d1f3      	bne.n	800e6de <__sfputs_r+0xa>
 800e6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e6f8 <_vfiprintf_r>:
 800e6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6fa:	b0a1      	sub	sp, #132	; 0x84
 800e6fc:	000f      	movs	r7, r1
 800e6fe:	0015      	movs	r5, r2
 800e700:	001e      	movs	r6, r3
 800e702:	9003      	str	r0, [sp, #12]
 800e704:	2800      	cmp	r0, #0
 800e706:	d004      	beq.n	800e712 <_vfiprintf_r+0x1a>
 800e708:	6a03      	ldr	r3, [r0, #32]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d101      	bne.n	800e712 <_vfiprintf_r+0x1a>
 800e70e:	f7fc fd0d 	bl	800b12c <__sinit>
 800e712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e714:	07db      	lsls	r3, r3, #31
 800e716:	d405      	bmi.n	800e724 <_vfiprintf_r+0x2c>
 800e718:	89bb      	ldrh	r3, [r7, #12]
 800e71a:	059b      	lsls	r3, r3, #22
 800e71c:	d402      	bmi.n	800e724 <_vfiprintf_r+0x2c>
 800e71e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e720:	f7fc fe29 	bl	800b376 <__retarget_lock_acquire_recursive>
 800e724:	89bb      	ldrh	r3, [r7, #12]
 800e726:	071b      	lsls	r3, r3, #28
 800e728:	d502      	bpl.n	800e730 <_vfiprintf_r+0x38>
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d113      	bne.n	800e758 <_vfiprintf_r+0x60>
 800e730:	0039      	movs	r1, r7
 800e732:	9803      	ldr	r0, [sp, #12]
 800e734:	f000 f93e 	bl	800e9b4 <__swsetup_r>
 800e738:	2800      	cmp	r0, #0
 800e73a:	d00d      	beq.n	800e758 <_vfiprintf_r+0x60>
 800e73c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e73e:	07db      	lsls	r3, r3, #31
 800e740:	d503      	bpl.n	800e74a <_vfiprintf_r+0x52>
 800e742:	2001      	movs	r0, #1
 800e744:	4240      	negs	r0, r0
 800e746:	b021      	add	sp, #132	; 0x84
 800e748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e74a:	89bb      	ldrh	r3, [r7, #12]
 800e74c:	059b      	lsls	r3, r3, #22
 800e74e:	d4f8      	bmi.n	800e742 <_vfiprintf_r+0x4a>
 800e750:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e752:	f7fc fe11 	bl	800b378 <__retarget_lock_release_recursive>
 800e756:	e7f4      	b.n	800e742 <_vfiprintf_r+0x4a>
 800e758:	2300      	movs	r3, #0
 800e75a:	ac08      	add	r4, sp, #32
 800e75c:	6163      	str	r3, [r4, #20]
 800e75e:	3320      	adds	r3, #32
 800e760:	7663      	strb	r3, [r4, #25]
 800e762:	3310      	adds	r3, #16
 800e764:	76a3      	strb	r3, [r4, #26]
 800e766:	9607      	str	r6, [sp, #28]
 800e768:	002e      	movs	r6, r5
 800e76a:	7833      	ldrb	r3, [r6, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d001      	beq.n	800e774 <_vfiprintf_r+0x7c>
 800e770:	2b25      	cmp	r3, #37	; 0x25
 800e772:	d148      	bne.n	800e806 <_vfiprintf_r+0x10e>
 800e774:	1b73      	subs	r3, r6, r5
 800e776:	9305      	str	r3, [sp, #20]
 800e778:	42ae      	cmp	r6, r5
 800e77a:	d00b      	beq.n	800e794 <_vfiprintf_r+0x9c>
 800e77c:	002a      	movs	r2, r5
 800e77e:	0039      	movs	r1, r7
 800e780:	9803      	ldr	r0, [sp, #12]
 800e782:	f7ff ffa7 	bl	800e6d4 <__sfputs_r>
 800e786:	3001      	adds	r0, #1
 800e788:	d100      	bne.n	800e78c <_vfiprintf_r+0x94>
 800e78a:	e0af      	b.n	800e8ec <_vfiprintf_r+0x1f4>
 800e78c:	6963      	ldr	r3, [r4, #20]
 800e78e:	9a05      	ldr	r2, [sp, #20]
 800e790:	189b      	adds	r3, r3, r2
 800e792:	6163      	str	r3, [r4, #20]
 800e794:	7833      	ldrb	r3, [r6, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d100      	bne.n	800e79c <_vfiprintf_r+0xa4>
 800e79a:	e0a7      	b.n	800e8ec <_vfiprintf_r+0x1f4>
 800e79c:	2201      	movs	r2, #1
 800e79e:	2300      	movs	r3, #0
 800e7a0:	4252      	negs	r2, r2
 800e7a2:	6062      	str	r2, [r4, #4]
 800e7a4:	a904      	add	r1, sp, #16
 800e7a6:	3254      	adds	r2, #84	; 0x54
 800e7a8:	1852      	adds	r2, r2, r1
 800e7aa:	1c75      	adds	r5, r6, #1
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	60e3      	str	r3, [r4, #12]
 800e7b0:	60a3      	str	r3, [r4, #8]
 800e7b2:	7013      	strb	r3, [r2, #0]
 800e7b4:	65a3      	str	r3, [r4, #88]	; 0x58
 800e7b6:	4b59      	ldr	r3, [pc, #356]	; (800e91c <_vfiprintf_r+0x224>)
 800e7b8:	2205      	movs	r2, #5
 800e7ba:	0018      	movs	r0, r3
 800e7bc:	7829      	ldrb	r1, [r5, #0]
 800e7be:	9305      	str	r3, [sp, #20]
 800e7c0:	f7fc fddb 	bl	800b37a <memchr>
 800e7c4:	1c6e      	adds	r6, r5, #1
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d11f      	bne.n	800e80a <_vfiprintf_r+0x112>
 800e7ca:	6822      	ldr	r2, [r4, #0]
 800e7cc:	06d3      	lsls	r3, r2, #27
 800e7ce:	d504      	bpl.n	800e7da <_vfiprintf_r+0xe2>
 800e7d0:	2353      	movs	r3, #83	; 0x53
 800e7d2:	a904      	add	r1, sp, #16
 800e7d4:	185b      	adds	r3, r3, r1
 800e7d6:	2120      	movs	r1, #32
 800e7d8:	7019      	strb	r1, [r3, #0]
 800e7da:	0713      	lsls	r3, r2, #28
 800e7dc:	d504      	bpl.n	800e7e8 <_vfiprintf_r+0xf0>
 800e7de:	2353      	movs	r3, #83	; 0x53
 800e7e0:	a904      	add	r1, sp, #16
 800e7e2:	185b      	adds	r3, r3, r1
 800e7e4:	212b      	movs	r1, #43	; 0x2b
 800e7e6:	7019      	strb	r1, [r3, #0]
 800e7e8:	782b      	ldrb	r3, [r5, #0]
 800e7ea:	2b2a      	cmp	r3, #42	; 0x2a
 800e7ec:	d016      	beq.n	800e81c <_vfiprintf_r+0x124>
 800e7ee:	002e      	movs	r6, r5
 800e7f0:	2100      	movs	r1, #0
 800e7f2:	200a      	movs	r0, #10
 800e7f4:	68e3      	ldr	r3, [r4, #12]
 800e7f6:	7832      	ldrb	r2, [r6, #0]
 800e7f8:	1c75      	adds	r5, r6, #1
 800e7fa:	3a30      	subs	r2, #48	; 0x30
 800e7fc:	2a09      	cmp	r2, #9
 800e7fe:	d94e      	bls.n	800e89e <_vfiprintf_r+0x1a6>
 800e800:	2900      	cmp	r1, #0
 800e802:	d111      	bne.n	800e828 <_vfiprintf_r+0x130>
 800e804:	e017      	b.n	800e836 <_vfiprintf_r+0x13e>
 800e806:	3601      	adds	r6, #1
 800e808:	e7af      	b.n	800e76a <_vfiprintf_r+0x72>
 800e80a:	9b05      	ldr	r3, [sp, #20]
 800e80c:	6822      	ldr	r2, [r4, #0]
 800e80e:	1ac0      	subs	r0, r0, r3
 800e810:	2301      	movs	r3, #1
 800e812:	4083      	lsls	r3, r0
 800e814:	4313      	orrs	r3, r2
 800e816:	0035      	movs	r5, r6
 800e818:	6023      	str	r3, [r4, #0]
 800e81a:	e7cc      	b.n	800e7b6 <_vfiprintf_r+0xbe>
 800e81c:	9b07      	ldr	r3, [sp, #28]
 800e81e:	1d19      	adds	r1, r3, #4
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	9107      	str	r1, [sp, #28]
 800e824:	2b00      	cmp	r3, #0
 800e826:	db01      	blt.n	800e82c <_vfiprintf_r+0x134>
 800e828:	930b      	str	r3, [sp, #44]	; 0x2c
 800e82a:	e004      	b.n	800e836 <_vfiprintf_r+0x13e>
 800e82c:	425b      	negs	r3, r3
 800e82e:	60e3      	str	r3, [r4, #12]
 800e830:	2302      	movs	r3, #2
 800e832:	4313      	orrs	r3, r2
 800e834:	6023      	str	r3, [r4, #0]
 800e836:	7833      	ldrb	r3, [r6, #0]
 800e838:	2b2e      	cmp	r3, #46	; 0x2e
 800e83a:	d10a      	bne.n	800e852 <_vfiprintf_r+0x15a>
 800e83c:	7873      	ldrb	r3, [r6, #1]
 800e83e:	2b2a      	cmp	r3, #42	; 0x2a
 800e840:	d135      	bne.n	800e8ae <_vfiprintf_r+0x1b6>
 800e842:	9b07      	ldr	r3, [sp, #28]
 800e844:	3602      	adds	r6, #2
 800e846:	1d1a      	adds	r2, r3, #4
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	9207      	str	r2, [sp, #28]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	db2b      	blt.n	800e8a8 <_vfiprintf_r+0x1b0>
 800e850:	9309      	str	r3, [sp, #36]	; 0x24
 800e852:	4d33      	ldr	r5, [pc, #204]	; (800e920 <_vfiprintf_r+0x228>)
 800e854:	2203      	movs	r2, #3
 800e856:	0028      	movs	r0, r5
 800e858:	7831      	ldrb	r1, [r6, #0]
 800e85a:	f7fc fd8e 	bl	800b37a <memchr>
 800e85e:	2800      	cmp	r0, #0
 800e860:	d006      	beq.n	800e870 <_vfiprintf_r+0x178>
 800e862:	2340      	movs	r3, #64	; 0x40
 800e864:	1b40      	subs	r0, r0, r5
 800e866:	4083      	lsls	r3, r0
 800e868:	6822      	ldr	r2, [r4, #0]
 800e86a:	3601      	adds	r6, #1
 800e86c:	4313      	orrs	r3, r2
 800e86e:	6023      	str	r3, [r4, #0]
 800e870:	7831      	ldrb	r1, [r6, #0]
 800e872:	2206      	movs	r2, #6
 800e874:	482b      	ldr	r0, [pc, #172]	; (800e924 <_vfiprintf_r+0x22c>)
 800e876:	1c75      	adds	r5, r6, #1
 800e878:	7621      	strb	r1, [r4, #24]
 800e87a:	f7fc fd7e 	bl	800b37a <memchr>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d043      	beq.n	800e90a <_vfiprintf_r+0x212>
 800e882:	4b29      	ldr	r3, [pc, #164]	; (800e928 <_vfiprintf_r+0x230>)
 800e884:	2b00      	cmp	r3, #0
 800e886:	d125      	bne.n	800e8d4 <_vfiprintf_r+0x1dc>
 800e888:	2207      	movs	r2, #7
 800e88a:	9b07      	ldr	r3, [sp, #28]
 800e88c:	3307      	adds	r3, #7
 800e88e:	4393      	bics	r3, r2
 800e890:	3308      	adds	r3, #8
 800e892:	9307      	str	r3, [sp, #28]
 800e894:	6963      	ldr	r3, [r4, #20]
 800e896:	9a04      	ldr	r2, [sp, #16]
 800e898:	189b      	adds	r3, r3, r2
 800e89a:	6163      	str	r3, [r4, #20]
 800e89c:	e764      	b.n	800e768 <_vfiprintf_r+0x70>
 800e89e:	4343      	muls	r3, r0
 800e8a0:	002e      	movs	r6, r5
 800e8a2:	2101      	movs	r1, #1
 800e8a4:	189b      	adds	r3, r3, r2
 800e8a6:	e7a6      	b.n	800e7f6 <_vfiprintf_r+0xfe>
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	425b      	negs	r3, r3
 800e8ac:	e7d0      	b.n	800e850 <_vfiprintf_r+0x158>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	200a      	movs	r0, #10
 800e8b2:	001a      	movs	r2, r3
 800e8b4:	3601      	adds	r6, #1
 800e8b6:	6063      	str	r3, [r4, #4]
 800e8b8:	7831      	ldrb	r1, [r6, #0]
 800e8ba:	1c75      	adds	r5, r6, #1
 800e8bc:	3930      	subs	r1, #48	; 0x30
 800e8be:	2909      	cmp	r1, #9
 800e8c0:	d903      	bls.n	800e8ca <_vfiprintf_r+0x1d2>
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d0c5      	beq.n	800e852 <_vfiprintf_r+0x15a>
 800e8c6:	9209      	str	r2, [sp, #36]	; 0x24
 800e8c8:	e7c3      	b.n	800e852 <_vfiprintf_r+0x15a>
 800e8ca:	4342      	muls	r2, r0
 800e8cc:	002e      	movs	r6, r5
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	1852      	adds	r2, r2, r1
 800e8d2:	e7f1      	b.n	800e8b8 <_vfiprintf_r+0x1c0>
 800e8d4:	aa07      	add	r2, sp, #28
 800e8d6:	9200      	str	r2, [sp, #0]
 800e8d8:	0021      	movs	r1, r4
 800e8da:	003a      	movs	r2, r7
 800e8dc:	4b13      	ldr	r3, [pc, #76]	; (800e92c <_vfiprintf_r+0x234>)
 800e8de:	9803      	ldr	r0, [sp, #12]
 800e8e0:	f7fb fdb6 	bl	800a450 <_printf_float>
 800e8e4:	9004      	str	r0, [sp, #16]
 800e8e6:	9b04      	ldr	r3, [sp, #16]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	d1d3      	bne.n	800e894 <_vfiprintf_r+0x19c>
 800e8ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8ee:	07db      	lsls	r3, r3, #31
 800e8f0:	d405      	bmi.n	800e8fe <_vfiprintf_r+0x206>
 800e8f2:	89bb      	ldrh	r3, [r7, #12]
 800e8f4:	059b      	lsls	r3, r3, #22
 800e8f6:	d402      	bmi.n	800e8fe <_vfiprintf_r+0x206>
 800e8f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e8fa:	f7fc fd3d 	bl	800b378 <__retarget_lock_release_recursive>
 800e8fe:	89bb      	ldrh	r3, [r7, #12]
 800e900:	065b      	lsls	r3, r3, #25
 800e902:	d500      	bpl.n	800e906 <_vfiprintf_r+0x20e>
 800e904:	e71d      	b.n	800e742 <_vfiprintf_r+0x4a>
 800e906:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e908:	e71d      	b.n	800e746 <_vfiprintf_r+0x4e>
 800e90a:	aa07      	add	r2, sp, #28
 800e90c:	9200      	str	r2, [sp, #0]
 800e90e:	0021      	movs	r1, r4
 800e910:	003a      	movs	r2, r7
 800e912:	4b06      	ldr	r3, [pc, #24]	; (800e92c <_vfiprintf_r+0x234>)
 800e914:	9803      	ldr	r0, [sp, #12]
 800e916:	f7fc f861 	bl	800a9dc <_printf_i>
 800e91a:	e7e3      	b.n	800e8e4 <_vfiprintf_r+0x1ec>
 800e91c:	0800f5c9 	.word	0x0800f5c9
 800e920:	0800f5cf 	.word	0x0800f5cf
 800e924:	0800f5d3 	.word	0x0800f5d3
 800e928:	0800a451 	.word	0x0800a451
 800e92c:	0800e6d5 	.word	0x0800e6d5

0800e930 <__swbuf_r>:
 800e930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e932:	0006      	movs	r6, r0
 800e934:	000d      	movs	r5, r1
 800e936:	0014      	movs	r4, r2
 800e938:	2800      	cmp	r0, #0
 800e93a:	d004      	beq.n	800e946 <__swbuf_r+0x16>
 800e93c:	6a03      	ldr	r3, [r0, #32]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d101      	bne.n	800e946 <__swbuf_r+0x16>
 800e942:	f7fc fbf3 	bl	800b12c <__sinit>
 800e946:	69a3      	ldr	r3, [r4, #24]
 800e948:	60a3      	str	r3, [r4, #8]
 800e94a:	89a3      	ldrh	r3, [r4, #12]
 800e94c:	071b      	lsls	r3, r3, #28
 800e94e:	d528      	bpl.n	800e9a2 <__swbuf_r+0x72>
 800e950:	6923      	ldr	r3, [r4, #16]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d025      	beq.n	800e9a2 <__swbuf_r+0x72>
 800e956:	6923      	ldr	r3, [r4, #16]
 800e958:	6820      	ldr	r0, [r4, #0]
 800e95a:	b2ef      	uxtb	r7, r5
 800e95c:	1ac0      	subs	r0, r0, r3
 800e95e:	6963      	ldr	r3, [r4, #20]
 800e960:	b2ed      	uxtb	r5, r5
 800e962:	4283      	cmp	r3, r0
 800e964:	dc05      	bgt.n	800e972 <__swbuf_r+0x42>
 800e966:	0021      	movs	r1, r4
 800e968:	0030      	movs	r0, r6
 800e96a:	f7ff fa17 	bl	800dd9c <_fflush_r>
 800e96e:	2800      	cmp	r0, #0
 800e970:	d11d      	bne.n	800e9ae <__swbuf_r+0x7e>
 800e972:	68a3      	ldr	r3, [r4, #8]
 800e974:	3001      	adds	r0, #1
 800e976:	3b01      	subs	r3, #1
 800e978:	60a3      	str	r3, [r4, #8]
 800e97a:	6823      	ldr	r3, [r4, #0]
 800e97c:	1c5a      	adds	r2, r3, #1
 800e97e:	6022      	str	r2, [r4, #0]
 800e980:	701f      	strb	r7, [r3, #0]
 800e982:	6963      	ldr	r3, [r4, #20]
 800e984:	4283      	cmp	r3, r0
 800e986:	d004      	beq.n	800e992 <__swbuf_r+0x62>
 800e988:	89a3      	ldrh	r3, [r4, #12]
 800e98a:	07db      	lsls	r3, r3, #31
 800e98c:	d507      	bpl.n	800e99e <__swbuf_r+0x6e>
 800e98e:	2d0a      	cmp	r5, #10
 800e990:	d105      	bne.n	800e99e <__swbuf_r+0x6e>
 800e992:	0021      	movs	r1, r4
 800e994:	0030      	movs	r0, r6
 800e996:	f7ff fa01 	bl	800dd9c <_fflush_r>
 800e99a:	2800      	cmp	r0, #0
 800e99c:	d107      	bne.n	800e9ae <__swbuf_r+0x7e>
 800e99e:	0028      	movs	r0, r5
 800e9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9a2:	0021      	movs	r1, r4
 800e9a4:	0030      	movs	r0, r6
 800e9a6:	f000 f805 	bl	800e9b4 <__swsetup_r>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d0d3      	beq.n	800e956 <__swbuf_r+0x26>
 800e9ae:	2501      	movs	r5, #1
 800e9b0:	426d      	negs	r5, r5
 800e9b2:	e7f4      	b.n	800e99e <__swbuf_r+0x6e>

0800e9b4 <__swsetup_r>:
 800e9b4:	4b30      	ldr	r3, [pc, #192]	; (800ea78 <__swsetup_r+0xc4>)
 800e9b6:	b570      	push	{r4, r5, r6, lr}
 800e9b8:	0005      	movs	r5, r0
 800e9ba:	6818      	ldr	r0, [r3, #0]
 800e9bc:	000c      	movs	r4, r1
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	d004      	beq.n	800e9cc <__swsetup_r+0x18>
 800e9c2:	6a03      	ldr	r3, [r0, #32]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d101      	bne.n	800e9cc <__swsetup_r+0x18>
 800e9c8:	f7fc fbb0 	bl	800b12c <__sinit>
 800e9cc:	230c      	movs	r3, #12
 800e9ce:	5ee2      	ldrsh	r2, [r4, r3]
 800e9d0:	b293      	uxth	r3, r2
 800e9d2:	0711      	lsls	r1, r2, #28
 800e9d4:	d423      	bmi.n	800ea1e <__swsetup_r+0x6a>
 800e9d6:	06d9      	lsls	r1, r3, #27
 800e9d8:	d407      	bmi.n	800e9ea <__swsetup_r+0x36>
 800e9da:	2309      	movs	r3, #9
 800e9dc:	2001      	movs	r0, #1
 800e9de:	602b      	str	r3, [r5, #0]
 800e9e0:	3337      	adds	r3, #55	; 0x37
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	81a3      	strh	r3, [r4, #12]
 800e9e6:	4240      	negs	r0, r0
 800e9e8:	bd70      	pop	{r4, r5, r6, pc}
 800e9ea:	075b      	lsls	r3, r3, #29
 800e9ec:	d513      	bpl.n	800ea16 <__swsetup_r+0x62>
 800e9ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9f0:	2900      	cmp	r1, #0
 800e9f2:	d008      	beq.n	800ea06 <__swsetup_r+0x52>
 800e9f4:	0023      	movs	r3, r4
 800e9f6:	3344      	adds	r3, #68	; 0x44
 800e9f8:	4299      	cmp	r1, r3
 800e9fa:	d002      	beq.n	800ea02 <__swsetup_r+0x4e>
 800e9fc:	0028      	movs	r0, r5
 800e9fe:	f7fd fb69 	bl	800c0d4 <_free_r>
 800ea02:	2300      	movs	r3, #0
 800ea04:	6363      	str	r3, [r4, #52]	; 0x34
 800ea06:	2224      	movs	r2, #36	; 0x24
 800ea08:	89a3      	ldrh	r3, [r4, #12]
 800ea0a:	4393      	bics	r3, r2
 800ea0c:	81a3      	strh	r3, [r4, #12]
 800ea0e:	2300      	movs	r3, #0
 800ea10:	6063      	str	r3, [r4, #4]
 800ea12:	6923      	ldr	r3, [r4, #16]
 800ea14:	6023      	str	r3, [r4, #0]
 800ea16:	2308      	movs	r3, #8
 800ea18:	89a2      	ldrh	r2, [r4, #12]
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	81a3      	strh	r3, [r4, #12]
 800ea1e:	6923      	ldr	r3, [r4, #16]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d10b      	bne.n	800ea3c <__swsetup_r+0x88>
 800ea24:	21a0      	movs	r1, #160	; 0xa0
 800ea26:	2280      	movs	r2, #128	; 0x80
 800ea28:	89a3      	ldrh	r3, [r4, #12]
 800ea2a:	0089      	lsls	r1, r1, #2
 800ea2c:	0092      	lsls	r2, r2, #2
 800ea2e:	400b      	ands	r3, r1
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d003      	beq.n	800ea3c <__swsetup_r+0x88>
 800ea34:	0021      	movs	r1, r4
 800ea36:	0028      	movs	r0, r5
 800ea38:	f000 f892 	bl	800eb60 <__smakebuf_r>
 800ea3c:	220c      	movs	r2, #12
 800ea3e:	5ea3      	ldrsh	r3, [r4, r2]
 800ea40:	2001      	movs	r0, #1
 800ea42:	001a      	movs	r2, r3
 800ea44:	b299      	uxth	r1, r3
 800ea46:	4002      	ands	r2, r0
 800ea48:	4203      	tst	r3, r0
 800ea4a:	d00f      	beq.n	800ea6c <__swsetup_r+0xb8>
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	60a2      	str	r2, [r4, #8]
 800ea50:	6962      	ldr	r2, [r4, #20]
 800ea52:	4252      	negs	r2, r2
 800ea54:	61a2      	str	r2, [r4, #24]
 800ea56:	2000      	movs	r0, #0
 800ea58:	6922      	ldr	r2, [r4, #16]
 800ea5a:	4282      	cmp	r2, r0
 800ea5c:	d1c4      	bne.n	800e9e8 <__swsetup_r+0x34>
 800ea5e:	0609      	lsls	r1, r1, #24
 800ea60:	d5c2      	bpl.n	800e9e8 <__swsetup_r+0x34>
 800ea62:	2240      	movs	r2, #64	; 0x40
 800ea64:	4313      	orrs	r3, r2
 800ea66:	81a3      	strh	r3, [r4, #12]
 800ea68:	3801      	subs	r0, #1
 800ea6a:	e7bd      	b.n	800e9e8 <__swsetup_r+0x34>
 800ea6c:	0788      	lsls	r0, r1, #30
 800ea6e:	d400      	bmi.n	800ea72 <__swsetup_r+0xbe>
 800ea70:	6962      	ldr	r2, [r4, #20]
 800ea72:	60a2      	str	r2, [r4, #8]
 800ea74:	e7ef      	b.n	800ea56 <__swsetup_r+0xa2>
 800ea76:	46c0      	nop			; (mov r8, r8)
 800ea78:	2000007c 	.word	0x2000007c

0800ea7c <_raise_r>:
 800ea7c:	b570      	push	{r4, r5, r6, lr}
 800ea7e:	0004      	movs	r4, r0
 800ea80:	000d      	movs	r5, r1
 800ea82:	291f      	cmp	r1, #31
 800ea84:	d904      	bls.n	800ea90 <_raise_r+0x14>
 800ea86:	2316      	movs	r3, #22
 800ea88:	6003      	str	r3, [r0, #0]
 800ea8a:	2001      	movs	r0, #1
 800ea8c:	4240      	negs	r0, r0
 800ea8e:	bd70      	pop	{r4, r5, r6, pc}
 800ea90:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d004      	beq.n	800eaa0 <_raise_r+0x24>
 800ea96:	008a      	lsls	r2, r1, #2
 800ea98:	189b      	adds	r3, r3, r2
 800ea9a:	681a      	ldr	r2, [r3, #0]
 800ea9c:	2a00      	cmp	r2, #0
 800ea9e:	d108      	bne.n	800eab2 <_raise_r+0x36>
 800eaa0:	0020      	movs	r0, r4
 800eaa2:	f000 f831 	bl	800eb08 <_getpid_r>
 800eaa6:	002a      	movs	r2, r5
 800eaa8:	0001      	movs	r1, r0
 800eaaa:	0020      	movs	r0, r4
 800eaac:	f000 f81a 	bl	800eae4 <_kill_r>
 800eab0:	e7ed      	b.n	800ea8e <_raise_r+0x12>
 800eab2:	2000      	movs	r0, #0
 800eab4:	2a01      	cmp	r2, #1
 800eab6:	d0ea      	beq.n	800ea8e <_raise_r+0x12>
 800eab8:	1c51      	adds	r1, r2, #1
 800eaba:	d103      	bne.n	800eac4 <_raise_r+0x48>
 800eabc:	2316      	movs	r3, #22
 800eabe:	3001      	adds	r0, #1
 800eac0:	6023      	str	r3, [r4, #0]
 800eac2:	e7e4      	b.n	800ea8e <_raise_r+0x12>
 800eac4:	2400      	movs	r4, #0
 800eac6:	0028      	movs	r0, r5
 800eac8:	601c      	str	r4, [r3, #0]
 800eaca:	4790      	blx	r2
 800eacc:	0020      	movs	r0, r4
 800eace:	e7de      	b.n	800ea8e <_raise_r+0x12>

0800ead0 <raise>:
 800ead0:	b510      	push	{r4, lr}
 800ead2:	4b03      	ldr	r3, [pc, #12]	; (800eae0 <raise+0x10>)
 800ead4:	0001      	movs	r1, r0
 800ead6:	6818      	ldr	r0, [r3, #0]
 800ead8:	f7ff ffd0 	bl	800ea7c <_raise_r>
 800eadc:	bd10      	pop	{r4, pc}
 800eade:	46c0      	nop			; (mov r8, r8)
 800eae0:	2000007c 	.word	0x2000007c

0800eae4 <_kill_r>:
 800eae4:	2300      	movs	r3, #0
 800eae6:	b570      	push	{r4, r5, r6, lr}
 800eae8:	4d06      	ldr	r5, [pc, #24]	; (800eb04 <_kill_r+0x20>)
 800eaea:	0004      	movs	r4, r0
 800eaec:	0008      	movs	r0, r1
 800eaee:	0011      	movs	r1, r2
 800eaf0:	602b      	str	r3, [r5, #0]
 800eaf2:	f7f5 fd80 	bl	80045f6 <_kill>
 800eaf6:	1c43      	adds	r3, r0, #1
 800eaf8:	d103      	bne.n	800eb02 <_kill_r+0x1e>
 800eafa:	682b      	ldr	r3, [r5, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d000      	beq.n	800eb02 <_kill_r+0x1e>
 800eb00:	6023      	str	r3, [r4, #0]
 800eb02:	bd70      	pop	{r4, r5, r6, pc}
 800eb04:	200006c8 	.word	0x200006c8

0800eb08 <_getpid_r>:
 800eb08:	b510      	push	{r4, lr}
 800eb0a:	f7f5 fd6e 	bl	80045ea <_getpid>
 800eb0e:	bd10      	pop	{r4, pc}

0800eb10 <__swhatbuf_r>:
 800eb10:	b570      	push	{r4, r5, r6, lr}
 800eb12:	000e      	movs	r6, r1
 800eb14:	001d      	movs	r5, r3
 800eb16:	230e      	movs	r3, #14
 800eb18:	5ec9      	ldrsh	r1, [r1, r3]
 800eb1a:	0014      	movs	r4, r2
 800eb1c:	b096      	sub	sp, #88	; 0x58
 800eb1e:	2900      	cmp	r1, #0
 800eb20:	da0c      	bge.n	800eb3c <__swhatbuf_r+0x2c>
 800eb22:	89b2      	ldrh	r2, [r6, #12]
 800eb24:	2380      	movs	r3, #128	; 0x80
 800eb26:	0011      	movs	r1, r2
 800eb28:	4019      	ands	r1, r3
 800eb2a:	421a      	tst	r2, r3
 800eb2c:	d013      	beq.n	800eb56 <__swhatbuf_r+0x46>
 800eb2e:	2100      	movs	r1, #0
 800eb30:	3b40      	subs	r3, #64	; 0x40
 800eb32:	2000      	movs	r0, #0
 800eb34:	6029      	str	r1, [r5, #0]
 800eb36:	6023      	str	r3, [r4, #0]
 800eb38:	b016      	add	sp, #88	; 0x58
 800eb3a:	bd70      	pop	{r4, r5, r6, pc}
 800eb3c:	466a      	mov	r2, sp
 800eb3e:	f000 f84d 	bl	800ebdc <_fstat_r>
 800eb42:	2800      	cmp	r0, #0
 800eb44:	dbed      	blt.n	800eb22 <__swhatbuf_r+0x12>
 800eb46:	23f0      	movs	r3, #240	; 0xf0
 800eb48:	9901      	ldr	r1, [sp, #4]
 800eb4a:	021b      	lsls	r3, r3, #8
 800eb4c:	4019      	ands	r1, r3
 800eb4e:	4b03      	ldr	r3, [pc, #12]	; (800eb5c <__swhatbuf_r+0x4c>)
 800eb50:	18c9      	adds	r1, r1, r3
 800eb52:	424b      	negs	r3, r1
 800eb54:	4159      	adcs	r1, r3
 800eb56:	2380      	movs	r3, #128	; 0x80
 800eb58:	00db      	lsls	r3, r3, #3
 800eb5a:	e7ea      	b.n	800eb32 <__swhatbuf_r+0x22>
 800eb5c:	ffffe000 	.word	0xffffe000

0800eb60 <__smakebuf_r>:
 800eb60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb62:	2602      	movs	r6, #2
 800eb64:	898b      	ldrh	r3, [r1, #12]
 800eb66:	0005      	movs	r5, r0
 800eb68:	000c      	movs	r4, r1
 800eb6a:	4233      	tst	r3, r6
 800eb6c:	d006      	beq.n	800eb7c <__smakebuf_r+0x1c>
 800eb6e:	0023      	movs	r3, r4
 800eb70:	3347      	adds	r3, #71	; 0x47
 800eb72:	6023      	str	r3, [r4, #0]
 800eb74:	6123      	str	r3, [r4, #16]
 800eb76:	2301      	movs	r3, #1
 800eb78:	6163      	str	r3, [r4, #20]
 800eb7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800eb7c:	466a      	mov	r2, sp
 800eb7e:	ab01      	add	r3, sp, #4
 800eb80:	f7ff ffc6 	bl	800eb10 <__swhatbuf_r>
 800eb84:	9900      	ldr	r1, [sp, #0]
 800eb86:	0007      	movs	r7, r0
 800eb88:	0028      	movs	r0, r5
 800eb8a:	f7fd fb19 	bl	800c1c0 <_malloc_r>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d108      	bne.n	800eba4 <__smakebuf_r+0x44>
 800eb92:	220c      	movs	r2, #12
 800eb94:	5ea3      	ldrsh	r3, [r4, r2]
 800eb96:	059a      	lsls	r2, r3, #22
 800eb98:	d4ef      	bmi.n	800eb7a <__smakebuf_r+0x1a>
 800eb9a:	2203      	movs	r2, #3
 800eb9c:	4393      	bics	r3, r2
 800eb9e:	431e      	orrs	r6, r3
 800eba0:	81a6      	strh	r6, [r4, #12]
 800eba2:	e7e4      	b.n	800eb6e <__smakebuf_r+0xe>
 800eba4:	2380      	movs	r3, #128	; 0x80
 800eba6:	89a2      	ldrh	r2, [r4, #12]
 800eba8:	6020      	str	r0, [r4, #0]
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	81a3      	strh	r3, [r4, #12]
 800ebae:	9b00      	ldr	r3, [sp, #0]
 800ebb0:	6120      	str	r0, [r4, #16]
 800ebb2:	6163      	str	r3, [r4, #20]
 800ebb4:	9b01      	ldr	r3, [sp, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00c      	beq.n	800ebd4 <__smakebuf_r+0x74>
 800ebba:	0028      	movs	r0, r5
 800ebbc:	230e      	movs	r3, #14
 800ebbe:	5ee1      	ldrsh	r1, [r4, r3]
 800ebc0:	f000 f81e 	bl	800ec00 <_isatty_r>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	d005      	beq.n	800ebd4 <__smakebuf_r+0x74>
 800ebc8:	2303      	movs	r3, #3
 800ebca:	89a2      	ldrh	r2, [r4, #12]
 800ebcc:	439a      	bics	r2, r3
 800ebce:	3b02      	subs	r3, #2
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	81a3      	strh	r3, [r4, #12]
 800ebd4:	89a3      	ldrh	r3, [r4, #12]
 800ebd6:	433b      	orrs	r3, r7
 800ebd8:	81a3      	strh	r3, [r4, #12]
 800ebda:	e7ce      	b.n	800eb7a <__smakebuf_r+0x1a>

0800ebdc <_fstat_r>:
 800ebdc:	2300      	movs	r3, #0
 800ebde:	b570      	push	{r4, r5, r6, lr}
 800ebe0:	4d06      	ldr	r5, [pc, #24]	; (800ebfc <_fstat_r+0x20>)
 800ebe2:	0004      	movs	r4, r0
 800ebe4:	0008      	movs	r0, r1
 800ebe6:	0011      	movs	r1, r2
 800ebe8:	602b      	str	r3, [r5, #0]
 800ebea:	f7f5 fd63 	bl	80046b4 <_fstat>
 800ebee:	1c43      	adds	r3, r0, #1
 800ebf0:	d103      	bne.n	800ebfa <_fstat_r+0x1e>
 800ebf2:	682b      	ldr	r3, [r5, #0]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d000      	beq.n	800ebfa <_fstat_r+0x1e>
 800ebf8:	6023      	str	r3, [r4, #0]
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}
 800ebfc:	200006c8 	.word	0x200006c8

0800ec00 <_isatty_r>:
 800ec00:	2300      	movs	r3, #0
 800ec02:	b570      	push	{r4, r5, r6, lr}
 800ec04:	4d06      	ldr	r5, [pc, #24]	; (800ec20 <_isatty_r+0x20>)
 800ec06:	0004      	movs	r4, r0
 800ec08:	0008      	movs	r0, r1
 800ec0a:	602b      	str	r3, [r5, #0]
 800ec0c:	f7f5 fd60 	bl	80046d0 <_isatty>
 800ec10:	1c43      	adds	r3, r0, #1
 800ec12:	d103      	bne.n	800ec1c <_isatty_r+0x1c>
 800ec14:	682b      	ldr	r3, [r5, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d000      	beq.n	800ec1c <_isatty_r+0x1c>
 800ec1a:	6023      	str	r3, [r4, #0]
 800ec1c:	bd70      	pop	{r4, r5, r6, pc}
 800ec1e:	46c0      	nop			; (mov r8, r8)
 800ec20:	200006c8 	.word	0x200006c8

0800ec24 <_init>:
 800ec24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec26:	46c0      	nop			; (mov r8, r8)
 800ec28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec2a:	bc08      	pop	{r3}
 800ec2c:	469e      	mov	lr, r3
 800ec2e:	4770      	bx	lr

0800ec30 <_fini>:
 800ec30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec32:	46c0      	nop			; (mov r8, r8)
 800ec34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec36:	bc08      	pop	{r3}
 800ec38:	469e      	mov	lr, r3
 800ec3a:	4770      	bx	lr
