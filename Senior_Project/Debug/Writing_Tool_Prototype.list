
Writing_Tool_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  0800df00  0800df00  0001df00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e910  0800e910  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e910  0800e910  0001e910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e918  0800e918  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e918  0800e918  0001e918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e91c  0800e91c  0001e91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  200001ec  0800eb0c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  0800eb0c  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b310  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ba  00000000  00000000  0002b567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008cb  00000000  00000000  0002e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001365e  00000000  00000000  0002ed93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f4f  00000000  00000000  000423f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00069c99  00000000  00000000  00053340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e28  00000000  00000000  000bcfdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000c0e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800dee4 	.word	0x0800dee4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800dee4 	.word	0x0800dee4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa15 	bl	800186c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f965 	bl	800171c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa07 	bl	800186c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9fd 	bl	800186c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f98d 	bl	80017a0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f983 	bl	80017a0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 f84d 	bl	80025f8 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fca6 	bl	8001eb8 <__aeabi_dsub>
 800056c:	f002 f844 	bl	80025f8 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 f9b5 	bl	8001934 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 f878 	bl	80026c4 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 f9ac 	bl	8001934 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fc68 	bl	8001eb8 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 f831 	bl	8002664 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 f995 	bl	8001934 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 f858 	bl	80026c4 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fa32 	bl	8000a80 <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 f950 	bl	80028e8 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 f94b 	bl	80028e8 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fdiv>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0245      	lsls	r5, r0, #9
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	0047      	lsls	r7, r0, #1
 80007ca:	1c0c      	adds	r4, r1, #0
 80007cc:	0a6d      	lsrs	r5, r5, #9
 80007ce:	0e3f      	lsrs	r7, r7, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2f00      	cmp	r7, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fdiv+0x1c>
 80007d6:	e06f      	b.n	80008b8 <__aeabi_fdiv+0xfc>
 80007d8:	2fff      	cmp	r7, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x22>
 80007dc:	e074      	b.n	80008c8 <__aeabi_fdiv+0x10c>
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00ed      	lsls	r5, r5, #3
 80007e8:	04d2      	lsls	r2, r2, #19
 80007ea:	4315      	orrs	r5, r2
 80007ec:	3f7f      	subs	r7, #127	; 0x7f
 80007ee:	0263      	lsls	r3, r4, #9
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	0063      	lsls	r3, r4, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fe4      	lsrs	r4, r4, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d04d      	beq.n	800089a <__aeabi_fdiv+0xde>
 80007fe:	2bff      	cmp	r3, #255	; 0xff
 8000800:	d045      	beq.n	800088e <__aeabi_fdiv+0xd2>
 8000802:	4642      	mov	r2, r8
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	4311      	orrs	r1, r2
 800080c:	4688      	mov	r8, r1
 800080e:	2200      	movs	r2, #0
 8000810:	3b7f      	subs	r3, #127	; 0x7f
 8000812:	0031      	movs	r1, r6
 8000814:	1aff      	subs	r7, r7, r3
 8000816:	464b      	mov	r3, r9
 8000818:	4061      	eors	r1, r4
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d900      	bls.n	8000822 <__aeabi_fdiv+0x66>
 8000820:	e0b8      	b.n	8000994 <__aeabi_fdiv+0x1d8>
 8000822:	4870      	ldr	r0, [pc, #448]	; (80009e4 <__aeabi_fdiv+0x228>)
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	58c3      	ldr	r3, [r0, r3]
 8000828:	469f      	mov	pc, r3
 800082a:	2300      	movs	r3, #0
 800082c:	4698      	mov	r8, r3
 800082e:	0026      	movs	r6, r4
 8000830:	4645      	mov	r5, r8
 8000832:	4692      	mov	sl, r2
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d100      	bne.n	800083c <__aeabi_fdiv+0x80>
 800083a:	e08d      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800083c:	2b03      	cmp	r3, #3
 800083e:	d100      	bne.n	8000842 <__aeabi_fdiv+0x86>
 8000840:	e0a1      	b.n	8000986 <__aeabi_fdiv+0x1ca>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d018      	beq.n	8000878 <__aeabi_fdiv+0xbc>
 8000846:	003b      	movs	r3, r7
 8000848:	337f      	adds	r3, #127	; 0x7f
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd6d      	ble.n	800092a <__aeabi_fdiv+0x16e>
 800084e:	076a      	lsls	r2, r5, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0xa0>
 8000852:	220f      	movs	r2, #15
 8000854:	402a      	ands	r2, r5
 8000856:	2a04      	cmp	r2, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0xa0>
 800085a:	3504      	adds	r5, #4
 800085c:	012a      	lsls	r2, r5, #4
 800085e:	d503      	bpl.n	8000868 <__aeabi_fdiv+0xac>
 8000860:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <__aeabi_fdiv+0x22c>)
 8000862:	401d      	ands	r5, r3
 8000864:	003b      	movs	r3, r7
 8000866:	3380      	adds	r3, #128	; 0x80
 8000868:	2bfe      	cmp	r3, #254	; 0xfe
 800086a:	dd00      	ble.n	800086e <__aeabi_fdiv+0xb2>
 800086c:	e074      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800086e:	01aa      	lsls	r2, r5, #6
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	e002      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000876:	000e      	movs	r6, r1
 8000878:	2000      	movs	r0, #0
 800087a:	2200      	movs	r2, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	07f6      	lsls	r6, r6, #31
 8000880:	4310      	orrs	r0, r2
 8000882:	4330      	orrs	r0, r6
 8000884:	bce0      	pop	{r5, r6, r7}
 8000886:	46ba      	mov	sl, r7
 8000888:	46b1      	mov	r9, r6
 800088a:	46a8      	mov	r8, r5
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	4643      	mov	r3, r8
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <__aeabi_fdiv+0x158>
 8000894:	2202      	movs	r2, #2
 8000896:	3fff      	subs	r7, #255	; 0xff
 8000898:	e003      	b.n	80008a2 <__aeabi_fdiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12d      	bne.n	80008fc <__aeabi_fdiv+0x140>
 80008a0:	2201      	movs	r2, #1
 80008a2:	0031      	movs	r1, r6
 80008a4:	464b      	mov	r3, r9
 80008a6:	4061      	eors	r1, r4
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4313      	orrs	r3, r2
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d838      	bhi.n	8000922 <__aeabi_fdiv+0x166>
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <__aeabi_fdiv+0x230>)
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	58c3      	ldr	r3, [r0, r3]
 80008b6:	469f      	mov	pc, r3
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d113      	bne.n	80008e4 <__aeabi_fdiv+0x128>
 80008bc:	2304      	movs	r3, #4
 80008be:	4699      	mov	r9, r3
 80008c0:	3b03      	subs	r3, #3
 80008c2:	2700      	movs	r7, #0
 80008c4:	469a      	mov	sl, r3
 80008c6:	e792      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d105      	bne.n	80008d8 <__aeabi_fdiv+0x11c>
 80008cc:	2308      	movs	r3, #8
 80008ce:	4699      	mov	r9, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	27ff      	movs	r7, #255	; 0xff
 80008d4:	469a      	mov	sl, r3
 80008d6:	e78a      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008d8:	230c      	movs	r3, #12
 80008da:	4699      	mov	r9, r3
 80008dc:	3b09      	subs	r3, #9
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e784      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008e4:	0028      	movs	r0, r5
 80008e6:	f001 ffe1 	bl	80028ac <__clzsi2>
 80008ea:	2776      	movs	r7, #118	; 0x76
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409d      	lsls	r5, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	427f      	negs	r7, r7
 80008f4:	4699      	mov	r9, r3
 80008f6:	469a      	mov	sl, r3
 80008f8:	1a3f      	subs	r7, r7, r0
 80008fa:	e778      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008fc:	4640      	mov	r0, r8
 80008fe:	f001 ffd5 	bl	80028ac <__clzsi2>
 8000902:	4642      	mov	r2, r8
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409a      	lsls	r2, r3
 8000908:	2376      	movs	r3, #118	; 0x76
 800090a:	425b      	negs	r3, r3
 800090c:	4690      	mov	r8, r2
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	2200      	movs	r2, #0
 8000912:	e77e      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000914:	2303      	movs	r3, #3
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	33fc      	adds	r3, #252	; 0xfc
 800091e:	2203      	movs	r2, #3
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000922:	000e      	movs	r6, r1
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2200      	movs	r2, #0
 8000928:	e7a8      	b.n	800087c <__aeabi_fdiv+0xc0>
 800092a:	2201      	movs	r2, #1
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dca2      	bgt.n	8000878 <__aeabi_fdiv+0xbc>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	002a      	movs	r2, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40da      	lsrs	r2, r3
 800093a:	1e6b      	subs	r3, r5, #1
 800093c:	419d      	sbcs	r5, r3
 800093e:	4315      	orrs	r5, r2
 8000940:	076a      	lsls	r2, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x192>
 8000944:	220f      	movs	r2, #15
 8000946:	402a      	ands	r2, r5
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x192>
 800094c:	3504      	adds	r5, #4
 800094e:	016a      	lsls	r2, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x220>
 8000952:	2001      	movs	r0, #1
 8000954:	2200      	movs	r2, #0
 8000956:	e791      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2200      	movs	r2, #0
 800095c:	e78e      	b.n	800087c <__aeabi_fdiv+0xc0>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	e789      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4215      	tst	r5, r2
 8000972:	d008      	beq.n	8000986 <__aeabi_fdiv+0x1ca>
 8000974:	4643      	mov	r3, r8
 8000976:	4213      	tst	r3, r2
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0x1ca>
 800097a:	431a      	orrs	r2, r3
 800097c:	0252      	lsls	r2, r2, #9
 800097e:	0026      	movs	r6, r4
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	0a52      	lsrs	r2, r2, #9
 8000984:	e77a      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	03d2      	lsls	r2, r2, #15
 800098a:	432a      	orrs	r2, r5
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	0a52      	lsrs	r2, r2, #9
 8000992:	e773      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000994:	4642      	mov	r2, r8
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	0155      	lsls	r5, r2, #5
 800099a:	42ab      	cmp	r3, r5
 800099c:	d21a      	bcs.n	80009d4 <__aeabi_fdiv+0x218>
 800099e:	201b      	movs	r0, #27
 80009a0:	2200      	movs	r2, #0
 80009a2:	3f01      	subs	r7, #1
 80009a4:	2601      	movs	r6, #1
 80009a6:	001c      	movs	r4, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	db01      	blt.n	80009b4 <__aeabi_fdiv+0x1f8>
 80009b0:	429d      	cmp	r5, r3
 80009b2:	d801      	bhi.n	80009b8 <__aeabi_fdiv+0x1fc>
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	4332      	orrs	r2, r6
 80009b8:	3801      	subs	r0, #1
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1f3      	bne.n	80009a6 <__aeabi_fdiv+0x1ea>
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	4183      	sbcs	r3, r0
 80009c2:	4313      	orrs	r3, r2
 80009c4:	001d      	movs	r5, r3
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	000e      	movs	r6, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x216>
 80009d0:	e73d      	b.n	800084e <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x16e>
 80009d4:	201a      	movs	r0, #26
 80009d6:	2201      	movs	r2, #1
 80009d8:	1b5b      	subs	r3, r3, r5
 80009da:	e7e3      	b.n	80009a4 <__aeabi_fdiv+0x1e8>
 80009dc:	01aa      	lsls	r2, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	e74b      	b.n	800087c <__aeabi_fdiv+0xc0>
 80009e4:	0800df70 	.word	0x0800df70
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	0800dfb0 	.word	0x0800dfb0

080009f0 <__aeabi_ui2f>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	1e04      	subs	r4, r0, #0
 80009f4:	d00e      	beq.n	8000a14 <__aeabi_ui2f+0x24>
 80009f6:	f001 ff59 	bl	80028ac <__clzsi2>
 80009fa:	239e      	movs	r3, #158	; 0x9e
 80009fc:	0001      	movs	r1, r0
 80009fe:	1a1b      	subs	r3, r3, r0
 8000a00:	2b96      	cmp	r3, #150	; 0x96
 8000a02:	dc0c      	bgt.n	8000a1e <__aeabi_ui2f+0x2e>
 8000a04:	2808      	cmp	r0, #8
 8000a06:	d02c      	beq.n	8000a62 <__aeabi_ui2f+0x72>
 8000a08:	3908      	subs	r1, #8
 8000a0a:	408c      	lsls	r4, r1
 8000a0c:	0264      	lsls	r4, r4, #9
 8000a0e:	0a64      	lsrs	r4, r4, #9
 8000a10:	b2d8      	uxtb	r0, r3
 8000a12:	e001      	b.n	8000a18 <__aeabi_ui2f+0x28>
 8000a14:	2000      	movs	r0, #0
 8000a16:	2400      	movs	r4, #0
 8000a18:	05c0      	lsls	r0, r0, #23
 8000a1a:	4320      	orrs	r0, r4
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}
 8000a1e:	2b99      	cmp	r3, #153	; 0x99
 8000a20:	dd0a      	ble.n	8000a38 <__aeabi_ui2f+0x48>
 8000a22:	0002      	movs	r2, r0
 8000a24:	0020      	movs	r0, r4
 8000a26:	321b      	adds	r2, #27
 8000a28:	4090      	lsls	r0, r2
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	1e50      	subs	r0, r2, #1
 8000a2e:	4182      	sbcs	r2, r0
 8000a30:	2005      	movs	r0, #5
 8000a32:	1a40      	subs	r0, r0, r1
 8000a34:	40c4      	lsrs	r4, r0
 8000a36:	4314      	orrs	r4, r2
 8000a38:	2905      	cmp	r1, #5
 8000a3a:	dc16      	bgt.n	8000a6a <__aeabi_ui2f+0x7a>
 8000a3c:	0022      	movs	r2, r4
 8000a3e:	480f      	ldr	r0, [pc, #60]	; (8000a7c <__aeabi_ui2f+0x8c>)
 8000a40:	4002      	ands	r2, r0
 8000a42:	0765      	lsls	r5, r4, #29
 8000a44:	d009      	beq.n	8000a5a <__aeabi_ui2f+0x6a>
 8000a46:	250f      	movs	r5, #15
 8000a48:	402c      	ands	r4, r5
 8000a4a:	2c04      	cmp	r4, #4
 8000a4c:	d005      	beq.n	8000a5a <__aeabi_ui2f+0x6a>
 8000a4e:	3204      	adds	r2, #4
 8000a50:	0154      	lsls	r4, r2, #5
 8000a52:	d502      	bpl.n	8000a5a <__aeabi_ui2f+0x6a>
 8000a54:	239f      	movs	r3, #159	; 0x9f
 8000a56:	4002      	ands	r2, r0
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	0192      	lsls	r2, r2, #6
 8000a5c:	0a54      	lsrs	r4, r2, #9
 8000a5e:	b2d8      	uxtb	r0, r3
 8000a60:	e7da      	b.n	8000a18 <__aeabi_ui2f+0x28>
 8000a62:	0264      	lsls	r4, r4, #9
 8000a64:	2096      	movs	r0, #150	; 0x96
 8000a66:	0a64      	lsrs	r4, r4, #9
 8000a68:	e7d6      	b.n	8000a18 <__aeabi_ui2f+0x28>
 8000a6a:	1f4a      	subs	r2, r1, #5
 8000a6c:	4094      	lsls	r4, r2
 8000a6e:	0022      	movs	r2, r4
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <__aeabi_ui2f+0x8c>)
 8000a72:	4002      	ands	r2, r0
 8000a74:	0765      	lsls	r5, r4, #29
 8000a76:	d0f0      	beq.n	8000a5a <__aeabi_ui2f+0x6a>
 8000a78:	e7e5      	b.n	8000a46 <__aeabi_ui2f+0x56>
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	fbffffff 	.word	0xfbffffff

08000a80 <__aeabi_dadd>:
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	464f      	mov	r7, r9
 8000a84:	4646      	mov	r6, r8
 8000a86:	46d6      	mov	lr, sl
 8000a88:	0004      	movs	r4, r0
 8000a8a:	b5c0      	push	{r6, r7, lr}
 8000a8c:	001f      	movs	r7, r3
 8000a8e:	030b      	lsls	r3, r1, #12
 8000a90:	0010      	movs	r0, r2
 8000a92:	004e      	lsls	r6, r1, #1
 8000a94:	0a5b      	lsrs	r3, r3, #9
 8000a96:	0fcd      	lsrs	r5, r1, #31
 8000a98:	0f61      	lsrs	r1, r4, #29
 8000a9a:	007a      	lsls	r2, r7, #1
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	00e3      	lsls	r3, r4, #3
 8000aa0:	033c      	lsls	r4, r7, #12
 8000aa2:	0fff      	lsrs	r7, r7, #31
 8000aa4:	46bc      	mov	ip, r7
 8000aa6:	0a64      	lsrs	r4, r4, #9
 8000aa8:	0f47      	lsrs	r7, r0, #29
 8000aaa:	4327      	orrs	r7, r4
 8000aac:	0d76      	lsrs	r6, r6, #21
 8000aae:	0d52      	lsrs	r2, r2, #21
 8000ab0:	00c0      	lsls	r0, r0, #3
 8000ab2:	46b9      	mov	r9, r7
 8000ab4:	4680      	mov	r8, r0
 8000ab6:	1ab7      	subs	r7, r6, r2
 8000ab8:	4565      	cmp	r5, ip
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x3e>
 8000abc:	e09b      	b.n	8000bf6 <__aeabi_dadd+0x176>
 8000abe:	2f00      	cmp	r7, #0
 8000ac0:	dc00      	bgt.n	8000ac4 <__aeabi_dadd+0x44>
 8000ac2:	e084      	b.n	8000bce <__aeabi_dadd+0x14e>
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dadd+0x4a>
 8000ac8:	e0be      	b.n	8000c48 <__aeabi_dadd+0x1c8>
 8000aca:	4ac8      	ldr	r2, [pc, #800]	; (8000dec <__aeabi_dadd+0x36c>)
 8000acc:	4296      	cmp	r6, r2
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dadd+0x52>
 8000ad0:	e124      	b.n	8000d1c <__aeabi_dadd+0x29c>
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	464c      	mov	r4, r9
 8000ad6:	0412      	lsls	r2, r2, #16
 8000ad8:	4314      	orrs	r4, r2
 8000ada:	46a1      	mov	r9, r4
 8000adc:	2f38      	cmp	r7, #56	; 0x38
 8000ade:	dd00      	ble.n	8000ae2 <__aeabi_dadd+0x62>
 8000ae0:	e167      	b.n	8000db2 <__aeabi_dadd+0x332>
 8000ae2:	2f1f      	cmp	r7, #31
 8000ae4:	dd00      	ble.n	8000ae8 <__aeabi_dadd+0x68>
 8000ae6:	e1d6      	b.n	8000e96 <__aeabi_dadd+0x416>
 8000ae8:	2220      	movs	r2, #32
 8000aea:	464c      	mov	r4, r9
 8000aec:	1bd2      	subs	r2, r2, r7
 8000aee:	4094      	lsls	r4, r2
 8000af0:	46a2      	mov	sl, r4
 8000af2:	4644      	mov	r4, r8
 8000af4:	40fc      	lsrs	r4, r7
 8000af6:	0020      	movs	r0, r4
 8000af8:	4654      	mov	r4, sl
 8000afa:	4304      	orrs	r4, r0
 8000afc:	4640      	mov	r0, r8
 8000afe:	4090      	lsls	r0, r2
 8000b00:	1e42      	subs	r2, r0, #1
 8000b02:	4190      	sbcs	r0, r2
 8000b04:	464a      	mov	r2, r9
 8000b06:	40fa      	lsrs	r2, r7
 8000b08:	4304      	orrs	r4, r0
 8000b0a:	1a89      	subs	r1, r1, r2
 8000b0c:	1b1c      	subs	r4, r3, r4
 8000b0e:	42a3      	cmp	r3, r4
 8000b10:	4192      	sbcs	r2, r2
 8000b12:	4252      	negs	r2, r2
 8000b14:	1a8b      	subs	r3, r1, r2
 8000b16:	469a      	mov	sl, r3
 8000b18:	4653      	mov	r3, sl
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	d400      	bmi.n	8000b20 <__aeabi_dadd+0xa0>
 8000b1e:	e0d4      	b.n	8000cca <__aeabi_dadd+0x24a>
 8000b20:	4653      	mov	r3, sl
 8000b22:	025a      	lsls	r2, r3, #9
 8000b24:	0a53      	lsrs	r3, r2, #9
 8000b26:	469a      	mov	sl, r3
 8000b28:	4653      	mov	r3, sl
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0xb0>
 8000b2e:	e104      	b.n	8000d3a <__aeabi_dadd+0x2ba>
 8000b30:	4650      	mov	r0, sl
 8000b32:	f001 febb 	bl	80028ac <__clzsi2>
 8000b36:	0003      	movs	r3, r0
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	0020      	movs	r0, r4
 8000b3e:	1ad2      	subs	r2, r2, r3
 8000b40:	4651      	mov	r1, sl
 8000b42:	40d0      	lsrs	r0, r2
 8000b44:	4099      	lsls	r1, r3
 8000b46:	0002      	movs	r2, r0
 8000b48:	409c      	lsls	r4, r3
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	42b3      	cmp	r3, r6
 8000b4e:	da00      	bge.n	8000b52 <__aeabi_dadd+0xd2>
 8000b50:	e102      	b.n	8000d58 <__aeabi_dadd+0x2d8>
 8000b52:	1b9b      	subs	r3, r3, r6
 8000b54:	1c59      	adds	r1, r3, #1
 8000b56:	291f      	cmp	r1, #31
 8000b58:	dd00      	ble.n	8000b5c <__aeabi_dadd+0xdc>
 8000b5a:	e0a7      	b.n	8000cac <__aeabi_dadd+0x22c>
 8000b5c:	2320      	movs	r3, #32
 8000b5e:	0010      	movs	r0, r2
 8000b60:	0026      	movs	r6, r4
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	409c      	lsls	r4, r3
 8000b66:	4098      	lsls	r0, r3
 8000b68:	40ce      	lsrs	r6, r1
 8000b6a:	40ca      	lsrs	r2, r1
 8000b6c:	1e63      	subs	r3, r4, #1
 8000b6e:	419c      	sbcs	r4, r3
 8000b70:	4330      	orrs	r0, r6
 8000b72:	4692      	mov	sl, r2
 8000b74:	2600      	movs	r6, #0
 8000b76:	4304      	orrs	r4, r0
 8000b78:	0763      	lsls	r3, r4, #29
 8000b7a:	d009      	beq.n	8000b90 <__aeabi_dadd+0x110>
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	4023      	ands	r3, r4
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d005      	beq.n	8000b90 <__aeabi_dadd+0x110>
 8000b84:	1d23      	adds	r3, r4, #4
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	41a4      	sbcs	r4, r4
 8000b8a:	4264      	negs	r4, r4
 8000b8c:	44a2      	add	sl, r4
 8000b8e:	001c      	movs	r4, r3
 8000b90:	4653      	mov	r3, sl
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	d400      	bmi.n	8000b98 <__aeabi_dadd+0x118>
 8000b96:	e09b      	b.n	8000cd0 <__aeabi_dadd+0x250>
 8000b98:	4b94      	ldr	r3, [pc, #592]	; (8000dec <__aeabi_dadd+0x36c>)
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	429e      	cmp	r6, r3
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x122>
 8000ba0:	e0b8      	b.n	8000d14 <__aeabi_dadd+0x294>
 8000ba2:	4653      	mov	r3, sl
 8000ba4:	4992      	ldr	r1, [pc, #584]	; (8000df0 <__aeabi_dadd+0x370>)
 8000ba6:	08e4      	lsrs	r4, r4, #3
 8000ba8:	400b      	ands	r3, r1
 8000baa:	0019      	movs	r1, r3
 8000bac:	075b      	lsls	r3, r3, #29
 8000bae:	4323      	orrs	r3, r4
 8000bb0:	0572      	lsls	r2, r6, #21
 8000bb2:	024c      	lsls	r4, r1, #9
 8000bb4:	0b24      	lsrs	r4, r4, #12
 8000bb6:	0d52      	lsrs	r2, r2, #21
 8000bb8:	0512      	lsls	r2, r2, #20
 8000bba:	07ed      	lsls	r5, r5, #31
 8000bbc:	4322      	orrs	r2, r4
 8000bbe:	432a      	orrs	r2, r5
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	bce0      	pop	{r5, r6, r7}
 8000bc6:	46ba      	mov	sl, r7
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	46a8      	mov	r8, r5
 8000bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bce:	2f00      	cmp	r7, #0
 8000bd0:	d048      	beq.n	8000c64 <__aeabi_dadd+0x1e4>
 8000bd2:	1b97      	subs	r7, r2, r6
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d000      	beq.n	8000bda <__aeabi_dadd+0x15a>
 8000bd8:	e10e      	b.n	8000df8 <__aeabi_dadd+0x378>
 8000bda:	000c      	movs	r4, r1
 8000bdc:	431c      	orrs	r4, r3
 8000bde:	d100      	bne.n	8000be2 <__aeabi_dadd+0x162>
 8000be0:	e1b7      	b.n	8000f52 <__aeabi_dadd+0x4d2>
 8000be2:	1e7c      	subs	r4, r7, #1
 8000be4:	2f01      	cmp	r7, #1
 8000be6:	d100      	bne.n	8000bea <__aeabi_dadd+0x16a>
 8000be8:	e226      	b.n	8001038 <__aeabi_dadd+0x5b8>
 8000bea:	4d80      	ldr	r5, [pc, #512]	; (8000dec <__aeabi_dadd+0x36c>)
 8000bec:	42af      	cmp	r7, r5
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dadd+0x172>
 8000bf0:	e1d5      	b.n	8000f9e <__aeabi_dadd+0x51e>
 8000bf2:	0027      	movs	r7, r4
 8000bf4:	e107      	b.n	8000e06 <__aeabi_dadd+0x386>
 8000bf6:	2f00      	cmp	r7, #0
 8000bf8:	dc00      	bgt.n	8000bfc <__aeabi_dadd+0x17c>
 8000bfa:	e0b2      	b.n	8000d62 <__aeabi_dadd+0x2e2>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d047      	beq.n	8000c90 <__aeabi_dadd+0x210>
 8000c00:	4a7a      	ldr	r2, [pc, #488]	; (8000dec <__aeabi_dadd+0x36c>)
 8000c02:	4296      	cmp	r6, r2
 8000c04:	d100      	bne.n	8000c08 <__aeabi_dadd+0x188>
 8000c06:	e089      	b.n	8000d1c <__aeabi_dadd+0x29c>
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	464c      	mov	r4, r9
 8000c0c:	0412      	lsls	r2, r2, #16
 8000c0e:	4314      	orrs	r4, r2
 8000c10:	46a1      	mov	r9, r4
 8000c12:	2f38      	cmp	r7, #56	; 0x38
 8000c14:	dc6b      	bgt.n	8000cee <__aeabi_dadd+0x26e>
 8000c16:	2f1f      	cmp	r7, #31
 8000c18:	dc00      	bgt.n	8000c1c <__aeabi_dadd+0x19c>
 8000c1a:	e16e      	b.n	8000efa <__aeabi_dadd+0x47a>
 8000c1c:	003a      	movs	r2, r7
 8000c1e:	4648      	mov	r0, r9
 8000c20:	3a20      	subs	r2, #32
 8000c22:	40d0      	lsrs	r0, r2
 8000c24:	4684      	mov	ip, r0
 8000c26:	2f20      	cmp	r7, #32
 8000c28:	d007      	beq.n	8000c3a <__aeabi_dadd+0x1ba>
 8000c2a:	2240      	movs	r2, #64	; 0x40
 8000c2c:	4648      	mov	r0, r9
 8000c2e:	1bd2      	subs	r2, r2, r7
 8000c30:	4090      	lsls	r0, r2
 8000c32:	0002      	movs	r2, r0
 8000c34:	4640      	mov	r0, r8
 8000c36:	4310      	orrs	r0, r2
 8000c38:	4680      	mov	r8, r0
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	1e42      	subs	r2, r0, #1
 8000c3e:	4190      	sbcs	r0, r2
 8000c40:	4662      	mov	r2, ip
 8000c42:	0004      	movs	r4, r0
 8000c44:	4314      	orrs	r4, r2
 8000c46:	e057      	b.n	8000cf8 <__aeabi_dadd+0x278>
 8000c48:	464a      	mov	r2, r9
 8000c4a:	4302      	orrs	r2, r0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dadd+0x1d0>
 8000c4e:	e103      	b.n	8000e58 <__aeabi_dadd+0x3d8>
 8000c50:	1e7a      	subs	r2, r7, #1
 8000c52:	2f01      	cmp	r7, #1
 8000c54:	d100      	bne.n	8000c58 <__aeabi_dadd+0x1d8>
 8000c56:	e193      	b.n	8000f80 <__aeabi_dadd+0x500>
 8000c58:	4c64      	ldr	r4, [pc, #400]	; (8000dec <__aeabi_dadd+0x36c>)
 8000c5a:	42a7      	cmp	r7, r4
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_dadd+0x1e0>
 8000c5e:	e18a      	b.n	8000f76 <__aeabi_dadd+0x4f6>
 8000c60:	0017      	movs	r7, r2
 8000c62:	e73b      	b.n	8000adc <__aeabi_dadd+0x5c>
 8000c64:	4c63      	ldr	r4, [pc, #396]	; (8000df4 <__aeabi_dadd+0x374>)
 8000c66:	1c72      	adds	r2, r6, #1
 8000c68:	4222      	tst	r2, r4
 8000c6a:	d000      	beq.n	8000c6e <__aeabi_dadd+0x1ee>
 8000c6c:	e0e0      	b.n	8000e30 <__aeabi_dadd+0x3b0>
 8000c6e:	000a      	movs	r2, r1
 8000c70:	431a      	orrs	r2, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d000      	beq.n	8000c78 <__aeabi_dadd+0x1f8>
 8000c76:	e174      	b.n	8000f62 <__aeabi_dadd+0x4e2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_dadd+0x1fe>
 8000c7c:	e1d0      	b.n	8001020 <__aeabi_dadd+0x5a0>
 8000c7e:	464a      	mov	r2, r9
 8000c80:	4302      	orrs	r2, r0
 8000c82:	d000      	beq.n	8000c86 <__aeabi_dadd+0x206>
 8000c84:	e1e3      	b.n	800104e <__aeabi_dadd+0x5ce>
 8000c86:	074a      	lsls	r2, r1, #29
 8000c88:	08db      	lsrs	r3, r3, #3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	08c9      	lsrs	r1, r1, #3
 8000c8e:	e029      	b.n	8000ce4 <__aeabi_dadd+0x264>
 8000c90:	464a      	mov	r2, r9
 8000c92:	4302      	orrs	r2, r0
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x218>
 8000c96:	e17d      	b.n	8000f94 <__aeabi_dadd+0x514>
 8000c98:	1e7a      	subs	r2, r7, #1
 8000c9a:	2f01      	cmp	r7, #1
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dadd+0x220>
 8000c9e:	e0e0      	b.n	8000e62 <__aeabi_dadd+0x3e2>
 8000ca0:	4c52      	ldr	r4, [pc, #328]	; (8000dec <__aeabi_dadd+0x36c>)
 8000ca2:	42a7      	cmp	r7, r4
 8000ca4:	d100      	bne.n	8000ca8 <__aeabi_dadd+0x228>
 8000ca6:	e166      	b.n	8000f76 <__aeabi_dadd+0x4f6>
 8000ca8:	0017      	movs	r7, r2
 8000caa:	e7b2      	b.n	8000c12 <__aeabi_dadd+0x192>
 8000cac:	0010      	movs	r0, r2
 8000cae:	3b1f      	subs	r3, #31
 8000cb0:	40d8      	lsrs	r0, r3
 8000cb2:	2920      	cmp	r1, #32
 8000cb4:	d003      	beq.n	8000cbe <__aeabi_dadd+0x23e>
 8000cb6:	2340      	movs	r3, #64	; 0x40
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	4314      	orrs	r4, r2
 8000cbe:	1e63      	subs	r3, r4, #1
 8000cc0:	419c      	sbcs	r4, r3
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	4304      	orrs	r4, r0
 8000cca:	0763      	lsls	r3, r4, #29
 8000ccc:	d000      	beq.n	8000cd0 <__aeabi_dadd+0x250>
 8000cce:	e755      	b.n	8000b7c <__aeabi_dadd+0xfc>
 8000cd0:	4652      	mov	r2, sl
 8000cd2:	08e3      	lsrs	r3, r4, #3
 8000cd4:	0752      	lsls	r2, r2, #29
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	4652      	mov	r2, sl
 8000cda:	0037      	movs	r7, r6
 8000cdc:	08d1      	lsrs	r1, r2, #3
 8000cde:	4a43      	ldr	r2, [pc, #268]	; (8000dec <__aeabi_dadd+0x36c>)
 8000ce0:	4297      	cmp	r7, r2
 8000ce2:	d01f      	beq.n	8000d24 <__aeabi_dadd+0x2a4>
 8000ce4:	0309      	lsls	r1, r1, #12
 8000ce6:	057a      	lsls	r2, r7, #21
 8000ce8:	0b0c      	lsrs	r4, r1, #12
 8000cea:	0d52      	lsrs	r2, r2, #21
 8000cec:	e764      	b.n	8000bb8 <__aeabi_dadd+0x138>
 8000cee:	4642      	mov	r2, r8
 8000cf0:	464c      	mov	r4, r9
 8000cf2:	4314      	orrs	r4, r2
 8000cf4:	1e62      	subs	r2, r4, #1
 8000cf6:	4194      	sbcs	r4, r2
 8000cf8:	18e4      	adds	r4, r4, r3
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	4192      	sbcs	r2, r2
 8000cfe:	4252      	negs	r2, r2
 8000d00:	4692      	mov	sl, r2
 8000d02:	448a      	add	sl, r1
 8000d04:	4653      	mov	r3, sl
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	d5df      	bpl.n	8000cca <__aeabi_dadd+0x24a>
 8000d0a:	4b38      	ldr	r3, [pc, #224]	; (8000dec <__aeabi_dadd+0x36c>)
 8000d0c:	3601      	adds	r6, #1
 8000d0e:	429e      	cmp	r6, r3
 8000d10:	d000      	beq.n	8000d14 <__aeabi_dadd+0x294>
 8000d12:	e0b3      	b.n	8000e7c <__aeabi_dadd+0x3fc>
 8000d14:	0032      	movs	r2, r6
 8000d16:	2400      	movs	r4, #0
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e74d      	b.n	8000bb8 <__aeabi_dadd+0x138>
 8000d1c:	074a      	lsls	r2, r1, #29
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	08c9      	lsrs	r1, r1, #3
 8000d24:	001a      	movs	r2, r3
 8000d26:	430a      	orrs	r2, r1
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x2ac>
 8000d2a:	e200      	b.n	800112e <__aeabi_dadd+0x6ae>
 8000d2c:	2480      	movs	r4, #128	; 0x80
 8000d2e:	0324      	lsls	r4, r4, #12
 8000d30:	430c      	orrs	r4, r1
 8000d32:	0324      	lsls	r4, r4, #12
 8000d34:	4a2d      	ldr	r2, [pc, #180]	; (8000dec <__aeabi_dadd+0x36c>)
 8000d36:	0b24      	lsrs	r4, r4, #12
 8000d38:	e73e      	b.n	8000bb8 <__aeabi_dadd+0x138>
 8000d3a:	0020      	movs	r0, r4
 8000d3c:	f001 fdb6 	bl	80028ac <__clzsi2>
 8000d40:	0003      	movs	r3, r0
 8000d42:	3318      	adds	r3, #24
 8000d44:	2b1f      	cmp	r3, #31
 8000d46:	dc00      	bgt.n	8000d4a <__aeabi_dadd+0x2ca>
 8000d48:	e6f7      	b.n	8000b3a <__aeabi_dadd+0xba>
 8000d4a:	0022      	movs	r2, r4
 8000d4c:	3808      	subs	r0, #8
 8000d4e:	4082      	lsls	r2, r0
 8000d50:	2400      	movs	r4, #0
 8000d52:	42b3      	cmp	r3, r6
 8000d54:	db00      	blt.n	8000d58 <__aeabi_dadd+0x2d8>
 8000d56:	e6fc      	b.n	8000b52 <__aeabi_dadd+0xd2>
 8000d58:	1af6      	subs	r6, r6, r3
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <__aeabi_dadd+0x370>)
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	4692      	mov	sl, r2
 8000d60:	e70a      	b.n	8000b78 <__aeabi_dadd+0xf8>
 8000d62:	2f00      	cmp	r7, #0
 8000d64:	d02b      	beq.n	8000dbe <__aeabi_dadd+0x33e>
 8000d66:	1b97      	subs	r7, r2, r6
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_dadd+0x2ee>
 8000d6c:	e0b8      	b.n	8000ee0 <__aeabi_dadd+0x460>
 8000d6e:	4c1f      	ldr	r4, [pc, #124]	; (8000dec <__aeabi_dadd+0x36c>)
 8000d70:	42a2      	cmp	r2, r4
 8000d72:	d100      	bne.n	8000d76 <__aeabi_dadd+0x2f6>
 8000d74:	e11c      	b.n	8000fb0 <__aeabi_dadd+0x530>
 8000d76:	2480      	movs	r4, #128	; 0x80
 8000d78:	0424      	lsls	r4, r4, #16
 8000d7a:	4321      	orrs	r1, r4
 8000d7c:	2f38      	cmp	r7, #56	; 0x38
 8000d7e:	dd00      	ble.n	8000d82 <__aeabi_dadd+0x302>
 8000d80:	e11e      	b.n	8000fc0 <__aeabi_dadd+0x540>
 8000d82:	2f1f      	cmp	r7, #31
 8000d84:	dd00      	ble.n	8000d88 <__aeabi_dadd+0x308>
 8000d86:	e19e      	b.n	80010c6 <__aeabi_dadd+0x646>
 8000d88:	2620      	movs	r6, #32
 8000d8a:	000c      	movs	r4, r1
 8000d8c:	1bf6      	subs	r6, r6, r7
 8000d8e:	0018      	movs	r0, r3
 8000d90:	40b3      	lsls	r3, r6
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	40f8      	lsrs	r0, r7
 8000d96:	1e5e      	subs	r6, r3, #1
 8000d98:	41b3      	sbcs	r3, r6
 8000d9a:	40f9      	lsrs	r1, r7
 8000d9c:	4304      	orrs	r4, r0
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	4489      	add	r9, r1
 8000da2:	4444      	add	r4, r8
 8000da4:	4544      	cmp	r4, r8
 8000da6:	419b      	sbcs	r3, r3
 8000da8:	425b      	negs	r3, r3
 8000daa:	444b      	add	r3, r9
 8000dac:	469a      	mov	sl, r3
 8000dae:	0016      	movs	r6, r2
 8000db0:	e7a8      	b.n	8000d04 <__aeabi_dadd+0x284>
 8000db2:	4642      	mov	r2, r8
 8000db4:	464c      	mov	r4, r9
 8000db6:	4314      	orrs	r4, r2
 8000db8:	1e62      	subs	r2, r4, #1
 8000dba:	4194      	sbcs	r4, r2
 8000dbc:	e6a6      	b.n	8000b0c <__aeabi_dadd+0x8c>
 8000dbe:	4c0d      	ldr	r4, [pc, #52]	; (8000df4 <__aeabi_dadd+0x374>)
 8000dc0:	1c72      	adds	r2, r6, #1
 8000dc2:	4222      	tst	r2, r4
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_dadd+0x348>
 8000dc6:	e0a8      	b.n	8000f1a <__aeabi_dadd+0x49a>
 8000dc8:	000a      	movs	r2, r1
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d000      	beq.n	8000dd2 <__aeabi_dadd+0x352>
 8000dd0:	e10a      	b.n	8000fe8 <__aeabi_dadd+0x568>
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dadd+0x358>
 8000dd6:	e15e      	b.n	8001096 <__aeabi_dadd+0x616>
 8000dd8:	464a      	mov	r2, r9
 8000dda:	4302      	orrs	r2, r0
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_dadd+0x360>
 8000dde:	e161      	b.n	80010a4 <__aeabi_dadd+0x624>
 8000de0:	074a      	lsls	r2, r1, #29
 8000de2:	08db      	lsrs	r3, r3, #3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	08c9      	lsrs	r1, r1, #3
 8000de8:	e77c      	b.n	8000ce4 <__aeabi_dadd+0x264>
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	000007ff 	.word	0x000007ff
 8000df0:	ff7fffff 	.word	0xff7fffff
 8000df4:	000007fe 	.word	0x000007fe
 8000df8:	4ccf      	ldr	r4, [pc, #828]	; (8001138 <__aeabi_dadd+0x6b8>)
 8000dfa:	42a2      	cmp	r2, r4
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_dadd+0x380>
 8000dfe:	e0ce      	b.n	8000f9e <__aeabi_dadd+0x51e>
 8000e00:	2480      	movs	r4, #128	; 0x80
 8000e02:	0424      	lsls	r4, r4, #16
 8000e04:	4321      	orrs	r1, r4
 8000e06:	2f38      	cmp	r7, #56	; 0x38
 8000e08:	dc5b      	bgt.n	8000ec2 <__aeabi_dadd+0x442>
 8000e0a:	2f1f      	cmp	r7, #31
 8000e0c:	dd00      	ble.n	8000e10 <__aeabi_dadd+0x390>
 8000e0e:	e0dc      	b.n	8000fca <__aeabi_dadd+0x54a>
 8000e10:	2520      	movs	r5, #32
 8000e12:	000c      	movs	r4, r1
 8000e14:	1bed      	subs	r5, r5, r7
 8000e16:	001e      	movs	r6, r3
 8000e18:	40ab      	lsls	r3, r5
 8000e1a:	40ac      	lsls	r4, r5
 8000e1c:	40fe      	lsrs	r6, r7
 8000e1e:	1e5d      	subs	r5, r3, #1
 8000e20:	41ab      	sbcs	r3, r5
 8000e22:	4334      	orrs	r4, r6
 8000e24:	40f9      	lsrs	r1, r7
 8000e26:	431c      	orrs	r4, r3
 8000e28:	464b      	mov	r3, r9
 8000e2a:	1a5b      	subs	r3, r3, r1
 8000e2c:	4699      	mov	r9, r3
 8000e2e:	e04c      	b.n	8000eca <__aeabi_dadd+0x44a>
 8000e30:	464a      	mov	r2, r9
 8000e32:	1a1c      	subs	r4, r3, r0
 8000e34:	1a88      	subs	r0, r1, r2
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	4192      	sbcs	r2, r2
 8000e3a:	4252      	negs	r2, r2
 8000e3c:	4692      	mov	sl, r2
 8000e3e:	0002      	movs	r2, r0
 8000e40:	4650      	mov	r0, sl
 8000e42:	1a12      	subs	r2, r2, r0
 8000e44:	4692      	mov	sl, r2
 8000e46:	0212      	lsls	r2, r2, #8
 8000e48:	d478      	bmi.n	8000f3c <__aeabi_dadd+0x4bc>
 8000e4a:	4653      	mov	r3, sl
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_dadd+0x3d2>
 8000e50:	e66a      	b.n	8000b28 <__aeabi_dadd+0xa8>
 8000e52:	2100      	movs	r1, #0
 8000e54:	2500      	movs	r5, #0
 8000e56:	e745      	b.n	8000ce4 <__aeabi_dadd+0x264>
 8000e58:	074a      	lsls	r2, r1, #29
 8000e5a:	08db      	lsrs	r3, r3, #3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	08c9      	lsrs	r1, r1, #3
 8000e60:	e73d      	b.n	8000cde <__aeabi_dadd+0x25e>
 8000e62:	181c      	adds	r4, r3, r0
 8000e64:	429c      	cmp	r4, r3
 8000e66:	419b      	sbcs	r3, r3
 8000e68:	4449      	add	r1, r9
 8000e6a:	468a      	mov	sl, r1
 8000e6c:	425b      	negs	r3, r3
 8000e6e:	449a      	add	sl, r3
 8000e70:	4653      	mov	r3, sl
 8000e72:	2601      	movs	r6, #1
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	d400      	bmi.n	8000e7a <__aeabi_dadd+0x3fa>
 8000e78:	e727      	b.n	8000cca <__aeabi_dadd+0x24a>
 8000e7a:	2602      	movs	r6, #2
 8000e7c:	4652      	mov	r2, sl
 8000e7e:	4baf      	ldr	r3, [pc, #700]	; (800113c <__aeabi_dadd+0x6bc>)
 8000e80:	2101      	movs	r1, #1
 8000e82:	401a      	ands	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	4021      	ands	r1, r4
 8000e88:	0862      	lsrs	r2, r4, #1
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	07dc      	lsls	r4, r3, #31
 8000e8e:	085b      	lsrs	r3, r3, #1
 8000e90:	469a      	mov	sl, r3
 8000e92:	4314      	orrs	r4, r2
 8000e94:	e670      	b.n	8000b78 <__aeabi_dadd+0xf8>
 8000e96:	003a      	movs	r2, r7
 8000e98:	464c      	mov	r4, r9
 8000e9a:	3a20      	subs	r2, #32
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	46a4      	mov	ip, r4
 8000ea0:	2f20      	cmp	r7, #32
 8000ea2:	d007      	beq.n	8000eb4 <__aeabi_dadd+0x434>
 8000ea4:	2240      	movs	r2, #64	; 0x40
 8000ea6:	4648      	mov	r0, r9
 8000ea8:	1bd2      	subs	r2, r2, r7
 8000eaa:	4090      	lsls	r0, r2
 8000eac:	0002      	movs	r2, r0
 8000eae:	4640      	mov	r0, r8
 8000eb0:	4310      	orrs	r0, r2
 8000eb2:	4680      	mov	r8, r0
 8000eb4:	4640      	mov	r0, r8
 8000eb6:	1e42      	subs	r2, r0, #1
 8000eb8:	4190      	sbcs	r0, r2
 8000eba:	4662      	mov	r2, ip
 8000ebc:	0004      	movs	r4, r0
 8000ebe:	4314      	orrs	r4, r2
 8000ec0:	e624      	b.n	8000b0c <__aeabi_dadd+0x8c>
 8000ec2:	4319      	orrs	r1, r3
 8000ec4:	000c      	movs	r4, r1
 8000ec6:	1e63      	subs	r3, r4, #1
 8000ec8:	419c      	sbcs	r4, r3
 8000eca:	4643      	mov	r3, r8
 8000ecc:	1b1c      	subs	r4, r3, r4
 8000ece:	45a0      	cmp	r8, r4
 8000ed0:	419b      	sbcs	r3, r3
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	425b      	negs	r3, r3
 8000ed6:	1acb      	subs	r3, r1, r3
 8000ed8:	469a      	mov	sl, r3
 8000eda:	4665      	mov	r5, ip
 8000edc:	0016      	movs	r6, r2
 8000ede:	e61b      	b.n	8000b18 <__aeabi_dadd+0x98>
 8000ee0:	000c      	movs	r4, r1
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_dadd+0x468>
 8000ee6:	e0c7      	b.n	8001078 <__aeabi_dadd+0x5f8>
 8000ee8:	1e7c      	subs	r4, r7, #1
 8000eea:	2f01      	cmp	r7, #1
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_dadd+0x470>
 8000eee:	e0f9      	b.n	80010e4 <__aeabi_dadd+0x664>
 8000ef0:	4e91      	ldr	r6, [pc, #580]	; (8001138 <__aeabi_dadd+0x6b8>)
 8000ef2:	42b7      	cmp	r7, r6
 8000ef4:	d05c      	beq.n	8000fb0 <__aeabi_dadd+0x530>
 8000ef6:	0027      	movs	r7, r4
 8000ef8:	e740      	b.n	8000d7c <__aeabi_dadd+0x2fc>
 8000efa:	2220      	movs	r2, #32
 8000efc:	464c      	mov	r4, r9
 8000efe:	4640      	mov	r0, r8
 8000f00:	1bd2      	subs	r2, r2, r7
 8000f02:	4094      	lsls	r4, r2
 8000f04:	40f8      	lsrs	r0, r7
 8000f06:	4304      	orrs	r4, r0
 8000f08:	4640      	mov	r0, r8
 8000f0a:	4090      	lsls	r0, r2
 8000f0c:	1e42      	subs	r2, r0, #1
 8000f0e:	4190      	sbcs	r0, r2
 8000f10:	464a      	mov	r2, r9
 8000f12:	40fa      	lsrs	r2, r7
 8000f14:	4304      	orrs	r4, r0
 8000f16:	1889      	adds	r1, r1, r2
 8000f18:	e6ee      	b.n	8000cf8 <__aeabi_dadd+0x278>
 8000f1a:	4c87      	ldr	r4, [pc, #540]	; (8001138 <__aeabi_dadd+0x6b8>)
 8000f1c:	42a2      	cmp	r2, r4
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x4a2>
 8000f20:	e6f9      	b.n	8000d16 <__aeabi_dadd+0x296>
 8000f22:	1818      	adds	r0, r3, r0
 8000f24:	4298      	cmp	r0, r3
 8000f26:	419b      	sbcs	r3, r3
 8000f28:	4449      	add	r1, r9
 8000f2a:	425b      	negs	r3, r3
 8000f2c:	18cb      	adds	r3, r1, r3
 8000f2e:	07dc      	lsls	r4, r3, #31
 8000f30:	0840      	lsrs	r0, r0, #1
 8000f32:	085b      	lsrs	r3, r3, #1
 8000f34:	469a      	mov	sl, r3
 8000f36:	0016      	movs	r6, r2
 8000f38:	4304      	orrs	r4, r0
 8000f3a:	e6c6      	b.n	8000cca <__aeabi_dadd+0x24a>
 8000f3c:	4642      	mov	r2, r8
 8000f3e:	1ad4      	subs	r4, r2, r3
 8000f40:	45a0      	cmp	r8, r4
 8000f42:	4180      	sbcs	r0, r0
 8000f44:	464b      	mov	r3, r9
 8000f46:	4240      	negs	r0, r0
 8000f48:	1a59      	subs	r1, r3, r1
 8000f4a:	1a0b      	subs	r3, r1, r0
 8000f4c:	469a      	mov	sl, r3
 8000f4e:	4665      	mov	r5, ip
 8000f50:	e5ea      	b.n	8000b28 <__aeabi_dadd+0xa8>
 8000f52:	464b      	mov	r3, r9
 8000f54:	464a      	mov	r2, r9
 8000f56:	08c0      	lsrs	r0, r0, #3
 8000f58:	075b      	lsls	r3, r3, #29
 8000f5a:	4665      	mov	r5, ip
 8000f5c:	4303      	orrs	r3, r0
 8000f5e:	08d1      	lsrs	r1, r2, #3
 8000f60:	e6bd      	b.n	8000cde <__aeabi_dadd+0x25e>
 8000f62:	2a00      	cmp	r2, #0
 8000f64:	d000      	beq.n	8000f68 <__aeabi_dadd+0x4e8>
 8000f66:	e08e      	b.n	8001086 <__aeabi_dadd+0x606>
 8000f68:	464b      	mov	r3, r9
 8000f6a:	4303      	orrs	r3, r0
 8000f6c:	d117      	bne.n	8000f9e <__aeabi_dadd+0x51e>
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	2500      	movs	r5, #0
 8000f72:	0309      	lsls	r1, r1, #12
 8000f74:	e6da      	b.n	8000d2c <__aeabi_dadd+0x2ac>
 8000f76:	074a      	lsls	r2, r1, #29
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	08c9      	lsrs	r1, r1, #3
 8000f7e:	e6d1      	b.n	8000d24 <__aeabi_dadd+0x2a4>
 8000f80:	1a1c      	subs	r4, r3, r0
 8000f82:	464a      	mov	r2, r9
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	419b      	sbcs	r3, r3
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	1acb      	subs	r3, r1, r3
 8000f8e:	469a      	mov	sl, r3
 8000f90:	2601      	movs	r6, #1
 8000f92:	e5c1      	b.n	8000b18 <__aeabi_dadd+0x98>
 8000f94:	074a      	lsls	r2, r1, #29
 8000f96:	08db      	lsrs	r3, r3, #3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	08c9      	lsrs	r1, r1, #3
 8000f9c:	e69f      	b.n	8000cde <__aeabi_dadd+0x25e>
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	08d8      	lsrs	r0, r3, #3
 8000fa2:	464b      	mov	r3, r9
 8000fa4:	464a      	mov	r2, r9
 8000fa6:	075b      	lsls	r3, r3, #29
 8000fa8:	4665      	mov	r5, ip
 8000faa:	4303      	orrs	r3, r0
 8000fac:	08d1      	lsrs	r1, r2, #3
 8000fae:	e6b9      	b.n	8000d24 <__aeabi_dadd+0x2a4>
 8000fb0:	4643      	mov	r3, r8
 8000fb2:	08d8      	lsrs	r0, r3, #3
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	464a      	mov	r2, r9
 8000fb8:	075b      	lsls	r3, r3, #29
 8000fba:	4303      	orrs	r3, r0
 8000fbc:	08d1      	lsrs	r1, r2, #3
 8000fbe:	e6b1      	b.n	8000d24 <__aeabi_dadd+0x2a4>
 8000fc0:	4319      	orrs	r1, r3
 8000fc2:	000c      	movs	r4, r1
 8000fc4:	1e63      	subs	r3, r4, #1
 8000fc6:	419c      	sbcs	r4, r3
 8000fc8:	e6eb      	b.n	8000da2 <__aeabi_dadd+0x322>
 8000fca:	003c      	movs	r4, r7
 8000fcc:	000d      	movs	r5, r1
 8000fce:	3c20      	subs	r4, #32
 8000fd0:	40e5      	lsrs	r5, r4
 8000fd2:	2f20      	cmp	r7, #32
 8000fd4:	d003      	beq.n	8000fde <__aeabi_dadd+0x55e>
 8000fd6:	2440      	movs	r4, #64	; 0x40
 8000fd8:	1be4      	subs	r4, r4, r7
 8000fda:	40a1      	lsls	r1, r4
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	001c      	movs	r4, r3
 8000fe0:	1e63      	subs	r3, r4, #1
 8000fe2:	419c      	sbcs	r4, r3
 8000fe4:	432c      	orrs	r4, r5
 8000fe6:	e770      	b.n	8000eca <__aeabi_dadd+0x44a>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d0e1      	beq.n	8000fb0 <__aeabi_dadd+0x530>
 8000fec:	464a      	mov	r2, r9
 8000fee:	4302      	orrs	r2, r0
 8000ff0:	d0c1      	beq.n	8000f76 <__aeabi_dadd+0x4f6>
 8000ff2:	074a      	lsls	r2, r1, #29
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	08c9      	lsrs	r1, r1, #3
 8000ffc:	0312      	lsls	r2, r2, #12
 8000ffe:	4211      	tst	r1, r2
 8001000:	d008      	beq.n	8001014 <__aeabi_dadd+0x594>
 8001002:	4648      	mov	r0, r9
 8001004:	08c4      	lsrs	r4, r0, #3
 8001006:	4214      	tst	r4, r2
 8001008:	d104      	bne.n	8001014 <__aeabi_dadd+0x594>
 800100a:	4643      	mov	r3, r8
 800100c:	0021      	movs	r1, r4
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	0742      	lsls	r2, r0, #29
 8001012:	4313      	orrs	r3, r2
 8001014:	0f5a      	lsrs	r2, r3, #29
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	0752      	lsls	r2, r2, #29
 800101a:	08db      	lsrs	r3, r3, #3
 800101c:	4313      	orrs	r3, r2
 800101e:	e681      	b.n	8000d24 <__aeabi_dadd+0x2a4>
 8001020:	464b      	mov	r3, r9
 8001022:	4303      	orrs	r3, r0
 8001024:	d100      	bne.n	8001028 <__aeabi_dadd+0x5a8>
 8001026:	e714      	b.n	8000e52 <__aeabi_dadd+0x3d2>
 8001028:	464b      	mov	r3, r9
 800102a:	464a      	mov	r2, r9
 800102c:	08c0      	lsrs	r0, r0, #3
 800102e:	075b      	lsls	r3, r3, #29
 8001030:	4665      	mov	r5, ip
 8001032:	4303      	orrs	r3, r0
 8001034:	08d1      	lsrs	r1, r2, #3
 8001036:	e655      	b.n	8000ce4 <__aeabi_dadd+0x264>
 8001038:	1ac4      	subs	r4, r0, r3
 800103a:	45a0      	cmp	r8, r4
 800103c:	4180      	sbcs	r0, r0
 800103e:	464b      	mov	r3, r9
 8001040:	4240      	negs	r0, r0
 8001042:	1a59      	subs	r1, r3, r1
 8001044:	1a0b      	subs	r3, r1, r0
 8001046:	469a      	mov	sl, r3
 8001048:	4665      	mov	r5, ip
 800104a:	2601      	movs	r6, #1
 800104c:	e564      	b.n	8000b18 <__aeabi_dadd+0x98>
 800104e:	1a1c      	subs	r4, r3, r0
 8001050:	464a      	mov	r2, r9
 8001052:	42a3      	cmp	r3, r4
 8001054:	4180      	sbcs	r0, r0
 8001056:	1a8a      	subs	r2, r1, r2
 8001058:	4240      	negs	r0, r0
 800105a:	1a12      	subs	r2, r2, r0
 800105c:	4692      	mov	sl, r2
 800105e:	0212      	lsls	r2, r2, #8
 8001060:	d549      	bpl.n	80010f6 <__aeabi_dadd+0x676>
 8001062:	4642      	mov	r2, r8
 8001064:	1ad4      	subs	r4, r2, r3
 8001066:	45a0      	cmp	r8, r4
 8001068:	4180      	sbcs	r0, r0
 800106a:	464b      	mov	r3, r9
 800106c:	4240      	negs	r0, r0
 800106e:	1a59      	subs	r1, r3, r1
 8001070:	1a0b      	subs	r3, r1, r0
 8001072:	469a      	mov	sl, r3
 8001074:	4665      	mov	r5, ip
 8001076:	e57f      	b.n	8000b78 <__aeabi_dadd+0xf8>
 8001078:	464b      	mov	r3, r9
 800107a:	464a      	mov	r2, r9
 800107c:	08c0      	lsrs	r0, r0, #3
 800107e:	075b      	lsls	r3, r3, #29
 8001080:	4303      	orrs	r3, r0
 8001082:	08d1      	lsrs	r1, r2, #3
 8001084:	e62b      	b.n	8000cde <__aeabi_dadd+0x25e>
 8001086:	464a      	mov	r2, r9
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	4302      	orrs	r2, r0
 800108c:	d138      	bne.n	8001100 <__aeabi_dadd+0x680>
 800108e:	074a      	lsls	r2, r1, #29
 8001090:	4313      	orrs	r3, r2
 8001092:	08c9      	lsrs	r1, r1, #3
 8001094:	e646      	b.n	8000d24 <__aeabi_dadd+0x2a4>
 8001096:	464b      	mov	r3, r9
 8001098:	464a      	mov	r2, r9
 800109a:	08c0      	lsrs	r0, r0, #3
 800109c:	075b      	lsls	r3, r3, #29
 800109e:	4303      	orrs	r3, r0
 80010a0:	08d1      	lsrs	r1, r2, #3
 80010a2:	e61f      	b.n	8000ce4 <__aeabi_dadd+0x264>
 80010a4:	181c      	adds	r4, r3, r0
 80010a6:	429c      	cmp	r4, r3
 80010a8:	419b      	sbcs	r3, r3
 80010aa:	4449      	add	r1, r9
 80010ac:	468a      	mov	sl, r1
 80010ae:	425b      	negs	r3, r3
 80010b0:	449a      	add	sl, r3
 80010b2:	4653      	mov	r3, sl
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	d400      	bmi.n	80010ba <__aeabi_dadd+0x63a>
 80010b8:	e607      	b.n	8000cca <__aeabi_dadd+0x24a>
 80010ba:	4652      	mov	r2, sl
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <__aeabi_dadd+0x6bc>)
 80010be:	2601      	movs	r6, #1
 80010c0:	401a      	ands	r2, r3
 80010c2:	4692      	mov	sl, r2
 80010c4:	e601      	b.n	8000cca <__aeabi_dadd+0x24a>
 80010c6:	003c      	movs	r4, r7
 80010c8:	000e      	movs	r6, r1
 80010ca:	3c20      	subs	r4, #32
 80010cc:	40e6      	lsrs	r6, r4
 80010ce:	2f20      	cmp	r7, #32
 80010d0:	d003      	beq.n	80010da <__aeabi_dadd+0x65a>
 80010d2:	2440      	movs	r4, #64	; 0x40
 80010d4:	1be4      	subs	r4, r4, r7
 80010d6:	40a1      	lsls	r1, r4
 80010d8:	430b      	orrs	r3, r1
 80010da:	001c      	movs	r4, r3
 80010dc:	1e63      	subs	r3, r4, #1
 80010de:	419c      	sbcs	r4, r3
 80010e0:	4334      	orrs	r4, r6
 80010e2:	e65e      	b.n	8000da2 <__aeabi_dadd+0x322>
 80010e4:	4443      	add	r3, r8
 80010e6:	4283      	cmp	r3, r0
 80010e8:	4180      	sbcs	r0, r0
 80010ea:	4449      	add	r1, r9
 80010ec:	468a      	mov	sl, r1
 80010ee:	4240      	negs	r0, r0
 80010f0:	001c      	movs	r4, r3
 80010f2:	4482      	add	sl, r0
 80010f4:	e6bc      	b.n	8000e70 <__aeabi_dadd+0x3f0>
 80010f6:	4653      	mov	r3, sl
 80010f8:	4323      	orrs	r3, r4
 80010fa:	d100      	bne.n	80010fe <__aeabi_dadd+0x67e>
 80010fc:	e6a9      	b.n	8000e52 <__aeabi_dadd+0x3d2>
 80010fe:	e5e4      	b.n	8000cca <__aeabi_dadd+0x24a>
 8001100:	074a      	lsls	r2, r1, #29
 8001102:	4313      	orrs	r3, r2
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	08c9      	lsrs	r1, r1, #3
 8001108:	0312      	lsls	r2, r2, #12
 800110a:	4211      	tst	r1, r2
 800110c:	d009      	beq.n	8001122 <__aeabi_dadd+0x6a2>
 800110e:	4648      	mov	r0, r9
 8001110:	08c4      	lsrs	r4, r0, #3
 8001112:	4214      	tst	r4, r2
 8001114:	d105      	bne.n	8001122 <__aeabi_dadd+0x6a2>
 8001116:	4643      	mov	r3, r8
 8001118:	4665      	mov	r5, ip
 800111a:	0021      	movs	r1, r4
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	0742      	lsls	r2, r0, #29
 8001120:	4313      	orrs	r3, r2
 8001122:	0f5a      	lsrs	r2, r3, #29
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	08db      	lsrs	r3, r3, #3
 8001128:	0752      	lsls	r2, r2, #29
 800112a:	4313      	orrs	r3, r2
 800112c:	e5fa      	b.n	8000d24 <__aeabi_dadd+0x2a4>
 800112e:	2300      	movs	r3, #0
 8001130:	4a01      	ldr	r2, [pc, #4]	; (8001138 <__aeabi_dadd+0x6b8>)
 8001132:	001c      	movs	r4, r3
 8001134:	e540      	b.n	8000bb8 <__aeabi_dadd+0x138>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	000007ff 	.word	0x000007ff
 800113c:	ff7fffff 	.word	0xff7fffff

08001140 <__aeabi_ddiv>:
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	4657      	mov	r7, sl
 8001144:	464e      	mov	r6, r9
 8001146:	4645      	mov	r5, r8
 8001148:	46de      	mov	lr, fp
 800114a:	b5e0      	push	{r5, r6, r7, lr}
 800114c:	030c      	lsls	r4, r1, #12
 800114e:	001f      	movs	r7, r3
 8001150:	004b      	lsls	r3, r1, #1
 8001152:	4681      	mov	r9, r0
 8001154:	4692      	mov	sl, r2
 8001156:	0005      	movs	r5, r0
 8001158:	b085      	sub	sp, #20
 800115a:	0b24      	lsrs	r4, r4, #12
 800115c:	0d5b      	lsrs	r3, r3, #21
 800115e:	0fce      	lsrs	r6, r1, #31
 8001160:	2b00      	cmp	r3, #0
 8001162:	d100      	bne.n	8001166 <__aeabi_ddiv+0x26>
 8001164:	e152      	b.n	800140c <__aeabi_ddiv+0x2cc>
 8001166:	4ad2      	ldr	r2, [pc, #840]	; (80014b0 <__aeabi_ddiv+0x370>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x2e>
 800116c:	e16e      	b.n	800144c <__aeabi_ddiv+0x30c>
 800116e:	0f42      	lsrs	r2, r0, #29
 8001170:	00e4      	lsls	r4, r4, #3
 8001172:	4314      	orrs	r4, r2
 8001174:	2280      	movs	r2, #128	; 0x80
 8001176:	0412      	lsls	r2, r2, #16
 8001178:	4322      	orrs	r2, r4
 800117a:	4690      	mov	r8, r2
 800117c:	4acd      	ldr	r2, [pc, #820]	; (80014b4 <__aeabi_ddiv+0x374>)
 800117e:	00c5      	lsls	r5, r0, #3
 8001180:	4693      	mov	fp, r2
 8001182:	449b      	add	fp, r3
 8001184:	2300      	movs	r3, #0
 8001186:	4699      	mov	r9, r3
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	033c      	lsls	r4, r7, #12
 800118c:	007b      	lsls	r3, r7, #1
 800118e:	4650      	mov	r0, sl
 8001190:	0b24      	lsrs	r4, r4, #12
 8001192:	0d5b      	lsrs	r3, r3, #21
 8001194:	0fff      	lsrs	r7, r7, #31
 8001196:	2b00      	cmp	r3, #0
 8001198:	d100      	bne.n	800119c <__aeabi_ddiv+0x5c>
 800119a:	e11a      	b.n	80013d2 <__aeabi_ddiv+0x292>
 800119c:	4ac4      	ldr	r2, [pc, #784]	; (80014b0 <__aeabi_ddiv+0x370>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x64>
 80011a2:	e15e      	b.n	8001462 <__aeabi_ddiv+0x322>
 80011a4:	0f42      	lsrs	r2, r0, #29
 80011a6:	00e4      	lsls	r4, r4, #3
 80011a8:	4322      	orrs	r2, r4
 80011aa:	2480      	movs	r4, #128	; 0x80
 80011ac:	0424      	lsls	r4, r4, #16
 80011ae:	4314      	orrs	r4, r2
 80011b0:	4ac0      	ldr	r2, [pc, #768]	; (80014b4 <__aeabi_ddiv+0x374>)
 80011b2:	00c1      	lsls	r1, r0, #3
 80011b4:	4694      	mov	ip, r2
 80011b6:	465a      	mov	r2, fp
 80011b8:	4463      	add	r3, ip
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	469b      	mov	fp, r3
 80011be:	2000      	movs	r0, #0
 80011c0:	0033      	movs	r3, r6
 80011c2:	407b      	eors	r3, r7
 80011c4:	469a      	mov	sl, r3
 80011c6:	464b      	mov	r3, r9
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d827      	bhi.n	800121c <__aeabi_ddiv+0xdc>
 80011cc:	4aba      	ldr	r2, [pc, #744]	; (80014b8 <__aeabi_ddiv+0x378>)
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	58d3      	ldr	r3, [r2, r3]
 80011d2:	469f      	mov	pc, r3
 80011d4:	46b2      	mov	sl, r6
 80011d6:	9b00      	ldr	r3, [sp, #0]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d016      	beq.n	800120a <__aeabi_ddiv+0xca>
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0xa2>
 80011e0:	e287      	b.n	80016f2 <__aeabi_ddiv+0x5b2>
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d000      	beq.n	80011e8 <__aeabi_ddiv+0xa8>
 80011e6:	e0d5      	b.n	8001394 <__aeabi_ddiv+0x254>
 80011e8:	2300      	movs	r3, #0
 80011ea:	2200      	movs	r2, #0
 80011ec:	2500      	movs	r5, #0
 80011ee:	051b      	lsls	r3, r3, #20
 80011f0:	4313      	orrs	r3, r2
 80011f2:	4652      	mov	r2, sl
 80011f4:	07d2      	lsls	r2, r2, #31
 80011f6:	4313      	orrs	r3, r2
 80011f8:	0028      	movs	r0, r5
 80011fa:	0019      	movs	r1, r3
 80011fc:	b005      	add	sp, #20
 80011fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001200:	46bb      	mov	fp, r7
 8001202:	46b2      	mov	sl, r6
 8001204:	46a9      	mov	r9, r5
 8001206:	46a0      	mov	r8, r4
 8001208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120a:	2200      	movs	r2, #0
 800120c:	2500      	movs	r5, #0
 800120e:	4ba8      	ldr	r3, [pc, #672]	; (80014b0 <__aeabi_ddiv+0x370>)
 8001210:	e7ed      	b.n	80011ee <__aeabi_ddiv+0xae>
 8001212:	46ba      	mov	sl, r7
 8001214:	46a0      	mov	r8, r4
 8001216:	000d      	movs	r5, r1
 8001218:	9000      	str	r0, [sp, #0]
 800121a:	e7dc      	b.n	80011d6 <__aeabi_ddiv+0x96>
 800121c:	4544      	cmp	r4, r8
 800121e:	d200      	bcs.n	8001222 <__aeabi_ddiv+0xe2>
 8001220:	e1c4      	b.n	80015ac <__aeabi_ddiv+0x46c>
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0xe6>
 8001224:	e1bf      	b.n	80015a6 <__aeabi_ddiv+0x466>
 8001226:	2301      	movs	r3, #1
 8001228:	425b      	negs	r3, r3
 800122a:	469c      	mov	ip, r3
 800122c:	002e      	movs	r6, r5
 800122e:	4640      	mov	r0, r8
 8001230:	2500      	movs	r5, #0
 8001232:	44e3      	add	fp, ip
 8001234:	0223      	lsls	r3, r4, #8
 8001236:	0e0c      	lsrs	r4, r1, #24
 8001238:	431c      	orrs	r4, r3
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	4699      	mov	r9, r3
 800123e:	0423      	lsls	r3, r4, #16
 8001240:	020a      	lsls	r2, r1, #8
 8001242:	0c1f      	lsrs	r7, r3, #16
 8001244:	4649      	mov	r1, r9
 8001246:	9200      	str	r2, [sp, #0]
 8001248:	9701      	str	r7, [sp, #4]
 800124a:	f7fe ffff 	bl	800024c <__aeabi_uidivmod>
 800124e:	0002      	movs	r2, r0
 8001250:	437a      	muls	r2, r7
 8001252:	040b      	lsls	r3, r1, #16
 8001254:	0c31      	lsrs	r1, r6, #16
 8001256:	4680      	mov	r8, r0
 8001258:	4319      	orrs	r1, r3
 800125a:	428a      	cmp	r2, r1
 800125c:	d907      	bls.n	800126e <__aeabi_ddiv+0x12e>
 800125e:	2301      	movs	r3, #1
 8001260:	425b      	negs	r3, r3
 8001262:	469c      	mov	ip, r3
 8001264:	1909      	adds	r1, r1, r4
 8001266:	44e0      	add	r8, ip
 8001268:	428c      	cmp	r4, r1
 800126a:	d800      	bhi.n	800126e <__aeabi_ddiv+0x12e>
 800126c:	e201      	b.n	8001672 <__aeabi_ddiv+0x532>
 800126e:	1a88      	subs	r0, r1, r2
 8001270:	4649      	mov	r1, r9
 8001272:	f7fe ffeb 	bl	800024c <__aeabi_uidivmod>
 8001276:	9a01      	ldr	r2, [sp, #4]
 8001278:	0436      	lsls	r6, r6, #16
 800127a:	4342      	muls	r2, r0
 800127c:	0409      	lsls	r1, r1, #16
 800127e:	0c36      	lsrs	r6, r6, #16
 8001280:	0003      	movs	r3, r0
 8001282:	430e      	orrs	r6, r1
 8001284:	42b2      	cmp	r2, r6
 8001286:	d904      	bls.n	8001292 <__aeabi_ddiv+0x152>
 8001288:	1936      	adds	r6, r6, r4
 800128a:	3b01      	subs	r3, #1
 800128c:	42b4      	cmp	r4, r6
 800128e:	d800      	bhi.n	8001292 <__aeabi_ddiv+0x152>
 8001290:	e1e9      	b.n	8001666 <__aeabi_ddiv+0x526>
 8001292:	1ab0      	subs	r0, r6, r2
 8001294:	4642      	mov	r2, r8
 8001296:	9e00      	ldr	r6, [sp, #0]
 8001298:	0412      	lsls	r2, r2, #16
 800129a:	431a      	orrs	r2, r3
 800129c:	0c33      	lsrs	r3, r6, #16
 800129e:	001f      	movs	r7, r3
 80012a0:	0c11      	lsrs	r1, r2, #16
 80012a2:	4690      	mov	r8, r2
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	0413      	lsls	r3, r2, #16
 80012a8:	0432      	lsls	r2, r6, #16
 80012aa:	0c16      	lsrs	r6, r2, #16
 80012ac:	0032      	movs	r2, r6
 80012ae:	0c1b      	lsrs	r3, r3, #16
 80012b0:	435a      	muls	r2, r3
 80012b2:	9603      	str	r6, [sp, #12]
 80012b4:	437b      	muls	r3, r7
 80012b6:	434e      	muls	r6, r1
 80012b8:	4379      	muls	r1, r7
 80012ba:	0c17      	lsrs	r7, r2, #16
 80012bc:	46bc      	mov	ip, r7
 80012be:	199b      	adds	r3, r3, r6
 80012c0:	4463      	add	r3, ip
 80012c2:	429e      	cmp	r6, r3
 80012c4:	d903      	bls.n	80012ce <__aeabi_ddiv+0x18e>
 80012c6:	2680      	movs	r6, #128	; 0x80
 80012c8:	0276      	lsls	r6, r6, #9
 80012ca:	46b4      	mov	ip, r6
 80012cc:	4461      	add	r1, ip
 80012ce:	0c1e      	lsrs	r6, r3, #16
 80012d0:	1871      	adds	r1, r6, r1
 80012d2:	0416      	lsls	r6, r2, #16
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	0c36      	lsrs	r6, r6, #16
 80012d8:	199e      	adds	r6, r3, r6
 80012da:	4288      	cmp	r0, r1
 80012dc:	d302      	bcc.n	80012e4 <__aeabi_ddiv+0x1a4>
 80012de:	d112      	bne.n	8001306 <__aeabi_ddiv+0x1c6>
 80012e0:	42b5      	cmp	r5, r6
 80012e2:	d210      	bcs.n	8001306 <__aeabi_ddiv+0x1c6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	1e5a      	subs	r2, r3, #1
 80012e8:	9b00      	ldr	r3, [sp, #0]
 80012ea:	469c      	mov	ip, r3
 80012ec:	4465      	add	r5, ip
 80012ee:	001f      	movs	r7, r3
 80012f0:	429d      	cmp	r5, r3
 80012f2:	419b      	sbcs	r3, r3
 80012f4:	425b      	negs	r3, r3
 80012f6:	191b      	adds	r3, r3, r4
 80012f8:	18c0      	adds	r0, r0, r3
 80012fa:	4284      	cmp	r4, r0
 80012fc:	d200      	bcs.n	8001300 <__aeabi_ddiv+0x1c0>
 80012fe:	e19e      	b.n	800163e <__aeabi_ddiv+0x4fe>
 8001300:	d100      	bne.n	8001304 <__aeabi_ddiv+0x1c4>
 8001302:	e199      	b.n	8001638 <__aeabi_ddiv+0x4f8>
 8001304:	4690      	mov	r8, r2
 8001306:	1bae      	subs	r6, r5, r6
 8001308:	42b5      	cmp	r5, r6
 800130a:	41ad      	sbcs	r5, r5
 800130c:	1a40      	subs	r0, r0, r1
 800130e:	426d      	negs	r5, r5
 8001310:	1b40      	subs	r0, r0, r5
 8001312:	4284      	cmp	r4, r0
 8001314:	d100      	bne.n	8001318 <__aeabi_ddiv+0x1d8>
 8001316:	e1d2      	b.n	80016be <__aeabi_ddiv+0x57e>
 8001318:	4649      	mov	r1, r9
 800131a:	f7fe ff97 	bl	800024c <__aeabi_uidivmod>
 800131e:	9a01      	ldr	r2, [sp, #4]
 8001320:	040b      	lsls	r3, r1, #16
 8001322:	4342      	muls	r2, r0
 8001324:	0c31      	lsrs	r1, r6, #16
 8001326:	0005      	movs	r5, r0
 8001328:	4319      	orrs	r1, r3
 800132a:	428a      	cmp	r2, r1
 800132c:	d900      	bls.n	8001330 <__aeabi_ddiv+0x1f0>
 800132e:	e16c      	b.n	800160a <__aeabi_ddiv+0x4ca>
 8001330:	1a88      	subs	r0, r1, r2
 8001332:	4649      	mov	r1, r9
 8001334:	f7fe ff8a 	bl	800024c <__aeabi_uidivmod>
 8001338:	9a01      	ldr	r2, [sp, #4]
 800133a:	0436      	lsls	r6, r6, #16
 800133c:	4342      	muls	r2, r0
 800133e:	0409      	lsls	r1, r1, #16
 8001340:	0c36      	lsrs	r6, r6, #16
 8001342:	0003      	movs	r3, r0
 8001344:	430e      	orrs	r6, r1
 8001346:	42b2      	cmp	r2, r6
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x20c>
 800134a:	e153      	b.n	80015f4 <__aeabi_ddiv+0x4b4>
 800134c:	9803      	ldr	r0, [sp, #12]
 800134e:	1ab6      	subs	r6, r6, r2
 8001350:	0002      	movs	r2, r0
 8001352:	042d      	lsls	r5, r5, #16
 8001354:	431d      	orrs	r5, r3
 8001356:	9f02      	ldr	r7, [sp, #8]
 8001358:	042b      	lsls	r3, r5, #16
 800135a:	0c1b      	lsrs	r3, r3, #16
 800135c:	435a      	muls	r2, r3
 800135e:	437b      	muls	r3, r7
 8001360:	469c      	mov	ip, r3
 8001362:	0c29      	lsrs	r1, r5, #16
 8001364:	4348      	muls	r0, r1
 8001366:	0c13      	lsrs	r3, r2, #16
 8001368:	4484      	add	ip, r0
 800136a:	4463      	add	r3, ip
 800136c:	4379      	muls	r1, r7
 800136e:	4298      	cmp	r0, r3
 8001370:	d903      	bls.n	800137a <__aeabi_ddiv+0x23a>
 8001372:	2080      	movs	r0, #128	; 0x80
 8001374:	0240      	lsls	r0, r0, #9
 8001376:	4684      	mov	ip, r0
 8001378:	4461      	add	r1, ip
 800137a:	0c18      	lsrs	r0, r3, #16
 800137c:	0412      	lsls	r2, r2, #16
 800137e:	041b      	lsls	r3, r3, #16
 8001380:	0c12      	lsrs	r2, r2, #16
 8001382:	1840      	adds	r0, r0, r1
 8001384:	189b      	adds	r3, r3, r2
 8001386:	4286      	cmp	r6, r0
 8001388:	d200      	bcs.n	800138c <__aeabi_ddiv+0x24c>
 800138a:	e100      	b.n	800158e <__aeabi_ddiv+0x44e>
 800138c:	d100      	bne.n	8001390 <__aeabi_ddiv+0x250>
 800138e:	e0fb      	b.n	8001588 <__aeabi_ddiv+0x448>
 8001390:	2301      	movs	r3, #1
 8001392:	431d      	orrs	r5, r3
 8001394:	4b49      	ldr	r3, [pc, #292]	; (80014bc <__aeabi_ddiv+0x37c>)
 8001396:	445b      	add	r3, fp
 8001398:	2b00      	cmp	r3, #0
 800139a:	dc00      	bgt.n	800139e <__aeabi_ddiv+0x25e>
 800139c:	e0aa      	b.n	80014f4 <__aeabi_ddiv+0x3b4>
 800139e:	076a      	lsls	r2, r5, #29
 80013a0:	d000      	beq.n	80013a4 <__aeabi_ddiv+0x264>
 80013a2:	e13d      	b.n	8001620 <__aeabi_ddiv+0x4e0>
 80013a4:	08e9      	lsrs	r1, r5, #3
 80013a6:	4642      	mov	r2, r8
 80013a8:	01d2      	lsls	r2, r2, #7
 80013aa:	d506      	bpl.n	80013ba <__aeabi_ddiv+0x27a>
 80013ac:	4642      	mov	r2, r8
 80013ae:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <__aeabi_ddiv+0x380>)
 80013b0:	401a      	ands	r2, r3
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	4690      	mov	r8, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	445b      	add	r3, fp
 80013ba:	4a42      	ldr	r2, [pc, #264]	; (80014c4 <__aeabi_ddiv+0x384>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	dd00      	ble.n	80013c2 <__aeabi_ddiv+0x282>
 80013c0:	e723      	b.n	800120a <__aeabi_ddiv+0xca>
 80013c2:	4642      	mov	r2, r8
 80013c4:	055b      	lsls	r3, r3, #21
 80013c6:	0755      	lsls	r5, r2, #29
 80013c8:	0252      	lsls	r2, r2, #9
 80013ca:	430d      	orrs	r5, r1
 80013cc:	0b12      	lsrs	r2, r2, #12
 80013ce:	0d5b      	lsrs	r3, r3, #21
 80013d0:	e70d      	b.n	80011ee <__aeabi_ddiv+0xae>
 80013d2:	4651      	mov	r1, sl
 80013d4:	4321      	orrs	r1, r4
 80013d6:	d100      	bne.n	80013da <__aeabi_ddiv+0x29a>
 80013d8:	e07c      	b.n	80014d4 <__aeabi_ddiv+0x394>
 80013da:	2c00      	cmp	r4, #0
 80013dc:	d100      	bne.n	80013e0 <__aeabi_ddiv+0x2a0>
 80013de:	e0fb      	b.n	80015d8 <__aeabi_ddiv+0x498>
 80013e0:	0020      	movs	r0, r4
 80013e2:	f001 fa63 	bl	80028ac <__clzsi2>
 80013e6:	0002      	movs	r2, r0
 80013e8:	3a0b      	subs	r2, #11
 80013ea:	231d      	movs	r3, #29
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	4652      	mov	r2, sl
 80013f0:	0001      	movs	r1, r0
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	4653      	mov	r3, sl
 80013f6:	3908      	subs	r1, #8
 80013f8:	408b      	lsls	r3, r1
 80013fa:	408c      	lsls	r4, r1
 80013fc:	0019      	movs	r1, r3
 80013fe:	4314      	orrs	r4, r2
 8001400:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <__aeabi_ddiv+0x388>)
 8001402:	4458      	add	r0, fp
 8001404:	469b      	mov	fp, r3
 8001406:	4483      	add	fp, r0
 8001408:	2000      	movs	r0, #0
 800140a:	e6d9      	b.n	80011c0 <__aeabi_ddiv+0x80>
 800140c:	0003      	movs	r3, r0
 800140e:	4323      	orrs	r3, r4
 8001410:	4698      	mov	r8, r3
 8001412:	d044      	beq.n	800149e <__aeabi_ddiv+0x35e>
 8001414:	2c00      	cmp	r4, #0
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x2da>
 8001418:	e0cf      	b.n	80015ba <__aeabi_ddiv+0x47a>
 800141a:	0020      	movs	r0, r4
 800141c:	f001 fa46 	bl	80028ac <__clzsi2>
 8001420:	0001      	movs	r1, r0
 8001422:	0002      	movs	r2, r0
 8001424:	390b      	subs	r1, #11
 8001426:	231d      	movs	r3, #29
 8001428:	1a5b      	subs	r3, r3, r1
 800142a:	4649      	mov	r1, r9
 800142c:	0010      	movs	r0, r2
 800142e:	40d9      	lsrs	r1, r3
 8001430:	3808      	subs	r0, #8
 8001432:	4084      	lsls	r4, r0
 8001434:	000b      	movs	r3, r1
 8001436:	464d      	mov	r5, r9
 8001438:	4323      	orrs	r3, r4
 800143a:	4698      	mov	r8, r3
 800143c:	4085      	lsls	r5, r0
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <__aeabi_ddiv+0x38c>)
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	469b      	mov	fp, r3
 8001444:	2300      	movs	r3, #0
 8001446:	4699      	mov	r9, r3
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	e69e      	b.n	800118a <__aeabi_ddiv+0x4a>
 800144c:	0002      	movs	r2, r0
 800144e:	4322      	orrs	r2, r4
 8001450:	4690      	mov	r8, r2
 8001452:	d11d      	bne.n	8001490 <__aeabi_ddiv+0x350>
 8001454:	2208      	movs	r2, #8
 8001456:	469b      	mov	fp, r3
 8001458:	2302      	movs	r3, #2
 800145a:	2500      	movs	r5, #0
 800145c:	4691      	mov	r9, r2
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	e693      	b.n	800118a <__aeabi_ddiv+0x4a>
 8001462:	4651      	mov	r1, sl
 8001464:	4321      	orrs	r1, r4
 8001466:	d109      	bne.n	800147c <__aeabi_ddiv+0x33c>
 8001468:	2302      	movs	r3, #2
 800146a:	464a      	mov	r2, r9
 800146c:	431a      	orrs	r2, r3
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <__aeabi_ddiv+0x390>)
 8001470:	4691      	mov	r9, r2
 8001472:	469c      	mov	ip, r3
 8001474:	2400      	movs	r4, #0
 8001476:	2002      	movs	r0, #2
 8001478:	44e3      	add	fp, ip
 800147a:	e6a1      	b.n	80011c0 <__aeabi_ddiv+0x80>
 800147c:	2303      	movs	r3, #3
 800147e:	464a      	mov	r2, r9
 8001480:	431a      	orrs	r2, r3
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <__aeabi_ddiv+0x390>)
 8001484:	4691      	mov	r9, r2
 8001486:	469c      	mov	ip, r3
 8001488:	4651      	mov	r1, sl
 800148a:	2003      	movs	r0, #3
 800148c:	44e3      	add	fp, ip
 800148e:	e697      	b.n	80011c0 <__aeabi_ddiv+0x80>
 8001490:	220c      	movs	r2, #12
 8001492:	469b      	mov	fp, r3
 8001494:	2303      	movs	r3, #3
 8001496:	46a0      	mov	r8, r4
 8001498:	4691      	mov	r9, r2
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	e675      	b.n	800118a <__aeabi_ddiv+0x4a>
 800149e:	2304      	movs	r3, #4
 80014a0:	4699      	mov	r9, r3
 80014a2:	2300      	movs	r3, #0
 80014a4:	469b      	mov	fp, r3
 80014a6:	3301      	adds	r3, #1
 80014a8:	2500      	movs	r5, #0
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	e66d      	b.n	800118a <__aeabi_ddiv+0x4a>
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	000007ff 	.word	0x000007ff
 80014b4:	fffffc01 	.word	0xfffffc01
 80014b8:	0800dff0 	.word	0x0800dff0
 80014bc:	000003ff 	.word	0x000003ff
 80014c0:	feffffff 	.word	0xfeffffff
 80014c4:	000007fe 	.word	0x000007fe
 80014c8:	000003f3 	.word	0x000003f3
 80014cc:	fffffc0d 	.word	0xfffffc0d
 80014d0:	fffff801 	.word	0xfffff801
 80014d4:	464a      	mov	r2, r9
 80014d6:	2301      	movs	r3, #1
 80014d8:	431a      	orrs	r2, r3
 80014da:	4691      	mov	r9, r2
 80014dc:	2400      	movs	r4, #0
 80014de:	2001      	movs	r0, #1
 80014e0:	e66e      	b.n	80011c0 <__aeabi_ddiv+0x80>
 80014e2:	2300      	movs	r3, #0
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	469a      	mov	sl, r3
 80014e8:	2500      	movs	r5, #0
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <__aeabi_ddiv+0x5cc>)
 80014ec:	0312      	lsls	r2, r2, #12
 80014ee:	e67e      	b.n	80011ee <__aeabi_ddiv+0xae>
 80014f0:	2501      	movs	r5, #1
 80014f2:	426d      	negs	r5, r5
 80014f4:	2201      	movs	r2, #1
 80014f6:	1ad2      	subs	r2, r2, r3
 80014f8:	2a38      	cmp	r2, #56	; 0x38
 80014fa:	dd00      	ble.n	80014fe <__aeabi_ddiv+0x3be>
 80014fc:	e674      	b.n	80011e8 <__aeabi_ddiv+0xa8>
 80014fe:	2a1f      	cmp	r2, #31
 8001500:	dc00      	bgt.n	8001504 <__aeabi_ddiv+0x3c4>
 8001502:	e0bd      	b.n	8001680 <__aeabi_ddiv+0x540>
 8001504:	211f      	movs	r1, #31
 8001506:	4249      	negs	r1, r1
 8001508:	1acb      	subs	r3, r1, r3
 800150a:	4641      	mov	r1, r8
 800150c:	40d9      	lsrs	r1, r3
 800150e:	000b      	movs	r3, r1
 8001510:	2a20      	cmp	r2, #32
 8001512:	d004      	beq.n	800151e <__aeabi_ddiv+0x3de>
 8001514:	4641      	mov	r1, r8
 8001516:	4a7e      	ldr	r2, [pc, #504]	; (8001710 <__aeabi_ddiv+0x5d0>)
 8001518:	445a      	add	r2, fp
 800151a:	4091      	lsls	r1, r2
 800151c:	430d      	orrs	r5, r1
 800151e:	0029      	movs	r1, r5
 8001520:	1e4a      	subs	r2, r1, #1
 8001522:	4191      	sbcs	r1, r2
 8001524:	4319      	orrs	r1, r3
 8001526:	2307      	movs	r3, #7
 8001528:	001d      	movs	r5, r3
 800152a:	2200      	movs	r2, #0
 800152c:	400d      	ands	r5, r1
 800152e:	420b      	tst	r3, r1
 8001530:	d100      	bne.n	8001534 <__aeabi_ddiv+0x3f4>
 8001532:	e0d0      	b.n	80016d6 <__aeabi_ddiv+0x596>
 8001534:	220f      	movs	r2, #15
 8001536:	2300      	movs	r3, #0
 8001538:	400a      	ands	r2, r1
 800153a:	2a04      	cmp	r2, #4
 800153c:	d100      	bne.n	8001540 <__aeabi_ddiv+0x400>
 800153e:	e0c7      	b.n	80016d0 <__aeabi_ddiv+0x590>
 8001540:	1d0a      	adds	r2, r1, #4
 8001542:	428a      	cmp	r2, r1
 8001544:	4189      	sbcs	r1, r1
 8001546:	4249      	negs	r1, r1
 8001548:	185b      	adds	r3, r3, r1
 800154a:	0011      	movs	r1, r2
 800154c:	021a      	lsls	r2, r3, #8
 800154e:	d400      	bmi.n	8001552 <__aeabi_ddiv+0x412>
 8001550:	e0be      	b.n	80016d0 <__aeabi_ddiv+0x590>
 8001552:	2301      	movs	r3, #1
 8001554:	2200      	movs	r2, #0
 8001556:	2500      	movs	r5, #0
 8001558:	e649      	b.n	80011ee <__aeabi_ddiv+0xae>
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	4643      	mov	r3, r8
 800155e:	0312      	lsls	r2, r2, #12
 8001560:	4213      	tst	r3, r2
 8001562:	d008      	beq.n	8001576 <__aeabi_ddiv+0x436>
 8001564:	4214      	tst	r4, r2
 8001566:	d106      	bne.n	8001576 <__aeabi_ddiv+0x436>
 8001568:	4322      	orrs	r2, r4
 800156a:	0312      	lsls	r2, r2, #12
 800156c:	46ba      	mov	sl, r7
 800156e:	000d      	movs	r5, r1
 8001570:	4b66      	ldr	r3, [pc, #408]	; (800170c <__aeabi_ddiv+0x5cc>)
 8001572:	0b12      	lsrs	r2, r2, #12
 8001574:	e63b      	b.n	80011ee <__aeabi_ddiv+0xae>
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	4643      	mov	r3, r8
 800157a:	0312      	lsls	r2, r2, #12
 800157c:	431a      	orrs	r2, r3
 800157e:	0312      	lsls	r2, r2, #12
 8001580:	46b2      	mov	sl, r6
 8001582:	4b62      	ldr	r3, [pc, #392]	; (800170c <__aeabi_ddiv+0x5cc>)
 8001584:	0b12      	lsrs	r2, r2, #12
 8001586:	e632      	b.n	80011ee <__aeabi_ddiv+0xae>
 8001588:	2b00      	cmp	r3, #0
 800158a:	d100      	bne.n	800158e <__aeabi_ddiv+0x44e>
 800158c:	e702      	b.n	8001394 <__aeabi_ddiv+0x254>
 800158e:	19a6      	adds	r6, r4, r6
 8001590:	1e6a      	subs	r2, r5, #1
 8001592:	42a6      	cmp	r6, r4
 8001594:	d200      	bcs.n	8001598 <__aeabi_ddiv+0x458>
 8001596:	e089      	b.n	80016ac <__aeabi_ddiv+0x56c>
 8001598:	4286      	cmp	r6, r0
 800159a:	d200      	bcs.n	800159e <__aeabi_ddiv+0x45e>
 800159c:	e09f      	b.n	80016de <__aeabi_ddiv+0x59e>
 800159e:	d100      	bne.n	80015a2 <__aeabi_ddiv+0x462>
 80015a0:	e0af      	b.n	8001702 <__aeabi_ddiv+0x5c2>
 80015a2:	0015      	movs	r5, r2
 80015a4:	e6f4      	b.n	8001390 <__aeabi_ddiv+0x250>
 80015a6:	42a9      	cmp	r1, r5
 80015a8:	d900      	bls.n	80015ac <__aeabi_ddiv+0x46c>
 80015aa:	e63c      	b.n	8001226 <__aeabi_ddiv+0xe6>
 80015ac:	4643      	mov	r3, r8
 80015ae:	07de      	lsls	r6, r3, #31
 80015b0:	0858      	lsrs	r0, r3, #1
 80015b2:	086b      	lsrs	r3, r5, #1
 80015b4:	431e      	orrs	r6, r3
 80015b6:	07ed      	lsls	r5, r5, #31
 80015b8:	e63c      	b.n	8001234 <__aeabi_ddiv+0xf4>
 80015ba:	f001 f977 	bl	80028ac <__clzsi2>
 80015be:	0001      	movs	r1, r0
 80015c0:	0002      	movs	r2, r0
 80015c2:	3115      	adds	r1, #21
 80015c4:	3220      	adds	r2, #32
 80015c6:	291c      	cmp	r1, #28
 80015c8:	dc00      	bgt.n	80015cc <__aeabi_ddiv+0x48c>
 80015ca:	e72c      	b.n	8001426 <__aeabi_ddiv+0x2e6>
 80015cc:	464b      	mov	r3, r9
 80015ce:	3808      	subs	r0, #8
 80015d0:	4083      	lsls	r3, r0
 80015d2:	2500      	movs	r5, #0
 80015d4:	4698      	mov	r8, r3
 80015d6:	e732      	b.n	800143e <__aeabi_ddiv+0x2fe>
 80015d8:	f001 f968 	bl	80028ac <__clzsi2>
 80015dc:	0003      	movs	r3, r0
 80015de:	001a      	movs	r2, r3
 80015e0:	3215      	adds	r2, #21
 80015e2:	3020      	adds	r0, #32
 80015e4:	2a1c      	cmp	r2, #28
 80015e6:	dc00      	bgt.n	80015ea <__aeabi_ddiv+0x4aa>
 80015e8:	e6ff      	b.n	80013ea <__aeabi_ddiv+0x2aa>
 80015ea:	4654      	mov	r4, sl
 80015ec:	3b08      	subs	r3, #8
 80015ee:	2100      	movs	r1, #0
 80015f0:	409c      	lsls	r4, r3
 80015f2:	e705      	b.n	8001400 <__aeabi_ddiv+0x2c0>
 80015f4:	1936      	adds	r6, r6, r4
 80015f6:	3b01      	subs	r3, #1
 80015f8:	42b4      	cmp	r4, r6
 80015fa:	d900      	bls.n	80015fe <__aeabi_ddiv+0x4be>
 80015fc:	e6a6      	b.n	800134c <__aeabi_ddiv+0x20c>
 80015fe:	42b2      	cmp	r2, r6
 8001600:	d800      	bhi.n	8001604 <__aeabi_ddiv+0x4c4>
 8001602:	e6a3      	b.n	800134c <__aeabi_ddiv+0x20c>
 8001604:	1e83      	subs	r3, r0, #2
 8001606:	1936      	adds	r6, r6, r4
 8001608:	e6a0      	b.n	800134c <__aeabi_ddiv+0x20c>
 800160a:	1909      	adds	r1, r1, r4
 800160c:	3d01      	subs	r5, #1
 800160e:	428c      	cmp	r4, r1
 8001610:	d900      	bls.n	8001614 <__aeabi_ddiv+0x4d4>
 8001612:	e68d      	b.n	8001330 <__aeabi_ddiv+0x1f0>
 8001614:	428a      	cmp	r2, r1
 8001616:	d800      	bhi.n	800161a <__aeabi_ddiv+0x4da>
 8001618:	e68a      	b.n	8001330 <__aeabi_ddiv+0x1f0>
 800161a:	1e85      	subs	r5, r0, #2
 800161c:	1909      	adds	r1, r1, r4
 800161e:	e687      	b.n	8001330 <__aeabi_ddiv+0x1f0>
 8001620:	220f      	movs	r2, #15
 8001622:	402a      	ands	r2, r5
 8001624:	2a04      	cmp	r2, #4
 8001626:	d100      	bne.n	800162a <__aeabi_ddiv+0x4ea>
 8001628:	e6bc      	b.n	80013a4 <__aeabi_ddiv+0x264>
 800162a:	1d29      	adds	r1, r5, #4
 800162c:	42a9      	cmp	r1, r5
 800162e:	41ad      	sbcs	r5, r5
 8001630:	426d      	negs	r5, r5
 8001632:	08c9      	lsrs	r1, r1, #3
 8001634:	44a8      	add	r8, r5
 8001636:	e6b6      	b.n	80013a6 <__aeabi_ddiv+0x266>
 8001638:	42af      	cmp	r7, r5
 800163a:	d900      	bls.n	800163e <__aeabi_ddiv+0x4fe>
 800163c:	e662      	b.n	8001304 <__aeabi_ddiv+0x1c4>
 800163e:	4281      	cmp	r1, r0
 8001640:	d804      	bhi.n	800164c <__aeabi_ddiv+0x50c>
 8001642:	d000      	beq.n	8001646 <__aeabi_ddiv+0x506>
 8001644:	e65e      	b.n	8001304 <__aeabi_ddiv+0x1c4>
 8001646:	42ae      	cmp	r6, r5
 8001648:	d800      	bhi.n	800164c <__aeabi_ddiv+0x50c>
 800164a:	e65b      	b.n	8001304 <__aeabi_ddiv+0x1c4>
 800164c:	2302      	movs	r3, #2
 800164e:	425b      	negs	r3, r3
 8001650:	469c      	mov	ip, r3
 8001652:	9b00      	ldr	r3, [sp, #0]
 8001654:	44e0      	add	r8, ip
 8001656:	469c      	mov	ip, r3
 8001658:	4465      	add	r5, ip
 800165a:	429d      	cmp	r5, r3
 800165c:	419b      	sbcs	r3, r3
 800165e:	425b      	negs	r3, r3
 8001660:	191b      	adds	r3, r3, r4
 8001662:	18c0      	adds	r0, r0, r3
 8001664:	e64f      	b.n	8001306 <__aeabi_ddiv+0x1c6>
 8001666:	42b2      	cmp	r2, r6
 8001668:	d800      	bhi.n	800166c <__aeabi_ddiv+0x52c>
 800166a:	e612      	b.n	8001292 <__aeabi_ddiv+0x152>
 800166c:	1e83      	subs	r3, r0, #2
 800166e:	1936      	adds	r6, r6, r4
 8001670:	e60f      	b.n	8001292 <__aeabi_ddiv+0x152>
 8001672:	428a      	cmp	r2, r1
 8001674:	d800      	bhi.n	8001678 <__aeabi_ddiv+0x538>
 8001676:	e5fa      	b.n	800126e <__aeabi_ddiv+0x12e>
 8001678:	1e83      	subs	r3, r0, #2
 800167a:	4698      	mov	r8, r3
 800167c:	1909      	adds	r1, r1, r4
 800167e:	e5f6      	b.n	800126e <__aeabi_ddiv+0x12e>
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <__aeabi_ddiv+0x5d4>)
 8001682:	0028      	movs	r0, r5
 8001684:	445b      	add	r3, fp
 8001686:	4641      	mov	r1, r8
 8001688:	409d      	lsls	r5, r3
 800168a:	4099      	lsls	r1, r3
 800168c:	40d0      	lsrs	r0, r2
 800168e:	1e6b      	subs	r3, r5, #1
 8001690:	419d      	sbcs	r5, r3
 8001692:	4643      	mov	r3, r8
 8001694:	4301      	orrs	r1, r0
 8001696:	4329      	orrs	r1, r5
 8001698:	40d3      	lsrs	r3, r2
 800169a:	074a      	lsls	r2, r1, #29
 800169c:	d100      	bne.n	80016a0 <__aeabi_ddiv+0x560>
 800169e:	e755      	b.n	800154c <__aeabi_ddiv+0x40c>
 80016a0:	220f      	movs	r2, #15
 80016a2:	400a      	ands	r2, r1
 80016a4:	2a04      	cmp	r2, #4
 80016a6:	d000      	beq.n	80016aa <__aeabi_ddiv+0x56a>
 80016a8:	e74a      	b.n	8001540 <__aeabi_ddiv+0x400>
 80016aa:	e74f      	b.n	800154c <__aeabi_ddiv+0x40c>
 80016ac:	0015      	movs	r5, r2
 80016ae:	4286      	cmp	r6, r0
 80016b0:	d000      	beq.n	80016b4 <__aeabi_ddiv+0x574>
 80016b2:	e66d      	b.n	8001390 <__aeabi_ddiv+0x250>
 80016b4:	9a00      	ldr	r2, [sp, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d000      	beq.n	80016bc <__aeabi_ddiv+0x57c>
 80016ba:	e669      	b.n	8001390 <__aeabi_ddiv+0x250>
 80016bc:	e66a      	b.n	8001394 <__aeabi_ddiv+0x254>
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <__aeabi_ddiv+0x5d8>)
 80016c0:	445b      	add	r3, fp
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	dc00      	bgt.n	80016c8 <__aeabi_ddiv+0x588>
 80016c6:	e713      	b.n	80014f0 <__aeabi_ddiv+0x3b0>
 80016c8:	2501      	movs	r5, #1
 80016ca:	2100      	movs	r1, #0
 80016cc:	44a8      	add	r8, r5
 80016ce:	e66a      	b.n	80013a6 <__aeabi_ddiv+0x266>
 80016d0:	075d      	lsls	r5, r3, #29
 80016d2:	025b      	lsls	r3, r3, #9
 80016d4:	0b1a      	lsrs	r2, r3, #12
 80016d6:	08c9      	lsrs	r1, r1, #3
 80016d8:	2300      	movs	r3, #0
 80016da:	430d      	orrs	r5, r1
 80016dc:	e587      	b.n	80011ee <__aeabi_ddiv+0xae>
 80016de:	9900      	ldr	r1, [sp, #0]
 80016e0:	3d02      	subs	r5, #2
 80016e2:	004a      	lsls	r2, r1, #1
 80016e4:	428a      	cmp	r2, r1
 80016e6:	41bf      	sbcs	r7, r7
 80016e8:	427f      	negs	r7, r7
 80016ea:	193f      	adds	r7, r7, r4
 80016ec:	19f6      	adds	r6, r6, r7
 80016ee:	9200      	str	r2, [sp, #0]
 80016f0:	e7dd      	b.n	80016ae <__aeabi_ddiv+0x56e>
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	4643      	mov	r3, r8
 80016f6:	0312      	lsls	r2, r2, #12
 80016f8:	431a      	orrs	r2, r3
 80016fa:	0312      	lsls	r2, r2, #12
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <__aeabi_ddiv+0x5cc>)
 80016fe:	0b12      	lsrs	r2, r2, #12
 8001700:	e575      	b.n	80011ee <__aeabi_ddiv+0xae>
 8001702:	9900      	ldr	r1, [sp, #0]
 8001704:	4299      	cmp	r1, r3
 8001706:	d3ea      	bcc.n	80016de <__aeabi_ddiv+0x59e>
 8001708:	0015      	movs	r5, r2
 800170a:	e7d3      	b.n	80016b4 <__aeabi_ddiv+0x574>
 800170c:	000007ff 	.word	0x000007ff
 8001710:	0000043e 	.word	0x0000043e
 8001714:	0000041e 	.word	0x0000041e
 8001718:	000003ff 	.word	0x000003ff

0800171c <__eqdf2>:
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	464e      	mov	r6, r9
 8001720:	4645      	mov	r5, r8
 8001722:	46de      	mov	lr, fp
 8001724:	4657      	mov	r7, sl
 8001726:	4690      	mov	r8, r2
 8001728:	b5e0      	push	{r5, r6, r7, lr}
 800172a:	0017      	movs	r7, r2
 800172c:	031a      	lsls	r2, r3, #12
 800172e:	0b12      	lsrs	r2, r2, #12
 8001730:	0005      	movs	r5, r0
 8001732:	4684      	mov	ip, r0
 8001734:	4819      	ldr	r0, [pc, #100]	; (800179c <__eqdf2+0x80>)
 8001736:	030e      	lsls	r6, r1, #12
 8001738:	004c      	lsls	r4, r1, #1
 800173a:	4691      	mov	r9, r2
 800173c:	005a      	lsls	r2, r3, #1
 800173e:	0fdb      	lsrs	r3, r3, #31
 8001740:	469b      	mov	fp, r3
 8001742:	0b36      	lsrs	r6, r6, #12
 8001744:	0d64      	lsrs	r4, r4, #21
 8001746:	0fc9      	lsrs	r1, r1, #31
 8001748:	0d52      	lsrs	r2, r2, #21
 800174a:	4284      	cmp	r4, r0
 800174c:	d019      	beq.n	8001782 <__eqdf2+0x66>
 800174e:	4282      	cmp	r2, r0
 8001750:	d010      	beq.n	8001774 <__eqdf2+0x58>
 8001752:	2001      	movs	r0, #1
 8001754:	4294      	cmp	r4, r2
 8001756:	d10e      	bne.n	8001776 <__eqdf2+0x5a>
 8001758:	454e      	cmp	r6, r9
 800175a:	d10c      	bne.n	8001776 <__eqdf2+0x5a>
 800175c:	2001      	movs	r0, #1
 800175e:	45c4      	cmp	ip, r8
 8001760:	d109      	bne.n	8001776 <__eqdf2+0x5a>
 8001762:	4559      	cmp	r1, fp
 8001764:	d017      	beq.n	8001796 <__eqdf2+0x7a>
 8001766:	2c00      	cmp	r4, #0
 8001768:	d105      	bne.n	8001776 <__eqdf2+0x5a>
 800176a:	0030      	movs	r0, r6
 800176c:	4328      	orrs	r0, r5
 800176e:	1e43      	subs	r3, r0, #1
 8001770:	4198      	sbcs	r0, r3
 8001772:	e000      	b.n	8001776 <__eqdf2+0x5a>
 8001774:	2001      	movs	r0, #1
 8001776:	bcf0      	pop	{r4, r5, r6, r7}
 8001778:	46bb      	mov	fp, r7
 800177a:	46b2      	mov	sl, r6
 800177c:	46a9      	mov	r9, r5
 800177e:	46a0      	mov	r8, r4
 8001780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001782:	0033      	movs	r3, r6
 8001784:	2001      	movs	r0, #1
 8001786:	432b      	orrs	r3, r5
 8001788:	d1f5      	bne.n	8001776 <__eqdf2+0x5a>
 800178a:	42a2      	cmp	r2, r4
 800178c:	d1f3      	bne.n	8001776 <__eqdf2+0x5a>
 800178e:	464b      	mov	r3, r9
 8001790:	433b      	orrs	r3, r7
 8001792:	d1f0      	bne.n	8001776 <__eqdf2+0x5a>
 8001794:	e7e2      	b.n	800175c <__eqdf2+0x40>
 8001796:	2000      	movs	r0, #0
 8001798:	e7ed      	b.n	8001776 <__eqdf2+0x5a>
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	000007ff 	.word	0x000007ff

080017a0 <__gedf2>:
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	4647      	mov	r7, r8
 80017a4:	46ce      	mov	lr, r9
 80017a6:	0004      	movs	r4, r0
 80017a8:	0018      	movs	r0, r3
 80017aa:	0016      	movs	r6, r2
 80017ac:	031b      	lsls	r3, r3, #12
 80017ae:	0b1b      	lsrs	r3, r3, #12
 80017b0:	4d2d      	ldr	r5, [pc, #180]	; (8001868 <__gedf2+0xc8>)
 80017b2:	004a      	lsls	r2, r1, #1
 80017b4:	4699      	mov	r9, r3
 80017b6:	b580      	push	{r7, lr}
 80017b8:	0043      	lsls	r3, r0, #1
 80017ba:	030f      	lsls	r7, r1, #12
 80017bc:	46a4      	mov	ip, r4
 80017be:	46b0      	mov	r8, r6
 80017c0:	0b3f      	lsrs	r7, r7, #12
 80017c2:	0d52      	lsrs	r2, r2, #21
 80017c4:	0fc9      	lsrs	r1, r1, #31
 80017c6:	0d5b      	lsrs	r3, r3, #21
 80017c8:	0fc0      	lsrs	r0, r0, #31
 80017ca:	42aa      	cmp	r2, r5
 80017cc:	d021      	beq.n	8001812 <__gedf2+0x72>
 80017ce:	42ab      	cmp	r3, r5
 80017d0:	d013      	beq.n	80017fa <__gedf2+0x5a>
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d122      	bne.n	800181c <__gedf2+0x7c>
 80017d6:	433c      	orrs	r4, r7
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <__gedf2+0x42>
 80017dc:	464d      	mov	r5, r9
 80017de:	432e      	orrs	r6, r5
 80017e0:	d022      	beq.n	8001828 <__gedf2+0x88>
 80017e2:	2c00      	cmp	r4, #0
 80017e4:	d010      	beq.n	8001808 <__gedf2+0x68>
 80017e6:	4281      	cmp	r1, r0
 80017e8:	d022      	beq.n	8001830 <__gedf2+0x90>
 80017ea:	2002      	movs	r0, #2
 80017ec:	3901      	subs	r1, #1
 80017ee:	4008      	ands	r0, r1
 80017f0:	3801      	subs	r0, #1
 80017f2:	bcc0      	pop	{r6, r7}
 80017f4:	46b9      	mov	r9, r7
 80017f6:	46b0      	mov	r8, r6
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fa:	464d      	mov	r5, r9
 80017fc:	432e      	orrs	r6, r5
 80017fe:	d129      	bne.n	8001854 <__gedf2+0xb4>
 8001800:	2a00      	cmp	r2, #0
 8001802:	d1f0      	bne.n	80017e6 <__gedf2+0x46>
 8001804:	433c      	orrs	r4, r7
 8001806:	d1ee      	bne.n	80017e6 <__gedf2+0x46>
 8001808:	2800      	cmp	r0, #0
 800180a:	d1f2      	bne.n	80017f2 <__gedf2+0x52>
 800180c:	2001      	movs	r0, #1
 800180e:	4240      	negs	r0, r0
 8001810:	e7ef      	b.n	80017f2 <__gedf2+0x52>
 8001812:	003d      	movs	r5, r7
 8001814:	4325      	orrs	r5, r4
 8001816:	d11d      	bne.n	8001854 <__gedf2+0xb4>
 8001818:	4293      	cmp	r3, r2
 800181a:	d0ee      	beq.n	80017fa <__gedf2+0x5a>
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e2      	bne.n	80017e6 <__gedf2+0x46>
 8001820:	464c      	mov	r4, r9
 8001822:	4326      	orrs	r6, r4
 8001824:	d1df      	bne.n	80017e6 <__gedf2+0x46>
 8001826:	e7e0      	b.n	80017ea <__gedf2+0x4a>
 8001828:	2000      	movs	r0, #0
 800182a:	2c00      	cmp	r4, #0
 800182c:	d0e1      	beq.n	80017f2 <__gedf2+0x52>
 800182e:	e7dc      	b.n	80017ea <__gedf2+0x4a>
 8001830:	429a      	cmp	r2, r3
 8001832:	dc0a      	bgt.n	800184a <__gedf2+0xaa>
 8001834:	dbe8      	blt.n	8001808 <__gedf2+0x68>
 8001836:	454f      	cmp	r7, r9
 8001838:	d8d7      	bhi.n	80017ea <__gedf2+0x4a>
 800183a:	d00e      	beq.n	800185a <__gedf2+0xba>
 800183c:	2000      	movs	r0, #0
 800183e:	454f      	cmp	r7, r9
 8001840:	d2d7      	bcs.n	80017f2 <__gedf2+0x52>
 8001842:	2900      	cmp	r1, #0
 8001844:	d0e2      	beq.n	800180c <__gedf2+0x6c>
 8001846:	0008      	movs	r0, r1
 8001848:	e7d3      	b.n	80017f2 <__gedf2+0x52>
 800184a:	4243      	negs	r3, r0
 800184c:	4158      	adcs	r0, r3
 800184e:	0040      	lsls	r0, r0, #1
 8001850:	3801      	subs	r0, #1
 8001852:	e7ce      	b.n	80017f2 <__gedf2+0x52>
 8001854:	2002      	movs	r0, #2
 8001856:	4240      	negs	r0, r0
 8001858:	e7cb      	b.n	80017f2 <__gedf2+0x52>
 800185a:	45c4      	cmp	ip, r8
 800185c:	d8c5      	bhi.n	80017ea <__gedf2+0x4a>
 800185e:	2000      	movs	r0, #0
 8001860:	45c4      	cmp	ip, r8
 8001862:	d2c6      	bcs.n	80017f2 <__gedf2+0x52>
 8001864:	e7ed      	b.n	8001842 <__gedf2+0xa2>
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	000007ff 	.word	0x000007ff

0800186c <__ledf2>:
 800186c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186e:	4647      	mov	r7, r8
 8001870:	46ce      	mov	lr, r9
 8001872:	0004      	movs	r4, r0
 8001874:	0018      	movs	r0, r3
 8001876:	0016      	movs	r6, r2
 8001878:	031b      	lsls	r3, r3, #12
 800187a:	0b1b      	lsrs	r3, r3, #12
 800187c:	4d2c      	ldr	r5, [pc, #176]	; (8001930 <__ledf2+0xc4>)
 800187e:	004a      	lsls	r2, r1, #1
 8001880:	4699      	mov	r9, r3
 8001882:	b580      	push	{r7, lr}
 8001884:	0043      	lsls	r3, r0, #1
 8001886:	030f      	lsls	r7, r1, #12
 8001888:	46a4      	mov	ip, r4
 800188a:	46b0      	mov	r8, r6
 800188c:	0b3f      	lsrs	r7, r7, #12
 800188e:	0d52      	lsrs	r2, r2, #21
 8001890:	0fc9      	lsrs	r1, r1, #31
 8001892:	0d5b      	lsrs	r3, r3, #21
 8001894:	0fc0      	lsrs	r0, r0, #31
 8001896:	42aa      	cmp	r2, r5
 8001898:	d00d      	beq.n	80018b6 <__ledf2+0x4a>
 800189a:	42ab      	cmp	r3, r5
 800189c:	d010      	beq.n	80018c0 <__ledf2+0x54>
 800189e:	2a00      	cmp	r2, #0
 80018a0:	d127      	bne.n	80018f2 <__ledf2+0x86>
 80018a2:	433c      	orrs	r4, r7
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d111      	bne.n	80018cc <__ledf2+0x60>
 80018a8:	464d      	mov	r5, r9
 80018aa:	432e      	orrs	r6, r5
 80018ac:	d10e      	bne.n	80018cc <__ledf2+0x60>
 80018ae:	2000      	movs	r0, #0
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	d015      	beq.n	80018e0 <__ledf2+0x74>
 80018b4:	e00e      	b.n	80018d4 <__ledf2+0x68>
 80018b6:	003d      	movs	r5, r7
 80018b8:	4325      	orrs	r5, r4
 80018ba:	d110      	bne.n	80018de <__ledf2+0x72>
 80018bc:	4293      	cmp	r3, r2
 80018be:	d118      	bne.n	80018f2 <__ledf2+0x86>
 80018c0:	464d      	mov	r5, r9
 80018c2:	432e      	orrs	r6, r5
 80018c4:	d10b      	bne.n	80018de <__ledf2+0x72>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d102      	bne.n	80018d0 <__ledf2+0x64>
 80018ca:	433c      	orrs	r4, r7
 80018cc:	2c00      	cmp	r4, #0
 80018ce:	d00b      	beq.n	80018e8 <__ledf2+0x7c>
 80018d0:	4281      	cmp	r1, r0
 80018d2:	d014      	beq.n	80018fe <__ledf2+0x92>
 80018d4:	2002      	movs	r0, #2
 80018d6:	3901      	subs	r1, #1
 80018d8:	4008      	ands	r0, r1
 80018da:	3801      	subs	r0, #1
 80018dc:	e000      	b.n	80018e0 <__ledf2+0x74>
 80018de:	2002      	movs	r0, #2
 80018e0:	bcc0      	pop	{r6, r7}
 80018e2:	46b9      	mov	r9, r7
 80018e4:	46b0      	mov	r8, r6
 80018e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d1f9      	bne.n	80018e0 <__ledf2+0x74>
 80018ec:	2001      	movs	r0, #1
 80018ee:	4240      	negs	r0, r0
 80018f0:	e7f6      	b.n	80018e0 <__ledf2+0x74>
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1ec      	bne.n	80018d0 <__ledf2+0x64>
 80018f6:	464c      	mov	r4, r9
 80018f8:	4326      	orrs	r6, r4
 80018fa:	d1e9      	bne.n	80018d0 <__ledf2+0x64>
 80018fc:	e7ea      	b.n	80018d4 <__ledf2+0x68>
 80018fe:	429a      	cmp	r2, r3
 8001900:	dd04      	ble.n	800190c <__ledf2+0xa0>
 8001902:	4243      	negs	r3, r0
 8001904:	4158      	adcs	r0, r3
 8001906:	0040      	lsls	r0, r0, #1
 8001908:	3801      	subs	r0, #1
 800190a:	e7e9      	b.n	80018e0 <__ledf2+0x74>
 800190c:	429a      	cmp	r2, r3
 800190e:	dbeb      	blt.n	80018e8 <__ledf2+0x7c>
 8001910:	454f      	cmp	r7, r9
 8001912:	d8df      	bhi.n	80018d4 <__ledf2+0x68>
 8001914:	d006      	beq.n	8001924 <__ledf2+0xb8>
 8001916:	2000      	movs	r0, #0
 8001918:	454f      	cmp	r7, r9
 800191a:	d2e1      	bcs.n	80018e0 <__ledf2+0x74>
 800191c:	2900      	cmp	r1, #0
 800191e:	d0e5      	beq.n	80018ec <__ledf2+0x80>
 8001920:	0008      	movs	r0, r1
 8001922:	e7dd      	b.n	80018e0 <__ledf2+0x74>
 8001924:	45c4      	cmp	ip, r8
 8001926:	d8d5      	bhi.n	80018d4 <__ledf2+0x68>
 8001928:	2000      	movs	r0, #0
 800192a:	45c4      	cmp	ip, r8
 800192c:	d2d8      	bcs.n	80018e0 <__ledf2+0x74>
 800192e:	e7f5      	b.n	800191c <__ledf2+0xb0>
 8001930:	000007ff 	.word	0x000007ff

08001934 <__aeabi_dmul>:
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	4645      	mov	r5, r8
 8001938:	46de      	mov	lr, fp
 800193a:	4657      	mov	r7, sl
 800193c:	464e      	mov	r6, r9
 800193e:	b5e0      	push	{r5, r6, r7, lr}
 8001940:	001f      	movs	r7, r3
 8001942:	030b      	lsls	r3, r1, #12
 8001944:	0b1b      	lsrs	r3, r3, #12
 8001946:	469b      	mov	fp, r3
 8001948:	004d      	lsls	r5, r1, #1
 800194a:	0fcb      	lsrs	r3, r1, #31
 800194c:	0004      	movs	r4, r0
 800194e:	4691      	mov	r9, r2
 8001950:	4698      	mov	r8, r3
 8001952:	b087      	sub	sp, #28
 8001954:	0d6d      	lsrs	r5, r5, #21
 8001956:	d100      	bne.n	800195a <__aeabi_dmul+0x26>
 8001958:	e1cd      	b.n	8001cf6 <__aeabi_dmul+0x3c2>
 800195a:	4bce      	ldr	r3, [pc, #824]	; (8001c94 <__aeabi_dmul+0x360>)
 800195c:	429d      	cmp	r5, r3
 800195e:	d100      	bne.n	8001962 <__aeabi_dmul+0x2e>
 8001960:	e1e9      	b.n	8001d36 <__aeabi_dmul+0x402>
 8001962:	465a      	mov	r2, fp
 8001964:	0f43      	lsrs	r3, r0, #29
 8001966:	00d2      	lsls	r2, r2, #3
 8001968:	4313      	orrs	r3, r2
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	0412      	lsls	r2, r2, #16
 800196e:	431a      	orrs	r2, r3
 8001970:	00c3      	lsls	r3, r0, #3
 8001972:	469a      	mov	sl, r3
 8001974:	4bc8      	ldr	r3, [pc, #800]	; (8001c98 <__aeabi_dmul+0x364>)
 8001976:	4693      	mov	fp, r2
 8001978:	469c      	mov	ip, r3
 800197a:	2300      	movs	r3, #0
 800197c:	2600      	movs	r6, #0
 800197e:	4465      	add	r5, ip
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	033c      	lsls	r4, r7, #12
 8001984:	007b      	lsls	r3, r7, #1
 8001986:	4648      	mov	r0, r9
 8001988:	0b24      	lsrs	r4, r4, #12
 800198a:	0d5b      	lsrs	r3, r3, #21
 800198c:	0fff      	lsrs	r7, r7, #31
 800198e:	2b00      	cmp	r3, #0
 8001990:	d100      	bne.n	8001994 <__aeabi_dmul+0x60>
 8001992:	e189      	b.n	8001ca8 <__aeabi_dmul+0x374>
 8001994:	4abf      	ldr	r2, [pc, #764]	; (8001c94 <__aeabi_dmul+0x360>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d019      	beq.n	80019ce <__aeabi_dmul+0x9a>
 800199a:	0f42      	lsrs	r2, r0, #29
 800199c:	00e4      	lsls	r4, r4, #3
 800199e:	4322      	orrs	r2, r4
 80019a0:	2480      	movs	r4, #128	; 0x80
 80019a2:	0424      	lsls	r4, r4, #16
 80019a4:	4314      	orrs	r4, r2
 80019a6:	4abc      	ldr	r2, [pc, #752]	; (8001c98 <__aeabi_dmul+0x364>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	4694      	mov	ip, r2
 80019ac:	4642      	mov	r2, r8
 80019ae:	4463      	add	r3, ip
 80019b0:	195b      	adds	r3, r3, r5
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	9b01      	ldr	r3, [sp, #4]
 80019b6:	407a      	eors	r2, r7
 80019b8:	3301      	adds	r3, #1
 80019ba:	00c0      	lsls	r0, r0, #3
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	2e0a      	cmp	r6, #10
 80019c2:	dd1c      	ble.n	80019fe <__aeabi_dmul+0xca>
 80019c4:	003a      	movs	r2, r7
 80019c6:	2e0b      	cmp	r6, #11
 80019c8:	d05e      	beq.n	8001a88 <__aeabi_dmul+0x154>
 80019ca:	4647      	mov	r7, r8
 80019cc:	e056      	b.n	8001a7c <__aeabi_dmul+0x148>
 80019ce:	4649      	mov	r1, r9
 80019d0:	4bb0      	ldr	r3, [pc, #704]	; (8001c94 <__aeabi_dmul+0x360>)
 80019d2:	4321      	orrs	r1, r4
 80019d4:	18eb      	adds	r3, r5, r3
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	2900      	cmp	r1, #0
 80019da:	d12a      	bne.n	8001a32 <__aeabi_dmul+0xfe>
 80019dc:	2080      	movs	r0, #128	; 0x80
 80019de:	2202      	movs	r2, #2
 80019e0:	0100      	lsls	r0, r0, #4
 80019e2:	002b      	movs	r3, r5
 80019e4:	4684      	mov	ip, r0
 80019e6:	4316      	orrs	r6, r2
 80019e8:	4642      	mov	r2, r8
 80019ea:	4463      	add	r3, ip
 80019ec:	407a      	eors	r2, r7
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	2e0a      	cmp	r6, #10
 80019f4:	dd00      	ble.n	80019f8 <__aeabi_dmul+0xc4>
 80019f6:	e231      	b.n	8001e5c <__aeabi_dmul+0x528>
 80019f8:	2000      	movs	r0, #0
 80019fa:	2400      	movs	r4, #0
 80019fc:	2102      	movs	r1, #2
 80019fe:	2e02      	cmp	r6, #2
 8001a00:	dc26      	bgt.n	8001a50 <__aeabi_dmul+0x11c>
 8001a02:	3e01      	subs	r6, #1
 8001a04:	2e01      	cmp	r6, #1
 8001a06:	d852      	bhi.n	8001aae <__aeabi_dmul+0x17a>
 8001a08:	2902      	cmp	r1, #2
 8001a0a:	d04c      	beq.n	8001aa6 <__aeabi_dmul+0x172>
 8001a0c:	2901      	cmp	r1, #1
 8001a0e:	d000      	beq.n	8001a12 <__aeabi_dmul+0xde>
 8001a10:	e118      	b.n	8001c44 <__aeabi_dmul+0x310>
 8001a12:	2300      	movs	r3, #0
 8001a14:	2400      	movs	r4, #0
 8001a16:	2500      	movs	r5, #0
 8001a18:	051b      	lsls	r3, r3, #20
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	07d2      	lsls	r2, r2, #31
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	0028      	movs	r0, r5
 8001a22:	0019      	movs	r1, r3
 8001a24:	b007      	add	sp, #28
 8001a26:	bcf0      	pop	{r4, r5, r6, r7}
 8001a28:	46bb      	mov	fp, r7
 8001a2a:	46b2      	mov	sl, r6
 8001a2c:	46a9      	mov	r9, r5
 8001a2e:	46a0      	mov	r8, r4
 8001a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	2203      	movs	r2, #3
 8001a36:	0109      	lsls	r1, r1, #4
 8001a38:	002b      	movs	r3, r5
 8001a3a:	468c      	mov	ip, r1
 8001a3c:	4316      	orrs	r6, r2
 8001a3e:	4642      	mov	r2, r8
 8001a40:	4463      	add	r3, ip
 8001a42:	407a      	eors	r2, r7
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	9302      	str	r3, [sp, #8]
 8001a48:	2e0a      	cmp	r6, #10
 8001a4a:	dd00      	ble.n	8001a4e <__aeabi_dmul+0x11a>
 8001a4c:	e228      	b.n	8001ea0 <__aeabi_dmul+0x56c>
 8001a4e:	2103      	movs	r1, #3
 8001a50:	2501      	movs	r5, #1
 8001a52:	40b5      	lsls	r5, r6
 8001a54:	46ac      	mov	ip, r5
 8001a56:	26a6      	movs	r6, #166	; 0xa6
 8001a58:	4663      	mov	r3, ip
 8001a5a:	00f6      	lsls	r6, r6, #3
 8001a5c:	4035      	ands	r5, r6
 8001a5e:	4233      	tst	r3, r6
 8001a60:	d10b      	bne.n	8001a7a <__aeabi_dmul+0x146>
 8001a62:	2690      	movs	r6, #144	; 0x90
 8001a64:	00b6      	lsls	r6, r6, #2
 8001a66:	4233      	tst	r3, r6
 8001a68:	d118      	bne.n	8001a9c <__aeabi_dmul+0x168>
 8001a6a:	3eb9      	subs	r6, #185	; 0xb9
 8001a6c:	3eff      	subs	r6, #255	; 0xff
 8001a6e:	421e      	tst	r6, r3
 8001a70:	d01d      	beq.n	8001aae <__aeabi_dmul+0x17a>
 8001a72:	46a3      	mov	fp, r4
 8001a74:	4682      	mov	sl, r0
 8001a76:	9100      	str	r1, [sp, #0]
 8001a78:	e000      	b.n	8001a7c <__aeabi_dmul+0x148>
 8001a7a:	0017      	movs	r7, r2
 8001a7c:	9900      	ldr	r1, [sp, #0]
 8001a7e:	003a      	movs	r2, r7
 8001a80:	2902      	cmp	r1, #2
 8001a82:	d010      	beq.n	8001aa6 <__aeabi_dmul+0x172>
 8001a84:	465c      	mov	r4, fp
 8001a86:	4650      	mov	r0, sl
 8001a88:	2903      	cmp	r1, #3
 8001a8a:	d1bf      	bne.n	8001a0c <__aeabi_dmul+0xd8>
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	031b      	lsls	r3, r3, #12
 8001a90:	431c      	orrs	r4, r3
 8001a92:	0324      	lsls	r4, r4, #12
 8001a94:	0005      	movs	r5, r0
 8001a96:	4b7f      	ldr	r3, [pc, #508]	; (8001c94 <__aeabi_dmul+0x360>)
 8001a98:	0b24      	lsrs	r4, r4, #12
 8001a9a:	e7bd      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001a9c:	2480      	movs	r4, #128	; 0x80
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4b7c      	ldr	r3, [pc, #496]	; (8001c94 <__aeabi_dmul+0x360>)
 8001aa2:	0324      	lsls	r4, r4, #12
 8001aa4:	e7b8      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001aa6:	2400      	movs	r4, #0
 8001aa8:	2500      	movs	r5, #0
 8001aaa:	4b7a      	ldr	r3, [pc, #488]	; (8001c94 <__aeabi_dmul+0x360>)
 8001aac:	e7b4      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001aae:	4653      	mov	r3, sl
 8001ab0:	041e      	lsls	r6, r3, #16
 8001ab2:	0c36      	lsrs	r6, r6, #16
 8001ab4:	0c1f      	lsrs	r7, r3, #16
 8001ab6:	0033      	movs	r3, r6
 8001ab8:	0c01      	lsrs	r1, r0, #16
 8001aba:	0400      	lsls	r0, r0, #16
 8001abc:	0c00      	lsrs	r0, r0, #16
 8001abe:	4343      	muls	r3, r0
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	437b      	muls	r3, r7
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	0033      	movs	r3, r6
 8001aca:	434b      	muls	r3, r1
 8001acc:	469c      	mov	ip, r3
 8001ace:	4643      	mov	r3, r8
 8001ad0:	000d      	movs	r5, r1
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	469a      	mov	sl, r3
 8001ad6:	437d      	muls	r5, r7
 8001ad8:	44cc      	add	ip, r9
 8001ada:	44d4      	add	ip, sl
 8001adc:	9500      	str	r5, [sp, #0]
 8001ade:	45e1      	cmp	r9, ip
 8001ae0:	d904      	bls.n	8001aec <__aeabi_dmul+0x1b8>
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	025b      	lsls	r3, r3, #9
 8001ae6:	4699      	mov	r9, r3
 8001ae8:	444d      	add	r5, r9
 8001aea:	9500      	str	r5, [sp, #0]
 8001aec:	4663      	mov	r3, ip
 8001aee:	0c1b      	lsrs	r3, r3, #16
 8001af0:	001d      	movs	r5, r3
 8001af2:	4663      	mov	r3, ip
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	469c      	mov	ip, r3
 8001af8:	4643      	mov	r3, r8
 8001afa:	041b      	lsls	r3, r3, #16
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	4698      	mov	r8, r3
 8001b00:	4663      	mov	r3, ip
 8001b02:	4443      	add	r3, r8
 8001b04:	9303      	str	r3, [sp, #12]
 8001b06:	0c23      	lsrs	r3, r4, #16
 8001b08:	4698      	mov	r8, r3
 8001b0a:	0033      	movs	r3, r6
 8001b0c:	0424      	lsls	r4, r4, #16
 8001b0e:	0c24      	lsrs	r4, r4, #16
 8001b10:	4363      	muls	r3, r4
 8001b12:	469c      	mov	ip, r3
 8001b14:	0023      	movs	r3, r4
 8001b16:	437b      	muls	r3, r7
 8001b18:	4699      	mov	r9, r3
 8001b1a:	4643      	mov	r3, r8
 8001b1c:	435e      	muls	r6, r3
 8001b1e:	435f      	muls	r7, r3
 8001b20:	444e      	add	r6, r9
 8001b22:	4663      	mov	r3, ip
 8001b24:	46b2      	mov	sl, r6
 8001b26:	0c1e      	lsrs	r6, r3, #16
 8001b28:	4456      	add	r6, sl
 8001b2a:	45b1      	cmp	r9, r6
 8001b2c:	d903      	bls.n	8001b36 <__aeabi_dmul+0x202>
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	025b      	lsls	r3, r3, #9
 8001b32:	4699      	mov	r9, r3
 8001b34:	444f      	add	r7, r9
 8001b36:	0c33      	lsrs	r3, r6, #16
 8001b38:	4699      	mov	r9, r3
 8001b3a:	003b      	movs	r3, r7
 8001b3c:	444b      	add	r3, r9
 8001b3e:	9305      	str	r3, [sp, #20]
 8001b40:	4663      	mov	r3, ip
 8001b42:	46ac      	mov	ip, r5
 8001b44:	041f      	lsls	r7, r3, #16
 8001b46:	0c3f      	lsrs	r7, r7, #16
 8001b48:	0436      	lsls	r6, r6, #16
 8001b4a:	19f6      	adds	r6, r6, r7
 8001b4c:	44b4      	add	ip, r6
 8001b4e:	4663      	mov	r3, ip
 8001b50:	9304      	str	r3, [sp, #16]
 8001b52:	465b      	mov	r3, fp
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	469c      	mov	ip, r3
 8001b58:	465b      	mov	r3, fp
 8001b5a:	041f      	lsls	r7, r3, #16
 8001b5c:	0c3f      	lsrs	r7, r7, #16
 8001b5e:	003b      	movs	r3, r7
 8001b60:	4343      	muls	r3, r0
 8001b62:	4699      	mov	r9, r3
 8001b64:	4663      	mov	r3, ip
 8001b66:	4343      	muls	r3, r0
 8001b68:	469a      	mov	sl, r3
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	4660      	mov	r0, ip
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	469b      	mov	fp, r3
 8001b72:	4348      	muls	r0, r1
 8001b74:	4379      	muls	r1, r7
 8001b76:	4451      	add	r1, sl
 8001b78:	4459      	add	r1, fp
 8001b7a:	458a      	cmp	sl, r1
 8001b7c:	d903      	bls.n	8001b86 <__aeabi_dmul+0x252>
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	025b      	lsls	r3, r3, #9
 8001b82:	469a      	mov	sl, r3
 8001b84:	4450      	add	r0, sl
 8001b86:	0c0b      	lsrs	r3, r1, #16
 8001b88:	469a      	mov	sl, r3
 8001b8a:	464b      	mov	r3, r9
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	0c1b      	lsrs	r3, r3, #16
 8001b90:	4699      	mov	r9, r3
 8001b92:	003b      	movs	r3, r7
 8001b94:	4363      	muls	r3, r4
 8001b96:	0409      	lsls	r1, r1, #16
 8001b98:	4645      	mov	r5, r8
 8001b9a:	4449      	add	r1, r9
 8001b9c:	4699      	mov	r9, r3
 8001b9e:	4663      	mov	r3, ip
 8001ba0:	435c      	muls	r4, r3
 8001ba2:	436b      	muls	r3, r5
 8001ba4:	469c      	mov	ip, r3
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	4698      	mov	r8, r3
 8001bac:	436f      	muls	r7, r5
 8001bae:	193f      	adds	r7, r7, r4
 8001bb0:	4447      	add	r7, r8
 8001bb2:	4450      	add	r0, sl
 8001bb4:	42bc      	cmp	r4, r7
 8001bb6:	d903      	bls.n	8001bc0 <__aeabi_dmul+0x28c>
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	025b      	lsls	r3, r3, #9
 8001bbc:	4698      	mov	r8, r3
 8001bbe:	44c4      	add	ip, r8
 8001bc0:	9b04      	ldr	r3, [sp, #16]
 8001bc2:	9d00      	ldr	r5, [sp, #0]
 8001bc4:	4698      	mov	r8, r3
 8001bc6:	4445      	add	r5, r8
 8001bc8:	42b5      	cmp	r5, r6
 8001bca:	41b6      	sbcs	r6, r6
 8001bcc:	4273      	negs	r3, r6
 8001bce:	4698      	mov	r8, r3
 8001bd0:	464b      	mov	r3, r9
 8001bd2:	041e      	lsls	r6, r3, #16
 8001bd4:	9b05      	ldr	r3, [sp, #20]
 8001bd6:	043c      	lsls	r4, r7, #16
 8001bd8:	4699      	mov	r9, r3
 8001bda:	0c36      	lsrs	r6, r6, #16
 8001bdc:	19a4      	adds	r4, r4, r6
 8001bde:	444c      	add	r4, r9
 8001be0:	46a1      	mov	r9, r4
 8001be2:	4683      	mov	fp, r0
 8001be4:	186e      	adds	r6, r5, r1
 8001be6:	44c1      	add	r9, r8
 8001be8:	428e      	cmp	r6, r1
 8001bea:	4189      	sbcs	r1, r1
 8001bec:	44cb      	add	fp, r9
 8001bee:	465d      	mov	r5, fp
 8001bf0:	4249      	negs	r1, r1
 8001bf2:	186d      	adds	r5, r5, r1
 8001bf4:	429c      	cmp	r4, r3
 8001bf6:	41a4      	sbcs	r4, r4
 8001bf8:	45c1      	cmp	r9, r8
 8001bfa:	419b      	sbcs	r3, r3
 8001bfc:	4583      	cmp	fp, r0
 8001bfe:	4180      	sbcs	r0, r0
 8001c00:	428d      	cmp	r5, r1
 8001c02:	4189      	sbcs	r1, r1
 8001c04:	425b      	negs	r3, r3
 8001c06:	4264      	negs	r4, r4
 8001c08:	431c      	orrs	r4, r3
 8001c0a:	4240      	negs	r0, r0
 8001c0c:	9b03      	ldr	r3, [sp, #12]
 8001c0e:	4249      	negs	r1, r1
 8001c10:	4301      	orrs	r1, r0
 8001c12:	0270      	lsls	r0, r6, #9
 8001c14:	0c3f      	lsrs	r7, r7, #16
 8001c16:	4318      	orrs	r0, r3
 8001c18:	19e4      	adds	r4, r4, r7
 8001c1a:	1e47      	subs	r7, r0, #1
 8001c1c:	41b8      	sbcs	r0, r7
 8001c1e:	1864      	adds	r4, r4, r1
 8001c20:	4464      	add	r4, ip
 8001c22:	0df6      	lsrs	r6, r6, #23
 8001c24:	0261      	lsls	r1, r4, #9
 8001c26:	4330      	orrs	r0, r6
 8001c28:	0dec      	lsrs	r4, r5, #23
 8001c2a:	026e      	lsls	r6, r5, #9
 8001c2c:	430c      	orrs	r4, r1
 8001c2e:	4330      	orrs	r0, r6
 8001c30:	01c9      	lsls	r1, r1, #7
 8001c32:	d400      	bmi.n	8001c36 <__aeabi_dmul+0x302>
 8001c34:	e0f1      	b.n	8001e1a <__aeabi_dmul+0x4e6>
 8001c36:	2101      	movs	r1, #1
 8001c38:	0843      	lsrs	r3, r0, #1
 8001c3a:	4001      	ands	r1, r0
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	07e0      	lsls	r0, r4, #31
 8001c40:	4318      	orrs	r0, r3
 8001c42:	0864      	lsrs	r4, r4, #1
 8001c44:	4915      	ldr	r1, [pc, #84]	; (8001c9c <__aeabi_dmul+0x368>)
 8001c46:	9b02      	ldr	r3, [sp, #8]
 8001c48:	468c      	mov	ip, r1
 8001c4a:	4463      	add	r3, ip
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	dc00      	bgt.n	8001c52 <__aeabi_dmul+0x31e>
 8001c50:	e097      	b.n	8001d82 <__aeabi_dmul+0x44e>
 8001c52:	0741      	lsls	r1, r0, #29
 8001c54:	d009      	beq.n	8001c6a <__aeabi_dmul+0x336>
 8001c56:	210f      	movs	r1, #15
 8001c58:	4001      	ands	r1, r0
 8001c5a:	2904      	cmp	r1, #4
 8001c5c:	d005      	beq.n	8001c6a <__aeabi_dmul+0x336>
 8001c5e:	1d01      	adds	r1, r0, #4
 8001c60:	4281      	cmp	r1, r0
 8001c62:	4180      	sbcs	r0, r0
 8001c64:	4240      	negs	r0, r0
 8001c66:	1824      	adds	r4, r4, r0
 8001c68:	0008      	movs	r0, r1
 8001c6a:	01e1      	lsls	r1, r4, #7
 8001c6c:	d506      	bpl.n	8001c7c <__aeabi_dmul+0x348>
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	00c9      	lsls	r1, r1, #3
 8001c72:	468c      	mov	ip, r1
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <__aeabi_dmul+0x36c>)
 8001c76:	401c      	ands	r4, r3
 8001c78:	9b02      	ldr	r3, [sp, #8]
 8001c7a:	4463      	add	r3, ip
 8001c7c:	4909      	ldr	r1, [pc, #36]	; (8001ca4 <__aeabi_dmul+0x370>)
 8001c7e:	428b      	cmp	r3, r1
 8001c80:	dd00      	ble.n	8001c84 <__aeabi_dmul+0x350>
 8001c82:	e710      	b.n	8001aa6 <__aeabi_dmul+0x172>
 8001c84:	0761      	lsls	r1, r4, #29
 8001c86:	08c5      	lsrs	r5, r0, #3
 8001c88:	0264      	lsls	r4, r4, #9
 8001c8a:	055b      	lsls	r3, r3, #21
 8001c8c:	430d      	orrs	r5, r1
 8001c8e:	0b24      	lsrs	r4, r4, #12
 8001c90:	0d5b      	lsrs	r3, r3, #21
 8001c92:	e6c1      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001c94:	000007ff 	.word	0x000007ff
 8001c98:	fffffc01 	.word	0xfffffc01
 8001c9c:	000003ff 	.word	0x000003ff
 8001ca0:	feffffff 	.word	0xfeffffff
 8001ca4:	000007fe 	.word	0x000007fe
 8001ca8:	464b      	mov	r3, r9
 8001caa:	4323      	orrs	r3, r4
 8001cac:	d059      	beq.n	8001d62 <__aeabi_dmul+0x42e>
 8001cae:	2c00      	cmp	r4, #0
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dmul+0x380>
 8001cb2:	e0a3      	b.n	8001dfc <__aeabi_dmul+0x4c8>
 8001cb4:	0020      	movs	r0, r4
 8001cb6:	f000 fdf9 	bl	80028ac <__clzsi2>
 8001cba:	0001      	movs	r1, r0
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	390b      	subs	r1, #11
 8001cc0:	221d      	movs	r2, #29
 8001cc2:	1a52      	subs	r2, r2, r1
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	40d1      	lsrs	r1, r2
 8001cca:	464a      	mov	r2, r9
 8001ccc:	3808      	subs	r0, #8
 8001cce:	4082      	lsls	r2, r0
 8001cd0:	4084      	lsls	r4, r0
 8001cd2:	0010      	movs	r0, r2
 8001cd4:	430c      	orrs	r4, r1
 8001cd6:	4a74      	ldr	r2, [pc, #464]	; (8001ea8 <__aeabi_dmul+0x574>)
 8001cd8:	1aeb      	subs	r3, r5, r3
 8001cda:	4694      	mov	ip, r2
 8001cdc:	4642      	mov	r2, r8
 8001cde:	4463      	add	r3, ip
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	9b01      	ldr	r3, [sp, #4]
 8001ce4:	407a      	eors	r2, r7
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	2100      	movs	r1, #0
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	2e0a      	cmp	r6, #10
 8001cf0:	dd00      	ble.n	8001cf4 <__aeabi_dmul+0x3c0>
 8001cf2:	e667      	b.n	80019c4 <__aeabi_dmul+0x90>
 8001cf4:	e683      	b.n	80019fe <__aeabi_dmul+0xca>
 8001cf6:	465b      	mov	r3, fp
 8001cf8:	4303      	orrs	r3, r0
 8001cfa:	469a      	mov	sl, r3
 8001cfc:	d02a      	beq.n	8001d54 <__aeabi_dmul+0x420>
 8001cfe:	465b      	mov	r3, fp
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d06d      	beq.n	8001de0 <__aeabi_dmul+0x4ac>
 8001d04:	4658      	mov	r0, fp
 8001d06:	f000 fdd1 	bl	80028ac <__clzsi2>
 8001d0a:	0001      	movs	r1, r0
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	390b      	subs	r1, #11
 8001d10:	221d      	movs	r2, #29
 8001d12:	1a52      	subs	r2, r2, r1
 8001d14:	0021      	movs	r1, r4
 8001d16:	0018      	movs	r0, r3
 8001d18:	465d      	mov	r5, fp
 8001d1a:	40d1      	lsrs	r1, r2
 8001d1c:	3808      	subs	r0, #8
 8001d1e:	4085      	lsls	r5, r0
 8001d20:	000a      	movs	r2, r1
 8001d22:	4084      	lsls	r4, r0
 8001d24:	432a      	orrs	r2, r5
 8001d26:	4693      	mov	fp, r2
 8001d28:	46a2      	mov	sl, r4
 8001d2a:	4d5f      	ldr	r5, [pc, #380]	; (8001ea8 <__aeabi_dmul+0x574>)
 8001d2c:	2600      	movs	r6, #0
 8001d2e:	1aed      	subs	r5, r5, r3
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	e625      	b.n	8001982 <__aeabi_dmul+0x4e>
 8001d36:	465b      	mov	r3, fp
 8001d38:	4303      	orrs	r3, r0
 8001d3a:	469a      	mov	sl, r3
 8001d3c:	d105      	bne.n	8001d4a <__aeabi_dmul+0x416>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	469b      	mov	fp, r3
 8001d42:	3302      	adds	r3, #2
 8001d44:	2608      	movs	r6, #8
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	e61b      	b.n	8001982 <__aeabi_dmul+0x4e>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	4682      	mov	sl, r0
 8001d4e:	260c      	movs	r6, #12
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	e616      	b.n	8001982 <__aeabi_dmul+0x4e>
 8001d54:	2300      	movs	r3, #0
 8001d56:	469b      	mov	fp, r3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	2604      	movs	r6, #4
 8001d5c:	2500      	movs	r5, #0
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	e60f      	b.n	8001982 <__aeabi_dmul+0x4e>
 8001d62:	4642      	mov	r2, r8
 8001d64:	3301      	adds	r3, #1
 8001d66:	9501      	str	r5, [sp, #4]
 8001d68:	431e      	orrs	r6, r3
 8001d6a:	9b01      	ldr	r3, [sp, #4]
 8001d6c:	407a      	eors	r2, r7
 8001d6e:	3301      	adds	r3, #1
 8001d70:	2400      	movs	r4, #0
 8001d72:	2000      	movs	r0, #0
 8001d74:	2101      	movs	r1, #1
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	9302      	str	r3, [sp, #8]
 8001d7a:	2e0a      	cmp	r6, #10
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dmul+0x44c>
 8001d7e:	e621      	b.n	80019c4 <__aeabi_dmul+0x90>
 8001d80:	e63d      	b.n	80019fe <__aeabi_dmul+0xca>
 8001d82:	2101      	movs	r1, #1
 8001d84:	1ac9      	subs	r1, r1, r3
 8001d86:	2938      	cmp	r1, #56	; 0x38
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dmul+0x458>
 8001d8a:	e642      	b.n	8001a12 <__aeabi_dmul+0xde>
 8001d8c:	291f      	cmp	r1, #31
 8001d8e:	dd47      	ble.n	8001e20 <__aeabi_dmul+0x4ec>
 8001d90:	261f      	movs	r6, #31
 8001d92:	0025      	movs	r5, r4
 8001d94:	4276      	negs	r6, r6
 8001d96:	1af3      	subs	r3, r6, r3
 8001d98:	40dd      	lsrs	r5, r3
 8001d9a:	002b      	movs	r3, r5
 8001d9c:	2920      	cmp	r1, #32
 8001d9e:	d005      	beq.n	8001dac <__aeabi_dmul+0x478>
 8001da0:	4942      	ldr	r1, [pc, #264]	; (8001eac <__aeabi_dmul+0x578>)
 8001da2:	9d02      	ldr	r5, [sp, #8]
 8001da4:	468c      	mov	ip, r1
 8001da6:	4465      	add	r5, ip
 8001da8:	40ac      	lsls	r4, r5
 8001daa:	4320      	orrs	r0, r4
 8001dac:	1e41      	subs	r1, r0, #1
 8001dae:	4188      	sbcs	r0, r1
 8001db0:	4318      	orrs	r0, r3
 8001db2:	2307      	movs	r3, #7
 8001db4:	001d      	movs	r5, r3
 8001db6:	2400      	movs	r4, #0
 8001db8:	4005      	ands	r5, r0
 8001dba:	4203      	tst	r3, r0
 8001dbc:	d04a      	beq.n	8001e54 <__aeabi_dmul+0x520>
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	2400      	movs	r4, #0
 8001dc2:	4003      	ands	r3, r0
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d042      	beq.n	8001e4e <__aeabi_dmul+0x51a>
 8001dc8:	1d03      	adds	r3, r0, #4
 8001dca:	4283      	cmp	r3, r0
 8001dcc:	4180      	sbcs	r0, r0
 8001dce:	4240      	negs	r0, r0
 8001dd0:	1824      	adds	r4, r4, r0
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	0223      	lsls	r3, r4, #8
 8001dd6:	d53a      	bpl.n	8001e4e <__aeabi_dmul+0x51a>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	2400      	movs	r4, #0
 8001ddc:	2500      	movs	r5, #0
 8001dde:	e61b      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001de0:	f000 fd64 	bl	80028ac <__clzsi2>
 8001de4:	0001      	movs	r1, r0
 8001de6:	0003      	movs	r3, r0
 8001de8:	3115      	adds	r1, #21
 8001dea:	3320      	adds	r3, #32
 8001dec:	291c      	cmp	r1, #28
 8001dee:	dd8f      	ble.n	8001d10 <__aeabi_dmul+0x3dc>
 8001df0:	3808      	subs	r0, #8
 8001df2:	2200      	movs	r2, #0
 8001df4:	4084      	lsls	r4, r0
 8001df6:	4692      	mov	sl, r2
 8001df8:	46a3      	mov	fp, r4
 8001dfa:	e796      	b.n	8001d2a <__aeabi_dmul+0x3f6>
 8001dfc:	f000 fd56 	bl	80028ac <__clzsi2>
 8001e00:	0001      	movs	r1, r0
 8001e02:	0003      	movs	r3, r0
 8001e04:	3115      	adds	r1, #21
 8001e06:	3320      	adds	r3, #32
 8001e08:	291c      	cmp	r1, #28
 8001e0a:	dc00      	bgt.n	8001e0e <__aeabi_dmul+0x4da>
 8001e0c:	e758      	b.n	8001cc0 <__aeabi_dmul+0x38c>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	464c      	mov	r4, r9
 8001e12:	3a08      	subs	r2, #8
 8001e14:	2000      	movs	r0, #0
 8001e16:	4094      	lsls	r4, r2
 8001e18:	e75d      	b.n	8001cd6 <__aeabi_dmul+0x3a2>
 8001e1a:	9b01      	ldr	r3, [sp, #4]
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	e711      	b.n	8001c44 <__aeabi_dmul+0x310>
 8001e20:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <__aeabi_dmul+0x57c>)
 8001e22:	0026      	movs	r6, r4
 8001e24:	469c      	mov	ip, r3
 8001e26:	0003      	movs	r3, r0
 8001e28:	9d02      	ldr	r5, [sp, #8]
 8001e2a:	40cb      	lsrs	r3, r1
 8001e2c:	4465      	add	r5, ip
 8001e2e:	40ae      	lsls	r6, r5
 8001e30:	431e      	orrs	r6, r3
 8001e32:	0003      	movs	r3, r0
 8001e34:	40ab      	lsls	r3, r5
 8001e36:	1e58      	subs	r0, r3, #1
 8001e38:	4183      	sbcs	r3, r0
 8001e3a:	0030      	movs	r0, r6
 8001e3c:	4318      	orrs	r0, r3
 8001e3e:	40cc      	lsrs	r4, r1
 8001e40:	0743      	lsls	r3, r0, #29
 8001e42:	d0c7      	beq.n	8001dd4 <__aeabi_dmul+0x4a0>
 8001e44:	230f      	movs	r3, #15
 8001e46:	4003      	ands	r3, r0
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d1bd      	bne.n	8001dc8 <__aeabi_dmul+0x494>
 8001e4c:	e7c2      	b.n	8001dd4 <__aeabi_dmul+0x4a0>
 8001e4e:	0765      	lsls	r5, r4, #29
 8001e50:	0264      	lsls	r4, r4, #9
 8001e52:	0b24      	lsrs	r4, r4, #12
 8001e54:	08c0      	lsrs	r0, r0, #3
 8001e56:	2300      	movs	r3, #0
 8001e58:	4305      	orrs	r5, r0
 8001e5a:	e5dd      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001e5c:	2500      	movs	r5, #0
 8001e5e:	2302      	movs	r3, #2
 8001e60:	2e0f      	cmp	r6, #15
 8001e62:	d10c      	bne.n	8001e7e <__aeabi_dmul+0x54a>
 8001e64:	2480      	movs	r4, #128	; 0x80
 8001e66:	465b      	mov	r3, fp
 8001e68:	0324      	lsls	r4, r4, #12
 8001e6a:	4223      	tst	r3, r4
 8001e6c:	d00e      	beq.n	8001e8c <__aeabi_dmul+0x558>
 8001e6e:	4221      	tst	r1, r4
 8001e70:	d10c      	bne.n	8001e8c <__aeabi_dmul+0x558>
 8001e72:	430c      	orrs	r4, r1
 8001e74:	0324      	lsls	r4, r4, #12
 8001e76:	003a      	movs	r2, r7
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <__aeabi_dmul+0x580>)
 8001e7a:	0b24      	lsrs	r4, r4, #12
 8001e7c:	e5cc      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001e7e:	2e0b      	cmp	r6, #11
 8001e80:	d000      	beq.n	8001e84 <__aeabi_dmul+0x550>
 8001e82:	e5a2      	b.n	80019ca <__aeabi_dmul+0x96>
 8001e84:	468b      	mov	fp, r1
 8001e86:	46aa      	mov	sl, r5
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	e5f7      	b.n	8001a7c <__aeabi_dmul+0x148>
 8001e8c:	2480      	movs	r4, #128	; 0x80
 8001e8e:	465b      	mov	r3, fp
 8001e90:	0324      	lsls	r4, r4, #12
 8001e92:	431c      	orrs	r4, r3
 8001e94:	0324      	lsls	r4, r4, #12
 8001e96:	4642      	mov	r2, r8
 8001e98:	4655      	mov	r5, sl
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <__aeabi_dmul+0x580>)
 8001e9c:	0b24      	lsrs	r4, r4, #12
 8001e9e:	e5bb      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001ea0:	464d      	mov	r5, r9
 8001ea2:	0021      	movs	r1, r4
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e7db      	b.n	8001e60 <__aeabi_dmul+0x52c>
 8001ea8:	fffffc0d 	.word	0xfffffc0d
 8001eac:	0000043e 	.word	0x0000043e
 8001eb0:	0000041e 	.word	0x0000041e
 8001eb4:	000007ff 	.word	0x000007ff

08001eb8 <__aeabi_dsub>:
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eba:	4657      	mov	r7, sl
 8001ebc:	464e      	mov	r6, r9
 8001ebe:	4645      	mov	r5, r8
 8001ec0:	46de      	mov	lr, fp
 8001ec2:	b5e0      	push	{r5, r6, r7, lr}
 8001ec4:	000d      	movs	r5, r1
 8001ec6:	0004      	movs	r4, r0
 8001ec8:	0019      	movs	r1, r3
 8001eca:	0010      	movs	r0, r2
 8001ecc:	032b      	lsls	r3, r5, #12
 8001ece:	0a5b      	lsrs	r3, r3, #9
 8001ed0:	0f62      	lsrs	r2, r4, #29
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	00e3      	lsls	r3, r4, #3
 8001ed6:	030c      	lsls	r4, r1, #12
 8001ed8:	0a64      	lsrs	r4, r4, #9
 8001eda:	0f47      	lsrs	r7, r0, #29
 8001edc:	4327      	orrs	r7, r4
 8001ede:	4cd0      	ldr	r4, [pc, #832]	; (8002220 <__aeabi_dsub+0x368>)
 8001ee0:	006e      	lsls	r6, r5, #1
 8001ee2:	4691      	mov	r9, r2
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	004a      	lsls	r2, r1, #1
 8001ee8:	00c0      	lsls	r0, r0, #3
 8001eea:	4698      	mov	r8, r3
 8001eec:	46a2      	mov	sl, r4
 8001eee:	0d76      	lsrs	r6, r6, #21
 8001ef0:	0fed      	lsrs	r5, r5, #31
 8001ef2:	0d52      	lsrs	r2, r2, #21
 8001ef4:	0fc9      	lsrs	r1, r1, #31
 8001ef6:	9001      	str	r0, [sp, #4]
 8001ef8:	42a2      	cmp	r2, r4
 8001efa:	d100      	bne.n	8001efe <__aeabi_dsub+0x46>
 8001efc:	e0b9      	b.n	8002072 <__aeabi_dsub+0x1ba>
 8001efe:	2401      	movs	r4, #1
 8001f00:	4061      	eors	r1, r4
 8001f02:	468b      	mov	fp, r1
 8001f04:	428d      	cmp	r5, r1
 8001f06:	d100      	bne.n	8001f0a <__aeabi_dsub+0x52>
 8001f08:	e08d      	b.n	8002026 <__aeabi_dsub+0x16e>
 8001f0a:	1ab4      	subs	r4, r6, r2
 8001f0c:	46a4      	mov	ip, r4
 8001f0e:	2c00      	cmp	r4, #0
 8001f10:	dc00      	bgt.n	8001f14 <__aeabi_dsub+0x5c>
 8001f12:	e0b7      	b.n	8002084 <__aeabi_dsub+0x1cc>
 8001f14:	2a00      	cmp	r2, #0
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x62>
 8001f18:	e0cb      	b.n	80020b2 <__aeabi_dsub+0x1fa>
 8001f1a:	4ac1      	ldr	r2, [pc, #772]	; (8002220 <__aeabi_dsub+0x368>)
 8001f1c:	4296      	cmp	r6, r2
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dsub+0x6a>
 8001f20:	e186      	b.n	8002230 <__aeabi_dsub+0x378>
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	0412      	lsls	r2, r2, #16
 8001f26:	4317      	orrs	r7, r2
 8001f28:	4662      	mov	r2, ip
 8001f2a:	2a38      	cmp	r2, #56	; 0x38
 8001f2c:	dd00      	ble.n	8001f30 <__aeabi_dsub+0x78>
 8001f2e:	e1a4      	b.n	800227a <__aeabi_dsub+0x3c2>
 8001f30:	2a1f      	cmp	r2, #31
 8001f32:	dd00      	ble.n	8001f36 <__aeabi_dsub+0x7e>
 8001f34:	e21d      	b.n	8002372 <__aeabi_dsub+0x4ba>
 8001f36:	4661      	mov	r1, ip
 8001f38:	2220      	movs	r2, #32
 8001f3a:	003c      	movs	r4, r7
 8001f3c:	1a52      	subs	r2, r2, r1
 8001f3e:	0001      	movs	r1, r0
 8001f40:	4090      	lsls	r0, r2
 8001f42:	4094      	lsls	r4, r2
 8001f44:	1e42      	subs	r2, r0, #1
 8001f46:	4190      	sbcs	r0, r2
 8001f48:	4662      	mov	r2, ip
 8001f4a:	46a0      	mov	r8, r4
 8001f4c:	4664      	mov	r4, ip
 8001f4e:	40d7      	lsrs	r7, r2
 8001f50:	464a      	mov	r2, r9
 8001f52:	40e1      	lsrs	r1, r4
 8001f54:	4644      	mov	r4, r8
 8001f56:	1bd2      	subs	r2, r2, r7
 8001f58:	4691      	mov	r9, r2
 8001f5a:	430c      	orrs	r4, r1
 8001f5c:	4304      	orrs	r4, r0
 8001f5e:	1b1c      	subs	r4, r3, r4
 8001f60:	42a3      	cmp	r3, r4
 8001f62:	4192      	sbcs	r2, r2
 8001f64:	464b      	mov	r3, r9
 8001f66:	4252      	negs	r2, r2
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	469a      	mov	sl, r3
 8001f6c:	4653      	mov	r3, sl
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	d400      	bmi.n	8001f74 <__aeabi_dsub+0xbc>
 8001f72:	e12b      	b.n	80021cc <__aeabi_dsub+0x314>
 8001f74:	4653      	mov	r3, sl
 8001f76:	025a      	lsls	r2, r3, #9
 8001f78:	0a53      	lsrs	r3, r2, #9
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	4653      	mov	r3, sl
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0xcc>
 8001f82:	e166      	b.n	8002252 <__aeabi_dsub+0x39a>
 8001f84:	4650      	mov	r0, sl
 8001f86:	f000 fc91 	bl	80028ac <__clzsi2>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	2220      	movs	r2, #32
 8001f90:	0020      	movs	r0, r4
 8001f92:	1ad2      	subs	r2, r2, r3
 8001f94:	4651      	mov	r1, sl
 8001f96:	40d0      	lsrs	r0, r2
 8001f98:	4099      	lsls	r1, r3
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	409c      	lsls	r4, r3
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	429e      	cmp	r6, r3
 8001fa2:	dd00      	ble.n	8001fa6 <__aeabi_dsub+0xee>
 8001fa4:	e164      	b.n	8002270 <__aeabi_dsub+0x3b8>
 8001fa6:	1b9b      	subs	r3, r3, r6
 8001fa8:	1c59      	adds	r1, r3, #1
 8001faa:	291f      	cmp	r1, #31
 8001fac:	dd00      	ble.n	8001fb0 <__aeabi_dsub+0xf8>
 8001fae:	e0fe      	b.n	80021ae <__aeabi_dsub+0x2f6>
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	0010      	movs	r0, r2
 8001fb4:	0026      	movs	r6, r4
 8001fb6:	1a5b      	subs	r3, r3, r1
 8001fb8:	409c      	lsls	r4, r3
 8001fba:	4098      	lsls	r0, r3
 8001fbc:	40ce      	lsrs	r6, r1
 8001fbe:	40ca      	lsrs	r2, r1
 8001fc0:	1e63      	subs	r3, r4, #1
 8001fc2:	419c      	sbcs	r4, r3
 8001fc4:	4330      	orrs	r0, r6
 8001fc6:	4692      	mov	sl, r2
 8001fc8:	2600      	movs	r6, #0
 8001fca:	4304      	orrs	r4, r0
 8001fcc:	0763      	lsls	r3, r4, #29
 8001fce:	d009      	beq.n	8001fe4 <__aeabi_dsub+0x12c>
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	4023      	ands	r3, r4
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d005      	beq.n	8001fe4 <__aeabi_dsub+0x12c>
 8001fd8:	1d23      	adds	r3, r4, #4
 8001fda:	42a3      	cmp	r3, r4
 8001fdc:	41a4      	sbcs	r4, r4
 8001fde:	4264      	negs	r4, r4
 8001fe0:	44a2      	add	sl, r4
 8001fe2:	001c      	movs	r4, r3
 8001fe4:	4653      	mov	r3, sl
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	d400      	bmi.n	8001fec <__aeabi_dsub+0x134>
 8001fea:	e0f2      	b.n	80021d2 <__aeabi_dsub+0x31a>
 8001fec:	4b8c      	ldr	r3, [pc, #560]	; (8002220 <__aeabi_dsub+0x368>)
 8001fee:	3601      	adds	r6, #1
 8001ff0:	429e      	cmp	r6, r3
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dsub+0x13e>
 8001ff4:	e10f      	b.n	8002216 <__aeabi_dsub+0x35e>
 8001ff6:	4653      	mov	r3, sl
 8001ff8:	498a      	ldr	r1, [pc, #552]	; (8002224 <__aeabi_dsub+0x36c>)
 8001ffa:	08e4      	lsrs	r4, r4, #3
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	0019      	movs	r1, r3
 8002000:	075b      	lsls	r3, r3, #29
 8002002:	4323      	orrs	r3, r4
 8002004:	0572      	lsls	r2, r6, #21
 8002006:	024c      	lsls	r4, r1, #9
 8002008:	0b24      	lsrs	r4, r4, #12
 800200a:	0d52      	lsrs	r2, r2, #21
 800200c:	0512      	lsls	r2, r2, #20
 800200e:	4322      	orrs	r2, r4
 8002010:	07ed      	lsls	r5, r5, #31
 8002012:	432a      	orrs	r2, r5
 8002014:	0018      	movs	r0, r3
 8002016:	0011      	movs	r1, r2
 8002018:	b003      	add	sp, #12
 800201a:	bcf0      	pop	{r4, r5, r6, r7}
 800201c:	46bb      	mov	fp, r7
 800201e:	46b2      	mov	sl, r6
 8002020:	46a9      	mov	r9, r5
 8002022:	46a0      	mov	r8, r4
 8002024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002026:	1ab4      	subs	r4, r6, r2
 8002028:	46a4      	mov	ip, r4
 800202a:	2c00      	cmp	r4, #0
 800202c:	dd59      	ble.n	80020e2 <__aeabi_dsub+0x22a>
 800202e:	2a00      	cmp	r2, #0
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x17c>
 8002032:	e0b0      	b.n	8002196 <__aeabi_dsub+0x2de>
 8002034:	4556      	cmp	r6, sl
 8002036:	d100      	bne.n	800203a <__aeabi_dsub+0x182>
 8002038:	e0fa      	b.n	8002230 <__aeabi_dsub+0x378>
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	0412      	lsls	r2, r2, #16
 800203e:	4317      	orrs	r7, r2
 8002040:	4662      	mov	r2, ip
 8002042:	2a38      	cmp	r2, #56	; 0x38
 8002044:	dd00      	ble.n	8002048 <__aeabi_dsub+0x190>
 8002046:	e0d4      	b.n	80021f2 <__aeabi_dsub+0x33a>
 8002048:	2a1f      	cmp	r2, #31
 800204a:	dc00      	bgt.n	800204e <__aeabi_dsub+0x196>
 800204c:	e1c0      	b.n	80023d0 <__aeabi_dsub+0x518>
 800204e:	0039      	movs	r1, r7
 8002050:	3a20      	subs	r2, #32
 8002052:	40d1      	lsrs	r1, r2
 8002054:	4662      	mov	r2, ip
 8002056:	2a20      	cmp	r2, #32
 8002058:	d006      	beq.n	8002068 <__aeabi_dsub+0x1b0>
 800205a:	4664      	mov	r4, ip
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	1b12      	subs	r2, r2, r4
 8002060:	003c      	movs	r4, r7
 8002062:	4094      	lsls	r4, r2
 8002064:	4304      	orrs	r4, r0
 8002066:	9401      	str	r4, [sp, #4]
 8002068:	9c01      	ldr	r4, [sp, #4]
 800206a:	1e62      	subs	r2, r4, #1
 800206c:	4194      	sbcs	r4, r2
 800206e:	430c      	orrs	r4, r1
 8002070:	e0c3      	b.n	80021fa <__aeabi_dsub+0x342>
 8002072:	003c      	movs	r4, r7
 8002074:	4304      	orrs	r4, r0
 8002076:	d02b      	beq.n	80020d0 <__aeabi_dsub+0x218>
 8002078:	468b      	mov	fp, r1
 800207a:	428d      	cmp	r5, r1
 800207c:	d02e      	beq.n	80020dc <__aeabi_dsub+0x224>
 800207e:	4c6a      	ldr	r4, [pc, #424]	; (8002228 <__aeabi_dsub+0x370>)
 8002080:	46a4      	mov	ip, r4
 8002082:	44b4      	add	ip, r6
 8002084:	4664      	mov	r4, ip
 8002086:	2c00      	cmp	r4, #0
 8002088:	d05f      	beq.n	800214a <__aeabi_dsub+0x292>
 800208a:	1b94      	subs	r4, r2, r6
 800208c:	46a4      	mov	ip, r4
 800208e:	2e00      	cmp	r6, #0
 8002090:	d000      	beq.n	8002094 <__aeabi_dsub+0x1dc>
 8002092:	e120      	b.n	80022d6 <__aeabi_dsub+0x41e>
 8002094:	464c      	mov	r4, r9
 8002096:	431c      	orrs	r4, r3
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x1e4>
 800209a:	e1c7      	b.n	800242c <__aeabi_dsub+0x574>
 800209c:	4661      	mov	r1, ip
 800209e:	1e4c      	subs	r4, r1, #1
 80020a0:	2901      	cmp	r1, #1
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x1ee>
 80020a4:	e223      	b.n	80024ee <__aeabi_dsub+0x636>
 80020a6:	4d5e      	ldr	r5, [pc, #376]	; (8002220 <__aeabi_dsub+0x368>)
 80020a8:	45ac      	cmp	ip, r5
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x1f6>
 80020ac:	e1d8      	b.n	8002460 <__aeabi_dsub+0x5a8>
 80020ae:	46a4      	mov	ip, r4
 80020b0:	e11a      	b.n	80022e8 <__aeabi_dsub+0x430>
 80020b2:	003a      	movs	r2, r7
 80020b4:	4302      	orrs	r2, r0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x202>
 80020b8:	e0e4      	b.n	8002284 <__aeabi_dsub+0x3cc>
 80020ba:	0022      	movs	r2, r4
 80020bc:	3a01      	subs	r2, #1
 80020be:	2c01      	cmp	r4, #1
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dsub+0x20c>
 80020c2:	e1c3      	b.n	800244c <__aeabi_dsub+0x594>
 80020c4:	4956      	ldr	r1, [pc, #344]	; (8002220 <__aeabi_dsub+0x368>)
 80020c6:	428c      	cmp	r4, r1
 80020c8:	d100      	bne.n	80020cc <__aeabi_dsub+0x214>
 80020ca:	e0b1      	b.n	8002230 <__aeabi_dsub+0x378>
 80020cc:	4694      	mov	ip, r2
 80020ce:	e72b      	b.n	8001f28 <__aeabi_dsub+0x70>
 80020d0:	2401      	movs	r4, #1
 80020d2:	4061      	eors	r1, r4
 80020d4:	468b      	mov	fp, r1
 80020d6:	428d      	cmp	r5, r1
 80020d8:	d000      	beq.n	80020dc <__aeabi_dsub+0x224>
 80020da:	e716      	b.n	8001f0a <__aeabi_dsub+0x52>
 80020dc:	4952      	ldr	r1, [pc, #328]	; (8002228 <__aeabi_dsub+0x370>)
 80020de:	468c      	mov	ip, r1
 80020e0:	44b4      	add	ip, r6
 80020e2:	4664      	mov	r4, ip
 80020e4:	2c00      	cmp	r4, #0
 80020e6:	d100      	bne.n	80020ea <__aeabi_dsub+0x232>
 80020e8:	e0d3      	b.n	8002292 <__aeabi_dsub+0x3da>
 80020ea:	1b91      	subs	r1, r2, r6
 80020ec:	468c      	mov	ip, r1
 80020ee:	2e00      	cmp	r6, #0
 80020f0:	d100      	bne.n	80020f4 <__aeabi_dsub+0x23c>
 80020f2:	e15e      	b.n	80023b2 <__aeabi_dsub+0x4fa>
 80020f4:	494a      	ldr	r1, [pc, #296]	; (8002220 <__aeabi_dsub+0x368>)
 80020f6:	428a      	cmp	r2, r1
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x244>
 80020fa:	e1be      	b.n	800247a <__aeabi_dsub+0x5c2>
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	464c      	mov	r4, r9
 8002100:	0409      	lsls	r1, r1, #16
 8002102:	430c      	orrs	r4, r1
 8002104:	46a1      	mov	r9, r4
 8002106:	4661      	mov	r1, ip
 8002108:	2938      	cmp	r1, #56	; 0x38
 800210a:	dd00      	ble.n	800210e <__aeabi_dsub+0x256>
 800210c:	e1ba      	b.n	8002484 <__aeabi_dsub+0x5cc>
 800210e:	291f      	cmp	r1, #31
 8002110:	dd00      	ble.n	8002114 <__aeabi_dsub+0x25c>
 8002112:	e227      	b.n	8002564 <__aeabi_dsub+0x6ac>
 8002114:	2420      	movs	r4, #32
 8002116:	1a64      	subs	r4, r4, r1
 8002118:	4649      	mov	r1, r9
 800211a:	40a1      	lsls	r1, r4
 800211c:	001e      	movs	r6, r3
 800211e:	4688      	mov	r8, r1
 8002120:	4661      	mov	r1, ip
 8002122:	40a3      	lsls	r3, r4
 8002124:	40ce      	lsrs	r6, r1
 8002126:	4641      	mov	r1, r8
 8002128:	1e5c      	subs	r4, r3, #1
 800212a:	41a3      	sbcs	r3, r4
 800212c:	4331      	orrs	r1, r6
 800212e:	4319      	orrs	r1, r3
 8002130:	000c      	movs	r4, r1
 8002132:	4663      	mov	r3, ip
 8002134:	4649      	mov	r1, r9
 8002136:	40d9      	lsrs	r1, r3
 8002138:	187f      	adds	r7, r7, r1
 800213a:	1824      	adds	r4, r4, r0
 800213c:	4284      	cmp	r4, r0
 800213e:	419b      	sbcs	r3, r3
 8002140:	425b      	negs	r3, r3
 8002142:	469a      	mov	sl, r3
 8002144:	0016      	movs	r6, r2
 8002146:	44ba      	add	sl, r7
 8002148:	e05d      	b.n	8002206 <__aeabi_dsub+0x34e>
 800214a:	4c38      	ldr	r4, [pc, #224]	; (800222c <__aeabi_dsub+0x374>)
 800214c:	1c72      	adds	r2, r6, #1
 800214e:	4222      	tst	r2, r4
 8002150:	d000      	beq.n	8002154 <__aeabi_dsub+0x29c>
 8002152:	e0df      	b.n	8002314 <__aeabi_dsub+0x45c>
 8002154:	464a      	mov	r2, r9
 8002156:	431a      	orrs	r2, r3
 8002158:	2e00      	cmp	r6, #0
 800215a:	d000      	beq.n	800215e <__aeabi_dsub+0x2a6>
 800215c:	e15c      	b.n	8002418 <__aeabi_dsub+0x560>
 800215e:	2a00      	cmp	r2, #0
 8002160:	d100      	bne.n	8002164 <__aeabi_dsub+0x2ac>
 8002162:	e1cf      	b.n	8002504 <__aeabi_dsub+0x64c>
 8002164:	003a      	movs	r2, r7
 8002166:	4302      	orrs	r2, r0
 8002168:	d100      	bne.n	800216c <__aeabi_dsub+0x2b4>
 800216a:	e17f      	b.n	800246c <__aeabi_dsub+0x5b4>
 800216c:	1a1c      	subs	r4, r3, r0
 800216e:	464a      	mov	r2, r9
 8002170:	42a3      	cmp	r3, r4
 8002172:	4189      	sbcs	r1, r1
 8002174:	1bd2      	subs	r2, r2, r7
 8002176:	4249      	negs	r1, r1
 8002178:	1a52      	subs	r2, r2, r1
 800217a:	4692      	mov	sl, r2
 800217c:	0212      	lsls	r2, r2, #8
 800217e:	d400      	bmi.n	8002182 <__aeabi_dsub+0x2ca>
 8002180:	e20a      	b.n	8002598 <__aeabi_dsub+0x6e0>
 8002182:	1ac4      	subs	r4, r0, r3
 8002184:	42a0      	cmp	r0, r4
 8002186:	4180      	sbcs	r0, r0
 8002188:	464b      	mov	r3, r9
 800218a:	4240      	negs	r0, r0
 800218c:	1aff      	subs	r7, r7, r3
 800218e:	1a3b      	subs	r3, r7, r0
 8002190:	469a      	mov	sl, r3
 8002192:	465d      	mov	r5, fp
 8002194:	e71a      	b.n	8001fcc <__aeabi_dsub+0x114>
 8002196:	003a      	movs	r2, r7
 8002198:	4302      	orrs	r2, r0
 800219a:	d073      	beq.n	8002284 <__aeabi_dsub+0x3cc>
 800219c:	0022      	movs	r2, r4
 800219e:	3a01      	subs	r2, #1
 80021a0:	2c01      	cmp	r4, #1
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dsub+0x2ee>
 80021a4:	e0cb      	b.n	800233e <__aeabi_dsub+0x486>
 80021a6:	4554      	cmp	r4, sl
 80021a8:	d042      	beq.n	8002230 <__aeabi_dsub+0x378>
 80021aa:	4694      	mov	ip, r2
 80021ac:	e748      	b.n	8002040 <__aeabi_dsub+0x188>
 80021ae:	0010      	movs	r0, r2
 80021b0:	3b1f      	subs	r3, #31
 80021b2:	40d8      	lsrs	r0, r3
 80021b4:	2920      	cmp	r1, #32
 80021b6:	d003      	beq.n	80021c0 <__aeabi_dsub+0x308>
 80021b8:	2340      	movs	r3, #64	; 0x40
 80021ba:	1a5b      	subs	r3, r3, r1
 80021bc:	409a      	lsls	r2, r3
 80021be:	4314      	orrs	r4, r2
 80021c0:	1e63      	subs	r3, r4, #1
 80021c2:	419c      	sbcs	r4, r3
 80021c4:	2300      	movs	r3, #0
 80021c6:	2600      	movs	r6, #0
 80021c8:	469a      	mov	sl, r3
 80021ca:	4304      	orrs	r4, r0
 80021cc:	0763      	lsls	r3, r4, #29
 80021ce:	d000      	beq.n	80021d2 <__aeabi_dsub+0x31a>
 80021d0:	e6fe      	b.n	8001fd0 <__aeabi_dsub+0x118>
 80021d2:	4652      	mov	r2, sl
 80021d4:	08e3      	lsrs	r3, r4, #3
 80021d6:	0752      	lsls	r2, r2, #29
 80021d8:	4313      	orrs	r3, r2
 80021da:	4652      	mov	r2, sl
 80021dc:	46b4      	mov	ip, r6
 80021de:	08d2      	lsrs	r2, r2, #3
 80021e0:	490f      	ldr	r1, [pc, #60]	; (8002220 <__aeabi_dsub+0x368>)
 80021e2:	458c      	cmp	ip, r1
 80021e4:	d02a      	beq.n	800223c <__aeabi_dsub+0x384>
 80021e6:	0312      	lsls	r2, r2, #12
 80021e8:	0b14      	lsrs	r4, r2, #12
 80021ea:	4662      	mov	r2, ip
 80021ec:	0552      	lsls	r2, r2, #21
 80021ee:	0d52      	lsrs	r2, r2, #21
 80021f0:	e70c      	b.n	800200c <__aeabi_dsub+0x154>
 80021f2:	003c      	movs	r4, r7
 80021f4:	4304      	orrs	r4, r0
 80021f6:	1e62      	subs	r2, r4, #1
 80021f8:	4194      	sbcs	r4, r2
 80021fa:	18e4      	adds	r4, r4, r3
 80021fc:	429c      	cmp	r4, r3
 80021fe:	4192      	sbcs	r2, r2
 8002200:	4252      	negs	r2, r2
 8002202:	444a      	add	r2, r9
 8002204:	4692      	mov	sl, r2
 8002206:	4653      	mov	r3, sl
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	d5df      	bpl.n	80021cc <__aeabi_dsub+0x314>
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <__aeabi_dsub+0x368>)
 800220e:	3601      	adds	r6, #1
 8002210:	429e      	cmp	r6, r3
 8002212:	d000      	beq.n	8002216 <__aeabi_dsub+0x35e>
 8002214:	e0a0      	b.n	8002358 <__aeabi_dsub+0x4a0>
 8002216:	0032      	movs	r2, r6
 8002218:	2400      	movs	r4, #0
 800221a:	2300      	movs	r3, #0
 800221c:	e6f6      	b.n	800200c <__aeabi_dsub+0x154>
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	000007ff 	.word	0x000007ff
 8002224:	ff7fffff 	.word	0xff7fffff
 8002228:	fffff801 	.word	0xfffff801
 800222c:	000007fe 	.word	0x000007fe
 8002230:	08db      	lsrs	r3, r3, #3
 8002232:	464a      	mov	r2, r9
 8002234:	0752      	lsls	r2, r2, #29
 8002236:	4313      	orrs	r3, r2
 8002238:	464a      	mov	r2, r9
 800223a:	08d2      	lsrs	r2, r2, #3
 800223c:	0019      	movs	r1, r3
 800223e:	4311      	orrs	r1, r2
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x38c>
 8002242:	e1b5      	b.n	80025b0 <__aeabi_dsub+0x6f8>
 8002244:	2480      	movs	r4, #128	; 0x80
 8002246:	0324      	lsls	r4, r4, #12
 8002248:	4314      	orrs	r4, r2
 800224a:	0324      	lsls	r4, r4, #12
 800224c:	4ad5      	ldr	r2, [pc, #852]	; (80025a4 <__aeabi_dsub+0x6ec>)
 800224e:	0b24      	lsrs	r4, r4, #12
 8002250:	e6dc      	b.n	800200c <__aeabi_dsub+0x154>
 8002252:	0020      	movs	r0, r4
 8002254:	f000 fb2a 	bl	80028ac <__clzsi2>
 8002258:	0003      	movs	r3, r0
 800225a:	3318      	adds	r3, #24
 800225c:	2b1f      	cmp	r3, #31
 800225e:	dc00      	bgt.n	8002262 <__aeabi_dsub+0x3aa>
 8002260:	e695      	b.n	8001f8e <__aeabi_dsub+0xd6>
 8002262:	0022      	movs	r2, r4
 8002264:	3808      	subs	r0, #8
 8002266:	4082      	lsls	r2, r0
 8002268:	2400      	movs	r4, #0
 800226a:	429e      	cmp	r6, r3
 800226c:	dc00      	bgt.n	8002270 <__aeabi_dsub+0x3b8>
 800226e:	e69a      	b.n	8001fa6 <__aeabi_dsub+0xee>
 8002270:	1af6      	subs	r6, r6, r3
 8002272:	4bcd      	ldr	r3, [pc, #820]	; (80025a8 <__aeabi_dsub+0x6f0>)
 8002274:	401a      	ands	r2, r3
 8002276:	4692      	mov	sl, r2
 8002278:	e6a8      	b.n	8001fcc <__aeabi_dsub+0x114>
 800227a:	003c      	movs	r4, r7
 800227c:	4304      	orrs	r4, r0
 800227e:	1e62      	subs	r2, r4, #1
 8002280:	4194      	sbcs	r4, r2
 8002282:	e66c      	b.n	8001f5e <__aeabi_dsub+0xa6>
 8002284:	464a      	mov	r2, r9
 8002286:	08db      	lsrs	r3, r3, #3
 8002288:	0752      	lsls	r2, r2, #29
 800228a:	4313      	orrs	r3, r2
 800228c:	464a      	mov	r2, r9
 800228e:	08d2      	lsrs	r2, r2, #3
 8002290:	e7a6      	b.n	80021e0 <__aeabi_dsub+0x328>
 8002292:	4cc6      	ldr	r4, [pc, #792]	; (80025ac <__aeabi_dsub+0x6f4>)
 8002294:	1c72      	adds	r2, r6, #1
 8002296:	4222      	tst	r2, r4
 8002298:	d000      	beq.n	800229c <__aeabi_dsub+0x3e4>
 800229a:	e0ac      	b.n	80023f6 <__aeabi_dsub+0x53e>
 800229c:	464a      	mov	r2, r9
 800229e:	431a      	orrs	r2, r3
 80022a0:	2e00      	cmp	r6, #0
 80022a2:	d000      	beq.n	80022a6 <__aeabi_dsub+0x3ee>
 80022a4:	e105      	b.n	80024b2 <__aeabi_dsub+0x5fa>
 80022a6:	2a00      	cmp	r2, #0
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x3f4>
 80022aa:	e156      	b.n	800255a <__aeabi_dsub+0x6a2>
 80022ac:	003a      	movs	r2, r7
 80022ae:	4302      	orrs	r2, r0
 80022b0:	d100      	bne.n	80022b4 <__aeabi_dsub+0x3fc>
 80022b2:	e0db      	b.n	800246c <__aeabi_dsub+0x5b4>
 80022b4:	181c      	adds	r4, r3, r0
 80022b6:	429c      	cmp	r4, r3
 80022b8:	419b      	sbcs	r3, r3
 80022ba:	444f      	add	r7, r9
 80022bc:	46ba      	mov	sl, r7
 80022be:	425b      	negs	r3, r3
 80022c0:	449a      	add	sl, r3
 80022c2:	4653      	mov	r3, sl
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	d400      	bmi.n	80022ca <__aeabi_dsub+0x412>
 80022c8:	e780      	b.n	80021cc <__aeabi_dsub+0x314>
 80022ca:	4652      	mov	r2, sl
 80022cc:	4bb6      	ldr	r3, [pc, #728]	; (80025a8 <__aeabi_dsub+0x6f0>)
 80022ce:	2601      	movs	r6, #1
 80022d0:	401a      	ands	r2, r3
 80022d2:	4692      	mov	sl, r2
 80022d4:	e77a      	b.n	80021cc <__aeabi_dsub+0x314>
 80022d6:	4cb3      	ldr	r4, [pc, #716]	; (80025a4 <__aeabi_dsub+0x6ec>)
 80022d8:	42a2      	cmp	r2, r4
 80022da:	d100      	bne.n	80022de <__aeabi_dsub+0x426>
 80022dc:	e0c0      	b.n	8002460 <__aeabi_dsub+0x5a8>
 80022de:	2480      	movs	r4, #128	; 0x80
 80022e0:	464d      	mov	r5, r9
 80022e2:	0424      	lsls	r4, r4, #16
 80022e4:	4325      	orrs	r5, r4
 80022e6:	46a9      	mov	r9, r5
 80022e8:	4664      	mov	r4, ip
 80022ea:	2c38      	cmp	r4, #56	; 0x38
 80022ec:	dc53      	bgt.n	8002396 <__aeabi_dsub+0x4de>
 80022ee:	4661      	mov	r1, ip
 80022f0:	2c1f      	cmp	r4, #31
 80022f2:	dd00      	ble.n	80022f6 <__aeabi_dsub+0x43e>
 80022f4:	e0cd      	b.n	8002492 <__aeabi_dsub+0x5da>
 80022f6:	2520      	movs	r5, #32
 80022f8:	001e      	movs	r6, r3
 80022fa:	1b2d      	subs	r5, r5, r4
 80022fc:	464c      	mov	r4, r9
 80022fe:	40ab      	lsls	r3, r5
 8002300:	40ac      	lsls	r4, r5
 8002302:	40ce      	lsrs	r6, r1
 8002304:	1e5d      	subs	r5, r3, #1
 8002306:	41ab      	sbcs	r3, r5
 8002308:	4334      	orrs	r4, r6
 800230a:	4323      	orrs	r3, r4
 800230c:	464c      	mov	r4, r9
 800230e:	40cc      	lsrs	r4, r1
 8002310:	1b3f      	subs	r7, r7, r4
 8002312:	e045      	b.n	80023a0 <__aeabi_dsub+0x4e8>
 8002314:	464a      	mov	r2, r9
 8002316:	1a1c      	subs	r4, r3, r0
 8002318:	1bd1      	subs	r1, r2, r7
 800231a:	42a3      	cmp	r3, r4
 800231c:	4192      	sbcs	r2, r2
 800231e:	4252      	negs	r2, r2
 8002320:	4692      	mov	sl, r2
 8002322:	000a      	movs	r2, r1
 8002324:	4651      	mov	r1, sl
 8002326:	1a52      	subs	r2, r2, r1
 8002328:	4692      	mov	sl, r2
 800232a:	0212      	lsls	r2, r2, #8
 800232c:	d500      	bpl.n	8002330 <__aeabi_dsub+0x478>
 800232e:	e083      	b.n	8002438 <__aeabi_dsub+0x580>
 8002330:	4653      	mov	r3, sl
 8002332:	4323      	orrs	r3, r4
 8002334:	d000      	beq.n	8002338 <__aeabi_dsub+0x480>
 8002336:	e621      	b.n	8001f7c <__aeabi_dsub+0xc4>
 8002338:	2200      	movs	r2, #0
 800233a:	2500      	movs	r5, #0
 800233c:	e753      	b.n	80021e6 <__aeabi_dsub+0x32e>
 800233e:	181c      	adds	r4, r3, r0
 8002340:	429c      	cmp	r4, r3
 8002342:	419b      	sbcs	r3, r3
 8002344:	444f      	add	r7, r9
 8002346:	46ba      	mov	sl, r7
 8002348:	425b      	negs	r3, r3
 800234a:	449a      	add	sl, r3
 800234c:	4653      	mov	r3, sl
 800234e:	2601      	movs	r6, #1
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	d400      	bmi.n	8002356 <__aeabi_dsub+0x49e>
 8002354:	e73a      	b.n	80021cc <__aeabi_dsub+0x314>
 8002356:	2602      	movs	r6, #2
 8002358:	4652      	mov	r2, sl
 800235a:	4b93      	ldr	r3, [pc, #588]	; (80025a8 <__aeabi_dsub+0x6f0>)
 800235c:	2101      	movs	r1, #1
 800235e:	401a      	ands	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	4021      	ands	r1, r4
 8002364:	0862      	lsrs	r2, r4, #1
 8002366:	430a      	orrs	r2, r1
 8002368:	07dc      	lsls	r4, r3, #31
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	469a      	mov	sl, r3
 800236e:	4314      	orrs	r4, r2
 8002370:	e62c      	b.n	8001fcc <__aeabi_dsub+0x114>
 8002372:	0039      	movs	r1, r7
 8002374:	3a20      	subs	r2, #32
 8002376:	40d1      	lsrs	r1, r2
 8002378:	4662      	mov	r2, ip
 800237a:	2a20      	cmp	r2, #32
 800237c:	d006      	beq.n	800238c <__aeabi_dsub+0x4d4>
 800237e:	4664      	mov	r4, ip
 8002380:	2240      	movs	r2, #64	; 0x40
 8002382:	1b12      	subs	r2, r2, r4
 8002384:	003c      	movs	r4, r7
 8002386:	4094      	lsls	r4, r2
 8002388:	4304      	orrs	r4, r0
 800238a:	9401      	str	r4, [sp, #4]
 800238c:	9c01      	ldr	r4, [sp, #4]
 800238e:	1e62      	subs	r2, r4, #1
 8002390:	4194      	sbcs	r4, r2
 8002392:	430c      	orrs	r4, r1
 8002394:	e5e3      	b.n	8001f5e <__aeabi_dsub+0xa6>
 8002396:	4649      	mov	r1, r9
 8002398:	4319      	orrs	r1, r3
 800239a:	000b      	movs	r3, r1
 800239c:	1e5c      	subs	r4, r3, #1
 800239e:	41a3      	sbcs	r3, r4
 80023a0:	1ac4      	subs	r4, r0, r3
 80023a2:	42a0      	cmp	r0, r4
 80023a4:	419b      	sbcs	r3, r3
 80023a6:	425b      	negs	r3, r3
 80023a8:	1afb      	subs	r3, r7, r3
 80023aa:	469a      	mov	sl, r3
 80023ac:	465d      	mov	r5, fp
 80023ae:	0016      	movs	r6, r2
 80023b0:	e5dc      	b.n	8001f6c <__aeabi_dsub+0xb4>
 80023b2:	4649      	mov	r1, r9
 80023b4:	4319      	orrs	r1, r3
 80023b6:	d100      	bne.n	80023ba <__aeabi_dsub+0x502>
 80023b8:	e0ae      	b.n	8002518 <__aeabi_dsub+0x660>
 80023ba:	4661      	mov	r1, ip
 80023bc:	4664      	mov	r4, ip
 80023be:	3901      	subs	r1, #1
 80023c0:	2c01      	cmp	r4, #1
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dsub+0x50e>
 80023c4:	e0e0      	b.n	8002588 <__aeabi_dsub+0x6d0>
 80023c6:	4c77      	ldr	r4, [pc, #476]	; (80025a4 <__aeabi_dsub+0x6ec>)
 80023c8:	45a4      	cmp	ip, r4
 80023ca:	d056      	beq.n	800247a <__aeabi_dsub+0x5c2>
 80023cc:	468c      	mov	ip, r1
 80023ce:	e69a      	b.n	8002106 <__aeabi_dsub+0x24e>
 80023d0:	4661      	mov	r1, ip
 80023d2:	2220      	movs	r2, #32
 80023d4:	003c      	movs	r4, r7
 80023d6:	1a52      	subs	r2, r2, r1
 80023d8:	4094      	lsls	r4, r2
 80023da:	0001      	movs	r1, r0
 80023dc:	4090      	lsls	r0, r2
 80023de:	46a0      	mov	r8, r4
 80023e0:	4664      	mov	r4, ip
 80023e2:	1e42      	subs	r2, r0, #1
 80023e4:	4190      	sbcs	r0, r2
 80023e6:	4662      	mov	r2, ip
 80023e8:	40e1      	lsrs	r1, r4
 80023ea:	4644      	mov	r4, r8
 80023ec:	40d7      	lsrs	r7, r2
 80023ee:	430c      	orrs	r4, r1
 80023f0:	4304      	orrs	r4, r0
 80023f2:	44b9      	add	r9, r7
 80023f4:	e701      	b.n	80021fa <__aeabi_dsub+0x342>
 80023f6:	496b      	ldr	r1, [pc, #428]	; (80025a4 <__aeabi_dsub+0x6ec>)
 80023f8:	428a      	cmp	r2, r1
 80023fa:	d100      	bne.n	80023fe <__aeabi_dsub+0x546>
 80023fc:	e70c      	b.n	8002218 <__aeabi_dsub+0x360>
 80023fe:	1818      	adds	r0, r3, r0
 8002400:	4298      	cmp	r0, r3
 8002402:	419b      	sbcs	r3, r3
 8002404:	444f      	add	r7, r9
 8002406:	425b      	negs	r3, r3
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	07dc      	lsls	r4, r3, #31
 800240c:	0840      	lsrs	r0, r0, #1
 800240e:	085b      	lsrs	r3, r3, #1
 8002410:	469a      	mov	sl, r3
 8002412:	0016      	movs	r6, r2
 8002414:	4304      	orrs	r4, r0
 8002416:	e6d9      	b.n	80021cc <__aeabi_dsub+0x314>
 8002418:	2a00      	cmp	r2, #0
 800241a:	d000      	beq.n	800241e <__aeabi_dsub+0x566>
 800241c:	e081      	b.n	8002522 <__aeabi_dsub+0x66a>
 800241e:	003b      	movs	r3, r7
 8002420:	4303      	orrs	r3, r0
 8002422:	d11d      	bne.n	8002460 <__aeabi_dsub+0x5a8>
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	2500      	movs	r5, #0
 8002428:	0312      	lsls	r2, r2, #12
 800242a:	e70b      	b.n	8002244 <__aeabi_dsub+0x38c>
 800242c:	08c0      	lsrs	r0, r0, #3
 800242e:	077b      	lsls	r3, r7, #29
 8002430:	465d      	mov	r5, fp
 8002432:	4303      	orrs	r3, r0
 8002434:	08fa      	lsrs	r2, r7, #3
 8002436:	e6d3      	b.n	80021e0 <__aeabi_dsub+0x328>
 8002438:	1ac4      	subs	r4, r0, r3
 800243a:	42a0      	cmp	r0, r4
 800243c:	4180      	sbcs	r0, r0
 800243e:	464b      	mov	r3, r9
 8002440:	4240      	negs	r0, r0
 8002442:	1aff      	subs	r7, r7, r3
 8002444:	1a3b      	subs	r3, r7, r0
 8002446:	469a      	mov	sl, r3
 8002448:	465d      	mov	r5, fp
 800244a:	e597      	b.n	8001f7c <__aeabi_dsub+0xc4>
 800244c:	1a1c      	subs	r4, r3, r0
 800244e:	464a      	mov	r2, r9
 8002450:	42a3      	cmp	r3, r4
 8002452:	419b      	sbcs	r3, r3
 8002454:	1bd7      	subs	r7, r2, r7
 8002456:	425b      	negs	r3, r3
 8002458:	1afb      	subs	r3, r7, r3
 800245a:	469a      	mov	sl, r3
 800245c:	2601      	movs	r6, #1
 800245e:	e585      	b.n	8001f6c <__aeabi_dsub+0xb4>
 8002460:	08c0      	lsrs	r0, r0, #3
 8002462:	077b      	lsls	r3, r7, #29
 8002464:	465d      	mov	r5, fp
 8002466:	4303      	orrs	r3, r0
 8002468:	08fa      	lsrs	r2, r7, #3
 800246a:	e6e7      	b.n	800223c <__aeabi_dsub+0x384>
 800246c:	464a      	mov	r2, r9
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	0752      	lsls	r2, r2, #29
 8002472:	4313      	orrs	r3, r2
 8002474:	464a      	mov	r2, r9
 8002476:	08d2      	lsrs	r2, r2, #3
 8002478:	e6b5      	b.n	80021e6 <__aeabi_dsub+0x32e>
 800247a:	08c0      	lsrs	r0, r0, #3
 800247c:	077b      	lsls	r3, r7, #29
 800247e:	4303      	orrs	r3, r0
 8002480:	08fa      	lsrs	r2, r7, #3
 8002482:	e6db      	b.n	800223c <__aeabi_dsub+0x384>
 8002484:	4649      	mov	r1, r9
 8002486:	4319      	orrs	r1, r3
 8002488:	000b      	movs	r3, r1
 800248a:	1e59      	subs	r1, r3, #1
 800248c:	418b      	sbcs	r3, r1
 800248e:	001c      	movs	r4, r3
 8002490:	e653      	b.n	800213a <__aeabi_dsub+0x282>
 8002492:	464d      	mov	r5, r9
 8002494:	3c20      	subs	r4, #32
 8002496:	40e5      	lsrs	r5, r4
 8002498:	2920      	cmp	r1, #32
 800249a:	d005      	beq.n	80024a8 <__aeabi_dsub+0x5f0>
 800249c:	2440      	movs	r4, #64	; 0x40
 800249e:	1a64      	subs	r4, r4, r1
 80024a0:	4649      	mov	r1, r9
 80024a2:	40a1      	lsls	r1, r4
 80024a4:	430b      	orrs	r3, r1
 80024a6:	4698      	mov	r8, r3
 80024a8:	4643      	mov	r3, r8
 80024aa:	1e5c      	subs	r4, r3, #1
 80024ac:	41a3      	sbcs	r3, r4
 80024ae:	432b      	orrs	r3, r5
 80024b0:	e776      	b.n	80023a0 <__aeabi_dsub+0x4e8>
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	d0e1      	beq.n	800247a <__aeabi_dsub+0x5c2>
 80024b6:	003a      	movs	r2, r7
 80024b8:	08db      	lsrs	r3, r3, #3
 80024ba:	4302      	orrs	r2, r0
 80024bc:	d100      	bne.n	80024c0 <__aeabi_dsub+0x608>
 80024be:	e6b8      	b.n	8002232 <__aeabi_dsub+0x37a>
 80024c0:	464a      	mov	r2, r9
 80024c2:	0752      	lsls	r2, r2, #29
 80024c4:	2480      	movs	r4, #128	; 0x80
 80024c6:	4313      	orrs	r3, r2
 80024c8:	464a      	mov	r2, r9
 80024ca:	0324      	lsls	r4, r4, #12
 80024cc:	08d2      	lsrs	r2, r2, #3
 80024ce:	4222      	tst	r2, r4
 80024d0:	d007      	beq.n	80024e2 <__aeabi_dsub+0x62a>
 80024d2:	08fe      	lsrs	r6, r7, #3
 80024d4:	4226      	tst	r6, r4
 80024d6:	d104      	bne.n	80024e2 <__aeabi_dsub+0x62a>
 80024d8:	465d      	mov	r5, fp
 80024da:	0032      	movs	r2, r6
 80024dc:	08c3      	lsrs	r3, r0, #3
 80024de:	077f      	lsls	r7, r7, #29
 80024e0:	433b      	orrs	r3, r7
 80024e2:	0f59      	lsrs	r1, r3, #29
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	0749      	lsls	r1, r1, #29
 80024e8:	08db      	lsrs	r3, r3, #3
 80024ea:	430b      	orrs	r3, r1
 80024ec:	e6a6      	b.n	800223c <__aeabi_dsub+0x384>
 80024ee:	1ac4      	subs	r4, r0, r3
 80024f0:	42a0      	cmp	r0, r4
 80024f2:	4180      	sbcs	r0, r0
 80024f4:	464b      	mov	r3, r9
 80024f6:	4240      	negs	r0, r0
 80024f8:	1aff      	subs	r7, r7, r3
 80024fa:	1a3b      	subs	r3, r7, r0
 80024fc:	469a      	mov	sl, r3
 80024fe:	465d      	mov	r5, fp
 8002500:	2601      	movs	r6, #1
 8002502:	e533      	b.n	8001f6c <__aeabi_dsub+0xb4>
 8002504:	003b      	movs	r3, r7
 8002506:	4303      	orrs	r3, r0
 8002508:	d100      	bne.n	800250c <__aeabi_dsub+0x654>
 800250a:	e715      	b.n	8002338 <__aeabi_dsub+0x480>
 800250c:	08c0      	lsrs	r0, r0, #3
 800250e:	077b      	lsls	r3, r7, #29
 8002510:	465d      	mov	r5, fp
 8002512:	4303      	orrs	r3, r0
 8002514:	08fa      	lsrs	r2, r7, #3
 8002516:	e666      	b.n	80021e6 <__aeabi_dsub+0x32e>
 8002518:	08c0      	lsrs	r0, r0, #3
 800251a:	077b      	lsls	r3, r7, #29
 800251c:	4303      	orrs	r3, r0
 800251e:	08fa      	lsrs	r2, r7, #3
 8002520:	e65e      	b.n	80021e0 <__aeabi_dsub+0x328>
 8002522:	003a      	movs	r2, r7
 8002524:	08db      	lsrs	r3, r3, #3
 8002526:	4302      	orrs	r2, r0
 8002528:	d100      	bne.n	800252c <__aeabi_dsub+0x674>
 800252a:	e682      	b.n	8002232 <__aeabi_dsub+0x37a>
 800252c:	464a      	mov	r2, r9
 800252e:	0752      	lsls	r2, r2, #29
 8002530:	2480      	movs	r4, #128	; 0x80
 8002532:	4313      	orrs	r3, r2
 8002534:	464a      	mov	r2, r9
 8002536:	0324      	lsls	r4, r4, #12
 8002538:	08d2      	lsrs	r2, r2, #3
 800253a:	4222      	tst	r2, r4
 800253c:	d007      	beq.n	800254e <__aeabi_dsub+0x696>
 800253e:	08fe      	lsrs	r6, r7, #3
 8002540:	4226      	tst	r6, r4
 8002542:	d104      	bne.n	800254e <__aeabi_dsub+0x696>
 8002544:	465d      	mov	r5, fp
 8002546:	0032      	movs	r2, r6
 8002548:	08c3      	lsrs	r3, r0, #3
 800254a:	077f      	lsls	r7, r7, #29
 800254c:	433b      	orrs	r3, r7
 800254e:	0f59      	lsrs	r1, r3, #29
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	08db      	lsrs	r3, r3, #3
 8002554:	0749      	lsls	r1, r1, #29
 8002556:	430b      	orrs	r3, r1
 8002558:	e670      	b.n	800223c <__aeabi_dsub+0x384>
 800255a:	08c0      	lsrs	r0, r0, #3
 800255c:	077b      	lsls	r3, r7, #29
 800255e:	4303      	orrs	r3, r0
 8002560:	08fa      	lsrs	r2, r7, #3
 8002562:	e640      	b.n	80021e6 <__aeabi_dsub+0x32e>
 8002564:	464c      	mov	r4, r9
 8002566:	3920      	subs	r1, #32
 8002568:	40cc      	lsrs	r4, r1
 800256a:	4661      	mov	r1, ip
 800256c:	2920      	cmp	r1, #32
 800256e:	d006      	beq.n	800257e <__aeabi_dsub+0x6c6>
 8002570:	4666      	mov	r6, ip
 8002572:	2140      	movs	r1, #64	; 0x40
 8002574:	1b89      	subs	r1, r1, r6
 8002576:	464e      	mov	r6, r9
 8002578:	408e      	lsls	r6, r1
 800257a:	4333      	orrs	r3, r6
 800257c:	4698      	mov	r8, r3
 800257e:	4643      	mov	r3, r8
 8002580:	1e59      	subs	r1, r3, #1
 8002582:	418b      	sbcs	r3, r1
 8002584:	431c      	orrs	r4, r3
 8002586:	e5d8      	b.n	800213a <__aeabi_dsub+0x282>
 8002588:	181c      	adds	r4, r3, r0
 800258a:	4284      	cmp	r4, r0
 800258c:	4180      	sbcs	r0, r0
 800258e:	444f      	add	r7, r9
 8002590:	46ba      	mov	sl, r7
 8002592:	4240      	negs	r0, r0
 8002594:	4482      	add	sl, r0
 8002596:	e6d9      	b.n	800234c <__aeabi_dsub+0x494>
 8002598:	4653      	mov	r3, sl
 800259a:	4323      	orrs	r3, r4
 800259c:	d100      	bne.n	80025a0 <__aeabi_dsub+0x6e8>
 800259e:	e6cb      	b.n	8002338 <__aeabi_dsub+0x480>
 80025a0:	e614      	b.n	80021cc <__aeabi_dsub+0x314>
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	000007ff 	.word	0x000007ff
 80025a8:	ff7fffff 	.word	0xff7fffff
 80025ac:	000007fe 	.word	0x000007fe
 80025b0:	2300      	movs	r3, #0
 80025b2:	4a01      	ldr	r2, [pc, #4]	; (80025b8 <__aeabi_dsub+0x700>)
 80025b4:	001c      	movs	r4, r3
 80025b6:	e529      	b.n	800200c <__aeabi_dsub+0x154>
 80025b8:	000007ff 	.word	0x000007ff

080025bc <__aeabi_dcmpun>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	0005      	movs	r5, r0
 80025c0:	480c      	ldr	r0, [pc, #48]	; (80025f4 <__aeabi_dcmpun+0x38>)
 80025c2:	031c      	lsls	r4, r3, #12
 80025c4:	0016      	movs	r6, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	030a      	lsls	r2, r1, #12
 80025ca:	0049      	lsls	r1, r1, #1
 80025cc:	0b12      	lsrs	r2, r2, #12
 80025ce:	0d49      	lsrs	r1, r1, #21
 80025d0:	0b24      	lsrs	r4, r4, #12
 80025d2:	0d5b      	lsrs	r3, r3, #21
 80025d4:	4281      	cmp	r1, r0
 80025d6:	d008      	beq.n	80025ea <__aeabi_dcmpun+0x2e>
 80025d8:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <__aeabi_dcmpun+0x38>)
 80025da:	2000      	movs	r0, #0
 80025dc:	4293      	cmp	r3, r2
 80025de:	d103      	bne.n	80025e8 <__aeabi_dcmpun+0x2c>
 80025e0:	0020      	movs	r0, r4
 80025e2:	4330      	orrs	r0, r6
 80025e4:	1e43      	subs	r3, r0, #1
 80025e6:	4198      	sbcs	r0, r3
 80025e8:	bd70      	pop	{r4, r5, r6, pc}
 80025ea:	2001      	movs	r0, #1
 80025ec:	432a      	orrs	r2, r5
 80025ee:	d1fb      	bne.n	80025e8 <__aeabi_dcmpun+0x2c>
 80025f0:	e7f2      	b.n	80025d8 <__aeabi_dcmpun+0x1c>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	000007ff 	.word	0x000007ff

080025f8 <__aeabi_d2iz>:
 80025f8:	000a      	movs	r2, r1
 80025fa:	b530      	push	{r4, r5, lr}
 80025fc:	4c13      	ldr	r4, [pc, #76]	; (800264c <__aeabi_d2iz+0x54>)
 80025fe:	0053      	lsls	r3, r2, #1
 8002600:	0309      	lsls	r1, r1, #12
 8002602:	0005      	movs	r5, r0
 8002604:	0b09      	lsrs	r1, r1, #12
 8002606:	2000      	movs	r0, #0
 8002608:	0d5b      	lsrs	r3, r3, #21
 800260a:	0fd2      	lsrs	r2, r2, #31
 800260c:	42a3      	cmp	r3, r4
 800260e:	dd04      	ble.n	800261a <__aeabi_d2iz+0x22>
 8002610:	480f      	ldr	r0, [pc, #60]	; (8002650 <__aeabi_d2iz+0x58>)
 8002612:	4283      	cmp	r3, r0
 8002614:	dd02      	ble.n	800261c <__aeabi_d2iz+0x24>
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <__aeabi_d2iz+0x5c>)
 8002618:	18d0      	adds	r0, r2, r3
 800261a:	bd30      	pop	{r4, r5, pc}
 800261c:	2080      	movs	r0, #128	; 0x80
 800261e:	0340      	lsls	r0, r0, #13
 8002620:	4301      	orrs	r1, r0
 8002622:	480d      	ldr	r0, [pc, #52]	; (8002658 <__aeabi_d2iz+0x60>)
 8002624:	1ac0      	subs	r0, r0, r3
 8002626:	281f      	cmp	r0, #31
 8002628:	dd08      	ble.n	800263c <__aeabi_d2iz+0x44>
 800262a:	480c      	ldr	r0, [pc, #48]	; (800265c <__aeabi_d2iz+0x64>)
 800262c:	1ac3      	subs	r3, r0, r3
 800262e:	40d9      	lsrs	r1, r3
 8002630:	000b      	movs	r3, r1
 8002632:	4258      	negs	r0, r3
 8002634:	2a00      	cmp	r2, #0
 8002636:	d1f0      	bne.n	800261a <__aeabi_d2iz+0x22>
 8002638:	0018      	movs	r0, r3
 800263a:	e7ee      	b.n	800261a <__aeabi_d2iz+0x22>
 800263c:	4c08      	ldr	r4, [pc, #32]	; (8002660 <__aeabi_d2iz+0x68>)
 800263e:	40c5      	lsrs	r5, r0
 8002640:	46a4      	mov	ip, r4
 8002642:	4463      	add	r3, ip
 8002644:	4099      	lsls	r1, r3
 8002646:	000b      	movs	r3, r1
 8002648:	432b      	orrs	r3, r5
 800264a:	e7f2      	b.n	8002632 <__aeabi_d2iz+0x3a>
 800264c:	000003fe 	.word	0x000003fe
 8002650:	0000041d 	.word	0x0000041d
 8002654:	7fffffff 	.word	0x7fffffff
 8002658:	00000433 	.word	0x00000433
 800265c:	00000413 	.word	0x00000413
 8002660:	fffffbed 	.word	0xfffffbed

08002664 <__aeabi_i2d>:
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	2800      	cmp	r0, #0
 8002668:	d016      	beq.n	8002698 <__aeabi_i2d+0x34>
 800266a:	17c3      	asrs	r3, r0, #31
 800266c:	18c5      	adds	r5, r0, r3
 800266e:	405d      	eors	r5, r3
 8002670:	0fc4      	lsrs	r4, r0, #31
 8002672:	0028      	movs	r0, r5
 8002674:	f000 f91a 	bl	80028ac <__clzsi2>
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <__aeabi_i2d+0x5c>)
 800267a:	1a1b      	subs	r3, r3, r0
 800267c:	280a      	cmp	r0, #10
 800267e:	dc16      	bgt.n	80026ae <__aeabi_i2d+0x4a>
 8002680:	0002      	movs	r2, r0
 8002682:	002e      	movs	r6, r5
 8002684:	3215      	adds	r2, #21
 8002686:	4096      	lsls	r6, r2
 8002688:	220b      	movs	r2, #11
 800268a:	1a12      	subs	r2, r2, r0
 800268c:	40d5      	lsrs	r5, r2
 800268e:	055b      	lsls	r3, r3, #21
 8002690:	032d      	lsls	r5, r5, #12
 8002692:	0b2d      	lsrs	r5, r5, #12
 8002694:	0d5b      	lsrs	r3, r3, #21
 8002696:	e003      	b.n	80026a0 <__aeabi_i2d+0x3c>
 8002698:	2400      	movs	r4, #0
 800269a:	2300      	movs	r3, #0
 800269c:	2500      	movs	r5, #0
 800269e:	2600      	movs	r6, #0
 80026a0:	051b      	lsls	r3, r3, #20
 80026a2:	432b      	orrs	r3, r5
 80026a4:	07e4      	lsls	r4, r4, #31
 80026a6:	4323      	orrs	r3, r4
 80026a8:	0030      	movs	r0, r6
 80026aa:	0019      	movs	r1, r3
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
 80026ae:	380b      	subs	r0, #11
 80026b0:	4085      	lsls	r5, r0
 80026b2:	055b      	lsls	r3, r3, #21
 80026b4:	032d      	lsls	r5, r5, #12
 80026b6:	2600      	movs	r6, #0
 80026b8:	0b2d      	lsrs	r5, r5, #12
 80026ba:	0d5b      	lsrs	r3, r3, #21
 80026bc:	e7f0      	b.n	80026a0 <__aeabi_i2d+0x3c>
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	0000041e 	.word	0x0000041e

080026c4 <__aeabi_ui2d>:
 80026c4:	b510      	push	{r4, lr}
 80026c6:	1e04      	subs	r4, r0, #0
 80026c8:	d010      	beq.n	80026ec <__aeabi_ui2d+0x28>
 80026ca:	f000 f8ef 	bl	80028ac <__clzsi2>
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <__aeabi_ui2d+0x48>)
 80026d0:	1a1b      	subs	r3, r3, r0
 80026d2:	280a      	cmp	r0, #10
 80026d4:	dc11      	bgt.n	80026fa <__aeabi_ui2d+0x36>
 80026d6:	220b      	movs	r2, #11
 80026d8:	0021      	movs	r1, r4
 80026da:	1a12      	subs	r2, r2, r0
 80026dc:	40d1      	lsrs	r1, r2
 80026de:	3015      	adds	r0, #21
 80026e0:	030a      	lsls	r2, r1, #12
 80026e2:	055b      	lsls	r3, r3, #21
 80026e4:	4084      	lsls	r4, r0
 80026e6:	0b12      	lsrs	r2, r2, #12
 80026e8:	0d5b      	lsrs	r3, r3, #21
 80026ea:	e001      	b.n	80026f0 <__aeabi_ui2d+0x2c>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2200      	movs	r2, #0
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0020      	movs	r0, r4
 80026f6:	0019      	movs	r1, r3
 80026f8:	bd10      	pop	{r4, pc}
 80026fa:	0022      	movs	r2, r4
 80026fc:	380b      	subs	r0, #11
 80026fe:	4082      	lsls	r2, r0
 8002700:	055b      	lsls	r3, r3, #21
 8002702:	0312      	lsls	r2, r2, #12
 8002704:	2400      	movs	r4, #0
 8002706:	0b12      	lsrs	r2, r2, #12
 8002708:	0d5b      	lsrs	r3, r3, #21
 800270a:	e7f1      	b.n	80026f0 <__aeabi_ui2d+0x2c>
 800270c:	0000041e 	.word	0x0000041e

08002710 <__aeabi_f2d>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	0242      	lsls	r2, r0, #9
 8002714:	0043      	lsls	r3, r0, #1
 8002716:	0fc4      	lsrs	r4, r0, #31
 8002718:	20fe      	movs	r0, #254	; 0xfe
 800271a:	0e1b      	lsrs	r3, r3, #24
 800271c:	1c59      	adds	r1, r3, #1
 800271e:	0a55      	lsrs	r5, r2, #9
 8002720:	4208      	tst	r0, r1
 8002722:	d00c      	beq.n	800273e <__aeabi_f2d+0x2e>
 8002724:	21e0      	movs	r1, #224	; 0xe0
 8002726:	0089      	lsls	r1, r1, #2
 8002728:	468c      	mov	ip, r1
 800272a:	076d      	lsls	r5, r5, #29
 800272c:	0b12      	lsrs	r2, r2, #12
 800272e:	4463      	add	r3, ip
 8002730:	051b      	lsls	r3, r3, #20
 8002732:	4313      	orrs	r3, r2
 8002734:	07e4      	lsls	r4, r4, #31
 8002736:	4323      	orrs	r3, r4
 8002738:	0028      	movs	r0, r5
 800273a:	0019      	movs	r1, r3
 800273c:	bd70      	pop	{r4, r5, r6, pc}
 800273e:	2b00      	cmp	r3, #0
 8002740:	d114      	bne.n	800276c <__aeabi_f2d+0x5c>
 8002742:	2d00      	cmp	r5, #0
 8002744:	d01b      	beq.n	800277e <__aeabi_f2d+0x6e>
 8002746:	0028      	movs	r0, r5
 8002748:	f000 f8b0 	bl	80028ac <__clzsi2>
 800274c:	280a      	cmp	r0, #10
 800274e:	dc1c      	bgt.n	800278a <__aeabi_f2d+0x7a>
 8002750:	230b      	movs	r3, #11
 8002752:	002a      	movs	r2, r5
 8002754:	1a1b      	subs	r3, r3, r0
 8002756:	40da      	lsrs	r2, r3
 8002758:	0003      	movs	r3, r0
 800275a:	3315      	adds	r3, #21
 800275c:	409d      	lsls	r5, r3
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <__aeabi_f2d+0x88>)
 8002760:	0312      	lsls	r2, r2, #12
 8002762:	1a1b      	subs	r3, r3, r0
 8002764:	055b      	lsls	r3, r3, #21
 8002766:	0b12      	lsrs	r2, r2, #12
 8002768:	0d5b      	lsrs	r3, r3, #21
 800276a:	e7e1      	b.n	8002730 <__aeabi_f2d+0x20>
 800276c:	2d00      	cmp	r5, #0
 800276e:	d009      	beq.n	8002784 <__aeabi_f2d+0x74>
 8002770:	0b13      	lsrs	r3, r2, #12
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	0312      	lsls	r2, r2, #12
 8002776:	431a      	orrs	r2, r3
 8002778:	076d      	lsls	r5, r5, #29
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <__aeabi_f2d+0x8c>)
 800277c:	e7d8      	b.n	8002730 <__aeabi_f2d+0x20>
 800277e:	2300      	movs	r3, #0
 8002780:	2200      	movs	r2, #0
 8002782:	e7d5      	b.n	8002730 <__aeabi_f2d+0x20>
 8002784:	2200      	movs	r2, #0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <__aeabi_f2d+0x8c>)
 8002788:	e7d2      	b.n	8002730 <__aeabi_f2d+0x20>
 800278a:	0003      	movs	r3, r0
 800278c:	002a      	movs	r2, r5
 800278e:	3b0b      	subs	r3, #11
 8002790:	409a      	lsls	r2, r3
 8002792:	2500      	movs	r5, #0
 8002794:	e7e3      	b.n	800275e <__aeabi_f2d+0x4e>
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	00000389 	.word	0x00000389
 800279c:	000007ff 	.word	0x000007ff

080027a0 <__aeabi_d2f>:
 80027a0:	0002      	movs	r2, r0
 80027a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a4:	004b      	lsls	r3, r1, #1
 80027a6:	030d      	lsls	r5, r1, #12
 80027a8:	0f40      	lsrs	r0, r0, #29
 80027aa:	0d5b      	lsrs	r3, r3, #21
 80027ac:	0fcc      	lsrs	r4, r1, #31
 80027ae:	0a6d      	lsrs	r5, r5, #9
 80027b0:	493a      	ldr	r1, [pc, #232]	; (800289c <__aeabi_d2f+0xfc>)
 80027b2:	4305      	orrs	r5, r0
 80027b4:	1c58      	adds	r0, r3, #1
 80027b6:	00d7      	lsls	r7, r2, #3
 80027b8:	4208      	tst	r0, r1
 80027ba:	d00a      	beq.n	80027d2 <__aeabi_d2f+0x32>
 80027bc:	4938      	ldr	r1, [pc, #224]	; (80028a0 <__aeabi_d2f+0x100>)
 80027be:	1859      	adds	r1, r3, r1
 80027c0:	29fe      	cmp	r1, #254	; 0xfe
 80027c2:	dd16      	ble.n	80027f2 <__aeabi_d2f+0x52>
 80027c4:	20ff      	movs	r0, #255	; 0xff
 80027c6:	2200      	movs	r2, #0
 80027c8:	05c0      	lsls	r0, r0, #23
 80027ca:	4310      	orrs	r0, r2
 80027cc:	07e4      	lsls	r4, r4, #31
 80027ce:	4320      	orrs	r0, r4
 80027d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <__aeabi_d2f+0x44>
 80027d6:	433d      	orrs	r5, r7
 80027d8:	d026      	beq.n	8002828 <__aeabi_d2f+0x88>
 80027da:	2205      	movs	r2, #5
 80027dc:	0192      	lsls	r2, r2, #6
 80027de:	0a52      	lsrs	r2, r2, #9
 80027e0:	b2d8      	uxtb	r0, r3
 80027e2:	e7f1      	b.n	80027c8 <__aeabi_d2f+0x28>
 80027e4:	432f      	orrs	r7, r5
 80027e6:	d0ed      	beq.n	80027c4 <__aeabi_d2f+0x24>
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	03d2      	lsls	r2, r2, #15
 80027ec:	20ff      	movs	r0, #255	; 0xff
 80027ee:	432a      	orrs	r2, r5
 80027f0:	e7ea      	b.n	80027c8 <__aeabi_d2f+0x28>
 80027f2:	2900      	cmp	r1, #0
 80027f4:	dd1b      	ble.n	800282e <__aeabi_d2f+0x8e>
 80027f6:	0192      	lsls	r2, r2, #6
 80027f8:	1e50      	subs	r0, r2, #1
 80027fa:	4182      	sbcs	r2, r0
 80027fc:	00ed      	lsls	r5, r5, #3
 80027fe:	0f7f      	lsrs	r7, r7, #29
 8002800:	432a      	orrs	r2, r5
 8002802:	433a      	orrs	r2, r7
 8002804:	0753      	lsls	r3, r2, #29
 8002806:	d047      	beq.n	8002898 <__aeabi_d2f+0xf8>
 8002808:	230f      	movs	r3, #15
 800280a:	4013      	ands	r3, r2
 800280c:	2b04      	cmp	r3, #4
 800280e:	d000      	beq.n	8002812 <__aeabi_d2f+0x72>
 8002810:	3204      	adds	r2, #4
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	04db      	lsls	r3, r3, #19
 8002816:	4013      	ands	r3, r2
 8002818:	d03e      	beq.n	8002898 <__aeabi_d2f+0xf8>
 800281a:	1c48      	adds	r0, r1, #1
 800281c:	29fe      	cmp	r1, #254	; 0xfe
 800281e:	d0d1      	beq.n	80027c4 <__aeabi_d2f+0x24>
 8002820:	0192      	lsls	r2, r2, #6
 8002822:	0a52      	lsrs	r2, r2, #9
 8002824:	b2c0      	uxtb	r0, r0
 8002826:	e7cf      	b.n	80027c8 <__aeabi_d2f+0x28>
 8002828:	2000      	movs	r0, #0
 800282a:	2200      	movs	r2, #0
 800282c:	e7cc      	b.n	80027c8 <__aeabi_d2f+0x28>
 800282e:	000a      	movs	r2, r1
 8002830:	3217      	adds	r2, #23
 8002832:	db2f      	blt.n	8002894 <__aeabi_d2f+0xf4>
 8002834:	2680      	movs	r6, #128	; 0x80
 8002836:	0436      	lsls	r6, r6, #16
 8002838:	432e      	orrs	r6, r5
 800283a:	251e      	movs	r5, #30
 800283c:	1a6d      	subs	r5, r5, r1
 800283e:	2d1f      	cmp	r5, #31
 8002840:	dd11      	ble.n	8002866 <__aeabi_d2f+0xc6>
 8002842:	2202      	movs	r2, #2
 8002844:	4252      	negs	r2, r2
 8002846:	1a52      	subs	r2, r2, r1
 8002848:	0031      	movs	r1, r6
 800284a:	40d1      	lsrs	r1, r2
 800284c:	2d20      	cmp	r5, #32
 800284e:	d004      	beq.n	800285a <__aeabi_d2f+0xba>
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <__aeabi_d2f+0x104>)
 8002852:	4694      	mov	ip, r2
 8002854:	4463      	add	r3, ip
 8002856:	409e      	lsls	r6, r3
 8002858:	4337      	orrs	r7, r6
 800285a:	003a      	movs	r2, r7
 800285c:	1e53      	subs	r3, r2, #1
 800285e:	419a      	sbcs	r2, r3
 8002860:	430a      	orrs	r2, r1
 8002862:	2100      	movs	r1, #0
 8002864:	e7ce      	b.n	8002804 <__aeabi_d2f+0x64>
 8002866:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <__aeabi_d2f+0x108>)
 8002868:	0038      	movs	r0, r7
 800286a:	4694      	mov	ip, r2
 800286c:	4463      	add	r3, ip
 800286e:	4098      	lsls	r0, r3
 8002870:	003a      	movs	r2, r7
 8002872:	1e41      	subs	r1, r0, #1
 8002874:	4188      	sbcs	r0, r1
 8002876:	409e      	lsls	r6, r3
 8002878:	40ea      	lsrs	r2, r5
 800287a:	4330      	orrs	r0, r6
 800287c:	4302      	orrs	r2, r0
 800287e:	2100      	movs	r1, #0
 8002880:	0753      	lsls	r3, r2, #29
 8002882:	d1c1      	bne.n	8002808 <__aeabi_d2f+0x68>
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	0013      	movs	r3, r2
 8002888:	04c9      	lsls	r1, r1, #19
 800288a:	2001      	movs	r0, #1
 800288c:	400b      	ands	r3, r1
 800288e:	420a      	tst	r2, r1
 8002890:	d1c6      	bne.n	8002820 <__aeabi_d2f+0x80>
 8002892:	e7a3      	b.n	80027dc <__aeabi_d2f+0x3c>
 8002894:	2300      	movs	r3, #0
 8002896:	e7a0      	b.n	80027da <__aeabi_d2f+0x3a>
 8002898:	000b      	movs	r3, r1
 800289a:	e79f      	b.n	80027dc <__aeabi_d2f+0x3c>
 800289c:	000007fe 	.word	0x000007fe
 80028a0:	fffffc80 	.word	0xfffffc80
 80028a4:	fffffca2 	.word	0xfffffca2
 80028a8:	fffffc82 	.word	0xfffffc82

080028ac <__clzsi2>:
 80028ac:	211c      	movs	r1, #28
 80028ae:	2301      	movs	r3, #1
 80028b0:	041b      	lsls	r3, r3, #16
 80028b2:	4298      	cmp	r0, r3
 80028b4:	d301      	bcc.n	80028ba <__clzsi2+0xe>
 80028b6:	0c00      	lsrs	r0, r0, #16
 80028b8:	3910      	subs	r1, #16
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	4298      	cmp	r0, r3
 80028be:	d301      	bcc.n	80028c4 <__clzsi2+0x18>
 80028c0:	0a00      	lsrs	r0, r0, #8
 80028c2:	3908      	subs	r1, #8
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	4298      	cmp	r0, r3
 80028c8:	d301      	bcc.n	80028ce <__clzsi2+0x22>
 80028ca:	0900      	lsrs	r0, r0, #4
 80028cc:	3904      	subs	r1, #4
 80028ce:	a202      	add	r2, pc, #8	; (adr r2, 80028d8 <__clzsi2+0x2c>)
 80028d0:	5c10      	ldrb	r0, [r2, r0]
 80028d2:	1840      	adds	r0, r0, r1
 80028d4:	4770      	bx	lr
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	02020304 	.word	0x02020304
 80028dc:	01010101 	.word	0x01010101
	...

080028e8 <__clzdi2>:
 80028e8:	b510      	push	{r4, lr}
 80028ea:	2900      	cmp	r1, #0
 80028ec:	d103      	bne.n	80028f6 <__clzdi2+0xe>
 80028ee:	f7ff ffdd 	bl	80028ac <__clzsi2>
 80028f2:	3020      	adds	r0, #32
 80028f4:	e002      	b.n	80028fc <__clzdi2+0x14>
 80028f6:	0008      	movs	r0, r1
 80028f8:	f7ff ffd8 	bl	80028ac <__clzsi2>
 80028fc:	bd10      	pop	{r4, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)

08002900 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002904:	23a0      	movs	r3, #160	; 0xa0
 8002906:	05db      	lsls	r3, r3, #23
 8002908:	2200      	movs	r2, #0
 800290a:	2110      	movs	r1, #16
 800290c:	0018      	movs	r0, r3
 800290e:	f002 f806 	bl	800491e <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002912:	2001      	movs	r0, #1
 8002914:	f001 fbb4 	bl	8004080 <HAL_Delay>
}
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002922:	23a0      	movs	r3, #160	; 0xa0
 8002924:	05db      	lsls	r3, r3, #23
 8002926:	2201      	movs	r2, #1
 8002928:	2110      	movs	r1, #16
 800292a:	0018      	movs	r0, r3
 800292c:	f001 fff7 	bl	800491e <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002930:	2001      	movs	r0, #1
 8002932:	f001 fba5 	bl	8004080 <HAL_Delay>
}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	0002      	movs	r2, r0
 8002944:	1dfb      	adds	r3, r7, #7
 8002946:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <SPI_TxByte+0x30>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2202      	movs	r2, #2
 8002952:	4013      	ands	r3, r2
 8002954:	2b02      	cmp	r3, #2
 8002956:	d1f8      	bne.n	800294a <SPI_TxByte+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002958:	1df9      	adds	r1, r7, #7
 800295a:	4804      	ldr	r0, [pc, #16]	; (800296c <SPI_TxByte+0x30>)
 800295c:	2364      	movs	r3, #100	; 0x64
 800295e:	2201      	movs	r2, #1
 8002960:	f002 fded 	bl	800553e <HAL_SPI_Transmit>
}
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2000026c 	.word	0x2000026c

08002970 <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	000a      	movs	r2, r1
 800297a:	1cbb      	adds	r3, r7, #2
 800297c:	801a      	strh	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <SPI_TxBuffer+0x34>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2202      	movs	r2, #2
 8002988:	4013      	ands	r3, r2
 800298a:	2b02      	cmp	r3, #2
 800298c:	d1f8      	bne.n	8002980 <SPI_TxBuffer+0x10>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800298e:	1cbb      	adds	r3, r7, #2
 8002990:	881a      	ldrh	r2, [r3, #0]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4803      	ldr	r0, [pc, #12]	; (80029a4 <SPI_TxBuffer+0x34>)
 8002996:	2364      	movs	r3, #100	; 0x64
 8002998:	f002 fdd1 	bl	800553e <HAL_SPI_Transmit>
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	2000026c 	.word	0x2000026c

080029a8 <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80029ae:	1dfb      	adds	r3, r7, #7
 80029b0:	22ff      	movs	r2, #255	; 0xff
 80029b2:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <SPI_RxByte+0x38>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2202      	movs	r2, #2
 80029be:	4013      	ands	r3, r2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d1f8      	bne.n	80029b6 <SPI_RxByte+0xe>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80029c4:	1dba      	adds	r2, r7, #6
 80029c6:	1df9      	adds	r1, r7, #7
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <SPI_RxByte+0x38>)
 80029ca:	2364      	movs	r3, #100	; 0x64
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2301      	movs	r3, #1
 80029d0:	f002 ff12 	bl	80057f8 <HAL_SPI_TransmitReceive>
  return data;
 80029d4:	1dbb      	adds	r3, r7, #6
 80029d6:	781b      	ldrb	r3, [r3, #0]
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	2000026c 	.word	0x2000026c

080029e4 <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80029ec:	f7ff ffdc 	bl	80029a8 <SPI_RxByte>
 80029f0:	0003      	movs	r3, r0
 80029f2:	001a      	movs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	701a      	strb	r2, [r3, #0]
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <SD_ReadyWait+0x34>)
 8002a08:	22fa      	movs	r2, #250	; 0xfa
 8002a0a:	0052      	lsls	r2, r2, #1
 8002a0c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8002a0e:	1dfc      	adds	r4, r7, #7
 8002a10:	f7ff ffca 	bl	80029a8 <SPI_RxByte>
 8002a14:	0003      	movs	r3, r0
 8002a16:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2bff      	cmp	r3, #255	; 0xff
 8002a1e:	d003      	beq.n	8002a28 <SD_ReadyWait+0x28>
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <SD_ReadyWait+0x34>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f2      	bne.n	8002a0e <SD_ReadyWait+0xe>
  return res;
 8002a28:	1dfb      	adds	r3, r7, #7
 8002a2a:	781b      	ldrb	r3, [r3, #0]
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b003      	add	sp, #12
 8002a32:	bd90      	pop	{r4, r7, pc}
 8002a34:	2000020a 	.word	0x2000020a

08002a38 <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <SD_PowerOn+0x88>)
 8002a40:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8002a42:	f7ff ff6c 	bl	800291e <DESELECT>
  for(int i = 0; i < 10; i++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	e005      	b.n	8002a58 <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 8002a4c:	20ff      	movs	r0, #255	; 0xff
 8002a4e:	f7ff ff75 	bl	800293c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	3301      	adds	r3, #1
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b09      	cmp	r3, #9
 8002a5c:	ddf6      	ble.n	8002a4c <SD_PowerOn+0x14>
  }
  /* slave select */
  SELECT();
 8002a5e:	f7ff ff4f 	bl	8002900 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8002a62:	003b      	movs	r3, r7
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	701a      	strb	r2, [r3, #0]
  args[1] = 0;
 8002a68:	003b      	movs	r3, r7
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	705a      	strb	r2, [r3, #1]
  args[2] = 0;
 8002a6e:	003b      	movs	r3, r7
 8002a70:	2200      	movs	r2, #0
 8002a72:	709a      	strb	r2, [r3, #2]
  args[3] = 0;
 8002a74:	003b      	movs	r3, r7
 8002a76:	2200      	movs	r2, #0
 8002a78:	70da      	strb	r2, [r3, #3]
  args[4] = 0;
 8002a7a:	003b      	movs	r3, r7
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	711a      	strb	r2, [r3, #4]
  args[5] = 0x95;   /* CRC */
 8002a80:	003b      	movs	r3, r7
 8002a82:	2295      	movs	r2, #149	; 0x95
 8002a84:	715a      	strb	r2, [r3, #5]
  SPI_TxBuffer(args, sizeof(args));
 8002a86:	003b      	movs	r3, r7
 8002a88:	2106      	movs	r1, #6
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f7ff ff70 	bl	8002970 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8002a90:	e002      	b.n	8002a98 <SD_PowerOn+0x60>
  {
    cnt--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8002a98:	f7ff ff86 	bl	80029a8 <SPI_RxByte>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d002      	beq.n	8002aa8 <SD_PowerOn+0x70>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f4      	bne.n	8002a92 <SD_PowerOn+0x5a>
  }
  DESELECT();
 8002aa8:	f7ff ff39 	bl	800291e <DESELECT>
  SPI_TxByte(0XFF);
 8002aac:	20ff      	movs	r0, #255	; 0xff
 8002aae:	f7ff ff45 	bl	800293c <SPI_TxByte>
  PowerFlag = 1;
 8002ab2:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <SD_PowerOn+0x8c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b004      	add	sp, #16
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	00001fff 	.word	0x00001fff
 8002ac4:	2000020d 	.word	0x2000020d

08002ac8 <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002acc:	4b02      	ldr	r3, [pc, #8]	; (8002ad8 <SD_PowerOff+0x10>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	2000020d 	.word	0x2000020d

08002adc <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  return PowerFlag;
 8002ae0:	4b02      	ldr	r3, [pc, #8]	; (8002aec <SD_CheckPower+0x10>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	2000020d 	.word	0x2000020d

08002af0 <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002af0:	b5b0      	push	{r4, r5, r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <SD_RxDataBlock+0x64>)
 8002afc:	22c8      	movs	r2, #200	; 0xc8
 8002afe:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8002b00:	250f      	movs	r5, #15
 8002b02:	197c      	adds	r4, r7, r5
 8002b04:	f7ff ff50 	bl	80029a8 <SPI_RxByte>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 8002b0c:	197b      	adds	r3, r7, r5
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2bff      	cmp	r3, #255	; 0xff
 8002b12:	d103      	bne.n	8002b1c <SD_RxDataBlock+0x2c>
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <SD_RxDataBlock+0x64>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f1      	bne.n	8002b00 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8002b1c:	230f      	movs	r3, #15
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2bfe      	cmp	r3, #254	; 0xfe
 8002b24:	d001      	beq.n	8002b2a <SD_RxDataBlock+0x3a>
 8002b26:	2300      	movs	r3, #0
 8002b28:	e00f      	b.n	8002b4a <SD_RxDataBlock+0x5a>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7ff ff57 	bl	80029e4 <SPI_RxBytePtr>
  } while(len--);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	603a      	str	r2, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f4      	bne.n	8002b2a <SD_RxDataBlock+0x3a>
  /* discard CRC */
  SPI_RxByte();
 8002b40:	f7ff ff32 	bl	80029a8 <SPI_RxByte>
  SPI_RxByte();
 8002b44:	f7ff ff30 	bl	80029a8 <SPI_RxByte>
  return TRUE;
 8002b48:	2301      	movs	r3, #1
}
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b004      	add	sp, #16
 8002b50:	bdb0      	pop	{r4, r5, r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	20000208 	.word	0x20000208

08002b58 <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002b58:	b5b0      	push	{r4, r5, r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	000a      	movs	r2, r1
 8002b62:	1cfb      	adds	r3, r7, #3
 8002b64:	701a      	strb	r2, [r3, #0]
  uint8_t resp;
  uint8_t i = 0;
 8002b66:	230e      	movs	r3, #14
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8002b6e:	f7ff ff47 	bl	8002a00 <SD_ReadyWait>
 8002b72:	0003      	movs	r3, r0
 8002b74:	2bff      	cmp	r3, #255	; 0xff
 8002b76:	d001      	beq.n	8002b7c <SD_TxDataBlock+0x24>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e03c      	b.n	8002bf6 <SD_TxDataBlock+0x9e>
  /* transmit token */
  SPI_TxByte(token);
 8002b7c:	1cfb      	adds	r3, r7, #3
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7ff fedb 	bl	800293c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8002b86:	1cfb      	adds	r3, r7, #3
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2bfd      	cmp	r3, #253	; 0xfd
 8002b8c:	d029      	beq.n	8002be2 <SD_TxDataBlock+0x8a>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	009a      	lsls	r2, r3, #2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0011      	movs	r1, r2
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7ff feea 	bl	8002970 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8002b9c:	f7ff ff04 	bl	80029a8 <SPI_RxByte>
    SPI_RxByte();
 8002ba0:	f7ff ff02 	bl	80029a8 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8002ba4:	e011      	b.n	8002bca <SD_TxDataBlock+0x72>
    {
      resp = SPI_RxByte();
 8002ba6:	250f      	movs	r5, #15
 8002ba8:	197c      	adds	r4, r7, r5
 8002baa:	f7ff fefd 	bl	80029a8 <SPI_RxByte>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	7023      	strb	r3, [r4, #0]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8002bb2:	197b      	adds	r3, r7, r5
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	221f      	movs	r2, #31
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d00b      	beq.n	8002bd6 <SD_TxDataBlock+0x7e>
      i++;
 8002bbe:	210e      	movs	r1, #14
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	781a      	ldrb	r2, [r3, #0]
 8002bc4:	187b      	adds	r3, r7, r1
 8002bc6:	3201      	adds	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]
    while (i <= 64)
 8002bca:	230e      	movs	r3, #14
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	d9e8      	bls.n	8002ba6 <SD_TxDataBlock+0x4e>
 8002bd4:	e000      	b.n	8002bd8 <SD_TxDataBlock+0x80>
      if ((resp & 0x1F) == 0x05) break;
 8002bd6:	46c0      	nop			; (mov r8, r8)
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	f7ff fee5 	bl	80029a8 <SPI_RxByte>
 8002bde:	1e03      	subs	r3, r0, #0
 8002be0:	d0fb      	beq.n	8002bda <SD_TxDataBlock+0x82>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8002be2:	230f      	movs	r3, #15
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	221f      	movs	r2, #31
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	d101      	bne.n	8002bf4 <SD_TxDataBlock+0x9c>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <SD_TxDataBlock+0x9e>
  return FALSE;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b004      	add	sp, #16
 8002bfc:	bdb0      	pop	{r4, r5, r7, pc}

08002bfe <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002bfe:	b5b0      	push	{r4, r5, r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	0002      	movs	r2, r0
 8002c06:	6039      	str	r1, [r7, #0]
 8002c08:	1dfb      	adds	r3, r7, #7
 8002c0a:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002c0c:	f7ff fef8 	bl	8002a00 <SD_ReadyWait>
 8002c10:	0003      	movs	r3, r0
 8002c12:	2bff      	cmp	r3, #255	; 0xff
 8002c14:	d001      	beq.n	8002c1a <SD_SendCmd+0x1c>
 8002c16:	23ff      	movs	r3, #255	; 0xff
 8002c18:	e059      	b.n	8002cce <SD_SendCmd+0xd0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7ff fe8c 	bl	800293c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	0e1b      	lsrs	r3, r3, #24
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7ff fe86 	bl	800293c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	0c1b      	lsrs	r3, r3, #16
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7ff fe80 	bl	800293c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff fe7a 	bl	800293c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7ff fe75 	bl	800293c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d104      	bne.n	8002c64 <SD_SendCmd+0x66>
 8002c5a:	230f      	movs	r3, #15
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	2295      	movs	r2, #149	; 0x95
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e00c      	b.n	8002c7e <SD_SendCmd+0x80>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8002c64:	1dfb      	adds	r3, r7, #7
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b48      	cmp	r3, #72	; 0x48
 8002c6a:	d104      	bne.n	8002c76 <SD_SendCmd+0x78>
 8002c6c:	230f      	movs	r3, #15
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	2287      	movs	r2, #135	; 0x87
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e003      	b.n	8002c7e <SD_SendCmd+0x80>
  else crc = 1;
 8002c76:	230f      	movs	r3, #15
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
  /* transmit CRC */
  SPI_TxByte(crc);
 8002c7e:	230f      	movs	r3, #15
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7ff fe59 	bl	800293c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b4c      	cmp	r3, #76	; 0x4c
 8002c90:	d101      	bne.n	8002c96 <SD_SendCmd+0x98>
 8002c92:	f7ff fe89 	bl	80029a8 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8002c96:	230e      	movs	r3, #14
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	220a      	movs	r2, #10
 8002c9c:	701a      	strb	r2, [r3, #0]
  do {
    res = SPI_RxByte();
 8002c9e:	250d      	movs	r5, #13
 8002ca0:	197c      	adds	r4, r7, r5
 8002ca2:	f7ff fe81 	bl	80029a8 <SPI_RxByte>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 8002caa:	197b      	adds	r3, r7, r5
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b25b      	sxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	da09      	bge.n	8002cc8 <SD_SendCmd+0xca>
 8002cb4:	210e      	movs	r1, #14
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	187a      	adds	r2, r7, r1
 8002cba:	7812      	ldrb	r2, [r2, #0]
 8002cbc:	3a01      	subs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1ea      	bne.n	8002c9e <SD_SendCmd+0xa0>
  return res;
 8002cc8:	230d      	movs	r3, #13
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	781b      	ldrb	r3, [r3, #0]
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b004      	add	sp, #16
 8002cd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002cd8 <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8002cd8:	b5b0      	push	{r4, r5, r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	0002      	movs	r2, r0
 8002ce0:	1dfb      	adds	r3, r7, #7
 8002ce2:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8002ce4:	1dfb      	adds	r3, r7, #7
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <SD_disk_initialize+0x18>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0f2      	b.n	8002ed6 <SD_disk_initialize+0x1fe>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8002cf0:	4b7b      	ldr	r3, [pc, #492]	; (8002ee0 <SD_disk_initialize+0x208>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <SD_disk_initialize+0x2e>
 8002cfe:	4b78      	ldr	r3, [pc, #480]	; (8002ee0 <SD_disk_initialize+0x208>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	e0e7      	b.n	8002ed6 <SD_disk_initialize+0x1fe>
  /* power on */
  SD_PowerOn();
 8002d06:	f7ff fe97 	bl	8002a38 <SD_PowerOn>
  /* slave select */
  SELECT();
 8002d0a:	f7ff fdf9 	bl	8002900 <SELECT>
  /* check disk type */
  type = 0;
 8002d0e:	230e      	movs	r3, #14
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8002d16:	2100      	movs	r1, #0
 8002d18:	2040      	movs	r0, #64	; 0x40
 8002d1a:	f7ff ff70 	bl	8002bfe <SD_SendCmd>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d000      	beq.n	8002d26 <SD_disk_initialize+0x4e>
 8002d24:	e0bc      	b.n	8002ea0 <SD_disk_initialize+0x1c8>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8002d26:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <SD_disk_initialize+0x20c>)
 8002d28:	22fa      	movs	r2, #250	; 0xfa
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002d2e:	23d5      	movs	r3, #213	; 0xd5
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	0019      	movs	r1, r3
 8002d34:	2048      	movs	r0, #72	; 0x48
 8002d36:	f7ff ff62 	bl	8002bfe <SD_SendCmd>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d000      	beq.n	8002d42 <SD_disk_initialize+0x6a>
 8002d40:	e06b      	b.n	8002e1a <SD_disk_initialize+0x142>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8002d42:	230f      	movs	r3, #15
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e00e      	b.n	8002d6a <SD_disk_initialize+0x92>
      {
        ocr[n] = SPI_RxByte();
 8002d4c:	250f      	movs	r5, #15
 8002d4e:	197b      	adds	r3, r7, r5
 8002d50:	781c      	ldrb	r4, [r3, #0]
 8002d52:	f7ff fe29 	bl	80029a8 <SPI_RxByte>
 8002d56:	0003      	movs	r3, r0
 8002d58:	001a      	movs	r2, r3
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 8002d60:	197b      	adds	r3, r7, r5
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	197b      	adds	r3, r7, r5
 8002d66:	3201      	adds	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	230f      	movs	r3, #15
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d9eb      	bls.n	8002d4c <SD_disk_initialize+0x74>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002d74:	2208      	movs	r2, #8
 8002d76:	18bb      	adds	r3, r7, r2
 8002d78:	789b      	ldrb	r3, [r3, #2]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d000      	beq.n	8002d80 <SD_disk_initialize+0xa8>
 8002d7e:	e08f      	b.n	8002ea0 <SD_disk_initialize+0x1c8>
 8002d80:	18bb      	adds	r3, r7, r2
 8002d82:	78db      	ldrb	r3, [r3, #3]
 8002d84:	2baa      	cmp	r3, #170	; 0xaa
 8002d86:	d000      	beq.n	8002d8a <SD_disk_initialize+0xb2>
 8002d88:	e08a      	b.n	8002ea0 <SD_disk_initialize+0x1c8>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	2077      	movs	r0, #119	; 0x77
 8002d8e:	f7ff ff36 	bl	8002bfe <SD_SendCmd>
 8002d92:	0003      	movs	r3, r0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d807      	bhi.n	8002da8 <SD_disk_initialize+0xd0>
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	05db      	lsls	r3, r3, #23
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	2069      	movs	r0, #105	; 0x69
 8002da0:	f7ff ff2d 	bl	8002bfe <SD_SendCmd>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d004      	beq.n	8002db2 <SD_disk_initialize+0xda>
        } while (Timer1);
 8002da8:	4b4e      	ldr	r3, [pc, #312]	; (8002ee4 <SD_disk_initialize+0x20c>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ec      	bne.n	8002d8a <SD_disk_initialize+0xb2>
 8002db0:	e000      	b.n	8002db4 <SD_disk_initialize+0xdc>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002db2:	46c0      	nop			; (mov r8, r8)
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002db4:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <SD_disk_initialize+0x20c>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d100      	bne.n	8002dbe <SD_disk_initialize+0xe6>
 8002dbc:	e070      	b.n	8002ea0 <SD_disk_initialize+0x1c8>
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	207a      	movs	r0, #122	; 0x7a
 8002dc2:	f7ff ff1c 	bl	8002bfe <SD_SendCmd>
 8002dc6:	1e03      	subs	r3, r0, #0
 8002dc8:	d000      	beq.n	8002dcc <SD_disk_initialize+0xf4>
 8002dca:	e069      	b.n	8002ea0 <SD_disk_initialize+0x1c8>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002dcc:	230f      	movs	r3, #15
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e00e      	b.n	8002df4 <SD_disk_initialize+0x11c>
          {
            ocr[n] = SPI_RxByte();
 8002dd6:	250f      	movs	r5, #15
 8002dd8:	197b      	adds	r3, r7, r5
 8002dda:	781c      	ldrb	r4, [r3, #0]
 8002ddc:	f7ff fde4 	bl	80029a8 <SPI_RxByte>
 8002de0:	0003      	movs	r3, r0
 8002de2:	001a      	movs	r2, r3
 8002de4:	2308      	movs	r3, #8
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 8002dea:	197b      	adds	r3, r7, r5
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	197b      	adds	r3, r7, r5
 8002df0:	3201      	adds	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	230f      	movs	r3, #15
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d9eb      	bls.n	8002dd6 <SD_disk_initialize+0xfe>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002dfe:	2308      	movs	r3, #8
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	001a      	movs	r2, r3
 8002e06:	2340      	movs	r3, #64	; 0x40
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d001      	beq.n	8002e10 <SD_disk_initialize+0x138>
 8002e0c:	220c      	movs	r2, #12
 8002e0e:	e000      	b.n	8002e12 <SD_disk_initialize+0x13a>
 8002e10:	2204      	movs	r2, #4
 8002e12:	230e      	movs	r3, #14
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e042      	b.n	8002ea0 <SD_disk_initialize+0x1c8>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	2077      	movs	r0, #119	; 0x77
 8002e1e:	f7ff feee 	bl	8002bfe <SD_SendCmd>
 8002e22:	0003      	movs	r3, r0
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d808      	bhi.n	8002e3a <SD_disk_initialize+0x162>
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2069      	movs	r0, #105	; 0x69
 8002e2c:	f7ff fee7 	bl	8002bfe <SD_SendCmd>
 8002e30:	0003      	movs	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d801      	bhi.n	8002e3a <SD_disk_initialize+0x162>
 8002e36:	2202      	movs	r2, #2
 8002e38:	e000      	b.n	8002e3c <SD_disk_initialize+0x164>
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	230e      	movs	r3, #14
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	701a      	strb	r2, [r3, #0]
      do
      {
        if (type == CT_SD1)
 8002e42:	230e      	movs	r3, #14
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d10d      	bne.n	8002e68 <SD_disk_initialize+0x190>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2077      	movs	r0, #119	; 0x77
 8002e50:	f7ff fed5 	bl	8002bfe <SD_SendCmd>
 8002e54:	0003      	movs	r3, r0
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d80c      	bhi.n	8002e74 <SD_disk_initialize+0x19c>
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2069      	movs	r0, #105	; 0x69
 8002e5e:	f7ff fece 	bl	8002bfe <SD_SendCmd>
 8002e62:	1e03      	subs	r3, r0, #0
 8002e64:	d106      	bne.n	8002e74 <SD_disk_initialize+0x19c>
 8002e66:	e00b      	b.n	8002e80 <SD_disk_initialize+0x1a8>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2041      	movs	r0, #65	; 0x41
 8002e6c:	f7ff fec7 	bl	8002bfe <SD_SendCmd>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d004      	beq.n	8002e7e <SD_disk_initialize+0x1a6>
        }
      } while (Timer1);
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <SD_disk_initialize+0x20c>)
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e2      	bne.n	8002e42 <SD_disk_initialize+0x16a>
 8002e7c:	e000      	b.n	8002e80 <SD_disk_initialize+0x1a8>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002e7e:	46c0      	nop			; (mov r8, r8)
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002e80:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <SD_disk_initialize+0x20c>)
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <SD_disk_initialize+0x1c0>
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	2050      	movs	r0, #80	; 0x50
 8002e90:	f7ff feb5 	bl	8002bfe <SD_SendCmd>
 8002e94:	1e03      	subs	r3, r0, #0
 8002e96:	d003      	beq.n	8002ea0 <SD_disk_initialize+0x1c8>
 8002e98:	230e      	movs	r3, #14
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
    }
  }
  CardType = type;
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <SD_disk_initialize+0x210>)
 8002ea2:	240e      	movs	r4, #14
 8002ea4:	193a      	adds	r2, r7, r4
 8002ea6:	7812      	ldrb	r2, [r2, #0]
 8002ea8:	701a      	strb	r2, [r3, #0]
  /* Idle */
  DESELECT();
 8002eaa:	f7ff fd38 	bl	800291e <DESELECT>
  SPI_RxByte();
 8002eae:	f7ff fd7b 	bl	80029a8 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8002eb2:	193b      	adds	r3, r7, r4
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <SD_disk_initialize+0x1f4>
  {
    Stat &= ~STA_NOINIT;
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <SD_disk_initialize+0x208>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <SD_disk_initialize+0x208>)
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e001      	b.n	8002ed0 <SD_disk_initialize+0x1f8>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002ecc:	f7ff fdfc 	bl	8002ac8 <SD_PowerOff>
  }
  return Stat;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <SD_disk_initialize+0x208>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b2db      	uxtb	r3, r3
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	20000208 	.word	0x20000208
 8002ee8:	2000020c 	.word	0x2000020c

08002eec <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	701a      	strb	r2, [r3, #0]
  if (drv) return STA_NOINIT;
 8002ef8:	1dfb      	adds	r3, r7, #7
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <SD_disk_status+0x18>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e002      	b.n	8002f0a <SD_disk_status+0x1e>
  return Stat;
 8002f04:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <SD_disk_status+0x28>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
}
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b002      	add	sp, #8
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	20000000 	.word	0x20000000

08002f18 <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	210f      	movs	r1, #15
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	1c02      	adds	r2, r0, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d102      	bne.n	8002f3a <SD_disk_read+0x22>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <SD_disk_read+0x26>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	e053      	b.n	8002fe6 <SD_disk_read+0xce>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002f3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ff0 <SD_disk_read+0xd8>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	001a      	movs	r2, r3
 8002f46:	2301      	movs	r3, #1
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d001      	beq.n	8002f50 <SD_disk_read+0x38>
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e04a      	b.n	8002fe6 <SD_disk_read+0xce>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8002f50:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <SD_disk_read+0xdc>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	001a      	movs	r2, r3
 8002f56:	2304      	movs	r3, #4
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d102      	bne.n	8002f62 <SD_disk_read+0x4a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	025b      	lsls	r3, r3, #9
 8002f60:	607b      	str	r3, [r7, #4]
  SELECT();
 8002f62:	f7ff fccd 	bl	8002900 <SELECT>
  if (count == 1)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d112      	bne.n	8002f92 <SD_disk_read+0x7a>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	0019      	movs	r1, r3
 8002f70:	2051      	movs	r0, #81	; 0x51
 8002f72:	f7ff fe44 	bl	8002bfe <SD_SendCmd>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d12d      	bne.n	8002fd6 <SD_disk_read+0xbe>
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	009a      	lsls	r2, r3, #2
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0011      	movs	r1, r2
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff fdb4 	bl	8002af0 <SD_RxDataBlock>
 8002f88:	1e03      	subs	r3, r0, #0
 8002f8a:	d024      	beq.n	8002fd6 <SD_disk_read+0xbe>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	e021      	b.n	8002fd6 <SD_disk_read+0xbe>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0019      	movs	r1, r3
 8002f96:	2052      	movs	r0, #82	; 0x52
 8002f98:	f7ff fe31 	bl	8002bfe <SD_SendCmd>
 8002f9c:	1e03      	subs	r3, r0, #0
 8002f9e:	d11a      	bne.n	8002fd6 <SD_disk_read+0xbe>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	009a      	lsls	r2, r3, #2
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7ff fda1 	bl	8002af0 <SD_RxDataBlock>
 8002fae:	1e03      	subs	r3, r0, #0
 8002fb0:	d00c      	beq.n	8002fcc <SD_disk_read+0xb4>
        buff += 512;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	0092      	lsls	r2, r2, #2
 8002fb8:	4694      	mov	ip, r2
 8002fba:	4463      	add	r3, ip
 8002fbc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1ea      	bne.n	8002fa0 <SD_disk_read+0x88>
 8002fca:	e000      	b.n	8002fce <SD_disk_read+0xb6>
        if (!SD_RxDataBlock(buff, 512)) break;
 8002fcc:	46c0      	nop			; (mov r8, r8)
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8002fce:	2100      	movs	r1, #0
 8002fd0:	204c      	movs	r0, #76	; 0x4c
 8002fd2:	f7ff fe14 	bl	8002bfe <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 8002fd6:	f7ff fca2 	bl	800291e <DESELECT>
  SPI_RxByte();
 8002fda:	f7ff fce5 	bl	80029a8 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	4193      	sbcs	r3, r2
 8002fe4:	b2db      	uxtb	r3, r3
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b004      	add	sp, #16
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	2000020c 	.word	0x2000020c

08002ff8 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	210f      	movs	r1, #15
 8003006:	187b      	adds	r3, r7, r1
 8003008:	1c02      	adds	r2, r0, #0
 800300a:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800300c:	187b      	adds	r3, r7, r1
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <SD_disk_write+0x22>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <SD_disk_write+0x26>
 800301a:	2304      	movs	r3, #4
 800301c:	e06b      	b.n	80030f6 <SD_disk_write+0xfe>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800301e:	4b38      	ldr	r3, [pc, #224]	; (8003100 <SD_disk_write+0x108>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	001a      	movs	r2, r3
 8003026:	2301      	movs	r3, #1
 8003028:	4013      	ands	r3, r2
 800302a:	d001      	beq.n	8003030 <SD_disk_write+0x38>
 800302c:	2303      	movs	r3, #3
 800302e:	e062      	b.n	80030f6 <SD_disk_write+0xfe>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8003030:	4b33      	ldr	r3, [pc, #204]	; (8003100 <SD_disk_write+0x108>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	001a      	movs	r2, r3
 8003038:	2304      	movs	r3, #4
 800303a:	4013      	ands	r3, r2
 800303c:	d001      	beq.n	8003042 <SD_disk_write+0x4a>
 800303e:	2302      	movs	r3, #2
 8003040:	e059      	b.n	80030f6 <SD_disk_write+0xfe>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003042:	4b30      	ldr	r3, [pc, #192]	; (8003104 <SD_disk_write+0x10c>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	001a      	movs	r2, r3
 8003048:	2304      	movs	r3, #4
 800304a:	4013      	ands	r3, r2
 800304c:	d102      	bne.n	8003054 <SD_disk_write+0x5c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	025b      	lsls	r3, r3, #9
 8003052:	607b      	str	r3, [r7, #4]
  SELECT();
 8003054:	f7ff fc54 	bl	8002900 <SELECT>
  if (count == 1)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d110      	bne.n	8003080 <SD_disk_write+0x88>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0019      	movs	r1, r3
 8003062:	2058      	movs	r0, #88	; 0x58
 8003064:	f7ff fdcb 	bl	8002bfe <SD_SendCmd>
 8003068:	1e03      	subs	r3, r0, #0
 800306a:	d13c      	bne.n	80030e6 <SD_disk_write+0xee>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	21fe      	movs	r1, #254	; 0xfe
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff fd71 	bl	8002b58 <SD_TxDataBlock>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d035      	beq.n	80030e6 <SD_disk_write+0xee>
      count = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	e032      	b.n	80030e6 <SD_disk_write+0xee>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8003080:	4b20      	ldr	r3, [pc, #128]	; (8003104 <SD_disk_write+0x10c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	001a      	movs	r2, r3
 8003086:	2302      	movs	r3, #2
 8003088:	4013      	ands	r3, r2
 800308a:	d008      	beq.n	800309e <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 800308c:	2100      	movs	r1, #0
 800308e:	2077      	movs	r0, #119	; 0x77
 8003090:	f7ff fdb5 	bl	8002bfe <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	0019      	movs	r1, r3
 8003098:	2057      	movs	r0, #87	; 0x57
 800309a:	f7ff fdb0 	bl	8002bfe <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0019      	movs	r1, r3
 80030a2:	2059      	movs	r0, #89	; 0x59
 80030a4:	f7ff fdab 	bl	8002bfe <SD_SendCmd>
 80030a8:	1e03      	subs	r3, r0, #0
 80030aa:	d11c      	bne.n	80030e6 <SD_disk_write+0xee>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	21fc      	movs	r1, #252	; 0xfc
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff fd51 	bl	8002b58 <SD_TxDataBlock>
 80030b6:	1e03      	subs	r3, r0, #0
 80030b8:	d00c      	beq.n	80030d4 <SD_disk_write+0xdc>
        buff += 512;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	0092      	lsls	r2, r2, #2
 80030c0:	4694      	mov	ip, r2
 80030c2:	4463      	add	r3, ip
 80030c4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ec      	bne.n	80030ac <SD_disk_write+0xb4>
 80030d2:	e000      	b.n	80030d6 <SD_disk_write+0xde>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80030d4:	46c0      	nop			; (mov r8, r8)
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80030d6:	21fd      	movs	r1, #253	; 0xfd
 80030d8:	2000      	movs	r0, #0
 80030da:	f7ff fd3d 	bl	8002b58 <SD_TxDataBlock>
 80030de:	1e03      	subs	r3, r0, #0
 80030e0:	d101      	bne.n	80030e6 <SD_disk_write+0xee>
      {
        count = 1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 80030e6:	f7ff fc1a 	bl	800291e <DESELECT>
  SPI_RxByte();
 80030ea:	f7ff fc5d 	bl	80029a8 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	1e5a      	subs	r2, r3, #1
 80030f2:	4193      	sbcs	r3, r2
 80030f4:	b2db      	uxtb	r3, r3
}
 80030f6:	0018      	movs	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b004      	add	sp, #16
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	20000000 	.word	0x20000000
 8003104:	2000020c 	.word	0x2000020c

08003108 <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b08b      	sub	sp, #44	; 0x2c
 800310c:	af00      	add	r7, sp, #0
 800310e:	603a      	str	r2, [r7, #0]
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	1c02      	adds	r2, r0, #0
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	1dbb      	adds	r3, r7, #6
 8003118:	1c0a      	adds	r2, r1, #0
 800311a:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8003120:	1dfb      	adds	r3, r7, #7
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <SD_disk_ioctl+0x24>
 8003128:	2304      	movs	r3, #4
 800312a:	e11b      	b.n	8003364 <SD_disk_ioctl+0x25c>
  res = RES_ERROR;
 800312c:	2327      	movs	r3, #39	; 0x27
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
  if (ctrl == CTRL_POWER)
 8003134:	1dbb      	adds	r3, r7, #6
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b05      	cmp	r3, #5
 800313a:	d127      	bne.n	800318c <SD_disk_ioctl+0x84>
  {
    switch (*ptr)
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d013      	beq.n	800316c <SD_disk_ioctl+0x64>
 8003144:	dc1d      	bgt.n	8003182 <SD_disk_ioctl+0x7a>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <SD_disk_ioctl+0x48>
 800314a:	2b01      	cmp	r3, #1
 800314c:	d007      	beq.n	800315e <SD_disk_ioctl+0x56>
 800314e:	e018      	b.n	8003182 <SD_disk_ioctl+0x7a>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8003150:	f7ff fcba 	bl	8002ac8 <SD_PowerOff>
      res = RES_OK;
 8003154:	2327      	movs	r3, #39	; 0x27
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
      break;
 800315c:	e0ff      	b.n	800335e <SD_disk_ioctl+0x256>
    case 1:
      SD_PowerOn();   /* Power On */
 800315e:	f7ff fc6b 	bl	8002a38 <SD_PowerOn>
      res = RES_OK;
 8003162:	2327      	movs	r3, #39	; 0x27
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
      break;
 800316a:	e0f8      	b.n	800335e <SD_disk_ioctl+0x256>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	1c5c      	adds	r4, r3, #1
 8003170:	f7ff fcb4 	bl	8002adc <SD_CheckPower>
 8003174:	0003      	movs	r3, r0
 8003176:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8003178:	2327      	movs	r3, #39	; 0x27
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
      break;
 8003180:	e0ed      	b.n	800335e <SD_disk_ioctl+0x256>
    default:
      res = RES_PARERR;
 8003182:	2327      	movs	r3, #39	; 0x27
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2204      	movs	r2, #4
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e0e8      	b.n	800335e <SD_disk_ioctl+0x256>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800318c:	4b77      	ldr	r3, [pc, #476]	; (800336c <SD_disk_ioctl+0x264>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	001a      	movs	r2, r3
 8003194:	2301      	movs	r3, #1
 8003196:	4013      	ands	r3, r2
 8003198:	d001      	beq.n	800319e <SD_disk_ioctl+0x96>
 800319a:	2303      	movs	r3, #3
 800319c:	e0e2      	b.n	8003364 <SD_disk_ioctl+0x25c>
    SELECT();
 800319e:	f7ff fbaf 	bl	8002900 <SELECT>
    switch (ctrl)
 80031a2:	1dbb      	adds	r3, r7, #6
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b0d      	cmp	r3, #13
 80031a8:	d900      	bls.n	80031ac <SD_disk_ioctl+0xa4>
 80031aa:	e0c8      	b.n	800333e <SD_disk_ioctl+0x236>
 80031ac:	009a      	lsls	r2, r3, #2
 80031ae:	4b70      	ldr	r3, [pc, #448]	; (8003370 <SD_disk_ioctl+0x268>)
 80031b0:	18d3      	adds	r3, r2, r3
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80031b6:	2100      	movs	r1, #0
 80031b8:	2049      	movs	r0, #73	; 0x49
 80031ba:	f7ff fd20 	bl	8002bfe <SD_SendCmd>
 80031be:	1e03      	subs	r3, r0, #0
 80031c0:	d000      	beq.n	80031c4 <SD_disk_ioctl+0xbc>
 80031c2:	e0c1      	b.n	8003348 <SD_disk_ioctl+0x240>
 80031c4:	240c      	movs	r4, #12
 80031c6:	193b      	adds	r3, r7, r4
 80031c8:	2110      	movs	r1, #16
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7ff fc90 	bl	8002af0 <SD_RxDataBlock>
 80031d0:	1e03      	subs	r3, r0, #0
 80031d2:	d100      	bne.n	80031d6 <SD_disk_ioctl+0xce>
 80031d4:	e0b8      	b.n	8003348 <SD_disk_ioctl+0x240>
      {
        if ((csd[0] >> 6) == 1)
 80031d6:	0022      	movs	r2, r4
 80031d8:	18bb      	adds	r3, r7, r2
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d114      	bne.n	800320e <SD_disk_ioctl+0x106>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80031e4:	0011      	movs	r1, r2
 80031e6:	18bb      	adds	r3, r7, r2
 80031e8:	7a5b      	ldrb	r3, [r3, #9]
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	7a1b      	ldrb	r3, [r3, #8]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	18d3      	adds	r3, r2, r3
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	211e      	movs	r1, #30
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	3201      	adds	r2, #1
 8003200:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 8003202:	187b      	adds	r3, r7, r1
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	029a      	lsls	r2, r3, #10
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e03a      	b.n	8003284 <SD_disk_ioctl+0x17c>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800320e:	200c      	movs	r0, #12
 8003210:	183b      	adds	r3, r7, r0
 8003212:	795b      	ldrb	r3, [r3, #5]
 8003214:	220f      	movs	r2, #15
 8003216:	4013      	ands	r3, r2
 8003218:	b2da      	uxtb	r2, r3
 800321a:	183b      	adds	r3, r7, r0
 800321c:	7a9b      	ldrb	r3, [r3, #10]
 800321e:	09db      	lsrs	r3, r3, #7
 8003220:	b2db      	uxtb	r3, r3
 8003222:	18d3      	adds	r3, r2, r3
 8003224:	b2da      	uxtb	r2, r3
 8003226:	183b      	adds	r3, r7, r0
 8003228:	7a5b      	ldrb	r3, [r3, #9]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2106      	movs	r1, #6
 8003230:	400b      	ands	r3, r1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	18d3      	adds	r3, r2, r3
 8003236:	b2da      	uxtb	r2, r3
 8003238:	2426      	movs	r4, #38	; 0x26
 800323a:	193b      	adds	r3, r7, r4
 800323c:	3202      	adds	r2, #2
 800323e:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003240:	183b      	adds	r3, r7, r0
 8003242:	7a1b      	ldrb	r3, [r3, #8]
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	b2db      	uxtb	r3, r3
 8003248:	b29a      	uxth	r2, r3
 800324a:	183b      	adds	r3, r7, r0
 800324c:	79db      	ldrb	r3, [r3, #7]
 800324e:	b29b      	uxth	r3, r3
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	b29b      	uxth	r3, r3
 8003254:	18d3      	adds	r3, r2, r3
 8003256:	b29a      	uxth	r2, r3
 8003258:	183b      	adds	r3, r7, r0
 800325a:	799b      	ldrb	r3, [r3, #6]
 800325c:	029b      	lsls	r3, r3, #10
 800325e:	b299      	uxth	r1, r3
 8003260:	23c0      	movs	r3, #192	; 0xc0
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	400b      	ands	r3, r1
 8003266:	b29b      	uxth	r3, r3
 8003268:	18d3      	adds	r3, r2, r3
 800326a:	b29a      	uxth	r2, r3
 800326c:	211e      	movs	r1, #30
 800326e:	187b      	adds	r3, r7, r1
 8003270:	3201      	adds	r2, #1
 8003272:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003274:	187b      	adds	r3, r7, r1
 8003276:	881a      	ldrh	r2, [r3, #0]
 8003278:	193b      	adds	r3, r7, r4
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	3b09      	subs	r3, #9
 800327e:	409a      	lsls	r2, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8003284:	2327      	movs	r3, #39	; 0x27
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800328c:	e05c      	b.n	8003348 <SD_disk_ioctl+0x240>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003296:	2327      	movs	r3, #39	; 0x27
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
      break;
 800329e:	e05a      	b.n	8003356 <SD_disk_ioctl+0x24e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80032a0:	f7ff fbae 	bl	8002a00 <SD_ReadyWait>
 80032a4:	0003      	movs	r3, r0
 80032a6:	2bff      	cmp	r3, #255	; 0xff
 80032a8:	d150      	bne.n	800334c <SD_disk_ioctl+0x244>
 80032aa:	2327      	movs	r3, #39	; 0x27
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
      break;
 80032b2:	e04b      	b.n	800334c <SD_disk_ioctl+0x244>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80032b4:	2100      	movs	r1, #0
 80032b6:	2049      	movs	r0, #73	; 0x49
 80032b8:	f7ff fca1 	bl	8002bfe <SD_SendCmd>
 80032bc:	1e03      	subs	r3, r0, #0
 80032be:	d147      	bne.n	8003350 <SD_disk_ioctl+0x248>
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	2110      	movs	r1, #16
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff fc13 	bl	8002af0 <SD_RxDataBlock>
 80032ca:	1e03      	subs	r3, r0, #0
 80032cc:	d040      	beq.n	8003350 <SD_disk_ioctl+0x248>
 80032ce:	2327      	movs	r3, #39	; 0x27
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
      break;
 80032d6:	e03b      	b.n	8003350 <SD_disk_ioctl+0x248>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80032d8:	2100      	movs	r1, #0
 80032da:	204a      	movs	r0, #74	; 0x4a
 80032dc:	f7ff fc8f 	bl	8002bfe <SD_SendCmd>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d137      	bne.n	8003354 <SD_disk_ioctl+0x24c>
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	2110      	movs	r1, #16
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fc01 	bl	8002af0 <SD_RxDataBlock>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d030      	beq.n	8003354 <SD_disk_ioctl+0x24c>
 80032f2:	2327      	movs	r3, #39	; 0x27
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
      break;
 80032fa:	e02b      	b.n	8003354 <SD_disk_ioctl+0x24c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80032fc:	2100      	movs	r1, #0
 80032fe:	207a      	movs	r0, #122	; 0x7a
 8003300:	f7ff fc7d 	bl	8002bfe <SD_SendCmd>
 8003304:	1e03      	subs	r3, r0, #0
 8003306:	d11a      	bne.n	800333e <SD_disk_ioctl+0x236>
      {
        for (n = 0; n < 4; n++)
 8003308:	2326      	movs	r3, #38	; 0x26
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e00c      	b.n	800332c <SD_disk_ioctl+0x224>
        {
          *ptr++ = SPI_RxByte();
 8003312:	6a3c      	ldr	r4, [r7, #32]
 8003314:	1c63      	adds	r3, r4, #1
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	f7ff fb46 	bl	80029a8 <SPI_RxByte>
 800331c:	0003      	movs	r3, r0
 800331e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003320:	2126      	movs	r1, #38	; 0x26
 8003322:	187b      	adds	r3, r7, r1
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	187b      	adds	r3, r7, r1
 8003328:	3201      	adds	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	2326      	movs	r3, #38	; 0x26
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d9ed      	bls.n	8003312 <SD_disk_ioctl+0x20a>
        }
        res = RES_OK;
 8003336:	2327      	movs	r3, #39	; 0x27
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
      }
    default:
      res = RES_PARERR;
 800333e:	2327      	movs	r3, #39	; 0x27
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	2204      	movs	r2, #4
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e006      	b.n	8003356 <SD_disk_ioctl+0x24e>
      break;
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	e004      	b.n	8003356 <SD_disk_ioctl+0x24e>
      break;
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	e002      	b.n	8003356 <SD_disk_ioctl+0x24e>
      break;
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	e000      	b.n	8003356 <SD_disk_ioctl+0x24e>
      break;
 8003354:	46c0      	nop			; (mov r8, r8)
    }
    DESELECT();
 8003356:	f7ff fae2 	bl	800291e <DESELECT>
    SPI_RxByte();
 800335a:	f7ff fb25 	bl	80029a8 <SPI_RxByte>
  }
  return res;
 800335e:	2327      	movs	r3, #39	; 0x27
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	781b      	ldrb	r3, [r3, #0]
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b00b      	add	sp, #44	; 0x2c
 800336a:	bd90      	pop	{r4, r7, pc}
 800336c:	20000000 	.word	0x20000000
 8003370:	0800e030 	.word	0x0800e030

08003374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800337a:	f000 fe11 	bl	8003fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800337e:	f000 f845 	bl	800340c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003382:	f000 f961 	bl	8003648 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003386:	f000 f927 	bl	80035d8 <MX_SPI1_Init>
  MX_FATFS_Init();
 800338a:	f002 fcd5 	bl	8005d38 <MX_FATFS_Init>
  MX_ADC_Init();
 800338e:	f000 f891 	bl	80034b4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  start_time_ms = HAL_GetTick();
 8003392:	f000 fe6b 	bl	800406c <HAL_GetTick>
 8003396:	0002      	movs	r2, r0
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <main+0x8c>)
 800339a:	601a      	str	r2, [r3, #0]
  while (1)
  {



	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 800339c:	23a0      	movs	r3, #160	; 0xa0
 800339e:	05db      	lsls	r3, r3, #23
 80033a0:	2101      	movs	r1, #1
 80033a2:	0018      	movs	r0, r3
 80033a4:	f001 fa9e 	bl	80048e4 <HAL_GPIO_ReadPin>
 80033a8:	0003      	movs	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d11f      	bne.n	80033ee <main+0x7a>
	 		  {
	 			  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_SET);
 80033ae:	23a0      	movs	r3, #160	; 0xa0
 80033b0:	05db      	lsls	r3, r3, #23
 80033b2:	2201      	movs	r2, #1
 80033b4:	2102      	movs	r1, #2
 80033b6:	0018      	movs	r0, r3
 80033b8:	f001 fab1 	bl	800491e <HAL_GPIO_WritePin>
	 			  uint32_t current_time_ms = HAL_GetTick();
 80033bc:	f000 fe56 	bl	800406c <HAL_GetTick>
 80033c0:	0003      	movs	r3, r0
 80033c2:	607b      	str	r3, [r7, #4]
	 			  seconds_since_start = (current_time_ms - start_time_ms) / 1000.0f;
 80033c4:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <main+0x8c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7fd fb0f 	bl	80009f0 <__aeabi_ui2f>
 80033d2:	1c03      	adds	r3, r0, #0
 80033d4:	490b      	ldr	r1, [pc, #44]	; (8003404 <main+0x90>)
 80033d6:	1c18      	adds	r0, r3, #0
 80033d8:	f7fd f9f0 	bl	80007bc <__aeabi_fdiv>
 80033dc:	1c03      	adds	r3, r0, #0
 80033de:	1c1a      	adds	r2, r3, #0
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <main+0x94>)
 80033e2:	601a      	str	r2, [r3, #0]
	 			  process_SD_card();
 80033e4:	f000 f9be 	bl	8003764 <process_SD_card>

//	 			 if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin))
//	 			 		{
//	 			 			HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_SET);
//	 			 		}
	 			readNumber();
 80033e8:	f000 fa80 	bl	80038ec <readNumber>
 80033ec:	e7d6      	b.n	800339c <main+0x28>
//	 			else if(valueToAdjust != 20)
//	 			HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_RESET);
	 		  }
	 		  else
	 		  {
	 			  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 80033ee:	23a0      	movs	r3, #160	; 0xa0
 80033f0:	05db      	lsls	r3, r3, #23
 80033f2:	2200      	movs	r2, #0
 80033f4:	2102      	movs	r1, #2
 80033f6:	0018      	movs	r0, r3
 80033f8:	f001 fa91 	bl	800491e <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 80033fc:	e7ce      	b.n	800339c <main+0x28>
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	200002dc 	.word	0x200002dc
 8003404:	447a0000 	.word	0x447a0000
 8003408:	200002d8 	.word	0x200002d8

0800340c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b093      	sub	sp, #76	; 0x4c
 8003410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003412:	2414      	movs	r4, #20
 8003414:	193b      	adds	r3, r7, r4
 8003416:	0018      	movs	r0, r3
 8003418:	2334      	movs	r3, #52	; 0x34
 800341a:	001a      	movs	r2, r3
 800341c:	2100      	movs	r1, #0
 800341e:	f007 f885 	bl	800a52c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003422:	003b      	movs	r3, r7
 8003424:	0018      	movs	r0, r3
 8003426:	2314      	movs	r3, #20
 8003428:	001a      	movs	r2, r3
 800342a:	2100      	movs	r1, #0
 800342c:	f007 f87e 	bl	800a52c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <SystemClock_Config+0xa0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1e      	ldr	r2, [pc, #120]	; (80034b0 <SystemClock_Config+0xa4>)
 8003436:	401a      	ands	r2, r3
 8003438:	4b1c      	ldr	r3, [pc, #112]	; (80034ac <SystemClock_Config+0xa0>)
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	0109      	lsls	r1, r1, #4
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003442:	0021      	movs	r1, r4
 8003444:	187b      	adds	r3, r7, r1
 8003446:	2210      	movs	r2, #16
 8003448:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800344a:	187b      	adds	r3, r7, r1
 800344c:	2201      	movs	r2, #1
 800344e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003450:	187b      	adds	r3, r7, r1
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003456:	187b      	adds	r3, r7, r1
 8003458:	22a0      	movs	r2, #160	; 0xa0
 800345a:	0212      	lsls	r2, r2, #8
 800345c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800345e:	187b      	adds	r3, r7, r1
 8003460:	2200      	movs	r2, #0
 8003462:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003464:	187b      	adds	r3, r7, r1
 8003466:	0018      	movs	r0, r3
 8003468:	f001 fa76 	bl	8004958 <HAL_RCC_OscConfig>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d001      	beq.n	8003474 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8003470:	f000 fbc4 	bl	8003bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003474:	003b      	movs	r3, r7
 8003476:	220f      	movs	r2, #15
 8003478:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800347a:	003b      	movs	r3, r7
 800347c:	2200      	movs	r2, #0
 800347e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003480:	003b      	movs	r3, r7
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003486:	003b      	movs	r3, r7
 8003488:	2200      	movs	r2, #0
 800348a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800348c:	003b      	movs	r3, r7
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003492:	003b      	movs	r3, r7
 8003494:	2100      	movs	r1, #0
 8003496:	0018      	movs	r0, r3
 8003498:	f001 fdda 	bl	8005050 <HAL_RCC_ClockConfig>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d001      	beq.n	80034a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80034a0:	f000 fbac 	bl	8003bfc <Error_Handler>
  }
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b013      	add	sp, #76	; 0x4c
 80034aa:	bd90      	pop	{r4, r7, pc}
 80034ac:	40007000 	.word	0x40007000
 80034b0:	ffffe7ff 	.word	0xffffe7ff

080034b4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80034ba:	003b      	movs	r3, r7
 80034bc:	0018      	movs	r0, r3
 80034be:	2308      	movs	r3, #8
 80034c0:	001a      	movs	r2, r3
 80034c2:	2100      	movs	r1, #0
 80034c4:	f007 f832 	bl	800a52c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80034c8:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034ca:	4a3e      	ldr	r2, [pc, #248]	; (80035c4 <MX_ADC_Init+0x110>)
 80034cc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80034ce:	4b3c      	ldr	r3, [pc, #240]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80034d4:	4b3a      	ldr	r3, [pc, #232]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034d6:	2280      	movs	r2, #128	; 0x80
 80034d8:	0612      	lsls	r2, r2, #24
 80034da:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80034dc:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80034e8:	4b35      	ldr	r3, [pc, #212]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034ee:	4b34      	ldr	r3, [pc, #208]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80034f4:	4b32      	ldr	r3, [pc, #200]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034f6:	2220      	movs	r2, #32
 80034f8:	2100      	movs	r1, #0
 80034fa:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80034fc:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034fe:	2221      	movs	r2, #33	; 0x21
 8003500:	2100      	movs	r1, #0
 8003502:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003504:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <MX_ADC_Init+0x10c>)
 8003506:	2200      	movs	r2, #0
 8003508:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <MX_ADC_Init+0x10c>)
 800350c:	22c2      	movs	r2, #194	; 0xc2
 800350e:	32ff      	adds	r2, #255	; 0xff
 8003510:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003512:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <MX_ADC_Init+0x10c>)
 8003514:	222c      	movs	r2, #44	; 0x2c
 8003516:	2100      	movs	r1, #0
 8003518:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800351a:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <MX_ADC_Init+0x10c>)
 800351c:	2204      	movs	r2, #4
 800351e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003520:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <MX_ADC_Init+0x10c>)
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003526:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <MX_ADC_Init+0x10c>)
 8003528:	2200      	movs	r2, #0
 800352a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 800352c:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <MX_ADC_Init+0x10c>)
 800352e:	2201      	movs	r2, #1
 8003530:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003532:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <MX_ADC_Init+0x10c>)
 8003534:	2200      	movs	r2, #0
 8003536:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <MX_ADC_Init+0x10c>)
 800353a:	0018      	movs	r0, r3
 800353c:	f000 fdc4 	bl	80040c8 <HAL_ADC_Init>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d001      	beq.n	8003548 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003544:	f000 fb5a 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003548:	003b      	movs	r3, r7
 800354a:	4a1f      	ldr	r2, [pc, #124]	; (80035c8 <MX_ADC_Init+0x114>)
 800354c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800354e:	003b      	movs	r3, r7
 8003550:	2280      	movs	r2, #128	; 0x80
 8003552:	0152      	lsls	r2, r2, #5
 8003554:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003556:	003a      	movs	r2, r7
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <MX_ADC_Init+0x10c>)
 800355a:	0011      	movs	r1, r2
 800355c:	0018      	movs	r0, r3
 800355e:	f000 ff27 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8003562:	1e03      	subs	r3, r0, #0
 8003564:	d001      	beq.n	800356a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003566:	f000 fb49 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800356a:	003b      	movs	r3, r7
 800356c:	4a17      	ldr	r2, [pc, #92]	; (80035cc <MX_ADC_Init+0x118>)
 800356e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003570:	003a      	movs	r2, r7
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <MX_ADC_Init+0x10c>)
 8003574:	0011      	movs	r1, r2
 8003576:	0018      	movs	r0, r3
 8003578:	f000 ff1a 	bl	80043b0 <HAL_ADC_ConfigChannel>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d001      	beq.n	8003584 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003580:	f000 fb3c 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003584:	003b      	movs	r3, r7
 8003586:	4a12      	ldr	r2, [pc, #72]	; (80035d0 <MX_ADC_Init+0x11c>)
 8003588:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800358a:	003a      	movs	r2, r7
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <MX_ADC_Init+0x10c>)
 800358e:	0011      	movs	r1, r2
 8003590:	0018      	movs	r0, r3
 8003592:	f000 ff0d 	bl	80043b0 <HAL_ADC_ConfigChannel>
 8003596:	1e03      	subs	r3, r0, #0
 8003598:	d001      	beq.n	800359e <MX_ADC_Init+0xea>
  {
    Error_Handler();
 800359a:	f000 fb2f 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800359e:	003b      	movs	r3, r7
 80035a0:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <MX_ADC_Init+0x120>)
 80035a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035a4:	003a      	movs	r2, r7
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <MX_ADC_Init+0x10c>)
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 ff00 	bl	80043b0 <HAL_ADC_ConfigChannel>
 80035b0:	1e03      	subs	r3, r0, #0
 80035b2:	d001      	beq.n	80035b8 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80035b4:	f000 fb22 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b002      	add	sp, #8
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000210 	.word	0x20000210
 80035c4:	40012400 	.word	0x40012400
 80035c8:	30001000 	.word	0x30001000
 80035cc:	34002000 	.word	0x34002000
 80035d0:	38004000 	.word	0x38004000
 80035d4:	3c008000 	.word	0x3c008000

080035d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035dc:	4b18      	ldr	r3, [pc, #96]	; (8003640 <MX_SPI1_Init+0x68>)
 80035de:	4a19      	ldr	r2, [pc, #100]	; (8003644 <MX_SPI1_Init+0x6c>)
 80035e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <MX_SPI1_Init+0x68>)
 80035e4:	2282      	movs	r2, #130	; 0x82
 80035e6:	0052      	lsls	r2, r2, #1
 80035e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <MX_SPI1_Init+0x68>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <MX_SPI1_Init+0x68>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <MX_SPI1_Init+0x68>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <MX_SPI1_Init+0x68>)
 80035fe:	2200      	movs	r2, #0
 8003600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <MX_SPI1_Init+0x68>)
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	0092      	lsls	r2, r2, #2
 8003608:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <MX_SPI1_Init+0x68>)
 800360c:	2200      	movs	r2, #0
 800360e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <MX_SPI1_Init+0x68>)
 8003612:	2200      	movs	r2, #0
 8003614:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <MX_SPI1_Init+0x68>)
 8003618:	2200      	movs	r2, #0
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <MX_SPI1_Init+0x68>)
 800361e:	2200      	movs	r2, #0
 8003620:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <MX_SPI1_Init+0x68>)
 8003624:	2207      	movs	r2, #7
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <MX_SPI1_Init+0x68>)
 800362a:	0018      	movs	r0, r3
 800362c:	f001 fefe 	bl	800542c <HAL_SPI_Init>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003634:	f000 fae2 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	2000026c 	.word	0x2000026c
 8003644:	40013000 	.word	0x40013000

08003648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364e:	240c      	movs	r4, #12
 8003650:	193b      	adds	r3, r7, r4
 8003652:	0018      	movs	r0, r3
 8003654:	2314      	movs	r3, #20
 8003656:	001a      	movs	r2, r3
 8003658:	2100      	movs	r1, #0
 800365a:	f006 ff67 	bl	800a52c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800365e:	4b38      	ldr	r3, [pc, #224]	; (8003740 <MX_GPIO_Init+0xf8>)
 8003660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003662:	4b37      	ldr	r3, [pc, #220]	; (8003740 <MX_GPIO_Init+0xf8>)
 8003664:	2104      	movs	r1, #4
 8003666:	430a      	orrs	r2, r1
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c
 800366a:	4b35      	ldr	r3, [pc, #212]	; (8003740 <MX_GPIO_Init+0xf8>)
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	2204      	movs	r2, #4
 8003670:	4013      	ands	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003676:	4b32      	ldr	r3, [pc, #200]	; (8003740 <MX_GPIO_Init+0xf8>)
 8003678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367a:	4b31      	ldr	r3, [pc, #196]	; (8003740 <MX_GPIO_Init+0xf8>)
 800367c:	2101      	movs	r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	62da      	str	r2, [r3, #44]	; 0x2c
 8003682:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <MX_GPIO_Init+0xf8>)
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	2201      	movs	r2, #1
 8003688:	4013      	ands	r3, r2
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800368e:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <MX_GPIO_Init+0xf8>)
 8003690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003692:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <MX_GPIO_Init+0xf8>)
 8003694:	2102      	movs	r1, #2
 8003696:	430a      	orrs	r2, r1
 8003698:	62da      	str	r2, [r3, #44]	; 0x2c
 800369a:	4b29      	ldr	r3, [pc, #164]	; (8003740 <MX_GPIO_Init+0xf8>)
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	2202      	movs	r2, #2
 80036a0:	4013      	ands	r3, r2
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CardDetect_Output_Pin|GPIO_PIN_4|User_Input_Status_Light_Pin|User_Input_Status_Light_Green_Pin
 80036a6:	4927      	ldr	r1, [pc, #156]	; (8003744 <MX_GPIO_Init+0xfc>)
 80036a8:	23a0      	movs	r3, #160	; 0xa0
 80036aa:	05db      	lsls	r3, r3, #23
 80036ac:	2200      	movs	r2, #0
 80036ae:	0018      	movs	r0, r3
 80036b0:	f001 f935 	bl	800491e <HAL_GPIO_WritePin>
                          |User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Discrete_Bit_0_Pin Discrete_Bit_1_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_0_Pin|Discrete_Bit_1_Pin;
 80036b4:	193b      	adds	r3, r7, r4
 80036b6:	2203      	movs	r2, #3
 80036b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	2200      	movs	r2, #0
 80036be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c0:	193b      	adds	r3, r7, r4
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c6:	193b      	adds	r3, r7, r4
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <MX_GPIO_Init+0x100>)
 80036ca:	0019      	movs	r1, r3
 80036cc:	0010      	movs	r0, r2
 80036ce:	f000 ff8b 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Input_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Input_Pin;
 80036d2:	193b      	adds	r3, r7, r4
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036d8:	193b      	adds	r3, r7, r4
 80036da:	2200      	movs	r2, #0
 80036dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	193b      	adds	r3, r7, r4
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_CardDetect_Input_GPIO_Port, &GPIO_InitStruct);
 80036e4:	193a      	adds	r2, r7, r4
 80036e6:	23a0      	movs	r3, #160	; 0xa0
 80036e8:	05db      	lsls	r3, r3, #23
 80036ea:	0011      	movs	r1, r2
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 ff7b 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CardDetect_Output_Pin PA4 User_Input_Status_Light_Pin User_Input_Status_Light_Green_Pin
                           User_Input_Status_Light_Blue_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Output_Pin|GPIO_PIN_4|User_Input_Status_Light_Pin|User_Input_Status_Light_Green_Pin
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	4a13      	ldr	r2, [pc, #76]	; (8003744 <MX_GPIO_Init+0xfc>)
 80036f6:	601a      	str	r2, [r3, #0]
                          |User_Input_Status_Light_Blue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f8:	193b      	adds	r3, r7, r4
 80036fa:	2201      	movs	r2, #1
 80036fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	2200      	movs	r2, #0
 8003702:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003704:	193b      	adds	r3, r7, r4
 8003706:	2200      	movs	r2, #0
 8003708:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370a:	193a      	adds	r2, r7, r4
 800370c:	23a0      	movs	r3, #160	; 0xa0
 800370e:	05db      	lsls	r3, r3, #23
 8003710:	0011      	movs	r1, r2
 8003712:	0018      	movs	r0, r3
 8003714:	f000 ff68 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Discrete_Bit_2_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_2_Pin;
 8003718:	193b      	adds	r3, r7, r4
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800371e:	193b      	adds	r3, r7, r4
 8003720:	2200      	movs	r2, #0
 8003722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	193b      	adds	r3, r7, r4
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Discrete_Bit_2_GPIO_Port, &GPIO_InitStruct);
 800372a:	193b      	adds	r3, r7, r4
 800372c:	4a07      	ldr	r2, [pc, #28]	; (800374c <MX_GPIO_Init+0x104>)
 800372e:	0019      	movs	r1, r3
 8003730:	0010      	movs	r0, r2
 8003732:	f000 ff59 	bl	80045e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	b009      	add	sp, #36	; 0x24
 800373c:	bd90      	pop	{r4, r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	40021000 	.word	0x40021000
 8003744:	00000712 	.word	0x00000712
 8003748:	50000800 	.word	0x50000800
 800374c:	50000400 	.word	0x50000400

08003750 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  //HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
 8003758:	687b      	ldr	r3, [r7, #4]
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b002      	add	sp, #8
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <process_SD_card>:

void process_SD_card( void )
{
 8003764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003766:	4c53      	ldr	r4, [pc, #332]	; (80038b4 <process_SD_card+0x150>)
 8003768:	44a5      	add	sp, r4
 800376a:	af00      	add	r7, sp, #0
  char res_SwitchState[7];

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 800376c:	4e52      	ldr	r6, [pc, #328]	; (80038b8 <process_SD_card+0x154>)
 800376e:	19bc      	adds	r4, r7, r6
 8003770:	4952      	ldr	r1, [pc, #328]	; (80038bc <process_SD_card+0x158>)
 8003772:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <process_SD_card+0x15c>)
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	2201      	movs	r2, #1
 8003778:	0018      	movs	r0, r3
 800377a:	f004 fecd 	bl	8008518 <f_mount>
 800377e:	0003      	movs	r3, r0
 8003780:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK)
 8003782:	19bb      	adds	r3, r7, r6
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d000      	beq.n	800378c <process_SD_card+0x28>
 800378a:	e085      	b.n	8003898 <process_SD_card+0x134>
    {
      //printf("No SD Card found : (%i)\r\n", fres);
      break;
    }
    //Open the file
    fres = f_open(&fil, "TestingReadings.csv", FA_WRITE | FA_READ | FA_OPEN_APPEND);
 800378c:	19bc      	adds	r4, r7, r6
 800378e:	494d      	ldr	r1, [pc, #308]	; (80038c4 <process_SD_card+0x160>)
 8003790:	2554      	movs	r5, #84	; 0x54
 8003792:	197b      	adds	r3, r7, r5
 8003794:	2233      	movs	r2, #51	; 0x33
 8003796:	0018      	movs	r0, r3
 8003798:	f004 ff0a 	bl	80085b0 <f_open>
 800379c:	0003      	movs	r3, r0
 800379e:	7023      	strb	r3, [r4, #0]
    if(fres != FR_OK)
 80037a0:	19bb      	adds	r3, r7, r6
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d179      	bne.n	800389c <process_SD_card+0x138>
    }
    //printf("Writing data!!!\r\n");
    //write the data

    //Write the Time for each write
    sprintf(res_time,"%.3f,", valueToAdjust); //Position A //seconds since start, changed for testing
 80037a8:	4b47      	ldr	r3, [pc, #284]	; (80038c8 <process_SD_card+0x164>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	1c18      	adds	r0, r3, #0
 80037ae:	f7fe ffaf 	bl	8002710 <__aeabi_f2d>
 80037b2:	0002      	movs	r2, r0
 80037b4:	000b      	movs	r3, r1
 80037b6:	4945      	ldr	r1, [pc, #276]	; (80038cc <process_SD_card+0x168>)
 80037b8:	260c      	movs	r6, #12
 80037ba:	19b8      	adds	r0, r7, r6
 80037bc:	f006 fe4a 	bl	800a454 <siprintf>
    f_puts(res_time, &fil);
 80037c0:	002c      	movs	r4, r5
 80037c2:	193a      	adds	r2, r7, r4
 80037c4:	19bb      	adds	r3, r7, r6
 80037c6:	0011      	movs	r1, r2
 80037c8:	0018      	movs	r0, r3
 80037ca:	f005 fd6d 	bl	80092a8 <f_puts>

    //Write the 18650 Voltage Readings
    sprintf(res_18650, "%.3f,", Continuous_Average); //Position B
 80037ce:	4b40      	ldr	r3, [pc, #256]	; (80038d0 <process_SD_card+0x16c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	1c18      	adds	r0, r3, #0
 80037d4:	f7fe ff9c 	bl	8002710 <__aeabi_f2d>
 80037d8:	0002      	movs	r2, r0
 80037da:	000b      	movs	r3, r1
 80037dc:	493b      	ldr	r1, [pc, #236]	; (80038cc <process_SD_card+0x168>)
 80037de:	2548      	movs	r5, #72	; 0x48
 80037e0:	1978      	adds	r0, r7, r5
 80037e2:	f006 fe37 	bl	800a454 <siprintf>
    f_puts(res_18650, &fil);
 80037e6:	193a      	adds	r2, r7, r4
 80037e8:	197b      	adds	r3, r7, r5
 80037ea:	0011      	movs	r1, r2
 80037ec:	0018      	movs	r0, r3
 80037ee:	f005 fd5b 	bl	80092a8 <f_puts>

    //Write the 18650 Current Readings
    sprintf(res_C18650, "%.3f,", C_18650); //Position C
 80037f2:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <process_SD_card+0x170>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	1c18      	adds	r0, r3, #0
 80037f8:	f7fe ff8a 	bl	8002710 <__aeabi_f2d>
 80037fc:	0002      	movs	r2, r0
 80037fe:	000b      	movs	r3, r1
 8003800:	4932      	ldr	r1, [pc, #200]	; (80038cc <process_SD_card+0x168>)
 8003802:	2540      	movs	r5, #64	; 0x40
 8003804:	1978      	adds	r0, r7, r5
 8003806:	f006 fe25 	bl	800a454 <siprintf>
    f_puts(res_C18650, &fil);
 800380a:	193a      	adds	r2, r7, r4
 800380c:	197b      	adds	r3, r7, r5
 800380e:	0011      	movs	r1, r2
 8003810:	0018      	movs	r0, r3
 8003812:	f005 fd49 	bl	80092a8 <f_puts>

    //Write the CMOS Voltage Readings
    sprintf(res_CMOS, "%.3f,", V_CMOS); //Position D
 8003816:	4b30      	ldr	r3, [pc, #192]	; (80038d8 <process_SD_card+0x174>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	1c18      	adds	r0, r3, #0
 800381c:	f7fe ff78 	bl	8002710 <__aeabi_f2d>
 8003820:	0002      	movs	r2, r0
 8003822:	000b      	movs	r3, r1
 8003824:	4929      	ldr	r1, [pc, #164]	; (80038cc <process_SD_card+0x168>)
 8003826:	252c      	movs	r5, #44	; 0x2c
 8003828:	1978      	adds	r0, r7, r5
 800382a:	f006 fe13 	bl	800a454 <siprintf>
    f_puts(res_CMOS,&fil);
 800382e:	193a      	adds	r2, r7, r4
 8003830:	197b      	adds	r3, r7, r5
 8003832:	0011      	movs	r1, r2
 8003834:	0018      	movs	r0, r3
 8003836:	f005 fd37 	bl	80092a8 <f_puts>

    //Write the CMOS Current Readings
    sprintf(res_CCMOS, "%.3f,", C_CMOS); //Position E
 800383a:	4b28      	ldr	r3, [pc, #160]	; (80038dc <process_SD_card+0x178>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	1c18      	adds	r0, r3, #0
 8003840:	f7fe ff66 	bl	8002710 <__aeabi_f2d>
 8003844:	0002      	movs	r2, r0
 8003846:	000b      	movs	r3, r1
 8003848:	4920      	ldr	r1, [pc, #128]	; (80038cc <process_SD_card+0x168>)
 800384a:	2534      	movs	r5, #52	; 0x34
 800384c:	1978      	adds	r0, r7, r5
 800384e:	f006 fe01 	bl	800a454 <siprintf>
    f_puts(res_CCMOS, &fil);
 8003852:	193a      	adds	r2, r7, r4
 8003854:	197b      	adds	r3, r7, r5
 8003856:	0011      	movs	r1, r2
 8003858:	0018      	movs	r0, r3
 800385a:	f005 fd25 	bl	80092a8 <f_puts>

    //Writes the Switch State, 0 = State_CMOS / 1 = State_18650
    sprintf(res_SwitchState,"%u, \n", Switch_State); //Position F
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <process_SD_card+0x17c>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4920      	ldr	r1, [pc, #128]	; (80038e4 <process_SD_card+0x180>)
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	0018      	movs	r0, r3
 8003868:	f006 fdf4 	bl	800a454 <siprintf>
    f_puts(res_SwitchState, &fil);
 800386c:	193a      	adds	r2, r7, r4
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	0011      	movs	r1, r2
 8003872:	0018      	movs	r0, r3
 8003874:	f005 fd18 	bl	80092a8 <f_puts>

    //close your file
    f_close(&fil);
 8003878:	193b      	adds	r3, r7, r4
 800387a:	0018      	movs	r0, r3
 800387c:	f005 fc24 	bl	80090c8 <f_close>
    //Open the file
    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8003880:	193a      	adds	r2, r7, r4
 8003882:	2350      	movs	r3, #80	; 0x50
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	2101      	movs	r1, #1
 8003888:	0018      	movs	r0, r3
 800388a:	f005 fc51 	bl	8009130 <f_gets>
    //printf("Read Data : %s\n", buf);
    //close your file
    f_close(&fil);
 800388e:	193b      	adds	r3, r7, r4
 8003890:	0018      	movs	r0, r3
 8003892:	f005 fc19 	bl	80090c8 <f_close>
 8003896:	e002      	b.n	800389e <process_SD_card+0x13a>
      break;
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	e000      	b.n	800389e <process_SD_card+0x13a>
      break;
 800389c:	46c0      	nop			; (mov r8, r8)
      //printf("Cannot able to delete the file\n");
    }
#endif
  } while(0);
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 800389e:	4b07      	ldr	r3, [pc, #28]	; (80038bc <process_SD_card+0x158>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	0019      	movs	r1, r3
 80038a4:	2000      	movs	r0, #0
 80038a6:	f004 fe37 	bl	8008518 <f_mount>
}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <process_SD_card+0x184>)
 80038b0:	449d      	add	sp, r3
 80038b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b4:	ffffdf3c 	.word	0xffffdf3c
 80038b8:	000020bf 	.word	0x000020bf
 80038bc:	0800df00 	.word	0x0800df00
 80038c0:	00001084 	.word	0x00001084
 80038c4:	0800df04 	.word	0x0800df04
 80038c8:	200002e0 	.word	0x200002e0
 80038cc:	0800df18 	.word	0x0800df18
 80038d0:	200002d0 	.word	0x200002d0
 80038d4:	200002cc 	.word	0x200002cc
 80038d8:	200002c4 	.word	0x200002c4
 80038dc:	200002c8 	.word	0x200002c8
 80038e0:	200002d4 	.word	0x200002d4
 80038e4:	0800df20 	.word	0x0800df20
 80038e8:	000020c4 	.word	0x000020c4

080038ec <readNumber>:
Error_Handler();
}

}

void readNumber() {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 80038f0:	4bbb      	ldr	r3, [pc, #748]	; (8003be0 <readNumber+0x2f4>)
 80038f2:	2101      	movs	r1, #1
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 fff5 	bl	80048e4 <HAL_GPIO_ReadPin>
 80038fa:	0003      	movs	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d12c      	bne.n	800395a <readNumber+0x6e>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003900:	4bb7      	ldr	r3, [pc, #732]	; (8003be0 <readNumber+0x2f4>)
 8003902:	2102      	movs	r1, #2
 8003904:	0018      	movs	r0, r3
 8003906:	f000 ffed 	bl	80048e4 <HAL_GPIO_ReadPin>
 800390a:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 800390c:	d125      	bne.n	800395a <readNumber+0x6e>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 800390e:	4bb5      	ldr	r3, [pc, #724]	; (8003be4 <readNumber+0x2f8>)
 8003910:	2101      	movs	r1, #1
 8003912:	0018      	movs	r0, r3
 8003914:	f000 ffe6 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003918:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 800391a:	d11e      	bne.n	800395a <readNumber+0x6e>
		HAL_Delay(5);
 800391c:	2005      	movs	r0, #5
 800391e:	f000 fbaf 	bl	8004080 <HAL_Delay>
		valueToAdjust = 1;
 8003922:	4bb1      	ldr	r3, [pc, #708]	; (8003be8 <readNumber+0x2fc>)
 8003924:	22fe      	movs	r2, #254	; 0xfe
 8003926:	0592      	lsls	r2, r2, #22
 8003928:	601a      	str	r2, [r3, #0]
		// Set Red
		HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_SET);
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	0059      	lsls	r1, r3, #1
 800392e:	23a0      	movs	r3, #160	; 0xa0
 8003930:	05db      	lsls	r3, r3, #23
 8003932:	2201      	movs	r2, #1
 8003934:	0018      	movs	r0, r3
 8003936:	f000 fff2 	bl	800491e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	0099      	lsls	r1, r3, #2
 800393e:	23a0      	movs	r3, #160	; 0xa0
 8003940:	05db      	lsls	r3, r3, #23
 8003942:	2200      	movs	r2, #0
 8003944:	0018      	movs	r0, r3
 8003946:	f000 ffea 	bl	800491e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	00d9      	lsls	r1, r3, #3
 800394e:	23a0      	movs	r3, #160	; 0xa0
 8003950:	05db      	lsls	r3, r3, #23
 8003952:	2200      	movs	r2, #0
 8003954:	0018      	movs	r0, r3
 8003956:	f000 ffe2 	bl	800491e <HAL_GPIO_WritePin>

	}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 800395a:	4ba1      	ldr	r3, [pc, #644]	; (8003be0 <readNumber+0x2f4>)
 800395c:	2101      	movs	r1, #1
 800395e:	0018      	movs	r0, r3
 8003960:	f000 ffc0 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003964:	1e03      	subs	r3, r0, #0
 8003966:	d12d      	bne.n	80039c4 <readNumber+0xd8>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003968:	4b9d      	ldr	r3, [pc, #628]	; (8003be0 <readNumber+0x2f4>)
 800396a:	2102      	movs	r1, #2
 800396c:	0018      	movs	r0, r3
 800396e:	f000 ffb9 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003972:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003974:	2b01      	cmp	r3, #1
 8003976:	d125      	bne.n	80039c4 <readNumber+0xd8>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003978:	4b9a      	ldr	r3, [pc, #616]	; (8003be4 <readNumber+0x2f8>)
 800397a:	2101      	movs	r1, #1
 800397c:	0018      	movs	r0, r3
 800397e:	f000 ffb1 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003982:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003984:	d11e      	bne.n	80039c4 <readNumber+0xd8>
		HAL_Delay(5);
 8003986:	2005      	movs	r0, #5
 8003988:	f000 fb7a 	bl	8004080 <HAL_Delay>
		valueToAdjust = 2;
 800398c:	4b96      	ldr	r3, [pc, #600]	; (8003be8 <readNumber+0x2fc>)
 800398e:	2280      	movs	r2, #128	; 0x80
 8003990:	05d2      	lsls	r2, r2, #23
 8003992:	601a      	str	r2, [r3, #0]
		// Set Yellow
		HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_SET);
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	0059      	lsls	r1, r3, #1
 8003998:	23a0      	movs	r3, #160	; 0xa0
 800399a:	05db      	lsls	r3, r3, #23
 800399c:	2201      	movs	r2, #1
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 ffbd 	bl	800491e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	0099      	lsls	r1, r3, #2
 80039a8:	23a0      	movs	r3, #160	; 0xa0
 80039aa:	05db      	lsls	r3, r3, #23
 80039ac:	2201      	movs	r2, #1
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 ffb5 	bl	800491e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	00d9      	lsls	r1, r3, #3
 80039b8:	23a0      	movs	r3, #160	; 0xa0
 80039ba:	05db      	lsls	r3, r3, #23
 80039bc:	2200      	movs	r2, #0
 80039be:	0018      	movs	r0, r3
 80039c0:	f000 ffad 	bl	800491e <HAL_GPIO_WritePin>

	}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 80039c4:	4b86      	ldr	r3, [pc, #536]	; (8003be0 <readNumber+0x2f4>)
 80039c6:	2101      	movs	r1, #1
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 ff8b 	bl	80048e4 <HAL_GPIO_ReadPin>
 80039ce:	0003      	movs	r3, r0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d12c      	bne.n	8003a2e <readNumber+0x142>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80039d4:	4b82      	ldr	r3, [pc, #520]	; (8003be0 <readNumber+0x2f4>)
 80039d6:	2102      	movs	r1, #2
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 ff83 	bl	80048e4 <HAL_GPIO_ReadPin>
 80039de:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d124      	bne.n	8003a2e <readNumber+0x142>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 80039e4:	4b7f      	ldr	r3, [pc, #508]	; (8003be4 <readNumber+0x2f8>)
 80039e6:	2101      	movs	r1, #1
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 ff7b 	bl	80048e4 <HAL_GPIO_ReadPin>
 80039ee:	1e03      	subs	r3, r0, #0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80039f0:	d11d      	bne.n	8003a2e <readNumber+0x142>
			HAL_Delay(5);
 80039f2:	2005      	movs	r0, #5
 80039f4:	f000 fb44 	bl	8004080 <HAL_Delay>
			valueToAdjust = 3;
 80039f8:	4b7b      	ldr	r3, [pc, #492]	; (8003be8 <readNumber+0x2fc>)
 80039fa:	4a7c      	ldr	r2, [pc, #496]	; (8003bec <readNumber+0x300>)
 80039fc:	601a      	str	r2, [r3, #0]
			// Set Green
			HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_RESET);
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	0059      	lsls	r1, r3, #1
 8003a02:	23a0      	movs	r3, #160	; 0xa0
 8003a04:	05db      	lsls	r3, r3, #23
 8003a06:	2200      	movs	r2, #0
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 ff88 	bl	800491e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	0099      	lsls	r1, r3, #2
 8003a12:	23a0      	movs	r3, #160	; 0xa0
 8003a14:	05db      	lsls	r3, r3, #23
 8003a16:	2201      	movs	r2, #1
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 ff80 	bl	800491e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	00d9      	lsls	r1, r3, #3
 8003a22:	23a0      	movs	r3, #160	; 0xa0
 8003a24:	05db      	lsls	r3, r3, #23
 8003a26:	2200      	movs	r2, #0
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f000 ff78 	bl	800491e <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003a2e:	4b6c      	ldr	r3, [pc, #432]	; (8003be0 <readNumber+0x2f4>)
 8003a30:	2101      	movs	r1, #1
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 ff56 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003a38:	1e03      	subs	r3, r0, #0
 8003a3a:	d12d      	bne.n	8003a98 <readNumber+0x1ac>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <readNumber+0x2f4>)
 8003a3e:	2102      	movs	r1, #2
 8003a40:	0018      	movs	r0, r3
 8003a42:	f000 ff4f 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003a46:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003a48:	d126      	bne.n	8003a98 <readNumber+0x1ac>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8003a4a:	4b66      	ldr	r3, [pc, #408]	; (8003be4 <readNumber+0x2f8>)
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 ff48 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003a54:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d11e      	bne.n	8003a98 <readNumber+0x1ac>
			HAL_Delay(5);
 8003a5a:	2005      	movs	r0, #5
 8003a5c:	f000 fb10 	bl	8004080 <HAL_Delay>
			valueToAdjust = 4;
 8003a60:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <readNumber+0x2fc>)
 8003a62:	2281      	movs	r2, #129	; 0x81
 8003a64:	05d2      	lsls	r2, r2, #23
 8003a66:	601a      	str	r2, [r3, #0]
			// Set Cyan
			HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_RESET);
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	0059      	lsls	r1, r3, #1
 8003a6c:	23a0      	movs	r3, #160	; 0xa0
 8003a6e:	05db      	lsls	r3, r3, #23
 8003a70:	2200      	movs	r2, #0
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 ff53 	bl	800491e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	0099      	lsls	r1, r3, #2
 8003a7c:	23a0      	movs	r3, #160	; 0xa0
 8003a7e:	05db      	lsls	r3, r3, #23
 8003a80:	2201      	movs	r2, #1
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 ff4b 	bl	800491e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	00d9      	lsls	r1, r3, #3
 8003a8c:	23a0      	movs	r3, #160	; 0xa0
 8003a8e:	05db      	lsls	r3, r3, #23
 8003a90:	2201      	movs	r2, #1
 8003a92:	0018      	movs	r0, r3
 8003a94:	f000 ff43 	bl	800491e <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003a98:	4b51      	ldr	r3, [pc, #324]	; (8003be0 <readNumber+0x2f4>)
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f000 ff21 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d12c      	bne.n	8003b02 <readNumber+0x216>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003aa8:	4b4d      	ldr	r3, [pc, #308]	; (8003be0 <readNumber+0x2f4>)
 8003aaa:	2102      	movs	r1, #2
 8003aac:	0018      	movs	r0, r3
 8003aae:	f000 ff19 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003ab2:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003ab4:	d125      	bne.n	8003b02 <readNumber+0x216>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8003ab6:	4b4b      	ldr	r3, [pc, #300]	; (8003be4 <readNumber+0x2f8>)
 8003ab8:	2101      	movs	r1, #1
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 ff12 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003ac0:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d11d      	bne.n	8003b02 <readNumber+0x216>
			HAL_Delay(5);
 8003ac6:	2005      	movs	r0, #5
 8003ac8:	f000 fada 	bl	8004080 <HAL_Delay>
			valueToAdjust = 5;
 8003acc:	4b46      	ldr	r3, [pc, #280]	; (8003be8 <readNumber+0x2fc>)
 8003ace:	4a48      	ldr	r2, [pc, #288]	; (8003bf0 <readNumber+0x304>)
 8003ad0:	601a      	str	r2, [r3, #0]
			// Set Blue
			HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_RESET);
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	0059      	lsls	r1, r3, #1
 8003ad6:	23a0      	movs	r3, #160	; 0xa0
 8003ad8:	05db      	lsls	r3, r3, #23
 8003ada:	2200      	movs	r2, #0
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 ff1e 	bl	800491e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	0099      	lsls	r1, r3, #2
 8003ae6:	23a0      	movs	r3, #160	; 0xa0
 8003ae8:	05db      	lsls	r3, r3, #23
 8003aea:	2200      	movs	r2, #0
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 ff16 	bl	800491e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	00d9      	lsls	r1, r3, #3
 8003af6:	23a0      	movs	r3, #160	; 0xa0
 8003af8:	05db      	lsls	r3, r3, #23
 8003afa:	2201      	movs	r2, #1
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 ff0e 	bl	800491e <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003b02:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <readNumber+0x2f4>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 feec 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003b0c:	1e03      	subs	r3, r0, #0
 8003b0e:	d12d      	bne.n	8003b6c <readNumber+0x280>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003b10:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <readNumber+0x2f4>)
 8003b12:	2102      	movs	r1, #2
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 fee5 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003b1a:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d125      	bne.n	8003b6c <readNumber+0x280>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8003b20:	4b30      	ldr	r3, [pc, #192]	; (8003be4 <readNumber+0x2f8>)
 8003b22:	2101      	movs	r1, #1
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 fedd 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003b2a:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d11d      	bne.n	8003b6c <readNumber+0x280>
			HAL_Delay(5);
 8003b30:	2005      	movs	r0, #5
 8003b32:	f000 faa5 	bl	8004080 <HAL_Delay>
			valueToAdjust = 6;
 8003b36:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <readNumber+0x2fc>)
 8003b38:	4a2e      	ldr	r2, [pc, #184]	; (8003bf4 <readNumber+0x308>)
 8003b3a:	601a      	str	r2, [r3, #0]
			// Set Magenta
			HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_SET);
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	0059      	lsls	r1, r3, #1
 8003b40:	23a0      	movs	r3, #160	; 0xa0
 8003b42:	05db      	lsls	r3, r3, #23
 8003b44:	2201      	movs	r2, #1
 8003b46:	0018      	movs	r0, r3
 8003b48:	f000 fee9 	bl	800491e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	0099      	lsls	r1, r3, #2
 8003b50:	23a0      	movs	r3, #160	; 0xa0
 8003b52:	05db      	lsls	r3, r3, #23
 8003b54:	2200      	movs	r2, #0
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 fee1 	bl	800491e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	00d9      	lsls	r1, r3, #3
 8003b60:	23a0      	movs	r3, #160	; 0xa0
 8003b62:	05db      	lsls	r3, r3, #23
 8003b64:	2201      	movs	r2, #1
 8003b66:	0018      	movs	r0, r3
 8003b68:	f000 fed9 	bl	800491e <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003b6c:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <readNumber+0x2f4>)
 8003b6e:	2101      	movs	r1, #1
 8003b70:	0018      	movs	r0, r3
 8003b72:	f000 feb7 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003b76:	0003      	movs	r3, r0
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d12d      	bne.n	8003bd8 <readNumber+0x2ec>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003b7c:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <readNumber+0x2f4>)
 8003b7e:	2102      	movs	r1, #2
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 feaf 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003b86:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d125      	bne.n	8003bd8 <readNumber+0x2ec>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8003b8c:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <readNumber+0x2f8>)
 8003b8e:	2101      	movs	r1, #1
 8003b90:	0018      	movs	r0, r3
 8003b92:	f000 fea7 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003b96:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d11d      	bne.n	8003bd8 <readNumber+0x2ec>
			HAL_Delay(5);
 8003b9c:	2005      	movs	r0, #5
 8003b9e:	f000 fa6f 	bl	8004080 <HAL_Delay>
			valueToAdjust = 7;
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <readNumber+0x2fc>)
 8003ba4:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <readNumber+0x30c>)
 8003ba6:	601a      	str	r2, [r3, #0]
			// Set White
			HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_SET);
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	0059      	lsls	r1, r3, #1
 8003bac:	23a0      	movs	r3, #160	; 0xa0
 8003bae:	05db      	lsls	r3, r3, #23
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f000 feb3 	bl	800491e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	0099      	lsls	r1, r3, #2
 8003bbc:	23a0      	movs	r3, #160	; 0xa0
 8003bbe:	05db      	lsls	r3, r3, #23
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f000 feab 	bl	800491e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	00d9      	lsls	r1, r3, #3
 8003bcc:	23a0      	movs	r3, #160	; 0xa0
 8003bce:	05db      	lsls	r3, r3, #23
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f000 fea3 	bl	800491e <HAL_GPIO_WritePin>

		}


}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	50000800 	.word	0x50000800
 8003be4:	50000400 	.word	0x50000400
 8003be8:	200002e0 	.word	0x200002e0
 8003bec:	40400000 	.word	0x40400000
 8003bf0:	40a00000 	.word	0x40a00000
 8003bf4:	40c00000 	.word	0x40c00000
 8003bf8:	40e00000 	.word	0x40e00000

08003bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c00:	b672      	cpsid	i
}
 8003c02:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <Error_Handler+0x8>
	...

08003c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0c:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <HAL_MspInit+0x24>)
 8003c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_MspInit+0x24>)
 8003c12:	2101      	movs	r1, #1
 8003c14:	430a      	orrs	r2, r1
 8003c16:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <HAL_MspInit+0x24>)
 8003c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_MspInit+0x24>)
 8003c1e:	2180      	movs	r1, #128	; 0x80
 8003c20:	0549      	lsls	r1, r1, #21
 8003c22:	430a      	orrs	r2, r1
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000

08003c30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b089      	sub	sp, #36	; 0x24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c38:	240c      	movs	r4, #12
 8003c3a:	193b      	adds	r3, r7, r4
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	2314      	movs	r3, #20
 8003c40:	001a      	movs	r2, r3
 8003c42:	2100      	movs	r1, #0
 8003c44:	f006 fc72 	bl	800a52c <memset>
  if(hadc->Instance==ADC1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a14      	ldr	r2, [pc, #80]	; (8003ca0 <HAL_ADC_MspInit+0x70>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d121      	bne.n	8003c96 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c52:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <HAL_ADC_MspInit+0x74>)
 8003c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_ADC_MspInit+0x74>)
 8003c58:	2180      	movs	r1, #128	; 0x80
 8003c5a:	0089      	lsls	r1, r1, #2
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c60:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <HAL_ADC_MspInit+0x74>)
 8003c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_ADC_MspInit+0x74>)
 8003c66:	2104      	movs	r1, #4
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <HAL_ADC_MspInit+0x74>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	2204      	movs	r2, #4
 8003c72:	4013      	ands	r3, r2
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = Current_ADC_CMOS_Pin|Voltage_ADC_CMOS_Pin|Current_ADC_18650_Pin|Voltage_ADC_18650_Pin;
 8003c78:	193b      	adds	r3, r7, r4
 8003c7a:	223c      	movs	r2, #60	; 0x3c
 8003c7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c7e:	193b      	adds	r3, r7, r4
 8003c80:	2203      	movs	r2, #3
 8003c82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c84:	193b      	adds	r3, r7, r4
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c8a:	193b      	adds	r3, r7, r4
 8003c8c:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <HAL_ADC_MspInit+0x78>)
 8003c8e:	0019      	movs	r1, r3
 8003c90:	0010      	movs	r0, r2
 8003c92:	f000 fca9 	bl	80045e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b009      	add	sp, #36	; 0x24
 8003c9c:	bd90      	pop	{r4, r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	40012400 	.word	0x40012400
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	50000800 	.word	0x50000800

08003cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b089      	sub	sp, #36	; 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb4:	240c      	movs	r4, #12
 8003cb6:	193b      	adds	r3, r7, r4
 8003cb8:	0018      	movs	r0, r3
 8003cba:	2314      	movs	r3, #20
 8003cbc:	001a      	movs	r2, r3
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f006 fc34 	bl	800a52c <memset>
  if(hspi->Instance==SPI1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <HAL_SPI_MspInit+0x80>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d129      	bne.n	8003d22 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cce:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <HAL_SPI_MspInit+0x84>)
 8003cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd2:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <HAL_SPI_MspInit+0x84>)
 8003cd4:	2180      	movs	r1, #128	; 0x80
 8003cd6:	0149      	lsls	r1, r1, #5
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cdc:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <HAL_SPI_MspInit+0x84>)
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <HAL_SPI_MspInit+0x84>)
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ce8:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <HAL_SPI_MspInit+0x84>)
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	2201      	movs	r2, #1
 8003cee:	4013      	ands	r3, r2
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003cf4:	0021      	movs	r1, r4
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	22e0      	movs	r2, #224	; 0xe0
 8003cfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfc:	187b      	adds	r3, r7, r1
 8003cfe:	2202      	movs	r2, #2
 8003d00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d02:	187b      	adds	r3, r7, r1
 8003d04:	2200      	movs	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	2200      	movs	r2, #0
 8003d12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d14:	187a      	adds	r2, r7, r1
 8003d16:	23a0      	movs	r3, #160	; 0xa0
 8003d18:	05db      	lsls	r3, r3, #23
 8003d1a:	0011      	movs	r1, r2
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f000 fc63 	bl	80045e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b009      	add	sp, #36	; 0x24
 8003d28:	bd90      	pop	{r4, r7, pc}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	40013000 	.word	0x40013000
 8003d30:	40021000 	.word	0x40021000

08003d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d38:	e7fe      	b.n	8003d38 <NMI_Handler+0x4>

08003d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d3e:	e7fe      	b.n	8003d3e <HardFault_Handler+0x4>

08003d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	if(Timer1 > 0)
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <PendSV_Handler+0x34>)
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <PendSV_Handler+0x18>
	  Timer1--;
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <PendSV_Handler+0x34>)
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <PendSV_Handler+0x34>)
 8003d62:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <PendSV_Handler+0x38>)
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <PendSV_Handler+0x2c>
	  Timer2--;
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <PendSV_Handler+0x38>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <PendSV_Handler+0x38>)
 8003d76:	801a      	strh	r2, [r3, #0]
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	20000208 	.word	0x20000208
 8003d84:	2000020a 	.word	0x2000020a

08003d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d8c:	f000 f95c 	bl	8004048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	af00      	add	r7, sp, #0
  return 1;
 8003d9a:	2301      	movs	r3, #1
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <_kill>:

int _kill(int pid, int sig)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003dac:	f006 fc18 	bl	800a5e0 <__errno>
 8003db0:	0003      	movs	r3, r0
 8003db2:	2216      	movs	r2, #22
 8003db4:	601a      	str	r2, [r3, #0]
  return -1;
 8003db6:	2301      	movs	r3, #1
 8003db8:	425b      	negs	r3, r3
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b002      	add	sp, #8
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <_exit>:

void _exit (int status)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dca:	2301      	movs	r3, #1
 8003dcc:	425a      	negs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	0011      	movs	r1, r2
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7ff ffe5 	bl	8003da2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dd8:	e7fe      	b.n	8003dd8 <_exit+0x16>

08003dda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	e00a      	b.n	8003e02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003dec:	e000      	b.n	8003df0 <_read+0x16>
 8003dee:	bf00      	nop
 8003df0:	0001      	movs	r1, r0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	60ba      	str	r2, [r7, #8]
 8003df8:	b2ca      	uxtb	r2, r1
 8003dfa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	dbf0      	blt.n	8003dec <_read+0x12>
  }

  return len;
 8003e0a:	687b      	ldr	r3, [r7, #4]
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b006      	add	sp, #24
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	e009      	b.n	8003e3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	60ba      	str	r2, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7ff fc8e 	bl	8003750 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	3301      	adds	r3, #1
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	dbf1      	blt.n	8003e26 <_write+0x12>
  }
  return len;
 8003e42:	687b      	ldr	r3, [r7, #4]
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b006      	add	sp, #24
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <_close>:

int _close(int file)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e54:	2301      	movs	r3, #1
 8003e56:	425b      	negs	r3, r3
}
 8003e58:	0018      	movs	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2280      	movs	r2, #128	; 0x80
 8003e6e:	0192      	lsls	r2, r2, #6
 8003e70:	605a      	str	r2, [r3, #4]
  return 0;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_isatty>:

int _isatty(int file)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e84:	2301      	movs	r3, #1
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b002      	add	sp, #8
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b004      	add	sp, #16
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003eac:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <_sbrk+0x5c>)
 8003eae:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <_sbrk+0x60>)
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eb8:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <_sbrk+0x64>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ec0:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <_sbrk+0x64>)
 8003ec2:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <_sbrk+0x68>)
 8003ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <_sbrk+0x64>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	18d3      	adds	r3, r2, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d207      	bcs.n	8003ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ed4:	f006 fb84 	bl	800a5e0 <__errno>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	220c      	movs	r2, #12
 8003edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	425b      	negs	r3, r3
 8003ee2:	e009      	b.n	8003ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ee4:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <_sbrk+0x64>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <_sbrk+0x64>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	18d2      	adds	r2, r2, r3
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <_sbrk+0x64>)
 8003ef4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b006      	add	sp, #24
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20005000 	.word	0x20005000
 8003f04:	00000400 	.word	0x00000400
 8003f08:	200002e4 	.word	0x200002e4
 8003f0c:	20000678 	.word	0x20000678

08003f10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003f1c:	4813      	ldr	r0, [pc, #76]	; (8003f6c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003f1e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f20:	f7ff fff6 	bl	8003f10 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8003f24:	4812      	ldr	r0, [pc, #72]	; (8003f70 <LoopForever+0x6>)
    LDR R1, [R0]
 8003f26:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003f28:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8003f2a:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <LoopForever+0xa>)
    CMP R1, R2
 8003f2c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8003f2e:	d105      	bne.n	8003f3c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8003f30:	4811      	ldr	r0, [pc, #68]	; (8003f78 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8003f32:	4912      	ldr	r1, [pc, #72]	; (8003f7c <LoopForever+0x12>)
    STR R1, [R0]
 8003f34:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8003f36:	4812      	ldr	r0, [pc, #72]	; (8003f80 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003f38:	4912      	ldr	r1, [pc, #72]	; (8003f84 <LoopForever+0x1a>)
    STR R1, [R0]
 8003f3a:	6001      	str	r1, [r0, #0]

08003f3c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f3c:	4812      	ldr	r0, [pc, #72]	; (8003f88 <LoopForever+0x1e>)
  ldr r1, =_edata
 8003f3e:	4913      	ldr	r1, [pc, #76]	; (8003f8c <LoopForever+0x22>)
  ldr r2, =_sidata
 8003f40:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <LoopForever+0x26>)
  movs r3, #0
 8003f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f44:	e002      	b.n	8003f4c <LoopCopyDataInit>

08003f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f4a:	3304      	adds	r3, #4

08003f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f50:	d3f9      	bcc.n	8003f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f52:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003f54:	4c10      	ldr	r4, [pc, #64]	; (8003f98 <LoopForever+0x2e>)
  movs r3, #0
 8003f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f58:	e001      	b.n	8003f5e <LoopFillZerobss>

08003f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f5c:	3204      	adds	r2, #4

08003f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f60:	d3fb      	bcc.n	8003f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f62:	f006 fb43 	bl	800a5ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f66:	f7ff fa05 	bl	8003374 <main>

08003f6a <LoopForever>:

LoopForever:
    b LoopForever
 8003f6a:	e7fe      	b.n	8003f6a <LoopForever>
   ldr   r0, =_estack
 8003f6c:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8003f70:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003f74:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8003f78:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8003f7c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003f80:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003f84:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8003f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f8c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003f90:	0800e920 	.word	0x0800e920
  ldr r2, =_sbss
 8003f94:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003f98:	20000674 	.word	0x20000674

08003f9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f9c:	e7fe      	b.n	8003f9c <ADC1_IRQHandler>
	...

08003fa0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fa6:	1dfb      	adds	r3, r7, #7
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_Init+0x3c>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_Init+0x3c>)
 8003fb2:	2140      	movs	r1, #64	; 0x40
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fb8:	2003      	movs	r0, #3
 8003fba:	f000 f811 	bl	8003fe0 <HAL_InitTick>
 8003fbe:	1e03      	subs	r3, r0, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003fc2:	1dfb      	adds	r3, r7, #7
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	e001      	b.n	8003fce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fca:	f7ff fe1d 	bl	8003c08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fce:	1dfb      	adds	r3, r7, #7
 8003fd0:	781b      	ldrb	r3, [r3, #0]
}
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b002      	add	sp, #8
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	40022000 	.word	0x40022000

08003fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_InitTick+0x5c>)
 8003fea:	681c      	ldr	r4, [r3, #0]
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <HAL_InitTick+0x60>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	23fa      	movs	r3, #250	; 0xfa
 8003ff4:	0098      	lsls	r0, r3, #2
 8003ff6:	f7fc f8a3 	bl	8000140 <__udivsi3>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	0020      	movs	r0, r4
 8004000:	f7fc f89e 	bl	8000140 <__udivsi3>
 8004004:	0003      	movs	r3, r0
 8004006:	0018      	movs	r0, r3
 8004008:	f000 fae1 	bl	80045ce <HAL_SYSTICK_Config>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d001      	beq.n	8004014 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e00f      	b.n	8004034 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b03      	cmp	r3, #3
 8004018:	d80b      	bhi.n	8004032 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	2301      	movs	r3, #1
 800401e:	425b      	negs	r3, r3
 8004020:	2200      	movs	r2, #0
 8004022:	0018      	movs	r0, r3
 8004024:	f000 fabe 	bl	80045a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_InitTick+0x64>)
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	e000      	b.n	8004034 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
}
 8004034:	0018      	movs	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	b003      	add	sp, #12
 800403a:	bd90      	pop	{r4, r7, pc}
 800403c:	20000004 	.word	0x20000004
 8004040:	2000000c 	.word	0x2000000c
 8004044:	20000008 	.word	0x20000008

08004048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_IncTick+0x1c>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	001a      	movs	r2, r3
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_IncTick+0x20>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	18d2      	adds	r2, r2, r3
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <HAL_IncTick+0x20>)
 800405a:	601a      	str	r2, [r3, #0]
}
 800405c:	46c0      	nop			; (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	2000000c 	.word	0x2000000c
 8004068:	200002e8 	.word	0x200002e8

0800406c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  return uwTick;
 8004070:	4b02      	ldr	r3, [pc, #8]	; (800407c <HAL_GetTick+0x10>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	200002e8 	.word	0x200002e8

08004080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004088:	f7ff fff0 	bl	800406c <HAL_GetTick>
 800408c:	0003      	movs	r3, r0
 800408e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3301      	adds	r3, #1
 8004098:	d005      	beq.n	80040a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <HAL_Delay+0x44>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	001a      	movs	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	189b      	adds	r3, r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	f7ff ffe0 	bl	800406c <HAL_GetTick>
 80040ac:	0002      	movs	r2, r0
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d8f7      	bhi.n	80040a8 <HAL_Delay+0x28>
  {
  }
}
 80040b8:	46c0      	nop			; (mov r8, r8)
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b004      	add	sp, #16
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	2000000c 	.word	0x2000000c

080040c8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e159      	b.n	800438e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2250      	movs	r2, #80	; 0x50
 80040ec:	2100      	movs	r1, #0
 80040ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	0018      	movs	r0, r3
 80040f4:	f7ff fd9c 	bl	8003c30 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	2210      	movs	r2, #16
 80040fe:	4013      	ands	r3, r2
 8004100:	2b10      	cmp	r3, #16
 8004102:	d005      	beq.n	8004110 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2204      	movs	r2, #4
 800410c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800410e:	d00b      	beq.n	8004128 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	2210      	movs	r2, #16
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2250      	movs	r2, #80	; 0x50
 8004120:	2100      	movs	r1, #0
 8004122:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e132      	b.n	800438e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412c:	4a9a      	ldr	r2, [pc, #616]	; (8004398 <HAL_ADC_Init+0x2d0>)
 800412e:	4013      	ands	r3, r2
 8004130:	2202      	movs	r2, #2
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2203      	movs	r2, #3
 8004140:	4013      	ands	r3, r2
 8004142:	2b01      	cmp	r3, #1
 8004144:	d108      	bne.n	8004158 <HAL_ADC_Init+0x90>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2201      	movs	r2, #1
 800414e:	4013      	ands	r3, r2
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_ADC_Init+0x90>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <HAL_ADC_Init+0x92>
 8004158:	2300      	movs	r3, #0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d149      	bne.n	80041f2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	23c0      	movs	r3, #192	; 0xc0
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	429a      	cmp	r2, r3
 8004168:	d00b      	beq.n	8004182 <HAL_ADC_Init+0xba>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	05db      	lsls	r3, r3, #23
 8004172:	429a      	cmp	r2, r3
 8004174:	d005      	beq.n	8004182 <HAL_ADC_Init+0xba>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	2380      	movs	r3, #128	; 0x80
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	429a      	cmp	r2, r3
 8004180:	d111      	bne.n	80041a6 <HAL_ADC_Init+0xde>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	0092      	lsls	r2, r2, #2
 800418e:	0892      	lsrs	r2, r2, #2
 8004190:	611a      	str	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6919      	ldr	r1, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	611a      	str	r2, [r3, #16]
 80041a4:	e014      	b.n	80041d0 <HAL_ADC_Init+0x108>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0092      	lsls	r2, r2, #2
 80041b2:	0892      	lsrs	r2, r2, #2
 80041b4:	611a      	str	r2, [r3, #16]
 80041b6:	4b79      	ldr	r3, [pc, #484]	; (800439c <HAL_ADC_Init+0x2d4>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b78      	ldr	r3, [pc, #480]	; (800439c <HAL_ADC_Init+0x2d4>)
 80041bc:	4978      	ldr	r1, [pc, #480]	; (80043a0 <HAL_ADC_Init+0x2d8>)
 80041be:	400a      	ands	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	4b76      	ldr	r3, [pc, #472]	; (800439c <HAL_ADC_Init+0x2d4>)
 80041c4:	6819      	ldr	r1, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	4b74      	ldr	r3, [pc, #464]	; (800439c <HAL_ADC_Init+0x2d4>)
 80041cc:	430a      	orrs	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2118      	movs	r1, #24
 80041dc:	438a      	bics	r2, r1
 80041de:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68d9      	ldr	r1, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80041f2:	4b6a      	ldr	r3, [pc, #424]	; (800439c <HAL_ADC_Init+0x2d4>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b69      	ldr	r3, [pc, #420]	; (800439c <HAL_ADC_Init+0x2d4>)
 80041f8:	496a      	ldr	r1, [pc, #424]	; (80043a4 <HAL_ADC_Init+0x2dc>)
 80041fa:	400a      	ands	r2, r1
 80041fc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80041fe:	4b67      	ldr	r3, [pc, #412]	; (800439c <HAL_ADC_Init+0x2d4>)
 8004200:	6819      	ldr	r1, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	065a      	lsls	r2, r3, #25
 8004208:	4b64      	ldr	r3, [pc, #400]	; (800439c <HAL_ADC_Init+0x2d4>)
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	055b      	lsls	r3, r3, #21
 8004218:	4013      	ands	r3, r2
 800421a:	d108      	bne.n	800422e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2180      	movs	r1, #128	; 0x80
 8004228:	0549      	lsls	r1, r1, #21
 800422a:	430a      	orrs	r2, r1
 800422c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	495b      	ldr	r1, [pc, #364]	; (80043a8 <HAL_ADC_Init+0x2e0>)
 800423a:	400a      	ands	r2, r1
 800423c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68d9      	ldr	r1, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d101      	bne.n	8004254 <HAL_ADC_Init+0x18c>
 8004250:	2304      	movs	r3, #4
 8004252:	e000      	b.n	8004256 <HAL_ADC_Init+0x18e>
 8004254:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004256:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2020      	movs	r0, #32
 800425c:	5c1b      	ldrb	r3, [r3, r0]
 800425e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004260:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	202c      	movs	r0, #44	; 0x2c
 8004266:	5c1b      	ldrb	r3, [r3, r0]
 8004268:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800426a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004270:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004278:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004280:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800428e:	23c2      	movs	r3, #194	; 0xc2
 8004290:	33ff      	adds	r3, #255	; 0xff
 8004292:	429a      	cmp	r2, r3
 8004294:	d00b      	beq.n	80042ae <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68d9      	ldr	r1, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2221      	movs	r2, #33	; 0x21
 80042b2:	5c9b      	ldrb	r3, [r3, r2]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d11a      	bne.n	80042ee <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	5c9b      	ldrb	r3, [r3, r2]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2180      	movs	r1, #128	; 0x80
 80042ce:	0249      	lsls	r1, r1, #9
 80042d0:	430a      	orrs	r2, r1
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	e00b      	b.n	80042ee <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	2220      	movs	r2, #32
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	2201      	movs	r2, #1
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d11f      	bne.n	8004336 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	492a      	ldr	r1, [pc, #168]	; (80043ac <HAL_ADC_Init+0x2e4>)
 8004302:	400a      	ands	r2, r1
 8004304:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6919      	ldr	r1, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004314:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800431a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2101      	movs	r1, #1
 8004330:	430a      	orrs	r2, r1
 8004332:	611a      	str	r2, [r3, #16]
 8004334:	e00e      	b.n	8004354 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2201      	movs	r2, #1
 800433e:	4013      	ands	r3, r2
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2101      	movs	r1, #1
 8004350:	438a      	bics	r2, r1
 8004352:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2107      	movs	r1, #7
 8004360:	438a      	bics	r2, r1
 8004362:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6959      	ldr	r1, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	2203      	movs	r2, #3
 8004382:	4393      	bics	r3, r2
 8004384:	2201      	movs	r2, #1
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	b002      	add	sp, #8
 8004394:	bd80      	pop	{r7, pc}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	fffffefd 	.word	0xfffffefd
 800439c:	40012708 	.word	0x40012708
 80043a0:	ffc3ffff 	.word	0xffc3ffff
 80043a4:	fdffffff 	.word	0xfdffffff
 80043a8:	fffe0219 	.word	0xfffe0219
 80043ac:	fffffc03 	.word	0xfffffc03

080043b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2250      	movs	r2, #80	; 0x50
 80043be:	5c9b      	ldrb	r3, [r3, r2]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x18>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e050      	b.n	800446a <HAL_ADC_ConfigChannel+0xba>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2250      	movs	r2, #80	; 0x50
 80043cc:	2101      	movs	r1, #1
 80043ce:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2204      	movs	r2, #4
 80043d8:	4013      	ands	r3, r2
 80043da:	d00b      	beq.n	80043f4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	2220      	movs	r2, #32
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2250      	movs	r2, #80	; 0x50
 80043ec:	2100      	movs	r1, #0
 80043ee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e03a      	b.n	800446a <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4a1e      	ldr	r2, [pc, #120]	; (8004474 <HAL_ADC_ConfigChannel+0xc4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d018      	beq.n	8004430 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	035b      	lsls	r3, r3, #13
 800440a:	0b5a      	lsrs	r2, r3, #13
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	029b      	lsls	r3, r3, #10
 800441c:	4013      	ands	r3, r2
 800441e:	d01f      	beq.n	8004460 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8004420:	4b15      	ldr	r3, [pc, #84]	; (8004478 <HAL_ADC_ConfigChannel+0xc8>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b14      	ldr	r3, [pc, #80]	; (8004478 <HAL_ADC_ConfigChannel+0xc8>)
 8004426:	2180      	movs	r1, #128	; 0x80
 8004428:	03c9      	lsls	r1, r1, #15
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	e017      	b.n	8004460 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	035b      	lsls	r3, r3, #13
 800443c:	0b5b      	lsrs	r3, r3, #13
 800443e:	43d9      	mvns	r1, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	400a      	ands	r2, r1
 8004446:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	029b      	lsls	r3, r3, #10
 8004450:	4013      	ands	r3, r2
 8004452:	d005      	beq.n	8004460 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <HAL_ADC_ConfigChannel+0xc8>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b07      	ldr	r3, [pc, #28]	; (8004478 <HAL_ADC_ConfigChannel+0xc8>)
 800445a:	4908      	ldr	r1, [pc, #32]	; (800447c <HAL_ADC_ConfigChannel+0xcc>)
 800445c:	400a      	ands	r2, r1
 800445e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2250      	movs	r2, #80	; 0x50
 8004464:	2100      	movs	r1, #0
 8004466:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	0018      	movs	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	b002      	add	sp, #8
 8004470:	bd80      	pop	{r7, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	00001001 	.word	0x00001001
 8004478:	40012708 	.word	0x40012708
 800447c:	ffbfffff 	.word	0xffbfffff

08004480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004480:	b590      	push	{r4, r7, lr}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	0002      	movs	r2, r0
 8004488:	6039      	str	r1, [r7, #0]
 800448a:	1dfb      	adds	r3, r7, #7
 800448c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800448e:	1dfb      	adds	r3, r7, #7
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b7f      	cmp	r3, #127	; 0x7f
 8004494:	d828      	bhi.n	80044e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004496:	4a2f      	ldr	r2, [pc, #188]	; (8004554 <__NVIC_SetPriority+0xd4>)
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b25b      	sxtb	r3, r3
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	33c0      	adds	r3, #192	; 0xc0
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	589b      	ldr	r3, [r3, r2]
 80044a6:	1dfa      	adds	r2, r7, #7
 80044a8:	7812      	ldrb	r2, [r2, #0]
 80044aa:	0011      	movs	r1, r2
 80044ac:	2203      	movs	r2, #3
 80044ae:	400a      	ands	r2, r1
 80044b0:	00d2      	lsls	r2, r2, #3
 80044b2:	21ff      	movs	r1, #255	; 0xff
 80044b4:	4091      	lsls	r1, r2
 80044b6:	000a      	movs	r2, r1
 80044b8:	43d2      	mvns	r2, r2
 80044ba:	401a      	ands	r2, r3
 80044bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	019b      	lsls	r3, r3, #6
 80044c2:	22ff      	movs	r2, #255	; 0xff
 80044c4:	401a      	ands	r2, r3
 80044c6:	1dfb      	adds	r3, r7, #7
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	0018      	movs	r0, r3
 80044cc:	2303      	movs	r3, #3
 80044ce:	4003      	ands	r3, r0
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044d4:	481f      	ldr	r0, [pc, #124]	; (8004554 <__NVIC_SetPriority+0xd4>)
 80044d6:	1dfb      	adds	r3, r7, #7
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	b25b      	sxtb	r3, r3
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	430a      	orrs	r2, r1
 80044e0:	33c0      	adds	r3, #192	; 0xc0
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80044e6:	e031      	b.n	800454c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044e8:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <__NVIC_SetPriority+0xd8>)
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	0019      	movs	r1, r3
 80044f0:	230f      	movs	r3, #15
 80044f2:	400b      	ands	r3, r1
 80044f4:	3b08      	subs	r3, #8
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	3306      	adds	r3, #6
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	18d3      	adds	r3, r2, r3
 80044fe:	3304      	adds	r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	1dfa      	adds	r2, r7, #7
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	0011      	movs	r1, r2
 8004508:	2203      	movs	r2, #3
 800450a:	400a      	ands	r2, r1
 800450c:	00d2      	lsls	r2, r2, #3
 800450e:	21ff      	movs	r1, #255	; 0xff
 8004510:	4091      	lsls	r1, r2
 8004512:	000a      	movs	r2, r1
 8004514:	43d2      	mvns	r2, r2
 8004516:	401a      	ands	r2, r3
 8004518:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	019b      	lsls	r3, r3, #6
 800451e:	22ff      	movs	r2, #255	; 0xff
 8004520:	401a      	ands	r2, r3
 8004522:	1dfb      	adds	r3, r7, #7
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	0018      	movs	r0, r3
 8004528:	2303      	movs	r3, #3
 800452a:	4003      	ands	r3, r0
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004530:	4809      	ldr	r0, [pc, #36]	; (8004558 <__NVIC_SetPriority+0xd8>)
 8004532:	1dfb      	adds	r3, r7, #7
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	001c      	movs	r4, r3
 8004538:	230f      	movs	r3, #15
 800453a:	4023      	ands	r3, r4
 800453c:	3b08      	subs	r3, #8
 800453e:	089b      	lsrs	r3, r3, #2
 8004540:	430a      	orrs	r2, r1
 8004542:	3306      	adds	r3, #6
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	18c3      	adds	r3, r0, r3
 8004548:	3304      	adds	r3, #4
 800454a:	601a      	str	r2, [r3, #0]
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b003      	add	sp, #12
 8004552:	bd90      	pop	{r4, r7, pc}
 8004554:	e000e100 	.word	0xe000e100
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	1e5a      	subs	r2, r3, #1
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	045b      	lsls	r3, r3, #17
 800456c:	429a      	cmp	r2, r3
 800456e:	d301      	bcc.n	8004574 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004570:	2301      	movs	r3, #1
 8004572:	e010      	b.n	8004596 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <SysTick_Config+0x44>)
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	3a01      	subs	r2, #1
 800457a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800457c:	2301      	movs	r3, #1
 800457e:	425b      	negs	r3, r3
 8004580:	2103      	movs	r1, #3
 8004582:	0018      	movs	r0, r3
 8004584:	f7ff ff7c 	bl	8004480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <SysTick_Config+0x44>)
 800458a:	2200      	movs	r2, #0
 800458c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800458e:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <SysTick_Config+0x44>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004594:	2300      	movs	r3, #0
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	e000e010 	.word	0xe000e010

080045a4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	210f      	movs	r1, #15
 80045b0:	187b      	adds	r3, r7, r1
 80045b2:	1c02      	adds	r2, r0, #0
 80045b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	187b      	adds	r3, r7, r1
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	0011      	movs	r1, r2
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7ff ff5d 	bl	8004480 <__NVIC_SetPriority>
}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b004      	add	sp, #16
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	0018      	movs	r0, r3
 80045da:	f7ff ffbf 	bl	800455c <SysTick_Config>
 80045de:	0003      	movs	r3, r0
}
 80045e0:	0018      	movs	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	b002      	add	sp, #8
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80045fe:	e155      	b.n	80048ac <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2101      	movs	r1, #1
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4091      	lsls	r1, r2
 800460a:	000a      	movs	r2, r1
 800460c:	4013      	ands	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d100      	bne.n	8004618 <HAL_GPIO_Init+0x30>
 8004616:	e146      	b.n	80048a6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2203      	movs	r2, #3
 800461e:	4013      	ands	r3, r2
 8004620:	2b01      	cmp	r3, #1
 8004622:	d005      	beq.n	8004630 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2203      	movs	r2, #3
 800462a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800462c:	2b02      	cmp	r3, #2
 800462e:	d130      	bne.n	8004692 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	2203      	movs	r2, #3
 800463c:	409a      	lsls	r2, r3
 800463e:	0013      	movs	r3, r2
 8004640:	43da      	mvns	r2, r3
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4013      	ands	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	409a      	lsls	r2, r3
 8004652:	0013      	movs	r3, r2
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004666:	2201      	movs	r2, #1
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	409a      	lsls	r2, r3
 800466c:	0013      	movs	r3, r2
 800466e:	43da      	mvns	r2, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4013      	ands	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	2201      	movs	r2, #1
 800467e:	401a      	ands	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	409a      	lsls	r2, r3
 8004684:	0013      	movs	r3, r2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2203      	movs	r2, #3
 8004698:	4013      	ands	r3, r2
 800469a:	2b03      	cmp	r3, #3
 800469c:	d017      	beq.n	80046ce <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	2203      	movs	r2, #3
 80046aa:	409a      	lsls	r2, r3
 80046ac:	0013      	movs	r3, r2
 80046ae:	43da      	mvns	r2, r3
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4013      	ands	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	409a      	lsls	r2, r3
 80046c0:	0013      	movs	r3, r2
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2203      	movs	r2, #3
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d123      	bne.n	8004722 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	08da      	lsrs	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3208      	adds	r2, #8
 80046e2:	0092      	lsls	r2, r2, #2
 80046e4:	58d3      	ldr	r3, [r2, r3]
 80046e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2207      	movs	r2, #7
 80046ec:	4013      	ands	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	220f      	movs	r2, #15
 80046f2:	409a      	lsls	r2, r3
 80046f4:	0013      	movs	r3, r2
 80046f6:	43da      	mvns	r2, r3
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4013      	ands	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2107      	movs	r1, #7
 8004706:	400b      	ands	r3, r1
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	409a      	lsls	r2, r3
 800470c:	0013      	movs	r3, r2
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	08da      	lsrs	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3208      	adds	r2, #8
 800471c:	0092      	lsls	r2, r2, #2
 800471e:	6939      	ldr	r1, [r7, #16]
 8004720:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	2203      	movs	r2, #3
 800472e:	409a      	lsls	r2, r3
 8004730:	0013      	movs	r3, r2
 8004732:	43da      	mvns	r2, r3
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2203      	movs	r2, #3
 8004740:	401a      	ands	r2, r3
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	409a      	lsls	r2, r3
 8004748:	0013      	movs	r3, r2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	23c0      	movs	r3, #192	; 0xc0
 800475c:	029b      	lsls	r3, r3, #10
 800475e:	4013      	ands	r3, r2
 8004760:	d100      	bne.n	8004764 <HAL_GPIO_Init+0x17c>
 8004762:	e0a0      	b.n	80048a6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004764:	4b57      	ldr	r3, [pc, #348]	; (80048c4 <HAL_GPIO_Init+0x2dc>)
 8004766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004768:	4b56      	ldr	r3, [pc, #344]	; (80048c4 <HAL_GPIO_Init+0x2dc>)
 800476a:	2101      	movs	r1, #1
 800476c:	430a      	orrs	r2, r1
 800476e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004770:	4a55      	ldr	r2, [pc, #340]	; (80048c8 <HAL_GPIO_Init+0x2e0>)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	089b      	lsrs	r3, r3, #2
 8004776:	3302      	adds	r3, #2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	589b      	ldr	r3, [r3, r2]
 800477c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2203      	movs	r2, #3
 8004782:	4013      	ands	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	220f      	movs	r2, #15
 8004788:	409a      	lsls	r2, r3
 800478a:	0013      	movs	r3, r2
 800478c:	43da      	mvns	r2, r3
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4013      	ands	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	23a0      	movs	r3, #160	; 0xa0
 8004798:	05db      	lsls	r3, r3, #23
 800479a:	429a      	cmp	r2, r3
 800479c:	d01f      	beq.n	80047de <HAL_GPIO_Init+0x1f6>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a4a      	ldr	r2, [pc, #296]	; (80048cc <HAL_GPIO_Init+0x2e4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d019      	beq.n	80047da <HAL_GPIO_Init+0x1f2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a49      	ldr	r2, [pc, #292]	; (80048d0 <HAL_GPIO_Init+0x2e8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_GPIO_Init+0x1ee>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a48      	ldr	r2, [pc, #288]	; (80048d4 <HAL_GPIO_Init+0x2ec>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00d      	beq.n	80047d2 <HAL_GPIO_Init+0x1ea>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a47      	ldr	r2, [pc, #284]	; (80048d8 <HAL_GPIO_Init+0x2f0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d007      	beq.n	80047ce <HAL_GPIO_Init+0x1e6>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a46      	ldr	r2, [pc, #280]	; (80048dc <HAL_GPIO_Init+0x2f4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d101      	bne.n	80047ca <HAL_GPIO_Init+0x1e2>
 80047c6:	2305      	movs	r3, #5
 80047c8:	e00a      	b.n	80047e0 <HAL_GPIO_Init+0x1f8>
 80047ca:	2306      	movs	r3, #6
 80047cc:	e008      	b.n	80047e0 <HAL_GPIO_Init+0x1f8>
 80047ce:	2304      	movs	r3, #4
 80047d0:	e006      	b.n	80047e0 <HAL_GPIO_Init+0x1f8>
 80047d2:	2303      	movs	r3, #3
 80047d4:	e004      	b.n	80047e0 <HAL_GPIO_Init+0x1f8>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e002      	b.n	80047e0 <HAL_GPIO_Init+0x1f8>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <HAL_GPIO_Init+0x1f8>
 80047de:	2300      	movs	r3, #0
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	2103      	movs	r1, #3
 80047e4:	400a      	ands	r2, r1
 80047e6:	0092      	lsls	r2, r2, #2
 80047e8:	4093      	lsls	r3, r2
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047f0:	4935      	ldr	r1, [pc, #212]	; (80048c8 <HAL_GPIO_Init+0x2e0>)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	3302      	adds	r3, #2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047fe:	4b38      	ldr	r3, [pc, #224]	; (80048e0 <HAL_GPIO_Init+0x2f8>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	43da      	mvns	r2, r3
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4013      	ands	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	035b      	lsls	r3, r3, #13
 8004816:	4013      	ands	r3, r2
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004822:	4b2f      	ldr	r3, [pc, #188]	; (80048e0 <HAL_GPIO_Init+0x2f8>)
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004828:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_GPIO_Init+0x2f8>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	43da      	mvns	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	039b      	lsls	r3, r3, #14
 8004840:	4013      	ands	r3, r2
 8004842:	d003      	beq.n	800484c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800484c:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <HAL_GPIO_Init+0x2f8>)
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004852:	4b23      	ldr	r3, [pc, #140]	; (80048e0 <HAL_GPIO_Init+0x2f8>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	43da      	mvns	r2, r3
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4013      	ands	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	029b      	lsls	r3, r3, #10
 800486a:	4013      	ands	r3, r2
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004876:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <HAL_GPIO_Init+0x2f8>)
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800487c:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <HAL_GPIO_Init+0x2f8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	43da      	mvns	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	025b      	lsls	r3, r3, #9
 8004894:	4013      	ands	r3, r2
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <HAL_GPIO_Init+0x2f8>)
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	3301      	adds	r3, #1
 80048aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	40da      	lsrs	r2, r3
 80048b4:	1e13      	subs	r3, r2, #0
 80048b6:	d000      	beq.n	80048ba <HAL_GPIO_Init+0x2d2>
 80048b8:	e6a2      	b.n	8004600 <HAL_GPIO_Init+0x18>
  }
}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46c0      	nop			; (mov r8, r8)
 80048be:	46bd      	mov	sp, r7
 80048c0:	b006      	add	sp, #24
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40010000 	.word	0x40010000
 80048cc:	50000400 	.word	0x50000400
 80048d0:	50000800 	.word	0x50000800
 80048d4:	50000c00 	.word	0x50000c00
 80048d8:	50001000 	.word	0x50001000
 80048dc:	50001c00 	.word	0x50001c00
 80048e0:	40010400 	.word	0x40010400

080048e4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	000a      	movs	r2, r1
 80048ee:	1cbb      	adds	r3, r7, #2
 80048f0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	1cba      	adds	r2, r7, #2
 80048f8:	8812      	ldrh	r2, [r2, #0]
 80048fa:	4013      	ands	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80048fe:	230f      	movs	r3, #15
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e003      	b.n	8004910 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004908:	230f      	movs	r3, #15
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004910:	230f      	movs	r3, #15
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	781b      	ldrb	r3, [r3, #0]
}
 8004916:	0018      	movs	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	b004      	add	sp, #16
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	0008      	movs	r0, r1
 8004928:	0011      	movs	r1, r2
 800492a:	1cbb      	adds	r3, r7, #2
 800492c:	1c02      	adds	r2, r0, #0
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	1c7b      	adds	r3, r7, #1
 8004932:	1c0a      	adds	r2, r1, #0
 8004934:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004936:	1c7b      	adds	r3, r7, #1
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800493e:	1cbb      	adds	r3, r7, #2
 8004940:	881a      	ldrh	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004946:	e003      	b.n	8004950 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004948:	1cbb      	adds	r3, r7, #2
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004958:	b5b0      	push	{r4, r5, r7, lr}
 800495a:	b08a      	sub	sp, #40	; 0x28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d102      	bne.n	800496c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f000 fb6c 	bl	8005044 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800496c:	4bc8      	ldr	r3, [pc, #800]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	220c      	movs	r2, #12
 8004972:	4013      	ands	r3, r2
 8004974:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004976:	4bc6      	ldr	r3, [pc, #792]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	2380      	movs	r3, #128	; 0x80
 800497c:	025b      	lsls	r3, r3, #9
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2201      	movs	r2, #1
 8004988:	4013      	ands	r3, r2
 800498a:	d100      	bne.n	800498e <HAL_RCC_OscConfig+0x36>
 800498c:	e07d      	b.n	8004a8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d007      	beq.n	80049a4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b0c      	cmp	r3, #12
 8004998:	d112      	bne.n	80049c0 <HAL_RCC_OscConfig+0x68>
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	025b      	lsls	r3, r3, #9
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d10d      	bne.n	80049c0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a4:	4bba      	ldr	r3, [pc, #744]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	2380      	movs	r3, #128	; 0x80
 80049aa:	029b      	lsls	r3, r3, #10
 80049ac:	4013      	ands	r3, r2
 80049ae:	d100      	bne.n	80049b2 <HAL_RCC_OscConfig+0x5a>
 80049b0:	e06a      	b.n	8004a88 <HAL_RCC_OscConfig+0x130>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d166      	bne.n	8004a88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f000 fb42 	bl	8005044 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	025b      	lsls	r3, r3, #9
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_OscConfig+0x84>
 80049cc:	4bb0      	ldr	r3, [pc, #704]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4baf      	ldr	r3, [pc, #700]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 80049d2:	2180      	movs	r1, #128	; 0x80
 80049d4:	0249      	lsls	r1, r1, #9
 80049d6:	430a      	orrs	r2, r1
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e027      	b.n	8004a2c <HAL_RCC_OscConfig+0xd4>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	23a0      	movs	r3, #160	; 0xa0
 80049e2:	02db      	lsls	r3, r3, #11
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d10e      	bne.n	8004a06 <HAL_RCC_OscConfig+0xae>
 80049e8:	4ba9      	ldr	r3, [pc, #676]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4ba8      	ldr	r3, [pc, #672]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 80049ee:	2180      	movs	r1, #128	; 0x80
 80049f0:	02c9      	lsls	r1, r1, #11
 80049f2:	430a      	orrs	r2, r1
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	4ba6      	ldr	r3, [pc, #664]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4ba5      	ldr	r3, [pc, #660]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	0249      	lsls	r1, r1, #9
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	e012      	b.n	8004a2c <HAL_RCC_OscConfig+0xd4>
 8004a06:	4ba2      	ldr	r3, [pc, #648]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4ba1      	ldr	r3, [pc, #644]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004a0c:	49a1      	ldr	r1, [pc, #644]	; (8004c94 <HAL_RCC_OscConfig+0x33c>)
 8004a0e:	400a      	ands	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	4b9f      	ldr	r3, [pc, #636]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	2380      	movs	r3, #128	; 0x80
 8004a18:	025b      	lsls	r3, r3, #9
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4b9b      	ldr	r3, [pc, #620]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b9a      	ldr	r3, [pc, #616]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004a26:	499c      	ldr	r1, [pc, #624]	; (8004c98 <HAL_RCC_OscConfig+0x340>)
 8004a28:	400a      	ands	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d014      	beq.n	8004a5e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a34:	f7ff fb1a 	bl	800406c <HAL_GetTick>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a3e:	f7ff fb15 	bl	800406c <HAL_GetTick>
 8004a42:	0002      	movs	r2, r0
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b64      	cmp	r3, #100	; 0x64
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e2f9      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a50:	4b8f      	ldr	r3, [pc, #572]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	2380      	movs	r3, #128	; 0x80
 8004a56:	029b      	lsls	r3, r3, #10
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0xe6>
 8004a5c:	e015      	b.n	8004a8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5e:	f7ff fb05 	bl	800406c <HAL_GetTick>
 8004a62:	0003      	movs	r3, r0
 8004a64:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a68:	f7ff fb00 	bl	800406c <HAL_GetTick>
 8004a6c:	0002      	movs	r2, r0
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b64      	cmp	r3, #100	; 0x64
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e2e4      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a7a:	4b85      	ldr	r3, [pc, #532]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	4013      	ands	r3, r2
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x110>
 8004a86:	e000      	b.n	8004a8a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a88:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	4013      	ands	r3, r2
 8004a92:	d100      	bne.n	8004a96 <HAL_RCC_OscConfig+0x13e>
 8004a94:	e099      	b.n	8004bca <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d009      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004aa4:	4b7a      	ldr	r3, [pc, #488]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b79      	ldr	r3, [pc, #484]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004aaa:	2120      	movs	r1, #32
 8004aac:	430a      	orrs	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	4393      	bics	r3, r2
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d005      	beq.n	8004aca <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	d13e      	bne.n	8004b42 <HAL_RCC_OscConfig+0x1ea>
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d13b      	bne.n	8004b42 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004aca:	4b71      	ldr	r3, [pc, #452]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2204      	movs	r2, #4
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_RCC_OscConfig+0x186>
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e2b2      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ade:	4b6c      	ldr	r3, [pc, #432]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	4a6e      	ldr	r2, [pc, #440]	; (8004c9c <HAL_RCC_OscConfig+0x344>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	021a      	lsls	r2, r3, #8
 8004aee:	4b68      	ldr	r3, [pc, #416]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004af4:	4b66      	ldr	r3, [pc, #408]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2209      	movs	r2, #9
 8004afa:	4393      	bics	r3, r2
 8004afc:	0019      	movs	r1, r3
 8004afe:	4b64      	ldr	r3, [pc, #400]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	430a      	orrs	r2, r1
 8004b04:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b06:	f000 fbeb 	bl	80052e0 <HAL_RCC_GetSysClockFreq>
 8004b0a:	0001      	movs	r1, r0
 8004b0c:	4b60      	ldr	r3, [pc, #384]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	220f      	movs	r2, #15
 8004b14:	4013      	ands	r3, r2
 8004b16:	4a62      	ldr	r2, [pc, #392]	; (8004ca0 <HAL_RCC_OscConfig+0x348>)
 8004b18:	5cd3      	ldrb	r3, [r2, r3]
 8004b1a:	000a      	movs	r2, r1
 8004b1c:	40da      	lsrs	r2, r3
 8004b1e:	4b61      	ldr	r3, [pc, #388]	; (8004ca4 <HAL_RCC_OscConfig+0x34c>)
 8004b20:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004b22:	4b61      	ldr	r3, [pc, #388]	; (8004ca8 <HAL_RCC_OscConfig+0x350>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2513      	movs	r5, #19
 8004b28:	197c      	adds	r4, r7, r5
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7ff fa58 	bl	8003fe0 <HAL_InitTick>
 8004b30:	0003      	movs	r3, r0
 8004b32:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004b34:	197b      	adds	r3, r7, r5
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d046      	beq.n	8004bca <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004b3c:	197b      	adds	r3, r7, r5
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	e280      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d027      	beq.n	8004b98 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004b48:	4b51      	ldr	r3, [pc, #324]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2209      	movs	r2, #9
 8004b4e:	4393      	bics	r3, r2
 8004b50:	0019      	movs	r1, r3
 8004b52:	4b4f      	ldr	r3, [pc, #316]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b56:	430a      	orrs	r2, r1
 8004b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5a:	f7ff fa87 	bl	800406c <HAL_GetTick>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b64:	f7ff fa82 	bl	800406c <HAL_GetTick>
 8004b68:	0002      	movs	r2, r0
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e266      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b76:	4b46      	ldr	r3, [pc, #280]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d0f1      	beq.n	8004b64 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b80:	4b43      	ldr	r3, [pc, #268]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	4a45      	ldr	r2, [pc, #276]	; (8004c9c <HAL_RCC_OscConfig+0x344>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	0019      	movs	r1, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	021a      	lsls	r2, r3, #8
 8004b90:	4b3f      	ldr	r3, [pc, #252]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	e018      	b.n	8004bca <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b98:	4b3d      	ldr	r3, [pc, #244]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4b3c      	ldr	r3, [pc, #240]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	438a      	bics	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7ff fa62 	bl	800406c <HAL_GetTick>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bae:	f7ff fa5d 	bl	800406c <HAL_GetTick>
 8004bb2:	0002      	movs	r2, r0
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e241      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bc0:	4b33      	ldr	r3, [pc, #204]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d1f1      	bne.n	8004bae <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2210      	movs	r2, #16
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d100      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x27e>
 8004bd4:	e0a1      	b.n	8004d1a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d140      	bne.n	8004c5e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bdc:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4013      	ands	r3, r2
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x29c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e227      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bf4:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	4a2c      	ldr	r2, [pc, #176]	; (8004cac <HAL_RCC_OscConfig+0x354>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	0019      	movs	r1, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1a      	ldr	r2, [r3, #32]
 8004c02:	4b23      	ldr	r3, [pc, #140]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004c04:	430a      	orrs	r2, r1
 8004c06:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c08:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	0a19      	lsrs	r1, r3, #8
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	061a      	lsls	r2, r3, #24
 8004c16:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	0b5b      	lsrs	r3, r3, #13
 8004c22:	3301      	adds	r3, #1
 8004c24:	2280      	movs	r2, #128	; 0x80
 8004c26:	0212      	lsls	r2, r2, #8
 8004c28:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c2a:	4b19      	ldr	r3, [pc, #100]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	091b      	lsrs	r3, r3, #4
 8004c30:	210f      	movs	r1, #15
 8004c32:	400b      	ands	r3, r1
 8004c34:	491a      	ldr	r1, [pc, #104]	; (8004ca0 <HAL_RCC_OscConfig+0x348>)
 8004c36:	5ccb      	ldrb	r3, [r1, r3]
 8004c38:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <HAL_RCC_OscConfig+0x34c>)
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004c3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ca8 <HAL_RCC_OscConfig+0x350>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2513      	movs	r5, #19
 8004c44:	197c      	adds	r4, r7, r5
 8004c46:	0018      	movs	r0, r3
 8004c48:	f7ff f9ca 	bl	8003fe0 <HAL_InitTick>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004c50:	197b      	adds	r3, r7, r5
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d060      	beq.n	8004d1a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8004c58:	197b      	adds	r3, r7, r5
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	e1f2      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d03f      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004c6c:	2180      	movs	r1, #128	; 0x80
 8004c6e:	0049      	lsls	r1, r1, #1
 8004c70:	430a      	orrs	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7ff f9fa 	bl	800406c <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c7c:	e018      	b.n	8004cb0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c7e:	f7ff f9f5 	bl	800406c <HAL_GetTick>
 8004c82:	0002      	movs	r2, r0
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d911      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1d9      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
 8004c90:	40021000 	.word	0x40021000
 8004c94:	fffeffff 	.word	0xfffeffff
 8004c98:	fffbffff 	.word	0xfffbffff
 8004c9c:	ffffe0ff 	.word	0xffffe0ff
 8004ca0:	0800e068 	.word	0x0800e068
 8004ca4:	20000004 	.word	0x20000004
 8004ca8:	20000008 	.word	0x20000008
 8004cac:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004cb0:	4bc9      	ldr	r3, [pc, #804]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	2380      	movs	r3, #128	; 0x80
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d0e0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cbc:	4bc6      	ldr	r3, [pc, #792]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	4ac6      	ldr	r2, [pc, #792]	; (8004fdc <HAL_RCC_OscConfig+0x684>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1a      	ldr	r2, [r3, #32]
 8004cca:	4bc3      	ldr	r3, [pc, #780]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cd0:	4bc1      	ldr	r3, [pc, #772]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	0a19      	lsrs	r1, r3, #8
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	061a      	lsls	r2, r3, #24
 8004cde:	4bbe      	ldr	r3, [pc, #760]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	605a      	str	r2, [r3, #4]
 8004ce4:	e019      	b.n	8004d1a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ce6:	4bbc      	ldr	r3, [pc, #752]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4bbb      	ldr	r3, [pc, #748]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004cec:	49bc      	ldr	r1, [pc, #752]	; (8004fe0 <HAL_RCC_OscConfig+0x688>)
 8004cee:	400a      	ands	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7ff f9bb 	bl	800406c <HAL_GetTick>
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cfc:	f7ff f9b6 	bl	800406c <HAL_GetTick>
 8004d00:	0002      	movs	r2, r0
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e19a      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d0e:	4bb2      	ldr	r3, [pc, #712]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	2380      	movs	r3, #128	; 0x80
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4013      	ands	r3, r2
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2208      	movs	r2, #8
 8004d20:	4013      	ands	r3, r2
 8004d22:	d036      	beq.n	8004d92 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d019      	beq.n	8004d60 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d2c:	4baa      	ldr	r3, [pc, #680]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004d2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d30:	4ba9      	ldr	r3, [pc, #676]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004d32:	2101      	movs	r1, #1
 8004d34:	430a      	orrs	r2, r1
 8004d36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d38:	f7ff f998 	bl	800406c <HAL_GetTick>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d42:	f7ff f993 	bl	800406c <HAL_GetTick>
 8004d46:	0002      	movs	r2, r0
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e177      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d54:	4ba0      	ldr	r3, [pc, #640]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d58:	2202      	movs	r2, #2
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d0f1      	beq.n	8004d42 <HAL_RCC_OscConfig+0x3ea>
 8004d5e:	e018      	b.n	8004d92 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d60:	4b9d      	ldr	r3, [pc, #628]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d64:	4b9c      	ldr	r3, [pc, #624]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004d66:	2101      	movs	r1, #1
 8004d68:	438a      	bics	r2, r1
 8004d6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6c:	f7ff f97e 	bl	800406c <HAL_GetTick>
 8004d70:	0003      	movs	r3, r0
 8004d72:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d76:	f7ff f979 	bl	800406c <HAL_GetTick>
 8004d7a:	0002      	movs	r2, r0
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e15d      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d88:	4b93      	ldr	r3, [pc, #588]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d1f1      	bne.n	8004d76 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2204      	movs	r2, #4
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d100      	bne.n	8004d9e <HAL_RCC_OscConfig+0x446>
 8004d9c:	e0ae      	b.n	8004efc <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d9e:	2023      	movs	r0, #35	; 0x23
 8004da0:	183b      	adds	r3, r7, r0
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da6:	4b8c      	ldr	r3, [pc, #560]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	055b      	lsls	r3, r3, #21
 8004dae:	4013      	ands	r3, r2
 8004db0:	d109      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db2:	4b89      	ldr	r3, [pc, #548]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db6:	4b88      	ldr	r3, [pc, #544]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004db8:	2180      	movs	r1, #128	; 0x80
 8004dba:	0549      	lsls	r1, r1, #21
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004dc0:	183b      	adds	r3, r7, r0
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc6:	4b87      	ldr	r3, [pc, #540]	; (8004fe4 <HAL_RCC_OscConfig+0x68c>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d11a      	bne.n	8004e08 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dd2:	4b84      	ldr	r3, [pc, #528]	; (8004fe4 <HAL_RCC_OscConfig+0x68c>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b83      	ldr	r3, [pc, #524]	; (8004fe4 <HAL_RCC_OscConfig+0x68c>)
 8004dd8:	2180      	movs	r1, #128	; 0x80
 8004dda:	0049      	lsls	r1, r1, #1
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de0:	f7ff f944 	bl	800406c <HAL_GetTick>
 8004de4:	0003      	movs	r3, r0
 8004de6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dea:	f7ff f93f 	bl	800406c <HAL_GetTick>
 8004dee:	0002      	movs	r2, r0
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b64      	cmp	r3, #100	; 0x64
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e123      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfc:	4b79      	ldr	r3, [pc, #484]	; (8004fe4 <HAL_RCC_OscConfig+0x68c>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4013      	ands	r3, r2
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d107      	bne.n	8004e24 <HAL_RCC_OscConfig+0x4cc>
 8004e14:	4b70      	ldr	r3, [pc, #448]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e18:	4b6f      	ldr	r3, [pc, #444]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e1a:	2180      	movs	r1, #128	; 0x80
 8004e1c:	0049      	lsls	r1, r1, #1
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	651a      	str	r2, [r3, #80]	; 0x50
 8004e22:	e031      	b.n	8004e88 <HAL_RCC_OscConfig+0x530>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10c      	bne.n	8004e46 <HAL_RCC_OscConfig+0x4ee>
 8004e2c:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e30:	4b69      	ldr	r3, [pc, #420]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e32:	496b      	ldr	r1, [pc, #428]	; (8004fe0 <HAL_RCC_OscConfig+0x688>)
 8004e34:	400a      	ands	r2, r1
 8004e36:	651a      	str	r2, [r3, #80]	; 0x50
 8004e38:	4b67      	ldr	r3, [pc, #412]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e3c:	4b66      	ldr	r3, [pc, #408]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e3e:	496a      	ldr	r1, [pc, #424]	; (8004fe8 <HAL_RCC_OscConfig+0x690>)
 8004e40:	400a      	ands	r2, r1
 8004e42:	651a      	str	r2, [r3, #80]	; 0x50
 8004e44:	e020      	b.n	8004e88 <HAL_RCC_OscConfig+0x530>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	23a0      	movs	r3, #160	; 0xa0
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d10e      	bne.n	8004e70 <HAL_RCC_OscConfig+0x518>
 8004e52:	4b61      	ldr	r3, [pc, #388]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e56:	4b60      	ldr	r3, [pc, #384]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e58:	2180      	movs	r1, #128	; 0x80
 8004e5a:	00c9      	lsls	r1, r1, #3
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	651a      	str	r2, [r3, #80]	; 0x50
 8004e60:	4b5d      	ldr	r3, [pc, #372]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e64:	4b5c      	ldr	r3, [pc, #368]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e66:	2180      	movs	r1, #128	; 0x80
 8004e68:	0049      	lsls	r1, r1, #1
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	651a      	str	r2, [r3, #80]	; 0x50
 8004e6e:	e00b      	b.n	8004e88 <HAL_RCC_OscConfig+0x530>
 8004e70:	4b59      	ldr	r3, [pc, #356]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e74:	4b58      	ldr	r3, [pc, #352]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e76:	495a      	ldr	r1, [pc, #360]	; (8004fe0 <HAL_RCC_OscConfig+0x688>)
 8004e78:	400a      	ands	r2, r1
 8004e7a:	651a      	str	r2, [r3, #80]	; 0x50
 8004e7c:	4b56      	ldr	r3, [pc, #344]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e80:	4b55      	ldr	r3, [pc, #340]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004e82:	4959      	ldr	r1, [pc, #356]	; (8004fe8 <HAL_RCC_OscConfig+0x690>)
 8004e84:	400a      	ands	r2, r1
 8004e86:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e90:	f7ff f8ec 	bl	800406c <HAL_GetTick>
 8004e94:	0003      	movs	r3, r0
 8004e96:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e98:	e009      	b.n	8004eae <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e9a:	f7ff f8e7 	bl	800406c <HAL_GetTick>
 8004e9e:	0002      	movs	r2, r0
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	4a51      	ldr	r2, [pc, #324]	; (8004fec <HAL_RCC_OscConfig+0x694>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e0ca      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eae:	4b4a      	ldr	r3, [pc, #296]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d0ef      	beq.n	8004e9a <HAL_RCC_OscConfig+0x542>
 8004eba:	e014      	b.n	8004ee6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebc:	f7ff f8d6 	bl	800406c <HAL_GetTick>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ec4:	e009      	b.n	8004eda <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec6:	f7ff f8d1 	bl	800406c <HAL_GetTick>
 8004eca:	0002      	movs	r2, r0
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	4a46      	ldr	r2, [pc, #280]	; (8004fec <HAL_RCC_OscConfig+0x694>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e0b4      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004eda:	4b3f      	ldr	r3, [pc, #252]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d1ef      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ee6:	2323      	movs	r3, #35	; 0x23
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d105      	bne.n	8004efc <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef0:	4b39      	ldr	r3, [pc, #228]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef4:	4b38      	ldr	r3, [pc, #224]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004ef6:	493e      	ldr	r1, [pc, #248]	; (8004ff0 <HAL_RCC_OscConfig+0x698>)
 8004ef8:	400a      	ands	r2, r1
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d100      	bne.n	8004f06 <HAL_RCC_OscConfig+0x5ae>
 8004f04:	e09d      	b.n	8005042 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	2b0c      	cmp	r3, #12
 8004f0a:	d100      	bne.n	8004f0e <HAL_RCC_OscConfig+0x5b6>
 8004f0c:	e076      	b.n	8004ffc <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d145      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f16:	4b30      	ldr	r3, [pc, #192]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4b2f      	ldr	r3, [pc, #188]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004f1c:	4935      	ldr	r1, [pc, #212]	; (8004ff4 <HAL_RCC_OscConfig+0x69c>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f22:	f7ff f8a3 	bl	800406c <HAL_GetTick>
 8004f26:	0003      	movs	r3, r0
 8004f28:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7ff f89e 	bl	800406c <HAL_GetTick>
 8004f30:	0002      	movs	r2, r0
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e082      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f3e:	4b26      	ldr	r3, [pc, #152]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	049b      	lsls	r3, r3, #18
 8004f46:	4013      	ands	r3, r2
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f4a:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	4a2a      	ldr	r2, [pc, #168]	; (8004ff8 <HAL_RCC_OscConfig+0x6a0>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	0019      	movs	r1, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	431a      	orrs	r2, r3
 8004f64:	4b1c      	ldr	r3, [pc, #112]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004f66:	430a      	orrs	r2, r1
 8004f68:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004f70:	2180      	movs	r1, #128	; 0x80
 8004f72:	0449      	lsls	r1, r1, #17
 8004f74:	430a      	orrs	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f78:	f7ff f878 	bl	800406c <HAL_GetTick>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f82:	f7ff f873 	bl	800406c <HAL_GetTick>
 8004f86:	0002      	movs	r2, r0
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e057      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004f94:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	049b      	lsls	r3, r3, #18
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x62a>
 8004fa0:	e04f      	b.n	8005042 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa2:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004fa8:	4912      	ldr	r1, [pc, #72]	; (8004ff4 <HAL_RCC_OscConfig+0x69c>)
 8004faa:	400a      	ands	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fae:	f7ff f85d 	bl	800406c <HAL_GetTick>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7ff f858 	bl	800406c <HAL_GetTick>
 8004fbc:	0002      	movs	r2, r0
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e03c      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004fca:	4b03      	ldr	r3, [pc, #12]	; (8004fd8 <HAL_RCC_OscConfig+0x680>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	2380      	movs	r3, #128	; 0x80
 8004fd0:	049b      	lsls	r3, r3, #18
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x660>
 8004fd6:	e034      	b.n	8005042 <HAL_RCC_OscConfig+0x6ea>
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	ffff1fff 	.word	0xffff1fff
 8004fe0:	fffffeff 	.word	0xfffffeff
 8004fe4:	40007000 	.word	0x40007000
 8004fe8:	fffffbff 	.word	0xfffffbff
 8004fec:	00001388 	.word	0x00001388
 8004ff0:	efffffff 	.word	0xefffffff
 8004ff4:	feffffff 	.word	0xfeffffff
 8004ff8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e01d      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005008:	4b10      	ldr	r3, [pc, #64]	; (800504c <HAL_RCC_OscConfig+0x6f4>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	025b      	lsls	r3, r3, #9
 8005014:	401a      	ands	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	429a      	cmp	r2, r3
 800501c:	d10f      	bne.n	800503e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	23f0      	movs	r3, #240	; 0xf0
 8005022:	039b      	lsls	r3, r3, #14
 8005024:	401a      	ands	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d107      	bne.n	800503e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	23c0      	movs	r3, #192	; 0xc0
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	401a      	ands	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d001      	beq.n	8005042 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	0018      	movs	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	b00a      	add	sp, #40	; 0x28
 800504a:	bdb0      	pop	{r4, r5, r7, pc}
 800504c:	40021000 	.word	0x40021000

08005050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005050:	b5b0      	push	{r4, r5, r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e128      	b.n	80052b6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005064:	4b96      	ldr	r3, [pc, #600]	; (80052c0 <HAL_RCC_ClockConfig+0x270>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2201      	movs	r2, #1
 800506a:	4013      	ands	r3, r2
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d91e      	bls.n	80050b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005072:	4b93      	ldr	r3, [pc, #588]	; (80052c0 <HAL_RCC_ClockConfig+0x270>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2201      	movs	r2, #1
 8005078:	4393      	bics	r3, r2
 800507a:	0019      	movs	r1, r3
 800507c:	4b90      	ldr	r3, [pc, #576]	; (80052c0 <HAL_RCC_ClockConfig+0x270>)
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005084:	f7fe fff2 	bl	800406c <HAL_GetTick>
 8005088:	0003      	movs	r3, r0
 800508a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508c:	e009      	b.n	80050a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508e:	f7fe ffed 	bl	800406c <HAL_GetTick>
 8005092:	0002      	movs	r2, r0
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	4a8a      	ldr	r2, [pc, #552]	; (80052c4 <HAL_RCC_ClockConfig+0x274>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e109      	b.n	80052b6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a2:	4b87      	ldr	r3, [pc, #540]	; (80052c0 <HAL_RCC_ClockConfig+0x270>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2201      	movs	r2, #1
 80050a8:	4013      	ands	r3, r2
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d1ee      	bne.n	800508e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2202      	movs	r2, #2
 80050b6:	4013      	ands	r3, r2
 80050b8:	d009      	beq.n	80050ce <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ba:	4b83      	ldr	r3, [pc, #524]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	22f0      	movs	r2, #240	; 0xf0
 80050c0:	4393      	bics	r3, r2
 80050c2:	0019      	movs	r1, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	4b7f      	ldr	r3, [pc, #508]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 80050ca:	430a      	orrs	r2, r1
 80050cc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2201      	movs	r2, #1
 80050d4:	4013      	ands	r3, r2
 80050d6:	d100      	bne.n	80050da <HAL_RCC_ClockConfig+0x8a>
 80050d8:	e089      	b.n	80051ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d107      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050e2:	4b79      	ldr	r3, [pc, #484]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	2380      	movs	r3, #128	; 0x80
 80050e8:	029b      	lsls	r3, r3, #10
 80050ea:	4013      	ands	r3, r2
 80050ec:	d120      	bne.n	8005130 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e0e1      	b.n	80052b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d107      	bne.n	800510a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050fa:	4b73      	ldr	r3, [pc, #460]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	049b      	lsls	r3, r3, #18
 8005102:	4013      	ands	r3, r2
 8005104:	d114      	bne.n	8005130 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0d5      	b.n	80052b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d106      	bne.n	8005120 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005112:	4b6d      	ldr	r3, [pc, #436]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2204      	movs	r2, #4
 8005118:	4013      	ands	r3, r2
 800511a:	d109      	bne.n	8005130 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0ca      	b.n	80052b6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005120:	4b69      	ldr	r3, [pc, #420]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4013      	ands	r3, r2
 800512a:	d101      	bne.n	8005130 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0c2      	b.n	80052b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005130:	4b65      	ldr	r3, [pc, #404]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2203      	movs	r2, #3
 8005136:	4393      	bics	r3, r2
 8005138:	0019      	movs	r1, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	4b62      	ldr	r3, [pc, #392]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 8005140:	430a      	orrs	r2, r1
 8005142:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005144:	f7fe ff92 	bl	800406c <HAL_GetTick>
 8005148:	0003      	movs	r3, r0
 800514a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d111      	bne.n	8005178 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005154:	e009      	b.n	800516a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005156:	f7fe ff89 	bl	800406c <HAL_GetTick>
 800515a:	0002      	movs	r2, r0
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	4a58      	ldr	r2, [pc, #352]	; (80052c4 <HAL_RCC_ClockConfig+0x274>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e0a5      	b.n	80052b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800516a:	4b57      	ldr	r3, [pc, #348]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	220c      	movs	r2, #12
 8005170:	4013      	ands	r3, r2
 8005172:	2b08      	cmp	r3, #8
 8005174:	d1ef      	bne.n	8005156 <HAL_RCC_ClockConfig+0x106>
 8005176:	e03a      	b.n	80051ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d111      	bne.n	80051a4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005180:	e009      	b.n	8005196 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005182:	f7fe ff73 	bl	800406c <HAL_GetTick>
 8005186:	0002      	movs	r2, r0
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	4a4d      	ldr	r2, [pc, #308]	; (80052c4 <HAL_RCC_ClockConfig+0x274>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e08f      	b.n	80052b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005196:	4b4c      	ldr	r3, [pc, #304]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	220c      	movs	r2, #12
 800519c:	4013      	ands	r3, r2
 800519e:	2b0c      	cmp	r3, #12
 80051a0:	d1ef      	bne.n	8005182 <HAL_RCC_ClockConfig+0x132>
 80051a2:	e024      	b.n	80051ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d11b      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051ac:	e009      	b.n	80051c2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ae:	f7fe ff5d 	bl	800406c <HAL_GetTick>
 80051b2:	0002      	movs	r2, r0
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	4a42      	ldr	r2, [pc, #264]	; (80052c4 <HAL_RCC_ClockConfig+0x274>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e079      	b.n	80052b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051c2:	4b41      	ldr	r3, [pc, #260]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	220c      	movs	r2, #12
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d1ef      	bne.n	80051ae <HAL_RCC_ClockConfig+0x15e>
 80051ce:	e00e      	b.n	80051ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d0:	f7fe ff4c 	bl	800406c <HAL_GetTick>
 80051d4:	0002      	movs	r2, r0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	4a3a      	ldr	r2, [pc, #232]	; (80052c4 <HAL_RCC_ClockConfig+0x274>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e068      	b.n	80052b6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80051e4:	4b38      	ldr	r3, [pc, #224]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	220c      	movs	r2, #12
 80051ea:	4013      	ands	r3, r2
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051ee:	4b34      	ldr	r3, [pc, #208]	; (80052c0 <HAL_RCC_ClockConfig+0x270>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2201      	movs	r2, #1
 80051f4:	4013      	ands	r3, r2
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d21e      	bcs.n	800523a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fc:	4b30      	ldr	r3, [pc, #192]	; (80052c0 <HAL_RCC_ClockConfig+0x270>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2201      	movs	r2, #1
 8005202:	4393      	bics	r3, r2
 8005204:	0019      	movs	r1, r3
 8005206:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <HAL_RCC_ClockConfig+0x270>)
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800520e:	f7fe ff2d 	bl	800406c <HAL_GetTick>
 8005212:	0003      	movs	r3, r0
 8005214:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005216:	e009      	b.n	800522c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005218:	f7fe ff28 	bl	800406c <HAL_GetTick>
 800521c:	0002      	movs	r2, r0
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	4a28      	ldr	r2, [pc, #160]	; (80052c4 <HAL_RCC_ClockConfig+0x274>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d901      	bls.n	800522c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e044      	b.n	80052b6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800522c:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <HAL_RCC_ClockConfig+0x270>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2201      	movs	r2, #1
 8005232:	4013      	ands	r3, r2
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d1ee      	bne.n	8005218 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2204      	movs	r2, #4
 8005240:	4013      	ands	r3, r2
 8005242:	d009      	beq.n	8005258 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005244:	4b20      	ldr	r3, [pc, #128]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	4a20      	ldr	r2, [pc, #128]	; (80052cc <HAL_RCC_ClockConfig+0x27c>)
 800524a:	4013      	ands	r3, r2
 800524c:	0019      	movs	r1, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 8005254:	430a      	orrs	r2, r1
 8005256:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2208      	movs	r2, #8
 800525e:	4013      	ands	r3, r2
 8005260:	d00a      	beq.n	8005278 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005262:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	4a1a      	ldr	r2, [pc, #104]	; (80052d0 <HAL_RCC_ClockConfig+0x280>)
 8005268:	4013      	ands	r3, r2
 800526a:	0019      	movs	r1, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	00da      	lsls	r2, r3, #3
 8005272:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 8005274:	430a      	orrs	r2, r1
 8005276:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005278:	f000 f832 	bl	80052e0 <HAL_RCC_GetSysClockFreq>
 800527c:	0001      	movs	r1, r0
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <HAL_RCC_ClockConfig+0x278>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	091b      	lsrs	r3, r3, #4
 8005284:	220f      	movs	r2, #15
 8005286:	4013      	ands	r3, r2
 8005288:	4a12      	ldr	r2, [pc, #72]	; (80052d4 <HAL_RCC_ClockConfig+0x284>)
 800528a:	5cd3      	ldrb	r3, [r2, r3]
 800528c:	000a      	movs	r2, r1
 800528e:	40da      	lsrs	r2, r3
 8005290:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <HAL_RCC_ClockConfig+0x288>)
 8005292:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005294:	4b11      	ldr	r3, [pc, #68]	; (80052dc <HAL_RCC_ClockConfig+0x28c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	250b      	movs	r5, #11
 800529a:	197c      	adds	r4, r7, r5
 800529c:	0018      	movs	r0, r3
 800529e:	f7fe fe9f 	bl	8003fe0 <HAL_InitTick>
 80052a2:	0003      	movs	r3, r0
 80052a4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80052a6:	197b      	adds	r3, r7, r5
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80052ae:	197b      	adds	r3, r7, r5
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	e000      	b.n	80052b6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	0018      	movs	r0, r3
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b004      	add	sp, #16
 80052bc:	bdb0      	pop	{r4, r5, r7, pc}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	40022000 	.word	0x40022000
 80052c4:	00001388 	.word	0x00001388
 80052c8:	40021000 	.word	0x40021000
 80052cc:	fffff8ff 	.word	0xfffff8ff
 80052d0:	ffffc7ff 	.word	0xffffc7ff
 80052d4:	0800e068 	.word	0x0800e068
 80052d8:	20000004 	.word	0x20000004
 80052dc:	20000008 	.word	0x20000008

080052e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e0:	b5b0      	push	{r4, r5, r7, lr}
 80052e2:	b08e      	sub	sp, #56	; 0x38
 80052e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80052e6:	4b4c      	ldr	r3, [pc, #304]	; (8005418 <HAL_RCC_GetSysClockFreq+0x138>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ee:	230c      	movs	r3, #12
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d014      	beq.n	8005320 <HAL_RCC_GetSysClockFreq+0x40>
 80052f6:	d900      	bls.n	80052fa <HAL_RCC_GetSysClockFreq+0x1a>
 80052f8:	e07b      	b.n	80053f2 <HAL_RCC_GetSysClockFreq+0x112>
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d002      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0x24>
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d00b      	beq.n	800531a <HAL_RCC_GetSysClockFreq+0x3a>
 8005302:	e076      	b.n	80053f2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005304:	4b44      	ldr	r3, [pc, #272]	; (8005418 <HAL_RCC_GetSysClockFreq+0x138>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2210      	movs	r2, #16
 800530a:	4013      	ands	r3, r2
 800530c:	d002      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800530e:	4b43      	ldr	r3, [pc, #268]	; (800541c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005310:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005312:	e07c      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005314:	4b42      	ldr	r3, [pc, #264]	; (8005420 <HAL_RCC_GetSysClockFreq+0x140>)
 8005316:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005318:	e079      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800531a:	4b42      	ldr	r3, [pc, #264]	; (8005424 <HAL_RCC_GetSysClockFreq+0x144>)
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800531e:	e076      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005322:	0c9a      	lsrs	r2, r3, #18
 8005324:	230f      	movs	r3, #15
 8005326:	401a      	ands	r2, r3
 8005328:	4b3f      	ldr	r3, [pc, #252]	; (8005428 <HAL_RCC_GetSysClockFreq+0x148>)
 800532a:	5c9b      	ldrb	r3, [r3, r2]
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	0d9a      	lsrs	r2, r3, #22
 8005332:	2303      	movs	r3, #3
 8005334:	4013      	ands	r3, r2
 8005336:	3301      	adds	r3, #1
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800533a:	4b37      	ldr	r3, [pc, #220]	; (8005418 <HAL_RCC_GetSysClockFreq+0x138>)
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	025b      	lsls	r3, r3, #9
 8005342:	4013      	ands	r3, r2
 8005344:	d01a      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
 800534e:	4a35      	ldr	r2, [pc, #212]	; (8005424 <HAL_RCC_GetSysClockFreq+0x144>)
 8005350:	2300      	movs	r3, #0
 8005352:	69b8      	ldr	r0, [r7, #24]
 8005354:	69f9      	ldr	r1, [r7, #28]
 8005356:	f7fb f8c7 	bl	80004e8 <__aeabi_lmul>
 800535a:	0002      	movs	r2, r0
 800535c:	000b      	movs	r3, r1
 800535e:	0010      	movs	r0, r2
 8005360:	0019      	movs	r1, r3
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f7fb f89b 	bl	80004a8 <__aeabi_uldivmod>
 8005372:	0002      	movs	r2, r0
 8005374:	000b      	movs	r3, r1
 8005376:	0013      	movs	r3, r2
 8005378:	637b      	str	r3, [r7, #52]	; 0x34
 800537a:	e037      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800537c:	4b26      	ldr	r3, [pc, #152]	; (8005418 <HAL_RCC_GetSysClockFreq+0x138>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2210      	movs	r2, #16
 8005382:	4013      	ands	r3, r2
 8005384:	d01a      	beq.n	80053bc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	4a23      	ldr	r2, [pc, #140]	; (800541c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005390:	2300      	movs	r3, #0
 8005392:	68b8      	ldr	r0, [r7, #8]
 8005394:	68f9      	ldr	r1, [r7, #12]
 8005396:	f7fb f8a7 	bl	80004e8 <__aeabi_lmul>
 800539a:	0002      	movs	r2, r0
 800539c:	000b      	movs	r3, r1
 800539e:	0010      	movs	r0, r2
 80053a0:	0019      	movs	r1, r3
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	603b      	str	r3, [r7, #0]
 80053a6:	2300      	movs	r3, #0
 80053a8:	607b      	str	r3, [r7, #4]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f7fb f87b 	bl	80004a8 <__aeabi_uldivmod>
 80053b2:	0002      	movs	r2, r0
 80053b4:	000b      	movs	r3, r1
 80053b6:	0013      	movs	r3, r2
 80053b8:	637b      	str	r3, [r7, #52]	; 0x34
 80053ba:	e017      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	0018      	movs	r0, r3
 80053c0:	2300      	movs	r3, #0
 80053c2:	0019      	movs	r1, r3
 80053c4:	4a16      	ldr	r2, [pc, #88]	; (8005420 <HAL_RCC_GetSysClockFreq+0x140>)
 80053c6:	2300      	movs	r3, #0
 80053c8:	f7fb f88e 	bl	80004e8 <__aeabi_lmul>
 80053cc:	0002      	movs	r2, r0
 80053ce:	000b      	movs	r3, r1
 80053d0:	0010      	movs	r0, r2
 80053d2:	0019      	movs	r1, r3
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	001c      	movs	r4, r3
 80053d8:	2300      	movs	r3, #0
 80053da:	001d      	movs	r5, r3
 80053dc:	0022      	movs	r2, r4
 80053de:	002b      	movs	r3, r5
 80053e0:	f7fb f862 	bl	80004a8 <__aeabi_uldivmod>
 80053e4:	0002      	movs	r2, r0
 80053e6:	000b      	movs	r3, r1
 80053e8:	0013      	movs	r3, r2
 80053ea:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80053ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80053f0:	e00d      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80053f2:	4b09      	ldr	r3, [pc, #36]	; (8005418 <HAL_RCC_GetSysClockFreq+0x138>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	0b5b      	lsrs	r3, r3, #13
 80053f8:	2207      	movs	r2, #7
 80053fa:	4013      	ands	r3, r2
 80053fc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	3301      	adds	r3, #1
 8005402:	2280      	movs	r2, #128	; 0x80
 8005404:	0212      	lsls	r2, r2, #8
 8005406:	409a      	lsls	r2, r3
 8005408:	0013      	movs	r3, r2
 800540a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800540c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	b00e      	add	sp, #56	; 0x38
 8005416:	bdb0      	pop	{r4, r5, r7, pc}
 8005418:	40021000 	.word	0x40021000
 800541c:	003d0900 	.word	0x003d0900
 8005420:	00f42400 	.word	0x00f42400
 8005424:	007a1200 	.word	0x007a1200
 8005428:	0800e078 	.word	0x0800e078

0800542c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e07b      	b.n	8005536 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	2382      	movs	r3, #130	; 0x82
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	429a      	cmp	r2, r3
 8005450:	d009      	beq.n	8005466 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	61da      	str	r2, [r3, #28]
 8005458:	e005      	b.n	8005466 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2251      	movs	r2, #81	; 0x51
 8005470:	5c9b      	ldrb	r3, [r3, r2]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d107      	bne.n	8005488 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2250      	movs	r2, #80	; 0x50
 800547c:	2100      	movs	r1, #0
 800547e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	0018      	movs	r0, r3
 8005484:	f7fe fc12 	bl	8003cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2251      	movs	r2, #81	; 0x51
 800548c:	2102      	movs	r1, #2
 800548e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2140      	movs	r1, #64	; 0x40
 800549c:	438a      	bics	r2, r1
 800549e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	2382      	movs	r3, #130	; 0x82
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	401a      	ands	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6899      	ldr	r1, [r3, #8]
 80054ae:	2384      	movs	r3, #132	; 0x84
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	400b      	ands	r3, r1
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68d9      	ldr	r1, [r3, #12]
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	400b      	ands	r3, r1
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2102      	movs	r1, #2
 80054c8:	400b      	ands	r3, r1
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	2101      	movs	r1, #1
 80054d2:	400b      	ands	r3, r1
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6999      	ldr	r1, [r3, #24]
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	400b      	ands	r3, r1
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	2138      	movs	r1, #56	; 0x38
 80054e8:	400b      	ands	r3, r1
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	2180      	movs	r1, #128	; 0x80
 80054f2:	400b      	ands	r3, r1
 80054f4:	431a      	orrs	r2, r3
 80054f6:	0011      	movs	r1, r2
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	019b      	lsls	r3, r3, #6
 8005500:	401a      	ands	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	0c1b      	lsrs	r3, r3, #16
 8005510:	2204      	movs	r2, #4
 8005512:	4013      	ands	r3, r2
 8005514:	0019      	movs	r1, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2210      	movs	r2, #16
 800551c:	401a      	ands	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2251      	movs	r2, #81	; 0x51
 8005530:	2101      	movs	r1, #1
 8005532:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	0018      	movs	r0, r3
 8005538:	46bd      	mov	sp, r7
 800553a:	b002      	add	sp, #8
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b088      	sub	sp, #32
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	1dbb      	adds	r3, r7, #6
 800554c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800554e:	231f      	movs	r3, #31
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2250      	movs	r2, #80	; 0x50
 800555a:	5c9b      	ldrb	r3, [r3, r2]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_SPI_Transmit+0x26>
 8005560:	2302      	movs	r3, #2
 8005562:	e145      	b.n	80057f0 <HAL_SPI_Transmit+0x2b2>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2250      	movs	r2, #80	; 0x50
 8005568:	2101      	movs	r1, #1
 800556a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800556c:	f7fe fd7e 	bl	800406c <HAL_GetTick>
 8005570:	0003      	movs	r3, r0
 8005572:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005574:	2316      	movs	r3, #22
 8005576:	18fb      	adds	r3, r7, r3
 8005578:	1dba      	adds	r2, r7, #6
 800557a:	8812      	ldrh	r2, [r2, #0]
 800557c:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2251      	movs	r2, #81	; 0x51
 8005582:	5c9b      	ldrb	r3, [r3, r2]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b01      	cmp	r3, #1
 8005588:	d004      	beq.n	8005594 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800558a:	231f      	movs	r3, #31
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	2202      	movs	r2, #2
 8005590:	701a      	strb	r2, [r3, #0]
    goto error;
 8005592:	e126      	b.n	80057e2 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_SPI_Transmit+0x64>
 800559a:	1dbb      	adds	r3, r7, #6
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d104      	bne.n	80055ac <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80055a2:	231f      	movs	r3, #31
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	2201      	movs	r2, #1
 80055a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80055aa:	e11a      	b.n	80057e2 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2251      	movs	r2, #81	; 0x51
 80055b0:	2103      	movs	r1, #3
 80055b2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	1dba      	adds	r2, r7, #6
 80055c4:	8812      	ldrh	r2, [r2, #0]
 80055c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	1dba      	adds	r2, r7, #6
 80055cc:	8812      	ldrh	r2, [r2, #0]
 80055ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d110      	bne.n	800561c <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2140      	movs	r1, #64	; 0x40
 8005606:	438a      	bics	r2, r1
 8005608:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2180      	movs	r1, #128	; 0x80
 8005616:	01c9      	lsls	r1, r1, #7
 8005618:	430a      	orrs	r2, r1
 800561a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2240      	movs	r2, #64	; 0x40
 8005624:	4013      	ands	r3, r2
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d007      	beq.n	800563a <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2140      	movs	r1, #64	; 0x40
 8005636:	430a      	orrs	r2, r1
 8005638:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	2380      	movs	r3, #128	; 0x80
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	429a      	cmp	r2, r3
 8005644:	d152      	bne.n	80056ec <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <HAL_SPI_Transmit+0x11a>
 800564e:	2316      	movs	r3, #22
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d143      	bne.n	80056e0 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	881a      	ldrh	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	1c9a      	adds	r2, r3, #2
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800567c:	e030      	b.n	80056e0 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2202      	movs	r2, #2
 8005686:	4013      	ands	r3, r2
 8005688:	2b02      	cmp	r3, #2
 800568a:	d112      	bne.n	80056b2 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	881a      	ldrh	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	1c9a      	adds	r2, r3, #2
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80056b0:	e016      	b.n	80056e0 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b2:	f7fe fcdb 	bl	800406c <HAL_GetTick>
 80056b6:	0002      	movs	r2, r0
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d802      	bhi.n	80056c8 <HAL_SPI_Transmit+0x18a>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	d102      	bne.n	80056ce <HAL_SPI_Transmit+0x190>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d108      	bne.n	80056e0 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80056ce:	231f      	movs	r3, #31
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	2203      	movs	r2, #3
 80056d4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2251      	movs	r2, #81	; 0x51
 80056da:	2101      	movs	r1, #1
 80056dc:	5499      	strb	r1, [r3, r2]
          goto error;
 80056de:	e080      	b.n	80057e2 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1c9      	bne.n	800567e <HAL_SPI_Transmit+0x140>
 80056ea:	e053      	b.n	8005794 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d004      	beq.n	80056fe <HAL_SPI_Transmit+0x1c0>
 80056f4:	2316      	movs	r3, #22
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d145      	bne.n	800578a <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	330c      	adds	r3, #12
 8005708:	7812      	ldrb	r2, [r2, #0]
 800570a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005724:	e031      	b.n	800578a <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2202      	movs	r2, #2
 800572e:	4013      	ands	r3, r2
 8005730:	2b02      	cmp	r3, #2
 8005732:	d113      	bne.n	800575c <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	7812      	ldrb	r2, [r2, #0]
 8005740:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	86da      	strh	r2, [r3, #54]	; 0x36
 800575a:	e016      	b.n	800578a <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800575c:	f7fe fc86 	bl	800406c <HAL_GetTick>
 8005760:	0002      	movs	r2, r0
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d802      	bhi.n	8005772 <HAL_SPI_Transmit+0x234>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	3301      	adds	r3, #1
 8005770:	d102      	bne.n	8005778 <HAL_SPI_Transmit+0x23a>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d108      	bne.n	800578a <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8005778:	231f      	movs	r3, #31
 800577a:	18fb      	adds	r3, r7, r3
 800577c:	2203      	movs	r2, #3
 800577e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2251      	movs	r2, #81	; 0x51
 8005784:	2101      	movs	r1, #1
 8005786:	5499      	strb	r1, [r3, r2]
          goto error;
 8005788:	e02b      	b.n	80057e2 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1c8      	bne.n	8005726 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	0018      	movs	r0, r3
 800579c:	f000 fa86 	bl	8005cac <SPI_EndRxTxTransaction>
 80057a0:	1e03      	subs	r3, r0, #0
 80057a2:	d002      	beq.n	80057aa <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d004      	beq.n	80057da <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80057d0:	231f      	movs	r3, #31
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	2201      	movs	r2, #1
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	e003      	b.n	80057e2 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2251      	movs	r2, #81	; 0x51
 80057de:	2101      	movs	r1, #1
 80057e0:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2250      	movs	r2, #80	; 0x50
 80057e6:	2100      	movs	r1, #0
 80057e8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80057ea:	231f      	movs	r3, #31
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	781b      	ldrb	r3, [r3, #0]
}
 80057f0:	0018      	movs	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b008      	add	sp, #32
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08c      	sub	sp, #48	; 0x30
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	001a      	movs	r2, r3
 8005806:	1cbb      	adds	r3, r7, #2
 8005808:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800580a:	2301      	movs	r3, #1
 800580c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800580e:	232b      	movs	r3, #43	; 0x2b
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2250      	movs	r2, #80	; 0x50
 800581a:	5c9b      	ldrb	r3, [r3, r2]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_SPI_TransmitReceive+0x2c>
 8005820:	2302      	movs	r3, #2
 8005822:	e1b0      	b.n	8005b86 <HAL_SPI_TransmitReceive+0x38e>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2250      	movs	r2, #80	; 0x50
 8005828:	2101      	movs	r1, #1
 800582a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800582c:	f7fe fc1e 	bl	800406c <HAL_GetTick>
 8005830:	0003      	movs	r3, r0
 8005832:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005834:	2023      	movs	r0, #35	; 0x23
 8005836:	183b      	adds	r3, r7, r0
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	2151      	movs	r1, #81	; 0x51
 800583c:	5c52      	ldrb	r2, [r2, r1]
 800583e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005846:	231a      	movs	r3, #26
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	1cba      	adds	r2, r7, #2
 800584c:	8812      	ldrh	r2, [r2, #0]
 800584e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005850:	183b      	adds	r3, r7, r0
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d011      	beq.n	800587c <HAL_SPI_TransmitReceive+0x84>
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	2382      	movs	r3, #130	; 0x82
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	429a      	cmp	r2, r3
 8005860:	d107      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d103      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x7a>
 800586a:	183b      	adds	r3, r7, r0
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b04      	cmp	r3, #4
 8005870:	d004      	beq.n	800587c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005872:	232b      	movs	r3, #43	; 0x2b
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	2202      	movs	r2, #2
 8005878:	701a      	strb	r2, [r3, #0]
    goto error;
 800587a:	e17d      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d006      	beq.n	8005890 <HAL_SPI_TransmitReceive+0x98>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <HAL_SPI_TransmitReceive+0x98>
 8005888:	1cbb      	adds	r3, r7, #2
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d104      	bne.n	800589a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005890:	232b      	movs	r3, #43	; 0x2b
 8005892:	18fb      	adds	r3, r7, r3
 8005894:	2201      	movs	r2, #1
 8005896:	701a      	strb	r2, [r3, #0]
    goto error;
 8005898:	e16e      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2251      	movs	r2, #81	; 0x51
 800589e:	5c9b      	ldrb	r3, [r3, r2]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d003      	beq.n	80058ae <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2251      	movs	r2, #81	; 0x51
 80058aa:	2105      	movs	r1, #5
 80058ac:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1cba      	adds	r2, r7, #2
 80058be:	8812      	ldrh	r2, [r2, #0]
 80058c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1cba      	adds	r2, r7, #2
 80058c6:	8812      	ldrh	r2, [r2, #0]
 80058c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	1cba      	adds	r2, r7, #2
 80058d4:	8812      	ldrh	r2, [r2, #0]
 80058d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	1cba      	adds	r2, r7, #2
 80058dc:	8812      	ldrh	r2, [r2, #0]
 80058de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2240      	movs	r2, #64	; 0x40
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d007      	beq.n	800590a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2140      	movs	r1, #64	; 0x40
 8005906:	430a      	orrs	r2, r1
 8005908:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	2380      	movs	r3, #128	; 0x80
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	429a      	cmp	r2, r3
 8005914:	d000      	beq.n	8005918 <HAL_SPI_TransmitReceive+0x120>
 8005916:	e07f      	b.n	8005a18 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_SPI_TransmitReceive+0x134>
 8005920:	231a      	movs	r3, #26
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d000      	beq.n	800592c <HAL_SPI_TransmitReceive+0x134>
 800592a:	e06a      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	881a      	ldrh	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	1c9a      	adds	r2, r3, #2
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005950:	e057      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2202      	movs	r2, #2
 800595a:	4013      	ands	r3, r2
 800595c:	2b02      	cmp	r3, #2
 800595e:	d11b      	bne.n	8005998 <HAL_SPI_TransmitReceive+0x1a0>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <HAL_SPI_TransmitReceive+0x1a0>
 800596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596c:	2b01      	cmp	r3, #1
 800596e:	d113      	bne.n	8005998 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	881a      	ldrh	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005980:	1c9a      	adds	r2, r3, #2
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2201      	movs	r2, #1
 80059a0:	4013      	ands	r3, r2
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d119      	bne.n	80059da <HAL_SPI_TransmitReceive+0x1e2>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d014      	beq.n	80059da <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	b292      	uxth	r2, r2
 80059bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	1c9a      	adds	r2, r3, #2
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059d6:	2301      	movs	r3, #1
 80059d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059da:	f7fe fb47 	bl	800406c <HAL_GetTick>
 80059de:	0002      	movs	r2, r0
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d80b      	bhi.n	8005a02 <HAL_SPI_TransmitReceive+0x20a>
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	3301      	adds	r3, #1
 80059ee:	d008      	beq.n	8005a02 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 80059f0:	232b      	movs	r3, #43	; 0x2b
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	2203      	movs	r2, #3
 80059f6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2251      	movs	r2, #81	; 0x51
 80059fc:	2101      	movs	r1, #1
 80059fe:	5499      	strb	r1, [r3, r2]
        goto error;
 8005a00:	e0ba      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1a2      	bne.n	8005952 <HAL_SPI_TransmitReceive+0x15a>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d19d      	bne.n	8005952 <HAL_SPI_TransmitReceive+0x15a>
 8005a16:	e083      	b.n	8005b20 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <HAL_SPI_TransmitReceive+0x234>
 8005a20:	231a      	movs	r3, #26
 8005a22:	18fb      	adds	r3, r7, r3
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d000      	beq.n	8005a2c <HAL_SPI_TransmitReceive+0x234>
 8005a2a:	e06f      	b.n	8005b0c <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	330c      	adds	r3, #12
 8005a36:	7812      	ldrb	r2, [r2, #0]
 8005a38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a52:	e05b      	b.n	8005b0c <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d11c      	bne.n	8005a9c <HAL_SPI_TransmitReceive+0x2a4>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d017      	beq.n	8005a9c <HAL_SPI_TransmitReceive+0x2a4>
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d114      	bne.n	8005a9c <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	7812      	ldrb	r2, [r2, #0]
 8005a7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d119      	bne.n	8005ade <HAL_SPI_TransmitReceive+0x2e6>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d014      	beq.n	8005ade <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ada:	2301      	movs	r3, #1
 8005adc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ade:	f7fe fac5 	bl	800406c <HAL_GetTick>
 8005ae2:	0002      	movs	r2, r0
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d802      	bhi.n	8005af4 <HAL_SPI_TransmitReceive+0x2fc>
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	3301      	adds	r3, #1
 8005af2:	d102      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x302>
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d108      	bne.n	8005b0c <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8005afa:	232b      	movs	r3, #43	; 0x2b
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	2203      	movs	r2, #3
 8005b00:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2251      	movs	r2, #81	; 0x51
 8005b06:	2101      	movs	r1, #1
 8005b08:	5499      	strb	r1, [r3, r2]
        goto error;
 8005b0a:	e035      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d19e      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x25c>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d199      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	0018      	movs	r0, r3
 8005b28:	f000 f8c0 	bl	8005cac <SPI_EndRxTxTransaction>
 8005b2c:	1e03      	subs	r3, r0, #0
 8005b2e:	d007      	beq.n	8005b40 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8005b30:	232b      	movs	r3, #43	; 0x2b
 8005b32:	18fb      	adds	r3, r7, r3
 8005b34:	2201      	movs	r2, #1
 8005b36:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b3e:	e01b      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8005b66:	232b      	movs	r3, #43	; 0x2b
 8005b68:	18fb      	adds	r3, r7, r3
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	e003      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2251      	movs	r2, #81	; 0x51
 8005b74:	2101      	movs	r1, #1
 8005b76:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2250      	movs	r2, #80	; 0x50
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005b80:	232b      	movs	r3, #43	; 0x2b
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	781b      	ldrb	r3, [r3, #0]
}
 8005b86:	0018      	movs	r0, r3
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	b00c      	add	sp, #48	; 0x30
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	1dfb      	adds	r3, r7, #7
 8005b9e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ba0:	f7fe fa64 	bl	800406c <HAL_GetTick>
 8005ba4:	0002      	movs	r2, r0
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	18d3      	adds	r3, r2, r3
 8005bae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bb0:	f7fe fa5c 	bl	800406c <HAL_GetTick>
 8005bb4:	0003      	movs	r3, r0
 8005bb6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bb8:	4b3a      	ldr	r3, [pc, #232]	; (8005ca4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	015b      	lsls	r3, r3, #5
 8005bbe:	0d1b      	lsrs	r3, r3, #20
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	4353      	muls	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bc6:	e058      	b.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	d055      	beq.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bce:	f7fe fa4d 	bl	800406c <HAL_GetTick>
 8005bd2:	0002      	movs	r2, r0
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d902      	bls.n	8005be4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d142      	bne.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	21e0      	movs	r1, #224	; 0xe0
 8005bf0:	438a      	bics	r2, r1
 8005bf2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	2382      	movs	r3, #130	; 0x82
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d113      	bne.n	8005c28 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d005      	beq.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d107      	bne.n	8005c28 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2140      	movs	r1, #64	; 0x40
 8005c24:	438a      	bics	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c2c:	2380      	movs	r3, #128	; 0x80
 8005c2e:	019b      	lsls	r3, r3, #6
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d110      	bne.n	8005c56 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	491a      	ldr	r1, [pc, #104]	; (8005ca8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005c40:	400a      	ands	r2, r1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2180      	movs	r1, #128	; 0x80
 8005c50:	0189      	lsls	r1, r1, #6
 8005c52:	430a      	orrs	r2, r1
 8005c54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2251      	movs	r2, #81	; 0x51
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2250      	movs	r2, #80	; 0x50
 8005c62:	2100      	movs	r1, #0
 8005c64:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e017      	b.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	4013      	ands	r3, r2
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	425a      	negs	r2, r3
 8005c8a:	4153      	adcs	r3, r2
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	001a      	movs	r2, r3
 8005c90:	1dfb      	adds	r3, r7, #7
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d197      	bne.n	8005bc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	b008      	add	sp, #32
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	20000004 	.word	0x20000004
 8005ca8:	ffffdfff 	.word	0xffffdfff

08005cac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cb8:	4b1d      	ldr	r3, [pc, #116]	; (8005d30 <SPI_EndRxTxTransaction+0x84>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	491d      	ldr	r1, [pc, #116]	; (8005d34 <SPI_EndRxTxTransaction+0x88>)
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f7fa fa3e 	bl	8000140 <__udivsi3>
 8005cc4:	0003      	movs	r3, r0
 8005cc6:	001a      	movs	r2, r3
 8005cc8:	0013      	movs	r3, r2
 8005cca:	015b      	lsls	r3, r3, #5
 8005ccc:	1a9b      	subs	r3, r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	189b      	adds	r3, r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	2382      	movs	r3, #130	; 0x82
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d112      	bne.n	8005d08 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	0013      	movs	r3, r2
 8005cec:	2200      	movs	r2, #0
 8005cee:	2180      	movs	r1, #128	; 0x80
 8005cf0:	f7ff ff4e 	bl	8005b90 <SPI_WaitFlagStateUntilTimeout>
 8005cf4:	1e03      	subs	r3, r0, #0
 8005cf6:	d016      	beq.n	8005d26 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e00f      	b.n	8005d28 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2280      	movs	r2, #128	; 0x80
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b80      	cmp	r3, #128	; 0x80
 8005d20:	d0f2      	beq.n	8005d08 <SPI_EndRxTxTransaction+0x5c>
 8005d22:	e000      	b.n	8005d26 <SPI_EndRxTxTransaction+0x7a>
        break;
 8005d24:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	0018      	movs	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b006      	add	sp, #24
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20000004 	.word	0x20000004
 8005d34:	016e3600 	.word	0x016e3600

08005d38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005d3c:	4a06      	ldr	r2, [pc, #24]	; (8005d58 <MX_FATFS_Init+0x20>)
 8005d3e:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <MX_FATFS_Init+0x24>)
 8005d40:	0011      	movs	r1, r2
 8005d42:	0018      	movs	r0, r3
 8005d44:	f003 fb2a 	bl	800939c <FATFS_LinkDriver>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	001a      	movs	r2, r3
 8005d4c:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <MX_FATFS_Init+0x28>)
 8005d4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d50:	46c0      	nop			; (mov r8, r8)
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	200002f0 	.word	0x200002f0
 8005d5c:	20000010 	.word	0x20000010
 8005d60:	200002ec 	.word	0x200002ec

08005d64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005d68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	0002      	movs	r2, r0
 8005d78:	1dfb      	adds	r3, r7, #7
 8005d7a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005d7c:	1dfb      	adds	r3, r7, #7
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	0018      	movs	r0, r3
 8005d82:	f7fc ffa9 	bl	8002cd8 <SD_disk_initialize>
 8005d86:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8005d88:	0018      	movs	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b002      	add	sp, #8
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	0002      	movs	r2, r0
 8005d98:	1dfb      	adds	r3, r7, #7
 8005d9a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8005d9c:	1dfb      	adds	r3, r7, #7
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	0018      	movs	r0, r3
 8005da2:	f7fd f8a3 	bl	8002eec <SD_disk_status>
 8005da6:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8005da8:	0018      	movs	r0, r3
 8005daa:	46bd      	mov	sp, r7
 8005dac:	b002      	add	sp, #8
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005db0:	b5b0      	push	{r4, r5, r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	250f      	movs	r5, #15
 8005dbe:	197b      	adds	r3, r7, r5
 8005dc0:	1c02      	adds	r2, r0, #0
 8005dc2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8005dc4:	683c      	ldr	r4, [r7, #0]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	197b      	adds	r3, r7, r5
 8005dcc:	7818      	ldrb	r0, [r3, #0]
 8005dce:	0023      	movs	r3, r4
 8005dd0:	f7fd f8a2 	bl	8002f18 <SD_disk_read>
 8005dd4:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	b004      	add	sp, #16
 8005ddc:	bdb0      	pop	{r4, r5, r7, pc}

08005dde <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005dde:	b5b0      	push	{r4, r5, r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
 8005dea:	250f      	movs	r5, #15
 8005dec:	197b      	adds	r3, r7, r5
 8005dee:	1c02      	adds	r2, r0, #0
 8005df0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8005df2:	683c      	ldr	r4, [r7, #0]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	197b      	adds	r3, r7, r5
 8005dfa:	7818      	ldrb	r0, [r3, #0]
 8005dfc:	0023      	movs	r3, r4
 8005dfe:	f7fd f8fb 	bl	8002ff8 <SD_disk_write>
 8005e02:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8005e04:	0018      	movs	r0, r3
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b004      	add	sp, #16
 8005e0a:	bdb0      	pop	{r4, r5, r7, pc}

08005e0c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	603a      	str	r2, [r7, #0]
 8005e14:	1dfb      	adds	r3, r7, #7
 8005e16:	1c02      	adds	r2, r0, #0
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	1dbb      	adds	r3, r7, #6
 8005e1c:	1c0a      	adds	r2, r1, #0
 8005e1e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	1dbb      	adds	r3, r7, #6
 8005e24:	7819      	ldrb	r1, [r3, #0]
 8005e26:	1dfb      	adds	r3, r7, #7
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f7fd f96c 	bl	8003108 <SD_disk_ioctl>
 8005e30:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8005e32:	0018      	movs	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b002      	add	sp, #8
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005e3c:	b5b0      	push	{r4, r5, r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	0002      	movs	r2, r0
 8005e44:	1dfb      	adds	r3, r7, #7
 8005e46:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005e48:	1dfb      	adds	r3, r7, #7
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	4a0b      	ldr	r2, [pc, #44]	; (8005e7c <disk_status+0x40>)
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	18d3      	adds	r3, r2, r3
 8005e52:	3304      	adds	r3, #4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	1dfa      	adds	r2, r7, #7
 8005e5a:	7812      	ldrb	r2, [r2, #0]
 8005e5c:	4907      	ldr	r1, [pc, #28]	; (8005e7c <disk_status+0x40>)
 8005e5e:	188a      	adds	r2, r1, r2
 8005e60:	7a12      	ldrb	r2, [r2, #8]
 8005e62:	250f      	movs	r5, #15
 8005e64:	197c      	adds	r4, r7, r5
 8005e66:	0010      	movs	r0, r2
 8005e68:	4798      	blx	r3
 8005e6a:	0003      	movs	r3, r0
 8005e6c:	7023      	strb	r3, [r4, #0]
  return stat;
 8005e6e:	197b      	adds	r3, r7, r5
 8005e70:	781b      	ldrb	r3, [r3, #0]
}
 8005e72:	0018      	movs	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b004      	add	sp, #16
 8005e78:	bdb0      	pop	{r4, r5, r7, pc}
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	2000051c 	.word	0x2000051c

08005e80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	0002      	movs	r2, r0
 8005e88:	1dfb      	adds	r3, r7, #7
 8005e8a:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8005e8c:	200f      	movs	r0, #15
 8005e8e:	183b      	adds	r3, r7, r0
 8005e90:	2200      	movs	r2, #0
 8005e92:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 8005e94:	1dfb      	adds	r3, r7, #7
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	4a10      	ldr	r2, [pc, #64]	; (8005edc <disk_initialize+0x5c>)
 8005e9a:	5cd3      	ldrb	r3, [r2, r3]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d116      	bne.n	8005ece <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 8005ea0:	1dfb      	adds	r3, r7, #7
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	4a0d      	ldr	r2, [pc, #52]	; (8005edc <disk_initialize+0x5c>)
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005eaa:	1dfb      	adds	r3, r7, #7
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	4a0b      	ldr	r2, [pc, #44]	; (8005edc <disk_initialize+0x5c>)
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	18d3      	adds	r3, r2, r3
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	1dfa      	adds	r2, r7, #7
 8005ebc:	7812      	ldrb	r2, [r2, #0]
 8005ebe:	4907      	ldr	r1, [pc, #28]	; (8005edc <disk_initialize+0x5c>)
 8005ec0:	188a      	adds	r2, r1, r2
 8005ec2:	7a12      	ldrb	r2, [r2, #8]
 8005ec4:	183c      	adds	r4, r7, r0
 8005ec6:	0010      	movs	r0, r2
 8005ec8:	4798      	blx	r3
 8005eca:	0003      	movs	r3, r0
 8005ecc:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8005ece:	230f      	movs	r3, #15
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	781b      	ldrb	r3, [r3, #0]
}
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b005      	add	sp, #20
 8005eda:	bd90      	pop	{r4, r7, pc}
 8005edc:	2000051c 	.word	0x2000051c

08005ee0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	210f      	movs	r1, #15
 8005eee:	187b      	adds	r3, r7, r1
 8005ef0:	1c02      	adds	r2, r0, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005ef4:	187b      	adds	r3, r7, r1
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	4a0c      	ldr	r2, [pc, #48]	; (8005f2c <disk_read+0x4c>)
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	18d3      	adds	r3, r2, r3
 8005efe:	3304      	adds	r3, #4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689d      	ldr	r5, [r3, #8]
 8005f04:	187b      	adds	r3, r7, r1
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	4a08      	ldr	r2, [pc, #32]	; (8005f2c <disk_read+0x4c>)
 8005f0a:	18d3      	adds	r3, r2, r3
 8005f0c:	7a18      	ldrb	r0, [r3, #8]
 8005f0e:	2617      	movs	r6, #23
 8005f10:	19bc      	adds	r4, r7, r6
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	47a8      	blx	r5
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	7023      	strb	r3, [r4, #0]
  return res;
 8005f1e:	19bb      	adds	r3, r7, r6
 8005f20:	781b      	ldrb	r3, [r3, #0]
}
 8005f22:	0018      	movs	r0, r3
 8005f24:	46bd      	mov	sp, r7
 8005f26:	b007      	add	sp, #28
 8005f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	2000051c 	.word	0x2000051c

08005f30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	210f      	movs	r1, #15
 8005f3e:	187b      	adds	r3, r7, r1
 8005f40:	1c02      	adds	r2, r0, #0
 8005f42:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005f44:	187b      	adds	r3, r7, r1
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	4a0c      	ldr	r2, [pc, #48]	; (8005f7c <disk_write+0x4c>)
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	18d3      	adds	r3, r2, r3
 8005f4e:	3304      	adds	r3, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68dd      	ldr	r5, [r3, #12]
 8005f54:	187b      	adds	r3, r7, r1
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	4a08      	ldr	r2, [pc, #32]	; (8005f7c <disk_write+0x4c>)
 8005f5a:	18d3      	adds	r3, r2, r3
 8005f5c:	7a18      	ldrb	r0, [r3, #8]
 8005f5e:	2617      	movs	r6, #23
 8005f60:	19bc      	adds	r4, r7, r6
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	47a8      	blx	r5
 8005f6a:	0003      	movs	r3, r0
 8005f6c:	7023      	strb	r3, [r4, #0]
  return res;
 8005f6e:	19bb      	adds	r3, r7, r6
 8005f70:	781b      	ldrb	r3, [r3, #0]
}
 8005f72:	0018      	movs	r0, r3
 8005f74:	46bd      	mov	sp, r7
 8005f76:	b007      	add	sp, #28
 8005f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	2000051c 	.word	0x2000051c

08005f80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	603a      	str	r2, [r7, #0]
 8005f88:	1dfb      	adds	r3, r7, #7
 8005f8a:	1c02      	adds	r2, r0, #0
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	1dbb      	adds	r3, r7, #6
 8005f90:	1c0a      	adds	r2, r1, #0
 8005f92:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005f94:	1dfb      	adds	r3, r7, #7
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	4a0c      	ldr	r2, [pc, #48]	; (8005fcc <disk_ioctl+0x4c>)
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	18d3      	adds	r3, r2, r3
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	1dfa      	adds	r2, r7, #7
 8005fa6:	7812      	ldrb	r2, [r2, #0]
 8005fa8:	4908      	ldr	r1, [pc, #32]	; (8005fcc <disk_ioctl+0x4c>)
 8005faa:	188a      	adds	r2, r1, r2
 8005fac:	7a10      	ldrb	r0, [r2, #8]
 8005fae:	260f      	movs	r6, #15
 8005fb0:	19bc      	adds	r4, r7, r6
 8005fb2:	683d      	ldr	r5, [r7, #0]
 8005fb4:	1dba      	adds	r2, r7, #6
 8005fb6:	7811      	ldrb	r1, [r2, #0]
 8005fb8:	002a      	movs	r2, r5
 8005fba:	4798      	blx	r3
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	7023      	strb	r3, [r4, #0]
  return res;
 8005fc0:	19bb      	adds	r3, r7, r6
 8005fc2:	781b      	ldrb	r3, [r3, #0]
}
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b005      	add	sp, #20
 8005fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fcc:	2000051c 	.word	0x2000051c

08005fd0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	781a      	ldrb	r2, [r3, #0]
 8005fde:	210e      	movs	r1, #14
 8005fe0:	187b      	adds	r3, r7, r1
 8005fe2:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8005fe4:	187b      	adds	r3, r7, r1
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	b21a      	sxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	b21b      	sxth	r3, r3
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	b21a      	sxth	r2, r3
 8005ff6:	187b      	adds	r3, r7, r1
 8005ff8:	801a      	strh	r2, [r3, #0]
	return rv;
 8005ffa:	187b      	adds	r3, r7, r1
 8005ffc:	881b      	ldrh	r3, [r3, #0]
}
 8005ffe:	0018      	movs	r0, r3
 8006000:	46bd      	mov	sp, r7
 8006002:	b004      	add	sp, #16
 8006004:	bd80      	pop	{r7, pc}

08006006 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3303      	adds	r3, #3
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	3202      	adds	r2, #2
 800601e:	7812      	ldrb	r2, [r2, #0]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	3201      	adds	r2, #1
 800602c:	7812      	ldrb	r2, [r2, #0]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	7812      	ldrb	r2, [r2, #0]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
	return rv;
 800603e:	68fb      	ldr	r3, [r7, #12]
}
 8006040:	0018      	movs	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	b004      	add	sp, #16
 8006046:	bd80      	pop	{r7, pc}

08006048 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	000a      	movs	r2, r1
 8006052:	1cbb      	adds	r3, r7, #2
 8006054:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	1cba      	adds	r2, r7, #2
 800605e:	8812      	ldrh	r2, [r2, #0]
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	1cbb      	adds	r3, r7, #2
 8006066:	1cba      	adds	r2, r7, #2
 8006068:	8812      	ldrh	r2, [r2, #0]
 800606a:	0a12      	lsrs	r2, r2, #8
 800606c:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	1cba      	adds	r2, r7, #2
 8006076:	8812      	ldrh	r2, [r2, #0]
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]
}
 800607c:	46c0      	nop			; (mov r8, r8)
 800607e:	46bd      	mov	sp, r7
 8006080:	b002      	add	sp, #8
 8006082:	bd80      	pop	{r7, pc}

08006084 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	0a1b      	lsrs	r3, r3, #8
 800609e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	607a      	str	r2, [r7, #4]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	0a1b      	lsrs	r3, r3, #8
 80060b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	0a1b      	lsrs	r3, r3, #8
 80060c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	607a      	str	r2, [r7, #4]
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]
}
 80060d0:	46c0      	nop			; (mov r8, r8)
 80060d2:	46bd      	mov	sp, r7
 80060d4:	b002      	add	sp, #8
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00d      	beq.n	800610e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	1c53      	adds	r3, r2, #1
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	6179      	str	r1, [r7, #20]
 80060fe:	7812      	ldrb	r2, [r2, #0]
 8006100:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3b01      	subs	r3, #1
 8006106:	607b      	str	r3, [r7, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f1      	bne.n	80060f2 <mem_cpy+0x1a>
	}
}
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	46bd      	mov	sp, r7
 8006112:	b006      	add	sp, #24
 8006114:	bd80      	pop	{r7, pc}

08006116 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006116:	b580      	push	{r7, lr}
 8006118:	b086      	sub	sp, #24
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	617a      	str	r2, [r7, #20]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3b01      	subs	r3, #1
 8006136:	607b      	str	r3, [r7, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f3      	bne.n	8006126 <mem_set+0x10>
}
 800613e:	46c0      	nop			; (mov r8, r8)
 8006140:	46c0      	nop			; (mov r8, r8)
 8006142:	46bd      	mov	sp, r7
 8006144:	b006      	add	sp, #24
 8006146:	bd80      	pop	{r7, pc}

08006148 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	61fb      	str	r3, [r7, #28]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	61fa      	str	r2, [r7, #28]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	0019      	movs	r1, r3
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	61ba      	str	r2, [r7, #24]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	1acb      	subs	r3, r1, r3
 8006174:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3b01      	subs	r3, #1
 800617a:	607b      	str	r3, [r7, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <mem_cmp+0x40>
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0eb      	beq.n	8006160 <mem_cmp+0x18>

	return r;
 8006188:	697b      	ldr	r3, [r7, #20]
}
 800618a:	0018      	movs	r0, r3
 800618c:	46bd      	mov	sp, r7
 800618e:	b008      	add	sp, #32
 8006190:	bd80      	pop	{r7, pc}

08006192 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800619c:	e002      	b.n	80061a4 <chk_chr+0x12>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3301      	adds	r3, #1
 80061a2:	607b      	str	r3, [r7, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <chk_chr+0x26>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	001a      	movs	r2, r3
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d1f2      	bne.n	800619e <chk_chr+0xc>
	return *str;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	781b      	ldrb	r3, [r3, #0]
}
 80061bc:	0018      	movs	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	b002      	add	sp, #8
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80061ce:	2300      	movs	r3, #0
 80061d0:	60bb      	str	r3, [r7, #8]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	e027      	b.n	8006228 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 80061d8:	4b25      	ldr	r3, [pc, #148]	; (8006270 <chk_lock+0xac>)
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	0112      	lsls	r2, r2, #4
 80061de:	58d3      	ldr	r3, [r2, r3]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01c      	beq.n	800621e <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80061e4:	4b22      	ldr	r3, [pc, #136]	; (8006270 <chk_lock+0xac>)
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	0112      	lsls	r2, r2, #4
 80061ea:	58d2      	ldr	r2, [r2, r3]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d116      	bne.n	8006222 <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 80061f4:	4a1e      	ldr	r2, [pc, #120]	; (8006270 <chk_lock+0xac>)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	18d3      	adds	r3, r2, r3
 80061fc:	3304      	adds	r3, #4
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006204:	429a      	cmp	r2, r3
 8006206:	d10c      	bne.n	8006222 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006208:	4a19      	ldr	r2, [pc, #100]	; (8006270 <chk_lock+0xac>)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	18d3      	adds	r3, r2, r3
 8006210:	3308      	adds	r3, #8
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006218:	429a      	cmp	r2, r3
 800621a:	d102      	bne.n	8006222 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 800621c:	e007      	b.n	800622e <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 800621e:	2301      	movs	r3, #1
 8006220:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d9d4      	bls.n	80061d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d109      	bne.n	8006248 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d102      	bne.n	8006240 <chk_lock+0x7c>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d101      	bne.n	8006244 <chk_lock+0x80>
 8006240:	2300      	movs	r3, #0
 8006242:	e011      	b.n	8006268 <chk_lock+0xa4>
 8006244:	2312      	movs	r3, #18
 8006246:	e00f      	b.n	8006268 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <chk_lock+0x9e>
 800624e:	4a08      	ldr	r2, [pc, #32]	; (8006270 <chk_lock+0xac>)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	18d3      	adds	r3, r2, r3
 8006256:	330c      	adds	r3, #12
 8006258:	881a      	ldrh	r2, [r3, #0]
 800625a:	2380      	movs	r3, #128	; 0x80
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	429a      	cmp	r2, r3
 8006260:	d101      	bne.n	8006266 <chk_lock+0xa2>
 8006262:	2310      	movs	r3, #16
 8006264:	e000      	b.n	8006268 <chk_lock+0xa4>
 8006266:	2300      	movs	r3, #0
}
 8006268:	0018      	movs	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	b004      	add	sp, #16
 800626e:	bd80      	pop	{r7, pc}
 8006270:	200002fc 	.word	0x200002fc

08006274 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800627a:	2300      	movs	r3, #0
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	e002      	b.n	8006286 <enq_lock+0x12>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3301      	adds	r3, #1
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d805      	bhi.n	8006298 <enq_lock+0x24>
 800628c:	4b07      	ldr	r3, [pc, #28]	; (80062ac <enq_lock+0x38>)
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	0112      	lsls	r2, r2, #4
 8006292:	58d3      	ldr	r3, [r2, r3]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f3      	bne.n	8006280 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3b02      	subs	r3, #2
 800629c:	1e5a      	subs	r2, r3, #1
 800629e:	4193      	sbcs	r3, r2
 80062a0:	b2db      	uxtb	r3, r3
}
 80062a2:	0018      	movs	r0, r3
 80062a4:	46bd      	mov	sp, r7
 80062a6:	b002      	add	sp, #8
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	46c0      	nop			; (mov r8, r8)
 80062ac:	200002fc 	.word	0x200002fc

080062b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	e01e      	b.n	80062fe <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 80062c0:	4b3f      	ldr	r3, [pc, #252]	; (80063c0 <inc_lock+0x110>)
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	0112      	lsls	r2, r2, #4
 80062c6:	58d2      	ldr	r2, [r2, r3]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d113      	bne.n	80062f8 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 80062d0:	4a3b      	ldr	r2, [pc, #236]	; (80063c0 <inc_lock+0x110>)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	18d3      	adds	r3, r2, r3
 80062d8:	3304      	adds	r3, #4
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d109      	bne.n	80062f8 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 80062e4:	4a36      	ldr	r2, [pc, #216]	; (80063c0 <inc_lock+0x110>)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	18d3      	adds	r3, r2, r3
 80062ec:	3308      	adds	r3, #8
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d006      	beq.n	8006306 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3301      	adds	r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d9dd      	bls.n	80062c0 <inc_lock+0x10>
 8006304:	e000      	b.n	8006308 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8006306:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d130      	bne.n	8006370 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	e002      	b.n	800631a <inc_lock+0x6a>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3301      	adds	r3, #1
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d805      	bhi.n	800632c <inc_lock+0x7c>
 8006320:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <inc_lock+0x110>)
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	0112      	lsls	r2, r2, #4
 8006326:	58d3      	ldr	r3, [r2, r3]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1f3      	bne.n	8006314 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b02      	cmp	r3, #2
 8006330:	d101      	bne.n	8006336 <inc_lock+0x86>
 8006332:	2300      	movs	r3, #0
 8006334:	e03f      	b.n	80063b6 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6819      	ldr	r1, [r3, #0]
 800633a:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <inc_lock+0x110>)
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	0112      	lsls	r2, r2, #4
 8006340:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	491e      	ldr	r1, [pc, #120]	; (80063c0 <inc_lock+0x110>)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	18cb      	adds	r3, r1, r3
 800634e:	3304      	adds	r3, #4
 8006350:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	491a      	ldr	r1, [pc, #104]	; (80063c0 <inc_lock+0x110>)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	18cb      	adds	r3, r1, r3
 800635e:	3308      	adds	r3, #8
 8006360:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006362:	4a17      	ldr	r2, [pc, #92]	; (80063c0 <inc_lock+0x110>)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	18d3      	adds	r3, r2, r3
 800636a:	330c      	adds	r3, #12
 800636c:	2200      	movs	r2, #0
 800636e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d009      	beq.n	800638a <inc_lock+0xda>
 8006376:	4a12      	ldr	r2, [pc, #72]	; (80063c0 <inc_lock+0x110>)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	18d3      	adds	r3, r2, r3
 800637e:	330c      	adds	r3, #12
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <inc_lock+0xda>
 8006386:	2300      	movs	r3, #0
 8006388:	e015      	b.n	80063b6 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d108      	bne.n	80063a2 <inc_lock+0xf2>
 8006390:	4a0b      	ldr	r2, [pc, #44]	; (80063c0 <inc_lock+0x110>)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	18d3      	adds	r3, r2, r3
 8006398:	330c      	adds	r3, #12
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	b29b      	uxth	r3, r3
 80063a0:	e001      	b.n	80063a6 <inc_lock+0xf6>
 80063a2:	2380      	movs	r3, #128	; 0x80
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	4906      	ldr	r1, [pc, #24]	; (80063c0 <inc_lock+0x110>)
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	0112      	lsls	r2, r2, #4
 80063ac:	188a      	adds	r2, r1, r2
 80063ae:	320c      	adds	r2, #12
 80063b0:	8013      	strh	r3, [r2, #0]

	return i + 1;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
}
 80063b6:	0018      	movs	r0, r3
 80063b8:	46bd      	mov	sp, r7
 80063ba:	b004      	add	sp, #16
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	200002fc 	.word	0x200002fc

080063c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	607b      	str	r3, [r7, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d832      	bhi.n	800643e <dec_lock+0x7a>
		n = Files[i].ctr;
 80063d8:	200e      	movs	r0, #14
 80063da:	183b      	adds	r3, r7, r0
 80063dc:	491d      	ldr	r1, [pc, #116]	; (8006454 <dec_lock+0x90>)
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	0112      	lsls	r2, r2, #4
 80063e2:	188a      	adds	r2, r1, r2
 80063e4:	320c      	adds	r2, #12
 80063e6:	8812      	ldrh	r2, [r2, #0]
 80063e8:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80063ea:	183b      	adds	r3, r7, r0
 80063ec:	881a      	ldrh	r2, [r3, #0]
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d102      	bne.n	80063fc <dec_lock+0x38>
 80063f6:	183b      	adds	r3, r7, r0
 80063f8:	2200      	movs	r2, #0
 80063fa:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 80063fc:	210e      	movs	r1, #14
 80063fe:	187b      	adds	r3, r7, r1
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d004      	beq.n	8006410 <dec_lock+0x4c>
 8006406:	187b      	adds	r3, r7, r1
 8006408:	881a      	ldrh	r2, [r3, #0]
 800640a:	187b      	adds	r3, r7, r1
 800640c:	3a01      	subs	r2, #1
 800640e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8006410:	4a10      	ldr	r2, [pc, #64]	; (8006454 <dec_lock+0x90>)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	18d3      	adds	r3, r2, r3
 8006418:	330c      	adds	r3, #12
 800641a:	210e      	movs	r1, #14
 800641c:	187a      	adds	r2, r7, r1
 800641e:	8812      	ldrh	r2, [r2, #0]
 8006420:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006422:	187b      	adds	r3, r7, r1
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d104      	bne.n	8006434 <dec_lock+0x70>
 800642a:	4b0a      	ldr	r3, [pc, #40]	; (8006454 <dec_lock+0x90>)
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	0112      	lsls	r2, r2, #4
 8006430:	2100      	movs	r1, #0
 8006432:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8006434:	230d      	movs	r3, #13
 8006436:	18fb      	adds	r3, r7, r3
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	e003      	b.n	8006446 <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800643e:	230d      	movs	r3, #13
 8006440:	18fb      	adds	r3, r7, r3
 8006442:	2202      	movs	r2, #2
 8006444:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8006446:	230d      	movs	r3, #13
 8006448:	18fb      	adds	r3, r7, r3
 800644a:	781b      	ldrb	r3, [r3, #0]
}
 800644c:	0018      	movs	r0, r3
 800644e:	46bd      	mov	sp, r7
 8006450:	b004      	add	sp, #16
 8006452:	bd80      	pop	{r7, pc}
 8006454:	200002fc 	.word	0x200002fc

08006458 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	e00e      	b.n	8006484 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006466:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <clear_lock+0x3c>)
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	0112      	lsls	r2, r2, #4
 800646c:	58d3      	ldr	r3, [r2, r3]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	429a      	cmp	r2, r3
 8006472:	d104      	bne.n	800647e <clear_lock+0x26>
 8006474:	4b07      	ldr	r3, [pc, #28]	; (8006494 <clear_lock+0x3c>)
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	0112      	lsls	r2, r2, #4
 800647a:	2100      	movs	r1, #0
 800647c:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d9ed      	bls.n	8006466 <clear_lock+0xe>
	}
}
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	46c0      	nop			; (mov r8, r8)
 800648e:	46bd      	mov	sp, r7
 8006490:	b004      	add	sp, #16
 8006492:	bd80      	pop	{r7, pc}
 8006494:	200002fc 	.word	0x200002fc

08006498 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006498:	b590      	push	{r4, r7, lr}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80064a0:	240f      	movs	r4, #15
 80064a2:	193b      	adds	r3, r7, r4
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	78db      	ldrb	r3, [r3, #3]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d034      	beq.n	800651a <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	7858      	ldrb	r0, [r3, #1]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3338      	adds	r3, #56	; 0x38
 80064be:	0019      	movs	r1, r3
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	2301      	movs	r3, #1
 80064c4:	f7ff fd34 	bl	8005f30 <disk_write>
 80064c8:	1e03      	subs	r3, r0, #0
 80064ca:	d003      	beq.n	80064d4 <sync_window+0x3c>
			res = FR_DISK_ERR;
 80064cc:	193b      	adds	r3, r7, r4
 80064ce:	2201      	movs	r2, #1
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	e022      	b.n	800651a <sync_window+0x82>
		} else {
			fs->wflag = 0;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	1ad2      	subs	r2, r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d217      	bcs.n	800651a <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	789b      	ldrb	r3, [r3, #2]
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	e010      	b.n	8006514 <sync_window+0x7c>
					wsect += fs->fsize;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	18d3      	adds	r3, r2, r3
 80064fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	7858      	ldrb	r0, [r3, #1]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3338      	adds	r3, #56	; 0x38
 8006504:	0019      	movs	r1, r3
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	2301      	movs	r3, #1
 800650a:	f7ff fd11 	bl	8005f30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	3b01      	subs	r3, #1
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d8eb      	bhi.n	80064f2 <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 800651a:	230f      	movs	r3, #15
 800651c:	18fb      	adds	r3, r7, r3
 800651e:	781b      	ldrb	r3, [r3, #0]
}
 8006520:	0018      	movs	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	b007      	add	sp, #28
 8006526:	bd90      	pop	{r4, r7, pc}

08006528 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006528:	b5b0      	push	{r4, r5, r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006532:	250f      	movs	r5, #15
 8006534:	197b      	adds	r3, r7, r5
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d01f      	beq.n	8006584 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006544:	197c      	adds	r4, r7, r5
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	0018      	movs	r0, r3
 800654a:	f7ff ffa5 	bl	8006498 <sync_window>
 800654e:	0003      	movs	r3, r0
 8006550:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006552:	002c      	movs	r4, r5
 8006554:	193b      	adds	r3, r7, r4
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d113      	bne.n	8006584 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	7858      	ldrb	r0, [r3, #1]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3338      	adds	r3, #56	; 0x38
 8006564:	0019      	movs	r1, r3
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	2301      	movs	r3, #1
 800656a:	f7ff fcb9 	bl	8005ee0 <disk_read>
 800656e:	1e03      	subs	r3, r0, #0
 8006570:	d005      	beq.n	800657e <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006572:	2301      	movs	r3, #1
 8006574:	425b      	negs	r3, r3
 8006576:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006578:	193b      	adds	r3, r7, r4
 800657a:	2201      	movs	r2, #1
 800657c:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006584:	230f      	movs	r3, #15
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	781b      	ldrb	r3, [r3, #0]
}
 800658a:	0018      	movs	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	b004      	add	sp, #16
 8006590:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006594 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006594:	b5b0      	push	{r4, r5, r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800659c:	250f      	movs	r5, #15
 800659e:	197c      	adds	r4, r7, r5
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	0018      	movs	r0, r3
 80065a4:	f7ff ff78 	bl	8006498 <sync_window>
 80065a8:	0003      	movs	r3, r0
 80065aa:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80065ac:	197b      	adds	r3, r7, r5
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d15e      	bne.n	8006672 <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d14d      	bne.n	8006658 <sync_fs+0xc4>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	791b      	ldrb	r3, [r3, #4]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d149      	bne.n	8006658 <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3338      	adds	r3, #56	; 0x38
 80065c8:	0018      	movs	r0, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	899b      	ldrh	r3, [r3, #12]
 80065ce:	001a      	movs	r2, r3
 80065d0:	2100      	movs	r1, #0
 80065d2:	f7ff fda0 	bl	8006116 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3338      	adds	r3, #56	; 0x38
 80065da:	33ff      	adds	r3, #255	; 0xff
 80065dc:	33ff      	adds	r3, #255	; 0xff
 80065de:	4a28      	ldr	r2, [pc, #160]	; (8006680 <sync_fs+0xec>)
 80065e0:	0011      	movs	r1, r2
 80065e2:	0018      	movs	r0, r3
 80065e4:	f7ff fd30 	bl	8006048 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3338      	adds	r3, #56	; 0x38
 80065ec:	4a25      	ldr	r2, [pc, #148]	; (8006684 <sync_fs+0xf0>)
 80065ee:	0011      	movs	r1, r2
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7ff fd47 	bl	8006084 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3338      	adds	r3, #56	; 0x38
 80065fa:	33e5      	adds	r3, #229	; 0xe5
 80065fc:	33ff      	adds	r3, #255	; 0xff
 80065fe:	4a22      	ldr	r2, [pc, #136]	; (8006688 <sync_fs+0xf4>)
 8006600:	0011      	movs	r1, r2
 8006602:	0018      	movs	r0, r3
 8006604:	f7ff fd3e 	bl	8006084 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3338      	adds	r3, #56	; 0x38
 800660c:	33e9      	adds	r3, #233	; 0xe9
 800660e:	33ff      	adds	r3, #255	; 0xff
 8006610:	001a      	movs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	0019      	movs	r1, r3
 8006618:	0010      	movs	r0, r2
 800661a:	f7ff fd33 	bl	8006084 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3338      	adds	r3, #56	; 0x38
 8006622:	33ed      	adds	r3, #237	; 0xed
 8006624:	33ff      	adds	r3, #255	; 0xff
 8006626:	001a      	movs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	0019      	movs	r1, r3
 800662e:	0010      	movs	r0, r2
 8006630:	f7ff fd28 	bl	8006084 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	7858      	ldrb	r0, [r3, #1]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3338      	adds	r3, #56	; 0x38
 8006646:	0019      	movs	r1, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800664c:	2301      	movs	r3, #1
 800664e:	f7ff fc6f 	bl	8005f30 <disk_write>
			fs->fsi_flag = 0;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2200      	movs	r2, #0
 800665e:	2100      	movs	r1, #0
 8006660:	0018      	movs	r0, r3
 8006662:	f7ff fc8d 	bl	8005f80 <disk_ioctl>
 8006666:	1e03      	subs	r3, r0, #0
 8006668:	d003      	beq.n	8006672 <sync_fs+0xde>
 800666a:	230f      	movs	r3, #15
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	2201      	movs	r2, #1
 8006670:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8006672:	230f      	movs	r3, #15
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	781b      	ldrb	r3, [r3, #0]
}
 8006678:	0018      	movs	r0, r3
 800667a:	46bd      	mov	sp, r7
 800667c:	b004      	add	sp, #16
 800667e:	bdb0      	pop	{r4, r5, r7, pc}
 8006680:	0000aa55 	.word	0x0000aa55
 8006684:	41615252 	.word	0x41615252
 8006688:	61417272 	.word	0x61417272

0800668c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	3b02      	subs	r3, #2
 800669a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	3b02      	subs	r3, #2
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d301      	bcc.n	80066ac <clust2sect+0x20>
 80066a8:	2300      	movs	r3, #0
 80066aa:	e007      	b.n	80066bc <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	895b      	ldrh	r3, [r3, #10]
 80066b0:	001a      	movs	r2, r3
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	435a      	muls	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	18d3      	adds	r3, r2, r3
}
 80066bc:	0018      	movs	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	b002      	add	sp, #8
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80066c4:	b590      	push	{r4, r7, lr}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d904      	bls.n	80066e4 <get_fat+0x20>
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d302      	bcc.n	80066ea <get_fat+0x26>
		val = 1;	/* Internal error */
 80066e4:	2301      	movs	r3, #1
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	e0c2      	b.n	8006870 <get_fat+0x1ac>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80066ea:	2301      	movs	r3, #1
 80066ec:	425b      	negs	r3, r3
 80066ee:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d100      	bne.n	80066fa <get_fat+0x36>
 80066f8:	e088      	b.n	800680c <get_fat+0x148>
 80066fa:	dd00      	ble.n	80066fe <get_fat+0x3a>
 80066fc:	e0ae      	b.n	800685c <get_fat+0x198>
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d002      	beq.n	8006708 <get_fat+0x44>
 8006702:	2b02      	cmp	r3, #2
 8006704:	d05c      	beq.n	80067c0 <get_fat+0xfc>
 8006706:	e0a9      	b.n	800685c <get_fat+0x198>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	18d3      	adds	r3, r2, r3
 8006714:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	899b      	ldrh	r3, [r3, #12]
 800671e:	0019      	movs	r1, r3
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7f9 fd0d 	bl	8000140 <__udivsi3>
 8006726:	0003      	movs	r3, r0
 8006728:	18e2      	adds	r2, r4, r3
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	0011      	movs	r1, r2
 800672e:	0018      	movs	r0, r3
 8006730:	f7ff fefa 	bl	8006528 <move_window>
 8006734:	1e03      	subs	r3, r0, #0
 8006736:	d000      	beq.n	800673a <get_fat+0x76>
 8006738:	e093      	b.n	8006862 <get_fat+0x19e>
			wc = fs->win[bc++ % SS(fs)];
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	60fa      	str	r2, [r7, #12]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	8992      	ldrh	r2, [r2, #12]
 8006744:	0011      	movs	r1, r2
 8006746:	0018      	movs	r0, r3
 8006748:	f7f9 fd80 	bl	800024c <__aeabi_uidivmod>
 800674c:	000b      	movs	r3, r1
 800674e:	0019      	movs	r1, r3
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	2238      	movs	r2, #56	; 0x38
 8006754:	185b      	adds	r3, r3, r1
 8006756:	189b      	adds	r3, r3, r2
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	899b      	ldrh	r3, [r3, #12]
 8006764:	0019      	movs	r1, r3
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7f9 fcea 	bl	8000140 <__udivsi3>
 800676c:	0003      	movs	r3, r0
 800676e:	18e2      	adds	r2, r4, r3
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	0011      	movs	r1, r2
 8006774:	0018      	movs	r0, r3
 8006776:	f7ff fed7 	bl	8006528 <move_window>
 800677a:	1e03      	subs	r3, r0, #0
 800677c:	d000      	beq.n	8006780 <get_fat+0xbc>
 800677e:	e072      	b.n	8006866 <get_fat+0x1a2>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	899b      	ldrh	r3, [r3, #12]
 8006784:	001a      	movs	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	0011      	movs	r1, r2
 800678a:	0018      	movs	r0, r3
 800678c:	f7f9 fd5e 	bl	800024c <__aeabi_uidivmod>
 8006790:	000b      	movs	r3, r1
 8006792:	0019      	movs	r1, r3
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	2238      	movs	r2, #56	; 0x38
 8006798:	185b      	adds	r3, r3, r1
 800679a:	189b      	adds	r3, r3, r2
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	001a      	movs	r2, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2201      	movs	r2, #1
 80067ac:	4013      	ands	r3, r2
 80067ae:	d002      	beq.n	80067b6 <get_fat+0xf2>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	091b      	lsrs	r3, r3, #4
 80067b4:	e002      	b.n	80067bc <get_fat+0xf8>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	051b      	lsls	r3, r3, #20
 80067ba:	0d1b      	lsrs	r3, r3, #20
 80067bc:	617b      	str	r3, [r7, #20]
			break;
 80067be:	e057      	b.n	8006870 <get_fat+0x1ac>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	899b      	ldrh	r3, [r3, #12]
 80067c8:	085b      	lsrs	r3, r3, #1
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	0019      	movs	r1, r3
 80067ce:	6838      	ldr	r0, [r7, #0]
 80067d0:	f7f9 fcb6 	bl	8000140 <__udivsi3>
 80067d4:	0003      	movs	r3, r0
 80067d6:	18e2      	adds	r2, r4, r3
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	0011      	movs	r1, r2
 80067dc:	0018      	movs	r0, r3
 80067de:	f7ff fea3 	bl	8006528 <move_window>
 80067e2:	1e03      	subs	r3, r0, #0
 80067e4:	d141      	bne.n	800686a <get_fat+0x1a6>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	3338      	adds	r3, #56	; 0x38
 80067ea:	001c      	movs	r4, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	005a      	lsls	r2, r3, #1
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	899b      	ldrh	r3, [r3, #12]
 80067f4:	0019      	movs	r1, r3
 80067f6:	0010      	movs	r0, r2
 80067f8:	f7f9 fd28 	bl	800024c <__aeabi_uidivmod>
 80067fc:	000b      	movs	r3, r1
 80067fe:	18e3      	adds	r3, r4, r3
 8006800:	0018      	movs	r0, r3
 8006802:	f7ff fbe5 	bl	8005fd0 <ld_word>
 8006806:	0003      	movs	r3, r0
 8006808:	617b      	str	r3, [r7, #20]
			break;
 800680a:	e031      	b.n	8006870 <get_fat+0x1ac>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	899b      	ldrh	r3, [r3, #12]
 8006814:	089b      	lsrs	r3, r3, #2
 8006816:	b29b      	uxth	r3, r3
 8006818:	0019      	movs	r1, r3
 800681a:	6838      	ldr	r0, [r7, #0]
 800681c:	f7f9 fc90 	bl	8000140 <__udivsi3>
 8006820:	0003      	movs	r3, r0
 8006822:	18e2      	adds	r2, r4, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	0011      	movs	r1, r2
 8006828:	0018      	movs	r0, r3
 800682a:	f7ff fe7d 	bl	8006528 <move_window>
 800682e:	1e03      	subs	r3, r0, #0
 8006830:	d11d      	bne.n	800686e <get_fat+0x1aa>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	3338      	adds	r3, #56	; 0x38
 8006836:	001c      	movs	r4, r3
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	009a      	lsls	r2, r3, #2
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	899b      	ldrh	r3, [r3, #12]
 8006840:	0019      	movs	r1, r3
 8006842:	0010      	movs	r0, r2
 8006844:	f7f9 fd02 	bl	800024c <__aeabi_uidivmod>
 8006848:	000b      	movs	r3, r1
 800684a:	18e3      	adds	r3, r4, r3
 800684c:	0018      	movs	r0, r3
 800684e:	f7ff fbda 	bl	8006006 <ld_dword>
 8006852:	0003      	movs	r3, r0
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	091b      	lsrs	r3, r3, #4
 8006858:	617b      	str	r3, [r7, #20]
			break;
 800685a:	e009      	b.n	8006870 <get_fat+0x1ac>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800685c:	2301      	movs	r3, #1
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e006      	b.n	8006870 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	e004      	b.n	8006870 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	e002      	b.n	8006870 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	e000      	b.n	8006870 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800686e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8006870:	697b      	ldr	r3, [r7, #20]
}
 8006872:	0018      	movs	r0, r3
 8006874:	46bd      	mov	sp, r7
 8006876:	b007      	add	sp, #28
 8006878:	bd90      	pop	{r4, r7, pc}

0800687a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800687a:	b5b0      	push	{r4, r5, r7, lr}
 800687c:	b088      	sub	sp, #32
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006886:	231f      	movs	r3, #31
 8006888:	18fb      	adds	r3, r7, r3
 800688a:	2202      	movs	r2, #2
 800688c:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d800      	bhi.n	8006896 <put_fat+0x1c>
 8006894:	e11a      	b.n	8006acc <put_fat+0x252>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	429a      	cmp	r2, r3
 800689e:	d300      	bcc.n	80068a2 <put_fat+0x28>
 80068a0:	e114      	b.n	8006acc <put_fat+0x252>
		switch (fs->fs_type) {
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d100      	bne.n	80068ac <put_fat+0x32>
 80068aa:	e0c1      	b.n	8006a30 <put_fat+0x1b6>
 80068ac:	dd00      	ble.n	80068b0 <put_fat+0x36>
 80068ae:	e10d      	b.n	8006acc <put_fat+0x252>
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d003      	beq.n	80068bc <put_fat+0x42>
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d100      	bne.n	80068ba <put_fat+0x40>
 80068b8:	e08a      	b.n	80069d0 <put_fat+0x156>
 80068ba:	e107      	b.n	8006acc <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	61bb      	str	r3, [r7, #24]
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	18d3      	adds	r3, r2, r3
 80068c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	899b      	ldrh	r3, [r3, #12]
 80068d2:	0019      	movs	r1, r3
 80068d4:	69b8      	ldr	r0, [r7, #24]
 80068d6:	f7f9 fc33 	bl	8000140 <__udivsi3>
 80068da:	0003      	movs	r3, r0
 80068dc:	18e2      	adds	r2, r4, r3
 80068de:	251f      	movs	r5, #31
 80068e0:	197c      	adds	r4, r7, r5
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	0011      	movs	r1, r2
 80068e6:	0018      	movs	r0, r3
 80068e8:	f7ff fe1e 	bl	8006528 <move_window>
 80068ec:	0003      	movs	r3, r0
 80068ee:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80068f0:	197b      	adds	r3, r7, r5
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d000      	beq.n	80068fa <put_fat+0x80>
 80068f8:	e0e1      	b.n	8006abe <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3338      	adds	r3, #56	; 0x38
 80068fe:	001c      	movs	r4, r3
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	61ba      	str	r2, [r7, #24]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	8992      	ldrh	r2, [r2, #12]
 800690a:	0011      	movs	r1, r2
 800690c:	0018      	movs	r0, r3
 800690e:	f7f9 fc9d 	bl	800024c <__aeabi_uidivmod>
 8006912:	000b      	movs	r3, r1
 8006914:	18e3      	adds	r3, r4, r3
 8006916:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2201      	movs	r2, #1
 800691c:	4013      	ands	r3, r2
 800691e:	d00d      	beq.n	800693c <put_fat+0xc2>
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	b25b      	sxtb	r3, r3
 8006926:	220f      	movs	r2, #15
 8006928:	4013      	ands	r3, r2
 800692a:	b25a      	sxtb	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	b25b      	sxtb	r3, r3
 8006934:	4313      	orrs	r3, r2
 8006936:	b25b      	sxtb	r3, r3
 8006938:	b2db      	uxtb	r3, r3
 800693a:	e001      	b.n	8006940 <put_fat+0xc6>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	899b      	ldrh	r3, [r3, #12]
 8006952:	0019      	movs	r1, r3
 8006954:	69b8      	ldr	r0, [r7, #24]
 8006956:	f7f9 fbf3 	bl	8000140 <__udivsi3>
 800695a:	0003      	movs	r3, r0
 800695c:	18e2      	adds	r2, r4, r3
 800695e:	251f      	movs	r5, #31
 8006960:	197c      	adds	r4, r7, r5
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	0011      	movs	r1, r2
 8006966:	0018      	movs	r0, r3
 8006968:	f7ff fdde 	bl	8006528 <move_window>
 800696c:	0003      	movs	r3, r0
 800696e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006970:	197b      	adds	r3, r7, r5
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d000      	beq.n	800697a <put_fat+0x100>
 8006978:	e0a3      	b.n	8006ac2 <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3338      	adds	r3, #56	; 0x38
 800697e:	001c      	movs	r4, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	899b      	ldrh	r3, [r3, #12]
 8006984:	001a      	movs	r2, r3
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	0011      	movs	r1, r2
 800698a:	0018      	movs	r0, r3
 800698c:	f7f9 fc5e 	bl	800024c <__aeabi_uidivmod>
 8006990:	000b      	movs	r3, r1
 8006992:	18e3      	adds	r3, r4, r3
 8006994:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2201      	movs	r2, #1
 800699a:	4013      	ands	r3, r2
 800699c:	d003      	beq.n	80069a6 <put_fat+0x12c>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	091b      	lsrs	r3, r3, #4
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	e00e      	b.n	80069c4 <put_fat+0x14a>
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	b25b      	sxtb	r3, r3
 80069ac:	220f      	movs	r2, #15
 80069ae:	4393      	bics	r3, r2
 80069b0:	b25a      	sxtb	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	0a1b      	lsrs	r3, r3, #8
 80069b6:	b25b      	sxtb	r3, r3
 80069b8:	210f      	movs	r1, #15
 80069ba:	400b      	ands	r3, r1
 80069bc:	b25b      	sxtb	r3, r3
 80069be:	4313      	orrs	r3, r2
 80069c0:	b25b      	sxtb	r3, r3
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	70da      	strb	r2, [r3, #3]
			break;
 80069ce:	e07d      	b.n	8006acc <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	899b      	ldrh	r3, [r3, #12]
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	b29b      	uxth	r3, r3
 80069dc:	0019      	movs	r1, r3
 80069de:	68b8      	ldr	r0, [r7, #8]
 80069e0:	f7f9 fbae 	bl	8000140 <__udivsi3>
 80069e4:	0003      	movs	r3, r0
 80069e6:	18e2      	adds	r2, r4, r3
 80069e8:	251f      	movs	r5, #31
 80069ea:	197c      	adds	r4, r7, r5
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	0011      	movs	r1, r2
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7ff fd99 	bl	8006528 <move_window>
 80069f6:	0003      	movs	r3, r0
 80069f8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80069fa:	197b      	adds	r3, r7, r5
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d161      	bne.n	8006ac6 <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3338      	adds	r3, #56	; 0x38
 8006a06:	001c      	movs	r4, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	005a      	lsls	r2, r3, #1
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	899b      	ldrh	r3, [r3, #12]
 8006a10:	0019      	movs	r1, r3
 8006a12:	0010      	movs	r0, r2
 8006a14:	f7f9 fc1a 	bl	800024c <__aeabi_uidivmod>
 8006a18:	000b      	movs	r3, r1
 8006a1a:	18e3      	adds	r3, r4, r3
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	b292      	uxth	r2, r2
 8006a20:	0011      	movs	r1, r2
 8006a22:	0018      	movs	r0, r3
 8006a24:	f7ff fb10 	bl	8006048 <st_word>
			fs->wflag = 1;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	70da      	strb	r2, [r3, #3]
			break;
 8006a2e:	e04d      	b.n	8006acc <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	899b      	ldrh	r3, [r3, #12]
 8006a38:	089b      	lsrs	r3, r3, #2
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	0019      	movs	r1, r3
 8006a3e:	68b8      	ldr	r0, [r7, #8]
 8006a40:	f7f9 fb7e 	bl	8000140 <__udivsi3>
 8006a44:	0003      	movs	r3, r0
 8006a46:	18e2      	adds	r2, r4, r3
 8006a48:	251f      	movs	r5, #31
 8006a4a:	197c      	adds	r4, r7, r5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	0011      	movs	r1, r2
 8006a50:	0018      	movs	r0, r3
 8006a52:	f7ff fd69 	bl	8006528 <move_window>
 8006a56:	0003      	movs	r3, r0
 8006a58:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006a5a:	197b      	adds	r3, r7, r5
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d133      	bne.n	8006aca <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	011b      	lsls	r3, r3, #4
 8006a66:	091c      	lsrs	r4, r3, #4
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3338      	adds	r3, #56	; 0x38
 8006a6c:	001d      	movs	r5, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	009a      	lsls	r2, r3, #2
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	899b      	ldrh	r3, [r3, #12]
 8006a76:	0019      	movs	r1, r3
 8006a78:	0010      	movs	r0, r2
 8006a7a:	f7f9 fbe7 	bl	800024c <__aeabi_uidivmod>
 8006a7e:	000b      	movs	r3, r1
 8006a80:	18eb      	adds	r3, r5, r3
 8006a82:	0018      	movs	r0, r3
 8006a84:	f7ff fabf 	bl	8006006 <ld_dword>
 8006a88:	0003      	movs	r3, r0
 8006a8a:	0f1b      	lsrs	r3, r3, #28
 8006a8c:	071b      	lsls	r3, r3, #28
 8006a8e:	4323      	orrs	r3, r4
 8006a90:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3338      	adds	r3, #56	; 0x38
 8006a96:	001c      	movs	r4, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	009a      	lsls	r2, r3, #2
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	899b      	ldrh	r3, [r3, #12]
 8006aa0:	0019      	movs	r1, r3
 8006aa2:	0010      	movs	r0, r2
 8006aa4:	f7f9 fbd2 	bl	800024c <__aeabi_uidivmod>
 8006aa8:	000b      	movs	r3, r1
 8006aaa:	18e3      	adds	r3, r4, r3
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	0011      	movs	r1, r2
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f7ff fae7 	bl	8006084 <st_dword>
			fs->wflag = 1;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	70da      	strb	r2, [r3, #3]
			break;
 8006abc:	e006      	b.n	8006acc <put_fat+0x252>
			if (res != FR_OK) break;
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	e004      	b.n	8006acc <put_fat+0x252>
			if (res != FR_OK) break;
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	e002      	b.n	8006acc <put_fat+0x252>
			if (res != FR_OK) break;
 8006ac6:	46c0      	nop			; (mov r8, r8)
 8006ac8:	e000      	b.n	8006acc <put_fat+0x252>
			if (res != FR_OK) break;
 8006aca:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 8006acc:	231f      	movs	r3, #31
 8006ace:	18fb      	adds	r3, r7, r3
 8006ad0:	781b      	ldrb	r3, [r3, #0]
}
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b008      	add	sp, #32
 8006ad8:	bdb0      	pop	{r4, r5, r7, pc}

08006ada <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006ada:	b5b0      	push	{r4, r5, r7, lr}
 8006adc:	b088      	sub	sp, #32
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006ae6:	231f      	movs	r3, #31
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	2200      	movs	r2, #0
 8006aec:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d904      	bls.n	8006b04 <remove_chain+0x2a>
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d301      	bcc.n	8006b08 <remove_chain+0x2e>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e057      	b.n	8006bb8 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d011      	beq.n	8006b32 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006b0e:	251f      	movs	r5, #31
 8006b10:	197c      	adds	r4, r7, r5
 8006b12:	2301      	movs	r3, #1
 8006b14:	425a      	negs	r2, r3
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f7ff fead 	bl	800687a <put_fat>
 8006b20:	0003      	movs	r3, r0
 8006b22:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8006b24:	197b      	adds	r3, r7, r5
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <remove_chain+0x58>
 8006b2c:	197b      	adds	r3, r7, r5
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	e042      	b.n	8006bb8 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	0011      	movs	r1, r2
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f7ff fdc3 	bl	80066c4 <get_fat>
 8006b3e:	0003      	movs	r3, r0
 8006b40:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d035      	beq.n	8006bb4 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <remove_chain+0x78>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e032      	b.n	8006bb8 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	3301      	adds	r3, #1
 8006b56:	d101      	bne.n	8006b5c <remove_chain+0x82>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e02d      	b.n	8006bb8 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006b5c:	251f      	movs	r5, #31
 8006b5e:	197c      	adds	r4, r7, r5
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	2200      	movs	r2, #0
 8006b66:	0018      	movs	r0, r3
 8006b68:	f7ff fe87 	bl	800687a <put_fat>
 8006b6c:	0003      	movs	r3, r0
 8006b6e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8006b70:	197b      	adds	r3, r7, r5
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <remove_chain+0xa4>
 8006b78:	197b      	adds	r3, r7, r5
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	e01c      	b.n	8006bb8 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	3b02      	subs	r3, #2
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d20b      	bcs.n	8006ba4 <remove_chain+0xca>
			fs->free_clst++;
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	791b      	ldrb	r3, [r3, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d3bf      	bcc.n	8006b32 <remove_chain+0x58>
 8006bb2:	e000      	b.n	8006bb6 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8006bb4:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	0018      	movs	r0, r3
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b008      	add	sp, #32
 8006bbe:	bdb0      	pop	{r4, r5, r7, pc}

08006bc0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006bc0:	b5b0      	push	{r4, r5, r7, lr}
 8006bc2:	b088      	sub	sp, #32
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10d      	bne.n	8006bf2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <create_chain+0x2c>
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d31d      	bcc.n	8006c28 <create_chain+0x68>
 8006bec:	2301      	movs	r3, #1
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	e01a      	b.n	8006c28 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	0011      	movs	r1, r2
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f7ff fd63 	bl	80066c4 <get_fat>
 8006bfe:	0003      	movs	r3, r0
 8006c00:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d801      	bhi.n	8006c0c <create_chain+0x4c>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e07b      	b.n	8006d04 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	d101      	bne.n	8006c16 <create_chain+0x56>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	e076      	b.n	8006d04 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d201      	bcs.n	8006c24 <create_chain+0x64>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	e06f      	b.n	8006d04 <create_chain+0x144>
		scl = clst;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	69fa      	ldr	r2, [r7, #28]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d307      	bcc.n	8006c4c <create_chain+0x8c>
				ncl = 2;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d901      	bls.n	8006c4c <create_chain+0x8c>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	e05b      	b.n	8006d04 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	0011      	movs	r1, r2
 8006c52:	0018      	movs	r0, r3
 8006c54:	f7ff fd36 	bl	80066c4 <get_fat>
 8006c58:	0003      	movs	r3, r0
 8006c5a:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00d      	beq.n	8006c7e <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d002      	beq.n	8006c6e <create_chain+0xae>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	d101      	bne.n	8006c72 <create_chain+0xb2>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	e048      	b.n	8006d04 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d1d8      	bne.n	8006c2c <create_chain+0x6c>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e042      	b.n	8006d04 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8006c7e:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006c80:	2517      	movs	r5, #23
 8006c82:	197c      	adds	r4, r7, r5
 8006c84:	2301      	movs	r3, #1
 8006c86:	425a      	negs	r2, r3
 8006c88:	69f9      	ldr	r1, [r7, #28]
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f7ff fdf4 	bl	800687a <put_fat>
 8006c92:	0003      	movs	r3, r0
 8006c94:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 8006c96:	197b      	adds	r3, r7, r5
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10b      	bne.n	8006cb6 <create_chain+0xf6>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d008      	beq.n	8006cb6 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006ca4:	197c      	adds	r4, r7, r5
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	0018      	movs	r0, r3
 8006cae:	f7ff fde4 	bl	800687a <put_fat>
 8006cb2:	0003      	movs	r3, r0
 8006cb4:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006cb6:	2317      	movs	r3, #23
 8006cb8:	18fb      	adds	r3, r7, r3
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d116      	bne.n	8006cee <create_chain+0x12e>
		fs->last_clst = ncl;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	3b02      	subs	r3, #2
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d804      	bhi.n	8006cde <create_chain+0x11e>
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	1e5a      	subs	r2, r3, #1
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	791b      	ldrb	r3, [r3, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	711a      	strb	r2, [r3, #4]
 8006cec:	e009      	b.n	8006d02 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006cee:	2317      	movs	r3, #23
 8006cf0:	18fb      	adds	r3, r7, r3
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d102      	bne.n	8006cfe <create_chain+0x13e>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	425b      	negs	r3, r3
 8006cfc:	e000      	b.n	8006d00 <create_chain+0x140>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006d02:	69fb      	ldr	r3, [r7, #28]
}
 8006d04:	0018      	movs	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b008      	add	sp, #32
 8006d0a:	bdb0      	pop	{r4, r5, r7, pc}

08006d0c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	3304      	adds	r3, #4
 8006d22:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	899b      	ldrh	r3, [r3, #12]
 8006d28:	0019      	movs	r1, r3
 8006d2a:	6838      	ldr	r0, [r7, #0]
 8006d2c:	f7f9 fa08 	bl	8000140 <__udivsi3>
 8006d30:	0003      	movs	r3, r0
 8006d32:	001a      	movs	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	895b      	ldrh	r3, [r3, #10]
 8006d38:	0019      	movs	r1, r3
 8006d3a:	0010      	movs	r0, r2
 8006d3c:	f7f9 fa00 	bl	8000140 <__udivsi3>
 8006d40:	0003      	movs	r3, r0
 8006d42:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	1d1a      	adds	r2, r3, #4
 8006d48:	613a      	str	r2, [r7, #16]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <clmt_clust+0x4c>
 8006d54:	2300      	movs	r3, #0
 8006d56:	e010      	b.n	8006d7a <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d307      	bcc.n	8006d70 <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d6e:	e7e9      	b.n	8006d44 <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 8006d70:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	18d3      	adds	r3, r2, r3
}
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	b006      	add	sp, #24
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006d82:	b590      	push	{r4, r7, lr}
 8006d84:	b087      	sub	sp, #28
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	2380      	movs	r3, #128	; 0x80
 8006d96:	039b      	lsls	r3, r3, #14
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d203      	bcs.n	8006da4 <dir_sdi+0x22>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	221f      	movs	r2, #31
 8006da0:	4013      	ands	r3, r2
 8006da2:	d001      	beq.n	8006da8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006da4:	2302      	movs	r3, #2
 8006da6:	e074      	b.n	8006e92 <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <dir_sdi+0x46>
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d902      	bls.n	8006dc8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10c      	bne.n	8006de8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	8912      	ldrh	r2, [r2, #8]
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d301      	bcc.n	8006dde <dir_sdi+0x5c>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e059      	b.n	8006e92 <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	61da      	str	r2, [r3, #28]
 8006de6:	e02f      	b.n	8006e48 <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	895b      	ldrh	r3, [r3, #10]
 8006dec:	001a      	movs	r2, r3
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	899b      	ldrh	r3, [r3, #12]
 8006df2:	4353      	muls	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006df6:	e01a      	b.n	8006e2e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	0011      	movs	r1, r2
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7ff fc60 	bl	80066c4 <get_fat>
 8006e04:	0003      	movs	r3, r0
 8006e06:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	d101      	bne.n	8006e12 <dir_sdi+0x90>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e03f      	b.n	8006e92 <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d904      	bls.n	8006e22 <dir_sdi+0xa0>
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d301      	bcc.n	8006e26 <dir_sdi+0xa4>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e035      	b.n	8006e92 <dir_sdi+0x110>
			ofs -= csz;
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d2e0      	bcs.n	8006df8 <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	0011      	movs	r1, r2
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7ff fc25 	bl	800668c <clust2sect>
 8006e42:	0002      	movs	r2, r0
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <dir_sdi+0xd8>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e01b      	b.n	8006e92 <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	69dc      	ldr	r4, [r3, #28]
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	899b      	ldrh	r3, [r3, #12]
 8006e62:	0019      	movs	r1, r3
 8006e64:	6838      	ldr	r0, [r7, #0]
 8006e66:	f7f9 f96b 	bl	8000140 <__udivsi3>
 8006e6a:	0003      	movs	r3, r0
 8006e6c:	18e2      	adds	r2, r4, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	3338      	adds	r3, #56	; 0x38
 8006e76:	001c      	movs	r4, r3
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	899b      	ldrh	r3, [r3, #12]
 8006e7c:	001a      	movs	r2, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	0011      	movs	r1, r2
 8006e82:	0018      	movs	r0, r3
 8006e84:	f7f9 f9e2 	bl	800024c <__aeabi_uidivmod>
 8006e88:	000b      	movs	r3, r1
 8006e8a:	18e2      	adds	r2, r4, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	0018      	movs	r0, r3
 8006e94:	46bd      	mov	sp, r7
 8006e96:	b007      	add	sp, #28
 8006e98:	bd90      	pop	{r4, r7, pc}

08006e9a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006e9a:	b590      	push	{r4, r7, lr}
 8006e9c:	b087      	sub	sp, #28
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	3320      	adds	r3, #32
 8006eb0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <dir_next+0x2a>
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	2380      	movs	r3, #128	; 0x80
 8006ebe:	039b      	lsls	r3, r3, #14
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d301      	bcc.n	8006ec8 <dir_next+0x2e>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	e0c0      	b.n	800704a <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	899b      	ldrh	r3, [r3, #12]
 8006ecc:	001a      	movs	r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	0011      	movs	r1, r2
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f7f9 f9ba 	bl	800024c <__aeabi_uidivmod>
 8006ed8:	1e0b      	subs	r3, r1, #0
 8006eda:	d000      	beq.n	8006ede <dir_next+0x44>
 8006edc:	e0a2      	b.n	8007024 <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10b      	bne.n	8006f08 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	8912      	ldrh	r2, [r2, #8]
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d200      	bcs.n	8006efe <dir_next+0x64>
 8006efc:	e092      	b.n	8007024 <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	61da      	str	r2, [r3, #28]
 8006f04:	2304      	movs	r3, #4
 8006f06:	e0a0      	b.n	800704a <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	899b      	ldrh	r3, [r3, #12]
 8006f0c:	0019      	movs	r1, r3
 8006f0e:	68b8      	ldr	r0, [r7, #8]
 8006f10:	f7f9 f916 	bl	8000140 <__udivsi3>
 8006f14:	0003      	movs	r3, r0
 8006f16:	001a      	movs	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	895b      	ldrh	r3, [r3, #10]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	4013      	ands	r3, r2
 8006f20:	d000      	beq.n	8006f24 <dir_next+0x8a>
 8006f22:	e07f      	b.n	8007024 <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	0019      	movs	r1, r3
 8006f2c:	0010      	movs	r0, r2
 8006f2e:	f7ff fbc9 	bl	80066c4 <get_fat>
 8006f32:	0003      	movs	r3, r0
 8006f34:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d801      	bhi.n	8006f40 <dir_next+0xa6>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e084      	b.n	800704a <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	3301      	adds	r3, #1
 8006f44:	d101      	bne.n	8006f4a <dir_next+0xb0>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e07f      	b.n	800704a <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d35b      	bcc.n	800700c <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d104      	bne.n	8006f64 <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	61da      	str	r2, [r3, #28]
 8006f60:	2304      	movs	r3, #4
 8006f62:	e072      	b.n	800704a <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	0019      	movs	r1, r3
 8006f6c:	0010      	movs	r0, r2
 8006f6e:	f7ff fe27 	bl	8006bc0 <create_chain>
 8006f72:	0003      	movs	r3, r0
 8006f74:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <dir_next+0xe6>
 8006f7c:	2307      	movs	r3, #7
 8006f7e:	e064      	b.n	800704a <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d101      	bne.n	8006f8a <dir_next+0xf0>
 8006f86:	2302      	movs	r3, #2
 8006f88:	e05f      	b.n	800704a <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <dir_next+0xfa>
 8006f90:	2301      	movs	r3, #1
 8006f92:	e05a      	b.n	800704a <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	0018      	movs	r0, r3
 8006f98:	f7ff fa7e 	bl	8006498 <sync_window>
 8006f9c:	1e03      	subs	r3, r0, #0
 8006f9e:	d001      	beq.n	8006fa4 <dir_next+0x10a>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e052      	b.n	800704a <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3338      	adds	r3, #56	; 0x38
 8006fa8:	0018      	movs	r0, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	899b      	ldrh	r3, [r3, #12]
 8006fae:	001a      	movs	r2, r3
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	f7ff f8b0 	bl	8006116 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	613b      	str	r3, [r7, #16]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	0011      	movs	r1, r2
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f7ff fb63 	bl	800668c <clust2sect>
 8006fc6:	0002      	movs	r2, r0
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	635a      	str	r2, [r3, #52]	; 0x34
 8006fcc:	e012      	b.n	8006ff4 <dir_next+0x15a>
						fs->wflag = 1;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f7ff fa5e 	bl	8006498 <sync_window>
 8006fdc:	1e03      	subs	r3, r0, #0
 8006fde:	d001      	beq.n	8006fe4 <dir_next+0x14a>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e032      	b.n	800704a <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	635a      	str	r2, [r3, #52]	; 0x34
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	895b      	ldrh	r3, [r3, #10]
 8006ff8:	001a      	movs	r2, r3
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d3e6      	bcc.n	8006fce <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad2      	subs	r2, r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	0011      	movs	r1, r2
 8007018:	0018      	movs	r0, r3
 800701a:	f7ff fb37 	bl	800668c <clust2sect>
 800701e:	0002      	movs	r2, r0
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3338      	adds	r3, #56	; 0x38
 800702e:	001c      	movs	r4, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	899b      	ldrh	r3, [r3, #12]
 8007034:	001a      	movs	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	0011      	movs	r1, r2
 800703a:	0018      	movs	r0, r3
 800703c:	f7f9 f906 	bl	800024c <__aeabi_uidivmod>
 8007040:	000b      	movs	r3, r1
 8007042:	18e2      	adds	r2, r4, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	0018      	movs	r0, r3
 800704c:	46bd      	mov	sp, r7
 800704e:	b007      	add	sp, #28
 8007050:	bd90      	pop	{r4, r7, pc}

08007052 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007052:	b5b0      	push	{r4, r5, r7, lr}
 8007054:	b086      	sub	sp, #24
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007062:	2517      	movs	r5, #23
 8007064:	197c      	adds	r4, r7, r5
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2100      	movs	r1, #0
 800706a:	0018      	movs	r0, r3
 800706c:	f7ff fe89 	bl	8006d82 <dir_sdi>
 8007070:	0003      	movs	r3, r0
 8007072:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007074:	197b      	adds	r3, r7, r5
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d133      	bne.n	80070e4 <dir_alloc+0x92>
		n = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	2517      	movs	r5, #23
 8007086:	197c      	adds	r4, r7, r5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	0011      	movs	r1, r2
 800708c:	0018      	movs	r0, r3
 800708e:	f7ff fa4b 	bl	8006528 <move_window>
 8007092:	0003      	movs	r3, r0
 8007094:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007096:	197b      	adds	r3, r7, r5
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d121      	bne.n	80070e2 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2be5      	cmp	r3, #229	; 0xe5
 80070a6:	d004      	beq.n	80070b2 <dir_alloc+0x60>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d107      	bne.n	80070c2 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	3301      	adds	r3, #1
 80070b6:	613b      	str	r3, [r7, #16]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d102      	bne.n	80070c6 <dir_alloc+0x74>
 80070c0:	e010      	b.n	80070e4 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80070c2:	2300      	movs	r3, #0
 80070c4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80070c6:	2517      	movs	r5, #23
 80070c8:	197c      	adds	r4, r7, r5
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2101      	movs	r1, #1
 80070ce:	0018      	movs	r0, r3
 80070d0:	f7ff fee3 	bl	8006e9a <dir_next>
 80070d4:	0003      	movs	r3, r0
 80070d6:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80070d8:	197b      	adds	r3, r7, r5
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0cf      	beq.n	8007080 <dir_alloc+0x2e>
 80070e0:	e000      	b.n	80070e4 <dir_alloc+0x92>
			if (res != FR_OK) break;
 80070e2:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80070e4:	2217      	movs	r2, #23
 80070e6:	18bb      	adds	r3, r7, r2
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d102      	bne.n	80070f4 <dir_alloc+0xa2>
 80070ee:	18bb      	adds	r3, r7, r2
 80070f0:	2207      	movs	r2, #7
 80070f2:	701a      	strb	r2, [r3, #0]
	return res;
 80070f4:	2317      	movs	r3, #23
 80070f6:	18fb      	adds	r3, r7, r3
 80070f8:	781b      	ldrb	r3, [r3, #0]
}
 80070fa:	0018      	movs	r0, r3
 80070fc:	46bd      	mov	sp, r7
 80070fe:	b006      	add	sp, #24
 8007100:	bdb0      	pop	{r4, r5, r7, pc}

08007102 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	331a      	adds	r3, #26
 8007110:	0018      	movs	r0, r3
 8007112:	f7fe ff5d 	bl	8005fd0 <ld_word>
 8007116:	0003      	movs	r3, r0
 8007118:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b03      	cmp	r3, #3
 8007120:	d109      	bne.n	8007136 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	3314      	adds	r3, #20
 8007126:	0018      	movs	r0, r3
 8007128:	f7fe ff52 	bl	8005fd0 <ld_word>
 800712c:	0003      	movs	r3, r0
 800712e:	041b      	lsls	r3, r3, #16
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007136:	68fb      	ldr	r3, [r7, #12]
}
 8007138:	0018      	movs	r0, r3
 800713a:	46bd      	mov	sp, r7
 800713c:	b004      	add	sp, #16
 800713e:	bd80      	pop	{r7, pc}

08007140 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	331a      	adds	r3, #26
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	b292      	uxth	r2, r2
 8007154:	0011      	movs	r1, r2
 8007156:	0018      	movs	r0, r3
 8007158:	f7fe ff76 	bl	8006048 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b03      	cmp	r3, #3
 8007162:	d109      	bne.n	8007178 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	3314      	adds	r3, #20
 8007168:	001a      	movs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	0c1b      	lsrs	r3, r3, #16
 800716e:	b29b      	uxth	r3, r3
 8007170:	0019      	movs	r1, r3
 8007172:	0010      	movs	r0, r2
 8007174:	f7fe ff68 	bl	8006048 <st_word>
	}
}
 8007178:	46c0      	nop			; (mov r8, r8)
 800717a:	46bd      	mov	sp, r7
 800717c:	b004      	add	sp, #16
 800717e:	bd80      	pop	{r7, pc}

08007180 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007180:	b5b0      	push	{r4, r5, r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	331a      	adds	r3, #26
 800718e:	0018      	movs	r0, r3
 8007190:	f7fe ff1e 	bl	8005fd0 <ld_word>
 8007194:	1e03      	subs	r3, r0, #0
 8007196:	d001      	beq.n	800719c <cmp_lfn+0x1c>
 8007198:	2300      	movs	r3, #0
 800719a:	e068      	b.n	800726e <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	001a      	movs	r2, r3
 80071a2:	233f      	movs	r3, #63	; 0x3f
 80071a4:	4013      	ands	r3, r2
 80071a6:	1e5a      	subs	r2, r3, #1
 80071a8:	0013      	movs	r3, r2
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	189b      	adds	r3, r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	189b      	adds	r3, r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80071b4:	230e      	movs	r3, #14
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	2201      	movs	r2, #1
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	2300      	movs	r3, #0
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	e03d      	b.n	800723e <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80071c2:	4a2d      	ldr	r2, [pc, #180]	; (8007278 <cmp_lfn+0xf8>)
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	18d3      	adds	r3, r2, r3
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	001a      	movs	r2, r3
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	189b      	adds	r3, r3, r2
 80071d0:	250c      	movs	r5, #12
 80071d2:	197c      	adds	r4, r7, r5
 80071d4:	0018      	movs	r0, r3
 80071d6:	f7fe fefb 	bl	8005fd0 <ld_word>
 80071da:	0003      	movs	r3, r0
 80071dc:	8023      	strh	r3, [r4, #0]
		if (wc) {
 80071de:	230e      	movs	r3, #14
 80071e0:	18fb      	adds	r3, r7, r3
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d01f      	beq.n	8007228 <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2bfe      	cmp	r3, #254	; 0xfe
 80071ec:	d813      	bhi.n	8007216 <cmp_lfn+0x96>
 80071ee:	197b      	adds	r3, r7, r5
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	0018      	movs	r0, r3
 80071f4:	f002 f934 	bl	8009460 <ff_wtoupper>
 80071f8:	0003      	movs	r3, r0
 80071fa:	001c      	movs	r4, r3
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	617a      	str	r2, [r7, #20]
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	18d3      	adds	r3, r2, r3
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	0018      	movs	r0, r3
 800720c:	f002 f928 	bl	8009460 <ff_wtoupper>
 8007210:	0003      	movs	r3, r0
 8007212:	429c      	cmp	r4, r3
 8007214:	d001      	beq.n	800721a <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 8007216:	2300      	movs	r3, #0
 8007218:	e029      	b.n	800726e <cmp_lfn+0xee>
			}
			wc = uc;
 800721a:	230e      	movs	r3, #14
 800721c:	18fb      	adds	r3, r7, r3
 800721e:	220c      	movs	r2, #12
 8007220:	18ba      	adds	r2, r7, r2
 8007222:	8812      	ldrh	r2, [r2, #0]
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	e007      	b.n	8007238 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007228:	230c      	movs	r3, #12
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	4a13      	ldr	r2, [pc, #76]	; (800727c <cmp_lfn+0xfc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d001      	beq.n	8007238 <cmp_lfn+0xb8>
 8007234:	2300      	movs	r3, #0
 8007236:	e01a      	b.n	800726e <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	3301      	adds	r3, #1
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b0c      	cmp	r3, #12
 8007242:	d9be      	bls.n	80071c2 <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	001a      	movs	r2, r3
 800724a:	2340      	movs	r3, #64	; 0x40
 800724c:	4013      	ands	r3, r2
 800724e:	d00d      	beq.n	800726c <cmp_lfn+0xec>
 8007250:	230e      	movs	r3, #14
 8007252:	18fb      	adds	r3, r7, r3
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d008      	beq.n	800726c <cmp_lfn+0xec>
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	18d3      	adds	r3, r2, r3
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <cmp_lfn+0xec>
 8007268:	2300      	movs	r3, #0
 800726a:	e000      	b.n	800726e <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 800726c:	2301      	movs	r3, #1
}
 800726e:	0018      	movs	r0, r3
 8007270:	46bd      	mov	sp, r7
 8007272:	b006      	add	sp, #24
 8007274:	bdb0      	pop	{r4, r5, r7, pc}
 8007276:	46c0      	nop			; (mov r8, r8)
 8007278:	0800e104 	.word	0x0800e104
 800727c:	0000ffff 	.word	0x0000ffff

08007280 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007280:	b590      	push	{r4, r7, lr}
 8007282:	b089      	sub	sp, #36	; 0x24
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	0019      	movs	r1, r3
 800728c:	1dfb      	adds	r3, r7, #7
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	1dbb      	adds	r3, r7, #6
 8007292:	1c0a      	adds	r2, r1, #0
 8007294:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	330d      	adds	r3, #13
 800729a:	1dba      	adds	r2, r7, #6
 800729c:	7812      	ldrb	r2, [r2, #0]
 800729e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	330b      	adds	r3, #11
 80072a4:	220f      	movs	r2, #15
 80072a6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	330c      	adds	r3, #12
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	331a      	adds	r3, #26
 80072b4:	2100      	movs	r1, #0
 80072b6:	0018      	movs	r0, r3
 80072b8:	f7fe fec6 	bl	8006048 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80072bc:	1dfb      	adds	r3, r7, #7
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	1e5a      	subs	r2, r3, #1
 80072c2:	0013      	movs	r3, r2
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	189b      	adds	r3, r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	189b      	adds	r3, r3, r2
 80072cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80072ce:	2316      	movs	r3, #22
 80072d0:	18fb      	adds	r3, r7, r3
 80072d2:	2200      	movs	r2, #0
 80072d4:	801a      	strh	r2, [r3, #0]
 80072d6:	2300      	movs	r3, #0
 80072d8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80072da:	2116      	movs	r1, #22
 80072dc:	187b      	adds	r3, r7, r1
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	4a21      	ldr	r2, [pc, #132]	; (8007368 <put_lfn+0xe8>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d008      	beq.n	80072f8 <put_lfn+0x78>
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	61fa      	str	r2, [r7, #28]
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	18d2      	adds	r2, r2, r3
 80072f2:	187b      	adds	r3, r7, r1
 80072f4:	8812      	ldrh	r2, [r2, #0]
 80072f6:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80072f8:	4a1c      	ldr	r2, [pc, #112]	; (800736c <put_lfn+0xec>)
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	18d3      	adds	r3, r2, r3
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	001a      	movs	r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	189a      	adds	r2, r3, r2
 8007306:	2416      	movs	r4, #22
 8007308:	193b      	adds	r3, r7, r4
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	0019      	movs	r1, r3
 800730e:	0010      	movs	r0, r2
 8007310:	f7fe fe9a 	bl	8006048 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007314:	0022      	movs	r2, r4
 8007316:	18bb      	adds	r3, r7, r2
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <put_lfn+0xa6>
 800731e:	18bb      	adds	r3, r7, r2
 8007320:	2201      	movs	r2, #1
 8007322:	4252      	negs	r2, r2
 8007324:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	3301      	adds	r3, #1
 800732a:	61bb      	str	r3, [r7, #24]
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	2b0c      	cmp	r3, #12
 8007330:	d9d3      	bls.n	80072da <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007332:	2316      	movs	r3, #22
 8007334:	18fb      	adds	r3, r7, r3
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	4a0b      	ldr	r2, [pc, #44]	; (8007368 <put_lfn+0xe8>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d006      	beq.n	800734c <put_lfn+0xcc>
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	18d3      	adds	r3, r2, r3
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d105      	bne.n	8007358 <put_lfn+0xd8>
 800734c:	1dfb      	adds	r3, r7, #7
 800734e:	1dfa      	adds	r2, r7, #7
 8007350:	7812      	ldrb	r2, [r2, #0]
 8007352:	2140      	movs	r1, #64	; 0x40
 8007354:	430a      	orrs	r2, r1
 8007356:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	1dfa      	adds	r2, r7, #7
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	701a      	strb	r2, [r3, #0]
}
 8007360:	46c0      	nop			; (mov r8, r8)
 8007362:	46bd      	mov	sp, r7
 8007364:	b009      	add	sp, #36	; 0x24
 8007366:	bd90      	pop	{r4, r7, pc}
 8007368:	0000ffff 	.word	0x0000ffff
 800736c:	0800e104 	.word	0x0800e104

08007370 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08c      	sub	sp, #48	; 0x30
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	220b      	movs	r2, #11
 8007384:	0018      	movs	r0, r3
 8007386:	f7fe fea7 	bl	80060d8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b05      	cmp	r3, #5
 800738e:	d92f      	bls.n	80073f0 <gen_numname+0x80>
		sr = seq;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007394:	e026      	b.n	80073e4 <gen_numname+0x74>
			wc = *lfn++;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	1c9a      	adds	r2, r3, #2
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	2222      	movs	r2, #34	; 0x22
 800739e:	18ba      	adds	r2, r7, r2
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 80073a4:	2300      	movs	r3, #0
 80073a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80073a8:	e019      	b.n	80073de <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	005a      	lsls	r2, r3, #1
 80073ae:	2022      	movs	r0, #34	; 0x22
 80073b0:	183b      	adds	r3, r7, r0
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	2101      	movs	r1, #1
 80073b6:	400b      	ands	r3, r1
 80073b8:	18d3      	adds	r3, r2, r3
 80073ba:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80073bc:	183b      	adds	r3, r7, r0
 80073be:	183a      	adds	r2, r7, r0
 80073c0:	8812      	ldrh	r2, [r2, #0]
 80073c2:	0852      	lsrs	r2, r2, #1
 80073c4:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	2380      	movs	r3, #128	; 0x80
 80073ca:	025b      	lsls	r3, r3, #9
 80073cc:	4013      	ands	r3, r2
 80073ce:	d003      	beq.n	80073d8 <gen_numname+0x68>
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	4a30      	ldr	r2, [pc, #192]	; (8007494 <gen_numname+0x124>)
 80073d4:	4053      	eors	r3, r2
 80073d6:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	3301      	adds	r3, #1
 80073dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	2b0f      	cmp	r3, #15
 80073e2:	d9e2      	bls.n	80073aa <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1d4      	bne.n	8007396 <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80073f0:	2307      	movs	r3, #7
 80073f2:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	220f      	movs	r2, #15
 80073fa:	4013      	ands	r3, r2
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	212f      	movs	r1, #47	; 0x2f
 8007400:	187b      	adds	r3, r7, r1
 8007402:	3230      	adds	r2, #48	; 0x30
 8007404:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8007406:	187b      	adds	r3, r7, r1
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	2b39      	cmp	r3, #57	; 0x39
 800740c:	d904      	bls.n	8007418 <gen_numname+0xa8>
 800740e:	187b      	adds	r3, r7, r1
 8007410:	187a      	adds	r2, r7, r1
 8007412:	7812      	ldrb	r2, [r2, #0]
 8007414:	3207      	adds	r2, #7
 8007416:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	1e5a      	subs	r2, r3, #1
 800741c:	62ba      	str	r2, [r7, #40]	; 0x28
 800741e:	2014      	movs	r0, #20
 8007420:	183a      	adds	r2, r7, r0
 8007422:	212f      	movs	r1, #47	; 0x2f
 8007424:	1879      	adds	r1, r7, r1
 8007426:	7809      	ldrb	r1, [r1, #0]
 8007428:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	091b      	lsrs	r3, r3, #4
 800742e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1de      	bne.n	80073f4 <gen_numname+0x84>
	ns[i] = '~';
 8007436:	183a      	adds	r2, r7, r0
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	18d3      	adds	r3, r2, r3
 800743c:	227e      	movs	r2, #126	; 0x7e
 800743e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007440:	2300      	movs	r3, #0
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
 8007444:	e002      	b.n	800744c <gen_numname+0xdc>
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	3301      	adds	r3, #1
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
 800744c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	429a      	cmp	r2, r3
 8007452:	d205      	bcs.n	8007460 <gen_numname+0xf0>
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	18d3      	adds	r3, r2, r3
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b20      	cmp	r3, #32
 800745e:	d1f2      	bne.n	8007446 <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	2b07      	cmp	r3, #7
 8007464:	d806      	bhi.n	8007474 <gen_numname+0x104>
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	62ba      	str	r2, [r7, #40]	; 0x28
 800746c:	2214      	movs	r2, #20
 800746e:	18ba      	adds	r2, r7, r2
 8007470:	5cd1      	ldrb	r1, [r2, r3]
 8007472:	e000      	b.n	8007476 <gen_numname+0x106>
 8007474:	2120      	movs	r1, #32
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	627a      	str	r2, [r7, #36]	; 0x24
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	18d3      	adds	r3, r2, r3
 8007480:	1c0a      	adds	r2, r1, #0
 8007482:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	2b07      	cmp	r3, #7
 8007488:	d9ea      	bls.n	8007460 <gen_numname+0xf0>
}
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	46c0      	nop			; (mov r8, r8)
 800748e:	46bd      	mov	sp, r7
 8007490:	b00c      	add	sp, #48	; 0x30
 8007492:	bd80      	pop	{r7, pc}
 8007494:	00011021 	.word	0x00011021

08007498 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80074a0:	230f      	movs	r3, #15
 80074a2:	18fb      	adds	r3, r7, r3
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 80074a8:	230b      	movs	r3, #11
 80074aa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80074ac:	200f      	movs	r0, #15
 80074ae:	183b      	adds	r3, r7, r0
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	0852      	lsrs	r2, r2, #1
 80074b6:	01db      	lsls	r3, r3, #7
 80074b8:	4313      	orrs	r3, r2
 80074ba:	b2d9      	uxtb	r1, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	607a      	str	r2, [r7, #4]
 80074c2:	781a      	ldrb	r2, [r3, #0]
 80074c4:	183b      	adds	r3, r7, r0
 80074c6:	188a      	adds	r2, r1, r2
 80074c8:	701a      	strb	r2, [r3, #0]
	} while (--n);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	60bb      	str	r3, [r7, #8]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1ea      	bne.n	80074ac <sum_sfn+0x14>
	return sum;
 80074d6:	183b      	adds	r3, r7, r0
 80074d8:	781b      	ldrb	r3, [r3, #0]
}
 80074da:	0018      	movs	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	b004      	add	sp, #16
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80074e2:	b5b0      	push	{r4, r5, r7, lr}
 80074e4:	b086      	sub	sp, #24
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80074f0:	2517      	movs	r5, #23
 80074f2:	197c      	adds	r4, r7, r5
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2100      	movs	r1, #0
 80074f8:	0018      	movs	r0, r3
 80074fa:	f7ff fc42 	bl	8006d82 <dir_sdi>
 80074fe:	0003      	movs	r3, r0
 8007500:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8007502:	197b      	adds	r3, r7, r5
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <dir_find+0x2e>
 800750a:	197b      	adds	r3, r7, r5
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	e0df      	b.n	80076d0 <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007510:	2114      	movs	r1, #20
 8007512:	187b      	adds	r3, r7, r1
 8007514:	22ff      	movs	r2, #255	; 0xff
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	2315      	movs	r3, #21
 800751a:	18fb      	adds	r3, r7, r3
 800751c:	187a      	adds	r2, r7, r1
 800751e:	7812      	ldrb	r2, [r2, #0]
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	4252      	negs	r2, r2
 8007528:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	69da      	ldr	r2, [r3, #28]
 800752e:	2517      	movs	r5, #23
 8007530:	197c      	adds	r4, r7, r5
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	0011      	movs	r1, r2
 8007536:	0018      	movs	r0, r3
 8007538:	f7fe fff6 	bl	8006528 <move_window>
 800753c:	0003      	movs	r3, r0
 800753e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8007540:	0029      	movs	r1, r5
 8007542:	187b      	adds	r3, r7, r1
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d000      	beq.n	800754c <dir_find+0x6a>
 800754a:	e0b9      	b.n	80076c0 <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a1a      	ldr	r2, [r3, #32]
 8007550:	2016      	movs	r0, #22
 8007552:	183b      	adds	r3, r7, r0
 8007554:	7812      	ldrb	r2, [r2, #0]
 8007556:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007558:	183b      	adds	r3, r7, r0
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d103      	bne.n	8007568 <dir_find+0x86>
 8007560:	187b      	adds	r3, r7, r1
 8007562:	2204      	movs	r2, #4
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	e0b0      	b.n	80076ca <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	330b      	adds	r3, #11
 800756e:	781a      	ldrb	r2, [r3, #0]
 8007570:	200f      	movs	r0, #15
 8007572:	183b      	adds	r3, r7, r0
 8007574:	213f      	movs	r1, #63	; 0x3f
 8007576:	400a      	ands	r2, r1
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	0001      	movs	r1, r0
 800757e:	187a      	adds	r2, r7, r1
 8007580:	7812      	ldrb	r2, [r2, #0]
 8007582:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007584:	2316      	movs	r3, #22
 8007586:	18fb      	adds	r3, r7, r3
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2be5      	cmp	r3, #229	; 0xe5
 800758c:	d008      	beq.n	80075a0 <dir_find+0xbe>
 800758e:	187b      	adds	r3, r7, r1
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2208      	movs	r2, #8
 8007594:	4013      	ands	r3, r2
 8007596:	d00c      	beq.n	80075b2 <dir_find+0xd0>
 8007598:	187b      	adds	r3, r7, r1
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b0f      	cmp	r3, #15
 800759e:	d008      	beq.n	80075b2 <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80075a0:	2315      	movs	r3, #21
 80075a2:	18fb      	adds	r3, r7, r3
 80075a4:	22ff      	movs	r2, #255	; 0xff
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	4252      	negs	r2, r2
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
 80075b0:	e077      	b.n	80076a2 <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80075b2:	230f      	movs	r3, #15
 80075b4:	18fb      	adds	r3, r7, r3
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b0f      	cmp	r3, #15
 80075ba:	d148      	bne.n	800764e <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	222f      	movs	r2, #47	; 0x2f
 80075c0:	5c9b      	ldrb	r3, [r3, r2]
 80075c2:	001a      	movs	r2, r3
 80075c4:	2340      	movs	r3, #64	; 0x40
 80075c6:	4013      	ands	r3, r2
 80075c8:	d000      	beq.n	80075cc <dir_find+0xea>
 80075ca:	e06a      	b.n	80076a2 <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80075cc:	2116      	movs	r1, #22
 80075ce:	187b      	adds	r3, r7, r1
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2240      	movs	r2, #64	; 0x40
 80075d4:	4013      	ands	r3, r2
 80075d6:	d015      	beq.n	8007604 <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a1a      	ldr	r2, [r3, #32]
 80075dc:	2314      	movs	r3, #20
 80075de:	18fb      	adds	r3, r7, r3
 80075e0:	7b52      	ldrb	r2, [r2, #13]
 80075e2:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80075e4:	187b      	adds	r3, r7, r1
 80075e6:	0008      	movs	r0, r1
 80075e8:	187a      	adds	r2, r7, r1
 80075ea:	7812      	ldrb	r2, [r2, #0]
 80075ec:	2140      	movs	r1, #64	; 0x40
 80075ee:	438a      	bics	r2, r1
 80075f0:	701a      	strb	r2, [r3, #0]
 80075f2:	2315      	movs	r3, #21
 80075f4:	18fb      	adds	r3, r7, r3
 80075f6:	183a      	adds	r2, r7, r0
 80075f8:	7812      	ldrb	r2, [r2, #0]
 80075fa:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	695a      	ldr	r2, [r3, #20]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007604:	2316      	movs	r3, #22
 8007606:	18fa      	adds	r2, r7, r3
 8007608:	2415      	movs	r4, #21
 800760a:	193b      	adds	r3, r7, r4
 800760c:	7812      	ldrb	r2, [r2, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d117      	bne.n	8007644 <dir_find+0x162>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	330d      	adds	r3, #13
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2214      	movs	r2, #20
 800761e:	18ba      	adds	r2, r7, r2
 8007620:	7812      	ldrb	r2, [r2, #0]
 8007622:	429a      	cmp	r2, r3
 8007624:	d10e      	bne.n	8007644 <dir_find+0x162>
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	691a      	ldr	r2, [r3, #16]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	0019      	movs	r1, r3
 8007630:	0010      	movs	r0, r2
 8007632:	f7ff fda5 	bl	8007180 <cmp_lfn>
 8007636:	1e03      	subs	r3, r0, #0
 8007638:	d004      	beq.n	8007644 <dir_find+0x162>
 800763a:	193b      	adds	r3, r7, r4
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	3b01      	subs	r3, #1
 8007640:	b2da      	uxtb	r2, r3
 8007642:	e000      	b.n	8007646 <dir_find+0x164>
 8007644:	22ff      	movs	r2, #255	; 0xff
 8007646:	2315      	movs	r3, #21
 8007648:	18fb      	adds	r3, r7, r3
 800764a:	701a      	strb	r2, [r3, #0]
 800764c:	e029      	b.n	80076a2 <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800764e:	2315      	movs	r3, #21
 8007650:	18fb      	adds	r3, r7, r3
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10b      	bne.n	8007670 <dir_find+0x18e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	0018      	movs	r0, r3
 800765e:	f7ff ff1b 	bl	8007498 <sum_sfn>
 8007662:	0003      	movs	r3, r0
 8007664:	001a      	movs	r2, r3
 8007666:	2314      	movs	r3, #20
 8007668:	18fb      	adds	r3, r7, r3
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	4293      	cmp	r3, r2
 800766e:	d029      	beq.n	80076c4 <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	222f      	movs	r2, #47	; 0x2f
 8007674:	5c9b      	ldrb	r3, [r3, r2]
 8007676:	001a      	movs	r2, r3
 8007678:	2301      	movs	r3, #1
 800767a:	4013      	ands	r3, r2
 800767c:	d109      	bne.n	8007692 <dir_find+0x1b0>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a18      	ldr	r0, [r3, #32]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3324      	adds	r3, #36	; 0x24
 8007686:	220b      	movs	r2, #11
 8007688:	0019      	movs	r1, r3
 800768a:	f7fe fd5d 	bl	8006148 <mem_cmp>
 800768e:	1e03      	subs	r3, r0, #0
 8007690:	d01a      	beq.n	80076c8 <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007692:	2315      	movs	r3, #21
 8007694:	18fb      	adds	r3, r7, r3
 8007696:	22ff      	movs	r2, #255	; 0xff
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	4252      	negs	r2, r2
 80076a0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80076a2:	2517      	movs	r5, #23
 80076a4:	197c      	adds	r4, r7, r5
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2100      	movs	r1, #0
 80076aa:	0018      	movs	r0, r3
 80076ac:	f7ff fbf5 	bl	8006e9a <dir_next>
 80076b0:	0003      	movs	r3, r0
 80076b2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80076b4:	197b      	adds	r3, r7, r5
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d100      	bne.n	80076be <dir_find+0x1dc>
 80076bc:	e735      	b.n	800752a <dir_find+0x48>
 80076be:	e004      	b.n	80076ca <dir_find+0x1e8>
		if (res != FR_OK) break;
 80076c0:	46c0      	nop			; (mov r8, r8)
 80076c2:	e002      	b.n	80076ca <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80076c4:	46c0      	nop			; (mov r8, r8)
 80076c6:	e000      	b.n	80076ca <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80076c8:	46c0      	nop			; (mov r8, r8)

	return res;
 80076ca:	2317      	movs	r3, #23
 80076cc:	18fb      	adds	r3, r7, r3
 80076ce:	781b      	ldrb	r3, [r3, #0]
}
 80076d0:	0018      	movs	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b006      	add	sp, #24
 80076d6:	bdb0      	pop	{r4, r5, r7, pc}

080076d8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80076d8:	b5b0      	push	{r4, r5, r7, lr}
 80076da:	b08c      	sub	sp, #48	; 0x30
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	222f      	movs	r2, #47	; 0x2f
 80076ea:	5c9b      	ldrb	r3, [r3, r2]
 80076ec:	001a      	movs	r2, r3
 80076ee:	23a0      	movs	r3, #160	; 0xa0
 80076f0:	4013      	ands	r3, r2
 80076f2:	d001      	beq.n	80076f8 <dir_register+0x20>
 80076f4:	2306      	movs	r3, #6
 80076f6:	e0fb      	b.n	80078f0 <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80076f8:	2300      	movs	r3, #0
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24
 80076fc:	e002      	b.n	8007704 <dir_register+0x2c>
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	3301      	adds	r3, #1
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	691a      	ldr	r2, [r3, #16]
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	18d3      	adds	r3, r2, r3
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1f4      	bne.n	80076fe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3324      	adds	r3, #36	; 0x24
 8007718:	0019      	movs	r1, r3
 800771a:	240c      	movs	r4, #12
 800771c:	193b      	adds	r3, r7, r4
 800771e:	220c      	movs	r2, #12
 8007720:	0018      	movs	r0, r3
 8007722:	f7fe fcd9 	bl	80060d8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007726:	193b      	adds	r3, r7, r4
 8007728:	7adb      	ldrb	r3, [r3, #11]
 800772a:	001a      	movs	r2, r3
 800772c:	2301      	movs	r3, #1
 800772e:	4013      	ands	r3, r2
 8007730:	d037      	beq.n	80077a2 <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	222f      	movs	r2, #47	; 0x2f
 8007736:	2140      	movs	r1, #64	; 0x40
 8007738:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 800773a:	2301      	movs	r3, #1
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
 800773e:	e018      	b.n	8007772 <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3324      	adds	r3, #36	; 0x24
 8007744:	0018      	movs	r0, r3
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	691a      	ldr	r2, [r3, #16]
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	210c      	movs	r1, #12
 800774e:	1879      	adds	r1, r7, r1
 8007750:	f7ff fe0e 	bl	8007370 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007754:	252f      	movs	r5, #47	; 0x2f
 8007756:	197c      	adds	r4, r7, r5
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	0018      	movs	r0, r3
 800775c:	f7ff fec1 	bl	80074e2 <dir_find>
 8007760:	0003      	movs	r3, r0
 8007762:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007764:	197b      	adds	r3, r7, r5
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d106      	bne.n	800777a <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	3301      	adds	r3, #1
 8007770:	62bb      	str	r3, [r7, #40]	; 0x28
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	2b63      	cmp	r3, #99	; 0x63
 8007776:	d9e3      	bls.n	8007740 <dir_register+0x68>
 8007778:	e000      	b.n	800777c <dir_register+0xa4>
			if (res != FR_OK) break;
 800777a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800777c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777e:	2b64      	cmp	r3, #100	; 0x64
 8007780:	d101      	bne.n	8007786 <dir_register+0xae>
 8007782:	2307      	movs	r3, #7
 8007784:	e0b4      	b.n	80078f0 <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007786:	222f      	movs	r2, #47	; 0x2f
 8007788:	18bb      	adds	r3, r7, r2
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b04      	cmp	r3, #4
 800778e:	d002      	beq.n	8007796 <dir_register+0xbe>
 8007790:	18bb      	adds	r3, r7, r2
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	e0ac      	b.n	80078f0 <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007796:	230c      	movs	r3, #12
 8007798:	18fb      	adds	r3, r7, r3
 800779a:	7ad9      	ldrb	r1, [r3, #11]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	222f      	movs	r2, #47	; 0x2f
 80077a0:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80077a2:	230c      	movs	r3, #12
 80077a4:	18fb      	adds	r3, r7, r3
 80077a6:	7adb      	ldrb	r3, [r3, #11]
 80077a8:	001a      	movs	r2, r3
 80077aa:	2302      	movs	r3, #2
 80077ac:	4013      	ands	r3, r2
 80077ae:	d008      	beq.n	80077c2 <dir_register+0xea>
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	330c      	adds	r3, #12
 80077b4:	210d      	movs	r1, #13
 80077b6:	0018      	movs	r0, r3
 80077b8:	f7f8 fcc2 	bl	8000140 <__udivsi3>
 80077bc:	0003      	movs	r3, r0
 80077be:	3301      	adds	r3, #1
 80077c0:	e000      	b.n	80077c4 <dir_register+0xec>
 80077c2:	2301      	movs	r3, #1
 80077c4:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80077c6:	252f      	movs	r5, #47	; 0x2f
 80077c8:	197c      	adds	r4, r7, r5
 80077ca:	6a3a      	ldr	r2, [r7, #32]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	0011      	movs	r1, r2
 80077d0:	0018      	movs	r0, r3
 80077d2:	f7ff fc3e 	bl	8007052 <dir_alloc>
 80077d6:	0003      	movs	r3, r0
 80077d8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80077da:	0029      	movs	r1, r5
 80077dc:	187b      	adds	r3, r7, r1
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d153      	bne.n	800788c <dir_register+0x1b4>
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	623b      	str	r3, [r7, #32]
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d04d      	beq.n	800788c <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	695a      	ldr	r2, [r3, #20]
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	015b      	lsls	r3, r3, #5
 80077f8:	1ad2      	subs	r2, r2, r3
 80077fa:	000d      	movs	r5, r1
 80077fc:	187c      	adds	r4, r7, r1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	0011      	movs	r1, r2
 8007802:	0018      	movs	r0, r3
 8007804:	f7ff fabd 	bl	8006d82 <dir_sdi>
 8007808:	0003      	movs	r3, r0
 800780a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800780c:	197b      	adds	r3, r7, r5
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d13b      	bne.n	800788c <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3324      	adds	r3, #36	; 0x24
 8007818:	221b      	movs	r2, #27
 800781a:	18bc      	adds	r4, r7, r2
 800781c:	0018      	movs	r0, r3
 800781e:	f7ff fe3b 	bl	8007498 <sum_sfn>
 8007822:	0003      	movs	r3, r0
 8007824:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	69da      	ldr	r2, [r3, #28]
 800782a:	252f      	movs	r5, #47	; 0x2f
 800782c:	197c      	adds	r4, r7, r5
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	0011      	movs	r1, r2
 8007832:	0018      	movs	r0, r3
 8007834:	f7fe fe78 	bl	8006528 <move_window>
 8007838:	0003      	movs	r3, r0
 800783a:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 800783c:	002c      	movs	r4, r5
 800783e:	193b      	adds	r3, r7, r4
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d121      	bne.n	800788a <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	6918      	ldr	r0, [r3, #16]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a19      	ldr	r1, [r3, #32]
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	b2da      	uxtb	r2, r3
 8007852:	231b      	movs	r3, #27
 8007854:	18fb      	adds	r3, r7, r3
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	f7ff fd12 	bl	8007280 <put_lfn>
				fs->wflag = 1;
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	2201      	movs	r2, #1
 8007860:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007862:	0025      	movs	r5, r4
 8007864:	193c      	adds	r4, r7, r4
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2100      	movs	r1, #0
 800786a:	0018      	movs	r0, r3
 800786c:	f7ff fb15 	bl	8006e9a <dir_next>
 8007870:	0003      	movs	r3, r0
 8007872:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 8007874:	197b      	adds	r3, r7, r5
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d107      	bne.n	800788c <dir_register+0x1b4>
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	3b01      	subs	r3, #1
 8007880:	623b      	str	r3, [r7, #32]
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1ce      	bne.n	8007826 <dir_register+0x14e>
 8007888:	e000      	b.n	800788c <dir_register+0x1b4>
				if (res != FR_OK) break;
 800788a:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800788c:	252f      	movs	r5, #47	; 0x2f
 800788e:	197b      	adds	r3, r7, r5
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d129      	bne.n	80078ea <dir_register+0x212>
		res = move_window(fs, dp->sect);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69da      	ldr	r2, [r3, #28]
 800789a:	197c      	adds	r4, r7, r5
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	0011      	movs	r1, r2
 80078a0:	0018      	movs	r0, r3
 80078a2:	f7fe fe41 	bl	8006528 <move_window>
 80078a6:	0003      	movs	r3, r0
 80078a8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80078aa:	197b      	adds	r3, r7, r5
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d11b      	bne.n	80078ea <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	2220      	movs	r2, #32
 80078b8:	2100      	movs	r1, #0
 80078ba:	0018      	movs	r0, r3
 80078bc:	f7fe fc2b 	bl	8006116 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a18      	ldr	r0, [r3, #32]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3324      	adds	r3, #36	; 0x24
 80078c8:	220b      	movs	r2, #11
 80078ca:	0019      	movs	r1, r3
 80078cc:	f7fe fc04 	bl	80060d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	222f      	movs	r2, #47	; 0x2f
 80078d4:	5c9a      	ldrb	r2, [r3, r2]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	330c      	adds	r3, #12
 80078dc:	2118      	movs	r1, #24
 80078de:	400a      	ands	r2, r1
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	2201      	movs	r2, #1
 80078e8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80078ea:	232f      	movs	r3, #47	; 0x2f
 80078ec:	18fb      	adds	r3, r7, r3
 80078ee:	781b      	ldrb	r3, [r3, #0]
}
 80078f0:	0018      	movs	r0, r3
 80078f2:	46bd      	mov	sp, r7
 80078f4:	b00c      	add	sp, #48	; 0x30
 80078f6:	bdb0      	pop	{r4, r5, r7, pc}

080078f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80078f8:	b5b0      	push	{r4, r5, r7, lr}
 80078fa:	b08a      	sub	sp, #40	; 0x28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	61ba      	str	r2, [r7, #24]
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	18d3      	adds	r3, r2, r3
 8007922:	781a      	ldrb	r2, [r3, #0]
 8007924:	2124      	movs	r1, #36	; 0x24
 8007926:	187b      	adds	r3, r7, r1
 8007928:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 800792a:	000a      	movs	r2, r1
 800792c:	18bb      	adds	r3, r7, r2
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	2b1f      	cmp	r3, #31
 8007932:	d94e      	bls.n	80079d2 <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007934:	18bb      	adds	r3, r7, r2
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	2b2f      	cmp	r3, #47	; 0x2f
 800793a:	d007      	beq.n	800794c <create_name+0x54>
 800793c:	18bb      	adds	r3, r7, r2
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	2b5c      	cmp	r3, #92	; 0x5c
 8007942:	d110      	bne.n	8007966 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007944:	e002      	b.n	800794c <create_name+0x54>
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	3301      	adds	r3, #1
 800794a:	61bb      	str	r3, [r7, #24]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	18d3      	adds	r3, r2, r3
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b2f      	cmp	r3, #47	; 0x2f
 8007956:	d0f6      	beq.n	8007946 <create_name+0x4e>
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	18d3      	adds	r3, r2, r3
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b5c      	cmp	r3, #92	; 0x5c
 8007962:	d0f0      	beq.n	8007946 <create_name+0x4e>
			break;
 8007964:	e036      	b.n	80079d4 <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2bfe      	cmp	r3, #254	; 0xfe
 800796a:	d901      	bls.n	8007970 <create_name+0x78>
 800796c:	2306      	movs	r3, #6
 800796e:	e1c2      	b.n	8007cf6 <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007970:	2524      	movs	r5, #36	; 0x24
 8007972:	197b      	adds	r3, r7, r5
 8007974:	197a      	adds	r2, r7, r5
 8007976:	8812      	ldrh	r2, [r2, #0]
 8007978:	21ff      	movs	r1, #255	; 0xff
 800797a:	400a      	ands	r2, r1
 800797c:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800797e:	197c      	adds	r4, r7, r5
 8007980:	197b      	adds	r3, r7, r5
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	2101      	movs	r1, #1
 8007986:	0018      	movs	r0, r3
 8007988:	f001 fd18 	bl	80093bc <ff_convert>
 800798c:	0003      	movs	r3, r0
 800798e:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007990:	197b      	adds	r3, r7, r5
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <create_name+0xa4>
 8007998:	2306      	movs	r3, #6
 800799a:	e1ac      	b.n	8007cf6 <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800799c:	2224      	movs	r2, #36	; 0x24
 800799e:	18bb      	adds	r3, r7, r2
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	2b7f      	cmp	r3, #127	; 0x7f
 80079a4:	d80a      	bhi.n	80079bc <create_name+0xc4>
 80079a6:	18bb      	adds	r3, r7, r2
 80079a8:	881a      	ldrh	r2, [r3, #0]
 80079aa:	4ba7      	ldr	r3, [pc, #668]	; (8007c48 <create_name+0x350>)
 80079ac:	0011      	movs	r1, r2
 80079ae:	0018      	movs	r0, r3
 80079b0:	f7fe fbef 	bl	8006192 <chk_chr>
 80079b4:	1e03      	subs	r3, r0, #0
 80079b6:	d001      	beq.n	80079bc <create_name+0xc4>
 80079b8:	2306      	movs	r3, #6
 80079ba:	e19c      	b.n	8007cf6 <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	617a      	str	r2, [r7, #20]
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	18d3      	adds	r3, r2, r3
 80079c8:	2224      	movs	r2, #36	; 0x24
 80079ca:	18ba      	adds	r2, r7, r2
 80079cc:	8812      	ldrh	r2, [r2, #0]
 80079ce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80079d0:	e7a2      	b.n	8007918 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80079d2:	46c0      	nop			; (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	18d2      	adds	r2, r2, r3
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079de:	2324      	movs	r3, #36	; 0x24
 80079e0:	18fb      	adds	r3, r7, r3
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	2b1f      	cmp	r3, #31
 80079e6:	d801      	bhi.n	80079ec <create_name+0xf4>
 80079e8:	2204      	movs	r2, #4
 80079ea:	e000      	b.n	80079ee <create_name+0xf6>
 80079ec:	2200      	movs	r2, #0
 80079ee:	2327      	movs	r3, #39	; 0x27
 80079f0:	18fb      	adds	r3, r7, r3
 80079f2:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079f4:	e016      	b.n	8007a24 <create_name+0x12c>
		w = lfn[di - 1];
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	4a94      	ldr	r2, [pc, #592]	; (8007c4c <create_name+0x354>)
 80079fa:	4694      	mov	ip, r2
 80079fc:	4463      	add	r3, ip
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	18d2      	adds	r2, r2, r3
 8007a04:	2124      	movs	r1, #36	; 0x24
 8007a06:	187b      	adds	r3, r7, r1
 8007a08:	8812      	ldrh	r2, [r2, #0]
 8007a0a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8007a0c:	000a      	movs	r2, r1
 8007a0e:	18bb      	adds	r3, r7, r2
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d003      	beq.n	8007a1e <create_name+0x126>
 8007a16:	18bb      	adds	r3, r7, r2
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a1c:	d106      	bne.n	8007a2c <create_name+0x134>
		di--;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e5      	bne.n	80079f6 <create_name+0xfe>
 8007a2a:	e000      	b.n	8007a2e <create_name+0x136>
		if (w != ' ' && w != '.') break;
 8007a2c:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	18d3      	adds	r3, r2, r3
 8007a36:	2200      	movs	r2, #0
 8007a38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <create_name+0x14c>
 8007a40:	2306      	movs	r3, #6
 8007a42:	e158      	b.n	8007cf6 <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3324      	adds	r3, #36	; 0x24
 8007a48:	220b      	movs	r2, #11
 8007a4a:	2120      	movs	r1, #32
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f7fe fb62 	bl	8006116 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007a52:	2300      	movs	r3, #0
 8007a54:	61bb      	str	r3, [r7, #24]
 8007a56:	e002      	b.n	8007a5e <create_name+0x166>
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	18d3      	adds	r3, r2, r3
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	d0f5      	beq.n	8007a58 <create_name+0x160>
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	18d3      	adds	r3, r2, r3
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	2b2e      	cmp	r3, #46	; 0x2e
 8007a78:	d0ee      	beq.n	8007a58 <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00a      	beq.n	8007a96 <create_name+0x19e>
 8007a80:	2227      	movs	r2, #39	; 0x27
 8007a82:	18bb      	adds	r3, r7, r2
 8007a84:	18ba      	adds	r2, r7, r2
 8007a86:	7812      	ldrb	r2, [r2, #0]
 8007a88:	2103      	movs	r1, #3
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007a8e:	e002      	b.n	8007a96 <create_name+0x19e>
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d009      	beq.n	8007ab0 <create_name+0x1b8>
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	4a6b      	ldr	r2, [pc, #428]	; (8007c4c <create_name+0x354>)
 8007aa0:	4694      	mov	ip, r2
 8007aa2:	4463      	add	r3, ip
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	18d3      	adds	r3, r2, r3
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	2b2e      	cmp	r3, #46	; 0x2e
 8007aae:	d1ef      	bne.n	8007a90 <create_name+0x198>

	i = b = 0; ni = 8;
 8007ab0:	2326      	movs	r3, #38	; 0x26
 8007ab2:	18fb      	adds	r3, r7, r3
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	2300      	movs	r3, #0
 8007aba:	623b      	str	r3, [r7, #32]
 8007abc:	2308      	movs	r3, #8
 8007abe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	61ba      	str	r2, [r7, #24]
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	18d2      	adds	r2, r2, r3
 8007acc:	2124      	movs	r1, #36	; 0x24
 8007ace:	187b      	adds	r3, r7, r1
 8007ad0:	8812      	ldrh	r2, [r2, #0]
 8007ad2:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 8007ad4:	000a      	movs	r2, r1
 8007ad6:	18bb      	adds	r3, r7, r2
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d100      	bne.n	8007ae0 <create_name+0x1e8>
 8007ade:	e0b1      	b.n	8007c44 <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007ae0:	18bb      	adds	r3, r7, r2
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d007      	beq.n	8007af8 <create_name+0x200>
 8007ae8:	18bb      	adds	r3, r7, r2
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	2b2e      	cmp	r3, #46	; 0x2e
 8007aee:	d10b      	bne.n	8007b08 <create_name+0x210>
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d007      	beq.n	8007b08 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 8007af8:	2227      	movs	r2, #39	; 0x27
 8007afa:	18bb      	adds	r3, r7, r2
 8007afc:	18ba      	adds	r2, r7, r2
 8007afe:	7812      	ldrb	r2, [r2, #0]
 8007b00:	2103      	movs	r1, #3
 8007b02:	430a      	orrs	r2, r1
 8007b04:	701a      	strb	r2, [r3, #0]
 8007b06:	e09c      	b.n	8007c42 <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007b08:	6a3a      	ldr	r2, [r7, #32]
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d203      	bcs.n	8007b18 <create_name+0x220>
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d127      	bne.n	8007b68 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	2b0b      	cmp	r3, #11
 8007b1c:	d107      	bne.n	8007b2e <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 8007b1e:	2227      	movs	r2, #39	; 0x27
 8007b20:	18bb      	adds	r3, r7, r2
 8007b22:	18ba      	adds	r2, r7, r2
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	2103      	movs	r1, #3
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	701a      	strb	r2, [r3, #0]
 8007b2c:	e095      	b.n	8007c5a <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d006      	beq.n	8007b44 <create_name+0x24c>
 8007b36:	2227      	movs	r2, #39	; 0x27
 8007b38:	18bb      	adds	r3, r7, r2
 8007b3a:	18ba      	adds	r2, r7, r2
 8007b3c:	7812      	ldrb	r2, [r2, #0]
 8007b3e:	2103      	movs	r1, #3
 8007b40:	430a      	orrs	r2, r1
 8007b42:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d900      	bls.n	8007b4e <create_name+0x256>
 8007b4c:	e084      	b.n	8007c58 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	61bb      	str	r3, [r7, #24]
 8007b52:	2308      	movs	r3, #8
 8007b54:	623b      	str	r3, [r7, #32]
 8007b56:	230b      	movs	r3, #11
 8007b58:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007b5a:	2226      	movs	r2, #38	; 0x26
 8007b5c:	18bb      	adds	r3, r7, r2
 8007b5e:	18ba      	adds	r2, r7, r2
 8007b60:	7812      	ldrb	r2, [r2, #0]
 8007b62:	0092      	lsls	r2, r2, #2
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	e06c      	b.n	8007c42 <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007b68:	2524      	movs	r5, #36	; 0x24
 8007b6a:	197b      	adds	r3, r7, r5
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8007b70:	d91a      	bls.n	8007ba8 <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007b72:	197c      	adds	r4, r7, r5
 8007b74:	197b      	adds	r3, r7, r5
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	2100      	movs	r1, #0
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	f001 fc1e 	bl	80093bc <ff_convert>
 8007b80:	0003      	movs	r3, r0
 8007b82:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007b84:	197b      	adds	r3, r7, r5
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d006      	beq.n	8007b9a <create_name+0x2a2>
 8007b8c:	197b      	adds	r3, r7, r5
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	3b80      	subs	r3, #128	; 0x80
 8007b92:	4a2f      	ldr	r2, [pc, #188]	; (8007c50 <create_name+0x358>)
 8007b94:	5cd2      	ldrb	r2, [r2, r3]
 8007b96:	197b      	adds	r3, r7, r5
 8007b98:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007b9a:	2227      	movs	r2, #39	; 0x27
 8007b9c:	18bb      	adds	r3, r7, r2
 8007b9e:	18ba      	adds	r2, r7, r2
 8007ba0:	7812      	ldrb	r2, [r2, #0]
 8007ba2:	2102      	movs	r1, #2
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007ba8:	2224      	movs	r2, #36	; 0x24
 8007baa:	18bb      	adds	r3, r7, r2
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d008      	beq.n	8007bc4 <create_name+0x2cc>
 8007bb2:	18bb      	adds	r3, r7, r2
 8007bb4:	881a      	ldrh	r2, [r3, #0]
 8007bb6:	4b27      	ldr	r3, [pc, #156]	; (8007c54 <create_name+0x35c>)
 8007bb8:	0011      	movs	r1, r2
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f7fe fae9 	bl	8006192 <chk_chr>
 8007bc0:	1e03      	subs	r3, r0, #0
 8007bc2:	d00b      	beq.n	8007bdc <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007bc4:	2324      	movs	r3, #36	; 0x24
 8007bc6:	18fb      	adds	r3, r7, r3
 8007bc8:	225f      	movs	r2, #95	; 0x5f
 8007bca:	801a      	strh	r2, [r3, #0]
 8007bcc:	2227      	movs	r2, #39	; 0x27
 8007bce:	18bb      	adds	r3, r7, r2
 8007bd0:	18ba      	adds	r2, r7, r2
 8007bd2:	7812      	ldrb	r2, [r2, #0]
 8007bd4:	2103      	movs	r1, #3
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	e025      	b.n	8007c28 <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007bdc:	2224      	movs	r2, #36	; 0x24
 8007bde:	18bb      	adds	r3, r7, r2
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	2b40      	cmp	r3, #64	; 0x40
 8007be4:	d90b      	bls.n	8007bfe <create_name+0x306>
 8007be6:	18bb      	adds	r3, r7, r2
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	2b5a      	cmp	r3, #90	; 0x5a
 8007bec:	d807      	bhi.n	8007bfe <create_name+0x306>
					b |= 2;
 8007bee:	2226      	movs	r2, #38	; 0x26
 8007bf0:	18bb      	adds	r3, r7, r2
 8007bf2:	18ba      	adds	r2, r7, r2
 8007bf4:	7812      	ldrb	r2, [r2, #0]
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	701a      	strb	r2, [r3, #0]
 8007bfc:	e014      	b.n	8007c28 <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007bfe:	2024      	movs	r0, #36	; 0x24
 8007c00:	183b      	adds	r3, r7, r0
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	2b60      	cmp	r3, #96	; 0x60
 8007c06:	d90f      	bls.n	8007c28 <create_name+0x330>
 8007c08:	183b      	adds	r3, r7, r0
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	2b7a      	cmp	r3, #122	; 0x7a
 8007c0e:	d80b      	bhi.n	8007c28 <create_name+0x330>
						b |= 1; w -= 0x20;
 8007c10:	2226      	movs	r2, #38	; 0x26
 8007c12:	18bb      	adds	r3, r7, r2
 8007c14:	18ba      	adds	r2, r7, r2
 8007c16:	7812      	ldrb	r2, [r2, #0]
 8007c18:	2101      	movs	r1, #1
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	701a      	strb	r2, [r3, #0]
 8007c1e:	183b      	adds	r3, r7, r0
 8007c20:	183a      	adds	r2, r7, r0
 8007c22:	8812      	ldrh	r2, [r2, #0]
 8007c24:	3a20      	subs	r2, #32
 8007c26:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	623a      	str	r2, [r7, #32]
 8007c2e:	2224      	movs	r2, #36	; 0x24
 8007c30:	18ba      	adds	r2, r7, r2
 8007c32:	8812      	ldrh	r2, [r2, #0]
 8007c34:	b2d0      	uxtb	r0, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	2124      	movs	r1, #36	; 0x24
 8007c3a:	18d3      	adds	r3, r2, r3
 8007c3c:	185b      	adds	r3, r3, r1
 8007c3e:	1c02      	adds	r2, r0, #0
 8007c40:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8007c42:	e73d      	b.n	8007ac0 <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 8007c44:	46c0      	nop			; (mov r8, r8)
 8007c46:	e008      	b.n	8007c5a <create_name+0x362>
 8007c48:	0800df28 	.word	0x0800df28
 8007c4c:	7fffffff 	.word	0x7fffffff
 8007c50:	0800e084 	.word	0x0800e084
 8007c54:	0800df34 	.word	0x0800df34
			if (si > di) break;			/* No extension */
 8007c58:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2224      	movs	r2, #36	; 0x24
 8007c5e:	5c9b      	ldrb	r3, [r3, r2]
 8007c60:	2be5      	cmp	r3, #229	; 0xe5
 8007c62:	d103      	bne.n	8007c6c <create_name+0x374>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2224      	movs	r2, #36	; 0x24
 8007c68:	2105      	movs	r1, #5
 8007c6a:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	2b08      	cmp	r3, #8
 8007c70:	d105      	bne.n	8007c7e <create_name+0x386>
 8007c72:	2226      	movs	r2, #38	; 0x26
 8007c74:	18bb      	adds	r3, r7, r2
 8007c76:	18ba      	adds	r2, r7, r2
 8007c78:	7812      	ldrb	r2, [r2, #0]
 8007c7a:	0092      	lsls	r2, r2, #2
 8007c7c:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007c7e:	2126      	movs	r1, #38	; 0x26
 8007c80:	187b      	adds	r3, r7, r1
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	220c      	movs	r2, #12
 8007c86:	4013      	ands	r3, r2
 8007c88:	2b0c      	cmp	r3, #12
 8007c8a:	d005      	beq.n	8007c98 <create_name+0x3a0>
 8007c8c:	187b      	adds	r3, r7, r1
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2203      	movs	r2, #3
 8007c92:	4013      	ands	r3, r2
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d106      	bne.n	8007ca6 <create_name+0x3ae>
 8007c98:	2227      	movs	r2, #39	; 0x27
 8007c9a:	18bb      	adds	r3, r7, r2
 8007c9c:	18ba      	adds	r2, r7, r2
 8007c9e:	7812      	ldrb	r2, [r2, #0]
 8007ca0:	2102      	movs	r1, #2
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007ca6:	2127      	movs	r1, #39	; 0x27
 8007ca8:	187b      	adds	r3, r7, r1
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2202      	movs	r2, #2
 8007cae:	4013      	ands	r3, r2
 8007cb0:	d11a      	bne.n	8007ce8 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007cb2:	2326      	movs	r3, #38	; 0x26
 8007cb4:	18fb      	adds	r3, r7, r3
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2203      	movs	r2, #3
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d105      	bne.n	8007ccc <create_name+0x3d4>
 8007cc0:	187b      	adds	r3, r7, r1
 8007cc2:	187a      	adds	r2, r7, r1
 8007cc4:	7812      	ldrb	r2, [r2, #0]
 8007cc6:	2110      	movs	r1, #16
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007ccc:	2326      	movs	r3, #38	; 0x26
 8007cce:	18fb      	adds	r3, r7, r3
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	220c      	movs	r2, #12
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d106      	bne.n	8007ce8 <create_name+0x3f0>
 8007cda:	2227      	movs	r2, #39	; 0x27
 8007cdc:	18bb      	adds	r3, r7, r2
 8007cde:	18ba      	adds	r2, r7, r2
 8007ce0:	7812      	ldrb	r2, [r2, #0]
 8007ce2:	2108      	movs	r1, #8
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2227      	movs	r2, #39	; 0x27
 8007cec:	18ba      	adds	r2, r7, r2
 8007cee:	212f      	movs	r1, #47	; 0x2f
 8007cf0:	7812      	ldrb	r2, [r2, #0]
 8007cf2:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 8007cf4:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	b00a      	add	sp, #40	; 0x28
 8007cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8007cfe:	46c0      	nop			; (mov r8, r8)

08007d00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007d00:	b5b0      	push	{r4, r5, r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007d14:	e002      	b.n	8007d1c <follow_path+0x1c>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b2f      	cmp	r3, #47	; 0x2f
 8007d22:	d0f8      	beq.n	8007d16 <follow_path+0x16>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b5c      	cmp	r3, #92	; 0x5c
 8007d2a:	d0f4      	beq.n	8007d16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b1f      	cmp	r3, #31
 8007d38:	d80d      	bhi.n	8007d56 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	222f      	movs	r2, #47	; 0x2f
 8007d3e:	2180      	movs	r1, #128	; 0x80
 8007d40:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 8007d42:	2317      	movs	r3, #23
 8007d44:	18fc      	adds	r4, r7, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2100      	movs	r1, #0
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	f7ff f819 	bl	8006d82 <dir_sdi>
 8007d50:	0003      	movs	r3, r0
 8007d52:	7023      	strb	r3, [r4, #0]
 8007d54:	e057      	b.n	8007e06 <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d56:	2517      	movs	r5, #23
 8007d58:	197c      	adds	r4, r7, r5
 8007d5a:	003a      	movs	r2, r7
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	0011      	movs	r1, r2
 8007d60:	0018      	movs	r0, r3
 8007d62:	f7ff fdc9 	bl	80078f8 <create_name>
 8007d66:	0003      	movs	r3, r0
 8007d68:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007d6a:	197b      	adds	r3, r7, r5
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d144      	bne.n	8007dfc <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007d72:	197c      	adds	r4, r7, r5
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	0018      	movs	r0, r3
 8007d78:	f7ff fbb3 	bl	80074e2 <dir_find>
 8007d7c:	0003      	movs	r3, r0
 8007d7e:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8007d80:	200b      	movs	r0, #11
 8007d82:	183b      	adds	r3, r7, r0
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	212f      	movs	r1, #47	; 0x2f
 8007d88:	5c52      	ldrb	r2, [r2, r1]
 8007d8a:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8007d8c:	197b      	adds	r3, r7, r5
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00c      	beq.n	8007dae <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007d94:	197b      	adds	r3, r7, r5
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d131      	bne.n	8007e00 <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007d9c:	183b      	adds	r3, r7, r0
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2204      	movs	r2, #4
 8007da2:	4013      	ands	r3, r2
 8007da4:	d12c      	bne.n	8007e00 <follow_path+0x100>
 8007da6:	197b      	adds	r3, r7, r5
 8007da8:	2205      	movs	r2, #5
 8007daa:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8007dac:	e028      	b.n	8007e00 <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007dae:	230b      	movs	r3, #11
 8007db0:	18fb      	adds	r3, r7, r3
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2204      	movs	r2, #4
 8007db6:	4013      	ands	r3, r2
 8007db8:	d124      	bne.n	8007e04 <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	799b      	ldrb	r3, [r3, #6]
 8007dbe:	001a      	movs	r2, r3
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	d104      	bne.n	8007dd0 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8007dc6:	2317      	movs	r3, #23
 8007dc8:	18fb      	adds	r3, r7, r3
 8007dca:	2205      	movs	r2, #5
 8007dcc:	701a      	strb	r2, [r3, #0]
 8007dce:	e01a      	b.n	8007e06 <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	3338      	adds	r3, #56	; 0x38
 8007dd4:	001c      	movs	r4, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	695a      	ldr	r2, [r3, #20]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	899b      	ldrh	r3, [r3, #12]
 8007dde:	0019      	movs	r1, r3
 8007de0:	0010      	movs	r0, r2
 8007de2:	f7f8 fa33 	bl	800024c <__aeabi_uidivmod>
 8007de6:	000b      	movs	r3, r1
 8007de8:	18e2      	adds	r2, r4, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	0011      	movs	r1, r2
 8007dee:	0018      	movs	r0, r3
 8007df0:	f7ff f987 	bl	8007102 <ld_clust>
 8007df4:	0002      	movs	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007dfa:	e7ac      	b.n	8007d56 <follow_path+0x56>
			if (res != FR_OK) break;
 8007dfc:	46c0      	nop			; (mov r8, r8)
 8007dfe:	e002      	b.n	8007e06 <follow_path+0x106>
				break;
 8007e00:	46c0      	nop			; (mov r8, r8)
 8007e02:	e000      	b.n	8007e06 <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e04:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 8007e06:	2317      	movs	r3, #23
 8007e08:	18fb      	adds	r3, r7, r3
 8007e0a:	781b      	ldrb	r3, [r3, #0]
}
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	b006      	add	sp, #24
 8007e12:	bdb0      	pop	{r4, r5, r7, pc}

08007e14 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	425b      	negs	r3, r3
 8007e20:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d031      	beq.n	8007e8e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	e002      	b.n	8007e38 <get_ldnumber+0x24>
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	3301      	adds	r3, #1
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b1f      	cmp	r3, #31
 8007e3e:	d903      	bls.n	8007e48 <get_ldnumber+0x34>
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b3a      	cmp	r3, #58	; 0x3a
 8007e46:	d1f4      	bne.n	8007e32 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b3a      	cmp	r3, #58	; 0x3a
 8007e4e:	d11c      	bne.n	8007e8a <get_ldnumber+0x76>
			tp = *path;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	60fa      	str	r2, [r7, #12]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	3b30      	subs	r3, #48	; 0x30
 8007e60:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b09      	cmp	r3, #9
 8007e66:	d80e      	bhi.n	8007e86 <get_ldnumber+0x72>
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d10a      	bne.n	8007e86 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d107      	bne.n	8007e86 <get_ldnumber+0x72>
					vol = (int)i;
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	e002      	b.n	8007e90 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007e8e:	693b      	ldr	r3, [r7, #16]
}
 8007e90:	0018      	movs	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	b006      	add	sp, #24
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	70da      	strb	r2, [r3, #3]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	4252      	negs	r2, r2
 8007eae:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	0011      	movs	r1, r2
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	f7fe fb36 	bl	8006528 <move_window>
 8007ebc:	1e03      	subs	r3, r0, #0
 8007ebe:	d001      	beq.n	8007ec4 <check_fs+0x2c>
 8007ec0:	2304      	movs	r3, #4
 8007ec2:	e037      	b.n	8007f34 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3338      	adds	r3, #56	; 0x38
 8007ec8:	33ff      	adds	r3, #255	; 0xff
 8007eca:	33ff      	adds	r3, #255	; 0xff
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f7fe f87f 	bl	8005fd0 <ld_word>
 8007ed2:	0003      	movs	r3, r0
 8007ed4:	001a      	movs	r2, r3
 8007ed6:	4b19      	ldr	r3, [pc, #100]	; (8007f3c <check_fs+0xa4>)
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d001      	beq.n	8007ee0 <check_fs+0x48>
 8007edc:	2303      	movs	r3, #3
 8007ede:	e029      	b.n	8007f34 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2238      	movs	r2, #56	; 0x38
 8007ee4:	5c9b      	ldrb	r3, [r3, r2]
 8007ee6:	2be9      	cmp	r3, #233	; 0xe9
 8007ee8:	d009      	beq.n	8007efe <check_fs+0x66>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2238      	movs	r2, #56	; 0x38
 8007eee:	5c9b      	ldrb	r3, [r3, r2]
 8007ef0:	2beb      	cmp	r3, #235	; 0xeb
 8007ef2:	d11e      	bne.n	8007f32 <check_fs+0x9a>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	223a      	movs	r2, #58	; 0x3a
 8007ef8:	5c9b      	ldrb	r3, [r3, r2]
 8007efa:	2b90      	cmp	r3, #144	; 0x90
 8007efc:	d119      	bne.n	8007f32 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3338      	adds	r3, #56	; 0x38
 8007f02:	3336      	adds	r3, #54	; 0x36
 8007f04:	0018      	movs	r0, r3
 8007f06:	f7fe f87e 	bl	8006006 <ld_dword>
 8007f0a:	0003      	movs	r3, r0
 8007f0c:	021b      	lsls	r3, r3, #8
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	4a0b      	ldr	r2, [pc, #44]	; (8007f40 <check_fs+0xa8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d101      	bne.n	8007f1a <check_fs+0x82>
 8007f16:	2300      	movs	r3, #0
 8007f18:	e00c      	b.n	8007f34 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3338      	adds	r3, #56	; 0x38
 8007f1e:	3352      	adds	r3, #82	; 0x52
 8007f20:	0018      	movs	r0, r3
 8007f22:	f7fe f870 	bl	8006006 <ld_dword>
 8007f26:	0003      	movs	r3, r0
 8007f28:	4a06      	ldr	r2, [pc, #24]	; (8007f44 <check_fs+0xac>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d101      	bne.n	8007f32 <check_fs+0x9a>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e000      	b.n	8007f34 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007f32:	2302      	movs	r3, #2
}
 8007f34:	0018      	movs	r0, r3
 8007f36:	46bd      	mov	sp, r7
 8007f38:	b002      	add	sp, #8
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	0000aa55 	.word	0x0000aa55
 8007f40:	00544146 	.word	0x00544146
 8007f44:	33544146 	.word	0x33544146

08007f48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007f48:	b5b0      	push	{r4, r5, r7, lr}
 8007f4a:	b096      	sub	sp, #88	; 0x58
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	1dfb      	adds	r3, r7, #7
 8007f54:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	0018      	movs	r0, r3
 8007f60:	f7ff ff58 	bl	8007e14 <get_ldnumber>
 8007f64:	0003      	movs	r3, r0
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	da01      	bge.n	8007f72 <find_volume+0x2a>
 8007f6e:	230b      	movs	r3, #11
 8007f70:	e283      	b.n	800847a <find_volume+0x532>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007f72:	4bc2      	ldr	r3, [pc, #776]	; (800827c <find_volume+0x334>)
 8007f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f76:	0092      	lsls	r2, r2, #2
 8007f78:	58d3      	ldr	r3, [r2, r3]
 8007f7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <find_volume+0x3e>
 8007f82:	230c      	movs	r3, #12
 8007f84:	e279      	b.n	800847a <find_volume+0x532>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007f8c:	1dfb      	adds	r3, r7, #7
 8007f8e:	1dfa      	adds	r2, r7, #7
 8007f90:	7812      	ldrb	r2, [r2, #0]
 8007f92:	2101      	movs	r1, #1
 8007f94:	438a      	bics	r2, r1
 8007f96:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01b      	beq.n	8007fd8 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	2537      	movs	r5, #55	; 0x37
 8007fa6:	197c      	adds	r4, r7, r5
 8007fa8:	0018      	movs	r0, r3
 8007faa:	f7fd ff47 	bl	8005e3c <disk_status>
 8007fae:	0003      	movs	r3, r0
 8007fb0:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007fb2:	0029      	movs	r1, r5
 8007fb4:	187b      	adds	r3, r7, r1
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	4013      	ands	r3, r2
 8007fbc:	d10c      	bne.n	8007fd8 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007fbe:	1dfb      	adds	r3, r7, #7
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d006      	beq.n	8007fd4 <find_volume+0x8c>
 8007fc6:	187b      	adds	r3, r7, r1
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2204      	movs	r2, #4
 8007fcc:	4013      	ands	r3, r2
 8007fce:	d001      	beq.n	8007fd4 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8007fd0:	230a      	movs	r3, #10
 8007fd2:	e252      	b.n	800847a <find_volume+0x532>
			}
			return FR_OK;				/* The file system object is valid */
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e250      	b.n	800847a <find_volume+0x532>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	2200      	movs	r2, #0
 8007fdc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe8:	785b      	ldrb	r3, [r3, #1]
 8007fea:	2537      	movs	r5, #55	; 0x37
 8007fec:	197c      	adds	r4, r7, r5
 8007fee:	0018      	movs	r0, r3
 8007ff0:	f7fd ff46 	bl	8005e80 <disk_initialize>
 8007ff4:	0003      	movs	r3, r0
 8007ff6:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007ff8:	197b      	adds	r3, r7, r5
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	4013      	ands	r3, r2
 8008000:	d001      	beq.n	8008006 <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008002:	2303      	movs	r3, #3
 8008004:	e239      	b.n	800847a <find_volume+0x532>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008006:	1dfb      	adds	r3, r7, #7
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d007      	beq.n	800801e <find_volume+0xd6>
 800800e:	2337      	movs	r3, #55	; 0x37
 8008010:	18fb      	adds	r3, r7, r3
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2204      	movs	r2, #4
 8008016:	4013      	ands	r3, r2
 8008018:	d001      	beq.n	800801e <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800801a:	230a      	movs	r3, #10
 800801c:	e22d      	b.n	800847a <find_volume+0x532>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	7858      	ldrb	r0, [r3, #1]
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	330c      	adds	r3, #12
 8008026:	001a      	movs	r2, r3
 8008028:	2102      	movs	r1, #2
 800802a:	f7fd ffa9 	bl	8005f80 <disk_ioctl>
 800802e:	1e03      	subs	r3, r0, #0
 8008030:	d001      	beq.n	8008036 <find_volume+0xee>
 8008032:	2301      	movs	r3, #1
 8008034:	e221      	b.n	800847a <find_volume+0x532>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008038:	899a      	ldrh	r2, [r3, #12]
 800803a:	2380      	movs	r3, #128	; 0x80
 800803c:	015b      	lsls	r3, r3, #5
 800803e:	429a      	cmp	r2, r3
 8008040:	d80d      	bhi.n	800805e <find_volume+0x116>
 8008042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008044:	899a      	ldrh	r2, [r3, #12]
 8008046:	2380      	movs	r3, #128	; 0x80
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	429a      	cmp	r2, r3
 800804c:	d307      	bcc.n	800805e <find_volume+0x116>
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	899b      	ldrh	r3, [r3, #12]
 8008052:	001a      	movs	r2, r3
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	899b      	ldrh	r3, [r3, #12]
 8008058:	3b01      	subs	r3, #1
 800805a:	4013      	ands	r3, r2
 800805c:	d001      	beq.n	8008062 <find_volume+0x11a>
 800805e:	2301      	movs	r3, #1
 8008060:	e20b      	b.n	800847a <find_volume+0x532>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008066:	2557      	movs	r5, #87	; 0x57
 8008068:	197c      	adds	r4, r7, r5
 800806a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	0011      	movs	r1, r2
 8008070:	0018      	movs	r0, r3
 8008072:	f7ff ff11 	bl	8007e98 <check_fs>
 8008076:	0003      	movs	r3, r0
 8008078:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800807a:	197b      	adds	r3, r7, r5
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	2b02      	cmp	r3, #2
 8008080:	d14b      	bne.n	800811a <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008082:	2300      	movs	r3, #0
 8008084:	643b      	str	r3, [r7, #64]	; 0x40
 8008086:	e01d      	b.n	80080c4 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	3338      	adds	r3, #56	; 0x38
 800808c:	001a      	movs	r2, r3
 800808e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008090:	011b      	lsls	r3, r3, #4
 8008092:	33bf      	adds	r3, #191	; 0xbf
 8008094:	33ff      	adds	r3, #255	; 0xff
 8008096:	18d3      	adds	r3, r2, r3
 8008098:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	3304      	adds	r3, #4
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d006      	beq.n	80080b2 <find_volume+0x16a>
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	3308      	adds	r3, #8
 80080a8:	0018      	movs	r0, r3
 80080aa:	f7fd ffac 	bl	8006006 <ld_dword>
 80080ae:	0003      	movs	r3, r0
 80080b0:	e000      	b.n	80080b4 <find_volume+0x16c>
 80080b2:	2300      	movs	r3, #0
 80080b4:	2214      	movs	r2, #20
 80080b6:	18ba      	adds	r2, r7, r2
 80080b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080ba:	0089      	lsls	r1, r1, #2
 80080bc:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80080be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080c0:	3301      	adds	r3, #1
 80080c2:	643b      	str	r3, [r7, #64]	; 0x40
 80080c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d9de      	bls.n	8008088 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80080ca:	2300      	movs	r3, #0
 80080cc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80080ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <find_volume+0x192>
 80080d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d6:	3b01      	subs	r3, #1
 80080d8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80080da:	2314      	movs	r3, #20
 80080dc:	18fb      	adds	r3, r7, r3
 80080de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080e0:	0092      	lsls	r2, r2, #2
 80080e2:	58d3      	ldr	r3, [r2, r3]
 80080e4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80080e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d008      	beq.n	80080fe <find_volume+0x1b6>
 80080ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	0011      	movs	r1, r2
 80080f2:	0018      	movs	r0, r3
 80080f4:	f7ff fed0 	bl	8007e98 <check_fs>
 80080f8:	0003      	movs	r3, r0
 80080fa:	001a      	movs	r2, r3
 80080fc:	e000      	b.n	8008100 <find_volume+0x1b8>
 80080fe:	2203      	movs	r2, #3
 8008100:	2157      	movs	r1, #87	; 0x57
 8008102:	187b      	adds	r3, r7, r1
 8008104:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008106:	187b      	adds	r3, r7, r1
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d905      	bls.n	800811a <find_volume+0x1d2>
 800810e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008110:	3301      	adds	r3, #1
 8008112:	643b      	str	r3, [r7, #64]	; 0x40
 8008114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008116:	2b03      	cmp	r3, #3
 8008118:	d9df      	bls.n	80080da <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800811a:	2357      	movs	r3, #87	; 0x57
 800811c:	18fb      	adds	r3, r7, r3
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b04      	cmp	r3, #4
 8008122:	d101      	bne.n	8008128 <find_volume+0x1e0>
 8008124:	2301      	movs	r3, #1
 8008126:	e1a8      	b.n	800847a <find_volume+0x532>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008128:	2357      	movs	r3, #87	; 0x57
 800812a:	18fb      	adds	r3, r7, r3
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d901      	bls.n	8008136 <find_volume+0x1ee>
 8008132:	230d      	movs	r3, #13
 8008134:	e1a1      	b.n	800847a <find_volume+0x532>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	3338      	adds	r3, #56	; 0x38
 800813a:	330b      	adds	r3, #11
 800813c:	0018      	movs	r0, r3
 800813e:	f7fd ff47 	bl	8005fd0 <ld_word>
 8008142:	0003      	movs	r3, r0
 8008144:	001a      	movs	r2, r3
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	899b      	ldrh	r3, [r3, #12]
 800814a:	429a      	cmp	r2, r3
 800814c:	d001      	beq.n	8008152 <find_volume+0x20a>
 800814e:	230d      	movs	r3, #13
 8008150:	e193      	b.n	800847a <find_volume+0x532>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008154:	3338      	adds	r3, #56	; 0x38
 8008156:	3316      	adds	r3, #22
 8008158:	0018      	movs	r0, r3
 800815a:	f7fd ff39 	bl	8005fd0 <ld_word>
 800815e:	0003      	movs	r3, r0
 8008160:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d107      	bne.n	8008178 <find_volume+0x230>
 8008168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816a:	3338      	adds	r3, #56	; 0x38
 800816c:	3324      	adds	r3, #36	; 0x24
 800816e:	0018      	movs	r0, r3
 8008170:	f7fd ff49 	bl	8006006 <ld_dword>
 8008174:	0003      	movs	r3, r0
 8008176:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800817c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800817e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008180:	2248      	movs	r2, #72	; 0x48
 8008182:	5c9a      	ldrb	r2, [r3, r2]
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	789b      	ldrb	r3, [r3, #2]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d005      	beq.n	800819c <find_volume+0x254>
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	789b      	ldrb	r3, [r3, #2]
 8008194:	2b02      	cmp	r3, #2
 8008196:	d001      	beq.n	800819c <find_volume+0x254>
 8008198:	230d      	movs	r3, #13
 800819a:	e16e      	b.n	800847a <find_volume+0x532>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	789b      	ldrb	r3, [r3, #2]
 80081a0:	001a      	movs	r2, r3
 80081a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a4:	4353      	muls	r3, r2
 80081a6:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	2245      	movs	r2, #69	; 0x45
 80081ac:	5c9b      	ldrb	r3, [r3, r2]
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	895b      	ldrh	r3, [r3, #10]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d007      	beq.n	80081cc <find_volume+0x284>
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	895b      	ldrh	r3, [r3, #10]
 80081c0:	001a      	movs	r2, r3
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	895b      	ldrh	r3, [r3, #10]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	4013      	ands	r3, r2
 80081ca:	d001      	beq.n	80081d0 <find_volume+0x288>
 80081cc:	230d      	movs	r3, #13
 80081ce:	e154      	b.n	800847a <find_volume+0x532>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	3338      	adds	r3, #56	; 0x38
 80081d4:	3311      	adds	r3, #17
 80081d6:	0018      	movs	r0, r3
 80081d8:	f7fd fefa 	bl	8005fd0 <ld_word>
 80081dc:	0003      	movs	r3, r0
 80081de:	001a      	movs	r2, r3
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80081e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e6:	891a      	ldrh	r2, [r3, #8]
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	899b      	ldrh	r3, [r3, #12]
 80081ec:	095b      	lsrs	r3, r3, #5
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	0019      	movs	r1, r3
 80081f2:	0010      	movs	r0, r2
 80081f4:	f7f8 f82a 	bl	800024c <__aeabi_uidivmod>
 80081f8:	000b      	movs	r3, r1
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <find_volume+0x2bc>
 8008200:	230d      	movs	r3, #13
 8008202:	e13a      	b.n	800847a <find_volume+0x532>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	3338      	adds	r3, #56	; 0x38
 8008208:	3313      	adds	r3, #19
 800820a:	0018      	movs	r0, r3
 800820c:	f7fd fee0 	bl	8005fd0 <ld_word>
 8008210:	0003      	movs	r3, r0
 8008212:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008216:	2b00      	cmp	r3, #0
 8008218:	d107      	bne.n	800822a <find_volume+0x2e2>
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	3338      	adds	r3, #56	; 0x38
 800821e:	3320      	adds	r3, #32
 8008220:	0018      	movs	r0, r3
 8008222:	f7fd fef0 	bl	8006006 <ld_dword>
 8008226:	0003      	movs	r3, r0
 8008228:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	3338      	adds	r3, #56	; 0x38
 800822e:	330e      	adds	r3, #14
 8008230:	252e      	movs	r5, #46	; 0x2e
 8008232:	197c      	adds	r4, r7, r5
 8008234:	0018      	movs	r0, r3
 8008236:	f7fd fecb 	bl	8005fd0 <ld_word>
 800823a:	0003      	movs	r3, r0
 800823c:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800823e:	197b      	adds	r3, r7, r5
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <find_volume+0x302>
 8008246:	230d      	movs	r3, #13
 8008248:	e117      	b.n	800847a <find_volume+0x532>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800824a:	232e      	movs	r3, #46	; 0x2e
 800824c:	18fb      	adds	r3, r7, r3
 800824e:	881a      	ldrh	r2, [r3, #0]
 8008250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008252:	18d4      	adds	r4, r2, r3
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	891a      	ldrh	r2, [r3, #8]
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	899b      	ldrh	r3, [r3, #12]
 800825c:	095b      	lsrs	r3, r3, #5
 800825e:	b29b      	uxth	r3, r3
 8008260:	0019      	movs	r1, r3
 8008262:	0010      	movs	r0, r2
 8008264:	f7f7 ff6c 	bl	8000140 <__udivsi3>
 8008268:	0003      	movs	r3, r0
 800826a:	b29b      	uxth	r3, r3
 800826c:	18e3      	adds	r3, r4, r3
 800826e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	429a      	cmp	r2, r3
 8008276:	d203      	bcs.n	8008280 <find_volume+0x338>
 8008278:	230d      	movs	r3, #13
 800827a:	e0fe      	b.n	800847a <find_volume+0x532>
 800827c:	200002f4 	.word	0x200002f4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008280:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	1ad2      	subs	r2, r2, r3
 8008286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008288:	895b      	ldrh	r3, [r3, #10]
 800828a:	0019      	movs	r1, r3
 800828c:	0010      	movs	r0, r2
 800828e:	f7f7 ff57 	bl	8000140 <__udivsi3>
 8008292:	0003      	movs	r3, r0
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <find_volume+0x358>
 800829c:	230d      	movs	r3, #13
 800829e:	e0ec      	b.n	800847a <find_volume+0x532>
		fmt = FS_FAT32;
 80082a0:	2157      	movs	r1, #87	; 0x57
 80082a2:	187b      	adds	r3, r7, r1
 80082a4:	2203      	movs	r2, #3
 80082a6:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	4a76      	ldr	r2, [pc, #472]	; (8008484 <find_volume+0x53c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d802      	bhi.n	80082b6 <find_volume+0x36e>
 80082b0:	187b      	adds	r3, r7, r1
 80082b2:	2202      	movs	r2, #2
 80082b4:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	4a73      	ldr	r2, [pc, #460]	; (8008488 <find_volume+0x540>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d803      	bhi.n	80082c6 <find_volume+0x37e>
 80082be:	2357      	movs	r3, #87	; 0x57
 80082c0:	18fb      	adds	r3, r7, r3
 80082c2:	2201      	movs	r2, #1
 80082c4:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	1c9a      	adds	r2, r3, #2
 80082ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082cc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082d2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80082d4:	232e      	movs	r3, #46	; 0x2e
 80082d6:	18fb      	adds	r3, r7, r3
 80082d8:	881a      	ldrh	r2, [r3, #0]
 80082da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082dc:	18d2      	adds	r2, r2, r3
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80082e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	18d2      	adds	r2, r2, r3
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80082ec:	2357      	movs	r3, #87	; 0x57
 80082ee:	18fb      	adds	r3, r7, r3
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d11d      	bne.n	8008332 <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	3338      	adds	r3, #56	; 0x38
 80082fa:	332a      	adds	r3, #42	; 0x2a
 80082fc:	0018      	movs	r0, r3
 80082fe:	f7fd fe67 	bl	8005fd0 <ld_word>
 8008302:	1e03      	subs	r3, r0, #0
 8008304:	d001      	beq.n	800830a <find_volume+0x3c2>
 8008306:	230d      	movs	r3, #13
 8008308:	e0b7      	b.n	800847a <find_volume+0x532>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	891b      	ldrh	r3, [r3, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <find_volume+0x3ce>
 8008312:	230d      	movs	r3, #13
 8008314:	e0b1      	b.n	800847a <find_volume+0x532>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	3338      	adds	r3, #56	; 0x38
 800831a:	332c      	adds	r3, #44	; 0x2c
 800831c:	0018      	movs	r0, r3
 800831e:	f7fd fe72 	bl	8006006 <ld_dword>
 8008322:	0002      	movs	r2, r0
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	647b      	str	r3, [r7, #68]	; 0x44
 8008330:	e020      	b.n	8008374 <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008334:	891b      	ldrh	r3, [r3, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <find_volume+0x3f6>
 800833a:	230d      	movs	r3, #13
 800833c:	e09d      	b.n	800847a <find_volume+0x532>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008344:	18d2      	adds	r2, r2, r3
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800834a:	2357      	movs	r3, #87	; 0x57
 800834c:	18fb      	adds	r3, r7, r3
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b02      	cmp	r3, #2
 8008352:	d103      	bne.n	800835c <find_volume+0x414>
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	005b      	lsls	r3, r3, #1
 800835a:	e00a      	b.n	8008372 <find_volume+0x42a>
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	69da      	ldr	r2, [r3, #28]
 8008360:	0013      	movs	r3, r2
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	189b      	adds	r3, r3, r2
 8008366:	085a      	lsrs	r2, r3, #1
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	2101      	movs	r1, #1
 800836e:	400b      	ands	r3, r1
 8008370:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008372:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008376:	6a1c      	ldr	r4, [r3, #32]
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	899b      	ldrh	r3, [r3, #12]
 800837c:	001a      	movs	r2, r3
 800837e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008380:	18d3      	adds	r3, r2, r3
 8008382:	1e5a      	subs	r2, r3, #1
 8008384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008386:	899b      	ldrh	r3, [r3, #12]
 8008388:	0019      	movs	r1, r3
 800838a:	0010      	movs	r0, r2
 800838c:	f7f7 fed8 	bl	8000140 <__udivsi3>
 8008390:	0003      	movs	r3, r0
 8008392:	429c      	cmp	r4, r3
 8008394:	d201      	bcs.n	800839a <find_volume+0x452>
 8008396:	230d      	movs	r3, #13
 8008398:	e06f      	b.n	800847a <find_volume+0x532>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	2201      	movs	r2, #1
 800839e:	4252      	negs	r2, r2
 80083a0:	619a      	str	r2, [r3, #24]
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	2280      	movs	r2, #128	; 0x80
 80083ae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80083b0:	2357      	movs	r3, #87	; 0x57
 80083b2:	18fb      	adds	r3, r7, r3
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d148      	bne.n	800844c <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	3338      	adds	r3, #56	; 0x38
 80083be:	3330      	adds	r3, #48	; 0x30
 80083c0:	0018      	movs	r0, r3
 80083c2:	f7fd fe05 	bl	8005fd0 <ld_word>
 80083c6:	0003      	movs	r3, r0
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d13f      	bne.n	800844c <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 80083cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	0011      	movs	r1, r2
 80083d4:	0018      	movs	r0, r3
 80083d6:	f7fe f8a7 	bl	8006528 <move_window>
 80083da:	1e03      	subs	r3, r0, #0
 80083dc:	d136      	bne.n	800844c <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	2200      	movs	r2, #0
 80083e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e6:	3338      	adds	r3, #56	; 0x38
 80083e8:	33ff      	adds	r3, #255	; 0xff
 80083ea:	33ff      	adds	r3, #255	; 0xff
 80083ec:	0018      	movs	r0, r3
 80083ee:	f7fd fdef 	bl	8005fd0 <ld_word>
 80083f2:	0003      	movs	r3, r0
 80083f4:	001a      	movs	r2, r3
 80083f6:	4b25      	ldr	r3, [pc, #148]	; (800848c <find_volume+0x544>)
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d127      	bne.n	800844c <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80083fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fe:	3338      	adds	r3, #56	; 0x38
 8008400:	0018      	movs	r0, r3
 8008402:	f7fd fe00 	bl	8006006 <ld_dword>
 8008406:	0003      	movs	r3, r0
 8008408:	4a21      	ldr	r2, [pc, #132]	; (8008490 <find_volume+0x548>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d11e      	bne.n	800844c <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008410:	3338      	adds	r3, #56	; 0x38
 8008412:	33e5      	adds	r3, #229	; 0xe5
 8008414:	33ff      	adds	r3, #255	; 0xff
 8008416:	0018      	movs	r0, r3
 8008418:	f7fd fdf5 	bl	8006006 <ld_dword>
 800841c:	0003      	movs	r3, r0
 800841e:	4a1d      	ldr	r2, [pc, #116]	; (8008494 <find_volume+0x54c>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d113      	bne.n	800844c <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	3338      	adds	r3, #56	; 0x38
 8008428:	33e9      	adds	r3, #233	; 0xe9
 800842a:	33ff      	adds	r3, #255	; 0xff
 800842c:	0018      	movs	r0, r3
 800842e:	f7fd fdea 	bl	8006006 <ld_dword>
 8008432:	0002      	movs	r2, r0
 8008434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008436:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	3338      	adds	r3, #56	; 0x38
 800843c:	33ed      	adds	r3, #237	; 0xed
 800843e:	33ff      	adds	r3, #255	; 0xff
 8008440:	0018      	movs	r0, r3
 8008442:	f7fd fde0 	bl	8006006 <ld_dword>
 8008446:	0002      	movs	r2, r0
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	2257      	movs	r2, #87	; 0x57
 8008450:	18ba      	adds	r2, r7, r2
 8008452:	7812      	ldrb	r2, [r2, #0]
 8008454:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008456:	4b10      	ldr	r3, [pc, #64]	; (8008498 <find_volume+0x550>)
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	3301      	adds	r3, #1
 800845c:	b29a      	uxth	r2, r3
 800845e:	4b0e      	ldr	r3, [pc, #56]	; (8008498 <find_volume+0x550>)
 8008460:	801a      	strh	r2, [r3, #0]
 8008462:	4b0d      	ldr	r3, [pc, #52]	; (8008498 <find_volume+0x550>)
 8008464:	881a      	ldrh	r2, [r3, #0]
 8008466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008468:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	4a0b      	ldr	r2, [pc, #44]	; (800849c <find_volume+0x554>)
 800846e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	0018      	movs	r0, r3
 8008474:	f7fd fff0 	bl	8006458 <clear_lock>
#endif
	return FR_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	0018      	movs	r0, r3
 800847c:	46bd      	mov	sp, r7
 800847e:	b016      	add	sp, #88	; 0x58
 8008480:	bdb0      	pop	{r4, r5, r7, pc}
 8008482:	46c0      	nop			; (mov r8, r8)
 8008484:	0000fff5 	.word	0x0000fff5
 8008488:	00000ff5 	.word	0x00000ff5
 800848c:	0000aa55 	.word	0x0000aa55
 8008490:	41615252 	.word	0x41615252
 8008494:	61417272 	.word	0x61417272
 8008498:	200002f8 	.word	0x200002f8
 800849c:	2000031c 	.word	0x2000031c

080084a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80084a0:	b590      	push	{r4, r7, lr}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80084aa:	240f      	movs	r4, #15
 80084ac:	193b      	adds	r3, r7, r4
 80084ae:	2209      	movs	r2, #9
 80084b0:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01d      	beq.n	80084f4 <validate+0x54>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d019      	beq.n	80084f4 <validate+0x54>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d014      	beq.n	80084f4 <validate+0x54>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	889a      	ldrh	r2, [r3, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	88db      	ldrh	r3, [r3, #6]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d10d      	bne.n	80084f4 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	785b      	ldrb	r3, [r3, #1]
 80084de:	0018      	movs	r0, r3
 80084e0:	f7fd fcac 	bl	8005e3c <disk_status>
 80084e4:	0003      	movs	r3, r0
 80084e6:	001a      	movs	r2, r3
 80084e8:	2301      	movs	r3, #1
 80084ea:	4013      	ands	r3, r2
 80084ec:	d102      	bne.n	80084f4 <validate+0x54>
			res = FR_OK;
 80084ee:	193b      	adds	r3, r7, r4
 80084f0:	2200      	movs	r2, #0
 80084f2:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80084f4:	230f      	movs	r3, #15
 80084f6:	18fb      	adds	r3, r7, r3
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <validate+0x64>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	e000      	b.n	8008506 <validate+0x66>
 8008504:	2200      	movs	r2, #0
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	601a      	str	r2, [r3, #0]
	return res;
 800850a:	230f      	movs	r3, #15
 800850c:	18fb      	adds	r3, r7, r3
 800850e:	781b      	ldrb	r3, [r3, #0]
}
 8008510:	0018      	movs	r0, r3
 8008512:	46bd      	mov	sp, r7
 8008514:	b005      	add	sp, #20
 8008516:	bd90      	pop	{r4, r7, pc}

08008518 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008518:	b5b0      	push	{r4, r5, r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	1dfb      	adds	r3, r7, #7
 8008524:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800852a:	2310      	movs	r3, #16
 800852c:	18fb      	adds	r3, r7, r3
 800852e:	0018      	movs	r0, r3
 8008530:	f7ff fc70 	bl	8007e14 <get_ldnumber>
 8008534:	0003      	movs	r3, r0
 8008536:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2b00      	cmp	r3, #0
 800853c:	da01      	bge.n	8008542 <f_mount+0x2a>
 800853e:	230b      	movs	r3, #11
 8008540:	e030      	b.n	80085a4 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008542:	4b1a      	ldr	r3, [pc, #104]	; (80085ac <f_mount+0x94>)
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	0092      	lsls	r2, r2, #2
 8008548:	58d3      	ldr	r3, [r2, r3]
 800854a:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d006      	beq.n	8008560 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	0018      	movs	r0, r3
 8008556:	f7fd ff7f 	bl	8006458 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	2200      	movs	r2, #0
 800855e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800856c:	68f9      	ldr	r1, [r7, #12]
 800856e:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <f_mount+0x94>)
 8008570:	69fa      	ldr	r2, [r7, #28]
 8008572:	0092      	lsls	r2, r2, #2
 8008574:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <f_mount+0x6c>
 800857c:	1dfb      	adds	r3, r7, #7
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d001      	beq.n	8008588 <f_mount+0x70>
 8008584:	2300      	movs	r3, #0
 8008586:	e00d      	b.n	80085a4 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008588:	2517      	movs	r5, #23
 800858a:	197c      	adds	r4, r7, r5
 800858c:	230c      	movs	r3, #12
 800858e:	18f9      	adds	r1, r7, r3
 8008590:	2308      	movs	r3, #8
 8008592:	18fb      	adds	r3, r7, r3
 8008594:	2200      	movs	r2, #0
 8008596:	0018      	movs	r0, r3
 8008598:	f7ff fcd6 	bl	8007f48 <find_volume>
 800859c:	0003      	movs	r3, r0
 800859e:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 80085a0:	197b      	adds	r3, r7, r5
 80085a2:	781b      	ldrb	r3, [r3, #0]
}
 80085a4:	0018      	movs	r0, r3
 80085a6:	46bd      	mov	sp, r7
 80085a8:	b008      	add	sp, #32
 80085aa:	bdb0      	pop	{r4, r5, r7, pc}
 80085ac:	200002f4 	.word	0x200002f4

080085b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80085b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085b2:	b09b      	sub	sp, #108	; 0x6c
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	1dfb      	adds	r3, r7, #7
 80085bc:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <f_open+0x18>
 80085c4:	2309      	movs	r3, #9
 80085c6:	e1f4      	b.n	80089b2 <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80085c8:	1dfb      	adds	r3, r7, #7
 80085ca:	1dfa      	adds	r2, r7, #7
 80085cc:	7812      	ldrb	r2, [r2, #0]
 80085ce:	213f      	movs	r1, #63	; 0x3f
 80085d0:	400a      	ands	r2, r1
 80085d2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80085d4:	2567      	movs	r5, #103	; 0x67
 80085d6:	197c      	adds	r4, r7, r5
 80085d8:	1dfb      	adds	r3, r7, #7
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	2314      	movs	r3, #20
 80085de:	18f9      	adds	r1, r7, r3
 80085e0:	2308      	movs	r3, #8
 80085e2:	18fb      	adds	r3, r7, r3
 80085e4:	0018      	movs	r0, r3
 80085e6:	f7ff fcaf 	bl	8007f48 <find_volume>
 80085ea:	0003      	movs	r3, r0
 80085ec:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80085ee:	197b      	adds	r3, r7, r5
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d000      	beq.n	80085f8 <f_open+0x48>
 80085f6:	e1d1      	b.n	800899c <f_open+0x3ec>
		dj.obj.fs = fs;
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	2618      	movs	r6, #24
 80085fc:	19bb      	adds	r3, r7, r6
 80085fe:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	197c      	adds	r4, r7, r5
 8008604:	19bb      	adds	r3, r7, r6
 8008606:	0011      	movs	r1, r2
 8008608:	0018      	movs	r0, r3
 800860a:	f7ff fb79 	bl	8007d00 <follow_path>
 800860e:	0003      	movs	r3, r0
 8008610:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008612:	0029      	movs	r1, r5
 8008614:	197b      	adds	r3, r7, r5
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d11b      	bne.n	8008654 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800861c:	19bb      	adds	r3, r7, r6
 800861e:	222f      	movs	r2, #47	; 0x2f
 8008620:	5c9b      	ldrb	r3, [r3, r2]
 8008622:	b25b      	sxtb	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	da03      	bge.n	8008630 <f_open+0x80>
				res = FR_INVALID_NAME;
 8008628:	187b      	adds	r3, r7, r1
 800862a:	2206      	movs	r2, #6
 800862c:	701a      	strb	r2, [r3, #0]
 800862e:	e011      	b.n	8008654 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008630:	1dfb      	adds	r3, r7, #7
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2201      	movs	r2, #1
 8008636:	4393      	bics	r3, r2
 8008638:	1e5a      	subs	r2, r3, #1
 800863a:	4193      	sbcs	r3, r2
 800863c:	b2db      	uxtb	r3, r3
 800863e:	001a      	movs	r2, r3
 8008640:	2367      	movs	r3, #103	; 0x67
 8008642:	18fc      	adds	r4, r7, r3
 8008644:	2318      	movs	r3, #24
 8008646:	18fb      	adds	r3, r7, r3
 8008648:	0011      	movs	r1, r2
 800864a:	0018      	movs	r0, r3
 800864c:	f7fd fdba 	bl	80061c4 <chk_lock>
 8008650:	0003      	movs	r3, r0
 8008652:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008654:	1dfb      	adds	r3, r7, #7
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	221c      	movs	r2, #28
 800865a:	4013      	ands	r3, r2
 800865c:	d100      	bne.n	8008660 <f_open+0xb0>
 800865e:	e096      	b.n	800878e <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 8008660:	2267      	movs	r2, #103	; 0x67
 8008662:	18bb      	adds	r3, r7, r2
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d01a      	beq.n	80086a0 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800866a:	18bb      	adds	r3, r7, r2
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b04      	cmp	r3, #4
 8008670:	d10f      	bne.n	8008692 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008672:	f7fd fdff 	bl	8006274 <enq_lock>
 8008676:	1e03      	subs	r3, r0, #0
 8008678:	d007      	beq.n	800868a <f_open+0xda>
 800867a:	2318      	movs	r3, #24
 800867c:	18fb      	adds	r3, r7, r3
 800867e:	0018      	movs	r0, r3
 8008680:	f7ff f82a 	bl	80076d8 <dir_register>
 8008684:	0003      	movs	r3, r0
 8008686:	001a      	movs	r2, r3
 8008688:	e000      	b.n	800868c <f_open+0xdc>
 800868a:	2212      	movs	r2, #18
 800868c:	2367      	movs	r3, #103	; 0x67
 800868e:	18fb      	adds	r3, r7, r3
 8008690:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008692:	1dfb      	adds	r3, r7, #7
 8008694:	1dfa      	adds	r2, r7, #7
 8008696:	7812      	ldrb	r2, [r2, #0]
 8008698:	2108      	movs	r1, #8
 800869a:	430a      	orrs	r2, r1
 800869c:	701a      	strb	r2, [r3, #0]
 800869e:	e014      	b.n	80086ca <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80086a0:	2318      	movs	r3, #24
 80086a2:	18fb      	adds	r3, r7, r3
 80086a4:	799b      	ldrb	r3, [r3, #6]
 80086a6:	001a      	movs	r2, r3
 80086a8:	2311      	movs	r3, #17
 80086aa:	4013      	ands	r3, r2
 80086ac:	d004      	beq.n	80086b8 <f_open+0x108>
					res = FR_DENIED;
 80086ae:	2367      	movs	r3, #103	; 0x67
 80086b0:	18fb      	adds	r3, r7, r3
 80086b2:	2207      	movs	r2, #7
 80086b4:	701a      	strb	r2, [r3, #0]
 80086b6:	e008      	b.n	80086ca <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80086b8:	1dfb      	adds	r3, r7, #7
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2204      	movs	r2, #4
 80086be:	4013      	ands	r3, r2
 80086c0:	d003      	beq.n	80086ca <f_open+0x11a>
 80086c2:	2367      	movs	r3, #103	; 0x67
 80086c4:	18fb      	adds	r3, r7, r3
 80086c6:	2208      	movs	r2, #8
 80086c8:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80086ca:	2467      	movs	r4, #103	; 0x67
 80086cc:	193b      	adds	r3, r7, r4
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d000      	beq.n	80086d6 <f_open+0x126>
 80086d4:	e07b      	b.n	80087ce <f_open+0x21e>
 80086d6:	1dfb      	adds	r3, r7, #7
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2208      	movs	r2, #8
 80086dc:	4013      	ands	r3, r2
 80086de:	d100      	bne.n	80086e2 <f_open+0x132>
 80086e0:	e075      	b.n	80087ce <f_open+0x21e>
				dw = GET_FATTIME();
 80086e2:	f7fd fb3f 	bl	8005d64 <get_fattime>
 80086e6:	0003      	movs	r3, r0
 80086e8:	65bb      	str	r3, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80086ea:	2518      	movs	r5, #24
 80086ec:	197b      	adds	r3, r7, r5
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	330e      	adds	r3, #14
 80086f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086f4:	0011      	movs	r1, r2
 80086f6:	0018      	movs	r0, r3
 80086f8:	f7fd fcc4 	bl	8006084 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80086fc:	197b      	adds	r3, r7, r5
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	3316      	adds	r3, #22
 8008702:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008704:	0011      	movs	r1, r2
 8008706:	0018      	movs	r0, r3
 8008708:	f7fd fcbc 	bl	8006084 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800870c:	197b      	adds	r3, r7, r5
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	330b      	adds	r3, #11
 8008712:	2220      	movs	r2, #32
 8008714:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	197b      	adds	r3, r7, r5
 800871a:	6a1b      	ldr	r3, [r3, #32]
 800871c:	0019      	movs	r1, r3
 800871e:	0010      	movs	r0, r2
 8008720:	f7fe fcef 	bl	8007102 <ld_clust>
 8008724:	0003      	movs	r3, r0
 8008726:	657b      	str	r3, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008728:	6978      	ldr	r0, [r7, #20]
 800872a:	197b      	adds	r3, r7, r5
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	2200      	movs	r2, #0
 8008730:	0019      	movs	r1, r3
 8008732:	f7fe fd05 	bl	8007140 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008736:	197b      	adds	r3, r7, r5
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	331c      	adds	r3, #28
 800873c:	2100      	movs	r1, #0
 800873e:	0018      	movs	r0, r3
 8008740:	f7fd fca0 	bl	8006084 <st_dword>
					fs->wflag = 1;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2201      	movs	r2, #1
 8008748:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800874a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800874c:	2b00      	cmp	r3, #0
 800874e:	d03e      	beq.n	80087ce <f_open+0x21e>
						dw = fs->winsect;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008754:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008756:	0026      	movs	r6, r4
 8008758:	193c      	adds	r4, r7, r4
 800875a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800875c:	197b      	adds	r3, r7, r5
 800875e:	2200      	movs	r2, #0
 8008760:	0018      	movs	r0, r3
 8008762:	f7fe f9ba 	bl	8006ada <remove_chain>
 8008766:	0003      	movs	r3, r0
 8008768:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800876a:	19bb      	adds	r3, r7, r6
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d12d      	bne.n	80087ce <f_open+0x21e>
							res = move_window(fs, dw);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	19bc      	adds	r4, r7, r6
 8008776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008778:	0011      	movs	r1, r2
 800877a:	0018      	movs	r0, r3
 800877c:	f7fd fed4 	bl	8006528 <move_window>
 8008780:	0003      	movs	r3, r0
 8008782:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008788:	3a01      	subs	r2, #1
 800878a:	615a      	str	r2, [r3, #20]
 800878c:	e01f      	b.n	80087ce <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800878e:	2167      	movs	r1, #103	; 0x67
 8008790:	187b      	adds	r3, r7, r1
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d11a      	bne.n	80087ce <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008798:	2318      	movs	r3, #24
 800879a:	18fb      	adds	r3, r7, r3
 800879c:	799b      	ldrb	r3, [r3, #6]
 800879e:	001a      	movs	r2, r3
 80087a0:	2310      	movs	r3, #16
 80087a2:	4013      	ands	r3, r2
 80087a4:	d003      	beq.n	80087ae <f_open+0x1fe>
					res = FR_NO_FILE;
 80087a6:	187b      	adds	r3, r7, r1
 80087a8:	2204      	movs	r2, #4
 80087aa:	701a      	strb	r2, [r3, #0]
 80087ac:	e00f      	b.n	80087ce <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80087ae:	1dfb      	adds	r3, r7, #7
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	2202      	movs	r2, #2
 80087b4:	4013      	ands	r3, r2
 80087b6:	d00a      	beq.n	80087ce <f_open+0x21e>
 80087b8:	2318      	movs	r3, #24
 80087ba:	18fb      	adds	r3, r7, r3
 80087bc:	799b      	ldrb	r3, [r3, #6]
 80087be:	001a      	movs	r2, r3
 80087c0:	2301      	movs	r3, #1
 80087c2:	4013      	ands	r3, r2
 80087c4:	d003      	beq.n	80087ce <f_open+0x21e>
						res = FR_DENIED;
 80087c6:	2367      	movs	r3, #103	; 0x67
 80087c8:	18fb      	adds	r3, r7, r3
 80087ca:	2207      	movs	r2, #7
 80087cc:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 80087ce:	2367      	movs	r3, #103	; 0x67
 80087d0:	18fb      	adds	r3, r7, r3
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d12b      	bne.n	8008830 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80087d8:	1dfb      	adds	r3, r7, #7
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2208      	movs	r2, #8
 80087de:	4013      	ands	r3, r2
 80087e0:	d005      	beq.n	80087ee <f_open+0x23e>
				mode |= FA_MODIFIED;
 80087e2:	1dfb      	adds	r3, r7, #7
 80087e4:	1dfa      	adds	r2, r7, #7
 80087e6:	7812      	ldrb	r2, [r2, #0]
 80087e8:	2140      	movs	r1, #64	; 0x40
 80087ea:	430a      	orrs	r2, r1
 80087ec:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80087f6:	2118      	movs	r1, #24
 80087f8:	187b      	adds	r3, r7, r1
 80087fa:	6a1a      	ldr	r2, [r3, #32]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008800:	1dfb      	adds	r3, r7, #7
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2201      	movs	r2, #1
 8008806:	4393      	bics	r3, r2
 8008808:	1e5a      	subs	r2, r3, #1
 800880a:	4193      	sbcs	r3, r2
 800880c:	b2db      	uxtb	r3, r3
 800880e:	001a      	movs	r2, r3
 8008810:	187b      	adds	r3, r7, r1
 8008812:	0011      	movs	r1, r2
 8008814:	0018      	movs	r0, r3
 8008816:	f7fd fd4b 	bl	80062b0 <inc_lock>
 800881a:	0002      	movs	r2, r0
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d103      	bne.n	8008830 <f_open+0x280>
 8008828:	2367      	movs	r3, #103	; 0x67
 800882a:	18fb      	adds	r3, r7, r3
 800882c:	2202      	movs	r2, #2
 800882e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008830:	2367      	movs	r3, #103	; 0x67
 8008832:	18fb      	adds	r3, r7, r3
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d000      	beq.n	800883c <f_open+0x28c>
 800883a:	e0af      	b.n	800899c <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	2418      	movs	r4, #24
 8008840:	193b      	adds	r3, r7, r4
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	0019      	movs	r1, r3
 8008846:	0010      	movs	r0, r2
 8008848:	f7fe fc5b 	bl	8007102 <ld_clust>
 800884c:	0002      	movs	r2, r0
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008852:	193b      	adds	r3, r7, r4
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	331c      	adds	r3, #28
 8008858:	0018      	movs	r0, r3
 800885a:	f7fd fbd4 	bl	8006006 <ld_dword>
 800885e:	0002      	movs	r2, r0
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	88da      	ldrh	r2, [r3, #6]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	1dfa      	adds	r2, r7, #7
 800887c:	7812      	ldrb	r2, [r2, #0]
 800887e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3330      	adds	r3, #48	; 0x30
 8008896:	2280      	movs	r2, #128	; 0x80
 8008898:	0152      	lsls	r2, r2, #5
 800889a:	2100      	movs	r1, #0
 800889c:	0018      	movs	r0, r3
 800889e:	f7fd fc3a 	bl	8006116 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80088a2:	1dfb      	adds	r3, r7, #7
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	2220      	movs	r2, #32
 80088a8:	4013      	ands	r3, r2
 80088aa:	d100      	bne.n	80088ae <f_open+0x2fe>
 80088ac:	e076      	b.n	800899c <f_open+0x3ec>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d100      	bne.n	80088b8 <f_open+0x308>
 80088b6:	e071      	b.n	800899c <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	68da      	ldr	r2, [r3, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	895b      	ldrh	r3, [r3, #10]
 80088c4:	001a      	movs	r2, r3
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	899b      	ldrh	r3, [r3, #12]
 80088ca:	4353      	muls	r3, r2
 80088cc:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088da:	e019      	b.n	8008910 <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088e0:	0011      	movs	r1, r2
 80088e2:	0018      	movs	r0, r3
 80088e4:	f7fd feee 	bl	80066c4 <get_fat>
 80088e8:	0003      	movs	r3, r0
 80088ea:	663b      	str	r3, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80088ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d803      	bhi.n	80088fa <f_open+0x34a>
 80088f2:	2367      	movs	r3, #103	; 0x67
 80088f4:	18fb      	adds	r3, r7, r3
 80088f6:	2202      	movs	r2, #2
 80088f8:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80088fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088fc:	3301      	adds	r3, #1
 80088fe:	d103      	bne.n	8008908 <f_open+0x358>
 8008900:	2367      	movs	r3, #103	; 0x67
 8008902:	18fb      	adds	r3, r7, r3
 8008904:	2201      	movs	r2, #1
 8008906:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800890a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008910:	2367      	movs	r3, #103	; 0x67
 8008912:	18fb      	adds	r3, r7, r3
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d103      	bne.n	8008922 <f_open+0x372>
 800891a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800891c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800891e:	429a      	cmp	r2, r3
 8008920:	d8dc      	bhi.n	80088dc <f_open+0x32c>
				}
				fp->clust = clst;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008926:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008928:	2467      	movs	r4, #103	; 0x67
 800892a:	193b      	adds	r3, r7, r4
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d134      	bne.n	800899c <f_open+0x3ec>
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	899b      	ldrh	r3, [r3, #12]
 8008936:	001a      	movs	r2, r3
 8008938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800893a:	0011      	movs	r1, r2
 800893c:	0018      	movs	r0, r3
 800893e:	f7f7 fc85 	bl	800024c <__aeabi_uidivmod>
 8008942:	1e0b      	subs	r3, r1, #0
 8008944:	d02a      	beq.n	800899c <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800894a:	0011      	movs	r1, r2
 800894c:	0018      	movs	r0, r3
 800894e:	f7fd fe9d 	bl	800668c <clust2sect>
 8008952:	0003      	movs	r3, r0
 8008954:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d103      	bne.n	8008964 <f_open+0x3b4>
						res = FR_INT_ERR;
 800895c:	193b      	adds	r3, r7, r4
 800895e:	2202      	movs	r2, #2
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	e01b      	b.n	800899c <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	899b      	ldrh	r3, [r3, #12]
 8008968:	0019      	movs	r1, r3
 800896a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800896c:	f7f7 fbe8 	bl	8000140 <__udivsi3>
 8008970:	0003      	movs	r3, r0
 8008972:	001a      	movs	r2, r3
 8008974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008976:	18d2      	adds	r2, r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	7858      	ldrb	r0, [r3, #1]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3330      	adds	r3, #48	; 0x30
 8008984:	0019      	movs	r1, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6a1a      	ldr	r2, [r3, #32]
 800898a:	2301      	movs	r3, #1
 800898c:	f7fd faa8 	bl	8005ee0 <disk_read>
 8008990:	1e03      	subs	r3, r0, #0
 8008992:	d003      	beq.n	800899c <f_open+0x3ec>
 8008994:	2367      	movs	r3, #103	; 0x67
 8008996:	18fb      	adds	r3, r7, r3
 8008998:	2201      	movs	r2, #1
 800899a:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800899c:	2367      	movs	r3, #103	; 0x67
 800899e:	18fb      	adds	r3, r7, r3
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <f_open+0x3fc>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80089ac:	2367      	movs	r3, #103	; 0x67
 80089ae:	18fb      	adds	r3, r7, r3
 80089b0:	781b      	ldrb	r3, [r3, #0]
}
 80089b2:	0018      	movs	r0, r3
 80089b4:	46bd      	mov	sp, r7
 80089b6:	b01b      	add	sp, #108	; 0x6c
 80089b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089ba <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80089ba:	b5b0      	push	{r4, r5, r7, lr}
 80089bc:	b08e      	sub	sp, #56	; 0x38
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
 80089c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2200      	movs	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2537      	movs	r5, #55	; 0x37
 80089d6:	197c      	adds	r4, r7, r5
 80089d8:	2214      	movs	r2, #20
 80089da:	18ba      	adds	r2, r7, r2
 80089dc:	0011      	movs	r1, r2
 80089de:	0018      	movs	r0, r3
 80089e0:	f7ff fd5e 	bl	80084a0 <validate>
 80089e4:	0003      	movs	r3, r0
 80089e6:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80089e8:	197b      	adds	r3, r7, r5
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d107      	bne.n	8008a00 <f_read+0x46>
 80089f0:	197b      	adds	r3, r7, r5
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	7d52      	ldrb	r2, [r2, #21]
 80089f6:	701a      	strb	r2, [r3, #0]
 80089f8:	197b      	adds	r3, r7, r5
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <f_read+0x4e>
 8008a00:	2337      	movs	r3, #55	; 0x37
 8008a02:	18fb      	adds	r3, r7, r3
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	e137      	b.n	8008c78 <f_read+0x2be>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	7d1b      	ldrb	r3, [r3, #20]
 8008a0c:	001a      	movs	r2, r3
 8008a0e:	2301      	movs	r3, #1
 8008a10:	4013      	ands	r3, r2
 8008a12:	d101      	bne.n	8008a18 <f_read+0x5e>
 8008a14:	2307      	movs	r3, #7
 8008a16:	e12f      	b.n	8008c78 <f_read+0x2be>
	remain = fp->obj.objsize - fp->fptr;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	68da      	ldr	r2, [r3, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d800      	bhi.n	8008a2e <f_read+0x74>
 8008a2c:	e11f      	b.n	8008c6e <f_read+0x2b4>
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008a32:	e11c      	b.n	8008c6e <f_read+0x2b4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	699a      	ldr	r2, [r3, #24]
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	899b      	ldrh	r3, [r3, #12]
 8008a3c:	0019      	movs	r1, r3
 8008a3e:	0010      	movs	r0, r2
 8008a40:	f7f7 fc04 	bl	800024c <__aeabi_uidivmod>
 8008a44:	1e0b      	subs	r3, r1, #0
 8008a46:	d000      	beq.n	8008a4a <f_read+0x90>
 8008a48:	e0d7      	b.n	8008bfa <f_read+0x240>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	699a      	ldr	r2, [r3, #24]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	899b      	ldrh	r3, [r3, #12]
 8008a52:	0019      	movs	r1, r3
 8008a54:	0010      	movs	r0, r2
 8008a56:	f7f7 fb73 	bl	8000140 <__udivsi3>
 8008a5a:	0003      	movs	r3, r0
 8008a5c:	001a      	movs	r2, r3
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	895b      	ldrh	r3, [r3, #10]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	4013      	ands	r3, r2
 8008a66:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d131      	bne.n	8008ad2 <f_read+0x118>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d103      	bne.n	8008a7e <f_read+0xc4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8008a7c:	e016      	b.n	8008aac <f_read+0xf2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d009      	beq.n	8008a9a <f_read+0xe0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	699a      	ldr	r2, [r3, #24]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	0011      	movs	r1, r2
 8008a8e:	0018      	movs	r0, r3
 8008a90:	f7fe f93c 	bl	8006d0c <clmt_clust>
 8008a94:	0003      	movs	r3, r0
 8008a96:	633b      	str	r3, [r7, #48]	; 0x30
 8008a98:	e008      	b.n	8008aac <f_read+0xf2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	0019      	movs	r1, r3
 8008aa2:	0010      	movs	r0, r2
 8008aa4:	f7fd fe0e 	bl	80066c4 <get_fat>
 8008aa8:	0003      	movs	r3, r0
 8008aaa:	633b      	str	r3, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d804      	bhi.n	8008abc <f_read+0x102>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	755a      	strb	r2, [r3, #21]
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e0dd      	b.n	8008c78 <f_read+0x2be>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	3301      	adds	r3, #1
 8008ac0:	d104      	bne.n	8008acc <f_read+0x112>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	755a      	strb	r2, [r3, #21]
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e0d5      	b.n	8008c78 <f_read+0x2be>
				fp->clust = clst;				/* Update current cluster */
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ad0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	0019      	movs	r1, r3
 8008ada:	0010      	movs	r0, r2
 8008adc:	f7fd fdd6 	bl	800668c <clust2sect>
 8008ae0:	0003      	movs	r3, r0
 8008ae2:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d104      	bne.n	8008af4 <f_read+0x13a>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2202      	movs	r2, #2
 8008aee:	755a      	strb	r2, [r3, #21]
 8008af0:	2302      	movs	r3, #2
 8008af2:	e0c1      	b.n	8008c78 <f_read+0x2be>
			sect += csect;
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	18d3      	adds	r3, r2, r3
 8008afa:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	899b      	ldrh	r3, [r3, #12]
 8008b00:	0019      	movs	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7f7 fb1c 	bl	8000140 <__udivsi3>
 8008b08:	0003      	movs	r3, r0
 8008b0a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d03e      	beq.n	8008b90 <f_read+0x1d6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	18d3      	adds	r3, r2, r3
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	8952      	ldrh	r2, [r2, #10]
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d905      	bls.n	8008b2c <f_read+0x172>
					cc = fs->csize - csect;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	895b      	ldrh	r3, [r3, #10]
 8008b24:	001a      	movs	r2, r3
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	7858      	ldrb	r0, [r3, #1]
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b36:	f7fd f9d3 	bl	8005ee0 <disk_read>
 8008b3a:	1e03      	subs	r3, r0, #0
 8008b3c:	d004      	beq.n	8008b48 <f_read+0x18e>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	755a      	strb	r2, [r3, #21]
 8008b44:	2301      	movs	r3, #1
 8008b46:	e097      	b.n	8008c78 <f_read+0x2be>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	7d1b      	ldrb	r3, [r3, #20]
 8008b4c:	b25b      	sxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	da17      	bge.n	8008b82 <f_read+0x1c8>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6a1a      	ldr	r2, [r3, #32]
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d910      	bls.n	8008b82 <f_read+0x1c8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6a1a      	ldr	r2, [r3, #32]
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	8992      	ldrh	r2, [r2, #12]
 8008b6c:	4353      	muls	r3, r2
 8008b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b70:	18d0      	adds	r0, r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3330      	adds	r3, #48	; 0x30
 8008b76:	0019      	movs	r1, r3
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	899b      	ldrh	r3, [r3, #12]
 8008b7c:	001a      	movs	r2, r3
 8008b7e:	f7fd faab 	bl	80060d8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	899b      	ldrh	r3, [r3, #12]
 8008b86:	001a      	movs	r2, r3
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	4353      	muls	r3, r2
 8008b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008b8e:	e05a      	b.n	8008c46 <f_read+0x28c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	69ba      	ldr	r2, [r7, #24]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d02c      	beq.n	8008bf4 <f_read+0x23a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	7d1b      	ldrb	r3, [r3, #20]
 8008b9e:	b25b      	sxtb	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	da17      	bge.n	8008bd4 <f_read+0x21a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	7858      	ldrb	r0, [r3, #1]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3330      	adds	r3, #48	; 0x30
 8008bac:	0019      	movs	r1, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6a1a      	ldr	r2, [r3, #32]
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f7fd f9bc 	bl	8005f30 <disk_write>
 8008bb8:	1e03      	subs	r3, r0, #0
 8008bba:	d004      	beq.n	8008bc6 <f_read+0x20c>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	755a      	strb	r2, [r3, #21]
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e058      	b.n	8008c78 <f_read+0x2be>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	7d1b      	ldrb	r3, [r3, #20]
 8008bca:	227f      	movs	r2, #127	; 0x7f
 8008bcc:	4013      	ands	r3, r2
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	7858      	ldrb	r0, [r3, #1]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3330      	adds	r3, #48	; 0x30
 8008bdc:	0019      	movs	r1, r3
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	2301      	movs	r3, #1
 8008be2:	f7fd f97d 	bl	8005ee0 <disk_read>
 8008be6:	1e03      	subs	r3, r0, #0
 8008be8:	d004      	beq.n	8008bf4 <f_read+0x23a>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2201      	movs	r2, #1
 8008bee:	755a      	strb	r2, [r3, #21]
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e041      	b.n	8008c78 <f_read+0x2be>
			}
#endif
			fp->sect = sect;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	899b      	ldrh	r3, [r3, #12]
 8008bfe:	001c      	movs	r4, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	699a      	ldr	r2, [r3, #24]
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	899b      	ldrh	r3, [r3, #12]
 8008c08:	0019      	movs	r1, r3
 8008c0a:	0010      	movs	r0, r2
 8008c0c:	f7f7 fb1e 	bl	800024c <__aeabi_uidivmod>
 8008c10:	000b      	movs	r3, r1
 8008c12:	1ae3      	subs	r3, r4, r3
 8008c14:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d901      	bls.n	8008c22 <f_read+0x268>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3330      	adds	r3, #48	; 0x30
 8008c26:	001c      	movs	r4, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	699a      	ldr	r2, [r3, #24]
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	899b      	ldrh	r3, [r3, #12]
 8008c30:	0019      	movs	r1, r3
 8008c32:	0010      	movs	r0, r2
 8008c34:	f7f7 fb0a 	bl	800024c <__aeabi_uidivmod>
 8008c38:	000b      	movs	r3, r1
 8008c3a:	18e1      	adds	r1, r4, r3
 8008c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	0018      	movs	r0, r3
 8008c42:	f7fd fa49 	bl	80060d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4a:	18d3      	adds	r3, r2, r3
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	699a      	ldr	r2, [r3, #24]
 8008c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c54:	18d2      	adds	r2, r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	619a      	str	r2, [r3, #24]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c60:	18d2      	adds	r2, r2, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d000      	beq.n	8008c76 <f_read+0x2bc>
 8008c74:	e6de      	b.n	8008a34 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	0018      	movs	r0, r3
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	b00e      	add	sp, #56	; 0x38
 8008c7e:	bdb0      	pop	{r4, r5, r7, pc}

08008c80 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008c80:	b5b0      	push	{r4, r5, r7, lr}
 8008c82:	b08c      	sub	sp, #48	; 0x30
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	252f      	movs	r5, #47	; 0x2f
 8008c9c:	197c      	adds	r4, r7, r5
 8008c9e:	2210      	movs	r2, #16
 8008ca0:	18ba      	adds	r2, r7, r2
 8008ca2:	0011      	movs	r1, r2
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	f7ff fbfb 	bl	80084a0 <validate>
 8008caa:	0003      	movs	r3, r0
 8008cac:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008cae:	197b      	adds	r3, r7, r5
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d107      	bne.n	8008cc6 <f_write+0x46>
 8008cb6:	197b      	adds	r3, r7, r5
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	7d52      	ldrb	r2, [r2, #21]
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	197b      	adds	r3, r7, r5
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <f_write+0x4e>
 8008cc6:	232f      	movs	r3, #47	; 0x2f
 8008cc8:	18fb      	adds	r3, r7, r3
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	e16f      	b.n	8008fae <f_write+0x32e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	7d1b      	ldrb	r3, [r3, #20]
 8008cd2:	001a      	movs	r2, r3
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	d101      	bne.n	8008cde <f_write+0x5e>
 8008cda:	2307      	movs	r3, #7
 8008cdc:	e167      	b.n	8008fae <f_write+0x32e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	699a      	ldr	r2, [r3, #24]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	18d2      	adds	r2, r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d300      	bcc.n	8008cf0 <f_write+0x70>
 8008cee:	e150      	b.n	8008f92 <f_write+0x312>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	43db      	mvns	r3, r3
 8008cf6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008cf8:	e14b      	b.n	8008f92 <f_write+0x312>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	699a      	ldr	r2, [r3, #24]
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	899b      	ldrh	r3, [r3, #12]
 8008d02:	0019      	movs	r1, r3
 8008d04:	0010      	movs	r0, r2
 8008d06:	f7f7 faa1 	bl	800024c <__aeabi_uidivmod>
 8008d0a:	1e0b      	subs	r3, r1, #0
 8008d0c:	d000      	beq.n	8008d10 <f_write+0x90>
 8008d0e:	e0f4      	b.n	8008efa <f_write+0x27a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	699a      	ldr	r2, [r3, #24]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	899b      	ldrh	r3, [r3, #12]
 8008d18:	0019      	movs	r1, r3
 8008d1a:	0010      	movs	r0, r2
 8008d1c:	f7f7 fa10 	bl	8000140 <__udivsi3>
 8008d20:	0003      	movs	r3, r0
 8008d22:	001a      	movs	r2, r3
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	895b      	ldrh	r3, [r3, #10]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d146      	bne.n	8008dc2 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10d      	bne.n	8008d58 <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d11e      	bne.n	8008d86 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f7fd ff37 	bl	8006bc0 <create_chain>
 8008d52:	0003      	movs	r3, r0
 8008d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d56:	e016      	b.n	8008d86 <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d009      	beq.n	8008d74 <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	699a      	ldr	r2, [r3, #24]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	0011      	movs	r1, r2
 8008d68:	0018      	movs	r0, r3
 8008d6a:	f7fd ffcf 	bl	8006d0c <clmt_clust>
 8008d6e:	0003      	movs	r3, r0
 8008d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d72:	e008      	b.n	8008d86 <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	0019      	movs	r1, r3
 8008d7c:	0010      	movs	r0, r2
 8008d7e:	f7fd ff1f 	bl	8006bc0 <create_chain>
 8008d82:	0003      	movs	r3, r0
 8008d84:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d100      	bne.n	8008d8e <f_write+0x10e>
 8008d8c:	e106      	b.n	8008f9c <f_write+0x31c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d104      	bne.n	8008d9e <f_write+0x11e>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2202      	movs	r2, #2
 8008d98:	755a      	strb	r2, [r3, #21]
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e107      	b.n	8008fae <f_write+0x32e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	3301      	adds	r3, #1
 8008da2:	d104      	bne.n	8008dae <f_write+0x12e>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	755a      	strb	r2, [r3, #21]
 8008daa:	2301      	movs	r3, #1
 8008dac:	e0ff      	b.n	8008fae <f_write+0x32e>
				fp->clust = clst;			/* Update current cluster */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008db2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <f_write+0x142>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dc0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	7d1b      	ldrb	r3, [r3, #20]
 8008dc6:	b25b      	sxtb	r3, r3
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	da17      	bge.n	8008dfc <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	7858      	ldrb	r0, [r3, #1]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	3330      	adds	r3, #48	; 0x30
 8008dd4:	0019      	movs	r1, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6a1a      	ldr	r2, [r3, #32]
 8008dda:	2301      	movs	r3, #1
 8008ddc:	f7fd f8a8 	bl	8005f30 <disk_write>
 8008de0:	1e03      	subs	r3, r0, #0
 8008de2:	d004      	beq.n	8008dee <f_write+0x16e>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2201      	movs	r2, #1
 8008de8:	755a      	strb	r2, [r3, #21]
 8008dea:	2301      	movs	r3, #1
 8008dec:	e0df      	b.n	8008fae <f_write+0x32e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	7d1b      	ldrb	r3, [r3, #20]
 8008df2:	227f      	movs	r2, #127	; 0x7f
 8008df4:	4013      	ands	r3, r2
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	0019      	movs	r1, r3
 8008e04:	0010      	movs	r0, r2
 8008e06:	f7fd fc41 	bl	800668c <clust2sect>
 8008e0a:	0003      	movs	r3, r0
 8008e0c:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d104      	bne.n	8008e1e <f_write+0x19e>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2202      	movs	r2, #2
 8008e18:	755a      	strb	r2, [r3, #21]
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	e0c7      	b.n	8008fae <f_write+0x32e>
			sect += csect;
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	18d3      	adds	r3, r2, r3
 8008e24:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	899b      	ldrh	r3, [r3, #12]
 8008e2a:	0019      	movs	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7f7 f987 	bl	8000140 <__udivsi3>
 8008e32:	0003      	movs	r3, r0
 8008e34:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d040      	beq.n	8008ebe <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	18d3      	adds	r3, r2, r3
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	8952      	ldrh	r2, [r2, #10]
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d905      	bls.n	8008e56 <f_write+0x1d6>
					cc = fs->csize - csect;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	895b      	ldrh	r3, [r3, #10]
 8008e4e:	001a      	movs	r2, r3
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	7858      	ldrb	r0, [r3, #1]
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	697a      	ldr	r2, [r7, #20]
 8008e5e:	69f9      	ldr	r1, [r7, #28]
 8008e60:	f7fd f866 	bl	8005f30 <disk_write>
 8008e64:	1e03      	subs	r3, r0, #0
 8008e66:	d004      	beq.n	8008e72 <f_write+0x1f2>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	755a      	strb	r2, [r3, #21]
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e09d      	b.n	8008fae <f_write+0x32e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a1a      	ldr	r2, [r3, #32]
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	6a3a      	ldr	r2, [r7, #32]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d917      	bls.n	8008eb0 <f_write+0x230>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3330      	adds	r3, #48	; 0x30
 8008e84:	0018      	movs	r0, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6a1a      	ldr	r2, [r3, #32]
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	8992      	ldrh	r2, [r2, #12]
 8008e92:	4353      	muls	r3, r2
 8008e94:	69fa      	ldr	r2, [r7, #28]
 8008e96:	18d1      	adds	r1, r2, r3
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	899b      	ldrh	r3, [r3, #12]
 8008e9c:	001a      	movs	r2, r3
 8008e9e:	f7fd f91b 	bl	80060d8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	7d1b      	ldrb	r3, [r3, #20]
 8008ea6:	227f      	movs	r2, #127	; 0x7f
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	899b      	ldrh	r3, [r3, #12]
 8008eb4:	001a      	movs	r2, r3
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	4353      	muls	r3, r2
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008ebc:	e04b      	b.n	8008f56 <f_write+0x2d6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d015      	beq.n	8008ef4 <f_write+0x274>
				fp->fptr < fp->obj.objsize &&
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	699a      	ldr	r2, [r3, #24]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d20f      	bcs.n	8008ef4 <f_write+0x274>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	7858      	ldrb	r0, [r3, #1]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3330      	adds	r3, #48	; 0x30
 8008edc:	0019      	movs	r1, r3
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	f7fc fffd 	bl	8005ee0 <disk_read>
 8008ee6:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 8008ee8:	d004      	beq.n	8008ef4 <f_write+0x274>
					ABORT(fs, FR_DISK_ERR);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2201      	movs	r2, #1
 8008eee:	755a      	strb	r2, [r3, #21]
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e05c      	b.n	8008fae <f_write+0x32e>
			}
#endif
			fp->sect = sect;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	899b      	ldrh	r3, [r3, #12]
 8008efe:	001c      	movs	r4, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	699a      	ldr	r2, [r3, #24]
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	899b      	ldrh	r3, [r3, #12]
 8008f08:	0019      	movs	r1, r3
 8008f0a:	0010      	movs	r0, r2
 8008f0c:	f7f7 f99e 	bl	800024c <__aeabi_uidivmod>
 8008f10:	000b      	movs	r3, r1
 8008f12:	1ae3      	subs	r3, r4, r3
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d901      	bls.n	8008f22 <f_write+0x2a2>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3330      	adds	r3, #48	; 0x30
 8008f26:	001c      	movs	r4, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	699a      	ldr	r2, [r3, #24]
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	899b      	ldrh	r3, [r3, #12]
 8008f30:	0019      	movs	r1, r3
 8008f32:	0010      	movs	r0, r2
 8008f34:	f7f7 f98a 	bl	800024c <__aeabi_uidivmod>
 8008f38:	000b      	movs	r3, r1
 8008f3a:	18e3      	adds	r3, r4, r3
 8008f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3e:	69f9      	ldr	r1, [r7, #28]
 8008f40:	0018      	movs	r0, r3
 8008f42:	f7fd f8c9 	bl	80060d8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	7d1b      	ldrb	r3, [r3, #20]
 8008f4a:	2280      	movs	r2, #128	; 0x80
 8008f4c:	4252      	negs	r2, r2
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008f56:	69fa      	ldr	r2, [r7, #28]
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	18d3      	adds	r3, r2, r3
 8008f5c:	61fb      	str	r3, [r7, #28]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	699a      	ldr	r2, [r3, #24]
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	18d2      	adds	r2, r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	619a      	str	r2, [r3, #24]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	68d9      	ldr	r1, [r3, #12]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	699a      	ldr	r2, [r3, #24]
 8008f72:	000b      	movs	r3, r1
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d200      	bcs.n	8008f7a <f_write+0x2fa>
 8008f78:	0013      	movs	r3, r2
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	60d3      	str	r3, [r2, #12]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	18d2      	adds	r2, r2, r3
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	601a      	str	r2, [r3, #0]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d000      	beq.n	8008f9a <f_write+0x31a>
 8008f98:	e6af      	b.n	8008cfa <f_write+0x7a>
 8008f9a:	e000      	b.n	8008f9e <f_write+0x31e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f9c:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	7d1b      	ldrb	r3, [r3, #20]
 8008fa2:	2240      	movs	r2, #64	; 0x40
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	0018      	movs	r0, r3
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	b00c      	add	sp, #48	; 0x30
 8008fb4:	bdb0      	pop	{r4, r5, r7, pc}

08008fb6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008fb6:	b5b0      	push	{r4, r5, r7, lr}
 8008fb8:	b086      	sub	sp, #24
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2517      	movs	r5, #23
 8008fc2:	197c      	adds	r4, r7, r5
 8008fc4:	2208      	movs	r2, #8
 8008fc6:	18ba      	adds	r2, r7, r2
 8008fc8:	0011      	movs	r1, r2
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f7ff fa68 	bl	80084a0 <validate>
 8008fd0:	0003      	movs	r3, r0
 8008fd2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008fd4:	197b      	adds	r3, r7, r5
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d16e      	bne.n	80090ba <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	7d1b      	ldrb	r3, [r3, #20]
 8008fe0:	001a      	movs	r2, r3
 8008fe2:	2340      	movs	r3, #64	; 0x40
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	d068      	beq.n	80090ba <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	7d1b      	ldrb	r3, [r3, #20]
 8008fec:	b25b      	sxtb	r3, r3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	da14      	bge.n	800901c <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	7858      	ldrb	r0, [r3, #1]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3330      	adds	r3, #48	; 0x30
 8008ffa:	0019      	movs	r1, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a1a      	ldr	r2, [r3, #32]
 8009000:	2301      	movs	r3, #1
 8009002:	f7fc ff95 	bl	8005f30 <disk_write>
 8009006:	1e03      	subs	r3, r0, #0
 8009008:	d001      	beq.n	800900e <f_sync+0x58>
 800900a:	2301      	movs	r3, #1
 800900c:	e058      	b.n	80090c0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	7d1b      	ldrb	r3, [r3, #20]
 8009012:	227f      	movs	r2, #127	; 0x7f
 8009014:	4013      	ands	r3, r2
 8009016:	b2da      	uxtb	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800901c:	f7fc fea2 	bl	8005d64 <get_fattime>
 8009020:	0003      	movs	r3, r0
 8009022:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	2517      	movs	r5, #23
 800902c:	197c      	adds	r4, r7, r5
 800902e:	0019      	movs	r1, r3
 8009030:	0010      	movs	r0, r2
 8009032:	f7fd fa79 	bl	8006528 <move_window>
 8009036:	0003      	movs	r3, r0
 8009038:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 800903a:	002c      	movs	r4, r5
 800903c:	193b      	adds	r3, r7, r4
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d13a      	bne.n	80090ba <f_sync+0x104>
					dir = fp->dir_ptr;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009048:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	330b      	adds	r3, #11
 800904e:	781a      	ldrb	r2, [r3, #0]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	330b      	adds	r3, #11
 8009054:	2120      	movs	r1, #32
 8009056:	430a      	orrs	r2, r1
 8009058:	b2d2      	uxtb	r2, r2
 800905a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6818      	ldr	r0, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	0019      	movs	r1, r3
 8009068:	f7fe f86a 	bl	8007140 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	331c      	adds	r3, #28
 8009070:	001a      	movs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	0019      	movs	r1, r3
 8009078:	0010      	movs	r0, r2
 800907a:	f7fd f803 	bl	8006084 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3316      	adds	r3, #22
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	0011      	movs	r1, r2
 8009086:	0018      	movs	r0, r3
 8009088:	f7fc fffc 	bl	8006084 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3312      	adds	r3, #18
 8009090:	2100      	movs	r1, #0
 8009092:	0018      	movs	r0, r3
 8009094:	f7fc ffd8 	bl	8006048 <st_word>
					fs->wflag = 1;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2201      	movs	r2, #1
 800909c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	193c      	adds	r4, r7, r4
 80090a2:	0018      	movs	r0, r3
 80090a4:	f7fd fa76 	bl	8006594 <sync_fs>
 80090a8:	0003      	movs	r3, r0
 80090aa:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	7d1b      	ldrb	r3, [r3, #20]
 80090b0:	2240      	movs	r2, #64	; 0x40
 80090b2:	4393      	bics	r3, r2
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80090ba:	2317      	movs	r3, #23
 80090bc:	18fb      	adds	r3, r7, r3
 80090be:	781b      	ldrb	r3, [r3, #0]
}
 80090c0:	0018      	movs	r0, r3
 80090c2:	46bd      	mov	sp, r7
 80090c4:	b006      	add	sp, #24
 80090c6:	bdb0      	pop	{r4, r5, r7, pc}

080090c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80090c8:	b5b0      	push	{r4, r5, r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80090d0:	250f      	movs	r5, #15
 80090d2:	197c      	adds	r4, r7, r5
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	0018      	movs	r0, r3
 80090d8:	f7ff ff6d 	bl	8008fb6 <f_sync>
 80090dc:	0003      	movs	r3, r0
 80090de:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 80090e0:	197b      	adds	r3, r7, r5
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d11c      	bne.n	8009122 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	197c      	adds	r4, r7, r5
 80090ec:	2208      	movs	r2, #8
 80090ee:	18ba      	adds	r2, r7, r2
 80090f0:	0011      	movs	r1, r2
 80090f2:	0018      	movs	r0, r3
 80090f4:	f7ff f9d4 	bl	80084a0 <validate>
 80090f8:	0003      	movs	r3, r0
 80090fa:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80090fc:	197b      	adds	r3, r7, r5
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10e      	bne.n	8009122 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	197c      	adds	r4, r7, r5
 800910a:	0018      	movs	r0, r3
 800910c:	f7fd f95a 	bl	80063c4 <dec_lock>
 8009110:	0003      	movs	r3, r0
 8009112:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8009114:	197b      	adds	r3, r7, r5
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009122:	230f      	movs	r3, #15
 8009124:	18fb      	adds	r3, r7, r3
 8009126:	781b      	ldrb	r3, [r3, #0]
}
 8009128:	0018      	movs	r0, r3
 800912a:	46bd      	mov	sp, r7
 800912c:	b004      	add	sp, #16
 800912e:	bdb0      	pop	{r4, r5, r7, pc}

08009130 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009130:	b590      	push	{r4, r7, lr}
 8009132:	b089      	sub	sp, #36	; 0x24
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009144:	e022      	b.n	800918c <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009146:	2310      	movs	r3, #16
 8009148:	18fb      	adds	r3, r7, r3
 800914a:	2414      	movs	r4, #20
 800914c:	1939      	adds	r1, r7, r4
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f7ff fc32 	bl	80089ba <f_read>
		if (rc != 1) break;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d11d      	bne.n	8009198 <f_gets+0x68>
		c = s[0];
 800915c:	2117      	movs	r1, #23
 800915e:	187b      	adds	r3, r7, r1
 8009160:	193a      	adds	r2, r7, r4
 8009162:	7812      	ldrb	r2, [r2, #0]
 8009164:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009166:	187b      	adds	r3, r7, r1
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b0d      	cmp	r3, #13
 800916c:	d100      	bne.n	8009170 <f_gets+0x40>
 800916e:	e00d      	b.n	800918c <f_gets+0x5c>
		*p++ = c;
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	61ba      	str	r2, [r7, #24]
 8009176:	2117      	movs	r1, #23
 8009178:	187a      	adds	r2, r7, r1
 800917a:	7812      	ldrb	r2, [r2, #0]
 800917c:	701a      	strb	r2, [r3, #0]
		n++;
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	3301      	adds	r3, #1
 8009182:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009184:	187b      	adds	r3, r7, r1
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b0a      	cmp	r3, #10
 800918a:	d007      	beq.n	800919c <f_gets+0x6c>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	3b01      	subs	r3, #1
 8009190:	69fa      	ldr	r2, [r7, #28]
 8009192:	429a      	cmp	r2, r3
 8009194:	dbd7      	blt.n	8009146 <f_gets+0x16>
 8009196:	e002      	b.n	800919e <f_gets+0x6e>
		if (rc != 1) break;
 8009198:	46c0      	nop			; (mov r8, r8)
 800919a:	e000      	b.n	800919e <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 800919c:	46c0      	nop			; (mov r8, r8)
	}
	*p = 0;
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	2200      	movs	r2, #0
 80091a2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <f_gets+0x7e>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	e000      	b.n	80091b0 <f_gets+0x80>
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	0018      	movs	r0, r3
 80091b2:	46bd      	mov	sp, r7
 80091b4:	b009      	add	sp, #36	; 0x24
 80091b6:	bd90      	pop	{r4, r7, pc}

080091b8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	000a      	movs	r2, r1
 80091c2:	1cfb      	adds	r3, r7, #3
 80091c4:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80091c6:	1cfb      	adds	r3, r7, #3
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b0a      	cmp	r3, #10
 80091cc:	d104      	bne.n	80091d8 <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	210d      	movs	r1, #13
 80091d2:	0018      	movs	r0, r3
 80091d4:	f7ff fff0 	bl	80091b8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	db26      	blt.n	8009232 <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	60fa      	str	r2, [r7, #12]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	18d3      	adds	r3, r2, r3
 80091ee:	1cfa      	adds	r2, r7, #3
 80091f0:	7812      	ldrb	r2, [r2, #0]
 80091f2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b3c      	cmp	r3, #60	; 0x3c
 80091f8:	dd12      	ble.n	8009220 <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6818      	ldr	r0, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	330c      	adds	r3, #12
 8009202:	0019      	movs	r1, r3
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	2308      	movs	r3, #8
 8009208:	18fb      	adds	r3, r7, r3
 800920a:	f7ff fd39 	bl	8008c80 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	429a      	cmp	r2, r3
 8009214:	d101      	bne.n	800921a <putc_bfd+0x62>
 8009216:	2300      	movs	r3, #0
 8009218:	e001      	b.n	800921e <putc_bfd+0x66>
 800921a:	2301      	movs	r3, #1
 800921c:	425b      	negs	r3, r3
 800921e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	609a      	str	r2, [r3, #8]
 8009230:	e000      	b.n	8009234 <putc_bfd+0x7c>
	if (i < 0) return;
 8009232:	46c0      	nop			; (mov r8, r8)
}
 8009234:	46bd      	mov	sp, r7
 8009236:	b004      	add	sp, #16
 8009238:	bd80      	pop	{r7, pc}

0800923a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	db15      	blt.n	8009276 <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6818      	ldr	r0, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	330c      	adds	r3, #12
 8009252:	0019      	movs	r1, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	001a      	movs	r2, r3
 800925a:	230c      	movs	r3, #12
 800925c:	18fb      	adds	r3, r7, r3
 800925e:	f7ff fd0f 	bl	8008c80 <f_write>
 8009262:	1e03      	subs	r3, r0, #0
 8009264:	d107      	bne.n	8009276 <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	4293      	cmp	r3, r2
 800926e:	d102      	bne.n	8009276 <putc_flush+0x3c>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	e001      	b.n	800927a <putc_flush+0x40>
	return EOF;
 8009276:	2301      	movs	r3, #1
 8009278:	425b      	negs	r3, r3
}
 800927a:	0018      	movs	r0, r3
 800927c:	46bd      	mov	sp, r7
 800927e:	b004      	add	sp, #16
 8009280:	bd80      	pop	{r7, pc}

08009282 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b082      	sub	sp, #8
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	605a      	str	r2, [r3, #4]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	609a      	str	r2, [r3, #8]
}
 80092a0:	46c0      	nop			; (mov r8, r8)
 80092a2:	46bd      	mov	sp, r7
 80092a4:	b002      	add	sp, #8
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b096      	sub	sp, #88	; 0x58
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	230c      	movs	r3, #12
 80092b6:	18fb      	adds	r3, r7, r3
 80092b8:	0011      	movs	r1, r2
 80092ba:	0018      	movs	r0, r3
 80092bc:	f7ff ffe1 	bl	8009282 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80092c0:	e009      	b.n	80092d6 <f_puts+0x2e>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	1c5a      	adds	r2, r3, #1
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	781a      	ldrb	r2, [r3, #0]
 80092ca:	230c      	movs	r3, #12
 80092cc:	18fb      	adds	r3, r7, r3
 80092ce:	0011      	movs	r1, r2
 80092d0:	0018      	movs	r0, r3
 80092d2:	f7ff ff71 	bl	80091b8 <putc_bfd>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1f1      	bne.n	80092c2 <f_puts+0x1a>
	return putc_flush(&pb);
 80092de:	230c      	movs	r3, #12
 80092e0:	18fb      	adds	r3, r7, r3
 80092e2:	0018      	movs	r0, r3
 80092e4:	f7ff ffa9 	bl	800923a <putc_flush>
 80092e8:	0003      	movs	r3, r0
}
 80092ea:	0018      	movs	r0, r3
 80092ec:	46bd      	mov	sp, r7
 80092ee:	b016      	add	sp, #88	; 0x58
 80092f0:	bd80      	pop	{r7, pc}
	...

080092f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80092f4:	b590      	push	{r4, r7, lr}
 80092f6:	b087      	sub	sp, #28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	1dfb      	adds	r3, r7, #7
 8009300:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8009302:	2417      	movs	r4, #23
 8009304:	193b      	adds	r3, r7, r4
 8009306:	2201      	movs	r2, #1
 8009308:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800930a:	2016      	movs	r0, #22
 800930c:	183b      	adds	r3, r7, r0
 800930e:	2200      	movs	r2, #0
 8009310:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8009312:	4b21      	ldr	r3, [pc, #132]	; (8009398 <FATFS_LinkDriverEx+0xa4>)
 8009314:	7a5b      	ldrb	r3, [r3, #9]
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d136      	bne.n	800938a <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800931c:	4b1e      	ldr	r3, [pc, #120]	; (8009398 <FATFS_LinkDriverEx+0xa4>)
 800931e:	7a5b      	ldrb	r3, [r3, #9]
 8009320:	b2db      	uxtb	r3, r3
 8009322:	001a      	movs	r2, r3
 8009324:	4b1c      	ldr	r3, [pc, #112]	; (8009398 <FATFS_LinkDriverEx+0xa4>)
 8009326:	2100      	movs	r1, #0
 8009328:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800932a:	4b1b      	ldr	r3, [pc, #108]	; (8009398 <FATFS_LinkDriverEx+0xa4>)
 800932c:	7a5b      	ldrb	r3, [r3, #9]
 800932e:	b2db      	uxtb	r3, r3
 8009330:	4a19      	ldr	r2, [pc, #100]	; (8009398 <FATFS_LinkDriverEx+0xa4>)
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	18d3      	adds	r3, r2, r3
 8009336:	3304      	adds	r3, #4
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 800933c:	4b16      	ldr	r3, [pc, #88]	; (8009398 <FATFS_LinkDriverEx+0xa4>)
 800933e:	7a5b      	ldrb	r3, [r3, #9]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	001a      	movs	r2, r3
 8009344:	4b14      	ldr	r3, [pc, #80]	; (8009398 <FATFS_LinkDriverEx+0xa4>)
 8009346:	189b      	adds	r3, r3, r2
 8009348:	1dfa      	adds	r2, r7, #7
 800934a:	7812      	ldrb	r2, [r2, #0]
 800934c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800934e:	4b12      	ldr	r3, [pc, #72]	; (8009398 <FATFS_LinkDriverEx+0xa4>)
 8009350:	7a5b      	ldrb	r3, [r3, #9]
 8009352:	b2db      	uxtb	r3, r3
 8009354:	1c5a      	adds	r2, r3, #1
 8009356:	b2d1      	uxtb	r1, r2
 8009358:	4a0f      	ldr	r2, [pc, #60]	; (8009398 <FATFS_LinkDriverEx+0xa4>)
 800935a:	7251      	strb	r1, [r2, #9]
 800935c:	183a      	adds	r2, r7, r0
 800935e:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8009360:	183b      	adds	r3, r7, r0
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	3330      	adds	r3, #48	; 0x30
 8009366:	b2da      	uxtb	r2, r3
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	3301      	adds	r3, #1
 8009370:	223a      	movs	r2, #58	; 0x3a
 8009372:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	3302      	adds	r3, #2
 8009378:	222f      	movs	r2, #47	; 0x2f
 800937a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	3303      	adds	r3, #3
 8009380:	2200      	movs	r2, #0
 8009382:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009384:	193b      	adds	r3, r7, r4
 8009386:	2200      	movs	r2, #0
 8009388:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800938a:	2317      	movs	r3, #23
 800938c:	18fb      	adds	r3, r7, r3
 800938e:	781b      	ldrb	r3, [r3, #0]
}
 8009390:	0018      	movs	r0, r3
 8009392:	46bd      	mov	sp, r7
 8009394:	b007      	add	sp, #28
 8009396:	bd90      	pop	{r4, r7, pc}
 8009398:	2000051c 	.word	0x2000051c

0800939c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	0018      	movs	r0, r3
 80093ae:	f7ff ffa1 	bl	80092f4 <FATFS_LinkDriverEx>
 80093b2:	0003      	movs	r3, r0
}
 80093b4:	0018      	movs	r0, r3
 80093b6:	46bd      	mov	sp, r7
 80093b8:	b002      	add	sp, #8
 80093ba:	bd80      	pop	{r7, pc}

080093bc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	0002      	movs	r2, r0
 80093c4:	6039      	str	r1, [r7, #0]
 80093c6:	1dbb      	adds	r3, r7, #6
 80093c8:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80093ca:	1dbb      	adds	r3, r7, #6
 80093cc:	881b      	ldrh	r3, [r3, #0]
 80093ce:	2b7f      	cmp	r3, #127	; 0x7f
 80093d0:	d805      	bhi.n	80093de <ff_convert+0x22>
		c = chr;
 80093d2:	230e      	movs	r3, #14
 80093d4:	18fb      	adds	r3, r7, r3
 80093d6:	1dba      	adds	r2, r7, #6
 80093d8:	8812      	ldrh	r2, [r2, #0]
 80093da:	801a      	strh	r2, [r3, #0]
 80093dc:	e037      	b.n	800944e <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d010      	beq.n	8009406 <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80093e4:	1dbb      	adds	r3, r7, #6
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	2bff      	cmp	r3, #255	; 0xff
 80093ea:	d807      	bhi.n	80093fc <ff_convert+0x40>
 80093ec:	1dbb      	adds	r3, r7, #6
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	3b80      	subs	r3, #128	; 0x80
 80093f2:	001a      	movs	r2, r3
 80093f4:	4b19      	ldr	r3, [pc, #100]	; (800945c <ff_convert+0xa0>)
 80093f6:	0052      	lsls	r2, r2, #1
 80093f8:	5ad2      	ldrh	r2, [r2, r3]
 80093fa:	e000      	b.n	80093fe <ff_convert+0x42>
 80093fc:	2200      	movs	r2, #0
 80093fe:	230e      	movs	r3, #14
 8009400:	18fb      	adds	r3, r7, r3
 8009402:	801a      	strh	r2, [r3, #0]
 8009404:	e023      	b.n	800944e <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009406:	230e      	movs	r3, #14
 8009408:	18fb      	adds	r3, r7, r3
 800940a:	2200      	movs	r2, #0
 800940c:	801a      	strh	r2, [r3, #0]
 800940e:	e00e      	b.n	800942e <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 8009410:	210e      	movs	r1, #14
 8009412:	187b      	adds	r3, r7, r1
 8009414:	881a      	ldrh	r2, [r3, #0]
 8009416:	4b11      	ldr	r3, [pc, #68]	; (800945c <ff_convert+0xa0>)
 8009418:	0052      	lsls	r2, r2, #1
 800941a:	5ad3      	ldrh	r3, [r2, r3]
 800941c:	1dba      	adds	r2, r7, #6
 800941e:	8812      	ldrh	r2, [r2, #0]
 8009420:	429a      	cmp	r2, r3
 8009422:	d00a      	beq.n	800943a <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 8009424:	187b      	adds	r3, r7, r1
 8009426:	881a      	ldrh	r2, [r3, #0]
 8009428:	187b      	adds	r3, r7, r1
 800942a:	3201      	adds	r2, #1
 800942c:	801a      	strh	r2, [r3, #0]
 800942e:	230e      	movs	r3, #14
 8009430:	18fb      	adds	r3, r7, r3
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	2b7f      	cmp	r3, #127	; 0x7f
 8009436:	d9eb      	bls.n	8009410 <ff_convert+0x54>
 8009438:	e000      	b.n	800943c <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 800943a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 800943c:	210e      	movs	r1, #14
 800943e:	187b      	adds	r3, r7, r1
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	3380      	adds	r3, #128	; 0x80
 8009444:	b29a      	uxth	r2, r3
 8009446:	187b      	adds	r3, r7, r1
 8009448:	21ff      	movs	r1, #255	; 0xff
 800944a:	400a      	ands	r2, r1
 800944c:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 800944e:	230e      	movs	r3, #14
 8009450:	18fb      	adds	r3, r7, r3
 8009452:	881b      	ldrh	r3, [r3, #0]
}
 8009454:	0018      	movs	r0, r3
 8009456:	46bd      	mov	sp, r7
 8009458:	b004      	add	sp, #16
 800945a:	bd80      	pop	{r7, pc}
 800945c:	0800e114 	.word	0x0800e114

08009460 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009460:	b5b0      	push	{r4, r5, r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	0002      	movs	r2, r0
 8009468:	1dbb      	adds	r3, r7, #6
 800946a:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800946c:	1dbb      	adds	r3, r7, #6
 800946e:	881a      	ldrh	r2, [r3, #0]
 8009470:	2380      	movs	r3, #128	; 0x80
 8009472:	015b      	lsls	r3, r3, #5
 8009474:	429a      	cmp	r2, r3
 8009476:	d201      	bcs.n	800947c <ff_wtoupper+0x1c>
 8009478:	4b4d      	ldr	r3, [pc, #308]	; (80095b0 <ff_wtoupper+0x150>)
 800947a:	e000      	b.n	800947e <ff_wtoupper+0x1e>
 800947c:	4b4d      	ldr	r3, [pc, #308]	; (80095b4 <ff_wtoupper+0x154>)
 800947e:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	1c9a      	adds	r2, r3, #2
 8009484:	617a      	str	r2, [r7, #20]
 8009486:	2412      	movs	r4, #18
 8009488:	193a      	adds	r2, r7, r4
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 800948e:	193b      	adds	r3, r7, r4
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d100      	bne.n	8009498 <ff_wtoupper+0x38>
 8009496:	e084      	b.n	80095a2 <ff_wtoupper+0x142>
 8009498:	1dba      	adds	r2, r7, #6
 800949a:	193b      	adds	r3, r7, r4
 800949c:	8812      	ldrh	r2, [r2, #0]
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d200      	bcs.n	80094a6 <ff_wtoupper+0x46>
 80094a4:	e07d      	b.n	80095a2 <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	1c9a      	adds	r2, r3, #2
 80094aa:	617a      	str	r2, [r7, #20]
 80094ac:	2010      	movs	r0, #16
 80094ae:	183a      	adds	r2, r7, r0
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	8013      	strh	r3, [r2, #0]
 80094b4:	250e      	movs	r5, #14
 80094b6:	197b      	adds	r3, r7, r5
 80094b8:	183a      	adds	r2, r7, r0
 80094ba:	8812      	ldrh	r2, [r2, #0]
 80094bc:	0a12      	lsrs	r2, r2, #8
 80094be:	801a      	strh	r2, [r3, #0]
 80094c0:	183b      	adds	r3, r7, r0
 80094c2:	183a      	adds	r2, r7, r0
 80094c4:	8812      	ldrh	r2, [r2, #0]
 80094c6:	21ff      	movs	r1, #255	; 0xff
 80094c8:	400a      	ands	r2, r1
 80094ca:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 80094cc:	1dbb      	adds	r3, r7, #6
 80094ce:	881a      	ldrh	r2, [r3, #0]
 80094d0:	193b      	adds	r3, r7, r4
 80094d2:	8819      	ldrh	r1, [r3, #0]
 80094d4:	183b      	adds	r3, r7, r0
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	18cb      	adds	r3, r1, r3
 80094da:	429a      	cmp	r2, r3
 80094dc:	da52      	bge.n	8009584 <ff_wtoupper+0x124>
			switch (cmd) {
 80094de:	197b      	adds	r3, r7, r5
 80094e0:	881b      	ldrh	r3, [r3, #0]
 80094e2:	2b08      	cmp	r3, #8
 80094e4:	d85c      	bhi.n	80095a0 <ff_wtoupper+0x140>
 80094e6:	009a      	lsls	r2, r3, #2
 80094e8:	4b33      	ldr	r3, [pc, #204]	; (80095b8 <ff_wtoupper+0x158>)
 80094ea:	18d3      	adds	r3, r2, r3
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80094f0:	1dbb      	adds	r3, r7, #6
 80094f2:	881a      	ldrh	r2, [r3, #0]
 80094f4:	2312      	movs	r3, #18
 80094f6:	18fb      	adds	r3, r7, r3
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	18d2      	adds	r2, r2, r3
 8009502:	1dbb      	adds	r3, r7, #6
 8009504:	8812      	ldrh	r2, [r2, #0]
 8009506:	801a      	strh	r2, [r3, #0]
 8009508:	e03b      	b.n	8009582 <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800950a:	1dba      	adds	r2, r7, #6
 800950c:	2312      	movs	r3, #18
 800950e:	18fb      	adds	r3, r7, r3
 8009510:	8812      	ldrh	r2, [r2, #0]
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	b29b      	uxth	r3, r3
 8009518:	2201      	movs	r2, #1
 800951a:	4013      	ands	r3, r2
 800951c:	b29a      	uxth	r2, r3
 800951e:	1dbb      	adds	r3, r7, #6
 8009520:	1db9      	adds	r1, r7, #6
 8009522:	8809      	ldrh	r1, [r1, #0]
 8009524:	1a8a      	subs	r2, r1, r2
 8009526:	801a      	strh	r2, [r3, #0]
 8009528:	e02b      	b.n	8009582 <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 800952a:	1dbb      	adds	r3, r7, #6
 800952c:	1dba      	adds	r2, r7, #6
 800952e:	8812      	ldrh	r2, [r2, #0]
 8009530:	3a10      	subs	r2, #16
 8009532:	801a      	strh	r2, [r3, #0]
 8009534:	e025      	b.n	8009582 <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009536:	1dbb      	adds	r3, r7, #6
 8009538:	1dba      	adds	r2, r7, #6
 800953a:	8812      	ldrh	r2, [r2, #0]
 800953c:	3a20      	subs	r2, #32
 800953e:	801a      	strh	r2, [r3, #0]
 8009540:	e01f      	b.n	8009582 <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009542:	1dbb      	adds	r3, r7, #6
 8009544:	1dba      	adds	r2, r7, #6
 8009546:	8812      	ldrh	r2, [r2, #0]
 8009548:	3a30      	subs	r2, #48	; 0x30
 800954a:	801a      	strh	r2, [r3, #0]
 800954c:	e019      	b.n	8009582 <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800954e:	1dbb      	adds	r3, r7, #6
 8009550:	1dba      	adds	r2, r7, #6
 8009552:	8812      	ldrh	r2, [r2, #0]
 8009554:	3a1a      	subs	r2, #26
 8009556:	801a      	strh	r2, [r3, #0]
 8009558:	e013      	b.n	8009582 <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 800955a:	1dbb      	adds	r3, r7, #6
 800955c:	1dba      	adds	r2, r7, #6
 800955e:	8812      	ldrh	r2, [r2, #0]
 8009560:	3208      	adds	r2, #8
 8009562:	801a      	strh	r2, [r3, #0]
 8009564:	e00d      	b.n	8009582 <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009566:	1dbb      	adds	r3, r7, #6
 8009568:	1dba      	adds	r2, r7, #6
 800956a:	8812      	ldrh	r2, [r2, #0]
 800956c:	3a50      	subs	r2, #80	; 0x50
 800956e:	801a      	strh	r2, [r3, #0]
 8009570:	e007      	b.n	8009582 <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009572:	1dbb      	adds	r3, r7, #6
 8009574:	1dba      	adds	r2, r7, #6
 8009576:	8812      	ldrh	r2, [r2, #0]
 8009578:	4910      	ldr	r1, [pc, #64]	; (80095bc <ff_wtoupper+0x15c>)
 800957a:	468c      	mov	ip, r1
 800957c:	4462      	add	r2, ip
 800957e:	801a      	strh	r2, [r3, #0]
 8009580:	46c0      	nop			; (mov r8, r8)
			}
			break;
 8009582:	e00d      	b.n	80095a0 <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 8009584:	230e      	movs	r3, #14
 8009586:	18fb      	adds	r3, r7, r3
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d000      	beq.n	8009590 <ff_wtoupper+0x130>
 800958e:	e777      	b.n	8009480 <ff_wtoupper+0x20>
 8009590:	2310      	movs	r3, #16
 8009592:	18fb      	adds	r3, r7, r3
 8009594:	881b      	ldrh	r3, [r3, #0]
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	18d3      	adds	r3, r2, r3
 800959c:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800959e:	e76f      	b.n	8009480 <ff_wtoupper+0x20>
			break;
 80095a0:	46c0      	nop			; (mov r8, r8)
	}

	return chr;
 80095a2:	1dbb      	adds	r3, r7, #6
 80095a4:	881b      	ldrh	r3, [r3, #0]
}
 80095a6:	0018      	movs	r0, r3
 80095a8:	46bd      	mov	sp, r7
 80095aa:	b006      	add	sp, #24
 80095ac:	bdb0      	pop	{r4, r5, r7, pc}
 80095ae:	46c0      	nop			; (mov r8, r8)
 80095b0:	0800e238 	.word	0x0800e238
 80095b4:	0800e42c 	.word	0x0800e42c
 80095b8:	0800e214 	.word	0x0800e214
 80095bc:	ffffe3a0 	.word	0xffffe3a0

080095c0 <__cvt>:
 80095c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c2:	001e      	movs	r6, r3
 80095c4:	2300      	movs	r3, #0
 80095c6:	0014      	movs	r4, r2
 80095c8:	b08b      	sub	sp, #44	; 0x2c
 80095ca:	429e      	cmp	r6, r3
 80095cc:	da04      	bge.n	80095d8 <__cvt+0x18>
 80095ce:	2180      	movs	r1, #128	; 0x80
 80095d0:	0609      	lsls	r1, r1, #24
 80095d2:	1873      	adds	r3, r6, r1
 80095d4:	001e      	movs	r6, r3
 80095d6:	232d      	movs	r3, #45	; 0x2d
 80095d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80095dc:	7013      	strb	r3, [r2, #0]
 80095de:	2320      	movs	r3, #32
 80095e0:	2203      	movs	r2, #3
 80095e2:	439f      	bics	r7, r3
 80095e4:	2f46      	cmp	r7, #70	; 0x46
 80095e6:	d007      	beq.n	80095f8 <__cvt+0x38>
 80095e8:	003b      	movs	r3, r7
 80095ea:	3b45      	subs	r3, #69	; 0x45
 80095ec:	4259      	negs	r1, r3
 80095ee:	414b      	adcs	r3, r1
 80095f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80095f2:	3a01      	subs	r2, #1
 80095f4:	18cb      	adds	r3, r1, r3
 80095f6:	9310      	str	r3, [sp, #64]	; 0x40
 80095f8:	ab09      	add	r3, sp, #36	; 0x24
 80095fa:	9304      	str	r3, [sp, #16]
 80095fc:	ab08      	add	r3, sp, #32
 80095fe:	9303      	str	r3, [sp, #12]
 8009600:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009602:	9200      	str	r2, [sp, #0]
 8009604:	9302      	str	r3, [sp, #8]
 8009606:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009608:	0022      	movs	r2, r4
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	0033      	movs	r3, r6
 800960e:	f001 f8b3 	bl	800a778 <_dtoa_r>
 8009612:	0005      	movs	r5, r0
 8009614:	2f47      	cmp	r7, #71	; 0x47
 8009616:	d102      	bne.n	800961e <__cvt+0x5e>
 8009618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800961a:	07db      	lsls	r3, r3, #31
 800961c:	d528      	bpl.n	8009670 <__cvt+0xb0>
 800961e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009620:	18eb      	adds	r3, r5, r3
 8009622:	9307      	str	r3, [sp, #28]
 8009624:	2f46      	cmp	r7, #70	; 0x46
 8009626:	d114      	bne.n	8009652 <__cvt+0x92>
 8009628:	782b      	ldrb	r3, [r5, #0]
 800962a:	2b30      	cmp	r3, #48	; 0x30
 800962c:	d10c      	bne.n	8009648 <__cvt+0x88>
 800962e:	2200      	movs	r2, #0
 8009630:	2300      	movs	r3, #0
 8009632:	0020      	movs	r0, r4
 8009634:	0031      	movs	r1, r6
 8009636:	f7f6 ff09 	bl	800044c <__aeabi_dcmpeq>
 800963a:	2800      	cmp	r0, #0
 800963c:	d104      	bne.n	8009648 <__cvt+0x88>
 800963e:	2301      	movs	r3, #1
 8009640:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009642:	1a9b      	subs	r3, r3, r2
 8009644:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800964a:	9a07      	ldr	r2, [sp, #28]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	18d3      	adds	r3, r2, r3
 8009650:	9307      	str	r3, [sp, #28]
 8009652:	2200      	movs	r2, #0
 8009654:	2300      	movs	r3, #0
 8009656:	0020      	movs	r0, r4
 8009658:	0031      	movs	r1, r6
 800965a:	f7f6 fef7 	bl	800044c <__aeabi_dcmpeq>
 800965e:	2800      	cmp	r0, #0
 8009660:	d001      	beq.n	8009666 <__cvt+0xa6>
 8009662:	9b07      	ldr	r3, [sp, #28]
 8009664:	9309      	str	r3, [sp, #36]	; 0x24
 8009666:	2230      	movs	r2, #48	; 0x30
 8009668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800966a:	9907      	ldr	r1, [sp, #28]
 800966c:	428b      	cmp	r3, r1
 800966e:	d306      	bcc.n	800967e <__cvt+0xbe>
 8009670:	0028      	movs	r0, r5
 8009672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009674:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009676:	1b5b      	subs	r3, r3, r5
 8009678:	6013      	str	r3, [r2, #0]
 800967a:	b00b      	add	sp, #44	; 0x2c
 800967c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800967e:	1c59      	adds	r1, r3, #1
 8009680:	9109      	str	r1, [sp, #36]	; 0x24
 8009682:	701a      	strb	r2, [r3, #0]
 8009684:	e7f0      	b.n	8009668 <__cvt+0xa8>

08009686 <__exponent>:
 8009686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009688:	1c83      	adds	r3, r0, #2
 800968a:	b087      	sub	sp, #28
 800968c:	9303      	str	r3, [sp, #12]
 800968e:	0005      	movs	r5, r0
 8009690:	000c      	movs	r4, r1
 8009692:	232b      	movs	r3, #43	; 0x2b
 8009694:	7002      	strb	r2, [r0, #0]
 8009696:	2900      	cmp	r1, #0
 8009698:	da01      	bge.n	800969e <__exponent+0x18>
 800969a:	424c      	negs	r4, r1
 800969c:	3302      	adds	r3, #2
 800969e:	706b      	strb	r3, [r5, #1]
 80096a0:	2c09      	cmp	r4, #9
 80096a2:	dd2f      	ble.n	8009704 <__exponent+0x7e>
 80096a4:	270a      	movs	r7, #10
 80096a6:	ab04      	add	r3, sp, #16
 80096a8:	1dde      	adds	r6, r3, #7
 80096aa:	0020      	movs	r0, r4
 80096ac:	0039      	movs	r1, r7
 80096ae:	9601      	str	r6, [sp, #4]
 80096b0:	f7f6 feb6 	bl	8000420 <__aeabi_idivmod>
 80096b4:	3e01      	subs	r6, #1
 80096b6:	3130      	adds	r1, #48	; 0x30
 80096b8:	0020      	movs	r0, r4
 80096ba:	7031      	strb	r1, [r6, #0]
 80096bc:	0039      	movs	r1, r7
 80096be:	9402      	str	r4, [sp, #8]
 80096c0:	f7f6 fdc8 	bl	8000254 <__divsi3>
 80096c4:	9b02      	ldr	r3, [sp, #8]
 80096c6:	0004      	movs	r4, r0
 80096c8:	2b63      	cmp	r3, #99	; 0x63
 80096ca:	dcee      	bgt.n	80096aa <__exponent+0x24>
 80096cc:	9b01      	ldr	r3, [sp, #4]
 80096ce:	3430      	adds	r4, #48	; 0x30
 80096d0:	1e9a      	subs	r2, r3, #2
 80096d2:	0013      	movs	r3, r2
 80096d4:	9903      	ldr	r1, [sp, #12]
 80096d6:	7014      	strb	r4, [r2, #0]
 80096d8:	a804      	add	r0, sp, #16
 80096da:	3007      	adds	r0, #7
 80096dc:	4298      	cmp	r0, r3
 80096de:	d80c      	bhi.n	80096fa <__exponent+0x74>
 80096e0:	2300      	movs	r3, #0
 80096e2:	4282      	cmp	r2, r0
 80096e4:	d804      	bhi.n	80096f0 <__exponent+0x6a>
 80096e6:	aa04      	add	r2, sp, #16
 80096e8:	3309      	adds	r3, #9
 80096ea:	189b      	adds	r3, r3, r2
 80096ec:	9a01      	ldr	r2, [sp, #4]
 80096ee:	1a9b      	subs	r3, r3, r2
 80096f0:	9a03      	ldr	r2, [sp, #12]
 80096f2:	18d3      	adds	r3, r2, r3
 80096f4:	1b58      	subs	r0, r3, r5
 80096f6:	b007      	add	sp, #28
 80096f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096fa:	7818      	ldrb	r0, [r3, #0]
 80096fc:	3301      	adds	r3, #1
 80096fe:	7008      	strb	r0, [r1, #0]
 8009700:	3101      	adds	r1, #1
 8009702:	e7e9      	b.n	80096d8 <__exponent+0x52>
 8009704:	2330      	movs	r3, #48	; 0x30
 8009706:	3430      	adds	r4, #48	; 0x30
 8009708:	70ab      	strb	r3, [r5, #2]
 800970a:	70ec      	strb	r4, [r5, #3]
 800970c:	1d2b      	adds	r3, r5, #4
 800970e:	e7f1      	b.n	80096f4 <__exponent+0x6e>

08009710 <_printf_float>:
 8009710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009712:	b095      	sub	sp, #84	; 0x54
 8009714:	000c      	movs	r4, r1
 8009716:	9208      	str	r2, [sp, #32]
 8009718:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800971a:	9309      	str	r3, [sp, #36]	; 0x24
 800971c:	0007      	movs	r7, r0
 800971e:	f000 ff0d 	bl	800a53c <_localeconv_r>
 8009722:	6803      	ldr	r3, [r0, #0]
 8009724:	0018      	movs	r0, r3
 8009726:	930c      	str	r3, [sp, #48]	; 0x30
 8009728:	f7f6 fcee 	bl	8000108 <strlen>
 800972c:	2300      	movs	r3, #0
 800972e:	9312      	str	r3, [sp, #72]	; 0x48
 8009730:	7e23      	ldrb	r3, [r4, #24]
 8009732:	2207      	movs	r2, #7
 8009734:	930a      	str	r3, [sp, #40]	; 0x28
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	900d      	str	r0, [sp, #52]	; 0x34
 800973a:	930b      	str	r3, [sp, #44]	; 0x2c
 800973c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800973e:	682b      	ldr	r3, [r5, #0]
 8009740:	05c9      	lsls	r1, r1, #23
 8009742:	d547      	bpl.n	80097d4 <_printf_float+0xc4>
 8009744:	189b      	adds	r3, r3, r2
 8009746:	4393      	bics	r3, r2
 8009748:	001a      	movs	r2, r3
 800974a:	3208      	adds	r2, #8
 800974c:	602a      	str	r2, [r5, #0]
 800974e:	681e      	ldr	r6, [r3, #0]
 8009750:	685d      	ldr	r5, [r3, #4]
 8009752:	0032      	movs	r2, r6
 8009754:	002b      	movs	r3, r5
 8009756:	64a2      	str	r2, [r4, #72]	; 0x48
 8009758:	64e3      	str	r3, [r4, #76]	; 0x4c
 800975a:	2201      	movs	r2, #1
 800975c:	006b      	lsls	r3, r5, #1
 800975e:	085b      	lsrs	r3, r3, #1
 8009760:	930e      	str	r3, [sp, #56]	; 0x38
 8009762:	0030      	movs	r0, r6
 8009764:	4bab      	ldr	r3, [pc, #684]	; (8009a14 <_printf_float+0x304>)
 8009766:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009768:	4252      	negs	r2, r2
 800976a:	f7f8 ff27 	bl	80025bc <__aeabi_dcmpun>
 800976e:	2800      	cmp	r0, #0
 8009770:	d132      	bne.n	80097d8 <_printf_float+0xc8>
 8009772:	2201      	movs	r2, #1
 8009774:	0030      	movs	r0, r6
 8009776:	4ba7      	ldr	r3, [pc, #668]	; (8009a14 <_printf_float+0x304>)
 8009778:	990e      	ldr	r1, [sp, #56]	; 0x38
 800977a:	4252      	negs	r2, r2
 800977c:	f7f6 fe76 	bl	800046c <__aeabi_dcmple>
 8009780:	2800      	cmp	r0, #0
 8009782:	d129      	bne.n	80097d8 <_printf_float+0xc8>
 8009784:	2200      	movs	r2, #0
 8009786:	2300      	movs	r3, #0
 8009788:	0030      	movs	r0, r6
 800978a:	0029      	movs	r1, r5
 800978c:	f7f6 fe64 	bl	8000458 <__aeabi_dcmplt>
 8009790:	2800      	cmp	r0, #0
 8009792:	d003      	beq.n	800979c <_printf_float+0x8c>
 8009794:	0023      	movs	r3, r4
 8009796:	222d      	movs	r2, #45	; 0x2d
 8009798:	3343      	adds	r3, #67	; 0x43
 800979a:	701a      	strb	r2, [r3, #0]
 800979c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800979e:	4d9e      	ldr	r5, [pc, #632]	; (8009a18 <_printf_float+0x308>)
 80097a0:	2b47      	cmp	r3, #71	; 0x47
 80097a2:	d900      	bls.n	80097a6 <_printf_float+0x96>
 80097a4:	4d9d      	ldr	r5, [pc, #628]	; (8009a1c <_printf_float+0x30c>)
 80097a6:	2303      	movs	r3, #3
 80097a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097aa:	6123      	str	r3, [r4, #16]
 80097ac:	3301      	adds	r3, #1
 80097ae:	439a      	bics	r2, r3
 80097b0:	2300      	movs	r3, #0
 80097b2:	6022      	str	r2, [r4, #0]
 80097b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80097b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b8:	0021      	movs	r1, r4
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	0038      	movs	r0, r7
 80097be:	9b08      	ldr	r3, [sp, #32]
 80097c0:	aa13      	add	r2, sp, #76	; 0x4c
 80097c2:	f000 f9fb 	bl	8009bbc <_printf_common>
 80097c6:	3001      	adds	r0, #1
 80097c8:	d000      	beq.n	80097cc <_printf_float+0xbc>
 80097ca:	e0a3      	b.n	8009914 <_printf_float+0x204>
 80097cc:	2001      	movs	r0, #1
 80097ce:	4240      	negs	r0, r0
 80097d0:	b015      	add	sp, #84	; 0x54
 80097d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d4:	3307      	adds	r3, #7
 80097d6:	e7b6      	b.n	8009746 <_printf_float+0x36>
 80097d8:	0032      	movs	r2, r6
 80097da:	002b      	movs	r3, r5
 80097dc:	0030      	movs	r0, r6
 80097de:	0029      	movs	r1, r5
 80097e0:	f7f8 feec 	bl	80025bc <__aeabi_dcmpun>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d00b      	beq.n	8009800 <_printf_float+0xf0>
 80097e8:	2d00      	cmp	r5, #0
 80097ea:	da03      	bge.n	80097f4 <_printf_float+0xe4>
 80097ec:	0023      	movs	r3, r4
 80097ee:	222d      	movs	r2, #45	; 0x2d
 80097f0:	3343      	adds	r3, #67	; 0x43
 80097f2:	701a      	strb	r2, [r3, #0]
 80097f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f6:	4d8a      	ldr	r5, [pc, #552]	; (8009a20 <_printf_float+0x310>)
 80097f8:	2b47      	cmp	r3, #71	; 0x47
 80097fa:	d9d4      	bls.n	80097a6 <_printf_float+0x96>
 80097fc:	4d89      	ldr	r5, [pc, #548]	; (8009a24 <_printf_float+0x314>)
 80097fe:	e7d2      	b.n	80097a6 <_printf_float+0x96>
 8009800:	2220      	movs	r2, #32
 8009802:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009804:	6863      	ldr	r3, [r4, #4]
 8009806:	4391      	bics	r1, r2
 8009808:	910e      	str	r1, [sp, #56]	; 0x38
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	d14a      	bne.n	80098a4 <_printf_float+0x194>
 800980e:	3307      	adds	r3, #7
 8009810:	6063      	str	r3, [r4, #4]
 8009812:	2380      	movs	r3, #128	; 0x80
 8009814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009816:	00db      	lsls	r3, r3, #3
 8009818:	4313      	orrs	r3, r2
 800981a:	2200      	movs	r2, #0
 800981c:	9206      	str	r2, [sp, #24]
 800981e:	aa12      	add	r2, sp, #72	; 0x48
 8009820:	9205      	str	r2, [sp, #20]
 8009822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	9204      	str	r2, [sp, #16]
 8009828:	aa11      	add	r2, sp, #68	; 0x44
 800982a:	9203      	str	r2, [sp, #12]
 800982c:	2223      	movs	r2, #35	; 0x23
 800982e:	a908      	add	r1, sp, #32
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	6863      	ldr	r3, [r4, #4]
 8009834:	1852      	adds	r2, r2, r1
 8009836:	9202      	str	r2, [sp, #8]
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	0032      	movs	r2, r6
 800983c:	002b      	movs	r3, r5
 800983e:	0038      	movs	r0, r7
 8009840:	f7ff febe 	bl	80095c0 <__cvt>
 8009844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009846:	0005      	movs	r5, r0
 8009848:	2b47      	cmp	r3, #71	; 0x47
 800984a:	d109      	bne.n	8009860 <_printf_float+0x150>
 800984c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800984e:	1cda      	adds	r2, r3, #3
 8009850:	db02      	blt.n	8009858 <_printf_float+0x148>
 8009852:	6862      	ldr	r2, [r4, #4]
 8009854:	4293      	cmp	r3, r2
 8009856:	dd49      	ble.n	80098ec <_printf_float+0x1dc>
 8009858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800985a:	3b02      	subs	r3, #2
 800985c:	b2db      	uxtb	r3, r3
 800985e:	930a      	str	r3, [sp, #40]	; 0x28
 8009860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009862:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009864:	2b65      	cmp	r3, #101	; 0x65
 8009866:	d824      	bhi.n	80098b2 <_printf_float+0x1a2>
 8009868:	0020      	movs	r0, r4
 800986a:	001a      	movs	r2, r3
 800986c:	3901      	subs	r1, #1
 800986e:	3050      	adds	r0, #80	; 0x50
 8009870:	9111      	str	r1, [sp, #68]	; 0x44
 8009872:	f7ff ff08 	bl	8009686 <__exponent>
 8009876:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009878:	900b      	str	r0, [sp, #44]	; 0x2c
 800987a:	1813      	adds	r3, r2, r0
 800987c:	6123      	str	r3, [r4, #16]
 800987e:	2a01      	cmp	r2, #1
 8009880:	dc02      	bgt.n	8009888 <_printf_float+0x178>
 8009882:	6822      	ldr	r2, [r4, #0]
 8009884:	07d2      	lsls	r2, r2, #31
 8009886:	d501      	bpl.n	800988c <_printf_float+0x17c>
 8009888:	3301      	adds	r3, #1
 800988a:	6123      	str	r3, [r4, #16]
 800988c:	2323      	movs	r3, #35	; 0x23
 800988e:	aa08      	add	r2, sp, #32
 8009890:	189b      	adds	r3, r3, r2
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d100      	bne.n	800989a <_printf_float+0x18a>
 8009898:	e78d      	b.n	80097b6 <_printf_float+0xa6>
 800989a:	0023      	movs	r3, r4
 800989c:	222d      	movs	r2, #45	; 0x2d
 800989e:	3343      	adds	r3, #67	; 0x43
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	e788      	b.n	80097b6 <_printf_float+0xa6>
 80098a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098a6:	2a47      	cmp	r2, #71	; 0x47
 80098a8:	d1b3      	bne.n	8009812 <_printf_float+0x102>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1b1      	bne.n	8009812 <_printf_float+0x102>
 80098ae:	3301      	adds	r3, #1
 80098b0:	e7ae      	b.n	8009810 <_printf_float+0x100>
 80098b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b4:	2b66      	cmp	r3, #102	; 0x66
 80098b6:	d11b      	bne.n	80098f0 <_printf_float+0x1e0>
 80098b8:	6863      	ldr	r3, [r4, #4]
 80098ba:	2900      	cmp	r1, #0
 80098bc:	dd09      	ble.n	80098d2 <_printf_float+0x1c2>
 80098be:	6121      	str	r1, [r4, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d102      	bne.n	80098ca <_printf_float+0x1ba>
 80098c4:	6822      	ldr	r2, [r4, #0]
 80098c6:	07d2      	lsls	r2, r2, #31
 80098c8:	d50b      	bpl.n	80098e2 <_printf_float+0x1d2>
 80098ca:	3301      	adds	r3, #1
 80098cc:	185b      	adds	r3, r3, r1
 80098ce:	6123      	str	r3, [r4, #16]
 80098d0:	e007      	b.n	80098e2 <_printf_float+0x1d2>
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d103      	bne.n	80098de <_printf_float+0x1ce>
 80098d6:	2201      	movs	r2, #1
 80098d8:	6821      	ldr	r1, [r4, #0]
 80098da:	4211      	tst	r1, r2
 80098dc:	d000      	beq.n	80098e0 <_printf_float+0x1d0>
 80098de:	1c9a      	adds	r2, r3, #2
 80098e0:	6122      	str	r2, [r4, #16]
 80098e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80098e6:	2300      	movs	r3, #0
 80098e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80098ea:	e7cf      	b.n	800988c <_printf_float+0x17c>
 80098ec:	2367      	movs	r3, #103	; 0x67
 80098ee:	930a      	str	r3, [sp, #40]	; 0x28
 80098f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80098f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098f4:	4299      	cmp	r1, r3
 80098f6:	db06      	blt.n	8009906 <_printf_float+0x1f6>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	6121      	str	r1, [r4, #16]
 80098fc:	07db      	lsls	r3, r3, #31
 80098fe:	d5f0      	bpl.n	80098e2 <_printf_float+0x1d2>
 8009900:	3101      	adds	r1, #1
 8009902:	6121      	str	r1, [r4, #16]
 8009904:	e7ed      	b.n	80098e2 <_printf_float+0x1d2>
 8009906:	2201      	movs	r2, #1
 8009908:	2900      	cmp	r1, #0
 800990a:	dc01      	bgt.n	8009910 <_printf_float+0x200>
 800990c:	1892      	adds	r2, r2, r2
 800990e:	1a52      	subs	r2, r2, r1
 8009910:	189b      	adds	r3, r3, r2
 8009912:	e7dc      	b.n	80098ce <_printf_float+0x1be>
 8009914:	6822      	ldr	r2, [r4, #0]
 8009916:	0553      	lsls	r3, r2, #21
 8009918:	d408      	bmi.n	800992c <_printf_float+0x21c>
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	002a      	movs	r2, r5
 800991e:	0038      	movs	r0, r7
 8009920:	9908      	ldr	r1, [sp, #32]
 8009922:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009924:	47a8      	blx	r5
 8009926:	3001      	adds	r0, #1
 8009928:	d12a      	bne.n	8009980 <_printf_float+0x270>
 800992a:	e74f      	b.n	80097cc <_printf_float+0xbc>
 800992c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800992e:	2b65      	cmp	r3, #101	; 0x65
 8009930:	d800      	bhi.n	8009934 <_printf_float+0x224>
 8009932:	e0ec      	b.n	8009b0e <_printf_float+0x3fe>
 8009934:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009936:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009938:	2200      	movs	r2, #0
 800993a:	2300      	movs	r3, #0
 800993c:	f7f6 fd86 	bl	800044c <__aeabi_dcmpeq>
 8009940:	2800      	cmp	r0, #0
 8009942:	d034      	beq.n	80099ae <_printf_float+0x29e>
 8009944:	2301      	movs	r3, #1
 8009946:	0038      	movs	r0, r7
 8009948:	4a37      	ldr	r2, [pc, #220]	; (8009a28 <_printf_float+0x318>)
 800994a:	9908      	ldr	r1, [sp, #32]
 800994c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800994e:	47a8      	blx	r5
 8009950:	3001      	adds	r0, #1
 8009952:	d100      	bne.n	8009956 <_printf_float+0x246>
 8009954:	e73a      	b.n	80097cc <_printf_float+0xbc>
 8009956:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800995a:	429a      	cmp	r2, r3
 800995c:	db02      	blt.n	8009964 <_printf_float+0x254>
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	07db      	lsls	r3, r3, #31
 8009962:	d50d      	bpl.n	8009980 <_printf_float+0x270>
 8009964:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009966:	0038      	movs	r0, r7
 8009968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800996a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800996c:	9908      	ldr	r1, [sp, #32]
 800996e:	47a8      	blx	r5
 8009970:	2500      	movs	r5, #0
 8009972:	3001      	adds	r0, #1
 8009974:	d100      	bne.n	8009978 <_printf_float+0x268>
 8009976:	e729      	b.n	80097cc <_printf_float+0xbc>
 8009978:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800997a:	3b01      	subs	r3, #1
 800997c:	42ab      	cmp	r3, r5
 800997e:	dc0a      	bgt.n	8009996 <_printf_float+0x286>
 8009980:	6823      	ldr	r3, [r4, #0]
 8009982:	079b      	lsls	r3, r3, #30
 8009984:	d500      	bpl.n	8009988 <_printf_float+0x278>
 8009986:	e116      	b.n	8009bb6 <_printf_float+0x4a6>
 8009988:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800998a:	68e0      	ldr	r0, [r4, #12]
 800998c:	4298      	cmp	r0, r3
 800998e:	db00      	blt.n	8009992 <_printf_float+0x282>
 8009990:	e71e      	b.n	80097d0 <_printf_float+0xc0>
 8009992:	0018      	movs	r0, r3
 8009994:	e71c      	b.n	80097d0 <_printf_float+0xc0>
 8009996:	0022      	movs	r2, r4
 8009998:	2301      	movs	r3, #1
 800999a:	0038      	movs	r0, r7
 800999c:	9908      	ldr	r1, [sp, #32]
 800999e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80099a0:	321a      	adds	r2, #26
 80099a2:	47b0      	blx	r6
 80099a4:	3001      	adds	r0, #1
 80099a6:	d100      	bne.n	80099aa <_printf_float+0x29a>
 80099a8:	e710      	b.n	80097cc <_printf_float+0xbc>
 80099aa:	3501      	adds	r5, #1
 80099ac:	e7e4      	b.n	8009978 <_printf_float+0x268>
 80099ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	dc3b      	bgt.n	8009a2c <_printf_float+0x31c>
 80099b4:	2301      	movs	r3, #1
 80099b6:	0038      	movs	r0, r7
 80099b8:	4a1b      	ldr	r2, [pc, #108]	; (8009a28 <_printf_float+0x318>)
 80099ba:	9908      	ldr	r1, [sp, #32]
 80099bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80099be:	47b0      	blx	r6
 80099c0:	3001      	adds	r0, #1
 80099c2:	d100      	bne.n	80099c6 <_printf_float+0x2b6>
 80099c4:	e702      	b.n	80097cc <_printf_float+0xbc>
 80099c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099ca:	4313      	orrs	r3, r2
 80099cc:	d102      	bne.n	80099d4 <_printf_float+0x2c4>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	07db      	lsls	r3, r3, #31
 80099d2:	d5d5      	bpl.n	8009980 <_printf_float+0x270>
 80099d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099d6:	0038      	movs	r0, r7
 80099d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099da:	9908      	ldr	r1, [sp, #32]
 80099dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80099de:	47b0      	blx	r6
 80099e0:	2300      	movs	r3, #0
 80099e2:	3001      	adds	r0, #1
 80099e4:	d100      	bne.n	80099e8 <_printf_float+0x2d8>
 80099e6:	e6f1      	b.n	80097cc <_printf_float+0xbc>
 80099e8:	930a      	str	r3, [sp, #40]	; 0x28
 80099ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ee:	425b      	negs	r3, r3
 80099f0:	4293      	cmp	r3, r2
 80099f2:	dc01      	bgt.n	80099f8 <_printf_float+0x2e8>
 80099f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099f6:	e791      	b.n	800991c <_printf_float+0x20c>
 80099f8:	0022      	movs	r2, r4
 80099fa:	2301      	movs	r3, #1
 80099fc:	0038      	movs	r0, r7
 80099fe:	9908      	ldr	r1, [sp, #32]
 8009a00:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009a02:	321a      	adds	r2, #26
 8009a04:	47b0      	blx	r6
 8009a06:	3001      	adds	r0, #1
 8009a08:	d100      	bne.n	8009a0c <_printf_float+0x2fc>
 8009a0a:	e6df      	b.n	80097cc <_printf_float+0xbc>
 8009a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a0e:	3301      	adds	r3, #1
 8009a10:	e7ea      	b.n	80099e8 <_printf_float+0x2d8>
 8009a12:	46c0      	nop			; (mov r8, r8)
 8009a14:	7fefffff 	.word	0x7fefffff
 8009a18:	0800e4e8 	.word	0x0800e4e8
 8009a1c:	0800e4ec 	.word	0x0800e4ec
 8009a20:	0800e4f0 	.word	0x0800e4f0
 8009a24:	0800e4f4 	.word	0x0800e4f4
 8009a28:	0800e4f8 	.word	0x0800e4f8
 8009a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a30:	920a      	str	r2, [sp, #40]	; 0x28
 8009a32:	429a      	cmp	r2, r3
 8009a34:	dd00      	ble.n	8009a38 <_printf_float+0x328>
 8009a36:	930a      	str	r3, [sp, #40]	; 0x28
 8009a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	dc3d      	bgt.n	8009aba <_printf_float+0x3aa>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	930e      	str	r3, [sp, #56]	; 0x38
 8009a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a44:	43db      	mvns	r3, r3
 8009a46:	17db      	asrs	r3, r3, #31
 8009a48:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a52:	4013      	ands	r3, r2
 8009a54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	dc36      	bgt.n	8009acc <_printf_float+0x3bc>
 8009a5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009a60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a62:	429a      	cmp	r2, r3
 8009a64:	db40      	blt.n	8009ae8 <_printf_float+0x3d8>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	07db      	lsls	r3, r3, #31
 8009a6a:	d43d      	bmi.n	8009ae8 <_printf_float+0x3d8>
 8009a6c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009a6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a72:	1af3      	subs	r3, r6, r3
 8009a74:	1ab6      	subs	r6, r6, r2
 8009a76:	429e      	cmp	r6, r3
 8009a78:	dd00      	ble.n	8009a7c <_printf_float+0x36c>
 8009a7a:	001e      	movs	r6, r3
 8009a7c:	2e00      	cmp	r6, #0
 8009a7e:	dc3c      	bgt.n	8009afa <_printf_float+0x3ea>
 8009a80:	2300      	movs	r3, #0
 8009a82:	930a      	str	r3, [sp, #40]	; 0x28
 8009a84:	43f3      	mvns	r3, r6
 8009a86:	17db      	asrs	r3, r3, #31
 8009a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009a8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a8e:	1a9b      	subs	r3, r3, r2
 8009a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a92:	4032      	ands	r2, r6
 8009a94:	1a9b      	subs	r3, r3, r2
 8009a96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	dc00      	bgt.n	8009a9e <_printf_float+0x38e>
 8009a9c:	e770      	b.n	8009980 <_printf_float+0x270>
 8009a9e:	0022      	movs	r2, r4
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	0038      	movs	r0, r7
 8009aa4:	9908      	ldr	r1, [sp, #32]
 8009aa6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009aa8:	321a      	adds	r2, #26
 8009aaa:	47a8      	blx	r5
 8009aac:	3001      	adds	r0, #1
 8009aae:	d100      	bne.n	8009ab2 <_printf_float+0x3a2>
 8009ab0:	e68c      	b.n	80097cc <_printf_float+0xbc>
 8009ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab8:	e7e7      	b.n	8009a8a <_printf_float+0x37a>
 8009aba:	002a      	movs	r2, r5
 8009abc:	0038      	movs	r0, r7
 8009abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac0:	9908      	ldr	r1, [sp, #32]
 8009ac2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009ac4:	47b0      	blx	r6
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d1b9      	bne.n	8009a3e <_printf_float+0x32e>
 8009aca:	e67f      	b.n	80097cc <_printf_float+0xbc>
 8009acc:	0022      	movs	r2, r4
 8009ace:	2301      	movs	r3, #1
 8009ad0:	0038      	movs	r0, r7
 8009ad2:	9908      	ldr	r1, [sp, #32]
 8009ad4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009ad6:	321a      	adds	r2, #26
 8009ad8:	47b0      	blx	r6
 8009ada:	3001      	adds	r0, #1
 8009adc:	d100      	bne.n	8009ae0 <_printf_float+0x3d0>
 8009ade:	e675      	b.n	80097cc <_printf_float+0xbc>
 8009ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	930e      	str	r3, [sp, #56]	; 0x38
 8009ae6:	e7b0      	b.n	8009a4a <_printf_float+0x33a>
 8009ae8:	0038      	movs	r0, r7
 8009aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aee:	9908      	ldr	r1, [sp, #32]
 8009af0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009af2:	47b0      	blx	r6
 8009af4:	3001      	adds	r0, #1
 8009af6:	d1b9      	bne.n	8009a6c <_printf_float+0x35c>
 8009af8:	e668      	b.n	80097cc <_printf_float+0xbc>
 8009afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009afc:	0038      	movs	r0, r7
 8009afe:	18ea      	adds	r2, r5, r3
 8009b00:	9908      	ldr	r1, [sp, #32]
 8009b02:	0033      	movs	r3, r6
 8009b04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b06:	47a8      	blx	r5
 8009b08:	3001      	adds	r0, #1
 8009b0a:	d1b9      	bne.n	8009a80 <_printf_float+0x370>
 8009b0c:	e65e      	b.n	80097cc <_printf_float+0xbc>
 8009b0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	dc02      	bgt.n	8009b1a <_printf_float+0x40a>
 8009b14:	2301      	movs	r3, #1
 8009b16:	421a      	tst	r2, r3
 8009b18:	d03a      	beq.n	8009b90 <_printf_float+0x480>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	002a      	movs	r2, r5
 8009b1e:	0038      	movs	r0, r7
 8009b20:	9908      	ldr	r1, [sp, #32]
 8009b22:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b24:	47b0      	blx	r6
 8009b26:	3001      	adds	r0, #1
 8009b28:	d100      	bne.n	8009b2c <_printf_float+0x41c>
 8009b2a:	e64f      	b.n	80097cc <_printf_float+0xbc>
 8009b2c:	0038      	movs	r0, r7
 8009b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b32:	9908      	ldr	r1, [sp, #32]
 8009b34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b36:	47b0      	blx	r6
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d100      	bne.n	8009b3e <_printf_float+0x42e>
 8009b3c:	e646      	b.n	80097cc <_printf_float+0xbc>
 8009b3e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009b40:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009b42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b44:	2200      	movs	r2, #0
 8009b46:	001e      	movs	r6, r3
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f7f6 fc7f 	bl	800044c <__aeabi_dcmpeq>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d11c      	bne.n	8009b8c <_printf_float+0x47c>
 8009b52:	0033      	movs	r3, r6
 8009b54:	1c6a      	adds	r2, r5, #1
 8009b56:	3b01      	subs	r3, #1
 8009b58:	0038      	movs	r0, r7
 8009b5a:	9908      	ldr	r1, [sp, #32]
 8009b5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b5e:	47a8      	blx	r5
 8009b60:	3001      	adds	r0, #1
 8009b62:	d10f      	bne.n	8009b84 <_printf_float+0x474>
 8009b64:	e632      	b.n	80097cc <_printf_float+0xbc>
 8009b66:	0022      	movs	r2, r4
 8009b68:	2301      	movs	r3, #1
 8009b6a:	0038      	movs	r0, r7
 8009b6c:	9908      	ldr	r1, [sp, #32]
 8009b6e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b70:	321a      	adds	r2, #26
 8009b72:	47b0      	blx	r6
 8009b74:	3001      	adds	r0, #1
 8009b76:	d100      	bne.n	8009b7a <_printf_float+0x46a>
 8009b78:	e628      	b.n	80097cc <_printf_float+0xbc>
 8009b7a:	3501      	adds	r5, #1
 8009b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	42ab      	cmp	r3, r5
 8009b82:	dcf0      	bgt.n	8009b66 <_printf_float+0x456>
 8009b84:	0022      	movs	r2, r4
 8009b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b88:	3250      	adds	r2, #80	; 0x50
 8009b8a:	e6c8      	b.n	800991e <_printf_float+0x20e>
 8009b8c:	2500      	movs	r5, #0
 8009b8e:	e7f5      	b.n	8009b7c <_printf_float+0x46c>
 8009b90:	002a      	movs	r2, r5
 8009b92:	e7e1      	b.n	8009b58 <_printf_float+0x448>
 8009b94:	0022      	movs	r2, r4
 8009b96:	2301      	movs	r3, #1
 8009b98:	0038      	movs	r0, r7
 8009b9a:	9908      	ldr	r1, [sp, #32]
 8009b9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b9e:	3219      	adds	r2, #25
 8009ba0:	47b0      	blx	r6
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	d100      	bne.n	8009ba8 <_printf_float+0x498>
 8009ba6:	e611      	b.n	80097cc <_printf_float+0xbc>
 8009ba8:	3501      	adds	r5, #1
 8009baa:	68e3      	ldr	r3, [r4, #12]
 8009bac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009bae:	1a9b      	subs	r3, r3, r2
 8009bb0:	42ab      	cmp	r3, r5
 8009bb2:	dcef      	bgt.n	8009b94 <_printf_float+0x484>
 8009bb4:	e6e8      	b.n	8009988 <_printf_float+0x278>
 8009bb6:	2500      	movs	r5, #0
 8009bb8:	e7f7      	b.n	8009baa <_printf_float+0x49a>
 8009bba:	46c0      	nop			; (mov r8, r8)

08009bbc <_printf_common>:
 8009bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bbe:	0016      	movs	r6, r2
 8009bc0:	9301      	str	r3, [sp, #4]
 8009bc2:	688a      	ldr	r2, [r1, #8]
 8009bc4:	690b      	ldr	r3, [r1, #16]
 8009bc6:	000c      	movs	r4, r1
 8009bc8:	9000      	str	r0, [sp, #0]
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	da00      	bge.n	8009bd0 <_printf_common+0x14>
 8009bce:	0013      	movs	r3, r2
 8009bd0:	0022      	movs	r2, r4
 8009bd2:	6033      	str	r3, [r6, #0]
 8009bd4:	3243      	adds	r2, #67	; 0x43
 8009bd6:	7812      	ldrb	r2, [r2, #0]
 8009bd8:	2a00      	cmp	r2, #0
 8009bda:	d001      	beq.n	8009be0 <_printf_common+0x24>
 8009bdc:	3301      	adds	r3, #1
 8009bde:	6033      	str	r3, [r6, #0]
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	069b      	lsls	r3, r3, #26
 8009be4:	d502      	bpl.n	8009bec <_printf_common+0x30>
 8009be6:	6833      	ldr	r3, [r6, #0]
 8009be8:	3302      	adds	r3, #2
 8009bea:	6033      	str	r3, [r6, #0]
 8009bec:	6822      	ldr	r2, [r4, #0]
 8009bee:	2306      	movs	r3, #6
 8009bf0:	0015      	movs	r5, r2
 8009bf2:	401d      	ands	r5, r3
 8009bf4:	421a      	tst	r2, r3
 8009bf6:	d027      	beq.n	8009c48 <_printf_common+0x8c>
 8009bf8:	0023      	movs	r3, r4
 8009bfa:	3343      	adds	r3, #67	; 0x43
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	1e5a      	subs	r2, r3, #1
 8009c00:	4193      	sbcs	r3, r2
 8009c02:	6822      	ldr	r2, [r4, #0]
 8009c04:	0692      	lsls	r2, r2, #26
 8009c06:	d430      	bmi.n	8009c6a <_printf_common+0xae>
 8009c08:	0022      	movs	r2, r4
 8009c0a:	9901      	ldr	r1, [sp, #4]
 8009c0c:	9800      	ldr	r0, [sp, #0]
 8009c0e:	9d08      	ldr	r5, [sp, #32]
 8009c10:	3243      	adds	r2, #67	; 0x43
 8009c12:	47a8      	blx	r5
 8009c14:	3001      	adds	r0, #1
 8009c16:	d025      	beq.n	8009c64 <_printf_common+0xa8>
 8009c18:	2206      	movs	r2, #6
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	2500      	movs	r5, #0
 8009c1e:	4013      	ands	r3, r2
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d105      	bne.n	8009c30 <_printf_common+0x74>
 8009c24:	6833      	ldr	r3, [r6, #0]
 8009c26:	68e5      	ldr	r5, [r4, #12]
 8009c28:	1aed      	subs	r5, r5, r3
 8009c2a:	43eb      	mvns	r3, r5
 8009c2c:	17db      	asrs	r3, r3, #31
 8009c2e:	401d      	ands	r5, r3
 8009c30:	68a3      	ldr	r3, [r4, #8]
 8009c32:	6922      	ldr	r2, [r4, #16]
 8009c34:	4293      	cmp	r3, r2
 8009c36:	dd01      	ble.n	8009c3c <_printf_common+0x80>
 8009c38:	1a9b      	subs	r3, r3, r2
 8009c3a:	18ed      	adds	r5, r5, r3
 8009c3c:	2600      	movs	r6, #0
 8009c3e:	42b5      	cmp	r5, r6
 8009c40:	d120      	bne.n	8009c84 <_printf_common+0xc8>
 8009c42:	2000      	movs	r0, #0
 8009c44:	e010      	b.n	8009c68 <_printf_common+0xac>
 8009c46:	3501      	adds	r5, #1
 8009c48:	68e3      	ldr	r3, [r4, #12]
 8009c4a:	6832      	ldr	r2, [r6, #0]
 8009c4c:	1a9b      	subs	r3, r3, r2
 8009c4e:	42ab      	cmp	r3, r5
 8009c50:	ddd2      	ble.n	8009bf8 <_printf_common+0x3c>
 8009c52:	0022      	movs	r2, r4
 8009c54:	2301      	movs	r3, #1
 8009c56:	9901      	ldr	r1, [sp, #4]
 8009c58:	9800      	ldr	r0, [sp, #0]
 8009c5a:	9f08      	ldr	r7, [sp, #32]
 8009c5c:	3219      	adds	r2, #25
 8009c5e:	47b8      	blx	r7
 8009c60:	3001      	adds	r0, #1
 8009c62:	d1f0      	bne.n	8009c46 <_printf_common+0x8a>
 8009c64:	2001      	movs	r0, #1
 8009c66:	4240      	negs	r0, r0
 8009c68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c6a:	2030      	movs	r0, #48	; 0x30
 8009c6c:	18e1      	adds	r1, r4, r3
 8009c6e:	3143      	adds	r1, #67	; 0x43
 8009c70:	7008      	strb	r0, [r1, #0]
 8009c72:	0021      	movs	r1, r4
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	3145      	adds	r1, #69	; 0x45
 8009c78:	7809      	ldrb	r1, [r1, #0]
 8009c7a:	18a2      	adds	r2, r4, r2
 8009c7c:	3243      	adds	r2, #67	; 0x43
 8009c7e:	3302      	adds	r3, #2
 8009c80:	7011      	strb	r1, [r2, #0]
 8009c82:	e7c1      	b.n	8009c08 <_printf_common+0x4c>
 8009c84:	0022      	movs	r2, r4
 8009c86:	2301      	movs	r3, #1
 8009c88:	9901      	ldr	r1, [sp, #4]
 8009c8a:	9800      	ldr	r0, [sp, #0]
 8009c8c:	9f08      	ldr	r7, [sp, #32]
 8009c8e:	321a      	adds	r2, #26
 8009c90:	47b8      	blx	r7
 8009c92:	3001      	adds	r0, #1
 8009c94:	d0e6      	beq.n	8009c64 <_printf_common+0xa8>
 8009c96:	3601      	adds	r6, #1
 8009c98:	e7d1      	b.n	8009c3e <_printf_common+0x82>
	...

08009c9c <_printf_i>:
 8009c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c9e:	b08b      	sub	sp, #44	; 0x2c
 8009ca0:	9206      	str	r2, [sp, #24]
 8009ca2:	000a      	movs	r2, r1
 8009ca4:	3243      	adds	r2, #67	; 0x43
 8009ca6:	9307      	str	r3, [sp, #28]
 8009ca8:	9005      	str	r0, [sp, #20]
 8009caa:	9204      	str	r2, [sp, #16]
 8009cac:	7e0a      	ldrb	r2, [r1, #24]
 8009cae:	000c      	movs	r4, r1
 8009cb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cb2:	2a78      	cmp	r2, #120	; 0x78
 8009cb4:	d809      	bhi.n	8009cca <_printf_i+0x2e>
 8009cb6:	2a62      	cmp	r2, #98	; 0x62
 8009cb8:	d80b      	bhi.n	8009cd2 <_printf_i+0x36>
 8009cba:	2a00      	cmp	r2, #0
 8009cbc:	d100      	bne.n	8009cc0 <_printf_i+0x24>
 8009cbe:	e0be      	b.n	8009e3e <_printf_i+0x1a2>
 8009cc0:	497c      	ldr	r1, [pc, #496]	; (8009eb4 <_printf_i+0x218>)
 8009cc2:	9103      	str	r1, [sp, #12]
 8009cc4:	2a58      	cmp	r2, #88	; 0x58
 8009cc6:	d100      	bne.n	8009cca <_printf_i+0x2e>
 8009cc8:	e093      	b.n	8009df2 <_printf_i+0x156>
 8009cca:	0026      	movs	r6, r4
 8009ccc:	3642      	adds	r6, #66	; 0x42
 8009cce:	7032      	strb	r2, [r6, #0]
 8009cd0:	e022      	b.n	8009d18 <_printf_i+0x7c>
 8009cd2:	0010      	movs	r0, r2
 8009cd4:	3863      	subs	r0, #99	; 0x63
 8009cd6:	2815      	cmp	r0, #21
 8009cd8:	d8f7      	bhi.n	8009cca <_printf_i+0x2e>
 8009cda:	f7f6 fa27 	bl	800012c <__gnu_thumb1_case_shi>
 8009cde:	0016      	.short	0x0016
 8009ce0:	fff6001f 	.word	0xfff6001f
 8009ce4:	fff6fff6 	.word	0xfff6fff6
 8009ce8:	001ffff6 	.word	0x001ffff6
 8009cec:	fff6fff6 	.word	0xfff6fff6
 8009cf0:	fff6fff6 	.word	0xfff6fff6
 8009cf4:	003600a3 	.word	0x003600a3
 8009cf8:	fff60083 	.word	0xfff60083
 8009cfc:	00b4fff6 	.word	0x00b4fff6
 8009d00:	0036fff6 	.word	0x0036fff6
 8009d04:	fff6fff6 	.word	0xfff6fff6
 8009d08:	0087      	.short	0x0087
 8009d0a:	0026      	movs	r6, r4
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	3642      	adds	r6, #66	; 0x42
 8009d10:	1d11      	adds	r1, r2, #4
 8009d12:	6019      	str	r1, [r3, #0]
 8009d14:	6813      	ldr	r3, [r2, #0]
 8009d16:	7033      	strb	r3, [r6, #0]
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e0a2      	b.n	8009e62 <_printf_i+0x1c6>
 8009d1c:	6818      	ldr	r0, [r3, #0]
 8009d1e:	6809      	ldr	r1, [r1, #0]
 8009d20:	1d02      	adds	r2, r0, #4
 8009d22:	060d      	lsls	r5, r1, #24
 8009d24:	d50b      	bpl.n	8009d3e <_printf_i+0xa2>
 8009d26:	6805      	ldr	r5, [r0, #0]
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	2d00      	cmp	r5, #0
 8009d2c:	da03      	bge.n	8009d36 <_printf_i+0x9a>
 8009d2e:	232d      	movs	r3, #45	; 0x2d
 8009d30:	9a04      	ldr	r2, [sp, #16]
 8009d32:	426d      	negs	r5, r5
 8009d34:	7013      	strb	r3, [r2, #0]
 8009d36:	4b5f      	ldr	r3, [pc, #380]	; (8009eb4 <_printf_i+0x218>)
 8009d38:	270a      	movs	r7, #10
 8009d3a:	9303      	str	r3, [sp, #12]
 8009d3c:	e01b      	b.n	8009d76 <_printf_i+0xda>
 8009d3e:	6805      	ldr	r5, [r0, #0]
 8009d40:	601a      	str	r2, [r3, #0]
 8009d42:	0649      	lsls	r1, r1, #25
 8009d44:	d5f1      	bpl.n	8009d2a <_printf_i+0x8e>
 8009d46:	b22d      	sxth	r5, r5
 8009d48:	e7ef      	b.n	8009d2a <_printf_i+0x8e>
 8009d4a:	680d      	ldr	r5, [r1, #0]
 8009d4c:	6819      	ldr	r1, [r3, #0]
 8009d4e:	1d08      	adds	r0, r1, #4
 8009d50:	6018      	str	r0, [r3, #0]
 8009d52:	062e      	lsls	r6, r5, #24
 8009d54:	d501      	bpl.n	8009d5a <_printf_i+0xbe>
 8009d56:	680d      	ldr	r5, [r1, #0]
 8009d58:	e003      	b.n	8009d62 <_printf_i+0xc6>
 8009d5a:	066d      	lsls	r5, r5, #25
 8009d5c:	d5fb      	bpl.n	8009d56 <_printf_i+0xba>
 8009d5e:	680d      	ldr	r5, [r1, #0]
 8009d60:	b2ad      	uxth	r5, r5
 8009d62:	4b54      	ldr	r3, [pc, #336]	; (8009eb4 <_printf_i+0x218>)
 8009d64:	2708      	movs	r7, #8
 8009d66:	9303      	str	r3, [sp, #12]
 8009d68:	2a6f      	cmp	r2, #111	; 0x6f
 8009d6a:	d000      	beq.n	8009d6e <_printf_i+0xd2>
 8009d6c:	3702      	adds	r7, #2
 8009d6e:	0023      	movs	r3, r4
 8009d70:	2200      	movs	r2, #0
 8009d72:	3343      	adds	r3, #67	; 0x43
 8009d74:	701a      	strb	r2, [r3, #0]
 8009d76:	6863      	ldr	r3, [r4, #4]
 8009d78:	60a3      	str	r3, [r4, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	db03      	blt.n	8009d86 <_printf_i+0xea>
 8009d7e:	2104      	movs	r1, #4
 8009d80:	6822      	ldr	r2, [r4, #0]
 8009d82:	438a      	bics	r2, r1
 8009d84:	6022      	str	r2, [r4, #0]
 8009d86:	2d00      	cmp	r5, #0
 8009d88:	d102      	bne.n	8009d90 <_printf_i+0xf4>
 8009d8a:	9e04      	ldr	r6, [sp, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00c      	beq.n	8009daa <_printf_i+0x10e>
 8009d90:	9e04      	ldr	r6, [sp, #16]
 8009d92:	0028      	movs	r0, r5
 8009d94:	0039      	movs	r1, r7
 8009d96:	f7f6 fa59 	bl	800024c <__aeabi_uidivmod>
 8009d9a:	9b03      	ldr	r3, [sp, #12]
 8009d9c:	3e01      	subs	r6, #1
 8009d9e:	5c5b      	ldrb	r3, [r3, r1]
 8009da0:	7033      	strb	r3, [r6, #0]
 8009da2:	002b      	movs	r3, r5
 8009da4:	0005      	movs	r5, r0
 8009da6:	429f      	cmp	r7, r3
 8009da8:	d9f3      	bls.n	8009d92 <_printf_i+0xf6>
 8009daa:	2f08      	cmp	r7, #8
 8009dac:	d109      	bne.n	8009dc2 <_printf_i+0x126>
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	07db      	lsls	r3, r3, #31
 8009db2:	d506      	bpl.n	8009dc2 <_printf_i+0x126>
 8009db4:	6862      	ldr	r2, [r4, #4]
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	dc02      	bgt.n	8009dc2 <_printf_i+0x126>
 8009dbc:	2330      	movs	r3, #48	; 0x30
 8009dbe:	3e01      	subs	r6, #1
 8009dc0:	7033      	strb	r3, [r6, #0]
 8009dc2:	9b04      	ldr	r3, [sp, #16]
 8009dc4:	1b9b      	subs	r3, r3, r6
 8009dc6:	6123      	str	r3, [r4, #16]
 8009dc8:	9b07      	ldr	r3, [sp, #28]
 8009dca:	0021      	movs	r1, r4
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	9805      	ldr	r0, [sp, #20]
 8009dd0:	9b06      	ldr	r3, [sp, #24]
 8009dd2:	aa09      	add	r2, sp, #36	; 0x24
 8009dd4:	f7ff fef2 	bl	8009bbc <_printf_common>
 8009dd8:	3001      	adds	r0, #1
 8009dda:	d147      	bne.n	8009e6c <_printf_i+0x1d0>
 8009ddc:	2001      	movs	r0, #1
 8009dde:	4240      	negs	r0, r0
 8009de0:	b00b      	add	sp, #44	; 0x2c
 8009de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009de4:	2220      	movs	r2, #32
 8009de6:	6809      	ldr	r1, [r1, #0]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	6022      	str	r2, [r4, #0]
 8009dec:	2278      	movs	r2, #120	; 0x78
 8009dee:	4932      	ldr	r1, [pc, #200]	; (8009eb8 <_printf_i+0x21c>)
 8009df0:	9103      	str	r1, [sp, #12]
 8009df2:	0021      	movs	r1, r4
 8009df4:	3145      	adds	r1, #69	; 0x45
 8009df6:	700a      	strb	r2, [r1, #0]
 8009df8:	6819      	ldr	r1, [r3, #0]
 8009dfa:	6822      	ldr	r2, [r4, #0]
 8009dfc:	c920      	ldmia	r1!, {r5}
 8009dfe:	0610      	lsls	r0, r2, #24
 8009e00:	d402      	bmi.n	8009e08 <_printf_i+0x16c>
 8009e02:	0650      	lsls	r0, r2, #25
 8009e04:	d500      	bpl.n	8009e08 <_printf_i+0x16c>
 8009e06:	b2ad      	uxth	r5, r5
 8009e08:	6019      	str	r1, [r3, #0]
 8009e0a:	07d3      	lsls	r3, r2, #31
 8009e0c:	d502      	bpl.n	8009e14 <_printf_i+0x178>
 8009e0e:	2320      	movs	r3, #32
 8009e10:	4313      	orrs	r3, r2
 8009e12:	6023      	str	r3, [r4, #0]
 8009e14:	2710      	movs	r7, #16
 8009e16:	2d00      	cmp	r5, #0
 8009e18:	d1a9      	bne.n	8009d6e <_printf_i+0xd2>
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	4393      	bics	r3, r2
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	e7a4      	b.n	8009d6e <_printf_i+0xd2>
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	680d      	ldr	r5, [r1, #0]
 8009e28:	1d10      	adds	r0, r2, #4
 8009e2a:	6949      	ldr	r1, [r1, #20]
 8009e2c:	6018      	str	r0, [r3, #0]
 8009e2e:	6813      	ldr	r3, [r2, #0]
 8009e30:	062e      	lsls	r6, r5, #24
 8009e32:	d501      	bpl.n	8009e38 <_printf_i+0x19c>
 8009e34:	6019      	str	r1, [r3, #0]
 8009e36:	e002      	b.n	8009e3e <_printf_i+0x1a2>
 8009e38:	066d      	lsls	r5, r5, #25
 8009e3a:	d5fb      	bpl.n	8009e34 <_printf_i+0x198>
 8009e3c:	8019      	strh	r1, [r3, #0]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9e04      	ldr	r6, [sp, #16]
 8009e42:	6123      	str	r3, [r4, #16]
 8009e44:	e7c0      	b.n	8009dc8 <_printf_i+0x12c>
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	1d11      	adds	r1, r2, #4
 8009e4a:	6019      	str	r1, [r3, #0]
 8009e4c:	6816      	ldr	r6, [r2, #0]
 8009e4e:	2100      	movs	r1, #0
 8009e50:	0030      	movs	r0, r6
 8009e52:	6862      	ldr	r2, [r4, #4]
 8009e54:	f000 fbf1 	bl	800a63a <memchr>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d001      	beq.n	8009e60 <_printf_i+0x1c4>
 8009e5c:	1b80      	subs	r0, r0, r6
 8009e5e:	6060      	str	r0, [r4, #4]
 8009e60:	6863      	ldr	r3, [r4, #4]
 8009e62:	6123      	str	r3, [r4, #16]
 8009e64:	2300      	movs	r3, #0
 8009e66:	9a04      	ldr	r2, [sp, #16]
 8009e68:	7013      	strb	r3, [r2, #0]
 8009e6a:	e7ad      	b.n	8009dc8 <_printf_i+0x12c>
 8009e6c:	0032      	movs	r2, r6
 8009e6e:	6923      	ldr	r3, [r4, #16]
 8009e70:	9906      	ldr	r1, [sp, #24]
 8009e72:	9805      	ldr	r0, [sp, #20]
 8009e74:	9d07      	ldr	r5, [sp, #28]
 8009e76:	47a8      	blx	r5
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d0af      	beq.n	8009ddc <_printf_i+0x140>
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	079b      	lsls	r3, r3, #30
 8009e80:	d415      	bmi.n	8009eae <_printf_i+0x212>
 8009e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e84:	68e0      	ldr	r0, [r4, #12]
 8009e86:	4298      	cmp	r0, r3
 8009e88:	daaa      	bge.n	8009de0 <_printf_i+0x144>
 8009e8a:	0018      	movs	r0, r3
 8009e8c:	e7a8      	b.n	8009de0 <_printf_i+0x144>
 8009e8e:	0022      	movs	r2, r4
 8009e90:	2301      	movs	r3, #1
 8009e92:	9906      	ldr	r1, [sp, #24]
 8009e94:	9805      	ldr	r0, [sp, #20]
 8009e96:	9e07      	ldr	r6, [sp, #28]
 8009e98:	3219      	adds	r2, #25
 8009e9a:	47b0      	blx	r6
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	d09d      	beq.n	8009ddc <_printf_i+0x140>
 8009ea0:	3501      	adds	r5, #1
 8009ea2:	68e3      	ldr	r3, [r4, #12]
 8009ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ea6:	1a9b      	subs	r3, r3, r2
 8009ea8:	42ab      	cmp	r3, r5
 8009eaa:	dcf0      	bgt.n	8009e8e <_printf_i+0x1f2>
 8009eac:	e7e9      	b.n	8009e82 <_printf_i+0x1e6>
 8009eae:	2500      	movs	r5, #0
 8009eb0:	e7f7      	b.n	8009ea2 <_printf_i+0x206>
 8009eb2:	46c0      	nop			; (mov r8, r8)
 8009eb4:	0800e4fa 	.word	0x0800e4fa
 8009eb8:	0800e50b 	.word	0x0800e50b

08009ebc <_scanf_float>:
 8009ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ebe:	b08b      	sub	sp, #44	; 0x2c
 8009ec0:	0016      	movs	r6, r2
 8009ec2:	9002      	str	r0, [sp, #8]
 8009ec4:	22ae      	movs	r2, #174	; 0xae
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	9307      	str	r3, [sp, #28]
 8009eca:	688b      	ldr	r3, [r1, #8]
 8009ecc:	000f      	movs	r7, r1
 8009ece:	1e59      	subs	r1, r3, #1
 8009ed0:	0052      	lsls	r2, r2, #1
 8009ed2:	9006      	str	r0, [sp, #24]
 8009ed4:	4291      	cmp	r1, r2
 8009ed6:	d905      	bls.n	8009ee4 <_scanf_float+0x28>
 8009ed8:	3b5e      	subs	r3, #94	; 0x5e
 8009eda:	3bff      	subs	r3, #255	; 0xff
 8009edc:	9306      	str	r3, [sp, #24]
 8009ede:	235e      	movs	r3, #94	; 0x5e
 8009ee0:	33ff      	adds	r3, #255	; 0xff
 8009ee2:	60bb      	str	r3, [r7, #8]
 8009ee4:	23f0      	movs	r3, #240	; 0xf0
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	00db      	lsls	r3, r3, #3
 8009eea:	4313      	orrs	r3, r2
 8009eec:	603b      	str	r3, [r7, #0]
 8009eee:	003b      	movs	r3, r7
 8009ef0:	2400      	movs	r4, #0
 8009ef2:	331c      	adds	r3, #28
 8009ef4:	001d      	movs	r5, r3
 8009ef6:	9304      	str	r3, [sp, #16]
 8009ef8:	9403      	str	r4, [sp, #12]
 8009efa:	9409      	str	r4, [sp, #36]	; 0x24
 8009efc:	9408      	str	r4, [sp, #32]
 8009efe:	9401      	str	r4, [sp, #4]
 8009f00:	9405      	str	r4, [sp, #20]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	2a00      	cmp	r2, #0
 8009f06:	d00a      	beq.n	8009f1e <_scanf_float+0x62>
 8009f08:	6833      	ldr	r3, [r6, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	2b4e      	cmp	r3, #78	; 0x4e
 8009f0e:	d844      	bhi.n	8009f9a <_scanf_float+0xde>
 8009f10:	0018      	movs	r0, r3
 8009f12:	2b40      	cmp	r3, #64	; 0x40
 8009f14:	d82c      	bhi.n	8009f70 <_scanf_float+0xb4>
 8009f16:	382b      	subs	r0, #43	; 0x2b
 8009f18:	b2c1      	uxtb	r1, r0
 8009f1a:	290e      	cmp	r1, #14
 8009f1c:	d92a      	bls.n	8009f74 <_scanf_float+0xb8>
 8009f1e:	9b01      	ldr	r3, [sp, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d003      	beq.n	8009f2c <_scanf_float+0x70>
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	4aa3      	ldr	r2, [pc, #652]	; (800a1b4 <_scanf_float+0x2f8>)
 8009f28:	4013      	ands	r3, r2
 8009f2a:	603b      	str	r3, [r7, #0]
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d900      	bls.n	8009f36 <_scanf_float+0x7a>
 8009f34:	e0f9      	b.n	800a12a <_scanf_float+0x26e>
 8009f36:	24be      	movs	r4, #190	; 0xbe
 8009f38:	0064      	lsls	r4, r4, #1
 8009f3a:	9b04      	ldr	r3, [sp, #16]
 8009f3c:	429d      	cmp	r5, r3
 8009f3e:	d900      	bls.n	8009f42 <_scanf_float+0x86>
 8009f40:	e0e9      	b.n	800a116 <_scanf_float+0x25a>
 8009f42:	2301      	movs	r3, #1
 8009f44:	9303      	str	r3, [sp, #12]
 8009f46:	e183      	b.n	800a250 <_scanf_float+0x394>
 8009f48:	0018      	movs	r0, r3
 8009f4a:	3861      	subs	r0, #97	; 0x61
 8009f4c:	280d      	cmp	r0, #13
 8009f4e:	d8e6      	bhi.n	8009f1e <_scanf_float+0x62>
 8009f50:	f7f6 f8ec 	bl	800012c <__gnu_thumb1_case_shi>
 8009f54:	ffe50083 	.word	0xffe50083
 8009f58:	ffe5ffe5 	.word	0xffe5ffe5
 8009f5c:	00a200b6 	.word	0x00a200b6
 8009f60:	ffe5ffe5 	.word	0xffe5ffe5
 8009f64:	ffe50089 	.word	0xffe50089
 8009f68:	ffe5ffe5 	.word	0xffe5ffe5
 8009f6c:	0065ffe5 	.word	0x0065ffe5
 8009f70:	3841      	subs	r0, #65	; 0x41
 8009f72:	e7eb      	b.n	8009f4c <_scanf_float+0x90>
 8009f74:	280e      	cmp	r0, #14
 8009f76:	d8d2      	bhi.n	8009f1e <_scanf_float+0x62>
 8009f78:	f7f6 f8d8 	bl	800012c <__gnu_thumb1_case_shi>
 8009f7c:	ffd1004b 	.word	0xffd1004b
 8009f80:	0098004b 	.word	0x0098004b
 8009f84:	0020ffd1 	.word	0x0020ffd1
 8009f88:	00400040 	.word	0x00400040
 8009f8c:	00400040 	.word	0x00400040
 8009f90:	00400040 	.word	0x00400040
 8009f94:	00400040 	.word	0x00400040
 8009f98:	0040      	.short	0x0040
 8009f9a:	2b6e      	cmp	r3, #110	; 0x6e
 8009f9c:	d809      	bhi.n	8009fb2 <_scanf_float+0xf6>
 8009f9e:	2b60      	cmp	r3, #96	; 0x60
 8009fa0:	d8d2      	bhi.n	8009f48 <_scanf_float+0x8c>
 8009fa2:	2b54      	cmp	r3, #84	; 0x54
 8009fa4:	d07d      	beq.n	800a0a2 <_scanf_float+0x1e6>
 8009fa6:	2b59      	cmp	r3, #89	; 0x59
 8009fa8:	d1b9      	bne.n	8009f1e <_scanf_float+0x62>
 8009faa:	2c07      	cmp	r4, #7
 8009fac:	d1b7      	bne.n	8009f1e <_scanf_float+0x62>
 8009fae:	2408      	movs	r4, #8
 8009fb0:	e02c      	b.n	800a00c <_scanf_float+0x150>
 8009fb2:	2b74      	cmp	r3, #116	; 0x74
 8009fb4:	d075      	beq.n	800a0a2 <_scanf_float+0x1e6>
 8009fb6:	2b79      	cmp	r3, #121	; 0x79
 8009fb8:	d0f7      	beq.n	8009faa <_scanf_float+0xee>
 8009fba:	e7b0      	b.n	8009f1e <_scanf_float+0x62>
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	05c8      	lsls	r0, r1, #23
 8009fc0:	d51c      	bpl.n	8009ffc <_scanf_float+0x140>
 8009fc2:	2380      	movs	r3, #128	; 0x80
 8009fc4:	4399      	bics	r1, r3
 8009fc6:	9b01      	ldr	r3, [sp, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	9b06      	ldr	r3, [sp, #24]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d003      	beq.n	8009fdc <_scanf_float+0x120>
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	3201      	adds	r2, #1
 8009fd8:	9306      	str	r3, [sp, #24]
 8009fda:	60ba      	str	r2, [r7, #8]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	60bb      	str	r3, [r7, #8]
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	613b      	str	r3, [r7, #16]
 8009fe8:	6873      	ldr	r3, [r6, #4]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	6073      	str	r3, [r6, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	dc00      	bgt.n	8009ff4 <_scanf_float+0x138>
 8009ff2:	e086      	b.n	800a102 <_scanf_float+0x246>
 8009ff4:	6833      	ldr	r3, [r6, #0]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	6033      	str	r3, [r6, #0]
 8009ffa:	e782      	b.n	8009f02 <_scanf_float+0x46>
 8009ffc:	9a03      	ldr	r2, [sp, #12]
 8009ffe:	1912      	adds	r2, r2, r4
 800a000:	2a00      	cmp	r2, #0
 800a002:	d18c      	bne.n	8009f1e <_scanf_float+0x62>
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	496c      	ldr	r1, [pc, #432]	; (800a1b8 <_scanf_float+0x2fc>)
 800a008:	400a      	ands	r2, r1
 800a00a:	603a      	str	r2, [r7, #0]
 800a00c:	702b      	strb	r3, [r5, #0]
 800a00e:	3501      	adds	r5, #1
 800a010:	e7e4      	b.n	8009fdc <_scanf_float+0x120>
 800a012:	2180      	movs	r1, #128	; 0x80
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	420a      	tst	r2, r1
 800a018:	d081      	beq.n	8009f1e <_scanf_float+0x62>
 800a01a:	438a      	bics	r2, r1
 800a01c:	e7f5      	b.n	800a00a <_scanf_float+0x14e>
 800a01e:	9a03      	ldr	r2, [sp, #12]
 800a020:	2a00      	cmp	r2, #0
 800a022:	d10f      	bne.n	800a044 <_scanf_float+0x188>
 800a024:	9a01      	ldr	r2, [sp, #4]
 800a026:	2a00      	cmp	r2, #0
 800a028:	d10f      	bne.n	800a04a <_scanf_float+0x18e>
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	21e0      	movs	r1, #224	; 0xe0
 800a02e:	0010      	movs	r0, r2
 800a030:	00c9      	lsls	r1, r1, #3
 800a032:	4008      	ands	r0, r1
 800a034:	4288      	cmp	r0, r1
 800a036:	d108      	bne.n	800a04a <_scanf_float+0x18e>
 800a038:	4960      	ldr	r1, [pc, #384]	; (800a1bc <_scanf_float+0x300>)
 800a03a:	400a      	ands	r2, r1
 800a03c:	603a      	str	r2, [r7, #0]
 800a03e:	2201      	movs	r2, #1
 800a040:	9203      	str	r2, [sp, #12]
 800a042:	e7e3      	b.n	800a00c <_scanf_float+0x150>
 800a044:	9a03      	ldr	r2, [sp, #12]
 800a046:	2a02      	cmp	r2, #2
 800a048:	d059      	beq.n	800a0fe <_scanf_float+0x242>
 800a04a:	2c01      	cmp	r4, #1
 800a04c:	d002      	beq.n	800a054 <_scanf_float+0x198>
 800a04e:	2c04      	cmp	r4, #4
 800a050:	d000      	beq.n	800a054 <_scanf_float+0x198>
 800a052:	e764      	b.n	8009f1e <_scanf_float+0x62>
 800a054:	3401      	adds	r4, #1
 800a056:	b2e4      	uxtb	r4, r4
 800a058:	e7d8      	b.n	800a00c <_scanf_float+0x150>
 800a05a:	9a03      	ldr	r2, [sp, #12]
 800a05c:	2a01      	cmp	r2, #1
 800a05e:	d000      	beq.n	800a062 <_scanf_float+0x1a6>
 800a060:	e75d      	b.n	8009f1e <_scanf_float+0x62>
 800a062:	2202      	movs	r2, #2
 800a064:	e7ec      	b.n	800a040 <_scanf_float+0x184>
 800a066:	2c00      	cmp	r4, #0
 800a068:	d110      	bne.n	800a08c <_scanf_float+0x1d0>
 800a06a:	9a01      	ldr	r2, [sp, #4]
 800a06c:	2a00      	cmp	r2, #0
 800a06e:	d000      	beq.n	800a072 <_scanf_float+0x1b6>
 800a070:	e758      	b.n	8009f24 <_scanf_float+0x68>
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	21e0      	movs	r1, #224	; 0xe0
 800a076:	0010      	movs	r0, r2
 800a078:	00c9      	lsls	r1, r1, #3
 800a07a:	4008      	ands	r0, r1
 800a07c:	4288      	cmp	r0, r1
 800a07e:	d000      	beq.n	800a082 <_scanf_float+0x1c6>
 800a080:	e754      	b.n	8009f2c <_scanf_float+0x70>
 800a082:	494e      	ldr	r1, [pc, #312]	; (800a1bc <_scanf_float+0x300>)
 800a084:	3401      	adds	r4, #1
 800a086:	400a      	ands	r2, r1
 800a088:	603a      	str	r2, [r7, #0]
 800a08a:	e7bf      	b.n	800a00c <_scanf_float+0x150>
 800a08c:	21fd      	movs	r1, #253	; 0xfd
 800a08e:	1ee2      	subs	r2, r4, #3
 800a090:	420a      	tst	r2, r1
 800a092:	d000      	beq.n	800a096 <_scanf_float+0x1da>
 800a094:	e743      	b.n	8009f1e <_scanf_float+0x62>
 800a096:	e7dd      	b.n	800a054 <_scanf_float+0x198>
 800a098:	2c02      	cmp	r4, #2
 800a09a:	d000      	beq.n	800a09e <_scanf_float+0x1e2>
 800a09c:	e73f      	b.n	8009f1e <_scanf_float+0x62>
 800a09e:	2403      	movs	r4, #3
 800a0a0:	e7b4      	b.n	800a00c <_scanf_float+0x150>
 800a0a2:	2c06      	cmp	r4, #6
 800a0a4:	d000      	beq.n	800a0a8 <_scanf_float+0x1ec>
 800a0a6:	e73a      	b.n	8009f1e <_scanf_float+0x62>
 800a0a8:	2407      	movs	r4, #7
 800a0aa:	e7af      	b.n	800a00c <_scanf_float+0x150>
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	0591      	lsls	r1, r2, #22
 800a0b0:	d400      	bmi.n	800a0b4 <_scanf_float+0x1f8>
 800a0b2:	e734      	b.n	8009f1e <_scanf_float+0x62>
 800a0b4:	4942      	ldr	r1, [pc, #264]	; (800a1c0 <_scanf_float+0x304>)
 800a0b6:	400a      	ands	r2, r1
 800a0b8:	603a      	str	r2, [r7, #0]
 800a0ba:	9a01      	ldr	r2, [sp, #4]
 800a0bc:	9205      	str	r2, [sp, #20]
 800a0be:	e7a5      	b.n	800a00c <_scanf_float+0x150>
 800a0c0:	21a0      	movs	r1, #160	; 0xa0
 800a0c2:	2080      	movs	r0, #128	; 0x80
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	00c9      	lsls	r1, r1, #3
 800a0c8:	4011      	ands	r1, r2
 800a0ca:	00c0      	lsls	r0, r0, #3
 800a0cc:	4281      	cmp	r1, r0
 800a0ce:	d006      	beq.n	800a0de <_scanf_float+0x222>
 800a0d0:	4202      	tst	r2, r0
 800a0d2:	d100      	bne.n	800a0d6 <_scanf_float+0x21a>
 800a0d4:	e723      	b.n	8009f1e <_scanf_float+0x62>
 800a0d6:	9901      	ldr	r1, [sp, #4]
 800a0d8:	2900      	cmp	r1, #0
 800a0da:	d100      	bne.n	800a0de <_scanf_float+0x222>
 800a0dc:	e726      	b.n	8009f2c <_scanf_float+0x70>
 800a0de:	0591      	lsls	r1, r2, #22
 800a0e0:	d404      	bmi.n	800a0ec <_scanf_float+0x230>
 800a0e2:	9901      	ldr	r1, [sp, #4]
 800a0e4:	9805      	ldr	r0, [sp, #20]
 800a0e6:	9509      	str	r5, [sp, #36]	; 0x24
 800a0e8:	1a09      	subs	r1, r1, r0
 800a0ea:	9108      	str	r1, [sp, #32]
 800a0ec:	4933      	ldr	r1, [pc, #204]	; (800a1bc <_scanf_float+0x300>)
 800a0ee:	400a      	ands	r2, r1
 800a0f0:	21c0      	movs	r1, #192	; 0xc0
 800a0f2:	0049      	lsls	r1, r1, #1
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	603a      	str	r2, [r7, #0]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	9201      	str	r2, [sp, #4]
 800a0fc:	e786      	b.n	800a00c <_scanf_float+0x150>
 800a0fe:	2203      	movs	r2, #3
 800a100:	e79e      	b.n	800a040 <_scanf_float+0x184>
 800a102:	23c0      	movs	r3, #192	; 0xc0
 800a104:	005b      	lsls	r3, r3, #1
 800a106:	0031      	movs	r1, r6
 800a108:	58fb      	ldr	r3, [r7, r3]
 800a10a:	9802      	ldr	r0, [sp, #8]
 800a10c:	4798      	blx	r3
 800a10e:	2800      	cmp	r0, #0
 800a110:	d100      	bne.n	800a114 <_scanf_float+0x258>
 800a112:	e6f6      	b.n	8009f02 <_scanf_float+0x46>
 800a114:	e703      	b.n	8009f1e <_scanf_float+0x62>
 800a116:	3d01      	subs	r5, #1
 800a118:	593b      	ldr	r3, [r7, r4]
 800a11a:	0032      	movs	r2, r6
 800a11c:	7829      	ldrb	r1, [r5, #0]
 800a11e:	9802      	ldr	r0, [sp, #8]
 800a120:	4798      	blx	r3
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	3b01      	subs	r3, #1
 800a126:	613b      	str	r3, [r7, #16]
 800a128:	e707      	b.n	8009f3a <_scanf_float+0x7e>
 800a12a:	1e63      	subs	r3, r4, #1
 800a12c:	2b06      	cmp	r3, #6
 800a12e:	d80e      	bhi.n	800a14e <_scanf_float+0x292>
 800a130:	9503      	str	r5, [sp, #12]
 800a132:	2c02      	cmp	r4, #2
 800a134:	d920      	bls.n	800a178 <_scanf_float+0x2bc>
 800a136:	1b63      	subs	r3, r4, r5
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	9306      	str	r3, [sp, #24]
 800a13c:	9b03      	ldr	r3, [sp, #12]
 800a13e:	9a06      	ldr	r2, [sp, #24]
 800a140:	189b      	adds	r3, r3, r2
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b03      	cmp	r3, #3
 800a146:	d827      	bhi.n	800a198 <_scanf_float+0x2dc>
 800a148:	3c03      	subs	r4, #3
 800a14a:	b2e4      	uxtb	r4, r4
 800a14c:	1b2d      	subs	r5, r5, r4
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	05da      	lsls	r2, r3, #23
 800a152:	d552      	bpl.n	800a1fa <_scanf_float+0x33e>
 800a154:	055b      	lsls	r3, r3, #21
 800a156:	d535      	bpl.n	800a1c4 <_scanf_float+0x308>
 800a158:	24be      	movs	r4, #190	; 0xbe
 800a15a:	0064      	lsls	r4, r4, #1
 800a15c:	9b04      	ldr	r3, [sp, #16]
 800a15e:	429d      	cmp	r5, r3
 800a160:	d800      	bhi.n	800a164 <_scanf_float+0x2a8>
 800a162:	e6ee      	b.n	8009f42 <_scanf_float+0x86>
 800a164:	3d01      	subs	r5, #1
 800a166:	593b      	ldr	r3, [r7, r4]
 800a168:	0032      	movs	r2, r6
 800a16a:	7829      	ldrb	r1, [r5, #0]
 800a16c:	9802      	ldr	r0, [sp, #8]
 800a16e:	4798      	blx	r3
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	3b01      	subs	r3, #1
 800a174:	613b      	str	r3, [r7, #16]
 800a176:	e7f1      	b.n	800a15c <_scanf_float+0x2a0>
 800a178:	24be      	movs	r4, #190	; 0xbe
 800a17a:	0064      	lsls	r4, r4, #1
 800a17c:	9b04      	ldr	r3, [sp, #16]
 800a17e:	429d      	cmp	r5, r3
 800a180:	d800      	bhi.n	800a184 <_scanf_float+0x2c8>
 800a182:	e6de      	b.n	8009f42 <_scanf_float+0x86>
 800a184:	3d01      	subs	r5, #1
 800a186:	593b      	ldr	r3, [r7, r4]
 800a188:	0032      	movs	r2, r6
 800a18a:	7829      	ldrb	r1, [r5, #0]
 800a18c:	9802      	ldr	r0, [sp, #8]
 800a18e:	4798      	blx	r3
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	3b01      	subs	r3, #1
 800a194:	613b      	str	r3, [r7, #16]
 800a196:	e7f1      	b.n	800a17c <_scanf_float+0x2c0>
 800a198:	9b03      	ldr	r3, [sp, #12]
 800a19a:	0032      	movs	r2, r6
 800a19c:	3b01      	subs	r3, #1
 800a19e:	7819      	ldrb	r1, [r3, #0]
 800a1a0:	9303      	str	r3, [sp, #12]
 800a1a2:	23be      	movs	r3, #190	; 0xbe
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	58fb      	ldr	r3, [r7, r3]
 800a1a8:	9802      	ldr	r0, [sp, #8]
 800a1aa:	4798      	blx	r3
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	613b      	str	r3, [r7, #16]
 800a1b2:	e7c3      	b.n	800a13c <_scanf_float+0x280>
 800a1b4:	fffffeff 	.word	0xfffffeff
 800a1b8:	fffffe7f 	.word	0xfffffe7f
 800a1bc:	fffff87f 	.word	0xfffff87f
 800a1c0:	fffffd7f 	.word	0xfffffd7f
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	1e6c      	subs	r4, r5, #1
 800a1c8:	7821      	ldrb	r1, [r4, #0]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	613b      	str	r3, [r7, #16]
 800a1ce:	2965      	cmp	r1, #101	; 0x65
 800a1d0:	d00c      	beq.n	800a1ec <_scanf_float+0x330>
 800a1d2:	2945      	cmp	r1, #69	; 0x45
 800a1d4:	d00a      	beq.n	800a1ec <_scanf_float+0x330>
 800a1d6:	23be      	movs	r3, #190	; 0xbe
 800a1d8:	005b      	lsls	r3, r3, #1
 800a1da:	58fb      	ldr	r3, [r7, r3]
 800a1dc:	0032      	movs	r2, r6
 800a1de:	9802      	ldr	r0, [sp, #8]
 800a1e0:	4798      	blx	r3
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	1eac      	subs	r4, r5, #2
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	7821      	ldrb	r1, [r4, #0]
 800a1ea:	613b      	str	r3, [r7, #16]
 800a1ec:	23be      	movs	r3, #190	; 0xbe
 800a1ee:	005b      	lsls	r3, r3, #1
 800a1f0:	0032      	movs	r2, r6
 800a1f2:	58fb      	ldr	r3, [r7, r3]
 800a1f4:	9802      	ldr	r0, [sp, #8]
 800a1f6:	4798      	blx	r3
 800a1f8:	0025      	movs	r5, r4
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	2310      	movs	r3, #16
 800a1fe:	0011      	movs	r1, r2
 800a200:	4019      	ands	r1, r3
 800a202:	9103      	str	r1, [sp, #12]
 800a204:	421a      	tst	r2, r3
 800a206:	d15b      	bne.n	800a2c0 <_scanf_float+0x404>
 800a208:	22c0      	movs	r2, #192	; 0xc0
 800a20a:	7029      	strb	r1, [r5, #0]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	00d2      	lsls	r2, r2, #3
 800a210:	4013      	ands	r3, r2
 800a212:	2280      	movs	r2, #128	; 0x80
 800a214:	00d2      	lsls	r2, r2, #3
 800a216:	4293      	cmp	r3, r2
 800a218:	d11d      	bne.n	800a256 <_scanf_float+0x39a>
 800a21a:	9b05      	ldr	r3, [sp, #20]
 800a21c:	9a01      	ldr	r2, [sp, #4]
 800a21e:	9901      	ldr	r1, [sp, #4]
 800a220:	1a9a      	subs	r2, r3, r2
 800a222:	428b      	cmp	r3, r1
 800a224:	d124      	bne.n	800a270 <_scanf_float+0x3b4>
 800a226:	2200      	movs	r2, #0
 800a228:	9904      	ldr	r1, [sp, #16]
 800a22a:	9802      	ldr	r0, [sp, #8]
 800a22c:	f002 fc98 	bl	800cb60 <_strtod_r>
 800a230:	9b07      	ldr	r3, [sp, #28]
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	0004      	movs	r4, r0
 800a236:	000d      	movs	r5, r1
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	0791      	lsls	r1, r2, #30
 800a23c:	d525      	bpl.n	800a28a <_scanf_float+0x3ce>
 800a23e:	9907      	ldr	r1, [sp, #28]
 800a240:	1d1a      	adds	r2, r3, #4
 800a242:	600a      	str	r2, [r1, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	601c      	str	r4, [r3, #0]
 800a248:	605d      	str	r5, [r3, #4]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3301      	adds	r3, #1
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	9803      	ldr	r0, [sp, #12]
 800a252:	b00b      	add	sp, #44	; 0x2c
 800a254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a256:	9b08      	ldr	r3, [sp, #32]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0e4      	beq.n	800a226 <_scanf_float+0x36a>
 800a25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a25e:	9a03      	ldr	r2, [sp, #12]
 800a260:	1c59      	adds	r1, r3, #1
 800a262:	9802      	ldr	r0, [sp, #8]
 800a264:	230a      	movs	r3, #10
 800a266:	f002 fd09 	bl	800cc7c <_strtol_r>
 800a26a:	9b08      	ldr	r3, [sp, #32]
 800a26c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a26e:	1ac2      	subs	r2, r0, r3
 800a270:	003b      	movs	r3, r7
 800a272:	3370      	adds	r3, #112	; 0x70
 800a274:	33ff      	adds	r3, #255	; 0xff
 800a276:	429d      	cmp	r5, r3
 800a278:	d302      	bcc.n	800a280 <_scanf_float+0x3c4>
 800a27a:	003d      	movs	r5, r7
 800a27c:	356f      	adds	r5, #111	; 0x6f
 800a27e:	35ff      	adds	r5, #255	; 0xff
 800a280:	0028      	movs	r0, r5
 800a282:	4910      	ldr	r1, [pc, #64]	; (800a2c4 <_scanf_float+0x408>)
 800a284:	f000 f8e6 	bl	800a454 <siprintf>
 800a288:	e7cd      	b.n	800a226 <_scanf_float+0x36a>
 800a28a:	1d19      	adds	r1, r3, #4
 800a28c:	0752      	lsls	r2, r2, #29
 800a28e:	d502      	bpl.n	800a296 <_scanf_float+0x3da>
 800a290:	9a07      	ldr	r2, [sp, #28]
 800a292:	6011      	str	r1, [r2, #0]
 800a294:	e7d6      	b.n	800a244 <_scanf_float+0x388>
 800a296:	9a07      	ldr	r2, [sp, #28]
 800a298:	0020      	movs	r0, r4
 800a29a:	6011      	str	r1, [r2, #0]
 800a29c:	681e      	ldr	r6, [r3, #0]
 800a29e:	0022      	movs	r2, r4
 800a2a0:	002b      	movs	r3, r5
 800a2a2:	0029      	movs	r1, r5
 800a2a4:	f7f8 f98a 	bl	80025bc <__aeabi_dcmpun>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d004      	beq.n	800a2b6 <_scanf_float+0x3fa>
 800a2ac:	4806      	ldr	r0, [pc, #24]	; (800a2c8 <_scanf_float+0x40c>)
 800a2ae:	f000 f9cf 	bl	800a650 <nanf>
 800a2b2:	6030      	str	r0, [r6, #0]
 800a2b4:	e7c9      	b.n	800a24a <_scanf_float+0x38e>
 800a2b6:	0020      	movs	r0, r4
 800a2b8:	0029      	movs	r1, r5
 800a2ba:	f7f8 fa71 	bl	80027a0 <__aeabi_d2f>
 800a2be:	e7f8      	b.n	800a2b2 <_scanf_float+0x3f6>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e63f      	b.n	8009f44 <_scanf_float+0x88>
 800a2c4:	0800e51c 	.word	0x0800e51c
 800a2c8:	0800e8ad 	.word	0x0800e8ad

0800a2cc <std>:
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	b510      	push	{r4, lr}
 800a2d0:	0004      	movs	r4, r0
 800a2d2:	6003      	str	r3, [r0, #0]
 800a2d4:	6043      	str	r3, [r0, #4]
 800a2d6:	6083      	str	r3, [r0, #8]
 800a2d8:	8181      	strh	r1, [r0, #12]
 800a2da:	6643      	str	r3, [r0, #100]	; 0x64
 800a2dc:	81c2      	strh	r2, [r0, #14]
 800a2de:	6103      	str	r3, [r0, #16]
 800a2e0:	6143      	str	r3, [r0, #20]
 800a2e2:	6183      	str	r3, [r0, #24]
 800a2e4:	0019      	movs	r1, r3
 800a2e6:	2208      	movs	r2, #8
 800a2e8:	305c      	adds	r0, #92	; 0x5c
 800a2ea:	f000 f91f 	bl	800a52c <memset>
 800a2ee:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <std+0x50>)
 800a2f0:	6224      	str	r4, [r4, #32]
 800a2f2:	6263      	str	r3, [r4, #36]	; 0x24
 800a2f4:	4b0a      	ldr	r3, [pc, #40]	; (800a320 <std+0x54>)
 800a2f6:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2f8:	4b0a      	ldr	r3, [pc, #40]	; (800a324 <std+0x58>)
 800a2fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <std+0x5c>)
 800a2fe:	6323      	str	r3, [r4, #48]	; 0x30
 800a300:	4b0a      	ldr	r3, [pc, #40]	; (800a32c <std+0x60>)
 800a302:	429c      	cmp	r4, r3
 800a304:	d005      	beq.n	800a312 <std+0x46>
 800a306:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <std+0x64>)
 800a308:	429c      	cmp	r4, r3
 800a30a:	d002      	beq.n	800a312 <std+0x46>
 800a30c:	4b09      	ldr	r3, [pc, #36]	; (800a334 <std+0x68>)
 800a30e:	429c      	cmp	r4, r3
 800a310:	d103      	bne.n	800a31a <std+0x4e>
 800a312:	0020      	movs	r0, r4
 800a314:	3058      	adds	r0, #88	; 0x58
 800a316:	f000 f98d 	bl	800a634 <__retarget_lock_init_recursive>
 800a31a:	bd10      	pop	{r4, pc}
 800a31c:	0800a495 	.word	0x0800a495
 800a320:	0800a4bd 	.word	0x0800a4bd
 800a324:	0800a4f5 	.word	0x0800a4f5
 800a328:	0800a521 	.word	0x0800a521
 800a32c:	20000528 	.word	0x20000528
 800a330:	20000590 	.word	0x20000590
 800a334:	200005f8 	.word	0x200005f8

0800a338 <stdio_exit_handler>:
 800a338:	b510      	push	{r4, lr}
 800a33a:	4a03      	ldr	r2, [pc, #12]	; (800a348 <stdio_exit_handler+0x10>)
 800a33c:	4903      	ldr	r1, [pc, #12]	; (800a34c <stdio_exit_handler+0x14>)
 800a33e:	4804      	ldr	r0, [pc, #16]	; (800a350 <stdio_exit_handler+0x18>)
 800a340:	f000 f86c 	bl	800a41c <_fwalk_sglue>
 800a344:	bd10      	pop	{r4, pc}
 800a346:	46c0      	nop			; (mov r8, r8)
 800a348:	20000024 	.word	0x20000024
 800a34c:	0800d05d 	.word	0x0800d05d
 800a350:	20000030 	.word	0x20000030

0800a354 <cleanup_stdio>:
 800a354:	6841      	ldr	r1, [r0, #4]
 800a356:	4b0b      	ldr	r3, [pc, #44]	; (800a384 <cleanup_stdio+0x30>)
 800a358:	b510      	push	{r4, lr}
 800a35a:	0004      	movs	r4, r0
 800a35c:	4299      	cmp	r1, r3
 800a35e:	d001      	beq.n	800a364 <cleanup_stdio+0x10>
 800a360:	f002 fe7c 	bl	800d05c <_fflush_r>
 800a364:	68a1      	ldr	r1, [r4, #8]
 800a366:	4b08      	ldr	r3, [pc, #32]	; (800a388 <cleanup_stdio+0x34>)
 800a368:	4299      	cmp	r1, r3
 800a36a:	d002      	beq.n	800a372 <cleanup_stdio+0x1e>
 800a36c:	0020      	movs	r0, r4
 800a36e:	f002 fe75 	bl	800d05c <_fflush_r>
 800a372:	68e1      	ldr	r1, [r4, #12]
 800a374:	4b05      	ldr	r3, [pc, #20]	; (800a38c <cleanup_stdio+0x38>)
 800a376:	4299      	cmp	r1, r3
 800a378:	d002      	beq.n	800a380 <cleanup_stdio+0x2c>
 800a37a:	0020      	movs	r0, r4
 800a37c:	f002 fe6e 	bl	800d05c <_fflush_r>
 800a380:	bd10      	pop	{r4, pc}
 800a382:	46c0      	nop			; (mov r8, r8)
 800a384:	20000528 	.word	0x20000528
 800a388:	20000590 	.word	0x20000590
 800a38c:	200005f8 	.word	0x200005f8

0800a390 <global_stdio_init.part.0>:
 800a390:	b510      	push	{r4, lr}
 800a392:	4b09      	ldr	r3, [pc, #36]	; (800a3b8 <global_stdio_init.part.0+0x28>)
 800a394:	4a09      	ldr	r2, [pc, #36]	; (800a3bc <global_stdio_init.part.0+0x2c>)
 800a396:	2104      	movs	r1, #4
 800a398:	601a      	str	r2, [r3, #0]
 800a39a:	4809      	ldr	r0, [pc, #36]	; (800a3c0 <global_stdio_init.part.0+0x30>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	f7ff ff95 	bl	800a2cc <std>
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	2109      	movs	r1, #9
 800a3a6:	4807      	ldr	r0, [pc, #28]	; (800a3c4 <global_stdio_init.part.0+0x34>)
 800a3a8:	f7ff ff90 	bl	800a2cc <std>
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	2112      	movs	r1, #18
 800a3b0:	4805      	ldr	r0, [pc, #20]	; (800a3c8 <global_stdio_init.part.0+0x38>)
 800a3b2:	f7ff ff8b 	bl	800a2cc <std>
 800a3b6:	bd10      	pop	{r4, pc}
 800a3b8:	20000660 	.word	0x20000660
 800a3bc:	0800a339 	.word	0x0800a339
 800a3c0:	20000528 	.word	0x20000528
 800a3c4:	20000590 	.word	0x20000590
 800a3c8:	200005f8 	.word	0x200005f8

0800a3cc <__sfp_lock_acquire>:
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	4802      	ldr	r0, [pc, #8]	; (800a3d8 <__sfp_lock_acquire+0xc>)
 800a3d0:	f000 f931 	bl	800a636 <__retarget_lock_acquire_recursive>
 800a3d4:	bd10      	pop	{r4, pc}
 800a3d6:	46c0      	nop			; (mov r8, r8)
 800a3d8:	20000669 	.word	0x20000669

0800a3dc <__sfp_lock_release>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	4802      	ldr	r0, [pc, #8]	; (800a3e8 <__sfp_lock_release+0xc>)
 800a3e0:	f000 f92a 	bl	800a638 <__retarget_lock_release_recursive>
 800a3e4:	bd10      	pop	{r4, pc}
 800a3e6:	46c0      	nop			; (mov r8, r8)
 800a3e8:	20000669 	.word	0x20000669

0800a3ec <__sinit>:
 800a3ec:	b510      	push	{r4, lr}
 800a3ee:	0004      	movs	r4, r0
 800a3f0:	f7ff ffec 	bl	800a3cc <__sfp_lock_acquire>
 800a3f4:	6a23      	ldr	r3, [r4, #32]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <__sinit+0x14>
 800a3fa:	f7ff ffef 	bl	800a3dc <__sfp_lock_release>
 800a3fe:	bd10      	pop	{r4, pc}
 800a400:	4b04      	ldr	r3, [pc, #16]	; (800a414 <__sinit+0x28>)
 800a402:	6223      	str	r3, [r4, #32]
 800a404:	4b04      	ldr	r3, [pc, #16]	; (800a418 <__sinit+0x2c>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1f6      	bne.n	800a3fa <__sinit+0xe>
 800a40c:	f7ff ffc0 	bl	800a390 <global_stdio_init.part.0>
 800a410:	e7f3      	b.n	800a3fa <__sinit+0xe>
 800a412:	46c0      	nop			; (mov r8, r8)
 800a414:	0800a355 	.word	0x0800a355
 800a418:	20000660 	.word	0x20000660

0800a41c <_fwalk_sglue>:
 800a41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a41e:	0014      	movs	r4, r2
 800a420:	2600      	movs	r6, #0
 800a422:	9000      	str	r0, [sp, #0]
 800a424:	9101      	str	r1, [sp, #4]
 800a426:	68a5      	ldr	r5, [r4, #8]
 800a428:	6867      	ldr	r7, [r4, #4]
 800a42a:	3f01      	subs	r7, #1
 800a42c:	d504      	bpl.n	800a438 <_fwalk_sglue+0x1c>
 800a42e:	6824      	ldr	r4, [r4, #0]
 800a430:	2c00      	cmp	r4, #0
 800a432:	d1f8      	bne.n	800a426 <_fwalk_sglue+0xa>
 800a434:	0030      	movs	r0, r6
 800a436:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a438:	89ab      	ldrh	r3, [r5, #12]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d908      	bls.n	800a450 <_fwalk_sglue+0x34>
 800a43e:	220e      	movs	r2, #14
 800a440:	5eab      	ldrsh	r3, [r5, r2]
 800a442:	3301      	adds	r3, #1
 800a444:	d004      	beq.n	800a450 <_fwalk_sglue+0x34>
 800a446:	0029      	movs	r1, r5
 800a448:	9800      	ldr	r0, [sp, #0]
 800a44a:	9b01      	ldr	r3, [sp, #4]
 800a44c:	4798      	blx	r3
 800a44e:	4306      	orrs	r6, r0
 800a450:	3568      	adds	r5, #104	; 0x68
 800a452:	e7ea      	b.n	800a42a <_fwalk_sglue+0xe>

0800a454 <siprintf>:
 800a454:	b40e      	push	{r1, r2, r3}
 800a456:	b500      	push	{lr}
 800a458:	490b      	ldr	r1, [pc, #44]	; (800a488 <siprintf+0x34>)
 800a45a:	b09c      	sub	sp, #112	; 0x70
 800a45c:	ab1d      	add	r3, sp, #116	; 0x74
 800a45e:	9002      	str	r0, [sp, #8]
 800a460:	9006      	str	r0, [sp, #24]
 800a462:	9107      	str	r1, [sp, #28]
 800a464:	9104      	str	r1, [sp, #16]
 800a466:	4809      	ldr	r0, [pc, #36]	; (800a48c <siprintf+0x38>)
 800a468:	4909      	ldr	r1, [pc, #36]	; (800a490 <siprintf+0x3c>)
 800a46a:	cb04      	ldmia	r3!, {r2}
 800a46c:	9105      	str	r1, [sp, #20]
 800a46e:	6800      	ldr	r0, [r0, #0]
 800a470:	a902      	add	r1, sp, #8
 800a472:	9301      	str	r3, [sp, #4]
 800a474:	f002 fc68 	bl	800cd48 <_svfiprintf_r>
 800a478:	2200      	movs	r2, #0
 800a47a:	9b02      	ldr	r3, [sp, #8]
 800a47c:	701a      	strb	r2, [r3, #0]
 800a47e:	b01c      	add	sp, #112	; 0x70
 800a480:	bc08      	pop	{r3}
 800a482:	b003      	add	sp, #12
 800a484:	4718      	bx	r3
 800a486:	46c0      	nop			; (mov r8, r8)
 800a488:	7fffffff 	.word	0x7fffffff
 800a48c:	2000007c 	.word	0x2000007c
 800a490:	ffff0208 	.word	0xffff0208

0800a494 <__sread>:
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	000c      	movs	r4, r1
 800a498:	250e      	movs	r5, #14
 800a49a:	5f49      	ldrsh	r1, [r1, r5]
 800a49c:	f000 f878 	bl	800a590 <_read_r>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	db03      	blt.n	800a4ac <__sread+0x18>
 800a4a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a4a6:	181b      	adds	r3, r3, r0
 800a4a8:	6563      	str	r3, [r4, #84]	; 0x54
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	4a02      	ldr	r2, [pc, #8]	; (800a4b8 <__sread+0x24>)
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	81a3      	strh	r3, [r4, #12]
 800a4b4:	e7f9      	b.n	800a4aa <__sread+0x16>
 800a4b6:	46c0      	nop			; (mov r8, r8)
 800a4b8:	ffffefff 	.word	0xffffefff

0800a4bc <__swrite>:
 800a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4be:	001f      	movs	r7, r3
 800a4c0:	898b      	ldrh	r3, [r1, #12]
 800a4c2:	0005      	movs	r5, r0
 800a4c4:	000c      	movs	r4, r1
 800a4c6:	0016      	movs	r6, r2
 800a4c8:	05db      	lsls	r3, r3, #23
 800a4ca:	d505      	bpl.n	800a4d8 <__swrite+0x1c>
 800a4cc:	230e      	movs	r3, #14
 800a4ce:	5ec9      	ldrsh	r1, [r1, r3]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	f000 f848 	bl	800a568 <_lseek_r>
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	4a05      	ldr	r2, [pc, #20]	; (800a4f0 <__swrite+0x34>)
 800a4dc:	0028      	movs	r0, r5
 800a4de:	4013      	ands	r3, r2
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	0032      	movs	r2, r6
 800a4e4:	230e      	movs	r3, #14
 800a4e6:	5ee1      	ldrsh	r1, [r4, r3]
 800a4e8:	003b      	movs	r3, r7
 800a4ea:	f000 f865 	bl	800a5b8 <_write_r>
 800a4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f0:	ffffefff 	.word	0xffffefff

0800a4f4 <__sseek>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	000c      	movs	r4, r1
 800a4f8:	250e      	movs	r5, #14
 800a4fa:	5f49      	ldrsh	r1, [r1, r5]
 800a4fc:	f000 f834 	bl	800a568 <_lseek_r>
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	1c42      	adds	r2, r0, #1
 800a504:	d103      	bne.n	800a50e <__sseek+0x1a>
 800a506:	4a05      	ldr	r2, [pc, #20]	; (800a51c <__sseek+0x28>)
 800a508:	4013      	ands	r3, r2
 800a50a:	81a3      	strh	r3, [r4, #12]
 800a50c:	bd70      	pop	{r4, r5, r6, pc}
 800a50e:	2280      	movs	r2, #128	; 0x80
 800a510:	0152      	lsls	r2, r2, #5
 800a512:	4313      	orrs	r3, r2
 800a514:	81a3      	strh	r3, [r4, #12]
 800a516:	6560      	str	r0, [r4, #84]	; 0x54
 800a518:	e7f8      	b.n	800a50c <__sseek+0x18>
 800a51a:	46c0      	nop			; (mov r8, r8)
 800a51c:	ffffefff 	.word	0xffffefff

0800a520 <__sclose>:
 800a520:	b510      	push	{r4, lr}
 800a522:	230e      	movs	r3, #14
 800a524:	5ec9      	ldrsh	r1, [r1, r3]
 800a526:	f000 f80d 	bl	800a544 <_close_r>
 800a52a:	bd10      	pop	{r4, pc}

0800a52c <memset>:
 800a52c:	0003      	movs	r3, r0
 800a52e:	1882      	adds	r2, r0, r2
 800a530:	4293      	cmp	r3, r2
 800a532:	d100      	bne.n	800a536 <memset+0xa>
 800a534:	4770      	bx	lr
 800a536:	7019      	strb	r1, [r3, #0]
 800a538:	3301      	adds	r3, #1
 800a53a:	e7f9      	b.n	800a530 <memset+0x4>

0800a53c <_localeconv_r>:
 800a53c:	4800      	ldr	r0, [pc, #0]	; (800a540 <_localeconv_r+0x4>)
 800a53e:	4770      	bx	lr
 800a540:	20000170 	.word	0x20000170

0800a544 <_close_r>:
 800a544:	2300      	movs	r3, #0
 800a546:	b570      	push	{r4, r5, r6, lr}
 800a548:	4d06      	ldr	r5, [pc, #24]	; (800a564 <_close_r+0x20>)
 800a54a:	0004      	movs	r4, r0
 800a54c:	0008      	movs	r0, r1
 800a54e:	602b      	str	r3, [r5, #0]
 800a550:	f7f9 fc7c 	bl	8003e4c <_close>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d103      	bne.n	800a560 <_close_r+0x1c>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d000      	beq.n	800a560 <_close_r+0x1c>
 800a55e:	6023      	str	r3, [r4, #0]
 800a560:	bd70      	pop	{r4, r5, r6, pc}
 800a562:	46c0      	nop			; (mov r8, r8)
 800a564:	20000664 	.word	0x20000664

0800a568 <_lseek_r>:
 800a568:	b570      	push	{r4, r5, r6, lr}
 800a56a:	0004      	movs	r4, r0
 800a56c:	0008      	movs	r0, r1
 800a56e:	0011      	movs	r1, r2
 800a570:	001a      	movs	r2, r3
 800a572:	2300      	movs	r3, #0
 800a574:	4d05      	ldr	r5, [pc, #20]	; (800a58c <_lseek_r+0x24>)
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	f7f9 fc89 	bl	8003e8e <_lseek>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d103      	bne.n	800a588 <_lseek_r+0x20>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d000      	beq.n	800a588 <_lseek_r+0x20>
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	bd70      	pop	{r4, r5, r6, pc}
 800a58a:	46c0      	nop			; (mov r8, r8)
 800a58c:	20000664 	.word	0x20000664

0800a590 <_read_r>:
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	0004      	movs	r4, r0
 800a594:	0008      	movs	r0, r1
 800a596:	0011      	movs	r1, r2
 800a598:	001a      	movs	r2, r3
 800a59a:	2300      	movs	r3, #0
 800a59c:	4d05      	ldr	r5, [pc, #20]	; (800a5b4 <_read_r+0x24>)
 800a59e:	602b      	str	r3, [r5, #0]
 800a5a0:	f7f9 fc1b 	bl	8003dda <_read>
 800a5a4:	1c43      	adds	r3, r0, #1
 800a5a6:	d103      	bne.n	800a5b0 <_read_r+0x20>
 800a5a8:	682b      	ldr	r3, [r5, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d000      	beq.n	800a5b0 <_read_r+0x20>
 800a5ae:	6023      	str	r3, [r4, #0]
 800a5b0:	bd70      	pop	{r4, r5, r6, pc}
 800a5b2:	46c0      	nop			; (mov r8, r8)
 800a5b4:	20000664 	.word	0x20000664

0800a5b8 <_write_r>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	0004      	movs	r4, r0
 800a5bc:	0008      	movs	r0, r1
 800a5be:	0011      	movs	r1, r2
 800a5c0:	001a      	movs	r2, r3
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	4d05      	ldr	r5, [pc, #20]	; (800a5dc <_write_r+0x24>)
 800a5c6:	602b      	str	r3, [r5, #0]
 800a5c8:	f7f9 fc24 	bl	8003e14 <_write>
 800a5cc:	1c43      	adds	r3, r0, #1
 800a5ce:	d103      	bne.n	800a5d8 <_write_r+0x20>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d000      	beq.n	800a5d8 <_write_r+0x20>
 800a5d6:	6023      	str	r3, [r4, #0]
 800a5d8:	bd70      	pop	{r4, r5, r6, pc}
 800a5da:	46c0      	nop			; (mov r8, r8)
 800a5dc:	20000664 	.word	0x20000664

0800a5e0 <__errno>:
 800a5e0:	4b01      	ldr	r3, [pc, #4]	; (800a5e8 <__errno+0x8>)
 800a5e2:	6818      	ldr	r0, [r3, #0]
 800a5e4:	4770      	bx	lr
 800a5e6:	46c0      	nop			; (mov r8, r8)
 800a5e8:	2000007c 	.word	0x2000007c

0800a5ec <__libc_init_array>:
 800a5ec:	b570      	push	{r4, r5, r6, lr}
 800a5ee:	2600      	movs	r6, #0
 800a5f0:	4c0c      	ldr	r4, [pc, #48]	; (800a624 <__libc_init_array+0x38>)
 800a5f2:	4d0d      	ldr	r5, [pc, #52]	; (800a628 <__libc_init_array+0x3c>)
 800a5f4:	1b64      	subs	r4, r4, r5
 800a5f6:	10a4      	asrs	r4, r4, #2
 800a5f8:	42a6      	cmp	r6, r4
 800a5fa:	d109      	bne.n	800a610 <__libc_init_array+0x24>
 800a5fc:	2600      	movs	r6, #0
 800a5fe:	f003 fc71 	bl	800dee4 <_init>
 800a602:	4c0a      	ldr	r4, [pc, #40]	; (800a62c <__libc_init_array+0x40>)
 800a604:	4d0a      	ldr	r5, [pc, #40]	; (800a630 <__libc_init_array+0x44>)
 800a606:	1b64      	subs	r4, r4, r5
 800a608:	10a4      	asrs	r4, r4, #2
 800a60a:	42a6      	cmp	r6, r4
 800a60c:	d105      	bne.n	800a61a <__libc_init_array+0x2e>
 800a60e:	bd70      	pop	{r4, r5, r6, pc}
 800a610:	00b3      	lsls	r3, r6, #2
 800a612:	58eb      	ldr	r3, [r5, r3]
 800a614:	4798      	blx	r3
 800a616:	3601      	adds	r6, #1
 800a618:	e7ee      	b.n	800a5f8 <__libc_init_array+0xc>
 800a61a:	00b3      	lsls	r3, r6, #2
 800a61c:	58eb      	ldr	r3, [r5, r3]
 800a61e:	4798      	blx	r3
 800a620:	3601      	adds	r6, #1
 800a622:	e7f2      	b.n	800a60a <__libc_init_array+0x1e>
 800a624:	0800e918 	.word	0x0800e918
 800a628:	0800e918 	.word	0x0800e918
 800a62c:	0800e91c 	.word	0x0800e91c
 800a630:	0800e918 	.word	0x0800e918

0800a634 <__retarget_lock_init_recursive>:
 800a634:	4770      	bx	lr

0800a636 <__retarget_lock_acquire_recursive>:
 800a636:	4770      	bx	lr

0800a638 <__retarget_lock_release_recursive>:
 800a638:	4770      	bx	lr

0800a63a <memchr>:
 800a63a:	b2c9      	uxtb	r1, r1
 800a63c:	1882      	adds	r2, r0, r2
 800a63e:	4290      	cmp	r0, r2
 800a640:	d101      	bne.n	800a646 <memchr+0xc>
 800a642:	2000      	movs	r0, #0
 800a644:	4770      	bx	lr
 800a646:	7803      	ldrb	r3, [r0, #0]
 800a648:	428b      	cmp	r3, r1
 800a64a:	d0fb      	beq.n	800a644 <memchr+0xa>
 800a64c:	3001      	adds	r0, #1
 800a64e:	e7f6      	b.n	800a63e <memchr+0x4>

0800a650 <nanf>:
 800a650:	4800      	ldr	r0, [pc, #0]	; (800a654 <nanf+0x4>)
 800a652:	4770      	bx	lr
 800a654:	7fc00000 	.word	0x7fc00000

0800a658 <quorem>:
 800a658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a65a:	6902      	ldr	r2, [r0, #16]
 800a65c:	690b      	ldr	r3, [r1, #16]
 800a65e:	b089      	sub	sp, #36	; 0x24
 800a660:	0007      	movs	r7, r0
 800a662:	9104      	str	r1, [sp, #16]
 800a664:	2000      	movs	r0, #0
 800a666:	429a      	cmp	r2, r3
 800a668:	db69      	blt.n	800a73e <quorem+0xe6>
 800a66a:	3b01      	subs	r3, #1
 800a66c:	009c      	lsls	r4, r3, #2
 800a66e:	9301      	str	r3, [sp, #4]
 800a670:	000b      	movs	r3, r1
 800a672:	3314      	adds	r3, #20
 800a674:	9306      	str	r3, [sp, #24]
 800a676:	191b      	adds	r3, r3, r4
 800a678:	9305      	str	r3, [sp, #20]
 800a67a:	003b      	movs	r3, r7
 800a67c:	3314      	adds	r3, #20
 800a67e:	9303      	str	r3, [sp, #12]
 800a680:	191c      	adds	r4, r3, r4
 800a682:	9b05      	ldr	r3, [sp, #20]
 800a684:	6826      	ldr	r6, [r4, #0]
 800a686:	681d      	ldr	r5, [r3, #0]
 800a688:	0030      	movs	r0, r6
 800a68a:	3501      	adds	r5, #1
 800a68c:	0029      	movs	r1, r5
 800a68e:	f7f5 fd57 	bl	8000140 <__udivsi3>
 800a692:	9002      	str	r0, [sp, #8]
 800a694:	42ae      	cmp	r6, r5
 800a696:	d329      	bcc.n	800a6ec <quorem+0x94>
 800a698:	9b06      	ldr	r3, [sp, #24]
 800a69a:	2600      	movs	r6, #0
 800a69c:	469c      	mov	ip, r3
 800a69e:	9d03      	ldr	r5, [sp, #12]
 800a6a0:	9606      	str	r6, [sp, #24]
 800a6a2:	4662      	mov	r2, ip
 800a6a4:	ca08      	ldmia	r2!, {r3}
 800a6a6:	6828      	ldr	r0, [r5, #0]
 800a6a8:	4694      	mov	ip, r2
 800a6aa:	9a02      	ldr	r2, [sp, #8]
 800a6ac:	b299      	uxth	r1, r3
 800a6ae:	4351      	muls	r1, r2
 800a6b0:	0c1b      	lsrs	r3, r3, #16
 800a6b2:	4353      	muls	r3, r2
 800a6b4:	1989      	adds	r1, r1, r6
 800a6b6:	0c0a      	lsrs	r2, r1, #16
 800a6b8:	189b      	adds	r3, r3, r2
 800a6ba:	9307      	str	r3, [sp, #28]
 800a6bc:	0c1e      	lsrs	r6, r3, #16
 800a6be:	9b06      	ldr	r3, [sp, #24]
 800a6c0:	b282      	uxth	r2, r0
 800a6c2:	18d2      	adds	r2, r2, r3
 800a6c4:	466b      	mov	r3, sp
 800a6c6:	b289      	uxth	r1, r1
 800a6c8:	8b9b      	ldrh	r3, [r3, #28]
 800a6ca:	1a52      	subs	r2, r2, r1
 800a6cc:	0c01      	lsrs	r1, r0, #16
 800a6ce:	1ac9      	subs	r1, r1, r3
 800a6d0:	1413      	asrs	r3, r2, #16
 800a6d2:	18cb      	adds	r3, r1, r3
 800a6d4:	1419      	asrs	r1, r3, #16
 800a6d6:	b292      	uxth	r2, r2
 800a6d8:	041b      	lsls	r3, r3, #16
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	c508      	stmia	r5!, {r3}
 800a6de:	9b05      	ldr	r3, [sp, #20]
 800a6e0:	9106      	str	r1, [sp, #24]
 800a6e2:	4563      	cmp	r3, ip
 800a6e4:	d2dd      	bcs.n	800a6a2 <quorem+0x4a>
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d030      	beq.n	800a74e <quorem+0xf6>
 800a6ec:	0038      	movs	r0, r7
 800a6ee:	9904      	ldr	r1, [sp, #16]
 800a6f0:	f001 fa2a 	bl	800bb48 <__mcmp>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	db21      	blt.n	800a73c <quorem+0xe4>
 800a6f8:	0038      	movs	r0, r7
 800a6fa:	2600      	movs	r6, #0
 800a6fc:	9b02      	ldr	r3, [sp, #8]
 800a6fe:	9c04      	ldr	r4, [sp, #16]
 800a700:	3301      	adds	r3, #1
 800a702:	9302      	str	r3, [sp, #8]
 800a704:	3014      	adds	r0, #20
 800a706:	3414      	adds	r4, #20
 800a708:	6803      	ldr	r3, [r0, #0]
 800a70a:	cc02      	ldmia	r4!, {r1}
 800a70c:	b29d      	uxth	r5, r3
 800a70e:	19ad      	adds	r5, r5, r6
 800a710:	b28a      	uxth	r2, r1
 800a712:	1aaa      	subs	r2, r5, r2
 800a714:	0c09      	lsrs	r1, r1, #16
 800a716:	0c1b      	lsrs	r3, r3, #16
 800a718:	1a5b      	subs	r3, r3, r1
 800a71a:	1411      	asrs	r1, r2, #16
 800a71c:	185b      	adds	r3, r3, r1
 800a71e:	141e      	asrs	r6, r3, #16
 800a720:	b292      	uxth	r2, r2
 800a722:	041b      	lsls	r3, r3, #16
 800a724:	4313      	orrs	r3, r2
 800a726:	c008      	stmia	r0!, {r3}
 800a728:	9b05      	ldr	r3, [sp, #20]
 800a72a:	42a3      	cmp	r3, r4
 800a72c:	d2ec      	bcs.n	800a708 <quorem+0xb0>
 800a72e:	9b01      	ldr	r3, [sp, #4]
 800a730:	9a03      	ldr	r2, [sp, #12]
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	18d3      	adds	r3, r2, r3
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	2a00      	cmp	r2, #0
 800a73a:	d015      	beq.n	800a768 <quorem+0x110>
 800a73c:	9802      	ldr	r0, [sp, #8]
 800a73e:	b009      	add	sp, #36	; 0x24
 800a740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d106      	bne.n	800a756 <quorem+0xfe>
 800a748:	9b01      	ldr	r3, [sp, #4]
 800a74a:	3b01      	subs	r3, #1
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	9b03      	ldr	r3, [sp, #12]
 800a750:	3c04      	subs	r4, #4
 800a752:	42a3      	cmp	r3, r4
 800a754:	d3f5      	bcc.n	800a742 <quorem+0xea>
 800a756:	9b01      	ldr	r3, [sp, #4]
 800a758:	613b      	str	r3, [r7, #16]
 800a75a:	e7c7      	b.n	800a6ec <quorem+0x94>
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	2a00      	cmp	r2, #0
 800a760:	d106      	bne.n	800a770 <quorem+0x118>
 800a762:	9a01      	ldr	r2, [sp, #4]
 800a764:	3a01      	subs	r2, #1
 800a766:	9201      	str	r2, [sp, #4]
 800a768:	9a03      	ldr	r2, [sp, #12]
 800a76a:	3b04      	subs	r3, #4
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d3f5      	bcc.n	800a75c <quorem+0x104>
 800a770:	9b01      	ldr	r3, [sp, #4]
 800a772:	613b      	str	r3, [r7, #16]
 800a774:	e7e2      	b.n	800a73c <quorem+0xe4>
	...

0800a778 <_dtoa_r>:
 800a778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a77a:	0014      	movs	r4, r2
 800a77c:	001d      	movs	r5, r3
 800a77e:	69c6      	ldr	r6, [r0, #28]
 800a780:	b09d      	sub	sp, #116	; 0x74
 800a782:	9408      	str	r4, [sp, #32]
 800a784:	9509      	str	r5, [sp, #36]	; 0x24
 800a786:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a788:	9004      	str	r0, [sp, #16]
 800a78a:	2e00      	cmp	r6, #0
 800a78c:	d10f      	bne.n	800a7ae <_dtoa_r+0x36>
 800a78e:	2010      	movs	r0, #16
 800a790:	f000 fe4a 	bl	800b428 <malloc>
 800a794:	9b04      	ldr	r3, [sp, #16]
 800a796:	1e02      	subs	r2, r0, #0
 800a798:	61d8      	str	r0, [r3, #28]
 800a79a:	d104      	bne.n	800a7a6 <_dtoa_r+0x2e>
 800a79c:	21ef      	movs	r1, #239	; 0xef
 800a79e:	4bc6      	ldr	r3, [pc, #792]	; (800aab8 <_dtoa_r+0x340>)
 800a7a0:	48c6      	ldr	r0, [pc, #792]	; (800aabc <_dtoa_r+0x344>)
 800a7a2:	f002 fccd 	bl	800d140 <__assert_func>
 800a7a6:	6046      	str	r6, [r0, #4]
 800a7a8:	6086      	str	r6, [r0, #8]
 800a7aa:	6006      	str	r6, [r0, #0]
 800a7ac:	60c6      	str	r6, [r0, #12]
 800a7ae:	9b04      	ldr	r3, [sp, #16]
 800a7b0:	69db      	ldr	r3, [r3, #28]
 800a7b2:	6819      	ldr	r1, [r3, #0]
 800a7b4:	2900      	cmp	r1, #0
 800a7b6:	d00b      	beq.n	800a7d0 <_dtoa_r+0x58>
 800a7b8:	685a      	ldr	r2, [r3, #4]
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	4093      	lsls	r3, r2
 800a7be:	604a      	str	r2, [r1, #4]
 800a7c0:	608b      	str	r3, [r1, #8]
 800a7c2:	9804      	ldr	r0, [sp, #16]
 800a7c4:	f000 ff32 	bl	800b62c <_Bfree>
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	9b04      	ldr	r3, [sp, #16]
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	2d00      	cmp	r5, #0
 800a7d2:	da1e      	bge.n	800a812 <_dtoa_r+0x9a>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	006b      	lsls	r3, r5, #1
 800a7da:	085b      	lsrs	r3, r3, #1
 800a7dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a7de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a7e0:	4bb7      	ldr	r3, [pc, #732]	; (800aac0 <_dtoa_r+0x348>)
 800a7e2:	4ab7      	ldr	r2, [pc, #732]	; (800aac0 <_dtoa_r+0x348>)
 800a7e4:	403b      	ands	r3, r7
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d116      	bne.n	800a818 <_dtoa_r+0xa0>
 800a7ea:	4bb6      	ldr	r3, [pc, #728]	; (800aac4 <_dtoa_r+0x34c>)
 800a7ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	033b      	lsls	r3, r7, #12
 800a7f2:	0b1b      	lsrs	r3, r3, #12
 800a7f4:	4323      	orrs	r3, r4
 800a7f6:	d101      	bne.n	800a7fc <_dtoa_r+0x84>
 800a7f8:	f000 fdb5 	bl	800b366 <_dtoa_r+0xbee>
 800a7fc:	4bb2      	ldr	r3, [pc, #712]	; (800aac8 <_dtoa_r+0x350>)
 800a7fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a800:	9306      	str	r3, [sp, #24]
 800a802:	2a00      	cmp	r2, #0
 800a804:	d002      	beq.n	800a80c <_dtoa_r+0x94>
 800a806:	4bb1      	ldr	r3, [pc, #708]	; (800aacc <_dtoa_r+0x354>)
 800a808:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a80a:	6013      	str	r3, [r2, #0]
 800a80c:	9806      	ldr	r0, [sp, #24]
 800a80e:	b01d      	add	sp, #116	; 0x74
 800a810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a812:	2300      	movs	r3, #0
 800a814:	603b      	str	r3, [r7, #0]
 800a816:	e7e2      	b.n	800a7de <_dtoa_r+0x66>
 800a818:	9a08      	ldr	r2, [sp, #32]
 800a81a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a81c:	9210      	str	r2, [sp, #64]	; 0x40
 800a81e:	9311      	str	r3, [sp, #68]	; 0x44
 800a820:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a822:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a824:	2200      	movs	r2, #0
 800a826:	2300      	movs	r3, #0
 800a828:	f7f5 fe10 	bl	800044c <__aeabi_dcmpeq>
 800a82c:	1e06      	subs	r6, r0, #0
 800a82e:	d009      	beq.n	800a844 <_dtoa_r+0xcc>
 800a830:	2301      	movs	r3, #1
 800a832:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a834:	6013      	str	r3, [r2, #0]
 800a836:	4ba6      	ldr	r3, [pc, #664]	; (800aad0 <_dtoa_r+0x358>)
 800a838:	9306      	str	r3, [sp, #24]
 800a83a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d0e5      	beq.n	800a80c <_dtoa_r+0x94>
 800a840:	4ba4      	ldr	r3, [pc, #656]	; (800aad4 <_dtoa_r+0x35c>)
 800a842:	e7e1      	b.n	800a808 <_dtoa_r+0x90>
 800a844:	ab1a      	add	r3, sp, #104	; 0x68
 800a846:	9301      	str	r3, [sp, #4]
 800a848:	ab1b      	add	r3, sp, #108	; 0x6c
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	9804      	ldr	r0, [sp, #16]
 800a84e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a850:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a852:	f001 fa95 	bl	800bd80 <__d2b>
 800a856:	007a      	lsls	r2, r7, #1
 800a858:	9005      	str	r0, [sp, #20]
 800a85a:	0d52      	lsrs	r2, r2, #21
 800a85c:	d100      	bne.n	800a860 <_dtoa_r+0xe8>
 800a85e:	e07b      	b.n	800a958 <_dtoa_r+0x1e0>
 800a860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a862:	9617      	str	r6, [sp, #92]	; 0x5c
 800a864:	0319      	lsls	r1, r3, #12
 800a866:	4b9c      	ldr	r3, [pc, #624]	; (800aad8 <_dtoa_r+0x360>)
 800a868:	0b09      	lsrs	r1, r1, #12
 800a86a:	430b      	orrs	r3, r1
 800a86c:	499b      	ldr	r1, [pc, #620]	; (800aadc <_dtoa_r+0x364>)
 800a86e:	1857      	adds	r7, r2, r1
 800a870:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a872:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a874:	0019      	movs	r1, r3
 800a876:	2200      	movs	r2, #0
 800a878:	4b99      	ldr	r3, [pc, #612]	; (800aae0 <_dtoa_r+0x368>)
 800a87a:	f7f7 fb1d 	bl	8001eb8 <__aeabi_dsub>
 800a87e:	4a99      	ldr	r2, [pc, #612]	; (800aae4 <_dtoa_r+0x36c>)
 800a880:	4b99      	ldr	r3, [pc, #612]	; (800aae8 <_dtoa_r+0x370>)
 800a882:	f7f7 f857 	bl	8001934 <__aeabi_dmul>
 800a886:	4a99      	ldr	r2, [pc, #612]	; (800aaec <_dtoa_r+0x374>)
 800a888:	4b99      	ldr	r3, [pc, #612]	; (800aaf0 <_dtoa_r+0x378>)
 800a88a:	f7f6 f8f9 	bl	8000a80 <__aeabi_dadd>
 800a88e:	0004      	movs	r4, r0
 800a890:	0038      	movs	r0, r7
 800a892:	000d      	movs	r5, r1
 800a894:	f7f7 fee6 	bl	8002664 <__aeabi_i2d>
 800a898:	4a96      	ldr	r2, [pc, #600]	; (800aaf4 <_dtoa_r+0x37c>)
 800a89a:	4b97      	ldr	r3, [pc, #604]	; (800aaf8 <_dtoa_r+0x380>)
 800a89c:	f7f7 f84a 	bl	8001934 <__aeabi_dmul>
 800a8a0:	0002      	movs	r2, r0
 800a8a2:	000b      	movs	r3, r1
 800a8a4:	0020      	movs	r0, r4
 800a8a6:	0029      	movs	r1, r5
 800a8a8:	f7f6 f8ea 	bl	8000a80 <__aeabi_dadd>
 800a8ac:	0004      	movs	r4, r0
 800a8ae:	000d      	movs	r5, r1
 800a8b0:	f7f7 fea2 	bl	80025f8 <__aeabi_d2iz>
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	9003      	str	r0, [sp, #12]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	0020      	movs	r0, r4
 800a8bc:	0029      	movs	r1, r5
 800a8be:	f7f5 fdcb 	bl	8000458 <__aeabi_dcmplt>
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d00b      	beq.n	800a8de <_dtoa_r+0x166>
 800a8c6:	9803      	ldr	r0, [sp, #12]
 800a8c8:	f7f7 fecc 	bl	8002664 <__aeabi_i2d>
 800a8cc:	002b      	movs	r3, r5
 800a8ce:	0022      	movs	r2, r4
 800a8d0:	f7f5 fdbc 	bl	800044c <__aeabi_dcmpeq>
 800a8d4:	4243      	negs	r3, r0
 800a8d6:	4158      	adcs	r0, r3
 800a8d8:	9b03      	ldr	r3, [sp, #12]
 800a8da:	1a1b      	subs	r3, r3, r0
 800a8dc:	9303      	str	r3, [sp, #12]
 800a8de:	2301      	movs	r3, #1
 800a8e0:	9316      	str	r3, [sp, #88]	; 0x58
 800a8e2:	9b03      	ldr	r3, [sp, #12]
 800a8e4:	2b16      	cmp	r3, #22
 800a8e6:	d810      	bhi.n	800a90a <_dtoa_r+0x192>
 800a8e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a8ea:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a8ec:	9a03      	ldr	r2, [sp, #12]
 800a8ee:	4b83      	ldr	r3, [pc, #524]	; (800aafc <_dtoa_r+0x384>)
 800a8f0:	00d2      	lsls	r2, r2, #3
 800a8f2:	189b      	adds	r3, r3, r2
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f7f5 fdae 	bl	8000458 <__aeabi_dcmplt>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d047      	beq.n	800a990 <_dtoa_r+0x218>
 800a900:	9b03      	ldr	r3, [sp, #12]
 800a902:	3b01      	subs	r3, #1
 800a904:	9303      	str	r3, [sp, #12]
 800a906:	2300      	movs	r3, #0
 800a908:	9316      	str	r3, [sp, #88]	; 0x58
 800a90a:	2200      	movs	r2, #0
 800a90c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a90e:	920a      	str	r2, [sp, #40]	; 0x28
 800a910:	1bdb      	subs	r3, r3, r7
 800a912:	1e5a      	subs	r2, r3, #1
 800a914:	d53e      	bpl.n	800a994 <_dtoa_r+0x21c>
 800a916:	2201      	movs	r2, #1
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	930a      	str	r3, [sp, #40]	; 0x28
 800a91c:	2300      	movs	r3, #0
 800a91e:	930c      	str	r3, [sp, #48]	; 0x30
 800a920:	9b03      	ldr	r3, [sp, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	db38      	blt.n	800a998 <_dtoa_r+0x220>
 800a926:	9a03      	ldr	r2, [sp, #12]
 800a928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a92a:	4694      	mov	ip, r2
 800a92c:	4463      	add	r3, ip
 800a92e:	930c      	str	r3, [sp, #48]	; 0x30
 800a930:	2300      	movs	r3, #0
 800a932:	9213      	str	r2, [sp, #76]	; 0x4c
 800a934:	930d      	str	r3, [sp, #52]	; 0x34
 800a936:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a938:	2401      	movs	r4, #1
 800a93a:	2b09      	cmp	r3, #9
 800a93c:	d867      	bhi.n	800aa0e <_dtoa_r+0x296>
 800a93e:	2b05      	cmp	r3, #5
 800a940:	dd02      	ble.n	800a948 <_dtoa_r+0x1d0>
 800a942:	2400      	movs	r4, #0
 800a944:	3b04      	subs	r3, #4
 800a946:	9322      	str	r3, [sp, #136]	; 0x88
 800a948:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a94a:	1e98      	subs	r0, r3, #2
 800a94c:	2803      	cmp	r0, #3
 800a94e:	d867      	bhi.n	800aa20 <_dtoa_r+0x2a8>
 800a950:	f7f5 fbe2 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a954:	5b383a2b 	.word	0x5b383a2b
 800a958:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a95a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a95c:	18f6      	adds	r6, r6, r3
 800a95e:	4b68      	ldr	r3, [pc, #416]	; (800ab00 <_dtoa_r+0x388>)
 800a960:	18f2      	adds	r2, r6, r3
 800a962:	2a20      	cmp	r2, #32
 800a964:	dd0f      	ble.n	800a986 <_dtoa_r+0x20e>
 800a966:	2340      	movs	r3, #64	; 0x40
 800a968:	1a9b      	subs	r3, r3, r2
 800a96a:	409f      	lsls	r7, r3
 800a96c:	4b65      	ldr	r3, [pc, #404]	; (800ab04 <_dtoa_r+0x38c>)
 800a96e:	0038      	movs	r0, r7
 800a970:	18f3      	adds	r3, r6, r3
 800a972:	40dc      	lsrs	r4, r3
 800a974:	4320      	orrs	r0, r4
 800a976:	f7f7 fea5 	bl	80026c4 <__aeabi_ui2d>
 800a97a:	2201      	movs	r2, #1
 800a97c:	4b62      	ldr	r3, [pc, #392]	; (800ab08 <_dtoa_r+0x390>)
 800a97e:	1e77      	subs	r7, r6, #1
 800a980:	18cb      	adds	r3, r1, r3
 800a982:	9217      	str	r2, [sp, #92]	; 0x5c
 800a984:	e776      	b.n	800a874 <_dtoa_r+0xfc>
 800a986:	2320      	movs	r3, #32
 800a988:	0020      	movs	r0, r4
 800a98a:	1a9b      	subs	r3, r3, r2
 800a98c:	4098      	lsls	r0, r3
 800a98e:	e7f2      	b.n	800a976 <_dtoa_r+0x1fe>
 800a990:	9016      	str	r0, [sp, #88]	; 0x58
 800a992:	e7ba      	b.n	800a90a <_dtoa_r+0x192>
 800a994:	920c      	str	r2, [sp, #48]	; 0x30
 800a996:	e7c3      	b.n	800a920 <_dtoa_r+0x1a8>
 800a998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a99a:	9a03      	ldr	r2, [sp, #12]
 800a99c:	1a9b      	subs	r3, r3, r2
 800a99e:	930a      	str	r3, [sp, #40]	; 0x28
 800a9a0:	4253      	negs	r3, r2
 800a9a2:	930d      	str	r3, [sp, #52]	; 0x34
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	9313      	str	r3, [sp, #76]	; 0x4c
 800a9a8:	e7c5      	b.n	800a936 <_dtoa_r+0x1be>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9b2:	9307      	str	r3, [sp, #28]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	dc13      	bgt.n	800a9e0 <_dtoa_r+0x268>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	001a      	movs	r2, r3
 800a9bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9be:	9307      	str	r3, [sp, #28]
 800a9c0:	9223      	str	r2, [sp, #140]	; 0x8c
 800a9c2:	e00d      	b.n	800a9e0 <_dtoa_r+0x268>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e7f1      	b.n	800a9ac <_dtoa_r+0x234>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a9cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9ce:	4694      	mov	ip, r2
 800a9d0:	9b03      	ldr	r3, [sp, #12]
 800a9d2:	4463      	add	r3, ip
 800a9d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	9307      	str	r3, [sp, #28]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	dc00      	bgt.n	800a9e0 <_dtoa_r+0x268>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	9a04      	ldr	r2, [sp, #16]
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	69d0      	ldr	r0, [r2, #28]
 800a9e6:	2204      	movs	r2, #4
 800a9e8:	0015      	movs	r5, r2
 800a9ea:	3514      	adds	r5, #20
 800a9ec:	429d      	cmp	r5, r3
 800a9ee:	d91b      	bls.n	800aa28 <_dtoa_r+0x2b0>
 800a9f0:	6041      	str	r1, [r0, #4]
 800a9f2:	9804      	ldr	r0, [sp, #16]
 800a9f4:	f000 fdd6 	bl	800b5a4 <_Balloc>
 800a9f8:	9006      	str	r0, [sp, #24]
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d117      	bne.n	800aa2e <_dtoa_r+0x2b6>
 800a9fe:	21b0      	movs	r1, #176	; 0xb0
 800aa00:	4b42      	ldr	r3, [pc, #264]	; (800ab0c <_dtoa_r+0x394>)
 800aa02:	482e      	ldr	r0, [pc, #184]	; (800aabc <_dtoa_r+0x344>)
 800aa04:	9a06      	ldr	r2, [sp, #24]
 800aa06:	31ff      	adds	r1, #255	; 0xff
 800aa08:	e6cb      	b.n	800a7a2 <_dtoa_r+0x2a>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e7dd      	b.n	800a9ca <_dtoa_r+0x252>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	940f      	str	r4, [sp, #60]	; 0x3c
 800aa12:	9322      	str	r3, [sp, #136]	; 0x88
 800aa14:	3b01      	subs	r3, #1
 800aa16:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa18:	9307      	str	r3, [sp, #28]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	3313      	adds	r3, #19
 800aa1e:	e7cf      	b.n	800a9c0 <_dtoa_r+0x248>
 800aa20:	2301      	movs	r3, #1
 800aa22:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa24:	3b02      	subs	r3, #2
 800aa26:	e7f6      	b.n	800aa16 <_dtoa_r+0x29e>
 800aa28:	3101      	adds	r1, #1
 800aa2a:	0052      	lsls	r2, r2, #1
 800aa2c:	e7dc      	b.n	800a9e8 <_dtoa_r+0x270>
 800aa2e:	9b04      	ldr	r3, [sp, #16]
 800aa30:	9a06      	ldr	r2, [sp, #24]
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	601a      	str	r2, [r3, #0]
 800aa36:	9b07      	ldr	r3, [sp, #28]
 800aa38:	2b0e      	cmp	r3, #14
 800aa3a:	d900      	bls.n	800aa3e <_dtoa_r+0x2c6>
 800aa3c:	e0e5      	b.n	800ac0a <_dtoa_r+0x492>
 800aa3e:	2c00      	cmp	r4, #0
 800aa40:	d100      	bne.n	800aa44 <_dtoa_r+0x2cc>
 800aa42:	e0e2      	b.n	800ac0a <_dtoa_r+0x492>
 800aa44:	9b03      	ldr	r3, [sp, #12]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	dd64      	ble.n	800ab14 <_dtoa_r+0x39c>
 800aa4a:	210f      	movs	r1, #15
 800aa4c:	9a03      	ldr	r2, [sp, #12]
 800aa4e:	4b2b      	ldr	r3, [pc, #172]	; (800aafc <_dtoa_r+0x384>)
 800aa50:	400a      	ands	r2, r1
 800aa52:	00d2      	lsls	r2, r2, #3
 800aa54:	189b      	adds	r3, r3, r2
 800aa56:	681e      	ldr	r6, [r3, #0]
 800aa58:	685f      	ldr	r7, [r3, #4]
 800aa5a:	9b03      	ldr	r3, [sp, #12]
 800aa5c:	2402      	movs	r4, #2
 800aa5e:	111d      	asrs	r5, r3, #4
 800aa60:	05db      	lsls	r3, r3, #23
 800aa62:	d50a      	bpl.n	800aa7a <_dtoa_r+0x302>
 800aa64:	4b2a      	ldr	r3, [pc, #168]	; (800ab10 <_dtoa_r+0x398>)
 800aa66:	400d      	ands	r5, r1
 800aa68:	6a1a      	ldr	r2, [r3, #32]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aa6e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aa70:	f7f6 fb66 	bl	8001140 <__aeabi_ddiv>
 800aa74:	9008      	str	r0, [sp, #32]
 800aa76:	9109      	str	r1, [sp, #36]	; 0x24
 800aa78:	3401      	adds	r4, #1
 800aa7a:	4b25      	ldr	r3, [pc, #148]	; (800ab10 <_dtoa_r+0x398>)
 800aa7c:	930e      	str	r3, [sp, #56]	; 0x38
 800aa7e:	2d00      	cmp	r5, #0
 800aa80:	d108      	bne.n	800aa94 <_dtoa_r+0x31c>
 800aa82:	9808      	ldr	r0, [sp, #32]
 800aa84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa86:	0032      	movs	r2, r6
 800aa88:	003b      	movs	r3, r7
 800aa8a:	f7f6 fb59 	bl	8001140 <__aeabi_ddiv>
 800aa8e:	9008      	str	r0, [sp, #32]
 800aa90:	9109      	str	r1, [sp, #36]	; 0x24
 800aa92:	e05a      	b.n	800ab4a <_dtoa_r+0x3d2>
 800aa94:	2301      	movs	r3, #1
 800aa96:	421d      	tst	r5, r3
 800aa98:	d009      	beq.n	800aaae <_dtoa_r+0x336>
 800aa9a:	18e4      	adds	r4, r4, r3
 800aa9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa9e:	0030      	movs	r0, r6
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	0039      	movs	r1, r7
 800aaa6:	f7f6 ff45 	bl	8001934 <__aeabi_dmul>
 800aaaa:	0006      	movs	r6, r0
 800aaac:	000f      	movs	r7, r1
 800aaae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aab0:	106d      	asrs	r5, r5, #1
 800aab2:	3308      	adds	r3, #8
 800aab4:	e7e2      	b.n	800aa7c <_dtoa_r+0x304>
 800aab6:	46c0      	nop			; (mov r8, r8)
 800aab8:	0800e52e 	.word	0x0800e52e
 800aabc:	0800e545 	.word	0x0800e545
 800aac0:	7ff00000 	.word	0x7ff00000
 800aac4:	0000270f 	.word	0x0000270f
 800aac8:	0800e52a 	.word	0x0800e52a
 800aacc:	0800e52d 	.word	0x0800e52d
 800aad0:	0800e4f8 	.word	0x0800e4f8
 800aad4:	0800e4f9 	.word	0x0800e4f9
 800aad8:	3ff00000 	.word	0x3ff00000
 800aadc:	fffffc01 	.word	0xfffffc01
 800aae0:	3ff80000 	.word	0x3ff80000
 800aae4:	636f4361 	.word	0x636f4361
 800aae8:	3fd287a7 	.word	0x3fd287a7
 800aaec:	8b60c8b3 	.word	0x8b60c8b3
 800aaf0:	3fc68a28 	.word	0x3fc68a28
 800aaf4:	509f79fb 	.word	0x509f79fb
 800aaf8:	3fd34413 	.word	0x3fd34413
 800aafc:	0800e630 	.word	0x0800e630
 800ab00:	00000432 	.word	0x00000432
 800ab04:	00000412 	.word	0x00000412
 800ab08:	fe100000 	.word	0xfe100000
 800ab0c:	0800e59d 	.word	0x0800e59d
 800ab10:	0800e608 	.word	0x0800e608
 800ab14:	9b03      	ldr	r3, [sp, #12]
 800ab16:	2402      	movs	r4, #2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d016      	beq.n	800ab4a <_dtoa_r+0x3d2>
 800ab1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ab1e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab20:	220f      	movs	r2, #15
 800ab22:	425d      	negs	r5, r3
 800ab24:	402a      	ands	r2, r5
 800ab26:	4bdd      	ldr	r3, [pc, #884]	; (800ae9c <_dtoa_r+0x724>)
 800ab28:	00d2      	lsls	r2, r2, #3
 800ab2a:	189b      	adds	r3, r3, r2
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	f7f6 ff00 	bl	8001934 <__aeabi_dmul>
 800ab34:	2701      	movs	r7, #1
 800ab36:	2300      	movs	r3, #0
 800ab38:	9008      	str	r0, [sp, #32]
 800ab3a:	9109      	str	r1, [sp, #36]	; 0x24
 800ab3c:	4ed8      	ldr	r6, [pc, #864]	; (800aea0 <_dtoa_r+0x728>)
 800ab3e:	112d      	asrs	r5, r5, #4
 800ab40:	2d00      	cmp	r5, #0
 800ab42:	d000      	beq.n	800ab46 <_dtoa_r+0x3ce>
 800ab44:	e091      	b.n	800ac6a <_dtoa_r+0x4f2>
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1a1      	bne.n	800aa8e <_dtoa_r+0x316>
 800ab4a:	9e08      	ldr	r6, [sp, #32]
 800ab4c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d100      	bne.n	800ab56 <_dtoa_r+0x3de>
 800ab54:	e094      	b.n	800ac80 <_dtoa_r+0x508>
 800ab56:	2200      	movs	r2, #0
 800ab58:	0030      	movs	r0, r6
 800ab5a:	0039      	movs	r1, r7
 800ab5c:	4bd1      	ldr	r3, [pc, #836]	; (800aea4 <_dtoa_r+0x72c>)
 800ab5e:	f7f5 fc7b 	bl	8000458 <__aeabi_dcmplt>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d100      	bne.n	800ab68 <_dtoa_r+0x3f0>
 800ab66:	e08b      	b.n	800ac80 <_dtoa_r+0x508>
 800ab68:	9b07      	ldr	r3, [sp, #28]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d100      	bne.n	800ab70 <_dtoa_r+0x3f8>
 800ab6e:	e087      	b.n	800ac80 <_dtoa_r+0x508>
 800ab70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	dd45      	ble.n	800ac02 <_dtoa_r+0x48a>
 800ab76:	9b03      	ldr	r3, [sp, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	930e      	str	r3, [sp, #56]	; 0x38
 800ab7e:	0030      	movs	r0, r6
 800ab80:	4bc9      	ldr	r3, [pc, #804]	; (800aea8 <_dtoa_r+0x730>)
 800ab82:	0039      	movs	r1, r7
 800ab84:	f7f6 fed6 	bl	8001934 <__aeabi_dmul>
 800ab88:	9008      	str	r0, [sp, #32]
 800ab8a:	9109      	str	r1, [sp, #36]	; 0x24
 800ab8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab8e:	3401      	adds	r4, #1
 800ab90:	0020      	movs	r0, r4
 800ab92:	9e08      	ldr	r6, [sp, #32]
 800ab94:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab96:	9312      	str	r3, [sp, #72]	; 0x48
 800ab98:	f7f7 fd64 	bl	8002664 <__aeabi_i2d>
 800ab9c:	0032      	movs	r2, r6
 800ab9e:	003b      	movs	r3, r7
 800aba0:	f7f6 fec8 	bl	8001934 <__aeabi_dmul>
 800aba4:	2200      	movs	r2, #0
 800aba6:	4bc1      	ldr	r3, [pc, #772]	; (800aeac <_dtoa_r+0x734>)
 800aba8:	f7f5 ff6a 	bl	8000a80 <__aeabi_dadd>
 800abac:	4ac0      	ldr	r2, [pc, #768]	; (800aeb0 <_dtoa_r+0x738>)
 800abae:	9014      	str	r0, [sp, #80]	; 0x50
 800abb0:	9115      	str	r1, [sp, #84]	; 0x54
 800abb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abb4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800abb6:	4694      	mov	ip, r2
 800abb8:	9308      	str	r3, [sp, #32]
 800abba:	9409      	str	r4, [sp, #36]	; 0x24
 800abbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abbe:	4463      	add	r3, ip
 800abc0:	9318      	str	r3, [sp, #96]	; 0x60
 800abc2:	9309      	str	r3, [sp, #36]	; 0x24
 800abc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d15e      	bne.n	800ac88 <_dtoa_r+0x510>
 800abca:	2200      	movs	r2, #0
 800abcc:	4bb9      	ldr	r3, [pc, #740]	; (800aeb4 <_dtoa_r+0x73c>)
 800abce:	0030      	movs	r0, r6
 800abd0:	0039      	movs	r1, r7
 800abd2:	f7f7 f971 	bl	8001eb8 <__aeabi_dsub>
 800abd6:	9a08      	ldr	r2, [sp, #32]
 800abd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800abda:	0004      	movs	r4, r0
 800abdc:	000d      	movs	r5, r1
 800abde:	f7f5 fc4f 	bl	8000480 <__aeabi_dcmpgt>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d000      	beq.n	800abe8 <_dtoa_r+0x470>
 800abe6:	e2b3      	b.n	800b150 <_dtoa_r+0x9d8>
 800abe8:	48b3      	ldr	r0, [pc, #716]	; (800aeb8 <_dtoa_r+0x740>)
 800abea:	9915      	ldr	r1, [sp, #84]	; 0x54
 800abec:	4684      	mov	ip, r0
 800abee:	4461      	add	r1, ip
 800abf0:	000b      	movs	r3, r1
 800abf2:	0020      	movs	r0, r4
 800abf4:	0029      	movs	r1, r5
 800abf6:	9a08      	ldr	r2, [sp, #32]
 800abf8:	f7f5 fc2e 	bl	8000458 <__aeabi_dcmplt>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d000      	beq.n	800ac02 <_dtoa_r+0x48a>
 800ac00:	e2a3      	b.n	800b14a <_dtoa_r+0x9d2>
 800ac02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac04:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ac06:	9308      	str	r3, [sp, #32]
 800ac08:	9409      	str	r4, [sp, #36]	; 0x24
 800ac0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	da00      	bge.n	800ac12 <_dtoa_r+0x49a>
 800ac10:	e179      	b.n	800af06 <_dtoa_r+0x78e>
 800ac12:	9a03      	ldr	r2, [sp, #12]
 800ac14:	2a0e      	cmp	r2, #14
 800ac16:	dd00      	ble.n	800ac1a <_dtoa_r+0x4a2>
 800ac18:	e175      	b.n	800af06 <_dtoa_r+0x78e>
 800ac1a:	4ba0      	ldr	r3, [pc, #640]	; (800ae9c <_dtoa_r+0x724>)
 800ac1c:	00d2      	lsls	r2, r2, #3
 800ac1e:	189b      	adds	r3, r3, r2
 800ac20:	681e      	ldr	r6, [r3, #0]
 800ac22:	685f      	ldr	r7, [r3, #4]
 800ac24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	db00      	blt.n	800ac2c <_dtoa_r+0x4b4>
 800ac2a:	e0e5      	b.n	800adf8 <_dtoa_r+0x680>
 800ac2c:	9b07      	ldr	r3, [sp, #28]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	dd00      	ble.n	800ac34 <_dtoa_r+0x4bc>
 800ac32:	e0e1      	b.n	800adf8 <_dtoa_r+0x680>
 800ac34:	d000      	beq.n	800ac38 <_dtoa_r+0x4c0>
 800ac36:	e288      	b.n	800b14a <_dtoa_r+0x9d2>
 800ac38:	2200      	movs	r2, #0
 800ac3a:	0030      	movs	r0, r6
 800ac3c:	0039      	movs	r1, r7
 800ac3e:	4b9d      	ldr	r3, [pc, #628]	; (800aeb4 <_dtoa_r+0x73c>)
 800ac40:	f7f6 fe78 	bl	8001934 <__aeabi_dmul>
 800ac44:	9a08      	ldr	r2, [sp, #32]
 800ac46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac48:	f7f5 fc24 	bl	8000494 <__aeabi_dcmpge>
 800ac4c:	9e07      	ldr	r6, [sp, #28]
 800ac4e:	0037      	movs	r7, r6
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d000      	beq.n	800ac56 <_dtoa_r+0x4de>
 800ac54:	e25f      	b.n	800b116 <_dtoa_r+0x99e>
 800ac56:	9b06      	ldr	r3, [sp, #24]
 800ac58:	9a06      	ldr	r2, [sp, #24]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	9308      	str	r3, [sp, #32]
 800ac5e:	2331      	movs	r3, #49	; 0x31
 800ac60:	7013      	strb	r3, [r2, #0]
 800ac62:	9b03      	ldr	r3, [sp, #12]
 800ac64:	3301      	adds	r3, #1
 800ac66:	9303      	str	r3, [sp, #12]
 800ac68:	e25a      	b.n	800b120 <_dtoa_r+0x9a8>
 800ac6a:	423d      	tst	r5, r7
 800ac6c:	d005      	beq.n	800ac7a <_dtoa_r+0x502>
 800ac6e:	6832      	ldr	r2, [r6, #0]
 800ac70:	6873      	ldr	r3, [r6, #4]
 800ac72:	f7f6 fe5f 	bl	8001934 <__aeabi_dmul>
 800ac76:	003b      	movs	r3, r7
 800ac78:	3401      	adds	r4, #1
 800ac7a:	106d      	asrs	r5, r5, #1
 800ac7c:	3608      	adds	r6, #8
 800ac7e:	e75f      	b.n	800ab40 <_dtoa_r+0x3c8>
 800ac80:	9b03      	ldr	r3, [sp, #12]
 800ac82:	930e      	str	r3, [sp, #56]	; 0x38
 800ac84:	9b07      	ldr	r3, [sp, #28]
 800ac86:	e783      	b.n	800ab90 <_dtoa_r+0x418>
 800ac88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac8a:	4b84      	ldr	r3, [pc, #528]	; (800ae9c <_dtoa_r+0x724>)
 800ac8c:	3a01      	subs	r2, #1
 800ac8e:	00d2      	lsls	r2, r2, #3
 800ac90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ac92:	189b      	adds	r3, r3, r2
 800ac94:	9c08      	ldr	r4, [sp, #32]
 800ac96:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	2900      	cmp	r1, #0
 800ac9e:	d051      	beq.n	800ad44 <_dtoa_r+0x5cc>
 800aca0:	2000      	movs	r0, #0
 800aca2:	4986      	ldr	r1, [pc, #536]	; (800aebc <_dtoa_r+0x744>)
 800aca4:	f7f6 fa4c 	bl	8001140 <__aeabi_ddiv>
 800aca8:	0022      	movs	r2, r4
 800acaa:	002b      	movs	r3, r5
 800acac:	f7f7 f904 	bl	8001eb8 <__aeabi_dsub>
 800acb0:	9a06      	ldr	r2, [sp, #24]
 800acb2:	0004      	movs	r4, r0
 800acb4:	4694      	mov	ip, r2
 800acb6:	000d      	movs	r5, r1
 800acb8:	9b06      	ldr	r3, [sp, #24]
 800acba:	9314      	str	r3, [sp, #80]	; 0x50
 800acbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acbe:	4463      	add	r3, ip
 800acc0:	9318      	str	r3, [sp, #96]	; 0x60
 800acc2:	0039      	movs	r1, r7
 800acc4:	0030      	movs	r0, r6
 800acc6:	f7f7 fc97 	bl	80025f8 <__aeabi_d2iz>
 800acca:	9012      	str	r0, [sp, #72]	; 0x48
 800accc:	f7f7 fcca 	bl	8002664 <__aeabi_i2d>
 800acd0:	0002      	movs	r2, r0
 800acd2:	000b      	movs	r3, r1
 800acd4:	0030      	movs	r0, r6
 800acd6:	0039      	movs	r1, r7
 800acd8:	f7f7 f8ee 	bl	8001eb8 <__aeabi_dsub>
 800acdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ace0:	3301      	adds	r3, #1
 800ace2:	9308      	str	r3, [sp, #32]
 800ace4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ace6:	0006      	movs	r6, r0
 800ace8:	3330      	adds	r3, #48	; 0x30
 800acea:	7013      	strb	r3, [r2, #0]
 800acec:	0022      	movs	r2, r4
 800acee:	002b      	movs	r3, r5
 800acf0:	000f      	movs	r7, r1
 800acf2:	f7f5 fbb1 	bl	8000458 <__aeabi_dcmplt>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d174      	bne.n	800ade4 <_dtoa_r+0x66c>
 800acfa:	0032      	movs	r2, r6
 800acfc:	003b      	movs	r3, r7
 800acfe:	2000      	movs	r0, #0
 800ad00:	4968      	ldr	r1, [pc, #416]	; (800aea4 <_dtoa_r+0x72c>)
 800ad02:	f7f7 f8d9 	bl	8001eb8 <__aeabi_dsub>
 800ad06:	0022      	movs	r2, r4
 800ad08:	002b      	movs	r3, r5
 800ad0a:	f7f5 fba5 	bl	8000458 <__aeabi_dcmplt>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d000      	beq.n	800ad14 <_dtoa_r+0x59c>
 800ad12:	e0d7      	b.n	800aec4 <_dtoa_r+0x74c>
 800ad14:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ad16:	9a08      	ldr	r2, [sp, #32]
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d100      	bne.n	800ad1e <_dtoa_r+0x5a6>
 800ad1c:	e771      	b.n	800ac02 <_dtoa_r+0x48a>
 800ad1e:	2200      	movs	r2, #0
 800ad20:	0020      	movs	r0, r4
 800ad22:	0029      	movs	r1, r5
 800ad24:	4b60      	ldr	r3, [pc, #384]	; (800aea8 <_dtoa_r+0x730>)
 800ad26:	f7f6 fe05 	bl	8001934 <__aeabi_dmul>
 800ad2a:	4b5f      	ldr	r3, [pc, #380]	; (800aea8 <_dtoa_r+0x730>)
 800ad2c:	0004      	movs	r4, r0
 800ad2e:	000d      	movs	r5, r1
 800ad30:	0030      	movs	r0, r6
 800ad32:	0039      	movs	r1, r7
 800ad34:	2200      	movs	r2, #0
 800ad36:	f7f6 fdfd 	bl	8001934 <__aeabi_dmul>
 800ad3a:	9b08      	ldr	r3, [sp, #32]
 800ad3c:	0006      	movs	r6, r0
 800ad3e:	000f      	movs	r7, r1
 800ad40:	9314      	str	r3, [sp, #80]	; 0x50
 800ad42:	e7be      	b.n	800acc2 <_dtoa_r+0x54a>
 800ad44:	0020      	movs	r0, r4
 800ad46:	0029      	movs	r1, r5
 800ad48:	f7f6 fdf4 	bl	8001934 <__aeabi_dmul>
 800ad4c:	9a06      	ldr	r2, [sp, #24]
 800ad4e:	9b06      	ldr	r3, [sp, #24]
 800ad50:	4694      	mov	ip, r2
 800ad52:	9308      	str	r3, [sp, #32]
 800ad54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad56:	9014      	str	r0, [sp, #80]	; 0x50
 800ad58:	9115      	str	r1, [sp, #84]	; 0x54
 800ad5a:	4463      	add	r3, ip
 800ad5c:	9319      	str	r3, [sp, #100]	; 0x64
 800ad5e:	0030      	movs	r0, r6
 800ad60:	0039      	movs	r1, r7
 800ad62:	f7f7 fc49 	bl	80025f8 <__aeabi_d2iz>
 800ad66:	9018      	str	r0, [sp, #96]	; 0x60
 800ad68:	f7f7 fc7c 	bl	8002664 <__aeabi_i2d>
 800ad6c:	0002      	movs	r2, r0
 800ad6e:	000b      	movs	r3, r1
 800ad70:	0030      	movs	r0, r6
 800ad72:	0039      	movs	r1, r7
 800ad74:	f7f7 f8a0 	bl	8001eb8 <__aeabi_dsub>
 800ad78:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ad7a:	9b08      	ldr	r3, [sp, #32]
 800ad7c:	3630      	adds	r6, #48	; 0x30
 800ad7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad80:	701e      	strb	r6, [r3, #0]
 800ad82:	3301      	adds	r3, #1
 800ad84:	0004      	movs	r4, r0
 800ad86:	000d      	movs	r5, r1
 800ad88:	9308      	str	r3, [sp, #32]
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d12d      	bne.n	800adea <_dtoa_r+0x672>
 800ad8e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ad90:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ad92:	9a06      	ldr	r2, [sp, #24]
 800ad94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad96:	4694      	mov	ip, r2
 800ad98:	4463      	add	r3, ip
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	9308      	str	r3, [sp, #32]
 800ad9e:	4b47      	ldr	r3, [pc, #284]	; (800aebc <_dtoa_r+0x744>)
 800ada0:	f7f5 fe6e 	bl	8000a80 <__aeabi_dadd>
 800ada4:	0002      	movs	r2, r0
 800ada6:	000b      	movs	r3, r1
 800ada8:	0020      	movs	r0, r4
 800adaa:	0029      	movs	r1, r5
 800adac:	f7f5 fb68 	bl	8000480 <__aeabi_dcmpgt>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d000      	beq.n	800adb6 <_dtoa_r+0x63e>
 800adb4:	e086      	b.n	800aec4 <_dtoa_r+0x74c>
 800adb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800adb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adba:	2000      	movs	r0, #0
 800adbc:	493f      	ldr	r1, [pc, #252]	; (800aebc <_dtoa_r+0x744>)
 800adbe:	f7f7 f87b 	bl	8001eb8 <__aeabi_dsub>
 800adc2:	0002      	movs	r2, r0
 800adc4:	000b      	movs	r3, r1
 800adc6:	0020      	movs	r0, r4
 800adc8:	0029      	movs	r1, r5
 800adca:	f7f5 fb45 	bl	8000458 <__aeabi_dcmplt>
 800adce:	2800      	cmp	r0, #0
 800add0:	d100      	bne.n	800add4 <_dtoa_r+0x65c>
 800add2:	e716      	b.n	800ac02 <_dtoa_r+0x48a>
 800add4:	9b08      	ldr	r3, [sp, #32]
 800add6:	001a      	movs	r2, r3
 800add8:	3a01      	subs	r2, #1
 800adda:	9208      	str	r2, [sp, #32]
 800addc:	7812      	ldrb	r2, [r2, #0]
 800adde:	2a30      	cmp	r2, #48	; 0x30
 800ade0:	d0f8      	beq.n	800add4 <_dtoa_r+0x65c>
 800ade2:	9308      	str	r3, [sp, #32]
 800ade4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ade6:	9303      	str	r3, [sp, #12]
 800ade8:	e046      	b.n	800ae78 <_dtoa_r+0x700>
 800adea:	2200      	movs	r2, #0
 800adec:	4b2e      	ldr	r3, [pc, #184]	; (800aea8 <_dtoa_r+0x730>)
 800adee:	f7f6 fda1 	bl	8001934 <__aeabi_dmul>
 800adf2:	0006      	movs	r6, r0
 800adf4:	000f      	movs	r7, r1
 800adf6:	e7b2      	b.n	800ad5e <_dtoa_r+0x5e6>
 800adf8:	9b06      	ldr	r3, [sp, #24]
 800adfa:	9a06      	ldr	r2, [sp, #24]
 800adfc:	930a      	str	r3, [sp, #40]	; 0x28
 800adfe:	9b07      	ldr	r3, [sp, #28]
 800ae00:	9c08      	ldr	r4, [sp, #32]
 800ae02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ae04:	3b01      	subs	r3, #1
 800ae06:	189b      	adds	r3, r3, r2
 800ae08:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae0a:	0032      	movs	r2, r6
 800ae0c:	003b      	movs	r3, r7
 800ae0e:	0020      	movs	r0, r4
 800ae10:	0029      	movs	r1, r5
 800ae12:	f7f6 f995 	bl	8001140 <__aeabi_ddiv>
 800ae16:	f7f7 fbef 	bl	80025f8 <__aeabi_d2iz>
 800ae1a:	9007      	str	r0, [sp, #28]
 800ae1c:	f7f7 fc22 	bl	8002664 <__aeabi_i2d>
 800ae20:	0032      	movs	r2, r6
 800ae22:	003b      	movs	r3, r7
 800ae24:	f7f6 fd86 	bl	8001934 <__aeabi_dmul>
 800ae28:	0002      	movs	r2, r0
 800ae2a:	000b      	movs	r3, r1
 800ae2c:	0020      	movs	r0, r4
 800ae2e:	0029      	movs	r1, r5
 800ae30:	f7f7 f842 	bl	8001eb8 <__aeabi_dsub>
 800ae34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae36:	001a      	movs	r2, r3
 800ae38:	3201      	adds	r2, #1
 800ae3a:	920a      	str	r2, [sp, #40]	; 0x28
 800ae3c:	9208      	str	r2, [sp, #32]
 800ae3e:	9a07      	ldr	r2, [sp, #28]
 800ae40:	3230      	adds	r2, #48	; 0x30
 800ae42:	701a      	strb	r2, [r3, #0]
 800ae44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d14f      	bne.n	800aeea <_dtoa_r+0x772>
 800ae4a:	0002      	movs	r2, r0
 800ae4c:	000b      	movs	r3, r1
 800ae4e:	f7f5 fe17 	bl	8000a80 <__aeabi_dadd>
 800ae52:	0032      	movs	r2, r6
 800ae54:	003b      	movs	r3, r7
 800ae56:	0004      	movs	r4, r0
 800ae58:	000d      	movs	r5, r1
 800ae5a:	f7f5 fb11 	bl	8000480 <__aeabi_dcmpgt>
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d12e      	bne.n	800aec0 <_dtoa_r+0x748>
 800ae62:	0032      	movs	r2, r6
 800ae64:	003b      	movs	r3, r7
 800ae66:	0020      	movs	r0, r4
 800ae68:	0029      	movs	r1, r5
 800ae6a:	f7f5 faef 	bl	800044c <__aeabi_dcmpeq>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d002      	beq.n	800ae78 <_dtoa_r+0x700>
 800ae72:	9b07      	ldr	r3, [sp, #28]
 800ae74:	07de      	lsls	r6, r3, #31
 800ae76:	d423      	bmi.n	800aec0 <_dtoa_r+0x748>
 800ae78:	9905      	ldr	r1, [sp, #20]
 800ae7a:	9804      	ldr	r0, [sp, #16]
 800ae7c:	f000 fbd6 	bl	800b62c <_Bfree>
 800ae80:	2300      	movs	r3, #0
 800ae82:	9a08      	ldr	r2, [sp, #32]
 800ae84:	7013      	strb	r3, [r2, #0]
 800ae86:	9b03      	ldr	r3, [sp, #12]
 800ae88:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	6013      	str	r3, [r2, #0]
 800ae8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d100      	bne.n	800ae96 <_dtoa_r+0x71e>
 800ae94:	e4ba      	b.n	800a80c <_dtoa_r+0x94>
 800ae96:	9a08      	ldr	r2, [sp, #32]
 800ae98:	601a      	str	r2, [r3, #0]
 800ae9a:	e4b7      	b.n	800a80c <_dtoa_r+0x94>
 800ae9c:	0800e630 	.word	0x0800e630
 800aea0:	0800e608 	.word	0x0800e608
 800aea4:	3ff00000 	.word	0x3ff00000
 800aea8:	40240000 	.word	0x40240000
 800aeac:	401c0000 	.word	0x401c0000
 800aeb0:	fcc00000 	.word	0xfcc00000
 800aeb4:	40140000 	.word	0x40140000
 800aeb8:	7cc00000 	.word	0x7cc00000
 800aebc:	3fe00000 	.word	0x3fe00000
 800aec0:	9b03      	ldr	r3, [sp, #12]
 800aec2:	930e      	str	r3, [sp, #56]	; 0x38
 800aec4:	9b08      	ldr	r3, [sp, #32]
 800aec6:	9308      	str	r3, [sp, #32]
 800aec8:	3b01      	subs	r3, #1
 800aeca:	781a      	ldrb	r2, [r3, #0]
 800aecc:	2a39      	cmp	r2, #57	; 0x39
 800aece:	d108      	bne.n	800aee2 <_dtoa_r+0x76a>
 800aed0:	9a06      	ldr	r2, [sp, #24]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d1f7      	bne.n	800aec6 <_dtoa_r+0x74e>
 800aed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aed8:	9906      	ldr	r1, [sp, #24]
 800aeda:	3201      	adds	r2, #1
 800aedc:	920e      	str	r2, [sp, #56]	; 0x38
 800aede:	2230      	movs	r2, #48	; 0x30
 800aee0:	700a      	strb	r2, [r1, #0]
 800aee2:	781a      	ldrb	r2, [r3, #0]
 800aee4:	3201      	adds	r2, #1
 800aee6:	701a      	strb	r2, [r3, #0]
 800aee8:	e77c      	b.n	800ade4 <_dtoa_r+0x66c>
 800aeea:	2200      	movs	r2, #0
 800aeec:	4ba9      	ldr	r3, [pc, #676]	; (800b194 <_dtoa_r+0xa1c>)
 800aeee:	f7f6 fd21 	bl	8001934 <__aeabi_dmul>
 800aef2:	2200      	movs	r2, #0
 800aef4:	2300      	movs	r3, #0
 800aef6:	0004      	movs	r4, r0
 800aef8:	000d      	movs	r5, r1
 800aefa:	f7f5 faa7 	bl	800044c <__aeabi_dcmpeq>
 800aefe:	2800      	cmp	r0, #0
 800af00:	d100      	bne.n	800af04 <_dtoa_r+0x78c>
 800af02:	e782      	b.n	800ae0a <_dtoa_r+0x692>
 800af04:	e7b8      	b.n	800ae78 <_dtoa_r+0x700>
 800af06:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800af08:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800af0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af0c:	2f00      	cmp	r7, #0
 800af0e:	d012      	beq.n	800af36 <_dtoa_r+0x7be>
 800af10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af12:	2a01      	cmp	r2, #1
 800af14:	dc6e      	bgt.n	800aff4 <_dtoa_r+0x87c>
 800af16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af18:	2a00      	cmp	r2, #0
 800af1a:	d065      	beq.n	800afe8 <_dtoa_r+0x870>
 800af1c:	4a9e      	ldr	r2, [pc, #632]	; (800b198 <_dtoa_r+0xa20>)
 800af1e:	189b      	adds	r3, r3, r2
 800af20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af22:	2101      	movs	r1, #1
 800af24:	18d2      	adds	r2, r2, r3
 800af26:	920a      	str	r2, [sp, #40]	; 0x28
 800af28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af2a:	9804      	ldr	r0, [sp, #16]
 800af2c:	18d3      	adds	r3, r2, r3
 800af2e:	930c      	str	r3, [sp, #48]	; 0x30
 800af30:	f000 fc78 	bl	800b824 <__i2b>
 800af34:	0007      	movs	r7, r0
 800af36:	2c00      	cmp	r4, #0
 800af38:	d00e      	beq.n	800af58 <_dtoa_r+0x7e0>
 800af3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	dd0b      	ble.n	800af58 <_dtoa_r+0x7e0>
 800af40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af42:	0023      	movs	r3, r4
 800af44:	4294      	cmp	r4, r2
 800af46:	dd00      	ble.n	800af4a <_dtoa_r+0x7d2>
 800af48:	0013      	movs	r3, r2
 800af4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af4c:	1ae4      	subs	r4, r4, r3
 800af4e:	1ad2      	subs	r2, r2, r3
 800af50:	920a      	str	r2, [sp, #40]	; 0x28
 800af52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	930c      	str	r3, [sp, #48]	; 0x30
 800af58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d01e      	beq.n	800af9c <_dtoa_r+0x824>
 800af5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af60:	2b00      	cmp	r3, #0
 800af62:	d05c      	beq.n	800b01e <_dtoa_r+0x8a6>
 800af64:	2d00      	cmp	r5, #0
 800af66:	dd10      	ble.n	800af8a <_dtoa_r+0x812>
 800af68:	0039      	movs	r1, r7
 800af6a:	002a      	movs	r2, r5
 800af6c:	9804      	ldr	r0, [sp, #16]
 800af6e:	f000 fd21 	bl	800b9b4 <__pow5mult>
 800af72:	9a05      	ldr	r2, [sp, #20]
 800af74:	0001      	movs	r1, r0
 800af76:	0007      	movs	r7, r0
 800af78:	9804      	ldr	r0, [sp, #16]
 800af7a:	f000 fc6b 	bl	800b854 <__multiply>
 800af7e:	0006      	movs	r6, r0
 800af80:	9905      	ldr	r1, [sp, #20]
 800af82:	9804      	ldr	r0, [sp, #16]
 800af84:	f000 fb52 	bl	800b62c <_Bfree>
 800af88:	9605      	str	r6, [sp, #20]
 800af8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af8c:	1b5a      	subs	r2, r3, r5
 800af8e:	42ab      	cmp	r3, r5
 800af90:	d004      	beq.n	800af9c <_dtoa_r+0x824>
 800af92:	9905      	ldr	r1, [sp, #20]
 800af94:	9804      	ldr	r0, [sp, #16]
 800af96:	f000 fd0d 	bl	800b9b4 <__pow5mult>
 800af9a:	9005      	str	r0, [sp, #20]
 800af9c:	2101      	movs	r1, #1
 800af9e:	9804      	ldr	r0, [sp, #16]
 800afa0:	f000 fc40 	bl	800b824 <__i2b>
 800afa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800afa6:	0006      	movs	r6, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	dd3a      	ble.n	800b022 <_dtoa_r+0x8aa>
 800afac:	001a      	movs	r2, r3
 800afae:	0001      	movs	r1, r0
 800afb0:	9804      	ldr	r0, [sp, #16]
 800afb2:	f000 fcff 	bl	800b9b4 <__pow5mult>
 800afb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afb8:	0006      	movs	r6, r0
 800afba:	2500      	movs	r5, #0
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	dc38      	bgt.n	800b032 <_dtoa_r+0x8ba>
 800afc0:	2500      	movs	r5, #0
 800afc2:	9b08      	ldr	r3, [sp, #32]
 800afc4:	42ab      	cmp	r3, r5
 800afc6:	d130      	bne.n	800b02a <_dtoa_r+0x8b2>
 800afc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afca:	031b      	lsls	r3, r3, #12
 800afcc:	42ab      	cmp	r3, r5
 800afce:	d12c      	bne.n	800b02a <_dtoa_r+0x8b2>
 800afd0:	4b72      	ldr	r3, [pc, #456]	; (800b19c <_dtoa_r+0xa24>)
 800afd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afd4:	4213      	tst	r3, r2
 800afd6:	d028      	beq.n	800b02a <_dtoa_r+0x8b2>
 800afd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afda:	3501      	adds	r5, #1
 800afdc:	3301      	adds	r3, #1
 800afde:	930a      	str	r3, [sp, #40]	; 0x28
 800afe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afe2:	3301      	adds	r3, #1
 800afe4:	930c      	str	r3, [sp, #48]	; 0x30
 800afe6:	e020      	b.n	800b02a <_dtoa_r+0x8b2>
 800afe8:	2336      	movs	r3, #54	; 0x36
 800afea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800afec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800afee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aff0:	1a9b      	subs	r3, r3, r2
 800aff2:	e795      	b.n	800af20 <_dtoa_r+0x7a8>
 800aff4:	9b07      	ldr	r3, [sp, #28]
 800aff6:	1e5d      	subs	r5, r3, #1
 800aff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800affa:	42ab      	cmp	r3, r5
 800affc:	db07      	blt.n	800b00e <_dtoa_r+0x896>
 800affe:	1b5d      	subs	r5, r3, r5
 800b000:	9b07      	ldr	r3, [sp, #28]
 800b002:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b004:	2b00      	cmp	r3, #0
 800b006:	da8b      	bge.n	800af20 <_dtoa_r+0x7a8>
 800b008:	1ae4      	subs	r4, r4, r3
 800b00a:	2300      	movs	r3, #0
 800b00c:	e788      	b.n	800af20 <_dtoa_r+0x7a8>
 800b00e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b010:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b012:	1aeb      	subs	r3, r5, r3
 800b014:	18d3      	adds	r3, r2, r3
 800b016:	950d      	str	r5, [sp, #52]	; 0x34
 800b018:	9313      	str	r3, [sp, #76]	; 0x4c
 800b01a:	2500      	movs	r5, #0
 800b01c:	e7f0      	b.n	800b000 <_dtoa_r+0x888>
 800b01e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b020:	e7b7      	b.n	800af92 <_dtoa_r+0x81a>
 800b022:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b024:	2500      	movs	r5, #0
 800b026:	2b01      	cmp	r3, #1
 800b028:	ddca      	ble.n	800afc0 <_dtoa_r+0x848>
 800b02a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b02c:	2001      	movs	r0, #1
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d008      	beq.n	800b044 <_dtoa_r+0x8cc>
 800b032:	6933      	ldr	r3, [r6, #16]
 800b034:	3303      	adds	r3, #3
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	18f3      	adds	r3, r6, r3
 800b03a:	6858      	ldr	r0, [r3, #4]
 800b03c:	f000 fbaa 	bl	800b794 <__hi0bits>
 800b040:	2320      	movs	r3, #32
 800b042:	1a18      	subs	r0, r3, r0
 800b044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b046:	1818      	adds	r0, r3, r0
 800b048:	0002      	movs	r2, r0
 800b04a:	231f      	movs	r3, #31
 800b04c:	401a      	ands	r2, r3
 800b04e:	4218      	tst	r0, r3
 800b050:	d047      	beq.n	800b0e2 <_dtoa_r+0x96a>
 800b052:	3301      	adds	r3, #1
 800b054:	1a9b      	subs	r3, r3, r2
 800b056:	2b04      	cmp	r3, #4
 800b058:	dd3f      	ble.n	800b0da <_dtoa_r+0x962>
 800b05a:	231c      	movs	r3, #28
 800b05c:	1a9b      	subs	r3, r3, r2
 800b05e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b060:	18e4      	adds	r4, r4, r3
 800b062:	18d2      	adds	r2, r2, r3
 800b064:	920a      	str	r2, [sp, #40]	; 0x28
 800b066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b068:	18d3      	adds	r3, r2, r3
 800b06a:	930c      	str	r3, [sp, #48]	; 0x30
 800b06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b06e:	2b00      	cmp	r3, #0
 800b070:	dd05      	ble.n	800b07e <_dtoa_r+0x906>
 800b072:	001a      	movs	r2, r3
 800b074:	9905      	ldr	r1, [sp, #20]
 800b076:	9804      	ldr	r0, [sp, #16]
 800b078:	f000 fcf8 	bl	800ba6c <__lshift>
 800b07c:	9005      	str	r0, [sp, #20]
 800b07e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b080:	2b00      	cmp	r3, #0
 800b082:	dd05      	ble.n	800b090 <_dtoa_r+0x918>
 800b084:	0031      	movs	r1, r6
 800b086:	001a      	movs	r2, r3
 800b088:	9804      	ldr	r0, [sp, #16]
 800b08a:	f000 fcef 	bl	800ba6c <__lshift>
 800b08e:	0006      	movs	r6, r0
 800b090:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b092:	2b00      	cmp	r3, #0
 800b094:	d027      	beq.n	800b0e6 <_dtoa_r+0x96e>
 800b096:	0031      	movs	r1, r6
 800b098:	9805      	ldr	r0, [sp, #20]
 800b09a:	f000 fd55 	bl	800bb48 <__mcmp>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	da21      	bge.n	800b0e6 <_dtoa_r+0x96e>
 800b0a2:	9b03      	ldr	r3, [sp, #12]
 800b0a4:	220a      	movs	r2, #10
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	9303      	str	r3, [sp, #12]
 800b0aa:	9905      	ldr	r1, [sp, #20]
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	9804      	ldr	r0, [sp, #16]
 800b0b0:	f000 fae0 	bl	800b674 <__multadd>
 800b0b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0b6:	9005      	str	r0, [sp, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d100      	bne.n	800b0be <_dtoa_r+0x946>
 800b0bc:	e15d      	b.n	800b37a <_dtoa_r+0xc02>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	0039      	movs	r1, r7
 800b0c2:	220a      	movs	r2, #10
 800b0c4:	9804      	ldr	r0, [sp, #16]
 800b0c6:	f000 fad5 	bl	800b674 <__multadd>
 800b0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0cc:	0007      	movs	r7, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	dc49      	bgt.n	800b166 <_dtoa_r+0x9ee>
 800b0d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	dc0e      	bgt.n	800b0f6 <_dtoa_r+0x97e>
 800b0d8:	e045      	b.n	800b166 <_dtoa_r+0x9ee>
 800b0da:	2b04      	cmp	r3, #4
 800b0dc:	d0c6      	beq.n	800b06c <_dtoa_r+0x8f4>
 800b0de:	331c      	adds	r3, #28
 800b0e0:	e7bd      	b.n	800b05e <_dtoa_r+0x8e6>
 800b0e2:	0013      	movs	r3, r2
 800b0e4:	e7fb      	b.n	800b0de <_dtoa_r+0x966>
 800b0e6:	9b07      	ldr	r3, [sp, #28]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	dc36      	bgt.n	800b15a <_dtoa_r+0x9e2>
 800b0ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	dd33      	ble.n	800b15a <_dtoa_r+0x9e2>
 800b0f2:	9b07      	ldr	r3, [sp, #28]
 800b0f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10c      	bne.n	800b116 <_dtoa_r+0x99e>
 800b0fc:	0031      	movs	r1, r6
 800b0fe:	2205      	movs	r2, #5
 800b100:	9804      	ldr	r0, [sp, #16]
 800b102:	f000 fab7 	bl	800b674 <__multadd>
 800b106:	0006      	movs	r6, r0
 800b108:	0001      	movs	r1, r0
 800b10a:	9805      	ldr	r0, [sp, #20]
 800b10c:	f000 fd1c 	bl	800bb48 <__mcmp>
 800b110:	2800      	cmp	r0, #0
 800b112:	dd00      	ble.n	800b116 <_dtoa_r+0x99e>
 800b114:	e59f      	b.n	800ac56 <_dtoa_r+0x4de>
 800b116:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b118:	43db      	mvns	r3, r3
 800b11a:	9303      	str	r3, [sp, #12]
 800b11c:	9b06      	ldr	r3, [sp, #24]
 800b11e:	9308      	str	r3, [sp, #32]
 800b120:	2500      	movs	r5, #0
 800b122:	0031      	movs	r1, r6
 800b124:	9804      	ldr	r0, [sp, #16]
 800b126:	f000 fa81 	bl	800b62c <_Bfree>
 800b12a:	2f00      	cmp	r7, #0
 800b12c:	d100      	bne.n	800b130 <_dtoa_r+0x9b8>
 800b12e:	e6a3      	b.n	800ae78 <_dtoa_r+0x700>
 800b130:	2d00      	cmp	r5, #0
 800b132:	d005      	beq.n	800b140 <_dtoa_r+0x9c8>
 800b134:	42bd      	cmp	r5, r7
 800b136:	d003      	beq.n	800b140 <_dtoa_r+0x9c8>
 800b138:	0029      	movs	r1, r5
 800b13a:	9804      	ldr	r0, [sp, #16]
 800b13c:	f000 fa76 	bl	800b62c <_Bfree>
 800b140:	0039      	movs	r1, r7
 800b142:	9804      	ldr	r0, [sp, #16]
 800b144:	f000 fa72 	bl	800b62c <_Bfree>
 800b148:	e696      	b.n	800ae78 <_dtoa_r+0x700>
 800b14a:	2600      	movs	r6, #0
 800b14c:	0037      	movs	r7, r6
 800b14e:	e7e2      	b.n	800b116 <_dtoa_r+0x99e>
 800b150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b152:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b154:	9303      	str	r3, [sp, #12]
 800b156:	0037      	movs	r7, r6
 800b158:	e57d      	b.n	800ac56 <_dtoa_r+0x4de>
 800b15a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d100      	bne.n	800b162 <_dtoa_r+0x9ea>
 800b160:	e0c3      	b.n	800b2ea <_dtoa_r+0xb72>
 800b162:	9b07      	ldr	r3, [sp, #28]
 800b164:	930b      	str	r3, [sp, #44]	; 0x2c
 800b166:	2c00      	cmp	r4, #0
 800b168:	dd05      	ble.n	800b176 <_dtoa_r+0x9fe>
 800b16a:	0039      	movs	r1, r7
 800b16c:	0022      	movs	r2, r4
 800b16e:	9804      	ldr	r0, [sp, #16]
 800b170:	f000 fc7c 	bl	800ba6c <__lshift>
 800b174:	0007      	movs	r7, r0
 800b176:	0038      	movs	r0, r7
 800b178:	2d00      	cmp	r5, #0
 800b17a:	d024      	beq.n	800b1c6 <_dtoa_r+0xa4e>
 800b17c:	6879      	ldr	r1, [r7, #4]
 800b17e:	9804      	ldr	r0, [sp, #16]
 800b180:	f000 fa10 	bl	800b5a4 <_Balloc>
 800b184:	1e04      	subs	r4, r0, #0
 800b186:	d111      	bne.n	800b1ac <_dtoa_r+0xa34>
 800b188:	0022      	movs	r2, r4
 800b18a:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <_dtoa_r+0xa28>)
 800b18c:	4805      	ldr	r0, [pc, #20]	; (800b1a4 <_dtoa_r+0xa2c>)
 800b18e:	4906      	ldr	r1, [pc, #24]	; (800b1a8 <_dtoa_r+0xa30>)
 800b190:	f7ff fb07 	bl	800a7a2 <_dtoa_r+0x2a>
 800b194:	40240000 	.word	0x40240000
 800b198:	00000433 	.word	0x00000433
 800b19c:	7ff00000 	.word	0x7ff00000
 800b1a0:	0800e59d 	.word	0x0800e59d
 800b1a4:	0800e545 	.word	0x0800e545
 800b1a8:	000002ef 	.word	0x000002ef
 800b1ac:	0039      	movs	r1, r7
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	310c      	adds	r1, #12
 800b1b2:	3202      	adds	r2, #2
 800b1b4:	0092      	lsls	r2, r2, #2
 800b1b6:	300c      	adds	r0, #12
 800b1b8:	f001 ffb2 	bl	800d120 <memcpy>
 800b1bc:	2201      	movs	r2, #1
 800b1be:	0021      	movs	r1, r4
 800b1c0:	9804      	ldr	r0, [sp, #16]
 800b1c2:	f000 fc53 	bl	800ba6c <__lshift>
 800b1c6:	9b06      	ldr	r3, [sp, #24]
 800b1c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1ca:	9307      	str	r3, [sp, #28]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	189b      	adds	r3, r3, r2
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	003d      	movs	r5, r7
 800b1d4:	0007      	movs	r7, r0
 800b1d6:	930e      	str	r3, [sp, #56]	; 0x38
 800b1d8:	9b08      	ldr	r3, [sp, #32]
 800b1da:	4013      	ands	r3, r2
 800b1dc:	930d      	str	r3, [sp, #52]	; 0x34
 800b1de:	0031      	movs	r1, r6
 800b1e0:	9805      	ldr	r0, [sp, #20]
 800b1e2:	f7ff fa39 	bl	800a658 <quorem>
 800b1e6:	0029      	movs	r1, r5
 800b1e8:	0004      	movs	r4, r0
 800b1ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1ec:	9805      	ldr	r0, [sp, #20]
 800b1ee:	f000 fcab 	bl	800bb48 <__mcmp>
 800b1f2:	003a      	movs	r2, r7
 800b1f4:	900c      	str	r0, [sp, #48]	; 0x30
 800b1f6:	0031      	movs	r1, r6
 800b1f8:	9804      	ldr	r0, [sp, #16]
 800b1fa:	f000 fcc1 	bl	800bb80 <__mdiff>
 800b1fe:	2201      	movs	r2, #1
 800b200:	68c3      	ldr	r3, [r0, #12]
 800b202:	3430      	adds	r4, #48	; 0x30
 800b204:	9008      	str	r0, [sp, #32]
 800b206:	920a      	str	r2, [sp, #40]	; 0x28
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d104      	bne.n	800b216 <_dtoa_r+0xa9e>
 800b20c:	0001      	movs	r1, r0
 800b20e:	9805      	ldr	r0, [sp, #20]
 800b210:	f000 fc9a 	bl	800bb48 <__mcmp>
 800b214:	900a      	str	r0, [sp, #40]	; 0x28
 800b216:	9908      	ldr	r1, [sp, #32]
 800b218:	9804      	ldr	r0, [sp, #16]
 800b21a:	f000 fa07 	bl	800b62c <_Bfree>
 800b21e:	9b07      	ldr	r3, [sp, #28]
 800b220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b222:	3301      	adds	r3, #1
 800b224:	9308      	str	r3, [sp, #32]
 800b226:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b228:	4313      	orrs	r3, r2
 800b22a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b22c:	4313      	orrs	r3, r2
 800b22e:	d109      	bne.n	800b244 <_dtoa_r+0xacc>
 800b230:	2c39      	cmp	r4, #57	; 0x39
 800b232:	d022      	beq.n	800b27a <_dtoa_r+0xb02>
 800b234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b236:	2b00      	cmp	r3, #0
 800b238:	dd01      	ble.n	800b23e <_dtoa_r+0xac6>
 800b23a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b23c:	3431      	adds	r4, #49	; 0x31
 800b23e:	9b07      	ldr	r3, [sp, #28]
 800b240:	701c      	strb	r4, [r3, #0]
 800b242:	e76e      	b.n	800b122 <_dtoa_r+0x9aa>
 800b244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b246:	2b00      	cmp	r3, #0
 800b248:	db04      	blt.n	800b254 <_dtoa_r+0xadc>
 800b24a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b24c:	4313      	orrs	r3, r2
 800b24e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b250:	4313      	orrs	r3, r2
 800b252:	d11e      	bne.n	800b292 <_dtoa_r+0xb1a>
 800b254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b256:	2b00      	cmp	r3, #0
 800b258:	ddf1      	ble.n	800b23e <_dtoa_r+0xac6>
 800b25a:	9905      	ldr	r1, [sp, #20]
 800b25c:	2201      	movs	r2, #1
 800b25e:	9804      	ldr	r0, [sp, #16]
 800b260:	f000 fc04 	bl	800ba6c <__lshift>
 800b264:	0031      	movs	r1, r6
 800b266:	9005      	str	r0, [sp, #20]
 800b268:	f000 fc6e 	bl	800bb48 <__mcmp>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	dc02      	bgt.n	800b276 <_dtoa_r+0xafe>
 800b270:	d1e5      	bne.n	800b23e <_dtoa_r+0xac6>
 800b272:	07e3      	lsls	r3, r4, #31
 800b274:	d5e3      	bpl.n	800b23e <_dtoa_r+0xac6>
 800b276:	2c39      	cmp	r4, #57	; 0x39
 800b278:	d1df      	bne.n	800b23a <_dtoa_r+0xac2>
 800b27a:	2339      	movs	r3, #57	; 0x39
 800b27c:	9a07      	ldr	r2, [sp, #28]
 800b27e:	7013      	strb	r3, [r2, #0]
 800b280:	9b08      	ldr	r3, [sp, #32]
 800b282:	9308      	str	r3, [sp, #32]
 800b284:	3b01      	subs	r3, #1
 800b286:	781a      	ldrb	r2, [r3, #0]
 800b288:	2a39      	cmp	r2, #57	; 0x39
 800b28a:	d063      	beq.n	800b354 <_dtoa_r+0xbdc>
 800b28c:	3201      	adds	r2, #1
 800b28e:	701a      	strb	r2, [r3, #0]
 800b290:	e747      	b.n	800b122 <_dtoa_r+0x9aa>
 800b292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b294:	2b00      	cmp	r3, #0
 800b296:	dd03      	ble.n	800b2a0 <_dtoa_r+0xb28>
 800b298:	2c39      	cmp	r4, #57	; 0x39
 800b29a:	d0ee      	beq.n	800b27a <_dtoa_r+0xb02>
 800b29c:	3401      	adds	r4, #1
 800b29e:	e7ce      	b.n	800b23e <_dtoa_r+0xac6>
 800b2a0:	9b07      	ldr	r3, [sp, #28]
 800b2a2:	9a07      	ldr	r2, [sp, #28]
 800b2a4:	701c      	strb	r4, [r3, #0]
 800b2a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d03e      	beq.n	800b32a <_dtoa_r+0xbb2>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	220a      	movs	r2, #10
 800b2b0:	9905      	ldr	r1, [sp, #20]
 800b2b2:	9804      	ldr	r0, [sp, #16]
 800b2b4:	f000 f9de 	bl	800b674 <__multadd>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	9005      	str	r0, [sp, #20]
 800b2bc:	220a      	movs	r2, #10
 800b2be:	0029      	movs	r1, r5
 800b2c0:	9804      	ldr	r0, [sp, #16]
 800b2c2:	42bd      	cmp	r5, r7
 800b2c4:	d106      	bne.n	800b2d4 <_dtoa_r+0xb5c>
 800b2c6:	f000 f9d5 	bl	800b674 <__multadd>
 800b2ca:	0005      	movs	r5, r0
 800b2cc:	0007      	movs	r7, r0
 800b2ce:	9b08      	ldr	r3, [sp, #32]
 800b2d0:	9307      	str	r3, [sp, #28]
 800b2d2:	e784      	b.n	800b1de <_dtoa_r+0xa66>
 800b2d4:	f000 f9ce 	bl	800b674 <__multadd>
 800b2d8:	0039      	movs	r1, r7
 800b2da:	0005      	movs	r5, r0
 800b2dc:	2300      	movs	r3, #0
 800b2de:	220a      	movs	r2, #10
 800b2e0:	9804      	ldr	r0, [sp, #16]
 800b2e2:	f000 f9c7 	bl	800b674 <__multadd>
 800b2e6:	0007      	movs	r7, r0
 800b2e8:	e7f1      	b.n	800b2ce <_dtoa_r+0xb56>
 800b2ea:	9b07      	ldr	r3, [sp, #28]
 800b2ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2ee:	2500      	movs	r5, #0
 800b2f0:	0031      	movs	r1, r6
 800b2f2:	9805      	ldr	r0, [sp, #20]
 800b2f4:	f7ff f9b0 	bl	800a658 <quorem>
 800b2f8:	9b06      	ldr	r3, [sp, #24]
 800b2fa:	3030      	adds	r0, #48	; 0x30
 800b2fc:	5558      	strb	r0, [r3, r5]
 800b2fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b300:	3501      	adds	r5, #1
 800b302:	0004      	movs	r4, r0
 800b304:	42ab      	cmp	r3, r5
 800b306:	dd07      	ble.n	800b318 <_dtoa_r+0xba0>
 800b308:	2300      	movs	r3, #0
 800b30a:	220a      	movs	r2, #10
 800b30c:	9905      	ldr	r1, [sp, #20]
 800b30e:	9804      	ldr	r0, [sp, #16]
 800b310:	f000 f9b0 	bl	800b674 <__multadd>
 800b314:	9005      	str	r0, [sp, #20]
 800b316:	e7eb      	b.n	800b2f0 <_dtoa_r+0xb78>
 800b318:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b31a:	2301      	movs	r3, #1
 800b31c:	2a00      	cmp	r2, #0
 800b31e:	dd00      	ble.n	800b322 <_dtoa_r+0xbaa>
 800b320:	0013      	movs	r3, r2
 800b322:	2500      	movs	r5, #0
 800b324:	9a06      	ldr	r2, [sp, #24]
 800b326:	18d3      	adds	r3, r2, r3
 800b328:	9308      	str	r3, [sp, #32]
 800b32a:	9905      	ldr	r1, [sp, #20]
 800b32c:	2201      	movs	r2, #1
 800b32e:	9804      	ldr	r0, [sp, #16]
 800b330:	f000 fb9c 	bl	800ba6c <__lshift>
 800b334:	0031      	movs	r1, r6
 800b336:	9005      	str	r0, [sp, #20]
 800b338:	f000 fc06 	bl	800bb48 <__mcmp>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	dc9f      	bgt.n	800b280 <_dtoa_r+0xb08>
 800b340:	d101      	bne.n	800b346 <_dtoa_r+0xbce>
 800b342:	07e4      	lsls	r4, r4, #31
 800b344:	d49c      	bmi.n	800b280 <_dtoa_r+0xb08>
 800b346:	9b08      	ldr	r3, [sp, #32]
 800b348:	9308      	str	r3, [sp, #32]
 800b34a:	3b01      	subs	r3, #1
 800b34c:	781a      	ldrb	r2, [r3, #0]
 800b34e:	2a30      	cmp	r2, #48	; 0x30
 800b350:	d0fa      	beq.n	800b348 <_dtoa_r+0xbd0>
 800b352:	e6e6      	b.n	800b122 <_dtoa_r+0x9aa>
 800b354:	9a06      	ldr	r2, [sp, #24]
 800b356:	429a      	cmp	r2, r3
 800b358:	d193      	bne.n	800b282 <_dtoa_r+0xb0a>
 800b35a:	9b03      	ldr	r3, [sp, #12]
 800b35c:	3301      	adds	r3, #1
 800b35e:	9303      	str	r3, [sp, #12]
 800b360:	2331      	movs	r3, #49	; 0x31
 800b362:	7013      	strb	r3, [r2, #0]
 800b364:	e6dd      	b.n	800b122 <_dtoa_r+0x9aa>
 800b366:	4b09      	ldr	r3, [pc, #36]	; (800b38c <_dtoa_r+0xc14>)
 800b368:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b36a:	9306      	str	r3, [sp, #24]
 800b36c:	4b08      	ldr	r3, [pc, #32]	; (800b390 <_dtoa_r+0xc18>)
 800b36e:	2a00      	cmp	r2, #0
 800b370:	d001      	beq.n	800b376 <_dtoa_r+0xbfe>
 800b372:	f7ff fa49 	bl	800a808 <_dtoa_r+0x90>
 800b376:	f7ff fa49 	bl	800a80c <_dtoa_r+0x94>
 800b37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	dcb6      	bgt.n	800b2ee <_dtoa_r+0xb76>
 800b380:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b382:	2b02      	cmp	r3, #2
 800b384:	dd00      	ble.n	800b388 <_dtoa_r+0xc10>
 800b386:	e6b6      	b.n	800b0f6 <_dtoa_r+0x97e>
 800b388:	e7b1      	b.n	800b2ee <_dtoa_r+0xb76>
 800b38a:	46c0      	nop			; (mov r8, r8)
 800b38c:	0800e521 	.word	0x0800e521
 800b390:	0800e529 	.word	0x0800e529

0800b394 <_free_r>:
 800b394:	b570      	push	{r4, r5, r6, lr}
 800b396:	0005      	movs	r5, r0
 800b398:	2900      	cmp	r1, #0
 800b39a:	d010      	beq.n	800b3be <_free_r+0x2a>
 800b39c:	1f0c      	subs	r4, r1, #4
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	da00      	bge.n	800b3a6 <_free_r+0x12>
 800b3a4:	18e4      	adds	r4, r4, r3
 800b3a6:	0028      	movs	r0, r5
 800b3a8:	f000 f8ec 	bl	800b584 <__malloc_lock>
 800b3ac:	4a1d      	ldr	r2, [pc, #116]	; (800b424 <_free_r+0x90>)
 800b3ae:	6813      	ldr	r3, [r2, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d105      	bne.n	800b3c0 <_free_r+0x2c>
 800b3b4:	6063      	str	r3, [r4, #4]
 800b3b6:	6014      	str	r4, [r2, #0]
 800b3b8:	0028      	movs	r0, r5
 800b3ba:	f000 f8eb 	bl	800b594 <__malloc_unlock>
 800b3be:	bd70      	pop	{r4, r5, r6, pc}
 800b3c0:	42a3      	cmp	r3, r4
 800b3c2:	d908      	bls.n	800b3d6 <_free_r+0x42>
 800b3c4:	6820      	ldr	r0, [r4, #0]
 800b3c6:	1821      	adds	r1, r4, r0
 800b3c8:	428b      	cmp	r3, r1
 800b3ca:	d1f3      	bne.n	800b3b4 <_free_r+0x20>
 800b3cc:	6819      	ldr	r1, [r3, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	1809      	adds	r1, r1, r0
 800b3d2:	6021      	str	r1, [r4, #0]
 800b3d4:	e7ee      	b.n	800b3b4 <_free_r+0x20>
 800b3d6:	001a      	movs	r2, r3
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <_free_r+0x4e>
 800b3de:	42a3      	cmp	r3, r4
 800b3e0:	d9f9      	bls.n	800b3d6 <_free_r+0x42>
 800b3e2:	6811      	ldr	r1, [r2, #0]
 800b3e4:	1850      	adds	r0, r2, r1
 800b3e6:	42a0      	cmp	r0, r4
 800b3e8:	d10b      	bne.n	800b402 <_free_r+0x6e>
 800b3ea:	6820      	ldr	r0, [r4, #0]
 800b3ec:	1809      	adds	r1, r1, r0
 800b3ee:	1850      	adds	r0, r2, r1
 800b3f0:	6011      	str	r1, [r2, #0]
 800b3f2:	4283      	cmp	r3, r0
 800b3f4:	d1e0      	bne.n	800b3b8 <_free_r+0x24>
 800b3f6:	6818      	ldr	r0, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	1841      	adds	r1, r0, r1
 800b3fc:	6011      	str	r1, [r2, #0]
 800b3fe:	6053      	str	r3, [r2, #4]
 800b400:	e7da      	b.n	800b3b8 <_free_r+0x24>
 800b402:	42a0      	cmp	r0, r4
 800b404:	d902      	bls.n	800b40c <_free_r+0x78>
 800b406:	230c      	movs	r3, #12
 800b408:	602b      	str	r3, [r5, #0]
 800b40a:	e7d5      	b.n	800b3b8 <_free_r+0x24>
 800b40c:	6820      	ldr	r0, [r4, #0]
 800b40e:	1821      	adds	r1, r4, r0
 800b410:	428b      	cmp	r3, r1
 800b412:	d103      	bne.n	800b41c <_free_r+0x88>
 800b414:	6819      	ldr	r1, [r3, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	1809      	adds	r1, r1, r0
 800b41a:	6021      	str	r1, [r4, #0]
 800b41c:	6063      	str	r3, [r4, #4]
 800b41e:	6054      	str	r4, [r2, #4]
 800b420:	e7ca      	b.n	800b3b8 <_free_r+0x24>
 800b422:	46c0      	nop			; (mov r8, r8)
 800b424:	2000066c 	.word	0x2000066c

0800b428 <malloc>:
 800b428:	b510      	push	{r4, lr}
 800b42a:	4b03      	ldr	r3, [pc, #12]	; (800b438 <malloc+0x10>)
 800b42c:	0001      	movs	r1, r0
 800b42e:	6818      	ldr	r0, [r3, #0]
 800b430:	f000 f826 	bl	800b480 <_malloc_r>
 800b434:	bd10      	pop	{r4, pc}
 800b436:	46c0      	nop			; (mov r8, r8)
 800b438:	2000007c 	.word	0x2000007c

0800b43c <sbrk_aligned>:
 800b43c:	b570      	push	{r4, r5, r6, lr}
 800b43e:	4e0f      	ldr	r6, [pc, #60]	; (800b47c <sbrk_aligned+0x40>)
 800b440:	000d      	movs	r5, r1
 800b442:	6831      	ldr	r1, [r6, #0]
 800b444:	0004      	movs	r4, r0
 800b446:	2900      	cmp	r1, #0
 800b448:	d102      	bne.n	800b450 <sbrk_aligned+0x14>
 800b44a:	f001 fe57 	bl	800d0fc <_sbrk_r>
 800b44e:	6030      	str	r0, [r6, #0]
 800b450:	0029      	movs	r1, r5
 800b452:	0020      	movs	r0, r4
 800b454:	f001 fe52 	bl	800d0fc <_sbrk_r>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d00a      	beq.n	800b472 <sbrk_aligned+0x36>
 800b45c:	2303      	movs	r3, #3
 800b45e:	1cc5      	adds	r5, r0, #3
 800b460:	439d      	bics	r5, r3
 800b462:	42a8      	cmp	r0, r5
 800b464:	d007      	beq.n	800b476 <sbrk_aligned+0x3a>
 800b466:	1a29      	subs	r1, r5, r0
 800b468:	0020      	movs	r0, r4
 800b46a:	f001 fe47 	bl	800d0fc <_sbrk_r>
 800b46e:	3001      	adds	r0, #1
 800b470:	d101      	bne.n	800b476 <sbrk_aligned+0x3a>
 800b472:	2501      	movs	r5, #1
 800b474:	426d      	negs	r5, r5
 800b476:	0028      	movs	r0, r5
 800b478:	bd70      	pop	{r4, r5, r6, pc}
 800b47a:	46c0      	nop			; (mov r8, r8)
 800b47c:	20000670 	.word	0x20000670

0800b480 <_malloc_r>:
 800b480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b482:	2203      	movs	r2, #3
 800b484:	1ccb      	adds	r3, r1, #3
 800b486:	4393      	bics	r3, r2
 800b488:	3308      	adds	r3, #8
 800b48a:	0006      	movs	r6, r0
 800b48c:	001f      	movs	r7, r3
 800b48e:	2b0c      	cmp	r3, #12
 800b490:	d238      	bcs.n	800b504 <_malloc_r+0x84>
 800b492:	270c      	movs	r7, #12
 800b494:	42b9      	cmp	r1, r7
 800b496:	d837      	bhi.n	800b508 <_malloc_r+0x88>
 800b498:	0030      	movs	r0, r6
 800b49a:	f000 f873 	bl	800b584 <__malloc_lock>
 800b49e:	4b38      	ldr	r3, [pc, #224]	; (800b580 <_malloc_r+0x100>)
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	001c      	movs	r4, r3
 800b4a6:	2c00      	cmp	r4, #0
 800b4a8:	d133      	bne.n	800b512 <_malloc_r+0x92>
 800b4aa:	0039      	movs	r1, r7
 800b4ac:	0030      	movs	r0, r6
 800b4ae:	f7ff ffc5 	bl	800b43c <sbrk_aligned>
 800b4b2:	0004      	movs	r4, r0
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	d15e      	bne.n	800b576 <_malloc_r+0xf6>
 800b4b8:	9b00      	ldr	r3, [sp, #0]
 800b4ba:	681c      	ldr	r4, [r3, #0]
 800b4bc:	0025      	movs	r5, r4
 800b4be:	2d00      	cmp	r5, #0
 800b4c0:	d14e      	bne.n	800b560 <_malloc_r+0xe0>
 800b4c2:	2c00      	cmp	r4, #0
 800b4c4:	d051      	beq.n	800b56a <_malloc_r+0xea>
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	0029      	movs	r1, r5
 800b4ca:	18e3      	adds	r3, r4, r3
 800b4cc:	0030      	movs	r0, r6
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	f001 fe14 	bl	800d0fc <_sbrk_r>
 800b4d4:	9b01      	ldr	r3, [sp, #4]
 800b4d6:	4283      	cmp	r3, r0
 800b4d8:	d147      	bne.n	800b56a <_malloc_r+0xea>
 800b4da:	6823      	ldr	r3, [r4, #0]
 800b4dc:	0030      	movs	r0, r6
 800b4de:	1aff      	subs	r7, r7, r3
 800b4e0:	0039      	movs	r1, r7
 800b4e2:	f7ff ffab 	bl	800b43c <sbrk_aligned>
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	d03f      	beq.n	800b56a <_malloc_r+0xea>
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	19db      	adds	r3, r3, r7
 800b4ee:	6023      	str	r3, [r4, #0]
 800b4f0:	9b00      	ldr	r3, [sp, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d040      	beq.n	800b57a <_malloc_r+0xfa>
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	42a2      	cmp	r2, r4
 800b4fc:	d133      	bne.n	800b566 <_malloc_r+0xe6>
 800b4fe:	2200      	movs	r2, #0
 800b500:	605a      	str	r2, [r3, #4]
 800b502:	e014      	b.n	800b52e <_malloc_r+0xae>
 800b504:	2b00      	cmp	r3, #0
 800b506:	dac5      	bge.n	800b494 <_malloc_r+0x14>
 800b508:	230c      	movs	r3, #12
 800b50a:	2500      	movs	r5, #0
 800b50c:	6033      	str	r3, [r6, #0]
 800b50e:	0028      	movs	r0, r5
 800b510:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b512:	6821      	ldr	r1, [r4, #0]
 800b514:	1bc9      	subs	r1, r1, r7
 800b516:	d420      	bmi.n	800b55a <_malloc_r+0xda>
 800b518:	290b      	cmp	r1, #11
 800b51a:	d918      	bls.n	800b54e <_malloc_r+0xce>
 800b51c:	19e2      	adds	r2, r4, r7
 800b51e:	6027      	str	r7, [r4, #0]
 800b520:	42a3      	cmp	r3, r4
 800b522:	d112      	bne.n	800b54a <_malloc_r+0xca>
 800b524:	9b00      	ldr	r3, [sp, #0]
 800b526:	601a      	str	r2, [r3, #0]
 800b528:	6863      	ldr	r3, [r4, #4]
 800b52a:	6011      	str	r1, [r2, #0]
 800b52c:	6053      	str	r3, [r2, #4]
 800b52e:	0030      	movs	r0, r6
 800b530:	0025      	movs	r5, r4
 800b532:	f000 f82f 	bl	800b594 <__malloc_unlock>
 800b536:	2207      	movs	r2, #7
 800b538:	350b      	adds	r5, #11
 800b53a:	1d23      	adds	r3, r4, #4
 800b53c:	4395      	bics	r5, r2
 800b53e:	1aea      	subs	r2, r5, r3
 800b540:	429d      	cmp	r5, r3
 800b542:	d0e4      	beq.n	800b50e <_malloc_r+0x8e>
 800b544:	1b5b      	subs	r3, r3, r5
 800b546:	50a3      	str	r3, [r4, r2]
 800b548:	e7e1      	b.n	800b50e <_malloc_r+0x8e>
 800b54a:	605a      	str	r2, [r3, #4]
 800b54c:	e7ec      	b.n	800b528 <_malloc_r+0xa8>
 800b54e:	6862      	ldr	r2, [r4, #4]
 800b550:	42a3      	cmp	r3, r4
 800b552:	d1d5      	bne.n	800b500 <_malloc_r+0x80>
 800b554:	9b00      	ldr	r3, [sp, #0]
 800b556:	601a      	str	r2, [r3, #0]
 800b558:	e7e9      	b.n	800b52e <_malloc_r+0xae>
 800b55a:	0023      	movs	r3, r4
 800b55c:	6864      	ldr	r4, [r4, #4]
 800b55e:	e7a2      	b.n	800b4a6 <_malloc_r+0x26>
 800b560:	002c      	movs	r4, r5
 800b562:	686d      	ldr	r5, [r5, #4]
 800b564:	e7ab      	b.n	800b4be <_malloc_r+0x3e>
 800b566:	0013      	movs	r3, r2
 800b568:	e7c4      	b.n	800b4f4 <_malloc_r+0x74>
 800b56a:	230c      	movs	r3, #12
 800b56c:	0030      	movs	r0, r6
 800b56e:	6033      	str	r3, [r6, #0]
 800b570:	f000 f810 	bl	800b594 <__malloc_unlock>
 800b574:	e7cb      	b.n	800b50e <_malloc_r+0x8e>
 800b576:	6027      	str	r7, [r4, #0]
 800b578:	e7d9      	b.n	800b52e <_malloc_r+0xae>
 800b57a:	605b      	str	r3, [r3, #4]
 800b57c:	deff      	udf	#255	; 0xff
 800b57e:	46c0      	nop			; (mov r8, r8)
 800b580:	2000066c 	.word	0x2000066c

0800b584 <__malloc_lock>:
 800b584:	b510      	push	{r4, lr}
 800b586:	4802      	ldr	r0, [pc, #8]	; (800b590 <__malloc_lock+0xc>)
 800b588:	f7ff f855 	bl	800a636 <__retarget_lock_acquire_recursive>
 800b58c:	bd10      	pop	{r4, pc}
 800b58e:	46c0      	nop			; (mov r8, r8)
 800b590:	20000668 	.word	0x20000668

0800b594 <__malloc_unlock>:
 800b594:	b510      	push	{r4, lr}
 800b596:	4802      	ldr	r0, [pc, #8]	; (800b5a0 <__malloc_unlock+0xc>)
 800b598:	f7ff f84e 	bl	800a638 <__retarget_lock_release_recursive>
 800b59c:	bd10      	pop	{r4, pc}
 800b59e:	46c0      	nop			; (mov r8, r8)
 800b5a0:	20000668 	.word	0x20000668

0800b5a4 <_Balloc>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	69c5      	ldr	r5, [r0, #28]
 800b5a8:	0006      	movs	r6, r0
 800b5aa:	000c      	movs	r4, r1
 800b5ac:	2d00      	cmp	r5, #0
 800b5ae:	d10e      	bne.n	800b5ce <_Balloc+0x2a>
 800b5b0:	2010      	movs	r0, #16
 800b5b2:	f7ff ff39 	bl	800b428 <malloc>
 800b5b6:	1e02      	subs	r2, r0, #0
 800b5b8:	61f0      	str	r0, [r6, #28]
 800b5ba:	d104      	bne.n	800b5c6 <_Balloc+0x22>
 800b5bc:	216b      	movs	r1, #107	; 0x6b
 800b5be:	4b19      	ldr	r3, [pc, #100]	; (800b624 <_Balloc+0x80>)
 800b5c0:	4819      	ldr	r0, [pc, #100]	; (800b628 <_Balloc+0x84>)
 800b5c2:	f001 fdbd 	bl	800d140 <__assert_func>
 800b5c6:	6045      	str	r5, [r0, #4]
 800b5c8:	6085      	str	r5, [r0, #8]
 800b5ca:	6005      	str	r5, [r0, #0]
 800b5cc:	60c5      	str	r5, [r0, #12]
 800b5ce:	69f5      	ldr	r5, [r6, #28]
 800b5d0:	68eb      	ldr	r3, [r5, #12]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d013      	beq.n	800b5fe <_Balloc+0x5a>
 800b5d6:	69f3      	ldr	r3, [r6, #28]
 800b5d8:	00a2      	lsls	r2, r4, #2
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	189b      	adds	r3, r3, r2
 800b5de:	6818      	ldr	r0, [r3, #0]
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d118      	bne.n	800b616 <_Balloc+0x72>
 800b5e4:	2101      	movs	r1, #1
 800b5e6:	000d      	movs	r5, r1
 800b5e8:	40a5      	lsls	r5, r4
 800b5ea:	1d6a      	adds	r2, r5, #5
 800b5ec:	0030      	movs	r0, r6
 800b5ee:	0092      	lsls	r2, r2, #2
 800b5f0:	f001 fdc4 	bl	800d17c <_calloc_r>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d00c      	beq.n	800b612 <_Balloc+0x6e>
 800b5f8:	6044      	str	r4, [r0, #4]
 800b5fa:	6085      	str	r5, [r0, #8]
 800b5fc:	e00d      	b.n	800b61a <_Balloc+0x76>
 800b5fe:	2221      	movs	r2, #33	; 0x21
 800b600:	2104      	movs	r1, #4
 800b602:	0030      	movs	r0, r6
 800b604:	f001 fdba 	bl	800d17c <_calloc_r>
 800b608:	69f3      	ldr	r3, [r6, #28]
 800b60a:	60e8      	str	r0, [r5, #12]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1e1      	bne.n	800b5d6 <_Balloc+0x32>
 800b612:	2000      	movs	r0, #0
 800b614:	bd70      	pop	{r4, r5, r6, pc}
 800b616:	6802      	ldr	r2, [r0, #0]
 800b618:	601a      	str	r2, [r3, #0]
 800b61a:	2300      	movs	r3, #0
 800b61c:	6103      	str	r3, [r0, #16]
 800b61e:	60c3      	str	r3, [r0, #12]
 800b620:	e7f8      	b.n	800b614 <_Balloc+0x70>
 800b622:	46c0      	nop			; (mov r8, r8)
 800b624:	0800e52e 	.word	0x0800e52e
 800b628:	0800e5ae 	.word	0x0800e5ae

0800b62c <_Bfree>:
 800b62c:	b570      	push	{r4, r5, r6, lr}
 800b62e:	69c6      	ldr	r6, [r0, #28]
 800b630:	0005      	movs	r5, r0
 800b632:	000c      	movs	r4, r1
 800b634:	2e00      	cmp	r6, #0
 800b636:	d10e      	bne.n	800b656 <_Bfree+0x2a>
 800b638:	2010      	movs	r0, #16
 800b63a:	f7ff fef5 	bl	800b428 <malloc>
 800b63e:	1e02      	subs	r2, r0, #0
 800b640:	61e8      	str	r0, [r5, #28]
 800b642:	d104      	bne.n	800b64e <_Bfree+0x22>
 800b644:	218f      	movs	r1, #143	; 0x8f
 800b646:	4b09      	ldr	r3, [pc, #36]	; (800b66c <_Bfree+0x40>)
 800b648:	4809      	ldr	r0, [pc, #36]	; (800b670 <_Bfree+0x44>)
 800b64a:	f001 fd79 	bl	800d140 <__assert_func>
 800b64e:	6046      	str	r6, [r0, #4]
 800b650:	6086      	str	r6, [r0, #8]
 800b652:	6006      	str	r6, [r0, #0]
 800b654:	60c6      	str	r6, [r0, #12]
 800b656:	2c00      	cmp	r4, #0
 800b658:	d007      	beq.n	800b66a <_Bfree+0x3e>
 800b65a:	69eb      	ldr	r3, [r5, #28]
 800b65c:	6862      	ldr	r2, [r4, #4]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	0092      	lsls	r2, r2, #2
 800b662:	189b      	adds	r3, r3, r2
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	6022      	str	r2, [r4, #0]
 800b668:	601c      	str	r4, [r3, #0]
 800b66a:	bd70      	pop	{r4, r5, r6, pc}
 800b66c:	0800e52e 	.word	0x0800e52e
 800b670:	0800e5ae 	.word	0x0800e5ae

0800b674 <__multadd>:
 800b674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b676:	000e      	movs	r6, r1
 800b678:	9001      	str	r0, [sp, #4]
 800b67a:	000c      	movs	r4, r1
 800b67c:	001d      	movs	r5, r3
 800b67e:	2000      	movs	r0, #0
 800b680:	690f      	ldr	r7, [r1, #16]
 800b682:	3614      	adds	r6, #20
 800b684:	6833      	ldr	r3, [r6, #0]
 800b686:	3001      	adds	r0, #1
 800b688:	b299      	uxth	r1, r3
 800b68a:	4351      	muls	r1, r2
 800b68c:	0c1b      	lsrs	r3, r3, #16
 800b68e:	4353      	muls	r3, r2
 800b690:	1949      	adds	r1, r1, r5
 800b692:	0c0d      	lsrs	r5, r1, #16
 800b694:	195b      	adds	r3, r3, r5
 800b696:	0c1d      	lsrs	r5, r3, #16
 800b698:	b289      	uxth	r1, r1
 800b69a:	041b      	lsls	r3, r3, #16
 800b69c:	185b      	adds	r3, r3, r1
 800b69e:	c608      	stmia	r6!, {r3}
 800b6a0:	4287      	cmp	r7, r0
 800b6a2:	dcef      	bgt.n	800b684 <__multadd+0x10>
 800b6a4:	2d00      	cmp	r5, #0
 800b6a6:	d022      	beq.n	800b6ee <__multadd+0x7a>
 800b6a8:	68a3      	ldr	r3, [r4, #8]
 800b6aa:	42bb      	cmp	r3, r7
 800b6ac:	dc19      	bgt.n	800b6e2 <__multadd+0x6e>
 800b6ae:	6861      	ldr	r1, [r4, #4]
 800b6b0:	9801      	ldr	r0, [sp, #4]
 800b6b2:	3101      	adds	r1, #1
 800b6b4:	f7ff ff76 	bl	800b5a4 <_Balloc>
 800b6b8:	1e06      	subs	r6, r0, #0
 800b6ba:	d105      	bne.n	800b6c8 <__multadd+0x54>
 800b6bc:	0032      	movs	r2, r6
 800b6be:	21ba      	movs	r1, #186	; 0xba
 800b6c0:	4b0c      	ldr	r3, [pc, #48]	; (800b6f4 <__multadd+0x80>)
 800b6c2:	480d      	ldr	r0, [pc, #52]	; (800b6f8 <__multadd+0x84>)
 800b6c4:	f001 fd3c 	bl	800d140 <__assert_func>
 800b6c8:	0021      	movs	r1, r4
 800b6ca:	6922      	ldr	r2, [r4, #16]
 800b6cc:	310c      	adds	r1, #12
 800b6ce:	3202      	adds	r2, #2
 800b6d0:	0092      	lsls	r2, r2, #2
 800b6d2:	300c      	adds	r0, #12
 800b6d4:	f001 fd24 	bl	800d120 <memcpy>
 800b6d8:	0021      	movs	r1, r4
 800b6da:	9801      	ldr	r0, [sp, #4]
 800b6dc:	f7ff ffa6 	bl	800b62c <_Bfree>
 800b6e0:	0034      	movs	r4, r6
 800b6e2:	1d3b      	adds	r3, r7, #4
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	18e3      	adds	r3, r4, r3
 800b6e8:	605d      	str	r5, [r3, #4]
 800b6ea:	1c7b      	adds	r3, r7, #1
 800b6ec:	6123      	str	r3, [r4, #16]
 800b6ee:	0020      	movs	r0, r4
 800b6f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b6f2:	46c0      	nop			; (mov r8, r8)
 800b6f4:	0800e59d 	.word	0x0800e59d
 800b6f8:	0800e5ae 	.word	0x0800e5ae

0800b6fc <__s2b>:
 800b6fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6fe:	0006      	movs	r6, r0
 800b700:	0018      	movs	r0, r3
 800b702:	000c      	movs	r4, r1
 800b704:	3008      	adds	r0, #8
 800b706:	2109      	movs	r1, #9
 800b708:	9301      	str	r3, [sp, #4]
 800b70a:	0015      	movs	r5, r2
 800b70c:	f7f4 fda2 	bl	8000254 <__divsi3>
 800b710:	2301      	movs	r3, #1
 800b712:	2100      	movs	r1, #0
 800b714:	4283      	cmp	r3, r0
 800b716:	db0a      	blt.n	800b72e <__s2b+0x32>
 800b718:	0030      	movs	r0, r6
 800b71a:	f7ff ff43 	bl	800b5a4 <_Balloc>
 800b71e:	1e01      	subs	r1, r0, #0
 800b720:	d108      	bne.n	800b734 <__s2b+0x38>
 800b722:	000a      	movs	r2, r1
 800b724:	4b19      	ldr	r3, [pc, #100]	; (800b78c <__s2b+0x90>)
 800b726:	481a      	ldr	r0, [pc, #104]	; (800b790 <__s2b+0x94>)
 800b728:	31d3      	adds	r1, #211	; 0xd3
 800b72a:	f001 fd09 	bl	800d140 <__assert_func>
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	3101      	adds	r1, #1
 800b732:	e7ef      	b.n	800b714 <__s2b+0x18>
 800b734:	9b08      	ldr	r3, [sp, #32]
 800b736:	6143      	str	r3, [r0, #20]
 800b738:	2301      	movs	r3, #1
 800b73a:	6103      	str	r3, [r0, #16]
 800b73c:	2d09      	cmp	r5, #9
 800b73e:	dd18      	ble.n	800b772 <__s2b+0x76>
 800b740:	0023      	movs	r3, r4
 800b742:	3309      	adds	r3, #9
 800b744:	001f      	movs	r7, r3
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	1964      	adds	r4, r4, r5
 800b74a:	783b      	ldrb	r3, [r7, #0]
 800b74c:	220a      	movs	r2, #10
 800b74e:	0030      	movs	r0, r6
 800b750:	3b30      	subs	r3, #48	; 0x30
 800b752:	f7ff ff8f 	bl	800b674 <__multadd>
 800b756:	3701      	adds	r7, #1
 800b758:	0001      	movs	r1, r0
 800b75a:	42a7      	cmp	r7, r4
 800b75c:	d1f5      	bne.n	800b74a <__s2b+0x4e>
 800b75e:	002c      	movs	r4, r5
 800b760:	9b00      	ldr	r3, [sp, #0]
 800b762:	3c08      	subs	r4, #8
 800b764:	191c      	adds	r4, r3, r4
 800b766:	002f      	movs	r7, r5
 800b768:	9b01      	ldr	r3, [sp, #4]
 800b76a:	429f      	cmp	r7, r3
 800b76c:	db04      	blt.n	800b778 <__s2b+0x7c>
 800b76e:	0008      	movs	r0, r1
 800b770:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b772:	2509      	movs	r5, #9
 800b774:	340a      	adds	r4, #10
 800b776:	e7f6      	b.n	800b766 <__s2b+0x6a>
 800b778:	1b63      	subs	r3, r4, r5
 800b77a:	5ddb      	ldrb	r3, [r3, r7]
 800b77c:	220a      	movs	r2, #10
 800b77e:	0030      	movs	r0, r6
 800b780:	3b30      	subs	r3, #48	; 0x30
 800b782:	f7ff ff77 	bl	800b674 <__multadd>
 800b786:	3701      	adds	r7, #1
 800b788:	0001      	movs	r1, r0
 800b78a:	e7ed      	b.n	800b768 <__s2b+0x6c>
 800b78c:	0800e59d 	.word	0x0800e59d
 800b790:	0800e5ae 	.word	0x0800e5ae

0800b794 <__hi0bits>:
 800b794:	0003      	movs	r3, r0
 800b796:	0c02      	lsrs	r2, r0, #16
 800b798:	2000      	movs	r0, #0
 800b79a:	4282      	cmp	r2, r0
 800b79c:	d101      	bne.n	800b7a2 <__hi0bits+0xe>
 800b79e:	041b      	lsls	r3, r3, #16
 800b7a0:	3010      	adds	r0, #16
 800b7a2:	0e1a      	lsrs	r2, r3, #24
 800b7a4:	d101      	bne.n	800b7aa <__hi0bits+0x16>
 800b7a6:	3008      	adds	r0, #8
 800b7a8:	021b      	lsls	r3, r3, #8
 800b7aa:	0f1a      	lsrs	r2, r3, #28
 800b7ac:	d101      	bne.n	800b7b2 <__hi0bits+0x1e>
 800b7ae:	3004      	adds	r0, #4
 800b7b0:	011b      	lsls	r3, r3, #4
 800b7b2:	0f9a      	lsrs	r2, r3, #30
 800b7b4:	d101      	bne.n	800b7ba <__hi0bits+0x26>
 800b7b6:	3002      	adds	r0, #2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	db03      	blt.n	800b7c6 <__hi0bits+0x32>
 800b7be:	3001      	adds	r0, #1
 800b7c0:	005b      	lsls	r3, r3, #1
 800b7c2:	d400      	bmi.n	800b7c6 <__hi0bits+0x32>
 800b7c4:	2020      	movs	r0, #32
 800b7c6:	4770      	bx	lr

0800b7c8 <__lo0bits>:
 800b7c8:	6803      	ldr	r3, [r0, #0]
 800b7ca:	0001      	movs	r1, r0
 800b7cc:	2207      	movs	r2, #7
 800b7ce:	0018      	movs	r0, r3
 800b7d0:	4010      	ands	r0, r2
 800b7d2:	4213      	tst	r3, r2
 800b7d4:	d00d      	beq.n	800b7f2 <__lo0bits+0x2a>
 800b7d6:	3a06      	subs	r2, #6
 800b7d8:	2000      	movs	r0, #0
 800b7da:	4213      	tst	r3, r2
 800b7dc:	d105      	bne.n	800b7ea <__lo0bits+0x22>
 800b7de:	3002      	adds	r0, #2
 800b7e0:	4203      	tst	r3, r0
 800b7e2:	d003      	beq.n	800b7ec <__lo0bits+0x24>
 800b7e4:	40d3      	lsrs	r3, r2
 800b7e6:	0010      	movs	r0, r2
 800b7e8:	600b      	str	r3, [r1, #0]
 800b7ea:	4770      	bx	lr
 800b7ec:	089b      	lsrs	r3, r3, #2
 800b7ee:	600b      	str	r3, [r1, #0]
 800b7f0:	e7fb      	b.n	800b7ea <__lo0bits+0x22>
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	2a00      	cmp	r2, #0
 800b7f6:	d101      	bne.n	800b7fc <__lo0bits+0x34>
 800b7f8:	2010      	movs	r0, #16
 800b7fa:	0c1b      	lsrs	r3, r3, #16
 800b7fc:	b2da      	uxtb	r2, r3
 800b7fe:	2a00      	cmp	r2, #0
 800b800:	d101      	bne.n	800b806 <__lo0bits+0x3e>
 800b802:	3008      	adds	r0, #8
 800b804:	0a1b      	lsrs	r3, r3, #8
 800b806:	071a      	lsls	r2, r3, #28
 800b808:	d101      	bne.n	800b80e <__lo0bits+0x46>
 800b80a:	3004      	adds	r0, #4
 800b80c:	091b      	lsrs	r3, r3, #4
 800b80e:	079a      	lsls	r2, r3, #30
 800b810:	d101      	bne.n	800b816 <__lo0bits+0x4e>
 800b812:	3002      	adds	r0, #2
 800b814:	089b      	lsrs	r3, r3, #2
 800b816:	07da      	lsls	r2, r3, #31
 800b818:	d4e9      	bmi.n	800b7ee <__lo0bits+0x26>
 800b81a:	3001      	adds	r0, #1
 800b81c:	085b      	lsrs	r3, r3, #1
 800b81e:	d1e6      	bne.n	800b7ee <__lo0bits+0x26>
 800b820:	2020      	movs	r0, #32
 800b822:	e7e2      	b.n	800b7ea <__lo0bits+0x22>

0800b824 <__i2b>:
 800b824:	b510      	push	{r4, lr}
 800b826:	000c      	movs	r4, r1
 800b828:	2101      	movs	r1, #1
 800b82a:	f7ff febb 	bl	800b5a4 <_Balloc>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d107      	bne.n	800b842 <__i2b+0x1e>
 800b832:	2146      	movs	r1, #70	; 0x46
 800b834:	4c05      	ldr	r4, [pc, #20]	; (800b84c <__i2b+0x28>)
 800b836:	0002      	movs	r2, r0
 800b838:	4b05      	ldr	r3, [pc, #20]	; (800b850 <__i2b+0x2c>)
 800b83a:	0020      	movs	r0, r4
 800b83c:	31ff      	adds	r1, #255	; 0xff
 800b83e:	f001 fc7f 	bl	800d140 <__assert_func>
 800b842:	2301      	movs	r3, #1
 800b844:	6144      	str	r4, [r0, #20]
 800b846:	6103      	str	r3, [r0, #16]
 800b848:	bd10      	pop	{r4, pc}
 800b84a:	46c0      	nop			; (mov r8, r8)
 800b84c:	0800e5ae 	.word	0x0800e5ae
 800b850:	0800e59d 	.word	0x0800e59d

0800b854 <__multiply>:
 800b854:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b856:	0015      	movs	r5, r2
 800b858:	690a      	ldr	r2, [r1, #16]
 800b85a:	692b      	ldr	r3, [r5, #16]
 800b85c:	000c      	movs	r4, r1
 800b85e:	b08b      	sub	sp, #44	; 0x2c
 800b860:	429a      	cmp	r2, r3
 800b862:	da01      	bge.n	800b868 <__multiply+0x14>
 800b864:	002c      	movs	r4, r5
 800b866:	000d      	movs	r5, r1
 800b868:	6927      	ldr	r7, [r4, #16]
 800b86a:	692e      	ldr	r6, [r5, #16]
 800b86c:	6861      	ldr	r1, [r4, #4]
 800b86e:	19bb      	adds	r3, r7, r6
 800b870:	9303      	str	r3, [sp, #12]
 800b872:	68a3      	ldr	r3, [r4, #8]
 800b874:	19ba      	adds	r2, r7, r6
 800b876:	4293      	cmp	r3, r2
 800b878:	da00      	bge.n	800b87c <__multiply+0x28>
 800b87a:	3101      	adds	r1, #1
 800b87c:	f7ff fe92 	bl	800b5a4 <_Balloc>
 800b880:	9002      	str	r0, [sp, #8]
 800b882:	2800      	cmp	r0, #0
 800b884:	d106      	bne.n	800b894 <__multiply+0x40>
 800b886:	21b1      	movs	r1, #177	; 0xb1
 800b888:	4b48      	ldr	r3, [pc, #288]	; (800b9ac <__multiply+0x158>)
 800b88a:	4849      	ldr	r0, [pc, #292]	; (800b9b0 <__multiply+0x15c>)
 800b88c:	9a02      	ldr	r2, [sp, #8]
 800b88e:	0049      	lsls	r1, r1, #1
 800b890:	f001 fc56 	bl	800d140 <__assert_func>
 800b894:	9b02      	ldr	r3, [sp, #8]
 800b896:	2200      	movs	r2, #0
 800b898:	3314      	adds	r3, #20
 800b89a:	469c      	mov	ip, r3
 800b89c:	19bb      	adds	r3, r7, r6
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4463      	add	r3, ip
 800b8a2:	9304      	str	r3, [sp, #16]
 800b8a4:	4663      	mov	r3, ip
 800b8a6:	9904      	ldr	r1, [sp, #16]
 800b8a8:	428b      	cmp	r3, r1
 800b8aa:	d32a      	bcc.n	800b902 <__multiply+0xae>
 800b8ac:	0023      	movs	r3, r4
 800b8ae:	00bf      	lsls	r7, r7, #2
 800b8b0:	3314      	adds	r3, #20
 800b8b2:	3514      	adds	r5, #20
 800b8b4:	9308      	str	r3, [sp, #32]
 800b8b6:	00b6      	lsls	r6, r6, #2
 800b8b8:	19db      	adds	r3, r3, r7
 800b8ba:	9305      	str	r3, [sp, #20]
 800b8bc:	19ab      	adds	r3, r5, r6
 800b8be:	9309      	str	r3, [sp, #36]	; 0x24
 800b8c0:	2304      	movs	r3, #4
 800b8c2:	9306      	str	r3, [sp, #24]
 800b8c4:	0023      	movs	r3, r4
 800b8c6:	9a05      	ldr	r2, [sp, #20]
 800b8c8:	3315      	adds	r3, #21
 800b8ca:	9501      	str	r5, [sp, #4]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d305      	bcc.n	800b8dc <__multiply+0x88>
 800b8d0:	1b13      	subs	r3, r2, r4
 800b8d2:	3b15      	subs	r3, #21
 800b8d4:	089b      	lsrs	r3, r3, #2
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	9306      	str	r3, [sp, #24]
 800b8dc:	9b01      	ldr	r3, [sp, #4]
 800b8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d310      	bcc.n	800b906 <__multiply+0xb2>
 800b8e4:	9b03      	ldr	r3, [sp, #12]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	dd05      	ble.n	800b8f6 <__multiply+0xa2>
 800b8ea:	9b04      	ldr	r3, [sp, #16]
 800b8ec:	3b04      	subs	r3, #4
 800b8ee:	9304      	str	r3, [sp, #16]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d056      	beq.n	800b9a4 <__multiply+0x150>
 800b8f6:	9b02      	ldr	r3, [sp, #8]
 800b8f8:	9a03      	ldr	r2, [sp, #12]
 800b8fa:	0018      	movs	r0, r3
 800b8fc:	611a      	str	r2, [r3, #16]
 800b8fe:	b00b      	add	sp, #44	; 0x2c
 800b900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b902:	c304      	stmia	r3!, {r2}
 800b904:	e7cf      	b.n	800b8a6 <__multiply+0x52>
 800b906:	9b01      	ldr	r3, [sp, #4]
 800b908:	6818      	ldr	r0, [r3, #0]
 800b90a:	b280      	uxth	r0, r0
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d01e      	beq.n	800b94e <__multiply+0xfa>
 800b910:	4667      	mov	r7, ip
 800b912:	2500      	movs	r5, #0
 800b914:	9e08      	ldr	r6, [sp, #32]
 800b916:	ce02      	ldmia	r6!, {r1}
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	9307      	str	r3, [sp, #28]
 800b91c:	b28b      	uxth	r3, r1
 800b91e:	4343      	muls	r3, r0
 800b920:	001a      	movs	r2, r3
 800b922:	466b      	mov	r3, sp
 800b924:	8b9b      	ldrh	r3, [r3, #28]
 800b926:	18d3      	adds	r3, r2, r3
 800b928:	195b      	adds	r3, r3, r5
 800b92a:	0c0d      	lsrs	r5, r1, #16
 800b92c:	4345      	muls	r5, r0
 800b92e:	9a07      	ldr	r2, [sp, #28]
 800b930:	0c11      	lsrs	r1, r2, #16
 800b932:	1869      	adds	r1, r5, r1
 800b934:	0c1a      	lsrs	r2, r3, #16
 800b936:	188a      	adds	r2, r1, r2
 800b938:	b29b      	uxth	r3, r3
 800b93a:	0c15      	lsrs	r5, r2, #16
 800b93c:	0412      	lsls	r2, r2, #16
 800b93e:	431a      	orrs	r2, r3
 800b940:	9b05      	ldr	r3, [sp, #20]
 800b942:	c704      	stmia	r7!, {r2}
 800b944:	42b3      	cmp	r3, r6
 800b946:	d8e6      	bhi.n	800b916 <__multiply+0xc2>
 800b948:	4663      	mov	r3, ip
 800b94a:	9a06      	ldr	r2, [sp, #24]
 800b94c:	509d      	str	r5, [r3, r2]
 800b94e:	9b01      	ldr	r3, [sp, #4]
 800b950:	6818      	ldr	r0, [r3, #0]
 800b952:	0c00      	lsrs	r0, r0, #16
 800b954:	d020      	beq.n	800b998 <__multiply+0x144>
 800b956:	4663      	mov	r3, ip
 800b958:	0025      	movs	r5, r4
 800b95a:	4661      	mov	r1, ip
 800b95c:	2700      	movs	r7, #0
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	3514      	adds	r5, #20
 800b962:	682a      	ldr	r2, [r5, #0]
 800b964:	680e      	ldr	r6, [r1, #0]
 800b966:	b292      	uxth	r2, r2
 800b968:	4342      	muls	r2, r0
 800b96a:	0c36      	lsrs	r6, r6, #16
 800b96c:	1992      	adds	r2, r2, r6
 800b96e:	19d2      	adds	r2, r2, r7
 800b970:	0416      	lsls	r6, r2, #16
 800b972:	b29b      	uxth	r3, r3
 800b974:	431e      	orrs	r6, r3
 800b976:	600e      	str	r6, [r1, #0]
 800b978:	cd40      	ldmia	r5!, {r6}
 800b97a:	684b      	ldr	r3, [r1, #4]
 800b97c:	0c36      	lsrs	r6, r6, #16
 800b97e:	4346      	muls	r6, r0
 800b980:	b29b      	uxth	r3, r3
 800b982:	0c12      	lsrs	r2, r2, #16
 800b984:	18f3      	adds	r3, r6, r3
 800b986:	189b      	adds	r3, r3, r2
 800b988:	9a05      	ldr	r2, [sp, #20]
 800b98a:	0c1f      	lsrs	r7, r3, #16
 800b98c:	3104      	adds	r1, #4
 800b98e:	42aa      	cmp	r2, r5
 800b990:	d8e7      	bhi.n	800b962 <__multiply+0x10e>
 800b992:	4662      	mov	r2, ip
 800b994:	9906      	ldr	r1, [sp, #24]
 800b996:	5053      	str	r3, [r2, r1]
 800b998:	9b01      	ldr	r3, [sp, #4]
 800b99a:	3304      	adds	r3, #4
 800b99c:	9301      	str	r3, [sp, #4]
 800b99e:	2304      	movs	r3, #4
 800b9a0:	449c      	add	ip, r3
 800b9a2:	e79b      	b.n	800b8dc <__multiply+0x88>
 800b9a4:	9b03      	ldr	r3, [sp, #12]
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	9303      	str	r3, [sp, #12]
 800b9aa:	e79b      	b.n	800b8e4 <__multiply+0x90>
 800b9ac:	0800e59d 	.word	0x0800e59d
 800b9b0:	0800e5ae 	.word	0x0800e5ae

0800b9b4 <__pow5mult>:
 800b9b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	0015      	movs	r5, r2
 800b9ba:	0007      	movs	r7, r0
 800b9bc:	000e      	movs	r6, r1
 800b9be:	401a      	ands	r2, r3
 800b9c0:	421d      	tst	r5, r3
 800b9c2:	d008      	beq.n	800b9d6 <__pow5mult+0x22>
 800b9c4:	4925      	ldr	r1, [pc, #148]	; (800ba5c <__pow5mult+0xa8>)
 800b9c6:	3a01      	subs	r2, #1
 800b9c8:	0092      	lsls	r2, r2, #2
 800b9ca:	5852      	ldr	r2, [r2, r1]
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	0031      	movs	r1, r6
 800b9d0:	f7ff fe50 	bl	800b674 <__multadd>
 800b9d4:	0006      	movs	r6, r0
 800b9d6:	10ad      	asrs	r5, r5, #2
 800b9d8:	d03d      	beq.n	800ba56 <__pow5mult+0xa2>
 800b9da:	69fc      	ldr	r4, [r7, #28]
 800b9dc:	2c00      	cmp	r4, #0
 800b9de:	d10f      	bne.n	800ba00 <__pow5mult+0x4c>
 800b9e0:	2010      	movs	r0, #16
 800b9e2:	f7ff fd21 	bl	800b428 <malloc>
 800b9e6:	1e02      	subs	r2, r0, #0
 800b9e8:	61f8      	str	r0, [r7, #28]
 800b9ea:	d105      	bne.n	800b9f8 <__pow5mult+0x44>
 800b9ec:	21b4      	movs	r1, #180	; 0xb4
 800b9ee:	4b1c      	ldr	r3, [pc, #112]	; (800ba60 <__pow5mult+0xac>)
 800b9f0:	481c      	ldr	r0, [pc, #112]	; (800ba64 <__pow5mult+0xb0>)
 800b9f2:	31ff      	adds	r1, #255	; 0xff
 800b9f4:	f001 fba4 	bl	800d140 <__assert_func>
 800b9f8:	6044      	str	r4, [r0, #4]
 800b9fa:	6084      	str	r4, [r0, #8]
 800b9fc:	6004      	str	r4, [r0, #0]
 800b9fe:	60c4      	str	r4, [r0, #12]
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	689c      	ldr	r4, [r3, #8]
 800ba04:	9301      	str	r3, [sp, #4]
 800ba06:	2c00      	cmp	r4, #0
 800ba08:	d108      	bne.n	800ba1c <__pow5mult+0x68>
 800ba0a:	0038      	movs	r0, r7
 800ba0c:	4916      	ldr	r1, [pc, #88]	; (800ba68 <__pow5mult+0xb4>)
 800ba0e:	f7ff ff09 	bl	800b824 <__i2b>
 800ba12:	9b01      	ldr	r3, [sp, #4]
 800ba14:	0004      	movs	r4, r0
 800ba16:	6098      	str	r0, [r3, #8]
 800ba18:	2300      	movs	r3, #0
 800ba1a:	6003      	str	r3, [r0, #0]
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	421d      	tst	r5, r3
 800ba20:	d00a      	beq.n	800ba38 <__pow5mult+0x84>
 800ba22:	0031      	movs	r1, r6
 800ba24:	0022      	movs	r2, r4
 800ba26:	0038      	movs	r0, r7
 800ba28:	f7ff ff14 	bl	800b854 <__multiply>
 800ba2c:	0031      	movs	r1, r6
 800ba2e:	9001      	str	r0, [sp, #4]
 800ba30:	0038      	movs	r0, r7
 800ba32:	f7ff fdfb 	bl	800b62c <_Bfree>
 800ba36:	9e01      	ldr	r6, [sp, #4]
 800ba38:	106d      	asrs	r5, r5, #1
 800ba3a:	d00c      	beq.n	800ba56 <__pow5mult+0xa2>
 800ba3c:	6820      	ldr	r0, [r4, #0]
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d107      	bne.n	800ba52 <__pow5mult+0x9e>
 800ba42:	0022      	movs	r2, r4
 800ba44:	0021      	movs	r1, r4
 800ba46:	0038      	movs	r0, r7
 800ba48:	f7ff ff04 	bl	800b854 <__multiply>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	6020      	str	r0, [r4, #0]
 800ba50:	6003      	str	r3, [r0, #0]
 800ba52:	0004      	movs	r4, r0
 800ba54:	e7e2      	b.n	800ba1c <__pow5mult+0x68>
 800ba56:	0030      	movs	r0, r6
 800ba58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba5a:	46c0      	nop			; (mov r8, r8)
 800ba5c:	0800e6f8 	.word	0x0800e6f8
 800ba60:	0800e52e 	.word	0x0800e52e
 800ba64:	0800e5ae 	.word	0x0800e5ae
 800ba68:	00000271 	.word	0x00000271

0800ba6c <__lshift>:
 800ba6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba6e:	000c      	movs	r4, r1
 800ba70:	0017      	movs	r7, r2
 800ba72:	6923      	ldr	r3, [r4, #16]
 800ba74:	1155      	asrs	r5, r2, #5
 800ba76:	b087      	sub	sp, #28
 800ba78:	18eb      	adds	r3, r5, r3
 800ba7a:	9302      	str	r3, [sp, #8]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	9301      	str	r3, [sp, #4]
 800ba80:	6849      	ldr	r1, [r1, #4]
 800ba82:	68a3      	ldr	r3, [r4, #8]
 800ba84:	9004      	str	r0, [sp, #16]
 800ba86:	9a01      	ldr	r2, [sp, #4]
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	db10      	blt.n	800baae <__lshift+0x42>
 800ba8c:	9804      	ldr	r0, [sp, #16]
 800ba8e:	f7ff fd89 	bl	800b5a4 <_Balloc>
 800ba92:	2300      	movs	r3, #0
 800ba94:	0002      	movs	r2, r0
 800ba96:	0006      	movs	r6, r0
 800ba98:	0019      	movs	r1, r3
 800ba9a:	3214      	adds	r2, #20
 800ba9c:	4298      	cmp	r0, r3
 800ba9e:	d10c      	bne.n	800baba <__lshift+0x4e>
 800baa0:	31df      	adds	r1, #223	; 0xdf
 800baa2:	0032      	movs	r2, r6
 800baa4:	4b26      	ldr	r3, [pc, #152]	; (800bb40 <__lshift+0xd4>)
 800baa6:	4827      	ldr	r0, [pc, #156]	; (800bb44 <__lshift+0xd8>)
 800baa8:	31ff      	adds	r1, #255	; 0xff
 800baaa:	f001 fb49 	bl	800d140 <__assert_func>
 800baae:	3101      	adds	r1, #1
 800bab0:	005b      	lsls	r3, r3, #1
 800bab2:	e7e8      	b.n	800ba86 <__lshift+0x1a>
 800bab4:	0098      	lsls	r0, r3, #2
 800bab6:	5011      	str	r1, [r2, r0]
 800bab8:	3301      	adds	r3, #1
 800baba:	42ab      	cmp	r3, r5
 800babc:	dbfa      	blt.n	800bab4 <__lshift+0x48>
 800babe:	43eb      	mvns	r3, r5
 800bac0:	17db      	asrs	r3, r3, #31
 800bac2:	401d      	ands	r5, r3
 800bac4:	211f      	movs	r1, #31
 800bac6:	0023      	movs	r3, r4
 800bac8:	0038      	movs	r0, r7
 800baca:	00ad      	lsls	r5, r5, #2
 800bacc:	1955      	adds	r5, r2, r5
 800bace:	6922      	ldr	r2, [r4, #16]
 800bad0:	3314      	adds	r3, #20
 800bad2:	0092      	lsls	r2, r2, #2
 800bad4:	4008      	ands	r0, r1
 800bad6:	4684      	mov	ip, r0
 800bad8:	189a      	adds	r2, r3, r2
 800bada:	420f      	tst	r7, r1
 800badc:	d02a      	beq.n	800bb34 <__lshift+0xc8>
 800bade:	3101      	adds	r1, #1
 800bae0:	1a09      	subs	r1, r1, r0
 800bae2:	9105      	str	r1, [sp, #20]
 800bae4:	2100      	movs	r1, #0
 800bae6:	9503      	str	r5, [sp, #12]
 800bae8:	4667      	mov	r7, ip
 800baea:	6818      	ldr	r0, [r3, #0]
 800baec:	40b8      	lsls	r0, r7
 800baee:	4308      	orrs	r0, r1
 800baf0:	9903      	ldr	r1, [sp, #12]
 800baf2:	c101      	stmia	r1!, {r0}
 800baf4:	9103      	str	r1, [sp, #12]
 800baf6:	9805      	ldr	r0, [sp, #20]
 800baf8:	cb02      	ldmia	r3!, {r1}
 800bafa:	40c1      	lsrs	r1, r0
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d8f3      	bhi.n	800bae8 <__lshift+0x7c>
 800bb00:	0020      	movs	r0, r4
 800bb02:	3015      	adds	r0, #21
 800bb04:	2304      	movs	r3, #4
 800bb06:	4282      	cmp	r2, r0
 800bb08:	d304      	bcc.n	800bb14 <__lshift+0xa8>
 800bb0a:	1b13      	subs	r3, r2, r4
 800bb0c:	3b15      	subs	r3, #21
 800bb0e:	089b      	lsrs	r3, r3, #2
 800bb10:	3301      	adds	r3, #1
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	50e9      	str	r1, [r5, r3]
 800bb16:	2900      	cmp	r1, #0
 800bb18:	d002      	beq.n	800bb20 <__lshift+0xb4>
 800bb1a:	9b02      	ldr	r3, [sp, #8]
 800bb1c:	3302      	adds	r3, #2
 800bb1e:	9301      	str	r3, [sp, #4]
 800bb20:	9b01      	ldr	r3, [sp, #4]
 800bb22:	9804      	ldr	r0, [sp, #16]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	0021      	movs	r1, r4
 800bb28:	6133      	str	r3, [r6, #16]
 800bb2a:	f7ff fd7f 	bl	800b62c <_Bfree>
 800bb2e:	0030      	movs	r0, r6
 800bb30:	b007      	add	sp, #28
 800bb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb34:	cb02      	ldmia	r3!, {r1}
 800bb36:	c502      	stmia	r5!, {r1}
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d8fb      	bhi.n	800bb34 <__lshift+0xc8>
 800bb3c:	e7f0      	b.n	800bb20 <__lshift+0xb4>
 800bb3e:	46c0      	nop			; (mov r8, r8)
 800bb40:	0800e59d 	.word	0x0800e59d
 800bb44:	0800e5ae 	.word	0x0800e5ae

0800bb48 <__mcmp>:
 800bb48:	b530      	push	{r4, r5, lr}
 800bb4a:	690b      	ldr	r3, [r1, #16]
 800bb4c:	6904      	ldr	r4, [r0, #16]
 800bb4e:	0002      	movs	r2, r0
 800bb50:	1ae0      	subs	r0, r4, r3
 800bb52:	429c      	cmp	r4, r3
 800bb54:	d10e      	bne.n	800bb74 <__mcmp+0x2c>
 800bb56:	3214      	adds	r2, #20
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	3114      	adds	r1, #20
 800bb5c:	0014      	movs	r4, r2
 800bb5e:	18c9      	adds	r1, r1, r3
 800bb60:	18d2      	adds	r2, r2, r3
 800bb62:	3a04      	subs	r2, #4
 800bb64:	3904      	subs	r1, #4
 800bb66:	6815      	ldr	r5, [r2, #0]
 800bb68:	680b      	ldr	r3, [r1, #0]
 800bb6a:	429d      	cmp	r5, r3
 800bb6c:	d003      	beq.n	800bb76 <__mcmp+0x2e>
 800bb6e:	2001      	movs	r0, #1
 800bb70:	429d      	cmp	r5, r3
 800bb72:	d303      	bcc.n	800bb7c <__mcmp+0x34>
 800bb74:	bd30      	pop	{r4, r5, pc}
 800bb76:	4294      	cmp	r4, r2
 800bb78:	d3f3      	bcc.n	800bb62 <__mcmp+0x1a>
 800bb7a:	e7fb      	b.n	800bb74 <__mcmp+0x2c>
 800bb7c:	4240      	negs	r0, r0
 800bb7e:	e7f9      	b.n	800bb74 <__mcmp+0x2c>

0800bb80 <__mdiff>:
 800bb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb82:	000e      	movs	r6, r1
 800bb84:	0007      	movs	r7, r0
 800bb86:	0011      	movs	r1, r2
 800bb88:	0030      	movs	r0, r6
 800bb8a:	b087      	sub	sp, #28
 800bb8c:	0014      	movs	r4, r2
 800bb8e:	f7ff ffdb 	bl	800bb48 <__mcmp>
 800bb92:	1e05      	subs	r5, r0, #0
 800bb94:	d110      	bne.n	800bbb8 <__mdiff+0x38>
 800bb96:	0001      	movs	r1, r0
 800bb98:	0038      	movs	r0, r7
 800bb9a:	f7ff fd03 	bl	800b5a4 <_Balloc>
 800bb9e:	1e02      	subs	r2, r0, #0
 800bba0:	d104      	bne.n	800bbac <__mdiff+0x2c>
 800bba2:	4b3f      	ldr	r3, [pc, #252]	; (800bca0 <__mdiff+0x120>)
 800bba4:	483f      	ldr	r0, [pc, #252]	; (800bca4 <__mdiff+0x124>)
 800bba6:	4940      	ldr	r1, [pc, #256]	; (800bca8 <__mdiff+0x128>)
 800bba8:	f001 faca 	bl	800d140 <__assert_func>
 800bbac:	2301      	movs	r3, #1
 800bbae:	6145      	str	r5, [r0, #20]
 800bbb0:	6103      	str	r3, [r0, #16]
 800bbb2:	0010      	movs	r0, r2
 800bbb4:	b007      	add	sp, #28
 800bbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb8:	2301      	movs	r3, #1
 800bbba:	9301      	str	r3, [sp, #4]
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	db04      	blt.n	800bbca <__mdiff+0x4a>
 800bbc0:	0023      	movs	r3, r4
 800bbc2:	0034      	movs	r4, r6
 800bbc4:	001e      	movs	r6, r3
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	0038      	movs	r0, r7
 800bbcc:	6861      	ldr	r1, [r4, #4]
 800bbce:	f7ff fce9 	bl	800b5a4 <_Balloc>
 800bbd2:	1e02      	subs	r2, r0, #0
 800bbd4:	d103      	bne.n	800bbde <__mdiff+0x5e>
 800bbd6:	4b32      	ldr	r3, [pc, #200]	; (800bca0 <__mdiff+0x120>)
 800bbd8:	4832      	ldr	r0, [pc, #200]	; (800bca4 <__mdiff+0x124>)
 800bbda:	4934      	ldr	r1, [pc, #208]	; (800bcac <__mdiff+0x12c>)
 800bbdc:	e7e4      	b.n	800bba8 <__mdiff+0x28>
 800bbde:	9b01      	ldr	r3, [sp, #4]
 800bbe0:	2700      	movs	r7, #0
 800bbe2:	60c3      	str	r3, [r0, #12]
 800bbe4:	6920      	ldr	r0, [r4, #16]
 800bbe6:	3414      	adds	r4, #20
 800bbe8:	0083      	lsls	r3, r0, #2
 800bbea:	18e3      	adds	r3, r4, r3
 800bbec:	0021      	movs	r1, r4
 800bbee:	9401      	str	r4, [sp, #4]
 800bbf0:	0034      	movs	r4, r6
 800bbf2:	9302      	str	r3, [sp, #8]
 800bbf4:	6933      	ldr	r3, [r6, #16]
 800bbf6:	3414      	adds	r4, #20
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	18e3      	adds	r3, r4, r3
 800bbfc:	9303      	str	r3, [sp, #12]
 800bbfe:	0013      	movs	r3, r2
 800bc00:	3314      	adds	r3, #20
 800bc02:	469c      	mov	ip, r3
 800bc04:	9305      	str	r3, [sp, #20]
 800bc06:	9104      	str	r1, [sp, #16]
 800bc08:	9b04      	ldr	r3, [sp, #16]
 800bc0a:	cc02      	ldmia	r4!, {r1}
 800bc0c:	cb20      	ldmia	r3!, {r5}
 800bc0e:	9304      	str	r3, [sp, #16]
 800bc10:	b2ab      	uxth	r3, r5
 800bc12:	19df      	adds	r7, r3, r7
 800bc14:	b28b      	uxth	r3, r1
 800bc16:	1afb      	subs	r3, r7, r3
 800bc18:	0c09      	lsrs	r1, r1, #16
 800bc1a:	0c2d      	lsrs	r5, r5, #16
 800bc1c:	1a6d      	subs	r5, r5, r1
 800bc1e:	1419      	asrs	r1, r3, #16
 800bc20:	1869      	adds	r1, r5, r1
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	140f      	asrs	r7, r1, #16
 800bc26:	0409      	lsls	r1, r1, #16
 800bc28:	4319      	orrs	r1, r3
 800bc2a:	4663      	mov	r3, ip
 800bc2c:	c302      	stmia	r3!, {r1}
 800bc2e:	469c      	mov	ip, r3
 800bc30:	9b03      	ldr	r3, [sp, #12]
 800bc32:	42a3      	cmp	r3, r4
 800bc34:	d8e8      	bhi.n	800bc08 <__mdiff+0x88>
 800bc36:	0031      	movs	r1, r6
 800bc38:	9c03      	ldr	r4, [sp, #12]
 800bc3a:	3115      	adds	r1, #21
 800bc3c:	2304      	movs	r3, #4
 800bc3e:	428c      	cmp	r4, r1
 800bc40:	d304      	bcc.n	800bc4c <__mdiff+0xcc>
 800bc42:	1ba3      	subs	r3, r4, r6
 800bc44:	3b15      	subs	r3, #21
 800bc46:	089b      	lsrs	r3, r3, #2
 800bc48:	3301      	adds	r3, #1
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	9901      	ldr	r1, [sp, #4]
 800bc4e:	18cd      	adds	r5, r1, r3
 800bc50:	9905      	ldr	r1, [sp, #20]
 800bc52:	002e      	movs	r6, r5
 800bc54:	18cb      	adds	r3, r1, r3
 800bc56:	469c      	mov	ip, r3
 800bc58:	9902      	ldr	r1, [sp, #8]
 800bc5a:	428e      	cmp	r6, r1
 800bc5c:	d310      	bcc.n	800bc80 <__mdiff+0x100>
 800bc5e:	9e02      	ldr	r6, [sp, #8]
 800bc60:	1ee9      	subs	r1, r5, #3
 800bc62:	2400      	movs	r4, #0
 800bc64:	428e      	cmp	r6, r1
 800bc66:	d304      	bcc.n	800bc72 <__mdiff+0xf2>
 800bc68:	0031      	movs	r1, r6
 800bc6a:	3103      	adds	r1, #3
 800bc6c:	1b49      	subs	r1, r1, r5
 800bc6e:	0889      	lsrs	r1, r1, #2
 800bc70:	008c      	lsls	r4, r1, #2
 800bc72:	191b      	adds	r3, r3, r4
 800bc74:	3b04      	subs	r3, #4
 800bc76:	6819      	ldr	r1, [r3, #0]
 800bc78:	2900      	cmp	r1, #0
 800bc7a:	d00f      	beq.n	800bc9c <__mdiff+0x11c>
 800bc7c:	6110      	str	r0, [r2, #16]
 800bc7e:	e798      	b.n	800bbb2 <__mdiff+0x32>
 800bc80:	ce02      	ldmia	r6!, {r1}
 800bc82:	b28c      	uxth	r4, r1
 800bc84:	19e4      	adds	r4, r4, r7
 800bc86:	0c0f      	lsrs	r7, r1, #16
 800bc88:	1421      	asrs	r1, r4, #16
 800bc8a:	1879      	adds	r1, r7, r1
 800bc8c:	b2a4      	uxth	r4, r4
 800bc8e:	140f      	asrs	r7, r1, #16
 800bc90:	0409      	lsls	r1, r1, #16
 800bc92:	4321      	orrs	r1, r4
 800bc94:	4664      	mov	r4, ip
 800bc96:	c402      	stmia	r4!, {r1}
 800bc98:	46a4      	mov	ip, r4
 800bc9a:	e7dd      	b.n	800bc58 <__mdiff+0xd8>
 800bc9c:	3801      	subs	r0, #1
 800bc9e:	e7e9      	b.n	800bc74 <__mdiff+0xf4>
 800bca0:	0800e59d 	.word	0x0800e59d
 800bca4:	0800e5ae 	.word	0x0800e5ae
 800bca8:	00000237 	.word	0x00000237
 800bcac:	00000245 	.word	0x00000245

0800bcb0 <__ulp>:
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	4b0b      	ldr	r3, [pc, #44]	; (800bce0 <__ulp+0x30>)
 800bcb4:	4019      	ands	r1, r3
 800bcb6:	4b0b      	ldr	r3, [pc, #44]	; (800bce4 <__ulp+0x34>)
 800bcb8:	18c9      	adds	r1, r1, r3
 800bcba:	4281      	cmp	r1, r0
 800bcbc:	dc06      	bgt.n	800bccc <__ulp+0x1c>
 800bcbe:	4249      	negs	r1, r1
 800bcc0:	150b      	asrs	r3, r1, #20
 800bcc2:	2b13      	cmp	r3, #19
 800bcc4:	dc03      	bgt.n	800bcce <__ulp+0x1e>
 800bcc6:	2180      	movs	r1, #128	; 0x80
 800bcc8:	0309      	lsls	r1, r1, #12
 800bcca:	4119      	asrs	r1, r3
 800bccc:	4770      	bx	lr
 800bcce:	3b14      	subs	r3, #20
 800bcd0:	2001      	movs	r0, #1
 800bcd2:	2b1e      	cmp	r3, #30
 800bcd4:	dc02      	bgt.n	800bcdc <__ulp+0x2c>
 800bcd6:	2080      	movs	r0, #128	; 0x80
 800bcd8:	0600      	lsls	r0, r0, #24
 800bcda:	40d8      	lsrs	r0, r3
 800bcdc:	2100      	movs	r1, #0
 800bcde:	e7f5      	b.n	800bccc <__ulp+0x1c>
 800bce0:	7ff00000 	.word	0x7ff00000
 800bce4:	fcc00000 	.word	0xfcc00000

0800bce8 <__b2d>:
 800bce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcea:	0006      	movs	r6, r0
 800bcec:	6903      	ldr	r3, [r0, #16]
 800bcee:	3614      	adds	r6, #20
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	18f3      	adds	r3, r6, r3
 800bcf4:	1f1d      	subs	r5, r3, #4
 800bcf6:	682c      	ldr	r4, [r5, #0]
 800bcf8:	000f      	movs	r7, r1
 800bcfa:	0020      	movs	r0, r4
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	f7ff fd49 	bl	800b794 <__hi0bits>
 800bd02:	2220      	movs	r2, #32
 800bd04:	1a12      	subs	r2, r2, r0
 800bd06:	603a      	str	r2, [r7, #0]
 800bd08:	0003      	movs	r3, r0
 800bd0a:	4a1c      	ldr	r2, [pc, #112]	; (800bd7c <__b2d+0x94>)
 800bd0c:	280a      	cmp	r0, #10
 800bd0e:	dc15      	bgt.n	800bd3c <__b2d+0x54>
 800bd10:	210b      	movs	r1, #11
 800bd12:	0027      	movs	r7, r4
 800bd14:	1a09      	subs	r1, r1, r0
 800bd16:	40cf      	lsrs	r7, r1
 800bd18:	433a      	orrs	r2, r7
 800bd1a:	468c      	mov	ip, r1
 800bd1c:	0011      	movs	r1, r2
 800bd1e:	2200      	movs	r2, #0
 800bd20:	42ae      	cmp	r6, r5
 800bd22:	d202      	bcs.n	800bd2a <__b2d+0x42>
 800bd24:	9a01      	ldr	r2, [sp, #4]
 800bd26:	3a08      	subs	r2, #8
 800bd28:	6812      	ldr	r2, [r2, #0]
 800bd2a:	3315      	adds	r3, #21
 800bd2c:	409c      	lsls	r4, r3
 800bd2e:	4663      	mov	r3, ip
 800bd30:	0027      	movs	r7, r4
 800bd32:	40da      	lsrs	r2, r3
 800bd34:	4317      	orrs	r7, r2
 800bd36:	0038      	movs	r0, r7
 800bd38:	b003      	add	sp, #12
 800bd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd3c:	2700      	movs	r7, #0
 800bd3e:	42ae      	cmp	r6, r5
 800bd40:	d202      	bcs.n	800bd48 <__b2d+0x60>
 800bd42:	9d01      	ldr	r5, [sp, #4]
 800bd44:	3d08      	subs	r5, #8
 800bd46:	682f      	ldr	r7, [r5, #0]
 800bd48:	210b      	movs	r1, #11
 800bd4a:	4249      	negs	r1, r1
 800bd4c:	468c      	mov	ip, r1
 800bd4e:	449c      	add	ip, r3
 800bd50:	2b0b      	cmp	r3, #11
 800bd52:	d010      	beq.n	800bd76 <__b2d+0x8e>
 800bd54:	4661      	mov	r1, ip
 800bd56:	2320      	movs	r3, #32
 800bd58:	408c      	lsls	r4, r1
 800bd5a:	1a5b      	subs	r3, r3, r1
 800bd5c:	0039      	movs	r1, r7
 800bd5e:	40d9      	lsrs	r1, r3
 800bd60:	430c      	orrs	r4, r1
 800bd62:	4322      	orrs	r2, r4
 800bd64:	0011      	movs	r1, r2
 800bd66:	2200      	movs	r2, #0
 800bd68:	42b5      	cmp	r5, r6
 800bd6a:	d901      	bls.n	800bd70 <__b2d+0x88>
 800bd6c:	3d04      	subs	r5, #4
 800bd6e:	682a      	ldr	r2, [r5, #0]
 800bd70:	4664      	mov	r4, ip
 800bd72:	40a7      	lsls	r7, r4
 800bd74:	e7dd      	b.n	800bd32 <__b2d+0x4a>
 800bd76:	4322      	orrs	r2, r4
 800bd78:	0011      	movs	r1, r2
 800bd7a:	e7dc      	b.n	800bd36 <__b2d+0x4e>
 800bd7c:	3ff00000 	.word	0x3ff00000

0800bd80 <__d2b>:
 800bd80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd82:	2101      	movs	r1, #1
 800bd84:	0014      	movs	r4, r2
 800bd86:	001d      	movs	r5, r3
 800bd88:	9f08      	ldr	r7, [sp, #32]
 800bd8a:	f7ff fc0b 	bl	800b5a4 <_Balloc>
 800bd8e:	1e06      	subs	r6, r0, #0
 800bd90:	d105      	bne.n	800bd9e <__d2b+0x1e>
 800bd92:	0032      	movs	r2, r6
 800bd94:	4b24      	ldr	r3, [pc, #144]	; (800be28 <__d2b+0xa8>)
 800bd96:	4825      	ldr	r0, [pc, #148]	; (800be2c <__d2b+0xac>)
 800bd98:	4925      	ldr	r1, [pc, #148]	; (800be30 <__d2b+0xb0>)
 800bd9a:	f001 f9d1 	bl	800d140 <__assert_func>
 800bd9e:	032b      	lsls	r3, r5, #12
 800bda0:	006d      	lsls	r5, r5, #1
 800bda2:	0b1b      	lsrs	r3, r3, #12
 800bda4:	0d6d      	lsrs	r5, r5, #21
 800bda6:	d125      	bne.n	800bdf4 <__d2b+0x74>
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	2c00      	cmp	r4, #0
 800bdac:	d028      	beq.n	800be00 <__d2b+0x80>
 800bdae:	4668      	mov	r0, sp
 800bdb0:	9400      	str	r4, [sp, #0]
 800bdb2:	f7ff fd09 	bl	800b7c8 <__lo0bits>
 800bdb6:	9b01      	ldr	r3, [sp, #4]
 800bdb8:	9900      	ldr	r1, [sp, #0]
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d01e      	beq.n	800bdfc <__d2b+0x7c>
 800bdbe:	2220      	movs	r2, #32
 800bdc0:	001c      	movs	r4, r3
 800bdc2:	1a12      	subs	r2, r2, r0
 800bdc4:	4094      	lsls	r4, r2
 800bdc6:	0022      	movs	r2, r4
 800bdc8:	40c3      	lsrs	r3, r0
 800bdca:	430a      	orrs	r2, r1
 800bdcc:	6172      	str	r2, [r6, #20]
 800bdce:	9301      	str	r3, [sp, #4]
 800bdd0:	9c01      	ldr	r4, [sp, #4]
 800bdd2:	61b4      	str	r4, [r6, #24]
 800bdd4:	1e63      	subs	r3, r4, #1
 800bdd6:	419c      	sbcs	r4, r3
 800bdd8:	3401      	adds	r4, #1
 800bdda:	6134      	str	r4, [r6, #16]
 800bddc:	2d00      	cmp	r5, #0
 800bdde:	d017      	beq.n	800be10 <__d2b+0x90>
 800bde0:	2435      	movs	r4, #53	; 0x35
 800bde2:	4b14      	ldr	r3, [pc, #80]	; (800be34 <__d2b+0xb4>)
 800bde4:	18ed      	adds	r5, r5, r3
 800bde6:	182d      	adds	r5, r5, r0
 800bde8:	603d      	str	r5, [r7, #0]
 800bdea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdec:	1a24      	subs	r4, r4, r0
 800bdee:	601c      	str	r4, [r3, #0]
 800bdf0:	0030      	movs	r0, r6
 800bdf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bdf4:	2280      	movs	r2, #128	; 0x80
 800bdf6:	0352      	lsls	r2, r2, #13
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	e7d5      	b.n	800bda8 <__d2b+0x28>
 800bdfc:	6171      	str	r1, [r6, #20]
 800bdfe:	e7e7      	b.n	800bdd0 <__d2b+0x50>
 800be00:	a801      	add	r0, sp, #4
 800be02:	f7ff fce1 	bl	800b7c8 <__lo0bits>
 800be06:	9b01      	ldr	r3, [sp, #4]
 800be08:	2401      	movs	r4, #1
 800be0a:	6173      	str	r3, [r6, #20]
 800be0c:	3020      	adds	r0, #32
 800be0e:	e7e4      	b.n	800bdda <__d2b+0x5a>
 800be10:	4b09      	ldr	r3, [pc, #36]	; (800be38 <__d2b+0xb8>)
 800be12:	18c0      	adds	r0, r0, r3
 800be14:	4b09      	ldr	r3, [pc, #36]	; (800be3c <__d2b+0xbc>)
 800be16:	6038      	str	r0, [r7, #0]
 800be18:	18e3      	adds	r3, r4, r3
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	18f3      	adds	r3, r6, r3
 800be1e:	6958      	ldr	r0, [r3, #20]
 800be20:	f7ff fcb8 	bl	800b794 <__hi0bits>
 800be24:	0164      	lsls	r4, r4, #5
 800be26:	e7e0      	b.n	800bdea <__d2b+0x6a>
 800be28:	0800e59d 	.word	0x0800e59d
 800be2c:	0800e5ae 	.word	0x0800e5ae
 800be30:	0000030f 	.word	0x0000030f
 800be34:	fffffbcd 	.word	0xfffffbcd
 800be38:	fffffbce 	.word	0xfffffbce
 800be3c:	3fffffff 	.word	0x3fffffff

0800be40 <__ratio>:
 800be40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be42:	b087      	sub	sp, #28
 800be44:	000f      	movs	r7, r1
 800be46:	a904      	add	r1, sp, #16
 800be48:	0006      	movs	r6, r0
 800be4a:	f7ff ff4d 	bl	800bce8 <__b2d>
 800be4e:	9000      	str	r0, [sp, #0]
 800be50:	9101      	str	r1, [sp, #4]
 800be52:	9c00      	ldr	r4, [sp, #0]
 800be54:	9d01      	ldr	r5, [sp, #4]
 800be56:	0038      	movs	r0, r7
 800be58:	a905      	add	r1, sp, #20
 800be5a:	f7ff ff45 	bl	800bce8 <__b2d>
 800be5e:	9002      	str	r0, [sp, #8]
 800be60:	9103      	str	r1, [sp, #12]
 800be62:	9a02      	ldr	r2, [sp, #8]
 800be64:	9b03      	ldr	r3, [sp, #12]
 800be66:	6930      	ldr	r0, [r6, #16]
 800be68:	6939      	ldr	r1, [r7, #16]
 800be6a:	9e04      	ldr	r6, [sp, #16]
 800be6c:	1a40      	subs	r0, r0, r1
 800be6e:	9905      	ldr	r1, [sp, #20]
 800be70:	0140      	lsls	r0, r0, #5
 800be72:	1a71      	subs	r1, r6, r1
 800be74:	1841      	adds	r1, r0, r1
 800be76:	0508      	lsls	r0, r1, #20
 800be78:	2900      	cmp	r1, #0
 800be7a:	dd07      	ble.n	800be8c <__ratio+0x4c>
 800be7c:	9901      	ldr	r1, [sp, #4]
 800be7e:	1845      	adds	r5, r0, r1
 800be80:	0020      	movs	r0, r4
 800be82:	0029      	movs	r1, r5
 800be84:	f7f5 f95c 	bl	8001140 <__aeabi_ddiv>
 800be88:	b007      	add	sp, #28
 800be8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be8c:	9903      	ldr	r1, [sp, #12]
 800be8e:	1a0b      	subs	r3, r1, r0
 800be90:	e7f6      	b.n	800be80 <__ratio+0x40>

0800be92 <__copybits>:
 800be92:	b570      	push	{r4, r5, r6, lr}
 800be94:	0014      	movs	r4, r2
 800be96:	0005      	movs	r5, r0
 800be98:	3901      	subs	r1, #1
 800be9a:	6913      	ldr	r3, [r2, #16]
 800be9c:	1149      	asrs	r1, r1, #5
 800be9e:	3101      	adds	r1, #1
 800bea0:	0089      	lsls	r1, r1, #2
 800bea2:	3414      	adds	r4, #20
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	1841      	adds	r1, r0, r1
 800bea8:	18e3      	adds	r3, r4, r3
 800beaa:	42a3      	cmp	r3, r4
 800beac:	d80d      	bhi.n	800beca <__copybits+0x38>
 800beae:	0014      	movs	r4, r2
 800beb0:	3411      	adds	r4, #17
 800beb2:	2500      	movs	r5, #0
 800beb4:	429c      	cmp	r4, r3
 800beb6:	d803      	bhi.n	800bec0 <__copybits+0x2e>
 800beb8:	1a9b      	subs	r3, r3, r2
 800beba:	3b11      	subs	r3, #17
 800bebc:	089b      	lsrs	r3, r3, #2
 800bebe:	009d      	lsls	r5, r3, #2
 800bec0:	2300      	movs	r3, #0
 800bec2:	1940      	adds	r0, r0, r5
 800bec4:	4281      	cmp	r1, r0
 800bec6:	d803      	bhi.n	800bed0 <__copybits+0x3e>
 800bec8:	bd70      	pop	{r4, r5, r6, pc}
 800beca:	cc40      	ldmia	r4!, {r6}
 800becc:	c540      	stmia	r5!, {r6}
 800bece:	e7ec      	b.n	800beaa <__copybits+0x18>
 800bed0:	c008      	stmia	r0!, {r3}
 800bed2:	e7f7      	b.n	800bec4 <__copybits+0x32>

0800bed4 <__any_on>:
 800bed4:	0002      	movs	r2, r0
 800bed6:	6900      	ldr	r0, [r0, #16]
 800bed8:	b510      	push	{r4, lr}
 800beda:	3214      	adds	r2, #20
 800bedc:	114b      	asrs	r3, r1, #5
 800bede:	4298      	cmp	r0, r3
 800bee0:	db13      	blt.n	800bf0a <__any_on+0x36>
 800bee2:	dd0c      	ble.n	800befe <__any_on+0x2a>
 800bee4:	241f      	movs	r4, #31
 800bee6:	0008      	movs	r0, r1
 800bee8:	4020      	ands	r0, r4
 800beea:	4221      	tst	r1, r4
 800beec:	d007      	beq.n	800befe <__any_on+0x2a>
 800beee:	0099      	lsls	r1, r3, #2
 800bef0:	588c      	ldr	r4, [r1, r2]
 800bef2:	0021      	movs	r1, r4
 800bef4:	40c1      	lsrs	r1, r0
 800bef6:	4081      	lsls	r1, r0
 800bef8:	2001      	movs	r0, #1
 800befa:	428c      	cmp	r4, r1
 800befc:	d104      	bne.n	800bf08 <__any_on+0x34>
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	18d3      	adds	r3, r2, r3
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d803      	bhi.n	800bf0e <__any_on+0x3a>
 800bf06:	2000      	movs	r0, #0
 800bf08:	bd10      	pop	{r4, pc}
 800bf0a:	0003      	movs	r3, r0
 800bf0c:	e7f7      	b.n	800befe <__any_on+0x2a>
 800bf0e:	3b04      	subs	r3, #4
 800bf10:	6819      	ldr	r1, [r3, #0]
 800bf12:	2900      	cmp	r1, #0
 800bf14:	d0f5      	beq.n	800bf02 <__any_on+0x2e>
 800bf16:	2001      	movs	r0, #1
 800bf18:	e7f6      	b.n	800bf08 <__any_on+0x34>
	...

0800bf1c <sulp>:
 800bf1c:	b570      	push	{r4, r5, r6, lr}
 800bf1e:	0016      	movs	r6, r2
 800bf20:	000d      	movs	r5, r1
 800bf22:	f7ff fec5 	bl	800bcb0 <__ulp>
 800bf26:	2e00      	cmp	r6, #0
 800bf28:	d00d      	beq.n	800bf46 <sulp+0x2a>
 800bf2a:	236b      	movs	r3, #107	; 0x6b
 800bf2c:	006a      	lsls	r2, r5, #1
 800bf2e:	0d52      	lsrs	r2, r2, #21
 800bf30:	1a9b      	subs	r3, r3, r2
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	dd07      	ble.n	800bf46 <sulp+0x2a>
 800bf36:	2400      	movs	r4, #0
 800bf38:	4a03      	ldr	r2, [pc, #12]	; (800bf48 <sulp+0x2c>)
 800bf3a:	051b      	lsls	r3, r3, #20
 800bf3c:	189d      	adds	r5, r3, r2
 800bf3e:	002b      	movs	r3, r5
 800bf40:	0022      	movs	r2, r4
 800bf42:	f7f5 fcf7 	bl	8001934 <__aeabi_dmul>
 800bf46:	bd70      	pop	{r4, r5, r6, pc}
 800bf48:	3ff00000 	.word	0x3ff00000

0800bf4c <_strtod_l>:
 800bf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4e:	b0a1      	sub	sp, #132	; 0x84
 800bf50:	9219      	str	r2, [sp, #100]	; 0x64
 800bf52:	2200      	movs	r2, #0
 800bf54:	2600      	movs	r6, #0
 800bf56:	2700      	movs	r7, #0
 800bf58:	9004      	str	r0, [sp, #16]
 800bf5a:	9107      	str	r1, [sp, #28]
 800bf5c:	921c      	str	r2, [sp, #112]	; 0x70
 800bf5e:	911b      	str	r1, [sp, #108]	; 0x6c
 800bf60:	780a      	ldrb	r2, [r1, #0]
 800bf62:	2a2b      	cmp	r2, #43	; 0x2b
 800bf64:	d055      	beq.n	800c012 <_strtod_l+0xc6>
 800bf66:	d841      	bhi.n	800bfec <_strtod_l+0xa0>
 800bf68:	2a0d      	cmp	r2, #13
 800bf6a:	d83b      	bhi.n	800bfe4 <_strtod_l+0x98>
 800bf6c:	2a08      	cmp	r2, #8
 800bf6e:	d83b      	bhi.n	800bfe8 <_strtod_l+0x9c>
 800bf70:	2a00      	cmp	r2, #0
 800bf72:	d044      	beq.n	800bffe <_strtod_l+0xb2>
 800bf74:	2200      	movs	r2, #0
 800bf76:	920f      	str	r2, [sp, #60]	; 0x3c
 800bf78:	2100      	movs	r1, #0
 800bf7a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bf7c:	9109      	str	r1, [sp, #36]	; 0x24
 800bf7e:	782a      	ldrb	r2, [r5, #0]
 800bf80:	2a30      	cmp	r2, #48	; 0x30
 800bf82:	d000      	beq.n	800bf86 <_strtod_l+0x3a>
 800bf84:	e085      	b.n	800c092 <_strtod_l+0x146>
 800bf86:	786a      	ldrb	r2, [r5, #1]
 800bf88:	3120      	adds	r1, #32
 800bf8a:	438a      	bics	r2, r1
 800bf8c:	2a58      	cmp	r2, #88	; 0x58
 800bf8e:	d000      	beq.n	800bf92 <_strtod_l+0x46>
 800bf90:	e075      	b.n	800c07e <_strtod_l+0x132>
 800bf92:	9302      	str	r3, [sp, #8]
 800bf94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf96:	4a97      	ldr	r2, [pc, #604]	; (800c1f4 <_strtod_l+0x2a8>)
 800bf98:	9301      	str	r3, [sp, #4]
 800bf9a:	ab1c      	add	r3, sp, #112	; 0x70
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	9804      	ldr	r0, [sp, #16]
 800bfa0:	ab1d      	add	r3, sp, #116	; 0x74
 800bfa2:	a91b      	add	r1, sp, #108	; 0x6c
 800bfa4:	f001 f982 	bl	800d2ac <__gethex>
 800bfa8:	230f      	movs	r3, #15
 800bfaa:	0002      	movs	r2, r0
 800bfac:	401a      	ands	r2, r3
 800bfae:	0004      	movs	r4, r0
 800bfb0:	9205      	str	r2, [sp, #20]
 800bfb2:	4218      	tst	r0, r3
 800bfb4:	d005      	beq.n	800bfc2 <_strtod_l+0x76>
 800bfb6:	2a06      	cmp	r2, #6
 800bfb8:	d12d      	bne.n	800c016 <_strtod_l+0xca>
 800bfba:	1c6b      	adds	r3, r5, #1
 800bfbc:	931b      	str	r3, [sp, #108]	; 0x6c
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <_strtod_l+0x82>
 800bfc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bfcc:	6013      	str	r3, [r2, #0]
 800bfce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d01b      	beq.n	800c00c <_strtod_l+0xc0>
 800bfd4:	2380      	movs	r3, #128	; 0x80
 800bfd6:	0032      	movs	r2, r6
 800bfd8:	061b      	lsls	r3, r3, #24
 800bfda:	18fb      	adds	r3, r7, r3
 800bfdc:	0010      	movs	r0, r2
 800bfde:	0019      	movs	r1, r3
 800bfe0:	b021      	add	sp, #132	; 0x84
 800bfe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfe4:	2a20      	cmp	r2, #32
 800bfe6:	d1c5      	bne.n	800bf74 <_strtod_l+0x28>
 800bfe8:	3101      	adds	r1, #1
 800bfea:	e7b8      	b.n	800bf5e <_strtod_l+0x12>
 800bfec:	2a2d      	cmp	r2, #45	; 0x2d
 800bfee:	d1c1      	bne.n	800bf74 <_strtod_l+0x28>
 800bff0:	3a2c      	subs	r2, #44	; 0x2c
 800bff2:	920f      	str	r2, [sp, #60]	; 0x3c
 800bff4:	1c4a      	adds	r2, r1, #1
 800bff6:	921b      	str	r2, [sp, #108]	; 0x6c
 800bff8:	784a      	ldrb	r2, [r1, #1]
 800bffa:	2a00      	cmp	r2, #0
 800bffc:	d1bc      	bne.n	800bf78 <_strtod_l+0x2c>
 800bffe:	9b07      	ldr	r3, [sp, #28]
 800c000:	931b      	str	r3, [sp, #108]	; 0x6c
 800c002:	2300      	movs	r3, #0
 800c004:	930f      	str	r3, [sp, #60]	; 0x3c
 800c006:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1dd      	bne.n	800bfc8 <_strtod_l+0x7c>
 800c00c:	0032      	movs	r2, r6
 800c00e:	003b      	movs	r3, r7
 800c010:	e7e4      	b.n	800bfdc <_strtod_l+0x90>
 800c012:	2200      	movs	r2, #0
 800c014:	e7ed      	b.n	800bff2 <_strtod_l+0xa6>
 800c016:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c018:	2a00      	cmp	r2, #0
 800c01a:	d007      	beq.n	800c02c <_strtod_l+0xe0>
 800c01c:	2135      	movs	r1, #53	; 0x35
 800c01e:	a81e      	add	r0, sp, #120	; 0x78
 800c020:	f7ff ff37 	bl	800be92 <__copybits>
 800c024:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c026:	9804      	ldr	r0, [sp, #16]
 800c028:	f7ff fb00 	bl	800b62c <_Bfree>
 800c02c:	9805      	ldr	r0, [sp, #20]
 800c02e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c030:	3801      	subs	r0, #1
 800c032:	2804      	cmp	r0, #4
 800c034:	d806      	bhi.n	800c044 <_strtod_l+0xf8>
 800c036:	f7f4 f86f 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c03a:	0312      	.short	0x0312
 800c03c:	1e1c      	.short	0x1e1c
 800c03e:	12          	.byte	0x12
 800c03f:	00          	.byte	0x00
 800c040:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c042:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c044:	05e4      	lsls	r4, r4, #23
 800c046:	d502      	bpl.n	800c04e <_strtod_l+0x102>
 800c048:	2380      	movs	r3, #128	; 0x80
 800c04a:	061b      	lsls	r3, r3, #24
 800c04c:	431f      	orrs	r7, r3
 800c04e:	4b6a      	ldr	r3, [pc, #424]	; (800c1f8 <_strtod_l+0x2ac>)
 800c050:	423b      	tst	r3, r7
 800c052:	d1b6      	bne.n	800bfc2 <_strtod_l+0x76>
 800c054:	f7fe fac4 	bl	800a5e0 <__errno>
 800c058:	2322      	movs	r3, #34	; 0x22
 800c05a:	6003      	str	r3, [r0, #0]
 800c05c:	e7b1      	b.n	800bfc2 <_strtod_l+0x76>
 800c05e:	4967      	ldr	r1, [pc, #412]	; (800c1fc <_strtod_l+0x2b0>)
 800c060:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c062:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c064:	400a      	ands	r2, r1
 800c066:	4966      	ldr	r1, [pc, #408]	; (800c200 <_strtod_l+0x2b4>)
 800c068:	185b      	adds	r3, r3, r1
 800c06a:	051b      	lsls	r3, r3, #20
 800c06c:	431a      	orrs	r2, r3
 800c06e:	0017      	movs	r7, r2
 800c070:	e7e8      	b.n	800c044 <_strtod_l+0xf8>
 800c072:	4f61      	ldr	r7, [pc, #388]	; (800c1f8 <_strtod_l+0x2ac>)
 800c074:	e7e6      	b.n	800c044 <_strtod_l+0xf8>
 800c076:	2601      	movs	r6, #1
 800c078:	4f62      	ldr	r7, [pc, #392]	; (800c204 <_strtod_l+0x2b8>)
 800c07a:	4276      	negs	r6, r6
 800c07c:	e7e2      	b.n	800c044 <_strtod_l+0xf8>
 800c07e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	921b      	str	r2, [sp, #108]	; 0x6c
 800c084:	785b      	ldrb	r3, [r3, #1]
 800c086:	2b30      	cmp	r3, #48	; 0x30
 800c088:	d0f9      	beq.n	800c07e <_strtod_l+0x132>
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d099      	beq.n	800bfc2 <_strtod_l+0x76>
 800c08e:	2301      	movs	r3, #1
 800c090:	9309      	str	r3, [sp, #36]	; 0x24
 800c092:	2500      	movs	r5, #0
 800c094:	220a      	movs	r2, #10
 800c096:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c098:	950d      	str	r5, [sp, #52]	; 0x34
 800c09a:	9310      	str	r3, [sp, #64]	; 0x40
 800c09c:	9508      	str	r5, [sp, #32]
 800c09e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c0a0:	7804      	ldrb	r4, [r0, #0]
 800c0a2:	0023      	movs	r3, r4
 800c0a4:	3b30      	subs	r3, #48	; 0x30
 800c0a6:	b2d9      	uxtb	r1, r3
 800c0a8:	2909      	cmp	r1, #9
 800c0aa:	d927      	bls.n	800c0fc <_strtod_l+0x1b0>
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	4956      	ldr	r1, [pc, #344]	; (800c208 <_strtod_l+0x2bc>)
 800c0b0:	f001 f812 	bl	800d0d8 <strncmp>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d031      	beq.n	800c11c <_strtod_l+0x1d0>
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	0023      	movs	r3, r4
 800c0bc:	4684      	mov	ip, r0
 800c0be:	9a08      	ldr	r2, [sp, #32]
 800c0c0:	900c      	str	r0, [sp, #48]	; 0x30
 800c0c2:	9205      	str	r2, [sp, #20]
 800c0c4:	2220      	movs	r2, #32
 800c0c6:	0019      	movs	r1, r3
 800c0c8:	4391      	bics	r1, r2
 800c0ca:	000a      	movs	r2, r1
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	9106      	str	r1, [sp, #24]
 800c0d0:	2a45      	cmp	r2, #69	; 0x45
 800c0d2:	d000      	beq.n	800c0d6 <_strtod_l+0x18a>
 800c0d4:	e0c2      	b.n	800c25c <_strtod_l+0x310>
 800c0d6:	9b05      	ldr	r3, [sp, #20]
 800c0d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0da:	4303      	orrs	r3, r0
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	428b      	cmp	r3, r1
 800c0e0:	d08d      	beq.n	800bffe <_strtod_l+0xb2>
 800c0e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0e4:	9307      	str	r3, [sp, #28]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c0ea:	9b07      	ldr	r3, [sp, #28]
 800c0ec:	785b      	ldrb	r3, [r3, #1]
 800c0ee:	2b2b      	cmp	r3, #43	; 0x2b
 800c0f0:	d071      	beq.n	800c1d6 <_strtod_l+0x28a>
 800c0f2:	000c      	movs	r4, r1
 800c0f4:	2b2d      	cmp	r3, #45	; 0x2d
 800c0f6:	d174      	bne.n	800c1e2 <_strtod_l+0x296>
 800c0f8:	2401      	movs	r4, #1
 800c0fa:	e06d      	b.n	800c1d8 <_strtod_l+0x28c>
 800c0fc:	9908      	ldr	r1, [sp, #32]
 800c0fe:	2908      	cmp	r1, #8
 800c100:	dc09      	bgt.n	800c116 <_strtod_l+0x1ca>
 800c102:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c104:	4351      	muls	r1, r2
 800c106:	185b      	adds	r3, r3, r1
 800c108:	930d      	str	r3, [sp, #52]	; 0x34
 800c10a:	9b08      	ldr	r3, [sp, #32]
 800c10c:	3001      	adds	r0, #1
 800c10e:	3301      	adds	r3, #1
 800c110:	9308      	str	r3, [sp, #32]
 800c112:	901b      	str	r0, [sp, #108]	; 0x6c
 800c114:	e7c3      	b.n	800c09e <_strtod_l+0x152>
 800c116:	4355      	muls	r5, r2
 800c118:	195d      	adds	r5, r3, r5
 800c11a:	e7f6      	b.n	800c10a <_strtod_l+0x1be>
 800c11c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	921b      	str	r2, [sp, #108]	; 0x6c
 800c122:	9a08      	ldr	r2, [sp, #32]
 800c124:	785b      	ldrb	r3, [r3, #1]
 800c126:	2a00      	cmp	r2, #0
 800c128:	d03a      	beq.n	800c1a0 <_strtod_l+0x254>
 800c12a:	900c      	str	r0, [sp, #48]	; 0x30
 800c12c:	9205      	str	r2, [sp, #20]
 800c12e:	001a      	movs	r2, r3
 800c130:	3a30      	subs	r2, #48	; 0x30
 800c132:	2a09      	cmp	r2, #9
 800c134:	d912      	bls.n	800c15c <_strtod_l+0x210>
 800c136:	2201      	movs	r2, #1
 800c138:	4694      	mov	ip, r2
 800c13a:	e7c3      	b.n	800c0c4 <_strtod_l+0x178>
 800c13c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c13e:	3001      	adds	r0, #1
 800c140:	1c5a      	adds	r2, r3, #1
 800c142:	921b      	str	r2, [sp, #108]	; 0x6c
 800c144:	785b      	ldrb	r3, [r3, #1]
 800c146:	2b30      	cmp	r3, #48	; 0x30
 800c148:	d0f8      	beq.n	800c13c <_strtod_l+0x1f0>
 800c14a:	001a      	movs	r2, r3
 800c14c:	3a31      	subs	r2, #49	; 0x31
 800c14e:	2a08      	cmp	r2, #8
 800c150:	d83c      	bhi.n	800c1cc <_strtod_l+0x280>
 800c152:	900c      	str	r0, [sp, #48]	; 0x30
 800c154:	2000      	movs	r0, #0
 800c156:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c158:	9005      	str	r0, [sp, #20]
 800c15a:	9210      	str	r2, [sp, #64]	; 0x40
 800c15c:	001a      	movs	r2, r3
 800c15e:	1c41      	adds	r1, r0, #1
 800c160:	3a30      	subs	r2, #48	; 0x30
 800c162:	2b30      	cmp	r3, #48	; 0x30
 800c164:	d016      	beq.n	800c194 <_strtod_l+0x248>
 800c166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c168:	185b      	adds	r3, r3, r1
 800c16a:	930c      	str	r3, [sp, #48]	; 0x30
 800c16c:	9b05      	ldr	r3, [sp, #20]
 800c16e:	210a      	movs	r1, #10
 800c170:	469c      	mov	ip, r3
 800c172:	4484      	add	ip, r0
 800c174:	4563      	cmp	r3, ip
 800c176:	d115      	bne.n	800c1a4 <_strtod_l+0x258>
 800c178:	9905      	ldr	r1, [sp, #20]
 800c17a:	9b05      	ldr	r3, [sp, #20]
 800c17c:	3101      	adds	r1, #1
 800c17e:	1809      	adds	r1, r1, r0
 800c180:	181b      	adds	r3, r3, r0
 800c182:	9105      	str	r1, [sp, #20]
 800c184:	2b08      	cmp	r3, #8
 800c186:	dc19      	bgt.n	800c1bc <_strtod_l+0x270>
 800c188:	230a      	movs	r3, #10
 800c18a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c18c:	434b      	muls	r3, r1
 800c18e:	2100      	movs	r1, #0
 800c190:	18d3      	adds	r3, r2, r3
 800c192:	930d      	str	r3, [sp, #52]	; 0x34
 800c194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c196:	0008      	movs	r0, r1
 800c198:	1c5a      	adds	r2, r3, #1
 800c19a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c19c:	785b      	ldrb	r3, [r3, #1]
 800c19e:	e7c6      	b.n	800c12e <_strtod_l+0x1e2>
 800c1a0:	9808      	ldr	r0, [sp, #32]
 800c1a2:	e7d0      	b.n	800c146 <_strtod_l+0x1fa>
 800c1a4:	1c5c      	adds	r4, r3, #1
 800c1a6:	2b08      	cmp	r3, #8
 800c1a8:	dc04      	bgt.n	800c1b4 <_strtod_l+0x268>
 800c1aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1ac:	434b      	muls	r3, r1
 800c1ae:	930d      	str	r3, [sp, #52]	; 0x34
 800c1b0:	0023      	movs	r3, r4
 800c1b2:	e7df      	b.n	800c174 <_strtod_l+0x228>
 800c1b4:	2c10      	cmp	r4, #16
 800c1b6:	dcfb      	bgt.n	800c1b0 <_strtod_l+0x264>
 800c1b8:	434d      	muls	r5, r1
 800c1ba:	e7f9      	b.n	800c1b0 <_strtod_l+0x264>
 800c1bc:	9b05      	ldr	r3, [sp, #20]
 800c1be:	2100      	movs	r1, #0
 800c1c0:	2b10      	cmp	r3, #16
 800c1c2:	dce7      	bgt.n	800c194 <_strtod_l+0x248>
 800c1c4:	230a      	movs	r3, #10
 800c1c6:	435d      	muls	r5, r3
 800c1c8:	1955      	adds	r5, r2, r5
 800c1ca:	e7e3      	b.n	800c194 <_strtod_l+0x248>
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	920c      	str	r2, [sp, #48]	; 0x30
 800c1d0:	9205      	str	r2, [sp, #20]
 800c1d2:	3201      	adds	r2, #1
 800c1d4:	e7b0      	b.n	800c138 <_strtod_l+0x1ec>
 800c1d6:	2400      	movs	r4, #0
 800c1d8:	9b07      	ldr	r3, [sp, #28]
 800c1da:	3302      	adds	r3, #2
 800c1dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800c1de:	9b07      	ldr	r3, [sp, #28]
 800c1e0:	789b      	ldrb	r3, [r3, #2]
 800c1e2:	001a      	movs	r2, r3
 800c1e4:	3a30      	subs	r2, #48	; 0x30
 800c1e6:	2a09      	cmp	r2, #9
 800c1e8:	d914      	bls.n	800c214 <_strtod_l+0x2c8>
 800c1ea:	9a07      	ldr	r2, [sp, #28]
 800c1ec:	921b      	str	r2, [sp, #108]	; 0x6c
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	e033      	b.n	800c25a <_strtod_l+0x30e>
 800c1f2:	46c0      	nop			; (mov r8, r8)
 800c1f4:	0800e708 	.word	0x0800e708
 800c1f8:	7ff00000 	.word	0x7ff00000
 800c1fc:	ffefffff 	.word	0xffefffff
 800c200:	00000433 	.word	0x00000433
 800c204:	7fffffff 	.word	0x7fffffff
 800c208:	0800e704 	.word	0x0800e704
 800c20c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c20e:	1c5a      	adds	r2, r3, #1
 800c210:	921b      	str	r2, [sp, #108]	; 0x6c
 800c212:	785b      	ldrb	r3, [r3, #1]
 800c214:	2b30      	cmp	r3, #48	; 0x30
 800c216:	d0f9      	beq.n	800c20c <_strtod_l+0x2c0>
 800c218:	2200      	movs	r2, #0
 800c21a:	9206      	str	r2, [sp, #24]
 800c21c:	001a      	movs	r2, r3
 800c21e:	3a31      	subs	r2, #49	; 0x31
 800c220:	2a08      	cmp	r2, #8
 800c222:	d81b      	bhi.n	800c25c <_strtod_l+0x310>
 800c224:	3b30      	subs	r3, #48	; 0x30
 800c226:	930e      	str	r3, [sp, #56]	; 0x38
 800c228:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c22a:	9306      	str	r3, [sp, #24]
 800c22c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c22e:	1c59      	adds	r1, r3, #1
 800c230:	911b      	str	r1, [sp, #108]	; 0x6c
 800c232:	785b      	ldrb	r3, [r3, #1]
 800c234:	001a      	movs	r2, r3
 800c236:	3a30      	subs	r2, #48	; 0x30
 800c238:	2a09      	cmp	r2, #9
 800c23a:	d93a      	bls.n	800c2b2 <_strtod_l+0x366>
 800c23c:	9a06      	ldr	r2, [sp, #24]
 800c23e:	1a8a      	subs	r2, r1, r2
 800c240:	49b2      	ldr	r1, [pc, #712]	; (800c50c <_strtod_l+0x5c0>)
 800c242:	9106      	str	r1, [sp, #24]
 800c244:	2a08      	cmp	r2, #8
 800c246:	dc04      	bgt.n	800c252 <_strtod_l+0x306>
 800c248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c24a:	9206      	str	r2, [sp, #24]
 800c24c:	428a      	cmp	r2, r1
 800c24e:	dd00      	ble.n	800c252 <_strtod_l+0x306>
 800c250:	9106      	str	r1, [sp, #24]
 800c252:	2c00      	cmp	r4, #0
 800c254:	d002      	beq.n	800c25c <_strtod_l+0x310>
 800c256:	9a06      	ldr	r2, [sp, #24]
 800c258:	4252      	negs	r2, r2
 800c25a:	9206      	str	r2, [sp, #24]
 800c25c:	9a05      	ldr	r2, [sp, #20]
 800c25e:	2a00      	cmp	r2, #0
 800c260:	d14d      	bne.n	800c2fe <_strtod_l+0x3b2>
 800c262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c264:	4310      	orrs	r0, r2
 800c266:	d000      	beq.n	800c26a <_strtod_l+0x31e>
 800c268:	e6ab      	b.n	800bfc2 <_strtod_l+0x76>
 800c26a:	4662      	mov	r2, ip
 800c26c:	2a00      	cmp	r2, #0
 800c26e:	d000      	beq.n	800c272 <_strtod_l+0x326>
 800c270:	e6c5      	b.n	800bffe <_strtod_l+0xb2>
 800c272:	2b69      	cmp	r3, #105	; 0x69
 800c274:	d027      	beq.n	800c2c6 <_strtod_l+0x37a>
 800c276:	dc23      	bgt.n	800c2c0 <_strtod_l+0x374>
 800c278:	2b49      	cmp	r3, #73	; 0x49
 800c27a:	d024      	beq.n	800c2c6 <_strtod_l+0x37a>
 800c27c:	2b4e      	cmp	r3, #78	; 0x4e
 800c27e:	d000      	beq.n	800c282 <_strtod_l+0x336>
 800c280:	e6bd      	b.n	800bffe <_strtod_l+0xb2>
 800c282:	49a3      	ldr	r1, [pc, #652]	; (800c510 <_strtod_l+0x5c4>)
 800c284:	a81b      	add	r0, sp, #108	; 0x6c
 800c286:	f001 fa47 	bl	800d718 <__match>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	d100      	bne.n	800c290 <_strtod_l+0x344>
 800c28e:	e6b6      	b.n	800bffe <_strtod_l+0xb2>
 800c290:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	2b28      	cmp	r3, #40	; 0x28
 800c296:	d12c      	bne.n	800c2f2 <_strtod_l+0x3a6>
 800c298:	499e      	ldr	r1, [pc, #632]	; (800c514 <_strtod_l+0x5c8>)
 800c29a:	aa1e      	add	r2, sp, #120	; 0x78
 800c29c:	a81b      	add	r0, sp, #108	; 0x6c
 800c29e:	f001 fa4f 	bl	800d740 <__hexnan>
 800c2a2:	2805      	cmp	r0, #5
 800c2a4:	d125      	bne.n	800c2f2 <_strtod_l+0x3a6>
 800c2a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c2a8:	4a9b      	ldr	r2, [pc, #620]	; (800c518 <_strtod_l+0x5cc>)
 800c2aa:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c2ac:	431a      	orrs	r2, r3
 800c2ae:	0017      	movs	r7, r2
 800c2b0:	e687      	b.n	800bfc2 <_strtod_l+0x76>
 800c2b2:	220a      	movs	r2, #10
 800c2b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c2b6:	434a      	muls	r2, r1
 800c2b8:	18d2      	adds	r2, r2, r3
 800c2ba:	3a30      	subs	r2, #48	; 0x30
 800c2bc:	920e      	str	r2, [sp, #56]	; 0x38
 800c2be:	e7b5      	b.n	800c22c <_strtod_l+0x2e0>
 800c2c0:	2b6e      	cmp	r3, #110	; 0x6e
 800c2c2:	d0de      	beq.n	800c282 <_strtod_l+0x336>
 800c2c4:	e69b      	b.n	800bffe <_strtod_l+0xb2>
 800c2c6:	4995      	ldr	r1, [pc, #596]	; (800c51c <_strtod_l+0x5d0>)
 800c2c8:	a81b      	add	r0, sp, #108	; 0x6c
 800c2ca:	f001 fa25 	bl	800d718 <__match>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d100      	bne.n	800c2d4 <_strtod_l+0x388>
 800c2d2:	e694      	b.n	800bffe <_strtod_l+0xb2>
 800c2d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2d6:	4992      	ldr	r1, [pc, #584]	; (800c520 <_strtod_l+0x5d4>)
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	a81b      	add	r0, sp, #108	; 0x6c
 800c2dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2de:	f001 fa1b 	bl	800d718 <__match>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d102      	bne.n	800c2ec <_strtod_l+0x3a0>
 800c2e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2ec:	2600      	movs	r6, #0
 800c2ee:	4f8a      	ldr	r7, [pc, #552]	; (800c518 <_strtod_l+0x5cc>)
 800c2f0:	e667      	b.n	800bfc2 <_strtod_l+0x76>
 800c2f2:	488c      	ldr	r0, [pc, #560]	; (800c524 <_strtod_l+0x5d8>)
 800c2f4:	f000 ff1e 	bl	800d134 <nan>
 800c2f8:	0006      	movs	r6, r0
 800c2fa:	000f      	movs	r7, r1
 800c2fc:	e661      	b.n	800bfc2 <_strtod_l+0x76>
 800c2fe:	9b06      	ldr	r3, [sp, #24]
 800c300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c302:	1a9b      	subs	r3, r3, r2
 800c304:	9309      	str	r3, [sp, #36]	; 0x24
 800c306:	9b08      	ldr	r3, [sp, #32]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <_strtod_l+0x3c4>
 800c30c:	9b05      	ldr	r3, [sp, #20]
 800c30e:	9308      	str	r3, [sp, #32]
 800c310:	9c05      	ldr	r4, [sp, #20]
 800c312:	2c10      	cmp	r4, #16
 800c314:	dd00      	ble.n	800c318 <_strtod_l+0x3cc>
 800c316:	2410      	movs	r4, #16
 800c318:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c31a:	f7f6 f9d3 	bl	80026c4 <__aeabi_ui2d>
 800c31e:	9b05      	ldr	r3, [sp, #20]
 800c320:	0006      	movs	r6, r0
 800c322:	000f      	movs	r7, r1
 800c324:	2b09      	cmp	r3, #9
 800c326:	dd15      	ble.n	800c354 <_strtod_l+0x408>
 800c328:	0022      	movs	r2, r4
 800c32a:	4b7f      	ldr	r3, [pc, #508]	; (800c528 <_strtod_l+0x5dc>)
 800c32c:	3a09      	subs	r2, #9
 800c32e:	00d2      	lsls	r2, r2, #3
 800c330:	189b      	adds	r3, r3, r2
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f7f5 fafd 	bl	8001934 <__aeabi_dmul>
 800c33a:	0006      	movs	r6, r0
 800c33c:	0028      	movs	r0, r5
 800c33e:	000f      	movs	r7, r1
 800c340:	f7f6 f9c0 	bl	80026c4 <__aeabi_ui2d>
 800c344:	0002      	movs	r2, r0
 800c346:	000b      	movs	r3, r1
 800c348:	0030      	movs	r0, r6
 800c34a:	0039      	movs	r1, r7
 800c34c:	f7f4 fb98 	bl	8000a80 <__aeabi_dadd>
 800c350:	0006      	movs	r6, r0
 800c352:	000f      	movs	r7, r1
 800c354:	9b05      	ldr	r3, [sp, #20]
 800c356:	2b0f      	cmp	r3, #15
 800c358:	dc39      	bgt.n	800c3ce <_strtod_l+0x482>
 800c35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d100      	bne.n	800c362 <_strtod_l+0x416>
 800c360:	e62f      	b.n	800bfc2 <_strtod_l+0x76>
 800c362:	dd24      	ble.n	800c3ae <_strtod_l+0x462>
 800c364:	2b16      	cmp	r3, #22
 800c366:	dc09      	bgt.n	800c37c <_strtod_l+0x430>
 800c368:	496f      	ldr	r1, [pc, #444]	; (800c528 <_strtod_l+0x5dc>)
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	18c9      	adds	r1, r1, r3
 800c36e:	0032      	movs	r2, r6
 800c370:	6808      	ldr	r0, [r1, #0]
 800c372:	6849      	ldr	r1, [r1, #4]
 800c374:	003b      	movs	r3, r7
 800c376:	f7f5 fadd 	bl	8001934 <__aeabi_dmul>
 800c37a:	e7bd      	b.n	800c2f8 <_strtod_l+0x3ac>
 800c37c:	2325      	movs	r3, #37	; 0x25
 800c37e:	9a05      	ldr	r2, [sp, #20]
 800c380:	1a9b      	subs	r3, r3, r2
 800c382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c384:	4293      	cmp	r3, r2
 800c386:	db22      	blt.n	800c3ce <_strtod_l+0x482>
 800c388:	240f      	movs	r4, #15
 800c38a:	9b05      	ldr	r3, [sp, #20]
 800c38c:	4d66      	ldr	r5, [pc, #408]	; (800c528 <_strtod_l+0x5dc>)
 800c38e:	1ae4      	subs	r4, r4, r3
 800c390:	00e1      	lsls	r1, r4, #3
 800c392:	1869      	adds	r1, r5, r1
 800c394:	0032      	movs	r2, r6
 800c396:	6808      	ldr	r0, [r1, #0]
 800c398:	6849      	ldr	r1, [r1, #4]
 800c39a:	003b      	movs	r3, r7
 800c39c:	f7f5 faca 	bl	8001934 <__aeabi_dmul>
 800c3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a2:	1b1c      	subs	r4, r3, r4
 800c3a4:	00e4      	lsls	r4, r4, #3
 800c3a6:	192d      	adds	r5, r5, r4
 800c3a8:	682a      	ldr	r2, [r5, #0]
 800c3aa:	686b      	ldr	r3, [r5, #4]
 800c3ac:	e7e3      	b.n	800c376 <_strtod_l+0x42a>
 800c3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b0:	3316      	adds	r3, #22
 800c3b2:	db0c      	blt.n	800c3ce <_strtod_l+0x482>
 800c3b4:	9906      	ldr	r1, [sp, #24]
 800c3b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3b8:	4b5b      	ldr	r3, [pc, #364]	; (800c528 <_strtod_l+0x5dc>)
 800c3ba:	1a52      	subs	r2, r2, r1
 800c3bc:	00d2      	lsls	r2, r2, #3
 800c3be:	189b      	adds	r3, r3, r2
 800c3c0:	0030      	movs	r0, r6
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	0039      	movs	r1, r7
 800c3c8:	f7f4 feba 	bl	8001140 <__aeabi_ddiv>
 800c3cc:	e794      	b.n	800c2f8 <_strtod_l+0x3ac>
 800c3ce:	9b05      	ldr	r3, [sp, #20]
 800c3d0:	1b1c      	subs	r4, r3, r4
 800c3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d4:	18e4      	adds	r4, r4, r3
 800c3d6:	2c00      	cmp	r4, #0
 800c3d8:	dd72      	ble.n	800c4c0 <_strtod_l+0x574>
 800c3da:	220f      	movs	r2, #15
 800c3dc:	0023      	movs	r3, r4
 800c3de:	4013      	ands	r3, r2
 800c3e0:	4214      	tst	r4, r2
 800c3e2:	d00a      	beq.n	800c3fa <_strtod_l+0x4ae>
 800c3e4:	4950      	ldr	r1, [pc, #320]	; (800c528 <_strtod_l+0x5dc>)
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	18c9      	adds	r1, r1, r3
 800c3ea:	0032      	movs	r2, r6
 800c3ec:	6808      	ldr	r0, [r1, #0]
 800c3ee:	6849      	ldr	r1, [r1, #4]
 800c3f0:	003b      	movs	r3, r7
 800c3f2:	f7f5 fa9f 	bl	8001934 <__aeabi_dmul>
 800c3f6:	0006      	movs	r6, r0
 800c3f8:	000f      	movs	r7, r1
 800c3fa:	230f      	movs	r3, #15
 800c3fc:	439c      	bics	r4, r3
 800c3fe:	d04a      	beq.n	800c496 <_strtod_l+0x54a>
 800c400:	3326      	adds	r3, #38	; 0x26
 800c402:	33ff      	adds	r3, #255	; 0xff
 800c404:	429c      	cmp	r4, r3
 800c406:	dd22      	ble.n	800c44e <_strtod_l+0x502>
 800c408:	2300      	movs	r3, #0
 800c40a:	9305      	str	r3, [sp, #20]
 800c40c:	9306      	str	r3, [sp, #24]
 800c40e:	930d      	str	r3, [sp, #52]	; 0x34
 800c410:	9308      	str	r3, [sp, #32]
 800c412:	2322      	movs	r3, #34	; 0x22
 800c414:	2600      	movs	r6, #0
 800c416:	9a04      	ldr	r2, [sp, #16]
 800c418:	4f3f      	ldr	r7, [pc, #252]	; (800c518 <_strtod_l+0x5cc>)
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c41e:	42b3      	cmp	r3, r6
 800c420:	d100      	bne.n	800c424 <_strtod_l+0x4d8>
 800c422:	e5ce      	b.n	800bfc2 <_strtod_l+0x76>
 800c424:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c426:	9804      	ldr	r0, [sp, #16]
 800c428:	f7ff f900 	bl	800b62c <_Bfree>
 800c42c:	9908      	ldr	r1, [sp, #32]
 800c42e:	9804      	ldr	r0, [sp, #16]
 800c430:	f7ff f8fc 	bl	800b62c <_Bfree>
 800c434:	9906      	ldr	r1, [sp, #24]
 800c436:	9804      	ldr	r0, [sp, #16]
 800c438:	f7ff f8f8 	bl	800b62c <_Bfree>
 800c43c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c43e:	9804      	ldr	r0, [sp, #16]
 800c440:	f7ff f8f4 	bl	800b62c <_Bfree>
 800c444:	9905      	ldr	r1, [sp, #20]
 800c446:	9804      	ldr	r0, [sp, #16]
 800c448:	f7ff f8f0 	bl	800b62c <_Bfree>
 800c44c:	e5b9      	b.n	800bfc2 <_strtod_l+0x76>
 800c44e:	2300      	movs	r3, #0
 800c450:	0030      	movs	r0, r6
 800c452:	0039      	movs	r1, r7
 800c454:	4d35      	ldr	r5, [pc, #212]	; (800c52c <_strtod_l+0x5e0>)
 800c456:	1124      	asrs	r4, r4, #4
 800c458:	9307      	str	r3, [sp, #28]
 800c45a:	2c01      	cmp	r4, #1
 800c45c:	dc1e      	bgt.n	800c49c <_strtod_l+0x550>
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d001      	beq.n	800c466 <_strtod_l+0x51a>
 800c462:	0006      	movs	r6, r0
 800c464:	000f      	movs	r7, r1
 800c466:	4b32      	ldr	r3, [pc, #200]	; (800c530 <_strtod_l+0x5e4>)
 800c468:	9a07      	ldr	r2, [sp, #28]
 800c46a:	18ff      	adds	r7, r7, r3
 800c46c:	4b2f      	ldr	r3, [pc, #188]	; (800c52c <_strtod_l+0x5e0>)
 800c46e:	00d2      	lsls	r2, r2, #3
 800c470:	189d      	adds	r5, r3, r2
 800c472:	6828      	ldr	r0, [r5, #0]
 800c474:	6869      	ldr	r1, [r5, #4]
 800c476:	0032      	movs	r2, r6
 800c478:	003b      	movs	r3, r7
 800c47a:	f7f5 fa5b 	bl	8001934 <__aeabi_dmul>
 800c47e:	4b26      	ldr	r3, [pc, #152]	; (800c518 <_strtod_l+0x5cc>)
 800c480:	4a2c      	ldr	r2, [pc, #176]	; (800c534 <_strtod_l+0x5e8>)
 800c482:	0006      	movs	r6, r0
 800c484:	400b      	ands	r3, r1
 800c486:	4293      	cmp	r3, r2
 800c488:	d8be      	bhi.n	800c408 <_strtod_l+0x4bc>
 800c48a:	4a2b      	ldr	r2, [pc, #172]	; (800c538 <_strtod_l+0x5ec>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d913      	bls.n	800c4b8 <_strtod_l+0x56c>
 800c490:	2601      	movs	r6, #1
 800c492:	4f2a      	ldr	r7, [pc, #168]	; (800c53c <_strtod_l+0x5f0>)
 800c494:	4276      	negs	r6, r6
 800c496:	2300      	movs	r3, #0
 800c498:	9307      	str	r3, [sp, #28]
 800c49a:	e088      	b.n	800c5ae <_strtod_l+0x662>
 800c49c:	2201      	movs	r2, #1
 800c49e:	4214      	tst	r4, r2
 800c4a0:	d004      	beq.n	800c4ac <_strtod_l+0x560>
 800c4a2:	682a      	ldr	r2, [r5, #0]
 800c4a4:	686b      	ldr	r3, [r5, #4]
 800c4a6:	f7f5 fa45 	bl	8001934 <__aeabi_dmul>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	9a07      	ldr	r2, [sp, #28]
 800c4ae:	1064      	asrs	r4, r4, #1
 800c4b0:	3201      	adds	r2, #1
 800c4b2:	9207      	str	r2, [sp, #28]
 800c4b4:	3508      	adds	r5, #8
 800c4b6:	e7d0      	b.n	800c45a <_strtod_l+0x50e>
 800c4b8:	23d4      	movs	r3, #212	; 0xd4
 800c4ba:	049b      	lsls	r3, r3, #18
 800c4bc:	18cf      	adds	r7, r1, r3
 800c4be:	e7ea      	b.n	800c496 <_strtod_l+0x54a>
 800c4c0:	2c00      	cmp	r4, #0
 800c4c2:	d0e8      	beq.n	800c496 <_strtod_l+0x54a>
 800c4c4:	4264      	negs	r4, r4
 800c4c6:	230f      	movs	r3, #15
 800c4c8:	0022      	movs	r2, r4
 800c4ca:	401a      	ands	r2, r3
 800c4cc:	421c      	tst	r4, r3
 800c4ce:	d00a      	beq.n	800c4e6 <_strtod_l+0x59a>
 800c4d0:	4b15      	ldr	r3, [pc, #84]	; (800c528 <_strtod_l+0x5dc>)
 800c4d2:	00d2      	lsls	r2, r2, #3
 800c4d4:	189b      	adds	r3, r3, r2
 800c4d6:	0030      	movs	r0, r6
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	0039      	movs	r1, r7
 800c4de:	f7f4 fe2f 	bl	8001140 <__aeabi_ddiv>
 800c4e2:	0006      	movs	r6, r0
 800c4e4:	000f      	movs	r7, r1
 800c4e6:	1124      	asrs	r4, r4, #4
 800c4e8:	d0d5      	beq.n	800c496 <_strtod_l+0x54a>
 800c4ea:	2c1f      	cmp	r4, #31
 800c4ec:	dd28      	ble.n	800c540 <_strtod_l+0x5f4>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	9305      	str	r3, [sp, #20]
 800c4f2:	9306      	str	r3, [sp, #24]
 800c4f4:	930d      	str	r3, [sp, #52]	; 0x34
 800c4f6:	9308      	str	r3, [sp, #32]
 800c4f8:	2322      	movs	r3, #34	; 0x22
 800c4fa:	9a04      	ldr	r2, [sp, #16]
 800c4fc:	2600      	movs	r6, #0
 800c4fe:	6013      	str	r3, [r2, #0]
 800c500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c502:	2700      	movs	r7, #0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d18d      	bne.n	800c424 <_strtod_l+0x4d8>
 800c508:	e55b      	b.n	800bfc2 <_strtod_l+0x76>
 800c50a:	46c0      	nop			; (mov r8, r8)
 800c50c:	00004e1f 	.word	0x00004e1f
 800c510:	0800e4f5 	.word	0x0800e4f5
 800c514:	0800e71c 	.word	0x0800e71c
 800c518:	7ff00000 	.word	0x7ff00000
 800c51c:	0800e4ed 	.word	0x0800e4ed
 800c520:	0800e524 	.word	0x0800e524
 800c524:	0800e8ad 	.word	0x0800e8ad
 800c528:	0800e630 	.word	0x0800e630
 800c52c:	0800e608 	.word	0x0800e608
 800c530:	fcb00000 	.word	0xfcb00000
 800c534:	7ca00000 	.word	0x7ca00000
 800c538:	7c900000 	.word	0x7c900000
 800c53c:	7fefffff 	.word	0x7fefffff
 800c540:	2310      	movs	r3, #16
 800c542:	0022      	movs	r2, r4
 800c544:	401a      	ands	r2, r3
 800c546:	9207      	str	r2, [sp, #28]
 800c548:	421c      	tst	r4, r3
 800c54a:	d001      	beq.n	800c550 <_strtod_l+0x604>
 800c54c:	335a      	adds	r3, #90	; 0x5a
 800c54e:	9307      	str	r3, [sp, #28]
 800c550:	0030      	movs	r0, r6
 800c552:	0039      	movs	r1, r7
 800c554:	2300      	movs	r3, #0
 800c556:	4dc4      	ldr	r5, [pc, #784]	; (800c868 <_strtod_l+0x91c>)
 800c558:	2201      	movs	r2, #1
 800c55a:	4214      	tst	r4, r2
 800c55c:	d004      	beq.n	800c568 <_strtod_l+0x61c>
 800c55e:	682a      	ldr	r2, [r5, #0]
 800c560:	686b      	ldr	r3, [r5, #4]
 800c562:	f7f5 f9e7 	bl	8001934 <__aeabi_dmul>
 800c566:	2301      	movs	r3, #1
 800c568:	1064      	asrs	r4, r4, #1
 800c56a:	3508      	adds	r5, #8
 800c56c:	2c00      	cmp	r4, #0
 800c56e:	d1f3      	bne.n	800c558 <_strtod_l+0x60c>
 800c570:	2b00      	cmp	r3, #0
 800c572:	d001      	beq.n	800c578 <_strtod_l+0x62c>
 800c574:	0006      	movs	r6, r0
 800c576:	000f      	movs	r7, r1
 800c578:	9b07      	ldr	r3, [sp, #28]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00f      	beq.n	800c59e <_strtod_l+0x652>
 800c57e:	236b      	movs	r3, #107	; 0x6b
 800c580:	007a      	lsls	r2, r7, #1
 800c582:	0d52      	lsrs	r2, r2, #21
 800c584:	0039      	movs	r1, r7
 800c586:	1a9b      	subs	r3, r3, r2
 800c588:	2b00      	cmp	r3, #0
 800c58a:	dd08      	ble.n	800c59e <_strtod_l+0x652>
 800c58c:	2b1f      	cmp	r3, #31
 800c58e:	dc00      	bgt.n	800c592 <_strtod_l+0x646>
 800c590:	e121      	b.n	800c7d6 <_strtod_l+0x88a>
 800c592:	2600      	movs	r6, #0
 800c594:	2b34      	cmp	r3, #52	; 0x34
 800c596:	dc00      	bgt.n	800c59a <_strtod_l+0x64e>
 800c598:	e116      	b.n	800c7c8 <_strtod_l+0x87c>
 800c59a:	27dc      	movs	r7, #220	; 0xdc
 800c59c:	04bf      	lsls	r7, r7, #18
 800c59e:	2200      	movs	r2, #0
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	0030      	movs	r0, r6
 800c5a4:	0039      	movs	r1, r7
 800c5a6:	f7f3 ff51 	bl	800044c <__aeabi_dcmpeq>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d19f      	bne.n	800c4ee <_strtod_l+0x5a2>
 800c5ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5b0:	9a08      	ldr	r2, [sp, #32]
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c5b6:	9b05      	ldr	r3, [sp, #20]
 800c5b8:	9804      	ldr	r0, [sp, #16]
 800c5ba:	f7ff f89f 	bl	800b6fc <__s2b>
 800c5be:	900d      	str	r0, [sp, #52]	; 0x34
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d100      	bne.n	800c5c6 <_strtod_l+0x67a>
 800c5c4:	e720      	b.n	800c408 <_strtod_l+0x4bc>
 800c5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c8:	9906      	ldr	r1, [sp, #24]
 800c5ca:	17da      	asrs	r2, r3, #31
 800c5cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5ce:	1a5b      	subs	r3, r3, r1
 800c5d0:	401a      	ands	r2, r3
 800c5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d4:	9215      	str	r2, [sp, #84]	; 0x54
 800c5d6:	43db      	mvns	r3, r3
 800c5d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5da:	17db      	asrs	r3, r3, #31
 800c5dc:	401a      	ands	r2, r3
 800c5de:	2300      	movs	r3, #0
 800c5e0:	9218      	str	r2, [sp, #96]	; 0x60
 800c5e2:	9305      	str	r3, [sp, #20]
 800c5e4:	9306      	str	r3, [sp, #24]
 800c5e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5e8:	9804      	ldr	r0, [sp, #16]
 800c5ea:	6859      	ldr	r1, [r3, #4]
 800c5ec:	f7fe ffda 	bl	800b5a4 <_Balloc>
 800c5f0:	9008      	str	r0, [sp, #32]
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d100      	bne.n	800c5f8 <_strtod_l+0x6ac>
 800c5f6:	e70c      	b.n	800c412 <_strtod_l+0x4c6>
 800c5f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5fa:	300c      	adds	r0, #12
 800c5fc:	0019      	movs	r1, r3
 800c5fe:	691a      	ldr	r2, [r3, #16]
 800c600:	310c      	adds	r1, #12
 800c602:	3202      	adds	r2, #2
 800c604:	0092      	lsls	r2, r2, #2
 800c606:	f000 fd8b 	bl	800d120 <memcpy>
 800c60a:	ab1e      	add	r3, sp, #120	; 0x78
 800c60c:	9301      	str	r3, [sp, #4]
 800c60e:	ab1d      	add	r3, sp, #116	; 0x74
 800c610:	9300      	str	r3, [sp, #0]
 800c612:	0032      	movs	r2, r6
 800c614:	003b      	movs	r3, r7
 800c616:	9804      	ldr	r0, [sp, #16]
 800c618:	9610      	str	r6, [sp, #64]	; 0x40
 800c61a:	9711      	str	r7, [sp, #68]	; 0x44
 800c61c:	f7ff fbb0 	bl	800bd80 <__d2b>
 800c620:	901c      	str	r0, [sp, #112]	; 0x70
 800c622:	2800      	cmp	r0, #0
 800c624:	d100      	bne.n	800c628 <_strtod_l+0x6dc>
 800c626:	e6f4      	b.n	800c412 <_strtod_l+0x4c6>
 800c628:	2101      	movs	r1, #1
 800c62a:	9804      	ldr	r0, [sp, #16]
 800c62c:	f7ff f8fa 	bl	800b824 <__i2b>
 800c630:	9006      	str	r0, [sp, #24]
 800c632:	2800      	cmp	r0, #0
 800c634:	d100      	bne.n	800c638 <_strtod_l+0x6ec>
 800c636:	e6ec      	b.n	800c412 <_strtod_l+0x4c6>
 800c638:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c63a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c63c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c63e:	1ad4      	subs	r4, r2, r3
 800c640:	2b00      	cmp	r3, #0
 800c642:	db01      	blt.n	800c648 <_strtod_l+0x6fc>
 800c644:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800c646:	195d      	adds	r5, r3, r5
 800c648:	9907      	ldr	r1, [sp, #28]
 800c64a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c64c:	1a5b      	subs	r3, r3, r1
 800c64e:	2136      	movs	r1, #54	; 0x36
 800c650:	189b      	adds	r3, r3, r2
 800c652:	1a8a      	subs	r2, r1, r2
 800c654:	4985      	ldr	r1, [pc, #532]	; (800c86c <_strtod_l+0x920>)
 800c656:	2001      	movs	r0, #1
 800c658:	468c      	mov	ip, r1
 800c65a:	2100      	movs	r1, #0
 800c65c:	3b01      	subs	r3, #1
 800c65e:	9114      	str	r1, [sp, #80]	; 0x50
 800c660:	9012      	str	r0, [sp, #72]	; 0x48
 800c662:	4563      	cmp	r3, ip
 800c664:	da07      	bge.n	800c676 <_strtod_l+0x72a>
 800c666:	4661      	mov	r1, ip
 800c668:	1ac9      	subs	r1, r1, r3
 800c66a:	1a52      	subs	r2, r2, r1
 800c66c:	291f      	cmp	r1, #31
 800c66e:	dd00      	ble.n	800c672 <_strtod_l+0x726>
 800c670:	e0b6      	b.n	800c7e0 <_strtod_l+0x894>
 800c672:	4088      	lsls	r0, r1
 800c674:	9012      	str	r0, [sp, #72]	; 0x48
 800c676:	18ab      	adds	r3, r5, r2
 800c678:	930c      	str	r3, [sp, #48]	; 0x30
 800c67a:	18a4      	adds	r4, r4, r2
 800c67c:	9b07      	ldr	r3, [sp, #28]
 800c67e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c680:	191c      	adds	r4, r3, r4
 800c682:	002b      	movs	r3, r5
 800c684:	4295      	cmp	r5, r2
 800c686:	dd00      	ble.n	800c68a <_strtod_l+0x73e>
 800c688:	0013      	movs	r3, r2
 800c68a:	42a3      	cmp	r3, r4
 800c68c:	dd00      	ble.n	800c690 <_strtod_l+0x744>
 800c68e:	0023      	movs	r3, r4
 800c690:	2b00      	cmp	r3, #0
 800c692:	dd04      	ble.n	800c69e <_strtod_l+0x752>
 800c694:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c696:	1ae4      	subs	r4, r4, r3
 800c698:	1ad2      	subs	r2, r2, r3
 800c69a:	920c      	str	r2, [sp, #48]	; 0x30
 800c69c:	1aed      	subs	r5, r5, r3
 800c69e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	dd17      	ble.n	800c6d4 <_strtod_l+0x788>
 800c6a4:	001a      	movs	r2, r3
 800c6a6:	9906      	ldr	r1, [sp, #24]
 800c6a8:	9804      	ldr	r0, [sp, #16]
 800c6aa:	f7ff f983 	bl	800b9b4 <__pow5mult>
 800c6ae:	9006      	str	r0, [sp, #24]
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d100      	bne.n	800c6b6 <_strtod_l+0x76a>
 800c6b4:	e6ad      	b.n	800c412 <_strtod_l+0x4c6>
 800c6b6:	0001      	movs	r1, r0
 800c6b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c6ba:	9804      	ldr	r0, [sp, #16]
 800c6bc:	f7ff f8ca 	bl	800b854 <__multiply>
 800c6c0:	900e      	str	r0, [sp, #56]	; 0x38
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	d100      	bne.n	800c6c8 <_strtod_l+0x77c>
 800c6c6:	e6a4      	b.n	800c412 <_strtod_l+0x4c6>
 800c6c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c6ca:	9804      	ldr	r0, [sp, #16]
 800c6cc:	f7fe ffae 	bl	800b62c <_Bfree>
 800c6d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6d2:	931c      	str	r3, [sp, #112]	; 0x70
 800c6d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	dd00      	ble.n	800c6dc <_strtod_l+0x790>
 800c6da:	e087      	b.n	800c7ec <_strtod_l+0x8a0>
 800c6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	dd08      	ble.n	800c6f4 <_strtod_l+0x7a8>
 800c6e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c6e4:	9908      	ldr	r1, [sp, #32]
 800c6e6:	9804      	ldr	r0, [sp, #16]
 800c6e8:	f7ff f964 	bl	800b9b4 <__pow5mult>
 800c6ec:	9008      	str	r0, [sp, #32]
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d100      	bne.n	800c6f4 <_strtod_l+0x7a8>
 800c6f2:	e68e      	b.n	800c412 <_strtod_l+0x4c6>
 800c6f4:	2c00      	cmp	r4, #0
 800c6f6:	dd08      	ble.n	800c70a <_strtod_l+0x7be>
 800c6f8:	0022      	movs	r2, r4
 800c6fa:	9908      	ldr	r1, [sp, #32]
 800c6fc:	9804      	ldr	r0, [sp, #16]
 800c6fe:	f7ff f9b5 	bl	800ba6c <__lshift>
 800c702:	9008      	str	r0, [sp, #32]
 800c704:	2800      	cmp	r0, #0
 800c706:	d100      	bne.n	800c70a <_strtod_l+0x7be>
 800c708:	e683      	b.n	800c412 <_strtod_l+0x4c6>
 800c70a:	2d00      	cmp	r5, #0
 800c70c:	dd08      	ble.n	800c720 <_strtod_l+0x7d4>
 800c70e:	002a      	movs	r2, r5
 800c710:	9906      	ldr	r1, [sp, #24]
 800c712:	9804      	ldr	r0, [sp, #16]
 800c714:	f7ff f9aa 	bl	800ba6c <__lshift>
 800c718:	9006      	str	r0, [sp, #24]
 800c71a:	2800      	cmp	r0, #0
 800c71c:	d100      	bne.n	800c720 <_strtod_l+0x7d4>
 800c71e:	e678      	b.n	800c412 <_strtod_l+0x4c6>
 800c720:	9a08      	ldr	r2, [sp, #32]
 800c722:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c724:	9804      	ldr	r0, [sp, #16]
 800c726:	f7ff fa2b 	bl	800bb80 <__mdiff>
 800c72a:	9005      	str	r0, [sp, #20]
 800c72c:	2800      	cmp	r0, #0
 800c72e:	d100      	bne.n	800c732 <_strtod_l+0x7e6>
 800c730:	e66f      	b.n	800c412 <_strtod_l+0x4c6>
 800c732:	2200      	movs	r2, #0
 800c734:	68c3      	ldr	r3, [r0, #12]
 800c736:	9906      	ldr	r1, [sp, #24]
 800c738:	60c2      	str	r2, [r0, #12]
 800c73a:	930c      	str	r3, [sp, #48]	; 0x30
 800c73c:	f7ff fa04 	bl	800bb48 <__mcmp>
 800c740:	2800      	cmp	r0, #0
 800c742:	da5d      	bge.n	800c800 <_strtod_l+0x8b4>
 800c744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c746:	4333      	orrs	r3, r6
 800c748:	d000      	beq.n	800c74c <_strtod_l+0x800>
 800c74a:	e088      	b.n	800c85e <_strtod_l+0x912>
 800c74c:	033b      	lsls	r3, r7, #12
 800c74e:	d000      	beq.n	800c752 <_strtod_l+0x806>
 800c750:	e085      	b.n	800c85e <_strtod_l+0x912>
 800c752:	22d6      	movs	r2, #214	; 0xd6
 800c754:	4b46      	ldr	r3, [pc, #280]	; (800c870 <_strtod_l+0x924>)
 800c756:	04d2      	lsls	r2, r2, #19
 800c758:	403b      	ands	r3, r7
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d97f      	bls.n	800c85e <_strtod_l+0x912>
 800c75e:	9b05      	ldr	r3, [sp, #20]
 800c760:	695b      	ldr	r3, [r3, #20]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d103      	bne.n	800c76e <_strtod_l+0x822>
 800c766:	9b05      	ldr	r3, [sp, #20]
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	dd77      	ble.n	800c85e <_strtod_l+0x912>
 800c76e:	9905      	ldr	r1, [sp, #20]
 800c770:	2201      	movs	r2, #1
 800c772:	9804      	ldr	r0, [sp, #16]
 800c774:	f7ff f97a 	bl	800ba6c <__lshift>
 800c778:	9906      	ldr	r1, [sp, #24]
 800c77a:	9005      	str	r0, [sp, #20]
 800c77c:	f7ff f9e4 	bl	800bb48 <__mcmp>
 800c780:	2800      	cmp	r0, #0
 800c782:	dd6c      	ble.n	800c85e <_strtod_l+0x912>
 800c784:	9907      	ldr	r1, [sp, #28]
 800c786:	003b      	movs	r3, r7
 800c788:	4a39      	ldr	r2, [pc, #228]	; (800c870 <_strtod_l+0x924>)
 800c78a:	2900      	cmp	r1, #0
 800c78c:	d100      	bne.n	800c790 <_strtod_l+0x844>
 800c78e:	e094      	b.n	800c8ba <_strtod_l+0x96e>
 800c790:	0011      	movs	r1, r2
 800c792:	20d6      	movs	r0, #214	; 0xd6
 800c794:	4039      	ands	r1, r7
 800c796:	04c0      	lsls	r0, r0, #19
 800c798:	4281      	cmp	r1, r0
 800c79a:	dd00      	ble.n	800c79e <_strtod_l+0x852>
 800c79c:	e08d      	b.n	800c8ba <_strtod_l+0x96e>
 800c79e:	23dc      	movs	r3, #220	; 0xdc
 800c7a0:	049b      	lsls	r3, r3, #18
 800c7a2:	4299      	cmp	r1, r3
 800c7a4:	dc00      	bgt.n	800c7a8 <_strtod_l+0x85c>
 800c7a6:	e6a7      	b.n	800c4f8 <_strtod_l+0x5ac>
 800c7a8:	0030      	movs	r0, r6
 800c7aa:	0039      	movs	r1, r7
 800c7ac:	4b31      	ldr	r3, [pc, #196]	; (800c874 <_strtod_l+0x928>)
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f7f5 f8c0 	bl	8001934 <__aeabi_dmul>
 800c7b4:	4b2e      	ldr	r3, [pc, #184]	; (800c870 <_strtod_l+0x924>)
 800c7b6:	0006      	movs	r6, r0
 800c7b8:	000f      	movs	r7, r1
 800c7ba:	420b      	tst	r3, r1
 800c7bc:	d000      	beq.n	800c7c0 <_strtod_l+0x874>
 800c7be:	e631      	b.n	800c424 <_strtod_l+0x4d8>
 800c7c0:	2322      	movs	r3, #34	; 0x22
 800c7c2:	9a04      	ldr	r2, [sp, #16]
 800c7c4:	6013      	str	r3, [r2, #0]
 800c7c6:	e62d      	b.n	800c424 <_strtod_l+0x4d8>
 800c7c8:	234b      	movs	r3, #75	; 0x4b
 800c7ca:	1a9a      	subs	r2, r3, r2
 800c7cc:	3b4c      	subs	r3, #76	; 0x4c
 800c7ce:	4093      	lsls	r3, r2
 800c7d0:	4019      	ands	r1, r3
 800c7d2:	000f      	movs	r7, r1
 800c7d4:	e6e3      	b.n	800c59e <_strtod_l+0x652>
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	4252      	negs	r2, r2
 800c7da:	409a      	lsls	r2, r3
 800c7dc:	4016      	ands	r6, r2
 800c7de:	e6de      	b.n	800c59e <_strtod_l+0x652>
 800c7e0:	4925      	ldr	r1, [pc, #148]	; (800c878 <_strtod_l+0x92c>)
 800c7e2:	1acb      	subs	r3, r1, r3
 800c7e4:	0001      	movs	r1, r0
 800c7e6:	4099      	lsls	r1, r3
 800c7e8:	9114      	str	r1, [sp, #80]	; 0x50
 800c7ea:	e743      	b.n	800c674 <_strtod_l+0x728>
 800c7ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c7f0:	9804      	ldr	r0, [sp, #16]
 800c7f2:	f7ff f93b 	bl	800ba6c <__lshift>
 800c7f6:	901c      	str	r0, [sp, #112]	; 0x70
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d000      	beq.n	800c7fe <_strtod_l+0x8b2>
 800c7fc:	e76e      	b.n	800c6dc <_strtod_l+0x790>
 800c7fe:	e608      	b.n	800c412 <_strtod_l+0x4c6>
 800c800:	970e      	str	r7, [sp, #56]	; 0x38
 800c802:	2800      	cmp	r0, #0
 800c804:	d177      	bne.n	800c8f6 <_strtod_l+0x9aa>
 800c806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c808:	033b      	lsls	r3, r7, #12
 800c80a:	0b1b      	lsrs	r3, r3, #12
 800c80c:	2a00      	cmp	r2, #0
 800c80e:	d039      	beq.n	800c884 <_strtod_l+0x938>
 800c810:	4a1a      	ldr	r2, [pc, #104]	; (800c87c <_strtod_l+0x930>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d139      	bne.n	800c88a <_strtod_l+0x93e>
 800c816:	2101      	movs	r1, #1
 800c818:	9b07      	ldr	r3, [sp, #28]
 800c81a:	4249      	negs	r1, r1
 800c81c:	0032      	movs	r2, r6
 800c81e:	0008      	movs	r0, r1
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00b      	beq.n	800c83c <_strtod_l+0x8f0>
 800c824:	24d4      	movs	r4, #212	; 0xd4
 800c826:	4b12      	ldr	r3, [pc, #72]	; (800c870 <_strtod_l+0x924>)
 800c828:	0008      	movs	r0, r1
 800c82a:	403b      	ands	r3, r7
 800c82c:	04e4      	lsls	r4, r4, #19
 800c82e:	42a3      	cmp	r3, r4
 800c830:	d804      	bhi.n	800c83c <_strtod_l+0x8f0>
 800c832:	306c      	adds	r0, #108	; 0x6c
 800c834:	0d1b      	lsrs	r3, r3, #20
 800c836:	1ac3      	subs	r3, r0, r3
 800c838:	4099      	lsls	r1, r3
 800c83a:	0008      	movs	r0, r1
 800c83c:	4282      	cmp	r2, r0
 800c83e:	d124      	bne.n	800c88a <_strtod_l+0x93e>
 800c840:	4b0f      	ldr	r3, [pc, #60]	; (800c880 <_strtod_l+0x934>)
 800c842:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c844:	4299      	cmp	r1, r3
 800c846:	d102      	bne.n	800c84e <_strtod_l+0x902>
 800c848:	3201      	adds	r2, #1
 800c84a:	d100      	bne.n	800c84e <_strtod_l+0x902>
 800c84c:	e5e1      	b.n	800c412 <_strtod_l+0x4c6>
 800c84e:	4b08      	ldr	r3, [pc, #32]	; (800c870 <_strtod_l+0x924>)
 800c850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c852:	2600      	movs	r6, #0
 800c854:	401a      	ands	r2, r3
 800c856:	0013      	movs	r3, r2
 800c858:	2280      	movs	r2, #128	; 0x80
 800c85a:	0352      	lsls	r2, r2, #13
 800c85c:	189f      	adds	r7, r3, r2
 800c85e:	9b07      	ldr	r3, [sp, #28]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d1a1      	bne.n	800c7a8 <_strtod_l+0x85c>
 800c864:	e5de      	b.n	800c424 <_strtod_l+0x4d8>
 800c866:	46c0      	nop			; (mov r8, r8)
 800c868:	0800e730 	.word	0x0800e730
 800c86c:	fffffc02 	.word	0xfffffc02
 800c870:	7ff00000 	.word	0x7ff00000
 800c874:	39500000 	.word	0x39500000
 800c878:	fffffbe2 	.word	0xfffffbe2
 800c87c:	000fffff 	.word	0x000fffff
 800c880:	7fefffff 	.word	0x7fefffff
 800c884:	4333      	orrs	r3, r6
 800c886:	d100      	bne.n	800c88a <_strtod_l+0x93e>
 800c888:	e77c      	b.n	800c784 <_strtod_l+0x838>
 800c88a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d01d      	beq.n	800c8cc <_strtod_l+0x980>
 800c890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c892:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c894:	4213      	tst	r3, r2
 800c896:	d0e2      	beq.n	800c85e <_strtod_l+0x912>
 800c898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c89a:	0030      	movs	r0, r6
 800c89c:	0039      	movs	r1, r7
 800c89e:	9a07      	ldr	r2, [sp, #28]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d017      	beq.n	800c8d4 <_strtod_l+0x988>
 800c8a4:	f7ff fb3a 	bl	800bf1c <sulp>
 800c8a8:	0002      	movs	r2, r0
 800c8aa:	000b      	movs	r3, r1
 800c8ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c8ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c8b0:	f7f4 f8e6 	bl	8000a80 <__aeabi_dadd>
 800c8b4:	0006      	movs	r6, r0
 800c8b6:	000f      	movs	r7, r1
 800c8b8:	e7d1      	b.n	800c85e <_strtod_l+0x912>
 800c8ba:	2601      	movs	r6, #1
 800c8bc:	4013      	ands	r3, r2
 800c8be:	4a98      	ldr	r2, [pc, #608]	; (800cb20 <_strtod_l+0xbd4>)
 800c8c0:	4276      	negs	r6, r6
 800c8c2:	189b      	adds	r3, r3, r2
 800c8c4:	4a97      	ldr	r2, [pc, #604]	; (800cb24 <_strtod_l+0xbd8>)
 800c8c6:	431a      	orrs	r2, r3
 800c8c8:	0017      	movs	r7, r2
 800c8ca:	e7c8      	b.n	800c85e <_strtod_l+0x912>
 800c8cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8ce:	4233      	tst	r3, r6
 800c8d0:	d0c5      	beq.n	800c85e <_strtod_l+0x912>
 800c8d2:	e7e1      	b.n	800c898 <_strtod_l+0x94c>
 800c8d4:	f7ff fb22 	bl	800bf1c <sulp>
 800c8d8:	0002      	movs	r2, r0
 800c8da:	000b      	movs	r3, r1
 800c8dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c8de:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c8e0:	f7f5 faea 	bl	8001eb8 <__aeabi_dsub>
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	0006      	movs	r6, r0
 800c8ea:	000f      	movs	r7, r1
 800c8ec:	f7f3 fdae 	bl	800044c <__aeabi_dcmpeq>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d0b4      	beq.n	800c85e <_strtod_l+0x912>
 800c8f4:	e600      	b.n	800c4f8 <_strtod_l+0x5ac>
 800c8f6:	9906      	ldr	r1, [sp, #24]
 800c8f8:	9805      	ldr	r0, [sp, #20]
 800c8fa:	f7ff faa1 	bl	800be40 <__ratio>
 800c8fe:	2380      	movs	r3, #128	; 0x80
 800c900:	2200      	movs	r2, #0
 800c902:	05db      	lsls	r3, r3, #23
 800c904:	0004      	movs	r4, r0
 800c906:	000d      	movs	r5, r1
 800c908:	f7f3 fdb0 	bl	800046c <__aeabi_dcmple>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d06d      	beq.n	800c9ec <_strtod_l+0xaa0>
 800c910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c912:	2b00      	cmp	r3, #0
 800c914:	d000      	beq.n	800c918 <_strtod_l+0x9cc>
 800c916:	e07e      	b.n	800ca16 <_strtod_l+0xaca>
 800c918:	2e00      	cmp	r6, #0
 800c91a:	d158      	bne.n	800c9ce <_strtod_l+0xa82>
 800c91c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c91e:	031b      	lsls	r3, r3, #12
 800c920:	d000      	beq.n	800c924 <_strtod_l+0x9d8>
 800c922:	e07f      	b.n	800ca24 <_strtod_l+0xad8>
 800c924:	2200      	movs	r2, #0
 800c926:	0020      	movs	r0, r4
 800c928:	0029      	movs	r1, r5
 800c92a:	4b7f      	ldr	r3, [pc, #508]	; (800cb28 <_strtod_l+0xbdc>)
 800c92c:	f7f3 fd94 	bl	8000458 <__aeabi_dcmplt>
 800c930:	2800      	cmp	r0, #0
 800c932:	d158      	bne.n	800c9e6 <_strtod_l+0xa9a>
 800c934:	0020      	movs	r0, r4
 800c936:	0029      	movs	r1, r5
 800c938:	2200      	movs	r2, #0
 800c93a:	4b7c      	ldr	r3, [pc, #496]	; (800cb2c <_strtod_l+0xbe0>)
 800c93c:	f7f4 fffa 	bl	8001934 <__aeabi_dmul>
 800c940:	0004      	movs	r4, r0
 800c942:	000d      	movs	r5, r1
 800c944:	2380      	movs	r3, #128	; 0x80
 800c946:	061b      	lsls	r3, r3, #24
 800c948:	940a      	str	r4, [sp, #40]	; 0x28
 800c94a:	18eb      	adds	r3, r5, r3
 800c94c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c94e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c952:	9212      	str	r2, [sp, #72]	; 0x48
 800c954:	9313      	str	r3, [sp, #76]	; 0x4c
 800c956:	4a76      	ldr	r2, [pc, #472]	; (800cb30 <_strtod_l+0xbe4>)
 800c958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c95a:	4013      	ands	r3, r2
 800c95c:	9314      	str	r3, [sp, #80]	; 0x50
 800c95e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c960:	4b74      	ldr	r3, [pc, #464]	; (800cb34 <_strtod_l+0xbe8>)
 800c962:	429a      	cmp	r2, r3
 800c964:	d000      	beq.n	800c968 <_strtod_l+0xa1c>
 800c966:	e091      	b.n	800ca8c <_strtod_l+0xb40>
 800c968:	4a73      	ldr	r2, [pc, #460]	; (800cb38 <_strtod_l+0xbec>)
 800c96a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c96c:	4694      	mov	ip, r2
 800c96e:	4463      	add	r3, ip
 800c970:	001f      	movs	r7, r3
 800c972:	0030      	movs	r0, r6
 800c974:	0019      	movs	r1, r3
 800c976:	f7ff f99b 	bl	800bcb0 <__ulp>
 800c97a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c97c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c97e:	f7f4 ffd9 	bl	8001934 <__aeabi_dmul>
 800c982:	0032      	movs	r2, r6
 800c984:	003b      	movs	r3, r7
 800c986:	f7f4 f87b 	bl	8000a80 <__aeabi_dadd>
 800c98a:	4a69      	ldr	r2, [pc, #420]	; (800cb30 <_strtod_l+0xbe4>)
 800c98c:	4b6b      	ldr	r3, [pc, #428]	; (800cb3c <_strtod_l+0xbf0>)
 800c98e:	0006      	movs	r6, r0
 800c990:	400a      	ands	r2, r1
 800c992:	429a      	cmp	r2, r3
 800c994:	d949      	bls.n	800ca2a <_strtod_l+0xade>
 800c996:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c998:	4b69      	ldr	r3, [pc, #420]	; (800cb40 <_strtod_l+0xbf4>)
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d103      	bne.n	800c9a6 <_strtod_l+0xa5a>
 800c99e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	d100      	bne.n	800c9a6 <_strtod_l+0xa5a>
 800c9a4:	e535      	b.n	800c412 <_strtod_l+0x4c6>
 800c9a6:	2601      	movs	r6, #1
 800c9a8:	4f65      	ldr	r7, [pc, #404]	; (800cb40 <_strtod_l+0xbf4>)
 800c9aa:	4276      	negs	r6, r6
 800c9ac:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9ae:	9804      	ldr	r0, [sp, #16]
 800c9b0:	f7fe fe3c 	bl	800b62c <_Bfree>
 800c9b4:	9908      	ldr	r1, [sp, #32]
 800c9b6:	9804      	ldr	r0, [sp, #16]
 800c9b8:	f7fe fe38 	bl	800b62c <_Bfree>
 800c9bc:	9906      	ldr	r1, [sp, #24]
 800c9be:	9804      	ldr	r0, [sp, #16]
 800c9c0:	f7fe fe34 	bl	800b62c <_Bfree>
 800c9c4:	9905      	ldr	r1, [sp, #20]
 800c9c6:	9804      	ldr	r0, [sp, #16]
 800c9c8:	f7fe fe30 	bl	800b62c <_Bfree>
 800c9cc:	e60b      	b.n	800c5e6 <_strtod_l+0x69a>
 800c9ce:	2e01      	cmp	r6, #1
 800c9d0:	d103      	bne.n	800c9da <_strtod_l+0xa8e>
 800c9d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d100      	bne.n	800c9da <_strtod_l+0xa8e>
 800c9d8:	e58e      	b.n	800c4f8 <_strtod_l+0x5ac>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	4c59      	ldr	r4, [pc, #356]	; (800cb44 <_strtod_l+0xbf8>)
 800c9de:	930a      	str	r3, [sp, #40]	; 0x28
 800c9e0:	940b      	str	r4, [sp, #44]	; 0x2c
 800c9e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c9e4:	e01c      	b.n	800ca20 <_strtod_l+0xad4>
 800c9e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c9e8:	4d50      	ldr	r5, [pc, #320]	; (800cb2c <_strtod_l+0xbe0>)
 800c9ea:	e7ab      	b.n	800c944 <_strtod_l+0x9f8>
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	0020      	movs	r0, r4
 800c9f0:	0029      	movs	r1, r5
 800c9f2:	4b4e      	ldr	r3, [pc, #312]	; (800cb2c <_strtod_l+0xbe0>)
 800c9f4:	f7f4 ff9e 	bl	8001934 <__aeabi_dmul>
 800c9f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9fa:	0004      	movs	r4, r0
 800c9fc:	000b      	movs	r3, r1
 800c9fe:	000d      	movs	r5, r1
 800ca00:	2a00      	cmp	r2, #0
 800ca02:	d104      	bne.n	800ca0e <_strtod_l+0xac2>
 800ca04:	2280      	movs	r2, #128	; 0x80
 800ca06:	0612      	lsls	r2, r2, #24
 800ca08:	900a      	str	r0, [sp, #40]	; 0x28
 800ca0a:	188b      	adds	r3, r1, r2
 800ca0c:	e79e      	b.n	800c94c <_strtod_l+0xa00>
 800ca0e:	0002      	movs	r2, r0
 800ca10:	920a      	str	r2, [sp, #40]	; 0x28
 800ca12:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca14:	e79b      	b.n	800c94e <_strtod_l+0xa02>
 800ca16:	2300      	movs	r3, #0
 800ca18:	4c43      	ldr	r4, [pc, #268]	; (800cb28 <_strtod_l+0xbdc>)
 800ca1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca1c:	940b      	str	r4, [sp, #44]	; 0x2c
 800ca1e:	2400      	movs	r4, #0
 800ca20:	4d41      	ldr	r5, [pc, #260]	; (800cb28 <_strtod_l+0xbdc>)
 800ca22:	e794      	b.n	800c94e <_strtod_l+0xa02>
 800ca24:	2300      	movs	r3, #0
 800ca26:	4c47      	ldr	r4, [pc, #284]	; (800cb44 <_strtod_l+0xbf8>)
 800ca28:	e7f7      	b.n	800ca1a <_strtod_l+0xace>
 800ca2a:	23d4      	movs	r3, #212	; 0xd4
 800ca2c:	049b      	lsls	r3, r3, #18
 800ca2e:	18cf      	adds	r7, r1, r3
 800ca30:	9b07      	ldr	r3, [sp, #28]
 800ca32:	970e      	str	r7, [sp, #56]	; 0x38
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1b9      	bne.n	800c9ac <_strtod_l+0xa60>
 800ca38:	4b3d      	ldr	r3, [pc, #244]	; (800cb30 <_strtod_l+0xbe4>)
 800ca3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca3c:	403b      	ands	r3, r7
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d1b4      	bne.n	800c9ac <_strtod_l+0xa60>
 800ca42:	0020      	movs	r0, r4
 800ca44:	0029      	movs	r1, r5
 800ca46:	f7f3 fd9b 	bl	8000580 <__aeabi_d2lz>
 800ca4a:	f7f3 fdd5 	bl	80005f8 <__aeabi_l2d>
 800ca4e:	0002      	movs	r2, r0
 800ca50:	000b      	movs	r3, r1
 800ca52:	0020      	movs	r0, r4
 800ca54:	0029      	movs	r1, r5
 800ca56:	f7f5 fa2f 	bl	8001eb8 <__aeabi_dsub>
 800ca5a:	033b      	lsls	r3, r7, #12
 800ca5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca5e:	0b1b      	lsrs	r3, r3, #12
 800ca60:	4333      	orrs	r3, r6
 800ca62:	4313      	orrs	r3, r2
 800ca64:	0004      	movs	r4, r0
 800ca66:	000d      	movs	r5, r1
 800ca68:	4a37      	ldr	r2, [pc, #220]	; (800cb48 <_strtod_l+0xbfc>)
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d054      	beq.n	800cb18 <_strtod_l+0xbcc>
 800ca6e:	4b37      	ldr	r3, [pc, #220]	; (800cb4c <_strtod_l+0xc00>)
 800ca70:	f7f3 fcf2 	bl	8000458 <__aeabi_dcmplt>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	d000      	beq.n	800ca7a <_strtod_l+0xb2e>
 800ca78:	e4d4      	b.n	800c424 <_strtod_l+0x4d8>
 800ca7a:	0020      	movs	r0, r4
 800ca7c:	0029      	movs	r1, r5
 800ca7e:	4a34      	ldr	r2, [pc, #208]	; (800cb50 <_strtod_l+0xc04>)
 800ca80:	4b2a      	ldr	r3, [pc, #168]	; (800cb2c <_strtod_l+0xbe0>)
 800ca82:	f7f3 fcfd 	bl	8000480 <__aeabi_dcmpgt>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d090      	beq.n	800c9ac <_strtod_l+0xa60>
 800ca8a:	e4cb      	b.n	800c424 <_strtod_l+0x4d8>
 800ca8c:	9b07      	ldr	r3, [sp, #28]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d02b      	beq.n	800caea <_strtod_l+0xb9e>
 800ca92:	23d4      	movs	r3, #212	; 0xd4
 800ca94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca96:	04db      	lsls	r3, r3, #19
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d826      	bhi.n	800caea <_strtod_l+0xb9e>
 800ca9c:	0020      	movs	r0, r4
 800ca9e:	0029      	movs	r1, r5
 800caa0:	4a2c      	ldr	r2, [pc, #176]	; (800cb54 <_strtod_l+0xc08>)
 800caa2:	4b2d      	ldr	r3, [pc, #180]	; (800cb58 <_strtod_l+0xc0c>)
 800caa4:	f7f3 fce2 	bl	800046c <__aeabi_dcmple>
 800caa8:	2800      	cmp	r0, #0
 800caaa:	d017      	beq.n	800cadc <_strtod_l+0xb90>
 800caac:	0020      	movs	r0, r4
 800caae:	0029      	movs	r1, r5
 800cab0:	f7f3 fd48 	bl	8000544 <__aeabi_d2uiz>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d100      	bne.n	800caba <_strtod_l+0xb6e>
 800cab8:	3001      	adds	r0, #1
 800caba:	f7f5 fe03 	bl	80026c4 <__aeabi_ui2d>
 800cabe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cac0:	0004      	movs	r4, r0
 800cac2:	000b      	movs	r3, r1
 800cac4:	000d      	movs	r5, r1
 800cac6:	2a00      	cmp	r2, #0
 800cac8:	d122      	bne.n	800cb10 <_strtod_l+0xbc4>
 800caca:	2280      	movs	r2, #128	; 0x80
 800cacc:	0612      	lsls	r2, r2, #24
 800cace:	188b      	adds	r3, r1, r2
 800cad0:	9016      	str	r0, [sp, #88]	; 0x58
 800cad2:	9317      	str	r3, [sp, #92]	; 0x5c
 800cad4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cad6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cad8:	9212      	str	r2, [sp, #72]	; 0x48
 800cada:	9313      	str	r3, [sp, #76]	; 0x4c
 800cadc:	22d6      	movs	r2, #214	; 0xd6
 800cade:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cae0:	04d2      	lsls	r2, r2, #19
 800cae2:	189b      	adds	r3, r3, r2
 800cae4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cae6:	1a9b      	subs	r3, r3, r2
 800cae8:	9313      	str	r3, [sp, #76]	; 0x4c
 800caea:	9810      	ldr	r0, [sp, #64]	; 0x40
 800caec:	9911      	ldr	r1, [sp, #68]	; 0x44
 800caee:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800caf0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800caf2:	f7ff f8dd 	bl	800bcb0 <__ulp>
 800caf6:	0002      	movs	r2, r0
 800caf8:	000b      	movs	r3, r1
 800cafa:	0030      	movs	r0, r6
 800cafc:	0039      	movs	r1, r7
 800cafe:	f7f4 ff19 	bl	8001934 <__aeabi_dmul>
 800cb02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cb04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb06:	f7f3 ffbb 	bl	8000a80 <__aeabi_dadd>
 800cb0a:	0006      	movs	r6, r0
 800cb0c:	000f      	movs	r7, r1
 800cb0e:	e78f      	b.n	800ca30 <_strtod_l+0xae4>
 800cb10:	0002      	movs	r2, r0
 800cb12:	9216      	str	r2, [sp, #88]	; 0x58
 800cb14:	9317      	str	r3, [sp, #92]	; 0x5c
 800cb16:	e7dd      	b.n	800cad4 <_strtod_l+0xb88>
 800cb18:	4b10      	ldr	r3, [pc, #64]	; (800cb5c <_strtod_l+0xc10>)
 800cb1a:	f7f3 fc9d 	bl	8000458 <__aeabi_dcmplt>
 800cb1e:	e7b2      	b.n	800ca86 <_strtod_l+0xb3a>
 800cb20:	fff00000 	.word	0xfff00000
 800cb24:	000fffff 	.word	0x000fffff
 800cb28:	3ff00000 	.word	0x3ff00000
 800cb2c:	3fe00000 	.word	0x3fe00000
 800cb30:	7ff00000 	.word	0x7ff00000
 800cb34:	7fe00000 	.word	0x7fe00000
 800cb38:	fcb00000 	.word	0xfcb00000
 800cb3c:	7c9fffff 	.word	0x7c9fffff
 800cb40:	7fefffff 	.word	0x7fefffff
 800cb44:	bff00000 	.word	0xbff00000
 800cb48:	94a03595 	.word	0x94a03595
 800cb4c:	3fdfffff 	.word	0x3fdfffff
 800cb50:	35afe535 	.word	0x35afe535
 800cb54:	ffc00000 	.word	0xffc00000
 800cb58:	41dfffff 	.word	0x41dfffff
 800cb5c:	3fcfffff 	.word	0x3fcfffff

0800cb60 <_strtod_r>:
 800cb60:	b510      	push	{r4, lr}
 800cb62:	4b02      	ldr	r3, [pc, #8]	; (800cb6c <_strtod_r+0xc>)
 800cb64:	f7ff f9f2 	bl	800bf4c <_strtod_l>
 800cb68:	bd10      	pop	{r4, pc}
 800cb6a:	46c0      	nop			; (mov r8, r8)
 800cb6c:	20000080 	.word	0x20000080

0800cb70 <_strtol_l.constprop.0>:
 800cb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb72:	b087      	sub	sp, #28
 800cb74:	001e      	movs	r6, r3
 800cb76:	9005      	str	r0, [sp, #20]
 800cb78:	9101      	str	r1, [sp, #4]
 800cb7a:	9202      	str	r2, [sp, #8]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d048      	beq.n	800cc12 <_strtol_l.constprop.0+0xa2>
 800cb80:	000b      	movs	r3, r1
 800cb82:	2e24      	cmp	r6, #36	; 0x24
 800cb84:	d845      	bhi.n	800cc12 <_strtol_l.constprop.0+0xa2>
 800cb86:	4a3b      	ldr	r2, [pc, #236]	; (800cc74 <_strtol_l.constprop.0+0x104>)
 800cb88:	2108      	movs	r1, #8
 800cb8a:	4694      	mov	ip, r2
 800cb8c:	001a      	movs	r2, r3
 800cb8e:	4660      	mov	r0, ip
 800cb90:	7814      	ldrb	r4, [r2, #0]
 800cb92:	3301      	adds	r3, #1
 800cb94:	5d00      	ldrb	r0, [r0, r4]
 800cb96:	001d      	movs	r5, r3
 800cb98:	0007      	movs	r7, r0
 800cb9a:	400f      	ands	r7, r1
 800cb9c:	4208      	tst	r0, r1
 800cb9e:	d1f5      	bne.n	800cb8c <_strtol_l.constprop.0+0x1c>
 800cba0:	2c2d      	cmp	r4, #45	; 0x2d
 800cba2:	d13d      	bne.n	800cc20 <_strtol_l.constprop.0+0xb0>
 800cba4:	2701      	movs	r7, #1
 800cba6:	781c      	ldrb	r4, [r3, #0]
 800cba8:	1c95      	adds	r5, r2, #2
 800cbaa:	2e00      	cmp	r6, #0
 800cbac:	d05e      	beq.n	800cc6c <_strtol_l.constprop.0+0xfc>
 800cbae:	2e10      	cmp	r6, #16
 800cbb0:	d109      	bne.n	800cbc6 <_strtol_l.constprop.0+0x56>
 800cbb2:	2c30      	cmp	r4, #48	; 0x30
 800cbb4:	d107      	bne.n	800cbc6 <_strtol_l.constprop.0+0x56>
 800cbb6:	2220      	movs	r2, #32
 800cbb8:	782b      	ldrb	r3, [r5, #0]
 800cbba:	4393      	bics	r3, r2
 800cbbc:	2b58      	cmp	r3, #88	; 0x58
 800cbbe:	d150      	bne.n	800cc62 <_strtol_l.constprop.0+0xf2>
 800cbc0:	2610      	movs	r6, #16
 800cbc2:	786c      	ldrb	r4, [r5, #1]
 800cbc4:	3502      	adds	r5, #2
 800cbc6:	4b2c      	ldr	r3, [pc, #176]	; (800cc78 <_strtol_l.constprop.0+0x108>)
 800cbc8:	0031      	movs	r1, r6
 800cbca:	18fb      	adds	r3, r7, r3
 800cbcc:	0018      	movs	r0, r3
 800cbce:	9303      	str	r3, [sp, #12]
 800cbd0:	f7f3 fb3c 	bl	800024c <__aeabi_uidivmod>
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	9104      	str	r1, [sp, #16]
 800cbd8:	2101      	movs	r1, #1
 800cbda:	4684      	mov	ip, r0
 800cbdc:	0010      	movs	r0, r2
 800cbde:	4249      	negs	r1, r1
 800cbe0:	0023      	movs	r3, r4
 800cbe2:	3b30      	subs	r3, #48	; 0x30
 800cbe4:	2b09      	cmp	r3, #9
 800cbe6:	d903      	bls.n	800cbf0 <_strtol_l.constprop.0+0x80>
 800cbe8:	3b11      	subs	r3, #17
 800cbea:	2b19      	cmp	r3, #25
 800cbec:	d81d      	bhi.n	800cc2a <_strtol_l.constprop.0+0xba>
 800cbee:	330a      	adds	r3, #10
 800cbf0:	429e      	cmp	r6, r3
 800cbf2:	dd1e      	ble.n	800cc32 <_strtol_l.constprop.0+0xc2>
 800cbf4:	1c54      	adds	r4, r2, #1
 800cbf6:	d009      	beq.n	800cc0c <_strtol_l.constprop.0+0x9c>
 800cbf8:	000a      	movs	r2, r1
 800cbfa:	4584      	cmp	ip, r0
 800cbfc:	d306      	bcc.n	800cc0c <_strtol_l.constprop.0+0x9c>
 800cbfe:	d102      	bne.n	800cc06 <_strtol_l.constprop.0+0x96>
 800cc00:	9c04      	ldr	r4, [sp, #16]
 800cc02:	429c      	cmp	r4, r3
 800cc04:	db02      	blt.n	800cc0c <_strtol_l.constprop.0+0x9c>
 800cc06:	2201      	movs	r2, #1
 800cc08:	4370      	muls	r0, r6
 800cc0a:	1818      	adds	r0, r3, r0
 800cc0c:	782c      	ldrb	r4, [r5, #0]
 800cc0e:	3501      	adds	r5, #1
 800cc10:	e7e6      	b.n	800cbe0 <_strtol_l.constprop.0+0x70>
 800cc12:	f7fd fce5 	bl	800a5e0 <__errno>
 800cc16:	2316      	movs	r3, #22
 800cc18:	6003      	str	r3, [r0, #0]
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	b007      	add	sp, #28
 800cc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc20:	2c2b      	cmp	r4, #43	; 0x2b
 800cc22:	d1c2      	bne.n	800cbaa <_strtol_l.constprop.0+0x3a>
 800cc24:	781c      	ldrb	r4, [r3, #0]
 800cc26:	1c95      	adds	r5, r2, #2
 800cc28:	e7bf      	b.n	800cbaa <_strtol_l.constprop.0+0x3a>
 800cc2a:	0023      	movs	r3, r4
 800cc2c:	3b61      	subs	r3, #97	; 0x61
 800cc2e:	2b19      	cmp	r3, #25
 800cc30:	d9dd      	bls.n	800cbee <_strtol_l.constprop.0+0x7e>
 800cc32:	1c53      	adds	r3, r2, #1
 800cc34:	d109      	bne.n	800cc4a <_strtol_l.constprop.0+0xda>
 800cc36:	2322      	movs	r3, #34	; 0x22
 800cc38:	9a05      	ldr	r2, [sp, #20]
 800cc3a:	9803      	ldr	r0, [sp, #12]
 800cc3c:	6013      	str	r3, [r2, #0]
 800cc3e:	9b02      	ldr	r3, [sp, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d0eb      	beq.n	800cc1c <_strtol_l.constprop.0+0xac>
 800cc44:	1e6b      	subs	r3, r5, #1
 800cc46:	9301      	str	r3, [sp, #4]
 800cc48:	e007      	b.n	800cc5a <_strtol_l.constprop.0+0xea>
 800cc4a:	2f00      	cmp	r7, #0
 800cc4c:	d000      	beq.n	800cc50 <_strtol_l.constprop.0+0xe0>
 800cc4e:	4240      	negs	r0, r0
 800cc50:	9b02      	ldr	r3, [sp, #8]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d0e2      	beq.n	800cc1c <_strtol_l.constprop.0+0xac>
 800cc56:	2a00      	cmp	r2, #0
 800cc58:	d1f4      	bne.n	800cc44 <_strtol_l.constprop.0+0xd4>
 800cc5a:	9b02      	ldr	r3, [sp, #8]
 800cc5c:	9a01      	ldr	r2, [sp, #4]
 800cc5e:	601a      	str	r2, [r3, #0]
 800cc60:	e7dc      	b.n	800cc1c <_strtol_l.constprop.0+0xac>
 800cc62:	2430      	movs	r4, #48	; 0x30
 800cc64:	2e00      	cmp	r6, #0
 800cc66:	d1ae      	bne.n	800cbc6 <_strtol_l.constprop.0+0x56>
 800cc68:	3608      	adds	r6, #8
 800cc6a:	e7ac      	b.n	800cbc6 <_strtol_l.constprop.0+0x56>
 800cc6c:	2c30      	cmp	r4, #48	; 0x30
 800cc6e:	d0a2      	beq.n	800cbb6 <_strtol_l.constprop.0+0x46>
 800cc70:	260a      	movs	r6, #10
 800cc72:	e7a8      	b.n	800cbc6 <_strtol_l.constprop.0+0x56>
 800cc74:	0800e759 	.word	0x0800e759
 800cc78:	7fffffff 	.word	0x7fffffff

0800cc7c <_strtol_r>:
 800cc7c:	b510      	push	{r4, lr}
 800cc7e:	f7ff ff77 	bl	800cb70 <_strtol_l.constprop.0>
 800cc82:	bd10      	pop	{r4, pc}

0800cc84 <__ssputs_r>:
 800cc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc86:	b085      	sub	sp, #20
 800cc88:	9301      	str	r3, [sp, #4]
 800cc8a:	9203      	str	r2, [sp, #12]
 800cc8c:	688e      	ldr	r6, [r1, #8]
 800cc8e:	9a01      	ldr	r2, [sp, #4]
 800cc90:	0007      	movs	r7, r0
 800cc92:	000c      	movs	r4, r1
 800cc94:	680b      	ldr	r3, [r1, #0]
 800cc96:	4296      	cmp	r6, r2
 800cc98:	d831      	bhi.n	800ccfe <__ssputs_r+0x7a>
 800cc9a:	898a      	ldrh	r2, [r1, #12]
 800cc9c:	2190      	movs	r1, #144	; 0x90
 800cc9e:	00c9      	lsls	r1, r1, #3
 800cca0:	420a      	tst	r2, r1
 800cca2:	d029      	beq.n	800ccf8 <__ssputs_r+0x74>
 800cca4:	2003      	movs	r0, #3
 800cca6:	6921      	ldr	r1, [r4, #16]
 800cca8:	1a5b      	subs	r3, r3, r1
 800ccaa:	9302      	str	r3, [sp, #8]
 800ccac:	6963      	ldr	r3, [r4, #20]
 800ccae:	4343      	muls	r3, r0
 800ccb0:	0fdd      	lsrs	r5, r3, #31
 800ccb2:	18ed      	adds	r5, r5, r3
 800ccb4:	9b01      	ldr	r3, [sp, #4]
 800ccb6:	9802      	ldr	r0, [sp, #8]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	181b      	adds	r3, r3, r0
 800ccbc:	106d      	asrs	r5, r5, #1
 800ccbe:	42ab      	cmp	r3, r5
 800ccc0:	d900      	bls.n	800ccc4 <__ssputs_r+0x40>
 800ccc2:	001d      	movs	r5, r3
 800ccc4:	0552      	lsls	r2, r2, #21
 800ccc6:	d529      	bpl.n	800cd1c <__ssputs_r+0x98>
 800ccc8:	0029      	movs	r1, r5
 800ccca:	0038      	movs	r0, r7
 800cccc:	f7fe fbd8 	bl	800b480 <_malloc_r>
 800ccd0:	1e06      	subs	r6, r0, #0
 800ccd2:	d02d      	beq.n	800cd30 <__ssputs_r+0xac>
 800ccd4:	9a02      	ldr	r2, [sp, #8]
 800ccd6:	6921      	ldr	r1, [r4, #16]
 800ccd8:	f000 fa22 	bl	800d120 <memcpy>
 800ccdc:	89a2      	ldrh	r2, [r4, #12]
 800ccde:	4b19      	ldr	r3, [pc, #100]	; (800cd44 <__ssputs_r+0xc0>)
 800cce0:	401a      	ands	r2, r3
 800cce2:	2380      	movs	r3, #128	; 0x80
 800cce4:	4313      	orrs	r3, r2
 800cce6:	81a3      	strh	r3, [r4, #12]
 800cce8:	9b02      	ldr	r3, [sp, #8]
 800ccea:	6126      	str	r6, [r4, #16]
 800ccec:	18f6      	adds	r6, r6, r3
 800ccee:	6026      	str	r6, [r4, #0]
 800ccf0:	6165      	str	r5, [r4, #20]
 800ccf2:	9e01      	ldr	r6, [sp, #4]
 800ccf4:	1aed      	subs	r5, r5, r3
 800ccf6:	60a5      	str	r5, [r4, #8]
 800ccf8:	9b01      	ldr	r3, [sp, #4]
 800ccfa:	429e      	cmp	r6, r3
 800ccfc:	d900      	bls.n	800cd00 <__ssputs_r+0x7c>
 800ccfe:	9e01      	ldr	r6, [sp, #4]
 800cd00:	0032      	movs	r2, r6
 800cd02:	9903      	ldr	r1, [sp, #12]
 800cd04:	6820      	ldr	r0, [r4, #0]
 800cd06:	f000 f9d4 	bl	800d0b2 <memmove>
 800cd0a:	2000      	movs	r0, #0
 800cd0c:	68a3      	ldr	r3, [r4, #8]
 800cd0e:	1b9b      	subs	r3, r3, r6
 800cd10:	60a3      	str	r3, [r4, #8]
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	199b      	adds	r3, r3, r6
 800cd16:	6023      	str	r3, [r4, #0]
 800cd18:	b005      	add	sp, #20
 800cd1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd1c:	002a      	movs	r2, r5
 800cd1e:	0038      	movs	r0, r7
 800cd20:	f000 fdc8 	bl	800d8b4 <_realloc_r>
 800cd24:	1e06      	subs	r6, r0, #0
 800cd26:	d1df      	bne.n	800cce8 <__ssputs_r+0x64>
 800cd28:	0038      	movs	r0, r7
 800cd2a:	6921      	ldr	r1, [r4, #16]
 800cd2c:	f7fe fb32 	bl	800b394 <_free_r>
 800cd30:	230c      	movs	r3, #12
 800cd32:	2001      	movs	r0, #1
 800cd34:	603b      	str	r3, [r7, #0]
 800cd36:	89a2      	ldrh	r2, [r4, #12]
 800cd38:	3334      	adds	r3, #52	; 0x34
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	81a3      	strh	r3, [r4, #12]
 800cd3e:	4240      	negs	r0, r0
 800cd40:	e7ea      	b.n	800cd18 <__ssputs_r+0x94>
 800cd42:	46c0      	nop			; (mov r8, r8)
 800cd44:	fffffb7f 	.word	0xfffffb7f

0800cd48 <_svfiprintf_r>:
 800cd48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd4a:	b0a1      	sub	sp, #132	; 0x84
 800cd4c:	9003      	str	r0, [sp, #12]
 800cd4e:	001d      	movs	r5, r3
 800cd50:	898b      	ldrh	r3, [r1, #12]
 800cd52:	000f      	movs	r7, r1
 800cd54:	0016      	movs	r6, r2
 800cd56:	061b      	lsls	r3, r3, #24
 800cd58:	d511      	bpl.n	800cd7e <_svfiprintf_r+0x36>
 800cd5a:	690b      	ldr	r3, [r1, #16]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10e      	bne.n	800cd7e <_svfiprintf_r+0x36>
 800cd60:	2140      	movs	r1, #64	; 0x40
 800cd62:	f7fe fb8d 	bl	800b480 <_malloc_r>
 800cd66:	6038      	str	r0, [r7, #0]
 800cd68:	6138      	str	r0, [r7, #16]
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d105      	bne.n	800cd7a <_svfiprintf_r+0x32>
 800cd6e:	230c      	movs	r3, #12
 800cd70:	9a03      	ldr	r2, [sp, #12]
 800cd72:	3801      	subs	r0, #1
 800cd74:	6013      	str	r3, [r2, #0]
 800cd76:	b021      	add	sp, #132	; 0x84
 800cd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd7a:	2340      	movs	r3, #64	; 0x40
 800cd7c:	617b      	str	r3, [r7, #20]
 800cd7e:	2300      	movs	r3, #0
 800cd80:	ac08      	add	r4, sp, #32
 800cd82:	6163      	str	r3, [r4, #20]
 800cd84:	3320      	adds	r3, #32
 800cd86:	7663      	strb	r3, [r4, #25]
 800cd88:	3310      	adds	r3, #16
 800cd8a:	76a3      	strb	r3, [r4, #26]
 800cd8c:	9507      	str	r5, [sp, #28]
 800cd8e:	0035      	movs	r5, r6
 800cd90:	782b      	ldrb	r3, [r5, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d001      	beq.n	800cd9a <_svfiprintf_r+0x52>
 800cd96:	2b25      	cmp	r3, #37	; 0x25
 800cd98:	d148      	bne.n	800ce2c <_svfiprintf_r+0xe4>
 800cd9a:	1bab      	subs	r3, r5, r6
 800cd9c:	9305      	str	r3, [sp, #20]
 800cd9e:	42b5      	cmp	r5, r6
 800cda0:	d00b      	beq.n	800cdba <_svfiprintf_r+0x72>
 800cda2:	0032      	movs	r2, r6
 800cda4:	0039      	movs	r1, r7
 800cda6:	9803      	ldr	r0, [sp, #12]
 800cda8:	f7ff ff6c 	bl	800cc84 <__ssputs_r>
 800cdac:	3001      	adds	r0, #1
 800cdae:	d100      	bne.n	800cdb2 <_svfiprintf_r+0x6a>
 800cdb0:	e0af      	b.n	800cf12 <_svfiprintf_r+0x1ca>
 800cdb2:	6963      	ldr	r3, [r4, #20]
 800cdb4:	9a05      	ldr	r2, [sp, #20]
 800cdb6:	189b      	adds	r3, r3, r2
 800cdb8:	6163      	str	r3, [r4, #20]
 800cdba:	782b      	ldrb	r3, [r5, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d100      	bne.n	800cdc2 <_svfiprintf_r+0x7a>
 800cdc0:	e0a7      	b.n	800cf12 <_svfiprintf_r+0x1ca>
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	4252      	negs	r2, r2
 800cdc8:	6062      	str	r2, [r4, #4]
 800cdca:	a904      	add	r1, sp, #16
 800cdcc:	3254      	adds	r2, #84	; 0x54
 800cdce:	1852      	adds	r2, r2, r1
 800cdd0:	1c6e      	adds	r6, r5, #1
 800cdd2:	6023      	str	r3, [r4, #0]
 800cdd4:	60e3      	str	r3, [r4, #12]
 800cdd6:	60a3      	str	r3, [r4, #8]
 800cdd8:	7013      	strb	r3, [r2, #0]
 800cdda:	65a3      	str	r3, [r4, #88]	; 0x58
 800cddc:	4b55      	ldr	r3, [pc, #340]	; (800cf34 <_svfiprintf_r+0x1ec>)
 800cdde:	2205      	movs	r2, #5
 800cde0:	0018      	movs	r0, r3
 800cde2:	7831      	ldrb	r1, [r6, #0]
 800cde4:	9305      	str	r3, [sp, #20]
 800cde6:	f7fd fc28 	bl	800a63a <memchr>
 800cdea:	1c75      	adds	r5, r6, #1
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d11f      	bne.n	800ce30 <_svfiprintf_r+0xe8>
 800cdf0:	6822      	ldr	r2, [r4, #0]
 800cdf2:	06d3      	lsls	r3, r2, #27
 800cdf4:	d504      	bpl.n	800ce00 <_svfiprintf_r+0xb8>
 800cdf6:	2353      	movs	r3, #83	; 0x53
 800cdf8:	a904      	add	r1, sp, #16
 800cdfa:	185b      	adds	r3, r3, r1
 800cdfc:	2120      	movs	r1, #32
 800cdfe:	7019      	strb	r1, [r3, #0]
 800ce00:	0713      	lsls	r3, r2, #28
 800ce02:	d504      	bpl.n	800ce0e <_svfiprintf_r+0xc6>
 800ce04:	2353      	movs	r3, #83	; 0x53
 800ce06:	a904      	add	r1, sp, #16
 800ce08:	185b      	adds	r3, r3, r1
 800ce0a:	212b      	movs	r1, #43	; 0x2b
 800ce0c:	7019      	strb	r1, [r3, #0]
 800ce0e:	7833      	ldrb	r3, [r6, #0]
 800ce10:	2b2a      	cmp	r3, #42	; 0x2a
 800ce12:	d016      	beq.n	800ce42 <_svfiprintf_r+0xfa>
 800ce14:	0035      	movs	r5, r6
 800ce16:	2100      	movs	r1, #0
 800ce18:	200a      	movs	r0, #10
 800ce1a:	68e3      	ldr	r3, [r4, #12]
 800ce1c:	782a      	ldrb	r2, [r5, #0]
 800ce1e:	1c6e      	adds	r6, r5, #1
 800ce20:	3a30      	subs	r2, #48	; 0x30
 800ce22:	2a09      	cmp	r2, #9
 800ce24:	d94e      	bls.n	800cec4 <_svfiprintf_r+0x17c>
 800ce26:	2900      	cmp	r1, #0
 800ce28:	d111      	bne.n	800ce4e <_svfiprintf_r+0x106>
 800ce2a:	e017      	b.n	800ce5c <_svfiprintf_r+0x114>
 800ce2c:	3501      	adds	r5, #1
 800ce2e:	e7af      	b.n	800cd90 <_svfiprintf_r+0x48>
 800ce30:	9b05      	ldr	r3, [sp, #20]
 800ce32:	6822      	ldr	r2, [r4, #0]
 800ce34:	1ac0      	subs	r0, r0, r3
 800ce36:	2301      	movs	r3, #1
 800ce38:	4083      	lsls	r3, r0
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	002e      	movs	r6, r5
 800ce3e:	6023      	str	r3, [r4, #0]
 800ce40:	e7cc      	b.n	800cddc <_svfiprintf_r+0x94>
 800ce42:	9b07      	ldr	r3, [sp, #28]
 800ce44:	1d19      	adds	r1, r3, #4
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	9107      	str	r1, [sp, #28]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	db01      	blt.n	800ce52 <_svfiprintf_r+0x10a>
 800ce4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce50:	e004      	b.n	800ce5c <_svfiprintf_r+0x114>
 800ce52:	425b      	negs	r3, r3
 800ce54:	60e3      	str	r3, [r4, #12]
 800ce56:	2302      	movs	r3, #2
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	6023      	str	r3, [r4, #0]
 800ce5c:	782b      	ldrb	r3, [r5, #0]
 800ce5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ce60:	d10a      	bne.n	800ce78 <_svfiprintf_r+0x130>
 800ce62:	786b      	ldrb	r3, [r5, #1]
 800ce64:	2b2a      	cmp	r3, #42	; 0x2a
 800ce66:	d135      	bne.n	800ced4 <_svfiprintf_r+0x18c>
 800ce68:	9b07      	ldr	r3, [sp, #28]
 800ce6a:	3502      	adds	r5, #2
 800ce6c:	1d1a      	adds	r2, r3, #4
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	9207      	str	r2, [sp, #28]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	db2b      	blt.n	800cece <_svfiprintf_r+0x186>
 800ce76:	9309      	str	r3, [sp, #36]	; 0x24
 800ce78:	4e2f      	ldr	r6, [pc, #188]	; (800cf38 <_svfiprintf_r+0x1f0>)
 800ce7a:	2203      	movs	r2, #3
 800ce7c:	0030      	movs	r0, r6
 800ce7e:	7829      	ldrb	r1, [r5, #0]
 800ce80:	f7fd fbdb 	bl	800a63a <memchr>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	d006      	beq.n	800ce96 <_svfiprintf_r+0x14e>
 800ce88:	2340      	movs	r3, #64	; 0x40
 800ce8a:	1b80      	subs	r0, r0, r6
 800ce8c:	4083      	lsls	r3, r0
 800ce8e:	6822      	ldr	r2, [r4, #0]
 800ce90:	3501      	adds	r5, #1
 800ce92:	4313      	orrs	r3, r2
 800ce94:	6023      	str	r3, [r4, #0]
 800ce96:	7829      	ldrb	r1, [r5, #0]
 800ce98:	2206      	movs	r2, #6
 800ce9a:	4828      	ldr	r0, [pc, #160]	; (800cf3c <_svfiprintf_r+0x1f4>)
 800ce9c:	1c6e      	adds	r6, r5, #1
 800ce9e:	7621      	strb	r1, [r4, #24]
 800cea0:	f7fd fbcb 	bl	800a63a <memchr>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d03c      	beq.n	800cf22 <_svfiprintf_r+0x1da>
 800cea8:	4b25      	ldr	r3, [pc, #148]	; (800cf40 <_svfiprintf_r+0x1f8>)
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d125      	bne.n	800cefa <_svfiprintf_r+0x1b2>
 800ceae:	2207      	movs	r2, #7
 800ceb0:	9b07      	ldr	r3, [sp, #28]
 800ceb2:	3307      	adds	r3, #7
 800ceb4:	4393      	bics	r3, r2
 800ceb6:	3308      	adds	r3, #8
 800ceb8:	9307      	str	r3, [sp, #28]
 800ceba:	6963      	ldr	r3, [r4, #20]
 800cebc:	9a04      	ldr	r2, [sp, #16]
 800cebe:	189b      	adds	r3, r3, r2
 800cec0:	6163      	str	r3, [r4, #20]
 800cec2:	e764      	b.n	800cd8e <_svfiprintf_r+0x46>
 800cec4:	4343      	muls	r3, r0
 800cec6:	0035      	movs	r5, r6
 800cec8:	2101      	movs	r1, #1
 800ceca:	189b      	adds	r3, r3, r2
 800cecc:	e7a6      	b.n	800ce1c <_svfiprintf_r+0xd4>
 800cece:	2301      	movs	r3, #1
 800ced0:	425b      	negs	r3, r3
 800ced2:	e7d0      	b.n	800ce76 <_svfiprintf_r+0x12e>
 800ced4:	2300      	movs	r3, #0
 800ced6:	200a      	movs	r0, #10
 800ced8:	001a      	movs	r2, r3
 800ceda:	3501      	adds	r5, #1
 800cedc:	6063      	str	r3, [r4, #4]
 800cede:	7829      	ldrb	r1, [r5, #0]
 800cee0:	1c6e      	adds	r6, r5, #1
 800cee2:	3930      	subs	r1, #48	; 0x30
 800cee4:	2909      	cmp	r1, #9
 800cee6:	d903      	bls.n	800cef0 <_svfiprintf_r+0x1a8>
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d0c5      	beq.n	800ce78 <_svfiprintf_r+0x130>
 800ceec:	9209      	str	r2, [sp, #36]	; 0x24
 800ceee:	e7c3      	b.n	800ce78 <_svfiprintf_r+0x130>
 800cef0:	4342      	muls	r2, r0
 800cef2:	0035      	movs	r5, r6
 800cef4:	2301      	movs	r3, #1
 800cef6:	1852      	adds	r2, r2, r1
 800cef8:	e7f1      	b.n	800cede <_svfiprintf_r+0x196>
 800cefa:	aa07      	add	r2, sp, #28
 800cefc:	9200      	str	r2, [sp, #0]
 800cefe:	0021      	movs	r1, r4
 800cf00:	003a      	movs	r2, r7
 800cf02:	4b10      	ldr	r3, [pc, #64]	; (800cf44 <_svfiprintf_r+0x1fc>)
 800cf04:	9803      	ldr	r0, [sp, #12]
 800cf06:	f7fc fc03 	bl	8009710 <_printf_float>
 800cf0a:	9004      	str	r0, [sp, #16]
 800cf0c:	9b04      	ldr	r3, [sp, #16]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	d1d3      	bne.n	800ceba <_svfiprintf_r+0x172>
 800cf12:	89bb      	ldrh	r3, [r7, #12]
 800cf14:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cf16:	065b      	lsls	r3, r3, #25
 800cf18:	d400      	bmi.n	800cf1c <_svfiprintf_r+0x1d4>
 800cf1a:	e72c      	b.n	800cd76 <_svfiprintf_r+0x2e>
 800cf1c:	2001      	movs	r0, #1
 800cf1e:	4240      	negs	r0, r0
 800cf20:	e729      	b.n	800cd76 <_svfiprintf_r+0x2e>
 800cf22:	aa07      	add	r2, sp, #28
 800cf24:	9200      	str	r2, [sp, #0]
 800cf26:	0021      	movs	r1, r4
 800cf28:	003a      	movs	r2, r7
 800cf2a:	4b06      	ldr	r3, [pc, #24]	; (800cf44 <_svfiprintf_r+0x1fc>)
 800cf2c:	9803      	ldr	r0, [sp, #12]
 800cf2e:	f7fc feb5 	bl	8009c9c <_printf_i>
 800cf32:	e7ea      	b.n	800cf0a <_svfiprintf_r+0x1c2>
 800cf34:	0800e859 	.word	0x0800e859
 800cf38:	0800e85f 	.word	0x0800e85f
 800cf3c:	0800e863 	.word	0x0800e863
 800cf40:	08009711 	.word	0x08009711
 800cf44:	0800cc85 	.word	0x0800cc85

0800cf48 <__sflush_r>:
 800cf48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf4a:	898b      	ldrh	r3, [r1, #12]
 800cf4c:	0005      	movs	r5, r0
 800cf4e:	000c      	movs	r4, r1
 800cf50:	071a      	lsls	r2, r3, #28
 800cf52:	d45c      	bmi.n	800d00e <__sflush_r+0xc6>
 800cf54:	684a      	ldr	r2, [r1, #4]
 800cf56:	2a00      	cmp	r2, #0
 800cf58:	dc04      	bgt.n	800cf64 <__sflush_r+0x1c>
 800cf5a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800cf5c:	2a00      	cmp	r2, #0
 800cf5e:	dc01      	bgt.n	800cf64 <__sflush_r+0x1c>
 800cf60:	2000      	movs	r0, #0
 800cf62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf64:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cf66:	2f00      	cmp	r7, #0
 800cf68:	d0fa      	beq.n	800cf60 <__sflush_r+0x18>
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	2080      	movs	r0, #128	; 0x80
 800cf6e:	682e      	ldr	r6, [r5, #0]
 800cf70:	602a      	str	r2, [r5, #0]
 800cf72:	001a      	movs	r2, r3
 800cf74:	0140      	lsls	r0, r0, #5
 800cf76:	6a21      	ldr	r1, [r4, #32]
 800cf78:	4002      	ands	r2, r0
 800cf7a:	4203      	tst	r3, r0
 800cf7c:	d034      	beq.n	800cfe8 <__sflush_r+0xa0>
 800cf7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf80:	89a3      	ldrh	r3, [r4, #12]
 800cf82:	075b      	lsls	r3, r3, #29
 800cf84:	d506      	bpl.n	800cf94 <__sflush_r+0x4c>
 800cf86:	6863      	ldr	r3, [r4, #4]
 800cf88:	1ac0      	subs	r0, r0, r3
 800cf8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <__sflush_r+0x4c>
 800cf90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf92:	1ac0      	subs	r0, r0, r3
 800cf94:	0002      	movs	r2, r0
 800cf96:	2300      	movs	r3, #0
 800cf98:	0028      	movs	r0, r5
 800cf9a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cf9c:	6a21      	ldr	r1, [r4, #32]
 800cf9e:	47b8      	blx	r7
 800cfa0:	89a2      	ldrh	r2, [r4, #12]
 800cfa2:	1c43      	adds	r3, r0, #1
 800cfa4:	d106      	bne.n	800cfb4 <__sflush_r+0x6c>
 800cfa6:	6829      	ldr	r1, [r5, #0]
 800cfa8:	291d      	cmp	r1, #29
 800cfaa:	d82c      	bhi.n	800d006 <__sflush_r+0xbe>
 800cfac:	4b2a      	ldr	r3, [pc, #168]	; (800d058 <__sflush_r+0x110>)
 800cfae:	410b      	asrs	r3, r1
 800cfb0:	07db      	lsls	r3, r3, #31
 800cfb2:	d428      	bmi.n	800d006 <__sflush_r+0xbe>
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	6063      	str	r3, [r4, #4]
 800cfb8:	6923      	ldr	r3, [r4, #16]
 800cfba:	6023      	str	r3, [r4, #0]
 800cfbc:	04d2      	lsls	r2, r2, #19
 800cfbe:	d505      	bpl.n	800cfcc <__sflush_r+0x84>
 800cfc0:	1c43      	adds	r3, r0, #1
 800cfc2:	d102      	bne.n	800cfca <__sflush_r+0x82>
 800cfc4:	682b      	ldr	r3, [r5, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d100      	bne.n	800cfcc <__sflush_r+0x84>
 800cfca:	6560      	str	r0, [r4, #84]	; 0x54
 800cfcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfce:	602e      	str	r6, [r5, #0]
 800cfd0:	2900      	cmp	r1, #0
 800cfd2:	d0c5      	beq.n	800cf60 <__sflush_r+0x18>
 800cfd4:	0023      	movs	r3, r4
 800cfd6:	3344      	adds	r3, #68	; 0x44
 800cfd8:	4299      	cmp	r1, r3
 800cfda:	d002      	beq.n	800cfe2 <__sflush_r+0x9a>
 800cfdc:	0028      	movs	r0, r5
 800cfde:	f7fe f9d9 	bl	800b394 <_free_r>
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	6360      	str	r0, [r4, #52]	; 0x34
 800cfe6:	e7bc      	b.n	800cf62 <__sflush_r+0x1a>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	0028      	movs	r0, r5
 800cfec:	47b8      	blx	r7
 800cfee:	1c43      	adds	r3, r0, #1
 800cff0:	d1c6      	bne.n	800cf80 <__sflush_r+0x38>
 800cff2:	682b      	ldr	r3, [r5, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d0c3      	beq.n	800cf80 <__sflush_r+0x38>
 800cff8:	2b1d      	cmp	r3, #29
 800cffa:	d001      	beq.n	800d000 <__sflush_r+0xb8>
 800cffc:	2b16      	cmp	r3, #22
 800cffe:	d101      	bne.n	800d004 <__sflush_r+0xbc>
 800d000:	602e      	str	r6, [r5, #0]
 800d002:	e7ad      	b.n	800cf60 <__sflush_r+0x18>
 800d004:	89a2      	ldrh	r2, [r4, #12]
 800d006:	2340      	movs	r3, #64	; 0x40
 800d008:	4313      	orrs	r3, r2
 800d00a:	81a3      	strh	r3, [r4, #12]
 800d00c:	e7a9      	b.n	800cf62 <__sflush_r+0x1a>
 800d00e:	690e      	ldr	r6, [r1, #16]
 800d010:	2e00      	cmp	r6, #0
 800d012:	d0a5      	beq.n	800cf60 <__sflush_r+0x18>
 800d014:	680f      	ldr	r7, [r1, #0]
 800d016:	600e      	str	r6, [r1, #0]
 800d018:	1bba      	subs	r2, r7, r6
 800d01a:	9201      	str	r2, [sp, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	079b      	lsls	r3, r3, #30
 800d020:	d100      	bne.n	800d024 <__sflush_r+0xdc>
 800d022:	694a      	ldr	r2, [r1, #20]
 800d024:	60a2      	str	r2, [r4, #8]
 800d026:	9b01      	ldr	r3, [sp, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	dd99      	ble.n	800cf60 <__sflush_r+0x18>
 800d02c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d02e:	0032      	movs	r2, r6
 800d030:	001f      	movs	r7, r3
 800d032:	0028      	movs	r0, r5
 800d034:	9b01      	ldr	r3, [sp, #4]
 800d036:	6a21      	ldr	r1, [r4, #32]
 800d038:	47b8      	blx	r7
 800d03a:	2800      	cmp	r0, #0
 800d03c:	dc06      	bgt.n	800d04c <__sflush_r+0x104>
 800d03e:	2340      	movs	r3, #64	; 0x40
 800d040:	2001      	movs	r0, #1
 800d042:	89a2      	ldrh	r2, [r4, #12]
 800d044:	4240      	negs	r0, r0
 800d046:	4313      	orrs	r3, r2
 800d048:	81a3      	strh	r3, [r4, #12]
 800d04a:	e78a      	b.n	800cf62 <__sflush_r+0x1a>
 800d04c:	9b01      	ldr	r3, [sp, #4]
 800d04e:	1836      	adds	r6, r6, r0
 800d050:	1a1b      	subs	r3, r3, r0
 800d052:	9301      	str	r3, [sp, #4]
 800d054:	e7e7      	b.n	800d026 <__sflush_r+0xde>
 800d056:	46c0      	nop			; (mov r8, r8)
 800d058:	dfbffffe 	.word	0xdfbffffe

0800d05c <_fflush_r>:
 800d05c:	690b      	ldr	r3, [r1, #16]
 800d05e:	b570      	push	{r4, r5, r6, lr}
 800d060:	0005      	movs	r5, r0
 800d062:	000c      	movs	r4, r1
 800d064:	2b00      	cmp	r3, #0
 800d066:	d102      	bne.n	800d06e <_fflush_r+0x12>
 800d068:	2500      	movs	r5, #0
 800d06a:	0028      	movs	r0, r5
 800d06c:	bd70      	pop	{r4, r5, r6, pc}
 800d06e:	2800      	cmp	r0, #0
 800d070:	d004      	beq.n	800d07c <_fflush_r+0x20>
 800d072:	6a03      	ldr	r3, [r0, #32]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d101      	bne.n	800d07c <_fflush_r+0x20>
 800d078:	f7fd f9b8 	bl	800a3ec <__sinit>
 800d07c:	220c      	movs	r2, #12
 800d07e:	5ea3      	ldrsh	r3, [r4, r2]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d0f1      	beq.n	800d068 <_fflush_r+0xc>
 800d084:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d086:	07d2      	lsls	r2, r2, #31
 800d088:	d404      	bmi.n	800d094 <_fflush_r+0x38>
 800d08a:	059b      	lsls	r3, r3, #22
 800d08c:	d402      	bmi.n	800d094 <_fflush_r+0x38>
 800d08e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d090:	f7fd fad1 	bl	800a636 <__retarget_lock_acquire_recursive>
 800d094:	0028      	movs	r0, r5
 800d096:	0021      	movs	r1, r4
 800d098:	f7ff ff56 	bl	800cf48 <__sflush_r>
 800d09c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d09e:	0005      	movs	r5, r0
 800d0a0:	07db      	lsls	r3, r3, #31
 800d0a2:	d4e2      	bmi.n	800d06a <_fflush_r+0xe>
 800d0a4:	89a3      	ldrh	r3, [r4, #12]
 800d0a6:	059b      	lsls	r3, r3, #22
 800d0a8:	d4df      	bmi.n	800d06a <_fflush_r+0xe>
 800d0aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0ac:	f7fd fac4 	bl	800a638 <__retarget_lock_release_recursive>
 800d0b0:	e7db      	b.n	800d06a <_fflush_r+0xe>

0800d0b2 <memmove>:
 800d0b2:	b510      	push	{r4, lr}
 800d0b4:	4288      	cmp	r0, r1
 800d0b6:	d902      	bls.n	800d0be <memmove+0xc>
 800d0b8:	188b      	adds	r3, r1, r2
 800d0ba:	4298      	cmp	r0, r3
 800d0bc:	d303      	bcc.n	800d0c6 <memmove+0x14>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	e007      	b.n	800d0d2 <memmove+0x20>
 800d0c2:	5c8b      	ldrb	r3, [r1, r2]
 800d0c4:	5483      	strb	r3, [r0, r2]
 800d0c6:	3a01      	subs	r2, #1
 800d0c8:	d2fb      	bcs.n	800d0c2 <memmove+0x10>
 800d0ca:	bd10      	pop	{r4, pc}
 800d0cc:	5ccc      	ldrb	r4, [r1, r3]
 800d0ce:	54c4      	strb	r4, [r0, r3]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d1fa      	bne.n	800d0cc <memmove+0x1a>
 800d0d6:	e7f8      	b.n	800d0ca <memmove+0x18>

0800d0d8 <strncmp>:
 800d0d8:	b530      	push	{r4, r5, lr}
 800d0da:	0005      	movs	r5, r0
 800d0dc:	1e10      	subs	r0, r2, #0
 800d0de:	d00b      	beq.n	800d0f8 <strncmp+0x20>
 800d0e0:	2400      	movs	r4, #0
 800d0e2:	3a01      	subs	r2, #1
 800d0e4:	5d2b      	ldrb	r3, [r5, r4]
 800d0e6:	5d08      	ldrb	r0, [r1, r4]
 800d0e8:	4283      	cmp	r3, r0
 800d0ea:	d104      	bne.n	800d0f6 <strncmp+0x1e>
 800d0ec:	42a2      	cmp	r2, r4
 800d0ee:	d002      	beq.n	800d0f6 <strncmp+0x1e>
 800d0f0:	3401      	adds	r4, #1
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1f6      	bne.n	800d0e4 <strncmp+0xc>
 800d0f6:	1a18      	subs	r0, r3, r0
 800d0f8:	bd30      	pop	{r4, r5, pc}
	...

0800d0fc <_sbrk_r>:
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	b570      	push	{r4, r5, r6, lr}
 800d100:	4d06      	ldr	r5, [pc, #24]	; (800d11c <_sbrk_r+0x20>)
 800d102:	0004      	movs	r4, r0
 800d104:	0008      	movs	r0, r1
 800d106:	602b      	str	r3, [r5, #0]
 800d108:	f7f6 fecc 	bl	8003ea4 <_sbrk>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	d103      	bne.n	800d118 <_sbrk_r+0x1c>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d000      	beq.n	800d118 <_sbrk_r+0x1c>
 800d116:	6023      	str	r3, [r4, #0]
 800d118:	bd70      	pop	{r4, r5, r6, pc}
 800d11a:	46c0      	nop			; (mov r8, r8)
 800d11c:	20000664 	.word	0x20000664

0800d120 <memcpy>:
 800d120:	2300      	movs	r3, #0
 800d122:	b510      	push	{r4, lr}
 800d124:	429a      	cmp	r2, r3
 800d126:	d100      	bne.n	800d12a <memcpy+0xa>
 800d128:	bd10      	pop	{r4, pc}
 800d12a:	5ccc      	ldrb	r4, [r1, r3]
 800d12c:	54c4      	strb	r4, [r0, r3]
 800d12e:	3301      	adds	r3, #1
 800d130:	e7f8      	b.n	800d124 <memcpy+0x4>
	...

0800d134 <nan>:
 800d134:	2000      	movs	r0, #0
 800d136:	4901      	ldr	r1, [pc, #4]	; (800d13c <nan+0x8>)
 800d138:	4770      	bx	lr
 800d13a:	46c0      	nop			; (mov r8, r8)
 800d13c:	7ff80000 	.word	0x7ff80000

0800d140 <__assert_func>:
 800d140:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d142:	0014      	movs	r4, r2
 800d144:	001a      	movs	r2, r3
 800d146:	4b09      	ldr	r3, [pc, #36]	; (800d16c <__assert_func+0x2c>)
 800d148:	0005      	movs	r5, r0
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	000e      	movs	r6, r1
 800d14e:	68d8      	ldr	r0, [r3, #12]
 800d150:	4b07      	ldr	r3, [pc, #28]	; (800d170 <__assert_func+0x30>)
 800d152:	2c00      	cmp	r4, #0
 800d154:	d101      	bne.n	800d15a <__assert_func+0x1a>
 800d156:	4b07      	ldr	r3, [pc, #28]	; (800d174 <__assert_func+0x34>)
 800d158:	001c      	movs	r4, r3
 800d15a:	4907      	ldr	r1, [pc, #28]	; (800d178 <__assert_func+0x38>)
 800d15c:	9301      	str	r3, [sp, #4]
 800d15e:	9402      	str	r4, [sp, #8]
 800d160:	002b      	movs	r3, r5
 800d162:	9600      	str	r6, [sp, #0]
 800d164:	f000 fbe2 	bl	800d92c <fiprintf>
 800d168:	f000 fbf0 	bl	800d94c <abort>
 800d16c:	2000007c 	.word	0x2000007c
 800d170:	0800e872 	.word	0x0800e872
 800d174:	0800e8ad 	.word	0x0800e8ad
 800d178:	0800e87f 	.word	0x0800e87f

0800d17c <_calloc_r>:
 800d17c:	b570      	push	{r4, r5, r6, lr}
 800d17e:	0c0b      	lsrs	r3, r1, #16
 800d180:	0c15      	lsrs	r5, r2, #16
 800d182:	2b00      	cmp	r3, #0
 800d184:	d11e      	bne.n	800d1c4 <_calloc_r+0x48>
 800d186:	2d00      	cmp	r5, #0
 800d188:	d10c      	bne.n	800d1a4 <_calloc_r+0x28>
 800d18a:	b289      	uxth	r1, r1
 800d18c:	b294      	uxth	r4, r2
 800d18e:	434c      	muls	r4, r1
 800d190:	0021      	movs	r1, r4
 800d192:	f7fe f975 	bl	800b480 <_malloc_r>
 800d196:	1e05      	subs	r5, r0, #0
 800d198:	d01b      	beq.n	800d1d2 <_calloc_r+0x56>
 800d19a:	0022      	movs	r2, r4
 800d19c:	2100      	movs	r1, #0
 800d19e:	f7fd f9c5 	bl	800a52c <memset>
 800d1a2:	e016      	b.n	800d1d2 <_calloc_r+0x56>
 800d1a4:	1c2b      	adds	r3, r5, #0
 800d1a6:	1c0c      	adds	r4, r1, #0
 800d1a8:	b289      	uxth	r1, r1
 800d1aa:	b292      	uxth	r2, r2
 800d1ac:	434a      	muls	r2, r1
 800d1ae:	b2a1      	uxth	r1, r4
 800d1b0:	b29c      	uxth	r4, r3
 800d1b2:	434c      	muls	r4, r1
 800d1b4:	0c13      	lsrs	r3, r2, #16
 800d1b6:	18e4      	adds	r4, r4, r3
 800d1b8:	0c23      	lsrs	r3, r4, #16
 800d1ba:	d107      	bne.n	800d1cc <_calloc_r+0x50>
 800d1bc:	0424      	lsls	r4, r4, #16
 800d1be:	b292      	uxth	r2, r2
 800d1c0:	4314      	orrs	r4, r2
 800d1c2:	e7e5      	b.n	800d190 <_calloc_r+0x14>
 800d1c4:	2d00      	cmp	r5, #0
 800d1c6:	d101      	bne.n	800d1cc <_calloc_r+0x50>
 800d1c8:	1c14      	adds	r4, r2, #0
 800d1ca:	e7ed      	b.n	800d1a8 <_calloc_r+0x2c>
 800d1cc:	230c      	movs	r3, #12
 800d1ce:	2500      	movs	r5, #0
 800d1d0:	6003      	str	r3, [r0, #0]
 800d1d2:	0028      	movs	r0, r5
 800d1d4:	bd70      	pop	{r4, r5, r6, pc}

0800d1d6 <rshift>:
 800d1d6:	0002      	movs	r2, r0
 800d1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1da:	6904      	ldr	r4, [r0, #16]
 800d1dc:	114b      	asrs	r3, r1, #5
 800d1de:	b085      	sub	sp, #20
 800d1e0:	3214      	adds	r2, #20
 800d1e2:	9302      	str	r3, [sp, #8]
 800d1e4:	114d      	asrs	r5, r1, #5
 800d1e6:	0013      	movs	r3, r2
 800d1e8:	42ac      	cmp	r4, r5
 800d1ea:	dd32      	ble.n	800d252 <rshift+0x7c>
 800d1ec:	261f      	movs	r6, #31
 800d1ee:	000f      	movs	r7, r1
 800d1f0:	114b      	asrs	r3, r1, #5
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	00a5      	lsls	r5, r4, #2
 800d1f6:	18d3      	adds	r3, r2, r3
 800d1f8:	4037      	ands	r7, r6
 800d1fa:	1955      	adds	r5, r2, r5
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	9701      	str	r7, [sp, #4]
 800d200:	4231      	tst	r1, r6
 800d202:	d10d      	bne.n	800d220 <rshift+0x4a>
 800d204:	0016      	movs	r6, r2
 800d206:	0019      	movs	r1, r3
 800d208:	428d      	cmp	r5, r1
 800d20a:	d836      	bhi.n	800d27a <rshift+0xa4>
 800d20c:	9900      	ldr	r1, [sp, #0]
 800d20e:	2300      	movs	r3, #0
 800d210:	3903      	subs	r1, #3
 800d212:	428d      	cmp	r5, r1
 800d214:	d302      	bcc.n	800d21c <rshift+0x46>
 800d216:	9b02      	ldr	r3, [sp, #8]
 800d218:	1ae4      	subs	r4, r4, r3
 800d21a:	00a3      	lsls	r3, r4, #2
 800d21c:	18d3      	adds	r3, r2, r3
 800d21e:	e018      	b.n	800d252 <rshift+0x7c>
 800d220:	2120      	movs	r1, #32
 800d222:	9e01      	ldr	r6, [sp, #4]
 800d224:	9f01      	ldr	r7, [sp, #4]
 800d226:	1b89      	subs	r1, r1, r6
 800d228:	9e00      	ldr	r6, [sp, #0]
 800d22a:	9103      	str	r1, [sp, #12]
 800d22c:	ce02      	ldmia	r6!, {r1}
 800d22e:	4694      	mov	ip, r2
 800d230:	40f9      	lsrs	r1, r7
 800d232:	42b5      	cmp	r5, r6
 800d234:	d816      	bhi.n	800d264 <rshift+0x8e>
 800d236:	9e00      	ldr	r6, [sp, #0]
 800d238:	2300      	movs	r3, #0
 800d23a:	3601      	adds	r6, #1
 800d23c:	42b5      	cmp	r5, r6
 800d23e:	d303      	bcc.n	800d248 <rshift+0x72>
 800d240:	9b02      	ldr	r3, [sp, #8]
 800d242:	1ae3      	subs	r3, r4, r3
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	3b04      	subs	r3, #4
 800d248:	18d3      	adds	r3, r2, r3
 800d24a:	6019      	str	r1, [r3, #0]
 800d24c:	2900      	cmp	r1, #0
 800d24e:	d000      	beq.n	800d252 <rshift+0x7c>
 800d250:	3304      	adds	r3, #4
 800d252:	1a99      	subs	r1, r3, r2
 800d254:	1089      	asrs	r1, r1, #2
 800d256:	6101      	str	r1, [r0, #16]
 800d258:	4293      	cmp	r3, r2
 800d25a:	d101      	bne.n	800d260 <rshift+0x8a>
 800d25c:	2300      	movs	r3, #0
 800d25e:	6143      	str	r3, [r0, #20]
 800d260:	b005      	add	sp, #20
 800d262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d264:	6837      	ldr	r7, [r6, #0]
 800d266:	9b03      	ldr	r3, [sp, #12]
 800d268:	409f      	lsls	r7, r3
 800d26a:	430f      	orrs	r7, r1
 800d26c:	4661      	mov	r1, ip
 800d26e:	c180      	stmia	r1!, {r7}
 800d270:	468c      	mov	ip, r1
 800d272:	9b01      	ldr	r3, [sp, #4]
 800d274:	ce02      	ldmia	r6!, {r1}
 800d276:	40d9      	lsrs	r1, r3
 800d278:	e7db      	b.n	800d232 <rshift+0x5c>
 800d27a:	c980      	ldmia	r1!, {r7}
 800d27c:	c680      	stmia	r6!, {r7}
 800d27e:	e7c3      	b.n	800d208 <rshift+0x32>

0800d280 <__hexdig_fun>:
 800d280:	0002      	movs	r2, r0
 800d282:	3a30      	subs	r2, #48	; 0x30
 800d284:	0003      	movs	r3, r0
 800d286:	2a09      	cmp	r2, #9
 800d288:	d802      	bhi.n	800d290 <__hexdig_fun+0x10>
 800d28a:	3b20      	subs	r3, #32
 800d28c:	b2d8      	uxtb	r0, r3
 800d28e:	4770      	bx	lr
 800d290:	0002      	movs	r2, r0
 800d292:	3a61      	subs	r2, #97	; 0x61
 800d294:	2a05      	cmp	r2, #5
 800d296:	d801      	bhi.n	800d29c <__hexdig_fun+0x1c>
 800d298:	3b47      	subs	r3, #71	; 0x47
 800d29a:	e7f7      	b.n	800d28c <__hexdig_fun+0xc>
 800d29c:	001a      	movs	r2, r3
 800d29e:	3a41      	subs	r2, #65	; 0x41
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	2a05      	cmp	r2, #5
 800d2a4:	d8f3      	bhi.n	800d28e <__hexdig_fun+0xe>
 800d2a6:	3b27      	subs	r3, #39	; 0x27
 800d2a8:	e7f0      	b.n	800d28c <__hexdig_fun+0xc>
	...

0800d2ac <__gethex>:
 800d2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ae:	b089      	sub	sp, #36	; 0x24
 800d2b0:	9307      	str	r3, [sp, #28]
 800d2b2:	2302      	movs	r3, #2
 800d2b4:	9201      	str	r2, [sp, #4]
 800d2b6:	680a      	ldr	r2, [r1, #0]
 800d2b8:	425b      	negs	r3, r3
 800d2ba:	9003      	str	r0, [sp, #12]
 800d2bc:	9106      	str	r1, [sp, #24]
 800d2be:	1c96      	adds	r6, r2, #2
 800d2c0:	1a9b      	subs	r3, r3, r2
 800d2c2:	199a      	adds	r2, r3, r6
 800d2c4:	9600      	str	r6, [sp, #0]
 800d2c6:	9205      	str	r2, [sp, #20]
 800d2c8:	9a00      	ldr	r2, [sp, #0]
 800d2ca:	3601      	adds	r6, #1
 800d2cc:	7810      	ldrb	r0, [r2, #0]
 800d2ce:	2830      	cmp	r0, #48	; 0x30
 800d2d0:	d0f7      	beq.n	800d2c2 <__gethex+0x16>
 800d2d2:	f7ff ffd5 	bl	800d280 <__hexdig_fun>
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	001d      	movs	r5, r3
 800d2da:	9302      	str	r3, [sp, #8]
 800d2dc:	4298      	cmp	r0, r3
 800d2de:	d11d      	bne.n	800d31c <__gethex+0x70>
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	49a6      	ldr	r1, [pc, #664]	; (800d57c <__gethex+0x2d0>)
 800d2e4:	9800      	ldr	r0, [sp, #0]
 800d2e6:	f7ff fef7 	bl	800d0d8 <strncmp>
 800d2ea:	0007      	movs	r7, r0
 800d2ec:	42a8      	cmp	r0, r5
 800d2ee:	d169      	bne.n	800d3c4 <__gethex+0x118>
 800d2f0:	9b00      	ldr	r3, [sp, #0]
 800d2f2:	0034      	movs	r4, r6
 800d2f4:	7858      	ldrb	r0, [r3, #1]
 800d2f6:	f7ff ffc3 	bl	800d280 <__hexdig_fun>
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	9302      	str	r3, [sp, #8]
 800d2fe:	42a8      	cmp	r0, r5
 800d300:	d02f      	beq.n	800d362 <__gethex+0xb6>
 800d302:	9600      	str	r6, [sp, #0]
 800d304:	9b00      	ldr	r3, [sp, #0]
 800d306:	7818      	ldrb	r0, [r3, #0]
 800d308:	2830      	cmp	r0, #48	; 0x30
 800d30a:	d009      	beq.n	800d320 <__gethex+0x74>
 800d30c:	f7ff ffb8 	bl	800d280 <__hexdig_fun>
 800d310:	4242      	negs	r2, r0
 800d312:	4142      	adcs	r2, r0
 800d314:	2301      	movs	r3, #1
 800d316:	0035      	movs	r5, r6
 800d318:	9202      	str	r2, [sp, #8]
 800d31a:	9305      	str	r3, [sp, #20]
 800d31c:	9c00      	ldr	r4, [sp, #0]
 800d31e:	e004      	b.n	800d32a <__gethex+0x7e>
 800d320:	9b00      	ldr	r3, [sp, #0]
 800d322:	3301      	adds	r3, #1
 800d324:	9300      	str	r3, [sp, #0]
 800d326:	e7ed      	b.n	800d304 <__gethex+0x58>
 800d328:	3401      	adds	r4, #1
 800d32a:	7820      	ldrb	r0, [r4, #0]
 800d32c:	f7ff ffa8 	bl	800d280 <__hexdig_fun>
 800d330:	1e07      	subs	r7, r0, #0
 800d332:	d1f9      	bne.n	800d328 <__gethex+0x7c>
 800d334:	2201      	movs	r2, #1
 800d336:	0020      	movs	r0, r4
 800d338:	4990      	ldr	r1, [pc, #576]	; (800d57c <__gethex+0x2d0>)
 800d33a:	f7ff fecd 	bl	800d0d8 <strncmp>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d10d      	bne.n	800d35e <__gethex+0xb2>
 800d342:	2d00      	cmp	r5, #0
 800d344:	d106      	bne.n	800d354 <__gethex+0xa8>
 800d346:	3401      	adds	r4, #1
 800d348:	0025      	movs	r5, r4
 800d34a:	7820      	ldrb	r0, [r4, #0]
 800d34c:	f7ff ff98 	bl	800d280 <__hexdig_fun>
 800d350:	2800      	cmp	r0, #0
 800d352:	d102      	bne.n	800d35a <__gethex+0xae>
 800d354:	1b2d      	subs	r5, r5, r4
 800d356:	00af      	lsls	r7, r5, #2
 800d358:	e003      	b.n	800d362 <__gethex+0xb6>
 800d35a:	3401      	adds	r4, #1
 800d35c:	e7f5      	b.n	800d34a <__gethex+0x9e>
 800d35e:	2d00      	cmp	r5, #0
 800d360:	d1f8      	bne.n	800d354 <__gethex+0xa8>
 800d362:	2220      	movs	r2, #32
 800d364:	7823      	ldrb	r3, [r4, #0]
 800d366:	0026      	movs	r6, r4
 800d368:	4393      	bics	r3, r2
 800d36a:	2b50      	cmp	r3, #80	; 0x50
 800d36c:	d11d      	bne.n	800d3aa <__gethex+0xfe>
 800d36e:	7863      	ldrb	r3, [r4, #1]
 800d370:	2b2b      	cmp	r3, #43	; 0x2b
 800d372:	d02c      	beq.n	800d3ce <__gethex+0x122>
 800d374:	2b2d      	cmp	r3, #45	; 0x2d
 800d376:	d02e      	beq.n	800d3d6 <__gethex+0x12a>
 800d378:	2300      	movs	r3, #0
 800d37a:	1c66      	adds	r6, r4, #1
 800d37c:	9304      	str	r3, [sp, #16]
 800d37e:	7830      	ldrb	r0, [r6, #0]
 800d380:	f7ff ff7e 	bl	800d280 <__hexdig_fun>
 800d384:	1e43      	subs	r3, r0, #1
 800d386:	b2db      	uxtb	r3, r3
 800d388:	2b18      	cmp	r3, #24
 800d38a:	d82b      	bhi.n	800d3e4 <__gethex+0x138>
 800d38c:	3810      	subs	r0, #16
 800d38e:	0005      	movs	r5, r0
 800d390:	7870      	ldrb	r0, [r6, #1]
 800d392:	f7ff ff75 	bl	800d280 <__hexdig_fun>
 800d396:	1e43      	subs	r3, r0, #1
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	3601      	adds	r6, #1
 800d39c:	2b18      	cmp	r3, #24
 800d39e:	d91c      	bls.n	800d3da <__gethex+0x12e>
 800d3a0:	9b04      	ldr	r3, [sp, #16]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d000      	beq.n	800d3a8 <__gethex+0xfc>
 800d3a6:	426d      	negs	r5, r5
 800d3a8:	197f      	adds	r7, r7, r5
 800d3aa:	9b06      	ldr	r3, [sp, #24]
 800d3ac:	601e      	str	r6, [r3, #0]
 800d3ae:	9b02      	ldr	r3, [sp, #8]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d019      	beq.n	800d3e8 <__gethex+0x13c>
 800d3b4:	2600      	movs	r6, #0
 800d3b6:	9b05      	ldr	r3, [sp, #20]
 800d3b8:	42b3      	cmp	r3, r6
 800d3ba:	d100      	bne.n	800d3be <__gethex+0x112>
 800d3bc:	3606      	adds	r6, #6
 800d3be:	0030      	movs	r0, r6
 800d3c0:	b009      	add	sp, #36	; 0x24
 800d3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	2700      	movs	r7, #0
 800d3c8:	9c00      	ldr	r4, [sp, #0]
 800d3ca:	9302      	str	r3, [sp, #8]
 800d3cc:	e7c9      	b.n	800d362 <__gethex+0xb6>
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	9304      	str	r3, [sp, #16]
 800d3d2:	1ca6      	adds	r6, r4, #2
 800d3d4:	e7d3      	b.n	800d37e <__gethex+0xd2>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e7fa      	b.n	800d3d0 <__gethex+0x124>
 800d3da:	230a      	movs	r3, #10
 800d3dc:	435d      	muls	r5, r3
 800d3de:	182d      	adds	r5, r5, r0
 800d3e0:	3d10      	subs	r5, #16
 800d3e2:	e7d5      	b.n	800d390 <__gethex+0xe4>
 800d3e4:	0026      	movs	r6, r4
 800d3e6:	e7e0      	b.n	800d3aa <__gethex+0xfe>
 800d3e8:	9b00      	ldr	r3, [sp, #0]
 800d3ea:	9902      	ldr	r1, [sp, #8]
 800d3ec:	1ae3      	subs	r3, r4, r3
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	2b07      	cmp	r3, #7
 800d3f2:	dc0a      	bgt.n	800d40a <__gethex+0x15e>
 800d3f4:	9803      	ldr	r0, [sp, #12]
 800d3f6:	f7fe f8d5 	bl	800b5a4 <_Balloc>
 800d3fa:	1e05      	subs	r5, r0, #0
 800d3fc:	d108      	bne.n	800d410 <__gethex+0x164>
 800d3fe:	002a      	movs	r2, r5
 800d400:	21e4      	movs	r1, #228	; 0xe4
 800d402:	4b5f      	ldr	r3, [pc, #380]	; (800d580 <__gethex+0x2d4>)
 800d404:	485f      	ldr	r0, [pc, #380]	; (800d584 <__gethex+0x2d8>)
 800d406:	f7ff fe9b 	bl	800d140 <__assert_func>
 800d40a:	3101      	adds	r1, #1
 800d40c:	105b      	asrs	r3, r3, #1
 800d40e:	e7ef      	b.n	800d3f0 <__gethex+0x144>
 800d410:	0003      	movs	r3, r0
 800d412:	3314      	adds	r3, #20
 800d414:	9302      	str	r3, [sp, #8]
 800d416:	9305      	str	r3, [sp, #20]
 800d418:	2300      	movs	r3, #0
 800d41a:	001e      	movs	r6, r3
 800d41c:	9304      	str	r3, [sp, #16]
 800d41e:	9b00      	ldr	r3, [sp, #0]
 800d420:	42a3      	cmp	r3, r4
 800d422:	d33f      	bcc.n	800d4a4 <__gethex+0x1f8>
 800d424:	9c05      	ldr	r4, [sp, #20]
 800d426:	9b02      	ldr	r3, [sp, #8]
 800d428:	c440      	stmia	r4!, {r6}
 800d42a:	1ae4      	subs	r4, r4, r3
 800d42c:	10a4      	asrs	r4, r4, #2
 800d42e:	0030      	movs	r0, r6
 800d430:	612c      	str	r4, [r5, #16]
 800d432:	f7fe f9af 	bl	800b794 <__hi0bits>
 800d436:	9b01      	ldr	r3, [sp, #4]
 800d438:	0164      	lsls	r4, r4, #5
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	1a26      	subs	r6, r4, r0
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	429e      	cmp	r6, r3
 800d442:	dd51      	ble.n	800d4e8 <__gethex+0x23c>
 800d444:	1af6      	subs	r6, r6, r3
 800d446:	0031      	movs	r1, r6
 800d448:	0028      	movs	r0, r5
 800d44a:	f7fe fd43 	bl	800bed4 <__any_on>
 800d44e:	1e04      	subs	r4, r0, #0
 800d450:	d016      	beq.n	800d480 <__gethex+0x1d4>
 800d452:	2401      	movs	r4, #1
 800d454:	231f      	movs	r3, #31
 800d456:	0020      	movs	r0, r4
 800d458:	1e72      	subs	r2, r6, #1
 800d45a:	4013      	ands	r3, r2
 800d45c:	4098      	lsls	r0, r3
 800d45e:	0003      	movs	r3, r0
 800d460:	1151      	asrs	r1, r2, #5
 800d462:	9802      	ldr	r0, [sp, #8]
 800d464:	0089      	lsls	r1, r1, #2
 800d466:	5809      	ldr	r1, [r1, r0]
 800d468:	4219      	tst	r1, r3
 800d46a:	d009      	beq.n	800d480 <__gethex+0x1d4>
 800d46c:	42a2      	cmp	r2, r4
 800d46e:	dd06      	ble.n	800d47e <__gethex+0x1d2>
 800d470:	0028      	movs	r0, r5
 800d472:	1eb1      	subs	r1, r6, #2
 800d474:	f7fe fd2e 	bl	800bed4 <__any_on>
 800d478:	3402      	adds	r4, #2
 800d47a:	2800      	cmp	r0, #0
 800d47c:	d100      	bne.n	800d480 <__gethex+0x1d4>
 800d47e:	2402      	movs	r4, #2
 800d480:	0031      	movs	r1, r6
 800d482:	0028      	movs	r0, r5
 800d484:	f7ff fea7 	bl	800d1d6 <rshift>
 800d488:	19bf      	adds	r7, r7, r6
 800d48a:	9b01      	ldr	r3, [sp, #4]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	42bb      	cmp	r3, r7
 800d490:	da3a      	bge.n	800d508 <__gethex+0x25c>
 800d492:	0029      	movs	r1, r5
 800d494:	9803      	ldr	r0, [sp, #12]
 800d496:	f7fe f8c9 	bl	800b62c <_Bfree>
 800d49a:	2300      	movs	r3, #0
 800d49c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d49e:	26a3      	movs	r6, #163	; 0xa3
 800d4a0:	6013      	str	r3, [r2, #0]
 800d4a2:	e78c      	b.n	800d3be <__gethex+0x112>
 800d4a4:	3c01      	subs	r4, #1
 800d4a6:	7823      	ldrb	r3, [r4, #0]
 800d4a8:	2b2e      	cmp	r3, #46	; 0x2e
 800d4aa:	d012      	beq.n	800d4d2 <__gethex+0x226>
 800d4ac:	9b04      	ldr	r3, [sp, #16]
 800d4ae:	2b20      	cmp	r3, #32
 800d4b0:	d104      	bne.n	800d4bc <__gethex+0x210>
 800d4b2:	9b05      	ldr	r3, [sp, #20]
 800d4b4:	c340      	stmia	r3!, {r6}
 800d4b6:	2600      	movs	r6, #0
 800d4b8:	9305      	str	r3, [sp, #20]
 800d4ba:	9604      	str	r6, [sp, #16]
 800d4bc:	7820      	ldrb	r0, [r4, #0]
 800d4be:	f7ff fedf 	bl	800d280 <__hexdig_fun>
 800d4c2:	230f      	movs	r3, #15
 800d4c4:	4018      	ands	r0, r3
 800d4c6:	9b04      	ldr	r3, [sp, #16]
 800d4c8:	4098      	lsls	r0, r3
 800d4ca:	3304      	adds	r3, #4
 800d4cc:	4306      	orrs	r6, r0
 800d4ce:	9304      	str	r3, [sp, #16]
 800d4d0:	e7a5      	b.n	800d41e <__gethex+0x172>
 800d4d2:	9b00      	ldr	r3, [sp, #0]
 800d4d4:	42a3      	cmp	r3, r4
 800d4d6:	d8e9      	bhi.n	800d4ac <__gethex+0x200>
 800d4d8:	2201      	movs	r2, #1
 800d4da:	0020      	movs	r0, r4
 800d4dc:	4927      	ldr	r1, [pc, #156]	; (800d57c <__gethex+0x2d0>)
 800d4de:	f7ff fdfb 	bl	800d0d8 <strncmp>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d1e2      	bne.n	800d4ac <__gethex+0x200>
 800d4e6:	e79a      	b.n	800d41e <__gethex+0x172>
 800d4e8:	9b00      	ldr	r3, [sp, #0]
 800d4ea:	2400      	movs	r4, #0
 800d4ec:	429e      	cmp	r6, r3
 800d4ee:	dacc      	bge.n	800d48a <__gethex+0x1de>
 800d4f0:	1b9e      	subs	r6, r3, r6
 800d4f2:	0029      	movs	r1, r5
 800d4f4:	0032      	movs	r2, r6
 800d4f6:	9803      	ldr	r0, [sp, #12]
 800d4f8:	f7fe fab8 	bl	800ba6c <__lshift>
 800d4fc:	0003      	movs	r3, r0
 800d4fe:	3314      	adds	r3, #20
 800d500:	0005      	movs	r5, r0
 800d502:	1bbf      	subs	r7, r7, r6
 800d504:	9302      	str	r3, [sp, #8]
 800d506:	e7c0      	b.n	800d48a <__gethex+0x1de>
 800d508:	9b01      	ldr	r3, [sp, #4]
 800d50a:	685e      	ldr	r6, [r3, #4]
 800d50c:	42be      	cmp	r6, r7
 800d50e:	dd70      	ble.n	800d5f2 <__gethex+0x346>
 800d510:	9b00      	ldr	r3, [sp, #0]
 800d512:	1bf6      	subs	r6, r6, r7
 800d514:	42b3      	cmp	r3, r6
 800d516:	dc37      	bgt.n	800d588 <__gethex+0x2dc>
 800d518:	9b01      	ldr	r3, [sp, #4]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	d024      	beq.n	800d56a <__gethex+0x2be>
 800d520:	2b03      	cmp	r3, #3
 800d522:	d026      	beq.n	800d572 <__gethex+0x2c6>
 800d524:	2b01      	cmp	r3, #1
 800d526:	d117      	bne.n	800d558 <__gethex+0x2ac>
 800d528:	9b00      	ldr	r3, [sp, #0]
 800d52a:	42b3      	cmp	r3, r6
 800d52c:	d114      	bne.n	800d558 <__gethex+0x2ac>
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d10b      	bne.n	800d54a <__gethex+0x29e>
 800d532:	9b01      	ldr	r3, [sp, #4]
 800d534:	9a07      	ldr	r2, [sp, #28]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	2662      	movs	r6, #98	; 0x62
 800d53a:	6013      	str	r3, [r2, #0]
 800d53c:	2301      	movs	r3, #1
 800d53e:	9a02      	ldr	r2, [sp, #8]
 800d540:	612b      	str	r3, [r5, #16]
 800d542:	6013      	str	r3, [r2, #0]
 800d544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d546:	601d      	str	r5, [r3, #0]
 800d548:	e739      	b.n	800d3be <__gethex+0x112>
 800d54a:	9900      	ldr	r1, [sp, #0]
 800d54c:	0028      	movs	r0, r5
 800d54e:	3901      	subs	r1, #1
 800d550:	f7fe fcc0 	bl	800bed4 <__any_on>
 800d554:	2800      	cmp	r0, #0
 800d556:	d1ec      	bne.n	800d532 <__gethex+0x286>
 800d558:	0029      	movs	r1, r5
 800d55a:	9803      	ldr	r0, [sp, #12]
 800d55c:	f7fe f866 	bl	800b62c <_Bfree>
 800d560:	2300      	movs	r3, #0
 800d562:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d564:	2650      	movs	r6, #80	; 0x50
 800d566:	6013      	str	r3, [r2, #0]
 800d568:	e729      	b.n	800d3be <__gethex+0x112>
 800d56a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1f3      	bne.n	800d558 <__gethex+0x2ac>
 800d570:	e7df      	b.n	800d532 <__gethex+0x286>
 800d572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1dc      	bne.n	800d532 <__gethex+0x286>
 800d578:	e7ee      	b.n	800d558 <__gethex+0x2ac>
 800d57a:	46c0      	nop			; (mov r8, r8)
 800d57c:	0800e704 	.word	0x0800e704
 800d580:	0800e59d 	.word	0x0800e59d
 800d584:	0800e8ae 	.word	0x0800e8ae
 800d588:	1e77      	subs	r7, r6, #1
 800d58a:	2c00      	cmp	r4, #0
 800d58c:	d12f      	bne.n	800d5ee <__gethex+0x342>
 800d58e:	2f00      	cmp	r7, #0
 800d590:	d004      	beq.n	800d59c <__gethex+0x2f0>
 800d592:	0039      	movs	r1, r7
 800d594:	0028      	movs	r0, r5
 800d596:	f7fe fc9d 	bl	800bed4 <__any_on>
 800d59a:	0004      	movs	r4, r0
 800d59c:	231f      	movs	r3, #31
 800d59e:	117a      	asrs	r2, r7, #5
 800d5a0:	401f      	ands	r7, r3
 800d5a2:	3b1e      	subs	r3, #30
 800d5a4:	40bb      	lsls	r3, r7
 800d5a6:	9902      	ldr	r1, [sp, #8]
 800d5a8:	0092      	lsls	r2, r2, #2
 800d5aa:	5852      	ldr	r2, [r2, r1]
 800d5ac:	421a      	tst	r2, r3
 800d5ae:	d001      	beq.n	800d5b4 <__gethex+0x308>
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	431c      	orrs	r4, r3
 800d5b4:	9b00      	ldr	r3, [sp, #0]
 800d5b6:	0031      	movs	r1, r6
 800d5b8:	1b9b      	subs	r3, r3, r6
 800d5ba:	2602      	movs	r6, #2
 800d5bc:	0028      	movs	r0, r5
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	f7ff fe09 	bl	800d1d6 <rshift>
 800d5c4:	9b01      	ldr	r3, [sp, #4]
 800d5c6:	685f      	ldr	r7, [r3, #4]
 800d5c8:	2c00      	cmp	r4, #0
 800d5ca:	d041      	beq.n	800d650 <__gethex+0x3a4>
 800d5cc:	9b01      	ldr	r3, [sp, #4]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	d010      	beq.n	800d5f6 <__gethex+0x34a>
 800d5d4:	2b03      	cmp	r3, #3
 800d5d6:	d012      	beq.n	800d5fe <__gethex+0x352>
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d106      	bne.n	800d5ea <__gethex+0x33e>
 800d5dc:	07a2      	lsls	r2, r4, #30
 800d5de:	d504      	bpl.n	800d5ea <__gethex+0x33e>
 800d5e0:	9a02      	ldr	r2, [sp, #8]
 800d5e2:	6812      	ldr	r2, [r2, #0]
 800d5e4:	4314      	orrs	r4, r2
 800d5e6:	421c      	tst	r4, r3
 800d5e8:	d10c      	bne.n	800d604 <__gethex+0x358>
 800d5ea:	2310      	movs	r3, #16
 800d5ec:	e02f      	b.n	800d64e <__gethex+0x3a2>
 800d5ee:	2401      	movs	r4, #1
 800d5f0:	e7d4      	b.n	800d59c <__gethex+0x2f0>
 800d5f2:	2601      	movs	r6, #1
 800d5f4:	e7e8      	b.n	800d5c8 <__gethex+0x31c>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d5fa:	1a9b      	subs	r3, r3, r2
 800d5fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d600:	2b00      	cmp	r3, #0
 800d602:	d0f2      	beq.n	800d5ea <__gethex+0x33e>
 800d604:	692b      	ldr	r3, [r5, #16]
 800d606:	2000      	movs	r0, #0
 800d608:	9302      	str	r3, [sp, #8]
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	9304      	str	r3, [sp, #16]
 800d60e:	002b      	movs	r3, r5
 800d610:	9a04      	ldr	r2, [sp, #16]
 800d612:	3314      	adds	r3, #20
 800d614:	1899      	adds	r1, r3, r2
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	1c54      	adds	r4, r2, #1
 800d61a:	d01e      	beq.n	800d65a <__gethex+0x3ae>
 800d61c:	3201      	adds	r2, #1
 800d61e:	601a      	str	r2, [r3, #0]
 800d620:	002b      	movs	r3, r5
 800d622:	3314      	adds	r3, #20
 800d624:	2e02      	cmp	r6, #2
 800d626:	d141      	bne.n	800d6ac <__gethex+0x400>
 800d628:	9a01      	ldr	r2, [sp, #4]
 800d62a:	9900      	ldr	r1, [sp, #0]
 800d62c:	6812      	ldr	r2, [r2, #0]
 800d62e:	3a01      	subs	r2, #1
 800d630:	428a      	cmp	r2, r1
 800d632:	d10b      	bne.n	800d64c <__gethex+0x3a0>
 800d634:	221f      	movs	r2, #31
 800d636:	9800      	ldr	r0, [sp, #0]
 800d638:	1149      	asrs	r1, r1, #5
 800d63a:	4002      	ands	r2, r0
 800d63c:	2001      	movs	r0, #1
 800d63e:	0004      	movs	r4, r0
 800d640:	4094      	lsls	r4, r2
 800d642:	0089      	lsls	r1, r1, #2
 800d644:	58cb      	ldr	r3, [r1, r3]
 800d646:	4223      	tst	r3, r4
 800d648:	d000      	beq.n	800d64c <__gethex+0x3a0>
 800d64a:	2601      	movs	r6, #1
 800d64c:	2320      	movs	r3, #32
 800d64e:	431e      	orrs	r6, r3
 800d650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d652:	601d      	str	r5, [r3, #0]
 800d654:	9b07      	ldr	r3, [sp, #28]
 800d656:	601f      	str	r7, [r3, #0]
 800d658:	e6b1      	b.n	800d3be <__gethex+0x112>
 800d65a:	c301      	stmia	r3!, {r0}
 800d65c:	4299      	cmp	r1, r3
 800d65e:	d8da      	bhi.n	800d616 <__gethex+0x36a>
 800d660:	68ab      	ldr	r3, [r5, #8]
 800d662:	9a02      	ldr	r2, [sp, #8]
 800d664:	429a      	cmp	r2, r3
 800d666:	db18      	blt.n	800d69a <__gethex+0x3ee>
 800d668:	6869      	ldr	r1, [r5, #4]
 800d66a:	9803      	ldr	r0, [sp, #12]
 800d66c:	3101      	adds	r1, #1
 800d66e:	f7fd ff99 	bl	800b5a4 <_Balloc>
 800d672:	1e04      	subs	r4, r0, #0
 800d674:	d104      	bne.n	800d680 <__gethex+0x3d4>
 800d676:	0022      	movs	r2, r4
 800d678:	2184      	movs	r1, #132	; 0x84
 800d67a:	4b1c      	ldr	r3, [pc, #112]	; (800d6ec <__gethex+0x440>)
 800d67c:	481c      	ldr	r0, [pc, #112]	; (800d6f0 <__gethex+0x444>)
 800d67e:	e6c2      	b.n	800d406 <__gethex+0x15a>
 800d680:	0029      	movs	r1, r5
 800d682:	692a      	ldr	r2, [r5, #16]
 800d684:	310c      	adds	r1, #12
 800d686:	3202      	adds	r2, #2
 800d688:	0092      	lsls	r2, r2, #2
 800d68a:	300c      	adds	r0, #12
 800d68c:	f7ff fd48 	bl	800d120 <memcpy>
 800d690:	0029      	movs	r1, r5
 800d692:	9803      	ldr	r0, [sp, #12]
 800d694:	f7fd ffca 	bl	800b62c <_Bfree>
 800d698:	0025      	movs	r5, r4
 800d69a:	692b      	ldr	r3, [r5, #16]
 800d69c:	1c5a      	adds	r2, r3, #1
 800d69e:	612a      	str	r2, [r5, #16]
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	3304      	adds	r3, #4
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	18eb      	adds	r3, r5, r3
 800d6a8:	605a      	str	r2, [r3, #4]
 800d6aa:	e7b9      	b.n	800d620 <__gethex+0x374>
 800d6ac:	692a      	ldr	r2, [r5, #16]
 800d6ae:	9902      	ldr	r1, [sp, #8]
 800d6b0:	428a      	cmp	r2, r1
 800d6b2:	dd09      	ble.n	800d6c8 <__gethex+0x41c>
 800d6b4:	2101      	movs	r1, #1
 800d6b6:	0028      	movs	r0, r5
 800d6b8:	f7ff fd8d 	bl	800d1d6 <rshift>
 800d6bc:	9b01      	ldr	r3, [sp, #4]
 800d6be:	3701      	adds	r7, #1
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	42bb      	cmp	r3, r7
 800d6c4:	dac1      	bge.n	800d64a <__gethex+0x39e>
 800d6c6:	e6e4      	b.n	800d492 <__gethex+0x1e6>
 800d6c8:	221f      	movs	r2, #31
 800d6ca:	9c00      	ldr	r4, [sp, #0]
 800d6cc:	9900      	ldr	r1, [sp, #0]
 800d6ce:	2601      	movs	r6, #1
 800d6d0:	4014      	ands	r4, r2
 800d6d2:	4211      	tst	r1, r2
 800d6d4:	d0ba      	beq.n	800d64c <__gethex+0x3a0>
 800d6d6:	9a04      	ldr	r2, [sp, #16]
 800d6d8:	189b      	adds	r3, r3, r2
 800d6da:	3b04      	subs	r3, #4
 800d6dc:	6818      	ldr	r0, [r3, #0]
 800d6de:	f7fe f859 	bl	800b794 <__hi0bits>
 800d6e2:	2320      	movs	r3, #32
 800d6e4:	1b1b      	subs	r3, r3, r4
 800d6e6:	4298      	cmp	r0, r3
 800d6e8:	dbe4      	blt.n	800d6b4 <__gethex+0x408>
 800d6ea:	e7af      	b.n	800d64c <__gethex+0x3a0>
 800d6ec:	0800e59d 	.word	0x0800e59d
 800d6f0:	0800e8ae 	.word	0x0800e8ae

0800d6f4 <L_shift>:
 800d6f4:	2308      	movs	r3, #8
 800d6f6:	b570      	push	{r4, r5, r6, lr}
 800d6f8:	2520      	movs	r5, #32
 800d6fa:	1a9a      	subs	r2, r3, r2
 800d6fc:	0092      	lsls	r2, r2, #2
 800d6fe:	1aad      	subs	r5, r5, r2
 800d700:	6843      	ldr	r3, [r0, #4]
 800d702:	6804      	ldr	r4, [r0, #0]
 800d704:	001e      	movs	r6, r3
 800d706:	40ae      	lsls	r6, r5
 800d708:	40d3      	lsrs	r3, r2
 800d70a:	4334      	orrs	r4, r6
 800d70c:	6004      	str	r4, [r0, #0]
 800d70e:	6043      	str	r3, [r0, #4]
 800d710:	3004      	adds	r0, #4
 800d712:	4288      	cmp	r0, r1
 800d714:	d3f4      	bcc.n	800d700 <L_shift+0xc>
 800d716:	bd70      	pop	{r4, r5, r6, pc}

0800d718 <__match>:
 800d718:	b530      	push	{r4, r5, lr}
 800d71a:	6803      	ldr	r3, [r0, #0]
 800d71c:	780c      	ldrb	r4, [r1, #0]
 800d71e:	3301      	adds	r3, #1
 800d720:	2c00      	cmp	r4, #0
 800d722:	d102      	bne.n	800d72a <__match+0x12>
 800d724:	6003      	str	r3, [r0, #0]
 800d726:	2001      	movs	r0, #1
 800d728:	bd30      	pop	{r4, r5, pc}
 800d72a:	781a      	ldrb	r2, [r3, #0]
 800d72c:	0015      	movs	r5, r2
 800d72e:	3d41      	subs	r5, #65	; 0x41
 800d730:	2d19      	cmp	r5, #25
 800d732:	d800      	bhi.n	800d736 <__match+0x1e>
 800d734:	3220      	adds	r2, #32
 800d736:	3101      	adds	r1, #1
 800d738:	42a2      	cmp	r2, r4
 800d73a:	d0ef      	beq.n	800d71c <__match+0x4>
 800d73c:	2000      	movs	r0, #0
 800d73e:	e7f3      	b.n	800d728 <__match+0x10>

0800d740 <__hexnan>:
 800d740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d742:	680b      	ldr	r3, [r1, #0]
 800d744:	b08b      	sub	sp, #44	; 0x2c
 800d746:	9201      	str	r2, [sp, #4]
 800d748:	9901      	ldr	r1, [sp, #4]
 800d74a:	115a      	asrs	r2, r3, #5
 800d74c:	0092      	lsls	r2, r2, #2
 800d74e:	188a      	adds	r2, r1, r2
 800d750:	9202      	str	r2, [sp, #8]
 800d752:	0019      	movs	r1, r3
 800d754:	221f      	movs	r2, #31
 800d756:	4011      	ands	r1, r2
 800d758:	9008      	str	r0, [sp, #32]
 800d75a:	9106      	str	r1, [sp, #24]
 800d75c:	4213      	tst	r3, r2
 800d75e:	d002      	beq.n	800d766 <__hexnan+0x26>
 800d760:	9b02      	ldr	r3, [sp, #8]
 800d762:	3304      	adds	r3, #4
 800d764:	9302      	str	r3, [sp, #8]
 800d766:	9b02      	ldr	r3, [sp, #8]
 800d768:	2500      	movs	r5, #0
 800d76a:	1f1f      	subs	r7, r3, #4
 800d76c:	003e      	movs	r6, r7
 800d76e:	003c      	movs	r4, r7
 800d770:	9b08      	ldr	r3, [sp, #32]
 800d772:	603d      	str	r5, [r7, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	9507      	str	r5, [sp, #28]
 800d778:	9305      	str	r3, [sp, #20]
 800d77a:	9503      	str	r5, [sp, #12]
 800d77c:	9b05      	ldr	r3, [sp, #20]
 800d77e:	3301      	adds	r3, #1
 800d780:	9309      	str	r3, [sp, #36]	; 0x24
 800d782:	9b05      	ldr	r3, [sp, #20]
 800d784:	785b      	ldrb	r3, [r3, #1]
 800d786:	9304      	str	r3, [sp, #16]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d028      	beq.n	800d7de <__hexnan+0x9e>
 800d78c:	9804      	ldr	r0, [sp, #16]
 800d78e:	f7ff fd77 	bl	800d280 <__hexdig_fun>
 800d792:	2800      	cmp	r0, #0
 800d794:	d154      	bne.n	800d840 <__hexnan+0x100>
 800d796:	9b04      	ldr	r3, [sp, #16]
 800d798:	2b20      	cmp	r3, #32
 800d79a:	d819      	bhi.n	800d7d0 <__hexnan+0x90>
 800d79c:	9b03      	ldr	r3, [sp, #12]
 800d79e:	9a07      	ldr	r2, [sp, #28]
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	dd12      	ble.n	800d7ca <__hexnan+0x8a>
 800d7a4:	42b4      	cmp	r4, r6
 800d7a6:	d206      	bcs.n	800d7b6 <__hexnan+0x76>
 800d7a8:	2d07      	cmp	r5, #7
 800d7aa:	dc04      	bgt.n	800d7b6 <__hexnan+0x76>
 800d7ac:	002a      	movs	r2, r5
 800d7ae:	0031      	movs	r1, r6
 800d7b0:	0020      	movs	r0, r4
 800d7b2:	f7ff ff9f 	bl	800d6f4 <L_shift>
 800d7b6:	9b01      	ldr	r3, [sp, #4]
 800d7b8:	2508      	movs	r5, #8
 800d7ba:	429c      	cmp	r4, r3
 800d7bc:	d905      	bls.n	800d7ca <__hexnan+0x8a>
 800d7be:	1f26      	subs	r6, r4, #4
 800d7c0:	2500      	movs	r5, #0
 800d7c2:	0034      	movs	r4, r6
 800d7c4:	9b03      	ldr	r3, [sp, #12]
 800d7c6:	6035      	str	r5, [r6, #0]
 800d7c8:	9307      	str	r3, [sp, #28]
 800d7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7cc:	9305      	str	r3, [sp, #20]
 800d7ce:	e7d5      	b.n	800d77c <__hexnan+0x3c>
 800d7d0:	9b04      	ldr	r3, [sp, #16]
 800d7d2:	2b29      	cmp	r3, #41	; 0x29
 800d7d4:	d159      	bne.n	800d88a <__hexnan+0x14a>
 800d7d6:	9b05      	ldr	r3, [sp, #20]
 800d7d8:	9a08      	ldr	r2, [sp, #32]
 800d7da:	3302      	adds	r3, #2
 800d7dc:	6013      	str	r3, [r2, #0]
 800d7de:	9b03      	ldr	r3, [sp, #12]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d052      	beq.n	800d88a <__hexnan+0x14a>
 800d7e4:	42b4      	cmp	r4, r6
 800d7e6:	d206      	bcs.n	800d7f6 <__hexnan+0xb6>
 800d7e8:	2d07      	cmp	r5, #7
 800d7ea:	dc04      	bgt.n	800d7f6 <__hexnan+0xb6>
 800d7ec:	002a      	movs	r2, r5
 800d7ee:	0031      	movs	r1, r6
 800d7f0:	0020      	movs	r0, r4
 800d7f2:	f7ff ff7f 	bl	800d6f4 <L_shift>
 800d7f6:	9b01      	ldr	r3, [sp, #4]
 800d7f8:	429c      	cmp	r4, r3
 800d7fa:	d935      	bls.n	800d868 <__hexnan+0x128>
 800d7fc:	001a      	movs	r2, r3
 800d7fe:	0023      	movs	r3, r4
 800d800:	cb02      	ldmia	r3!, {r1}
 800d802:	c202      	stmia	r2!, {r1}
 800d804:	429f      	cmp	r7, r3
 800d806:	d2fb      	bcs.n	800d800 <__hexnan+0xc0>
 800d808:	9b02      	ldr	r3, [sp, #8]
 800d80a:	1c62      	adds	r2, r4, #1
 800d80c:	1ed9      	subs	r1, r3, #3
 800d80e:	2304      	movs	r3, #4
 800d810:	4291      	cmp	r1, r2
 800d812:	d305      	bcc.n	800d820 <__hexnan+0xe0>
 800d814:	9b02      	ldr	r3, [sp, #8]
 800d816:	3b04      	subs	r3, #4
 800d818:	1b1b      	subs	r3, r3, r4
 800d81a:	089b      	lsrs	r3, r3, #2
 800d81c:	3301      	adds	r3, #1
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	9a01      	ldr	r2, [sp, #4]
 800d822:	18d3      	adds	r3, r2, r3
 800d824:	2200      	movs	r2, #0
 800d826:	c304      	stmia	r3!, {r2}
 800d828:	429f      	cmp	r7, r3
 800d82a:	d2fc      	bcs.n	800d826 <__hexnan+0xe6>
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d104      	bne.n	800d83c <__hexnan+0xfc>
 800d832:	9b01      	ldr	r3, [sp, #4]
 800d834:	429f      	cmp	r7, r3
 800d836:	d126      	bne.n	800d886 <__hexnan+0x146>
 800d838:	2301      	movs	r3, #1
 800d83a:	603b      	str	r3, [r7, #0]
 800d83c:	2005      	movs	r0, #5
 800d83e:	e025      	b.n	800d88c <__hexnan+0x14c>
 800d840:	9b03      	ldr	r3, [sp, #12]
 800d842:	3501      	adds	r5, #1
 800d844:	3301      	adds	r3, #1
 800d846:	9303      	str	r3, [sp, #12]
 800d848:	2d08      	cmp	r5, #8
 800d84a:	dd06      	ble.n	800d85a <__hexnan+0x11a>
 800d84c:	9b01      	ldr	r3, [sp, #4]
 800d84e:	429c      	cmp	r4, r3
 800d850:	d9bb      	bls.n	800d7ca <__hexnan+0x8a>
 800d852:	2300      	movs	r3, #0
 800d854:	2501      	movs	r5, #1
 800d856:	3c04      	subs	r4, #4
 800d858:	6023      	str	r3, [r4, #0]
 800d85a:	220f      	movs	r2, #15
 800d85c:	6823      	ldr	r3, [r4, #0]
 800d85e:	4010      	ands	r0, r2
 800d860:	011b      	lsls	r3, r3, #4
 800d862:	4303      	orrs	r3, r0
 800d864:	6023      	str	r3, [r4, #0]
 800d866:	e7b0      	b.n	800d7ca <__hexnan+0x8a>
 800d868:	9b06      	ldr	r3, [sp, #24]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d0de      	beq.n	800d82c <__hexnan+0xec>
 800d86e:	2320      	movs	r3, #32
 800d870:	9a06      	ldr	r2, [sp, #24]
 800d872:	9902      	ldr	r1, [sp, #8]
 800d874:	1a9b      	subs	r3, r3, r2
 800d876:	2201      	movs	r2, #1
 800d878:	4252      	negs	r2, r2
 800d87a:	40da      	lsrs	r2, r3
 800d87c:	3904      	subs	r1, #4
 800d87e:	680b      	ldr	r3, [r1, #0]
 800d880:	4013      	ands	r3, r2
 800d882:	600b      	str	r3, [r1, #0]
 800d884:	e7d2      	b.n	800d82c <__hexnan+0xec>
 800d886:	3f04      	subs	r7, #4
 800d888:	e7d0      	b.n	800d82c <__hexnan+0xec>
 800d88a:	2004      	movs	r0, #4
 800d88c:	b00b      	add	sp, #44	; 0x2c
 800d88e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d890 <__ascii_mbtowc>:
 800d890:	b082      	sub	sp, #8
 800d892:	2900      	cmp	r1, #0
 800d894:	d100      	bne.n	800d898 <__ascii_mbtowc+0x8>
 800d896:	a901      	add	r1, sp, #4
 800d898:	1e10      	subs	r0, r2, #0
 800d89a:	d006      	beq.n	800d8aa <__ascii_mbtowc+0x1a>
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d006      	beq.n	800d8ae <__ascii_mbtowc+0x1e>
 800d8a0:	7813      	ldrb	r3, [r2, #0]
 800d8a2:	600b      	str	r3, [r1, #0]
 800d8a4:	7810      	ldrb	r0, [r2, #0]
 800d8a6:	1e43      	subs	r3, r0, #1
 800d8a8:	4198      	sbcs	r0, r3
 800d8aa:	b002      	add	sp, #8
 800d8ac:	4770      	bx	lr
 800d8ae:	2002      	movs	r0, #2
 800d8b0:	4240      	negs	r0, r0
 800d8b2:	e7fa      	b.n	800d8aa <__ascii_mbtowc+0x1a>

0800d8b4 <_realloc_r>:
 800d8b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8b6:	0007      	movs	r7, r0
 800d8b8:	000e      	movs	r6, r1
 800d8ba:	0014      	movs	r4, r2
 800d8bc:	2900      	cmp	r1, #0
 800d8be:	d105      	bne.n	800d8cc <_realloc_r+0x18>
 800d8c0:	0011      	movs	r1, r2
 800d8c2:	f7fd fddd 	bl	800b480 <_malloc_r>
 800d8c6:	0005      	movs	r5, r0
 800d8c8:	0028      	movs	r0, r5
 800d8ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d8cc:	2a00      	cmp	r2, #0
 800d8ce:	d103      	bne.n	800d8d8 <_realloc_r+0x24>
 800d8d0:	f7fd fd60 	bl	800b394 <_free_r>
 800d8d4:	0025      	movs	r5, r4
 800d8d6:	e7f7      	b.n	800d8c8 <_realloc_r+0x14>
 800d8d8:	f000 f83f 	bl	800d95a <_malloc_usable_size_r>
 800d8dc:	9001      	str	r0, [sp, #4]
 800d8de:	4284      	cmp	r4, r0
 800d8e0:	d803      	bhi.n	800d8ea <_realloc_r+0x36>
 800d8e2:	0035      	movs	r5, r6
 800d8e4:	0843      	lsrs	r3, r0, #1
 800d8e6:	42a3      	cmp	r3, r4
 800d8e8:	d3ee      	bcc.n	800d8c8 <_realloc_r+0x14>
 800d8ea:	0021      	movs	r1, r4
 800d8ec:	0038      	movs	r0, r7
 800d8ee:	f7fd fdc7 	bl	800b480 <_malloc_r>
 800d8f2:	1e05      	subs	r5, r0, #0
 800d8f4:	d0e8      	beq.n	800d8c8 <_realloc_r+0x14>
 800d8f6:	9b01      	ldr	r3, [sp, #4]
 800d8f8:	0022      	movs	r2, r4
 800d8fa:	429c      	cmp	r4, r3
 800d8fc:	d900      	bls.n	800d900 <_realloc_r+0x4c>
 800d8fe:	001a      	movs	r2, r3
 800d900:	0031      	movs	r1, r6
 800d902:	0028      	movs	r0, r5
 800d904:	f7ff fc0c 	bl	800d120 <memcpy>
 800d908:	0031      	movs	r1, r6
 800d90a:	0038      	movs	r0, r7
 800d90c:	f7fd fd42 	bl	800b394 <_free_r>
 800d910:	e7da      	b.n	800d8c8 <_realloc_r+0x14>

0800d912 <__ascii_wctomb>:
 800d912:	0003      	movs	r3, r0
 800d914:	1e08      	subs	r0, r1, #0
 800d916:	d005      	beq.n	800d924 <__ascii_wctomb+0x12>
 800d918:	2aff      	cmp	r2, #255	; 0xff
 800d91a:	d904      	bls.n	800d926 <__ascii_wctomb+0x14>
 800d91c:	228a      	movs	r2, #138	; 0x8a
 800d91e:	2001      	movs	r0, #1
 800d920:	601a      	str	r2, [r3, #0]
 800d922:	4240      	negs	r0, r0
 800d924:	4770      	bx	lr
 800d926:	2001      	movs	r0, #1
 800d928:	700a      	strb	r2, [r1, #0]
 800d92a:	e7fb      	b.n	800d924 <__ascii_wctomb+0x12>

0800d92c <fiprintf>:
 800d92c:	b40e      	push	{r1, r2, r3}
 800d92e:	b517      	push	{r0, r1, r2, r4, lr}
 800d930:	4c05      	ldr	r4, [pc, #20]	; (800d948 <fiprintf+0x1c>)
 800d932:	ab05      	add	r3, sp, #20
 800d934:	cb04      	ldmia	r3!, {r2}
 800d936:	0001      	movs	r1, r0
 800d938:	6820      	ldr	r0, [r4, #0]
 800d93a:	9301      	str	r3, [sp, #4]
 800d93c:	f000 f83c 	bl	800d9b8 <_vfiprintf_r>
 800d940:	bc1e      	pop	{r1, r2, r3, r4}
 800d942:	bc08      	pop	{r3}
 800d944:	b003      	add	sp, #12
 800d946:	4718      	bx	r3
 800d948:	2000007c 	.word	0x2000007c

0800d94c <abort>:
 800d94c:	2006      	movs	r0, #6
 800d94e:	b510      	push	{r4, lr}
 800d950:	f000 fa1e 	bl	800dd90 <raise>
 800d954:	2001      	movs	r0, #1
 800d956:	f7f6 fa34 	bl	8003dc2 <_exit>

0800d95a <_malloc_usable_size_r>:
 800d95a:	1f0b      	subs	r3, r1, #4
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	1f18      	subs	r0, r3, #4
 800d960:	2b00      	cmp	r3, #0
 800d962:	da01      	bge.n	800d968 <_malloc_usable_size_r+0xe>
 800d964:	580b      	ldr	r3, [r1, r0]
 800d966:	18c0      	adds	r0, r0, r3
 800d968:	4770      	bx	lr

0800d96a <__sfputc_r>:
 800d96a:	6893      	ldr	r3, [r2, #8]
 800d96c:	b510      	push	{r4, lr}
 800d96e:	3b01      	subs	r3, #1
 800d970:	6093      	str	r3, [r2, #8]
 800d972:	2b00      	cmp	r3, #0
 800d974:	da04      	bge.n	800d980 <__sfputc_r+0x16>
 800d976:	6994      	ldr	r4, [r2, #24]
 800d978:	42a3      	cmp	r3, r4
 800d97a:	db07      	blt.n	800d98c <__sfputc_r+0x22>
 800d97c:	290a      	cmp	r1, #10
 800d97e:	d005      	beq.n	800d98c <__sfputc_r+0x22>
 800d980:	6813      	ldr	r3, [r2, #0]
 800d982:	1c58      	adds	r0, r3, #1
 800d984:	6010      	str	r0, [r2, #0]
 800d986:	7019      	strb	r1, [r3, #0]
 800d988:	0008      	movs	r0, r1
 800d98a:	bd10      	pop	{r4, pc}
 800d98c:	f000 f930 	bl	800dbf0 <__swbuf_r>
 800d990:	0001      	movs	r1, r0
 800d992:	e7f9      	b.n	800d988 <__sfputc_r+0x1e>

0800d994 <__sfputs_r>:
 800d994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d996:	0006      	movs	r6, r0
 800d998:	000f      	movs	r7, r1
 800d99a:	0014      	movs	r4, r2
 800d99c:	18d5      	adds	r5, r2, r3
 800d99e:	42ac      	cmp	r4, r5
 800d9a0:	d101      	bne.n	800d9a6 <__sfputs_r+0x12>
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	e007      	b.n	800d9b6 <__sfputs_r+0x22>
 800d9a6:	7821      	ldrb	r1, [r4, #0]
 800d9a8:	003a      	movs	r2, r7
 800d9aa:	0030      	movs	r0, r6
 800d9ac:	f7ff ffdd 	bl	800d96a <__sfputc_r>
 800d9b0:	3401      	adds	r4, #1
 800d9b2:	1c43      	adds	r3, r0, #1
 800d9b4:	d1f3      	bne.n	800d99e <__sfputs_r+0xa>
 800d9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d9b8 <_vfiprintf_r>:
 800d9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9ba:	b0a1      	sub	sp, #132	; 0x84
 800d9bc:	000f      	movs	r7, r1
 800d9be:	0015      	movs	r5, r2
 800d9c0:	001e      	movs	r6, r3
 800d9c2:	9003      	str	r0, [sp, #12]
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d004      	beq.n	800d9d2 <_vfiprintf_r+0x1a>
 800d9c8:	6a03      	ldr	r3, [r0, #32]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d101      	bne.n	800d9d2 <_vfiprintf_r+0x1a>
 800d9ce:	f7fc fd0d 	bl	800a3ec <__sinit>
 800d9d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9d4:	07db      	lsls	r3, r3, #31
 800d9d6:	d405      	bmi.n	800d9e4 <_vfiprintf_r+0x2c>
 800d9d8:	89bb      	ldrh	r3, [r7, #12]
 800d9da:	059b      	lsls	r3, r3, #22
 800d9dc:	d402      	bmi.n	800d9e4 <_vfiprintf_r+0x2c>
 800d9de:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d9e0:	f7fc fe29 	bl	800a636 <__retarget_lock_acquire_recursive>
 800d9e4:	89bb      	ldrh	r3, [r7, #12]
 800d9e6:	071b      	lsls	r3, r3, #28
 800d9e8:	d502      	bpl.n	800d9f0 <_vfiprintf_r+0x38>
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d113      	bne.n	800da18 <_vfiprintf_r+0x60>
 800d9f0:	0039      	movs	r1, r7
 800d9f2:	9803      	ldr	r0, [sp, #12]
 800d9f4:	f000 f93e 	bl	800dc74 <__swsetup_r>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d00d      	beq.n	800da18 <_vfiprintf_r+0x60>
 800d9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9fe:	07db      	lsls	r3, r3, #31
 800da00:	d503      	bpl.n	800da0a <_vfiprintf_r+0x52>
 800da02:	2001      	movs	r0, #1
 800da04:	4240      	negs	r0, r0
 800da06:	b021      	add	sp, #132	; 0x84
 800da08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da0a:	89bb      	ldrh	r3, [r7, #12]
 800da0c:	059b      	lsls	r3, r3, #22
 800da0e:	d4f8      	bmi.n	800da02 <_vfiprintf_r+0x4a>
 800da10:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800da12:	f7fc fe11 	bl	800a638 <__retarget_lock_release_recursive>
 800da16:	e7f4      	b.n	800da02 <_vfiprintf_r+0x4a>
 800da18:	2300      	movs	r3, #0
 800da1a:	ac08      	add	r4, sp, #32
 800da1c:	6163      	str	r3, [r4, #20]
 800da1e:	3320      	adds	r3, #32
 800da20:	7663      	strb	r3, [r4, #25]
 800da22:	3310      	adds	r3, #16
 800da24:	76a3      	strb	r3, [r4, #26]
 800da26:	9607      	str	r6, [sp, #28]
 800da28:	002e      	movs	r6, r5
 800da2a:	7833      	ldrb	r3, [r6, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d001      	beq.n	800da34 <_vfiprintf_r+0x7c>
 800da30:	2b25      	cmp	r3, #37	; 0x25
 800da32:	d148      	bne.n	800dac6 <_vfiprintf_r+0x10e>
 800da34:	1b73      	subs	r3, r6, r5
 800da36:	9305      	str	r3, [sp, #20]
 800da38:	42ae      	cmp	r6, r5
 800da3a:	d00b      	beq.n	800da54 <_vfiprintf_r+0x9c>
 800da3c:	002a      	movs	r2, r5
 800da3e:	0039      	movs	r1, r7
 800da40:	9803      	ldr	r0, [sp, #12]
 800da42:	f7ff ffa7 	bl	800d994 <__sfputs_r>
 800da46:	3001      	adds	r0, #1
 800da48:	d100      	bne.n	800da4c <_vfiprintf_r+0x94>
 800da4a:	e0af      	b.n	800dbac <_vfiprintf_r+0x1f4>
 800da4c:	6963      	ldr	r3, [r4, #20]
 800da4e:	9a05      	ldr	r2, [sp, #20]
 800da50:	189b      	adds	r3, r3, r2
 800da52:	6163      	str	r3, [r4, #20]
 800da54:	7833      	ldrb	r3, [r6, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d100      	bne.n	800da5c <_vfiprintf_r+0xa4>
 800da5a:	e0a7      	b.n	800dbac <_vfiprintf_r+0x1f4>
 800da5c:	2201      	movs	r2, #1
 800da5e:	2300      	movs	r3, #0
 800da60:	4252      	negs	r2, r2
 800da62:	6062      	str	r2, [r4, #4]
 800da64:	a904      	add	r1, sp, #16
 800da66:	3254      	adds	r2, #84	; 0x54
 800da68:	1852      	adds	r2, r2, r1
 800da6a:	1c75      	adds	r5, r6, #1
 800da6c:	6023      	str	r3, [r4, #0]
 800da6e:	60e3      	str	r3, [r4, #12]
 800da70:	60a3      	str	r3, [r4, #8]
 800da72:	7013      	strb	r3, [r2, #0]
 800da74:	65a3      	str	r3, [r4, #88]	; 0x58
 800da76:	4b59      	ldr	r3, [pc, #356]	; (800dbdc <_vfiprintf_r+0x224>)
 800da78:	2205      	movs	r2, #5
 800da7a:	0018      	movs	r0, r3
 800da7c:	7829      	ldrb	r1, [r5, #0]
 800da7e:	9305      	str	r3, [sp, #20]
 800da80:	f7fc fddb 	bl	800a63a <memchr>
 800da84:	1c6e      	adds	r6, r5, #1
 800da86:	2800      	cmp	r0, #0
 800da88:	d11f      	bne.n	800daca <_vfiprintf_r+0x112>
 800da8a:	6822      	ldr	r2, [r4, #0]
 800da8c:	06d3      	lsls	r3, r2, #27
 800da8e:	d504      	bpl.n	800da9a <_vfiprintf_r+0xe2>
 800da90:	2353      	movs	r3, #83	; 0x53
 800da92:	a904      	add	r1, sp, #16
 800da94:	185b      	adds	r3, r3, r1
 800da96:	2120      	movs	r1, #32
 800da98:	7019      	strb	r1, [r3, #0]
 800da9a:	0713      	lsls	r3, r2, #28
 800da9c:	d504      	bpl.n	800daa8 <_vfiprintf_r+0xf0>
 800da9e:	2353      	movs	r3, #83	; 0x53
 800daa0:	a904      	add	r1, sp, #16
 800daa2:	185b      	adds	r3, r3, r1
 800daa4:	212b      	movs	r1, #43	; 0x2b
 800daa6:	7019      	strb	r1, [r3, #0]
 800daa8:	782b      	ldrb	r3, [r5, #0]
 800daaa:	2b2a      	cmp	r3, #42	; 0x2a
 800daac:	d016      	beq.n	800dadc <_vfiprintf_r+0x124>
 800daae:	002e      	movs	r6, r5
 800dab0:	2100      	movs	r1, #0
 800dab2:	200a      	movs	r0, #10
 800dab4:	68e3      	ldr	r3, [r4, #12]
 800dab6:	7832      	ldrb	r2, [r6, #0]
 800dab8:	1c75      	adds	r5, r6, #1
 800daba:	3a30      	subs	r2, #48	; 0x30
 800dabc:	2a09      	cmp	r2, #9
 800dabe:	d94e      	bls.n	800db5e <_vfiprintf_r+0x1a6>
 800dac0:	2900      	cmp	r1, #0
 800dac2:	d111      	bne.n	800dae8 <_vfiprintf_r+0x130>
 800dac4:	e017      	b.n	800daf6 <_vfiprintf_r+0x13e>
 800dac6:	3601      	adds	r6, #1
 800dac8:	e7af      	b.n	800da2a <_vfiprintf_r+0x72>
 800daca:	9b05      	ldr	r3, [sp, #20]
 800dacc:	6822      	ldr	r2, [r4, #0]
 800dace:	1ac0      	subs	r0, r0, r3
 800dad0:	2301      	movs	r3, #1
 800dad2:	4083      	lsls	r3, r0
 800dad4:	4313      	orrs	r3, r2
 800dad6:	0035      	movs	r5, r6
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	e7cc      	b.n	800da76 <_vfiprintf_r+0xbe>
 800dadc:	9b07      	ldr	r3, [sp, #28]
 800dade:	1d19      	adds	r1, r3, #4
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	9107      	str	r1, [sp, #28]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	db01      	blt.n	800daec <_vfiprintf_r+0x134>
 800dae8:	930b      	str	r3, [sp, #44]	; 0x2c
 800daea:	e004      	b.n	800daf6 <_vfiprintf_r+0x13e>
 800daec:	425b      	negs	r3, r3
 800daee:	60e3      	str	r3, [r4, #12]
 800daf0:	2302      	movs	r3, #2
 800daf2:	4313      	orrs	r3, r2
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	7833      	ldrb	r3, [r6, #0]
 800daf8:	2b2e      	cmp	r3, #46	; 0x2e
 800dafa:	d10a      	bne.n	800db12 <_vfiprintf_r+0x15a>
 800dafc:	7873      	ldrb	r3, [r6, #1]
 800dafe:	2b2a      	cmp	r3, #42	; 0x2a
 800db00:	d135      	bne.n	800db6e <_vfiprintf_r+0x1b6>
 800db02:	9b07      	ldr	r3, [sp, #28]
 800db04:	3602      	adds	r6, #2
 800db06:	1d1a      	adds	r2, r3, #4
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	9207      	str	r2, [sp, #28]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	db2b      	blt.n	800db68 <_vfiprintf_r+0x1b0>
 800db10:	9309      	str	r3, [sp, #36]	; 0x24
 800db12:	4d33      	ldr	r5, [pc, #204]	; (800dbe0 <_vfiprintf_r+0x228>)
 800db14:	2203      	movs	r2, #3
 800db16:	0028      	movs	r0, r5
 800db18:	7831      	ldrb	r1, [r6, #0]
 800db1a:	f7fc fd8e 	bl	800a63a <memchr>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d006      	beq.n	800db30 <_vfiprintf_r+0x178>
 800db22:	2340      	movs	r3, #64	; 0x40
 800db24:	1b40      	subs	r0, r0, r5
 800db26:	4083      	lsls	r3, r0
 800db28:	6822      	ldr	r2, [r4, #0]
 800db2a:	3601      	adds	r6, #1
 800db2c:	4313      	orrs	r3, r2
 800db2e:	6023      	str	r3, [r4, #0]
 800db30:	7831      	ldrb	r1, [r6, #0]
 800db32:	2206      	movs	r2, #6
 800db34:	482b      	ldr	r0, [pc, #172]	; (800dbe4 <_vfiprintf_r+0x22c>)
 800db36:	1c75      	adds	r5, r6, #1
 800db38:	7621      	strb	r1, [r4, #24]
 800db3a:	f7fc fd7e 	bl	800a63a <memchr>
 800db3e:	2800      	cmp	r0, #0
 800db40:	d043      	beq.n	800dbca <_vfiprintf_r+0x212>
 800db42:	4b29      	ldr	r3, [pc, #164]	; (800dbe8 <_vfiprintf_r+0x230>)
 800db44:	2b00      	cmp	r3, #0
 800db46:	d125      	bne.n	800db94 <_vfiprintf_r+0x1dc>
 800db48:	2207      	movs	r2, #7
 800db4a:	9b07      	ldr	r3, [sp, #28]
 800db4c:	3307      	adds	r3, #7
 800db4e:	4393      	bics	r3, r2
 800db50:	3308      	adds	r3, #8
 800db52:	9307      	str	r3, [sp, #28]
 800db54:	6963      	ldr	r3, [r4, #20]
 800db56:	9a04      	ldr	r2, [sp, #16]
 800db58:	189b      	adds	r3, r3, r2
 800db5a:	6163      	str	r3, [r4, #20]
 800db5c:	e764      	b.n	800da28 <_vfiprintf_r+0x70>
 800db5e:	4343      	muls	r3, r0
 800db60:	002e      	movs	r6, r5
 800db62:	2101      	movs	r1, #1
 800db64:	189b      	adds	r3, r3, r2
 800db66:	e7a6      	b.n	800dab6 <_vfiprintf_r+0xfe>
 800db68:	2301      	movs	r3, #1
 800db6a:	425b      	negs	r3, r3
 800db6c:	e7d0      	b.n	800db10 <_vfiprintf_r+0x158>
 800db6e:	2300      	movs	r3, #0
 800db70:	200a      	movs	r0, #10
 800db72:	001a      	movs	r2, r3
 800db74:	3601      	adds	r6, #1
 800db76:	6063      	str	r3, [r4, #4]
 800db78:	7831      	ldrb	r1, [r6, #0]
 800db7a:	1c75      	adds	r5, r6, #1
 800db7c:	3930      	subs	r1, #48	; 0x30
 800db7e:	2909      	cmp	r1, #9
 800db80:	d903      	bls.n	800db8a <_vfiprintf_r+0x1d2>
 800db82:	2b00      	cmp	r3, #0
 800db84:	d0c5      	beq.n	800db12 <_vfiprintf_r+0x15a>
 800db86:	9209      	str	r2, [sp, #36]	; 0x24
 800db88:	e7c3      	b.n	800db12 <_vfiprintf_r+0x15a>
 800db8a:	4342      	muls	r2, r0
 800db8c:	002e      	movs	r6, r5
 800db8e:	2301      	movs	r3, #1
 800db90:	1852      	adds	r2, r2, r1
 800db92:	e7f1      	b.n	800db78 <_vfiprintf_r+0x1c0>
 800db94:	aa07      	add	r2, sp, #28
 800db96:	9200      	str	r2, [sp, #0]
 800db98:	0021      	movs	r1, r4
 800db9a:	003a      	movs	r2, r7
 800db9c:	4b13      	ldr	r3, [pc, #76]	; (800dbec <_vfiprintf_r+0x234>)
 800db9e:	9803      	ldr	r0, [sp, #12]
 800dba0:	f7fb fdb6 	bl	8009710 <_printf_float>
 800dba4:	9004      	str	r0, [sp, #16]
 800dba6:	9b04      	ldr	r3, [sp, #16]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	d1d3      	bne.n	800db54 <_vfiprintf_r+0x19c>
 800dbac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbae:	07db      	lsls	r3, r3, #31
 800dbb0:	d405      	bmi.n	800dbbe <_vfiprintf_r+0x206>
 800dbb2:	89bb      	ldrh	r3, [r7, #12]
 800dbb4:	059b      	lsls	r3, r3, #22
 800dbb6:	d402      	bmi.n	800dbbe <_vfiprintf_r+0x206>
 800dbb8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800dbba:	f7fc fd3d 	bl	800a638 <__retarget_lock_release_recursive>
 800dbbe:	89bb      	ldrh	r3, [r7, #12]
 800dbc0:	065b      	lsls	r3, r3, #25
 800dbc2:	d500      	bpl.n	800dbc6 <_vfiprintf_r+0x20e>
 800dbc4:	e71d      	b.n	800da02 <_vfiprintf_r+0x4a>
 800dbc6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dbc8:	e71d      	b.n	800da06 <_vfiprintf_r+0x4e>
 800dbca:	aa07      	add	r2, sp, #28
 800dbcc:	9200      	str	r2, [sp, #0]
 800dbce:	0021      	movs	r1, r4
 800dbd0:	003a      	movs	r2, r7
 800dbd2:	4b06      	ldr	r3, [pc, #24]	; (800dbec <_vfiprintf_r+0x234>)
 800dbd4:	9803      	ldr	r0, [sp, #12]
 800dbd6:	f7fc f861 	bl	8009c9c <_printf_i>
 800dbda:	e7e3      	b.n	800dba4 <_vfiprintf_r+0x1ec>
 800dbdc:	0800e859 	.word	0x0800e859
 800dbe0:	0800e85f 	.word	0x0800e85f
 800dbe4:	0800e863 	.word	0x0800e863
 800dbe8:	08009711 	.word	0x08009711
 800dbec:	0800d995 	.word	0x0800d995

0800dbf0 <__swbuf_r>:
 800dbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf2:	0006      	movs	r6, r0
 800dbf4:	000d      	movs	r5, r1
 800dbf6:	0014      	movs	r4, r2
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	d004      	beq.n	800dc06 <__swbuf_r+0x16>
 800dbfc:	6a03      	ldr	r3, [r0, #32]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d101      	bne.n	800dc06 <__swbuf_r+0x16>
 800dc02:	f7fc fbf3 	bl	800a3ec <__sinit>
 800dc06:	69a3      	ldr	r3, [r4, #24]
 800dc08:	60a3      	str	r3, [r4, #8]
 800dc0a:	89a3      	ldrh	r3, [r4, #12]
 800dc0c:	071b      	lsls	r3, r3, #28
 800dc0e:	d528      	bpl.n	800dc62 <__swbuf_r+0x72>
 800dc10:	6923      	ldr	r3, [r4, #16]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d025      	beq.n	800dc62 <__swbuf_r+0x72>
 800dc16:	6923      	ldr	r3, [r4, #16]
 800dc18:	6820      	ldr	r0, [r4, #0]
 800dc1a:	b2ef      	uxtb	r7, r5
 800dc1c:	1ac0      	subs	r0, r0, r3
 800dc1e:	6963      	ldr	r3, [r4, #20]
 800dc20:	b2ed      	uxtb	r5, r5
 800dc22:	4283      	cmp	r3, r0
 800dc24:	dc05      	bgt.n	800dc32 <__swbuf_r+0x42>
 800dc26:	0021      	movs	r1, r4
 800dc28:	0030      	movs	r0, r6
 800dc2a:	f7ff fa17 	bl	800d05c <_fflush_r>
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d11d      	bne.n	800dc6e <__swbuf_r+0x7e>
 800dc32:	68a3      	ldr	r3, [r4, #8]
 800dc34:	3001      	adds	r0, #1
 800dc36:	3b01      	subs	r3, #1
 800dc38:	60a3      	str	r3, [r4, #8]
 800dc3a:	6823      	ldr	r3, [r4, #0]
 800dc3c:	1c5a      	adds	r2, r3, #1
 800dc3e:	6022      	str	r2, [r4, #0]
 800dc40:	701f      	strb	r7, [r3, #0]
 800dc42:	6963      	ldr	r3, [r4, #20]
 800dc44:	4283      	cmp	r3, r0
 800dc46:	d004      	beq.n	800dc52 <__swbuf_r+0x62>
 800dc48:	89a3      	ldrh	r3, [r4, #12]
 800dc4a:	07db      	lsls	r3, r3, #31
 800dc4c:	d507      	bpl.n	800dc5e <__swbuf_r+0x6e>
 800dc4e:	2d0a      	cmp	r5, #10
 800dc50:	d105      	bne.n	800dc5e <__swbuf_r+0x6e>
 800dc52:	0021      	movs	r1, r4
 800dc54:	0030      	movs	r0, r6
 800dc56:	f7ff fa01 	bl	800d05c <_fflush_r>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d107      	bne.n	800dc6e <__swbuf_r+0x7e>
 800dc5e:	0028      	movs	r0, r5
 800dc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc62:	0021      	movs	r1, r4
 800dc64:	0030      	movs	r0, r6
 800dc66:	f000 f805 	bl	800dc74 <__swsetup_r>
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	d0d3      	beq.n	800dc16 <__swbuf_r+0x26>
 800dc6e:	2501      	movs	r5, #1
 800dc70:	426d      	negs	r5, r5
 800dc72:	e7f4      	b.n	800dc5e <__swbuf_r+0x6e>

0800dc74 <__swsetup_r>:
 800dc74:	4b30      	ldr	r3, [pc, #192]	; (800dd38 <__swsetup_r+0xc4>)
 800dc76:	b570      	push	{r4, r5, r6, lr}
 800dc78:	0005      	movs	r5, r0
 800dc7a:	6818      	ldr	r0, [r3, #0]
 800dc7c:	000c      	movs	r4, r1
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	d004      	beq.n	800dc8c <__swsetup_r+0x18>
 800dc82:	6a03      	ldr	r3, [r0, #32]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d101      	bne.n	800dc8c <__swsetup_r+0x18>
 800dc88:	f7fc fbb0 	bl	800a3ec <__sinit>
 800dc8c:	230c      	movs	r3, #12
 800dc8e:	5ee2      	ldrsh	r2, [r4, r3]
 800dc90:	b293      	uxth	r3, r2
 800dc92:	0711      	lsls	r1, r2, #28
 800dc94:	d423      	bmi.n	800dcde <__swsetup_r+0x6a>
 800dc96:	06d9      	lsls	r1, r3, #27
 800dc98:	d407      	bmi.n	800dcaa <__swsetup_r+0x36>
 800dc9a:	2309      	movs	r3, #9
 800dc9c:	2001      	movs	r0, #1
 800dc9e:	602b      	str	r3, [r5, #0]
 800dca0:	3337      	adds	r3, #55	; 0x37
 800dca2:	4313      	orrs	r3, r2
 800dca4:	81a3      	strh	r3, [r4, #12]
 800dca6:	4240      	negs	r0, r0
 800dca8:	bd70      	pop	{r4, r5, r6, pc}
 800dcaa:	075b      	lsls	r3, r3, #29
 800dcac:	d513      	bpl.n	800dcd6 <__swsetup_r+0x62>
 800dcae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcb0:	2900      	cmp	r1, #0
 800dcb2:	d008      	beq.n	800dcc6 <__swsetup_r+0x52>
 800dcb4:	0023      	movs	r3, r4
 800dcb6:	3344      	adds	r3, #68	; 0x44
 800dcb8:	4299      	cmp	r1, r3
 800dcba:	d002      	beq.n	800dcc2 <__swsetup_r+0x4e>
 800dcbc:	0028      	movs	r0, r5
 800dcbe:	f7fd fb69 	bl	800b394 <_free_r>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	6363      	str	r3, [r4, #52]	; 0x34
 800dcc6:	2224      	movs	r2, #36	; 0x24
 800dcc8:	89a3      	ldrh	r3, [r4, #12]
 800dcca:	4393      	bics	r3, r2
 800dccc:	81a3      	strh	r3, [r4, #12]
 800dcce:	2300      	movs	r3, #0
 800dcd0:	6063      	str	r3, [r4, #4]
 800dcd2:	6923      	ldr	r3, [r4, #16]
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	2308      	movs	r3, #8
 800dcd8:	89a2      	ldrh	r2, [r4, #12]
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	81a3      	strh	r3, [r4, #12]
 800dcde:	6923      	ldr	r3, [r4, #16]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10b      	bne.n	800dcfc <__swsetup_r+0x88>
 800dce4:	21a0      	movs	r1, #160	; 0xa0
 800dce6:	2280      	movs	r2, #128	; 0x80
 800dce8:	89a3      	ldrh	r3, [r4, #12]
 800dcea:	0089      	lsls	r1, r1, #2
 800dcec:	0092      	lsls	r2, r2, #2
 800dcee:	400b      	ands	r3, r1
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d003      	beq.n	800dcfc <__swsetup_r+0x88>
 800dcf4:	0021      	movs	r1, r4
 800dcf6:	0028      	movs	r0, r5
 800dcf8:	f000 f892 	bl	800de20 <__smakebuf_r>
 800dcfc:	220c      	movs	r2, #12
 800dcfe:	5ea3      	ldrsh	r3, [r4, r2]
 800dd00:	2001      	movs	r0, #1
 800dd02:	001a      	movs	r2, r3
 800dd04:	b299      	uxth	r1, r3
 800dd06:	4002      	ands	r2, r0
 800dd08:	4203      	tst	r3, r0
 800dd0a:	d00f      	beq.n	800dd2c <__swsetup_r+0xb8>
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	60a2      	str	r2, [r4, #8]
 800dd10:	6962      	ldr	r2, [r4, #20]
 800dd12:	4252      	negs	r2, r2
 800dd14:	61a2      	str	r2, [r4, #24]
 800dd16:	2000      	movs	r0, #0
 800dd18:	6922      	ldr	r2, [r4, #16]
 800dd1a:	4282      	cmp	r2, r0
 800dd1c:	d1c4      	bne.n	800dca8 <__swsetup_r+0x34>
 800dd1e:	0609      	lsls	r1, r1, #24
 800dd20:	d5c2      	bpl.n	800dca8 <__swsetup_r+0x34>
 800dd22:	2240      	movs	r2, #64	; 0x40
 800dd24:	4313      	orrs	r3, r2
 800dd26:	81a3      	strh	r3, [r4, #12]
 800dd28:	3801      	subs	r0, #1
 800dd2a:	e7bd      	b.n	800dca8 <__swsetup_r+0x34>
 800dd2c:	0788      	lsls	r0, r1, #30
 800dd2e:	d400      	bmi.n	800dd32 <__swsetup_r+0xbe>
 800dd30:	6962      	ldr	r2, [r4, #20]
 800dd32:	60a2      	str	r2, [r4, #8]
 800dd34:	e7ef      	b.n	800dd16 <__swsetup_r+0xa2>
 800dd36:	46c0      	nop			; (mov r8, r8)
 800dd38:	2000007c 	.word	0x2000007c

0800dd3c <_raise_r>:
 800dd3c:	b570      	push	{r4, r5, r6, lr}
 800dd3e:	0004      	movs	r4, r0
 800dd40:	000d      	movs	r5, r1
 800dd42:	291f      	cmp	r1, #31
 800dd44:	d904      	bls.n	800dd50 <_raise_r+0x14>
 800dd46:	2316      	movs	r3, #22
 800dd48:	6003      	str	r3, [r0, #0]
 800dd4a:	2001      	movs	r0, #1
 800dd4c:	4240      	negs	r0, r0
 800dd4e:	bd70      	pop	{r4, r5, r6, pc}
 800dd50:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d004      	beq.n	800dd60 <_raise_r+0x24>
 800dd56:	008a      	lsls	r2, r1, #2
 800dd58:	189b      	adds	r3, r3, r2
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	2a00      	cmp	r2, #0
 800dd5e:	d108      	bne.n	800dd72 <_raise_r+0x36>
 800dd60:	0020      	movs	r0, r4
 800dd62:	f000 f831 	bl	800ddc8 <_getpid_r>
 800dd66:	002a      	movs	r2, r5
 800dd68:	0001      	movs	r1, r0
 800dd6a:	0020      	movs	r0, r4
 800dd6c:	f000 f81a 	bl	800dda4 <_kill_r>
 800dd70:	e7ed      	b.n	800dd4e <_raise_r+0x12>
 800dd72:	2000      	movs	r0, #0
 800dd74:	2a01      	cmp	r2, #1
 800dd76:	d0ea      	beq.n	800dd4e <_raise_r+0x12>
 800dd78:	1c51      	adds	r1, r2, #1
 800dd7a:	d103      	bne.n	800dd84 <_raise_r+0x48>
 800dd7c:	2316      	movs	r3, #22
 800dd7e:	3001      	adds	r0, #1
 800dd80:	6023      	str	r3, [r4, #0]
 800dd82:	e7e4      	b.n	800dd4e <_raise_r+0x12>
 800dd84:	2400      	movs	r4, #0
 800dd86:	0028      	movs	r0, r5
 800dd88:	601c      	str	r4, [r3, #0]
 800dd8a:	4790      	blx	r2
 800dd8c:	0020      	movs	r0, r4
 800dd8e:	e7de      	b.n	800dd4e <_raise_r+0x12>

0800dd90 <raise>:
 800dd90:	b510      	push	{r4, lr}
 800dd92:	4b03      	ldr	r3, [pc, #12]	; (800dda0 <raise+0x10>)
 800dd94:	0001      	movs	r1, r0
 800dd96:	6818      	ldr	r0, [r3, #0]
 800dd98:	f7ff ffd0 	bl	800dd3c <_raise_r>
 800dd9c:	bd10      	pop	{r4, pc}
 800dd9e:	46c0      	nop			; (mov r8, r8)
 800dda0:	2000007c 	.word	0x2000007c

0800dda4 <_kill_r>:
 800dda4:	2300      	movs	r3, #0
 800dda6:	b570      	push	{r4, r5, r6, lr}
 800dda8:	4d06      	ldr	r5, [pc, #24]	; (800ddc4 <_kill_r+0x20>)
 800ddaa:	0004      	movs	r4, r0
 800ddac:	0008      	movs	r0, r1
 800ddae:	0011      	movs	r1, r2
 800ddb0:	602b      	str	r3, [r5, #0]
 800ddb2:	f7f5 fff6 	bl	8003da2 <_kill>
 800ddb6:	1c43      	adds	r3, r0, #1
 800ddb8:	d103      	bne.n	800ddc2 <_kill_r+0x1e>
 800ddba:	682b      	ldr	r3, [r5, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d000      	beq.n	800ddc2 <_kill_r+0x1e>
 800ddc0:	6023      	str	r3, [r4, #0]
 800ddc2:	bd70      	pop	{r4, r5, r6, pc}
 800ddc4:	20000664 	.word	0x20000664

0800ddc8 <_getpid_r>:
 800ddc8:	b510      	push	{r4, lr}
 800ddca:	f7f5 ffe4 	bl	8003d96 <_getpid>
 800ddce:	bd10      	pop	{r4, pc}

0800ddd0 <__swhatbuf_r>:
 800ddd0:	b570      	push	{r4, r5, r6, lr}
 800ddd2:	000e      	movs	r6, r1
 800ddd4:	001d      	movs	r5, r3
 800ddd6:	230e      	movs	r3, #14
 800ddd8:	5ec9      	ldrsh	r1, [r1, r3]
 800ddda:	0014      	movs	r4, r2
 800dddc:	b096      	sub	sp, #88	; 0x58
 800ddde:	2900      	cmp	r1, #0
 800dde0:	da0c      	bge.n	800ddfc <__swhatbuf_r+0x2c>
 800dde2:	89b2      	ldrh	r2, [r6, #12]
 800dde4:	2380      	movs	r3, #128	; 0x80
 800dde6:	0011      	movs	r1, r2
 800dde8:	4019      	ands	r1, r3
 800ddea:	421a      	tst	r2, r3
 800ddec:	d013      	beq.n	800de16 <__swhatbuf_r+0x46>
 800ddee:	2100      	movs	r1, #0
 800ddf0:	3b40      	subs	r3, #64	; 0x40
 800ddf2:	2000      	movs	r0, #0
 800ddf4:	6029      	str	r1, [r5, #0]
 800ddf6:	6023      	str	r3, [r4, #0]
 800ddf8:	b016      	add	sp, #88	; 0x58
 800ddfa:	bd70      	pop	{r4, r5, r6, pc}
 800ddfc:	466a      	mov	r2, sp
 800ddfe:	f000 f84d 	bl	800de9c <_fstat_r>
 800de02:	2800      	cmp	r0, #0
 800de04:	dbed      	blt.n	800dde2 <__swhatbuf_r+0x12>
 800de06:	23f0      	movs	r3, #240	; 0xf0
 800de08:	9901      	ldr	r1, [sp, #4]
 800de0a:	021b      	lsls	r3, r3, #8
 800de0c:	4019      	ands	r1, r3
 800de0e:	4b03      	ldr	r3, [pc, #12]	; (800de1c <__swhatbuf_r+0x4c>)
 800de10:	18c9      	adds	r1, r1, r3
 800de12:	424b      	negs	r3, r1
 800de14:	4159      	adcs	r1, r3
 800de16:	2380      	movs	r3, #128	; 0x80
 800de18:	00db      	lsls	r3, r3, #3
 800de1a:	e7ea      	b.n	800ddf2 <__swhatbuf_r+0x22>
 800de1c:	ffffe000 	.word	0xffffe000

0800de20 <__smakebuf_r>:
 800de20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de22:	2602      	movs	r6, #2
 800de24:	898b      	ldrh	r3, [r1, #12]
 800de26:	0005      	movs	r5, r0
 800de28:	000c      	movs	r4, r1
 800de2a:	4233      	tst	r3, r6
 800de2c:	d006      	beq.n	800de3c <__smakebuf_r+0x1c>
 800de2e:	0023      	movs	r3, r4
 800de30:	3347      	adds	r3, #71	; 0x47
 800de32:	6023      	str	r3, [r4, #0]
 800de34:	6123      	str	r3, [r4, #16]
 800de36:	2301      	movs	r3, #1
 800de38:	6163      	str	r3, [r4, #20]
 800de3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800de3c:	466a      	mov	r2, sp
 800de3e:	ab01      	add	r3, sp, #4
 800de40:	f7ff ffc6 	bl	800ddd0 <__swhatbuf_r>
 800de44:	9900      	ldr	r1, [sp, #0]
 800de46:	0007      	movs	r7, r0
 800de48:	0028      	movs	r0, r5
 800de4a:	f7fd fb19 	bl	800b480 <_malloc_r>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d108      	bne.n	800de64 <__smakebuf_r+0x44>
 800de52:	220c      	movs	r2, #12
 800de54:	5ea3      	ldrsh	r3, [r4, r2]
 800de56:	059a      	lsls	r2, r3, #22
 800de58:	d4ef      	bmi.n	800de3a <__smakebuf_r+0x1a>
 800de5a:	2203      	movs	r2, #3
 800de5c:	4393      	bics	r3, r2
 800de5e:	431e      	orrs	r6, r3
 800de60:	81a6      	strh	r6, [r4, #12]
 800de62:	e7e4      	b.n	800de2e <__smakebuf_r+0xe>
 800de64:	2380      	movs	r3, #128	; 0x80
 800de66:	89a2      	ldrh	r2, [r4, #12]
 800de68:	6020      	str	r0, [r4, #0]
 800de6a:	4313      	orrs	r3, r2
 800de6c:	81a3      	strh	r3, [r4, #12]
 800de6e:	9b00      	ldr	r3, [sp, #0]
 800de70:	6120      	str	r0, [r4, #16]
 800de72:	6163      	str	r3, [r4, #20]
 800de74:	9b01      	ldr	r3, [sp, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00c      	beq.n	800de94 <__smakebuf_r+0x74>
 800de7a:	0028      	movs	r0, r5
 800de7c:	230e      	movs	r3, #14
 800de7e:	5ee1      	ldrsh	r1, [r4, r3]
 800de80:	f000 f81e 	bl	800dec0 <_isatty_r>
 800de84:	2800      	cmp	r0, #0
 800de86:	d005      	beq.n	800de94 <__smakebuf_r+0x74>
 800de88:	2303      	movs	r3, #3
 800de8a:	89a2      	ldrh	r2, [r4, #12]
 800de8c:	439a      	bics	r2, r3
 800de8e:	3b02      	subs	r3, #2
 800de90:	4313      	orrs	r3, r2
 800de92:	81a3      	strh	r3, [r4, #12]
 800de94:	89a3      	ldrh	r3, [r4, #12]
 800de96:	433b      	orrs	r3, r7
 800de98:	81a3      	strh	r3, [r4, #12]
 800de9a:	e7ce      	b.n	800de3a <__smakebuf_r+0x1a>

0800de9c <_fstat_r>:
 800de9c:	2300      	movs	r3, #0
 800de9e:	b570      	push	{r4, r5, r6, lr}
 800dea0:	4d06      	ldr	r5, [pc, #24]	; (800debc <_fstat_r+0x20>)
 800dea2:	0004      	movs	r4, r0
 800dea4:	0008      	movs	r0, r1
 800dea6:	0011      	movs	r1, r2
 800dea8:	602b      	str	r3, [r5, #0]
 800deaa:	f7f5 ffd9 	bl	8003e60 <_fstat>
 800deae:	1c43      	adds	r3, r0, #1
 800deb0:	d103      	bne.n	800deba <_fstat_r+0x1e>
 800deb2:	682b      	ldr	r3, [r5, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d000      	beq.n	800deba <_fstat_r+0x1e>
 800deb8:	6023      	str	r3, [r4, #0]
 800deba:	bd70      	pop	{r4, r5, r6, pc}
 800debc:	20000664 	.word	0x20000664

0800dec0 <_isatty_r>:
 800dec0:	2300      	movs	r3, #0
 800dec2:	b570      	push	{r4, r5, r6, lr}
 800dec4:	4d06      	ldr	r5, [pc, #24]	; (800dee0 <_isatty_r+0x20>)
 800dec6:	0004      	movs	r4, r0
 800dec8:	0008      	movs	r0, r1
 800deca:	602b      	str	r3, [r5, #0]
 800decc:	f7f5 ffd6 	bl	8003e7c <_isatty>
 800ded0:	1c43      	adds	r3, r0, #1
 800ded2:	d103      	bne.n	800dedc <_isatty_r+0x1c>
 800ded4:	682b      	ldr	r3, [r5, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d000      	beq.n	800dedc <_isatty_r+0x1c>
 800deda:	6023      	str	r3, [r4, #0]
 800dedc:	bd70      	pop	{r4, r5, r6, pc}
 800dede:	46c0      	nop			; (mov r8, r8)
 800dee0:	20000664 	.word	0x20000664

0800dee4 <_init>:
 800dee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee6:	46c0      	nop			; (mov r8, r8)
 800dee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deea:	bc08      	pop	{r3}
 800deec:	469e      	mov	lr, r3
 800deee:	4770      	bx	lr

0800def0 <_fini>:
 800def0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def2:	46c0      	nop			; (mov r8, r8)
 800def4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800def6:	bc08      	pop	{r3}
 800def8:	469e      	mov	lr, r3
 800defa:	4770      	bx	lr
