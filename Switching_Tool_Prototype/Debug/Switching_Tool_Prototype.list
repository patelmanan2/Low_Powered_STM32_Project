
Switching_Tool_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9d0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  0800da90  0800da90  0000ea90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0e8  0800e0e8  00010200  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0e8  0800e0e8  0000f0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0f0  0800e0f0  00010200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0f0  0800e0f0  0000f0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0f4  0800e0f4  0000f0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800e0f8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000200  0800e2f8  00010200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800e2f8  000104a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a40b  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b81  00000000  00000000  0001a633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0001c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000775  00000000  00000000  0001cb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000123e8  00000000  00000000  0001d2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c23c  00000000  00000000  0002f6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006be8c  00000000  00000000  0003b901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a778d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a40  00000000  00000000  000a77d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000ab210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000200 	.word	0x20000200
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800da78 	.word	0x0800da78

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000204 	.word	0x20000204
 8000104:	0800da78 	.word	0x0800da78

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe67 	bl	8002110 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fda7 	bl	8001fa0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe59 	bl	8002110 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe4f 	bl	8002110 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fdd1 	bl	8002028 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fdc7 	bl	8002028 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcdd 	bl	8000e70 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc5d 	bl	8000d80 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fccf 	bl	8000e70 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fcc5 	bl	8000e70 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc6b 	bl	8000dd0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc61 	bl	8000dd0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f8a2 	bl	8000694 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff67 	bl	8000494 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fc97 	bl	8002f00 <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f002 f8d2 	bl	8002784 <__aeabi_dsub>
 80005e0:	f002 fc8e 	bl	8002f00 <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__aeabi_d2lz>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	2200      	movs	r2, #0
 80005f8:	2300      	movs	r3, #0
 80005fa:	0004      	movs	r4, r0
 80005fc:	000d      	movs	r5, r1
 80005fe:	f7ff ff2b 	bl	8000458 <__aeabi_dcmplt>
 8000602:	2800      	cmp	r0, #0
 8000604:	d108      	bne.n	8000618 <__aeabi_d2lz+0x24>
 8000606:	0020      	movs	r0, r4
 8000608:	0029      	movs	r1, r5
 800060a:	f000 f80f 	bl	800062c <__aeabi_d2ulz>
 800060e:	0002      	movs	r2, r0
 8000610:	000b      	movs	r3, r1
 8000612:	0010      	movs	r0, r2
 8000614:	0019      	movs	r1, r3
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	2380      	movs	r3, #128	@ 0x80
 800061a:	061b      	lsls	r3, r3, #24
 800061c:	18e9      	adds	r1, r5, r3
 800061e:	0020      	movs	r0, r4
 8000620:	f000 f804 	bl	800062c <__aeabi_d2ulz>
 8000624:	2300      	movs	r3, #0
 8000626:	4242      	negs	r2, r0
 8000628:	418b      	sbcs	r3, r1
 800062a:	e7f2      	b.n	8000612 <__aeabi_d2lz+0x1e>

0800062c <__aeabi_d2ulz>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	2200      	movs	r2, #0
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <__aeabi_d2ulz+0x34>)
 8000632:	000d      	movs	r5, r1
 8000634:	0004      	movs	r4, r0
 8000636:	f001 fddd 	bl	80021f4 <__aeabi_dmul>
 800063a:	f7ff ffbd 	bl	80005b8 <__aeabi_d2uiz>
 800063e:	0006      	movs	r6, r0
 8000640:	f002 fcc8 	bl	8002fd4 <__aeabi_ui2d>
 8000644:	2200      	movs	r2, #0
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <__aeabi_d2ulz+0x38>)
 8000648:	f001 fdd4 	bl	80021f4 <__aeabi_dmul>
 800064c:	0002      	movs	r2, r0
 800064e:	000b      	movs	r3, r1
 8000650:	0020      	movs	r0, r4
 8000652:	0029      	movs	r1, r5
 8000654:	f002 f896 	bl	8002784 <__aeabi_dsub>
 8000658:	f7ff ffae 	bl	80005b8 <__aeabi_d2uiz>
 800065c:	0031      	movs	r1, r6
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	3df00000 	.word	0x3df00000
 8000664:	41f00000 	.word	0x41f00000

08000668 <__aeabi_l2d>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	0006      	movs	r6, r0
 800066c:	0008      	movs	r0, r1
 800066e:	f002 fc83 	bl	8002f78 <__aeabi_i2d>
 8000672:	2200      	movs	r2, #0
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <__aeabi_l2d+0x28>)
 8000676:	f001 fdbd 	bl	80021f4 <__aeabi_dmul>
 800067a:	000d      	movs	r5, r1
 800067c:	0004      	movs	r4, r0
 800067e:	0030      	movs	r0, r6
 8000680:	f002 fca8 	bl	8002fd4 <__aeabi_ui2d>
 8000684:	002b      	movs	r3, r5
 8000686:	0022      	movs	r2, r4
 8000688:	f000 fe0c 	bl	80012a4 <__aeabi_dadd>
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	41f00000 	.word	0x41f00000

08000694 <__udivmoddi4>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	4657      	mov	r7, sl
 8000698:	464e      	mov	r6, r9
 800069a:	4645      	mov	r5, r8
 800069c:	46de      	mov	lr, fp
 800069e:	b5e0      	push	{r5, r6, r7, lr}
 80006a0:	0004      	movs	r4, r0
 80006a2:	000d      	movs	r5, r1
 80006a4:	4692      	mov	sl, r2
 80006a6:	4699      	mov	r9, r3
 80006a8:	b083      	sub	sp, #12
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d830      	bhi.n	8000710 <__udivmoddi4+0x7c>
 80006ae:	d02d      	beq.n	800070c <__udivmoddi4+0x78>
 80006b0:	4649      	mov	r1, r9
 80006b2:	4650      	mov	r0, sl
 80006b4:	f002 fd9c 	bl	80031f0 <__clzdi2>
 80006b8:	0029      	movs	r1, r5
 80006ba:	0006      	movs	r6, r0
 80006bc:	0020      	movs	r0, r4
 80006be:	f002 fd97 	bl	80031f0 <__clzdi2>
 80006c2:	1a33      	subs	r3, r6, r0
 80006c4:	4698      	mov	r8, r3
 80006c6:	3b20      	subs	r3, #32
 80006c8:	d434      	bmi.n	8000734 <__udivmoddi4+0xa0>
 80006ca:	469b      	mov	fp, r3
 80006cc:	4653      	mov	r3, sl
 80006ce:	465a      	mov	r2, fp
 80006d0:	4093      	lsls	r3, r2
 80006d2:	4642      	mov	r2, r8
 80006d4:	001f      	movs	r7, r3
 80006d6:	4653      	mov	r3, sl
 80006d8:	4093      	lsls	r3, r2
 80006da:	001e      	movs	r6, r3
 80006dc:	42af      	cmp	r7, r5
 80006de:	d83b      	bhi.n	8000758 <__udivmoddi4+0xc4>
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d100      	bne.n	80006e6 <__udivmoddi4+0x52>
 80006e4:	e079      	b.n	80007da <__udivmoddi4+0x146>
 80006e6:	465b      	mov	r3, fp
 80006e8:	1ba4      	subs	r4, r4, r6
 80006ea:	41bd      	sbcs	r5, r7
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	da00      	bge.n	80006f2 <__udivmoddi4+0x5e>
 80006f0:	e076      	b.n	80007e0 <__udivmoddi4+0x14c>
 80006f2:	2200      	movs	r2, #0
 80006f4:	2300      	movs	r3, #0
 80006f6:	9200      	str	r2, [sp, #0]
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	465a      	mov	r2, fp
 80006fe:	4093      	lsls	r3, r2
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2301      	movs	r3, #1
 8000704:	4642      	mov	r2, r8
 8000706:	4093      	lsls	r3, r2
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	e029      	b.n	8000760 <__udivmoddi4+0xcc>
 800070c:	4282      	cmp	r2, r0
 800070e:	d9cf      	bls.n	80006b0 <__udivmoddi4+0x1c>
 8000710:	2200      	movs	r2, #0
 8000712:	2300      	movs	r3, #0
 8000714:	9200      	str	r2, [sp, #0]
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <__udivmoddi4+0x8e>
 800071e:	601c      	str	r4, [r3, #0]
 8000720:	605d      	str	r5, [r3, #4]
 8000722:	9800      	ldr	r0, [sp, #0]
 8000724:	9901      	ldr	r1, [sp, #4]
 8000726:	b003      	add	sp, #12
 8000728:	bcf0      	pop	{r4, r5, r6, r7}
 800072a:	46bb      	mov	fp, r7
 800072c:	46b2      	mov	sl, r6
 800072e:	46a9      	mov	r9, r5
 8000730:	46a0      	mov	r8, r4
 8000732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000734:	4642      	mov	r2, r8
 8000736:	469b      	mov	fp, r3
 8000738:	2320      	movs	r3, #32
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	4652      	mov	r2, sl
 800073e:	40da      	lsrs	r2, r3
 8000740:	4641      	mov	r1, r8
 8000742:	0013      	movs	r3, r2
 8000744:	464a      	mov	r2, r9
 8000746:	408a      	lsls	r2, r1
 8000748:	0017      	movs	r7, r2
 800074a:	4642      	mov	r2, r8
 800074c:	431f      	orrs	r7, r3
 800074e:	4653      	mov	r3, sl
 8000750:	4093      	lsls	r3, r2
 8000752:	001e      	movs	r6, r3
 8000754:	42af      	cmp	r7, r5
 8000756:	d9c3      	bls.n	80006e0 <__udivmoddi4+0x4c>
 8000758:	2200      	movs	r2, #0
 800075a:	2300      	movs	r3, #0
 800075c:	9200      	str	r2, [sp, #0]
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	4643      	mov	r3, r8
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0d8      	beq.n	8000718 <__udivmoddi4+0x84>
 8000766:	07fb      	lsls	r3, r7, #31
 8000768:	0872      	lsrs	r2, r6, #1
 800076a:	431a      	orrs	r2, r3
 800076c:	4646      	mov	r6, r8
 800076e:	087b      	lsrs	r3, r7, #1
 8000770:	e00e      	b.n	8000790 <__udivmoddi4+0xfc>
 8000772:	42ab      	cmp	r3, r5
 8000774:	d101      	bne.n	800077a <__udivmoddi4+0xe6>
 8000776:	42a2      	cmp	r2, r4
 8000778:	d80c      	bhi.n	8000794 <__udivmoddi4+0x100>
 800077a:	1aa4      	subs	r4, r4, r2
 800077c:	419d      	sbcs	r5, r3
 800077e:	2001      	movs	r0, #1
 8000780:	1924      	adds	r4, r4, r4
 8000782:	416d      	adcs	r5, r5
 8000784:	2100      	movs	r1, #0
 8000786:	3e01      	subs	r6, #1
 8000788:	1824      	adds	r4, r4, r0
 800078a:	414d      	adcs	r5, r1
 800078c:	2e00      	cmp	r6, #0
 800078e:	d006      	beq.n	800079e <__udivmoddi4+0x10a>
 8000790:	42ab      	cmp	r3, r5
 8000792:	d9ee      	bls.n	8000772 <__udivmoddi4+0xde>
 8000794:	3e01      	subs	r6, #1
 8000796:	1924      	adds	r4, r4, r4
 8000798:	416d      	adcs	r5, r5
 800079a:	2e00      	cmp	r6, #0
 800079c:	d1f8      	bne.n	8000790 <__udivmoddi4+0xfc>
 800079e:	9800      	ldr	r0, [sp, #0]
 80007a0:	9901      	ldr	r1, [sp, #4]
 80007a2:	465b      	mov	r3, fp
 80007a4:	1900      	adds	r0, r0, r4
 80007a6:	4169      	adcs	r1, r5
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db24      	blt.n	80007f6 <__udivmoddi4+0x162>
 80007ac:	002b      	movs	r3, r5
 80007ae:	465a      	mov	r2, fp
 80007b0:	4644      	mov	r4, r8
 80007b2:	40d3      	lsrs	r3, r2
 80007b4:	002a      	movs	r2, r5
 80007b6:	40e2      	lsrs	r2, r4
 80007b8:	001c      	movs	r4, r3
 80007ba:	465b      	mov	r3, fp
 80007bc:	0015      	movs	r5, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db2a      	blt.n	8000818 <__udivmoddi4+0x184>
 80007c2:	0026      	movs	r6, r4
 80007c4:	409e      	lsls	r6, r3
 80007c6:	0033      	movs	r3, r6
 80007c8:	0026      	movs	r6, r4
 80007ca:	4647      	mov	r7, r8
 80007cc:	40be      	lsls	r6, r7
 80007ce:	0032      	movs	r2, r6
 80007d0:	1a80      	subs	r0, r0, r2
 80007d2:	4199      	sbcs	r1, r3
 80007d4:	9000      	str	r0, [sp, #0]
 80007d6:	9101      	str	r1, [sp, #4]
 80007d8:	e79e      	b.n	8000718 <__udivmoddi4+0x84>
 80007da:	42a3      	cmp	r3, r4
 80007dc:	d8bc      	bhi.n	8000758 <__udivmoddi4+0xc4>
 80007de:	e782      	b.n	80006e6 <__udivmoddi4+0x52>
 80007e0:	4642      	mov	r2, r8
 80007e2:	2320      	movs	r3, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	2200      	movs	r2, #0
 80007ea:	9100      	str	r1, [sp, #0]
 80007ec:	9201      	str	r2, [sp, #4]
 80007ee:	2201      	movs	r2, #1
 80007f0:	40da      	lsrs	r2, r3
 80007f2:	9201      	str	r2, [sp, #4]
 80007f4:	e785      	b.n	8000702 <__udivmoddi4+0x6e>
 80007f6:	4642      	mov	r2, r8
 80007f8:	2320      	movs	r3, #32
 80007fa:	1a9b      	subs	r3, r3, r2
 80007fc:	002a      	movs	r2, r5
 80007fe:	4646      	mov	r6, r8
 8000800:	409a      	lsls	r2, r3
 8000802:	0023      	movs	r3, r4
 8000804:	40f3      	lsrs	r3, r6
 8000806:	4644      	mov	r4, r8
 8000808:	4313      	orrs	r3, r2
 800080a:	002a      	movs	r2, r5
 800080c:	40e2      	lsrs	r2, r4
 800080e:	001c      	movs	r4, r3
 8000810:	465b      	mov	r3, fp
 8000812:	0015      	movs	r5, r2
 8000814:	2b00      	cmp	r3, #0
 8000816:	dad4      	bge.n	80007c2 <__udivmoddi4+0x12e>
 8000818:	4642      	mov	r2, r8
 800081a:	002f      	movs	r7, r5
 800081c:	2320      	movs	r3, #32
 800081e:	0026      	movs	r6, r4
 8000820:	4097      	lsls	r7, r2
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	40de      	lsrs	r6, r3
 8000826:	003b      	movs	r3, r7
 8000828:	4333      	orrs	r3, r6
 800082a:	e7cd      	b.n	80007c8 <__udivmoddi4+0x134>

0800082c <__aeabi_fadd>:
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	46ce      	mov	lr, r9
 8000830:	4647      	mov	r7, r8
 8000832:	0243      	lsls	r3, r0, #9
 8000834:	0a5a      	lsrs	r2, r3, #9
 8000836:	024e      	lsls	r6, r1, #9
 8000838:	0045      	lsls	r5, r0, #1
 800083a:	0fc4      	lsrs	r4, r0, #31
 800083c:	0048      	lsls	r0, r1, #1
 800083e:	4691      	mov	r9, r2
 8000840:	0e2d      	lsrs	r5, r5, #24
 8000842:	0a72      	lsrs	r2, r6, #9
 8000844:	0e00      	lsrs	r0, r0, #24
 8000846:	4694      	mov	ip, r2
 8000848:	b580      	push	{r7, lr}
 800084a:	099b      	lsrs	r3, r3, #6
 800084c:	0fc9      	lsrs	r1, r1, #31
 800084e:	09b6      	lsrs	r6, r6, #6
 8000850:	1a2a      	subs	r2, r5, r0
 8000852:	428c      	cmp	r4, r1
 8000854:	d021      	beq.n	800089a <__aeabi_fadd+0x6e>
 8000856:	2a00      	cmp	r2, #0
 8000858:	dd0d      	ble.n	8000876 <__aeabi_fadd+0x4a>
 800085a:	2800      	cmp	r0, #0
 800085c:	d12d      	bne.n	80008ba <__aeabi_fadd+0x8e>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x38>
 8000862:	e08d      	b.n	8000980 <__aeabi_fadd+0x154>
 8000864:	1e51      	subs	r1, r2, #1
 8000866:	2a01      	cmp	r2, #1
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x40>
 800086a:	e11d      	b.n	8000aa8 <__aeabi_fadd+0x27c>
 800086c:	2aff      	cmp	r2, #255	@ 0xff
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x46>
 8000870:	e0ab      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000872:	000a      	movs	r2, r1
 8000874:	e027      	b.n	80008c6 <__aeabi_fadd+0x9a>
 8000876:	2a00      	cmp	r2, #0
 8000878:	d04d      	beq.n	8000916 <__aeabi_fadd+0xea>
 800087a:	1b42      	subs	r2, r0, r5
 800087c:	2d00      	cmp	r5, #0
 800087e:	d000      	beq.n	8000882 <__aeabi_fadd+0x56>
 8000880:	e0cc      	b.n	8000a1c <__aeabi_fadd+0x1f0>
 8000882:	2b00      	cmp	r3, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x5c>
 8000886:	e079      	b.n	800097c <__aeabi_fadd+0x150>
 8000888:	1e54      	subs	r4, r2, #1
 800088a:	2a01      	cmp	r2, #1
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x64>
 800088e:	e128      	b.n	8000ae2 <__aeabi_fadd+0x2b6>
 8000890:	2aff      	cmp	r2, #255	@ 0xff
 8000892:	d100      	bne.n	8000896 <__aeabi_fadd+0x6a>
 8000894:	e097      	b.n	80009c6 <__aeabi_fadd+0x19a>
 8000896:	0022      	movs	r2, r4
 8000898:	e0c5      	b.n	8000a26 <__aeabi_fadd+0x1fa>
 800089a:	2a00      	cmp	r2, #0
 800089c:	dc00      	bgt.n	80008a0 <__aeabi_fadd+0x74>
 800089e:	e096      	b.n	80009ce <__aeabi_fadd+0x1a2>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d04f      	beq.n	8000944 <__aeabi_fadd+0x118>
 80008a4:	2dff      	cmp	r5, #255	@ 0xff
 80008a6:	d100      	bne.n	80008aa <__aeabi_fadd+0x7e>
 80008a8:	e08f      	b.n	80009ca <__aeabi_fadd+0x19e>
 80008aa:	2180      	movs	r1, #128	@ 0x80
 80008ac:	04c9      	lsls	r1, r1, #19
 80008ae:	430e      	orrs	r6, r1
 80008b0:	2a1b      	cmp	r2, #27
 80008b2:	dd51      	ble.n	8000958 <__aeabi_fadd+0x12c>
 80008b4:	002a      	movs	r2, r5
 80008b6:	3301      	adds	r3, #1
 80008b8:	e018      	b.n	80008ec <__aeabi_fadd+0xc0>
 80008ba:	2dff      	cmp	r5, #255	@ 0xff
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x94>
 80008be:	e084      	b.n	80009ca <__aeabi_fadd+0x19e>
 80008c0:	2180      	movs	r1, #128	@ 0x80
 80008c2:	04c9      	lsls	r1, r1, #19
 80008c4:	430e      	orrs	r6, r1
 80008c6:	2101      	movs	r1, #1
 80008c8:	2a1b      	cmp	r2, #27
 80008ca:	dc08      	bgt.n	80008de <__aeabi_fadd+0xb2>
 80008cc:	0031      	movs	r1, r6
 80008ce:	2020      	movs	r0, #32
 80008d0:	40d1      	lsrs	r1, r2
 80008d2:	1a82      	subs	r2, r0, r2
 80008d4:	4096      	lsls	r6, r2
 80008d6:	0032      	movs	r2, r6
 80008d8:	1e50      	subs	r0, r2, #1
 80008da:	4182      	sbcs	r2, r0
 80008dc:	4311      	orrs	r1, r2
 80008de:	1a5b      	subs	r3, r3, r1
 80008e0:	015a      	lsls	r2, r3, #5
 80008e2:	d459      	bmi.n	8000998 <__aeabi_fadd+0x16c>
 80008e4:	2107      	movs	r1, #7
 80008e6:	002a      	movs	r2, r5
 80008e8:	4019      	ands	r1, r3
 80008ea:	d049      	beq.n	8000980 <__aeabi_fadd+0x154>
 80008ec:	210f      	movs	r1, #15
 80008ee:	4019      	ands	r1, r3
 80008f0:	2904      	cmp	r1, #4
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fadd+0xca>
 80008f4:	3304      	adds	r3, #4
 80008f6:	0159      	lsls	r1, r3, #5
 80008f8:	d542      	bpl.n	8000980 <__aeabi_fadd+0x154>
 80008fa:	1c50      	adds	r0, r2, #1
 80008fc:	2afe      	cmp	r2, #254	@ 0xfe
 80008fe:	d03a      	beq.n	8000976 <__aeabi_fadd+0x14a>
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	b2c0      	uxtb	r0, r0
 8000904:	0a5b      	lsrs	r3, r3, #9
 8000906:	05c0      	lsls	r0, r0, #23
 8000908:	4318      	orrs	r0, r3
 800090a:	07e4      	lsls	r4, r4, #31
 800090c:	4320      	orrs	r0, r4
 800090e:	bcc0      	pop	{r6, r7}
 8000910:	46b9      	mov	r9, r7
 8000912:	46b0      	mov	r8, r6
 8000914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000916:	20fe      	movs	r0, #254	@ 0xfe
 8000918:	4680      	mov	r8, r0
 800091a:	1c6f      	adds	r7, r5, #1
 800091c:	0038      	movs	r0, r7
 800091e:	4647      	mov	r7, r8
 8000920:	4207      	tst	r7, r0
 8000922:	d000      	beq.n	8000926 <__aeabi_fadd+0xfa>
 8000924:	e08e      	b.n	8000a44 <__aeabi_fadd+0x218>
 8000926:	2d00      	cmp	r5, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x100>
 800092a:	e0b4      	b.n	8000a96 <__aeabi_fadd+0x26a>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x106>
 8000930:	e0db      	b.n	8000aea <__aeabi_fadd+0x2be>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d06c      	beq.n	8000a10 <__aeabi_fadd+0x1e4>
 8000936:	1b98      	subs	r0, r3, r6
 8000938:	0145      	lsls	r5, r0, #5
 800093a:	d400      	bmi.n	800093e <__aeabi_fadd+0x112>
 800093c:	e0f7      	b.n	8000b2e <__aeabi_fadd+0x302>
 800093e:	000c      	movs	r4, r1
 8000940:	1af3      	subs	r3, r6, r3
 8000942:	e03d      	b.n	80009c0 <__aeabi_fadd+0x194>
 8000944:	2e00      	cmp	r6, #0
 8000946:	d01b      	beq.n	8000980 <__aeabi_fadd+0x154>
 8000948:	1e51      	subs	r1, r2, #1
 800094a:	2a01      	cmp	r2, #1
 800094c:	d100      	bne.n	8000950 <__aeabi_fadd+0x124>
 800094e:	e082      	b.n	8000a56 <__aeabi_fadd+0x22a>
 8000950:	2aff      	cmp	r2, #255	@ 0xff
 8000952:	d03a      	beq.n	80009ca <__aeabi_fadd+0x19e>
 8000954:	000a      	movs	r2, r1
 8000956:	e7ab      	b.n	80008b0 <__aeabi_fadd+0x84>
 8000958:	0031      	movs	r1, r6
 800095a:	2020      	movs	r0, #32
 800095c:	40d1      	lsrs	r1, r2
 800095e:	1a82      	subs	r2, r0, r2
 8000960:	4096      	lsls	r6, r2
 8000962:	0032      	movs	r2, r6
 8000964:	1e50      	subs	r0, r2, #1
 8000966:	4182      	sbcs	r2, r0
 8000968:	430a      	orrs	r2, r1
 800096a:	189b      	adds	r3, r3, r2
 800096c:	015a      	lsls	r2, r3, #5
 800096e:	d5b9      	bpl.n	80008e4 <__aeabi_fadd+0xb8>
 8000970:	1c6a      	adds	r2, r5, #1
 8000972:	2dfe      	cmp	r5, #254	@ 0xfe
 8000974:	d175      	bne.n	8000a62 <__aeabi_fadd+0x236>
 8000976:	20ff      	movs	r0, #255	@ 0xff
 8000978:	2300      	movs	r3, #0
 800097a:	e7c4      	b.n	8000906 <__aeabi_fadd+0xda>
 800097c:	000c      	movs	r4, r1
 800097e:	0033      	movs	r3, r6
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	2aff      	cmp	r2, #255	@ 0xff
 8000984:	d146      	bne.n	8000a14 <__aeabi_fadd+0x1e8>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f5      	beq.n	8000976 <__aeabi_fadd+0x14a>
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	03d2      	lsls	r2, r2, #15
 800098e:	4313      	orrs	r3, r2
 8000990:	025b      	lsls	r3, r3, #9
 8000992:	20ff      	movs	r0, #255	@ 0xff
 8000994:	0a5b      	lsrs	r3, r3, #9
 8000996:	e7b6      	b.n	8000906 <__aeabi_fadd+0xda>
 8000998:	019f      	lsls	r7, r3, #6
 800099a:	09bf      	lsrs	r7, r7, #6
 800099c:	0038      	movs	r0, r7
 800099e:	f002 fc09 	bl	80031b4 <__clzsi2>
 80009a2:	3805      	subs	r0, #5
 80009a4:	4087      	lsls	r7, r0
 80009a6:	4285      	cmp	r5, r0
 80009a8:	dc24      	bgt.n	80009f4 <__aeabi_fadd+0x1c8>
 80009aa:	003b      	movs	r3, r7
 80009ac:	2120      	movs	r1, #32
 80009ae:	1b42      	subs	r2, r0, r5
 80009b0:	3201      	adds	r2, #1
 80009b2:	40d3      	lsrs	r3, r2
 80009b4:	1a8a      	subs	r2, r1, r2
 80009b6:	4097      	lsls	r7, r2
 80009b8:	1e7a      	subs	r2, r7, #1
 80009ba:	4197      	sbcs	r7, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	433b      	orrs	r3, r7
 80009c0:	0759      	lsls	r1, r3, #29
 80009c2:	d193      	bne.n	80008ec <__aeabi_fadd+0xc0>
 80009c4:	e797      	b.n	80008f6 <__aeabi_fadd+0xca>
 80009c6:	000c      	movs	r4, r1
 80009c8:	0033      	movs	r3, r6
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	e7db      	b.n	8000986 <__aeabi_fadd+0x15a>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d014      	beq.n	80009fc <__aeabi_fadd+0x1d0>
 80009d2:	1b42      	subs	r2, r0, r5
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d14b      	bne.n	8000a70 <__aeabi_fadd+0x244>
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0d0      	beq.n	800097e <__aeabi_fadd+0x152>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x1b8>
 80009e2:	e09e      	b.n	8000b22 <__aeabi_fadd+0x2f6>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d0ef      	beq.n	80009c8 <__aeabi_fadd+0x19c>
 80009e8:	000a      	movs	r2, r1
 80009ea:	2a1b      	cmp	r2, #27
 80009ec:	dd5f      	ble.n	8000aae <__aeabi_fadd+0x282>
 80009ee:	0002      	movs	r2, r0
 80009f0:	1c73      	adds	r3, r6, #1
 80009f2:	e77b      	b.n	80008ec <__aeabi_fadd+0xc0>
 80009f4:	4b50      	ldr	r3, [pc, #320]	@ (8000b38 <__aeabi_fadd+0x30c>)
 80009f6:	1a2a      	subs	r2, r5, r0
 80009f8:	403b      	ands	r3, r7
 80009fa:	e7e1      	b.n	80009c0 <__aeabi_fadd+0x194>
 80009fc:	21fe      	movs	r1, #254	@ 0xfe
 80009fe:	1c6a      	adds	r2, r5, #1
 8000a00:	4211      	tst	r1, r2
 8000a02:	d13b      	bne.n	8000a7c <__aeabi_fadd+0x250>
 8000a04:	2d00      	cmp	r5, #0
 8000a06:	d15d      	bne.n	8000ac4 <__aeabi_fadd+0x298>
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d07f      	beq.n	8000b0c <__aeabi_fadd+0x2e0>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d17f      	bne.n	8000b10 <__aeabi_fadd+0x2e4>
 8000a10:	2200      	movs	r2, #0
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	025b      	lsls	r3, r3, #9
 8000a16:	0a5b      	lsrs	r3, r3, #9
 8000a18:	b2d0      	uxtb	r0, r2
 8000a1a:	e774      	b.n	8000906 <__aeabi_fadd+0xda>
 8000a1c:	28ff      	cmp	r0, #255	@ 0xff
 8000a1e:	d0d2      	beq.n	80009c6 <__aeabi_fadd+0x19a>
 8000a20:	2480      	movs	r4, #128	@ 0x80
 8000a22:	04e4      	lsls	r4, r4, #19
 8000a24:	4323      	orrs	r3, r4
 8000a26:	2401      	movs	r4, #1
 8000a28:	2a1b      	cmp	r2, #27
 8000a2a:	dc07      	bgt.n	8000a3c <__aeabi_fadd+0x210>
 8000a2c:	001c      	movs	r4, r3
 8000a2e:	2520      	movs	r5, #32
 8000a30:	40d4      	lsrs	r4, r2
 8000a32:	1aaa      	subs	r2, r5, r2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4193      	sbcs	r3, r2
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	1b33      	subs	r3, r6, r4
 8000a3e:	0005      	movs	r5, r0
 8000a40:	000c      	movs	r4, r1
 8000a42:	e74d      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000a44:	1b9f      	subs	r7, r3, r6
 8000a46:	017a      	lsls	r2, r7, #5
 8000a48:	d422      	bmi.n	8000a90 <__aeabi_fadd+0x264>
 8000a4a:	2f00      	cmp	r7, #0
 8000a4c:	d1a6      	bne.n	800099c <__aeabi_fadd+0x170>
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	2300      	movs	r3, #0
 8000a54:	e757      	b.n	8000906 <__aeabi_fadd+0xda>
 8000a56:	199b      	adds	r3, r3, r6
 8000a58:	2501      	movs	r5, #1
 8000a5a:	3201      	adds	r2, #1
 8000a5c:	0159      	lsls	r1, r3, #5
 8000a5e:	d400      	bmi.n	8000a62 <__aeabi_fadd+0x236>
 8000a60:	e740      	b.n	80008e4 <__aeabi_fadd+0xb8>
 8000a62:	2101      	movs	r1, #1
 8000a64:	4835      	ldr	r0, [pc, #212]	@ (8000b3c <__aeabi_fadd+0x310>)
 8000a66:	4019      	ands	r1, r3
 8000a68:	085b      	lsrs	r3, r3, #1
 8000a6a:	4003      	ands	r3, r0
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	e7a7      	b.n	80009c0 <__aeabi_fadd+0x194>
 8000a70:	28ff      	cmp	r0, #255	@ 0xff
 8000a72:	d0a9      	beq.n	80009c8 <__aeabi_fadd+0x19c>
 8000a74:	2180      	movs	r1, #128	@ 0x80
 8000a76:	04c9      	lsls	r1, r1, #19
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	e7b6      	b.n	80009ea <__aeabi_fadd+0x1be>
 8000a7c:	2aff      	cmp	r2, #255	@ 0xff
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fadd+0x256>
 8000a80:	e779      	b.n	8000976 <__aeabi_fadd+0x14a>
 8000a82:	199b      	adds	r3, r3, r6
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	0759      	lsls	r1, r3, #29
 8000a88:	d000      	beq.n	8000a8c <__aeabi_fadd+0x260>
 8000a8a:	e72f      	b.n	80008ec <__aeabi_fadd+0xc0>
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	e7c1      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000a90:	000c      	movs	r4, r1
 8000a92:	1af7      	subs	r7, r6, r3
 8000a94:	e782      	b.n	800099c <__aeabi_fadd+0x170>
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d12c      	bne.n	8000af4 <__aeabi_fadd+0x2c8>
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d193      	bne.n	80009c6 <__aeabi_fadd+0x19a>
 8000a9e:	2380      	movs	r3, #128	@ 0x80
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	20ff      	movs	r0, #255	@ 0xff
 8000aa4:	03db      	lsls	r3, r3, #15
 8000aa6:	e72e      	b.n	8000906 <__aeabi_fadd+0xda>
 8000aa8:	2501      	movs	r5, #1
 8000aaa:	1b9b      	subs	r3, r3, r6
 8000aac:	e718      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000aae:	0019      	movs	r1, r3
 8000ab0:	2520      	movs	r5, #32
 8000ab2:	40d1      	lsrs	r1, r2
 8000ab4:	1aaa      	subs	r2, r5, r2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	4193      	sbcs	r3, r2
 8000abc:	430b      	orrs	r3, r1
 8000abe:	0005      	movs	r5, r0
 8000ac0:	199b      	adds	r3, r3, r6
 8000ac2:	e753      	b.n	800096c <__aeabi_fadd+0x140>
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fadd+0x29e>
 8000ac8:	e77e      	b.n	80009c8 <__aeabi_fadd+0x19c>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fadd+0x2a4>
 8000ace:	e77c      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	03d2      	lsls	r2, r2, #15
 8000ad4:	4591      	cmp	r9, r2
 8000ad6:	d302      	bcc.n	8000ade <__aeabi_fadd+0x2b2>
 8000ad8:	4594      	cmp	ip, r2
 8000ada:	d200      	bcs.n	8000ade <__aeabi_fadd+0x2b2>
 8000adc:	0033      	movs	r3, r6
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	e753      	b.n	800098a <__aeabi_fadd+0x15e>
 8000ae2:	000c      	movs	r4, r1
 8000ae4:	1af3      	subs	r3, r6, r3
 8000ae6:	3501      	adds	r5, #1
 8000ae8:	e6fa      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d0af      	beq.n	8000a4e <__aeabi_fadd+0x222>
 8000aee:	000c      	movs	r4, r1
 8000af0:	0033      	movs	r3, r6
 8000af2:	e78d      	b.n	8000a10 <__aeabi_fadd+0x1e4>
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_fadd+0x2ce>
 8000af8:	e767      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	03d2      	lsls	r2, r2, #15
 8000afe:	4591      	cmp	r9, r2
 8000b00:	d3ed      	bcc.n	8000ade <__aeabi_fadd+0x2b2>
 8000b02:	4594      	cmp	ip, r2
 8000b04:	d2eb      	bcs.n	8000ade <__aeabi_fadd+0x2b2>
 8000b06:	000c      	movs	r4, r1
 8000b08:	0033      	movs	r3, r6
 8000b0a:	e7e8      	b.n	8000ade <__aeabi_fadd+0x2b2>
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	e77f      	b.n	8000a10 <__aeabi_fadd+0x1e4>
 8000b10:	199b      	adds	r3, r3, r6
 8000b12:	2200      	movs	r2, #0
 8000b14:	0159      	lsls	r1, r3, #5
 8000b16:	d5b9      	bpl.n	8000a8c <__aeabi_fadd+0x260>
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <__aeabi_fadd+0x30c>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	08db      	lsrs	r3, r3, #3
 8000b1e:	2201      	movs	r2, #1
 8000b20:	e778      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000b22:	199b      	adds	r3, r3, r6
 8000b24:	3201      	adds	r2, #1
 8000b26:	3501      	adds	r5, #1
 8000b28:	0159      	lsls	r1, r3, #5
 8000b2a:	d49a      	bmi.n	8000a62 <__aeabi_fadd+0x236>
 8000b2c:	e6da      	b.n	80008e4 <__aeabi_fadd+0xb8>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d08d      	beq.n	8000a4e <__aeabi_fadd+0x222>
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	e76e      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	fbffffff 	.word	0xfbffffff
 8000b3c:	7dffffff 	.word	0x7dffffff

08000b40 <__aeabi_fdiv>:
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	464f      	mov	r7, r9
 8000b44:	4646      	mov	r6, r8
 8000b46:	46d6      	mov	lr, sl
 8000b48:	0244      	lsls	r4, r0, #9
 8000b4a:	b5c0      	push	{r6, r7, lr}
 8000b4c:	0047      	lsls	r7, r0, #1
 8000b4e:	1c0e      	adds	r6, r1, #0
 8000b50:	0a64      	lsrs	r4, r4, #9
 8000b52:	0e3f      	lsrs	r7, r7, #24
 8000b54:	0fc5      	lsrs	r5, r0, #31
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d03c      	beq.n	8000bd4 <__aeabi_fdiv+0x94>
 8000b5a:	2fff      	cmp	r7, #255	@ 0xff
 8000b5c:	d042      	beq.n	8000be4 <__aeabi_fdiv+0xa4>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	4699      	mov	r9, r3
 8000b64:	469a      	mov	sl, r3
 8000b66:	00e4      	lsls	r4, r4, #3
 8000b68:	04d2      	lsls	r2, r2, #19
 8000b6a:	4314      	orrs	r4, r2
 8000b6c:	3f7f      	subs	r7, #127	@ 0x7f
 8000b6e:	0273      	lsls	r3, r6, #9
 8000b70:	0a5b      	lsrs	r3, r3, #9
 8000b72:	4698      	mov	r8, r3
 8000b74:	0073      	lsls	r3, r6, #1
 8000b76:	0e1b      	lsrs	r3, r3, #24
 8000b78:	0ff6      	lsrs	r6, r6, #31
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01b      	beq.n	8000bb6 <__aeabi_fdiv+0x76>
 8000b7e:	2bff      	cmp	r3, #255	@ 0xff
 8000b80:	d013      	beq.n	8000baa <__aeabi_fdiv+0x6a>
 8000b82:	4642      	mov	r2, r8
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	00d2      	lsls	r2, r2, #3
 8000b88:	04c9      	lsls	r1, r1, #19
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	4688      	mov	r8, r1
 8000b8e:	2000      	movs	r0, #0
 8000b90:	3b7f      	subs	r3, #127	@ 0x7f
 8000b92:	0029      	movs	r1, r5
 8000b94:	1aff      	subs	r7, r7, r3
 8000b96:	464b      	mov	r3, r9
 8000b98:	4071      	eors	r1, r6
 8000b9a:	b2c9      	uxtb	r1, r1
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d900      	bls.n	8000ba2 <__aeabi_fdiv+0x62>
 8000ba0:	e0b5      	b.n	8000d0e <__aeabi_fdiv+0x1ce>
 8000ba2:	4a74      	ldr	r2, [pc, #464]	@ (8000d74 <__aeabi_fdiv+0x234>)
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	58d3      	ldr	r3, [r2, r3]
 8000ba8:	469f      	mov	pc, r3
 8000baa:	4643      	mov	r3, r8
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d13f      	bne.n	8000c30 <__aeabi_fdiv+0xf0>
 8000bb0:	3fff      	subs	r7, #255	@ 0xff
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	e003      	b.n	8000bbe <__aeabi_fdiv+0x7e>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d12d      	bne.n	8000c18 <__aeabi_fdiv+0xd8>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	0029      	movs	r1, r5
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	4071      	eors	r1, r6
 8000bc4:	b2c9      	uxtb	r1, r1
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	2a0e      	cmp	r2, #14
 8000bca:	d838      	bhi.n	8000c3e <__aeabi_fdiv+0xfe>
 8000bcc:	486a      	ldr	r0, [pc, #424]	@ (8000d78 <__aeabi_fdiv+0x238>)
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	5882      	ldr	r2, [r0, r2]
 8000bd2:	4697      	mov	pc, r2
 8000bd4:	2c00      	cmp	r4, #0
 8000bd6:	d113      	bne.n	8000c00 <__aeabi_fdiv+0xc0>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	4699      	mov	r9, r3
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	2700      	movs	r7, #0
 8000be0:	469a      	mov	sl, r3
 8000be2:	e7c4      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_fdiv+0xb4>
 8000be8:	2308      	movs	r3, #8
 8000bea:	4699      	mov	r9, r3
 8000bec:	3b06      	subs	r3, #6
 8000bee:	27ff      	movs	r7, #255	@ 0xff
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	e7bc      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	3b09      	subs	r3, #9
 8000bfa:	27ff      	movs	r7, #255	@ 0xff
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	e7b6      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 fad7 	bl	80031b4 <__clzsi2>
 8000c06:	2776      	movs	r7, #118	@ 0x76
 8000c08:	1f43      	subs	r3, r0, #5
 8000c0a:	409c      	lsls	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	427f      	negs	r7, r7
 8000c10:	4699      	mov	r9, r3
 8000c12:	469a      	mov	sl, r3
 8000c14:	1a3f      	subs	r7, r7, r0
 8000c16:	e7aa      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000c18:	4640      	mov	r0, r8
 8000c1a:	f002 facb 	bl	80031b4 <__clzsi2>
 8000c1e:	4642      	mov	r2, r8
 8000c20:	1f43      	subs	r3, r0, #5
 8000c22:	409a      	lsls	r2, r3
 8000c24:	2376      	movs	r3, #118	@ 0x76
 8000c26:	425b      	negs	r3, r3
 8000c28:	1a1b      	subs	r3, r3, r0
 8000c2a:	4690      	mov	r8, r2
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e7b0      	b.n	8000b92 <__aeabi_fdiv+0x52>
 8000c30:	2303      	movs	r3, #3
 8000c32:	464a      	mov	r2, r9
 8000c34:	431a      	orrs	r2, r3
 8000c36:	4691      	mov	r9, r2
 8000c38:	2003      	movs	r0, #3
 8000c3a:	33fc      	adds	r3, #252	@ 0xfc
 8000c3c:	e7a9      	b.n	8000b92 <__aeabi_fdiv+0x52>
 8000c3e:	000d      	movs	r5, r1
 8000c40:	20ff      	movs	r0, #255	@ 0xff
 8000c42:	2200      	movs	r2, #0
 8000c44:	05c0      	lsls	r0, r0, #23
 8000c46:	07ed      	lsls	r5, r5, #31
 8000c48:	4310      	orrs	r0, r2
 8000c4a:	4328      	orrs	r0, r5
 8000c4c:	bce0      	pop	{r5, r6, r7}
 8000c4e:	46ba      	mov	sl, r7
 8000c50:	46b1      	mov	r9, r6
 8000c52:	46a8      	mov	r8, r5
 8000c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c56:	000d      	movs	r5, r1
 8000c58:	2000      	movs	r0, #0
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	e7f2      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000c5e:	4653      	mov	r3, sl
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d0ed      	beq.n	8000c40 <__aeabi_fdiv+0x100>
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d033      	beq.n	8000cd0 <__aeabi_fdiv+0x190>
 8000c68:	46a0      	mov	r8, r4
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d105      	bne.n	8000c7a <__aeabi_fdiv+0x13a>
 8000c6e:	2000      	movs	r0, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	e7e7      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000c74:	0035      	movs	r5, r6
 8000c76:	2803      	cmp	r0, #3
 8000c78:	d07a      	beq.n	8000d70 <__aeabi_fdiv+0x230>
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	337f      	adds	r3, #127	@ 0x7f
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	dd2d      	ble.n	8000cde <__aeabi_fdiv+0x19e>
 8000c82:	4642      	mov	r2, r8
 8000c84:	0752      	lsls	r2, r2, #29
 8000c86:	d007      	beq.n	8000c98 <__aeabi_fdiv+0x158>
 8000c88:	220f      	movs	r2, #15
 8000c8a:	4641      	mov	r1, r8
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	2a04      	cmp	r2, #4
 8000c90:	d002      	beq.n	8000c98 <__aeabi_fdiv+0x158>
 8000c92:	2204      	movs	r2, #4
 8000c94:	4694      	mov	ip, r2
 8000c96:	44e0      	add	r8, ip
 8000c98:	4642      	mov	r2, r8
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	d505      	bpl.n	8000caa <__aeabi_fdiv+0x16a>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <__aeabi_fdiv+0x23c>)
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	003b      	movs	r3, r7
 8000ca6:	4690      	mov	r8, r2
 8000ca8:	3380      	adds	r3, #128	@ 0x80
 8000caa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cac:	dcc8      	bgt.n	8000c40 <__aeabi_fdiv+0x100>
 8000cae:	4642      	mov	r2, r8
 8000cb0:	0192      	lsls	r2, r2, #6
 8000cb2:	0a52      	lsrs	r2, r2, #9
 8000cb4:	b2d8      	uxtb	r0, r3
 8000cb6:	e7c5      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	2500      	movs	r5, #0
 8000cbc:	20ff      	movs	r0, #255	@ 0xff
 8000cbe:	03d2      	lsls	r2, r2, #15
 8000cc0:	e7c0      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cc2:	2280      	movs	r2, #128	@ 0x80
 8000cc4:	03d2      	lsls	r2, r2, #15
 8000cc6:	4214      	tst	r4, r2
 8000cc8:	d002      	beq.n	8000cd0 <__aeabi_fdiv+0x190>
 8000cca:	4643      	mov	r3, r8
 8000ccc:	4213      	tst	r3, r2
 8000cce:	d049      	beq.n	8000d64 <__aeabi_fdiv+0x224>
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	03d2      	lsls	r2, r2, #15
 8000cd4:	4322      	orrs	r2, r4
 8000cd6:	0252      	lsls	r2, r2, #9
 8000cd8:	20ff      	movs	r0, #255	@ 0xff
 8000cda:	0a52      	lsrs	r2, r2, #9
 8000cdc:	e7b2      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cde:	2201      	movs	r2, #1
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b1b      	cmp	r3, #27
 8000ce4:	dcc3      	bgt.n	8000c6e <__aeabi_fdiv+0x12e>
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	40da      	lsrs	r2, r3
 8000cea:	4643      	mov	r3, r8
 8000cec:	379e      	adds	r7, #158	@ 0x9e
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	1e59      	subs	r1, r3, #1
 8000cf2:	418b      	sbcs	r3, r1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0753      	lsls	r3, r2, #29
 8000cf8:	d004      	beq.n	8000d04 <__aeabi_fdiv+0x1c4>
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d000      	beq.n	8000d04 <__aeabi_fdiv+0x1c4>
 8000d02:	3204      	adds	r2, #4
 8000d04:	0153      	lsls	r3, r2, #5
 8000d06:	d529      	bpl.n	8000d5c <__aeabi_fdiv+0x21c>
 8000d08:	2001      	movs	r0, #1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	e79a      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d0e:	4642      	mov	r2, r8
 8000d10:	0163      	lsls	r3, r4, #5
 8000d12:	0155      	lsls	r5, r2, #5
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	d215      	bcs.n	8000d44 <__aeabi_fdiv+0x204>
 8000d18:	201b      	movs	r0, #27
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	3f01      	subs	r7, #1
 8000d1e:	2601      	movs	r6, #1
 8000d20:	001c      	movs	r4, r3
 8000d22:	0052      	lsls	r2, r2, #1
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2c00      	cmp	r4, #0
 8000d28:	db01      	blt.n	8000d2e <__aeabi_fdiv+0x1ee>
 8000d2a:	429d      	cmp	r5, r3
 8000d2c:	d801      	bhi.n	8000d32 <__aeabi_fdiv+0x1f2>
 8000d2e:	1b5b      	subs	r3, r3, r5
 8000d30:	4332      	orrs	r2, r6
 8000d32:	3801      	subs	r0, #1
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d1f3      	bne.n	8000d20 <__aeabi_fdiv+0x1e0>
 8000d38:	1e58      	subs	r0, r3, #1
 8000d3a:	4183      	sbcs	r3, r0
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	4698      	mov	r8, r3
 8000d40:	000d      	movs	r5, r1
 8000d42:	e79a      	b.n	8000c7a <__aeabi_fdiv+0x13a>
 8000d44:	201a      	movs	r0, #26
 8000d46:	2201      	movs	r2, #1
 8000d48:	1b5b      	subs	r3, r3, r5
 8000d4a:	e7e8      	b.n	8000d1e <__aeabi_fdiv+0x1de>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	425a      	negs	r2, r3
 8000d50:	4153      	adcs	r3, r2
 8000d52:	425b      	negs	r3, r3
 8000d54:	0035      	movs	r5, r6
 8000d56:	2200      	movs	r2, #0
 8000d58:	b2d8      	uxtb	r0, r3
 8000d5a:	e773      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d5c:	0192      	lsls	r2, r2, #6
 8000d5e:	2000      	movs	r0, #0
 8000d60:	0a52      	lsrs	r2, r2, #9
 8000d62:	e76f      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d64:	431a      	orrs	r2, r3
 8000d66:	0252      	lsls	r2, r2, #9
 8000d68:	0035      	movs	r5, r6
 8000d6a:	20ff      	movs	r0, #255	@ 0xff
 8000d6c:	0a52      	lsrs	r2, r2, #9
 8000d6e:	e769      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d70:	4644      	mov	r4, r8
 8000d72:	e7ad      	b.n	8000cd0 <__aeabi_fdiv+0x190>
 8000d74:	0800db40 	.word	0x0800db40
 8000d78:	0800db80 	.word	0x0800db80
 8000d7c:	f7ffffff 	.word	0xf7ffffff

08000d80 <__eqsf2>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	024e      	lsls	r6, r1, #9
 8000d86:	004c      	lsls	r4, r1, #1
 8000d88:	0245      	lsls	r5, r0, #9
 8000d8a:	0a6d      	lsrs	r5, r5, #9
 8000d8c:	0e12      	lsrs	r2, r2, #24
 8000d8e:	0fc3      	lsrs	r3, r0, #31
 8000d90:	0a76      	lsrs	r6, r6, #9
 8000d92:	0e24      	lsrs	r4, r4, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2aff      	cmp	r2, #255	@ 0xff
 8000d98:	d010      	beq.n	8000dbc <__eqsf2+0x3c>
 8000d9a:	2cff      	cmp	r4, #255	@ 0xff
 8000d9c:	d00c      	beq.n	8000db8 <__eqsf2+0x38>
 8000d9e:	2001      	movs	r0, #1
 8000da0:	42a2      	cmp	r2, r4
 8000da2:	d10a      	bne.n	8000dba <__eqsf2+0x3a>
 8000da4:	42b5      	cmp	r5, r6
 8000da6:	d108      	bne.n	8000dba <__eqsf2+0x3a>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d00f      	beq.n	8000dcc <__eqsf2+0x4c>
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	d104      	bne.n	8000dba <__eqsf2+0x3a>
 8000db0:	0028      	movs	r0, r5
 8000db2:	1e43      	subs	r3, r0, #1
 8000db4:	4198      	sbcs	r0, r3
 8000db6:	e000      	b.n	8000dba <__eqsf2+0x3a>
 8000db8:	2001      	movs	r0, #1
 8000dba:	bd70      	pop	{r4, r5, r6, pc}
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	2cff      	cmp	r4, #255	@ 0xff
 8000dc0:	d1fb      	bne.n	8000dba <__eqsf2+0x3a>
 8000dc2:	4335      	orrs	r5, r6
 8000dc4:	d1f9      	bne.n	8000dba <__eqsf2+0x3a>
 8000dc6:	404b      	eors	r3, r1
 8000dc8:	0018      	movs	r0, r3
 8000dca:	e7f6      	b.n	8000dba <__eqsf2+0x3a>
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e7f4      	b.n	8000dba <__eqsf2+0x3a>

08000dd0 <__gesf2>:
 8000dd0:	b530      	push	{r4, r5, lr}
 8000dd2:	0042      	lsls	r2, r0, #1
 8000dd4:	0244      	lsls	r4, r0, #9
 8000dd6:	024d      	lsls	r5, r1, #9
 8000dd8:	0fc3      	lsrs	r3, r0, #31
 8000dda:	0048      	lsls	r0, r1, #1
 8000ddc:	0a64      	lsrs	r4, r4, #9
 8000dde:	0e12      	lsrs	r2, r2, #24
 8000de0:	0a6d      	lsrs	r5, r5, #9
 8000de2:	0e00      	lsrs	r0, r0, #24
 8000de4:	0fc9      	lsrs	r1, r1, #31
 8000de6:	2aff      	cmp	r2, #255	@ 0xff
 8000de8:	d019      	beq.n	8000e1e <__gesf2+0x4e>
 8000dea:	28ff      	cmp	r0, #255	@ 0xff
 8000dec:	d00b      	beq.n	8000e06 <__gesf2+0x36>
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d11e      	bne.n	8000e30 <__gesf2+0x60>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d10b      	bne.n	8000e0e <__gesf2+0x3e>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d027      	beq.n	8000e4a <__gesf2+0x7a>
 8000dfa:	2c00      	cmp	r4, #0
 8000dfc:	d134      	bne.n	8000e68 <__gesf2+0x98>
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d02f      	beq.n	8000e62 <__gesf2+0x92>
 8000e02:	0008      	movs	r0, r1
 8000e04:	bd30      	pop	{r4, r5, pc}
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d128      	bne.n	8000e5c <__gesf2+0x8c>
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d101      	bne.n	8000e12 <__gesf2+0x42>
 8000e0e:	2c00      	cmp	r4, #0
 8000e10:	d0f5      	beq.n	8000dfe <__gesf2+0x2e>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d107      	bne.n	8000e26 <__gesf2+0x56>
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d023      	beq.n	8000e62 <__gesf2+0x92>
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	e7f2      	b.n	8000e04 <__gesf2+0x34>
 8000e1e:	2c00      	cmp	r4, #0
 8000e20:	d11c      	bne.n	8000e5c <__gesf2+0x8c>
 8000e22:	28ff      	cmp	r0, #255	@ 0xff
 8000e24:	d014      	beq.n	8000e50 <__gesf2+0x80>
 8000e26:	1e58      	subs	r0, r3, #1
 8000e28:	2302      	movs	r3, #2
 8000e2a:	4018      	ands	r0, r3
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7e9      	b.n	8000e04 <__gesf2+0x34>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d0f8      	beq.n	8000e26 <__gesf2+0x56>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d1f6      	bne.n	8000e26 <__gesf2+0x56>
 8000e38:	4282      	cmp	r2, r0
 8000e3a:	dcf4      	bgt.n	8000e26 <__gesf2+0x56>
 8000e3c:	dbeb      	blt.n	8000e16 <__gesf2+0x46>
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	d8f1      	bhi.n	8000e26 <__gesf2+0x56>
 8000e42:	2000      	movs	r0, #0
 8000e44:	42ac      	cmp	r4, r5
 8000e46:	d2dd      	bcs.n	8000e04 <__gesf2+0x34>
 8000e48:	e7e5      	b.n	8000e16 <__gesf2+0x46>
 8000e4a:	2c00      	cmp	r4, #0
 8000e4c:	d0da      	beq.n	8000e04 <__gesf2+0x34>
 8000e4e:	e7ea      	b.n	8000e26 <__gesf2+0x56>
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d103      	bne.n	8000e5c <__gesf2+0x8c>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d1e6      	bne.n	8000e26 <__gesf2+0x56>
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e7d3      	b.n	8000e04 <__gesf2+0x34>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	4240      	negs	r0, r0
 8000e60:	e7d0      	b.n	8000e04 <__gesf2+0x34>
 8000e62:	2001      	movs	r0, #1
 8000e64:	4240      	negs	r0, r0
 8000e66:	e7cd      	b.n	8000e04 <__gesf2+0x34>
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d0e8      	beq.n	8000e3e <__gesf2+0x6e>
 8000e6c:	e7db      	b.n	8000e26 <__gesf2+0x56>
 8000e6e:	46c0      	nop			@ (mov r8, r8)

08000e70 <__lesf2>:
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	0042      	lsls	r2, r0, #1
 8000e74:	0244      	lsls	r4, r0, #9
 8000e76:	024d      	lsls	r5, r1, #9
 8000e78:	0fc3      	lsrs	r3, r0, #31
 8000e7a:	0048      	lsls	r0, r1, #1
 8000e7c:	0a64      	lsrs	r4, r4, #9
 8000e7e:	0e12      	lsrs	r2, r2, #24
 8000e80:	0a6d      	lsrs	r5, r5, #9
 8000e82:	0e00      	lsrs	r0, r0, #24
 8000e84:	0fc9      	lsrs	r1, r1, #31
 8000e86:	2aff      	cmp	r2, #255	@ 0xff
 8000e88:	d01a      	beq.n	8000ec0 <__lesf2+0x50>
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d00e      	beq.n	8000eac <__lesf2+0x3c>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d11e      	bne.n	8000ed0 <__lesf2+0x60>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d10e      	bne.n	8000eb4 <__lesf2+0x44>
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d02a      	beq.n	8000ef0 <__lesf2+0x80>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d00c      	beq.n	8000eb8 <__lesf2+0x48>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d01d      	beq.n	8000ede <__lesf2+0x6e>
 8000ea2:	1e58      	subs	r0, r3, #1
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	4018      	ands	r0, r3
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e010      	b.n	8000ece <__lesf2+0x5e>
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	d10d      	bne.n	8000ecc <__lesf2+0x5c>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d120      	bne.n	8000ef6 <__lesf2+0x86>
 8000eb4:	2c00      	cmp	r4, #0
 8000eb6:	d11e      	bne.n	8000ef6 <__lesf2+0x86>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d023      	beq.n	8000f04 <__lesf2+0x94>
 8000ebc:	0008      	movs	r0, r1
 8000ebe:	e006      	b.n	8000ece <__lesf2+0x5e>
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d103      	bne.n	8000ecc <__lesf2+0x5c>
 8000ec4:	28ff      	cmp	r0, #255	@ 0xff
 8000ec6:	d1ec      	bne.n	8000ea2 <__lesf2+0x32>
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d017      	beq.n	8000efc <__lesf2+0x8c>
 8000ecc:	2002      	movs	r0, #2
 8000ece:	bd30      	pop	{r4, r5, pc}
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d0e6      	beq.n	8000ea2 <__lesf2+0x32>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d1e4      	bne.n	8000ea2 <__lesf2+0x32>
 8000ed8:	4282      	cmp	r2, r0
 8000eda:	dce2      	bgt.n	8000ea2 <__lesf2+0x32>
 8000edc:	db04      	blt.n	8000ee8 <__lesf2+0x78>
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	d8df      	bhi.n	8000ea2 <__lesf2+0x32>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	42ac      	cmp	r4, r5
 8000ee6:	d2f2      	bcs.n	8000ece <__lesf2+0x5e>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00b      	beq.n	8000f04 <__lesf2+0x94>
 8000eec:	0018      	movs	r0, r3
 8000eee:	e7ee      	b.n	8000ece <__lesf2+0x5e>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d0ec      	beq.n	8000ece <__lesf2+0x5e>
 8000ef4:	e7d5      	b.n	8000ea2 <__lesf2+0x32>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d1d3      	bne.n	8000ea2 <__lesf2+0x32>
 8000efa:	e7f5      	b.n	8000ee8 <__lesf2+0x78>
 8000efc:	2000      	movs	r0, #0
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d0e5      	beq.n	8000ece <__lesf2+0x5e>
 8000f02:	e7ce      	b.n	8000ea2 <__lesf2+0x32>
 8000f04:	2001      	movs	r0, #1
 8000f06:	4240      	negs	r0, r0
 8000f08:	e7e1      	b.n	8000ece <__lesf2+0x5e>
 8000f0a:	46c0      	nop			@ (mov r8, r8)

08000f0c <__aeabi_fmul>:
 8000f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0e:	464f      	mov	r7, r9
 8000f10:	4646      	mov	r6, r8
 8000f12:	46d6      	mov	lr, sl
 8000f14:	0243      	lsls	r3, r0, #9
 8000f16:	0a5b      	lsrs	r3, r3, #9
 8000f18:	0045      	lsls	r5, r0, #1
 8000f1a:	b5c0      	push	{r6, r7, lr}
 8000f1c:	4699      	mov	r9, r3
 8000f1e:	1c0f      	adds	r7, r1, #0
 8000f20:	0e2d      	lsrs	r5, r5, #24
 8000f22:	0fc6      	lsrs	r6, r0, #31
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fmul+0x1e>
 8000f28:	e088      	b.n	800103c <__aeabi_fmul+0x130>
 8000f2a:	2dff      	cmp	r5, #255	@ 0xff
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fmul+0x24>
 8000f2e:	e08d      	b.n	800104c <__aeabi_fmul+0x140>
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	04d2      	lsls	r2, r2, #19
 8000f36:	431a      	orrs	r2, r3
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4691      	mov	r9, r2
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	469a      	mov	sl, r3
 8000f40:	3d7f      	subs	r5, #127	@ 0x7f
 8000f42:	027c      	lsls	r4, r7, #9
 8000f44:	007b      	lsls	r3, r7, #1
 8000f46:	0a64      	lsrs	r4, r4, #9
 8000f48:	0e1b      	lsrs	r3, r3, #24
 8000f4a:	0fff      	lsrs	r7, r7, #31
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d068      	beq.n	8001022 <__aeabi_fmul+0x116>
 8000f50:	2bff      	cmp	r3, #255	@ 0xff
 8000f52:	d021      	beq.n	8000f98 <__aeabi_fmul+0x8c>
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	00e4      	lsls	r4, r4, #3
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4314      	orrs	r4, r2
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	3b7f      	subs	r3, #127	@ 0x7f
 8000f60:	195b      	adds	r3, r3, r5
 8000f62:	2100      	movs	r1, #0
 8000f64:	1c5d      	adds	r5, r3, #1
 8000f66:	2a0a      	cmp	r2, #10
 8000f68:	dc2e      	bgt.n	8000fc8 <__aeabi_fmul+0xbc>
 8000f6a:	407e      	eors	r6, r7
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	2a02      	cmp	r2, #2
 8000f70:	dc23      	bgt.n	8000fba <__aeabi_fmul+0xae>
 8000f72:	3a01      	subs	r2, #1
 8000f74:	2a01      	cmp	r2, #1
 8000f76:	d900      	bls.n	8000f7a <__aeabi_fmul+0x6e>
 8000f78:	e0bd      	b.n	80010f6 <__aeabi_fmul+0x1ea>
 8000f7a:	2902      	cmp	r1, #2
 8000f7c:	d06e      	beq.n	800105c <__aeabi_fmul+0x150>
 8000f7e:	2901      	cmp	r1, #1
 8000f80:	d12c      	bne.n	8000fdc <__aeabi_fmul+0xd0>
 8000f82:	2000      	movs	r0, #0
 8000f84:	2200      	movs	r2, #0
 8000f86:	05c0      	lsls	r0, r0, #23
 8000f88:	07f6      	lsls	r6, r6, #31
 8000f8a:	4310      	orrs	r0, r2
 8000f8c:	4330      	orrs	r0, r6
 8000f8e:	bce0      	pop	{r5, r6, r7}
 8000f90:	46ba      	mov	sl, r7
 8000f92:	46b1      	mov	r9, r6
 8000f94:	46a8      	mov	r8, r5
 8000f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f98:	002b      	movs	r3, r5
 8000f9a:	33ff      	adds	r3, #255	@ 0xff
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d065      	beq.n	800106c <__aeabi_fmul+0x160>
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4641      	mov	r1, r8
 8000fa4:	4311      	orrs	r1, r2
 8000fa6:	0032      	movs	r2, r6
 8000fa8:	3501      	adds	r5, #1
 8000faa:	4688      	mov	r8, r1
 8000fac:	407a      	eors	r2, r7
 8000fae:	35ff      	adds	r5, #255	@ 0xff
 8000fb0:	290a      	cmp	r1, #10
 8000fb2:	dd00      	ble.n	8000fb6 <__aeabi_fmul+0xaa>
 8000fb4:	e0d8      	b.n	8001168 <__aeabi_fmul+0x25c>
 8000fb6:	0016      	movs	r6, r2
 8000fb8:	2103      	movs	r1, #3
 8000fba:	4640      	mov	r0, r8
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4082      	lsls	r2, r0
 8000fc0:	20a6      	movs	r0, #166	@ 0xa6
 8000fc2:	00c0      	lsls	r0, r0, #3
 8000fc4:	4202      	tst	r2, r0
 8000fc6:	d020      	beq.n	800100a <__aeabi_fmul+0xfe>
 8000fc8:	4653      	mov	r3, sl
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d046      	beq.n	800105c <__aeabi_fmul+0x150>
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_fmul+0xc8>
 8000fd2:	e0bb      	b.n	800114c <__aeabi_fmul+0x240>
 8000fd4:	4651      	mov	r1, sl
 8000fd6:	464c      	mov	r4, r9
 8000fd8:	2901      	cmp	r1, #1
 8000fda:	d0d2      	beq.n	8000f82 <__aeabi_fmul+0x76>
 8000fdc:	002b      	movs	r3, r5
 8000fde:	337f      	adds	r3, #127	@ 0x7f
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dd70      	ble.n	80010c6 <__aeabi_fmul+0x1ba>
 8000fe4:	0762      	lsls	r2, r4, #29
 8000fe6:	d004      	beq.n	8000ff2 <__aeabi_fmul+0xe6>
 8000fe8:	220f      	movs	r2, #15
 8000fea:	4022      	ands	r2, r4
 8000fec:	2a04      	cmp	r2, #4
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_fmul+0xe6>
 8000ff0:	3404      	adds	r4, #4
 8000ff2:	0122      	lsls	r2, r4, #4
 8000ff4:	d503      	bpl.n	8000ffe <__aeabi_fmul+0xf2>
 8000ff6:	4b63      	ldr	r3, [pc, #396]	@ (8001184 <__aeabi_fmul+0x278>)
 8000ff8:	401c      	ands	r4, r3
 8000ffa:	002b      	movs	r3, r5
 8000ffc:	3380      	adds	r3, #128	@ 0x80
 8000ffe:	2bfe      	cmp	r3, #254	@ 0xfe
 8001000:	dc2c      	bgt.n	800105c <__aeabi_fmul+0x150>
 8001002:	01a2      	lsls	r2, r4, #6
 8001004:	0a52      	lsrs	r2, r2, #9
 8001006:	b2d8      	uxtb	r0, r3
 8001008:	e7bd      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800100a:	2090      	movs	r0, #144	@ 0x90
 800100c:	0080      	lsls	r0, r0, #2
 800100e:	4202      	tst	r2, r0
 8001010:	d127      	bne.n	8001062 <__aeabi_fmul+0x156>
 8001012:	38b9      	subs	r0, #185	@ 0xb9
 8001014:	38ff      	subs	r0, #255	@ 0xff
 8001016:	4210      	tst	r0, r2
 8001018:	d06d      	beq.n	80010f6 <__aeabi_fmul+0x1ea>
 800101a:	003e      	movs	r6, r7
 800101c:	46a1      	mov	r9, r4
 800101e:	468a      	mov	sl, r1
 8001020:	e7d2      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 8001022:	2c00      	cmp	r4, #0
 8001024:	d141      	bne.n	80010aa <__aeabi_fmul+0x19e>
 8001026:	2301      	movs	r3, #1
 8001028:	4642      	mov	r2, r8
 800102a:	431a      	orrs	r2, r3
 800102c:	4690      	mov	r8, r2
 800102e:	002b      	movs	r3, r5
 8001030:	4642      	mov	r2, r8
 8001032:	2101      	movs	r1, #1
 8001034:	1c5d      	adds	r5, r3, #1
 8001036:	2a0a      	cmp	r2, #10
 8001038:	dd97      	ble.n	8000f6a <__aeabi_fmul+0x5e>
 800103a:	e7c5      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 800103c:	2b00      	cmp	r3, #0
 800103e:	d126      	bne.n	800108e <__aeabi_fmul+0x182>
 8001040:	2304      	movs	r3, #4
 8001042:	4698      	mov	r8, r3
 8001044:	3b03      	subs	r3, #3
 8001046:	2500      	movs	r5, #0
 8001048:	469a      	mov	sl, r3
 800104a:	e77a      	b.n	8000f42 <__aeabi_fmul+0x36>
 800104c:	2b00      	cmp	r3, #0
 800104e:	d118      	bne.n	8001082 <__aeabi_fmul+0x176>
 8001050:	2308      	movs	r3, #8
 8001052:	4698      	mov	r8, r3
 8001054:	3b06      	subs	r3, #6
 8001056:	25ff      	movs	r5, #255	@ 0xff
 8001058:	469a      	mov	sl, r3
 800105a:	e772      	b.n	8000f42 <__aeabi_fmul+0x36>
 800105c:	20ff      	movs	r0, #255	@ 0xff
 800105e:	2200      	movs	r2, #0
 8001060:	e791      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001062:	2280      	movs	r2, #128	@ 0x80
 8001064:	2600      	movs	r6, #0
 8001066:	20ff      	movs	r0, #255	@ 0xff
 8001068:	03d2      	lsls	r2, r2, #15
 800106a:	e78c      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800106c:	4641      	mov	r1, r8
 800106e:	2202      	movs	r2, #2
 8001070:	3501      	adds	r5, #1
 8001072:	4311      	orrs	r1, r2
 8001074:	4688      	mov	r8, r1
 8001076:	35ff      	adds	r5, #255	@ 0xff
 8001078:	290a      	cmp	r1, #10
 800107a:	dca5      	bgt.n	8000fc8 <__aeabi_fmul+0xbc>
 800107c:	2102      	movs	r1, #2
 800107e:	407e      	eors	r6, r7
 8001080:	e774      	b.n	8000f6c <__aeabi_fmul+0x60>
 8001082:	230c      	movs	r3, #12
 8001084:	4698      	mov	r8, r3
 8001086:	3b09      	subs	r3, #9
 8001088:	25ff      	movs	r5, #255	@ 0xff
 800108a:	469a      	mov	sl, r3
 800108c:	e759      	b.n	8000f42 <__aeabi_fmul+0x36>
 800108e:	0018      	movs	r0, r3
 8001090:	f002 f890 	bl	80031b4 <__clzsi2>
 8001094:	464a      	mov	r2, r9
 8001096:	1f43      	subs	r3, r0, #5
 8001098:	2576      	movs	r5, #118	@ 0x76
 800109a:	409a      	lsls	r2, r3
 800109c:	2300      	movs	r3, #0
 800109e:	426d      	negs	r5, r5
 80010a0:	4691      	mov	r9, r2
 80010a2:	4698      	mov	r8, r3
 80010a4:	469a      	mov	sl, r3
 80010a6:	1a2d      	subs	r5, r5, r0
 80010a8:	e74b      	b.n	8000f42 <__aeabi_fmul+0x36>
 80010aa:	0020      	movs	r0, r4
 80010ac:	f002 f882 	bl	80031b4 <__clzsi2>
 80010b0:	4642      	mov	r2, r8
 80010b2:	1f43      	subs	r3, r0, #5
 80010b4:	409c      	lsls	r4, r3
 80010b6:	1a2b      	subs	r3, r5, r0
 80010b8:	3b76      	subs	r3, #118	@ 0x76
 80010ba:	2100      	movs	r1, #0
 80010bc:	1c5d      	adds	r5, r3, #1
 80010be:	2a0a      	cmp	r2, #10
 80010c0:	dc00      	bgt.n	80010c4 <__aeabi_fmul+0x1b8>
 80010c2:	e752      	b.n	8000f6a <__aeabi_fmul+0x5e>
 80010c4:	e780      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 80010c6:	2201      	movs	r2, #1
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b1b      	cmp	r3, #27
 80010cc:	dd00      	ble.n	80010d0 <__aeabi_fmul+0x1c4>
 80010ce:	e758      	b.n	8000f82 <__aeabi_fmul+0x76>
 80010d0:	359e      	adds	r5, #158	@ 0x9e
 80010d2:	0022      	movs	r2, r4
 80010d4:	40ac      	lsls	r4, r5
 80010d6:	40da      	lsrs	r2, r3
 80010d8:	1e63      	subs	r3, r4, #1
 80010da:	419c      	sbcs	r4, r3
 80010dc:	4322      	orrs	r2, r4
 80010de:	0753      	lsls	r3, r2, #29
 80010e0:	d004      	beq.n	80010ec <__aeabi_fmul+0x1e0>
 80010e2:	230f      	movs	r3, #15
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d000      	beq.n	80010ec <__aeabi_fmul+0x1e0>
 80010ea:	3204      	adds	r2, #4
 80010ec:	0153      	lsls	r3, r2, #5
 80010ee:	d537      	bpl.n	8001160 <__aeabi_fmul+0x254>
 80010f0:	2001      	movs	r0, #1
 80010f2:	2200      	movs	r2, #0
 80010f4:	e747      	b.n	8000f86 <__aeabi_fmul+0x7a>
 80010f6:	0c21      	lsrs	r1, r4, #16
 80010f8:	464a      	mov	r2, r9
 80010fa:	0424      	lsls	r4, r4, #16
 80010fc:	0c24      	lsrs	r4, r4, #16
 80010fe:	0027      	movs	r7, r4
 8001100:	0c10      	lsrs	r0, r2, #16
 8001102:	0412      	lsls	r2, r2, #16
 8001104:	0c12      	lsrs	r2, r2, #16
 8001106:	4344      	muls	r4, r0
 8001108:	4357      	muls	r7, r2
 800110a:	4348      	muls	r0, r1
 800110c:	4351      	muls	r1, r2
 800110e:	0c3a      	lsrs	r2, r7, #16
 8001110:	1909      	adds	r1, r1, r4
 8001112:	1852      	adds	r2, r2, r1
 8001114:	4294      	cmp	r4, r2
 8001116:	d903      	bls.n	8001120 <__aeabi_fmul+0x214>
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	0249      	lsls	r1, r1, #9
 800111c:	468c      	mov	ip, r1
 800111e:	4460      	add	r0, ip
 8001120:	043f      	lsls	r7, r7, #16
 8001122:	0411      	lsls	r1, r2, #16
 8001124:	0c3f      	lsrs	r7, r7, #16
 8001126:	19c9      	adds	r1, r1, r7
 8001128:	018c      	lsls	r4, r1, #6
 800112a:	1e67      	subs	r7, r4, #1
 800112c:	41bc      	sbcs	r4, r7
 800112e:	0c12      	lsrs	r2, r2, #16
 8001130:	0e89      	lsrs	r1, r1, #26
 8001132:	1812      	adds	r2, r2, r0
 8001134:	430c      	orrs	r4, r1
 8001136:	0192      	lsls	r2, r2, #6
 8001138:	4314      	orrs	r4, r2
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	d50e      	bpl.n	800115c <__aeabi_fmul+0x250>
 800113e:	2301      	movs	r3, #1
 8001140:	0862      	lsrs	r2, r4, #1
 8001142:	401c      	ands	r4, r3
 8001144:	4314      	orrs	r4, r2
 8001146:	e749      	b.n	8000fdc <__aeabi_fmul+0xd0>
 8001148:	003e      	movs	r6, r7
 800114a:	46a1      	mov	r9, r4
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	464b      	mov	r3, r9
 8001150:	03d2      	lsls	r2, r2, #15
 8001152:	431a      	orrs	r2, r3
 8001154:	0252      	lsls	r2, r2, #9
 8001156:	20ff      	movs	r0, #255	@ 0xff
 8001158:	0a52      	lsrs	r2, r2, #9
 800115a:	e714      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800115c:	001d      	movs	r5, r3
 800115e:	e73d      	b.n	8000fdc <__aeabi_fmul+0xd0>
 8001160:	0192      	lsls	r2, r2, #6
 8001162:	2000      	movs	r0, #0
 8001164:	0a52      	lsrs	r2, r2, #9
 8001166:	e70e      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001168:	290f      	cmp	r1, #15
 800116a:	d1ed      	bne.n	8001148 <__aeabi_fmul+0x23c>
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	464b      	mov	r3, r9
 8001170:	03d2      	lsls	r2, r2, #15
 8001172:	4213      	tst	r3, r2
 8001174:	d0ea      	beq.n	800114c <__aeabi_fmul+0x240>
 8001176:	4214      	tst	r4, r2
 8001178:	d1e8      	bne.n	800114c <__aeabi_fmul+0x240>
 800117a:	003e      	movs	r6, r7
 800117c:	20ff      	movs	r0, #255	@ 0xff
 800117e:	4322      	orrs	r2, r4
 8001180:	e701      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	f7ffffff 	.word	0xf7ffffff

08001188 <__aeabi_i2f>:
 8001188:	b570      	push	{r4, r5, r6, lr}
 800118a:	2800      	cmp	r0, #0
 800118c:	d013      	beq.n	80011b6 <__aeabi_i2f+0x2e>
 800118e:	17c3      	asrs	r3, r0, #31
 8001190:	18c5      	adds	r5, r0, r3
 8001192:	405d      	eors	r5, r3
 8001194:	0fc4      	lsrs	r4, r0, #31
 8001196:	0028      	movs	r0, r5
 8001198:	f002 f80c 	bl	80031b4 <__clzsi2>
 800119c:	239e      	movs	r3, #158	@ 0x9e
 800119e:	0001      	movs	r1, r0
 80011a0:	1a1b      	subs	r3, r3, r0
 80011a2:	2b96      	cmp	r3, #150	@ 0x96
 80011a4:	dc0f      	bgt.n	80011c6 <__aeabi_i2f+0x3e>
 80011a6:	2808      	cmp	r0, #8
 80011a8:	d034      	beq.n	8001214 <__aeabi_i2f+0x8c>
 80011aa:	3908      	subs	r1, #8
 80011ac:	408d      	lsls	r5, r1
 80011ae:	026d      	lsls	r5, r5, #9
 80011b0:	0a6d      	lsrs	r5, r5, #9
 80011b2:	b2d8      	uxtb	r0, r3
 80011b4:	e002      	b.n	80011bc <__aeabi_i2f+0x34>
 80011b6:	2400      	movs	r4, #0
 80011b8:	2000      	movs	r0, #0
 80011ba:	2500      	movs	r5, #0
 80011bc:	05c0      	lsls	r0, r0, #23
 80011be:	4328      	orrs	r0, r5
 80011c0:	07e4      	lsls	r4, r4, #31
 80011c2:	4320      	orrs	r0, r4
 80011c4:	bd70      	pop	{r4, r5, r6, pc}
 80011c6:	2b99      	cmp	r3, #153	@ 0x99
 80011c8:	dc16      	bgt.n	80011f8 <__aeabi_i2f+0x70>
 80011ca:	1f42      	subs	r2, r0, #5
 80011cc:	2805      	cmp	r0, #5
 80011ce:	d000      	beq.n	80011d2 <__aeabi_i2f+0x4a>
 80011d0:	4095      	lsls	r5, r2
 80011d2:	002a      	movs	r2, r5
 80011d4:	4811      	ldr	r0, [pc, #68]	@ (800121c <__aeabi_i2f+0x94>)
 80011d6:	4002      	ands	r2, r0
 80011d8:	076e      	lsls	r6, r5, #29
 80011da:	d009      	beq.n	80011f0 <__aeabi_i2f+0x68>
 80011dc:	260f      	movs	r6, #15
 80011de:	4035      	ands	r5, r6
 80011e0:	2d04      	cmp	r5, #4
 80011e2:	d005      	beq.n	80011f0 <__aeabi_i2f+0x68>
 80011e4:	3204      	adds	r2, #4
 80011e6:	0155      	lsls	r5, r2, #5
 80011e8:	d502      	bpl.n	80011f0 <__aeabi_i2f+0x68>
 80011ea:	239f      	movs	r3, #159	@ 0x9f
 80011ec:	4002      	ands	r2, r0
 80011ee:	1a5b      	subs	r3, r3, r1
 80011f0:	0192      	lsls	r2, r2, #6
 80011f2:	0a55      	lsrs	r5, r2, #9
 80011f4:	b2d8      	uxtb	r0, r3
 80011f6:	e7e1      	b.n	80011bc <__aeabi_i2f+0x34>
 80011f8:	2205      	movs	r2, #5
 80011fa:	1a12      	subs	r2, r2, r0
 80011fc:	0028      	movs	r0, r5
 80011fe:	40d0      	lsrs	r0, r2
 8001200:	0002      	movs	r2, r0
 8001202:	0008      	movs	r0, r1
 8001204:	301b      	adds	r0, #27
 8001206:	4085      	lsls	r5, r0
 8001208:	0028      	movs	r0, r5
 800120a:	1e45      	subs	r5, r0, #1
 800120c:	41a8      	sbcs	r0, r5
 800120e:	4302      	orrs	r2, r0
 8001210:	0015      	movs	r5, r2
 8001212:	e7de      	b.n	80011d2 <__aeabi_i2f+0x4a>
 8001214:	026d      	lsls	r5, r5, #9
 8001216:	2096      	movs	r0, #150	@ 0x96
 8001218:	0a6d      	lsrs	r5, r5, #9
 800121a:	e7cf      	b.n	80011bc <__aeabi_i2f+0x34>
 800121c:	fbffffff 	.word	0xfbffffff

08001220 <__aeabi_ui2f>:
 8001220:	b570      	push	{r4, r5, r6, lr}
 8001222:	1e04      	subs	r4, r0, #0
 8001224:	d00e      	beq.n	8001244 <__aeabi_ui2f+0x24>
 8001226:	f001 ffc5 	bl	80031b4 <__clzsi2>
 800122a:	239e      	movs	r3, #158	@ 0x9e
 800122c:	0001      	movs	r1, r0
 800122e:	1a1b      	subs	r3, r3, r0
 8001230:	2b96      	cmp	r3, #150	@ 0x96
 8001232:	dc0c      	bgt.n	800124e <__aeabi_ui2f+0x2e>
 8001234:	2808      	cmp	r0, #8
 8001236:	d02f      	beq.n	8001298 <__aeabi_ui2f+0x78>
 8001238:	3908      	subs	r1, #8
 800123a:	408c      	lsls	r4, r1
 800123c:	0264      	lsls	r4, r4, #9
 800123e:	0a64      	lsrs	r4, r4, #9
 8001240:	b2d8      	uxtb	r0, r3
 8001242:	e001      	b.n	8001248 <__aeabi_ui2f+0x28>
 8001244:	2000      	movs	r0, #0
 8001246:	2400      	movs	r4, #0
 8001248:	05c0      	lsls	r0, r0, #23
 800124a:	4320      	orrs	r0, r4
 800124c:	bd70      	pop	{r4, r5, r6, pc}
 800124e:	2b99      	cmp	r3, #153	@ 0x99
 8001250:	dc16      	bgt.n	8001280 <__aeabi_ui2f+0x60>
 8001252:	1f42      	subs	r2, r0, #5
 8001254:	2805      	cmp	r0, #5
 8001256:	d000      	beq.n	800125a <__aeabi_ui2f+0x3a>
 8001258:	4094      	lsls	r4, r2
 800125a:	0022      	movs	r2, r4
 800125c:	4810      	ldr	r0, [pc, #64]	@ (80012a0 <__aeabi_ui2f+0x80>)
 800125e:	4002      	ands	r2, r0
 8001260:	0765      	lsls	r5, r4, #29
 8001262:	d009      	beq.n	8001278 <__aeabi_ui2f+0x58>
 8001264:	250f      	movs	r5, #15
 8001266:	402c      	ands	r4, r5
 8001268:	2c04      	cmp	r4, #4
 800126a:	d005      	beq.n	8001278 <__aeabi_ui2f+0x58>
 800126c:	3204      	adds	r2, #4
 800126e:	0154      	lsls	r4, r2, #5
 8001270:	d502      	bpl.n	8001278 <__aeabi_ui2f+0x58>
 8001272:	239f      	movs	r3, #159	@ 0x9f
 8001274:	4002      	ands	r2, r0
 8001276:	1a5b      	subs	r3, r3, r1
 8001278:	0192      	lsls	r2, r2, #6
 800127a:	0a54      	lsrs	r4, r2, #9
 800127c:	b2d8      	uxtb	r0, r3
 800127e:	e7e3      	b.n	8001248 <__aeabi_ui2f+0x28>
 8001280:	0002      	movs	r2, r0
 8001282:	0020      	movs	r0, r4
 8001284:	321b      	adds	r2, #27
 8001286:	4090      	lsls	r0, r2
 8001288:	0002      	movs	r2, r0
 800128a:	1e50      	subs	r0, r2, #1
 800128c:	4182      	sbcs	r2, r0
 800128e:	2005      	movs	r0, #5
 8001290:	1a40      	subs	r0, r0, r1
 8001292:	40c4      	lsrs	r4, r0
 8001294:	4314      	orrs	r4, r2
 8001296:	e7e0      	b.n	800125a <__aeabi_ui2f+0x3a>
 8001298:	0264      	lsls	r4, r4, #9
 800129a:	2096      	movs	r0, #150	@ 0x96
 800129c:	0a64      	lsrs	r4, r4, #9
 800129e:	e7d3      	b.n	8001248 <__aeabi_ui2f+0x28>
 80012a0:	fbffffff 	.word	0xfbffffff

080012a4 <__aeabi_dadd>:
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	4657      	mov	r7, sl
 80012a8:	464e      	mov	r6, r9
 80012aa:	4645      	mov	r5, r8
 80012ac:	46de      	mov	lr, fp
 80012ae:	b5e0      	push	{r5, r6, r7, lr}
 80012b0:	b083      	sub	sp, #12
 80012b2:	9000      	str	r0, [sp, #0]
 80012b4:	9101      	str	r1, [sp, #4]
 80012b6:	030c      	lsls	r4, r1, #12
 80012b8:	004f      	lsls	r7, r1, #1
 80012ba:	0fce      	lsrs	r6, r1, #31
 80012bc:	0a61      	lsrs	r1, r4, #9
 80012be:	9c00      	ldr	r4, [sp, #0]
 80012c0:	031d      	lsls	r5, r3, #12
 80012c2:	0f64      	lsrs	r4, r4, #29
 80012c4:	430c      	orrs	r4, r1
 80012c6:	9900      	ldr	r1, [sp, #0]
 80012c8:	9200      	str	r2, [sp, #0]
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	00c8      	lsls	r0, r1, #3
 80012ce:	0059      	lsls	r1, r3, #1
 80012d0:	0d4b      	lsrs	r3, r1, #21
 80012d2:	4699      	mov	r9, r3
 80012d4:	9a00      	ldr	r2, [sp, #0]
 80012d6:	9b01      	ldr	r3, [sp, #4]
 80012d8:	0a6d      	lsrs	r5, r5, #9
 80012da:	0fd9      	lsrs	r1, r3, #31
 80012dc:	0f53      	lsrs	r3, r2, #29
 80012de:	432b      	orrs	r3, r5
 80012e0:	469a      	mov	sl, r3
 80012e2:	9b00      	ldr	r3, [sp, #0]
 80012e4:	0d7f      	lsrs	r7, r7, #21
 80012e6:	00da      	lsls	r2, r3, #3
 80012e8:	4694      	mov	ip, r2
 80012ea:	464a      	mov	r2, r9
 80012ec:	46b0      	mov	r8, r6
 80012ee:	1aba      	subs	r2, r7, r2
 80012f0:	428e      	cmp	r6, r1
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dadd+0x52>
 80012f4:	e0b0      	b.n	8001458 <__aeabi_dadd+0x1b4>
 80012f6:	2a00      	cmp	r2, #0
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x58>
 80012fa:	e078      	b.n	80013ee <__aeabi_dadd+0x14a>
 80012fc:	4649      	mov	r1, r9
 80012fe:	2900      	cmp	r1, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x60>
 8001302:	e0e9      	b.n	80014d8 <__aeabi_dadd+0x234>
 8001304:	49c9      	ldr	r1, [pc, #804]	@ (800162c <__aeabi_dadd+0x388>)
 8001306:	428f      	cmp	r7, r1
 8001308:	d100      	bne.n	800130c <__aeabi_dadd+0x68>
 800130a:	e195      	b.n	8001638 <__aeabi_dadd+0x394>
 800130c:	2501      	movs	r5, #1
 800130e:	2a38      	cmp	r2, #56	@ 0x38
 8001310:	dc16      	bgt.n	8001340 <__aeabi_dadd+0x9c>
 8001312:	2180      	movs	r1, #128	@ 0x80
 8001314:	4653      	mov	r3, sl
 8001316:	0409      	lsls	r1, r1, #16
 8001318:	430b      	orrs	r3, r1
 800131a:	469a      	mov	sl, r3
 800131c:	2a1f      	cmp	r2, #31
 800131e:	dd00      	ble.n	8001322 <__aeabi_dadd+0x7e>
 8001320:	e1e7      	b.n	80016f2 <__aeabi_dadd+0x44e>
 8001322:	2120      	movs	r1, #32
 8001324:	4655      	mov	r5, sl
 8001326:	1a8b      	subs	r3, r1, r2
 8001328:	4661      	mov	r1, ip
 800132a:	409d      	lsls	r5, r3
 800132c:	40d1      	lsrs	r1, r2
 800132e:	430d      	orrs	r5, r1
 8001330:	4661      	mov	r1, ip
 8001332:	4099      	lsls	r1, r3
 8001334:	1e4b      	subs	r3, r1, #1
 8001336:	4199      	sbcs	r1, r3
 8001338:	4653      	mov	r3, sl
 800133a:	40d3      	lsrs	r3, r2
 800133c:	430d      	orrs	r5, r1
 800133e:	1ae4      	subs	r4, r4, r3
 8001340:	1b45      	subs	r5, r0, r5
 8001342:	42a8      	cmp	r0, r5
 8001344:	4180      	sbcs	r0, r0
 8001346:	4240      	negs	r0, r0
 8001348:	1a24      	subs	r4, r4, r0
 800134a:	0223      	lsls	r3, r4, #8
 800134c:	d400      	bmi.n	8001350 <__aeabi_dadd+0xac>
 800134e:	e10f      	b.n	8001570 <__aeabi_dadd+0x2cc>
 8001350:	0264      	lsls	r4, r4, #9
 8001352:	0a64      	lsrs	r4, r4, #9
 8001354:	2c00      	cmp	r4, #0
 8001356:	d100      	bne.n	800135a <__aeabi_dadd+0xb6>
 8001358:	e139      	b.n	80015ce <__aeabi_dadd+0x32a>
 800135a:	0020      	movs	r0, r4
 800135c:	f001 ff2a 	bl	80031b4 <__clzsi2>
 8001360:	0003      	movs	r3, r0
 8001362:	3b08      	subs	r3, #8
 8001364:	2120      	movs	r1, #32
 8001366:	0028      	movs	r0, r5
 8001368:	1aca      	subs	r2, r1, r3
 800136a:	40d0      	lsrs	r0, r2
 800136c:	409c      	lsls	r4, r3
 800136e:	0002      	movs	r2, r0
 8001370:	409d      	lsls	r5, r3
 8001372:	4322      	orrs	r2, r4
 8001374:	429f      	cmp	r7, r3
 8001376:	dd00      	ble.n	800137a <__aeabi_dadd+0xd6>
 8001378:	e173      	b.n	8001662 <__aeabi_dadd+0x3be>
 800137a:	1bd8      	subs	r0, r3, r7
 800137c:	3001      	adds	r0, #1
 800137e:	1a09      	subs	r1, r1, r0
 8001380:	002c      	movs	r4, r5
 8001382:	408d      	lsls	r5, r1
 8001384:	40c4      	lsrs	r4, r0
 8001386:	1e6b      	subs	r3, r5, #1
 8001388:	419d      	sbcs	r5, r3
 800138a:	0013      	movs	r3, r2
 800138c:	40c2      	lsrs	r2, r0
 800138e:	408b      	lsls	r3, r1
 8001390:	4325      	orrs	r5, r4
 8001392:	2700      	movs	r7, #0
 8001394:	0014      	movs	r4, r2
 8001396:	431d      	orrs	r5, r3
 8001398:	076b      	lsls	r3, r5, #29
 800139a:	d009      	beq.n	80013b0 <__aeabi_dadd+0x10c>
 800139c:	230f      	movs	r3, #15
 800139e:	402b      	ands	r3, r5
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d005      	beq.n	80013b0 <__aeabi_dadd+0x10c>
 80013a4:	1d2b      	adds	r3, r5, #4
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	41ad      	sbcs	r5, r5
 80013aa:	426d      	negs	r5, r5
 80013ac:	1964      	adds	r4, r4, r5
 80013ae:	001d      	movs	r5, r3
 80013b0:	0223      	lsls	r3, r4, #8
 80013b2:	d400      	bmi.n	80013b6 <__aeabi_dadd+0x112>
 80013b4:	e12d      	b.n	8001612 <__aeabi_dadd+0x36e>
 80013b6:	4a9d      	ldr	r2, [pc, #628]	@ (800162c <__aeabi_dadd+0x388>)
 80013b8:	3701      	adds	r7, #1
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d100      	bne.n	80013c0 <__aeabi_dadd+0x11c>
 80013be:	e0d3      	b.n	8001568 <__aeabi_dadd+0x2c4>
 80013c0:	4646      	mov	r6, r8
 80013c2:	499b      	ldr	r1, [pc, #620]	@ (8001630 <__aeabi_dadd+0x38c>)
 80013c4:	08ed      	lsrs	r5, r5, #3
 80013c6:	4021      	ands	r1, r4
 80013c8:	074a      	lsls	r2, r1, #29
 80013ca:	432a      	orrs	r2, r5
 80013cc:	057c      	lsls	r4, r7, #21
 80013ce:	024d      	lsls	r5, r1, #9
 80013d0:	0b2d      	lsrs	r5, r5, #12
 80013d2:	0d64      	lsrs	r4, r4, #21
 80013d4:	0524      	lsls	r4, r4, #20
 80013d6:	432c      	orrs	r4, r5
 80013d8:	07f6      	lsls	r6, r6, #31
 80013da:	4334      	orrs	r4, r6
 80013dc:	0010      	movs	r0, r2
 80013de:	0021      	movs	r1, r4
 80013e0:	b003      	add	sp, #12
 80013e2:	bcf0      	pop	{r4, r5, r6, r7}
 80013e4:	46bb      	mov	fp, r7
 80013e6:	46b2      	mov	sl, r6
 80013e8:	46a9      	mov	r9, r5
 80013ea:	46a0      	mov	r8, r4
 80013ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ee:	2a00      	cmp	r2, #0
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dadd+0x150>
 80013f2:	e084      	b.n	80014fe <__aeabi_dadd+0x25a>
 80013f4:	464a      	mov	r2, r9
 80013f6:	1bd2      	subs	r2, r2, r7
 80013f8:	2f00      	cmp	r7, #0
 80013fa:	d000      	beq.n	80013fe <__aeabi_dadd+0x15a>
 80013fc:	e16d      	b.n	80016da <__aeabi_dadd+0x436>
 80013fe:	0025      	movs	r5, r4
 8001400:	4305      	orrs	r5, r0
 8001402:	d100      	bne.n	8001406 <__aeabi_dadd+0x162>
 8001404:	e127      	b.n	8001656 <__aeabi_dadd+0x3b2>
 8001406:	1e56      	subs	r6, r2, #1
 8001408:	2a01      	cmp	r2, #1
 800140a:	d100      	bne.n	800140e <__aeabi_dadd+0x16a>
 800140c:	e23b      	b.n	8001886 <__aeabi_dadd+0x5e2>
 800140e:	4d87      	ldr	r5, [pc, #540]	@ (800162c <__aeabi_dadd+0x388>)
 8001410:	42aa      	cmp	r2, r5
 8001412:	d100      	bne.n	8001416 <__aeabi_dadd+0x172>
 8001414:	e26a      	b.n	80018ec <__aeabi_dadd+0x648>
 8001416:	2501      	movs	r5, #1
 8001418:	2e38      	cmp	r6, #56	@ 0x38
 800141a:	dc12      	bgt.n	8001442 <__aeabi_dadd+0x19e>
 800141c:	0032      	movs	r2, r6
 800141e:	2a1f      	cmp	r2, #31
 8001420:	dd00      	ble.n	8001424 <__aeabi_dadd+0x180>
 8001422:	e1f8      	b.n	8001816 <__aeabi_dadd+0x572>
 8001424:	2620      	movs	r6, #32
 8001426:	0025      	movs	r5, r4
 8001428:	1ab6      	subs	r6, r6, r2
 800142a:	0007      	movs	r7, r0
 800142c:	4653      	mov	r3, sl
 800142e:	40b0      	lsls	r0, r6
 8001430:	40d4      	lsrs	r4, r2
 8001432:	40b5      	lsls	r5, r6
 8001434:	40d7      	lsrs	r7, r2
 8001436:	1e46      	subs	r6, r0, #1
 8001438:	41b0      	sbcs	r0, r6
 800143a:	1b1b      	subs	r3, r3, r4
 800143c:	469a      	mov	sl, r3
 800143e:	433d      	orrs	r5, r7
 8001440:	4305      	orrs	r5, r0
 8001442:	4662      	mov	r2, ip
 8001444:	1b55      	subs	r5, r2, r5
 8001446:	45ac      	cmp	ip, r5
 8001448:	4192      	sbcs	r2, r2
 800144a:	4653      	mov	r3, sl
 800144c:	4252      	negs	r2, r2
 800144e:	000e      	movs	r6, r1
 8001450:	464f      	mov	r7, r9
 8001452:	4688      	mov	r8, r1
 8001454:	1a9c      	subs	r4, r3, r2
 8001456:	e778      	b.n	800134a <__aeabi_dadd+0xa6>
 8001458:	2a00      	cmp	r2, #0
 800145a:	dc00      	bgt.n	800145e <__aeabi_dadd+0x1ba>
 800145c:	e08e      	b.n	800157c <__aeabi_dadd+0x2d8>
 800145e:	4649      	mov	r1, r9
 8001460:	2900      	cmp	r1, #0
 8001462:	d175      	bne.n	8001550 <__aeabi_dadd+0x2ac>
 8001464:	4661      	mov	r1, ip
 8001466:	4653      	mov	r3, sl
 8001468:	4319      	orrs	r1, r3
 800146a:	d100      	bne.n	800146e <__aeabi_dadd+0x1ca>
 800146c:	e0f6      	b.n	800165c <__aeabi_dadd+0x3b8>
 800146e:	1e51      	subs	r1, r2, #1
 8001470:	2a01      	cmp	r2, #1
 8001472:	d100      	bne.n	8001476 <__aeabi_dadd+0x1d2>
 8001474:	e191      	b.n	800179a <__aeabi_dadd+0x4f6>
 8001476:	4d6d      	ldr	r5, [pc, #436]	@ (800162c <__aeabi_dadd+0x388>)
 8001478:	42aa      	cmp	r2, r5
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x1da>
 800147c:	e0dc      	b.n	8001638 <__aeabi_dadd+0x394>
 800147e:	2501      	movs	r5, #1
 8001480:	2938      	cmp	r1, #56	@ 0x38
 8001482:	dc14      	bgt.n	80014ae <__aeabi_dadd+0x20a>
 8001484:	000a      	movs	r2, r1
 8001486:	2a1f      	cmp	r2, #31
 8001488:	dd00      	ble.n	800148c <__aeabi_dadd+0x1e8>
 800148a:	e1a2      	b.n	80017d2 <__aeabi_dadd+0x52e>
 800148c:	2120      	movs	r1, #32
 800148e:	4653      	mov	r3, sl
 8001490:	1a89      	subs	r1, r1, r2
 8001492:	408b      	lsls	r3, r1
 8001494:	001d      	movs	r5, r3
 8001496:	4663      	mov	r3, ip
 8001498:	40d3      	lsrs	r3, r2
 800149a:	431d      	orrs	r5, r3
 800149c:	4663      	mov	r3, ip
 800149e:	408b      	lsls	r3, r1
 80014a0:	0019      	movs	r1, r3
 80014a2:	1e4b      	subs	r3, r1, #1
 80014a4:	4199      	sbcs	r1, r3
 80014a6:	4653      	mov	r3, sl
 80014a8:	40d3      	lsrs	r3, r2
 80014aa:	430d      	orrs	r5, r1
 80014ac:	18e4      	adds	r4, r4, r3
 80014ae:	182d      	adds	r5, r5, r0
 80014b0:	4285      	cmp	r5, r0
 80014b2:	4180      	sbcs	r0, r0
 80014b4:	4240      	negs	r0, r0
 80014b6:	1824      	adds	r4, r4, r0
 80014b8:	0223      	lsls	r3, r4, #8
 80014ba:	d559      	bpl.n	8001570 <__aeabi_dadd+0x2cc>
 80014bc:	4b5b      	ldr	r3, [pc, #364]	@ (800162c <__aeabi_dadd+0x388>)
 80014be:	3701      	adds	r7, #1
 80014c0:	429f      	cmp	r7, r3
 80014c2:	d051      	beq.n	8001568 <__aeabi_dadd+0x2c4>
 80014c4:	2101      	movs	r1, #1
 80014c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001630 <__aeabi_dadd+0x38c>)
 80014c8:	086a      	lsrs	r2, r5, #1
 80014ca:	401c      	ands	r4, r3
 80014cc:	4029      	ands	r1, r5
 80014ce:	430a      	orrs	r2, r1
 80014d0:	07e5      	lsls	r5, r4, #31
 80014d2:	4315      	orrs	r5, r2
 80014d4:	0864      	lsrs	r4, r4, #1
 80014d6:	e75f      	b.n	8001398 <__aeabi_dadd+0xf4>
 80014d8:	4661      	mov	r1, ip
 80014da:	4653      	mov	r3, sl
 80014dc:	4319      	orrs	r1, r3
 80014de:	d100      	bne.n	80014e2 <__aeabi_dadd+0x23e>
 80014e0:	e0bc      	b.n	800165c <__aeabi_dadd+0x3b8>
 80014e2:	1e51      	subs	r1, r2, #1
 80014e4:	2a01      	cmp	r2, #1
 80014e6:	d100      	bne.n	80014ea <__aeabi_dadd+0x246>
 80014e8:	e164      	b.n	80017b4 <__aeabi_dadd+0x510>
 80014ea:	4d50      	ldr	r5, [pc, #320]	@ (800162c <__aeabi_dadd+0x388>)
 80014ec:	42aa      	cmp	r2, r5
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dadd+0x24e>
 80014f0:	e16a      	b.n	80017c8 <__aeabi_dadd+0x524>
 80014f2:	2501      	movs	r5, #1
 80014f4:	2938      	cmp	r1, #56	@ 0x38
 80014f6:	dd00      	ble.n	80014fa <__aeabi_dadd+0x256>
 80014f8:	e722      	b.n	8001340 <__aeabi_dadd+0x9c>
 80014fa:	000a      	movs	r2, r1
 80014fc:	e70e      	b.n	800131c <__aeabi_dadd+0x78>
 80014fe:	4a4d      	ldr	r2, [pc, #308]	@ (8001634 <__aeabi_dadd+0x390>)
 8001500:	1c7d      	adds	r5, r7, #1
 8001502:	4215      	tst	r5, r2
 8001504:	d000      	beq.n	8001508 <__aeabi_dadd+0x264>
 8001506:	e0d0      	b.n	80016aa <__aeabi_dadd+0x406>
 8001508:	0025      	movs	r5, r4
 800150a:	4662      	mov	r2, ip
 800150c:	4653      	mov	r3, sl
 800150e:	4305      	orrs	r5, r0
 8001510:	431a      	orrs	r2, r3
 8001512:	2f00      	cmp	r7, #0
 8001514:	d000      	beq.n	8001518 <__aeabi_dadd+0x274>
 8001516:	e137      	b.n	8001788 <__aeabi_dadd+0x4e4>
 8001518:	2d00      	cmp	r5, #0
 800151a:	d100      	bne.n	800151e <__aeabi_dadd+0x27a>
 800151c:	e1a8      	b.n	8001870 <__aeabi_dadd+0x5cc>
 800151e:	2a00      	cmp	r2, #0
 8001520:	d100      	bne.n	8001524 <__aeabi_dadd+0x280>
 8001522:	e16a      	b.n	80017fa <__aeabi_dadd+0x556>
 8001524:	4663      	mov	r3, ip
 8001526:	1ac5      	subs	r5, r0, r3
 8001528:	4653      	mov	r3, sl
 800152a:	1ae2      	subs	r2, r4, r3
 800152c:	42a8      	cmp	r0, r5
 800152e:	419b      	sbcs	r3, r3
 8001530:	425b      	negs	r3, r3
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	021a      	lsls	r2, r3, #8
 8001536:	d400      	bmi.n	800153a <__aeabi_dadd+0x296>
 8001538:	e203      	b.n	8001942 <__aeabi_dadd+0x69e>
 800153a:	4663      	mov	r3, ip
 800153c:	1a1d      	subs	r5, r3, r0
 800153e:	45ac      	cmp	ip, r5
 8001540:	4192      	sbcs	r2, r2
 8001542:	4653      	mov	r3, sl
 8001544:	4252      	negs	r2, r2
 8001546:	1b1c      	subs	r4, r3, r4
 8001548:	000e      	movs	r6, r1
 800154a:	4688      	mov	r8, r1
 800154c:	1aa4      	subs	r4, r4, r2
 800154e:	e723      	b.n	8001398 <__aeabi_dadd+0xf4>
 8001550:	4936      	ldr	r1, [pc, #216]	@ (800162c <__aeabi_dadd+0x388>)
 8001552:	428f      	cmp	r7, r1
 8001554:	d070      	beq.n	8001638 <__aeabi_dadd+0x394>
 8001556:	2501      	movs	r5, #1
 8001558:	2a38      	cmp	r2, #56	@ 0x38
 800155a:	dca8      	bgt.n	80014ae <__aeabi_dadd+0x20a>
 800155c:	2180      	movs	r1, #128	@ 0x80
 800155e:	4653      	mov	r3, sl
 8001560:	0409      	lsls	r1, r1, #16
 8001562:	430b      	orrs	r3, r1
 8001564:	469a      	mov	sl, r3
 8001566:	e78e      	b.n	8001486 <__aeabi_dadd+0x1e2>
 8001568:	003c      	movs	r4, r7
 800156a:	2500      	movs	r5, #0
 800156c:	2200      	movs	r2, #0
 800156e:	e731      	b.n	80013d4 <__aeabi_dadd+0x130>
 8001570:	2307      	movs	r3, #7
 8001572:	402b      	ands	r3, r5
 8001574:	2b00      	cmp	r3, #0
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x2d6>
 8001578:	e710      	b.n	800139c <__aeabi_dadd+0xf8>
 800157a:	e093      	b.n	80016a4 <__aeabi_dadd+0x400>
 800157c:	2a00      	cmp	r2, #0
 800157e:	d074      	beq.n	800166a <__aeabi_dadd+0x3c6>
 8001580:	464a      	mov	r2, r9
 8001582:	1bd2      	subs	r2, r2, r7
 8001584:	2f00      	cmp	r7, #0
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x2e6>
 8001588:	e0c7      	b.n	800171a <__aeabi_dadd+0x476>
 800158a:	4928      	ldr	r1, [pc, #160]	@ (800162c <__aeabi_dadd+0x388>)
 800158c:	4589      	cmp	r9, r1
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x2ee>
 8001590:	e185      	b.n	800189e <__aeabi_dadd+0x5fa>
 8001592:	2501      	movs	r5, #1
 8001594:	2a38      	cmp	r2, #56	@ 0x38
 8001596:	dc12      	bgt.n	80015be <__aeabi_dadd+0x31a>
 8001598:	2180      	movs	r1, #128	@ 0x80
 800159a:	0409      	lsls	r1, r1, #16
 800159c:	430c      	orrs	r4, r1
 800159e:	2a1f      	cmp	r2, #31
 80015a0:	dd00      	ble.n	80015a4 <__aeabi_dadd+0x300>
 80015a2:	e1ab      	b.n	80018fc <__aeabi_dadd+0x658>
 80015a4:	2120      	movs	r1, #32
 80015a6:	0025      	movs	r5, r4
 80015a8:	1a89      	subs	r1, r1, r2
 80015aa:	0007      	movs	r7, r0
 80015ac:	4088      	lsls	r0, r1
 80015ae:	408d      	lsls	r5, r1
 80015b0:	40d7      	lsrs	r7, r2
 80015b2:	1e41      	subs	r1, r0, #1
 80015b4:	4188      	sbcs	r0, r1
 80015b6:	40d4      	lsrs	r4, r2
 80015b8:	433d      	orrs	r5, r7
 80015ba:	4305      	orrs	r5, r0
 80015bc:	44a2      	add	sl, r4
 80015be:	4465      	add	r5, ip
 80015c0:	4565      	cmp	r5, ip
 80015c2:	4192      	sbcs	r2, r2
 80015c4:	4252      	negs	r2, r2
 80015c6:	4452      	add	r2, sl
 80015c8:	0014      	movs	r4, r2
 80015ca:	464f      	mov	r7, r9
 80015cc:	e774      	b.n	80014b8 <__aeabi_dadd+0x214>
 80015ce:	0028      	movs	r0, r5
 80015d0:	f001 fdf0 	bl	80031b4 <__clzsi2>
 80015d4:	0003      	movs	r3, r0
 80015d6:	3318      	adds	r3, #24
 80015d8:	2b1f      	cmp	r3, #31
 80015da:	dc00      	bgt.n	80015de <__aeabi_dadd+0x33a>
 80015dc:	e6c2      	b.n	8001364 <__aeabi_dadd+0xc0>
 80015de:	002a      	movs	r2, r5
 80015e0:	3808      	subs	r0, #8
 80015e2:	4082      	lsls	r2, r0
 80015e4:	429f      	cmp	r7, r3
 80015e6:	dd00      	ble.n	80015ea <__aeabi_dadd+0x346>
 80015e8:	e0a9      	b.n	800173e <__aeabi_dadd+0x49a>
 80015ea:	1bdb      	subs	r3, r3, r7
 80015ec:	1c58      	adds	r0, r3, #1
 80015ee:	281f      	cmp	r0, #31
 80015f0:	dc00      	bgt.n	80015f4 <__aeabi_dadd+0x350>
 80015f2:	e1ac      	b.n	800194e <__aeabi_dadd+0x6aa>
 80015f4:	0015      	movs	r5, r2
 80015f6:	3b1f      	subs	r3, #31
 80015f8:	40dd      	lsrs	r5, r3
 80015fa:	2820      	cmp	r0, #32
 80015fc:	d005      	beq.n	800160a <__aeabi_dadd+0x366>
 80015fe:	2340      	movs	r3, #64	@ 0x40
 8001600:	1a1b      	subs	r3, r3, r0
 8001602:	409a      	lsls	r2, r3
 8001604:	1e53      	subs	r3, r2, #1
 8001606:	419a      	sbcs	r2, r3
 8001608:	4315      	orrs	r5, r2
 800160a:	2307      	movs	r3, #7
 800160c:	2700      	movs	r7, #0
 800160e:	402b      	ands	r3, r5
 8001610:	e7b0      	b.n	8001574 <__aeabi_dadd+0x2d0>
 8001612:	08ed      	lsrs	r5, r5, #3
 8001614:	4b05      	ldr	r3, [pc, #20]	@ (800162c <__aeabi_dadd+0x388>)
 8001616:	0762      	lsls	r2, r4, #29
 8001618:	432a      	orrs	r2, r5
 800161a:	08e4      	lsrs	r4, r4, #3
 800161c:	429f      	cmp	r7, r3
 800161e:	d00f      	beq.n	8001640 <__aeabi_dadd+0x39c>
 8001620:	0324      	lsls	r4, r4, #12
 8001622:	0b25      	lsrs	r5, r4, #12
 8001624:	057c      	lsls	r4, r7, #21
 8001626:	0d64      	lsrs	r4, r4, #21
 8001628:	e6d4      	b.n	80013d4 <__aeabi_dadd+0x130>
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	000007ff 	.word	0x000007ff
 8001630:	ff7fffff 	.word	0xff7fffff
 8001634:	000007fe 	.word	0x000007fe
 8001638:	08c0      	lsrs	r0, r0, #3
 800163a:	0762      	lsls	r2, r4, #29
 800163c:	4302      	orrs	r2, r0
 800163e:	08e4      	lsrs	r4, r4, #3
 8001640:	0013      	movs	r3, r2
 8001642:	4323      	orrs	r3, r4
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x3a4>
 8001646:	e186      	b.n	8001956 <__aeabi_dadd+0x6b2>
 8001648:	2580      	movs	r5, #128	@ 0x80
 800164a:	032d      	lsls	r5, r5, #12
 800164c:	4325      	orrs	r5, r4
 800164e:	032d      	lsls	r5, r5, #12
 8001650:	4cc3      	ldr	r4, [pc, #780]	@ (8001960 <__aeabi_dadd+0x6bc>)
 8001652:	0b2d      	lsrs	r5, r5, #12
 8001654:	e6be      	b.n	80013d4 <__aeabi_dadd+0x130>
 8001656:	4660      	mov	r0, ip
 8001658:	4654      	mov	r4, sl
 800165a:	000e      	movs	r6, r1
 800165c:	0017      	movs	r7, r2
 800165e:	08c5      	lsrs	r5, r0, #3
 8001660:	e7d8      	b.n	8001614 <__aeabi_dadd+0x370>
 8001662:	4cc0      	ldr	r4, [pc, #768]	@ (8001964 <__aeabi_dadd+0x6c0>)
 8001664:	1aff      	subs	r7, r7, r3
 8001666:	4014      	ands	r4, r2
 8001668:	e696      	b.n	8001398 <__aeabi_dadd+0xf4>
 800166a:	4abf      	ldr	r2, [pc, #764]	@ (8001968 <__aeabi_dadd+0x6c4>)
 800166c:	1c79      	adds	r1, r7, #1
 800166e:	4211      	tst	r1, r2
 8001670:	d16b      	bne.n	800174a <__aeabi_dadd+0x4a6>
 8001672:	0022      	movs	r2, r4
 8001674:	4302      	orrs	r2, r0
 8001676:	2f00      	cmp	r7, #0
 8001678:	d000      	beq.n	800167c <__aeabi_dadd+0x3d8>
 800167a:	e0db      	b.n	8001834 <__aeabi_dadd+0x590>
 800167c:	2a00      	cmp	r2, #0
 800167e:	d100      	bne.n	8001682 <__aeabi_dadd+0x3de>
 8001680:	e12d      	b.n	80018de <__aeabi_dadd+0x63a>
 8001682:	4662      	mov	r2, ip
 8001684:	4653      	mov	r3, sl
 8001686:	431a      	orrs	r2, r3
 8001688:	d100      	bne.n	800168c <__aeabi_dadd+0x3e8>
 800168a:	e0b6      	b.n	80017fa <__aeabi_dadd+0x556>
 800168c:	4663      	mov	r3, ip
 800168e:	18c5      	adds	r5, r0, r3
 8001690:	4285      	cmp	r5, r0
 8001692:	4180      	sbcs	r0, r0
 8001694:	4454      	add	r4, sl
 8001696:	4240      	negs	r0, r0
 8001698:	1824      	adds	r4, r4, r0
 800169a:	0223      	lsls	r3, r4, #8
 800169c:	d502      	bpl.n	80016a4 <__aeabi_dadd+0x400>
 800169e:	000f      	movs	r7, r1
 80016a0:	4bb0      	ldr	r3, [pc, #704]	@ (8001964 <__aeabi_dadd+0x6c0>)
 80016a2:	401c      	ands	r4, r3
 80016a4:	003a      	movs	r2, r7
 80016a6:	0028      	movs	r0, r5
 80016a8:	e7d8      	b.n	800165c <__aeabi_dadd+0x3b8>
 80016aa:	4662      	mov	r2, ip
 80016ac:	1a85      	subs	r5, r0, r2
 80016ae:	42a8      	cmp	r0, r5
 80016b0:	4192      	sbcs	r2, r2
 80016b2:	4653      	mov	r3, sl
 80016b4:	4252      	negs	r2, r2
 80016b6:	4691      	mov	r9, r2
 80016b8:	1ae3      	subs	r3, r4, r3
 80016ba:	001a      	movs	r2, r3
 80016bc:	464b      	mov	r3, r9
 80016be:	1ad2      	subs	r2, r2, r3
 80016c0:	0013      	movs	r3, r2
 80016c2:	4691      	mov	r9, r2
 80016c4:	021a      	lsls	r2, r3, #8
 80016c6:	d454      	bmi.n	8001772 <__aeabi_dadd+0x4ce>
 80016c8:	464a      	mov	r2, r9
 80016ca:	464c      	mov	r4, r9
 80016cc:	432a      	orrs	r2, r5
 80016ce:	d000      	beq.n	80016d2 <__aeabi_dadd+0x42e>
 80016d0:	e640      	b.n	8001354 <__aeabi_dadd+0xb0>
 80016d2:	2600      	movs	r6, #0
 80016d4:	2400      	movs	r4, #0
 80016d6:	2500      	movs	r5, #0
 80016d8:	e67c      	b.n	80013d4 <__aeabi_dadd+0x130>
 80016da:	4da1      	ldr	r5, [pc, #644]	@ (8001960 <__aeabi_dadd+0x6bc>)
 80016dc:	45a9      	cmp	r9, r5
 80016de:	d100      	bne.n	80016e2 <__aeabi_dadd+0x43e>
 80016e0:	e090      	b.n	8001804 <__aeabi_dadd+0x560>
 80016e2:	2501      	movs	r5, #1
 80016e4:	2a38      	cmp	r2, #56	@ 0x38
 80016e6:	dd00      	ble.n	80016ea <__aeabi_dadd+0x446>
 80016e8:	e6ab      	b.n	8001442 <__aeabi_dadd+0x19e>
 80016ea:	2580      	movs	r5, #128	@ 0x80
 80016ec:	042d      	lsls	r5, r5, #16
 80016ee:	432c      	orrs	r4, r5
 80016f0:	e695      	b.n	800141e <__aeabi_dadd+0x17a>
 80016f2:	0011      	movs	r1, r2
 80016f4:	4655      	mov	r5, sl
 80016f6:	3920      	subs	r1, #32
 80016f8:	40cd      	lsrs	r5, r1
 80016fa:	46a9      	mov	r9, r5
 80016fc:	2a20      	cmp	r2, #32
 80016fe:	d006      	beq.n	800170e <__aeabi_dadd+0x46a>
 8001700:	2140      	movs	r1, #64	@ 0x40
 8001702:	4653      	mov	r3, sl
 8001704:	1a8a      	subs	r2, r1, r2
 8001706:	4093      	lsls	r3, r2
 8001708:	4662      	mov	r2, ip
 800170a:	431a      	orrs	r2, r3
 800170c:	4694      	mov	ip, r2
 800170e:	4665      	mov	r5, ip
 8001710:	1e6b      	subs	r3, r5, #1
 8001712:	419d      	sbcs	r5, r3
 8001714:	464b      	mov	r3, r9
 8001716:	431d      	orrs	r5, r3
 8001718:	e612      	b.n	8001340 <__aeabi_dadd+0x9c>
 800171a:	0021      	movs	r1, r4
 800171c:	4301      	orrs	r1, r0
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0x47e>
 8001720:	e0c4      	b.n	80018ac <__aeabi_dadd+0x608>
 8001722:	1e51      	subs	r1, r2, #1
 8001724:	2a01      	cmp	r2, #1
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0x486>
 8001728:	e0fb      	b.n	8001922 <__aeabi_dadd+0x67e>
 800172a:	4d8d      	ldr	r5, [pc, #564]	@ (8001960 <__aeabi_dadd+0x6bc>)
 800172c:	42aa      	cmp	r2, r5
 800172e:	d100      	bne.n	8001732 <__aeabi_dadd+0x48e>
 8001730:	e0b5      	b.n	800189e <__aeabi_dadd+0x5fa>
 8001732:	2501      	movs	r5, #1
 8001734:	2938      	cmp	r1, #56	@ 0x38
 8001736:	dd00      	ble.n	800173a <__aeabi_dadd+0x496>
 8001738:	e741      	b.n	80015be <__aeabi_dadd+0x31a>
 800173a:	000a      	movs	r2, r1
 800173c:	e72f      	b.n	800159e <__aeabi_dadd+0x2fa>
 800173e:	4c89      	ldr	r4, [pc, #548]	@ (8001964 <__aeabi_dadd+0x6c0>)
 8001740:	1aff      	subs	r7, r7, r3
 8001742:	4014      	ands	r4, r2
 8001744:	0762      	lsls	r2, r4, #29
 8001746:	08e4      	lsrs	r4, r4, #3
 8001748:	e76a      	b.n	8001620 <__aeabi_dadd+0x37c>
 800174a:	4a85      	ldr	r2, [pc, #532]	@ (8001960 <__aeabi_dadd+0x6bc>)
 800174c:	4291      	cmp	r1, r2
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x4ae>
 8001750:	e0e3      	b.n	800191a <__aeabi_dadd+0x676>
 8001752:	4663      	mov	r3, ip
 8001754:	18c2      	adds	r2, r0, r3
 8001756:	4282      	cmp	r2, r0
 8001758:	4180      	sbcs	r0, r0
 800175a:	0023      	movs	r3, r4
 800175c:	4240      	negs	r0, r0
 800175e:	4453      	add	r3, sl
 8001760:	181b      	adds	r3, r3, r0
 8001762:	07dd      	lsls	r5, r3, #31
 8001764:	085c      	lsrs	r4, r3, #1
 8001766:	2307      	movs	r3, #7
 8001768:	0852      	lsrs	r2, r2, #1
 800176a:	4315      	orrs	r5, r2
 800176c:	000f      	movs	r7, r1
 800176e:	402b      	ands	r3, r5
 8001770:	e700      	b.n	8001574 <__aeabi_dadd+0x2d0>
 8001772:	4663      	mov	r3, ip
 8001774:	1a1d      	subs	r5, r3, r0
 8001776:	45ac      	cmp	ip, r5
 8001778:	4192      	sbcs	r2, r2
 800177a:	4653      	mov	r3, sl
 800177c:	4252      	negs	r2, r2
 800177e:	1b1c      	subs	r4, r3, r4
 8001780:	000e      	movs	r6, r1
 8001782:	4688      	mov	r8, r1
 8001784:	1aa4      	subs	r4, r4, r2
 8001786:	e5e5      	b.n	8001354 <__aeabi_dadd+0xb0>
 8001788:	2d00      	cmp	r5, #0
 800178a:	d000      	beq.n	800178e <__aeabi_dadd+0x4ea>
 800178c:	e091      	b.n	80018b2 <__aeabi_dadd+0x60e>
 800178e:	2a00      	cmp	r2, #0
 8001790:	d138      	bne.n	8001804 <__aeabi_dadd+0x560>
 8001792:	2480      	movs	r4, #128	@ 0x80
 8001794:	2600      	movs	r6, #0
 8001796:	0324      	lsls	r4, r4, #12
 8001798:	e756      	b.n	8001648 <__aeabi_dadd+0x3a4>
 800179a:	4663      	mov	r3, ip
 800179c:	18c5      	adds	r5, r0, r3
 800179e:	4285      	cmp	r5, r0
 80017a0:	4180      	sbcs	r0, r0
 80017a2:	4454      	add	r4, sl
 80017a4:	4240      	negs	r0, r0
 80017a6:	1824      	adds	r4, r4, r0
 80017a8:	2701      	movs	r7, #1
 80017aa:	0223      	lsls	r3, r4, #8
 80017ac:	d400      	bmi.n	80017b0 <__aeabi_dadd+0x50c>
 80017ae:	e6df      	b.n	8001570 <__aeabi_dadd+0x2cc>
 80017b0:	2702      	movs	r7, #2
 80017b2:	e687      	b.n	80014c4 <__aeabi_dadd+0x220>
 80017b4:	4663      	mov	r3, ip
 80017b6:	1ac5      	subs	r5, r0, r3
 80017b8:	42a8      	cmp	r0, r5
 80017ba:	4180      	sbcs	r0, r0
 80017bc:	4653      	mov	r3, sl
 80017be:	4240      	negs	r0, r0
 80017c0:	1ae4      	subs	r4, r4, r3
 80017c2:	2701      	movs	r7, #1
 80017c4:	1a24      	subs	r4, r4, r0
 80017c6:	e5c0      	b.n	800134a <__aeabi_dadd+0xa6>
 80017c8:	0762      	lsls	r2, r4, #29
 80017ca:	08c0      	lsrs	r0, r0, #3
 80017cc:	4302      	orrs	r2, r0
 80017ce:	08e4      	lsrs	r4, r4, #3
 80017d0:	e736      	b.n	8001640 <__aeabi_dadd+0x39c>
 80017d2:	0011      	movs	r1, r2
 80017d4:	4653      	mov	r3, sl
 80017d6:	3920      	subs	r1, #32
 80017d8:	40cb      	lsrs	r3, r1
 80017da:	4699      	mov	r9, r3
 80017dc:	2a20      	cmp	r2, #32
 80017de:	d006      	beq.n	80017ee <__aeabi_dadd+0x54a>
 80017e0:	2140      	movs	r1, #64	@ 0x40
 80017e2:	4653      	mov	r3, sl
 80017e4:	1a8a      	subs	r2, r1, r2
 80017e6:	4093      	lsls	r3, r2
 80017e8:	4662      	mov	r2, ip
 80017ea:	431a      	orrs	r2, r3
 80017ec:	4694      	mov	ip, r2
 80017ee:	4665      	mov	r5, ip
 80017f0:	1e6b      	subs	r3, r5, #1
 80017f2:	419d      	sbcs	r5, r3
 80017f4:	464b      	mov	r3, r9
 80017f6:	431d      	orrs	r5, r3
 80017f8:	e659      	b.n	80014ae <__aeabi_dadd+0x20a>
 80017fa:	0762      	lsls	r2, r4, #29
 80017fc:	08c0      	lsrs	r0, r0, #3
 80017fe:	4302      	orrs	r2, r0
 8001800:	08e4      	lsrs	r4, r4, #3
 8001802:	e70d      	b.n	8001620 <__aeabi_dadd+0x37c>
 8001804:	4653      	mov	r3, sl
 8001806:	075a      	lsls	r2, r3, #29
 8001808:	4663      	mov	r3, ip
 800180a:	08d8      	lsrs	r0, r3, #3
 800180c:	4653      	mov	r3, sl
 800180e:	000e      	movs	r6, r1
 8001810:	4302      	orrs	r2, r0
 8001812:	08dc      	lsrs	r4, r3, #3
 8001814:	e714      	b.n	8001640 <__aeabi_dadd+0x39c>
 8001816:	0015      	movs	r5, r2
 8001818:	0026      	movs	r6, r4
 800181a:	3d20      	subs	r5, #32
 800181c:	40ee      	lsrs	r6, r5
 800181e:	2a20      	cmp	r2, #32
 8001820:	d003      	beq.n	800182a <__aeabi_dadd+0x586>
 8001822:	2540      	movs	r5, #64	@ 0x40
 8001824:	1aaa      	subs	r2, r5, r2
 8001826:	4094      	lsls	r4, r2
 8001828:	4320      	orrs	r0, r4
 800182a:	1e42      	subs	r2, r0, #1
 800182c:	4190      	sbcs	r0, r2
 800182e:	0005      	movs	r5, r0
 8001830:	4335      	orrs	r5, r6
 8001832:	e606      	b.n	8001442 <__aeabi_dadd+0x19e>
 8001834:	2a00      	cmp	r2, #0
 8001836:	d07c      	beq.n	8001932 <__aeabi_dadd+0x68e>
 8001838:	4662      	mov	r2, ip
 800183a:	4653      	mov	r3, sl
 800183c:	08c0      	lsrs	r0, r0, #3
 800183e:	431a      	orrs	r2, r3
 8001840:	d100      	bne.n	8001844 <__aeabi_dadd+0x5a0>
 8001842:	e6fa      	b.n	800163a <__aeabi_dadd+0x396>
 8001844:	0762      	lsls	r2, r4, #29
 8001846:	4310      	orrs	r0, r2
 8001848:	2280      	movs	r2, #128	@ 0x80
 800184a:	08e4      	lsrs	r4, r4, #3
 800184c:	0312      	lsls	r2, r2, #12
 800184e:	4214      	tst	r4, r2
 8001850:	d008      	beq.n	8001864 <__aeabi_dadd+0x5c0>
 8001852:	08d9      	lsrs	r1, r3, #3
 8001854:	4211      	tst	r1, r2
 8001856:	d105      	bne.n	8001864 <__aeabi_dadd+0x5c0>
 8001858:	4663      	mov	r3, ip
 800185a:	08d8      	lsrs	r0, r3, #3
 800185c:	4653      	mov	r3, sl
 800185e:	000c      	movs	r4, r1
 8001860:	075b      	lsls	r3, r3, #29
 8001862:	4318      	orrs	r0, r3
 8001864:	0f42      	lsrs	r2, r0, #29
 8001866:	00c0      	lsls	r0, r0, #3
 8001868:	08c0      	lsrs	r0, r0, #3
 800186a:	0752      	lsls	r2, r2, #29
 800186c:	4302      	orrs	r2, r0
 800186e:	e6e7      	b.n	8001640 <__aeabi_dadd+0x39c>
 8001870:	2a00      	cmp	r2, #0
 8001872:	d100      	bne.n	8001876 <__aeabi_dadd+0x5d2>
 8001874:	e72d      	b.n	80016d2 <__aeabi_dadd+0x42e>
 8001876:	4663      	mov	r3, ip
 8001878:	08d8      	lsrs	r0, r3, #3
 800187a:	4653      	mov	r3, sl
 800187c:	075a      	lsls	r2, r3, #29
 800187e:	000e      	movs	r6, r1
 8001880:	4302      	orrs	r2, r0
 8001882:	08dc      	lsrs	r4, r3, #3
 8001884:	e6cc      	b.n	8001620 <__aeabi_dadd+0x37c>
 8001886:	4663      	mov	r3, ip
 8001888:	1a1d      	subs	r5, r3, r0
 800188a:	45ac      	cmp	ip, r5
 800188c:	4192      	sbcs	r2, r2
 800188e:	4653      	mov	r3, sl
 8001890:	4252      	negs	r2, r2
 8001892:	1b1c      	subs	r4, r3, r4
 8001894:	000e      	movs	r6, r1
 8001896:	4688      	mov	r8, r1
 8001898:	1aa4      	subs	r4, r4, r2
 800189a:	3701      	adds	r7, #1
 800189c:	e555      	b.n	800134a <__aeabi_dadd+0xa6>
 800189e:	4663      	mov	r3, ip
 80018a0:	08d9      	lsrs	r1, r3, #3
 80018a2:	4653      	mov	r3, sl
 80018a4:	075a      	lsls	r2, r3, #29
 80018a6:	430a      	orrs	r2, r1
 80018a8:	08dc      	lsrs	r4, r3, #3
 80018aa:	e6c9      	b.n	8001640 <__aeabi_dadd+0x39c>
 80018ac:	4660      	mov	r0, ip
 80018ae:	4654      	mov	r4, sl
 80018b0:	e6d4      	b.n	800165c <__aeabi_dadd+0x3b8>
 80018b2:	08c0      	lsrs	r0, r0, #3
 80018b4:	2a00      	cmp	r2, #0
 80018b6:	d100      	bne.n	80018ba <__aeabi_dadd+0x616>
 80018b8:	e6bf      	b.n	800163a <__aeabi_dadd+0x396>
 80018ba:	0762      	lsls	r2, r4, #29
 80018bc:	4310      	orrs	r0, r2
 80018be:	2280      	movs	r2, #128	@ 0x80
 80018c0:	08e4      	lsrs	r4, r4, #3
 80018c2:	0312      	lsls	r2, r2, #12
 80018c4:	4214      	tst	r4, r2
 80018c6:	d0cd      	beq.n	8001864 <__aeabi_dadd+0x5c0>
 80018c8:	08dd      	lsrs	r5, r3, #3
 80018ca:	4215      	tst	r5, r2
 80018cc:	d1ca      	bne.n	8001864 <__aeabi_dadd+0x5c0>
 80018ce:	4663      	mov	r3, ip
 80018d0:	08d8      	lsrs	r0, r3, #3
 80018d2:	4653      	mov	r3, sl
 80018d4:	075b      	lsls	r3, r3, #29
 80018d6:	000e      	movs	r6, r1
 80018d8:	002c      	movs	r4, r5
 80018da:	4318      	orrs	r0, r3
 80018dc:	e7c2      	b.n	8001864 <__aeabi_dadd+0x5c0>
 80018de:	4663      	mov	r3, ip
 80018e0:	08d9      	lsrs	r1, r3, #3
 80018e2:	4653      	mov	r3, sl
 80018e4:	075a      	lsls	r2, r3, #29
 80018e6:	430a      	orrs	r2, r1
 80018e8:	08dc      	lsrs	r4, r3, #3
 80018ea:	e699      	b.n	8001620 <__aeabi_dadd+0x37c>
 80018ec:	4663      	mov	r3, ip
 80018ee:	08d8      	lsrs	r0, r3, #3
 80018f0:	4653      	mov	r3, sl
 80018f2:	075a      	lsls	r2, r3, #29
 80018f4:	000e      	movs	r6, r1
 80018f6:	4302      	orrs	r2, r0
 80018f8:	08dc      	lsrs	r4, r3, #3
 80018fa:	e6a1      	b.n	8001640 <__aeabi_dadd+0x39c>
 80018fc:	0011      	movs	r1, r2
 80018fe:	0027      	movs	r7, r4
 8001900:	3920      	subs	r1, #32
 8001902:	40cf      	lsrs	r7, r1
 8001904:	2a20      	cmp	r2, #32
 8001906:	d003      	beq.n	8001910 <__aeabi_dadd+0x66c>
 8001908:	2140      	movs	r1, #64	@ 0x40
 800190a:	1a8a      	subs	r2, r1, r2
 800190c:	4094      	lsls	r4, r2
 800190e:	4320      	orrs	r0, r4
 8001910:	1e42      	subs	r2, r0, #1
 8001912:	4190      	sbcs	r0, r2
 8001914:	0005      	movs	r5, r0
 8001916:	433d      	orrs	r5, r7
 8001918:	e651      	b.n	80015be <__aeabi_dadd+0x31a>
 800191a:	000c      	movs	r4, r1
 800191c:	2500      	movs	r5, #0
 800191e:	2200      	movs	r2, #0
 8001920:	e558      	b.n	80013d4 <__aeabi_dadd+0x130>
 8001922:	4460      	add	r0, ip
 8001924:	4560      	cmp	r0, ip
 8001926:	4192      	sbcs	r2, r2
 8001928:	4454      	add	r4, sl
 800192a:	4252      	negs	r2, r2
 800192c:	0005      	movs	r5, r0
 800192e:	18a4      	adds	r4, r4, r2
 8001930:	e73a      	b.n	80017a8 <__aeabi_dadd+0x504>
 8001932:	4653      	mov	r3, sl
 8001934:	075a      	lsls	r2, r3, #29
 8001936:	4663      	mov	r3, ip
 8001938:	08d9      	lsrs	r1, r3, #3
 800193a:	4653      	mov	r3, sl
 800193c:	430a      	orrs	r2, r1
 800193e:	08dc      	lsrs	r4, r3, #3
 8001940:	e67e      	b.n	8001640 <__aeabi_dadd+0x39c>
 8001942:	001a      	movs	r2, r3
 8001944:	001c      	movs	r4, r3
 8001946:	432a      	orrs	r2, r5
 8001948:	d000      	beq.n	800194c <__aeabi_dadd+0x6a8>
 800194a:	e6ab      	b.n	80016a4 <__aeabi_dadd+0x400>
 800194c:	e6c1      	b.n	80016d2 <__aeabi_dadd+0x42e>
 800194e:	2120      	movs	r1, #32
 8001950:	2500      	movs	r5, #0
 8001952:	1a09      	subs	r1, r1, r0
 8001954:	e519      	b.n	800138a <__aeabi_dadd+0xe6>
 8001956:	2200      	movs	r2, #0
 8001958:	2500      	movs	r5, #0
 800195a:	4c01      	ldr	r4, [pc, #4]	@ (8001960 <__aeabi_dadd+0x6bc>)
 800195c:	e53a      	b.n	80013d4 <__aeabi_dadd+0x130>
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	000007ff 	.word	0x000007ff
 8001964:	ff7fffff 	.word	0xff7fffff
 8001968:	000007fe 	.word	0x000007fe

0800196c <__aeabi_ddiv>:
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196e:	46de      	mov	lr, fp
 8001970:	4645      	mov	r5, r8
 8001972:	4657      	mov	r7, sl
 8001974:	464e      	mov	r6, r9
 8001976:	b5e0      	push	{r5, r6, r7, lr}
 8001978:	b087      	sub	sp, #28
 800197a:	9200      	str	r2, [sp, #0]
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	030b      	lsls	r3, r1, #12
 8001980:	0b1b      	lsrs	r3, r3, #12
 8001982:	469b      	mov	fp, r3
 8001984:	0fca      	lsrs	r2, r1, #31
 8001986:	004b      	lsls	r3, r1, #1
 8001988:	0004      	movs	r4, r0
 800198a:	4680      	mov	r8, r0
 800198c:	0d5b      	lsrs	r3, r3, #21
 800198e:	9202      	str	r2, [sp, #8]
 8001990:	d100      	bne.n	8001994 <__aeabi_ddiv+0x28>
 8001992:	e16a      	b.n	8001c6a <__aeabi_ddiv+0x2fe>
 8001994:	4ad4      	ldr	r2, [pc, #848]	@ (8001ce8 <__aeabi_ddiv+0x37c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d100      	bne.n	800199c <__aeabi_ddiv+0x30>
 800199a:	e18c      	b.n	8001cb6 <__aeabi_ddiv+0x34a>
 800199c:	4659      	mov	r1, fp
 800199e:	0f42      	lsrs	r2, r0, #29
 80019a0:	00c9      	lsls	r1, r1, #3
 80019a2:	430a      	orrs	r2, r1
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	0409      	lsls	r1, r1, #16
 80019a8:	4311      	orrs	r1, r2
 80019aa:	00c2      	lsls	r2, r0, #3
 80019ac:	4690      	mov	r8, r2
 80019ae:	4acf      	ldr	r2, [pc, #828]	@ (8001cec <__aeabi_ddiv+0x380>)
 80019b0:	4689      	mov	r9, r1
 80019b2:	4692      	mov	sl, r2
 80019b4:	449a      	add	sl, r3
 80019b6:	2300      	movs	r3, #0
 80019b8:	2400      	movs	r4, #0
 80019ba:	9303      	str	r3, [sp, #12]
 80019bc:	9e00      	ldr	r6, [sp, #0]
 80019be:	9f01      	ldr	r7, [sp, #4]
 80019c0:	033b      	lsls	r3, r7, #12
 80019c2:	0b1b      	lsrs	r3, r3, #12
 80019c4:	469b      	mov	fp, r3
 80019c6:	007b      	lsls	r3, r7, #1
 80019c8:	0030      	movs	r0, r6
 80019ca:	0d5b      	lsrs	r3, r3, #21
 80019cc:	0ffd      	lsrs	r5, r7, #31
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d100      	bne.n	80019d4 <__aeabi_ddiv+0x68>
 80019d2:	e128      	b.n	8001c26 <__aeabi_ddiv+0x2ba>
 80019d4:	4ac4      	ldr	r2, [pc, #784]	@ (8001ce8 <__aeabi_ddiv+0x37c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d100      	bne.n	80019dc <__aeabi_ddiv+0x70>
 80019da:	e177      	b.n	8001ccc <__aeabi_ddiv+0x360>
 80019dc:	4659      	mov	r1, fp
 80019de:	0f72      	lsrs	r2, r6, #29
 80019e0:	00c9      	lsls	r1, r1, #3
 80019e2:	430a      	orrs	r2, r1
 80019e4:	2180      	movs	r1, #128	@ 0x80
 80019e6:	0409      	lsls	r1, r1, #16
 80019e8:	4311      	orrs	r1, r2
 80019ea:	468b      	mov	fp, r1
 80019ec:	49bf      	ldr	r1, [pc, #764]	@ (8001cec <__aeabi_ddiv+0x380>)
 80019ee:	00f2      	lsls	r2, r6, #3
 80019f0:	468c      	mov	ip, r1
 80019f2:	4651      	mov	r1, sl
 80019f4:	4463      	add	r3, ip
 80019f6:	1acb      	subs	r3, r1, r3
 80019f8:	469a      	mov	sl, r3
 80019fa:	2300      	movs	r3, #0
 80019fc:	9e02      	ldr	r6, [sp, #8]
 80019fe:	406e      	eors	r6, r5
 8001a00:	2c0f      	cmp	r4, #15
 8001a02:	d827      	bhi.n	8001a54 <__aeabi_ddiv+0xe8>
 8001a04:	49ba      	ldr	r1, [pc, #744]	@ (8001cf0 <__aeabi_ddiv+0x384>)
 8001a06:	00a4      	lsls	r4, r4, #2
 8001a08:	5909      	ldr	r1, [r1, r4]
 8001a0a:	468f      	mov	pc, r1
 8001a0c:	46cb      	mov	fp, r9
 8001a0e:	4642      	mov	r2, r8
 8001a10:	9e02      	ldr	r6, [sp, #8]
 8001a12:	9b03      	ldr	r3, [sp, #12]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d016      	beq.n	8001a46 <__aeabi_ddiv+0xda>
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_ddiv+0xb2>
 8001a1c:	e2a6      	b.n	8001f6c <__aeabi_ddiv+0x600>
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d000      	beq.n	8001a24 <__aeabi_ddiv+0xb8>
 8001a22:	e0df      	b.n	8001be4 <__aeabi_ddiv+0x278>
 8001a24:	2200      	movs	r2, #0
 8001a26:	2300      	movs	r3, #0
 8001a28:	2400      	movs	r4, #0
 8001a2a:	4690      	mov	r8, r2
 8001a2c:	051b      	lsls	r3, r3, #20
 8001a2e:	4323      	orrs	r3, r4
 8001a30:	07f6      	lsls	r6, r6, #31
 8001a32:	4333      	orrs	r3, r6
 8001a34:	4640      	mov	r0, r8
 8001a36:	0019      	movs	r1, r3
 8001a38:	b007      	add	sp, #28
 8001a3a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a3c:	46bb      	mov	fp, r7
 8001a3e:	46b2      	mov	sl, r6
 8001a40:	46a9      	mov	r9, r5
 8001a42:	46a0      	mov	r8, r4
 8001a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a46:	2200      	movs	r2, #0
 8001a48:	2400      	movs	r4, #0
 8001a4a:	4690      	mov	r8, r2
 8001a4c:	4ba6      	ldr	r3, [pc, #664]	@ (8001ce8 <__aeabi_ddiv+0x37c>)
 8001a4e:	e7ed      	b.n	8001a2c <__aeabi_ddiv+0xc0>
 8001a50:	002e      	movs	r6, r5
 8001a52:	e7df      	b.n	8001a14 <__aeabi_ddiv+0xa8>
 8001a54:	45cb      	cmp	fp, r9
 8001a56:	d200      	bcs.n	8001a5a <__aeabi_ddiv+0xee>
 8001a58:	e1d4      	b.n	8001e04 <__aeabi_ddiv+0x498>
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_ddiv+0xf2>
 8001a5c:	e1cf      	b.n	8001dfe <__aeabi_ddiv+0x492>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	425b      	negs	r3, r3
 8001a62:	469c      	mov	ip, r3
 8001a64:	4644      	mov	r4, r8
 8001a66:	4648      	mov	r0, r9
 8001a68:	2700      	movs	r7, #0
 8001a6a:	44e2      	add	sl, ip
 8001a6c:	465b      	mov	r3, fp
 8001a6e:	0e15      	lsrs	r5, r2, #24
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	431d      	orrs	r5, r3
 8001a74:	0c19      	lsrs	r1, r3, #16
 8001a76:	042b      	lsls	r3, r5, #16
 8001a78:	0212      	lsls	r2, r2, #8
 8001a7a:	9500      	str	r5, [sp, #0]
 8001a7c:	0c1d      	lsrs	r5, r3, #16
 8001a7e:	4691      	mov	r9, r2
 8001a80:	9102      	str	r1, [sp, #8]
 8001a82:	9503      	str	r5, [sp, #12]
 8001a84:	f7fe fbe2 	bl	800024c <__aeabi_uidivmod>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	436a      	muls	r2, r5
 8001a8c:	040b      	lsls	r3, r1, #16
 8001a8e:	0c21      	lsrs	r1, r4, #16
 8001a90:	4680      	mov	r8, r0
 8001a92:	4319      	orrs	r1, r3
 8001a94:	428a      	cmp	r2, r1
 8001a96:	d909      	bls.n	8001aac <__aeabi_ddiv+0x140>
 8001a98:	9d00      	ldr	r5, [sp, #0]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	46ac      	mov	ip, r5
 8001a9e:	425b      	negs	r3, r3
 8001aa0:	4461      	add	r1, ip
 8001aa2:	469c      	mov	ip, r3
 8001aa4:	44e0      	add	r8, ip
 8001aa6:	428d      	cmp	r5, r1
 8001aa8:	d800      	bhi.n	8001aac <__aeabi_ddiv+0x140>
 8001aaa:	e1fb      	b.n	8001ea4 <__aeabi_ddiv+0x538>
 8001aac:	1a88      	subs	r0, r1, r2
 8001aae:	9902      	ldr	r1, [sp, #8]
 8001ab0:	f7fe fbcc 	bl	800024c <__aeabi_uidivmod>
 8001ab4:	9a03      	ldr	r2, [sp, #12]
 8001ab6:	0424      	lsls	r4, r4, #16
 8001ab8:	4342      	muls	r2, r0
 8001aba:	0409      	lsls	r1, r1, #16
 8001abc:	0c24      	lsrs	r4, r4, #16
 8001abe:	0003      	movs	r3, r0
 8001ac0:	430c      	orrs	r4, r1
 8001ac2:	42a2      	cmp	r2, r4
 8001ac4:	d906      	bls.n	8001ad4 <__aeabi_ddiv+0x168>
 8001ac6:	9900      	ldr	r1, [sp, #0]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	468c      	mov	ip, r1
 8001acc:	4464      	add	r4, ip
 8001ace:	42a1      	cmp	r1, r4
 8001ad0:	d800      	bhi.n	8001ad4 <__aeabi_ddiv+0x168>
 8001ad2:	e1e1      	b.n	8001e98 <__aeabi_ddiv+0x52c>
 8001ad4:	1aa0      	subs	r0, r4, r2
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	0412      	lsls	r2, r2, #16
 8001ada:	431a      	orrs	r2, r3
 8001adc:	4693      	mov	fp, r2
 8001ade:	464b      	mov	r3, r9
 8001ae0:	4659      	mov	r1, fp
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	001d      	movs	r5, r3
 8001ae6:	9304      	str	r3, [sp, #16]
 8001ae8:	040b      	lsls	r3, r1, #16
 8001aea:	4649      	mov	r1, r9
 8001aec:	0409      	lsls	r1, r1, #16
 8001aee:	0c09      	lsrs	r1, r1, #16
 8001af0:	000c      	movs	r4, r1
 8001af2:	0c1b      	lsrs	r3, r3, #16
 8001af4:	435c      	muls	r4, r3
 8001af6:	0c12      	lsrs	r2, r2, #16
 8001af8:	436b      	muls	r3, r5
 8001afa:	4688      	mov	r8, r1
 8001afc:	4351      	muls	r1, r2
 8001afe:	436a      	muls	r2, r5
 8001b00:	0c25      	lsrs	r5, r4, #16
 8001b02:	46ac      	mov	ip, r5
 8001b04:	185b      	adds	r3, r3, r1
 8001b06:	4463      	add	r3, ip
 8001b08:	4299      	cmp	r1, r3
 8001b0a:	d903      	bls.n	8001b14 <__aeabi_ddiv+0x1a8>
 8001b0c:	2180      	movs	r1, #128	@ 0x80
 8001b0e:	0249      	lsls	r1, r1, #9
 8001b10:	468c      	mov	ip, r1
 8001b12:	4462      	add	r2, ip
 8001b14:	0c19      	lsrs	r1, r3, #16
 8001b16:	0424      	lsls	r4, r4, #16
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	0c24      	lsrs	r4, r4, #16
 8001b1c:	188a      	adds	r2, r1, r2
 8001b1e:	191c      	adds	r4, r3, r4
 8001b20:	4290      	cmp	r0, r2
 8001b22:	d302      	bcc.n	8001b2a <__aeabi_ddiv+0x1be>
 8001b24:	d116      	bne.n	8001b54 <__aeabi_ddiv+0x1e8>
 8001b26:	42a7      	cmp	r7, r4
 8001b28:	d214      	bcs.n	8001b54 <__aeabi_ddiv+0x1e8>
 8001b2a:	465b      	mov	r3, fp
 8001b2c:	9d00      	ldr	r5, [sp, #0]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	444f      	add	r7, r9
 8001b32:	9305      	str	r3, [sp, #20]
 8001b34:	454f      	cmp	r7, r9
 8001b36:	419b      	sbcs	r3, r3
 8001b38:	46ac      	mov	ip, r5
 8001b3a:	425b      	negs	r3, r3
 8001b3c:	4463      	add	r3, ip
 8001b3e:	18c0      	adds	r0, r0, r3
 8001b40:	4285      	cmp	r5, r0
 8001b42:	d300      	bcc.n	8001b46 <__aeabi_ddiv+0x1da>
 8001b44:	e1a1      	b.n	8001e8a <__aeabi_ddiv+0x51e>
 8001b46:	4282      	cmp	r2, r0
 8001b48:	d900      	bls.n	8001b4c <__aeabi_ddiv+0x1e0>
 8001b4a:	e1f6      	b.n	8001f3a <__aeabi_ddiv+0x5ce>
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_ddiv+0x1e4>
 8001b4e:	e1f1      	b.n	8001f34 <__aeabi_ddiv+0x5c8>
 8001b50:	9b05      	ldr	r3, [sp, #20]
 8001b52:	469b      	mov	fp, r3
 8001b54:	1b3c      	subs	r4, r7, r4
 8001b56:	42a7      	cmp	r7, r4
 8001b58:	41bf      	sbcs	r7, r7
 8001b5a:	9d00      	ldr	r5, [sp, #0]
 8001b5c:	1a80      	subs	r0, r0, r2
 8001b5e:	427f      	negs	r7, r7
 8001b60:	1bc0      	subs	r0, r0, r7
 8001b62:	4285      	cmp	r5, r0
 8001b64:	d100      	bne.n	8001b68 <__aeabi_ddiv+0x1fc>
 8001b66:	e1d0      	b.n	8001f0a <__aeabi_ddiv+0x59e>
 8001b68:	9902      	ldr	r1, [sp, #8]
 8001b6a:	f7fe fb6f 	bl	800024c <__aeabi_uidivmod>
 8001b6e:	9a03      	ldr	r2, [sp, #12]
 8001b70:	040b      	lsls	r3, r1, #16
 8001b72:	4342      	muls	r2, r0
 8001b74:	0c21      	lsrs	r1, r4, #16
 8001b76:	0007      	movs	r7, r0
 8001b78:	4319      	orrs	r1, r3
 8001b7a:	428a      	cmp	r2, r1
 8001b7c:	d900      	bls.n	8001b80 <__aeabi_ddiv+0x214>
 8001b7e:	e178      	b.n	8001e72 <__aeabi_ddiv+0x506>
 8001b80:	1a88      	subs	r0, r1, r2
 8001b82:	9902      	ldr	r1, [sp, #8]
 8001b84:	f7fe fb62 	bl	800024c <__aeabi_uidivmod>
 8001b88:	9a03      	ldr	r2, [sp, #12]
 8001b8a:	0424      	lsls	r4, r4, #16
 8001b8c:	4342      	muls	r2, r0
 8001b8e:	0409      	lsls	r1, r1, #16
 8001b90:	0c24      	lsrs	r4, r4, #16
 8001b92:	0003      	movs	r3, r0
 8001b94:	430c      	orrs	r4, r1
 8001b96:	42a2      	cmp	r2, r4
 8001b98:	d900      	bls.n	8001b9c <__aeabi_ddiv+0x230>
 8001b9a:	e15d      	b.n	8001e58 <__aeabi_ddiv+0x4ec>
 8001b9c:	4641      	mov	r1, r8
 8001b9e:	1aa4      	subs	r4, r4, r2
 8001ba0:	043a      	lsls	r2, r7, #16
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	9d04      	ldr	r5, [sp, #16]
 8001ba6:	0413      	lsls	r3, r2, #16
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	4359      	muls	r1, r3
 8001bac:	4647      	mov	r7, r8
 8001bae:	436b      	muls	r3, r5
 8001bb0:	469c      	mov	ip, r3
 8001bb2:	0c10      	lsrs	r0, r2, #16
 8001bb4:	4347      	muls	r7, r0
 8001bb6:	0c0b      	lsrs	r3, r1, #16
 8001bb8:	44bc      	add	ip, r7
 8001bba:	4463      	add	r3, ip
 8001bbc:	4368      	muls	r0, r5
 8001bbe:	429f      	cmp	r7, r3
 8001bc0:	d903      	bls.n	8001bca <__aeabi_ddiv+0x25e>
 8001bc2:	2580      	movs	r5, #128	@ 0x80
 8001bc4:	026d      	lsls	r5, r5, #9
 8001bc6:	46ac      	mov	ip, r5
 8001bc8:	4460      	add	r0, ip
 8001bca:	0c1f      	lsrs	r7, r3, #16
 8001bcc:	0409      	lsls	r1, r1, #16
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	0c09      	lsrs	r1, r1, #16
 8001bd2:	183f      	adds	r7, r7, r0
 8001bd4:	185b      	adds	r3, r3, r1
 8001bd6:	42bc      	cmp	r4, r7
 8001bd8:	d200      	bcs.n	8001bdc <__aeabi_ddiv+0x270>
 8001bda:	e102      	b.n	8001de2 <__aeabi_ddiv+0x476>
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_ddiv+0x274>
 8001bde:	e0fd      	b.n	8001ddc <__aeabi_ddiv+0x470>
 8001be0:	2301      	movs	r3, #1
 8001be2:	431a      	orrs	r2, r3
 8001be4:	4b43      	ldr	r3, [pc, #268]	@ (8001cf4 <__aeabi_ddiv+0x388>)
 8001be6:	4453      	add	r3, sl
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	dc00      	bgt.n	8001bee <__aeabi_ddiv+0x282>
 8001bec:	e0ae      	b.n	8001d4c <__aeabi_ddiv+0x3e0>
 8001bee:	0751      	lsls	r1, r2, #29
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_ddiv+0x288>
 8001bf2:	e198      	b.n	8001f26 <__aeabi_ddiv+0x5ba>
 8001bf4:	4659      	mov	r1, fp
 8001bf6:	01c9      	lsls	r1, r1, #7
 8001bf8:	d506      	bpl.n	8001c08 <__aeabi_ddiv+0x29c>
 8001bfa:	4659      	mov	r1, fp
 8001bfc:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf8 <__aeabi_ddiv+0x38c>)
 8001bfe:	4019      	ands	r1, r3
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	468b      	mov	fp, r1
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4453      	add	r3, sl
 8001c08:	493c      	ldr	r1, [pc, #240]	@ (8001cfc <__aeabi_ddiv+0x390>)
 8001c0a:	428b      	cmp	r3, r1
 8001c0c:	dd00      	ble.n	8001c10 <__aeabi_ddiv+0x2a4>
 8001c0e:	e71a      	b.n	8001a46 <__aeabi_ddiv+0xda>
 8001c10:	4659      	mov	r1, fp
 8001c12:	08d2      	lsrs	r2, r2, #3
 8001c14:	0749      	lsls	r1, r1, #29
 8001c16:	4311      	orrs	r1, r2
 8001c18:	465a      	mov	r2, fp
 8001c1a:	055b      	lsls	r3, r3, #21
 8001c1c:	0254      	lsls	r4, r2, #9
 8001c1e:	4688      	mov	r8, r1
 8001c20:	0b24      	lsrs	r4, r4, #12
 8001c22:	0d5b      	lsrs	r3, r3, #21
 8001c24:	e702      	b.n	8001a2c <__aeabi_ddiv+0xc0>
 8001c26:	465a      	mov	r2, fp
 8001c28:	9b00      	ldr	r3, [sp, #0]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_ddiv+0x2c4>
 8001c2e:	e07e      	b.n	8001d2e <__aeabi_ddiv+0x3c2>
 8001c30:	465b      	mov	r3, fp
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d100      	bne.n	8001c38 <__aeabi_ddiv+0x2cc>
 8001c36:	e100      	b.n	8001e3a <__aeabi_ddiv+0x4ce>
 8001c38:	4658      	mov	r0, fp
 8001c3a:	f001 fabb 	bl	80031b4 <__clzsi2>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	0003      	movs	r3, r0
 8001c42:	3a0b      	subs	r2, #11
 8001c44:	271d      	movs	r7, #29
 8001c46:	9e00      	ldr	r6, [sp, #0]
 8001c48:	1aba      	subs	r2, r7, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	4658      	mov	r0, fp
 8001c4e:	40d6      	lsrs	r6, r2
 8001c50:	3908      	subs	r1, #8
 8001c52:	4088      	lsls	r0, r1
 8001c54:	0032      	movs	r2, r6
 8001c56:	4302      	orrs	r2, r0
 8001c58:	4693      	mov	fp, r2
 8001c5a:	9a00      	ldr	r2, [sp, #0]
 8001c5c:	408a      	lsls	r2, r1
 8001c5e:	4928      	ldr	r1, [pc, #160]	@ (8001d00 <__aeabi_ddiv+0x394>)
 8001c60:	4453      	add	r3, sl
 8001c62:	468a      	mov	sl, r1
 8001c64:	449a      	add	sl, r3
 8001c66:	2300      	movs	r3, #0
 8001c68:	e6c8      	b.n	80019fc <__aeabi_ddiv+0x90>
 8001c6a:	465b      	mov	r3, fp
 8001c6c:	4303      	orrs	r3, r0
 8001c6e:	4699      	mov	r9, r3
 8001c70:	d056      	beq.n	8001d20 <__aeabi_ddiv+0x3b4>
 8001c72:	465b      	mov	r3, fp
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d100      	bne.n	8001c7a <__aeabi_ddiv+0x30e>
 8001c78:	e0cd      	b.n	8001e16 <__aeabi_ddiv+0x4aa>
 8001c7a:	4658      	mov	r0, fp
 8001c7c:	f001 fa9a 	bl	80031b4 <__clzsi2>
 8001c80:	230b      	movs	r3, #11
 8001c82:	425b      	negs	r3, r3
 8001c84:	469c      	mov	ip, r3
 8001c86:	0002      	movs	r2, r0
 8001c88:	4484      	add	ip, r0
 8001c8a:	4666      	mov	r6, ip
 8001c8c:	231d      	movs	r3, #29
 8001c8e:	1b9b      	subs	r3, r3, r6
 8001c90:	0026      	movs	r6, r4
 8001c92:	0011      	movs	r1, r2
 8001c94:	4658      	mov	r0, fp
 8001c96:	40de      	lsrs	r6, r3
 8001c98:	3908      	subs	r1, #8
 8001c9a:	4088      	lsls	r0, r1
 8001c9c:	0033      	movs	r3, r6
 8001c9e:	4303      	orrs	r3, r0
 8001ca0:	4699      	mov	r9, r3
 8001ca2:	0023      	movs	r3, r4
 8001ca4:	408b      	lsls	r3, r1
 8001ca6:	4698      	mov	r8, r3
 8001ca8:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <__aeabi_ddiv+0x398>)
 8001caa:	2400      	movs	r4, #0
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	469a      	mov	sl, r3
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9303      	str	r3, [sp, #12]
 8001cb4:	e682      	b.n	80019bc <__aeabi_ddiv+0x50>
 8001cb6:	465a      	mov	r2, fp
 8001cb8:	4302      	orrs	r2, r0
 8001cba:	4691      	mov	r9, r2
 8001cbc:	d12a      	bne.n	8001d14 <__aeabi_ddiv+0x3a8>
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	469a      	mov	sl, r3
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	4690      	mov	r8, r2
 8001cc6:	2408      	movs	r4, #8
 8001cc8:	9303      	str	r3, [sp, #12]
 8001cca:	e677      	b.n	80019bc <__aeabi_ddiv+0x50>
 8001ccc:	465a      	mov	r2, fp
 8001cce:	9b00      	ldr	r3, [sp, #0]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <__aeabi_ddiv+0x39c>)
 8001cd4:	469c      	mov	ip, r3
 8001cd6:	44e2      	add	sl, ip
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	d117      	bne.n	8001d0c <__aeabi_ddiv+0x3a0>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	431c      	orrs	r4, r3
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	469b      	mov	fp, r3
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	e689      	b.n	80019fc <__aeabi_ddiv+0x90>
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	fffffc01 	.word	0xfffffc01
 8001cf0:	0800dbbc 	.word	0x0800dbbc
 8001cf4:	000003ff 	.word	0x000003ff
 8001cf8:	feffffff 	.word	0xfeffffff
 8001cfc:	000007fe 	.word	0x000007fe
 8001d00:	000003f3 	.word	0x000003f3
 8001d04:	fffffc0d 	.word	0xfffffc0d
 8001d08:	fffff801 	.word	0xfffff801
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	0032      	movs	r2, r6
 8001d10:	431c      	orrs	r4, r3
 8001d12:	e673      	b.n	80019fc <__aeabi_ddiv+0x90>
 8001d14:	469a      	mov	sl, r3
 8001d16:	2303      	movs	r3, #3
 8001d18:	46d9      	mov	r9, fp
 8001d1a:	240c      	movs	r4, #12
 8001d1c:	9303      	str	r3, [sp, #12]
 8001d1e:	e64d      	b.n	80019bc <__aeabi_ddiv+0x50>
 8001d20:	2300      	movs	r3, #0
 8001d22:	4698      	mov	r8, r3
 8001d24:	469a      	mov	sl, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	2404      	movs	r4, #4
 8001d2a:	9303      	str	r3, [sp, #12]
 8001d2c:	e646      	b.n	80019bc <__aeabi_ddiv+0x50>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	431c      	orrs	r4, r3
 8001d32:	2300      	movs	r3, #0
 8001d34:	469b      	mov	fp, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	e660      	b.n	80019fc <__aeabi_ddiv+0x90>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	2480      	movs	r4, #128	@ 0x80
 8001d3e:	4698      	mov	r8, r3
 8001d40:	2600      	movs	r6, #0
 8001d42:	4b92      	ldr	r3, [pc, #584]	@ (8001f8c <__aeabi_ddiv+0x620>)
 8001d44:	0324      	lsls	r4, r4, #12
 8001d46:	e671      	b.n	8001a2c <__aeabi_ddiv+0xc0>
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4252      	negs	r2, r2
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	1ac9      	subs	r1, r1, r3
 8001d50:	2938      	cmp	r1, #56	@ 0x38
 8001d52:	dd00      	ble.n	8001d56 <__aeabi_ddiv+0x3ea>
 8001d54:	e666      	b.n	8001a24 <__aeabi_ddiv+0xb8>
 8001d56:	291f      	cmp	r1, #31
 8001d58:	dc00      	bgt.n	8001d5c <__aeabi_ddiv+0x3f0>
 8001d5a:	e0ab      	b.n	8001eb4 <__aeabi_ddiv+0x548>
 8001d5c:	201f      	movs	r0, #31
 8001d5e:	4240      	negs	r0, r0
 8001d60:	1ac3      	subs	r3, r0, r3
 8001d62:	4658      	mov	r0, fp
 8001d64:	40d8      	lsrs	r0, r3
 8001d66:	0003      	movs	r3, r0
 8001d68:	2920      	cmp	r1, #32
 8001d6a:	d004      	beq.n	8001d76 <__aeabi_ddiv+0x40a>
 8001d6c:	4658      	mov	r0, fp
 8001d6e:	4988      	ldr	r1, [pc, #544]	@ (8001f90 <__aeabi_ddiv+0x624>)
 8001d70:	4451      	add	r1, sl
 8001d72:	4088      	lsls	r0, r1
 8001d74:	4302      	orrs	r2, r0
 8001d76:	1e51      	subs	r1, r2, #1
 8001d78:	418a      	sbcs	r2, r1
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	2307      	movs	r3, #7
 8001d7e:	0019      	movs	r1, r3
 8001d80:	2400      	movs	r4, #0
 8001d82:	4011      	ands	r1, r2
 8001d84:	4213      	tst	r3, r2
 8001d86:	d00c      	beq.n	8001da2 <__aeabi_ddiv+0x436>
 8001d88:	230f      	movs	r3, #15
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_ddiv+0x426>
 8001d90:	e0f9      	b.n	8001f86 <__aeabi_ddiv+0x61a>
 8001d92:	1d11      	adds	r1, r2, #4
 8001d94:	4291      	cmp	r1, r2
 8001d96:	419b      	sbcs	r3, r3
 8001d98:	000a      	movs	r2, r1
 8001d9a:	425b      	negs	r3, r3
 8001d9c:	0759      	lsls	r1, r3, #29
 8001d9e:	025b      	lsls	r3, r3, #9
 8001da0:	0b1c      	lsrs	r4, r3, #12
 8001da2:	08d2      	lsrs	r2, r2, #3
 8001da4:	430a      	orrs	r2, r1
 8001da6:	4690      	mov	r8, r2
 8001da8:	2300      	movs	r3, #0
 8001daa:	e63f      	b.n	8001a2c <__aeabi_ddiv+0xc0>
 8001dac:	2480      	movs	r4, #128	@ 0x80
 8001dae:	464b      	mov	r3, r9
 8001db0:	0324      	lsls	r4, r4, #12
 8001db2:	4223      	tst	r3, r4
 8001db4:	d009      	beq.n	8001dca <__aeabi_ddiv+0x45e>
 8001db6:	465b      	mov	r3, fp
 8001db8:	4223      	tst	r3, r4
 8001dba:	d106      	bne.n	8001dca <__aeabi_ddiv+0x45e>
 8001dbc:	431c      	orrs	r4, r3
 8001dbe:	0324      	lsls	r4, r4, #12
 8001dc0:	002e      	movs	r6, r5
 8001dc2:	4690      	mov	r8, r2
 8001dc4:	4b71      	ldr	r3, [pc, #452]	@ (8001f8c <__aeabi_ddiv+0x620>)
 8001dc6:	0b24      	lsrs	r4, r4, #12
 8001dc8:	e630      	b.n	8001a2c <__aeabi_ddiv+0xc0>
 8001dca:	2480      	movs	r4, #128	@ 0x80
 8001dcc:	464b      	mov	r3, r9
 8001dce:	0324      	lsls	r4, r4, #12
 8001dd0:	431c      	orrs	r4, r3
 8001dd2:	0324      	lsls	r4, r4, #12
 8001dd4:	9e02      	ldr	r6, [sp, #8]
 8001dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f8c <__aeabi_ddiv+0x620>)
 8001dd8:	0b24      	lsrs	r4, r4, #12
 8001dda:	e627      	b.n	8001a2c <__aeabi_ddiv+0xc0>
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d100      	bne.n	8001de2 <__aeabi_ddiv+0x476>
 8001de0:	e700      	b.n	8001be4 <__aeabi_ddiv+0x278>
 8001de2:	9800      	ldr	r0, [sp, #0]
 8001de4:	1e51      	subs	r1, r2, #1
 8001de6:	4684      	mov	ip, r0
 8001de8:	4464      	add	r4, ip
 8001dea:	4284      	cmp	r4, r0
 8001dec:	d200      	bcs.n	8001df0 <__aeabi_ddiv+0x484>
 8001dee:	e084      	b.n	8001efa <__aeabi_ddiv+0x58e>
 8001df0:	42bc      	cmp	r4, r7
 8001df2:	d200      	bcs.n	8001df6 <__aeabi_ddiv+0x48a>
 8001df4:	e0ae      	b.n	8001f54 <__aeabi_ddiv+0x5e8>
 8001df6:	d100      	bne.n	8001dfa <__aeabi_ddiv+0x48e>
 8001df8:	e0c1      	b.n	8001f7e <__aeabi_ddiv+0x612>
 8001dfa:	000a      	movs	r2, r1
 8001dfc:	e6f0      	b.n	8001be0 <__aeabi_ddiv+0x274>
 8001dfe:	4542      	cmp	r2, r8
 8001e00:	d900      	bls.n	8001e04 <__aeabi_ddiv+0x498>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_ddiv+0xf2>
 8001e04:	464b      	mov	r3, r9
 8001e06:	07dc      	lsls	r4, r3, #31
 8001e08:	0858      	lsrs	r0, r3, #1
 8001e0a:	4643      	mov	r3, r8
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	431c      	orrs	r4, r3
 8001e10:	4643      	mov	r3, r8
 8001e12:	07df      	lsls	r7, r3, #31
 8001e14:	e62a      	b.n	8001a6c <__aeabi_ddiv+0x100>
 8001e16:	f001 f9cd 	bl	80031b4 <__clzsi2>
 8001e1a:	2315      	movs	r3, #21
 8001e1c:	469c      	mov	ip, r3
 8001e1e:	4484      	add	ip, r0
 8001e20:	0002      	movs	r2, r0
 8001e22:	4663      	mov	r3, ip
 8001e24:	3220      	adds	r2, #32
 8001e26:	2b1c      	cmp	r3, #28
 8001e28:	dc00      	bgt.n	8001e2c <__aeabi_ddiv+0x4c0>
 8001e2a:	e72e      	b.n	8001c8a <__aeabi_ddiv+0x31e>
 8001e2c:	0023      	movs	r3, r4
 8001e2e:	3808      	subs	r0, #8
 8001e30:	4083      	lsls	r3, r0
 8001e32:	4699      	mov	r9, r3
 8001e34:	2300      	movs	r3, #0
 8001e36:	4698      	mov	r8, r3
 8001e38:	e736      	b.n	8001ca8 <__aeabi_ddiv+0x33c>
 8001e3a:	f001 f9bb 	bl	80031b4 <__clzsi2>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	0003      	movs	r3, r0
 8001e42:	3215      	adds	r2, #21
 8001e44:	3320      	adds	r3, #32
 8001e46:	2a1c      	cmp	r2, #28
 8001e48:	dc00      	bgt.n	8001e4c <__aeabi_ddiv+0x4e0>
 8001e4a:	e6fb      	b.n	8001c44 <__aeabi_ddiv+0x2d8>
 8001e4c:	9900      	ldr	r1, [sp, #0]
 8001e4e:	3808      	subs	r0, #8
 8001e50:	4081      	lsls	r1, r0
 8001e52:	2200      	movs	r2, #0
 8001e54:	468b      	mov	fp, r1
 8001e56:	e702      	b.n	8001c5e <__aeabi_ddiv+0x2f2>
 8001e58:	9900      	ldr	r1, [sp, #0]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	468c      	mov	ip, r1
 8001e5e:	4464      	add	r4, ip
 8001e60:	42a1      	cmp	r1, r4
 8001e62:	d900      	bls.n	8001e66 <__aeabi_ddiv+0x4fa>
 8001e64:	e69a      	b.n	8001b9c <__aeabi_ddiv+0x230>
 8001e66:	42a2      	cmp	r2, r4
 8001e68:	d800      	bhi.n	8001e6c <__aeabi_ddiv+0x500>
 8001e6a:	e697      	b.n	8001b9c <__aeabi_ddiv+0x230>
 8001e6c:	1e83      	subs	r3, r0, #2
 8001e6e:	4464      	add	r4, ip
 8001e70:	e694      	b.n	8001b9c <__aeabi_ddiv+0x230>
 8001e72:	46ac      	mov	ip, r5
 8001e74:	4461      	add	r1, ip
 8001e76:	3f01      	subs	r7, #1
 8001e78:	428d      	cmp	r5, r1
 8001e7a:	d900      	bls.n	8001e7e <__aeabi_ddiv+0x512>
 8001e7c:	e680      	b.n	8001b80 <__aeabi_ddiv+0x214>
 8001e7e:	428a      	cmp	r2, r1
 8001e80:	d800      	bhi.n	8001e84 <__aeabi_ddiv+0x518>
 8001e82:	e67d      	b.n	8001b80 <__aeabi_ddiv+0x214>
 8001e84:	1e87      	subs	r7, r0, #2
 8001e86:	4461      	add	r1, ip
 8001e88:	e67a      	b.n	8001b80 <__aeabi_ddiv+0x214>
 8001e8a:	4285      	cmp	r5, r0
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_ddiv+0x524>
 8001e8e:	e65f      	b.n	8001b50 <__aeabi_ddiv+0x1e4>
 8001e90:	45b9      	cmp	r9, r7
 8001e92:	d900      	bls.n	8001e96 <__aeabi_ddiv+0x52a>
 8001e94:	e65c      	b.n	8001b50 <__aeabi_ddiv+0x1e4>
 8001e96:	e656      	b.n	8001b46 <__aeabi_ddiv+0x1da>
 8001e98:	42a2      	cmp	r2, r4
 8001e9a:	d800      	bhi.n	8001e9e <__aeabi_ddiv+0x532>
 8001e9c:	e61a      	b.n	8001ad4 <__aeabi_ddiv+0x168>
 8001e9e:	1e83      	subs	r3, r0, #2
 8001ea0:	4464      	add	r4, ip
 8001ea2:	e617      	b.n	8001ad4 <__aeabi_ddiv+0x168>
 8001ea4:	428a      	cmp	r2, r1
 8001ea6:	d800      	bhi.n	8001eaa <__aeabi_ddiv+0x53e>
 8001ea8:	e600      	b.n	8001aac <__aeabi_ddiv+0x140>
 8001eaa:	46ac      	mov	ip, r5
 8001eac:	1e83      	subs	r3, r0, #2
 8001eae:	4698      	mov	r8, r3
 8001eb0:	4461      	add	r1, ip
 8001eb2:	e5fb      	b.n	8001aac <__aeabi_ddiv+0x140>
 8001eb4:	4837      	ldr	r0, [pc, #220]	@ (8001f94 <__aeabi_ddiv+0x628>)
 8001eb6:	0014      	movs	r4, r2
 8001eb8:	4450      	add	r0, sl
 8001eba:	4082      	lsls	r2, r0
 8001ebc:	465b      	mov	r3, fp
 8001ebe:	0017      	movs	r7, r2
 8001ec0:	4083      	lsls	r3, r0
 8001ec2:	40cc      	lsrs	r4, r1
 8001ec4:	1e7a      	subs	r2, r7, #1
 8001ec6:	4197      	sbcs	r7, r2
 8001ec8:	4323      	orrs	r3, r4
 8001eca:	433b      	orrs	r3, r7
 8001ecc:	001a      	movs	r2, r3
 8001ece:	465b      	mov	r3, fp
 8001ed0:	40cb      	lsrs	r3, r1
 8001ed2:	0751      	lsls	r1, r2, #29
 8001ed4:	d009      	beq.n	8001eea <__aeabi_ddiv+0x57e>
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	4011      	ands	r1, r2
 8001eda:	2904      	cmp	r1, #4
 8001edc:	d005      	beq.n	8001eea <__aeabi_ddiv+0x57e>
 8001ede:	1d11      	adds	r1, r2, #4
 8001ee0:	4291      	cmp	r1, r2
 8001ee2:	4192      	sbcs	r2, r2
 8001ee4:	4252      	negs	r2, r2
 8001ee6:	189b      	adds	r3, r3, r2
 8001ee8:	000a      	movs	r2, r1
 8001eea:	0219      	lsls	r1, r3, #8
 8001eec:	d400      	bmi.n	8001ef0 <__aeabi_ddiv+0x584>
 8001eee:	e755      	b.n	8001d9c <__aeabi_ddiv+0x430>
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2400      	movs	r4, #0
 8001ef6:	4690      	mov	r8, r2
 8001ef8:	e598      	b.n	8001a2c <__aeabi_ddiv+0xc0>
 8001efa:	000a      	movs	r2, r1
 8001efc:	42bc      	cmp	r4, r7
 8001efe:	d000      	beq.n	8001f02 <__aeabi_ddiv+0x596>
 8001f00:	e66e      	b.n	8001be0 <__aeabi_ddiv+0x274>
 8001f02:	454b      	cmp	r3, r9
 8001f04:	d000      	beq.n	8001f08 <__aeabi_ddiv+0x59c>
 8001f06:	e66b      	b.n	8001be0 <__aeabi_ddiv+0x274>
 8001f08:	e66c      	b.n	8001be4 <__aeabi_ddiv+0x278>
 8001f0a:	4b23      	ldr	r3, [pc, #140]	@ (8001f98 <__aeabi_ddiv+0x62c>)
 8001f0c:	4a23      	ldr	r2, [pc, #140]	@ (8001f9c <__aeabi_ddiv+0x630>)
 8001f0e:	4453      	add	r3, sl
 8001f10:	4592      	cmp	sl, r2
 8001f12:	da00      	bge.n	8001f16 <__aeabi_ddiv+0x5aa>
 8001f14:	e718      	b.n	8001d48 <__aeabi_ddiv+0x3dc>
 8001f16:	2101      	movs	r1, #1
 8001f18:	4249      	negs	r1, r1
 8001f1a:	1d0a      	adds	r2, r1, #4
 8001f1c:	428a      	cmp	r2, r1
 8001f1e:	4189      	sbcs	r1, r1
 8001f20:	4249      	negs	r1, r1
 8001f22:	448b      	add	fp, r1
 8001f24:	e666      	b.n	8001bf4 <__aeabi_ddiv+0x288>
 8001f26:	210f      	movs	r1, #15
 8001f28:	4011      	ands	r1, r2
 8001f2a:	2904      	cmp	r1, #4
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_ddiv+0x5c4>
 8001f2e:	e661      	b.n	8001bf4 <__aeabi_ddiv+0x288>
 8001f30:	0011      	movs	r1, r2
 8001f32:	e7f2      	b.n	8001f1a <__aeabi_ddiv+0x5ae>
 8001f34:	42bc      	cmp	r4, r7
 8001f36:	d800      	bhi.n	8001f3a <__aeabi_ddiv+0x5ce>
 8001f38:	e60a      	b.n	8001b50 <__aeabi_ddiv+0x1e4>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	425b      	negs	r3, r3
 8001f3e:	469c      	mov	ip, r3
 8001f40:	9900      	ldr	r1, [sp, #0]
 8001f42:	444f      	add	r7, r9
 8001f44:	454f      	cmp	r7, r9
 8001f46:	419b      	sbcs	r3, r3
 8001f48:	44e3      	add	fp, ip
 8001f4a:	468c      	mov	ip, r1
 8001f4c:	425b      	negs	r3, r3
 8001f4e:	4463      	add	r3, ip
 8001f50:	18c0      	adds	r0, r0, r3
 8001f52:	e5ff      	b.n	8001b54 <__aeabi_ddiv+0x1e8>
 8001f54:	4649      	mov	r1, r9
 8001f56:	9d00      	ldr	r5, [sp, #0]
 8001f58:	0048      	lsls	r0, r1, #1
 8001f5a:	4548      	cmp	r0, r9
 8001f5c:	4189      	sbcs	r1, r1
 8001f5e:	46ac      	mov	ip, r5
 8001f60:	4249      	negs	r1, r1
 8001f62:	4461      	add	r1, ip
 8001f64:	4681      	mov	r9, r0
 8001f66:	3a02      	subs	r2, #2
 8001f68:	1864      	adds	r4, r4, r1
 8001f6a:	e7c7      	b.n	8001efc <__aeabi_ddiv+0x590>
 8001f6c:	2480      	movs	r4, #128	@ 0x80
 8001f6e:	465b      	mov	r3, fp
 8001f70:	0324      	lsls	r4, r4, #12
 8001f72:	431c      	orrs	r4, r3
 8001f74:	0324      	lsls	r4, r4, #12
 8001f76:	4690      	mov	r8, r2
 8001f78:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <__aeabi_ddiv+0x620>)
 8001f7a:	0b24      	lsrs	r4, r4, #12
 8001f7c:	e556      	b.n	8001a2c <__aeabi_ddiv+0xc0>
 8001f7e:	4599      	cmp	r9, r3
 8001f80:	d3e8      	bcc.n	8001f54 <__aeabi_ddiv+0x5e8>
 8001f82:	000a      	movs	r2, r1
 8001f84:	e7bd      	b.n	8001f02 <__aeabi_ddiv+0x596>
 8001f86:	2300      	movs	r3, #0
 8001f88:	e708      	b.n	8001d9c <__aeabi_ddiv+0x430>
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	000007ff 	.word	0x000007ff
 8001f90:	0000043e 	.word	0x0000043e
 8001f94:	0000041e 	.word	0x0000041e
 8001f98:	000003ff 	.word	0x000003ff
 8001f9c:	fffffc02 	.word	0xfffffc02

08001fa0 <__eqdf2>:
 8001fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa2:	4657      	mov	r7, sl
 8001fa4:	46de      	mov	lr, fp
 8001fa6:	464e      	mov	r6, r9
 8001fa8:	4645      	mov	r5, r8
 8001faa:	b5e0      	push	{r5, r6, r7, lr}
 8001fac:	000d      	movs	r5, r1
 8001fae:	0004      	movs	r4, r0
 8001fb0:	0fe8      	lsrs	r0, r5, #31
 8001fb2:	4683      	mov	fp, r0
 8001fb4:	0309      	lsls	r1, r1, #12
 8001fb6:	0fd8      	lsrs	r0, r3, #31
 8001fb8:	0b09      	lsrs	r1, r1, #12
 8001fba:	4682      	mov	sl, r0
 8001fbc:	4819      	ldr	r0, [pc, #100]	@ (8002024 <__eqdf2+0x84>)
 8001fbe:	468c      	mov	ip, r1
 8001fc0:	031f      	lsls	r7, r3, #12
 8001fc2:	0069      	lsls	r1, r5, #1
 8001fc4:	005e      	lsls	r6, r3, #1
 8001fc6:	0d49      	lsrs	r1, r1, #21
 8001fc8:	0b3f      	lsrs	r7, r7, #12
 8001fca:	0d76      	lsrs	r6, r6, #21
 8001fcc:	4281      	cmp	r1, r0
 8001fce:	d018      	beq.n	8002002 <__eqdf2+0x62>
 8001fd0:	4286      	cmp	r6, r0
 8001fd2:	d00f      	beq.n	8001ff4 <__eqdf2+0x54>
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	42b1      	cmp	r1, r6
 8001fd8:	d10d      	bne.n	8001ff6 <__eqdf2+0x56>
 8001fda:	45bc      	cmp	ip, r7
 8001fdc:	d10b      	bne.n	8001ff6 <__eqdf2+0x56>
 8001fde:	4294      	cmp	r4, r2
 8001fe0:	d109      	bne.n	8001ff6 <__eqdf2+0x56>
 8001fe2:	45d3      	cmp	fp, sl
 8001fe4:	d01c      	beq.n	8002020 <__eqdf2+0x80>
 8001fe6:	2900      	cmp	r1, #0
 8001fe8:	d105      	bne.n	8001ff6 <__eqdf2+0x56>
 8001fea:	4660      	mov	r0, ip
 8001fec:	4320      	orrs	r0, r4
 8001fee:	1e43      	subs	r3, r0, #1
 8001ff0:	4198      	sbcs	r0, r3
 8001ff2:	e000      	b.n	8001ff6 <__eqdf2+0x56>
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ff8:	46bb      	mov	fp, r7
 8001ffa:	46b2      	mov	sl, r6
 8001ffc:	46a9      	mov	r9, r5
 8001ffe:	46a0      	mov	r8, r4
 8002000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002002:	2001      	movs	r0, #1
 8002004:	428e      	cmp	r6, r1
 8002006:	d1f6      	bne.n	8001ff6 <__eqdf2+0x56>
 8002008:	4661      	mov	r1, ip
 800200a:	4339      	orrs	r1, r7
 800200c:	000f      	movs	r7, r1
 800200e:	4317      	orrs	r7, r2
 8002010:	4327      	orrs	r7, r4
 8002012:	d1f0      	bne.n	8001ff6 <__eqdf2+0x56>
 8002014:	465b      	mov	r3, fp
 8002016:	4652      	mov	r2, sl
 8002018:	1a98      	subs	r0, r3, r2
 800201a:	1e43      	subs	r3, r0, #1
 800201c:	4198      	sbcs	r0, r3
 800201e:	e7ea      	b.n	8001ff6 <__eqdf2+0x56>
 8002020:	2000      	movs	r0, #0
 8002022:	e7e8      	b.n	8001ff6 <__eqdf2+0x56>
 8002024:	000007ff 	.word	0x000007ff

08002028 <__gedf2>:
 8002028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202a:	4657      	mov	r7, sl
 800202c:	464e      	mov	r6, r9
 800202e:	4645      	mov	r5, r8
 8002030:	46de      	mov	lr, fp
 8002032:	b5e0      	push	{r5, r6, r7, lr}
 8002034:	000d      	movs	r5, r1
 8002036:	030f      	lsls	r7, r1, #12
 8002038:	0b39      	lsrs	r1, r7, #12
 800203a:	b083      	sub	sp, #12
 800203c:	0004      	movs	r4, r0
 800203e:	4680      	mov	r8, r0
 8002040:	9101      	str	r1, [sp, #4]
 8002042:	0058      	lsls	r0, r3, #1
 8002044:	0fe9      	lsrs	r1, r5, #31
 8002046:	4f31      	ldr	r7, [pc, #196]	@ (800210c <__gedf2+0xe4>)
 8002048:	0d40      	lsrs	r0, r0, #21
 800204a:	468c      	mov	ip, r1
 800204c:	006e      	lsls	r6, r5, #1
 800204e:	0319      	lsls	r1, r3, #12
 8002050:	4682      	mov	sl, r0
 8002052:	4691      	mov	r9, r2
 8002054:	0d76      	lsrs	r6, r6, #21
 8002056:	0b09      	lsrs	r1, r1, #12
 8002058:	0fd8      	lsrs	r0, r3, #31
 800205a:	42be      	cmp	r6, r7
 800205c:	d01f      	beq.n	800209e <__gedf2+0x76>
 800205e:	45ba      	cmp	sl, r7
 8002060:	d00f      	beq.n	8002082 <__gedf2+0x5a>
 8002062:	2e00      	cmp	r6, #0
 8002064:	d12f      	bne.n	80020c6 <__gedf2+0x9e>
 8002066:	4655      	mov	r5, sl
 8002068:	9e01      	ldr	r6, [sp, #4]
 800206a:	4334      	orrs	r4, r6
 800206c:	2d00      	cmp	r5, #0
 800206e:	d127      	bne.n	80020c0 <__gedf2+0x98>
 8002070:	430a      	orrs	r2, r1
 8002072:	d03a      	beq.n	80020ea <__gedf2+0xc2>
 8002074:	2c00      	cmp	r4, #0
 8002076:	d145      	bne.n	8002104 <__gedf2+0xdc>
 8002078:	2800      	cmp	r0, #0
 800207a:	d11a      	bne.n	80020b2 <__gedf2+0x8a>
 800207c:	2001      	movs	r0, #1
 800207e:	4240      	negs	r0, r0
 8002080:	e017      	b.n	80020b2 <__gedf2+0x8a>
 8002082:	4311      	orrs	r1, r2
 8002084:	d13b      	bne.n	80020fe <__gedf2+0xd6>
 8002086:	2e00      	cmp	r6, #0
 8002088:	d102      	bne.n	8002090 <__gedf2+0x68>
 800208a:	9f01      	ldr	r7, [sp, #4]
 800208c:	4327      	orrs	r7, r4
 800208e:	d0f3      	beq.n	8002078 <__gedf2+0x50>
 8002090:	4584      	cmp	ip, r0
 8002092:	d109      	bne.n	80020a8 <__gedf2+0x80>
 8002094:	4663      	mov	r3, ip
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <__gedf2+0x54>
 800209a:	4660      	mov	r0, ip
 800209c:	e009      	b.n	80020b2 <__gedf2+0x8a>
 800209e:	9f01      	ldr	r7, [sp, #4]
 80020a0:	4327      	orrs	r7, r4
 80020a2:	d12c      	bne.n	80020fe <__gedf2+0xd6>
 80020a4:	45b2      	cmp	sl, r6
 80020a6:	d024      	beq.n	80020f2 <__gedf2+0xca>
 80020a8:	4663      	mov	r3, ip
 80020aa:	2002      	movs	r0, #2
 80020ac:	3b01      	subs	r3, #1
 80020ae:	4018      	ands	r0, r3
 80020b0:	3801      	subs	r0, #1
 80020b2:	b003      	add	sp, #12
 80020b4:	bcf0      	pop	{r4, r5, r6, r7}
 80020b6:	46bb      	mov	fp, r7
 80020b8:	46b2      	mov	sl, r6
 80020ba:	46a9      	mov	r9, r5
 80020bc:	46a0      	mov	r8, r4
 80020be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c0:	2c00      	cmp	r4, #0
 80020c2:	d0d9      	beq.n	8002078 <__gedf2+0x50>
 80020c4:	e7e4      	b.n	8002090 <__gedf2+0x68>
 80020c6:	4654      	mov	r4, sl
 80020c8:	2c00      	cmp	r4, #0
 80020ca:	d0ed      	beq.n	80020a8 <__gedf2+0x80>
 80020cc:	4584      	cmp	ip, r0
 80020ce:	d1eb      	bne.n	80020a8 <__gedf2+0x80>
 80020d0:	4556      	cmp	r6, sl
 80020d2:	dce9      	bgt.n	80020a8 <__gedf2+0x80>
 80020d4:	dbde      	blt.n	8002094 <__gedf2+0x6c>
 80020d6:	9b01      	ldr	r3, [sp, #4]
 80020d8:	428b      	cmp	r3, r1
 80020da:	d8e5      	bhi.n	80020a8 <__gedf2+0x80>
 80020dc:	d1da      	bne.n	8002094 <__gedf2+0x6c>
 80020de:	45c8      	cmp	r8, r9
 80020e0:	d8e2      	bhi.n	80020a8 <__gedf2+0x80>
 80020e2:	2000      	movs	r0, #0
 80020e4:	45c8      	cmp	r8, r9
 80020e6:	d2e4      	bcs.n	80020b2 <__gedf2+0x8a>
 80020e8:	e7d4      	b.n	8002094 <__gedf2+0x6c>
 80020ea:	2000      	movs	r0, #0
 80020ec:	2c00      	cmp	r4, #0
 80020ee:	d0e0      	beq.n	80020b2 <__gedf2+0x8a>
 80020f0:	e7da      	b.n	80020a8 <__gedf2+0x80>
 80020f2:	4311      	orrs	r1, r2
 80020f4:	d103      	bne.n	80020fe <__gedf2+0xd6>
 80020f6:	4584      	cmp	ip, r0
 80020f8:	d1d6      	bne.n	80020a8 <__gedf2+0x80>
 80020fa:	2000      	movs	r0, #0
 80020fc:	e7d9      	b.n	80020b2 <__gedf2+0x8a>
 80020fe:	2002      	movs	r0, #2
 8002100:	4240      	negs	r0, r0
 8002102:	e7d6      	b.n	80020b2 <__gedf2+0x8a>
 8002104:	4584      	cmp	ip, r0
 8002106:	d0e6      	beq.n	80020d6 <__gedf2+0xae>
 8002108:	e7ce      	b.n	80020a8 <__gedf2+0x80>
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	000007ff 	.word	0x000007ff

08002110 <__ledf2>:
 8002110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002112:	4657      	mov	r7, sl
 8002114:	464e      	mov	r6, r9
 8002116:	4645      	mov	r5, r8
 8002118:	46de      	mov	lr, fp
 800211a:	b5e0      	push	{r5, r6, r7, lr}
 800211c:	000d      	movs	r5, r1
 800211e:	030f      	lsls	r7, r1, #12
 8002120:	0004      	movs	r4, r0
 8002122:	4680      	mov	r8, r0
 8002124:	0fe8      	lsrs	r0, r5, #31
 8002126:	0b39      	lsrs	r1, r7, #12
 8002128:	4684      	mov	ip, r0
 800212a:	b083      	sub	sp, #12
 800212c:	0058      	lsls	r0, r3, #1
 800212e:	4f30      	ldr	r7, [pc, #192]	@ (80021f0 <__ledf2+0xe0>)
 8002130:	0d40      	lsrs	r0, r0, #21
 8002132:	9101      	str	r1, [sp, #4]
 8002134:	031e      	lsls	r6, r3, #12
 8002136:	0069      	lsls	r1, r5, #1
 8002138:	4682      	mov	sl, r0
 800213a:	4691      	mov	r9, r2
 800213c:	0d49      	lsrs	r1, r1, #21
 800213e:	0b36      	lsrs	r6, r6, #12
 8002140:	0fd8      	lsrs	r0, r3, #31
 8002142:	42b9      	cmp	r1, r7
 8002144:	d020      	beq.n	8002188 <__ledf2+0x78>
 8002146:	45ba      	cmp	sl, r7
 8002148:	d00f      	beq.n	800216a <__ledf2+0x5a>
 800214a:	2900      	cmp	r1, #0
 800214c:	d12b      	bne.n	80021a6 <__ledf2+0x96>
 800214e:	9901      	ldr	r1, [sp, #4]
 8002150:	430c      	orrs	r4, r1
 8002152:	4651      	mov	r1, sl
 8002154:	2900      	cmp	r1, #0
 8002156:	d137      	bne.n	80021c8 <__ledf2+0xb8>
 8002158:	4332      	orrs	r2, r6
 800215a:	d038      	beq.n	80021ce <__ledf2+0xbe>
 800215c:	2c00      	cmp	r4, #0
 800215e:	d144      	bne.n	80021ea <__ledf2+0xda>
 8002160:	2800      	cmp	r0, #0
 8002162:	d119      	bne.n	8002198 <__ledf2+0x88>
 8002164:	2001      	movs	r0, #1
 8002166:	4240      	negs	r0, r0
 8002168:	e016      	b.n	8002198 <__ledf2+0x88>
 800216a:	4316      	orrs	r6, r2
 800216c:	d113      	bne.n	8002196 <__ledf2+0x86>
 800216e:	2900      	cmp	r1, #0
 8002170:	d102      	bne.n	8002178 <__ledf2+0x68>
 8002172:	9f01      	ldr	r7, [sp, #4]
 8002174:	4327      	orrs	r7, r4
 8002176:	d0f3      	beq.n	8002160 <__ledf2+0x50>
 8002178:	4584      	cmp	ip, r0
 800217a:	d020      	beq.n	80021be <__ledf2+0xae>
 800217c:	4663      	mov	r3, ip
 800217e:	2002      	movs	r0, #2
 8002180:	3b01      	subs	r3, #1
 8002182:	4018      	ands	r0, r3
 8002184:	3801      	subs	r0, #1
 8002186:	e007      	b.n	8002198 <__ledf2+0x88>
 8002188:	9f01      	ldr	r7, [sp, #4]
 800218a:	4327      	orrs	r7, r4
 800218c:	d103      	bne.n	8002196 <__ledf2+0x86>
 800218e:	458a      	cmp	sl, r1
 8002190:	d1f4      	bne.n	800217c <__ledf2+0x6c>
 8002192:	4316      	orrs	r6, r2
 8002194:	d01f      	beq.n	80021d6 <__ledf2+0xc6>
 8002196:	2002      	movs	r0, #2
 8002198:	b003      	add	sp, #12
 800219a:	bcf0      	pop	{r4, r5, r6, r7}
 800219c:	46bb      	mov	fp, r7
 800219e:	46b2      	mov	sl, r6
 80021a0:	46a9      	mov	r9, r5
 80021a2:	46a0      	mov	r8, r4
 80021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a6:	4654      	mov	r4, sl
 80021a8:	2c00      	cmp	r4, #0
 80021aa:	d0e7      	beq.n	800217c <__ledf2+0x6c>
 80021ac:	4584      	cmp	ip, r0
 80021ae:	d1e5      	bne.n	800217c <__ledf2+0x6c>
 80021b0:	4551      	cmp	r1, sl
 80021b2:	dce3      	bgt.n	800217c <__ledf2+0x6c>
 80021b4:	db03      	blt.n	80021be <__ledf2+0xae>
 80021b6:	9b01      	ldr	r3, [sp, #4]
 80021b8:	42b3      	cmp	r3, r6
 80021ba:	d8df      	bhi.n	800217c <__ledf2+0x6c>
 80021bc:	d00f      	beq.n	80021de <__ledf2+0xce>
 80021be:	4663      	mov	r3, ip
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0cf      	beq.n	8002164 <__ledf2+0x54>
 80021c4:	4660      	mov	r0, ip
 80021c6:	e7e7      	b.n	8002198 <__ledf2+0x88>
 80021c8:	2c00      	cmp	r4, #0
 80021ca:	d0c9      	beq.n	8002160 <__ledf2+0x50>
 80021cc:	e7d4      	b.n	8002178 <__ledf2+0x68>
 80021ce:	2000      	movs	r0, #0
 80021d0:	2c00      	cmp	r4, #0
 80021d2:	d0e1      	beq.n	8002198 <__ledf2+0x88>
 80021d4:	e7d2      	b.n	800217c <__ledf2+0x6c>
 80021d6:	4584      	cmp	ip, r0
 80021d8:	d1d0      	bne.n	800217c <__ledf2+0x6c>
 80021da:	2000      	movs	r0, #0
 80021dc:	e7dc      	b.n	8002198 <__ledf2+0x88>
 80021de:	45c8      	cmp	r8, r9
 80021e0:	d8cc      	bhi.n	800217c <__ledf2+0x6c>
 80021e2:	2000      	movs	r0, #0
 80021e4:	45c8      	cmp	r8, r9
 80021e6:	d2d7      	bcs.n	8002198 <__ledf2+0x88>
 80021e8:	e7e9      	b.n	80021be <__ledf2+0xae>
 80021ea:	4584      	cmp	ip, r0
 80021ec:	d0e3      	beq.n	80021b6 <__ledf2+0xa6>
 80021ee:	e7c5      	b.n	800217c <__ledf2+0x6c>
 80021f0:	000007ff 	.word	0x000007ff

080021f4 <__aeabi_dmul>:
 80021f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f6:	4657      	mov	r7, sl
 80021f8:	46de      	mov	lr, fp
 80021fa:	464e      	mov	r6, r9
 80021fc:	4645      	mov	r5, r8
 80021fe:	b5e0      	push	{r5, r6, r7, lr}
 8002200:	001f      	movs	r7, r3
 8002202:	030b      	lsls	r3, r1, #12
 8002204:	0b1b      	lsrs	r3, r3, #12
 8002206:	0016      	movs	r6, r2
 8002208:	469a      	mov	sl, r3
 800220a:	0fca      	lsrs	r2, r1, #31
 800220c:	004b      	lsls	r3, r1, #1
 800220e:	0004      	movs	r4, r0
 8002210:	4693      	mov	fp, r2
 8002212:	b087      	sub	sp, #28
 8002214:	0d5b      	lsrs	r3, r3, #21
 8002216:	d100      	bne.n	800221a <__aeabi_dmul+0x26>
 8002218:	e0d5      	b.n	80023c6 <__aeabi_dmul+0x1d2>
 800221a:	4abb      	ldr	r2, [pc, #748]	@ (8002508 <__aeabi_dmul+0x314>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d100      	bne.n	8002222 <__aeabi_dmul+0x2e>
 8002220:	e0f8      	b.n	8002414 <__aeabi_dmul+0x220>
 8002222:	4651      	mov	r1, sl
 8002224:	0f42      	lsrs	r2, r0, #29
 8002226:	00c9      	lsls	r1, r1, #3
 8002228:	430a      	orrs	r2, r1
 800222a:	2180      	movs	r1, #128	@ 0x80
 800222c:	0409      	lsls	r1, r1, #16
 800222e:	4311      	orrs	r1, r2
 8002230:	00c2      	lsls	r2, r0, #3
 8002232:	4691      	mov	r9, r2
 8002234:	4ab5      	ldr	r2, [pc, #724]	@ (800250c <__aeabi_dmul+0x318>)
 8002236:	468a      	mov	sl, r1
 8002238:	189d      	adds	r5, r3, r2
 800223a:	2300      	movs	r3, #0
 800223c:	4698      	mov	r8, r3
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	033c      	lsls	r4, r7, #12
 8002242:	007b      	lsls	r3, r7, #1
 8002244:	0ffa      	lsrs	r2, r7, #31
 8002246:	0030      	movs	r0, r6
 8002248:	0b24      	lsrs	r4, r4, #12
 800224a:	0d5b      	lsrs	r3, r3, #21
 800224c:	9200      	str	r2, [sp, #0]
 800224e:	d100      	bne.n	8002252 <__aeabi_dmul+0x5e>
 8002250:	e096      	b.n	8002380 <__aeabi_dmul+0x18c>
 8002252:	4aad      	ldr	r2, [pc, #692]	@ (8002508 <__aeabi_dmul+0x314>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d031      	beq.n	80022bc <__aeabi_dmul+0xc8>
 8002258:	0f72      	lsrs	r2, r6, #29
 800225a:	00e4      	lsls	r4, r4, #3
 800225c:	4322      	orrs	r2, r4
 800225e:	2480      	movs	r4, #128	@ 0x80
 8002260:	0424      	lsls	r4, r4, #16
 8002262:	4314      	orrs	r4, r2
 8002264:	4aa9      	ldr	r2, [pc, #676]	@ (800250c <__aeabi_dmul+0x318>)
 8002266:	00f0      	lsls	r0, r6, #3
 8002268:	4694      	mov	ip, r2
 800226a:	4463      	add	r3, ip
 800226c:	195b      	adds	r3, r3, r5
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	9201      	str	r2, [sp, #4]
 8002272:	4642      	mov	r2, r8
 8002274:	2600      	movs	r6, #0
 8002276:	2a0a      	cmp	r2, #10
 8002278:	dc42      	bgt.n	8002300 <__aeabi_dmul+0x10c>
 800227a:	465a      	mov	r2, fp
 800227c:	9900      	ldr	r1, [sp, #0]
 800227e:	404a      	eors	r2, r1
 8002280:	4693      	mov	fp, r2
 8002282:	4642      	mov	r2, r8
 8002284:	2a02      	cmp	r2, #2
 8002286:	dc32      	bgt.n	80022ee <__aeabi_dmul+0xfa>
 8002288:	3a01      	subs	r2, #1
 800228a:	2a01      	cmp	r2, #1
 800228c:	d900      	bls.n	8002290 <__aeabi_dmul+0x9c>
 800228e:	e149      	b.n	8002524 <__aeabi_dmul+0x330>
 8002290:	2e02      	cmp	r6, #2
 8002292:	d100      	bne.n	8002296 <__aeabi_dmul+0xa2>
 8002294:	e0ca      	b.n	800242c <__aeabi_dmul+0x238>
 8002296:	2e01      	cmp	r6, #1
 8002298:	d13d      	bne.n	8002316 <__aeabi_dmul+0x122>
 800229a:	2300      	movs	r3, #0
 800229c:	2400      	movs	r4, #0
 800229e:	2200      	movs	r2, #0
 80022a0:	0010      	movs	r0, r2
 80022a2:	465a      	mov	r2, fp
 80022a4:	051b      	lsls	r3, r3, #20
 80022a6:	4323      	orrs	r3, r4
 80022a8:	07d2      	lsls	r2, r2, #31
 80022aa:	4313      	orrs	r3, r2
 80022ac:	0019      	movs	r1, r3
 80022ae:	b007      	add	sp, #28
 80022b0:	bcf0      	pop	{r4, r5, r6, r7}
 80022b2:	46bb      	mov	fp, r7
 80022b4:	46b2      	mov	sl, r6
 80022b6:	46a9      	mov	r9, r5
 80022b8:	46a0      	mov	r8, r4
 80022ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022bc:	4b92      	ldr	r3, [pc, #584]	@ (8002508 <__aeabi_dmul+0x314>)
 80022be:	4326      	orrs	r6, r4
 80022c0:	18eb      	adds	r3, r5, r3
 80022c2:	2e00      	cmp	r6, #0
 80022c4:	d100      	bne.n	80022c8 <__aeabi_dmul+0xd4>
 80022c6:	e0bb      	b.n	8002440 <__aeabi_dmul+0x24c>
 80022c8:	2203      	movs	r2, #3
 80022ca:	4641      	mov	r1, r8
 80022cc:	4311      	orrs	r1, r2
 80022ce:	465a      	mov	r2, fp
 80022d0:	4688      	mov	r8, r1
 80022d2:	9900      	ldr	r1, [sp, #0]
 80022d4:	404a      	eors	r2, r1
 80022d6:	2180      	movs	r1, #128	@ 0x80
 80022d8:	0109      	lsls	r1, r1, #4
 80022da:	468c      	mov	ip, r1
 80022dc:	0029      	movs	r1, r5
 80022de:	4461      	add	r1, ip
 80022e0:	9101      	str	r1, [sp, #4]
 80022e2:	4641      	mov	r1, r8
 80022e4:	290a      	cmp	r1, #10
 80022e6:	dd00      	ble.n	80022ea <__aeabi_dmul+0xf6>
 80022e8:	e233      	b.n	8002752 <__aeabi_dmul+0x55e>
 80022ea:	4693      	mov	fp, r2
 80022ec:	2603      	movs	r6, #3
 80022ee:	4642      	mov	r2, r8
 80022f0:	2701      	movs	r7, #1
 80022f2:	4097      	lsls	r7, r2
 80022f4:	21a6      	movs	r1, #166	@ 0xa6
 80022f6:	003a      	movs	r2, r7
 80022f8:	00c9      	lsls	r1, r1, #3
 80022fa:	400a      	ands	r2, r1
 80022fc:	420f      	tst	r7, r1
 80022fe:	d031      	beq.n	8002364 <__aeabi_dmul+0x170>
 8002300:	9e02      	ldr	r6, [sp, #8]
 8002302:	2e02      	cmp	r6, #2
 8002304:	d100      	bne.n	8002308 <__aeabi_dmul+0x114>
 8002306:	e235      	b.n	8002774 <__aeabi_dmul+0x580>
 8002308:	2e03      	cmp	r6, #3
 800230a:	d100      	bne.n	800230e <__aeabi_dmul+0x11a>
 800230c:	e1d2      	b.n	80026b4 <__aeabi_dmul+0x4c0>
 800230e:	4654      	mov	r4, sl
 8002310:	4648      	mov	r0, r9
 8002312:	2e01      	cmp	r6, #1
 8002314:	d0c1      	beq.n	800229a <__aeabi_dmul+0xa6>
 8002316:	9a01      	ldr	r2, [sp, #4]
 8002318:	4b7d      	ldr	r3, [pc, #500]	@ (8002510 <__aeabi_dmul+0x31c>)
 800231a:	4694      	mov	ip, r2
 800231c:	4463      	add	r3, ip
 800231e:	2b00      	cmp	r3, #0
 8002320:	dc00      	bgt.n	8002324 <__aeabi_dmul+0x130>
 8002322:	e0c0      	b.n	80024a6 <__aeabi_dmul+0x2b2>
 8002324:	0742      	lsls	r2, r0, #29
 8002326:	d009      	beq.n	800233c <__aeabi_dmul+0x148>
 8002328:	220f      	movs	r2, #15
 800232a:	4002      	ands	r2, r0
 800232c:	2a04      	cmp	r2, #4
 800232e:	d005      	beq.n	800233c <__aeabi_dmul+0x148>
 8002330:	1d02      	adds	r2, r0, #4
 8002332:	4282      	cmp	r2, r0
 8002334:	4180      	sbcs	r0, r0
 8002336:	4240      	negs	r0, r0
 8002338:	1824      	adds	r4, r4, r0
 800233a:	0010      	movs	r0, r2
 800233c:	01e2      	lsls	r2, r4, #7
 800233e:	d506      	bpl.n	800234e <__aeabi_dmul+0x15a>
 8002340:	4b74      	ldr	r3, [pc, #464]	@ (8002514 <__aeabi_dmul+0x320>)
 8002342:	9a01      	ldr	r2, [sp, #4]
 8002344:	401c      	ands	r4, r3
 8002346:	2380      	movs	r3, #128	@ 0x80
 8002348:	4694      	mov	ip, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4463      	add	r3, ip
 800234e:	4a72      	ldr	r2, [pc, #456]	@ (8002518 <__aeabi_dmul+0x324>)
 8002350:	4293      	cmp	r3, r2
 8002352:	dc6b      	bgt.n	800242c <__aeabi_dmul+0x238>
 8002354:	0762      	lsls	r2, r4, #29
 8002356:	08c0      	lsrs	r0, r0, #3
 8002358:	0264      	lsls	r4, r4, #9
 800235a:	055b      	lsls	r3, r3, #21
 800235c:	4302      	orrs	r2, r0
 800235e:	0b24      	lsrs	r4, r4, #12
 8002360:	0d5b      	lsrs	r3, r3, #21
 8002362:	e79d      	b.n	80022a0 <__aeabi_dmul+0xac>
 8002364:	2190      	movs	r1, #144	@ 0x90
 8002366:	0089      	lsls	r1, r1, #2
 8002368:	420f      	tst	r7, r1
 800236a:	d163      	bne.n	8002434 <__aeabi_dmul+0x240>
 800236c:	2288      	movs	r2, #136	@ 0x88
 800236e:	423a      	tst	r2, r7
 8002370:	d100      	bne.n	8002374 <__aeabi_dmul+0x180>
 8002372:	e0d7      	b.n	8002524 <__aeabi_dmul+0x330>
 8002374:	9b00      	ldr	r3, [sp, #0]
 8002376:	46a2      	mov	sl, r4
 8002378:	469b      	mov	fp, r3
 800237a:	4681      	mov	r9, r0
 800237c:	9602      	str	r6, [sp, #8]
 800237e:	e7bf      	b.n	8002300 <__aeabi_dmul+0x10c>
 8002380:	0023      	movs	r3, r4
 8002382:	4333      	orrs	r3, r6
 8002384:	d100      	bne.n	8002388 <__aeabi_dmul+0x194>
 8002386:	e07f      	b.n	8002488 <__aeabi_dmul+0x294>
 8002388:	2c00      	cmp	r4, #0
 800238a:	d100      	bne.n	800238e <__aeabi_dmul+0x19a>
 800238c:	e1ad      	b.n	80026ea <__aeabi_dmul+0x4f6>
 800238e:	0020      	movs	r0, r4
 8002390:	f000 ff10 	bl	80031b4 <__clzsi2>
 8002394:	0002      	movs	r2, r0
 8002396:	0003      	movs	r3, r0
 8002398:	3a0b      	subs	r2, #11
 800239a:	201d      	movs	r0, #29
 800239c:	0019      	movs	r1, r3
 800239e:	1a82      	subs	r2, r0, r2
 80023a0:	0030      	movs	r0, r6
 80023a2:	3908      	subs	r1, #8
 80023a4:	40d0      	lsrs	r0, r2
 80023a6:	408c      	lsls	r4, r1
 80023a8:	4304      	orrs	r4, r0
 80023aa:	0030      	movs	r0, r6
 80023ac:	4088      	lsls	r0, r1
 80023ae:	4a5b      	ldr	r2, [pc, #364]	@ (800251c <__aeabi_dmul+0x328>)
 80023b0:	1aeb      	subs	r3, r5, r3
 80023b2:	4694      	mov	ip, r2
 80023b4:	4463      	add	r3, ip
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	9201      	str	r2, [sp, #4]
 80023ba:	4642      	mov	r2, r8
 80023bc:	2600      	movs	r6, #0
 80023be:	2a0a      	cmp	r2, #10
 80023c0:	dc00      	bgt.n	80023c4 <__aeabi_dmul+0x1d0>
 80023c2:	e75a      	b.n	800227a <__aeabi_dmul+0x86>
 80023c4:	e79c      	b.n	8002300 <__aeabi_dmul+0x10c>
 80023c6:	4653      	mov	r3, sl
 80023c8:	4303      	orrs	r3, r0
 80023ca:	4699      	mov	r9, r3
 80023cc:	d054      	beq.n	8002478 <__aeabi_dmul+0x284>
 80023ce:	4653      	mov	r3, sl
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d100      	bne.n	80023d6 <__aeabi_dmul+0x1e2>
 80023d4:	e177      	b.n	80026c6 <__aeabi_dmul+0x4d2>
 80023d6:	4650      	mov	r0, sl
 80023d8:	f000 feec 	bl	80031b4 <__clzsi2>
 80023dc:	230b      	movs	r3, #11
 80023de:	425b      	negs	r3, r3
 80023e0:	469c      	mov	ip, r3
 80023e2:	0002      	movs	r2, r0
 80023e4:	4484      	add	ip, r0
 80023e6:	0011      	movs	r1, r2
 80023e8:	4650      	mov	r0, sl
 80023ea:	3908      	subs	r1, #8
 80023ec:	4088      	lsls	r0, r1
 80023ee:	231d      	movs	r3, #29
 80023f0:	4680      	mov	r8, r0
 80023f2:	4660      	mov	r0, ip
 80023f4:	1a1b      	subs	r3, r3, r0
 80023f6:	0020      	movs	r0, r4
 80023f8:	40d8      	lsrs	r0, r3
 80023fa:	0003      	movs	r3, r0
 80023fc:	4640      	mov	r0, r8
 80023fe:	4303      	orrs	r3, r0
 8002400:	469a      	mov	sl, r3
 8002402:	0023      	movs	r3, r4
 8002404:	408b      	lsls	r3, r1
 8002406:	4699      	mov	r9, r3
 8002408:	2300      	movs	r3, #0
 800240a:	4d44      	ldr	r5, [pc, #272]	@ (800251c <__aeabi_dmul+0x328>)
 800240c:	4698      	mov	r8, r3
 800240e:	1aad      	subs	r5, r5, r2
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	e715      	b.n	8002240 <__aeabi_dmul+0x4c>
 8002414:	4652      	mov	r2, sl
 8002416:	4302      	orrs	r2, r0
 8002418:	4691      	mov	r9, r2
 800241a:	d126      	bne.n	800246a <__aeabi_dmul+0x276>
 800241c:	2200      	movs	r2, #0
 800241e:	001d      	movs	r5, r3
 8002420:	2302      	movs	r3, #2
 8002422:	4692      	mov	sl, r2
 8002424:	3208      	adds	r2, #8
 8002426:	4690      	mov	r8, r2
 8002428:	9302      	str	r3, [sp, #8]
 800242a:	e709      	b.n	8002240 <__aeabi_dmul+0x4c>
 800242c:	2400      	movs	r4, #0
 800242e:	2200      	movs	r2, #0
 8002430:	4b35      	ldr	r3, [pc, #212]	@ (8002508 <__aeabi_dmul+0x314>)
 8002432:	e735      	b.n	80022a0 <__aeabi_dmul+0xac>
 8002434:	2300      	movs	r3, #0
 8002436:	2480      	movs	r4, #128	@ 0x80
 8002438:	469b      	mov	fp, r3
 800243a:	0324      	lsls	r4, r4, #12
 800243c:	4b32      	ldr	r3, [pc, #200]	@ (8002508 <__aeabi_dmul+0x314>)
 800243e:	e72f      	b.n	80022a0 <__aeabi_dmul+0xac>
 8002440:	2202      	movs	r2, #2
 8002442:	4641      	mov	r1, r8
 8002444:	4311      	orrs	r1, r2
 8002446:	2280      	movs	r2, #128	@ 0x80
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	4694      	mov	ip, r2
 800244c:	002a      	movs	r2, r5
 800244e:	4462      	add	r2, ip
 8002450:	4688      	mov	r8, r1
 8002452:	9201      	str	r2, [sp, #4]
 8002454:	290a      	cmp	r1, #10
 8002456:	dd00      	ble.n	800245a <__aeabi_dmul+0x266>
 8002458:	e752      	b.n	8002300 <__aeabi_dmul+0x10c>
 800245a:	465a      	mov	r2, fp
 800245c:	2000      	movs	r0, #0
 800245e:	9900      	ldr	r1, [sp, #0]
 8002460:	0004      	movs	r4, r0
 8002462:	404a      	eors	r2, r1
 8002464:	4693      	mov	fp, r2
 8002466:	2602      	movs	r6, #2
 8002468:	e70b      	b.n	8002282 <__aeabi_dmul+0x8e>
 800246a:	220c      	movs	r2, #12
 800246c:	001d      	movs	r5, r3
 800246e:	2303      	movs	r3, #3
 8002470:	4681      	mov	r9, r0
 8002472:	4690      	mov	r8, r2
 8002474:	9302      	str	r3, [sp, #8]
 8002476:	e6e3      	b.n	8002240 <__aeabi_dmul+0x4c>
 8002478:	2300      	movs	r3, #0
 800247a:	469a      	mov	sl, r3
 800247c:	3304      	adds	r3, #4
 800247e:	4698      	mov	r8, r3
 8002480:	3b03      	subs	r3, #3
 8002482:	2500      	movs	r5, #0
 8002484:	9302      	str	r3, [sp, #8]
 8002486:	e6db      	b.n	8002240 <__aeabi_dmul+0x4c>
 8002488:	4642      	mov	r2, r8
 800248a:	3301      	adds	r3, #1
 800248c:	431a      	orrs	r2, r3
 800248e:	002b      	movs	r3, r5
 8002490:	4690      	mov	r8, r2
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	9201      	str	r2, [sp, #4]
 8002496:	4642      	mov	r2, r8
 8002498:	2400      	movs	r4, #0
 800249a:	2000      	movs	r0, #0
 800249c:	2601      	movs	r6, #1
 800249e:	2a0a      	cmp	r2, #10
 80024a0:	dc00      	bgt.n	80024a4 <__aeabi_dmul+0x2b0>
 80024a2:	e6ea      	b.n	800227a <__aeabi_dmul+0x86>
 80024a4:	e72c      	b.n	8002300 <__aeabi_dmul+0x10c>
 80024a6:	2201      	movs	r2, #1
 80024a8:	1ad2      	subs	r2, r2, r3
 80024aa:	2a38      	cmp	r2, #56	@ 0x38
 80024ac:	dd00      	ble.n	80024b0 <__aeabi_dmul+0x2bc>
 80024ae:	e6f4      	b.n	800229a <__aeabi_dmul+0xa6>
 80024b0:	2a1f      	cmp	r2, #31
 80024b2:	dc00      	bgt.n	80024b6 <__aeabi_dmul+0x2c2>
 80024b4:	e12a      	b.n	800270c <__aeabi_dmul+0x518>
 80024b6:	211f      	movs	r1, #31
 80024b8:	4249      	negs	r1, r1
 80024ba:	1acb      	subs	r3, r1, r3
 80024bc:	0021      	movs	r1, r4
 80024be:	40d9      	lsrs	r1, r3
 80024c0:	000b      	movs	r3, r1
 80024c2:	2a20      	cmp	r2, #32
 80024c4:	d005      	beq.n	80024d2 <__aeabi_dmul+0x2de>
 80024c6:	4a16      	ldr	r2, [pc, #88]	@ (8002520 <__aeabi_dmul+0x32c>)
 80024c8:	9d01      	ldr	r5, [sp, #4]
 80024ca:	4694      	mov	ip, r2
 80024cc:	4465      	add	r5, ip
 80024ce:	40ac      	lsls	r4, r5
 80024d0:	4320      	orrs	r0, r4
 80024d2:	1e42      	subs	r2, r0, #1
 80024d4:	4190      	sbcs	r0, r2
 80024d6:	4318      	orrs	r0, r3
 80024d8:	2307      	movs	r3, #7
 80024da:	0019      	movs	r1, r3
 80024dc:	2400      	movs	r4, #0
 80024de:	4001      	ands	r1, r0
 80024e0:	4203      	tst	r3, r0
 80024e2:	d00c      	beq.n	80024fe <__aeabi_dmul+0x30a>
 80024e4:	230f      	movs	r3, #15
 80024e6:	4003      	ands	r3, r0
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d100      	bne.n	80024ee <__aeabi_dmul+0x2fa>
 80024ec:	e140      	b.n	8002770 <__aeabi_dmul+0x57c>
 80024ee:	1d03      	adds	r3, r0, #4
 80024f0:	4283      	cmp	r3, r0
 80024f2:	41a4      	sbcs	r4, r4
 80024f4:	0018      	movs	r0, r3
 80024f6:	4264      	negs	r4, r4
 80024f8:	0761      	lsls	r1, r4, #29
 80024fa:	0264      	lsls	r4, r4, #9
 80024fc:	0b24      	lsrs	r4, r4, #12
 80024fe:	08c2      	lsrs	r2, r0, #3
 8002500:	2300      	movs	r3, #0
 8002502:	430a      	orrs	r2, r1
 8002504:	e6cc      	b.n	80022a0 <__aeabi_dmul+0xac>
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	000007ff 	.word	0x000007ff
 800250c:	fffffc01 	.word	0xfffffc01
 8002510:	000003ff 	.word	0x000003ff
 8002514:	feffffff 	.word	0xfeffffff
 8002518:	000007fe 	.word	0x000007fe
 800251c:	fffffc0d 	.word	0xfffffc0d
 8002520:	0000043e 	.word	0x0000043e
 8002524:	4649      	mov	r1, r9
 8002526:	464a      	mov	r2, r9
 8002528:	0409      	lsls	r1, r1, #16
 800252a:	0c09      	lsrs	r1, r1, #16
 800252c:	000d      	movs	r5, r1
 800252e:	0c16      	lsrs	r6, r2, #16
 8002530:	0c02      	lsrs	r2, r0, #16
 8002532:	0400      	lsls	r0, r0, #16
 8002534:	0c00      	lsrs	r0, r0, #16
 8002536:	4345      	muls	r5, r0
 8002538:	46ac      	mov	ip, r5
 800253a:	0005      	movs	r5, r0
 800253c:	4375      	muls	r5, r6
 800253e:	46a8      	mov	r8, r5
 8002540:	0015      	movs	r5, r2
 8002542:	000f      	movs	r7, r1
 8002544:	4375      	muls	r5, r6
 8002546:	9200      	str	r2, [sp, #0]
 8002548:	9502      	str	r5, [sp, #8]
 800254a:	002a      	movs	r2, r5
 800254c:	9d00      	ldr	r5, [sp, #0]
 800254e:	436f      	muls	r7, r5
 8002550:	4665      	mov	r5, ip
 8002552:	0c2d      	lsrs	r5, r5, #16
 8002554:	46a9      	mov	r9, r5
 8002556:	4447      	add	r7, r8
 8002558:	444f      	add	r7, r9
 800255a:	45b8      	cmp	r8, r7
 800255c:	d905      	bls.n	800256a <__aeabi_dmul+0x376>
 800255e:	0015      	movs	r5, r2
 8002560:	2280      	movs	r2, #128	@ 0x80
 8002562:	0252      	lsls	r2, r2, #9
 8002564:	4690      	mov	r8, r2
 8002566:	4445      	add	r5, r8
 8002568:	9502      	str	r5, [sp, #8]
 800256a:	0c3d      	lsrs	r5, r7, #16
 800256c:	9503      	str	r5, [sp, #12]
 800256e:	4665      	mov	r5, ip
 8002570:	042d      	lsls	r5, r5, #16
 8002572:	043f      	lsls	r7, r7, #16
 8002574:	0c2d      	lsrs	r5, r5, #16
 8002576:	46ac      	mov	ip, r5
 8002578:	003d      	movs	r5, r7
 800257a:	4465      	add	r5, ip
 800257c:	9504      	str	r5, [sp, #16]
 800257e:	0c25      	lsrs	r5, r4, #16
 8002580:	0424      	lsls	r4, r4, #16
 8002582:	0c24      	lsrs	r4, r4, #16
 8002584:	46ac      	mov	ip, r5
 8002586:	0025      	movs	r5, r4
 8002588:	4375      	muls	r5, r6
 800258a:	46a8      	mov	r8, r5
 800258c:	4665      	mov	r5, ip
 800258e:	000f      	movs	r7, r1
 8002590:	4369      	muls	r1, r5
 8002592:	4441      	add	r1, r8
 8002594:	4689      	mov	r9, r1
 8002596:	4367      	muls	r7, r4
 8002598:	0c39      	lsrs	r1, r7, #16
 800259a:	4449      	add	r1, r9
 800259c:	436e      	muls	r6, r5
 800259e:	4588      	cmp	r8, r1
 80025a0:	d903      	bls.n	80025aa <__aeabi_dmul+0x3b6>
 80025a2:	2280      	movs	r2, #128	@ 0x80
 80025a4:	0252      	lsls	r2, r2, #9
 80025a6:	4690      	mov	r8, r2
 80025a8:	4446      	add	r6, r8
 80025aa:	0c0d      	lsrs	r5, r1, #16
 80025ac:	46a8      	mov	r8, r5
 80025ae:	0035      	movs	r5, r6
 80025b0:	4445      	add	r5, r8
 80025b2:	9505      	str	r5, [sp, #20]
 80025b4:	9d03      	ldr	r5, [sp, #12]
 80025b6:	043f      	lsls	r7, r7, #16
 80025b8:	46a8      	mov	r8, r5
 80025ba:	0c3f      	lsrs	r7, r7, #16
 80025bc:	0409      	lsls	r1, r1, #16
 80025be:	19c9      	adds	r1, r1, r7
 80025c0:	4488      	add	r8, r1
 80025c2:	4645      	mov	r5, r8
 80025c4:	9503      	str	r5, [sp, #12]
 80025c6:	4655      	mov	r5, sl
 80025c8:	042e      	lsls	r6, r5, #16
 80025ca:	0c36      	lsrs	r6, r6, #16
 80025cc:	0c2f      	lsrs	r7, r5, #16
 80025ce:	0035      	movs	r5, r6
 80025d0:	4345      	muls	r5, r0
 80025d2:	4378      	muls	r0, r7
 80025d4:	4681      	mov	r9, r0
 80025d6:	0038      	movs	r0, r7
 80025d8:	46a8      	mov	r8, r5
 80025da:	0c2d      	lsrs	r5, r5, #16
 80025dc:	46aa      	mov	sl, r5
 80025de:	9a00      	ldr	r2, [sp, #0]
 80025e0:	4350      	muls	r0, r2
 80025e2:	4372      	muls	r2, r6
 80025e4:	444a      	add	r2, r9
 80025e6:	4452      	add	r2, sl
 80025e8:	4591      	cmp	r9, r2
 80025ea:	d903      	bls.n	80025f4 <__aeabi_dmul+0x400>
 80025ec:	2580      	movs	r5, #128	@ 0x80
 80025ee:	026d      	lsls	r5, r5, #9
 80025f0:	46a9      	mov	r9, r5
 80025f2:	4448      	add	r0, r9
 80025f4:	0c15      	lsrs	r5, r2, #16
 80025f6:	46a9      	mov	r9, r5
 80025f8:	4645      	mov	r5, r8
 80025fa:	042d      	lsls	r5, r5, #16
 80025fc:	0c2d      	lsrs	r5, r5, #16
 80025fe:	46a8      	mov	r8, r5
 8002600:	4665      	mov	r5, ip
 8002602:	437d      	muls	r5, r7
 8002604:	0412      	lsls	r2, r2, #16
 8002606:	4448      	add	r0, r9
 8002608:	4490      	add	r8, r2
 800260a:	46a9      	mov	r9, r5
 800260c:	0032      	movs	r2, r6
 800260e:	4665      	mov	r5, ip
 8002610:	4362      	muls	r2, r4
 8002612:	436e      	muls	r6, r5
 8002614:	437c      	muls	r4, r7
 8002616:	0c17      	lsrs	r7, r2, #16
 8002618:	1936      	adds	r6, r6, r4
 800261a:	19bf      	adds	r7, r7, r6
 800261c:	42bc      	cmp	r4, r7
 800261e:	d903      	bls.n	8002628 <__aeabi_dmul+0x434>
 8002620:	2480      	movs	r4, #128	@ 0x80
 8002622:	0264      	lsls	r4, r4, #9
 8002624:	46a4      	mov	ip, r4
 8002626:	44e1      	add	r9, ip
 8002628:	9c02      	ldr	r4, [sp, #8]
 800262a:	9e03      	ldr	r6, [sp, #12]
 800262c:	46a4      	mov	ip, r4
 800262e:	9d05      	ldr	r5, [sp, #20]
 8002630:	4466      	add	r6, ip
 8002632:	428e      	cmp	r6, r1
 8002634:	4189      	sbcs	r1, r1
 8002636:	46ac      	mov	ip, r5
 8002638:	0412      	lsls	r2, r2, #16
 800263a:	043c      	lsls	r4, r7, #16
 800263c:	0c12      	lsrs	r2, r2, #16
 800263e:	18a2      	adds	r2, r4, r2
 8002640:	4462      	add	r2, ip
 8002642:	4249      	negs	r1, r1
 8002644:	1854      	adds	r4, r2, r1
 8002646:	4446      	add	r6, r8
 8002648:	46a4      	mov	ip, r4
 800264a:	4546      	cmp	r6, r8
 800264c:	41a4      	sbcs	r4, r4
 800264e:	4682      	mov	sl, r0
 8002650:	4264      	negs	r4, r4
 8002652:	46a0      	mov	r8, r4
 8002654:	42aa      	cmp	r2, r5
 8002656:	4192      	sbcs	r2, r2
 8002658:	458c      	cmp	ip, r1
 800265a:	4189      	sbcs	r1, r1
 800265c:	44e2      	add	sl, ip
 800265e:	44d0      	add	r8, sl
 8002660:	4249      	negs	r1, r1
 8002662:	4252      	negs	r2, r2
 8002664:	430a      	orrs	r2, r1
 8002666:	45a0      	cmp	r8, r4
 8002668:	41a4      	sbcs	r4, r4
 800266a:	4582      	cmp	sl, r0
 800266c:	4189      	sbcs	r1, r1
 800266e:	4264      	negs	r4, r4
 8002670:	4249      	negs	r1, r1
 8002672:	430c      	orrs	r4, r1
 8002674:	4641      	mov	r1, r8
 8002676:	0c3f      	lsrs	r7, r7, #16
 8002678:	19d2      	adds	r2, r2, r7
 800267a:	1912      	adds	r2, r2, r4
 800267c:	0dcc      	lsrs	r4, r1, #23
 800267e:	9904      	ldr	r1, [sp, #16]
 8002680:	0270      	lsls	r0, r6, #9
 8002682:	4308      	orrs	r0, r1
 8002684:	1e41      	subs	r1, r0, #1
 8002686:	4188      	sbcs	r0, r1
 8002688:	4641      	mov	r1, r8
 800268a:	444a      	add	r2, r9
 800268c:	0df6      	lsrs	r6, r6, #23
 800268e:	0252      	lsls	r2, r2, #9
 8002690:	4330      	orrs	r0, r6
 8002692:	0249      	lsls	r1, r1, #9
 8002694:	4314      	orrs	r4, r2
 8002696:	4308      	orrs	r0, r1
 8002698:	01d2      	lsls	r2, r2, #7
 800269a:	d535      	bpl.n	8002708 <__aeabi_dmul+0x514>
 800269c:	2201      	movs	r2, #1
 800269e:	0843      	lsrs	r3, r0, #1
 80026a0:	4002      	ands	r2, r0
 80026a2:	4313      	orrs	r3, r2
 80026a4:	07e0      	lsls	r0, r4, #31
 80026a6:	4318      	orrs	r0, r3
 80026a8:	0864      	lsrs	r4, r4, #1
 80026aa:	e634      	b.n	8002316 <__aeabi_dmul+0x122>
 80026ac:	9b00      	ldr	r3, [sp, #0]
 80026ae:	46a2      	mov	sl, r4
 80026b0:	469b      	mov	fp, r3
 80026b2:	4681      	mov	r9, r0
 80026b4:	2480      	movs	r4, #128	@ 0x80
 80026b6:	4653      	mov	r3, sl
 80026b8:	0324      	lsls	r4, r4, #12
 80026ba:	431c      	orrs	r4, r3
 80026bc:	0324      	lsls	r4, r4, #12
 80026be:	464a      	mov	r2, r9
 80026c0:	4b2e      	ldr	r3, [pc, #184]	@ (800277c <__aeabi_dmul+0x588>)
 80026c2:	0b24      	lsrs	r4, r4, #12
 80026c4:	e5ec      	b.n	80022a0 <__aeabi_dmul+0xac>
 80026c6:	f000 fd75 	bl	80031b4 <__clzsi2>
 80026ca:	2315      	movs	r3, #21
 80026cc:	469c      	mov	ip, r3
 80026ce:	4484      	add	ip, r0
 80026d0:	0002      	movs	r2, r0
 80026d2:	4663      	mov	r3, ip
 80026d4:	3220      	adds	r2, #32
 80026d6:	2b1c      	cmp	r3, #28
 80026d8:	dc00      	bgt.n	80026dc <__aeabi_dmul+0x4e8>
 80026da:	e684      	b.n	80023e6 <__aeabi_dmul+0x1f2>
 80026dc:	2300      	movs	r3, #0
 80026de:	4699      	mov	r9, r3
 80026e0:	0023      	movs	r3, r4
 80026e2:	3808      	subs	r0, #8
 80026e4:	4083      	lsls	r3, r0
 80026e6:	469a      	mov	sl, r3
 80026e8:	e68e      	b.n	8002408 <__aeabi_dmul+0x214>
 80026ea:	f000 fd63 	bl	80031b4 <__clzsi2>
 80026ee:	0002      	movs	r2, r0
 80026f0:	0003      	movs	r3, r0
 80026f2:	3215      	adds	r2, #21
 80026f4:	3320      	adds	r3, #32
 80026f6:	2a1c      	cmp	r2, #28
 80026f8:	dc00      	bgt.n	80026fc <__aeabi_dmul+0x508>
 80026fa:	e64e      	b.n	800239a <__aeabi_dmul+0x1a6>
 80026fc:	0002      	movs	r2, r0
 80026fe:	0034      	movs	r4, r6
 8002700:	3a08      	subs	r2, #8
 8002702:	2000      	movs	r0, #0
 8002704:	4094      	lsls	r4, r2
 8002706:	e652      	b.n	80023ae <__aeabi_dmul+0x1ba>
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	e604      	b.n	8002316 <__aeabi_dmul+0x122>
 800270c:	4b1c      	ldr	r3, [pc, #112]	@ (8002780 <__aeabi_dmul+0x58c>)
 800270e:	0021      	movs	r1, r4
 8002710:	469c      	mov	ip, r3
 8002712:	0003      	movs	r3, r0
 8002714:	9d01      	ldr	r5, [sp, #4]
 8002716:	40d3      	lsrs	r3, r2
 8002718:	4465      	add	r5, ip
 800271a:	40a9      	lsls	r1, r5
 800271c:	4319      	orrs	r1, r3
 800271e:	0003      	movs	r3, r0
 8002720:	40ab      	lsls	r3, r5
 8002722:	1e58      	subs	r0, r3, #1
 8002724:	4183      	sbcs	r3, r0
 8002726:	4319      	orrs	r1, r3
 8002728:	0008      	movs	r0, r1
 800272a:	40d4      	lsrs	r4, r2
 800272c:	074b      	lsls	r3, r1, #29
 800272e:	d009      	beq.n	8002744 <__aeabi_dmul+0x550>
 8002730:	230f      	movs	r3, #15
 8002732:	400b      	ands	r3, r1
 8002734:	2b04      	cmp	r3, #4
 8002736:	d005      	beq.n	8002744 <__aeabi_dmul+0x550>
 8002738:	1d0b      	adds	r3, r1, #4
 800273a:	428b      	cmp	r3, r1
 800273c:	4180      	sbcs	r0, r0
 800273e:	4240      	negs	r0, r0
 8002740:	1824      	adds	r4, r4, r0
 8002742:	0018      	movs	r0, r3
 8002744:	0223      	lsls	r3, r4, #8
 8002746:	d400      	bmi.n	800274a <__aeabi_dmul+0x556>
 8002748:	e6d6      	b.n	80024f8 <__aeabi_dmul+0x304>
 800274a:	2301      	movs	r3, #1
 800274c:	2400      	movs	r4, #0
 800274e:	2200      	movs	r2, #0
 8002750:	e5a6      	b.n	80022a0 <__aeabi_dmul+0xac>
 8002752:	290f      	cmp	r1, #15
 8002754:	d1aa      	bne.n	80026ac <__aeabi_dmul+0x4b8>
 8002756:	2380      	movs	r3, #128	@ 0x80
 8002758:	4652      	mov	r2, sl
 800275a:	031b      	lsls	r3, r3, #12
 800275c:	421a      	tst	r2, r3
 800275e:	d0a9      	beq.n	80026b4 <__aeabi_dmul+0x4c0>
 8002760:	421c      	tst	r4, r3
 8002762:	d1a7      	bne.n	80026b4 <__aeabi_dmul+0x4c0>
 8002764:	431c      	orrs	r4, r3
 8002766:	9b00      	ldr	r3, [sp, #0]
 8002768:	0002      	movs	r2, r0
 800276a:	469b      	mov	fp, r3
 800276c:	4b03      	ldr	r3, [pc, #12]	@ (800277c <__aeabi_dmul+0x588>)
 800276e:	e597      	b.n	80022a0 <__aeabi_dmul+0xac>
 8002770:	2400      	movs	r4, #0
 8002772:	e6c1      	b.n	80024f8 <__aeabi_dmul+0x304>
 8002774:	2400      	movs	r4, #0
 8002776:	4b01      	ldr	r3, [pc, #4]	@ (800277c <__aeabi_dmul+0x588>)
 8002778:	0022      	movs	r2, r4
 800277a:	e591      	b.n	80022a0 <__aeabi_dmul+0xac>
 800277c:	000007ff 	.word	0x000007ff
 8002780:	0000041e 	.word	0x0000041e

08002784 <__aeabi_dsub>:
 8002784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002786:	464e      	mov	r6, r9
 8002788:	4645      	mov	r5, r8
 800278a:	46de      	mov	lr, fp
 800278c:	4657      	mov	r7, sl
 800278e:	b5e0      	push	{r5, r6, r7, lr}
 8002790:	b085      	sub	sp, #20
 8002792:	9000      	str	r0, [sp, #0]
 8002794:	9101      	str	r1, [sp, #4]
 8002796:	030c      	lsls	r4, r1, #12
 8002798:	004f      	lsls	r7, r1, #1
 800279a:	0fce      	lsrs	r6, r1, #31
 800279c:	0a61      	lsrs	r1, r4, #9
 800279e:	9c00      	ldr	r4, [sp, #0]
 80027a0:	46b0      	mov	r8, r6
 80027a2:	0f64      	lsrs	r4, r4, #29
 80027a4:	430c      	orrs	r4, r1
 80027a6:	9900      	ldr	r1, [sp, #0]
 80027a8:	0d7f      	lsrs	r7, r7, #21
 80027aa:	00c8      	lsls	r0, r1, #3
 80027ac:	0011      	movs	r1, r2
 80027ae:	001a      	movs	r2, r3
 80027b0:	031b      	lsls	r3, r3, #12
 80027b2:	469c      	mov	ip, r3
 80027b4:	9100      	str	r1, [sp, #0]
 80027b6:	9201      	str	r2, [sp, #4]
 80027b8:	0051      	lsls	r1, r2, #1
 80027ba:	0d4b      	lsrs	r3, r1, #21
 80027bc:	4699      	mov	r9, r3
 80027be:	9b01      	ldr	r3, [sp, #4]
 80027c0:	9d00      	ldr	r5, [sp, #0]
 80027c2:	0fd9      	lsrs	r1, r3, #31
 80027c4:	4663      	mov	r3, ip
 80027c6:	0f6a      	lsrs	r2, r5, #29
 80027c8:	0a5b      	lsrs	r3, r3, #9
 80027ca:	4313      	orrs	r3, r2
 80027cc:	00ea      	lsls	r2, r5, #3
 80027ce:	4694      	mov	ip, r2
 80027d0:	4693      	mov	fp, r2
 80027d2:	4ac1      	ldr	r2, [pc, #772]	@ (8002ad8 <__aeabi_dsub+0x354>)
 80027d4:	9003      	str	r0, [sp, #12]
 80027d6:	9302      	str	r3, [sp, #8]
 80027d8:	4591      	cmp	r9, r2
 80027da:	d100      	bne.n	80027de <__aeabi_dsub+0x5a>
 80027dc:	e0cd      	b.n	800297a <__aeabi_dsub+0x1f6>
 80027de:	2501      	movs	r5, #1
 80027e0:	4069      	eors	r1, r5
 80027e2:	464d      	mov	r5, r9
 80027e4:	1b7d      	subs	r5, r7, r5
 80027e6:	46aa      	mov	sl, r5
 80027e8:	428e      	cmp	r6, r1
 80027ea:	d100      	bne.n	80027ee <__aeabi_dsub+0x6a>
 80027ec:	e080      	b.n	80028f0 <__aeabi_dsub+0x16c>
 80027ee:	2d00      	cmp	r5, #0
 80027f0:	dc00      	bgt.n	80027f4 <__aeabi_dsub+0x70>
 80027f2:	e335      	b.n	8002e60 <__aeabi_dsub+0x6dc>
 80027f4:	4649      	mov	r1, r9
 80027f6:	2900      	cmp	r1, #0
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x78>
 80027fa:	e0df      	b.n	80029bc <__aeabi_dsub+0x238>
 80027fc:	4297      	cmp	r7, r2
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x7e>
 8002800:	e194      	b.n	8002b2c <__aeabi_dsub+0x3a8>
 8002802:	4652      	mov	r2, sl
 8002804:	2501      	movs	r5, #1
 8002806:	2a38      	cmp	r2, #56	@ 0x38
 8002808:	dc19      	bgt.n	800283e <__aeabi_dsub+0xba>
 800280a:	2280      	movs	r2, #128	@ 0x80
 800280c:	9b02      	ldr	r3, [sp, #8]
 800280e:	0412      	lsls	r2, r2, #16
 8002810:	4313      	orrs	r3, r2
 8002812:	9302      	str	r3, [sp, #8]
 8002814:	4652      	mov	r2, sl
 8002816:	2a1f      	cmp	r2, #31
 8002818:	dd00      	ble.n	800281c <__aeabi_dsub+0x98>
 800281a:	e1e3      	b.n	8002be4 <__aeabi_dsub+0x460>
 800281c:	4653      	mov	r3, sl
 800281e:	2220      	movs	r2, #32
 8002820:	4661      	mov	r1, ip
 8002822:	9d02      	ldr	r5, [sp, #8]
 8002824:	1ad2      	subs	r2, r2, r3
 8002826:	4095      	lsls	r5, r2
 8002828:	40d9      	lsrs	r1, r3
 800282a:	430d      	orrs	r5, r1
 800282c:	4661      	mov	r1, ip
 800282e:	4091      	lsls	r1, r2
 8002830:	000a      	movs	r2, r1
 8002832:	1e51      	subs	r1, r2, #1
 8002834:	418a      	sbcs	r2, r1
 8002836:	4315      	orrs	r5, r2
 8002838:	9a02      	ldr	r2, [sp, #8]
 800283a:	40da      	lsrs	r2, r3
 800283c:	1aa4      	subs	r4, r4, r2
 800283e:	1b45      	subs	r5, r0, r5
 8002840:	42a8      	cmp	r0, r5
 8002842:	4180      	sbcs	r0, r0
 8002844:	4240      	negs	r0, r0
 8002846:	1a24      	subs	r4, r4, r0
 8002848:	0223      	lsls	r3, r4, #8
 800284a:	d400      	bmi.n	800284e <__aeabi_dsub+0xca>
 800284c:	e13d      	b.n	8002aca <__aeabi_dsub+0x346>
 800284e:	0264      	lsls	r4, r4, #9
 8002850:	0a64      	lsrs	r4, r4, #9
 8002852:	2c00      	cmp	r4, #0
 8002854:	d100      	bne.n	8002858 <__aeabi_dsub+0xd4>
 8002856:	e147      	b.n	8002ae8 <__aeabi_dsub+0x364>
 8002858:	0020      	movs	r0, r4
 800285a:	f000 fcab 	bl	80031b4 <__clzsi2>
 800285e:	0003      	movs	r3, r0
 8002860:	3b08      	subs	r3, #8
 8002862:	2120      	movs	r1, #32
 8002864:	0028      	movs	r0, r5
 8002866:	1aca      	subs	r2, r1, r3
 8002868:	40d0      	lsrs	r0, r2
 800286a:	409c      	lsls	r4, r3
 800286c:	0002      	movs	r2, r0
 800286e:	409d      	lsls	r5, r3
 8002870:	4322      	orrs	r2, r4
 8002872:	429f      	cmp	r7, r3
 8002874:	dd00      	ble.n	8002878 <__aeabi_dsub+0xf4>
 8002876:	e177      	b.n	8002b68 <__aeabi_dsub+0x3e4>
 8002878:	1bd8      	subs	r0, r3, r7
 800287a:	3001      	adds	r0, #1
 800287c:	1a09      	subs	r1, r1, r0
 800287e:	002c      	movs	r4, r5
 8002880:	408d      	lsls	r5, r1
 8002882:	40c4      	lsrs	r4, r0
 8002884:	1e6b      	subs	r3, r5, #1
 8002886:	419d      	sbcs	r5, r3
 8002888:	0013      	movs	r3, r2
 800288a:	40c2      	lsrs	r2, r0
 800288c:	408b      	lsls	r3, r1
 800288e:	4325      	orrs	r5, r4
 8002890:	2700      	movs	r7, #0
 8002892:	0014      	movs	r4, r2
 8002894:	431d      	orrs	r5, r3
 8002896:	076b      	lsls	r3, r5, #29
 8002898:	d009      	beq.n	80028ae <__aeabi_dsub+0x12a>
 800289a:	230f      	movs	r3, #15
 800289c:	402b      	ands	r3, r5
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d005      	beq.n	80028ae <__aeabi_dsub+0x12a>
 80028a2:	1d2b      	adds	r3, r5, #4
 80028a4:	42ab      	cmp	r3, r5
 80028a6:	41ad      	sbcs	r5, r5
 80028a8:	426d      	negs	r5, r5
 80028aa:	1964      	adds	r4, r4, r5
 80028ac:	001d      	movs	r5, r3
 80028ae:	0223      	lsls	r3, r4, #8
 80028b0:	d400      	bmi.n	80028b4 <__aeabi_dsub+0x130>
 80028b2:	e140      	b.n	8002b36 <__aeabi_dsub+0x3b2>
 80028b4:	4a88      	ldr	r2, [pc, #544]	@ (8002ad8 <__aeabi_dsub+0x354>)
 80028b6:	3701      	adds	r7, #1
 80028b8:	4297      	cmp	r7, r2
 80028ba:	d100      	bne.n	80028be <__aeabi_dsub+0x13a>
 80028bc:	e101      	b.n	8002ac2 <__aeabi_dsub+0x33e>
 80028be:	2601      	movs	r6, #1
 80028c0:	4643      	mov	r3, r8
 80028c2:	4986      	ldr	r1, [pc, #536]	@ (8002adc <__aeabi_dsub+0x358>)
 80028c4:	08ed      	lsrs	r5, r5, #3
 80028c6:	4021      	ands	r1, r4
 80028c8:	074a      	lsls	r2, r1, #29
 80028ca:	432a      	orrs	r2, r5
 80028cc:	057c      	lsls	r4, r7, #21
 80028ce:	024d      	lsls	r5, r1, #9
 80028d0:	0b2d      	lsrs	r5, r5, #12
 80028d2:	0d64      	lsrs	r4, r4, #21
 80028d4:	401e      	ands	r6, r3
 80028d6:	0524      	lsls	r4, r4, #20
 80028d8:	432c      	orrs	r4, r5
 80028da:	07f6      	lsls	r6, r6, #31
 80028dc:	4334      	orrs	r4, r6
 80028de:	0010      	movs	r0, r2
 80028e0:	0021      	movs	r1, r4
 80028e2:	b005      	add	sp, #20
 80028e4:	bcf0      	pop	{r4, r5, r6, r7}
 80028e6:	46bb      	mov	fp, r7
 80028e8:	46b2      	mov	sl, r6
 80028ea:	46a9      	mov	r9, r5
 80028ec:	46a0      	mov	r8, r4
 80028ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f0:	2d00      	cmp	r5, #0
 80028f2:	dc00      	bgt.n	80028f6 <__aeabi_dsub+0x172>
 80028f4:	e2d0      	b.n	8002e98 <__aeabi_dsub+0x714>
 80028f6:	4649      	mov	r1, r9
 80028f8:	2900      	cmp	r1, #0
 80028fa:	d000      	beq.n	80028fe <__aeabi_dsub+0x17a>
 80028fc:	e0d4      	b.n	8002aa8 <__aeabi_dsub+0x324>
 80028fe:	4661      	mov	r1, ip
 8002900:	9b02      	ldr	r3, [sp, #8]
 8002902:	4319      	orrs	r1, r3
 8002904:	d100      	bne.n	8002908 <__aeabi_dsub+0x184>
 8002906:	e12b      	b.n	8002b60 <__aeabi_dsub+0x3dc>
 8002908:	1e69      	subs	r1, r5, #1
 800290a:	2d01      	cmp	r5, #1
 800290c:	d100      	bne.n	8002910 <__aeabi_dsub+0x18c>
 800290e:	e1d9      	b.n	8002cc4 <__aeabi_dsub+0x540>
 8002910:	4295      	cmp	r5, r2
 8002912:	d100      	bne.n	8002916 <__aeabi_dsub+0x192>
 8002914:	e10a      	b.n	8002b2c <__aeabi_dsub+0x3a8>
 8002916:	2501      	movs	r5, #1
 8002918:	2938      	cmp	r1, #56	@ 0x38
 800291a:	dc17      	bgt.n	800294c <__aeabi_dsub+0x1c8>
 800291c:	468a      	mov	sl, r1
 800291e:	4653      	mov	r3, sl
 8002920:	2b1f      	cmp	r3, #31
 8002922:	dd00      	ble.n	8002926 <__aeabi_dsub+0x1a2>
 8002924:	e1e7      	b.n	8002cf6 <__aeabi_dsub+0x572>
 8002926:	2220      	movs	r2, #32
 8002928:	1ad2      	subs	r2, r2, r3
 800292a:	9b02      	ldr	r3, [sp, #8]
 800292c:	4661      	mov	r1, ip
 800292e:	4093      	lsls	r3, r2
 8002930:	001d      	movs	r5, r3
 8002932:	4653      	mov	r3, sl
 8002934:	40d9      	lsrs	r1, r3
 8002936:	4663      	mov	r3, ip
 8002938:	4093      	lsls	r3, r2
 800293a:	001a      	movs	r2, r3
 800293c:	430d      	orrs	r5, r1
 800293e:	1e51      	subs	r1, r2, #1
 8002940:	418a      	sbcs	r2, r1
 8002942:	4653      	mov	r3, sl
 8002944:	4315      	orrs	r5, r2
 8002946:	9a02      	ldr	r2, [sp, #8]
 8002948:	40da      	lsrs	r2, r3
 800294a:	18a4      	adds	r4, r4, r2
 800294c:	182d      	adds	r5, r5, r0
 800294e:	4285      	cmp	r5, r0
 8002950:	4180      	sbcs	r0, r0
 8002952:	4240      	negs	r0, r0
 8002954:	1824      	adds	r4, r4, r0
 8002956:	0223      	lsls	r3, r4, #8
 8002958:	d400      	bmi.n	800295c <__aeabi_dsub+0x1d8>
 800295a:	e0b6      	b.n	8002aca <__aeabi_dsub+0x346>
 800295c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ad8 <__aeabi_dsub+0x354>)
 800295e:	3701      	adds	r7, #1
 8002960:	429f      	cmp	r7, r3
 8002962:	d100      	bne.n	8002966 <__aeabi_dsub+0x1e2>
 8002964:	e0ad      	b.n	8002ac2 <__aeabi_dsub+0x33e>
 8002966:	2101      	movs	r1, #1
 8002968:	4b5c      	ldr	r3, [pc, #368]	@ (8002adc <__aeabi_dsub+0x358>)
 800296a:	086a      	lsrs	r2, r5, #1
 800296c:	401c      	ands	r4, r3
 800296e:	4029      	ands	r1, r5
 8002970:	430a      	orrs	r2, r1
 8002972:	07e5      	lsls	r5, r4, #31
 8002974:	4315      	orrs	r5, r2
 8002976:	0864      	lsrs	r4, r4, #1
 8002978:	e78d      	b.n	8002896 <__aeabi_dsub+0x112>
 800297a:	4a59      	ldr	r2, [pc, #356]	@ (8002ae0 <__aeabi_dsub+0x35c>)
 800297c:	9b02      	ldr	r3, [sp, #8]
 800297e:	4692      	mov	sl, r2
 8002980:	4662      	mov	r2, ip
 8002982:	44ba      	add	sl, r7
 8002984:	431a      	orrs	r2, r3
 8002986:	d02c      	beq.n	80029e2 <__aeabi_dsub+0x25e>
 8002988:	428e      	cmp	r6, r1
 800298a:	d02e      	beq.n	80029ea <__aeabi_dsub+0x266>
 800298c:	4652      	mov	r2, sl
 800298e:	2a00      	cmp	r2, #0
 8002990:	d060      	beq.n	8002a54 <__aeabi_dsub+0x2d0>
 8002992:	2f00      	cmp	r7, #0
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0x214>
 8002996:	e0db      	b.n	8002b50 <__aeabi_dsub+0x3cc>
 8002998:	4663      	mov	r3, ip
 800299a:	000e      	movs	r6, r1
 800299c:	9c02      	ldr	r4, [sp, #8]
 800299e:	08d8      	lsrs	r0, r3, #3
 80029a0:	0762      	lsls	r2, r4, #29
 80029a2:	4302      	orrs	r2, r0
 80029a4:	08e4      	lsrs	r4, r4, #3
 80029a6:	0013      	movs	r3, r2
 80029a8:	4323      	orrs	r3, r4
 80029aa:	d100      	bne.n	80029ae <__aeabi_dsub+0x22a>
 80029ac:	e254      	b.n	8002e58 <__aeabi_dsub+0x6d4>
 80029ae:	2580      	movs	r5, #128	@ 0x80
 80029b0:	032d      	lsls	r5, r5, #12
 80029b2:	4325      	orrs	r5, r4
 80029b4:	032d      	lsls	r5, r5, #12
 80029b6:	4c48      	ldr	r4, [pc, #288]	@ (8002ad8 <__aeabi_dsub+0x354>)
 80029b8:	0b2d      	lsrs	r5, r5, #12
 80029ba:	e78c      	b.n	80028d6 <__aeabi_dsub+0x152>
 80029bc:	4661      	mov	r1, ip
 80029be:	9b02      	ldr	r3, [sp, #8]
 80029c0:	4319      	orrs	r1, r3
 80029c2:	d100      	bne.n	80029c6 <__aeabi_dsub+0x242>
 80029c4:	e0cc      	b.n	8002b60 <__aeabi_dsub+0x3dc>
 80029c6:	0029      	movs	r1, r5
 80029c8:	3901      	subs	r1, #1
 80029ca:	2d01      	cmp	r5, #1
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x24c>
 80029ce:	e188      	b.n	8002ce2 <__aeabi_dsub+0x55e>
 80029d0:	4295      	cmp	r5, r2
 80029d2:	d100      	bne.n	80029d6 <__aeabi_dsub+0x252>
 80029d4:	e0aa      	b.n	8002b2c <__aeabi_dsub+0x3a8>
 80029d6:	2501      	movs	r5, #1
 80029d8:	2938      	cmp	r1, #56	@ 0x38
 80029da:	dd00      	ble.n	80029de <__aeabi_dsub+0x25a>
 80029dc:	e72f      	b.n	800283e <__aeabi_dsub+0xba>
 80029de:	468a      	mov	sl, r1
 80029e0:	e718      	b.n	8002814 <__aeabi_dsub+0x90>
 80029e2:	2201      	movs	r2, #1
 80029e4:	4051      	eors	r1, r2
 80029e6:	428e      	cmp	r6, r1
 80029e8:	d1d0      	bne.n	800298c <__aeabi_dsub+0x208>
 80029ea:	4653      	mov	r3, sl
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d100      	bne.n	80029f2 <__aeabi_dsub+0x26e>
 80029f0:	e0be      	b.n	8002b70 <__aeabi_dsub+0x3ec>
 80029f2:	2f00      	cmp	r7, #0
 80029f4:	d000      	beq.n	80029f8 <__aeabi_dsub+0x274>
 80029f6:	e138      	b.n	8002c6a <__aeabi_dsub+0x4e6>
 80029f8:	46ca      	mov	sl, r9
 80029fa:	0022      	movs	r2, r4
 80029fc:	4302      	orrs	r2, r0
 80029fe:	d100      	bne.n	8002a02 <__aeabi_dsub+0x27e>
 8002a00:	e1e2      	b.n	8002dc8 <__aeabi_dsub+0x644>
 8002a02:	4653      	mov	r3, sl
 8002a04:	1e59      	subs	r1, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d100      	bne.n	8002a0c <__aeabi_dsub+0x288>
 8002a0a:	e20d      	b.n	8002e28 <__aeabi_dsub+0x6a4>
 8002a0c:	4a32      	ldr	r2, [pc, #200]	@ (8002ad8 <__aeabi_dsub+0x354>)
 8002a0e:	4592      	cmp	sl, r2
 8002a10:	d100      	bne.n	8002a14 <__aeabi_dsub+0x290>
 8002a12:	e1d2      	b.n	8002dba <__aeabi_dsub+0x636>
 8002a14:	2701      	movs	r7, #1
 8002a16:	2938      	cmp	r1, #56	@ 0x38
 8002a18:	dc13      	bgt.n	8002a42 <__aeabi_dsub+0x2be>
 8002a1a:	291f      	cmp	r1, #31
 8002a1c:	dd00      	ble.n	8002a20 <__aeabi_dsub+0x29c>
 8002a1e:	e1ee      	b.n	8002dfe <__aeabi_dsub+0x67a>
 8002a20:	2220      	movs	r2, #32
 8002a22:	9b02      	ldr	r3, [sp, #8]
 8002a24:	1a52      	subs	r2, r2, r1
 8002a26:	0025      	movs	r5, r4
 8002a28:	0007      	movs	r7, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	40cc      	lsrs	r4, r1
 8002a2e:	4090      	lsls	r0, r2
 8002a30:	4095      	lsls	r5, r2
 8002a32:	40cf      	lsrs	r7, r1
 8002a34:	44a2      	add	sl, r4
 8002a36:	1e42      	subs	r2, r0, #1
 8002a38:	4190      	sbcs	r0, r2
 8002a3a:	4653      	mov	r3, sl
 8002a3c:	432f      	orrs	r7, r5
 8002a3e:	4307      	orrs	r7, r0
 8002a40:	9302      	str	r3, [sp, #8]
 8002a42:	003d      	movs	r5, r7
 8002a44:	4465      	add	r5, ip
 8002a46:	4565      	cmp	r5, ip
 8002a48:	4192      	sbcs	r2, r2
 8002a4a:	9b02      	ldr	r3, [sp, #8]
 8002a4c:	4252      	negs	r2, r2
 8002a4e:	464f      	mov	r7, r9
 8002a50:	18d4      	adds	r4, r2, r3
 8002a52:	e780      	b.n	8002956 <__aeabi_dsub+0x1d2>
 8002a54:	4a23      	ldr	r2, [pc, #140]	@ (8002ae4 <__aeabi_dsub+0x360>)
 8002a56:	1c7d      	adds	r5, r7, #1
 8002a58:	4215      	tst	r5, r2
 8002a5a:	d000      	beq.n	8002a5e <__aeabi_dsub+0x2da>
 8002a5c:	e0aa      	b.n	8002bb4 <__aeabi_dsub+0x430>
 8002a5e:	4662      	mov	r2, ip
 8002a60:	0025      	movs	r5, r4
 8002a62:	9b02      	ldr	r3, [sp, #8]
 8002a64:	4305      	orrs	r5, r0
 8002a66:	431a      	orrs	r2, r3
 8002a68:	2f00      	cmp	r7, #0
 8002a6a:	d000      	beq.n	8002a6e <__aeabi_dsub+0x2ea>
 8002a6c:	e0f5      	b.n	8002c5a <__aeabi_dsub+0x4d6>
 8002a6e:	2d00      	cmp	r5, #0
 8002a70:	d100      	bne.n	8002a74 <__aeabi_dsub+0x2f0>
 8002a72:	e16b      	b.n	8002d4c <__aeabi_dsub+0x5c8>
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	d100      	bne.n	8002a7a <__aeabi_dsub+0x2f6>
 8002a78:	e152      	b.n	8002d20 <__aeabi_dsub+0x59c>
 8002a7a:	4663      	mov	r3, ip
 8002a7c:	1ac5      	subs	r5, r0, r3
 8002a7e:	9b02      	ldr	r3, [sp, #8]
 8002a80:	1ae2      	subs	r2, r4, r3
 8002a82:	42a8      	cmp	r0, r5
 8002a84:	419b      	sbcs	r3, r3
 8002a86:	425b      	negs	r3, r3
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	021a      	lsls	r2, r3, #8
 8002a8c:	d400      	bmi.n	8002a90 <__aeabi_dsub+0x30c>
 8002a8e:	e1d5      	b.n	8002e3c <__aeabi_dsub+0x6b8>
 8002a90:	4663      	mov	r3, ip
 8002a92:	1a1d      	subs	r5, r3, r0
 8002a94:	45ac      	cmp	ip, r5
 8002a96:	4192      	sbcs	r2, r2
 8002a98:	2601      	movs	r6, #1
 8002a9a:	9b02      	ldr	r3, [sp, #8]
 8002a9c:	4252      	negs	r2, r2
 8002a9e:	1b1c      	subs	r4, r3, r4
 8002aa0:	4688      	mov	r8, r1
 8002aa2:	1aa4      	subs	r4, r4, r2
 8002aa4:	400e      	ands	r6, r1
 8002aa6:	e6f6      	b.n	8002896 <__aeabi_dsub+0x112>
 8002aa8:	4297      	cmp	r7, r2
 8002aaa:	d03f      	beq.n	8002b2c <__aeabi_dsub+0x3a8>
 8002aac:	4652      	mov	r2, sl
 8002aae:	2501      	movs	r5, #1
 8002ab0:	2a38      	cmp	r2, #56	@ 0x38
 8002ab2:	dd00      	ble.n	8002ab6 <__aeabi_dsub+0x332>
 8002ab4:	e74a      	b.n	800294c <__aeabi_dsub+0x1c8>
 8002ab6:	2280      	movs	r2, #128	@ 0x80
 8002ab8:	9b02      	ldr	r3, [sp, #8]
 8002aba:	0412      	lsls	r2, r2, #16
 8002abc:	4313      	orrs	r3, r2
 8002abe:	9302      	str	r3, [sp, #8]
 8002ac0:	e72d      	b.n	800291e <__aeabi_dsub+0x19a>
 8002ac2:	003c      	movs	r4, r7
 8002ac4:	2500      	movs	r5, #0
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	e705      	b.n	80028d6 <__aeabi_dsub+0x152>
 8002aca:	2307      	movs	r3, #7
 8002acc:	402b      	ands	r3, r5
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d000      	beq.n	8002ad4 <__aeabi_dsub+0x350>
 8002ad2:	e6e2      	b.n	800289a <__aeabi_dsub+0x116>
 8002ad4:	e06b      	b.n	8002bae <__aeabi_dsub+0x42a>
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	000007ff 	.word	0x000007ff
 8002adc:	ff7fffff 	.word	0xff7fffff
 8002ae0:	fffff801 	.word	0xfffff801
 8002ae4:	000007fe 	.word	0x000007fe
 8002ae8:	0028      	movs	r0, r5
 8002aea:	f000 fb63 	bl	80031b4 <__clzsi2>
 8002aee:	0003      	movs	r3, r0
 8002af0:	3318      	adds	r3, #24
 8002af2:	2b1f      	cmp	r3, #31
 8002af4:	dc00      	bgt.n	8002af8 <__aeabi_dsub+0x374>
 8002af6:	e6b4      	b.n	8002862 <__aeabi_dsub+0xde>
 8002af8:	002a      	movs	r2, r5
 8002afa:	3808      	subs	r0, #8
 8002afc:	4082      	lsls	r2, r0
 8002afe:	429f      	cmp	r7, r3
 8002b00:	dd00      	ble.n	8002b04 <__aeabi_dsub+0x380>
 8002b02:	e0b9      	b.n	8002c78 <__aeabi_dsub+0x4f4>
 8002b04:	1bdb      	subs	r3, r3, r7
 8002b06:	1c58      	adds	r0, r3, #1
 8002b08:	281f      	cmp	r0, #31
 8002b0a:	dc00      	bgt.n	8002b0e <__aeabi_dsub+0x38a>
 8002b0c:	e1a0      	b.n	8002e50 <__aeabi_dsub+0x6cc>
 8002b0e:	0015      	movs	r5, r2
 8002b10:	3b1f      	subs	r3, #31
 8002b12:	40dd      	lsrs	r5, r3
 8002b14:	2820      	cmp	r0, #32
 8002b16:	d005      	beq.n	8002b24 <__aeabi_dsub+0x3a0>
 8002b18:	2340      	movs	r3, #64	@ 0x40
 8002b1a:	1a1b      	subs	r3, r3, r0
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	1e53      	subs	r3, r2, #1
 8002b20:	419a      	sbcs	r2, r3
 8002b22:	4315      	orrs	r5, r2
 8002b24:	2307      	movs	r3, #7
 8002b26:	2700      	movs	r7, #0
 8002b28:	402b      	ands	r3, r5
 8002b2a:	e7d0      	b.n	8002ace <__aeabi_dsub+0x34a>
 8002b2c:	08c0      	lsrs	r0, r0, #3
 8002b2e:	0762      	lsls	r2, r4, #29
 8002b30:	4302      	orrs	r2, r0
 8002b32:	08e4      	lsrs	r4, r4, #3
 8002b34:	e737      	b.n	80029a6 <__aeabi_dsub+0x222>
 8002b36:	08ea      	lsrs	r2, r5, #3
 8002b38:	0763      	lsls	r3, r4, #29
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	4bd3      	ldr	r3, [pc, #844]	@ (8002e8c <__aeabi_dsub+0x708>)
 8002b3e:	08e4      	lsrs	r4, r4, #3
 8002b40:	429f      	cmp	r7, r3
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x3c2>
 8002b44:	e72f      	b.n	80029a6 <__aeabi_dsub+0x222>
 8002b46:	0324      	lsls	r4, r4, #12
 8002b48:	0b25      	lsrs	r5, r4, #12
 8002b4a:	057c      	lsls	r4, r7, #21
 8002b4c:	0d64      	lsrs	r4, r4, #21
 8002b4e:	e6c2      	b.n	80028d6 <__aeabi_dsub+0x152>
 8002b50:	46ca      	mov	sl, r9
 8002b52:	0022      	movs	r2, r4
 8002b54:	4302      	orrs	r2, r0
 8002b56:	d158      	bne.n	8002c0a <__aeabi_dsub+0x486>
 8002b58:	4663      	mov	r3, ip
 8002b5a:	000e      	movs	r6, r1
 8002b5c:	9c02      	ldr	r4, [sp, #8]
 8002b5e:	9303      	str	r3, [sp, #12]
 8002b60:	9b03      	ldr	r3, [sp, #12]
 8002b62:	4657      	mov	r7, sl
 8002b64:	08da      	lsrs	r2, r3, #3
 8002b66:	e7e7      	b.n	8002b38 <__aeabi_dsub+0x3b4>
 8002b68:	4cc9      	ldr	r4, [pc, #804]	@ (8002e90 <__aeabi_dsub+0x70c>)
 8002b6a:	1aff      	subs	r7, r7, r3
 8002b6c:	4014      	ands	r4, r2
 8002b6e:	e692      	b.n	8002896 <__aeabi_dsub+0x112>
 8002b70:	4dc8      	ldr	r5, [pc, #800]	@ (8002e94 <__aeabi_dsub+0x710>)
 8002b72:	1c7a      	adds	r2, r7, #1
 8002b74:	422a      	tst	r2, r5
 8002b76:	d000      	beq.n	8002b7a <__aeabi_dsub+0x3f6>
 8002b78:	e084      	b.n	8002c84 <__aeabi_dsub+0x500>
 8002b7a:	0022      	movs	r2, r4
 8002b7c:	4302      	orrs	r2, r0
 8002b7e:	2f00      	cmp	r7, #0
 8002b80:	d000      	beq.n	8002b84 <__aeabi_dsub+0x400>
 8002b82:	e0ef      	b.n	8002d64 <__aeabi_dsub+0x5e0>
 8002b84:	2a00      	cmp	r2, #0
 8002b86:	d100      	bne.n	8002b8a <__aeabi_dsub+0x406>
 8002b88:	e0e5      	b.n	8002d56 <__aeabi_dsub+0x5d2>
 8002b8a:	4662      	mov	r2, ip
 8002b8c:	9902      	ldr	r1, [sp, #8]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	d100      	bne.n	8002b94 <__aeabi_dsub+0x410>
 8002b92:	e0c5      	b.n	8002d20 <__aeabi_dsub+0x59c>
 8002b94:	4663      	mov	r3, ip
 8002b96:	18c5      	adds	r5, r0, r3
 8002b98:	468c      	mov	ip, r1
 8002b9a:	4285      	cmp	r5, r0
 8002b9c:	4180      	sbcs	r0, r0
 8002b9e:	4464      	add	r4, ip
 8002ba0:	4240      	negs	r0, r0
 8002ba2:	1824      	adds	r4, r4, r0
 8002ba4:	0223      	lsls	r3, r4, #8
 8002ba6:	d502      	bpl.n	8002bae <__aeabi_dsub+0x42a>
 8002ba8:	4bb9      	ldr	r3, [pc, #740]	@ (8002e90 <__aeabi_dsub+0x70c>)
 8002baa:	3701      	adds	r7, #1
 8002bac:	401c      	ands	r4, r3
 8002bae:	46ba      	mov	sl, r7
 8002bb0:	9503      	str	r5, [sp, #12]
 8002bb2:	e7d5      	b.n	8002b60 <__aeabi_dsub+0x3dc>
 8002bb4:	4662      	mov	r2, ip
 8002bb6:	1a85      	subs	r5, r0, r2
 8002bb8:	42a8      	cmp	r0, r5
 8002bba:	4192      	sbcs	r2, r2
 8002bbc:	4252      	negs	r2, r2
 8002bbe:	4691      	mov	r9, r2
 8002bc0:	9b02      	ldr	r3, [sp, #8]
 8002bc2:	1ae3      	subs	r3, r4, r3
 8002bc4:	001a      	movs	r2, r3
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	1ad2      	subs	r2, r2, r3
 8002bca:	0013      	movs	r3, r2
 8002bcc:	4691      	mov	r9, r2
 8002bce:	021a      	lsls	r2, r3, #8
 8002bd0:	d46c      	bmi.n	8002cac <__aeabi_dsub+0x528>
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	464c      	mov	r4, r9
 8002bd6:	432a      	orrs	r2, r5
 8002bd8:	d000      	beq.n	8002bdc <__aeabi_dsub+0x458>
 8002bda:	e63a      	b.n	8002852 <__aeabi_dsub+0xce>
 8002bdc:	2600      	movs	r6, #0
 8002bde:	2400      	movs	r4, #0
 8002be0:	2500      	movs	r5, #0
 8002be2:	e678      	b.n	80028d6 <__aeabi_dsub+0x152>
 8002be4:	9902      	ldr	r1, [sp, #8]
 8002be6:	4653      	mov	r3, sl
 8002be8:	000d      	movs	r5, r1
 8002bea:	3a20      	subs	r2, #32
 8002bec:	40d5      	lsrs	r5, r2
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d006      	beq.n	8002c00 <__aeabi_dsub+0x47c>
 8002bf2:	2240      	movs	r2, #64	@ 0x40
 8002bf4:	1ad2      	subs	r2, r2, r3
 8002bf6:	000b      	movs	r3, r1
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	4662      	mov	r2, ip
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	4693      	mov	fp, r2
 8002c00:	465b      	mov	r3, fp
 8002c02:	1e5a      	subs	r2, r3, #1
 8002c04:	4193      	sbcs	r3, r2
 8002c06:	431d      	orrs	r5, r3
 8002c08:	e619      	b.n	800283e <__aeabi_dsub+0xba>
 8002c0a:	4653      	mov	r3, sl
 8002c0c:	1e5a      	subs	r2, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d100      	bne.n	8002c14 <__aeabi_dsub+0x490>
 8002c12:	e0c6      	b.n	8002da2 <__aeabi_dsub+0x61e>
 8002c14:	4e9d      	ldr	r6, [pc, #628]	@ (8002e8c <__aeabi_dsub+0x708>)
 8002c16:	45b2      	cmp	sl, r6
 8002c18:	d100      	bne.n	8002c1c <__aeabi_dsub+0x498>
 8002c1a:	e6bd      	b.n	8002998 <__aeabi_dsub+0x214>
 8002c1c:	4688      	mov	r8, r1
 8002c1e:	000e      	movs	r6, r1
 8002c20:	2501      	movs	r5, #1
 8002c22:	2a38      	cmp	r2, #56	@ 0x38
 8002c24:	dc10      	bgt.n	8002c48 <__aeabi_dsub+0x4c4>
 8002c26:	2a1f      	cmp	r2, #31
 8002c28:	dc7f      	bgt.n	8002d2a <__aeabi_dsub+0x5a6>
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	0025      	movs	r5, r4
 8002c2e:	1a89      	subs	r1, r1, r2
 8002c30:	0007      	movs	r7, r0
 8002c32:	4088      	lsls	r0, r1
 8002c34:	408d      	lsls	r5, r1
 8002c36:	40d7      	lsrs	r7, r2
 8002c38:	40d4      	lsrs	r4, r2
 8002c3a:	1e41      	subs	r1, r0, #1
 8002c3c:	4188      	sbcs	r0, r1
 8002c3e:	9b02      	ldr	r3, [sp, #8]
 8002c40:	433d      	orrs	r5, r7
 8002c42:	1b1b      	subs	r3, r3, r4
 8002c44:	4305      	orrs	r5, r0
 8002c46:	9302      	str	r3, [sp, #8]
 8002c48:	4662      	mov	r2, ip
 8002c4a:	1b55      	subs	r5, r2, r5
 8002c4c:	45ac      	cmp	ip, r5
 8002c4e:	4192      	sbcs	r2, r2
 8002c50:	9b02      	ldr	r3, [sp, #8]
 8002c52:	4252      	negs	r2, r2
 8002c54:	464f      	mov	r7, r9
 8002c56:	1a9c      	subs	r4, r3, r2
 8002c58:	e5f6      	b.n	8002848 <__aeabi_dsub+0xc4>
 8002c5a:	2d00      	cmp	r5, #0
 8002c5c:	d000      	beq.n	8002c60 <__aeabi_dsub+0x4dc>
 8002c5e:	e0b7      	b.n	8002dd0 <__aeabi_dsub+0x64c>
 8002c60:	2a00      	cmp	r2, #0
 8002c62:	d100      	bne.n	8002c66 <__aeabi_dsub+0x4e2>
 8002c64:	e0f0      	b.n	8002e48 <__aeabi_dsub+0x6c4>
 8002c66:	2601      	movs	r6, #1
 8002c68:	400e      	ands	r6, r1
 8002c6a:	4663      	mov	r3, ip
 8002c6c:	9802      	ldr	r0, [sp, #8]
 8002c6e:	08d9      	lsrs	r1, r3, #3
 8002c70:	0742      	lsls	r2, r0, #29
 8002c72:	430a      	orrs	r2, r1
 8002c74:	08c4      	lsrs	r4, r0, #3
 8002c76:	e696      	b.n	80029a6 <__aeabi_dsub+0x222>
 8002c78:	4c85      	ldr	r4, [pc, #532]	@ (8002e90 <__aeabi_dsub+0x70c>)
 8002c7a:	1aff      	subs	r7, r7, r3
 8002c7c:	4014      	ands	r4, r2
 8002c7e:	0762      	lsls	r2, r4, #29
 8002c80:	08e4      	lsrs	r4, r4, #3
 8002c82:	e760      	b.n	8002b46 <__aeabi_dsub+0x3c2>
 8002c84:	4981      	ldr	r1, [pc, #516]	@ (8002e8c <__aeabi_dsub+0x708>)
 8002c86:	428a      	cmp	r2, r1
 8002c88:	d100      	bne.n	8002c8c <__aeabi_dsub+0x508>
 8002c8a:	e0c9      	b.n	8002e20 <__aeabi_dsub+0x69c>
 8002c8c:	4663      	mov	r3, ip
 8002c8e:	18c1      	adds	r1, r0, r3
 8002c90:	4281      	cmp	r1, r0
 8002c92:	4180      	sbcs	r0, r0
 8002c94:	9b02      	ldr	r3, [sp, #8]
 8002c96:	4240      	negs	r0, r0
 8002c98:	18e3      	adds	r3, r4, r3
 8002c9a:	181b      	adds	r3, r3, r0
 8002c9c:	07dd      	lsls	r5, r3, #31
 8002c9e:	085c      	lsrs	r4, r3, #1
 8002ca0:	2307      	movs	r3, #7
 8002ca2:	0849      	lsrs	r1, r1, #1
 8002ca4:	430d      	orrs	r5, r1
 8002ca6:	0017      	movs	r7, r2
 8002ca8:	402b      	ands	r3, r5
 8002caa:	e710      	b.n	8002ace <__aeabi_dsub+0x34a>
 8002cac:	4663      	mov	r3, ip
 8002cae:	1a1d      	subs	r5, r3, r0
 8002cb0:	45ac      	cmp	ip, r5
 8002cb2:	4192      	sbcs	r2, r2
 8002cb4:	2601      	movs	r6, #1
 8002cb6:	9b02      	ldr	r3, [sp, #8]
 8002cb8:	4252      	negs	r2, r2
 8002cba:	1b1c      	subs	r4, r3, r4
 8002cbc:	4688      	mov	r8, r1
 8002cbe:	1aa4      	subs	r4, r4, r2
 8002cc0:	400e      	ands	r6, r1
 8002cc2:	e5c6      	b.n	8002852 <__aeabi_dsub+0xce>
 8002cc4:	4663      	mov	r3, ip
 8002cc6:	18c5      	adds	r5, r0, r3
 8002cc8:	9b02      	ldr	r3, [sp, #8]
 8002cca:	4285      	cmp	r5, r0
 8002ccc:	4180      	sbcs	r0, r0
 8002cce:	469c      	mov	ip, r3
 8002cd0:	4240      	negs	r0, r0
 8002cd2:	4464      	add	r4, ip
 8002cd4:	1824      	adds	r4, r4, r0
 8002cd6:	2701      	movs	r7, #1
 8002cd8:	0223      	lsls	r3, r4, #8
 8002cda:	d400      	bmi.n	8002cde <__aeabi_dsub+0x55a>
 8002cdc:	e6f5      	b.n	8002aca <__aeabi_dsub+0x346>
 8002cde:	2702      	movs	r7, #2
 8002ce0:	e641      	b.n	8002966 <__aeabi_dsub+0x1e2>
 8002ce2:	4663      	mov	r3, ip
 8002ce4:	1ac5      	subs	r5, r0, r3
 8002ce6:	42a8      	cmp	r0, r5
 8002ce8:	4180      	sbcs	r0, r0
 8002cea:	9b02      	ldr	r3, [sp, #8]
 8002cec:	4240      	negs	r0, r0
 8002cee:	1ae4      	subs	r4, r4, r3
 8002cf0:	2701      	movs	r7, #1
 8002cf2:	1a24      	subs	r4, r4, r0
 8002cf4:	e5a8      	b.n	8002848 <__aeabi_dsub+0xc4>
 8002cf6:	9d02      	ldr	r5, [sp, #8]
 8002cf8:	4652      	mov	r2, sl
 8002cfa:	002b      	movs	r3, r5
 8002cfc:	3a20      	subs	r2, #32
 8002cfe:	40d3      	lsrs	r3, r2
 8002d00:	0019      	movs	r1, r3
 8002d02:	4653      	mov	r3, sl
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d006      	beq.n	8002d16 <__aeabi_dsub+0x592>
 8002d08:	2240      	movs	r2, #64	@ 0x40
 8002d0a:	1ad2      	subs	r2, r2, r3
 8002d0c:	002b      	movs	r3, r5
 8002d0e:	4093      	lsls	r3, r2
 8002d10:	4662      	mov	r2, ip
 8002d12:	431a      	orrs	r2, r3
 8002d14:	4693      	mov	fp, r2
 8002d16:	465d      	mov	r5, fp
 8002d18:	1e6b      	subs	r3, r5, #1
 8002d1a:	419d      	sbcs	r5, r3
 8002d1c:	430d      	orrs	r5, r1
 8002d1e:	e615      	b.n	800294c <__aeabi_dsub+0x1c8>
 8002d20:	0762      	lsls	r2, r4, #29
 8002d22:	08c0      	lsrs	r0, r0, #3
 8002d24:	4302      	orrs	r2, r0
 8002d26:	08e4      	lsrs	r4, r4, #3
 8002d28:	e70d      	b.n	8002b46 <__aeabi_dsub+0x3c2>
 8002d2a:	0011      	movs	r1, r2
 8002d2c:	0027      	movs	r7, r4
 8002d2e:	3920      	subs	r1, #32
 8002d30:	40cf      	lsrs	r7, r1
 8002d32:	2a20      	cmp	r2, #32
 8002d34:	d005      	beq.n	8002d42 <__aeabi_dsub+0x5be>
 8002d36:	2140      	movs	r1, #64	@ 0x40
 8002d38:	1a8a      	subs	r2, r1, r2
 8002d3a:	4094      	lsls	r4, r2
 8002d3c:	0025      	movs	r5, r4
 8002d3e:	4305      	orrs	r5, r0
 8002d40:	9503      	str	r5, [sp, #12]
 8002d42:	9d03      	ldr	r5, [sp, #12]
 8002d44:	1e6a      	subs	r2, r5, #1
 8002d46:	4195      	sbcs	r5, r2
 8002d48:	433d      	orrs	r5, r7
 8002d4a:	e77d      	b.n	8002c48 <__aeabi_dsub+0x4c4>
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d100      	bne.n	8002d52 <__aeabi_dsub+0x5ce>
 8002d50:	e744      	b.n	8002bdc <__aeabi_dsub+0x458>
 8002d52:	2601      	movs	r6, #1
 8002d54:	400e      	ands	r6, r1
 8002d56:	4663      	mov	r3, ip
 8002d58:	08d9      	lsrs	r1, r3, #3
 8002d5a:	9b02      	ldr	r3, [sp, #8]
 8002d5c:	075a      	lsls	r2, r3, #29
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	08dc      	lsrs	r4, r3, #3
 8002d62:	e6f0      	b.n	8002b46 <__aeabi_dsub+0x3c2>
 8002d64:	2a00      	cmp	r2, #0
 8002d66:	d028      	beq.n	8002dba <__aeabi_dsub+0x636>
 8002d68:	4662      	mov	r2, ip
 8002d6a:	9f02      	ldr	r7, [sp, #8]
 8002d6c:	08c0      	lsrs	r0, r0, #3
 8002d6e:	433a      	orrs	r2, r7
 8002d70:	d100      	bne.n	8002d74 <__aeabi_dsub+0x5f0>
 8002d72:	e6dc      	b.n	8002b2e <__aeabi_dsub+0x3aa>
 8002d74:	0762      	lsls	r2, r4, #29
 8002d76:	4310      	orrs	r0, r2
 8002d78:	2280      	movs	r2, #128	@ 0x80
 8002d7a:	08e4      	lsrs	r4, r4, #3
 8002d7c:	0312      	lsls	r2, r2, #12
 8002d7e:	4214      	tst	r4, r2
 8002d80:	d009      	beq.n	8002d96 <__aeabi_dsub+0x612>
 8002d82:	08fd      	lsrs	r5, r7, #3
 8002d84:	4215      	tst	r5, r2
 8002d86:	d106      	bne.n	8002d96 <__aeabi_dsub+0x612>
 8002d88:	4663      	mov	r3, ip
 8002d8a:	2601      	movs	r6, #1
 8002d8c:	002c      	movs	r4, r5
 8002d8e:	08d8      	lsrs	r0, r3, #3
 8002d90:	077b      	lsls	r3, r7, #29
 8002d92:	4318      	orrs	r0, r3
 8002d94:	400e      	ands	r6, r1
 8002d96:	0f42      	lsrs	r2, r0, #29
 8002d98:	00c0      	lsls	r0, r0, #3
 8002d9a:	08c0      	lsrs	r0, r0, #3
 8002d9c:	0752      	lsls	r2, r2, #29
 8002d9e:	4302      	orrs	r2, r0
 8002da0:	e601      	b.n	80029a6 <__aeabi_dsub+0x222>
 8002da2:	4663      	mov	r3, ip
 8002da4:	1a1d      	subs	r5, r3, r0
 8002da6:	45ac      	cmp	ip, r5
 8002da8:	4192      	sbcs	r2, r2
 8002daa:	9b02      	ldr	r3, [sp, #8]
 8002dac:	4252      	negs	r2, r2
 8002dae:	1b1c      	subs	r4, r3, r4
 8002db0:	000e      	movs	r6, r1
 8002db2:	4688      	mov	r8, r1
 8002db4:	2701      	movs	r7, #1
 8002db6:	1aa4      	subs	r4, r4, r2
 8002db8:	e546      	b.n	8002848 <__aeabi_dsub+0xc4>
 8002dba:	4663      	mov	r3, ip
 8002dbc:	08d9      	lsrs	r1, r3, #3
 8002dbe:	9b02      	ldr	r3, [sp, #8]
 8002dc0:	075a      	lsls	r2, r3, #29
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	08dc      	lsrs	r4, r3, #3
 8002dc6:	e5ee      	b.n	80029a6 <__aeabi_dsub+0x222>
 8002dc8:	4663      	mov	r3, ip
 8002dca:	9c02      	ldr	r4, [sp, #8]
 8002dcc:	9303      	str	r3, [sp, #12]
 8002dce:	e6c7      	b.n	8002b60 <__aeabi_dsub+0x3dc>
 8002dd0:	08c0      	lsrs	r0, r0, #3
 8002dd2:	2a00      	cmp	r2, #0
 8002dd4:	d100      	bne.n	8002dd8 <__aeabi_dsub+0x654>
 8002dd6:	e6aa      	b.n	8002b2e <__aeabi_dsub+0x3aa>
 8002dd8:	0762      	lsls	r2, r4, #29
 8002dda:	4310      	orrs	r0, r2
 8002ddc:	2280      	movs	r2, #128	@ 0x80
 8002dde:	08e4      	lsrs	r4, r4, #3
 8002de0:	0312      	lsls	r2, r2, #12
 8002de2:	4214      	tst	r4, r2
 8002de4:	d0d7      	beq.n	8002d96 <__aeabi_dsub+0x612>
 8002de6:	9f02      	ldr	r7, [sp, #8]
 8002de8:	08fd      	lsrs	r5, r7, #3
 8002dea:	4215      	tst	r5, r2
 8002dec:	d1d3      	bne.n	8002d96 <__aeabi_dsub+0x612>
 8002dee:	4663      	mov	r3, ip
 8002df0:	2601      	movs	r6, #1
 8002df2:	08d8      	lsrs	r0, r3, #3
 8002df4:	077b      	lsls	r3, r7, #29
 8002df6:	002c      	movs	r4, r5
 8002df8:	4318      	orrs	r0, r3
 8002dfa:	400e      	ands	r6, r1
 8002dfc:	e7cb      	b.n	8002d96 <__aeabi_dsub+0x612>
 8002dfe:	000a      	movs	r2, r1
 8002e00:	0027      	movs	r7, r4
 8002e02:	3a20      	subs	r2, #32
 8002e04:	40d7      	lsrs	r7, r2
 8002e06:	2920      	cmp	r1, #32
 8002e08:	d005      	beq.n	8002e16 <__aeabi_dsub+0x692>
 8002e0a:	2240      	movs	r2, #64	@ 0x40
 8002e0c:	1a52      	subs	r2, r2, r1
 8002e0e:	4094      	lsls	r4, r2
 8002e10:	0025      	movs	r5, r4
 8002e12:	4305      	orrs	r5, r0
 8002e14:	9503      	str	r5, [sp, #12]
 8002e16:	9d03      	ldr	r5, [sp, #12]
 8002e18:	1e6a      	subs	r2, r5, #1
 8002e1a:	4195      	sbcs	r5, r2
 8002e1c:	432f      	orrs	r7, r5
 8002e1e:	e610      	b.n	8002a42 <__aeabi_dsub+0x2be>
 8002e20:	0014      	movs	r4, r2
 8002e22:	2500      	movs	r5, #0
 8002e24:	2200      	movs	r2, #0
 8002e26:	e556      	b.n	80028d6 <__aeabi_dsub+0x152>
 8002e28:	9b02      	ldr	r3, [sp, #8]
 8002e2a:	4460      	add	r0, ip
 8002e2c:	4699      	mov	r9, r3
 8002e2e:	4560      	cmp	r0, ip
 8002e30:	4192      	sbcs	r2, r2
 8002e32:	444c      	add	r4, r9
 8002e34:	4252      	negs	r2, r2
 8002e36:	0005      	movs	r5, r0
 8002e38:	18a4      	adds	r4, r4, r2
 8002e3a:	e74c      	b.n	8002cd6 <__aeabi_dsub+0x552>
 8002e3c:	001a      	movs	r2, r3
 8002e3e:	001c      	movs	r4, r3
 8002e40:	432a      	orrs	r2, r5
 8002e42:	d000      	beq.n	8002e46 <__aeabi_dsub+0x6c2>
 8002e44:	e6b3      	b.n	8002bae <__aeabi_dsub+0x42a>
 8002e46:	e6c9      	b.n	8002bdc <__aeabi_dsub+0x458>
 8002e48:	2480      	movs	r4, #128	@ 0x80
 8002e4a:	2600      	movs	r6, #0
 8002e4c:	0324      	lsls	r4, r4, #12
 8002e4e:	e5ae      	b.n	80029ae <__aeabi_dsub+0x22a>
 8002e50:	2120      	movs	r1, #32
 8002e52:	2500      	movs	r5, #0
 8002e54:	1a09      	subs	r1, r1, r0
 8002e56:	e517      	b.n	8002888 <__aeabi_dsub+0x104>
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2500      	movs	r5, #0
 8002e5c:	4c0b      	ldr	r4, [pc, #44]	@ (8002e8c <__aeabi_dsub+0x708>)
 8002e5e:	e53a      	b.n	80028d6 <__aeabi_dsub+0x152>
 8002e60:	2d00      	cmp	r5, #0
 8002e62:	d100      	bne.n	8002e66 <__aeabi_dsub+0x6e2>
 8002e64:	e5f6      	b.n	8002a54 <__aeabi_dsub+0x2d0>
 8002e66:	464b      	mov	r3, r9
 8002e68:	1bda      	subs	r2, r3, r7
 8002e6a:	4692      	mov	sl, r2
 8002e6c:	2f00      	cmp	r7, #0
 8002e6e:	d100      	bne.n	8002e72 <__aeabi_dsub+0x6ee>
 8002e70:	e66f      	b.n	8002b52 <__aeabi_dsub+0x3ce>
 8002e72:	2a38      	cmp	r2, #56	@ 0x38
 8002e74:	dc05      	bgt.n	8002e82 <__aeabi_dsub+0x6fe>
 8002e76:	2680      	movs	r6, #128	@ 0x80
 8002e78:	0436      	lsls	r6, r6, #16
 8002e7a:	4334      	orrs	r4, r6
 8002e7c:	4688      	mov	r8, r1
 8002e7e:	000e      	movs	r6, r1
 8002e80:	e6d1      	b.n	8002c26 <__aeabi_dsub+0x4a2>
 8002e82:	4688      	mov	r8, r1
 8002e84:	000e      	movs	r6, r1
 8002e86:	2501      	movs	r5, #1
 8002e88:	e6de      	b.n	8002c48 <__aeabi_dsub+0x4c4>
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	000007ff 	.word	0x000007ff
 8002e90:	ff7fffff 	.word	0xff7fffff
 8002e94:	000007fe 	.word	0x000007fe
 8002e98:	2d00      	cmp	r5, #0
 8002e9a:	d100      	bne.n	8002e9e <__aeabi_dsub+0x71a>
 8002e9c:	e668      	b.n	8002b70 <__aeabi_dsub+0x3ec>
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	1bd9      	subs	r1, r3, r7
 8002ea2:	2f00      	cmp	r7, #0
 8002ea4:	d101      	bne.n	8002eaa <__aeabi_dsub+0x726>
 8002ea6:	468a      	mov	sl, r1
 8002ea8:	e5a7      	b.n	80029fa <__aeabi_dsub+0x276>
 8002eaa:	2701      	movs	r7, #1
 8002eac:	2938      	cmp	r1, #56	@ 0x38
 8002eae:	dd00      	ble.n	8002eb2 <__aeabi_dsub+0x72e>
 8002eb0:	e5c7      	b.n	8002a42 <__aeabi_dsub+0x2be>
 8002eb2:	2280      	movs	r2, #128	@ 0x80
 8002eb4:	0412      	lsls	r2, r2, #16
 8002eb6:	4314      	orrs	r4, r2
 8002eb8:	e5af      	b.n	8002a1a <__aeabi_dsub+0x296>
 8002eba:	46c0      	nop			@ (mov r8, r8)

08002ebc <__aeabi_dcmpun>:
 8002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ebe:	46c6      	mov	lr, r8
 8002ec0:	031e      	lsls	r6, r3, #12
 8002ec2:	0b36      	lsrs	r6, r6, #12
 8002ec4:	46b0      	mov	r8, r6
 8002ec6:	4e0d      	ldr	r6, [pc, #52]	@ (8002efc <__aeabi_dcmpun+0x40>)
 8002ec8:	030c      	lsls	r4, r1, #12
 8002eca:	004d      	lsls	r5, r1, #1
 8002ecc:	005f      	lsls	r7, r3, #1
 8002ece:	b500      	push	{lr}
 8002ed0:	0b24      	lsrs	r4, r4, #12
 8002ed2:	0d6d      	lsrs	r5, r5, #21
 8002ed4:	0d7f      	lsrs	r7, r7, #21
 8002ed6:	42b5      	cmp	r5, r6
 8002ed8:	d00b      	beq.n	8002ef2 <__aeabi_dcmpun+0x36>
 8002eda:	4908      	ldr	r1, [pc, #32]	@ (8002efc <__aeabi_dcmpun+0x40>)
 8002edc:	2000      	movs	r0, #0
 8002ede:	428f      	cmp	r7, r1
 8002ee0:	d104      	bne.n	8002eec <__aeabi_dcmpun+0x30>
 8002ee2:	4646      	mov	r6, r8
 8002ee4:	4316      	orrs	r6, r2
 8002ee6:	0030      	movs	r0, r6
 8002ee8:	1e43      	subs	r3, r0, #1
 8002eea:	4198      	sbcs	r0, r3
 8002eec:	bc80      	pop	{r7}
 8002eee:	46b8      	mov	r8, r7
 8002ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef2:	4304      	orrs	r4, r0
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	2c00      	cmp	r4, #0
 8002ef8:	d1f8      	bne.n	8002eec <__aeabi_dcmpun+0x30>
 8002efa:	e7ee      	b.n	8002eda <__aeabi_dcmpun+0x1e>
 8002efc:	000007ff 	.word	0x000007ff

08002f00 <__aeabi_d2iz>:
 8002f00:	000b      	movs	r3, r1
 8002f02:	0002      	movs	r2, r0
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	4d16      	ldr	r5, [pc, #88]	@ (8002f60 <__aeabi_d2iz+0x60>)
 8002f08:	030c      	lsls	r4, r1, #12
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	0049      	lsls	r1, r1, #1
 8002f0e:	2000      	movs	r0, #0
 8002f10:	9200      	str	r2, [sp, #0]
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	0b24      	lsrs	r4, r4, #12
 8002f16:	0d49      	lsrs	r1, r1, #21
 8002f18:	0fde      	lsrs	r6, r3, #31
 8002f1a:	42a9      	cmp	r1, r5
 8002f1c:	dd04      	ble.n	8002f28 <__aeabi_d2iz+0x28>
 8002f1e:	4811      	ldr	r0, [pc, #68]	@ (8002f64 <__aeabi_d2iz+0x64>)
 8002f20:	4281      	cmp	r1, r0
 8002f22:	dd03      	ble.n	8002f2c <__aeabi_d2iz+0x2c>
 8002f24:	4b10      	ldr	r3, [pc, #64]	@ (8002f68 <__aeabi_d2iz+0x68>)
 8002f26:	18f0      	adds	r0, r6, r3
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	2080      	movs	r0, #128	@ 0x80
 8002f2e:	0340      	lsls	r0, r0, #13
 8002f30:	4320      	orrs	r0, r4
 8002f32:	4c0e      	ldr	r4, [pc, #56]	@ (8002f6c <__aeabi_d2iz+0x6c>)
 8002f34:	1a64      	subs	r4, r4, r1
 8002f36:	2c1f      	cmp	r4, #31
 8002f38:	dd08      	ble.n	8002f4c <__aeabi_d2iz+0x4c>
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <__aeabi_d2iz+0x70>)
 8002f3c:	1a5b      	subs	r3, r3, r1
 8002f3e:	40d8      	lsrs	r0, r3
 8002f40:	0003      	movs	r3, r0
 8002f42:	4258      	negs	r0, r3
 8002f44:	2e00      	cmp	r6, #0
 8002f46:	d1ef      	bne.n	8002f28 <__aeabi_d2iz+0x28>
 8002f48:	0018      	movs	r0, r3
 8002f4a:	e7ed      	b.n	8002f28 <__aeabi_d2iz+0x28>
 8002f4c:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <__aeabi_d2iz+0x74>)
 8002f4e:	9a00      	ldr	r2, [sp, #0]
 8002f50:	469c      	mov	ip, r3
 8002f52:	0003      	movs	r3, r0
 8002f54:	4461      	add	r1, ip
 8002f56:	408b      	lsls	r3, r1
 8002f58:	40e2      	lsrs	r2, r4
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	e7f1      	b.n	8002f42 <__aeabi_d2iz+0x42>
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	000003fe 	.word	0x000003fe
 8002f64:	0000041d 	.word	0x0000041d
 8002f68:	7fffffff 	.word	0x7fffffff
 8002f6c:	00000433 	.word	0x00000433
 8002f70:	00000413 	.word	0x00000413
 8002f74:	fffffbed 	.word	0xfffffbed

08002f78 <__aeabi_i2d>:
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d016      	beq.n	8002fac <__aeabi_i2d+0x34>
 8002f7e:	17c3      	asrs	r3, r0, #31
 8002f80:	18c5      	adds	r5, r0, r3
 8002f82:	405d      	eors	r5, r3
 8002f84:	0fc4      	lsrs	r4, r0, #31
 8002f86:	0028      	movs	r0, r5
 8002f88:	f000 f914 	bl	80031b4 <__clzsi2>
 8002f8c:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <__aeabi_i2d+0x58>)
 8002f8e:	1a1b      	subs	r3, r3, r0
 8002f90:	055b      	lsls	r3, r3, #21
 8002f92:	0d5b      	lsrs	r3, r3, #21
 8002f94:	280a      	cmp	r0, #10
 8002f96:	dc14      	bgt.n	8002fc2 <__aeabi_i2d+0x4a>
 8002f98:	0002      	movs	r2, r0
 8002f9a:	002e      	movs	r6, r5
 8002f9c:	3215      	adds	r2, #21
 8002f9e:	4096      	lsls	r6, r2
 8002fa0:	220b      	movs	r2, #11
 8002fa2:	1a12      	subs	r2, r2, r0
 8002fa4:	40d5      	lsrs	r5, r2
 8002fa6:	032d      	lsls	r5, r5, #12
 8002fa8:	0b2d      	lsrs	r5, r5, #12
 8002faa:	e003      	b.n	8002fb4 <__aeabi_i2d+0x3c>
 8002fac:	2400      	movs	r4, #0
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2500      	movs	r5, #0
 8002fb2:	2600      	movs	r6, #0
 8002fb4:	051b      	lsls	r3, r3, #20
 8002fb6:	432b      	orrs	r3, r5
 8002fb8:	07e4      	lsls	r4, r4, #31
 8002fba:	4323      	orrs	r3, r4
 8002fbc:	0030      	movs	r0, r6
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	bd70      	pop	{r4, r5, r6, pc}
 8002fc2:	380b      	subs	r0, #11
 8002fc4:	4085      	lsls	r5, r0
 8002fc6:	032d      	lsls	r5, r5, #12
 8002fc8:	2600      	movs	r6, #0
 8002fca:	0b2d      	lsrs	r5, r5, #12
 8002fcc:	e7f2      	b.n	8002fb4 <__aeabi_i2d+0x3c>
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	0000041e 	.word	0x0000041e

08002fd4 <__aeabi_ui2d>:
 8002fd4:	b510      	push	{r4, lr}
 8002fd6:	1e04      	subs	r4, r0, #0
 8002fd8:	d010      	beq.n	8002ffc <__aeabi_ui2d+0x28>
 8002fda:	f000 f8eb 	bl	80031b4 <__clzsi2>
 8002fde:	4b0e      	ldr	r3, [pc, #56]	@ (8003018 <__aeabi_ui2d+0x44>)
 8002fe0:	1a1b      	subs	r3, r3, r0
 8002fe2:	055b      	lsls	r3, r3, #21
 8002fe4:	0d5b      	lsrs	r3, r3, #21
 8002fe6:	280a      	cmp	r0, #10
 8002fe8:	dc0f      	bgt.n	800300a <__aeabi_ui2d+0x36>
 8002fea:	220b      	movs	r2, #11
 8002fec:	0021      	movs	r1, r4
 8002fee:	1a12      	subs	r2, r2, r0
 8002ff0:	40d1      	lsrs	r1, r2
 8002ff2:	3015      	adds	r0, #21
 8002ff4:	030a      	lsls	r2, r1, #12
 8002ff6:	4084      	lsls	r4, r0
 8002ff8:	0b12      	lsrs	r2, r2, #12
 8002ffa:	e001      	b.n	8003000 <__aeabi_ui2d+0x2c>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2200      	movs	r2, #0
 8003000:	051b      	lsls	r3, r3, #20
 8003002:	4313      	orrs	r3, r2
 8003004:	0020      	movs	r0, r4
 8003006:	0019      	movs	r1, r3
 8003008:	bd10      	pop	{r4, pc}
 800300a:	0022      	movs	r2, r4
 800300c:	380b      	subs	r0, #11
 800300e:	4082      	lsls	r2, r0
 8003010:	0312      	lsls	r2, r2, #12
 8003012:	2400      	movs	r4, #0
 8003014:	0b12      	lsrs	r2, r2, #12
 8003016:	e7f3      	b.n	8003000 <__aeabi_ui2d+0x2c>
 8003018:	0000041e 	.word	0x0000041e

0800301c <__aeabi_f2d>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	0242      	lsls	r2, r0, #9
 8003020:	0043      	lsls	r3, r0, #1
 8003022:	0fc4      	lsrs	r4, r0, #31
 8003024:	20fe      	movs	r0, #254	@ 0xfe
 8003026:	0e1b      	lsrs	r3, r3, #24
 8003028:	1c59      	adds	r1, r3, #1
 800302a:	0a55      	lsrs	r5, r2, #9
 800302c:	4208      	tst	r0, r1
 800302e:	d00c      	beq.n	800304a <__aeabi_f2d+0x2e>
 8003030:	21e0      	movs	r1, #224	@ 0xe0
 8003032:	0089      	lsls	r1, r1, #2
 8003034:	468c      	mov	ip, r1
 8003036:	076d      	lsls	r5, r5, #29
 8003038:	0b12      	lsrs	r2, r2, #12
 800303a:	4463      	add	r3, ip
 800303c:	051b      	lsls	r3, r3, #20
 800303e:	4313      	orrs	r3, r2
 8003040:	07e4      	lsls	r4, r4, #31
 8003042:	4323      	orrs	r3, r4
 8003044:	0028      	movs	r0, r5
 8003046:	0019      	movs	r1, r3
 8003048:	bd70      	pop	{r4, r5, r6, pc}
 800304a:	2b00      	cmp	r3, #0
 800304c:	d114      	bne.n	8003078 <__aeabi_f2d+0x5c>
 800304e:	2d00      	cmp	r5, #0
 8003050:	d01b      	beq.n	800308a <__aeabi_f2d+0x6e>
 8003052:	0028      	movs	r0, r5
 8003054:	f000 f8ae 	bl	80031b4 <__clzsi2>
 8003058:	280a      	cmp	r0, #10
 800305a:	dc1c      	bgt.n	8003096 <__aeabi_f2d+0x7a>
 800305c:	230b      	movs	r3, #11
 800305e:	002a      	movs	r2, r5
 8003060:	1a1b      	subs	r3, r3, r0
 8003062:	40da      	lsrs	r2, r3
 8003064:	0003      	movs	r3, r0
 8003066:	3315      	adds	r3, #21
 8003068:	409d      	lsls	r5, r3
 800306a:	4b0e      	ldr	r3, [pc, #56]	@ (80030a4 <__aeabi_f2d+0x88>)
 800306c:	0312      	lsls	r2, r2, #12
 800306e:	1a1b      	subs	r3, r3, r0
 8003070:	055b      	lsls	r3, r3, #21
 8003072:	0b12      	lsrs	r2, r2, #12
 8003074:	0d5b      	lsrs	r3, r3, #21
 8003076:	e7e1      	b.n	800303c <__aeabi_f2d+0x20>
 8003078:	2d00      	cmp	r5, #0
 800307a:	d009      	beq.n	8003090 <__aeabi_f2d+0x74>
 800307c:	0b13      	lsrs	r3, r2, #12
 800307e:	2280      	movs	r2, #128	@ 0x80
 8003080:	0312      	lsls	r2, r2, #12
 8003082:	431a      	orrs	r2, r3
 8003084:	076d      	lsls	r5, r5, #29
 8003086:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <__aeabi_f2d+0x8c>)
 8003088:	e7d8      	b.n	800303c <__aeabi_f2d+0x20>
 800308a:	2300      	movs	r3, #0
 800308c:	2200      	movs	r2, #0
 800308e:	e7d5      	b.n	800303c <__aeabi_f2d+0x20>
 8003090:	2200      	movs	r2, #0
 8003092:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <__aeabi_f2d+0x8c>)
 8003094:	e7d2      	b.n	800303c <__aeabi_f2d+0x20>
 8003096:	0003      	movs	r3, r0
 8003098:	002a      	movs	r2, r5
 800309a:	3b0b      	subs	r3, #11
 800309c:	409a      	lsls	r2, r3
 800309e:	2500      	movs	r5, #0
 80030a0:	e7e3      	b.n	800306a <__aeabi_f2d+0x4e>
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	00000389 	.word	0x00000389
 80030a8:	000007ff 	.word	0x000007ff

080030ac <__aeabi_d2f>:
 80030ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ae:	004b      	lsls	r3, r1, #1
 80030b0:	030f      	lsls	r7, r1, #12
 80030b2:	0d5b      	lsrs	r3, r3, #21
 80030b4:	4c3b      	ldr	r4, [pc, #236]	@ (80031a4 <__aeabi_d2f+0xf8>)
 80030b6:	0f45      	lsrs	r5, r0, #29
 80030b8:	b083      	sub	sp, #12
 80030ba:	0a7f      	lsrs	r7, r7, #9
 80030bc:	1c5e      	adds	r6, r3, #1
 80030be:	432f      	orrs	r7, r5
 80030c0:	9000      	str	r0, [sp, #0]
 80030c2:	9101      	str	r1, [sp, #4]
 80030c4:	0fca      	lsrs	r2, r1, #31
 80030c6:	00c5      	lsls	r5, r0, #3
 80030c8:	4226      	tst	r6, r4
 80030ca:	d00b      	beq.n	80030e4 <__aeabi_d2f+0x38>
 80030cc:	4936      	ldr	r1, [pc, #216]	@ (80031a8 <__aeabi_d2f+0xfc>)
 80030ce:	185c      	adds	r4, r3, r1
 80030d0:	2cfe      	cmp	r4, #254	@ 0xfe
 80030d2:	dd13      	ble.n	80030fc <__aeabi_d2f+0x50>
 80030d4:	20ff      	movs	r0, #255	@ 0xff
 80030d6:	2300      	movs	r3, #0
 80030d8:	05c0      	lsls	r0, r0, #23
 80030da:	4318      	orrs	r0, r3
 80030dc:	07d2      	lsls	r2, r2, #31
 80030de:	4310      	orrs	r0, r2
 80030e0:	b003      	add	sp, #12
 80030e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <__aeabi_d2f+0x42>
 80030e8:	2000      	movs	r0, #0
 80030ea:	2300      	movs	r3, #0
 80030ec:	e7f4      	b.n	80030d8 <__aeabi_d2f+0x2c>
 80030ee:	433d      	orrs	r5, r7
 80030f0:	d0f0      	beq.n	80030d4 <__aeabi_d2f+0x28>
 80030f2:	2380      	movs	r3, #128	@ 0x80
 80030f4:	03db      	lsls	r3, r3, #15
 80030f6:	20ff      	movs	r0, #255	@ 0xff
 80030f8:	433b      	orrs	r3, r7
 80030fa:	e7ed      	b.n	80030d8 <__aeabi_d2f+0x2c>
 80030fc:	2c00      	cmp	r4, #0
 80030fe:	dd14      	ble.n	800312a <__aeabi_d2f+0x7e>
 8003100:	9b00      	ldr	r3, [sp, #0]
 8003102:	00ff      	lsls	r7, r7, #3
 8003104:	019b      	lsls	r3, r3, #6
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	4183      	sbcs	r3, r0
 800310a:	0f69      	lsrs	r1, r5, #29
 800310c:	433b      	orrs	r3, r7
 800310e:	430b      	orrs	r3, r1
 8003110:	0759      	lsls	r1, r3, #29
 8003112:	d041      	beq.n	8003198 <__aeabi_d2f+0xec>
 8003114:	210f      	movs	r1, #15
 8003116:	4019      	ands	r1, r3
 8003118:	2904      	cmp	r1, #4
 800311a:	d028      	beq.n	800316e <__aeabi_d2f+0xc2>
 800311c:	3304      	adds	r3, #4
 800311e:	0159      	lsls	r1, r3, #5
 8003120:	d525      	bpl.n	800316e <__aeabi_d2f+0xc2>
 8003122:	3401      	adds	r4, #1
 8003124:	2300      	movs	r3, #0
 8003126:	b2e0      	uxtb	r0, r4
 8003128:	e7d6      	b.n	80030d8 <__aeabi_d2f+0x2c>
 800312a:	0021      	movs	r1, r4
 800312c:	3117      	adds	r1, #23
 800312e:	dbdb      	blt.n	80030e8 <__aeabi_d2f+0x3c>
 8003130:	2180      	movs	r1, #128	@ 0x80
 8003132:	201e      	movs	r0, #30
 8003134:	0409      	lsls	r1, r1, #16
 8003136:	4339      	orrs	r1, r7
 8003138:	1b00      	subs	r0, r0, r4
 800313a:	281f      	cmp	r0, #31
 800313c:	dd1b      	ble.n	8003176 <__aeabi_d2f+0xca>
 800313e:	2602      	movs	r6, #2
 8003140:	4276      	negs	r6, r6
 8003142:	1b34      	subs	r4, r6, r4
 8003144:	000e      	movs	r6, r1
 8003146:	40e6      	lsrs	r6, r4
 8003148:	0034      	movs	r4, r6
 800314a:	2820      	cmp	r0, #32
 800314c:	d004      	beq.n	8003158 <__aeabi_d2f+0xac>
 800314e:	4817      	ldr	r0, [pc, #92]	@ (80031ac <__aeabi_d2f+0x100>)
 8003150:	4684      	mov	ip, r0
 8003152:	4463      	add	r3, ip
 8003154:	4099      	lsls	r1, r3
 8003156:	430d      	orrs	r5, r1
 8003158:	002b      	movs	r3, r5
 800315a:	1e59      	subs	r1, r3, #1
 800315c:	418b      	sbcs	r3, r1
 800315e:	4323      	orrs	r3, r4
 8003160:	0759      	lsls	r1, r3, #29
 8003162:	d015      	beq.n	8003190 <__aeabi_d2f+0xe4>
 8003164:	210f      	movs	r1, #15
 8003166:	2400      	movs	r4, #0
 8003168:	4019      	ands	r1, r3
 800316a:	2904      	cmp	r1, #4
 800316c:	d117      	bne.n	800319e <__aeabi_d2f+0xf2>
 800316e:	019b      	lsls	r3, r3, #6
 8003170:	0a5b      	lsrs	r3, r3, #9
 8003172:	b2e0      	uxtb	r0, r4
 8003174:	e7b0      	b.n	80030d8 <__aeabi_d2f+0x2c>
 8003176:	4c0e      	ldr	r4, [pc, #56]	@ (80031b0 <__aeabi_d2f+0x104>)
 8003178:	191c      	adds	r4, r3, r4
 800317a:	002b      	movs	r3, r5
 800317c:	40a5      	lsls	r5, r4
 800317e:	40c3      	lsrs	r3, r0
 8003180:	40a1      	lsls	r1, r4
 8003182:	1e68      	subs	r0, r5, #1
 8003184:	4185      	sbcs	r5, r0
 8003186:	4329      	orrs	r1, r5
 8003188:	430b      	orrs	r3, r1
 800318a:	2400      	movs	r4, #0
 800318c:	0759      	lsls	r1, r3, #29
 800318e:	d1c1      	bne.n	8003114 <__aeabi_d2f+0x68>
 8003190:	019b      	lsls	r3, r3, #6
 8003192:	2000      	movs	r0, #0
 8003194:	0a5b      	lsrs	r3, r3, #9
 8003196:	e79f      	b.n	80030d8 <__aeabi_d2f+0x2c>
 8003198:	08db      	lsrs	r3, r3, #3
 800319a:	b2e0      	uxtb	r0, r4
 800319c:	e79c      	b.n	80030d8 <__aeabi_d2f+0x2c>
 800319e:	3304      	adds	r3, #4
 80031a0:	e7e5      	b.n	800316e <__aeabi_d2f+0xc2>
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	000007fe 	.word	0x000007fe
 80031a8:	fffffc80 	.word	0xfffffc80
 80031ac:	fffffca2 	.word	0xfffffca2
 80031b0:	fffffc82 	.word	0xfffffc82

080031b4 <__clzsi2>:
 80031b4:	211c      	movs	r1, #28
 80031b6:	2301      	movs	r3, #1
 80031b8:	041b      	lsls	r3, r3, #16
 80031ba:	4298      	cmp	r0, r3
 80031bc:	d301      	bcc.n	80031c2 <__clzsi2+0xe>
 80031be:	0c00      	lsrs	r0, r0, #16
 80031c0:	3910      	subs	r1, #16
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	4298      	cmp	r0, r3
 80031c6:	d301      	bcc.n	80031cc <__clzsi2+0x18>
 80031c8:	0a00      	lsrs	r0, r0, #8
 80031ca:	3908      	subs	r1, #8
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	4298      	cmp	r0, r3
 80031d0:	d301      	bcc.n	80031d6 <__clzsi2+0x22>
 80031d2:	0900      	lsrs	r0, r0, #4
 80031d4:	3904      	subs	r1, #4
 80031d6:	a202      	add	r2, pc, #8	@ (adr r2, 80031e0 <__clzsi2+0x2c>)
 80031d8:	5c10      	ldrb	r0, [r2, r0]
 80031da:	1840      	adds	r0, r0, r1
 80031dc:	4770      	bx	lr
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	02020304 	.word	0x02020304
 80031e4:	01010101 	.word	0x01010101
	...

080031f0 <__clzdi2>:
 80031f0:	b510      	push	{r4, lr}
 80031f2:	2900      	cmp	r1, #0
 80031f4:	d103      	bne.n	80031fe <__clzdi2+0xe>
 80031f6:	f7ff ffdd 	bl	80031b4 <__clzsi2>
 80031fa:	3020      	adds	r0, #32
 80031fc:	e002      	b.n	8003204 <__clzdi2+0x14>
 80031fe:	0008      	movs	r0, r1
 8003200:	f7ff ffd8 	bl	80031b4 <__clzsi2>
 8003204:	bd10      	pop	{r4, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)

08003208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320a:	46c6      	mov	lr, r8
 800320c:	b500      	push	{lr}
 800320e:	b0b6      	sub	sp, #216	@ 0xd8
 8003210:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003212:	f002 fc95 	bl	8005b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003216:	f000 fca9 	bl	8003b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800321a:	f000 fd9b 	bl	8003d54 <MX_GPIO_Init>
  MX_ADC_Init();
 800321e:	f000 fd17 	bl	8003c50 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8003222:	f000 fd67 	bl	8003cf4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char msg[128];

  //BEGIN CHECK FOR THRESHOLD VALUE FROM WRITE BOARD
  sprintf(msg, "%.3f\r\n", threshold_value);
 8003226:	4be1      	ldr	r3, [pc, #900]	@ (80035ac <main+0x3a4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1c18      	adds	r0, r3, #0
 800322c:	f7ff fef6 	bl	800301c <__aeabi_f2d>
 8003230:	0002      	movs	r2, r0
 8003232:	000b      	movs	r3, r1
 8003234:	49de      	ldr	r1, [pc, #888]	@ (80035b0 <main+0x3a8>)
 8003236:	241c      	movs	r4, #28
 8003238:	1938      	adds	r0, r7, r4
 800323a:	f005 ffdb 	bl	80091f4 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800323e:	193b      	adds	r3, r7, r4
 8003240:	0018      	movs	r0, r3
 8003242:	f7fc ff61 	bl	8000108 <strlen>
 8003246:	0003      	movs	r3, r0
 8003248:	b29a      	uxth	r2, r3
 800324a:	2301      	movs	r3, #1
 800324c:	425b      	negs	r3, r3
 800324e:	1939      	adds	r1, r7, r4
 8003250:	48d8      	ldr	r0, [pc, #864]	@ (80035b4 <main+0x3ac>)
 8003252:	f004 fb87 	bl	8007964 <HAL_UART_Transmit>

    //set red
    HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_SET);
 8003256:	4bd8      	ldr	r3, [pc, #864]	@ (80035b8 <main+0x3b0>)
 8003258:	2201      	movs	r2, #1
 800325a:	2101      	movs	r1, #1
 800325c:	0018      	movs	r0, r3
 800325e:	f003 fc44 	bl	8006aea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8003262:	4bd5      	ldr	r3, [pc, #852]	@ (80035b8 <main+0x3b0>)
 8003264:	2200      	movs	r2, #0
 8003266:	2102      	movs	r1, #2
 8003268:	0018      	movs	r0, r3
 800326a:	f003 fc3e 	bl	8006aea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 800326e:	4bd2      	ldr	r3, [pc, #840]	@ (80035b8 <main+0x3b0>)
 8003270:	2200      	movs	r2, #0
 8003272:	2104      	movs	r1, #4
 8003274:	0018      	movs	r0, r3
 8003276:	f003 fc38 	bl	8006aea <HAL_GPIO_WritePin>

    HAL_Delay(1000);
 800327a:	23fa      	movs	r3, #250	@ 0xfa
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	0018      	movs	r0, r3
 8003280:	f002 fcce 	bl	8005c20 <HAL_Delay>

    read_from_SD_board();
 8003284:	f001 fea0 	bl	8004fc8 <read_from_SD_board>
    sprintf(msg, "%.3f\r\n", threshold_value);
 8003288:	4bc8      	ldr	r3, [pc, #800]	@ (80035ac <main+0x3a4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	1c18      	adds	r0, r3, #0
 800328e:	f7ff fec5 	bl	800301c <__aeabi_f2d>
 8003292:	0002      	movs	r2, r0
 8003294:	000b      	movs	r3, r1
 8003296:	49c6      	ldr	r1, [pc, #792]	@ (80035b0 <main+0x3a8>)
 8003298:	1938      	adds	r0, r7, r4
 800329a:	f005 ffab 	bl	80091f4 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7fc ff31 	bl	8000108 <strlen>
 80032a6:	0003      	movs	r3, r0
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	2301      	movs	r3, #1
 80032ac:	425b      	negs	r3, r3
 80032ae:	1939      	adds	r1, r7, r4
 80032b0:	48c0      	ldr	r0, [pc, #768]	@ (80035b4 <main+0x3ac>)
 80032b2:	f004 fb57 	bl	8007964 <HAL_UART_Transmit>

    HAL_Delay(1000);
 80032b6:	23fa      	movs	r3, #250	@ 0xfa
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	0018      	movs	r0, r3
 80032bc:	f002 fcb0 	bl	8005c20 <HAL_Delay>

    //turn off LEDs
    HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_RESET);
 80032c0:	4bbd      	ldr	r3, [pc, #756]	@ (80035b8 <main+0x3b0>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	2101      	movs	r1, #1
 80032c6:	0018      	movs	r0, r3
 80032c8:	f003 fc0f 	bl	8006aea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 80032cc:	4bba      	ldr	r3, [pc, #744]	@ (80035b8 <main+0x3b0>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	2102      	movs	r1, #2
 80032d2:	0018      	movs	r0, r3
 80032d4:	f003 fc09 	bl	8006aea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 80032d8:	4bb7      	ldr	r3, [pc, #732]	@ (80035b8 <main+0x3b0>)
 80032da:	2200      	movs	r2, #0
 80032dc:	2104      	movs	r1, #4
 80032de:	0018      	movs	r0, r3
 80032e0:	f003 fc03 	bl	8006aea <HAL_GPIO_WritePin>

    //CONTINUE WITH NORMAL BOARD FUNCTIONS

   start_time_ms = HAL_GetTick();
 80032e4:	f002 fc92 	bl	8005c0c <HAL_GetTick>
 80032e8:	0002      	movs	r2, r0
 80032ea:	4bb4      	ldr	r3, [pc, #720]	@ (80035bc <main+0x3b4>)
 80032ec:	601a      	str	r2, [r3, #0]
   HAL_Delay(15);
 80032ee:	200f      	movs	r0, #15
 80032f0:	f002 fc96 	bl	8005c20 <HAL_Delay>
   setNumber();
 80032f4:	f001 f8b0 	bl	8004458 <setNumber>
   HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80032f8:	4bb1      	ldr	r3, [pc, #708]	@ (80035c0 <main+0x3b8>)
 80032fa:	2100      	movs	r1, #0
 80032fc:	0018      	movs	r0, r3
 80032fe:	f003 f907 	bl	8006510 <HAL_ADCEx_Calibration_Start>

   Reset_The_Whole_B();
 8003302:	f001 ffd1 	bl	80052a8 <Reset_The_Whole_B>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Measurement_of_ADC_Voltage_18650();
 8003306:	f000 fded 	bl	8003ee4 <Measurement_of_ADC_Voltage_18650>
	  Measurement_of_ADC_Voltage_CMOS();
 800330a:	f000 fe4b 	bl	8003fa4 <Measurement_of_ADC_Voltage_CMOS>
	  Measurement_of_ADC_Voltage_DiffAmp_CMOS();
 800330e:	f000 ff5f 	bl	80041d0 <Measurement_of_ADC_Voltage_DiffAmp_CMOS>
	  Measurement_of_ADC_Voltage_DiffAmp_18650();
 8003312:	f000 fea7 	bl	8004064 <Measurement_of_ADC_Voltage_DiffAmp_18650>
	  C_18650 = Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650(Voltage_DiffAmp_18650);
 8003316:	4bab      	ldr	r3, [pc, #684]	@ (80035c4 <main+0x3bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1c18      	adds	r0, r3, #0
 800331c:	f000 fef2 	bl	8004104 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650>
 8003320:	1c02      	adds	r2, r0, #0
 8003322:	4ba9      	ldr	r3, [pc, #676]	@ (80035c8 <main+0x3c0>)
 8003324:	601a      	str	r2, [r3, #0]
	  C_CMOS = Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS(Voltage_DiffAmp_CMOS);
 8003326:	4ba9      	ldr	r3, [pc, #676]	@ (80035cc <main+0x3c4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	1c18      	adds	r0, r3, #0
 800332c:	f000 ffa0 	bl	8004270 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS>
 8003330:	1c02      	adds	r2, r0, #0
 8003332:	4ba7      	ldr	r3, [pc, #668]	@ (80035d0 <main+0x3c8>)
 8003334:	601a      	str	r2, [r3, #0]
	  C_CMOS = (C_CMOS - .00001);
 8003336:	4ba6      	ldr	r3, [pc, #664]	@ (80035d0 <main+0x3c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	1c18      	adds	r0, r3, #0
 800333c:	f7ff fe6e 	bl	800301c <__aeabi_f2d>
 8003340:	4aa4      	ldr	r2, [pc, #656]	@ (80035d4 <main+0x3cc>)
 8003342:	4ba5      	ldr	r3, [pc, #660]	@ (80035d8 <main+0x3d0>)
 8003344:	f7ff fa1e 	bl	8002784 <__aeabi_dsub>
 8003348:	0002      	movs	r2, r0
 800334a:	000b      	movs	r3, r1
 800334c:	0010      	movs	r0, r2
 800334e:	0019      	movs	r1, r3
 8003350:	f7ff feac 	bl	80030ac <__aeabi_d2f>
 8003354:	1c02      	adds	r2, r0, #0
 8003356:	4b9e      	ldr	r3, [pc, #632]	@ (80035d0 <main+0x3c8>)
 8003358:	601a      	str	r2, [r3, #0]
	  if(C_CMOS < 0.0){
 800335a:	4b9d      	ldr	r3, [pc, #628]	@ (80035d0 <main+0x3c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2100      	movs	r1, #0
 8003360:	1c18      	adds	r0, r3, #0
 8003362:	f7fd f8b3 	bl	80004cc <__aeabi_fcmplt>
 8003366:	1e03      	subs	r3, r0, #0
 8003368:	d002      	beq.n	8003370 <main+0x168>
		  C_CMOS = 0;
 800336a:	4b99      	ldr	r3, [pc, #612]	@ (80035d0 <main+0x3c8>)
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
	  }
      Button_Debounce_Set();
 8003370:	f001 fd3c 	bl	8004dec <Button_Debounce_Set>

      uint32_t current_time_ms = HAL_GetTick();
 8003374:	f002 fc4a 	bl	8005c0c <HAL_GetTick>
 8003378:	0003      	movs	r3, r0
 800337a:	228c      	movs	r2, #140	@ 0x8c
 800337c:	2018      	movs	r0, #24
 800337e:	1811      	adds	r1, r2, r0
 8003380:	19c9      	adds	r1, r1, r7
 8003382:	600b      	str	r3, [r1, #0]
      seconds_since_start = (current_time_ms - start_time_ms) / 1000.0f;
 8003384:	4b8d      	ldr	r3, [pc, #564]	@ (80035bc <main+0x3b4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	1812      	adds	r2, r2, r0
 800338a:	19d2      	adds	r2, r2, r7
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	0018      	movs	r0, r3
 8003392:	f7fd ff45 	bl	8001220 <__aeabi_ui2f>
 8003396:	1c03      	adds	r3, r0, #0
 8003398:	4990      	ldr	r1, [pc, #576]	@ (80035dc <main+0x3d4>)
 800339a:	1c18      	adds	r0, r3, #0
 800339c:	f7fd fbd0 	bl	8000b40 <__aeabi_fdiv>
 80033a0:	1c03      	adds	r3, r0, #0
 80033a2:	1c1a      	adds	r2, r3, #0
 80033a4:	4b8e      	ldr	r3, [pc, #568]	@ (80035e0 <main+0x3d8>)
 80033a6:	601a      	str	r2, [r3, #0]

      if(state == LS_8 || state == LS_7 || state == LS_6 || state == LS_5)
 80033a8:	4b8e      	ldr	r3, [pc, #568]	@ (80035e4 <main+0x3dc>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d00b      	beq.n	80033c8 <main+0x1c0>
 80033b0:	4b8c      	ldr	r3, [pc, #560]	@ (80035e4 <main+0x3dc>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b07      	cmp	r3, #7
 80033b6:	d007      	beq.n	80033c8 <main+0x1c0>
 80033b8:	4b8a      	ldr	r3, [pc, #552]	@ (80035e4 <main+0x3dc>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b06      	cmp	r3, #6
 80033be:	d003      	beq.n	80033c8 <main+0x1c0>
 80033c0:	4b88      	ldr	r3, [pc, #544]	@ (80035e4 <main+0x3dc>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	d123      	bne.n	8003410 <main+0x208>
      {
    	  if(C_18650 <= (Threshold(valueToAdjust))*.9)
 80033c8:	4b7f      	ldr	r3, [pc, #508]	@ (80035c8 <main+0x3c0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	1c18      	adds	r0, r3, #0
 80033ce:	f7ff fe25 	bl	800301c <__aeabi_f2d>
 80033d2:	0004      	movs	r4, r0
 80033d4:	000d      	movs	r5, r1
 80033d6:	4b84      	ldr	r3, [pc, #528]	@ (80035e8 <main+0x3e0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	0018      	movs	r0, r3
 80033dc:	f001 f90c 	bl	80045f8 <Threshold>
 80033e0:	1c03      	adds	r3, r0, #0
 80033e2:	1c18      	adds	r0, r3, #0
 80033e4:	f7ff fe1a 	bl	800301c <__aeabi_f2d>
 80033e8:	4a80      	ldr	r2, [pc, #512]	@ (80035ec <main+0x3e4>)
 80033ea:	4b81      	ldr	r3, [pc, #516]	@ (80035f0 <main+0x3e8>)
 80033ec:	f7fe ff02 	bl	80021f4 <__aeabi_dmul>
 80033f0:	0002      	movs	r2, r0
 80033f2:	000b      	movs	r3, r1
 80033f4:	0020      	movs	r0, r4
 80033f6:	0029      	movs	r1, r5
 80033f8:	f7fd f838 	bl	800046c <__aeabi_dcmple>
 80033fc:	1e03      	subs	r3, r0, #0
 80033fe:	d03a      	beq.n	8003476 <main+0x26e>
    	  {
    		  Set_Low();
 8003400:	f002 f9b6 	bl	8005770 <Set_Low>
    		  state = LS_4;
 8003404:	4b77      	ldr	r3, [pc, #476]	@ (80035e4 <main+0x3dc>)
 8003406:	2204      	movs	r2, #4
 8003408:	701a      	strb	r2, [r3, #0]
    		  Set_LS_4();
 800340a:	f002 f867 	bl	80054dc <Set_LS_4>
    	  if(C_18650 <= (Threshold(valueToAdjust))*.9)
 800340e:	e032      	b.n	8003476 <main+0x26e>
           }
       }
       else if(state == LS_4 || state == LS_3 || state == LS_2 || state == LS_1)
 8003410:	4b74      	ldr	r3, [pc, #464]	@ (80035e4 <main+0x3dc>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d00b      	beq.n	8003430 <main+0x228>
 8003418:	4b72      	ldr	r3, [pc, #456]	@ (80035e4 <main+0x3dc>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d007      	beq.n	8003430 <main+0x228>
 8003420:	4b70      	ldr	r3, [pc, #448]	@ (80035e4 <main+0x3dc>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d003      	beq.n	8003430 <main+0x228>
 8003428:	4b6e      	ldr	r3, [pc, #440]	@ (80035e4 <main+0x3dc>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d122      	bne.n	8003476 <main+0x26e>
       {
    	   if(C_CMOS >= (Threshold(valueToAdjust))*1.1)
 8003430:	4b67      	ldr	r3, [pc, #412]	@ (80035d0 <main+0x3c8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	1c18      	adds	r0, r3, #0
 8003436:	f7ff fdf1 	bl	800301c <__aeabi_f2d>
 800343a:	0004      	movs	r4, r0
 800343c:	000d      	movs	r5, r1
 800343e:	4b6a      	ldr	r3, [pc, #424]	@ (80035e8 <main+0x3e0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	0018      	movs	r0, r3
 8003444:	f001 f8d8 	bl	80045f8 <Threshold>
 8003448:	1c03      	adds	r3, r0, #0
 800344a:	1c18      	adds	r0, r3, #0
 800344c:	f7ff fde6 	bl	800301c <__aeabi_f2d>
 8003450:	4a68      	ldr	r2, [pc, #416]	@ (80035f4 <main+0x3ec>)
 8003452:	4b69      	ldr	r3, [pc, #420]	@ (80035f8 <main+0x3f0>)
 8003454:	f7fe fece 	bl	80021f4 <__aeabi_dmul>
 8003458:	0002      	movs	r2, r0
 800345a:	000b      	movs	r3, r1
 800345c:	0020      	movs	r0, r4
 800345e:	0029      	movs	r1, r5
 8003460:	f7fd f818 	bl	8000494 <__aeabi_dcmpge>
 8003464:	1e03      	subs	r3, r0, #0
 8003466:	d006      	beq.n	8003476 <main+0x26e>
    	   {
    		   Set_High();
 8003468:	f002 f998 	bl	800579c <Set_High>
    		   state = LS_8;
 800346c:	4b5d      	ldr	r3, [pc, #372]	@ (80035e4 <main+0x3dc>)
 800346e:	2208      	movs	r2, #8
 8003470:	701a      	strb	r2, [r3, #0]
    		   Set_LS_8();
 8003472:	f002 f93b 	bl	80056ec <Set_LS_8>
           }
       }

      // UART Debuggin
      sprintf(msg, "Time:%.3f High Voltage:%.3f High Current:%.5f Low Voltage:%.3f Low Current:%.5f Threshold State:%d Active Switch:%d Number Of Measurements:%d\r\n\r\n\r\n",
 8003476:	4b5a      	ldr	r3, [pc, #360]	@ (80035e0 <main+0x3d8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1c18      	adds	r0, r3, #0
 800347c:	f7ff fdce 	bl	800301c <__aeabi_f2d>
 8003480:	6138      	str	r0, [r7, #16]
 8003482:	6179      	str	r1, [r7, #20]
 8003484:	4b5d      	ldr	r3, [pc, #372]	@ (80035fc <main+0x3f4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1c18      	adds	r0, r3, #0
 800348a:	f7ff fdc7 	bl	800301c <__aeabi_f2d>
 800348e:	0004      	movs	r4, r0
 8003490:	000d      	movs	r5, r1
 8003492:	4b4d      	ldr	r3, [pc, #308]	@ (80035c8 <main+0x3c0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	1c18      	adds	r0, r3, #0
 8003498:	f7ff fdc0 	bl	800301c <__aeabi_f2d>
 800349c:	60b8      	str	r0, [r7, #8]
 800349e:	60f9      	str	r1, [r7, #12]
 80034a0:	4b57      	ldr	r3, [pc, #348]	@ (8003600 <main+0x3f8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	1c18      	adds	r0, r3, #0
 80034a6:	f7ff fdb9 	bl	800301c <__aeabi_f2d>
 80034aa:	6038      	str	r0, [r7, #0]
 80034ac:	6079      	str	r1, [r7, #4]
 80034ae:	4b48      	ldr	r3, [pc, #288]	@ (80035d0 <main+0x3c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	1c18      	adds	r0, r3, #0
 80034b4:	f7ff fdb2 	bl	800301c <__aeabi_f2d>
 80034b8:	4b4b      	ldr	r3, [pc, #300]	@ (80035e8 <main+0x3e0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4698      	mov	r8, r3
 80034be:	4b51      	ldr	r3, [pc, #324]	@ (8003604 <main+0x3fc>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b51      	ldr	r3, [pc, #324]	@ (8003608 <main+0x400>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4e51      	ldr	r6, [pc, #324]	@ (800360c <main+0x404>)
 80034c8:	46b4      	mov	ip, r6
 80034ca:	261c      	movs	r6, #28
 80034cc:	19be      	adds	r6, r7, r6
 80034ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80034d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80034d2:	4643      	mov	r3, r8
 80034d4:	9308      	str	r3, [sp, #32]
 80034d6:	9006      	str	r0, [sp, #24]
 80034d8:	9107      	str	r1, [sp, #28]
 80034da:	6839      	ldr	r1, [r7, #0]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	9104      	str	r1, [sp, #16]
 80034e0:	9205      	str	r2, [sp, #20]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	9102      	str	r1, [sp, #8]
 80034e8:	9203      	str	r2, [sp, #12]
 80034ea:	9400      	str	r4, [sp, #0]
 80034ec:	9501      	str	r5, [sp, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	4661      	mov	r1, ip
 80034f4:	0030      	movs	r0, r6
 80034f6:	f005 fe7d 	bl	80091f4 <siprintf>
              V_CMOS,         // CMOS Voltage
			  C_CMOS,         // CMOS Current
              valueToAdjust,  // Threshold
              Switch_State,   // Which load switch is active
			  measurement_num);//Total number of measurements
      HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80034fa:	241c      	movs	r4, #28
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	0018      	movs	r0, r3
 8003500:	f7fc fe02 	bl	8000108 <strlen>
 8003504:	0003      	movs	r3, r0
 8003506:	b29a      	uxth	r2, r3
 8003508:	2301      	movs	r3, #1
 800350a:	425b      	negs	r3, r3
 800350c:	1939      	adds	r1, r7, r4
 800350e:	4829      	ldr	r0, [pc, #164]	@ (80035b4 <main+0x3ac>)
 8003510:	f004 fa28 	bl	8007964 <HAL_UART_Transmit>



//               Handle behavior based on state
          switch (state) {
 8003514:	4b33      	ldr	r3, [pc, #204]	@ (80035e4 <main+0x3dc>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d900      	bls.n	800351e <main+0x316>
 800351c:	e2f5      	b.n	8003b0a <main+0x902>
 800351e:	009a      	lsls	r2, r3, #2
 8003520:	4b3b      	ldr	r3, [pc, #236]	@ (8003610 <main+0x408>)
 8003522:	18d3      	adds	r3, r2, r3
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	469f      	mov	pc, r3
          case CASE_INIT: {
                  state = LS_8;
 8003528:	4b2e      	ldr	r3, [pc, #184]	@ (80035e4 <main+0x3dc>)
 800352a:	2208      	movs	r2, #8
 800352c:	701a      	strb	r2, [r3, #0]
                  break;
 800352e:	e2f1      	b.n	8003b14 <main+0x90c>
          }

          case LS_8:
        	  Switch_State = 8;
 8003530:	4b34      	ldr	r3, [pc, #208]	@ (8003604 <main+0x3fc>)
 8003532:	2208      	movs	r2, #8
 8003534:	601a      	str	r2, [r3, #0]
              static int Hys_ls8 = 1;
              Set_LS_8();
 8003536:	f002 f8d9 	bl	80056ec <Set_LS_8>
              AdjustStateTo7();
 800353a:	f001 f9ff 	bl	800493c <AdjustStateTo7>

              // Transitioning back to LS_7
              if ((Hys_ls8 == 0 && Voltage_DiffAmp_18650 < .33) || (Hys_ls8 == 1 && Voltage_DiffAmp_18650 < .231)) {
 800353e:	4b35      	ldr	r3, [pc, #212]	@ (8003614 <main+0x40c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <main+0x354>
 8003546:	4b1f      	ldr	r3, [pc, #124]	@ (80035c4 <main+0x3bc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	1c18      	adds	r0, r3, #0
 800354c:	f7ff fd66 	bl	800301c <__aeabi_f2d>
 8003550:	4a31      	ldr	r2, [pc, #196]	@ (8003618 <main+0x410>)
 8003552:	4b32      	ldr	r3, [pc, #200]	@ (800361c <main+0x414>)
 8003554:	f7fc ff80 	bl	8000458 <__aeabi_dcmplt>
 8003558:	1e03      	subs	r3, r0, #0
 800355a:	d10e      	bne.n	800357a <main+0x372>
 800355c:	4b2d      	ldr	r3, [pc, #180]	@ (8003614 <main+0x40c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d112      	bne.n	800358a <main+0x382>
 8003564:	4b17      	ldr	r3, [pc, #92]	@ (80035c4 <main+0x3bc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c18      	adds	r0, r3, #0
 800356a:	f7ff fd57 	bl	800301c <__aeabi_f2d>
 800356e:	4a2c      	ldr	r2, [pc, #176]	@ (8003620 <main+0x418>)
 8003570:	4b2c      	ldr	r3, [pc, #176]	@ (8003624 <main+0x41c>)
 8003572:	f7fc ff71 	bl	8000458 <__aeabi_dcmplt>
 8003576:	1e03      	subs	r3, r0, #0
 8003578:	d007      	beq.n	800358a <main+0x382>
                  Set_LS_7();
 800357a:	f002 f875 	bl	8005668 <Set_LS_7>
                  state = LS_7;
 800357e:	4b19      	ldr	r3, [pc, #100]	@ (80035e4 <main+0x3dc>)
 8003580:	2207      	movs	r2, #7
 8003582:	701a      	strb	r2, [r3, #0]
                  Hys_ls8 = 1; // Reset Hys_ls8 when leaving LS_8
 8003584:	4b23      	ldr	r3, [pc, #140]	@ (8003614 <main+0x40c>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]
              }

              // Update hysteresis flag based on remaining in LS_8
              if (Voltage_DiffAmp_18650 > .429) {
 800358a:	4b0e      	ldr	r3, [pc, #56]	@ (80035c4 <main+0x3bc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	1c18      	adds	r0, r3, #0
 8003590:	f7ff fd44 	bl	800301c <__aeabi_f2d>
 8003594:	4a24      	ldr	r2, [pc, #144]	@ (8003628 <main+0x420>)
 8003596:	4b25      	ldr	r3, [pc, #148]	@ (800362c <main+0x424>)
 8003598:	f7fc ff72 	bl	8000480 <__aeabi_dcmpgt>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d100      	bne.n	80035a2 <main+0x39a>
                  Hys_ls8 = 0;
              }

              break;
 80035a0:	e2b8      	b.n	8003b14 <main+0x90c>
                  Hys_ls8 = 0;
 80035a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003614 <main+0x40c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
              break;
 80035a8:	e2b4      	b.n	8003b14 <main+0x90c>
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	20000338 	.word	0x20000338
 80035b0:	0800da90 	.word	0x0800da90
 80035b4:	20000278 	.word	0x20000278
 80035b8:	50000400 	.word	0x50000400
 80035bc:	20000320 	.word	0x20000320
 80035c0:	2000021c 	.word	0x2000021c
 80035c4:	20000310 	.word	0x20000310
 80035c8:	2000030c 	.word	0x2000030c
 80035cc:	20000308 	.word	0x20000308
 80035d0:	20000314 	.word	0x20000314
 80035d4:	88e368f1 	.word	0x88e368f1
 80035d8:	3ee4f8b5 	.word	0x3ee4f8b5
 80035dc:	447a0000 	.word	0x447a0000
 80035e0:	2000031c 	.word	0x2000031c
 80035e4:	2000034c 	.word	0x2000034c
 80035e8:	2000032c 	.word	0x2000032c
 80035ec:	cccccccd 	.word	0xcccccccd
 80035f0:	3feccccc 	.word	0x3feccccc
 80035f4:	9999999a 	.word	0x9999999a
 80035f8:	3ff19999 	.word	0x3ff19999
 80035fc:	20000300 	.word	0x20000300
 8003600:	20000304 	.word	0x20000304
 8003604:	20000318 	.word	0x20000318
 8003608:	20000334 	.word	0x20000334
 800360c:	0800da98 	.word	0x0800da98
 8003610:	0800dbfc 	.word	0x0800dbfc
 8003614:	20000000 	.word	0x20000000
 8003618:	51eb851f 	.word	0x51eb851f
 800361c:	3fd51eb8 	.word	0x3fd51eb8
 8003620:	72b020c5 	.word	0x72b020c5
 8003624:	3fcd9168 	.word	0x3fcd9168
 8003628:	6a7ef9db 	.word	0x6a7ef9db
 800362c:	3fdb74bc 	.word	0x3fdb74bc

          case LS_7:
        	  Switch_State = 7;
 8003630:	4bb6      	ldr	r3, [pc, #728]	@ (800390c <main+0x704>)
 8003632:	2207      	movs	r2, #7
 8003634:	601a      	str	r2, [r3, #0]
              static int Hys_ls7 = 1;
              Set_LS_7();
 8003636:	f002 f817 	bl	8005668 <Set_LS_7>
              AdjustStateTo6();
 800363a:	f001 f951 	bl	80048e0 <AdjustStateTo6>

              // Transitioning to LS_6 or LS_8 based on conditions
              if ((Hys_ls7 == 0 && Voltage_DiffAmp_18650 < .33) || (Hys_ls7 == 1 && Voltage_DiffAmp_18650 < .231)) {
 800363e:	4bb4      	ldr	r3, [pc, #720]	@ (8003910 <main+0x708>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <main+0x454>
 8003646:	4bb3      	ldr	r3, [pc, #716]	@ (8003914 <main+0x70c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	1c18      	adds	r0, r3, #0
 800364c:	f7ff fce6 	bl	800301c <__aeabi_f2d>
 8003650:	4ab1      	ldr	r2, [pc, #708]	@ (8003918 <main+0x710>)
 8003652:	4bb2      	ldr	r3, [pc, #712]	@ (800391c <main+0x714>)
 8003654:	f7fc ff00 	bl	8000458 <__aeabi_dcmplt>
 8003658:	1e03      	subs	r3, r0, #0
 800365a:	d10e      	bne.n	800367a <main+0x472>
 800365c:	4bac      	ldr	r3, [pc, #688]	@ (8003910 <main+0x708>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d113      	bne.n	800368c <main+0x484>
 8003664:	4bab      	ldr	r3, [pc, #684]	@ (8003914 <main+0x70c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	1c18      	adds	r0, r3, #0
 800366a:	f7ff fcd7 	bl	800301c <__aeabi_f2d>
 800366e:	4aac      	ldr	r2, [pc, #688]	@ (8003920 <main+0x718>)
 8003670:	4bac      	ldr	r3, [pc, #688]	@ (8003924 <main+0x71c>)
 8003672:	f7fc fef1 	bl	8000458 <__aeabi_dcmplt>
 8003676:	1e03      	subs	r3, r0, #0
 8003678:	d008      	beq.n	800368c <main+0x484>
                  Set_LS_6();
 800367a:	f001 ffb3 	bl	80055e4 <Set_LS_6>
                  state = LS_6;
 800367e:	4baa      	ldr	r3, [pc, #680]	@ (8003928 <main+0x720>)
 8003680:	2206      	movs	r2, #6
 8003682:	701a      	strb	r2, [r3, #0]
                  // Indicate entering LS_6 from LS_7
                  entered_LS6_from_LS7 = 1;
 8003684:	4ba9      	ldr	r3, [pc, #676]	@ (800392c <main+0x724>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e025      	b.n	80036d8 <main+0x4d0>
              } else if ((Hys_ls7 == 0 && Voltage_DiffAmp_18650 > 2.97) || (Hys_ls7 == 1 && Voltage_DiffAmp_18650 > 3.069)) {
 800368c:	4ba0      	ldr	r3, [pc, #640]	@ (8003910 <main+0x708>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <main+0x4a2>
 8003694:	4b9f      	ldr	r3, [pc, #636]	@ (8003914 <main+0x70c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1c18      	adds	r0, r3, #0
 800369a:	f7ff fcbf 	bl	800301c <__aeabi_f2d>
 800369e:	4aa4      	ldr	r2, [pc, #656]	@ (8003930 <main+0x728>)
 80036a0:	4ba4      	ldr	r3, [pc, #656]	@ (8003934 <main+0x72c>)
 80036a2:	f7fc feed 	bl	8000480 <__aeabi_dcmpgt>
 80036a6:	1e03      	subs	r3, r0, #0
 80036a8:	d10e      	bne.n	80036c8 <main+0x4c0>
 80036aa:	4b99      	ldr	r3, [pc, #612]	@ (8003910 <main+0x708>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d112      	bne.n	80036d8 <main+0x4d0>
 80036b2:	4b98      	ldr	r3, [pc, #608]	@ (8003914 <main+0x70c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	1c18      	adds	r0, r3, #0
 80036b8:	f7ff fcb0 	bl	800301c <__aeabi_f2d>
 80036bc:	4a9e      	ldr	r2, [pc, #632]	@ (8003938 <main+0x730>)
 80036be:	4b9f      	ldr	r3, [pc, #636]	@ (800393c <main+0x734>)
 80036c0:	f7fc fede 	bl	8000480 <__aeabi_dcmpgt>
 80036c4:	1e03      	subs	r3, r0, #0
 80036c6:	d007      	beq.n	80036d8 <main+0x4d0>
                  Set_LS_8();
 80036c8:	f002 f810 	bl	80056ec <Set_LS_8>
                  state = LS_8;
 80036cc:	4b96      	ldr	r3, [pc, #600]	@ (8003928 <main+0x720>)
 80036ce:	2208      	movs	r2, #8
 80036d0:	701a      	strb	r2, [r3, #0]
                  // Reset flags related to LS_7 transitions
                  entered_LS7_from_LS6 = 0;
 80036d2:	4b9b      	ldr	r3, [pc, #620]	@ (8003940 <main+0x738>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
              }

              // Update hysteresis flag based on voltage thresholds
              if (Voltage_DiffAmp_18650 > .429 || Voltage_DiffAmp_18650 > 3.069) {
 80036d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003914 <main+0x70c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	1c18      	adds	r0, r3, #0
 80036de:	f7ff fc9d 	bl	800301c <__aeabi_f2d>
 80036e2:	4a98      	ldr	r2, [pc, #608]	@ (8003944 <main+0x73c>)
 80036e4:	4b98      	ldr	r3, [pc, #608]	@ (8003948 <main+0x740>)
 80036e6:	f7fc fecb 	bl	8000480 <__aeabi_dcmpgt>
 80036ea:	1e03      	subs	r3, r0, #0
 80036ec:	d10a      	bne.n	8003704 <main+0x4fc>
 80036ee:	4b89      	ldr	r3, [pc, #548]	@ (8003914 <main+0x70c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	1c18      	adds	r0, r3, #0
 80036f4:	f7ff fc92 	bl	800301c <__aeabi_f2d>
 80036f8:	4a8f      	ldr	r2, [pc, #572]	@ (8003938 <main+0x730>)
 80036fa:	4b90      	ldr	r3, [pc, #576]	@ (800393c <main+0x734>)
 80036fc:	f7fc fec0 	bl	8000480 <__aeabi_dcmpgt>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d003      	beq.n	800370c <main+0x504>
                  Hys_ls7 = 0;
 8003704:	4b82      	ldr	r3, [pc, #520]	@ (8003910 <main+0x708>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
              } else {
                  Hys_ls7 = 1;
              }

              break;
 800370a:	e203      	b.n	8003b14 <main+0x90c>
                  Hys_ls7 = 1;
 800370c:	4b80      	ldr	r3, [pc, #512]	@ (8003910 <main+0x708>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]
              break;
 8003712:	e1ff      	b.n	8003b14 <main+0x90c>

          case LS_6:
        	  Switch_State = 6;
 8003714:	4b7d      	ldr	r3, [pc, #500]	@ (800390c <main+0x704>)
 8003716:	2206      	movs	r2, #6
 8003718:	601a      	str	r2, [r3, #0]
              static int Hys_ls6 = 1; // For persistence across state transitions
              Set_LS_6();
 800371a:	f001 ff63 	bl	80055e4 <Set_LS_6>
              AdjustStateTo5();
 800371e:	f001 f8b1 	bl	8004884 <AdjustStateTo5>

              // Transitioning from LS_6 to LS_5
              if ((Hys_ls6 == 0 && Voltage_DiffAmp_18650 < .33) || (Hys_ls6 == 1 && Voltage_DiffAmp_18650 < .231)) {
 8003722:	4b8a      	ldr	r3, [pc, #552]	@ (800394c <main+0x744>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <main+0x538>
 800372a:	4b7a      	ldr	r3, [pc, #488]	@ (8003914 <main+0x70c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	1c18      	adds	r0, r3, #0
 8003730:	f7ff fc74 	bl	800301c <__aeabi_f2d>
 8003734:	4a78      	ldr	r2, [pc, #480]	@ (8003918 <main+0x710>)
 8003736:	4b79      	ldr	r3, [pc, #484]	@ (800391c <main+0x714>)
 8003738:	f7fc fe8e 	bl	8000458 <__aeabi_dcmplt>
 800373c:	1e03      	subs	r3, r0, #0
 800373e:	d10e      	bne.n	800375e <main+0x556>
 8003740:	4b82      	ldr	r3, [pc, #520]	@ (800394c <main+0x744>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d113      	bne.n	8003770 <main+0x568>
 8003748:	4b72      	ldr	r3, [pc, #456]	@ (8003914 <main+0x70c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	1c18      	adds	r0, r3, #0
 800374e:	f7ff fc65 	bl	800301c <__aeabi_f2d>
 8003752:	4a73      	ldr	r2, [pc, #460]	@ (8003920 <main+0x718>)
 8003754:	4b73      	ldr	r3, [pc, #460]	@ (8003924 <main+0x71c>)
 8003756:	f7fc fe7f 	bl	8000458 <__aeabi_dcmplt>
 800375a:	1e03      	subs	r3, r0, #0
 800375c:	d008      	beq.n	8003770 <main+0x568>
                  Set_LS_5();
 800375e:	f001 feff 	bl	8005560 <Set_LS_5>
                  state = LS_5;
 8003762:	4b71      	ldr	r3, [pc, #452]	@ (8003928 <main+0x720>)
 8003764:	2205      	movs	r2, #5
 8003766:	701a      	strb	r2, [r3, #0]
                  // Reset flags related to LS_6 transitions
                  entered_LS6_from_LS7 = 0;
 8003768:	4b70      	ldr	r3, [pc, #448]	@ (800392c <main+0x724>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e025      	b.n	80037bc <main+0x5b4>
              } else if ((Hys_ls6 == 0 && Voltage_DiffAmp_18650 > 2.97) || (Hys_ls6 == 1 && Voltage_DiffAmp_18650 > 3.069)) {
 8003770:	4b76      	ldr	r3, [pc, #472]	@ (800394c <main+0x744>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <main+0x586>
 8003778:	4b66      	ldr	r3, [pc, #408]	@ (8003914 <main+0x70c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	1c18      	adds	r0, r3, #0
 800377e:	f7ff fc4d 	bl	800301c <__aeabi_f2d>
 8003782:	4a6b      	ldr	r2, [pc, #428]	@ (8003930 <main+0x728>)
 8003784:	4b6b      	ldr	r3, [pc, #428]	@ (8003934 <main+0x72c>)
 8003786:	f7fc fe7b 	bl	8000480 <__aeabi_dcmpgt>
 800378a:	1e03      	subs	r3, r0, #0
 800378c:	d10e      	bne.n	80037ac <main+0x5a4>
 800378e:	4b6f      	ldr	r3, [pc, #444]	@ (800394c <main+0x744>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d112      	bne.n	80037bc <main+0x5b4>
 8003796:	4b5f      	ldr	r3, [pc, #380]	@ (8003914 <main+0x70c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1c18      	adds	r0, r3, #0
 800379c:	f7ff fc3e 	bl	800301c <__aeabi_f2d>
 80037a0:	4a65      	ldr	r2, [pc, #404]	@ (8003938 <main+0x730>)
 80037a2:	4b66      	ldr	r3, [pc, #408]	@ (800393c <main+0x734>)
 80037a4:	f7fc fe6c 	bl	8000480 <__aeabi_dcmpgt>
 80037a8:	1e03      	subs	r3, r0, #0
 80037aa:	d007      	beq.n	80037bc <main+0x5b4>
                  Set_LS_7();
 80037ac:	f001 ff5c 	bl	8005668 <Set_LS_7>
                  state = LS_7;
 80037b0:	4b5d      	ldr	r3, [pc, #372]	@ (8003928 <main+0x720>)
 80037b2:	2207      	movs	r2, #7
 80037b4:	701a      	strb	r2, [r3, #0]
                  // Indicate entering LS_7 from LS_6
                  entered_LS7_from_LS6 = 1;
 80037b6:	4b62      	ldr	r3, [pc, #392]	@ (8003940 <main+0x738>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
              }

              // Update hysteresis flag based on voltage thresholds
              if (Voltage_DiffAmp_18650 > .429 || Voltage_DiffAmp_18650 > 3.069) {
 80037bc:	4b55      	ldr	r3, [pc, #340]	@ (8003914 <main+0x70c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	1c18      	adds	r0, r3, #0
 80037c2:	f7ff fc2b 	bl	800301c <__aeabi_f2d>
 80037c6:	4a5f      	ldr	r2, [pc, #380]	@ (8003944 <main+0x73c>)
 80037c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003948 <main+0x740>)
 80037ca:	f7fc fe59 	bl	8000480 <__aeabi_dcmpgt>
 80037ce:	1e03      	subs	r3, r0, #0
 80037d0:	d10a      	bne.n	80037e8 <main+0x5e0>
 80037d2:	4b50      	ldr	r3, [pc, #320]	@ (8003914 <main+0x70c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	1c18      	adds	r0, r3, #0
 80037d8:	f7ff fc20 	bl	800301c <__aeabi_f2d>
 80037dc:	4a56      	ldr	r2, [pc, #344]	@ (8003938 <main+0x730>)
 80037de:	4b57      	ldr	r3, [pc, #348]	@ (800393c <main+0x734>)
 80037e0:	f7fc fe4e 	bl	8000480 <__aeabi_dcmpgt>
 80037e4:	1e03      	subs	r3, r0, #0
 80037e6:	d003      	beq.n	80037f0 <main+0x5e8>
                  Hys_ls6 = 0;
 80037e8:	4b58      	ldr	r3, [pc, #352]	@ (800394c <main+0x744>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
              } else {
                  Hys_ls6 = 1;
              }

              break;
 80037ee:	e191      	b.n	8003b14 <main+0x90c>
                  Hys_ls6 = 1;
 80037f0:	4b56      	ldr	r3, [pc, #344]	@ (800394c <main+0x744>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
              break;
 80037f6:	e18d      	b.n	8003b14 <main+0x90c>

          case LS_5:
        	  Switch_State = 5;
 80037f8:	4b44      	ldr	r3, [pc, #272]	@ (800390c <main+0x704>)
 80037fa:	2205      	movs	r2, #5
 80037fc:	601a      	str	r2, [r3, #0]
              int Hys_ls5 = 1;
 80037fe:	2301      	movs	r3, #1
 8003800:	2288      	movs	r2, #136	@ 0x88
 8003802:	2118      	movs	r1, #24
 8003804:	1852      	adds	r2, r2, r1
 8003806:	19d2      	adds	r2, r2, r7
 8003808:	6013      	str	r3, [r2, #0]
              Set_LS_5();
 800380a:	f001 fea9 	bl	8005560 <Set_LS_5>
              AdjustStateTo4();
 800380e:	f001 f80b 	bl	8004828 <AdjustStateTo4>
              if (Voltage_DiffAmp_18650 >= 2.97) { // Using the special threshold for moving up from a very low state
 8003812:	4b40      	ldr	r3, [pc, #256]	@ (8003914 <main+0x70c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	1c18      	adds	r0, r3, #0
 8003818:	f7ff fc00 	bl	800301c <__aeabi_f2d>
 800381c:	4a44      	ldr	r2, [pc, #272]	@ (8003930 <main+0x728>)
 800381e:	4b45      	ldr	r3, [pc, #276]	@ (8003934 <main+0x72c>)
 8003820:	f7fc fe38 	bl	8000494 <__aeabi_dcmpge>
 8003824:	1e03      	subs	r3, r0, #0
 8003826:	d100      	bne.n	800382a <main+0x622>
                  Set_LS_6();
                  state = LS_6;
              }
              break;
 8003828:	e174      	b.n	8003b14 <main+0x90c>
                  Set_LS_6();
 800382a:	f001 fedb 	bl	80055e4 <Set_LS_6>
                  state = LS_6;
 800382e:	4b3e      	ldr	r3, [pc, #248]	@ (8003928 <main+0x720>)
 8003830:	2206      	movs	r2, #6
 8003832:	701a      	strb	r2, [r3, #0]
              break;
 8003834:	e16e      	b.n	8003b14 <main+0x90c>
               //end of LS_5

          case LS_4:
        	  Switch_State = 4;
 8003836:	4b35      	ldr	r3, [pc, #212]	@ (800390c <main+0x704>)
 8003838:	2204      	movs	r2, #4
 800383a:	601a      	str	r2, [r3, #0]
              static int Hys_ls4 = 1;
              Set_LS_4();
 800383c:	f001 fe4e 	bl	80054dc <Set_LS_4>
              AdjustStateTo3();
 8003840:	f000 ffc4 	bl	80047cc <AdjustStateTo3>

              // Transitioning back to LS_3
              if ((Hys_ls4 == 0 && Voltage_DiffAmp_CMOS < .33) || (Hys_ls4 == 1 && Voltage_DiffAmp_CMOS < .231)) {
 8003844:	4b42      	ldr	r3, [pc, #264]	@ (8003950 <main+0x748>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <main+0x65a>
 800384c:	4b41      	ldr	r3, [pc, #260]	@ (8003954 <main+0x74c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	1c18      	adds	r0, r3, #0
 8003852:	f7ff fbe3 	bl	800301c <__aeabi_f2d>
 8003856:	4a30      	ldr	r2, [pc, #192]	@ (8003918 <main+0x710>)
 8003858:	4b30      	ldr	r3, [pc, #192]	@ (800391c <main+0x714>)
 800385a:	f7fc fdfd 	bl	8000458 <__aeabi_dcmplt>
 800385e:	1e03      	subs	r3, r0, #0
 8003860:	d10e      	bne.n	8003880 <main+0x678>
 8003862:	4b3b      	ldr	r3, [pc, #236]	@ (8003950 <main+0x748>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d112      	bne.n	8003890 <main+0x688>
 800386a:	4b3a      	ldr	r3, [pc, #232]	@ (8003954 <main+0x74c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	1c18      	adds	r0, r3, #0
 8003870:	f7ff fbd4 	bl	800301c <__aeabi_f2d>
 8003874:	4a2a      	ldr	r2, [pc, #168]	@ (8003920 <main+0x718>)
 8003876:	4b2b      	ldr	r3, [pc, #172]	@ (8003924 <main+0x71c>)
 8003878:	f7fc fdee 	bl	8000458 <__aeabi_dcmplt>
 800387c:	1e03      	subs	r3, r0, #0
 800387e:	d007      	beq.n	8003890 <main+0x688>
                  Set_LS_3();
 8003880:	f001 fdea 	bl	8005458 <Set_LS_3>
                  state = LS_3;
 8003884:	4b28      	ldr	r3, [pc, #160]	@ (8003928 <main+0x720>)
 8003886:	2203      	movs	r2, #3
 8003888:	701a      	strb	r2, [r3, #0]
                  Hys_ls4 = 1; // Reset Hys_ls4 when leaviQ21aZaqw21	AQ2Ang LS_4
 800388a:	4b31      	ldr	r3, [pc, #196]	@ (8003950 <main+0x748>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]
              }

              // Update hysteresis flag based on remaining in LS_4
              if (Voltage_DiffAmp_CMOS > .429) {
 8003890:	4b30      	ldr	r3, [pc, #192]	@ (8003954 <main+0x74c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	1c18      	adds	r0, r3, #0
 8003896:	f7ff fbc1 	bl	800301c <__aeabi_f2d>
 800389a:	4a2a      	ldr	r2, [pc, #168]	@ (8003944 <main+0x73c>)
 800389c:	4b2a      	ldr	r3, [pc, #168]	@ (8003948 <main+0x740>)
 800389e:	f7fc fdef 	bl	8000480 <__aeabi_dcmpgt>
 80038a2:	1e03      	subs	r3, r0, #0
 80038a4:	d100      	bne.n	80038a8 <main+0x6a0>
                  Hys_ls4 = 0;
              }

              break;
 80038a6:	e135      	b.n	8003b14 <main+0x90c>
                  Hys_ls4 = 0;
 80038a8:	4b29      	ldr	r3, [pc, #164]	@ (8003950 <main+0x748>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
              break;
 80038ae:	e131      	b.n	8003b14 <main+0x90c>

          case LS_3:
        	  Switch_State = 3;
 80038b0:	4b16      	ldr	r3, [pc, #88]	@ (800390c <main+0x704>)
 80038b2:	2203      	movs	r2, #3
 80038b4:	601a      	str	r2, [r3, #0]
              static int Hys_ls3 = 1;
              Set_LS_3();
 80038b6:	f001 fdcf 	bl	8005458 <Set_LS_3>
              AdjustStateTo2();
 80038ba:	f000 ff59 	bl	8004770 <AdjustStateTo2>

              // Transitioning to LS_2 or LS_4 based on conditions
              if ((Hys_ls3 == 0 && Voltage_DiffAmp_CMOS < .33) || (Hys_ls3 == 1 && Voltage_DiffAmp_CMOS < .231)) {
 80038be:	4b26      	ldr	r3, [pc, #152]	@ (8003958 <main+0x750>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10a      	bne.n	80038dc <main+0x6d4>
 80038c6:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <main+0x74c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	1c18      	adds	r0, r3, #0
 80038cc:	f7ff fba6 	bl	800301c <__aeabi_f2d>
 80038d0:	4a11      	ldr	r2, [pc, #68]	@ (8003918 <main+0x710>)
 80038d2:	4b12      	ldr	r3, [pc, #72]	@ (800391c <main+0x714>)
 80038d4:	f7fc fdc0 	bl	8000458 <__aeabi_dcmplt>
 80038d8:	1e03      	subs	r3, r0, #0
 80038da:	d10e      	bne.n	80038fa <main+0x6f2>
 80038dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003958 <main+0x750>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d13d      	bne.n	8003960 <main+0x758>
 80038e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <main+0x74c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	1c18      	adds	r0, r3, #0
 80038ea:	f7ff fb97 	bl	800301c <__aeabi_f2d>
 80038ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003920 <main+0x718>)
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <main+0x71c>)
 80038f2:	f7fc fdb1 	bl	8000458 <__aeabi_dcmplt>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d032      	beq.n	8003960 <main+0x758>
                  Set_LS_2();
 80038fa:	f001 fd6b 	bl	80053d4 <Set_LS_2>
                  state = LS_2;
 80038fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003928 <main+0x720>)
 8003900:	2202      	movs	r2, #2
 8003902:	701a      	strb	r2, [r3, #0]
                  // Indicate entering LS_2 from LS_3
                  entered_LS2_from_LS3 = 1;
 8003904:	4b15      	ldr	r3, [pc, #84]	@ (800395c <main+0x754>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e04f      	b.n	80039ac <main+0x7a4>
 800390c:	20000318 	.word	0x20000318
 8003910:	20000004 	.word	0x20000004
 8003914:	20000310 	.word	0x20000310
 8003918:	51eb851f 	.word	0x51eb851f
 800391c:	3fd51eb8 	.word	0x3fd51eb8
 8003920:	72b020c5 	.word	0x72b020c5
 8003924:	3fcd9168 	.word	0x3fcd9168
 8003928:	2000034c 	.word	0x2000034c
 800392c:	20000344 	.word	0x20000344
 8003930:	5c28f5c3 	.word	0x5c28f5c3
 8003934:	4007c28f 	.word	0x4007c28f
 8003938:	df3b645a 	.word	0xdf3b645a
 800393c:	40088d4f 	.word	0x40088d4f
 8003940:	20000348 	.word	0x20000348
 8003944:	6a7ef9db 	.word	0x6a7ef9db
 8003948:	3fdb74bc 	.word	0x3fdb74bc
 800394c:	20000008 	.word	0x20000008
 8003950:	2000000c 	.word	0x2000000c
 8003954:	20000308 	.word	0x20000308
 8003958:	20000010 	.word	0x20000010
 800395c:	2000033c 	.word	0x2000033c
              } else if ((Hys_ls3 == 0 && Voltage_DiffAmp_CMOS > 2.97) || (Hys_ls3 == 1 && Voltage_DiffAmp_CMOS > 3.069)) {
 8003960:	4b70      	ldr	r3, [pc, #448]	@ (8003b24 <main+0x91c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <main+0x776>
 8003968:	4b6f      	ldr	r3, [pc, #444]	@ (8003b28 <main+0x920>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	1c18      	adds	r0, r3, #0
 800396e:	f7ff fb55 	bl	800301c <__aeabi_f2d>
 8003972:	4a6e      	ldr	r2, [pc, #440]	@ (8003b2c <main+0x924>)
 8003974:	4b6e      	ldr	r3, [pc, #440]	@ (8003b30 <main+0x928>)
 8003976:	f7fc fd83 	bl	8000480 <__aeabi_dcmpgt>
 800397a:	1e03      	subs	r3, r0, #0
 800397c:	d10e      	bne.n	800399c <main+0x794>
 800397e:	4b69      	ldr	r3, [pc, #420]	@ (8003b24 <main+0x91c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d112      	bne.n	80039ac <main+0x7a4>
 8003986:	4b68      	ldr	r3, [pc, #416]	@ (8003b28 <main+0x920>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	1c18      	adds	r0, r3, #0
 800398c:	f7ff fb46 	bl	800301c <__aeabi_f2d>
 8003990:	4a68      	ldr	r2, [pc, #416]	@ (8003b34 <main+0x92c>)
 8003992:	4b69      	ldr	r3, [pc, #420]	@ (8003b38 <main+0x930>)
 8003994:	f7fc fd74 	bl	8000480 <__aeabi_dcmpgt>
 8003998:	1e03      	subs	r3, r0, #0
 800399a:	d007      	beq.n	80039ac <main+0x7a4>
                  Set_LS_4();
 800399c:	f001 fd9e 	bl	80054dc <Set_LS_4>
                  state = LS_4;
 80039a0:	4b66      	ldr	r3, [pc, #408]	@ (8003b3c <main+0x934>)
 80039a2:	2204      	movs	r2, #4
 80039a4:	701a      	strb	r2, [r3, #0]
                  // Reset flags related to LS_3 transitions
                  entered_LS3_from_LS2 = 0;
 80039a6:	4b66      	ldr	r3, [pc, #408]	@ (8003b40 <main+0x938>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
              }

              // Update hysteresis flag based on voltage thresholds
              if (Voltage_DiffAmp_CMOS > .429 || Voltage_DiffAmp_CMOS > 3.069) {
 80039ac:	4b5e      	ldr	r3, [pc, #376]	@ (8003b28 <main+0x920>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	1c18      	adds	r0, r3, #0
 80039b2:	f7ff fb33 	bl	800301c <__aeabi_f2d>
 80039b6:	4a63      	ldr	r2, [pc, #396]	@ (8003b44 <main+0x93c>)
 80039b8:	4b63      	ldr	r3, [pc, #396]	@ (8003b48 <main+0x940>)
 80039ba:	f7fc fd61 	bl	8000480 <__aeabi_dcmpgt>
 80039be:	1e03      	subs	r3, r0, #0
 80039c0:	d10a      	bne.n	80039d8 <main+0x7d0>
 80039c2:	4b59      	ldr	r3, [pc, #356]	@ (8003b28 <main+0x920>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	1c18      	adds	r0, r3, #0
 80039c8:	f7ff fb28 	bl	800301c <__aeabi_f2d>
 80039cc:	4a59      	ldr	r2, [pc, #356]	@ (8003b34 <main+0x92c>)
 80039ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003b38 <main+0x930>)
 80039d0:	f7fc fd56 	bl	8000480 <__aeabi_dcmpgt>
 80039d4:	1e03      	subs	r3, r0, #0
 80039d6:	d003      	beq.n	80039e0 <main+0x7d8>
                  Hys_ls3 = 0;
 80039d8:	4b52      	ldr	r3, [pc, #328]	@ (8003b24 <main+0x91c>)
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
              } else {
                  Hys_ls3 = 1;
              }

              break;
 80039de:	e099      	b.n	8003b14 <main+0x90c>
                  Hys_ls3 = 1;
 80039e0:	4b50      	ldr	r3, [pc, #320]	@ (8003b24 <main+0x91c>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
              break;
 80039e6:	e095      	b.n	8003b14 <main+0x90c>

          case LS_2:
        	  Switch_State = 2;
 80039e8:	4b58      	ldr	r3, [pc, #352]	@ (8003b4c <main+0x944>)
 80039ea:	2202      	movs	r2, #2
 80039ec:	601a      	str	r2, [r3, #0]
              static int Hys_ls2 = 1; // For persistence across state transitions
              Set_LS_2();
 80039ee:	f001 fcf1 	bl	80053d4 <Set_LS_2>
              AdjustStateTo1();
 80039f2:	f000 fe8f 	bl	8004714 <AdjustStateTo1>

              // Transitioning from LS_2 to LS_1
              if ((Hys_ls2 == 0 && Voltage_DiffAmp_CMOS < .33) || (Hys_ls2 == 1 && Voltage_DiffAmp_CMOS < .231)) {
 80039f6:	4b56      	ldr	r3, [pc, #344]	@ (8003b50 <main+0x948>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <main+0x80c>
 80039fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003b28 <main+0x920>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	1c18      	adds	r0, r3, #0
 8003a04:	f7ff fb0a 	bl	800301c <__aeabi_f2d>
 8003a08:	4a52      	ldr	r2, [pc, #328]	@ (8003b54 <main+0x94c>)
 8003a0a:	4b53      	ldr	r3, [pc, #332]	@ (8003b58 <main+0x950>)
 8003a0c:	f7fc fd24 	bl	8000458 <__aeabi_dcmplt>
 8003a10:	1e03      	subs	r3, r0, #0
 8003a12:	d10e      	bne.n	8003a32 <main+0x82a>
 8003a14:	4b4e      	ldr	r3, [pc, #312]	@ (8003b50 <main+0x948>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d113      	bne.n	8003a44 <main+0x83c>
 8003a1c:	4b42      	ldr	r3, [pc, #264]	@ (8003b28 <main+0x920>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	1c18      	adds	r0, r3, #0
 8003a22:	f7ff fafb 	bl	800301c <__aeabi_f2d>
 8003a26:	4a4d      	ldr	r2, [pc, #308]	@ (8003b5c <main+0x954>)
 8003a28:	4b4d      	ldr	r3, [pc, #308]	@ (8003b60 <main+0x958>)
 8003a2a:	f7fc fd15 	bl	8000458 <__aeabi_dcmplt>
 8003a2e:	1e03      	subs	r3, r0, #0
 8003a30:	d008      	beq.n	8003a44 <main+0x83c>
                  Set_LS_1();
 8003a32:	f001 fc8d 	bl	8005350 <Set_LS_1>
                  state = LS_1;
 8003a36:	4b41      	ldr	r3, [pc, #260]	@ (8003b3c <main+0x934>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
                  // Reset flags related to LS_2 transitions
                  entered_LS2_from_LS3 = 0;
 8003a3c:	4b49      	ldr	r3, [pc, #292]	@ (8003b64 <main+0x95c>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e025      	b.n	8003a90 <main+0x888>
              } else if ((Hys_ls2 == 0 && Voltage_DiffAmp_CMOS > 2.97) || (Hys_ls2 == 1 && Voltage_DiffAmp_CMOS > 3.069)) {
 8003a44:	4b42      	ldr	r3, [pc, #264]	@ (8003b50 <main+0x948>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <main+0x85a>
 8003a4c:	4b36      	ldr	r3, [pc, #216]	@ (8003b28 <main+0x920>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	1c18      	adds	r0, r3, #0
 8003a52:	f7ff fae3 	bl	800301c <__aeabi_f2d>
 8003a56:	4a35      	ldr	r2, [pc, #212]	@ (8003b2c <main+0x924>)
 8003a58:	4b35      	ldr	r3, [pc, #212]	@ (8003b30 <main+0x928>)
 8003a5a:	f7fc fd11 	bl	8000480 <__aeabi_dcmpgt>
 8003a5e:	1e03      	subs	r3, r0, #0
 8003a60:	d10e      	bne.n	8003a80 <main+0x878>
 8003a62:	4b3b      	ldr	r3, [pc, #236]	@ (8003b50 <main+0x948>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d112      	bne.n	8003a90 <main+0x888>
 8003a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b28 <main+0x920>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	1c18      	adds	r0, r3, #0
 8003a70:	f7ff fad4 	bl	800301c <__aeabi_f2d>
 8003a74:	4a2f      	ldr	r2, [pc, #188]	@ (8003b34 <main+0x92c>)
 8003a76:	4b30      	ldr	r3, [pc, #192]	@ (8003b38 <main+0x930>)
 8003a78:	f7fc fd02 	bl	8000480 <__aeabi_dcmpgt>
 8003a7c:	1e03      	subs	r3, r0, #0
 8003a7e:	d007      	beq.n	8003a90 <main+0x888>
                  Set_LS_3();
 8003a80:	f001 fcea 	bl	8005458 <Set_LS_3>
                  state = LS_3;
 8003a84:	4b2d      	ldr	r3, [pc, #180]	@ (8003b3c <main+0x934>)
 8003a86:	2203      	movs	r2, #3
 8003a88:	701a      	strb	r2, [r3, #0]
                  // Indicate entering LS_3 from LS_2
                  entered_LS3_from_LS2 = 1;
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b40 <main+0x938>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
              }

              // Update hysteresis flag based on voltage thresholds
              if (Voltage_DiffAmp_CMOS > .429 || Voltage_DiffAmp_CMOS > 3.069) {
 8003a90:	4b25      	ldr	r3, [pc, #148]	@ (8003b28 <main+0x920>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	1c18      	adds	r0, r3, #0
 8003a96:	f7ff fac1 	bl	800301c <__aeabi_f2d>
 8003a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003b44 <main+0x93c>)
 8003a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b48 <main+0x940>)
 8003a9e:	f7fc fcef 	bl	8000480 <__aeabi_dcmpgt>
 8003aa2:	1e03      	subs	r3, r0, #0
 8003aa4:	d10a      	bne.n	8003abc <main+0x8b4>
 8003aa6:	4b20      	ldr	r3, [pc, #128]	@ (8003b28 <main+0x920>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	1c18      	adds	r0, r3, #0
 8003aac:	f7ff fab6 	bl	800301c <__aeabi_f2d>
 8003ab0:	4a20      	ldr	r2, [pc, #128]	@ (8003b34 <main+0x92c>)
 8003ab2:	4b21      	ldr	r3, [pc, #132]	@ (8003b38 <main+0x930>)
 8003ab4:	f7fc fce4 	bl	8000480 <__aeabi_dcmpgt>
 8003ab8:	1e03      	subs	r3, r0, #0
 8003aba:	d003      	beq.n	8003ac4 <main+0x8bc>
                  Hys_ls2 = 0;
 8003abc:	4b24      	ldr	r3, [pc, #144]	@ (8003b50 <main+0x948>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
              } else {
                  Hys_ls2 = 1;
              }

              break;
 8003ac2:	e027      	b.n	8003b14 <main+0x90c>
                  Hys_ls2 = 1;
 8003ac4:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <main+0x948>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
              break;
 8003aca:	e023      	b.n	8003b14 <main+0x90c>

          case LS_1:
        	  Switch_State = 1;
 8003acc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b4c <main+0x944>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
              int Hys_ls1 = 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	2284      	movs	r2, #132	@ 0x84
 8003ad6:	2118      	movs	r1, #24
 8003ad8:	1852      	adds	r2, r2, r1
 8003ada:	19d2      	adds	r2, r2, r7
 8003adc:	6013      	str	r3, [r2, #0]
              Set_LS_1();
 8003ade:	f001 fc37 	bl	8005350 <Set_LS_1>
              AdjustStateTo0();
 8003ae2:	f000 fde9 	bl	80046b8 <AdjustStateTo0>
              if (Voltage_DiffAmp_CMOS >= 2.97) { // Using the special threshold for moving up from a very low state
 8003ae6:	4b10      	ldr	r3, [pc, #64]	@ (8003b28 <main+0x920>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	1c18      	adds	r0, r3, #0
 8003aec:	f7ff fa96 	bl	800301c <__aeabi_f2d>
 8003af0:	4a0e      	ldr	r2, [pc, #56]	@ (8003b2c <main+0x924>)
 8003af2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b30 <main+0x928>)
 8003af4:	f7fc fcce 	bl	8000494 <__aeabi_dcmpge>
 8003af8:	1e03      	subs	r3, r0, #0
 8003afa:	d100      	bne.n	8003afe <main+0x8f6>
                  Set_LS_2();
                  state = LS_2;
              }
              break;
 8003afc:	e00a      	b.n	8003b14 <main+0x90c>
                  Set_LS_2();
 8003afe:	f001 fc69 	bl	80053d4 <Set_LS_2>
                  state = LS_2;
 8003b02:	4b0e      	ldr	r3, [pc, #56]	@ (8003b3c <main+0x934>)
 8003b04:	2202      	movs	r2, #2
 8003b06:	701a      	strb	r2, [r3, #0]
              break;
 8003b08:	e004      	b.n	8003b14 <main+0x90c>

          default: {
                  Reset_The_Whole_B();
 8003b0a:	f001 fbcd 	bl	80052a8 <Reset_The_Whole_B>
                  state = CASE_INIT;
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <main+0x934>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
          }
          }

      measurement_num++;
 8003b14:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <main+0x960>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	4b13      	ldr	r3, [pc, #76]	@ (8003b68 <main+0x960>)
 8003b1c:	601a      	str	r2, [r3, #0]
  {
 8003b1e:	f7ff fbf2 	bl	8003306 <main+0xfe>
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	20000010 	.word	0x20000010
 8003b28:	20000308 	.word	0x20000308
 8003b2c:	5c28f5c3 	.word	0x5c28f5c3
 8003b30:	4007c28f 	.word	0x4007c28f
 8003b34:	df3b645a 	.word	0xdf3b645a
 8003b38:	40088d4f 	.word	0x40088d4f
 8003b3c:	2000034c 	.word	0x2000034c
 8003b40:	20000340 	.word	0x20000340
 8003b44:	6a7ef9db 	.word	0x6a7ef9db
 8003b48:	3fdb74bc 	.word	0x3fdb74bc
 8003b4c:	20000318 	.word	0x20000318
 8003b50:	20000014 	.word	0x20000014
 8003b54:	51eb851f 	.word	0x51eb851f
 8003b58:	3fd51eb8 	.word	0x3fd51eb8
 8003b5c:	72b020c5 	.word	0x72b020c5
 8003b60:	3fcd9168 	.word	0x3fcd9168
 8003b64:	2000033c 	.word	0x2000033c
 8003b68:	20000334 	.word	0x20000334

08003b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b099      	sub	sp, #100	@ 0x64
 8003b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b72:	242c      	movs	r4, #44	@ 0x2c
 8003b74:	193b      	adds	r3, r7, r4
 8003b76:	0018      	movs	r0, r3
 8003b78:	2334      	movs	r3, #52	@ 0x34
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f005 fba5 	bl	80092cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b82:	2318      	movs	r3, #24
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	0018      	movs	r0, r3
 8003b88:	2314      	movs	r3, #20
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	f005 fb9d 	bl	80092cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b92:	003b      	movs	r3, r7
 8003b94:	0018      	movs	r0, r3
 8003b96:	2318      	movs	r3, #24
 8003b98:	001a      	movs	r2, r3
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	f005 fb96 	bl	80092cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ba0:	4b29      	ldr	r3, [pc, #164]	@ (8003c48 <SystemClock_Config+0xdc>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a29      	ldr	r2, [pc, #164]	@ (8003c4c <SystemClock_Config+0xe0>)
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	4b27      	ldr	r3, [pc, #156]	@ (8003c48 <SystemClock_Config+0xdc>)
 8003baa:	2180      	movs	r1, #128	@ 0x80
 8003bac:	0109      	lsls	r1, r1, #4
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003bb2:	0021      	movs	r1, r4
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bba:	187b      	adds	r3, r7, r1
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	2210      	movs	r2, #16
 8003bc4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2202      	movs	r2, #2
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2200      	movs	r2, #0
 8003bd0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	2280      	movs	r2, #128	@ 0x80
 8003bd6:	02d2      	lsls	r2, r2, #11
 8003bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003bda:	187b      	adds	r3, r7, r1
 8003bdc:	2280      	movs	r2, #128	@ 0x80
 8003bde:	03d2      	lsls	r2, r2, #15
 8003be0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003be2:	187b      	adds	r3, r7, r1
 8003be4:	0018      	movs	r0, r3
 8003be6:	f002 ff9d 	bl	8006b24 <HAL_RCC_OscConfig>
 8003bea:	1e03      	subs	r3, r0, #0
 8003bec:	d001      	beq.n	8003bf2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003bee:	f001 fdeb 	bl	80057c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bf2:	2118      	movs	r1, #24
 8003bf4:	187b      	adds	r3, r7, r1
 8003bf6:	220f      	movs	r2, #15
 8003bf8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bfa:	187b      	adds	r3, r7, r1
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	2200      	movs	r2, #0
 8003c0a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	2101      	movs	r1, #1
 8003c16:	0018      	movs	r0, r3
 8003c18:	f003 fb00 	bl	800721c <HAL_RCC_ClockConfig>
 8003c1c:	1e03      	subs	r3, r0, #0
 8003c1e:	d001      	beq.n	8003c24 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003c20:	f001 fdd2 	bl	80057c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c24:	003b      	movs	r3, r7
 8003c26:	2202      	movs	r2, #2
 8003c28:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c2a:	003b      	movs	r3, r7
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c30:	003b      	movs	r3, r7
 8003c32:	0018      	movs	r0, r3
 8003c34:	f003 fd16 	bl	8007664 <HAL_RCCEx_PeriphCLKConfig>
 8003c38:	1e03      	subs	r3, r0, #0
 8003c3a:	d001      	beq.n	8003c40 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003c3c:	f001 fdc4 	bl	80057c8 <Error_Handler>
  }
}
 8003c40:	46c0      	nop			@ (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b019      	add	sp, #100	@ 0x64
 8003c46:	bd90      	pop	{r4, r7, pc}
 8003c48:	40007000 	.word	0x40007000
 8003c4c:	ffffe7ff 	.word	0xffffe7ff

08003c50 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
   // ADC_Select_VoltageCMOS();
   // ADC_Select_Current18650();
   // ADC_Select_CurrentCMOS();
  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c56:	003b      	movs	r3, r7
 8003c58:	0018      	movs	r0, r3
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	001a      	movs	r2, r3
 8003c5e:	2100      	movs	r1, #0
 8003c60:	f005 fb34 	bl	80092cc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003c64:	4b21      	ldr	r3, [pc, #132]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003c66:	4a22      	ldr	r2, [pc, #136]	@ (8003cf0 <MX_ADC_Init+0xa0>)
 8003c68:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003c6a:	4b20      	ldr	r3, [pc, #128]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c70:	4b1e      	ldr	r3, [pc, #120]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003c72:	2280      	movs	r2, #128	@ 0x80
 8003c74:	0612      	lsls	r2, r2, #24
 8003c76:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003c78:	4b1c      	ldr	r3, [pc, #112]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8003c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003c80:	2207      	movs	r2, #7
 8003c82:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003c84:	4b19      	ldr	r3, [pc, #100]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c8a:	4b18      	ldr	r3, [pc, #96]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003c90:	4b16      	ldr	r3, [pc, #88]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003c92:	2220      	movs	r2, #32
 8003c94:	2101      	movs	r1, #1
 8003c96:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003c98:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003c9a:	2221      	movs	r2, #33	@ 0x21
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ca0:	4b12      	ldr	r3, [pc, #72]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ca6:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003ca8:	22c2      	movs	r2, #194	@ 0xc2
 8003caa:	32ff      	adds	r2, #255	@ 0xff
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003cae:	4b0f      	ldr	r3, [pc, #60]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003cb0:	222c      	movs	r2, #44	@ 0x2c
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003cb8:	2204      	movs	r2, #4
 8003cba:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003cc8:	4b08      	ldr	r3, [pc, #32]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003cce:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003cd4:	4b05      	ldr	r3, [pc, #20]	@ (8003cec <MX_ADC_Init+0x9c>)
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f001 ffc6 	bl	8005c68 <HAL_ADC_Init>
 8003cdc:	1e03      	subs	r3, r0, #0
 8003cde:	d001      	beq.n	8003ce4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003ce0:	f001 fd72 	bl	80057c8 <Error_Handler>
  }

}
 8003ce4:	46c0      	nop			@ (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b002      	add	sp, #8
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	2000021c 	.word	0x2000021c
 8003cf0:	40012400 	.word	0x40012400

08003cf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003cf8:	4b14      	ldr	r3, [pc, #80]	@ (8003d4c <MX_USART2_UART_Init+0x58>)
 8003cfa:	4a15      	ldr	r2, [pc, #84]	@ (8003d50 <MX_USART2_UART_Init+0x5c>)
 8003cfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003cfe:	4b13      	ldr	r3, [pc, #76]	@ (8003d4c <MX_USART2_UART_Init+0x58>)
 8003d00:	22e1      	movs	r2, #225	@ 0xe1
 8003d02:	0252      	lsls	r2, r2, #9
 8003d04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d06:	4b11      	ldr	r3, [pc, #68]	@ (8003d4c <MX_USART2_UART_Init+0x58>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d4c <MX_USART2_UART_Init+0x58>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <MX_USART2_UART_Init+0x58>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d18:	4b0c      	ldr	r3, [pc, #48]	@ (8003d4c <MX_USART2_UART_Init+0x58>)
 8003d1a:	220c      	movs	r2, #12
 8003d1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <MX_USART2_UART_Init+0x58>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d24:	4b09      	ldr	r3, [pc, #36]	@ (8003d4c <MX_USART2_UART_Init+0x58>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d2a:	4b08      	ldr	r3, [pc, #32]	@ (8003d4c <MX_USART2_UART_Init+0x58>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d30:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <MX_USART2_UART_Init+0x58>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d36:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <MX_USART2_UART_Init+0x58>)
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f003 fdbf 	bl	80078bc <HAL_UART_Init>
 8003d3e:	1e03      	subs	r3, r0, #0
 8003d40:	d001      	beq.n	8003d46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003d42:	f001 fd41 	bl	80057c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000278 	.word	0x20000278
 8003d50:	40004400 	.word	0x40004400

08003d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b089      	sub	sp, #36	@ 0x24
 8003d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5a:	240c      	movs	r4, #12
 8003d5c:	193b      	adds	r3, r7, r4
 8003d5e:	0018      	movs	r0, r3
 8003d60:	2314      	movs	r3, #20
 8003d62:	001a      	movs	r2, r3
 8003d64:	2100      	movs	r1, #0
 8003d66:	f005 fab1 	bl	80092cc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d6a:	4b54      	ldr	r3, [pc, #336]	@ (8003ebc <MX_GPIO_Init+0x168>)
 8003d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d6e:	4b53      	ldr	r3, [pc, #332]	@ (8003ebc <MX_GPIO_Init+0x168>)
 8003d70:	2104      	movs	r1, #4
 8003d72:	430a      	orrs	r2, r1
 8003d74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d76:	4b51      	ldr	r3, [pc, #324]	@ (8003ebc <MX_GPIO_Init+0x168>)
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	4b4e      	ldr	r3, [pc, #312]	@ (8003ebc <MX_GPIO_Init+0x168>)
 8003d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d86:	4b4d      	ldr	r3, [pc, #308]	@ (8003ebc <MX_GPIO_Init+0x168>)
 8003d88:	2101      	movs	r1, #1
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d8e:	4b4b      	ldr	r3, [pc, #300]	@ (8003ebc <MX_GPIO_Init+0x168>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	2201      	movs	r2, #1
 8003d94:	4013      	ands	r3, r2
 8003d96:	607b      	str	r3, [r7, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9a:	4b48      	ldr	r3, [pc, #288]	@ (8003ebc <MX_GPIO_Init+0x168>)
 8003d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d9e:	4b47      	ldr	r3, [pc, #284]	@ (8003ebc <MX_GPIO_Init+0x168>)
 8003da0:	2102      	movs	r1, #2
 8003da2:	430a      	orrs	r2, r1
 8003da4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003da6:	4b45      	ldr	r3, [pc, #276]	@ (8003ebc <MX_GPIO_Init+0x168>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003daa:	2202      	movs	r2, #2
 8003dac:	4013      	ands	r3, r2
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin|Discrete_Bit_1_Pin|Discrete_Bit_2_Pin|LS_8_Pin
 8003db2:	4943      	ldr	r1, [pc, #268]	@ (8003ec0 <MX_GPIO_Init+0x16c>)
 8003db4:	23a0      	movs	r3, #160	@ 0xa0
 8003db6:	05db      	lsls	r3, r3, #23
 8003db8:	2200      	movs	r2, #0
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f002 fe95 	bl	8006aea <HAL_GPIO_WritePin>
                          |LS_HIGH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, User_Input_Status_Light_Pin|User_Input_Status_Light_Green_Pin|User_Input_Status_Light_Blue_Pin|LS_1_Pin
 8003dc0:	4940      	ldr	r1, [pc, #256]	@ (8003ec4 <MX_GPIO_Init+0x170>)
 8003dc2:	4b41      	ldr	r3, [pc, #260]	@ (8003ec8 <MX_GPIO_Init+0x174>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f002 fe8f 	bl	8006aea <HAL_GPIO_WritePin>
                          |LS_2_Pin|LS_3_Pin|LS_4_Pin|Threshold_Red_Pin
                          |Threshold_Green_Pin|Threshold_Blue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LS_LOW_Pin|LS_5_Pin|LS_6_Pin|LS_7_Pin, GPIO_PIN_RESET);
 8003dcc:	23f0      	movs	r3, #240	@ 0xf0
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	483e      	ldr	r0, [pc, #248]	@ (8003ecc <MX_GPIO_Init+0x178>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	f002 fe88 	bl	8006aea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Minus_Pin Plus_Pin */
  GPIO_InitStruct.Pin = Minus_Pin|Plus_Pin;
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	2203      	movs	r2, #3
 8003dde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003de0:	193b      	adds	r3, r7, r4
 8003de2:	2200      	movs	r2, #0
 8003de4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	193b      	adds	r3, r7, r4
 8003de8:	2200      	movs	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dec:	193b      	adds	r3, r7, r4
 8003dee:	4a37      	ldr	r2, [pc, #220]	@ (8003ecc <MX_GPIO_Init+0x178>)
 8003df0:	0019      	movs	r1, r3
 8003df2:	0010      	movs	r0, r2
 8003df4:	f002 fcde 	bl	80067b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Discrete_Bit_0_Pin Discrete_Bit_1_Pin Discrete_Bit_2_Pin LS_8_Pin
                           LS_HIGH_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_0_Pin|Discrete_Bit_1_Pin|Discrete_Bit_2_Pin|LS_8_Pin
 8003df8:	193b      	adds	r3, r7, r4
 8003dfa:	4a31      	ldr	r2, [pc, #196]	@ (8003ec0 <MX_GPIO_Init+0x16c>)
 8003dfc:	601a      	str	r2, [r3, #0]
                          |LS_HIGH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dfe:	193b      	adds	r3, r7, r4
 8003e00:	2201      	movs	r2, #1
 8003e02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	193b      	adds	r3, r7, r4
 8003e06:	2200      	movs	r2, #0
 8003e08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0a:	193b      	adds	r3, r7, r4
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e10:	193a      	adds	r2, r7, r4
 8003e12:	23a0      	movs	r3, #160	@ 0xa0
 8003e14:	05db      	lsls	r3, r3, #23
 8003e16:	0011      	movs	r1, r2
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f002 fccb 	bl	80067b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : User_Input_Status_Light_Pin User_Input_Status_Light_Green_Pin User_Input_Status_Light_Blue_Pin LS_1_Pin
                           LS_2_Pin LS_3_Pin LS_4_Pin Threshold_Red_Pin
                           Threshold_Green_Pin Threshold_Blue_Pin */
  GPIO_InitStruct.Pin = User_Input_Status_Light_Pin|User_Input_Status_Light_Green_Pin|User_Input_Status_Light_Blue_Pin|LS_1_Pin
 8003e1e:	193b      	adds	r3, r7, r4
 8003e20:	4a28      	ldr	r2, [pc, #160]	@ (8003ec4 <MX_GPIO_Init+0x170>)
 8003e22:	601a      	str	r2, [r3, #0]
                          |LS_2_Pin|LS_3_Pin|LS_4_Pin|Threshold_Red_Pin
                          |Threshold_Green_Pin|Threshold_Blue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e24:	193b      	adds	r3, r7, r4
 8003e26:	2201      	movs	r2, #1
 8003e28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2a:	193b      	adds	r3, r7, r4
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e30:	193b      	adds	r3, r7, r4
 8003e32:	2200      	movs	r2, #0
 8003e34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e36:	193b      	adds	r3, r7, r4
 8003e38:	4a23      	ldr	r2, [pc, #140]	@ (8003ec8 <MX_GPIO_Init+0x174>)
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	0010      	movs	r0, r2
 8003e3e:	f002 fcb9 	bl	80067b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS_LOW_Pin LS_5_Pin LS_6_Pin LS_7_Pin */
  GPIO_InitStruct.Pin = LS_LOW_Pin|LS_5_Pin|LS_6_Pin|LS_7_Pin;
 8003e42:	0021      	movs	r1, r4
 8003e44:	187b      	adds	r3, r7, r1
 8003e46:	22f0      	movs	r2, #240	@ 0xf0
 8003e48:	0092      	lsls	r2, r2, #2
 8003e4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e4c:	000c      	movs	r4, r1
 8003e4e:	193b      	adds	r3, r7, r4
 8003e50:	2201      	movs	r2, #1
 8003e52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	193b      	adds	r3, r7, r4
 8003e56:	2200      	movs	r2, #0
 8003e58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e60:	193b      	adds	r3, r7, r4
 8003e62:	4a1a      	ldr	r2, [pc, #104]	@ (8003ecc <MX_GPIO_Init+0x178>)
 8003e64:	0019      	movs	r1, r3
 8003e66:	0010      	movs	r0, r2
 8003e68:	f002 fca4 	bl	80067b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_INPUT_DATA_Pin */
  GPIO_InitStruct.Pin = SD_INPUT_DATA_Pin;
 8003e6c:	0021      	movs	r1, r4
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2280      	movs	r2, #128	@ 0x80
 8003e72:	0052      	lsls	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e76:	000c      	movs	r4, r1
 8003e78:	193b      	adds	r3, r7, r4
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7e:	193b      	adds	r3, r7, r4
 8003e80:	2200      	movs	r2, #0
 8003e82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_INPUT_DATA_GPIO_Port, &GPIO_InitStruct);
 8003e84:	193b      	adds	r3, r7, r4
 8003e86:	4a10      	ldr	r2, [pc, #64]	@ (8003ec8 <MX_GPIO_Init+0x174>)
 8003e88:	0019      	movs	r1, r3
 8003e8a:	0010      	movs	r0, r2
 8003e8c:	f002 fc92 	bl	80067b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_INPUT_DIGIT_Pin */
  GPIO_InitStruct.Pin = SD_INPUT_DIGIT_Pin;
 8003e90:	0021      	movs	r1, r4
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	2280      	movs	r2, #128	@ 0x80
 8003e96:	0092      	lsls	r2, r2, #2
 8003e98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e9a:	187b      	adds	r3, r7, r1
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_INPUT_DIGIT_GPIO_Port, &GPIO_InitStruct);
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	4a07      	ldr	r2, [pc, #28]	@ (8003ec8 <MX_GPIO_Init+0x174>)
 8003eaa:	0019      	movs	r1, r3
 8003eac:	0010      	movs	r0, r2
 8003eae:	f002 fc81 	bl	80067b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b009      	add	sp, #36	@ 0x24
 8003eb8:	bd90      	pop	{r4, r7, pc}
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	00000313 	.word	0x00000313
 8003ec4:	0000f03f 	.word	0x0000f03f
 8003ec8:	50000400 	.word	0x50000400
 8003ecc:	50000800 	.word	0x50000800

08003ed0 <__io_putchar>:
   set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
   /* Place your implementation of fputc here */
   /* e.g. write a character to the UART3 and Loop until the end of
    * transmission */
   // HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
   return ch;
 8003ed8:	687b      	ldr	r3, [r7, #4]
}
 8003eda:	0018      	movs	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b002      	add	sp, #8
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <Measurement_of_ADC_Voltage_18650>:
 *
 * CHSELR is set to 0x8000h (channel 15)
 * Calls ADC_Select_Voltage18650() to set channel
 * Converted values store to V_18650
 */
void Measurement_of_ADC_Voltage_18650() {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
   HAL_ADC_Stop(&hadc);
 8003eea:	4b27      	ldr	r3, [pc, #156]	@ (8003f88 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8003eec:	0018      	movs	r0, r3
 8003eee:	f002 f883 	bl	8005ff8 <HAL_ADC_Stop>
   HAL_ADC_Init(&hadc);
 8003ef2:	4b25      	ldr	r3, [pc, #148]	@ (8003f88 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f001 feb7 	bl	8005c68 <HAL_ADC_Init>
   float V_ref = 3.3;  // This is known for each micro controller from data
 8003efa:	4b24      	ldr	r3, [pc, #144]	@ (8003f8c <Measurement_of_ADC_Voltage_18650+0xa8>)
 8003efc:	60fb      	str	r3, [r7, #12]
   // sheet, V_ref = power supply in
   float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8003efe:	4b24      	ldr	r3, [pc, #144]	@ (8003f90 <Measurement_of_ADC_Voltage_18650+0xac>)
 8003f00:	60bb      	str	r3, [r7, #8]
   float V_stepSize = V_ref / ADC_resolution;
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7fc fe1b 	bl	8000b40 <__aeabi_fdiv>
 8003f0a:	1c03      	adds	r3, r0, #0
 8003f0c:	607b      	str	r3, [r7, #4]
   // ADC
   /* Start ADC Conversion for ADC1 */
   ADC1->CHSELR = 0x8000;
 8003f0e:	4b21      	ldr	r3, [pc, #132]	@ (8003f94 <Measurement_of_ADC_Voltage_18650+0xb0>)
 8003f10:	2280      	movs	r2, #128	@ 0x80
 8003f12:	0212      	lsls	r2, r2, #8
 8003f14:	629a      	str	r2, [r3, #40]	@ 0x28
   ADC_Select_Voltage18650();
 8003f16:	f000 fa0f 	bl	8004338 <ADC_Select_Voltage18650>
   HAL_ADC_Start(&hadc);
 8003f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f88 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f002 f817 	bl	8005f50 <HAL_ADC_Start>
   uint16_t rawValue1;
   if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8003f22:	2301      	movs	r3, #1
 8003f24:	425a      	negs	r2, r3
 8003f26:	4b18      	ldr	r3, [pc, #96]	@ (8003f88 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8003f28:	0011      	movs	r1, r2
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f002 f8a4 	bl	8006078 <HAL_ADC_PollForConversion>
 8003f30:	1e03      	subs	r3, r0, #0
 8003f32:	d121      	bne.n	8003f78 <Measurement_of_ADC_Voltage_18650+0x94>
      /* Read the ADC1 value */
      rawValue1 = HAL_ADC_GetValue(&hadc);
 8003f34:	4b14      	ldr	r3, [pc, #80]	@ (8003f88 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8003f36:	0018      	movs	r0, r3
 8003f38:	f002 f93a 	bl	80061b0 <HAL_ADC_GetValue>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	1cbb      	adds	r3, r7, #2
 8003f40:	801a      	strh	r2, [r3, #0]
      V_18650 = ((rawValue1 * V_stepSize) * (1/.65)); //change this math here
 8003f42:	1cbb      	adds	r3, r7, #2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7fd f91e 	bl	8001188 <__aeabi_i2f>
 8003f4c:	1c03      	adds	r3, r0, #0
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	1c18      	adds	r0, r3, #0
 8003f52:	f7fc ffdb 	bl	8000f0c <__aeabi_fmul>
 8003f56:	1c03      	adds	r3, r0, #0
 8003f58:	1c18      	adds	r0, r3, #0
 8003f5a:	f7ff f85f 	bl	800301c <__aeabi_f2d>
 8003f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f98 <Measurement_of_ADC_Voltage_18650+0xb4>)
 8003f60:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <Measurement_of_ADC_Voltage_18650+0xb8>)
 8003f62:	f7fe f947 	bl	80021f4 <__aeabi_dmul>
 8003f66:	0002      	movs	r2, r0
 8003f68:	000b      	movs	r3, r1
 8003f6a:	0010      	movs	r0, r2
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	f7ff f89d 	bl	80030ac <__aeabi_d2f>
 8003f72:	1c02      	adds	r2, r0, #0
 8003f74:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <Measurement_of_ADC_Voltage_18650+0xbc>)
 8003f76:	601a      	str	r2, [r3, #0]
   }
   HAL_ADC_Stop(&hadc);
 8003f78:	4b03      	ldr	r3, [pc, #12]	@ (8003f88 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f002 f83c 	bl	8005ff8 <HAL_ADC_Stop>
}
 8003f80:	46c0      	nop			@ (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b004      	add	sp, #16
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	2000021c 	.word	0x2000021c
 8003f8c:	40533333 	.word	0x40533333
 8003f90:	457ff000 	.word	0x457ff000
 8003f94:	40012400 	.word	0x40012400
 8003f98:	d89d89d8 	.word	0xd89d89d8
 8003f9c:	3ff89d89 	.word	0x3ff89d89
 8003fa0:	20000300 	.word	0x20000300

08003fa4 <Measurement_of_ADC_Voltage_CMOS>:
 *
 * CHSELR is set to 0x2000h (channel 13)
 * Calls ADC_Select_VoltageCMOS() to set channel
 * Converted values store to V_CMOS
 */
void Measurement_of_ADC_Voltage_CMOS() {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
   HAL_ADC_Stop(&hadc);
 8003faa:	4b27      	ldr	r3, [pc, #156]	@ (8004048 <Measurement_of_ADC_Voltage_CMOS+0xa4>)
 8003fac:	0018      	movs	r0, r3
 8003fae:	f002 f823 	bl	8005ff8 <HAL_ADC_Stop>
   HAL_ADC_Init(&hadc);
 8003fb2:	4b25      	ldr	r3, [pc, #148]	@ (8004048 <Measurement_of_ADC_Voltage_CMOS+0xa4>)
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f001 fe57 	bl	8005c68 <HAL_ADC_Init>
   float V_ref = 3.3;  // This is known for each micro controller from data
 8003fba:	4b24      	ldr	r3, [pc, #144]	@ (800404c <Measurement_of_ADC_Voltage_CMOS+0xa8>)
 8003fbc:	60fb      	str	r3, [r7, #12]
   // sheet, V_ref = power supply in
   float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8003fbe:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <Measurement_of_ADC_Voltage_CMOS+0xac>)
 8003fc0:	60bb      	str	r3, [r7, #8]
   float V_stepSize = V_ref / ADC_resolution;
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7fc fdbb 	bl	8000b40 <__aeabi_fdiv>
 8003fca:	1c03      	adds	r3, r0, #0
 8003fcc:	607b      	str	r3, [r7, #4]
   // ADC
   /* Start ADC Conversion for ADC1 */
   ADC1->CHSELR = 0x2000;
 8003fce:	4b21      	ldr	r3, [pc, #132]	@ (8004054 <Measurement_of_ADC_Voltage_CMOS+0xb0>)
 8003fd0:	2280      	movs	r2, #128	@ 0x80
 8003fd2:	0192      	lsls	r2, r2, #6
 8003fd4:	629a      	str	r2, [r3, #40]	@ 0x28
   ADC_Select_VoltageCMOS();
 8003fd6:	f000 f9d3 	bl	8004380 <ADC_Select_VoltageCMOS>
   HAL_ADC_Start(&hadc);
 8003fda:	4b1b      	ldr	r3, [pc, #108]	@ (8004048 <Measurement_of_ADC_Voltage_CMOS+0xa4>)
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f001 ffb7 	bl	8005f50 <HAL_ADC_Start>
   uint16_t rawValue1;
   if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	425a      	negs	r2, r3
 8003fe6:	4b18      	ldr	r3, [pc, #96]	@ (8004048 <Measurement_of_ADC_Voltage_CMOS+0xa4>)
 8003fe8:	0011      	movs	r1, r2
 8003fea:	0018      	movs	r0, r3
 8003fec:	f002 f844 	bl	8006078 <HAL_ADC_PollForConversion>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d121      	bne.n	8004038 <Measurement_of_ADC_Voltage_CMOS+0x94>
      /* Read the ADC1 value */
      rawValue1 = HAL_ADC_GetValue(&hadc);
 8003ff4:	4b14      	ldr	r3, [pc, #80]	@ (8004048 <Measurement_of_ADC_Voltage_CMOS+0xa4>)
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f002 f8da 	bl	80061b0 <HAL_ADC_GetValue>
 8003ffc:	0002      	movs	r2, r0
 8003ffe:	1cbb      	adds	r3, r7, #2
 8004000:	801a      	strh	r2, [r3, #0]
      V_CMOS = ((rawValue1 * V_stepSize) * (1/.65));
 8004002:	1cbb      	adds	r3, r7, #2
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	0018      	movs	r0, r3
 8004008:	f7fd f8be 	bl	8001188 <__aeabi_i2f>
 800400c:	1c03      	adds	r3, r0, #0
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	1c18      	adds	r0, r3, #0
 8004012:	f7fc ff7b 	bl	8000f0c <__aeabi_fmul>
 8004016:	1c03      	adds	r3, r0, #0
 8004018:	1c18      	adds	r0, r3, #0
 800401a:	f7fe ffff 	bl	800301c <__aeabi_f2d>
 800401e:	4a0e      	ldr	r2, [pc, #56]	@ (8004058 <Measurement_of_ADC_Voltage_CMOS+0xb4>)
 8004020:	4b0e      	ldr	r3, [pc, #56]	@ (800405c <Measurement_of_ADC_Voltage_CMOS+0xb8>)
 8004022:	f7fe f8e7 	bl	80021f4 <__aeabi_dmul>
 8004026:	0002      	movs	r2, r0
 8004028:	000b      	movs	r3, r1
 800402a:	0010      	movs	r0, r2
 800402c:	0019      	movs	r1, r3
 800402e:	f7ff f83d 	bl	80030ac <__aeabi_d2f>
 8004032:	1c02      	adds	r2, r0, #0
 8004034:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <Measurement_of_ADC_Voltage_CMOS+0xbc>)
 8004036:	601a      	str	r2, [r3, #0]



   }
   HAL_ADC_Stop(&hadc);
 8004038:	4b03      	ldr	r3, [pc, #12]	@ (8004048 <Measurement_of_ADC_Voltage_CMOS+0xa4>)
 800403a:	0018      	movs	r0, r3
 800403c:	f001 ffdc 	bl	8005ff8 <HAL_ADC_Stop>
}
 8004040:	46c0      	nop			@ (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b004      	add	sp, #16
 8004046:	bd80      	pop	{r7, pc}
 8004048:	2000021c 	.word	0x2000021c
 800404c:	40533333 	.word	0x40533333
 8004050:	457ff000 	.word	0x457ff000
 8004054:	40012400 	.word	0x40012400
 8004058:	d89d89d8 	.word	0xd89d89d8
 800405c:	3ff89d89 	.word	0x3ff89d89
 8004060:	20000304 	.word	0x20000304

08004064 <Measurement_of_ADC_Voltage_DiffAmp_18650>:
 *
 * CHSELR is set to 0x4000h (channel 14)
 * Calls ADC_Select_Current18650() to set channel
 * Converted values store to Voltage_DiffAmp_18650
 */
void Measurement_of_ADC_Voltage_DiffAmp_18650() {
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
   HAL_ADC_Stop(&hadc);
 800406a:	4b21      	ldr	r3, [pc, #132]	@ (80040f0 <Measurement_of_ADC_Voltage_DiffAmp_18650+0x8c>)
 800406c:	0018      	movs	r0, r3
 800406e:	f001 ffc3 	bl	8005ff8 <HAL_ADC_Stop>
   HAL_ADC_Init(&hadc);
 8004072:	4b1f      	ldr	r3, [pc, #124]	@ (80040f0 <Measurement_of_ADC_Voltage_DiffAmp_18650+0x8c>)
 8004074:	0018      	movs	r0, r3
 8004076:	f001 fdf7 	bl	8005c68 <HAL_ADC_Init>
   float V_ref = 3.3;  // This is known for each micro controller from data
 800407a:	4b1e      	ldr	r3, [pc, #120]	@ (80040f4 <Measurement_of_ADC_Voltage_DiffAmp_18650+0x90>)
 800407c:	60fb      	str	r3, [r7, #12]
   // sheet, V_ref = power supply in
   float ADC_resolution = (4096 - 1);  // 2^12 bits - 1
 800407e:	4b1e      	ldr	r3, [pc, #120]	@ (80040f8 <Measurement_of_ADC_Voltage_DiffAmp_18650+0x94>)
 8004080:	60bb      	str	r3, [r7, #8]
   float V_stepSize = V_ref / ADC_resolution;
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7fc fd5b 	bl	8000b40 <__aeabi_fdiv>
 800408a:	1c03      	adds	r3, r0, #0
 800408c:	607b      	str	r3, [r7, #4]
   // ADC
   /* Start ADC Conversion for ADC1 */
   ADC1->CHSELR = 0x4000;
 800408e:	4b1b      	ldr	r3, [pc, #108]	@ (80040fc <Measurement_of_ADC_Voltage_DiffAmp_18650+0x98>)
 8004090:	2280      	movs	r2, #128	@ 0x80
 8004092:	01d2      	lsls	r2, r2, #7
 8004094:	629a      	str	r2, [r3, #40]	@ 0x28
   ADC_Select_Current18650();
 8004096:	f000 f997 	bl	80043c8 <ADC_Select_Current18650>
   HAL_ADC_Start(&hadc);
 800409a:	4b15      	ldr	r3, [pc, #84]	@ (80040f0 <Measurement_of_ADC_Voltage_DiffAmp_18650+0x8c>)
 800409c:	0018      	movs	r0, r3
 800409e:	f001 ff57 	bl	8005f50 <HAL_ADC_Start>
   uint16_t rawValue1;
   if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 80040a2:	2301      	movs	r3, #1
 80040a4:	425a      	negs	r2, r3
 80040a6:	4b12      	ldr	r3, [pc, #72]	@ (80040f0 <Measurement_of_ADC_Voltage_DiffAmp_18650+0x8c>)
 80040a8:	0011      	movs	r1, r2
 80040aa:	0018      	movs	r0, r3
 80040ac:	f001 ffe4 	bl	8006078 <HAL_ADC_PollForConversion>
 80040b0:	1e03      	subs	r3, r0, #0
 80040b2:	d114      	bne.n	80040de <Measurement_of_ADC_Voltage_DiffAmp_18650+0x7a>
      /* Read the ADC1 value */
      rawValue1 = HAL_ADC_GetValue(&hadc);
 80040b4:	4b0e      	ldr	r3, [pc, #56]	@ (80040f0 <Measurement_of_ADC_Voltage_DiffAmp_18650+0x8c>)
 80040b6:	0018      	movs	r0, r3
 80040b8:	f002 f87a 	bl	80061b0 <HAL_ADC_GetValue>
 80040bc:	0002      	movs	r2, r0
 80040be:	1cbb      	adds	r3, r7, #2
 80040c0:	801a      	strh	r2, [r3, #0]
      Voltage_DiffAmp_18650 = ((rawValue1 * V_stepSize));
 80040c2:	1cbb      	adds	r3, r7, #2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f7fd f85e 	bl	8001188 <__aeabi_i2f>
 80040cc:	1c03      	adds	r3, r0, #0
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	1c18      	adds	r0, r3, #0
 80040d2:	f7fc ff1b 	bl	8000f0c <__aeabi_fmul>
 80040d6:	1c03      	adds	r3, r0, #0
 80040d8:	1c1a      	adds	r2, r3, #0
 80040da:	4b09      	ldr	r3, [pc, #36]	@ (8004100 <Measurement_of_ADC_Voltage_DiffAmp_18650+0x9c>)
 80040dc:	601a      	str	r2, [r3, #0]
   }
   HAL_ADC_Stop(&hadc);
 80040de:	4b04      	ldr	r3, [pc, #16]	@ (80040f0 <Measurement_of_ADC_Voltage_DiffAmp_18650+0x8c>)
 80040e0:	0018      	movs	r0, r3
 80040e2:	f001 ff89 	bl	8005ff8 <HAL_ADC_Stop>
}
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b004      	add	sp, #16
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	2000021c 	.word	0x2000021c
 80040f4:	40533333 	.word	0x40533333
 80040f8:	457ff000 	.word	0x457ff000
 80040fc:	40012400 	.word	0x40012400
 8004100:	20000310 	.word	0x20000310

08004104 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650>:
 *
 * NOTE: If the state is CASE_INIT, then it will convert the same value as LS_8
 * NOTE: If the state is not 5-8 (or CASE_INIT) (indicating the HIGH battery is not currently active), then it
 *       will return a 0
 */
float Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650(float Voltage_DiffAmp_18650){
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	float conversion_18650 = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
	if(state == LS_5)
 8004110:	4b28      	ldr	r3, [pc, #160]	@ (80041b4 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xb0>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b05      	cmp	r3, #5
 8004116:	d105      	bne.n	8004124 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0x20>
	{
		conversion_18650 = (Voltage_DiffAmp_18650/885); // do math
 8004118:	4927      	ldr	r1, [pc, #156]	@ (80041b8 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xb4>)
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc fd10 	bl	8000b40 <__aeabi_fdiv>
 8004120:	1c03      	adds	r3, r0, #0
 8004122:	60fb      	str	r3, [r7, #12]
	}
	if(state == LS_6)
 8004124:	4b23      	ldr	r3, [pc, #140]	@ (80041b4 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xb0>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b06      	cmp	r3, #6
 800412a:	d10e      	bne.n	800414a <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0x46>
	{
		conversion_18650 = (Voltage_DiffAmp_18650/98.7); // do math
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7fe ff75 	bl	800301c <__aeabi_f2d>
 8004132:	4a22      	ldr	r2, [pc, #136]	@ (80041bc <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xb8>)
 8004134:	4b22      	ldr	r3, [pc, #136]	@ (80041c0 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xbc>)
 8004136:	f7fd fc19 	bl	800196c <__aeabi_ddiv>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fe ffb3 	bl	80030ac <__aeabi_d2f>
 8004146:	1c03      	adds	r3, r0, #0
 8004148:	60fb      	str	r3, [r7, #12]
	}
	if(state == LS_7)
 800414a:	4b1a      	ldr	r3, [pc, #104]	@ (80041b4 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xb0>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b07      	cmp	r3, #7
 8004150:	d105      	bne.n	800415e <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0x5a>
	{
		conversion_18650 = (Voltage_DiffAmp_18650/11.0); // do math
 8004152:	491c      	ldr	r1, [pc, #112]	@ (80041c4 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xc0>)
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7fc fcf3 	bl	8000b40 <__aeabi_fdiv>
 800415a:	1c03      	adds	r3, r0, #0
 800415c:	60fb      	str	r3, [r7, #12]
	}
	if(state == LS_8)
 800415e:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xb0>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b08      	cmp	r3, #8
 8004164:	d10e      	bne.n	8004184 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0x80>
	{
		conversion_18650 = (Voltage_DiffAmp_18650/1.17); // do math
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7fe ff58 	bl	800301c <__aeabi_f2d>
 800416c:	4a16      	ldr	r2, [pc, #88]	@ (80041c8 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xc4>)
 800416e:	4b17      	ldr	r3, [pc, #92]	@ (80041cc <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xc8>)
 8004170:	f7fd fbfc 	bl	800196c <__aeabi_ddiv>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	0010      	movs	r0, r2
 800417a:	0019      	movs	r1, r3
 800417c:	f7fe ff96 	bl	80030ac <__aeabi_d2f>
 8004180:	1c03      	adds	r3, r0, #0
 8004182:	60fb      	str	r3, [r7, #12]
	}
	if(state == CASE_INIT)
 8004184:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xb0>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10e      	bne.n	80041aa <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xa6>
	{
		conversion_18650 = (Voltage_DiffAmp_18650/1.17); // do math
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fe ff45 	bl	800301c <__aeabi_f2d>
 8004192:	4a0d      	ldr	r2, [pc, #52]	@ (80041c8 <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xc4>)
 8004194:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <Convert_Measurement_of_ADC_Voltage_DiffAmp_18650_to_Current_of_18650+0xc8>)
 8004196:	f7fd fbe9 	bl	800196c <__aeabi_ddiv>
 800419a:	0002      	movs	r2, r0
 800419c:	000b      	movs	r3, r1
 800419e:	0010      	movs	r0, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	f7fe ff83 	bl	80030ac <__aeabi_d2f>
 80041a6:	1c03      	adds	r3, r0, #0
 80041a8:	60fb      	str	r3, [r7, #12]
	}

	return conversion_18650;
 80041aa:	68fb      	ldr	r3, [r7, #12]
}
 80041ac:	1c18      	adds	r0, r3, #0
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b004      	add	sp, #16
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	2000034c 	.word	0x2000034c
 80041b8:	445d4000 	.word	0x445d4000
 80041bc:	cccccccd 	.word	0xcccccccd
 80041c0:	4058accc 	.word	0x4058accc
 80041c4:	41300000 	.word	0x41300000
 80041c8:	eb851eb8 	.word	0xeb851eb8
 80041cc:	3ff2b851 	.word	0x3ff2b851

080041d0 <Measurement_of_ADC_Voltage_DiffAmp_CMOS>:
 *
 * CHSELR is set to 0x1000h (channel 12)
 * Calls ADC_Select_CurrentCMOS() to set channel
 * Converted values store to Voltage_DiffAmp_CMOS
 */
void Measurement_of_ADC_Voltage_DiffAmp_CMOS() {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
   HAL_ADC_Stop(&hadc);
 80041d6:	4b21      	ldr	r3, [pc, #132]	@ (800425c <Measurement_of_ADC_Voltage_DiffAmp_CMOS+0x8c>)
 80041d8:	0018      	movs	r0, r3
 80041da:	f001 ff0d 	bl	8005ff8 <HAL_ADC_Stop>
   HAL_ADC_Init(&hadc);
 80041de:	4b1f      	ldr	r3, [pc, #124]	@ (800425c <Measurement_of_ADC_Voltage_DiffAmp_CMOS+0x8c>)
 80041e0:	0018      	movs	r0, r3
 80041e2:	f001 fd41 	bl	8005c68 <HAL_ADC_Init>
   float V_ref = 3.3;  // This is known for each micro controller from data
 80041e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004260 <Measurement_of_ADC_Voltage_DiffAmp_CMOS+0x90>)
 80041e8:	60fb      	str	r3, [r7, #12]
   // sheet, V_ref = power supply in
   float ADC_resolution = (4096 - 1);  // 2^12 - 1
 80041ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004264 <Measurement_of_ADC_Voltage_DiffAmp_CMOS+0x94>)
 80041ec:	60bb      	str	r3, [r7, #8]
   float V_stepSize = V_ref / ADC_resolution;
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7fc fca5 	bl	8000b40 <__aeabi_fdiv>
 80041f6:	1c03      	adds	r3, r0, #0
 80041f8:	607b      	str	r3, [r7, #4]
   // ADC
   /* Start ADC Conversion for ADC1 */
   ADC1->CHSELR = 0x1000;
 80041fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <Measurement_of_ADC_Voltage_DiffAmp_CMOS+0x98>)
 80041fc:	2280      	movs	r2, #128	@ 0x80
 80041fe:	0152      	lsls	r2, r2, #5
 8004200:	629a      	str	r2, [r3, #40]	@ 0x28
   ADC_Select_CurrentCMOS();
 8004202:	f000 f905 	bl	8004410 <ADC_Select_CurrentCMOS>
   HAL_ADC_Start(&hadc);
 8004206:	4b15      	ldr	r3, [pc, #84]	@ (800425c <Measurement_of_ADC_Voltage_DiffAmp_CMOS+0x8c>)
 8004208:	0018      	movs	r0, r3
 800420a:	f001 fea1 	bl	8005f50 <HAL_ADC_Start>
   uint16_t rawValue1;
   if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 800420e:	2301      	movs	r3, #1
 8004210:	425a      	negs	r2, r3
 8004212:	4b12      	ldr	r3, [pc, #72]	@ (800425c <Measurement_of_ADC_Voltage_DiffAmp_CMOS+0x8c>)
 8004214:	0011      	movs	r1, r2
 8004216:	0018      	movs	r0, r3
 8004218:	f001 ff2e 	bl	8006078 <HAL_ADC_PollForConversion>
 800421c:	1e03      	subs	r3, r0, #0
 800421e:	d114      	bne.n	800424a <Measurement_of_ADC_Voltage_DiffAmp_CMOS+0x7a>
      /* Read the ADC1 value */
      rawValue1 = HAL_ADC_GetValue(&hadc);
 8004220:	4b0e      	ldr	r3, [pc, #56]	@ (800425c <Measurement_of_ADC_Voltage_DiffAmp_CMOS+0x8c>)
 8004222:	0018      	movs	r0, r3
 8004224:	f001 ffc4 	bl	80061b0 <HAL_ADC_GetValue>
 8004228:	0002      	movs	r2, r0
 800422a:	1cbb      	adds	r3, r7, #2
 800422c:	801a      	strh	r2, [r3, #0]
      Voltage_DiffAmp_CMOS = ((rawValue1 * V_stepSize));
 800422e:	1cbb      	adds	r3, r7, #2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	0018      	movs	r0, r3
 8004234:	f7fc ffa8 	bl	8001188 <__aeabi_i2f>
 8004238:	1c03      	adds	r3, r0, #0
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	1c18      	adds	r0, r3, #0
 800423e:	f7fc fe65 	bl	8000f0c <__aeabi_fmul>
 8004242:	1c03      	adds	r3, r0, #0
 8004244:	1c1a      	adds	r2, r3, #0
 8004246:	4b09      	ldr	r3, [pc, #36]	@ (800426c <Measurement_of_ADC_Voltage_DiffAmp_CMOS+0x9c>)
 8004248:	601a      	str	r2, [r3, #0]
   }
   HAL_ADC_Stop(&hadc);
 800424a:	4b04      	ldr	r3, [pc, #16]	@ (800425c <Measurement_of_ADC_Voltage_DiffAmp_CMOS+0x8c>)
 800424c:	0018      	movs	r0, r3
 800424e:	f001 fed3 	bl	8005ff8 <HAL_ADC_Stop>
}
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	46bd      	mov	sp, r7
 8004256:	b004      	add	sp, #16
 8004258:	bd80      	pop	{r7, pc}
 800425a:	46c0      	nop			@ (mov r8, r8)
 800425c:	2000021c 	.word	0x2000021c
 8004260:	40533333 	.word	0x40533333
 8004264:	457ff000 	.word	0x457ff000
 8004268:	40012400 	.word	0x40012400
 800426c:	20000308 	.word	0x20000308

08004270 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS>:
 * @return float representing the current of the LOW battery in Amps
 *
 * NOTE: If the state is not 0-3 or state is CASE_INIT (indicating the LOW battery is not currently active), then
 * 		 it will return a 0
 */
float Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS(float Voltage_DiffAmp_CMOS){
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	float conversion_CMOS = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
	if(state == LS_1)
 800427c:	4b26      	ldr	r3, [pc, #152]	@ (8004318 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0xa8>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d105      	bne.n	8004290 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0x20>
	{
		conversion_CMOS = (Voltage_DiffAmp_CMOS/905); // do math
 8004284:	4925      	ldr	r1, [pc, #148]	@ (800431c <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0xac>)
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fc fc5a 	bl	8000b40 <__aeabi_fdiv>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	60fb      	str	r3, [r7, #12]
	}
	if(state == LS_2)
 8004290:	4b21      	ldr	r3, [pc, #132]	@ (8004318 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0xa8>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d10e      	bne.n	80042b6 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0x46>
	{
		conversion_CMOS = (Voltage_DiffAmp_CMOS/99.1); // do math
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fe febf 	bl	800301c <__aeabi_f2d>
 800429e:	4a20      	ldr	r2, [pc, #128]	@ (8004320 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0xb0>)
 80042a0:	4b20      	ldr	r3, [pc, #128]	@ (8004324 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0xb4>)
 80042a2:	f7fd fb63 	bl	800196c <__aeabi_ddiv>
 80042a6:	0002      	movs	r2, r0
 80042a8:	000b      	movs	r3, r1
 80042aa:	0010      	movs	r0, r2
 80042ac:	0019      	movs	r1, r3
 80042ae:	f7fe fefd 	bl	80030ac <__aeabi_d2f>
 80042b2:	1c03      	adds	r3, r0, #0
 80042b4:	60fb      	str	r3, [r7, #12]
	}
	if(state == LS_3)
 80042b6:	4b18      	ldr	r3, [pc, #96]	@ (8004318 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0xa8>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d10e      	bne.n	80042dc <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0x6c>
	{
		conversion_CMOS = (Voltage_DiffAmp_CMOS/10.4);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fe feac 	bl	800301c <__aeabi_f2d>
 80042c4:	4a18      	ldr	r2, [pc, #96]	@ (8004328 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0xb8>)
 80042c6:	4b19      	ldr	r3, [pc, #100]	@ (800432c <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0xbc>)
 80042c8:	f7fd fb50 	bl	800196c <__aeabi_ddiv>
 80042cc:	0002      	movs	r2, r0
 80042ce:	000b      	movs	r3, r1
 80042d0:	0010      	movs	r0, r2
 80042d2:	0019      	movs	r1, r3
 80042d4:	f7fe feea 	bl	80030ac <__aeabi_d2f>
 80042d8:	1c03      	adds	r3, r0, #0
 80042da:	60fb      	str	r3, [r7, #12]
	}
	if(state == LS_4)
 80042dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0xa8>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d10e      	bne.n	8004302 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0x92>
	{
		conversion_CMOS = (Voltage_DiffAmp_CMOS/1.22); // do math
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fe fe99 	bl	800301c <__aeabi_f2d>
 80042ea:	4a11      	ldr	r2, [pc, #68]	@ (8004330 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0xc0>)
 80042ec:	4b11      	ldr	r3, [pc, #68]	@ (8004334 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0xc4>)
 80042ee:	f7fd fb3d 	bl	800196c <__aeabi_ddiv>
 80042f2:	0002      	movs	r2, r0
 80042f4:	000b      	movs	r3, r1
 80042f6:	0010      	movs	r0, r2
 80042f8:	0019      	movs	r1, r3
 80042fa:	f7fe fed7 	bl	80030ac <__aeabi_d2f>
 80042fe:	1c03      	adds	r3, r0, #0
 8004300:	60fb      	str	r3, [r7, #12]
	}
	if(state == CASE_INIT)
 8004302:	4b05      	ldr	r3, [pc, #20]	@ (8004318 <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0xa8>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <Convert_Measurement_of_ADC_Voltage_DiffAmp_CMOS_to_Current_of_CMOS+0x9e>
	{
		conversion_CMOS = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
	}

	return conversion_CMOS;
 800430e:	68fb      	ldr	r3, [r7, #12]
}
 8004310:	1c18      	adds	r0, r3, #0
 8004312:	46bd      	mov	sp, r7
 8004314:	b004      	add	sp, #16
 8004316:	bd80      	pop	{r7, pc}
 8004318:	2000034c 	.word	0x2000034c
 800431c:	44624000 	.word	0x44624000
 8004320:	66666666 	.word	0x66666666
 8004324:	4058c666 	.word	0x4058c666
 8004328:	cccccccd 	.word	0xcccccccd
 800432c:	4024cccc 	.word	0x4024cccc
 8004330:	b851eb85 	.word	0xb851eb85
 8004334:	3ff3851e 	.word	0x3ff3851e

08004338 <ADC_Select_Voltage18650>:
/*
 * ADC_Select_Voltage18650() selects the channel that relates to the VOLTAGE of the 18650 battery.
 * It sets sConfig to its respective channel (15) and channel rank. It then checks if the channel
 * has been configured correctly.
 */
void ADC_Select_Voltage18650(void) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
   ADC_ChannelConfTypeDef sConfig = {0};
 800433e:	003b      	movs	r3, r7
 8004340:	0018      	movs	r0, r3
 8004342:	2308      	movs	r3, #8
 8004344:	001a      	movs	r2, r3
 8004346:	2100      	movs	r1, #0
 8004348:	f004 ffc0 	bl	80092cc <memset>
   sConfig.Channel = ADC_CHANNEL_15;
 800434c:	003b      	movs	r3, r7
 800434e:	4a0a      	ldr	r2, [pc, #40]	@ (8004378 <ADC_Select_Voltage18650+0x40>)
 8004350:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004352:	003b      	movs	r3, r7
 8004354:	2280      	movs	r2, #128	@ 0x80
 8004356:	0152      	lsls	r2, r2, #5
 8004358:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800435a:	003a      	movs	r2, r7
 800435c:	4b07      	ldr	r3, [pc, #28]	@ (800437c <ADC_Select_Voltage18650+0x44>)
 800435e:	0011      	movs	r1, r2
 8004360:	0018      	movs	r0, r3
 8004362:	f001 ff31 	bl	80061c8 <HAL_ADC_ConfigChannel>
 8004366:	1e03      	subs	r3, r0, #0
 8004368:	d001      	beq.n	800436e <ADC_Select_Voltage18650+0x36>
      Error_Handler();
 800436a:	f001 fa2d 	bl	80057c8 <Error_Handler>
   }
}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	46bd      	mov	sp, r7
 8004372:	b002      	add	sp, #8
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	3c008000 	.word	0x3c008000
 800437c:	2000021c 	.word	0x2000021c

08004380 <ADC_Select_VoltageCMOS>:
/*
 * ADC_Select_VoltageCMOS() selects the channel that relates to the VOLTAGE of the 18650 battery.
 * It sets sConfig to its respective channel (13) and channel rank. It then checks if the channel
 * has been configured correctly.
 */
void ADC_Select_VoltageCMOS(void) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
   ADC_ChannelConfTypeDef sConfig = {0};
 8004386:	003b      	movs	r3, r7
 8004388:	0018      	movs	r0, r3
 800438a:	2308      	movs	r3, #8
 800438c:	001a      	movs	r2, r3
 800438e:	2100      	movs	r1, #0
 8004390:	f004 ff9c 	bl	80092cc <memset>
   sConfig.Channel = ADC_CHANNEL_13;
 8004394:	003b      	movs	r3, r7
 8004396:	4a0a      	ldr	r2, [pc, #40]	@ (80043c0 <ADC_Select_VoltageCMOS+0x40>)
 8004398:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800439a:	003b      	movs	r3, r7
 800439c:	2280      	movs	r2, #128	@ 0x80
 800439e:	0152      	lsls	r2, r2, #5
 80043a0:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80043a2:	003a      	movs	r2, r7
 80043a4:	4b07      	ldr	r3, [pc, #28]	@ (80043c4 <ADC_Select_VoltageCMOS+0x44>)
 80043a6:	0011      	movs	r1, r2
 80043a8:	0018      	movs	r0, r3
 80043aa:	f001 ff0d 	bl	80061c8 <HAL_ADC_ConfigChannel>
 80043ae:	1e03      	subs	r3, r0, #0
 80043b0:	d001      	beq.n	80043b6 <ADC_Select_VoltageCMOS+0x36>
      Error_Handler();
 80043b2:	f001 fa09 	bl	80057c8 <Error_Handler>
   }
}
 80043b6:	46c0      	nop			@ (mov r8, r8)
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b002      	add	sp, #8
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	46c0      	nop			@ (mov r8, r8)
 80043c0:	34002000 	.word	0x34002000
 80043c4:	2000021c 	.word	0x2000021c

080043c8 <ADC_Select_Current18650>:
/*
 * ADC_Select_Current18650() selects the channel that relates to the VOLTAGE of the 18650 battery.
 * It sets sConfig to its respective channel (14) and channel rank. It then checks if the channel
 * has been configured correctly.
 */
void ADC_Select_Current18650(void) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
   ADC_ChannelConfTypeDef sConfig = {0};
 80043ce:	003b      	movs	r3, r7
 80043d0:	0018      	movs	r0, r3
 80043d2:	2308      	movs	r3, #8
 80043d4:	001a      	movs	r2, r3
 80043d6:	2100      	movs	r1, #0
 80043d8:	f004 ff78 	bl	80092cc <memset>
   sConfig.Channel = ADC_CHANNEL_14;
 80043dc:	003b      	movs	r3, r7
 80043de:	4a0a      	ldr	r2, [pc, #40]	@ (8004408 <ADC_Select_Current18650+0x40>)
 80043e0:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80043e2:	003b      	movs	r3, r7
 80043e4:	2280      	movs	r2, #128	@ 0x80
 80043e6:	0152      	lsls	r2, r2, #5
 80043e8:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80043ea:	003a      	movs	r2, r7
 80043ec:	4b07      	ldr	r3, [pc, #28]	@ (800440c <ADC_Select_Current18650+0x44>)
 80043ee:	0011      	movs	r1, r2
 80043f0:	0018      	movs	r0, r3
 80043f2:	f001 fee9 	bl	80061c8 <HAL_ADC_ConfigChannel>
 80043f6:	1e03      	subs	r3, r0, #0
 80043f8:	d001      	beq.n	80043fe <ADC_Select_Current18650+0x36>
      Error_Handler();
 80043fa:	f001 f9e5 	bl	80057c8 <Error_Handler>
   }
}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	b002      	add	sp, #8
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	38004000 	.word	0x38004000
 800440c:	2000021c 	.word	0x2000021c

08004410 <ADC_Select_CurrentCMOS>:
/*
 * ADC_Select_CurrentCMOS() selects the channel that relates to the VOLTAGE of the 18650 battery.
 * It sets sConfig to its respective channel (12) and channel rank. It then checks if the channel
 * has been configured correctly.
 */
void ADC_Select_CurrentCMOS(void) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
   ADC_ChannelConfTypeDef sConfig = {0};
 8004416:	003b      	movs	r3, r7
 8004418:	0018      	movs	r0, r3
 800441a:	2308      	movs	r3, #8
 800441c:	001a      	movs	r2, r3
 800441e:	2100      	movs	r1, #0
 8004420:	f004 ff54 	bl	80092cc <memset>
   sConfig.Channel = ADC_CHANNEL_12;
 8004424:	003b      	movs	r3, r7
 8004426:	4a0a      	ldr	r2, [pc, #40]	@ (8004450 <ADC_Select_CurrentCMOS+0x40>)
 8004428:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800442a:	003b      	movs	r3, r7
 800442c:	2280      	movs	r2, #128	@ 0x80
 800442e:	0152      	lsls	r2, r2, #5
 8004430:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004432:	003a      	movs	r2, r7
 8004434:	4b07      	ldr	r3, [pc, #28]	@ (8004454 <ADC_Select_CurrentCMOS+0x44>)
 8004436:	0011      	movs	r1, r2
 8004438:	0018      	movs	r0, r3
 800443a:	f001 fec5 	bl	80061c8 <HAL_ADC_ConfigChannel>
 800443e:	1e03      	subs	r3, r0, #0
 8004440:	d001      	beq.n	8004446 <ADC_Select_CurrentCMOS+0x36>
      Error_Handler();
 8004442:	f001 f9c1 	bl	80057c8 <Error_Handler>
   }
}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	b002      	add	sp, #8
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	30001000 	.word	0x30001000
 8004454:	2000021c 	.word	0x2000021c

08004458 <setNumber>:

/*
 * setNumber() checks the value of valueToAdjust variable. If the value is set as a number from 0 to 7,
 * it calls the respective AdjustValueInTo function and sets the threshold LED to its respective color.
 */
void setNumber() {
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
   // Check each value and set the pins accordingly
   if (valueToAdjust == 1) {
 800445c:	4b64      	ldr	r3, [pc, #400]	@ (80045f0 <setNumber+0x198>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d114      	bne.n	800448e <setNumber+0x36>
      // value 1 = 001
	   AdjustValueInTo1();
 8004464:	f000 faca 	bl	80049fc <AdjustValueInTo1>

	  HAL_GPIO_WritePin(GPIOB, Threshold_Red_Pin,
 8004468:	4b62      	ldr	r3, [pc, #392]	@ (80045f4 <setNumber+0x19c>)
 800446a:	2201      	movs	r2, #1
 800446c:	2108      	movs	r1, #8
 800446e:	0018      	movs	r0, r3
 8004470:	f002 fb3b 	bl	8006aea <HAL_GPIO_WritePin>
	  	                        GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOB, Threshold_Green_Pin,
 8004474:	4b5f      	ldr	r3, [pc, #380]	@ (80045f4 <setNumber+0x19c>)
 8004476:	2200      	movs	r2, #0
 8004478:	2110      	movs	r1, #16
 800447a:	0018      	movs	r0, r3
 800447c:	f002 fb35 	bl	8006aea <HAL_GPIO_WritePin>
	  	                        GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOB, Threshold_Blue_Pin,
 8004480:	4b5c      	ldr	r3, [pc, #368]	@ (80045f4 <setNumber+0x19c>)
 8004482:	2200      	movs	r2, #0
 8004484:	2120      	movs	r1, #32
 8004486:	0018      	movs	r0, r3
 8004488:	f002 fb2f 	bl	8006aea <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, Threshold_Blue_Pin,
	   	  	                        GPIO_PIN_RESET);
   }
   /*may need to implement state for numbers entered over 7 and numbers
   under zero */
}
 800448c:	e0ad      	b.n	80045ea <setNumber+0x192>
   } else if (valueToAdjust == 2) {
 800448e:	4b58      	ldr	r3, [pc, #352]	@ (80045f0 <setNumber+0x198>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d114      	bne.n	80044c0 <setNumber+0x68>
	   AdjustValueInTo2();
 8004496:	f000 fae3 	bl	8004a60 <AdjustValueInTo2>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Red_Pin,
 800449a:	4b56      	ldr	r3, [pc, #344]	@ (80045f4 <setNumber+0x19c>)
 800449c:	2201      	movs	r2, #1
 800449e:	2108      	movs	r1, #8
 80044a0:	0018      	movs	r0, r3
 80044a2:	f002 fb22 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Green_Pin,
 80044a6:	4b53      	ldr	r3, [pc, #332]	@ (80045f4 <setNumber+0x19c>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	2110      	movs	r1, #16
 80044ac:	0018      	movs	r0, r3
 80044ae:	f002 fb1c 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Blue_Pin,
 80044b2:	4b50      	ldr	r3, [pc, #320]	@ (80045f4 <setNumber+0x19c>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	2120      	movs	r1, #32
 80044b8:	0018      	movs	r0, r3
 80044ba:	f002 fb16 	bl	8006aea <HAL_GPIO_WritePin>
}
 80044be:	e094      	b.n	80045ea <setNumber+0x192>
   } else if (valueToAdjust == 3) {
 80044c0:	4b4b      	ldr	r3, [pc, #300]	@ (80045f0 <setNumber+0x198>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d114      	bne.n	80044f2 <setNumber+0x9a>
	   AdjustValueInTo3();
 80044c8:	f000 fafc 	bl	8004ac4 <AdjustValueInTo3>
      HAL_GPIO_WritePin(GPIOB, Threshold_Red_Pin,
 80044cc:	4b49      	ldr	r3, [pc, #292]	@ (80045f4 <setNumber+0x19c>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	2108      	movs	r1, #8
 80044d2:	0018      	movs	r0, r3
 80044d4:	f002 fb09 	bl	8006aea <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, Threshold_Green_Pin,
 80044d8:	4b46      	ldr	r3, [pc, #280]	@ (80045f4 <setNumber+0x19c>)
 80044da:	2201      	movs	r2, #1
 80044dc:	2110      	movs	r1, #16
 80044de:	0018      	movs	r0, r3
 80044e0:	f002 fb03 	bl	8006aea <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, Threshold_Blue_Pin,
 80044e4:	4b43      	ldr	r3, [pc, #268]	@ (80045f4 <setNumber+0x19c>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	2120      	movs	r1, #32
 80044ea:	0018      	movs	r0, r3
 80044ec:	f002 fafd 	bl	8006aea <HAL_GPIO_WritePin>
}
 80044f0:	e07b      	b.n	80045ea <setNumber+0x192>
   } else if (valueToAdjust == 4) {
 80044f2:	4b3f      	ldr	r3, [pc, #252]	@ (80045f0 <setNumber+0x198>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d114      	bne.n	8004524 <setNumber+0xcc>
	   AdjustValueInTo4();
 80044fa:	f000 fb15 	bl	8004b28 <AdjustValueInTo4>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Red_Pin,
 80044fe:	4b3d      	ldr	r3, [pc, #244]	@ (80045f4 <setNumber+0x19c>)
 8004500:	2200      	movs	r2, #0
 8004502:	2108      	movs	r1, #8
 8004504:	0018      	movs	r0, r3
 8004506:	f002 faf0 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Green_Pin,
 800450a:	4b3a      	ldr	r3, [pc, #232]	@ (80045f4 <setNumber+0x19c>)
 800450c:	2201      	movs	r2, #1
 800450e:	2110      	movs	r1, #16
 8004510:	0018      	movs	r0, r3
 8004512:	f002 faea 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Blue_Pin,
 8004516:	4b37      	ldr	r3, [pc, #220]	@ (80045f4 <setNumber+0x19c>)
 8004518:	2201      	movs	r2, #1
 800451a:	2120      	movs	r1, #32
 800451c:	0018      	movs	r0, r3
 800451e:	f002 fae4 	bl	8006aea <HAL_GPIO_WritePin>
}
 8004522:	e062      	b.n	80045ea <setNumber+0x192>
   } else if (valueToAdjust == 5) {
 8004524:	4b32      	ldr	r3, [pc, #200]	@ (80045f0 <setNumber+0x198>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b05      	cmp	r3, #5
 800452a:	d114      	bne.n	8004556 <setNumber+0xfe>
	   AdjustValueInTo5();
 800452c:	f000 fb2e 	bl	8004b8c <AdjustValueInTo5>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Red_Pin,
 8004530:	4b30      	ldr	r3, [pc, #192]	@ (80045f4 <setNumber+0x19c>)
 8004532:	2200      	movs	r2, #0
 8004534:	2108      	movs	r1, #8
 8004536:	0018      	movs	r0, r3
 8004538:	f002 fad7 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Green_Pin,
 800453c:	4b2d      	ldr	r3, [pc, #180]	@ (80045f4 <setNumber+0x19c>)
 800453e:	2200      	movs	r2, #0
 8004540:	2110      	movs	r1, #16
 8004542:	0018      	movs	r0, r3
 8004544:	f002 fad1 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Blue_Pin,
 8004548:	4b2a      	ldr	r3, [pc, #168]	@ (80045f4 <setNumber+0x19c>)
 800454a:	2201      	movs	r2, #1
 800454c:	2120      	movs	r1, #32
 800454e:	0018      	movs	r0, r3
 8004550:	f002 facb 	bl	8006aea <HAL_GPIO_WritePin>
}
 8004554:	e049      	b.n	80045ea <setNumber+0x192>
   } else if (valueToAdjust == 6) {
 8004556:	4b26      	ldr	r3, [pc, #152]	@ (80045f0 <setNumber+0x198>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b06      	cmp	r3, #6
 800455c:	d114      	bne.n	8004588 <setNumber+0x130>
	   AdjustValueInTo6();
 800455e:	f000 fb47 	bl	8004bf0 <AdjustValueInTo6>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Red_Pin,
 8004562:	4b24      	ldr	r3, [pc, #144]	@ (80045f4 <setNumber+0x19c>)
 8004564:	2201      	movs	r2, #1
 8004566:	2108      	movs	r1, #8
 8004568:	0018      	movs	r0, r3
 800456a:	f002 fabe 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Green_Pin,
 800456e:	4b21      	ldr	r3, [pc, #132]	@ (80045f4 <setNumber+0x19c>)
 8004570:	2200      	movs	r2, #0
 8004572:	2110      	movs	r1, #16
 8004574:	0018      	movs	r0, r3
 8004576:	f002 fab8 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Blue_Pin,
 800457a:	4b1e      	ldr	r3, [pc, #120]	@ (80045f4 <setNumber+0x19c>)
 800457c:	2201      	movs	r2, #1
 800457e:	2120      	movs	r1, #32
 8004580:	0018      	movs	r0, r3
 8004582:	f002 fab2 	bl	8006aea <HAL_GPIO_WritePin>
}
 8004586:	e030      	b.n	80045ea <setNumber+0x192>
   } else if (valueToAdjust == 7) {
 8004588:	4b19      	ldr	r3, [pc, #100]	@ (80045f0 <setNumber+0x198>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b07      	cmp	r3, #7
 800458e:	d114      	bne.n	80045ba <setNumber+0x162>
	   AdjustValueInTo7();
 8004590:	f000 fb60 	bl	8004c54 <AdjustValueInTo7>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Red_Pin,
 8004594:	4b17      	ldr	r3, [pc, #92]	@ (80045f4 <setNumber+0x19c>)
 8004596:	2201      	movs	r2, #1
 8004598:	2108      	movs	r1, #8
 800459a:	0018      	movs	r0, r3
 800459c:	f002 faa5 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Green_Pin,
 80045a0:	4b14      	ldr	r3, [pc, #80]	@ (80045f4 <setNumber+0x19c>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	2110      	movs	r1, #16
 80045a6:	0018      	movs	r0, r3
 80045a8:	f002 fa9f 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, Threshold_Blue_Pin,
 80045ac:	4b11      	ldr	r3, [pc, #68]	@ (80045f4 <setNumber+0x19c>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	2120      	movs	r1, #32
 80045b2:	0018      	movs	r0, r3
 80045b4:	f002 fa99 	bl	8006aea <HAL_GPIO_WritePin>
}
 80045b8:	e017      	b.n	80045ea <setNumber+0x192>
   else if (valueToAdjust == 0) {
 80045ba:	4b0d      	ldr	r3, [pc, #52]	@ (80045f0 <setNumber+0x198>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d113      	bne.n	80045ea <setNumber+0x192>
	   AdjustValueInTo0();
 80045c2:	f000 f9e9 	bl	8004998 <AdjustValueInTo0>
	  HAL_GPIO_WritePin(GPIOB, Threshold_Red_Pin,
 80045c6:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <setNumber+0x19c>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	2108      	movs	r1, #8
 80045cc:	0018      	movs	r0, r3
 80045ce:	f002 fa8c 	bl	8006aea <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, Threshold_Green_Pin,
 80045d2:	4b08      	ldr	r3, [pc, #32]	@ (80045f4 <setNumber+0x19c>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	2110      	movs	r1, #16
 80045d8:	0018      	movs	r0, r3
 80045da:	f002 fa86 	bl	8006aea <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, Threshold_Blue_Pin,
 80045de:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <setNumber+0x19c>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	2120      	movs	r1, #32
 80045e4:	0018      	movs	r0, r3
 80045e6:	f002 fa80 	bl	8006aea <HAL_GPIO_WritePin>
}
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	2000032c 	.word	0x2000032c
 80045f4:	50000400 	.word	0x50000400

080045f8 <Threshold>:
 * card. *If the button is adjusted, it will OVERRIDE the value from the SD card*.
 *
 * @param value_from_button is an integer representing the state of the push buttons (typically valueToAdjust)
 * @return float representing the current switching threshold limit (in Amps)
 */
float Threshold(int value_from_button){
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	if (value_from_button == 0){
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10c      	bne.n	8004620 <Threshold+0x28>
		if(threshold_value > 0)
 8004606:	4b25      	ldr	r3, [pc, #148]	@ (800469c <Threshold+0xa4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2100      	movs	r1, #0
 800460c:	1c18      	adds	r0, r3, #0
 800460e:	f7fb ff71 	bl	80004f4 <__aeabi_fcmpgt>
 8004612:	1e03      	subs	r3, r0, #0
 8004614:	d002      	beq.n	800461c <Threshold+0x24>
		{
			return threshold_value;
 8004616:	4b21      	ldr	r3, [pc, #132]	@ (800469c <Threshold+0xa4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	e03b      	b.n	8004694 <Threshold+0x9c>
		}
		else return .001;
 800461c:	4b20      	ldr	r3, [pc, #128]	@ (80046a0 <Threshold+0xa8>)
 800461e:	e039      	b.n	8004694 <Threshold+0x9c>
	}
	if (value_from_button == 1){
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d104      	bne.n	8004630 <Threshold+0x38>
		threshold_value = 0;
 8004626:	4b1d      	ldr	r3, [pc, #116]	@ (800469c <Threshold+0xa4>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
			return .005;
 800462c:	4b1d      	ldr	r3, [pc, #116]	@ (80046a4 <Threshold+0xac>)
 800462e:	e031      	b.n	8004694 <Threshold+0x9c>
	}
	if (value_from_button == 2){
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d104      	bne.n	8004640 <Threshold+0x48>
		threshold_value = 0;
 8004636:	4b19      	ldr	r3, [pc, #100]	@ (800469c <Threshold+0xa4>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
			return .010;
 800463c:	4b1a      	ldr	r3, [pc, #104]	@ (80046a8 <Threshold+0xb0>)
 800463e:	e029      	b.n	8004694 <Threshold+0x9c>
	}
	if (value_from_button == 3){
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d104      	bne.n	8004650 <Threshold+0x58>
		threshold_value = 0;
 8004646:	4b15      	ldr	r3, [pc, #84]	@ (800469c <Threshold+0xa4>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
			return .100;
 800464c:	4b17      	ldr	r3, [pc, #92]	@ (80046ac <Threshold+0xb4>)
 800464e:	e021      	b.n	8004694 <Threshold+0x9c>
	}
	if (value_from_button == 4){
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b04      	cmp	r3, #4
 8004654:	d104      	bne.n	8004660 <Threshold+0x68>
		threshold_value = 0;
 8004656:	4b11      	ldr	r3, [pc, #68]	@ (800469c <Threshold+0xa4>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
			return .300;
 800465c:	4b14      	ldr	r3, [pc, #80]	@ (80046b0 <Threshold+0xb8>)
 800465e:	e019      	b.n	8004694 <Threshold+0x9c>
	}
	if (value_from_button == 5){
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b05      	cmp	r3, #5
 8004664:	d104      	bne.n	8004670 <Threshold+0x78>
		threshold_value = 0;
 8004666:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <Threshold+0xa4>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
			return .400;
 800466c:	4b11      	ldr	r3, [pc, #68]	@ (80046b4 <Threshold+0xbc>)
 800466e:	e011      	b.n	8004694 <Threshold+0x9c>
	}
	if (value_from_button == 6){
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b06      	cmp	r3, #6
 8004674:	d105      	bne.n	8004682 <Threshold+0x8a>
		threshold_value = 0;
 8004676:	4b09      	ldr	r3, [pc, #36]	@ (800469c <Threshold+0xa4>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
			return 0.500;
 800467c:	23fc      	movs	r3, #252	@ 0xfc
 800467e:	059b      	lsls	r3, r3, #22
 8004680:	e008      	b.n	8004694 <Threshold+0x9c>
	}
	if (value_from_button == 7){
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b07      	cmp	r3, #7
 8004686:	d105      	bne.n	8004694 <Threshold+0x9c>
		threshold_value = 0;
 8004688:	4b04      	ldr	r3, [pc, #16]	@ (800469c <Threshold+0xa4>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
			return 1.000;
 800468e:	23fe      	movs	r3, #254	@ 0xfe
 8004690:	059b      	lsls	r3, r3, #22
 8004692:	e7ff      	b.n	8004694 <Threshold+0x9c>
	}
}
 8004694:	1c18      	adds	r0, r3, #0
 8004696:	46bd      	mov	sp, r7
 8004698:	b002      	add	sp, #8
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000338 	.word	0x20000338
 80046a0:	3a83126f 	.word	0x3a83126f
 80046a4:	3ba3d70a 	.word	0x3ba3d70a
 80046a8:	3c23d70a 	.word	0x3c23d70a
 80046ac:	3dcccccd 	.word	0x3dcccccd
 80046b0:	3e99999a 	.word	0x3e99999a
 80046b4:	3ecccccd 	.word	0x3ecccccd

080046b8 <AdjustStateTo0>:
 */

/*
 * AdjustStateTo0() Sets output communication bits to 0 (000) and the state LED to OFF
 */
void AdjustStateTo0(){
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
	// value 0 = 000
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_RESET);
 80046bc:	23a0      	movs	r3, #160	@ 0xa0
 80046be:	05db      	lsls	r3, r3, #23
 80046c0:	2200      	movs	r2, #0
 80046c2:	2101      	movs	r1, #1
 80046c4:	0018      	movs	r0, r3
 80046c6:	f002 fa10 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_RESET);
 80046ca:	23a0      	movs	r3, #160	@ 0xa0
 80046cc:	05db      	lsls	r3, r3, #23
 80046ce:	2200      	movs	r2, #0
 80046d0:	2102      	movs	r1, #2
 80046d2:	0018      	movs	r0, r3
 80046d4:	f002 fa09 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_RESET);
 80046d8:	23a0      	movs	r3, #160	@ 0xa0
 80046da:	05db      	lsls	r3, r3, #23
 80046dc:	2200      	movs	r2, #0
 80046de:	2110      	movs	r1, #16
 80046e0:	0018      	movs	r0, r3
 80046e2:	f002 fa02 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set White
	      HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin,
 80046e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <AdjustStateTo0+0x58>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	2101      	movs	r1, #1
 80046ec:	0018      	movs	r0, r3
 80046ee:	f002 f9fc 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_RESET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 80046f2:	4b07      	ldr	r3, [pc, #28]	@ (8004710 <AdjustStateTo0+0x58>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	2102      	movs	r1, #2
 80046f8:	0018      	movs	r0, r3
 80046fa:	f002 f9f6 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_RESET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 80046fe:	4b04      	ldr	r3, [pc, #16]	@ (8004710 <AdjustStateTo0+0x58>)
 8004700:	2200      	movs	r2, #0
 8004702:	2104      	movs	r1, #4
 8004704:	0018      	movs	r0, r3
 8004706:	f002 f9f0 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_RESET);
}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	50000400 	.word	0x50000400

08004714 <AdjustStateTo1>:

/*
 * AdjustStateTo1() Sets output communication bits to 1 (001) and the state LED to RED
 */
void AdjustStateTo1(){
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_SET);
 8004718:	23a0      	movs	r3, #160	@ 0xa0
 800471a:	05db      	lsls	r3, r3, #23
 800471c:	2201      	movs	r2, #1
 800471e:	2101      	movs	r1, #1
 8004720:	0018      	movs	r0, r3
 8004722:	f002 f9e2 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_RESET);
 8004726:	23a0      	movs	r3, #160	@ 0xa0
 8004728:	05db      	lsls	r3, r3, #23
 800472a:	2200      	movs	r2, #0
 800472c:	2102      	movs	r1, #2
 800472e:	0018      	movs	r0, r3
 8004730:	f002 f9db 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_RESET);
 8004734:	23a0      	movs	r3, #160	@ 0xa0
 8004736:	05db      	lsls	r3, r3, #23
 8004738:	2200      	movs	r2, #0
 800473a:	2110      	movs	r1, #16
 800473c:	0018      	movs	r0, r3
 800473e:	f002 f9d4 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set Red
	      HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin,
 8004742:	4b0a      	ldr	r3, [pc, #40]	@ (800476c <AdjustStateTo1+0x58>)
 8004744:	2201      	movs	r2, #1
 8004746:	2101      	movs	r1, #1
 8004748:	0018      	movs	r0, r3
 800474a:	f002 f9ce 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_SET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 800474e:	4b07      	ldr	r3, [pc, #28]	@ (800476c <AdjustStateTo1+0x58>)
 8004750:	2200      	movs	r2, #0
 8004752:	2102      	movs	r1, #2
 8004754:	0018      	movs	r0, r3
 8004756:	f002 f9c8 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_RESET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 800475a:	4b04      	ldr	r3, [pc, #16]	@ (800476c <AdjustStateTo1+0x58>)
 800475c:	2200      	movs	r2, #0
 800475e:	2104      	movs	r1, #4
 8004760:	0018      	movs	r0, r3
 8004762:	f002 f9c2 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_RESET);
}
 8004766:	46c0      	nop			@ (mov r8, r8)
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	50000400 	.word	0x50000400

08004770 <AdjustStateTo2>:

/*
 * AdjustStateTo2() Sets output communication bits to 2 (010) and the state LED to YELLOW
 */
void AdjustStateTo2(){
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
	// value 2 = 010
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_RESET);
 8004774:	23a0      	movs	r3, #160	@ 0xa0
 8004776:	05db      	lsls	r3, r3, #23
 8004778:	2200      	movs	r2, #0
 800477a:	2101      	movs	r1, #1
 800477c:	0018      	movs	r0, r3
 800477e:	f002 f9b4 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_SET);
 8004782:	23a0      	movs	r3, #160	@ 0xa0
 8004784:	05db      	lsls	r3, r3, #23
 8004786:	2201      	movs	r2, #1
 8004788:	2102      	movs	r1, #2
 800478a:	0018      	movs	r0, r3
 800478c:	f002 f9ad 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_RESET);
 8004790:	23a0      	movs	r3, #160	@ 0xa0
 8004792:	05db      	lsls	r3, r3, #23
 8004794:	2200      	movs	r2, #0
 8004796:	2110      	movs	r1, #16
 8004798:	0018      	movs	r0, r3
 800479a:	f002 f9a6 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set Yellow
	      HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin,
 800479e:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <AdjustStateTo2+0x58>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	2101      	movs	r1, #1
 80047a4:	0018      	movs	r0, r3
 80047a6:	f002 f9a0 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_SET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 80047aa:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <AdjustStateTo2+0x58>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	2102      	movs	r1, #2
 80047b0:	0018      	movs	r0, r3
 80047b2:	f002 f99a 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_SET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 80047b6:	4b04      	ldr	r3, [pc, #16]	@ (80047c8 <AdjustStateTo2+0x58>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	2104      	movs	r1, #4
 80047bc:	0018      	movs	r0, r3
 80047be:	f002 f994 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_RESET);
}
 80047c2:	46c0      	nop			@ (mov r8, r8)
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	50000400 	.word	0x50000400

080047cc <AdjustStateTo3>:

/*
 * AdjustStateTo3() Sets output communication bits to 3 (011) and the state LED to GREEN
 */
void AdjustStateTo3(){
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
	// value 3 = 011
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_SET);
 80047d0:	23a0      	movs	r3, #160	@ 0xa0
 80047d2:	05db      	lsls	r3, r3, #23
 80047d4:	2201      	movs	r2, #1
 80047d6:	2101      	movs	r1, #1
 80047d8:	0018      	movs	r0, r3
 80047da:	f002 f986 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_SET);
 80047de:	23a0      	movs	r3, #160	@ 0xa0
 80047e0:	05db      	lsls	r3, r3, #23
 80047e2:	2201      	movs	r2, #1
 80047e4:	2102      	movs	r1, #2
 80047e6:	0018      	movs	r0, r3
 80047e8:	f002 f97f 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_RESET);
 80047ec:	23a0      	movs	r3, #160	@ 0xa0
 80047ee:	05db      	lsls	r3, r3, #23
 80047f0:	2200      	movs	r2, #0
 80047f2:	2110      	movs	r1, #16
 80047f4:	0018      	movs	r0, r3
 80047f6:	f002 f978 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set Green
	      HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin,
 80047fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004824 <AdjustStateTo3+0x58>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	2101      	movs	r1, #1
 8004800:	0018      	movs	r0, r3
 8004802:	f002 f972 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_RESET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 8004806:	4b07      	ldr	r3, [pc, #28]	@ (8004824 <AdjustStateTo3+0x58>)
 8004808:	2201      	movs	r2, #1
 800480a:	2102      	movs	r1, #2
 800480c:	0018      	movs	r0, r3
 800480e:	f002 f96c 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_SET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 8004812:	4b04      	ldr	r3, [pc, #16]	@ (8004824 <AdjustStateTo3+0x58>)
 8004814:	2200      	movs	r2, #0
 8004816:	2104      	movs	r1, #4
 8004818:	0018      	movs	r0, r3
 800481a:	f002 f966 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_RESET);
}
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	50000400 	.word	0x50000400

08004828 <AdjustStateTo4>:

/*
 * AdjustStateTo4() Sets output communication bits to 4 (100) and the state LED to CYAN
 */
void AdjustStateTo4(){
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
	// value 4 = 100
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_RESET);
 800482c:	23a0      	movs	r3, #160	@ 0xa0
 800482e:	05db      	lsls	r3, r3, #23
 8004830:	2200      	movs	r2, #0
 8004832:	2101      	movs	r1, #1
 8004834:	0018      	movs	r0, r3
 8004836:	f002 f958 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_RESET);
 800483a:	23a0      	movs	r3, #160	@ 0xa0
 800483c:	05db      	lsls	r3, r3, #23
 800483e:	2200      	movs	r2, #0
 8004840:	2102      	movs	r1, #2
 8004842:	0018      	movs	r0, r3
 8004844:	f002 f951 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_SET);
 8004848:	23a0      	movs	r3, #160	@ 0xa0
 800484a:	05db      	lsls	r3, r3, #23
 800484c:	2201      	movs	r2, #1
 800484e:	2110      	movs	r1, #16
 8004850:	0018      	movs	r0, r3
 8004852:	f002 f94a 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set Cyan
	      HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin,
 8004856:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <AdjustStateTo4+0x58>)
 8004858:	2200      	movs	r2, #0
 800485a:	2101      	movs	r1, #1
 800485c:	0018      	movs	r0, r3
 800485e:	f002 f944 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_RESET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 8004862:	4b07      	ldr	r3, [pc, #28]	@ (8004880 <AdjustStateTo4+0x58>)
 8004864:	2201      	movs	r2, #1
 8004866:	2102      	movs	r1, #2
 8004868:	0018      	movs	r0, r3
 800486a:	f002 f93e 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_SET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 800486e:	4b04      	ldr	r3, [pc, #16]	@ (8004880 <AdjustStateTo4+0x58>)
 8004870:	2201      	movs	r2, #1
 8004872:	2104      	movs	r1, #4
 8004874:	0018      	movs	r0, r3
 8004876:	f002 f938 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_SET);
}
 800487a:	46c0      	nop			@ (mov r8, r8)
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	50000400 	.word	0x50000400

08004884 <AdjustStateTo5>:

/*
 * AdjustStateTo5() Sets output communication bits to 5 (101) and the state LED to BLUE
 */
void AdjustStateTo5(){
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
	// value 5 = 101
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_SET);
 8004888:	23a0      	movs	r3, #160	@ 0xa0
 800488a:	05db      	lsls	r3, r3, #23
 800488c:	2201      	movs	r2, #1
 800488e:	2101      	movs	r1, #1
 8004890:	0018      	movs	r0, r3
 8004892:	f002 f92a 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_RESET);
 8004896:	23a0      	movs	r3, #160	@ 0xa0
 8004898:	05db      	lsls	r3, r3, #23
 800489a:	2200      	movs	r2, #0
 800489c:	2102      	movs	r1, #2
 800489e:	0018      	movs	r0, r3
 80048a0:	f002 f923 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_SET);
 80048a4:	23a0      	movs	r3, #160	@ 0xa0
 80048a6:	05db      	lsls	r3, r3, #23
 80048a8:	2201      	movs	r2, #1
 80048aa:	2110      	movs	r1, #16
 80048ac:	0018      	movs	r0, r3
 80048ae:	f002 f91c 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set Blue
	      HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin,
 80048b2:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <AdjustStateTo5+0x58>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	2101      	movs	r1, #1
 80048b8:	0018      	movs	r0, r3
 80048ba:	f002 f916 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_RESET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 80048be:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <AdjustStateTo5+0x58>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	2102      	movs	r1, #2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f002 f910 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_RESET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 80048ca:	4b04      	ldr	r3, [pc, #16]	@ (80048dc <AdjustStateTo5+0x58>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	2104      	movs	r1, #4
 80048d0:	0018      	movs	r0, r3
 80048d2:	f002 f90a 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_SET);
}
 80048d6:	46c0      	nop			@ (mov r8, r8)
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	50000400 	.word	0x50000400

080048e0 <AdjustStateTo6>:

/*
 * AdjustStateTo6() Sets output communication bits to 6 (110) and the state LED to MAGENTA
 */
void AdjustStateTo6(){
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
	// value 6 = 110
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_RESET);
 80048e4:	23a0      	movs	r3, #160	@ 0xa0
 80048e6:	05db      	lsls	r3, r3, #23
 80048e8:	2200      	movs	r2, #0
 80048ea:	2101      	movs	r1, #1
 80048ec:	0018      	movs	r0, r3
 80048ee:	f002 f8fc 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_SET);
 80048f2:	23a0      	movs	r3, #160	@ 0xa0
 80048f4:	05db      	lsls	r3, r3, #23
 80048f6:	2201      	movs	r2, #1
 80048f8:	2102      	movs	r1, #2
 80048fa:	0018      	movs	r0, r3
 80048fc:	f002 f8f5 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_SET);
 8004900:	23a0      	movs	r3, #160	@ 0xa0
 8004902:	05db      	lsls	r3, r3, #23
 8004904:	2201      	movs	r2, #1
 8004906:	2110      	movs	r1, #16
 8004908:	0018      	movs	r0, r3
 800490a:	f002 f8ee 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set Magenta
	      HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin,
 800490e:	4b0a      	ldr	r3, [pc, #40]	@ (8004938 <AdjustStateTo6+0x58>)
 8004910:	2201      	movs	r2, #1
 8004912:	2101      	movs	r1, #1
 8004914:	0018      	movs	r0, r3
 8004916:	f002 f8e8 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_SET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 800491a:	4b07      	ldr	r3, [pc, #28]	@ (8004938 <AdjustStateTo6+0x58>)
 800491c:	2200      	movs	r2, #0
 800491e:	2102      	movs	r1, #2
 8004920:	0018      	movs	r0, r3
 8004922:	f002 f8e2 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_RESET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 8004926:	4b04      	ldr	r3, [pc, #16]	@ (8004938 <AdjustStateTo6+0x58>)
 8004928:	2201      	movs	r2, #1
 800492a:	2104      	movs	r1, #4
 800492c:	0018      	movs	r0, r3
 800492e:	f002 f8dc 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_SET);
}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	50000400 	.word	0x50000400

0800493c <AdjustStateTo7>:

/*
 * AdjustStateTo7() Sets output communication bits to 7 (111) and the state LED to WHITE
 */
void AdjustStateTo7(){
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
	// value 7 = 111
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_SET);
 8004940:	23a0      	movs	r3, #160	@ 0xa0
 8004942:	05db      	lsls	r3, r3, #23
 8004944:	2201      	movs	r2, #1
 8004946:	2101      	movs	r1, #1
 8004948:	0018      	movs	r0, r3
 800494a:	f002 f8ce 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_SET);
 800494e:	23a0      	movs	r3, #160	@ 0xa0
 8004950:	05db      	lsls	r3, r3, #23
 8004952:	2201      	movs	r2, #1
 8004954:	2102      	movs	r1, #2
 8004956:	0018      	movs	r0, r3
 8004958:	f002 f8c7 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_SET);
 800495c:	23a0      	movs	r3, #160	@ 0xa0
 800495e:	05db      	lsls	r3, r3, #23
 8004960:	2201      	movs	r2, #1
 8004962:	2110      	movs	r1, #16
 8004964:	0018      	movs	r0, r3
 8004966:	f002 f8c0 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set White
	      HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin,
 800496a:	4b0a      	ldr	r3, [pc, #40]	@ (8004994 <AdjustStateTo7+0x58>)
 800496c:	2201      	movs	r2, #1
 800496e:	2101      	movs	r1, #1
 8004970:	0018      	movs	r0, r3
 8004972:	f002 f8ba 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_SET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin,
 8004976:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <AdjustStateTo7+0x58>)
 8004978:	2201      	movs	r2, #1
 800497a:	2102      	movs	r1, #2
 800497c:	0018      	movs	r0, r3
 800497e:	f002 f8b4 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_SET);
	      HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin,
 8004982:	4b04      	ldr	r3, [pc, #16]	@ (8004994 <AdjustStateTo7+0x58>)
 8004984:	2201      	movs	r2, #1
 8004986:	2104      	movs	r1, #4
 8004988:	0018      	movs	r0, r3
 800498a:	f002 f8ae 	bl	8006aea <HAL_GPIO_WritePin>
	                        GPIO_PIN_SET);
}
 800498e:	46c0      	nop			@ (mov r8, r8)
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	50000400 	.word	0x50000400

08004998 <AdjustValueInTo0>:
 */

/*
 * AdjustValueInTo0() Sets output communication bits to 0 (000) and the threshold LED to OFF
 */
void AdjustValueInTo0(){
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
	// value 0 = 000
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_RESET);
 800499c:	23a0      	movs	r3, #160	@ 0xa0
 800499e:	05db      	lsls	r3, r3, #23
 80049a0:	2200      	movs	r2, #0
 80049a2:	2101      	movs	r1, #1
 80049a4:	0018      	movs	r0, r3
 80049a6:	f002 f8a0 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_RESET);
 80049aa:	23a0      	movs	r3, #160	@ 0xa0
 80049ac:	05db      	lsls	r3, r3, #23
 80049ae:	2200      	movs	r2, #0
 80049b0:	2102      	movs	r1, #2
 80049b2:	0018      	movs	r0, r3
 80049b4:	f002 f899 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_RESET);
 80049b8:	23a0      	movs	r3, #160	@ 0xa0
 80049ba:	05db      	lsls	r3, r3, #23
 80049bc:	2200      	movs	r2, #0
 80049be:	2110      	movs	r1, #16
 80049c0:	0018      	movs	r0, r3
 80049c2:	f002 f892 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set OFF
	      HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_RESET);
 80049c6:	4b0c      	ldr	r3, [pc, #48]	@ (80049f8 <AdjustValueInTo0+0x60>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	2108      	movs	r1, #8
 80049cc:	0018      	movs	r0, r3
 80049ce:	f002 f88c 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_RESET);
 80049d2:	4b09      	ldr	r3, [pc, #36]	@ (80049f8 <AdjustValueInTo0+0x60>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	2110      	movs	r1, #16
 80049d8:	0018      	movs	r0, r3
 80049da:	f002 f886 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_RESET);
 80049de:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <AdjustValueInTo0+0x60>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	2120      	movs	r1, #32
 80049e4:	0018      	movs	r0, r3
 80049e6:	f002 f880 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_Delay(14);
 80049ea:	200e      	movs	r0, #14
 80049ec:	f001 f918 	bl	8005c20 <HAL_Delay>
}
 80049f0:	46c0      	nop			@ (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	50000400 	.word	0x50000400

080049fc <AdjustValueInTo1>:

/*
 * AdjustValueInTo1() Sets output communication bits to 1 (001) and the threshold LED to RED
 */
void AdjustValueInTo1(){
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_SET);
 8004a00:	23a0      	movs	r3, #160	@ 0xa0
 8004a02:	05db      	lsls	r3, r3, #23
 8004a04:	2201      	movs	r2, #1
 8004a06:	2101      	movs	r1, #1
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f002 f86e 	bl	8006aea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_RESET);
 8004a0e:	23a0      	movs	r3, #160	@ 0xa0
 8004a10:	05db      	lsls	r3, r3, #23
 8004a12:	2200      	movs	r2, #0
 8004a14:	2102      	movs	r1, #2
 8004a16:	0018      	movs	r0, r3
 8004a18:	f002 f867 	bl	8006aea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_RESET);
 8004a1c:	23a0      	movs	r3, #160	@ 0xa0
 8004a1e:	05db      	lsls	r3, r3, #23
 8004a20:	2200      	movs	r2, #0
 8004a22:	2110      	movs	r1, #16
 8004a24:	0018      	movs	r0, r3
 8004a26:	f002 f860 	bl	8006aea <HAL_GPIO_WritePin>

	// Set Red
	   HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_SET);
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <AdjustValueInTo1+0x60>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	2108      	movs	r1, #8
 8004a30:	0018      	movs	r0, r3
 8004a32:	f002 f85a 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_RESET);
 8004a36:	4b09      	ldr	r3, [pc, #36]	@ (8004a5c <AdjustValueInTo1+0x60>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2110      	movs	r1, #16
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f002 f854 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_RESET);
 8004a42:	4b06      	ldr	r3, [pc, #24]	@ (8004a5c <AdjustValueInTo1+0x60>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	2120      	movs	r1, #32
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f002 f84e 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_Delay(14);
 8004a4e:	200e      	movs	r0, #14
 8004a50:	f001 f8e6 	bl	8005c20 <HAL_Delay>
}
 8004a54:	46c0      	nop			@ (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	50000400 	.word	0x50000400

08004a60 <AdjustValueInTo2>:

/*
 * AdjustValueInTo2() Sets output communication bits to 2 (010) and the threshold LED to YELLOW
 */
void AdjustValueInTo2(){
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
	// value 2 = 010
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_RESET);
 8004a64:	23a0      	movs	r3, #160	@ 0xa0
 8004a66:	05db      	lsls	r3, r3, #23
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f002 f83c 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_SET);
 8004a72:	23a0      	movs	r3, #160	@ 0xa0
 8004a74:	05db      	lsls	r3, r3, #23
 8004a76:	2201      	movs	r2, #1
 8004a78:	2102      	movs	r1, #2
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f002 f835 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_RESET);
 8004a80:	23a0      	movs	r3, #160	@ 0xa0
 8004a82:	05db      	lsls	r3, r3, #23
 8004a84:	2200      	movs	r2, #0
 8004a86:	2110      	movs	r1, #16
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f002 f82e 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set Yellow
	      HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_SET);
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac0 <AdjustValueInTo2+0x60>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	2108      	movs	r1, #8
 8004a94:	0018      	movs	r0, r3
 8004a96:	f002 f828 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_SET);
 8004a9a:	4b09      	ldr	r3, [pc, #36]	@ (8004ac0 <AdjustValueInTo2+0x60>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	2110      	movs	r1, #16
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f002 f822 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_RESET);
 8004aa6:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <AdjustValueInTo2+0x60>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2120      	movs	r1, #32
 8004aac:	0018      	movs	r0, r3
 8004aae:	f002 f81c 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_Delay(14);
 8004ab2:	200e      	movs	r0, #14
 8004ab4:	f001 f8b4 	bl	8005c20 <HAL_Delay>
}
 8004ab8:	46c0      	nop			@ (mov r8, r8)
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	50000400 	.word	0x50000400

08004ac4 <AdjustValueInTo3>:

/*
 * AdjustValueInTo3() Sets output communication bits to 3 (110) and the threshold LED to GREEN
 */
void AdjustValueInTo3(){
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
	// value 3 = 011
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_SET);
 8004ac8:	23a0      	movs	r3, #160	@ 0xa0
 8004aca:	05db      	lsls	r3, r3, #23
 8004acc:	2201      	movs	r2, #1
 8004ace:	2101      	movs	r1, #1
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f002 f80a 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_SET);
 8004ad6:	23a0      	movs	r3, #160	@ 0xa0
 8004ad8:	05db      	lsls	r3, r3, #23
 8004ada:	2201      	movs	r2, #1
 8004adc:	2102      	movs	r1, #2
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f002 f803 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_RESET);
 8004ae4:	23a0      	movs	r3, #160	@ 0xa0
 8004ae6:	05db      	lsls	r3, r3, #23
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2110      	movs	r1, #16
 8004aec:	0018      	movs	r0, r3
 8004aee:	f001 fffc 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set Green
	      HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_RESET);
 8004af2:	4b0c      	ldr	r3, [pc, #48]	@ (8004b24 <AdjustValueInTo3+0x60>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	2108      	movs	r1, #8
 8004af8:	0018      	movs	r0, r3
 8004afa:	f001 fff6 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_SET);
 8004afe:	4b09      	ldr	r3, [pc, #36]	@ (8004b24 <AdjustValueInTo3+0x60>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	2110      	movs	r1, #16
 8004b04:	0018      	movs	r0, r3
 8004b06:	f001 fff0 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_RESET);
 8004b0a:	4b06      	ldr	r3, [pc, #24]	@ (8004b24 <AdjustValueInTo3+0x60>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2120      	movs	r1, #32
 8004b10:	0018      	movs	r0, r3
 8004b12:	f001 ffea 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_Delay(14);
 8004b16:	200e      	movs	r0, #14
 8004b18:	f001 f882 	bl	8005c20 <HAL_Delay>
}
 8004b1c:	46c0      	nop			@ (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	50000400 	.word	0x50000400

08004b28 <AdjustValueInTo4>:

/*
 * AdjustValueInTo4() Sets output communication bits to 4 (100) and the threshold LED to CYAN
 */
void AdjustValueInTo4(){
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
	// value 4 = 100
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_RESET);
 8004b2c:	23a0      	movs	r3, #160	@ 0xa0
 8004b2e:	05db      	lsls	r3, r3, #23
 8004b30:	2200      	movs	r2, #0
 8004b32:	2101      	movs	r1, #1
 8004b34:	0018      	movs	r0, r3
 8004b36:	f001 ffd8 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_RESET);
 8004b3a:	23a0      	movs	r3, #160	@ 0xa0
 8004b3c:	05db      	lsls	r3, r3, #23
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2102      	movs	r1, #2
 8004b42:	0018      	movs	r0, r3
 8004b44:	f001 ffd1 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_SET);
 8004b48:	23a0      	movs	r3, #160	@ 0xa0
 8004b4a:	05db      	lsls	r3, r3, #23
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	2110      	movs	r1, #16
 8004b50:	0018      	movs	r0, r3
 8004b52:	f001 ffca 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set Cyan
	      HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_RESET);
 8004b56:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <AdjustValueInTo4+0x60>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2108      	movs	r1, #8
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f001 ffc4 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_SET);
 8004b62:	4b09      	ldr	r3, [pc, #36]	@ (8004b88 <AdjustValueInTo4+0x60>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	2110      	movs	r1, #16
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f001 ffbe 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_SET);
 8004b6e:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <AdjustValueInTo4+0x60>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	2120      	movs	r1, #32
 8004b74:	0018      	movs	r0, r3
 8004b76:	f001 ffb8 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_Delay(14);
 8004b7a:	200e      	movs	r0, #14
 8004b7c:	f001 f850 	bl	8005c20 <HAL_Delay>
}
 8004b80:	46c0      	nop			@ (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	46c0      	nop			@ (mov r8, r8)
 8004b88:	50000400 	.word	0x50000400

08004b8c <AdjustValueInTo5>:

/*
 * AdjustValueInTo5() Sets output communication bits to 5 (101) and the threshold LED to BLUE
 */
void AdjustValueInTo5(){
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
	// value 5 = 101
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_SET);
 8004b90:	23a0      	movs	r3, #160	@ 0xa0
 8004b92:	05db      	lsls	r3, r3, #23
 8004b94:	2201      	movs	r2, #1
 8004b96:	2101      	movs	r1, #1
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f001 ffa6 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_RESET);
 8004b9e:	23a0      	movs	r3, #160	@ 0xa0
 8004ba0:	05db      	lsls	r3, r3, #23
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f001 ff9f 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_SET);
 8004bac:	23a0      	movs	r3, #160	@ 0xa0
 8004bae:	05db      	lsls	r3, r3, #23
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	2110      	movs	r1, #16
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f001 ff98 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set Blue
	      HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_RESET);
 8004bba:	4b0c      	ldr	r3, [pc, #48]	@ (8004bec <AdjustValueInTo5+0x60>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2108      	movs	r1, #8
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f001 ff92 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_RESET);
 8004bc6:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <AdjustValueInTo5+0x60>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2110      	movs	r1, #16
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f001 ff8c 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_SET);
 8004bd2:	4b06      	ldr	r3, [pc, #24]	@ (8004bec <AdjustValueInTo5+0x60>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	2120      	movs	r1, #32
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f001 ff86 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_Delay(14);
 8004bde:	200e      	movs	r0, #14
 8004be0:	f001 f81e 	bl	8005c20 <HAL_Delay>
}
 8004be4:	46c0      	nop			@ (mov r8, r8)
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	50000400 	.word	0x50000400

08004bf0 <AdjustValueInTo6>:

/*
 * AdjustValueInTo6() Sets output communication bits to 6 (110) and the threshold LED to MAGENTA
 */
void AdjustValueInTo6(){
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
	// value 6 = 110
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_RESET);
 8004bf4:	23a0      	movs	r3, #160	@ 0xa0
 8004bf6:	05db      	lsls	r3, r3, #23
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f001 ff74 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_SET);
 8004c02:	23a0      	movs	r3, #160	@ 0xa0
 8004c04:	05db      	lsls	r3, r3, #23
 8004c06:	2201      	movs	r2, #1
 8004c08:	2102      	movs	r1, #2
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f001 ff6d 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_SET);
 8004c10:	23a0      	movs	r3, #160	@ 0xa0
 8004c12:	05db      	lsls	r3, r3, #23
 8004c14:	2201      	movs	r2, #1
 8004c16:	2110      	movs	r1, #16
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f001 ff66 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set Magenta
	      HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_SET);
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <AdjustValueInTo6+0x60>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	2108      	movs	r1, #8
 8004c24:	0018      	movs	r0, r3
 8004c26:	f001 ff60 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_RESET);
 8004c2a:	4b09      	ldr	r3, [pc, #36]	@ (8004c50 <AdjustValueInTo6+0x60>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2110      	movs	r1, #16
 8004c30:	0018      	movs	r0, r3
 8004c32:	f001 ff5a 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_SET);
 8004c36:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <AdjustValueInTo6+0x60>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	2120      	movs	r1, #32
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f001 ff54 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_Delay(14);
 8004c42:	200e      	movs	r0, #14
 8004c44:	f000 ffec 	bl	8005c20 <HAL_Delay>
}
 8004c48:	46c0      	nop			@ (mov r8, r8)
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	46c0      	nop			@ (mov r8, r8)
 8004c50:	50000400 	.word	0x50000400

08004c54 <AdjustValueInTo7>:

/*
 * AdjustValueInTo7() Sets output communication bits to 7 (111) and the threshold LED to WHITE
 */
void AdjustValueInTo7(){
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
	// value 7 = 111
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_SET);
 8004c58:	23a0      	movs	r3, #160	@ 0xa0
 8004c5a:	05db      	lsls	r3, r3, #23
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	2101      	movs	r1, #1
 8004c60:	0018      	movs	r0, r3
 8004c62:	f001 ff42 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_SET);
 8004c66:	23a0      	movs	r3, #160	@ 0xa0
 8004c68:	05db      	lsls	r3, r3, #23
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f001 ff3b 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_SET);
 8004c74:	23a0      	movs	r3, #160	@ 0xa0
 8004c76:	05db      	lsls	r3, r3, #23
 8004c78:	2201      	movs	r2, #1
 8004c7a:	2110      	movs	r1, #16
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f001 ff34 	bl	8006aea <HAL_GPIO_WritePin>

	      // Set White
	      HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_SET);
 8004c82:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb4 <AdjustValueInTo7+0x60>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	2108      	movs	r1, #8
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f001 ff2e 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_SET);
 8004c8e:	4b09      	ldr	r3, [pc, #36]	@ (8004cb4 <AdjustValueInTo7+0x60>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	2110      	movs	r1, #16
 8004c94:	0018      	movs	r0, r3
 8004c96:	f001 ff28 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_SET);
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <AdjustValueInTo7+0x60>)
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	2120      	movs	r1, #32
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f001 ff22 	bl	8006aea <HAL_GPIO_WritePin>
	      HAL_Delay(14);
 8004ca6:	200e      	movs	r0, #14
 8004ca8:	f000 ffba 	bl	8005c20 <HAL_Delay>
}
 8004cac:	46c0      	nop			@ (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	50000400 	.word	0x50000400

08004cb8 <User_Input_Light_Cycle>:
 *
 * NOTE: Only cycles through colors once! To cycle multiple times, call the function multiple times.
 *
 * Used in Button_Debounce_Set()
 */
void User_Input_Light_Cycle() {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
   // 1. Set Red
   HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_SET);
 8004cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	2108      	movs	r1, #8
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f001 ff11 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_RESET);
 8004cc8:	4b47      	ldr	r3, [pc, #284]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2110      	movs	r1, #16
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f001 ff0b 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_RESET);
 8004cd4:	4b44      	ldr	r3, [pc, #272]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2120      	movs	r1, #32
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f001 ff05 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_Delay(14);
 8004ce0:	200e      	movs	r0, #14
 8004ce2:	f000 ff9d 	bl	8005c20 <HAL_Delay>

   // 2. Set Yellow (Red + Green)
   HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_SET);
 8004ce6:	4b40      	ldr	r3, [pc, #256]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	2108      	movs	r1, #8
 8004cec:	0018      	movs	r0, r3
 8004cee:	f001 fefc 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_SET);
 8004cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	2110      	movs	r1, #16
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f001 fef6 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_RESET);
 8004cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	2120      	movs	r1, #32
 8004d04:	0018      	movs	r0, r3
 8004d06:	f001 fef0 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_Delay(14);
 8004d0a:	200e      	movs	r0, #14
 8004d0c:	f000 ff88 	bl	8005c20 <HAL_Delay>

   // 3. Set Green
   HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_RESET);
 8004d10:	4b35      	ldr	r3, [pc, #212]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	2108      	movs	r1, #8
 8004d16:	0018      	movs	r0, r3
 8004d18:	f001 fee7 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_SET);
 8004d1c:	4b32      	ldr	r3, [pc, #200]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	2110      	movs	r1, #16
 8004d22:	0018      	movs	r0, r3
 8004d24:	f001 fee1 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_RESET);
 8004d28:	4b2f      	ldr	r3, [pc, #188]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2120      	movs	r1, #32
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f001 fedb 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_Delay(14);
 8004d34:	200e      	movs	r0, #14
 8004d36:	f000 ff73 	bl	8005c20 <HAL_Delay>

   // 4. Set Cyan (Green + Blue)
   HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_RESET);
 8004d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2108      	movs	r1, #8
 8004d40:	0018      	movs	r0, r3
 8004d42:	f001 fed2 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_SET);
 8004d46:	4b28      	ldr	r3, [pc, #160]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	2110      	movs	r1, #16
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f001 fecc 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_SET);
 8004d52:	4b25      	ldr	r3, [pc, #148]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	2120      	movs	r1, #32
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f001 fec6 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_Delay(14);
 8004d5e:	200e      	movs	r0, #14
 8004d60:	f000 ff5e 	bl	8005c20 <HAL_Delay>

   // 5. Set Blue
   HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_RESET);
 8004d64:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	2108      	movs	r1, #8
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f001 febd 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_RESET);
 8004d70:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	2110      	movs	r1, #16
 8004d76:	0018      	movs	r0, r3
 8004d78:	f001 feb7 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_SET);
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	2120      	movs	r1, #32
 8004d82:	0018      	movs	r0, r3
 8004d84:	f001 feb1 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_Delay(14);
 8004d88:	200e      	movs	r0, #14
 8004d8a:	f000 ff49 	bl	8005c20 <HAL_Delay>

   // 6. Set Magenta (Red + Blue)
   HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_SET);
 8004d8e:	4b16      	ldr	r3, [pc, #88]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	2108      	movs	r1, #8
 8004d94:	0018      	movs	r0, r3
 8004d96:	f001 fea8 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_RESET);
 8004d9a:	4b13      	ldr	r3, [pc, #76]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2110      	movs	r1, #16
 8004da0:	0018      	movs	r0, r3
 8004da2:	f001 fea2 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_SET);
 8004da6:	4b10      	ldr	r3, [pc, #64]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	2120      	movs	r1, #32
 8004dac:	0018      	movs	r0, r3
 8004dae:	f001 fe9c 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_Delay(14);
 8004db2:	200e      	movs	r0, #14
 8004db4:	f000 ff34 	bl	8005c20 <HAL_Delay>

   // 7. Set White (Red + Green + Blue)
   HAL_GPIO_WritePin(Threshold_Red_GPIO_Port, Threshold_Red_Pin, GPIO_PIN_SET);
 8004db8:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	2108      	movs	r1, #8
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f001 fe93 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Green_GPIO_Port, Threshold_Green_Pin, GPIO_PIN_SET);
 8004dc4:	4b08      	ldr	r3, [pc, #32]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	2110      	movs	r1, #16
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f001 fe8d 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Threshold_Blue_GPIO_Port, Threshold_Blue_Pin, GPIO_PIN_SET);
 8004dd0:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <User_Input_Light_Cycle+0x130>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	2120      	movs	r1, #32
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f001 fe87 	bl	8006aea <HAL_GPIO_WritePin>
   HAL_Delay(14);
 8004ddc:	200e      	movs	r0, #14
 8004dde:	f000 ff1f 	bl	8005c20 <HAL_Delay>
}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	50000400 	.word	0x50000400

08004dec <Button_Debounce_Set>:
 * only updates when a button is pressed for at least 50ms to reduce bounce.
 * While the button is being pressed, the load switch output is set to the highest by calling
 * Reset_The_Whole_B() and the threshold LED flashes using User_Input_Light_Cycle().
 * Outputs by calling setNumber() after every change to valueToAdjust and at the end of the function.
 */
void Button_Debounce_Set() {
 8004dec:	b590      	push	{r4, r7, lr}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
   uint8_t currentPlusState = HAL_GPIO_ReadPin(GPIOC, Plus_Pin);
 8004df2:	1dfc      	adds	r4, r7, #7
 8004df4:	4b6e      	ldr	r3, [pc, #440]	@ (8004fb0 <Button_Debounce_Set+0x1c4>)
 8004df6:	2102      	movs	r1, #2
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f001 fe59 	bl	8006ab0 <HAL_GPIO_ReadPin>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	7023      	strb	r3, [r4, #0]
   uint8_t currentMinusState = HAL_GPIO_ReadPin(GPIOC, Minus_Pin);
 8004e02:	1dbc      	adds	r4, r7, #6
 8004e04:	4b6a      	ldr	r3, [pc, #424]	@ (8004fb0 <Button_Debounce_Set+0x1c4>)
 8004e06:	2101      	movs	r1, #1
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f001 fe51 	bl	8006ab0 <HAL_GPIO_ReadPin>
 8004e0e:	0003      	movs	r3, r0
 8004e10:	7023      	strb	r3, [r4, #0]
   //setNumber();

   if (currentPlusState == GPIO_PIN_SET || currentMinusState == GPIO_PIN_SET) {
 8004e12:	1dfb      	adds	r3, r7, #7
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d004      	beq.n	8004e24 <Button_Debounce_Set+0x38>
 8004e1a:	1dbb      	adds	r3, r7, #6
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d000      	beq.n	8004e24 <Button_Debounce_Set+0x38>
 8004e22:	e0c0      	b.n	8004fa6 <Button_Debounce_Set+0x1ba>
	   Reset_The_Whole_B();
 8004e24:	f000 fa40 	bl	80052a8 <Reset_The_Whole_B>
      // set to high state
      if ((HAL_GetTick() - lastDebounceTime) > debounceDelay) {
 8004e28:	f000 fef0 	bl	8005c0c <HAL_GetTick>
 8004e2c:	0002      	movs	r2, r0
 8004e2e:	4b61      	ldr	r3, [pc, #388]	@ (8004fb4 <Button_Debounce_Set+0x1c8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2232      	movs	r2, #50	@ 0x32
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d800      	bhi.n	8004e3c <Button_Debounce_Set+0x50>
 8004e3a:	e0aa      	b.n	8004f92 <Button_Debounce_Set+0x1a6>
         // Only update the value if the state has changed
         if ((currentPlusState == GPIO_PIN_SET && lastPlusState != GPIO_PIN_SET) ||
 8004e3c:	1dfb      	adds	r3, r7, #7
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d103      	bne.n	8004e4c <Button_Debounce_Set+0x60>
 8004e44:	4b5c      	ldr	r3, [pc, #368]	@ (8004fb8 <Button_Debounce_Set+0x1cc>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d107      	bne.n	8004e5c <Button_Debounce_Set+0x70>
 8004e4c:	1dbb      	adds	r3, r7, #6
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d12a      	bne.n	8004eaa <Button_Debounce_Set+0xbe>
             (currentMinusState == GPIO_PIN_SET && lastMinusState != GPIO_PIN_SET)) {
 8004e54:	4b59      	ldr	r3, [pc, #356]	@ (8004fbc <Button_Debounce_Set+0x1d0>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d026      	beq.n	8004eaa <Button_Debounce_Set+0xbe>
        	 Reset_The_Whole_B();
 8004e5c:	f000 fa24 	bl	80052a8 <Reset_The_Whole_B>
            if (currentPlusState == GPIO_PIN_SET) {
 8004e60:	1dfb      	adds	r3, r7, #7
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10e      	bne.n	8004e86 <Button_Debounce_Set+0x9a>
               valueToAdjust++;
 8004e68:	4b55      	ldr	r3, [pc, #340]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	4b54      	ldr	r3, [pc, #336]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004e70:	601a      	str	r2, [r3, #0]
               if (valueToAdjust >= 7) {
 8004e72:	4b53      	ldr	r3, [pc, #332]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b06      	cmp	r3, #6
 8004e78:	dd17      	ble.n	8004eaa <Button_Debounce_Set+0xbe>
                  valueToAdjust = 7;
 8004e7a:	4b51      	ldr	r3, [pc, #324]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004e7c:	2207      	movs	r2, #7
 8004e7e:	601a      	str	r2, [r3, #0]
                  setNumber();
 8004e80:	f7ff faea 	bl	8004458 <setNumber>
 8004e84:	e011      	b.n	8004eaa <Button_Debounce_Set+0xbe>
               }
            }

            else if (currentMinusState == GPIO_PIN_SET) {
 8004e86:	1dbb      	adds	r3, r7, #6
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d10d      	bne.n	8004eaa <Button_Debounce_Set+0xbe>
               valueToAdjust--;
 8004e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	1e5a      	subs	r2, r3, #1
 8004e94:	4b4a      	ldr	r3, [pc, #296]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004e96:	601a      	str	r2, [r3, #0]
               if (valueToAdjust < 0) {
 8004e98:	4b49      	ldr	r3, [pc, #292]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	da04      	bge.n	8004eaa <Button_Debounce_Set+0xbe>
                  valueToAdjust = 0;
 8004ea0:	4b47      	ldr	r3, [pc, #284]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
                  setNumber();
 8004ea6:	f7ff fad7 	bl	8004458 <setNumber>
               }
            }
         }

         flashingStartTime = HAL_GetTick();
 8004eaa:	f000 feaf 	bl	8005c0c <HAL_GetTick>
 8004eae:	0002      	movs	r2, r0
 8004eb0:	4b44      	ldr	r3, [pc, #272]	@ (8004fc4 <Button_Debounce_Set+0x1d8>)
 8004eb2:	601a      	str	r2, [r3, #0]
         while ((HAL_GetTick() - flashingStartTime) < flashingDuration) {
 8004eb4:	e05f      	b.n	8004f76 <Button_Debounce_Set+0x18a>
            // Save the last state before reading the current state
            lastPlusState = currentPlusState;
 8004eb6:	4b40      	ldr	r3, [pc, #256]	@ (8004fb8 <Button_Debounce_Set+0x1cc>)
 8004eb8:	1dfa      	adds	r2, r7, #7
 8004eba:	7812      	ldrb	r2, [r2, #0]
 8004ebc:	701a      	strb	r2, [r3, #0]
            lastMinusState = currentMinusState;
 8004ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8004fbc <Button_Debounce_Set+0x1d0>)
 8004ec0:	1dba      	adds	r2, r7, #6
 8004ec2:	7812      	ldrb	r2, [r2, #0]
 8004ec4:	701a      	strb	r2, [r3, #0]

            currentPlusState = HAL_GPIO_ReadPin(GPIOC, Plus_Pin);
 8004ec6:	1dfc      	adds	r4, r7, #7
 8004ec8:	4b39      	ldr	r3, [pc, #228]	@ (8004fb0 <Button_Debounce_Set+0x1c4>)
 8004eca:	2102      	movs	r1, #2
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f001 fdef 	bl	8006ab0 <HAL_GPIO_ReadPin>
 8004ed2:	0003      	movs	r3, r0
 8004ed4:	7023      	strb	r3, [r4, #0]
            currentMinusState = HAL_GPIO_ReadPin(GPIOC, Minus_Pin);
 8004ed6:	1dbc      	adds	r4, r7, #6
 8004ed8:	4b35      	ldr	r3, [pc, #212]	@ (8004fb0 <Button_Debounce_Set+0x1c4>)
 8004eda:	2101      	movs	r1, #1
 8004edc:	0018      	movs	r0, r3
 8004ede:	f001 fde7 	bl	8006ab0 <HAL_GPIO_ReadPin>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	7023      	strb	r3, [r4, #0]

            // Check for subsequent button presses to restart the
            // timer
            if (currentPlusState == GPIO_PIN_SET || currentMinusState == GPIO_PIN_SET) {
 8004ee6:	1dfb      	adds	r3, r7, #7
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d003      	beq.n	8004ef6 <Button_Debounce_Set+0x10a>
 8004eee:	1dbb      	adds	r3, r7, #6
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d13f      	bne.n	8004f76 <Button_Debounce_Set+0x18a>
            	Reset_The_Whole_B();
 8004ef6:	f000 f9d7 	bl	80052a8 <Reset_The_Whole_B>
            	User_Input_Light_Cycle();
 8004efa:	f7ff fedd 	bl	8004cb8 <User_Input_Light_Cycle>
            	flashingStartTime = HAL_GetTick();  // Restart the 5-second
 8004efe:	f000 fe85 	bl	8005c0c <HAL_GetTick>
 8004f02:	0002      	movs	r2, r0
 8004f04:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc4 <Button_Debounce_Set+0x1d8>)
 8004f06:	601a      	str	r2, [r3, #0]
                                                   // interval

               // Only update the value if the state has changed
               if ((currentPlusState == GPIO_PIN_SET && lastPlusState != GPIO_PIN_SET) ||
 8004f08:	1dfb      	adds	r3, r7, #7
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d103      	bne.n	8004f18 <Button_Debounce_Set+0x12c>
 8004f10:	4b29      	ldr	r3, [pc, #164]	@ (8004fb8 <Button_Debounce_Set+0x1cc>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d107      	bne.n	8004f28 <Button_Debounce_Set+0x13c>
 8004f18:	1dbb      	adds	r3, r7, #6
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d12a      	bne.n	8004f76 <Button_Debounce_Set+0x18a>
                   (currentMinusState == GPIO_PIN_SET && lastMinusState != GPIO_PIN_SET)) {
 8004f20:	4b26      	ldr	r3, [pc, #152]	@ (8004fbc <Button_Debounce_Set+0x1d0>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d026      	beq.n	8004f76 <Button_Debounce_Set+0x18a>
            	   Reset_The_Whole_B();
 8004f28:	f000 f9be 	bl	80052a8 <Reset_The_Whole_B>
                  if (currentPlusState == GPIO_PIN_SET) {
 8004f2c:	1dfb      	adds	r3, r7, #7
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d10e      	bne.n	8004f52 <Button_Debounce_Set+0x166>
                     valueToAdjust++;
 8004f34:	4b22      	ldr	r3, [pc, #136]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	4b21      	ldr	r3, [pc, #132]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004f3c:	601a      	str	r2, [r3, #0]
                     if (valueToAdjust >= 7) {
 8004f3e:	4b20      	ldr	r3, [pc, #128]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b06      	cmp	r3, #6
 8004f44:	dd17      	ble.n	8004f76 <Button_Debounce_Set+0x18a>
                        valueToAdjust = 7;
 8004f46:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004f48:	2207      	movs	r2, #7
 8004f4a:	601a      	str	r2, [r3, #0]
                        setNumber();
 8004f4c:	f7ff fa84 	bl	8004458 <setNumber>
 8004f50:	e011      	b.n	8004f76 <Button_Debounce_Set+0x18a>
                     }
                  }

                  else if (currentMinusState == GPIO_PIN_SET) {
 8004f52:	1dbb      	adds	r3, r7, #6
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10d      	bne.n	8004f76 <Button_Debounce_Set+0x18a>
                     valueToAdjust--;
 8004f5a:	4b19      	ldr	r3, [pc, #100]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	1e5a      	subs	r2, r3, #1
 8004f60:	4b17      	ldr	r3, [pc, #92]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004f62:	601a      	str	r2, [r3, #0]
                     if (valueToAdjust < 0) {
 8004f64:	4b16      	ldr	r3, [pc, #88]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	da04      	bge.n	8004f76 <Button_Debounce_Set+0x18a>
                        valueToAdjust = 0;
 8004f6c:	4b14      	ldr	r3, [pc, #80]	@ (8004fc0 <Button_Debounce_Set+0x1d4>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
                        setNumber();
 8004f72:	f7ff fa71 	bl	8004458 <setNumber>
         while ((HAL_GetTick() - flashingStartTime) < flashingDuration) {
 8004f76:	f000 fe49 	bl	8005c0c <HAL_GetTick>
 8004f7a:	0002      	movs	r2, r0
 8004f7c:	4b11      	ldr	r3, [pc, #68]	@ (8004fc4 <Button_Debounce_Set+0x1d8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2296      	movs	r2, #150	@ 0x96
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d396      	bcc.n	8004eb6 <Button_Debounce_Set+0xca>
               // User_Input_Status_Light_Pin); HAL_Delay(100);
            }
            // 1. Set Red

         }
         lastDebounceTime = HAL_GetTick();
 8004f88:	f000 fe40 	bl	8005c0c <HAL_GetTick>
 8004f8c:	0002      	movs	r2, r0
 8004f8e:	4b09      	ldr	r3, [pc, #36]	@ (8004fb4 <Button_Debounce_Set+0x1c8>)
 8004f90:	601a      	str	r2, [r3, #0]
      }

      // Save the last state at the end of the loop
      lastPlusState = currentPlusState;
 8004f92:	4b09      	ldr	r3, [pc, #36]	@ (8004fb8 <Button_Debounce_Set+0x1cc>)
 8004f94:	1dfa      	adds	r2, r7, #7
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	701a      	strb	r2, [r3, #0]
      lastMinusState = currentMinusState;
 8004f9a:	4b08      	ldr	r3, [pc, #32]	@ (8004fbc <Button_Debounce_Set+0x1d0>)
 8004f9c:	1dba      	adds	r2, r7, #6
 8004f9e:	7812      	ldrb	r2, [r2, #0]
 8004fa0:	701a      	strb	r2, [r3, #0]

      setNumber();
 8004fa2:	f7ff fa59 	bl	8004458 <setNumber>

   }

}
 8004fa6:	46c0      	nop			@ (mov r8, r8)
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b003      	add	sp, #12
 8004fac:	bd90      	pop	{r4, r7, pc}
 8004fae:	46c0      	nop			@ (mov r8, r8)
 8004fb0:	50000800 	.word	0x50000800
 8004fb4:	20000324 	.word	0x20000324
 8004fb8:	20000330 	.word	0x20000330
 8004fbc:	20000331 	.word	0x20000331
 8004fc0:	2000032c 	.word	0x2000032c
 8004fc4:	20000328 	.word	0x20000328

08004fc8 <read_from_SD_board>:
 * threshold_value = 1234/1000 = 1.234 A
 *
 *
 */
void read_from_SD_board()
{
 8004fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fca:	b0ab      	sub	sp, #172	@ 0xac
 8004fcc:	af04      	add	r7, sp, #16
	float digit = 0.0f;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	228c      	movs	r2, #140	@ 0x8c
 8004fd2:	2108      	movs	r1, #8
 8004fd4:	1852      	adds	r2, r2, r1
 8004fd6:	19d2      	adds	r2, r2, r7
 8004fd8:	6013      	str	r3, [r2, #0]
	float number = 0.0f;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2288      	movs	r2, #136	@ 0x88
 8004fde:	1852      	adds	r2, r2, r1
 8004fe0:	19d2      	adds	r2, r2, r7
 8004fe2:	6013      	str	r3, [r2, #0]
	float value = 0.0f;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2284      	movs	r2, #132	@ 0x84
 8004fe8:	1852      	adds	r2, r2, r1
 8004fea:	19d2      	adds	r2, r2, r7
 8004fec:	6013      	str	r3, [r2, #0]
	char msg[128];

	while(digit < 4)
 8004fee:	e0dc      	b.n	80051aa <read_from_SD_board+0x1e2>
	{
		sprintf(msg, "%.3f,%.3f,%.3f\r\n", digit, number, value);
 8004ff0:	238c      	movs	r3, #140	@ 0x8c
 8004ff2:	2408      	movs	r4, #8
 8004ff4:	191b      	adds	r3, r3, r4
 8004ff6:	19db      	adds	r3, r3, r7
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	f7fe f80f 	bl	800301c <__aeabi_f2d>
 8004ffe:	6038      	str	r0, [r7, #0]
 8005000:	6079      	str	r1, [r7, #4]
 8005002:	2688      	movs	r6, #136	@ 0x88
 8005004:	1933      	adds	r3, r6, r4
 8005006:	19db      	adds	r3, r3, r7
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	f7fe f807 	bl	800301c <__aeabi_f2d>
 800500e:	0004      	movs	r4, r0
 8005010:	000d      	movs	r5, r1
 8005012:	2384      	movs	r3, #132	@ 0x84
 8005014:	2208      	movs	r2, #8
 8005016:	189b      	adds	r3, r3, r2
 8005018:	19db      	adds	r3, r3, r7
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	f7fd fffe 	bl	800301c <__aeabi_f2d>
 8005020:	0002      	movs	r2, r0
 8005022:	000b      	movs	r3, r1
 8005024:	4999      	ldr	r1, [pc, #612]	@ (800528c <read_from_SD_board+0x2c4>)
 8005026:	200c      	movs	r0, #12
 8005028:	1838      	adds	r0, r7, r0
 800502a:	9202      	str	r2, [sp, #8]
 800502c:	9303      	str	r3, [sp, #12]
 800502e:	9400      	str	r4, [sp, #0]
 8005030:	9501      	str	r5, [sp, #4]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f004 f8dd 	bl	80091f4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800503a:	250c      	movs	r5, #12
 800503c:	197b      	adds	r3, r7, r5
 800503e:	0018      	movs	r0, r3
 8005040:	f7fb f862 	bl	8000108 <strlen>
 8005044:	0003      	movs	r3, r0
 8005046:	b29a      	uxth	r2, r3
 8005048:	2301      	movs	r3, #1
 800504a:	425b      	negs	r3, r3
 800504c:	1979      	adds	r1, r7, r5
 800504e:	4890      	ldr	r0, [pc, #576]	@ (8005290 <read_from_SD_board+0x2c8>)
 8005050:	f002 fc88 	bl	8007964 <HAL_UART_Transmit>
		if(HAL_GPIO_ReadPin(GPIOB, SD_INPUT_DATA_Pin))
 8005054:	2380      	movs	r3, #128	@ 0x80
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4a8e      	ldr	r2, [pc, #568]	@ (8005294 <read_from_SD_board+0x2cc>)
 800505a:	0019      	movs	r1, r3
 800505c:	0010      	movs	r0, r2
 800505e:	f001 fd27 	bl	8006ab0 <HAL_GPIO_ReadPin>
 8005062:	1e03      	subs	r3, r0, #0
 8005064:	d02d      	beq.n	80050c2 <read_from_SD_board+0xfa>
		{
			// Set Red
			HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_SET);
 8005066:	4b8b      	ldr	r3, [pc, #556]	@ (8005294 <read_from_SD_board+0x2cc>)
 8005068:	2201      	movs	r2, #1
 800506a:	2101      	movs	r1, #1
 800506c:	0018      	movs	r0, r3
 800506e:	f001 fd3c 	bl	8006aea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8005072:	4b88      	ldr	r3, [pc, #544]	@ (8005294 <read_from_SD_board+0x2cc>)
 8005074:	2200      	movs	r2, #0
 8005076:	2102      	movs	r1, #2
 8005078:	0018      	movs	r0, r3
 800507a:	f001 fd36 	bl	8006aea <HAL_GPIO_WritePin>

			number++; //increase the number being read for specified digit
 800507e:	21fe      	movs	r1, #254	@ 0xfe
 8005080:	0589      	lsls	r1, r1, #22
 8005082:	2408      	movs	r4, #8
 8005084:	1933      	adds	r3, r6, r4
 8005086:	19db      	adds	r3, r3, r7
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	f7fb fbcf 	bl	800082c <__aeabi_fadd>
 800508e:	1c03      	adds	r3, r0, #0
 8005090:	1932      	adds	r2, r6, r4
 8005092:	19d2      	adds	r2, r2, r7
 8005094:	6013      	str	r3, [r2, #0]

			while(HAL_GPIO_ReadPin(GPIOB, SD_INPUT_DATA_Pin))//wait for input to be zero before reading next 1
 8005096:	e00b      	b.n	80050b0 <read_from_SD_board+0xe8>
			{
				// Turn off Red
				HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_RESET);
 8005098:	4b7e      	ldr	r3, [pc, #504]	@ (8005294 <read_from_SD_board+0x2cc>)
 800509a:	2200      	movs	r2, #0
 800509c:	2101      	movs	r1, #1
 800509e:	0018      	movs	r0, r3
 80050a0:	f001 fd23 	bl	8006aea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 80050a4:	4b7b      	ldr	r3, [pc, #492]	@ (8005294 <read_from_SD_board+0x2cc>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	2102      	movs	r1, #2
 80050aa:	0018      	movs	r0, r3
 80050ac:	f001 fd1d 	bl	8006aea <HAL_GPIO_WritePin>
			while(HAL_GPIO_ReadPin(GPIOB, SD_INPUT_DATA_Pin))//wait for input to be zero before reading next 1
 80050b0:	2380      	movs	r3, #128	@ 0x80
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	4a77      	ldr	r2, [pc, #476]	@ (8005294 <read_from_SD_board+0x2cc>)
 80050b6:	0019      	movs	r1, r3
 80050b8:	0010      	movs	r0, r2
 80050ba:	f001 fcf9 	bl	8006ab0 <HAL_GPIO_ReadPin>
 80050be:	1e03      	subs	r3, r0, #0
 80050c0:	d1ea      	bne.n	8005098 <read_from_SD_board+0xd0>
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB, SD_INPUT_DIGIT_Pin))
 80050c2:	2380      	movs	r3, #128	@ 0x80
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4a73      	ldr	r2, [pc, #460]	@ (8005294 <read_from_SD_board+0x2cc>)
 80050c8:	0019      	movs	r1, r3
 80050ca:	0010      	movs	r0, r2
 80050cc:	f001 fcf0 	bl	8006ab0 <HAL_GPIO_ReadPin>
 80050d0:	1e03      	subs	r3, r0, #0
 80050d2:	d06a      	beq.n	80051aa <read_from_SD_board+0x1e2>
		{
			//set Green
			HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_RESET);
 80050d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005294 <read_from_SD_board+0x2cc>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	2101      	movs	r1, #1
 80050da:	0018      	movs	r0, r3
 80050dc:	f001 fd05 	bl	8006aea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 80050e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005294 <read_from_SD_board+0x2cc>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	2102      	movs	r1, #2
 80050e6:	0018      	movs	r0, r3
 80050e8:	f001 fcff 	bl	8006aea <HAL_GPIO_WritePin>

			value = (number * pow(10,(digit))) + value; //value = (number * 10^(digit)) + value
 80050ec:	2388      	movs	r3, #136	@ 0x88
 80050ee:	2408      	movs	r4, #8
 80050f0:	191a      	adds	r2, r3, r4
 80050f2:	19d1      	adds	r1, r2, r7
 80050f4:	6808      	ldr	r0, [r1, #0]
 80050f6:	f7fd ff91 	bl	800301c <__aeabi_f2d>
 80050fa:	0004      	movs	r4, r0
 80050fc:	000d      	movs	r5, r1
 80050fe:	268c      	movs	r6, #140	@ 0x8c
 8005100:	2308      	movs	r3, #8
 8005102:	18f2      	adds	r2, r6, r3
 8005104:	19d1      	adds	r1, r2, r7
 8005106:	6808      	ldr	r0, [r1, #0]
 8005108:	f7fd ff88 	bl	800301c <__aeabi_f2d>
 800510c:	0002      	movs	r2, r0
 800510e:	000b      	movs	r3, r1
 8005110:	2000      	movs	r0, #0
 8005112:	4961      	ldr	r1, [pc, #388]	@ (8005298 <read_from_SD_board+0x2d0>)
 8005114:	f007 fd88 	bl	800cc28 <pow>
 8005118:	0002      	movs	r2, r0
 800511a:	000b      	movs	r3, r1
 800511c:	0020      	movs	r0, r4
 800511e:	0029      	movs	r1, r5
 8005120:	f7fd f868 	bl	80021f4 <__aeabi_dmul>
 8005124:	0002      	movs	r2, r0
 8005126:	000b      	movs	r3, r1
 8005128:	0014      	movs	r4, r2
 800512a:	001d      	movs	r5, r3
 800512c:	2184      	movs	r1, #132	@ 0x84
 800512e:	2308      	movs	r3, #8
 8005130:	18ca      	adds	r2, r1, r3
 8005132:	19d0      	adds	r0, r2, r7
 8005134:	6800      	ldr	r0, [r0, #0]
 8005136:	f7fd ff71 	bl	800301c <__aeabi_f2d>
 800513a:	0002      	movs	r2, r0
 800513c:	000b      	movs	r3, r1
 800513e:	0020      	movs	r0, r4
 8005140:	0029      	movs	r1, r5
 8005142:	f7fc f8af 	bl	80012a4 <__aeabi_dadd>
 8005146:	0002      	movs	r2, r0
 8005148:	000b      	movs	r3, r1
 800514a:	0010      	movs	r0, r2
 800514c:	0019      	movs	r1, r3
 800514e:	f7fd ffad 	bl	80030ac <__aeabi_d2f>
 8005152:	1c03      	adds	r3, r0, #0
 8005154:	2184      	movs	r1, #132	@ 0x84
 8005156:	2408      	movs	r4, #8
 8005158:	190a      	adds	r2, r1, r4
 800515a:	19d1      	adds	r1, r2, r7
 800515c:	600b      	str	r3, [r1, #0]
			digit++; //move to next digit
 800515e:	21fe      	movs	r1, #254	@ 0xfe
 8005160:	0589      	lsls	r1, r1, #22
 8005162:	1933      	adds	r3, r6, r4
 8005164:	19d8      	adds	r0, r3, r7
 8005166:	6800      	ldr	r0, [r0, #0]
 8005168:	f7fb fb60 	bl	800082c <__aeabi_fadd>
 800516c:	1c03      	adds	r3, r0, #0
 800516e:	1932      	adds	r2, r6, r4
 8005170:	19d1      	adds	r1, r2, r7
 8005172:	600b      	str	r3, [r1, #0]
			number = 0; //reset number
 8005174:	2300      	movs	r3, #0
 8005176:	2288      	movs	r2, #136	@ 0x88
 8005178:	1912      	adds	r2, r2, r4
 800517a:	19d2      	adds	r2, r2, r7
 800517c:	6013      	str	r3, [r2, #0]
			while(HAL_GPIO_ReadPin(GPIOB, SD_INPUT_DIGIT_Pin)) //wait for "digit" pin to reset before continuing
 800517e:	e00b      	b.n	8005198 <read_from_SD_board+0x1d0>
			{
				// Turn off Green
				HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_RESET);
 8005180:	4b44      	ldr	r3, [pc, #272]	@ (8005294 <read_from_SD_board+0x2cc>)
 8005182:	2200      	movs	r2, #0
 8005184:	2101      	movs	r1, #1
 8005186:	0018      	movs	r0, r3
 8005188:	f001 fcaf 	bl	8006aea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 800518c:	4b41      	ldr	r3, [pc, #260]	@ (8005294 <read_from_SD_board+0x2cc>)
 800518e:	2201      	movs	r2, #1
 8005190:	2102      	movs	r1, #2
 8005192:	0018      	movs	r0, r3
 8005194:	f001 fca9 	bl	8006aea <HAL_GPIO_WritePin>
			while(HAL_GPIO_ReadPin(GPIOB, SD_INPUT_DIGIT_Pin)) //wait for "digit" pin to reset before continuing
 8005198:	2380      	movs	r3, #128	@ 0x80
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4a3d      	ldr	r2, [pc, #244]	@ (8005294 <read_from_SD_board+0x2cc>)
 800519e:	0019      	movs	r1, r3
 80051a0:	0010      	movs	r0, r2
 80051a2:	f001 fc85 	bl	8006ab0 <HAL_GPIO_ReadPin>
 80051a6:	1e03      	subs	r3, r0, #0
 80051a8:	d1ea      	bne.n	8005180 <read_from_SD_board+0x1b8>
	while(digit < 4)
 80051aa:	2181      	movs	r1, #129	@ 0x81
 80051ac:	05c9      	lsls	r1, r1, #23
 80051ae:	238c      	movs	r3, #140	@ 0x8c
 80051b0:	2408      	movs	r4, #8
 80051b2:	191b      	adds	r3, r3, r4
 80051b4:	19db      	adds	r3, r3, r7
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	f7fb f988 	bl	80004cc <__aeabi_fcmplt>
 80051bc:	1e03      	subs	r3, r0, #0
 80051be:	d000      	beq.n	80051c2 <read_from_SD_board+0x1fa>
 80051c0:	e716      	b.n	8004ff0 <read_from_SD_board+0x28>
			}
		}
	}
	threshold_value = value/1000; //convert from mA to Amps
 80051c2:	4936      	ldr	r1, [pc, #216]	@ (800529c <read_from_SD_board+0x2d4>)
 80051c4:	2384      	movs	r3, #132	@ 0x84
 80051c6:	191b      	adds	r3, r3, r4
 80051c8:	19db      	adds	r3, r3, r7
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	f7fb fcb8 	bl	8000b40 <__aeabi_fdiv>
 80051d0:	1c03      	adds	r3, r0, #0
 80051d2:	1c1a      	adds	r2, r3, #0
 80051d4:	4b32      	ldr	r3, [pc, #200]	@ (80052a0 <read_from_SD_board+0x2d8>)
 80051d6:	601a      	str	r2, [r3, #0]

	if(threshold_value >= 2) //check if new threshold is valid
 80051d8:	4b31      	ldr	r3, [pc, #196]	@ (80052a0 <read_from_SD_board+0x2d8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2180      	movs	r1, #128	@ 0x80
 80051de:	05c9      	lsls	r1, r1, #23
 80051e0:	1c18      	adds	r0, r3, #0
 80051e2:	f7fb f991 	bl	8000508 <__aeabi_fcmpge>
 80051e6:	1e03      	subs	r3, r0, #0
 80051e8:	d00e      	beq.n	8005208 <read_from_SD_board+0x240>
	{
		valueToAdjust = 8;
 80051ea:	4b2e      	ldr	r3, [pc, #184]	@ (80052a4 <read_from_SD_board+0x2dc>)
 80051ec:	2208      	movs	r2, #8
 80051ee:	601a      	str	r2, [r3, #0]
		// Set Red
		HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_SET);
 80051f0:	4b28      	ldr	r3, [pc, #160]	@ (8005294 <read_from_SD_board+0x2cc>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	2101      	movs	r1, #1
 80051f6:	0018      	movs	r0, r3
 80051f8:	f001 fc77 	bl	8006aea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 80051fc:	4b25      	ldr	r3, [pc, #148]	@ (8005294 <read_from_SD_board+0x2cc>)
 80051fe:	2200      	movs	r2, #0
 8005200:	2102      	movs	r1, #2
 8005202:	0018      	movs	r0, r3
 8005204:	f001 fc71 	bl	8006aea <HAL_GPIO_WritePin>
	}

    // Set Yellow
    HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port, User_Input_Status_Light_Pin, GPIO_PIN_SET);
 8005208:	4b22      	ldr	r3, [pc, #136]	@ (8005294 <read_from_SD_board+0x2cc>)
 800520a:	2201      	movs	r2, #1
 800520c:	2101      	movs	r1, #1
 800520e:	0018      	movs	r0, r3
 8005210:	f001 fc6b 	bl	8006aea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8005214:	4b1f      	ldr	r3, [pc, #124]	@ (8005294 <read_from_SD_board+0x2cc>)
 8005216:	2201      	movs	r2, #1
 8005218:	2102      	movs	r1, #2
 800521a:	0018      	movs	r0, r3
 800521c:	f001 fc65 	bl	8006aea <HAL_GPIO_WritePin>

	sprintf(msg, "%.3f,%.3f,%.3f\r\n", digit, number, value);
 8005220:	238c      	movs	r3, #140	@ 0x8c
 8005222:	2608      	movs	r6, #8
 8005224:	199b      	adds	r3, r3, r6
 8005226:	19db      	adds	r3, r3, r7
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	f7fd fef7 	bl	800301c <__aeabi_f2d>
 800522e:	6038      	str	r0, [r7, #0]
 8005230:	6079      	str	r1, [r7, #4]
 8005232:	2388      	movs	r3, #136	@ 0x88
 8005234:	199b      	adds	r3, r3, r6
 8005236:	19db      	adds	r3, r3, r7
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	f7fd feef 	bl	800301c <__aeabi_f2d>
 800523e:	0004      	movs	r4, r0
 8005240:	000d      	movs	r5, r1
 8005242:	2384      	movs	r3, #132	@ 0x84
 8005244:	199b      	adds	r3, r3, r6
 8005246:	19db      	adds	r3, r3, r7
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	f7fd fee7 	bl	800301c <__aeabi_f2d>
 800524e:	0002      	movs	r2, r0
 8005250:	000b      	movs	r3, r1
 8005252:	490e      	ldr	r1, [pc, #56]	@ (800528c <read_from_SD_board+0x2c4>)
 8005254:	260c      	movs	r6, #12
 8005256:	19b8      	adds	r0, r7, r6
 8005258:	9202      	str	r2, [sp, #8]
 800525a:	9303      	str	r3, [sp, #12]
 800525c:	9400      	str	r4, [sp, #0]
 800525e:	9501      	str	r5, [sp, #4]
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f003 ffc6 	bl	80091f4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8005268:	0034      	movs	r4, r6
 800526a:	193b      	adds	r3, r7, r4
 800526c:	0018      	movs	r0, r3
 800526e:	f7fa ff4b 	bl	8000108 <strlen>
 8005272:	0003      	movs	r3, r0
 8005274:	b29a      	uxth	r2, r3
 8005276:	2301      	movs	r3, #1
 8005278:	425b      	negs	r3, r3
 800527a:	1939      	adds	r1, r7, r4
 800527c:	4804      	ldr	r0, [pc, #16]	@ (8005290 <read_from_SD_board+0x2c8>)
 800527e:	f002 fb71 	bl	8007964 <HAL_UART_Transmit>
}
 8005282:	46c0      	nop			@ (mov r8, r8)
 8005284:	46bd      	mov	sp, r7
 8005286:	b027      	add	sp, #156	@ 0x9c
 8005288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800528a:	46c0      	nop			@ (mov r8, r8)
 800528c:	0800db2c 	.word	0x0800db2c
 8005290:	20000278 	.word	0x20000278
 8005294:	50000400 	.word	0x50000400
 8005298:	40240000 	.word	0x40240000
 800529c:	447a0000 	.word	0x447a0000
 80052a0:	20000338 	.word	0x20000338
 80052a4:	2000032c 	.word	0x2000032c

080052a8 <Reset_The_Whole_B>:
 * RESETS all other load switch outputs.
 *
 * NOTE: This is the ONLY state function that also sets the state variable. All other states are handled
 * in the state machine.
 */
void Reset_The_Whole_B(){
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOB, LS_1_Pin, GPIO_PIN_RESET);
 80052ac:	2380      	movs	r3, #128	@ 0x80
 80052ae:	015b      	lsls	r3, r3, #5
 80052b0:	4824      	ldr	r0, [pc, #144]	@ (8005344 <Reset_The_Whole_B+0x9c>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	0019      	movs	r1, r3
 80052b6:	f001 fc18 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_2_Pin, GPIO_PIN_RESET);
 80052ba:	2380      	movs	r3, #128	@ 0x80
 80052bc:	019b      	lsls	r3, r3, #6
 80052be:	4821      	ldr	r0, [pc, #132]	@ (8005344 <Reset_The_Whole_B+0x9c>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	0019      	movs	r1, r3
 80052c4:	f001 fc11 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_3_Pin, GPIO_PIN_RESET);
 80052c8:	2380      	movs	r3, #128	@ 0x80
 80052ca:	01db      	lsls	r3, r3, #7
 80052cc:	481d      	ldr	r0, [pc, #116]	@ (8005344 <Reset_The_Whole_B+0x9c>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	0019      	movs	r1, r3
 80052d2:	f001 fc0a 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_4_Pin, GPIO_PIN_RESET);
 80052d6:	2380      	movs	r3, #128	@ 0x80
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	481a      	ldr	r0, [pc, #104]	@ (8005344 <Reset_The_Whole_B+0x9c>)
 80052dc:	2200      	movs	r2, #0
 80052de:	0019      	movs	r1, r3
 80052e0:	f001 fc03 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_LOW_Pin, GPIO_PIN_RESET);
 80052e4:	4b18      	ldr	r3, [pc, #96]	@ (8005348 <Reset_The_Whole_B+0xa0>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	2140      	movs	r1, #64	@ 0x40
 80052ea:	0018      	movs	r0, r3
 80052ec:	f001 fbfd 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_5_Pin, GPIO_PIN_RESET);
 80052f0:	4b15      	ldr	r3, [pc, #84]	@ (8005348 <Reset_The_Whole_B+0xa0>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	2180      	movs	r1, #128	@ 0x80
 80052f6:	0018      	movs	r0, r3
 80052f8:	f001 fbf7 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_6_Pin, GPIO_PIN_RESET);
 80052fc:	2380      	movs	r3, #128	@ 0x80
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	4811      	ldr	r0, [pc, #68]	@ (8005348 <Reset_The_Whole_B+0xa0>)
 8005302:	2200      	movs	r2, #0
 8005304:	0019      	movs	r1, r3
 8005306:	f001 fbf0 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_7_Pin, GPIO_PIN_RESET);
 800530a:	2380      	movs	r3, #128	@ 0x80
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	480e      	ldr	r0, [pc, #56]	@ (8005348 <Reset_The_Whole_B+0xa0>)
 8005310:	2200      	movs	r2, #0
 8005312:	0019      	movs	r1, r3
 8005314:	f001 fbe9 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, LS_8_Pin, GPIO_PIN_SET);
 8005318:	2380      	movs	r3, #128	@ 0x80
 800531a:	0059      	lsls	r1, r3, #1
 800531c:	23a0      	movs	r3, #160	@ 0xa0
 800531e:	05db      	lsls	r3, r3, #23
 8005320:	2201      	movs	r2, #1
 8005322:	0018      	movs	r0, r3
 8005324:	f001 fbe1 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, LS_HIGH_Pin, GPIO_PIN_SET);
 8005328:	2380      	movs	r3, #128	@ 0x80
 800532a:	0099      	lsls	r1, r3, #2
 800532c:	23a0      	movs	r3, #160	@ 0xa0
 800532e:	05db      	lsls	r3, r3, #23
 8005330:	2201      	movs	r2, #1
 8005332:	0018      	movs	r0, r3
 8005334:	f001 fbd9 	bl	8006aea <HAL_GPIO_WritePin>
	   state = CASE_INIT;
 8005338:	4b04      	ldr	r3, [pc, #16]	@ (800534c <Reset_The_Whole_B+0xa4>)
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]
}
 800533e:	46c0      	nop			@ (mov r8, r8)
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	50000400 	.word	0x50000400
 8005348:	50000800 	.word	0x50000800
 800534c:	2000034c 	.word	0x2000034c

08005350 <Set_LS_1>:
/*
 * Set_LS_1() SETS the output for load switch 1 and RESETS all other load switch outputs.
 *
 * NOTE: Does NOT change output to battery load switches.
 */
void Set_LS_1(){
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOB, LS_1_Pin, GPIO_PIN_SET);
 8005354:	2380      	movs	r3, #128	@ 0x80
 8005356:	015b      	lsls	r3, r3, #5
 8005358:	481c      	ldr	r0, [pc, #112]	@ (80053cc <Set_LS_1+0x7c>)
 800535a:	2201      	movs	r2, #1
 800535c:	0019      	movs	r1, r3
 800535e:	f001 fbc4 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_2_Pin, GPIO_PIN_RESET);
 8005362:	2380      	movs	r3, #128	@ 0x80
 8005364:	019b      	lsls	r3, r3, #6
 8005366:	4819      	ldr	r0, [pc, #100]	@ (80053cc <Set_LS_1+0x7c>)
 8005368:	2200      	movs	r2, #0
 800536a:	0019      	movs	r1, r3
 800536c:	f001 fbbd 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_3_Pin, GPIO_PIN_RESET);
 8005370:	2380      	movs	r3, #128	@ 0x80
 8005372:	01db      	lsls	r3, r3, #7
 8005374:	4815      	ldr	r0, [pc, #84]	@ (80053cc <Set_LS_1+0x7c>)
 8005376:	2200      	movs	r2, #0
 8005378:	0019      	movs	r1, r3
 800537a:	f001 fbb6 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_4_Pin, GPIO_PIN_RESET);
 800537e:	2380      	movs	r3, #128	@ 0x80
 8005380:	021b      	lsls	r3, r3, #8
 8005382:	4812      	ldr	r0, [pc, #72]	@ (80053cc <Set_LS_1+0x7c>)
 8005384:	2200      	movs	r2, #0
 8005386:	0019      	movs	r1, r3
 8005388:	f001 fbaf 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_5_Pin, GPIO_PIN_RESET);
 800538c:	4b10      	ldr	r3, [pc, #64]	@ (80053d0 <Set_LS_1+0x80>)
 800538e:	2200      	movs	r2, #0
 8005390:	2180      	movs	r1, #128	@ 0x80
 8005392:	0018      	movs	r0, r3
 8005394:	f001 fba9 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_6_Pin, GPIO_PIN_RESET);
 8005398:	2380      	movs	r3, #128	@ 0x80
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	480c      	ldr	r0, [pc, #48]	@ (80053d0 <Set_LS_1+0x80>)
 800539e:	2200      	movs	r2, #0
 80053a0:	0019      	movs	r1, r3
 80053a2:	f001 fba2 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_7_Pin, GPIO_PIN_RESET);
 80053a6:	2380      	movs	r3, #128	@ 0x80
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4809      	ldr	r0, [pc, #36]	@ (80053d0 <Set_LS_1+0x80>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	0019      	movs	r1, r3
 80053b0:	f001 fb9b 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, LS_8_Pin, GPIO_PIN_RESET);
 80053b4:	2380      	movs	r3, #128	@ 0x80
 80053b6:	0059      	lsls	r1, r3, #1
 80053b8:	23a0      	movs	r3, #160	@ 0xa0
 80053ba:	05db      	lsls	r3, r3, #23
 80053bc:	2200      	movs	r2, #0
 80053be:	0018      	movs	r0, r3
 80053c0:	f001 fb93 	bl	8006aea <HAL_GPIO_WritePin>
}
 80053c4:	46c0      	nop			@ (mov r8, r8)
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	46c0      	nop			@ (mov r8, r8)
 80053cc:	50000400 	.word	0x50000400
 80053d0:	50000800 	.word	0x50000800

080053d4 <Set_LS_2>:
/*
 * Set_LS_2() SETS the output for load switch 2 and RESETS all other load switch outputs.
 *
 * NOTE: Does NOT change output to battery load switches.
 */
void Set_LS_2(){
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOB, LS_1_Pin, GPIO_PIN_RESET);
 80053d8:	2380      	movs	r3, #128	@ 0x80
 80053da:	015b      	lsls	r3, r3, #5
 80053dc:	481c      	ldr	r0, [pc, #112]	@ (8005450 <Set_LS_2+0x7c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	0019      	movs	r1, r3
 80053e2:	f001 fb82 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_2_Pin, GPIO_PIN_SET);
 80053e6:	2380      	movs	r3, #128	@ 0x80
 80053e8:	019b      	lsls	r3, r3, #6
 80053ea:	4819      	ldr	r0, [pc, #100]	@ (8005450 <Set_LS_2+0x7c>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	0019      	movs	r1, r3
 80053f0:	f001 fb7b 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_3_Pin, GPIO_PIN_RESET);
 80053f4:	2380      	movs	r3, #128	@ 0x80
 80053f6:	01db      	lsls	r3, r3, #7
 80053f8:	4815      	ldr	r0, [pc, #84]	@ (8005450 <Set_LS_2+0x7c>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	0019      	movs	r1, r3
 80053fe:	f001 fb74 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_4_Pin, GPIO_PIN_RESET);
 8005402:	2380      	movs	r3, #128	@ 0x80
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	4812      	ldr	r0, [pc, #72]	@ (8005450 <Set_LS_2+0x7c>)
 8005408:	2200      	movs	r2, #0
 800540a:	0019      	movs	r1, r3
 800540c:	f001 fb6d 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_5_Pin, GPIO_PIN_RESET);
 8005410:	4b10      	ldr	r3, [pc, #64]	@ (8005454 <Set_LS_2+0x80>)
 8005412:	2200      	movs	r2, #0
 8005414:	2180      	movs	r1, #128	@ 0x80
 8005416:	0018      	movs	r0, r3
 8005418:	f001 fb67 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_6_Pin, GPIO_PIN_RESET);
 800541c:	2380      	movs	r3, #128	@ 0x80
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	480c      	ldr	r0, [pc, #48]	@ (8005454 <Set_LS_2+0x80>)
 8005422:	2200      	movs	r2, #0
 8005424:	0019      	movs	r1, r3
 8005426:	f001 fb60 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_7_Pin, GPIO_PIN_RESET);
 800542a:	2380      	movs	r3, #128	@ 0x80
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4809      	ldr	r0, [pc, #36]	@ (8005454 <Set_LS_2+0x80>)
 8005430:	2200      	movs	r2, #0
 8005432:	0019      	movs	r1, r3
 8005434:	f001 fb59 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, LS_8_Pin, GPIO_PIN_RESET);
 8005438:	2380      	movs	r3, #128	@ 0x80
 800543a:	0059      	lsls	r1, r3, #1
 800543c:	23a0      	movs	r3, #160	@ 0xa0
 800543e:	05db      	lsls	r3, r3, #23
 8005440:	2200      	movs	r2, #0
 8005442:	0018      	movs	r0, r3
 8005444:	f001 fb51 	bl	8006aea <HAL_GPIO_WritePin>
}
 8005448:	46c0      	nop			@ (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	50000400 	.word	0x50000400
 8005454:	50000800 	.word	0x50000800

08005458 <Set_LS_3>:
/*
 * Set_LS_3() SETS the output for load switch 3 and RESETS all other load switch outputs.
 *
 * NOTE: Does NOT change output to battery load switches.
 */
void Set_LS_3(){
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOB, LS_1_Pin, GPIO_PIN_RESET);
 800545c:	2380      	movs	r3, #128	@ 0x80
 800545e:	015b      	lsls	r3, r3, #5
 8005460:	481c      	ldr	r0, [pc, #112]	@ (80054d4 <Set_LS_3+0x7c>)
 8005462:	2200      	movs	r2, #0
 8005464:	0019      	movs	r1, r3
 8005466:	f001 fb40 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_2_Pin, GPIO_PIN_RESET);
 800546a:	2380      	movs	r3, #128	@ 0x80
 800546c:	019b      	lsls	r3, r3, #6
 800546e:	4819      	ldr	r0, [pc, #100]	@ (80054d4 <Set_LS_3+0x7c>)
 8005470:	2200      	movs	r2, #0
 8005472:	0019      	movs	r1, r3
 8005474:	f001 fb39 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_3_Pin, GPIO_PIN_SET);
 8005478:	2380      	movs	r3, #128	@ 0x80
 800547a:	01db      	lsls	r3, r3, #7
 800547c:	4815      	ldr	r0, [pc, #84]	@ (80054d4 <Set_LS_3+0x7c>)
 800547e:	2201      	movs	r2, #1
 8005480:	0019      	movs	r1, r3
 8005482:	f001 fb32 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_4_Pin, GPIO_PIN_RESET);
 8005486:	2380      	movs	r3, #128	@ 0x80
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	4812      	ldr	r0, [pc, #72]	@ (80054d4 <Set_LS_3+0x7c>)
 800548c:	2200      	movs	r2, #0
 800548e:	0019      	movs	r1, r3
 8005490:	f001 fb2b 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_5_Pin, GPIO_PIN_RESET);
 8005494:	4b10      	ldr	r3, [pc, #64]	@ (80054d8 <Set_LS_3+0x80>)
 8005496:	2200      	movs	r2, #0
 8005498:	2180      	movs	r1, #128	@ 0x80
 800549a:	0018      	movs	r0, r3
 800549c:	f001 fb25 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_6_Pin, GPIO_PIN_RESET);
 80054a0:	2380      	movs	r3, #128	@ 0x80
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	480c      	ldr	r0, [pc, #48]	@ (80054d8 <Set_LS_3+0x80>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	0019      	movs	r1, r3
 80054aa:	f001 fb1e 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_7_Pin, GPIO_PIN_RESET);
 80054ae:	2380      	movs	r3, #128	@ 0x80
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4809      	ldr	r0, [pc, #36]	@ (80054d8 <Set_LS_3+0x80>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	0019      	movs	r1, r3
 80054b8:	f001 fb17 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, LS_8_Pin, GPIO_PIN_RESET);
 80054bc:	2380      	movs	r3, #128	@ 0x80
 80054be:	0059      	lsls	r1, r3, #1
 80054c0:	23a0      	movs	r3, #160	@ 0xa0
 80054c2:	05db      	lsls	r3, r3, #23
 80054c4:	2200      	movs	r2, #0
 80054c6:	0018      	movs	r0, r3
 80054c8:	f001 fb0f 	bl	8006aea <HAL_GPIO_WritePin>
}
 80054cc:	46c0      	nop			@ (mov r8, r8)
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			@ (mov r8, r8)
 80054d4:	50000400 	.word	0x50000400
 80054d8:	50000800 	.word	0x50000800

080054dc <Set_LS_4>:
/*
 * Set_LS_4() SETS the output for load switch 4 and RESETS all other load switch outputs.
 *
 * NOTE: Does NOT change output to battery load switches.
 */
void Set_LS_4(){
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOB, LS_1_Pin, GPIO_PIN_RESET);
 80054e0:	2380      	movs	r3, #128	@ 0x80
 80054e2:	015b      	lsls	r3, r3, #5
 80054e4:	481c      	ldr	r0, [pc, #112]	@ (8005558 <Set_LS_4+0x7c>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	0019      	movs	r1, r3
 80054ea:	f001 fafe 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_2_Pin, GPIO_PIN_RESET);
 80054ee:	2380      	movs	r3, #128	@ 0x80
 80054f0:	019b      	lsls	r3, r3, #6
 80054f2:	4819      	ldr	r0, [pc, #100]	@ (8005558 <Set_LS_4+0x7c>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	0019      	movs	r1, r3
 80054f8:	f001 faf7 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_3_Pin, GPIO_PIN_RESET);
 80054fc:	2380      	movs	r3, #128	@ 0x80
 80054fe:	01db      	lsls	r3, r3, #7
 8005500:	4815      	ldr	r0, [pc, #84]	@ (8005558 <Set_LS_4+0x7c>)
 8005502:	2200      	movs	r2, #0
 8005504:	0019      	movs	r1, r3
 8005506:	f001 faf0 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_4_Pin, GPIO_PIN_SET);
 800550a:	2380      	movs	r3, #128	@ 0x80
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	4812      	ldr	r0, [pc, #72]	@ (8005558 <Set_LS_4+0x7c>)
 8005510:	2201      	movs	r2, #1
 8005512:	0019      	movs	r1, r3
 8005514:	f001 fae9 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_5_Pin, GPIO_PIN_RESET);
 8005518:	4b10      	ldr	r3, [pc, #64]	@ (800555c <Set_LS_4+0x80>)
 800551a:	2200      	movs	r2, #0
 800551c:	2180      	movs	r1, #128	@ 0x80
 800551e:	0018      	movs	r0, r3
 8005520:	f001 fae3 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_6_Pin, GPIO_PIN_RESET);
 8005524:	2380      	movs	r3, #128	@ 0x80
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	480c      	ldr	r0, [pc, #48]	@ (800555c <Set_LS_4+0x80>)
 800552a:	2200      	movs	r2, #0
 800552c:	0019      	movs	r1, r3
 800552e:	f001 fadc 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_7_Pin, GPIO_PIN_RESET);
 8005532:	2380      	movs	r3, #128	@ 0x80
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4809      	ldr	r0, [pc, #36]	@ (800555c <Set_LS_4+0x80>)
 8005538:	2200      	movs	r2, #0
 800553a:	0019      	movs	r1, r3
 800553c:	f001 fad5 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, LS_8_Pin, GPIO_PIN_RESET);
 8005540:	2380      	movs	r3, #128	@ 0x80
 8005542:	0059      	lsls	r1, r3, #1
 8005544:	23a0      	movs	r3, #160	@ 0xa0
 8005546:	05db      	lsls	r3, r3, #23
 8005548:	2200      	movs	r2, #0
 800554a:	0018      	movs	r0, r3
 800554c:	f001 facd 	bl	8006aea <HAL_GPIO_WritePin>
}
 8005550:	46c0      	nop			@ (mov r8, r8)
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	46c0      	nop			@ (mov r8, r8)
 8005558:	50000400 	.word	0x50000400
 800555c:	50000800 	.word	0x50000800

08005560 <Set_LS_5>:
/*
 * Set_LS_5() SETS the output for load switch 5 and RESETS all other load switch outputs.
 *
 * NOTE: Does NOT change output to battery load switches.
 */
void Set_LS_5(){
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOB, LS_1_Pin, GPIO_PIN_RESET);
 8005564:	2380      	movs	r3, #128	@ 0x80
 8005566:	015b      	lsls	r3, r3, #5
 8005568:	481c      	ldr	r0, [pc, #112]	@ (80055dc <Set_LS_5+0x7c>)
 800556a:	2200      	movs	r2, #0
 800556c:	0019      	movs	r1, r3
 800556e:	f001 fabc 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_2_Pin, GPIO_PIN_RESET);
 8005572:	2380      	movs	r3, #128	@ 0x80
 8005574:	019b      	lsls	r3, r3, #6
 8005576:	4819      	ldr	r0, [pc, #100]	@ (80055dc <Set_LS_5+0x7c>)
 8005578:	2200      	movs	r2, #0
 800557a:	0019      	movs	r1, r3
 800557c:	f001 fab5 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_3_Pin, GPIO_PIN_RESET);
 8005580:	2380      	movs	r3, #128	@ 0x80
 8005582:	01db      	lsls	r3, r3, #7
 8005584:	4815      	ldr	r0, [pc, #84]	@ (80055dc <Set_LS_5+0x7c>)
 8005586:	2200      	movs	r2, #0
 8005588:	0019      	movs	r1, r3
 800558a:	f001 faae 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_4_Pin, GPIO_PIN_RESET);
 800558e:	2380      	movs	r3, #128	@ 0x80
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	4812      	ldr	r0, [pc, #72]	@ (80055dc <Set_LS_5+0x7c>)
 8005594:	2200      	movs	r2, #0
 8005596:	0019      	movs	r1, r3
 8005598:	f001 faa7 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_5_Pin, GPIO_PIN_SET);
 800559c:	4b10      	ldr	r3, [pc, #64]	@ (80055e0 <Set_LS_5+0x80>)
 800559e:	2201      	movs	r2, #1
 80055a0:	2180      	movs	r1, #128	@ 0x80
 80055a2:	0018      	movs	r0, r3
 80055a4:	f001 faa1 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_6_Pin, GPIO_PIN_RESET);
 80055a8:	2380      	movs	r3, #128	@ 0x80
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	480c      	ldr	r0, [pc, #48]	@ (80055e0 <Set_LS_5+0x80>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	0019      	movs	r1, r3
 80055b2:	f001 fa9a 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_7_Pin, GPIO_PIN_RESET);
 80055b6:	2380      	movs	r3, #128	@ 0x80
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4809      	ldr	r0, [pc, #36]	@ (80055e0 <Set_LS_5+0x80>)
 80055bc:	2200      	movs	r2, #0
 80055be:	0019      	movs	r1, r3
 80055c0:	f001 fa93 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, LS_8_Pin, GPIO_PIN_RESET);
 80055c4:	2380      	movs	r3, #128	@ 0x80
 80055c6:	0059      	lsls	r1, r3, #1
 80055c8:	23a0      	movs	r3, #160	@ 0xa0
 80055ca:	05db      	lsls	r3, r3, #23
 80055cc:	2200      	movs	r2, #0
 80055ce:	0018      	movs	r0, r3
 80055d0:	f001 fa8b 	bl	8006aea <HAL_GPIO_WritePin>
}
 80055d4:	46c0      	nop			@ (mov r8, r8)
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			@ (mov r8, r8)
 80055dc:	50000400 	.word	0x50000400
 80055e0:	50000800 	.word	0x50000800

080055e4 <Set_LS_6>:
/*
 * Set_LS_6() SETS the output for load switch 6 and RESETS all other load switch outputs.
 *
 * NOTE: Does NOT change output to battery load switches.
 */
void Set_LS_6(){
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOB, LS_1_Pin, GPIO_PIN_RESET);
 80055e8:	2380      	movs	r3, #128	@ 0x80
 80055ea:	015b      	lsls	r3, r3, #5
 80055ec:	481c      	ldr	r0, [pc, #112]	@ (8005660 <Set_LS_6+0x7c>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	0019      	movs	r1, r3
 80055f2:	f001 fa7a 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_2_Pin, GPIO_PIN_RESET);
 80055f6:	2380      	movs	r3, #128	@ 0x80
 80055f8:	019b      	lsls	r3, r3, #6
 80055fa:	4819      	ldr	r0, [pc, #100]	@ (8005660 <Set_LS_6+0x7c>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	0019      	movs	r1, r3
 8005600:	f001 fa73 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_3_Pin, GPIO_PIN_RESET);
 8005604:	2380      	movs	r3, #128	@ 0x80
 8005606:	01db      	lsls	r3, r3, #7
 8005608:	4815      	ldr	r0, [pc, #84]	@ (8005660 <Set_LS_6+0x7c>)
 800560a:	2200      	movs	r2, #0
 800560c:	0019      	movs	r1, r3
 800560e:	f001 fa6c 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_4_Pin, GPIO_PIN_RESET);
 8005612:	2380      	movs	r3, #128	@ 0x80
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	4812      	ldr	r0, [pc, #72]	@ (8005660 <Set_LS_6+0x7c>)
 8005618:	2200      	movs	r2, #0
 800561a:	0019      	movs	r1, r3
 800561c:	f001 fa65 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_5_Pin, GPIO_PIN_RESET);
 8005620:	4b10      	ldr	r3, [pc, #64]	@ (8005664 <Set_LS_6+0x80>)
 8005622:	2200      	movs	r2, #0
 8005624:	2180      	movs	r1, #128	@ 0x80
 8005626:	0018      	movs	r0, r3
 8005628:	f001 fa5f 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_6_Pin, GPIO_PIN_SET);
 800562c:	2380      	movs	r3, #128	@ 0x80
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	480c      	ldr	r0, [pc, #48]	@ (8005664 <Set_LS_6+0x80>)
 8005632:	2201      	movs	r2, #1
 8005634:	0019      	movs	r1, r3
 8005636:	f001 fa58 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_7_Pin, GPIO_PIN_RESET);
 800563a:	2380      	movs	r3, #128	@ 0x80
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4809      	ldr	r0, [pc, #36]	@ (8005664 <Set_LS_6+0x80>)
 8005640:	2200      	movs	r2, #0
 8005642:	0019      	movs	r1, r3
 8005644:	f001 fa51 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, LS_8_Pin, GPIO_PIN_RESET);
 8005648:	2380      	movs	r3, #128	@ 0x80
 800564a:	0059      	lsls	r1, r3, #1
 800564c:	23a0      	movs	r3, #160	@ 0xa0
 800564e:	05db      	lsls	r3, r3, #23
 8005650:	2200      	movs	r2, #0
 8005652:	0018      	movs	r0, r3
 8005654:	f001 fa49 	bl	8006aea <HAL_GPIO_WritePin>
}
 8005658:	46c0      	nop			@ (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	46c0      	nop			@ (mov r8, r8)
 8005660:	50000400 	.word	0x50000400
 8005664:	50000800 	.word	0x50000800

08005668 <Set_LS_7>:
/*
 * Set_LS_7() SETS the output for load switch 7 and RESETS all other load switch outputs.
 *
 * NOTE: Does NOT change output to battery load switches.
 */
void Set_LS_7(){
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOB, LS_1_Pin, GPIO_PIN_RESET);
 800566c:	2380      	movs	r3, #128	@ 0x80
 800566e:	015b      	lsls	r3, r3, #5
 8005670:	481c      	ldr	r0, [pc, #112]	@ (80056e4 <Set_LS_7+0x7c>)
 8005672:	2200      	movs	r2, #0
 8005674:	0019      	movs	r1, r3
 8005676:	f001 fa38 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_2_Pin, GPIO_PIN_RESET);
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	4819      	ldr	r0, [pc, #100]	@ (80056e4 <Set_LS_7+0x7c>)
 8005680:	2200      	movs	r2, #0
 8005682:	0019      	movs	r1, r3
 8005684:	f001 fa31 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_3_Pin, GPIO_PIN_RESET);
 8005688:	2380      	movs	r3, #128	@ 0x80
 800568a:	01db      	lsls	r3, r3, #7
 800568c:	4815      	ldr	r0, [pc, #84]	@ (80056e4 <Set_LS_7+0x7c>)
 800568e:	2200      	movs	r2, #0
 8005690:	0019      	movs	r1, r3
 8005692:	f001 fa2a 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_4_Pin, GPIO_PIN_RESET);
 8005696:	2380      	movs	r3, #128	@ 0x80
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	4812      	ldr	r0, [pc, #72]	@ (80056e4 <Set_LS_7+0x7c>)
 800569c:	2200      	movs	r2, #0
 800569e:	0019      	movs	r1, r3
 80056a0:	f001 fa23 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_5_Pin, GPIO_PIN_RESET);
 80056a4:	4b10      	ldr	r3, [pc, #64]	@ (80056e8 <Set_LS_7+0x80>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	2180      	movs	r1, #128	@ 0x80
 80056aa:	0018      	movs	r0, r3
 80056ac:	f001 fa1d 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_6_Pin, GPIO_PIN_RESET);
 80056b0:	2380      	movs	r3, #128	@ 0x80
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	480c      	ldr	r0, [pc, #48]	@ (80056e8 <Set_LS_7+0x80>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	0019      	movs	r1, r3
 80056ba:	f001 fa16 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_7_Pin, GPIO_PIN_SET);
 80056be:	2380      	movs	r3, #128	@ 0x80
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4809      	ldr	r0, [pc, #36]	@ (80056e8 <Set_LS_7+0x80>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	0019      	movs	r1, r3
 80056c8:	f001 fa0f 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, LS_8_Pin, GPIO_PIN_RESET);
 80056cc:	2380      	movs	r3, #128	@ 0x80
 80056ce:	0059      	lsls	r1, r3, #1
 80056d0:	23a0      	movs	r3, #160	@ 0xa0
 80056d2:	05db      	lsls	r3, r3, #23
 80056d4:	2200      	movs	r2, #0
 80056d6:	0018      	movs	r0, r3
 80056d8:	f001 fa07 	bl	8006aea <HAL_GPIO_WritePin>
}
 80056dc:	46c0      	nop			@ (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	46c0      	nop			@ (mov r8, r8)
 80056e4:	50000400 	.word	0x50000400
 80056e8:	50000800 	.word	0x50000800

080056ec <Set_LS_8>:
/*
 * Set_LS_8() SETS the output for load switch 8 and RESETS all other load switch outputs.
 *
 * NOTE: Does NOT change output to battery load switches.
 */
void Set_LS_8(){
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOB, LS_1_Pin, GPIO_PIN_RESET);
 80056f0:	2380      	movs	r3, #128	@ 0x80
 80056f2:	015b      	lsls	r3, r3, #5
 80056f4:	481c      	ldr	r0, [pc, #112]	@ (8005768 <Set_LS_8+0x7c>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	0019      	movs	r1, r3
 80056fa:	f001 f9f6 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_2_Pin, GPIO_PIN_RESET);
 80056fe:	2380      	movs	r3, #128	@ 0x80
 8005700:	019b      	lsls	r3, r3, #6
 8005702:	4819      	ldr	r0, [pc, #100]	@ (8005768 <Set_LS_8+0x7c>)
 8005704:	2200      	movs	r2, #0
 8005706:	0019      	movs	r1, r3
 8005708:	f001 f9ef 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_3_Pin, GPIO_PIN_RESET);
 800570c:	2380      	movs	r3, #128	@ 0x80
 800570e:	01db      	lsls	r3, r3, #7
 8005710:	4815      	ldr	r0, [pc, #84]	@ (8005768 <Set_LS_8+0x7c>)
 8005712:	2200      	movs	r2, #0
 8005714:	0019      	movs	r1, r3
 8005716:	f001 f9e8 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, LS_4_Pin, GPIO_PIN_RESET);
 800571a:	2380      	movs	r3, #128	@ 0x80
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	4812      	ldr	r0, [pc, #72]	@ (8005768 <Set_LS_8+0x7c>)
 8005720:	2200      	movs	r2, #0
 8005722:	0019      	movs	r1, r3
 8005724:	f001 f9e1 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_5_Pin, GPIO_PIN_RESET);
 8005728:	4b10      	ldr	r3, [pc, #64]	@ (800576c <Set_LS_8+0x80>)
 800572a:	2200      	movs	r2, #0
 800572c:	2180      	movs	r1, #128	@ 0x80
 800572e:	0018      	movs	r0, r3
 8005730:	f001 f9db 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_6_Pin, GPIO_PIN_RESET);
 8005734:	2380      	movs	r3, #128	@ 0x80
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	480c      	ldr	r0, [pc, #48]	@ (800576c <Set_LS_8+0x80>)
 800573a:	2200      	movs	r2, #0
 800573c:	0019      	movs	r1, r3
 800573e:	f001 f9d4 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, LS_7_Pin, GPIO_PIN_RESET);
 8005742:	2380      	movs	r3, #128	@ 0x80
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4809      	ldr	r0, [pc, #36]	@ (800576c <Set_LS_8+0x80>)
 8005748:	2200      	movs	r2, #0
 800574a:	0019      	movs	r1, r3
 800574c:	f001 f9cd 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, LS_8_Pin, GPIO_PIN_SET);
 8005750:	2380      	movs	r3, #128	@ 0x80
 8005752:	0059      	lsls	r1, r3, #1
 8005754:	23a0      	movs	r3, #160	@ 0xa0
 8005756:	05db      	lsls	r3, r3, #23
 8005758:	2201      	movs	r2, #1
 800575a:	0018      	movs	r0, r3
 800575c:	f001 f9c5 	bl	8006aea <HAL_GPIO_WritePin>
}
 8005760:	46c0      	nop			@ (mov r8, r8)
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	50000400 	.word	0x50000400
 800576c:	50000800 	.word	0x50000800

08005770 <Set_Low>:
/*
 * Set_Low() SETS the output for the CMOS battery load switch and RESETS the 18650 load switch output.
 *
 * NOTE: Does NOT change output to other non-battery load switches.
 */
void Set_Low(){
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOC, LS_LOW_Pin, GPIO_PIN_SET);
 8005774:	4b08      	ldr	r3, [pc, #32]	@ (8005798 <Set_Low+0x28>)
 8005776:	2201      	movs	r2, #1
 8005778:	2140      	movs	r1, #64	@ 0x40
 800577a:	0018      	movs	r0, r3
 800577c:	f001 f9b5 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, LS_HIGH_Pin, GPIO_PIN_RESET);
 8005780:	2380      	movs	r3, #128	@ 0x80
 8005782:	0099      	lsls	r1, r3, #2
 8005784:	23a0      	movs	r3, #160	@ 0xa0
 8005786:	05db      	lsls	r3, r3, #23
 8005788:	2200      	movs	r2, #0
 800578a:	0018      	movs	r0, r3
 800578c:	f001 f9ad 	bl	8006aea <HAL_GPIO_WritePin>
}
 8005790:	46c0      	nop			@ (mov r8, r8)
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	50000800 	.word	0x50000800

0800579c <Set_High>:
/*
 * Set_High() SETS the output for the 18650 battery load switch and RESETS the CMOS load switch output.
 *
 * NOTE: Does NOT change output to other non-battery load switches.
 */
void Set_High(){
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOC, LS_LOW_Pin, GPIO_PIN_RESET);
 80057a0:	4b08      	ldr	r3, [pc, #32]	@ (80057c4 <Set_High+0x28>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	2140      	movs	r1, #64	@ 0x40
 80057a6:	0018      	movs	r0, r3
 80057a8:	f001 f99f 	bl	8006aea <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, LS_HIGH_Pin, GPIO_PIN_SET);
 80057ac:	2380      	movs	r3, #128	@ 0x80
 80057ae:	0099      	lsls	r1, r3, #2
 80057b0:	23a0      	movs	r3, #160	@ 0xa0
 80057b2:	05db      	lsls	r3, r3, #23
 80057b4:	2201      	movs	r2, #1
 80057b6:	0018      	movs	r0, r3
 80057b8:	f001 f997 	bl	8006aea <HAL_GPIO_WritePin>
}
 80057bc:	46c0      	nop			@ (mov r8, r8)
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	46c0      	nop			@ (mov r8, r8)
 80057c4:	50000800 	.word	0x50000800

080057c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057cc:	b672      	cpsid	i
}
 80057ce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state
    */
   __disable_irq();
   while (1) {
 80057d0:	46c0      	nop			@ (mov r8, r8)
 80057d2:	e7fd      	b.n	80057d0 <Error_Handler+0x8>

080057d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057d8:	4b07      	ldr	r3, [pc, #28]	@ (80057f8 <HAL_MspInit+0x24>)
 80057da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057dc:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <HAL_MspInit+0x24>)
 80057de:	2101      	movs	r1, #1
 80057e0:	430a      	orrs	r2, r1
 80057e2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80057e4:	4b04      	ldr	r3, [pc, #16]	@ (80057f8 <HAL_MspInit+0x24>)
 80057e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057e8:	4b03      	ldr	r3, [pc, #12]	@ (80057f8 <HAL_MspInit+0x24>)
 80057ea:	2180      	movs	r1, #128	@ 0x80
 80057ec:	0549      	lsls	r1, r1, #21
 80057ee:	430a      	orrs	r2, r1
 80057f0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057f2:	46c0      	nop			@ (mov r8, r8)
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40021000 	.word	0x40021000

080057fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b089      	sub	sp, #36	@ 0x24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005804:	240c      	movs	r4, #12
 8005806:	193b      	adds	r3, r7, r4
 8005808:	0018      	movs	r0, r3
 800580a:	2314      	movs	r3, #20
 800580c:	001a      	movs	r2, r3
 800580e:	2100      	movs	r1, #0
 8005810:	f003 fd5c 	bl	80092cc <memset>
  if(hadc->Instance==ADC1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a14      	ldr	r2, [pc, #80]	@ (800586c <HAL_ADC_MspInit+0x70>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d121      	bne.n	8005862 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800581e:	4b14      	ldr	r3, [pc, #80]	@ (8005870 <HAL_ADC_MspInit+0x74>)
 8005820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005822:	4b13      	ldr	r3, [pc, #76]	@ (8005870 <HAL_ADC_MspInit+0x74>)
 8005824:	2180      	movs	r1, #128	@ 0x80
 8005826:	0089      	lsls	r1, r1, #2
 8005828:	430a      	orrs	r2, r1
 800582a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800582c:	4b10      	ldr	r3, [pc, #64]	@ (8005870 <HAL_ADC_MspInit+0x74>)
 800582e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005830:	4b0f      	ldr	r3, [pc, #60]	@ (8005870 <HAL_ADC_MspInit+0x74>)
 8005832:	2104      	movs	r1, #4
 8005834:	430a      	orrs	r2, r1
 8005836:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005838:	4b0d      	ldr	r3, [pc, #52]	@ (8005870 <HAL_ADC_MspInit+0x74>)
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	2204      	movs	r2, #4
 800583e:	4013      	ands	r3, r2
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = Current_ADC_CMOS_Pin|Voltage_ADC_CMOS_Pin|Current_ADC_18650_Pin|Voltage_ADC_18650_Pin;
 8005844:	193b      	adds	r3, r7, r4
 8005846:	223c      	movs	r2, #60	@ 0x3c
 8005848:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800584a:	193b      	adds	r3, r7, r4
 800584c:	2203      	movs	r2, #3
 800584e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005850:	193b      	adds	r3, r7, r4
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005856:	193b      	adds	r3, r7, r4
 8005858:	4a06      	ldr	r2, [pc, #24]	@ (8005874 <HAL_ADC_MspInit+0x78>)
 800585a:	0019      	movs	r1, r3
 800585c:	0010      	movs	r0, r2
 800585e:	f000 ffa9 	bl	80067b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	46bd      	mov	sp, r7
 8005866:	b009      	add	sp, #36	@ 0x24
 8005868:	bd90      	pop	{r4, r7, pc}
 800586a:	46c0      	nop			@ (mov r8, r8)
 800586c:	40012400 	.word	0x40012400
 8005870:	40021000 	.word	0x40021000
 8005874:	50000800 	.word	0x50000800

08005878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005878:	b590      	push	{r4, r7, lr}
 800587a:	b089      	sub	sp, #36	@ 0x24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005880:	240c      	movs	r4, #12
 8005882:	193b      	adds	r3, r7, r4
 8005884:	0018      	movs	r0, r3
 8005886:	2314      	movs	r3, #20
 8005888:	001a      	movs	r2, r3
 800588a:	2100      	movs	r1, #0
 800588c:	f003 fd1e 	bl	80092cc <memset>
  if(huart->Instance==USART2)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a18      	ldr	r2, [pc, #96]	@ (80058f8 <HAL_UART_MspInit+0x80>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d129      	bne.n	80058ee <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800589a:	4b18      	ldr	r3, [pc, #96]	@ (80058fc <HAL_UART_MspInit+0x84>)
 800589c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800589e:	4b17      	ldr	r3, [pc, #92]	@ (80058fc <HAL_UART_MspInit+0x84>)
 80058a0:	2180      	movs	r1, #128	@ 0x80
 80058a2:	0289      	lsls	r1, r1, #10
 80058a4:	430a      	orrs	r2, r1
 80058a6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058a8:	4b14      	ldr	r3, [pc, #80]	@ (80058fc <HAL_UART_MspInit+0x84>)
 80058aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ac:	4b13      	ldr	r3, [pc, #76]	@ (80058fc <HAL_UART_MspInit+0x84>)
 80058ae:	2101      	movs	r1, #1
 80058b0:	430a      	orrs	r2, r1
 80058b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80058b4:	4b11      	ldr	r3, [pc, #68]	@ (80058fc <HAL_UART_MspInit+0x84>)
 80058b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b8:	2201      	movs	r2, #1
 80058ba:	4013      	ands	r3, r2
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80058c0:	0021      	movs	r1, r4
 80058c2:	187b      	adds	r3, r7, r1
 80058c4:	220c      	movs	r2, #12
 80058c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c8:	187b      	adds	r3, r7, r1
 80058ca:	2202      	movs	r2, #2
 80058cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ce:	187b      	adds	r3, r7, r1
 80058d0:	2200      	movs	r2, #0
 80058d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d4:	187b      	adds	r3, r7, r1
 80058d6:	2203      	movs	r2, #3
 80058d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80058da:	187b      	adds	r3, r7, r1
 80058dc:	2204      	movs	r2, #4
 80058de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058e0:	187a      	adds	r2, r7, r1
 80058e2:	23a0      	movs	r3, #160	@ 0xa0
 80058e4:	05db      	lsls	r3, r3, #23
 80058e6:	0011      	movs	r1, r2
 80058e8:	0018      	movs	r0, r3
 80058ea:	f000 ff63 	bl	80067b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80058ee:	46c0      	nop			@ (mov r8, r8)
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b009      	add	sp, #36	@ 0x24
 80058f4:	bd90      	pop	{r4, r7, pc}
 80058f6:	46c0      	nop			@ (mov r8, r8)
 80058f8:	40004400 	.word	0x40004400
 80058fc:	40021000 	.word	0x40021000

08005900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005904:	46c0      	nop			@ (mov r8, r8)
 8005906:	e7fd      	b.n	8005904 <NMI_Handler+0x4>

08005908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800590c:	46c0      	nop			@ (mov r8, r8)
 800590e:	e7fd      	b.n	800590c <HardFault_Handler+0x4>

08005910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005914:	46c0      	nop			@ (mov r8, r8)
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005928:	f000 f95e 	bl	8005be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800592c:	46c0      	nop			@ (mov r8, r8)
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	af00      	add	r7, sp, #0
  return 1;
 8005936:	2301      	movs	r3, #1
}
 8005938:	0018      	movs	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <_kill>:

int _kill(int pid, int sig)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005948:	f003 fd1a 	bl	8009380 <__errno>
 800594c:	0003      	movs	r3, r0
 800594e:	2216      	movs	r2, #22
 8005950:	601a      	str	r2, [r3, #0]
  return -1;
 8005952:	2301      	movs	r3, #1
 8005954:	425b      	negs	r3, r3
}
 8005956:	0018      	movs	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	b002      	add	sp, #8
 800595c:	bd80      	pop	{r7, pc}

0800595e <_exit>:

void _exit (int status)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005966:	2301      	movs	r3, #1
 8005968:	425a      	negs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	0011      	movs	r1, r2
 800596e:	0018      	movs	r0, r3
 8005970:	f7ff ffe5 	bl	800593e <_kill>
  while (1) {}    /* Make sure we hang here */
 8005974:	46c0      	nop			@ (mov r8, r8)
 8005976:	e7fd      	b.n	8005974 <_exit+0x16>

08005978 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	e00a      	b.n	80059a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800598a:	e000      	b.n	800598e <_read+0x16>
 800598c:	bf00      	nop
 800598e:	0001      	movs	r1, r0
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	60ba      	str	r2, [r7, #8]
 8005996:	b2ca      	uxtb	r2, r1
 8005998:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	3301      	adds	r3, #1
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	dbf0      	blt.n	800598a <_read+0x12>
  }

  return len;
 80059a8:	687b      	ldr	r3, [r7, #4]
}
 80059aa:	0018      	movs	r0, r3
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b006      	add	sp, #24
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b086      	sub	sp, #24
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e009      	b.n	80059d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	60ba      	str	r2, [r7, #8]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	0018      	movs	r0, r3
 80059ce:	f7fe fa7f 	bl	8003ed0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	3301      	adds	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	429a      	cmp	r2, r3
 80059de:	dbf1      	blt.n	80059c4 <_write+0x12>
  }
  return len;
 80059e0:	687b      	ldr	r3, [r7, #4]
}
 80059e2:	0018      	movs	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b006      	add	sp, #24
 80059e8:	bd80      	pop	{r7, pc}

080059ea <_close>:

int _close(int file)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80059f2:	2301      	movs	r3, #1
 80059f4:	425b      	negs	r3, r3
}
 80059f6:	0018      	movs	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b002      	add	sp, #8
 80059fc:	bd80      	pop	{r7, pc}

080059fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2280      	movs	r2, #128	@ 0x80
 8005a0c:	0192      	lsls	r2, r2, #6
 8005a0e:	605a      	str	r2, [r3, #4]
  return 0;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	0018      	movs	r0, r3
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b002      	add	sp, #8
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <_isatty>:

int _isatty(int file)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a22:	2301      	movs	r3, #1
}
 8005a24:	0018      	movs	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b004      	add	sp, #16
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a4c:	4a14      	ldr	r2, [pc, #80]	@ (8005aa0 <_sbrk+0x5c>)
 8005a4e:	4b15      	ldr	r3, [pc, #84]	@ (8005aa4 <_sbrk+0x60>)
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a58:	4b13      	ldr	r3, [pc, #76]	@ (8005aa8 <_sbrk+0x64>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a60:	4b11      	ldr	r3, [pc, #68]	@ (8005aa8 <_sbrk+0x64>)
 8005a62:	4a12      	ldr	r2, [pc, #72]	@ (8005aac <_sbrk+0x68>)
 8005a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a66:	4b10      	ldr	r3, [pc, #64]	@ (8005aa8 <_sbrk+0x64>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	18d3      	adds	r3, r2, r3
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d207      	bcs.n	8005a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a74:	f003 fc84 	bl	8009380 <__errno>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	220c      	movs	r2, #12
 8005a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	425b      	negs	r3, r3
 8005a82:	e009      	b.n	8005a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a84:	4b08      	ldr	r3, [pc, #32]	@ (8005aa8 <_sbrk+0x64>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a8a:	4b07      	ldr	r3, [pc, #28]	@ (8005aa8 <_sbrk+0x64>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	18d2      	adds	r2, r2, r3
 8005a92:	4b05      	ldr	r3, [pc, #20]	@ (8005aa8 <_sbrk+0x64>)
 8005a94:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005a96:	68fb      	ldr	r3, [r7, #12]
}
 8005a98:	0018      	movs	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b006      	add	sp, #24
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20005000 	.word	0x20005000
 8005aa4:	00000400 	.word	0x00000400
 8005aa8:	20000350 	.word	0x20000350
 8005aac:	200004a8 	.word	0x200004a8

08005ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ab4:	46c0      	nop			@ (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005abc:	4813      	ldr	r0, [pc, #76]	@ (8005b0c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005abe:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005ac0:	f7ff fff6 	bl	8005ab0 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8005ac4:	4812      	ldr	r0, [pc, #72]	@ (8005b10 <LoopForever+0x6>)
    LDR R1, [R0]
 8005ac6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8005ac8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8005aca:	4a12      	ldr	r2, [pc, #72]	@ (8005b14 <LoopForever+0xa>)
    CMP R1, R2
 8005acc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8005ace:	d105      	bne.n	8005adc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8005ad0:	4811      	ldr	r0, [pc, #68]	@ (8005b18 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8005ad2:	4912      	ldr	r1, [pc, #72]	@ (8005b1c <LoopForever+0x12>)
    STR R1, [R0]
 8005ad4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8005ad6:	4812      	ldr	r0, [pc, #72]	@ (8005b20 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8005ad8:	4912      	ldr	r1, [pc, #72]	@ (8005b24 <LoopForever+0x1a>)
    STR R1, [R0]
 8005ada:	6001      	str	r1, [r0, #0]

08005adc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005adc:	4812      	ldr	r0, [pc, #72]	@ (8005b28 <LoopForever+0x1e>)
  ldr r1, =_edata
 8005ade:	4913      	ldr	r1, [pc, #76]	@ (8005b2c <LoopForever+0x22>)
  ldr r2, =_sidata
 8005ae0:	4a13      	ldr	r2, [pc, #76]	@ (8005b30 <LoopForever+0x26>)
  movs r3, #0
 8005ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ae4:	e002      	b.n	8005aec <LoopCopyDataInit>

08005ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005aea:	3304      	adds	r3, #4

08005aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005af0:	d3f9      	bcc.n	8005ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005af2:	4a10      	ldr	r2, [pc, #64]	@ (8005b34 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8005af4:	4c10      	ldr	r4, [pc, #64]	@ (8005b38 <LoopForever+0x2e>)
  movs r3, #0
 8005af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005af8:	e001      	b.n	8005afe <LoopFillZerobss>

08005afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005afc:	3204      	adds	r2, #4

08005afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b00:	d3fb      	bcc.n	8005afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005b02:	f003 fc43 	bl	800938c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b06:	f7fd fb7f 	bl	8003208 <main>

08005b0a <LoopForever>:

LoopForever:
    b LoopForever
 8005b0a:	e7fe      	b.n	8005b0a <LoopForever>
   ldr   r0, =_estack
 8005b0c:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8005b10:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8005b14:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8005b18:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8005b1c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8005b20:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8005b24:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8005b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b2c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005b30:	0800e0f8 	.word	0x0800e0f8
  ldr r2, =_sbss
 8005b34:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005b38:	200004a4 	.word	0x200004a4

08005b3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b3c:	e7fe      	b.n	8005b3c <ADC1_IRQHandler>
	...

08005b40 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005b46:	1dfb      	adds	r3, r7, #7
 8005b48:	2200      	movs	r2, #0
 8005b4a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b7c <HAL_Init+0x3c>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <HAL_Init+0x3c>)
 8005b52:	2140      	movs	r1, #64	@ 0x40
 8005b54:	430a      	orrs	r2, r1
 8005b56:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b58:	2003      	movs	r0, #3
 8005b5a:	f000 f811 	bl	8005b80 <HAL_InitTick>
 8005b5e:	1e03      	subs	r3, r0, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005b62:	1dfb      	adds	r3, r7, #7
 8005b64:	2201      	movs	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	e001      	b.n	8005b6e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005b6a:	f7ff fe33 	bl	80057d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005b6e:	1dfb      	adds	r3, r7, #7
 8005b70:	781b      	ldrb	r3, [r3, #0]
}
 8005b72:	0018      	movs	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	b002      	add	sp, #8
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	46c0      	nop			@ (mov r8, r8)
 8005b7c:	40022000 	.word	0x40022000

08005b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b80:	b590      	push	{r4, r7, lr}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b88:	4b14      	ldr	r3, [pc, #80]	@ (8005bdc <HAL_InitTick+0x5c>)
 8005b8a:	681c      	ldr	r4, [r3, #0]
 8005b8c:	4b14      	ldr	r3, [pc, #80]	@ (8005be0 <HAL_InitTick+0x60>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	0019      	movs	r1, r3
 8005b92:	23fa      	movs	r3, #250	@ 0xfa
 8005b94:	0098      	lsls	r0, r3, #2
 8005b96:	f7fa fad3 	bl	8000140 <__udivsi3>
 8005b9a:	0003      	movs	r3, r0
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	0020      	movs	r0, r4
 8005ba0:	f7fa face 	bl	8000140 <__udivsi3>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	f000 fdf7 	bl	800679a <HAL_SYSTICK_Config>
 8005bac:	1e03      	subs	r3, r0, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e00f      	b.n	8005bd4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d80b      	bhi.n	8005bd2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	425b      	negs	r3, r3
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f000 fdd4 	bl	8006770 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bc8:	4b06      	ldr	r3, [pc, #24]	@ (8005be4 <HAL_InitTick+0x64>)
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e000      	b.n	8005bd4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
}
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b003      	add	sp, #12
 8005bda:	bd90      	pop	{r4, r7, pc}
 8005bdc:	20000018 	.word	0x20000018
 8005be0:	20000020 	.word	0x20000020
 8005be4:	2000001c 	.word	0x2000001c

08005be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bec:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <HAL_IncTick+0x1c>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	001a      	movs	r2, r3
 8005bf2:	4b05      	ldr	r3, [pc, #20]	@ (8005c08 <HAL_IncTick+0x20>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	18d2      	adds	r2, r2, r3
 8005bf8:	4b03      	ldr	r3, [pc, #12]	@ (8005c08 <HAL_IncTick+0x20>)
 8005bfa:	601a      	str	r2, [r3, #0]
}
 8005bfc:	46c0      	nop			@ (mov r8, r8)
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	20000020 	.word	0x20000020
 8005c08:	20000354 	.word	0x20000354

08005c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8005c10:	4b02      	ldr	r3, [pc, #8]	@ (8005c1c <HAL_GetTick+0x10>)
 8005c12:	681b      	ldr	r3, [r3, #0]
}
 8005c14:	0018      	movs	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			@ (mov r8, r8)
 8005c1c:	20000354 	.word	0x20000354

08005c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c28:	f7ff fff0 	bl	8005c0c <HAL_GetTick>
 8005c2c:	0003      	movs	r3, r0
 8005c2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3301      	adds	r3, #1
 8005c38:	d005      	beq.n	8005c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c64 <HAL_Delay+0x44>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	001a      	movs	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	189b      	adds	r3, r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005c46:	46c0      	nop			@ (mov r8, r8)
 8005c48:	f7ff ffe0 	bl	8005c0c <HAL_GetTick>
 8005c4c:	0002      	movs	r2, r0
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d8f7      	bhi.n	8005c48 <HAL_Delay+0x28>
  {
  }
}
 8005c58:	46c0      	nop			@ (mov r8, r8)
 8005c5a:	46c0      	nop			@ (mov r8, r8)
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	b004      	add	sp, #16
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	46c0      	nop			@ (mov r8, r8)
 8005c64:	20000020 	.word	0x20000020

08005c68 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e159      	b.n	8005f2e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2250      	movs	r2, #80	@ 0x50
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7ff fdb2 	bl	80057fc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9c:	2210      	movs	r2, #16
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d005      	beq.n	8005cb0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	2204      	movs	r2, #4
 8005cac:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005cae:	d00b      	beq.n	8005cc8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb4:	2210      	movs	r2, #16
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2250      	movs	r2, #80	@ 0x50
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e132      	b.n	8005f2e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ccc:	4a9a      	ldr	r2, [pc, #616]	@ (8005f38 <HAL_ADC_Init+0x2d0>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	2203      	movs	r2, #3
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d108      	bne.n	8005cf8 <HAL_ADC_Init+0x90>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2201      	movs	r2, #1
 8005cee:	4013      	ands	r3, r2
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_ADC_Init+0x90>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <HAL_ADC_Init+0x92>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d149      	bne.n	8005d92 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	23c0      	movs	r3, #192	@ 0xc0
 8005d04:	061b      	lsls	r3, r3, #24
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d00b      	beq.n	8005d22 <HAL_ADC_Init+0xba>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	2380      	movs	r3, #128	@ 0x80
 8005d10:	05db      	lsls	r3, r3, #23
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d005      	beq.n	8005d22 <HAL_ADC_Init+0xba>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	2380      	movs	r3, #128	@ 0x80
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d111      	bne.n	8005d46 <HAL_ADC_Init+0xde>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	0092      	lsls	r2, r2, #2
 8005d2e:	0892      	lsrs	r2, r2, #2
 8005d30:	611a      	str	r2, [r3, #16]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6919      	ldr	r1, [r3, #16]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	611a      	str	r2, [r3, #16]
 8005d44:	e014      	b.n	8005d70 <HAL_ADC_Init+0x108>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	0092      	lsls	r2, r2, #2
 8005d52:	0892      	lsrs	r2, r2, #2
 8005d54:	611a      	str	r2, [r3, #16]
 8005d56:	4b79      	ldr	r3, [pc, #484]	@ (8005f3c <HAL_ADC_Init+0x2d4>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b78      	ldr	r3, [pc, #480]	@ (8005f3c <HAL_ADC_Init+0x2d4>)
 8005d5c:	4978      	ldr	r1, [pc, #480]	@ (8005f40 <HAL_ADC_Init+0x2d8>)
 8005d5e:	400a      	ands	r2, r1
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	4b76      	ldr	r3, [pc, #472]	@ (8005f3c <HAL_ADC_Init+0x2d4>)
 8005d64:	6819      	ldr	r1, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	4b74      	ldr	r3, [pc, #464]	@ (8005f3c <HAL_ADC_Init+0x2d4>)
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2118      	movs	r1, #24
 8005d7c:	438a      	bics	r2, r1
 8005d7e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68d9      	ldr	r1, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005d92:	4b6a      	ldr	r3, [pc, #424]	@ (8005f3c <HAL_ADC_Init+0x2d4>)
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b69      	ldr	r3, [pc, #420]	@ (8005f3c <HAL_ADC_Init+0x2d4>)
 8005d98:	496a      	ldr	r1, [pc, #424]	@ (8005f44 <HAL_ADC_Init+0x2dc>)
 8005d9a:	400a      	ands	r2, r1
 8005d9c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8005d9e:	4b67      	ldr	r3, [pc, #412]	@ (8005f3c <HAL_ADC_Init+0x2d4>)
 8005da0:	6819      	ldr	r1, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da6:	065a      	lsls	r2, r3, #25
 8005da8:	4b64      	ldr	r3, [pc, #400]	@ (8005f3c <HAL_ADC_Init+0x2d4>)
 8005daa:	430a      	orrs	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	2380      	movs	r3, #128	@ 0x80
 8005db6:	055b      	lsls	r3, r3, #21
 8005db8:	4013      	ands	r3, r2
 8005dba:	d108      	bne.n	8005dce <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2180      	movs	r1, #128	@ 0x80
 8005dc8:	0549      	lsls	r1, r1, #21
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	495b      	ldr	r1, [pc, #364]	@ (8005f48 <HAL_ADC_Init+0x2e0>)
 8005dda:	400a      	ands	r2, r1
 8005ddc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68d9      	ldr	r1, [r3, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d101      	bne.n	8005df4 <HAL_ADC_Init+0x18c>
 8005df0:	2304      	movs	r3, #4
 8005df2:	e000      	b.n	8005df6 <HAL_ADC_Init+0x18e>
 8005df4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005df6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2020      	movs	r0, #32
 8005dfc:	5c1b      	ldrb	r3, [r3, r0]
 8005dfe:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005e00:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	202c      	movs	r0, #44	@ 0x2c
 8005e06:	5c1b      	ldrb	r3, [r3, r0]
 8005e08:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005e0a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005e10:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005e18:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005e20:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e2e:	23c2      	movs	r3, #194	@ 0xc2
 8005e30:	33ff      	adds	r3, #255	@ 0xff
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d00b      	beq.n	8005e4e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68d9      	ldr	r1, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2221      	movs	r2, #33	@ 0x21
 8005e52:	5c9b      	ldrb	r3, [r3, r2]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d11a      	bne.n	8005e8e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	5c9b      	ldrb	r3, [r3, r2]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d109      	bne.n	8005e76 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2180      	movs	r1, #128	@ 0x80
 8005e6e:	0249      	lsls	r1, r1, #9
 8005e70:	430a      	orrs	r2, r1
 8005e72:	60da      	str	r2, [r3, #12]
 8005e74:	e00b      	b.n	8005e8e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e86:	2201      	movs	r2, #1
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d11f      	bne.n	8005ed6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	492a      	ldr	r1, [pc, #168]	@ (8005f4c <HAL_ADC_Init+0x2e4>)
 8005ea2:	400a      	ands	r2, r1
 8005ea4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6919      	ldr	r1, [r3, #16]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8005eb4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8005eba:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691a      	ldr	r2, [r3, #16]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2101      	movs	r1, #1
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	611a      	str	r2, [r3, #16]
 8005ed4:	e00e      	b.n	8005ef4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2201      	movs	r2, #1
 8005ede:	4013      	ands	r3, r2
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d107      	bne.n	8005ef4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2101      	movs	r1, #1
 8005ef0:	438a      	bics	r2, r1
 8005ef2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695a      	ldr	r2, [r3, #20]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2107      	movs	r1, #7
 8005f00:	438a      	bics	r2, r1
 8005f02:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6959      	ldr	r1, [r3, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f20:	2203      	movs	r2, #3
 8005f22:	4393      	bics	r3, r2
 8005f24:	2201      	movs	r2, #1
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	0018      	movs	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b002      	add	sp, #8
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	46c0      	nop			@ (mov r8, r8)
 8005f38:	fffffefd 	.word	0xfffffefd
 8005f3c:	40012708 	.word	0x40012708
 8005f40:	ffc3ffff 	.word	0xffc3ffff
 8005f44:	fdffffff 	.word	0xfdffffff
 8005f48:	fffe0219 	.word	0xfffe0219
 8005f4c:	fffffc03 	.word	0xfffffc03

08005f50 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005f50:	b590      	push	{r4, r7, lr}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f58:	230f      	movs	r3, #15
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2204      	movs	r2, #4
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d138      	bne.n	8005fde <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2250      	movs	r2, #80	@ 0x50
 8005f70:	5c9b      	ldrb	r3, [r3, r2]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <HAL_ADC_Start+0x2a>
 8005f76:	2302      	movs	r3, #2
 8005f78:	e038      	b.n	8005fec <HAL_ADC_Start+0x9c>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2250      	movs	r2, #80	@ 0x50
 8005f7e:	2101      	movs	r1, #1
 8005f80:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d007      	beq.n	8005f9a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005f8a:	230f      	movs	r3, #15
 8005f8c:	18fc      	adds	r4, r7, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	0018      	movs	r0, r3
 8005f92:	f000 f981 	bl	8006298 <ADC_Enable>
 8005f96:	0003      	movs	r3, r0
 8005f98:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005f9a:	230f      	movs	r3, #15
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d120      	bne.n	8005fe6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa8:	4a12      	ldr	r2, [pc, #72]	@ (8005ff4 <HAL_ADC_Start+0xa4>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	2280      	movs	r2, #128	@ 0x80
 8005fae:	0052      	lsls	r2, r2, #1
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2250      	movs	r2, #80	@ 0x50
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	221c      	movs	r2, #28
 8005fca:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2104      	movs	r1, #4
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	609a      	str	r2, [r3, #8]
 8005fdc:	e003      	b.n	8005fe6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005fde:	230f      	movs	r3, #15
 8005fe0:	18fb      	adds	r3, r7, r3
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8005fe6:	230f      	movs	r3, #15
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	781b      	ldrb	r3, [r3, #0]
}
 8005fec:	0018      	movs	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b005      	add	sp, #20
 8005ff2:	bd90      	pop	{r4, r7, pc}
 8005ff4:	fffff0fe 	.word	0xfffff0fe

08005ff8 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005ff8:	b5b0      	push	{r4, r5, r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006000:	230f      	movs	r3, #15
 8006002:	18fb      	adds	r3, r7, r3
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2250      	movs	r2, #80	@ 0x50
 800600c:	5c9b      	ldrb	r3, [r3, r2]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_ADC_Stop+0x1e>
 8006012:	2302      	movs	r3, #2
 8006014:	e029      	b.n	800606a <HAL_ADC_Stop+0x72>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2250      	movs	r2, #80	@ 0x50
 800601a:	2101      	movs	r1, #1
 800601c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800601e:	250f      	movs	r5, #15
 8006020:	197c      	adds	r4, r7, r5
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	0018      	movs	r0, r3
 8006026:	f000 fa06 	bl	8006436 <ADC_ConversionStop>
 800602a:	0003      	movs	r3, r0
 800602c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800602e:	197b      	adds	r3, r7, r5
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d112      	bne.n	800605c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006036:	197c      	adds	r4, r7, r5
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	0018      	movs	r0, r3
 800603c:	f000 f994 	bl	8006368 <ADC_Disable>
 8006040:	0003      	movs	r3, r0
 8006042:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006044:	197b      	adds	r3, r7, r5
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d107      	bne.n	800605c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006050:	4a08      	ldr	r2, [pc, #32]	@ (8006074 <HAL_ADC_Stop+0x7c>)
 8006052:	4013      	ands	r3, r2
 8006054:	2201      	movs	r2, #1
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2250      	movs	r2, #80	@ 0x50
 8006060:	2100      	movs	r1, #0
 8006062:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8006064:	230f      	movs	r3, #15
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	781b      	ldrb	r3, [r3, #0]
}
 800606a:	0018      	movs	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	b004      	add	sp, #16
 8006070:	bdb0      	pop	{r4, r5, r7, pc}
 8006072:	46c0      	nop			@ (mov r8, r8)
 8006074:	fffffefe 	.word	0xfffffefe

08006078 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	2b08      	cmp	r3, #8
 8006090:	d102      	bne.n	8006098 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006092:	2308      	movs	r3, #8
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	e014      	b.n	80060c2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10b      	bne.n	80060be <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060aa:	2220      	movs	r2, #32
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2250      	movs	r2, #80	@ 0x50
 80060b6:	2100      	movs	r1, #0
 80060b8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e072      	b.n	80061a4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80060be:	230c      	movs	r3, #12
 80060c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80060c2:	f7ff fda3 	bl	8005c0c <HAL_GetTick>
 80060c6:	0003      	movs	r3, r0
 80060c8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80060ca:	e01f      	b.n	800610c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	3301      	adds	r3, #1
 80060d0:	d01c      	beq.n	800610c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <HAL_ADC_PollForConversion+0x70>
 80060d8:	f7ff fd98 	bl	8005c0c <HAL_GetTick>
 80060dc:	0002      	movs	r2, r0
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d211      	bcs.n	800610c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4013      	ands	r3, r2
 80060f2:	d10b      	bne.n	800610c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f8:	2204      	movs	r2, #4
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2250      	movs	r2, #80	@ 0x50
 8006104:	2100      	movs	r1, #0
 8006106:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e04b      	b.n	80061a4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4013      	ands	r3, r2
 8006116:	d0d9      	beq.n	80060cc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611c:	2280      	movs	r2, #128	@ 0x80
 800611e:	0092      	lsls	r2, r2, #2
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	23c0      	movs	r3, #192	@ 0xc0
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	4013      	ands	r3, r2
 8006132:	d12e      	bne.n	8006192 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800613a:	2b00      	cmp	r3, #0
 800613c:	d129      	bne.n	8006192 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2208      	movs	r2, #8
 8006146:	4013      	ands	r3, r2
 8006148:	2b08      	cmp	r3, #8
 800614a:	d122      	bne.n	8006192 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2204      	movs	r2, #4
 8006154:	4013      	ands	r3, r2
 8006156:	d110      	bne.n	800617a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	210c      	movs	r1, #12
 8006164:	438a      	bics	r2, r1
 8006166:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800616c:	4a0f      	ldr	r2, [pc, #60]	@ (80061ac <HAL_ADC_PollForConversion+0x134>)
 800616e:	4013      	ands	r3, r2
 8006170:	2201      	movs	r2, #1
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	655a      	str	r2, [r3, #84]	@ 0x54
 8006178:	e00b      	b.n	8006192 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617e:	2220      	movs	r2, #32
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618a:	2201      	movs	r2, #1
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d103      	bne.n	80061a2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	220c      	movs	r2, #12
 80061a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	0018      	movs	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b004      	add	sp, #16
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	fffffefe 	.word	0xfffffefe

080061b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80061be:	0018      	movs	r0, r3
 80061c0:	46bd      	mov	sp, r7
 80061c2:	b002      	add	sp, #8
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2250      	movs	r2, #80	@ 0x50
 80061d6:	5c9b      	ldrb	r3, [r3, r2]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_ADC_ConfigChannel+0x18>
 80061dc:	2302      	movs	r3, #2
 80061de:	e050      	b.n	8006282 <HAL_ADC_ConfigChannel+0xba>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2250      	movs	r2, #80	@ 0x50
 80061e4:	2101      	movs	r1, #1
 80061e6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2204      	movs	r2, #4
 80061f0:	4013      	ands	r3, r2
 80061f2:	d00b      	beq.n	800620c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f8:	2220      	movs	r2, #32
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2250      	movs	r2, #80	@ 0x50
 8006204:	2100      	movs	r1, #0
 8006206:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e03a      	b.n	8006282 <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	4a1e      	ldr	r2, [pc, #120]	@ (800628c <HAL_ADC_ConfigChannel+0xc4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d018      	beq.n	8006248 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	035b      	lsls	r3, r3, #13
 8006222:	0b5a      	lsrs	r2, r3, #13
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	2380      	movs	r3, #128	@ 0x80
 8006232:	029b      	lsls	r3, r3, #10
 8006234:	4013      	ands	r3, r2
 8006236:	d01f      	beq.n	8006278 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8006238:	4b15      	ldr	r3, [pc, #84]	@ (8006290 <HAL_ADC_ConfigChannel+0xc8>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b14      	ldr	r3, [pc, #80]	@ (8006290 <HAL_ADC_ConfigChannel+0xc8>)
 800623e:	2180      	movs	r1, #128	@ 0x80
 8006240:	03c9      	lsls	r1, r1, #15
 8006242:	430a      	orrs	r2, r1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e017      	b.n	8006278 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	035b      	lsls	r3, r3, #13
 8006254:	0b5b      	lsrs	r3, r3, #13
 8006256:	43d9      	mvns	r1, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	400a      	ands	r2, r1
 800625e:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	2380      	movs	r3, #128	@ 0x80
 8006266:	029b      	lsls	r3, r3, #10
 8006268:	4013      	ands	r3, r2
 800626a:	d005      	beq.n	8006278 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800626c:	4b08      	ldr	r3, [pc, #32]	@ (8006290 <HAL_ADC_ConfigChannel+0xc8>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	4b07      	ldr	r3, [pc, #28]	@ (8006290 <HAL_ADC_ConfigChannel+0xc8>)
 8006272:	4908      	ldr	r1, [pc, #32]	@ (8006294 <HAL_ADC_ConfigChannel+0xcc>)
 8006274:	400a      	ands	r2, r1
 8006276:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2250      	movs	r2, #80	@ 0x50
 800627c:	2100      	movs	r1, #0
 800627e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	0018      	movs	r0, r3
 8006284:	46bd      	mov	sp, r7
 8006286:	b002      	add	sp, #8
 8006288:	bd80      	pop	{r7, pc}
 800628a:	46c0      	nop			@ (mov r8, r8)
 800628c:	00001001 	.word	0x00001001
 8006290:	40012708 	.word	0x40012708
 8006294:	ffbfffff 	.word	0xffbfffff

08006298 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2203      	movs	r2, #3
 80062ac:	4013      	ands	r3, r2
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d108      	bne.n	80062c4 <ADC_Enable+0x2c>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2201      	movs	r2, #1
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <ADC_Enable+0x2c>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e000      	b.n	80062c6 <ADC_Enable+0x2e>
 80062c4:	2300      	movs	r3, #0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d146      	bne.n	8006358 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	4a24      	ldr	r2, [pc, #144]	@ (8006364 <ADC_Enable+0xcc>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	d00d      	beq.n	80062f2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062da:	2210      	movs	r2, #16
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e6:	2201      	movs	r2, #1
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e033      	b.n	800635a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2101      	movs	r1, #1
 80062fe:	430a      	orrs	r2, r1
 8006300:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006302:	2001      	movs	r0, #1
 8006304:	f000 f8e4 	bl	80064d0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006308:	f7ff fc80 	bl	8005c0c <HAL_GetTick>
 800630c:	0003      	movs	r3, r0
 800630e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006310:	e01b      	b.n	800634a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006312:	f7ff fc7b 	bl	8005c0c <HAL_GetTick>
 8006316:	0002      	movs	r2, r0
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b0a      	cmp	r3, #10
 800631e:	d914      	bls.n	800634a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2201      	movs	r2, #1
 8006328:	4013      	ands	r3, r2
 800632a:	2b01      	cmp	r3, #1
 800632c:	d00d      	beq.n	800634a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006332:	2210      	movs	r2, #16
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800633e:	2201      	movs	r2, #1
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e007      	b.n	800635a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2201      	movs	r2, #1
 8006352:	4013      	ands	r3, r2
 8006354:	2b01      	cmp	r3, #1
 8006356:	d1dc      	bne.n	8006312 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	0018      	movs	r0, r3
 800635c:	46bd      	mov	sp, r7
 800635e:	b004      	add	sp, #16
 8006360:	bd80      	pop	{r7, pc}
 8006362:	46c0      	nop			@ (mov r8, r8)
 8006364:	80000017 	.word	0x80000017

08006368 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2203      	movs	r2, #3
 800637c:	4013      	ands	r3, r2
 800637e:	2b01      	cmp	r3, #1
 8006380:	d108      	bne.n	8006394 <ADC_Disable+0x2c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2201      	movs	r2, #1
 800638a:	4013      	ands	r3, r2
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <ADC_Disable+0x2c>
 8006390:	2301      	movs	r3, #1
 8006392:	e000      	b.n	8006396 <ADC_Disable+0x2e>
 8006394:	2300      	movs	r3, #0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d048      	beq.n	800642c <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2205      	movs	r2, #5
 80063a2:	4013      	ands	r3, r2
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d110      	bne.n	80063ca <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2102      	movs	r1, #2
 80063b4:	430a      	orrs	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2203      	movs	r2, #3
 80063be:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80063c0:	f7ff fc24 	bl	8005c0c <HAL_GetTick>
 80063c4:	0003      	movs	r3, r0
 80063c6:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80063c8:	e029      	b.n	800641e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ce:	2210      	movs	r2, #16
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063da:	2201      	movs	r2, #1
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e023      	b.n	800642e <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80063e6:	f7ff fc11 	bl	8005c0c <HAL_GetTick>
 80063ea:	0002      	movs	r2, r0
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b0a      	cmp	r3, #10
 80063f2:	d914      	bls.n	800641e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2201      	movs	r2, #1
 80063fc:	4013      	ands	r3, r2
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d10d      	bne.n	800641e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006406:	2210      	movs	r2, #16
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006412:	2201      	movs	r2, #1
 8006414:	431a      	orrs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e007      	b.n	800642e <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	2201      	movs	r2, #1
 8006426:	4013      	ands	r3, r2
 8006428:	2b01      	cmp	r3, #1
 800642a:	d0dc      	beq.n	80063e6 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	0018      	movs	r0, r3
 8006430:	46bd      	mov	sp, r7
 8006432:	b004      	add	sp, #16
 8006434:	bd80      	pop	{r7, pc}

08006436 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	2204      	movs	r2, #4
 800644a:	4013      	ands	r3, r2
 800644c:	d03a      	beq.n	80064c4 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2204      	movs	r2, #4
 8006456:	4013      	ands	r3, r2
 8006458:	2b04      	cmp	r3, #4
 800645a:	d10d      	bne.n	8006478 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2202      	movs	r2, #2
 8006464:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8006466:	d107      	bne.n	8006478 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2110      	movs	r1, #16
 8006474:	430a      	orrs	r2, r1
 8006476:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006478:	f7ff fbc8 	bl	8005c0c <HAL_GetTick>
 800647c:	0003      	movs	r3, r0
 800647e:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006480:	e01a      	b.n	80064b8 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006482:	f7ff fbc3 	bl	8005c0c <HAL_GetTick>
 8006486:	0002      	movs	r2, r0
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b0a      	cmp	r3, #10
 800648e:	d913      	bls.n	80064b8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	2204      	movs	r2, #4
 8006498:	4013      	ands	r3, r2
 800649a:	d00d      	beq.n	80064b8 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a0:	2210      	movs	r2, #16
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ac:	2201      	movs	r2, #1
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e006      	b.n	80064c6 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2204      	movs	r2, #4
 80064c0:	4013      	ands	r3, r2
 80064c2:	d1de      	bne.n	8006482 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	0018      	movs	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b004      	add	sp, #16
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80064d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006508 <ADC_DelayMicroSecond+0x38>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	490b      	ldr	r1, [pc, #44]	@ (800650c <ADC_DelayMicroSecond+0x3c>)
 80064de:	0018      	movs	r0, r3
 80064e0:	f7f9 fe2e 	bl	8000140 <__udivsi3>
 80064e4:	0003      	movs	r3, r0
 80064e6:	001a      	movs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4353      	muls	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80064ee:	e002      	b.n	80064f6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1f9      	bne.n	80064f0 <ADC_DelayMicroSecond+0x20>
  }
}
 80064fc:	46c0      	nop			@ (mov r8, r8)
 80064fe:	46c0      	nop			@ (mov r8, r8)
 8006500:	46bd      	mov	sp, r7
 8006502:	b004      	add	sp, #16
 8006504:	bd80      	pop	{r7, pc}
 8006506:	46c0      	nop			@ (mov r8, r8)
 8006508:	20000018 	.word	0x20000018
 800650c:	000f4240 	.word	0x000f4240

08006510 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800651a:	2317      	movs	r3, #23
 800651c:	18fb      	adds	r3, r7, r3
 800651e:	2200      	movs	r2, #0
 8006520:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2250      	movs	r2, #80	@ 0x50
 800652e:	5c9b      	ldrb	r3, [r3, r2]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_ADCEx_Calibration_Start+0x28>
 8006534:	2302      	movs	r3, #2
 8006536:	e083      	b.n	8006640 <HAL_ADCEx_Calibration_Start+0x130>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2250      	movs	r2, #80	@ 0x50
 800653c:	2101      	movs	r1, #1
 800653e:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2203      	movs	r2, #3
 8006548:	4013      	ands	r3, r2
 800654a:	2b01      	cmp	r3, #1
 800654c:	d108      	bne.n	8006560 <HAL_ADCEx_Calibration_Start+0x50>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2201      	movs	r2, #1
 8006556:	4013      	ands	r3, r2
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_ADCEx_Calibration_Start+0x50>
 800655c:	2301      	movs	r3, #1
 800655e:	e000      	b.n	8006562 <HAL_ADCEx_Calibration_Start+0x52>
 8006560:	2300      	movs	r3, #0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d15b      	bne.n	800661e <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656a:	4a37      	ldr	r2, [pc, #220]	@ (8006648 <HAL_ADCEx_Calibration_Start+0x138>)
 800656c:	4013      	ands	r3, r2
 800656e:	2202      	movs	r2, #2
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2203      	movs	r2, #3
 800657e:	4013      	ands	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2103      	movs	r1, #3
 800658e:	438a      	bics	r2, r1
 8006590:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2180      	movs	r1, #128	@ 0x80
 800659e:	0609      	lsls	r1, r1, #24
 80065a0:	430a      	orrs	r2, r1
 80065a2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80065a4:	f7ff fb32 	bl	8005c0c <HAL_GetTick>
 80065a8:	0003      	movs	r3, r0
 80065aa:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80065ac:	e01d      	b.n	80065ea <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80065ae:	f7ff fb2d 	bl	8005c0c <HAL_GetTick>
 80065b2:	0002      	movs	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b0a      	cmp	r3, #10
 80065ba:	d916      	bls.n	80065ea <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	0fdb      	lsrs	r3, r3, #31
 80065c4:	07da      	lsls	r2, r3, #31
 80065c6:	2380      	movs	r3, #128	@ 0x80
 80065c8:	061b      	lsls	r3, r3, #24
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d10d      	bne.n	80065ea <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d2:	2212      	movs	r2, #18
 80065d4:	4393      	bics	r3, r2
 80065d6:	2210      	movs	r2, #16
 80065d8:	431a      	orrs	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2250      	movs	r2, #80	@ 0x50
 80065e2:	2100      	movs	r1, #0
 80065e4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e02a      	b.n	8006640 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	0fdb      	lsrs	r3, r3, #31
 80065f2:	07da      	lsls	r2, r3, #31
 80065f4:	2380      	movs	r3, #128	@ 0x80
 80065f6:	061b      	lsls	r3, r3, #24
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d0d8      	beq.n	80065ae <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68d9      	ldr	r1, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	430a      	orrs	r2, r1
 800660a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006610:	2203      	movs	r2, #3
 8006612:	4393      	bics	r3, r2
 8006614:	2201      	movs	r2, #1
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	655a      	str	r2, [r3, #84]	@ 0x54
 800661c:	e009      	b.n	8006632 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006622:	2220      	movs	r2, #32
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800662a:	2317      	movs	r3, #23
 800662c:	18fb      	adds	r3, r7, r3
 800662e:	2201      	movs	r2, #1
 8006630:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2250      	movs	r2, #80	@ 0x50
 8006636:	2100      	movs	r1, #0
 8006638:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800663a:	2317      	movs	r3, #23
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	781b      	ldrb	r3, [r3, #0]
}
 8006640:	0018      	movs	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	b006      	add	sp, #24
 8006646:	bd80      	pop	{r7, pc}
 8006648:	fffffefd 	.word	0xfffffefd

0800664c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800664c:	b590      	push	{r4, r7, lr}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	0002      	movs	r2, r0
 8006654:	6039      	str	r1, [r7, #0]
 8006656:	1dfb      	adds	r3, r7, #7
 8006658:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800665a:	1dfb      	adds	r3, r7, #7
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006660:	d828      	bhi.n	80066b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006662:	4a2f      	ldr	r2, [pc, #188]	@ (8006720 <__NVIC_SetPriority+0xd4>)
 8006664:	1dfb      	adds	r3, r7, #7
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	b25b      	sxtb	r3, r3
 800666a:	089b      	lsrs	r3, r3, #2
 800666c:	33c0      	adds	r3, #192	@ 0xc0
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	589b      	ldr	r3, [r3, r2]
 8006672:	1dfa      	adds	r2, r7, #7
 8006674:	7812      	ldrb	r2, [r2, #0]
 8006676:	0011      	movs	r1, r2
 8006678:	2203      	movs	r2, #3
 800667a:	400a      	ands	r2, r1
 800667c:	00d2      	lsls	r2, r2, #3
 800667e:	21ff      	movs	r1, #255	@ 0xff
 8006680:	4091      	lsls	r1, r2
 8006682:	000a      	movs	r2, r1
 8006684:	43d2      	mvns	r2, r2
 8006686:	401a      	ands	r2, r3
 8006688:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	019b      	lsls	r3, r3, #6
 800668e:	22ff      	movs	r2, #255	@ 0xff
 8006690:	401a      	ands	r2, r3
 8006692:	1dfb      	adds	r3, r7, #7
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	0018      	movs	r0, r3
 8006698:	2303      	movs	r3, #3
 800669a:	4003      	ands	r3, r0
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066a0:	481f      	ldr	r0, [pc, #124]	@ (8006720 <__NVIC_SetPriority+0xd4>)
 80066a2:	1dfb      	adds	r3, r7, #7
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	b25b      	sxtb	r3, r3
 80066a8:	089b      	lsrs	r3, r3, #2
 80066aa:	430a      	orrs	r2, r1
 80066ac:	33c0      	adds	r3, #192	@ 0xc0
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80066b2:	e031      	b.n	8006718 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006724 <__NVIC_SetPriority+0xd8>)
 80066b6:	1dfb      	adds	r3, r7, #7
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	0019      	movs	r1, r3
 80066bc:	230f      	movs	r3, #15
 80066be:	400b      	ands	r3, r1
 80066c0:	3b08      	subs	r3, #8
 80066c2:	089b      	lsrs	r3, r3, #2
 80066c4:	3306      	adds	r3, #6
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	18d3      	adds	r3, r2, r3
 80066ca:	3304      	adds	r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	1dfa      	adds	r2, r7, #7
 80066d0:	7812      	ldrb	r2, [r2, #0]
 80066d2:	0011      	movs	r1, r2
 80066d4:	2203      	movs	r2, #3
 80066d6:	400a      	ands	r2, r1
 80066d8:	00d2      	lsls	r2, r2, #3
 80066da:	21ff      	movs	r1, #255	@ 0xff
 80066dc:	4091      	lsls	r1, r2
 80066de:	000a      	movs	r2, r1
 80066e0:	43d2      	mvns	r2, r2
 80066e2:	401a      	ands	r2, r3
 80066e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	019b      	lsls	r3, r3, #6
 80066ea:	22ff      	movs	r2, #255	@ 0xff
 80066ec:	401a      	ands	r2, r3
 80066ee:	1dfb      	adds	r3, r7, #7
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	0018      	movs	r0, r3
 80066f4:	2303      	movs	r3, #3
 80066f6:	4003      	ands	r3, r0
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066fc:	4809      	ldr	r0, [pc, #36]	@ (8006724 <__NVIC_SetPriority+0xd8>)
 80066fe:	1dfb      	adds	r3, r7, #7
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	001c      	movs	r4, r3
 8006704:	230f      	movs	r3, #15
 8006706:	4023      	ands	r3, r4
 8006708:	3b08      	subs	r3, #8
 800670a:	089b      	lsrs	r3, r3, #2
 800670c:	430a      	orrs	r2, r1
 800670e:	3306      	adds	r3, #6
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	18c3      	adds	r3, r0, r3
 8006714:	3304      	adds	r3, #4
 8006716:	601a      	str	r2, [r3, #0]
}
 8006718:	46c0      	nop			@ (mov r8, r8)
 800671a:	46bd      	mov	sp, r7
 800671c:	b003      	add	sp, #12
 800671e:	bd90      	pop	{r4, r7, pc}
 8006720:	e000e100 	.word	0xe000e100
 8006724:	e000ed00 	.word	0xe000ed00

08006728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	1e5a      	subs	r2, r3, #1
 8006734:	2380      	movs	r3, #128	@ 0x80
 8006736:	045b      	lsls	r3, r3, #17
 8006738:	429a      	cmp	r2, r3
 800673a:	d301      	bcc.n	8006740 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800673c:	2301      	movs	r3, #1
 800673e:	e010      	b.n	8006762 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006740:	4b0a      	ldr	r3, [pc, #40]	@ (800676c <SysTick_Config+0x44>)
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	3a01      	subs	r2, #1
 8006746:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006748:	2301      	movs	r3, #1
 800674a:	425b      	negs	r3, r3
 800674c:	2103      	movs	r1, #3
 800674e:	0018      	movs	r0, r3
 8006750:	f7ff ff7c 	bl	800664c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006754:	4b05      	ldr	r3, [pc, #20]	@ (800676c <SysTick_Config+0x44>)
 8006756:	2200      	movs	r2, #0
 8006758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800675a:	4b04      	ldr	r3, [pc, #16]	@ (800676c <SysTick_Config+0x44>)
 800675c:	2207      	movs	r2, #7
 800675e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006760:	2300      	movs	r3, #0
}
 8006762:	0018      	movs	r0, r3
 8006764:	46bd      	mov	sp, r7
 8006766:	b002      	add	sp, #8
 8006768:	bd80      	pop	{r7, pc}
 800676a:	46c0      	nop			@ (mov r8, r8)
 800676c:	e000e010 	.word	0xe000e010

08006770 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
 800677a:	210f      	movs	r1, #15
 800677c:	187b      	adds	r3, r7, r1
 800677e:	1c02      	adds	r2, r0, #0
 8006780:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	187b      	adds	r3, r7, r1
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	b25b      	sxtb	r3, r3
 800678a:	0011      	movs	r1, r2
 800678c:	0018      	movs	r0, r3
 800678e:	f7ff ff5d 	bl	800664c <__NVIC_SetPriority>
}
 8006792:	46c0      	nop			@ (mov r8, r8)
 8006794:	46bd      	mov	sp, r7
 8006796:	b004      	add	sp, #16
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	0018      	movs	r0, r3
 80067a6:	f7ff ffbf 	bl	8006728 <SysTick_Config>
 80067aa:	0003      	movs	r3, r0
}
 80067ac:	0018      	movs	r0, r3
 80067ae:	46bd      	mov	sp, r7
 80067b0:	b002      	add	sp, #8
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80067ca:	e155      	b.n	8006a78 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2101      	movs	r1, #1
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4091      	lsls	r1, r2
 80067d6:	000a      	movs	r2, r1
 80067d8:	4013      	ands	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d100      	bne.n	80067e4 <HAL_GPIO_Init+0x30>
 80067e2:	e146      	b.n	8006a72 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2203      	movs	r2, #3
 80067ea:	4013      	ands	r3, r2
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d005      	beq.n	80067fc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2203      	movs	r2, #3
 80067f6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d130      	bne.n	800685e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	2203      	movs	r2, #3
 8006808:	409a      	lsls	r2, r3
 800680a:	0013      	movs	r3, r2
 800680c:	43da      	mvns	r2, r3
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4013      	ands	r3, r2
 8006812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	409a      	lsls	r2, r3
 800681e:	0013      	movs	r3, r2
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006832:	2201      	movs	r2, #1
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	409a      	lsls	r2, r3
 8006838:	0013      	movs	r3, r2
 800683a:	43da      	mvns	r2, r3
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	4013      	ands	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	091b      	lsrs	r3, r3, #4
 8006848:	2201      	movs	r2, #1
 800684a:	401a      	ands	r2, r3
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	409a      	lsls	r2, r3
 8006850:	0013      	movs	r3, r2
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2203      	movs	r2, #3
 8006864:	4013      	ands	r3, r2
 8006866:	2b03      	cmp	r3, #3
 8006868:	d017      	beq.n	800689a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	2203      	movs	r2, #3
 8006876:	409a      	lsls	r2, r3
 8006878:	0013      	movs	r3, r2
 800687a:	43da      	mvns	r2, r3
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4013      	ands	r3, r2
 8006880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	409a      	lsls	r2, r3
 800688c:	0013      	movs	r3, r2
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2203      	movs	r2, #3
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d123      	bne.n	80068ee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	08da      	lsrs	r2, r3, #3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	3208      	adds	r2, #8
 80068ae:	0092      	lsls	r2, r2, #2
 80068b0:	58d3      	ldr	r3, [r2, r3]
 80068b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2207      	movs	r2, #7
 80068b8:	4013      	ands	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	220f      	movs	r2, #15
 80068be:	409a      	lsls	r2, r3
 80068c0:	0013      	movs	r3, r2
 80068c2:	43da      	mvns	r2, r3
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4013      	ands	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2107      	movs	r1, #7
 80068d2:	400b      	ands	r3, r1
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	409a      	lsls	r2, r3
 80068d8:	0013      	movs	r3, r2
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	08da      	lsrs	r2, r3, #3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3208      	adds	r2, #8
 80068e8:	0092      	lsls	r2, r2, #2
 80068ea:	6939      	ldr	r1, [r7, #16]
 80068ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	2203      	movs	r2, #3
 80068fa:	409a      	lsls	r2, r3
 80068fc:	0013      	movs	r3, r2
 80068fe:	43da      	mvns	r2, r3
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	4013      	ands	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2203      	movs	r2, #3
 800690c:	401a      	ands	r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	409a      	lsls	r2, r3
 8006914:	0013      	movs	r3, r2
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	23c0      	movs	r3, #192	@ 0xc0
 8006928:	029b      	lsls	r3, r3, #10
 800692a:	4013      	ands	r3, r2
 800692c:	d100      	bne.n	8006930 <HAL_GPIO_Init+0x17c>
 800692e:	e0a0      	b.n	8006a72 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006930:	4b57      	ldr	r3, [pc, #348]	@ (8006a90 <HAL_GPIO_Init+0x2dc>)
 8006932:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006934:	4b56      	ldr	r3, [pc, #344]	@ (8006a90 <HAL_GPIO_Init+0x2dc>)
 8006936:	2101      	movs	r1, #1
 8006938:	430a      	orrs	r2, r1
 800693a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800693c:	4a55      	ldr	r2, [pc, #340]	@ (8006a94 <HAL_GPIO_Init+0x2e0>)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	089b      	lsrs	r3, r3, #2
 8006942:	3302      	adds	r3, #2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	589b      	ldr	r3, [r3, r2]
 8006948:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2203      	movs	r2, #3
 800694e:	4013      	ands	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	220f      	movs	r2, #15
 8006954:	409a      	lsls	r2, r3
 8006956:	0013      	movs	r3, r2
 8006958:	43da      	mvns	r2, r3
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	4013      	ands	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	23a0      	movs	r3, #160	@ 0xa0
 8006964:	05db      	lsls	r3, r3, #23
 8006966:	429a      	cmp	r2, r3
 8006968:	d01f      	beq.n	80069aa <HAL_GPIO_Init+0x1f6>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a4a      	ldr	r2, [pc, #296]	@ (8006a98 <HAL_GPIO_Init+0x2e4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d019      	beq.n	80069a6 <HAL_GPIO_Init+0x1f2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a49      	ldr	r2, [pc, #292]	@ (8006a9c <HAL_GPIO_Init+0x2e8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d013      	beq.n	80069a2 <HAL_GPIO_Init+0x1ee>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a48      	ldr	r2, [pc, #288]	@ (8006aa0 <HAL_GPIO_Init+0x2ec>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00d      	beq.n	800699e <HAL_GPIO_Init+0x1ea>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a47      	ldr	r2, [pc, #284]	@ (8006aa4 <HAL_GPIO_Init+0x2f0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d007      	beq.n	800699a <HAL_GPIO_Init+0x1e6>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a46      	ldr	r2, [pc, #280]	@ (8006aa8 <HAL_GPIO_Init+0x2f4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d101      	bne.n	8006996 <HAL_GPIO_Init+0x1e2>
 8006992:	2305      	movs	r3, #5
 8006994:	e00a      	b.n	80069ac <HAL_GPIO_Init+0x1f8>
 8006996:	2306      	movs	r3, #6
 8006998:	e008      	b.n	80069ac <HAL_GPIO_Init+0x1f8>
 800699a:	2304      	movs	r3, #4
 800699c:	e006      	b.n	80069ac <HAL_GPIO_Init+0x1f8>
 800699e:	2303      	movs	r3, #3
 80069a0:	e004      	b.n	80069ac <HAL_GPIO_Init+0x1f8>
 80069a2:	2302      	movs	r3, #2
 80069a4:	e002      	b.n	80069ac <HAL_GPIO_Init+0x1f8>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <HAL_GPIO_Init+0x1f8>
 80069aa:	2300      	movs	r3, #0
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	2103      	movs	r1, #3
 80069b0:	400a      	ands	r2, r1
 80069b2:	0092      	lsls	r2, r2, #2
 80069b4:	4093      	lsls	r3, r2
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069bc:	4935      	ldr	r1, [pc, #212]	@ (8006a94 <HAL_GPIO_Init+0x2e0>)
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	089b      	lsrs	r3, r3, #2
 80069c2:	3302      	adds	r3, #2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80069ca:	4b38      	ldr	r3, [pc, #224]	@ (8006aac <HAL_GPIO_Init+0x2f8>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	43da      	mvns	r2, r3
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	4013      	ands	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	2380      	movs	r3, #128	@ 0x80
 80069e0:	035b      	lsls	r3, r3, #13
 80069e2:	4013      	ands	r3, r2
 80069e4:	d003      	beq.n	80069ee <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80069ee:	4b2f      	ldr	r3, [pc, #188]	@ (8006aac <HAL_GPIO_Init+0x2f8>)
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80069f4:	4b2d      	ldr	r3, [pc, #180]	@ (8006aac <HAL_GPIO_Init+0x2f8>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	43da      	mvns	r2, r3
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	4013      	ands	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	2380      	movs	r3, #128	@ 0x80
 8006a0a:	039b      	lsls	r3, r3, #14
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d003      	beq.n	8006a18 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006a18:	4b24      	ldr	r3, [pc, #144]	@ (8006aac <HAL_GPIO_Init+0x2f8>)
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8006a1e:	4b23      	ldr	r3, [pc, #140]	@ (8006aac <HAL_GPIO_Init+0x2f8>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	43da      	mvns	r2, r3
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	2380      	movs	r3, #128	@ 0x80
 8006a34:	029b      	lsls	r3, r3, #10
 8006a36:	4013      	ands	r3, r2
 8006a38:	d003      	beq.n	8006a42 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006a42:	4b1a      	ldr	r3, [pc, #104]	@ (8006aac <HAL_GPIO_Init+0x2f8>)
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a48:	4b18      	ldr	r3, [pc, #96]	@ (8006aac <HAL_GPIO_Init+0x2f8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	43da      	mvns	r2, r3
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4013      	ands	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	2380      	movs	r3, #128	@ 0x80
 8006a5e:	025b      	lsls	r3, r3, #9
 8006a60:	4013      	ands	r3, r2
 8006a62:	d003      	beq.n	8006a6c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8006aac <HAL_GPIO_Init+0x2f8>)
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	3301      	adds	r3, #1
 8006a76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	40da      	lsrs	r2, r3
 8006a80:	1e13      	subs	r3, r2, #0
 8006a82:	d000      	beq.n	8006a86 <HAL_GPIO_Init+0x2d2>
 8006a84:	e6a2      	b.n	80067cc <HAL_GPIO_Init+0x18>
  }
}
 8006a86:	46c0      	nop			@ (mov r8, r8)
 8006a88:	46c0      	nop			@ (mov r8, r8)
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b006      	add	sp, #24
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	40021000 	.word	0x40021000
 8006a94:	40010000 	.word	0x40010000
 8006a98:	50000400 	.word	0x50000400
 8006a9c:	50000800 	.word	0x50000800
 8006aa0:	50000c00 	.word	0x50000c00
 8006aa4:	50001000 	.word	0x50001000
 8006aa8:	50001c00 	.word	0x50001c00
 8006aac:	40010400 	.word	0x40010400

08006ab0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	000a      	movs	r2, r1
 8006aba:	1cbb      	adds	r3, r7, #2
 8006abc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	1cba      	adds	r2, r7, #2
 8006ac4:	8812      	ldrh	r2, [r2, #0]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	d004      	beq.n	8006ad4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006aca:	230f      	movs	r3, #15
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	2201      	movs	r2, #1
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	e003      	b.n	8006adc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ad4:	230f      	movs	r3, #15
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	2200      	movs	r2, #0
 8006ada:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006adc:	230f      	movs	r3, #15
 8006ade:	18fb      	adds	r3, r7, r3
 8006ae0:	781b      	ldrb	r3, [r3, #0]
}
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b004      	add	sp, #16
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	0008      	movs	r0, r1
 8006af4:	0011      	movs	r1, r2
 8006af6:	1cbb      	adds	r3, r7, #2
 8006af8:	1c02      	adds	r2, r0, #0
 8006afa:	801a      	strh	r2, [r3, #0]
 8006afc:	1c7b      	adds	r3, r7, #1
 8006afe:	1c0a      	adds	r2, r1, #0
 8006b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b02:	1c7b      	adds	r3, r7, #1
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b0a:	1cbb      	adds	r3, r7, #2
 8006b0c:	881a      	ldrh	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006b12:	e003      	b.n	8006b1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006b14:	1cbb      	adds	r3, r7, #2
 8006b16:	881a      	ldrh	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006b1c:	46c0      	nop			@ (mov r8, r8)
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	b002      	add	sp, #8
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b24:	b5b0      	push	{r4, r5, r7, lr}
 8006b26:	b08a      	sub	sp, #40	@ 0x28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d102      	bne.n	8006b38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f000 fb6c 	bl	8007210 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b38:	4bc8      	ldr	r3, [pc, #800]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	220c      	movs	r2, #12
 8006b3e:	4013      	ands	r3, r2
 8006b40:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b42:	4bc6      	ldr	r3, [pc, #792]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	2380      	movs	r3, #128	@ 0x80
 8006b48:	025b      	lsls	r3, r3, #9
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2201      	movs	r2, #1
 8006b54:	4013      	ands	r3, r2
 8006b56:	d100      	bne.n	8006b5a <HAL_RCC_OscConfig+0x36>
 8006b58:	e07d      	b.n	8006c56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d007      	beq.n	8006b70 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	2b0c      	cmp	r3, #12
 8006b64:	d112      	bne.n	8006b8c <HAL_RCC_OscConfig+0x68>
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	2380      	movs	r3, #128	@ 0x80
 8006b6a:	025b      	lsls	r3, r3, #9
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d10d      	bne.n	8006b8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b70:	4bba      	ldr	r3, [pc, #744]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	2380      	movs	r3, #128	@ 0x80
 8006b76:	029b      	lsls	r3, r3, #10
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d100      	bne.n	8006b7e <HAL_RCC_OscConfig+0x5a>
 8006b7c:	e06a      	b.n	8006c54 <HAL_RCC_OscConfig+0x130>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d166      	bne.n	8006c54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f000 fb42 	bl	8007210 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	2380      	movs	r3, #128	@ 0x80
 8006b92:	025b      	lsls	r3, r3, #9
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d107      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x84>
 8006b98:	4bb0      	ldr	r3, [pc, #704]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	4baf      	ldr	r3, [pc, #700]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006b9e:	2180      	movs	r1, #128	@ 0x80
 8006ba0:	0249      	lsls	r1, r1, #9
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	e027      	b.n	8006bf8 <HAL_RCC_OscConfig+0xd4>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	23a0      	movs	r3, #160	@ 0xa0
 8006bae:	02db      	lsls	r3, r3, #11
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d10e      	bne.n	8006bd2 <HAL_RCC_OscConfig+0xae>
 8006bb4:	4ba9      	ldr	r3, [pc, #676]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	4ba8      	ldr	r3, [pc, #672]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006bba:	2180      	movs	r1, #128	@ 0x80
 8006bbc:	02c9      	lsls	r1, r1, #11
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	4ba6      	ldr	r3, [pc, #664]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4ba5      	ldr	r3, [pc, #660]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006bc8:	2180      	movs	r1, #128	@ 0x80
 8006bca:	0249      	lsls	r1, r1, #9
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	e012      	b.n	8006bf8 <HAL_RCC_OscConfig+0xd4>
 8006bd2:	4ba2      	ldr	r3, [pc, #648]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4ba1      	ldr	r3, [pc, #644]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006bd8:	49a1      	ldr	r1, [pc, #644]	@ (8006e60 <HAL_RCC_OscConfig+0x33c>)
 8006bda:	400a      	ands	r2, r1
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	4b9f      	ldr	r3, [pc, #636]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	2380      	movs	r3, #128	@ 0x80
 8006be4:	025b      	lsls	r3, r3, #9
 8006be6:	4013      	ands	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4b9b      	ldr	r3, [pc, #620]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	4b9a      	ldr	r3, [pc, #616]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006bf2:	499c      	ldr	r1, [pc, #624]	@ (8006e64 <HAL_RCC_OscConfig+0x340>)
 8006bf4:	400a      	ands	r2, r1
 8006bf6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d014      	beq.n	8006c2a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c00:	f7ff f804 	bl	8005c0c <HAL_GetTick>
 8006c04:	0003      	movs	r3, r0
 8006c06:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c08:	e008      	b.n	8006c1c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c0a:	f7fe ffff 	bl	8005c0c <HAL_GetTick>
 8006c0e:	0002      	movs	r2, r0
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b64      	cmp	r3, #100	@ 0x64
 8006c16:	d901      	bls.n	8006c1c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e2f9      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	2380      	movs	r3, #128	@ 0x80
 8006c22:	029b      	lsls	r3, r3, #10
 8006c24:	4013      	ands	r3, r2
 8006c26:	d0f0      	beq.n	8006c0a <HAL_RCC_OscConfig+0xe6>
 8006c28:	e015      	b.n	8006c56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2a:	f7fe ffef 	bl	8005c0c <HAL_GetTick>
 8006c2e:	0003      	movs	r3, r0
 8006c30:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c34:	f7fe ffea 	bl	8005c0c <HAL_GetTick>
 8006c38:	0002      	movs	r2, r0
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b64      	cmp	r3, #100	@ 0x64
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e2e4      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c46:	4b85      	ldr	r3, [pc, #532]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	2380      	movs	r3, #128	@ 0x80
 8006c4c:	029b      	lsls	r3, r3, #10
 8006c4e:	4013      	ands	r3, r2
 8006c50:	d1f0      	bne.n	8006c34 <HAL_RCC_OscConfig+0x110>
 8006c52:	e000      	b.n	8006c56 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c54:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d100      	bne.n	8006c62 <HAL_RCC_OscConfig+0x13e>
 8006c60:	e099      	b.n	8006d96 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	d009      	beq.n	8006c84 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006c70:	4b7a      	ldr	r3, [pc, #488]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	4b79      	ldr	r3, [pc, #484]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006c76:	2120      	movs	r1, #32
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7e:	2220      	movs	r2, #32
 8006c80:	4393      	bics	r3, r2
 8006c82:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d005      	beq.n	8006c96 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2b0c      	cmp	r3, #12
 8006c8e:	d13e      	bne.n	8006d0e <HAL_RCC_OscConfig+0x1ea>
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d13b      	bne.n	8006d0e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006c96:	4b71      	ldr	r3, [pc, #452]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2204      	movs	r2, #4
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	d004      	beq.n	8006caa <HAL_RCC_OscConfig+0x186>
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e2b2      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006caa:	4b6c      	ldr	r3, [pc, #432]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	4a6e      	ldr	r2, [pc, #440]	@ (8006e68 <HAL_RCC_OscConfig+0x344>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	0019      	movs	r1, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	021a      	lsls	r2, r3, #8
 8006cba:	4b68      	ldr	r3, [pc, #416]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006cc0:	4b66      	ldr	r3, [pc, #408]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2209      	movs	r2, #9
 8006cc6:	4393      	bics	r3, r2
 8006cc8:	0019      	movs	r1, r3
 8006cca:	4b64      	ldr	r3, [pc, #400]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cd2:	f000 fbeb 	bl	80074ac <HAL_RCC_GetSysClockFreq>
 8006cd6:	0001      	movs	r1, r0
 8006cd8:	4b60      	ldr	r3, [pc, #384]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	091b      	lsrs	r3, r3, #4
 8006cde:	220f      	movs	r2, #15
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	4a62      	ldr	r2, [pc, #392]	@ (8006e6c <HAL_RCC_OscConfig+0x348>)
 8006ce4:	5cd3      	ldrb	r3, [r2, r3]
 8006ce6:	000a      	movs	r2, r1
 8006ce8:	40da      	lsrs	r2, r3
 8006cea:	4b61      	ldr	r3, [pc, #388]	@ (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006cec:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006cee:	4b61      	ldr	r3, [pc, #388]	@ (8006e74 <HAL_RCC_OscConfig+0x350>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2513      	movs	r5, #19
 8006cf4:	197c      	adds	r4, r7, r5
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f7fe ff42 	bl	8005b80 <HAL_InitTick>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006d00:	197b      	adds	r3, r7, r5
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d046      	beq.n	8006d96 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8006d08:	197b      	adds	r3, r7, r5
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	e280      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d027      	beq.n	8006d64 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006d14:	4b51      	ldr	r3, [pc, #324]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2209      	movs	r2, #9
 8006d1a:	4393      	bics	r3, r2
 8006d1c:	0019      	movs	r1, r3
 8006d1e:	4b4f      	ldr	r3, [pc, #316]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d22:	430a      	orrs	r2, r1
 8006d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d26:	f7fe ff71 	bl	8005c0c <HAL_GetTick>
 8006d2a:	0003      	movs	r3, r0
 8006d2c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d30:	f7fe ff6c 	bl	8005c0c <HAL_GetTick>
 8006d34:	0002      	movs	r2, r0
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e266      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d42:	4b46      	ldr	r3, [pc, #280]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2204      	movs	r2, #4
 8006d48:	4013      	ands	r3, r2
 8006d4a:	d0f1      	beq.n	8006d30 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d4c:	4b43      	ldr	r3, [pc, #268]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	4a45      	ldr	r2, [pc, #276]	@ (8006e68 <HAL_RCC_OscConfig+0x344>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	0019      	movs	r1, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	021a      	lsls	r2, r3, #8
 8006d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
 8006d62:	e018      	b.n	8006d96 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d64:	4b3d      	ldr	r3, [pc, #244]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4b3c      	ldr	r3, [pc, #240]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	438a      	bics	r2, r1
 8006d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d70:	f7fe ff4c 	bl	8005c0c <HAL_GetTick>
 8006d74:	0003      	movs	r3, r0
 8006d76:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d78:	e008      	b.n	8006d8c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d7a:	f7fe ff47 	bl	8005c0c <HAL_GetTick>
 8006d7e:	0002      	movs	r2, r0
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e241      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d8c:	4b33      	ldr	r3, [pc, #204]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2204      	movs	r2, #4
 8006d92:	4013      	ands	r3, r2
 8006d94:	d1f1      	bne.n	8006d7a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2210      	movs	r2, #16
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	d100      	bne.n	8006da2 <HAL_RCC_OscConfig+0x27e>
 8006da0:	e0a1      	b.n	8006ee6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d140      	bne.n	8006e2a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006da8:	4b2c      	ldr	r3, [pc, #176]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	2380      	movs	r3, #128	@ 0x80
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4013      	ands	r3, r2
 8006db2:	d005      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x29c>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e227      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006dc0:	4b26      	ldr	r3, [pc, #152]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4a2c      	ldr	r2, [pc, #176]	@ (8006e78 <HAL_RCC_OscConfig+0x354>)
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	0019      	movs	r1, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1a      	ldr	r2, [r3, #32]
 8006dce:	4b23      	ldr	r3, [pc, #140]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006dd4:	4b21      	ldr	r3, [pc, #132]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	0a19      	lsrs	r1, r3, #8
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	061a      	lsls	r2, r3, #24
 8006de2:	4b1e      	ldr	r3, [pc, #120]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006de4:	430a      	orrs	r2, r1
 8006de6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	0b5b      	lsrs	r3, r3, #13
 8006dee:	3301      	adds	r3, #1
 8006df0:	2280      	movs	r2, #128	@ 0x80
 8006df2:	0212      	lsls	r2, r2, #8
 8006df4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006df6:	4b19      	ldr	r3, [pc, #100]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	091b      	lsrs	r3, r3, #4
 8006dfc:	210f      	movs	r1, #15
 8006dfe:	400b      	ands	r3, r1
 8006e00:	491a      	ldr	r1, [pc, #104]	@ (8006e6c <HAL_RCC_OscConfig+0x348>)
 8006e02:	5ccb      	ldrb	r3, [r1, r3]
 8006e04:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006e06:	4b1a      	ldr	r3, [pc, #104]	@ (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006e08:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006e74 <HAL_RCC_OscConfig+0x350>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2513      	movs	r5, #19
 8006e10:	197c      	adds	r4, r7, r5
 8006e12:	0018      	movs	r0, r3
 8006e14:	f7fe feb4 	bl	8005b80 <HAL_InitTick>
 8006e18:	0003      	movs	r3, r0
 8006e1a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006e1c:	197b      	adds	r3, r7, r5
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d060      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8006e24:	197b      	adds	r3, r7, r5
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	e1f2      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d03f      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006e32:	4b0a      	ldr	r3, [pc, #40]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4b09      	ldr	r3, [pc, #36]	@ (8006e5c <HAL_RCC_OscConfig+0x338>)
 8006e38:	2180      	movs	r1, #128	@ 0x80
 8006e3a:	0049      	lsls	r1, r1, #1
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e40:	f7fe fee4 	bl	8005c0c <HAL_GetTick>
 8006e44:	0003      	movs	r3, r0
 8006e46:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006e48:	e018      	b.n	8006e7c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e4a:	f7fe fedf 	bl	8005c0c <HAL_GetTick>
 8006e4e:	0002      	movs	r2, r0
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d911      	bls.n	8006e7c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e1d9      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	fffeffff 	.word	0xfffeffff
 8006e64:	fffbffff 	.word	0xfffbffff
 8006e68:	ffffe0ff 	.word	0xffffe0ff
 8006e6c:	0800dc20 	.word	0x0800dc20
 8006e70:	20000018 	.word	0x20000018
 8006e74:	2000001c 	.word	0x2000001c
 8006e78:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006e7c:	4bc9      	ldr	r3, [pc, #804]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	2380      	movs	r3, #128	@ 0x80
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4013      	ands	r3, r2
 8006e86:	d0e0      	beq.n	8006e4a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e88:	4bc6      	ldr	r3, [pc, #792]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	4ac6      	ldr	r2, [pc, #792]	@ (80071a8 <HAL_RCC_OscConfig+0x684>)
 8006e8e:	4013      	ands	r3, r2
 8006e90:	0019      	movs	r1, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1a      	ldr	r2, [r3, #32]
 8006e96:	4bc3      	ldr	r3, [pc, #780]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e9c:	4bc1      	ldr	r3, [pc, #772]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	0a19      	lsrs	r1, r3, #8
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	061a      	lsls	r2, r3, #24
 8006eaa:	4bbe      	ldr	r3, [pc, #760]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006eac:	430a      	orrs	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]
 8006eb0:	e019      	b.n	8006ee6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006eb2:	4bbc      	ldr	r3, [pc, #752]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4bbb      	ldr	r3, [pc, #748]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006eb8:	49bc      	ldr	r1, [pc, #752]	@ (80071ac <HAL_RCC_OscConfig+0x688>)
 8006eba:	400a      	ands	r2, r1
 8006ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ebe:	f7fe fea5 	bl	8005c0c <HAL_GetTick>
 8006ec2:	0003      	movs	r3, r0
 8006ec4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ec8:	f7fe fea0 	bl	8005c0c <HAL_GetTick>
 8006ecc:	0002      	movs	r2, r0
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e19a      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006eda:	4bb2      	ldr	r3, [pc, #712]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	2380      	movs	r3, #128	@ 0x80
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d1f0      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2208      	movs	r2, #8
 8006eec:	4013      	ands	r3, r2
 8006eee:	d036      	beq.n	8006f5e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d019      	beq.n	8006f2c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ef8:	4baa      	ldr	r3, [pc, #680]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006efa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006efc:	4ba9      	ldr	r3, [pc, #676]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006efe:	2101      	movs	r1, #1
 8006f00:	430a      	orrs	r2, r1
 8006f02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f04:	f7fe fe82 	bl	8005c0c <HAL_GetTick>
 8006f08:	0003      	movs	r3, r0
 8006f0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f0c:	e008      	b.n	8006f20 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f0e:	f7fe fe7d 	bl	8005c0c <HAL_GetTick>
 8006f12:	0002      	movs	r2, r0
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e177      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f20:	4ba0      	ldr	r3, [pc, #640]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f24:	2202      	movs	r2, #2
 8006f26:	4013      	ands	r3, r2
 8006f28:	d0f1      	beq.n	8006f0e <HAL_RCC_OscConfig+0x3ea>
 8006f2a:	e018      	b.n	8006f5e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f2c:	4b9d      	ldr	r3, [pc, #628]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006f2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f30:	4b9c      	ldr	r3, [pc, #624]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006f32:	2101      	movs	r1, #1
 8006f34:	438a      	bics	r2, r1
 8006f36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f38:	f7fe fe68 	bl	8005c0c <HAL_GetTick>
 8006f3c:	0003      	movs	r3, r0
 8006f3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f40:	e008      	b.n	8006f54 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f42:	f7fe fe63 	bl	8005c0c <HAL_GetTick>
 8006f46:	0002      	movs	r2, r0
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e15d      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f54:	4b93      	ldr	r3, [pc, #588]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f58:	2202      	movs	r2, #2
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	d1f1      	bne.n	8006f42 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2204      	movs	r2, #4
 8006f64:	4013      	ands	r3, r2
 8006f66:	d100      	bne.n	8006f6a <HAL_RCC_OscConfig+0x446>
 8006f68:	e0ae      	b.n	80070c8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f6a:	2023      	movs	r0, #35	@ 0x23
 8006f6c:	183b      	adds	r3, r7, r0
 8006f6e:	2200      	movs	r2, #0
 8006f70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f72:	4b8c      	ldr	r3, [pc, #560]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f76:	2380      	movs	r3, #128	@ 0x80
 8006f78:	055b      	lsls	r3, r3, #21
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	d109      	bne.n	8006f92 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f7e:	4b89      	ldr	r3, [pc, #548]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f82:	4b88      	ldr	r3, [pc, #544]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006f84:	2180      	movs	r1, #128	@ 0x80
 8006f86:	0549      	lsls	r1, r1, #21
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8006f8c:	183b      	adds	r3, r7, r0
 8006f8e:	2201      	movs	r2, #1
 8006f90:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f92:	4b87      	ldr	r3, [pc, #540]	@ (80071b0 <HAL_RCC_OscConfig+0x68c>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	2380      	movs	r3, #128	@ 0x80
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	d11a      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f9e:	4b84      	ldr	r3, [pc, #528]	@ (80071b0 <HAL_RCC_OscConfig+0x68c>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4b83      	ldr	r3, [pc, #524]	@ (80071b0 <HAL_RCC_OscConfig+0x68c>)
 8006fa4:	2180      	movs	r1, #128	@ 0x80
 8006fa6:	0049      	lsls	r1, r1, #1
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fac:	f7fe fe2e 	bl	8005c0c <HAL_GetTick>
 8006fb0:	0003      	movs	r3, r0
 8006fb2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb6:	f7fe fe29 	bl	8005c0c <HAL_GetTick>
 8006fba:	0002      	movs	r2, r0
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b64      	cmp	r3, #100	@ 0x64
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e123      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fc8:	4b79      	ldr	r3, [pc, #484]	@ (80071b0 <HAL_RCC_OscConfig+0x68c>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	2380      	movs	r3, #128	@ 0x80
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d0f0      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	2380      	movs	r3, #128	@ 0x80
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d107      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x4cc>
 8006fe0:	4b70      	ldr	r3, [pc, #448]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006fe2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006fe6:	2180      	movs	r1, #128	@ 0x80
 8006fe8:	0049      	lsls	r1, r1, #1
 8006fea:	430a      	orrs	r2, r1
 8006fec:	651a      	str	r2, [r3, #80]	@ 0x50
 8006fee:	e031      	b.n	8007054 <HAL_RCC_OscConfig+0x530>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10c      	bne.n	8007012 <HAL_RCC_OscConfig+0x4ee>
 8006ff8:	4b6a      	ldr	r3, [pc, #424]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006ffa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ffc:	4b69      	ldr	r3, [pc, #420]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8006ffe:	496b      	ldr	r1, [pc, #428]	@ (80071ac <HAL_RCC_OscConfig+0x688>)
 8007000:	400a      	ands	r2, r1
 8007002:	651a      	str	r2, [r3, #80]	@ 0x50
 8007004:	4b67      	ldr	r3, [pc, #412]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007006:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007008:	4b66      	ldr	r3, [pc, #408]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 800700a:	496a      	ldr	r1, [pc, #424]	@ (80071b4 <HAL_RCC_OscConfig+0x690>)
 800700c:	400a      	ands	r2, r1
 800700e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007010:	e020      	b.n	8007054 <HAL_RCC_OscConfig+0x530>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	23a0      	movs	r3, #160	@ 0xa0
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	429a      	cmp	r2, r3
 800701c:	d10e      	bne.n	800703c <HAL_RCC_OscConfig+0x518>
 800701e:	4b61      	ldr	r3, [pc, #388]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007020:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007022:	4b60      	ldr	r3, [pc, #384]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007024:	2180      	movs	r1, #128	@ 0x80
 8007026:	00c9      	lsls	r1, r1, #3
 8007028:	430a      	orrs	r2, r1
 800702a:	651a      	str	r2, [r3, #80]	@ 0x50
 800702c:	4b5d      	ldr	r3, [pc, #372]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 800702e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007030:	4b5c      	ldr	r3, [pc, #368]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007032:	2180      	movs	r1, #128	@ 0x80
 8007034:	0049      	lsls	r1, r1, #1
 8007036:	430a      	orrs	r2, r1
 8007038:	651a      	str	r2, [r3, #80]	@ 0x50
 800703a:	e00b      	b.n	8007054 <HAL_RCC_OscConfig+0x530>
 800703c:	4b59      	ldr	r3, [pc, #356]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 800703e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007040:	4b58      	ldr	r3, [pc, #352]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007042:	495a      	ldr	r1, [pc, #360]	@ (80071ac <HAL_RCC_OscConfig+0x688>)
 8007044:	400a      	ands	r2, r1
 8007046:	651a      	str	r2, [r3, #80]	@ 0x50
 8007048:	4b56      	ldr	r3, [pc, #344]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 800704a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800704c:	4b55      	ldr	r3, [pc, #340]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 800704e:	4959      	ldr	r1, [pc, #356]	@ (80071b4 <HAL_RCC_OscConfig+0x690>)
 8007050:	400a      	ands	r2, r1
 8007052:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d015      	beq.n	8007088 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800705c:	f7fe fdd6 	bl	8005c0c <HAL_GetTick>
 8007060:	0003      	movs	r3, r0
 8007062:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007064:	e009      	b.n	800707a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007066:	f7fe fdd1 	bl	8005c0c <HAL_GetTick>
 800706a:	0002      	movs	r2, r0
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	4a51      	ldr	r2, [pc, #324]	@ (80071b8 <HAL_RCC_OscConfig+0x694>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e0ca      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800707a:	4b4a      	ldr	r3, [pc, #296]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 800707c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800707e:	2380      	movs	r3, #128	@ 0x80
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4013      	ands	r3, r2
 8007084:	d0ef      	beq.n	8007066 <HAL_RCC_OscConfig+0x542>
 8007086:	e014      	b.n	80070b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007088:	f7fe fdc0 	bl	8005c0c <HAL_GetTick>
 800708c:	0003      	movs	r3, r0
 800708e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007090:	e009      	b.n	80070a6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007092:	f7fe fdbb 	bl	8005c0c <HAL_GetTick>
 8007096:	0002      	movs	r2, r0
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	4a46      	ldr	r2, [pc, #280]	@ (80071b8 <HAL_RCC_OscConfig+0x694>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e0b4      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070a6:	4b3f      	ldr	r3, [pc, #252]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 80070a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070aa:	2380      	movs	r3, #128	@ 0x80
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4013      	ands	r3, r2
 80070b0:	d1ef      	bne.n	8007092 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80070b2:	2323      	movs	r3, #35	@ 0x23
 80070b4:	18fb      	adds	r3, r7, r3
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d105      	bne.n	80070c8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070bc:	4b39      	ldr	r3, [pc, #228]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 80070be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070c0:	4b38      	ldr	r3, [pc, #224]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 80070c2:	493e      	ldr	r1, [pc, #248]	@ (80071bc <HAL_RCC_OscConfig+0x698>)
 80070c4:	400a      	ands	r2, r1
 80070c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d100      	bne.n	80070d2 <HAL_RCC_OscConfig+0x5ae>
 80070d0:	e09d      	b.n	800720e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	2b0c      	cmp	r3, #12
 80070d6:	d100      	bne.n	80070da <HAL_RCC_OscConfig+0x5b6>
 80070d8:	e076      	b.n	80071c8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d145      	bne.n	800716e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070e2:	4b30      	ldr	r3, [pc, #192]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	4b2f      	ldr	r3, [pc, #188]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 80070e8:	4935      	ldr	r1, [pc, #212]	@ (80071c0 <HAL_RCC_OscConfig+0x69c>)
 80070ea:	400a      	ands	r2, r1
 80070ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ee:	f7fe fd8d 	bl	8005c0c <HAL_GetTick>
 80070f2:	0003      	movs	r3, r0
 80070f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070f8:	f7fe fd88 	bl	8005c0c <HAL_GetTick>
 80070fc:	0002      	movs	r2, r0
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e082      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800710a:	4b26      	ldr	r3, [pc, #152]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	2380      	movs	r3, #128	@ 0x80
 8007110:	049b      	lsls	r3, r3, #18
 8007112:	4013      	ands	r3, r2
 8007114:	d1f0      	bne.n	80070f8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007116:	4b23      	ldr	r3, [pc, #140]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	4a2a      	ldr	r2, [pc, #168]	@ (80071c4 <HAL_RCC_OscConfig+0x6a0>)
 800711c:	4013      	ands	r3, r2
 800711e:	0019      	movs	r1, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712e:	431a      	orrs	r2, r3
 8007130:	4b1c      	ldr	r3, [pc, #112]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007132:	430a      	orrs	r2, r1
 8007134:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007136:	4b1b      	ldr	r3, [pc, #108]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	4b1a      	ldr	r3, [pc, #104]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 800713c:	2180      	movs	r1, #128	@ 0x80
 800713e:	0449      	lsls	r1, r1, #17
 8007140:	430a      	orrs	r2, r1
 8007142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007144:	f7fe fd62 	bl	8005c0c <HAL_GetTick>
 8007148:	0003      	movs	r3, r0
 800714a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800714e:	f7fe fd5d 	bl	8005c0c <HAL_GetTick>
 8007152:	0002      	movs	r2, r0
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e057      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007160:	4b10      	ldr	r3, [pc, #64]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	2380      	movs	r3, #128	@ 0x80
 8007166:	049b      	lsls	r3, r3, #18
 8007168:	4013      	ands	r3, r2
 800716a:	d0f0      	beq.n	800714e <HAL_RCC_OscConfig+0x62a>
 800716c:	e04f      	b.n	800720e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800716e:	4b0d      	ldr	r3, [pc, #52]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b0c      	ldr	r3, [pc, #48]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007174:	4912      	ldr	r1, [pc, #72]	@ (80071c0 <HAL_RCC_OscConfig+0x69c>)
 8007176:	400a      	ands	r2, r1
 8007178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800717a:	f7fe fd47 	bl	8005c0c <HAL_GetTick>
 800717e:	0003      	movs	r3, r0
 8007180:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007182:	e008      	b.n	8007196 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007184:	f7fe fd42 	bl	8005c0c <HAL_GetTick>
 8007188:	0002      	movs	r2, r0
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e03c      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007196:	4b03      	ldr	r3, [pc, #12]	@ (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	2380      	movs	r3, #128	@ 0x80
 800719c:	049b      	lsls	r3, r3, #18
 800719e:	4013      	ands	r3, r2
 80071a0:	d1f0      	bne.n	8007184 <HAL_RCC_OscConfig+0x660>
 80071a2:	e034      	b.n	800720e <HAL_RCC_OscConfig+0x6ea>
 80071a4:	40021000 	.word	0x40021000
 80071a8:	ffff1fff 	.word	0xffff1fff
 80071ac:	fffffeff 	.word	0xfffffeff
 80071b0:	40007000 	.word	0x40007000
 80071b4:	fffffbff 	.word	0xfffffbff
 80071b8:	00001388 	.word	0x00001388
 80071bc:	efffffff 	.word	0xefffffff
 80071c0:	feffffff 	.word	0xfeffffff
 80071c4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e01d      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80071d4:	4b10      	ldr	r3, [pc, #64]	@ (8007218 <HAL_RCC_OscConfig+0x6f4>)
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	2380      	movs	r3, #128	@ 0x80
 80071de:	025b      	lsls	r3, r3, #9
 80071e0:	401a      	ands	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d10f      	bne.n	800720a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	23f0      	movs	r3, #240	@ 0xf0
 80071ee:	039b      	lsls	r3, r3, #14
 80071f0:	401a      	ands	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d107      	bne.n	800720a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	23c0      	movs	r3, #192	@ 0xc0
 80071fe:	041b      	lsls	r3, r3, #16
 8007200:	401a      	ands	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007206:	429a      	cmp	r2, r3
 8007208:	d001      	beq.n	800720e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e000      	b.n	8007210 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	0018      	movs	r0, r3
 8007212:	46bd      	mov	sp, r7
 8007214:	b00a      	add	sp, #40	@ 0x28
 8007216:	bdb0      	pop	{r4, r5, r7, pc}
 8007218:	40021000 	.word	0x40021000

0800721c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800721c:	b5b0      	push	{r4, r5, r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e128      	b.n	8007482 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007230:	4b96      	ldr	r3, [pc, #600]	@ (800748c <HAL_RCC_ClockConfig+0x270>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2201      	movs	r2, #1
 8007236:	4013      	ands	r3, r2
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d91e      	bls.n	800727c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800723e:	4b93      	ldr	r3, [pc, #588]	@ (800748c <HAL_RCC_ClockConfig+0x270>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2201      	movs	r2, #1
 8007244:	4393      	bics	r3, r2
 8007246:	0019      	movs	r1, r3
 8007248:	4b90      	ldr	r3, [pc, #576]	@ (800748c <HAL_RCC_ClockConfig+0x270>)
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007250:	f7fe fcdc 	bl	8005c0c <HAL_GetTick>
 8007254:	0003      	movs	r3, r0
 8007256:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007258:	e009      	b.n	800726e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800725a:	f7fe fcd7 	bl	8005c0c <HAL_GetTick>
 800725e:	0002      	movs	r2, r0
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	4a8a      	ldr	r2, [pc, #552]	@ (8007490 <HAL_RCC_ClockConfig+0x274>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d901      	bls.n	800726e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e109      	b.n	8007482 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800726e:	4b87      	ldr	r3, [pc, #540]	@ (800748c <HAL_RCC_ClockConfig+0x270>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2201      	movs	r2, #1
 8007274:	4013      	ands	r3, r2
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	429a      	cmp	r2, r3
 800727a:	d1ee      	bne.n	800725a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2202      	movs	r2, #2
 8007282:	4013      	ands	r3, r2
 8007284:	d009      	beq.n	800729a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007286:	4b83      	ldr	r3, [pc, #524]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	22f0      	movs	r2, #240	@ 0xf0
 800728c:	4393      	bics	r3, r2
 800728e:	0019      	movs	r1, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	4b7f      	ldr	r3, [pc, #508]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 8007296:	430a      	orrs	r2, r1
 8007298:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2201      	movs	r2, #1
 80072a0:	4013      	ands	r3, r2
 80072a2:	d100      	bne.n	80072a6 <HAL_RCC_ClockConfig+0x8a>
 80072a4:	e089      	b.n	80073ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d107      	bne.n	80072be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072ae:	4b79      	ldr	r3, [pc, #484]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	2380      	movs	r3, #128	@ 0x80
 80072b4:	029b      	lsls	r3, r3, #10
 80072b6:	4013      	ands	r3, r2
 80072b8:	d120      	bne.n	80072fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e0e1      	b.n	8007482 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d107      	bne.n	80072d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072c6:	4b73      	ldr	r3, [pc, #460]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	2380      	movs	r3, #128	@ 0x80
 80072cc:	049b      	lsls	r3, r3, #18
 80072ce:	4013      	ands	r3, r2
 80072d0:	d114      	bne.n	80072fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e0d5      	b.n	8007482 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d106      	bne.n	80072ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072de:	4b6d      	ldr	r3, [pc, #436]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2204      	movs	r2, #4
 80072e4:	4013      	ands	r3, r2
 80072e6:	d109      	bne.n	80072fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e0ca      	b.n	8007482 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80072ec:	4b69      	ldr	r3, [pc, #420]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	2380      	movs	r3, #128	@ 0x80
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4013      	ands	r3, r2
 80072f6:	d101      	bne.n	80072fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0c2      	b.n	8007482 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072fc:	4b65      	ldr	r3, [pc, #404]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	2203      	movs	r2, #3
 8007302:	4393      	bics	r3, r2
 8007304:	0019      	movs	r1, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	4b62      	ldr	r3, [pc, #392]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 800730c:	430a      	orrs	r2, r1
 800730e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007310:	f7fe fc7c 	bl	8005c0c <HAL_GetTick>
 8007314:	0003      	movs	r3, r0
 8007316:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d111      	bne.n	8007344 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007320:	e009      	b.n	8007336 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007322:	f7fe fc73 	bl	8005c0c <HAL_GetTick>
 8007326:	0002      	movs	r2, r0
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	4a58      	ldr	r2, [pc, #352]	@ (8007490 <HAL_RCC_ClockConfig+0x274>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e0a5      	b.n	8007482 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007336:	4b57      	ldr	r3, [pc, #348]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	220c      	movs	r2, #12
 800733c:	4013      	ands	r3, r2
 800733e:	2b08      	cmp	r3, #8
 8007340:	d1ef      	bne.n	8007322 <HAL_RCC_ClockConfig+0x106>
 8007342:	e03a      	b.n	80073ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2b03      	cmp	r3, #3
 800734a:	d111      	bne.n	8007370 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800734c:	e009      	b.n	8007362 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800734e:	f7fe fc5d 	bl	8005c0c <HAL_GetTick>
 8007352:	0002      	movs	r2, r0
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	4a4d      	ldr	r2, [pc, #308]	@ (8007490 <HAL_RCC_ClockConfig+0x274>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d901      	bls.n	8007362 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e08f      	b.n	8007482 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007362:	4b4c      	ldr	r3, [pc, #304]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	220c      	movs	r2, #12
 8007368:	4013      	ands	r3, r2
 800736a:	2b0c      	cmp	r3, #12
 800736c:	d1ef      	bne.n	800734e <HAL_RCC_ClockConfig+0x132>
 800736e:	e024      	b.n	80073ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d11b      	bne.n	80073b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007378:	e009      	b.n	800738e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800737a:	f7fe fc47 	bl	8005c0c <HAL_GetTick>
 800737e:	0002      	movs	r2, r0
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	4a42      	ldr	r2, [pc, #264]	@ (8007490 <HAL_RCC_ClockConfig+0x274>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d901      	bls.n	800738e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e079      	b.n	8007482 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800738e:	4b41      	ldr	r3, [pc, #260]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	220c      	movs	r2, #12
 8007394:	4013      	ands	r3, r2
 8007396:	2b04      	cmp	r3, #4
 8007398:	d1ef      	bne.n	800737a <HAL_RCC_ClockConfig+0x15e>
 800739a:	e00e      	b.n	80073ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800739c:	f7fe fc36 	bl	8005c0c <HAL_GetTick>
 80073a0:	0002      	movs	r2, r0
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	4a3a      	ldr	r2, [pc, #232]	@ (8007490 <HAL_RCC_ClockConfig+0x274>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d901      	bls.n	80073b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e068      	b.n	8007482 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80073b0:	4b38      	ldr	r3, [pc, #224]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	220c      	movs	r2, #12
 80073b6:	4013      	ands	r3, r2
 80073b8:	d1f0      	bne.n	800739c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073ba:	4b34      	ldr	r3, [pc, #208]	@ (800748c <HAL_RCC_ClockConfig+0x270>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2201      	movs	r2, #1
 80073c0:	4013      	ands	r3, r2
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d21e      	bcs.n	8007406 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073c8:	4b30      	ldr	r3, [pc, #192]	@ (800748c <HAL_RCC_ClockConfig+0x270>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2201      	movs	r2, #1
 80073ce:	4393      	bics	r3, r2
 80073d0:	0019      	movs	r1, r3
 80073d2:	4b2e      	ldr	r3, [pc, #184]	@ (800748c <HAL_RCC_ClockConfig+0x270>)
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80073da:	f7fe fc17 	bl	8005c0c <HAL_GetTick>
 80073de:	0003      	movs	r3, r0
 80073e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073e2:	e009      	b.n	80073f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073e4:	f7fe fc12 	bl	8005c0c <HAL_GetTick>
 80073e8:	0002      	movs	r2, r0
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	4a28      	ldr	r2, [pc, #160]	@ (8007490 <HAL_RCC_ClockConfig+0x274>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d901      	bls.n	80073f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e044      	b.n	8007482 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073f8:	4b24      	ldr	r3, [pc, #144]	@ (800748c <HAL_RCC_ClockConfig+0x270>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2201      	movs	r2, #1
 80073fe:	4013      	ands	r3, r2
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	429a      	cmp	r2, r3
 8007404:	d1ee      	bne.n	80073e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2204      	movs	r2, #4
 800740c:	4013      	ands	r3, r2
 800740e:	d009      	beq.n	8007424 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007410:	4b20      	ldr	r3, [pc, #128]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	4a20      	ldr	r2, [pc, #128]	@ (8007498 <HAL_RCC_ClockConfig+0x27c>)
 8007416:	4013      	ands	r3, r2
 8007418:	0019      	movs	r1, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68da      	ldr	r2, [r3, #12]
 800741e:	4b1d      	ldr	r3, [pc, #116]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 8007420:	430a      	orrs	r2, r1
 8007422:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2208      	movs	r2, #8
 800742a:	4013      	ands	r3, r2
 800742c:	d00a      	beq.n	8007444 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800742e:	4b19      	ldr	r3, [pc, #100]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	4a1a      	ldr	r2, [pc, #104]	@ (800749c <HAL_RCC_ClockConfig+0x280>)
 8007434:	4013      	ands	r3, r2
 8007436:	0019      	movs	r1, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	00da      	lsls	r2, r3, #3
 800743e:	4b15      	ldr	r3, [pc, #84]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 8007440:	430a      	orrs	r2, r1
 8007442:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007444:	f000 f832 	bl	80074ac <HAL_RCC_GetSysClockFreq>
 8007448:	0001      	movs	r1, r0
 800744a:	4b12      	ldr	r3, [pc, #72]	@ (8007494 <HAL_RCC_ClockConfig+0x278>)
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	091b      	lsrs	r3, r3, #4
 8007450:	220f      	movs	r2, #15
 8007452:	4013      	ands	r3, r2
 8007454:	4a12      	ldr	r2, [pc, #72]	@ (80074a0 <HAL_RCC_ClockConfig+0x284>)
 8007456:	5cd3      	ldrb	r3, [r2, r3]
 8007458:	000a      	movs	r2, r1
 800745a:	40da      	lsrs	r2, r3
 800745c:	4b11      	ldr	r3, [pc, #68]	@ (80074a4 <HAL_RCC_ClockConfig+0x288>)
 800745e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007460:	4b11      	ldr	r3, [pc, #68]	@ (80074a8 <HAL_RCC_ClockConfig+0x28c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	250b      	movs	r5, #11
 8007466:	197c      	adds	r4, r7, r5
 8007468:	0018      	movs	r0, r3
 800746a:	f7fe fb89 	bl	8005b80 <HAL_InitTick>
 800746e:	0003      	movs	r3, r0
 8007470:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8007472:	197b      	adds	r3, r7, r5
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800747a:	197b      	adds	r3, r7, r5
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	e000      	b.n	8007482 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	0018      	movs	r0, r3
 8007484:	46bd      	mov	sp, r7
 8007486:	b004      	add	sp, #16
 8007488:	bdb0      	pop	{r4, r5, r7, pc}
 800748a:	46c0      	nop			@ (mov r8, r8)
 800748c:	40022000 	.word	0x40022000
 8007490:	00001388 	.word	0x00001388
 8007494:	40021000 	.word	0x40021000
 8007498:	fffff8ff 	.word	0xfffff8ff
 800749c:	ffffc7ff 	.word	0xffffc7ff
 80074a0:	0800dc20 	.word	0x0800dc20
 80074a4:	20000018 	.word	0x20000018
 80074a8:	2000001c 	.word	0x2000001c

080074ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074ac:	b5b0      	push	{r4, r5, r7, lr}
 80074ae:	b08e      	sub	sp, #56	@ 0x38
 80074b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80074b2:	4b4c      	ldr	r3, [pc, #304]	@ (80075e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80074b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074ba:	230c      	movs	r3, #12
 80074bc:	4013      	ands	r3, r2
 80074be:	2b0c      	cmp	r3, #12
 80074c0:	d014      	beq.n	80074ec <HAL_RCC_GetSysClockFreq+0x40>
 80074c2:	d900      	bls.n	80074c6 <HAL_RCC_GetSysClockFreq+0x1a>
 80074c4:	e07b      	b.n	80075be <HAL_RCC_GetSysClockFreq+0x112>
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d002      	beq.n	80074d0 <HAL_RCC_GetSysClockFreq+0x24>
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d00b      	beq.n	80074e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80074ce:	e076      	b.n	80075be <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80074d0:	4b44      	ldr	r3, [pc, #272]	@ (80075e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2210      	movs	r2, #16
 80074d6:	4013      	ands	r3, r2
 80074d8:	d002      	beq.n	80074e0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80074da:	4b43      	ldr	r3, [pc, #268]	@ (80075e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80074dc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80074de:	e07c      	b.n	80075da <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80074e0:	4b42      	ldr	r3, [pc, #264]	@ (80075ec <HAL_RCC_GetSysClockFreq+0x140>)
 80074e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80074e4:	e079      	b.n	80075da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80074e6:	4b42      	ldr	r3, [pc, #264]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0x144>)
 80074e8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80074ea:	e076      	b.n	80075da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80074ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ee:	0c9a      	lsrs	r2, r3, #18
 80074f0:	230f      	movs	r3, #15
 80074f2:	401a      	ands	r2, r3
 80074f4:	4b3f      	ldr	r3, [pc, #252]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x148>)
 80074f6:	5c9b      	ldrb	r3, [r3, r2]
 80074f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80074fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fc:	0d9a      	lsrs	r2, r3, #22
 80074fe:	2303      	movs	r3, #3
 8007500:	4013      	ands	r3, r2
 8007502:	3301      	adds	r3, #1
 8007504:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007506:	4b37      	ldr	r3, [pc, #220]	@ (80075e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	2380      	movs	r3, #128	@ 0x80
 800750c:	025b      	lsls	r3, r3, #9
 800750e:	4013      	ands	r3, r2
 8007510:	d01a      	beq.n	8007548 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007514:	61bb      	str	r3, [r7, #24]
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
 800751a:	4a35      	ldr	r2, [pc, #212]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0x144>)
 800751c:	2300      	movs	r3, #0
 800751e:	69b8      	ldr	r0, [r7, #24]
 8007520:	69f9      	ldr	r1, [r7, #28]
 8007522:	f7f9 f81b 	bl	800055c <__aeabi_lmul>
 8007526:	0002      	movs	r2, r0
 8007528:	000b      	movs	r3, r1
 800752a:	0010      	movs	r0, r2
 800752c:	0019      	movs	r1, r3
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	613b      	str	r3, [r7, #16]
 8007532:	2300      	movs	r3, #0
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f7f8 ffef 	bl	800051c <__aeabi_uldivmod>
 800753e:	0002      	movs	r2, r0
 8007540:	000b      	movs	r3, r1
 8007542:	0013      	movs	r3, r2
 8007544:	637b      	str	r3, [r7, #52]	@ 0x34
 8007546:	e037      	b.n	80075b8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007548:	4b26      	ldr	r3, [pc, #152]	@ (80075e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2210      	movs	r2, #16
 800754e:	4013      	ands	r3, r2
 8007550:	d01a      	beq.n	8007588 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8007552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007554:	60bb      	str	r3, [r7, #8]
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	4a23      	ldr	r2, [pc, #140]	@ (80075e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800755c:	2300      	movs	r3, #0
 800755e:	68b8      	ldr	r0, [r7, #8]
 8007560:	68f9      	ldr	r1, [r7, #12]
 8007562:	f7f8 fffb 	bl	800055c <__aeabi_lmul>
 8007566:	0002      	movs	r2, r0
 8007568:	000b      	movs	r3, r1
 800756a:	0010      	movs	r0, r2
 800756c:	0019      	movs	r1, r3
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007570:	603b      	str	r3, [r7, #0]
 8007572:	2300      	movs	r3, #0
 8007574:	607b      	str	r3, [r7, #4]
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f7f8 ffcf 	bl	800051c <__aeabi_uldivmod>
 800757e:	0002      	movs	r2, r0
 8007580:	000b      	movs	r3, r1
 8007582:	0013      	movs	r3, r2
 8007584:	637b      	str	r3, [r7, #52]	@ 0x34
 8007586:	e017      	b.n	80075b8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758a:	0018      	movs	r0, r3
 800758c:	2300      	movs	r3, #0
 800758e:	0019      	movs	r1, r3
 8007590:	4a16      	ldr	r2, [pc, #88]	@ (80075ec <HAL_RCC_GetSysClockFreq+0x140>)
 8007592:	2300      	movs	r3, #0
 8007594:	f7f8 ffe2 	bl	800055c <__aeabi_lmul>
 8007598:	0002      	movs	r2, r0
 800759a:	000b      	movs	r3, r1
 800759c:	0010      	movs	r0, r2
 800759e:	0019      	movs	r1, r3
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	001c      	movs	r4, r3
 80075a4:	2300      	movs	r3, #0
 80075a6:	001d      	movs	r5, r3
 80075a8:	0022      	movs	r2, r4
 80075aa:	002b      	movs	r3, r5
 80075ac:	f7f8 ffb6 	bl	800051c <__aeabi_uldivmod>
 80075b0:	0002      	movs	r2, r0
 80075b2:	000b      	movs	r3, r1
 80075b4:	0013      	movs	r3, r2
 80075b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80075b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80075bc:	e00d      	b.n	80075da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80075be:	4b09      	ldr	r3, [pc, #36]	@ (80075e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	0b5b      	lsrs	r3, r3, #13
 80075c4:	2207      	movs	r2, #7
 80075c6:	4013      	ands	r3, r2
 80075c8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	3301      	adds	r3, #1
 80075ce:	2280      	movs	r2, #128	@ 0x80
 80075d0:	0212      	lsls	r2, r2, #8
 80075d2:	409a      	lsls	r2, r3
 80075d4:	0013      	movs	r3, r2
 80075d6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80075d8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80075dc:	0018      	movs	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	b00e      	add	sp, #56	@ 0x38
 80075e2:	bdb0      	pop	{r4, r5, r7, pc}
 80075e4:	40021000 	.word	0x40021000
 80075e8:	003d0900 	.word	0x003d0900
 80075ec:	00f42400 	.word	0x00f42400
 80075f0:	007a1200 	.word	0x007a1200
 80075f4:	0800dc38 	.word	0x0800dc38

080075f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075fc:	4b02      	ldr	r3, [pc, #8]	@ (8007608 <HAL_RCC_GetHCLKFreq+0x10>)
 80075fe:	681b      	ldr	r3, [r3, #0]
}
 8007600:	0018      	movs	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	46c0      	nop			@ (mov r8, r8)
 8007608:	20000018 	.word	0x20000018

0800760c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007610:	f7ff fff2 	bl	80075f8 <HAL_RCC_GetHCLKFreq>
 8007614:	0001      	movs	r1, r0
 8007616:	4b06      	ldr	r3, [pc, #24]	@ (8007630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	0a1b      	lsrs	r3, r3, #8
 800761c:	2207      	movs	r2, #7
 800761e:	4013      	ands	r3, r2
 8007620:	4a04      	ldr	r2, [pc, #16]	@ (8007634 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007622:	5cd3      	ldrb	r3, [r2, r3]
 8007624:	40d9      	lsrs	r1, r3
 8007626:	000b      	movs	r3, r1
}
 8007628:	0018      	movs	r0, r3
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	46c0      	nop			@ (mov r8, r8)
 8007630:	40021000 	.word	0x40021000
 8007634:	0800dc30 	.word	0x0800dc30

08007638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800763c:	f7ff ffdc 	bl	80075f8 <HAL_RCC_GetHCLKFreq>
 8007640:	0001      	movs	r1, r0
 8007642:	4b06      	ldr	r3, [pc, #24]	@ (800765c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	0adb      	lsrs	r3, r3, #11
 8007648:	2207      	movs	r2, #7
 800764a:	4013      	ands	r3, r2
 800764c:	4a04      	ldr	r2, [pc, #16]	@ (8007660 <HAL_RCC_GetPCLK2Freq+0x28>)
 800764e:	5cd3      	ldrb	r3, [r2, r3]
 8007650:	40d9      	lsrs	r1, r3
 8007652:	000b      	movs	r3, r1
}
 8007654:	0018      	movs	r0, r3
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	46c0      	nop			@ (mov r8, r8)
 800765c:	40021000 	.word	0x40021000
 8007660:	0800dc30 	.word	0x0800dc30

08007664 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800766c:	2017      	movs	r0, #23
 800766e:	183b      	adds	r3, r7, r0
 8007670:	2200      	movs	r2, #0
 8007672:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2220      	movs	r2, #32
 800767a:	4013      	ands	r3, r2
 800767c:	d100      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800767e:	e0c7      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007680:	4b84      	ldr	r3, [pc, #528]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007684:	2380      	movs	r3, #128	@ 0x80
 8007686:	055b      	lsls	r3, r3, #21
 8007688:	4013      	ands	r3, r2
 800768a:	d109      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800768c:	4b81      	ldr	r3, [pc, #516]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800768e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007690:	4b80      	ldr	r3, [pc, #512]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007692:	2180      	movs	r1, #128	@ 0x80
 8007694:	0549      	lsls	r1, r1, #21
 8007696:	430a      	orrs	r2, r1
 8007698:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800769a:	183b      	adds	r3, r7, r0
 800769c:	2201      	movs	r2, #1
 800769e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076a0:	4b7d      	ldr	r3, [pc, #500]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	2380      	movs	r3, #128	@ 0x80
 80076a6:	005b      	lsls	r3, r3, #1
 80076a8:	4013      	ands	r3, r2
 80076aa:	d11a      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076ac:	4b7a      	ldr	r3, [pc, #488]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	4b79      	ldr	r3, [pc, #484]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80076b2:	2180      	movs	r1, #128	@ 0x80
 80076b4:	0049      	lsls	r1, r1, #1
 80076b6:	430a      	orrs	r2, r1
 80076b8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076ba:	f7fe faa7 	bl	8005c0c <HAL_GetTick>
 80076be:	0003      	movs	r3, r0
 80076c0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076c2:	e008      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076c4:	f7fe faa2 	bl	8005c0c <HAL_GetTick>
 80076c8:	0002      	movs	r2, r0
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b64      	cmp	r3, #100	@ 0x64
 80076d0:	d901      	bls.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e0d9      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076d6:	4b70      	ldr	r3, [pc, #448]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	2380      	movs	r3, #128	@ 0x80
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4013      	ands	r3, r2
 80076e0:	d0f0      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80076e2:	4b6c      	ldr	r3, [pc, #432]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	23c0      	movs	r3, #192	@ 0xc0
 80076e8:	039b      	lsls	r3, r3, #14
 80076ea:	4013      	ands	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	23c0      	movs	r3, #192	@ 0xc0
 80076f4:	039b      	lsls	r3, r3, #14
 80076f6:	4013      	ands	r3, r2
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d013      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	23c0      	movs	r3, #192	@ 0xc0
 8007704:	029b      	lsls	r3, r3, #10
 8007706:	401a      	ands	r2, r3
 8007708:	23c0      	movs	r3, #192	@ 0xc0
 800770a:	029b      	lsls	r3, r3, #10
 800770c:	429a      	cmp	r2, r3
 800770e:	d10a      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007710:	4b60      	ldr	r3, [pc, #384]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	2380      	movs	r3, #128	@ 0x80
 8007716:	029b      	lsls	r3, r3, #10
 8007718:	401a      	ands	r2, r3
 800771a:	2380      	movs	r3, #128	@ 0x80
 800771c:	029b      	lsls	r3, r3, #10
 800771e:	429a      	cmp	r2, r3
 8007720:	d101      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e0b1      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8007726:	4b5b      	ldr	r3, [pc, #364]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007728:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800772a:	23c0      	movs	r3, #192	@ 0xc0
 800772c:	029b      	lsls	r3, r3, #10
 800772e:	4013      	ands	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d03b      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	23c0      	movs	r3, #192	@ 0xc0
 800773e:	029b      	lsls	r3, r3, #10
 8007740:	4013      	ands	r3, r2
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	429a      	cmp	r2, r3
 8007746:	d033      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2220      	movs	r2, #32
 800774e:	4013      	ands	r3, r2
 8007750:	d02e      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007752:	4b50      	ldr	r3, [pc, #320]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007756:	4a51      	ldr	r2, [pc, #324]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007758:	4013      	ands	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800775c:	4b4d      	ldr	r3, [pc, #308]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800775e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007760:	4b4c      	ldr	r3, [pc, #304]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007762:	2180      	movs	r1, #128	@ 0x80
 8007764:	0309      	lsls	r1, r1, #12
 8007766:	430a      	orrs	r2, r1
 8007768:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800776a:	4b4a      	ldr	r3, [pc, #296]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800776c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800776e:	4b49      	ldr	r3, [pc, #292]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007770:	494b      	ldr	r1, [pc, #300]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007772:	400a      	ands	r2, r1
 8007774:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8007776:	4b47      	ldr	r3, [pc, #284]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	2380      	movs	r3, #128	@ 0x80
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	4013      	ands	r3, r2
 8007784:	d014      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007786:	f7fe fa41 	bl	8005c0c <HAL_GetTick>
 800778a:	0003      	movs	r3, r0
 800778c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800778e:	e009      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007790:	f7fe fa3c 	bl	8005c0c <HAL_GetTick>
 8007794:	0002      	movs	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	4a42      	ldr	r2, [pc, #264]	@ (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d901      	bls.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e072      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077a4:	4b3b      	ldr	r3, [pc, #236]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80077a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077a8:	2380      	movs	r3, #128	@ 0x80
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4013      	ands	r3, r2
 80077ae:	d0ef      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2220      	movs	r2, #32
 80077b6:	4013      	ands	r3, r2
 80077b8:	d01f      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	23c0      	movs	r3, #192	@ 0xc0
 80077c0:	029b      	lsls	r3, r3, #10
 80077c2:	401a      	ands	r2, r3
 80077c4:	23c0      	movs	r3, #192	@ 0xc0
 80077c6:	029b      	lsls	r3, r3, #10
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d10c      	bne.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80077cc:	4b31      	ldr	r3, [pc, #196]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a35      	ldr	r2, [pc, #212]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80077d2:	4013      	ands	r3, r2
 80077d4:	0019      	movs	r1, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	23c0      	movs	r3, #192	@ 0xc0
 80077dc:	039b      	lsls	r3, r3, #14
 80077de:	401a      	ands	r2, r3
 80077e0:	4b2c      	ldr	r3, [pc, #176]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80077e2:	430a      	orrs	r2, r1
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	4b2b      	ldr	r3, [pc, #172]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80077e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	23c0      	movs	r3, #192	@ 0xc0
 80077f0:	029b      	lsls	r3, r3, #10
 80077f2:	401a      	ands	r2, r3
 80077f4:	4b27      	ldr	r3, [pc, #156]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80077f6:	430a      	orrs	r2, r1
 80077f8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80077fa:	2317      	movs	r3, #23
 80077fc:	18fb      	adds	r3, r7, r3
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d105      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007804:	4b23      	ldr	r3, [pc, #140]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007808:	4b22      	ldr	r3, [pc, #136]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800780a:	4928      	ldr	r1, [pc, #160]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800780c:	400a      	ands	r2, r1
 800780e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2202      	movs	r2, #2
 8007816:	4013      	ands	r3, r2
 8007818:	d009      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800781a:	4b1e      	ldr	r3, [pc, #120]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800781c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800781e:	220c      	movs	r2, #12
 8007820:	4393      	bics	r3, r2
 8007822:	0019      	movs	r1, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	4b1a      	ldr	r3, [pc, #104]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800782a:	430a      	orrs	r2, r1
 800782c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2204      	movs	r2, #4
 8007834:	4013      	ands	r3, r2
 8007836:	d009      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007838:	4b16      	ldr	r3, [pc, #88]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800783a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800783c:	4a1c      	ldr	r2, [pc, #112]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800783e:	4013      	ands	r3, r2
 8007840:	0019      	movs	r1, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	4b13      	ldr	r3, [pc, #76]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007848:	430a      	orrs	r2, r1
 800784a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2208      	movs	r2, #8
 8007852:	4013      	ands	r3, r2
 8007854:	d009      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007856:	4b0f      	ldr	r3, [pc, #60]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800785a:	4a16      	ldr	r2, [pc, #88]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800785c:	4013      	ands	r3, r2
 800785e:	0019      	movs	r1, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	4b0b      	ldr	r3, [pc, #44]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007866:	430a      	orrs	r2, r1
 8007868:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2280      	movs	r2, #128	@ 0x80
 8007870:	4013      	ands	r3, r2
 8007872:	d009      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007874:	4b07      	ldr	r3, [pc, #28]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007878:	4a0f      	ldr	r2, [pc, #60]	@ (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800787a:	4013      	ands	r3, r2
 800787c:	0019      	movs	r1, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	695a      	ldr	r2, [r3, #20]
 8007882:	4b04      	ldr	r3, [pc, #16]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007884:	430a      	orrs	r2, r1
 8007886:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	0018      	movs	r0, r3
 800788c:	46bd      	mov	sp, r7
 800788e:	b006      	add	sp, #24
 8007890:	bd80      	pop	{r7, pc}
 8007892:	46c0      	nop			@ (mov r8, r8)
 8007894:	40021000 	.word	0x40021000
 8007898:	40007000 	.word	0x40007000
 800789c:	fffcffff 	.word	0xfffcffff
 80078a0:	fff7ffff 	.word	0xfff7ffff
 80078a4:	00001388 	.word	0x00001388
 80078a8:	ffcfffff 	.word	0xffcfffff
 80078ac:	efffffff 	.word	0xefffffff
 80078b0:	fffff3ff 	.word	0xfffff3ff
 80078b4:	ffffcfff 	.word	0xffffcfff
 80078b8:	fff3ffff 	.word	0xfff3ffff

080078bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e044      	b.n	8007958 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d107      	bne.n	80078e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2278      	movs	r2, #120	@ 0x78
 80078da:	2100      	movs	r1, #0
 80078dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	0018      	movs	r0, r3
 80078e2:	f7fd ffc9 	bl	8005878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2224      	movs	r2, #36	@ 0x24
 80078ea:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2101      	movs	r1, #1
 80078f8:	438a      	bics	r2, r1
 80078fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	0018      	movs	r0, r3
 8007900:	f000 f8d0 	bl	8007aa4 <UART_SetConfig>
 8007904:	0003      	movs	r3, r0
 8007906:	2b01      	cmp	r3, #1
 8007908:	d101      	bne.n	800790e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e024      	b.n	8007958 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	0018      	movs	r0, r3
 800791a:	f000 fb0d 	bl	8007f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	490d      	ldr	r1, [pc, #52]	@ (8007960 <HAL_UART_Init+0xa4>)
 800792a:	400a      	ands	r2, r1
 800792c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	212a      	movs	r1, #42	@ 0x2a
 800793a:	438a      	bics	r2, r1
 800793c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2101      	movs	r1, #1
 800794a:	430a      	orrs	r2, r1
 800794c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	0018      	movs	r0, r3
 8007952:	f000 fba5 	bl	80080a0 <UART_CheckIdleState>
 8007956:	0003      	movs	r3, r0
}
 8007958:	0018      	movs	r0, r3
 800795a:	46bd      	mov	sp, r7
 800795c:	b002      	add	sp, #8
 800795e:	bd80      	pop	{r7, pc}
 8007960:	ffffb7ff 	.word	0xffffb7ff

08007964 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08a      	sub	sp, #40	@ 0x28
 8007968:	af02      	add	r7, sp, #8
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	603b      	str	r3, [r7, #0]
 8007970:	1dbb      	adds	r3, r7, #6
 8007972:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007978:	2b20      	cmp	r3, #32
 800797a:	d000      	beq.n	800797e <HAL_UART_Transmit+0x1a>
 800797c:	e08c      	b.n	8007a98 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_UART_Transmit+0x28>
 8007984:	1dbb      	adds	r3, r7, #6
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e084      	b.n	8007a9a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	2380      	movs	r3, #128	@ 0x80
 8007996:	015b      	lsls	r3, r3, #5
 8007998:	429a      	cmp	r2, r3
 800799a:	d109      	bne.n	80079b0 <HAL_UART_Transmit+0x4c>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d105      	bne.n	80079b0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2201      	movs	r2, #1
 80079a8:	4013      	ands	r3, r2
 80079aa:	d001      	beq.n	80079b0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e074      	b.n	8007a9a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2284      	movs	r2, #132	@ 0x84
 80079b4:	2100      	movs	r1, #0
 80079b6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2221      	movs	r2, #33	@ 0x21
 80079bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079be:	f7fe f925 	bl	8005c0c <HAL_GetTick>
 80079c2:	0003      	movs	r3, r0
 80079c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1dba      	adds	r2, r7, #6
 80079ca:	2150      	movs	r1, #80	@ 0x50
 80079cc:	8812      	ldrh	r2, [r2, #0]
 80079ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	1dba      	adds	r2, r7, #6
 80079d4:	2152      	movs	r1, #82	@ 0x52
 80079d6:	8812      	ldrh	r2, [r2, #0]
 80079d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	689a      	ldr	r2, [r3, #8]
 80079de:	2380      	movs	r3, #128	@ 0x80
 80079e0:	015b      	lsls	r3, r3, #5
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d108      	bne.n	80079f8 <HAL_UART_Transmit+0x94>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d104      	bne.n	80079f8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	e003      	b.n	8007a00 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a00:	e02f      	b.n	8007a62 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	0013      	movs	r3, r2
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2180      	movs	r1, #128	@ 0x80
 8007a10:	f000 fbee 	bl	80081f0 <UART_WaitOnFlagUntilTimeout>
 8007a14:	1e03      	subs	r3, r0, #0
 8007a16:	d004      	beq.n	8007a22 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e03b      	b.n	8007a9a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10b      	bne.n	8007a40 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	001a      	movs	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	05d2      	lsls	r2, r2, #23
 8007a34:	0dd2      	lsrs	r2, r2, #23
 8007a36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	3302      	adds	r3, #2
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	e007      	b.n	8007a50 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	781a      	ldrb	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2252      	movs	r2, #82	@ 0x52
 8007a54:	5a9b      	ldrh	r3, [r3, r2]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b299      	uxth	r1, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2252      	movs	r2, #82	@ 0x52
 8007a60:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2252      	movs	r2, #82	@ 0x52
 8007a66:	5a9b      	ldrh	r3, [r3, r2]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1c9      	bne.n	8007a02 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	0013      	movs	r3, r2
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2140      	movs	r1, #64	@ 0x40
 8007a7c:	f000 fbb8 	bl	80081f0 <UART_WaitOnFlagUntilTimeout>
 8007a80:	1e03      	subs	r3, r0, #0
 8007a82:	d004      	beq.n	8007a8e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e005      	b.n	8007a9a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2220      	movs	r2, #32
 8007a92:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e000      	b.n	8007a9a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007a98:	2302      	movs	r3, #2
  }
}
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	b008      	add	sp, #32
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007aa4:	b5b0      	push	{r4, r5, r7, lr}
 8007aa6:	b08e      	sub	sp, #56	@ 0x38
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007aac:	231a      	movs	r3, #26
 8007aae:	2218      	movs	r2, #24
 8007ab0:	189b      	adds	r3, r3, r2
 8007ab2:	19db      	adds	r3, r3, r7
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4ab4      	ldr	r2, [pc, #720]	@ (8007da8 <UART_SetConfig+0x304>)
 8007ad8:	4013      	ands	r3, r2
 8007ada:	0019      	movs	r1, r3
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	4aaf      	ldr	r2, [pc, #700]	@ (8007dac <UART_SetConfig+0x308>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	0019      	movs	r1, r3
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4aa9      	ldr	r2, [pc, #676]	@ (8007db0 <UART_SetConfig+0x30c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d004      	beq.n	8007b18 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b14:	4313      	orrs	r3, r2
 8007b16:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	4aa5      	ldr	r2, [pc, #660]	@ (8007db4 <UART_SetConfig+0x310>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	0019      	movs	r1, r3
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4aa1      	ldr	r2, [pc, #644]	@ (8007db8 <UART_SetConfig+0x314>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d131      	bne.n	8007b9c <UART_SetConfig+0xf8>
 8007b38:	4ba0      	ldr	r3, [pc, #640]	@ (8007dbc <UART_SetConfig+0x318>)
 8007b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b3c:	220c      	movs	r2, #12
 8007b3e:	4013      	ands	r3, r2
 8007b40:	2b0c      	cmp	r3, #12
 8007b42:	d01d      	beq.n	8007b80 <UART_SetConfig+0xdc>
 8007b44:	d823      	bhi.n	8007b8e <UART_SetConfig+0xea>
 8007b46:	2b08      	cmp	r3, #8
 8007b48:	d00c      	beq.n	8007b64 <UART_SetConfig+0xc0>
 8007b4a:	d820      	bhi.n	8007b8e <UART_SetConfig+0xea>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <UART_SetConfig+0xb2>
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d00e      	beq.n	8007b72 <UART_SetConfig+0xce>
 8007b54:	e01b      	b.n	8007b8e <UART_SetConfig+0xea>
 8007b56:	231b      	movs	r3, #27
 8007b58:	2218      	movs	r2, #24
 8007b5a:	189b      	adds	r3, r3, r2
 8007b5c:	19db      	adds	r3, r3, r7
 8007b5e:	2200      	movs	r2, #0
 8007b60:	701a      	strb	r2, [r3, #0]
 8007b62:	e065      	b.n	8007c30 <UART_SetConfig+0x18c>
 8007b64:	231b      	movs	r3, #27
 8007b66:	2218      	movs	r2, #24
 8007b68:	189b      	adds	r3, r3, r2
 8007b6a:	19db      	adds	r3, r3, r7
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	701a      	strb	r2, [r3, #0]
 8007b70:	e05e      	b.n	8007c30 <UART_SetConfig+0x18c>
 8007b72:	231b      	movs	r3, #27
 8007b74:	2218      	movs	r2, #24
 8007b76:	189b      	adds	r3, r3, r2
 8007b78:	19db      	adds	r3, r3, r7
 8007b7a:	2204      	movs	r2, #4
 8007b7c:	701a      	strb	r2, [r3, #0]
 8007b7e:	e057      	b.n	8007c30 <UART_SetConfig+0x18c>
 8007b80:	231b      	movs	r3, #27
 8007b82:	2218      	movs	r2, #24
 8007b84:	189b      	adds	r3, r3, r2
 8007b86:	19db      	adds	r3, r3, r7
 8007b88:	2208      	movs	r2, #8
 8007b8a:	701a      	strb	r2, [r3, #0]
 8007b8c:	e050      	b.n	8007c30 <UART_SetConfig+0x18c>
 8007b8e:	231b      	movs	r3, #27
 8007b90:	2218      	movs	r2, #24
 8007b92:	189b      	adds	r3, r3, r2
 8007b94:	19db      	adds	r3, r3, r7
 8007b96:	2210      	movs	r2, #16
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	e049      	b.n	8007c30 <UART_SetConfig+0x18c>
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a83      	ldr	r2, [pc, #524]	@ (8007db0 <UART_SetConfig+0x30c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d13e      	bne.n	8007c24 <UART_SetConfig+0x180>
 8007ba6:	4b85      	ldr	r3, [pc, #532]	@ (8007dbc <UART_SetConfig+0x318>)
 8007ba8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007baa:	23c0      	movs	r3, #192	@ 0xc0
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	4013      	ands	r3, r2
 8007bb0:	22c0      	movs	r2, #192	@ 0xc0
 8007bb2:	0112      	lsls	r2, r2, #4
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d027      	beq.n	8007c08 <UART_SetConfig+0x164>
 8007bb8:	22c0      	movs	r2, #192	@ 0xc0
 8007bba:	0112      	lsls	r2, r2, #4
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d82a      	bhi.n	8007c16 <UART_SetConfig+0x172>
 8007bc0:	2280      	movs	r2, #128	@ 0x80
 8007bc2:	0112      	lsls	r2, r2, #4
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d011      	beq.n	8007bec <UART_SetConfig+0x148>
 8007bc8:	2280      	movs	r2, #128	@ 0x80
 8007bca:	0112      	lsls	r2, r2, #4
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d822      	bhi.n	8007c16 <UART_SetConfig+0x172>
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d004      	beq.n	8007bde <UART_SetConfig+0x13a>
 8007bd4:	2280      	movs	r2, #128	@ 0x80
 8007bd6:	00d2      	lsls	r2, r2, #3
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00e      	beq.n	8007bfa <UART_SetConfig+0x156>
 8007bdc:	e01b      	b.n	8007c16 <UART_SetConfig+0x172>
 8007bde:	231b      	movs	r3, #27
 8007be0:	2218      	movs	r2, #24
 8007be2:	189b      	adds	r3, r3, r2
 8007be4:	19db      	adds	r3, r3, r7
 8007be6:	2200      	movs	r2, #0
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	e021      	b.n	8007c30 <UART_SetConfig+0x18c>
 8007bec:	231b      	movs	r3, #27
 8007bee:	2218      	movs	r2, #24
 8007bf0:	189b      	adds	r3, r3, r2
 8007bf2:	19db      	adds	r3, r3, r7
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	701a      	strb	r2, [r3, #0]
 8007bf8:	e01a      	b.n	8007c30 <UART_SetConfig+0x18c>
 8007bfa:	231b      	movs	r3, #27
 8007bfc:	2218      	movs	r2, #24
 8007bfe:	189b      	adds	r3, r3, r2
 8007c00:	19db      	adds	r3, r3, r7
 8007c02:	2204      	movs	r2, #4
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	e013      	b.n	8007c30 <UART_SetConfig+0x18c>
 8007c08:	231b      	movs	r3, #27
 8007c0a:	2218      	movs	r2, #24
 8007c0c:	189b      	adds	r3, r3, r2
 8007c0e:	19db      	adds	r3, r3, r7
 8007c10:	2208      	movs	r2, #8
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e00c      	b.n	8007c30 <UART_SetConfig+0x18c>
 8007c16:	231b      	movs	r3, #27
 8007c18:	2218      	movs	r2, #24
 8007c1a:	189b      	adds	r3, r3, r2
 8007c1c:	19db      	adds	r3, r3, r7
 8007c1e:	2210      	movs	r2, #16
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	e005      	b.n	8007c30 <UART_SetConfig+0x18c>
 8007c24:	231b      	movs	r3, #27
 8007c26:	2218      	movs	r2, #24
 8007c28:	189b      	adds	r3, r3, r2
 8007c2a:	19db      	adds	r3, r3, r7
 8007c2c:	2210      	movs	r2, #16
 8007c2e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a5e      	ldr	r2, [pc, #376]	@ (8007db0 <UART_SetConfig+0x30c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d000      	beq.n	8007c3c <UART_SetConfig+0x198>
 8007c3a:	e084      	b.n	8007d46 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c3c:	231b      	movs	r3, #27
 8007c3e:	2218      	movs	r2, #24
 8007c40:	189b      	adds	r3, r3, r2
 8007c42:	19db      	adds	r3, r3, r7
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b08      	cmp	r3, #8
 8007c48:	d01d      	beq.n	8007c86 <UART_SetConfig+0x1e2>
 8007c4a:	dc20      	bgt.n	8007c8e <UART_SetConfig+0x1ea>
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d015      	beq.n	8007c7c <UART_SetConfig+0x1d8>
 8007c50:	dc1d      	bgt.n	8007c8e <UART_SetConfig+0x1ea>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <UART_SetConfig+0x1b8>
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d005      	beq.n	8007c66 <UART_SetConfig+0x1c2>
 8007c5a:	e018      	b.n	8007c8e <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c5c:	f7ff fcd6 	bl	800760c <HAL_RCC_GetPCLK1Freq>
 8007c60:	0003      	movs	r3, r0
 8007c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c64:	e01c      	b.n	8007ca0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c66:	4b55      	ldr	r3, [pc, #340]	@ (8007dbc <UART_SetConfig+0x318>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2210      	movs	r2, #16
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	d002      	beq.n	8007c76 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007c70:	4b53      	ldr	r3, [pc, #332]	@ (8007dc0 <UART_SetConfig+0x31c>)
 8007c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c74:	e014      	b.n	8007ca0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8007c76:	4b53      	ldr	r3, [pc, #332]	@ (8007dc4 <UART_SetConfig+0x320>)
 8007c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c7a:	e011      	b.n	8007ca0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c7c:	f7ff fc16 	bl	80074ac <HAL_RCC_GetSysClockFreq>
 8007c80:	0003      	movs	r3, r0
 8007c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c84:	e00c      	b.n	8007ca0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c86:	2380      	movs	r3, #128	@ 0x80
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c8c:	e008      	b.n	8007ca0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007c92:	231a      	movs	r3, #26
 8007c94:	2218      	movs	r2, #24
 8007c96:	189b      	adds	r3, r3, r2
 8007c98:	19db      	adds	r3, r3, r7
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	701a      	strb	r2, [r3, #0]
        break;
 8007c9e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d100      	bne.n	8007ca8 <UART_SetConfig+0x204>
 8007ca6:	e12f      	b.n	8007f08 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	0013      	movs	r3, r2
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	189b      	adds	r3, r3, r2
 8007cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d305      	bcc.n	8007cc4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d906      	bls.n	8007cd2 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8007cc4:	231a      	movs	r3, #26
 8007cc6:	2218      	movs	r2, #24
 8007cc8:	189b      	adds	r3, r3, r2
 8007cca:	19db      	adds	r3, r3, r7
 8007ccc:	2201      	movs	r2, #1
 8007cce:	701a      	strb	r2, [r3, #0]
 8007cd0:	e11a      	b.n	8007f08 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd4:	613b      	str	r3, [r7, #16]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	6939      	ldr	r1, [r7, #16]
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	000b      	movs	r3, r1
 8007ce0:	0e1b      	lsrs	r3, r3, #24
 8007ce2:	0010      	movs	r0, r2
 8007ce4:	0205      	lsls	r5, r0, #8
 8007ce6:	431d      	orrs	r5, r3
 8007ce8:	000b      	movs	r3, r1
 8007cea:	021c      	lsls	r4, r3, #8
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	085b      	lsrs	r3, r3, #1
 8007cf2:	60bb      	str	r3, [r7, #8]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	68b8      	ldr	r0, [r7, #8]
 8007cfa:	68f9      	ldr	r1, [r7, #12]
 8007cfc:	1900      	adds	r0, r0, r4
 8007cfe:	4169      	adcs	r1, r5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	603b      	str	r3, [r7, #0]
 8007d06:	2300      	movs	r3, #0
 8007d08:	607b      	str	r3, [r7, #4]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f7f8 fc05 	bl	800051c <__aeabi_uldivmod>
 8007d12:	0002      	movs	r2, r0
 8007d14:	000b      	movs	r3, r1
 8007d16:	0013      	movs	r3, r2
 8007d18:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d1c:	23c0      	movs	r3, #192	@ 0xc0
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d309      	bcc.n	8007d38 <UART_SetConfig+0x294>
 8007d24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d26:	2380      	movs	r3, #128	@ 0x80
 8007d28:	035b      	lsls	r3, r3, #13
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d204      	bcs.n	8007d38 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d34:	60da      	str	r2, [r3, #12]
 8007d36:	e0e7      	b.n	8007f08 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8007d38:	231a      	movs	r3, #26
 8007d3a:	2218      	movs	r2, #24
 8007d3c:	189b      	adds	r3, r3, r2
 8007d3e:	19db      	adds	r3, r3, r7
 8007d40:	2201      	movs	r2, #1
 8007d42:	701a      	strb	r2, [r3, #0]
 8007d44:	e0e0      	b.n	8007f08 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	69da      	ldr	r2, [r3, #28]
 8007d4a:	2380      	movs	r3, #128	@ 0x80
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d000      	beq.n	8007d54 <UART_SetConfig+0x2b0>
 8007d52:	e082      	b.n	8007e5a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8007d54:	231b      	movs	r3, #27
 8007d56:	2218      	movs	r2, #24
 8007d58:	189b      	adds	r3, r3, r2
 8007d5a:	19db      	adds	r3, r3, r7
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b08      	cmp	r3, #8
 8007d60:	d834      	bhi.n	8007dcc <UART_SetConfig+0x328>
 8007d62:	009a      	lsls	r2, r3, #2
 8007d64:	4b18      	ldr	r3, [pc, #96]	@ (8007dc8 <UART_SetConfig+0x324>)
 8007d66:	18d3      	adds	r3, r2, r3
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d6c:	f7ff fc4e 	bl	800760c <HAL_RCC_GetPCLK1Freq>
 8007d70:	0003      	movs	r3, r0
 8007d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d74:	e033      	b.n	8007dde <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d76:	f7ff fc5f 	bl	8007638 <HAL_RCC_GetPCLK2Freq>
 8007d7a:	0003      	movs	r3, r0
 8007d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d7e:	e02e      	b.n	8007dde <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d80:	4b0e      	ldr	r3, [pc, #56]	@ (8007dbc <UART_SetConfig+0x318>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2210      	movs	r2, #16
 8007d86:	4013      	ands	r3, r2
 8007d88:	d002      	beq.n	8007d90 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc0 <UART_SetConfig+0x31c>)
 8007d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d8e:	e026      	b.n	8007dde <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8007d90:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc4 <UART_SetConfig+0x320>)
 8007d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d94:	e023      	b.n	8007dde <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d96:	f7ff fb89 	bl	80074ac <HAL_RCC_GetSysClockFreq>
 8007d9a:	0003      	movs	r3, r0
 8007d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d9e:	e01e      	b.n	8007dde <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007da0:	2380      	movs	r3, #128	@ 0x80
 8007da2:	021b      	lsls	r3, r3, #8
 8007da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007da6:	e01a      	b.n	8007dde <UART_SetConfig+0x33a>
 8007da8:	efff69f3 	.word	0xefff69f3
 8007dac:	ffffcfff 	.word	0xffffcfff
 8007db0:	40004800 	.word	0x40004800
 8007db4:	fffff4ff 	.word	0xfffff4ff
 8007db8:	40004400 	.word	0x40004400
 8007dbc:	40021000 	.word	0x40021000
 8007dc0:	003d0900 	.word	0x003d0900
 8007dc4:	00f42400 	.word	0x00f42400
 8007dc8:	0800dc44 	.word	0x0800dc44
      default:
        pclk = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007dd0:	231a      	movs	r3, #26
 8007dd2:	2218      	movs	r2, #24
 8007dd4:	189b      	adds	r3, r3, r2
 8007dd6:	19db      	adds	r3, r3, r7
 8007dd8:	2201      	movs	r2, #1
 8007dda:	701a      	strb	r2, [r3, #0]
        break;
 8007ddc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d100      	bne.n	8007de6 <UART_SetConfig+0x342>
 8007de4:	e090      	b.n	8007f08 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de8:	005a      	lsls	r2, r3, #1
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	085b      	lsrs	r3, r3, #1
 8007df0:	18d2      	adds	r2, r2, r3
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	0019      	movs	r1, r3
 8007df8:	0010      	movs	r0, r2
 8007dfa:	f7f8 f9a1 	bl	8000140 <__udivsi3>
 8007dfe:	0003      	movs	r3, r0
 8007e00:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e04:	2b0f      	cmp	r3, #15
 8007e06:	d921      	bls.n	8007e4c <UART_SetConfig+0x3a8>
 8007e08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e0a:	2380      	movs	r3, #128	@ 0x80
 8007e0c:	025b      	lsls	r3, r3, #9
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d21c      	bcs.n	8007e4c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	200e      	movs	r0, #14
 8007e18:	2418      	movs	r4, #24
 8007e1a:	1903      	adds	r3, r0, r4
 8007e1c:	19db      	adds	r3, r3, r7
 8007e1e:	210f      	movs	r1, #15
 8007e20:	438a      	bics	r2, r1
 8007e22:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2207      	movs	r2, #7
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	b299      	uxth	r1, r3
 8007e30:	1903      	adds	r3, r0, r4
 8007e32:	19db      	adds	r3, r3, r7
 8007e34:	1902      	adds	r2, r0, r4
 8007e36:	19d2      	adds	r2, r2, r7
 8007e38:	8812      	ldrh	r2, [r2, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	1902      	adds	r2, r0, r4
 8007e44:	19d2      	adds	r2, r2, r7
 8007e46:	8812      	ldrh	r2, [r2, #0]
 8007e48:	60da      	str	r2, [r3, #12]
 8007e4a:	e05d      	b.n	8007f08 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8007e4c:	231a      	movs	r3, #26
 8007e4e:	2218      	movs	r2, #24
 8007e50:	189b      	adds	r3, r3, r2
 8007e52:	19db      	adds	r3, r3, r7
 8007e54:	2201      	movs	r2, #1
 8007e56:	701a      	strb	r2, [r3, #0]
 8007e58:	e056      	b.n	8007f08 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e5a:	231b      	movs	r3, #27
 8007e5c:	2218      	movs	r2, #24
 8007e5e:	189b      	adds	r3, r3, r2
 8007e60:	19db      	adds	r3, r3, r7
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d822      	bhi.n	8007eae <UART_SetConfig+0x40a>
 8007e68:	009a      	lsls	r2, r3, #2
 8007e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007f28 <UART_SetConfig+0x484>)
 8007e6c:	18d3      	adds	r3, r2, r3
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e72:	f7ff fbcb 	bl	800760c <HAL_RCC_GetPCLK1Freq>
 8007e76:	0003      	movs	r3, r0
 8007e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007e7a:	e021      	b.n	8007ec0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e7c:	f7ff fbdc 	bl	8007638 <HAL_RCC_GetPCLK2Freq>
 8007e80:	0003      	movs	r3, r0
 8007e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007e84:	e01c      	b.n	8007ec0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e86:	4b29      	ldr	r3, [pc, #164]	@ (8007f2c <UART_SetConfig+0x488>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2210      	movs	r2, #16
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	d002      	beq.n	8007e96 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007e90:	4b27      	ldr	r3, [pc, #156]	@ (8007f30 <UART_SetConfig+0x48c>)
 8007e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e94:	e014      	b.n	8007ec0 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8007e96:	4b27      	ldr	r3, [pc, #156]	@ (8007f34 <UART_SetConfig+0x490>)
 8007e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007e9a:	e011      	b.n	8007ec0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e9c:	f7ff fb06 	bl	80074ac <HAL_RCC_GetSysClockFreq>
 8007ea0:	0003      	movs	r3, r0
 8007ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007ea4:	e00c      	b.n	8007ec0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ea6:	2380      	movs	r3, #128	@ 0x80
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007eac:	e008      	b.n	8007ec0 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007eb2:	231a      	movs	r3, #26
 8007eb4:	2218      	movs	r2, #24
 8007eb6:	189b      	adds	r3, r3, r2
 8007eb8:	19db      	adds	r3, r3, r7
 8007eba:	2201      	movs	r2, #1
 8007ebc:	701a      	strb	r2, [r3, #0]
        break;
 8007ebe:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d020      	beq.n	8007f08 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	085a      	lsrs	r2, r3, #1
 8007ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ece:	18d2      	adds	r2, r2, r3
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	0019      	movs	r1, r3
 8007ed6:	0010      	movs	r0, r2
 8007ed8:	f7f8 f932 	bl	8000140 <__udivsi3>
 8007edc:	0003      	movs	r3, r0
 8007ede:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee2:	2b0f      	cmp	r3, #15
 8007ee4:	d90a      	bls.n	8007efc <UART_SetConfig+0x458>
 8007ee6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ee8:	2380      	movs	r3, #128	@ 0x80
 8007eea:	025b      	lsls	r3, r3, #9
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d205      	bcs.n	8007efc <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	60da      	str	r2, [r3, #12]
 8007efa:	e005      	b.n	8007f08 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8007efc:	231a      	movs	r3, #26
 8007efe:	2218      	movs	r2, #24
 8007f00:	189b      	adds	r3, r3, r2
 8007f02:	19db      	adds	r3, r3, r7
 8007f04:	2201      	movs	r2, #1
 8007f06:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	2200      	movs	r2, #0
 8007f12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007f14:	231a      	movs	r3, #26
 8007f16:	2218      	movs	r2, #24
 8007f18:	189b      	adds	r3, r3, r2
 8007f1a:	19db      	adds	r3, r3, r7
 8007f1c:	781b      	ldrb	r3, [r3, #0]
}
 8007f1e:	0018      	movs	r0, r3
 8007f20:	46bd      	mov	sp, r7
 8007f22:	b00e      	add	sp, #56	@ 0x38
 8007f24:	bdb0      	pop	{r4, r5, r7, pc}
 8007f26:	46c0      	nop			@ (mov r8, r8)
 8007f28:	0800dc68 	.word	0x0800dc68
 8007f2c:	40021000 	.word	0x40021000
 8007f30:	003d0900 	.word	0x003d0900
 8007f34:	00f42400 	.word	0x00f42400

08007f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f44:	2201      	movs	r2, #1
 8007f46:	4013      	ands	r3, r2
 8007f48:	d00b      	beq.n	8007f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4a4a      	ldr	r2, [pc, #296]	@ (800807c <UART_AdvFeatureConfig+0x144>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	0019      	movs	r1, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f66:	2202      	movs	r2, #2
 8007f68:	4013      	ands	r3, r2
 8007f6a:	d00b      	beq.n	8007f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	4a43      	ldr	r2, [pc, #268]	@ (8008080 <UART_AdvFeatureConfig+0x148>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	0019      	movs	r1, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f88:	2204      	movs	r2, #4
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	d00b      	beq.n	8007fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	4a3b      	ldr	r2, [pc, #236]	@ (8008084 <UART_AdvFeatureConfig+0x14c>)
 8007f96:	4013      	ands	r3, r2
 8007f98:	0019      	movs	r1, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007faa:	2208      	movs	r2, #8
 8007fac:	4013      	ands	r3, r2
 8007fae:	d00b      	beq.n	8007fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	4a34      	ldr	r2, [pc, #208]	@ (8008088 <UART_AdvFeatureConfig+0x150>)
 8007fb8:	4013      	ands	r3, r2
 8007fba:	0019      	movs	r1, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fcc:	2210      	movs	r2, #16
 8007fce:	4013      	ands	r3, r2
 8007fd0:	d00b      	beq.n	8007fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800808c <UART_AdvFeatureConfig+0x154>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	0019      	movs	r1, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fee:	2220      	movs	r2, #32
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	d00b      	beq.n	800800c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	4a25      	ldr	r2, [pc, #148]	@ (8008090 <UART_AdvFeatureConfig+0x158>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	0019      	movs	r1, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008010:	2240      	movs	r2, #64	@ 0x40
 8008012:	4013      	ands	r3, r2
 8008014:	d01d      	beq.n	8008052 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	4a1d      	ldr	r2, [pc, #116]	@ (8008094 <UART_AdvFeatureConfig+0x15c>)
 800801e:	4013      	ands	r3, r2
 8008020:	0019      	movs	r1, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008032:	2380      	movs	r3, #128	@ 0x80
 8008034:	035b      	lsls	r3, r3, #13
 8008036:	429a      	cmp	r2, r3
 8008038:	d10b      	bne.n	8008052 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	4a15      	ldr	r2, [pc, #84]	@ (8008098 <UART_AdvFeatureConfig+0x160>)
 8008042:	4013      	ands	r3, r2
 8008044:	0019      	movs	r1, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008056:	2280      	movs	r2, #128	@ 0x80
 8008058:	4013      	ands	r3, r2
 800805a:	d00b      	beq.n	8008074 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	4a0e      	ldr	r2, [pc, #56]	@ (800809c <UART_AdvFeatureConfig+0x164>)
 8008064:	4013      	ands	r3, r2
 8008066:	0019      	movs	r1, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	605a      	str	r2, [r3, #4]
  }
}
 8008074:	46c0      	nop			@ (mov r8, r8)
 8008076:	46bd      	mov	sp, r7
 8008078:	b002      	add	sp, #8
 800807a:	bd80      	pop	{r7, pc}
 800807c:	fffdffff 	.word	0xfffdffff
 8008080:	fffeffff 	.word	0xfffeffff
 8008084:	fffbffff 	.word	0xfffbffff
 8008088:	ffff7fff 	.word	0xffff7fff
 800808c:	ffffefff 	.word	0xffffefff
 8008090:	ffffdfff 	.word	0xffffdfff
 8008094:	ffefffff 	.word	0xffefffff
 8008098:	ff9fffff 	.word	0xff9fffff
 800809c:	fff7ffff 	.word	0xfff7ffff

080080a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b092      	sub	sp, #72	@ 0x48
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2284      	movs	r2, #132	@ 0x84
 80080ac:	2100      	movs	r1, #0
 80080ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080b0:	f7fd fdac 	bl	8005c0c <HAL_GetTick>
 80080b4:	0003      	movs	r3, r0
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2208      	movs	r2, #8
 80080c0:	4013      	ands	r3, r2
 80080c2:	2b08      	cmp	r3, #8
 80080c4:	d12c      	bne.n	8008120 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c8:	2280      	movs	r2, #128	@ 0x80
 80080ca:	0391      	lsls	r1, r2, #14
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	4a46      	ldr	r2, [pc, #280]	@ (80081e8 <UART_CheckIdleState+0x148>)
 80080d0:	9200      	str	r2, [sp, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f000 f88c 	bl	80081f0 <UART_WaitOnFlagUntilTimeout>
 80080d8:	1e03      	subs	r3, r0, #0
 80080da:	d021      	beq.n	8008120 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080dc:	f3ef 8310 	mrs	r3, PRIMASK
 80080e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80080e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080e6:	2301      	movs	r3, #1
 80080e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ec:	f383 8810 	msr	PRIMASK, r3
}
 80080f0:	46c0      	nop			@ (mov r8, r8)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2180      	movs	r1, #128	@ 0x80
 80080fe:	438a      	bics	r2, r1
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008108:	f383 8810 	msr	PRIMASK, r3
}
 800810c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2220      	movs	r2, #32
 8008112:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2278      	movs	r2, #120	@ 0x78
 8008118:	2100      	movs	r1, #0
 800811a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e05f      	b.n	80081e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2204      	movs	r2, #4
 8008128:	4013      	ands	r3, r2
 800812a:	2b04      	cmp	r3, #4
 800812c:	d146      	bne.n	80081bc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800812e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008130:	2280      	movs	r2, #128	@ 0x80
 8008132:	03d1      	lsls	r1, r2, #15
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	4a2c      	ldr	r2, [pc, #176]	@ (80081e8 <UART_CheckIdleState+0x148>)
 8008138:	9200      	str	r2, [sp, #0]
 800813a:	2200      	movs	r2, #0
 800813c:	f000 f858 	bl	80081f0 <UART_WaitOnFlagUntilTimeout>
 8008140:	1e03      	subs	r3, r0, #0
 8008142:	d03b      	beq.n	80081bc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008144:	f3ef 8310 	mrs	r3, PRIMASK
 8008148:	60fb      	str	r3, [r7, #12]
  return(result);
 800814a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800814c:	637b      	str	r3, [r7, #52]	@ 0x34
 800814e:	2301      	movs	r3, #1
 8008150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f383 8810 	msr	PRIMASK, r3
}
 8008158:	46c0      	nop			@ (mov r8, r8)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4921      	ldr	r1, [pc, #132]	@ (80081ec <UART_CheckIdleState+0x14c>)
 8008166:	400a      	ands	r2, r1
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f383 8810 	msr	PRIMASK, r3
}
 8008174:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008176:	f3ef 8310 	mrs	r3, PRIMASK
 800817a:	61bb      	str	r3, [r7, #24]
  return(result);
 800817c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008180:	2301      	movs	r3, #1
 8008182:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	f383 8810 	msr	PRIMASK, r3
}
 800818a:	46c0      	nop			@ (mov r8, r8)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2101      	movs	r1, #1
 8008198:	438a      	bics	r2, r1
 800819a:	609a      	str	r2, [r3, #8]
 800819c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	f383 8810 	msr	PRIMASK, r3
}
 80081a6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2280      	movs	r2, #128	@ 0x80
 80081ac:	2120      	movs	r1, #32
 80081ae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2278      	movs	r2, #120	@ 0x78
 80081b4:	2100      	movs	r1, #0
 80081b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e011      	b.n	80081e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2220      	movs	r2, #32
 80081c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2280      	movs	r2, #128	@ 0x80
 80081c6:	2120      	movs	r1, #32
 80081c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2278      	movs	r2, #120	@ 0x78
 80081da:	2100      	movs	r1, #0
 80081dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	0018      	movs	r0, r3
 80081e2:	46bd      	mov	sp, r7
 80081e4:	b010      	add	sp, #64	@ 0x40
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	01ffffff 	.word	0x01ffffff
 80081ec:	fffffedf 	.word	0xfffffedf

080081f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	603b      	str	r3, [r7, #0]
 80081fc:	1dfb      	adds	r3, r7, #7
 80081fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008200:	e04b      	b.n	800829a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	3301      	adds	r3, #1
 8008206:	d048      	beq.n	800829a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008208:	f7fd fd00 	bl	8005c0c <HAL_GetTick>
 800820c:	0002      	movs	r2, r0
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	429a      	cmp	r2, r3
 8008216:	d302      	bcc.n	800821e <UART_WaitOnFlagUntilTimeout+0x2e>
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e04b      	b.n	80082ba <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2204      	movs	r2, #4
 800822a:	4013      	ands	r3, r2
 800822c:	d035      	beq.n	800829a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	2208      	movs	r2, #8
 8008236:	4013      	ands	r3, r2
 8008238:	2b08      	cmp	r3, #8
 800823a:	d111      	bne.n	8008260 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2208      	movs	r2, #8
 8008242:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	0018      	movs	r0, r3
 8008248:	f000 f83c 	bl	80082c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2284      	movs	r2, #132	@ 0x84
 8008250:	2108      	movs	r1, #8
 8008252:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2278      	movs	r2, #120	@ 0x78
 8008258:	2100      	movs	r1, #0
 800825a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e02c      	b.n	80082ba <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	69da      	ldr	r2, [r3, #28]
 8008266:	2380      	movs	r3, #128	@ 0x80
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	401a      	ands	r2, r3
 800826c:	2380      	movs	r3, #128	@ 0x80
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	429a      	cmp	r2, r3
 8008272:	d112      	bne.n	800829a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2280      	movs	r2, #128	@ 0x80
 800827a:	0112      	lsls	r2, r2, #4
 800827c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	0018      	movs	r0, r3
 8008282:	f000 f81f 	bl	80082c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2284      	movs	r2, #132	@ 0x84
 800828a:	2120      	movs	r1, #32
 800828c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2278      	movs	r2, #120	@ 0x78
 8008292:	2100      	movs	r1, #0
 8008294:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e00f      	b.n	80082ba <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	4013      	ands	r3, r2
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	425a      	negs	r2, r3
 80082aa:	4153      	adcs	r3, r2
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	001a      	movs	r2, r3
 80082b0:	1dfb      	adds	r3, r7, #7
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d0a4      	beq.n	8008202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	0018      	movs	r0, r3
 80082bc:	46bd      	mov	sp, r7
 80082be:	b004      	add	sp, #16
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08e      	sub	sp, #56	@ 0x38
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082cc:	f3ef 8310 	mrs	r3, PRIMASK
 80082d0:	617b      	str	r3, [r7, #20]
  return(result);
 80082d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d6:	2301      	movs	r3, #1
 80082d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	f383 8810 	msr	PRIMASK, r3
}
 80082e0:	46c0      	nop			@ (mov r8, r8)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4926      	ldr	r1, [pc, #152]	@ (8008388 <UART_EndRxTransfer+0xc4>)
 80082ee:	400a      	ands	r2, r1
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	f383 8810 	msr	PRIMASK, r3
}
 80082fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008302:	623b      	str	r3, [r7, #32]
  return(result);
 8008304:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008306:	633b      	str	r3, [r7, #48]	@ 0x30
 8008308:	2301      	movs	r3, #1
 800830a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800830c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830e:	f383 8810 	msr	PRIMASK, r3
}
 8008312:	46c0      	nop			@ (mov r8, r8)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689a      	ldr	r2, [r3, #8]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2101      	movs	r1, #1
 8008320:	438a      	bics	r2, r1
 8008322:	609a      	str	r2, [r3, #8]
 8008324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008326:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832a:	f383 8810 	msr	PRIMASK, r3
}
 800832e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008334:	2b01      	cmp	r3, #1
 8008336:	d118      	bne.n	800836a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008338:	f3ef 8310 	mrs	r3, PRIMASK
 800833c:	60bb      	str	r3, [r7, #8]
  return(result);
 800833e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008342:	2301      	movs	r3, #1
 8008344:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f383 8810 	msr	PRIMASK, r3
}
 800834c:	46c0      	nop			@ (mov r8, r8)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2110      	movs	r1, #16
 800835a:	438a      	bics	r2, r1
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f383 8810 	msr	PRIMASK, r3
}
 8008368:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2280      	movs	r2, #128	@ 0x80
 800836e:	2120      	movs	r1, #32
 8008370:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800837e:	46c0      	nop			@ (mov r8, r8)
 8008380:	46bd      	mov	sp, r7
 8008382:	b00e      	add	sp, #56	@ 0x38
 8008384:	bd80      	pop	{r7, pc}
 8008386:	46c0      	nop			@ (mov r8, r8)
 8008388:	fffffedf 	.word	0xfffffedf

0800838c <__cvt>:
 800838c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838e:	001f      	movs	r7, r3
 8008390:	2300      	movs	r3, #0
 8008392:	0016      	movs	r6, r2
 8008394:	b08b      	sub	sp, #44	@ 0x2c
 8008396:	429f      	cmp	r7, r3
 8008398:	da04      	bge.n	80083a4 <__cvt+0x18>
 800839a:	2180      	movs	r1, #128	@ 0x80
 800839c:	0609      	lsls	r1, r1, #24
 800839e:	187b      	adds	r3, r7, r1
 80083a0:	001f      	movs	r7, r3
 80083a2:	232d      	movs	r3, #45	@ 0x2d
 80083a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80083a6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80083a8:	7013      	strb	r3, [r2, #0]
 80083aa:	2320      	movs	r3, #32
 80083ac:	2203      	movs	r2, #3
 80083ae:	439d      	bics	r5, r3
 80083b0:	2d46      	cmp	r5, #70	@ 0x46
 80083b2:	d007      	beq.n	80083c4 <__cvt+0x38>
 80083b4:	002b      	movs	r3, r5
 80083b6:	3b45      	subs	r3, #69	@ 0x45
 80083b8:	4259      	negs	r1, r3
 80083ba:	414b      	adcs	r3, r1
 80083bc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80083be:	3a01      	subs	r2, #1
 80083c0:	18cb      	adds	r3, r1, r3
 80083c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80083c4:	ab09      	add	r3, sp, #36	@ 0x24
 80083c6:	9304      	str	r3, [sp, #16]
 80083c8:	ab08      	add	r3, sp, #32
 80083ca:	9303      	str	r3, [sp, #12]
 80083cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083ce:	9200      	str	r2, [sp, #0]
 80083d0:	9302      	str	r3, [sp, #8]
 80083d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083d4:	0032      	movs	r2, r6
 80083d6:	9301      	str	r3, [sp, #4]
 80083d8:	003b      	movs	r3, r7
 80083da:	f001 f89b 	bl	8009514 <_dtoa_r>
 80083de:	0004      	movs	r4, r0
 80083e0:	2d47      	cmp	r5, #71	@ 0x47
 80083e2:	d11b      	bne.n	800841c <__cvt+0x90>
 80083e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80083e6:	07db      	lsls	r3, r3, #31
 80083e8:	d511      	bpl.n	800840e <__cvt+0x82>
 80083ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083ec:	18c3      	adds	r3, r0, r3
 80083ee:	9307      	str	r3, [sp, #28]
 80083f0:	2200      	movs	r2, #0
 80083f2:	2300      	movs	r3, #0
 80083f4:	0030      	movs	r0, r6
 80083f6:	0039      	movs	r1, r7
 80083f8:	f7f8 f828 	bl	800044c <__aeabi_dcmpeq>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d001      	beq.n	8008404 <__cvt+0x78>
 8008400:	9b07      	ldr	r3, [sp, #28]
 8008402:	9309      	str	r3, [sp, #36]	@ 0x24
 8008404:	2230      	movs	r2, #48	@ 0x30
 8008406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008408:	9907      	ldr	r1, [sp, #28]
 800840a:	428b      	cmp	r3, r1
 800840c:	d320      	bcc.n	8008450 <__cvt+0xc4>
 800840e:	0020      	movs	r0, r4
 8008410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008412:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008414:	1b1b      	subs	r3, r3, r4
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	b00b      	add	sp, #44	@ 0x2c
 800841a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800841c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800841e:	18c3      	adds	r3, r0, r3
 8008420:	9307      	str	r3, [sp, #28]
 8008422:	2d46      	cmp	r5, #70	@ 0x46
 8008424:	d1e4      	bne.n	80083f0 <__cvt+0x64>
 8008426:	7803      	ldrb	r3, [r0, #0]
 8008428:	2b30      	cmp	r3, #48	@ 0x30
 800842a:	d10c      	bne.n	8008446 <__cvt+0xba>
 800842c:	2200      	movs	r2, #0
 800842e:	2300      	movs	r3, #0
 8008430:	0030      	movs	r0, r6
 8008432:	0039      	movs	r1, r7
 8008434:	f7f8 f80a 	bl	800044c <__aeabi_dcmpeq>
 8008438:	2800      	cmp	r0, #0
 800843a:	d104      	bne.n	8008446 <__cvt+0xba>
 800843c:	2301      	movs	r3, #1
 800843e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008440:	1a9b      	subs	r3, r3, r2
 8008442:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008448:	9a07      	ldr	r2, [sp, #28]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	18d3      	adds	r3, r2, r3
 800844e:	e7ce      	b.n	80083ee <__cvt+0x62>
 8008450:	1c59      	adds	r1, r3, #1
 8008452:	9109      	str	r1, [sp, #36]	@ 0x24
 8008454:	701a      	strb	r2, [r3, #0]
 8008456:	e7d6      	b.n	8008406 <__cvt+0x7a>

08008458 <__exponent>:
 8008458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800845a:	232b      	movs	r3, #43	@ 0x2b
 800845c:	0005      	movs	r5, r0
 800845e:	000c      	movs	r4, r1
 8008460:	b085      	sub	sp, #20
 8008462:	7002      	strb	r2, [r0, #0]
 8008464:	2900      	cmp	r1, #0
 8008466:	da01      	bge.n	800846c <__exponent+0x14>
 8008468:	424c      	negs	r4, r1
 800846a:	3302      	adds	r3, #2
 800846c:	706b      	strb	r3, [r5, #1]
 800846e:	2c09      	cmp	r4, #9
 8008470:	dd2c      	ble.n	80084cc <__exponent+0x74>
 8008472:	ab02      	add	r3, sp, #8
 8008474:	1dde      	adds	r6, r3, #7
 8008476:	0020      	movs	r0, r4
 8008478:	210a      	movs	r1, #10
 800847a:	f7f7 ffd1 	bl	8000420 <__aeabi_idivmod>
 800847e:	0037      	movs	r7, r6
 8008480:	3130      	adds	r1, #48	@ 0x30
 8008482:	3e01      	subs	r6, #1
 8008484:	0020      	movs	r0, r4
 8008486:	7031      	strb	r1, [r6, #0]
 8008488:	210a      	movs	r1, #10
 800848a:	9401      	str	r4, [sp, #4]
 800848c:	f7f7 fee2 	bl	8000254 <__divsi3>
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	0004      	movs	r4, r0
 8008494:	2b63      	cmp	r3, #99	@ 0x63
 8008496:	dcee      	bgt.n	8008476 <__exponent+0x1e>
 8008498:	1eba      	subs	r2, r7, #2
 800849a:	1ca8      	adds	r0, r5, #2
 800849c:	0001      	movs	r1, r0
 800849e:	0013      	movs	r3, r2
 80084a0:	3430      	adds	r4, #48	@ 0x30
 80084a2:	7014      	strb	r4, [r2, #0]
 80084a4:	ac02      	add	r4, sp, #8
 80084a6:	3407      	adds	r4, #7
 80084a8:	429c      	cmp	r4, r3
 80084aa:	d80a      	bhi.n	80084c2 <__exponent+0x6a>
 80084ac:	2300      	movs	r3, #0
 80084ae:	42a2      	cmp	r2, r4
 80084b0:	d803      	bhi.n	80084ba <__exponent+0x62>
 80084b2:	3309      	adds	r3, #9
 80084b4:	aa02      	add	r2, sp, #8
 80084b6:	189b      	adds	r3, r3, r2
 80084b8:	1bdb      	subs	r3, r3, r7
 80084ba:	18c0      	adds	r0, r0, r3
 80084bc:	1b40      	subs	r0, r0, r5
 80084be:	b005      	add	sp, #20
 80084c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c2:	781c      	ldrb	r4, [r3, #0]
 80084c4:	3301      	adds	r3, #1
 80084c6:	700c      	strb	r4, [r1, #0]
 80084c8:	3101      	adds	r1, #1
 80084ca:	e7eb      	b.n	80084a4 <__exponent+0x4c>
 80084cc:	2330      	movs	r3, #48	@ 0x30
 80084ce:	18e4      	adds	r4, r4, r3
 80084d0:	70ab      	strb	r3, [r5, #2]
 80084d2:	1d28      	adds	r0, r5, #4
 80084d4:	70ec      	strb	r4, [r5, #3]
 80084d6:	e7f1      	b.n	80084bc <__exponent+0x64>

080084d8 <_printf_float>:
 80084d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084da:	b097      	sub	sp, #92	@ 0x5c
 80084dc:	000d      	movs	r5, r1
 80084de:	920a      	str	r2, [sp, #40]	@ 0x28
 80084e0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80084e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80084e6:	f000 fef9 	bl	80092dc <_localeconv_r>
 80084ea:	6803      	ldr	r3, [r0, #0]
 80084ec:	0018      	movs	r0, r3
 80084ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80084f0:	f7f7 fe0a 	bl	8000108 <strlen>
 80084f4:	2300      	movs	r3, #0
 80084f6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80084f8:	9314      	str	r3, [sp, #80]	@ 0x50
 80084fa:	7e2b      	ldrb	r3, [r5, #24]
 80084fc:	2207      	movs	r2, #7
 80084fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8008500:	682b      	ldr	r3, [r5, #0]
 8008502:	930e      	str	r3, [sp, #56]	@ 0x38
 8008504:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	05c9      	lsls	r1, r1, #23
 800850a:	d545      	bpl.n	8008598 <_printf_float+0xc0>
 800850c:	189b      	adds	r3, r3, r2
 800850e:	4393      	bics	r3, r2
 8008510:	001a      	movs	r2, r3
 8008512:	3208      	adds	r2, #8
 8008514:	6022      	str	r2, [r4, #0]
 8008516:	2201      	movs	r2, #1
 8008518:	681e      	ldr	r6, [r3, #0]
 800851a:	685f      	ldr	r7, [r3, #4]
 800851c:	007b      	lsls	r3, r7, #1
 800851e:	085b      	lsrs	r3, r3, #1
 8008520:	9311      	str	r3, [sp, #68]	@ 0x44
 8008522:	9610      	str	r6, [sp, #64]	@ 0x40
 8008524:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008526:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008528:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800852a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800852c:	4ba7      	ldr	r3, [pc, #668]	@ (80087cc <_printf_float+0x2f4>)
 800852e:	4252      	negs	r2, r2
 8008530:	f7fa fcc4 	bl	8002ebc <__aeabi_dcmpun>
 8008534:	2800      	cmp	r0, #0
 8008536:	d131      	bne.n	800859c <_printf_float+0xc4>
 8008538:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800853a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800853c:	2201      	movs	r2, #1
 800853e:	4ba3      	ldr	r3, [pc, #652]	@ (80087cc <_printf_float+0x2f4>)
 8008540:	4252      	negs	r2, r2
 8008542:	f7f7 ff93 	bl	800046c <__aeabi_dcmple>
 8008546:	2800      	cmp	r0, #0
 8008548:	d128      	bne.n	800859c <_printf_float+0xc4>
 800854a:	2200      	movs	r2, #0
 800854c:	2300      	movs	r3, #0
 800854e:	0030      	movs	r0, r6
 8008550:	0039      	movs	r1, r7
 8008552:	f7f7 ff81 	bl	8000458 <__aeabi_dcmplt>
 8008556:	2800      	cmp	r0, #0
 8008558:	d003      	beq.n	8008562 <_printf_float+0x8a>
 800855a:	002b      	movs	r3, r5
 800855c:	222d      	movs	r2, #45	@ 0x2d
 800855e:	3343      	adds	r3, #67	@ 0x43
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008564:	4f9a      	ldr	r7, [pc, #616]	@ (80087d0 <_printf_float+0x2f8>)
 8008566:	2b47      	cmp	r3, #71	@ 0x47
 8008568:	d900      	bls.n	800856c <_printf_float+0x94>
 800856a:	4f9a      	ldr	r7, [pc, #616]	@ (80087d4 <_printf_float+0x2fc>)
 800856c:	2303      	movs	r3, #3
 800856e:	2400      	movs	r4, #0
 8008570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008572:	612b      	str	r3, [r5, #16]
 8008574:	3301      	adds	r3, #1
 8008576:	439a      	bics	r2, r3
 8008578:	602a      	str	r2, [r5, #0]
 800857a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800857c:	0029      	movs	r1, r5
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008584:	aa15      	add	r2, sp, #84	@ 0x54
 8008586:	f000 f9e5 	bl	8008954 <_printf_common>
 800858a:	3001      	adds	r0, #1
 800858c:	d000      	beq.n	8008590 <_printf_float+0xb8>
 800858e:	e09f      	b.n	80086d0 <_printf_float+0x1f8>
 8008590:	2001      	movs	r0, #1
 8008592:	4240      	negs	r0, r0
 8008594:	b017      	add	sp, #92	@ 0x5c
 8008596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008598:	3307      	adds	r3, #7
 800859a:	e7b8      	b.n	800850e <_printf_float+0x36>
 800859c:	0032      	movs	r2, r6
 800859e:	003b      	movs	r3, r7
 80085a0:	0030      	movs	r0, r6
 80085a2:	0039      	movs	r1, r7
 80085a4:	f7fa fc8a 	bl	8002ebc <__aeabi_dcmpun>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d00b      	beq.n	80085c4 <_printf_float+0xec>
 80085ac:	2f00      	cmp	r7, #0
 80085ae:	da03      	bge.n	80085b8 <_printf_float+0xe0>
 80085b0:	002b      	movs	r3, r5
 80085b2:	222d      	movs	r2, #45	@ 0x2d
 80085b4:	3343      	adds	r3, #67	@ 0x43
 80085b6:	701a      	strb	r2, [r3, #0]
 80085b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085ba:	4f87      	ldr	r7, [pc, #540]	@ (80087d8 <_printf_float+0x300>)
 80085bc:	2b47      	cmp	r3, #71	@ 0x47
 80085be:	d9d5      	bls.n	800856c <_printf_float+0x94>
 80085c0:	4f86      	ldr	r7, [pc, #536]	@ (80087dc <_printf_float+0x304>)
 80085c2:	e7d3      	b.n	800856c <_printf_float+0x94>
 80085c4:	2220      	movs	r2, #32
 80085c6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80085c8:	686b      	ldr	r3, [r5, #4]
 80085ca:	4394      	bics	r4, r2
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	d146      	bne.n	800865e <_printf_float+0x186>
 80085d0:	3307      	adds	r3, #7
 80085d2:	606b      	str	r3, [r5, #4]
 80085d4:	2380      	movs	r3, #128	@ 0x80
 80085d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085d8:	00db      	lsls	r3, r3, #3
 80085da:	4313      	orrs	r3, r2
 80085dc:	2200      	movs	r2, #0
 80085de:	602b      	str	r3, [r5, #0]
 80085e0:	9206      	str	r2, [sp, #24]
 80085e2:	aa14      	add	r2, sp, #80	@ 0x50
 80085e4:	9205      	str	r2, [sp, #20]
 80085e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80085e8:	a90a      	add	r1, sp, #40	@ 0x28
 80085ea:	9204      	str	r2, [sp, #16]
 80085ec:	aa13      	add	r2, sp, #76	@ 0x4c
 80085ee:	9203      	str	r2, [sp, #12]
 80085f0:	2223      	movs	r2, #35	@ 0x23
 80085f2:	1852      	adds	r2, r2, r1
 80085f4:	9202      	str	r2, [sp, #8]
 80085f6:	9301      	str	r3, [sp, #4]
 80085f8:	686b      	ldr	r3, [r5, #4]
 80085fa:	0032      	movs	r2, r6
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008600:	003b      	movs	r3, r7
 8008602:	f7ff fec3 	bl	800838c <__cvt>
 8008606:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008608:	0007      	movs	r7, r0
 800860a:	2c47      	cmp	r4, #71	@ 0x47
 800860c:	d12d      	bne.n	800866a <_printf_float+0x192>
 800860e:	1cd3      	adds	r3, r2, #3
 8008610:	db02      	blt.n	8008618 <_printf_float+0x140>
 8008612:	686b      	ldr	r3, [r5, #4]
 8008614:	429a      	cmp	r2, r3
 8008616:	dd48      	ble.n	80086aa <_printf_float+0x1d2>
 8008618:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800861a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800861c:	3b02      	subs	r3, #2
 800861e:	b2db      	uxtb	r3, r3
 8008620:	930c      	str	r3, [sp, #48]	@ 0x30
 8008622:	0028      	movs	r0, r5
 8008624:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008626:	3901      	subs	r1, #1
 8008628:	3050      	adds	r0, #80	@ 0x50
 800862a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800862c:	f7ff ff14 	bl	8008458 <__exponent>
 8008630:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008632:	0004      	movs	r4, r0
 8008634:	1813      	adds	r3, r2, r0
 8008636:	612b      	str	r3, [r5, #16]
 8008638:	2a01      	cmp	r2, #1
 800863a:	dc02      	bgt.n	8008642 <_printf_float+0x16a>
 800863c:	682a      	ldr	r2, [r5, #0]
 800863e:	07d2      	lsls	r2, r2, #31
 8008640:	d501      	bpl.n	8008646 <_printf_float+0x16e>
 8008642:	3301      	adds	r3, #1
 8008644:	612b      	str	r3, [r5, #16]
 8008646:	2323      	movs	r3, #35	@ 0x23
 8008648:	aa0a      	add	r2, sp, #40	@ 0x28
 800864a:	189b      	adds	r3, r3, r2
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d100      	bne.n	8008654 <_printf_float+0x17c>
 8008652:	e792      	b.n	800857a <_printf_float+0xa2>
 8008654:	002b      	movs	r3, r5
 8008656:	222d      	movs	r2, #45	@ 0x2d
 8008658:	3343      	adds	r3, #67	@ 0x43
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	e78d      	b.n	800857a <_printf_float+0xa2>
 800865e:	2c47      	cmp	r4, #71	@ 0x47
 8008660:	d1b8      	bne.n	80085d4 <_printf_float+0xfc>
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1b6      	bne.n	80085d4 <_printf_float+0xfc>
 8008666:	3301      	adds	r3, #1
 8008668:	e7b3      	b.n	80085d2 <_printf_float+0xfa>
 800866a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800866c:	0011      	movs	r1, r2
 800866e:	2b65      	cmp	r3, #101	@ 0x65
 8008670:	d9d7      	bls.n	8008622 <_printf_float+0x14a>
 8008672:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008674:	2b66      	cmp	r3, #102	@ 0x66
 8008676:	d11a      	bne.n	80086ae <_printf_float+0x1d6>
 8008678:	686b      	ldr	r3, [r5, #4]
 800867a:	2a00      	cmp	r2, #0
 800867c:	dd09      	ble.n	8008692 <_printf_float+0x1ba>
 800867e:	612a      	str	r2, [r5, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <_printf_float+0x1b2>
 8008684:	6829      	ldr	r1, [r5, #0]
 8008686:	07c9      	lsls	r1, r1, #31
 8008688:	d50b      	bpl.n	80086a2 <_printf_float+0x1ca>
 800868a:	3301      	adds	r3, #1
 800868c:	189b      	adds	r3, r3, r2
 800868e:	612b      	str	r3, [r5, #16]
 8008690:	e007      	b.n	80086a2 <_printf_float+0x1ca>
 8008692:	2b00      	cmp	r3, #0
 8008694:	d103      	bne.n	800869e <_printf_float+0x1c6>
 8008696:	2201      	movs	r2, #1
 8008698:	6829      	ldr	r1, [r5, #0]
 800869a:	4211      	tst	r1, r2
 800869c:	d000      	beq.n	80086a0 <_printf_float+0x1c8>
 800869e:	1c9a      	adds	r2, r3, #2
 80086a0:	612a      	str	r2, [r5, #16]
 80086a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80086a4:	2400      	movs	r4, #0
 80086a6:	65ab      	str	r3, [r5, #88]	@ 0x58
 80086a8:	e7cd      	b.n	8008646 <_printf_float+0x16e>
 80086aa:	2367      	movs	r3, #103	@ 0x67
 80086ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80086ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80086b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086b2:	4299      	cmp	r1, r3
 80086b4:	db06      	blt.n	80086c4 <_printf_float+0x1ec>
 80086b6:	682b      	ldr	r3, [r5, #0]
 80086b8:	6129      	str	r1, [r5, #16]
 80086ba:	07db      	lsls	r3, r3, #31
 80086bc:	d5f1      	bpl.n	80086a2 <_printf_float+0x1ca>
 80086be:	3101      	adds	r1, #1
 80086c0:	6129      	str	r1, [r5, #16]
 80086c2:	e7ee      	b.n	80086a2 <_printf_float+0x1ca>
 80086c4:	2201      	movs	r2, #1
 80086c6:	2900      	cmp	r1, #0
 80086c8:	dce0      	bgt.n	800868c <_printf_float+0x1b4>
 80086ca:	1892      	adds	r2, r2, r2
 80086cc:	1a52      	subs	r2, r2, r1
 80086ce:	e7dd      	b.n	800868c <_printf_float+0x1b4>
 80086d0:	682a      	ldr	r2, [r5, #0]
 80086d2:	0553      	lsls	r3, r2, #21
 80086d4:	d408      	bmi.n	80086e8 <_printf_float+0x210>
 80086d6:	692b      	ldr	r3, [r5, #16]
 80086d8:	003a      	movs	r2, r7
 80086da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80086e0:	47a0      	blx	r4
 80086e2:	3001      	adds	r0, #1
 80086e4:	d129      	bne.n	800873a <_printf_float+0x262>
 80086e6:	e753      	b.n	8008590 <_printf_float+0xb8>
 80086e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086ea:	2b65      	cmp	r3, #101	@ 0x65
 80086ec:	d800      	bhi.n	80086f0 <_printf_float+0x218>
 80086ee:	e0da      	b.n	80088a6 <_printf_float+0x3ce>
 80086f0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80086f2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80086f4:	2200      	movs	r2, #0
 80086f6:	2300      	movs	r3, #0
 80086f8:	f7f7 fea8 	bl	800044c <__aeabi_dcmpeq>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d033      	beq.n	8008768 <_printf_float+0x290>
 8008700:	2301      	movs	r3, #1
 8008702:	4a37      	ldr	r2, [pc, #220]	@ (80087e0 <_printf_float+0x308>)
 8008704:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008708:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800870a:	47a0      	blx	r4
 800870c:	3001      	adds	r0, #1
 800870e:	d100      	bne.n	8008712 <_printf_float+0x23a>
 8008710:	e73e      	b.n	8008590 <_printf_float+0xb8>
 8008712:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008714:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008716:	42b3      	cmp	r3, r6
 8008718:	db02      	blt.n	8008720 <_printf_float+0x248>
 800871a:	682b      	ldr	r3, [r5, #0]
 800871c:	07db      	lsls	r3, r3, #31
 800871e:	d50c      	bpl.n	800873a <_printf_float+0x262>
 8008720:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008724:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008726:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008728:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800872a:	47a0      	blx	r4
 800872c:	2400      	movs	r4, #0
 800872e:	3001      	adds	r0, #1
 8008730:	d100      	bne.n	8008734 <_printf_float+0x25c>
 8008732:	e72d      	b.n	8008590 <_printf_float+0xb8>
 8008734:	1e73      	subs	r3, r6, #1
 8008736:	42a3      	cmp	r3, r4
 8008738:	dc0a      	bgt.n	8008750 <_printf_float+0x278>
 800873a:	682b      	ldr	r3, [r5, #0]
 800873c:	079b      	lsls	r3, r3, #30
 800873e:	d500      	bpl.n	8008742 <_printf_float+0x26a>
 8008740:	e105      	b.n	800894e <_printf_float+0x476>
 8008742:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008744:	68e8      	ldr	r0, [r5, #12]
 8008746:	4298      	cmp	r0, r3
 8008748:	db00      	blt.n	800874c <_printf_float+0x274>
 800874a:	e723      	b.n	8008594 <_printf_float+0xbc>
 800874c:	0018      	movs	r0, r3
 800874e:	e721      	b.n	8008594 <_printf_float+0xbc>
 8008750:	002a      	movs	r2, r5
 8008752:	2301      	movs	r3, #1
 8008754:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008758:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800875a:	321a      	adds	r2, #26
 800875c:	47b8      	blx	r7
 800875e:	3001      	adds	r0, #1
 8008760:	d100      	bne.n	8008764 <_printf_float+0x28c>
 8008762:	e715      	b.n	8008590 <_printf_float+0xb8>
 8008764:	3401      	adds	r4, #1
 8008766:	e7e5      	b.n	8008734 <_printf_float+0x25c>
 8008768:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800876a:	2b00      	cmp	r3, #0
 800876c:	dc3a      	bgt.n	80087e4 <_printf_float+0x30c>
 800876e:	2301      	movs	r3, #1
 8008770:	4a1b      	ldr	r2, [pc, #108]	@ (80087e0 <_printf_float+0x308>)
 8008772:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008774:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008776:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008778:	47a0      	blx	r4
 800877a:	3001      	adds	r0, #1
 800877c:	d100      	bne.n	8008780 <_printf_float+0x2a8>
 800877e:	e707      	b.n	8008590 <_printf_float+0xb8>
 8008780:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008782:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008784:	4333      	orrs	r3, r6
 8008786:	d102      	bne.n	800878e <_printf_float+0x2b6>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	07db      	lsls	r3, r3, #31
 800878c:	d5d5      	bpl.n	800873a <_printf_float+0x262>
 800878e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008790:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008792:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008794:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008796:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008798:	47a0      	blx	r4
 800879a:	2300      	movs	r3, #0
 800879c:	3001      	adds	r0, #1
 800879e:	d100      	bne.n	80087a2 <_printf_float+0x2ca>
 80087a0:	e6f6      	b.n	8008590 <_printf_float+0xb8>
 80087a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80087a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80087a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80087a8:	425b      	negs	r3, r3
 80087aa:	4293      	cmp	r3, r2
 80087ac:	dc01      	bgt.n	80087b2 <_printf_float+0x2da>
 80087ae:	0033      	movs	r3, r6
 80087b0:	e792      	b.n	80086d8 <_printf_float+0x200>
 80087b2:	002a      	movs	r2, r5
 80087b4:	2301      	movs	r3, #1
 80087b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80087b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80087bc:	321a      	adds	r2, #26
 80087be:	47a0      	blx	r4
 80087c0:	3001      	adds	r0, #1
 80087c2:	d100      	bne.n	80087c6 <_printf_float+0x2ee>
 80087c4:	e6e4      	b.n	8008590 <_printf_float+0xb8>
 80087c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087c8:	3301      	adds	r3, #1
 80087ca:	e7ea      	b.n	80087a2 <_printf_float+0x2ca>
 80087cc:	7fefffff 	.word	0x7fefffff
 80087d0:	0800dc8c 	.word	0x0800dc8c
 80087d4:	0800dc90 	.word	0x0800dc90
 80087d8:	0800dc94 	.word	0x0800dc94
 80087dc:	0800dc98 	.word	0x0800dc98
 80087e0:	0800dc9c 	.word	0x0800dc9c
 80087e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80087e6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80087e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80087ea:	429e      	cmp	r6, r3
 80087ec:	dd00      	ble.n	80087f0 <_printf_float+0x318>
 80087ee:	001e      	movs	r6, r3
 80087f0:	2e00      	cmp	r6, #0
 80087f2:	dc31      	bgt.n	8008858 <_printf_float+0x380>
 80087f4:	43f3      	mvns	r3, r6
 80087f6:	2400      	movs	r4, #0
 80087f8:	17db      	asrs	r3, r3, #31
 80087fa:	4033      	ands	r3, r6
 80087fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80087fe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008802:	1af3      	subs	r3, r6, r3
 8008804:	42a3      	cmp	r3, r4
 8008806:	dc30      	bgt.n	800886a <_printf_float+0x392>
 8008808:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800880a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800880c:	429a      	cmp	r2, r3
 800880e:	dc38      	bgt.n	8008882 <_printf_float+0x3aa>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	07db      	lsls	r3, r3, #31
 8008814:	d435      	bmi.n	8008882 <_printf_float+0x3aa>
 8008816:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008818:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800881a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800881c:	1b9b      	subs	r3, r3, r6
 800881e:	1b14      	subs	r4, r2, r4
 8008820:	429c      	cmp	r4, r3
 8008822:	dd00      	ble.n	8008826 <_printf_float+0x34e>
 8008824:	001c      	movs	r4, r3
 8008826:	2c00      	cmp	r4, #0
 8008828:	dc34      	bgt.n	8008894 <_printf_float+0x3bc>
 800882a:	43e3      	mvns	r3, r4
 800882c:	2600      	movs	r6, #0
 800882e:	17db      	asrs	r3, r3, #31
 8008830:	401c      	ands	r4, r3
 8008832:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008834:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	1b1b      	subs	r3, r3, r4
 800883a:	42b3      	cmp	r3, r6
 800883c:	dc00      	bgt.n	8008840 <_printf_float+0x368>
 800883e:	e77c      	b.n	800873a <_printf_float+0x262>
 8008840:	002a      	movs	r2, r5
 8008842:	2301      	movs	r3, #1
 8008844:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008848:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800884a:	321a      	adds	r2, #26
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	d100      	bne.n	8008854 <_printf_float+0x37c>
 8008852:	e69d      	b.n	8008590 <_printf_float+0xb8>
 8008854:	3601      	adds	r6, #1
 8008856:	e7ec      	b.n	8008832 <_printf_float+0x35a>
 8008858:	0033      	movs	r3, r6
 800885a:	003a      	movs	r2, r7
 800885c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800885e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008860:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008862:	47a0      	blx	r4
 8008864:	3001      	adds	r0, #1
 8008866:	d1c5      	bne.n	80087f4 <_printf_float+0x31c>
 8008868:	e692      	b.n	8008590 <_printf_float+0xb8>
 800886a:	002a      	movs	r2, r5
 800886c:	2301      	movs	r3, #1
 800886e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008870:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008872:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008874:	321a      	adds	r2, #26
 8008876:	47b0      	blx	r6
 8008878:	3001      	adds	r0, #1
 800887a:	d100      	bne.n	800887e <_printf_float+0x3a6>
 800887c:	e688      	b.n	8008590 <_printf_float+0xb8>
 800887e:	3401      	adds	r4, #1
 8008880:	e7bd      	b.n	80087fe <_printf_float+0x326>
 8008882:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008884:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008886:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008888:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800888a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800888c:	47a0      	blx	r4
 800888e:	3001      	adds	r0, #1
 8008890:	d1c1      	bne.n	8008816 <_printf_float+0x33e>
 8008892:	e67d      	b.n	8008590 <_printf_float+0xb8>
 8008894:	19ba      	adds	r2, r7, r6
 8008896:	0023      	movs	r3, r4
 8008898:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800889a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800889c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800889e:	47b0      	blx	r6
 80088a0:	3001      	adds	r0, #1
 80088a2:	d1c2      	bne.n	800882a <_printf_float+0x352>
 80088a4:	e674      	b.n	8008590 <_printf_float+0xb8>
 80088a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	dc02      	bgt.n	80088b4 <_printf_float+0x3dc>
 80088ae:	2301      	movs	r3, #1
 80088b0:	421a      	tst	r2, r3
 80088b2:	d039      	beq.n	8008928 <_printf_float+0x450>
 80088b4:	2301      	movs	r3, #1
 80088b6:	003a      	movs	r2, r7
 80088b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80088be:	47b0      	blx	r6
 80088c0:	3001      	adds	r0, #1
 80088c2:	d100      	bne.n	80088c6 <_printf_float+0x3ee>
 80088c4:	e664      	b.n	8008590 <_printf_float+0xb8>
 80088c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80088ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088ce:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80088d0:	47b0      	blx	r6
 80088d2:	3001      	adds	r0, #1
 80088d4:	d100      	bne.n	80088d8 <_printf_float+0x400>
 80088d6:	e65b      	b.n	8008590 <_printf_float+0xb8>
 80088d8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80088da:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80088dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088de:	2200      	movs	r2, #0
 80088e0:	3b01      	subs	r3, #1
 80088e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80088e4:	2300      	movs	r3, #0
 80088e6:	f7f7 fdb1 	bl	800044c <__aeabi_dcmpeq>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d11a      	bne.n	8008924 <_printf_float+0x44c>
 80088ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088f0:	1c7a      	adds	r2, r7, #1
 80088f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088f6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80088f8:	47b0      	blx	r6
 80088fa:	3001      	adds	r0, #1
 80088fc:	d10e      	bne.n	800891c <_printf_float+0x444>
 80088fe:	e647      	b.n	8008590 <_printf_float+0xb8>
 8008900:	002a      	movs	r2, r5
 8008902:	2301      	movs	r3, #1
 8008904:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008908:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800890a:	321a      	adds	r2, #26
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	d100      	bne.n	8008914 <_printf_float+0x43c>
 8008912:	e63d      	b.n	8008590 <_printf_float+0xb8>
 8008914:	3601      	adds	r6, #1
 8008916:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008918:	429e      	cmp	r6, r3
 800891a:	dbf1      	blt.n	8008900 <_printf_float+0x428>
 800891c:	002a      	movs	r2, r5
 800891e:	0023      	movs	r3, r4
 8008920:	3250      	adds	r2, #80	@ 0x50
 8008922:	e6da      	b.n	80086da <_printf_float+0x202>
 8008924:	2600      	movs	r6, #0
 8008926:	e7f6      	b.n	8008916 <_printf_float+0x43e>
 8008928:	003a      	movs	r2, r7
 800892a:	e7e2      	b.n	80088f2 <_printf_float+0x41a>
 800892c:	002a      	movs	r2, r5
 800892e:	2301      	movs	r3, #1
 8008930:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008934:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008936:	3219      	adds	r2, #25
 8008938:	47b0      	blx	r6
 800893a:	3001      	adds	r0, #1
 800893c:	d100      	bne.n	8008940 <_printf_float+0x468>
 800893e:	e627      	b.n	8008590 <_printf_float+0xb8>
 8008940:	3401      	adds	r4, #1
 8008942:	68eb      	ldr	r3, [r5, #12]
 8008944:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008946:	1a9b      	subs	r3, r3, r2
 8008948:	42a3      	cmp	r3, r4
 800894a:	dcef      	bgt.n	800892c <_printf_float+0x454>
 800894c:	e6f9      	b.n	8008742 <_printf_float+0x26a>
 800894e:	2400      	movs	r4, #0
 8008950:	e7f7      	b.n	8008942 <_printf_float+0x46a>
 8008952:	46c0      	nop			@ (mov r8, r8)

08008954 <_printf_common>:
 8008954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008956:	0016      	movs	r6, r2
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	688a      	ldr	r2, [r1, #8]
 800895c:	690b      	ldr	r3, [r1, #16]
 800895e:	000c      	movs	r4, r1
 8008960:	9000      	str	r0, [sp, #0]
 8008962:	4293      	cmp	r3, r2
 8008964:	da00      	bge.n	8008968 <_printf_common+0x14>
 8008966:	0013      	movs	r3, r2
 8008968:	0022      	movs	r2, r4
 800896a:	6033      	str	r3, [r6, #0]
 800896c:	3243      	adds	r2, #67	@ 0x43
 800896e:	7812      	ldrb	r2, [r2, #0]
 8008970:	2a00      	cmp	r2, #0
 8008972:	d001      	beq.n	8008978 <_printf_common+0x24>
 8008974:	3301      	adds	r3, #1
 8008976:	6033      	str	r3, [r6, #0]
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	069b      	lsls	r3, r3, #26
 800897c:	d502      	bpl.n	8008984 <_printf_common+0x30>
 800897e:	6833      	ldr	r3, [r6, #0]
 8008980:	3302      	adds	r3, #2
 8008982:	6033      	str	r3, [r6, #0]
 8008984:	6822      	ldr	r2, [r4, #0]
 8008986:	2306      	movs	r3, #6
 8008988:	0015      	movs	r5, r2
 800898a:	401d      	ands	r5, r3
 800898c:	421a      	tst	r2, r3
 800898e:	d027      	beq.n	80089e0 <_printf_common+0x8c>
 8008990:	0023      	movs	r3, r4
 8008992:	3343      	adds	r3, #67	@ 0x43
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	1e5a      	subs	r2, r3, #1
 8008998:	4193      	sbcs	r3, r2
 800899a:	6822      	ldr	r2, [r4, #0]
 800899c:	0692      	lsls	r2, r2, #26
 800899e:	d430      	bmi.n	8008a02 <_printf_common+0xae>
 80089a0:	0022      	movs	r2, r4
 80089a2:	9901      	ldr	r1, [sp, #4]
 80089a4:	9800      	ldr	r0, [sp, #0]
 80089a6:	9d08      	ldr	r5, [sp, #32]
 80089a8:	3243      	adds	r2, #67	@ 0x43
 80089aa:	47a8      	blx	r5
 80089ac:	3001      	adds	r0, #1
 80089ae:	d025      	beq.n	80089fc <_printf_common+0xa8>
 80089b0:	2206      	movs	r2, #6
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	2500      	movs	r5, #0
 80089b6:	4013      	ands	r3, r2
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d105      	bne.n	80089c8 <_printf_common+0x74>
 80089bc:	6833      	ldr	r3, [r6, #0]
 80089be:	68e5      	ldr	r5, [r4, #12]
 80089c0:	1aed      	subs	r5, r5, r3
 80089c2:	43eb      	mvns	r3, r5
 80089c4:	17db      	asrs	r3, r3, #31
 80089c6:	401d      	ands	r5, r3
 80089c8:	68a3      	ldr	r3, [r4, #8]
 80089ca:	6922      	ldr	r2, [r4, #16]
 80089cc:	4293      	cmp	r3, r2
 80089ce:	dd01      	ble.n	80089d4 <_printf_common+0x80>
 80089d0:	1a9b      	subs	r3, r3, r2
 80089d2:	18ed      	adds	r5, r5, r3
 80089d4:	2600      	movs	r6, #0
 80089d6:	42b5      	cmp	r5, r6
 80089d8:	d120      	bne.n	8008a1c <_printf_common+0xc8>
 80089da:	2000      	movs	r0, #0
 80089dc:	e010      	b.n	8008a00 <_printf_common+0xac>
 80089de:	3501      	adds	r5, #1
 80089e0:	68e3      	ldr	r3, [r4, #12]
 80089e2:	6832      	ldr	r2, [r6, #0]
 80089e4:	1a9b      	subs	r3, r3, r2
 80089e6:	42ab      	cmp	r3, r5
 80089e8:	ddd2      	ble.n	8008990 <_printf_common+0x3c>
 80089ea:	0022      	movs	r2, r4
 80089ec:	2301      	movs	r3, #1
 80089ee:	9901      	ldr	r1, [sp, #4]
 80089f0:	9800      	ldr	r0, [sp, #0]
 80089f2:	9f08      	ldr	r7, [sp, #32]
 80089f4:	3219      	adds	r2, #25
 80089f6:	47b8      	blx	r7
 80089f8:	3001      	adds	r0, #1
 80089fa:	d1f0      	bne.n	80089de <_printf_common+0x8a>
 80089fc:	2001      	movs	r0, #1
 80089fe:	4240      	negs	r0, r0
 8008a00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a02:	2030      	movs	r0, #48	@ 0x30
 8008a04:	18e1      	adds	r1, r4, r3
 8008a06:	3143      	adds	r1, #67	@ 0x43
 8008a08:	7008      	strb	r0, [r1, #0]
 8008a0a:	0021      	movs	r1, r4
 8008a0c:	1c5a      	adds	r2, r3, #1
 8008a0e:	3145      	adds	r1, #69	@ 0x45
 8008a10:	7809      	ldrb	r1, [r1, #0]
 8008a12:	18a2      	adds	r2, r4, r2
 8008a14:	3243      	adds	r2, #67	@ 0x43
 8008a16:	3302      	adds	r3, #2
 8008a18:	7011      	strb	r1, [r2, #0]
 8008a1a:	e7c1      	b.n	80089a0 <_printf_common+0x4c>
 8008a1c:	0022      	movs	r2, r4
 8008a1e:	2301      	movs	r3, #1
 8008a20:	9901      	ldr	r1, [sp, #4]
 8008a22:	9800      	ldr	r0, [sp, #0]
 8008a24:	9f08      	ldr	r7, [sp, #32]
 8008a26:	321a      	adds	r2, #26
 8008a28:	47b8      	blx	r7
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	d0e6      	beq.n	80089fc <_printf_common+0xa8>
 8008a2e:	3601      	adds	r6, #1
 8008a30:	e7d1      	b.n	80089d6 <_printf_common+0x82>
	...

08008a34 <_printf_i>:
 8008a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a36:	b08b      	sub	sp, #44	@ 0x2c
 8008a38:	9206      	str	r2, [sp, #24]
 8008a3a:	000a      	movs	r2, r1
 8008a3c:	3243      	adds	r2, #67	@ 0x43
 8008a3e:	9307      	str	r3, [sp, #28]
 8008a40:	9005      	str	r0, [sp, #20]
 8008a42:	9203      	str	r2, [sp, #12]
 8008a44:	7e0a      	ldrb	r2, [r1, #24]
 8008a46:	000c      	movs	r4, r1
 8008a48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a4a:	2a78      	cmp	r2, #120	@ 0x78
 8008a4c:	d809      	bhi.n	8008a62 <_printf_i+0x2e>
 8008a4e:	2a62      	cmp	r2, #98	@ 0x62
 8008a50:	d80b      	bhi.n	8008a6a <_printf_i+0x36>
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	d100      	bne.n	8008a58 <_printf_i+0x24>
 8008a56:	e0bc      	b.n	8008bd2 <_printf_i+0x19e>
 8008a58:	497b      	ldr	r1, [pc, #492]	@ (8008c48 <_printf_i+0x214>)
 8008a5a:	9104      	str	r1, [sp, #16]
 8008a5c:	2a58      	cmp	r2, #88	@ 0x58
 8008a5e:	d100      	bne.n	8008a62 <_printf_i+0x2e>
 8008a60:	e090      	b.n	8008b84 <_printf_i+0x150>
 8008a62:	0025      	movs	r5, r4
 8008a64:	3542      	adds	r5, #66	@ 0x42
 8008a66:	702a      	strb	r2, [r5, #0]
 8008a68:	e022      	b.n	8008ab0 <_printf_i+0x7c>
 8008a6a:	0010      	movs	r0, r2
 8008a6c:	3863      	subs	r0, #99	@ 0x63
 8008a6e:	2815      	cmp	r0, #21
 8008a70:	d8f7      	bhi.n	8008a62 <_printf_i+0x2e>
 8008a72:	f7f7 fb5b 	bl	800012c <__gnu_thumb1_case_shi>
 8008a76:	0016      	.short	0x0016
 8008a78:	fff6001f 	.word	0xfff6001f
 8008a7c:	fff6fff6 	.word	0xfff6fff6
 8008a80:	001ffff6 	.word	0x001ffff6
 8008a84:	fff6fff6 	.word	0xfff6fff6
 8008a88:	fff6fff6 	.word	0xfff6fff6
 8008a8c:	003600a1 	.word	0x003600a1
 8008a90:	fff60080 	.word	0xfff60080
 8008a94:	00b2fff6 	.word	0x00b2fff6
 8008a98:	0036fff6 	.word	0x0036fff6
 8008a9c:	fff6fff6 	.word	0xfff6fff6
 8008aa0:	0084      	.short	0x0084
 8008aa2:	0025      	movs	r5, r4
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	3542      	adds	r5, #66	@ 0x42
 8008aa8:	1d11      	adds	r1, r2, #4
 8008aaa:	6019      	str	r1, [r3, #0]
 8008aac:	6813      	ldr	r3, [r2, #0]
 8008aae:	702b      	strb	r3, [r5, #0]
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e0a0      	b.n	8008bf6 <_printf_i+0x1c2>
 8008ab4:	6818      	ldr	r0, [r3, #0]
 8008ab6:	6809      	ldr	r1, [r1, #0]
 8008ab8:	1d02      	adds	r2, r0, #4
 8008aba:	060d      	lsls	r5, r1, #24
 8008abc:	d50b      	bpl.n	8008ad6 <_printf_i+0xa2>
 8008abe:	6806      	ldr	r6, [r0, #0]
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	2e00      	cmp	r6, #0
 8008ac4:	da03      	bge.n	8008ace <_printf_i+0x9a>
 8008ac6:	232d      	movs	r3, #45	@ 0x2d
 8008ac8:	9a03      	ldr	r2, [sp, #12]
 8008aca:	4276      	negs	r6, r6
 8008acc:	7013      	strb	r3, [r2, #0]
 8008ace:	4b5e      	ldr	r3, [pc, #376]	@ (8008c48 <_printf_i+0x214>)
 8008ad0:	270a      	movs	r7, #10
 8008ad2:	9304      	str	r3, [sp, #16]
 8008ad4:	e018      	b.n	8008b08 <_printf_i+0xd4>
 8008ad6:	6806      	ldr	r6, [r0, #0]
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	0649      	lsls	r1, r1, #25
 8008adc:	d5f1      	bpl.n	8008ac2 <_printf_i+0x8e>
 8008ade:	b236      	sxth	r6, r6
 8008ae0:	e7ef      	b.n	8008ac2 <_printf_i+0x8e>
 8008ae2:	6808      	ldr	r0, [r1, #0]
 8008ae4:	6819      	ldr	r1, [r3, #0]
 8008ae6:	c940      	ldmia	r1!, {r6}
 8008ae8:	0605      	lsls	r5, r0, #24
 8008aea:	d402      	bmi.n	8008af2 <_printf_i+0xbe>
 8008aec:	0640      	lsls	r0, r0, #25
 8008aee:	d500      	bpl.n	8008af2 <_printf_i+0xbe>
 8008af0:	b2b6      	uxth	r6, r6
 8008af2:	6019      	str	r1, [r3, #0]
 8008af4:	4b54      	ldr	r3, [pc, #336]	@ (8008c48 <_printf_i+0x214>)
 8008af6:	270a      	movs	r7, #10
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	2a6f      	cmp	r2, #111	@ 0x6f
 8008afc:	d100      	bne.n	8008b00 <_printf_i+0xcc>
 8008afe:	3f02      	subs	r7, #2
 8008b00:	0023      	movs	r3, r4
 8008b02:	2200      	movs	r2, #0
 8008b04:	3343      	adds	r3, #67	@ 0x43
 8008b06:	701a      	strb	r2, [r3, #0]
 8008b08:	6863      	ldr	r3, [r4, #4]
 8008b0a:	60a3      	str	r3, [r4, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	db03      	blt.n	8008b18 <_printf_i+0xe4>
 8008b10:	2104      	movs	r1, #4
 8008b12:	6822      	ldr	r2, [r4, #0]
 8008b14:	438a      	bics	r2, r1
 8008b16:	6022      	str	r2, [r4, #0]
 8008b18:	2e00      	cmp	r6, #0
 8008b1a:	d102      	bne.n	8008b22 <_printf_i+0xee>
 8008b1c:	9d03      	ldr	r5, [sp, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00c      	beq.n	8008b3c <_printf_i+0x108>
 8008b22:	9d03      	ldr	r5, [sp, #12]
 8008b24:	0030      	movs	r0, r6
 8008b26:	0039      	movs	r1, r7
 8008b28:	f7f7 fb90 	bl	800024c <__aeabi_uidivmod>
 8008b2c:	9b04      	ldr	r3, [sp, #16]
 8008b2e:	3d01      	subs	r5, #1
 8008b30:	5c5b      	ldrb	r3, [r3, r1]
 8008b32:	702b      	strb	r3, [r5, #0]
 8008b34:	0033      	movs	r3, r6
 8008b36:	0006      	movs	r6, r0
 8008b38:	429f      	cmp	r7, r3
 8008b3a:	d9f3      	bls.n	8008b24 <_printf_i+0xf0>
 8008b3c:	2f08      	cmp	r7, #8
 8008b3e:	d109      	bne.n	8008b54 <_printf_i+0x120>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	07db      	lsls	r3, r3, #31
 8008b44:	d506      	bpl.n	8008b54 <_printf_i+0x120>
 8008b46:	6862      	ldr	r2, [r4, #4]
 8008b48:	6923      	ldr	r3, [r4, #16]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	dc02      	bgt.n	8008b54 <_printf_i+0x120>
 8008b4e:	2330      	movs	r3, #48	@ 0x30
 8008b50:	3d01      	subs	r5, #1
 8008b52:	702b      	strb	r3, [r5, #0]
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	1b5b      	subs	r3, r3, r5
 8008b58:	6123      	str	r3, [r4, #16]
 8008b5a:	9b07      	ldr	r3, [sp, #28]
 8008b5c:	0021      	movs	r1, r4
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	9805      	ldr	r0, [sp, #20]
 8008b62:	9b06      	ldr	r3, [sp, #24]
 8008b64:	aa09      	add	r2, sp, #36	@ 0x24
 8008b66:	f7ff fef5 	bl	8008954 <_printf_common>
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	d148      	bne.n	8008c00 <_printf_i+0x1cc>
 8008b6e:	2001      	movs	r0, #1
 8008b70:	4240      	negs	r0, r0
 8008b72:	b00b      	add	sp, #44	@ 0x2c
 8008b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b76:	2220      	movs	r2, #32
 8008b78:	6809      	ldr	r1, [r1, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	6022      	str	r2, [r4, #0]
 8008b7e:	2278      	movs	r2, #120	@ 0x78
 8008b80:	4932      	ldr	r1, [pc, #200]	@ (8008c4c <_printf_i+0x218>)
 8008b82:	9104      	str	r1, [sp, #16]
 8008b84:	0021      	movs	r1, r4
 8008b86:	3145      	adds	r1, #69	@ 0x45
 8008b88:	700a      	strb	r2, [r1, #0]
 8008b8a:	6819      	ldr	r1, [r3, #0]
 8008b8c:	6822      	ldr	r2, [r4, #0]
 8008b8e:	c940      	ldmia	r1!, {r6}
 8008b90:	0610      	lsls	r0, r2, #24
 8008b92:	d402      	bmi.n	8008b9a <_printf_i+0x166>
 8008b94:	0650      	lsls	r0, r2, #25
 8008b96:	d500      	bpl.n	8008b9a <_printf_i+0x166>
 8008b98:	b2b6      	uxth	r6, r6
 8008b9a:	6019      	str	r1, [r3, #0]
 8008b9c:	07d3      	lsls	r3, r2, #31
 8008b9e:	d502      	bpl.n	8008ba6 <_printf_i+0x172>
 8008ba0:	2320      	movs	r3, #32
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	2e00      	cmp	r6, #0
 8008ba8:	d001      	beq.n	8008bae <_printf_i+0x17a>
 8008baa:	2710      	movs	r7, #16
 8008bac:	e7a8      	b.n	8008b00 <_printf_i+0xcc>
 8008bae:	2220      	movs	r2, #32
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	4393      	bics	r3, r2
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	e7f8      	b.n	8008baa <_printf_i+0x176>
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	680d      	ldr	r5, [r1, #0]
 8008bbc:	1d10      	adds	r0, r2, #4
 8008bbe:	6949      	ldr	r1, [r1, #20]
 8008bc0:	6018      	str	r0, [r3, #0]
 8008bc2:	6813      	ldr	r3, [r2, #0]
 8008bc4:	062e      	lsls	r6, r5, #24
 8008bc6:	d501      	bpl.n	8008bcc <_printf_i+0x198>
 8008bc8:	6019      	str	r1, [r3, #0]
 8008bca:	e002      	b.n	8008bd2 <_printf_i+0x19e>
 8008bcc:	066d      	lsls	r5, r5, #25
 8008bce:	d5fb      	bpl.n	8008bc8 <_printf_i+0x194>
 8008bd0:	8019      	strh	r1, [r3, #0]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9d03      	ldr	r5, [sp, #12]
 8008bd6:	6123      	str	r3, [r4, #16]
 8008bd8:	e7bf      	b.n	8008b5a <_printf_i+0x126>
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	1d11      	adds	r1, r2, #4
 8008bde:	6019      	str	r1, [r3, #0]
 8008be0:	6815      	ldr	r5, [r2, #0]
 8008be2:	2100      	movs	r1, #0
 8008be4:	0028      	movs	r0, r5
 8008be6:	6862      	ldr	r2, [r4, #4]
 8008be8:	f000 fbf7 	bl	80093da <memchr>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d001      	beq.n	8008bf4 <_printf_i+0x1c0>
 8008bf0:	1b40      	subs	r0, r0, r5
 8008bf2:	6060      	str	r0, [r4, #4]
 8008bf4:	6863      	ldr	r3, [r4, #4]
 8008bf6:	6123      	str	r3, [r4, #16]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	9a03      	ldr	r2, [sp, #12]
 8008bfc:	7013      	strb	r3, [r2, #0]
 8008bfe:	e7ac      	b.n	8008b5a <_printf_i+0x126>
 8008c00:	002a      	movs	r2, r5
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	9906      	ldr	r1, [sp, #24]
 8008c06:	9805      	ldr	r0, [sp, #20]
 8008c08:	9d07      	ldr	r5, [sp, #28]
 8008c0a:	47a8      	blx	r5
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d0ae      	beq.n	8008b6e <_printf_i+0x13a>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	079b      	lsls	r3, r3, #30
 8008c14:	d415      	bmi.n	8008c42 <_printf_i+0x20e>
 8008c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c18:	68e0      	ldr	r0, [r4, #12]
 8008c1a:	4298      	cmp	r0, r3
 8008c1c:	daa9      	bge.n	8008b72 <_printf_i+0x13e>
 8008c1e:	0018      	movs	r0, r3
 8008c20:	e7a7      	b.n	8008b72 <_printf_i+0x13e>
 8008c22:	0022      	movs	r2, r4
 8008c24:	2301      	movs	r3, #1
 8008c26:	9906      	ldr	r1, [sp, #24]
 8008c28:	9805      	ldr	r0, [sp, #20]
 8008c2a:	9e07      	ldr	r6, [sp, #28]
 8008c2c:	3219      	adds	r2, #25
 8008c2e:	47b0      	blx	r6
 8008c30:	3001      	adds	r0, #1
 8008c32:	d09c      	beq.n	8008b6e <_printf_i+0x13a>
 8008c34:	3501      	adds	r5, #1
 8008c36:	68e3      	ldr	r3, [r4, #12]
 8008c38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c3a:	1a9b      	subs	r3, r3, r2
 8008c3c:	42ab      	cmp	r3, r5
 8008c3e:	dcf0      	bgt.n	8008c22 <_printf_i+0x1ee>
 8008c40:	e7e9      	b.n	8008c16 <_printf_i+0x1e2>
 8008c42:	2500      	movs	r5, #0
 8008c44:	e7f7      	b.n	8008c36 <_printf_i+0x202>
 8008c46:	46c0      	nop			@ (mov r8, r8)
 8008c48:	0800dc9e 	.word	0x0800dc9e
 8008c4c:	0800dcaf 	.word	0x0800dcaf

08008c50 <_scanf_float>:
 8008c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c52:	b08b      	sub	sp, #44	@ 0x2c
 8008c54:	0016      	movs	r6, r2
 8008c56:	9003      	str	r0, [sp, #12]
 8008c58:	22ae      	movs	r2, #174	@ 0xae
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	9307      	str	r3, [sp, #28]
 8008c5e:	688b      	ldr	r3, [r1, #8]
 8008c60:	000c      	movs	r4, r1
 8008c62:	1e59      	subs	r1, r3, #1
 8008c64:	0052      	lsls	r2, r2, #1
 8008c66:	9006      	str	r0, [sp, #24]
 8008c68:	4291      	cmp	r1, r2
 8008c6a:	d905      	bls.n	8008c78 <_scanf_float+0x28>
 8008c6c:	3b5e      	subs	r3, #94	@ 0x5e
 8008c6e:	3bff      	subs	r3, #255	@ 0xff
 8008c70:	9306      	str	r3, [sp, #24]
 8008c72:	235e      	movs	r3, #94	@ 0x5e
 8008c74:	33ff      	adds	r3, #255	@ 0xff
 8008c76:	60a3      	str	r3, [r4, #8]
 8008c78:	23f0      	movs	r3, #240	@ 0xf0
 8008c7a:	6822      	ldr	r2, [r4, #0]
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	0023      	movs	r3, r4
 8008c84:	2500      	movs	r5, #0
 8008c86:	331c      	adds	r3, #28
 8008c88:	001f      	movs	r7, r3
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	9502      	str	r5, [sp, #8]
 8008c8e:	9509      	str	r5, [sp, #36]	@ 0x24
 8008c90:	9508      	str	r5, [sp, #32]
 8008c92:	9501      	str	r5, [sp, #4]
 8008c94:	9505      	str	r5, [sp, #20]
 8008c96:	68a2      	ldr	r2, [r4, #8]
 8008c98:	2a00      	cmp	r2, #0
 8008c9a:	d00a      	beq.n	8008cb2 <_scanf_float+0x62>
 8008c9c:	6833      	ldr	r3, [r6, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b4e      	cmp	r3, #78	@ 0x4e
 8008ca2:	d844      	bhi.n	8008d2e <_scanf_float+0xde>
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	2b40      	cmp	r3, #64	@ 0x40
 8008ca8:	d82c      	bhi.n	8008d04 <_scanf_float+0xb4>
 8008caa:	382b      	subs	r0, #43	@ 0x2b
 8008cac:	b2c1      	uxtb	r1, r0
 8008cae:	290e      	cmp	r1, #14
 8008cb0:	d92a      	bls.n	8008d08 <_scanf_float+0xb8>
 8008cb2:	9b01      	ldr	r3, [sp, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <_scanf_float+0x70>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	4aa6      	ldr	r2, [pc, #664]	@ (8008f54 <_scanf_float+0x304>)
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	9b02      	ldr	r3, [sp, #8]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d900      	bls.n	8008cca <_scanf_float+0x7a>
 8008cc8:	e0fe      	b.n	8008ec8 <_scanf_float+0x278>
 8008cca:	25be      	movs	r5, #190	@ 0xbe
 8008ccc:	006d      	lsls	r5, r5, #1
 8008cce:	9b04      	ldr	r3, [sp, #16]
 8008cd0:	429f      	cmp	r7, r3
 8008cd2:	d900      	bls.n	8008cd6 <_scanf_float+0x86>
 8008cd4:	e0ee      	b.n	8008eb4 <_scanf_float+0x264>
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	b00b      	add	sp, #44	@ 0x2c
 8008cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cdc:	0018      	movs	r0, r3
 8008cde:	3861      	subs	r0, #97	@ 0x61
 8008ce0:	280d      	cmp	r0, #13
 8008ce2:	d8e6      	bhi.n	8008cb2 <_scanf_float+0x62>
 8008ce4:	f7f7 fa22 	bl	800012c <__gnu_thumb1_case_shi>
 8008ce8:	ffe50089 	.word	0xffe50089
 8008cec:	ffe5ffe5 	.word	0xffe5ffe5
 8008cf0:	00a700bb 	.word	0x00a700bb
 8008cf4:	ffe5ffe5 	.word	0xffe5ffe5
 8008cf8:	ffe5008f 	.word	0xffe5008f
 8008cfc:	ffe5ffe5 	.word	0xffe5ffe5
 8008d00:	006bffe5 	.word	0x006bffe5
 8008d04:	3841      	subs	r0, #65	@ 0x41
 8008d06:	e7eb      	b.n	8008ce0 <_scanf_float+0x90>
 8008d08:	280e      	cmp	r0, #14
 8008d0a:	d8d2      	bhi.n	8008cb2 <_scanf_float+0x62>
 8008d0c:	f7f7 fa0e 	bl	800012c <__gnu_thumb1_case_shi>
 8008d10:	ffd1004f 	.word	0xffd1004f
 8008d14:	009d004f 	.word	0x009d004f
 8008d18:	0021ffd1 	.word	0x0021ffd1
 8008d1c:	00410041 	.word	0x00410041
 8008d20:	00410041 	.word	0x00410041
 8008d24:	00410041 	.word	0x00410041
 8008d28:	00410041 	.word	0x00410041
 8008d2c:	0041      	.short	0x0041
 8008d2e:	2b6e      	cmp	r3, #110	@ 0x6e
 8008d30:	d80a      	bhi.n	8008d48 <_scanf_float+0xf8>
 8008d32:	2b60      	cmp	r3, #96	@ 0x60
 8008d34:	d8d2      	bhi.n	8008cdc <_scanf_float+0x8c>
 8008d36:	2b54      	cmp	r3, #84	@ 0x54
 8008d38:	d100      	bne.n	8008d3c <_scanf_float+0xec>
 8008d3a:	e081      	b.n	8008e40 <_scanf_float+0x1f0>
 8008d3c:	2b59      	cmp	r3, #89	@ 0x59
 8008d3e:	d1b8      	bne.n	8008cb2 <_scanf_float+0x62>
 8008d40:	2d07      	cmp	r5, #7
 8008d42:	d1b6      	bne.n	8008cb2 <_scanf_float+0x62>
 8008d44:	2508      	movs	r5, #8
 8008d46:	e02f      	b.n	8008da8 <_scanf_float+0x158>
 8008d48:	2b74      	cmp	r3, #116	@ 0x74
 8008d4a:	d079      	beq.n	8008e40 <_scanf_float+0x1f0>
 8008d4c:	2b79      	cmp	r3, #121	@ 0x79
 8008d4e:	d0f7      	beq.n	8008d40 <_scanf_float+0xf0>
 8008d50:	e7af      	b.n	8008cb2 <_scanf_float+0x62>
 8008d52:	6821      	ldr	r1, [r4, #0]
 8008d54:	05c8      	lsls	r0, r1, #23
 8008d56:	d51c      	bpl.n	8008d92 <_scanf_float+0x142>
 8008d58:	2380      	movs	r3, #128	@ 0x80
 8008d5a:	4399      	bics	r1, r3
 8008d5c:	9b01      	ldr	r3, [sp, #4]
 8008d5e:	6021      	str	r1, [r4, #0]
 8008d60:	3301      	adds	r3, #1
 8008d62:	9301      	str	r3, [sp, #4]
 8008d64:	9b06      	ldr	r3, [sp, #24]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <_scanf_float+0x122>
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	3201      	adds	r2, #1
 8008d6e:	9306      	str	r3, [sp, #24]
 8008d70:	60a2      	str	r2, [r4, #8]
 8008d72:	68a3      	ldr	r3, [r4, #8]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	60a3      	str	r3, [r4, #8]
 8008d78:	6923      	ldr	r3, [r4, #16]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	6123      	str	r3, [r4, #16]
 8008d7e:	6873      	ldr	r3, [r6, #4]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	6073      	str	r3, [r6, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	dc00      	bgt.n	8008d8a <_scanf_float+0x13a>
 8008d88:	e08a      	b.n	8008ea0 <_scanf_float+0x250>
 8008d8a:	6833      	ldr	r3, [r6, #0]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	6033      	str	r3, [r6, #0]
 8008d90:	e781      	b.n	8008c96 <_scanf_float+0x46>
 8008d92:	9a02      	ldr	r2, [sp, #8]
 8008d94:	1951      	adds	r1, r2, r5
 8008d96:	2900      	cmp	r1, #0
 8008d98:	d000      	beq.n	8008d9c <_scanf_float+0x14c>
 8008d9a:	e78a      	b.n	8008cb2 <_scanf_float+0x62>
 8008d9c:	000d      	movs	r5, r1
 8008d9e:	6822      	ldr	r2, [r4, #0]
 8008da0:	486d      	ldr	r0, [pc, #436]	@ (8008f58 <_scanf_float+0x308>)
 8008da2:	9102      	str	r1, [sp, #8]
 8008da4:	4002      	ands	r2, r0
 8008da6:	6022      	str	r2, [r4, #0]
 8008da8:	703b      	strb	r3, [r7, #0]
 8008daa:	3701      	adds	r7, #1
 8008dac:	e7e1      	b.n	8008d72 <_scanf_float+0x122>
 8008dae:	2180      	movs	r1, #128	@ 0x80
 8008db0:	6822      	ldr	r2, [r4, #0]
 8008db2:	420a      	tst	r2, r1
 8008db4:	d100      	bne.n	8008db8 <_scanf_float+0x168>
 8008db6:	e77c      	b.n	8008cb2 <_scanf_float+0x62>
 8008db8:	438a      	bics	r2, r1
 8008dba:	6022      	str	r2, [r4, #0]
 8008dbc:	e7f4      	b.n	8008da8 <_scanf_float+0x158>
 8008dbe:	9a02      	ldr	r2, [sp, #8]
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	d10f      	bne.n	8008de4 <_scanf_float+0x194>
 8008dc4:	9a01      	ldr	r2, [sp, #4]
 8008dc6:	2a00      	cmp	r2, #0
 8008dc8:	d10f      	bne.n	8008dea <_scanf_float+0x19a>
 8008dca:	6822      	ldr	r2, [r4, #0]
 8008dcc:	21e0      	movs	r1, #224	@ 0xe0
 8008dce:	0010      	movs	r0, r2
 8008dd0:	00c9      	lsls	r1, r1, #3
 8008dd2:	4008      	ands	r0, r1
 8008dd4:	4288      	cmp	r0, r1
 8008dd6:	d108      	bne.n	8008dea <_scanf_float+0x19a>
 8008dd8:	4960      	ldr	r1, [pc, #384]	@ (8008f5c <_scanf_float+0x30c>)
 8008dda:	400a      	ands	r2, r1
 8008ddc:	6022      	str	r2, [r4, #0]
 8008dde:	2201      	movs	r2, #1
 8008de0:	9202      	str	r2, [sp, #8]
 8008de2:	e7e1      	b.n	8008da8 <_scanf_float+0x158>
 8008de4:	9a02      	ldr	r2, [sp, #8]
 8008de6:	2a02      	cmp	r2, #2
 8008de8:	d058      	beq.n	8008e9c <_scanf_float+0x24c>
 8008dea:	2d01      	cmp	r5, #1
 8008dec:	d002      	beq.n	8008df4 <_scanf_float+0x1a4>
 8008dee:	2d04      	cmp	r5, #4
 8008df0:	d000      	beq.n	8008df4 <_scanf_float+0x1a4>
 8008df2:	e75e      	b.n	8008cb2 <_scanf_float+0x62>
 8008df4:	3501      	adds	r5, #1
 8008df6:	b2ed      	uxtb	r5, r5
 8008df8:	e7d6      	b.n	8008da8 <_scanf_float+0x158>
 8008dfa:	9a02      	ldr	r2, [sp, #8]
 8008dfc:	2a01      	cmp	r2, #1
 8008dfe:	d000      	beq.n	8008e02 <_scanf_float+0x1b2>
 8008e00:	e757      	b.n	8008cb2 <_scanf_float+0x62>
 8008e02:	2202      	movs	r2, #2
 8008e04:	e7ec      	b.n	8008de0 <_scanf_float+0x190>
 8008e06:	2d00      	cmp	r5, #0
 8008e08:	d110      	bne.n	8008e2c <_scanf_float+0x1dc>
 8008e0a:	9a01      	ldr	r2, [sp, #4]
 8008e0c:	2a00      	cmp	r2, #0
 8008e0e:	d000      	beq.n	8008e12 <_scanf_float+0x1c2>
 8008e10:	e752      	b.n	8008cb8 <_scanf_float+0x68>
 8008e12:	6822      	ldr	r2, [r4, #0]
 8008e14:	21e0      	movs	r1, #224	@ 0xe0
 8008e16:	0010      	movs	r0, r2
 8008e18:	00c9      	lsls	r1, r1, #3
 8008e1a:	4008      	ands	r0, r1
 8008e1c:	4288      	cmp	r0, r1
 8008e1e:	d000      	beq.n	8008e22 <_scanf_float+0x1d2>
 8008e20:	e11d      	b.n	800905e <_scanf_float+0x40e>
 8008e22:	494e      	ldr	r1, [pc, #312]	@ (8008f5c <_scanf_float+0x30c>)
 8008e24:	3501      	adds	r5, #1
 8008e26:	400a      	ands	r2, r1
 8008e28:	6022      	str	r2, [r4, #0]
 8008e2a:	e7bd      	b.n	8008da8 <_scanf_float+0x158>
 8008e2c:	21fd      	movs	r1, #253	@ 0xfd
 8008e2e:	1eea      	subs	r2, r5, #3
 8008e30:	420a      	tst	r2, r1
 8008e32:	d0df      	beq.n	8008df4 <_scanf_float+0x1a4>
 8008e34:	e73d      	b.n	8008cb2 <_scanf_float+0x62>
 8008e36:	2d02      	cmp	r5, #2
 8008e38:	d000      	beq.n	8008e3c <_scanf_float+0x1ec>
 8008e3a:	e73a      	b.n	8008cb2 <_scanf_float+0x62>
 8008e3c:	2503      	movs	r5, #3
 8008e3e:	e7b3      	b.n	8008da8 <_scanf_float+0x158>
 8008e40:	2d06      	cmp	r5, #6
 8008e42:	d000      	beq.n	8008e46 <_scanf_float+0x1f6>
 8008e44:	e735      	b.n	8008cb2 <_scanf_float+0x62>
 8008e46:	2507      	movs	r5, #7
 8008e48:	e7ae      	b.n	8008da8 <_scanf_float+0x158>
 8008e4a:	6822      	ldr	r2, [r4, #0]
 8008e4c:	0591      	lsls	r1, r2, #22
 8008e4e:	d400      	bmi.n	8008e52 <_scanf_float+0x202>
 8008e50:	e72f      	b.n	8008cb2 <_scanf_float+0x62>
 8008e52:	4943      	ldr	r1, [pc, #268]	@ (8008f60 <_scanf_float+0x310>)
 8008e54:	400a      	ands	r2, r1
 8008e56:	6022      	str	r2, [r4, #0]
 8008e58:	9a01      	ldr	r2, [sp, #4]
 8008e5a:	9205      	str	r2, [sp, #20]
 8008e5c:	e7a4      	b.n	8008da8 <_scanf_float+0x158>
 8008e5e:	21a0      	movs	r1, #160	@ 0xa0
 8008e60:	2080      	movs	r0, #128	@ 0x80
 8008e62:	6822      	ldr	r2, [r4, #0]
 8008e64:	00c9      	lsls	r1, r1, #3
 8008e66:	4011      	ands	r1, r2
 8008e68:	00c0      	lsls	r0, r0, #3
 8008e6a:	4281      	cmp	r1, r0
 8008e6c:	d006      	beq.n	8008e7c <_scanf_float+0x22c>
 8008e6e:	4202      	tst	r2, r0
 8008e70:	d100      	bne.n	8008e74 <_scanf_float+0x224>
 8008e72:	e71e      	b.n	8008cb2 <_scanf_float+0x62>
 8008e74:	9901      	ldr	r1, [sp, #4]
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d100      	bne.n	8008e7c <_scanf_float+0x22c>
 8008e7a:	e0f0      	b.n	800905e <_scanf_float+0x40e>
 8008e7c:	0591      	lsls	r1, r2, #22
 8008e7e:	d404      	bmi.n	8008e8a <_scanf_float+0x23a>
 8008e80:	9901      	ldr	r1, [sp, #4]
 8008e82:	9805      	ldr	r0, [sp, #20]
 8008e84:	9709      	str	r7, [sp, #36]	@ 0x24
 8008e86:	1a09      	subs	r1, r1, r0
 8008e88:	9108      	str	r1, [sp, #32]
 8008e8a:	4934      	ldr	r1, [pc, #208]	@ (8008f5c <_scanf_float+0x30c>)
 8008e8c:	400a      	ands	r2, r1
 8008e8e:	21c0      	movs	r1, #192	@ 0xc0
 8008e90:	0049      	lsls	r1, r1, #1
 8008e92:	430a      	orrs	r2, r1
 8008e94:	6022      	str	r2, [r4, #0]
 8008e96:	2200      	movs	r2, #0
 8008e98:	9201      	str	r2, [sp, #4]
 8008e9a:	e785      	b.n	8008da8 <_scanf_float+0x158>
 8008e9c:	2203      	movs	r2, #3
 8008e9e:	e79f      	b.n	8008de0 <_scanf_float+0x190>
 8008ea0:	23c0      	movs	r3, #192	@ 0xc0
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	0031      	movs	r1, r6
 8008ea6:	58e3      	ldr	r3, [r4, r3]
 8008ea8:	9803      	ldr	r0, [sp, #12]
 8008eaa:	4798      	blx	r3
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d100      	bne.n	8008eb2 <_scanf_float+0x262>
 8008eb0:	e6f1      	b.n	8008c96 <_scanf_float+0x46>
 8008eb2:	e6fe      	b.n	8008cb2 <_scanf_float+0x62>
 8008eb4:	3f01      	subs	r7, #1
 8008eb6:	5963      	ldr	r3, [r4, r5]
 8008eb8:	0032      	movs	r2, r6
 8008eba:	7839      	ldrb	r1, [r7, #0]
 8008ebc:	9803      	ldr	r0, [sp, #12]
 8008ebe:	4798      	blx	r3
 8008ec0:	6923      	ldr	r3, [r4, #16]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	6123      	str	r3, [r4, #16]
 8008ec6:	e702      	b.n	8008cce <_scanf_float+0x7e>
 8008ec8:	1e6b      	subs	r3, r5, #1
 8008eca:	2b06      	cmp	r3, #6
 8008ecc:	d80e      	bhi.n	8008eec <_scanf_float+0x29c>
 8008ece:	9702      	str	r7, [sp, #8]
 8008ed0:	2d02      	cmp	r5, #2
 8008ed2:	d920      	bls.n	8008f16 <_scanf_float+0x2c6>
 8008ed4:	1beb      	subs	r3, r5, r7
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	9306      	str	r3, [sp, #24]
 8008eda:	9b02      	ldr	r3, [sp, #8]
 8008edc:	9a06      	ldr	r2, [sp, #24]
 8008ede:	189b      	adds	r3, r3, r2
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d127      	bne.n	8008f36 <_scanf_float+0x2e6>
 8008ee6:	3d03      	subs	r5, #3
 8008ee8:	b2ed      	uxtb	r5, r5
 8008eea:	1b7f      	subs	r7, r7, r5
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	05da      	lsls	r2, r3, #23
 8008ef0:	d553      	bpl.n	8008f9a <_scanf_float+0x34a>
 8008ef2:	055b      	lsls	r3, r3, #21
 8008ef4:	d536      	bpl.n	8008f64 <_scanf_float+0x314>
 8008ef6:	25be      	movs	r5, #190	@ 0xbe
 8008ef8:	006d      	lsls	r5, r5, #1
 8008efa:	9b04      	ldr	r3, [sp, #16]
 8008efc:	429f      	cmp	r7, r3
 8008efe:	d800      	bhi.n	8008f02 <_scanf_float+0x2b2>
 8008f00:	e6e9      	b.n	8008cd6 <_scanf_float+0x86>
 8008f02:	3f01      	subs	r7, #1
 8008f04:	5963      	ldr	r3, [r4, r5]
 8008f06:	0032      	movs	r2, r6
 8008f08:	7839      	ldrb	r1, [r7, #0]
 8008f0a:	9803      	ldr	r0, [sp, #12]
 8008f0c:	4798      	blx	r3
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	6123      	str	r3, [r4, #16]
 8008f14:	e7f1      	b.n	8008efa <_scanf_float+0x2aa>
 8008f16:	25be      	movs	r5, #190	@ 0xbe
 8008f18:	006d      	lsls	r5, r5, #1
 8008f1a:	9b04      	ldr	r3, [sp, #16]
 8008f1c:	429f      	cmp	r7, r3
 8008f1e:	d800      	bhi.n	8008f22 <_scanf_float+0x2d2>
 8008f20:	e6d9      	b.n	8008cd6 <_scanf_float+0x86>
 8008f22:	3f01      	subs	r7, #1
 8008f24:	5963      	ldr	r3, [r4, r5]
 8008f26:	0032      	movs	r2, r6
 8008f28:	7839      	ldrb	r1, [r7, #0]
 8008f2a:	9803      	ldr	r0, [sp, #12]
 8008f2c:	4798      	blx	r3
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	6123      	str	r3, [r4, #16]
 8008f34:	e7f1      	b.n	8008f1a <_scanf_float+0x2ca>
 8008f36:	9b02      	ldr	r3, [sp, #8]
 8008f38:	0032      	movs	r2, r6
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	7819      	ldrb	r1, [r3, #0]
 8008f3e:	9302      	str	r3, [sp, #8]
 8008f40:	23be      	movs	r3, #190	@ 0xbe
 8008f42:	005b      	lsls	r3, r3, #1
 8008f44:	58e3      	ldr	r3, [r4, r3]
 8008f46:	9803      	ldr	r0, [sp, #12]
 8008f48:	4798      	blx	r3
 8008f4a:	6923      	ldr	r3, [r4, #16]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	6123      	str	r3, [r4, #16]
 8008f50:	e7c3      	b.n	8008eda <_scanf_float+0x28a>
 8008f52:	46c0      	nop			@ (mov r8, r8)
 8008f54:	fffffeff 	.word	0xfffffeff
 8008f58:	fffffe7f 	.word	0xfffffe7f
 8008f5c:	fffff87f 	.word	0xfffff87f
 8008f60:	fffffd7f 	.word	0xfffffd7f
 8008f64:	6923      	ldr	r3, [r4, #16]
 8008f66:	1e7d      	subs	r5, r7, #1
 8008f68:	7829      	ldrb	r1, [r5, #0]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	6123      	str	r3, [r4, #16]
 8008f6e:	2965      	cmp	r1, #101	@ 0x65
 8008f70:	d00c      	beq.n	8008f8c <_scanf_float+0x33c>
 8008f72:	2945      	cmp	r1, #69	@ 0x45
 8008f74:	d00a      	beq.n	8008f8c <_scanf_float+0x33c>
 8008f76:	23be      	movs	r3, #190	@ 0xbe
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	58e3      	ldr	r3, [r4, r3]
 8008f7c:	0032      	movs	r2, r6
 8008f7e:	9803      	ldr	r0, [sp, #12]
 8008f80:	4798      	blx	r3
 8008f82:	6923      	ldr	r3, [r4, #16]
 8008f84:	1ebd      	subs	r5, r7, #2
 8008f86:	3b01      	subs	r3, #1
 8008f88:	7829      	ldrb	r1, [r5, #0]
 8008f8a:	6123      	str	r3, [r4, #16]
 8008f8c:	23be      	movs	r3, #190	@ 0xbe
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	0032      	movs	r2, r6
 8008f92:	58e3      	ldr	r3, [r4, r3]
 8008f94:	9803      	ldr	r0, [sp, #12]
 8008f96:	4798      	blx	r3
 8008f98:	002f      	movs	r7, r5
 8008f9a:	6821      	ldr	r1, [r4, #0]
 8008f9c:	2310      	movs	r3, #16
 8008f9e:	000a      	movs	r2, r1
 8008fa0:	401a      	ands	r2, r3
 8008fa2:	4219      	tst	r1, r3
 8008fa4:	d001      	beq.n	8008faa <_scanf_float+0x35a>
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	e696      	b.n	8008cd8 <_scanf_float+0x88>
 8008faa:	21c0      	movs	r1, #192	@ 0xc0
 8008fac:	703a      	strb	r2, [r7, #0]
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	00c9      	lsls	r1, r1, #3
 8008fb2:	400b      	ands	r3, r1
 8008fb4:	2180      	movs	r1, #128	@ 0x80
 8008fb6:	00c9      	lsls	r1, r1, #3
 8008fb8:	428b      	cmp	r3, r1
 8008fba:	d11c      	bne.n	8008ff6 <_scanf_float+0x3a6>
 8008fbc:	9b05      	ldr	r3, [sp, #20]
 8008fbe:	9a01      	ldr	r2, [sp, #4]
 8008fc0:	9905      	ldr	r1, [sp, #20]
 8008fc2:	1a9a      	subs	r2, r3, r2
 8008fc4:	9b01      	ldr	r3, [sp, #4]
 8008fc6:	428b      	cmp	r3, r1
 8008fc8:	d121      	bne.n	800900e <_scanf_float+0x3be>
 8008fca:	2200      	movs	r2, #0
 8008fcc:	9904      	ldr	r1, [sp, #16]
 8008fce:	9803      	ldr	r0, [sp, #12]
 8008fd0:	f002 fc6e 	bl	800b8b0 <_strtod_r>
 8008fd4:	9b07      	ldr	r3, [sp, #28]
 8008fd6:	6822      	ldr	r2, [r4, #0]
 8008fd8:	0006      	movs	r6, r0
 8008fda:	000f      	movs	r7, r1
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	0791      	lsls	r1, r2, #30
 8008fe0:	d522      	bpl.n	8009028 <_scanf_float+0x3d8>
 8008fe2:	9907      	ldr	r1, [sp, #28]
 8008fe4:	1d1a      	adds	r2, r3, #4
 8008fe6:	600a      	str	r2, [r1, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	601e      	str	r6, [r3, #0]
 8008fec:	605f      	str	r7, [r3, #4]
 8008fee:	68e3      	ldr	r3, [r4, #12]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	60e3      	str	r3, [r4, #12]
 8008ff4:	e7d7      	b.n	8008fa6 <_scanf_float+0x356>
 8008ff6:	9b08      	ldr	r3, [sp, #32]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0e6      	beq.n	8008fca <_scanf_float+0x37a>
 8008ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ffe:	9803      	ldr	r0, [sp, #12]
 8009000:	1c59      	adds	r1, r3, #1
 8009002:	230a      	movs	r3, #10
 8009004:	f002 fce6 	bl	800b9d4 <_strtol_r>
 8009008:	9b08      	ldr	r3, [sp, #32]
 800900a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800900c:	1ac2      	subs	r2, r0, r3
 800900e:	0023      	movs	r3, r4
 8009010:	3370      	adds	r3, #112	@ 0x70
 8009012:	33ff      	adds	r3, #255	@ 0xff
 8009014:	429f      	cmp	r7, r3
 8009016:	d302      	bcc.n	800901e <_scanf_float+0x3ce>
 8009018:	0027      	movs	r7, r4
 800901a:	376f      	adds	r7, #111	@ 0x6f
 800901c:	37ff      	adds	r7, #255	@ 0xff
 800901e:	0038      	movs	r0, r7
 8009020:	4910      	ldr	r1, [pc, #64]	@ (8009064 <_scanf_float+0x414>)
 8009022:	f000 f8e7 	bl	80091f4 <siprintf>
 8009026:	e7d0      	b.n	8008fca <_scanf_float+0x37a>
 8009028:	1d19      	adds	r1, r3, #4
 800902a:	0752      	lsls	r2, r2, #29
 800902c:	d502      	bpl.n	8009034 <_scanf_float+0x3e4>
 800902e:	9a07      	ldr	r2, [sp, #28]
 8009030:	6011      	str	r1, [r2, #0]
 8009032:	e7d9      	b.n	8008fe8 <_scanf_float+0x398>
 8009034:	9a07      	ldr	r2, [sp, #28]
 8009036:	0030      	movs	r0, r6
 8009038:	6011      	str	r1, [r2, #0]
 800903a:	681d      	ldr	r5, [r3, #0]
 800903c:	0032      	movs	r2, r6
 800903e:	003b      	movs	r3, r7
 8009040:	0039      	movs	r1, r7
 8009042:	f7f9 ff3b 	bl	8002ebc <__aeabi_dcmpun>
 8009046:	2800      	cmp	r0, #0
 8009048:	d004      	beq.n	8009054 <_scanf_float+0x404>
 800904a:	4807      	ldr	r0, [pc, #28]	@ (8009068 <_scanf_float+0x418>)
 800904c:	f000 f9d0 	bl	80093f0 <nanf>
 8009050:	6028      	str	r0, [r5, #0]
 8009052:	e7cc      	b.n	8008fee <_scanf_float+0x39e>
 8009054:	0030      	movs	r0, r6
 8009056:	0039      	movs	r1, r7
 8009058:	f7fa f828 	bl	80030ac <__aeabi_d2f>
 800905c:	e7f8      	b.n	8009050 <_scanf_float+0x400>
 800905e:	2300      	movs	r3, #0
 8009060:	9301      	str	r3, [sp, #4]
 8009062:	e62d      	b.n	8008cc0 <_scanf_float+0x70>
 8009064:	0800dcc0 	.word	0x0800dcc0
 8009068:	0800e055 	.word	0x0800e055

0800906c <std>:
 800906c:	2300      	movs	r3, #0
 800906e:	b510      	push	{r4, lr}
 8009070:	0004      	movs	r4, r0
 8009072:	6003      	str	r3, [r0, #0]
 8009074:	6043      	str	r3, [r0, #4]
 8009076:	6083      	str	r3, [r0, #8]
 8009078:	8181      	strh	r1, [r0, #12]
 800907a:	6643      	str	r3, [r0, #100]	@ 0x64
 800907c:	81c2      	strh	r2, [r0, #14]
 800907e:	6103      	str	r3, [r0, #16]
 8009080:	6143      	str	r3, [r0, #20]
 8009082:	6183      	str	r3, [r0, #24]
 8009084:	0019      	movs	r1, r3
 8009086:	2208      	movs	r2, #8
 8009088:	305c      	adds	r0, #92	@ 0x5c
 800908a:	f000 f91f 	bl	80092cc <memset>
 800908e:	4b0b      	ldr	r3, [pc, #44]	@ (80090bc <std+0x50>)
 8009090:	6224      	str	r4, [r4, #32]
 8009092:	6263      	str	r3, [r4, #36]	@ 0x24
 8009094:	4b0a      	ldr	r3, [pc, #40]	@ (80090c0 <std+0x54>)
 8009096:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009098:	4b0a      	ldr	r3, [pc, #40]	@ (80090c4 <std+0x58>)
 800909a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800909c:	4b0a      	ldr	r3, [pc, #40]	@ (80090c8 <std+0x5c>)
 800909e:	6323      	str	r3, [r4, #48]	@ 0x30
 80090a0:	4b0a      	ldr	r3, [pc, #40]	@ (80090cc <std+0x60>)
 80090a2:	429c      	cmp	r4, r3
 80090a4:	d005      	beq.n	80090b2 <std+0x46>
 80090a6:	4b0a      	ldr	r3, [pc, #40]	@ (80090d0 <std+0x64>)
 80090a8:	429c      	cmp	r4, r3
 80090aa:	d002      	beq.n	80090b2 <std+0x46>
 80090ac:	4b09      	ldr	r3, [pc, #36]	@ (80090d4 <std+0x68>)
 80090ae:	429c      	cmp	r4, r3
 80090b0:	d103      	bne.n	80090ba <std+0x4e>
 80090b2:	0020      	movs	r0, r4
 80090b4:	3058      	adds	r0, #88	@ 0x58
 80090b6:	f000 f98d 	bl	80093d4 <__retarget_lock_init_recursive>
 80090ba:	bd10      	pop	{r4, pc}
 80090bc:	08009235 	.word	0x08009235
 80090c0:	0800925d 	.word	0x0800925d
 80090c4:	08009295 	.word	0x08009295
 80090c8:	080092c1 	.word	0x080092c1
 80090cc:	20000358 	.word	0x20000358
 80090d0:	200003c0 	.word	0x200003c0
 80090d4:	20000428 	.word	0x20000428

080090d8 <stdio_exit_handler>:
 80090d8:	b510      	push	{r4, lr}
 80090da:	4a03      	ldr	r2, [pc, #12]	@ (80090e8 <stdio_exit_handler+0x10>)
 80090dc:	4903      	ldr	r1, [pc, #12]	@ (80090ec <stdio_exit_handler+0x14>)
 80090de:	4804      	ldr	r0, [pc, #16]	@ (80090f0 <stdio_exit_handler+0x18>)
 80090e0:	f000 f86c 	bl	80091bc <_fwalk_sglue>
 80090e4:	bd10      	pop	{r4, pc}
 80090e6:	46c0      	nop			@ (mov r8, r8)
 80090e8:	20000024 	.word	0x20000024
 80090ec:	0800bda5 	.word	0x0800bda5
 80090f0:	20000034 	.word	0x20000034

080090f4 <cleanup_stdio>:
 80090f4:	6841      	ldr	r1, [r0, #4]
 80090f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009124 <cleanup_stdio+0x30>)
 80090f8:	b510      	push	{r4, lr}
 80090fa:	0004      	movs	r4, r0
 80090fc:	4299      	cmp	r1, r3
 80090fe:	d001      	beq.n	8009104 <cleanup_stdio+0x10>
 8009100:	f002 fe50 	bl	800bda4 <_fflush_r>
 8009104:	68a1      	ldr	r1, [r4, #8]
 8009106:	4b08      	ldr	r3, [pc, #32]	@ (8009128 <cleanup_stdio+0x34>)
 8009108:	4299      	cmp	r1, r3
 800910a:	d002      	beq.n	8009112 <cleanup_stdio+0x1e>
 800910c:	0020      	movs	r0, r4
 800910e:	f002 fe49 	bl	800bda4 <_fflush_r>
 8009112:	68e1      	ldr	r1, [r4, #12]
 8009114:	4b05      	ldr	r3, [pc, #20]	@ (800912c <cleanup_stdio+0x38>)
 8009116:	4299      	cmp	r1, r3
 8009118:	d002      	beq.n	8009120 <cleanup_stdio+0x2c>
 800911a:	0020      	movs	r0, r4
 800911c:	f002 fe42 	bl	800bda4 <_fflush_r>
 8009120:	bd10      	pop	{r4, pc}
 8009122:	46c0      	nop			@ (mov r8, r8)
 8009124:	20000358 	.word	0x20000358
 8009128:	200003c0 	.word	0x200003c0
 800912c:	20000428 	.word	0x20000428

08009130 <global_stdio_init.part.0>:
 8009130:	b510      	push	{r4, lr}
 8009132:	4b09      	ldr	r3, [pc, #36]	@ (8009158 <global_stdio_init.part.0+0x28>)
 8009134:	4a09      	ldr	r2, [pc, #36]	@ (800915c <global_stdio_init.part.0+0x2c>)
 8009136:	2104      	movs	r1, #4
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	4809      	ldr	r0, [pc, #36]	@ (8009160 <global_stdio_init.part.0+0x30>)
 800913c:	2200      	movs	r2, #0
 800913e:	f7ff ff95 	bl	800906c <std>
 8009142:	2201      	movs	r2, #1
 8009144:	2109      	movs	r1, #9
 8009146:	4807      	ldr	r0, [pc, #28]	@ (8009164 <global_stdio_init.part.0+0x34>)
 8009148:	f7ff ff90 	bl	800906c <std>
 800914c:	2202      	movs	r2, #2
 800914e:	2112      	movs	r1, #18
 8009150:	4805      	ldr	r0, [pc, #20]	@ (8009168 <global_stdio_init.part.0+0x38>)
 8009152:	f7ff ff8b 	bl	800906c <std>
 8009156:	bd10      	pop	{r4, pc}
 8009158:	20000490 	.word	0x20000490
 800915c:	080090d9 	.word	0x080090d9
 8009160:	20000358 	.word	0x20000358
 8009164:	200003c0 	.word	0x200003c0
 8009168:	20000428 	.word	0x20000428

0800916c <__sfp_lock_acquire>:
 800916c:	b510      	push	{r4, lr}
 800916e:	4802      	ldr	r0, [pc, #8]	@ (8009178 <__sfp_lock_acquire+0xc>)
 8009170:	f000 f931 	bl	80093d6 <__retarget_lock_acquire_recursive>
 8009174:	bd10      	pop	{r4, pc}
 8009176:	46c0      	nop			@ (mov r8, r8)
 8009178:	20000499 	.word	0x20000499

0800917c <__sfp_lock_release>:
 800917c:	b510      	push	{r4, lr}
 800917e:	4802      	ldr	r0, [pc, #8]	@ (8009188 <__sfp_lock_release+0xc>)
 8009180:	f000 f92a 	bl	80093d8 <__retarget_lock_release_recursive>
 8009184:	bd10      	pop	{r4, pc}
 8009186:	46c0      	nop			@ (mov r8, r8)
 8009188:	20000499 	.word	0x20000499

0800918c <__sinit>:
 800918c:	b510      	push	{r4, lr}
 800918e:	0004      	movs	r4, r0
 8009190:	f7ff ffec 	bl	800916c <__sfp_lock_acquire>
 8009194:	6a23      	ldr	r3, [r4, #32]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <__sinit+0x14>
 800919a:	f7ff ffef 	bl	800917c <__sfp_lock_release>
 800919e:	bd10      	pop	{r4, pc}
 80091a0:	4b04      	ldr	r3, [pc, #16]	@ (80091b4 <__sinit+0x28>)
 80091a2:	6223      	str	r3, [r4, #32]
 80091a4:	4b04      	ldr	r3, [pc, #16]	@ (80091b8 <__sinit+0x2c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1f6      	bne.n	800919a <__sinit+0xe>
 80091ac:	f7ff ffc0 	bl	8009130 <global_stdio_init.part.0>
 80091b0:	e7f3      	b.n	800919a <__sinit+0xe>
 80091b2:	46c0      	nop			@ (mov r8, r8)
 80091b4:	080090f5 	.word	0x080090f5
 80091b8:	20000490 	.word	0x20000490

080091bc <_fwalk_sglue>:
 80091bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091be:	0014      	movs	r4, r2
 80091c0:	2600      	movs	r6, #0
 80091c2:	9000      	str	r0, [sp, #0]
 80091c4:	9101      	str	r1, [sp, #4]
 80091c6:	68a5      	ldr	r5, [r4, #8]
 80091c8:	6867      	ldr	r7, [r4, #4]
 80091ca:	3f01      	subs	r7, #1
 80091cc:	d504      	bpl.n	80091d8 <_fwalk_sglue+0x1c>
 80091ce:	6824      	ldr	r4, [r4, #0]
 80091d0:	2c00      	cmp	r4, #0
 80091d2:	d1f8      	bne.n	80091c6 <_fwalk_sglue+0xa>
 80091d4:	0030      	movs	r0, r6
 80091d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091d8:	89ab      	ldrh	r3, [r5, #12]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d908      	bls.n	80091f0 <_fwalk_sglue+0x34>
 80091de:	220e      	movs	r2, #14
 80091e0:	5eab      	ldrsh	r3, [r5, r2]
 80091e2:	3301      	adds	r3, #1
 80091e4:	d004      	beq.n	80091f0 <_fwalk_sglue+0x34>
 80091e6:	0029      	movs	r1, r5
 80091e8:	9800      	ldr	r0, [sp, #0]
 80091ea:	9b01      	ldr	r3, [sp, #4]
 80091ec:	4798      	blx	r3
 80091ee:	4306      	orrs	r6, r0
 80091f0:	3568      	adds	r5, #104	@ 0x68
 80091f2:	e7ea      	b.n	80091ca <_fwalk_sglue+0xe>

080091f4 <siprintf>:
 80091f4:	b40e      	push	{r1, r2, r3}
 80091f6:	b500      	push	{lr}
 80091f8:	490b      	ldr	r1, [pc, #44]	@ (8009228 <siprintf+0x34>)
 80091fa:	b09c      	sub	sp, #112	@ 0x70
 80091fc:	ab1d      	add	r3, sp, #116	@ 0x74
 80091fe:	9002      	str	r0, [sp, #8]
 8009200:	9006      	str	r0, [sp, #24]
 8009202:	9107      	str	r1, [sp, #28]
 8009204:	9104      	str	r1, [sp, #16]
 8009206:	4809      	ldr	r0, [pc, #36]	@ (800922c <siprintf+0x38>)
 8009208:	4909      	ldr	r1, [pc, #36]	@ (8009230 <siprintf+0x3c>)
 800920a:	cb04      	ldmia	r3!, {r2}
 800920c:	9105      	str	r1, [sp, #20]
 800920e:	6800      	ldr	r0, [r0, #0]
 8009210:	a902      	add	r1, sp, #8
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	f002 fc42 	bl	800ba9c <_svfiprintf_r>
 8009218:	2200      	movs	r2, #0
 800921a:	9b02      	ldr	r3, [sp, #8]
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	b01c      	add	sp, #112	@ 0x70
 8009220:	bc08      	pop	{r3}
 8009222:	b003      	add	sp, #12
 8009224:	4718      	bx	r3
 8009226:	46c0      	nop			@ (mov r8, r8)
 8009228:	7fffffff 	.word	0x7fffffff
 800922c:	20000030 	.word	0x20000030
 8009230:	ffff0208 	.word	0xffff0208

08009234 <__sread>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	000c      	movs	r4, r1
 8009238:	250e      	movs	r5, #14
 800923a:	5f49      	ldrsh	r1, [r1, r5]
 800923c:	f000 f878 	bl	8009330 <_read_r>
 8009240:	2800      	cmp	r0, #0
 8009242:	db03      	blt.n	800924c <__sread+0x18>
 8009244:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009246:	181b      	adds	r3, r3, r0
 8009248:	6563      	str	r3, [r4, #84]	@ 0x54
 800924a:	bd70      	pop	{r4, r5, r6, pc}
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	4a02      	ldr	r2, [pc, #8]	@ (8009258 <__sread+0x24>)
 8009250:	4013      	ands	r3, r2
 8009252:	81a3      	strh	r3, [r4, #12]
 8009254:	e7f9      	b.n	800924a <__sread+0x16>
 8009256:	46c0      	nop			@ (mov r8, r8)
 8009258:	ffffefff 	.word	0xffffefff

0800925c <__swrite>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	001f      	movs	r7, r3
 8009260:	898b      	ldrh	r3, [r1, #12]
 8009262:	0005      	movs	r5, r0
 8009264:	000c      	movs	r4, r1
 8009266:	0016      	movs	r6, r2
 8009268:	05db      	lsls	r3, r3, #23
 800926a:	d505      	bpl.n	8009278 <__swrite+0x1c>
 800926c:	230e      	movs	r3, #14
 800926e:	5ec9      	ldrsh	r1, [r1, r3]
 8009270:	2200      	movs	r2, #0
 8009272:	2302      	movs	r3, #2
 8009274:	f000 f848 	bl	8009308 <_lseek_r>
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	4a05      	ldr	r2, [pc, #20]	@ (8009290 <__swrite+0x34>)
 800927c:	0028      	movs	r0, r5
 800927e:	4013      	ands	r3, r2
 8009280:	81a3      	strh	r3, [r4, #12]
 8009282:	0032      	movs	r2, r6
 8009284:	230e      	movs	r3, #14
 8009286:	5ee1      	ldrsh	r1, [r4, r3]
 8009288:	003b      	movs	r3, r7
 800928a:	f000 f865 	bl	8009358 <_write_r>
 800928e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009290:	ffffefff 	.word	0xffffefff

08009294 <__sseek>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	000c      	movs	r4, r1
 8009298:	250e      	movs	r5, #14
 800929a:	5f49      	ldrsh	r1, [r1, r5]
 800929c:	f000 f834 	bl	8009308 <_lseek_r>
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	1c42      	adds	r2, r0, #1
 80092a4:	d103      	bne.n	80092ae <__sseek+0x1a>
 80092a6:	4a05      	ldr	r2, [pc, #20]	@ (80092bc <__sseek+0x28>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	81a3      	strh	r3, [r4, #12]
 80092ac:	bd70      	pop	{r4, r5, r6, pc}
 80092ae:	2280      	movs	r2, #128	@ 0x80
 80092b0:	0152      	lsls	r2, r2, #5
 80092b2:	4313      	orrs	r3, r2
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80092b8:	e7f8      	b.n	80092ac <__sseek+0x18>
 80092ba:	46c0      	nop			@ (mov r8, r8)
 80092bc:	ffffefff 	.word	0xffffefff

080092c0 <__sclose>:
 80092c0:	b510      	push	{r4, lr}
 80092c2:	230e      	movs	r3, #14
 80092c4:	5ec9      	ldrsh	r1, [r1, r3]
 80092c6:	f000 f80d 	bl	80092e4 <_close_r>
 80092ca:	bd10      	pop	{r4, pc}

080092cc <memset>:
 80092cc:	0003      	movs	r3, r0
 80092ce:	1882      	adds	r2, r0, r2
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d100      	bne.n	80092d6 <memset+0xa>
 80092d4:	4770      	bx	lr
 80092d6:	7019      	strb	r1, [r3, #0]
 80092d8:	3301      	adds	r3, #1
 80092da:	e7f9      	b.n	80092d0 <memset+0x4>

080092dc <_localeconv_r>:
 80092dc:	4800      	ldr	r0, [pc, #0]	@ (80092e0 <_localeconv_r+0x4>)
 80092de:	4770      	bx	lr
 80092e0:	20000170 	.word	0x20000170

080092e4 <_close_r>:
 80092e4:	2300      	movs	r3, #0
 80092e6:	b570      	push	{r4, r5, r6, lr}
 80092e8:	4d06      	ldr	r5, [pc, #24]	@ (8009304 <_close_r+0x20>)
 80092ea:	0004      	movs	r4, r0
 80092ec:	0008      	movs	r0, r1
 80092ee:	602b      	str	r3, [r5, #0]
 80092f0:	f7fc fb7b 	bl	80059ea <_close>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d103      	bne.n	8009300 <_close_r+0x1c>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d000      	beq.n	8009300 <_close_r+0x1c>
 80092fe:	6023      	str	r3, [r4, #0]
 8009300:	bd70      	pop	{r4, r5, r6, pc}
 8009302:	46c0      	nop			@ (mov r8, r8)
 8009304:	20000494 	.word	0x20000494

08009308 <_lseek_r>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	0004      	movs	r4, r0
 800930c:	0008      	movs	r0, r1
 800930e:	0011      	movs	r1, r2
 8009310:	001a      	movs	r2, r3
 8009312:	2300      	movs	r3, #0
 8009314:	4d05      	ldr	r5, [pc, #20]	@ (800932c <_lseek_r+0x24>)
 8009316:	602b      	str	r3, [r5, #0]
 8009318:	f7fc fb88 	bl	8005a2c <_lseek>
 800931c:	1c43      	adds	r3, r0, #1
 800931e:	d103      	bne.n	8009328 <_lseek_r+0x20>
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d000      	beq.n	8009328 <_lseek_r+0x20>
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	bd70      	pop	{r4, r5, r6, pc}
 800932a:	46c0      	nop			@ (mov r8, r8)
 800932c:	20000494 	.word	0x20000494

08009330 <_read_r>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	0004      	movs	r4, r0
 8009334:	0008      	movs	r0, r1
 8009336:	0011      	movs	r1, r2
 8009338:	001a      	movs	r2, r3
 800933a:	2300      	movs	r3, #0
 800933c:	4d05      	ldr	r5, [pc, #20]	@ (8009354 <_read_r+0x24>)
 800933e:	602b      	str	r3, [r5, #0]
 8009340:	f7fc fb1a 	bl	8005978 <_read>
 8009344:	1c43      	adds	r3, r0, #1
 8009346:	d103      	bne.n	8009350 <_read_r+0x20>
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d000      	beq.n	8009350 <_read_r+0x20>
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	bd70      	pop	{r4, r5, r6, pc}
 8009352:	46c0      	nop			@ (mov r8, r8)
 8009354:	20000494 	.word	0x20000494

08009358 <_write_r>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	0004      	movs	r4, r0
 800935c:	0008      	movs	r0, r1
 800935e:	0011      	movs	r1, r2
 8009360:	001a      	movs	r2, r3
 8009362:	2300      	movs	r3, #0
 8009364:	4d05      	ldr	r5, [pc, #20]	@ (800937c <_write_r+0x24>)
 8009366:	602b      	str	r3, [r5, #0]
 8009368:	f7fc fb23 	bl	80059b2 <_write>
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d103      	bne.n	8009378 <_write_r+0x20>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d000      	beq.n	8009378 <_write_r+0x20>
 8009376:	6023      	str	r3, [r4, #0]
 8009378:	bd70      	pop	{r4, r5, r6, pc}
 800937a:	46c0      	nop			@ (mov r8, r8)
 800937c:	20000494 	.word	0x20000494

08009380 <__errno>:
 8009380:	4b01      	ldr	r3, [pc, #4]	@ (8009388 <__errno+0x8>)
 8009382:	6818      	ldr	r0, [r3, #0]
 8009384:	4770      	bx	lr
 8009386:	46c0      	nop			@ (mov r8, r8)
 8009388:	20000030 	.word	0x20000030

0800938c <__libc_init_array>:
 800938c:	b570      	push	{r4, r5, r6, lr}
 800938e:	2600      	movs	r6, #0
 8009390:	4c0c      	ldr	r4, [pc, #48]	@ (80093c4 <__libc_init_array+0x38>)
 8009392:	4d0d      	ldr	r5, [pc, #52]	@ (80093c8 <__libc_init_array+0x3c>)
 8009394:	1b64      	subs	r4, r4, r5
 8009396:	10a4      	asrs	r4, r4, #2
 8009398:	42a6      	cmp	r6, r4
 800939a:	d109      	bne.n	80093b0 <__libc_init_array+0x24>
 800939c:	2600      	movs	r6, #0
 800939e:	f004 fb6b 	bl	800da78 <_init>
 80093a2:	4c0a      	ldr	r4, [pc, #40]	@ (80093cc <__libc_init_array+0x40>)
 80093a4:	4d0a      	ldr	r5, [pc, #40]	@ (80093d0 <__libc_init_array+0x44>)
 80093a6:	1b64      	subs	r4, r4, r5
 80093a8:	10a4      	asrs	r4, r4, #2
 80093aa:	42a6      	cmp	r6, r4
 80093ac:	d105      	bne.n	80093ba <__libc_init_array+0x2e>
 80093ae:	bd70      	pop	{r4, r5, r6, pc}
 80093b0:	00b3      	lsls	r3, r6, #2
 80093b2:	58eb      	ldr	r3, [r5, r3]
 80093b4:	4798      	blx	r3
 80093b6:	3601      	adds	r6, #1
 80093b8:	e7ee      	b.n	8009398 <__libc_init_array+0xc>
 80093ba:	00b3      	lsls	r3, r6, #2
 80093bc:	58eb      	ldr	r3, [r5, r3]
 80093be:	4798      	blx	r3
 80093c0:	3601      	adds	r6, #1
 80093c2:	e7f2      	b.n	80093aa <__libc_init_array+0x1e>
 80093c4:	0800e0f0 	.word	0x0800e0f0
 80093c8:	0800e0f0 	.word	0x0800e0f0
 80093cc:	0800e0f4 	.word	0x0800e0f4
 80093d0:	0800e0f0 	.word	0x0800e0f0

080093d4 <__retarget_lock_init_recursive>:
 80093d4:	4770      	bx	lr

080093d6 <__retarget_lock_acquire_recursive>:
 80093d6:	4770      	bx	lr

080093d8 <__retarget_lock_release_recursive>:
 80093d8:	4770      	bx	lr

080093da <memchr>:
 80093da:	b2c9      	uxtb	r1, r1
 80093dc:	1882      	adds	r2, r0, r2
 80093de:	4290      	cmp	r0, r2
 80093e0:	d101      	bne.n	80093e6 <memchr+0xc>
 80093e2:	2000      	movs	r0, #0
 80093e4:	4770      	bx	lr
 80093e6:	7803      	ldrb	r3, [r0, #0]
 80093e8:	428b      	cmp	r3, r1
 80093ea:	d0fb      	beq.n	80093e4 <memchr+0xa>
 80093ec:	3001      	adds	r0, #1
 80093ee:	e7f6      	b.n	80093de <memchr+0x4>

080093f0 <nanf>:
 80093f0:	4800      	ldr	r0, [pc, #0]	@ (80093f4 <nanf+0x4>)
 80093f2:	4770      	bx	lr
 80093f4:	7fc00000 	.word	0x7fc00000

080093f8 <quorem>:
 80093f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093fa:	6902      	ldr	r2, [r0, #16]
 80093fc:	690f      	ldr	r7, [r1, #16]
 80093fe:	b087      	sub	sp, #28
 8009400:	0006      	movs	r6, r0
 8009402:	000b      	movs	r3, r1
 8009404:	2000      	movs	r0, #0
 8009406:	9102      	str	r1, [sp, #8]
 8009408:	42ba      	cmp	r2, r7
 800940a:	db6d      	blt.n	80094e8 <quorem+0xf0>
 800940c:	3f01      	subs	r7, #1
 800940e:	00bc      	lsls	r4, r7, #2
 8009410:	3314      	adds	r3, #20
 8009412:	9305      	str	r3, [sp, #20]
 8009414:	191b      	adds	r3, r3, r4
 8009416:	9303      	str	r3, [sp, #12]
 8009418:	0033      	movs	r3, r6
 800941a:	3314      	adds	r3, #20
 800941c:	191c      	adds	r4, r3, r4
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	9304      	str	r3, [sp, #16]
 8009424:	9b03      	ldr	r3, [sp, #12]
 8009426:	9804      	ldr	r0, [sp, #16]
 8009428:	681d      	ldr	r5, [r3, #0]
 800942a:	3501      	adds	r5, #1
 800942c:	0029      	movs	r1, r5
 800942e:	f7f6 fe87 	bl	8000140 <__udivsi3>
 8009432:	9b04      	ldr	r3, [sp, #16]
 8009434:	9000      	str	r0, [sp, #0]
 8009436:	42ab      	cmp	r3, r5
 8009438:	d32b      	bcc.n	8009492 <quorem+0x9a>
 800943a:	9b05      	ldr	r3, [sp, #20]
 800943c:	9d01      	ldr	r5, [sp, #4]
 800943e:	469c      	mov	ip, r3
 8009440:	2300      	movs	r3, #0
 8009442:	9305      	str	r3, [sp, #20]
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	4662      	mov	r2, ip
 8009448:	ca08      	ldmia	r2!, {r3}
 800944a:	6828      	ldr	r0, [r5, #0]
 800944c:	4694      	mov	ip, r2
 800944e:	9a00      	ldr	r2, [sp, #0]
 8009450:	b299      	uxth	r1, r3
 8009452:	4351      	muls	r1, r2
 8009454:	9a05      	ldr	r2, [sp, #20]
 8009456:	0c1b      	lsrs	r3, r3, #16
 8009458:	1889      	adds	r1, r1, r2
 800945a:	9a00      	ldr	r2, [sp, #0]
 800945c:	4353      	muls	r3, r2
 800945e:	0c0a      	lsrs	r2, r1, #16
 8009460:	189b      	adds	r3, r3, r2
 8009462:	0c1a      	lsrs	r2, r3, #16
 8009464:	b289      	uxth	r1, r1
 8009466:	9205      	str	r2, [sp, #20]
 8009468:	b282      	uxth	r2, r0
 800946a:	1a52      	subs	r2, r2, r1
 800946c:	9904      	ldr	r1, [sp, #16]
 800946e:	0c00      	lsrs	r0, r0, #16
 8009470:	1852      	adds	r2, r2, r1
 8009472:	b29b      	uxth	r3, r3
 8009474:	1411      	asrs	r1, r2, #16
 8009476:	1ac3      	subs	r3, r0, r3
 8009478:	185b      	adds	r3, r3, r1
 800947a:	1419      	asrs	r1, r3, #16
 800947c:	b292      	uxth	r2, r2
 800947e:	041b      	lsls	r3, r3, #16
 8009480:	431a      	orrs	r2, r3
 8009482:	9b03      	ldr	r3, [sp, #12]
 8009484:	9104      	str	r1, [sp, #16]
 8009486:	c504      	stmia	r5!, {r2}
 8009488:	4563      	cmp	r3, ip
 800948a:	d2dc      	bcs.n	8009446 <quorem+0x4e>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d030      	beq.n	80094f4 <quorem+0xfc>
 8009492:	0030      	movs	r0, r6
 8009494:	9902      	ldr	r1, [sp, #8]
 8009496:	f001 fa11 	bl	800a8bc <__mcmp>
 800949a:	2800      	cmp	r0, #0
 800949c:	db23      	blt.n	80094e6 <quorem+0xee>
 800949e:	0034      	movs	r4, r6
 80094a0:	2500      	movs	r5, #0
 80094a2:	9902      	ldr	r1, [sp, #8]
 80094a4:	3414      	adds	r4, #20
 80094a6:	3114      	adds	r1, #20
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	c901      	ldmia	r1!, {r0}
 80094ac:	9302      	str	r3, [sp, #8]
 80094ae:	466b      	mov	r3, sp
 80094b0:	891b      	ldrh	r3, [r3, #8]
 80094b2:	b282      	uxth	r2, r0
 80094b4:	1a9a      	subs	r2, r3, r2
 80094b6:	9b02      	ldr	r3, [sp, #8]
 80094b8:	1952      	adds	r2, r2, r5
 80094ba:	0c00      	lsrs	r0, r0, #16
 80094bc:	0c1b      	lsrs	r3, r3, #16
 80094be:	1a1b      	subs	r3, r3, r0
 80094c0:	1410      	asrs	r0, r2, #16
 80094c2:	181b      	adds	r3, r3, r0
 80094c4:	141d      	asrs	r5, r3, #16
 80094c6:	b292      	uxth	r2, r2
 80094c8:	041b      	lsls	r3, r3, #16
 80094ca:	431a      	orrs	r2, r3
 80094cc:	9b03      	ldr	r3, [sp, #12]
 80094ce:	c404      	stmia	r4!, {r2}
 80094d0:	428b      	cmp	r3, r1
 80094d2:	d2e9      	bcs.n	80094a8 <quorem+0xb0>
 80094d4:	9a01      	ldr	r2, [sp, #4]
 80094d6:	00bb      	lsls	r3, r7, #2
 80094d8:	18d3      	adds	r3, r2, r3
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	2a00      	cmp	r2, #0
 80094de:	d013      	beq.n	8009508 <quorem+0x110>
 80094e0:	9b00      	ldr	r3, [sp, #0]
 80094e2:	3301      	adds	r3, #1
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	9800      	ldr	r0, [sp, #0]
 80094e8:	b007      	add	sp, #28
 80094ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d104      	bne.n	80094fc <quorem+0x104>
 80094f2:	3f01      	subs	r7, #1
 80094f4:	9b01      	ldr	r3, [sp, #4]
 80094f6:	3c04      	subs	r4, #4
 80094f8:	42a3      	cmp	r3, r4
 80094fa:	d3f7      	bcc.n	80094ec <quorem+0xf4>
 80094fc:	6137      	str	r7, [r6, #16]
 80094fe:	e7c8      	b.n	8009492 <quorem+0x9a>
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	2a00      	cmp	r2, #0
 8009504:	d104      	bne.n	8009510 <quorem+0x118>
 8009506:	3f01      	subs	r7, #1
 8009508:	9a01      	ldr	r2, [sp, #4]
 800950a:	3b04      	subs	r3, #4
 800950c:	429a      	cmp	r2, r3
 800950e:	d3f7      	bcc.n	8009500 <quorem+0x108>
 8009510:	6137      	str	r7, [r6, #16]
 8009512:	e7e5      	b.n	80094e0 <quorem+0xe8>

08009514 <_dtoa_r>:
 8009514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009516:	0014      	movs	r4, r2
 8009518:	001d      	movs	r5, r3
 800951a:	69c6      	ldr	r6, [r0, #28]
 800951c:	b09d      	sub	sp, #116	@ 0x74
 800951e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009520:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009522:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8009524:	9003      	str	r0, [sp, #12]
 8009526:	2e00      	cmp	r6, #0
 8009528:	d10f      	bne.n	800954a <_dtoa_r+0x36>
 800952a:	2010      	movs	r0, #16
 800952c:	f000 fe30 	bl	800a190 <malloc>
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	1e02      	subs	r2, r0, #0
 8009534:	61d8      	str	r0, [r3, #28]
 8009536:	d104      	bne.n	8009542 <_dtoa_r+0x2e>
 8009538:	21ef      	movs	r1, #239	@ 0xef
 800953a:	4bc7      	ldr	r3, [pc, #796]	@ (8009858 <_dtoa_r+0x344>)
 800953c:	48c7      	ldr	r0, [pc, #796]	@ (800985c <_dtoa_r+0x348>)
 800953e:	f002 fca3 	bl	800be88 <__assert_func>
 8009542:	6046      	str	r6, [r0, #4]
 8009544:	6086      	str	r6, [r0, #8]
 8009546:	6006      	str	r6, [r0, #0]
 8009548:	60c6      	str	r6, [r0, #12]
 800954a:	9b03      	ldr	r3, [sp, #12]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	6819      	ldr	r1, [r3, #0]
 8009550:	2900      	cmp	r1, #0
 8009552:	d00b      	beq.n	800956c <_dtoa_r+0x58>
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	2301      	movs	r3, #1
 8009558:	4093      	lsls	r3, r2
 800955a:	604a      	str	r2, [r1, #4]
 800955c:	608b      	str	r3, [r1, #8]
 800955e:	9803      	ldr	r0, [sp, #12]
 8009560:	f000 ff16 	bl	800a390 <_Bfree>
 8009564:	2200      	movs	r2, #0
 8009566:	9b03      	ldr	r3, [sp, #12]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	2d00      	cmp	r5, #0
 800956e:	da1e      	bge.n	80095ae <_dtoa_r+0x9a>
 8009570:	2301      	movs	r3, #1
 8009572:	603b      	str	r3, [r7, #0]
 8009574:	006b      	lsls	r3, r5, #1
 8009576:	085b      	lsrs	r3, r3, #1
 8009578:	930b      	str	r3, [sp, #44]	@ 0x2c
 800957a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800957c:	4bb8      	ldr	r3, [pc, #736]	@ (8009860 <_dtoa_r+0x34c>)
 800957e:	4ab8      	ldr	r2, [pc, #736]	@ (8009860 <_dtoa_r+0x34c>)
 8009580:	403b      	ands	r3, r7
 8009582:	4293      	cmp	r3, r2
 8009584:	d116      	bne.n	80095b4 <_dtoa_r+0xa0>
 8009586:	4bb7      	ldr	r3, [pc, #732]	@ (8009864 <_dtoa_r+0x350>)
 8009588:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	033b      	lsls	r3, r7, #12
 800958e:	0b1b      	lsrs	r3, r3, #12
 8009590:	4323      	orrs	r3, r4
 8009592:	d101      	bne.n	8009598 <_dtoa_r+0x84>
 8009594:	f000 fd83 	bl	800a09e <_dtoa_r+0xb8a>
 8009598:	4bb3      	ldr	r3, [pc, #716]	@ (8009868 <_dtoa_r+0x354>)
 800959a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800959c:	9308      	str	r3, [sp, #32]
 800959e:	2a00      	cmp	r2, #0
 80095a0:	d002      	beq.n	80095a8 <_dtoa_r+0x94>
 80095a2:	4bb2      	ldr	r3, [pc, #712]	@ (800986c <_dtoa_r+0x358>)
 80095a4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	9808      	ldr	r0, [sp, #32]
 80095aa:	b01d      	add	sp, #116	@ 0x74
 80095ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ae:	2300      	movs	r3, #0
 80095b0:	603b      	str	r3, [r7, #0]
 80095b2:	e7e2      	b.n	800957a <_dtoa_r+0x66>
 80095b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095b8:	9212      	str	r2, [sp, #72]	@ 0x48
 80095ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80095be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80095c0:	2200      	movs	r2, #0
 80095c2:	2300      	movs	r3, #0
 80095c4:	f7f6 ff42 	bl	800044c <__aeabi_dcmpeq>
 80095c8:	1e06      	subs	r6, r0, #0
 80095ca:	d00b      	beq.n	80095e4 <_dtoa_r+0xd0>
 80095cc:	2301      	movs	r3, #1
 80095ce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <_dtoa_r+0xca>
 80095d8:	4ba5      	ldr	r3, [pc, #660]	@ (8009870 <_dtoa_r+0x35c>)
 80095da:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80095dc:	6013      	str	r3, [r2, #0]
 80095de:	4ba5      	ldr	r3, [pc, #660]	@ (8009874 <_dtoa_r+0x360>)
 80095e0:	9308      	str	r3, [sp, #32]
 80095e2:	e7e1      	b.n	80095a8 <_dtoa_r+0x94>
 80095e4:	ab1a      	add	r3, sp, #104	@ 0x68
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	9803      	ldr	r0, [sp, #12]
 80095ee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80095f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80095f2:	f001 fa85 	bl	800ab00 <__d2b>
 80095f6:	007a      	lsls	r2, r7, #1
 80095f8:	9005      	str	r0, [sp, #20]
 80095fa:	0d52      	lsrs	r2, r2, #21
 80095fc:	d100      	bne.n	8009600 <_dtoa_r+0xec>
 80095fe:	e07b      	b.n	80096f8 <_dtoa_r+0x1e4>
 8009600:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009602:	9618      	str	r6, [sp, #96]	@ 0x60
 8009604:	0319      	lsls	r1, r3, #12
 8009606:	4b9c      	ldr	r3, [pc, #624]	@ (8009878 <_dtoa_r+0x364>)
 8009608:	0b09      	lsrs	r1, r1, #12
 800960a:	430b      	orrs	r3, r1
 800960c:	499b      	ldr	r1, [pc, #620]	@ (800987c <_dtoa_r+0x368>)
 800960e:	1857      	adds	r7, r2, r1
 8009610:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009612:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009614:	0019      	movs	r1, r3
 8009616:	2200      	movs	r2, #0
 8009618:	4b99      	ldr	r3, [pc, #612]	@ (8009880 <_dtoa_r+0x36c>)
 800961a:	f7f9 f8b3 	bl	8002784 <__aeabi_dsub>
 800961e:	4a99      	ldr	r2, [pc, #612]	@ (8009884 <_dtoa_r+0x370>)
 8009620:	4b99      	ldr	r3, [pc, #612]	@ (8009888 <_dtoa_r+0x374>)
 8009622:	f7f8 fde7 	bl	80021f4 <__aeabi_dmul>
 8009626:	4a99      	ldr	r2, [pc, #612]	@ (800988c <_dtoa_r+0x378>)
 8009628:	4b99      	ldr	r3, [pc, #612]	@ (8009890 <_dtoa_r+0x37c>)
 800962a:	f7f7 fe3b 	bl	80012a4 <__aeabi_dadd>
 800962e:	0004      	movs	r4, r0
 8009630:	0038      	movs	r0, r7
 8009632:	000d      	movs	r5, r1
 8009634:	f7f9 fca0 	bl	8002f78 <__aeabi_i2d>
 8009638:	4a96      	ldr	r2, [pc, #600]	@ (8009894 <_dtoa_r+0x380>)
 800963a:	4b97      	ldr	r3, [pc, #604]	@ (8009898 <_dtoa_r+0x384>)
 800963c:	f7f8 fdda 	bl	80021f4 <__aeabi_dmul>
 8009640:	0002      	movs	r2, r0
 8009642:	000b      	movs	r3, r1
 8009644:	0020      	movs	r0, r4
 8009646:	0029      	movs	r1, r5
 8009648:	f7f7 fe2c 	bl	80012a4 <__aeabi_dadd>
 800964c:	0004      	movs	r4, r0
 800964e:	000d      	movs	r5, r1
 8009650:	f7f9 fc56 	bl	8002f00 <__aeabi_d2iz>
 8009654:	2200      	movs	r2, #0
 8009656:	9004      	str	r0, [sp, #16]
 8009658:	2300      	movs	r3, #0
 800965a:	0020      	movs	r0, r4
 800965c:	0029      	movs	r1, r5
 800965e:	f7f6 fefb 	bl	8000458 <__aeabi_dcmplt>
 8009662:	2800      	cmp	r0, #0
 8009664:	d00b      	beq.n	800967e <_dtoa_r+0x16a>
 8009666:	9804      	ldr	r0, [sp, #16]
 8009668:	f7f9 fc86 	bl	8002f78 <__aeabi_i2d>
 800966c:	002b      	movs	r3, r5
 800966e:	0022      	movs	r2, r4
 8009670:	f7f6 feec 	bl	800044c <__aeabi_dcmpeq>
 8009674:	4243      	negs	r3, r0
 8009676:	4158      	adcs	r0, r3
 8009678:	9b04      	ldr	r3, [sp, #16]
 800967a:	1a1b      	subs	r3, r3, r0
 800967c:	9304      	str	r3, [sp, #16]
 800967e:	2301      	movs	r3, #1
 8009680:	9315      	str	r3, [sp, #84]	@ 0x54
 8009682:	9b04      	ldr	r3, [sp, #16]
 8009684:	2b16      	cmp	r3, #22
 8009686:	d810      	bhi.n	80096aa <_dtoa_r+0x196>
 8009688:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800968a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800968c:	9a04      	ldr	r2, [sp, #16]
 800968e:	4b83      	ldr	r3, [pc, #524]	@ (800989c <_dtoa_r+0x388>)
 8009690:	00d2      	lsls	r2, r2, #3
 8009692:	189b      	adds	r3, r3, r2
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	f7f6 fede 	bl	8000458 <__aeabi_dcmplt>
 800969c:	2800      	cmp	r0, #0
 800969e:	d047      	beq.n	8009730 <_dtoa_r+0x21c>
 80096a0:	9b04      	ldr	r3, [sp, #16]
 80096a2:	3b01      	subs	r3, #1
 80096a4:	9304      	str	r3, [sp, #16]
 80096a6:	2300      	movs	r3, #0
 80096a8:	9315      	str	r3, [sp, #84]	@ 0x54
 80096aa:	2200      	movs	r2, #0
 80096ac:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80096ae:	9206      	str	r2, [sp, #24]
 80096b0:	1bdb      	subs	r3, r3, r7
 80096b2:	1e5a      	subs	r2, r3, #1
 80096b4:	d53e      	bpl.n	8009734 <_dtoa_r+0x220>
 80096b6:	2201      	movs	r2, #1
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	9306      	str	r3, [sp, #24]
 80096bc:	2300      	movs	r3, #0
 80096be:	930d      	str	r3, [sp, #52]	@ 0x34
 80096c0:	9b04      	ldr	r3, [sp, #16]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	db38      	blt.n	8009738 <_dtoa_r+0x224>
 80096c6:	9a04      	ldr	r2, [sp, #16]
 80096c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096ca:	4694      	mov	ip, r2
 80096cc:	4463      	add	r3, ip
 80096ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80096d0:	2300      	movs	r3, #0
 80096d2:	9214      	str	r2, [sp, #80]	@ 0x50
 80096d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096d6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80096d8:	2401      	movs	r4, #1
 80096da:	2b09      	cmp	r3, #9
 80096dc:	d867      	bhi.n	80097ae <_dtoa_r+0x29a>
 80096de:	2b05      	cmp	r3, #5
 80096e0:	dd02      	ble.n	80096e8 <_dtoa_r+0x1d4>
 80096e2:	2400      	movs	r4, #0
 80096e4:	3b04      	subs	r3, #4
 80096e6:	9322      	str	r3, [sp, #136]	@ 0x88
 80096e8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80096ea:	1e98      	subs	r0, r3, #2
 80096ec:	2803      	cmp	r0, #3
 80096ee:	d867      	bhi.n	80097c0 <_dtoa_r+0x2ac>
 80096f0:	f7f6 fd12 	bl	8000118 <__gnu_thumb1_case_uqi>
 80096f4:	5b383a2b 	.word	0x5b383a2b
 80096f8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80096fa:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80096fc:	18f6      	adds	r6, r6, r3
 80096fe:	4b68      	ldr	r3, [pc, #416]	@ (80098a0 <_dtoa_r+0x38c>)
 8009700:	18f2      	adds	r2, r6, r3
 8009702:	2a20      	cmp	r2, #32
 8009704:	dd0f      	ble.n	8009726 <_dtoa_r+0x212>
 8009706:	2340      	movs	r3, #64	@ 0x40
 8009708:	1a9b      	subs	r3, r3, r2
 800970a:	409f      	lsls	r7, r3
 800970c:	4b65      	ldr	r3, [pc, #404]	@ (80098a4 <_dtoa_r+0x390>)
 800970e:	0038      	movs	r0, r7
 8009710:	18f3      	adds	r3, r6, r3
 8009712:	40dc      	lsrs	r4, r3
 8009714:	4320      	orrs	r0, r4
 8009716:	f7f9 fc5d 	bl	8002fd4 <__aeabi_ui2d>
 800971a:	2201      	movs	r2, #1
 800971c:	4b62      	ldr	r3, [pc, #392]	@ (80098a8 <_dtoa_r+0x394>)
 800971e:	1e77      	subs	r7, r6, #1
 8009720:	18cb      	adds	r3, r1, r3
 8009722:	9218      	str	r2, [sp, #96]	@ 0x60
 8009724:	e776      	b.n	8009614 <_dtoa_r+0x100>
 8009726:	2320      	movs	r3, #32
 8009728:	0020      	movs	r0, r4
 800972a:	1a9b      	subs	r3, r3, r2
 800972c:	4098      	lsls	r0, r3
 800972e:	e7f2      	b.n	8009716 <_dtoa_r+0x202>
 8009730:	9015      	str	r0, [sp, #84]	@ 0x54
 8009732:	e7ba      	b.n	80096aa <_dtoa_r+0x196>
 8009734:	920d      	str	r2, [sp, #52]	@ 0x34
 8009736:	e7c3      	b.n	80096c0 <_dtoa_r+0x1ac>
 8009738:	9b06      	ldr	r3, [sp, #24]
 800973a:	9a04      	ldr	r2, [sp, #16]
 800973c:	1a9b      	subs	r3, r3, r2
 800973e:	9306      	str	r3, [sp, #24]
 8009740:	4253      	negs	r3, r2
 8009742:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009744:	2300      	movs	r3, #0
 8009746:	9314      	str	r3, [sp, #80]	@ 0x50
 8009748:	e7c5      	b.n	80096d6 <_dtoa_r+0x1c2>
 800974a:	2300      	movs	r3, #0
 800974c:	9310      	str	r3, [sp, #64]	@ 0x40
 800974e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009750:	930e      	str	r3, [sp, #56]	@ 0x38
 8009752:	9309      	str	r3, [sp, #36]	@ 0x24
 8009754:	2b00      	cmp	r3, #0
 8009756:	dc13      	bgt.n	8009780 <_dtoa_r+0x26c>
 8009758:	2301      	movs	r3, #1
 800975a:	001a      	movs	r2, r3
 800975c:	930e      	str	r3, [sp, #56]	@ 0x38
 800975e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009760:	9223      	str	r2, [sp, #140]	@ 0x8c
 8009762:	e00d      	b.n	8009780 <_dtoa_r+0x26c>
 8009764:	2301      	movs	r3, #1
 8009766:	e7f1      	b.n	800974c <_dtoa_r+0x238>
 8009768:	2300      	movs	r3, #0
 800976a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800976c:	9310      	str	r3, [sp, #64]	@ 0x40
 800976e:	4694      	mov	ip, r2
 8009770:	9b04      	ldr	r3, [sp, #16]
 8009772:	4463      	add	r3, ip
 8009774:	930e      	str	r3, [sp, #56]	@ 0x38
 8009776:	3301      	adds	r3, #1
 8009778:	9309      	str	r3, [sp, #36]	@ 0x24
 800977a:	2b00      	cmp	r3, #0
 800977c:	dc00      	bgt.n	8009780 <_dtoa_r+0x26c>
 800977e:	2301      	movs	r3, #1
 8009780:	9a03      	ldr	r2, [sp, #12]
 8009782:	2100      	movs	r1, #0
 8009784:	69d0      	ldr	r0, [r2, #28]
 8009786:	2204      	movs	r2, #4
 8009788:	0015      	movs	r5, r2
 800978a:	3514      	adds	r5, #20
 800978c:	429d      	cmp	r5, r3
 800978e:	d91b      	bls.n	80097c8 <_dtoa_r+0x2b4>
 8009790:	6041      	str	r1, [r0, #4]
 8009792:	9803      	ldr	r0, [sp, #12]
 8009794:	f000 fdb8 	bl	800a308 <_Balloc>
 8009798:	9008      	str	r0, [sp, #32]
 800979a:	2800      	cmp	r0, #0
 800979c:	d117      	bne.n	80097ce <_dtoa_r+0x2ba>
 800979e:	21b0      	movs	r1, #176	@ 0xb0
 80097a0:	4b42      	ldr	r3, [pc, #264]	@ (80098ac <_dtoa_r+0x398>)
 80097a2:	482e      	ldr	r0, [pc, #184]	@ (800985c <_dtoa_r+0x348>)
 80097a4:	9a08      	ldr	r2, [sp, #32]
 80097a6:	31ff      	adds	r1, #255	@ 0xff
 80097a8:	e6c9      	b.n	800953e <_dtoa_r+0x2a>
 80097aa:	2301      	movs	r3, #1
 80097ac:	e7dd      	b.n	800976a <_dtoa_r+0x256>
 80097ae:	2300      	movs	r3, #0
 80097b0:	9410      	str	r4, [sp, #64]	@ 0x40
 80097b2:	9322      	str	r3, [sp, #136]	@ 0x88
 80097b4:	3b01      	subs	r3, #1
 80097b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80097b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ba:	2200      	movs	r2, #0
 80097bc:	3313      	adds	r3, #19
 80097be:	e7cf      	b.n	8009760 <_dtoa_r+0x24c>
 80097c0:	2301      	movs	r3, #1
 80097c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80097c4:	3b02      	subs	r3, #2
 80097c6:	e7f6      	b.n	80097b6 <_dtoa_r+0x2a2>
 80097c8:	3101      	adds	r1, #1
 80097ca:	0052      	lsls	r2, r2, #1
 80097cc:	e7dc      	b.n	8009788 <_dtoa_r+0x274>
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	9a08      	ldr	r2, [sp, #32]
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d8:	2b0e      	cmp	r3, #14
 80097da:	d900      	bls.n	80097de <_dtoa_r+0x2ca>
 80097dc:	e0d9      	b.n	8009992 <_dtoa_r+0x47e>
 80097de:	2c00      	cmp	r4, #0
 80097e0:	d100      	bne.n	80097e4 <_dtoa_r+0x2d0>
 80097e2:	e0d6      	b.n	8009992 <_dtoa_r+0x47e>
 80097e4:	9b04      	ldr	r3, [sp, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	dd64      	ble.n	80098b4 <_dtoa_r+0x3a0>
 80097ea:	210f      	movs	r1, #15
 80097ec:	9a04      	ldr	r2, [sp, #16]
 80097ee:	4b2b      	ldr	r3, [pc, #172]	@ (800989c <_dtoa_r+0x388>)
 80097f0:	400a      	ands	r2, r1
 80097f2:	00d2      	lsls	r2, r2, #3
 80097f4:	189b      	adds	r3, r3, r2
 80097f6:	681e      	ldr	r6, [r3, #0]
 80097f8:	685f      	ldr	r7, [r3, #4]
 80097fa:	9b04      	ldr	r3, [sp, #16]
 80097fc:	2402      	movs	r4, #2
 80097fe:	111d      	asrs	r5, r3, #4
 8009800:	05db      	lsls	r3, r3, #23
 8009802:	d50a      	bpl.n	800981a <_dtoa_r+0x306>
 8009804:	4b2a      	ldr	r3, [pc, #168]	@ (80098b0 <_dtoa_r+0x39c>)
 8009806:	400d      	ands	r5, r1
 8009808:	6a1a      	ldr	r2, [r3, #32]
 800980a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800980c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800980e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009810:	f7f8 f8ac 	bl	800196c <__aeabi_ddiv>
 8009814:	900a      	str	r0, [sp, #40]	@ 0x28
 8009816:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009818:	3401      	adds	r4, #1
 800981a:	4b25      	ldr	r3, [pc, #148]	@ (80098b0 <_dtoa_r+0x39c>)
 800981c:	930c      	str	r3, [sp, #48]	@ 0x30
 800981e:	2d00      	cmp	r5, #0
 8009820:	d108      	bne.n	8009834 <_dtoa_r+0x320>
 8009822:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009824:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009826:	0032      	movs	r2, r6
 8009828:	003b      	movs	r3, r7
 800982a:	f7f8 f89f 	bl	800196c <__aeabi_ddiv>
 800982e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009830:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009832:	e05a      	b.n	80098ea <_dtoa_r+0x3d6>
 8009834:	2301      	movs	r3, #1
 8009836:	421d      	tst	r5, r3
 8009838:	d009      	beq.n	800984e <_dtoa_r+0x33a>
 800983a:	18e4      	adds	r4, r4, r3
 800983c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800983e:	0030      	movs	r0, r6
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	0039      	movs	r1, r7
 8009846:	f7f8 fcd5 	bl	80021f4 <__aeabi_dmul>
 800984a:	0006      	movs	r6, r0
 800984c:	000f      	movs	r7, r1
 800984e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009850:	106d      	asrs	r5, r5, #1
 8009852:	3308      	adds	r3, #8
 8009854:	e7e2      	b.n	800981c <_dtoa_r+0x308>
 8009856:	46c0      	nop			@ (mov r8, r8)
 8009858:	0800dcd2 	.word	0x0800dcd2
 800985c:	0800dce9 	.word	0x0800dce9
 8009860:	7ff00000 	.word	0x7ff00000
 8009864:	0000270f 	.word	0x0000270f
 8009868:	0800dcce 	.word	0x0800dcce
 800986c:	0800dcd1 	.word	0x0800dcd1
 8009870:	0800dc9d 	.word	0x0800dc9d
 8009874:	0800dc9c 	.word	0x0800dc9c
 8009878:	3ff00000 	.word	0x3ff00000
 800987c:	fffffc01 	.word	0xfffffc01
 8009880:	3ff80000 	.word	0x3ff80000
 8009884:	636f4361 	.word	0x636f4361
 8009888:	3fd287a7 	.word	0x3fd287a7
 800988c:	8b60c8b3 	.word	0x8b60c8b3
 8009890:	3fc68a28 	.word	0x3fc68a28
 8009894:	509f79fb 	.word	0x509f79fb
 8009898:	3fd34413 	.word	0x3fd34413
 800989c:	0800dde0 	.word	0x0800dde0
 80098a0:	00000432 	.word	0x00000432
 80098a4:	00000412 	.word	0x00000412
 80098a8:	fe100000 	.word	0xfe100000
 80098ac:	0800dd41 	.word	0x0800dd41
 80098b0:	0800ddb8 	.word	0x0800ddb8
 80098b4:	9b04      	ldr	r3, [sp, #16]
 80098b6:	2402      	movs	r4, #2
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d016      	beq.n	80098ea <_dtoa_r+0x3d6>
 80098bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80098be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80098c0:	220f      	movs	r2, #15
 80098c2:	425d      	negs	r5, r3
 80098c4:	402a      	ands	r2, r5
 80098c6:	4bd7      	ldr	r3, [pc, #860]	@ (8009c24 <_dtoa_r+0x710>)
 80098c8:	00d2      	lsls	r2, r2, #3
 80098ca:	189b      	adds	r3, r3, r2
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f7f8 fc90 	bl	80021f4 <__aeabi_dmul>
 80098d4:	2701      	movs	r7, #1
 80098d6:	2300      	movs	r3, #0
 80098d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80098da:	910b      	str	r1, [sp, #44]	@ 0x2c
 80098dc:	4ed2      	ldr	r6, [pc, #840]	@ (8009c28 <_dtoa_r+0x714>)
 80098de:	112d      	asrs	r5, r5, #4
 80098e0:	2d00      	cmp	r5, #0
 80098e2:	d000      	beq.n	80098e6 <_dtoa_r+0x3d2>
 80098e4:	e0ba      	b.n	8009a5c <_dtoa_r+0x548>
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1a1      	bne.n	800982e <_dtoa_r+0x31a>
 80098ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80098ec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80098ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d100      	bne.n	80098f6 <_dtoa_r+0x3e2>
 80098f4:	e0bd      	b.n	8009a72 <_dtoa_r+0x55e>
 80098f6:	2200      	movs	r2, #0
 80098f8:	0030      	movs	r0, r6
 80098fa:	0039      	movs	r1, r7
 80098fc:	4bcb      	ldr	r3, [pc, #812]	@ (8009c2c <_dtoa_r+0x718>)
 80098fe:	f7f6 fdab 	bl	8000458 <__aeabi_dcmplt>
 8009902:	2800      	cmp	r0, #0
 8009904:	d100      	bne.n	8009908 <_dtoa_r+0x3f4>
 8009906:	e0b4      	b.n	8009a72 <_dtoa_r+0x55e>
 8009908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800990a:	2b00      	cmp	r3, #0
 800990c:	d100      	bne.n	8009910 <_dtoa_r+0x3fc>
 800990e:	e0b0      	b.n	8009a72 <_dtoa_r+0x55e>
 8009910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009912:	2b00      	cmp	r3, #0
 8009914:	dd39      	ble.n	800998a <_dtoa_r+0x476>
 8009916:	9b04      	ldr	r3, [sp, #16]
 8009918:	2200      	movs	r2, #0
 800991a:	3b01      	subs	r3, #1
 800991c:	930c      	str	r3, [sp, #48]	@ 0x30
 800991e:	0030      	movs	r0, r6
 8009920:	4bc3      	ldr	r3, [pc, #780]	@ (8009c30 <_dtoa_r+0x71c>)
 8009922:	0039      	movs	r1, r7
 8009924:	f7f8 fc66 	bl	80021f4 <__aeabi_dmul>
 8009928:	900a      	str	r0, [sp, #40]	@ 0x28
 800992a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800992c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800992e:	3401      	adds	r4, #1
 8009930:	0020      	movs	r0, r4
 8009932:	9311      	str	r3, [sp, #68]	@ 0x44
 8009934:	f7f9 fb20 	bl	8002f78 <__aeabi_i2d>
 8009938:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800993a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800993c:	f7f8 fc5a 	bl	80021f4 <__aeabi_dmul>
 8009940:	4bbc      	ldr	r3, [pc, #752]	@ (8009c34 <_dtoa_r+0x720>)
 8009942:	2200      	movs	r2, #0
 8009944:	f7f7 fcae 	bl	80012a4 <__aeabi_dadd>
 8009948:	4bbb      	ldr	r3, [pc, #748]	@ (8009c38 <_dtoa_r+0x724>)
 800994a:	0006      	movs	r6, r0
 800994c:	18cf      	adds	r7, r1, r3
 800994e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009950:	2b00      	cmp	r3, #0
 8009952:	d000      	beq.n	8009956 <_dtoa_r+0x442>
 8009954:	e091      	b.n	8009a7a <_dtoa_r+0x566>
 8009956:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009958:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800995a:	2200      	movs	r2, #0
 800995c:	4bb7      	ldr	r3, [pc, #732]	@ (8009c3c <_dtoa_r+0x728>)
 800995e:	f7f8 ff11 	bl	8002784 <__aeabi_dsub>
 8009962:	0032      	movs	r2, r6
 8009964:	003b      	movs	r3, r7
 8009966:	0004      	movs	r4, r0
 8009968:	000d      	movs	r5, r1
 800996a:	f7f6 fd89 	bl	8000480 <__aeabi_dcmpgt>
 800996e:	2800      	cmp	r0, #0
 8009970:	d000      	beq.n	8009974 <_dtoa_r+0x460>
 8009972:	e29d      	b.n	8009eb0 <_dtoa_r+0x99c>
 8009974:	2180      	movs	r1, #128	@ 0x80
 8009976:	0609      	lsls	r1, r1, #24
 8009978:	187b      	adds	r3, r7, r1
 800997a:	0032      	movs	r2, r6
 800997c:	0020      	movs	r0, r4
 800997e:	0029      	movs	r1, r5
 8009980:	f7f6 fd6a 	bl	8000458 <__aeabi_dcmplt>
 8009984:	2800      	cmp	r0, #0
 8009986:	d000      	beq.n	800998a <_dtoa_r+0x476>
 8009988:	e130      	b.n	8009bec <_dtoa_r+0x6d8>
 800998a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800998c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800998e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009990:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009992:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009994:	2b00      	cmp	r3, #0
 8009996:	da00      	bge.n	800999a <_dtoa_r+0x486>
 8009998:	e177      	b.n	8009c8a <_dtoa_r+0x776>
 800999a:	9a04      	ldr	r2, [sp, #16]
 800999c:	2a0e      	cmp	r2, #14
 800999e:	dd00      	ble.n	80099a2 <_dtoa_r+0x48e>
 80099a0:	e173      	b.n	8009c8a <_dtoa_r+0x776>
 80099a2:	4ba0      	ldr	r3, [pc, #640]	@ (8009c24 <_dtoa_r+0x710>)
 80099a4:	00d2      	lsls	r2, r2, #3
 80099a6:	189b      	adds	r3, r3, r2
 80099a8:	685c      	ldr	r4, [r3, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	9306      	str	r3, [sp, #24]
 80099ae:	9407      	str	r4, [sp, #28]
 80099b0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	da03      	bge.n	80099be <_dtoa_r+0x4aa>
 80099b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	dc00      	bgt.n	80099be <_dtoa_r+0x4aa>
 80099bc:	e106      	b.n	8009bcc <_dtoa_r+0x6b8>
 80099be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80099c0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80099c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c4:	9d08      	ldr	r5, [sp, #32]
 80099c6:	3b01      	subs	r3, #1
 80099c8:	195b      	adds	r3, r3, r5
 80099ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80099cc:	9a06      	ldr	r2, [sp, #24]
 80099ce:	9b07      	ldr	r3, [sp, #28]
 80099d0:	0030      	movs	r0, r6
 80099d2:	0039      	movs	r1, r7
 80099d4:	f7f7 ffca 	bl	800196c <__aeabi_ddiv>
 80099d8:	f7f9 fa92 	bl	8002f00 <__aeabi_d2iz>
 80099dc:	9009      	str	r0, [sp, #36]	@ 0x24
 80099de:	f7f9 facb 	bl	8002f78 <__aeabi_i2d>
 80099e2:	9a06      	ldr	r2, [sp, #24]
 80099e4:	9b07      	ldr	r3, [sp, #28]
 80099e6:	f7f8 fc05 	bl	80021f4 <__aeabi_dmul>
 80099ea:	0002      	movs	r2, r0
 80099ec:	000b      	movs	r3, r1
 80099ee:	0030      	movs	r0, r6
 80099f0:	0039      	movs	r1, r7
 80099f2:	f7f8 fec7 	bl	8002784 <__aeabi_dsub>
 80099f6:	002b      	movs	r3, r5
 80099f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099fa:	3501      	adds	r5, #1
 80099fc:	3230      	adds	r2, #48	@ 0x30
 80099fe:	701a      	strb	r2, [r3, #0]
 8009a00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a02:	002c      	movs	r4, r5
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d000      	beq.n	8009a0a <_dtoa_r+0x4f6>
 8009a08:	e131      	b.n	8009c6e <_dtoa_r+0x75a>
 8009a0a:	0002      	movs	r2, r0
 8009a0c:	000b      	movs	r3, r1
 8009a0e:	f7f7 fc49 	bl	80012a4 <__aeabi_dadd>
 8009a12:	9a06      	ldr	r2, [sp, #24]
 8009a14:	9b07      	ldr	r3, [sp, #28]
 8009a16:	0006      	movs	r6, r0
 8009a18:	000f      	movs	r7, r1
 8009a1a:	f7f6 fd31 	bl	8000480 <__aeabi_dcmpgt>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d000      	beq.n	8009a24 <_dtoa_r+0x510>
 8009a22:	e10f      	b.n	8009c44 <_dtoa_r+0x730>
 8009a24:	9a06      	ldr	r2, [sp, #24]
 8009a26:	9b07      	ldr	r3, [sp, #28]
 8009a28:	0030      	movs	r0, r6
 8009a2a:	0039      	movs	r1, r7
 8009a2c:	f7f6 fd0e 	bl	800044c <__aeabi_dcmpeq>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d003      	beq.n	8009a3c <_dtoa_r+0x528>
 8009a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a36:	07dd      	lsls	r5, r3, #31
 8009a38:	d500      	bpl.n	8009a3c <_dtoa_r+0x528>
 8009a3a:	e103      	b.n	8009c44 <_dtoa_r+0x730>
 8009a3c:	9905      	ldr	r1, [sp, #20]
 8009a3e:	9803      	ldr	r0, [sp, #12]
 8009a40:	f000 fca6 	bl	800a390 <_Bfree>
 8009a44:	2300      	movs	r3, #0
 8009a46:	7023      	strb	r3, [r4, #0]
 8009a48:	9b04      	ldr	r3, [sp, #16]
 8009a4a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d100      	bne.n	8009a58 <_dtoa_r+0x544>
 8009a56:	e5a7      	b.n	80095a8 <_dtoa_r+0x94>
 8009a58:	601c      	str	r4, [r3, #0]
 8009a5a:	e5a5      	b.n	80095a8 <_dtoa_r+0x94>
 8009a5c:	423d      	tst	r5, r7
 8009a5e:	d005      	beq.n	8009a6c <_dtoa_r+0x558>
 8009a60:	6832      	ldr	r2, [r6, #0]
 8009a62:	6873      	ldr	r3, [r6, #4]
 8009a64:	f7f8 fbc6 	bl	80021f4 <__aeabi_dmul>
 8009a68:	003b      	movs	r3, r7
 8009a6a:	3401      	adds	r4, #1
 8009a6c:	106d      	asrs	r5, r5, #1
 8009a6e:	3608      	adds	r6, #8
 8009a70:	e736      	b.n	80098e0 <_dtoa_r+0x3cc>
 8009a72:	9b04      	ldr	r3, [sp, #16]
 8009a74:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a78:	e75a      	b.n	8009930 <_dtoa_r+0x41c>
 8009a7a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009a7c:	4b69      	ldr	r3, [pc, #420]	@ (8009c24 <_dtoa_r+0x710>)
 8009a7e:	3a01      	subs	r2, #1
 8009a80:	00d2      	lsls	r2, r2, #3
 8009a82:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009a84:	189b      	adds	r3, r3, r2
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	2900      	cmp	r1, #0
 8009a8c:	d04c      	beq.n	8009b28 <_dtoa_r+0x614>
 8009a8e:	2000      	movs	r0, #0
 8009a90:	496b      	ldr	r1, [pc, #428]	@ (8009c40 <_dtoa_r+0x72c>)
 8009a92:	f7f7 ff6b 	bl	800196c <__aeabi_ddiv>
 8009a96:	0032      	movs	r2, r6
 8009a98:	003b      	movs	r3, r7
 8009a9a:	f7f8 fe73 	bl	8002784 <__aeabi_dsub>
 8009a9e:	9a08      	ldr	r2, [sp, #32]
 8009aa0:	0006      	movs	r6, r0
 8009aa2:	4694      	mov	ip, r2
 8009aa4:	000f      	movs	r7, r1
 8009aa6:	9b08      	ldr	r3, [sp, #32]
 8009aa8:	9316      	str	r3, [sp, #88]	@ 0x58
 8009aaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009aac:	4463      	add	r3, ip
 8009aae:	9311      	str	r3, [sp, #68]	@ 0x44
 8009ab0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009ab2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ab4:	f7f9 fa24 	bl	8002f00 <__aeabi_d2iz>
 8009ab8:	0005      	movs	r5, r0
 8009aba:	f7f9 fa5d 	bl	8002f78 <__aeabi_i2d>
 8009abe:	0002      	movs	r2, r0
 8009ac0:	000b      	movs	r3, r1
 8009ac2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009ac4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ac6:	f7f8 fe5d 	bl	8002784 <__aeabi_dsub>
 8009aca:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009acc:	3530      	adds	r5, #48	@ 0x30
 8009ace:	1c5c      	adds	r4, r3, #1
 8009ad0:	701d      	strb	r5, [r3, #0]
 8009ad2:	0032      	movs	r2, r6
 8009ad4:	003b      	movs	r3, r7
 8009ad6:	900a      	str	r0, [sp, #40]	@ 0x28
 8009ad8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009ada:	f7f6 fcbd 	bl	8000458 <__aeabi_dcmplt>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d16a      	bne.n	8009bb8 <_dtoa_r+0x6a4>
 8009ae2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ae4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	4950      	ldr	r1, [pc, #320]	@ (8009c2c <_dtoa_r+0x718>)
 8009aea:	f7f8 fe4b 	bl	8002784 <__aeabi_dsub>
 8009aee:	0032      	movs	r2, r6
 8009af0:	003b      	movs	r3, r7
 8009af2:	f7f6 fcb1 	bl	8000458 <__aeabi_dcmplt>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d000      	beq.n	8009afc <_dtoa_r+0x5e8>
 8009afa:	e0a5      	b.n	8009c48 <_dtoa_r+0x734>
 8009afc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009afe:	42a3      	cmp	r3, r4
 8009b00:	d100      	bne.n	8009b04 <_dtoa_r+0x5f0>
 8009b02:	e742      	b.n	800998a <_dtoa_r+0x476>
 8009b04:	2200      	movs	r2, #0
 8009b06:	0030      	movs	r0, r6
 8009b08:	0039      	movs	r1, r7
 8009b0a:	4b49      	ldr	r3, [pc, #292]	@ (8009c30 <_dtoa_r+0x71c>)
 8009b0c:	f7f8 fb72 	bl	80021f4 <__aeabi_dmul>
 8009b10:	2200      	movs	r2, #0
 8009b12:	0006      	movs	r6, r0
 8009b14:	000f      	movs	r7, r1
 8009b16:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b1a:	4b45      	ldr	r3, [pc, #276]	@ (8009c30 <_dtoa_r+0x71c>)
 8009b1c:	f7f8 fb6a 	bl	80021f4 <__aeabi_dmul>
 8009b20:	9416      	str	r4, [sp, #88]	@ 0x58
 8009b22:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009b26:	e7c3      	b.n	8009ab0 <_dtoa_r+0x59c>
 8009b28:	0030      	movs	r0, r6
 8009b2a:	0039      	movs	r1, r7
 8009b2c:	f7f8 fb62 	bl	80021f4 <__aeabi_dmul>
 8009b30:	9d08      	ldr	r5, [sp, #32]
 8009b32:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009b34:	002b      	movs	r3, r5
 8009b36:	4694      	mov	ip, r2
 8009b38:	9016      	str	r0, [sp, #88]	@ 0x58
 8009b3a:	9117      	str	r1, [sp, #92]	@ 0x5c
 8009b3c:	4463      	add	r3, ip
 8009b3e:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b44:	f7f9 f9dc 	bl	8002f00 <__aeabi_d2iz>
 8009b48:	0004      	movs	r4, r0
 8009b4a:	f7f9 fa15 	bl	8002f78 <__aeabi_i2d>
 8009b4e:	000b      	movs	r3, r1
 8009b50:	0002      	movs	r2, r0
 8009b52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b56:	f7f8 fe15 	bl	8002784 <__aeabi_dsub>
 8009b5a:	3430      	adds	r4, #48	@ 0x30
 8009b5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b5e:	702c      	strb	r4, [r5, #0]
 8009b60:	3501      	adds	r5, #1
 8009b62:	0006      	movs	r6, r0
 8009b64:	000f      	movs	r7, r1
 8009b66:	42ab      	cmp	r3, r5
 8009b68:	d129      	bne.n	8009bbe <_dtoa_r+0x6aa>
 8009b6a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8009b6c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009b6e:	9b08      	ldr	r3, [sp, #32]
 8009b70:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8009b72:	469c      	mov	ip, r3
 8009b74:	2200      	movs	r2, #0
 8009b76:	4b32      	ldr	r3, [pc, #200]	@ (8009c40 <_dtoa_r+0x72c>)
 8009b78:	4464      	add	r4, ip
 8009b7a:	f7f7 fb93 	bl	80012a4 <__aeabi_dadd>
 8009b7e:	0002      	movs	r2, r0
 8009b80:	000b      	movs	r3, r1
 8009b82:	0030      	movs	r0, r6
 8009b84:	0039      	movs	r1, r7
 8009b86:	f7f6 fc7b 	bl	8000480 <__aeabi_dcmpgt>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d15c      	bne.n	8009c48 <_dtoa_r+0x734>
 8009b8e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009b90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b92:	2000      	movs	r0, #0
 8009b94:	492a      	ldr	r1, [pc, #168]	@ (8009c40 <_dtoa_r+0x72c>)
 8009b96:	f7f8 fdf5 	bl	8002784 <__aeabi_dsub>
 8009b9a:	0002      	movs	r2, r0
 8009b9c:	000b      	movs	r3, r1
 8009b9e:	0030      	movs	r0, r6
 8009ba0:	0039      	movs	r1, r7
 8009ba2:	f7f6 fc59 	bl	8000458 <__aeabi_dcmplt>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d100      	bne.n	8009bac <_dtoa_r+0x698>
 8009baa:	e6ee      	b.n	800998a <_dtoa_r+0x476>
 8009bac:	0023      	movs	r3, r4
 8009bae:	3c01      	subs	r4, #1
 8009bb0:	7822      	ldrb	r2, [r4, #0]
 8009bb2:	2a30      	cmp	r2, #48	@ 0x30
 8009bb4:	d0fa      	beq.n	8009bac <_dtoa_r+0x698>
 8009bb6:	001c      	movs	r4, r3
 8009bb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bba:	9304      	str	r3, [sp, #16]
 8009bbc:	e73e      	b.n	8009a3c <_dtoa_r+0x528>
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8009c30 <_dtoa_r+0x71c>)
 8009bc2:	f7f8 fb17 	bl	80021f4 <__aeabi_dmul>
 8009bc6:	900a      	str	r0, [sp, #40]	@ 0x28
 8009bc8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009bca:	e7b9      	b.n	8009b40 <_dtoa_r+0x62c>
 8009bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10c      	bne.n	8009bec <_dtoa_r+0x6d8>
 8009bd2:	9806      	ldr	r0, [sp, #24]
 8009bd4:	9907      	ldr	r1, [sp, #28]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	4b18      	ldr	r3, [pc, #96]	@ (8009c3c <_dtoa_r+0x728>)
 8009bda:	f7f8 fb0b 	bl	80021f4 <__aeabi_dmul>
 8009bde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009be0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009be2:	f7f6 fc57 	bl	8000494 <__aeabi_dcmpge>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d100      	bne.n	8009bec <_dtoa_r+0x6d8>
 8009bea:	e164      	b.n	8009eb6 <_dtoa_r+0x9a2>
 8009bec:	2600      	movs	r6, #0
 8009bee:	0037      	movs	r7, r6
 8009bf0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bf2:	9c08      	ldr	r4, [sp, #32]
 8009bf4:	43db      	mvns	r3, r3
 8009bf6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	9304      	str	r3, [sp, #16]
 8009bfc:	0031      	movs	r1, r6
 8009bfe:	9803      	ldr	r0, [sp, #12]
 8009c00:	f000 fbc6 	bl	800a390 <_Bfree>
 8009c04:	2f00      	cmp	r7, #0
 8009c06:	d0d7      	beq.n	8009bb8 <_dtoa_r+0x6a4>
 8009c08:	9b04      	ldr	r3, [sp, #16]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d005      	beq.n	8009c1a <_dtoa_r+0x706>
 8009c0e:	42bb      	cmp	r3, r7
 8009c10:	d003      	beq.n	8009c1a <_dtoa_r+0x706>
 8009c12:	0019      	movs	r1, r3
 8009c14:	9803      	ldr	r0, [sp, #12]
 8009c16:	f000 fbbb 	bl	800a390 <_Bfree>
 8009c1a:	0039      	movs	r1, r7
 8009c1c:	9803      	ldr	r0, [sp, #12]
 8009c1e:	f000 fbb7 	bl	800a390 <_Bfree>
 8009c22:	e7c9      	b.n	8009bb8 <_dtoa_r+0x6a4>
 8009c24:	0800dde0 	.word	0x0800dde0
 8009c28:	0800ddb8 	.word	0x0800ddb8
 8009c2c:	3ff00000 	.word	0x3ff00000
 8009c30:	40240000 	.word	0x40240000
 8009c34:	401c0000 	.word	0x401c0000
 8009c38:	fcc00000 	.word	0xfcc00000
 8009c3c:	40140000 	.word	0x40140000
 8009c40:	3fe00000 	.word	0x3fe00000
 8009c44:	9b04      	ldr	r3, [sp, #16]
 8009c46:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c48:	0023      	movs	r3, r4
 8009c4a:	001c      	movs	r4, r3
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	781a      	ldrb	r2, [r3, #0]
 8009c50:	2a39      	cmp	r2, #57	@ 0x39
 8009c52:	d108      	bne.n	8009c66 <_dtoa_r+0x752>
 8009c54:	9a08      	ldr	r2, [sp, #32]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d1f7      	bne.n	8009c4a <_dtoa_r+0x736>
 8009c5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009c5c:	9908      	ldr	r1, [sp, #32]
 8009c5e:	3201      	adds	r2, #1
 8009c60:	920c      	str	r2, [sp, #48]	@ 0x30
 8009c62:	2230      	movs	r2, #48	@ 0x30
 8009c64:	700a      	strb	r2, [r1, #0]
 8009c66:	781a      	ldrb	r2, [r3, #0]
 8009c68:	3201      	adds	r2, #1
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	e7a4      	b.n	8009bb8 <_dtoa_r+0x6a4>
 8009c6e:	2200      	movs	r2, #0
 8009c70:	4bc6      	ldr	r3, [pc, #792]	@ (8009f8c <_dtoa_r+0xa78>)
 8009c72:	f7f8 fabf 	bl	80021f4 <__aeabi_dmul>
 8009c76:	2200      	movs	r2, #0
 8009c78:	2300      	movs	r3, #0
 8009c7a:	0006      	movs	r6, r0
 8009c7c:	000f      	movs	r7, r1
 8009c7e:	f7f6 fbe5 	bl	800044c <__aeabi_dcmpeq>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d100      	bne.n	8009c88 <_dtoa_r+0x774>
 8009c86:	e6a1      	b.n	80099cc <_dtoa_r+0x4b8>
 8009c88:	e6d8      	b.n	8009a3c <_dtoa_r+0x528>
 8009c8a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8009c8c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009c8e:	9c06      	ldr	r4, [sp, #24]
 8009c90:	2f00      	cmp	r7, #0
 8009c92:	d014      	beq.n	8009cbe <_dtoa_r+0x7aa>
 8009c94:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009c96:	2a01      	cmp	r2, #1
 8009c98:	dd00      	ble.n	8009c9c <_dtoa_r+0x788>
 8009c9a:	e0c8      	b.n	8009e2e <_dtoa_r+0x91a>
 8009c9c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009c9e:	2a00      	cmp	r2, #0
 8009ca0:	d100      	bne.n	8009ca4 <_dtoa_r+0x790>
 8009ca2:	e0be      	b.n	8009e22 <_dtoa_r+0x90e>
 8009ca4:	4aba      	ldr	r2, [pc, #744]	@ (8009f90 <_dtoa_r+0xa7c>)
 8009ca6:	189b      	adds	r3, r3, r2
 8009ca8:	9a06      	ldr	r2, [sp, #24]
 8009caa:	2101      	movs	r1, #1
 8009cac:	18d2      	adds	r2, r2, r3
 8009cae:	9206      	str	r2, [sp, #24]
 8009cb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cb2:	9803      	ldr	r0, [sp, #12]
 8009cb4:	18d3      	adds	r3, r2, r3
 8009cb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8009cb8:	f000 fc6e 	bl	800a598 <__i2b>
 8009cbc:	0007      	movs	r7, r0
 8009cbe:	2c00      	cmp	r4, #0
 8009cc0:	d00e      	beq.n	8009ce0 <_dtoa_r+0x7cc>
 8009cc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	dd0b      	ble.n	8009ce0 <_dtoa_r+0x7cc>
 8009cc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cca:	0023      	movs	r3, r4
 8009ccc:	4294      	cmp	r4, r2
 8009cce:	dd00      	ble.n	8009cd2 <_dtoa_r+0x7be>
 8009cd0:	0013      	movs	r3, r2
 8009cd2:	9a06      	ldr	r2, [sp, #24]
 8009cd4:	1ae4      	subs	r4, r4, r3
 8009cd6:	1ad2      	subs	r2, r2, r3
 8009cd8:	9206      	str	r2, [sp, #24]
 8009cda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	930d      	str	r3, [sp, #52]	@ 0x34
 8009ce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d01f      	beq.n	8009d26 <_dtoa_r+0x812>
 8009ce6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d100      	bne.n	8009cee <_dtoa_r+0x7da>
 8009cec:	e0b5      	b.n	8009e5a <_dtoa_r+0x946>
 8009cee:	2d00      	cmp	r5, #0
 8009cf0:	d010      	beq.n	8009d14 <_dtoa_r+0x800>
 8009cf2:	0039      	movs	r1, r7
 8009cf4:	002a      	movs	r2, r5
 8009cf6:	9803      	ldr	r0, [sp, #12]
 8009cf8:	f000 fd18 	bl	800a72c <__pow5mult>
 8009cfc:	9a05      	ldr	r2, [sp, #20]
 8009cfe:	0001      	movs	r1, r0
 8009d00:	0007      	movs	r7, r0
 8009d02:	9803      	ldr	r0, [sp, #12]
 8009d04:	f000 fc60 	bl	800a5c8 <__multiply>
 8009d08:	0006      	movs	r6, r0
 8009d0a:	9905      	ldr	r1, [sp, #20]
 8009d0c:	9803      	ldr	r0, [sp, #12]
 8009d0e:	f000 fb3f 	bl	800a390 <_Bfree>
 8009d12:	9605      	str	r6, [sp, #20]
 8009d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d16:	1b5a      	subs	r2, r3, r5
 8009d18:	42ab      	cmp	r3, r5
 8009d1a:	d004      	beq.n	8009d26 <_dtoa_r+0x812>
 8009d1c:	9905      	ldr	r1, [sp, #20]
 8009d1e:	9803      	ldr	r0, [sp, #12]
 8009d20:	f000 fd04 	bl	800a72c <__pow5mult>
 8009d24:	9005      	str	r0, [sp, #20]
 8009d26:	2101      	movs	r1, #1
 8009d28:	9803      	ldr	r0, [sp, #12]
 8009d2a:	f000 fc35 	bl	800a598 <__i2b>
 8009d2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d30:	0006      	movs	r6, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d100      	bne.n	8009d38 <_dtoa_r+0x824>
 8009d36:	e1bc      	b.n	800a0b2 <_dtoa_r+0xb9e>
 8009d38:	001a      	movs	r2, r3
 8009d3a:	0001      	movs	r1, r0
 8009d3c:	9803      	ldr	r0, [sp, #12]
 8009d3e:	f000 fcf5 	bl	800a72c <__pow5mult>
 8009d42:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009d44:	0006      	movs	r6, r0
 8009d46:	2500      	movs	r5, #0
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	dc16      	bgt.n	8009d7a <_dtoa_r+0x866>
 8009d4c:	2500      	movs	r5, #0
 8009d4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d50:	42ab      	cmp	r3, r5
 8009d52:	d10e      	bne.n	8009d72 <_dtoa_r+0x85e>
 8009d54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d56:	031b      	lsls	r3, r3, #12
 8009d58:	42ab      	cmp	r3, r5
 8009d5a:	d10a      	bne.n	8009d72 <_dtoa_r+0x85e>
 8009d5c:	4b8d      	ldr	r3, [pc, #564]	@ (8009f94 <_dtoa_r+0xa80>)
 8009d5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d60:	4213      	tst	r3, r2
 8009d62:	d006      	beq.n	8009d72 <_dtoa_r+0x85e>
 8009d64:	9b06      	ldr	r3, [sp, #24]
 8009d66:	3501      	adds	r5, #1
 8009d68:	3301      	adds	r3, #1
 8009d6a:	9306      	str	r3, [sp, #24]
 8009d6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d6e:	3301      	adds	r3, #1
 8009d70:	930d      	str	r3, [sp, #52]	@ 0x34
 8009d72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d74:	2001      	movs	r0, #1
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d008      	beq.n	8009d8c <_dtoa_r+0x878>
 8009d7a:	6933      	ldr	r3, [r6, #16]
 8009d7c:	3303      	adds	r3, #3
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	18f3      	adds	r3, r6, r3
 8009d82:	6858      	ldr	r0, [r3, #4]
 8009d84:	f000 fbb8 	bl	800a4f8 <__hi0bits>
 8009d88:	2320      	movs	r3, #32
 8009d8a:	1a18      	subs	r0, r3, r0
 8009d8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d8e:	1818      	adds	r0, r3, r0
 8009d90:	0002      	movs	r2, r0
 8009d92:	231f      	movs	r3, #31
 8009d94:	401a      	ands	r2, r3
 8009d96:	4218      	tst	r0, r3
 8009d98:	d065      	beq.n	8009e66 <_dtoa_r+0x952>
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	1a9b      	subs	r3, r3, r2
 8009d9e:	2b04      	cmp	r3, #4
 8009da0:	dd5d      	ble.n	8009e5e <_dtoa_r+0x94a>
 8009da2:	231c      	movs	r3, #28
 8009da4:	1a9b      	subs	r3, r3, r2
 8009da6:	9a06      	ldr	r2, [sp, #24]
 8009da8:	18e4      	adds	r4, r4, r3
 8009daa:	18d2      	adds	r2, r2, r3
 8009dac:	9206      	str	r2, [sp, #24]
 8009dae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009db0:	18d3      	adds	r3, r2, r3
 8009db2:	930d      	str	r3, [sp, #52]	@ 0x34
 8009db4:	9b06      	ldr	r3, [sp, #24]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	dd05      	ble.n	8009dc6 <_dtoa_r+0x8b2>
 8009dba:	001a      	movs	r2, r3
 8009dbc:	9905      	ldr	r1, [sp, #20]
 8009dbe:	9803      	ldr	r0, [sp, #12]
 8009dc0:	f000 fd10 	bl	800a7e4 <__lshift>
 8009dc4:	9005      	str	r0, [sp, #20]
 8009dc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	dd05      	ble.n	8009dd8 <_dtoa_r+0x8c4>
 8009dcc:	0031      	movs	r1, r6
 8009dce:	001a      	movs	r2, r3
 8009dd0:	9803      	ldr	r0, [sp, #12]
 8009dd2:	f000 fd07 	bl	800a7e4 <__lshift>
 8009dd6:	0006      	movs	r6, r0
 8009dd8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d045      	beq.n	8009e6a <_dtoa_r+0x956>
 8009dde:	0031      	movs	r1, r6
 8009de0:	9805      	ldr	r0, [sp, #20]
 8009de2:	f000 fd6b 	bl	800a8bc <__mcmp>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	da3f      	bge.n	8009e6a <_dtoa_r+0x956>
 8009dea:	9b04      	ldr	r3, [sp, #16]
 8009dec:	220a      	movs	r2, #10
 8009dee:	3b01      	subs	r3, #1
 8009df0:	930c      	str	r3, [sp, #48]	@ 0x30
 8009df2:	9905      	ldr	r1, [sp, #20]
 8009df4:	2300      	movs	r3, #0
 8009df6:	9803      	ldr	r0, [sp, #12]
 8009df8:	f000 faee 	bl	800a3d8 <__multadd>
 8009dfc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009dfe:	9005      	str	r0, [sp, #20]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d100      	bne.n	8009e06 <_dtoa_r+0x8f2>
 8009e04:	e15c      	b.n	800a0c0 <_dtoa_r+0xbac>
 8009e06:	2300      	movs	r3, #0
 8009e08:	0039      	movs	r1, r7
 8009e0a:	220a      	movs	r2, #10
 8009e0c:	9803      	ldr	r0, [sp, #12]
 8009e0e:	f000 fae3 	bl	800a3d8 <__multadd>
 8009e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e14:	0007      	movs	r7, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	dc55      	bgt.n	8009ec6 <_dtoa_r+0x9b2>
 8009e1a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	dc2d      	bgt.n	8009e7c <_dtoa_r+0x968>
 8009e20:	e051      	b.n	8009ec6 <_dtoa_r+0x9b2>
 8009e22:	2336      	movs	r3, #54	@ 0x36
 8009e24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e26:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009e28:	9c06      	ldr	r4, [sp, #24]
 8009e2a:	1a9b      	subs	r3, r3, r2
 8009e2c:	e73c      	b.n	8009ca8 <_dtoa_r+0x794>
 8009e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e30:	1e5d      	subs	r5, r3, #1
 8009e32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e34:	42ab      	cmp	r3, r5
 8009e36:	db08      	blt.n	8009e4a <_dtoa_r+0x936>
 8009e38:	1b5d      	subs	r5, r3, r5
 8009e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e3c:	9c06      	ldr	r4, [sp, #24]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	db00      	blt.n	8009e44 <_dtoa_r+0x930>
 8009e42:	e731      	b.n	8009ca8 <_dtoa_r+0x794>
 8009e44:	1ae4      	subs	r4, r4, r3
 8009e46:	2300      	movs	r3, #0
 8009e48:	e72e      	b.n	8009ca8 <_dtoa_r+0x794>
 8009e4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e4c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009e4e:	1aeb      	subs	r3, r5, r3
 8009e50:	18d3      	adds	r3, r2, r3
 8009e52:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009e54:	9314      	str	r3, [sp, #80]	@ 0x50
 8009e56:	2500      	movs	r5, #0
 8009e58:	e7ef      	b.n	8009e3a <_dtoa_r+0x926>
 8009e5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009e5c:	e75e      	b.n	8009d1c <_dtoa_r+0x808>
 8009e5e:	2b04      	cmp	r3, #4
 8009e60:	d0a8      	beq.n	8009db4 <_dtoa_r+0x8a0>
 8009e62:	331c      	adds	r3, #28
 8009e64:	e79f      	b.n	8009da6 <_dtoa_r+0x892>
 8009e66:	0013      	movs	r3, r2
 8009e68:	e7fb      	b.n	8009e62 <_dtoa_r+0x94e>
 8009e6a:	9b04      	ldr	r3, [sp, #16]
 8009e6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e70:	930e      	str	r3, [sp, #56]	@ 0x38
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	dc23      	bgt.n	8009ebe <_dtoa_r+0x9aa>
 8009e76:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	dd20      	ble.n	8009ebe <_dtoa_r+0x9aa>
 8009e7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d000      	beq.n	8009e84 <_dtoa_r+0x970>
 8009e82:	e6b5      	b.n	8009bf0 <_dtoa_r+0x6dc>
 8009e84:	0031      	movs	r1, r6
 8009e86:	2205      	movs	r2, #5
 8009e88:	9803      	ldr	r0, [sp, #12]
 8009e8a:	f000 faa5 	bl	800a3d8 <__multadd>
 8009e8e:	0006      	movs	r6, r0
 8009e90:	0001      	movs	r1, r0
 8009e92:	9805      	ldr	r0, [sp, #20]
 8009e94:	f000 fd12 	bl	800a8bc <__mcmp>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	dc00      	bgt.n	8009e9e <_dtoa_r+0x98a>
 8009e9c:	e6a8      	b.n	8009bf0 <_dtoa_r+0x6dc>
 8009e9e:	9b08      	ldr	r3, [sp, #32]
 8009ea0:	9a08      	ldr	r2, [sp, #32]
 8009ea2:	1c5c      	adds	r4, r3, #1
 8009ea4:	2331      	movs	r3, #49	@ 0x31
 8009ea6:	7013      	strb	r3, [r2, #0]
 8009ea8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009eaa:	3301      	adds	r3, #1
 8009eac:	930c      	str	r3, [sp, #48]	@ 0x30
 8009eae:	e6a3      	b.n	8009bf8 <_dtoa_r+0x6e4>
 8009eb0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009eb2:	0037      	movs	r7, r6
 8009eb4:	e7f3      	b.n	8009e9e <_dtoa_r+0x98a>
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009eba:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ebc:	e7f9      	b.n	8009eb2 <_dtoa_r+0x99e>
 8009ebe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d100      	bne.n	8009ec6 <_dtoa_r+0x9b2>
 8009ec4:	e100      	b.n	800a0c8 <_dtoa_r+0xbb4>
 8009ec6:	2c00      	cmp	r4, #0
 8009ec8:	dd05      	ble.n	8009ed6 <_dtoa_r+0x9c2>
 8009eca:	0039      	movs	r1, r7
 8009ecc:	0022      	movs	r2, r4
 8009ece:	9803      	ldr	r0, [sp, #12]
 8009ed0:	f000 fc88 	bl	800a7e4 <__lshift>
 8009ed4:	0007      	movs	r7, r0
 8009ed6:	0038      	movs	r0, r7
 8009ed8:	2d00      	cmp	r5, #0
 8009eda:	d018      	beq.n	8009f0e <_dtoa_r+0x9fa>
 8009edc:	6879      	ldr	r1, [r7, #4]
 8009ede:	9803      	ldr	r0, [sp, #12]
 8009ee0:	f000 fa12 	bl	800a308 <_Balloc>
 8009ee4:	1e04      	subs	r4, r0, #0
 8009ee6:	d105      	bne.n	8009ef4 <_dtoa_r+0x9e0>
 8009ee8:	0022      	movs	r2, r4
 8009eea:	4b2b      	ldr	r3, [pc, #172]	@ (8009f98 <_dtoa_r+0xa84>)
 8009eec:	482b      	ldr	r0, [pc, #172]	@ (8009f9c <_dtoa_r+0xa88>)
 8009eee:	492c      	ldr	r1, [pc, #176]	@ (8009fa0 <_dtoa_r+0xa8c>)
 8009ef0:	f7ff fb25 	bl	800953e <_dtoa_r+0x2a>
 8009ef4:	0039      	movs	r1, r7
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	310c      	adds	r1, #12
 8009efa:	3202      	adds	r2, #2
 8009efc:	0092      	lsls	r2, r2, #2
 8009efe:	300c      	adds	r0, #12
 8009f00:	f001 ffb2 	bl	800be68 <memcpy>
 8009f04:	2201      	movs	r2, #1
 8009f06:	0021      	movs	r1, r4
 8009f08:	9803      	ldr	r0, [sp, #12]
 8009f0a:	f000 fc6b 	bl	800a7e4 <__lshift>
 8009f0e:	9b08      	ldr	r3, [sp, #32]
 8009f10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f12:	9306      	str	r3, [sp, #24]
 8009f14:	3b01      	subs	r3, #1
 8009f16:	189b      	adds	r3, r3, r2
 8009f18:	2201      	movs	r2, #1
 8009f1a:	9704      	str	r7, [sp, #16]
 8009f1c:	0007      	movs	r7, r0
 8009f1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f22:	4013      	ands	r3, r2
 8009f24:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f26:	0031      	movs	r1, r6
 8009f28:	9805      	ldr	r0, [sp, #20]
 8009f2a:	f7ff fa65 	bl	80093f8 <quorem>
 8009f2e:	9904      	ldr	r1, [sp, #16]
 8009f30:	0005      	movs	r5, r0
 8009f32:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f34:	9805      	ldr	r0, [sp, #20]
 8009f36:	f000 fcc1 	bl	800a8bc <__mcmp>
 8009f3a:	003a      	movs	r2, r7
 8009f3c:	900d      	str	r0, [sp, #52]	@ 0x34
 8009f3e:	0031      	movs	r1, r6
 8009f40:	9803      	ldr	r0, [sp, #12]
 8009f42:	f000 fcd7 	bl	800a8f4 <__mdiff>
 8009f46:	2201      	movs	r2, #1
 8009f48:	68c3      	ldr	r3, [r0, #12]
 8009f4a:	0004      	movs	r4, r0
 8009f4c:	3530      	adds	r5, #48	@ 0x30
 8009f4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d104      	bne.n	8009f5e <_dtoa_r+0xa4a>
 8009f54:	0001      	movs	r1, r0
 8009f56:	9805      	ldr	r0, [sp, #20]
 8009f58:	f000 fcb0 	bl	800a8bc <__mcmp>
 8009f5c:	9009      	str	r0, [sp, #36]	@ 0x24
 8009f5e:	0021      	movs	r1, r4
 8009f60:	9803      	ldr	r0, [sp, #12]
 8009f62:	f000 fa15 	bl	800a390 <_Bfree>
 8009f66:	9b06      	ldr	r3, [sp, #24]
 8009f68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f6a:	1c5c      	adds	r4, r3, #1
 8009f6c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f72:	4313      	orrs	r3, r2
 8009f74:	d116      	bne.n	8009fa4 <_dtoa_r+0xa90>
 8009f76:	2d39      	cmp	r5, #57	@ 0x39
 8009f78:	d02f      	beq.n	8009fda <_dtoa_r+0xac6>
 8009f7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	dd01      	ble.n	8009f84 <_dtoa_r+0xa70>
 8009f80:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009f82:	3531      	adds	r5, #49	@ 0x31
 8009f84:	9b06      	ldr	r3, [sp, #24]
 8009f86:	701d      	strb	r5, [r3, #0]
 8009f88:	e638      	b.n	8009bfc <_dtoa_r+0x6e8>
 8009f8a:	46c0      	nop			@ (mov r8, r8)
 8009f8c:	40240000 	.word	0x40240000
 8009f90:	00000433 	.word	0x00000433
 8009f94:	7ff00000 	.word	0x7ff00000
 8009f98:	0800dd41 	.word	0x0800dd41
 8009f9c:	0800dce9 	.word	0x0800dce9
 8009fa0:	000002ef 	.word	0x000002ef
 8009fa4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	db04      	blt.n	8009fb4 <_dtoa_r+0xaa0>
 8009faa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009fac:	4313      	orrs	r3, r2
 8009fae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	d11e      	bne.n	8009ff2 <_dtoa_r+0xade>
 8009fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	dde4      	ble.n	8009f84 <_dtoa_r+0xa70>
 8009fba:	9905      	ldr	r1, [sp, #20]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	9803      	ldr	r0, [sp, #12]
 8009fc0:	f000 fc10 	bl	800a7e4 <__lshift>
 8009fc4:	0031      	movs	r1, r6
 8009fc6:	9005      	str	r0, [sp, #20]
 8009fc8:	f000 fc78 	bl	800a8bc <__mcmp>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	dc02      	bgt.n	8009fd6 <_dtoa_r+0xac2>
 8009fd0:	d1d8      	bne.n	8009f84 <_dtoa_r+0xa70>
 8009fd2:	07eb      	lsls	r3, r5, #31
 8009fd4:	d5d6      	bpl.n	8009f84 <_dtoa_r+0xa70>
 8009fd6:	2d39      	cmp	r5, #57	@ 0x39
 8009fd8:	d1d2      	bne.n	8009f80 <_dtoa_r+0xa6c>
 8009fda:	2339      	movs	r3, #57	@ 0x39
 8009fdc:	9a06      	ldr	r2, [sp, #24]
 8009fde:	7013      	strb	r3, [r2, #0]
 8009fe0:	0023      	movs	r3, r4
 8009fe2:	001c      	movs	r4, r3
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	781a      	ldrb	r2, [r3, #0]
 8009fe8:	2a39      	cmp	r2, #57	@ 0x39
 8009fea:	d04f      	beq.n	800a08c <_dtoa_r+0xb78>
 8009fec:	3201      	adds	r2, #1
 8009fee:	701a      	strb	r2, [r3, #0]
 8009ff0:	e604      	b.n	8009bfc <_dtoa_r+0x6e8>
 8009ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dd03      	ble.n	800a000 <_dtoa_r+0xaec>
 8009ff8:	2d39      	cmp	r5, #57	@ 0x39
 8009ffa:	d0ee      	beq.n	8009fda <_dtoa_r+0xac6>
 8009ffc:	3501      	adds	r5, #1
 8009ffe:	e7c1      	b.n	8009f84 <_dtoa_r+0xa70>
 800a000:	9b06      	ldr	r3, [sp, #24]
 800a002:	9a06      	ldr	r2, [sp, #24]
 800a004:	701d      	strb	r5, [r3, #0]
 800a006:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a008:	4293      	cmp	r3, r2
 800a00a:	d02a      	beq.n	800a062 <_dtoa_r+0xb4e>
 800a00c:	2300      	movs	r3, #0
 800a00e:	220a      	movs	r2, #10
 800a010:	9905      	ldr	r1, [sp, #20]
 800a012:	9803      	ldr	r0, [sp, #12]
 800a014:	f000 f9e0 	bl	800a3d8 <__multadd>
 800a018:	9b04      	ldr	r3, [sp, #16]
 800a01a:	9005      	str	r0, [sp, #20]
 800a01c:	42bb      	cmp	r3, r7
 800a01e:	d109      	bne.n	800a034 <_dtoa_r+0xb20>
 800a020:	2300      	movs	r3, #0
 800a022:	220a      	movs	r2, #10
 800a024:	9904      	ldr	r1, [sp, #16]
 800a026:	9803      	ldr	r0, [sp, #12]
 800a028:	f000 f9d6 	bl	800a3d8 <__multadd>
 800a02c:	9004      	str	r0, [sp, #16]
 800a02e:	0007      	movs	r7, r0
 800a030:	9406      	str	r4, [sp, #24]
 800a032:	e778      	b.n	8009f26 <_dtoa_r+0xa12>
 800a034:	9904      	ldr	r1, [sp, #16]
 800a036:	2300      	movs	r3, #0
 800a038:	220a      	movs	r2, #10
 800a03a:	9803      	ldr	r0, [sp, #12]
 800a03c:	f000 f9cc 	bl	800a3d8 <__multadd>
 800a040:	2300      	movs	r3, #0
 800a042:	9004      	str	r0, [sp, #16]
 800a044:	220a      	movs	r2, #10
 800a046:	0039      	movs	r1, r7
 800a048:	9803      	ldr	r0, [sp, #12]
 800a04a:	f000 f9c5 	bl	800a3d8 <__multadd>
 800a04e:	e7ee      	b.n	800a02e <_dtoa_r+0xb1a>
 800a050:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a052:	2401      	movs	r4, #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	dd00      	ble.n	800a05a <_dtoa_r+0xb46>
 800a058:	001c      	movs	r4, r3
 800a05a:	9b08      	ldr	r3, [sp, #32]
 800a05c:	191c      	adds	r4, r3, r4
 800a05e:	2300      	movs	r3, #0
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	9905      	ldr	r1, [sp, #20]
 800a064:	2201      	movs	r2, #1
 800a066:	9803      	ldr	r0, [sp, #12]
 800a068:	f000 fbbc 	bl	800a7e4 <__lshift>
 800a06c:	0031      	movs	r1, r6
 800a06e:	9005      	str	r0, [sp, #20]
 800a070:	f000 fc24 	bl	800a8bc <__mcmp>
 800a074:	2800      	cmp	r0, #0
 800a076:	dcb3      	bgt.n	8009fe0 <_dtoa_r+0xacc>
 800a078:	d101      	bne.n	800a07e <_dtoa_r+0xb6a>
 800a07a:	07ed      	lsls	r5, r5, #31
 800a07c:	d4b0      	bmi.n	8009fe0 <_dtoa_r+0xacc>
 800a07e:	0023      	movs	r3, r4
 800a080:	001c      	movs	r4, r3
 800a082:	3b01      	subs	r3, #1
 800a084:	781a      	ldrb	r2, [r3, #0]
 800a086:	2a30      	cmp	r2, #48	@ 0x30
 800a088:	d0fa      	beq.n	800a080 <_dtoa_r+0xb6c>
 800a08a:	e5b7      	b.n	8009bfc <_dtoa_r+0x6e8>
 800a08c:	9a08      	ldr	r2, [sp, #32]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d1a7      	bne.n	8009fe2 <_dtoa_r+0xace>
 800a092:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a094:	3301      	adds	r3, #1
 800a096:	930c      	str	r3, [sp, #48]	@ 0x30
 800a098:	2331      	movs	r3, #49	@ 0x31
 800a09a:	7013      	strb	r3, [r2, #0]
 800a09c:	e5ae      	b.n	8009bfc <_dtoa_r+0x6e8>
 800a09e:	4b15      	ldr	r3, [pc, #84]	@ (800a0f4 <_dtoa_r+0xbe0>)
 800a0a0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a0a2:	9308      	str	r3, [sp, #32]
 800a0a4:	4b14      	ldr	r3, [pc, #80]	@ (800a0f8 <_dtoa_r+0xbe4>)
 800a0a6:	2a00      	cmp	r2, #0
 800a0a8:	d001      	beq.n	800a0ae <_dtoa_r+0xb9a>
 800a0aa:	f7ff fa7b 	bl	80095a4 <_dtoa_r+0x90>
 800a0ae:	f7ff fa7b 	bl	80095a8 <_dtoa_r+0x94>
 800a0b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	dc00      	bgt.n	800a0ba <_dtoa_r+0xba6>
 800a0b8:	e648      	b.n	8009d4c <_dtoa_r+0x838>
 800a0ba:	2001      	movs	r0, #1
 800a0bc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a0be:	e665      	b.n	8009d8c <_dtoa_r+0x878>
 800a0c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	dc00      	bgt.n	800a0c8 <_dtoa_r+0xbb4>
 800a0c6:	e6d6      	b.n	8009e76 <_dtoa_r+0x962>
 800a0c8:	2400      	movs	r4, #0
 800a0ca:	0031      	movs	r1, r6
 800a0cc:	9805      	ldr	r0, [sp, #20]
 800a0ce:	f7ff f993 	bl	80093f8 <quorem>
 800a0d2:	9b08      	ldr	r3, [sp, #32]
 800a0d4:	3030      	adds	r0, #48	@ 0x30
 800a0d6:	5518      	strb	r0, [r3, r4]
 800a0d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0da:	3401      	adds	r4, #1
 800a0dc:	0005      	movs	r5, r0
 800a0de:	429c      	cmp	r4, r3
 800a0e0:	dab6      	bge.n	800a050 <_dtoa_r+0xb3c>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	220a      	movs	r2, #10
 800a0e6:	9905      	ldr	r1, [sp, #20]
 800a0e8:	9803      	ldr	r0, [sp, #12]
 800a0ea:	f000 f975 	bl	800a3d8 <__multadd>
 800a0ee:	9005      	str	r0, [sp, #20]
 800a0f0:	e7eb      	b.n	800a0ca <_dtoa_r+0xbb6>
 800a0f2:	46c0      	nop			@ (mov r8, r8)
 800a0f4:	0800dcc5 	.word	0x0800dcc5
 800a0f8:	0800dccd 	.word	0x0800dccd

0800a0fc <_free_r>:
 800a0fc:	b570      	push	{r4, r5, r6, lr}
 800a0fe:	0005      	movs	r5, r0
 800a100:	1e0c      	subs	r4, r1, #0
 800a102:	d010      	beq.n	800a126 <_free_r+0x2a>
 800a104:	3c04      	subs	r4, #4
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	da00      	bge.n	800a10e <_free_r+0x12>
 800a10c:	18e4      	adds	r4, r4, r3
 800a10e:	0028      	movs	r0, r5
 800a110:	f000 f8ea 	bl	800a2e8 <__malloc_lock>
 800a114:	4a1d      	ldr	r2, [pc, #116]	@ (800a18c <_free_r+0x90>)
 800a116:	6813      	ldr	r3, [r2, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d105      	bne.n	800a128 <_free_r+0x2c>
 800a11c:	6063      	str	r3, [r4, #4]
 800a11e:	6014      	str	r4, [r2, #0]
 800a120:	0028      	movs	r0, r5
 800a122:	f000 f8e9 	bl	800a2f8 <__malloc_unlock>
 800a126:	bd70      	pop	{r4, r5, r6, pc}
 800a128:	42a3      	cmp	r3, r4
 800a12a:	d908      	bls.n	800a13e <_free_r+0x42>
 800a12c:	6820      	ldr	r0, [r4, #0]
 800a12e:	1821      	adds	r1, r4, r0
 800a130:	428b      	cmp	r3, r1
 800a132:	d1f3      	bne.n	800a11c <_free_r+0x20>
 800a134:	6819      	ldr	r1, [r3, #0]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	1809      	adds	r1, r1, r0
 800a13a:	6021      	str	r1, [r4, #0]
 800a13c:	e7ee      	b.n	800a11c <_free_r+0x20>
 800a13e:	001a      	movs	r2, r3
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <_free_r+0x4e>
 800a146:	42a3      	cmp	r3, r4
 800a148:	d9f9      	bls.n	800a13e <_free_r+0x42>
 800a14a:	6811      	ldr	r1, [r2, #0]
 800a14c:	1850      	adds	r0, r2, r1
 800a14e:	42a0      	cmp	r0, r4
 800a150:	d10b      	bne.n	800a16a <_free_r+0x6e>
 800a152:	6820      	ldr	r0, [r4, #0]
 800a154:	1809      	adds	r1, r1, r0
 800a156:	1850      	adds	r0, r2, r1
 800a158:	6011      	str	r1, [r2, #0]
 800a15a:	4283      	cmp	r3, r0
 800a15c:	d1e0      	bne.n	800a120 <_free_r+0x24>
 800a15e:	6818      	ldr	r0, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	1841      	adds	r1, r0, r1
 800a164:	6011      	str	r1, [r2, #0]
 800a166:	6053      	str	r3, [r2, #4]
 800a168:	e7da      	b.n	800a120 <_free_r+0x24>
 800a16a:	42a0      	cmp	r0, r4
 800a16c:	d902      	bls.n	800a174 <_free_r+0x78>
 800a16e:	230c      	movs	r3, #12
 800a170:	602b      	str	r3, [r5, #0]
 800a172:	e7d5      	b.n	800a120 <_free_r+0x24>
 800a174:	6820      	ldr	r0, [r4, #0]
 800a176:	1821      	adds	r1, r4, r0
 800a178:	428b      	cmp	r3, r1
 800a17a:	d103      	bne.n	800a184 <_free_r+0x88>
 800a17c:	6819      	ldr	r1, [r3, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	1809      	adds	r1, r1, r0
 800a182:	6021      	str	r1, [r4, #0]
 800a184:	6063      	str	r3, [r4, #4]
 800a186:	6054      	str	r4, [r2, #4]
 800a188:	e7ca      	b.n	800a120 <_free_r+0x24>
 800a18a:	46c0      	nop			@ (mov r8, r8)
 800a18c:	200004a0 	.word	0x200004a0

0800a190 <malloc>:
 800a190:	b510      	push	{r4, lr}
 800a192:	4b03      	ldr	r3, [pc, #12]	@ (800a1a0 <malloc+0x10>)
 800a194:	0001      	movs	r1, r0
 800a196:	6818      	ldr	r0, [r3, #0]
 800a198:	f000 f826 	bl	800a1e8 <_malloc_r>
 800a19c:	bd10      	pop	{r4, pc}
 800a19e:	46c0      	nop			@ (mov r8, r8)
 800a1a0:	20000030 	.word	0x20000030

0800a1a4 <sbrk_aligned>:
 800a1a4:	b570      	push	{r4, r5, r6, lr}
 800a1a6:	4e0f      	ldr	r6, [pc, #60]	@ (800a1e4 <sbrk_aligned+0x40>)
 800a1a8:	000d      	movs	r5, r1
 800a1aa:	6831      	ldr	r1, [r6, #0]
 800a1ac:	0004      	movs	r4, r0
 800a1ae:	2900      	cmp	r1, #0
 800a1b0:	d102      	bne.n	800a1b8 <sbrk_aligned+0x14>
 800a1b2:	f001 fe47 	bl	800be44 <_sbrk_r>
 800a1b6:	6030      	str	r0, [r6, #0]
 800a1b8:	0029      	movs	r1, r5
 800a1ba:	0020      	movs	r0, r4
 800a1bc:	f001 fe42 	bl	800be44 <_sbrk_r>
 800a1c0:	1c43      	adds	r3, r0, #1
 800a1c2:	d103      	bne.n	800a1cc <sbrk_aligned+0x28>
 800a1c4:	2501      	movs	r5, #1
 800a1c6:	426d      	negs	r5, r5
 800a1c8:	0028      	movs	r0, r5
 800a1ca:	bd70      	pop	{r4, r5, r6, pc}
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	1cc5      	adds	r5, r0, #3
 800a1d0:	439d      	bics	r5, r3
 800a1d2:	42a8      	cmp	r0, r5
 800a1d4:	d0f8      	beq.n	800a1c8 <sbrk_aligned+0x24>
 800a1d6:	1a29      	subs	r1, r5, r0
 800a1d8:	0020      	movs	r0, r4
 800a1da:	f001 fe33 	bl	800be44 <_sbrk_r>
 800a1de:	3001      	adds	r0, #1
 800a1e0:	d1f2      	bne.n	800a1c8 <sbrk_aligned+0x24>
 800a1e2:	e7ef      	b.n	800a1c4 <sbrk_aligned+0x20>
 800a1e4:	2000049c 	.word	0x2000049c

0800a1e8 <_malloc_r>:
 800a1e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ea:	2203      	movs	r2, #3
 800a1ec:	1ccb      	adds	r3, r1, #3
 800a1ee:	4393      	bics	r3, r2
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	0005      	movs	r5, r0
 800a1f4:	001f      	movs	r7, r3
 800a1f6:	2b0c      	cmp	r3, #12
 800a1f8:	d234      	bcs.n	800a264 <_malloc_r+0x7c>
 800a1fa:	270c      	movs	r7, #12
 800a1fc:	42b9      	cmp	r1, r7
 800a1fe:	d833      	bhi.n	800a268 <_malloc_r+0x80>
 800a200:	0028      	movs	r0, r5
 800a202:	f000 f871 	bl	800a2e8 <__malloc_lock>
 800a206:	4e37      	ldr	r6, [pc, #220]	@ (800a2e4 <_malloc_r+0xfc>)
 800a208:	6833      	ldr	r3, [r6, #0]
 800a20a:	001c      	movs	r4, r3
 800a20c:	2c00      	cmp	r4, #0
 800a20e:	d12f      	bne.n	800a270 <_malloc_r+0x88>
 800a210:	0039      	movs	r1, r7
 800a212:	0028      	movs	r0, r5
 800a214:	f7ff ffc6 	bl	800a1a4 <sbrk_aligned>
 800a218:	0004      	movs	r4, r0
 800a21a:	1c43      	adds	r3, r0, #1
 800a21c:	d15f      	bne.n	800a2de <_malloc_r+0xf6>
 800a21e:	6834      	ldr	r4, [r6, #0]
 800a220:	9400      	str	r4, [sp, #0]
 800a222:	9b00      	ldr	r3, [sp, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d14a      	bne.n	800a2be <_malloc_r+0xd6>
 800a228:	2c00      	cmp	r4, #0
 800a22a:	d052      	beq.n	800a2d2 <_malloc_r+0xea>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	0028      	movs	r0, r5
 800a230:	18e3      	adds	r3, r4, r3
 800a232:	9900      	ldr	r1, [sp, #0]
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	f001 fe05 	bl	800be44 <_sbrk_r>
 800a23a:	9b01      	ldr	r3, [sp, #4]
 800a23c:	4283      	cmp	r3, r0
 800a23e:	d148      	bne.n	800a2d2 <_malloc_r+0xea>
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	0028      	movs	r0, r5
 800a244:	1aff      	subs	r7, r7, r3
 800a246:	0039      	movs	r1, r7
 800a248:	f7ff ffac 	bl	800a1a4 <sbrk_aligned>
 800a24c:	3001      	adds	r0, #1
 800a24e:	d040      	beq.n	800a2d2 <_malloc_r+0xea>
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	19db      	adds	r3, r3, r7
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	6833      	ldr	r3, [r6, #0]
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	2a00      	cmp	r2, #0
 800a25c:	d133      	bne.n	800a2c6 <_malloc_r+0xde>
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	6033      	str	r3, [r6, #0]
 800a262:	e019      	b.n	800a298 <_malloc_r+0xb0>
 800a264:	2b00      	cmp	r3, #0
 800a266:	dac9      	bge.n	800a1fc <_malloc_r+0x14>
 800a268:	230c      	movs	r3, #12
 800a26a:	602b      	str	r3, [r5, #0]
 800a26c:	2000      	movs	r0, #0
 800a26e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a270:	6821      	ldr	r1, [r4, #0]
 800a272:	1bc9      	subs	r1, r1, r7
 800a274:	d420      	bmi.n	800a2b8 <_malloc_r+0xd0>
 800a276:	290b      	cmp	r1, #11
 800a278:	d90a      	bls.n	800a290 <_malloc_r+0xa8>
 800a27a:	19e2      	adds	r2, r4, r7
 800a27c:	6027      	str	r7, [r4, #0]
 800a27e:	42a3      	cmp	r3, r4
 800a280:	d104      	bne.n	800a28c <_malloc_r+0xa4>
 800a282:	6032      	str	r2, [r6, #0]
 800a284:	6863      	ldr	r3, [r4, #4]
 800a286:	6011      	str	r1, [r2, #0]
 800a288:	6053      	str	r3, [r2, #4]
 800a28a:	e005      	b.n	800a298 <_malloc_r+0xb0>
 800a28c:	605a      	str	r2, [r3, #4]
 800a28e:	e7f9      	b.n	800a284 <_malloc_r+0x9c>
 800a290:	6862      	ldr	r2, [r4, #4]
 800a292:	42a3      	cmp	r3, r4
 800a294:	d10e      	bne.n	800a2b4 <_malloc_r+0xcc>
 800a296:	6032      	str	r2, [r6, #0]
 800a298:	0028      	movs	r0, r5
 800a29a:	f000 f82d 	bl	800a2f8 <__malloc_unlock>
 800a29e:	0020      	movs	r0, r4
 800a2a0:	2207      	movs	r2, #7
 800a2a2:	300b      	adds	r0, #11
 800a2a4:	1d23      	adds	r3, r4, #4
 800a2a6:	4390      	bics	r0, r2
 800a2a8:	1ac2      	subs	r2, r0, r3
 800a2aa:	4298      	cmp	r0, r3
 800a2ac:	d0df      	beq.n	800a26e <_malloc_r+0x86>
 800a2ae:	1a1b      	subs	r3, r3, r0
 800a2b0:	50a3      	str	r3, [r4, r2]
 800a2b2:	e7dc      	b.n	800a26e <_malloc_r+0x86>
 800a2b4:	605a      	str	r2, [r3, #4]
 800a2b6:	e7ef      	b.n	800a298 <_malloc_r+0xb0>
 800a2b8:	0023      	movs	r3, r4
 800a2ba:	6864      	ldr	r4, [r4, #4]
 800a2bc:	e7a6      	b.n	800a20c <_malloc_r+0x24>
 800a2be:	9c00      	ldr	r4, [sp, #0]
 800a2c0:	6863      	ldr	r3, [r4, #4]
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	e7ad      	b.n	800a222 <_malloc_r+0x3a>
 800a2c6:	001a      	movs	r2, r3
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	42a3      	cmp	r3, r4
 800a2cc:	d1fb      	bne.n	800a2c6 <_malloc_r+0xde>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	e7da      	b.n	800a288 <_malloc_r+0xa0>
 800a2d2:	230c      	movs	r3, #12
 800a2d4:	0028      	movs	r0, r5
 800a2d6:	602b      	str	r3, [r5, #0]
 800a2d8:	f000 f80e 	bl	800a2f8 <__malloc_unlock>
 800a2dc:	e7c6      	b.n	800a26c <_malloc_r+0x84>
 800a2de:	6007      	str	r7, [r0, #0]
 800a2e0:	e7da      	b.n	800a298 <_malloc_r+0xb0>
 800a2e2:	46c0      	nop			@ (mov r8, r8)
 800a2e4:	200004a0 	.word	0x200004a0

0800a2e8 <__malloc_lock>:
 800a2e8:	b510      	push	{r4, lr}
 800a2ea:	4802      	ldr	r0, [pc, #8]	@ (800a2f4 <__malloc_lock+0xc>)
 800a2ec:	f7ff f873 	bl	80093d6 <__retarget_lock_acquire_recursive>
 800a2f0:	bd10      	pop	{r4, pc}
 800a2f2:	46c0      	nop			@ (mov r8, r8)
 800a2f4:	20000498 	.word	0x20000498

0800a2f8 <__malloc_unlock>:
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	4802      	ldr	r0, [pc, #8]	@ (800a304 <__malloc_unlock+0xc>)
 800a2fc:	f7ff f86c 	bl	80093d8 <__retarget_lock_release_recursive>
 800a300:	bd10      	pop	{r4, pc}
 800a302:	46c0      	nop			@ (mov r8, r8)
 800a304:	20000498 	.word	0x20000498

0800a308 <_Balloc>:
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	69c5      	ldr	r5, [r0, #28]
 800a30c:	0006      	movs	r6, r0
 800a30e:	000c      	movs	r4, r1
 800a310:	2d00      	cmp	r5, #0
 800a312:	d10e      	bne.n	800a332 <_Balloc+0x2a>
 800a314:	2010      	movs	r0, #16
 800a316:	f7ff ff3b 	bl	800a190 <malloc>
 800a31a:	1e02      	subs	r2, r0, #0
 800a31c:	61f0      	str	r0, [r6, #28]
 800a31e:	d104      	bne.n	800a32a <_Balloc+0x22>
 800a320:	216b      	movs	r1, #107	@ 0x6b
 800a322:	4b19      	ldr	r3, [pc, #100]	@ (800a388 <_Balloc+0x80>)
 800a324:	4819      	ldr	r0, [pc, #100]	@ (800a38c <_Balloc+0x84>)
 800a326:	f001 fdaf 	bl	800be88 <__assert_func>
 800a32a:	6045      	str	r5, [r0, #4]
 800a32c:	6085      	str	r5, [r0, #8]
 800a32e:	6005      	str	r5, [r0, #0]
 800a330:	60c5      	str	r5, [r0, #12]
 800a332:	69f5      	ldr	r5, [r6, #28]
 800a334:	68eb      	ldr	r3, [r5, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d013      	beq.n	800a362 <_Balloc+0x5a>
 800a33a:	69f3      	ldr	r3, [r6, #28]
 800a33c:	00a2      	lsls	r2, r4, #2
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	189b      	adds	r3, r3, r2
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	2800      	cmp	r0, #0
 800a346:	d118      	bne.n	800a37a <_Balloc+0x72>
 800a348:	2101      	movs	r1, #1
 800a34a:	000d      	movs	r5, r1
 800a34c:	40a5      	lsls	r5, r4
 800a34e:	1d6a      	adds	r2, r5, #5
 800a350:	0030      	movs	r0, r6
 800a352:	0092      	lsls	r2, r2, #2
 800a354:	f001 fdb6 	bl	800bec4 <_calloc_r>
 800a358:	2800      	cmp	r0, #0
 800a35a:	d00c      	beq.n	800a376 <_Balloc+0x6e>
 800a35c:	6044      	str	r4, [r0, #4]
 800a35e:	6085      	str	r5, [r0, #8]
 800a360:	e00d      	b.n	800a37e <_Balloc+0x76>
 800a362:	2221      	movs	r2, #33	@ 0x21
 800a364:	2104      	movs	r1, #4
 800a366:	0030      	movs	r0, r6
 800a368:	f001 fdac 	bl	800bec4 <_calloc_r>
 800a36c:	69f3      	ldr	r3, [r6, #28]
 800a36e:	60e8      	str	r0, [r5, #12]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1e1      	bne.n	800a33a <_Balloc+0x32>
 800a376:	2000      	movs	r0, #0
 800a378:	bd70      	pop	{r4, r5, r6, pc}
 800a37a:	6802      	ldr	r2, [r0, #0]
 800a37c:	601a      	str	r2, [r3, #0]
 800a37e:	2300      	movs	r3, #0
 800a380:	6103      	str	r3, [r0, #16]
 800a382:	60c3      	str	r3, [r0, #12]
 800a384:	e7f8      	b.n	800a378 <_Balloc+0x70>
 800a386:	46c0      	nop			@ (mov r8, r8)
 800a388:	0800dcd2 	.word	0x0800dcd2
 800a38c:	0800dd52 	.word	0x0800dd52

0800a390 <_Bfree>:
 800a390:	b570      	push	{r4, r5, r6, lr}
 800a392:	69c6      	ldr	r6, [r0, #28]
 800a394:	0005      	movs	r5, r0
 800a396:	000c      	movs	r4, r1
 800a398:	2e00      	cmp	r6, #0
 800a39a:	d10e      	bne.n	800a3ba <_Bfree+0x2a>
 800a39c:	2010      	movs	r0, #16
 800a39e:	f7ff fef7 	bl	800a190 <malloc>
 800a3a2:	1e02      	subs	r2, r0, #0
 800a3a4:	61e8      	str	r0, [r5, #28]
 800a3a6:	d104      	bne.n	800a3b2 <_Bfree+0x22>
 800a3a8:	218f      	movs	r1, #143	@ 0x8f
 800a3aa:	4b09      	ldr	r3, [pc, #36]	@ (800a3d0 <_Bfree+0x40>)
 800a3ac:	4809      	ldr	r0, [pc, #36]	@ (800a3d4 <_Bfree+0x44>)
 800a3ae:	f001 fd6b 	bl	800be88 <__assert_func>
 800a3b2:	6046      	str	r6, [r0, #4]
 800a3b4:	6086      	str	r6, [r0, #8]
 800a3b6:	6006      	str	r6, [r0, #0]
 800a3b8:	60c6      	str	r6, [r0, #12]
 800a3ba:	2c00      	cmp	r4, #0
 800a3bc:	d007      	beq.n	800a3ce <_Bfree+0x3e>
 800a3be:	69eb      	ldr	r3, [r5, #28]
 800a3c0:	6862      	ldr	r2, [r4, #4]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	0092      	lsls	r2, r2, #2
 800a3c6:	189b      	adds	r3, r3, r2
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	6022      	str	r2, [r4, #0]
 800a3cc:	601c      	str	r4, [r3, #0]
 800a3ce:	bd70      	pop	{r4, r5, r6, pc}
 800a3d0:	0800dcd2 	.word	0x0800dcd2
 800a3d4:	0800dd52 	.word	0x0800dd52

0800a3d8 <__multadd>:
 800a3d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3da:	000f      	movs	r7, r1
 800a3dc:	9001      	str	r0, [sp, #4]
 800a3de:	000c      	movs	r4, r1
 800a3e0:	001e      	movs	r6, r3
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	690d      	ldr	r5, [r1, #16]
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	b299      	uxth	r1, r3
 800a3ee:	4351      	muls	r1, r2
 800a3f0:	0c1b      	lsrs	r3, r3, #16
 800a3f2:	4353      	muls	r3, r2
 800a3f4:	1989      	adds	r1, r1, r6
 800a3f6:	0c0e      	lsrs	r6, r1, #16
 800a3f8:	199b      	adds	r3, r3, r6
 800a3fa:	0c1e      	lsrs	r6, r3, #16
 800a3fc:	b289      	uxth	r1, r1
 800a3fe:	041b      	lsls	r3, r3, #16
 800a400:	185b      	adds	r3, r3, r1
 800a402:	c708      	stmia	r7!, {r3}
 800a404:	4285      	cmp	r5, r0
 800a406:	dcef      	bgt.n	800a3e8 <__multadd+0x10>
 800a408:	2e00      	cmp	r6, #0
 800a40a:	d022      	beq.n	800a452 <__multadd+0x7a>
 800a40c:	68a3      	ldr	r3, [r4, #8]
 800a40e:	42ab      	cmp	r3, r5
 800a410:	dc19      	bgt.n	800a446 <__multadd+0x6e>
 800a412:	6861      	ldr	r1, [r4, #4]
 800a414:	9801      	ldr	r0, [sp, #4]
 800a416:	3101      	adds	r1, #1
 800a418:	f7ff ff76 	bl	800a308 <_Balloc>
 800a41c:	1e07      	subs	r7, r0, #0
 800a41e:	d105      	bne.n	800a42c <__multadd+0x54>
 800a420:	003a      	movs	r2, r7
 800a422:	21ba      	movs	r1, #186	@ 0xba
 800a424:	4b0c      	ldr	r3, [pc, #48]	@ (800a458 <__multadd+0x80>)
 800a426:	480d      	ldr	r0, [pc, #52]	@ (800a45c <__multadd+0x84>)
 800a428:	f001 fd2e 	bl	800be88 <__assert_func>
 800a42c:	0021      	movs	r1, r4
 800a42e:	6922      	ldr	r2, [r4, #16]
 800a430:	310c      	adds	r1, #12
 800a432:	3202      	adds	r2, #2
 800a434:	0092      	lsls	r2, r2, #2
 800a436:	300c      	adds	r0, #12
 800a438:	f001 fd16 	bl	800be68 <memcpy>
 800a43c:	0021      	movs	r1, r4
 800a43e:	9801      	ldr	r0, [sp, #4]
 800a440:	f7ff ffa6 	bl	800a390 <_Bfree>
 800a444:	003c      	movs	r4, r7
 800a446:	1d2b      	adds	r3, r5, #4
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	18e3      	adds	r3, r4, r3
 800a44c:	3501      	adds	r5, #1
 800a44e:	605e      	str	r6, [r3, #4]
 800a450:	6125      	str	r5, [r4, #16]
 800a452:	0020      	movs	r0, r4
 800a454:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a456:	46c0      	nop			@ (mov r8, r8)
 800a458:	0800dd41 	.word	0x0800dd41
 800a45c:	0800dd52 	.word	0x0800dd52

0800a460 <__s2b>:
 800a460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a462:	0007      	movs	r7, r0
 800a464:	0018      	movs	r0, r3
 800a466:	000c      	movs	r4, r1
 800a468:	3008      	adds	r0, #8
 800a46a:	2109      	movs	r1, #9
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	0015      	movs	r5, r2
 800a470:	f7f5 fef0 	bl	8000254 <__divsi3>
 800a474:	2301      	movs	r3, #1
 800a476:	2100      	movs	r1, #0
 800a478:	4283      	cmp	r3, r0
 800a47a:	db0a      	blt.n	800a492 <__s2b+0x32>
 800a47c:	0038      	movs	r0, r7
 800a47e:	f7ff ff43 	bl	800a308 <_Balloc>
 800a482:	1e01      	subs	r1, r0, #0
 800a484:	d108      	bne.n	800a498 <__s2b+0x38>
 800a486:	000a      	movs	r2, r1
 800a488:	4b19      	ldr	r3, [pc, #100]	@ (800a4f0 <__s2b+0x90>)
 800a48a:	481a      	ldr	r0, [pc, #104]	@ (800a4f4 <__s2b+0x94>)
 800a48c:	31d3      	adds	r1, #211	@ 0xd3
 800a48e:	f001 fcfb 	bl	800be88 <__assert_func>
 800a492:	005b      	lsls	r3, r3, #1
 800a494:	3101      	adds	r1, #1
 800a496:	e7ef      	b.n	800a478 <__s2b+0x18>
 800a498:	9b08      	ldr	r3, [sp, #32]
 800a49a:	6143      	str	r3, [r0, #20]
 800a49c:	2301      	movs	r3, #1
 800a49e:	6103      	str	r3, [r0, #16]
 800a4a0:	2d09      	cmp	r5, #9
 800a4a2:	dd18      	ble.n	800a4d6 <__s2b+0x76>
 800a4a4:	0023      	movs	r3, r4
 800a4a6:	3309      	adds	r3, #9
 800a4a8:	001e      	movs	r6, r3
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	1964      	adds	r4, r4, r5
 800a4ae:	7833      	ldrb	r3, [r6, #0]
 800a4b0:	220a      	movs	r2, #10
 800a4b2:	0038      	movs	r0, r7
 800a4b4:	3b30      	subs	r3, #48	@ 0x30
 800a4b6:	f7ff ff8f 	bl	800a3d8 <__multadd>
 800a4ba:	3601      	adds	r6, #1
 800a4bc:	0001      	movs	r1, r0
 800a4be:	42a6      	cmp	r6, r4
 800a4c0:	d1f5      	bne.n	800a4ae <__s2b+0x4e>
 800a4c2:	002c      	movs	r4, r5
 800a4c4:	9b00      	ldr	r3, [sp, #0]
 800a4c6:	3c08      	subs	r4, #8
 800a4c8:	191c      	adds	r4, r3, r4
 800a4ca:	002e      	movs	r6, r5
 800a4cc:	9b01      	ldr	r3, [sp, #4]
 800a4ce:	429e      	cmp	r6, r3
 800a4d0:	db04      	blt.n	800a4dc <__s2b+0x7c>
 800a4d2:	0008      	movs	r0, r1
 800a4d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4d6:	2509      	movs	r5, #9
 800a4d8:	340a      	adds	r4, #10
 800a4da:	e7f6      	b.n	800a4ca <__s2b+0x6a>
 800a4dc:	1b63      	subs	r3, r4, r5
 800a4de:	5d9b      	ldrb	r3, [r3, r6]
 800a4e0:	220a      	movs	r2, #10
 800a4e2:	0038      	movs	r0, r7
 800a4e4:	3b30      	subs	r3, #48	@ 0x30
 800a4e6:	f7ff ff77 	bl	800a3d8 <__multadd>
 800a4ea:	3601      	adds	r6, #1
 800a4ec:	0001      	movs	r1, r0
 800a4ee:	e7ed      	b.n	800a4cc <__s2b+0x6c>
 800a4f0:	0800dd41 	.word	0x0800dd41
 800a4f4:	0800dd52 	.word	0x0800dd52

0800a4f8 <__hi0bits>:
 800a4f8:	2280      	movs	r2, #128	@ 0x80
 800a4fa:	0003      	movs	r3, r0
 800a4fc:	0252      	lsls	r2, r2, #9
 800a4fe:	2000      	movs	r0, #0
 800a500:	4293      	cmp	r3, r2
 800a502:	d201      	bcs.n	800a508 <__hi0bits+0x10>
 800a504:	041b      	lsls	r3, r3, #16
 800a506:	3010      	adds	r0, #16
 800a508:	2280      	movs	r2, #128	@ 0x80
 800a50a:	0452      	lsls	r2, r2, #17
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d201      	bcs.n	800a514 <__hi0bits+0x1c>
 800a510:	3008      	adds	r0, #8
 800a512:	021b      	lsls	r3, r3, #8
 800a514:	2280      	movs	r2, #128	@ 0x80
 800a516:	0552      	lsls	r2, r2, #21
 800a518:	4293      	cmp	r3, r2
 800a51a:	d201      	bcs.n	800a520 <__hi0bits+0x28>
 800a51c:	3004      	adds	r0, #4
 800a51e:	011b      	lsls	r3, r3, #4
 800a520:	2280      	movs	r2, #128	@ 0x80
 800a522:	05d2      	lsls	r2, r2, #23
 800a524:	4293      	cmp	r3, r2
 800a526:	d201      	bcs.n	800a52c <__hi0bits+0x34>
 800a528:	3002      	adds	r0, #2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	db03      	blt.n	800a538 <__hi0bits+0x40>
 800a530:	3001      	adds	r0, #1
 800a532:	4213      	tst	r3, r2
 800a534:	d100      	bne.n	800a538 <__hi0bits+0x40>
 800a536:	2020      	movs	r0, #32
 800a538:	4770      	bx	lr

0800a53a <__lo0bits>:
 800a53a:	6803      	ldr	r3, [r0, #0]
 800a53c:	0001      	movs	r1, r0
 800a53e:	2207      	movs	r2, #7
 800a540:	0018      	movs	r0, r3
 800a542:	4010      	ands	r0, r2
 800a544:	4213      	tst	r3, r2
 800a546:	d00d      	beq.n	800a564 <__lo0bits+0x2a>
 800a548:	3a06      	subs	r2, #6
 800a54a:	2000      	movs	r0, #0
 800a54c:	4213      	tst	r3, r2
 800a54e:	d105      	bne.n	800a55c <__lo0bits+0x22>
 800a550:	3002      	adds	r0, #2
 800a552:	4203      	tst	r3, r0
 800a554:	d003      	beq.n	800a55e <__lo0bits+0x24>
 800a556:	40d3      	lsrs	r3, r2
 800a558:	0010      	movs	r0, r2
 800a55a:	600b      	str	r3, [r1, #0]
 800a55c:	4770      	bx	lr
 800a55e:	089b      	lsrs	r3, r3, #2
 800a560:	600b      	str	r3, [r1, #0]
 800a562:	e7fb      	b.n	800a55c <__lo0bits+0x22>
 800a564:	b29a      	uxth	r2, r3
 800a566:	2a00      	cmp	r2, #0
 800a568:	d101      	bne.n	800a56e <__lo0bits+0x34>
 800a56a:	2010      	movs	r0, #16
 800a56c:	0c1b      	lsrs	r3, r3, #16
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	2a00      	cmp	r2, #0
 800a572:	d101      	bne.n	800a578 <__lo0bits+0x3e>
 800a574:	3008      	adds	r0, #8
 800a576:	0a1b      	lsrs	r3, r3, #8
 800a578:	071a      	lsls	r2, r3, #28
 800a57a:	d101      	bne.n	800a580 <__lo0bits+0x46>
 800a57c:	3004      	adds	r0, #4
 800a57e:	091b      	lsrs	r3, r3, #4
 800a580:	079a      	lsls	r2, r3, #30
 800a582:	d101      	bne.n	800a588 <__lo0bits+0x4e>
 800a584:	3002      	adds	r0, #2
 800a586:	089b      	lsrs	r3, r3, #2
 800a588:	07da      	lsls	r2, r3, #31
 800a58a:	d4e9      	bmi.n	800a560 <__lo0bits+0x26>
 800a58c:	3001      	adds	r0, #1
 800a58e:	085b      	lsrs	r3, r3, #1
 800a590:	d1e6      	bne.n	800a560 <__lo0bits+0x26>
 800a592:	2020      	movs	r0, #32
 800a594:	e7e2      	b.n	800a55c <__lo0bits+0x22>
	...

0800a598 <__i2b>:
 800a598:	b510      	push	{r4, lr}
 800a59a:	000c      	movs	r4, r1
 800a59c:	2101      	movs	r1, #1
 800a59e:	f7ff feb3 	bl	800a308 <_Balloc>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d107      	bne.n	800a5b6 <__i2b+0x1e>
 800a5a6:	2146      	movs	r1, #70	@ 0x46
 800a5a8:	4c05      	ldr	r4, [pc, #20]	@ (800a5c0 <__i2b+0x28>)
 800a5aa:	0002      	movs	r2, r0
 800a5ac:	4b05      	ldr	r3, [pc, #20]	@ (800a5c4 <__i2b+0x2c>)
 800a5ae:	0020      	movs	r0, r4
 800a5b0:	31ff      	adds	r1, #255	@ 0xff
 800a5b2:	f001 fc69 	bl	800be88 <__assert_func>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	6144      	str	r4, [r0, #20]
 800a5ba:	6103      	str	r3, [r0, #16]
 800a5bc:	bd10      	pop	{r4, pc}
 800a5be:	46c0      	nop			@ (mov r8, r8)
 800a5c0:	0800dd52 	.word	0x0800dd52
 800a5c4:	0800dd41 	.word	0x0800dd41

0800a5c8 <__multiply>:
 800a5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ca:	0014      	movs	r4, r2
 800a5cc:	690a      	ldr	r2, [r1, #16]
 800a5ce:	6923      	ldr	r3, [r4, #16]
 800a5d0:	000d      	movs	r5, r1
 800a5d2:	b08b      	sub	sp, #44	@ 0x2c
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	db02      	blt.n	800a5de <__multiply+0x16>
 800a5d8:	0023      	movs	r3, r4
 800a5da:	000c      	movs	r4, r1
 800a5dc:	001d      	movs	r5, r3
 800a5de:	6927      	ldr	r7, [r4, #16]
 800a5e0:	692e      	ldr	r6, [r5, #16]
 800a5e2:	6861      	ldr	r1, [r4, #4]
 800a5e4:	19bb      	adds	r3, r7, r6
 800a5e6:	9303      	str	r3, [sp, #12]
 800a5e8:	68a3      	ldr	r3, [r4, #8]
 800a5ea:	19ba      	adds	r2, r7, r6
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	da00      	bge.n	800a5f2 <__multiply+0x2a>
 800a5f0:	3101      	adds	r1, #1
 800a5f2:	f7ff fe89 	bl	800a308 <_Balloc>
 800a5f6:	9002      	str	r0, [sp, #8]
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d106      	bne.n	800a60a <__multiply+0x42>
 800a5fc:	21b1      	movs	r1, #177	@ 0xb1
 800a5fe:	4b49      	ldr	r3, [pc, #292]	@ (800a724 <__multiply+0x15c>)
 800a600:	4849      	ldr	r0, [pc, #292]	@ (800a728 <__multiply+0x160>)
 800a602:	9a02      	ldr	r2, [sp, #8]
 800a604:	0049      	lsls	r1, r1, #1
 800a606:	f001 fc3f 	bl	800be88 <__assert_func>
 800a60a:	9b02      	ldr	r3, [sp, #8]
 800a60c:	2200      	movs	r2, #0
 800a60e:	3314      	adds	r3, #20
 800a610:	469c      	mov	ip, r3
 800a612:	19bb      	adds	r3, r7, r6
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4463      	add	r3, ip
 800a618:	9304      	str	r3, [sp, #16]
 800a61a:	4663      	mov	r3, ip
 800a61c:	9904      	ldr	r1, [sp, #16]
 800a61e:	428b      	cmp	r3, r1
 800a620:	d32a      	bcc.n	800a678 <__multiply+0xb0>
 800a622:	0023      	movs	r3, r4
 800a624:	00bf      	lsls	r7, r7, #2
 800a626:	3314      	adds	r3, #20
 800a628:	3514      	adds	r5, #20
 800a62a:	9308      	str	r3, [sp, #32]
 800a62c:	00b6      	lsls	r6, r6, #2
 800a62e:	19db      	adds	r3, r3, r7
 800a630:	9305      	str	r3, [sp, #20]
 800a632:	19ab      	adds	r3, r5, r6
 800a634:	9309      	str	r3, [sp, #36]	@ 0x24
 800a636:	2304      	movs	r3, #4
 800a638:	9306      	str	r3, [sp, #24]
 800a63a:	0023      	movs	r3, r4
 800a63c:	9a05      	ldr	r2, [sp, #20]
 800a63e:	3315      	adds	r3, #21
 800a640:	9501      	str	r5, [sp, #4]
 800a642:	429a      	cmp	r2, r3
 800a644:	d305      	bcc.n	800a652 <__multiply+0x8a>
 800a646:	1b13      	subs	r3, r2, r4
 800a648:	3b15      	subs	r3, #21
 800a64a:	089b      	lsrs	r3, r3, #2
 800a64c:	3301      	adds	r3, #1
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	9306      	str	r3, [sp, #24]
 800a652:	9b01      	ldr	r3, [sp, #4]
 800a654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a656:	4293      	cmp	r3, r2
 800a658:	d310      	bcc.n	800a67c <__multiply+0xb4>
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	dd05      	ble.n	800a66c <__multiply+0xa4>
 800a660:	9b04      	ldr	r3, [sp, #16]
 800a662:	3b04      	subs	r3, #4
 800a664:	9304      	str	r3, [sp, #16]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d056      	beq.n	800a71a <__multiply+0x152>
 800a66c:	9b02      	ldr	r3, [sp, #8]
 800a66e:	9a03      	ldr	r2, [sp, #12]
 800a670:	0018      	movs	r0, r3
 800a672:	611a      	str	r2, [r3, #16]
 800a674:	b00b      	add	sp, #44	@ 0x2c
 800a676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a678:	c304      	stmia	r3!, {r2}
 800a67a:	e7cf      	b.n	800a61c <__multiply+0x54>
 800a67c:	9b01      	ldr	r3, [sp, #4]
 800a67e:	6818      	ldr	r0, [r3, #0]
 800a680:	b280      	uxth	r0, r0
 800a682:	2800      	cmp	r0, #0
 800a684:	d01e      	beq.n	800a6c4 <__multiply+0xfc>
 800a686:	4667      	mov	r7, ip
 800a688:	2500      	movs	r5, #0
 800a68a:	9e08      	ldr	r6, [sp, #32]
 800a68c:	ce02      	ldmia	r6!, {r1}
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	9307      	str	r3, [sp, #28]
 800a692:	b28b      	uxth	r3, r1
 800a694:	4343      	muls	r3, r0
 800a696:	001a      	movs	r2, r3
 800a698:	466b      	mov	r3, sp
 800a69a:	0c09      	lsrs	r1, r1, #16
 800a69c:	8b9b      	ldrh	r3, [r3, #28]
 800a69e:	4341      	muls	r1, r0
 800a6a0:	18d3      	adds	r3, r2, r3
 800a6a2:	9a07      	ldr	r2, [sp, #28]
 800a6a4:	195b      	adds	r3, r3, r5
 800a6a6:	0c12      	lsrs	r2, r2, #16
 800a6a8:	1889      	adds	r1, r1, r2
 800a6aa:	0c1a      	lsrs	r2, r3, #16
 800a6ac:	188a      	adds	r2, r1, r2
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	0c15      	lsrs	r5, r2, #16
 800a6b2:	0412      	lsls	r2, r2, #16
 800a6b4:	431a      	orrs	r2, r3
 800a6b6:	9b05      	ldr	r3, [sp, #20]
 800a6b8:	c704      	stmia	r7!, {r2}
 800a6ba:	42b3      	cmp	r3, r6
 800a6bc:	d8e6      	bhi.n	800a68c <__multiply+0xc4>
 800a6be:	4663      	mov	r3, ip
 800a6c0:	9a06      	ldr	r2, [sp, #24]
 800a6c2:	509d      	str	r5, [r3, r2]
 800a6c4:	9b01      	ldr	r3, [sp, #4]
 800a6c6:	6818      	ldr	r0, [r3, #0]
 800a6c8:	0c00      	lsrs	r0, r0, #16
 800a6ca:	d020      	beq.n	800a70e <__multiply+0x146>
 800a6cc:	4663      	mov	r3, ip
 800a6ce:	0025      	movs	r5, r4
 800a6d0:	4661      	mov	r1, ip
 800a6d2:	2700      	movs	r7, #0
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3514      	adds	r5, #20
 800a6d8:	682a      	ldr	r2, [r5, #0]
 800a6da:	680e      	ldr	r6, [r1, #0]
 800a6dc:	b292      	uxth	r2, r2
 800a6de:	4342      	muls	r2, r0
 800a6e0:	0c36      	lsrs	r6, r6, #16
 800a6e2:	1992      	adds	r2, r2, r6
 800a6e4:	19d2      	adds	r2, r2, r7
 800a6e6:	0416      	lsls	r6, r2, #16
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	431e      	orrs	r6, r3
 800a6ec:	600e      	str	r6, [r1, #0]
 800a6ee:	cd40      	ldmia	r5!, {r6}
 800a6f0:	684b      	ldr	r3, [r1, #4]
 800a6f2:	0c36      	lsrs	r6, r6, #16
 800a6f4:	4346      	muls	r6, r0
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	0c12      	lsrs	r2, r2, #16
 800a6fa:	18f3      	adds	r3, r6, r3
 800a6fc:	189b      	adds	r3, r3, r2
 800a6fe:	9a05      	ldr	r2, [sp, #20]
 800a700:	0c1f      	lsrs	r7, r3, #16
 800a702:	3104      	adds	r1, #4
 800a704:	42aa      	cmp	r2, r5
 800a706:	d8e7      	bhi.n	800a6d8 <__multiply+0x110>
 800a708:	4662      	mov	r2, ip
 800a70a:	9906      	ldr	r1, [sp, #24]
 800a70c:	5053      	str	r3, [r2, r1]
 800a70e:	9b01      	ldr	r3, [sp, #4]
 800a710:	3304      	adds	r3, #4
 800a712:	9301      	str	r3, [sp, #4]
 800a714:	2304      	movs	r3, #4
 800a716:	449c      	add	ip, r3
 800a718:	e79b      	b.n	800a652 <__multiply+0x8a>
 800a71a:	9b03      	ldr	r3, [sp, #12]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	9303      	str	r3, [sp, #12]
 800a720:	e79b      	b.n	800a65a <__multiply+0x92>
 800a722:	46c0      	nop			@ (mov r8, r8)
 800a724:	0800dd41 	.word	0x0800dd41
 800a728:	0800dd52 	.word	0x0800dd52

0800a72c <__pow5mult>:
 800a72c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a72e:	2303      	movs	r3, #3
 800a730:	0015      	movs	r5, r2
 800a732:	0007      	movs	r7, r0
 800a734:	000e      	movs	r6, r1
 800a736:	401a      	ands	r2, r3
 800a738:	421d      	tst	r5, r3
 800a73a:	d008      	beq.n	800a74e <__pow5mult+0x22>
 800a73c:	4925      	ldr	r1, [pc, #148]	@ (800a7d4 <__pow5mult+0xa8>)
 800a73e:	3a01      	subs	r2, #1
 800a740:	0092      	lsls	r2, r2, #2
 800a742:	5852      	ldr	r2, [r2, r1]
 800a744:	2300      	movs	r3, #0
 800a746:	0031      	movs	r1, r6
 800a748:	f7ff fe46 	bl	800a3d8 <__multadd>
 800a74c:	0006      	movs	r6, r0
 800a74e:	10ad      	asrs	r5, r5, #2
 800a750:	d03d      	beq.n	800a7ce <__pow5mult+0xa2>
 800a752:	69fc      	ldr	r4, [r7, #28]
 800a754:	2c00      	cmp	r4, #0
 800a756:	d10f      	bne.n	800a778 <__pow5mult+0x4c>
 800a758:	2010      	movs	r0, #16
 800a75a:	f7ff fd19 	bl	800a190 <malloc>
 800a75e:	1e02      	subs	r2, r0, #0
 800a760:	61f8      	str	r0, [r7, #28]
 800a762:	d105      	bne.n	800a770 <__pow5mult+0x44>
 800a764:	21b4      	movs	r1, #180	@ 0xb4
 800a766:	4b1c      	ldr	r3, [pc, #112]	@ (800a7d8 <__pow5mult+0xac>)
 800a768:	481c      	ldr	r0, [pc, #112]	@ (800a7dc <__pow5mult+0xb0>)
 800a76a:	31ff      	adds	r1, #255	@ 0xff
 800a76c:	f001 fb8c 	bl	800be88 <__assert_func>
 800a770:	6044      	str	r4, [r0, #4]
 800a772:	6084      	str	r4, [r0, #8]
 800a774:	6004      	str	r4, [r0, #0]
 800a776:	60c4      	str	r4, [r0, #12]
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	689c      	ldr	r4, [r3, #8]
 800a77c:	9301      	str	r3, [sp, #4]
 800a77e:	2c00      	cmp	r4, #0
 800a780:	d108      	bne.n	800a794 <__pow5mult+0x68>
 800a782:	0038      	movs	r0, r7
 800a784:	4916      	ldr	r1, [pc, #88]	@ (800a7e0 <__pow5mult+0xb4>)
 800a786:	f7ff ff07 	bl	800a598 <__i2b>
 800a78a:	9b01      	ldr	r3, [sp, #4]
 800a78c:	0004      	movs	r4, r0
 800a78e:	6098      	str	r0, [r3, #8]
 800a790:	2300      	movs	r3, #0
 800a792:	6003      	str	r3, [r0, #0]
 800a794:	2301      	movs	r3, #1
 800a796:	421d      	tst	r5, r3
 800a798:	d00a      	beq.n	800a7b0 <__pow5mult+0x84>
 800a79a:	0031      	movs	r1, r6
 800a79c:	0022      	movs	r2, r4
 800a79e:	0038      	movs	r0, r7
 800a7a0:	f7ff ff12 	bl	800a5c8 <__multiply>
 800a7a4:	0031      	movs	r1, r6
 800a7a6:	9001      	str	r0, [sp, #4]
 800a7a8:	0038      	movs	r0, r7
 800a7aa:	f7ff fdf1 	bl	800a390 <_Bfree>
 800a7ae:	9e01      	ldr	r6, [sp, #4]
 800a7b0:	106d      	asrs	r5, r5, #1
 800a7b2:	d00c      	beq.n	800a7ce <__pow5mult+0xa2>
 800a7b4:	6820      	ldr	r0, [r4, #0]
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d107      	bne.n	800a7ca <__pow5mult+0x9e>
 800a7ba:	0022      	movs	r2, r4
 800a7bc:	0021      	movs	r1, r4
 800a7be:	0038      	movs	r0, r7
 800a7c0:	f7ff ff02 	bl	800a5c8 <__multiply>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	6020      	str	r0, [r4, #0]
 800a7c8:	6003      	str	r3, [r0, #0]
 800a7ca:	0004      	movs	r4, r0
 800a7cc:	e7e2      	b.n	800a794 <__pow5mult+0x68>
 800a7ce:	0030      	movs	r0, r6
 800a7d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7d2:	46c0      	nop			@ (mov r8, r8)
 800a7d4:	0800ddac 	.word	0x0800ddac
 800a7d8:	0800dcd2 	.word	0x0800dcd2
 800a7dc:	0800dd52 	.word	0x0800dd52
 800a7e0:	00000271 	.word	0x00000271

0800a7e4 <__lshift>:
 800a7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7e6:	000c      	movs	r4, r1
 800a7e8:	0016      	movs	r6, r2
 800a7ea:	6923      	ldr	r3, [r4, #16]
 800a7ec:	1157      	asrs	r7, r2, #5
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	18fb      	adds	r3, r7, r3
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	6849      	ldr	r1, [r1, #4]
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	9002      	str	r0, [sp, #8]
 800a7fe:	9a00      	ldr	r2, [sp, #0]
 800a800:	4293      	cmp	r3, r2
 800a802:	db10      	blt.n	800a826 <__lshift+0x42>
 800a804:	9802      	ldr	r0, [sp, #8]
 800a806:	f7ff fd7f 	bl	800a308 <_Balloc>
 800a80a:	2300      	movs	r3, #0
 800a80c:	0001      	movs	r1, r0
 800a80e:	0005      	movs	r5, r0
 800a810:	001a      	movs	r2, r3
 800a812:	3114      	adds	r1, #20
 800a814:	4298      	cmp	r0, r3
 800a816:	d10c      	bne.n	800a832 <__lshift+0x4e>
 800a818:	21ef      	movs	r1, #239	@ 0xef
 800a81a:	002a      	movs	r2, r5
 800a81c:	4b25      	ldr	r3, [pc, #148]	@ (800a8b4 <__lshift+0xd0>)
 800a81e:	4826      	ldr	r0, [pc, #152]	@ (800a8b8 <__lshift+0xd4>)
 800a820:	0049      	lsls	r1, r1, #1
 800a822:	f001 fb31 	bl	800be88 <__assert_func>
 800a826:	3101      	adds	r1, #1
 800a828:	005b      	lsls	r3, r3, #1
 800a82a:	e7e8      	b.n	800a7fe <__lshift+0x1a>
 800a82c:	0098      	lsls	r0, r3, #2
 800a82e:	500a      	str	r2, [r1, r0]
 800a830:	3301      	adds	r3, #1
 800a832:	42bb      	cmp	r3, r7
 800a834:	dbfa      	blt.n	800a82c <__lshift+0x48>
 800a836:	43fb      	mvns	r3, r7
 800a838:	17db      	asrs	r3, r3, #31
 800a83a:	401f      	ands	r7, r3
 800a83c:	00bf      	lsls	r7, r7, #2
 800a83e:	0023      	movs	r3, r4
 800a840:	201f      	movs	r0, #31
 800a842:	19c9      	adds	r1, r1, r7
 800a844:	0037      	movs	r7, r6
 800a846:	6922      	ldr	r2, [r4, #16]
 800a848:	3314      	adds	r3, #20
 800a84a:	0092      	lsls	r2, r2, #2
 800a84c:	189a      	adds	r2, r3, r2
 800a84e:	4007      	ands	r7, r0
 800a850:	4206      	tst	r6, r0
 800a852:	d029      	beq.n	800a8a8 <__lshift+0xc4>
 800a854:	3001      	adds	r0, #1
 800a856:	1bc0      	subs	r0, r0, r7
 800a858:	9003      	str	r0, [sp, #12]
 800a85a:	468c      	mov	ip, r1
 800a85c:	2000      	movs	r0, #0
 800a85e:	681e      	ldr	r6, [r3, #0]
 800a860:	40be      	lsls	r6, r7
 800a862:	4306      	orrs	r6, r0
 800a864:	4660      	mov	r0, ip
 800a866:	c040      	stmia	r0!, {r6}
 800a868:	4684      	mov	ip, r0
 800a86a:	9e03      	ldr	r6, [sp, #12]
 800a86c:	cb01      	ldmia	r3!, {r0}
 800a86e:	40f0      	lsrs	r0, r6
 800a870:	429a      	cmp	r2, r3
 800a872:	d8f4      	bhi.n	800a85e <__lshift+0x7a>
 800a874:	0026      	movs	r6, r4
 800a876:	3615      	adds	r6, #21
 800a878:	2304      	movs	r3, #4
 800a87a:	42b2      	cmp	r2, r6
 800a87c:	d304      	bcc.n	800a888 <__lshift+0xa4>
 800a87e:	1b13      	subs	r3, r2, r4
 800a880:	3b15      	subs	r3, #21
 800a882:	089b      	lsrs	r3, r3, #2
 800a884:	3301      	adds	r3, #1
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	50c8      	str	r0, [r1, r3]
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d002      	beq.n	800a894 <__lshift+0xb0>
 800a88e:	9b01      	ldr	r3, [sp, #4]
 800a890:	3302      	adds	r3, #2
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	9b00      	ldr	r3, [sp, #0]
 800a896:	9802      	ldr	r0, [sp, #8]
 800a898:	3b01      	subs	r3, #1
 800a89a:	0021      	movs	r1, r4
 800a89c:	612b      	str	r3, [r5, #16]
 800a89e:	f7ff fd77 	bl	800a390 <_Bfree>
 800a8a2:	0028      	movs	r0, r5
 800a8a4:	b005      	add	sp, #20
 800a8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a8:	cb01      	ldmia	r3!, {r0}
 800a8aa:	c101      	stmia	r1!, {r0}
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d8fb      	bhi.n	800a8a8 <__lshift+0xc4>
 800a8b0:	e7f0      	b.n	800a894 <__lshift+0xb0>
 800a8b2:	46c0      	nop			@ (mov r8, r8)
 800a8b4:	0800dd41 	.word	0x0800dd41
 800a8b8:	0800dd52 	.word	0x0800dd52

0800a8bc <__mcmp>:
 800a8bc:	b530      	push	{r4, r5, lr}
 800a8be:	690b      	ldr	r3, [r1, #16]
 800a8c0:	6904      	ldr	r4, [r0, #16]
 800a8c2:	0002      	movs	r2, r0
 800a8c4:	1ae0      	subs	r0, r4, r3
 800a8c6:	429c      	cmp	r4, r3
 800a8c8:	d10f      	bne.n	800a8ea <__mcmp+0x2e>
 800a8ca:	3214      	adds	r2, #20
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	3114      	adds	r1, #20
 800a8d0:	0014      	movs	r4, r2
 800a8d2:	18c9      	adds	r1, r1, r3
 800a8d4:	18d2      	adds	r2, r2, r3
 800a8d6:	3a04      	subs	r2, #4
 800a8d8:	3904      	subs	r1, #4
 800a8da:	6815      	ldr	r5, [r2, #0]
 800a8dc:	680b      	ldr	r3, [r1, #0]
 800a8de:	429d      	cmp	r5, r3
 800a8e0:	d004      	beq.n	800a8ec <__mcmp+0x30>
 800a8e2:	2001      	movs	r0, #1
 800a8e4:	429d      	cmp	r5, r3
 800a8e6:	d200      	bcs.n	800a8ea <__mcmp+0x2e>
 800a8e8:	3802      	subs	r0, #2
 800a8ea:	bd30      	pop	{r4, r5, pc}
 800a8ec:	4294      	cmp	r4, r2
 800a8ee:	d3f2      	bcc.n	800a8d6 <__mcmp+0x1a>
 800a8f0:	e7fb      	b.n	800a8ea <__mcmp+0x2e>
	...

0800a8f4 <__mdiff>:
 800a8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8f6:	000c      	movs	r4, r1
 800a8f8:	b087      	sub	sp, #28
 800a8fa:	9000      	str	r0, [sp, #0]
 800a8fc:	0011      	movs	r1, r2
 800a8fe:	0020      	movs	r0, r4
 800a900:	0017      	movs	r7, r2
 800a902:	f7ff ffdb 	bl	800a8bc <__mcmp>
 800a906:	1e05      	subs	r5, r0, #0
 800a908:	d110      	bne.n	800a92c <__mdiff+0x38>
 800a90a:	0001      	movs	r1, r0
 800a90c:	9800      	ldr	r0, [sp, #0]
 800a90e:	f7ff fcfb 	bl	800a308 <_Balloc>
 800a912:	1e02      	subs	r2, r0, #0
 800a914:	d104      	bne.n	800a920 <__mdiff+0x2c>
 800a916:	4b40      	ldr	r3, [pc, #256]	@ (800aa18 <__mdiff+0x124>)
 800a918:	4840      	ldr	r0, [pc, #256]	@ (800aa1c <__mdiff+0x128>)
 800a91a:	4941      	ldr	r1, [pc, #260]	@ (800aa20 <__mdiff+0x12c>)
 800a91c:	f001 fab4 	bl	800be88 <__assert_func>
 800a920:	2301      	movs	r3, #1
 800a922:	6145      	str	r5, [r0, #20]
 800a924:	6103      	str	r3, [r0, #16]
 800a926:	0010      	movs	r0, r2
 800a928:	b007      	add	sp, #28
 800a92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a92c:	2600      	movs	r6, #0
 800a92e:	42b0      	cmp	r0, r6
 800a930:	da03      	bge.n	800a93a <__mdiff+0x46>
 800a932:	0023      	movs	r3, r4
 800a934:	003c      	movs	r4, r7
 800a936:	001f      	movs	r7, r3
 800a938:	3601      	adds	r6, #1
 800a93a:	6861      	ldr	r1, [r4, #4]
 800a93c:	9800      	ldr	r0, [sp, #0]
 800a93e:	f7ff fce3 	bl	800a308 <_Balloc>
 800a942:	1e02      	subs	r2, r0, #0
 800a944:	d103      	bne.n	800a94e <__mdiff+0x5a>
 800a946:	4b34      	ldr	r3, [pc, #208]	@ (800aa18 <__mdiff+0x124>)
 800a948:	4834      	ldr	r0, [pc, #208]	@ (800aa1c <__mdiff+0x128>)
 800a94a:	4936      	ldr	r1, [pc, #216]	@ (800aa24 <__mdiff+0x130>)
 800a94c:	e7e6      	b.n	800a91c <__mdiff+0x28>
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	3414      	adds	r4, #20
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	18e3      	adds	r3, r4, r3
 800a958:	0021      	movs	r1, r4
 800a95a:	9401      	str	r4, [sp, #4]
 800a95c:	003c      	movs	r4, r7
 800a95e:	9302      	str	r3, [sp, #8]
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	3414      	adds	r4, #20
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	18e3      	adds	r3, r4, r3
 800a968:	9303      	str	r3, [sp, #12]
 800a96a:	0003      	movs	r3, r0
 800a96c:	60c6      	str	r6, [r0, #12]
 800a96e:	468c      	mov	ip, r1
 800a970:	2000      	movs	r0, #0
 800a972:	3314      	adds	r3, #20
 800a974:	9304      	str	r3, [sp, #16]
 800a976:	9305      	str	r3, [sp, #20]
 800a978:	4663      	mov	r3, ip
 800a97a:	cb20      	ldmia	r3!, {r5}
 800a97c:	b2a9      	uxth	r1, r5
 800a97e:	000e      	movs	r6, r1
 800a980:	469c      	mov	ip, r3
 800a982:	cc08      	ldmia	r4!, {r3}
 800a984:	0c2d      	lsrs	r5, r5, #16
 800a986:	b299      	uxth	r1, r3
 800a988:	1a71      	subs	r1, r6, r1
 800a98a:	1809      	adds	r1, r1, r0
 800a98c:	0c1b      	lsrs	r3, r3, #16
 800a98e:	1408      	asrs	r0, r1, #16
 800a990:	1aeb      	subs	r3, r5, r3
 800a992:	181b      	adds	r3, r3, r0
 800a994:	1418      	asrs	r0, r3, #16
 800a996:	b289      	uxth	r1, r1
 800a998:	041b      	lsls	r3, r3, #16
 800a99a:	4319      	orrs	r1, r3
 800a99c:	9b05      	ldr	r3, [sp, #20]
 800a99e:	c302      	stmia	r3!, {r1}
 800a9a0:	9305      	str	r3, [sp, #20]
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	d8e7      	bhi.n	800a978 <__mdiff+0x84>
 800a9a8:	0039      	movs	r1, r7
 800a9aa:	9c03      	ldr	r4, [sp, #12]
 800a9ac:	3115      	adds	r1, #21
 800a9ae:	2304      	movs	r3, #4
 800a9b0:	428c      	cmp	r4, r1
 800a9b2:	d304      	bcc.n	800a9be <__mdiff+0xca>
 800a9b4:	1be3      	subs	r3, r4, r7
 800a9b6:	3b15      	subs	r3, #21
 800a9b8:	089b      	lsrs	r3, r3, #2
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	9901      	ldr	r1, [sp, #4]
 800a9c0:	18cd      	adds	r5, r1, r3
 800a9c2:	9904      	ldr	r1, [sp, #16]
 800a9c4:	002e      	movs	r6, r5
 800a9c6:	18cb      	adds	r3, r1, r3
 800a9c8:	001f      	movs	r7, r3
 800a9ca:	9902      	ldr	r1, [sp, #8]
 800a9cc:	428e      	cmp	r6, r1
 800a9ce:	d311      	bcc.n	800a9f4 <__mdiff+0x100>
 800a9d0:	9c02      	ldr	r4, [sp, #8]
 800a9d2:	1ee9      	subs	r1, r5, #3
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	428c      	cmp	r4, r1
 800a9d8:	d304      	bcc.n	800a9e4 <__mdiff+0xf0>
 800a9da:	0021      	movs	r1, r4
 800a9dc:	3103      	adds	r1, #3
 800a9de:	1b49      	subs	r1, r1, r5
 800a9e0:	0889      	lsrs	r1, r1, #2
 800a9e2:	0088      	lsls	r0, r1, #2
 800a9e4:	181b      	adds	r3, r3, r0
 800a9e6:	3b04      	subs	r3, #4
 800a9e8:	6819      	ldr	r1, [r3, #0]
 800a9ea:	2900      	cmp	r1, #0
 800a9ec:	d010      	beq.n	800aa10 <__mdiff+0x11c>
 800a9ee:	9b00      	ldr	r3, [sp, #0]
 800a9f0:	6113      	str	r3, [r2, #16]
 800a9f2:	e798      	b.n	800a926 <__mdiff+0x32>
 800a9f4:	4684      	mov	ip, r0
 800a9f6:	ce02      	ldmia	r6!, {r1}
 800a9f8:	b288      	uxth	r0, r1
 800a9fa:	4460      	add	r0, ip
 800a9fc:	1400      	asrs	r0, r0, #16
 800a9fe:	0c0c      	lsrs	r4, r1, #16
 800aa00:	1904      	adds	r4, r0, r4
 800aa02:	4461      	add	r1, ip
 800aa04:	1420      	asrs	r0, r4, #16
 800aa06:	b289      	uxth	r1, r1
 800aa08:	0424      	lsls	r4, r4, #16
 800aa0a:	4321      	orrs	r1, r4
 800aa0c:	c702      	stmia	r7!, {r1}
 800aa0e:	e7dc      	b.n	800a9ca <__mdiff+0xd6>
 800aa10:	9900      	ldr	r1, [sp, #0]
 800aa12:	3901      	subs	r1, #1
 800aa14:	9100      	str	r1, [sp, #0]
 800aa16:	e7e6      	b.n	800a9e6 <__mdiff+0xf2>
 800aa18:	0800dd41 	.word	0x0800dd41
 800aa1c:	0800dd52 	.word	0x0800dd52
 800aa20:	00000237 	.word	0x00000237
 800aa24:	00000245 	.word	0x00000245

0800aa28 <__ulp>:
 800aa28:	b510      	push	{r4, lr}
 800aa2a:	2400      	movs	r4, #0
 800aa2c:	4b0c      	ldr	r3, [pc, #48]	@ (800aa60 <__ulp+0x38>)
 800aa2e:	4a0d      	ldr	r2, [pc, #52]	@ (800aa64 <__ulp+0x3c>)
 800aa30:	400b      	ands	r3, r1
 800aa32:	189b      	adds	r3, r3, r2
 800aa34:	42a3      	cmp	r3, r4
 800aa36:	dc06      	bgt.n	800aa46 <__ulp+0x1e>
 800aa38:	425b      	negs	r3, r3
 800aa3a:	151a      	asrs	r2, r3, #20
 800aa3c:	2a13      	cmp	r2, #19
 800aa3e:	dc05      	bgt.n	800aa4c <__ulp+0x24>
 800aa40:	2380      	movs	r3, #128	@ 0x80
 800aa42:	031b      	lsls	r3, r3, #12
 800aa44:	4113      	asrs	r3, r2
 800aa46:	0019      	movs	r1, r3
 800aa48:	0020      	movs	r0, r4
 800aa4a:	bd10      	pop	{r4, pc}
 800aa4c:	3a14      	subs	r2, #20
 800aa4e:	2401      	movs	r4, #1
 800aa50:	2a1e      	cmp	r2, #30
 800aa52:	dc02      	bgt.n	800aa5a <__ulp+0x32>
 800aa54:	2480      	movs	r4, #128	@ 0x80
 800aa56:	0624      	lsls	r4, r4, #24
 800aa58:	40d4      	lsrs	r4, r2
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	e7f3      	b.n	800aa46 <__ulp+0x1e>
 800aa5e:	46c0      	nop			@ (mov r8, r8)
 800aa60:	7ff00000 	.word	0x7ff00000
 800aa64:	fcc00000 	.word	0xfcc00000

0800aa68 <__b2d>:
 800aa68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa6a:	0006      	movs	r6, r0
 800aa6c:	6903      	ldr	r3, [r0, #16]
 800aa6e:	3614      	adds	r6, #20
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	18f3      	adds	r3, r6, r3
 800aa74:	1f1d      	subs	r5, r3, #4
 800aa76:	682c      	ldr	r4, [r5, #0]
 800aa78:	000f      	movs	r7, r1
 800aa7a:	0020      	movs	r0, r4
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	f7ff fd3b 	bl	800a4f8 <__hi0bits>
 800aa82:	2220      	movs	r2, #32
 800aa84:	1a12      	subs	r2, r2, r0
 800aa86:	603a      	str	r2, [r7, #0]
 800aa88:	0003      	movs	r3, r0
 800aa8a:	4a1c      	ldr	r2, [pc, #112]	@ (800aafc <__b2d+0x94>)
 800aa8c:	280a      	cmp	r0, #10
 800aa8e:	dc15      	bgt.n	800aabc <__b2d+0x54>
 800aa90:	210b      	movs	r1, #11
 800aa92:	0027      	movs	r7, r4
 800aa94:	1a09      	subs	r1, r1, r0
 800aa96:	40cf      	lsrs	r7, r1
 800aa98:	433a      	orrs	r2, r7
 800aa9a:	468c      	mov	ip, r1
 800aa9c:	0011      	movs	r1, r2
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	42ae      	cmp	r6, r5
 800aaa2:	d202      	bcs.n	800aaaa <__b2d+0x42>
 800aaa4:	9a01      	ldr	r2, [sp, #4]
 800aaa6:	3a08      	subs	r2, #8
 800aaa8:	6812      	ldr	r2, [r2, #0]
 800aaaa:	3315      	adds	r3, #21
 800aaac:	409c      	lsls	r4, r3
 800aaae:	4663      	mov	r3, ip
 800aab0:	0027      	movs	r7, r4
 800aab2:	40da      	lsrs	r2, r3
 800aab4:	4317      	orrs	r7, r2
 800aab6:	0038      	movs	r0, r7
 800aab8:	b003      	add	sp, #12
 800aaba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aabc:	2700      	movs	r7, #0
 800aabe:	42ae      	cmp	r6, r5
 800aac0:	d202      	bcs.n	800aac8 <__b2d+0x60>
 800aac2:	9d01      	ldr	r5, [sp, #4]
 800aac4:	3d08      	subs	r5, #8
 800aac6:	682f      	ldr	r7, [r5, #0]
 800aac8:	210b      	movs	r1, #11
 800aaca:	4249      	negs	r1, r1
 800aacc:	468c      	mov	ip, r1
 800aace:	449c      	add	ip, r3
 800aad0:	2b0b      	cmp	r3, #11
 800aad2:	d010      	beq.n	800aaf6 <__b2d+0x8e>
 800aad4:	4661      	mov	r1, ip
 800aad6:	2320      	movs	r3, #32
 800aad8:	408c      	lsls	r4, r1
 800aada:	1a5b      	subs	r3, r3, r1
 800aadc:	0039      	movs	r1, r7
 800aade:	40d9      	lsrs	r1, r3
 800aae0:	430c      	orrs	r4, r1
 800aae2:	4322      	orrs	r2, r4
 800aae4:	0011      	movs	r1, r2
 800aae6:	2200      	movs	r2, #0
 800aae8:	42b5      	cmp	r5, r6
 800aaea:	d901      	bls.n	800aaf0 <__b2d+0x88>
 800aaec:	3d04      	subs	r5, #4
 800aaee:	682a      	ldr	r2, [r5, #0]
 800aaf0:	4664      	mov	r4, ip
 800aaf2:	40a7      	lsls	r7, r4
 800aaf4:	e7dd      	b.n	800aab2 <__b2d+0x4a>
 800aaf6:	4322      	orrs	r2, r4
 800aaf8:	0011      	movs	r1, r2
 800aafa:	e7dc      	b.n	800aab6 <__b2d+0x4e>
 800aafc:	3ff00000 	.word	0x3ff00000

0800ab00 <__d2b>:
 800ab00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab02:	2101      	movs	r1, #1
 800ab04:	0016      	movs	r6, r2
 800ab06:	001f      	movs	r7, r3
 800ab08:	f7ff fbfe 	bl	800a308 <_Balloc>
 800ab0c:	1e04      	subs	r4, r0, #0
 800ab0e:	d105      	bne.n	800ab1c <__d2b+0x1c>
 800ab10:	0022      	movs	r2, r4
 800ab12:	4b25      	ldr	r3, [pc, #148]	@ (800aba8 <__d2b+0xa8>)
 800ab14:	4825      	ldr	r0, [pc, #148]	@ (800abac <__d2b+0xac>)
 800ab16:	4926      	ldr	r1, [pc, #152]	@ (800abb0 <__d2b+0xb0>)
 800ab18:	f001 f9b6 	bl	800be88 <__assert_func>
 800ab1c:	033b      	lsls	r3, r7, #12
 800ab1e:	007d      	lsls	r5, r7, #1
 800ab20:	0b1b      	lsrs	r3, r3, #12
 800ab22:	0d6d      	lsrs	r5, r5, #21
 800ab24:	d002      	beq.n	800ab2c <__d2b+0x2c>
 800ab26:	2280      	movs	r2, #128	@ 0x80
 800ab28:	0352      	lsls	r2, r2, #13
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	2e00      	cmp	r6, #0
 800ab30:	d025      	beq.n	800ab7e <__d2b+0x7e>
 800ab32:	4668      	mov	r0, sp
 800ab34:	9600      	str	r6, [sp, #0]
 800ab36:	f7ff fd00 	bl	800a53a <__lo0bits>
 800ab3a:	9b01      	ldr	r3, [sp, #4]
 800ab3c:	9900      	ldr	r1, [sp, #0]
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d01b      	beq.n	800ab7a <__d2b+0x7a>
 800ab42:	2220      	movs	r2, #32
 800ab44:	001e      	movs	r6, r3
 800ab46:	1a12      	subs	r2, r2, r0
 800ab48:	4096      	lsls	r6, r2
 800ab4a:	0032      	movs	r2, r6
 800ab4c:	40c3      	lsrs	r3, r0
 800ab4e:	430a      	orrs	r2, r1
 800ab50:	6162      	str	r2, [r4, #20]
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	9e01      	ldr	r6, [sp, #4]
 800ab56:	61a6      	str	r6, [r4, #24]
 800ab58:	1e73      	subs	r3, r6, #1
 800ab5a:	419e      	sbcs	r6, r3
 800ab5c:	3601      	adds	r6, #1
 800ab5e:	6126      	str	r6, [r4, #16]
 800ab60:	2d00      	cmp	r5, #0
 800ab62:	d014      	beq.n	800ab8e <__d2b+0x8e>
 800ab64:	2635      	movs	r6, #53	@ 0x35
 800ab66:	4b13      	ldr	r3, [pc, #76]	@ (800abb4 <__d2b+0xb4>)
 800ab68:	18ed      	adds	r5, r5, r3
 800ab6a:	9b08      	ldr	r3, [sp, #32]
 800ab6c:	182d      	adds	r5, r5, r0
 800ab6e:	601d      	str	r5, [r3, #0]
 800ab70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab72:	1a36      	subs	r6, r6, r0
 800ab74:	601e      	str	r6, [r3, #0]
 800ab76:	0020      	movs	r0, r4
 800ab78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab7a:	6161      	str	r1, [r4, #20]
 800ab7c:	e7ea      	b.n	800ab54 <__d2b+0x54>
 800ab7e:	a801      	add	r0, sp, #4
 800ab80:	f7ff fcdb 	bl	800a53a <__lo0bits>
 800ab84:	9b01      	ldr	r3, [sp, #4]
 800ab86:	2601      	movs	r6, #1
 800ab88:	6163      	str	r3, [r4, #20]
 800ab8a:	3020      	adds	r0, #32
 800ab8c:	e7e7      	b.n	800ab5e <__d2b+0x5e>
 800ab8e:	4b0a      	ldr	r3, [pc, #40]	@ (800abb8 <__d2b+0xb8>)
 800ab90:	18c0      	adds	r0, r0, r3
 800ab92:	9b08      	ldr	r3, [sp, #32]
 800ab94:	6018      	str	r0, [r3, #0]
 800ab96:	4b09      	ldr	r3, [pc, #36]	@ (800abbc <__d2b+0xbc>)
 800ab98:	18f3      	adds	r3, r6, r3
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	18e3      	adds	r3, r4, r3
 800ab9e:	6958      	ldr	r0, [r3, #20]
 800aba0:	f7ff fcaa 	bl	800a4f8 <__hi0bits>
 800aba4:	0176      	lsls	r6, r6, #5
 800aba6:	e7e3      	b.n	800ab70 <__d2b+0x70>
 800aba8:	0800dd41 	.word	0x0800dd41
 800abac:	0800dd52 	.word	0x0800dd52
 800abb0:	0000030f 	.word	0x0000030f
 800abb4:	fffffbcd 	.word	0xfffffbcd
 800abb8:	fffffbce 	.word	0xfffffbce
 800abbc:	3fffffff 	.word	0x3fffffff

0800abc0 <__ratio>:
 800abc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abc2:	b087      	sub	sp, #28
 800abc4:	000f      	movs	r7, r1
 800abc6:	a904      	add	r1, sp, #16
 800abc8:	0006      	movs	r6, r0
 800abca:	f7ff ff4d 	bl	800aa68 <__b2d>
 800abce:	9000      	str	r0, [sp, #0]
 800abd0:	9101      	str	r1, [sp, #4]
 800abd2:	9b00      	ldr	r3, [sp, #0]
 800abd4:	9c01      	ldr	r4, [sp, #4]
 800abd6:	0038      	movs	r0, r7
 800abd8:	a905      	add	r1, sp, #20
 800abda:	9302      	str	r3, [sp, #8]
 800abdc:	9403      	str	r4, [sp, #12]
 800abde:	f7ff ff43 	bl	800aa68 <__b2d>
 800abe2:	000d      	movs	r5, r1
 800abe4:	0002      	movs	r2, r0
 800abe6:	000b      	movs	r3, r1
 800abe8:	6930      	ldr	r0, [r6, #16]
 800abea:	6939      	ldr	r1, [r7, #16]
 800abec:	9e04      	ldr	r6, [sp, #16]
 800abee:	1a40      	subs	r0, r0, r1
 800abf0:	9905      	ldr	r1, [sp, #20]
 800abf2:	0140      	lsls	r0, r0, #5
 800abf4:	1a71      	subs	r1, r6, r1
 800abf6:	1841      	adds	r1, r0, r1
 800abf8:	0508      	lsls	r0, r1, #20
 800abfa:	2900      	cmp	r1, #0
 800abfc:	dd08      	ble.n	800ac10 <__ratio+0x50>
 800abfe:	9901      	ldr	r1, [sp, #4]
 800ac00:	1841      	adds	r1, r0, r1
 800ac02:	9103      	str	r1, [sp, #12]
 800ac04:	9802      	ldr	r0, [sp, #8]
 800ac06:	9903      	ldr	r1, [sp, #12]
 800ac08:	f7f6 feb0 	bl	800196c <__aeabi_ddiv>
 800ac0c:	b007      	add	sp, #28
 800ac0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac10:	1a2b      	subs	r3, r5, r0
 800ac12:	e7f7      	b.n	800ac04 <__ratio+0x44>

0800ac14 <__copybits>:
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	0014      	movs	r4, r2
 800ac18:	0005      	movs	r5, r0
 800ac1a:	3901      	subs	r1, #1
 800ac1c:	6913      	ldr	r3, [r2, #16]
 800ac1e:	1149      	asrs	r1, r1, #5
 800ac20:	3101      	adds	r1, #1
 800ac22:	0089      	lsls	r1, r1, #2
 800ac24:	3414      	adds	r4, #20
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	1841      	adds	r1, r0, r1
 800ac2a:	18e3      	adds	r3, r4, r3
 800ac2c:	42a3      	cmp	r3, r4
 800ac2e:	d80d      	bhi.n	800ac4c <__copybits+0x38>
 800ac30:	0014      	movs	r4, r2
 800ac32:	3411      	adds	r4, #17
 800ac34:	2500      	movs	r5, #0
 800ac36:	429c      	cmp	r4, r3
 800ac38:	d803      	bhi.n	800ac42 <__copybits+0x2e>
 800ac3a:	1a9b      	subs	r3, r3, r2
 800ac3c:	3b11      	subs	r3, #17
 800ac3e:	089b      	lsrs	r3, r3, #2
 800ac40:	009d      	lsls	r5, r3, #2
 800ac42:	2300      	movs	r3, #0
 800ac44:	1940      	adds	r0, r0, r5
 800ac46:	4281      	cmp	r1, r0
 800ac48:	d803      	bhi.n	800ac52 <__copybits+0x3e>
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	cc40      	ldmia	r4!, {r6}
 800ac4e:	c540      	stmia	r5!, {r6}
 800ac50:	e7ec      	b.n	800ac2c <__copybits+0x18>
 800ac52:	c008      	stmia	r0!, {r3}
 800ac54:	e7f7      	b.n	800ac46 <__copybits+0x32>

0800ac56 <__any_on>:
 800ac56:	0002      	movs	r2, r0
 800ac58:	6900      	ldr	r0, [r0, #16]
 800ac5a:	b510      	push	{r4, lr}
 800ac5c:	3214      	adds	r2, #20
 800ac5e:	114b      	asrs	r3, r1, #5
 800ac60:	4298      	cmp	r0, r3
 800ac62:	db13      	blt.n	800ac8c <__any_on+0x36>
 800ac64:	dd0c      	ble.n	800ac80 <__any_on+0x2a>
 800ac66:	241f      	movs	r4, #31
 800ac68:	0008      	movs	r0, r1
 800ac6a:	4020      	ands	r0, r4
 800ac6c:	4221      	tst	r1, r4
 800ac6e:	d007      	beq.n	800ac80 <__any_on+0x2a>
 800ac70:	0099      	lsls	r1, r3, #2
 800ac72:	588c      	ldr	r4, [r1, r2]
 800ac74:	0021      	movs	r1, r4
 800ac76:	40c1      	lsrs	r1, r0
 800ac78:	4081      	lsls	r1, r0
 800ac7a:	2001      	movs	r0, #1
 800ac7c:	428c      	cmp	r4, r1
 800ac7e:	d104      	bne.n	800ac8a <__any_on+0x34>
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	18d3      	adds	r3, r2, r3
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d803      	bhi.n	800ac90 <__any_on+0x3a>
 800ac88:	2000      	movs	r0, #0
 800ac8a:	bd10      	pop	{r4, pc}
 800ac8c:	0003      	movs	r3, r0
 800ac8e:	e7f7      	b.n	800ac80 <__any_on+0x2a>
 800ac90:	3b04      	subs	r3, #4
 800ac92:	6819      	ldr	r1, [r3, #0]
 800ac94:	2900      	cmp	r1, #0
 800ac96:	d0f5      	beq.n	800ac84 <__any_on+0x2e>
 800ac98:	2001      	movs	r0, #1
 800ac9a:	e7f6      	b.n	800ac8a <__any_on+0x34>

0800ac9c <sulp>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	0016      	movs	r6, r2
 800aca0:	000d      	movs	r5, r1
 800aca2:	f7ff fec1 	bl	800aa28 <__ulp>
 800aca6:	2e00      	cmp	r6, #0
 800aca8:	d00d      	beq.n	800acc6 <sulp+0x2a>
 800acaa:	236b      	movs	r3, #107	@ 0x6b
 800acac:	006a      	lsls	r2, r5, #1
 800acae:	0d52      	lsrs	r2, r2, #21
 800acb0:	1a9b      	subs	r3, r3, r2
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	dd07      	ble.n	800acc6 <sulp+0x2a>
 800acb6:	2400      	movs	r4, #0
 800acb8:	4a03      	ldr	r2, [pc, #12]	@ (800acc8 <sulp+0x2c>)
 800acba:	051b      	lsls	r3, r3, #20
 800acbc:	189d      	adds	r5, r3, r2
 800acbe:	002b      	movs	r3, r5
 800acc0:	0022      	movs	r2, r4
 800acc2:	f7f7 fa97 	bl	80021f4 <__aeabi_dmul>
 800acc6:	bd70      	pop	{r4, r5, r6, pc}
 800acc8:	3ff00000 	.word	0x3ff00000

0800accc <_strtod_l>:
 800accc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acce:	b0a3      	sub	sp, #140	@ 0x8c
 800acd0:	921b      	str	r2, [sp, #108]	@ 0x6c
 800acd2:	2200      	movs	r2, #0
 800acd4:	2600      	movs	r6, #0
 800acd6:	2700      	movs	r7, #0
 800acd8:	9005      	str	r0, [sp, #20]
 800acda:	9109      	str	r1, [sp, #36]	@ 0x24
 800acdc:	921e      	str	r2, [sp, #120]	@ 0x78
 800acde:	911d      	str	r1, [sp, #116]	@ 0x74
 800ace0:	780a      	ldrb	r2, [r1, #0]
 800ace2:	2a2b      	cmp	r2, #43	@ 0x2b
 800ace4:	d053      	beq.n	800ad8e <_strtod_l+0xc2>
 800ace6:	d83f      	bhi.n	800ad68 <_strtod_l+0x9c>
 800ace8:	2a0d      	cmp	r2, #13
 800acea:	d839      	bhi.n	800ad60 <_strtod_l+0x94>
 800acec:	2a08      	cmp	r2, #8
 800acee:	d839      	bhi.n	800ad64 <_strtod_l+0x98>
 800acf0:	2a00      	cmp	r2, #0
 800acf2:	d042      	beq.n	800ad7a <_strtod_l+0xae>
 800acf4:	2200      	movs	r2, #0
 800acf6:	9212      	str	r2, [sp, #72]	@ 0x48
 800acf8:	2100      	movs	r1, #0
 800acfa:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800acfc:	910c      	str	r1, [sp, #48]	@ 0x30
 800acfe:	782a      	ldrb	r2, [r5, #0]
 800ad00:	2a30      	cmp	r2, #48	@ 0x30
 800ad02:	d000      	beq.n	800ad06 <_strtod_l+0x3a>
 800ad04:	e083      	b.n	800ae0e <_strtod_l+0x142>
 800ad06:	786a      	ldrb	r2, [r5, #1]
 800ad08:	3120      	adds	r1, #32
 800ad0a:	438a      	bics	r2, r1
 800ad0c:	2a58      	cmp	r2, #88	@ 0x58
 800ad0e:	d000      	beq.n	800ad12 <_strtod_l+0x46>
 800ad10:	e073      	b.n	800adfa <_strtod_l+0x12e>
 800ad12:	9302      	str	r3, [sp, #8]
 800ad14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad16:	4a95      	ldr	r2, [pc, #596]	@ (800af6c <_strtod_l+0x2a0>)
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	ab1e      	add	r3, sp, #120	@ 0x78
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	9805      	ldr	r0, [sp, #20]
 800ad20:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ad22:	a91d      	add	r1, sp, #116	@ 0x74
 800ad24:	f001 f964 	bl	800bff0 <__gethex>
 800ad28:	230f      	movs	r3, #15
 800ad2a:	0002      	movs	r2, r0
 800ad2c:	401a      	ands	r2, r3
 800ad2e:	0004      	movs	r4, r0
 800ad30:	9206      	str	r2, [sp, #24]
 800ad32:	4218      	tst	r0, r3
 800ad34:	d005      	beq.n	800ad42 <_strtod_l+0x76>
 800ad36:	2a06      	cmp	r2, #6
 800ad38:	d12b      	bne.n	800ad92 <_strtod_l+0xc6>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	3501      	adds	r5, #1
 800ad3e:	951d      	str	r5, [sp, #116]	@ 0x74
 800ad40:	9312      	str	r3, [sp, #72]	@ 0x48
 800ad42:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <_strtod_l+0x82>
 800ad48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ad4c:	6013      	str	r3, [r2, #0]
 800ad4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d019      	beq.n	800ad88 <_strtod_l+0xbc>
 800ad54:	2380      	movs	r3, #128	@ 0x80
 800ad56:	0030      	movs	r0, r6
 800ad58:	061b      	lsls	r3, r3, #24
 800ad5a:	18f9      	adds	r1, r7, r3
 800ad5c:	b023      	add	sp, #140	@ 0x8c
 800ad5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad60:	2a20      	cmp	r2, #32
 800ad62:	d1c7      	bne.n	800acf4 <_strtod_l+0x28>
 800ad64:	3101      	adds	r1, #1
 800ad66:	e7ba      	b.n	800acde <_strtod_l+0x12>
 800ad68:	2a2d      	cmp	r2, #45	@ 0x2d
 800ad6a:	d1c3      	bne.n	800acf4 <_strtod_l+0x28>
 800ad6c:	3a2c      	subs	r2, #44	@ 0x2c
 800ad6e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ad70:	1c4a      	adds	r2, r1, #1
 800ad72:	921d      	str	r2, [sp, #116]	@ 0x74
 800ad74:	784a      	ldrb	r2, [r1, #1]
 800ad76:	2a00      	cmp	r2, #0
 800ad78:	d1be      	bne.n	800acf8 <_strtod_l+0x2c>
 800ad7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad7c:	931d      	str	r3, [sp, #116]	@ 0x74
 800ad7e:	2300      	movs	r3, #0
 800ad80:	9312      	str	r3, [sp, #72]	@ 0x48
 800ad82:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1df      	bne.n	800ad48 <_strtod_l+0x7c>
 800ad88:	0030      	movs	r0, r6
 800ad8a:	0039      	movs	r1, r7
 800ad8c:	e7e6      	b.n	800ad5c <_strtod_l+0x90>
 800ad8e:	2200      	movs	r2, #0
 800ad90:	e7ed      	b.n	800ad6e <_strtod_l+0xa2>
 800ad92:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800ad94:	2a00      	cmp	r2, #0
 800ad96:	d007      	beq.n	800ada8 <_strtod_l+0xdc>
 800ad98:	2135      	movs	r1, #53	@ 0x35
 800ad9a:	a820      	add	r0, sp, #128	@ 0x80
 800ad9c:	f7ff ff3a 	bl	800ac14 <__copybits>
 800ada0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ada2:	9805      	ldr	r0, [sp, #20]
 800ada4:	f7ff faf4 	bl	800a390 <_Bfree>
 800ada8:	9806      	ldr	r0, [sp, #24]
 800adaa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800adac:	3801      	subs	r0, #1
 800adae:	2804      	cmp	r0, #4
 800adb0:	d806      	bhi.n	800adc0 <_strtod_l+0xf4>
 800adb2:	f7f5 f9b1 	bl	8000118 <__gnu_thumb1_case_uqi>
 800adb6:	0312      	.short	0x0312
 800adb8:	1e1c      	.short	0x1e1c
 800adba:	12          	.byte	0x12
 800adbb:	00          	.byte	0x00
 800adbc:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800adbe:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800adc0:	05e4      	lsls	r4, r4, #23
 800adc2:	d502      	bpl.n	800adca <_strtod_l+0xfe>
 800adc4:	2380      	movs	r3, #128	@ 0x80
 800adc6:	061b      	lsls	r3, r3, #24
 800adc8:	431f      	orrs	r7, r3
 800adca:	4b69      	ldr	r3, [pc, #420]	@ (800af70 <_strtod_l+0x2a4>)
 800adcc:	423b      	tst	r3, r7
 800adce:	d1b8      	bne.n	800ad42 <_strtod_l+0x76>
 800add0:	f7fe fad6 	bl	8009380 <__errno>
 800add4:	2322      	movs	r3, #34	@ 0x22
 800add6:	6003      	str	r3, [r0, #0]
 800add8:	e7b3      	b.n	800ad42 <_strtod_l+0x76>
 800adda:	4966      	ldr	r1, [pc, #408]	@ (800af74 <_strtod_l+0x2a8>)
 800addc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800adde:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ade0:	400a      	ands	r2, r1
 800ade2:	4965      	ldr	r1, [pc, #404]	@ (800af78 <_strtod_l+0x2ac>)
 800ade4:	185b      	adds	r3, r3, r1
 800ade6:	051b      	lsls	r3, r3, #20
 800ade8:	431a      	orrs	r2, r3
 800adea:	0017      	movs	r7, r2
 800adec:	e7e8      	b.n	800adc0 <_strtod_l+0xf4>
 800adee:	4f60      	ldr	r7, [pc, #384]	@ (800af70 <_strtod_l+0x2a4>)
 800adf0:	e7e6      	b.n	800adc0 <_strtod_l+0xf4>
 800adf2:	2601      	movs	r6, #1
 800adf4:	4f61      	ldr	r7, [pc, #388]	@ (800af7c <_strtod_l+0x2b0>)
 800adf6:	4276      	negs	r6, r6
 800adf8:	e7e2      	b.n	800adc0 <_strtod_l+0xf4>
 800adfa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800adfc:	1c5a      	adds	r2, r3, #1
 800adfe:	921d      	str	r2, [sp, #116]	@ 0x74
 800ae00:	785b      	ldrb	r3, [r3, #1]
 800ae02:	2b30      	cmp	r3, #48	@ 0x30
 800ae04:	d0f9      	beq.n	800adfa <_strtod_l+0x12e>
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d09b      	beq.n	800ad42 <_strtod_l+0x76>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae0e:	2500      	movs	r5, #0
 800ae10:	220a      	movs	r2, #10
 800ae12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ae14:	950d      	str	r5, [sp, #52]	@ 0x34
 800ae16:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae18:	9508      	str	r5, [sp, #32]
 800ae1a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800ae1c:	7804      	ldrb	r4, [r0, #0]
 800ae1e:	0023      	movs	r3, r4
 800ae20:	3b30      	subs	r3, #48	@ 0x30
 800ae22:	b2d9      	uxtb	r1, r3
 800ae24:	2909      	cmp	r1, #9
 800ae26:	d927      	bls.n	800ae78 <_strtod_l+0x1ac>
 800ae28:	2201      	movs	r2, #1
 800ae2a:	4955      	ldr	r1, [pc, #340]	@ (800af80 <_strtod_l+0x2b4>)
 800ae2c:	f000 fff8 	bl	800be20 <strncmp>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d031      	beq.n	800ae98 <_strtod_l+0x1cc>
 800ae34:	2000      	movs	r0, #0
 800ae36:	0023      	movs	r3, r4
 800ae38:	4684      	mov	ip, r0
 800ae3a:	9a08      	ldr	r2, [sp, #32]
 800ae3c:	900e      	str	r0, [sp, #56]	@ 0x38
 800ae3e:	9206      	str	r2, [sp, #24]
 800ae40:	2220      	movs	r2, #32
 800ae42:	0019      	movs	r1, r3
 800ae44:	4391      	bics	r1, r2
 800ae46:	000a      	movs	r2, r1
 800ae48:	2100      	movs	r1, #0
 800ae4a:	9107      	str	r1, [sp, #28]
 800ae4c:	2a45      	cmp	r2, #69	@ 0x45
 800ae4e:	d000      	beq.n	800ae52 <_strtod_l+0x186>
 800ae50:	e0c0      	b.n	800afd4 <_strtod_l+0x308>
 800ae52:	9b06      	ldr	r3, [sp, #24]
 800ae54:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ae56:	4303      	orrs	r3, r0
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	428b      	cmp	r3, r1
 800ae5c:	d08d      	beq.n	800ad7a <_strtod_l+0xae>
 800ae5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ae60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae62:	3301      	adds	r3, #1
 800ae64:	931d      	str	r3, [sp, #116]	@ 0x74
 800ae66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae68:	785b      	ldrb	r3, [r3, #1]
 800ae6a:	2b2b      	cmp	r3, #43	@ 0x2b
 800ae6c:	d070      	beq.n	800af50 <_strtod_l+0x284>
 800ae6e:	000c      	movs	r4, r1
 800ae70:	2b2d      	cmp	r3, #45	@ 0x2d
 800ae72:	d173      	bne.n	800af5c <_strtod_l+0x290>
 800ae74:	2401      	movs	r4, #1
 800ae76:	e06c      	b.n	800af52 <_strtod_l+0x286>
 800ae78:	9908      	ldr	r1, [sp, #32]
 800ae7a:	2908      	cmp	r1, #8
 800ae7c:	dc09      	bgt.n	800ae92 <_strtod_l+0x1c6>
 800ae7e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ae80:	4351      	muls	r1, r2
 800ae82:	185b      	adds	r3, r3, r1
 800ae84:	930d      	str	r3, [sp, #52]	@ 0x34
 800ae86:	9b08      	ldr	r3, [sp, #32]
 800ae88:	3001      	adds	r0, #1
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	9308      	str	r3, [sp, #32]
 800ae8e:	901d      	str	r0, [sp, #116]	@ 0x74
 800ae90:	e7c3      	b.n	800ae1a <_strtod_l+0x14e>
 800ae92:	4355      	muls	r5, r2
 800ae94:	195d      	adds	r5, r3, r5
 800ae96:	e7f6      	b.n	800ae86 <_strtod_l+0x1ba>
 800ae98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	921d      	str	r2, [sp, #116]	@ 0x74
 800ae9e:	9a08      	ldr	r2, [sp, #32]
 800aea0:	785b      	ldrb	r3, [r3, #1]
 800aea2:	2a00      	cmp	r2, #0
 800aea4:	d03a      	beq.n	800af1c <_strtod_l+0x250>
 800aea6:	900e      	str	r0, [sp, #56]	@ 0x38
 800aea8:	9206      	str	r2, [sp, #24]
 800aeaa:	001a      	movs	r2, r3
 800aeac:	3a30      	subs	r2, #48	@ 0x30
 800aeae:	2a09      	cmp	r2, #9
 800aeb0:	d912      	bls.n	800aed8 <_strtod_l+0x20c>
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	4694      	mov	ip, r2
 800aeb6:	e7c3      	b.n	800ae40 <_strtod_l+0x174>
 800aeb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aeba:	3001      	adds	r0, #1
 800aebc:	1c5a      	adds	r2, r3, #1
 800aebe:	921d      	str	r2, [sp, #116]	@ 0x74
 800aec0:	785b      	ldrb	r3, [r3, #1]
 800aec2:	2b30      	cmp	r3, #48	@ 0x30
 800aec4:	d0f8      	beq.n	800aeb8 <_strtod_l+0x1ec>
 800aec6:	001a      	movs	r2, r3
 800aec8:	3a31      	subs	r2, #49	@ 0x31
 800aeca:	2a08      	cmp	r2, #8
 800aecc:	d83b      	bhi.n	800af46 <_strtod_l+0x27a>
 800aece:	900e      	str	r0, [sp, #56]	@ 0x38
 800aed0:	2000      	movs	r0, #0
 800aed2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800aed4:	9006      	str	r0, [sp, #24]
 800aed6:	9213      	str	r2, [sp, #76]	@ 0x4c
 800aed8:	001a      	movs	r2, r3
 800aeda:	1c41      	adds	r1, r0, #1
 800aedc:	3a30      	subs	r2, #48	@ 0x30
 800aede:	2b30      	cmp	r3, #48	@ 0x30
 800aee0:	d016      	beq.n	800af10 <_strtod_l+0x244>
 800aee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aee4:	185b      	adds	r3, r3, r1
 800aee6:	930e      	str	r3, [sp, #56]	@ 0x38
 800aee8:	9b06      	ldr	r3, [sp, #24]
 800aeea:	210a      	movs	r1, #10
 800aeec:	469c      	mov	ip, r3
 800aeee:	4484      	add	ip, r0
 800aef0:	459c      	cmp	ip, r3
 800aef2:	d115      	bne.n	800af20 <_strtod_l+0x254>
 800aef4:	9906      	ldr	r1, [sp, #24]
 800aef6:	9b06      	ldr	r3, [sp, #24]
 800aef8:	3101      	adds	r1, #1
 800aefa:	1809      	adds	r1, r1, r0
 800aefc:	181b      	adds	r3, r3, r0
 800aefe:	9106      	str	r1, [sp, #24]
 800af00:	2b08      	cmp	r3, #8
 800af02:	dc19      	bgt.n	800af38 <_strtod_l+0x26c>
 800af04:	230a      	movs	r3, #10
 800af06:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800af08:	434b      	muls	r3, r1
 800af0a:	2100      	movs	r1, #0
 800af0c:	18d3      	adds	r3, r2, r3
 800af0e:	930d      	str	r3, [sp, #52]	@ 0x34
 800af10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800af12:	0008      	movs	r0, r1
 800af14:	1c5a      	adds	r2, r3, #1
 800af16:	921d      	str	r2, [sp, #116]	@ 0x74
 800af18:	785b      	ldrb	r3, [r3, #1]
 800af1a:	e7c6      	b.n	800aeaa <_strtod_l+0x1de>
 800af1c:	9808      	ldr	r0, [sp, #32]
 800af1e:	e7d0      	b.n	800aec2 <_strtod_l+0x1f6>
 800af20:	1c5c      	adds	r4, r3, #1
 800af22:	2b08      	cmp	r3, #8
 800af24:	dc04      	bgt.n	800af30 <_strtod_l+0x264>
 800af26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af28:	434b      	muls	r3, r1
 800af2a:	930d      	str	r3, [sp, #52]	@ 0x34
 800af2c:	0023      	movs	r3, r4
 800af2e:	e7df      	b.n	800aef0 <_strtod_l+0x224>
 800af30:	2c10      	cmp	r4, #16
 800af32:	dcfb      	bgt.n	800af2c <_strtod_l+0x260>
 800af34:	434d      	muls	r5, r1
 800af36:	e7f9      	b.n	800af2c <_strtod_l+0x260>
 800af38:	2100      	movs	r1, #0
 800af3a:	2b0f      	cmp	r3, #15
 800af3c:	dce8      	bgt.n	800af10 <_strtod_l+0x244>
 800af3e:	230a      	movs	r3, #10
 800af40:	435d      	muls	r5, r3
 800af42:	1955      	adds	r5, r2, r5
 800af44:	e7e4      	b.n	800af10 <_strtod_l+0x244>
 800af46:	2200      	movs	r2, #0
 800af48:	920e      	str	r2, [sp, #56]	@ 0x38
 800af4a:	9206      	str	r2, [sp, #24]
 800af4c:	3201      	adds	r2, #1
 800af4e:	e7b1      	b.n	800aeb4 <_strtod_l+0x1e8>
 800af50:	2400      	movs	r4, #0
 800af52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af54:	3302      	adds	r3, #2
 800af56:	931d      	str	r3, [sp, #116]	@ 0x74
 800af58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af5a:	789b      	ldrb	r3, [r3, #2]
 800af5c:	001a      	movs	r2, r3
 800af5e:	3a30      	subs	r2, #48	@ 0x30
 800af60:	2a09      	cmp	r2, #9
 800af62:	d913      	bls.n	800af8c <_strtod_l+0x2c0>
 800af64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af66:	921d      	str	r2, [sp, #116]	@ 0x74
 800af68:	2200      	movs	r2, #0
 800af6a:	e032      	b.n	800afd2 <_strtod_l+0x306>
 800af6c:	0800dec0 	.word	0x0800dec0
 800af70:	7ff00000 	.word	0x7ff00000
 800af74:	ffefffff 	.word	0xffefffff
 800af78:	00000433 	.word	0x00000433
 800af7c:	7fffffff 	.word	0x7fffffff
 800af80:	0800dea8 	.word	0x0800dea8
 800af84:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800af86:	1c5a      	adds	r2, r3, #1
 800af88:	921d      	str	r2, [sp, #116]	@ 0x74
 800af8a:	785b      	ldrb	r3, [r3, #1]
 800af8c:	2b30      	cmp	r3, #48	@ 0x30
 800af8e:	d0f9      	beq.n	800af84 <_strtod_l+0x2b8>
 800af90:	2200      	movs	r2, #0
 800af92:	9207      	str	r2, [sp, #28]
 800af94:	001a      	movs	r2, r3
 800af96:	3a31      	subs	r2, #49	@ 0x31
 800af98:	2a08      	cmp	r2, #8
 800af9a:	d81b      	bhi.n	800afd4 <_strtod_l+0x308>
 800af9c:	3b30      	subs	r3, #48	@ 0x30
 800af9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800afa0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800afa2:	9307      	str	r3, [sp, #28]
 800afa4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800afa6:	1c59      	adds	r1, r3, #1
 800afa8:	911d      	str	r1, [sp, #116]	@ 0x74
 800afaa:	785b      	ldrb	r3, [r3, #1]
 800afac:	001a      	movs	r2, r3
 800afae:	3a30      	subs	r2, #48	@ 0x30
 800afb0:	2a09      	cmp	r2, #9
 800afb2:	d93a      	bls.n	800b02a <_strtod_l+0x35e>
 800afb4:	9a07      	ldr	r2, [sp, #28]
 800afb6:	1a8a      	subs	r2, r1, r2
 800afb8:	49b4      	ldr	r1, [pc, #720]	@ (800b28c <_strtod_l+0x5c0>)
 800afba:	9107      	str	r1, [sp, #28]
 800afbc:	2a08      	cmp	r2, #8
 800afbe:	dc04      	bgt.n	800afca <_strtod_l+0x2fe>
 800afc0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800afc2:	9207      	str	r2, [sp, #28]
 800afc4:	428a      	cmp	r2, r1
 800afc6:	dd00      	ble.n	800afca <_strtod_l+0x2fe>
 800afc8:	9107      	str	r1, [sp, #28]
 800afca:	2c00      	cmp	r4, #0
 800afcc:	d002      	beq.n	800afd4 <_strtod_l+0x308>
 800afce:	9a07      	ldr	r2, [sp, #28]
 800afd0:	4252      	negs	r2, r2
 800afd2:	9207      	str	r2, [sp, #28]
 800afd4:	9a06      	ldr	r2, [sp, #24]
 800afd6:	2a00      	cmp	r2, #0
 800afd8:	d14d      	bne.n	800b076 <_strtod_l+0x3aa>
 800afda:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800afdc:	4310      	orrs	r0, r2
 800afde:	d000      	beq.n	800afe2 <_strtod_l+0x316>
 800afe0:	e6af      	b.n	800ad42 <_strtod_l+0x76>
 800afe2:	4662      	mov	r2, ip
 800afe4:	2a00      	cmp	r2, #0
 800afe6:	d000      	beq.n	800afea <_strtod_l+0x31e>
 800afe8:	e6c7      	b.n	800ad7a <_strtod_l+0xae>
 800afea:	2b69      	cmp	r3, #105	@ 0x69
 800afec:	d027      	beq.n	800b03e <_strtod_l+0x372>
 800afee:	dc23      	bgt.n	800b038 <_strtod_l+0x36c>
 800aff0:	2b49      	cmp	r3, #73	@ 0x49
 800aff2:	d024      	beq.n	800b03e <_strtod_l+0x372>
 800aff4:	2b4e      	cmp	r3, #78	@ 0x4e
 800aff6:	d000      	beq.n	800affa <_strtod_l+0x32e>
 800aff8:	e6bf      	b.n	800ad7a <_strtod_l+0xae>
 800affa:	49a5      	ldr	r1, [pc, #660]	@ (800b290 <_strtod_l+0x5c4>)
 800affc:	a81d      	add	r0, sp, #116	@ 0x74
 800affe:	f001 fa2d 	bl	800c45c <__match>
 800b002:	2800      	cmp	r0, #0
 800b004:	d100      	bne.n	800b008 <_strtod_l+0x33c>
 800b006:	e6b8      	b.n	800ad7a <_strtod_l+0xae>
 800b008:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	2b28      	cmp	r3, #40	@ 0x28
 800b00e:	d12c      	bne.n	800b06a <_strtod_l+0x39e>
 800b010:	49a0      	ldr	r1, [pc, #640]	@ (800b294 <_strtod_l+0x5c8>)
 800b012:	aa20      	add	r2, sp, #128	@ 0x80
 800b014:	a81d      	add	r0, sp, #116	@ 0x74
 800b016:	f001 fa35 	bl	800c484 <__hexnan>
 800b01a:	2805      	cmp	r0, #5
 800b01c:	d125      	bne.n	800b06a <_strtod_l+0x39e>
 800b01e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b020:	4a9d      	ldr	r2, [pc, #628]	@ (800b298 <_strtod_l+0x5cc>)
 800b022:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b024:	431a      	orrs	r2, r3
 800b026:	0017      	movs	r7, r2
 800b028:	e68b      	b.n	800ad42 <_strtod_l+0x76>
 800b02a:	220a      	movs	r2, #10
 800b02c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b02e:	434a      	muls	r2, r1
 800b030:	18d2      	adds	r2, r2, r3
 800b032:	3a30      	subs	r2, #48	@ 0x30
 800b034:	9210      	str	r2, [sp, #64]	@ 0x40
 800b036:	e7b5      	b.n	800afa4 <_strtod_l+0x2d8>
 800b038:	2b6e      	cmp	r3, #110	@ 0x6e
 800b03a:	d0de      	beq.n	800affa <_strtod_l+0x32e>
 800b03c:	e69d      	b.n	800ad7a <_strtod_l+0xae>
 800b03e:	4997      	ldr	r1, [pc, #604]	@ (800b29c <_strtod_l+0x5d0>)
 800b040:	a81d      	add	r0, sp, #116	@ 0x74
 800b042:	f001 fa0b 	bl	800c45c <__match>
 800b046:	2800      	cmp	r0, #0
 800b048:	d100      	bne.n	800b04c <_strtod_l+0x380>
 800b04a:	e696      	b.n	800ad7a <_strtod_l+0xae>
 800b04c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b04e:	4994      	ldr	r1, [pc, #592]	@ (800b2a0 <_strtod_l+0x5d4>)
 800b050:	3b01      	subs	r3, #1
 800b052:	a81d      	add	r0, sp, #116	@ 0x74
 800b054:	931d      	str	r3, [sp, #116]	@ 0x74
 800b056:	f001 fa01 	bl	800c45c <__match>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d102      	bne.n	800b064 <_strtod_l+0x398>
 800b05e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b060:	3301      	adds	r3, #1
 800b062:	931d      	str	r3, [sp, #116]	@ 0x74
 800b064:	2600      	movs	r6, #0
 800b066:	4f8c      	ldr	r7, [pc, #560]	@ (800b298 <_strtod_l+0x5cc>)
 800b068:	e66b      	b.n	800ad42 <_strtod_l+0x76>
 800b06a:	488e      	ldr	r0, [pc, #568]	@ (800b2a4 <_strtod_l+0x5d8>)
 800b06c:	f000 ff06 	bl	800be7c <nan>
 800b070:	0006      	movs	r6, r0
 800b072:	000f      	movs	r7, r1
 800b074:	e665      	b.n	800ad42 <_strtod_l+0x76>
 800b076:	9b07      	ldr	r3, [sp, #28]
 800b078:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b07a:	1a9b      	subs	r3, r3, r2
 800b07c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b07e:	9b08      	ldr	r3, [sp, #32]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <_strtod_l+0x3bc>
 800b084:	9b06      	ldr	r3, [sp, #24]
 800b086:	9308      	str	r3, [sp, #32]
 800b088:	9c06      	ldr	r4, [sp, #24]
 800b08a:	2c10      	cmp	r4, #16
 800b08c:	dd00      	ble.n	800b090 <_strtod_l+0x3c4>
 800b08e:	2410      	movs	r4, #16
 800b090:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b092:	f7f7 ff9f 	bl	8002fd4 <__aeabi_ui2d>
 800b096:	9b06      	ldr	r3, [sp, #24]
 800b098:	0006      	movs	r6, r0
 800b09a:	000f      	movs	r7, r1
 800b09c:	2b09      	cmp	r3, #9
 800b09e:	dc13      	bgt.n	800b0c8 <_strtod_l+0x3fc>
 800b0a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d100      	bne.n	800b0a8 <_strtod_l+0x3dc>
 800b0a6:	e64c      	b.n	800ad42 <_strtod_l+0x76>
 800b0a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	dc00      	bgt.n	800b0b0 <_strtod_l+0x3e4>
 800b0ae:	e07e      	b.n	800b1ae <_strtod_l+0x4e2>
 800b0b0:	2b16      	cmp	r3, #22
 800b0b2:	dc63      	bgt.n	800b17c <_strtod_l+0x4b0>
 800b0b4:	497c      	ldr	r1, [pc, #496]	@ (800b2a8 <_strtod_l+0x5dc>)
 800b0b6:	00db      	lsls	r3, r3, #3
 800b0b8:	18c9      	adds	r1, r1, r3
 800b0ba:	0032      	movs	r2, r6
 800b0bc:	6808      	ldr	r0, [r1, #0]
 800b0be:	6849      	ldr	r1, [r1, #4]
 800b0c0:	003b      	movs	r3, r7
 800b0c2:	f7f7 f897 	bl	80021f4 <__aeabi_dmul>
 800b0c6:	e7d3      	b.n	800b070 <_strtod_l+0x3a4>
 800b0c8:	0022      	movs	r2, r4
 800b0ca:	4b77      	ldr	r3, [pc, #476]	@ (800b2a8 <_strtod_l+0x5dc>)
 800b0cc:	3a09      	subs	r2, #9
 800b0ce:	00d2      	lsls	r2, r2, #3
 800b0d0:	189b      	adds	r3, r3, r2
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f7f7 f88d 	bl	80021f4 <__aeabi_dmul>
 800b0da:	0006      	movs	r6, r0
 800b0dc:	0028      	movs	r0, r5
 800b0de:	000f      	movs	r7, r1
 800b0e0:	f7f7 ff78 	bl	8002fd4 <__aeabi_ui2d>
 800b0e4:	000b      	movs	r3, r1
 800b0e6:	0002      	movs	r2, r0
 800b0e8:	0039      	movs	r1, r7
 800b0ea:	0030      	movs	r0, r6
 800b0ec:	f7f6 f8da 	bl	80012a4 <__aeabi_dadd>
 800b0f0:	9b06      	ldr	r3, [sp, #24]
 800b0f2:	0006      	movs	r6, r0
 800b0f4:	000f      	movs	r7, r1
 800b0f6:	2b0f      	cmp	r3, #15
 800b0f8:	ddd2      	ble.n	800b0a0 <_strtod_l+0x3d4>
 800b0fa:	9b06      	ldr	r3, [sp, #24]
 800b0fc:	1b1c      	subs	r4, r3, r4
 800b0fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b100:	18e4      	adds	r4, r4, r3
 800b102:	2c00      	cmp	r4, #0
 800b104:	dc00      	bgt.n	800b108 <_strtod_l+0x43c>
 800b106:	e09b      	b.n	800b240 <_strtod_l+0x574>
 800b108:	220f      	movs	r2, #15
 800b10a:	0023      	movs	r3, r4
 800b10c:	4013      	ands	r3, r2
 800b10e:	4214      	tst	r4, r2
 800b110:	d00a      	beq.n	800b128 <_strtod_l+0x45c>
 800b112:	4965      	ldr	r1, [pc, #404]	@ (800b2a8 <_strtod_l+0x5dc>)
 800b114:	00db      	lsls	r3, r3, #3
 800b116:	18c9      	adds	r1, r1, r3
 800b118:	0032      	movs	r2, r6
 800b11a:	6808      	ldr	r0, [r1, #0]
 800b11c:	6849      	ldr	r1, [r1, #4]
 800b11e:	003b      	movs	r3, r7
 800b120:	f7f7 f868 	bl	80021f4 <__aeabi_dmul>
 800b124:	0006      	movs	r6, r0
 800b126:	000f      	movs	r7, r1
 800b128:	230f      	movs	r3, #15
 800b12a:	439c      	bics	r4, r3
 800b12c:	d073      	beq.n	800b216 <_strtod_l+0x54a>
 800b12e:	3326      	adds	r3, #38	@ 0x26
 800b130:	33ff      	adds	r3, #255	@ 0xff
 800b132:	429c      	cmp	r4, r3
 800b134:	dd4b      	ble.n	800b1ce <_strtod_l+0x502>
 800b136:	2300      	movs	r3, #0
 800b138:	9306      	str	r3, [sp, #24]
 800b13a:	9307      	str	r3, [sp, #28]
 800b13c:	930d      	str	r3, [sp, #52]	@ 0x34
 800b13e:	9308      	str	r3, [sp, #32]
 800b140:	2322      	movs	r3, #34	@ 0x22
 800b142:	2600      	movs	r6, #0
 800b144:	9a05      	ldr	r2, [sp, #20]
 800b146:	4f54      	ldr	r7, [pc, #336]	@ (800b298 <_strtod_l+0x5cc>)
 800b148:	6013      	str	r3, [r2, #0]
 800b14a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b14c:	42b3      	cmp	r3, r6
 800b14e:	d100      	bne.n	800b152 <_strtod_l+0x486>
 800b150:	e5f7      	b.n	800ad42 <_strtod_l+0x76>
 800b152:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b154:	9805      	ldr	r0, [sp, #20]
 800b156:	f7ff f91b 	bl	800a390 <_Bfree>
 800b15a:	9908      	ldr	r1, [sp, #32]
 800b15c:	9805      	ldr	r0, [sp, #20]
 800b15e:	f7ff f917 	bl	800a390 <_Bfree>
 800b162:	9907      	ldr	r1, [sp, #28]
 800b164:	9805      	ldr	r0, [sp, #20]
 800b166:	f7ff f913 	bl	800a390 <_Bfree>
 800b16a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b16c:	9805      	ldr	r0, [sp, #20]
 800b16e:	f7ff f90f 	bl	800a390 <_Bfree>
 800b172:	9906      	ldr	r1, [sp, #24]
 800b174:	9805      	ldr	r0, [sp, #20]
 800b176:	f7ff f90b 	bl	800a390 <_Bfree>
 800b17a:	e5e2      	b.n	800ad42 <_strtod_l+0x76>
 800b17c:	2325      	movs	r3, #37	@ 0x25
 800b17e:	9a06      	ldr	r2, [sp, #24]
 800b180:	1a9b      	subs	r3, r3, r2
 800b182:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b184:	4293      	cmp	r3, r2
 800b186:	dbb8      	blt.n	800b0fa <_strtod_l+0x42e>
 800b188:	240f      	movs	r4, #15
 800b18a:	9b06      	ldr	r3, [sp, #24]
 800b18c:	4d46      	ldr	r5, [pc, #280]	@ (800b2a8 <_strtod_l+0x5dc>)
 800b18e:	1ae4      	subs	r4, r4, r3
 800b190:	00e1      	lsls	r1, r4, #3
 800b192:	1869      	adds	r1, r5, r1
 800b194:	0032      	movs	r2, r6
 800b196:	6808      	ldr	r0, [r1, #0]
 800b198:	6849      	ldr	r1, [r1, #4]
 800b19a:	003b      	movs	r3, r7
 800b19c:	f7f7 f82a 	bl	80021f4 <__aeabi_dmul>
 800b1a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1a2:	1b1c      	subs	r4, r3, r4
 800b1a4:	00e4      	lsls	r4, r4, #3
 800b1a6:	192d      	adds	r5, r5, r4
 800b1a8:	682a      	ldr	r2, [r5, #0]
 800b1aa:	686b      	ldr	r3, [r5, #4]
 800b1ac:	e789      	b.n	800b0c2 <_strtod_l+0x3f6>
 800b1ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1b0:	3316      	adds	r3, #22
 800b1b2:	dba2      	blt.n	800b0fa <_strtod_l+0x42e>
 800b1b4:	9907      	ldr	r1, [sp, #28]
 800b1b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1b8:	4b3b      	ldr	r3, [pc, #236]	@ (800b2a8 <_strtod_l+0x5dc>)
 800b1ba:	1a52      	subs	r2, r2, r1
 800b1bc:	00d2      	lsls	r2, r2, #3
 800b1be:	189b      	adds	r3, r3, r2
 800b1c0:	0030      	movs	r0, r6
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	0039      	movs	r1, r7
 800b1c8:	f7f6 fbd0 	bl	800196c <__aeabi_ddiv>
 800b1cc:	e750      	b.n	800b070 <_strtod_l+0x3a4>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	0030      	movs	r0, r6
 800b1d2:	0039      	movs	r1, r7
 800b1d4:	4d35      	ldr	r5, [pc, #212]	@ (800b2ac <_strtod_l+0x5e0>)
 800b1d6:	1124      	asrs	r4, r4, #4
 800b1d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1da:	2c01      	cmp	r4, #1
 800b1dc:	dc1e      	bgt.n	800b21c <_strtod_l+0x550>
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <_strtod_l+0x51a>
 800b1e2:	0006      	movs	r6, r0
 800b1e4:	000f      	movs	r7, r1
 800b1e6:	4b32      	ldr	r3, [pc, #200]	@ (800b2b0 <_strtod_l+0x5e4>)
 800b1e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1ea:	18ff      	adds	r7, r7, r3
 800b1ec:	4b2f      	ldr	r3, [pc, #188]	@ (800b2ac <_strtod_l+0x5e0>)
 800b1ee:	00d5      	lsls	r5, r2, #3
 800b1f0:	195d      	adds	r5, r3, r5
 800b1f2:	0032      	movs	r2, r6
 800b1f4:	6828      	ldr	r0, [r5, #0]
 800b1f6:	6869      	ldr	r1, [r5, #4]
 800b1f8:	003b      	movs	r3, r7
 800b1fa:	f7f6 fffb 	bl	80021f4 <__aeabi_dmul>
 800b1fe:	4b26      	ldr	r3, [pc, #152]	@ (800b298 <_strtod_l+0x5cc>)
 800b200:	4a2c      	ldr	r2, [pc, #176]	@ (800b2b4 <_strtod_l+0x5e8>)
 800b202:	0006      	movs	r6, r0
 800b204:	400b      	ands	r3, r1
 800b206:	4293      	cmp	r3, r2
 800b208:	d895      	bhi.n	800b136 <_strtod_l+0x46a>
 800b20a:	4a2b      	ldr	r2, [pc, #172]	@ (800b2b8 <_strtod_l+0x5ec>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d913      	bls.n	800b238 <_strtod_l+0x56c>
 800b210:	2601      	movs	r6, #1
 800b212:	4f2a      	ldr	r7, [pc, #168]	@ (800b2bc <_strtod_l+0x5f0>)
 800b214:	4276      	negs	r6, r6
 800b216:	2300      	movs	r3, #0
 800b218:	9309      	str	r3, [sp, #36]	@ 0x24
 800b21a:	e086      	b.n	800b32a <_strtod_l+0x65e>
 800b21c:	2201      	movs	r2, #1
 800b21e:	4214      	tst	r4, r2
 800b220:	d004      	beq.n	800b22c <_strtod_l+0x560>
 800b222:	682a      	ldr	r2, [r5, #0]
 800b224:	686b      	ldr	r3, [r5, #4]
 800b226:	f7f6 ffe5 	bl	80021f4 <__aeabi_dmul>
 800b22a:	2301      	movs	r3, #1
 800b22c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b22e:	1064      	asrs	r4, r4, #1
 800b230:	3201      	adds	r2, #1
 800b232:	9209      	str	r2, [sp, #36]	@ 0x24
 800b234:	3508      	adds	r5, #8
 800b236:	e7d0      	b.n	800b1da <_strtod_l+0x50e>
 800b238:	23d4      	movs	r3, #212	@ 0xd4
 800b23a:	049b      	lsls	r3, r3, #18
 800b23c:	18cf      	adds	r7, r1, r3
 800b23e:	e7ea      	b.n	800b216 <_strtod_l+0x54a>
 800b240:	2c00      	cmp	r4, #0
 800b242:	d0e8      	beq.n	800b216 <_strtod_l+0x54a>
 800b244:	4264      	negs	r4, r4
 800b246:	230f      	movs	r3, #15
 800b248:	0022      	movs	r2, r4
 800b24a:	401a      	ands	r2, r3
 800b24c:	421c      	tst	r4, r3
 800b24e:	d00a      	beq.n	800b266 <_strtod_l+0x59a>
 800b250:	4b15      	ldr	r3, [pc, #84]	@ (800b2a8 <_strtod_l+0x5dc>)
 800b252:	00d2      	lsls	r2, r2, #3
 800b254:	189b      	adds	r3, r3, r2
 800b256:	0030      	movs	r0, r6
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	0039      	movs	r1, r7
 800b25e:	f7f6 fb85 	bl	800196c <__aeabi_ddiv>
 800b262:	0006      	movs	r6, r0
 800b264:	000f      	movs	r7, r1
 800b266:	1124      	asrs	r4, r4, #4
 800b268:	d0d5      	beq.n	800b216 <_strtod_l+0x54a>
 800b26a:	2c1f      	cmp	r4, #31
 800b26c:	dd28      	ble.n	800b2c0 <_strtod_l+0x5f4>
 800b26e:	2300      	movs	r3, #0
 800b270:	9306      	str	r3, [sp, #24]
 800b272:	9307      	str	r3, [sp, #28]
 800b274:	930d      	str	r3, [sp, #52]	@ 0x34
 800b276:	9308      	str	r3, [sp, #32]
 800b278:	2322      	movs	r3, #34	@ 0x22
 800b27a:	9a05      	ldr	r2, [sp, #20]
 800b27c:	2600      	movs	r6, #0
 800b27e:	6013      	str	r3, [r2, #0]
 800b280:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b282:	2700      	movs	r7, #0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d000      	beq.n	800b28a <_strtod_l+0x5be>
 800b288:	e763      	b.n	800b152 <_strtod_l+0x486>
 800b28a:	e55a      	b.n	800ad42 <_strtod_l+0x76>
 800b28c:	00004e1f 	.word	0x00004e1f
 800b290:	0800dc99 	.word	0x0800dc99
 800b294:	0800deac 	.word	0x0800deac
 800b298:	7ff00000 	.word	0x7ff00000
 800b29c:	0800dc91 	.word	0x0800dc91
 800b2a0:	0800dcc8 	.word	0x0800dcc8
 800b2a4:	0800e055 	.word	0x0800e055
 800b2a8:	0800dde0 	.word	0x0800dde0
 800b2ac:	0800ddb8 	.word	0x0800ddb8
 800b2b0:	fcb00000 	.word	0xfcb00000
 800b2b4:	7ca00000 	.word	0x7ca00000
 800b2b8:	7c900000 	.word	0x7c900000
 800b2bc:	7fefffff 	.word	0x7fefffff
 800b2c0:	2310      	movs	r3, #16
 800b2c2:	0022      	movs	r2, r4
 800b2c4:	401a      	ands	r2, r3
 800b2c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2c8:	421c      	tst	r4, r3
 800b2ca:	d001      	beq.n	800b2d0 <_strtod_l+0x604>
 800b2cc:	335a      	adds	r3, #90	@ 0x5a
 800b2ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2d0:	0030      	movs	r0, r6
 800b2d2:	0039      	movs	r1, r7
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	4dbf      	ldr	r5, [pc, #764]	@ (800b5d4 <_strtod_l+0x908>)
 800b2d8:	2201      	movs	r2, #1
 800b2da:	4214      	tst	r4, r2
 800b2dc:	d004      	beq.n	800b2e8 <_strtod_l+0x61c>
 800b2de:	682a      	ldr	r2, [r5, #0]
 800b2e0:	686b      	ldr	r3, [r5, #4]
 800b2e2:	f7f6 ff87 	bl	80021f4 <__aeabi_dmul>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	1064      	asrs	r4, r4, #1
 800b2ea:	3508      	adds	r5, #8
 800b2ec:	2c00      	cmp	r4, #0
 800b2ee:	d1f3      	bne.n	800b2d8 <_strtod_l+0x60c>
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <_strtod_l+0x62c>
 800b2f4:	0006      	movs	r6, r0
 800b2f6:	000f      	movs	r7, r1
 800b2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00d      	beq.n	800b31a <_strtod_l+0x64e>
 800b2fe:	236b      	movs	r3, #107	@ 0x6b
 800b300:	007a      	lsls	r2, r7, #1
 800b302:	0d52      	lsrs	r2, r2, #21
 800b304:	0039      	movs	r1, r7
 800b306:	1a9b      	subs	r3, r3, r2
 800b308:	2b00      	cmp	r3, #0
 800b30a:	dd06      	ble.n	800b31a <_strtod_l+0x64e>
 800b30c:	2b1f      	cmp	r3, #31
 800b30e:	dd5a      	ble.n	800b3c6 <_strtod_l+0x6fa>
 800b310:	2600      	movs	r6, #0
 800b312:	2b34      	cmp	r3, #52	@ 0x34
 800b314:	dd50      	ble.n	800b3b8 <_strtod_l+0x6ec>
 800b316:	27dc      	movs	r7, #220	@ 0xdc
 800b318:	04bf      	lsls	r7, r7, #18
 800b31a:	2200      	movs	r2, #0
 800b31c:	2300      	movs	r3, #0
 800b31e:	0030      	movs	r0, r6
 800b320:	0039      	movs	r1, r7
 800b322:	f7f5 f893 	bl	800044c <__aeabi_dcmpeq>
 800b326:	2800      	cmp	r0, #0
 800b328:	d1a1      	bne.n	800b26e <_strtod_l+0x5a2>
 800b32a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b32c:	9a08      	ldr	r2, [sp, #32]
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b332:	9b06      	ldr	r3, [sp, #24]
 800b334:	9805      	ldr	r0, [sp, #20]
 800b336:	f7ff f893 	bl	800a460 <__s2b>
 800b33a:	900d      	str	r0, [sp, #52]	@ 0x34
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d100      	bne.n	800b342 <_strtod_l+0x676>
 800b340:	e6f9      	b.n	800b136 <_strtod_l+0x46a>
 800b342:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b344:	9907      	ldr	r1, [sp, #28]
 800b346:	17da      	asrs	r2, r3, #31
 800b348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b34a:	1a5b      	subs	r3, r3, r1
 800b34c:	401a      	ands	r2, r3
 800b34e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b350:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b352:	43db      	mvns	r3, r3
 800b354:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b356:	17db      	asrs	r3, r3, #31
 800b358:	401a      	ands	r2, r3
 800b35a:	2300      	movs	r3, #0
 800b35c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b35e:	9306      	str	r3, [sp, #24]
 800b360:	9307      	str	r3, [sp, #28]
 800b362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b364:	9805      	ldr	r0, [sp, #20]
 800b366:	6859      	ldr	r1, [r3, #4]
 800b368:	f7fe ffce 	bl	800a308 <_Balloc>
 800b36c:	9008      	str	r0, [sp, #32]
 800b36e:	2800      	cmp	r0, #0
 800b370:	d100      	bne.n	800b374 <_strtod_l+0x6a8>
 800b372:	e6e5      	b.n	800b140 <_strtod_l+0x474>
 800b374:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b376:	300c      	adds	r0, #12
 800b378:	0019      	movs	r1, r3
 800b37a:	691a      	ldr	r2, [r3, #16]
 800b37c:	310c      	adds	r1, #12
 800b37e:	3202      	adds	r2, #2
 800b380:	0092      	lsls	r2, r2, #2
 800b382:	f000 fd71 	bl	800be68 <memcpy>
 800b386:	ab20      	add	r3, sp, #128	@ 0x80
 800b388:	9301      	str	r3, [sp, #4]
 800b38a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	0032      	movs	r2, r6
 800b390:	003b      	movs	r3, r7
 800b392:	9805      	ldr	r0, [sp, #20]
 800b394:	9610      	str	r6, [sp, #64]	@ 0x40
 800b396:	9711      	str	r7, [sp, #68]	@ 0x44
 800b398:	f7ff fbb2 	bl	800ab00 <__d2b>
 800b39c:	901e      	str	r0, [sp, #120]	@ 0x78
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d100      	bne.n	800b3a4 <_strtod_l+0x6d8>
 800b3a2:	e6cd      	b.n	800b140 <_strtod_l+0x474>
 800b3a4:	2101      	movs	r1, #1
 800b3a6:	9805      	ldr	r0, [sp, #20]
 800b3a8:	f7ff f8f6 	bl	800a598 <__i2b>
 800b3ac:	9007      	str	r0, [sp, #28]
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d10e      	bne.n	800b3d0 <_strtod_l+0x704>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	9307      	str	r3, [sp, #28]
 800b3b6:	e6c3      	b.n	800b140 <_strtod_l+0x474>
 800b3b8:	234b      	movs	r3, #75	@ 0x4b
 800b3ba:	1a9a      	subs	r2, r3, r2
 800b3bc:	3b4c      	subs	r3, #76	@ 0x4c
 800b3be:	4093      	lsls	r3, r2
 800b3c0:	4019      	ands	r1, r3
 800b3c2:	000f      	movs	r7, r1
 800b3c4:	e7a9      	b.n	800b31a <_strtod_l+0x64e>
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	4252      	negs	r2, r2
 800b3ca:	409a      	lsls	r2, r3
 800b3cc:	4016      	ands	r6, r2
 800b3ce:	e7a4      	b.n	800b31a <_strtod_l+0x64e>
 800b3d0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b3d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b3d4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800b3d6:	1ad4      	subs	r4, r2, r3
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	db01      	blt.n	800b3e0 <_strtod_l+0x714>
 800b3dc:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800b3de:	195d      	adds	r5, r3, r5
 800b3e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b3e4:	1a5b      	subs	r3, r3, r1
 800b3e6:	2136      	movs	r1, #54	@ 0x36
 800b3e8:	189b      	adds	r3, r3, r2
 800b3ea:	1a8a      	subs	r2, r1, r2
 800b3ec:	497a      	ldr	r1, [pc, #488]	@ (800b5d8 <_strtod_l+0x90c>)
 800b3ee:	2001      	movs	r0, #1
 800b3f0:	468c      	mov	ip, r1
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	9116      	str	r1, [sp, #88]	@ 0x58
 800b3f8:	9014      	str	r0, [sp, #80]	@ 0x50
 800b3fa:	4563      	cmp	r3, ip
 800b3fc:	da06      	bge.n	800b40c <_strtod_l+0x740>
 800b3fe:	4661      	mov	r1, ip
 800b400:	1ac9      	subs	r1, r1, r3
 800b402:	1a52      	subs	r2, r2, r1
 800b404:	291f      	cmp	r1, #31
 800b406:	dc3f      	bgt.n	800b488 <_strtod_l+0x7bc>
 800b408:	4088      	lsls	r0, r1
 800b40a:	9014      	str	r0, [sp, #80]	@ 0x50
 800b40c:	18ab      	adds	r3, r5, r2
 800b40e:	930e      	str	r3, [sp, #56]	@ 0x38
 800b410:	18a4      	adds	r4, r4, r2
 800b412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b414:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b416:	191c      	adds	r4, r3, r4
 800b418:	002b      	movs	r3, r5
 800b41a:	4295      	cmp	r5, r2
 800b41c:	dd00      	ble.n	800b420 <_strtod_l+0x754>
 800b41e:	0013      	movs	r3, r2
 800b420:	42a3      	cmp	r3, r4
 800b422:	dd00      	ble.n	800b426 <_strtod_l+0x75a>
 800b424:	0023      	movs	r3, r4
 800b426:	2b00      	cmp	r3, #0
 800b428:	dd04      	ble.n	800b434 <_strtod_l+0x768>
 800b42a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b42c:	1ae4      	subs	r4, r4, r3
 800b42e:	1ad2      	subs	r2, r2, r3
 800b430:	920e      	str	r2, [sp, #56]	@ 0x38
 800b432:	1aed      	subs	r5, r5, r3
 800b434:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b436:	2b00      	cmp	r3, #0
 800b438:	dd16      	ble.n	800b468 <_strtod_l+0x79c>
 800b43a:	001a      	movs	r2, r3
 800b43c:	9907      	ldr	r1, [sp, #28]
 800b43e:	9805      	ldr	r0, [sp, #20]
 800b440:	f7ff f974 	bl	800a72c <__pow5mult>
 800b444:	9007      	str	r0, [sp, #28]
 800b446:	2800      	cmp	r0, #0
 800b448:	d0b3      	beq.n	800b3b2 <_strtod_l+0x6e6>
 800b44a:	0001      	movs	r1, r0
 800b44c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800b44e:	9805      	ldr	r0, [sp, #20]
 800b450:	f7ff f8ba 	bl	800a5c8 <__multiply>
 800b454:	9013      	str	r0, [sp, #76]	@ 0x4c
 800b456:	2800      	cmp	r0, #0
 800b458:	d100      	bne.n	800b45c <_strtod_l+0x790>
 800b45a:	e671      	b.n	800b140 <_strtod_l+0x474>
 800b45c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b45e:	9805      	ldr	r0, [sp, #20]
 800b460:	f7fe ff96 	bl	800a390 <_Bfree>
 800b464:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b466:	931e      	str	r3, [sp, #120]	@ 0x78
 800b468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	dc12      	bgt.n	800b494 <_strtod_l+0x7c8>
 800b46e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b470:	2b00      	cmp	r3, #0
 800b472:	dd18      	ble.n	800b4a6 <_strtod_l+0x7da>
 800b474:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b476:	9908      	ldr	r1, [sp, #32]
 800b478:	9805      	ldr	r0, [sp, #20]
 800b47a:	f7ff f957 	bl	800a72c <__pow5mult>
 800b47e:	9008      	str	r0, [sp, #32]
 800b480:	2800      	cmp	r0, #0
 800b482:	d110      	bne.n	800b4a6 <_strtod_l+0x7da>
 800b484:	2300      	movs	r3, #0
 800b486:	e65a      	b.n	800b13e <_strtod_l+0x472>
 800b488:	4954      	ldr	r1, [pc, #336]	@ (800b5dc <_strtod_l+0x910>)
 800b48a:	1acb      	subs	r3, r1, r3
 800b48c:	0001      	movs	r1, r0
 800b48e:	4099      	lsls	r1, r3
 800b490:	9116      	str	r1, [sp, #88]	@ 0x58
 800b492:	e7ba      	b.n	800b40a <_strtod_l+0x73e>
 800b494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b496:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b498:	9805      	ldr	r0, [sp, #20]
 800b49a:	f7ff f9a3 	bl	800a7e4 <__lshift>
 800b49e:	901e      	str	r0, [sp, #120]	@ 0x78
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d1e4      	bne.n	800b46e <_strtod_l+0x7a2>
 800b4a4:	e64c      	b.n	800b140 <_strtod_l+0x474>
 800b4a6:	2c00      	cmp	r4, #0
 800b4a8:	dd07      	ble.n	800b4ba <_strtod_l+0x7ee>
 800b4aa:	0022      	movs	r2, r4
 800b4ac:	9908      	ldr	r1, [sp, #32]
 800b4ae:	9805      	ldr	r0, [sp, #20]
 800b4b0:	f7ff f998 	bl	800a7e4 <__lshift>
 800b4b4:	9008      	str	r0, [sp, #32]
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d0e4      	beq.n	800b484 <_strtod_l+0x7b8>
 800b4ba:	2d00      	cmp	r5, #0
 800b4bc:	dd08      	ble.n	800b4d0 <_strtod_l+0x804>
 800b4be:	002a      	movs	r2, r5
 800b4c0:	9907      	ldr	r1, [sp, #28]
 800b4c2:	9805      	ldr	r0, [sp, #20]
 800b4c4:	f7ff f98e 	bl	800a7e4 <__lshift>
 800b4c8:	9007      	str	r0, [sp, #28]
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d100      	bne.n	800b4d0 <_strtod_l+0x804>
 800b4ce:	e637      	b.n	800b140 <_strtod_l+0x474>
 800b4d0:	9a08      	ldr	r2, [sp, #32]
 800b4d2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b4d4:	9805      	ldr	r0, [sp, #20]
 800b4d6:	f7ff fa0d 	bl	800a8f4 <__mdiff>
 800b4da:	9006      	str	r0, [sp, #24]
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d100      	bne.n	800b4e2 <_strtod_l+0x816>
 800b4e0:	e62e      	b.n	800b140 <_strtod_l+0x474>
 800b4e2:	68c3      	ldr	r3, [r0, #12]
 800b4e4:	9907      	ldr	r1, [sp, #28]
 800b4e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	60c3      	str	r3, [r0, #12]
 800b4ec:	f7ff f9e6 	bl	800a8bc <__mcmp>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	da3b      	bge.n	800b56c <_strtod_l+0x8a0>
 800b4f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4f6:	4333      	orrs	r3, r6
 800b4f8:	d167      	bne.n	800b5ca <_strtod_l+0x8fe>
 800b4fa:	033b      	lsls	r3, r7, #12
 800b4fc:	d165      	bne.n	800b5ca <_strtod_l+0x8fe>
 800b4fe:	22d6      	movs	r2, #214	@ 0xd6
 800b500:	4b37      	ldr	r3, [pc, #220]	@ (800b5e0 <_strtod_l+0x914>)
 800b502:	04d2      	lsls	r2, r2, #19
 800b504:	403b      	ands	r3, r7
 800b506:	4293      	cmp	r3, r2
 800b508:	d95f      	bls.n	800b5ca <_strtod_l+0x8fe>
 800b50a:	9b06      	ldr	r3, [sp, #24]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d103      	bne.n	800b51a <_strtod_l+0x84e>
 800b512:	9b06      	ldr	r3, [sp, #24]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b01      	cmp	r3, #1
 800b518:	dd57      	ble.n	800b5ca <_strtod_l+0x8fe>
 800b51a:	9906      	ldr	r1, [sp, #24]
 800b51c:	2201      	movs	r2, #1
 800b51e:	9805      	ldr	r0, [sp, #20]
 800b520:	f7ff f960 	bl	800a7e4 <__lshift>
 800b524:	9907      	ldr	r1, [sp, #28]
 800b526:	9006      	str	r0, [sp, #24]
 800b528:	f7ff f9c8 	bl	800a8bc <__mcmp>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	dd4c      	ble.n	800b5ca <_strtod_l+0x8fe>
 800b530:	4b2b      	ldr	r3, [pc, #172]	@ (800b5e0 <_strtod_l+0x914>)
 800b532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b534:	403b      	ands	r3, r7
 800b536:	2a00      	cmp	r2, #0
 800b538:	d074      	beq.n	800b624 <_strtod_l+0x958>
 800b53a:	22d6      	movs	r2, #214	@ 0xd6
 800b53c:	04d2      	lsls	r2, r2, #19
 800b53e:	4293      	cmp	r3, r2
 800b540:	d870      	bhi.n	800b624 <_strtod_l+0x958>
 800b542:	22dc      	movs	r2, #220	@ 0xdc
 800b544:	0492      	lsls	r2, r2, #18
 800b546:	4293      	cmp	r3, r2
 800b548:	d800      	bhi.n	800b54c <_strtod_l+0x880>
 800b54a:	e695      	b.n	800b278 <_strtod_l+0x5ac>
 800b54c:	0030      	movs	r0, r6
 800b54e:	0039      	movs	r1, r7
 800b550:	4b24      	ldr	r3, [pc, #144]	@ (800b5e4 <_strtod_l+0x918>)
 800b552:	2200      	movs	r2, #0
 800b554:	f7f6 fe4e 	bl	80021f4 <__aeabi_dmul>
 800b558:	4b21      	ldr	r3, [pc, #132]	@ (800b5e0 <_strtod_l+0x914>)
 800b55a:	0006      	movs	r6, r0
 800b55c:	000f      	movs	r7, r1
 800b55e:	420b      	tst	r3, r1
 800b560:	d000      	beq.n	800b564 <_strtod_l+0x898>
 800b562:	e5f6      	b.n	800b152 <_strtod_l+0x486>
 800b564:	2322      	movs	r3, #34	@ 0x22
 800b566:	9a05      	ldr	r2, [sp, #20]
 800b568:	6013      	str	r3, [r2, #0]
 800b56a:	e5f2      	b.n	800b152 <_strtod_l+0x486>
 800b56c:	970e      	str	r7, [sp, #56]	@ 0x38
 800b56e:	2800      	cmp	r0, #0
 800b570:	d175      	bne.n	800b65e <_strtod_l+0x992>
 800b572:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b574:	033b      	lsls	r3, r7, #12
 800b576:	0b1b      	lsrs	r3, r3, #12
 800b578:	2a00      	cmp	r2, #0
 800b57a:	d039      	beq.n	800b5f0 <_strtod_l+0x924>
 800b57c:	4a1a      	ldr	r2, [pc, #104]	@ (800b5e8 <_strtod_l+0x91c>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d138      	bne.n	800b5f4 <_strtod_l+0x928>
 800b582:	2101      	movs	r1, #1
 800b584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b586:	4249      	negs	r1, r1
 800b588:	0032      	movs	r2, r6
 800b58a:	0008      	movs	r0, r1
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00b      	beq.n	800b5a8 <_strtod_l+0x8dc>
 800b590:	24d4      	movs	r4, #212	@ 0xd4
 800b592:	4b13      	ldr	r3, [pc, #76]	@ (800b5e0 <_strtod_l+0x914>)
 800b594:	0008      	movs	r0, r1
 800b596:	403b      	ands	r3, r7
 800b598:	04e4      	lsls	r4, r4, #19
 800b59a:	42a3      	cmp	r3, r4
 800b59c:	d804      	bhi.n	800b5a8 <_strtod_l+0x8dc>
 800b59e:	306c      	adds	r0, #108	@ 0x6c
 800b5a0:	0d1b      	lsrs	r3, r3, #20
 800b5a2:	1ac3      	subs	r3, r0, r3
 800b5a4:	4099      	lsls	r1, r3
 800b5a6:	0008      	movs	r0, r1
 800b5a8:	4282      	cmp	r2, r0
 800b5aa:	d123      	bne.n	800b5f4 <_strtod_l+0x928>
 800b5ac:	4b0f      	ldr	r3, [pc, #60]	@ (800b5ec <_strtod_l+0x920>)
 800b5ae:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b5b0:	4299      	cmp	r1, r3
 800b5b2:	d102      	bne.n	800b5ba <_strtod_l+0x8ee>
 800b5b4:	3201      	adds	r2, #1
 800b5b6:	d100      	bne.n	800b5ba <_strtod_l+0x8ee>
 800b5b8:	e5c2      	b.n	800b140 <_strtod_l+0x474>
 800b5ba:	4b09      	ldr	r3, [pc, #36]	@ (800b5e0 <_strtod_l+0x914>)
 800b5bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5be:	2600      	movs	r6, #0
 800b5c0:	401a      	ands	r2, r3
 800b5c2:	0013      	movs	r3, r2
 800b5c4:	2280      	movs	r2, #128	@ 0x80
 800b5c6:	0352      	lsls	r2, r2, #13
 800b5c8:	189f      	adds	r7, r3, r2
 800b5ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1bd      	bne.n	800b54c <_strtod_l+0x880>
 800b5d0:	e5bf      	b.n	800b152 <_strtod_l+0x486>
 800b5d2:	46c0      	nop			@ (mov r8, r8)
 800b5d4:	0800ded8 	.word	0x0800ded8
 800b5d8:	fffffc02 	.word	0xfffffc02
 800b5dc:	fffffbe2 	.word	0xfffffbe2
 800b5e0:	7ff00000 	.word	0x7ff00000
 800b5e4:	39500000 	.word	0x39500000
 800b5e8:	000fffff 	.word	0x000fffff
 800b5ec:	7fefffff 	.word	0x7fefffff
 800b5f0:	4333      	orrs	r3, r6
 800b5f2:	d09d      	beq.n	800b530 <_strtod_l+0x864>
 800b5f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d01c      	beq.n	800b634 <_strtod_l+0x968>
 800b5fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5fc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b5fe:	4213      	tst	r3, r2
 800b600:	d0e3      	beq.n	800b5ca <_strtod_l+0x8fe>
 800b602:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b604:	0030      	movs	r0, r6
 800b606:	0039      	movs	r1, r7
 800b608:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d016      	beq.n	800b63c <_strtod_l+0x970>
 800b60e:	f7ff fb45 	bl	800ac9c <sulp>
 800b612:	0002      	movs	r2, r0
 800b614:	000b      	movs	r3, r1
 800b616:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b618:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b61a:	f7f5 fe43 	bl	80012a4 <__aeabi_dadd>
 800b61e:	0006      	movs	r6, r0
 800b620:	000f      	movs	r7, r1
 800b622:	e7d2      	b.n	800b5ca <_strtod_l+0x8fe>
 800b624:	2601      	movs	r6, #1
 800b626:	4a92      	ldr	r2, [pc, #584]	@ (800b870 <_strtod_l+0xba4>)
 800b628:	4276      	negs	r6, r6
 800b62a:	189b      	adds	r3, r3, r2
 800b62c:	4a91      	ldr	r2, [pc, #580]	@ (800b874 <_strtod_l+0xba8>)
 800b62e:	431a      	orrs	r2, r3
 800b630:	0017      	movs	r7, r2
 800b632:	e7ca      	b.n	800b5ca <_strtod_l+0x8fe>
 800b634:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b636:	4233      	tst	r3, r6
 800b638:	d0c7      	beq.n	800b5ca <_strtod_l+0x8fe>
 800b63a:	e7e2      	b.n	800b602 <_strtod_l+0x936>
 800b63c:	f7ff fb2e 	bl	800ac9c <sulp>
 800b640:	0002      	movs	r2, r0
 800b642:	000b      	movs	r3, r1
 800b644:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b646:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b648:	f7f7 f89c 	bl	8002784 <__aeabi_dsub>
 800b64c:	2200      	movs	r2, #0
 800b64e:	2300      	movs	r3, #0
 800b650:	0006      	movs	r6, r0
 800b652:	000f      	movs	r7, r1
 800b654:	f7f4 fefa 	bl	800044c <__aeabi_dcmpeq>
 800b658:	2800      	cmp	r0, #0
 800b65a:	d0b6      	beq.n	800b5ca <_strtod_l+0x8fe>
 800b65c:	e60c      	b.n	800b278 <_strtod_l+0x5ac>
 800b65e:	9907      	ldr	r1, [sp, #28]
 800b660:	9806      	ldr	r0, [sp, #24]
 800b662:	f7ff faad 	bl	800abc0 <__ratio>
 800b666:	2380      	movs	r3, #128	@ 0x80
 800b668:	2200      	movs	r2, #0
 800b66a:	05db      	lsls	r3, r3, #23
 800b66c:	0004      	movs	r4, r0
 800b66e:	000d      	movs	r5, r1
 800b670:	f7f4 fefc 	bl	800046c <__aeabi_dcmple>
 800b674:	2800      	cmp	r0, #0
 800b676:	d06c      	beq.n	800b752 <_strtod_l+0xa86>
 800b678:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d177      	bne.n	800b76e <_strtod_l+0xaa2>
 800b67e:	2e00      	cmp	r6, #0
 800b680:	d157      	bne.n	800b732 <_strtod_l+0xa66>
 800b682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b684:	031b      	lsls	r3, r3, #12
 800b686:	d15a      	bne.n	800b73e <_strtod_l+0xa72>
 800b688:	2200      	movs	r2, #0
 800b68a:	0020      	movs	r0, r4
 800b68c:	0029      	movs	r1, r5
 800b68e:	4b7a      	ldr	r3, [pc, #488]	@ (800b878 <_strtod_l+0xbac>)
 800b690:	f7f4 fee2 	bl	8000458 <__aeabi_dcmplt>
 800b694:	2800      	cmp	r0, #0
 800b696:	d159      	bne.n	800b74c <_strtod_l+0xa80>
 800b698:	0020      	movs	r0, r4
 800b69a:	0029      	movs	r1, r5
 800b69c:	2200      	movs	r2, #0
 800b69e:	4b77      	ldr	r3, [pc, #476]	@ (800b87c <_strtod_l+0xbb0>)
 800b6a0:	f7f6 fda8 	bl	80021f4 <__aeabi_dmul>
 800b6a4:	0004      	movs	r4, r0
 800b6a6:	000d      	movs	r5, r1
 800b6a8:	2380      	movs	r3, #128	@ 0x80
 800b6aa:	061b      	lsls	r3, r3, #24
 800b6ac:	18eb      	adds	r3, r5, r3
 800b6ae:	940a      	str	r4, [sp, #40]	@ 0x28
 800b6b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6b6:	9214      	str	r2, [sp, #80]	@ 0x50
 800b6b8:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6ba:	4a71      	ldr	r2, [pc, #452]	@ (800b880 <_strtod_l+0xbb4>)
 800b6bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6be:	4013      	ands	r3, r2
 800b6c0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b6c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b6c4:	4b6f      	ldr	r3, [pc, #444]	@ (800b884 <_strtod_l+0xbb8>)
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d000      	beq.n	800b6cc <_strtod_l+0xa00>
 800b6ca:	e087      	b.n	800b7dc <_strtod_l+0xb10>
 800b6cc:	4a6e      	ldr	r2, [pc, #440]	@ (800b888 <_strtod_l+0xbbc>)
 800b6ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6d0:	4694      	mov	ip, r2
 800b6d2:	4463      	add	r3, ip
 800b6d4:	001f      	movs	r7, r3
 800b6d6:	0030      	movs	r0, r6
 800b6d8:	0019      	movs	r1, r3
 800b6da:	f7ff f9a5 	bl	800aa28 <__ulp>
 800b6de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6e2:	f7f6 fd87 	bl	80021f4 <__aeabi_dmul>
 800b6e6:	0032      	movs	r2, r6
 800b6e8:	003b      	movs	r3, r7
 800b6ea:	f7f5 fddb 	bl	80012a4 <__aeabi_dadd>
 800b6ee:	4a64      	ldr	r2, [pc, #400]	@ (800b880 <_strtod_l+0xbb4>)
 800b6f0:	4b66      	ldr	r3, [pc, #408]	@ (800b88c <_strtod_l+0xbc0>)
 800b6f2:	0006      	movs	r6, r0
 800b6f4:	400a      	ands	r2, r1
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d940      	bls.n	800b77c <_strtod_l+0xab0>
 800b6fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6fc:	4a64      	ldr	r2, [pc, #400]	@ (800b890 <_strtod_l+0xbc4>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d103      	bne.n	800b70a <_strtod_l+0xa3e>
 800b702:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b704:	3301      	adds	r3, #1
 800b706:	d100      	bne.n	800b70a <_strtod_l+0xa3e>
 800b708:	e51a      	b.n	800b140 <_strtod_l+0x474>
 800b70a:	2601      	movs	r6, #1
 800b70c:	4f60      	ldr	r7, [pc, #384]	@ (800b890 <_strtod_l+0xbc4>)
 800b70e:	4276      	negs	r6, r6
 800b710:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b712:	9805      	ldr	r0, [sp, #20]
 800b714:	f7fe fe3c 	bl	800a390 <_Bfree>
 800b718:	9908      	ldr	r1, [sp, #32]
 800b71a:	9805      	ldr	r0, [sp, #20]
 800b71c:	f7fe fe38 	bl	800a390 <_Bfree>
 800b720:	9907      	ldr	r1, [sp, #28]
 800b722:	9805      	ldr	r0, [sp, #20]
 800b724:	f7fe fe34 	bl	800a390 <_Bfree>
 800b728:	9906      	ldr	r1, [sp, #24]
 800b72a:	9805      	ldr	r0, [sp, #20]
 800b72c:	f7fe fe30 	bl	800a390 <_Bfree>
 800b730:	e617      	b.n	800b362 <_strtod_l+0x696>
 800b732:	2e01      	cmp	r6, #1
 800b734:	d103      	bne.n	800b73e <_strtod_l+0xa72>
 800b736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d100      	bne.n	800b73e <_strtod_l+0xa72>
 800b73c:	e59c      	b.n	800b278 <_strtod_l+0x5ac>
 800b73e:	2300      	movs	r3, #0
 800b740:	4c54      	ldr	r4, [pc, #336]	@ (800b894 <_strtod_l+0xbc8>)
 800b742:	4d4d      	ldr	r5, [pc, #308]	@ (800b878 <_strtod_l+0xbac>)
 800b744:	930a      	str	r3, [sp, #40]	@ 0x28
 800b746:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b748:	2400      	movs	r4, #0
 800b74a:	e7b2      	b.n	800b6b2 <_strtod_l+0x9e6>
 800b74c:	2400      	movs	r4, #0
 800b74e:	4d4b      	ldr	r5, [pc, #300]	@ (800b87c <_strtod_l+0xbb0>)
 800b750:	e7aa      	b.n	800b6a8 <_strtod_l+0x9dc>
 800b752:	0020      	movs	r0, r4
 800b754:	0029      	movs	r1, r5
 800b756:	4b49      	ldr	r3, [pc, #292]	@ (800b87c <_strtod_l+0xbb0>)
 800b758:	2200      	movs	r2, #0
 800b75a:	f7f6 fd4b 	bl	80021f4 <__aeabi_dmul>
 800b75e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b760:	0004      	movs	r4, r0
 800b762:	000d      	movs	r5, r1
 800b764:	2b00      	cmp	r3, #0
 800b766:	d09f      	beq.n	800b6a8 <_strtod_l+0x9dc>
 800b768:	940a      	str	r4, [sp, #40]	@ 0x28
 800b76a:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b76c:	e7a1      	b.n	800b6b2 <_strtod_l+0x9e6>
 800b76e:	2300      	movs	r3, #0
 800b770:	4c41      	ldr	r4, [pc, #260]	@ (800b878 <_strtod_l+0xbac>)
 800b772:	0025      	movs	r5, r4
 800b774:	930a      	str	r3, [sp, #40]	@ 0x28
 800b776:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b778:	001c      	movs	r4, r3
 800b77a:	e79a      	b.n	800b6b2 <_strtod_l+0x9e6>
 800b77c:	23d4      	movs	r3, #212	@ 0xd4
 800b77e:	049b      	lsls	r3, r3, #18
 800b780:	18cf      	adds	r7, r1, r3
 800b782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b784:	9710      	str	r7, [sp, #64]	@ 0x40
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1c2      	bne.n	800b710 <_strtod_l+0xa44>
 800b78a:	4b3d      	ldr	r3, [pc, #244]	@ (800b880 <_strtod_l+0xbb4>)
 800b78c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b78e:	403b      	ands	r3, r7
 800b790:	429a      	cmp	r2, r3
 800b792:	d1bd      	bne.n	800b710 <_strtod_l+0xa44>
 800b794:	0020      	movs	r0, r4
 800b796:	0029      	movs	r1, r5
 800b798:	f7f4 ff2c 	bl	80005f4 <__aeabi_d2lz>
 800b79c:	f7f4 ff64 	bl	8000668 <__aeabi_l2d>
 800b7a0:	0002      	movs	r2, r0
 800b7a2:	000b      	movs	r3, r1
 800b7a4:	0020      	movs	r0, r4
 800b7a6:	0029      	movs	r1, r5
 800b7a8:	f7f6 ffec 	bl	8002784 <__aeabi_dsub>
 800b7ac:	033c      	lsls	r4, r7, #12
 800b7ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b7b0:	0b24      	lsrs	r4, r4, #12
 800b7b2:	4334      	orrs	r4, r6
 800b7b4:	900e      	str	r0, [sp, #56]	@ 0x38
 800b7b6:	910f      	str	r1, [sp, #60]	@ 0x3c
 800b7b8:	4a37      	ldr	r2, [pc, #220]	@ (800b898 <_strtod_l+0xbcc>)
 800b7ba:	431c      	orrs	r4, r3
 800b7bc:	d052      	beq.n	800b864 <_strtod_l+0xb98>
 800b7be:	4b37      	ldr	r3, [pc, #220]	@ (800b89c <_strtod_l+0xbd0>)
 800b7c0:	f7f4 fe4a 	bl	8000458 <__aeabi_dcmplt>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d000      	beq.n	800b7ca <_strtod_l+0xafe>
 800b7c8:	e4c3      	b.n	800b152 <_strtod_l+0x486>
 800b7ca:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b7cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b7ce:	4a34      	ldr	r2, [pc, #208]	@ (800b8a0 <_strtod_l+0xbd4>)
 800b7d0:	4b2a      	ldr	r3, [pc, #168]	@ (800b87c <_strtod_l+0xbb0>)
 800b7d2:	f7f4 fe55 	bl	8000480 <__aeabi_dcmpgt>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d09a      	beq.n	800b710 <_strtod_l+0xa44>
 800b7da:	e4ba      	b.n	800b152 <_strtod_l+0x486>
 800b7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d02a      	beq.n	800b838 <_strtod_l+0xb6c>
 800b7e2:	23d4      	movs	r3, #212	@ 0xd4
 800b7e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b7e6:	04db      	lsls	r3, r3, #19
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d825      	bhi.n	800b838 <_strtod_l+0xb6c>
 800b7ec:	0020      	movs	r0, r4
 800b7ee:	0029      	movs	r1, r5
 800b7f0:	4a2c      	ldr	r2, [pc, #176]	@ (800b8a4 <_strtod_l+0xbd8>)
 800b7f2:	4b2d      	ldr	r3, [pc, #180]	@ (800b8a8 <_strtod_l+0xbdc>)
 800b7f4:	f7f4 fe3a 	bl	800046c <__aeabi_dcmple>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d016      	beq.n	800b82a <_strtod_l+0xb5e>
 800b7fc:	0020      	movs	r0, r4
 800b7fe:	0029      	movs	r1, r5
 800b800:	f7f4 feda 	bl	80005b8 <__aeabi_d2uiz>
 800b804:	2800      	cmp	r0, #0
 800b806:	d100      	bne.n	800b80a <_strtod_l+0xb3e>
 800b808:	3001      	adds	r0, #1
 800b80a:	f7f7 fbe3 	bl	8002fd4 <__aeabi_ui2d>
 800b80e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b810:	0004      	movs	r4, r0
 800b812:	000d      	movs	r5, r1
 800b814:	2b00      	cmp	r3, #0
 800b816:	d122      	bne.n	800b85e <_strtod_l+0xb92>
 800b818:	2380      	movs	r3, #128	@ 0x80
 800b81a:	061b      	lsls	r3, r3, #24
 800b81c:	18cb      	adds	r3, r1, r3
 800b81e:	9018      	str	r0, [sp, #96]	@ 0x60
 800b820:	9319      	str	r3, [sp, #100]	@ 0x64
 800b822:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b826:	9214      	str	r2, [sp, #80]	@ 0x50
 800b828:	9315      	str	r3, [sp, #84]	@ 0x54
 800b82a:	22d6      	movs	r2, #214	@ 0xd6
 800b82c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b82e:	04d2      	lsls	r2, r2, #19
 800b830:	189b      	adds	r3, r3, r2
 800b832:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b834:	1a9b      	subs	r3, r3, r2
 800b836:	9315      	str	r3, [sp, #84]	@ 0x54
 800b838:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b83a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b83c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b83e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800b840:	f7ff f8f2 	bl	800aa28 <__ulp>
 800b844:	0002      	movs	r2, r0
 800b846:	000b      	movs	r3, r1
 800b848:	0030      	movs	r0, r6
 800b84a:	0039      	movs	r1, r7
 800b84c:	f7f6 fcd2 	bl	80021f4 <__aeabi_dmul>
 800b850:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b852:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b854:	f7f5 fd26 	bl	80012a4 <__aeabi_dadd>
 800b858:	0006      	movs	r6, r0
 800b85a:	000f      	movs	r7, r1
 800b85c:	e791      	b.n	800b782 <_strtod_l+0xab6>
 800b85e:	9418      	str	r4, [sp, #96]	@ 0x60
 800b860:	9519      	str	r5, [sp, #100]	@ 0x64
 800b862:	e7de      	b.n	800b822 <_strtod_l+0xb56>
 800b864:	4b11      	ldr	r3, [pc, #68]	@ (800b8ac <_strtod_l+0xbe0>)
 800b866:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b868:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b86a:	f7f4 fdf5 	bl	8000458 <__aeabi_dcmplt>
 800b86e:	e7b2      	b.n	800b7d6 <_strtod_l+0xb0a>
 800b870:	fff00000 	.word	0xfff00000
 800b874:	000fffff 	.word	0x000fffff
 800b878:	3ff00000 	.word	0x3ff00000
 800b87c:	3fe00000 	.word	0x3fe00000
 800b880:	7ff00000 	.word	0x7ff00000
 800b884:	7fe00000 	.word	0x7fe00000
 800b888:	fcb00000 	.word	0xfcb00000
 800b88c:	7c9fffff 	.word	0x7c9fffff
 800b890:	7fefffff 	.word	0x7fefffff
 800b894:	bff00000 	.word	0xbff00000
 800b898:	94a03595 	.word	0x94a03595
 800b89c:	3fdfffff 	.word	0x3fdfffff
 800b8a0:	35afe535 	.word	0x35afe535
 800b8a4:	ffc00000 	.word	0xffc00000
 800b8a8:	41dfffff 	.word	0x41dfffff
 800b8ac:	3fcfffff 	.word	0x3fcfffff

0800b8b0 <_strtod_r>:
 800b8b0:	b510      	push	{r4, lr}
 800b8b2:	4b02      	ldr	r3, [pc, #8]	@ (800b8bc <_strtod_r+0xc>)
 800b8b4:	f7ff fa0a 	bl	800accc <_strtod_l>
 800b8b8:	bd10      	pop	{r4, pc}
 800b8ba:	46c0      	nop			@ (mov r8, r8)
 800b8bc:	20000080 	.word	0x20000080

0800b8c0 <_strtol_l.constprop.0>:
 800b8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	0017      	movs	r7, r2
 800b8c6:	001e      	movs	r6, r3
 800b8c8:	9003      	str	r0, [sp, #12]
 800b8ca:	9101      	str	r1, [sp, #4]
 800b8cc:	2b24      	cmp	r3, #36	@ 0x24
 800b8ce:	d844      	bhi.n	800b95a <_strtol_l.constprop.0+0x9a>
 800b8d0:	000c      	movs	r4, r1
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d041      	beq.n	800b95a <_strtol_l.constprop.0+0x9a>
 800b8d6:	4b3d      	ldr	r3, [pc, #244]	@ (800b9cc <_strtol_l.constprop.0+0x10c>)
 800b8d8:	2208      	movs	r2, #8
 800b8da:	469c      	mov	ip, r3
 800b8dc:	0023      	movs	r3, r4
 800b8de:	4661      	mov	r1, ip
 800b8e0:	781d      	ldrb	r5, [r3, #0]
 800b8e2:	3401      	adds	r4, #1
 800b8e4:	5d48      	ldrb	r0, [r1, r5]
 800b8e6:	0001      	movs	r1, r0
 800b8e8:	4011      	ands	r1, r2
 800b8ea:	4210      	tst	r0, r2
 800b8ec:	d1f6      	bne.n	800b8dc <_strtol_l.constprop.0+0x1c>
 800b8ee:	2d2d      	cmp	r5, #45	@ 0x2d
 800b8f0:	d13a      	bne.n	800b968 <_strtol_l.constprop.0+0xa8>
 800b8f2:	7825      	ldrb	r5, [r4, #0]
 800b8f4:	1c9c      	adds	r4, r3, #2
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	2210      	movs	r2, #16
 800b8fc:	0033      	movs	r3, r6
 800b8fe:	4393      	bics	r3, r2
 800b900:	d109      	bne.n	800b916 <_strtol_l.constprop.0+0x56>
 800b902:	2d30      	cmp	r5, #48	@ 0x30
 800b904:	d136      	bne.n	800b974 <_strtol_l.constprop.0+0xb4>
 800b906:	2120      	movs	r1, #32
 800b908:	7823      	ldrb	r3, [r4, #0]
 800b90a:	438b      	bics	r3, r1
 800b90c:	2b58      	cmp	r3, #88	@ 0x58
 800b90e:	d131      	bne.n	800b974 <_strtol_l.constprop.0+0xb4>
 800b910:	0016      	movs	r6, r2
 800b912:	7865      	ldrb	r5, [r4, #1]
 800b914:	3402      	adds	r4, #2
 800b916:	4a2e      	ldr	r2, [pc, #184]	@ (800b9d0 <_strtol_l.constprop.0+0x110>)
 800b918:	9b00      	ldr	r3, [sp, #0]
 800b91a:	4694      	mov	ip, r2
 800b91c:	4463      	add	r3, ip
 800b91e:	0031      	movs	r1, r6
 800b920:	0018      	movs	r0, r3
 800b922:	9302      	str	r3, [sp, #8]
 800b924:	f7f4 fc92 	bl	800024c <__aeabi_uidivmod>
 800b928:	2200      	movs	r2, #0
 800b92a:	4684      	mov	ip, r0
 800b92c:	0010      	movs	r0, r2
 800b92e:	002b      	movs	r3, r5
 800b930:	3b30      	subs	r3, #48	@ 0x30
 800b932:	2b09      	cmp	r3, #9
 800b934:	d825      	bhi.n	800b982 <_strtol_l.constprop.0+0xc2>
 800b936:	001d      	movs	r5, r3
 800b938:	42ae      	cmp	r6, r5
 800b93a:	dd31      	ble.n	800b9a0 <_strtol_l.constprop.0+0xe0>
 800b93c:	1c53      	adds	r3, r2, #1
 800b93e:	d009      	beq.n	800b954 <_strtol_l.constprop.0+0x94>
 800b940:	2201      	movs	r2, #1
 800b942:	4252      	negs	r2, r2
 800b944:	4584      	cmp	ip, r0
 800b946:	d305      	bcc.n	800b954 <_strtol_l.constprop.0+0x94>
 800b948:	d101      	bne.n	800b94e <_strtol_l.constprop.0+0x8e>
 800b94a:	42a9      	cmp	r1, r5
 800b94c:	db25      	blt.n	800b99a <_strtol_l.constprop.0+0xda>
 800b94e:	2201      	movs	r2, #1
 800b950:	4370      	muls	r0, r6
 800b952:	1828      	adds	r0, r5, r0
 800b954:	7825      	ldrb	r5, [r4, #0]
 800b956:	3401      	adds	r4, #1
 800b958:	e7e9      	b.n	800b92e <_strtol_l.constprop.0+0x6e>
 800b95a:	f7fd fd11 	bl	8009380 <__errno>
 800b95e:	2316      	movs	r3, #22
 800b960:	6003      	str	r3, [r0, #0]
 800b962:	2000      	movs	r0, #0
 800b964:	b005      	add	sp, #20
 800b966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b968:	9100      	str	r1, [sp, #0]
 800b96a:	2d2b      	cmp	r5, #43	@ 0x2b
 800b96c:	d1c5      	bne.n	800b8fa <_strtol_l.constprop.0+0x3a>
 800b96e:	7825      	ldrb	r5, [r4, #0]
 800b970:	1c9c      	adds	r4, r3, #2
 800b972:	e7c2      	b.n	800b8fa <_strtol_l.constprop.0+0x3a>
 800b974:	2e00      	cmp	r6, #0
 800b976:	d1ce      	bne.n	800b916 <_strtol_l.constprop.0+0x56>
 800b978:	3608      	adds	r6, #8
 800b97a:	2d30      	cmp	r5, #48	@ 0x30
 800b97c:	d0cb      	beq.n	800b916 <_strtol_l.constprop.0+0x56>
 800b97e:	3602      	adds	r6, #2
 800b980:	e7c9      	b.n	800b916 <_strtol_l.constprop.0+0x56>
 800b982:	002b      	movs	r3, r5
 800b984:	3b41      	subs	r3, #65	@ 0x41
 800b986:	2b19      	cmp	r3, #25
 800b988:	d801      	bhi.n	800b98e <_strtol_l.constprop.0+0xce>
 800b98a:	3d37      	subs	r5, #55	@ 0x37
 800b98c:	e7d4      	b.n	800b938 <_strtol_l.constprop.0+0x78>
 800b98e:	002b      	movs	r3, r5
 800b990:	3b61      	subs	r3, #97	@ 0x61
 800b992:	2b19      	cmp	r3, #25
 800b994:	d804      	bhi.n	800b9a0 <_strtol_l.constprop.0+0xe0>
 800b996:	3d57      	subs	r5, #87	@ 0x57
 800b998:	e7ce      	b.n	800b938 <_strtol_l.constprop.0+0x78>
 800b99a:	2201      	movs	r2, #1
 800b99c:	4252      	negs	r2, r2
 800b99e:	e7d9      	b.n	800b954 <_strtol_l.constprop.0+0x94>
 800b9a0:	1c53      	adds	r3, r2, #1
 800b9a2:	d108      	bne.n	800b9b6 <_strtol_l.constprop.0+0xf6>
 800b9a4:	2322      	movs	r3, #34	@ 0x22
 800b9a6:	9a03      	ldr	r2, [sp, #12]
 800b9a8:	9802      	ldr	r0, [sp, #8]
 800b9aa:	6013      	str	r3, [r2, #0]
 800b9ac:	2f00      	cmp	r7, #0
 800b9ae:	d0d9      	beq.n	800b964 <_strtol_l.constprop.0+0xa4>
 800b9b0:	1e63      	subs	r3, r4, #1
 800b9b2:	9301      	str	r3, [sp, #4]
 800b9b4:	e007      	b.n	800b9c6 <_strtol_l.constprop.0+0x106>
 800b9b6:	9b00      	ldr	r3, [sp, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d000      	beq.n	800b9be <_strtol_l.constprop.0+0xfe>
 800b9bc:	4240      	negs	r0, r0
 800b9be:	2f00      	cmp	r7, #0
 800b9c0:	d0d0      	beq.n	800b964 <_strtol_l.constprop.0+0xa4>
 800b9c2:	2a00      	cmp	r2, #0
 800b9c4:	d1f4      	bne.n	800b9b0 <_strtol_l.constprop.0+0xf0>
 800b9c6:	9b01      	ldr	r3, [sp, #4]
 800b9c8:	603b      	str	r3, [r7, #0]
 800b9ca:	e7cb      	b.n	800b964 <_strtol_l.constprop.0+0xa4>
 800b9cc:	0800df01 	.word	0x0800df01
 800b9d0:	7fffffff 	.word	0x7fffffff

0800b9d4 <_strtol_r>:
 800b9d4:	b510      	push	{r4, lr}
 800b9d6:	f7ff ff73 	bl	800b8c0 <_strtol_l.constprop.0>
 800b9da:	bd10      	pop	{r4, pc}

0800b9dc <__ssputs_r>:
 800b9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9de:	688e      	ldr	r6, [r1, #8]
 800b9e0:	b085      	sub	sp, #20
 800b9e2:	001f      	movs	r7, r3
 800b9e4:	000c      	movs	r4, r1
 800b9e6:	680b      	ldr	r3, [r1, #0]
 800b9e8:	9002      	str	r0, [sp, #8]
 800b9ea:	9203      	str	r2, [sp, #12]
 800b9ec:	42be      	cmp	r6, r7
 800b9ee:	d830      	bhi.n	800ba52 <__ssputs_r+0x76>
 800b9f0:	210c      	movs	r1, #12
 800b9f2:	5e62      	ldrsh	r2, [r4, r1]
 800b9f4:	2190      	movs	r1, #144	@ 0x90
 800b9f6:	00c9      	lsls	r1, r1, #3
 800b9f8:	420a      	tst	r2, r1
 800b9fa:	d028      	beq.n	800ba4e <__ssputs_r+0x72>
 800b9fc:	2003      	movs	r0, #3
 800b9fe:	6921      	ldr	r1, [r4, #16]
 800ba00:	1a5b      	subs	r3, r3, r1
 800ba02:	9301      	str	r3, [sp, #4]
 800ba04:	6963      	ldr	r3, [r4, #20]
 800ba06:	4343      	muls	r3, r0
 800ba08:	9801      	ldr	r0, [sp, #4]
 800ba0a:	0fdd      	lsrs	r5, r3, #31
 800ba0c:	18ed      	adds	r5, r5, r3
 800ba0e:	1c7b      	adds	r3, r7, #1
 800ba10:	181b      	adds	r3, r3, r0
 800ba12:	106d      	asrs	r5, r5, #1
 800ba14:	42ab      	cmp	r3, r5
 800ba16:	d900      	bls.n	800ba1a <__ssputs_r+0x3e>
 800ba18:	001d      	movs	r5, r3
 800ba1a:	0552      	lsls	r2, r2, #21
 800ba1c:	d528      	bpl.n	800ba70 <__ssputs_r+0x94>
 800ba1e:	0029      	movs	r1, r5
 800ba20:	9802      	ldr	r0, [sp, #8]
 800ba22:	f7fe fbe1 	bl	800a1e8 <_malloc_r>
 800ba26:	1e06      	subs	r6, r0, #0
 800ba28:	d02c      	beq.n	800ba84 <__ssputs_r+0xa8>
 800ba2a:	9a01      	ldr	r2, [sp, #4]
 800ba2c:	6921      	ldr	r1, [r4, #16]
 800ba2e:	f000 fa1b 	bl	800be68 <memcpy>
 800ba32:	89a2      	ldrh	r2, [r4, #12]
 800ba34:	4b18      	ldr	r3, [pc, #96]	@ (800ba98 <__ssputs_r+0xbc>)
 800ba36:	401a      	ands	r2, r3
 800ba38:	2380      	movs	r3, #128	@ 0x80
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	81a3      	strh	r3, [r4, #12]
 800ba3e:	9b01      	ldr	r3, [sp, #4]
 800ba40:	6126      	str	r6, [r4, #16]
 800ba42:	18f6      	adds	r6, r6, r3
 800ba44:	6026      	str	r6, [r4, #0]
 800ba46:	003e      	movs	r6, r7
 800ba48:	6165      	str	r5, [r4, #20]
 800ba4a:	1aed      	subs	r5, r5, r3
 800ba4c:	60a5      	str	r5, [r4, #8]
 800ba4e:	42be      	cmp	r6, r7
 800ba50:	d900      	bls.n	800ba54 <__ssputs_r+0x78>
 800ba52:	003e      	movs	r6, r7
 800ba54:	0032      	movs	r2, r6
 800ba56:	9903      	ldr	r1, [sp, #12]
 800ba58:	6820      	ldr	r0, [r4, #0]
 800ba5a:	f000 f9ce 	bl	800bdfa <memmove>
 800ba5e:	2000      	movs	r0, #0
 800ba60:	68a3      	ldr	r3, [r4, #8]
 800ba62:	1b9b      	subs	r3, r3, r6
 800ba64:	60a3      	str	r3, [r4, #8]
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	199b      	adds	r3, r3, r6
 800ba6a:	6023      	str	r3, [r4, #0]
 800ba6c:	b005      	add	sp, #20
 800ba6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba70:	002a      	movs	r2, r5
 800ba72:	9802      	ldr	r0, [sp, #8]
 800ba74:	f000 fdc0 	bl	800c5f8 <_realloc_r>
 800ba78:	1e06      	subs	r6, r0, #0
 800ba7a:	d1e0      	bne.n	800ba3e <__ssputs_r+0x62>
 800ba7c:	6921      	ldr	r1, [r4, #16]
 800ba7e:	9802      	ldr	r0, [sp, #8]
 800ba80:	f7fe fb3c 	bl	800a0fc <_free_r>
 800ba84:	230c      	movs	r3, #12
 800ba86:	2001      	movs	r0, #1
 800ba88:	9a02      	ldr	r2, [sp, #8]
 800ba8a:	4240      	negs	r0, r0
 800ba8c:	6013      	str	r3, [r2, #0]
 800ba8e:	89a2      	ldrh	r2, [r4, #12]
 800ba90:	3334      	adds	r3, #52	@ 0x34
 800ba92:	4313      	orrs	r3, r2
 800ba94:	81a3      	strh	r3, [r4, #12]
 800ba96:	e7e9      	b.n	800ba6c <__ssputs_r+0x90>
 800ba98:	fffffb7f 	.word	0xfffffb7f

0800ba9c <_svfiprintf_r>:
 800ba9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba9e:	b0a1      	sub	sp, #132	@ 0x84
 800baa0:	9003      	str	r0, [sp, #12]
 800baa2:	001d      	movs	r5, r3
 800baa4:	898b      	ldrh	r3, [r1, #12]
 800baa6:	000f      	movs	r7, r1
 800baa8:	0016      	movs	r6, r2
 800baaa:	061b      	lsls	r3, r3, #24
 800baac:	d511      	bpl.n	800bad2 <_svfiprintf_r+0x36>
 800baae:	690b      	ldr	r3, [r1, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10e      	bne.n	800bad2 <_svfiprintf_r+0x36>
 800bab4:	2140      	movs	r1, #64	@ 0x40
 800bab6:	f7fe fb97 	bl	800a1e8 <_malloc_r>
 800baba:	6038      	str	r0, [r7, #0]
 800babc:	6138      	str	r0, [r7, #16]
 800babe:	2800      	cmp	r0, #0
 800bac0:	d105      	bne.n	800bace <_svfiprintf_r+0x32>
 800bac2:	230c      	movs	r3, #12
 800bac4:	9a03      	ldr	r2, [sp, #12]
 800bac6:	6013      	str	r3, [r2, #0]
 800bac8:	2001      	movs	r0, #1
 800baca:	4240      	negs	r0, r0
 800bacc:	e0cf      	b.n	800bc6e <_svfiprintf_r+0x1d2>
 800bace:	2340      	movs	r3, #64	@ 0x40
 800bad0:	617b      	str	r3, [r7, #20]
 800bad2:	2300      	movs	r3, #0
 800bad4:	ac08      	add	r4, sp, #32
 800bad6:	6163      	str	r3, [r4, #20]
 800bad8:	3320      	adds	r3, #32
 800bada:	7663      	strb	r3, [r4, #25]
 800badc:	3310      	adds	r3, #16
 800bade:	76a3      	strb	r3, [r4, #26]
 800bae0:	9507      	str	r5, [sp, #28]
 800bae2:	0035      	movs	r5, r6
 800bae4:	782b      	ldrb	r3, [r5, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <_svfiprintf_r+0x52>
 800baea:	2b25      	cmp	r3, #37	@ 0x25
 800baec:	d148      	bne.n	800bb80 <_svfiprintf_r+0xe4>
 800baee:	1bab      	subs	r3, r5, r6
 800baf0:	9305      	str	r3, [sp, #20]
 800baf2:	42b5      	cmp	r5, r6
 800baf4:	d00b      	beq.n	800bb0e <_svfiprintf_r+0x72>
 800baf6:	0032      	movs	r2, r6
 800baf8:	0039      	movs	r1, r7
 800bafa:	9803      	ldr	r0, [sp, #12]
 800bafc:	f7ff ff6e 	bl	800b9dc <__ssputs_r>
 800bb00:	3001      	adds	r0, #1
 800bb02:	d100      	bne.n	800bb06 <_svfiprintf_r+0x6a>
 800bb04:	e0ae      	b.n	800bc64 <_svfiprintf_r+0x1c8>
 800bb06:	6963      	ldr	r3, [r4, #20]
 800bb08:	9a05      	ldr	r2, [sp, #20]
 800bb0a:	189b      	adds	r3, r3, r2
 800bb0c:	6163      	str	r3, [r4, #20]
 800bb0e:	782b      	ldrb	r3, [r5, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d100      	bne.n	800bb16 <_svfiprintf_r+0x7a>
 800bb14:	e0a6      	b.n	800bc64 <_svfiprintf_r+0x1c8>
 800bb16:	2201      	movs	r2, #1
 800bb18:	2300      	movs	r3, #0
 800bb1a:	4252      	negs	r2, r2
 800bb1c:	6062      	str	r2, [r4, #4]
 800bb1e:	a904      	add	r1, sp, #16
 800bb20:	3254      	adds	r2, #84	@ 0x54
 800bb22:	1852      	adds	r2, r2, r1
 800bb24:	1c6e      	adds	r6, r5, #1
 800bb26:	6023      	str	r3, [r4, #0]
 800bb28:	60e3      	str	r3, [r4, #12]
 800bb2a:	60a3      	str	r3, [r4, #8]
 800bb2c:	7013      	strb	r3, [r2, #0]
 800bb2e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bb30:	4b54      	ldr	r3, [pc, #336]	@ (800bc84 <_svfiprintf_r+0x1e8>)
 800bb32:	2205      	movs	r2, #5
 800bb34:	0018      	movs	r0, r3
 800bb36:	7831      	ldrb	r1, [r6, #0]
 800bb38:	9305      	str	r3, [sp, #20]
 800bb3a:	f7fd fc4e 	bl	80093da <memchr>
 800bb3e:	1c75      	adds	r5, r6, #1
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d11f      	bne.n	800bb84 <_svfiprintf_r+0xe8>
 800bb44:	6822      	ldr	r2, [r4, #0]
 800bb46:	06d3      	lsls	r3, r2, #27
 800bb48:	d504      	bpl.n	800bb54 <_svfiprintf_r+0xb8>
 800bb4a:	2353      	movs	r3, #83	@ 0x53
 800bb4c:	a904      	add	r1, sp, #16
 800bb4e:	185b      	adds	r3, r3, r1
 800bb50:	2120      	movs	r1, #32
 800bb52:	7019      	strb	r1, [r3, #0]
 800bb54:	0713      	lsls	r3, r2, #28
 800bb56:	d504      	bpl.n	800bb62 <_svfiprintf_r+0xc6>
 800bb58:	2353      	movs	r3, #83	@ 0x53
 800bb5a:	a904      	add	r1, sp, #16
 800bb5c:	185b      	adds	r3, r3, r1
 800bb5e:	212b      	movs	r1, #43	@ 0x2b
 800bb60:	7019      	strb	r1, [r3, #0]
 800bb62:	7833      	ldrb	r3, [r6, #0]
 800bb64:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb66:	d016      	beq.n	800bb96 <_svfiprintf_r+0xfa>
 800bb68:	0035      	movs	r5, r6
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	200a      	movs	r0, #10
 800bb6e:	68e3      	ldr	r3, [r4, #12]
 800bb70:	782a      	ldrb	r2, [r5, #0]
 800bb72:	1c6e      	adds	r6, r5, #1
 800bb74:	3a30      	subs	r2, #48	@ 0x30
 800bb76:	2a09      	cmp	r2, #9
 800bb78:	d950      	bls.n	800bc1c <_svfiprintf_r+0x180>
 800bb7a:	2900      	cmp	r1, #0
 800bb7c:	d111      	bne.n	800bba2 <_svfiprintf_r+0x106>
 800bb7e:	e017      	b.n	800bbb0 <_svfiprintf_r+0x114>
 800bb80:	3501      	adds	r5, #1
 800bb82:	e7af      	b.n	800bae4 <_svfiprintf_r+0x48>
 800bb84:	9b05      	ldr	r3, [sp, #20]
 800bb86:	6822      	ldr	r2, [r4, #0]
 800bb88:	1ac0      	subs	r0, r0, r3
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	4083      	lsls	r3, r0
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	002e      	movs	r6, r5
 800bb92:	6023      	str	r3, [r4, #0]
 800bb94:	e7cc      	b.n	800bb30 <_svfiprintf_r+0x94>
 800bb96:	9b07      	ldr	r3, [sp, #28]
 800bb98:	1d19      	adds	r1, r3, #4
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	9107      	str	r1, [sp, #28]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	db01      	blt.n	800bba6 <_svfiprintf_r+0x10a>
 800bba2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bba4:	e004      	b.n	800bbb0 <_svfiprintf_r+0x114>
 800bba6:	425b      	negs	r3, r3
 800bba8:	60e3      	str	r3, [r4, #12]
 800bbaa:	2302      	movs	r3, #2
 800bbac:	4313      	orrs	r3, r2
 800bbae:	6023      	str	r3, [r4, #0]
 800bbb0:	782b      	ldrb	r3, [r5, #0]
 800bbb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbb4:	d10c      	bne.n	800bbd0 <_svfiprintf_r+0x134>
 800bbb6:	786b      	ldrb	r3, [r5, #1]
 800bbb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbba:	d134      	bne.n	800bc26 <_svfiprintf_r+0x18a>
 800bbbc:	9b07      	ldr	r3, [sp, #28]
 800bbbe:	3502      	adds	r5, #2
 800bbc0:	1d1a      	adds	r2, r3, #4
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	9207      	str	r2, [sp, #28]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	da01      	bge.n	800bbce <_svfiprintf_r+0x132>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	425b      	negs	r3, r3
 800bbce:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbd0:	4e2d      	ldr	r6, [pc, #180]	@ (800bc88 <_svfiprintf_r+0x1ec>)
 800bbd2:	2203      	movs	r2, #3
 800bbd4:	0030      	movs	r0, r6
 800bbd6:	7829      	ldrb	r1, [r5, #0]
 800bbd8:	f7fd fbff 	bl	80093da <memchr>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d006      	beq.n	800bbee <_svfiprintf_r+0x152>
 800bbe0:	2340      	movs	r3, #64	@ 0x40
 800bbe2:	1b80      	subs	r0, r0, r6
 800bbe4:	4083      	lsls	r3, r0
 800bbe6:	6822      	ldr	r2, [r4, #0]
 800bbe8:	3501      	adds	r5, #1
 800bbea:	4313      	orrs	r3, r2
 800bbec:	6023      	str	r3, [r4, #0]
 800bbee:	7829      	ldrb	r1, [r5, #0]
 800bbf0:	2206      	movs	r2, #6
 800bbf2:	4826      	ldr	r0, [pc, #152]	@ (800bc8c <_svfiprintf_r+0x1f0>)
 800bbf4:	1c6e      	adds	r6, r5, #1
 800bbf6:	7621      	strb	r1, [r4, #24]
 800bbf8:	f7fd fbef 	bl	80093da <memchr>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d038      	beq.n	800bc72 <_svfiprintf_r+0x1d6>
 800bc00:	4b23      	ldr	r3, [pc, #140]	@ (800bc90 <_svfiprintf_r+0x1f4>)
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d122      	bne.n	800bc4c <_svfiprintf_r+0x1b0>
 800bc06:	2207      	movs	r2, #7
 800bc08:	9b07      	ldr	r3, [sp, #28]
 800bc0a:	3307      	adds	r3, #7
 800bc0c:	4393      	bics	r3, r2
 800bc0e:	3308      	adds	r3, #8
 800bc10:	9307      	str	r3, [sp, #28]
 800bc12:	6963      	ldr	r3, [r4, #20]
 800bc14:	9a04      	ldr	r2, [sp, #16]
 800bc16:	189b      	adds	r3, r3, r2
 800bc18:	6163      	str	r3, [r4, #20]
 800bc1a:	e762      	b.n	800bae2 <_svfiprintf_r+0x46>
 800bc1c:	4343      	muls	r3, r0
 800bc1e:	0035      	movs	r5, r6
 800bc20:	2101      	movs	r1, #1
 800bc22:	189b      	adds	r3, r3, r2
 800bc24:	e7a4      	b.n	800bb70 <_svfiprintf_r+0xd4>
 800bc26:	2300      	movs	r3, #0
 800bc28:	200a      	movs	r0, #10
 800bc2a:	0019      	movs	r1, r3
 800bc2c:	3501      	adds	r5, #1
 800bc2e:	6063      	str	r3, [r4, #4]
 800bc30:	782a      	ldrb	r2, [r5, #0]
 800bc32:	1c6e      	adds	r6, r5, #1
 800bc34:	3a30      	subs	r2, #48	@ 0x30
 800bc36:	2a09      	cmp	r2, #9
 800bc38:	d903      	bls.n	800bc42 <_svfiprintf_r+0x1a6>
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d0c8      	beq.n	800bbd0 <_svfiprintf_r+0x134>
 800bc3e:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc40:	e7c6      	b.n	800bbd0 <_svfiprintf_r+0x134>
 800bc42:	4341      	muls	r1, r0
 800bc44:	0035      	movs	r5, r6
 800bc46:	2301      	movs	r3, #1
 800bc48:	1889      	adds	r1, r1, r2
 800bc4a:	e7f1      	b.n	800bc30 <_svfiprintf_r+0x194>
 800bc4c:	aa07      	add	r2, sp, #28
 800bc4e:	9200      	str	r2, [sp, #0]
 800bc50:	0021      	movs	r1, r4
 800bc52:	003a      	movs	r2, r7
 800bc54:	4b0f      	ldr	r3, [pc, #60]	@ (800bc94 <_svfiprintf_r+0x1f8>)
 800bc56:	9803      	ldr	r0, [sp, #12]
 800bc58:	f7fc fc3e 	bl	80084d8 <_printf_float>
 800bc5c:	9004      	str	r0, [sp, #16]
 800bc5e:	9b04      	ldr	r3, [sp, #16]
 800bc60:	3301      	adds	r3, #1
 800bc62:	d1d6      	bne.n	800bc12 <_svfiprintf_r+0x176>
 800bc64:	89bb      	ldrh	r3, [r7, #12]
 800bc66:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800bc68:	065b      	lsls	r3, r3, #25
 800bc6a:	d500      	bpl.n	800bc6e <_svfiprintf_r+0x1d2>
 800bc6c:	e72c      	b.n	800bac8 <_svfiprintf_r+0x2c>
 800bc6e:	b021      	add	sp, #132	@ 0x84
 800bc70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc72:	aa07      	add	r2, sp, #28
 800bc74:	9200      	str	r2, [sp, #0]
 800bc76:	0021      	movs	r1, r4
 800bc78:	003a      	movs	r2, r7
 800bc7a:	4b06      	ldr	r3, [pc, #24]	@ (800bc94 <_svfiprintf_r+0x1f8>)
 800bc7c:	9803      	ldr	r0, [sp, #12]
 800bc7e:	f7fc fed9 	bl	8008a34 <_printf_i>
 800bc82:	e7eb      	b.n	800bc5c <_svfiprintf_r+0x1c0>
 800bc84:	0800e001 	.word	0x0800e001
 800bc88:	0800e007 	.word	0x0800e007
 800bc8c:	0800e00b 	.word	0x0800e00b
 800bc90:	080084d9 	.word	0x080084d9
 800bc94:	0800b9dd 	.word	0x0800b9dd

0800bc98 <__sflush_r>:
 800bc98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc9a:	220c      	movs	r2, #12
 800bc9c:	5e8b      	ldrsh	r3, [r1, r2]
 800bc9e:	0005      	movs	r5, r0
 800bca0:	000c      	movs	r4, r1
 800bca2:	071a      	lsls	r2, r3, #28
 800bca4:	d456      	bmi.n	800bd54 <__sflush_r+0xbc>
 800bca6:	684a      	ldr	r2, [r1, #4]
 800bca8:	2a00      	cmp	r2, #0
 800bcaa:	dc02      	bgt.n	800bcb2 <__sflush_r+0x1a>
 800bcac:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800bcae:	2a00      	cmp	r2, #0
 800bcb0:	dd4e      	ble.n	800bd50 <__sflush_r+0xb8>
 800bcb2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800bcb4:	2f00      	cmp	r7, #0
 800bcb6:	d04b      	beq.n	800bd50 <__sflush_r+0xb8>
 800bcb8:	2200      	movs	r2, #0
 800bcba:	2080      	movs	r0, #128	@ 0x80
 800bcbc:	682e      	ldr	r6, [r5, #0]
 800bcbe:	602a      	str	r2, [r5, #0]
 800bcc0:	001a      	movs	r2, r3
 800bcc2:	0140      	lsls	r0, r0, #5
 800bcc4:	6a21      	ldr	r1, [r4, #32]
 800bcc6:	4002      	ands	r2, r0
 800bcc8:	4203      	tst	r3, r0
 800bcca:	d033      	beq.n	800bd34 <__sflush_r+0x9c>
 800bccc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcce:	89a3      	ldrh	r3, [r4, #12]
 800bcd0:	075b      	lsls	r3, r3, #29
 800bcd2:	d506      	bpl.n	800bce2 <__sflush_r+0x4a>
 800bcd4:	6863      	ldr	r3, [r4, #4]
 800bcd6:	1ad2      	subs	r2, r2, r3
 800bcd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d001      	beq.n	800bce2 <__sflush_r+0x4a>
 800bcde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bce0:	1ad2      	subs	r2, r2, r3
 800bce2:	2300      	movs	r3, #0
 800bce4:	0028      	movs	r0, r5
 800bce6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800bce8:	6a21      	ldr	r1, [r4, #32]
 800bcea:	47b8      	blx	r7
 800bcec:	89a2      	ldrh	r2, [r4, #12]
 800bcee:	1c43      	adds	r3, r0, #1
 800bcf0:	d106      	bne.n	800bd00 <__sflush_r+0x68>
 800bcf2:	6829      	ldr	r1, [r5, #0]
 800bcf4:	291d      	cmp	r1, #29
 800bcf6:	d846      	bhi.n	800bd86 <__sflush_r+0xee>
 800bcf8:	4b29      	ldr	r3, [pc, #164]	@ (800bda0 <__sflush_r+0x108>)
 800bcfa:	410b      	asrs	r3, r1
 800bcfc:	07db      	lsls	r3, r3, #31
 800bcfe:	d442      	bmi.n	800bd86 <__sflush_r+0xee>
 800bd00:	2300      	movs	r3, #0
 800bd02:	6063      	str	r3, [r4, #4]
 800bd04:	6923      	ldr	r3, [r4, #16]
 800bd06:	6023      	str	r3, [r4, #0]
 800bd08:	04d2      	lsls	r2, r2, #19
 800bd0a:	d505      	bpl.n	800bd18 <__sflush_r+0x80>
 800bd0c:	1c43      	adds	r3, r0, #1
 800bd0e:	d102      	bne.n	800bd16 <__sflush_r+0x7e>
 800bd10:	682b      	ldr	r3, [r5, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d100      	bne.n	800bd18 <__sflush_r+0x80>
 800bd16:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd1a:	602e      	str	r6, [r5, #0]
 800bd1c:	2900      	cmp	r1, #0
 800bd1e:	d017      	beq.n	800bd50 <__sflush_r+0xb8>
 800bd20:	0023      	movs	r3, r4
 800bd22:	3344      	adds	r3, #68	@ 0x44
 800bd24:	4299      	cmp	r1, r3
 800bd26:	d002      	beq.n	800bd2e <__sflush_r+0x96>
 800bd28:	0028      	movs	r0, r5
 800bd2a:	f7fe f9e7 	bl	800a0fc <_free_r>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd32:	e00d      	b.n	800bd50 <__sflush_r+0xb8>
 800bd34:	2301      	movs	r3, #1
 800bd36:	0028      	movs	r0, r5
 800bd38:	47b8      	blx	r7
 800bd3a:	0002      	movs	r2, r0
 800bd3c:	1c43      	adds	r3, r0, #1
 800bd3e:	d1c6      	bne.n	800bcce <__sflush_r+0x36>
 800bd40:	682b      	ldr	r3, [r5, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d0c3      	beq.n	800bcce <__sflush_r+0x36>
 800bd46:	2b1d      	cmp	r3, #29
 800bd48:	d001      	beq.n	800bd4e <__sflush_r+0xb6>
 800bd4a:	2b16      	cmp	r3, #22
 800bd4c:	d11a      	bne.n	800bd84 <__sflush_r+0xec>
 800bd4e:	602e      	str	r6, [r5, #0]
 800bd50:	2000      	movs	r0, #0
 800bd52:	e01e      	b.n	800bd92 <__sflush_r+0xfa>
 800bd54:	690e      	ldr	r6, [r1, #16]
 800bd56:	2e00      	cmp	r6, #0
 800bd58:	d0fa      	beq.n	800bd50 <__sflush_r+0xb8>
 800bd5a:	680f      	ldr	r7, [r1, #0]
 800bd5c:	600e      	str	r6, [r1, #0]
 800bd5e:	1bba      	subs	r2, r7, r6
 800bd60:	9201      	str	r2, [sp, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	079b      	lsls	r3, r3, #30
 800bd66:	d100      	bne.n	800bd6a <__sflush_r+0xd2>
 800bd68:	694a      	ldr	r2, [r1, #20]
 800bd6a:	60a2      	str	r2, [r4, #8]
 800bd6c:	9b01      	ldr	r3, [sp, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	ddee      	ble.n	800bd50 <__sflush_r+0xb8>
 800bd72:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bd74:	0032      	movs	r2, r6
 800bd76:	001f      	movs	r7, r3
 800bd78:	0028      	movs	r0, r5
 800bd7a:	9b01      	ldr	r3, [sp, #4]
 800bd7c:	6a21      	ldr	r1, [r4, #32]
 800bd7e:	47b8      	blx	r7
 800bd80:	2800      	cmp	r0, #0
 800bd82:	dc07      	bgt.n	800bd94 <__sflush_r+0xfc>
 800bd84:	89a2      	ldrh	r2, [r4, #12]
 800bd86:	2340      	movs	r3, #64	@ 0x40
 800bd88:	2001      	movs	r0, #1
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	b21b      	sxth	r3, r3
 800bd8e:	81a3      	strh	r3, [r4, #12]
 800bd90:	4240      	negs	r0, r0
 800bd92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd94:	9b01      	ldr	r3, [sp, #4]
 800bd96:	1836      	adds	r6, r6, r0
 800bd98:	1a1b      	subs	r3, r3, r0
 800bd9a:	9301      	str	r3, [sp, #4]
 800bd9c:	e7e6      	b.n	800bd6c <__sflush_r+0xd4>
 800bd9e:	46c0      	nop			@ (mov r8, r8)
 800bda0:	dfbffffe 	.word	0xdfbffffe

0800bda4 <_fflush_r>:
 800bda4:	690b      	ldr	r3, [r1, #16]
 800bda6:	b570      	push	{r4, r5, r6, lr}
 800bda8:	0005      	movs	r5, r0
 800bdaa:	000c      	movs	r4, r1
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d102      	bne.n	800bdb6 <_fflush_r+0x12>
 800bdb0:	2500      	movs	r5, #0
 800bdb2:	0028      	movs	r0, r5
 800bdb4:	bd70      	pop	{r4, r5, r6, pc}
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d004      	beq.n	800bdc4 <_fflush_r+0x20>
 800bdba:	6a03      	ldr	r3, [r0, #32]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <_fflush_r+0x20>
 800bdc0:	f7fd f9e4 	bl	800918c <__sinit>
 800bdc4:	220c      	movs	r2, #12
 800bdc6:	5ea3      	ldrsh	r3, [r4, r2]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d0f1      	beq.n	800bdb0 <_fflush_r+0xc>
 800bdcc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdce:	07d2      	lsls	r2, r2, #31
 800bdd0:	d404      	bmi.n	800bddc <_fflush_r+0x38>
 800bdd2:	059b      	lsls	r3, r3, #22
 800bdd4:	d402      	bmi.n	800bddc <_fflush_r+0x38>
 800bdd6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdd8:	f7fd fafd 	bl	80093d6 <__retarget_lock_acquire_recursive>
 800bddc:	0028      	movs	r0, r5
 800bdde:	0021      	movs	r1, r4
 800bde0:	f7ff ff5a 	bl	800bc98 <__sflush_r>
 800bde4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bde6:	0005      	movs	r5, r0
 800bde8:	07db      	lsls	r3, r3, #31
 800bdea:	d4e2      	bmi.n	800bdb2 <_fflush_r+0xe>
 800bdec:	89a3      	ldrh	r3, [r4, #12]
 800bdee:	059b      	lsls	r3, r3, #22
 800bdf0:	d4df      	bmi.n	800bdb2 <_fflush_r+0xe>
 800bdf2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdf4:	f7fd faf0 	bl	80093d8 <__retarget_lock_release_recursive>
 800bdf8:	e7db      	b.n	800bdb2 <_fflush_r+0xe>

0800bdfa <memmove>:
 800bdfa:	b510      	push	{r4, lr}
 800bdfc:	4288      	cmp	r0, r1
 800bdfe:	d806      	bhi.n	800be0e <memmove+0x14>
 800be00:	2300      	movs	r3, #0
 800be02:	429a      	cmp	r2, r3
 800be04:	d008      	beq.n	800be18 <memmove+0x1e>
 800be06:	5ccc      	ldrb	r4, [r1, r3]
 800be08:	54c4      	strb	r4, [r0, r3]
 800be0a:	3301      	adds	r3, #1
 800be0c:	e7f9      	b.n	800be02 <memmove+0x8>
 800be0e:	188b      	adds	r3, r1, r2
 800be10:	4298      	cmp	r0, r3
 800be12:	d2f5      	bcs.n	800be00 <memmove+0x6>
 800be14:	3a01      	subs	r2, #1
 800be16:	d200      	bcs.n	800be1a <memmove+0x20>
 800be18:	bd10      	pop	{r4, pc}
 800be1a:	5c8b      	ldrb	r3, [r1, r2]
 800be1c:	5483      	strb	r3, [r0, r2]
 800be1e:	e7f9      	b.n	800be14 <memmove+0x1a>

0800be20 <strncmp>:
 800be20:	b530      	push	{r4, r5, lr}
 800be22:	0005      	movs	r5, r0
 800be24:	1e10      	subs	r0, r2, #0
 800be26:	d00b      	beq.n	800be40 <strncmp+0x20>
 800be28:	2400      	movs	r4, #0
 800be2a:	3a01      	subs	r2, #1
 800be2c:	5d2b      	ldrb	r3, [r5, r4]
 800be2e:	5d08      	ldrb	r0, [r1, r4]
 800be30:	4283      	cmp	r3, r0
 800be32:	d104      	bne.n	800be3e <strncmp+0x1e>
 800be34:	42a2      	cmp	r2, r4
 800be36:	d002      	beq.n	800be3e <strncmp+0x1e>
 800be38:	3401      	adds	r4, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1f6      	bne.n	800be2c <strncmp+0xc>
 800be3e:	1a18      	subs	r0, r3, r0
 800be40:	bd30      	pop	{r4, r5, pc}
	...

0800be44 <_sbrk_r>:
 800be44:	2300      	movs	r3, #0
 800be46:	b570      	push	{r4, r5, r6, lr}
 800be48:	4d06      	ldr	r5, [pc, #24]	@ (800be64 <_sbrk_r+0x20>)
 800be4a:	0004      	movs	r4, r0
 800be4c:	0008      	movs	r0, r1
 800be4e:	602b      	str	r3, [r5, #0]
 800be50:	f7f9 fdf8 	bl	8005a44 <_sbrk>
 800be54:	1c43      	adds	r3, r0, #1
 800be56:	d103      	bne.n	800be60 <_sbrk_r+0x1c>
 800be58:	682b      	ldr	r3, [r5, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d000      	beq.n	800be60 <_sbrk_r+0x1c>
 800be5e:	6023      	str	r3, [r4, #0]
 800be60:	bd70      	pop	{r4, r5, r6, pc}
 800be62:	46c0      	nop			@ (mov r8, r8)
 800be64:	20000494 	.word	0x20000494

0800be68 <memcpy>:
 800be68:	2300      	movs	r3, #0
 800be6a:	b510      	push	{r4, lr}
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d100      	bne.n	800be72 <memcpy+0xa>
 800be70:	bd10      	pop	{r4, pc}
 800be72:	5ccc      	ldrb	r4, [r1, r3]
 800be74:	54c4      	strb	r4, [r0, r3]
 800be76:	3301      	adds	r3, #1
 800be78:	e7f8      	b.n	800be6c <memcpy+0x4>
	...

0800be7c <nan>:
 800be7c:	2000      	movs	r0, #0
 800be7e:	4901      	ldr	r1, [pc, #4]	@ (800be84 <nan+0x8>)
 800be80:	4770      	bx	lr
 800be82:	46c0      	nop			@ (mov r8, r8)
 800be84:	7ff80000 	.word	0x7ff80000

0800be88 <__assert_func>:
 800be88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800be8a:	0014      	movs	r4, r2
 800be8c:	001a      	movs	r2, r3
 800be8e:	4b09      	ldr	r3, [pc, #36]	@ (800beb4 <__assert_func+0x2c>)
 800be90:	0005      	movs	r5, r0
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	000e      	movs	r6, r1
 800be96:	68d8      	ldr	r0, [r3, #12]
 800be98:	4b07      	ldr	r3, [pc, #28]	@ (800beb8 <__assert_func+0x30>)
 800be9a:	2c00      	cmp	r4, #0
 800be9c:	d101      	bne.n	800bea2 <__assert_func+0x1a>
 800be9e:	4b07      	ldr	r3, [pc, #28]	@ (800bebc <__assert_func+0x34>)
 800bea0:	001c      	movs	r4, r3
 800bea2:	4907      	ldr	r1, [pc, #28]	@ (800bec0 <__assert_func+0x38>)
 800bea4:	9301      	str	r3, [sp, #4]
 800bea6:	9402      	str	r4, [sp, #8]
 800bea8:	002b      	movs	r3, r5
 800beaa:	9600      	str	r6, [sp, #0]
 800beac:	f000 fbe0 	bl	800c670 <fiprintf>
 800beb0:	f000 fbee 	bl	800c690 <abort>
 800beb4:	20000030 	.word	0x20000030
 800beb8:	0800e01a 	.word	0x0800e01a
 800bebc:	0800e055 	.word	0x0800e055
 800bec0:	0800e027 	.word	0x0800e027

0800bec4 <_calloc_r>:
 800bec4:	b570      	push	{r4, r5, r6, lr}
 800bec6:	0c0b      	lsrs	r3, r1, #16
 800bec8:	0c15      	lsrs	r5, r2, #16
 800beca:	2b00      	cmp	r3, #0
 800becc:	d11e      	bne.n	800bf0c <_calloc_r+0x48>
 800bece:	2d00      	cmp	r5, #0
 800bed0:	d10c      	bne.n	800beec <_calloc_r+0x28>
 800bed2:	b289      	uxth	r1, r1
 800bed4:	b294      	uxth	r4, r2
 800bed6:	434c      	muls	r4, r1
 800bed8:	0021      	movs	r1, r4
 800beda:	f7fe f985 	bl	800a1e8 <_malloc_r>
 800bede:	1e05      	subs	r5, r0, #0
 800bee0:	d01a      	beq.n	800bf18 <_calloc_r+0x54>
 800bee2:	0022      	movs	r2, r4
 800bee4:	2100      	movs	r1, #0
 800bee6:	f7fd f9f1 	bl	80092cc <memset>
 800beea:	e016      	b.n	800bf1a <_calloc_r+0x56>
 800beec:	1c2b      	adds	r3, r5, #0
 800beee:	1c0c      	adds	r4, r1, #0
 800bef0:	b289      	uxth	r1, r1
 800bef2:	b292      	uxth	r2, r2
 800bef4:	434a      	muls	r2, r1
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	b2a1      	uxth	r1, r4
 800befa:	4359      	muls	r1, r3
 800befc:	0c14      	lsrs	r4, r2, #16
 800befe:	190c      	adds	r4, r1, r4
 800bf00:	0c23      	lsrs	r3, r4, #16
 800bf02:	d107      	bne.n	800bf14 <_calloc_r+0x50>
 800bf04:	0424      	lsls	r4, r4, #16
 800bf06:	b292      	uxth	r2, r2
 800bf08:	4314      	orrs	r4, r2
 800bf0a:	e7e5      	b.n	800bed8 <_calloc_r+0x14>
 800bf0c:	2d00      	cmp	r5, #0
 800bf0e:	d101      	bne.n	800bf14 <_calloc_r+0x50>
 800bf10:	1c14      	adds	r4, r2, #0
 800bf12:	e7ed      	b.n	800bef0 <_calloc_r+0x2c>
 800bf14:	230c      	movs	r3, #12
 800bf16:	6003      	str	r3, [r0, #0]
 800bf18:	2500      	movs	r5, #0
 800bf1a:	0028      	movs	r0, r5
 800bf1c:	bd70      	pop	{r4, r5, r6, pc}

0800bf1e <rshift>:
 800bf1e:	0002      	movs	r2, r0
 800bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf22:	6904      	ldr	r4, [r0, #16]
 800bf24:	b085      	sub	sp, #20
 800bf26:	3214      	adds	r2, #20
 800bf28:	114b      	asrs	r3, r1, #5
 800bf2a:	0016      	movs	r6, r2
 800bf2c:	9302      	str	r3, [sp, #8]
 800bf2e:	429c      	cmp	r4, r3
 800bf30:	dd31      	ble.n	800bf96 <rshift+0x78>
 800bf32:	261f      	movs	r6, #31
 800bf34:	000f      	movs	r7, r1
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	00a5      	lsls	r5, r4, #2
 800bf3a:	18d3      	adds	r3, r2, r3
 800bf3c:	4037      	ands	r7, r6
 800bf3e:	1955      	adds	r5, r2, r5
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	9701      	str	r7, [sp, #4]
 800bf44:	4231      	tst	r1, r6
 800bf46:	d10d      	bne.n	800bf64 <rshift+0x46>
 800bf48:	0016      	movs	r6, r2
 800bf4a:	0019      	movs	r1, r3
 800bf4c:	428d      	cmp	r5, r1
 800bf4e:	d836      	bhi.n	800bfbe <rshift+0xa0>
 800bf50:	9b00      	ldr	r3, [sp, #0]
 800bf52:	2600      	movs	r6, #0
 800bf54:	3b03      	subs	r3, #3
 800bf56:	429d      	cmp	r5, r3
 800bf58:	d302      	bcc.n	800bf60 <rshift+0x42>
 800bf5a:	9b02      	ldr	r3, [sp, #8]
 800bf5c:	1ae4      	subs	r4, r4, r3
 800bf5e:	00a6      	lsls	r6, r4, #2
 800bf60:	1996      	adds	r6, r2, r6
 800bf62:	e018      	b.n	800bf96 <rshift+0x78>
 800bf64:	2120      	movs	r1, #32
 800bf66:	9e01      	ldr	r6, [sp, #4]
 800bf68:	9f01      	ldr	r7, [sp, #4]
 800bf6a:	1b89      	subs	r1, r1, r6
 800bf6c:	9e00      	ldr	r6, [sp, #0]
 800bf6e:	9103      	str	r1, [sp, #12]
 800bf70:	ce02      	ldmia	r6!, {r1}
 800bf72:	4694      	mov	ip, r2
 800bf74:	40f9      	lsrs	r1, r7
 800bf76:	42b5      	cmp	r5, r6
 800bf78:	d816      	bhi.n	800bfa8 <rshift+0x8a>
 800bf7a:	9b00      	ldr	r3, [sp, #0]
 800bf7c:	2600      	movs	r6, #0
 800bf7e:	3301      	adds	r3, #1
 800bf80:	429d      	cmp	r5, r3
 800bf82:	d303      	bcc.n	800bf8c <rshift+0x6e>
 800bf84:	9b02      	ldr	r3, [sp, #8]
 800bf86:	1ae4      	subs	r4, r4, r3
 800bf88:	00a6      	lsls	r6, r4, #2
 800bf8a:	3e04      	subs	r6, #4
 800bf8c:	1996      	adds	r6, r2, r6
 800bf8e:	6031      	str	r1, [r6, #0]
 800bf90:	2900      	cmp	r1, #0
 800bf92:	d000      	beq.n	800bf96 <rshift+0x78>
 800bf94:	3604      	adds	r6, #4
 800bf96:	1ab1      	subs	r1, r6, r2
 800bf98:	1089      	asrs	r1, r1, #2
 800bf9a:	6101      	str	r1, [r0, #16]
 800bf9c:	4296      	cmp	r6, r2
 800bf9e:	d101      	bne.n	800bfa4 <rshift+0x86>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	6143      	str	r3, [r0, #20]
 800bfa4:	b005      	add	sp, #20
 800bfa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfa8:	6837      	ldr	r7, [r6, #0]
 800bfaa:	9b03      	ldr	r3, [sp, #12]
 800bfac:	409f      	lsls	r7, r3
 800bfae:	430f      	orrs	r7, r1
 800bfb0:	4661      	mov	r1, ip
 800bfb2:	c180      	stmia	r1!, {r7}
 800bfb4:	468c      	mov	ip, r1
 800bfb6:	9b01      	ldr	r3, [sp, #4]
 800bfb8:	ce02      	ldmia	r6!, {r1}
 800bfba:	40d9      	lsrs	r1, r3
 800bfbc:	e7db      	b.n	800bf76 <rshift+0x58>
 800bfbe:	c980      	ldmia	r1!, {r7}
 800bfc0:	c680      	stmia	r6!, {r7}
 800bfc2:	e7c3      	b.n	800bf4c <rshift+0x2e>

0800bfc4 <__hexdig_fun>:
 800bfc4:	0002      	movs	r2, r0
 800bfc6:	3a30      	subs	r2, #48	@ 0x30
 800bfc8:	0003      	movs	r3, r0
 800bfca:	2a09      	cmp	r2, #9
 800bfcc:	d802      	bhi.n	800bfd4 <__hexdig_fun+0x10>
 800bfce:	3b20      	subs	r3, #32
 800bfd0:	b2d8      	uxtb	r0, r3
 800bfd2:	4770      	bx	lr
 800bfd4:	0002      	movs	r2, r0
 800bfd6:	3a61      	subs	r2, #97	@ 0x61
 800bfd8:	2a05      	cmp	r2, #5
 800bfda:	d801      	bhi.n	800bfe0 <__hexdig_fun+0x1c>
 800bfdc:	3b47      	subs	r3, #71	@ 0x47
 800bfde:	e7f7      	b.n	800bfd0 <__hexdig_fun+0xc>
 800bfe0:	001a      	movs	r2, r3
 800bfe2:	3a41      	subs	r2, #65	@ 0x41
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	2a05      	cmp	r2, #5
 800bfe8:	d8f3      	bhi.n	800bfd2 <__hexdig_fun+0xe>
 800bfea:	3b27      	subs	r3, #39	@ 0x27
 800bfec:	e7f0      	b.n	800bfd0 <__hexdig_fun+0xc>
	...

0800bff0 <__gethex>:
 800bff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bff2:	b089      	sub	sp, #36	@ 0x24
 800bff4:	9307      	str	r3, [sp, #28]
 800bff6:	680b      	ldr	r3, [r1, #0]
 800bff8:	9201      	str	r2, [sp, #4]
 800bffa:	9003      	str	r0, [sp, #12]
 800bffc:	9106      	str	r1, [sp, #24]
 800bffe:	1c9a      	adds	r2, r3, #2
 800c000:	0011      	movs	r1, r2
 800c002:	3201      	adds	r2, #1
 800c004:	1e50      	subs	r0, r2, #1
 800c006:	7800      	ldrb	r0, [r0, #0]
 800c008:	2830      	cmp	r0, #48	@ 0x30
 800c00a:	d0f9      	beq.n	800c000 <__gethex+0x10>
 800c00c:	1acb      	subs	r3, r1, r3
 800c00e:	3b02      	subs	r3, #2
 800c010:	9305      	str	r3, [sp, #20]
 800c012:	9100      	str	r1, [sp, #0]
 800c014:	f7ff ffd6 	bl	800bfc4 <__hexdig_fun>
 800c018:	2300      	movs	r3, #0
 800c01a:	001d      	movs	r5, r3
 800c01c:	9302      	str	r3, [sp, #8]
 800c01e:	4298      	cmp	r0, r3
 800c020:	d11e      	bne.n	800c060 <__gethex+0x70>
 800c022:	2201      	movs	r2, #1
 800c024:	49a6      	ldr	r1, [pc, #664]	@ (800c2c0 <__gethex+0x2d0>)
 800c026:	9800      	ldr	r0, [sp, #0]
 800c028:	f7ff fefa 	bl	800be20 <strncmp>
 800c02c:	0007      	movs	r7, r0
 800c02e:	42a8      	cmp	r0, r5
 800c030:	d000      	beq.n	800c034 <__gethex+0x44>
 800c032:	e06a      	b.n	800c10a <__gethex+0x11a>
 800c034:	9b00      	ldr	r3, [sp, #0]
 800c036:	7858      	ldrb	r0, [r3, #1]
 800c038:	1c5c      	adds	r4, r3, #1
 800c03a:	f7ff ffc3 	bl	800bfc4 <__hexdig_fun>
 800c03e:	2301      	movs	r3, #1
 800c040:	9302      	str	r3, [sp, #8]
 800c042:	42a8      	cmp	r0, r5
 800c044:	d02f      	beq.n	800c0a6 <__gethex+0xb6>
 800c046:	9400      	str	r4, [sp, #0]
 800c048:	9b00      	ldr	r3, [sp, #0]
 800c04a:	7818      	ldrb	r0, [r3, #0]
 800c04c:	2830      	cmp	r0, #48	@ 0x30
 800c04e:	d009      	beq.n	800c064 <__gethex+0x74>
 800c050:	f7ff ffb8 	bl	800bfc4 <__hexdig_fun>
 800c054:	4242      	negs	r2, r0
 800c056:	4142      	adcs	r2, r0
 800c058:	2301      	movs	r3, #1
 800c05a:	0025      	movs	r5, r4
 800c05c:	9202      	str	r2, [sp, #8]
 800c05e:	9305      	str	r3, [sp, #20]
 800c060:	9c00      	ldr	r4, [sp, #0]
 800c062:	e004      	b.n	800c06e <__gethex+0x7e>
 800c064:	9b00      	ldr	r3, [sp, #0]
 800c066:	3301      	adds	r3, #1
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	e7ed      	b.n	800c048 <__gethex+0x58>
 800c06c:	3401      	adds	r4, #1
 800c06e:	7820      	ldrb	r0, [r4, #0]
 800c070:	f7ff ffa8 	bl	800bfc4 <__hexdig_fun>
 800c074:	1e07      	subs	r7, r0, #0
 800c076:	d1f9      	bne.n	800c06c <__gethex+0x7c>
 800c078:	2201      	movs	r2, #1
 800c07a:	0020      	movs	r0, r4
 800c07c:	4990      	ldr	r1, [pc, #576]	@ (800c2c0 <__gethex+0x2d0>)
 800c07e:	f7ff fecf 	bl	800be20 <strncmp>
 800c082:	2800      	cmp	r0, #0
 800c084:	d10d      	bne.n	800c0a2 <__gethex+0xb2>
 800c086:	2d00      	cmp	r5, #0
 800c088:	d106      	bne.n	800c098 <__gethex+0xa8>
 800c08a:	3401      	adds	r4, #1
 800c08c:	0025      	movs	r5, r4
 800c08e:	7820      	ldrb	r0, [r4, #0]
 800c090:	f7ff ff98 	bl	800bfc4 <__hexdig_fun>
 800c094:	2800      	cmp	r0, #0
 800c096:	d102      	bne.n	800c09e <__gethex+0xae>
 800c098:	1b2d      	subs	r5, r5, r4
 800c09a:	00af      	lsls	r7, r5, #2
 800c09c:	e003      	b.n	800c0a6 <__gethex+0xb6>
 800c09e:	3401      	adds	r4, #1
 800c0a0:	e7f5      	b.n	800c08e <__gethex+0x9e>
 800c0a2:	2d00      	cmp	r5, #0
 800c0a4:	d1f8      	bne.n	800c098 <__gethex+0xa8>
 800c0a6:	2220      	movs	r2, #32
 800c0a8:	7823      	ldrb	r3, [r4, #0]
 800c0aa:	0026      	movs	r6, r4
 800c0ac:	4393      	bics	r3, r2
 800c0ae:	2b50      	cmp	r3, #80	@ 0x50
 800c0b0:	d11d      	bne.n	800c0ee <__gethex+0xfe>
 800c0b2:	7863      	ldrb	r3, [r4, #1]
 800c0b4:	2b2b      	cmp	r3, #43	@ 0x2b
 800c0b6:	d02d      	beq.n	800c114 <__gethex+0x124>
 800c0b8:	2b2d      	cmp	r3, #45	@ 0x2d
 800c0ba:	d02f      	beq.n	800c11c <__gethex+0x12c>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	1c66      	adds	r6, r4, #1
 800c0c0:	9304      	str	r3, [sp, #16]
 800c0c2:	7830      	ldrb	r0, [r6, #0]
 800c0c4:	f7ff ff7e 	bl	800bfc4 <__hexdig_fun>
 800c0c8:	1e43      	subs	r3, r0, #1
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	0005      	movs	r5, r0
 800c0ce:	2b18      	cmp	r3, #24
 800c0d0:	d82a      	bhi.n	800c128 <__gethex+0x138>
 800c0d2:	7870      	ldrb	r0, [r6, #1]
 800c0d4:	f7ff ff76 	bl	800bfc4 <__hexdig_fun>
 800c0d8:	1e43      	subs	r3, r0, #1
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	3601      	adds	r6, #1
 800c0de:	3d10      	subs	r5, #16
 800c0e0:	2b18      	cmp	r3, #24
 800c0e2:	d91d      	bls.n	800c120 <__gethex+0x130>
 800c0e4:	9b04      	ldr	r3, [sp, #16]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d000      	beq.n	800c0ec <__gethex+0xfc>
 800c0ea:	426d      	negs	r5, r5
 800c0ec:	197f      	adds	r7, r7, r5
 800c0ee:	9b06      	ldr	r3, [sp, #24]
 800c0f0:	601e      	str	r6, [r3, #0]
 800c0f2:	9b02      	ldr	r3, [sp, #8]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d019      	beq.n	800c12c <__gethex+0x13c>
 800c0f8:	9b05      	ldr	r3, [sp, #20]
 800c0fa:	2606      	movs	r6, #6
 800c0fc:	425a      	negs	r2, r3
 800c0fe:	4153      	adcs	r3, r2
 800c100:	425b      	negs	r3, r3
 800c102:	401e      	ands	r6, r3
 800c104:	0030      	movs	r0, r6
 800c106:	b009      	add	sp, #36	@ 0x24
 800c108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c10a:	2301      	movs	r3, #1
 800c10c:	2700      	movs	r7, #0
 800c10e:	9c00      	ldr	r4, [sp, #0]
 800c110:	9302      	str	r3, [sp, #8]
 800c112:	e7c8      	b.n	800c0a6 <__gethex+0xb6>
 800c114:	2300      	movs	r3, #0
 800c116:	9304      	str	r3, [sp, #16]
 800c118:	1ca6      	adds	r6, r4, #2
 800c11a:	e7d2      	b.n	800c0c2 <__gethex+0xd2>
 800c11c:	2301      	movs	r3, #1
 800c11e:	e7fa      	b.n	800c116 <__gethex+0x126>
 800c120:	230a      	movs	r3, #10
 800c122:	435d      	muls	r5, r3
 800c124:	182d      	adds	r5, r5, r0
 800c126:	e7d4      	b.n	800c0d2 <__gethex+0xe2>
 800c128:	0026      	movs	r6, r4
 800c12a:	e7e0      	b.n	800c0ee <__gethex+0xfe>
 800c12c:	9b00      	ldr	r3, [sp, #0]
 800c12e:	9902      	ldr	r1, [sp, #8]
 800c130:	1ae3      	subs	r3, r4, r3
 800c132:	3b01      	subs	r3, #1
 800c134:	2b07      	cmp	r3, #7
 800c136:	dc0a      	bgt.n	800c14e <__gethex+0x15e>
 800c138:	9803      	ldr	r0, [sp, #12]
 800c13a:	f7fe f8e5 	bl	800a308 <_Balloc>
 800c13e:	1e05      	subs	r5, r0, #0
 800c140:	d108      	bne.n	800c154 <__gethex+0x164>
 800c142:	002a      	movs	r2, r5
 800c144:	21e4      	movs	r1, #228	@ 0xe4
 800c146:	4b5f      	ldr	r3, [pc, #380]	@ (800c2c4 <__gethex+0x2d4>)
 800c148:	485f      	ldr	r0, [pc, #380]	@ (800c2c8 <__gethex+0x2d8>)
 800c14a:	f7ff fe9d 	bl	800be88 <__assert_func>
 800c14e:	3101      	adds	r1, #1
 800c150:	105b      	asrs	r3, r3, #1
 800c152:	e7ef      	b.n	800c134 <__gethex+0x144>
 800c154:	0003      	movs	r3, r0
 800c156:	3314      	adds	r3, #20
 800c158:	9302      	str	r3, [sp, #8]
 800c15a:	9305      	str	r3, [sp, #20]
 800c15c:	2300      	movs	r3, #0
 800c15e:	001e      	movs	r6, r3
 800c160:	9304      	str	r3, [sp, #16]
 800c162:	9b00      	ldr	r3, [sp, #0]
 800c164:	42a3      	cmp	r3, r4
 800c166:	d338      	bcc.n	800c1da <__gethex+0x1ea>
 800c168:	9c05      	ldr	r4, [sp, #20]
 800c16a:	9b02      	ldr	r3, [sp, #8]
 800c16c:	c440      	stmia	r4!, {r6}
 800c16e:	1ae4      	subs	r4, r4, r3
 800c170:	10a4      	asrs	r4, r4, #2
 800c172:	0030      	movs	r0, r6
 800c174:	612c      	str	r4, [r5, #16]
 800c176:	f7fe f9bf 	bl	800a4f8 <__hi0bits>
 800c17a:	9b01      	ldr	r3, [sp, #4]
 800c17c:	0164      	lsls	r4, r4, #5
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	1a26      	subs	r6, r4, r0
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	429e      	cmp	r6, r3
 800c186:	dd52      	ble.n	800c22e <__gethex+0x23e>
 800c188:	1af6      	subs	r6, r6, r3
 800c18a:	0031      	movs	r1, r6
 800c18c:	0028      	movs	r0, r5
 800c18e:	f7fe fd62 	bl	800ac56 <__any_on>
 800c192:	1e04      	subs	r4, r0, #0
 800c194:	d00f      	beq.n	800c1b6 <__gethex+0x1c6>
 800c196:	2401      	movs	r4, #1
 800c198:	231f      	movs	r3, #31
 800c19a:	0020      	movs	r0, r4
 800c19c:	1e72      	subs	r2, r6, #1
 800c19e:	4013      	ands	r3, r2
 800c1a0:	4098      	lsls	r0, r3
 800c1a2:	0003      	movs	r3, r0
 800c1a4:	1151      	asrs	r1, r2, #5
 800c1a6:	9802      	ldr	r0, [sp, #8]
 800c1a8:	0089      	lsls	r1, r1, #2
 800c1aa:	5809      	ldr	r1, [r1, r0]
 800c1ac:	4219      	tst	r1, r3
 800c1ae:	d002      	beq.n	800c1b6 <__gethex+0x1c6>
 800c1b0:	42a2      	cmp	r2, r4
 800c1b2:	dc34      	bgt.n	800c21e <__gethex+0x22e>
 800c1b4:	2402      	movs	r4, #2
 800c1b6:	0031      	movs	r1, r6
 800c1b8:	0028      	movs	r0, r5
 800c1ba:	f7ff feb0 	bl	800bf1e <rshift>
 800c1be:	19bf      	adds	r7, r7, r6
 800c1c0:	9b01      	ldr	r3, [sp, #4]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	42bb      	cmp	r3, r7
 800c1c6:	da42      	bge.n	800c24e <__gethex+0x25e>
 800c1c8:	0029      	movs	r1, r5
 800c1ca:	9803      	ldr	r0, [sp, #12]
 800c1cc:	f7fe f8e0 	bl	800a390 <_Bfree>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1d4:	26a3      	movs	r6, #163	@ 0xa3
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	e794      	b.n	800c104 <__gethex+0x114>
 800c1da:	3c01      	subs	r4, #1
 800c1dc:	7823      	ldrb	r3, [r4, #0]
 800c1de:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1e0:	d012      	beq.n	800c208 <__gethex+0x218>
 800c1e2:	9b04      	ldr	r3, [sp, #16]
 800c1e4:	2b20      	cmp	r3, #32
 800c1e6:	d104      	bne.n	800c1f2 <__gethex+0x202>
 800c1e8:	9b05      	ldr	r3, [sp, #20]
 800c1ea:	c340      	stmia	r3!, {r6}
 800c1ec:	2600      	movs	r6, #0
 800c1ee:	9305      	str	r3, [sp, #20]
 800c1f0:	9604      	str	r6, [sp, #16]
 800c1f2:	7820      	ldrb	r0, [r4, #0]
 800c1f4:	f7ff fee6 	bl	800bfc4 <__hexdig_fun>
 800c1f8:	230f      	movs	r3, #15
 800c1fa:	4018      	ands	r0, r3
 800c1fc:	9b04      	ldr	r3, [sp, #16]
 800c1fe:	4098      	lsls	r0, r3
 800c200:	3304      	adds	r3, #4
 800c202:	4306      	orrs	r6, r0
 800c204:	9304      	str	r3, [sp, #16]
 800c206:	e7ac      	b.n	800c162 <__gethex+0x172>
 800c208:	9b00      	ldr	r3, [sp, #0]
 800c20a:	42a3      	cmp	r3, r4
 800c20c:	d8e9      	bhi.n	800c1e2 <__gethex+0x1f2>
 800c20e:	2201      	movs	r2, #1
 800c210:	0020      	movs	r0, r4
 800c212:	492b      	ldr	r1, [pc, #172]	@ (800c2c0 <__gethex+0x2d0>)
 800c214:	f7ff fe04 	bl	800be20 <strncmp>
 800c218:	2800      	cmp	r0, #0
 800c21a:	d1e2      	bne.n	800c1e2 <__gethex+0x1f2>
 800c21c:	e7a1      	b.n	800c162 <__gethex+0x172>
 800c21e:	0028      	movs	r0, r5
 800c220:	1eb1      	subs	r1, r6, #2
 800c222:	f7fe fd18 	bl	800ac56 <__any_on>
 800c226:	2800      	cmp	r0, #0
 800c228:	d0c4      	beq.n	800c1b4 <__gethex+0x1c4>
 800c22a:	2403      	movs	r4, #3
 800c22c:	e7c3      	b.n	800c1b6 <__gethex+0x1c6>
 800c22e:	9b00      	ldr	r3, [sp, #0]
 800c230:	2400      	movs	r4, #0
 800c232:	429e      	cmp	r6, r3
 800c234:	dac4      	bge.n	800c1c0 <__gethex+0x1d0>
 800c236:	1b9e      	subs	r6, r3, r6
 800c238:	0029      	movs	r1, r5
 800c23a:	0032      	movs	r2, r6
 800c23c:	9803      	ldr	r0, [sp, #12]
 800c23e:	f7fe fad1 	bl	800a7e4 <__lshift>
 800c242:	0003      	movs	r3, r0
 800c244:	3314      	adds	r3, #20
 800c246:	0005      	movs	r5, r0
 800c248:	1bbf      	subs	r7, r7, r6
 800c24a:	9302      	str	r3, [sp, #8]
 800c24c:	e7b8      	b.n	800c1c0 <__gethex+0x1d0>
 800c24e:	9b01      	ldr	r3, [sp, #4]
 800c250:	685e      	ldr	r6, [r3, #4]
 800c252:	42be      	cmp	r6, r7
 800c254:	dd6f      	ble.n	800c336 <__gethex+0x346>
 800c256:	9b00      	ldr	r3, [sp, #0]
 800c258:	1bf6      	subs	r6, r6, r7
 800c25a:	42b3      	cmp	r3, r6
 800c25c:	dc36      	bgt.n	800c2cc <__gethex+0x2dc>
 800c25e:	9b01      	ldr	r3, [sp, #4]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	2b02      	cmp	r3, #2
 800c264:	d024      	beq.n	800c2b0 <__gethex+0x2c0>
 800c266:	2b03      	cmp	r3, #3
 800c268:	d026      	beq.n	800c2b8 <__gethex+0x2c8>
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d117      	bne.n	800c29e <__gethex+0x2ae>
 800c26e:	9b00      	ldr	r3, [sp, #0]
 800c270:	42b3      	cmp	r3, r6
 800c272:	d114      	bne.n	800c29e <__gethex+0x2ae>
 800c274:	2b01      	cmp	r3, #1
 800c276:	d10b      	bne.n	800c290 <__gethex+0x2a0>
 800c278:	9b01      	ldr	r3, [sp, #4]
 800c27a:	9a07      	ldr	r2, [sp, #28]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	2662      	movs	r6, #98	@ 0x62
 800c280:	6013      	str	r3, [r2, #0]
 800c282:	2301      	movs	r3, #1
 800c284:	9a02      	ldr	r2, [sp, #8]
 800c286:	612b      	str	r3, [r5, #16]
 800c288:	6013      	str	r3, [r2, #0]
 800c28a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c28c:	601d      	str	r5, [r3, #0]
 800c28e:	e739      	b.n	800c104 <__gethex+0x114>
 800c290:	9900      	ldr	r1, [sp, #0]
 800c292:	0028      	movs	r0, r5
 800c294:	3901      	subs	r1, #1
 800c296:	f7fe fcde 	bl	800ac56 <__any_on>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d1ec      	bne.n	800c278 <__gethex+0x288>
 800c29e:	0029      	movs	r1, r5
 800c2a0:	9803      	ldr	r0, [sp, #12]
 800c2a2:	f7fe f875 	bl	800a390 <_Bfree>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2aa:	2650      	movs	r6, #80	@ 0x50
 800c2ac:	6013      	str	r3, [r2, #0]
 800c2ae:	e729      	b.n	800c104 <__gethex+0x114>
 800c2b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d1f3      	bne.n	800c29e <__gethex+0x2ae>
 800c2b6:	e7df      	b.n	800c278 <__gethex+0x288>
 800c2b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1dc      	bne.n	800c278 <__gethex+0x288>
 800c2be:	e7ee      	b.n	800c29e <__gethex+0x2ae>
 800c2c0:	0800dea8 	.word	0x0800dea8
 800c2c4:	0800dd41 	.word	0x0800dd41
 800c2c8:	0800e056 	.word	0x0800e056
 800c2cc:	1e77      	subs	r7, r6, #1
 800c2ce:	2c00      	cmp	r4, #0
 800c2d0:	d12f      	bne.n	800c332 <__gethex+0x342>
 800c2d2:	2f00      	cmp	r7, #0
 800c2d4:	d004      	beq.n	800c2e0 <__gethex+0x2f0>
 800c2d6:	0039      	movs	r1, r7
 800c2d8:	0028      	movs	r0, r5
 800c2da:	f7fe fcbc 	bl	800ac56 <__any_on>
 800c2de:	0004      	movs	r4, r0
 800c2e0:	231f      	movs	r3, #31
 800c2e2:	117a      	asrs	r2, r7, #5
 800c2e4:	401f      	ands	r7, r3
 800c2e6:	3b1e      	subs	r3, #30
 800c2e8:	40bb      	lsls	r3, r7
 800c2ea:	9902      	ldr	r1, [sp, #8]
 800c2ec:	0092      	lsls	r2, r2, #2
 800c2ee:	5852      	ldr	r2, [r2, r1]
 800c2f0:	421a      	tst	r2, r3
 800c2f2:	d001      	beq.n	800c2f8 <__gethex+0x308>
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	431c      	orrs	r4, r3
 800c2f8:	9b00      	ldr	r3, [sp, #0]
 800c2fa:	0031      	movs	r1, r6
 800c2fc:	1b9b      	subs	r3, r3, r6
 800c2fe:	2602      	movs	r6, #2
 800c300:	0028      	movs	r0, r5
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	f7ff fe0b 	bl	800bf1e <rshift>
 800c308:	9b01      	ldr	r3, [sp, #4]
 800c30a:	685f      	ldr	r7, [r3, #4]
 800c30c:	2c00      	cmp	r4, #0
 800c30e:	d03f      	beq.n	800c390 <__gethex+0x3a0>
 800c310:	9b01      	ldr	r3, [sp, #4]
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	2b02      	cmp	r3, #2
 800c316:	d010      	beq.n	800c33a <__gethex+0x34a>
 800c318:	2b03      	cmp	r3, #3
 800c31a:	d012      	beq.n	800c342 <__gethex+0x352>
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d106      	bne.n	800c32e <__gethex+0x33e>
 800c320:	07a2      	lsls	r2, r4, #30
 800c322:	d504      	bpl.n	800c32e <__gethex+0x33e>
 800c324:	9a02      	ldr	r2, [sp, #8]
 800c326:	6812      	ldr	r2, [r2, #0]
 800c328:	4314      	orrs	r4, r2
 800c32a:	421c      	tst	r4, r3
 800c32c:	d10c      	bne.n	800c348 <__gethex+0x358>
 800c32e:	2310      	movs	r3, #16
 800c330:	e02d      	b.n	800c38e <__gethex+0x39e>
 800c332:	2401      	movs	r4, #1
 800c334:	e7d4      	b.n	800c2e0 <__gethex+0x2f0>
 800c336:	2601      	movs	r6, #1
 800c338:	e7e8      	b.n	800c30c <__gethex+0x31c>
 800c33a:	2301      	movs	r3, #1
 800c33c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c33e:	1a9b      	subs	r3, r3, r2
 800c340:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c342:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c344:	2b00      	cmp	r3, #0
 800c346:	d0f2      	beq.n	800c32e <__gethex+0x33e>
 800c348:	692b      	ldr	r3, [r5, #16]
 800c34a:	2000      	movs	r0, #0
 800c34c:	9302      	str	r3, [sp, #8]
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	9304      	str	r3, [sp, #16]
 800c352:	002b      	movs	r3, r5
 800c354:	9a04      	ldr	r2, [sp, #16]
 800c356:	3314      	adds	r3, #20
 800c358:	1899      	adds	r1, r3, r2
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	1c54      	adds	r4, r2, #1
 800c35e:	d01c      	beq.n	800c39a <__gethex+0x3aa>
 800c360:	3201      	adds	r2, #1
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	002b      	movs	r3, r5
 800c366:	3314      	adds	r3, #20
 800c368:	2e02      	cmp	r6, #2
 800c36a:	d13f      	bne.n	800c3ec <__gethex+0x3fc>
 800c36c:	9a01      	ldr	r2, [sp, #4]
 800c36e:	9900      	ldr	r1, [sp, #0]
 800c370:	6812      	ldr	r2, [r2, #0]
 800c372:	3a01      	subs	r2, #1
 800c374:	428a      	cmp	r2, r1
 800c376:	d109      	bne.n	800c38c <__gethex+0x39c>
 800c378:	000a      	movs	r2, r1
 800c37a:	201f      	movs	r0, #31
 800c37c:	4010      	ands	r0, r2
 800c37e:	2201      	movs	r2, #1
 800c380:	4082      	lsls	r2, r0
 800c382:	1149      	asrs	r1, r1, #5
 800c384:	0089      	lsls	r1, r1, #2
 800c386:	58cb      	ldr	r3, [r1, r3]
 800c388:	4213      	tst	r3, r2
 800c38a:	d13d      	bne.n	800c408 <__gethex+0x418>
 800c38c:	2320      	movs	r3, #32
 800c38e:	431e      	orrs	r6, r3
 800c390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c392:	601d      	str	r5, [r3, #0]
 800c394:	9b07      	ldr	r3, [sp, #28]
 800c396:	601f      	str	r7, [r3, #0]
 800c398:	e6b4      	b.n	800c104 <__gethex+0x114>
 800c39a:	c301      	stmia	r3!, {r0}
 800c39c:	4299      	cmp	r1, r3
 800c39e:	d8dc      	bhi.n	800c35a <__gethex+0x36a>
 800c3a0:	68ab      	ldr	r3, [r5, #8]
 800c3a2:	9a02      	ldr	r2, [sp, #8]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	db18      	blt.n	800c3da <__gethex+0x3ea>
 800c3a8:	6869      	ldr	r1, [r5, #4]
 800c3aa:	9803      	ldr	r0, [sp, #12]
 800c3ac:	3101      	adds	r1, #1
 800c3ae:	f7fd ffab 	bl	800a308 <_Balloc>
 800c3b2:	1e04      	subs	r4, r0, #0
 800c3b4:	d104      	bne.n	800c3c0 <__gethex+0x3d0>
 800c3b6:	0022      	movs	r2, r4
 800c3b8:	2184      	movs	r1, #132	@ 0x84
 800c3ba:	4b1d      	ldr	r3, [pc, #116]	@ (800c430 <__gethex+0x440>)
 800c3bc:	481d      	ldr	r0, [pc, #116]	@ (800c434 <__gethex+0x444>)
 800c3be:	e6c4      	b.n	800c14a <__gethex+0x15a>
 800c3c0:	0029      	movs	r1, r5
 800c3c2:	692a      	ldr	r2, [r5, #16]
 800c3c4:	310c      	adds	r1, #12
 800c3c6:	3202      	adds	r2, #2
 800c3c8:	0092      	lsls	r2, r2, #2
 800c3ca:	300c      	adds	r0, #12
 800c3cc:	f7ff fd4c 	bl	800be68 <memcpy>
 800c3d0:	0029      	movs	r1, r5
 800c3d2:	9803      	ldr	r0, [sp, #12]
 800c3d4:	f7fd ffdc 	bl	800a390 <_Bfree>
 800c3d8:	0025      	movs	r5, r4
 800c3da:	692b      	ldr	r3, [r5, #16]
 800c3dc:	1c5a      	adds	r2, r3, #1
 800c3de:	612a      	str	r2, [r5, #16]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	18eb      	adds	r3, r5, r3
 800c3e8:	605a      	str	r2, [r3, #4]
 800c3ea:	e7bb      	b.n	800c364 <__gethex+0x374>
 800c3ec:	692a      	ldr	r2, [r5, #16]
 800c3ee:	9902      	ldr	r1, [sp, #8]
 800c3f0:	428a      	cmp	r2, r1
 800c3f2:	dd0b      	ble.n	800c40c <__gethex+0x41c>
 800c3f4:	2101      	movs	r1, #1
 800c3f6:	0028      	movs	r0, r5
 800c3f8:	f7ff fd91 	bl	800bf1e <rshift>
 800c3fc:	9b01      	ldr	r3, [sp, #4]
 800c3fe:	3701      	adds	r7, #1
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	42bb      	cmp	r3, r7
 800c404:	da00      	bge.n	800c408 <__gethex+0x418>
 800c406:	e6df      	b.n	800c1c8 <__gethex+0x1d8>
 800c408:	2601      	movs	r6, #1
 800c40a:	e7bf      	b.n	800c38c <__gethex+0x39c>
 800c40c:	221f      	movs	r2, #31
 800c40e:	9c00      	ldr	r4, [sp, #0]
 800c410:	9900      	ldr	r1, [sp, #0]
 800c412:	4014      	ands	r4, r2
 800c414:	4211      	tst	r1, r2
 800c416:	d0f7      	beq.n	800c408 <__gethex+0x418>
 800c418:	9a04      	ldr	r2, [sp, #16]
 800c41a:	189b      	adds	r3, r3, r2
 800c41c:	3b04      	subs	r3, #4
 800c41e:	6818      	ldr	r0, [r3, #0]
 800c420:	f7fe f86a 	bl	800a4f8 <__hi0bits>
 800c424:	2320      	movs	r3, #32
 800c426:	1b1b      	subs	r3, r3, r4
 800c428:	4298      	cmp	r0, r3
 800c42a:	dbe3      	blt.n	800c3f4 <__gethex+0x404>
 800c42c:	e7ec      	b.n	800c408 <__gethex+0x418>
 800c42e:	46c0      	nop			@ (mov r8, r8)
 800c430:	0800dd41 	.word	0x0800dd41
 800c434:	0800e056 	.word	0x0800e056

0800c438 <L_shift>:
 800c438:	2308      	movs	r3, #8
 800c43a:	b570      	push	{r4, r5, r6, lr}
 800c43c:	2520      	movs	r5, #32
 800c43e:	1a9a      	subs	r2, r3, r2
 800c440:	0092      	lsls	r2, r2, #2
 800c442:	1aad      	subs	r5, r5, r2
 800c444:	6843      	ldr	r3, [r0, #4]
 800c446:	6804      	ldr	r4, [r0, #0]
 800c448:	001e      	movs	r6, r3
 800c44a:	40ae      	lsls	r6, r5
 800c44c:	40d3      	lsrs	r3, r2
 800c44e:	4334      	orrs	r4, r6
 800c450:	6004      	str	r4, [r0, #0]
 800c452:	6043      	str	r3, [r0, #4]
 800c454:	3004      	adds	r0, #4
 800c456:	4288      	cmp	r0, r1
 800c458:	d3f4      	bcc.n	800c444 <L_shift+0xc>
 800c45a:	bd70      	pop	{r4, r5, r6, pc}

0800c45c <__match>:
 800c45c:	b530      	push	{r4, r5, lr}
 800c45e:	6803      	ldr	r3, [r0, #0]
 800c460:	780c      	ldrb	r4, [r1, #0]
 800c462:	3301      	adds	r3, #1
 800c464:	2c00      	cmp	r4, #0
 800c466:	d102      	bne.n	800c46e <__match+0x12>
 800c468:	6003      	str	r3, [r0, #0]
 800c46a:	2001      	movs	r0, #1
 800c46c:	bd30      	pop	{r4, r5, pc}
 800c46e:	781a      	ldrb	r2, [r3, #0]
 800c470:	0015      	movs	r5, r2
 800c472:	3d41      	subs	r5, #65	@ 0x41
 800c474:	2d19      	cmp	r5, #25
 800c476:	d800      	bhi.n	800c47a <__match+0x1e>
 800c478:	3220      	adds	r2, #32
 800c47a:	3101      	adds	r1, #1
 800c47c:	42a2      	cmp	r2, r4
 800c47e:	d0ef      	beq.n	800c460 <__match+0x4>
 800c480:	2000      	movs	r0, #0
 800c482:	e7f3      	b.n	800c46c <__match+0x10>

0800c484 <__hexnan>:
 800c484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c486:	680b      	ldr	r3, [r1, #0]
 800c488:	b08b      	sub	sp, #44	@ 0x2c
 800c48a:	9201      	str	r2, [sp, #4]
 800c48c:	9901      	ldr	r1, [sp, #4]
 800c48e:	115a      	asrs	r2, r3, #5
 800c490:	0092      	lsls	r2, r2, #2
 800c492:	188a      	adds	r2, r1, r2
 800c494:	9202      	str	r2, [sp, #8]
 800c496:	0019      	movs	r1, r3
 800c498:	221f      	movs	r2, #31
 800c49a:	4011      	ands	r1, r2
 800c49c:	9008      	str	r0, [sp, #32]
 800c49e:	9106      	str	r1, [sp, #24]
 800c4a0:	4213      	tst	r3, r2
 800c4a2:	d002      	beq.n	800c4aa <__hexnan+0x26>
 800c4a4:	9b02      	ldr	r3, [sp, #8]
 800c4a6:	3304      	adds	r3, #4
 800c4a8:	9302      	str	r3, [sp, #8]
 800c4aa:	9b02      	ldr	r3, [sp, #8]
 800c4ac:	2500      	movs	r5, #0
 800c4ae:	1f1f      	subs	r7, r3, #4
 800c4b0:	003e      	movs	r6, r7
 800c4b2:	003c      	movs	r4, r7
 800c4b4:	9b08      	ldr	r3, [sp, #32]
 800c4b6:	603d      	str	r5, [r7, #0]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	9507      	str	r5, [sp, #28]
 800c4bc:	9305      	str	r3, [sp, #20]
 800c4be:	9503      	str	r5, [sp, #12]
 800c4c0:	9b05      	ldr	r3, [sp, #20]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4c6:	9b05      	ldr	r3, [sp, #20]
 800c4c8:	785b      	ldrb	r3, [r3, #1]
 800c4ca:	9304      	str	r3, [sp, #16]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d028      	beq.n	800c522 <__hexnan+0x9e>
 800c4d0:	9804      	ldr	r0, [sp, #16]
 800c4d2:	f7ff fd77 	bl	800bfc4 <__hexdig_fun>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d155      	bne.n	800c586 <__hexnan+0x102>
 800c4da:	9b04      	ldr	r3, [sp, #16]
 800c4dc:	2b20      	cmp	r3, #32
 800c4de:	d819      	bhi.n	800c514 <__hexnan+0x90>
 800c4e0:	9b03      	ldr	r3, [sp, #12]
 800c4e2:	9a07      	ldr	r2, [sp, #28]
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	dd12      	ble.n	800c50e <__hexnan+0x8a>
 800c4e8:	42b4      	cmp	r4, r6
 800c4ea:	d206      	bcs.n	800c4fa <__hexnan+0x76>
 800c4ec:	2d07      	cmp	r5, #7
 800c4ee:	dc04      	bgt.n	800c4fa <__hexnan+0x76>
 800c4f0:	002a      	movs	r2, r5
 800c4f2:	0031      	movs	r1, r6
 800c4f4:	0020      	movs	r0, r4
 800c4f6:	f7ff ff9f 	bl	800c438 <L_shift>
 800c4fa:	9b01      	ldr	r3, [sp, #4]
 800c4fc:	2508      	movs	r5, #8
 800c4fe:	429c      	cmp	r4, r3
 800c500:	d905      	bls.n	800c50e <__hexnan+0x8a>
 800c502:	1f26      	subs	r6, r4, #4
 800c504:	2500      	movs	r5, #0
 800c506:	0034      	movs	r4, r6
 800c508:	9b03      	ldr	r3, [sp, #12]
 800c50a:	6035      	str	r5, [r6, #0]
 800c50c:	9307      	str	r3, [sp, #28]
 800c50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c510:	9305      	str	r3, [sp, #20]
 800c512:	e7d5      	b.n	800c4c0 <__hexnan+0x3c>
 800c514:	9b04      	ldr	r3, [sp, #16]
 800c516:	2b29      	cmp	r3, #41	@ 0x29
 800c518:	d15a      	bne.n	800c5d0 <__hexnan+0x14c>
 800c51a:	9b05      	ldr	r3, [sp, #20]
 800c51c:	9a08      	ldr	r2, [sp, #32]
 800c51e:	3302      	adds	r3, #2
 800c520:	6013      	str	r3, [r2, #0]
 800c522:	9b03      	ldr	r3, [sp, #12]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d053      	beq.n	800c5d0 <__hexnan+0x14c>
 800c528:	42b4      	cmp	r4, r6
 800c52a:	d206      	bcs.n	800c53a <__hexnan+0xb6>
 800c52c:	2d07      	cmp	r5, #7
 800c52e:	dc04      	bgt.n	800c53a <__hexnan+0xb6>
 800c530:	002a      	movs	r2, r5
 800c532:	0031      	movs	r1, r6
 800c534:	0020      	movs	r0, r4
 800c536:	f7ff ff7f 	bl	800c438 <L_shift>
 800c53a:	9b01      	ldr	r3, [sp, #4]
 800c53c:	429c      	cmp	r4, r3
 800c53e:	d936      	bls.n	800c5ae <__hexnan+0x12a>
 800c540:	001a      	movs	r2, r3
 800c542:	0023      	movs	r3, r4
 800c544:	cb02      	ldmia	r3!, {r1}
 800c546:	c202      	stmia	r2!, {r1}
 800c548:	429f      	cmp	r7, r3
 800c54a:	d2fb      	bcs.n	800c544 <__hexnan+0xc0>
 800c54c:	9b02      	ldr	r3, [sp, #8]
 800c54e:	1c61      	adds	r1, r4, #1
 800c550:	1eda      	subs	r2, r3, #3
 800c552:	2304      	movs	r3, #4
 800c554:	4291      	cmp	r1, r2
 800c556:	d805      	bhi.n	800c564 <__hexnan+0xe0>
 800c558:	9b02      	ldr	r3, [sp, #8]
 800c55a:	3b04      	subs	r3, #4
 800c55c:	1b1b      	subs	r3, r3, r4
 800c55e:	089b      	lsrs	r3, r3, #2
 800c560:	3301      	adds	r3, #1
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	9a01      	ldr	r2, [sp, #4]
 800c566:	18d3      	adds	r3, r2, r3
 800c568:	2200      	movs	r2, #0
 800c56a:	c304      	stmia	r3!, {r2}
 800c56c:	429f      	cmp	r7, r3
 800c56e:	d2fc      	bcs.n	800c56a <__hexnan+0xe6>
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d104      	bne.n	800c580 <__hexnan+0xfc>
 800c576:	9b01      	ldr	r3, [sp, #4]
 800c578:	429f      	cmp	r7, r3
 800c57a:	d127      	bne.n	800c5cc <__hexnan+0x148>
 800c57c:	2301      	movs	r3, #1
 800c57e:	603b      	str	r3, [r7, #0]
 800c580:	2005      	movs	r0, #5
 800c582:	b00b      	add	sp, #44	@ 0x2c
 800c584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	3501      	adds	r5, #1
 800c58a:	3301      	adds	r3, #1
 800c58c:	9303      	str	r3, [sp, #12]
 800c58e:	2d08      	cmp	r5, #8
 800c590:	dd06      	ble.n	800c5a0 <__hexnan+0x11c>
 800c592:	9b01      	ldr	r3, [sp, #4]
 800c594:	429c      	cmp	r4, r3
 800c596:	d9ba      	bls.n	800c50e <__hexnan+0x8a>
 800c598:	2300      	movs	r3, #0
 800c59a:	2501      	movs	r5, #1
 800c59c:	3c04      	subs	r4, #4
 800c59e:	6023      	str	r3, [r4, #0]
 800c5a0:	220f      	movs	r2, #15
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	4010      	ands	r0, r2
 800c5a6:	011b      	lsls	r3, r3, #4
 800c5a8:	4303      	orrs	r3, r0
 800c5aa:	6023      	str	r3, [r4, #0]
 800c5ac:	e7af      	b.n	800c50e <__hexnan+0x8a>
 800c5ae:	9b06      	ldr	r3, [sp, #24]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d0dd      	beq.n	800c570 <__hexnan+0xec>
 800c5b4:	2320      	movs	r3, #32
 800c5b6:	9a06      	ldr	r2, [sp, #24]
 800c5b8:	9902      	ldr	r1, [sp, #8]
 800c5ba:	1a9b      	subs	r3, r3, r2
 800c5bc:	2201      	movs	r2, #1
 800c5be:	4252      	negs	r2, r2
 800c5c0:	40da      	lsrs	r2, r3
 800c5c2:	3904      	subs	r1, #4
 800c5c4:	680b      	ldr	r3, [r1, #0]
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	600b      	str	r3, [r1, #0]
 800c5ca:	e7d1      	b.n	800c570 <__hexnan+0xec>
 800c5cc:	3f04      	subs	r7, #4
 800c5ce:	e7cf      	b.n	800c570 <__hexnan+0xec>
 800c5d0:	2004      	movs	r0, #4
 800c5d2:	e7d6      	b.n	800c582 <__hexnan+0xfe>

0800c5d4 <__ascii_mbtowc>:
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	2900      	cmp	r1, #0
 800c5d8:	d100      	bne.n	800c5dc <__ascii_mbtowc+0x8>
 800c5da:	a901      	add	r1, sp, #4
 800c5dc:	1e10      	subs	r0, r2, #0
 800c5de:	d006      	beq.n	800c5ee <__ascii_mbtowc+0x1a>
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d006      	beq.n	800c5f2 <__ascii_mbtowc+0x1e>
 800c5e4:	7813      	ldrb	r3, [r2, #0]
 800c5e6:	600b      	str	r3, [r1, #0]
 800c5e8:	7810      	ldrb	r0, [r2, #0]
 800c5ea:	1e43      	subs	r3, r0, #1
 800c5ec:	4198      	sbcs	r0, r3
 800c5ee:	b002      	add	sp, #8
 800c5f0:	4770      	bx	lr
 800c5f2:	2002      	movs	r0, #2
 800c5f4:	4240      	negs	r0, r0
 800c5f6:	e7fa      	b.n	800c5ee <__ascii_mbtowc+0x1a>

0800c5f8 <_realloc_r>:
 800c5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5fa:	0006      	movs	r6, r0
 800c5fc:	000c      	movs	r4, r1
 800c5fe:	0015      	movs	r5, r2
 800c600:	2900      	cmp	r1, #0
 800c602:	d105      	bne.n	800c610 <_realloc_r+0x18>
 800c604:	0011      	movs	r1, r2
 800c606:	f7fd fdef 	bl	800a1e8 <_malloc_r>
 800c60a:	0004      	movs	r4, r0
 800c60c:	0020      	movs	r0, r4
 800c60e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c610:	2a00      	cmp	r2, #0
 800c612:	d103      	bne.n	800c61c <_realloc_r+0x24>
 800c614:	f7fd fd72 	bl	800a0fc <_free_r>
 800c618:	2400      	movs	r4, #0
 800c61a:	e7f7      	b.n	800c60c <_realloc_r+0x14>
 800c61c:	f000 f83f 	bl	800c69e <_malloc_usable_size_r>
 800c620:	0007      	movs	r7, r0
 800c622:	4285      	cmp	r5, r0
 800c624:	d802      	bhi.n	800c62c <_realloc_r+0x34>
 800c626:	0843      	lsrs	r3, r0, #1
 800c628:	42ab      	cmp	r3, r5
 800c62a:	d3ef      	bcc.n	800c60c <_realloc_r+0x14>
 800c62c:	0029      	movs	r1, r5
 800c62e:	0030      	movs	r0, r6
 800c630:	f7fd fdda 	bl	800a1e8 <_malloc_r>
 800c634:	9001      	str	r0, [sp, #4]
 800c636:	2800      	cmp	r0, #0
 800c638:	d0ee      	beq.n	800c618 <_realloc_r+0x20>
 800c63a:	002a      	movs	r2, r5
 800c63c:	42bd      	cmp	r5, r7
 800c63e:	d900      	bls.n	800c642 <_realloc_r+0x4a>
 800c640:	003a      	movs	r2, r7
 800c642:	0021      	movs	r1, r4
 800c644:	9801      	ldr	r0, [sp, #4]
 800c646:	f7ff fc0f 	bl	800be68 <memcpy>
 800c64a:	0021      	movs	r1, r4
 800c64c:	0030      	movs	r0, r6
 800c64e:	f7fd fd55 	bl	800a0fc <_free_r>
 800c652:	9c01      	ldr	r4, [sp, #4]
 800c654:	e7da      	b.n	800c60c <_realloc_r+0x14>

0800c656 <__ascii_wctomb>:
 800c656:	0003      	movs	r3, r0
 800c658:	1e08      	subs	r0, r1, #0
 800c65a:	d005      	beq.n	800c668 <__ascii_wctomb+0x12>
 800c65c:	2aff      	cmp	r2, #255	@ 0xff
 800c65e:	d904      	bls.n	800c66a <__ascii_wctomb+0x14>
 800c660:	228a      	movs	r2, #138	@ 0x8a
 800c662:	2001      	movs	r0, #1
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	4240      	negs	r0, r0
 800c668:	4770      	bx	lr
 800c66a:	2001      	movs	r0, #1
 800c66c:	700a      	strb	r2, [r1, #0]
 800c66e:	e7fb      	b.n	800c668 <__ascii_wctomb+0x12>

0800c670 <fiprintf>:
 800c670:	b40e      	push	{r1, r2, r3}
 800c672:	b517      	push	{r0, r1, r2, r4, lr}
 800c674:	4c05      	ldr	r4, [pc, #20]	@ (800c68c <fiprintf+0x1c>)
 800c676:	ab05      	add	r3, sp, #20
 800c678:	cb04      	ldmia	r3!, {r2}
 800c67a:	0001      	movs	r1, r0
 800c67c:	6820      	ldr	r0, [r4, #0]
 800c67e:	9301      	str	r3, [sp, #4]
 800c680:	f000 f83c 	bl	800c6fc <_vfiprintf_r>
 800c684:	bc1e      	pop	{r1, r2, r3, r4}
 800c686:	bc08      	pop	{r3}
 800c688:	b003      	add	sp, #12
 800c68a:	4718      	bx	r3
 800c68c:	20000030 	.word	0x20000030

0800c690 <abort>:
 800c690:	2006      	movs	r0, #6
 800c692:	b510      	push	{r4, lr}
 800c694:	f000 fa18 	bl	800cac8 <raise>
 800c698:	2001      	movs	r0, #1
 800c69a:	f7f9 f960 	bl	800595e <_exit>

0800c69e <_malloc_usable_size_r>:
 800c69e:	1f0b      	subs	r3, r1, #4
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	1f18      	subs	r0, r3, #4
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	da01      	bge.n	800c6ac <_malloc_usable_size_r+0xe>
 800c6a8:	580b      	ldr	r3, [r1, r0]
 800c6aa:	18c0      	adds	r0, r0, r3
 800c6ac:	4770      	bx	lr

0800c6ae <__sfputc_r>:
 800c6ae:	6893      	ldr	r3, [r2, #8]
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	6093      	str	r3, [r2, #8]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	da04      	bge.n	800c6c4 <__sfputc_r+0x16>
 800c6ba:	6994      	ldr	r4, [r2, #24]
 800c6bc:	42a3      	cmp	r3, r4
 800c6be:	db07      	blt.n	800c6d0 <__sfputc_r+0x22>
 800c6c0:	290a      	cmp	r1, #10
 800c6c2:	d005      	beq.n	800c6d0 <__sfputc_r+0x22>
 800c6c4:	6813      	ldr	r3, [r2, #0]
 800c6c6:	1c58      	adds	r0, r3, #1
 800c6c8:	6010      	str	r0, [r2, #0]
 800c6ca:	7019      	strb	r1, [r3, #0]
 800c6cc:	0008      	movs	r0, r1
 800c6ce:	bd10      	pop	{r4, pc}
 800c6d0:	f000 f930 	bl	800c934 <__swbuf_r>
 800c6d4:	0001      	movs	r1, r0
 800c6d6:	e7f9      	b.n	800c6cc <__sfputc_r+0x1e>

0800c6d8 <__sfputs_r>:
 800c6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6da:	0006      	movs	r6, r0
 800c6dc:	000f      	movs	r7, r1
 800c6de:	0014      	movs	r4, r2
 800c6e0:	18d5      	adds	r5, r2, r3
 800c6e2:	42ac      	cmp	r4, r5
 800c6e4:	d101      	bne.n	800c6ea <__sfputs_r+0x12>
 800c6e6:	2000      	movs	r0, #0
 800c6e8:	e007      	b.n	800c6fa <__sfputs_r+0x22>
 800c6ea:	7821      	ldrb	r1, [r4, #0]
 800c6ec:	003a      	movs	r2, r7
 800c6ee:	0030      	movs	r0, r6
 800c6f0:	f7ff ffdd 	bl	800c6ae <__sfputc_r>
 800c6f4:	3401      	adds	r4, #1
 800c6f6:	1c43      	adds	r3, r0, #1
 800c6f8:	d1f3      	bne.n	800c6e2 <__sfputs_r+0xa>
 800c6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6fc <_vfiprintf_r>:
 800c6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6fe:	b0a1      	sub	sp, #132	@ 0x84
 800c700:	000f      	movs	r7, r1
 800c702:	0015      	movs	r5, r2
 800c704:	001e      	movs	r6, r3
 800c706:	9003      	str	r0, [sp, #12]
 800c708:	2800      	cmp	r0, #0
 800c70a:	d004      	beq.n	800c716 <_vfiprintf_r+0x1a>
 800c70c:	6a03      	ldr	r3, [r0, #32]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <_vfiprintf_r+0x1a>
 800c712:	f7fc fd3b 	bl	800918c <__sinit>
 800c716:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c718:	07db      	lsls	r3, r3, #31
 800c71a:	d405      	bmi.n	800c728 <_vfiprintf_r+0x2c>
 800c71c:	89bb      	ldrh	r3, [r7, #12]
 800c71e:	059b      	lsls	r3, r3, #22
 800c720:	d402      	bmi.n	800c728 <_vfiprintf_r+0x2c>
 800c722:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c724:	f7fc fe57 	bl	80093d6 <__retarget_lock_acquire_recursive>
 800c728:	89bb      	ldrh	r3, [r7, #12]
 800c72a:	071b      	lsls	r3, r3, #28
 800c72c:	d502      	bpl.n	800c734 <_vfiprintf_r+0x38>
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d113      	bne.n	800c75c <_vfiprintf_r+0x60>
 800c734:	0039      	movs	r1, r7
 800c736:	9803      	ldr	r0, [sp, #12]
 800c738:	f000 f93e 	bl	800c9b8 <__swsetup_r>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d00d      	beq.n	800c75c <_vfiprintf_r+0x60>
 800c740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c742:	07db      	lsls	r3, r3, #31
 800c744:	d503      	bpl.n	800c74e <_vfiprintf_r+0x52>
 800c746:	2001      	movs	r0, #1
 800c748:	4240      	negs	r0, r0
 800c74a:	b021      	add	sp, #132	@ 0x84
 800c74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c74e:	89bb      	ldrh	r3, [r7, #12]
 800c750:	059b      	lsls	r3, r3, #22
 800c752:	d4f8      	bmi.n	800c746 <_vfiprintf_r+0x4a>
 800c754:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c756:	f7fc fe3f 	bl	80093d8 <__retarget_lock_release_recursive>
 800c75a:	e7f4      	b.n	800c746 <_vfiprintf_r+0x4a>
 800c75c:	2300      	movs	r3, #0
 800c75e:	ac08      	add	r4, sp, #32
 800c760:	6163      	str	r3, [r4, #20]
 800c762:	3320      	adds	r3, #32
 800c764:	7663      	strb	r3, [r4, #25]
 800c766:	3310      	adds	r3, #16
 800c768:	76a3      	strb	r3, [r4, #26]
 800c76a:	9607      	str	r6, [sp, #28]
 800c76c:	002e      	movs	r6, r5
 800c76e:	7833      	ldrb	r3, [r6, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <_vfiprintf_r+0x7c>
 800c774:	2b25      	cmp	r3, #37	@ 0x25
 800c776:	d148      	bne.n	800c80a <_vfiprintf_r+0x10e>
 800c778:	1b73      	subs	r3, r6, r5
 800c77a:	9305      	str	r3, [sp, #20]
 800c77c:	42ae      	cmp	r6, r5
 800c77e:	d00b      	beq.n	800c798 <_vfiprintf_r+0x9c>
 800c780:	002a      	movs	r2, r5
 800c782:	0039      	movs	r1, r7
 800c784:	9803      	ldr	r0, [sp, #12]
 800c786:	f7ff ffa7 	bl	800c6d8 <__sfputs_r>
 800c78a:	3001      	adds	r0, #1
 800c78c:	d100      	bne.n	800c790 <_vfiprintf_r+0x94>
 800c78e:	e0ae      	b.n	800c8ee <_vfiprintf_r+0x1f2>
 800c790:	6963      	ldr	r3, [r4, #20]
 800c792:	9a05      	ldr	r2, [sp, #20]
 800c794:	189b      	adds	r3, r3, r2
 800c796:	6163      	str	r3, [r4, #20]
 800c798:	7833      	ldrb	r3, [r6, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d100      	bne.n	800c7a0 <_vfiprintf_r+0xa4>
 800c79e:	e0a6      	b.n	800c8ee <_vfiprintf_r+0x1f2>
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	4252      	negs	r2, r2
 800c7a6:	6062      	str	r2, [r4, #4]
 800c7a8:	a904      	add	r1, sp, #16
 800c7aa:	3254      	adds	r2, #84	@ 0x54
 800c7ac:	1852      	adds	r2, r2, r1
 800c7ae:	1c75      	adds	r5, r6, #1
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	60e3      	str	r3, [r4, #12]
 800c7b4:	60a3      	str	r3, [r4, #8]
 800c7b6:	7013      	strb	r3, [r2, #0]
 800c7b8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c7ba:	4b59      	ldr	r3, [pc, #356]	@ (800c920 <_vfiprintf_r+0x224>)
 800c7bc:	2205      	movs	r2, #5
 800c7be:	0018      	movs	r0, r3
 800c7c0:	7829      	ldrb	r1, [r5, #0]
 800c7c2:	9305      	str	r3, [sp, #20]
 800c7c4:	f7fc fe09 	bl	80093da <memchr>
 800c7c8:	1c6e      	adds	r6, r5, #1
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d11f      	bne.n	800c80e <_vfiprintf_r+0x112>
 800c7ce:	6822      	ldr	r2, [r4, #0]
 800c7d0:	06d3      	lsls	r3, r2, #27
 800c7d2:	d504      	bpl.n	800c7de <_vfiprintf_r+0xe2>
 800c7d4:	2353      	movs	r3, #83	@ 0x53
 800c7d6:	a904      	add	r1, sp, #16
 800c7d8:	185b      	adds	r3, r3, r1
 800c7da:	2120      	movs	r1, #32
 800c7dc:	7019      	strb	r1, [r3, #0]
 800c7de:	0713      	lsls	r3, r2, #28
 800c7e0:	d504      	bpl.n	800c7ec <_vfiprintf_r+0xf0>
 800c7e2:	2353      	movs	r3, #83	@ 0x53
 800c7e4:	a904      	add	r1, sp, #16
 800c7e6:	185b      	adds	r3, r3, r1
 800c7e8:	212b      	movs	r1, #43	@ 0x2b
 800c7ea:	7019      	strb	r1, [r3, #0]
 800c7ec:	782b      	ldrb	r3, [r5, #0]
 800c7ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7f0:	d016      	beq.n	800c820 <_vfiprintf_r+0x124>
 800c7f2:	002e      	movs	r6, r5
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	200a      	movs	r0, #10
 800c7f8:	68e3      	ldr	r3, [r4, #12]
 800c7fa:	7832      	ldrb	r2, [r6, #0]
 800c7fc:	1c75      	adds	r5, r6, #1
 800c7fe:	3a30      	subs	r2, #48	@ 0x30
 800c800:	2a09      	cmp	r2, #9
 800c802:	d950      	bls.n	800c8a6 <_vfiprintf_r+0x1aa>
 800c804:	2900      	cmp	r1, #0
 800c806:	d111      	bne.n	800c82c <_vfiprintf_r+0x130>
 800c808:	e017      	b.n	800c83a <_vfiprintf_r+0x13e>
 800c80a:	3601      	adds	r6, #1
 800c80c:	e7af      	b.n	800c76e <_vfiprintf_r+0x72>
 800c80e:	9b05      	ldr	r3, [sp, #20]
 800c810:	6822      	ldr	r2, [r4, #0]
 800c812:	1ac0      	subs	r0, r0, r3
 800c814:	2301      	movs	r3, #1
 800c816:	4083      	lsls	r3, r0
 800c818:	4313      	orrs	r3, r2
 800c81a:	0035      	movs	r5, r6
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	e7cc      	b.n	800c7ba <_vfiprintf_r+0xbe>
 800c820:	9b07      	ldr	r3, [sp, #28]
 800c822:	1d19      	adds	r1, r3, #4
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	9107      	str	r1, [sp, #28]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	db01      	blt.n	800c830 <_vfiprintf_r+0x134>
 800c82c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c82e:	e004      	b.n	800c83a <_vfiprintf_r+0x13e>
 800c830:	425b      	negs	r3, r3
 800c832:	60e3      	str	r3, [r4, #12]
 800c834:	2302      	movs	r3, #2
 800c836:	4313      	orrs	r3, r2
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	7833      	ldrb	r3, [r6, #0]
 800c83c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c83e:	d10c      	bne.n	800c85a <_vfiprintf_r+0x15e>
 800c840:	7873      	ldrb	r3, [r6, #1]
 800c842:	2b2a      	cmp	r3, #42	@ 0x2a
 800c844:	d134      	bne.n	800c8b0 <_vfiprintf_r+0x1b4>
 800c846:	9b07      	ldr	r3, [sp, #28]
 800c848:	3602      	adds	r6, #2
 800c84a:	1d1a      	adds	r2, r3, #4
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	9207      	str	r2, [sp, #28]
 800c850:	2b00      	cmp	r3, #0
 800c852:	da01      	bge.n	800c858 <_vfiprintf_r+0x15c>
 800c854:	2301      	movs	r3, #1
 800c856:	425b      	negs	r3, r3
 800c858:	9309      	str	r3, [sp, #36]	@ 0x24
 800c85a:	4d32      	ldr	r5, [pc, #200]	@ (800c924 <_vfiprintf_r+0x228>)
 800c85c:	2203      	movs	r2, #3
 800c85e:	0028      	movs	r0, r5
 800c860:	7831      	ldrb	r1, [r6, #0]
 800c862:	f7fc fdba 	bl	80093da <memchr>
 800c866:	2800      	cmp	r0, #0
 800c868:	d006      	beq.n	800c878 <_vfiprintf_r+0x17c>
 800c86a:	2340      	movs	r3, #64	@ 0x40
 800c86c:	1b40      	subs	r0, r0, r5
 800c86e:	4083      	lsls	r3, r0
 800c870:	6822      	ldr	r2, [r4, #0]
 800c872:	3601      	adds	r6, #1
 800c874:	4313      	orrs	r3, r2
 800c876:	6023      	str	r3, [r4, #0]
 800c878:	7831      	ldrb	r1, [r6, #0]
 800c87a:	2206      	movs	r2, #6
 800c87c:	482a      	ldr	r0, [pc, #168]	@ (800c928 <_vfiprintf_r+0x22c>)
 800c87e:	1c75      	adds	r5, r6, #1
 800c880:	7621      	strb	r1, [r4, #24]
 800c882:	f7fc fdaa 	bl	80093da <memchr>
 800c886:	2800      	cmp	r0, #0
 800c888:	d040      	beq.n	800c90c <_vfiprintf_r+0x210>
 800c88a:	4b28      	ldr	r3, [pc, #160]	@ (800c92c <_vfiprintf_r+0x230>)
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d122      	bne.n	800c8d6 <_vfiprintf_r+0x1da>
 800c890:	2207      	movs	r2, #7
 800c892:	9b07      	ldr	r3, [sp, #28]
 800c894:	3307      	adds	r3, #7
 800c896:	4393      	bics	r3, r2
 800c898:	3308      	adds	r3, #8
 800c89a:	9307      	str	r3, [sp, #28]
 800c89c:	6963      	ldr	r3, [r4, #20]
 800c89e:	9a04      	ldr	r2, [sp, #16]
 800c8a0:	189b      	adds	r3, r3, r2
 800c8a2:	6163      	str	r3, [r4, #20]
 800c8a4:	e762      	b.n	800c76c <_vfiprintf_r+0x70>
 800c8a6:	4343      	muls	r3, r0
 800c8a8:	002e      	movs	r6, r5
 800c8aa:	2101      	movs	r1, #1
 800c8ac:	189b      	adds	r3, r3, r2
 800c8ae:	e7a4      	b.n	800c7fa <_vfiprintf_r+0xfe>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	200a      	movs	r0, #10
 800c8b4:	0019      	movs	r1, r3
 800c8b6:	3601      	adds	r6, #1
 800c8b8:	6063      	str	r3, [r4, #4]
 800c8ba:	7832      	ldrb	r2, [r6, #0]
 800c8bc:	1c75      	adds	r5, r6, #1
 800c8be:	3a30      	subs	r2, #48	@ 0x30
 800c8c0:	2a09      	cmp	r2, #9
 800c8c2:	d903      	bls.n	800c8cc <_vfiprintf_r+0x1d0>
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d0c8      	beq.n	800c85a <_vfiprintf_r+0x15e>
 800c8c8:	9109      	str	r1, [sp, #36]	@ 0x24
 800c8ca:	e7c6      	b.n	800c85a <_vfiprintf_r+0x15e>
 800c8cc:	4341      	muls	r1, r0
 800c8ce:	002e      	movs	r6, r5
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	1889      	adds	r1, r1, r2
 800c8d4:	e7f1      	b.n	800c8ba <_vfiprintf_r+0x1be>
 800c8d6:	aa07      	add	r2, sp, #28
 800c8d8:	9200      	str	r2, [sp, #0]
 800c8da:	0021      	movs	r1, r4
 800c8dc:	003a      	movs	r2, r7
 800c8de:	4b14      	ldr	r3, [pc, #80]	@ (800c930 <_vfiprintf_r+0x234>)
 800c8e0:	9803      	ldr	r0, [sp, #12]
 800c8e2:	f7fb fdf9 	bl	80084d8 <_printf_float>
 800c8e6:	9004      	str	r0, [sp, #16]
 800c8e8:	9b04      	ldr	r3, [sp, #16]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	d1d6      	bne.n	800c89c <_vfiprintf_r+0x1a0>
 800c8ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8f0:	07db      	lsls	r3, r3, #31
 800c8f2:	d405      	bmi.n	800c900 <_vfiprintf_r+0x204>
 800c8f4:	89bb      	ldrh	r3, [r7, #12]
 800c8f6:	059b      	lsls	r3, r3, #22
 800c8f8:	d402      	bmi.n	800c900 <_vfiprintf_r+0x204>
 800c8fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c8fc:	f7fc fd6c 	bl	80093d8 <__retarget_lock_release_recursive>
 800c900:	89bb      	ldrh	r3, [r7, #12]
 800c902:	065b      	lsls	r3, r3, #25
 800c904:	d500      	bpl.n	800c908 <_vfiprintf_r+0x20c>
 800c906:	e71e      	b.n	800c746 <_vfiprintf_r+0x4a>
 800c908:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c90a:	e71e      	b.n	800c74a <_vfiprintf_r+0x4e>
 800c90c:	aa07      	add	r2, sp, #28
 800c90e:	9200      	str	r2, [sp, #0]
 800c910:	0021      	movs	r1, r4
 800c912:	003a      	movs	r2, r7
 800c914:	4b06      	ldr	r3, [pc, #24]	@ (800c930 <_vfiprintf_r+0x234>)
 800c916:	9803      	ldr	r0, [sp, #12]
 800c918:	f7fc f88c 	bl	8008a34 <_printf_i>
 800c91c:	e7e3      	b.n	800c8e6 <_vfiprintf_r+0x1ea>
 800c91e:	46c0      	nop			@ (mov r8, r8)
 800c920:	0800e001 	.word	0x0800e001
 800c924:	0800e007 	.word	0x0800e007
 800c928:	0800e00b 	.word	0x0800e00b
 800c92c:	080084d9 	.word	0x080084d9
 800c930:	0800c6d9 	.word	0x0800c6d9

0800c934 <__swbuf_r>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	0006      	movs	r6, r0
 800c938:	000d      	movs	r5, r1
 800c93a:	0014      	movs	r4, r2
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d004      	beq.n	800c94a <__swbuf_r+0x16>
 800c940:	6a03      	ldr	r3, [r0, #32]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d101      	bne.n	800c94a <__swbuf_r+0x16>
 800c946:	f7fc fc21 	bl	800918c <__sinit>
 800c94a:	69a3      	ldr	r3, [r4, #24]
 800c94c:	60a3      	str	r3, [r4, #8]
 800c94e:	89a3      	ldrh	r3, [r4, #12]
 800c950:	071b      	lsls	r3, r3, #28
 800c952:	d502      	bpl.n	800c95a <__swbuf_r+0x26>
 800c954:	6923      	ldr	r3, [r4, #16]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d109      	bne.n	800c96e <__swbuf_r+0x3a>
 800c95a:	0021      	movs	r1, r4
 800c95c:	0030      	movs	r0, r6
 800c95e:	f000 f82b 	bl	800c9b8 <__swsetup_r>
 800c962:	2800      	cmp	r0, #0
 800c964:	d003      	beq.n	800c96e <__swbuf_r+0x3a>
 800c966:	2501      	movs	r5, #1
 800c968:	426d      	negs	r5, r5
 800c96a:	0028      	movs	r0, r5
 800c96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c96e:	6923      	ldr	r3, [r4, #16]
 800c970:	6820      	ldr	r0, [r4, #0]
 800c972:	b2ef      	uxtb	r7, r5
 800c974:	1ac0      	subs	r0, r0, r3
 800c976:	6963      	ldr	r3, [r4, #20]
 800c978:	b2ed      	uxtb	r5, r5
 800c97a:	4283      	cmp	r3, r0
 800c97c:	dc05      	bgt.n	800c98a <__swbuf_r+0x56>
 800c97e:	0021      	movs	r1, r4
 800c980:	0030      	movs	r0, r6
 800c982:	f7ff fa0f 	bl	800bda4 <_fflush_r>
 800c986:	2800      	cmp	r0, #0
 800c988:	d1ed      	bne.n	800c966 <__swbuf_r+0x32>
 800c98a:	68a3      	ldr	r3, [r4, #8]
 800c98c:	3001      	adds	r0, #1
 800c98e:	3b01      	subs	r3, #1
 800c990:	60a3      	str	r3, [r4, #8]
 800c992:	6823      	ldr	r3, [r4, #0]
 800c994:	1c5a      	adds	r2, r3, #1
 800c996:	6022      	str	r2, [r4, #0]
 800c998:	701f      	strb	r7, [r3, #0]
 800c99a:	6963      	ldr	r3, [r4, #20]
 800c99c:	4283      	cmp	r3, r0
 800c99e:	d004      	beq.n	800c9aa <__swbuf_r+0x76>
 800c9a0:	89a3      	ldrh	r3, [r4, #12]
 800c9a2:	07db      	lsls	r3, r3, #31
 800c9a4:	d5e1      	bpl.n	800c96a <__swbuf_r+0x36>
 800c9a6:	2d0a      	cmp	r5, #10
 800c9a8:	d1df      	bne.n	800c96a <__swbuf_r+0x36>
 800c9aa:	0021      	movs	r1, r4
 800c9ac:	0030      	movs	r0, r6
 800c9ae:	f7ff f9f9 	bl	800bda4 <_fflush_r>
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	d0d9      	beq.n	800c96a <__swbuf_r+0x36>
 800c9b6:	e7d6      	b.n	800c966 <__swbuf_r+0x32>

0800c9b8 <__swsetup_r>:
 800c9b8:	4b2d      	ldr	r3, [pc, #180]	@ (800ca70 <__swsetup_r+0xb8>)
 800c9ba:	b570      	push	{r4, r5, r6, lr}
 800c9bc:	0005      	movs	r5, r0
 800c9be:	6818      	ldr	r0, [r3, #0]
 800c9c0:	000c      	movs	r4, r1
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d004      	beq.n	800c9d0 <__swsetup_r+0x18>
 800c9c6:	6a03      	ldr	r3, [r0, #32]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d101      	bne.n	800c9d0 <__swsetup_r+0x18>
 800c9cc:	f7fc fbde 	bl	800918c <__sinit>
 800c9d0:	230c      	movs	r3, #12
 800c9d2:	5ee2      	ldrsh	r2, [r4, r3]
 800c9d4:	0713      	lsls	r3, r2, #28
 800c9d6:	d423      	bmi.n	800ca20 <__swsetup_r+0x68>
 800c9d8:	06d3      	lsls	r3, r2, #27
 800c9da:	d407      	bmi.n	800c9ec <__swsetup_r+0x34>
 800c9dc:	2309      	movs	r3, #9
 800c9de:	602b      	str	r3, [r5, #0]
 800c9e0:	2340      	movs	r3, #64	@ 0x40
 800c9e2:	2001      	movs	r0, #1
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	81a3      	strh	r3, [r4, #12]
 800c9e8:	4240      	negs	r0, r0
 800c9ea:	e03a      	b.n	800ca62 <__swsetup_r+0xaa>
 800c9ec:	0752      	lsls	r2, r2, #29
 800c9ee:	d513      	bpl.n	800ca18 <__swsetup_r+0x60>
 800c9f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9f2:	2900      	cmp	r1, #0
 800c9f4:	d008      	beq.n	800ca08 <__swsetup_r+0x50>
 800c9f6:	0023      	movs	r3, r4
 800c9f8:	3344      	adds	r3, #68	@ 0x44
 800c9fa:	4299      	cmp	r1, r3
 800c9fc:	d002      	beq.n	800ca04 <__swsetup_r+0x4c>
 800c9fe:	0028      	movs	r0, r5
 800ca00:	f7fd fb7c 	bl	800a0fc <_free_r>
 800ca04:	2300      	movs	r3, #0
 800ca06:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca08:	2224      	movs	r2, #36	@ 0x24
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	4393      	bics	r3, r2
 800ca0e:	81a3      	strh	r3, [r4, #12]
 800ca10:	2300      	movs	r3, #0
 800ca12:	6063      	str	r3, [r4, #4]
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	6023      	str	r3, [r4, #0]
 800ca18:	2308      	movs	r3, #8
 800ca1a:	89a2      	ldrh	r2, [r4, #12]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	81a3      	strh	r3, [r4, #12]
 800ca20:	6923      	ldr	r3, [r4, #16]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10b      	bne.n	800ca3e <__swsetup_r+0x86>
 800ca26:	21a0      	movs	r1, #160	@ 0xa0
 800ca28:	2280      	movs	r2, #128	@ 0x80
 800ca2a:	89a3      	ldrh	r3, [r4, #12]
 800ca2c:	0089      	lsls	r1, r1, #2
 800ca2e:	0092      	lsls	r2, r2, #2
 800ca30:	400b      	ands	r3, r1
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d003      	beq.n	800ca3e <__swsetup_r+0x86>
 800ca36:	0021      	movs	r1, r4
 800ca38:	0028      	movs	r0, r5
 800ca3a:	f000 f88f 	bl	800cb5c <__smakebuf_r>
 800ca3e:	230c      	movs	r3, #12
 800ca40:	5ee2      	ldrsh	r2, [r4, r3]
 800ca42:	2101      	movs	r1, #1
 800ca44:	0013      	movs	r3, r2
 800ca46:	400b      	ands	r3, r1
 800ca48:	420a      	tst	r2, r1
 800ca4a:	d00b      	beq.n	800ca64 <__swsetup_r+0xac>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	60a3      	str	r3, [r4, #8]
 800ca50:	6963      	ldr	r3, [r4, #20]
 800ca52:	425b      	negs	r3, r3
 800ca54:	61a3      	str	r3, [r4, #24]
 800ca56:	2000      	movs	r0, #0
 800ca58:	6923      	ldr	r3, [r4, #16]
 800ca5a:	4283      	cmp	r3, r0
 800ca5c:	d101      	bne.n	800ca62 <__swsetup_r+0xaa>
 800ca5e:	0613      	lsls	r3, r2, #24
 800ca60:	d4be      	bmi.n	800c9e0 <__swsetup_r+0x28>
 800ca62:	bd70      	pop	{r4, r5, r6, pc}
 800ca64:	0791      	lsls	r1, r2, #30
 800ca66:	d400      	bmi.n	800ca6a <__swsetup_r+0xb2>
 800ca68:	6963      	ldr	r3, [r4, #20]
 800ca6a:	60a3      	str	r3, [r4, #8]
 800ca6c:	e7f3      	b.n	800ca56 <__swsetup_r+0x9e>
 800ca6e:	46c0      	nop			@ (mov r8, r8)
 800ca70:	20000030 	.word	0x20000030

0800ca74 <_raise_r>:
 800ca74:	b570      	push	{r4, r5, r6, lr}
 800ca76:	0004      	movs	r4, r0
 800ca78:	000d      	movs	r5, r1
 800ca7a:	291f      	cmp	r1, #31
 800ca7c:	d904      	bls.n	800ca88 <_raise_r+0x14>
 800ca7e:	2316      	movs	r3, #22
 800ca80:	6003      	str	r3, [r0, #0]
 800ca82:	2001      	movs	r0, #1
 800ca84:	4240      	negs	r0, r0
 800ca86:	bd70      	pop	{r4, r5, r6, pc}
 800ca88:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d004      	beq.n	800ca98 <_raise_r+0x24>
 800ca8e:	008a      	lsls	r2, r1, #2
 800ca90:	189b      	adds	r3, r3, r2
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	2a00      	cmp	r2, #0
 800ca96:	d108      	bne.n	800caaa <_raise_r+0x36>
 800ca98:	0020      	movs	r0, r4
 800ca9a:	f000 f831 	bl	800cb00 <_getpid_r>
 800ca9e:	002a      	movs	r2, r5
 800caa0:	0001      	movs	r1, r0
 800caa2:	0020      	movs	r0, r4
 800caa4:	f000 f81a 	bl	800cadc <_kill_r>
 800caa8:	e7ed      	b.n	800ca86 <_raise_r+0x12>
 800caaa:	2a01      	cmp	r2, #1
 800caac:	d009      	beq.n	800cac2 <_raise_r+0x4e>
 800caae:	1c51      	adds	r1, r2, #1
 800cab0:	d103      	bne.n	800caba <_raise_r+0x46>
 800cab2:	2316      	movs	r3, #22
 800cab4:	6003      	str	r3, [r0, #0]
 800cab6:	2001      	movs	r0, #1
 800cab8:	e7e5      	b.n	800ca86 <_raise_r+0x12>
 800caba:	2100      	movs	r1, #0
 800cabc:	0028      	movs	r0, r5
 800cabe:	6019      	str	r1, [r3, #0]
 800cac0:	4790      	blx	r2
 800cac2:	2000      	movs	r0, #0
 800cac4:	e7df      	b.n	800ca86 <_raise_r+0x12>
	...

0800cac8 <raise>:
 800cac8:	b510      	push	{r4, lr}
 800caca:	4b03      	ldr	r3, [pc, #12]	@ (800cad8 <raise+0x10>)
 800cacc:	0001      	movs	r1, r0
 800cace:	6818      	ldr	r0, [r3, #0]
 800cad0:	f7ff ffd0 	bl	800ca74 <_raise_r>
 800cad4:	bd10      	pop	{r4, pc}
 800cad6:	46c0      	nop			@ (mov r8, r8)
 800cad8:	20000030 	.word	0x20000030

0800cadc <_kill_r>:
 800cadc:	2300      	movs	r3, #0
 800cade:	b570      	push	{r4, r5, r6, lr}
 800cae0:	4d06      	ldr	r5, [pc, #24]	@ (800cafc <_kill_r+0x20>)
 800cae2:	0004      	movs	r4, r0
 800cae4:	0008      	movs	r0, r1
 800cae6:	0011      	movs	r1, r2
 800cae8:	602b      	str	r3, [r5, #0]
 800caea:	f7f8 ff28 	bl	800593e <_kill>
 800caee:	1c43      	adds	r3, r0, #1
 800caf0:	d103      	bne.n	800cafa <_kill_r+0x1e>
 800caf2:	682b      	ldr	r3, [r5, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d000      	beq.n	800cafa <_kill_r+0x1e>
 800caf8:	6023      	str	r3, [r4, #0]
 800cafa:	bd70      	pop	{r4, r5, r6, pc}
 800cafc:	20000494 	.word	0x20000494

0800cb00 <_getpid_r>:
 800cb00:	b510      	push	{r4, lr}
 800cb02:	f7f8 ff16 	bl	8005932 <_getpid>
 800cb06:	bd10      	pop	{r4, pc}

0800cb08 <__swhatbuf_r>:
 800cb08:	b570      	push	{r4, r5, r6, lr}
 800cb0a:	000e      	movs	r6, r1
 800cb0c:	001d      	movs	r5, r3
 800cb0e:	230e      	movs	r3, #14
 800cb10:	5ec9      	ldrsh	r1, [r1, r3]
 800cb12:	0014      	movs	r4, r2
 800cb14:	b096      	sub	sp, #88	@ 0x58
 800cb16:	2900      	cmp	r1, #0
 800cb18:	da0c      	bge.n	800cb34 <__swhatbuf_r+0x2c>
 800cb1a:	89b2      	ldrh	r2, [r6, #12]
 800cb1c:	2380      	movs	r3, #128	@ 0x80
 800cb1e:	0011      	movs	r1, r2
 800cb20:	4019      	ands	r1, r3
 800cb22:	421a      	tst	r2, r3
 800cb24:	d114      	bne.n	800cb50 <__swhatbuf_r+0x48>
 800cb26:	2380      	movs	r3, #128	@ 0x80
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	6029      	str	r1, [r5, #0]
 800cb2e:	6023      	str	r3, [r4, #0]
 800cb30:	b016      	add	sp, #88	@ 0x58
 800cb32:	bd70      	pop	{r4, r5, r6, pc}
 800cb34:	466a      	mov	r2, sp
 800cb36:	f000 f853 	bl	800cbe0 <_fstat_r>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	dbed      	blt.n	800cb1a <__swhatbuf_r+0x12>
 800cb3e:	23f0      	movs	r3, #240	@ 0xf0
 800cb40:	9901      	ldr	r1, [sp, #4]
 800cb42:	021b      	lsls	r3, r3, #8
 800cb44:	4019      	ands	r1, r3
 800cb46:	4b04      	ldr	r3, [pc, #16]	@ (800cb58 <__swhatbuf_r+0x50>)
 800cb48:	18c9      	adds	r1, r1, r3
 800cb4a:	424b      	negs	r3, r1
 800cb4c:	4159      	adcs	r1, r3
 800cb4e:	e7ea      	b.n	800cb26 <__swhatbuf_r+0x1e>
 800cb50:	2100      	movs	r1, #0
 800cb52:	2340      	movs	r3, #64	@ 0x40
 800cb54:	e7e9      	b.n	800cb2a <__swhatbuf_r+0x22>
 800cb56:	46c0      	nop			@ (mov r8, r8)
 800cb58:	ffffe000 	.word	0xffffe000

0800cb5c <__smakebuf_r>:
 800cb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb5e:	2602      	movs	r6, #2
 800cb60:	898b      	ldrh	r3, [r1, #12]
 800cb62:	0005      	movs	r5, r0
 800cb64:	000c      	movs	r4, r1
 800cb66:	b085      	sub	sp, #20
 800cb68:	4233      	tst	r3, r6
 800cb6a:	d007      	beq.n	800cb7c <__smakebuf_r+0x20>
 800cb6c:	0023      	movs	r3, r4
 800cb6e:	3347      	adds	r3, #71	@ 0x47
 800cb70:	6023      	str	r3, [r4, #0]
 800cb72:	6123      	str	r3, [r4, #16]
 800cb74:	2301      	movs	r3, #1
 800cb76:	6163      	str	r3, [r4, #20]
 800cb78:	b005      	add	sp, #20
 800cb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb7c:	ab03      	add	r3, sp, #12
 800cb7e:	aa02      	add	r2, sp, #8
 800cb80:	f7ff ffc2 	bl	800cb08 <__swhatbuf_r>
 800cb84:	9f02      	ldr	r7, [sp, #8]
 800cb86:	9001      	str	r0, [sp, #4]
 800cb88:	0039      	movs	r1, r7
 800cb8a:	0028      	movs	r0, r5
 800cb8c:	f7fd fb2c 	bl	800a1e8 <_malloc_r>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d108      	bne.n	800cba6 <__smakebuf_r+0x4a>
 800cb94:	220c      	movs	r2, #12
 800cb96:	5ea3      	ldrsh	r3, [r4, r2]
 800cb98:	059a      	lsls	r2, r3, #22
 800cb9a:	d4ed      	bmi.n	800cb78 <__smakebuf_r+0x1c>
 800cb9c:	2203      	movs	r2, #3
 800cb9e:	4393      	bics	r3, r2
 800cba0:	431e      	orrs	r6, r3
 800cba2:	81a6      	strh	r6, [r4, #12]
 800cba4:	e7e2      	b.n	800cb6c <__smakebuf_r+0x10>
 800cba6:	2380      	movs	r3, #128	@ 0x80
 800cba8:	89a2      	ldrh	r2, [r4, #12]
 800cbaa:	6020      	str	r0, [r4, #0]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	81a3      	strh	r3, [r4, #12]
 800cbb0:	9b03      	ldr	r3, [sp, #12]
 800cbb2:	6120      	str	r0, [r4, #16]
 800cbb4:	6167      	str	r7, [r4, #20]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00c      	beq.n	800cbd4 <__smakebuf_r+0x78>
 800cbba:	0028      	movs	r0, r5
 800cbbc:	230e      	movs	r3, #14
 800cbbe:	5ee1      	ldrsh	r1, [r4, r3]
 800cbc0:	f000 f820 	bl	800cc04 <_isatty_r>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d005      	beq.n	800cbd4 <__smakebuf_r+0x78>
 800cbc8:	2303      	movs	r3, #3
 800cbca:	89a2      	ldrh	r2, [r4, #12]
 800cbcc:	439a      	bics	r2, r3
 800cbce:	3b02      	subs	r3, #2
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	81a3      	strh	r3, [r4, #12]
 800cbd4:	89a3      	ldrh	r3, [r4, #12]
 800cbd6:	9a01      	ldr	r2, [sp, #4]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	81a3      	strh	r3, [r4, #12]
 800cbdc:	e7cc      	b.n	800cb78 <__smakebuf_r+0x1c>
	...

0800cbe0 <_fstat_r>:
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	b570      	push	{r4, r5, r6, lr}
 800cbe4:	4d06      	ldr	r5, [pc, #24]	@ (800cc00 <_fstat_r+0x20>)
 800cbe6:	0004      	movs	r4, r0
 800cbe8:	0008      	movs	r0, r1
 800cbea:	0011      	movs	r1, r2
 800cbec:	602b      	str	r3, [r5, #0]
 800cbee:	f7f8 ff06 	bl	80059fe <_fstat>
 800cbf2:	1c43      	adds	r3, r0, #1
 800cbf4:	d103      	bne.n	800cbfe <_fstat_r+0x1e>
 800cbf6:	682b      	ldr	r3, [r5, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d000      	beq.n	800cbfe <_fstat_r+0x1e>
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	bd70      	pop	{r4, r5, r6, pc}
 800cc00:	20000494 	.word	0x20000494

0800cc04 <_isatty_r>:
 800cc04:	2300      	movs	r3, #0
 800cc06:	b570      	push	{r4, r5, r6, lr}
 800cc08:	4d06      	ldr	r5, [pc, #24]	@ (800cc24 <_isatty_r+0x20>)
 800cc0a:	0004      	movs	r4, r0
 800cc0c:	0008      	movs	r0, r1
 800cc0e:	602b      	str	r3, [r5, #0]
 800cc10:	f7f8 ff03 	bl	8005a1a <_isatty>
 800cc14:	1c43      	adds	r3, r0, #1
 800cc16:	d103      	bne.n	800cc20 <_isatty_r+0x1c>
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d000      	beq.n	800cc20 <_isatty_r+0x1c>
 800cc1e:	6023      	str	r3, [r4, #0]
 800cc20:	bd70      	pop	{r4, r5, r6, pc}
 800cc22:	46c0      	nop			@ (mov r8, r8)
 800cc24:	20000494 	.word	0x20000494

0800cc28 <pow>:
 800cc28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc2a:	0014      	movs	r4, r2
 800cc2c:	001d      	movs	r5, r3
 800cc2e:	9000      	str	r0, [sp, #0]
 800cc30:	9101      	str	r1, [sp, #4]
 800cc32:	f000 f86f 	bl	800cd14 <__ieee754_pow>
 800cc36:	0022      	movs	r2, r4
 800cc38:	0006      	movs	r6, r0
 800cc3a:	000f      	movs	r7, r1
 800cc3c:	002b      	movs	r3, r5
 800cc3e:	0020      	movs	r0, r4
 800cc40:	0029      	movs	r1, r5
 800cc42:	f7f6 f93b 	bl	8002ebc <__aeabi_dcmpun>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	d13f      	bne.n	800ccca <pow+0xa2>
 800cc4a:	9800      	ldr	r0, [sp, #0]
 800cc4c:	9901      	ldr	r1, [sp, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	2300      	movs	r3, #0
 800cc52:	f7f3 fbfb 	bl	800044c <__aeabi_dcmpeq>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d019      	beq.n	800cc8e <pow+0x66>
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	0020      	movs	r0, r4
 800cc60:	0029      	movs	r1, r5
 800cc62:	f7f3 fbf3 	bl	800044c <__aeabi_dcmpeq>
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d146      	bne.n	800ccf8 <pow+0xd0>
 800cc6a:	0020      	movs	r0, r4
 800cc6c:	0029      	movs	r1, r5
 800cc6e:	f000 f849 	bl	800cd04 <finite>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d029      	beq.n	800ccca <pow+0xa2>
 800cc76:	2200      	movs	r2, #0
 800cc78:	2300      	movs	r3, #0
 800cc7a:	0020      	movs	r0, r4
 800cc7c:	0029      	movs	r1, r5
 800cc7e:	f7f3 fbeb 	bl	8000458 <__aeabi_dcmplt>
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d021      	beq.n	800ccca <pow+0xa2>
 800cc86:	f7fc fb7b 	bl	8009380 <__errno>
 800cc8a:	2322      	movs	r3, #34	@ 0x22
 800cc8c:	e01c      	b.n	800ccc8 <pow+0xa0>
 800cc8e:	0030      	movs	r0, r6
 800cc90:	0039      	movs	r1, r7
 800cc92:	f000 f837 	bl	800cd04 <finite>
 800cc96:	2800      	cmp	r0, #0
 800cc98:	d11b      	bne.n	800ccd2 <pow+0xaa>
 800cc9a:	9800      	ldr	r0, [sp, #0]
 800cc9c:	9901      	ldr	r1, [sp, #4]
 800cc9e:	f000 f831 	bl	800cd04 <finite>
 800cca2:	2800      	cmp	r0, #0
 800cca4:	d015      	beq.n	800ccd2 <pow+0xaa>
 800cca6:	0020      	movs	r0, r4
 800cca8:	0029      	movs	r1, r5
 800ccaa:	f000 f82b 	bl	800cd04 <finite>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d00f      	beq.n	800ccd2 <pow+0xaa>
 800ccb2:	0032      	movs	r2, r6
 800ccb4:	003b      	movs	r3, r7
 800ccb6:	0030      	movs	r0, r6
 800ccb8:	0039      	movs	r1, r7
 800ccba:	f7f6 f8ff 	bl	8002ebc <__aeabi_dcmpun>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d0e1      	beq.n	800cc86 <pow+0x5e>
 800ccc2:	f7fc fb5d 	bl	8009380 <__errno>
 800ccc6:	2321      	movs	r3, #33	@ 0x21
 800ccc8:	6003      	str	r3, [r0, #0]
 800ccca:	0030      	movs	r0, r6
 800cccc:	0039      	movs	r1, r7
 800ccce:	b003      	add	sp, #12
 800ccd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	0030      	movs	r0, r6
 800ccd8:	0039      	movs	r1, r7
 800ccda:	f7f3 fbb7 	bl	800044c <__aeabi_dcmpeq>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d0f3      	beq.n	800ccca <pow+0xa2>
 800cce2:	9800      	ldr	r0, [sp, #0]
 800cce4:	9901      	ldr	r1, [sp, #4]
 800cce6:	f000 f80d 	bl	800cd04 <finite>
 800ccea:	2800      	cmp	r0, #0
 800ccec:	d0ed      	beq.n	800ccca <pow+0xa2>
 800ccee:	0020      	movs	r0, r4
 800ccf0:	0029      	movs	r1, r5
 800ccf2:	f000 f807 	bl	800cd04 <finite>
 800ccf6:	e7c4      	b.n	800cc82 <pow+0x5a>
 800ccf8:	2600      	movs	r6, #0
 800ccfa:	4f01      	ldr	r7, [pc, #4]	@ (800cd00 <pow+0xd8>)
 800ccfc:	e7e5      	b.n	800ccca <pow+0xa2>
 800ccfe:	46c0      	nop			@ (mov r8, r8)
 800cd00:	3ff00000 	.word	0x3ff00000

0800cd04 <finite>:
 800cd04:	4b02      	ldr	r3, [pc, #8]	@ (800cd10 <finite+0xc>)
 800cd06:	0048      	lsls	r0, r1, #1
 800cd08:	0840      	lsrs	r0, r0, #1
 800cd0a:	18c0      	adds	r0, r0, r3
 800cd0c:	0fc0      	lsrs	r0, r0, #31
 800cd0e:	4770      	bx	lr
 800cd10:	80100000 	.word	0x80100000

0800cd14 <__ieee754_pow>:
 800cd14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd16:	b095      	sub	sp, #84	@ 0x54
 800cd18:	9202      	str	r2, [sp, #8]
 800cd1a:	9303      	str	r3, [sp, #12]
 800cd1c:	9b03      	ldr	r3, [sp, #12]
 800cd1e:	9a03      	ldr	r2, [sp, #12]
 800cd20:	9306      	str	r3, [sp, #24]
 800cd22:	0052      	lsls	r2, r2, #1
 800cd24:	9b02      	ldr	r3, [sp, #8]
 800cd26:	0852      	lsrs	r2, r2, #1
 800cd28:	9204      	str	r2, [sp, #16]
 800cd2a:	001a      	movs	r2, r3
 800cd2c:	000f      	movs	r7, r1
 800cd2e:	9904      	ldr	r1, [sp, #16]
 800cd30:	0006      	movs	r6, r0
 800cd32:	430a      	orrs	r2, r1
 800cd34:	d119      	bne.n	800cd6a <__ieee754_pow+0x56>
 800cd36:	2180      	movs	r1, #128	@ 0x80
 800cd38:	0309      	lsls	r1, r1, #12
 800cd3a:	4079      	eors	r1, r7
 800cd3c:	0002      	movs	r2, r0
 800cd3e:	000b      	movs	r3, r1
 800cd40:	1892      	adds	r2, r2, r2
 800cd42:	415b      	adcs	r3, r3
 800cd44:	499b      	ldr	r1, [pc, #620]	@ (800cfb4 <__ieee754_pow+0x2a0>)
 800cd46:	428b      	cmp	r3, r1
 800cd48:	d806      	bhi.n	800cd58 <__ieee754_pow+0x44>
 800cd4a:	d001      	beq.n	800cd50 <__ieee754_pow+0x3c>
 800cd4c:	f000 fcde 	bl	800d70c <__ieee754_pow+0x9f8>
 800cd50:	2a00      	cmp	r2, #0
 800cd52:	d101      	bne.n	800cd58 <__ieee754_pow+0x44>
 800cd54:	f000 fcda 	bl	800d70c <__ieee754_pow+0x9f8>
 800cd58:	9a02      	ldr	r2, [sp, #8]
 800cd5a:	9b03      	ldr	r3, [sp, #12]
 800cd5c:	0030      	movs	r0, r6
 800cd5e:	0039      	movs	r1, r7
 800cd60:	f7f4 faa0 	bl	80012a4 <__aeabi_dadd>
 800cd64:	9000      	str	r0, [sp, #0]
 800cd66:	9101      	str	r1, [sp, #4]
 800cd68:	e0af      	b.n	800ceca <__ieee754_pow+0x1b6>
 800cd6a:	4a93      	ldr	r2, [pc, #588]	@ (800cfb8 <__ieee754_pow+0x2a4>)
 800cd6c:	007c      	lsls	r4, r7, #1
 800cd6e:	9708      	str	r7, [sp, #32]
 800cd70:	900e      	str	r0, [sp, #56]	@ 0x38
 800cd72:	0864      	lsrs	r4, r4, #1
 800cd74:	4294      	cmp	r4, r2
 800cd76:	d809      	bhi.n	800cd8c <__ieee754_pow+0x78>
 800cd78:	d101      	bne.n	800cd7e <__ieee754_pow+0x6a>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d1ec      	bne.n	800cd58 <__ieee754_pow+0x44>
 800cd7e:	9904      	ldr	r1, [sp, #16]
 800cd80:	4a8d      	ldr	r2, [pc, #564]	@ (800cfb8 <__ieee754_pow+0x2a4>)
 800cd82:	4291      	cmp	r1, r2
 800cd84:	d802      	bhi.n	800cd8c <__ieee754_pow+0x78>
 800cd86:	d10c      	bne.n	800cda2 <__ieee754_pow+0x8e>
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d00a      	beq.n	800cda2 <__ieee754_pow+0x8e>
 800cd8c:	4b8b      	ldr	r3, [pc, #556]	@ (800cfbc <__ieee754_pow+0x2a8>)
 800cd8e:	18fb      	adds	r3, r7, r3
 800cd90:	4333      	orrs	r3, r6
 800cd92:	d1e1      	bne.n	800cd58 <__ieee754_pow+0x44>
 800cd94:	2180      	movs	r1, #128	@ 0x80
 800cd96:	9803      	ldr	r0, [sp, #12]
 800cd98:	0309      	lsls	r1, r1, #12
 800cd9a:	4048      	eors	r0, r1
 800cd9c:	0003      	movs	r3, r0
 800cd9e:	9a02      	ldr	r2, [sp, #8]
 800cda0:	e7ce      	b.n	800cd40 <__ieee754_pow+0x2c>
 800cda2:	2500      	movs	r5, #0
 800cda4:	9a08      	ldr	r2, [sp, #32]
 800cda6:	940a      	str	r4, [sp, #40]	@ 0x28
 800cda8:	42aa      	cmp	r2, r5
 800cdaa:	da68      	bge.n	800ce7e <__ieee754_pow+0x16a>
 800cdac:	4a84      	ldr	r2, [pc, #528]	@ (800cfc0 <__ieee754_pow+0x2ac>)
 800cdae:	9904      	ldr	r1, [sp, #16]
 800cdb0:	4291      	cmp	r1, r2
 800cdb2:	d863      	bhi.n	800ce7c <__ieee754_pow+0x168>
 800cdb4:	4a83      	ldr	r2, [pc, #524]	@ (800cfc4 <__ieee754_pow+0x2b0>)
 800cdb6:	4291      	cmp	r1, r2
 800cdb8:	d910      	bls.n	800cddc <__ieee754_pow+0xc8>
 800cdba:	150a      	asrs	r2, r1, #20
 800cdbc:	4982      	ldr	r1, [pc, #520]	@ (800cfc8 <__ieee754_pow+0x2b4>)
 800cdbe:	1852      	adds	r2, r2, r1
 800cdc0:	2a14      	cmp	r2, #20
 800cdc2:	dd3b      	ble.n	800ce3c <__ieee754_pow+0x128>
 800cdc4:	2134      	movs	r1, #52	@ 0x34
 800cdc6:	1a89      	subs	r1, r1, r2
 800cdc8:	9a02      	ldr	r2, [sp, #8]
 800cdca:	40ca      	lsrs	r2, r1
 800cdcc:	0010      	movs	r0, r2
 800cdce:	4088      	lsls	r0, r1
 800cdd0:	4298      	cmp	r0, r3
 800cdd2:	d103      	bne.n	800cddc <__ieee754_pow+0xc8>
 800cdd4:	2101      	movs	r1, #1
 800cdd6:	3502      	adds	r5, #2
 800cdd8:	400a      	ands	r2, r1
 800cdda:	1aad      	subs	r5, r5, r2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d03d      	beq.n	800ce5c <__ieee754_pow+0x148>
 800cde0:	0030      	movs	r0, r6
 800cde2:	0039      	movs	r1, r7
 800cde4:	f000 fcc2 	bl	800d76c <fabs>
 800cde8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdea:	9000      	str	r0, [sp, #0]
 800cdec:	9101      	str	r1, [sp, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d000      	beq.n	800cdf4 <__ieee754_pow+0xe0>
 800cdf2:	e093      	b.n	800cf1c <__ieee754_pow+0x208>
 800cdf4:	4a75      	ldr	r2, [pc, #468]	@ (800cfcc <__ieee754_pow+0x2b8>)
 800cdf6:	00bb      	lsls	r3, r7, #2
 800cdf8:	089b      	lsrs	r3, r3, #2
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d002      	beq.n	800ce04 <__ieee754_pow+0xf0>
 800cdfe:	2c00      	cmp	r4, #0
 800ce00:	d000      	beq.n	800ce04 <__ieee754_pow+0xf0>
 800ce02:	e08b      	b.n	800cf1c <__ieee754_pow+0x208>
 800ce04:	9b06      	ldr	r3, [sp, #24]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	da07      	bge.n	800ce1a <__ieee754_pow+0x106>
 800ce0a:	9a00      	ldr	r2, [sp, #0]
 800ce0c:	9b01      	ldr	r3, [sp, #4]
 800ce0e:	2000      	movs	r0, #0
 800ce10:	496e      	ldr	r1, [pc, #440]	@ (800cfcc <__ieee754_pow+0x2b8>)
 800ce12:	f7f4 fdab 	bl	800196c <__aeabi_ddiv>
 800ce16:	9000      	str	r0, [sp, #0]
 800ce18:	9101      	str	r1, [sp, #4]
 800ce1a:	9b08      	ldr	r3, [sp, #32]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	da54      	bge.n	800ceca <__ieee754_pow+0x1b6>
 800ce20:	4b66      	ldr	r3, [pc, #408]	@ (800cfbc <__ieee754_pow+0x2a8>)
 800ce22:	18e4      	adds	r4, r4, r3
 800ce24:	432c      	orrs	r4, r5
 800ce26:	d000      	beq.n	800ce2a <__ieee754_pow+0x116>
 800ce28:	e06d      	b.n	800cf06 <__ieee754_pow+0x1f2>
 800ce2a:	9a00      	ldr	r2, [sp, #0]
 800ce2c:	9b01      	ldr	r3, [sp, #4]
 800ce2e:	0010      	movs	r0, r2
 800ce30:	0019      	movs	r1, r3
 800ce32:	f7f5 fca7 	bl	8002784 <__aeabi_dsub>
 800ce36:	0002      	movs	r2, r0
 800ce38:	000b      	movs	r3, r1
 800ce3a:	e01c      	b.n	800ce76 <__ieee754_pow+0x162>
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d1cf      	bne.n	800cde0 <__ieee754_pow+0xcc>
 800ce40:	3314      	adds	r3, #20
 800ce42:	1a9a      	subs	r2, r3, r2
 800ce44:	9b04      	ldr	r3, [sp, #16]
 800ce46:	4113      	asrs	r3, r2
 800ce48:	0019      	movs	r1, r3
 800ce4a:	4091      	lsls	r1, r2
 800ce4c:	000a      	movs	r2, r1
 800ce4e:	9904      	ldr	r1, [sp, #16]
 800ce50:	428a      	cmp	r2, r1
 800ce52:	d103      	bne.n	800ce5c <__ieee754_pow+0x148>
 800ce54:	2201      	movs	r2, #1
 800ce56:	2502      	movs	r5, #2
 800ce58:	4013      	ands	r3, r2
 800ce5a:	1aed      	subs	r5, r5, r3
 800ce5c:	4b5b      	ldr	r3, [pc, #364]	@ (800cfcc <__ieee754_pow+0x2b8>)
 800ce5e:	9a04      	ldr	r2, [sp, #16]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d136      	bne.n	800ced2 <__ieee754_pow+0x1be>
 800ce64:	9b06      	ldr	r3, [sp, #24]
 800ce66:	9600      	str	r6, [sp, #0]
 800ce68:	9701      	str	r7, [sp, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	da2d      	bge.n	800ceca <__ieee754_pow+0x1b6>
 800ce6e:	0032      	movs	r2, r6
 800ce70:	003b      	movs	r3, r7
 800ce72:	2000      	movs	r0, #0
 800ce74:	4955      	ldr	r1, [pc, #340]	@ (800cfcc <__ieee754_pow+0x2b8>)
 800ce76:	f7f4 fd79 	bl	800196c <__aeabi_ddiv>
 800ce7a:	e773      	b.n	800cd64 <__ieee754_pow+0x50>
 800ce7c:	2502      	movs	r5, #2
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1ae      	bne.n	800cde0 <__ieee754_pow+0xcc>
 800ce82:	9b04      	ldr	r3, [sp, #16]
 800ce84:	4a4c      	ldr	r2, [pc, #304]	@ (800cfb8 <__ieee754_pow+0x2a4>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d1e8      	bne.n	800ce5c <__ieee754_pow+0x148>
 800ce8a:	4b4c      	ldr	r3, [pc, #304]	@ (800cfbc <__ieee754_pow+0x2a8>)
 800ce8c:	18e3      	adds	r3, r4, r3
 800ce8e:	4333      	orrs	r3, r6
 800ce90:	d101      	bne.n	800ce96 <__ieee754_pow+0x182>
 800ce92:	f000 fc3b 	bl	800d70c <__ieee754_pow+0x9f8>
 800ce96:	4b4b      	ldr	r3, [pc, #300]	@ (800cfc4 <__ieee754_pow+0x2b0>)
 800ce98:	429c      	cmp	r4, r3
 800ce9a:	d909      	bls.n	800ceb0 <__ieee754_pow+0x19c>
 800ce9c:	9b06      	ldr	r3, [sp, #24]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	da01      	bge.n	800cea6 <__ieee754_pow+0x192>
 800cea2:	f000 fc37 	bl	800d714 <__ieee754_pow+0xa00>
 800cea6:	9b02      	ldr	r3, [sp, #8]
 800cea8:	9c03      	ldr	r4, [sp, #12]
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	9401      	str	r4, [sp, #4]
 800ceae:	e00c      	b.n	800ceca <__ieee754_pow+0x1b6>
 800ceb0:	9b06      	ldr	r3, [sp, #24]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	db01      	blt.n	800ceba <__ieee754_pow+0x1a6>
 800ceb6:	f000 fc2d 	bl	800d714 <__ieee754_pow+0xa00>
 800ceba:	2280      	movs	r2, #128	@ 0x80
 800cebc:	0612      	lsls	r2, r2, #24
 800cebe:	4694      	mov	ip, r2
 800cec0:	9b02      	ldr	r3, [sp, #8]
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	9b03      	ldr	r3, [sp, #12]
 800cec6:	4463      	add	r3, ip
 800cec8:	9301      	str	r3, [sp, #4]
 800ceca:	9800      	ldr	r0, [sp, #0]
 800cecc:	9901      	ldr	r1, [sp, #4]
 800cece:	b015      	add	sp, #84	@ 0x54
 800ced0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced2:	2380      	movs	r3, #128	@ 0x80
 800ced4:	9a06      	ldr	r2, [sp, #24]
 800ced6:	05db      	lsls	r3, r3, #23
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d106      	bne.n	800ceea <__ieee754_pow+0x1d6>
 800cedc:	0032      	movs	r2, r6
 800cede:	003b      	movs	r3, r7
 800cee0:	0030      	movs	r0, r6
 800cee2:	0039      	movs	r1, r7
 800cee4:	f7f5 f986 	bl	80021f4 <__aeabi_dmul>
 800cee8:	e73c      	b.n	800cd64 <__ieee754_pow+0x50>
 800ceea:	4b39      	ldr	r3, [pc, #228]	@ (800cfd0 <__ieee754_pow+0x2bc>)
 800ceec:	9a06      	ldr	r2, [sp, #24]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d000      	beq.n	800cef4 <__ieee754_pow+0x1e0>
 800cef2:	e775      	b.n	800cde0 <__ieee754_pow+0xcc>
 800cef4:	9b08      	ldr	r3, [sp, #32]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	da00      	bge.n	800cefc <__ieee754_pow+0x1e8>
 800cefa:	e771      	b.n	800cde0 <__ieee754_pow+0xcc>
 800cefc:	0030      	movs	r0, r6
 800cefe:	0039      	movs	r1, r7
 800cf00:	f000 fcd2 	bl	800d8a8 <__ieee754_sqrt>
 800cf04:	e72e      	b.n	800cd64 <__ieee754_pow+0x50>
 800cf06:	2d01      	cmp	r5, #1
 800cf08:	d1df      	bne.n	800ceca <__ieee754_pow+0x1b6>
 800cf0a:	9800      	ldr	r0, [sp, #0]
 800cf0c:	2180      	movs	r1, #128	@ 0x80
 800cf0e:	0002      	movs	r2, r0
 800cf10:	9801      	ldr	r0, [sp, #4]
 800cf12:	0609      	lsls	r1, r1, #24
 800cf14:	1843      	adds	r3, r0, r1
 800cf16:	9200      	str	r2, [sp, #0]
 800cf18:	9301      	str	r3, [sp, #4]
 800cf1a:	e7d6      	b.n	800ceca <__ieee754_pow+0x1b6>
 800cf1c:	0ffb      	lsrs	r3, r7, #31
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	001a      	movs	r2, r3
 800cf22:	432a      	orrs	r2, r5
 800cf24:	d104      	bne.n	800cf30 <__ieee754_pow+0x21c>
 800cf26:	0032      	movs	r2, r6
 800cf28:	003b      	movs	r3, r7
 800cf2a:	0030      	movs	r0, r6
 800cf2c:	0039      	movs	r1, r7
 800cf2e:	e780      	b.n	800ce32 <__ieee754_pow+0x11e>
 800cf30:	3d01      	subs	r5, #1
 800cf32:	2200      	movs	r2, #0
 800cf34:	431d      	orrs	r5, r3
 800cf36:	d015      	beq.n	800cf64 <__ieee754_pow+0x250>
 800cf38:	4b24      	ldr	r3, [pc, #144]	@ (800cfcc <__ieee754_pow+0x2b8>)
 800cf3a:	9208      	str	r2, [sp, #32]
 800cf3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf3e:	2384      	movs	r3, #132	@ 0x84
 800cf40:	9a04      	ldr	r2, [sp, #16]
 800cf42:	05db      	lsls	r3, r3, #23
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d800      	bhi.n	800cf4a <__ieee754_pow+0x236>
 800cf48:	e102      	b.n	800d150 <__ieee754_pow+0x43c>
 800cf4a:	4b22      	ldr	r3, [pc, #136]	@ (800cfd4 <__ieee754_pow+0x2c0>)
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d912      	bls.n	800cf76 <__ieee754_pow+0x262>
 800cf50:	4b1c      	ldr	r3, [pc, #112]	@ (800cfc4 <__ieee754_pow+0x2b0>)
 800cf52:	429c      	cmp	r4, r3
 800cf54:	d808      	bhi.n	800cf68 <__ieee754_pow+0x254>
 800cf56:	9b06      	ldr	r3, [sp, #24]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	da08      	bge.n	800cf6e <__ieee754_pow+0x25a>
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	f000 fc9b 	bl	800d898 <__math_oflow>
 800cf62:	e6ff      	b.n	800cd64 <__ieee754_pow+0x50>
 800cf64:	4b1c      	ldr	r3, [pc, #112]	@ (800cfd8 <__ieee754_pow+0x2c4>)
 800cf66:	e7e8      	b.n	800cf3a <__ieee754_pow+0x226>
 800cf68:	9b06      	ldr	r3, [sp, #24]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	dcf6      	bgt.n	800cf5c <__ieee754_pow+0x248>
 800cf6e:	2000      	movs	r0, #0
 800cf70:	f000 fc8b 	bl	800d88a <__math_uflow>
 800cf74:	e6f6      	b.n	800cd64 <__ieee754_pow+0x50>
 800cf76:	4b19      	ldr	r3, [pc, #100]	@ (800cfdc <__ieee754_pow+0x2c8>)
 800cf78:	429c      	cmp	r4, r3
 800cf7a:	d80b      	bhi.n	800cf94 <__ieee754_pow+0x280>
 800cf7c:	9808      	ldr	r0, [sp, #32]
 800cf7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf80:	2300      	movs	r3, #0
 800cf82:	2200      	movs	r2, #0
 800cf84:	f7f3 fa68 	bl	8000458 <__aeabi_dcmplt>
 800cf88:	1e43      	subs	r3, r0, #1
 800cf8a:	4198      	sbcs	r0, r3
 800cf8c:	9b06      	ldr	r3, [sp, #24]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	daee      	bge.n	800cf70 <__ieee754_pow+0x25c>
 800cf92:	e7e4      	b.n	800cf5e <__ieee754_pow+0x24a>
 800cf94:	4b0d      	ldr	r3, [pc, #52]	@ (800cfcc <__ieee754_pow+0x2b8>)
 800cf96:	2200      	movs	r2, #0
 800cf98:	429c      	cmp	r4, r3
 800cf9a:	d921      	bls.n	800cfe0 <__ieee754_pow+0x2cc>
 800cf9c:	9808      	ldr	r0, [sp, #32]
 800cf9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	f7f3 fa59 	bl	8000458 <__aeabi_dcmplt>
 800cfa6:	1e43      	subs	r3, r0, #1
 800cfa8:	4198      	sbcs	r0, r3
 800cfaa:	9b06      	ldr	r3, [sp, #24]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	dcd6      	bgt.n	800cf5e <__ieee754_pow+0x24a>
 800cfb0:	e7de      	b.n	800cf70 <__ieee754_pow+0x25c>
 800cfb2:	46c0      	nop			@ (mov r8, r8)
 800cfb4:	fff00000 	.word	0xfff00000
 800cfb8:	7ff00000 	.word	0x7ff00000
 800cfbc:	c0100000 	.word	0xc0100000
 800cfc0:	433fffff 	.word	0x433fffff
 800cfc4:	3fefffff 	.word	0x3fefffff
 800cfc8:	fffffc01 	.word	0xfffffc01
 800cfcc:	3ff00000 	.word	0x3ff00000
 800cfd0:	3fe00000 	.word	0x3fe00000
 800cfd4:	43f00000 	.word	0x43f00000
 800cfd8:	bff00000 	.word	0xbff00000
 800cfdc:	3feffffe 	.word	0x3feffffe
 800cfe0:	9800      	ldr	r0, [sp, #0]
 800cfe2:	9901      	ldr	r1, [sp, #4]
 800cfe4:	4b4f      	ldr	r3, [pc, #316]	@ (800d124 <__ieee754_pow+0x410>)
 800cfe6:	f7f5 fbcd 	bl	8002784 <__aeabi_dsub>
 800cfea:	22c0      	movs	r2, #192	@ 0xc0
 800cfec:	4b4e      	ldr	r3, [pc, #312]	@ (800d128 <__ieee754_pow+0x414>)
 800cfee:	05d2      	lsls	r2, r2, #23
 800cff0:	0006      	movs	r6, r0
 800cff2:	000f      	movs	r7, r1
 800cff4:	f7f5 f8fe 	bl	80021f4 <__aeabi_dmul>
 800cff8:	4a4c      	ldr	r2, [pc, #304]	@ (800d12c <__ieee754_pow+0x418>)
 800cffa:	9004      	str	r0, [sp, #16]
 800cffc:	9105      	str	r1, [sp, #20]
 800cffe:	4b4c      	ldr	r3, [pc, #304]	@ (800d130 <__ieee754_pow+0x41c>)
 800d000:	0030      	movs	r0, r6
 800d002:	0039      	movs	r1, r7
 800d004:	f7f5 f8f6 	bl	80021f4 <__aeabi_dmul>
 800d008:	2200      	movs	r2, #0
 800d00a:	9000      	str	r0, [sp, #0]
 800d00c:	9101      	str	r1, [sp, #4]
 800d00e:	4b49      	ldr	r3, [pc, #292]	@ (800d134 <__ieee754_pow+0x420>)
 800d010:	0030      	movs	r0, r6
 800d012:	0039      	movs	r1, r7
 800d014:	f7f5 f8ee 	bl	80021f4 <__aeabi_dmul>
 800d018:	0002      	movs	r2, r0
 800d01a:	000b      	movs	r3, r1
 800d01c:	4846      	ldr	r0, [pc, #280]	@ (800d138 <__ieee754_pow+0x424>)
 800d01e:	4947      	ldr	r1, [pc, #284]	@ (800d13c <__ieee754_pow+0x428>)
 800d020:	f7f5 fbb0 	bl	8002784 <__aeabi_dsub>
 800d024:	0032      	movs	r2, r6
 800d026:	003b      	movs	r3, r7
 800d028:	f7f5 f8e4 	bl	80021f4 <__aeabi_dmul>
 800d02c:	0002      	movs	r2, r0
 800d02e:	000b      	movs	r3, r1
 800d030:	2000      	movs	r0, #0
 800d032:	4943      	ldr	r1, [pc, #268]	@ (800d140 <__ieee754_pow+0x42c>)
 800d034:	f7f5 fba6 	bl	8002784 <__aeabi_dsub>
 800d038:	0032      	movs	r2, r6
 800d03a:	0004      	movs	r4, r0
 800d03c:	000d      	movs	r5, r1
 800d03e:	003b      	movs	r3, r7
 800d040:	0030      	movs	r0, r6
 800d042:	0039      	movs	r1, r7
 800d044:	f7f5 f8d6 	bl	80021f4 <__aeabi_dmul>
 800d048:	0002      	movs	r2, r0
 800d04a:	000b      	movs	r3, r1
 800d04c:	0020      	movs	r0, r4
 800d04e:	0029      	movs	r1, r5
 800d050:	f7f5 f8d0 	bl	80021f4 <__aeabi_dmul>
 800d054:	4a3b      	ldr	r2, [pc, #236]	@ (800d144 <__ieee754_pow+0x430>)
 800d056:	4b34      	ldr	r3, [pc, #208]	@ (800d128 <__ieee754_pow+0x414>)
 800d058:	f7f5 f8cc 	bl	80021f4 <__aeabi_dmul>
 800d05c:	0002      	movs	r2, r0
 800d05e:	000b      	movs	r3, r1
 800d060:	9800      	ldr	r0, [sp, #0]
 800d062:	9901      	ldr	r1, [sp, #4]
 800d064:	f7f5 fb8e 	bl	8002784 <__aeabi_dsub>
 800d068:	0002      	movs	r2, r0
 800d06a:	000b      	movs	r3, r1
 800d06c:	0004      	movs	r4, r0
 800d06e:	000d      	movs	r5, r1
 800d070:	9804      	ldr	r0, [sp, #16]
 800d072:	9905      	ldr	r1, [sp, #20]
 800d074:	f7f4 f916 	bl	80012a4 <__aeabi_dadd>
 800d078:	9a04      	ldr	r2, [sp, #16]
 800d07a:	9b05      	ldr	r3, [sp, #20]
 800d07c:	2000      	movs	r0, #0
 800d07e:	9000      	str	r0, [sp, #0]
 800d080:	9101      	str	r1, [sp, #4]
 800d082:	f7f5 fb7f 	bl	8002784 <__aeabi_dsub>
 800d086:	0002      	movs	r2, r0
 800d088:	000b      	movs	r3, r1
 800d08a:	0020      	movs	r0, r4
 800d08c:	0029      	movs	r1, r5
 800d08e:	f7f5 fb79 	bl	8002784 <__aeabi_dsub>
 800d092:	9b02      	ldr	r3, [sp, #8]
 800d094:	9c03      	ldr	r4, [sp, #12]
 800d096:	9304      	str	r3, [sp, #16]
 800d098:	9405      	str	r4, [sp, #20]
 800d09a:	2300      	movs	r3, #0
 800d09c:	9304      	str	r3, [sp, #16]
 800d09e:	9c04      	ldr	r4, [sp, #16]
 800d0a0:	9d05      	ldr	r5, [sp, #20]
 800d0a2:	0006      	movs	r6, r0
 800d0a4:	000f      	movs	r7, r1
 800d0a6:	9802      	ldr	r0, [sp, #8]
 800d0a8:	9903      	ldr	r1, [sp, #12]
 800d0aa:	0022      	movs	r2, r4
 800d0ac:	002b      	movs	r3, r5
 800d0ae:	f7f5 fb69 	bl	8002784 <__aeabi_dsub>
 800d0b2:	9a00      	ldr	r2, [sp, #0]
 800d0b4:	9b01      	ldr	r3, [sp, #4]
 800d0b6:	f7f5 f89d 	bl	80021f4 <__aeabi_dmul>
 800d0ba:	9a02      	ldr	r2, [sp, #8]
 800d0bc:	9b03      	ldr	r3, [sp, #12]
 800d0be:	9006      	str	r0, [sp, #24]
 800d0c0:	9107      	str	r1, [sp, #28]
 800d0c2:	0030      	movs	r0, r6
 800d0c4:	0039      	movs	r1, r7
 800d0c6:	f7f5 f895 	bl	80021f4 <__aeabi_dmul>
 800d0ca:	0002      	movs	r2, r0
 800d0cc:	000b      	movs	r3, r1
 800d0ce:	9806      	ldr	r0, [sp, #24]
 800d0d0:	9907      	ldr	r1, [sp, #28]
 800d0d2:	f7f4 f8e7 	bl	80012a4 <__aeabi_dadd>
 800d0d6:	0022      	movs	r2, r4
 800d0d8:	002b      	movs	r3, r5
 800d0da:	9002      	str	r0, [sp, #8]
 800d0dc:	9103      	str	r1, [sp, #12]
 800d0de:	9800      	ldr	r0, [sp, #0]
 800d0e0:	9901      	ldr	r1, [sp, #4]
 800d0e2:	f7f5 f887 	bl	80021f4 <__aeabi_dmul>
 800d0e6:	000b      	movs	r3, r1
 800d0e8:	0002      	movs	r2, r0
 800d0ea:	0006      	movs	r6, r0
 800d0ec:	000f      	movs	r7, r1
 800d0ee:	9802      	ldr	r0, [sp, #8]
 800d0f0:	9903      	ldr	r1, [sp, #12]
 800d0f2:	f7f4 f8d7 	bl	80012a4 <__aeabi_dadd>
 800d0f6:	9000      	str	r0, [sp, #0]
 800d0f8:	9101      	str	r1, [sp, #4]
 800d0fa:	9c01      	ldr	r4, [sp, #4]
 800d0fc:	4b12      	ldr	r3, [pc, #72]	@ (800d148 <__ieee754_pow+0x434>)
 800d0fe:	9406      	str	r4, [sp, #24]
 800d100:	429c      	cmp	r4, r3
 800d102:	dc00      	bgt.n	800d106 <__ieee754_pow+0x3f2>
 800d104:	e222      	b.n	800d54c <__ieee754_pow+0x838>
 800d106:	4a11      	ldr	r2, [pc, #68]	@ (800d14c <__ieee754_pow+0x438>)
 800d108:	18a3      	adds	r3, r4, r2
 800d10a:	9a00      	ldr	r2, [sp, #0]
 800d10c:	4313      	orrs	r3, r2
 800d10e:	d100      	bne.n	800d112 <__ieee754_pow+0x3fe>
 800d110:	e1a0      	b.n	800d454 <__ieee754_pow+0x740>
 800d112:	9808      	ldr	r0, [sp, #32]
 800d114:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d116:	2300      	movs	r3, #0
 800d118:	2200      	movs	r2, #0
 800d11a:	f7f3 f99d 	bl	8000458 <__aeabi_dcmplt>
 800d11e:	1e43      	subs	r3, r0, #1
 800d120:	4198      	sbcs	r0, r3
 800d122:	e71c      	b.n	800cf5e <__ieee754_pow+0x24a>
 800d124:	3ff00000 	.word	0x3ff00000
 800d128:	3ff71547 	.word	0x3ff71547
 800d12c:	f85ddf44 	.word	0xf85ddf44
 800d130:	3e54ae0b 	.word	0x3e54ae0b
 800d134:	3fd00000 	.word	0x3fd00000
 800d138:	55555555 	.word	0x55555555
 800d13c:	3fd55555 	.word	0x3fd55555
 800d140:	3fe00000 	.word	0x3fe00000
 800d144:	652b82fe 	.word	0x652b82fe
 800d148:	408fffff 	.word	0x408fffff
 800d14c:	bf700000 	.word	0xbf700000
 800d150:	4be0      	ldr	r3, [pc, #896]	@ (800d4d4 <__ieee754_pow+0x7c0>)
 800d152:	2200      	movs	r2, #0
 800d154:	423b      	tst	r3, r7
 800d156:	d10b      	bne.n	800d170 <__ieee754_pow+0x45c>
 800d158:	9800      	ldr	r0, [sp, #0]
 800d15a:	9901      	ldr	r1, [sp, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	4bde      	ldr	r3, [pc, #888]	@ (800d4d8 <__ieee754_pow+0x7c4>)
 800d160:	f7f5 f848 	bl	80021f4 <__aeabi_dmul>
 800d164:	2235      	movs	r2, #53	@ 0x35
 800d166:	9000      	str	r0, [sp, #0]
 800d168:	9101      	str	r1, [sp, #4]
 800d16a:	9b01      	ldr	r3, [sp, #4]
 800d16c:	4252      	negs	r2, r2
 800d16e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d172:	49da      	ldr	r1, [pc, #872]	@ (800d4dc <__ieee754_pow+0x7c8>)
 800d174:	151b      	asrs	r3, r3, #20
 800d176:	185b      	adds	r3, r3, r1
 800d178:	189b      	adds	r3, r3, r2
 800d17a:	930e      	str	r3, [sp, #56]	@ 0x38
 800d17c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d17e:	4dd8      	ldr	r5, [pc, #864]	@ (800d4e0 <__ieee754_pow+0x7cc>)
 800d180:	031b      	lsls	r3, r3, #12
 800d182:	4ad8      	ldr	r2, [pc, #864]	@ (800d4e4 <__ieee754_pow+0x7d0>)
 800d184:	0b1b      	lsrs	r3, r3, #12
 800d186:	2600      	movs	r6, #0
 800d188:	431d      	orrs	r5, r3
 800d18a:	4293      	cmp	r3, r2
 800d18c:	dd09      	ble.n	800d1a2 <__ieee754_pow+0x48e>
 800d18e:	4ad6      	ldr	r2, [pc, #856]	@ (800d4e8 <__ieee754_pow+0x7d4>)
 800d190:	3601      	adds	r6, #1
 800d192:	4293      	cmp	r3, r2
 800d194:	dd05      	ble.n	800d1a2 <__ieee754_pow+0x48e>
 800d196:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d198:	199b      	adds	r3, r3, r6
 800d19a:	2600      	movs	r6, #0
 800d19c:	930e      	str	r3, [sp, #56]	@ 0x38
 800d19e:	4bd3      	ldr	r3, [pc, #844]	@ (800d4ec <__ieee754_pow+0x7d8>)
 800d1a0:	18ed      	adds	r5, r5, r3
 800d1a2:	9800      	ldr	r0, [sp, #0]
 800d1a4:	9901      	ldr	r1, [sp, #4]
 800d1a6:	0029      	movs	r1, r5
 800d1a8:	4bd1      	ldr	r3, [pc, #836]	@ (800d4f0 <__ieee754_pow+0x7dc>)
 800d1aa:	00f2      	lsls	r2, r6, #3
 800d1ac:	189b      	adds	r3, r3, r2
 800d1ae:	685c      	ldr	r4, [r3, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d1b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d1b8:	001a      	movs	r2, r3
 800d1ba:	0023      	movs	r3, r4
 800d1bc:	900c      	str	r0, [sp, #48]	@ 0x30
 800d1be:	910d      	str	r1, [sp, #52]	@ 0x34
 800d1c0:	f7f5 fae0 	bl	8002784 <__aeabi_dsub>
 800d1c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d1c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1c8:	9010      	str	r0, [sp, #64]	@ 0x40
 800d1ca:	9111      	str	r1, [sp, #68]	@ 0x44
 800d1cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d1ce:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d1d0:	f7f4 f868 	bl	80012a4 <__aeabi_dadd>
 800d1d4:	0002      	movs	r2, r0
 800d1d6:	000b      	movs	r3, r1
 800d1d8:	2000      	movs	r0, #0
 800d1da:	49c1      	ldr	r1, [pc, #772]	@ (800d4e0 <__ieee754_pow+0x7cc>)
 800d1dc:	f7f4 fbc6 	bl	800196c <__aeabi_ddiv>
 800d1e0:	0002      	movs	r2, r0
 800d1e2:	000b      	movs	r3, r1
 800d1e4:	9012      	str	r0, [sp, #72]	@ 0x48
 800d1e6:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d1e8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d1ea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d1ec:	f7f5 f802 	bl	80021f4 <__aeabi_dmul>
 800d1f0:	9006      	str	r0, [sp, #24]
 800d1f2:	9107      	str	r1, [sp, #28]
 800d1f4:	9b06      	ldr	r3, [sp, #24]
 800d1f6:	9c07      	ldr	r4, [sp, #28]
 800d1f8:	2180      	movs	r1, #128	@ 0x80
 800d1fa:	9304      	str	r3, [sp, #16]
 800d1fc:	9405      	str	r4, [sp, #20]
 800d1fe:	2080      	movs	r0, #128	@ 0x80
 800d200:	2300      	movs	r3, #0
 800d202:	2200      	movs	r2, #0
 800d204:	106d      	asrs	r5, r5, #1
 800d206:	0589      	lsls	r1, r1, #22
 800d208:	9304      	str	r3, [sp, #16]
 800d20a:	4329      	orrs	r1, r5
 800d20c:	0300      	lsls	r0, r0, #12
 800d20e:	9b04      	ldr	r3, [sp, #16]
 800d210:	9c05      	ldr	r4, [sp, #20]
 800d212:	1809      	adds	r1, r1, r0
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	9401      	str	r4, [sp, #4]
 800d218:	04b6      	lsls	r6, r6, #18
 800d21a:	198b      	adds	r3, r1, r6
 800d21c:	9800      	ldr	r0, [sp, #0]
 800d21e:	9901      	ldr	r1, [sp, #4]
 800d220:	0014      	movs	r4, r2
 800d222:	001d      	movs	r5, r3
 800d224:	f7f4 ffe6 	bl	80021f4 <__aeabi_dmul>
 800d228:	0002      	movs	r2, r0
 800d22a:	000b      	movs	r3, r1
 800d22c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d22e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d230:	f7f5 faa8 	bl	8002784 <__aeabi_dsub>
 800d234:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d238:	0006      	movs	r6, r0
 800d23a:	000f      	movs	r7, r1
 800d23c:	0020      	movs	r0, r4
 800d23e:	0029      	movs	r1, r5
 800d240:	f7f5 faa0 	bl	8002784 <__aeabi_dsub>
 800d244:	0002      	movs	r2, r0
 800d246:	000b      	movs	r3, r1
 800d248:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d24a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d24c:	f7f5 fa9a 	bl	8002784 <__aeabi_dsub>
 800d250:	9a00      	ldr	r2, [sp, #0]
 800d252:	9b01      	ldr	r3, [sp, #4]
 800d254:	f7f4 ffce 	bl	80021f4 <__aeabi_dmul>
 800d258:	0002      	movs	r2, r0
 800d25a:	000b      	movs	r3, r1
 800d25c:	0030      	movs	r0, r6
 800d25e:	0039      	movs	r1, r7
 800d260:	f7f5 fa90 	bl	8002784 <__aeabi_dsub>
 800d264:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d266:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d268:	f7f4 ffc4 	bl	80021f4 <__aeabi_dmul>
 800d26c:	9a06      	ldr	r2, [sp, #24]
 800d26e:	9b07      	ldr	r3, [sp, #28]
 800d270:	900a      	str	r0, [sp, #40]	@ 0x28
 800d272:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d274:	0010      	movs	r0, r2
 800d276:	0019      	movs	r1, r3
 800d278:	f7f4 ffbc 	bl	80021f4 <__aeabi_dmul>
 800d27c:	0006      	movs	r6, r0
 800d27e:	000f      	movs	r7, r1
 800d280:	4a9c      	ldr	r2, [pc, #624]	@ (800d4f4 <__ieee754_pow+0x7e0>)
 800d282:	4b9d      	ldr	r3, [pc, #628]	@ (800d4f8 <__ieee754_pow+0x7e4>)
 800d284:	f7f4 ffb6 	bl	80021f4 <__aeabi_dmul>
 800d288:	4a9c      	ldr	r2, [pc, #624]	@ (800d4fc <__ieee754_pow+0x7e8>)
 800d28a:	4b9d      	ldr	r3, [pc, #628]	@ (800d500 <__ieee754_pow+0x7ec>)
 800d28c:	f7f4 f80a 	bl	80012a4 <__aeabi_dadd>
 800d290:	0032      	movs	r2, r6
 800d292:	003b      	movs	r3, r7
 800d294:	f7f4 ffae 	bl	80021f4 <__aeabi_dmul>
 800d298:	4a9a      	ldr	r2, [pc, #616]	@ (800d504 <__ieee754_pow+0x7f0>)
 800d29a:	4b9b      	ldr	r3, [pc, #620]	@ (800d508 <__ieee754_pow+0x7f4>)
 800d29c:	f7f4 f802 	bl	80012a4 <__aeabi_dadd>
 800d2a0:	0032      	movs	r2, r6
 800d2a2:	003b      	movs	r3, r7
 800d2a4:	f7f4 ffa6 	bl	80021f4 <__aeabi_dmul>
 800d2a8:	4a98      	ldr	r2, [pc, #608]	@ (800d50c <__ieee754_pow+0x7f8>)
 800d2aa:	4b99      	ldr	r3, [pc, #612]	@ (800d510 <__ieee754_pow+0x7fc>)
 800d2ac:	f7f3 fffa 	bl	80012a4 <__aeabi_dadd>
 800d2b0:	0032      	movs	r2, r6
 800d2b2:	003b      	movs	r3, r7
 800d2b4:	f7f4 ff9e 	bl	80021f4 <__aeabi_dmul>
 800d2b8:	4a96      	ldr	r2, [pc, #600]	@ (800d514 <__ieee754_pow+0x800>)
 800d2ba:	4b97      	ldr	r3, [pc, #604]	@ (800d518 <__ieee754_pow+0x804>)
 800d2bc:	f7f3 fff2 	bl	80012a4 <__aeabi_dadd>
 800d2c0:	0032      	movs	r2, r6
 800d2c2:	003b      	movs	r3, r7
 800d2c4:	f7f4 ff96 	bl	80021f4 <__aeabi_dmul>
 800d2c8:	4a94      	ldr	r2, [pc, #592]	@ (800d51c <__ieee754_pow+0x808>)
 800d2ca:	4b95      	ldr	r3, [pc, #596]	@ (800d520 <__ieee754_pow+0x80c>)
 800d2cc:	f7f3 ffea 	bl	80012a4 <__aeabi_dadd>
 800d2d0:	0032      	movs	r2, r6
 800d2d2:	0004      	movs	r4, r0
 800d2d4:	000d      	movs	r5, r1
 800d2d6:	003b      	movs	r3, r7
 800d2d8:	0030      	movs	r0, r6
 800d2da:	0039      	movs	r1, r7
 800d2dc:	f7f4 ff8a 	bl	80021f4 <__aeabi_dmul>
 800d2e0:	0002      	movs	r2, r0
 800d2e2:	000b      	movs	r3, r1
 800d2e4:	0020      	movs	r0, r4
 800d2e6:	0029      	movs	r1, r5
 800d2e8:	f7f4 ff84 	bl	80021f4 <__aeabi_dmul>
 800d2ec:	9a00      	ldr	r2, [sp, #0]
 800d2ee:	9b01      	ldr	r3, [sp, #4]
 800d2f0:	0004      	movs	r4, r0
 800d2f2:	000d      	movs	r5, r1
 800d2f4:	9806      	ldr	r0, [sp, #24]
 800d2f6:	9907      	ldr	r1, [sp, #28]
 800d2f8:	f7f3 ffd4 	bl	80012a4 <__aeabi_dadd>
 800d2fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d300:	f7f4 ff78 	bl	80021f4 <__aeabi_dmul>
 800d304:	0022      	movs	r2, r4
 800d306:	002b      	movs	r3, r5
 800d308:	f7f3 ffcc 	bl	80012a4 <__aeabi_dadd>
 800d30c:	9a00      	ldr	r2, [sp, #0]
 800d30e:	9b01      	ldr	r3, [sp, #4]
 800d310:	900c      	str	r0, [sp, #48]	@ 0x30
 800d312:	910d      	str	r1, [sp, #52]	@ 0x34
 800d314:	0010      	movs	r0, r2
 800d316:	0019      	movs	r1, r3
 800d318:	f7f4 ff6c 	bl	80021f4 <__aeabi_dmul>
 800d31c:	2200      	movs	r2, #0
 800d31e:	4b81      	ldr	r3, [pc, #516]	@ (800d524 <__ieee754_pow+0x810>)
 800d320:	0004      	movs	r4, r0
 800d322:	000d      	movs	r5, r1
 800d324:	f7f3 ffbe 	bl	80012a4 <__aeabi_dadd>
 800d328:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d32a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d32c:	f7f3 ffba 	bl	80012a4 <__aeabi_dadd>
 800d330:	2000      	movs	r0, #0
 800d332:	000f      	movs	r7, r1
 800d334:	0006      	movs	r6, r0
 800d336:	0002      	movs	r2, r0
 800d338:	000b      	movs	r3, r1
 800d33a:	9800      	ldr	r0, [sp, #0]
 800d33c:	9901      	ldr	r1, [sp, #4]
 800d33e:	f7f4 ff59 	bl	80021f4 <__aeabi_dmul>
 800d342:	2200      	movs	r2, #0
 800d344:	9000      	str	r0, [sp, #0]
 800d346:	9101      	str	r1, [sp, #4]
 800d348:	4b76      	ldr	r3, [pc, #472]	@ (800d524 <__ieee754_pow+0x810>)
 800d34a:	0030      	movs	r0, r6
 800d34c:	0039      	movs	r1, r7
 800d34e:	f7f5 fa19 	bl	8002784 <__aeabi_dsub>
 800d352:	0022      	movs	r2, r4
 800d354:	002b      	movs	r3, r5
 800d356:	f7f5 fa15 	bl	8002784 <__aeabi_dsub>
 800d35a:	0002      	movs	r2, r0
 800d35c:	000b      	movs	r3, r1
 800d35e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d360:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d362:	f7f5 fa0f 	bl	8002784 <__aeabi_dsub>
 800d366:	9a06      	ldr	r2, [sp, #24]
 800d368:	9b07      	ldr	r3, [sp, #28]
 800d36a:	f7f4 ff43 	bl	80021f4 <__aeabi_dmul>
 800d36e:	0032      	movs	r2, r6
 800d370:	0004      	movs	r4, r0
 800d372:	000d      	movs	r5, r1
 800d374:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d376:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d378:	003b      	movs	r3, r7
 800d37a:	f7f4 ff3b 	bl	80021f4 <__aeabi_dmul>
 800d37e:	0002      	movs	r2, r0
 800d380:	000b      	movs	r3, r1
 800d382:	0020      	movs	r0, r4
 800d384:	0029      	movs	r1, r5
 800d386:	f7f3 ff8d 	bl	80012a4 <__aeabi_dadd>
 800d38a:	0004      	movs	r4, r0
 800d38c:	000d      	movs	r5, r1
 800d38e:	0002      	movs	r2, r0
 800d390:	000b      	movs	r3, r1
 800d392:	9800      	ldr	r0, [sp, #0]
 800d394:	9901      	ldr	r1, [sp, #4]
 800d396:	f7f3 ff85 	bl	80012a4 <__aeabi_dadd>
 800d39a:	22e0      	movs	r2, #224	@ 0xe0
 800d39c:	2000      	movs	r0, #0
 800d39e:	4b62      	ldr	r3, [pc, #392]	@ (800d528 <__ieee754_pow+0x814>)
 800d3a0:	0612      	lsls	r2, r2, #24
 800d3a2:	0006      	movs	r6, r0
 800d3a4:	000f      	movs	r7, r1
 800d3a6:	f7f4 ff25 	bl	80021f4 <__aeabi_dmul>
 800d3aa:	9006      	str	r0, [sp, #24]
 800d3ac:	9107      	str	r1, [sp, #28]
 800d3ae:	9a00      	ldr	r2, [sp, #0]
 800d3b0:	9b01      	ldr	r3, [sp, #4]
 800d3b2:	0030      	movs	r0, r6
 800d3b4:	0039      	movs	r1, r7
 800d3b6:	f7f5 f9e5 	bl	8002784 <__aeabi_dsub>
 800d3ba:	0002      	movs	r2, r0
 800d3bc:	000b      	movs	r3, r1
 800d3be:	0020      	movs	r0, r4
 800d3c0:	0029      	movs	r1, r5
 800d3c2:	f7f5 f9df 	bl	8002784 <__aeabi_dsub>
 800d3c6:	4a59      	ldr	r2, [pc, #356]	@ (800d52c <__ieee754_pow+0x818>)
 800d3c8:	4b57      	ldr	r3, [pc, #348]	@ (800d528 <__ieee754_pow+0x814>)
 800d3ca:	f7f4 ff13 	bl	80021f4 <__aeabi_dmul>
 800d3ce:	4a58      	ldr	r2, [pc, #352]	@ (800d530 <__ieee754_pow+0x81c>)
 800d3d0:	0004      	movs	r4, r0
 800d3d2:	000d      	movs	r5, r1
 800d3d4:	0030      	movs	r0, r6
 800d3d6:	0039      	movs	r1, r7
 800d3d8:	4b56      	ldr	r3, [pc, #344]	@ (800d534 <__ieee754_pow+0x820>)
 800d3da:	f7f4 ff0b 	bl	80021f4 <__aeabi_dmul>
 800d3de:	0002      	movs	r2, r0
 800d3e0:	000b      	movs	r3, r1
 800d3e2:	0020      	movs	r0, r4
 800d3e4:	0029      	movs	r1, r5
 800d3e6:	f7f3 ff5d 	bl	80012a4 <__aeabi_dadd>
 800d3ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d3ec:	4b52      	ldr	r3, [pc, #328]	@ (800d538 <__ieee754_pow+0x824>)
 800d3ee:	189b      	adds	r3, r3, r2
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	f7f3 ff56 	bl	80012a4 <__aeabi_dadd>
 800d3f8:	900a      	str	r0, [sp, #40]	@ 0x28
 800d3fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d3fc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800d3fe:	f7f5 fdbb 	bl	8002f78 <__aeabi_i2d>
 800d402:	0004      	movs	r4, r0
 800d404:	000d      	movs	r5, r1
 800d406:	9806      	ldr	r0, [sp, #24]
 800d408:	9907      	ldr	r1, [sp, #28]
 800d40a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d40c:	4b4b      	ldr	r3, [pc, #300]	@ (800d53c <__ieee754_pow+0x828>)
 800d40e:	189b      	adds	r3, r3, r2
 800d410:	681e      	ldr	r6, [r3, #0]
 800d412:	685f      	ldr	r7, [r3, #4]
 800d414:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d418:	f7f3 ff44 	bl	80012a4 <__aeabi_dadd>
 800d41c:	0032      	movs	r2, r6
 800d41e:	003b      	movs	r3, r7
 800d420:	f7f3 ff40 	bl	80012a4 <__aeabi_dadd>
 800d424:	0022      	movs	r2, r4
 800d426:	002b      	movs	r3, r5
 800d428:	f7f3 ff3c 	bl	80012a4 <__aeabi_dadd>
 800d42c:	2000      	movs	r0, #0
 800d42e:	0022      	movs	r2, r4
 800d430:	002b      	movs	r3, r5
 800d432:	9000      	str	r0, [sp, #0]
 800d434:	9101      	str	r1, [sp, #4]
 800d436:	f7f5 f9a5 	bl	8002784 <__aeabi_dsub>
 800d43a:	0032      	movs	r2, r6
 800d43c:	003b      	movs	r3, r7
 800d43e:	f7f5 f9a1 	bl	8002784 <__aeabi_dsub>
 800d442:	9a06      	ldr	r2, [sp, #24]
 800d444:	9b07      	ldr	r3, [sp, #28]
 800d446:	f7f5 f99d 	bl	8002784 <__aeabi_dsub>
 800d44a:	0002      	movs	r2, r0
 800d44c:	000b      	movs	r3, r1
 800d44e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d450:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d452:	e61c      	b.n	800d08e <__ieee754_pow+0x37a>
 800d454:	4a3a      	ldr	r2, [pc, #232]	@ (800d540 <__ieee754_pow+0x82c>)
 800d456:	4b3b      	ldr	r3, [pc, #236]	@ (800d544 <__ieee754_pow+0x830>)
 800d458:	9802      	ldr	r0, [sp, #8]
 800d45a:	9903      	ldr	r1, [sp, #12]
 800d45c:	f7f3 ff22 	bl	80012a4 <__aeabi_dadd>
 800d460:	0032      	movs	r2, r6
 800d462:	003b      	movs	r3, r7
 800d464:	9004      	str	r0, [sp, #16]
 800d466:	9105      	str	r1, [sp, #20]
 800d468:	9800      	ldr	r0, [sp, #0]
 800d46a:	9901      	ldr	r1, [sp, #4]
 800d46c:	f7f5 f98a 	bl	8002784 <__aeabi_dsub>
 800d470:	0002      	movs	r2, r0
 800d472:	000b      	movs	r3, r1
 800d474:	9804      	ldr	r0, [sp, #16]
 800d476:	9905      	ldr	r1, [sp, #20]
 800d478:	f7f3 f802 	bl	8000480 <__aeabi_dcmpgt>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	d000      	beq.n	800d482 <__ieee754_pow+0x76e>
 800d480:	e647      	b.n	800d112 <__ieee754_pow+0x3fe>
 800d482:	2580      	movs	r5, #128	@ 0x80
 800d484:	4b30      	ldr	r3, [pc, #192]	@ (800d548 <__ieee754_pow+0x834>)
 800d486:	036d      	lsls	r5, r5, #13
 800d488:	1524      	asrs	r4, r4, #20
 800d48a:	18e4      	adds	r4, r4, r3
 800d48c:	002b      	movs	r3, r5
 800d48e:	4123      	asrs	r3, r4
 800d490:	9a06      	ldr	r2, [sp, #24]
 800d492:	4912      	ldr	r1, [pc, #72]	@ (800d4dc <__ieee754_pow+0x7c8>)
 800d494:	189b      	adds	r3, r3, r2
 800d496:	005a      	lsls	r2, r3, #1
 800d498:	4c14      	ldr	r4, [pc, #80]	@ (800d4ec <__ieee754_pow+0x7d8>)
 800d49a:	0d52      	lsrs	r2, r2, #21
 800d49c:	1852      	adds	r2, r2, r1
 800d49e:	4114      	asrs	r4, r2
 800d4a0:	401c      	ands	r4, r3
 800d4a2:	0021      	movs	r1, r4
 800d4a4:	2414      	movs	r4, #20
 800d4a6:	031b      	lsls	r3, r3, #12
 800d4a8:	0b1b      	lsrs	r3, r3, #12
 800d4aa:	432b      	orrs	r3, r5
 800d4ac:	1aa2      	subs	r2, r4, r2
 800d4ae:	4113      	asrs	r3, r2
 800d4b0:	9300      	str	r3, [sp, #0]
 800d4b2:	9b06      	ldr	r3, [sp, #24]
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	da02      	bge.n	800d4c0 <__ieee754_pow+0x7ac>
 800d4ba:	9b00      	ldr	r3, [sp, #0]
 800d4bc:	425b      	negs	r3, r3
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	0002      	movs	r2, r0
 800d4c2:	000b      	movs	r3, r1
 800d4c4:	0030      	movs	r0, r6
 800d4c6:	0039      	movs	r1, r7
 800d4c8:	f7f5 f95c 	bl	8002784 <__aeabi_dsub>
 800d4cc:	0006      	movs	r6, r0
 800d4ce:	000f      	movs	r7, r1
 800d4d0:	e065      	b.n	800d59e <__ieee754_pow+0x88a>
 800d4d2:	46c0      	nop			@ (mov r8, r8)
 800d4d4:	7ff00000 	.word	0x7ff00000
 800d4d8:	43400000 	.word	0x43400000
 800d4dc:	fffffc01 	.word	0xfffffc01
 800d4e0:	3ff00000 	.word	0x3ff00000
 800d4e4:	0003988e 	.word	0x0003988e
 800d4e8:	000bb679 	.word	0x000bb679
 800d4ec:	fff00000 	.word	0xfff00000
 800d4f0:	0800e0d8 	.word	0x0800e0d8
 800d4f4:	4a454eef 	.word	0x4a454eef
 800d4f8:	3fca7e28 	.word	0x3fca7e28
 800d4fc:	93c9db65 	.word	0x93c9db65
 800d500:	3fcd864a 	.word	0x3fcd864a
 800d504:	a91d4101 	.word	0xa91d4101
 800d508:	3fd17460 	.word	0x3fd17460
 800d50c:	518f264d 	.word	0x518f264d
 800d510:	3fd55555 	.word	0x3fd55555
 800d514:	db6fabff 	.word	0xdb6fabff
 800d518:	3fdb6db6 	.word	0x3fdb6db6
 800d51c:	33333303 	.word	0x33333303
 800d520:	3fe33333 	.word	0x3fe33333
 800d524:	40080000 	.word	0x40080000
 800d528:	3feec709 	.word	0x3feec709
 800d52c:	dc3a03fd 	.word	0xdc3a03fd
 800d530:	145b01f5 	.word	0x145b01f5
 800d534:	be3e2fe0 	.word	0xbe3e2fe0
 800d538:	0800e0b8 	.word	0x0800e0b8
 800d53c:	0800e0c8 	.word	0x0800e0c8
 800d540:	652b82fe 	.word	0x652b82fe
 800d544:	3c971547 	.word	0x3c971547
 800d548:	fffffc02 	.word	0xfffffc02
 800d54c:	9b01      	ldr	r3, [sp, #4]
 800d54e:	005c      	lsls	r4, r3, #1
 800d550:	4b72      	ldr	r3, [pc, #456]	@ (800d71c <__ieee754_pow+0xa08>)
 800d552:	0864      	lsrs	r4, r4, #1
 800d554:	429c      	cmp	r4, r3
 800d556:	d91c      	bls.n	800d592 <__ieee754_pow+0x87e>
 800d558:	4a71      	ldr	r2, [pc, #452]	@ (800d720 <__ieee754_pow+0xa0c>)
 800d55a:	9b01      	ldr	r3, [sp, #4]
 800d55c:	189b      	adds	r3, r3, r2
 800d55e:	9a00      	ldr	r2, [sp, #0]
 800d560:	4313      	orrs	r3, r2
 800d562:	d008      	beq.n	800d576 <__ieee754_pow+0x862>
 800d564:	9808      	ldr	r0, [sp, #32]
 800d566:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d568:	2300      	movs	r3, #0
 800d56a:	2200      	movs	r2, #0
 800d56c:	f7f2 ff74 	bl	8000458 <__aeabi_dcmplt>
 800d570:	1e43      	subs	r3, r0, #1
 800d572:	4198      	sbcs	r0, r3
 800d574:	e4fc      	b.n	800cf70 <__ieee754_pow+0x25c>
 800d576:	0032      	movs	r2, r6
 800d578:	9800      	ldr	r0, [sp, #0]
 800d57a:	9901      	ldr	r1, [sp, #4]
 800d57c:	003b      	movs	r3, r7
 800d57e:	f7f5 f901 	bl	8002784 <__aeabi_dsub>
 800d582:	9a02      	ldr	r2, [sp, #8]
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	f7f2 ff85 	bl	8000494 <__aeabi_dcmpge>
 800d58a:	2800      	cmp	r0, #0
 800d58c:	d1ea      	bne.n	800d564 <__ieee754_pow+0x850>
 800d58e:	4c65      	ldr	r4, [pc, #404]	@ (800d724 <__ieee754_pow+0xa10>)
 800d590:	e777      	b.n	800d482 <__ieee754_pow+0x76e>
 800d592:	9a04      	ldr	r2, [sp, #16]
 800d594:	4b64      	ldr	r3, [pc, #400]	@ (800d728 <__ieee754_pow+0xa14>)
 800d596:	9200      	str	r2, [sp, #0]
 800d598:	429c      	cmp	r4, r3
 800d59a:	d900      	bls.n	800d59e <__ieee754_pow+0x88a>
 800d59c:	e771      	b.n	800d482 <__ieee754_pow+0x76e>
 800d59e:	9a02      	ldr	r2, [sp, #8]
 800d5a0:	9b03      	ldr	r3, [sp, #12]
 800d5a2:	0030      	movs	r0, r6
 800d5a4:	0039      	movs	r1, r7
 800d5a6:	f7f3 fe7d 	bl	80012a4 <__aeabi_dadd>
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	4b5f      	ldr	r3, [pc, #380]	@ (800d72c <__ieee754_pow+0xa18>)
 800d5b0:	9004      	str	r0, [sp, #16]
 800d5b2:	9105      	str	r1, [sp, #20]
 800d5b4:	f7f4 fe1e 	bl	80021f4 <__aeabi_dmul>
 800d5b8:	0032      	movs	r2, r6
 800d5ba:	003b      	movs	r3, r7
 800d5bc:	9006      	str	r0, [sp, #24]
 800d5be:	9107      	str	r1, [sp, #28]
 800d5c0:	9804      	ldr	r0, [sp, #16]
 800d5c2:	9905      	ldr	r1, [sp, #20]
 800d5c4:	f7f5 f8de 	bl	8002784 <__aeabi_dsub>
 800d5c8:	0002      	movs	r2, r0
 800d5ca:	000b      	movs	r3, r1
 800d5cc:	9802      	ldr	r0, [sp, #8]
 800d5ce:	9903      	ldr	r1, [sp, #12]
 800d5d0:	f7f5 f8d8 	bl	8002784 <__aeabi_dsub>
 800d5d4:	4a56      	ldr	r2, [pc, #344]	@ (800d730 <__ieee754_pow+0xa1c>)
 800d5d6:	4b57      	ldr	r3, [pc, #348]	@ (800d734 <__ieee754_pow+0xa20>)
 800d5d8:	f7f4 fe0c 	bl	80021f4 <__aeabi_dmul>
 800d5dc:	4a56      	ldr	r2, [pc, #344]	@ (800d738 <__ieee754_pow+0xa24>)
 800d5de:	0004      	movs	r4, r0
 800d5e0:	000d      	movs	r5, r1
 800d5e2:	9804      	ldr	r0, [sp, #16]
 800d5e4:	9905      	ldr	r1, [sp, #20]
 800d5e6:	4b55      	ldr	r3, [pc, #340]	@ (800d73c <__ieee754_pow+0xa28>)
 800d5e8:	f7f4 fe04 	bl	80021f4 <__aeabi_dmul>
 800d5ec:	0002      	movs	r2, r0
 800d5ee:	000b      	movs	r3, r1
 800d5f0:	0020      	movs	r0, r4
 800d5f2:	0029      	movs	r1, r5
 800d5f4:	f7f3 fe56 	bl	80012a4 <__aeabi_dadd>
 800d5f8:	0004      	movs	r4, r0
 800d5fa:	000d      	movs	r5, r1
 800d5fc:	0002      	movs	r2, r0
 800d5fe:	000b      	movs	r3, r1
 800d600:	9806      	ldr	r0, [sp, #24]
 800d602:	9907      	ldr	r1, [sp, #28]
 800d604:	f7f3 fe4e 	bl	80012a4 <__aeabi_dadd>
 800d608:	9a06      	ldr	r2, [sp, #24]
 800d60a:	9b07      	ldr	r3, [sp, #28]
 800d60c:	0006      	movs	r6, r0
 800d60e:	000f      	movs	r7, r1
 800d610:	f7f5 f8b8 	bl	8002784 <__aeabi_dsub>
 800d614:	0002      	movs	r2, r0
 800d616:	000b      	movs	r3, r1
 800d618:	0020      	movs	r0, r4
 800d61a:	0029      	movs	r1, r5
 800d61c:	f7f5 f8b2 	bl	8002784 <__aeabi_dsub>
 800d620:	0032      	movs	r2, r6
 800d622:	9002      	str	r0, [sp, #8]
 800d624:	9103      	str	r1, [sp, #12]
 800d626:	003b      	movs	r3, r7
 800d628:	0030      	movs	r0, r6
 800d62a:	0039      	movs	r1, r7
 800d62c:	f7f4 fde2 	bl	80021f4 <__aeabi_dmul>
 800d630:	0004      	movs	r4, r0
 800d632:	000d      	movs	r5, r1
 800d634:	4a42      	ldr	r2, [pc, #264]	@ (800d740 <__ieee754_pow+0xa2c>)
 800d636:	4b43      	ldr	r3, [pc, #268]	@ (800d744 <__ieee754_pow+0xa30>)
 800d638:	f7f4 fddc 	bl	80021f4 <__aeabi_dmul>
 800d63c:	4a42      	ldr	r2, [pc, #264]	@ (800d748 <__ieee754_pow+0xa34>)
 800d63e:	4b43      	ldr	r3, [pc, #268]	@ (800d74c <__ieee754_pow+0xa38>)
 800d640:	f7f5 f8a0 	bl	8002784 <__aeabi_dsub>
 800d644:	0022      	movs	r2, r4
 800d646:	002b      	movs	r3, r5
 800d648:	f7f4 fdd4 	bl	80021f4 <__aeabi_dmul>
 800d64c:	4a40      	ldr	r2, [pc, #256]	@ (800d750 <__ieee754_pow+0xa3c>)
 800d64e:	4b41      	ldr	r3, [pc, #260]	@ (800d754 <__ieee754_pow+0xa40>)
 800d650:	f7f3 fe28 	bl	80012a4 <__aeabi_dadd>
 800d654:	0022      	movs	r2, r4
 800d656:	002b      	movs	r3, r5
 800d658:	f7f4 fdcc 	bl	80021f4 <__aeabi_dmul>
 800d65c:	4a3e      	ldr	r2, [pc, #248]	@ (800d758 <__ieee754_pow+0xa44>)
 800d65e:	4b3f      	ldr	r3, [pc, #252]	@ (800d75c <__ieee754_pow+0xa48>)
 800d660:	f7f5 f890 	bl	8002784 <__aeabi_dsub>
 800d664:	0022      	movs	r2, r4
 800d666:	002b      	movs	r3, r5
 800d668:	f7f4 fdc4 	bl	80021f4 <__aeabi_dmul>
 800d66c:	4a3c      	ldr	r2, [pc, #240]	@ (800d760 <__ieee754_pow+0xa4c>)
 800d66e:	4b3d      	ldr	r3, [pc, #244]	@ (800d764 <__ieee754_pow+0xa50>)
 800d670:	f7f3 fe18 	bl	80012a4 <__aeabi_dadd>
 800d674:	0022      	movs	r2, r4
 800d676:	002b      	movs	r3, r5
 800d678:	f7f4 fdbc 	bl	80021f4 <__aeabi_dmul>
 800d67c:	0002      	movs	r2, r0
 800d67e:	000b      	movs	r3, r1
 800d680:	0030      	movs	r0, r6
 800d682:	0039      	movs	r1, r7
 800d684:	f7f5 f87e 	bl	8002784 <__aeabi_dsub>
 800d688:	0004      	movs	r4, r0
 800d68a:	000d      	movs	r5, r1
 800d68c:	0002      	movs	r2, r0
 800d68e:	000b      	movs	r3, r1
 800d690:	0030      	movs	r0, r6
 800d692:	0039      	movs	r1, r7
 800d694:	f7f4 fdae 	bl	80021f4 <__aeabi_dmul>
 800d698:	2380      	movs	r3, #128	@ 0x80
 800d69a:	9004      	str	r0, [sp, #16]
 800d69c:	9105      	str	r1, [sp, #20]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	0020      	movs	r0, r4
 800d6a2:	0029      	movs	r1, r5
 800d6a4:	05db      	lsls	r3, r3, #23
 800d6a6:	f7f5 f86d 	bl	8002784 <__aeabi_dsub>
 800d6aa:	0002      	movs	r2, r0
 800d6ac:	000b      	movs	r3, r1
 800d6ae:	9804      	ldr	r0, [sp, #16]
 800d6b0:	9905      	ldr	r1, [sp, #20]
 800d6b2:	f7f4 f95b 	bl	800196c <__aeabi_ddiv>
 800d6b6:	9a02      	ldr	r2, [sp, #8]
 800d6b8:	9b03      	ldr	r3, [sp, #12]
 800d6ba:	0004      	movs	r4, r0
 800d6bc:	000d      	movs	r5, r1
 800d6be:	0030      	movs	r0, r6
 800d6c0:	0039      	movs	r1, r7
 800d6c2:	f7f4 fd97 	bl	80021f4 <__aeabi_dmul>
 800d6c6:	9a02      	ldr	r2, [sp, #8]
 800d6c8:	9b03      	ldr	r3, [sp, #12]
 800d6ca:	f7f3 fdeb 	bl	80012a4 <__aeabi_dadd>
 800d6ce:	0002      	movs	r2, r0
 800d6d0:	000b      	movs	r3, r1
 800d6d2:	0020      	movs	r0, r4
 800d6d4:	0029      	movs	r1, r5
 800d6d6:	f7f5 f855 	bl	8002784 <__aeabi_dsub>
 800d6da:	0032      	movs	r2, r6
 800d6dc:	003b      	movs	r3, r7
 800d6de:	f7f5 f851 	bl	8002784 <__aeabi_dsub>
 800d6e2:	0002      	movs	r2, r0
 800d6e4:	000b      	movs	r3, r1
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	491f      	ldr	r1, [pc, #124]	@ (800d768 <__ieee754_pow+0xa54>)
 800d6ea:	f7f5 f84b 	bl	8002784 <__aeabi_dsub>
 800d6ee:	9b00      	ldr	r3, [sp, #0]
 800d6f0:	051b      	lsls	r3, r3, #20
 800d6f2:	185b      	adds	r3, r3, r1
 800d6f4:	151a      	asrs	r2, r3, #20
 800d6f6:	2a00      	cmp	r2, #0
 800d6f8:	dc06      	bgt.n	800d708 <__ieee754_pow+0x9f4>
 800d6fa:	9a00      	ldr	r2, [sp, #0]
 800d6fc:	f000 f83a 	bl	800d774 <scalbn>
 800d700:	9a08      	ldr	r2, [sp, #32]
 800d702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d704:	f7ff fbee 	bl	800cee4 <__ieee754_pow+0x1d0>
 800d708:	0019      	movs	r1, r3
 800d70a:	e7f9      	b.n	800d700 <__ieee754_pow+0x9ec>
 800d70c:	2300      	movs	r3, #0
 800d70e:	4c16      	ldr	r4, [pc, #88]	@ (800d768 <__ieee754_pow+0xa54>)
 800d710:	f7ff fbcb 	bl	800ceaa <__ieee754_pow+0x196>
 800d714:	2300      	movs	r3, #0
 800d716:	2400      	movs	r4, #0
 800d718:	f7ff fbc7 	bl	800ceaa <__ieee754_pow+0x196>
 800d71c:	4090cbff 	.word	0x4090cbff
 800d720:	3f6f3400 	.word	0x3f6f3400
 800d724:	4090cc00 	.word	0x4090cc00
 800d728:	3fe00000 	.word	0x3fe00000
 800d72c:	3fe62e43 	.word	0x3fe62e43
 800d730:	fefa39ef 	.word	0xfefa39ef
 800d734:	3fe62e42 	.word	0x3fe62e42
 800d738:	0ca86c39 	.word	0x0ca86c39
 800d73c:	be205c61 	.word	0xbe205c61
 800d740:	72bea4d0 	.word	0x72bea4d0
 800d744:	3e663769 	.word	0x3e663769
 800d748:	c5d26bf1 	.word	0xc5d26bf1
 800d74c:	3ebbbd41 	.word	0x3ebbbd41
 800d750:	af25de2c 	.word	0xaf25de2c
 800d754:	3f11566a 	.word	0x3f11566a
 800d758:	16bebd93 	.word	0x16bebd93
 800d75c:	3f66c16c 	.word	0x3f66c16c
 800d760:	5555553e 	.word	0x5555553e
 800d764:	3fc55555 	.word	0x3fc55555
 800d768:	3ff00000 	.word	0x3ff00000

0800d76c <fabs>:
 800d76c:	0049      	lsls	r1, r1, #1
 800d76e:	084b      	lsrs	r3, r1, #1
 800d770:	0019      	movs	r1, r3
 800d772:	4770      	bx	lr

0800d774 <scalbn>:
 800d774:	004b      	lsls	r3, r1, #1
 800d776:	b570      	push	{r4, r5, r6, lr}
 800d778:	0d5b      	lsrs	r3, r3, #21
 800d77a:	0014      	movs	r4, r2
 800d77c:	000d      	movs	r5, r1
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d10f      	bne.n	800d7a2 <scalbn+0x2e>
 800d782:	004b      	lsls	r3, r1, #1
 800d784:	085b      	lsrs	r3, r3, #1
 800d786:	4303      	orrs	r3, r0
 800d788:	d012      	beq.n	800d7b0 <scalbn+0x3c>
 800d78a:	4b23      	ldr	r3, [pc, #140]	@ (800d818 <scalbn+0xa4>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	f7f4 fd31 	bl	80021f4 <__aeabi_dmul>
 800d792:	4b22      	ldr	r3, [pc, #136]	@ (800d81c <scalbn+0xa8>)
 800d794:	429c      	cmp	r4, r3
 800d796:	da0c      	bge.n	800d7b2 <scalbn+0x3e>
 800d798:	4a21      	ldr	r2, [pc, #132]	@ (800d820 <scalbn+0xac>)
 800d79a:	4b22      	ldr	r3, [pc, #136]	@ (800d824 <scalbn+0xb0>)
 800d79c:	f7f4 fd2a 	bl	80021f4 <__aeabi_dmul>
 800d7a0:	e006      	b.n	800d7b0 <scalbn+0x3c>
 800d7a2:	4a21      	ldr	r2, [pc, #132]	@ (800d828 <scalbn+0xb4>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d108      	bne.n	800d7ba <scalbn+0x46>
 800d7a8:	0002      	movs	r2, r0
 800d7aa:	000b      	movs	r3, r1
 800d7ac:	f7f3 fd7a 	bl	80012a4 <__aeabi_dadd>
 800d7b0:	bd70      	pop	{r4, r5, r6, pc}
 800d7b2:	000d      	movs	r5, r1
 800d7b4:	004b      	lsls	r3, r1, #1
 800d7b6:	0d5b      	lsrs	r3, r3, #21
 800d7b8:	3b36      	subs	r3, #54	@ 0x36
 800d7ba:	4a1c      	ldr	r2, [pc, #112]	@ (800d82c <scalbn+0xb8>)
 800d7bc:	4294      	cmp	r4, r2
 800d7be:	dd0a      	ble.n	800d7d6 <scalbn+0x62>
 800d7c0:	4c1b      	ldr	r4, [pc, #108]	@ (800d830 <scalbn+0xbc>)
 800d7c2:	4d1c      	ldr	r5, [pc, #112]	@ (800d834 <scalbn+0xc0>)
 800d7c4:	2900      	cmp	r1, #0
 800d7c6:	da01      	bge.n	800d7cc <scalbn+0x58>
 800d7c8:	4c19      	ldr	r4, [pc, #100]	@ (800d830 <scalbn+0xbc>)
 800d7ca:	4d1b      	ldr	r5, [pc, #108]	@ (800d838 <scalbn+0xc4>)
 800d7cc:	4a18      	ldr	r2, [pc, #96]	@ (800d830 <scalbn+0xbc>)
 800d7ce:	4b19      	ldr	r3, [pc, #100]	@ (800d834 <scalbn+0xc0>)
 800d7d0:	0020      	movs	r0, r4
 800d7d2:	0029      	movs	r1, r5
 800d7d4:	e7e2      	b.n	800d79c <scalbn+0x28>
 800d7d6:	18e2      	adds	r2, r4, r3
 800d7d8:	4b18      	ldr	r3, [pc, #96]	@ (800d83c <scalbn+0xc8>)
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	dcf0      	bgt.n	800d7c0 <scalbn+0x4c>
 800d7de:	2a00      	cmp	r2, #0
 800d7e0:	dd05      	ble.n	800d7ee <scalbn+0x7a>
 800d7e2:	4b17      	ldr	r3, [pc, #92]	@ (800d840 <scalbn+0xcc>)
 800d7e4:	0512      	lsls	r2, r2, #20
 800d7e6:	402b      	ands	r3, r5
 800d7e8:	431a      	orrs	r2, r3
 800d7ea:	0011      	movs	r1, r2
 800d7ec:	e7e0      	b.n	800d7b0 <scalbn+0x3c>
 800d7ee:	0013      	movs	r3, r2
 800d7f0:	3335      	adds	r3, #53	@ 0x35
 800d7f2:	da08      	bge.n	800d806 <scalbn+0x92>
 800d7f4:	4c0a      	ldr	r4, [pc, #40]	@ (800d820 <scalbn+0xac>)
 800d7f6:	4d0b      	ldr	r5, [pc, #44]	@ (800d824 <scalbn+0xb0>)
 800d7f8:	2900      	cmp	r1, #0
 800d7fa:	da01      	bge.n	800d800 <scalbn+0x8c>
 800d7fc:	4c08      	ldr	r4, [pc, #32]	@ (800d820 <scalbn+0xac>)
 800d7fe:	4d11      	ldr	r5, [pc, #68]	@ (800d844 <scalbn+0xd0>)
 800d800:	4a07      	ldr	r2, [pc, #28]	@ (800d820 <scalbn+0xac>)
 800d802:	4b08      	ldr	r3, [pc, #32]	@ (800d824 <scalbn+0xb0>)
 800d804:	e7e4      	b.n	800d7d0 <scalbn+0x5c>
 800d806:	4b0e      	ldr	r3, [pc, #56]	@ (800d840 <scalbn+0xcc>)
 800d808:	3236      	adds	r2, #54	@ 0x36
 800d80a:	401d      	ands	r5, r3
 800d80c:	0512      	lsls	r2, r2, #20
 800d80e:	432a      	orrs	r2, r5
 800d810:	0011      	movs	r1, r2
 800d812:	4b0d      	ldr	r3, [pc, #52]	@ (800d848 <scalbn+0xd4>)
 800d814:	2200      	movs	r2, #0
 800d816:	e7c1      	b.n	800d79c <scalbn+0x28>
 800d818:	43500000 	.word	0x43500000
 800d81c:	ffff3cb0 	.word	0xffff3cb0
 800d820:	c2f8f359 	.word	0xc2f8f359
 800d824:	01a56e1f 	.word	0x01a56e1f
 800d828:	000007ff 	.word	0x000007ff
 800d82c:	0000c350 	.word	0x0000c350
 800d830:	8800759c 	.word	0x8800759c
 800d834:	7e37e43c 	.word	0x7e37e43c
 800d838:	fe37e43c 	.word	0xfe37e43c
 800d83c:	000007fe 	.word	0x000007fe
 800d840:	800fffff 	.word	0x800fffff
 800d844:	81a56e1f 	.word	0x81a56e1f
 800d848:	3c900000 	.word	0x3c900000

0800d84c <with_errno>:
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	000d      	movs	r5, r1
 800d850:	0016      	movs	r6, r2
 800d852:	0004      	movs	r4, r0
 800d854:	f7fb fd94 	bl	8009380 <__errno>
 800d858:	0029      	movs	r1, r5
 800d85a:	6006      	str	r6, [r0, #0]
 800d85c:	0020      	movs	r0, r4
 800d85e:	bd70      	pop	{r4, r5, r6, pc}

0800d860 <xflow>:
 800d860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d862:	0014      	movs	r4, r2
 800d864:	001d      	movs	r5, r3
 800d866:	2800      	cmp	r0, #0
 800d868:	d002      	beq.n	800d870 <xflow+0x10>
 800d86a:	2180      	movs	r1, #128	@ 0x80
 800d86c:	0609      	lsls	r1, r1, #24
 800d86e:	185b      	adds	r3, r3, r1
 800d870:	9200      	str	r2, [sp, #0]
 800d872:	9301      	str	r3, [sp, #4]
 800d874:	9a00      	ldr	r2, [sp, #0]
 800d876:	9b01      	ldr	r3, [sp, #4]
 800d878:	0020      	movs	r0, r4
 800d87a:	0029      	movs	r1, r5
 800d87c:	f7f4 fcba 	bl	80021f4 <__aeabi_dmul>
 800d880:	2222      	movs	r2, #34	@ 0x22
 800d882:	f7ff ffe3 	bl	800d84c <with_errno>
 800d886:	b003      	add	sp, #12
 800d888:	bd30      	pop	{r4, r5, pc}

0800d88a <__math_uflow>:
 800d88a:	2380      	movs	r3, #128	@ 0x80
 800d88c:	b510      	push	{r4, lr}
 800d88e:	2200      	movs	r2, #0
 800d890:	055b      	lsls	r3, r3, #21
 800d892:	f7ff ffe5 	bl	800d860 <xflow>
 800d896:	bd10      	pop	{r4, pc}

0800d898 <__math_oflow>:
 800d898:	23e0      	movs	r3, #224	@ 0xe0
 800d89a:	b510      	push	{r4, lr}
 800d89c:	2200      	movs	r2, #0
 800d89e:	05db      	lsls	r3, r3, #23
 800d8a0:	f7ff ffde 	bl	800d860 <xflow>
 800d8a4:	bd10      	pop	{r4, pc}
	...

0800d8a8 <__ieee754_sqrt>:
 800d8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8aa:	000a      	movs	r2, r1
 800d8ac:	000d      	movs	r5, r1
 800d8ae:	496d      	ldr	r1, [pc, #436]	@ (800da64 <__ieee754_sqrt+0x1bc>)
 800d8b0:	0004      	movs	r4, r0
 800d8b2:	0003      	movs	r3, r0
 800d8b4:	0008      	movs	r0, r1
 800d8b6:	b087      	sub	sp, #28
 800d8b8:	4028      	ands	r0, r5
 800d8ba:	4288      	cmp	r0, r1
 800d8bc:	d111      	bne.n	800d8e2 <__ieee754_sqrt+0x3a>
 800d8be:	0022      	movs	r2, r4
 800d8c0:	002b      	movs	r3, r5
 800d8c2:	0020      	movs	r0, r4
 800d8c4:	0029      	movs	r1, r5
 800d8c6:	f7f4 fc95 	bl	80021f4 <__aeabi_dmul>
 800d8ca:	0002      	movs	r2, r0
 800d8cc:	000b      	movs	r3, r1
 800d8ce:	0020      	movs	r0, r4
 800d8d0:	0029      	movs	r1, r5
 800d8d2:	f7f3 fce7 	bl	80012a4 <__aeabi_dadd>
 800d8d6:	0004      	movs	r4, r0
 800d8d8:	000d      	movs	r5, r1
 800d8da:	0020      	movs	r0, r4
 800d8dc:	0029      	movs	r1, r5
 800d8de:	b007      	add	sp, #28
 800d8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8e2:	2d00      	cmp	r5, #0
 800d8e4:	dc11      	bgt.n	800d90a <__ieee754_sqrt+0x62>
 800d8e6:	0069      	lsls	r1, r5, #1
 800d8e8:	0849      	lsrs	r1, r1, #1
 800d8ea:	4321      	orrs	r1, r4
 800d8ec:	d0f5      	beq.n	800d8da <__ieee754_sqrt+0x32>
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	4285      	cmp	r5, r0
 800d8f2:	d010      	beq.n	800d916 <__ieee754_sqrt+0x6e>
 800d8f4:	0022      	movs	r2, r4
 800d8f6:	002b      	movs	r3, r5
 800d8f8:	0020      	movs	r0, r4
 800d8fa:	0029      	movs	r1, r5
 800d8fc:	f7f4 ff42 	bl	8002784 <__aeabi_dsub>
 800d900:	0002      	movs	r2, r0
 800d902:	000b      	movs	r3, r1
 800d904:	f7f4 f832 	bl	800196c <__aeabi_ddiv>
 800d908:	e7e5      	b.n	800d8d6 <__ieee754_sqrt+0x2e>
 800d90a:	1528      	asrs	r0, r5, #20
 800d90c:	d115      	bne.n	800d93a <__ieee754_sqrt+0x92>
 800d90e:	2480      	movs	r4, #128	@ 0x80
 800d910:	2100      	movs	r1, #0
 800d912:	0364      	lsls	r4, r4, #13
 800d914:	e007      	b.n	800d926 <__ieee754_sqrt+0x7e>
 800d916:	0ada      	lsrs	r2, r3, #11
 800d918:	3815      	subs	r0, #21
 800d91a:	055b      	lsls	r3, r3, #21
 800d91c:	2a00      	cmp	r2, #0
 800d91e:	d0fa      	beq.n	800d916 <__ieee754_sqrt+0x6e>
 800d920:	e7f5      	b.n	800d90e <__ieee754_sqrt+0x66>
 800d922:	0052      	lsls	r2, r2, #1
 800d924:	3101      	adds	r1, #1
 800d926:	4222      	tst	r2, r4
 800d928:	d0fb      	beq.n	800d922 <__ieee754_sqrt+0x7a>
 800d92a:	1e4c      	subs	r4, r1, #1
 800d92c:	1b00      	subs	r0, r0, r4
 800d92e:	2420      	movs	r4, #32
 800d930:	001d      	movs	r5, r3
 800d932:	1a64      	subs	r4, r4, r1
 800d934:	40e5      	lsrs	r5, r4
 800d936:	408b      	lsls	r3, r1
 800d938:	432a      	orrs	r2, r5
 800d93a:	494b      	ldr	r1, [pc, #300]	@ (800da68 <__ieee754_sqrt+0x1c0>)
 800d93c:	0312      	lsls	r2, r2, #12
 800d93e:	1844      	adds	r4, r0, r1
 800d940:	2180      	movs	r1, #128	@ 0x80
 800d942:	0b12      	lsrs	r2, r2, #12
 800d944:	0349      	lsls	r1, r1, #13
 800d946:	4311      	orrs	r1, r2
 800d948:	07c0      	lsls	r0, r0, #31
 800d94a:	d403      	bmi.n	800d954 <__ieee754_sqrt+0xac>
 800d94c:	0fda      	lsrs	r2, r3, #31
 800d94e:	0049      	lsls	r1, r1, #1
 800d950:	1851      	adds	r1, r2, r1
 800d952:	005b      	lsls	r3, r3, #1
 800d954:	2500      	movs	r5, #0
 800d956:	1062      	asrs	r2, r4, #1
 800d958:	0049      	lsls	r1, r1, #1
 800d95a:	2480      	movs	r4, #128	@ 0x80
 800d95c:	9205      	str	r2, [sp, #20]
 800d95e:	0fda      	lsrs	r2, r3, #31
 800d960:	1852      	adds	r2, r2, r1
 800d962:	2016      	movs	r0, #22
 800d964:	0029      	movs	r1, r5
 800d966:	005b      	lsls	r3, r3, #1
 800d968:	03a4      	lsls	r4, r4, #14
 800d96a:	190e      	adds	r6, r1, r4
 800d96c:	4296      	cmp	r6, r2
 800d96e:	dc02      	bgt.n	800d976 <__ieee754_sqrt+0xce>
 800d970:	1931      	adds	r1, r6, r4
 800d972:	1b92      	subs	r2, r2, r6
 800d974:	192d      	adds	r5, r5, r4
 800d976:	0fde      	lsrs	r6, r3, #31
 800d978:	0052      	lsls	r2, r2, #1
 800d97a:	3801      	subs	r0, #1
 800d97c:	1992      	adds	r2, r2, r6
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	0864      	lsrs	r4, r4, #1
 800d982:	2800      	cmp	r0, #0
 800d984:	d1f1      	bne.n	800d96a <__ieee754_sqrt+0xc2>
 800d986:	2620      	movs	r6, #32
 800d988:	2780      	movs	r7, #128	@ 0x80
 800d98a:	0004      	movs	r4, r0
 800d98c:	9604      	str	r6, [sp, #16]
 800d98e:	063f      	lsls	r7, r7, #24
 800d990:	19c6      	adds	r6, r0, r7
 800d992:	46b4      	mov	ip, r6
 800d994:	4291      	cmp	r1, r2
 800d996:	db02      	blt.n	800d99e <__ieee754_sqrt+0xf6>
 800d998:	d114      	bne.n	800d9c4 <__ieee754_sqrt+0x11c>
 800d99a:	429e      	cmp	r6, r3
 800d99c:	d812      	bhi.n	800d9c4 <__ieee754_sqrt+0x11c>
 800d99e:	4660      	mov	r0, ip
 800d9a0:	4666      	mov	r6, ip
 800d9a2:	19c0      	adds	r0, r0, r7
 800d9a4:	9100      	str	r1, [sp, #0]
 800d9a6:	2e00      	cmp	r6, #0
 800d9a8:	da03      	bge.n	800d9b2 <__ieee754_sqrt+0x10a>
 800d9aa:	43c6      	mvns	r6, r0
 800d9ac:	0ff6      	lsrs	r6, r6, #31
 800d9ae:	198e      	adds	r6, r1, r6
 800d9b0:	9600      	str	r6, [sp, #0]
 800d9b2:	1a52      	subs	r2, r2, r1
 800d9b4:	4563      	cmp	r3, ip
 800d9b6:	4189      	sbcs	r1, r1
 800d9b8:	4249      	negs	r1, r1
 800d9ba:	1a52      	subs	r2, r2, r1
 800d9bc:	4661      	mov	r1, ip
 800d9be:	1a5b      	subs	r3, r3, r1
 800d9c0:	9900      	ldr	r1, [sp, #0]
 800d9c2:	19e4      	adds	r4, r4, r7
 800d9c4:	0fde      	lsrs	r6, r3, #31
 800d9c6:	0052      	lsls	r2, r2, #1
 800d9c8:	1992      	adds	r2, r2, r6
 800d9ca:	9e04      	ldr	r6, [sp, #16]
 800d9cc:	005b      	lsls	r3, r3, #1
 800d9ce:	3e01      	subs	r6, #1
 800d9d0:	087f      	lsrs	r7, r7, #1
 800d9d2:	9604      	str	r6, [sp, #16]
 800d9d4:	2e00      	cmp	r6, #0
 800d9d6:	d1db      	bne.n	800d990 <__ieee754_sqrt+0xe8>
 800d9d8:	431a      	orrs	r2, r3
 800d9da:	d01f      	beq.n	800da1c <__ieee754_sqrt+0x174>
 800d9dc:	4e23      	ldr	r6, [pc, #140]	@ (800da6c <__ieee754_sqrt+0x1c4>)
 800d9de:	4f24      	ldr	r7, [pc, #144]	@ (800da70 <__ieee754_sqrt+0x1c8>)
 800d9e0:	6830      	ldr	r0, [r6, #0]
 800d9e2:	6871      	ldr	r1, [r6, #4]
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	9200      	str	r2, [sp, #0]
 800d9ea:	9301      	str	r3, [sp, #4]
 800d9ec:	6832      	ldr	r2, [r6, #0]
 800d9ee:	6873      	ldr	r3, [r6, #4]
 800d9f0:	9202      	str	r2, [sp, #8]
 800d9f2:	9303      	str	r3, [sp, #12]
 800d9f4:	9a00      	ldr	r2, [sp, #0]
 800d9f6:	9b01      	ldr	r3, [sp, #4]
 800d9f8:	f7f4 fec4 	bl	8002784 <__aeabi_dsub>
 800d9fc:	0002      	movs	r2, r0
 800d9fe:	000b      	movs	r3, r1
 800da00:	9802      	ldr	r0, [sp, #8]
 800da02:	9903      	ldr	r1, [sp, #12]
 800da04:	f7f2 fd32 	bl	800046c <__aeabi_dcmple>
 800da08:	2800      	cmp	r0, #0
 800da0a:	d007      	beq.n	800da1c <__ieee754_sqrt+0x174>
 800da0c:	6830      	ldr	r0, [r6, #0]
 800da0e:	6871      	ldr	r1, [r6, #4]
 800da10:	683a      	ldr	r2, [r7, #0]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	1c67      	adds	r7, r4, #1
 800da16:	d10f      	bne.n	800da38 <__ieee754_sqrt+0x190>
 800da18:	9c04      	ldr	r4, [sp, #16]
 800da1a:	3501      	adds	r5, #1
 800da1c:	4b15      	ldr	r3, [pc, #84]	@ (800da74 <__ieee754_sqrt+0x1cc>)
 800da1e:	106a      	asrs	r2, r5, #1
 800da20:	18d2      	adds	r2, r2, r3
 800da22:	0863      	lsrs	r3, r4, #1
 800da24:	07ed      	lsls	r5, r5, #31
 800da26:	d502      	bpl.n	800da2e <__ieee754_sqrt+0x186>
 800da28:	2180      	movs	r1, #128	@ 0x80
 800da2a:	0609      	lsls	r1, r1, #24
 800da2c:	430b      	orrs	r3, r1
 800da2e:	9905      	ldr	r1, [sp, #20]
 800da30:	001c      	movs	r4, r3
 800da32:	0509      	lsls	r1, r1, #20
 800da34:	188d      	adds	r5, r1, r2
 800da36:	e750      	b.n	800d8da <__ieee754_sqrt+0x32>
 800da38:	f7f3 fc34 	bl	80012a4 <__aeabi_dadd>
 800da3c:	6877      	ldr	r7, [r6, #4]
 800da3e:	6836      	ldr	r6, [r6, #0]
 800da40:	0002      	movs	r2, r0
 800da42:	000b      	movs	r3, r1
 800da44:	0030      	movs	r0, r6
 800da46:	0039      	movs	r1, r7
 800da48:	f7f2 fd06 	bl	8000458 <__aeabi_dcmplt>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d004      	beq.n	800da5a <__ieee754_sqrt+0x1b2>
 800da50:	3402      	adds	r4, #2
 800da52:	4263      	negs	r3, r4
 800da54:	4163      	adcs	r3, r4
 800da56:	18ed      	adds	r5, r5, r3
 800da58:	e7e0      	b.n	800da1c <__ieee754_sqrt+0x174>
 800da5a:	2301      	movs	r3, #1
 800da5c:	3401      	adds	r4, #1
 800da5e:	439c      	bics	r4, r3
 800da60:	e7dc      	b.n	800da1c <__ieee754_sqrt+0x174>
 800da62:	46c0      	nop			@ (mov r8, r8)
 800da64:	7ff00000 	.word	0x7ff00000
 800da68:	fffffc01 	.word	0xfffffc01
 800da6c:	200001f8 	.word	0x200001f8
 800da70:	200001f0 	.word	0x200001f0
 800da74:	3fe00000 	.word	0x3fe00000

0800da78 <_init>:
 800da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7a:	46c0      	nop			@ (mov r8, r8)
 800da7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da7e:	bc08      	pop	{r3}
 800da80:	469e      	mov	lr, r3
 800da82:	4770      	bx	lr

0800da84 <_fini>:
 800da84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da86:	46c0      	nop			@ (mov r8, r8)
 800da88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da8a:	bc08      	pop	{r3}
 800da8c:	469e      	mov	lr, r3
 800da8e:	4770      	bx	lr
