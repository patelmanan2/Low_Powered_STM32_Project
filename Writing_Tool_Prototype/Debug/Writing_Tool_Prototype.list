
Writing_Tool_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a20  0800e770  0800e770  0001e770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f190  0800f190  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f190  0800f190  0001f190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f198  0800f198  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f198  0800f198  0001f198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f19c  0800f19c  0001f19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f1a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200001ec  0800f38c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800f38c  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b263  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023bb  00000000  00000000  0002b4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002d878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008cb  00000000  00000000  0002e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001365e  00000000  00000000  0002ece3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f67  00000000  00000000  00042341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00069cd1  00000000  00000000  000532a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ee0  00000000  00000000  000bcf7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000c0e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e754 	.word	0x0800e754

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800e754 	.word	0x0800e754

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fbb5 	bl	8001bac <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fb05 	bl	8001a5c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fba7 	bl	8001bac <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb9d 	bl	8001bac <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fb2d 	bl	8001ae0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fb23 	bl	8001ae0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 f9ed 	bl	8002938 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fe46 	bl	80021f8 <__aeabi_dsub>
 800056c:	f002 f9e4 	bl	8002938 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fb55 	bl	8001c74 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fa18 	bl	8002a04 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fb4c 	bl	8001c74 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fe08 	bl	80021f8 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 f9d1 	bl	80029a4 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fb35 	bl	8001c74 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 f9f8 	bl	8002a04 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fbd2 	bl	8000dc0 <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 faf0 	bl	8002c28 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 faeb 	bl	8002c28 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fdiv>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0245      	lsls	r5, r0, #9
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	0047      	lsls	r7, r0, #1
 80007ca:	1c0c      	adds	r4, r1, #0
 80007cc:	0a6d      	lsrs	r5, r5, #9
 80007ce:	0e3f      	lsrs	r7, r7, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2f00      	cmp	r7, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fdiv+0x1c>
 80007d6:	e06f      	b.n	80008b8 <__aeabi_fdiv+0xfc>
 80007d8:	2fff      	cmp	r7, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x22>
 80007dc:	e074      	b.n	80008c8 <__aeabi_fdiv+0x10c>
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00ed      	lsls	r5, r5, #3
 80007e8:	04d2      	lsls	r2, r2, #19
 80007ea:	4315      	orrs	r5, r2
 80007ec:	3f7f      	subs	r7, #127	; 0x7f
 80007ee:	0263      	lsls	r3, r4, #9
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	0063      	lsls	r3, r4, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fe4      	lsrs	r4, r4, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d04d      	beq.n	800089a <__aeabi_fdiv+0xde>
 80007fe:	2bff      	cmp	r3, #255	; 0xff
 8000800:	d045      	beq.n	800088e <__aeabi_fdiv+0xd2>
 8000802:	4642      	mov	r2, r8
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	4311      	orrs	r1, r2
 800080c:	4688      	mov	r8, r1
 800080e:	2200      	movs	r2, #0
 8000810:	3b7f      	subs	r3, #127	; 0x7f
 8000812:	0031      	movs	r1, r6
 8000814:	1aff      	subs	r7, r7, r3
 8000816:	464b      	mov	r3, r9
 8000818:	4061      	eors	r1, r4
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d900      	bls.n	8000822 <__aeabi_fdiv+0x66>
 8000820:	e0b8      	b.n	8000994 <__aeabi_fdiv+0x1d8>
 8000822:	4870      	ldr	r0, [pc, #448]	; (80009e4 <__aeabi_fdiv+0x228>)
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	58c3      	ldr	r3, [r0, r3]
 8000828:	469f      	mov	pc, r3
 800082a:	2300      	movs	r3, #0
 800082c:	4698      	mov	r8, r3
 800082e:	0026      	movs	r6, r4
 8000830:	4645      	mov	r5, r8
 8000832:	4692      	mov	sl, r2
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d100      	bne.n	800083c <__aeabi_fdiv+0x80>
 800083a:	e08d      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800083c:	2b03      	cmp	r3, #3
 800083e:	d100      	bne.n	8000842 <__aeabi_fdiv+0x86>
 8000840:	e0a1      	b.n	8000986 <__aeabi_fdiv+0x1ca>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d018      	beq.n	8000878 <__aeabi_fdiv+0xbc>
 8000846:	003b      	movs	r3, r7
 8000848:	337f      	adds	r3, #127	; 0x7f
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd6d      	ble.n	800092a <__aeabi_fdiv+0x16e>
 800084e:	076a      	lsls	r2, r5, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0xa0>
 8000852:	220f      	movs	r2, #15
 8000854:	402a      	ands	r2, r5
 8000856:	2a04      	cmp	r2, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0xa0>
 800085a:	3504      	adds	r5, #4
 800085c:	012a      	lsls	r2, r5, #4
 800085e:	d503      	bpl.n	8000868 <__aeabi_fdiv+0xac>
 8000860:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <__aeabi_fdiv+0x22c>)
 8000862:	401d      	ands	r5, r3
 8000864:	003b      	movs	r3, r7
 8000866:	3380      	adds	r3, #128	; 0x80
 8000868:	2bfe      	cmp	r3, #254	; 0xfe
 800086a:	dd00      	ble.n	800086e <__aeabi_fdiv+0xb2>
 800086c:	e074      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800086e:	01aa      	lsls	r2, r5, #6
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	e002      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000876:	000e      	movs	r6, r1
 8000878:	2000      	movs	r0, #0
 800087a:	2200      	movs	r2, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	07f6      	lsls	r6, r6, #31
 8000880:	4310      	orrs	r0, r2
 8000882:	4330      	orrs	r0, r6
 8000884:	bce0      	pop	{r5, r6, r7}
 8000886:	46ba      	mov	sl, r7
 8000888:	46b1      	mov	r9, r6
 800088a:	46a8      	mov	r8, r5
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	4643      	mov	r3, r8
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <__aeabi_fdiv+0x158>
 8000894:	2202      	movs	r2, #2
 8000896:	3fff      	subs	r7, #255	; 0xff
 8000898:	e003      	b.n	80008a2 <__aeabi_fdiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12d      	bne.n	80008fc <__aeabi_fdiv+0x140>
 80008a0:	2201      	movs	r2, #1
 80008a2:	0031      	movs	r1, r6
 80008a4:	464b      	mov	r3, r9
 80008a6:	4061      	eors	r1, r4
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4313      	orrs	r3, r2
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d838      	bhi.n	8000922 <__aeabi_fdiv+0x166>
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <__aeabi_fdiv+0x230>)
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	58c3      	ldr	r3, [r0, r3]
 80008b6:	469f      	mov	pc, r3
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d113      	bne.n	80008e4 <__aeabi_fdiv+0x128>
 80008bc:	2304      	movs	r3, #4
 80008be:	4699      	mov	r9, r3
 80008c0:	3b03      	subs	r3, #3
 80008c2:	2700      	movs	r7, #0
 80008c4:	469a      	mov	sl, r3
 80008c6:	e792      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d105      	bne.n	80008d8 <__aeabi_fdiv+0x11c>
 80008cc:	2308      	movs	r3, #8
 80008ce:	4699      	mov	r9, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	27ff      	movs	r7, #255	; 0xff
 80008d4:	469a      	mov	sl, r3
 80008d6:	e78a      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008d8:	230c      	movs	r3, #12
 80008da:	4699      	mov	r9, r3
 80008dc:	3b09      	subs	r3, #9
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e784      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008e4:	0028      	movs	r0, r5
 80008e6:	f002 f981 	bl	8002bec <__clzsi2>
 80008ea:	2776      	movs	r7, #118	; 0x76
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409d      	lsls	r5, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	427f      	negs	r7, r7
 80008f4:	4699      	mov	r9, r3
 80008f6:	469a      	mov	sl, r3
 80008f8:	1a3f      	subs	r7, r7, r0
 80008fa:	e778      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008fc:	4640      	mov	r0, r8
 80008fe:	f002 f975 	bl	8002bec <__clzsi2>
 8000902:	4642      	mov	r2, r8
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409a      	lsls	r2, r3
 8000908:	2376      	movs	r3, #118	; 0x76
 800090a:	425b      	negs	r3, r3
 800090c:	4690      	mov	r8, r2
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	2200      	movs	r2, #0
 8000912:	e77e      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000914:	2303      	movs	r3, #3
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	33fc      	adds	r3, #252	; 0xfc
 800091e:	2203      	movs	r2, #3
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000922:	000e      	movs	r6, r1
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2200      	movs	r2, #0
 8000928:	e7a8      	b.n	800087c <__aeabi_fdiv+0xc0>
 800092a:	2201      	movs	r2, #1
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dca2      	bgt.n	8000878 <__aeabi_fdiv+0xbc>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	002a      	movs	r2, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40da      	lsrs	r2, r3
 800093a:	1e6b      	subs	r3, r5, #1
 800093c:	419d      	sbcs	r5, r3
 800093e:	4315      	orrs	r5, r2
 8000940:	076a      	lsls	r2, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x192>
 8000944:	220f      	movs	r2, #15
 8000946:	402a      	ands	r2, r5
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x192>
 800094c:	3504      	adds	r5, #4
 800094e:	016a      	lsls	r2, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x220>
 8000952:	2001      	movs	r0, #1
 8000954:	2200      	movs	r2, #0
 8000956:	e791      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2200      	movs	r2, #0
 800095c:	e78e      	b.n	800087c <__aeabi_fdiv+0xc0>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	e789      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4215      	tst	r5, r2
 8000972:	d008      	beq.n	8000986 <__aeabi_fdiv+0x1ca>
 8000974:	4643      	mov	r3, r8
 8000976:	4213      	tst	r3, r2
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0x1ca>
 800097a:	431a      	orrs	r2, r3
 800097c:	0252      	lsls	r2, r2, #9
 800097e:	0026      	movs	r6, r4
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	0a52      	lsrs	r2, r2, #9
 8000984:	e77a      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	03d2      	lsls	r2, r2, #15
 800098a:	432a      	orrs	r2, r5
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	0a52      	lsrs	r2, r2, #9
 8000992:	e773      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000994:	4642      	mov	r2, r8
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	0155      	lsls	r5, r2, #5
 800099a:	42ab      	cmp	r3, r5
 800099c:	d21a      	bcs.n	80009d4 <__aeabi_fdiv+0x218>
 800099e:	201b      	movs	r0, #27
 80009a0:	2200      	movs	r2, #0
 80009a2:	3f01      	subs	r7, #1
 80009a4:	2601      	movs	r6, #1
 80009a6:	001c      	movs	r4, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	db01      	blt.n	80009b4 <__aeabi_fdiv+0x1f8>
 80009b0:	429d      	cmp	r5, r3
 80009b2:	d801      	bhi.n	80009b8 <__aeabi_fdiv+0x1fc>
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	4332      	orrs	r2, r6
 80009b8:	3801      	subs	r0, #1
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1f3      	bne.n	80009a6 <__aeabi_fdiv+0x1ea>
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	4183      	sbcs	r3, r0
 80009c2:	4313      	orrs	r3, r2
 80009c4:	001d      	movs	r5, r3
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	000e      	movs	r6, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x216>
 80009d0:	e73d      	b.n	800084e <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x16e>
 80009d4:	201a      	movs	r0, #26
 80009d6:	2201      	movs	r2, #1
 80009d8:	1b5b      	subs	r3, r3, r5
 80009da:	e7e3      	b.n	80009a4 <__aeabi_fdiv+0x1e8>
 80009dc:	01aa      	lsls	r2, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	e74b      	b.n	800087c <__aeabi_fdiv+0xc0>
 80009e4:	0800e7f0 	.word	0x0800e7f0
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	0800e830 	.word	0x0800e830

080009f0 <__aeabi_fmul>:
 80009f0:	0243      	lsls	r3, r0, #9
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464f      	mov	r7, r9
 80009f8:	4646      	mov	r6, r8
 80009fa:	4699      	mov	r9, r3
 80009fc:	46d6      	mov	lr, sl
 80009fe:	0fc3      	lsrs	r3, r0, #31
 8000a00:	0045      	lsls	r5, r0, #1
 8000a02:	4698      	mov	r8, r3
 8000a04:	b5c0      	push	{r6, r7, lr}
 8000a06:	464b      	mov	r3, r9
 8000a08:	1c0f      	adds	r7, r1, #0
 8000a0a:	0e2d      	lsrs	r5, r5, #24
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fmul+0x20>
 8000a0e:	e0cb      	b.n	8000ba8 <__aeabi_fmul+0x1b8>
 8000a10:	2dff      	cmp	r5, #255	; 0xff
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fmul+0x26>
 8000a14:	e0cf      	b.n	8000bb6 <__aeabi_fmul+0x1c6>
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	04d2      	lsls	r2, r2, #19
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	2300      	movs	r3, #0
 8000a20:	4691      	mov	r9, r2
 8000a22:	2600      	movs	r6, #0
 8000a24:	469a      	mov	sl, r3
 8000a26:	3d7f      	subs	r5, #127	; 0x7f
 8000a28:	027c      	lsls	r4, r7, #9
 8000a2a:	007b      	lsls	r3, r7, #1
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e1b      	lsrs	r3, r3, #24
 8000a30:	0fff      	lsrs	r7, r7, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fmul+0x48>
 8000a36:	e0a9      	b.n	8000b8c <__aeabi_fmul+0x19c>
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d011      	beq.n	8000a60 <__aeabi_fmul+0x70>
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	00e4      	lsls	r4, r4, #3
 8000a40:	04d2      	lsls	r2, r2, #19
 8000a42:	4314      	orrs	r4, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	3b7f      	subs	r3, #127	; 0x7f
 8000a48:	195b      	adds	r3, r3, r5
 8000a4a:	407a      	eors	r2, r7
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	1c5d      	adds	r5, r3, #1
 8000a52:	2e0a      	cmp	r6, #10
 8000a54:	dd13      	ble.n	8000a7e <__aeabi_fmul+0x8e>
 8000a56:	003a      	movs	r2, r7
 8000a58:	2e0b      	cmp	r6, #11
 8000a5a:	d047      	beq.n	8000aec <__aeabi_fmul+0xfc>
 8000a5c:	4647      	mov	r7, r8
 8000a5e:	e03f      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000a60:	002b      	movs	r3, r5
 8000a62:	33ff      	adds	r3, #255	; 0xff
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d11e      	bne.n	8000aa6 <__aeabi_fmul+0xb6>
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4316      	orrs	r6, r2
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	3501      	adds	r5, #1
 8000a70:	407a      	eors	r2, r7
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	35ff      	adds	r5, #255	; 0xff
 8000a76:	2e0a      	cmp	r6, #10
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_fmul+0x8c>
 8000a7a:	e0e4      	b.n	8000c46 <__aeabi_fmul+0x256>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	2e02      	cmp	r6, #2
 8000a80:	dc1c      	bgt.n	8000abc <__aeabi_fmul+0xcc>
 8000a82:	3e01      	subs	r6, #1
 8000a84:	2e01      	cmp	r6, #1
 8000a86:	d842      	bhi.n	8000b0e <__aeabi_fmul+0x11e>
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d03d      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000a8c:	2801      	cmp	r0, #1
 8000a8e:	d166      	bne.n	8000b5e <__aeabi_fmul+0x16e>
 8000a90:	2000      	movs	r0, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	05c0      	lsls	r0, r0, #23
 8000a96:	4308      	orrs	r0, r1
 8000a98:	07d2      	lsls	r2, r2, #31
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	bce0      	pop	{r5, r6, r7}
 8000a9e:	46ba      	mov	sl, r7
 8000aa0:	46b1      	mov	r9, r6
 8000aa2:	46a8      	mov	r8, r5
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	4316      	orrs	r6, r2
 8000aaa:	4642      	mov	r2, r8
 8000aac:	3501      	adds	r5, #1
 8000aae:	407a      	eors	r2, r7
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	35ff      	adds	r5, #255	; 0xff
 8000ab4:	2e0a      	cmp	r6, #10
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_fmul+0xca>
 8000ab8:	e0e4      	b.n	8000c84 <__aeabi_fmul+0x294>
 8000aba:	2003      	movs	r0, #3
 8000abc:	2101      	movs	r1, #1
 8000abe:	40b1      	lsls	r1, r6
 8000ac0:	26a6      	movs	r6, #166	; 0xa6
 8000ac2:	00f6      	lsls	r6, r6, #3
 8000ac4:	4231      	tst	r1, r6
 8000ac6:	d10a      	bne.n	8000ade <__aeabi_fmul+0xee>
 8000ac8:	2690      	movs	r6, #144	; 0x90
 8000aca:	00b6      	lsls	r6, r6, #2
 8000acc:	4231      	tst	r1, r6
 8000ace:	d116      	bne.n	8000afe <__aeabi_fmul+0x10e>
 8000ad0:	3eb9      	subs	r6, #185	; 0xb9
 8000ad2:	3eff      	subs	r6, #255	; 0xff
 8000ad4:	420e      	tst	r6, r1
 8000ad6:	d01a      	beq.n	8000b0e <__aeabi_fmul+0x11e>
 8000ad8:	46a1      	mov	r9, r4
 8000ada:	4682      	mov	sl, r0
 8000adc:	e000      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000ade:	0017      	movs	r7, r2
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d00f      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	4650      	mov	r0, sl
 8000aec:	2803      	cmp	r0, #3
 8000aee:	d1cd      	bne.n	8000a8c <__aeabi_fmul+0x9c>
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	03c9      	lsls	r1, r1, #15
 8000af4:	4321      	orrs	r1, r4
 8000af6:	0249      	lsls	r1, r1, #9
 8000af8:	20ff      	movs	r0, #255	; 0xff
 8000afa:	0a49      	lsrs	r1, r1, #9
 8000afc:	e7ca      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	2200      	movs	r2, #0
 8000b02:	20ff      	movs	r0, #255	; 0xff
 8000b04:	03c9      	lsls	r1, r1, #15
 8000b06:	e7c5      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b08:	20ff      	movs	r0, #255	; 0xff
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e7c2      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b0e:	0c20      	lsrs	r0, r4, #16
 8000b10:	4649      	mov	r1, r9
 8000b12:	0424      	lsls	r4, r4, #16
 8000b14:	0c24      	lsrs	r4, r4, #16
 8000b16:	0027      	movs	r7, r4
 8000b18:	0c0e      	lsrs	r6, r1, #16
 8000b1a:	0409      	lsls	r1, r1, #16
 8000b1c:	0c09      	lsrs	r1, r1, #16
 8000b1e:	4374      	muls	r4, r6
 8000b20:	434f      	muls	r7, r1
 8000b22:	4346      	muls	r6, r0
 8000b24:	4348      	muls	r0, r1
 8000b26:	0c39      	lsrs	r1, r7, #16
 8000b28:	1900      	adds	r0, r0, r4
 8000b2a:	1809      	adds	r1, r1, r0
 8000b2c:	428c      	cmp	r4, r1
 8000b2e:	d903      	bls.n	8000b38 <__aeabi_fmul+0x148>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	0240      	lsls	r0, r0, #9
 8000b34:	4684      	mov	ip, r0
 8000b36:	4466      	add	r6, ip
 8000b38:	043f      	lsls	r7, r7, #16
 8000b3a:	0408      	lsls	r0, r1, #16
 8000b3c:	0c3f      	lsrs	r7, r7, #16
 8000b3e:	19c0      	adds	r0, r0, r7
 8000b40:	0184      	lsls	r4, r0, #6
 8000b42:	1e67      	subs	r7, r4, #1
 8000b44:	41bc      	sbcs	r4, r7
 8000b46:	0c09      	lsrs	r1, r1, #16
 8000b48:	0e80      	lsrs	r0, r0, #26
 8000b4a:	1989      	adds	r1, r1, r6
 8000b4c:	4304      	orrs	r4, r0
 8000b4e:	0189      	lsls	r1, r1, #6
 8000b50:	430c      	orrs	r4, r1
 8000b52:	0109      	lsls	r1, r1, #4
 8000b54:	d571      	bpl.n	8000c3a <__aeabi_fmul+0x24a>
 8000b56:	2301      	movs	r3, #1
 8000b58:	0861      	lsrs	r1, r4, #1
 8000b5a:	401c      	ands	r4, r3
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	002b      	movs	r3, r5
 8000b60:	337f      	adds	r3, #127	; 0x7f
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd51      	ble.n	8000c0a <__aeabi_fmul+0x21a>
 8000b66:	0761      	lsls	r1, r4, #29
 8000b68:	d004      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	4021      	ands	r1, r4
 8000b6e:	2904      	cmp	r1, #4
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b72:	3404      	adds	r4, #4
 8000b74:	0121      	lsls	r1, r4, #4
 8000b76:	d503      	bpl.n	8000b80 <__aeabi_fmul+0x190>
 8000b78:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <__aeabi_fmul+0x298>)
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	3380      	adds	r3, #128	; 0x80
 8000b80:	2bfe      	cmp	r3, #254	; 0xfe
 8000b82:	dcc1      	bgt.n	8000b08 <__aeabi_fmul+0x118>
 8000b84:	01a1      	lsls	r1, r4, #6
 8000b86:	0a49      	lsrs	r1, r1, #9
 8000b88:	b2d8      	uxtb	r0, r3
 8000b8a:	e783      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d12c      	bne.n	8000bea <__aeabi_fmul+0x1fa>
 8000b90:	2301      	movs	r3, #1
 8000b92:	4642      	mov	r2, r8
 8000b94:	431e      	orrs	r6, r3
 8000b96:	002b      	movs	r3, r5
 8000b98:	407a      	eors	r2, r7
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	1c5d      	adds	r5, r3, #1
 8000ba0:	2e0a      	cmp	r6, #10
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_fmul+0x1b6>
 8000ba4:	e757      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000ba6:	e76a      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d110      	bne.n	8000bce <__aeabi_fmul+0x1de>
 8000bac:	2301      	movs	r3, #1
 8000bae:	2604      	movs	r6, #4
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	e738      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d104      	bne.n	8000bc4 <__aeabi_fmul+0x1d4>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2608      	movs	r6, #8
 8000bbe:	25ff      	movs	r5, #255	; 0xff
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	e731      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	260c      	movs	r6, #12
 8000bc8:	25ff      	movs	r5, #255	; 0xff
 8000bca:	469a      	mov	sl, r3
 8000bcc:	e72c      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bce:	4648      	mov	r0, r9
 8000bd0:	f002 f80c 	bl	8002bec <__clzsi2>
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1f43      	subs	r3, r0, #5
 8000bd8:	2576      	movs	r5, #118	; 0x76
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	426d      	negs	r5, r5
 8000be0:	4691      	mov	r9, r2
 8000be2:	2600      	movs	r6, #0
 8000be4:	469a      	mov	sl, r3
 8000be6:	1a2d      	subs	r5, r5, r0
 8000be8:	e71e      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bea:	0020      	movs	r0, r4
 8000bec:	f001 fffe 	bl	8002bec <__clzsi2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	1f43      	subs	r3, r0, #5
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	1a2b      	subs	r3, r5, r0
 8000bf8:	3b76      	subs	r3, #118	; 0x76
 8000bfa:	407a      	eors	r2, r7
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	1c5d      	adds	r5, r3, #1
 8000c02:	2e0a      	cmp	r6, #10
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x218>
 8000c06:	e726      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000c08:	e739      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	1acb      	subs	r3, r1, r3
 8000c0e:	2b1b      	cmp	r3, #27
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_fmul+0x224>
 8000c12:	e73d      	b.n	8000a90 <__aeabi_fmul+0xa0>
 8000c14:	359e      	adds	r5, #158	; 0x9e
 8000c16:	0021      	movs	r1, r4
 8000c18:	40ac      	lsls	r4, r5
 8000c1a:	40d9      	lsrs	r1, r3
 8000c1c:	1e63      	subs	r3, r4, #1
 8000c1e:	419c      	sbcs	r4, r3
 8000c20:	4321      	orrs	r1, r4
 8000c22:	074b      	lsls	r3, r1, #29
 8000c24:	d004      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c26:	230f      	movs	r3, #15
 8000c28:	400b      	ands	r3, r1
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c2e:	3104      	adds	r1, #4
 8000c30:	014b      	lsls	r3, r1, #5
 8000c32:	d504      	bpl.n	8000c3e <__aeabi_fmul+0x24e>
 8000c34:	2001      	movs	r0, #1
 8000c36:	2100      	movs	r1, #0
 8000c38:	e72c      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c3a:	001d      	movs	r5, r3
 8000c3c:	e78f      	b.n	8000b5e <__aeabi_fmul+0x16e>
 8000c3e:	0189      	lsls	r1, r1, #6
 8000c40:	2000      	movs	r0, #0
 8000c42:	0a49      	lsrs	r1, r1, #9
 8000c44:	e726      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c46:	2302      	movs	r3, #2
 8000c48:	2e0f      	cmp	r6, #15
 8000c4a:	d10c      	bne.n	8000c66 <__aeabi_fmul+0x276>
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	464b      	mov	r3, r9
 8000c50:	03c9      	lsls	r1, r1, #15
 8000c52:	420b      	tst	r3, r1
 8000c54:	d00d      	beq.n	8000c72 <__aeabi_fmul+0x282>
 8000c56:	420c      	tst	r4, r1
 8000c58:	d10b      	bne.n	8000c72 <__aeabi_fmul+0x282>
 8000c5a:	4321      	orrs	r1, r4
 8000c5c:	0249      	lsls	r1, r1, #9
 8000c5e:	003a      	movs	r2, r7
 8000c60:	20ff      	movs	r0, #255	; 0xff
 8000c62:	0a49      	lsrs	r1, r1, #9
 8000c64:	e716      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c66:	2e0b      	cmp	r6, #11
 8000c68:	d000      	beq.n	8000c6c <__aeabi_fmul+0x27c>
 8000c6a:	e6f7      	b.n	8000a5c <__aeabi_fmul+0x6c>
 8000c6c:	46a1      	mov	r9, r4
 8000c6e:	469a      	mov	sl, r3
 8000c70:	e736      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	464b      	mov	r3, r9
 8000c76:	03c9      	lsls	r1, r1, #15
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	0249      	lsls	r1, r1, #9
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	0a49      	lsrs	r1, r1, #9
 8000c82:	e707      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e7df      	b.n	8000c48 <__aeabi_fmul+0x258>
 8000c88:	f7ffffff 	.word	0xf7ffffff

08000c8c <__aeabi_i2f>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	d013      	beq.n	8000cba <__aeabi_i2f+0x2e>
 8000c92:	17c3      	asrs	r3, r0, #31
 8000c94:	18c5      	adds	r5, r0, r3
 8000c96:	405d      	eors	r5, r3
 8000c98:	0fc4      	lsrs	r4, r0, #31
 8000c9a:	0028      	movs	r0, r5
 8000c9c:	f001 ffa6 	bl	8002bec <__clzsi2>
 8000ca0:	239e      	movs	r3, #158	; 0x9e
 8000ca2:	0001      	movs	r1, r0
 8000ca4:	1a1b      	subs	r3, r3, r0
 8000ca6:	2b96      	cmp	r3, #150	; 0x96
 8000ca8:	dc0f      	bgt.n	8000cca <__aeabi_i2f+0x3e>
 8000caa:	2808      	cmp	r0, #8
 8000cac:	d031      	beq.n	8000d12 <__aeabi_i2f+0x86>
 8000cae:	3908      	subs	r1, #8
 8000cb0:	408d      	lsls	r5, r1
 8000cb2:	026d      	lsls	r5, r5, #9
 8000cb4:	0a6d      	lsrs	r5, r5, #9
 8000cb6:	b2d8      	uxtb	r0, r3
 8000cb8:	e002      	b.n	8000cc0 <__aeabi_i2f+0x34>
 8000cba:	2400      	movs	r4, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	2500      	movs	r5, #0
 8000cc0:	05c0      	lsls	r0, r0, #23
 8000cc2:	4328      	orrs	r0, r5
 8000cc4:	07e4      	lsls	r4, r4, #31
 8000cc6:	4320      	orrs	r0, r4
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	2b99      	cmp	r3, #153	; 0x99
 8000ccc:	dd0c      	ble.n	8000ce8 <__aeabi_i2f+0x5c>
 8000cce:	2205      	movs	r2, #5
 8000cd0:	1a12      	subs	r2, r2, r0
 8000cd2:	0028      	movs	r0, r5
 8000cd4:	40d0      	lsrs	r0, r2
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	0008      	movs	r0, r1
 8000cda:	301b      	adds	r0, #27
 8000cdc:	4085      	lsls	r5, r0
 8000cde:	0028      	movs	r0, r5
 8000ce0:	1e45      	subs	r5, r0, #1
 8000ce2:	41a8      	sbcs	r0, r5
 8000ce4:	4302      	orrs	r2, r0
 8000ce6:	0015      	movs	r5, r2
 8000ce8:	2905      	cmp	r1, #5
 8000cea:	dc16      	bgt.n	8000d1a <__aeabi_i2f+0x8e>
 8000cec:	002a      	movs	r2, r5
 8000cee:	480f      	ldr	r0, [pc, #60]	; (8000d2c <__aeabi_i2f+0xa0>)
 8000cf0:	4002      	ands	r2, r0
 8000cf2:	076e      	lsls	r6, r5, #29
 8000cf4:	d009      	beq.n	8000d0a <__aeabi_i2f+0x7e>
 8000cf6:	260f      	movs	r6, #15
 8000cf8:	4035      	ands	r5, r6
 8000cfa:	2d04      	cmp	r5, #4
 8000cfc:	d005      	beq.n	8000d0a <__aeabi_i2f+0x7e>
 8000cfe:	3204      	adds	r2, #4
 8000d00:	0155      	lsls	r5, r2, #5
 8000d02:	d502      	bpl.n	8000d0a <__aeabi_i2f+0x7e>
 8000d04:	239f      	movs	r3, #159	; 0x9f
 8000d06:	4002      	ands	r2, r0
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	0192      	lsls	r2, r2, #6
 8000d0c:	0a55      	lsrs	r5, r2, #9
 8000d0e:	b2d8      	uxtb	r0, r3
 8000d10:	e7d6      	b.n	8000cc0 <__aeabi_i2f+0x34>
 8000d12:	026d      	lsls	r5, r5, #9
 8000d14:	2096      	movs	r0, #150	; 0x96
 8000d16:	0a6d      	lsrs	r5, r5, #9
 8000d18:	e7d2      	b.n	8000cc0 <__aeabi_i2f+0x34>
 8000d1a:	1f4a      	subs	r2, r1, #5
 8000d1c:	4095      	lsls	r5, r2
 8000d1e:	002a      	movs	r2, r5
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <__aeabi_i2f+0xa0>)
 8000d22:	4002      	ands	r2, r0
 8000d24:	076e      	lsls	r6, r5, #29
 8000d26:	d0f0      	beq.n	8000d0a <__aeabi_i2f+0x7e>
 8000d28:	e7e5      	b.n	8000cf6 <__aeabi_i2f+0x6a>
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	fbffffff 	.word	0xfbffffff

08000d30 <__aeabi_ui2f>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	1e04      	subs	r4, r0, #0
 8000d34:	d00e      	beq.n	8000d54 <__aeabi_ui2f+0x24>
 8000d36:	f001 ff59 	bl	8002bec <__clzsi2>
 8000d3a:	239e      	movs	r3, #158	; 0x9e
 8000d3c:	0001      	movs	r1, r0
 8000d3e:	1a1b      	subs	r3, r3, r0
 8000d40:	2b96      	cmp	r3, #150	; 0x96
 8000d42:	dc0c      	bgt.n	8000d5e <__aeabi_ui2f+0x2e>
 8000d44:	2808      	cmp	r0, #8
 8000d46:	d02c      	beq.n	8000da2 <__aeabi_ui2f+0x72>
 8000d48:	3908      	subs	r1, #8
 8000d4a:	408c      	lsls	r4, r1
 8000d4c:	0264      	lsls	r4, r4, #9
 8000d4e:	0a64      	lsrs	r4, r4, #9
 8000d50:	b2d8      	uxtb	r0, r3
 8000d52:	e001      	b.n	8000d58 <__aeabi_ui2f+0x28>
 8000d54:	2000      	movs	r0, #0
 8000d56:	2400      	movs	r4, #0
 8000d58:	05c0      	lsls	r0, r0, #23
 8000d5a:	4320      	orrs	r0, r4
 8000d5c:	bd70      	pop	{r4, r5, r6, pc}
 8000d5e:	2b99      	cmp	r3, #153	; 0x99
 8000d60:	dd0a      	ble.n	8000d78 <__aeabi_ui2f+0x48>
 8000d62:	0002      	movs	r2, r0
 8000d64:	0020      	movs	r0, r4
 8000d66:	321b      	adds	r2, #27
 8000d68:	4090      	lsls	r0, r2
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	1e50      	subs	r0, r2, #1
 8000d6e:	4182      	sbcs	r2, r0
 8000d70:	2005      	movs	r0, #5
 8000d72:	1a40      	subs	r0, r0, r1
 8000d74:	40c4      	lsrs	r4, r0
 8000d76:	4314      	orrs	r4, r2
 8000d78:	2905      	cmp	r1, #5
 8000d7a:	dc16      	bgt.n	8000daa <__aeabi_ui2f+0x7a>
 8000d7c:	0022      	movs	r2, r4
 8000d7e:	480f      	ldr	r0, [pc, #60]	; (8000dbc <__aeabi_ui2f+0x8c>)
 8000d80:	4002      	ands	r2, r0
 8000d82:	0765      	lsls	r5, r4, #29
 8000d84:	d009      	beq.n	8000d9a <__aeabi_ui2f+0x6a>
 8000d86:	250f      	movs	r5, #15
 8000d88:	402c      	ands	r4, r5
 8000d8a:	2c04      	cmp	r4, #4
 8000d8c:	d005      	beq.n	8000d9a <__aeabi_ui2f+0x6a>
 8000d8e:	3204      	adds	r2, #4
 8000d90:	0154      	lsls	r4, r2, #5
 8000d92:	d502      	bpl.n	8000d9a <__aeabi_ui2f+0x6a>
 8000d94:	239f      	movs	r3, #159	; 0x9f
 8000d96:	4002      	ands	r2, r0
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	0192      	lsls	r2, r2, #6
 8000d9c:	0a54      	lsrs	r4, r2, #9
 8000d9e:	b2d8      	uxtb	r0, r3
 8000da0:	e7da      	b.n	8000d58 <__aeabi_ui2f+0x28>
 8000da2:	0264      	lsls	r4, r4, #9
 8000da4:	2096      	movs	r0, #150	; 0x96
 8000da6:	0a64      	lsrs	r4, r4, #9
 8000da8:	e7d6      	b.n	8000d58 <__aeabi_ui2f+0x28>
 8000daa:	1f4a      	subs	r2, r1, #5
 8000dac:	4094      	lsls	r4, r2
 8000dae:	0022      	movs	r2, r4
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <__aeabi_ui2f+0x8c>)
 8000db2:	4002      	ands	r2, r0
 8000db4:	0765      	lsls	r5, r4, #29
 8000db6:	d0f0      	beq.n	8000d9a <__aeabi_ui2f+0x6a>
 8000db8:	e7e5      	b.n	8000d86 <__aeabi_ui2f+0x56>
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	fbffffff 	.word	0xfbffffff

08000dc0 <__aeabi_dadd>:
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	464f      	mov	r7, r9
 8000dc4:	4646      	mov	r6, r8
 8000dc6:	46d6      	mov	lr, sl
 8000dc8:	0004      	movs	r4, r0
 8000dca:	b5c0      	push	{r6, r7, lr}
 8000dcc:	001f      	movs	r7, r3
 8000dce:	030b      	lsls	r3, r1, #12
 8000dd0:	0010      	movs	r0, r2
 8000dd2:	004e      	lsls	r6, r1, #1
 8000dd4:	0a5b      	lsrs	r3, r3, #9
 8000dd6:	0fcd      	lsrs	r5, r1, #31
 8000dd8:	0f61      	lsrs	r1, r4, #29
 8000dda:	007a      	lsls	r2, r7, #1
 8000ddc:	4319      	orrs	r1, r3
 8000dde:	00e3      	lsls	r3, r4, #3
 8000de0:	033c      	lsls	r4, r7, #12
 8000de2:	0fff      	lsrs	r7, r7, #31
 8000de4:	46bc      	mov	ip, r7
 8000de6:	0a64      	lsrs	r4, r4, #9
 8000de8:	0f47      	lsrs	r7, r0, #29
 8000dea:	4327      	orrs	r7, r4
 8000dec:	0d76      	lsrs	r6, r6, #21
 8000dee:	0d52      	lsrs	r2, r2, #21
 8000df0:	00c0      	lsls	r0, r0, #3
 8000df2:	46b9      	mov	r9, r7
 8000df4:	4680      	mov	r8, r0
 8000df6:	1ab7      	subs	r7, r6, r2
 8000df8:	4565      	cmp	r5, ip
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dadd+0x3e>
 8000dfc:	e09b      	b.n	8000f36 <__aeabi_dadd+0x176>
 8000dfe:	2f00      	cmp	r7, #0
 8000e00:	dc00      	bgt.n	8000e04 <__aeabi_dadd+0x44>
 8000e02:	e084      	b.n	8000f0e <__aeabi_dadd+0x14e>
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dadd+0x4a>
 8000e08:	e0be      	b.n	8000f88 <__aeabi_dadd+0x1c8>
 8000e0a:	4ac8      	ldr	r2, [pc, #800]	; (800112c <__aeabi_dadd+0x36c>)
 8000e0c:	4296      	cmp	r6, r2
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_dadd+0x52>
 8000e10:	e124      	b.n	800105c <__aeabi_dadd+0x29c>
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	464c      	mov	r4, r9
 8000e16:	0412      	lsls	r2, r2, #16
 8000e18:	4314      	orrs	r4, r2
 8000e1a:	46a1      	mov	r9, r4
 8000e1c:	2f38      	cmp	r7, #56	; 0x38
 8000e1e:	dd00      	ble.n	8000e22 <__aeabi_dadd+0x62>
 8000e20:	e167      	b.n	80010f2 <__aeabi_dadd+0x332>
 8000e22:	2f1f      	cmp	r7, #31
 8000e24:	dd00      	ble.n	8000e28 <__aeabi_dadd+0x68>
 8000e26:	e1d6      	b.n	80011d6 <__aeabi_dadd+0x416>
 8000e28:	2220      	movs	r2, #32
 8000e2a:	464c      	mov	r4, r9
 8000e2c:	1bd2      	subs	r2, r2, r7
 8000e2e:	4094      	lsls	r4, r2
 8000e30:	46a2      	mov	sl, r4
 8000e32:	4644      	mov	r4, r8
 8000e34:	40fc      	lsrs	r4, r7
 8000e36:	0020      	movs	r0, r4
 8000e38:	4654      	mov	r4, sl
 8000e3a:	4304      	orrs	r4, r0
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	4090      	lsls	r0, r2
 8000e40:	1e42      	subs	r2, r0, #1
 8000e42:	4190      	sbcs	r0, r2
 8000e44:	464a      	mov	r2, r9
 8000e46:	40fa      	lsrs	r2, r7
 8000e48:	4304      	orrs	r4, r0
 8000e4a:	1a89      	subs	r1, r1, r2
 8000e4c:	1b1c      	subs	r4, r3, r4
 8000e4e:	42a3      	cmp	r3, r4
 8000e50:	4192      	sbcs	r2, r2
 8000e52:	4252      	negs	r2, r2
 8000e54:	1a8b      	subs	r3, r1, r2
 8000e56:	469a      	mov	sl, r3
 8000e58:	4653      	mov	r3, sl
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	d400      	bmi.n	8000e60 <__aeabi_dadd+0xa0>
 8000e5e:	e0d4      	b.n	800100a <__aeabi_dadd+0x24a>
 8000e60:	4653      	mov	r3, sl
 8000e62:	025a      	lsls	r2, r3, #9
 8000e64:	0a53      	lsrs	r3, r2, #9
 8000e66:	469a      	mov	sl, r3
 8000e68:	4653      	mov	r3, sl
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dadd+0xb0>
 8000e6e:	e104      	b.n	800107a <__aeabi_dadd+0x2ba>
 8000e70:	4650      	mov	r0, sl
 8000e72:	f001 febb 	bl	8002bec <__clzsi2>
 8000e76:	0003      	movs	r3, r0
 8000e78:	3b08      	subs	r3, #8
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	0020      	movs	r0, r4
 8000e7e:	1ad2      	subs	r2, r2, r3
 8000e80:	4651      	mov	r1, sl
 8000e82:	40d0      	lsrs	r0, r2
 8000e84:	4099      	lsls	r1, r3
 8000e86:	0002      	movs	r2, r0
 8000e88:	409c      	lsls	r4, r3
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	42b3      	cmp	r3, r6
 8000e8e:	da00      	bge.n	8000e92 <__aeabi_dadd+0xd2>
 8000e90:	e102      	b.n	8001098 <__aeabi_dadd+0x2d8>
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	1c59      	adds	r1, r3, #1
 8000e96:	291f      	cmp	r1, #31
 8000e98:	dd00      	ble.n	8000e9c <__aeabi_dadd+0xdc>
 8000e9a:	e0a7      	b.n	8000fec <__aeabi_dadd+0x22c>
 8000e9c:	2320      	movs	r3, #32
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	0026      	movs	r6, r4
 8000ea2:	1a5b      	subs	r3, r3, r1
 8000ea4:	409c      	lsls	r4, r3
 8000ea6:	4098      	lsls	r0, r3
 8000ea8:	40ce      	lsrs	r6, r1
 8000eaa:	40ca      	lsrs	r2, r1
 8000eac:	1e63      	subs	r3, r4, #1
 8000eae:	419c      	sbcs	r4, r3
 8000eb0:	4330      	orrs	r0, r6
 8000eb2:	4692      	mov	sl, r2
 8000eb4:	2600      	movs	r6, #0
 8000eb6:	4304      	orrs	r4, r0
 8000eb8:	0763      	lsls	r3, r4, #29
 8000eba:	d009      	beq.n	8000ed0 <__aeabi_dadd+0x110>
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	4023      	ands	r3, r4
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d005      	beq.n	8000ed0 <__aeabi_dadd+0x110>
 8000ec4:	1d23      	adds	r3, r4, #4
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	41a4      	sbcs	r4, r4
 8000eca:	4264      	negs	r4, r4
 8000ecc:	44a2      	add	sl, r4
 8000ece:	001c      	movs	r4, r3
 8000ed0:	4653      	mov	r3, sl
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	d400      	bmi.n	8000ed8 <__aeabi_dadd+0x118>
 8000ed6:	e09b      	b.n	8001010 <__aeabi_dadd+0x250>
 8000ed8:	4b94      	ldr	r3, [pc, #592]	; (800112c <__aeabi_dadd+0x36c>)
 8000eda:	3601      	adds	r6, #1
 8000edc:	429e      	cmp	r6, r3
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x122>
 8000ee0:	e0b8      	b.n	8001054 <__aeabi_dadd+0x294>
 8000ee2:	4653      	mov	r3, sl
 8000ee4:	4992      	ldr	r1, [pc, #584]	; (8001130 <__aeabi_dadd+0x370>)
 8000ee6:	08e4      	lsrs	r4, r4, #3
 8000ee8:	400b      	ands	r3, r1
 8000eea:	0019      	movs	r1, r3
 8000eec:	075b      	lsls	r3, r3, #29
 8000eee:	4323      	orrs	r3, r4
 8000ef0:	0572      	lsls	r2, r6, #21
 8000ef2:	024c      	lsls	r4, r1, #9
 8000ef4:	0b24      	lsrs	r4, r4, #12
 8000ef6:	0d52      	lsrs	r2, r2, #21
 8000ef8:	0512      	lsls	r2, r2, #20
 8000efa:	07ed      	lsls	r5, r5, #31
 8000efc:	4322      	orrs	r2, r4
 8000efe:	432a      	orrs	r2, r5
 8000f00:	0018      	movs	r0, r3
 8000f02:	0011      	movs	r1, r2
 8000f04:	bce0      	pop	{r5, r6, r7}
 8000f06:	46ba      	mov	sl, r7
 8000f08:	46b1      	mov	r9, r6
 8000f0a:	46a8      	mov	r8, r5
 8000f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0e:	2f00      	cmp	r7, #0
 8000f10:	d048      	beq.n	8000fa4 <__aeabi_dadd+0x1e4>
 8000f12:	1b97      	subs	r7, r2, r6
 8000f14:	2e00      	cmp	r6, #0
 8000f16:	d000      	beq.n	8000f1a <__aeabi_dadd+0x15a>
 8000f18:	e10e      	b.n	8001138 <__aeabi_dadd+0x378>
 8000f1a:	000c      	movs	r4, r1
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x162>
 8000f20:	e1b7      	b.n	8001292 <__aeabi_dadd+0x4d2>
 8000f22:	1e7c      	subs	r4, r7, #1
 8000f24:	2f01      	cmp	r7, #1
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x16a>
 8000f28:	e226      	b.n	8001378 <__aeabi_dadd+0x5b8>
 8000f2a:	4d80      	ldr	r5, [pc, #512]	; (800112c <__aeabi_dadd+0x36c>)
 8000f2c:	42af      	cmp	r7, r5
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_dadd+0x172>
 8000f30:	e1d5      	b.n	80012de <__aeabi_dadd+0x51e>
 8000f32:	0027      	movs	r7, r4
 8000f34:	e107      	b.n	8001146 <__aeabi_dadd+0x386>
 8000f36:	2f00      	cmp	r7, #0
 8000f38:	dc00      	bgt.n	8000f3c <__aeabi_dadd+0x17c>
 8000f3a:	e0b2      	b.n	80010a2 <__aeabi_dadd+0x2e2>
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d047      	beq.n	8000fd0 <__aeabi_dadd+0x210>
 8000f40:	4a7a      	ldr	r2, [pc, #488]	; (800112c <__aeabi_dadd+0x36c>)
 8000f42:	4296      	cmp	r6, r2
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x188>
 8000f46:	e089      	b.n	800105c <__aeabi_dadd+0x29c>
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	464c      	mov	r4, r9
 8000f4c:	0412      	lsls	r2, r2, #16
 8000f4e:	4314      	orrs	r4, r2
 8000f50:	46a1      	mov	r9, r4
 8000f52:	2f38      	cmp	r7, #56	; 0x38
 8000f54:	dc6b      	bgt.n	800102e <__aeabi_dadd+0x26e>
 8000f56:	2f1f      	cmp	r7, #31
 8000f58:	dc00      	bgt.n	8000f5c <__aeabi_dadd+0x19c>
 8000f5a:	e16e      	b.n	800123a <__aeabi_dadd+0x47a>
 8000f5c:	003a      	movs	r2, r7
 8000f5e:	4648      	mov	r0, r9
 8000f60:	3a20      	subs	r2, #32
 8000f62:	40d0      	lsrs	r0, r2
 8000f64:	4684      	mov	ip, r0
 8000f66:	2f20      	cmp	r7, #32
 8000f68:	d007      	beq.n	8000f7a <__aeabi_dadd+0x1ba>
 8000f6a:	2240      	movs	r2, #64	; 0x40
 8000f6c:	4648      	mov	r0, r9
 8000f6e:	1bd2      	subs	r2, r2, r7
 8000f70:	4090      	lsls	r0, r2
 8000f72:	0002      	movs	r2, r0
 8000f74:	4640      	mov	r0, r8
 8000f76:	4310      	orrs	r0, r2
 8000f78:	4680      	mov	r8, r0
 8000f7a:	4640      	mov	r0, r8
 8000f7c:	1e42      	subs	r2, r0, #1
 8000f7e:	4190      	sbcs	r0, r2
 8000f80:	4662      	mov	r2, ip
 8000f82:	0004      	movs	r4, r0
 8000f84:	4314      	orrs	r4, r2
 8000f86:	e057      	b.n	8001038 <__aeabi_dadd+0x278>
 8000f88:	464a      	mov	r2, r9
 8000f8a:	4302      	orrs	r2, r0
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dadd+0x1d0>
 8000f8e:	e103      	b.n	8001198 <__aeabi_dadd+0x3d8>
 8000f90:	1e7a      	subs	r2, r7, #1
 8000f92:	2f01      	cmp	r7, #1
 8000f94:	d100      	bne.n	8000f98 <__aeabi_dadd+0x1d8>
 8000f96:	e193      	b.n	80012c0 <__aeabi_dadd+0x500>
 8000f98:	4c64      	ldr	r4, [pc, #400]	; (800112c <__aeabi_dadd+0x36c>)
 8000f9a:	42a7      	cmp	r7, r4
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dadd+0x1e0>
 8000f9e:	e18a      	b.n	80012b6 <__aeabi_dadd+0x4f6>
 8000fa0:	0017      	movs	r7, r2
 8000fa2:	e73b      	b.n	8000e1c <__aeabi_dadd+0x5c>
 8000fa4:	4c63      	ldr	r4, [pc, #396]	; (8001134 <__aeabi_dadd+0x374>)
 8000fa6:	1c72      	adds	r2, r6, #1
 8000fa8:	4222      	tst	r2, r4
 8000faa:	d000      	beq.n	8000fae <__aeabi_dadd+0x1ee>
 8000fac:	e0e0      	b.n	8001170 <__aeabi_dadd+0x3b0>
 8000fae:	000a      	movs	r2, r1
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	2e00      	cmp	r6, #0
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_dadd+0x1f8>
 8000fb6:	e174      	b.n	80012a2 <__aeabi_dadd+0x4e2>
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_dadd+0x1fe>
 8000fbc:	e1d0      	b.n	8001360 <__aeabi_dadd+0x5a0>
 8000fbe:	464a      	mov	r2, r9
 8000fc0:	4302      	orrs	r2, r0
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_dadd+0x206>
 8000fc4:	e1e3      	b.n	800138e <__aeabi_dadd+0x5ce>
 8000fc6:	074a      	lsls	r2, r1, #29
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	08c9      	lsrs	r1, r1, #3
 8000fce:	e029      	b.n	8001024 <__aeabi_dadd+0x264>
 8000fd0:	464a      	mov	r2, r9
 8000fd2:	4302      	orrs	r2, r0
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_dadd+0x218>
 8000fd6:	e17d      	b.n	80012d4 <__aeabi_dadd+0x514>
 8000fd8:	1e7a      	subs	r2, r7, #1
 8000fda:	2f01      	cmp	r7, #1
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dadd+0x220>
 8000fde:	e0e0      	b.n	80011a2 <__aeabi_dadd+0x3e2>
 8000fe0:	4c52      	ldr	r4, [pc, #328]	; (800112c <__aeabi_dadd+0x36c>)
 8000fe2:	42a7      	cmp	r7, r4
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x228>
 8000fe6:	e166      	b.n	80012b6 <__aeabi_dadd+0x4f6>
 8000fe8:	0017      	movs	r7, r2
 8000fea:	e7b2      	b.n	8000f52 <__aeabi_dadd+0x192>
 8000fec:	0010      	movs	r0, r2
 8000fee:	3b1f      	subs	r3, #31
 8000ff0:	40d8      	lsrs	r0, r3
 8000ff2:	2920      	cmp	r1, #32
 8000ff4:	d003      	beq.n	8000ffe <__aeabi_dadd+0x23e>
 8000ff6:	2340      	movs	r3, #64	; 0x40
 8000ff8:	1a5b      	subs	r3, r3, r1
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	4314      	orrs	r4, r2
 8000ffe:	1e63      	subs	r3, r4, #1
 8001000:	419c      	sbcs	r4, r3
 8001002:	2300      	movs	r3, #0
 8001004:	2600      	movs	r6, #0
 8001006:	469a      	mov	sl, r3
 8001008:	4304      	orrs	r4, r0
 800100a:	0763      	lsls	r3, r4, #29
 800100c:	d000      	beq.n	8001010 <__aeabi_dadd+0x250>
 800100e:	e755      	b.n	8000ebc <__aeabi_dadd+0xfc>
 8001010:	4652      	mov	r2, sl
 8001012:	08e3      	lsrs	r3, r4, #3
 8001014:	0752      	lsls	r2, r2, #29
 8001016:	4313      	orrs	r3, r2
 8001018:	4652      	mov	r2, sl
 800101a:	0037      	movs	r7, r6
 800101c:	08d1      	lsrs	r1, r2, #3
 800101e:	4a43      	ldr	r2, [pc, #268]	; (800112c <__aeabi_dadd+0x36c>)
 8001020:	4297      	cmp	r7, r2
 8001022:	d01f      	beq.n	8001064 <__aeabi_dadd+0x2a4>
 8001024:	0309      	lsls	r1, r1, #12
 8001026:	057a      	lsls	r2, r7, #21
 8001028:	0b0c      	lsrs	r4, r1, #12
 800102a:	0d52      	lsrs	r2, r2, #21
 800102c:	e764      	b.n	8000ef8 <__aeabi_dadd+0x138>
 800102e:	4642      	mov	r2, r8
 8001030:	464c      	mov	r4, r9
 8001032:	4314      	orrs	r4, r2
 8001034:	1e62      	subs	r2, r4, #1
 8001036:	4194      	sbcs	r4, r2
 8001038:	18e4      	adds	r4, r4, r3
 800103a:	429c      	cmp	r4, r3
 800103c:	4192      	sbcs	r2, r2
 800103e:	4252      	negs	r2, r2
 8001040:	4692      	mov	sl, r2
 8001042:	448a      	add	sl, r1
 8001044:	4653      	mov	r3, sl
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	d5df      	bpl.n	800100a <__aeabi_dadd+0x24a>
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <__aeabi_dadd+0x36c>)
 800104c:	3601      	adds	r6, #1
 800104e:	429e      	cmp	r6, r3
 8001050:	d000      	beq.n	8001054 <__aeabi_dadd+0x294>
 8001052:	e0b3      	b.n	80011bc <__aeabi_dadd+0x3fc>
 8001054:	0032      	movs	r2, r6
 8001056:	2400      	movs	r4, #0
 8001058:	2300      	movs	r3, #0
 800105a:	e74d      	b.n	8000ef8 <__aeabi_dadd+0x138>
 800105c:	074a      	lsls	r2, r1, #29
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	4313      	orrs	r3, r2
 8001062:	08c9      	lsrs	r1, r1, #3
 8001064:	001a      	movs	r2, r3
 8001066:	430a      	orrs	r2, r1
 8001068:	d100      	bne.n	800106c <__aeabi_dadd+0x2ac>
 800106a:	e200      	b.n	800146e <__aeabi_dadd+0x6ae>
 800106c:	2480      	movs	r4, #128	; 0x80
 800106e:	0324      	lsls	r4, r4, #12
 8001070:	430c      	orrs	r4, r1
 8001072:	0324      	lsls	r4, r4, #12
 8001074:	4a2d      	ldr	r2, [pc, #180]	; (800112c <__aeabi_dadd+0x36c>)
 8001076:	0b24      	lsrs	r4, r4, #12
 8001078:	e73e      	b.n	8000ef8 <__aeabi_dadd+0x138>
 800107a:	0020      	movs	r0, r4
 800107c:	f001 fdb6 	bl	8002bec <__clzsi2>
 8001080:	0003      	movs	r3, r0
 8001082:	3318      	adds	r3, #24
 8001084:	2b1f      	cmp	r3, #31
 8001086:	dc00      	bgt.n	800108a <__aeabi_dadd+0x2ca>
 8001088:	e6f7      	b.n	8000e7a <__aeabi_dadd+0xba>
 800108a:	0022      	movs	r2, r4
 800108c:	3808      	subs	r0, #8
 800108e:	4082      	lsls	r2, r0
 8001090:	2400      	movs	r4, #0
 8001092:	42b3      	cmp	r3, r6
 8001094:	db00      	blt.n	8001098 <__aeabi_dadd+0x2d8>
 8001096:	e6fc      	b.n	8000e92 <__aeabi_dadd+0xd2>
 8001098:	1af6      	subs	r6, r6, r3
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <__aeabi_dadd+0x370>)
 800109c:	401a      	ands	r2, r3
 800109e:	4692      	mov	sl, r2
 80010a0:	e70a      	b.n	8000eb8 <__aeabi_dadd+0xf8>
 80010a2:	2f00      	cmp	r7, #0
 80010a4:	d02b      	beq.n	80010fe <__aeabi_dadd+0x33e>
 80010a6:	1b97      	subs	r7, r2, r6
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x2ee>
 80010ac:	e0b8      	b.n	8001220 <__aeabi_dadd+0x460>
 80010ae:	4c1f      	ldr	r4, [pc, #124]	; (800112c <__aeabi_dadd+0x36c>)
 80010b0:	42a2      	cmp	r2, r4
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dadd+0x2f6>
 80010b4:	e11c      	b.n	80012f0 <__aeabi_dadd+0x530>
 80010b6:	2480      	movs	r4, #128	; 0x80
 80010b8:	0424      	lsls	r4, r4, #16
 80010ba:	4321      	orrs	r1, r4
 80010bc:	2f38      	cmp	r7, #56	; 0x38
 80010be:	dd00      	ble.n	80010c2 <__aeabi_dadd+0x302>
 80010c0:	e11e      	b.n	8001300 <__aeabi_dadd+0x540>
 80010c2:	2f1f      	cmp	r7, #31
 80010c4:	dd00      	ble.n	80010c8 <__aeabi_dadd+0x308>
 80010c6:	e19e      	b.n	8001406 <__aeabi_dadd+0x646>
 80010c8:	2620      	movs	r6, #32
 80010ca:	000c      	movs	r4, r1
 80010cc:	1bf6      	subs	r6, r6, r7
 80010ce:	0018      	movs	r0, r3
 80010d0:	40b3      	lsls	r3, r6
 80010d2:	40b4      	lsls	r4, r6
 80010d4:	40f8      	lsrs	r0, r7
 80010d6:	1e5e      	subs	r6, r3, #1
 80010d8:	41b3      	sbcs	r3, r6
 80010da:	40f9      	lsrs	r1, r7
 80010dc:	4304      	orrs	r4, r0
 80010de:	431c      	orrs	r4, r3
 80010e0:	4489      	add	r9, r1
 80010e2:	4444      	add	r4, r8
 80010e4:	4544      	cmp	r4, r8
 80010e6:	419b      	sbcs	r3, r3
 80010e8:	425b      	negs	r3, r3
 80010ea:	444b      	add	r3, r9
 80010ec:	469a      	mov	sl, r3
 80010ee:	0016      	movs	r6, r2
 80010f0:	e7a8      	b.n	8001044 <__aeabi_dadd+0x284>
 80010f2:	4642      	mov	r2, r8
 80010f4:	464c      	mov	r4, r9
 80010f6:	4314      	orrs	r4, r2
 80010f8:	1e62      	subs	r2, r4, #1
 80010fa:	4194      	sbcs	r4, r2
 80010fc:	e6a6      	b.n	8000e4c <__aeabi_dadd+0x8c>
 80010fe:	4c0d      	ldr	r4, [pc, #52]	; (8001134 <__aeabi_dadd+0x374>)
 8001100:	1c72      	adds	r2, r6, #1
 8001102:	4222      	tst	r2, r4
 8001104:	d000      	beq.n	8001108 <__aeabi_dadd+0x348>
 8001106:	e0a8      	b.n	800125a <__aeabi_dadd+0x49a>
 8001108:	000a      	movs	r2, r1
 800110a:	431a      	orrs	r2, r3
 800110c:	2e00      	cmp	r6, #0
 800110e:	d000      	beq.n	8001112 <__aeabi_dadd+0x352>
 8001110:	e10a      	b.n	8001328 <__aeabi_dadd+0x568>
 8001112:	2a00      	cmp	r2, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x358>
 8001116:	e15e      	b.n	80013d6 <__aeabi_dadd+0x616>
 8001118:	464a      	mov	r2, r9
 800111a:	4302      	orrs	r2, r0
 800111c:	d000      	beq.n	8001120 <__aeabi_dadd+0x360>
 800111e:	e161      	b.n	80013e4 <__aeabi_dadd+0x624>
 8001120:	074a      	lsls	r2, r1, #29
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	4313      	orrs	r3, r2
 8001126:	08c9      	lsrs	r1, r1, #3
 8001128:	e77c      	b.n	8001024 <__aeabi_dadd+0x264>
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	000007ff 	.word	0x000007ff
 8001130:	ff7fffff 	.word	0xff7fffff
 8001134:	000007fe 	.word	0x000007fe
 8001138:	4ccf      	ldr	r4, [pc, #828]	; (8001478 <__aeabi_dadd+0x6b8>)
 800113a:	42a2      	cmp	r2, r4
 800113c:	d100      	bne.n	8001140 <__aeabi_dadd+0x380>
 800113e:	e0ce      	b.n	80012de <__aeabi_dadd+0x51e>
 8001140:	2480      	movs	r4, #128	; 0x80
 8001142:	0424      	lsls	r4, r4, #16
 8001144:	4321      	orrs	r1, r4
 8001146:	2f38      	cmp	r7, #56	; 0x38
 8001148:	dc5b      	bgt.n	8001202 <__aeabi_dadd+0x442>
 800114a:	2f1f      	cmp	r7, #31
 800114c:	dd00      	ble.n	8001150 <__aeabi_dadd+0x390>
 800114e:	e0dc      	b.n	800130a <__aeabi_dadd+0x54a>
 8001150:	2520      	movs	r5, #32
 8001152:	000c      	movs	r4, r1
 8001154:	1bed      	subs	r5, r5, r7
 8001156:	001e      	movs	r6, r3
 8001158:	40ab      	lsls	r3, r5
 800115a:	40ac      	lsls	r4, r5
 800115c:	40fe      	lsrs	r6, r7
 800115e:	1e5d      	subs	r5, r3, #1
 8001160:	41ab      	sbcs	r3, r5
 8001162:	4334      	orrs	r4, r6
 8001164:	40f9      	lsrs	r1, r7
 8001166:	431c      	orrs	r4, r3
 8001168:	464b      	mov	r3, r9
 800116a:	1a5b      	subs	r3, r3, r1
 800116c:	4699      	mov	r9, r3
 800116e:	e04c      	b.n	800120a <__aeabi_dadd+0x44a>
 8001170:	464a      	mov	r2, r9
 8001172:	1a1c      	subs	r4, r3, r0
 8001174:	1a88      	subs	r0, r1, r2
 8001176:	42a3      	cmp	r3, r4
 8001178:	4192      	sbcs	r2, r2
 800117a:	4252      	negs	r2, r2
 800117c:	4692      	mov	sl, r2
 800117e:	0002      	movs	r2, r0
 8001180:	4650      	mov	r0, sl
 8001182:	1a12      	subs	r2, r2, r0
 8001184:	4692      	mov	sl, r2
 8001186:	0212      	lsls	r2, r2, #8
 8001188:	d478      	bmi.n	800127c <__aeabi_dadd+0x4bc>
 800118a:	4653      	mov	r3, sl
 800118c:	4323      	orrs	r3, r4
 800118e:	d000      	beq.n	8001192 <__aeabi_dadd+0x3d2>
 8001190:	e66a      	b.n	8000e68 <__aeabi_dadd+0xa8>
 8001192:	2100      	movs	r1, #0
 8001194:	2500      	movs	r5, #0
 8001196:	e745      	b.n	8001024 <__aeabi_dadd+0x264>
 8001198:	074a      	lsls	r2, r1, #29
 800119a:	08db      	lsrs	r3, r3, #3
 800119c:	4313      	orrs	r3, r2
 800119e:	08c9      	lsrs	r1, r1, #3
 80011a0:	e73d      	b.n	800101e <__aeabi_dadd+0x25e>
 80011a2:	181c      	adds	r4, r3, r0
 80011a4:	429c      	cmp	r4, r3
 80011a6:	419b      	sbcs	r3, r3
 80011a8:	4449      	add	r1, r9
 80011aa:	468a      	mov	sl, r1
 80011ac:	425b      	negs	r3, r3
 80011ae:	449a      	add	sl, r3
 80011b0:	4653      	mov	r3, sl
 80011b2:	2601      	movs	r6, #1
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	d400      	bmi.n	80011ba <__aeabi_dadd+0x3fa>
 80011b8:	e727      	b.n	800100a <__aeabi_dadd+0x24a>
 80011ba:	2602      	movs	r6, #2
 80011bc:	4652      	mov	r2, sl
 80011be:	4baf      	ldr	r3, [pc, #700]	; (800147c <__aeabi_dadd+0x6bc>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	401a      	ands	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	4021      	ands	r1, r4
 80011c8:	0862      	lsrs	r2, r4, #1
 80011ca:	430a      	orrs	r2, r1
 80011cc:	07dc      	lsls	r4, r3, #31
 80011ce:	085b      	lsrs	r3, r3, #1
 80011d0:	469a      	mov	sl, r3
 80011d2:	4314      	orrs	r4, r2
 80011d4:	e670      	b.n	8000eb8 <__aeabi_dadd+0xf8>
 80011d6:	003a      	movs	r2, r7
 80011d8:	464c      	mov	r4, r9
 80011da:	3a20      	subs	r2, #32
 80011dc:	40d4      	lsrs	r4, r2
 80011de:	46a4      	mov	ip, r4
 80011e0:	2f20      	cmp	r7, #32
 80011e2:	d007      	beq.n	80011f4 <__aeabi_dadd+0x434>
 80011e4:	2240      	movs	r2, #64	; 0x40
 80011e6:	4648      	mov	r0, r9
 80011e8:	1bd2      	subs	r2, r2, r7
 80011ea:	4090      	lsls	r0, r2
 80011ec:	0002      	movs	r2, r0
 80011ee:	4640      	mov	r0, r8
 80011f0:	4310      	orrs	r0, r2
 80011f2:	4680      	mov	r8, r0
 80011f4:	4640      	mov	r0, r8
 80011f6:	1e42      	subs	r2, r0, #1
 80011f8:	4190      	sbcs	r0, r2
 80011fa:	4662      	mov	r2, ip
 80011fc:	0004      	movs	r4, r0
 80011fe:	4314      	orrs	r4, r2
 8001200:	e624      	b.n	8000e4c <__aeabi_dadd+0x8c>
 8001202:	4319      	orrs	r1, r3
 8001204:	000c      	movs	r4, r1
 8001206:	1e63      	subs	r3, r4, #1
 8001208:	419c      	sbcs	r4, r3
 800120a:	4643      	mov	r3, r8
 800120c:	1b1c      	subs	r4, r3, r4
 800120e:	45a0      	cmp	r8, r4
 8001210:	419b      	sbcs	r3, r3
 8001212:	4649      	mov	r1, r9
 8001214:	425b      	negs	r3, r3
 8001216:	1acb      	subs	r3, r1, r3
 8001218:	469a      	mov	sl, r3
 800121a:	4665      	mov	r5, ip
 800121c:	0016      	movs	r6, r2
 800121e:	e61b      	b.n	8000e58 <__aeabi_dadd+0x98>
 8001220:	000c      	movs	r4, r1
 8001222:	431c      	orrs	r4, r3
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x468>
 8001226:	e0c7      	b.n	80013b8 <__aeabi_dadd+0x5f8>
 8001228:	1e7c      	subs	r4, r7, #1
 800122a:	2f01      	cmp	r7, #1
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0x470>
 800122e:	e0f9      	b.n	8001424 <__aeabi_dadd+0x664>
 8001230:	4e91      	ldr	r6, [pc, #580]	; (8001478 <__aeabi_dadd+0x6b8>)
 8001232:	42b7      	cmp	r7, r6
 8001234:	d05c      	beq.n	80012f0 <__aeabi_dadd+0x530>
 8001236:	0027      	movs	r7, r4
 8001238:	e740      	b.n	80010bc <__aeabi_dadd+0x2fc>
 800123a:	2220      	movs	r2, #32
 800123c:	464c      	mov	r4, r9
 800123e:	4640      	mov	r0, r8
 8001240:	1bd2      	subs	r2, r2, r7
 8001242:	4094      	lsls	r4, r2
 8001244:	40f8      	lsrs	r0, r7
 8001246:	4304      	orrs	r4, r0
 8001248:	4640      	mov	r0, r8
 800124a:	4090      	lsls	r0, r2
 800124c:	1e42      	subs	r2, r0, #1
 800124e:	4190      	sbcs	r0, r2
 8001250:	464a      	mov	r2, r9
 8001252:	40fa      	lsrs	r2, r7
 8001254:	4304      	orrs	r4, r0
 8001256:	1889      	adds	r1, r1, r2
 8001258:	e6ee      	b.n	8001038 <__aeabi_dadd+0x278>
 800125a:	4c87      	ldr	r4, [pc, #540]	; (8001478 <__aeabi_dadd+0x6b8>)
 800125c:	42a2      	cmp	r2, r4
 800125e:	d100      	bne.n	8001262 <__aeabi_dadd+0x4a2>
 8001260:	e6f9      	b.n	8001056 <__aeabi_dadd+0x296>
 8001262:	1818      	adds	r0, r3, r0
 8001264:	4298      	cmp	r0, r3
 8001266:	419b      	sbcs	r3, r3
 8001268:	4449      	add	r1, r9
 800126a:	425b      	negs	r3, r3
 800126c:	18cb      	adds	r3, r1, r3
 800126e:	07dc      	lsls	r4, r3, #31
 8001270:	0840      	lsrs	r0, r0, #1
 8001272:	085b      	lsrs	r3, r3, #1
 8001274:	469a      	mov	sl, r3
 8001276:	0016      	movs	r6, r2
 8001278:	4304      	orrs	r4, r0
 800127a:	e6c6      	b.n	800100a <__aeabi_dadd+0x24a>
 800127c:	4642      	mov	r2, r8
 800127e:	1ad4      	subs	r4, r2, r3
 8001280:	45a0      	cmp	r8, r4
 8001282:	4180      	sbcs	r0, r0
 8001284:	464b      	mov	r3, r9
 8001286:	4240      	negs	r0, r0
 8001288:	1a59      	subs	r1, r3, r1
 800128a:	1a0b      	subs	r3, r1, r0
 800128c:	469a      	mov	sl, r3
 800128e:	4665      	mov	r5, ip
 8001290:	e5ea      	b.n	8000e68 <__aeabi_dadd+0xa8>
 8001292:	464b      	mov	r3, r9
 8001294:	464a      	mov	r2, r9
 8001296:	08c0      	lsrs	r0, r0, #3
 8001298:	075b      	lsls	r3, r3, #29
 800129a:	4665      	mov	r5, ip
 800129c:	4303      	orrs	r3, r0
 800129e:	08d1      	lsrs	r1, r2, #3
 80012a0:	e6bd      	b.n	800101e <__aeabi_dadd+0x25e>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d000      	beq.n	80012a8 <__aeabi_dadd+0x4e8>
 80012a6:	e08e      	b.n	80013c6 <__aeabi_dadd+0x606>
 80012a8:	464b      	mov	r3, r9
 80012aa:	4303      	orrs	r3, r0
 80012ac:	d117      	bne.n	80012de <__aeabi_dadd+0x51e>
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	2500      	movs	r5, #0
 80012b2:	0309      	lsls	r1, r1, #12
 80012b4:	e6da      	b.n	800106c <__aeabi_dadd+0x2ac>
 80012b6:	074a      	lsls	r2, r1, #29
 80012b8:	08db      	lsrs	r3, r3, #3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	08c9      	lsrs	r1, r1, #3
 80012be:	e6d1      	b.n	8001064 <__aeabi_dadd+0x2a4>
 80012c0:	1a1c      	subs	r4, r3, r0
 80012c2:	464a      	mov	r2, r9
 80012c4:	42a3      	cmp	r3, r4
 80012c6:	419b      	sbcs	r3, r3
 80012c8:	1a89      	subs	r1, r1, r2
 80012ca:	425b      	negs	r3, r3
 80012cc:	1acb      	subs	r3, r1, r3
 80012ce:	469a      	mov	sl, r3
 80012d0:	2601      	movs	r6, #1
 80012d2:	e5c1      	b.n	8000e58 <__aeabi_dadd+0x98>
 80012d4:	074a      	lsls	r2, r1, #29
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	4313      	orrs	r3, r2
 80012da:	08c9      	lsrs	r1, r1, #3
 80012dc:	e69f      	b.n	800101e <__aeabi_dadd+0x25e>
 80012de:	4643      	mov	r3, r8
 80012e0:	08d8      	lsrs	r0, r3, #3
 80012e2:	464b      	mov	r3, r9
 80012e4:	464a      	mov	r2, r9
 80012e6:	075b      	lsls	r3, r3, #29
 80012e8:	4665      	mov	r5, ip
 80012ea:	4303      	orrs	r3, r0
 80012ec:	08d1      	lsrs	r1, r2, #3
 80012ee:	e6b9      	b.n	8001064 <__aeabi_dadd+0x2a4>
 80012f0:	4643      	mov	r3, r8
 80012f2:	08d8      	lsrs	r0, r3, #3
 80012f4:	464b      	mov	r3, r9
 80012f6:	464a      	mov	r2, r9
 80012f8:	075b      	lsls	r3, r3, #29
 80012fa:	4303      	orrs	r3, r0
 80012fc:	08d1      	lsrs	r1, r2, #3
 80012fe:	e6b1      	b.n	8001064 <__aeabi_dadd+0x2a4>
 8001300:	4319      	orrs	r1, r3
 8001302:	000c      	movs	r4, r1
 8001304:	1e63      	subs	r3, r4, #1
 8001306:	419c      	sbcs	r4, r3
 8001308:	e6eb      	b.n	80010e2 <__aeabi_dadd+0x322>
 800130a:	003c      	movs	r4, r7
 800130c:	000d      	movs	r5, r1
 800130e:	3c20      	subs	r4, #32
 8001310:	40e5      	lsrs	r5, r4
 8001312:	2f20      	cmp	r7, #32
 8001314:	d003      	beq.n	800131e <__aeabi_dadd+0x55e>
 8001316:	2440      	movs	r4, #64	; 0x40
 8001318:	1be4      	subs	r4, r4, r7
 800131a:	40a1      	lsls	r1, r4
 800131c:	430b      	orrs	r3, r1
 800131e:	001c      	movs	r4, r3
 8001320:	1e63      	subs	r3, r4, #1
 8001322:	419c      	sbcs	r4, r3
 8001324:	432c      	orrs	r4, r5
 8001326:	e770      	b.n	800120a <__aeabi_dadd+0x44a>
 8001328:	2a00      	cmp	r2, #0
 800132a:	d0e1      	beq.n	80012f0 <__aeabi_dadd+0x530>
 800132c:	464a      	mov	r2, r9
 800132e:	4302      	orrs	r2, r0
 8001330:	d0c1      	beq.n	80012b6 <__aeabi_dadd+0x4f6>
 8001332:	074a      	lsls	r2, r1, #29
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	4313      	orrs	r3, r2
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	08c9      	lsrs	r1, r1, #3
 800133c:	0312      	lsls	r2, r2, #12
 800133e:	4211      	tst	r1, r2
 8001340:	d008      	beq.n	8001354 <__aeabi_dadd+0x594>
 8001342:	4648      	mov	r0, r9
 8001344:	08c4      	lsrs	r4, r0, #3
 8001346:	4214      	tst	r4, r2
 8001348:	d104      	bne.n	8001354 <__aeabi_dadd+0x594>
 800134a:	4643      	mov	r3, r8
 800134c:	0021      	movs	r1, r4
 800134e:	08db      	lsrs	r3, r3, #3
 8001350:	0742      	lsls	r2, r0, #29
 8001352:	4313      	orrs	r3, r2
 8001354:	0f5a      	lsrs	r2, r3, #29
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	0752      	lsls	r2, r2, #29
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	4313      	orrs	r3, r2
 800135e:	e681      	b.n	8001064 <__aeabi_dadd+0x2a4>
 8001360:	464b      	mov	r3, r9
 8001362:	4303      	orrs	r3, r0
 8001364:	d100      	bne.n	8001368 <__aeabi_dadd+0x5a8>
 8001366:	e714      	b.n	8001192 <__aeabi_dadd+0x3d2>
 8001368:	464b      	mov	r3, r9
 800136a:	464a      	mov	r2, r9
 800136c:	08c0      	lsrs	r0, r0, #3
 800136e:	075b      	lsls	r3, r3, #29
 8001370:	4665      	mov	r5, ip
 8001372:	4303      	orrs	r3, r0
 8001374:	08d1      	lsrs	r1, r2, #3
 8001376:	e655      	b.n	8001024 <__aeabi_dadd+0x264>
 8001378:	1ac4      	subs	r4, r0, r3
 800137a:	45a0      	cmp	r8, r4
 800137c:	4180      	sbcs	r0, r0
 800137e:	464b      	mov	r3, r9
 8001380:	4240      	negs	r0, r0
 8001382:	1a59      	subs	r1, r3, r1
 8001384:	1a0b      	subs	r3, r1, r0
 8001386:	469a      	mov	sl, r3
 8001388:	4665      	mov	r5, ip
 800138a:	2601      	movs	r6, #1
 800138c:	e564      	b.n	8000e58 <__aeabi_dadd+0x98>
 800138e:	1a1c      	subs	r4, r3, r0
 8001390:	464a      	mov	r2, r9
 8001392:	42a3      	cmp	r3, r4
 8001394:	4180      	sbcs	r0, r0
 8001396:	1a8a      	subs	r2, r1, r2
 8001398:	4240      	negs	r0, r0
 800139a:	1a12      	subs	r2, r2, r0
 800139c:	4692      	mov	sl, r2
 800139e:	0212      	lsls	r2, r2, #8
 80013a0:	d549      	bpl.n	8001436 <__aeabi_dadd+0x676>
 80013a2:	4642      	mov	r2, r8
 80013a4:	1ad4      	subs	r4, r2, r3
 80013a6:	45a0      	cmp	r8, r4
 80013a8:	4180      	sbcs	r0, r0
 80013aa:	464b      	mov	r3, r9
 80013ac:	4240      	negs	r0, r0
 80013ae:	1a59      	subs	r1, r3, r1
 80013b0:	1a0b      	subs	r3, r1, r0
 80013b2:	469a      	mov	sl, r3
 80013b4:	4665      	mov	r5, ip
 80013b6:	e57f      	b.n	8000eb8 <__aeabi_dadd+0xf8>
 80013b8:	464b      	mov	r3, r9
 80013ba:	464a      	mov	r2, r9
 80013bc:	08c0      	lsrs	r0, r0, #3
 80013be:	075b      	lsls	r3, r3, #29
 80013c0:	4303      	orrs	r3, r0
 80013c2:	08d1      	lsrs	r1, r2, #3
 80013c4:	e62b      	b.n	800101e <__aeabi_dadd+0x25e>
 80013c6:	464a      	mov	r2, r9
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	4302      	orrs	r2, r0
 80013cc:	d138      	bne.n	8001440 <__aeabi_dadd+0x680>
 80013ce:	074a      	lsls	r2, r1, #29
 80013d0:	4313      	orrs	r3, r2
 80013d2:	08c9      	lsrs	r1, r1, #3
 80013d4:	e646      	b.n	8001064 <__aeabi_dadd+0x2a4>
 80013d6:	464b      	mov	r3, r9
 80013d8:	464a      	mov	r2, r9
 80013da:	08c0      	lsrs	r0, r0, #3
 80013dc:	075b      	lsls	r3, r3, #29
 80013de:	4303      	orrs	r3, r0
 80013e0:	08d1      	lsrs	r1, r2, #3
 80013e2:	e61f      	b.n	8001024 <__aeabi_dadd+0x264>
 80013e4:	181c      	adds	r4, r3, r0
 80013e6:	429c      	cmp	r4, r3
 80013e8:	419b      	sbcs	r3, r3
 80013ea:	4449      	add	r1, r9
 80013ec:	468a      	mov	sl, r1
 80013ee:	425b      	negs	r3, r3
 80013f0:	449a      	add	sl, r3
 80013f2:	4653      	mov	r3, sl
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	d400      	bmi.n	80013fa <__aeabi_dadd+0x63a>
 80013f8:	e607      	b.n	800100a <__aeabi_dadd+0x24a>
 80013fa:	4652      	mov	r2, sl
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <__aeabi_dadd+0x6bc>)
 80013fe:	2601      	movs	r6, #1
 8001400:	401a      	ands	r2, r3
 8001402:	4692      	mov	sl, r2
 8001404:	e601      	b.n	800100a <__aeabi_dadd+0x24a>
 8001406:	003c      	movs	r4, r7
 8001408:	000e      	movs	r6, r1
 800140a:	3c20      	subs	r4, #32
 800140c:	40e6      	lsrs	r6, r4
 800140e:	2f20      	cmp	r7, #32
 8001410:	d003      	beq.n	800141a <__aeabi_dadd+0x65a>
 8001412:	2440      	movs	r4, #64	; 0x40
 8001414:	1be4      	subs	r4, r4, r7
 8001416:	40a1      	lsls	r1, r4
 8001418:	430b      	orrs	r3, r1
 800141a:	001c      	movs	r4, r3
 800141c:	1e63      	subs	r3, r4, #1
 800141e:	419c      	sbcs	r4, r3
 8001420:	4334      	orrs	r4, r6
 8001422:	e65e      	b.n	80010e2 <__aeabi_dadd+0x322>
 8001424:	4443      	add	r3, r8
 8001426:	4283      	cmp	r3, r0
 8001428:	4180      	sbcs	r0, r0
 800142a:	4449      	add	r1, r9
 800142c:	468a      	mov	sl, r1
 800142e:	4240      	negs	r0, r0
 8001430:	001c      	movs	r4, r3
 8001432:	4482      	add	sl, r0
 8001434:	e6bc      	b.n	80011b0 <__aeabi_dadd+0x3f0>
 8001436:	4653      	mov	r3, sl
 8001438:	4323      	orrs	r3, r4
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x67e>
 800143c:	e6a9      	b.n	8001192 <__aeabi_dadd+0x3d2>
 800143e:	e5e4      	b.n	800100a <__aeabi_dadd+0x24a>
 8001440:	074a      	lsls	r2, r1, #29
 8001442:	4313      	orrs	r3, r2
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	08c9      	lsrs	r1, r1, #3
 8001448:	0312      	lsls	r2, r2, #12
 800144a:	4211      	tst	r1, r2
 800144c:	d009      	beq.n	8001462 <__aeabi_dadd+0x6a2>
 800144e:	4648      	mov	r0, r9
 8001450:	08c4      	lsrs	r4, r0, #3
 8001452:	4214      	tst	r4, r2
 8001454:	d105      	bne.n	8001462 <__aeabi_dadd+0x6a2>
 8001456:	4643      	mov	r3, r8
 8001458:	4665      	mov	r5, ip
 800145a:	0021      	movs	r1, r4
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	0742      	lsls	r2, r0, #29
 8001460:	4313      	orrs	r3, r2
 8001462:	0f5a      	lsrs	r2, r3, #29
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	08db      	lsrs	r3, r3, #3
 8001468:	0752      	lsls	r2, r2, #29
 800146a:	4313      	orrs	r3, r2
 800146c:	e5fa      	b.n	8001064 <__aeabi_dadd+0x2a4>
 800146e:	2300      	movs	r3, #0
 8001470:	4a01      	ldr	r2, [pc, #4]	; (8001478 <__aeabi_dadd+0x6b8>)
 8001472:	001c      	movs	r4, r3
 8001474:	e540      	b.n	8000ef8 <__aeabi_dadd+0x138>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	000007ff 	.word	0x000007ff
 800147c:	ff7fffff 	.word	0xff7fffff

08001480 <__aeabi_ddiv>:
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	4657      	mov	r7, sl
 8001484:	464e      	mov	r6, r9
 8001486:	4645      	mov	r5, r8
 8001488:	46de      	mov	lr, fp
 800148a:	b5e0      	push	{r5, r6, r7, lr}
 800148c:	030c      	lsls	r4, r1, #12
 800148e:	001f      	movs	r7, r3
 8001490:	004b      	lsls	r3, r1, #1
 8001492:	4681      	mov	r9, r0
 8001494:	4692      	mov	sl, r2
 8001496:	0005      	movs	r5, r0
 8001498:	b085      	sub	sp, #20
 800149a:	0b24      	lsrs	r4, r4, #12
 800149c:	0d5b      	lsrs	r3, r3, #21
 800149e:	0fce      	lsrs	r6, r1, #31
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_ddiv+0x26>
 80014a4:	e152      	b.n	800174c <__aeabi_ddiv+0x2cc>
 80014a6:	4ad2      	ldr	r2, [pc, #840]	; (80017f0 <__aeabi_ddiv+0x370>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d100      	bne.n	80014ae <__aeabi_ddiv+0x2e>
 80014ac:	e16e      	b.n	800178c <__aeabi_ddiv+0x30c>
 80014ae:	0f42      	lsrs	r2, r0, #29
 80014b0:	00e4      	lsls	r4, r4, #3
 80014b2:	4314      	orrs	r4, r2
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	0412      	lsls	r2, r2, #16
 80014b8:	4322      	orrs	r2, r4
 80014ba:	4690      	mov	r8, r2
 80014bc:	4acd      	ldr	r2, [pc, #820]	; (80017f4 <__aeabi_ddiv+0x374>)
 80014be:	00c5      	lsls	r5, r0, #3
 80014c0:	4693      	mov	fp, r2
 80014c2:	449b      	add	fp, r3
 80014c4:	2300      	movs	r3, #0
 80014c6:	4699      	mov	r9, r3
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	033c      	lsls	r4, r7, #12
 80014cc:	007b      	lsls	r3, r7, #1
 80014ce:	4650      	mov	r0, sl
 80014d0:	0b24      	lsrs	r4, r4, #12
 80014d2:	0d5b      	lsrs	r3, r3, #21
 80014d4:	0fff      	lsrs	r7, r7, #31
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d100      	bne.n	80014dc <__aeabi_ddiv+0x5c>
 80014da:	e11a      	b.n	8001712 <__aeabi_ddiv+0x292>
 80014dc:	4ac4      	ldr	r2, [pc, #784]	; (80017f0 <__aeabi_ddiv+0x370>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d100      	bne.n	80014e4 <__aeabi_ddiv+0x64>
 80014e2:	e15e      	b.n	80017a2 <__aeabi_ddiv+0x322>
 80014e4:	0f42      	lsrs	r2, r0, #29
 80014e6:	00e4      	lsls	r4, r4, #3
 80014e8:	4322      	orrs	r2, r4
 80014ea:	2480      	movs	r4, #128	; 0x80
 80014ec:	0424      	lsls	r4, r4, #16
 80014ee:	4314      	orrs	r4, r2
 80014f0:	4ac0      	ldr	r2, [pc, #768]	; (80017f4 <__aeabi_ddiv+0x374>)
 80014f2:	00c1      	lsls	r1, r0, #3
 80014f4:	4694      	mov	ip, r2
 80014f6:	465a      	mov	r2, fp
 80014f8:	4463      	add	r3, ip
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	469b      	mov	fp, r3
 80014fe:	2000      	movs	r0, #0
 8001500:	0033      	movs	r3, r6
 8001502:	407b      	eors	r3, r7
 8001504:	469a      	mov	sl, r3
 8001506:	464b      	mov	r3, r9
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d827      	bhi.n	800155c <__aeabi_ddiv+0xdc>
 800150c:	4aba      	ldr	r2, [pc, #744]	; (80017f8 <__aeabi_ddiv+0x378>)
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	58d3      	ldr	r3, [r2, r3]
 8001512:	469f      	mov	pc, r3
 8001514:	46b2      	mov	sl, r6
 8001516:	9b00      	ldr	r3, [sp, #0]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d016      	beq.n	800154a <__aeabi_ddiv+0xca>
 800151c:	2b03      	cmp	r3, #3
 800151e:	d100      	bne.n	8001522 <__aeabi_ddiv+0xa2>
 8001520:	e287      	b.n	8001a32 <__aeabi_ddiv+0x5b2>
 8001522:	2b01      	cmp	r3, #1
 8001524:	d000      	beq.n	8001528 <__aeabi_ddiv+0xa8>
 8001526:	e0d5      	b.n	80016d4 <__aeabi_ddiv+0x254>
 8001528:	2300      	movs	r3, #0
 800152a:	2200      	movs	r2, #0
 800152c:	2500      	movs	r5, #0
 800152e:	051b      	lsls	r3, r3, #20
 8001530:	4313      	orrs	r3, r2
 8001532:	4652      	mov	r2, sl
 8001534:	07d2      	lsls	r2, r2, #31
 8001536:	4313      	orrs	r3, r2
 8001538:	0028      	movs	r0, r5
 800153a:	0019      	movs	r1, r3
 800153c:	b005      	add	sp, #20
 800153e:	bcf0      	pop	{r4, r5, r6, r7}
 8001540:	46bb      	mov	fp, r7
 8001542:	46b2      	mov	sl, r6
 8001544:	46a9      	mov	r9, r5
 8001546:	46a0      	mov	r8, r4
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154a:	2200      	movs	r2, #0
 800154c:	2500      	movs	r5, #0
 800154e:	4ba8      	ldr	r3, [pc, #672]	; (80017f0 <__aeabi_ddiv+0x370>)
 8001550:	e7ed      	b.n	800152e <__aeabi_ddiv+0xae>
 8001552:	46ba      	mov	sl, r7
 8001554:	46a0      	mov	r8, r4
 8001556:	000d      	movs	r5, r1
 8001558:	9000      	str	r0, [sp, #0]
 800155a:	e7dc      	b.n	8001516 <__aeabi_ddiv+0x96>
 800155c:	4544      	cmp	r4, r8
 800155e:	d200      	bcs.n	8001562 <__aeabi_ddiv+0xe2>
 8001560:	e1c4      	b.n	80018ec <__aeabi_ddiv+0x46c>
 8001562:	d100      	bne.n	8001566 <__aeabi_ddiv+0xe6>
 8001564:	e1bf      	b.n	80018e6 <__aeabi_ddiv+0x466>
 8001566:	2301      	movs	r3, #1
 8001568:	425b      	negs	r3, r3
 800156a:	469c      	mov	ip, r3
 800156c:	002e      	movs	r6, r5
 800156e:	4640      	mov	r0, r8
 8001570:	2500      	movs	r5, #0
 8001572:	44e3      	add	fp, ip
 8001574:	0223      	lsls	r3, r4, #8
 8001576:	0e0c      	lsrs	r4, r1, #24
 8001578:	431c      	orrs	r4, r3
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	4699      	mov	r9, r3
 800157e:	0423      	lsls	r3, r4, #16
 8001580:	020a      	lsls	r2, r1, #8
 8001582:	0c1f      	lsrs	r7, r3, #16
 8001584:	4649      	mov	r1, r9
 8001586:	9200      	str	r2, [sp, #0]
 8001588:	9701      	str	r7, [sp, #4]
 800158a:	f7fe fe5f 	bl	800024c <__aeabi_uidivmod>
 800158e:	0002      	movs	r2, r0
 8001590:	437a      	muls	r2, r7
 8001592:	040b      	lsls	r3, r1, #16
 8001594:	0c31      	lsrs	r1, r6, #16
 8001596:	4680      	mov	r8, r0
 8001598:	4319      	orrs	r1, r3
 800159a:	428a      	cmp	r2, r1
 800159c:	d907      	bls.n	80015ae <__aeabi_ddiv+0x12e>
 800159e:	2301      	movs	r3, #1
 80015a0:	425b      	negs	r3, r3
 80015a2:	469c      	mov	ip, r3
 80015a4:	1909      	adds	r1, r1, r4
 80015a6:	44e0      	add	r8, ip
 80015a8:	428c      	cmp	r4, r1
 80015aa:	d800      	bhi.n	80015ae <__aeabi_ddiv+0x12e>
 80015ac:	e201      	b.n	80019b2 <__aeabi_ddiv+0x532>
 80015ae:	1a88      	subs	r0, r1, r2
 80015b0:	4649      	mov	r1, r9
 80015b2:	f7fe fe4b 	bl	800024c <__aeabi_uidivmod>
 80015b6:	9a01      	ldr	r2, [sp, #4]
 80015b8:	0436      	lsls	r6, r6, #16
 80015ba:	4342      	muls	r2, r0
 80015bc:	0409      	lsls	r1, r1, #16
 80015be:	0c36      	lsrs	r6, r6, #16
 80015c0:	0003      	movs	r3, r0
 80015c2:	430e      	orrs	r6, r1
 80015c4:	42b2      	cmp	r2, r6
 80015c6:	d904      	bls.n	80015d2 <__aeabi_ddiv+0x152>
 80015c8:	1936      	adds	r6, r6, r4
 80015ca:	3b01      	subs	r3, #1
 80015cc:	42b4      	cmp	r4, r6
 80015ce:	d800      	bhi.n	80015d2 <__aeabi_ddiv+0x152>
 80015d0:	e1e9      	b.n	80019a6 <__aeabi_ddiv+0x526>
 80015d2:	1ab0      	subs	r0, r6, r2
 80015d4:	4642      	mov	r2, r8
 80015d6:	9e00      	ldr	r6, [sp, #0]
 80015d8:	0412      	lsls	r2, r2, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	0c33      	lsrs	r3, r6, #16
 80015de:	001f      	movs	r7, r3
 80015e0:	0c11      	lsrs	r1, r2, #16
 80015e2:	4690      	mov	r8, r2
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	0413      	lsls	r3, r2, #16
 80015e8:	0432      	lsls	r2, r6, #16
 80015ea:	0c16      	lsrs	r6, r2, #16
 80015ec:	0032      	movs	r2, r6
 80015ee:	0c1b      	lsrs	r3, r3, #16
 80015f0:	435a      	muls	r2, r3
 80015f2:	9603      	str	r6, [sp, #12]
 80015f4:	437b      	muls	r3, r7
 80015f6:	434e      	muls	r6, r1
 80015f8:	4379      	muls	r1, r7
 80015fa:	0c17      	lsrs	r7, r2, #16
 80015fc:	46bc      	mov	ip, r7
 80015fe:	199b      	adds	r3, r3, r6
 8001600:	4463      	add	r3, ip
 8001602:	429e      	cmp	r6, r3
 8001604:	d903      	bls.n	800160e <__aeabi_ddiv+0x18e>
 8001606:	2680      	movs	r6, #128	; 0x80
 8001608:	0276      	lsls	r6, r6, #9
 800160a:	46b4      	mov	ip, r6
 800160c:	4461      	add	r1, ip
 800160e:	0c1e      	lsrs	r6, r3, #16
 8001610:	1871      	adds	r1, r6, r1
 8001612:	0416      	lsls	r6, r2, #16
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	0c36      	lsrs	r6, r6, #16
 8001618:	199e      	adds	r6, r3, r6
 800161a:	4288      	cmp	r0, r1
 800161c:	d302      	bcc.n	8001624 <__aeabi_ddiv+0x1a4>
 800161e:	d112      	bne.n	8001646 <__aeabi_ddiv+0x1c6>
 8001620:	42b5      	cmp	r5, r6
 8001622:	d210      	bcs.n	8001646 <__aeabi_ddiv+0x1c6>
 8001624:	4643      	mov	r3, r8
 8001626:	1e5a      	subs	r2, r3, #1
 8001628:	9b00      	ldr	r3, [sp, #0]
 800162a:	469c      	mov	ip, r3
 800162c:	4465      	add	r5, ip
 800162e:	001f      	movs	r7, r3
 8001630:	429d      	cmp	r5, r3
 8001632:	419b      	sbcs	r3, r3
 8001634:	425b      	negs	r3, r3
 8001636:	191b      	adds	r3, r3, r4
 8001638:	18c0      	adds	r0, r0, r3
 800163a:	4284      	cmp	r4, r0
 800163c:	d200      	bcs.n	8001640 <__aeabi_ddiv+0x1c0>
 800163e:	e19e      	b.n	800197e <__aeabi_ddiv+0x4fe>
 8001640:	d100      	bne.n	8001644 <__aeabi_ddiv+0x1c4>
 8001642:	e199      	b.n	8001978 <__aeabi_ddiv+0x4f8>
 8001644:	4690      	mov	r8, r2
 8001646:	1bae      	subs	r6, r5, r6
 8001648:	42b5      	cmp	r5, r6
 800164a:	41ad      	sbcs	r5, r5
 800164c:	1a40      	subs	r0, r0, r1
 800164e:	426d      	negs	r5, r5
 8001650:	1b40      	subs	r0, r0, r5
 8001652:	4284      	cmp	r4, r0
 8001654:	d100      	bne.n	8001658 <__aeabi_ddiv+0x1d8>
 8001656:	e1d2      	b.n	80019fe <__aeabi_ddiv+0x57e>
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe fdf7 	bl	800024c <__aeabi_uidivmod>
 800165e:	9a01      	ldr	r2, [sp, #4]
 8001660:	040b      	lsls	r3, r1, #16
 8001662:	4342      	muls	r2, r0
 8001664:	0c31      	lsrs	r1, r6, #16
 8001666:	0005      	movs	r5, r0
 8001668:	4319      	orrs	r1, r3
 800166a:	428a      	cmp	r2, r1
 800166c:	d900      	bls.n	8001670 <__aeabi_ddiv+0x1f0>
 800166e:	e16c      	b.n	800194a <__aeabi_ddiv+0x4ca>
 8001670:	1a88      	subs	r0, r1, r2
 8001672:	4649      	mov	r1, r9
 8001674:	f7fe fdea 	bl	800024c <__aeabi_uidivmod>
 8001678:	9a01      	ldr	r2, [sp, #4]
 800167a:	0436      	lsls	r6, r6, #16
 800167c:	4342      	muls	r2, r0
 800167e:	0409      	lsls	r1, r1, #16
 8001680:	0c36      	lsrs	r6, r6, #16
 8001682:	0003      	movs	r3, r0
 8001684:	430e      	orrs	r6, r1
 8001686:	42b2      	cmp	r2, r6
 8001688:	d900      	bls.n	800168c <__aeabi_ddiv+0x20c>
 800168a:	e153      	b.n	8001934 <__aeabi_ddiv+0x4b4>
 800168c:	9803      	ldr	r0, [sp, #12]
 800168e:	1ab6      	subs	r6, r6, r2
 8001690:	0002      	movs	r2, r0
 8001692:	042d      	lsls	r5, r5, #16
 8001694:	431d      	orrs	r5, r3
 8001696:	9f02      	ldr	r7, [sp, #8]
 8001698:	042b      	lsls	r3, r5, #16
 800169a:	0c1b      	lsrs	r3, r3, #16
 800169c:	435a      	muls	r2, r3
 800169e:	437b      	muls	r3, r7
 80016a0:	469c      	mov	ip, r3
 80016a2:	0c29      	lsrs	r1, r5, #16
 80016a4:	4348      	muls	r0, r1
 80016a6:	0c13      	lsrs	r3, r2, #16
 80016a8:	4484      	add	ip, r0
 80016aa:	4463      	add	r3, ip
 80016ac:	4379      	muls	r1, r7
 80016ae:	4298      	cmp	r0, r3
 80016b0:	d903      	bls.n	80016ba <__aeabi_ddiv+0x23a>
 80016b2:	2080      	movs	r0, #128	; 0x80
 80016b4:	0240      	lsls	r0, r0, #9
 80016b6:	4684      	mov	ip, r0
 80016b8:	4461      	add	r1, ip
 80016ba:	0c18      	lsrs	r0, r3, #16
 80016bc:	0412      	lsls	r2, r2, #16
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	0c12      	lsrs	r2, r2, #16
 80016c2:	1840      	adds	r0, r0, r1
 80016c4:	189b      	adds	r3, r3, r2
 80016c6:	4286      	cmp	r6, r0
 80016c8:	d200      	bcs.n	80016cc <__aeabi_ddiv+0x24c>
 80016ca:	e100      	b.n	80018ce <__aeabi_ddiv+0x44e>
 80016cc:	d100      	bne.n	80016d0 <__aeabi_ddiv+0x250>
 80016ce:	e0fb      	b.n	80018c8 <__aeabi_ddiv+0x448>
 80016d0:	2301      	movs	r3, #1
 80016d2:	431d      	orrs	r5, r3
 80016d4:	4b49      	ldr	r3, [pc, #292]	; (80017fc <__aeabi_ddiv+0x37c>)
 80016d6:	445b      	add	r3, fp
 80016d8:	2b00      	cmp	r3, #0
 80016da:	dc00      	bgt.n	80016de <__aeabi_ddiv+0x25e>
 80016dc:	e0aa      	b.n	8001834 <__aeabi_ddiv+0x3b4>
 80016de:	076a      	lsls	r2, r5, #29
 80016e0:	d000      	beq.n	80016e4 <__aeabi_ddiv+0x264>
 80016e2:	e13d      	b.n	8001960 <__aeabi_ddiv+0x4e0>
 80016e4:	08e9      	lsrs	r1, r5, #3
 80016e6:	4642      	mov	r2, r8
 80016e8:	01d2      	lsls	r2, r2, #7
 80016ea:	d506      	bpl.n	80016fa <__aeabi_ddiv+0x27a>
 80016ec:	4642      	mov	r2, r8
 80016ee:	4b44      	ldr	r3, [pc, #272]	; (8001800 <__aeabi_ddiv+0x380>)
 80016f0:	401a      	ands	r2, r3
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	4690      	mov	r8, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	445b      	add	r3, fp
 80016fa:	4a42      	ldr	r2, [pc, #264]	; (8001804 <__aeabi_ddiv+0x384>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	dd00      	ble.n	8001702 <__aeabi_ddiv+0x282>
 8001700:	e723      	b.n	800154a <__aeabi_ddiv+0xca>
 8001702:	4642      	mov	r2, r8
 8001704:	055b      	lsls	r3, r3, #21
 8001706:	0755      	lsls	r5, r2, #29
 8001708:	0252      	lsls	r2, r2, #9
 800170a:	430d      	orrs	r5, r1
 800170c:	0b12      	lsrs	r2, r2, #12
 800170e:	0d5b      	lsrs	r3, r3, #21
 8001710:	e70d      	b.n	800152e <__aeabi_ddiv+0xae>
 8001712:	4651      	mov	r1, sl
 8001714:	4321      	orrs	r1, r4
 8001716:	d100      	bne.n	800171a <__aeabi_ddiv+0x29a>
 8001718:	e07c      	b.n	8001814 <__aeabi_ddiv+0x394>
 800171a:	2c00      	cmp	r4, #0
 800171c:	d100      	bne.n	8001720 <__aeabi_ddiv+0x2a0>
 800171e:	e0fb      	b.n	8001918 <__aeabi_ddiv+0x498>
 8001720:	0020      	movs	r0, r4
 8001722:	f001 fa63 	bl	8002bec <__clzsi2>
 8001726:	0002      	movs	r2, r0
 8001728:	3a0b      	subs	r2, #11
 800172a:	231d      	movs	r3, #29
 800172c:	1a9b      	subs	r3, r3, r2
 800172e:	4652      	mov	r2, sl
 8001730:	0001      	movs	r1, r0
 8001732:	40da      	lsrs	r2, r3
 8001734:	4653      	mov	r3, sl
 8001736:	3908      	subs	r1, #8
 8001738:	408b      	lsls	r3, r1
 800173a:	408c      	lsls	r4, r1
 800173c:	0019      	movs	r1, r3
 800173e:	4314      	orrs	r4, r2
 8001740:	4b31      	ldr	r3, [pc, #196]	; (8001808 <__aeabi_ddiv+0x388>)
 8001742:	4458      	add	r0, fp
 8001744:	469b      	mov	fp, r3
 8001746:	4483      	add	fp, r0
 8001748:	2000      	movs	r0, #0
 800174a:	e6d9      	b.n	8001500 <__aeabi_ddiv+0x80>
 800174c:	0003      	movs	r3, r0
 800174e:	4323      	orrs	r3, r4
 8001750:	4698      	mov	r8, r3
 8001752:	d044      	beq.n	80017de <__aeabi_ddiv+0x35e>
 8001754:	2c00      	cmp	r4, #0
 8001756:	d100      	bne.n	800175a <__aeabi_ddiv+0x2da>
 8001758:	e0cf      	b.n	80018fa <__aeabi_ddiv+0x47a>
 800175a:	0020      	movs	r0, r4
 800175c:	f001 fa46 	bl	8002bec <__clzsi2>
 8001760:	0001      	movs	r1, r0
 8001762:	0002      	movs	r2, r0
 8001764:	390b      	subs	r1, #11
 8001766:	231d      	movs	r3, #29
 8001768:	1a5b      	subs	r3, r3, r1
 800176a:	4649      	mov	r1, r9
 800176c:	0010      	movs	r0, r2
 800176e:	40d9      	lsrs	r1, r3
 8001770:	3808      	subs	r0, #8
 8001772:	4084      	lsls	r4, r0
 8001774:	000b      	movs	r3, r1
 8001776:	464d      	mov	r5, r9
 8001778:	4323      	orrs	r3, r4
 800177a:	4698      	mov	r8, r3
 800177c:	4085      	lsls	r5, r0
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <__aeabi_ddiv+0x38c>)
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	469b      	mov	fp, r3
 8001784:	2300      	movs	r3, #0
 8001786:	4699      	mov	r9, r3
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	e69e      	b.n	80014ca <__aeabi_ddiv+0x4a>
 800178c:	0002      	movs	r2, r0
 800178e:	4322      	orrs	r2, r4
 8001790:	4690      	mov	r8, r2
 8001792:	d11d      	bne.n	80017d0 <__aeabi_ddiv+0x350>
 8001794:	2208      	movs	r2, #8
 8001796:	469b      	mov	fp, r3
 8001798:	2302      	movs	r3, #2
 800179a:	2500      	movs	r5, #0
 800179c:	4691      	mov	r9, r2
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	e693      	b.n	80014ca <__aeabi_ddiv+0x4a>
 80017a2:	4651      	mov	r1, sl
 80017a4:	4321      	orrs	r1, r4
 80017a6:	d109      	bne.n	80017bc <__aeabi_ddiv+0x33c>
 80017a8:	2302      	movs	r3, #2
 80017aa:	464a      	mov	r2, r9
 80017ac:	431a      	orrs	r2, r3
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <__aeabi_ddiv+0x390>)
 80017b0:	4691      	mov	r9, r2
 80017b2:	469c      	mov	ip, r3
 80017b4:	2400      	movs	r4, #0
 80017b6:	2002      	movs	r0, #2
 80017b8:	44e3      	add	fp, ip
 80017ba:	e6a1      	b.n	8001500 <__aeabi_ddiv+0x80>
 80017bc:	2303      	movs	r3, #3
 80017be:	464a      	mov	r2, r9
 80017c0:	431a      	orrs	r2, r3
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <__aeabi_ddiv+0x390>)
 80017c4:	4691      	mov	r9, r2
 80017c6:	469c      	mov	ip, r3
 80017c8:	4651      	mov	r1, sl
 80017ca:	2003      	movs	r0, #3
 80017cc:	44e3      	add	fp, ip
 80017ce:	e697      	b.n	8001500 <__aeabi_ddiv+0x80>
 80017d0:	220c      	movs	r2, #12
 80017d2:	469b      	mov	fp, r3
 80017d4:	2303      	movs	r3, #3
 80017d6:	46a0      	mov	r8, r4
 80017d8:	4691      	mov	r9, r2
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	e675      	b.n	80014ca <__aeabi_ddiv+0x4a>
 80017de:	2304      	movs	r3, #4
 80017e0:	4699      	mov	r9, r3
 80017e2:	2300      	movs	r3, #0
 80017e4:	469b      	mov	fp, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	2500      	movs	r5, #0
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	e66d      	b.n	80014ca <__aeabi_ddiv+0x4a>
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	fffffc01 	.word	0xfffffc01
 80017f8:	0800e870 	.word	0x0800e870
 80017fc:	000003ff 	.word	0x000003ff
 8001800:	feffffff 	.word	0xfeffffff
 8001804:	000007fe 	.word	0x000007fe
 8001808:	000003f3 	.word	0x000003f3
 800180c:	fffffc0d 	.word	0xfffffc0d
 8001810:	fffff801 	.word	0xfffff801
 8001814:	464a      	mov	r2, r9
 8001816:	2301      	movs	r3, #1
 8001818:	431a      	orrs	r2, r3
 800181a:	4691      	mov	r9, r2
 800181c:	2400      	movs	r4, #0
 800181e:	2001      	movs	r0, #1
 8001820:	e66e      	b.n	8001500 <__aeabi_ddiv+0x80>
 8001822:	2300      	movs	r3, #0
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	469a      	mov	sl, r3
 8001828:	2500      	movs	r5, #0
 800182a:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 800182c:	0312      	lsls	r2, r2, #12
 800182e:	e67e      	b.n	800152e <__aeabi_ddiv+0xae>
 8001830:	2501      	movs	r5, #1
 8001832:	426d      	negs	r5, r5
 8001834:	2201      	movs	r2, #1
 8001836:	1ad2      	subs	r2, r2, r3
 8001838:	2a38      	cmp	r2, #56	; 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_ddiv+0x3be>
 800183c:	e674      	b.n	8001528 <__aeabi_ddiv+0xa8>
 800183e:	2a1f      	cmp	r2, #31
 8001840:	dc00      	bgt.n	8001844 <__aeabi_ddiv+0x3c4>
 8001842:	e0bd      	b.n	80019c0 <__aeabi_ddiv+0x540>
 8001844:	211f      	movs	r1, #31
 8001846:	4249      	negs	r1, r1
 8001848:	1acb      	subs	r3, r1, r3
 800184a:	4641      	mov	r1, r8
 800184c:	40d9      	lsrs	r1, r3
 800184e:	000b      	movs	r3, r1
 8001850:	2a20      	cmp	r2, #32
 8001852:	d004      	beq.n	800185e <__aeabi_ddiv+0x3de>
 8001854:	4641      	mov	r1, r8
 8001856:	4a7e      	ldr	r2, [pc, #504]	; (8001a50 <__aeabi_ddiv+0x5d0>)
 8001858:	445a      	add	r2, fp
 800185a:	4091      	lsls	r1, r2
 800185c:	430d      	orrs	r5, r1
 800185e:	0029      	movs	r1, r5
 8001860:	1e4a      	subs	r2, r1, #1
 8001862:	4191      	sbcs	r1, r2
 8001864:	4319      	orrs	r1, r3
 8001866:	2307      	movs	r3, #7
 8001868:	001d      	movs	r5, r3
 800186a:	2200      	movs	r2, #0
 800186c:	400d      	ands	r5, r1
 800186e:	420b      	tst	r3, r1
 8001870:	d100      	bne.n	8001874 <__aeabi_ddiv+0x3f4>
 8001872:	e0d0      	b.n	8001a16 <__aeabi_ddiv+0x596>
 8001874:	220f      	movs	r2, #15
 8001876:	2300      	movs	r3, #0
 8001878:	400a      	ands	r2, r1
 800187a:	2a04      	cmp	r2, #4
 800187c:	d100      	bne.n	8001880 <__aeabi_ddiv+0x400>
 800187e:	e0c7      	b.n	8001a10 <__aeabi_ddiv+0x590>
 8001880:	1d0a      	adds	r2, r1, #4
 8001882:	428a      	cmp	r2, r1
 8001884:	4189      	sbcs	r1, r1
 8001886:	4249      	negs	r1, r1
 8001888:	185b      	adds	r3, r3, r1
 800188a:	0011      	movs	r1, r2
 800188c:	021a      	lsls	r2, r3, #8
 800188e:	d400      	bmi.n	8001892 <__aeabi_ddiv+0x412>
 8001890:	e0be      	b.n	8001a10 <__aeabi_ddiv+0x590>
 8001892:	2301      	movs	r3, #1
 8001894:	2200      	movs	r2, #0
 8001896:	2500      	movs	r5, #0
 8001898:	e649      	b.n	800152e <__aeabi_ddiv+0xae>
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	4643      	mov	r3, r8
 800189e:	0312      	lsls	r2, r2, #12
 80018a0:	4213      	tst	r3, r2
 80018a2:	d008      	beq.n	80018b6 <__aeabi_ddiv+0x436>
 80018a4:	4214      	tst	r4, r2
 80018a6:	d106      	bne.n	80018b6 <__aeabi_ddiv+0x436>
 80018a8:	4322      	orrs	r2, r4
 80018aa:	0312      	lsls	r2, r2, #12
 80018ac:	46ba      	mov	sl, r7
 80018ae:	000d      	movs	r5, r1
 80018b0:	4b66      	ldr	r3, [pc, #408]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 80018b2:	0b12      	lsrs	r2, r2, #12
 80018b4:	e63b      	b.n	800152e <__aeabi_ddiv+0xae>
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	4643      	mov	r3, r8
 80018ba:	0312      	lsls	r2, r2, #12
 80018bc:	431a      	orrs	r2, r3
 80018be:	0312      	lsls	r2, r2, #12
 80018c0:	46b2      	mov	sl, r6
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 80018c4:	0b12      	lsrs	r2, r2, #12
 80018c6:	e632      	b.n	800152e <__aeabi_ddiv+0xae>
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x44e>
 80018cc:	e702      	b.n	80016d4 <__aeabi_ddiv+0x254>
 80018ce:	19a6      	adds	r6, r4, r6
 80018d0:	1e6a      	subs	r2, r5, #1
 80018d2:	42a6      	cmp	r6, r4
 80018d4:	d200      	bcs.n	80018d8 <__aeabi_ddiv+0x458>
 80018d6:	e089      	b.n	80019ec <__aeabi_ddiv+0x56c>
 80018d8:	4286      	cmp	r6, r0
 80018da:	d200      	bcs.n	80018de <__aeabi_ddiv+0x45e>
 80018dc:	e09f      	b.n	8001a1e <__aeabi_ddiv+0x59e>
 80018de:	d100      	bne.n	80018e2 <__aeabi_ddiv+0x462>
 80018e0:	e0af      	b.n	8001a42 <__aeabi_ddiv+0x5c2>
 80018e2:	0015      	movs	r5, r2
 80018e4:	e6f4      	b.n	80016d0 <__aeabi_ddiv+0x250>
 80018e6:	42a9      	cmp	r1, r5
 80018e8:	d900      	bls.n	80018ec <__aeabi_ddiv+0x46c>
 80018ea:	e63c      	b.n	8001566 <__aeabi_ddiv+0xe6>
 80018ec:	4643      	mov	r3, r8
 80018ee:	07de      	lsls	r6, r3, #31
 80018f0:	0858      	lsrs	r0, r3, #1
 80018f2:	086b      	lsrs	r3, r5, #1
 80018f4:	431e      	orrs	r6, r3
 80018f6:	07ed      	lsls	r5, r5, #31
 80018f8:	e63c      	b.n	8001574 <__aeabi_ddiv+0xf4>
 80018fa:	f001 f977 	bl	8002bec <__clzsi2>
 80018fe:	0001      	movs	r1, r0
 8001900:	0002      	movs	r2, r0
 8001902:	3115      	adds	r1, #21
 8001904:	3220      	adds	r2, #32
 8001906:	291c      	cmp	r1, #28
 8001908:	dc00      	bgt.n	800190c <__aeabi_ddiv+0x48c>
 800190a:	e72c      	b.n	8001766 <__aeabi_ddiv+0x2e6>
 800190c:	464b      	mov	r3, r9
 800190e:	3808      	subs	r0, #8
 8001910:	4083      	lsls	r3, r0
 8001912:	2500      	movs	r5, #0
 8001914:	4698      	mov	r8, r3
 8001916:	e732      	b.n	800177e <__aeabi_ddiv+0x2fe>
 8001918:	f001 f968 	bl	8002bec <__clzsi2>
 800191c:	0003      	movs	r3, r0
 800191e:	001a      	movs	r2, r3
 8001920:	3215      	adds	r2, #21
 8001922:	3020      	adds	r0, #32
 8001924:	2a1c      	cmp	r2, #28
 8001926:	dc00      	bgt.n	800192a <__aeabi_ddiv+0x4aa>
 8001928:	e6ff      	b.n	800172a <__aeabi_ddiv+0x2aa>
 800192a:	4654      	mov	r4, sl
 800192c:	3b08      	subs	r3, #8
 800192e:	2100      	movs	r1, #0
 8001930:	409c      	lsls	r4, r3
 8001932:	e705      	b.n	8001740 <__aeabi_ddiv+0x2c0>
 8001934:	1936      	adds	r6, r6, r4
 8001936:	3b01      	subs	r3, #1
 8001938:	42b4      	cmp	r4, r6
 800193a:	d900      	bls.n	800193e <__aeabi_ddiv+0x4be>
 800193c:	e6a6      	b.n	800168c <__aeabi_ddiv+0x20c>
 800193e:	42b2      	cmp	r2, r6
 8001940:	d800      	bhi.n	8001944 <__aeabi_ddiv+0x4c4>
 8001942:	e6a3      	b.n	800168c <__aeabi_ddiv+0x20c>
 8001944:	1e83      	subs	r3, r0, #2
 8001946:	1936      	adds	r6, r6, r4
 8001948:	e6a0      	b.n	800168c <__aeabi_ddiv+0x20c>
 800194a:	1909      	adds	r1, r1, r4
 800194c:	3d01      	subs	r5, #1
 800194e:	428c      	cmp	r4, r1
 8001950:	d900      	bls.n	8001954 <__aeabi_ddiv+0x4d4>
 8001952:	e68d      	b.n	8001670 <__aeabi_ddiv+0x1f0>
 8001954:	428a      	cmp	r2, r1
 8001956:	d800      	bhi.n	800195a <__aeabi_ddiv+0x4da>
 8001958:	e68a      	b.n	8001670 <__aeabi_ddiv+0x1f0>
 800195a:	1e85      	subs	r5, r0, #2
 800195c:	1909      	adds	r1, r1, r4
 800195e:	e687      	b.n	8001670 <__aeabi_ddiv+0x1f0>
 8001960:	220f      	movs	r2, #15
 8001962:	402a      	ands	r2, r5
 8001964:	2a04      	cmp	r2, #4
 8001966:	d100      	bne.n	800196a <__aeabi_ddiv+0x4ea>
 8001968:	e6bc      	b.n	80016e4 <__aeabi_ddiv+0x264>
 800196a:	1d29      	adds	r1, r5, #4
 800196c:	42a9      	cmp	r1, r5
 800196e:	41ad      	sbcs	r5, r5
 8001970:	426d      	negs	r5, r5
 8001972:	08c9      	lsrs	r1, r1, #3
 8001974:	44a8      	add	r8, r5
 8001976:	e6b6      	b.n	80016e6 <__aeabi_ddiv+0x266>
 8001978:	42af      	cmp	r7, r5
 800197a:	d900      	bls.n	800197e <__aeabi_ddiv+0x4fe>
 800197c:	e662      	b.n	8001644 <__aeabi_ddiv+0x1c4>
 800197e:	4281      	cmp	r1, r0
 8001980:	d804      	bhi.n	800198c <__aeabi_ddiv+0x50c>
 8001982:	d000      	beq.n	8001986 <__aeabi_ddiv+0x506>
 8001984:	e65e      	b.n	8001644 <__aeabi_ddiv+0x1c4>
 8001986:	42ae      	cmp	r6, r5
 8001988:	d800      	bhi.n	800198c <__aeabi_ddiv+0x50c>
 800198a:	e65b      	b.n	8001644 <__aeabi_ddiv+0x1c4>
 800198c:	2302      	movs	r3, #2
 800198e:	425b      	negs	r3, r3
 8001990:	469c      	mov	ip, r3
 8001992:	9b00      	ldr	r3, [sp, #0]
 8001994:	44e0      	add	r8, ip
 8001996:	469c      	mov	ip, r3
 8001998:	4465      	add	r5, ip
 800199a:	429d      	cmp	r5, r3
 800199c:	419b      	sbcs	r3, r3
 800199e:	425b      	negs	r3, r3
 80019a0:	191b      	adds	r3, r3, r4
 80019a2:	18c0      	adds	r0, r0, r3
 80019a4:	e64f      	b.n	8001646 <__aeabi_ddiv+0x1c6>
 80019a6:	42b2      	cmp	r2, r6
 80019a8:	d800      	bhi.n	80019ac <__aeabi_ddiv+0x52c>
 80019aa:	e612      	b.n	80015d2 <__aeabi_ddiv+0x152>
 80019ac:	1e83      	subs	r3, r0, #2
 80019ae:	1936      	adds	r6, r6, r4
 80019b0:	e60f      	b.n	80015d2 <__aeabi_ddiv+0x152>
 80019b2:	428a      	cmp	r2, r1
 80019b4:	d800      	bhi.n	80019b8 <__aeabi_ddiv+0x538>
 80019b6:	e5fa      	b.n	80015ae <__aeabi_ddiv+0x12e>
 80019b8:	1e83      	subs	r3, r0, #2
 80019ba:	4698      	mov	r8, r3
 80019bc:	1909      	adds	r1, r1, r4
 80019be:	e5f6      	b.n	80015ae <__aeabi_ddiv+0x12e>
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <__aeabi_ddiv+0x5d4>)
 80019c2:	0028      	movs	r0, r5
 80019c4:	445b      	add	r3, fp
 80019c6:	4641      	mov	r1, r8
 80019c8:	409d      	lsls	r5, r3
 80019ca:	4099      	lsls	r1, r3
 80019cc:	40d0      	lsrs	r0, r2
 80019ce:	1e6b      	subs	r3, r5, #1
 80019d0:	419d      	sbcs	r5, r3
 80019d2:	4643      	mov	r3, r8
 80019d4:	4301      	orrs	r1, r0
 80019d6:	4329      	orrs	r1, r5
 80019d8:	40d3      	lsrs	r3, r2
 80019da:	074a      	lsls	r2, r1, #29
 80019dc:	d100      	bne.n	80019e0 <__aeabi_ddiv+0x560>
 80019de:	e755      	b.n	800188c <__aeabi_ddiv+0x40c>
 80019e0:	220f      	movs	r2, #15
 80019e2:	400a      	ands	r2, r1
 80019e4:	2a04      	cmp	r2, #4
 80019e6:	d000      	beq.n	80019ea <__aeabi_ddiv+0x56a>
 80019e8:	e74a      	b.n	8001880 <__aeabi_ddiv+0x400>
 80019ea:	e74f      	b.n	800188c <__aeabi_ddiv+0x40c>
 80019ec:	0015      	movs	r5, r2
 80019ee:	4286      	cmp	r6, r0
 80019f0:	d000      	beq.n	80019f4 <__aeabi_ddiv+0x574>
 80019f2:	e66d      	b.n	80016d0 <__aeabi_ddiv+0x250>
 80019f4:	9a00      	ldr	r2, [sp, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d000      	beq.n	80019fc <__aeabi_ddiv+0x57c>
 80019fa:	e669      	b.n	80016d0 <__aeabi_ddiv+0x250>
 80019fc:	e66a      	b.n	80016d4 <__aeabi_ddiv+0x254>
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <__aeabi_ddiv+0x5d8>)
 8001a00:	445b      	add	r3, fp
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_ddiv+0x588>
 8001a06:	e713      	b.n	8001830 <__aeabi_ddiv+0x3b0>
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	44a8      	add	r8, r5
 8001a0e:	e66a      	b.n	80016e6 <__aeabi_ddiv+0x266>
 8001a10:	075d      	lsls	r5, r3, #29
 8001a12:	025b      	lsls	r3, r3, #9
 8001a14:	0b1a      	lsrs	r2, r3, #12
 8001a16:	08c9      	lsrs	r1, r1, #3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	430d      	orrs	r5, r1
 8001a1c:	e587      	b.n	800152e <__aeabi_ddiv+0xae>
 8001a1e:	9900      	ldr	r1, [sp, #0]
 8001a20:	3d02      	subs	r5, #2
 8001a22:	004a      	lsls	r2, r1, #1
 8001a24:	428a      	cmp	r2, r1
 8001a26:	41bf      	sbcs	r7, r7
 8001a28:	427f      	negs	r7, r7
 8001a2a:	193f      	adds	r7, r7, r4
 8001a2c:	19f6      	adds	r6, r6, r7
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	e7dd      	b.n	80019ee <__aeabi_ddiv+0x56e>
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	4643      	mov	r3, r8
 8001a36:	0312      	lsls	r2, r2, #12
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	0312      	lsls	r2, r2, #12
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 8001a3e:	0b12      	lsrs	r2, r2, #12
 8001a40:	e575      	b.n	800152e <__aeabi_ddiv+0xae>
 8001a42:	9900      	ldr	r1, [sp, #0]
 8001a44:	4299      	cmp	r1, r3
 8001a46:	d3ea      	bcc.n	8001a1e <__aeabi_ddiv+0x59e>
 8001a48:	0015      	movs	r5, r2
 8001a4a:	e7d3      	b.n	80019f4 <__aeabi_ddiv+0x574>
 8001a4c:	000007ff 	.word	0x000007ff
 8001a50:	0000043e 	.word	0x0000043e
 8001a54:	0000041e 	.word	0x0000041e
 8001a58:	000003ff 	.word	0x000003ff

08001a5c <__eqdf2>:
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	464e      	mov	r6, r9
 8001a60:	4645      	mov	r5, r8
 8001a62:	46de      	mov	lr, fp
 8001a64:	4657      	mov	r7, sl
 8001a66:	4690      	mov	r8, r2
 8001a68:	b5e0      	push	{r5, r6, r7, lr}
 8001a6a:	0017      	movs	r7, r2
 8001a6c:	031a      	lsls	r2, r3, #12
 8001a6e:	0b12      	lsrs	r2, r2, #12
 8001a70:	0005      	movs	r5, r0
 8001a72:	4684      	mov	ip, r0
 8001a74:	4819      	ldr	r0, [pc, #100]	; (8001adc <__eqdf2+0x80>)
 8001a76:	030e      	lsls	r6, r1, #12
 8001a78:	004c      	lsls	r4, r1, #1
 8001a7a:	4691      	mov	r9, r2
 8001a7c:	005a      	lsls	r2, r3, #1
 8001a7e:	0fdb      	lsrs	r3, r3, #31
 8001a80:	469b      	mov	fp, r3
 8001a82:	0b36      	lsrs	r6, r6, #12
 8001a84:	0d64      	lsrs	r4, r4, #21
 8001a86:	0fc9      	lsrs	r1, r1, #31
 8001a88:	0d52      	lsrs	r2, r2, #21
 8001a8a:	4284      	cmp	r4, r0
 8001a8c:	d019      	beq.n	8001ac2 <__eqdf2+0x66>
 8001a8e:	4282      	cmp	r2, r0
 8001a90:	d010      	beq.n	8001ab4 <__eqdf2+0x58>
 8001a92:	2001      	movs	r0, #1
 8001a94:	4294      	cmp	r4, r2
 8001a96:	d10e      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001a98:	454e      	cmp	r6, r9
 8001a9a:	d10c      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	45c4      	cmp	ip, r8
 8001aa0:	d109      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001aa2:	4559      	cmp	r1, fp
 8001aa4:	d017      	beq.n	8001ad6 <__eqdf2+0x7a>
 8001aa6:	2c00      	cmp	r4, #0
 8001aa8:	d105      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001aaa:	0030      	movs	r0, r6
 8001aac:	4328      	orrs	r0, r5
 8001aae:	1e43      	subs	r3, r0, #1
 8001ab0:	4198      	sbcs	r0, r3
 8001ab2:	e000      	b.n	8001ab6 <__eqdf2+0x5a>
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ab8:	46bb      	mov	fp, r7
 8001aba:	46b2      	mov	sl, r6
 8001abc:	46a9      	mov	r9, r5
 8001abe:	46a0      	mov	r8, r4
 8001ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac2:	0033      	movs	r3, r6
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	432b      	orrs	r3, r5
 8001ac8:	d1f5      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001aca:	42a2      	cmp	r2, r4
 8001acc:	d1f3      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001ace:	464b      	mov	r3, r9
 8001ad0:	433b      	orrs	r3, r7
 8001ad2:	d1f0      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001ad4:	e7e2      	b.n	8001a9c <__eqdf2+0x40>
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	e7ed      	b.n	8001ab6 <__eqdf2+0x5a>
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	000007ff 	.word	0x000007ff

08001ae0 <__gedf2>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4647      	mov	r7, r8
 8001ae4:	46ce      	mov	lr, r9
 8001ae6:	0004      	movs	r4, r0
 8001ae8:	0018      	movs	r0, r3
 8001aea:	0016      	movs	r6, r2
 8001aec:	031b      	lsls	r3, r3, #12
 8001aee:	0b1b      	lsrs	r3, r3, #12
 8001af0:	4d2d      	ldr	r5, [pc, #180]	; (8001ba8 <__gedf2+0xc8>)
 8001af2:	004a      	lsls	r2, r1, #1
 8001af4:	4699      	mov	r9, r3
 8001af6:	b580      	push	{r7, lr}
 8001af8:	0043      	lsls	r3, r0, #1
 8001afa:	030f      	lsls	r7, r1, #12
 8001afc:	46a4      	mov	ip, r4
 8001afe:	46b0      	mov	r8, r6
 8001b00:	0b3f      	lsrs	r7, r7, #12
 8001b02:	0d52      	lsrs	r2, r2, #21
 8001b04:	0fc9      	lsrs	r1, r1, #31
 8001b06:	0d5b      	lsrs	r3, r3, #21
 8001b08:	0fc0      	lsrs	r0, r0, #31
 8001b0a:	42aa      	cmp	r2, r5
 8001b0c:	d021      	beq.n	8001b52 <__gedf2+0x72>
 8001b0e:	42ab      	cmp	r3, r5
 8001b10:	d013      	beq.n	8001b3a <__gedf2+0x5a>
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	d122      	bne.n	8001b5c <__gedf2+0x7c>
 8001b16:	433c      	orrs	r4, r7
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <__gedf2+0x42>
 8001b1c:	464d      	mov	r5, r9
 8001b1e:	432e      	orrs	r6, r5
 8001b20:	d022      	beq.n	8001b68 <__gedf2+0x88>
 8001b22:	2c00      	cmp	r4, #0
 8001b24:	d010      	beq.n	8001b48 <__gedf2+0x68>
 8001b26:	4281      	cmp	r1, r0
 8001b28:	d022      	beq.n	8001b70 <__gedf2+0x90>
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	3901      	subs	r1, #1
 8001b2e:	4008      	ands	r0, r1
 8001b30:	3801      	subs	r0, #1
 8001b32:	bcc0      	pop	{r6, r7}
 8001b34:	46b9      	mov	r9, r7
 8001b36:	46b0      	mov	r8, r6
 8001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3a:	464d      	mov	r5, r9
 8001b3c:	432e      	orrs	r6, r5
 8001b3e:	d129      	bne.n	8001b94 <__gedf2+0xb4>
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	d1f0      	bne.n	8001b26 <__gedf2+0x46>
 8001b44:	433c      	orrs	r4, r7
 8001b46:	d1ee      	bne.n	8001b26 <__gedf2+0x46>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d1f2      	bne.n	8001b32 <__gedf2+0x52>
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	4240      	negs	r0, r0
 8001b50:	e7ef      	b.n	8001b32 <__gedf2+0x52>
 8001b52:	003d      	movs	r5, r7
 8001b54:	4325      	orrs	r5, r4
 8001b56:	d11d      	bne.n	8001b94 <__gedf2+0xb4>
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d0ee      	beq.n	8001b3a <__gedf2+0x5a>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e2      	bne.n	8001b26 <__gedf2+0x46>
 8001b60:	464c      	mov	r4, r9
 8001b62:	4326      	orrs	r6, r4
 8001b64:	d1df      	bne.n	8001b26 <__gedf2+0x46>
 8001b66:	e7e0      	b.n	8001b2a <__gedf2+0x4a>
 8001b68:	2000      	movs	r0, #0
 8001b6a:	2c00      	cmp	r4, #0
 8001b6c:	d0e1      	beq.n	8001b32 <__gedf2+0x52>
 8001b6e:	e7dc      	b.n	8001b2a <__gedf2+0x4a>
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dc0a      	bgt.n	8001b8a <__gedf2+0xaa>
 8001b74:	dbe8      	blt.n	8001b48 <__gedf2+0x68>
 8001b76:	454f      	cmp	r7, r9
 8001b78:	d8d7      	bhi.n	8001b2a <__gedf2+0x4a>
 8001b7a:	d00e      	beq.n	8001b9a <__gedf2+0xba>
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	454f      	cmp	r7, r9
 8001b80:	d2d7      	bcs.n	8001b32 <__gedf2+0x52>
 8001b82:	2900      	cmp	r1, #0
 8001b84:	d0e2      	beq.n	8001b4c <__gedf2+0x6c>
 8001b86:	0008      	movs	r0, r1
 8001b88:	e7d3      	b.n	8001b32 <__gedf2+0x52>
 8001b8a:	4243      	negs	r3, r0
 8001b8c:	4158      	adcs	r0, r3
 8001b8e:	0040      	lsls	r0, r0, #1
 8001b90:	3801      	subs	r0, #1
 8001b92:	e7ce      	b.n	8001b32 <__gedf2+0x52>
 8001b94:	2002      	movs	r0, #2
 8001b96:	4240      	negs	r0, r0
 8001b98:	e7cb      	b.n	8001b32 <__gedf2+0x52>
 8001b9a:	45c4      	cmp	ip, r8
 8001b9c:	d8c5      	bhi.n	8001b2a <__gedf2+0x4a>
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	45c4      	cmp	ip, r8
 8001ba2:	d2c6      	bcs.n	8001b32 <__gedf2+0x52>
 8001ba4:	e7ed      	b.n	8001b82 <__gedf2+0xa2>
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	000007ff 	.word	0x000007ff

08001bac <__ledf2>:
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bae:	4647      	mov	r7, r8
 8001bb0:	46ce      	mov	lr, r9
 8001bb2:	0004      	movs	r4, r0
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	0016      	movs	r6, r2
 8001bb8:	031b      	lsls	r3, r3, #12
 8001bba:	0b1b      	lsrs	r3, r3, #12
 8001bbc:	4d2c      	ldr	r5, [pc, #176]	; (8001c70 <__ledf2+0xc4>)
 8001bbe:	004a      	lsls	r2, r1, #1
 8001bc0:	4699      	mov	r9, r3
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	0043      	lsls	r3, r0, #1
 8001bc6:	030f      	lsls	r7, r1, #12
 8001bc8:	46a4      	mov	ip, r4
 8001bca:	46b0      	mov	r8, r6
 8001bcc:	0b3f      	lsrs	r7, r7, #12
 8001bce:	0d52      	lsrs	r2, r2, #21
 8001bd0:	0fc9      	lsrs	r1, r1, #31
 8001bd2:	0d5b      	lsrs	r3, r3, #21
 8001bd4:	0fc0      	lsrs	r0, r0, #31
 8001bd6:	42aa      	cmp	r2, r5
 8001bd8:	d00d      	beq.n	8001bf6 <__ledf2+0x4a>
 8001bda:	42ab      	cmp	r3, r5
 8001bdc:	d010      	beq.n	8001c00 <__ledf2+0x54>
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	d127      	bne.n	8001c32 <__ledf2+0x86>
 8001be2:	433c      	orrs	r4, r7
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d111      	bne.n	8001c0c <__ledf2+0x60>
 8001be8:	464d      	mov	r5, r9
 8001bea:	432e      	orrs	r6, r5
 8001bec:	d10e      	bne.n	8001c0c <__ledf2+0x60>
 8001bee:	2000      	movs	r0, #0
 8001bf0:	2c00      	cmp	r4, #0
 8001bf2:	d015      	beq.n	8001c20 <__ledf2+0x74>
 8001bf4:	e00e      	b.n	8001c14 <__ledf2+0x68>
 8001bf6:	003d      	movs	r5, r7
 8001bf8:	4325      	orrs	r5, r4
 8001bfa:	d110      	bne.n	8001c1e <__ledf2+0x72>
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d118      	bne.n	8001c32 <__ledf2+0x86>
 8001c00:	464d      	mov	r5, r9
 8001c02:	432e      	orrs	r6, r5
 8001c04:	d10b      	bne.n	8001c1e <__ledf2+0x72>
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d102      	bne.n	8001c10 <__ledf2+0x64>
 8001c0a:	433c      	orrs	r4, r7
 8001c0c:	2c00      	cmp	r4, #0
 8001c0e:	d00b      	beq.n	8001c28 <__ledf2+0x7c>
 8001c10:	4281      	cmp	r1, r0
 8001c12:	d014      	beq.n	8001c3e <__ledf2+0x92>
 8001c14:	2002      	movs	r0, #2
 8001c16:	3901      	subs	r1, #1
 8001c18:	4008      	ands	r0, r1
 8001c1a:	3801      	subs	r0, #1
 8001c1c:	e000      	b.n	8001c20 <__ledf2+0x74>
 8001c1e:	2002      	movs	r0, #2
 8001c20:	bcc0      	pop	{r6, r7}
 8001c22:	46b9      	mov	r9, r7
 8001c24:	46b0      	mov	r8, r6
 8001c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d1f9      	bne.n	8001c20 <__ledf2+0x74>
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	4240      	negs	r0, r0
 8001c30:	e7f6      	b.n	8001c20 <__ledf2+0x74>
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ec      	bne.n	8001c10 <__ledf2+0x64>
 8001c36:	464c      	mov	r4, r9
 8001c38:	4326      	orrs	r6, r4
 8001c3a:	d1e9      	bne.n	8001c10 <__ledf2+0x64>
 8001c3c:	e7ea      	b.n	8001c14 <__ledf2+0x68>
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dd04      	ble.n	8001c4c <__ledf2+0xa0>
 8001c42:	4243      	negs	r3, r0
 8001c44:	4158      	adcs	r0, r3
 8001c46:	0040      	lsls	r0, r0, #1
 8001c48:	3801      	subs	r0, #1
 8001c4a:	e7e9      	b.n	8001c20 <__ledf2+0x74>
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbeb      	blt.n	8001c28 <__ledf2+0x7c>
 8001c50:	454f      	cmp	r7, r9
 8001c52:	d8df      	bhi.n	8001c14 <__ledf2+0x68>
 8001c54:	d006      	beq.n	8001c64 <__ledf2+0xb8>
 8001c56:	2000      	movs	r0, #0
 8001c58:	454f      	cmp	r7, r9
 8001c5a:	d2e1      	bcs.n	8001c20 <__ledf2+0x74>
 8001c5c:	2900      	cmp	r1, #0
 8001c5e:	d0e5      	beq.n	8001c2c <__ledf2+0x80>
 8001c60:	0008      	movs	r0, r1
 8001c62:	e7dd      	b.n	8001c20 <__ledf2+0x74>
 8001c64:	45c4      	cmp	ip, r8
 8001c66:	d8d5      	bhi.n	8001c14 <__ledf2+0x68>
 8001c68:	2000      	movs	r0, #0
 8001c6a:	45c4      	cmp	ip, r8
 8001c6c:	d2d8      	bcs.n	8001c20 <__ledf2+0x74>
 8001c6e:	e7f5      	b.n	8001c5c <__ledf2+0xb0>
 8001c70:	000007ff 	.word	0x000007ff

08001c74 <__aeabi_dmul>:
 8001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c76:	4645      	mov	r5, r8
 8001c78:	46de      	mov	lr, fp
 8001c7a:	4657      	mov	r7, sl
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	b5e0      	push	{r5, r6, r7, lr}
 8001c80:	001f      	movs	r7, r3
 8001c82:	030b      	lsls	r3, r1, #12
 8001c84:	0b1b      	lsrs	r3, r3, #12
 8001c86:	469b      	mov	fp, r3
 8001c88:	004d      	lsls	r5, r1, #1
 8001c8a:	0fcb      	lsrs	r3, r1, #31
 8001c8c:	0004      	movs	r4, r0
 8001c8e:	4691      	mov	r9, r2
 8001c90:	4698      	mov	r8, r3
 8001c92:	b087      	sub	sp, #28
 8001c94:	0d6d      	lsrs	r5, r5, #21
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dmul+0x26>
 8001c98:	e1cd      	b.n	8002036 <__aeabi_dmul+0x3c2>
 8001c9a:	4bce      	ldr	r3, [pc, #824]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001c9c:	429d      	cmp	r5, r3
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dmul+0x2e>
 8001ca0:	e1e9      	b.n	8002076 <__aeabi_dmul+0x402>
 8001ca2:	465a      	mov	r2, fp
 8001ca4:	0f43      	lsrs	r3, r0, #29
 8001ca6:	00d2      	lsls	r2, r2, #3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	0412      	lsls	r2, r2, #16
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	00c3      	lsls	r3, r0, #3
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4bc8      	ldr	r3, [pc, #800]	; (8001fd8 <__aeabi_dmul+0x364>)
 8001cb6:	4693      	mov	fp, r2
 8001cb8:	469c      	mov	ip, r3
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2600      	movs	r6, #0
 8001cbe:	4465      	add	r5, ip
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	033c      	lsls	r4, r7, #12
 8001cc4:	007b      	lsls	r3, r7, #1
 8001cc6:	4648      	mov	r0, r9
 8001cc8:	0b24      	lsrs	r4, r4, #12
 8001cca:	0d5b      	lsrs	r3, r3, #21
 8001ccc:	0fff      	lsrs	r7, r7, #31
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dmul+0x60>
 8001cd2:	e189      	b.n	8001fe8 <__aeabi_dmul+0x374>
 8001cd4:	4abf      	ldr	r2, [pc, #764]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d019      	beq.n	8001d0e <__aeabi_dmul+0x9a>
 8001cda:	0f42      	lsrs	r2, r0, #29
 8001cdc:	00e4      	lsls	r4, r4, #3
 8001cde:	4322      	orrs	r2, r4
 8001ce0:	2480      	movs	r4, #128	; 0x80
 8001ce2:	0424      	lsls	r4, r4, #16
 8001ce4:	4314      	orrs	r4, r2
 8001ce6:	4abc      	ldr	r2, [pc, #752]	; (8001fd8 <__aeabi_dmul+0x364>)
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4694      	mov	ip, r2
 8001cec:	4642      	mov	r2, r8
 8001cee:	4463      	add	r3, ip
 8001cf0:	195b      	adds	r3, r3, r5
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	9b01      	ldr	r3, [sp, #4]
 8001cf6:	407a      	eors	r2, r7
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	00c0      	lsls	r0, r0, #3
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	2e0a      	cmp	r6, #10
 8001d02:	dd1c      	ble.n	8001d3e <__aeabi_dmul+0xca>
 8001d04:	003a      	movs	r2, r7
 8001d06:	2e0b      	cmp	r6, #11
 8001d08:	d05e      	beq.n	8001dc8 <__aeabi_dmul+0x154>
 8001d0a:	4647      	mov	r7, r8
 8001d0c:	e056      	b.n	8001dbc <__aeabi_dmul+0x148>
 8001d0e:	4649      	mov	r1, r9
 8001d10:	4bb0      	ldr	r3, [pc, #704]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001d12:	4321      	orrs	r1, r4
 8001d14:	18eb      	adds	r3, r5, r3
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2900      	cmp	r1, #0
 8001d1a:	d12a      	bne.n	8001d72 <__aeabi_dmul+0xfe>
 8001d1c:	2080      	movs	r0, #128	; 0x80
 8001d1e:	2202      	movs	r2, #2
 8001d20:	0100      	lsls	r0, r0, #4
 8001d22:	002b      	movs	r3, r5
 8001d24:	4684      	mov	ip, r0
 8001d26:	4316      	orrs	r6, r2
 8001d28:	4642      	mov	r2, r8
 8001d2a:	4463      	add	r3, ip
 8001d2c:	407a      	eors	r2, r7
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	9302      	str	r3, [sp, #8]
 8001d32:	2e0a      	cmp	r6, #10
 8001d34:	dd00      	ble.n	8001d38 <__aeabi_dmul+0xc4>
 8001d36:	e231      	b.n	800219c <__aeabi_dmul+0x528>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	2400      	movs	r4, #0
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	2e02      	cmp	r6, #2
 8001d40:	dc26      	bgt.n	8001d90 <__aeabi_dmul+0x11c>
 8001d42:	3e01      	subs	r6, #1
 8001d44:	2e01      	cmp	r6, #1
 8001d46:	d852      	bhi.n	8001dee <__aeabi_dmul+0x17a>
 8001d48:	2902      	cmp	r1, #2
 8001d4a:	d04c      	beq.n	8001de6 <__aeabi_dmul+0x172>
 8001d4c:	2901      	cmp	r1, #1
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dmul+0xde>
 8001d50:	e118      	b.n	8001f84 <__aeabi_dmul+0x310>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2400      	movs	r4, #0
 8001d56:	2500      	movs	r5, #0
 8001d58:	051b      	lsls	r3, r3, #20
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	07d2      	lsls	r2, r2, #31
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	0028      	movs	r0, r5
 8001d62:	0019      	movs	r1, r3
 8001d64:	b007      	add	sp, #28
 8001d66:	bcf0      	pop	{r4, r5, r6, r7}
 8001d68:	46bb      	mov	fp, r7
 8001d6a:	46b2      	mov	sl, r6
 8001d6c:	46a9      	mov	r9, r5
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	2203      	movs	r2, #3
 8001d76:	0109      	lsls	r1, r1, #4
 8001d78:	002b      	movs	r3, r5
 8001d7a:	468c      	mov	ip, r1
 8001d7c:	4316      	orrs	r6, r2
 8001d7e:	4642      	mov	r2, r8
 8001d80:	4463      	add	r3, ip
 8001d82:	407a      	eors	r2, r7
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	2e0a      	cmp	r6, #10
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_dmul+0x11a>
 8001d8c:	e228      	b.n	80021e0 <__aeabi_dmul+0x56c>
 8001d8e:	2103      	movs	r1, #3
 8001d90:	2501      	movs	r5, #1
 8001d92:	40b5      	lsls	r5, r6
 8001d94:	46ac      	mov	ip, r5
 8001d96:	26a6      	movs	r6, #166	; 0xa6
 8001d98:	4663      	mov	r3, ip
 8001d9a:	00f6      	lsls	r6, r6, #3
 8001d9c:	4035      	ands	r5, r6
 8001d9e:	4233      	tst	r3, r6
 8001da0:	d10b      	bne.n	8001dba <__aeabi_dmul+0x146>
 8001da2:	2690      	movs	r6, #144	; 0x90
 8001da4:	00b6      	lsls	r6, r6, #2
 8001da6:	4233      	tst	r3, r6
 8001da8:	d118      	bne.n	8001ddc <__aeabi_dmul+0x168>
 8001daa:	3eb9      	subs	r6, #185	; 0xb9
 8001dac:	3eff      	subs	r6, #255	; 0xff
 8001dae:	421e      	tst	r6, r3
 8001db0:	d01d      	beq.n	8001dee <__aeabi_dmul+0x17a>
 8001db2:	46a3      	mov	fp, r4
 8001db4:	4682      	mov	sl, r0
 8001db6:	9100      	str	r1, [sp, #0]
 8001db8:	e000      	b.n	8001dbc <__aeabi_dmul+0x148>
 8001dba:	0017      	movs	r7, r2
 8001dbc:	9900      	ldr	r1, [sp, #0]
 8001dbe:	003a      	movs	r2, r7
 8001dc0:	2902      	cmp	r1, #2
 8001dc2:	d010      	beq.n	8001de6 <__aeabi_dmul+0x172>
 8001dc4:	465c      	mov	r4, fp
 8001dc6:	4650      	mov	r0, sl
 8001dc8:	2903      	cmp	r1, #3
 8001dca:	d1bf      	bne.n	8001d4c <__aeabi_dmul+0xd8>
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	031b      	lsls	r3, r3, #12
 8001dd0:	431c      	orrs	r4, r3
 8001dd2:	0324      	lsls	r4, r4, #12
 8001dd4:	0005      	movs	r5, r0
 8001dd6:	4b7f      	ldr	r3, [pc, #508]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001dd8:	0b24      	lsrs	r4, r4, #12
 8001dda:	e7bd      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001ddc:	2480      	movs	r4, #128	; 0x80
 8001dde:	2200      	movs	r2, #0
 8001de0:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001de2:	0324      	lsls	r4, r4, #12
 8001de4:	e7b8      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001de6:	2400      	movs	r4, #0
 8001de8:	2500      	movs	r5, #0
 8001dea:	4b7a      	ldr	r3, [pc, #488]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001dec:	e7b4      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001dee:	4653      	mov	r3, sl
 8001df0:	041e      	lsls	r6, r3, #16
 8001df2:	0c36      	lsrs	r6, r6, #16
 8001df4:	0c1f      	lsrs	r7, r3, #16
 8001df6:	0033      	movs	r3, r6
 8001df8:	0c01      	lsrs	r1, r0, #16
 8001dfa:	0400      	lsls	r0, r0, #16
 8001dfc:	0c00      	lsrs	r0, r0, #16
 8001dfe:	4343      	muls	r3, r0
 8001e00:	4698      	mov	r8, r3
 8001e02:	0003      	movs	r3, r0
 8001e04:	437b      	muls	r3, r7
 8001e06:	4699      	mov	r9, r3
 8001e08:	0033      	movs	r3, r6
 8001e0a:	434b      	muls	r3, r1
 8001e0c:	469c      	mov	ip, r3
 8001e0e:	4643      	mov	r3, r8
 8001e10:	000d      	movs	r5, r1
 8001e12:	0c1b      	lsrs	r3, r3, #16
 8001e14:	469a      	mov	sl, r3
 8001e16:	437d      	muls	r5, r7
 8001e18:	44cc      	add	ip, r9
 8001e1a:	44d4      	add	ip, sl
 8001e1c:	9500      	str	r5, [sp, #0]
 8001e1e:	45e1      	cmp	r9, ip
 8001e20:	d904      	bls.n	8001e2c <__aeabi_dmul+0x1b8>
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	025b      	lsls	r3, r3, #9
 8001e26:	4699      	mov	r9, r3
 8001e28:	444d      	add	r5, r9
 8001e2a:	9500      	str	r5, [sp, #0]
 8001e2c:	4663      	mov	r3, ip
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	001d      	movs	r5, r3
 8001e32:	4663      	mov	r3, ip
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	469c      	mov	ip, r3
 8001e38:	4643      	mov	r3, r8
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	4698      	mov	r8, r3
 8001e40:	4663      	mov	r3, ip
 8001e42:	4443      	add	r3, r8
 8001e44:	9303      	str	r3, [sp, #12]
 8001e46:	0c23      	lsrs	r3, r4, #16
 8001e48:	4698      	mov	r8, r3
 8001e4a:	0033      	movs	r3, r6
 8001e4c:	0424      	lsls	r4, r4, #16
 8001e4e:	0c24      	lsrs	r4, r4, #16
 8001e50:	4363      	muls	r3, r4
 8001e52:	469c      	mov	ip, r3
 8001e54:	0023      	movs	r3, r4
 8001e56:	437b      	muls	r3, r7
 8001e58:	4699      	mov	r9, r3
 8001e5a:	4643      	mov	r3, r8
 8001e5c:	435e      	muls	r6, r3
 8001e5e:	435f      	muls	r7, r3
 8001e60:	444e      	add	r6, r9
 8001e62:	4663      	mov	r3, ip
 8001e64:	46b2      	mov	sl, r6
 8001e66:	0c1e      	lsrs	r6, r3, #16
 8001e68:	4456      	add	r6, sl
 8001e6a:	45b1      	cmp	r9, r6
 8001e6c:	d903      	bls.n	8001e76 <__aeabi_dmul+0x202>
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	4699      	mov	r9, r3
 8001e74:	444f      	add	r7, r9
 8001e76:	0c33      	lsrs	r3, r6, #16
 8001e78:	4699      	mov	r9, r3
 8001e7a:	003b      	movs	r3, r7
 8001e7c:	444b      	add	r3, r9
 8001e7e:	9305      	str	r3, [sp, #20]
 8001e80:	4663      	mov	r3, ip
 8001e82:	46ac      	mov	ip, r5
 8001e84:	041f      	lsls	r7, r3, #16
 8001e86:	0c3f      	lsrs	r7, r7, #16
 8001e88:	0436      	lsls	r6, r6, #16
 8001e8a:	19f6      	adds	r6, r6, r7
 8001e8c:	44b4      	add	ip, r6
 8001e8e:	4663      	mov	r3, ip
 8001e90:	9304      	str	r3, [sp, #16]
 8001e92:	465b      	mov	r3, fp
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	469c      	mov	ip, r3
 8001e98:	465b      	mov	r3, fp
 8001e9a:	041f      	lsls	r7, r3, #16
 8001e9c:	0c3f      	lsrs	r7, r7, #16
 8001e9e:	003b      	movs	r3, r7
 8001ea0:	4343      	muls	r3, r0
 8001ea2:	4699      	mov	r9, r3
 8001ea4:	4663      	mov	r3, ip
 8001ea6:	4343      	muls	r3, r0
 8001ea8:	469a      	mov	sl, r3
 8001eaa:	464b      	mov	r3, r9
 8001eac:	4660      	mov	r0, ip
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	469b      	mov	fp, r3
 8001eb2:	4348      	muls	r0, r1
 8001eb4:	4379      	muls	r1, r7
 8001eb6:	4451      	add	r1, sl
 8001eb8:	4459      	add	r1, fp
 8001eba:	458a      	cmp	sl, r1
 8001ebc:	d903      	bls.n	8001ec6 <__aeabi_dmul+0x252>
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	025b      	lsls	r3, r3, #9
 8001ec2:	469a      	mov	sl, r3
 8001ec4:	4450      	add	r0, sl
 8001ec6:	0c0b      	lsrs	r3, r1, #16
 8001ec8:	469a      	mov	sl, r3
 8001eca:	464b      	mov	r3, r9
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	0c1b      	lsrs	r3, r3, #16
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	003b      	movs	r3, r7
 8001ed4:	4363      	muls	r3, r4
 8001ed6:	0409      	lsls	r1, r1, #16
 8001ed8:	4645      	mov	r5, r8
 8001eda:	4449      	add	r1, r9
 8001edc:	4699      	mov	r9, r3
 8001ede:	4663      	mov	r3, ip
 8001ee0:	435c      	muls	r4, r3
 8001ee2:	436b      	muls	r3, r5
 8001ee4:	469c      	mov	ip, r3
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	4698      	mov	r8, r3
 8001eec:	436f      	muls	r7, r5
 8001eee:	193f      	adds	r7, r7, r4
 8001ef0:	4447      	add	r7, r8
 8001ef2:	4450      	add	r0, sl
 8001ef4:	42bc      	cmp	r4, r7
 8001ef6:	d903      	bls.n	8001f00 <__aeabi_dmul+0x28c>
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	025b      	lsls	r3, r3, #9
 8001efc:	4698      	mov	r8, r3
 8001efe:	44c4      	add	ip, r8
 8001f00:	9b04      	ldr	r3, [sp, #16]
 8001f02:	9d00      	ldr	r5, [sp, #0]
 8001f04:	4698      	mov	r8, r3
 8001f06:	4445      	add	r5, r8
 8001f08:	42b5      	cmp	r5, r6
 8001f0a:	41b6      	sbcs	r6, r6
 8001f0c:	4273      	negs	r3, r6
 8001f0e:	4698      	mov	r8, r3
 8001f10:	464b      	mov	r3, r9
 8001f12:	041e      	lsls	r6, r3, #16
 8001f14:	9b05      	ldr	r3, [sp, #20]
 8001f16:	043c      	lsls	r4, r7, #16
 8001f18:	4699      	mov	r9, r3
 8001f1a:	0c36      	lsrs	r6, r6, #16
 8001f1c:	19a4      	adds	r4, r4, r6
 8001f1e:	444c      	add	r4, r9
 8001f20:	46a1      	mov	r9, r4
 8001f22:	4683      	mov	fp, r0
 8001f24:	186e      	adds	r6, r5, r1
 8001f26:	44c1      	add	r9, r8
 8001f28:	428e      	cmp	r6, r1
 8001f2a:	4189      	sbcs	r1, r1
 8001f2c:	44cb      	add	fp, r9
 8001f2e:	465d      	mov	r5, fp
 8001f30:	4249      	negs	r1, r1
 8001f32:	186d      	adds	r5, r5, r1
 8001f34:	429c      	cmp	r4, r3
 8001f36:	41a4      	sbcs	r4, r4
 8001f38:	45c1      	cmp	r9, r8
 8001f3a:	419b      	sbcs	r3, r3
 8001f3c:	4583      	cmp	fp, r0
 8001f3e:	4180      	sbcs	r0, r0
 8001f40:	428d      	cmp	r5, r1
 8001f42:	4189      	sbcs	r1, r1
 8001f44:	425b      	negs	r3, r3
 8001f46:	4264      	negs	r4, r4
 8001f48:	431c      	orrs	r4, r3
 8001f4a:	4240      	negs	r0, r0
 8001f4c:	9b03      	ldr	r3, [sp, #12]
 8001f4e:	4249      	negs	r1, r1
 8001f50:	4301      	orrs	r1, r0
 8001f52:	0270      	lsls	r0, r6, #9
 8001f54:	0c3f      	lsrs	r7, r7, #16
 8001f56:	4318      	orrs	r0, r3
 8001f58:	19e4      	adds	r4, r4, r7
 8001f5a:	1e47      	subs	r7, r0, #1
 8001f5c:	41b8      	sbcs	r0, r7
 8001f5e:	1864      	adds	r4, r4, r1
 8001f60:	4464      	add	r4, ip
 8001f62:	0df6      	lsrs	r6, r6, #23
 8001f64:	0261      	lsls	r1, r4, #9
 8001f66:	4330      	orrs	r0, r6
 8001f68:	0dec      	lsrs	r4, r5, #23
 8001f6a:	026e      	lsls	r6, r5, #9
 8001f6c:	430c      	orrs	r4, r1
 8001f6e:	4330      	orrs	r0, r6
 8001f70:	01c9      	lsls	r1, r1, #7
 8001f72:	d400      	bmi.n	8001f76 <__aeabi_dmul+0x302>
 8001f74:	e0f1      	b.n	800215a <__aeabi_dmul+0x4e6>
 8001f76:	2101      	movs	r1, #1
 8001f78:	0843      	lsrs	r3, r0, #1
 8001f7a:	4001      	ands	r1, r0
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	07e0      	lsls	r0, r4, #31
 8001f80:	4318      	orrs	r0, r3
 8001f82:	0864      	lsrs	r4, r4, #1
 8001f84:	4915      	ldr	r1, [pc, #84]	; (8001fdc <__aeabi_dmul+0x368>)
 8001f86:	9b02      	ldr	r3, [sp, #8]
 8001f88:	468c      	mov	ip, r1
 8001f8a:	4463      	add	r3, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	dc00      	bgt.n	8001f92 <__aeabi_dmul+0x31e>
 8001f90:	e097      	b.n	80020c2 <__aeabi_dmul+0x44e>
 8001f92:	0741      	lsls	r1, r0, #29
 8001f94:	d009      	beq.n	8001faa <__aeabi_dmul+0x336>
 8001f96:	210f      	movs	r1, #15
 8001f98:	4001      	ands	r1, r0
 8001f9a:	2904      	cmp	r1, #4
 8001f9c:	d005      	beq.n	8001faa <__aeabi_dmul+0x336>
 8001f9e:	1d01      	adds	r1, r0, #4
 8001fa0:	4281      	cmp	r1, r0
 8001fa2:	4180      	sbcs	r0, r0
 8001fa4:	4240      	negs	r0, r0
 8001fa6:	1824      	adds	r4, r4, r0
 8001fa8:	0008      	movs	r0, r1
 8001faa:	01e1      	lsls	r1, r4, #7
 8001fac:	d506      	bpl.n	8001fbc <__aeabi_dmul+0x348>
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	00c9      	lsls	r1, r1, #3
 8001fb2:	468c      	mov	ip, r1
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <__aeabi_dmul+0x36c>)
 8001fb6:	401c      	ands	r4, r3
 8001fb8:	9b02      	ldr	r3, [sp, #8]
 8001fba:	4463      	add	r3, ip
 8001fbc:	4909      	ldr	r1, [pc, #36]	; (8001fe4 <__aeabi_dmul+0x370>)
 8001fbe:	428b      	cmp	r3, r1
 8001fc0:	dd00      	ble.n	8001fc4 <__aeabi_dmul+0x350>
 8001fc2:	e710      	b.n	8001de6 <__aeabi_dmul+0x172>
 8001fc4:	0761      	lsls	r1, r4, #29
 8001fc6:	08c5      	lsrs	r5, r0, #3
 8001fc8:	0264      	lsls	r4, r4, #9
 8001fca:	055b      	lsls	r3, r3, #21
 8001fcc:	430d      	orrs	r5, r1
 8001fce:	0b24      	lsrs	r4, r4, #12
 8001fd0:	0d5b      	lsrs	r3, r3, #21
 8001fd2:	e6c1      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001fd4:	000007ff 	.word	0x000007ff
 8001fd8:	fffffc01 	.word	0xfffffc01
 8001fdc:	000003ff 	.word	0x000003ff
 8001fe0:	feffffff 	.word	0xfeffffff
 8001fe4:	000007fe 	.word	0x000007fe
 8001fe8:	464b      	mov	r3, r9
 8001fea:	4323      	orrs	r3, r4
 8001fec:	d059      	beq.n	80020a2 <__aeabi_dmul+0x42e>
 8001fee:	2c00      	cmp	r4, #0
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dmul+0x380>
 8001ff2:	e0a3      	b.n	800213c <__aeabi_dmul+0x4c8>
 8001ff4:	0020      	movs	r0, r4
 8001ff6:	f000 fdf9 	bl	8002bec <__clzsi2>
 8001ffa:	0001      	movs	r1, r0
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	390b      	subs	r1, #11
 8002000:	221d      	movs	r2, #29
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	4649      	mov	r1, r9
 8002006:	0018      	movs	r0, r3
 8002008:	40d1      	lsrs	r1, r2
 800200a:	464a      	mov	r2, r9
 800200c:	3808      	subs	r0, #8
 800200e:	4082      	lsls	r2, r0
 8002010:	4084      	lsls	r4, r0
 8002012:	0010      	movs	r0, r2
 8002014:	430c      	orrs	r4, r1
 8002016:	4a74      	ldr	r2, [pc, #464]	; (80021e8 <__aeabi_dmul+0x574>)
 8002018:	1aeb      	subs	r3, r5, r3
 800201a:	4694      	mov	ip, r2
 800201c:	4642      	mov	r2, r8
 800201e:	4463      	add	r3, ip
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	9b01      	ldr	r3, [sp, #4]
 8002024:	407a      	eors	r2, r7
 8002026:	3301      	adds	r3, #1
 8002028:	2100      	movs	r1, #0
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	2e0a      	cmp	r6, #10
 8002030:	dd00      	ble.n	8002034 <__aeabi_dmul+0x3c0>
 8002032:	e667      	b.n	8001d04 <__aeabi_dmul+0x90>
 8002034:	e683      	b.n	8001d3e <__aeabi_dmul+0xca>
 8002036:	465b      	mov	r3, fp
 8002038:	4303      	orrs	r3, r0
 800203a:	469a      	mov	sl, r3
 800203c:	d02a      	beq.n	8002094 <__aeabi_dmul+0x420>
 800203e:	465b      	mov	r3, fp
 8002040:	2b00      	cmp	r3, #0
 8002042:	d06d      	beq.n	8002120 <__aeabi_dmul+0x4ac>
 8002044:	4658      	mov	r0, fp
 8002046:	f000 fdd1 	bl	8002bec <__clzsi2>
 800204a:	0001      	movs	r1, r0
 800204c:	0003      	movs	r3, r0
 800204e:	390b      	subs	r1, #11
 8002050:	221d      	movs	r2, #29
 8002052:	1a52      	subs	r2, r2, r1
 8002054:	0021      	movs	r1, r4
 8002056:	0018      	movs	r0, r3
 8002058:	465d      	mov	r5, fp
 800205a:	40d1      	lsrs	r1, r2
 800205c:	3808      	subs	r0, #8
 800205e:	4085      	lsls	r5, r0
 8002060:	000a      	movs	r2, r1
 8002062:	4084      	lsls	r4, r0
 8002064:	432a      	orrs	r2, r5
 8002066:	4693      	mov	fp, r2
 8002068:	46a2      	mov	sl, r4
 800206a:	4d5f      	ldr	r5, [pc, #380]	; (80021e8 <__aeabi_dmul+0x574>)
 800206c:	2600      	movs	r6, #0
 800206e:	1aed      	subs	r5, r5, r3
 8002070:	2300      	movs	r3, #0
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	e625      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 8002076:	465b      	mov	r3, fp
 8002078:	4303      	orrs	r3, r0
 800207a:	469a      	mov	sl, r3
 800207c:	d105      	bne.n	800208a <__aeabi_dmul+0x416>
 800207e:	2300      	movs	r3, #0
 8002080:	469b      	mov	fp, r3
 8002082:	3302      	adds	r3, #2
 8002084:	2608      	movs	r6, #8
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	e61b      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 800208a:	2303      	movs	r3, #3
 800208c:	4682      	mov	sl, r0
 800208e:	260c      	movs	r6, #12
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	e616      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 8002094:	2300      	movs	r3, #0
 8002096:	469b      	mov	fp, r3
 8002098:	3301      	adds	r3, #1
 800209a:	2604      	movs	r6, #4
 800209c:	2500      	movs	r5, #0
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	e60f      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 80020a2:	4642      	mov	r2, r8
 80020a4:	3301      	adds	r3, #1
 80020a6:	9501      	str	r5, [sp, #4]
 80020a8:	431e      	orrs	r6, r3
 80020aa:	9b01      	ldr	r3, [sp, #4]
 80020ac:	407a      	eors	r2, r7
 80020ae:	3301      	adds	r3, #1
 80020b0:	2400      	movs	r4, #0
 80020b2:	2000      	movs	r0, #0
 80020b4:	2101      	movs	r1, #1
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	2e0a      	cmp	r6, #10
 80020bc:	dd00      	ble.n	80020c0 <__aeabi_dmul+0x44c>
 80020be:	e621      	b.n	8001d04 <__aeabi_dmul+0x90>
 80020c0:	e63d      	b.n	8001d3e <__aeabi_dmul+0xca>
 80020c2:	2101      	movs	r1, #1
 80020c4:	1ac9      	subs	r1, r1, r3
 80020c6:	2938      	cmp	r1, #56	; 0x38
 80020c8:	dd00      	ble.n	80020cc <__aeabi_dmul+0x458>
 80020ca:	e642      	b.n	8001d52 <__aeabi_dmul+0xde>
 80020cc:	291f      	cmp	r1, #31
 80020ce:	dd47      	ble.n	8002160 <__aeabi_dmul+0x4ec>
 80020d0:	261f      	movs	r6, #31
 80020d2:	0025      	movs	r5, r4
 80020d4:	4276      	negs	r6, r6
 80020d6:	1af3      	subs	r3, r6, r3
 80020d8:	40dd      	lsrs	r5, r3
 80020da:	002b      	movs	r3, r5
 80020dc:	2920      	cmp	r1, #32
 80020de:	d005      	beq.n	80020ec <__aeabi_dmul+0x478>
 80020e0:	4942      	ldr	r1, [pc, #264]	; (80021ec <__aeabi_dmul+0x578>)
 80020e2:	9d02      	ldr	r5, [sp, #8]
 80020e4:	468c      	mov	ip, r1
 80020e6:	4465      	add	r5, ip
 80020e8:	40ac      	lsls	r4, r5
 80020ea:	4320      	orrs	r0, r4
 80020ec:	1e41      	subs	r1, r0, #1
 80020ee:	4188      	sbcs	r0, r1
 80020f0:	4318      	orrs	r0, r3
 80020f2:	2307      	movs	r3, #7
 80020f4:	001d      	movs	r5, r3
 80020f6:	2400      	movs	r4, #0
 80020f8:	4005      	ands	r5, r0
 80020fa:	4203      	tst	r3, r0
 80020fc:	d04a      	beq.n	8002194 <__aeabi_dmul+0x520>
 80020fe:	230f      	movs	r3, #15
 8002100:	2400      	movs	r4, #0
 8002102:	4003      	ands	r3, r0
 8002104:	2b04      	cmp	r3, #4
 8002106:	d042      	beq.n	800218e <__aeabi_dmul+0x51a>
 8002108:	1d03      	adds	r3, r0, #4
 800210a:	4283      	cmp	r3, r0
 800210c:	4180      	sbcs	r0, r0
 800210e:	4240      	negs	r0, r0
 8002110:	1824      	adds	r4, r4, r0
 8002112:	0018      	movs	r0, r3
 8002114:	0223      	lsls	r3, r4, #8
 8002116:	d53a      	bpl.n	800218e <__aeabi_dmul+0x51a>
 8002118:	2301      	movs	r3, #1
 800211a:	2400      	movs	r4, #0
 800211c:	2500      	movs	r5, #0
 800211e:	e61b      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8002120:	f000 fd64 	bl	8002bec <__clzsi2>
 8002124:	0001      	movs	r1, r0
 8002126:	0003      	movs	r3, r0
 8002128:	3115      	adds	r1, #21
 800212a:	3320      	adds	r3, #32
 800212c:	291c      	cmp	r1, #28
 800212e:	dd8f      	ble.n	8002050 <__aeabi_dmul+0x3dc>
 8002130:	3808      	subs	r0, #8
 8002132:	2200      	movs	r2, #0
 8002134:	4084      	lsls	r4, r0
 8002136:	4692      	mov	sl, r2
 8002138:	46a3      	mov	fp, r4
 800213a:	e796      	b.n	800206a <__aeabi_dmul+0x3f6>
 800213c:	f000 fd56 	bl	8002bec <__clzsi2>
 8002140:	0001      	movs	r1, r0
 8002142:	0003      	movs	r3, r0
 8002144:	3115      	adds	r1, #21
 8002146:	3320      	adds	r3, #32
 8002148:	291c      	cmp	r1, #28
 800214a:	dc00      	bgt.n	800214e <__aeabi_dmul+0x4da>
 800214c:	e758      	b.n	8002000 <__aeabi_dmul+0x38c>
 800214e:	0002      	movs	r2, r0
 8002150:	464c      	mov	r4, r9
 8002152:	3a08      	subs	r2, #8
 8002154:	2000      	movs	r0, #0
 8002156:	4094      	lsls	r4, r2
 8002158:	e75d      	b.n	8002016 <__aeabi_dmul+0x3a2>
 800215a:	9b01      	ldr	r3, [sp, #4]
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	e711      	b.n	8001f84 <__aeabi_dmul+0x310>
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <__aeabi_dmul+0x57c>)
 8002162:	0026      	movs	r6, r4
 8002164:	469c      	mov	ip, r3
 8002166:	0003      	movs	r3, r0
 8002168:	9d02      	ldr	r5, [sp, #8]
 800216a:	40cb      	lsrs	r3, r1
 800216c:	4465      	add	r5, ip
 800216e:	40ae      	lsls	r6, r5
 8002170:	431e      	orrs	r6, r3
 8002172:	0003      	movs	r3, r0
 8002174:	40ab      	lsls	r3, r5
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	4183      	sbcs	r3, r0
 800217a:	0030      	movs	r0, r6
 800217c:	4318      	orrs	r0, r3
 800217e:	40cc      	lsrs	r4, r1
 8002180:	0743      	lsls	r3, r0, #29
 8002182:	d0c7      	beq.n	8002114 <__aeabi_dmul+0x4a0>
 8002184:	230f      	movs	r3, #15
 8002186:	4003      	ands	r3, r0
 8002188:	2b04      	cmp	r3, #4
 800218a:	d1bd      	bne.n	8002108 <__aeabi_dmul+0x494>
 800218c:	e7c2      	b.n	8002114 <__aeabi_dmul+0x4a0>
 800218e:	0765      	lsls	r5, r4, #29
 8002190:	0264      	lsls	r4, r4, #9
 8002192:	0b24      	lsrs	r4, r4, #12
 8002194:	08c0      	lsrs	r0, r0, #3
 8002196:	2300      	movs	r3, #0
 8002198:	4305      	orrs	r5, r0
 800219a:	e5dd      	b.n	8001d58 <__aeabi_dmul+0xe4>
 800219c:	2500      	movs	r5, #0
 800219e:	2302      	movs	r3, #2
 80021a0:	2e0f      	cmp	r6, #15
 80021a2:	d10c      	bne.n	80021be <__aeabi_dmul+0x54a>
 80021a4:	2480      	movs	r4, #128	; 0x80
 80021a6:	465b      	mov	r3, fp
 80021a8:	0324      	lsls	r4, r4, #12
 80021aa:	4223      	tst	r3, r4
 80021ac:	d00e      	beq.n	80021cc <__aeabi_dmul+0x558>
 80021ae:	4221      	tst	r1, r4
 80021b0:	d10c      	bne.n	80021cc <__aeabi_dmul+0x558>
 80021b2:	430c      	orrs	r4, r1
 80021b4:	0324      	lsls	r4, r4, #12
 80021b6:	003a      	movs	r2, r7
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <__aeabi_dmul+0x580>)
 80021ba:	0b24      	lsrs	r4, r4, #12
 80021bc:	e5cc      	b.n	8001d58 <__aeabi_dmul+0xe4>
 80021be:	2e0b      	cmp	r6, #11
 80021c0:	d000      	beq.n	80021c4 <__aeabi_dmul+0x550>
 80021c2:	e5a2      	b.n	8001d0a <__aeabi_dmul+0x96>
 80021c4:	468b      	mov	fp, r1
 80021c6:	46aa      	mov	sl, r5
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	e5f7      	b.n	8001dbc <__aeabi_dmul+0x148>
 80021cc:	2480      	movs	r4, #128	; 0x80
 80021ce:	465b      	mov	r3, fp
 80021d0:	0324      	lsls	r4, r4, #12
 80021d2:	431c      	orrs	r4, r3
 80021d4:	0324      	lsls	r4, r4, #12
 80021d6:	4642      	mov	r2, r8
 80021d8:	4655      	mov	r5, sl
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <__aeabi_dmul+0x580>)
 80021dc:	0b24      	lsrs	r4, r4, #12
 80021de:	e5bb      	b.n	8001d58 <__aeabi_dmul+0xe4>
 80021e0:	464d      	mov	r5, r9
 80021e2:	0021      	movs	r1, r4
 80021e4:	2303      	movs	r3, #3
 80021e6:	e7db      	b.n	80021a0 <__aeabi_dmul+0x52c>
 80021e8:	fffffc0d 	.word	0xfffffc0d
 80021ec:	0000043e 	.word	0x0000043e
 80021f0:	0000041e 	.word	0x0000041e
 80021f4:	000007ff 	.word	0x000007ff

080021f8 <__aeabi_dsub>:
 80021f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fa:	4657      	mov	r7, sl
 80021fc:	464e      	mov	r6, r9
 80021fe:	4645      	mov	r5, r8
 8002200:	46de      	mov	lr, fp
 8002202:	b5e0      	push	{r5, r6, r7, lr}
 8002204:	000d      	movs	r5, r1
 8002206:	0004      	movs	r4, r0
 8002208:	0019      	movs	r1, r3
 800220a:	0010      	movs	r0, r2
 800220c:	032b      	lsls	r3, r5, #12
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	0f62      	lsrs	r2, r4, #29
 8002212:	431a      	orrs	r2, r3
 8002214:	00e3      	lsls	r3, r4, #3
 8002216:	030c      	lsls	r4, r1, #12
 8002218:	0a64      	lsrs	r4, r4, #9
 800221a:	0f47      	lsrs	r7, r0, #29
 800221c:	4327      	orrs	r7, r4
 800221e:	4cd0      	ldr	r4, [pc, #832]	; (8002560 <__aeabi_dsub+0x368>)
 8002220:	006e      	lsls	r6, r5, #1
 8002222:	4691      	mov	r9, r2
 8002224:	b083      	sub	sp, #12
 8002226:	004a      	lsls	r2, r1, #1
 8002228:	00c0      	lsls	r0, r0, #3
 800222a:	4698      	mov	r8, r3
 800222c:	46a2      	mov	sl, r4
 800222e:	0d76      	lsrs	r6, r6, #21
 8002230:	0fed      	lsrs	r5, r5, #31
 8002232:	0d52      	lsrs	r2, r2, #21
 8002234:	0fc9      	lsrs	r1, r1, #31
 8002236:	9001      	str	r0, [sp, #4]
 8002238:	42a2      	cmp	r2, r4
 800223a:	d100      	bne.n	800223e <__aeabi_dsub+0x46>
 800223c:	e0b9      	b.n	80023b2 <__aeabi_dsub+0x1ba>
 800223e:	2401      	movs	r4, #1
 8002240:	4061      	eors	r1, r4
 8002242:	468b      	mov	fp, r1
 8002244:	428d      	cmp	r5, r1
 8002246:	d100      	bne.n	800224a <__aeabi_dsub+0x52>
 8002248:	e08d      	b.n	8002366 <__aeabi_dsub+0x16e>
 800224a:	1ab4      	subs	r4, r6, r2
 800224c:	46a4      	mov	ip, r4
 800224e:	2c00      	cmp	r4, #0
 8002250:	dc00      	bgt.n	8002254 <__aeabi_dsub+0x5c>
 8002252:	e0b7      	b.n	80023c4 <__aeabi_dsub+0x1cc>
 8002254:	2a00      	cmp	r2, #0
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x62>
 8002258:	e0cb      	b.n	80023f2 <__aeabi_dsub+0x1fa>
 800225a:	4ac1      	ldr	r2, [pc, #772]	; (8002560 <__aeabi_dsub+0x368>)
 800225c:	4296      	cmp	r6, r2
 800225e:	d100      	bne.n	8002262 <__aeabi_dsub+0x6a>
 8002260:	e186      	b.n	8002570 <__aeabi_dsub+0x378>
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	0412      	lsls	r2, r2, #16
 8002266:	4317      	orrs	r7, r2
 8002268:	4662      	mov	r2, ip
 800226a:	2a38      	cmp	r2, #56	; 0x38
 800226c:	dd00      	ble.n	8002270 <__aeabi_dsub+0x78>
 800226e:	e1a4      	b.n	80025ba <__aeabi_dsub+0x3c2>
 8002270:	2a1f      	cmp	r2, #31
 8002272:	dd00      	ble.n	8002276 <__aeabi_dsub+0x7e>
 8002274:	e21d      	b.n	80026b2 <__aeabi_dsub+0x4ba>
 8002276:	4661      	mov	r1, ip
 8002278:	2220      	movs	r2, #32
 800227a:	003c      	movs	r4, r7
 800227c:	1a52      	subs	r2, r2, r1
 800227e:	0001      	movs	r1, r0
 8002280:	4090      	lsls	r0, r2
 8002282:	4094      	lsls	r4, r2
 8002284:	1e42      	subs	r2, r0, #1
 8002286:	4190      	sbcs	r0, r2
 8002288:	4662      	mov	r2, ip
 800228a:	46a0      	mov	r8, r4
 800228c:	4664      	mov	r4, ip
 800228e:	40d7      	lsrs	r7, r2
 8002290:	464a      	mov	r2, r9
 8002292:	40e1      	lsrs	r1, r4
 8002294:	4644      	mov	r4, r8
 8002296:	1bd2      	subs	r2, r2, r7
 8002298:	4691      	mov	r9, r2
 800229a:	430c      	orrs	r4, r1
 800229c:	4304      	orrs	r4, r0
 800229e:	1b1c      	subs	r4, r3, r4
 80022a0:	42a3      	cmp	r3, r4
 80022a2:	4192      	sbcs	r2, r2
 80022a4:	464b      	mov	r3, r9
 80022a6:	4252      	negs	r2, r2
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	469a      	mov	sl, r3
 80022ac:	4653      	mov	r3, sl
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	d400      	bmi.n	80022b4 <__aeabi_dsub+0xbc>
 80022b2:	e12b      	b.n	800250c <__aeabi_dsub+0x314>
 80022b4:	4653      	mov	r3, sl
 80022b6:	025a      	lsls	r2, r3, #9
 80022b8:	0a53      	lsrs	r3, r2, #9
 80022ba:	469a      	mov	sl, r3
 80022bc:	4653      	mov	r3, sl
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d100      	bne.n	80022c4 <__aeabi_dsub+0xcc>
 80022c2:	e166      	b.n	8002592 <__aeabi_dsub+0x39a>
 80022c4:	4650      	mov	r0, sl
 80022c6:	f000 fc91 	bl	8002bec <__clzsi2>
 80022ca:	0003      	movs	r3, r0
 80022cc:	3b08      	subs	r3, #8
 80022ce:	2220      	movs	r2, #32
 80022d0:	0020      	movs	r0, r4
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	4651      	mov	r1, sl
 80022d6:	40d0      	lsrs	r0, r2
 80022d8:	4099      	lsls	r1, r3
 80022da:	0002      	movs	r2, r0
 80022dc:	409c      	lsls	r4, r3
 80022de:	430a      	orrs	r2, r1
 80022e0:	429e      	cmp	r6, r3
 80022e2:	dd00      	ble.n	80022e6 <__aeabi_dsub+0xee>
 80022e4:	e164      	b.n	80025b0 <__aeabi_dsub+0x3b8>
 80022e6:	1b9b      	subs	r3, r3, r6
 80022e8:	1c59      	adds	r1, r3, #1
 80022ea:	291f      	cmp	r1, #31
 80022ec:	dd00      	ble.n	80022f0 <__aeabi_dsub+0xf8>
 80022ee:	e0fe      	b.n	80024ee <__aeabi_dsub+0x2f6>
 80022f0:	2320      	movs	r3, #32
 80022f2:	0010      	movs	r0, r2
 80022f4:	0026      	movs	r6, r4
 80022f6:	1a5b      	subs	r3, r3, r1
 80022f8:	409c      	lsls	r4, r3
 80022fa:	4098      	lsls	r0, r3
 80022fc:	40ce      	lsrs	r6, r1
 80022fe:	40ca      	lsrs	r2, r1
 8002300:	1e63      	subs	r3, r4, #1
 8002302:	419c      	sbcs	r4, r3
 8002304:	4330      	orrs	r0, r6
 8002306:	4692      	mov	sl, r2
 8002308:	2600      	movs	r6, #0
 800230a:	4304      	orrs	r4, r0
 800230c:	0763      	lsls	r3, r4, #29
 800230e:	d009      	beq.n	8002324 <__aeabi_dsub+0x12c>
 8002310:	230f      	movs	r3, #15
 8002312:	4023      	ands	r3, r4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d005      	beq.n	8002324 <__aeabi_dsub+0x12c>
 8002318:	1d23      	adds	r3, r4, #4
 800231a:	42a3      	cmp	r3, r4
 800231c:	41a4      	sbcs	r4, r4
 800231e:	4264      	negs	r4, r4
 8002320:	44a2      	add	sl, r4
 8002322:	001c      	movs	r4, r3
 8002324:	4653      	mov	r3, sl
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	d400      	bmi.n	800232c <__aeabi_dsub+0x134>
 800232a:	e0f2      	b.n	8002512 <__aeabi_dsub+0x31a>
 800232c:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <__aeabi_dsub+0x368>)
 800232e:	3601      	adds	r6, #1
 8002330:	429e      	cmp	r6, r3
 8002332:	d100      	bne.n	8002336 <__aeabi_dsub+0x13e>
 8002334:	e10f      	b.n	8002556 <__aeabi_dsub+0x35e>
 8002336:	4653      	mov	r3, sl
 8002338:	498a      	ldr	r1, [pc, #552]	; (8002564 <__aeabi_dsub+0x36c>)
 800233a:	08e4      	lsrs	r4, r4, #3
 800233c:	400b      	ands	r3, r1
 800233e:	0019      	movs	r1, r3
 8002340:	075b      	lsls	r3, r3, #29
 8002342:	4323      	orrs	r3, r4
 8002344:	0572      	lsls	r2, r6, #21
 8002346:	024c      	lsls	r4, r1, #9
 8002348:	0b24      	lsrs	r4, r4, #12
 800234a:	0d52      	lsrs	r2, r2, #21
 800234c:	0512      	lsls	r2, r2, #20
 800234e:	4322      	orrs	r2, r4
 8002350:	07ed      	lsls	r5, r5, #31
 8002352:	432a      	orrs	r2, r5
 8002354:	0018      	movs	r0, r3
 8002356:	0011      	movs	r1, r2
 8002358:	b003      	add	sp, #12
 800235a:	bcf0      	pop	{r4, r5, r6, r7}
 800235c:	46bb      	mov	fp, r7
 800235e:	46b2      	mov	sl, r6
 8002360:	46a9      	mov	r9, r5
 8002362:	46a0      	mov	r8, r4
 8002364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002366:	1ab4      	subs	r4, r6, r2
 8002368:	46a4      	mov	ip, r4
 800236a:	2c00      	cmp	r4, #0
 800236c:	dd59      	ble.n	8002422 <__aeabi_dsub+0x22a>
 800236e:	2a00      	cmp	r2, #0
 8002370:	d100      	bne.n	8002374 <__aeabi_dsub+0x17c>
 8002372:	e0b0      	b.n	80024d6 <__aeabi_dsub+0x2de>
 8002374:	4556      	cmp	r6, sl
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x182>
 8002378:	e0fa      	b.n	8002570 <__aeabi_dsub+0x378>
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	0412      	lsls	r2, r2, #16
 800237e:	4317      	orrs	r7, r2
 8002380:	4662      	mov	r2, ip
 8002382:	2a38      	cmp	r2, #56	; 0x38
 8002384:	dd00      	ble.n	8002388 <__aeabi_dsub+0x190>
 8002386:	e0d4      	b.n	8002532 <__aeabi_dsub+0x33a>
 8002388:	2a1f      	cmp	r2, #31
 800238a:	dc00      	bgt.n	800238e <__aeabi_dsub+0x196>
 800238c:	e1c0      	b.n	8002710 <__aeabi_dsub+0x518>
 800238e:	0039      	movs	r1, r7
 8002390:	3a20      	subs	r2, #32
 8002392:	40d1      	lsrs	r1, r2
 8002394:	4662      	mov	r2, ip
 8002396:	2a20      	cmp	r2, #32
 8002398:	d006      	beq.n	80023a8 <__aeabi_dsub+0x1b0>
 800239a:	4664      	mov	r4, ip
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	1b12      	subs	r2, r2, r4
 80023a0:	003c      	movs	r4, r7
 80023a2:	4094      	lsls	r4, r2
 80023a4:	4304      	orrs	r4, r0
 80023a6:	9401      	str	r4, [sp, #4]
 80023a8:	9c01      	ldr	r4, [sp, #4]
 80023aa:	1e62      	subs	r2, r4, #1
 80023ac:	4194      	sbcs	r4, r2
 80023ae:	430c      	orrs	r4, r1
 80023b0:	e0c3      	b.n	800253a <__aeabi_dsub+0x342>
 80023b2:	003c      	movs	r4, r7
 80023b4:	4304      	orrs	r4, r0
 80023b6:	d02b      	beq.n	8002410 <__aeabi_dsub+0x218>
 80023b8:	468b      	mov	fp, r1
 80023ba:	428d      	cmp	r5, r1
 80023bc:	d02e      	beq.n	800241c <__aeabi_dsub+0x224>
 80023be:	4c6a      	ldr	r4, [pc, #424]	; (8002568 <__aeabi_dsub+0x370>)
 80023c0:	46a4      	mov	ip, r4
 80023c2:	44b4      	add	ip, r6
 80023c4:	4664      	mov	r4, ip
 80023c6:	2c00      	cmp	r4, #0
 80023c8:	d05f      	beq.n	800248a <__aeabi_dsub+0x292>
 80023ca:	1b94      	subs	r4, r2, r6
 80023cc:	46a4      	mov	ip, r4
 80023ce:	2e00      	cmp	r6, #0
 80023d0:	d000      	beq.n	80023d4 <__aeabi_dsub+0x1dc>
 80023d2:	e120      	b.n	8002616 <__aeabi_dsub+0x41e>
 80023d4:	464c      	mov	r4, r9
 80023d6:	431c      	orrs	r4, r3
 80023d8:	d100      	bne.n	80023dc <__aeabi_dsub+0x1e4>
 80023da:	e1c7      	b.n	800276c <__aeabi_dsub+0x574>
 80023dc:	4661      	mov	r1, ip
 80023de:	1e4c      	subs	r4, r1, #1
 80023e0:	2901      	cmp	r1, #1
 80023e2:	d100      	bne.n	80023e6 <__aeabi_dsub+0x1ee>
 80023e4:	e223      	b.n	800282e <__aeabi_dsub+0x636>
 80023e6:	4d5e      	ldr	r5, [pc, #376]	; (8002560 <__aeabi_dsub+0x368>)
 80023e8:	45ac      	cmp	ip, r5
 80023ea:	d100      	bne.n	80023ee <__aeabi_dsub+0x1f6>
 80023ec:	e1d8      	b.n	80027a0 <__aeabi_dsub+0x5a8>
 80023ee:	46a4      	mov	ip, r4
 80023f0:	e11a      	b.n	8002628 <__aeabi_dsub+0x430>
 80023f2:	003a      	movs	r2, r7
 80023f4:	4302      	orrs	r2, r0
 80023f6:	d100      	bne.n	80023fa <__aeabi_dsub+0x202>
 80023f8:	e0e4      	b.n	80025c4 <__aeabi_dsub+0x3cc>
 80023fa:	0022      	movs	r2, r4
 80023fc:	3a01      	subs	r2, #1
 80023fe:	2c01      	cmp	r4, #1
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x20c>
 8002402:	e1c3      	b.n	800278c <__aeabi_dsub+0x594>
 8002404:	4956      	ldr	r1, [pc, #344]	; (8002560 <__aeabi_dsub+0x368>)
 8002406:	428c      	cmp	r4, r1
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x214>
 800240a:	e0b1      	b.n	8002570 <__aeabi_dsub+0x378>
 800240c:	4694      	mov	ip, r2
 800240e:	e72b      	b.n	8002268 <__aeabi_dsub+0x70>
 8002410:	2401      	movs	r4, #1
 8002412:	4061      	eors	r1, r4
 8002414:	468b      	mov	fp, r1
 8002416:	428d      	cmp	r5, r1
 8002418:	d000      	beq.n	800241c <__aeabi_dsub+0x224>
 800241a:	e716      	b.n	800224a <__aeabi_dsub+0x52>
 800241c:	4952      	ldr	r1, [pc, #328]	; (8002568 <__aeabi_dsub+0x370>)
 800241e:	468c      	mov	ip, r1
 8002420:	44b4      	add	ip, r6
 8002422:	4664      	mov	r4, ip
 8002424:	2c00      	cmp	r4, #0
 8002426:	d100      	bne.n	800242a <__aeabi_dsub+0x232>
 8002428:	e0d3      	b.n	80025d2 <__aeabi_dsub+0x3da>
 800242a:	1b91      	subs	r1, r2, r6
 800242c:	468c      	mov	ip, r1
 800242e:	2e00      	cmp	r6, #0
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x23c>
 8002432:	e15e      	b.n	80026f2 <__aeabi_dsub+0x4fa>
 8002434:	494a      	ldr	r1, [pc, #296]	; (8002560 <__aeabi_dsub+0x368>)
 8002436:	428a      	cmp	r2, r1
 8002438:	d100      	bne.n	800243c <__aeabi_dsub+0x244>
 800243a:	e1be      	b.n	80027ba <__aeabi_dsub+0x5c2>
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	464c      	mov	r4, r9
 8002440:	0409      	lsls	r1, r1, #16
 8002442:	430c      	orrs	r4, r1
 8002444:	46a1      	mov	r9, r4
 8002446:	4661      	mov	r1, ip
 8002448:	2938      	cmp	r1, #56	; 0x38
 800244a:	dd00      	ble.n	800244e <__aeabi_dsub+0x256>
 800244c:	e1ba      	b.n	80027c4 <__aeabi_dsub+0x5cc>
 800244e:	291f      	cmp	r1, #31
 8002450:	dd00      	ble.n	8002454 <__aeabi_dsub+0x25c>
 8002452:	e227      	b.n	80028a4 <__aeabi_dsub+0x6ac>
 8002454:	2420      	movs	r4, #32
 8002456:	1a64      	subs	r4, r4, r1
 8002458:	4649      	mov	r1, r9
 800245a:	40a1      	lsls	r1, r4
 800245c:	001e      	movs	r6, r3
 800245e:	4688      	mov	r8, r1
 8002460:	4661      	mov	r1, ip
 8002462:	40a3      	lsls	r3, r4
 8002464:	40ce      	lsrs	r6, r1
 8002466:	4641      	mov	r1, r8
 8002468:	1e5c      	subs	r4, r3, #1
 800246a:	41a3      	sbcs	r3, r4
 800246c:	4331      	orrs	r1, r6
 800246e:	4319      	orrs	r1, r3
 8002470:	000c      	movs	r4, r1
 8002472:	4663      	mov	r3, ip
 8002474:	4649      	mov	r1, r9
 8002476:	40d9      	lsrs	r1, r3
 8002478:	187f      	adds	r7, r7, r1
 800247a:	1824      	adds	r4, r4, r0
 800247c:	4284      	cmp	r4, r0
 800247e:	419b      	sbcs	r3, r3
 8002480:	425b      	negs	r3, r3
 8002482:	469a      	mov	sl, r3
 8002484:	0016      	movs	r6, r2
 8002486:	44ba      	add	sl, r7
 8002488:	e05d      	b.n	8002546 <__aeabi_dsub+0x34e>
 800248a:	4c38      	ldr	r4, [pc, #224]	; (800256c <__aeabi_dsub+0x374>)
 800248c:	1c72      	adds	r2, r6, #1
 800248e:	4222      	tst	r2, r4
 8002490:	d000      	beq.n	8002494 <__aeabi_dsub+0x29c>
 8002492:	e0df      	b.n	8002654 <__aeabi_dsub+0x45c>
 8002494:	464a      	mov	r2, r9
 8002496:	431a      	orrs	r2, r3
 8002498:	2e00      	cmp	r6, #0
 800249a:	d000      	beq.n	800249e <__aeabi_dsub+0x2a6>
 800249c:	e15c      	b.n	8002758 <__aeabi_dsub+0x560>
 800249e:	2a00      	cmp	r2, #0
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x2ac>
 80024a2:	e1cf      	b.n	8002844 <__aeabi_dsub+0x64c>
 80024a4:	003a      	movs	r2, r7
 80024a6:	4302      	orrs	r2, r0
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x2b4>
 80024aa:	e17f      	b.n	80027ac <__aeabi_dsub+0x5b4>
 80024ac:	1a1c      	subs	r4, r3, r0
 80024ae:	464a      	mov	r2, r9
 80024b0:	42a3      	cmp	r3, r4
 80024b2:	4189      	sbcs	r1, r1
 80024b4:	1bd2      	subs	r2, r2, r7
 80024b6:	4249      	negs	r1, r1
 80024b8:	1a52      	subs	r2, r2, r1
 80024ba:	4692      	mov	sl, r2
 80024bc:	0212      	lsls	r2, r2, #8
 80024be:	d400      	bmi.n	80024c2 <__aeabi_dsub+0x2ca>
 80024c0:	e20a      	b.n	80028d8 <__aeabi_dsub+0x6e0>
 80024c2:	1ac4      	subs	r4, r0, r3
 80024c4:	42a0      	cmp	r0, r4
 80024c6:	4180      	sbcs	r0, r0
 80024c8:	464b      	mov	r3, r9
 80024ca:	4240      	negs	r0, r0
 80024cc:	1aff      	subs	r7, r7, r3
 80024ce:	1a3b      	subs	r3, r7, r0
 80024d0:	469a      	mov	sl, r3
 80024d2:	465d      	mov	r5, fp
 80024d4:	e71a      	b.n	800230c <__aeabi_dsub+0x114>
 80024d6:	003a      	movs	r2, r7
 80024d8:	4302      	orrs	r2, r0
 80024da:	d073      	beq.n	80025c4 <__aeabi_dsub+0x3cc>
 80024dc:	0022      	movs	r2, r4
 80024de:	3a01      	subs	r2, #1
 80024e0:	2c01      	cmp	r4, #1
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x2ee>
 80024e4:	e0cb      	b.n	800267e <__aeabi_dsub+0x486>
 80024e6:	4554      	cmp	r4, sl
 80024e8:	d042      	beq.n	8002570 <__aeabi_dsub+0x378>
 80024ea:	4694      	mov	ip, r2
 80024ec:	e748      	b.n	8002380 <__aeabi_dsub+0x188>
 80024ee:	0010      	movs	r0, r2
 80024f0:	3b1f      	subs	r3, #31
 80024f2:	40d8      	lsrs	r0, r3
 80024f4:	2920      	cmp	r1, #32
 80024f6:	d003      	beq.n	8002500 <__aeabi_dsub+0x308>
 80024f8:	2340      	movs	r3, #64	; 0x40
 80024fa:	1a5b      	subs	r3, r3, r1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	4314      	orrs	r4, r2
 8002500:	1e63      	subs	r3, r4, #1
 8002502:	419c      	sbcs	r4, r3
 8002504:	2300      	movs	r3, #0
 8002506:	2600      	movs	r6, #0
 8002508:	469a      	mov	sl, r3
 800250a:	4304      	orrs	r4, r0
 800250c:	0763      	lsls	r3, r4, #29
 800250e:	d000      	beq.n	8002512 <__aeabi_dsub+0x31a>
 8002510:	e6fe      	b.n	8002310 <__aeabi_dsub+0x118>
 8002512:	4652      	mov	r2, sl
 8002514:	08e3      	lsrs	r3, r4, #3
 8002516:	0752      	lsls	r2, r2, #29
 8002518:	4313      	orrs	r3, r2
 800251a:	4652      	mov	r2, sl
 800251c:	46b4      	mov	ip, r6
 800251e:	08d2      	lsrs	r2, r2, #3
 8002520:	490f      	ldr	r1, [pc, #60]	; (8002560 <__aeabi_dsub+0x368>)
 8002522:	458c      	cmp	ip, r1
 8002524:	d02a      	beq.n	800257c <__aeabi_dsub+0x384>
 8002526:	0312      	lsls	r2, r2, #12
 8002528:	0b14      	lsrs	r4, r2, #12
 800252a:	4662      	mov	r2, ip
 800252c:	0552      	lsls	r2, r2, #21
 800252e:	0d52      	lsrs	r2, r2, #21
 8002530:	e70c      	b.n	800234c <__aeabi_dsub+0x154>
 8002532:	003c      	movs	r4, r7
 8002534:	4304      	orrs	r4, r0
 8002536:	1e62      	subs	r2, r4, #1
 8002538:	4194      	sbcs	r4, r2
 800253a:	18e4      	adds	r4, r4, r3
 800253c:	429c      	cmp	r4, r3
 800253e:	4192      	sbcs	r2, r2
 8002540:	4252      	negs	r2, r2
 8002542:	444a      	add	r2, r9
 8002544:	4692      	mov	sl, r2
 8002546:	4653      	mov	r3, sl
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	d5df      	bpl.n	800250c <__aeabi_dsub+0x314>
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <__aeabi_dsub+0x368>)
 800254e:	3601      	adds	r6, #1
 8002550:	429e      	cmp	r6, r3
 8002552:	d000      	beq.n	8002556 <__aeabi_dsub+0x35e>
 8002554:	e0a0      	b.n	8002698 <__aeabi_dsub+0x4a0>
 8002556:	0032      	movs	r2, r6
 8002558:	2400      	movs	r4, #0
 800255a:	2300      	movs	r3, #0
 800255c:	e6f6      	b.n	800234c <__aeabi_dsub+0x154>
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	000007ff 	.word	0x000007ff
 8002564:	ff7fffff 	.word	0xff7fffff
 8002568:	fffff801 	.word	0xfffff801
 800256c:	000007fe 	.word	0x000007fe
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	464a      	mov	r2, r9
 8002574:	0752      	lsls	r2, r2, #29
 8002576:	4313      	orrs	r3, r2
 8002578:	464a      	mov	r2, r9
 800257a:	08d2      	lsrs	r2, r2, #3
 800257c:	0019      	movs	r1, r3
 800257e:	4311      	orrs	r1, r2
 8002580:	d100      	bne.n	8002584 <__aeabi_dsub+0x38c>
 8002582:	e1b5      	b.n	80028f0 <__aeabi_dsub+0x6f8>
 8002584:	2480      	movs	r4, #128	; 0x80
 8002586:	0324      	lsls	r4, r4, #12
 8002588:	4314      	orrs	r4, r2
 800258a:	0324      	lsls	r4, r4, #12
 800258c:	4ad5      	ldr	r2, [pc, #852]	; (80028e4 <__aeabi_dsub+0x6ec>)
 800258e:	0b24      	lsrs	r4, r4, #12
 8002590:	e6dc      	b.n	800234c <__aeabi_dsub+0x154>
 8002592:	0020      	movs	r0, r4
 8002594:	f000 fb2a 	bl	8002bec <__clzsi2>
 8002598:	0003      	movs	r3, r0
 800259a:	3318      	adds	r3, #24
 800259c:	2b1f      	cmp	r3, #31
 800259e:	dc00      	bgt.n	80025a2 <__aeabi_dsub+0x3aa>
 80025a0:	e695      	b.n	80022ce <__aeabi_dsub+0xd6>
 80025a2:	0022      	movs	r2, r4
 80025a4:	3808      	subs	r0, #8
 80025a6:	4082      	lsls	r2, r0
 80025a8:	2400      	movs	r4, #0
 80025aa:	429e      	cmp	r6, r3
 80025ac:	dc00      	bgt.n	80025b0 <__aeabi_dsub+0x3b8>
 80025ae:	e69a      	b.n	80022e6 <__aeabi_dsub+0xee>
 80025b0:	1af6      	subs	r6, r6, r3
 80025b2:	4bcd      	ldr	r3, [pc, #820]	; (80028e8 <__aeabi_dsub+0x6f0>)
 80025b4:	401a      	ands	r2, r3
 80025b6:	4692      	mov	sl, r2
 80025b8:	e6a8      	b.n	800230c <__aeabi_dsub+0x114>
 80025ba:	003c      	movs	r4, r7
 80025bc:	4304      	orrs	r4, r0
 80025be:	1e62      	subs	r2, r4, #1
 80025c0:	4194      	sbcs	r4, r2
 80025c2:	e66c      	b.n	800229e <__aeabi_dsub+0xa6>
 80025c4:	464a      	mov	r2, r9
 80025c6:	08db      	lsrs	r3, r3, #3
 80025c8:	0752      	lsls	r2, r2, #29
 80025ca:	4313      	orrs	r3, r2
 80025cc:	464a      	mov	r2, r9
 80025ce:	08d2      	lsrs	r2, r2, #3
 80025d0:	e7a6      	b.n	8002520 <__aeabi_dsub+0x328>
 80025d2:	4cc6      	ldr	r4, [pc, #792]	; (80028ec <__aeabi_dsub+0x6f4>)
 80025d4:	1c72      	adds	r2, r6, #1
 80025d6:	4222      	tst	r2, r4
 80025d8:	d000      	beq.n	80025dc <__aeabi_dsub+0x3e4>
 80025da:	e0ac      	b.n	8002736 <__aeabi_dsub+0x53e>
 80025dc:	464a      	mov	r2, r9
 80025de:	431a      	orrs	r2, r3
 80025e0:	2e00      	cmp	r6, #0
 80025e2:	d000      	beq.n	80025e6 <__aeabi_dsub+0x3ee>
 80025e4:	e105      	b.n	80027f2 <__aeabi_dsub+0x5fa>
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0x3f4>
 80025ea:	e156      	b.n	800289a <__aeabi_dsub+0x6a2>
 80025ec:	003a      	movs	r2, r7
 80025ee:	4302      	orrs	r2, r0
 80025f0:	d100      	bne.n	80025f4 <__aeabi_dsub+0x3fc>
 80025f2:	e0db      	b.n	80027ac <__aeabi_dsub+0x5b4>
 80025f4:	181c      	adds	r4, r3, r0
 80025f6:	429c      	cmp	r4, r3
 80025f8:	419b      	sbcs	r3, r3
 80025fa:	444f      	add	r7, r9
 80025fc:	46ba      	mov	sl, r7
 80025fe:	425b      	negs	r3, r3
 8002600:	449a      	add	sl, r3
 8002602:	4653      	mov	r3, sl
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	d400      	bmi.n	800260a <__aeabi_dsub+0x412>
 8002608:	e780      	b.n	800250c <__aeabi_dsub+0x314>
 800260a:	4652      	mov	r2, sl
 800260c:	4bb6      	ldr	r3, [pc, #728]	; (80028e8 <__aeabi_dsub+0x6f0>)
 800260e:	2601      	movs	r6, #1
 8002610:	401a      	ands	r2, r3
 8002612:	4692      	mov	sl, r2
 8002614:	e77a      	b.n	800250c <__aeabi_dsub+0x314>
 8002616:	4cb3      	ldr	r4, [pc, #716]	; (80028e4 <__aeabi_dsub+0x6ec>)
 8002618:	42a2      	cmp	r2, r4
 800261a:	d100      	bne.n	800261e <__aeabi_dsub+0x426>
 800261c:	e0c0      	b.n	80027a0 <__aeabi_dsub+0x5a8>
 800261e:	2480      	movs	r4, #128	; 0x80
 8002620:	464d      	mov	r5, r9
 8002622:	0424      	lsls	r4, r4, #16
 8002624:	4325      	orrs	r5, r4
 8002626:	46a9      	mov	r9, r5
 8002628:	4664      	mov	r4, ip
 800262a:	2c38      	cmp	r4, #56	; 0x38
 800262c:	dc53      	bgt.n	80026d6 <__aeabi_dsub+0x4de>
 800262e:	4661      	mov	r1, ip
 8002630:	2c1f      	cmp	r4, #31
 8002632:	dd00      	ble.n	8002636 <__aeabi_dsub+0x43e>
 8002634:	e0cd      	b.n	80027d2 <__aeabi_dsub+0x5da>
 8002636:	2520      	movs	r5, #32
 8002638:	001e      	movs	r6, r3
 800263a:	1b2d      	subs	r5, r5, r4
 800263c:	464c      	mov	r4, r9
 800263e:	40ab      	lsls	r3, r5
 8002640:	40ac      	lsls	r4, r5
 8002642:	40ce      	lsrs	r6, r1
 8002644:	1e5d      	subs	r5, r3, #1
 8002646:	41ab      	sbcs	r3, r5
 8002648:	4334      	orrs	r4, r6
 800264a:	4323      	orrs	r3, r4
 800264c:	464c      	mov	r4, r9
 800264e:	40cc      	lsrs	r4, r1
 8002650:	1b3f      	subs	r7, r7, r4
 8002652:	e045      	b.n	80026e0 <__aeabi_dsub+0x4e8>
 8002654:	464a      	mov	r2, r9
 8002656:	1a1c      	subs	r4, r3, r0
 8002658:	1bd1      	subs	r1, r2, r7
 800265a:	42a3      	cmp	r3, r4
 800265c:	4192      	sbcs	r2, r2
 800265e:	4252      	negs	r2, r2
 8002660:	4692      	mov	sl, r2
 8002662:	000a      	movs	r2, r1
 8002664:	4651      	mov	r1, sl
 8002666:	1a52      	subs	r2, r2, r1
 8002668:	4692      	mov	sl, r2
 800266a:	0212      	lsls	r2, r2, #8
 800266c:	d500      	bpl.n	8002670 <__aeabi_dsub+0x478>
 800266e:	e083      	b.n	8002778 <__aeabi_dsub+0x580>
 8002670:	4653      	mov	r3, sl
 8002672:	4323      	orrs	r3, r4
 8002674:	d000      	beq.n	8002678 <__aeabi_dsub+0x480>
 8002676:	e621      	b.n	80022bc <__aeabi_dsub+0xc4>
 8002678:	2200      	movs	r2, #0
 800267a:	2500      	movs	r5, #0
 800267c:	e753      	b.n	8002526 <__aeabi_dsub+0x32e>
 800267e:	181c      	adds	r4, r3, r0
 8002680:	429c      	cmp	r4, r3
 8002682:	419b      	sbcs	r3, r3
 8002684:	444f      	add	r7, r9
 8002686:	46ba      	mov	sl, r7
 8002688:	425b      	negs	r3, r3
 800268a:	449a      	add	sl, r3
 800268c:	4653      	mov	r3, sl
 800268e:	2601      	movs	r6, #1
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	d400      	bmi.n	8002696 <__aeabi_dsub+0x49e>
 8002694:	e73a      	b.n	800250c <__aeabi_dsub+0x314>
 8002696:	2602      	movs	r6, #2
 8002698:	4652      	mov	r2, sl
 800269a:	4b93      	ldr	r3, [pc, #588]	; (80028e8 <__aeabi_dsub+0x6f0>)
 800269c:	2101      	movs	r1, #1
 800269e:	401a      	ands	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	4021      	ands	r1, r4
 80026a4:	0862      	lsrs	r2, r4, #1
 80026a6:	430a      	orrs	r2, r1
 80026a8:	07dc      	lsls	r4, r3, #31
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	469a      	mov	sl, r3
 80026ae:	4314      	orrs	r4, r2
 80026b0:	e62c      	b.n	800230c <__aeabi_dsub+0x114>
 80026b2:	0039      	movs	r1, r7
 80026b4:	3a20      	subs	r2, #32
 80026b6:	40d1      	lsrs	r1, r2
 80026b8:	4662      	mov	r2, ip
 80026ba:	2a20      	cmp	r2, #32
 80026bc:	d006      	beq.n	80026cc <__aeabi_dsub+0x4d4>
 80026be:	4664      	mov	r4, ip
 80026c0:	2240      	movs	r2, #64	; 0x40
 80026c2:	1b12      	subs	r2, r2, r4
 80026c4:	003c      	movs	r4, r7
 80026c6:	4094      	lsls	r4, r2
 80026c8:	4304      	orrs	r4, r0
 80026ca:	9401      	str	r4, [sp, #4]
 80026cc:	9c01      	ldr	r4, [sp, #4]
 80026ce:	1e62      	subs	r2, r4, #1
 80026d0:	4194      	sbcs	r4, r2
 80026d2:	430c      	orrs	r4, r1
 80026d4:	e5e3      	b.n	800229e <__aeabi_dsub+0xa6>
 80026d6:	4649      	mov	r1, r9
 80026d8:	4319      	orrs	r1, r3
 80026da:	000b      	movs	r3, r1
 80026dc:	1e5c      	subs	r4, r3, #1
 80026de:	41a3      	sbcs	r3, r4
 80026e0:	1ac4      	subs	r4, r0, r3
 80026e2:	42a0      	cmp	r0, r4
 80026e4:	419b      	sbcs	r3, r3
 80026e6:	425b      	negs	r3, r3
 80026e8:	1afb      	subs	r3, r7, r3
 80026ea:	469a      	mov	sl, r3
 80026ec:	465d      	mov	r5, fp
 80026ee:	0016      	movs	r6, r2
 80026f0:	e5dc      	b.n	80022ac <__aeabi_dsub+0xb4>
 80026f2:	4649      	mov	r1, r9
 80026f4:	4319      	orrs	r1, r3
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x502>
 80026f8:	e0ae      	b.n	8002858 <__aeabi_dsub+0x660>
 80026fa:	4661      	mov	r1, ip
 80026fc:	4664      	mov	r4, ip
 80026fe:	3901      	subs	r1, #1
 8002700:	2c01      	cmp	r4, #1
 8002702:	d100      	bne.n	8002706 <__aeabi_dsub+0x50e>
 8002704:	e0e0      	b.n	80028c8 <__aeabi_dsub+0x6d0>
 8002706:	4c77      	ldr	r4, [pc, #476]	; (80028e4 <__aeabi_dsub+0x6ec>)
 8002708:	45a4      	cmp	ip, r4
 800270a:	d056      	beq.n	80027ba <__aeabi_dsub+0x5c2>
 800270c:	468c      	mov	ip, r1
 800270e:	e69a      	b.n	8002446 <__aeabi_dsub+0x24e>
 8002710:	4661      	mov	r1, ip
 8002712:	2220      	movs	r2, #32
 8002714:	003c      	movs	r4, r7
 8002716:	1a52      	subs	r2, r2, r1
 8002718:	4094      	lsls	r4, r2
 800271a:	0001      	movs	r1, r0
 800271c:	4090      	lsls	r0, r2
 800271e:	46a0      	mov	r8, r4
 8002720:	4664      	mov	r4, ip
 8002722:	1e42      	subs	r2, r0, #1
 8002724:	4190      	sbcs	r0, r2
 8002726:	4662      	mov	r2, ip
 8002728:	40e1      	lsrs	r1, r4
 800272a:	4644      	mov	r4, r8
 800272c:	40d7      	lsrs	r7, r2
 800272e:	430c      	orrs	r4, r1
 8002730:	4304      	orrs	r4, r0
 8002732:	44b9      	add	r9, r7
 8002734:	e701      	b.n	800253a <__aeabi_dsub+0x342>
 8002736:	496b      	ldr	r1, [pc, #428]	; (80028e4 <__aeabi_dsub+0x6ec>)
 8002738:	428a      	cmp	r2, r1
 800273a:	d100      	bne.n	800273e <__aeabi_dsub+0x546>
 800273c:	e70c      	b.n	8002558 <__aeabi_dsub+0x360>
 800273e:	1818      	adds	r0, r3, r0
 8002740:	4298      	cmp	r0, r3
 8002742:	419b      	sbcs	r3, r3
 8002744:	444f      	add	r7, r9
 8002746:	425b      	negs	r3, r3
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	07dc      	lsls	r4, r3, #31
 800274c:	0840      	lsrs	r0, r0, #1
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	469a      	mov	sl, r3
 8002752:	0016      	movs	r6, r2
 8002754:	4304      	orrs	r4, r0
 8002756:	e6d9      	b.n	800250c <__aeabi_dsub+0x314>
 8002758:	2a00      	cmp	r2, #0
 800275a:	d000      	beq.n	800275e <__aeabi_dsub+0x566>
 800275c:	e081      	b.n	8002862 <__aeabi_dsub+0x66a>
 800275e:	003b      	movs	r3, r7
 8002760:	4303      	orrs	r3, r0
 8002762:	d11d      	bne.n	80027a0 <__aeabi_dsub+0x5a8>
 8002764:	2280      	movs	r2, #128	; 0x80
 8002766:	2500      	movs	r5, #0
 8002768:	0312      	lsls	r2, r2, #12
 800276a:	e70b      	b.n	8002584 <__aeabi_dsub+0x38c>
 800276c:	08c0      	lsrs	r0, r0, #3
 800276e:	077b      	lsls	r3, r7, #29
 8002770:	465d      	mov	r5, fp
 8002772:	4303      	orrs	r3, r0
 8002774:	08fa      	lsrs	r2, r7, #3
 8002776:	e6d3      	b.n	8002520 <__aeabi_dsub+0x328>
 8002778:	1ac4      	subs	r4, r0, r3
 800277a:	42a0      	cmp	r0, r4
 800277c:	4180      	sbcs	r0, r0
 800277e:	464b      	mov	r3, r9
 8002780:	4240      	negs	r0, r0
 8002782:	1aff      	subs	r7, r7, r3
 8002784:	1a3b      	subs	r3, r7, r0
 8002786:	469a      	mov	sl, r3
 8002788:	465d      	mov	r5, fp
 800278a:	e597      	b.n	80022bc <__aeabi_dsub+0xc4>
 800278c:	1a1c      	subs	r4, r3, r0
 800278e:	464a      	mov	r2, r9
 8002790:	42a3      	cmp	r3, r4
 8002792:	419b      	sbcs	r3, r3
 8002794:	1bd7      	subs	r7, r2, r7
 8002796:	425b      	negs	r3, r3
 8002798:	1afb      	subs	r3, r7, r3
 800279a:	469a      	mov	sl, r3
 800279c:	2601      	movs	r6, #1
 800279e:	e585      	b.n	80022ac <__aeabi_dsub+0xb4>
 80027a0:	08c0      	lsrs	r0, r0, #3
 80027a2:	077b      	lsls	r3, r7, #29
 80027a4:	465d      	mov	r5, fp
 80027a6:	4303      	orrs	r3, r0
 80027a8:	08fa      	lsrs	r2, r7, #3
 80027aa:	e6e7      	b.n	800257c <__aeabi_dsub+0x384>
 80027ac:	464a      	mov	r2, r9
 80027ae:	08db      	lsrs	r3, r3, #3
 80027b0:	0752      	lsls	r2, r2, #29
 80027b2:	4313      	orrs	r3, r2
 80027b4:	464a      	mov	r2, r9
 80027b6:	08d2      	lsrs	r2, r2, #3
 80027b8:	e6b5      	b.n	8002526 <__aeabi_dsub+0x32e>
 80027ba:	08c0      	lsrs	r0, r0, #3
 80027bc:	077b      	lsls	r3, r7, #29
 80027be:	4303      	orrs	r3, r0
 80027c0:	08fa      	lsrs	r2, r7, #3
 80027c2:	e6db      	b.n	800257c <__aeabi_dsub+0x384>
 80027c4:	4649      	mov	r1, r9
 80027c6:	4319      	orrs	r1, r3
 80027c8:	000b      	movs	r3, r1
 80027ca:	1e59      	subs	r1, r3, #1
 80027cc:	418b      	sbcs	r3, r1
 80027ce:	001c      	movs	r4, r3
 80027d0:	e653      	b.n	800247a <__aeabi_dsub+0x282>
 80027d2:	464d      	mov	r5, r9
 80027d4:	3c20      	subs	r4, #32
 80027d6:	40e5      	lsrs	r5, r4
 80027d8:	2920      	cmp	r1, #32
 80027da:	d005      	beq.n	80027e8 <__aeabi_dsub+0x5f0>
 80027dc:	2440      	movs	r4, #64	; 0x40
 80027de:	1a64      	subs	r4, r4, r1
 80027e0:	4649      	mov	r1, r9
 80027e2:	40a1      	lsls	r1, r4
 80027e4:	430b      	orrs	r3, r1
 80027e6:	4698      	mov	r8, r3
 80027e8:	4643      	mov	r3, r8
 80027ea:	1e5c      	subs	r4, r3, #1
 80027ec:	41a3      	sbcs	r3, r4
 80027ee:	432b      	orrs	r3, r5
 80027f0:	e776      	b.n	80026e0 <__aeabi_dsub+0x4e8>
 80027f2:	2a00      	cmp	r2, #0
 80027f4:	d0e1      	beq.n	80027ba <__aeabi_dsub+0x5c2>
 80027f6:	003a      	movs	r2, r7
 80027f8:	08db      	lsrs	r3, r3, #3
 80027fa:	4302      	orrs	r2, r0
 80027fc:	d100      	bne.n	8002800 <__aeabi_dsub+0x608>
 80027fe:	e6b8      	b.n	8002572 <__aeabi_dsub+0x37a>
 8002800:	464a      	mov	r2, r9
 8002802:	0752      	lsls	r2, r2, #29
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	4313      	orrs	r3, r2
 8002808:	464a      	mov	r2, r9
 800280a:	0324      	lsls	r4, r4, #12
 800280c:	08d2      	lsrs	r2, r2, #3
 800280e:	4222      	tst	r2, r4
 8002810:	d007      	beq.n	8002822 <__aeabi_dsub+0x62a>
 8002812:	08fe      	lsrs	r6, r7, #3
 8002814:	4226      	tst	r6, r4
 8002816:	d104      	bne.n	8002822 <__aeabi_dsub+0x62a>
 8002818:	465d      	mov	r5, fp
 800281a:	0032      	movs	r2, r6
 800281c:	08c3      	lsrs	r3, r0, #3
 800281e:	077f      	lsls	r7, r7, #29
 8002820:	433b      	orrs	r3, r7
 8002822:	0f59      	lsrs	r1, r3, #29
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	0749      	lsls	r1, r1, #29
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	430b      	orrs	r3, r1
 800282c:	e6a6      	b.n	800257c <__aeabi_dsub+0x384>
 800282e:	1ac4      	subs	r4, r0, r3
 8002830:	42a0      	cmp	r0, r4
 8002832:	4180      	sbcs	r0, r0
 8002834:	464b      	mov	r3, r9
 8002836:	4240      	negs	r0, r0
 8002838:	1aff      	subs	r7, r7, r3
 800283a:	1a3b      	subs	r3, r7, r0
 800283c:	469a      	mov	sl, r3
 800283e:	465d      	mov	r5, fp
 8002840:	2601      	movs	r6, #1
 8002842:	e533      	b.n	80022ac <__aeabi_dsub+0xb4>
 8002844:	003b      	movs	r3, r7
 8002846:	4303      	orrs	r3, r0
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x654>
 800284a:	e715      	b.n	8002678 <__aeabi_dsub+0x480>
 800284c:	08c0      	lsrs	r0, r0, #3
 800284e:	077b      	lsls	r3, r7, #29
 8002850:	465d      	mov	r5, fp
 8002852:	4303      	orrs	r3, r0
 8002854:	08fa      	lsrs	r2, r7, #3
 8002856:	e666      	b.n	8002526 <__aeabi_dsub+0x32e>
 8002858:	08c0      	lsrs	r0, r0, #3
 800285a:	077b      	lsls	r3, r7, #29
 800285c:	4303      	orrs	r3, r0
 800285e:	08fa      	lsrs	r2, r7, #3
 8002860:	e65e      	b.n	8002520 <__aeabi_dsub+0x328>
 8002862:	003a      	movs	r2, r7
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	4302      	orrs	r2, r0
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x674>
 800286a:	e682      	b.n	8002572 <__aeabi_dsub+0x37a>
 800286c:	464a      	mov	r2, r9
 800286e:	0752      	lsls	r2, r2, #29
 8002870:	2480      	movs	r4, #128	; 0x80
 8002872:	4313      	orrs	r3, r2
 8002874:	464a      	mov	r2, r9
 8002876:	0324      	lsls	r4, r4, #12
 8002878:	08d2      	lsrs	r2, r2, #3
 800287a:	4222      	tst	r2, r4
 800287c:	d007      	beq.n	800288e <__aeabi_dsub+0x696>
 800287e:	08fe      	lsrs	r6, r7, #3
 8002880:	4226      	tst	r6, r4
 8002882:	d104      	bne.n	800288e <__aeabi_dsub+0x696>
 8002884:	465d      	mov	r5, fp
 8002886:	0032      	movs	r2, r6
 8002888:	08c3      	lsrs	r3, r0, #3
 800288a:	077f      	lsls	r7, r7, #29
 800288c:	433b      	orrs	r3, r7
 800288e:	0f59      	lsrs	r1, r3, #29
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	0749      	lsls	r1, r1, #29
 8002896:	430b      	orrs	r3, r1
 8002898:	e670      	b.n	800257c <__aeabi_dsub+0x384>
 800289a:	08c0      	lsrs	r0, r0, #3
 800289c:	077b      	lsls	r3, r7, #29
 800289e:	4303      	orrs	r3, r0
 80028a0:	08fa      	lsrs	r2, r7, #3
 80028a2:	e640      	b.n	8002526 <__aeabi_dsub+0x32e>
 80028a4:	464c      	mov	r4, r9
 80028a6:	3920      	subs	r1, #32
 80028a8:	40cc      	lsrs	r4, r1
 80028aa:	4661      	mov	r1, ip
 80028ac:	2920      	cmp	r1, #32
 80028ae:	d006      	beq.n	80028be <__aeabi_dsub+0x6c6>
 80028b0:	4666      	mov	r6, ip
 80028b2:	2140      	movs	r1, #64	; 0x40
 80028b4:	1b89      	subs	r1, r1, r6
 80028b6:	464e      	mov	r6, r9
 80028b8:	408e      	lsls	r6, r1
 80028ba:	4333      	orrs	r3, r6
 80028bc:	4698      	mov	r8, r3
 80028be:	4643      	mov	r3, r8
 80028c0:	1e59      	subs	r1, r3, #1
 80028c2:	418b      	sbcs	r3, r1
 80028c4:	431c      	orrs	r4, r3
 80028c6:	e5d8      	b.n	800247a <__aeabi_dsub+0x282>
 80028c8:	181c      	adds	r4, r3, r0
 80028ca:	4284      	cmp	r4, r0
 80028cc:	4180      	sbcs	r0, r0
 80028ce:	444f      	add	r7, r9
 80028d0:	46ba      	mov	sl, r7
 80028d2:	4240      	negs	r0, r0
 80028d4:	4482      	add	sl, r0
 80028d6:	e6d9      	b.n	800268c <__aeabi_dsub+0x494>
 80028d8:	4653      	mov	r3, sl
 80028da:	4323      	orrs	r3, r4
 80028dc:	d100      	bne.n	80028e0 <__aeabi_dsub+0x6e8>
 80028de:	e6cb      	b.n	8002678 <__aeabi_dsub+0x480>
 80028e0:	e614      	b.n	800250c <__aeabi_dsub+0x314>
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	000007ff 	.word	0x000007ff
 80028e8:	ff7fffff 	.word	0xff7fffff
 80028ec:	000007fe 	.word	0x000007fe
 80028f0:	2300      	movs	r3, #0
 80028f2:	4a01      	ldr	r2, [pc, #4]	; (80028f8 <__aeabi_dsub+0x700>)
 80028f4:	001c      	movs	r4, r3
 80028f6:	e529      	b.n	800234c <__aeabi_dsub+0x154>
 80028f8:	000007ff 	.word	0x000007ff

080028fc <__aeabi_dcmpun>:
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	0005      	movs	r5, r0
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <__aeabi_dcmpun+0x38>)
 8002902:	031c      	lsls	r4, r3, #12
 8002904:	0016      	movs	r6, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	030a      	lsls	r2, r1, #12
 800290a:	0049      	lsls	r1, r1, #1
 800290c:	0b12      	lsrs	r2, r2, #12
 800290e:	0d49      	lsrs	r1, r1, #21
 8002910:	0b24      	lsrs	r4, r4, #12
 8002912:	0d5b      	lsrs	r3, r3, #21
 8002914:	4281      	cmp	r1, r0
 8002916:	d008      	beq.n	800292a <__aeabi_dcmpun+0x2e>
 8002918:	4a06      	ldr	r2, [pc, #24]	; (8002934 <__aeabi_dcmpun+0x38>)
 800291a:	2000      	movs	r0, #0
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <__aeabi_dcmpun+0x2c>
 8002920:	0020      	movs	r0, r4
 8002922:	4330      	orrs	r0, r6
 8002924:	1e43      	subs	r3, r0, #1
 8002926:	4198      	sbcs	r0, r3
 8002928:	bd70      	pop	{r4, r5, r6, pc}
 800292a:	2001      	movs	r0, #1
 800292c:	432a      	orrs	r2, r5
 800292e:	d1fb      	bne.n	8002928 <__aeabi_dcmpun+0x2c>
 8002930:	e7f2      	b.n	8002918 <__aeabi_dcmpun+0x1c>
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	000007ff 	.word	0x000007ff

08002938 <__aeabi_d2iz>:
 8002938:	000a      	movs	r2, r1
 800293a:	b530      	push	{r4, r5, lr}
 800293c:	4c13      	ldr	r4, [pc, #76]	; (800298c <__aeabi_d2iz+0x54>)
 800293e:	0053      	lsls	r3, r2, #1
 8002940:	0309      	lsls	r1, r1, #12
 8002942:	0005      	movs	r5, r0
 8002944:	0b09      	lsrs	r1, r1, #12
 8002946:	2000      	movs	r0, #0
 8002948:	0d5b      	lsrs	r3, r3, #21
 800294a:	0fd2      	lsrs	r2, r2, #31
 800294c:	42a3      	cmp	r3, r4
 800294e:	dd04      	ble.n	800295a <__aeabi_d2iz+0x22>
 8002950:	480f      	ldr	r0, [pc, #60]	; (8002990 <__aeabi_d2iz+0x58>)
 8002952:	4283      	cmp	r3, r0
 8002954:	dd02      	ble.n	800295c <__aeabi_d2iz+0x24>
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <__aeabi_d2iz+0x5c>)
 8002958:	18d0      	adds	r0, r2, r3
 800295a:	bd30      	pop	{r4, r5, pc}
 800295c:	2080      	movs	r0, #128	; 0x80
 800295e:	0340      	lsls	r0, r0, #13
 8002960:	4301      	orrs	r1, r0
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <__aeabi_d2iz+0x60>)
 8002964:	1ac0      	subs	r0, r0, r3
 8002966:	281f      	cmp	r0, #31
 8002968:	dd08      	ble.n	800297c <__aeabi_d2iz+0x44>
 800296a:	480c      	ldr	r0, [pc, #48]	; (800299c <__aeabi_d2iz+0x64>)
 800296c:	1ac3      	subs	r3, r0, r3
 800296e:	40d9      	lsrs	r1, r3
 8002970:	000b      	movs	r3, r1
 8002972:	4258      	negs	r0, r3
 8002974:	2a00      	cmp	r2, #0
 8002976:	d1f0      	bne.n	800295a <__aeabi_d2iz+0x22>
 8002978:	0018      	movs	r0, r3
 800297a:	e7ee      	b.n	800295a <__aeabi_d2iz+0x22>
 800297c:	4c08      	ldr	r4, [pc, #32]	; (80029a0 <__aeabi_d2iz+0x68>)
 800297e:	40c5      	lsrs	r5, r0
 8002980:	46a4      	mov	ip, r4
 8002982:	4463      	add	r3, ip
 8002984:	4099      	lsls	r1, r3
 8002986:	000b      	movs	r3, r1
 8002988:	432b      	orrs	r3, r5
 800298a:	e7f2      	b.n	8002972 <__aeabi_d2iz+0x3a>
 800298c:	000003fe 	.word	0x000003fe
 8002990:	0000041d 	.word	0x0000041d
 8002994:	7fffffff 	.word	0x7fffffff
 8002998:	00000433 	.word	0x00000433
 800299c:	00000413 	.word	0x00000413
 80029a0:	fffffbed 	.word	0xfffffbed

080029a4 <__aeabi_i2d>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	2800      	cmp	r0, #0
 80029a8:	d016      	beq.n	80029d8 <__aeabi_i2d+0x34>
 80029aa:	17c3      	asrs	r3, r0, #31
 80029ac:	18c5      	adds	r5, r0, r3
 80029ae:	405d      	eors	r5, r3
 80029b0:	0fc4      	lsrs	r4, r0, #31
 80029b2:	0028      	movs	r0, r5
 80029b4:	f000 f91a 	bl	8002bec <__clzsi2>
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <__aeabi_i2d+0x5c>)
 80029ba:	1a1b      	subs	r3, r3, r0
 80029bc:	280a      	cmp	r0, #10
 80029be:	dc16      	bgt.n	80029ee <__aeabi_i2d+0x4a>
 80029c0:	0002      	movs	r2, r0
 80029c2:	002e      	movs	r6, r5
 80029c4:	3215      	adds	r2, #21
 80029c6:	4096      	lsls	r6, r2
 80029c8:	220b      	movs	r2, #11
 80029ca:	1a12      	subs	r2, r2, r0
 80029cc:	40d5      	lsrs	r5, r2
 80029ce:	055b      	lsls	r3, r3, #21
 80029d0:	032d      	lsls	r5, r5, #12
 80029d2:	0b2d      	lsrs	r5, r5, #12
 80029d4:	0d5b      	lsrs	r3, r3, #21
 80029d6:	e003      	b.n	80029e0 <__aeabi_i2d+0x3c>
 80029d8:	2400      	movs	r4, #0
 80029da:	2300      	movs	r3, #0
 80029dc:	2500      	movs	r5, #0
 80029de:	2600      	movs	r6, #0
 80029e0:	051b      	lsls	r3, r3, #20
 80029e2:	432b      	orrs	r3, r5
 80029e4:	07e4      	lsls	r4, r4, #31
 80029e6:	4323      	orrs	r3, r4
 80029e8:	0030      	movs	r0, r6
 80029ea:	0019      	movs	r1, r3
 80029ec:	bd70      	pop	{r4, r5, r6, pc}
 80029ee:	380b      	subs	r0, #11
 80029f0:	4085      	lsls	r5, r0
 80029f2:	055b      	lsls	r3, r3, #21
 80029f4:	032d      	lsls	r5, r5, #12
 80029f6:	2600      	movs	r6, #0
 80029f8:	0b2d      	lsrs	r5, r5, #12
 80029fa:	0d5b      	lsrs	r3, r3, #21
 80029fc:	e7f0      	b.n	80029e0 <__aeabi_i2d+0x3c>
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	0000041e 	.word	0x0000041e

08002a04 <__aeabi_ui2d>:
 8002a04:	b510      	push	{r4, lr}
 8002a06:	1e04      	subs	r4, r0, #0
 8002a08:	d010      	beq.n	8002a2c <__aeabi_ui2d+0x28>
 8002a0a:	f000 f8ef 	bl	8002bec <__clzsi2>
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <__aeabi_ui2d+0x48>)
 8002a10:	1a1b      	subs	r3, r3, r0
 8002a12:	280a      	cmp	r0, #10
 8002a14:	dc11      	bgt.n	8002a3a <__aeabi_ui2d+0x36>
 8002a16:	220b      	movs	r2, #11
 8002a18:	0021      	movs	r1, r4
 8002a1a:	1a12      	subs	r2, r2, r0
 8002a1c:	40d1      	lsrs	r1, r2
 8002a1e:	3015      	adds	r0, #21
 8002a20:	030a      	lsls	r2, r1, #12
 8002a22:	055b      	lsls	r3, r3, #21
 8002a24:	4084      	lsls	r4, r0
 8002a26:	0b12      	lsrs	r2, r2, #12
 8002a28:	0d5b      	lsrs	r3, r3, #21
 8002a2a:	e001      	b.n	8002a30 <__aeabi_ui2d+0x2c>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2200      	movs	r2, #0
 8002a30:	051b      	lsls	r3, r3, #20
 8002a32:	4313      	orrs	r3, r2
 8002a34:	0020      	movs	r0, r4
 8002a36:	0019      	movs	r1, r3
 8002a38:	bd10      	pop	{r4, pc}
 8002a3a:	0022      	movs	r2, r4
 8002a3c:	380b      	subs	r0, #11
 8002a3e:	4082      	lsls	r2, r0
 8002a40:	055b      	lsls	r3, r3, #21
 8002a42:	0312      	lsls	r2, r2, #12
 8002a44:	2400      	movs	r4, #0
 8002a46:	0b12      	lsrs	r2, r2, #12
 8002a48:	0d5b      	lsrs	r3, r3, #21
 8002a4a:	e7f1      	b.n	8002a30 <__aeabi_ui2d+0x2c>
 8002a4c:	0000041e 	.word	0x0000041e

08002a50 <__aeabi_f2d>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	0242      	lsls	r2, r0, #9
 8002a54:	0043      	lsls	r3, r0, #1
 8002a56:	0fc4      	lsrs	r4, r0, #31
 8002a58:	20fe      	movs	r0, #254	; 0xfe
 8002a5a:	0e1b      	lsrs	r3, r3, #24
 8002a5c:	1c59      	adds	r1, r3, #1
 8002a5e:	0a55      	lsrs	r5, r2, #9
 8002a60:	4208      	tst	r0, r1
 8002a62:	d00c      	beq.n	8002a7e <__aeabi_f2d+0x2e>
 8002a64:	21e0      	movs	r1, #224	; 0xe0
 8002a66:	0089      	lsls	r1, r1, #2
 8002a68:	468c      	mov	ip, r1
 8002a6a:	076d      	lsls	r5, r5, #29
 8002a6c:	0b12      	lsrs	r2, r2, #12
 8002a6e:	4463      	add	r3, ip
 8002a70:	051b      	lsls	r3, r3, #20
 8002a72:	4313      	orrs	r3, r2
 8002a74:	07e4      	lsls	r4, r4, #31
 8002a76:	4323      	orrs	r3, r4
 8002a78:	0028      	movs	r0, r5
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	bd70      	pop	{r4, r5, r6, pc}
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d114      	bne.n	8002aac <__aeabi_f2d+0x5c>
 8002a82:	2d00      	cmp	r5, #0
 8002a84:	d01b      	beq.n	8002abe <__aeabi_f2d+0x6e>
 8002a86:	0028      	movs	r0, r5
 8002a88:	f000 f8b0 	bl	8002bec <__clzsi2>
 8002a8c:	280a      	cmp	r0, #10
 8002a8e:	dc1c      	bgt.n	8002aca <__aeabi_f2d+0x7a>
 8002a90:	230b      	movs	r3, #11
 8002a92:	002a      	movs	r2, r5
 8002a94:	1a1b      	subs	r3, r3, r0
 8002a96:	40da      	lsrs	r2, r3
 8002a98:	0003      	movs	r3, r0
 8002a9a:	3315      	adds	r3, #21
 8002a9c:	409d      	lsls	r5, r3
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <__aeabi_f2d+0x88>)
 8002aa0:	0312      	lsls	r2, r2, #12
 8002aa2:	1a1b      	subs	r3, r3, r0
 8002aa4:	055b      	lsls	r3, r3, #21
 8002aa6:	0b12      	lsrs	r2, r2, #12
 8002aa8:	0d5b      	lsrs	r3, r3, #21
 8002aaa:	e7e1      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002aac:	2d00      	cmp	r5, #0
 8002aae:	d009      	beq.n	8002ac4 <__aeabi_f2d+0x74>
 8002ab0:	0b13      	lsrs	r3, r2, #12
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	0312      	lsls	r2, r2, #12
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	076d      	lsls	r5, r5, #29
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <__aeabi_f2d+0x8c>)
 8002abc:	e7d8      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	e7d5      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <__aeabi_f2d+0x8c>)
 8002ac8:	e7d2      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002aca:	0003      	movs	r3, r0
 8002acc:	002a      	movs	r2, r5
 8002ace:	3b0b      	subs	r3, #11
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	2500      	movs	r5, #0
 8002ad4:	e7e3      	b.n	8002a9e <__aeabi_f2d+0x4e>
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	00000389 	.word	0x00000389
 8002adc:	000007ff 	.word	0x000007ff

08002ae0 <__aeabi_d2f>:
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae4:	004b      	lsls	r3, r1, #1
 8002ae6:	030d      	lsls	r5, r1, #12
 8002ae8:	0f40      	lsrs	r0, r0, #29
 8002aea:	0d5b      	lsrs	r3, r3, #21
 8002aec:	0fcc      	lsrs	r4, r1, #31
 8002aee:	0a6d      	lsrs	r5, r5, #9
 8002af0:	493a      	ldr	r1, [pc, #232]	; (8002bdc <__aeabi_d2f+0xfc>)
 8002af2:	4305      	orrs	r5, r0
 8002af4:	1c58      	adds	r0, r3, #1
 8002af6:	00d7      	lsls	r7, r2, #3
 8002af8:	4208      	tst	r0, r1
 8002afa:	d00a      	beq.n	8002b12 <__aeabi_d2f+0x32>
 8002afc:	4938      	ldr	r1, [pc, #224]	; (8002be0 <__aeabi_d2f+0x100>)
 8002afe:	1859      	adds	r1, r3, r1
 8002b00:	29fe      	cmp	r1, #254	; 0xfe
 8002b02:	dd16      	ble.n	8002b32 <__aeabi_d2f+0x52>
 8002b04:	20ff      	movs	r0, #255	; 0xff
 8002b06:	2200      	movs	r2, #0
 8002b08:	05c0      	lsls	r0, r0, #23
 8002b0a:	4310      	orrs	r0, r2
 8002b0c:	07e4      	lsls	r4, r4, #31
 8002b0e:	4320      	orrs	r0, r4
 8002b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <__aeabi_d2f+0x44>
 8002b16:	433d      	orrs	r5, r7
 8002b18:	d026      	beq.n	8002b68 <__aeabi_d2f+0x88>
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	0192      	lsls	r2, r2, #6
 8002b1e:	0a52      	lsrs	r2, r2, #9
 8002b20:	b2d8      	uxtb	r0, r3
 8002b22:	e7f1      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b24:	432f      	orrs	r7, r5
 8002b26:	d0ed      	beq.n	8002b04 <__aeabi_d2f+0x24>
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	03d2      	lsls	r2, r2, #15
 8002b2c:	20ff      	movs	r0, #255	; 0xff
 8002b2e:	432a      	orrs	r2, r5
 8002b30:	e7ea      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b32:	2900      	cmp	r1, #0
 8002b34:	dd1b      	ble.n	8002b6e <__aeabi_d2f+0x8e>
 8002b36:	0192      	lsls	r2, r2, #6
 8002b38:	1e50      	subs	r0, r2, #1
 8002b3a:	4182      	sbcs	r2, r0
 8002b3c:	00ed      	lsls	r5, r5, #3
 8002b3e:	0f7f      	lsrs	r7, r7, #29
 8002b40:	432a      	orrs	r2, r5
 8002b42:	433a      	orrs	r2, r7
 8002b44:	0753      	lsls	r3, r2, #29
 8002b46:	d047      	beq.n	8002bd8 <__aeabi_d2f+0xf8>
 8002b48:	230f      	movs	r3, #15
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d000      	beq.n	8002b52 <__aeabi_d2f+0x72>
 8002b50:	3204      	adds	r2, #4
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	04db      	lsls	r3, r3, #19
 8002b56:	4013      	ands	r3, r2
 8002b58:	d03e      	beq.n	8002bd8 <__aeabi_d2f+0xf8>
 8002b5a:	1c48      	adds	r0, r1, #1
 8002b5c:	29fe      	cmp	r1, #254	; 0xfe
 8002b5e:	d0d1      	beq.n	8002b04 <__aeabi_d2f+0x24>
 8002b60:	0192      	lsls	r2, r2, #6
 8002b62:	0a52      	lsrs	r2, r2, #9
 8002b64:	b2c0      	uxtb	r0, r0
 8002b66:	e7cf      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b68:	2000      	movs	r0, #0
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	e7cc      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b6e:	000a      	movs	r2, r1
 8002b70:	3217      	adds	r2, #23
 8002b72:	db2f      	blt.n	8002bd4 <__aeabi_d2f+0xf4>
 8002b74:	2680      	movs	r6, #128	; 0x80
 8002b76:	0436      	lsls	r6, r6, #16
 8002b78:	432e      	orrs	r6, r5
 8002b7a:	251e      	movs	r5, #30
 8002b7c:	1a6d      	subs	r5, r5, r1
 8002b7e:	2d1f      	cmp	r5, #31
 8002b80:	dd11      	ble.n	8002ba6 <__aeabi_d2f+0xc6>
 8002b82:	2202      	movs	r2, #2
 8002b84:	4252      	negs	r2, r2
 8002b86:	1a52      	subs	r2, r2, r1
 8002b88:	0031      	movs	r1, r6
 8002b8a:	40d1      	lsrs	r1, r2
 8002b8c:	2d20      	cmp	r5, #32
 8002b8e:	d004      	beq.n	8002b9a <__aeabi_d2f+0xba>
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <__aeabi_d2f+0x104>)
 8002b92:	4694      	mov	ip, r2
 8002b94:	4463      	add	r3, ip
 8002b96:	409e      	lsls	r6, r3
 8002b98:	4337      	orrs	r7, r6
 8002b9a:	003a      	movs	r2, r7
 8002b9c:	1e53      	subs	r3, r2, #1
 8002b9e:	419a      	sbcs	r2, r3
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	e7ce      	b.n	8002b44 <__aeabi_d2f+0x64>
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <__aeabi_d2f+0x108>)
 8002ba8:	0038      	movs	r0, r7
 8002baa:	4694      	mov	ip, r2
 8002bac:	4463      	add	r3, ip
 8002bae:	4098      	lsls	r0, r3
 8002bb0:	003a      	movs	r2, r7
 8002bb2:	1e41      	subs	r1, r0, #1
 8002bb4:	4188      	sbcs	r0, r1
 8002bb6:	409e      	lsls	r6, r3
 8002bb8:	40ea      	lsrs	r2, r5
 8002bba:	4330      	orrs	r0, r6
 8002bbc:	4302      	orrs	r2, r0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	0753      	lsls	r3, r2, #29
 8002bc2:	d1c1      	bne.n	8002b48 <__aeabi_d2f+0x68>
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	04c9      	lsls	r1, r1, #19
 8002bca:	2001      	movs	r0, #1
 8002bcc:	400b      	ands	r3, r1
 8002bce:	420a      	tst	r2, r1
 8002bd0:	d1c6      	bne.n	8002b60 <__aeabi_d2f+0x80>
 8002bd2:	e7a3      	b.n	8002b1c <__aeabi_d2f+0x3c>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e7a0      	b.n	8002b1a <__aeabi_d2f+0x3a>
 8002bd8:	000b      	movs	r3, r1
 8002bda:	e79f      	b.n	8002b1c <__aeabi_d2f+0x3c>
 8002bdc:	000007fe 	.word	0x000007fe
 8002be0:	fffffc80 	.word	0xfffffc80
 8002be4:	fffffca2 	.word	0xfffffca2
 8002be8:	fffffc82 	.word	0xfffffc82

08002bec <__clzsi2>:
 8002bec:	211c      	movs	r1, #28
 8002bee:	2301      	movs	r3, #1
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	4298      	cmp	r0, r3
 8002bf4:	d301      	bcc.n	8002bfa <__clzsi2+0xe>
 8002bf6:	0c00      	lsrs	r0, r0, #16
 8002bf8:	3910      	subs	r1, #16
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	4298      	cmp	r0, r3
 8002bfe:	d301      	bcc.n	8002c04 <__clzsi2+0x18>
 8002c00:	0a00      	lsrs	r0, r0, #8
 8002c02:	3908      	subs	r1, #8
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	4298      	cmp	r0, r3
 8002c08:	d301      	bcc.n	8002c0e <__clzsi2+0x22>
 8002c0a:	0900      	lsrs	r0, r0, #4
 8002c0c:	3904      	subs	r1, #4
 8002c0e:	a202      	add	r2, pc, #8	; (adr r2, 8002c18 <__clzsi2+0x2c>)
 8002c10:	5c10      	ldrb	r0, [r2, r0]
 8002c12:	1840      	adds	r0, r0, r1
 8002c14:	4770      	bx	lr
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	02020304 	.word	0x02020304
 8002c1c:	01010101 	.word	0x01010101
	...

08002c28 <__clzdi2>:
 8002c28:	b510      	push	{r4, lr}
 8002c2a:	2900      	cmp	r1, #0
 8002c2c:	d103      	bne.n	8002c36 <__clzdi2+0xe>
 8002c2e:	f7ff ffdd 	bl	8002bec <__clzsi2>
 8002c32:	3020      	adds	r0, #32
 8002c34:	e002      	b.n	8002c3c <__clzdi2+0x14>
 8002c36:	0008      	movs	r0, r1
 8002c38:	f7ff ffd8 	bl	8002bec <__clzsi2>
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)

08002c40 <SELECT>:
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	23a0      	movs	r3, #160	; 0xa0
 8002c46:	05db      	lsls	r3, r3, #23
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2110      	movs	r1, #16
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f002 fc12 	bl	8005476 <HAL_GPIO_WritePin>
 8002c52:	2001      	movs	r0, #1
 8002c54:	f001 fd48 	bl	80046e8 <HAL_Delay>
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <DESELECT>:
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	23a0      	movs	r3, #160	; 0xa0
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	2201      	movs	r2, #1
 8002c68:	2110      	movs	r1, #16
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f002 fc03 	bl	8005476 <HAL_GPIO_WritePin>
 8002c70:	2001      	movs	r0, #1
 8002c72:	f001 fd39 	bl	80046e8 <HAL_Delay>
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <SPI_TxByte>:
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	0002      	movs	r2, r0
 8002c84:	1dfb      	adds	r3, r7, #7
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <SPI_TxByte+0x30>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2202      	movs	r2, #2
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d1f8      	bne.n	8002c8a <SPI_TxByte+0xe>
 8002c98:	1df9      	adds	r1, r7, #7
 8002c9a:	4804      	ldr	r0, [pc, #16]	; (8002cac <SPI_TxByte+0x30>)
 8002c9c:	2364      	movs	r3, #100	; 0x64
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f003 f9f9 	bl	8006096 <HAL_SPI_Transmit>
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2000026c 	.word	0x2000026c

08002cb0 <SPI_TxBuffer>:
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	000a      	movs	r2, r1
 8002cba:	1cbb      	adds	r3, r7, #2
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <SPI_TxBuffer+0x34>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d1f8      	bne.n	8002cc0 <SPI_TxBuffer+0x10>
 8002cce:	1cbb      	adds	r3, r7, #2
 8002cd0:	881a      	ldrh	r2, [r3, #0]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4803      	ldr	r0, [pc, #12]	; (8002ce4 <SPI_TxBuffer+0x34>)
 8002cd6:	2364      	movs	r3, #100	; 0x64
 8002cd8:	f003 f9dd 	bl	8006096 <HAL_SPI_Transmit>
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	2000026c 	.word	0x2000026c

08002ce8 <SPI_RxByte>:
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	1dfb      	adds	r3, r7, #7
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <SPI_RxByte+0x38>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d1f8      	bne.n	8002cf6 <SPI_RxByte+0xe>
 8002d04:	1dba      	adds	r2, r7, #6
 8002d06:	1df9      	adds	r1, r7, #7
 8002d08:	4805      	ldr	r0, [pc, #20]	; (8002d20 <SPI_RxByte+0x38>)
 8002d0a:	2364      	movs	r3, #100	; 0x64
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f003 fb1e 	bl	8006350 <HAL_SPI_TransmitReceive>
 8002d14:	1dbb      	adds	r3, r7, #6
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	2000026c 	.word	0x2000026c

08002d24 <SPI_RxBytePtr>:
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	f7ff ffdc 	bl	8002ce8 <SPI_RxByte>
 8002d30:	0003      	movs	r3, r0
 8002d32:	001a      	movs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <SD_ReadyWait>:
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <SD_ReadyWait+0x34>)
 8002d48:	22fa      	movs	r2, #250	; 0xfa
 8002d4a:	0052      	lsls	r2, r2, #1
 8002d4c:	801a      	strh	r2, [r3, #0]
 8002d4e:	1dfc      	adds	r4, r7, #7
 8002d50:	f7ff ffca 	bl	8002ce8 <SPI_RxByte>
 8002d54:	0003      	movs	r3, r0
 8002d56:	7023      	strb	r3, [r4, #0]
 8002d58:	1dfb      	adds	r3, r7, #7
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2bff      	cmp	r3, #255	; 0xff
 8002d5e:	d003      	beq.n	8002d68 <SD_ReadyWait+0x28>
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <SD_ReadyWait+0x34>)
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f2      	bne.n	8002d4e <SD_ReadyWait+0xe>
 8002d68:	1dfb      	adds	r3, r7, #7
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b003      	add	sp, #12
 8002d72:	bd90      	pop	{r4, r7, pc}
 8002d74:	2000020a 	.word	0x2000020a

08002d78 <SD_PowerOn>:
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <SD_PowerOn+0x88>)
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	f7ff ff6c 	bl	8002c5e <DESELECT>
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	e005      	b.n	8002d98 <SD_PowerOn+0x20>
 8002d8c:	20ff      	movs	r0, #255	; 0xff
 8002d8e:	f7ff ff75 	bl	8002c7c <SPI_TxByte>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3301      	adds	r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b09      	cmp	r3, #9
 8002d9c:	ddf6      	ble.n	8002d8c <SD_PowerOn+0x14>
 8002d9e:	f7ff ff4f 	bl	8002c40 <SELECT>
 8002da2:	003b      	movs	r3, r7
 8002da4:	2240      	movs	r2, #64	; 0x40
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	003b      	movs	r3, r7
 8002daa:	2200      	movs	r2, #0
 8002dac:	705a      	strb	r2, [r3, #1]
 8002dae:	003b      	movs	r3, r7
 8002db0:	2200      	movs	r2, #0
 8002db2:	709a      	strb	r2, [r3, #2]
 8002db4:	003b      	movs	r3, r7
 8002db6:	2200      	movs	r2, #0
 8002db8:	70da      	strb	r2, [r3, #3]
 8002dba:	003b      	movs	r3, r7
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	711a      	strb	r2, [r3, #4]
 8002dc0:	003b      	movs	r3, r7
 8002dc2:	2295      	movs	r2, #149	; 0x95
 8002dc4:	715a      	strb	r2, [r3, #5]
 8002dc6:	003b      	movs	r3, r7
 8002dc8:	2106      	movs	r1, #6
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7ff ff70 	bl	8002cb0 <SPI_TxBuffer>
 8002dd0:	e002      	b.n	8002dd8 <SD_PowerOn+0x60>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	f7ff ff86 	bl	8002ce8 <SPI_RxByte>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d002      	beq.n	8002de8 <SD_PowerOn+0x70>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f4      	bne.n	8002dd2 <SD_PowerOn+0x5a>
 8002de8:	f7ff ff39 	bl	8002c5e <DESELECT>
 8002dec:	20ff      	movs	r0, #255	; 0xff
 8002dee:	f7ff ff45 	bl	8002c7c <SPI_TxByte>
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <SD_PowerOn+0x8c>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b004      	add	sp, #16
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00001fff 	.word	0x00001fff
 8002e04:	2000020d 	.word	0x2000020d

08002e08 <SD_PowerOff>:
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <SD_PowerOff+0x10>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	2000020d 	.word	0x2000020d

08002e1c <SD_CheckPower>:
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4b02      	ldr	r3, [pc, #8]	; (8002e2c <SD_CheckPower+0x10>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	2000020d 	.word	0x2000020d

08002e30 <SD_RxDataBlock>:
 8002e30:	b5b0      	push	{r4, r5, r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <SD_RxDataBlock+0x64>)
 8002e3c:	22c8      	movs	r2, #200	; 0xc8
 8002e3e:	801a      	strh	r2, [r3, #0]
 8002e40:	250f      	movs	r5, #15
 8002e42:	197c      	adds	r4, r7, r5
 8002e44:	f7ff ff50 	bl	8002ce8 <SPI_RxByte>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	7023      	strb	r3, [r4, #0]
 8002e4c:	197b      	adds	r3, r7, r5
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2bff      	cmp	r3, #255	; 0xff
 8002e52:	d103      	bne.n	8002e5c <SD_RxDataBlock+0x2c>
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <SD_RxDataBlock+0x64>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f1      	bne.n	8002e40 <SD_RxDataBlock+0x10>
 8002e5c:	230f      	movs	r3, #15
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2bfe      	cmp	r3, #254	; 0xfe
 8002e64:	d001      	beq.n	8002e6a <SD_RxDataBlock+0x3a>
 8002e66:	2300      	movs	r3, #0
 8002e68:	e00f      	b.n	8002e8a <SD_RxDataBlock+0x5a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7ff ff57 	bl	8002d24 <SPI_RxBytePtr>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	603a      	str	r2, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f4      	bne.n	8002e6a <SD_RxDataBlock+0x3a>
 8002e80:	f7ff ff32 	bl	8002ce8 <SPI_RxByte>
 8002e84:	f7ff ff30 	bl	8002ce8 <SPI_RxByte>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b004      	add	sp, #16
 8002e90:	bdb0      	pop	{r4, r5, r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	20000208 	.word	0x20000208

08002e98 <SD_TxDataBlock>:
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	000a      	movs	r2, r1
 8002ea2:	1cfb      	adds	r3, r7, #3
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	230e      	movs	r3, #14
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	f7ff ff47 	bl	8002d40 <SD_ReadyWait>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	2bff      	cmp	r3, #255	; 0xff
 8002eb6:	d001      	beq.n	8002ebc <SD_TxDataBlock+0x24>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e03c      	b.n	8002f36 <SD_TxDataBlock+0x9e>
 8002ebc:	1cfb      	adds	r3, r7, #3
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7ff fedb 	bl	8002c7c <SPI_TxByte>
 8002ec6:	1cfb      	adds	r3, r7, #3
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2bfd      	cmp	r3, #253	; 0xfd
 8002ecc:	d029      	beq.n	8002f22 <SD_TxDataBlock+0x8a>
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	009a      	lsls	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0011      	movs	r1, r2
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff feea 	bl	8002cb0 <SPI_TxBuffer>
 8002edc:	f7ff ff04 	bl	8002ce8 <SPI_RxByte>
 8002ee0:	f7ff ff02 	bl	8002ce8 <SPI_RxByte>
 8002ee4:	e011      	b.n	8002f0a <SD_TxDataBlock+0x72>
 8002ee6:	250f      	movs	r5, #15
 8002ee8:	197c      	adds	r4, r7, r5
 8002eea:	f7ff fefd 	bl	8002ce8 <SPI_RxByte>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	7023      	strb	r3, [r4, #0]
 8002ef2:	197b      	adds	r3, r7, r5
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	221f      	movs	r2, #31
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b05      	cmp	r3, #5
 8002efc:	d00b      	beq.n	8002f16 <SD_TxDataBlock+0x7e>
 8002efe:	210e      	movs	r1, #14
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	3201      	adds	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	230e      	movs	r3, #14
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d9e8      	bls.n	8002ee6 <SD_TxDataBlock+0x4e>
 8002f14:	e000      	b.n	8002f18 <SD_TxDataBlock+0x80>
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	f7ff fee5 	bl	8002ce8 <SPI_RxByte>
 8002f1e:	1e03      	subs	r3, r0, #0
 8002f20:	d0fb      	beq.n	8002f1a <SD_TxDataBlock+0x82>
 8002f22:	230f      	movs	r3, #15
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	221f      	movs	r2, #31
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d101      	bne.n	8002f34 <SD_TxDataBlock+0x9c>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <SD_TxDataBlock+0x9e>
 8002f34:	2300      	movs	r3, #0
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b004      	add	sp, #16
 8002f3c:	bdb0      	pop	{r4, r5, r7, pc}

08002f3e <SD_SendCmd>:
 8002f3e:	b5b0      	push	{r4, r5, r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	0002      	movs	r2, r0
 8002f46:	6039      	str	r1, [r7, #0]
 8002f48:	1dfb      	adds	r3, r7, #7
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	f7ff fef8 	bl	8002d40 <SD_ReadyWait>
 8002f50:	0003      	movs	r3, r0
 8002f52:	2bff      	cmp	r3, #255	; 0xff
 8002f54:	d001      	beq.n	8002f5a <SD_SendCmd+0x1c>
 8002f56:	23ff      	movs	r3, #255	; 0xff
 8002f58:	e059      	b.n	800300e <SD_SendCmd+0xd0>
 8002f5a:	1dfb      	adds	r3, r7, #7
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7ff fe8c 	bl	8002c7c <SPI_TxByte>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	0e1b      	lsrs	r3, r3, #24
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff fe86 	bl	8002c7c <SPI_TxByte>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff fe80 	bl	8002c7c <SPI_TxByte>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff fe7a 	bl	8002c7c <SPI_TxByte>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7ff fe75 	bl	8002c7c <SPI_TxByte>
 8002f92:	1dfb      	adds	r3, r7, #7
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d104      	bne.n	8002fa4 <SD_SendCmd+0x66>
 8002f9a:	230f      	movs	r3, #15
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	2295      	movs	r2, #149	; 0x95
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e00c      	b.n	8002fbe <SD_SendCmd+0x80>
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b48      	cmp	r3, #72	; 0x48
 8002faa:	d104      	bne.n	8002fb6 <SD_SendCmd+0x78>
 8002fac:	230f      	movs	r3, #15
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2287      	movs	r2, #135	; 0x87
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e003      	b.n	8002fbe <SD_SendCmd+0x80>
 8002fb6:	230f      	movs	r3, #15
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	230f      	movs	r3, #15
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7ff fe59 	bl	8002c7c <SPI_TxByte>
 8002fca:	1dfb      	adds	r3, r7, #7
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b4c      	cmp	r3, #76	; 0x4c
 8002fd0:	d101      	bne.n	8002fd6 <SD_SendCmd+0x98>
 8002fd2:	f7ff fe89 	bl	8002ce8 <SPI_RxByte>
 8002fd6:	230e      	movs	r3, #14
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	220a      	movs	r2, #10
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	250d      	movs	r5, #13
 8002fe0:	197c      	adds	r4, r7, r5
 8002fe2:	f7ff fe81 	bl	8002ce8 <SPI_RxByte>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	7023      	strb	r3, [r4, #0]
 8002fea:	197b      	adds	r3, r7, r5
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b25b      	sxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da09      	bge.n	8003008 <SD_SendCmd+0xca>
 8002ff4:	210e      	movs	r1, #14
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	187a      	adds	r2, r7, r1
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	3a01      	subs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	187b      	adds	r3, r7, r1
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ea      	bne.n	8002fde <SD_SendCmd+0xa0>
 8003008:	230d      	movs	r3, #13
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b004      	add	sp, #16
 8003014:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003018 <SD_disk_initialize>:
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	0002      	movs	r2, r0
 8003020:	1dfb      	adds	r3, r7, #7
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	1dfb      	adds	r3, r7, #7
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <SD_disk_initialize+0x18>
 800302c:	2301      	movs	r3, #1
 800302e:	e0f2      	b.n	8003216 <SD_disk_initialize+0x1fe>
 8003030:	4b7b      	ldr	r3, [pc, #492]	; (8003220 <SD_disk_initialize+0x208>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	001a      	movs	r2, r3
 8003038:	2302      	movs	r3, #2
 800303a:	4013      	ands	r3, r2
 800303c:	d003      	beq.n	8003046 <SD_disk_initialize+0x2e>
 800303e:	4b78      	ldr	r3, [pc, #480]	; (8003220 <SD_disk_initialize+0x208>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e0e7      	b.n	8003216 <SD_disk_initialize+0x1fe>
 8003046:	f7ff fe97 	bl	8002d78 <SD_PowerOn>
 800304a:	f7ff fdf9 	bl	8002c40 <SELECT>
 800304e:	230e      	movs	r3, #14
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	2100      	movs	r1, #0
 8003058:	2040      	movs	r0, #64	; 0x40
 800305a:	f7ff ff70 	bl	8002f3e <SD_SendCmd>
 800305e:	0003      	movs	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	d000      	beq.n	8003066 <SD_disk_initialize+0x4e>
 8003064:	e0bc      	b.n	80031e0 <SD_disk_initialize+0x1c8>
 8003066:	4b6f      	ldr	r3, [pc, #444]	; (8003224 <SD_disk_initialize+0x20c>)
 8003068:	22fa      	movs	r2, #250	; 0xfa
 800306a:	0092      	lsls	r2, r2, #2
 800306c:	801a      	strh	r2, [r3, #0]
 800306e:	23d5      	movs	r3, #213	; 0xd5
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	0019      	movs	r1, r3
 8003074:	2048      	movs	r0, #72	; 0x48
 8003076:	f7ff ff62 	bl	8002f3e <SD_SendCmd>
 800307a:	0003      	movs	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d000      	beq.n	8003082 <SD_disk_initialize+0x6a>
 8003080:	e06b      	b.n	800315a <SD_disk_initialize+0x142>
 8003082:	230f      	movs	r3, #15
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e00e      	b.n	80030aa <SD_disk_initialize+0x92>
 800308c:	250f      	movs	r5, #15
 800308e:	197b      	adds	r3, r7, r5
 8003090:	781c      	ldrb	r4, [r3, #0]
 8003092:	f7ff fe29 	bl	8002ce8 <SPI_RxByte>
 8003096:	0003      	movs	r3, r0
 8003098:	001a      	movs	r2, r3
 800309a:	2308      	movs	r3, #8
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	551a      	strb	r2, [r3, r4]
 80030a0:	197b      	adds	r3, r7, r5
 80030a2:	781a      	ldrb	r2, [r3, #0]
 80030a4:	197b      	adds	r3, r7, r5
 80030a6:	3201      	adds	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	230f      	movs	r3, #15
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d9eb      	bls.n	800308c <SD_disk_initialize+0x74>
 80030b4:	2208      	movs	r2, #8
 80030b6:	18bb      	adds	r3, r7, r2
 80030b8:	789b      	ldrb	r3, [r3, #2]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d000      	beq.n	80030c0 <SD_disk_initialize+0xa8>
 80030be:	e08f      	b.n	80031e0 <SD_disk_initialize+0x1c8>
 80030c0:	18bb      	adds	r3, r7, r2
 80030c2:	78db      	ldrb	r3, [r3, #3]
 80030c4:	2baa      	cmp	r3, #170	; 0xaa
 80030c6:	d000      	beq.n	80030ca <SD_disk_initialize+0xb2>
 80030c8:	e08a      	b.n	80031e0 <SD_disk_initialize+0x1c8>
 80030ca:	2100      	movs	r1, #0
 80030cc:	2077      	movs	r0, #119	; 0x77
 80030ce:	f7ff ff36 	bl	8002f3e <SD_SendCmd>
 80030d2:	0003      	movs	r3, r0
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d807      	bhi.n	80030e8 <SD_disk_initialize+0xd0>
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	05db      	lsls	r3, r3, #23
 80030dc:	0019      	movs	r1, r3
 80030de:	2069      	movs	r0, #105	; 0x69
 80030e0:	f7ff ff2d 	bl	8002f3e <SD_SendCmd>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d004      	beq.n	80030f2 <SD_disk_initialize+0xda>
 80030e8:	4b4e      	ldr	r3, [pc, #312]	; (8003224 <SD_disk_initialize+0x20c>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ec      	bne.n	80030ca <SD_disk_initialize+0xb2>
 80030f0:	e000      	b.n	80030f4 <SD_disk_initialize+0xdc>
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	4b4b      	ldr	r3, [pc, #300]	; (8003224 <SD_disk_initialize+0x20c>)
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d100      	bne.n	80030fe <SD_disk_initialize+0xe6>
 80030fc:	e070      	b.n	80031e0 <SD_disk_initialize+0x1c8>
 80030fe:	2100      	movs	r1, #0
 8003100:	207a      	movs	r0, #122	; 0x7a
 8003102:	f7ff ff1c 	bl	8002f3e <SD_SendCmd>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d000      	beq.n	800310c <SD_disk_initialize+0xf4>
 800310a:	e069      	b.n	80031e0 <SD_disk_initialize+0x1c8>
 800310c:	230f      	movs	r3, #15
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e00e      	b.n	8003134 <SD_disk_initialize+0x11c>
 8003116:	250f      	movs	r5, #15
 8003118:	197b      	adds	r3, r7, r5
 800311a:	781c      	ldrb	r4, [r3, #0]
 800311c:	f7ff fde4 	bl	8002ce8 <SPI_RxByte>
 8003120:	0003      	movs	r3, r0
 8003122:	001a      	movs	r2, r3
 8003124:	2308      	movs	r3, #8
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	551a      	strb	r2, [r3, r4]
 800312a:	197b      	adds	r3, r7, r5
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	197b      	adds	r3, r7, r5
 8003130:	3201      	adds	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	230f      	movs	r3, #15
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d9eb      	bls.n	8003116 <SD_disk_initialize+0xfe>
 800313e:	2308      	movs	r3, #8
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	001a      	movs	r2, r3
 8003146:	2340      	movs	r3, #64	; 0x40
 8003148:	4013      	ands	r3, r2
 800314a:	d001      	beq.n	8003150 <SD_disk_initialize+0x138>
 800314c:	220c      	movs	r2, #12
 800314e:	e000      	b.n	8003152 <SD_disk_initialize+0x13a>
 8003150:	2204      	movs	r2, #4
 8003152:	230e      	movs	r3, #14
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e042      	b.n	80031e0 <SD_disk_initialize+0x1c8>
 800315a:	2100      	movs	r1, #0
 800315c:	2077      	movs	r0, #119	; 0x77
 800315e:	f7ff feee 	bl	8002f3e <SD_SendCmd>
 8003162:	0003      	movs	r3, r0
 8003164:	2b01      	cmp	r3, #1
 8003166:	d808      	bhi.n	800317a <SD_disk_initialize+0x162>
 8003168:	2100      	movs	r1, #0
 800316a:	2069      	movs	r0, #105	; 0x69
 800316c:	f7ff fee7 	bl	8002f3e <SD_SendCmd>
 8003170:	0003      	movs	r3, r0
 8003172:	2b01      	cmp	r3, #1
 8003174:	d801      	bhi.n	800317a <SD_disk_initialize+0x162>
 8003176:	2202      	movs	r2, #2
 8003178:	e000      	b.n	800317c <SD_disk_initialize+0x164>
 800317a:	2201      	movs	r2, #1
 800317c:	230e      	movs	r3, #14
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	230e      	movs	r3, #14
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d10d      	bne.n	80031a8 <SD_disk_initialize+0x190>
 800318c:	2100      	movs	r1, #0
 800318e:	2077      	movs	r0, #119	; 0x77
 8003190:	f7ff fed5 	bl	8002f3e <SD_SendCmd>
 8003194:	0003      	movs	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d80c      	bhi.n	80031b4 <SD_disk_initialize+0x19c>
 800319a:	2100      	movs	r1, #0
 800319c:	2069      	movs	r0, #105	; 0x69
 800319e:	f7ff fece 	bl	8002f3e <SD_SendCmd>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d106      	bne.n	80031b4 <SD_disk_initialize+0x19c>
 80031a6:	e00b      	b.n	80031c0 <SD_disk_initialize+0x1a8>
 80031a8:	2100      	movs	r1, #0
 80031aa:	2041      	movs	r0, #65	; 0x41
 80031ac:	f7ff fec7 	bl	8002f3e <SD_SendCmd>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d004      	beq.n	80031be <SD_disk_initialize+0x1a6>
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <SD_disk_initialize+0x20c>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e2      	bne.n	8003182 <SD_disk_initialize+0x16a>
 80031bc:	e000      	b.n	80031c0 <SD_disk_initialize+0x1a8>
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	4b18      	ldr	r3, [pc, #96]	; (8003224 <SD_disk_initialize+0x20c>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <SD_disk_initialize+0x1c0>
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	0019      	movs	r1, r3
 80031ce:	2050      	movs	r0, #80	; 0x50
 80031d0:	f7ff feb5 	bl	8002f3e <SD_SendCmd>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d003      	beq.n	80031e0 <SD_disk_initialize+0x1c8>
 80031d8:	230e      	movs	r3, #14
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <SD_disk_initialize+0x210>)
 80031e2:	240e      	movs	r4, #14
 80031e4:	193a      	adds	r2, r7, r4
 80031e6:	7812      	ldrb	r2, [r2, #0]
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	f7ff fd38 	bl	8002c5e <DESELECT>
 80031ee:	f7ff fd7b 	bl	8002ce8 <SPI_RxByte>
 80031f2:	193b      	adds	r3, r7, r4
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <SD_disk_initialize+0x1f4>
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <SD_disk_initialize+0x208>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2201      	movs	r2, #1
 8003202:	4393      	bics	r3, r2
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <SD_disk_initialize+0x208>)
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e001      	b.n	8003210 <SD_disk_initialize+0x1f8>
 800320c:	f7ff fdfc 	bl	8002e08 <SD_PowerOff>
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <SD_disk_initialize+0x208>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bdb0      	pop	{r4, r5, r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	20000000 	.word	0x20000000
 8003224:	20000208 	.word	0x20000208
 8003228:	2000020c 	.word	0x2000020c

0800322c <SD_disk_status>:
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	0002      	movs	r2, r0
 8003234:	1dfb      	adds	r3, r7, #7
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	1dfb      	adds	r3, r7, #7
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <SD_disk_status+0x18>
 8003240:	2301      	movs	r3, #1
 8003242:	e002      	b.n	800324a <SD_disk_status+0x1e>
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <SD_disk_status+0x28>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b002      	add	sp, #8
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	20000000 	.word	0x20000000

08003258 <SD_disk_read>:
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	210f      	movs	r1, #15
 8003266:	187b      	adds	r3, r7, r1
 8003268:	1c02      	adds	r2, r0, #0
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	187b      	adds	r3, r7, r1
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <SD_disk_read+0x22>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <SD_disk_read+0x26>
 800327a:	2304      	movs	r3, #4
 800327c:	e053      	b.n	8003326 <SD_disk_read+0xce>
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <SD_disk_read+0xd8>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	001a      	movs	r2, r3
 8003286:	2301      	movs	r3, #1
 8003288:	4013      	ands	r3, r2
 800328a:	d001      	beq.n	8003290 <SD_disk_read+0x38>
 800328c:	2303      	movs	r3, #3
 800328e:	e04a      	b.n	8003326 <SD_disk_read+0xce>
 8003290:	4b28      	ldr	r3, [pc, #160]	; (8003334 <SD_disk_read+0xdc>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	001a      	movs	r2, r3
 8003296:	2304      	movs	r3, #4
 8003298:	4013      	ands	r3, r2
 800329a:	d102      	bne.n	80032a2 <SD_disk_read+0x4a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	025b      	lsls	r3, r3, #9
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	f7ff fccd 	bl	8002c40 <SELECT>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d112      	bne.n	80032d2 <SD_disk_read+0x7a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	0019      	movs	r1, r3
 80032b0:	2051      	movs	r0, #81	; 0x51
 80032b2:	f7ff fe44 	bl	8002f3e <SD_SendCmd>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d12d      	bne.n	8003316 <SD_disk_read+0xbe>
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	009a      	lsls	r2, r3, #2
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	0011      	movs	r1, r2
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff fdb4 	bl	8002e30 <SD_RxDataBlock>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d024      	beq.n	8003316 <SD_disk_read+0xbe>
 80032cc:	2300      	movs	r3, #0
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	e021      	b.n	8003316 <SD_disk_read+0xbe>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	0019      	movs	r1, r3
 80032d6:	2052      	movs	r0, #82	; 0x52
 80032d8:	f7ff fe31 	bl	8002f3e <SD_SendCmd>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d11a      	bne.n	8003316 <SD_disk_read+0xbe>
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	009a      	lsls	r2, r3, #2
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fda1 	bl	8002e30 <SD_RxDataBlock>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d00c      	beq.n	800330c <SD_disk_read+0xb4>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	4694      	mov	ip, r2
 80032fa:	4463      	add	r3, ip
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	3b01      	subs	r3, #1
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ea      	bne.n	80032e0 <SD_disk_read+0x88>
 800330a:	e000      	b.n	800330e <SD_disk_read+0xb6>
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	2100      	movs	r1, #0
 8003310:	204c      	movs	r0, #76	; 0x4c
 8003312:	f7ff fe14 	bl	8002f3e <SD_SendCmd>
 8003316:	f7ff fca2 	bl	8002c5e <DESELECT>
 800331a:	f7ff fce5 	bl	8002ce8 <SPI_RxByte>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	1e5a      	subs	r2, r3, #1
 8003322:	4193      	sbcs	r3, r2
 8003324:	b2db      	uxtb	r3, r3
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	20000000 	.word	0x20000000
 8003334:	2000020c 	.word	0x2000020c

08003338 <SD_disk_write>:
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	210f      	movs	r1, #15
 8003346:	187b      	adds	r3, r7, r1
 8003348:	1c02      	adds	r2, r0, #0
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	187b      	adds	r3, r7, r1
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <SD_disk_write+0x22>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <SD_disk_write+0x26>
 800335a:	2304      	movs	r3, #4
 800335c:	e06b      	b.n	8003436 <SD_disk_write+0xfe>
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <SD_disk_write+0x108>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	001a      	movs	r2, r3
 8003366:	2301      	movs	r3, #1
 8003368:	4013      	ands	r3, r2
 800336a:	d001      	beq.n	8003370 <SD_disk_write+0x38>
 800336c:	2303      	movs	r3, #3
 800336e:	e062      	b.n	8003436 <SD_disk_write+0xfe>
 8003370:	4b33      	ldr	r3, [pc, #204]	; (8003440 <SD_disk_write+0x108>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	001a      	movs	r2, r3
 8003378:	2304      	movs	r3, #4
 800337a:	4013      	ands	r3, r2
 800337c:	d001      	beq.n	8003382 <SD_disk_write+0x4a>
 800337e:	2302      	movs	r3, #2
 8003380:	e059      	b.n	8003436 <SD_disk_write+0xfe>
 8003382:	4b30      	ldr	r3, [pc, #192]	; (8003444 <SD_disk_write+0x10c>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	001a      	movs	r2, r3
 8003388:	2304      	movs	r3, #4
 800338a:	4013      	ands	r3, r2
 800338c:	d102      	bne.n	8003394 <SD_disk_write+0x5c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	025b      	lsls	r3, r3, #9
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	f7ff fc54 	bl	8002c40 <SELECT>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d110      	bne.n	80033c0 <SD_disk_write+0x88>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	0019      	movs	r1, r3
 80033a2:	2058      	movs	r0, #88	; 0x58
 80033a4:	f7ff fdcb 	bl	8002f3e <SD_SendCmd>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d13c      	bne.n	8003426 <SD_disk_write+0xee>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	21fe      	movs	r1, #254	; 0xfe
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff fd71 	bl	8002e98 <SD_TxDataBlock>
 80033b6:	1e03      	subs	r3, r0, #0
 80033b8:	d035      	beq.n	8003426 <SD_disk_write+0xee>
 80033ba:	2300      	movs	r3, #0
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	e032      	b.n	8003426 <SD_disk_write+0xee>
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <SD_disk_write+0x10c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	001a      	movs	r2, r3
 80033c6:	2302      	movs	r3, #2
 80033c8:	4013      	ands	r3, r2
 80033ca:	d008      	beq.n	80033de <SD_disk_write+0xa6>
 80033cc:	2100      	movs	r1, #0
 80033ce:	2077      	movs	r0, #119	; 0x77
 80033d0:	f7ff fdb5 	bl	8002f3e <SD_SendCmd>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	0019      	movs	r1, r3
 80033d8:	2057      	movs	r0, #87	; 0x57
 80033da:	f7ff fdb0 	bl	8002f3e <SD_SendCmd>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0019      	movs	r1, r3
 80033e2:	2059      	movs	r0, #89	; 0x59
 80033e4:	f7ff fdab 	bl	8002f3e <SD_SendCmd>
 80033e8:	1e03      	subs	r3, r0, #0
 80033ea:	d11c      	bne.n	8003426 <SD_disk_write+0xee>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	21fc      	movs	r1, #252	; 0xfc
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff fd51 	bl	8002e98 <SD_TxDataBlock>
 80033f6:	1e03      	subs	r3, r0, #0
 80033f8:	d00c      	beq.n	8003414 <SD_disk_write+0xdc>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	0092      	lsls	r2, r2, #2
 8003400:	4694      	mov	ip, r2
 8003402:	4463      	add	r3, ip
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ec      	bne.n	80033ec <SD_disk_write+0xb4>
 8003412:	e000      	b.n	8003416 <SD_disk_write+0xde>
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	21fd      	movs	r1, #253	; 0xfd
 8003418:	2000      	movs	r0, #0
 800341a:	f7ff fd3d 	bl	8002e98 <SD_TxDataBlock>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d101      	bne.n	8003426 <SD_disk_write+0xee>
 8003422:	2301      	movs	r3, #1
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	f7ff fc1a 	bl	8002c5e <DESELECT>
 800342a:	f7ff fc5d 	bl	8002ce8 <SPI_RxByte>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	1e5a      	subs	r2, r3, #1
 8003432:	4193      	sbcs	r3, r2
 8003434:	b2db      	uxtb	r3, r3
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b004      	add	sp, #16
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	20000000 	.word	0x20000000
 8003444:	2000020c 	.word	0x2000020c

08003448 <SD_disk_ioctl>:
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	603a      	str	r2, [r7, #0]
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	1c02      	adds	r2, r0, #0
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	1dbb      	adds	r3, r7, #6
 8003458:	1c0a      	adds	r2, r1, #0
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	1dfb      	adds	r3, r7, #7
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <SD_disk_ioctl+0x24>
 8003468:	2304      	movs	r3, #4
 800346a:	e11b      	b.n	80036a4 <SD_disk_ioctl+0x25c>
 800346c:	2327      	movs	r3, #39	; 0x27
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	1dbb      	adds	r3, r7, #6
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b05      	cmp	r3, #5
 800347a:	d127      	bne.n	80034cc <SD_disk_ioctl+0x84>
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d013      	beq.n	80034ac <SD_disk_ioctl+0x64>
 8003484:	dc1d      	bgt.n	80034c2 <SD_disk_ioctl+0x7a>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <SD_disk_ioctl+0x48>
 800348a:	2b01      	cmp	r3, #1
 800348c:	d007      	beq.n	800349e <SD_disk_ioctl+0x56>
 800348e:	e018      	b.n	80034c2 <SD_disk_ioctl+0x7a>
 8003490:	f7ff fcba 	bl	8002e08 <SD_PowerOff>
 8003494:	2327      	movs	r3, #39	; 0x27
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e0ff      	b.n	800369e <SD_disk_ioctl+0x256>
 800349e:	f7ff fc6b 	bl	8002d78 <SD_PowerOn>
 80034a2:	2327      	movs	r3, #39	; 0x27
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e0f8      	b.n	800369e <SD_disk_ioctl+0x256>
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	1c5c      	adds	r4, r3, #1
 80034b0:	f7ff fcb4 	bl	8002e1c <SD_CheckPower>
 80034b4:	0003      	movs	r3, r0
 80034b6:	7023      	strb	r3, [r4, #0]
 80034b8:	2327      	movs	r3, #39	; 0x27
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e0ed      	b.n	800369e <SD_disk_ioctl+0x256>
 80034c2:	2327      	movs	r3, #39	; 0x27
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	2204      	movs	r2, #4
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e0e8      	b.n	800369e <SD_disk_ioctl+0x256>
 80034cc:	4b77      	ldr	r3, [pc, #476]	; (80036ac <SD_disk_ioctl+0x264>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	001a      	movs	r2, r3
 80034d4:	2301      	movs	r3, #1
 80034d6:	4013      	ands	r3, r2
 80034d8:	d001      	beq.n	80034de <SD_disk_ioctl+0x96>
 80034da:	2303      	movs	r3, #3
 80034dc:	e0e2      	b.n	80036a4 <SD_disk_ioctl+0x25c>
 80034de:	f7ff fbaf 	bl	8002c40 <SELECT>
 80034e2:	1dbb      	adds	r3, r7, #6
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b0d      	cmp	r3, #13
 80034e8:	d900      	bls.n	80034ec <SD_disk_ioctl+0xa4>
 80034ea:	e0c8      	b.n	800367e <SD_disk_ioctl+0x236>
 80034ec:	009a      	lsls	r2, r3, #2
 80034ee:	4b70      	ldr	r3, [pc, #448]	; (80036b0 <SD_disk_ioctl+0x268>)
 80034f0:	18d3      	adds	r3, r2, r3
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	469f      	mov	pc, r3
 80034f6:	2100      	movs	r1, #0
 80034f8:	2049      	movs	r0, #73	; 0x49
 80034fa:	f7ff fd20 	bl	8002f3e <SD_SendCmd>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d000      	beq.n	8003504 <SD_disk_ioctl+0xbc>
 8003502:	e0c1      	b.n	8003688 <SD_disk_ioctl+0x240>
 8003504:	240c      	movs	r4, #12
 8003506:	193b      	adds	r3, r7, r4
 8003508:	2110      	movs	r1, #16
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff fc90 	bl	8002e30 <SD_RxDataBlock>
 8003510:	1e03      	subs	r3, r0, #0
 8003512:	d100      	bne.n	8003516 <SD_disk_ioctl+0xce>
 8003514:	e0b8      	b.n	8003688 <SD_disk_ioctl+0x240>
 8003516:	0022      	movs	r2, r4
 8003518:	18bb      	adds	r3, r7, r2
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d114      	bne.n	800354e <SD_disk_ioctl+0x106>
 8003524:	0011      	movs	r1, r2
 8003526:	18bb      	adds	r3, r7, r2
 8003528:	7a5b      	ldrb	r3, [r3, #9]
 800352a:	b29a      	uxth	r2, r3
 800352c:	187b      	adds	r3, r7, r1
 800352e:	7a1b      	ldrb	r3, [r3, #8]
 8003530:	b29b      	uxth	r3, r3
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	b29b      	uxth	r3, r3
 8003536:	18d3      	adds	r3, r2, r3
 8003538:	b29a      	uxth	r2, r3
 800353a:	211e      	movs	r1, #30
 800353c:	187b      	adds	r3, r7, r1
 800353e:	3201      	adds	r2, #1
 8003540:	801a      	strh	r2, [r3, #0]
 8003542:	187b      	adds	r3, r7, r1
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	029a      	lsls	r2, r3, #10
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e03a      	b.n	80035c4 <SD_disk_ioctl+0x17c>
 800354e:	200c      	movs	r0, #12
 8003550:	183b      	adds	r3, r7, r0
 8003552:	795b      	ldrb	r3, [r3, #5]
 8003554:	220f      	movs	r2, #15
 8003556:	4013      	ands	r3, r2
 8003558:	b2da      	uxtb	r2, r3
 800355a:	183b      	adds	r3, r7, r0
 800355c:	7a9b      	ldrb	r3, [r3, #10]
 800355e:	09db      	lsrs	r3, r3, #7
 8003560:	b2db      	uxtb	r3, r3
 8003562:	18d3      	adds	r3, r2, r3
 8003564:	b2da      	uxtb	r2, r3
 8003566:	183b      	adds	r3, r7, r0
 8003568:	7a5b      	ldrb	r3, [r3, #9]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2106      	movs	r1, #6
 8003570:	400b      	ands	r3, r1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	18d3      	adds	r3, r2, r3
 8003576:	b2da      	uxtb	r2, r3
 8003578:	2426      	movs	r4, #38	; 0x26
 800357a:	193b      	adds	r3, r7, r4
 800357c:	3202      	adds	r2, #2
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	183b      	adds	r3, r7, r0
 8003582:	7a1b      	ldrb	r3, [r3, #8]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	b2db      	uxtb	r3, r3
 8003588:	b29a      	uxth	r2, r3
 800358a:	183b      	adds	r3, r7, r0
 800358c:	79db      	ldrb	r3, [r3, #7]
 800358e:	b29b      	uxth	r3, r3
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	b29b      	uxth	r3, r3
 8003594:	18d3      	adds	r3, r2, r3
 8003596:	b29a      	uxth	r2, r3
 8003598:	183b      	adds	r3, r7, r0
 800359a:	799b      	ldrb	r3, [r3, #6]
 800359c:	029b      	lsls	r3, r3, #10
 800359e:	b299      	uxth	r1, r3
 80035a0:	23c0      	movs	r3, #192	; 0xc0
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	400b      	ands	r3, r1
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	18d3      	adds	r3, r2, r3
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	211e      	movs	r1, #30
 80035ae:	187b      	adds	r3, r7, r1
 80035b0:	3201      	adds	r2, #1
 80035b2:	801a      	strh	r2, [r3, #0]
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	881a      	ldrh	r2, [r3, #0]
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	3b09      	subs	r3, #9
 80035be:	409a      	lsls	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	2327      	movs	r3, #39	; 0x27
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e05c      	b.n	8003688 <SD_disk_ioctl+0x240>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	801a      	strh	r2, [r3, #0]
 80035d6:	2327      	movs	r3, #39	; 0x27
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	e05a      	b.n	8003696 <SD_disk_ioctl+0x24e>
 80035e0:	f7ff fbae 	bl	8002d40 <SD_ReadyWait>
 80035e4:	0003      	movs	r3, r0
 80035e6:	2bff      	cmp	r3, #255	; 0xff
 80035e8:	d150      	bne.n	800368c <SD_disk_ioctl+0x244>
 80035ea:	2327      	movs	r3, #39	; 0x27
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	e04b      	b.n	800368c <SD_disk_ioctl+0x244>
 80035f4:	2100      	movs	r1, #0
 80035f6:	2049      	movs	r0, #73	; 0x49
 80035f8:	f7ff fca1 	bl	8002f3e <SD_SendCmd>
 80035fc:	1e03      	subs	r3, r0, #0
 80035fe:	d147      	bne.n	8003690 <SD_disk_ioctl+0x248>
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2110      	movs	r1, #16
 8003604:	0018      	movs	r0, r3
 8003606:	f7ff fc13 	bl	8002e30 <SD_RxDataBlock>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d040      	beq.n	8003690 <SD_disk_ioctl+0x248>
 800360e:	2327      	movs	r3, #39	; 0x27
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e03b      	b.n	8003690 <SD_disk_ioctl+0x248>
 8003618:	2100      	movs	r1, #0
 800361a:	204a      	movs	r0, #74	; 0x4a
 800361c:	f7ff fc8f 	bl	8002f3e <SD_SendCmd>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d137      	bne.n	8003694 <SD_disk_ioctl+0x24c>
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	2110      	movs	r1, #16
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff fc01 	bl	8002e30 <SD_RxDataBlock>
 800362e:	1e03      	subs	r3, r0, #0
 8003630:	d030      	beq.n	8003694 <SD_disk_ioctl+0x24c>
 8003632:	2327      	movs	r3, #39	; 0x27
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e02b      	b.n	8003694 <SD_disk_ioctl+0x24c>
 800363c:	2100      	movs	r1, #0
 800363e:	207a      	movs	r0, #122	; 0x7a
 8003640:	f7ff fc7d 	bl	8002f3e <SD_SendCmd>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d11a      	bne.n	800367e <SD_disk_ioctl+0x236>
 8003648:	2326      	movs	r3, #38	; 0x26
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e00c      	b.n	800366c <SD_disk_ioctl+0x224>
 8003652:	6a3c      	ldr	r4, [r7, #32]
 8003654:	1c63      	adds	r3, r4, #1
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	f7ff fb46 	bl	8002ce8 <SPI_RxByte>
 800365c:	0003      	movs	r3, r0
 800365e:	7023      	strb	r3, [r4, #0]
 8003660:	2126      	movs	r1, #38	; 0x26
 8003662:	187b      	adds	r3, r7, r1
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	187b      	adds	r3, r7, r1
 8003668:	3201      	adds	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	2326      	movs	r3, #38	; 0x26
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d9ed      	bls.n	8003652 <SD_disk_ioctl+0x20a>
 8003676:	2327      	movs	r3, #39	; 0x27
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	2327      	movs	r3, #39	; 0x27
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	2204      	movs	r2, #4
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e006      	b.n	8003696 <SD_disk_ioctl+0x24e>
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	e004      	b.n	8003696 <SD_disk_ioctl+0x24e>
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	e002      	b.n	8003696 <SD_disk_ioctl+0x24e>
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	e000      	b.n	8003696 <SD_disk_ioctl+0x24e>
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	f7ff fae2 	bl	8002c5e <DESELECT>
 800369a:	f7ff fb25 	bl	8002ce8 <SPI_RxByte>
 800369e:	2327      	movs	r3, #39	; 0x27
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b00b      	add	sp, #44	; 0x2c
 80036aa:	bd90      	pop	{r4, r7, pc}
 80036ac:	20000000 	.word	0x20000000
 80036b0:	0800e8b0 	.word	0x0800e8b0

080036b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036ba:	f000 ffa5 	bl	8004608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036be:	f000 f84d 	bl	800375c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036c2:	f000 f969 	bl	8003998 <MX_GPIO_Init>
  MX_SPI1_Init();
 80036c6:	f000 f92f 	bl	8003928 <MX_SPI1_Init>
  MX_FATFS_Init();
 80036ca:	f003 f8e1 	bl	8006890 <MX_FATFS_Init>
  MX_ADC_Init();
 80036ce:	f000 f899 	bl	8003804 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  start_time_ms = HAL_GetTick();
 80036d2:	f000 ffff 	bl	80046d4 <HAL_GetTick>
 80036d6:	0002      	movs	r2, r0
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <main+0x9c>)
 80036da:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 80036dc:	23a0      	movs	r3, #160	; 0xa0
 80036de:	05db      	lsls	r3, r3, #23
 80036e0:	2101      	movs	r1, #1
 80036e2:	0018      	movs	r0, r3
 80036e4:	f001 feaa 	bl	800543c <HAL_GPIO_ReadPin>
 80036e8:	0003      	movs	r3, r0
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d127      	bne.n	800373e <main+0x8a>
	 		  {
	 			  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_SET);
 80036ee:	23a0      	movs	r3, #160	; 0xa0
 80036f0:	05db      	lsls	r3, r3, #23
 80036f2:	2201      	movs	r2, #1
 80036f4:	2102      	movs	r1, #2
 80036f6:	0018      	movs	r0, r3
 80036f8:	f001 febd 	bl	8005476 <HAL_GPIO_WritePin>
	 			  uint32_t current_time_ms = HAL_GetTick();
 80036fc:	f000 ffea 	bl	80046d4 <HAL_GetTick>
 8003700:	0003      	movs	r3, r0
 8003702:	607b      	str	r3, [r7, #4]
	 			  seconds_since_start = (current_time_ms - start_time_ms) / 1000.0f;
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <main+0x9c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	0018      	movs	r0, r3
 800370e:	f7fd fb0f 	bl	8000d30 <__aeabi_ui2f>
 8003712:	1c03      	adds	r3, r0, #0
 8003714:	490f      	ldr	r1, [pc, #60]	; (8003754 <main+0xa0>)
 8003716:	1c18      	adds	r0, r3, #0
 8003718:	f7fd f850 	bl	80007bc <__aeabi_fdiv>
 800371c:	1c03      	adds	r3, r0, #0
 800371e:	1c1a      	adds	r2, r3, #0
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <main+0xa4>)
 8003722:	601a      	str	r2, [r3, #0]
	 			  readNumber();
 8003724:	f000 fbee 	bl	8003f04 <readNumber>
	 			  Measurement_of_ADC_Voltage_18650();
 8003728:	f000 fa64 	bl	8003bf4 <Measurement_of_ADC_Voltage_18650>
	 			  Measurement_of_ADC_Voltage_CMOS();
 800372c:	f000 faa8 	bl	8003c80 <Measurement_of_ADC_Voltage_CMOS>
	 			  Measurement_of_ADC_Current_CMOS();
 8003730:	f000 fb46 	bl	8003dc0 <Measurement_of_ADC_Current_CMOS>
	 			  Measurement_of_ADC_Current_18650();
 8003734:	f000 faea 	bl	8003d0c <Measurement_of_ADC_Current_18650>

	 			  process_SD_card();
 8003738:	f000 f9bc 	bl	8003ab4 <process_SD_card>
 800373c:	e7ce      	b.n	80036dc <main+0x28>
	 		  }
	 		  else
	 		  {
	 			  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 800373e:	23a0      	movs	r3, #160	; 0xa0
 8003740:	05db      	lsls	r3, r3, #23
 8003742:	2200      	movs	r2, #0
 8003744:	2102      	movs	r1, #2
 8003746:	0018      	movs	r0, r3
 8003748:	f001 fe95 	bl	8005476 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 800374c:	e7c6      	b.n	80036dc <main+0x28>
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	200002d8 	.word	0x200002d8
 8003754:	447a0000 	.word	0x447a0000
 8003758:	200002d4 	.word	0x200002d4

0800375c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b093      	sub	sp, #76	; 0x4c
 8003760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003762:	2414      	movs	r4, #20
 8003764:	193b      	adds	r3, r7, r4
 8003766:	0018      	movs	r0, r3
 8003768:	2334      	movs	r3, #52	; 0x34
 800376a:	001a      	movs	r2, r3
 800376c:	2100      	movs	r1, #0
 800376e:	f007 fb15 	bl	800ad9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003772:	003b      	movs	r3, r7
 8003774:	0018      	movs	r0, r3
 8003776:	2314      	movs	r3, #20
 8003778:	001a      	movs	r2, r3
 800377a:	2100      	movs	r1, #0
 800377c:	f007 fb0e 	bl	800ad9c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003780:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <SystemClock_Config+0xa0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <SystemClock_Config+0xa4>)
 8003786:	401a      	ands	r2, r3
 8003788:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <SystemClock_Config+0xa0>)
 800378a:	2180      	movs	r1, #128	; 0x80
 800378c:	0109      	lsls	r1, r1, #4
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003792:	0021      	movs	r1, r4
 8003794:	187b      	adds	r3, r7, r1
 8003796:	2210      	movs	r2, #16
 8003798:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800379a:	187b      	adds	r3, r7, r1
 800379c:	2201      	movs	r2, #1
 800379e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	2200      	movs	r2, #0
 80037a4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	22a0      	movs	r2, #160	; 0xa0
 80037aa:	0212      	lsls	r2, r2, #8
 80037ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	2200      	movs	r2, #0
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	0018      	movs	r0, r3
 80037b8:	f001 fe7a 	bl	80054b0 <HAL_RCC_OscConfig>
 80037bc:	1e03      	subs	r3, r0, #0
 80037be:	d001      	beq.n	80037c4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80037c0:	f000 fd50 	bl	8004264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037c4:	003b      	movs	r3, r7
 80037c6:	220f      	movs	r2, #15
 80037c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80037ca:	003b      	movs	r3, r7
 80037cc:	2200      	movs	r2, #0
 80037ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037d0:	003b      	movs	r3, r7
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037d6:	003b      	movs	r3, r7
 80037d8:	2200      	movs	r2, #0
 80037da:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037dc:	003b      	movs	r3, r7
 80037de:	2200      	movs	r2, #0
 80037e0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80037e2:	003b      	movs	r3, r7
 80037e4:	2100      	movs	r1, #0
 80037e6:	0018      	movs	r0, r3
 80037e8:	f002 f9de 	bl	8005ba8 <HAL_RCC_ClockConfig>
 80037ec:	1e03      	subs	r3, r0, #0
 80037ee:	d001      	beq.n	80037f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80037f0:	f000 fd38 	bl	8004264 <Error_Handler>
  }
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b013      	add	sp, #76	; 0x4c
 80037fa:	bd90      	pop	{r4, r7, pc}
 80037fc:	40007000 	.word	0x40007000
 8003800:	ffffe7ff 	.word	0xffffe7ff

08003804 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800380a:	003b      	movs	r3, r7
 800380c:	0018      	movs	r0, r3
 800380e:	2308      	movs	r3, #8
 8003810:	001a      	movs	r2, r3
 8003812:	2100      	movs	r1, #0
 8003814:	f007 fac2 	bl	800ad9c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003818:	4b3d      	ldr	r3, [pc, #244]	; (8003910 <MX_ADC_Init+0x10c>)
 800381a:	4a3e      	ldr	r2, [pc, #248]	; (8003914 <MX_ADC_Init+0x110>)
 800381c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800381e:	4b3c      	ldr	r3, [pc, #240]	; (8003910 <MX_ADC_Init+0x10c>)
 8003820:	2200      	movs	r2, #0
 8003822:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003824:	4b3a      	ldr	r3, [pc, #232]	; (8003910 <MX_ADC_Init+0x10c>)
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	0612      	lsls	r2, r2, #24
 800382a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800382c:	4b38      	ldr	r3, [pc, #224]	; (8003910 <MX_ADC_Init+0x10c>)
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003832:	4b37      	ldr	r3, [pc, #220]	; (8003910 <MX_ADC_Init+0x10c>)
 8003834:	2200      	movs	r2, #0
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003838:	4b35      	ldr	r3, [pc, #212]	; (8003910 <MX_ADC_Init+0x10c>)
 800383a:	2201      	movs	r2, #1
 800383c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800383e:	4b34      	ldr	r3, [pc, #208]	; (8003910 <MX_ADC_Init+0x10c>)
 8003840:	2200      	movs	r2, #0
 8003842:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003844:	4b32      	ldr	r3, [pc, #200]	; (8003910 <MX_ADC_Init+0x10c>)
 8003846:	2220      	movs	r2, #32
 8003848:	2100      	movs	r1, #0
 800384a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800384c:	4b30      	ldr	r3, [pc, #192]	; (8003910 <MX_ADC_Init+0x10c>)
 800384e:	2221      	movs	r2, #33	; 0x21
 8003850:	2100      	movs	r1, #0
 8003852:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003854:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <MX_ADC_Init+0x10c>)
 8003856:	2200      	movs	r2, #0
 8003858:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800385a:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <MX_ADC_Init+0x10c>)
 800385c:	22c2      	movs	r2, #194	; 0xc2
 800385e:	32ff      	adds	r2, #255	; 0xff
 8003860:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003862:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <MX_ADC_Init+0x10c>)
 8003864:	222c      	movs	r2, #44	; 0x2c
 8003866:	2100      	movs	r1, #0
 8003868:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800386a:	4b29      	ldr	r3, [pc, #164]	; (8003910 <MX_ADC_Init+0x10c>)
 800386c:	2204      	movs	r2, #4
 800386e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <MX_ADC_Init+0x10c>)
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003876:	4b26      	ldr	r3, [pc, #152]	; (8003910 <MX_ADC_Init+0x10c>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 800387c:	4b24      	ldr	r3, [pc, #144]	; (8003910 <MX_ADC_Init+0x10c>)
 800387e:	2201      	movs	r2, #1
 8003880:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003882:	4b23      	ldr	r3, [pc, #140]	; (8003910 <MX_ADC_Init+0x10c>)
 8003884:	2200      	movs	r2, #0
 8003886:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <MX_ADC_Init+0x10c>)
 800388a:	0018      	movs	r0, r3
 800388c:	f000 ff50 	bl	8004730 <HAL_ADC_Init>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d001      	beq.n	8003898 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003894:	f000 fce6 	bl	8004264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003898:	003b      	movs	r3, r7
 800389a:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <MX_ADC_Init+0x114>)
 800389c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800389e:	003b      	movs	r3, r7
 80038a0:	2280      	movs	r2, #128	; 0x80
 80038a2:	0152      	lsls	r2, r2, #5
 80038a4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80038a6:	003a      	movs	r2, r7
 80038a8:	4b19      	ldr	r3, [pc, #100]	; (8003910 <MX_ADC_Init+0x10c>)
 80038aa:	0011      	movs	r1, r2
 80038ac:	0018      	movs	r0, r3
 80038ae:	f001 f9ef 	bl	8004c90 <HAL_ADC_ConfigChannel>
 80038b2:	1e03      	subs	r3, r0, #0
 80038b4:	d001      	beq.n	80038ba <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80038b6:	f000 fcd5 	bl	8004264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80038ba:	003b      	movs	r3, r7
 80038bc:	4a17      	ldr	r2, [pc, #92]	; (800391c <MX_ADC_Init+0x118>)
 80038be:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80038c0:	003a      	movs	r2, r7
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <MX_ADC_Init+0x10c>)
 80038c4:	0011      	movs	r1, r2
 80038c6:	0018      	movs	r0, r3
 80038c8:	f001 f9e2 	bl	8004c90 <HAL_ADC_ConfigChannel>
 80038cc:	1e03      	subs	r3, r0, #0
 80038ce:	d001      	beq.n	80038d4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80038d0:	f000 fcc8 	bl	8004264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80038d4:	003b      	movs	r3, r7
 80038d6:	4a12      	ldr	r2, [pc, #72]	; (8003920 <MX_ADC_Init+0x11c>)
 80038d8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80038da:	003a      	movs	r2, r7
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <MX_ADC_Init+0x10c>)
 80038de:	0011      	movs	r1, r2
 80038e0:	0018      	movs	r0, r3
 80038e2:	f001 f9d5 	bl	8004c90 <HAL_ADC_ConfigChannel>
 80038e6:	1e03      	subs	r3, r0, #0
 80038e8:	d001      	beq.n	80038ee <MX_ADC_Init+0xea>
  {
    Error_Handler();
 80038ea:	f000 fcbb 	bl	8004264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80038ee:	003b      	movs	r3, r7
 80038f0:	4a0c      	ldr	r2, [pc, #48]	; (8003924 <MX_ADC_Init+0x120>)
 80038f2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80038f4:	003a      	movs	r2, r7
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <MX_ADC_Init+0x10c>)
 80038f8:	0011      	movs	r1, r2
 80038fa:	0018      	movs	r0, r3
 80038fc:	f001 f9c8 	bl	8004c90 <HAL_ADC_ConfigChannel>
 8003900:	1e03      	subs	r3, r0, #0
 8003902:	d001      	beq.n	8003908 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8003904:	f000 fcae 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	b002      	add	sp, #8
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000210 	.word	0x20000210
 8003914:	40012400 	.word	0x40012400
 8003918:	30001000 	.word	0x30001000
 800391c:	34002000 	.word	0x34002000
 8003920:	38004000 	.word	0x38004000
 8003924:	3c008000 	.word	0x3c008000

08003928 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800392c:	4b18      	ldr	r3, [pc, #96]	; (8003990 <MX_SPI1_Init+0x68>)
 800392e:	4a19      	ldr	r2, [pc, #100]	; (8003994 <MX_SPI1_Init+0x6c>)
 8003930:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003932:	4b17      	ldr	r3, [pc, #92]	; (8003990 <MX_SPI1_Init+0x68>)
 8003934:	2282      	movs	r2, #130	; 0x82
 8003936:	0052      	lsls	r2, r2, #1
 8003938:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <MX_SPI1_Init+0x68>)
 800393c:	2200      	movs	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <MX_SPI1_Init+0x68>)
 8003942:	2200      	movs	r2, #0
 8003944:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <MX_SPI1_Init+0x68>)
 8003948:	2200      	movs	r2, #0
 800394a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800394c:	4b10      	ldr	r3, [pc, #64]	; (8003990 <MX_SPI1_Init+0x68>)
 800394e:	2200      	movs	r2, #0
 8003950:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003952:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <MX_SPI1_Init+0x68>)
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	0092      	lsls	r2, r2, #2
 8003958:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <MX_SPI1_Init+0x68>)
 800395c:	2200      	movs	r2, #0
 800395e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <MX_SPI1_Init+0x68>)
 8003962:	2200      	movs	r2, #0
 8003964:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <MX_SPI1_Init+0x68>)
 8003968:	2200      	movs	r2, #0
 800396a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <MX_SPI1_Init+0x68>)
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <MX_SPI1_Init+0x68>)
 8003974:	2207      	movs	r2, #7
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <MX_SPI1_Init+0x68>)
 800397a:	0018      	movs	r0, r3
 800397c:	f002 fb02 	bl	8005f84 <HAL_SPI_Init>
 8003980:	1e03      	subs	r3, r0, #0
 8003982:	d001      	beq.n	8003988 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003984:	f000 fc6e 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003988:	46c0      	nop			; (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	2000026c 	.word	0x2000026c
 8003994:	40013000 	.word	0x40013000

08003998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399e:	240c      	movs	r4, #12
 80039a0:	193b      	adds	r3, r7, r4
 80039a2:	0018      	movs	r0, r3
 80039a4:	2314      	movs	r3, #20
 80039a6:	001a      	movs	r2, r3
 80039a8:	2100      	movs	r1, #0
 80039aa:	f007 f9f7 	bl	800ad9c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ae:	4b38      	ldr	r3, [pc, #224]	; (8003a90 <MX_GPIO_Init+0xf8>)
 80039b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b2:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <MX_GPIO_Init+0xf8>)
 80039b4:	2104      	movs	r1, #4
 80039b6:	430a      	orrs	r2, r1
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80039ba:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <MX_GPIO_Init+0xf8>)
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	2204      	movs	r2, #4
 80039c0:	4013      	ands	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c6:	4b32      	ldr	r3, [pc, #200]	; (8003a90 <MX_GPIO_Init+0xf8>)
 80039c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ca:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <MX_GPIO_Init+0xf8>)
 80039cc:	2101      	movs	r1, #1
 80039ce:	430a      	orrs	r2, r1
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80039d2:	4b2f      	ldr	r3, [pc, #188]	; (8003a90 <MX_GPIO_Init+0xf8>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	2201      	movs	r2, #1
 80039d8:	4013      	ands	r3, r2
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039de:	4b2c      	ldr	r3, [pc, #176]	; (8003a90 <MX_GPIO_Init+0xf8>)
 80039e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e2:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <MX_GPIO_Init+0xf8>)
 80039e4:	2102      	movs	r1, #2
 80039e6:	430a      	orrs	r2, r1
 80039e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80039ea:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <MX_GPIO_Init+0xf8>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	2202      	movs	r2, #2
 80039f0:	4013      	ands	r3, r2
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CardDetect_Output_Pin|GPIO_PIN_4|User_Input_Status_Light_Red_Pin|User_Input_Status_Light_Green_Pin
 80039f6:	4927      	ldr	r1, [pc, #156]	; (8003a94 <MX_GPIO_Init+0xfc>)
 80039f8:	23a0      	movs	r3, #160	; 0xa0
 80039fa:	05db      	lsls	r3, r3, #23
 80039fc:	2200      	movs	r2, #0
 80039fe:	0018      	movs	r0, r3
 8003a00:	f001 fd39 	bl	8005476 <HAL_GPIO_WritePin>
                          |User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Discrete_Bit_0_Pin Discrete_Bit_1_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_0_Pin|Discrete_Bit_1_Pin;
 8003a04:	193b      	adds	r3, r7, r4
 8003a06:	2203      	movs	r2, #3
 8003a08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a0a:	193b      	adds	r3, r7, r4
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	193b      	adds	r3, r7, r4
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a16:	193b      	adds	r3, r7, r4
 8003a18:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <MX_GPIO_Init+0x100>)
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	0010      	movs	r0, r2
 8003a1e:	f001 fb8f 	bl	8005140 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Input_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Input_Pin;
 8003a22:	193b      	adds	r3, r7, r4
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a28:	193b      	adds	r3, r7, r4
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	193b      	adds	r3, r7, r4
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_CardDetect_Input_GPIO_Port, &GPIO_InitStruct);
 8003a34:	193a      	adds	r2, r7, r4
 8003a36:	23a0      	movs	r3, #160	; 0xa0
 8003a38:	05db      	lsls	r3, r3, #23
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f001 fb7f 	bl	8005140 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CardDetect_Output_Pin PA4 User_Input_Status_Light_Red_Pin User_Input_Status_Light_Green_Pin
                           User_Input_Status_Light_Blue_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Output_Pin|GPIO_PIN_4|User_Input_Status_Light_Red_Pin|User_Input_Status_Light_Green_Pin
 8003a42:	193b      	adds	r3, r7, r4
 8003a44:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <MX_GPIO_Init+0xfc>)
 8003a46:	601a      	str	r2, [r3, #0]
                          |User_Input_Status_Light_Blue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	193b      	adds	r3, r7, r4
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a54:	193b      	adds	r3, r7, r4
 8003a56:	2200      	movs	r2, #0
 8003a58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5a:	193a      	adds	r2, r7, r4
 8003a5c:	23a0      	movs	r3, #160	; 0xa0
 8003a5e:	05db      	lsls	r3, r3, #23
 8003a60:	0011      	movs	r1, r2
 8003a62:	0018      	movs	r0, r3
 8003a64:	f001 fb6c 	bl	8005140 <HAL_GPIO_Init>

  /*Configure GPIO pin : Discrete_Bit_2_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_2_Pin;
 8003a68:	193b      	adds	r3, r7, r4
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a6e:	193b      	adds	r3, r7, r4
 8003a70:	2200      	movs	r2, #0
 8003a72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	193b      	adds	r3, r7, r4
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Discrete_Bit_2_GPIO_Port, &GPIO_InitStruct);
 8003a7a:	193b      	adds	r3, r7, r4
 8003a7c:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <MX_GPIO_Init+0x104>)
 8003a7e:	0019      	movs	r1, r3
 8003a80:	0010      	movs	r0, r2
 8003a82:	f001 fb5d 	bl	8005140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b009      	add	sp, #36	; 0x24
 8003a8c:	bd90      	pop	{r4, r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	40021000 	.word	0x40021000
 8003a94:	00000712 	.word	0x00000712
 8003a98:	50000800 	.word	0x50000800
 8003a9c:	50000400 	.word	0x50000400

08003aa0 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  //HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
 8003aa8:	687b      	ldr	r3, [r7, #4]
}
 8003aaa:	0018      	movs	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b002      	add	sp, #8
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <process_SD_card>:

void process_SD_card(void)
{
 8003ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab6:	4c42      	ldr	r4, [pc, #264]	; (8003bc0 <process_SD_card+0x10c>)
 8003ab8:	44a5      	add	sp, r4
 8003aba:	af0c      	add	r7, sp, #48	; 0x30

    // Buffer for storing the complete string to write
    char writeBuffer[50]; // Adjust the size based on your needs

    // Attempt to mount the SD Card
    fres = f_mount(&FatFs, "", 1); // 1=mount now
 8003abc:	4d41      	ldr	r5, [pc, #260]	; (8003bc4 <process_SD_card+0x110>)
 8003abe:	2618      	movs	r6, #24
 8003ac0:	19ab      	adds	r3, r5, r6
 8003ac2:	19dc      	adds	r4, r3, r7
 8003ac4:	4940      	ldr	r1, [pc, #256]	; (8003bc8 <process_SD_card+0x114>)
 8003ac6:	4b41      	ldr	r3, [pc, #260]	; (8003bcc <process_SD_card+0x118>)
 8003ac8:	199b      	adds	r3, r3, r6
 8003aca:	19db      	adds	r3, r3, r7
 8003acc:	2201      	movs	r2, #1
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f005 face 	bl	8009070 <f_mount>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK) return; // Exit if fail to mount
 8003ad8:	19ab      	adds	r3, r5, r6
 8003ada:	19db      	adds	r3, r3, r7
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d169      	bne.n	8003bb6 <process_SD_card+0x102>

    // Open or create the file and append data
    fres = f_open(&fil, "TestingReadings.csv", FA_WRITE | FA_READ | FA_OPEN_APPEND);
 8003ae2:	19ab      	adds	r3, r5, r6
 8003ae4:	19dc      	adds	r4, r3, r7
 8003ae6:	493a      	ldr	r1, [pc, #232]	; (8003bd0 <process_SD_card+0x11c>)
 8003ae8:	2334      	movs	r3, #52	; 0x34
 8003aea:	199b      	adds	r3, r3, r6
 8003aec:	19db      	adds	r3, r3, r7
 8003aee:	2233      	movs	r2, #51	; 0x33
 8003af0:	0018      	movs	r0, r3
 8003af2:	f005 fb09 	bl	8009108 <f_open>
 8003af6:	0003      	movs	r3, r0
 8003af8:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK) {
 8003afa:	19ab      	adds	r3, r5, r6
 8003afc:	19db      	adds	r3, r3, r7
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d006      	beq.n	8003b12 <process_SD_card+0x5e>
        f_mount(NULL, "", 0); // Dismount the SD card if fail to open
 8003b04:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <process_SD_card+0x114>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	0019      	movs	r1, r3
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f005 fab0 	bl	8009070 <f_mount>
        return; // Exit if fail to open/create the file
 8003b10:	e052      	b.n	8003bb8 <process_SD_card+0x104>
    }

    // Prepare the data string
    snprintf(writeBuffer, sizeof(writeBuffer),
 8003b12:	4b30      	ldr	r3, [pc, #192]	; (8003bd4 <process_SD_card+0x120>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	1c18      	adds	r0, r3, #0
 8003b18:	f7fe ff9a 	bl	8002a50 <__aeabi_f2d>
 8003b1c:	0004      	movs	r4, r0
 8003b1e:	000d      	movs	r5, r1
 8003b20:	4b2d      	ldr	r3, [pc, #180]	; (8003bd8 <process_SD_card+0x124>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	1c18      	adds	r0, r3, #0
 8003b26:	f7fe ff93 	bl	8002a50 <__aeabi_f2d>
 8003b2a:	6138      	str	r0, [r7, #16]
 8003b2c:	6179      	str	r1, [r7, #20]
 8003b2e:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <process_SD_card+0x128>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	1c18      	adds	r0, r3, #0
 8003b34:	f7fe ff8c 	bl	8002a50 <__aeabi_f2d>
 8003b38:	60b8      	str	r0, [r7, #8]
 8003b3a:	60f9      	str	r1, [r7, #12]
 8003b3c:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <process_SD_card+0x12c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	1c18      	adds	r0, r3, #0
 8003b42:	f7fe ff85 	bl	8002a50 <__aeabi_f2d>
 8003b46:	6038      	str	r0, [r7, #0]
 8003b48:	6079      	str	r1, [r7, #4]
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <process_SD_card+0x130>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1c18      	adds	r0, r3, #0
 8003b50:	f7fe ff7e 	bl	8002a50 <__aeabi_f2d>
 8003b54:	0002      	movs	r2, r0
 8003b56:	000b      	movs	r3, r1
 8003b58:	4923      	ldr	r1, [pc, #140]	; (8003be8 <process_SD_card+0x134>)
 8003b5a:	6809      	ldr	r1, [r1, #0]
 8003b5c:	4e23      	ldr	r6, [pc, #140]	; (8003bec <process_SD_card+0x138>)
 8003b5e:	2018      	movs	r0, #24
 8003b60:	1838      	adds	r0, r7, r0
 8003b62:	910a      	str	r1, [sp, #40]	; 0x28
 8003b64:	9208      	str	r2, [sp, #32]
 8003b66:	9309      	str	r3, [sp, #36]	; 0x24
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	9206      	str	r2, [sp, #24]
 8003b6e:	9307      	str	r3, [sp, #28]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	9204      	str	r2, [sp, #16]
 8003b76:	9305      	str	r3, [sp, #20]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	9202      	str	r2, [sp, #8]
 8003b7e:	9303      	str	r3, [sp, #12]
 8003b80:	9400      	str	r4, [sp, #0]
 8003b82:	9501      	str	r5, [sp, #4]
 8003b84:	0032      	movs	r2, r6
 8003b86:	2132      	movs	r1, #50	; 0x32
 8003b88:	f007 f868 	bl	800ac5c <sniprintf>
             V_CMOS, // CMOS Voltage
             C_CMOS, // CMOS Current
			 valueToAdjust); // Switch State

    // Write the prepared string to the file
    f_puts(writeBuffer, &fil);
 8003b8c:	2434      	movs	r4, #52	; 0x34
 8003b8e:	2518      	movs	r5, #24
 8003b90:	1963      	adds	r3, r4, r5
 8003b92:	19da      	adds	r2, r3, r7
 8003b94:	197b      	adds	r3, r7, r5
 8003b96:	0011      	movs	r1, r2
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f005 ff8a 	bl	8009ab2 <f_puts>

    // Close the file to ensure data is written to the SD card
    f_close(&fil);
 8003b9e:	1963      	adds	r3, r4, r5
 8003ba0:	19db      	adds	r3, r3, r7
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f005 fed9 	bl	800995a <f_close>

    // Dismount the SD card
    f_mount(NULL, "", 0);
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <process_SD_card+0x114>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	0019      	movs	r1, r3
 8003bae:	2000      	movs	r0, #0
 8003bb0:	f005 fa5e 	bl	8009070 <f_mount>
 8003bb4:	e000      	b.n	8003bb8 <process_SD_card+0x104>
    if (fres != FR_OK) return; // Exit if fail to mount
 8003bb6:	46c0      	nop			; (mov r8, r8)
}
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <process_SD_card+0x13c>)
 8003bbc:	449d      	add	sp, r3
 8003bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc0:	ffffdf14 	.word	0xffffdf14
 8003bc4:	0000209f 	.word	0x0000209f
 8003bc8:	0800e770 	.word	0x0800e770
 8003bcc:	00001064 	.word	0x00001064
 8003bd0:	0800e774 	.word	0x0800e774
 8003bd4:	200002d4 	.word	0x200002d4
 8003bd8:	200002c4 	.word	0x200002c4
 8003bdc:	200002d0 	.word	0x200002d0
 8003be0:	200002c8 	.word	0x200002c8
 8003be4:	200002cc 	.word	0x200002cc
 8003be8:	200002dc 	.word	0x200002dc
 8003bec:	0800e788 	.word	0x0800e788
 8003bf0:	000020bc 	.word	0x000020bc

08003bf4 <Measurement_of_ADC_Voltage_18650>:


float Measurement_of_ADC_Voltage_18650(){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
	float V_ref = 3.3;  // This is known for each micro controller from data
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <Measurement_of_ADC_Voltage_18650+0x7c>)
 8003bfc:	60bb      	str	r3, [r7, #8]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <Measurement_of_ADC_Voltage_18650+0x80>)
 8003c00:	607b      	str	r3, [r7, #4]
		float V_stepSize = V_ref / ADC_resolution;
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	68b8      	ldr	r0, [r7, #8]
 8003c06:	f7fc fdd9 	bl	80007bc <__aeabi_fdiv>
 8003c0a:	1c03      	adds	r3, r0, #0
 8003c0c:	603b      	str	r3, [r7, #0]
		// ADC
	    /* Start ADC Conversion for ADC1 */
	    ADC_Select_Voltage18650();
 8003c0e:	f000 f931 	bl	8003e74 <ADC_Select_Voltage18650>
	    HAL_ADC_Start(&hadc);
 8003c12:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <Measurement_of_ADC_Voltage_18650+0x84>)
 8003c14:	0018      	movs	r0, r3
 8003c16:	f000 feff 	bl	8004a18 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	425a      	negs	r2, r3
 8003c1e:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <Measurement_of_ADC_Voltage_18650+0x84>)
 8003c20:	0011      	movs	r1, r2
 8003c22:	0018      	movs	r0, r3
 8003c24:	f000 ff8c 	bl	8004b40 <HAL_ADC_PollForConversion>
 8003c28:	1e03      	subs	r3, r0, #0
 8003c2a:	d107      	bne.n	8003c3c <Measurement_of_ADC_Voltage_18650+0x48>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc);
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <Measurement_of_ADC_Voltage_18650+0x84>)
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f001 f822 	bl	8004c78 <HAL_ADC_GetValue>
 8003c34:	0002      	movs	r2, r0
 8003c36:	230e      	movs	r3, #14
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	801a      	strh	r2, [r3, #0]
	       }
	    HAL_ADC_Stop(&hadc);
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <Measurement_of_ADC_Voltage_18650+0x84>)
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f000 ff3e 	bl	8004ac0 <HAL_ADC_Stop>
	    return V_18650 = rawValue1 * V_stepSize;
 8003c44:	230e      	movs	r3, #14
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f7fd f81e 	bl	8000c8c <__aeabi_i2f>
 8003c50:	1c03      	adds	r3, r0, #0
 8003c52:	6839      	ldr	r1, [r7, #0]
 8003c54:	1c18      	adds	r0, r3, #0
 8003c56:	f7fc fecb 	bl	80009f0 <__aeabi_fmul>
 8003c5a:	1c03      	adds	r3, r0, #0
 8003c5c:	1c1a      	adds	r2, r3, #0
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <Measurement_of_ADC_Voltage_18650+0x88>)
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <Measurement_of_ADC_Voltage_18650+0x88>)
 8003c64:	681b      	ldr	r3, [r3, #0]
}
 8003c66:	1c18      	adds	r0, r3, #0
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b004      	add	sp, #16
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	40533333 	.word	0x40533333
 8003c74:	457ff000 	.word	0x457ff000
 8003c78:	20000210 	.word	0x20000210
 8003c7c:	200002c4 	.word	0x200002c4

08003c80 <Measurement_of_ADC_Voltage_CMOS>:
float Measurement_of_ADC_Voltage_CMOS(){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
	float V_ref = 3.3;  // This is known for each micro controller from data
 8003c86:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <Measurement_of_ADC_Voltage_CMOS+0x7c>)
 8003c88:	60bb      	str	r3, [r7, #8]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <Measurement_of_ADC_Voltage_CMOS+0x80>)
 8003c8c:	607b      	str	r3, [r7, #4]
		float V_stepSize = V_ref / ADC_resolution;
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	68b8      	ldr	r0, [r7, #8]
 8003c92:	f7fc fd93 	bl	80007bc <__aeabi_fdiv>
 8003c96:	1c03      	adds	r3, r0, #0
 8003c98:	603b      	str	r3, [r7, #0]
		// ADC
	    /* Start ADC Conversion for ADC1 */
	    ADC_Select_VoltageCMOS();
 8003c9a:	f000 f90f 	bl	8003ebc <ADC_Select_VoltageCMOS>
	    HAL_ADC_Start(&hadc);
 8003c9e:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <Measurement_of_ADC_Voltage_CMOS+0x84>)
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 feb9 	bl	8004a18 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	425a      	negs	r2, r3
 8003caa:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <Measurement_of_ADC_Voltage_CMOS+0x84>)
 8003cac:	0011      	movs	r1, r2
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f000 ff46 	bl	8004b40 <HAL_ADC_PollForConversion>
 8003cb4:	1e03      	subs	r3, r0, #0
 8003cb6:	d107      	bne.n	8003cc8 <Measurement_of_ADC_Voltage_CMOS+0x48>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc);
 8003cb8:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <Measurement_of_ADC_Voltage_CMOS+0x84>)
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f000 ffdc 	bl	8004c78 <HAL_ADC_GetValue>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	230e      	movs	r3, #14
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	801a      	strh	r2, [r3, #0]
	       }
	    HAL_ADC_Stop(&hadc);
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <Measurement_of_ADC_Voltage_CMOS+0x84>)
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f000 fef8 	bl	8004ac0 <HAL_ADC_Stop>
	    return V_CMOS = rawValue1 * V_stepSize;
 8003cd0:	230e      	movs	r3, #14
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f7fc ffd8 	bl	8000c8c <__aeabi_i2f>
 8003cdc:	1c03      	adds	r3, r0, #0
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	1c18      	adds	r0, r3, #0
 8003ce2:	f7fc fe85 	bl	80009f0 <__aeabi_fmul>
 8003ce6:	1c03      	adds	r3, r0, #0
 8003ce8:	1c1a      	adds	r2, r3, #0
 8003cea:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <Measurement_of_ADC_Voltage_CMOS+0x88>)
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <Measurement_of_ADC_Voltage_CMOS+0x88>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
}
 8003cf2:	1c18      	adds	r0, r3, #0
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b004      	add	sp, #16
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	40533333 	.word	0x40533333
 8003d00:	457ff000 	.word	0x457ff000
 8003d04:	20000210 	.word	0x20000210
 8003d08:	200002c8 	.word	0x200002c8

08003d0c <Measurement_of_ADC_Current_18650>:

void Measurement_of_ADC_Current_18650(){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
	float V_ref = 3.3;  // This is known for each micro controller from data
 8003d12:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <Measurement_of_ADC_Current_18650+0x98>)
 8003d14:	60fb      	str	r3, [r7, #12]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8003d16:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <Measurement_of_ADC_Current_18650+0x9c>)
 8003d18:	60bb      	str	r3, [r7, #8]
		float V_stepSize = V_ref / ADC_resolution;
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7fc fd4d 	bl	80007bc <__aeabi_fdiv>
 8003d22:	1c03      	adds	r3, r0, #0
 8003d24:	607b      	str	r3, [r7, #4]
		// ADC
	    /* Start ADC Conversion for ADC1 */
	    ADC_Select_Voltage18650();
 8003d26:	f000 f8a5 	bl	8003e74 <ADC_Select_Voltage18650>
	    HAL_ADC_Start(&hadc);
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <Measurement_of_ADC_Current_18650+0xa0>)
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f000 fe73 	bl	8004a18 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8003d32:	2301      	movs	r3, #1
 8003d34:	425a      	negs	r2, r3
 8003d36:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <Measurement_of_ADC_Current_18650+0xa0>)
 8003d38:	0011      	movs	r1, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f000 ff00 	bl	8004b40 <HAL_ADC_PollForConversion>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d126      	bne.n	8003d92 <Measurement_of_ADC_Current_18650+0x86>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc);
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <Measurement_of_ADC_Current_18650+0xa0>)
 8003d46:	0018      	movs	r0, r3
 8003d48:	f000 ff96 	bl	8004c78 <HAL_ADC_GetValue>
 8003d4c:	0002      	movs	r2, r0
 8003d4e:	1cbb      	adds	r3, r7, #2
 8003d50:	801a      	strh	r2, [r3, #0]
	           C_18650 = (((rawValue1 * V_stepSize)/50)/.0299562); //I_load = ((V_ADC / 50 gain) / .03 calibrated shunt)
 8003d52:	1cbb      	adds	r3, r7, #2
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f7fc ff98 	bl	8000c8c <__aeabi_i2f>
 8003d5c:	1c03      	adds	r3, r0, #0
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	1c18      	adds	r0, r3, #0
 8003d62:	f7fc fe45 	bl	80009f0 <__aeabi_fmul>
 8003d66:	1c03      	adds	r3, r0, #0
 8003d68:	4911      	ldr	r1, [pc, #68]	; (8003db0 <Measurement_of_ADC_Current_18650+0xa4>)
 8003d6a:	1c18      	adds	r0, r3, #0
 8003d6c:	f7fc fd26 	bl	80007bc <__aeabi_fdiv>
 8003d70:	1c03      	adds	r3, r0, #0
 8003d72:	1c18      	adds	r0, r3, #0
 8003d74:	f7fe fe6c 	bl	8002a50 <__aeabi_f2d>
 8003d78:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <Measurement_of_ADC_Current_18650+0xa8>)
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <Measurement_of_ADC_Current_18650+0xac>)
 8003d7c:	f7fd fb80 	bl	8001480 <__aeabi_ddiv>
 8003d80:	0002      	movs	r2, r0
 8003d82:	000b      	movs	r3, r1
 8003d84:	0010      	movs	r0, r2
 8003d86:	0019      	movs	r1, r3
 8003d88:	f7fe feaa 	bl	8002ae0 <__aeabi_d2f>
 8003d8c:	1c02      	adds	r2, r0, #0
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <Measurement_of_ADC_Current_18650+0xb0>)
 8003d90:	601a      	str	r2, [r3, #0]
	       }
	    HAL_ADC_Stop(&hadc);
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <Measurement_of_ADC_Current_18650+0xa0>)
 8003d94:	0018      	movs	r0, r3
 8003d96:	f000 fe93 	bl	8004ac0 <HAL_ADC_Stop>
}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b004      	add	sp, #16
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	40533333 	.word	0x40533333
 8003da8:	457ff000 	.word	0x457ff000
 8003dac:	20000210 	.word	0x20000210
 8003db0:	42480000 	.word	0x42480000
 8003db4:	8d3fef03 	.word	0x8d3fef03
 8003db8:	3f9eacd6 	.word	0x3f9eacd6
 8003dbc:	200002d0 	.word	0x200002d0

08003dc0 <Measurement_of_ADC_Current_CMOS>:

void Measurement_of_ADC_Current_CMOS(){
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
	float V_ref = 3.3;  // This is known for each micro controller from data
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <Measurement_of_ADC_Current_CMOS+0x98>)
 8003dc8:	60fb      	str	r3, [r7, #12]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <Measurement_of_ADC_Current_CMOS+0x9c>)
 8003dcc:	60bb      	str	r3, [r7, #8]
		float V_stepSize = V_ref / ADC_resolution;
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7fc fcf3 	bl	80007bc <__aeabi_fdiv>
 8003dd6:	1c03      	adds	r3, r0, #0
 8003dd8:	607b      	str	r3, [r7, #4]
		// ADC
	    /* Start ADC Conversion for ADC1 */
	    ADC_Select_Voltage18650();
 8003dda:	f000 f84b 	bl	8003e74 <ADC_Select_Voltage18650>
	    HAL_ADC_Start(&hadc);
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <Measurement_of_ADC_Current_CMOS+0xa0>)
 8003de0:	0018      	movs	r0, r3
 8003de2:	f000 fe19 	bl	8004a18 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8003de6:	2301      	movs	r3, #1
 8003de8:	425a      	negs	r2, r3
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <Measurement_of_ADC_Current_CMOS+0xa0>)
 8003dec:	0011      	movs	r1, r2
 8003dee:	0018      	movs	r0, r3
 8003df0:	f000 fea6 	bl	8004b40 <HAL_ADC_PollForConversion>
 8003df4:	1e03      	subs	r3, r0, #0
 8003df6:	d126      	bne.n	8003e46 <Measurement_of_ADC_Current_CMOS+0x86>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc);
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <Measurement_of_ADC_Current_CMOS+0xa0>)
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f000 ff3c 	bl	8004c78 <HAL_ADC_GetValue>
 8003e00:	0002      	movs	r2, r0
 8003e02:	1cbb      	adds	r3, r7, #2
 8003e04:	801a      	strh	r2, [r3, #0]
	           C_CMOS = (((rawValue1 * V_stepSize)/20)/4.713492); // I_load = (( V_ADC / 20 Gain ) / 4.71 calibrated shunt )
 8003e06:	1cbb      	adds	r3, r7, #2
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7fc ff3e 	bl	8000c8c <__aeabi_i2f>
 8003e10:	1c03      	adds	r3, r0, #0
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	1c18      	adds	r0, r3, #0
 8003e16:	f7fc fdeb 	bl	80009f0 <__aeabi_fmul>
 8003e1a:	1c03      	adds	r3, r0, #0
 8003e1c:	4911      	ldr	r1, [pc, #68]	; (8003e64 <Measurement_of_ADC_Current_CMOS+0xa4>)
 8003e1e:	1c18      	adds	r0, r3, #0
 8003e20:	f7fc fccc 	bl	80007bc <__aeabi_fdiv>
 8003e24:	1c03      	adds	r3, r0, #0
 8003e26:	1c18      	adds	r0, r3, #0
 8003e28:	f7fe fe12 	bl	8002a50 <__aeabi_f2d>
 8003e2c:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <Measurement_of_ADC_Current_CMOS+0xa8>)
 8003e2e:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <Measurement_of_ADC_Current_CMOS+0xac>)
 8003e30:	f7fd fb26 	bl	8001480 <__aeabi_ddiv>
 8003e34:	0002      	movs	r2, r0
 8003e36:	000b      	movs	r3, r1
 8003e38:	0010      	movs	r0, r2
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	f7fe fe50 	bl	8002ae0 <__aeabi_d2f>
 8003e40:	1c02      	adds	r2, r0, #0
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <Measurement_of_ADC_Current_CMOS+0xb0>)
 8003e44:	601a      	str	r2, [r3, #0]
	       }
	    HAL_ADC_Stop(&hadc);
 8003e46:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <Measurement_of_ADC_Current_CMOS+0xa0>)
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f000 fe39 	bl	8004ac0 <HAL_ADC_Stop>
}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b004      	add	sp, #16
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	40533333 	.word	0x40533333
 8003e5c:	457ff000 	.word	0x457ff000
 8003e60:	20000210 	.word	0x20000210
 8003e64:	41a00000 	.word	0x41a00000
 8003e68:	a597d49d 	.word	0xa597d49d
 8003e6c:	4012da9d 	.word	0x4012da9d
 8003e70:	200002cc 	.word	0x200002cc

08003e74 <ADC_Select_Voltage18650>:


void ADC_Select_Voltage18650(void){
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 8003e7a:	003b      	movs	r3, r7
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	2308      	movs	r3, #8
 8003e80:	001a      	movs	r2, r3
 8003e82:	2100      	movs	r1, #0
 8003e84:	f006 ff8a 	bl	800ad9c <memset>
sConfig.Channel = ADC_CHANNEL_15;
 8003e88:	003b      	movs	r3, r7
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <ADC_Select_Voltage18650+0x40>)
 8003e8c:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003e8e:	003b      	movs	r3, r7
 8003e90:	2280      	movs	r2, #128	; 0x80
 8003e92:	0152      	lsls	r2, r2, #5
 8003e94:	605a      	str	r2, [r3, #4]
if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003e96:	003a      	movs	r2, r7
 8003e98:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <ADC_Select_Voltage18650+0x44>)
 8003e9a:	0011      	movs	r1, r2
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f000 fef7 	bl	8004c90 <HAL_ADC_ConfigChannel>
 8003ea2:	1e03      	subs	r3, r0, #0
 8003ea4:	d001      	beq.n	8003eaa <ADC_Select_Voltage18650+0x36>
{
  Error_Handler();
 8003ea6:	f000 f9dd 	bl	8004264 <Error_Handler>
}
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b002      	add	sp, #8
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	3c008000 	.word	0x3c008000
 8003eb8:	20000210 	.word	0x20000210

08003ebc <ADC_Select_VoltageCMOS>:

void ADC_Select_VoltageCMOS(void){
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 8003ec2:	003b      	movs	r3, r7
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	001a      	movs	r2, r3
 8003eca:	2100      	movs	r1, #0
 8003ecc:	f006 ff66 	bl	800ad9c <memset>
sConfig.Channel = ADC_CHANNEL_13;
 8003ed0:	003b      	movs	r3, r7
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <ADC_Select_VoltageCMOS+0x40>)
 8003ed4:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003ed6:	003b      	movs	r3, r7
 8003ed8:	2280      	movs	r2, #128	; 0x80
 8003eda:	0152      	lsls	r2, r2, #5
 8003edc:	605a      	str	r2, [r3, #4]
if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003ede:	003a      	movs	r2, r7
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <ADC_Select_VoltageCMOS+0x44>)
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f000 fed3 	bl	8004c90 <HAL_ADC_ConfigChannel>
 8003eea:	1e03      	subs	r3, r0, #0
 8003eec:	d001      	beq.n	8003ef2 <ADC_Select_VoltageCMOS+0x36>
{
Error_Handler();
 8003eee:	f000 f9b9 	bl	8004264 <Error_Handler>
}

}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b002      	add	sp, #8
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	34002000 	.word	0x34002000
 8003f00:	20000210 	.word	0x20000210

08003f04 <readNumber>:
Error_Handler();
}

}

void readNumber() {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003f08:	4bd3      	ldr	r3, [pc, #844]	; (8004258 <readNumber+0x354>)
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f001 fa95 	bl	800543c <HAL_GPIO_ReadPin>
 8003f12:	1e03      	subs	r3, r0, #0
 8003f14:	d12b      	bne.n	8003f6e <readNumber+0x6a>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003f16:	4bd0      	ldr	r3, [pc, #832]	; (8004258 <readNumber+0x354>)
 8003f18:	2102      	movs	r1, #2
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f001 fa8e 	bl	800543c <HAL_GPIO_ReadPin>
 8003f20:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003f22:	d124      	bne.n	8003f6e <readNumber+0x6a>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003f24:	4bcd      	ldr	r3, [pc, #820]	; (800425c <readNumber+0x358>)
 8003f26:	2101      	movs	r1, #1
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f001 fa87 	bl	800543c <HAL_GPIO_ReadPin>
 8003f2e:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003f30:	d11d      	bne.n	8003f6e <readNumber+0x6a>
		HAL_Delay(5);
 8003f32:	2005      	movs	r0, #5
 8003f34:	f000 fbd8 	bl	80046e8 <HAL_Delay>
		valueToAdjust = 0;
 8003f38:	4bc9      	ldr	r3, [pc, #804]	; (8004260 <readNumber+0x35c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
		// Set LED to Off
		HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	0059      	lsls	r1, r3, #1
 8003f42:	23a0      	movs	r3, #160	; 0xa0
 8003f44:	05db      	lsls	r3, r3, #23
 8003f46:	2200      	movs	r2, #0
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f001 fa94 	bl	8005476 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	0099      	lsls	r1, r3, #2
 8003f52:	23a0      	movs	r3, #160	; 0xa0
 8003f54:	05db      	lsls	r3, r3, #23
 8003f56:	2200      	movs	r2, #0
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f001 fa8c 	bl	8005476 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	00d9      	lsls	r1, r3, #3
 8003f62:	23a0      	movs	r3, #160	; 0xa0
 8003f64:	05db      	lsls	r3, r3, #23
 8003f66:	2200      	movs	r2, #0
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f001 fa84 	bl	8005476 <HAL_GPIO_WritePin>

		}

	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003f6e:	4bba      	ldr	r3, [pc, #744]	; (8004258 <readNumber+0x354>)
 8003f70:	2101      	movs	r1, #1
 8003f72:	0018      	movs	r0, r3
 8003f74:	f001 fa62 	bl	800543c <HAL_GPIO_ReadPin>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d12b      	bne.n	8003fd6 <readNumber+0xd2>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003f7e:	4bb6      	ldr	r3, [pc, #728]	; (8004258 <readNumber+0x354>)
 8003f80:	2102      	movs	r1, #2
 8003f82:	0018      	movs	r0, r3
 8003f84:	f001 fa5a 	bl	800543c <HAL_GPIO_ReadPin>
 8003f88:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003f8a:	d124      	bne.n	8003fd6 <readNumber+0xd2>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003f8c:	4bb3      	ldr	r3, [pc, #716]	; (800425c <readNumber+0x358>)
 8003f8e:	2101      	movs	r1, #1
 8003f90:	0018      	movs	r0, r3
 8003f92:	f001 fa53 	bl	800543c <HAL_GPIO_ReadPin>
 8003f96:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003f98:	d11d      	bne.n	8003fd6 <readNumber+0xd2>
		HAL_Delay(5);
 8003f9a:	2005      	movs	r0, #5
 8003f9c:	f000 fba4 	bl	80046e8 <HAL_Delay>
		valueToAdjust = 1;
 8003fa0:	4baf      	ldr	r3, [pc, #700]	; (8004260 <readNumber+0x35c>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
		// Set Red
		HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	0059      	lsls	r1, r3, #1
 8003faa:	23a0      	movs	r3, #160	; 0xa0
 8003fac:	05db      	lsls	r3, r3, #23
 8003fae:	2201      	movs	r2, #1
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f001 fa60 	bl	8005476 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	0099      	lsls	r1, r3, #2
 8003fba:	23a0      	movs	r3, #160	; 0xa0
 8003fbc:	05db      	lsls	r3, r3, #23
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f001 fa58 	bl	8005476 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	00d9      	lsls	r1, r3, #3
 8003fca:	23a0      	movs	r3, #160	; 0xa0
 8003fcc:	05db      	lsls	r3, r3, #23
 8003fce:	2200      	movs	r2, #0
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f001 fa50 	bl	8005476 <HAL_GPIO_WritePin>

	}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003fd6:	4ba0      	ldr	r3, [pc, #640]	; (8004258 <readNumber+0x354>)
 8003fd8:	2101      	movs	r1, #1
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f001 fa2e 	bl	800543c <HAL_GPIO_ReadPin>
 8003fe0:	1e03      	subs	r3, r0, #0
 8003fe2:	d12c      	bne.n	800403e <readNumber+0x13a>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003fe4:	4b9c      	ldr	r3, [pc, #624]	; (8004258 <readNumber+0x354>)
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f001 fa27 	bl	800543c <HAL_GPIO_ReadPin>
 8003fee:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d124      	bne.n	800403e <readNumber+0x13a>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003ff4:	4b99      	ldr	r3, [pc, #612]	; (800425c <readNumber+0x358>)
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f001 fa1f 	bl	800543c <HAL_GPIO_ReadPin>
 8003ffe:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8004000:	d11d      	bne.n	800403e <readNumber+0x13a>
		HAL_Delay(5);
 8004002:	2005      	movs	r0, #5
 8004004:	f000 fb70 	bl	80046e8 <HAL_Delay>
		valueToAdjust = 2;
 8004008:	4b95      	ldr	r3, [pc, #596]	; (8004260 <readNumber+0x35c>)
 800400a:	2202      	movs	r2, #2
 800400c:	601a      	str	r2, [r3, #0]
		// Set Yellow
		HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	0059      	lsls	r1, r3, #1
 8004012:	23a0      	movs	r3, #160	; 0xa0
 8004014:	05db      	lsls	r3, r3, #23
 8004016:	2201      	movs	r2, #1
 8004018:	0018      	movs	r0, r3
 800401a:	f001 fa2c 	bl	8005476 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	0099      	lsls	r1, r3, #2
 8004022:	23a0      	movs	r3, #160	; 0xa0
 8004024:	05db      	lsls	r3, r3, #23
 8004026:	2201      	movs	r2, #1
 8004028:	0018      	movs	r0, r3
 800402a:	f001 fa24 	bl	8005476 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	00d9      	lsls	r1, r3, #3
 8004032:	23a0      	movs	r3, #160	; 0xa0
 8004034:	05db      	lsls	r3, r3, #23
 8004036:	2200      	movs	r2, #0
 8004038:	0018      	movs	r0, r3
 800403a:	f001 fa1c 	bl	8005476 <HAL_GPIO_WritePin>

	}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 800403e:	4b86      	ldr	r3, [pc, #536]	; (8004258 <readNumber+0x354>)
 8004040:	2101      	movs	r1, #1
 8004042:	0018      	movs	r0, r3
 8004044:	f001 f9fa 	bl	800543c <HAL_GPIO_ReadPin>
 8004048:	0003      	movs	r3, r0
 800404a:	2b01      	cmp	r3, #1
 800404c:	d12c      	bne.n	80040a8 <readNumber+0x1a4>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 800404e:	4b82      	ldr	r3, [pc, #520]	; (8004258 <readNumber+0x354>)
 8004050:	2102      	movs	r1, #2
 8004052:	0018      	movs	r0, r3
 8004054:	f001 f9f2 	bl	800543c <HAL_GPIO_ReadPin>
 8004058:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 800405a:	2b01      	cmp	r3, #1
 800405c:	d124      	bne.n	80040a8 <readNumber+0x1a4>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 800405e:	4b7f      	ldr	r3, [pc, #508]	; (800425c <readNumber+0x358>)
 8004060:	2101      	movs	r1, #1
 8004062:	0018      	movs	r0, r3
 8004064:	f001 f9ea 	bl	800543c <HAL_GPIO_ReadPin>
 8004068:	1e03      	subs	r3, r0, #0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 800406a:	d11d      	bne.n	80040a8 <readNumber+0x1a4>
			HAL_Delay(5);
 800406c:	2005      	movs	r0, #5
 800406e:	f000 fb3b 	bl	80046e8 <HAL_Delay>
			valueToAdjust = 3;
 8004072:	4b7b      	ldr	r3, [pc, #492]	; (8004260 <readNumber+0x35c>)
 8004074:	2203      	movs	r2, #3
 8004076:	601a      	str	r2, [r3, #0]
			// Set Green
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	0059      	lsls	r1, r3, #1
 800407c:	23a0      	movs	r3, #160	; 0xa0
 800407e:	05db      	lsls	r3, r3, #23
 8004080:	2200      	movs	r2, #0
 8004082:	0018      	movs	r0, r3
 8004084:	f001 f9f7 	bl	8005476 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	0099      	lsls	r1, r3, #2
 800408c:	23a0      	movs	r3, #160	; 0xa0
 800408e:	05db      	lsls	r3, r3, #23
 8004090:	2201      	movs	r2, #1
 8004092:	0018      	movs	r0, r3
 8004094:	f001 f9ef 	bl	8005476 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	00d9      	lsls	r1, r3, #3
 800409c:	23a0      	movs	r3, #160	; 0xa0
 800409e:	05db      	lsls	r3, r3, #23
 80040a0:	2200      	movs	r2, #0
 80040a2:	0018      	movs	r0, r3
 80040a4:	f001 f9e7 	bl	8005476 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 80040a8:	4b6b      	ldr	r3, [pc, #428]	; (8004258 <readNumber+0x354>)
 80040aa:	2101      	movs	r1, #1
 80040ac:	0018      	movs	r0, r3
 80040ae:	f001 f9c5 	bl	800543c <HAL_GPIO_ReadPin>
 80040b2:	1e03      	subs	r3, r0, #0
 80040b4:	d12c      	bne.n	8004110 <readNumber+0x20c>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 80040b6:	4b68      	ldr	r3, [pc, #416]	; (8004258 <readNumber+0x354>)
 80040b8:	2102      	movs	r1, #2
 80040ba:	0018      	movs	r0, r3
 80040bc:	f001 f9be 	bl	800543c <HAL_GPIO_ReadPin>
 80040c0:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 80040c2:	d125      	bne.n	8004110 <readNumber+0x20c>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 80040c4:	4b65      	ldr	r3, [pc, #404]	; (800425c <readNumber+0x358>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	0018      	movs	r0, r3
 80040ca:	f001 f9b7 	bl	800543c <HAL_GPIO_ReadPin>
 80040ce:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d11d      	bne.n	8004110 <readNumber+0x20c>
			HAL_Delay(5);
 80040d4:	2005      	movs	r0, #5
 80040d6:	f000 fb07 	bl	80046e8 <HAL_Delay>
			valueToAdjust = 4;
 80040da:	4b61      	ldr	r3, [pc, #388]	; (8004260 <readNumber+0x35c>)
 80040dc:	2204      	movs	r2, #4
 80040de:	601a      	str	r2, [r3, #0]
			// Set Cyan
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 80040e0:	2380      	movs	r3, #128	; 0x80
 80040e2:	0059      	lsls	r1, r3, #1
 80040e4:	23a0      	movs	r3, #160	; 0xa0
 80040e6:	05db      	lsls	r3, r3, #23
 80040e8:	2200      	movs	r2, #0
 80040ea:	0018      	movs	r0, r3
 80040ec:	f001 f9c3 	bl	8005476 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	0099      	lsls	r1, r3, #2
 80040f4:	23a0      	movs	r3, #160	; 0xa0
 80040f6:	05db      	lsls	r3, r3, #23
 80040f8:	2201      	movs	r2, #1
 80040fa:	0018      	movs	r0, r3
 80040fc:	f001 f9bb 	bl	8005476 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	00d9      	lsls	r1, r3, #3
 8004104:	23a0      	movs	r3, #160	; 0xa0
 8004106:	05db      	lsls	r3, r3, #23
 8004108:	2201      	movs	r2, #1
 800410a:	0018      	movs	r0, r3
 800410c:	f001 f9b3 	bl	8005476 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8004110:	4b51      	ldr	r3, [pc, #324]	; (8004258 <readNumber+0x354>)
 8004112:	2101      	movs	r1, #1
 8004114:	0018      	movs	r0, r3
 8004116:	f001 f991 	bl	800543c <HAL_GPIO_ReadPin>
 800411a:	0003      	movs	r3, r0
 800411c:	2b01      	cmp	r3, #1
 800411e:	d12c      	bne.n	800417a <readNumber+0x276>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8004120:	4b4d      	ldr	r3, [pc, #308]	; (8004258 <readNumber+0x354>)
 8004122:	2102      	movs	r1, #2
 8004124:	0018      	movs	r0, r3
 8004126:	f001 f989 	bl	800543c <HAL_GPIO_ReadPin>
 800412a:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 800412c:	d125      	bne.n	800417a <readNumber+0x276>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 800412e:	4b4b      	ldr	r3, [pc, #300]	; (800425c <readNumber+0x358>)
 8004130:	2101      	movs	r1, #1
 8004132:	0018      	movs	r0, r3
 8004134:	f001 f982 	bl	800543c <HAL_GPIO_ReadPin>
 8004138:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 800413a:	2b01      	cmp	r3, #1
 800413c:	d11d      	bne.n	800417a <readNumber+0x276>
			HAL_Delay(5);
 800413e:	2005      	movs	r0, #5
 8004140:	f000 fad2 	bl	80046e8 <HAL_Delay>
			valueToAdjust = 5;
 8004144:	4b46      	ldr	r3, [pc, #280]	; (8004260 <readNumber+0x35c>)
 8004146:	2205      	movs	r2, #5
 8004148:	601a      	str	r2, [r3, #0]
			// Set Blue
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	0059      	lsls	r1, r3, #1
 800414e:	23a0      	movs	r3, #160	; 0xa0
 8004150:	05db      	lsls	r3, r3, #23
 8004152:	2200      	movs	r2, #0
 8004154:	0018      	movs	r0, r3
 8004156:	f001 f98e 	bl	8005476 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	0099      	lsls	r1, r3, #2
 800415e:	23a0      	movs	r3, #160	; 0xa0
 8004160:	05db      	lsls	r3, r3, #23
 8004162:	2200      	movs	r2, #0
 8004164:	0018      	movs	r0, r3
 8004166:	f001 f986 	bl	8005476 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	00d9      	lsls	r1, r3, #3
 800416e:	23a0      	movs	r3, #160	; 0xa0
 8004170:	05db      	lsls	r3, r3, #23
 8004172:	2201      	movs	r2, #1
 8004174:	0018      	movs	r0, r3
 8004176:	f001 f97e 	bl	8005476 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 800417a:	4b37      	ldr	r3, [pc, #220]	; (8004258 <readNumber+0x354>)
 800417c:	2101      	movs	r1, #1
 800417e:	0018      	movs	r0, r3
 8004180:	f001 f95c 	bl	800543c <HAL_GPIO_ReadPin>
 8004184:	1e03      	subs	r3, r0, #0
 8004186:	d12d      	bne.n	80041e4 <readNumber+0x2e0>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8004188:	4b33      	ldr	r3, [pc, #204]	; (8004258 <readNumber+0x354>)
 800418a:	2102      	movs	r1, #2
 800418c:	0018      	movs	r0, r3
 800418e:	f001 f955 	bl	800543c <HAL_GPIO_ReadPin>
 8004192:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8004194:	2b01      	cmp	r3, #1
 8004196:	d125      	bne.n	80041e4 <readNumber+0x2e0>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8004198:	4b30      	ldr	r3, [pc, #192]	; (800425c <readNumber+0x358>)
 800419a:	2101      	movs	r1, #1
 800419c:	0018      	movs	r0, r3
 800419e:	f001 f94d 	bl	800543c <HAL_GPIO_ReadPin>
 80041a2:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d11d      	bne.n	80041e4 <readNumber+0x2e0>
			HAL_Delay(5);
 80041a8:	2005      	movs	r0, #5
 80041aa:	f000 fa9d 	bl	80046e8 <HAL_Delay>
			valueToAdjust = 6;
 80041ae:	4b2c      	ldr	r3, [pc, #176]	; (8004260 <readNumber+0x35c>)
 80041b0:	2206      	movs	r2, #6
 80041b2:	601a      	str	r2, [r3, #0]
			// Set Magenta
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	0059      	lsls	r1, r3, #1
 80041b8:	23a0      	movs	r3, #160	; 0xa0
 80041ba:	05db      	lsls	r3, r3, #23
 80041bc:	2201      	movs	r2, #1
 80041be:	0018      	movs	r0, r3
 80041c0:	f001 f959 	bl	8005476 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	0099      	lsls	r1, r3, #2
 80041c8:	23a0      	movs	r3, #160	; 0xa0
 80041ca:	05db      	lsls	r3, r3, #23
 80041cc:	2200      	movs	r2, #0
 80041ce:	0018      	movs	r0, r3
 80041d0:	f001 f951 	bl	8005476 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	00d9      	lsls	r1, r3, #3
 80041d8:	23a0      	movs	r3, #160	; 0xa0
 80041da:	05db      	lsls	r3, r3, #23
 80041dc:	2201      	movs	r2, #1
 80041de:	0018      	movs	r0, r3
 80041e0:	f001 f949 	bl	8005476 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 80041e4:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <readNumber+0x354>)
 80041e6:	2101      	movs	r1, #1
 80041e8:	0018      	movs	r0, r3
 80041ea:	f001 f927 	bl	800543c <HAL_GPIO_ReadPin>
 80041ee:	0003      	movs	r3, r0
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d12d      	bne.n	8004250 <readNumber+0x34c>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80041f4:	4b18      	ldr	r3, [pc, #96]	; (8004258 <readNumber+0x354>)
 80041f6:	2102      	movs	r1, #2
 80041f8:	0018      	movs	r0, r3
 80041fa:	f001 f91f 	bl	800543c <HAL_GPIO_ReadPin>
 80041fe:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8004200:	2b01      	cmp	r3, #1
 8004202:	d125      	bne.n	8004250 <readNumber+0x34c>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8004204:	4b15      	ldr	r3, [pc, #84]	; (800425c <readNumber+0x358>)
 8004206:	2101      	movs	r1, #1
 8004208:	0018      	movs	r0, r3
 800420a:	f001 f917 	bl	800543c <HAL_GPIO_ReadPin>
 800420e:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8004210:	2b01      	cmp	r3, #1
 8004212:	d11d      	bne.n	8004250 <readNumber+0x34c>
			HAL_Delay(5);
 8004214:	2005      	movs	r0, #5
 8004216:	f000 fa67 	bl	80046e8 <HAL_Delay>
			valueToAdjust = 7;
 800421a:	4b11      	ldr	r3, [pc, #68]	; (8004260 <readNumber+0x35c>)
 800421c:	2207      	movs	r2, #7
 800421e:	601a      	str	r2, [r3, #0]
			// Set White
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	0059      	lsls	r1, r3, #1
 8004224:	23a0      	movs	r3, #160	; 0xa0
 8004226:	05db      	lsls	r3, r3, #23
 8004228:	2201      	movs	r2, #1
 800422a:	0018      	movs	r0, r3
 800422c:	f001 f923 	bl	8005476 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	0099      	lsls	r1, r3, #2
 8004234:	23a0      	movs	r3, #160	; 0xa0
 8004236:	05db      	lsls	r3, r3, #23
 8004238:	2201      	movs	r2, #1
 800423a:	0018      	movs	r0, r3
 800423c:	f001 f91b 	bl	8005476 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	00d9      	lsls	r1, r3, #3
 8004244:	23a0      	movs	r3, #160	; 0xa0
 8004246:	05db      	lsls	r3, r3, #23
 8004248:	2201      	movs	r2, #1
 800424a:	0018      	movs	r0, r3
 800424c:	f001 f913 	bl	8005476 <HAL_GPIO_WritePin>

		}
}
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	50000800 	.word	0x50000800
 800425c:	50000400 	.word	0x50000400
 8004260:	200002dc 	.word	0x200002dc

08004264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004268:	b672      	cpsid	i
}
 800426a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800426c:	e7fe      	b.n	800426c <Error_Handler+0x8>
	...

08004270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004274:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_MspInit+0x24>)
 8004276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_MspInit+0x24>)
 800427a:	2101      	movs	r1, #1
 800427c:	430a      	orrs	r2, r1
 800427e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004280:	4b04      	ldr	r3, [pc, #16]	; (8004294 <HAL_MspInit+0x24>)
 8004282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_MspInit+0x24>)
 8004286:	2180      	movs	r1, #128	; 0x80
 8004288:	0549      	lsls	r1, r1, #21
 800428a:	430a      	orrs	r2, r1
 800428c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000

08004298 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a0:	240c      	movs	r4, #12
 80042a2:	193b      	adds	r3, r7, r4
 80042a4:	0018      	movs	r0, r3
 80042a6:	2314      	movs	r3, #20
 80042a8:	001a      	movs	r2, r3
 80042aa:	2100      	movs	r1, #0
 80042ac:	f006 fd76 	bl	800ad9c <memset>
  if(hadc->Instance==ADC1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <HAL_ADC_MspInit+0x70>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d121      	bne.n	80042fe <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042ba:	4b14      	ldr	r3, [pc, #80]	; (800430c <HAL_ADC_MspInit+0x74>)
 80042bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <HAL_ADC_MspInit+0x74>)
 80042c0:	2180      	movs	r1, #128	; 0x80
 80042c2:	0089      	lsls	r1, r1, #2
 80042c4:	430a      	orrs	r2, r1
 80042c6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042c8:	4b10      	ldr	r3, [pc, #64]	; (800430c <HAL_ADC_MspInit+0x74>)
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <HAL_ADC_MspInit+0x74>)
 80042ce:	2104      	movs	r1, #4
 80042d0:	430a      	orrs	r2, r1
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80042d4:	4b0d      	ldr	r3, [pc, #52]	; (800430c <HAL_ADC_MspInit+0x74>)
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	2204      	movs	r2, #4
 80042da:	4013      	ands	r3, r2
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = Current_ADC_CMOS_Pin|Voltage_ADC_CMOS_Pin|Current_ADC_18650_Pin|Voltage_ADC_18650_Pin;
 80042e0:	193b      	adds	r3, r7, r4
 80042e2:	223c      	movs	r2, #60	; 0x3c
 80042e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042e6:	193b      	adds	r3, r7, r4
 80042e8:	2203      	movs	r2, #3
 80042ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	193b      	adds	r3, r7, r4
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042f2:	193b      	adds	r3, r7, r4
 80042f4:	4a06      	ldr	r2, [pc, #24]	; (8004310 <HAL_ADC_MspInit+0x78>)
 80042f6:	0019      	movs	r1, r3
 80042f8:	0010      	movs	r0, r2
 80042fa:	f000 ff21 	bl	8005140 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	b009      	add	sp, #36	; 0x24
 8004304:	bd90      	pop	{r4, r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	40012400 	.word	0x40012400
 800430c:	40021000 	.word	0x40021000
 8004310:	50000800 	.word	0x50000800

08004314 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b089      	sub	sp, #36	; 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431c:	240c      	movs	r4, #12
 800431e:	193b      	adds	r3, r7, r4
 8004320:	0018      	movs	r0, r3
 8004322:	2314      	movs	r3, #20
 8004324:	001a      	movs	r2, r3
 8004326:	2100      	movs	r1, #0
 8004328:	f006 fd38 	bl	800ad9c <memset>
  if(hspi->Instance==SPI1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a18      	ldr	r2, [pc, #96]	; (8004394 <HAL_SPI_MspInit+0x80>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d129      	bne.n	800438a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004336:	4b18      	ldr	r3, [pc, #96]	; (8004398 <HAL_SPI_MspInit+0x84>)
 8004338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800433a:	4b17      	ldr	r3, [pc, #92]	; (8004398 <HAL_SPI_MspInit+0x84>)
 800433c:	2180      	movs	r1, #128	; 0x80
 800433e:	0149      	lsls	r1, r1, #5
 8004340:	430a      	orrs	r2, r1
 8004342:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <HAL_SPI_MspInit+0x84>)
 8004346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_SPI_MspInit+0x84>)
 800434a:	2101      	movs	r1, #1
 800434c:	430a      	orrs	r2, r1
 800434e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004350:	4b11      	ldr	r3, [pc, #68]	; (8004398 <HAL_SPI_MspInit+0x84>)
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	2201      	movs	r2, #1
 8004356:	4013      	ands	r3, r2
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800435c:	0021      	movs	r1, r4
 800435e:	187b      	adds	r3, r7, r1
 8004360:	22e0      	movs	r2, #224	; 0xe0
 8004362:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004364:	187b      	adds	r3, r7, r1
 8004366:	2202      	movs	r2, #2
 8004368:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436a:	187b      	adds	r3, r7, r1
 800436c:	2200      	movs	r2, #0
 800436e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004370:	187b      	adds	r3, r7, r1
 8004372:	2203      	movs	r2, #3
 8004374:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004376:	187b      	adds	r3, r7, r1
 8004378:	2200      	movs	r2, #0
 800437a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437c:	187a      	adds	r2, r7, r1
 800437e:	23a0      	movs	r3, #160	; 0xa0
 8004380:	05db      	lsls	r3, r3, #23
 8004382:	0011      	movs	r1, r2
 8004384:	0018      	movs	r0, r3
 8004386:	f000 fedb 	bl	8005140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	46bd      	mov	sp, r7
 800438e:	b009      	add	sp, #36	; 0x24
 8004390:	bd90      	pop	{r4, r7, pc}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	40013000 	.word	0x40013000
 8004398:	40021000 	.word	0x40021000

0800439c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043a0:	e7fe      	b.n	80043a0 <NMI_Handler+0x4>

080043a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043a6:	e7fe      	b.n	80043a6 <HardFault_Handler+0x4>

080043a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80043ac:	46c0      	nop			; (mov r8, r8)
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	if(Timer1 > 0)
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <PendSV_Handler+0x34>)
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <PendSV_Handler+0x18>
	  Timer1--;
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <PendSV_Handler+0x34>)
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <PendSV_Handler+0x34>)
 80043ca:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <PendSV_Handler+0x38>)
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <PendSV_Handler+0x2c>
	  Timer2--;
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <PendSV_Handler+0x38>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	4b03      	ldr	r3, [pc, #12]	; (80043ec <PendSV_Handler+0x38>)
 80043de:	801a      	strh	r2, [r3, #0]
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043e0:	46c0      	nop			; (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	20000208 	.word	0x20000208
 80043ec:	2000020a 	.word	0x2000020a

080043f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043f4:	f000 f95c 	bl	80046b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043f8:	46c0      	nop			; (mov r8, r8)
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <_getpid>:
 80043fe:	b580      	push	{r7, lr}
 8004400:	af00      	add	r7, sp, #0
 8004402:	2301      	movs	r3, #1
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <_kill>:
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
 8004414:	f006 fd1c 	bl	800ae50 <__errno>
 8004418:	0003      	movs	r3, r0
 800441a:	2216      	movs	r2, #22
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	2301      	movs	r3, #1
 8004420:	425b      	negs	r3, r3
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b002      	add	sp, #8
 8004428:	bd80      	pop	{r7, pc}

0800442a <_exit>:
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	2301      	movs	r3, #1
 8004434:	425a      	negs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0011      	movs	r1, r2
 800443a:	0018      	movs	r0, r3
 800443c:	f7ff ffe5 	bl	800440a <_kill>
 8004440:	e7fe      	b.n	8004440 <_exit+0x16>

08004442 <_read>:
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e00a      	b.n	800446a <_read+0x28>
 8004454:	e000      	b.n	8004458 <_read+0x16>
 8004456:	bf00      	nop
 8004458:	0001      	movs	r1, r0
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	60ba      	str	r2, [r7, #8]
 8004460:	b2ca      	uxtb	r2, r1
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	3301      	adds	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	dbf0      	blt.n	8004454 <_read+0x12>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	0018      	movs	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	b006      	add	sp, #24
 800447a:	bd80      	pop	{r7, pc}

0800447c <_write>:
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e009      	b.n	80044a2 <_write+0x26>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	60ba      	str	r2, [r7, #8]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	0018      	movs	r0, r3
 8004498:	f7ff fb02 	bl	8003aa0 <__io_putchar>
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	3301      	adds	r3, #1
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	dbf1      	blt.n	800448e <_write+0x12>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	0018      	movs	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b006      	add	sp, #24
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <_close>:
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	2301      	movs	r3, #1
 80044be:	425b      	negs	r3, r3
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b002      	add	sp, #8
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_fstat>:
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2280      	movs	r2, #128	; 0x80
 80044d6:	0192      	lsls	r2, r2, #6
 80044d8:	605a      	str	r2, [r3, #4]
 80044da:	2300      	movs	r3, #0
 80044dc:	0018      	movs	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	b002      	add	sp, #8
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <_isatty>:
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	2301      	movs	r3, #1
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b002      	add	sp, #8
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <_lseek>:
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	2300      	movs	r3, #0
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	b004      	add	sp, #16
 800450a:	bd80      	pop	{r7, pc}

0800450c <_sbrk>:
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	4a14      	ldr	r2, [pc, #80]	; (8004568 <_sbrk+0x5c>)
 8004516:	4b15      	ldr	r3, [pc, #84]	; (800456c <_sbrk+0x60>)
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	4b13      	ldr	r3, [pc, #76]	; (8004570 <_sbrk+0x64>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d102      	bne.n	800452e <_sbrk+0x22>
 8004528:	4b11      	ldr	r3, [pc, #68]	; (8004570 <_sbrk+0x64>)
 800452a:	4a12      	ldr	r2, [pc, #72]	; (8004574 <_sbrk+0x68>)
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	4b10      	ldr	r3, [pc, #64]	; (8004570 <_sbrk+0x64>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	18d3      	adds	r3, r2, r3
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	429a      	cmp	r2, r3
 800453a:	d207      	bcs.n	800454c <_sbrk+0x40>
 800453c:	f006 fc88 	bl	800ae50 <__errno>
 8004540:	0003      	movs	r3, r0
 8004542:	220c      	movs	r2, #12
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	2301      	movs	r3, #1
 8004548:	425b      	negs	r3, r3
 800454a:	e009      	b.n	8004560 <_sbrk+0x54>
 800454c:	4b08      	ldr	r3, [pc, #32]	; (8004570 <_sbrk+0x64>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <_sbrk+0x64>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	18d2      	adds	r2, r2, r3
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <_sbrk+0x64>)
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b006      	add	sp, #24
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20005000 	.word	0x20005000
 800456c:	00000400 	.word	0x00000400
 8004570:	200002e0 	.word	0x200002e0
 8004574:	20000670 	.word	0x20000670

08004578 <SystemInit>:
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
 800457c:	46c0      	nop			; (mov r8, r8)
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <Reset_Handler>:
 8004584:	4813      	ldr	r0, [pc, #76]	; (80045d4 <LoopForever+0x2>)
 8004586:	4685      	mov	sp, r0
 8004588:	f7ff fff6 	bl	8004578 <SystemInit>
 800458c:	4812      	ldr	r0, [pc, #72]	; (80045d8 <LoopForever+0x6>)
 800458e:	6801      	ldr	r1, [r0, #0]
 8004590:	0e09      	lsrs	r1, r1, #24
 8004592:	4a12      	ldr	r2, [pc, #72]	; (80045dc <LoopForever+0xa>)
 8004594:	4291      	cmp	r1, r2
 8004596:	d105      	bne.n	80045a4 <ApplicationStart>
 8004598:	4811      	ldr	r0, [pc, #68]	; (80045e0 <LoopForever+0xe>)
 800459a:	4912      	ldr	r1, [pc, #72]	; (80045e4 <LoopForever+0x12>)
 800459c:	6001      	str	r1, [r0, #0]
 800459e:	4812      	ldr	r0, [pc, #72]	; (80045e8 <LoopForever+0x16>)
 80045a0:	4912      	ldr	r1, [pc, #72]	; (80045ec <LoopForever+0x1a>)
 80045a2:	6001      	str	r1, [r0, #0]

080045a4 <ApplicationStart>:
 80045a4:	4812      	ldr	r0, [pc, #72]	; (80045f0 <LoopForever+0x1e>)
 80045a6:	4913      	ldr	r1, [pc, #76]	; (80045f4 <LoopForever+0x22>)
 80045a8:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <LoopForever+0x26>)
 80045aa:	2300      	movs	r3, #0
 80045ac:	e002      	b.n	80045b4 <LoopCopyDataInit>

080045ae <CopyDataInit>:
 80045ae:	58d4      	ldr	r4, [r2, r3]
 80045b0:	50c4      	str	r4, [r0, r3]
 80045b2:	3304      	adds	r3, #4

080045b4 <LoopCopyDataInit>:
 80045b4:	18c4      	adds	r4, r0, r3
 80045b6:	428c      	cmp	r4, r1
 80045b8:	d3f9      	bcc.n	80045ae <CopyDataInit>
 80045ba:	4a10      	ldr	r2, [pc, #64]	; (80045fc <LoopForever+0x2a>)
 80045bc:	4c10      	ldr	r4, [pc, #64]	; (8004600 <LoopForever+0x2e>)
 80045be:	2300      	movs	r3, #0
 80045c0:	e001      	b.n	80045c6 <LoopFillZerobss>

080045c2 <FillZerobss>:
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	3204      	adds	r2, #4

080045c6 <LoopFillZerobss>:
 80045c6:	42a2      	cmp	r2, r4
 80045c8:	d3fb      	bcc.n	80045c2 <FillZerobss>
 80045ca:	f006 fc47 	bl	800ae5c <__libc_init_array>
 80045ce:	f7ff f871 	bl	80036b4 <main>

080045d2 <LoopForever>:
 80045d2:	e7fe      	b.n	80045d2 <LoopForever>
 80045d4:	20005000 	.word	0x20005000
 80045d8:	00000004 	.word	0x00000004
 80045dc:	0000001f 	.word	0x0000001f
 80045e0:	40021034 	.word	0x40021034
 80045e4:	00000001 	.word	0x00000001
 80045e8:	40010000 	.word	0x40010000
 80045ec:	00000000 	.word	0x00000000
 80045f0:	20000000 	.word	0x20000000
 80045f4:	200001ec 	.word	0x200001ec
 80045f8:	0800f1a0 	.word	0x0800f1a0
 80045fc:	200001ec 	.word	0x200001ec
 8004600:	20000670 	.word	0x20000670

08004604 <ADC1_IRQHandler>:
 8004604:	e7fe      	b.n	8004604 <ADC1_IRQHandler>
	...

08004608 <HAL_Init>:
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	1dfb      	adds	r3, r7, #7
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_Init+0x3c>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <HAL_Init+0x3c>)
 800461a:	2140      	movs	r1, #64	; 0x40
 800461c:	430a      	orrs	r2, r1
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	2003      	movs	r0, #3
 8004622:	f000 f811 	bl	8004648 <HAL_InitTick>
 8004626:	1e03      	subs	r3, r0, #0
 8004628:	d003      	beq.n	8004632 <HAL_Init+0x2a>
 800462a:	1dfb      	adds	r3, r7, #7
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	e001      	b.n	8004636 <HAL_Init+0x2e>
 8004632:	f7ff fe1d 	bl	8004270 <HAL_MspInit>
 8004636:	1dfb      	adds	r3, r7, #7
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	0018      	movs	r0, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	b002      	add	sp, #8
 8004640:	bd80      	pop	{r7, pc}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	40022000 	.word	0x40022000

08004648 <HAL_InitTick>:
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <HAL_InitTick+0x5c>)
 8004652:	681c      	ldr	r4, [r3, #0]
 8004654:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <HAL_InitTick+0x60>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	0019      	movs	r1, r3
 800465a:	23fa      	movs	r3, #250	; 0xfa
 800465c:	0098      	lsls	r0, r3, #2
 800465e:	f7fb fd6f 	bl	8000140 <__udivsi3>
 8004662:	0003      	movs	r3, r0
 8004664:	0019      	movs	r1, r3
 8004666:	0020      	movs	r0, r4
 8004668:	f7fb fd6a 	bl	8000140 <__udivsi3>
 800466c:	0003      	movs	r3, r0
 800466e:	0018      	movs	r0, r3
 8004670:	f000 fd59 	bl	8005126 <HAL_SYSTICK_Config>
 8004674:	1e03      	subs	r3, r0, #0
 8004676:	d001      	beq.n	800467c <HAL_InitTick+0x34>
 8004678:	2301      	movs	r3, #1
 800467a:	e00f      	b.n	800469c <HAL_InitTick+0x54>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b03      	cmp	r3, #3
 8004680:	d80b      	bhi.n	800469a <HAL_InitTick+0x52>
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	2301      	movs	r3, #1
 8004686:	425b      	negs	r3, r3
 8004688:	2200      	movs	r2, #0
 800468a:	0018      	movs	r0, r3
 800468c:	f000 fd36 	bl	80050fc <HAL_NVIC_SetPriority>
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <HAL_InitTick+0x64>)
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	2300      	movs	r3, #0
 8004698:	e000      	b.n	800469c <HAL_InitTick+0x54>
 800469a:	2301      	movs	r3, #1
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	b003      	add	sp, #12
 80046a2:	bd90      	pop	{r4, r7, pc}
 80046a4:	20000004 	.word	0x20000004
 80046a8:	2000000c 	.word	0x2000000c
 80046ac:	20000008 	.word	0x20000008

080046b0 <HAL_IncTick>:
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_IncTick+0x1c>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	001a      	movs	r2, r3
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_IncTick+0x20>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	18d2      	adds	r2, r2, r3
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <HAL_IncTick+0x20>)
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	46c0      	nop			; (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	2000000c 	.word	0x2000000c
 80046d0:	200002e4 	.word	0x200002e4

080046d4 <HAL_GetTick>:
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	4b02      	ldr	r3, [pc, #8]	; (80046e4 <HAL_GetTick+0x10>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0018      	movs	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	200002e4 	.word	0x200002e4

080046e8 <HAL_Delay>:
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	f7ff fff0 	bl	80046d4 <HAL_GetTick>
 80046f4:	0003      	movs	r3, r0
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3301      	adds	r3, #1
 8004700:	d005      	beq.n	800470e <HAL_Delay+0x26>
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_Delay+0x44>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	001a      	movs	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	189b      	adds	r3, r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	f7ff ffe0 	bl	80046d4 <HAL_GetTick>
 8004714:	0002      	movs	r2, r0
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	429a      	cmp	r2, r3
 800471e:	d8f7      	bhi.n	8004710 <HAL_Delay+0x28>
 8004720:	46c0      	nop			; (mov r8, r8)
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	b004      	add	sp, #16
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	2000000c 	.word	0x2000000c

08004730 <HAL_ADC_Init>:
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_ADC_Init+0x12>
 800473e:	2301      	movs	r3, #1
 8004740:	e159      	b.n	80049f6 <HAL_ADC_Init+0x2c6>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <HAL_ADC_Init+0x30>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	659a      	str	r2, [r3, #88]	; 0x58
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2250      	movs	r2, #80	; 0x50
 8004754:	2100      	movs	r1, #0
 8004756:	5499      	strb	r1, [r3, r2]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	0018      	movs	r0, r3
 800475c:	f7ff fd9c 	bl	8004298 <HAL_ADC_MspInit>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004764:	2210      	movs	r2, #16
 8004766:	4013      	ands	r3, r2
 8004768:	2b10      	cmp	r3, #16
 800476a:	d005      	beq.n	8004778 <HAL_ADC_Init+0x48>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2204      	movs	r2, #4
 8004774:	4013      	ands	r3, r2
 8004776:	d00b      	beq.n	8004790 <HAL_ADC_Init+0x60>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	2210      	movs	r2, #16
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2250      	movs	r2, #80	; 0x50
 8004788:	2100      	movs	r1, #0
 800478a:	5499      	strb	r1, [r3, r2]
 800478c:	2301      	movs	r3, #1
 800478e:	e132      	b.n	80049f6 <HAL_ADC_Init+0x2c6>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004794:	4a9a      	ldr	r2, [pc, #616]	; (8004a00 <HAL_ADC_Init+0x2d0>)
 8004796:	4013      	ands	r3, r2
 8004798:	2202      	movs	r2, #2
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2203      	movs	r2, #3
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d108      	bne.n	80047c0 <HAL_ADC_Init+0x90>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2201      	movs	r2, #1
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_ADC_Init+0x90>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_ADC_Init+0x92>
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d149      	bne.n	800485a <HAL_ADC_Init+0x12a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	23c0      	movs	r3, #192	; 0xc0
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d00b      	beq.n	80047ea <HAL_ADC_Init+0xba>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	05db      	lsls	r3, r3, #23
 80047da:	429a      	cmp	r2, r3
 80047dc:	d005      	beq.n	80047ea <HAL_ADC_Init+0xba>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d111      	bne.n	800480e <HAL_ADC_Init+0xde>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	0092      	lsls	r2, r2, #2
 80047f6:	0892      	lsrs	r2, r2, #2
 80047f8:	611a      	str	r2, [r3, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6919      	ldr	r1, [r3, #16]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	611a      	str	r2, [r3, #16]
 800480c:	e014      	b.n	8004838 <HAL_ADC_Init+0x108>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0092      	lsls	r2, r2, #2
 800481a:	0892      	lsrs	r2, r2, #2
 800481c:	611a      	str	r2, [r3, #16]
 800481e:	4b79      	ldr	r3, [pc, #484]	; (8004a04 <HAL_ADC_Init+0x2d4>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b78      	ldr	r3, [pc, #480]	; (8004a04 <HAL_ADC_Init+0x2d4>)
 8004824:	4978      	ldr	r1, [pc, #480]	; (8004a08 <HAL_ADC_Init+0x2d8>)
 8004826:	400a      	ands	r2, r1
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	4b76      	ldr	r3, [pc, #472]	; (8004a04 <HAL_ADC_Init+0x2d4>)
 800482c:	6819      	ldr	r1, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	4b74      	ldr	r3, [pc, #464]	; (8004a04 <HAL_ADC_Init+0x2d4>)
 8004834:	430a      	orrs	r2, r1
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2118      	movs	r1, #24
 8004844:	438a      	bics	r2, r1
 8004846:	60da      	str	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68d9      	ldr	r1, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	4b6a      	ldr	r3, [pc, #424]	; (8004a04 <HAL_ADC_Init+0x2d4>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b69      	ldr	r3, [pc, #420]	; (8004a04 <HAL_ADC_Init+0x2d4>)
 8004860:	496a      	ldr	r1, [pc, #424]	; (8004a0c <HAL_ADC_Init+0x2dc>)
 8004862:	400a      	ands	r2, r1
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	4b67      	ldr	r3, [pc, #412]	; (8004a04 <HAL_ADC_Init+0x2d4>)
 8004868:	6819      	ldr	r1, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486e:	065a      	lsls	r2, r3, #25
 8004870:	4b64      	ldr	r3, [pc, #400]	; (8004a04 <HAL_ADC_Init+0x2d4>)
 8004872:	430a      	orrs	r2, r1
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	055b      	lsls	r3, r3, #21
 8004880:	4013      	ands	r3, r2
 8004882:	d108      	bne.n	8004896 <HAL_ADC_Init+0x166>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2180      	movs	r1, #128	; 0x80
 8004890:	0549      	lsls	r1, r1, #21
 8004892:	430a      	orrs	r2, r1
 8004894:	609a      	str	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	495b      	ldr	r1, [pc, #364]	; (8004a10 <HAL_ADC_Init+0x2e0>)
 80048a2:	400a      	ands	r2, r1
 80048a4:	60da      	str	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68d9      	ldr	r1, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d101      	bne.n	80048bc <HAL_ADC_Init+0x18c>
 80048b8:	2304      	movs	r3, #4
 80048ba:	e000      	b.n	80048be <HAL_ADC_Init+0x18e>
 80048bc:	2300      	movs	r3, #0
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2020      	movs	r0, #32
 80048c4:	5c1b      	ldrb	r3, [r3, r0]
 80048c6:	035b      	lsls	r3, r3, #13
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	202c      	movs	r0, #44	; 0x2c
 80048ce:	5c1b      	ldrb	r3, [r3, r0]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	039b      	lsls	r3, r3, #14
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	03db      	lsls	r3, r3, #15
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f6:	23c2      	movs	r3, #194	; 0xc2
 80048f8:	33ff      	adds	r3, #255	; 0xff
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d00b      	beq.n	8004916 <HAL_ADC_Init+0x1e6>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68d9      	ldr	r1, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2221      	movs	r2, #33	; 0x21
 800491a:	5c9b      	ldrb	r3, [r3, r2]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d11a      	bne.n	8004956 <HAL_ADC_Init+0x226>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	5c9b      	ldrb	r3, [r3, r2]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <HAL_ADC_Init+0x20e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2180      	movs	r1, #128	; 0x80
 8004936:	0249      	lsls	r1, r1, #9
 8004938:	430a      	orrs	r2, r1
 800493a:	60da      	str	r2, [r3, #12]
 800493c:	e00b      	b.n	8004956 <HAL_ADC_Init+0x226>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	2220      	movs	r2, #32
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	2201      	movs	r2, #1
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	659a      	str	r2, [r3, #88]	; 0x58
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	2b01      	cmp	r3, #1
 800495c:	d11f      	bne.n	800499e <HAL_ADC_Init+0x26e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	492a      	ldr	r1, [pc, #168]	; (8004a14 <HAL_ADC_Init+0x2e4>)
 800496a:	400a      	ands	r2, r1
 800496c:	611a      	str	r2, [r3, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6919      	ldr	r1, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	611a      	str	r2, [r3, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2101      	movs	r1, #1
 8004998:	430a      	orrs	r2, r1
 800499a:	611a      	str	r2, [r3, #16]
 800499c:	e00e      	b.n	80049bc <HAL_ADC_Init+0x28c>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2201      	movs	r2, #1
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d107      	bne.n	80049bc <HAL_ADC_Init+0x28c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2101      	movs	r1, #1
 80049b8:	438a      	bics	r2, r1
 80049ba:	611a      	str	r2, [r3, #16]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2107      	movs	r1, #7
 80049c8:	438a      	bics	r2, r1
 80049ca:	615a      	str	r2, [r3, #20]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6959      	ldr	r1, [r3, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	615a      	str	r2, [r3, #20]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	659a      	str	r2, [r3, #88]	; 0x58
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	2203      	movs	r2, #3
 80049ea:	4393      	bics	r3, r2
 80049ec:	2201      	movs	r2, #1
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54
 80049f4:	2300      	movs	r3, #0
 80049f6:	0018      	movs	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b002      	add	sp, #8
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	fffffefd 	.word	0xfffffefd
 8004a04:	40012708 	.word	0x40012708
 8004a08:	ffc3ffff 	.word	0xffc3ffff
 8004a0c:	fdffffff 	.word	0xfdffffff
 8004a10:	fffe0219 	.word	0xfffe0219
 8004a14:	fffffc03 	.word	0xfffffc03

08004a18 <HAL_ADC_Start>:
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	230f      	movs	r3, #15
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	4013      	ands	r3, r2
 8004a32:	d138      	bne.n	8004aa6 <HAL_ADC_Start+0x8e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2250      	movs	r2, #80	; 0x50
 8004a38:	5c9b      	ldrb	r3, [r3, r2]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_ADC_Start+0x2a>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e038      	b.n	8004ab4 <HAL_ADC_Start+0x9c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2250      	movs	r2, #80	; 0x50
 8004a46:	2101      	movs	r1, #1
 8004a48:	5499      	strb	r1, [r3, r2]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d007      	beq.n	8004a62 <HAL_ADC_Start+0x4a>
 8004a52:	230f      	movs	r3, #15
 8004a54:	18fc      	adds	r4, r7, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f000 f981 	bl	8004d60 <ADC_Enable>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	7023      	strb	r3, [r4, #0]
 8004a62:	230f      	movs	r3, #15
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d120      	bne.n	8004aae <HAL_ADC_Start+0x96>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a70:	4a12      	ldr	r2, [pc, #72]	; (8004abc <HAL_ADC_Start+0xa4>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	2280      	movs	r2, #128	; 0x80
 8004a76:	0052      	lsls	r2, r2, #1
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	659a      	str	r2, [r3, #88]	; 0x58
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2250      	movs	r2, #80	; 0x50
 8004a88:	2100      	movs	r1, #0
 8004a8a:	5499      	strb	r1, [r3, r2]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	221c      	movs	r2, #28
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2104      	movs	r1, #4
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	e003      	b.n	8004aae <HAL_ADC_Start+0x96>
 8004aa6:	230f      	movs	r3, #15
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	2202      	movs	r2, #2
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	230f      	movs	r3, #15
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b005      	add	sp, #20
 8004aba:	bd90      	pop	{r4, r7, pc}
 8004abc:	fffff0fe 	.word	0xfffff0fe

08004ac0 <HAL_ADC_Stop>:
 8004ac0:	b5b0      	push	{r4, r5, r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	230f      	movs	r3, #15
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	2200      	movs	r2, #0
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2250      	movs	r2, #80	; 0x50
 8004ad4:	5c9b      	ldrb	r3, [r3, r2]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_ADC_Stop+0x1e>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e029      	b.n	8004b32 <HAL_ADC_Stop+0x72>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2250      	movs	r2, #80	; 0x50
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	5499      	strb	r1, [r3, r2]
 8004ae6:	250f      	movs	r5, #15
 8004ae8:	197c      	adds	r4, r7, r5
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	0018      	movs	r0, r3
 8004aee:	f000 fa06 	bl	8004efe <ADC_ConversionStop>
 8004af2:	0003      	movs	r3, r0
 8004af4:	7023      	strb	r3, [r4, #0]
 8004af6:	197b      	adds	r3, r7, r5
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d112      	bne.n	8004b24 <HAL_ADC_Stop+0x64>
 8004afe:	197c      	adds	r4, r7, r5
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	0018      	movs	r0, r3
 8004b04:	f000 f994 	bl	8004e30 <ADC_Disable>
 8004b08:	0003      	movs	r3, r0
 8004b0a:	7023      	strb	r3, [r4, #0]
 8004b0c:	197b      	adds	r3, r7, r5
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d107      	bne.n	8004b24 <HAL_ADC_Stop+0x64>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <HAL_ADC_Stop+0x7c>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2250      	movs	r2, #80	; 0x50
 8004b28:	2100      	movs	r1, #0
 8004b2a:	5499      	strb	r1, [r3, r2]
 8004b2c:	230f      	movs	r3, #15
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	0018      	movs	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b004      	add	sp, #16
 8004b38:	bdb0      	pop	{r4, r5, r7, pc}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	fffffefe 	.word	0xfffffefe

08004b40 <HAL_ADC_PollForConversion>:
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d102      	bne.n	8004b60 <HAL_ADC_PollForConversion+0x20>
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	e014      	b.n	8004b8a <HAL_ADC_PollForConversion+0x4a>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d10b      	bne.n	8004b86 <HAL_ADC_PollForConversion+0x46>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	2220      	movs	r2, #32
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2250      	movs	r2, #80	; 0x50
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5499      	strb	r1, [r3, r2]
 8004b82:	2301      	movs	r3, #1
 8004b84:	e072      	b.n	8004c6c <HAL_ADC_PollForConversion+0x12c>
 8004b86:	230c      	movs	r3, #12
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	f7ff fda3 	bl	80046d4 <HAL_GetTick>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	e01f      	b.n	8004bd4 <HAL_ADC_PollForConversion+0x94>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	3301      	adds	r3, #1
 8004b98:	d01c      	beq.n	8004bd4 <HAL_ADC_PollForConversion+0x94>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <HAL_ADC_PollForConversion+0x70>
 8004ba0:	f7ff fd98 	bl	80046d4 <HAL_GetTick>
 8004ba4:	0002      	movs	r2, r0
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d211      	bcs.n	8004bd4 <HAL_ADC_PollForConversion+0x94>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d10b      	bne.n	8004bd4 <HAL_ADC_PollForConversion+0x94>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	655a      	str	r2, [r3, #84]	; 0x54
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2250      	movs	r2, #80	; 0x50
 8004bcc:	2100      	movs	r1, #0
 8004bce:	5499      	strb	r1, [r3, r2]
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e04b      	b.n	8004c6c <HAL_ADC_PollForConversion+0x12c>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d0d9      	beq.n	8004b94 <HAL_ADC_PollForConversion+0x54>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be4:	2280      	movs	r2, #128	; 0x80
 8004be6:	0092      	lsls	r2, r2, #2
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	655a      	str	r2, [r3, #84]	; 0x54
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	23c0      	movs	r3, #192	; 0xc0
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d12e      	bne.n	8004c5a <HAL_ADC_PollForConversion+0x11a>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	5c9b      	ldrb	r3, [r3, r2]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d129      	bne.n	8004c5a <HAL_ADC_PollForConversion+0x11a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d122      	bne.n	8004c5a <HAL_ADC_PollForConversion+0x11a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d110      	bne.n	8004c42 <HAL_ADC_PollForConversion+0x102>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	210c      	movs	r1, #12
 8004c2c:	438a      	bics	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c34:	4a0f      	ldr	r2, [pc, #60]	; (8004c74 <HAL_ADC_PollForConversion+0x134>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	2201      	movs	r2, #1
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54
 8004c40:	e00b      	b.n	8004c5a <HAL_ADC_PollForConversion+0x11a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	2220      	movs	r2, #32
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	655a      	str	r2, [r3, #84]	; 0x54
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c52:	2201      	movs	r2, #1
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	659a      	str	r2, [r3, #88]	; 0x58
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_ADC_PollForConversion+0x12a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	220c      	movs	r2, #12
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b004      	add	sp, #16
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	fffffefe 	.word	0xfffffefe

08004c78 <HAL_ADC_GetValue>:
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	0018      	movs	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b002      	add	sp, #8
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <HAL_ADC_ConfigChannel>:
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2250      	movs	r2, #80	; 0x50
 8004c9e:	5c9b      	ldrb	r3, [r3, r2]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x18>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e050      	b.n	8004d4a <HAL_ADC_ConfigChannel+0xba>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2250      	movs	r2, #80	; 0x50
 8004cac:	2101      	movs	r1, #1
 8004cae:	5499      	strb	r1, [r3, r2]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <HAL_ADC_ConfigChannel+0x44>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2250      	movs	r2, #80	; 0x50
 8004ccc:	2100      	movs	r1, #0
 8004cce:	5499      	strb	r1, [r3, r2]
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e03a      	b.n	8004d4a <HAL_ADC_ConfigChannel+0xba>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <HAL_ADC_ConfigChannel+0xc4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d018      	beq.n	8004d10 <HAL_ADC_ConfigChannel+0x80>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	035b      	lsls	r3, r3, #13
 8004cea:	0b5a      	lsrs	r2, r3, #13
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	029b      	lsls	r3, r3, #10
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d01f      	beq.n	8004d40 <HAL_ADC_ConfigChannel+0xb0>
 8004d00:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <HAL_ADC_ConfigChannel+0xc8>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <HAL_ADC_ConfigChannel+0xc8>)
 8004d06:	2180      	movs	r1, #128	; 0x80
 8004d08:	03c9      	lsls	r1, r1, #15
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	e017      	b.n	8004d40 <HAL_ADC_ConfigChannel+0xb0>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	035b      	lsls	r3, r3, #13
 8004d1c:	0b5b      	lsrs	r3, r3, #13
 8004d1e:	43d9      	mvns	r1, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	400a      	ands	r2, r1
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	2380      	movs	r3, #128	; 0x80
 8004d2e:	029b      	lsls	r3, r3, #10
 8004d30:	4013      	ands	r3, r2
 8004d32:	d005      	beq.n	8004d40 <HAL_ADC_ConfigChannel+0xb0>
 8004d34:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_ADC_ConfigChannel+0xc8>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <HAL_ADC_ConfigChannel+0xc8>)
 8004d3a:	4908      	ldr	r1, [pc, #32]	; (8004d5c <HAL_ADC_ConfigChannel+0xcc>)
 8004d3c:	400a      	ands	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2250      	movs	r2, #80	; 0x50
 8004d44:	2100      	movs	r1, #0
 8004d46:	5499      	strb	r1, [r3, r2]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b002      	add	sp, #8
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	00001001 	.word	0x00001001
 8004d58:	40012708 	.word	0x40012708
 8004d5c:	ffbfffff 	.word	0xffbfffff

08004d60 <ADC_Enable>:
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2203      	movs	r2, #3
 8004d74:	4013      	ands	r3, r2
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d108      	bne.n	8004d8c <ADC_Enable+0x2c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2201      	movs	r2, #1
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <ADC_Enable+0x2c>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <ADC_Enable+0x2e>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d146      	bne.n	8004e20 <ADC_Enable+0xc0>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4a24      	ldr	r2, [pc, #144]	; (8004e2c <ADC_Enable+0xcc>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d00d      	beq.n	8004dba <ADC_Enable+0x5a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	2210      	movs	r2, #16
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	2201      	movs	r2, #1
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	659a      	str	r2, [r3, #88]	; 0x58
 8004db6:	2301      	movs	r3, #1
 8004db8:	e033      	b.n	8004e22 <ADC_Enable+0xc2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
 8004dca:	2001      	movs	r0, #1
 8004dcc:	f000 f8e4 	bl	8004f98 <ADC_DelayMicroSecond>
 8004dd0:	f7ff fc80 	bl	80046d4 <HAL_GetTick>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	e01b      	b.n	8004e12 <ADC_Enable+0xb2>
 8004dda:	f7ff fc7b 	bl	80046d4 <HAL_GetTick>
 8004dde:	0002      	movs	r2, r0
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b0a      	cmp	r3, #10
 8004de6:	d914      	bls.n	8004e12 <ADC_Enable+0xb2>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2201      	movs	r2, #1
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d00d      	beq.n	8004e12 <ADC_Enable+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e06:	2201      	movs	r2, #1
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	659a      	str	r2, [r3, #88]	; 0x58
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e007      	b.n	8004e22 <ADC_Enable+0xc2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d1dc      	bne.n	8004dda <ADC_Enable+0x7a>
 8004e20:	2300      	movs	r3, #0
 8004e22:	0018      	movs	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b004      	add	sp, #16
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	80000017 	.word	0x80000017

08004e30 <ADC_Disable>:
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2203      	movs	r2, #3
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d108      	bne.n	8004e5c <ADC_Disable+0x2c>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2201      	movs	r2, #1
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <ADC_Disable+0x2c>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <ADC_Disable+0x2e>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d048      	beq.n	8004ef4 <ADC_Disable+0xc4>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2205      	movs	r2, #5
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d110      	bne.n	8004e92 <ADC_Disable+0x62>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	609a      	str	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2203      	movs	r2, #3
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	f7ff fc24 	bl	80046d4 <HAL_GetTick>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	e029      	b.n	8004ee6 <ADC_Disable+0xb6>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	2210      	movs	r2, #16
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	655a      	str	r2, [r3, #84]	; 0x54
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	659a      	str	r2, [r3, #88]	; 0x58
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e023      	b.n	8004ef6 <ADC_Disable+0xc6>
 8004eae:	f7ff fc11 	bl	80046d4 <HAL_GetTick>
 8004eb2:	0002      	movs	r2, r0
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b0a      	cmp	r3, #10
 8004eba:	d914      	bls.n	8004ee6 <ADC_Disable+0xb6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d10d      	bne.n	8004ee6 <ADC_Disable+0xb6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	2210      	movs	r2, #16
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	655a      	str	r2, [r3, #84]	; 0x54
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eda:	2201      	movs	r2, #1
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	659a      	str	r2, [r3, #88]	; 0x58
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e007      	b.n	8004ef6 <ADC_Disable+0xc6>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2201      	movs	r2, #1
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d0dc      	beq.n	8004eae <ADC_Disable+0x7e>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b004      	add	sp, #16
 8004efc:	bd80      	pop	{r7, pc}

08004efe <ADC_ConversionStop>:
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2204      	movs	r2, #4
 8004f12:	4013      	ands	r3, r2
 8004f14:	d03a      	beq.n	8004f8c <ADC_ConversionStop+0x8e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d10d      	bne.n	8004f40 <ADC_ConversionStop+0x42>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d107      	bne.n	8004f40 <ADC_ConversionStop+0x42>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2110      	movs	r1, #16
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	f7ff fbc8 	bl	80046d4 <HAL_GetTick>
 8004f44:	0003      	movs	r3, r0
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e01a      	b.n	8004f80 <ADC_ConversionStop+0x82>
 8004f4a:	f7ff fbc3 	bl	80046d4 <HAL_GetTick>
 8004f4e:	0002      	movs	r2, r0
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b0a      	cmp	r3, #10
 8004f56:	d913      	bls.n	8004f80 <ADC_ConversionStop+0x82>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2204      	movs	r2, #4
 8004f60:	4013      	ands	r3, r2
 8004f62:	d00d      	beq.n	8004f80 <ADC_ConversionStop+0x82>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f68:	2210      	movs	r2, #16
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	655a      	str	r2, [r3, #84]	; 0x54
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f74:	2201      	movs	r2, #1
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	659a      	str	r2, [r3, #88]	; 0x58
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e006      	b.n	8004f8e <ADC_ConversionStop+0x90>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2204      	movs	r2, #4
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d1de      	bne.n	8004f4a <ADC_ConversionStop+0x4c>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b004      	add	sp, #16
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <ADC_DelayMicroSecond>:
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <ADC_DelayMicroSecond+0x38>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	490b      	ldr	r1, [pc, #44]	; (8004fd4 <ADC_DelayMicroSecond+0x3c>)
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f7fb f8ca 	bl	8000140 <__udivsi3>
 8004fac:	0003      	movs	r3, r0
 8004fae:	001a      	movs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4353      	muls	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e002      	b.n	8004fbe <ADC_DelayMicroSecond+0x26>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f9      	bne.n	8004fb8 <ADC_DelayMicroSecond+0x20>
 8004fc4:	46c0      	nop			; (mov r8, r8)
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b004      	add	sp, #16
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	20000004 	.word	0x20000004
 8004fd4:	000f4240 	.word	0x000f4240

08004fd8 <__NVIC_SetPriority>:
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	0002      	movs	r2, r0
 8004fe0:	6039      	str	r1, [r7, #0]
 8004fe2:	1dfb      	adds	r3, r7, #7
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	1dfb      	adds	r3, r7, #7
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b7f      	cmp	r3, #127	; 0x7f
 8004fec:	d828      	bhi.n	8005040 <__NVIC_SetPriority+0x68>
 8004fee:	4a2f      	ldr	r2, [pc, #188]	; (80050ac <__NVIC_SetPriority+0xd4>)
 8004ff0:	1dfb      	adds	r3, r7, #7
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	b25b      	sxtb	r3, r3
 8004ff6:	089b      	lsrs	r3, r3, #2
 8004ff8:	33c0      	adds	r3, #192	; 0xc0
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	589b      	ldr	r3, [r3, r2]
 8004ffe:	1dfa      	adds	r2, r7, #7
 8005000:	7812      	ldrb	r2, [r2, #0]
 8005002:	0011      	movs	r1, r2
 8005004:	2203      	movs	r2, #3
 8005006:	400a      	ands	r2, r1
 8005008:	00d2      	lsls	r2, r2, #3
 800500a:	21ff      	movs	r1, #255	; 0xff
 800500c:	4091      	lsls	r1, r2
 800500e:	000a      	movs	r2, r1
 8005010:	43d2      	mvns	r2, r2
 8005012:	401a      	ands	r2, r3
 8005014:	0011      	movs	r1, r2
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	019b      	lsls	r3, r3, #6
 800501a:	22ff      	movs	r2, #255	; 0xff
 800501c:	401a      	ands	r2, r3
 800501e:	1dfb      	adds	r3, r7, #7
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	0018      	movs	r0, r3
 8005024:	2303      	movs	r3, #3
 8005026:	4003      	ands	r3, r0
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	409a      	lsls	r2, r3
 800502c:	481f      	ldr	r0, [pc, #124]	; (80050ac <__NVIC_SetPriority+0xd4>)
 800502e:	1dfb      	adds	r3, r7, #7
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b25b      	sxtb	r3, r3
 8005034:	089b      	lsrs	r3, r3, #2
 8005036:	430a      	orrs	r2, r1
 8005038:	33c0      	adds	r3, #192	; 0xc0
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	501a      	str	r2, [r3, r0]
 800503e:	e031      	b.n	80050a4 <__NVIC_SetPriority+0xcc>
 8005040:	4a1b      	ldr	r2, [pc, #108]	; (80050b0 <__NVIC_SetPriority+0xd8>)
 8005042:	1dfb      	adds	r3, r7, #7
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	0019      	movs	r1, r3
 8005048:	230f      	movs	r3, #15
 800504a:	400b      	ands	r3, r1
 800504c:	3b08      	subs	r3, #8
 800504e:	089b      	lsrs	r3, r3, #2
 8005050:	3306      	adds	r3, #6
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	18d3      	adds	r3, r2, r3
 8005056:	3304      	adds	r3, #4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	1dfa      	adds	r2, r7, #7
 800505c:	7812      	ldrb	r2, [r2, #0]
 800505e:	0011      	movs	r1, r2
 8005060:	2203      	movs	r2, #3
 8005062:	400a      	ands	r2, r1
 8005064:	00d2      	lsls	r2, r2, #3
 8005066:	21ff      	movs	r1, #255	; 0xff
 8005068:	4091      	lsls	r1, r2
 800506a:	000a      	movs	r2, r1
 800506c:	43d2      	mvns	r2, r2
 800506e:	401a      	ands	r2, r3
 8005070:	0011      	movs	r1, r2
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	019b      	lsls	r3, r3, #6
 8005076:	22ff      	movs	r2, #255	; 0xff
 8005078:	401a      	ands	r2, r3
 800507a:	1dfb      	adds	r3, r7, #7
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	0018      	movs	r0, r3
 8005080:	2303      	movs	r3, #3
 8005082:	4003      	ands	r3, r0
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	409a      	lsls	r2, r3
 8005088:	4809      	ldr	r0, [pc, #36]	; (80050b0 <__NVIC_SetPriority+0xd8>)
 800508a:	1dfb      	adds	r3, r7, #7
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	001c      	movs	r4, r3
 8005090:	230f      	movs	r3, #15
 8005092:	4023      	ands	r3, r4
 8005094:	3b08      	subs	r3, #8
 8005096:	089b      	lsrs	r3, r3, #2
 8005098:	430a      	orrs	r2, r1
 800509a:	3306      	adds	r3, #6
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	18c3      	adds	r3, r0, r3
 80050a0:	3304      	adds	r3, #4
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	46c0      	nop			; (mov r8, r8)
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b003      	add	sp, #12
 80050aa:	bd90      	pop	{r4, r7, pc}
 80050ac:	e000e100 	.word	0xe000e100
 80050b0:	e000ed00 	.word	0xe000ed00

080050b4 <SysTick_Config>:
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	1e5a      	subs	r2, r3, #1
 80050c0:	2380      	movs	r3, #128	; 0x80
 80050c2:	045b      	lsls	r3, r3, #17
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d301      	bcc.n	80050cc <SysTick_Config+0x18>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e010      	b.n	80050ee <SysTick_Config+0x3a>
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <SysTick_Config+0x44>)
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	3a01      	subs	r2, #1
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	2301      	movs	r3, #1
 80050d6:	425b      	negs	r3, r3
 80050d8:	2103      	movs	r1, #3
 80050da:	0018      	movs	r0, r3
 80050dc:	f7ff ff7c 	bl	8004fd8 <__NVIC_SetPriority>
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <SysTick_Config+0x44>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	609a      	str	r2, [r3, #8]
 80050e6:	4b04      	ldr	r3, [pc, #16]	; (80050f8 <SysTick_Config+0x44>)
 80050e8:	2207      	movs	r2, #7
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	2300      	movs	r3, #0
 80050ee:	0018      	movs	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b002      	add	sp, #8
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	e000e010 	.word	0xe000e010

080050fc <HAL_NVIC_SetPriority>:
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	210f      	movs	r1, #15
 8005108:	187b      	adds	r3, r7, r1
 800510a:	1c02      	adds	r2, r0, #0
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	187b      	adds	r3, r7, r1
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	b25b      	sxtb	r3, r3
 8005116:	0011      	movs	r1, r2
 8005118:	0018      	movs	r0, r3
 800511a:	f7ff ff5d 	bl	8004fd8 <__NVIC_SetPriority>
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	46bd      	mov	sp, r7
 8005122:	b004      	add	sp, #16
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_SYSTICK_Config>:
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	0018      	movs	r0, r3
 8005132:	f7ff ffbf 	bl	80050b4 <SysTick_Config>
 8005136:	0003      	movs	r3, r0
 8005138:	0018      	movs	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	b002      	add	sp, #8
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_GPIO_Init>:
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	2300      	movs	r3, #0
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	e155      	b.n	8005404 <HAL_GPIO_Init+0x2c4>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2101      	movs	r1, #1
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4091      	lsls	r1, r2
 8005162:	000a      	movs	r2, r1
 8005164:	4013      	ands	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d100      	bne.n	8005170 <HAL_GPIO_Init+0x30>
 800516e:	e146      	b.n	80053fe <HAL_GPIO_Init+0x2be>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2203      	movs	r2, #3
 8005176:	4013      	ands	r3, r2
 8005178:	2b01      	cmp	r3, #1
 800517a:	d005      	beq.n	8005188 <HAL_GPIO_Init+0x48>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2203      	movs	r2, #3
 8005182:	4013      	ands	r3, r2
 8005184:	2b02      	cmp	r3, #2
 8005186:	d130      	bne.n	80051ea <HAL_GPIO_Init+0xaa>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	2203      	movs	r2, #3
 8005194:	409a      	lsls	r2, r3
 8005196:	0013      	movs	r3, r2
 8005198:	43da      	mvns	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4013      	ands	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	409a      	lsls	r2, r3
 80051aa:	0013      	movs	r3, r2
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	2201      	movs	r2, #1
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	409a      	lsls	r2, r3
 80051c4:	0013      	movs	r3, r2
 80051c6:	43da      	mvns	r2, r3
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4013      	ands	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	2201      	movs	r2, #1
 80051d6:	401a      	ands	r2, r3
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	409a      	lsls	r2, r3
 80051dc:	0013      	movs	r3, r2
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2203      	movs	r2, #3
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d017      	beq.n	8005226 <HAL_GPIO_Init+0xe6>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	2203      	movs	r2, #3
 8005202:	409a      	lsls	r2, r3
 8005204:	0013      	movs	r3, r2
 8005206:	43da      	mvns	r2, r3
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4013      	ands	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	409a      	lsls	r2, r3
 8005218:	0013      	movs	r3, r2
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	60da      	str	r2, [r3, #12]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2203      	movs	r2, #3
 800522c:	4013      	ands	r3, r2
 800522e:	2b02      	cmp	r3, #2
 8005230:	d123      	bne.n	800527a <HAL_GPIO_Init+0x13a>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	08da      	lsrs	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3208      	adds	r2, #8
 800523a:	0092      	lsls	r2, r2, #2
 800523c:	58d3      	ldr	r3, [r2, r3]
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2207      	movs	r2, #7
 8005244:	4013      	ands	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	409a      	lsls	r2, r3
 800524c:	0013      	movs	r3, r2
 800524e:	43da      	mvns	r2, r3
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4013      	ands	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2107      	movs	r1, #7
 800525e:	400b      	ands	r3, r1
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	409a      	lsls	r2, r3
 8005264:	0013      	movs	r3, r2
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	08da      	lsrs	r2, r3, #3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3208      	adds	r2, #8
 8005274:	0092      	lsls	r2, r2, #2
 8005276:	6939      	ldr	r1, [r7, #16]
 8005278:	50d1      	str	r1, [r2, r3]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	2203      	movs	r2, #3
 8005286:	409a      	lsls	r2, r3
 8005288:	0013      	movs	r3, r2
 800528a:	43da      	mvns	r2, r3
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4013      	ands	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2203      	movs	r2, #3
 8005298:	401a      	ands	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	409a      	lsls	r2, r3
 80052a0:	0013      	movs	r3, r2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	23c0      	movs	r3, #192	; 0xc0
 80052b4:	029b      	lsls	r3, r3, #10
 80052b6:	4013      	ands	r3, r2
 80052b8:	d100      	bne.n	80052bc <HAL_GPIO_Init+0x17c>
 80052ba:	e0a0      	b.n	80053fe <HAL_GPIO_Init+0x2be>
 80052bc:	4b57      	ldr	r3, [pc, #348]	; (800541c <HAL_GPIO_Init+0x2dc>)
 80052be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c0:	4b56      	ldr	r3, [pc, #344]	; (800541c <HAL_GPIO_Init+0x2dc>)
 80052c2:	2101      	movs	r1, #1
 80052c4:	430a      	orrs	r2, r1
 80052c6:	635a      	str	r2, [r3, #52]	; 0x34
 80052c8:	4a55      	ldr	r2, [pc, #340]	; (8005420 <HAL_GPIO_Init+0x2e0>)
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	089b      	lsrs	r3, r3, #2
 80052ce:	3302      	adds	r3, #2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	589b      	ldr	r3, [r3, r2]
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2203      	movs	r2, #3
 80052da:	4013      	ands	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	220f      	movs	r2, #15
 80052e0:	409a      	lsls	r2, r3
 80052e2:	0013      	movs	r3, r2
 80052e4:	43da      	mvns	r2, r3
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4013      	ands	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	23a0      	movs	r3, #160	; 0xa0
 80052f0:	05db      	lsls	r3, r3, #23
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d01f      	beq.n	8005336 <HAL_GPIO_Init+0x1f6>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a4a      	ldr	r2, [pc, #296]	; (8005424 <HAL_GPIO_Init+0x2e4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d019      	beq.n	8005332 <HAL_GPIO_Init+0x1f2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a49      	ldr	r2, [pc, #292]	; (8005428 <HAL_GPIO_Init+0x2e8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <HAL_GPIO_Init+0x1ee>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a48      	ldr	r2, [pc, #288]	; (800542c <HAL_GPIO_Init+0x2ec>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00d      	beq.n	800532a <HAL_GPIO_Init+0x1ea>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a47      	ldr	r2, [pc, #284]	; (8005430 <HAL_GPIO_Init+0x2f0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <HAL_GPIO_Init+0x1e6>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a46      	ldr	r2, [pc, #280]	; (8005434 <HAL_GPIO_Init+0x2f4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d101      	bne.n	8005322 <HAL_GPIO_Init+0x1e2>
 800531e:	2305      	movs	r3, #5
 8005320:	e00a      	b.n	8005338 <HAL_GPIO_Init+0x1f8>
 8005322:	2306      	movs	r3, #6
 8005324:	e008      	b.n	8005338 <HAL_GPIO_Init+0x1f8>
 8005326:	2304      	movs	r3, #4
 8005328:	e006      	b.n	8005338 <HAL_GPIO_Init+0x1f8>
 800532a:	2303      	movs	r3, #3
 800532c:	e004      	b.n	8005338 <HAL_GPIO_Init+0x1f8>
 800532e:	2302      	movs	r3, #2
 8005330:	e002      	b.n	8005338 <HAL_GPIO_Init+0x1f8>
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <HAL_GPIO_Init+0x1f8>
 8005336:	2300      	movs	r3, #0
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	2103      	movs	r1, #3
 800533c:	400a      	ands	r2, r1
 800533e:	0092      	lsls	r2, r2, #2
 8005340:	4093      	lsls	r3, r2
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	4935      	ldr	r1, [pc, #212]	; (8005420 <HAL_GPIO_Init+0x2e0>)
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	089b      	lsrs	r3, r3, #2
 800534e:	3302      	adds	r3, #2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	505a      	str	r2, [r3, r1]
 8005356:	4b38      	ldr	r3, [pc, #224]	; (8005438 <HAL_GPIO_Init+0x2f8>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	43da      	mvns	r2, r3
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4013      	ands	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	2380      	movs	r3, #128	; 0x80
 800536c:	035b      	lsls	r3, r3, #13
 800536e:	4013      	ands	r3, r2
 8005370:	d003      	beq.n	800537a <HAL_GPIO_Init+0x23a>
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <HAL_GPIO_Init+0x2f8>)
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <HAL_GPIO_Init+0x2f8>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	43da      	mvns	r2, r3
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4013      	ands	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	039b      	lsls	r3, r3, #14
 8005398:	4013      	ands	r3, r2
 800539a:	d003      	beq.n	80053a4 <HAL_GPIO_Init+0x264>
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	4b24      	ldr	r3, [pc, #144]	; (8005438 <HAL_GPIO_Init+0x2f8>)
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	60da      	str	r2, [r3, #12]
 80053aa:	4b23      	ldr	r3, [pc, #140]	; (8005438 <HAL_GPIO_Init+0x2f8>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	43da      	mvns	r2, r3
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4013      	ands	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	029b      	lsls	r3, r3, #10
 80053c2:	4013      	ands	r3, r2
 80053c4:	d003      	beq.n	80053ce <HAL_GPIO_Init+0x28e>
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	4b1a      	ldr	r3, [pc, #104]	; (8005438 <HAL_GPIO_Init+0x2f8>)
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	4b18      	ldr	r3, [pc, #96]	; (8005438 <HAL_GPIO_Init+0x2f8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	43da      	mvns	r2, r3
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	4013      	ands	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	025b      	lsls	r3, r3, #9
 80053ec:	4013      	ands	r3, r2
 80053ee:	d003      	beq.n	80053f8 <HAL_GPIO_Init+0x2b8>
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <HAL_GPIO_Init+0x2f8>)
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	3301      	adds	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	40da      	lsrs	r2, r3
 800540c:	1e13      	subs	r3, r2, #0
 800540e:	d000      	beq.n	8005412 <HAL_GPIO_Init+0x2d2>
 8005410:	e6a2      	b.n	8005158 <HAL_GPIO_Init+0x18>
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	46c0      	nop			; (mov r8, r8)
 8005416:	46bd      	mov	sp, r7
 8005418:	b006      	add	sp, #24
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40021000 	.word	0x40021000
 8005420:	40010000 	.word	0x40010000
 8005424:	50000400 	.word	0x50000400
 8005428:	50000800 	.word	0x50000800
 800542c:	50000c00 	.word	0x50000c00
 8005430:	50001000 	.word	0x50001000
 8005434:	50001c00 	.word	0x50001c00
 8005438:	40010400 	.word	0x40010400

0800543c <HAL_GPIO_ReadPin>:
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	000a      	movs	r2, r1
 8005446:	1cbb      	adds	r3, r7, #2
 8005448:	801a      	strh	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	1cba      	adds	r2, r7, #2
 8005450:	8812      	ldrh	r2, [r2, #0]
 8005452:	4013      	ands	r3, r2
 8005454:	d004      	beq.n	8005460 <HAL_GPIO_ReadPin+0x24>
 8005456:	230f      	movs	r3, #15
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	e003      	b.n	8005468 <HAL_GPIO_ReadPin+0x2c>
 8005460:	230f      	movs	r3, #15
 8005462:	18fb      	adds	r3, r7, r3
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	230f      	movs	r3, #15
 800546a:	18fb      	adds	r3, r7, r3
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b004      	add	sp, #16
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_GPIO_WritePin>:
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	0008      	movs	r0, r1
 8005480:	0011      	movs	r1, r2
 8005482:	1cbb      	adds	r3, r7, #2
 8005484:	1c02      	adds	r2, r0, #0
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	1c7b      	adds	r3, r7, #1
 800548a:	1c0a      	adds	r2, r1, #0
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	1c7b      	adds	r3, r7, #1
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d004      	beq.n	80054a0 <HAL_GPIO_WritePin+0x2a>
 8005496:	1cbb      	adds	r3, r7, #2
 8005498:	881a      	ldrh	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	619a      	str	r2, [r3, #24]
 800549e:	e003      	b.n	80054a8 <HAL_GPIO_WritePin+0x32>
 80054a0:	1cbb      	adds	r3, r7, #2
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b002      	add	sp, #8
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_RCC_OscConfig>:
 80054b0:	b5b0      	push	{r4, r5, r7, lr}
 80054b2:	b08a      	sub	sp, #40	; 0x28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d102      	bne.n	80054c4 <HAL_RCC_OscConfig+0x14>
 80054be:	2301      	movs	r3, #1
 80054c0:	f000 fb6c 	bl	8005b9c <HAL_RCC_OscConfig+0x6ec>
 80054c4:	4bc8      	ldr	r3, [pc, #800]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	220c      	movs	r2, #12
 80054ca:	4013      	ands	r3, r2
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	4bc6      	ldr	r3, [pc, #792]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	025b      	lsls	r3, r3, #9
 80054d6:	4013      	ands	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2201      	movs	r2, #1
 80054e0:	4013      	ands	r3, r2
 80054e2:	d100      	bne.n	80054e6 <HAL_RCC_OscConfig+0x36>
 80054e4:	e07d      	b.n	80055e2 <HAL_RCC_OscConfig+0x132>
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d007      	beq.n	80054fc <HAL_RCC_OscConfig+0x4c>
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	2b0c      	cmp	r3, #12
 80054f0:	d112      	bne.n	8005518 <HAL_RCC_OscConfig+0x68>
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	2380      	movs	r3, #128	; 0x80
 80054f6:	025b      	lsls	r3, r3, #9
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d10d      	bne.n	8005518 <HAL_RCC_OscConfig+0x68>
 80054fc:	4bba      	ldr	r3, [pc, #744]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	2380      	movs	r3, #128	; 0x80
 8005502:	029b      	lsls	r3, r3, #10
 8005504:	4013      	ands	r3, r2
 8005506:	d100      	bne.n	800550a <HAL_RCC_OscConfig+0x5a>
 8005508:	e06a      	b.n	80055e0 <HAL_RCC_OscConfig+0x130>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d166      	bne.n	80055e0 <HAL_RCC_OscConfig+0x130>
 8005512:	2301      	movs	r3, #1
 8005514:	f000 fb42 	bl	8005b9c <HAL_RCC_OscConfig+0x6ec>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	025b      	lsls	r3, r3, #9
 8005520:	429a      	cmp	r2, r3
 8005522:	d107      	bne.n	8005534 <HAL_RCC_OscConfig+0x84>
 8005524:	4bb0      	ldr	r3, [pc, #704]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	4baf      	ldr	r3, [pc, #700]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 800552a:	2180      	movs	r1, #128	; 0x80
 800552c:	0249      	lsls	r1, r1, #9
 800552e:	430a      	orrs	r2, r1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e027      	b.n	8005584 <HAL_RCC_OscConfig+0xd4>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	23a0      	movs	r3, #160	; 0xa0
 800553a:	02db      	lsls	r3, r3, #11
 800553c:	429a      	cmp	r2, r3
 800553e:	d10e      	bne.n	800555e <HAL_RCC_OscConfig+0xae>
 8005540:	4ba9      	ldr	r3, [pc, #676]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4ba8      	ldr	r3, [pc, #672]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005546:	2180      	movs	r1, #128	; 0x80
 8005548:	02c9      	lsls	r1, r1, #11
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	4ba6      	ldr	r3, [pc, #664]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4ba5      	ldr	r3, [pc, #660]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005554:	2180      	movs	r1, #128	; 0x80
 8005556:	0249      	lsls	r1, r1, #9
 8005558:	430a      	orrs	r2, r1
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e012      	b.n	8005584 <HAL_RCC_OscConfig+0xd4>
 800555e:	4ba2      	ldr	r3, [pc, #648]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4ba1      	ldr	r3, [pc, #644]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005564:	49a1      	ldr	r1, [pc, #644]	; (80057ec <HAL_RCC_OscConfig+0x33c>)
 8005566:	400a      	ands	r2, r1
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	4b9f      	ldr	r3, [pc, #636]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	025b      	lsls	r3, r3, #9
 8005572:	4013      	ands	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4b9b      	ldr	r3, [pc, #620]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b9a      	ldr	r3, [pc, #616]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 800557e:	499c      	ldr	r1, [pc, #624]	; (80057f0 <HAL_RCC_OscConfig+0x340>)
 8005580:	400a      	ands	r2, r1
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d014      	beq.n	80055b6 <HAL_RCC_OscConfig+0x106>
 800558c:	f7ff f8a2 	bl	80046d4 <HAL_GetTick>
 8005590:	0003      	movs	r3, r0
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0xf8>
 8005596:	f7ff f89d 	bl	80046d4 <HAL_GetTick>
 800559a:	0002      	movs	r2, r0
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b64      	cmp	r3, #100	; 0x64
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0xf8>
 80055a4:	2303      	movs	r3, #3
 80055a6:	e2f9      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 80055a8:	4b8f      	ldr	r3, [pc, #572]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	2380      	movs	r3, #128	; 0x80
 80055ae:	029b      	lsls	r3, r3, #10
 80055b0:	4013      	ands	r3, r2
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0xe6>
 80055b4:	e015      	b.n	80055e2 <HAL_RCC_OscConfig+0x132>
 80055b6:	f7ff f88d 	bl	80046d4 <HAL_GetTick>
 80055ba:	0003      	movs	r3, r0
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x122>
 80055c0:	f7ff f888 	bl	80046d4 <HAL_GetTick>
 80055c4:	0002      	movs	r2, r0
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	; 0x64
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x122>
 80055ce:	2303      	movs	r3, #3
 80055d0:	e2e4      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 80055d2:	4b85      	ldr	r3, [pc, #532]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	029b      	lsls	r3, r3, #10
 80055da:	4013      	ands	r3, r2
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x110>
 80055de:	e000      	b.n	80055e2 <HAL_RCC_OscConfig+0x132>
 80055e0:	46c0      	nop			; (mov r8, r8)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2202      	movs	r2, #2
 80055e8:	4013      	ands	r3, r2
 80055ea:	d100      	bne.n	80055ee <HAL_RCC_OscConfig+0x13e>
 80055ec:	e099      	b.n	8005722 <HAL_RCC_OscConfig+0x272>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	2220      	movs	r2, #32
 80055f8:	4013      	ands	r3, r2
 80055fa:	d009      	beq.n	8005610 <HAL_RCC_OscConfig+0x160>
 80055fc:	4b7a      	ldr	r3, [pc, #488]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	4b79      	ldr	r3, [pc, #484]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005602:	2120      	movs	r1, #32
 8005604:	430a      	orrs	r2, r1
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	2220      	movs	r2, #32
 800560c:	4393      	bics	r3, r2
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	2b04      	cmp	r3, #4
 8005614:	d005      	beq.n	8005622 <HAL_RCC_OscConfig+0x172>
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	2b0c      	cmp	r3, #12
 800561a:	d13e      	bne.n	800569a <HAL_RCC_OscConfig+0x1ea>
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d13b      	bne.n	800569a <HAL_RCC_OscConfig+0x1ea>
 8005622:	4b71      	ldr	r3, [pc, #452]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2204      	movs	r2, #4
 8005628:	4013      	ands	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_RCC_OscConfig+0x186>
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_OscConfig+0x186>
 8005632:	2301      	movs	r3, #1
 8005634:	e2b2      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 8005636:	4b6c      	ldr	r3, [pc, #432]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4a6e      	ldr	r2, [pc, #440]	; (80057f4 <HAL_RCC_OscConfig+0x344>)
 800563c:	4013      	ands	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	021a      	lsls	r2, r3, #8
 8005646:	4b68      	ldr	r3, [pc, #416]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005648:	430a      	orrs	r2, r1
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	4b66      	ldr	r3, [pc, #408]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2209      	movs	r2, #9
 8005652:	4393      	bics	r3, r2
 8005654:	0019      	movs	r1, r3
 8005656:	4b64      	ldr	r3, [pc, #400]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565a:	430a      	orrs	r2, r1
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	f000 fbeb 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8005662:	0001      	movs	r1, r0
 8005664:	4b60      	ldr	r3, [pc, #384]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	220f      	movs	r2, #15
 800566c:	4013      	ands	r3, r2
 800566e:	4a62      	ldr	r2, [pc, #392]	; (80057f8 <HAL_RCC_OscConfig+0x348>)
 8005670:	5cd3      	ldrb	r3, [r2, r3]
 8005672:	000a      	movs	r2, r1
 8005674:	40da      	lsrs	r2, r3
 8005676:	4b61      	ldr	r3, [pc, #388]	; (80057fc <HAL_RCC_OscConfig+0x34c>)
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	4b61      	ldr	r3, [pc, #388]	; (8005800 <HAL_RCC_OscConfig+0x350>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2513      	movs	r5, #19
 8005680:	197c      	adds	r4, r7, r5
 8005682:	0018      	movs	r0, r3
 8005684:	f7fe ffe0 	bl	8004648 <HAL_InitTick>
 8005688:	0003      	movs	r3, r0
 800568a:	7023      	strb	r3, [r4, #0]
 800568c:	197b      	adds	r3, r7, r5
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d046      	beq.n	8005722 <HAL_RCC_OscConfig+0x272>
 8005694:	197b      	adds	r3, r7, r5
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	e280      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d027      	beq.n	80056f0 <HAL_RCC_OscConfig+0x240>
 80056a0:	4b51      	ldr	r3, [pc, #324]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2209      	movs	r2, #9
 80056a6:	4393      	bics	r3, r2
 80056a8:	0019      	movs	r1, r3
 80056aa:	4b4f      	ldr	r3, [pc, #316]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80056ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	f7ff f80f 	bl	80046d4 <HAL_GetTick>
 80056b6:	0003      	movs	r3, r0
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x21e>
 80056bc:	f7ff f80a 	bl	80046d4 <HAL_GetTick>
 80056c0:	0002      	movs	r2, r0
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x21e>
 80056ca:	2303      	movs	r3, #3
 80056cc:	e266      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 80056ce:	4b46      	ldr	r3, [pc, #280]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2204      	movs	r2, #4
 80056d4:	4013      	ands	r3, r2
 80056d6:	d0f1      	beq.n	80056bc <HAL_RCC_OscConfig+0x20c>
 80056d8:	4b43      	ldr	r3, [pc, #268]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4a45      	ldr	r2, [pc, #276]	; (80057f4 <HAL_RCC_OscConfig+0x344>)
 80056de:	4013      	ands	r3, r2
 80056e0:	0019      	movs	r1, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	4b3f      	ldr	r3, [pc, #252]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	e018      	b.n	8005722 <HAL_RCC_OscConfig+0x272>
 80056f0:	4b3d      	ldr	r3, [pc, #244]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4b3c      	ldr	r3, [pc, #240]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80056f6:	2101      	movs	r1, #1
 80056f8:	438a      	bics	r2, r1
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f7fe ffea 	bl	80046d4 <HAL_GetTick>
 8005700:	0003      	movs	r3, r0
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x268>
 8005706:	f7fe ffe5 	bl	80046d4 <HAL_GetTick>
 800570a:	0002      	movs	r2, r0
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x268>
 8005714:	2303      	movs	r3, #3
 8005716:	e241      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 8005718:	4b33      	ldr	r3, [pc, #204]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2204      	movs	r2, #4
 800571e:	4013      	ands	r3, r2
 8005720:	d1f1      	bne.n	8005706 <HAL_RCC_OscConfig+0x256>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2210      	movs	r2, #16
 8005728:	4013      	ands	r3, r2
 800572a:	d100      	bne.n	800572e <HAL_RCC_OscConfig+0x27e>
 800572c:	e0a1      	b.n	8005872 <HAL_RCC_OscConfig+0x3c2>
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d140      	bne.n	80057b6 <HAL_RCC_OscConfig+0x306>
 8005734:	4b2c      	ldr	r3, [pc, #176]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4013      	ands	r3, r2
 800573e:	d005      	beq.n	800574c <HAL_RCC_OscConfig+0x29c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_RCC_OscConfig+0x29c>
 8005748:	2301      	movs	r3, #1
 800574a:	e227      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 800574c:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	4a2c      	ldr	r2, [pc, #176]	; (8005804 <HAL_RCC_OscConfig+0x354>)
 8005752:	4013      	ands	r3, r2
 8005754:	0019      	movs	r1, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1a      	ldr	r2, [r3, #32]
 800575a:	4b23      	ldr	r3, [pc, #140]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	4b21      	ldr	r3, [pc, #132]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	0a19      	lsrs	r1, r3, #8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	061a      	lsls	r2, r3, #24
 800576e:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	0b5b      	lsrs	r3, r3, #13
 800577a:	3301      	adds	r3, #1
 800577c:	2280      	movs	r2, #128	; 0x80
 800577e:	0212      	lsls	r2, r2, #8
 8005780:	409a      	lsls	r2, r3
 8005782:	4b19      	ldr	r3, [pc, #100]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	091b      	lsrs	r3, r3, #4
 8005788:	210f      	movs	r1, #15
 800578a:	400b      	ands	r3, r1
 800578c:	491a      	ldr	r1, [pc, #104]	; (80057f8 <HAL_RCC_OscConfig+0x348>)
 800578e:	5ccb      	ldrb	r3, [r1, r3]
 8005790:	40da      	lsrs	r2, r3
 8005792:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <HAL_RCC_OscConfig+0x34c>)
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <HAL_RCC_OscConfig+0x350>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2513      	movs	r5, #19
 800579c:	197c      	adds	r4, r7, r5
 800579e:	0018      	movs	r0, r3
 80057a0:	f7fe ff52 	bl	8004648 <HAL_InitTick>
 80057a4:	0003      	movs	r3, r0
 80057a6:	7023      	strb	r3, [r4, #0]
 80057a8:	197b      	adds	r3, r7, r5
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d060      	beq.n	8005872 <HAL_RCC_OscConfig+0x3c2>
 80057b0:	197b      	adds	r3, r7, r5
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	e1f2      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d03f      	beq.n	800583e <HAL_RCC_OscConfig+0x38e>
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <HAL_RCC_OscConfig+0x338>)
 80057c4:	2180      	movs	r1, #128	; 0x80
 80057c6:	0049      	lsls	r1, r1, #1
 80057c8:	430a      	orrs	r2, r1
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f7fe ff82 	bl	80046d4 <HAL_GetTick>
 80057d0:	0003      	movs	r3, r0
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	e018      	b.n	8005808 <HAL_RCC_OscConfig+0x358>
 80057d6:	f7fe ff7d 	bl	80046d4 <HAL_GetTick>
 80057da:	0002      	movs	r2, r0
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d911      	bls.n	8005808 <HAL_RCC_OscConfig+0x358>
 80057e4:	2303      	movs	r3, #3
 80057e6:	e1d9      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 80057e8:	40021000 	.word	0x40021000
 80057ec:	fffeffff 	.word	0xfffeffff
 80057f0:	fffbffff 	.word	0xfffbffff
 80057f4:	ffffe0ff 	.word	0xffffe0ff
 80057f8:	0800e8e8 	.word	0x0800e8e8
 80057fc:	20000004 	.word	0x20000004
 8005800:	20000008 	.word	0x20000008
 8005804:	ffff1fff 	.word	0xffff1fff
 8005808:	4bc9      	ldr	r3, [pc, #804]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	2380      	movs	r3, #128	; 0x80
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4013      	ands	r3, r2
 8005812:	d0e0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x326>
 8005814:	4bc6      	ldr	r3, [pc, #792]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4ac6      	ldr	r2, [pc, #792]	; (8005b34 <HAL_RCC_OscConfig+0x684>)
 800581a:	4013      	ands	r3, r2
 800581c:	0019      	movs	r1, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1a      	ldr	r2, [r3, #32]
 8005822:	4bc3      	ldr	r3, [pc, #780]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
 8005828:	4bc1      	ldr	r3, [pc, #772]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	0a19      	lsrs	r1, r3, #8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	061a      	lsls	r2, r3, #24
 8005836:	4bbe      	ldr	r3, [pc, #760]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005838:	430a      	orrs	r2, r1
 800583a:	605a      	str	r2, [r3, #4]
 800583c:	e019      	b.n	8005872 <HAL_RCC_OscConfig+0x3c2>
 800583e:	4bbc      	ldr	r3, [pc, #752]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	4bbb      	ldr	r3, [pc, #748]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005844:	49bc      	ldr	r1, [pc, #752]	; (8005b38 <HAL_RCC_OscConfig+0x688>)
 8005846:	400a      	ands	r2, r1
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	f7fe ff43 	bl	80046d4 <HAL_GetTick>
 800584e:	0003      	movs	r3, r0
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x3b6>
 8005854:	f7fe ff3e 	bl	80046d4 <HAL_GetTick>
 8005858:	0002      	movs	r2, r0
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x3b6>
 8005862:	2303      	movs	r3, #3
 8005864:	e19a      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 8005866:	4bb2      	ldr	r3, [pc, #712]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	2380      	movs	r3, #128	; 0x80
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4013      	ands	r3, r2
 8005870:	d1f0      	bne.n	8005854 <HAL_RCC_OscConfig+0x3a4>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2208      	movs	r2, #8
 8005878:	4013      	ands	r3, r2
 800587a:	d036      	beq.n	80058ea <HAL_RCC_OscConfig+0x43a>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d019      	beq.n	80058b8 <HAL_RCC_OscConfig+0x408>
 8005884:	4baa      	ldr	r3, [pc, #680]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005886:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005888:	4ba9      	ldr	r3, [pc, #676]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 800588a:	2101      	movs	r1, #1
 800588c:	430a      	orrs	r2, r1
 800588e:	651a      	str	r2, [r3, #80]	; 0x50
 8005890:	f7fe ff20 	bl	80046d4 <HAL_GetTick>
 8005894:	0003      	movs	r3, r0
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x3fc>
 800589a:	f7fe ff1b 	bl	80046d4 <HAL_GetTick>
 800589e:	0002      	movs	r2, r0
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x3fc>
 80058a8:	2303      	movs	r3, #3
 80058aa:	e177      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 80058ac:	4ba0      	ldr	r3, [pc, #640]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 80058ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b0:	2202      	movs	r2, #2
 80058b2:	4013      	ands	r3, r2
 80058b4:	d0f1      	beq.n	800589a <HAL_RCC_OscConfig+0x3ea>
 80058b6:	e018      	b.n	80058ea <HAL_RCC_OscConfig+0x43a>
 80058b8:	4b9d      	ldr	r3, [pc, #628]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 80058ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058bc:	4b9c      	ldr	r3, [pc, #624]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 80058be:	2101      	movs	r1, #1
 80058c0:	438a      	bics	r2, r1
 80058c2:	651a      	str	r2, [r3, #80]	; 0x50
 80058c4:	f7fe ff06 	bl	80046d4 <HAL_GetTick>
 80058c8:	0003      	movs	r3, r0
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x430>
 80058ce:	f7fe ff01 	bl	80046d4 <HAL_GetTick>
 80058d2:	0002      	movs	r2, r0
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x430>
 80058dc:	2303      	movs	r3, #3
 80058de:	e15d      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 80058e0:	4b93      	ldr	r3, [pc, #588]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 80058e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e4:	2202      	movs	r2, #2
 80058e6:	4013      	ands	r3, r2
 80058e8:	d1f1      	bne.n	80058ce <HAL_RCC_OscConfig+0x41e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2204      	movs	r2, #4
 80058f0:	4013      	ands	r3, r2
 80058f2:	d100      	bne.n	80058f6 <HAL_RCC_OscConfig+0x446>
 80058f4:	e0ae      	b.n	8005a54 <HAL_RCC_OscConfig+0x5a4>
 80058f6:	2023      	movs	r0, #35	; 0x23
 80058f8:	183b      	adds	r3, r7, r0
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	4b8c      	ldr	r3, [pc, #560]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	055b      	lsls	r3, r3, #21
 8005906:	4013      	ands	r3, r2
 8005908:	d109      	bne.n	800591e <HAL_RCC_OscConfig+0x46e>
 800590a:	4b89      	ldr	r3, [pc, #548]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 800590c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590e:	4b88      	ldr	r3, [pc, #544]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005910:	2180      	movs	r1, #128	; 0x80
 8005912:	0549      	lsls	r1, r1, #21
 8005914:	430a      	orrs	r2, r1
 8005916:	639a      	str	r2, [r3, #56]	; 0x38
 8005918:	183b      	adds	r3, r7, r0
 800591a:	2201      	movs	r2, #1
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	4b87      	ldr	r3, [pc, #540]	; (8005b3c <HAL_RCC_OscConfig+0x68c>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	4013      	ands	r3, r2
 8005928:	d11a      	bne.n	8005960 <HAL_RCC_OscConfig+0x4b0>
 800592a:	4b84      	ldr	r3, [pc, #528]	; (8005b3c <HAL_RCC_OscConfig+0x68c>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4b83      	ldr	r3, [pc, #524]	; (8005b3c <HAL_RCC_OscConfig+0x68c>)
 8005930:	2180      	movs	r1, #128	; 0x80
 8005932:	0049      	lsls	r1, r1, #1
 8005934:	430a      	orrs	r2, r1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f7fe fecc 	bl	80046d4 <HAL_GetTick>
 800593c:	0003      	movs	r3, r0
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x4a4>
 8005942:	f7fe fec7 	bl	80046d4 <HAL_GetTick>
 8005946:	0002      	movs	r2, r0
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b64      	cmp	r3, #100	; 0x64
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x4a4>
 8005950:	2303      	movs	r3, #3
 8005952:	e123      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 8005954:	4b79      	ldr	r3, [pc, #484]	; (8005b3c <HAL_RCC_OscConfig+0x68c>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	2380      	movs	r3, #128	; 0x80
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	4013      	ands	r3, r2
 800595e:	d0f0      	beq.n	8005942 <HAL_RCC_OscConfig+0x492>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	429a      	cmp	r2, r3
 800596a:	d107      	bne.n	800597c <HAL_RCC_OscConfig+0x4cc>
 800596c:	4b70      	ldr	r3, [pc, #448]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 800596e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005970:	4b6f      	ldr	r3, [pc, #444]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005972:	2180      	movs	r1, #128	; 0x80
 8005974:	0049      	lsls	r1, r1, #1
 8005976:	430a      	orrs	r2, r1
 8005978:	651a      	str	r2, [r3, #80]	; 0x50
 800597a:	e031      	b.n	80059e0 <HAL_RCC_OscConfig+0x530>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10c      	bne.n	800599e <HAL_RCC_OscConfig+0x4ee>
 8005984:	4b6a      	ldr	r3, [pc, #424]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005988:	4b69      	ldr	r3, [pc, #420]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 800598a:	496b      	ldr	r1, [pc, #428]	; (8005b38 <HAL_RCC_OscConfig+0x688>)
 800598c:	400a      	ands	r2, r1
 800598e:	651a      	str	r2, [r3, #80]	; 0x50
 8005990:	4b67      	ldr	r3, [pc, #412]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005994:	4b66      	ldr	r3, [pc, #408]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005996:	496a      	ldr	r1, [pc, #424]	; (8005b40 <HAL_RCC_OscConfig+0x690>)
 8005998:	400a      	ands	r2, r1
 800599a:	651a      	str	r2, [r3, #80]	; 0x50
 800599c:	e020      	b.n	80059e0 <HAL_RCC_OscConfig+0x530>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	23a0      	movs	r3, #160	; 0xa0
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d10e      	bne.n	80059c8 <HAL_RCC_OscConfig+0x518>
 80059aa:	4b61      	ldr	r3, [pc, #388]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 80059ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059ae:	4b60      	ldr	r3, [pc, #384]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 80059b0:	2180      	movs	r1, #128	; 0x80
 80059b2:	00c9      	lsls	r1, r1, #3
 80059b4:	430a      	orrs	r2, r1
 80059b6:	651a      	str	r2, [r3, #80]	; 0x50
 80059b8:	4b5d      	ldr	r3, [pc, #372]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 80059ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059bc:	4b5c      	ldr	r3, [pc, #368]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 80059be:	2180      	movs	r1, #128	; 0x80
 80059c0:	0049      	lsls	r1, r1, #1
 80059c2:	430a      	orrs	r2, r1
 80059c4:	651a      	str	r2, [r3, #80]	; 0x50
 80059c6:	e00b      	b.n	80059e0 <HAL_RCC_OscConfig+0x530>
 80059c8:	4b59      	ldr	r3, [pc, #356]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 80059ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059cc:	4b58      	ldr	r3, [pc, #352]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 80059ce:	495a      	ldr	r1, [pc, #360]	; (8005b38 <HAL_RCC_OscConfig+0x688>)
 80059d0:	400a      	ands	r2, r1
 80059d2:	651a      	str	r2, [r3, #80]	; 0x50
 80059d4:	4b56      	ldr	r3, [pc, #344]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 80059d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059d8:	4b55      	ldr	r3, [pc, #340]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 80059da:	4959      	ldr	r1, [pc, #356]	; (8005b40 <HAL_RCC_OscConfig+0x690>)
 80059dc:	400a      	ands	r2, r1
 80059de:	651a      	str	r2, [r3, #80]	; 0x50
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d015      	beq.n	8005a14 <HAL_RCC_OscConfig+0x564>
 80059e8:	f7fe fe74 	bl	80046d4 <HAL_GetTick>
 80059ec:	0003      	movs	r3, r0
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	e009      	b.n	8005a06 <HAL_RCC_OscConfig+0x556>
 80059f2:	f7fe fe6f 	bl	80046d4 <HAL_GetTick>
 80059f6:	0002      	movs	r2, r0
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	4a51      	ldr	r2, [pc, #324]	; (8005b44 <HAL_RCC_OscConfig+0x694>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x556>
 8005a02:	2303      	movs	r3, #3
 8005a04:	e0ca      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 8005a06:	4b4a      	ldr	r3, [pc, #296]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005a08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a0a:	2380      	movs	r3, #128	; 0x80
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d0ef      	beq.n	80059f2 <HAL_RCC_OscConfig+0x542>
 8005a12:	e014      	b.n	8005a3e <HAL_RCC_OscConfig+0x58e>
 8005a14:	f7fe fe5e 	bl	80046d4 <HAL_GetTick>
 8005a18:	0003      	movs	r3, r0
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e009      	b.n	8005a32 <HAL_RCC_OscConfig+0x582>
 8005a1e:	f7fe fe59 	bl	80046d4 <HAL_GetTick>
 8005a22:	0002      	movs	r2, r0
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	4a46      	ldr	r2, [pc, #280]	; (8005b44 <HAL_RCC_OscConfig+0x694>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x582>
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e0b4      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 8005a32:	4b3f      	ldr	r3, [pc, #252]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005a34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a36:	2380      	movs	r3, #128	; 0x80
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d1ef      	bne.n	8005a1e <HAL_RCC_OscConfig+0x56e>
 8005a3e:	2323      	movs	r3, #35	; 0x23
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <HAL_RCC_OscConfig+0x5a4>
 8005a48:	4b39      	ldr	r3, [pc, #228]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a4c:	4b38      	ldr	r3, [pc, #224]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005a4e:	493e      	ldr	r1, [pc, #248]	; (8005b48 <HAL_RCC_OscConfig+0x698>)
 8005a50:	400a      	ands	r2, r1
 8005a52:	639a      	str	r2, [r3, #56]	; 0x38
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d100      	bne.n	8005a5e <HAL_RCC_OscConfig+0x5ae>
 8005a5c:	e09d      	b.n	8005b9a <HAL_RCC_OscConfig+0x6ea>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	2b0c      	cmp	r3, #12
 8005a62:	d100      	bne.n	8005a66 <HAL_RCC_OscConfig+0x5b6>
 8005a64:	e076      	b.n	8005b54 <HAL_RCC_OscConfig+0x6a4>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d145      	bne.n	8005afa <HAL_RCC_OscConfig+0x64a>
 8005a6e:	4b30      	ldr	r3, [pc, #192]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b2f      	ldr	r3, [pc, #188]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005a74:	4935      	ldr	r1, [pc, #212]	; (8005b4c <HAL_RCC_OscConfig+0x69c>)
 8005a76:	400a      	ands	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	f7fe fe2b 	bl	80046d4 <HAL_GetTick>
 8005a7e:	0003      	movs	r3, r0
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x5e6>
 8005a84:	f7fe fe26 	bl	80046d4 <HAL_GetTick>
 8005a88:	0002      	movs	r2, r0
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x5e6>
 8005a92:	2303      	movs	r3, #3
 8005a94:	e082      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 8005a96:	4b26      	ldr	r3, [pc, #152]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	2380      	movs	r3, #128	; 0x80
 8005a9c:	049b      	lsls	r3, r3, #18
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0x5d4>
 8005aa2:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	4a2a      	ldr	r2, [pc, #168]	; (8005b50 <HAL_RCC_OscConfig+0x6a0>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	0019      	movs	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	431a      	orrs	r2, r3
 8005abc:	4b1c      	ldr	r3, [pc, #112]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	60da      	str	r2, [r3, #12]
 8005ac2:	4b1b      	ldr	r3, [pc, #108]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005ac8:	2180      	movs	r1, #128	; 0x80
 8005aca:	0449      	lsls	r1, r1, #17
 8005acc:	430a      	orrs	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f7fe fe00 	bl	80046d4 <HAL_GetTick>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_OscConfig+0x63c>
 8005ada:	f7fe fdfb 	bl	80046d4 <HAL_GetTick>
 8005ade:	0002      	movs	r2, r0
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x63c>
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e057      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 8005aec:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	049b      	lsls	r3, r3, #18
 8005af4:	4013      	ands	r3, r2
 8005af6:	d0f0      	beq.n	8005ada <HAL_RCC_OscConfig+0x62a>
 8005af8:	e04f      	b.n	8005b9a <HAL_RCC_OscConfig+0x6ea>
 8005afa:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005b00:	4912      	ldr	r1, [pc, #72]	; (8005b4c <HAL_RCC_OscConfig+0x69c>)
 8005b02:	400a      	ands	r2, r1
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	f7fe fde5 	bl	80046d4 <HAL_GetTick>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x672>
 8005b10:	f7fe fde0 	bl	80046d4 <HAL_GetTick>
 8005b14:	0002      	movs	r2, r0
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x672>
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e03c      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 8005b22:	4b03      	ldr	r3, [pc, #12]	; (8005b30 <HAL_RCC_OscConfig+0x680>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	2380      	movs	r3, #128	; 0x80
 8005b28:	049b      	lsls	r3, r3, #18
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x660>
 8005b2e:	e034      	b.n	8005b9a <HAL_RCC_OscConfig+0x6ea>
 8005b30:	40021000 	.word	0x40021000
 8005b34:	ffff1fff 	.word	0xffff1fff
 8005b38:	fffffeff 	.word	0xfffffeff
 8005b3c:	40007000 	.word	0x40007000
 8005b40:	fffffbff 	.word	0xfffffbff
 8005b44:	00001388 	.word	0x00001388
 8005b48:	efffffff 	.word	0xefffffff
 8005b4c:	feffffff 	.word	0xfeffffff
 8005b50:	ff02ffff 	.word	0xff02ffff
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_RCC_OscConfig+0x6b0>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e01d      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 8005b60:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <HAL_RCC_OscConfig+0x6f4>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	2380      	movs	r3, #128	; 0x80
 8005b6a:	025b      	lsls	r3, r3, #9
 8005b6c:	401a      	ands	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d10f      	bne.n	8005b96 <HAL_RCC_OscConfig+0x6e6>
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	23f0      	movs	r3, #240	; 0xf0
 8005b7a:	039b      	lsls	r3, r3, #14
 8005b7c:	401a      	ands	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d107      	bne.n	8005b96 <HAL_RCC_OscConfig+0x6e6>
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	23c0      	movs	r3, #192	; 0xc0
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	401a      	ands	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d001      	beq.n	8005b9a <HAL_RCC_OscConfig+0x6ea>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_RCC_OscConfig+0x6ec>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b00a      	add	sp, #40	; 0x28
 8005ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba4:	40021000 	.word	0x40021000

08005ba8 <HAL_RCC_ClockConfig>:
 8005ba8:	b5b0      	push	{r4, r5, r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x14>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e128      	b.n	8005e0e <HAL_RCC_ClockConfig+0x266>
 8005bbc:	4b96      	ldr	r3, [pc, #600]	; (8005e18 <HAL_RCC_ClockConfig+0x270>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d91e      	bls.n	8005c08 <HAL_RCC_ClockConfig+0x60>
 8005bca:	4b93      	ldr	r3, [pc, #588]	; (8005e18 <HAL_RCC_ClockConfig+0x270>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	4393      	bics	r3, r2
 8005bd2:	0019      	movs	r1, r3
 8005bd4:	4b90      	ldr	r3, [pc, #576]	; (8005e18 <HAL_RCC_ClockConfig+0x270>)
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	f7fe fd7a 	bl	80046d4 <HAL_GetTick>
 8005be0:	0003      	movs	r3, r0
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	e009      	b.n	8005bfa <HAL_RCC_ClockConfig+0x52>
 8005be6:	f7fe fd75 	bl	80046d4 <HAL_GetTick>
 8005bea:	0002      	movs	r2, r0
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	4a8a      	ldr	r2, [pc, #552]	; (8005e1c <HAL_RCC_ClockConfig+0x274>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_ClockConfig+0x52>
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e109      	b.n	8005e0e <HAL_RCC_ClockConfig+0x266>
 8005bfa:	4b87      	ldr	r3, [pc, #540]	; (8005e18 <HAL_RCC_ClockConfig+0x270>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	4013      	ands	r3, r2
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d1ee      	bne.n	8005be6 <HAL_RCC_ClockConfig+0x3e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	4013      	ands	r3, r2
 8005c10:	d009      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x7e>
 8005c12:	4b83      	ldr	r3, [pc, #524]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	22f0      	movs	r2, #240	; 0xf0
 8005c18:	4393      	bics	r3, r2
 8005c1a:	0019      	movs	r1, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	4b7f      	ldr	r3, [pc, #508]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005c22:	430a      	orrs	r2, r1
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	d100      	bne.n	8005c32 <HAL_RCC_ClockConfig+0x8a>
 8005c30:	e089      	b.n	8005d46 <HAL_RCC_ClockConfig+0x19e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d107      	bne.n	8005c4a <HAL_RCC_ClockConfig+0xa2>
 8005c3a:	4b79      	ldr	r3, [pc, #484]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	2380      	movs	r3, #128	; 0x80
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	4013      	ands	r3, r2
 8005c44:	d120      	bne.n	8005c88 <HAL_RCC_ClockConfig+0xe0>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e0e1      	b.n	8005e0e <HAL_RCC_ClockConfig+0x266>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d107      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xba>
 8005c52:	4b73      	ldr	r3, [pc, #460]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	049b      	lsls	r3, r3, #18
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d114      	bne.n	8005c88 <HAL_RCC_ClockConfig+0xe0>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e0d5      	b.n	8005e0e <HAL_RCC_ClockConfig+0x266>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d106      	bne.n	8005c78 <HAL_RCC_ClockConfig+0xd0>
 8005c6a:	4b6d      	ldr	r3, [pc, #436]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	4013      	ands	r3, r2
 8005c72:	d109      	bne.n	8005c88 <HAL_RCC_ClockConfig+0xe0>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e0ca      	b.n	8005e0e <HAL_RCC_ClockConfig+0x266>
 8005c78:	4b69      	ldr	r3, [pc, #420]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	2380      	movs	r3, #128	; 0x80
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4013      	ands	r3, r2
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_ClockConfig+0xe0>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0c2      	b.n	8005e0e <HAL_RCC_ClockConfig+0x266>
 8005c88:	4b65      	ldr	r3, [pc, #404]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2203      	movs	r2, #3
 8005c8e:	4393      	bics	r3, r2
 8005c90:	0019      	movs	r1, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	4b62      	ldr	r3, [pc, #392]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	60da      	str	r2, [r3, #12]
 8005c9c:	f7fe fd1a 	bl	80046d4 <HAL_GetTick>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d111      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x128>
 8005cac:	e009      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x11a>
 8005cae:	f7fe fd11 	bl	80046d4 <HAL_GetTick>
 8005cb2:	0002      	movs	r2, r0
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	4a58      	ldr	r2, [pc, #352]	; (8005e1c <HAL_RCC_ClockConfig+0x274>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_ClockConfig+0x11a>
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e0a5      	b.n	8005e0e <HAL_RCC_ClockConfig+0x266>
 8005cc2:	4b57      	ldr	r3, [pc, #348]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	220c      	movs	r2, #12
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d1ef      	bne.n	8005cae <HAL_RCC_ClockConfig+0x106>
 8005cce:	e03a      	b.n	8005d46 <HAL_RCC_ClockConfig+0x19e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d111      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x154>
 8005cd8:	e009      	b.n	8005cee <HAL_RCC_ClockConfig+0x146>
 8005cda:	f7fe fcfb 	bl	80046d4 <HAL_GetTick>
 8005cde:	0002      	movs	r2, r0
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	4a4d      	ldr	r2, [pc, #308]	; (8005e1c <HAL_RCC_ClockConfig+0x274>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_ClockConfig+0x146>
 8005cea:	2303      	movs	r3, #3
 8005cec:	e08f      	b.n	8005e0e <HAL_RCC_ClockConfig+0x266>
 8005cee:	4b4c      	ldr	r3, [pc, #304]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	220c      	movs	r2, #12
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	d1ef      	bne.n	8005cda <HAL_RCC_ClockConfig+0x132>
 8005cfa:	e024      	b.n	8005d46 <HAL_RCC_ClockConfig+0x19e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d11b      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x194>
 8005d04:	e009      	b.n	8005d1a <HAL_RCC_ClockConfig+0x172>
 8005d06:	f7fe fce5 	bl	80046d4 <HAL_GetTick>
 8005d0a:	0002      	movs	r2, r0
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	4a42      	ldr	r2, [pc, #264]	; (8005e1c <HAL_RCC_ClockConfig+0x274>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_ClockConfig+0x172>
 8005d16:	2303      	movs	r3, #3
 8005d18:	e079      	b.n	8005e0e <HAL_RCC_ClockConfig+0x266>
 8005d1a:	4b41      	ldr	r3, [pc, #260]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	220c      	movs	r2, #12
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d1ef      	bne.n	8005d06 <HAL_RCC_ClockConfig+0x15e>
 8005d26:	e00e      	b.n	8005d46 <HAL_RCC_ClockConfig+0x19e>
 8005d28:	f7fe fcd4 	bl	80046d4 <HAL_GetTick>
 8005d2c:	0002      	movs	r2, r0
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	4a3a      	ldr	r2, [pc, #232]	; (8005e1c <HAL_RCC_ClockConfig+0x274>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_ClockConfig+0x194>
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e068      	b.n	8005e0e <HAL_RCC_ClockConfig+0x266>
 8005d3c:	4b38      	ldr	r3, [pc, #224]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	220c      	movs	r2, #12
 8005d42:	4013      	ands	r3, r2
 8005d44:	d1f0      	bne.n	8005d28 <HAL_RCC_ClockConfig+0x180>
 8005d46:	4b34      	ldr	r3, [pc, #208]	; (8005e18 <HAL_RCC_ClockConfig+0x270>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d21e      	bcs.n	8005d92 <HAL_RCC_ClockConfig+0x1ea>
 8005d54:	4b30      	ldr	r3, [pc, #192]	; (8005e18 <HAL_RCC_ClockConfig+0x270>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	4393      	bics	r3, r2
 8005d5c:	0019      	movs	r1, r3
 8005d5e:	4b2e      	ldr	r3, [pc, #184]	; (8005e18 <HAL_RCC_ClockConfig+0x270>)
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	f7fe fcb5 	bl	80046d4 <HAL_GetTick>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e009      	b.n	8005d84 <HAL_RCC_ClockConfig+0x1dc>
 8005d70:	f7fe fcb0 	bl	80046d4 <HAL_GetTick>
 8005d74:	0002      	movs	r2, r0
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	4a28      	ldr	r2, [pc, #160]	; (8005e1c <HAL_RCC_ClockConfig+0x274>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_ClockConfig+0x1dc>
 8005d80:	2303      	movs	r3, #3
 8005d82:	e044      	b.n	8005e0e <HAL_RCC_ClockConfig+0x266>
 8005d84:	4b24      	ldr	r3, [pc, #144]	; (8005e18 <HAL_RCC_ClockConfig+0x270>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d1ee      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x1c8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2204      	movs	r2, #4
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x208>
 8005d9c:	4b20      	ldr	r3, [pc, #128]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	4a20      	ldr	r2, [pc, #128]	; (8005e24 <HAL_RCC_ClockConfig+0x27c>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	0019      	movs	r1, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	4b1d      	ldr	r3, [pc, #116]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005dac:	430a      	orrs	r2, r1
 8005dae:	60da      	str	r2, [r3, #12]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2208      	movs	r2, #8
 8005db6:	4013      	ands	r3, r2
 8005db8:	d00a      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x228>
 8005dba:	4b19      	ldr	r3, [pc, #100]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	4a1a      	ldr	r2, [pc, #104]	; (8005e28 <HAL_RCC_ClockConfig+0x280>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	0019      	movs	r1, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	00da      	lsls	r2, r3, #3
 8005dca:	4b15      	ldr	r3, [pc, #84]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	60da      	str	r2, [r3, #12]
 8005dd0:	f000 f832 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8005dd4:	0001      	movs	r1, r0
 8005dd6:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <HAL_RCC_ClockConfig+0x278>)
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	091b      	lsrs	r3, r3, #4
 8005ddc:	220f      	movs	r2, #15
 8005dde:	4013      	ands	r3, r2
 8005de0:	4a12      	ldr	r2, [pc, #72]	; (8005e2c <HAL_RCC_ClockConfig+0x284>)
 8005de2:	5cd3      	ldrb	r3, [r2, r3]
 8005de4:	000a      	movs	r2, r1
 8005de6:	40da      	lsrs	r2, r3
 8005de8:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <HAL_RCC_ClockConfig+0x288>)
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <HAL_RCC_ClockConfig+0x28c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	250b      	movs	r5, #11
 8005df2:	197c      	adds	r4, r7, r5
 8005df4:	0018      	movs	r0, r3
 8005df6:	f7fe fc27 	bl	8004648 <HAL_InitTick>
 8005dfa:	0003      	movs	r3, r0
 8005dfc:	7023      	strb	r3, [r4, #0]
 8005dfe:	197b      	adds	r3, r7, r5
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x264>
 8005e06:	197b      	adds	r3, r7, r5
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	e000      	b.n	8005e0e <HAL_RCC_ClockConfig+0x266>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	0018      	movs	r0, r3
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b004      	add	sp, #16
 8005e14:	bdb0      	pop	{r4, r5, r7, pc}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	40022000 	.word	0x40022000
 8005e1c:	00001388 	.word	0x00001388
 8005e20:	40021000 	.word	0x40021000
 8005e24:	fffff8ff 	.word	0xfffff8ff
 8005e28:	ffffc7ff 	.word	0xffffc7ff
 8005e2c:	0800e8e8 	.word	0x0800e8e8
 8005e30:	20000004 	.word	0x20000004
 8005e34:	20000008 	.word	0x20000008

08005e38 <HAL_RCC_GetSysClockFreq>:
 8005e38:	b5b0      	push	{r4, r5, r7, lr}
 8005e3a:	b08e      	sub	sp, #56	; 0x38
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4b4c      	ldr	r3, [pc, #304]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e46:	230c      	movs	r3, #12
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2b0c      	cmp	r3, #12
 8005e4c:	d014      	beq.n	8005e78 <HAL_RCC_GetSysClockFreq+0x40>
 8005e4e:	d900      	bls.n	8005e52 <HAL_RCC_GetSysClockFreq+0x1a>
 8005e50:	e07b      	b.n	8005f4a <HAL_RCC_GetSysClockFreq+0x112>
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d002      	beq.n	8005e5c <HAL_RCC_GetSysClockFreq+0x24>
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d00b      	beq.n	8005e72 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e5a:	e076      	b.n	8005f4a <HAL_RCC_GetSysClockFreq+0x112>
 8005e5c:	4b44      	ldr	r3, [pc, #272]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2210      	movs	r2, #16
 8005e62:	4013      	ands	r3, r2
 8005e64:	d002      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0x34>
 8005e66:	4b43      	ldr	r3, [pc, #268]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e68:	633b      	str	r3, [r7, #48]	; 0x30
 8005e6a:	e07c      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0x12e>
 8005e6c:	4b42      	ldr	r3, [pc, #264]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x140>)
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e70:	e079      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0x12e>
 8005e72:	4b42      	ldr	r3, [pc, #264]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x144>)
 8005e74:	633b      	str	r3, [r7, #48]	; 0x30
 8005e76:	e076      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0x12e>
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	0c9a      	lsrs	r2, r3, #18
 8005e7c:	230f      	movs	r3, #15
 8005e7e:	401a      	ands	r2, r3
 8005e80:	4b3f      	ldr	r3, [pc, #252]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x148>)
 8005e82:	5c9b      	ldrb	r3, [r3, r2]
 8005e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	0d9a      	lsrs	r2, r3, #22
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	3301      	adds	r3, #1
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
 8005e92:	4b37      	ldr	r3, [pc, #220]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	2380      	movs	r3, #128	; 0x80
 8005e98:	025b      	lsls	r3, r3, #9
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d01a      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x9c>
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
 8005ea6:	4a35      	ldr	r2, [pc, #212]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x144>)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	69b8      	ldr	r0, [r7, #24]
 8005eac:	69f9      	ldr	r1, [r7, #28]
 8005eae:	f7fa fb1b 	bl	80004e8 <__aeabi_lmul>
 8005eb2:	0002      	movs	r2, r0
 8005eb4:	000b      	movs	r3, r1
 8005eb6:	0010      	movs	r0, r2
 8005eb8:	0019      	movs	r1, r3
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f7fa faef 	bl	80004a8 <__aeabi_uldivmod>
 8005eca:	0002      	movs	r2, r0
 8005ecc:	000b      	movs	r3, r1
 8005ece:	0013      	movs	r3, r2
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed2:	e037      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x10c>
 8005ed4:	4b26      	ldr	r3, [pc, #152]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x138>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2210      	movs	r2, #16
 8005eda:	4013      	ands	r3, r2
 8005edc:	d01a      	beq.n	8005f14 <HAL_RCC_GetSysClockFreq+0xdc>
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	4a23      	ldr	r2, [pc, #140]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	68b8      	ldr	r0, [r7, #8]
 8005eec:	68f9      	ldr	r1, [r7, #12]
 8005eee:	f7fa fafb 	bl	80004e8 <__aeabi_lmul>
 8005ef2:	0002      	movs	r2, r0
 8005ef4:	000b      	movs	r3, r1
 8005ef6:	0010      	movs	r0, r2
 8005ef8:	0019      	movs	r1, r3
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	2300      	movs	r3, #0
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f7fa facf 	bl	80004a8 <__aeabi_uldivmod>
 8005f0a:	0002      	movs	r2, r0
 8005f0c:	000b      	movs	r3, r1
 8005f0e:	0013      	movs	r3, r2
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
 8005f12:	e017      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x10c>
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	0018      	movs	r0, r3
 8005f18:	2300      	movs	r3, #0
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	4a16      	ldr	r2, [pc, #88]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x140>)
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f7fa fae2 	bl	80004e8 <__aeabi_lmul>
 8005f24:	0002      	movs	r2, r0
 8005f26:	000b      	movs	r3, r1
 8005f28:	0010      	movs	r0, r2
 8005f2a:	0019      	movs	r1, r3
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	001c      	movs	r4, r3
 8005f30:	2300      	movs	r3, #0
 8005f32:	001d      	movs	r5, r3
 8005f34:	0022      	movs	r2, r4
 8005f36:	002b      	movs	r3, r5
 8005f38:	f7fa fab6 	bl	80004a8 <__aeabi_uldivmod>
 8005f3c:	0002      	movs	r2, r0
 8005f3e:	000b      	movs	r3, r1
 8005f40:	0013      	movs	r3, r2
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	633b      	str	r3, [r7, #48]	; 0x30
 8005f48:	e00d      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0x12e>
 8005f4a:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	0b5b      	lsrs	r3, r3, #13
 8005f50:	2207      	movs	r2, #7
 8005f52:	4013      	ands	r3, r2
 8005f54:	623b      	str	r3, [r7, #32]
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	2280      	movs	r2, #128	; 0x80
 8005f5c:	0212      	lsls	r2, r2, #8
 8005f5e:	409a      	lsls	r2, r3
 8005f60:	0013      	movs	r3, r2
 8005f62:	633b      	str	r3, [r7, #48]	; 0x30
 8005f64:	46c0      	nop			; (mov r8, r8)
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	0018      	movs	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b00e      	add	sp, #56	; 0x38
 8005f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f70:	40021000 	.word	0x40021000
 8005f74:	003d0900 	.word	0x003d0900
 8005f78:	00f42400 	.word	0x00f42400
 8005f7c:	007a1200 	.word	0x007a1200
 8005f80:	0800e8f8 	.word	0x0800e8f8

08005f84 <HAL_SPI_Init>:
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_SPI_Init+0x12>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e07b      	b.n	800608e <HAL_SPI_Init+0x10a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <HAL_SPI_Init+0x2e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	2382      	movs	r3, #130	; 0x82
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d009      	beq.n	8005fbe <HAL_SPI_Init+0x3a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	61da      	str	r2, [r3, #28]
 8005fb0:	e005      	b.n	8005fbe <HAL_SPI_Init+0x3a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	611a      	str	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	615a      	str	r2, [r3, #20]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2251      	movs	r2, #81	; 0x51
 8005fc8:	5c9b      	ldrb	r3, [r3, r2]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d107      	bne.n	8005fe0 <HAL_SPI_Init+0x5c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2250      	movs	r2, #80	; 0x50
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	5499      	strb	r1, [r3, r2]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f7fe f99a 	bl	8004314 <HAL_SPI_MspInit>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2251      	movs	r2, #81	; 0x51
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	5499      	strb	r1, [r3, r2]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2140      	movs	r1, #64	; 0x40
 8005ff4:	438a      	bics	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	2382      	movs	r3, #130	; 0x82
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	401a      	ands	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6899      	ldr	r1, [r3, #8]
 8006006:	2384      	movs	r3, #132	; 0x84
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	400b      	ands	r3, r1
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68d9      	ldr	r1, [r3, #12]
 8006012:	2380      	movs	r3, #128	; 0x80
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	400b      	ands	r3, r1
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2102      	movs	r1, #2
 8006020:	400b      	ands	r3, r1
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	2101      	movs	r1, #1
 800602a:	400b      	ands	r3, r1
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6999      	ldr	r1, [r3, #24]
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	400b      	ands	r3, r1
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	2138      	movs	r1, #56	; 0x38
 8006040:	400b      	ands	r3, r1
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	2180      	movs	r1, #128	; 0x80
 800604a:	400b      	ands	r3, r1
 800604c:	431a      	orrs	r2, r3
 800604e:	0011      	movs	r1, r2
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	019b      	lsls	r3, r3, #6
 8006058:	401a      	ands	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	0c1b      	lsrs	r3, r3, #16
 8006068:	2204      	movs	r2, #4
 800606a:	4013      	ands	r3, r2
 800606c:	0019      	movs	r1, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	2210      	movs	r2, #16
 8006074:	401a      	ands	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	655a      	str	r2, [r3, #84]	; 0x54
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2251      	movs	r2, #81	; 0x51
 8006088:	2101      	movs	r1, #1
 800608a:	5499      	strb	r1, [r3, r2]
 800608c:	2300      	movs	r3, #0
 800608e:	0018      	movs	r0, r3
 8006090:	46bd      	mov	sp, r7
 8006092:	b002      	add	sp, #8
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_SPI_Transmit>:
 8006096:	b580      	push	{r7, lr}
 8006098:	b088      	sub	sp, #32
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	603b      	str	r3, [r7, #0]
 80060a2:	1dbb      	adds	r3, r7, #6
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	231f      	movs	r3, #31
 80060a8:	18fb      	adds	r3, r7, r3
 80060aa:	2200      	movs	r2, #0
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2250      	movs	r2, #80	; 0x50
 80060b2:	5c9b      	ldrb	r3, [r3, r2]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_SPI_Transmit+0x26>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e145      	b.n	8006348 <HAL_SPI_Transmit+0x2b2>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2250      	movs	r2, #80	; 0x50
 80060c0:	2101      	movs	r1, #1
 80060c2:	5499      	strb	r1, [r3, r2]
 80060c4:	f7fe fb06 	bl	80046d4 <HAL_GetTick>
 80060c8:	0003      	movs	r3, r0
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	2316      	movs	r3, #22
 80060ce:	18fb      	adds	r3, r7, r3
 80060d0:	1dba      	adds	r2, r7, #6
 80060d2:	8812      	ldrh	r2, [r2, #0]
 80060d4:	801a      	strh	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2251      	movs	r2, #81	; 0x51
 80060da:	5c9b      	ldrb	r3, [r3, r2]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d004      	beq.n	80060ec <HAL_SPI_Transmit+0x56>
 80060e2:	231f      	movs	r3, #31
 80060e4:	18fb      	adds	r3, r7, r3
 80060e6:	2202      	movs	r2, #2
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	e126      	b.n	800633a <HAL_SPI_Transmit+0x2a4>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_SPI_Transmit+0x64>
 80060f2:	1dbb      	adds	r3, r7, #6
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d104      	bne.n	8006104 <HAL_SPI_Transmit+0x6e>
 80060fa:	231f      	movs	r3, #31
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	2201      	movs	r2, #1
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	e11a      	b.n	800633a <HAL_SPI_Transmit+0x2a4>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2251      	movs	r2, #81	; 0x51
 8006108:	2103      	movs	r1, #3
 800610a:	5499      	strb	r1, [r3, r2]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	655a      	str	r2, [r3, #84]	; 0x54
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	1dba      	adds	r2, r7, #6
 800611c:	8812      	ldrh	r2, [r2, #0]
 800611e:	869a      	strh	r2, [r3, #52]	; 0x34
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	1dba      	adds	r2, r7, #6
 8006124:	8812      	ldrh	r2, [r2, #0]
 8006126:	86da      	strh	r2, [r3, #54]	; 0x36
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	639a      	str	r2, [r3, #56]	; 0x38
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	87da      	strh	r2, [r3, #62]	; 0x3e
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	645a      	str	r2, [r3, #68]	; 0x44
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	641a      	str	r2, [r3, #64]	; 0x40
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	2380      	movs	r3, #128	; 0x80
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	429a      	cmp	r2, r3
 8006150:	d110      	bne.n	8006174 <HAL_SPI_Transmit+0xde>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2140      	movs	r1, #64	; 0x40
 800615e:	438a      	bics	r2, r1
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2180      	movs	r1, #128	; 0x80
 800616e:	01c9      	lsls	r1, r1, #7
 8006170:	430a      	orrs	r2, r1
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2240      	movs	r2, #64	; 0x40
 800617c:	4013      	ands	r3, r2
 800617e:	2b40      	cmp	r3, #64	; 0x40
 8006180:	d007      	beq.n	8006192 <HAL_SPI_Transmit+0xfc>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2140      	movs	r1, #64	; 0x40
 800618e:	430a      	orrs	r2, r1
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	2380      	movs	r3, #128	; 0x80
 8006198:	011b      	lsls	r3, r3, #4
 800619a:	429a      	cmp	r2, r3
 800619c:	d152      	bne.n	8006244 <HAL_SPI_Transmit+0x1ae>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d004      	beq.n	80061b0 <HAL_SPI_Transmit+0x11a>
 80061a6:	2316      	movs	r3, #22
 80061a8:	18fb      	adds	r3, r7, r3
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d143      	bne.n	8006238 <HAL_SPI_Transmit+0x1a2>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	881a      	ldrh	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60da      	str	r2, [r3, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c0:	1c9a      	adds	r2, r3, #2
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80061d4:	e030      	b.n	8006238 <HAL_SPI_Transmit+0x1a2>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2202      	movs	r2, #2
 80061de:	4013      	ands	r3, r2
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d112      	bne.n	800620a <HAL_SPI_Transmit+0x174>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	881a      	ldrh	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60da      	str	r2, [r3, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	1c9a      	adds	r2, r3, #2
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	86da      	strh	r2, [r3, #54]	; 0x36
 8006208:	e016      	b.n	8006238 <HAL_SPI_Transmit+0x1a2>
 800620a:	f7fe fa63 	bl	80046d4 <HAL_GetTick>
 800620e:	0002      	movs	r2, r0
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d802      	bhi.n	8006220 <HAL_SPI_Transmit+0x18a>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	3301      	adds	r3, #1
 800621e:	d102      	bne.n	8006226 <HAL_SPI_Transmit+0x190>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d108      	bne.n	8006238 <HAL_SPI_Transmit+0x1a2>
 8006226:	231f      	movs	r3, #31
 8006228:	18fb      	adds	r3, r7, r3
 800622a:	2203      	movs	r2, #3
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2251      	movs	r2, #81	; 0x51
 8006232:	2101      	movs	r1, #1
 8006234:	5499      	strb	r1, [r3, r2]
 8006236:	e080      	b.n	800633a <HAL_SPI_Transmit+0x2a4>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1c9      	bne.n	80061d6 <HAL_SPI_Transmit+0x140>
 8006242:	e053      	b.n	80062ec <HAL_SPI_Transmit+0x256>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d004      	beq.n	8006256 <HAL_SPI_Transmit+0x1c0>
 800624c:	2316      	movs	r3, #22
 800624e:	18fb      	adds	r3, r7, r3
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d145      	bne.n	80062e2 <HAL_SPI_Transmit+0x24c>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	330c      	adds	r3, #12
 8006260:	7812      	ldrb	r2, [r2, #0]
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	631a      	str	r2, [r3, #48]	; 0x30
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	86da      	strh	r2, [r3, #54]	; 0x36
 800627c:	e031      	b.n	80062e2 <HAL_SPI_Transmit+0x24c>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2202      	movs	r2, #2
 8006286:	4013      	ands	r3, r2
 8006288:	2b02      	cmp	r3, #2
 800628a:	d113      	bne.n	80062b4 <HAL_SPI_Transmit+0x21e>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	330c      	adds	r3, #12
 8006296:	7812      	ldrb	r2, [r2, #0]
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80062b2:	e016      	b.n	80062e2 <HAL_SPI_Transmit+0x24c>
 80062b4:	f7fe fa0e 	bl	80046d4 <HAL_GetTick>
 80062b8:	0002      	movs	r2, r0
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d802      	bhi.n	80062ca <HAL_SPI_Transmit+0x234>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	d102      	bne.n	80062d0 <HAL_SPI_Transmit+0x23a>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d108      	bne.n	80062e2 <HAL_SPI_Transmit+0x24c>
 80062d0:	231f      	movs	r3, #31
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	2203      	movs	r2, #3
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2251      	movs	r2, #81	; 0x51
 80062dc:	2101      	movs	r1, #1
 80062de:	5499      	strb	r1, [r3, r2]
 80062e0:	e02b      	b.n	800633a <HAL_SPI_Transmit+0x2a4>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1c8      	bne.n	800627e <HAL_SPI_Transmit+0x1e8>
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	0018      	movs	r0, r3
 80062f4:	f000 fa86 	bl	8006804 <SPI_EndRxTxTransaction>
 80062f8:	1e03      	subs	r3, r0, #0
 80062fa:	d002      	beq.n	8006302 <HAL_SPI_Transmit+0x26c>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2220      	movs	r2, #32
 8006300:	655a      	str	r2, [r3, #84]	; 0x54
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <HAL_SPI_Transmit+0x28a>
 800630a:	2300      	movs	r3, #0
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	613b      	str	r3, [r7, #16]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	613b      	str	r3, [r7, #16]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <HAL_SPI_Transmit+0x29c>
 8006328:	231f      	movs	r3, #31
 800632a:	18fb      	adds	r3, r7, r3
 800632c:	2201      	movs	r2, #1
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e003      	b.n	800633a <HAL_SPI_Transmit+0x2a4>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2251      	movs	r2, #81	; 0x51
 8006336:	2101      	movs	r1, #1
 8006338:	5499      	strb	r1, [r3, r2]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2250      	movs	r2, #80	; 0x50
 800633e:	2100      	movs	r1, #0
 8006340:	5499      	strb	r1, [r3, r2]
 8006342:	231f      	movs	r3, #31
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	0018      	movs	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	b008      	add	sp, #32
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_SPI_TransmitReceive>:
 8006350:	b580      	push	{r7, lr}
 8006352:	b08c      	sub	sp, #48	; 0x30
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	001a      	movs	r2, r3
 800635e:	1cbb      	adds	r3, r7, #2
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	2301      	movs	r3, #1
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006366:	232b      	movs	r3, #43	; 0x2b
 8006368:	18fb      	adds	r3, r7, r3
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2250      	movs	r2, #80	; 0x50
 8006372:	5c9b      	ldrb	r3, [r3, r2]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_SPI_TransmitReceive+0x2c>
 8006378:	2302      	movs	r3, #2
 800637a:	e1b0      	b.n	80066de <HAL_SPI_TransmitReceive+0x38e>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2250      	movs	r2, #80	; 0x50
 8006380:	2101      	movs	r1, #1
 8006382:	5499      	strb	r1, [r3, r2]
 8006384:	f7fe f9a6 	bl	80046d4 <HAL_GetTick>
 8006388:	0003      	movs	r3, r0
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
 800638c:	2023      	movs	r0, #35	; 0x23
 800638e:	183b      	adds	r3, r7, r0
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	2151      	movs	r1, #81	; 0x51
 8006394:	5c52      	ldrb	r2, [r2, r1]
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	231a      	movs	r3, #26
 80063a0:	18fb      	adds	r3, r7, r3
 80063a2:	1cba      	adds	r2, r7, #2
 80063a4:	8812      	ldrh	r2, [r2, #0]
 80063a6:	801a      	strh	r2, [r3, #0]
 80063a8:	183b      	adds	r3, r7, r0
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d011      	beq.n	80063d4 <HAL_SPI_TransmitReceive+0x84>
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	2382      	movs	r3, #130	; 0x82
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d107      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x7a>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x7a>
 80063c2:	183b      	adds	r3, r7, r0
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d004      	beq.n	80063d4 <HAL_SPI_TransmitReceive+0x84>
 80063ca:	232b      	movs	r3, #43	; 0x2b
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	2202      	movs	r2, #2
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	e17d      	b.n	80066d0 <HAL_SPI_TransmitReceive+0x380>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d006      	beq.n	80063e8 <HAL_SPI_TransmitReceive+0x98>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_SPI_TransmitReceive+0x98>
 80063e0:	1cbb      	adds	r3, r7, #2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d104      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0xa2>
 80063e8:	232b      	movs	r3, #43	; 0x2b
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	e16e      	b.n	80066d0 <HAL_SPI_TransmitReceive+0x380>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2251      	movs	r2, #81	; 0x51
 80063f6:	5c9b      	ldrb	r3, [r3, r2]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d003      	beq.n	8006406 <HAL_SPI_TransmitReceive+0xb6>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2251      	movs	r2, #81	; 0x51
 8006402:	2105      	movs	r1, #5
 8006404:	5499      	strb	r1, [r3, r2]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	655a      	str	r2, [r3, #84]	; 0x54
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	639a      	str	r2, [r3, #56]	; 0x38
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1cba      	adds	r2, r7, #2
 8006416:	8812      	ldrh	r2, [r2, #0]
 8006418:	87da      	strh	r2, [r3, #62]	; 0x3e
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1cba      	adds	r2, r7, #2
 800641e:	8812      	ldrh	r2, [r2, #0]
 8006420:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	1cba      	adds	r2, r7, #2
 800642c:	8812      	ldrh	r2, [r2, #0]
 800642e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1cba      	adds	r2, r7, #2
 8006434:	8812      	ldrh	r2, [r2, #0]
 8006436:	869a      	strh	r2, [r3, #52]	; 0x34
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	641a      	str	r2, [r3, #64]	; 0x40
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	645a      	str	r2, [r3, #68]	; 0x44
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2240      	movs	r2, #64	; 0x40
 800644c:	4013      	ands	r3, r2
 800644e:	2b40      	cmp	r3, #64	; 0x40
 8006450:	d007      	beq.n	8006462 <HAL_SPI_TransmitReceive+0x112>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2140      	movs	r1, #64	; 0x40
 800645e:	430a      	orrs	r2, r1
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	2380      	movs	r3, #128	; 0x80
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	429a      	cmp	r2, r3
 800646c:	d000      	beq.n	8006470 <HAL_SPI_TransmitReceive+0x120>
 800646e:	e07f      	b.n	8006570 <HAL_SPI_TransmitReceive+0x220>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <HAL_SPI_TransmitReceive+0x134>
 8006478:	231a      	movs	r3, #26
 800647a:	18fb      	adds	r3, r7, r3
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d000      	beq.n	8006484 <HAL_SPI_TransmitReceive+0x134>
 8006482:	e06a      	b.n	800655a <HAL_SPI_TransmitReceive+0x20a>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	881a      	ldrh	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60da      	str	r2, [r3, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	1c9a      	adds	r2, r3, #2
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80064a8:	e057      	b.n	800655a <HAL_SPI_TransmitReceive+0x20a>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2202      	movs	r2, #2
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d11b      	bne.n	80064f0 <HAL_SPI_TransmitReceive+0x1a0>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d016      	beq.n	80064f0 <HAL_SPI_TransmitReceive+0x1a0>
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d113      	bne.n	80064f0 <HAL_SPI_TransmitReceive+0x1a0>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	881a      	ldrh	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	60da      	str	r2, [r3, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	1c9a      	adds	r2, r3, #2
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80064ec:	2300      	movs	r3, #0
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2201      	movs	r2, #1
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d119      	bne.n	8006532 <HAL_SPI_TransmitReceive+0x1e2>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006502:	b29b      	uxth	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d014      	beq.n	8006532 <HAL_SPI_TransmitReceive+0x1e2>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	b292      	uxth	r2, r2
 8006514:	801a      	strh	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	1c9a      	adds	r2, r3, #2
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	639a      	str	r2, [r3, #56]	; 0x38
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800652e:	2301      	movs	r3, #1
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006532:	f7fe f8cf 	bl	80046d4 <HAL_GetTick>
 8006536:	0002      	movs	r2, r0
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800653e:	429a      	cmp	r2, r3
 8006540:	d80b      	bhi.n	800655a <HAL_SPI_TransmitReceive+0x20a>
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	3301      	adds	r3, #1
 8006546:	d008      	beq.n	800655a <HAL_SPI_TransmitReceive+0x20a>
 8006548:	232b      	movs	r3, #43	; 0x2b
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	2203      	movs	r2, #3
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2251      	movs	r2, #81	; 0x51
 8006554:	2101      	movs	r1, #1
 8006556:	5499      	strb	r1, [r3, r2]
 8006558:	e0ba      	b.n	80066d0 <HAL_SPI_TransmitReceive+0x380>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1a2      	bne.n	80064aa <HAL_SPI_TransmitReceive+0x15a>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d19d      	bne.n	80064aa <HAL_SPI_TransmitReceive+0x15a>
 800656e:	e083      	b.n	8006678 <HAL_SPI_TransmitReceive+0x328>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <HAL_SPI_TransmitReceive+0x234>
 8006578:	231a      	movs	r3, #26
 800657a:	18fb      	adds	r3, r7, r3
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d000      	beq.n	8006584 <HAL_SPI_TransmitReceive+0x234>
 8006582:	e06f      	b.n	8006664 <HAL_SPI_TransmitReceive+0x314>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	330c      	adds	r3, #12
 800658e:	7812      	ldrb	r2, [r2, #0]
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	631a      	str	r2, [r3, #48]	; 0x30
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80065aa:	e05b      	b.n	8006664 <HAL_SPI_TransmitReceive+0x314>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2202      	movs	r2, #2
 80065b4:	4013      	ands	r3, r2
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d11c      	bne.n	80065f4 <HAL_SPI_TransmitReceive+0x2a4>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d017      	beq.n	80065f4 <HAL_SPI_TransmitReceive+0x2a4>
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d114      	bne.n	80065f4 <HAL_SPI_TransmitReceive+0x2a4>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	7812      	ldrb	r2, [r2, #0]
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80065f0:	2300      	movs	r3, #0
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2201      	movs	r2, #1
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d119      	bne.n	8006636 <HAL_SPI_TransmitReceive+0x2e6>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d014      	beq.n	8006636 <HAL_SPI_TransmitReceive+0x2e6>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	639a      	str	r2, [r3, #56]	; 0x38
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006632:	2301      	movs	r3, #1
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006636:	f7fe f84d 	bl	80046d4 <HAL_GetTick>
 800663a:	0002      	movs	r2, r0
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006642:	429a      	cmp	r2, r3
 8006644:	d802      	bhi.n	800664c <HAL_SPI_TransmitReceive+0x2fc>
 8006646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006648:	3301      	adds	r3, #1
 800664a:	d102      	bne.n	8006652 <HAL_SPI_TransmitReceive+0x302>
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	2b00      	cmp	r3, #0
 8006650:	d108      	bne.n	8006664 <HAL_SPI_TransmitReceive+0x314>
 8006652:	232b      	movs	r3, #43	; 0x2b
 8006654:	18fb      	adds	r3, r7, r3
 8006656:	2203      	movs	r2, #3
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2251      	movs	r2, #81	; 0x51
 800665e:	2101      	movs	r1, #1
 8006660:	5499      	strb	r1, [r3, r2]
 8006662:	e035      	b.n	80066d0 <HAL_SPI_TransmitReceive+0x380>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d19e      	bne.n	80065ac <HAL_SPI_TransmitReceive+0x25c>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d199      	bne.n	80065ac <HAL_SPI_TransmitReceive+0x25c>
 8006678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	0018      	movs	r0, r3
 8006680:	f000 f8c0 	bl	8006804 <SPI_EndRxTxTransaction>
 8006684:	1e03      	subs	r3, r0, #0
 8006686:	d007      	beq.n	8006698 <HAL_SPI_TransmitReceive+0x348>
 8006688:	232b      	movs	r3, #43	; 0x2b
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	2201      	movs	r2, #1
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2220      	movs	r2, #32
 8006694:	655a      	str	r2, [r3, #84]	; 0x54
 8006696:	e01b      	b.n	80066d0 <HAL_SPI_TransmitReceive+0x380>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <HAL_SPI_TransmitReceive+0x366>
 80066a0:	2300      	movs	r3, #0
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d004      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x378>
 80066be:	232b      	movs	r3, #43	; 0x2b
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	2201      	movs	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	e003      	b.n	80066d0 <HAL_SPI_TransmitReceive+0x380>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2251      	movs	r2, #81	; 0x51
 80066cc:	2101      	movs	r1, #1
 80066ce:	5499      	strb	r1, [r3, r2]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2250      	movs	r2, #80	; 0x50
 80066d4:	2100      	movs	r1, #0
 80066d6:	5499      	strb	r1, [r3, r2]
 80066d8:	232b      	movs	r3, #43	; 0x2b
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	0018      	movs	r0, r3
 80066e0:	46bd      	mov	sp, r7
 80066e2:	b00c      	add	sp, #48	; 0x30
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <SPI_WaitFlagStateUntilTimeout>:
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	1dfb      	adds	r3, r7, #7
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	f7fd ffec 	bl	80046d4 <HAL_GetTick>
 80066fc:	0002      	movs	r2, r0
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	1a9b      	subs	r3, r3, r2
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	18d3      	adds	r3, r2, r3
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	f7fd ffe4 	bl	80046d4 <HAL_GetTick>
 800670c:	0003      	movs	r3, r0
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	4b3a      	ldr	r3, [pc, #232]	; (80067fc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	015b      	lsls	r3, r3, #5
 8006716:	0d1b      	lsrs	r3, r3, #20
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	4353      	muls	r3, r2
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	e058      	b.n	80067d2 <SPI_WaitFlagStateUntilTimeout+0xea>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	d055      	beq.n	80067d2 <SPI_WaitFlagStateUntilTimeout+0xea>
 8006726:	f7fd ffd5 	bl	80046d4 <HAL_GetTick>
 800672a:	0002      	movs	r2, r0
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	429a      	cmp	r2, r3
 8006734:	d902      	bls.n	800673c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d142      	bne.n	80067c2 <SPI_WaitFlagStateUntilTimeout+0xda>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	21e0      	movs	r1, #224	; 0xe0
 8006748:	438a      	bics	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	2382      	movs	r3, #130	; 0x82
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	429a      	cmp	r2, r3
 8006756:	d113      	bne.n	8006780 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	2380      	movs	r3, #128	; 0x80
 800675e:	021b      	lsls	r3, r3, #8
 8006760:	429a      	cmp	r2, r3
 8006762:	d005      	beq.n	8006770 <SPI_WaitFlagStateUntilTimeout+0x88>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	429a      	cmp	r2, r3
 800676e:	d107      	bne.n	8006780 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2140      	movs	r1, #64	; 0x40
 800677c:	438a      	bics	r2, r1
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	019b      	lsls	r3, r3, #6
 8006788:	429a      	cmp	r2, r3
 800678a:	d110      	bne.n	80067ae <SPI_WaitFlagStateUntilTimeout+0xc6>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	491a      	ldr	r1, [pc, #104]	; (8006800 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006798:	400a      	ands	r2, r1
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2180      	movs	r1, #128	; 0x80
 80067a8:	0189      	lsls	r1, r1, #6
 80067aa:	430a      	orrs	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2251      	movs	r2, #81	; 0x51
 80067b2:	2101      	movs	r1, #1
 80067b4:	5499      	strb	r1, [r3, r2]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2250      	movs	r2, #80	; 0x50
 80067ba:	2100      	movs	r1, #0
 80067bc:	5499      	strb	r1, [r3, r2]
 80067be:	2303      	movs	r3, #3
 80067c0:	e017      	b.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0x10a>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <SPI_WaitFlagStateUntilTimeout+0xe4>
 80067c8:	2300      	movs	r3, #0
 80067ca:	61fb      	str	r3, [r7, #28]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	4013      	ands	r3, r2
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	425a      	negs	r2, r3
 80067e2:	4153      	adcs	r3, r2
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	001a      	movs	r2, r3
 80067e8:	1dfb      	adds	r3, r7, #7
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d197      	bne.n	8006720 <SPI_WaitFlagStateUntilTimeout+0x38>
 80067f0:	2300      	movs	r3, #0
 80067f2:	0018      	movs	r0, r3
 80067f4:	46bd      	mov	sp, r7
 80067f6:	b008      	add	sp, #32
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	20000004 	.word	0x20000004
 8006800:	ffffdfff 	.word	0xffffdfff

08006804 <SPI_EndRxTxTransaction>:
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	4b1d      	ldr	r3, [pc, #116]	; (8006888 <SPI_EndRxTxTransaction+0x84>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	491d      	ldr	r1, [pc, #116]	; (800688c <SPI_EndRxTxTransaction+0x88>)
 8006816:	0018      	movs	r0, r3
 8006818:	f7f9 fc92 	bl	8000140 <__udivsi3>
 800681c:	0003      	movs	r3, r0
 800681e:	001a      	movs	r2, r3
 8006820:	0013      	movs	r3, r2
 8006822:	015b      	lsls	r3, r3, #5
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	189b      	adds	r3, r3, r2
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	2382      	movs	r3, #130	; 0x82
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	429a      	cmp	r2, r3
 8006838:	d112      	bne.n	8006860 <SPI_EndRxTxTransaction+0x5c>
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	0013      	movs	r3, r2
 8006844:	2200      	movs	r2, #0
 8006846:	2180      	movs	r1, #128	; 0x80
 8006848:	f7ff ff4e 	bl	80066e8 <SPI_WaitFlagStateUntilTimeout>
 800684c:	1e03      	subs	r3, r0, #0
 800684e:	d016      	beq.n	800687e <SPI_EndRxTxTransaction+0x7a>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006854:	2220      	movs	r2, #32
 8006856:	431a      	orrs	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
 800685c:	2303      	movs	r3, #3
 800685e:	e00f      	b.n	8006880 <SPI_EndRxTxTransaction+0x7c>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <SPI_EndRxTxTransaction+0x78>
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	3b01      	subs	r3, #1
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	2280      	movs	r2, #128	; 0x80
 8006874:	4013      	ands	r3, r2
 8006876:	2b80      	cmp	r3, #128	; 0x80
 8006878:	d0f2      	beq.n	8006860 <SPI_EndRxTxTransaction+0x5c>
 800687a:	e000      	b.n	800687e <SPI_EndRxTxTransaction+0x7a>
 800687c:	46c0      	nop			; (mov r8, r8)
 800687e:	2300      	movs	r3, #0
 8006880:	0018      	movs	r0, r3
 8006882:	46bd      	mov	sp, r7
 8006884:	b006      	add	sp, #24
 8006886:	bd80      	pop	{r7, pc}
 8006888:	20000004 	.word	0x20000004
 800688c:	016e3600 	.word	0x016e3600

08006890 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006894:	4a06      	ldr	r2, [pc, #24]	; (80068b0 <MX_FATFS_Init+0x20>)
 8006896:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <MX_FATFS_Init+0x24>)
 8006898:	0011      	movs	r1, r2
 800689a:	0018      	movs	r0, r3
 800689c:	f003 f982 	bl	8009ba4 <FATFS_LinkDriver>
 80068a0:	0003      	movs	r3, r0
 80068a2:	001a      	movs	r2, r3
 80068a4:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <MX_FATFS_Init+0x28>)
 80068a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80068a8:	46c0      	nop			; (mov r8, r8)
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	200002ec 	.word	0x200002ec
 80068b4:	20000010 	.word	0x20000010
 80068b8:	200002e8 	.word	0x200002e8

080068bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80068c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80068c2:	0018      	movs	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	0002      	movs	r2, r0
 80068d0:	1dfb      	adds	r3, r7, #7
 80068d2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80068d4:	1dfb      	adds	r3, r7, #7
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	0018      	movs	r0, r3
 80068da:	f7fc fb9d 	bl	8003018 <SD_disk_initialize>
 80068de:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80068e0:	0018      	movs	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	b002      	add	sp, #8
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	0002      	movs	r2, r0
 80068f0:	1dfb      	adds	r3, r7, #7
 80068f2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80068f4:	1dfb      	adds	r3, r7, #7
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	0018      	movs	r0, r3
 80068fa:	f7fc fc97 	bl	800322c <SD_disk_status>
 80068fe:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8006900:	0018      	movs	r0, r3
 8006902:	46bd      	mov	sp, r7
 8006904:	b002      	add	sp, #8
 8006906:	bd80      	pop	{r7, pc}

08006908 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006908:	b5b0      	push	{r4, r5, r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	250f      	movs	r5, #15
 8006916:	197b      	adds	r3, r7, r5
 8006918:	1c02      	adds	r2, r0, #0
 800691a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800691c:	683c      	ldr	r4, [r7, #0]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	197b      	adds	r3, r7, r5
 8006924:	7818      	ldrb	r0, [r3, #0]
 8006926:	0023      	movs	r3, r4
 8006928:	f7fc fc96 	bl	8003258 <SD_disk_read>
 800692c:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 800692e:	0018      	movs	r0, r3
 8006930:	46bd      	mov	sp, r7
 8006932:	b004      	add	sp, #16
 8006934:	bdb0      	pop	{r4, r5, r7, pc}

08006936 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006936:	b5b0      	push	{r4, r5, r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
 8006942:	250f      	movs	r5, #15
 8006944:	197b      	adds	r3, r7, r5
 8006946:	1c02      	adds	r2, r0, #0
 8006948:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800694a:	683c      	ldr	r4, [r7, #0]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	197b      	adds	r3, r7, r5
 8006952:	7818      	ldrb	r0, [r3, #0]
 8006954:	0023      	movs	r3, r4
 8006956:	f7fc fcef 	bl	8003338 <SD_disk_write>
 800695a:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 800695c:	0018      	movs	r0, r3
 800695e:	46bd      	mov	sp, r7
 8006960:	b004      	add	sp, #16
 8006962:	bdb0      	pop	{r4, r5, r7, pc}

08006964 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	603a      	str	r2, [r7, #0]
 800696c:	1dfb      	adds	r3, r7, #7
 800696e:	1c02      	adds	r2, r0, #0
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	1dbb      	adds	r3, r7, #6
 8006974:	1c0a      	adds	r2, r1, #0
 8006976:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	1dbb      	adds	r3, r7, #6
 800697c:	7819      	ldrb	r1, [r3, #0]
 800697e:	1dfb      	adds	r3, r7, #7
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	0018      	movs	r0, r3
 8006984:	f7fc fd60 	bl	8003448 <SD_disk_ioctl>
 8006988:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 800698a:	0018      	movs	r0, r3
 800698c:	46bd      	mov	sp, r7
 800698e:	b002      	add	sp, #8
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006994:	b5b0      	push	{r4, r5, r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	0002      	movs	r2, r0
 800699c:	1dfb      	adds	r3, r7, #7
 800699e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80069a0:	1dfb      	adds	r3, r7, #7
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	4a0b      	ldr	r2, [pc, #44]	; (80069d4 <disk_status+0x40>)
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	18d3      	adds	r3, r2, r3
 80069aa:	3304      	adds	r3, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	1dfa      	adds	r2, r7, #7
 80069b2:	7812      	ldrb	r2, [r2, #0]
 80069b4:	4907      	ldr	r1, [pc, #28]	; (80069d4 <disk_status+0x40>)
 80069b6:	188a      	adds	r2, r1, r2
 80069b8:	7a12      	ldrb	r2, [r2, #8]
 80069ba:	250f      	movs	r5, #15
 80069bc:	197c      	adds	r4, r7, r5
 80069be:	0010      	movs	r0, r2
 80069c0:	4798      	blx	r3
 80069c2:	0003      	movs	r3, r0
 80069c4:	7023      	strb	r3, [r4, #0]
  return stat;
 80069c6:	197b      	adds	r3, r7, r5
 80069c8:	781b      	ldrb	r3, [r3, #0]
}
 80069ca:	0018      	movs	r0, r3
 80069cc:	46bd      	mov	sp, r7
 80069ce:	b004      	add	sp, #16
 80069d0:	bdb0      	pop	{r4, r5, r7, pc}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	20000518 	.word	0x20000518

080069d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	0002      	movs	r2, r0
 80069e0:	1dfb      	adds	r3, r7, #7
 80069e2:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80069e4:	200f      	movs	r0, #15
 80069e6:	183b      	adds	r3, r7, r0
 80069e8:	2200      	movs	r2, #0
 80069ea:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80069ec:	1dfb      	adds	r3, r7, #7
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	4a10      	ldr	r2, [pc, #64]	; (8006a34 <disk_initialize+0x5c>)
 80069f2:	5cd3      	ldrb	r3, [r2, r3]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d116      	bne.n	8006a26 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 80069f8:	1dfb      	adds	r3, r7, #7
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	4a0d      	ldr	r2, [pc, #52]	; (8006a34 <disk_initialize+0x5c>)
 80069fe:	2101      	movs	r1, #1
 8006a00:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006a02:	1dfb      	adds	r3, r7, #7
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	4a0b      	ldr	r2, [pc, #44]	; (8006a34 <disk_initialize+0x5c>)
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	18d3      	adds	r3, r2, r3
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	1dfa      	adds	r2, r7, #7
 8006a14:	7812      	ldrb	r2, [r2, #0]
 8006a16:	4907      	ldr	r1, [pc, #28]	; (8006a34 <disk_initialize+0x5c>)
 8006a18:	188a      	adds	r2, r1, r2
 8006a1a:	7a12      	ldrb	r2, [r2, #8]
 8006a1c:	183c      	adds	r4, r7, r0
 8006a1e:	0010      	movs	r0, r2
 8006a20:	4798      	blx	r3
 8006a22:	0003      	movs	r3, r0
 8006a24:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8006a26:	230f      	movs	r3, #15
 8006a28:	18fb      	adds	r3, r7, r3
 8006a2a:	781b      	ldrb	r3, [r3, #0]
}
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	b005      	add	sp, #20
 8006a32:	bd90      	pop	{r4, r7, pc}
 8006a34:	20000518 	.word	0x20000518

08006a38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	210f      	movs	r1, #15
 8006a46:	187b      	adds	r3, r7, r1
 8006a48:	1c02      	adds	r2, r0, #0
 8006a4a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006a4c:	187b      	adds	r3, r7, r1
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	4a0c      	ldr	r2, [pc, #48]	; (8006a84 <disk_read+0x4c>)
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	18d3      	adds	r3, r2, r3
 8006a56:	3304      	adds	r3, #4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689d      	ldr	r5, [r3, #8]
 8006a5c:	187b      	adds	r3, r7, r1
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	4a08      	ldr	r2, [pc, #32]	; (8006a84 <disk_read+0x4c>)
 8006a62:	18d3      	adds	r3, r2, r3
 8006a64:	7a18      	ldrb	r0, [r3, #8]
 8006a66:	2617      	movs	r6, #23
 8006a68:	19bc      	adds	r4, r7, r6
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	47a8      	blx	r5
 8006a72:	0003      	movs	r3, r0
 8006a74:	7023      	strb	r3, [r4, #0]
  return res;
 8006a76:	19bb      	adds	r3, r7, r6
 8006a78:	781b      	ldrb	r3, [r3, #0]
}
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	b007      	add	sp, #28
 8006a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a82:	46c0      	nop			; (mov r8, r8)
 8006a84:	20000518 	.word	0x20000518

08006a88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	210f      	movs	r1, #15
 8006a96:	187b      	adds	r3, r7, r1
 8006a98:	1c02      	adds	r2, r0, #0
 8006a9a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006a9c:	187b      	adds	r3, r7, r1
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	4a0c      	ldr	r2, [pc, #48]	; (8006ad4 <disk_write+0x4c>)
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	18d3      	adds	r3, r2, r3
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68dd      	ldr	r5, [r3, #12]
 8006aac:	187b      	adds	r3, r7, r1
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	4a08      	ldr	r2, [pc, #32]	; (8006ad4 <disk_write+0x4c>)
 8006ab2:	18d3      	adds	r3, r2, r3
 8006ab4:	7a18      	ldrb	r0, [r3, #8]
 8006ab6:	2617      	movs	r6, #23
 8006ab8:	19bc      	adds	r4, r7, r6
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	47a8      	blx	r5
 8006ac2:	0003      	movs	r3, r0
 8006ac4:	7023      	strb	r3, [r4, #0]
  return res;
 8006ac6:	19bb      	adds	r3, r7, r6
 8006ac8:	781b      	ldrb	r3, [r3, #0]
}
 8006aca:	0018      	movs	r0, r3
 8006acc:	46bd      	mov	sp, r7
 8006ace:	b007      	add	sp, #28
 8006ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	20000518 	.word	0x20000518

08006ad8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	603a      	str	r2, [r7, #0]
 8006ae0:	1dfb      	adds	r3, r7, #7
 8006ae2:	1c02      	adds	r2, r0, #0
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	1dbb      	adds	r3, r7, #6
 8006ae8:	1c0a      	adds	r2, r1, #0
 8006aea:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006aec:	1dfb      	adds	r3, r7, #7
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	4a0c      	ldr	r2, [pc, #48]	; (8006b24 <disk_ioctl+0x4c>)
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	18d3      	adds	r3, r2, r3
 8006af6:	3304      	adds	r3, #4
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	1dfa      	adds	r2, r7, #7
 8006afe:	7812      	ldrb	r2, [r2, #0]
 8006b00:	4908      	ldr	r1, [pc, #32]	; (8006b24 <disk_ioctl+0x4c>)
 8006b02:	188a      	adds	r2, r1, r2
 8006b04:	7a10      	ldrb	r0, [r2, #8]
 8006b06:	260f      	movs	r6, #15
 8006b08:	19bc      	adds	r4, r7, r6
 8006b0a:	683d      	ldr	r5, [r7, #0]
 8006b0c:	1dba      	adds	r2, r7, #6
 8006b0e:	7811      	ldrb	r1, [r2, #0]
 8006b10:	002a      	movs	r2, r5
 8006b12:	4798      	blx	r3
 8006b14:	0003      	movs	r3, r0
 8006b16:	7023      	strb	r3, [r4, #0]
  return res;
 8006b18:	19bb      	adds	r3, r7, r6
 8006b1a:	781b      	ldrb	r3, [r3, #0]
}
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	b005      	add	sp, #20
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b24:	20000518 	.word	0x20000518

08006b28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3301      	adds	r3, #1
 8006b34:	781a      	ldrb	r2, [r3, #0]
 8006b36:	210e      	movs	r1, #14
 8006b38:	187b      	adds	r3, r7, r1
 8006b3a:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8006b3c:	187b      	adds	r3, r7, r1
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	021b      	lsls	r3, r3, #8
 8006b42:	b21a      	sxth	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	b21b      	sxth	r3, r3
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	b21a      	sxth	r2, r3
 8006b4e:	187b      	adds	r3, r7, r1
 8006b50:	801a      	strh	r2, [r3, #0]
	return rv;
 8006b52:	187b      	adds	r3, r7, r1
 8006b54:	881b      	ldrh	r3, [r3, #0]
}
 8006b56:	0018      	movs	r0, r3
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	b004      	add	sp, #16
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	3303      	adds	r3, #3
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	3202      	adds	r2, #2
 8006b76:	7812      	ldrb	r2, [r2, #0]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	3201      	adds	r2, #1
 8006b84:	7812      	ldrb	r2, [r2, #0]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	7812      	ldrb	r2, [r2, #0]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
	return rv;
 8006b96:	68fb      	ldr	r3, [r7, #12]
}
 8006b98:	0018      	movs	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b004      	add	sp, #16
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	000a      	movs	r2, r1
 8006baa:	1cbb      	adds	r3, r7, #2
 8006bac:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	1cba      	adds	r2, r7, #2
 8006bb6:	8812      	ldrh	r2, [r2, #0]
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	1cbb      	adds	r3, r7, #2
 8006bbe:	1cba      	adds	r2, r7, #2
 8006bc0:	8812      	ldrh	r2, [r2, #0]
 8006bc2:	0a12      	lsrs	r2, r2, #8
 8006bc4:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	1cba      	adds	r2, r7, #2
 8006bce:	8812      	ldrh	r2, [r2, #0]
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]
}
 8006bd4:	46c0      	nop			; (mov r8, r8)
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b002      	add	sp, #8
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	0a1b      	lsrs	r3, r3, #8
 8006bf6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	607a      	str	r2, [r7, #4]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	0a1b      	lsrs	r3, r3, #8
 8006c08:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	0a1b      	lsrs	r3, r3, #8
 8006c1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	607a      	str	r2, [r7, #4]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]
}
 8006c28:	46c0      	nop			; (mov r8, r8)
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	b002      	add	sp, #8
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00d      	beq.n	8006c66 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	1c53      	adds	r3, r2, #1
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	1c59      	adds	r1, r3, #1
 8006c54:	6179      	str	r1, [r7, #20]
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	607b      	str	r3, [r7, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f1      	bne.n	8006c4a <mem_cpy+0x1a>
	}
}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	b006      	add	sp, #24
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b086      	sub	sp, #24
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	617a      	str	r2, [r7, #20]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	607b      	str	r3, [r7, #4]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f3      	bne.n	8006c7e <mem_set+0x10>
}
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	46c0      	nop			; (mov r8, r8)
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	b006      	add	sp, #24
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	61fa      	str	r2, [r7, #28]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	0019      	movs	r1, r3
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	61ba      	str	r2, [r7, #24]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	1acb      	subs	r3, r1, r3
 8006ccc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	607b      	str	r3, [r7, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <mem_cmp+0x40>
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0eb      	beq.n	8006cb8 <mem_cmp+0x18>

	return r;
 8006ce0:	697b      	ldr	r3, [r7, #20]
}
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	b008      	add	sp, #32
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006cf4:	e002      	b.n	8006cfc <chk_chr+0x12>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	607b      	str	r3, [r7, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <chk_chr+0x26>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	001a      	movs	r2, r3
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d1f2      	bne.n	8006cf6 <chk_chr+0xc>
	return *str;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	781b      	ldrb	r3, [r3, #0]
}
 8006d14:	0018      	movs	r0, r3
 8006d16:	46bd      	mov	sp, r7
 8006d18:	b002      	add	sp, #8
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	e027      	b.n	8006d80 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8006d30:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <chk_lock+0xac>)
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	0112      	lsls	r2, r2, #4
 8006d36:	58d3      	ldr	r3, [r2, r3]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01c      	beq.n	8006d76 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d3c:	4b22      	ldr	r3, [pc, #136]	; (8006dc8 <chk_lock+0xac>)
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	0112      	lsls	r2, r2, #4
 8006d42:	58d2      	ldr	r2, [r2, r3]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d116      	bne.n	8006d7a <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8006d4c:	4a1e      	ldr	r2, [pc, #120]	; (8006dc8 <chk_lock+0xac>)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	18d3      	adds	r3, r2, r3
 8006d54:	3304      	adds	r3, #4
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d10c      	bne.n	8006d7a <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006d60:	4a19      	ldr	r2, [pc, #100]	; (8006dc8 <chk_lock+0xac>)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	18d3      	adds	r3, r2, r3
 8006d68:	3308      	adds	r3, #8
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d102      	bne.n	8006d7a <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006d74:	e007      	b.n	8006d86 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8006d76:	2301      	movs	r3, #1
 8006d78:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d9d4      	bls.n	8006d30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d109      	bne.n	8006da0 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <chk_lock+0x7c>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d101      	bne.n	8006d9c <chk_lock+0x80>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e011      	b.n	8006dc0 <chk_lock+0xa4>
 8006d9c:	2312      	movs	r3, #18
 8006d9e:	e00f      	b.n	8006dc0 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <chk_lock+0x9e>
 8006da6:	4a08      	ldr	r2, [pc, #32]	; (8006dc8 <chk_lock+0xac>)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	18d3      	adds	r3, r2, r3
 8006dae:	330c      	adds	r3, #12
 8006db0:	881a      	ldrh	r2, [r3, #0]
 8006db2:	2380      	movs	r3, #128	; 0x80
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d101      	bne.n	8006dbe <chk_lock+0xa2>
 8006dba:	2310      	movs	r3, #16
 8006dbc:	e000      	b.n	8006dc0 <chk_lock+0xa4>
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	b004      	add	sp, #16
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	200002f8 	.word	0x200002f8

08006dcc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	607b      	str	r3, [r7, #4]
 8006dd6:	e002      	b.n	8006dde <enq_lock+0x12>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	607b      	str	r3, [r7, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d805      	bhi.n	8006df0 <enq_lock+0x24>
 8006de4:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <enq_lock+0x38>)
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	0112      	lsls	r2, r2, #4
 8006dea:	58d3      	ldr	r3, [r2, r3]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1f3      	bne.n	8006dd8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3b02      	subs	r3, #2
 8006df4:	1e5a      	subs	r2, r3, #1
 8006df6:	4193      	sbcs	r3, r2
 8006df8:	b2db      	uxtb	r3, r3
}
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	b002      	add	sp, #8
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	200002f8 	.word	0x200002f8

08006e08 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	e01e      	b.n	8006e56 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8006e18:	4b3f      	ldr	r3, [pc, #252]	; (8006f18 <inc_lock+0x110>)
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	0112      	lsls	r2, r2, #4
 8006e1e:	58d2      	ldr	r2, [r2, r3]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d113      	bne.n	8006e50 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8006e28:	4a3b      	ldr	r2, [pc, #236]	; (8006f18 <inc_lock+0x110>)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	18d3      	adds	r3, r2, r3
 8006e30:	3304      	adds	r3, #4
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d109      	bne.n	8006e50 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8006e3c:	4a36      	ldr	r2, [pc, #216]	; (8006f18 <inc_lock+0x110>)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	18d3      	adds	r3, r2, r3
 8006e44:	3308      	adds	r3, #8
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d006      	beq.n	8006e5e <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d9dd      	bls.n	8006e18 <inc_lock+0x10>
 8006e5c:	e000      	b.n	8006e60 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8006e5e:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d130      	bne.n	8006ec8 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	e002      	b.n	8006e72 <inc_lock+0x6a>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d805      	bhi.n	8006e84 <inc_lock+0x7c>
 8006e78:	4b27      	ldr	r3, [pc, #156]	; (8006f18 <inc_lock+0x110>)
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	0112      	lsls	r2, r2, #4
 8006e7e:	58d3      	ldr	r3, [r2, r3]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1f3      	bne.n	8006e6c <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d101      	bne.n	8006e8e <inc_lock+0x86>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e03f      	b.n	8006f0e <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6819      	ldr	r1, [r3, #0]
 8006e92:	4b21      	ldr	r3, [pc, #132]	; (8006f18 <inc_lock+0x110>)
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	0112      	lsls	r2, r2, #4
 8006e98:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	491e      	ldr	r1, [pc, #120]	; (8006f18 <inc_lock+0x110>)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	18cb      	adds	r3, r1, r3
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	491a      	ldr	r1, [pc, #104]	; (8006f18 <inc_lock+0x110>)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	18cb      	adds	r3, r1, r3
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006eba:	4a17      	ldr	r2, [pc, #92]	; (8006f18 <inc_lock+0x110>)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	18d3      	adds	r3, r2, r3
 8006ec2:	330c      	adds	r3, #12
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d009      	beq.n	8006ee2 <inc_lock+0xda>
 8006ece:	4a12      	ldr	r2, [pc, #72]	; (8006f18 <inc_lock+0x110>)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	18d3      	adds	r3, r2, r3
 8006ed6:	330c      	adds	r3, #12
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <inc_lock+0xda>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e015      	b.n	8006f0e <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d108      	bne.n	8006efa <inc_lock+0xf2>
 8006ee8:	4a0b      	ldr	r2, [pc, #44]	; (8006f18 <inc_lock+0x110>)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	011b      	lsls	r3, r3, #4
 8006eee:	18d3      	adds	r3, r2, r3
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	e001      	b.n	8006efe <inc_lock+0xf6>
 8006efa:	2380      	movs	r3, #128	; 0x80
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	4906      	ldr	r1, [pc, #24]	; (8006f18 <inc_lock+0x110>)
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	0112      	lsls	r2, r2, #4
 8006f04:	188a      	adds	r2, r1, r2
 8006f06:	320c      	adds	r2, #12
 8006f08:	8013      	strh	r3, [r2, #0]

	return i + 1;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3301      	adds	r3, #1
}
 8006f0e:	0018      	movs	r0, r3
 8006f10:	46bd      	mov	sp, r7
 8006f12:	b004      	add	sp, #16
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	200002f8 	.word	0x200002f8

08006f1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	607b      	str	r3, [r7, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d832      	bhi.n	8006f96 <dec_lock+0x7a>
		n = Files[i].ctr;
 8006f30:	200e      	movs	r0, #14
 8006f32:	183b      	adds	r3, r7, r0
 8006f34:	491d      	ldr	r1, [pc, #116]	; (8006fac <dec_lock+0x90>)
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	0112      	lsls	r2, r2, #4
 8006f3a:	188a      	adds	r2, r1, r2
 8006f3c:	320c      	adds	r2, #12
 8006f3e:	8812      	ldrh	r2, [r2, #0]
 8006f40:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006f42:	183b      	adds	r3, r7, r0
 8006f44:	881a      	ldrh	r2, [r3, #0]
 8006f46:	2380      	movs	r3, #128	; 0x80
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d102      	bne.n	8006f54 <dec_lock+0x38>
 8006f4e:	183b      	adds	r3, r7, r0
 8006f50:	2200      	movs	r2, #0
 8006f52:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006f54:	210e      	movs	r1, #14
 8006f56:	187b      	adds	r3, r7, r1
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <dec_lock+0x4c>
 8006f5e:	187b      	adds	r3, r7, r1
 8006f60:	881a      	ldrh	r2, [r3, #0]
 8006f62:	187b      	adds	r3, r7, r1
 8006f64:	3a01      	subs	r2, #1
 8006f66:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8006f68:	4a10      	ldr	r2, [pc, #64]	; (8006fac <dec_lock+0x90>)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	18d3      	adds	r3, r2, r3
 8006f70:	330c      	adds	r3, #12
 8006f72:	210e      	movs	r1, #14
 8006f74:	187a      	adds	r2, r7, r1
 8006f76:	8812      	ldrh	r2, [r2, #0]
 8006f78:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006f7a:	187b      	adds	r3, r7, r1
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d104      	bne.n	8006f8c <dec_lock+0x70>
 8006f82:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <dec_lock+0x90>)
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	0112      	lsls	r2, r2, #4
 8006f88:	2100      	movs	r1, #0
 8006f8a:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8006f8c:	230d      	movs	r3, #13
 8006f8e:	18fb      	adds	r3, r7, r3
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	e003      	b.n	8006f9e <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006f96:	230d      	movs	r3, #13
 8006f98:	18fb      	adds	r3, r7, r3
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8006f9e:	230d      	movs	r3, #13
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	781b      	ldrb	r3, [r3, #0]
}
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b004      	add	sp, #16
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	200002f8 	.word	0x200002f8

08006fb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	e00e      	b.n	8006fdc <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006fbe:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <clear_lock+0x3c>)
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	0112      	lsls	r2, r2, #4
 8006fc4:	58d3      	ldr	r3, [r2, r3]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d104      	bne.n	8006fd6 <clear_lock+0x26>
 8006fcc:	4b07      	ldr	r3, [pc, #28]	; (8006fec <clear_lock+0x3c>)
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	0112      	lsls	r2, r2, #4
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d9ed      	bls.n	8006fbe <clear_lock+0xe>
	}
}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	46c0      	nop			; (mov r8, r8)
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	b004      	add	sp, #16
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	200002f8 	.word	0x200002f8

08006ff0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006ff0:	b590      	push	{r4, r7, lr}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006ff8:	240f      	movs	r4, #15
 8006ffa:	193b      	adds	r3, r7, r4
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	78db      	ldrb	r3, [r3, #3]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d034      	beq.n	8007072 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	7858      	ldrb	r0, [r3, #1]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3338      	adds	r3, #56	; 0x38
 8007016:	0019      	movs	r1, r3
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	2301      	movs	r3, #1
 800701c:	f7ff fd34 	bl	8006a88 <disk_write>
 8007020:	1e03      	subs	r3, r0, #0
 8007022:	d003      	beq.n	800702c <sync_window+0x3c>
			res = FR_DISK_ERR;
 8007024:	193b      	adds	r3, r7, r4
 8007026:	2201      	movs	r2, #1
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	e022      	b.n	8007072 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	1ad2      	subs	r2, r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	429a      	cmp	r2, r3
 8007040:	d217      	bcs.n	8007072 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	789b      	ldrb	r3, [r3, #2]
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	e010      	b.n	800706c <sync_window+0x7c>
					wsect += fs->fsize;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	18d3      	adds	r3, r2, r3
 8007052:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	7858      	ldrb	r0, [r3, #1]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	3338      	adds	r3, #56	; 0x38
 800705c:	0019      	movs	r1, r3
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	2301      	movs	r3, #1
 8007062:	f7ff fd11 	bl	8006a88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	3b01      	subs	r3, #1
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d8eb      	bhi.n	800704a <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8007072:	230f      	movs	r3, #15
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	781b      	ldrb	r3, [r3, #0]
}
 8007078:	0018      	movs	r0, r3
 800707a:	46bd      	mov	sp, r7
 800707c:	b007      	add	sp, #28
 800707e:	bd90      	pop	{r4, r7, pc}

08007080 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007080:	b5b0      	push	{r4, r5, r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800708a:	250f      	movs	r5, #15
 800708c:	197b      	adds	r3, r7, r5
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d01f      	beq.n	80070dc <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800709c:	197c      	adds	r4, r7, r5
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	0018      	movs	r0, r3
 80070a2:	f7ff ffa5 	bl	8006ff0 <sync_window>
 80070a6:	0003      	movs	r3, r0
 80070a8:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80070aa:	002c      	movs	r4, r5
 80070ac:	193b      	adds	r3, r7, r4
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d113      	bne.n	80070dc <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	7858      	ldrb	r0, [r3, #1]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3338      	adds	r3, #56	; 0x38
 80070bc:	0019      	movs	r1, r3
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	2301      	movs	r3, #1
 80070c2:	f7ff fcb9 	bl	8006a38 <disk_read>
 80070c6:	1e03      	subs	r3, r0, #0
 80070c8:	d005      	beq.n	80070d6 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80070ca:	2301      	movs	r3, #1
 80070cc:	425b      	negs	r3, r3
 80070ce:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80070d0:	193b      	adds	r3, r7, r4
 80070d2:	2201      	movs	r2, #1
 80070d4:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80070dc:	230f      	movs	r3, #15
 80070de:	18fb      	adds	r3, r7, r3
 80070e0:	781b      	ldrb	r3, [r3, #0]
}
 80070e2:	0018      	movs	r0, r3
 80070e4:	46bd      	mov	sp, r7
 80070e6:	b004      	add	sp, #16
 80070e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080070ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80070ec:	b5b0      	push	{r4, r5, r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80070f4:	250f      	movs	r5, #15
 80070f6:	197c      	adds	r4, r7, r5
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	0018      	movs	r0, r3
 80070fc:	f7ff ff78 	bl	8006ff0 <sync_window>
 8007100:	0003      	movs	r3, r0
 8007102:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007104:	197b      	adds	r3, r7, r5
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d15e      	bne.n	80071ca <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b03      	cmp	r3, #3
 8007112:	d14d      	bne.n	80071b0 <sync_fs+0xc4>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	791b      	ldrb	r3, [r3, #4]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d149      	bne.n	80071b0 <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3338      	adds	r3, #56	; 0x38
 8007120:	0018      	movs	r0, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	899b      	ldrh	r3, [r3, #12]
 8007126:	001a      	movs	r2, r3
 8007128:	2100      	movs	r1, #0
 800712a:	f7ff fda0 	bl	8006c6e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3338      	adds	r3, #56	; 0x38
 8007132:	33ff      	adds	r3, #255	; 0xff
 8007134:	33ff      	adds	r3, #255	; 0xff
 8007136:	4a28      	ldr	r2, [pc, #160]	; (80071d8 <sync_fs+0xec>)
 8007138:	0011      	movs	r1, r2
 800713a:	0018      	movs	r0, r3
 800713c:	f7ff fd30 	bl	8006ba0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3338      	adds	r3, #56	; 0x38
 8007144:	4a25      	ldr	r2, [pc, #148]	; (80071dc <sync_fs+0xf0>)
 8007146:	0011      	movs	r1, r2
 8007148:	0018      	movs	r0, r3
 800714a:	f7ff fd47 	bl	8006bdc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3338      	adds	r3, #56	; 0x38
 8007152:	33e5      	adds	r3, #229	; 0xe5
 8007154:	33ff      	adds	r3, #255	; 0xff
 8007156:	4a22      	ldr	r2, [pc, #136]	; (80071e0 <sync_fs+0xf4>)
 8007158:	0011      	movs	r1, r2
 800715a:	0018      	movs	r0, r3
 800715c:	f7ff fd3e 	bl	8006bdc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3338      	adds	r3, #56	; 0x38
 8007164:	33e9      	adds	r3, #233	; 0xe9
 8007166:	33ff      	adds	r3, #255	; 0xff
 8007168:	001a      	movs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	0019      	movs	r1, r3
 8007170:	0010      	movs	r0, r2
 8007172:	f7ff fd33 	bl	8006bdc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3338      	adds	r3, #56	; 0x38
 800717a:	33ed      	adds	r3, #237	; 0xed
 800717c:	33ff      	adds	r3, #255	; 0xff
 800717e:	001a      	movs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	0019      	movs	r1, r3
 8007186:	0010      	movs	r0, r2
 8007188:	f7ff fd28 	bl	8006bdc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	7858      	ldrb	r0, [r3, #1]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3338      	adds	r3, #56	; 0x38
 800719e:	0019      	movs	r1, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a4:	2301      	movs	r3, #1
 80071a6:	f7ff fc6f 	bl	8006a88 <disk_write>
			fs->fsi_flag = 0;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	785b      	ldrb	r3, [r3, #1]
 80071b4:	2200      	movs	r2, #0
 80071b6:	2100      	movs	r1, #0
 80071b8:	0018      	movs	r0, r3
 80071ba:	f7ff fc8d 	bl	8006ad8 <disk_ioctl>
 80071be:	1e03      	subs	r3, r0, #0
 80071c0:	d003      	beq.n	80071ca <sync_fs+0xde>
 80071c2:	230f      	movs	r3, #15
 80071c4:	18fb      	adds	r3, r7, r3
 80071c6:	2201      	movs	r2, #1
 80071c8:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80071ca:	230f      	movs	r3, #15
 80071cc:	18fb      	adds	r3, r7, r3
 80071ce:	781b      	ldrb	r3, [r3, #0]
}
 80071d0:	0018      	movs	r0, r3
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b004      	add	sp, #16
 80071d6:	bdb0      	pop	{r4, r5, r7, pc}
 80071d8:	0000aa55 	.word	0x0000aa55
 80071dc:	41615252 	.word	0x41615252
 80071e0:	61417272 	.word	0x61417272

080071e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	3b02      	subs	r3, #2
 80071f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	3b02      	subs	r3, #2
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d301      	bcc.n	8007204 <clust2sect+0x20>
 8007200:	2300      	movs	r3, #0
 8007202:	e007      	b.n	8007214 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	895b      	ldrh	r3, [r3, #10]
 8007208:	001a      	movs	r2, r3
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	435a      	muls	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007212:	18d3      	adds	r3, r2, r3
}
 8007214:	0018      	movs	r0, r3
 8007216:	46bd      	mov	sp, r7
 8007218:	b002      	add	sp, #8
 800721a:	bd80      	pop	{r7, pc}

0800721c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800721c:	b590      	push	{r4, r7, lr}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d904      	bls.n	800723c <get_fat+0x20>
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	429a      	cmp	r2, r3
 800723a:	d302      	bcc.n	8007242 <get_fat+0x26>
		val = 1;	/* Internal error */
 800723c:	2301      	movs	r3, #1
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	e0c2      	b.n	80073c8 <get_fat+0x1ac>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007242:	2301      	movs	r3, #1
 8007244:	425b      	negs	r3, r3
 8007246:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b03      	cmp	r3, #3
 800724e:	d100      	bne.n	8007252 <get_fat+0x36>
 8007250:	e088      	b.n	8007364 <get_fat+0x148>
 8007252:	dd00      	ble.n	8007256 <get_fat+0x3a>
 8007254:	e0ae      	b.n	80073b4 <get_fat+0x198>
 8007256:	2b01      	cmp	r3, #1
 8007258:	d002      	beq.n	8007260 <get_fat+0x44>
 800725a:	2b02      	cmp	r3, #2
 800725c:	d05c      	beq.n	8007318 <get_fat+0xfc>
 800725e:	e0a9      	b.n	80073b4 <get_fat+0x198>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	085b      	lsrs	r3, r3, #1
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	18d3      	adds	r3, r2, r3
 800726c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	899b      	ldrh	r3, [r3, #12]
 8007276:	0019      	movs	r1, r3
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7f8 ff61 	bl	8000140 <__udivsi3>
 800727e:	0003      	movs	r3, r0
 8007280:	18e2      	adds	r2, r4, r3
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	0011      	movs	r1, r2
 8007286:	0018      	movs	r0, r3
 8007288:	f7ff fefa 	bl	8007080 <move_window>
 800728c:	1e03      	subs	r3, r0, #0
 800728e:	d000      	beq.n	8007292 <get_fat+0x76>
 8007290:	e093      	b.n	80073ba <get_fat+0x19e>
			wc = fs->win[bc++ % SS(fs)];
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	60fa      	str	r2, [r7, #12]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	8992      	ldrh	r2, [r2, #12]
 800729c:	0011      	movs	r1, r2
 800729e:	0018      	movs	r0, r3
 80072a0:	f7f8 ffd4 	bl	800024c <__aeabi_uidivmod>
 80072a4:	000b      	movs	r3, r1
 80072a6:	0019      	movs	r1, r3
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	2238      	movs	r2, #56	; 0x38
 80072ac:	185b      	adds	r3, r3, r1
 80072ae:	189b      	adds	r3, r3, r2
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	899b      	ldrh	r3, [r3, #12]
 80072bc:	0019      	movs	r1, r3
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f7f8 ff3e 	bl	8000140 <__udivsi3>
 80072c4:	0003      	movs	r3, r0
 80072c6:	18e2      	adds	r2, r4, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	0011      	movs	r1, r2
 80072cc:	0018      	movs	r0, r3
 80072ce:	f7ff fed7 	bl	8007080 <move_window>
 80072d2:	1e03      	subs	r3, r0, #0
 80072d4:	d000      	beq.n	80072d8 <get_fat+0xbc>
 80072d6:	e072      	b.n	80073be <get_fat+0x1a2>
			wc |= fs->win[bc % SS(fs)] << 8;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	899b      	ldrh	r3, [r3, #12]
 80072dc:	001a      	movs	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	0011      	movs	r1, r2
 80072e2:	0018      	movs	r0, r3
 80072e4:	f7f8 ffb2 	bl	800024c <__aeabi_uidivmod>
 80072e8:	000b      	movs	r3, r1
 80072ea:	0019      	movs	r1, r3
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	2238      	movs	r2, #56	; 0x38
 80072f0:	185b      	adds	r3, r3, r1
 80072f2:	189b      	adds	r3, r3, r2
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	001a      	movs	r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2201      	movs	r2, #1
 8007304:	4013      	ands	r3, r2
 8007306:	d002      	beq.n	800730e <get_fat+0xf2>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	091b      	lsrs	r3, r3, #4
 800730c:	e002      	b.n	8007314 <get_fat+0xf8>
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	051b      	lsls	r3, r3, #20
 8007312:	0d1b      	lsrs	r3, r3, #20
 8007314:	617b      	str	r3, [r7, #20]
			break;
 8007316:	e057      	b.n	80073c8 <get_fat+0x1ac>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	899b      	ldrh	r3, [r3, #12]
 8007320:	085b      	lsrs	r3, r3, #1
 8007322:	b29b      	uxth	r3, r3
 8007324:	0019      	movs	r1, r3
 8007326:	6838      	ldr	r0, [r7, #0]
 8007328:	f7f8 ff0a 	bl	8000140 <__udivsi3>
 800732c:	0003      	movs	r3, r0
 800732e:	18e2      	adds	r2, r4, r3
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	0011      	movs	r1, r2
 8007334:	0018      	movs	r0, r3
 8007336:	f7ff fea3 	bl	8007080 <move_window>
 800733a:	1e03      	subs	r3, r0, #0
 800733c:	d141      	bne.n	80073c2 <get_fat+0x1a6>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	3338      	adds	r3, #56	; 0x38
 8007342:	001c      	movs	r4, r3
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	005a      	lsls	r2, r3, #1
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	899b      	ldrh	r3, [r3, #12]
 800734c:	0019      	movs	r1, r3
 800734e:	0010      	movs	r0, r2
 8007350:	f7f8 ff7c 	bl	800024c <__aeabi_uidivmod>
 8007354:	000b      	movs	r3, r1
 8007356:	18e3      	adds	r3, r4, r3
 8007358:	0018      	movs	r0, r3
 800735a:	f7ff fbe5 	bl	8006b28 <ld_word>
 800735e:	0003      	movs	r3, r0
 8007360:	617b      	str	r3, [r7, #20]
			break;
 8007362:	e031      	b.n	80073c8 <get_fat+0x1ac>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	899b      	ldrh	r3, [r3, #12]
 800736c:	089b      	lsrs	r3, r3, #2
 800736e:	b29b      	uxth	r3, r3
 8007370:	0019      	movs	r1, r3
 8007372:	6838      	ldr	r0, [r7, #0]
 8007374:	f7f8 fee4 	bl	8000140 <__udivsi3>
 8007378:	0003      	movs	r3, r0
 800737a:	18e2      	adds	r2, r4, r3
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	0011      	movs	r1, r2
 8007380:	0018      	movs	r0, r3
 8007382:	f7ff fe7d 	bl	8007080 <move_window>
 8007386:	1e03      	subs	r3, r0, #0
 8007388:	d11d      	bne.n	80073c6 <get_fat+0x1aa>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	3338      	adds	r3, #56	; 0x38
 800738e:	001c      	movs	r4, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	009a      	lsls	r2, r3, #2
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	899b      	ldrh	r3, [r3, #12]
 8007398:	0019      	movs	r1, r3
 800739a:	0010      	movs	r0, r2
 800739c:	f7f8 ff56 	bl	800024c <__aeabi_uidivmod>
 80073a0:	000b      	movs	r3, r1
 80073a2:	18e3      	adds	r3, r4, r3
 80073a4:	0018      	movs	r0, r3
 80073a6:	f7ff fbda 	bl	8006b5e <ld_dword>
 80073aa:	0003      	movs	r3, r0
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	617b      	str	r3, [r7, #20]
			break;
 80073b2:	e009      	b.n	80073c8 <get_fat+0x1ac>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80073b4:	2301      	movs	r3, #1
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	e006      	b.n	80073c8 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	e004      	b.n	80073c8 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	e002      	b.n	80073c8 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	e000      	b.n	80073c8 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80073c6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 80073c8:	697b      	ldr	r3, [r7, #20]
}
 80073ca:	0018      	movs	r0, r3
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b007      	add	sp, #28
 80073d0:	bd90      	pop	{r4, r7, pc}

080073d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80073d2:	b5b0      	push	{r4, r5, r7, lr}
 80073d4:	b088      	sub	sp, #32
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80073de:	231f      	movs	r3, #31
 80073e0:	18fb      	adds	r3, r7, r3
 80073e2:	2202      	movs	r2, #2
 80073e4:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d800      	bhi.n	80073ee <put_fat+0x1c>
 80073ec:	e11a      	b.n	8007624 <put_fat+0x252>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d300      	bcc.n	80073fa <put_fat+0x28>
 80073f8:	e114      	b.n	8007624 <put_fat+0x252>
		switch (fs->fs_type) {
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d100      	bne.n	8007404 <put_fat+0x32>
 8007402:	e0c1      	b.n	8007588 <put_fat+0x1b6>
 8007404:	dd00      	ble.n	8007408 <put_fat+0x36>
 8007406:	e10d      	b.n	8007624 <put_fat+0x252>
 8007408:	2b01      	cmp	r3, #1
 800740a:	d003      	beq.n	8007414 <put_fat+0x42>
 800740c:	2b02      	cmp	r3, #2
 800740e:	d100      	bne.n	8007412 <put_fat+0x40>
 8007410:	e08a      	b.n	8007528 <put_fat+0x156>
 8007412:	e107      	b.n	8007624 <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	61bb      	str	r3, [r7, #24]
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	18d3      	adds	r3, r2, r3
 8007420:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	899b      	ldrh	r3, [r3, #12]
 800742a:	0019      	movs	r1, r3
 800742c:	69b8      	ldr	r0, [r7, #24]
 800742e:	f7f8 fe87 	bl	8000140 <__udivsi3>
 8007432:	0003      	movs	r3, r0
 8007434:	18e2      	adds	r2, r4, r3
 8007436:	251f      	movs	r5, #31
 8007438:	197c      	adds	r4, r7, r5
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	0011      	movs	r1, r2
 800743e:	0018      	movs	r0, r3
 8007440:	f7ff fe1e 	bl	8007080 <move_window>
 8007444:	0003      	movs	r3, r0
 8007446:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007448:	197b      	adds	r3, r7, r5
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d000      	beq.n	8007452 <put_fat+0x80>
 8007450:	e0e1      	b.n	8007616 <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	3338      	adds	r3, #56	; 0x38
 8007456:	001c      	movs	r4, r3
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	61ba      	str	r2, [r7, #24]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	8992      	ldrh	r2, [r2, #12]
 8007462:	0011      	movs	r1, r2
 8007464:	0018      	movs	r0, r3
 8007466:	f7f8 fef1 	bl	800024c <__aeabi_uidivmod>
 800746a:	000b      	movs	r3, r1
 800746c:	18e3      	adds	r3, r4, r3
 800746e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2201      	movs	r2, #1
 8007474:	4013      	ands	r3, r2
 8007476:	d00d      	beq.n	8007494 <put_fat+0xc2>
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	b25b      	sxtb	r3, r3
 800747e:	220f      	movs	r2, #15
 8007480:	4013      	ands	r3, r2
 8007482:	b25a      	sxtb	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	b25b      	sxtb	r3, r3
 800748c:	4313      	orrs	r3, r2
 800748e:	b25b      	sxtb	r3, r3
 8007490:	b2db      	uxtb	r3, r3
 8007492:	e001      	b.n	8007498 <put_fat+0xc6>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2201      	movs	r2, #1
 80074a0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	899b      	ldrh	r3, [r3, #12]
 80074aa:	0019      	movs	r1, r3
 80074ac:	69b8      	ldr	r0, [r7, #24]
 80074ae:	f7f8 fe47 	bl	8000140 <__udivsi3>
 80074b2:	0003      	movs	r3, r0
 80074b4:	18e2      	adds	r2, r4, r3
 80074b6:	251f      	movs	r5, #31
 80074b8:	197c      	adds	r4, r7, r5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	0011      	movs	r1, r2
 80074be:	0018      	movs	r0, r3
 80074c0:	f7ff fdde 	bl	8007080 <move_window>
 80074c4:	0003      	movs	r3, r0
 80074c6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80074c8:	197b      	adds	r3, r7, r5
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d000      	beq.n	80074d2 <put_fat+0x100>
 80074d0:	e0a3      	b.n	800761a <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3338      	adds	r3, #56	; 0x38
 80074d6:	001c      	movs	r4, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	899b      	ldrh	r3, [r3, #12]
 80074dc:	001a      	movs	r2, r3
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	0011      	movs	r1, r2
 80074e2:	0018      	movs	r0, r3
 80074e4:	f7f8 feb2 	bl	800024c <__aeabi_uidivmod>
 80074e8:	000b      	movs	r3, r1
 80074ea:	18e3      	adds	r3, r4, r3
 80074ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2201      	movs	r2, #1
 80074f2:	4013      	ands	r3, r2
 80074f4:	d003      	beq.n	80074fe <put_fat+0x12c>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	091b      	lsrs	r3, r3, #4
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	e00e      	b.n	800751c <put_fat+0x14a>
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	b25b      	sxtb	r3, r3
 8007504:	220f      	movs	r2, #15
 8007506:	4393      	bics	r3, r2
 8007508:	b25a      	sxtb	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	0a1b      	lsrs	r3, r3, #8
 800750e:	b25b      	sxtb	r3, r3
 8007510:	210f      	movs	r1, #15
 8007512:	400b      	ands	r3, r1
 8007514:	b25b      	sxtb	r3, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	b25b      	sxtb	r3, r3
 800751a:	b2db      	uxtb	r3, r3
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	70da      	strb	r2, [r3, #3]
			break;
 8007526:	e07d      	b.n	8007624 <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	899b      	ldrh	r3, [r3, #12]
 8007530:	085b      	lsrs	r3, r3, #1
 8007532:	b29b      	uxth	r3, r3
 8007534:	0019      	movs	r1, r3
 8007536:	68b8      	ldr	r0, [r7, #8]
 8007538:	f7f8 fe02 	bl	8000140 <__udivsi3>
 800753c:	0003      	movs	r3, r0
 800753e:	18e2      	adds	r2, r4, r3
 8007540:	251f      	movs	r5, #31
 8007542:	197c      	adds	r4, r7, r5
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	0011      	movs	r1, r2
 8007548:	0018      	movs	r0, r3
 800754a:	f7ff fd99 	bl	8007080 <move_window>
 800754e:	0003      	movs	r3, r0
 8007550:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007552:	197b      	adds	r3, r7, r5
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d161      	bne.n	800761e <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3338      	adds	r3, #56	; 0x38
 800755e:	001c      	movs	r4, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	005a      	lsls	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	899b      	ldrh	r3, [r3, #12]
 8007568:	0019      	movs	r1, r3
 800756a:	0010      	movs	r0, r2
 800756c:	f7f8 fe6e 	bl	800024c <__aeabi_uidivmod>
 8007570:	000b      	movs	r3, r1
 8007572:	18e3      	adds	r3, r4, r3
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	b292      	uxth	r2, r2
 8007578:	0011      	movs	r1, r2
 800757a:	0018      	movs	r0, r3
 800757c:	f7ff fb10 	bl	8006ba0 <st_word>
			fs->wflag = 1;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2201      	movs	r2, #1
 8007584:	70da      	strb	r2, [r3, #3]
			break;
 8007586:	e04d      	b.n	8007624 <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	899b      	ldrh	r3, [r3, #12]
 8007590:	089b      	lsrs	r3, r3, #2
 8007592:	b29b      	uxth	r3, r3
 8007594:	0019      	movs	r1, r3
 8007596:	68b8      	ldr	r0, [r7, #8]
 8007598:	f7f8 fdd2 	bl	8000140 <__udivsi3>
 800759c:	0003      	movs	r3, r0
 800759e:	18e2      	adds	r2, r4, r3
 80075a0:	251f      	movs	r5, #31
 80075a2:	197c      	adds	r4, r7, r5
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	0011      	movs	r1, r2
 80075a8:	0018      	movs	r0, r3
 80075aa:	f7ff fd69 	bl	8007080 <move_window>
 80075ae:	0003      	movs	r3, r0
 80075b0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80075b2:	197b      	adds	r3, r7, r5
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d133      	bne.n	8007622 <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	091c      	lsrs	r4, r3, #4
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3338      	adds	r3, #56	; 0x38
 80075c4:	001d      	movs	r5, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	009a      	lsls	r2, r3, #2
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	899b      	ldrh	r3, [r3, #12]
 80075ce:	0019      	movs	r1, r3
 80075d0:	0010      	movs	r0, r2
 80075d2:	f7f8 fe3b 	bl	800024c <__aeabi_uidivmod>
 80075d6:	000b      	movs	r3, r1
 80075d8:	18eb      	adds	r3, r5, r3
 80075da:	0018      	movs	r0, r3
 80075dc:	f7ff fabf 	bl	8006b5e <ld_dword>
 80075e0:	0003      	movs	r3, r0
 80075e2:	0f1b      	lsrs	r3, r3, #28
 80075e4:	071b      	lsls	r3, r3, #28
 80075e6:	4323      	orrs	r3, r4
 80075e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3338      	adds	r3, #56	; 0x38
 80075ee:	001c      	movs	r4, r3
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	009a      	lsls	r2, r3, #2
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	899b      	ldrh	r3, [r3, #12]
 80075f8:	0019      	movs	r1, r3
 80075fa:	0010      	movs	r0, r2
 80075fc:	f7f8 fe26 	bl	800024c <__aeabi_uidivmod>
 8007600:	000b      	movs	r3, r1
 8007602:	18e3      	adds	r3, r4, r3
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	0011      	movs	r1, r2
 8007608:	0018      	movs	r0, r3
 800760a:	f7ff fae7 	bl	8006bdc <st_dword>
			fs->wflag = 1;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2201      	movs	r2, #1
 8007612:	70da      	strb	r2, [r3, #3]
			break;
 8007614:	e006      	b.n	8007624 <put_fat+0x252>
			if (res != FR_OK) break;
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	e004      	b.n	8007624 <put_fat+0x252>
			if (res != FR_OK) break;
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	e002      	b.n	8007624 <put_fat+0x252>
			if (res != FR_OK) break;
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	e000      	b.n	8007624 <put_fat+0x252>
			if (res != FR_OK) break;
 8007622:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 8007624:	231f      	movs	r3, #31
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	781b      	ldrb	r3, [r3, #0]
}
 800762a:	0018      	movs	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	b008      	add	sp, #32
 8007630:	bdb0      	pop	{r4, r5, r7, pc}

08007632 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007632:	b5b0      	push	{r4, r5, r7, lr}
 8007634:	b088      	sub	sp, #32
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800763e:	231f      	movs	r3, #31
 8007640:	18fb      	adds	r3, r7, r3
 8007642:	2200      	movs	r2, #0
 8007644:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d904      	bls.n	800765c <remove_chain+0x2a>
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	429a      	cmp	r2, r3
 800765a:	d301      	bcc.n	8007660 <remove_chain+0x2e>
 800765c:	2302      	movs	r3, #2
 800765e:	e057      	b.n	8007710 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d011      	beq.n	800768a <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007666:	251f      	movs	r5, #31
 8007668:	197c      	adds	r4, r7, r5
 800766a:	2301      	movs	r3, #1
 800766c:	425a      	negs	r2, r3
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	0018      	movs	r0, r3
 8007674:	f7ff fead 	bl	80073d2 <put_fat>
 8007678:	0003      	movs	r3, r0
 800767a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 800767c:	197b      	adds	r3, r7, r5
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <remove_chain+0x58>
 8007684:	197b      	adds	r3, r7, r5
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	e042      	b.n	8007710 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	0011      	movs	r1, r2
 8007690:	0018      	movs	r0, r3
 8007692:	f7ff fdc3 	bl	800721c <get_fat>
 8007696:	0003      	movs	r3, r0
 8007698:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d035      	beq.n	800770c <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <remove_chain+0x78>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e032      	b.n	8007710 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	3301      	adds	r3, #1
 80076ae:	d101      	bne.n	80076b4 <remove_chain+0x82>
 80076b0:	2301      	movs	r3, #1
 80076b2:	e02d      	b.n	8007710 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80076b4:	251f      	movs	r5, #31
 80076b6:	197c      	adds	r4, r7, r5
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2200      	movs	r2, #0
 80076be:	0018      	movs	r0, r3
 80076c0:	f7ff fe87 	bl	80073d2 <put_fat>
 80076c4:	0003      	movs	r3, r0
 80076c6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 80076c8:	197b      	adds	r3, r7, r5
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <remove_chain+0xa4>
 80076d0:	197b      	adds	r3, r7, r5
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	e01c      	b.n	8007710 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	3b02      	subs	r3, #2
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d20b      	bcs.n	80076fc <remove_chain+0xca>
			fs->free_clst++;
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	791b      	ldrb	r3, [r3, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	4313      	orrs	r3, r2
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	429a      	cmp	r2, r3
 8007708:	d3bf      	bcc.n	800768a <remove_chain+0x58>
 800770a:	e000      	b.n	800770e <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 800770c:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	0018      	movs	r0, r3
 8007712:	46bd      	mov	sp, r7
 8007714:	b008      	add	sp, #32
 8007716:	bdb0      	pop	{r4, r5, r7, pc}

08007718 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007718:	b5b0      	push	{r4, r5, r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10d      	bne.n	800774a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d004      	beq.n	8007744 <create_chain+0x2c>
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	429a      	cmp	r2, r3
 8007742:	d31d      	bcc.n	8007780 <create_chain+0x68>
 8007744:	2301      	movs	r3, #1
 8007746:	61bb      	str	r3, [r7, #24]
 8007748:	e01a      	b.n	8007780 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	0011      	movs	r1, r2
 8007750:	0018      	movs	r0, r3
 8007752:	f7ff fd63 	bl	800721c <get_fat>
 8007756:	0003      	movs	r3, r0
 8007758:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d801      	bhi.n	8007764 <create_chain+0x4c>
 8007760:	2301      	movs	r3, #1
 8007762:	e07b      	b.n	800785c <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	d101      	bne.n	800776e <create_chain+0x56>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	e076      	b.n	800785c <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	429a      	cmp	r2, r3
 8007776:	d201      	bcs.n	800777c <create_chain+0x64>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	e06f      	b.n	800785c <create_chain+0x144>
		scl = clst;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	3301      	adds	r3, #1
 8007788:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	429a      	cmp	r2, r3
 8007792:	d307      	bcc.n	80077a4 <create_chain+0x8c>
				ncl = 2;
 8007794:	2302      	movs	r3, #2
 8007796:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	429a      	cmp	r2, r3
 800779e:	d901      	bls.n	80077a4 <create_chain+0x8c>
 80077a0:	2300      	movs	r3, #0
 80077a2:	e05b      	b.n	800785c <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80077a4:	69fa      	ldr	r2, [r7, #28]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	0011      	movs	r1, r2
 80077aa:	0018      	movs	r0, r3
 80077ac:	f7ff fd36 	bl	800721c <get_fat>
 80077b0:	0003      	movs	r3, r0
 80077b2:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00d      	beq.n	80077d6 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d002      	beq.n	80077c6 <create_chain+0xae>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3301      	adds	r3, #1
 80077c4:	d101      	bne.n	80077ca <create_chain+0xb2>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	e048      	b.n	800785c <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d1d8      	bne.n	8007784 <create_chain+0x6c>
 80077d2:	2300      	movs	r3, #0
 80077d4:	e042      	b.n	800785c <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 80077d6:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80077d8:	2517      	movs	r5, #23
 80077da:	197c      	adds	r4, r7, r5
 80077dc:	2301      	movs	r3, #1
 80077de:	425a      	negs	r2, r3
 80077e0:	69f9      	ldr	r1, [r7, #28]
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	0018      	movs	r0, r3
 80077e6:	f7ff fdf4 	bl	80073d2 <put_fat>
 80077ea:	0003      	movs	r3, r0
 80077ec:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 80077ee:	197b      	adds	r3, r7, r5
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10b      	bne.n	800780e <create_chain+0xf6>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d008      	beq.n	800780e <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80077fc:	197c      	adds	r4, r7, r5
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	0018      	movs	r0, r3
 8007806:	f7ff fde4 	bl	80073d2 <put_fat>
 800780a:	0003      	movs	r3, r0
 800780c:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800780e:	2317      	movs	r3, #23
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d116      	bne.n	8007846 <create_chain+0x12e>
		fs->last_clst = ncl;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	699a      	ldr	r2, [r3, #24]
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	3b02      	subs	r3, #2
 8007828:	429a      	cmp	r2, r3
 800782a:	d804      	bhi.n	8007836 <create_chain+0x11e>
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	1e5a      	subs	r2, r3, #1
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	791b      	ldrb	r3, [r3, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	4313      	orrs	r3, r2
 800783e:	b2da      	uxtb	r2, r3
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	711a      	strb	r2, [r3, #4]
 8007844:	e009      	b.n	800785a <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007846:	2317      	movs	r3, #23
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d102      	bne.n	8007856 <create_chain+0x13e>
 8007850:	2301      	movs	r3, #1
 8007852:	425b      	negs	r3, r3
 8007854:	e000      	b.n	8007858 <create_chain+0x140>
 8007856:	2301      	movs	r3, #1
 8007858:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800785a:	69fb      	ldr	r3, [r7, #28]
}
 800785c:	0018      	movs	r0, r3
 800785e:	46bd      	mov	sp, r7
 8007860:	b008      	add	sp, #32
 8007862:	bdb0      	pop	{r4, r5, r7, pc}

08007864 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	3304      	adds	r3, #4
 800787a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	899b      	ldrh	r3, [r3, #12]
 8007880:	0019      	movs	r1, r3
 8007882:	6838      	ldr	r0, [r7, #0]
 8007884:	f7f8 fc5c 	bl	8000140 <__udivsi3>
 8007888:	0003      	movs	r3, r0
 800788a:	001a      	movs	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	895b      	ldrh	r3, [r3, #10]
 8007890:	0019      	movs	r1, r3
 8007892:	0010      	movs	r0, r2
 8007894:	f7f8 fc54 	bl	8000140 <__udivsi3>
 8007898:	0003      	movs	r3, r0
 800789a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	1d1a      	adds	r2, r3, #4
 80078a0:	613a      	str	r2, [r7, #16]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <clmt_clust+0x4c>
 80078ac:	2300      	movs	r3, #0
 80078ae:	e010      	b.n	80078d2 <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d307      	bcc.n	80078c8 <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	617b      	str	r3, [r7, #20]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	3304      	adds	r3, #4
 80078c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078c6:	e7e9      	b.n	800789c <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 80078c8:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	18d3      	adds	r3, r2, r3
}
 80078d2:	0018      	movs	r0, r3
 80078d4:	46bd      	mov	sp, r7
 80078d6:	b006      	add	sp, #24
 80078d8:	bd80      	pop	{r7, pc}

080078da <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80078da:	b590      	push	{r4, r7, lr}
 80078dc:	b087      	sub	sp, #28
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	2380      	movs	r3, #128	; 0x80
 80078ee:	039b      	lsls	r3, r3, #14
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d203      	bcs.n	80078fc <dir_sdi+0x22>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	221f      	movs	r2, #31
 80078f8:	4013      	ands	r3, r2
 80078fa:	d001      	beq.n	8007900 <dir_sdi+0x26>
		return FR_INT_ERR;
 80078fc:	2302      	movs	r3, #2
 80078fe:	e074      	b.n	80079ea <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <dir_sdi+0x46>
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b02      	cmp	r3, #2
 8007918:	d902      	bls.n	8007920 <dir_sdi+0x46>
		clst = fs->dirbase;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10c      	bne.n	8007940 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	095b      	lsrs	r3, r3, #5
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	8912      	ldrh	r2, [r2, #8]
 800792e:	4293      	cmp	r3, r2
 8007930:	d301      	bcc.n	8007936 <dir_sdi+0x5c>
 8007932:	2302      	movs	r3, #2
 8007934:	e059      	b.n	80079ea <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	61da      	str	r2, [r3, #28]
 800793e:	e02f      	b.n	80079a0 <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	895b      	ldrh	r3, [r3, #10]
 8007944:	001a      	movs	r2, r3
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	899b      	ldrh	r3, [r3, #12]
 800794a:	4353      	muls	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800794e:	e01a      	b.n	8007986 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	0011      	movs	r1, r2
 8007956:	0018      	movs	r0, r3
 8007958:	f7ff fc60 	bl	800721c <get_fat>
 800795c:	0003      	movs	r3, r0
 800795e:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	3301      	adds	r3, #1
 8007964:	d101      	bne.n	800796a <dir_sdi+0x90>
 8007966:	2301      	movs	r3, #1
 8007968:	e03f      	b.n	80079ea <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d904      	bls.n	800797a <dir_sdi+0xa0>
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	429a      	cmp	r2, r3
 8007978:	d301      	bcc.n	800797e <dir_sdi+0xa4>
 800797a:	2302      	movs	r3, #2
 800797c:	e035      	b.n	80079ea <dir_sdi+0x110>
			ofs -= csz;
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	429a      	cmp	r2, r3
 800798c:	d2e0      	bcs.n	8007950 <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	0011      	movs	r1, r2
 8007994:	0018      	movs	r0, r3
 8007996:	f7ff fc25 	bl	80071e4 <clust2sect>
 800799a:	0002      	movs	r2, r0
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <dir_sdi+0xd8>
 80079ae:	2302      	movs	r3, #2
 80079b0:	e01b      	b.n	80079ea <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69dc      	ldr	r4, [r3, #28]
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	899b      	ldrh	r3, [r3, #12]
 80079ba:	0019      	movs	r1, r3
 80079bc:	6838      	ldr	r0, [r7, #0]
 80079be:	f7f8 fbbf 	bl	8000140 <__udivsi3>
 80079c2:	0003      	movs	r3, r0
 80079c4:	18e2      	adds	r2, r4, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	3338      	adds	r3, #56	; 0x38
 80079ce:	001c      	movs	r4, r3
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	899b      	ldrh	r3, [r3, #12]
 80079d4:	001a      	movs	r2, r3
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	0011      	movs	r1, r2
 80079da:	0018      	movs	r0, r3
 80079dc:	f7f8 fc36 	bl	800024c <__aeabi_uidivmod>
 80079e0:	000b      	movs	r3, r1
 80079e2:	18e2      	adds	r2, r4, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	0018      	movs	r0, r3
 80079ec:	46bd      	mov	sp, r7
 80079ee:	b007      	add	sp, #28
 80079f0:	bd90      	pop	{r4, r7, pc}

080079f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80079f2:	b590      	push	{r4, r7, lr}
 80079f4:	b087      	sub	sp, #28
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	3320      	adds	r3, #32
 8007a08:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <dir_next+0x2a>
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	2380      	movs	r3, #128	; 0x80
 8007a16:	039b      	lsls	r3, r3, #14
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d301      	bcc.n	8007a20 <dir_next+0x2e>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	e0c0      	b.n	8007ba2 <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	899b      	ldrh	r3, [r3, #12]
 8007a24:	001a      	movs	r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	0011      	movs	r1, r2
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f7f8 fc0e 	bl	800024c <__aeabi_uidivmod>
 8007a30:	1e0b      	subs	r3, r1, #0
 8007a32:	d000      	beq.n	8007a36 <dir_next+0x44>
 8007a34:	e0a2      	b.n	8007b7c <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10b      	bne.n	8007a60 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	8912      	ldrh	r2, [r2, #8]
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d200      	bcs.n	8007a56 <dir_next+0x64>
 8007a54:	e092      	b.n	8007b7c <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	61da      	str	r2, [r3, #28]
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	e0a0      	b.n	8007ba2 <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	899b      	ldrh	r3, [r3, #12]
 8007a64:	0019      	movs	r1, r3
 8007a66:	68b8      	ldr	r0, [r7, #8]
 8007a68:	f7f8 fb6a 	bl	8000140 <__udivsi3>
 8007a6c:	0003      	movs	r3, r0
 8007a6e:	001a      	movs	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	895b      	ldrh	r3, [r3, #10]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	4013      	ands	r3, r2
 8007a78:	d000      	beq.n	8007a7c <dir_next+0x8a>
 8007a7a:	e07f      	b.n	8007b7c <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	0019      	movs	r1, r3
 8007a84:	0010      	movs	r0, r2
 8007a86:	f7ff fbc9 	bl	800721c <get_fat>
 8007a8a:	0003      	movs	r3, r0
 8007a8c:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d801      	bhi.n	8007a98 <dir_next+0xa6>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e084      	b.n	8007ba2 <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	d101      	bne.n	8007aa2 <dir_next+0xb0>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e07f      	b.n	8007ba2 <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d35b      	bcc.n	8007b64 <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d104      	bne.n	8007abc <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	61da      	str	r2, [r3, #28]
 8007ab8:	2304      	movs	r3, #4
 8007aba:	e072      	b.n	8007ba2 <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	0019      	movs	r1, r3
 8007ac4:	0010      	movs	r0, r2
 8007ac6:	f7ff fe27 	bl	8007718 <create_chain>
 8007aca:	0003      	movs	r3, r0
 8007acc:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <dir_next+0xe6>
 8007ad4:	2307      	movs	r3, #7
 8007ad6:	e064      	b.n	8007ba2 <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d101      	bne.n	8007ae2 <dir_next+0xf0>
 8007ade:	2302      	movs	r3, #2
 8007ae0:	e05f      	b.n	8007ba2 <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	d101      	bne.n	8007aec <dir_next+0xfa>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e05a      	b.n	8007ba2 <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	0018      	movs	r0, r3
 8007af0:	f7ff fa7e 	bl	8006ff0 <sync_window>
 8007af4:	1e03      	subs	r3, r0, #0
 8007af6:	d001      	beq.n	8007afc <dir_next+0x10a>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e052      	b.n	8007ba2 <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3338      	adds	r3, #56	; 0x38
 8007b00:	0018      	movs	r0, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	899b      	ldrh	r3, [r3, #12]
 8007b06:	001a      	movs	r2, r3
 8007b08:	2100      	movs	r1, #0
 8007b0a:	f7ff f8b0 	bl	8006c6e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b0e:	2300      	movs	r3, #0
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	0011      	movs	r1, r2
 8007b18:	0018      	movs	r0, r3
 8007b1a:	f7ff fb63 	bl	80071e4 <clust2sect>
 8007b1e:	0002      	movs	r2, r0
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	635a      	str	r2, [r3, #52]	; 0x34
 8007b24:	e012      	b.n	8007b4c <dir_next+0x15a>
						fs->wflag = 1;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f7ff fa5e 	bl	8006ff0 <sync_window>
 8007b34:	1e03      	subs	r3, r0, #0
 8007b36:	d001      	beq.n	8007b3c <dir_next+0x14a>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e032      	b.n	8007ba2 <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	635a      	str	r2, [r3, #52]	; 0x34
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	895b      	ldrh	r3, [r3, #10]
 8007b50:	001a      	movs	r2, r3
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d3e6      	bcc.n	8007b26 <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	0011      	movs	r1, r2
 8007b70:	0018      	movs	r0, r3
 8007b72:	f7ff fb37 	bl	80071e4 <clust2sect>
 8007b76:	0002      	movs	r2, r0
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3338      	adds	r3, #56	; 0x38
 8007b86:	001c      	movs	r4, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	899b      	ldrh	r3, [r3, #12]
 8007b8c:	001a      	movs	r2, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	0011      	movs	r1, r2
 8007b92:	0018      	movs	r0, r3
 8007b94:	f7f8 fb5a 	bl	800024c <__aeabi_uidivmod>
 8007b98:	000b      	movs	r3, r1
 8007b9a:	18e2      	adds	r2, r4, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	b007      	add	sp, #28
 8007ba8:	bd90      	pop	{r4, r7, pc}

08007baa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007baa:	b5b0      	push	{r4, r5, r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007bba:	2517      	movs	r5, #23
 8007bbc:	197c      	adds	r4, r7, r5
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f7ff fe89 	bl	80078da <dir_sdi>
 8007bc8:	0003      	movs	r3, r0
 8007bca:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007bcc:	197b      	adds	r3, r7, r5
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d133      	bne.n	8007c3c <dir_alloc+0x92>
		n = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	69da      	ldr	r2, [r3, #28]
 8007bdc:	2517      	movs	r5, #23
 8007bde:	197c      	adds	r4, r7, r5
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	0011      	movs	r1, r2
 8007be4:	0018      	movs	r0, r3
 8007be6:	f7ff fa4b 	bl	8007080 <move_window>
 8007bea:	0003      	movs	r3, r0
 8007bec:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007bee:	197b      	adds	r3, r7, r5
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d121      	bne.n	8007c3a <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	2be5      	cmp	r3, #229	; 0xe5
 8007bfe:	d004      	beq.n	8007c0a <dir_alloc+0x60>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d107      	bne.n	8007c1a <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d102      	bne.n	8007c1e <dir_alloc+0x74>
 8007c18:	e010      	b.n	8007c3c <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007c1e:	2517      	movs	r5, #23
 8007c20:	197c      	adds	r4, r7, r5
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2101      	movs	r1, #1
 8007c26:	0018      	movs	r0, r3
 8007c28:	f7ff fee3 	bl	80079f2 <dir_next>
 8007c2c:	0003      	movs	r3, r0
 8007c2e:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c30:	197b      	adds	r3, r7, r5
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0cf      	beq.n	8007bd8 <dir_alloc+0x2e>
 8007c38:	e000      	b.n	8007c3c <dir_alloc+0x92>
			if (res != FR_OK) break;
 8007c3a:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c3c:	2217      	movs	r2, #23
 8007c3e:	18bb      	adds	r3, r7, r2
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d102      	bne.n	8007c4c <dir_alloc+0xa2>
 8007c46:	18bb      	adds	r3, r7, r2
 8007c48:	2207      	movs	r2, #7
 8007c4a:	701a      	strb	r2, [r3, #0]
	return res;
 8007c4c:	2317      	movs	r3, #23
 8007c4e:	18fb      	adds	r3, r7, r3
 8007c50:	781b      	ldrb	r3, [r3, #0]
}
 8007c52:	0018      	movs	r0, r3
 8007c54:	46bd      	mov	sp, r7
 8007c56:	b006      	add	sp, #24
 8007c58:	bdb0      	pop	{r4, r5, r7, pc}

08007c5a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	331a      	adds	r3, #26
 8007c68:	0018      	movs	r0, r3
 8007c6a:	f7fe ff5d 	bl	8006b28 <ld_word>
 8007c6e:	0003      	movs	r3, r0
 8007c70:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d109      	bne.n	8007c8e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	3314      	adds	r3, #20
 8007c7e:	0018      	movs	r0, r3
 8007c80:	f7fe ff52 	bl	8006b28 <ld_word>
 8007c84:	0003      	movs	r3, r0
 8007c86:	041b      	lsls	r3, r3, #16
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
}
 8007c90:	0018      	movs	r0, r3
 8007c92:	46bd      	mov	sp, r7
 8007c94:	b004      	add	sp, #16
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	331a      	adds	r3, #26
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	b292      	uxth	r2, r2
 8007cac:	0011      	movs	r1, r2
 8007cae:	0018      	movs	r0, r3
 8007cb0:	f7fe ff76 	bl	8006ba0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d109      	bne.n	8007cd0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	3314      	adds	r3, #20
 8007cc0:	001a      	movs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	0c1b      	lsrs	r3, r3, #16
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	0019      	movs	r1, r3
 8007cca:	0010      	movs	r0, r2
 8007ccc:	f7fe ff68 	bl	8006ba0 <st_word>
	}
}
 8007cd0:	46c0      	nop			; (mov r8, r8)
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b004      	add	sp, #16
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007cd8:	b5b0      	push	{r4, r5, r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	331a      	adds	r3, #26
 8007ce6:	0018      	movs	r0, r3
 8007ce8:	f7fe ff1e 	bl	8006b28 <ld_word>
 8007cec:	1e03      	subs	r3, r0, #0
 8007cee:	d001      	beq.n	8007cf4 <cmp_lfn+0x1c>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	e068      	b.n	8007dc6 <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	001a      	movs	r2, r3
 8007cfa:	233f      	movs	r3, #63	; 0x3f
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	1e5a      	subs	r2, r3, #1
 8007d00:	0013      	movs	r3, r2
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	189b      	adds	r3, r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	189b      	adds	r3, r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007d0c:	230e      	movs	r3, #14
 8007d0e:	18fb      	adds	r3, r7, r3
 8007d10:	2201      	movs	r2, #1
 8007d12:	801a      	strh	r2, [r3, #0]
 8007d14:	2300      	movs	r3, #0
 8007d16:	613b      	str	r3, [r7, #16]
 8007d18:	e03d      	b.n	8007d96 <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007d1a:	4a2d      	ldr	r2, [pc, #180]	; (8007dd0 <cmp_lfn+0xf8>)
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	18d3      	adds	r3, r2, r3
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	001a      	movs	r2, r3
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	189b      	adds	r3, r3, r2
 8007d28:	250c      	movs	r5, #12
 8007d2a:	197c      	adds	r4, r7, r5
 8007d2c:	0018      	movs	r0, r3
 8007d2e:	f7fe fefb 	bl	8006b28 <ld_word>
 8007d32:	0003      	movs	r3, r0
 8007d34:	8023      	strh	r3, [r4, #0]
		if (wc) {
 8007d36:	230e      	movs	r3, #14
 8007d38:	18fb      	adds	r3, r7, r3
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01f      	beq.n	8007d80 <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2bfe      	cmp	r3, #254	; 0xfe
 8007d44:	d813      	bhi.n	8007d6e <cmp_lfn+0x96>
 8007d46:	197b      	adds	r3, r7, r5
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	f001 ff8c 	bl	8009c68 <ff_wtoupper>
 8007d50:	0003      	movs	r3, r0
 8007d52:	001c      	movs	r4, r3
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	617a      	str	r2, [r7, #20]
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	18d3      	adds	r3, r2, r3
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	0018      	movs	r0, r3
 8007d64:	f001 ff80 	bl	8009c68 <ff_wtoupper>
 8007d68:	0003      	movs	r3, r0
 8007d6a:	429c      	cmp	r4, r3
 8007d6c:	d001      	beq.n	8007d72 <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e029      	b.n	8007dc6 <cmp_lfn+0xee>
			}
			wc = uc;
 8007d72:	230e      	movs	r3, #14
 8007d74:	18fb      	adds	r3, r7, r3
 8007d76:	220c      	movs	r2, #12
 8007d78:	18ba      	adds	r2, r7, r2
 8007d7a:	8812      	ldrh	r2, [r2, #0]
 8007d7c:	801a      	strh	r2, [r3, #0]
 8007d7e:	e007      	b.n	8007d90 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007d80:	230c      	movs	r3, #12
 8007d82:	18fb      	adds	r3, r7, r3
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	4a13      	ldr	r2, [pc, #76]	; (8007dd4 <cmp_lfn+0xfc>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d001      	beq.n	8007d90 <cmp_lfn+0xb8>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e01a      	b.n	8007dc6 <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	3301      	adds	r3, #1
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	2b0c      	cmp	r3, #12
 8007d9a:	d9be      	bls.n	8007d1a <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	001a      	movs	r2, r3
 8007da2:	2340      	movs	r3, #64	; 0x40
 8007da4:	4013      	ands	r3, r2
 8007da6:	d00d      	beq.n	8007dc4 <cmp_lfn+0xec>
 8007da8:	230e      	movs	r3, #14
 8007daa:	18fb      	adds	r3, r7, r3
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d008      	beq.n	8007dc4 <cmp_lfn+0xec>
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	18d3      	adds	r3, r2, r3
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <cmp_lfn+0xec>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	e000      	b.n	8007dc6 <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 8007dc4:	2301      	movs	r3, #1
}
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	b006      	add	sp, #24
 8007dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	0800e984 	.word	0x0800e984
 8007dd4:	0000ffff 	.word	0x0000ffff

08007dd8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007dd8:	b590      	push	{r4, r7, lr}
 8007dda:	b089      	sub	sp, #36	; 0x24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	0019      	movs	r1, r3
 8007de4:	1dfb      	adds	r3, r7, #7
 8007de6:	701a      	strb	r2, [r3, #0]
 8007de8:	1dbb      	adds	r3, r7, #6
 8007dea:	1c0a      	adds	r2, r1, #0
 8007dec:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	330d      	adds	r3, #13
 8007df2:	1dba      	adds	r2, r7, #6
 8007df4:	7812      	ldrb	r2, [r2, #0]
 8007df6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	330b      	adds	r3, #11
 8007dfc:	220f      	movs	r2, #15
 8007dfe:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	330c      	adds	r3, #12
 8007e04:	2200      	movs	r2, #0
 8007e06:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	331a      	adds	r3, #26
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f7fe fec6 	bl	8006ba0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007e14:	1dfb      	adds	r3, r7, #7
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	0013      	movs	r3, r2
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	189b      	adds	r3, r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	189b      	adds	r3, r3, r2
 8007e24:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007e26:	2316      	movs	r3, #22
 8007e28:	18fb      	adds	r3, r7, r3
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	801a      	strh	r2, [r3, #0]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007e32:	2116      	movs	r1, #22
 8007e34:	187b      	adds	r3, r7, r1
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	4a21      	ldr	r2, [pc, #132]	; (8007ec0 <put_lfn+0xe8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d008      	beq.n	8007e50 <put_lfn+0x78>
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	61fa      	str	r2, [r7, #28]
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	18d2      	adds	r2, r2, r3
 8007e4a:	187b      	adds	r3, r7, r1
 8007e4c:	8812      	ldrh	r2, [r2, #0]
 8007e4e:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007e50:	4a1c      	ldr	r2, [pc, #112]	; (8007ec4 <put_lfn+0xec>)
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	18d3      	adds	r3, r2, r3
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	001a      	movs	r2, r3
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	189a      	adds	r2, r3, r2
 8007e5e:	2416      	movs	r4, #22
 8007e60:	193b      	adds	r3, r7, r4
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	0019      	movs	r1, r3
 8007e66:	0010      	movs	r0, r2
 8007e68:	f7fe fe9a 	bl	8006ba0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007e6c:	0022      	movs	r2, r4
 8007e6e:	18bb      	adds	r3, r7, r2
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d103      	bne.n	8007e7e <put_lfn+0xa6>
 8007e76:	18bb      	adds	r3, r7, r2
 8007e78:	2201      	movs	r2, #1
 8007e7a:	4252      	negs	r2, r2
 8007e7c:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	3301      	adds	r3, #1
 8007e82:	61bb      	str	r3, [r7, #24]
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	2b0c      	cmp	r3, #12
 8007e88:	d9d3      	bls.n	8007e32 <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007e8a:	2316      	movs	r3, #22
 8007e8c:	18fb      	adds	r3, r7, r3
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	4a0b      	ldr	r2, [pc, #44]	; (8007ec0 <put_lfn+0xe8>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d006      	beq.n	8007ea4 <put_lfn+0xcc>
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	18d3      	adds	r3, r2, r3
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d105      	bne.n	8007eb0 <put_lfn+0xd8>
 8007ea4:	1dfb      	adds	r3, r7, #7
 8007ea6:	1dfa      	adds	r2, r7, #7
 8007ea8:	7812      	ldrb	r2, [r2, #0]
 8007eaa:	2140      	movs	r1, #64	; 0x40
 8007eac:	430a      	orrs	r2, r1
 8007eae:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	1dfa      	adds	r2, r7, #7
 8007eb4:	7812      	ldrb	r2, [r2, #0]
 8007eb6:	701a      	strb	r2, [r3, #0]
}
 8007eb8:	46c0      	nop			; (mov r8, r8)
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	b009      	add	sp, #36	; 0x24
 8007ebe:	bd90      	pop	{r4, r7, pc}
 8007ec0:	0000ffff 	.word	0x0000ffff
 8007ec4:	0800e984 	.word	0x0800e984

08007ec8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08c      	sub	sp, #48	; 0x30
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	220b      	movs	r2, #11
 8007edc:	0018      	movs	r0, r3
 8007ede:	f7fe fea7 	bl	8006c30 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b05      	cmp	r3, #5
 8007ee6:	d92f      	bls.n	8007f48 <gen_numname+0x80>
		sr = seq;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007eec:	e026      	b.n	8007f3c <gen_numname+0x74>
			wc = *lfn++;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	1c9a      	adds	r2, r3, #2
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	2222      	movs	r2, #34	; 0x22
 8007ef6:	18ba      	adds	r2, r7, r2
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 8007efc:	2300      	movs	r3, #0
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f00:	e019      	b.n	8007f36 <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	005a      	lsls	r2, r3, #1
 8007f06:	2022      	movs	r0, #34	; 0x22
 8007f08:	183b      	adds	r3, r7, r0
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	400b      	ands	r3, r1
 8007f10:	18d3      	adds	r3, r2, r3
 8007f12:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007f14:	183b      	adds	r3, r7, r0
 8007f16:	183a      	adds	r2, r7, r0
 8007f18:	8812      	ldrh	r2, [r2, #0]
 8007f1a:	0852      	lsrs	r2, r2, #1
 8007f1c:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	2380      	movs	r3, #128	; 0x80
 8007f22:	025b      	lsls	r3, r3, #9
 8007f24:	4013      	ands	r3, r2
 8007f26:	d003      	beq.n	8007f30 <gen_numname+0x68>
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	4a30      	ldr	r2, [pc, #192]	; (8007fec <gen_numname+0x124>)
 8007f2c:	4053      	eors	r3, r2
 8007f2e:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	3301      	adds	r3, #1
 8007f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	2b0f      	cmp	r3, #15
 8007f3a:	d9e2      	bls.n	8007f02 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1d4      	bne.n	8007eee <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007f48:	2307      	movs	r3, #7
 8007f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	220f      	movs	r2, #15
 8007f52:	4013      	ands	r3, r2
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	212f      	movs	r1, #47	; 0x2f
 8007f58:	187b      	adds	r3, r7, r1
 8007f5a:	3230      	adds	r2, #48	; 0x30
 8007f5c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8007f5e:	187b      	adds	r3, r7, r1
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b39      	cmp	r3, #57	; 0x39
 8007f64:	d904      	bls.n	8007f70 <gen_numname+0xa8>
 8007f66:	187b      	adds	r3, r7, r1
 8007f68:	187a      	adds	r2, r7, r1
 8007f6a:	7812      	ldrb	r2, [r2, #0]
 8007f6c:	3207      	adds	r2, #7
 8007f6e:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	1e5a      	subs	r2, r3, #1
 8007f74:	62ba      	str	r2, [r7, #40]	; 0x28
 8007f76:	2014      	movs	r0, #20
 8007f78:	183a      	adds	r2, r7, r0
 8007f7a:	212f      	movs	r1, #47	; 0x2f
 8007f7c:	1879      	adds	r1, r7, r1
 8007f7e:	7809      	ldrb	r1, [r1, #0]
 8007f80:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	091b      	lsrs	r3, r3, #4
 8007f86:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1de      	bne.n	8007f4c <gen_numname+0x84>
	ns[i] = '~';
 8007f8e:	183a      	adds	r2, r7, r0
 8007f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f92:	18d3      	adds	r3, r2, r3
 8007f94:	227e      	movs	r2, #126	; 0x7e
 8007f96:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007f98:	2300      	movs	r3, #0
 8007f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f9c:	e002      	b.n	8007fa4 <gen_numname+0xdc>
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d205      	bcs.n	8007fb8 <gen_numname+0xf0>
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	18d3      	adds	r3, r2, r3
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b20      	cmp	r3, #32
 8007fb6:	d1f2      	bne.n	8007f9e <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	2b07      	cmp	r3, #7
 8007fbc:	d806      	bhi.n	8007fcc <gen_numname+0x104>
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	62ba      	str	r2, [r7, #40]	; 0x28
 8007fc4:	2214      	movs	r2, #20
 8007fc6:	18ba      	adds	r2, r7, r2
 8007fc8:	5cd1      	ldrb	r1, [r2, r3]
 8007fca:	e000      	b.n	8007fce <gen_numname+0x106>
 8007fcc:	2120      	movs	r1, #32
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	627a      	str	r2, [r7, #36]	; 0x24
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	18d3      	adds	r3, r2, r3
 8007fd8:	1c0a      	adds	r2, r1, #0
 8007fda:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	2b07      	cmp	r3, #7
 8007fe0:	d9ea      	bls.n	8007fb8 <gen_numname+0xf0>
}
 8007fe2:	46c0      	nop			; (mov r8, r8)
 8007fe4:	46c0      	nop			; (mov r8, r8)
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b00c      	add	sp, #48	; 0x30
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	00011021 	.word	0x00011021

08007ff0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007ff8:	230f      	movs	r3, #15
 8007ffa:	18fb      	adds	r3, r7, r3
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 8008000:	230b      	movs	r3, #11
 8008002:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008004:	200f      	movs	r0, #15
 8008006:	183b      	adds	r3, r7, r0
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	b2da      	uxtb	r2, r3
 800800c:	0852      	lsrs	r2, r2, #1
 800800e:	01db      	lsls	r3, r3, #7
 8008010:	4313      	orrs	r3, r2
 8008012:	b2d9      	uxtb	r1, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	607a      	str	r2, [r7, #4]
 800801a:	781a      	ldrb	r2, [r3, #0]
 800801c:	183b      	adds	r3, r7, r0
 800801e:	188a      	adds	r2, r1, r2
 8008020:	701a      	strb	r2, [r3, #0]
	} while (--n);
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	3b01      	subs	r3, #1
 8008026:	60bb      	str	r3, [r7, #8]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1ea      	bne.n	8008004 <sum_sfn+0x14>
	return sum;
 800802e:	183b      	adds	r3, r7, r0
 8008030:	781b      	ldrb	r3, [r3, #0]
}
 8008032:	0018      	movs	r0, r3
 8008034:	46bd      	mov	sp, r7
 8008036:	b004      	add	sp, #16
 8008038:	bd80      	pop	{r7, pc}

0800803a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800803a:	b5b0      	push	{r4, r5, r7, lr}
 800803c:	b086      	sub	sp, #24
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008048:	2517      	movs	r5, #23
 800804a:	197c      	adds	r4, r7, r5
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2100      	movs	r1, #0
 8008050:	0018      	movs	r0, r3
 8008052:	f7ff fc42 	bl	80078da <dir_sdi>
 8008056:	0003      	movs	r3, r0
 8008058:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800805a:	197b      	adds	r3, r7, r5
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <dir_find+0x2e>
 8008062:	197b      	adds	r3, r7, r5
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	e0df      	b.n	8008228 <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008068:	2114      	movs	r1, #20
 800806a:	187b      	adds	r3, r7, r1
 800806c:	22ff      	movs	r2, #255	; 0xff
 800806e:	701a      	strb	r2, [r3, #0]
 8008070:	2315      	movs	r3, #21
 8008072:	18fb      	adds	r3, r7, r3
 8008074:	187a      	adds	r2, r7, r1
 8008076:	7812      	ldrb	r2, [r2, #0]
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	4252      	negs	r2, r2
 8008080:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69da      	ldr	r2, [r3, #28]
 8008086:	2517      	movs	r5, #23
 8008088:	197c      	adds	r4, r7, r5
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	0011      	movs	r1, r2
 800808e:	0018      	movs	r0, r3
 8008090:	f7fe fff6 	bl	8007080 <move_window>
 8008094:	0003      	movs	r3, r0
 8008096:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8008098:	0029      	movs	r1, r5
 800809a:	187b      	adds	r3, r7, r1
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d000      	beq.n	80080a4 <dir_find+0x6a>
 80080a2:	e0b9      	b.n	8008218 <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1a      	ldr	r2, [r3, #32]
 80080a8:	2016      	movs	r0, #22
 80080aa:	183b      	adds	r3, r7, r0
 80080ac:	7812      	ldrb	r2, [r2, #0]
 80080ae:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80080b0:	183b      	adds	r3, r7, r0
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d103      	bne.n	80080c0 <dir_find+0x86>
 80080b8:	187b      	adds	r3, r7, r1
 80080ba:	2204      	movs	r2, #4
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	e0b0      	b.n	8008222 <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	330b      	adds	r3, #11
 80080c6:	781a      	ldrb	r2, [r3, #0]
 80080c8:	200f      	movs	r0, #15
 80080ca:	183b      	adds	r3, r7, r0
 80080cc:	213f      	movs	r1, #63	; 0x3f
 80080ce:	400a      	ands	r2, r1
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	0001      	movs	r1, r0
 80080d6:	187a      	adds	r2, r7, r1
 80080d8:	7812      	ldrb	r2, [r2, #0]
 80080da:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80080dc:	2316      	movs	r3, #22
 80080de:	18fb      	adds	r3, r7, r3
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2be5      	cmp	r3, #229	; 0xe5
 80080e4:	d008      	beq.n	80080f8 <dir_find+0xbe>
 80080e6:	187b      	adds	r3, r7, r1
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2208      	movs	r2, #8
 80080ec:	4013      	ands	r3, r2
 80080ee:	d00c      	beq.n	800810a <dir_find+0xd0>
 80080f0:	187b      	adds	r3, r7, r1
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b0f      	cmp	r3, #15
 80080f6:	d008      	beq.n	800810a <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80080f8:	2315      	movs	r3, #21
 80080fa:	18fb      	adds	r3, r7, r3
 80080fc:	22ff      	movs	r2, #255	; 0xff
 80080fe:	701a      	strb	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	4252      	negs	r2, r2
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
 8008108:	e077      	b.n	80081fa <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800810a:	230f      	movs	r3, #15
 800810c:	18fb      	adds	r3, r7, r3
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b0f      	cmp	r3, #15
 8008112:	d148      	bne.n	80081a6 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	222f      	movs	r2, #47	; 0x2f
 8008118:	5c9b      	ldrb	r3, [r3, r2]
 800811a:	001a      	movs	r2, r3
 800811c:	2340      	movs	r3, #64	; 0x40
 800811e:	4013      	ands	r3, r2
 8008120:	d000      	beq.n	8008124 <dir_find+0xea>
 8008122:	e06a      	b.n	80081fa <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008124:	2116      	movs	r1, #22
 8008126:	187b      	adds	r3, r7, r1
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	2240      	movs	r2, #64	; 0x40
 800812c:	4013      	ands	r3, r2
 800812e:	d015      	beq.n	800815c <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a1a      	ldr	r2, [r3, #32]
 8008134:	2314      	movs	r3, #20
 8008136:	18fb      	adds	r3, r7, r3
 8008138:	7b52      	ldrb	r2, [r2, #13]
 800813a:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800813c:	187b      	adds	r3, r7, r1
 800813e:	0008      	movs	r0, r1
 8008140:	187a      	adds	r2, r7, r1
 8008142:	7812      	ldrb	r2, [r2, #0]
 8008144:	2140      	movs	r1, #64	; 0x40
 8008146:	438a      	bics	r2, r1
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	2315      	movs	r3, #21
 800814c:	18fb      	adds	r3, r7, r3
 800814e:	183a      	adds	r2, r7, r0
 8008150:	7812      	ldrb	r2, [r2, #0]
 8008152:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	695a      	ldr	r2, [r3, #20]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800815c:	2316      	movs	r3, #22
 800815e:	18fa      	adds	r2, r7, r3
 8008160:	2415      	movs	r4, #21
 8008162:	193b      	adds	r3, r7, r4
 8008164:	7812      	ldrb	r2, [r2, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	429a      	cmp	r2, r3
 800816a:	d117      	bne.n	800819c <dir_find+0x162>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	330d      	adds	r3, #13
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2214      	movs	r2, #20
 8008176:	18ba      	adds	r2, r7, r2
 8008178:	7812      	ldrb	r2, [r2, #0]
 800817a:	429a      	cmp	r2, r3
 800817c:	d10e      	bne.n	800819c <dir_find+0x162>
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	691a      	ldr	r2, [r3, #16]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	0019      	movs	r1, r3
 8008188:	0010      	movs	r0, r2
 800818a:	f7ff fda5 	bl	8007cd8 <cmp_lfn>
 800818e:	1e03      	subs	r3, r0, #0
 8008190:	d004      	beq.n	800819c <dir_find+0x162>
 8008192:	193b      	adds	r3, r7, r4
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	3b01      	subs	r3, #1
 8008198:	b2da      	uxtb	r2, r3
 800819a:	e000      	b.n	800819e <dir_find+0x164>
 800819c:	22ff      	movs	r2, #255	; 0xff
 800819e:	2315      	movs	r3, #21
 80081a0:	18fb      	adds	r3, r7, r3
 80081a2:	701a      	strb	r2, [r3, #0]
 80081a4:	e029      	b.n	80081fa <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80081a6:	2315      	movs	r3, #21
 80081a8:	18fb      	adds	r3, r7, r3
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10b      	bne.n	80081c8 <dir_find+0x18e>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	0018      	movs	r0, r3
 80081b6:	f7ff ff1b 	bl	8007ff0 <sum_sfn>
 80081ba:	0003      	movs	r3, r0
 80081bc:	001a      	movs	r2, r3
 80081be:	2314      	movs	r3, #20
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d029      	beq.n	800821c <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	222f      	movs	r2, #47	; 0x2f
 80081cc:	5c9b      	ldrb	r3, [r3, r2]
 80081ce:	001a      	movs	r2, r3
 80081d0:	2301      	movs	r3, #1
 80081d2:	4013      	ands	r3, r2
 80081d4:	d109      	bne.n	80081ea <dir_find+0x1b0>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a18      	ldr	r0, [r3, #32]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3324      	adds	r3, #36	; 0x24
 80081de:	220b      	movs	r2, #11
 80081e0:	0019      	movs	r1, r3
 80081e2:	f7fe fd5d 	bl	8006ca0 <mem_cmp>
 80081e6:	1e03      	subs	r3, r0, #0
 80081e8:	d01a      	beq.n	8008220 <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80081ea:	2315      	movs	r3, #21
 80081ec:	18fb      	adds	r3, r7, r3
 80081ee:	22ff      	movs	r2, #255	; 0xff
 80081f0:	701a      	strb	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	4252      	negs	r2, r2
 80081f8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80081fa:	2517      	movs	r5, #23
 80081fc:	197c      	adds	r4, r7, r5
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2100      	movs	r1, #0
 8008202:	0018      	movs	r0, r3
 8008204:	f7ff fbf5 	bl	80079f2 <dir_next>
 8008208:	0003      	movs	r3, r0
 800820a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 800820c:	197b      	adds	r3, r7, r5
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d100      	bne.n	8008216 <dir_find+0x1dc>
 8008214:	e735      	b.n	8008082 <dir_find+0x48>
 8008216:	e004      	b.n	8008222 <dir_find+0x1e8>
		if (res != FR_OK) break;
 8008218:	46c0      	nop			; (mov r8, r8)
 800821a:	e002      	b.n	8008222 <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800821c:	46c0      	nop			; (mov r8, r8)
 800821e:	e000      	b.n	8008222 <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008220:	46c0      	nop			; (mov r8, r8)

	return res;
 8008222:	2317      	movs	r3, #23
 8008224:	18fb      	adds	r3, r7, r3
 8008226:	781b      	ldrb	r3, [r3, #0]
}
 8008228:	0018      	movs	r0, r3
 800822a:	46bd      	mov	sp, r7
 800822c:	b006      	add	sp, #24
 800822e:	bdb0      	pop	{r4, r5, r7, pc}

08008230 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008230:	b5b0      	push	{r4, r5, r7, lr}
 8008232:	b08c      	sub	sp, #48	; 0x30
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	222f      	movs	r2, #47	; 0x2f
 8008242:	5c9b      	ldrb	r3, [r3, r2]
 8008244:	001a      	movs	r2, r3
 8008246:	23a0      	movs	r3, #160	; 0xa0
 8008248:	4013      	ands	r3, r2
 800824a:	d001      	beq.n	8008250 <dir_register+0x20>
 800824c:	2306      	movs	r3, #6
 800824e:	e0fb      	b.n	8008448 <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008250:	2300      	movs	r3, #0
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
 8008254:	e002      	b.n	800825c <dir_register+0x2c>
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	3301      	adds	r3, #1
 800825a:	627b      	str	r3, [r7, #36]	; 0x24
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	691a      	ldr	r2, [r3, #16]
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	18d3      	adds	r3, r2, r3
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1f4      	bne.n	8008256 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3324      	adds	r3, #36	; 0x24
 8008270:	0019      	movs	r1, r3
 8008272:	240c      	movs	r4, #12
 8008274:	193b      	adds	r3, r7, r4
 8008276:	220c      	movs	r2, #12
 8008278:	0018      	movs	r0, r3
 800827a:	f7fe fcd9 	bl	8006c30 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800827e:	193b      	adds	r3, r7, r4
 8008280:	7adb      	ldrb	r3, [r3, #11]
 8008282:	001a      	movs	r2, r3
 8008284:	2301      	movs	r3, #1
 8008286:	4013      	ands	r3, r2
 8008288:	d037      	beq.n	80082fa <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	222f      	movs	r2, #47	; 0x2f
 800828e:	2140      	movs	r1, #64	; 0x40
 8008290:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 8008292:	2301      	movs	r3, #1
 8008294:	62bb      	str	r3, [r7, #40]	; 0x28
 8008296:	e018      	b.n	80082ca <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3324      	adds	r3, #36	; 0x24
 800829c:	0018      	movs	r0, r3
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	691a      	ldr	r2, [r3, #16]
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	210c      	movs	r1, #12
 80082a6:	1879      	adds	r1, r7, r1
 80082a8:	f7ff fe0e 	bl	8007ec8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80082ac:	252f      	movs	r5, #47	; 0x2f
 80082ae:	197c      	adds	r4, r7, r5
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	0018      	movs	r0, r3
 80082b4:	f7ff fec1 	bl	800803a <dir_find>
 80082b8:	0003      	movs	r3, r0
 80082ba:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80082bc:	197b      	adds	r3, r7, r5
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d106      	bne.n	80082d2 <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	3301      	adds	r3, #1
 80082c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	2b63      	cmp	r3, #99	; 0x63
 80082ce:	d9e3      	bls.n	8008298 <dir_register+0x68>
 80082d0:	e000      	b.n	80082d4 <dir_register+0xa4>
			if (res != FR_OK) break;
 80082d2:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	2b64      	cmp	r3, #100	; 0x64
 80082d8:	d101      	bne.n	80082de <dir_register+0xae>
 80082da:	2307      	movs	r3, #7
 80082dc:	e0b4      	b.n	8008448 <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80082de:	222f      	movs	r2, #47	; 0x2f
 80082e0:	18bb      	adds	r3, r7, r2
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d002      	beq.n	80082ee <dir_register+0xbe>
 80082e8:	18bb      	adds	r3, r7, r2
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	e0ac      	b.n	8008448 <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80082ee:	230c      	movs	r3, #12
 80082f0:	18fb      	adds	r3, r7, r3
 80082f2:	7ad9      	ldrb	r1, [r3, #11]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	222f      	movs	r2, #47	; 0x2f
 80082f8:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80082fa:	230c      	movs	r3, #12
 80082fc:	18fb      	adds	r3, r7, r3
 80082fe:	7adb      	ldrb	r3, [r3, #11]
 8008300:	001a      	movs	r2, r3
 8008302:	2302      	movs	r3, #2
 8008304:	4013      	ands	r3, r2
 8008306:	d008      	beq.n	800831a <dir_register+0xea>
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	330c      	adds	r3, #12
 800830c:	210d      	movs	r1, #13
 800830e:	0018      	movs	r0, r3
 8008310:	f7f7 ff16 	bl	8000140 <__udivsi3>
 8008314:	0003      	movs	r3, r0
 8008316:	3301      	adds	r3, #1
 8008318:	e000      	b.n	800831c <dir_register+0xec>
 800831a:	2301      	movs	r3, #1
 800831c:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800831e:	252f      	movs	r5, #47	; 0x2f
 8008320:	197c      	adds	r4, r7, r5
 8008322:	6a3a      	ldr	r2, [r7, #32]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	0011      	movs	r1, r2
 8008328:	0018      	movs	r0, r3
 800832a:	f7ff fc3e 	bl	8007baa <dir_alloc>
 800832e:	0003      	movs	r3, r0
 8008330:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008332:	0029      	movs	r1, r5
 8008334:	187b      	adds	r3, r7, r1
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d153      	bne.n	80083e4 <dir_register+0x1b4>
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	3b01      	subs	r3, #1
 8008340:	623b      	str	r3, [r7, #32]
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d04d      	beq.n	80083e4 <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	695a      	ldr	r2, [r3, #20]
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	015b      	lsls	r3, r3, #5
 8008350:	1ad2      	subs	r2, r2, r3
 8008352:	000d      	movs	r5, r1
 8008354:	187c      	adds	r4, r7, r1
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	0011      	movs	r1, r2
 800835a:	0018      	movs	r0, r3
 800835c:	f7ff fabd 	bl	80078da <dir_sdi>
 8008360:	0003      	movs	r3, r0
 8008362:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008364:	197b      	adds	r3, r7, r5
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d13b      	bne.n	80083e4 <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3324      	adds	r3, #36	; 0x24
 8008370:	221b      	movs	r2, #27
 8008372:	18bc      	adds	r4, r7, r2
 8008374:	0018      	movs	r0, r3
 8008376:	f7ff fe3b 	bl	8007ff0 <sum_sfn>
 800837a:	0003      	movs	r3, r0
 800837c:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69da      	ldr	r2, [r3, #28]
 8008382:	252f      	movs	r5, #47	; 0x2f
 8008384:	197c      	adds	r4, r7, r5
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	0011      	movs	r1, r2
 800838a:	0018      	movs	r0, r3
 800838c:	f7fe fe78 	bl	8007080 <move_window>
 8008390:	0003      	movs	r3, r0
 8008392:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 8008394:	002c      	movs	r4, r5
 8008396:	193b      	adds	r3, r7, r4
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d121      	bne.n	80083e2 <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	6918      	ldr	r0, [r3, #16]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a19      	ldr	r1, [r3, #32]
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	231b      	movs	r3, #27
 80083ac:	18fb      	adds	r3, r7, r3
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	f7ff fd12 	bl	8007dd8 <put_lfn>
				fs->wflag = 1;
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	2201      	movs	r2, #1
 80083b8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80083ba:	0025      	movs	r5, r4
 80083bc:	193c      	adds	r4, r7, r4
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2100      	movs	r1, #0
 80083c2:	0018      	movs	r0, r3
 80083c4:	f7ff fb15 	bl	80079f2 <dir_next>
 80083c8:	0003      	movs	r3, r0
 80083ca:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 80083cc:	197b      	adds	r3, r7, r5
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d107      	bne.n	80083e4 <dir_register+0x1b4>
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	623b      	str	r3, [r7, #32]
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1ce      	bne.n	800837e <dir_register+0x14e>
 80083e0:	e000      	b.n	80083e4 <dir_register+0x1b4>
				if (res != FR_OK) break;
 80083e2:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80083e4:	252f      	movs	r5, #47	; 0x2f
 80083e6:	197b      	adds	r3, r7, r5
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d129      	bne.n	8008442 <dir_register+0x212>
		res = move_window(fs, dp->sect);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	69da      	ldr	r2, [r3, #28]
 80083f2:	197c      	adds	r4, r7, r5
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	0011      	movs	r1, r2
 80083f8:	0018      	movs	r0, r3
 80083fa:	f7fe fe41 	bl	8007080 <move_window>
 80083fe:	0003      	movs	r3, r0
 8008400:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008402:	197b      	adds	r3, r7, r5
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d11b      	bne.n	8008442 <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	2220      	movs	r2, #32
 8008410:	2100      	movs	r1, #0
 8008412:	0018      	movs	r0, r3
 8008414:	f7fe fc2b 	bl	8006c6e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a18      	ldr	r0, [r3, #32]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3324      	adds	r3, #36	; 0x24
 8008420:	220b      	movs	r2, #11
 8008422:	0019      	movs	r1, r3
 8008424:	f7fe fc04 	bl	8006c30 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	222f      	movs	r2, #47	; 0x2f
 800842c:	5c9a      	ldrb	r2, [r3, r2]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	330c      	adds	r3, #12
 8008434:	2118      	movs	r1, #24
 8008436:	400a      	ands	r2, r1
 8008438:	b2d2      	uxtb	r2, r2
 800843a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	2201      	movs	r2, #1
 8008440:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008442:	232f      	movs	r3, #47	; 0x2f
 8008444:	18fb      	adds	r3, r7, r3
 8008446:	781b      	ldrb	r3, [r3, #0]
}
 8008448:	0018      	movs	r0, r3
 800844a:	46bd      	mov	sp, r7
 800844c:	b00c      	add	sp, #48	; 0x30
 800844e:	bdb0      	pop	{r4, r5, r7, pc}

08008450 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008450:	b5b0      	push	{r4, r5, r7, lr}
 8008452:	b08a      	sub	sp, #40	; 0x28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	613b      	str	r3, [r7, #16]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	2300      	movs	r3, #0
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	61ba      	str	r2, [r7, #24]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	18d3      	adds	r3, r2, r3
 800847a:	781a      	ldrb	r2, [r3, #0]
 800847c:	2124      	movs	r1, #36	; 0x24
 800847e:	187b      	adds	r3, r7, r1
 8008480:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 8008482:	000a      	movs	r2, r1
 8008484:	18bb      	adds	r3, r7, r2
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	2b1f      	cmp	r3, #31
 800848a:	d94e      	bls.n	800852a <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800848c:	18bb      	adds	r3, r7, r2
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	2b2f      	cmp	r3, #47	; 0x2f
 8008492:	d007      	beq.n	80084a4 <create_name+0x54>
 8008494:	18bb      	adds	r3, r7, r2
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	2b5c      	cmp	r3, #92	; 0x5c
 800849a:	d110      	bne.n	80084be <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800849c:	e002      	b.n	80084a4 <create_name+0x54>
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	3301      	adds	r3, #1
 80084a2:	61bb      	str	r3, [r7, #24]
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	18d3      	adds	r3, r2, r3
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b2f      	cmp	r3, #47	; 0x2f
 80084ae:	d0f6      	beq.n	800849e <create_name+0x4e>
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	18d3      	adds	r3, r2, r3
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b5c      	cmp	r3, #92	; 0x5c
 80084ba:	d0f0      	beq.n	800849e <create_name+0x4e>
			break;
 80084bc:	e036      	b.n	800852c <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2bfe      	cmp	r3, #254	; 0xfe
 80084c2:	d901      	bls.n	80084c8 <create_name+0x78>
 80084c4:	2306      	movs	r3, #6
 80084c6:	e1c2      	b.n	800884e <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 80084c8:	2524      	movs	r5, #36	; 0x24
 80084ca:	197b      	adds	r3, r7, r5
 80084cc:	197a      	adds	r2, r7, r5
 80084ce:	8812      	ldrh	r2, [r2, #0]
 80084d0:	21ff      	movs	r1, #255	; 0xff
 80084d2:	400a      	ands	r2, r1
 80084d4:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80084d6:	197c      	adds	r4, r7, r5
 80084d8:	197b      	adds	r3, r7, r5
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	2101      	movs	r1, #1
 80084de:	0018      	movs	r0, r3
 80084e0:	f001 fb70 	bl	8009bc4 <ff_convert>
 80084e4:	0003      	movs	r3, r0
 80084e6:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80084e8:	197b      	adds	r3, r7, r5
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <create_name+0xa4>
 80084f0:	2306      	movs	r3, #6
 80084f2:	e1ac      	b.n	800884e <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80084f4:	2224      	movs	r2, #36	; 0x24
 80084f6:	18bb      	adds	r3, r7, r2
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	2b7f      	cmp	r3, #127	; 0x7f
 80084fc:	d80a      	bhi.n	8008514 <create_name+0xc4>
 80084fe:	18bb      	adds	r3, r7, r2
 8008500:	881a      	ldrh	r2, [r3, #0]
 8008502:	4ba7      	ldr	r3, [pc, #668]	; (80087a0 <create_name+0x350>)
 8008504:	0011      	movs	r1, r2
 8008506:	0018      	movs	r0, r3
 8008508:	f7fe fbef 	bl	8006cea <chk_chr>
 800850c:	1e03      	subs	r3, r0, #0
 800850e:	d001      	beq.n	8008514 <create_name+0xc4>
 8008510:	2306      	movs	r3, #6
 8008512:	e19c      	b.n	800884e <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	617a      	str	r2, [r7, #20]
 800851a:	005b      	lsls	r3, r3, #1
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	18d3      	adds	r3, r2, r3
 8008520:	2224      	movs	r2, #36	; 0x24
 8008522:	18ba      	adds	r2, r7, r2
 8008524:	8812      	ldrh	r2, [r2, #0]
 8008526:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008528:	e7a2      	b.n	8008470 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800852a:	46c0      	nop			; (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	18d2      	adds	r2, r2, r3
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008536:	2324      	movs	r3, #36	; 0x24
 8008538:	18fb      	adds	r3, r7, r3
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	2b1f      	cmp	r3, #31
 800853e:	d801      	bhi.n	8008544 <create_name+0xf4>
 8008540:	2204      	movs	r2, #4
 8008542:	e000      	b.n	8008546 <create_name+0xf6>
 8008544:	2200      	movs	r2, #0
 8008546:	2327      	movs	r3, #39	; 0x27
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800854c:	e016      	b.n	800857c <create_name+0x12c>
		w = lfn[di - 1];
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	4a94      	ldr	r2, [pc, #592]	; (80087a4 <create_name+0x354>)
 8008552:	4694      	mov	ip, r2
 8008554:	4463      	add	r3, ip
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	18d2      	adds	r2, r2, r3
 800855c:	2124      	movs	r1, #36	; 0x24
 800855e:	187b      	adds	r3, r7, r1
 8008560:	8812      	ldrh	r2, [r2, #0]
 8008562:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8008564:	000a      	movs	r2, r1
 8008566:	18bb      	adds	r3, r7, r2
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	2b20      	cmp	r3, #32
 800856c:	d003      	beq.n	8008576 <create_name+0x126>
 800856e:	18bb      	adds	r3, r7, r2
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	2b2e      	cmp	r3, #46	; 0x2e
 8008574:	d106      	bne.n	8008584 <create_name+0x134>
		di--;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	3b01      	subs	r3, #1
 800857a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e5      	bne.n	800854e <create_name+0xfe>
 8008582:	e000      	b.n	8008586 <create_name+0x136>
		if (w != ' ' && w != '.') break;
 8008584:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	18d3      	adds	r3, r2, r3
 800858e:	2200      	movs	r2, #0
 8008590:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <create_name+0x14c>
 8008598:	2306      	movs	r3, #6
 800859a:	e158      	b.n	800884e <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3324      	adds	r3, #36	; 0x24
 80085a0:	220b      	movs	r2, #11
 80085a2:	2120      	movs	r1, #32
 80085a4:	0018      	movs	r0, r3
 80085a6:	f7fe fb62 	bl	8006c6e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80085aa:	2300      	movs	r3, #0
 80085ac:	61bb      	str	r3, [r7, #24]
 80085ae:	e002      	b.n	80085b6 <create_name+0x166>
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	3301      	adds	r3, #1
 80085b4:	61bb      	str	r3, [r7, #24]
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	18d3      	adds	r3, r2, r3
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	2b20      	cmp	r3, #32
 80085c2:	d0f5      	beq.n	80085b0 <create_name+0x160>
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	18d3      	adds	r3, r2, r3
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	2b2e      	cmp	r3, #46	; 0x2e
 80085d0:	d0ee      	beq.n	80085b0 <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00a      	beq.n	80085ee <create_name+0x19e>
 80085d8:	2227      	movs	r2, #39	; 0x27
 80085da:	18bb      	adds	r3, r7, r2
 80085dc:	18ba      	adds	r2, r7, r2
 80085de:	7812      	ldrb	r2, [r2, #0]
 80085e0:	2103      	movs	r1, #3
 80085e2:	430a      	orrs	r2, r1
 80085e4:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80085e6:	e002      	b.n	80085ee <create_name+0x19e>
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	617b      	str	r3, [r7, #20]
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d009      	beq.n	8008608 <create_name+0x1b8>
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	4a6b      	ldr	r2, [pc, #428]	; (80087a4 <create_name+0x354>)
 80085f8:	4694      	mov	ip, r2
 80085fa:	4463      	add	r3, ip
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	18d3      	adds	r3, r2, r3
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	2b2e      	cmp	r3, #46	; 0x2e
 8008606:	d1ef      	bne.n	80085e8 <create_name+0x198>

	i = b = 0; ni = 8;
 8008608:	2326      	movs	r3, #38	; 0x26
 800860a:	18fb      	adds	r3, r7, r3
 800860c:	2200      	movs	r2, #0
 800860e:	701a      	strb	r2, [r3, #0]
 8008610:	2300      	movs	r3, #0
 8008612:	623b      	str	r3, [r7, #32]
 8008614:	2308      	movs	r3, #8
 8008616:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	61ba      	str	r2, [r7, #24]
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	18d2      	adds	r2, r2, r3
 8008624:	2124      	movs	r1, #36	; 0x24
 8008626:	187b      	adds	r3, r7, r1
 8008628:	8812      	ldrh	r2, [r2, #0]
 800862a:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 800862c:	000a      	movs	r2, r1
 800862e:	18bb      	adds	r3, r7, r2
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d100      	bne.n	8008638 <create_name+0x1e8>
 8008636:	e0b1      	b.n	800879c <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008638:	18bb      	adds	r3, r7, r2
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	2b20      	cmp	r3, #32
 800863e:	d007      	beq.n	8008650 <create_name+0x200>
 8008640:	18bb      	adds	r3, r7, r2
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	2b2e      	cmp	r3, #46	; 0x2e
 8008646:	d10b      	bne.n	8008660 <create_name+0x210>
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	429a      	cmp	r2, r3
 800864e:	d007      	beq.n	8008660 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 8008650:	2227      	movs	r2, #39	; 0x27
 8008652:	18bb      	adds	r3, r7, r2
 8008654:	18ba      	adds	r2, r7, r2
 8008656:	7812      	ldrb	r2, [r2, #0]
 8008658:	2103      	movs	r1, #3
 800865a:	430a      	orrs	r2, r1
 800865c:	701a      	strb	r2, [r3, #0]
 800865e:	e09c      	b.n	800879a <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008660:	6a3a      	ldr	r2, [r7, #32]
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	429a      	cmp	r2, r3
 8008666:	d203      	bcs.n	8008670 <create_name+0x220>
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	429a      	cmp	r2, r3
 800866e:	d127      	bne.n	80086c0 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	2b0b      	cmp	r3, #11
 8008674:	d107      	bne.n	8008686 <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 8008676:	2227      	movs	r2, #39	; 0x27
 8008678:	18bb      	adds	r3, r7, r2
 800867a:	18ba      	adds	r2, r7, r2
 800867c:	7812      	ldrb	r2, [r2, #0]
 800867e:	2103      	movs	r1, #3
 8008680:	430a      	orrs	r2, r1
 8008682:	701a      	strb	r2, [r3, #0]
 8008684:	e095      	b.n	80087b2 <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	429a      	cmp	r2, r3
 800868c:	d006      	beq.n	800869c <create_name+0x24c>
 800868e:	2227      	movs	r2, #39	; 0x27
 8008690:	18bb      	adds	r3, r7, r2
 8008692:	18ba      	adds	r2, r7, r2
 8008694:	7812      	ldrb	r2, [r2, #0]
 8008696:	2103      	movs	r1, #3
 8008698:	430a      	orrs	r2, r1
 800869a:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d900      	bls.n	80086a6 <create_name+0x256>
 80086a4:	e084      	b.n	80087b0 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	61bb      	str	r3, [r7, #24]
 80086aa:	2308      	movs	r3, #8
 80086ac:	623b      	str	r3, [r7, #32]
 80086ae:	230b      	movs	r3, #11
 80086b0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80086b2:	2226      	movs	r2, #38	; 0x26
 80086b4:	18bb      	adds	r3, r7, r2
 80086b6:	18ba      	adds	r2, r7, r2
 80086b8:	7812      	ldrb	r2, [r2, #0]
 80086ba:	0092      	lsls	r2, r2, #2
 80086bc:	701a      	strb	r2, [r3, #0]
 80086be:	e06c      	b.n	800879a <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80086c0:	2524      	movs	r5, #36	; 0x24
 80086c2:	197b      	adds	r3, r7, r5
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	2b7f      	cmp	r3, #127	; 0x7f
 80086c8:	d91a      	bls.n	8008700 <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80086ca:	197c      	adds	r4, r7, r5
 80086cc:	197b      	adds	r3, r7, r5
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	2100      	movs	r1, #0
 80086d2:	0018      	movs	r0, r3
 80086d4:	f001 fa76 	bl	8009bc4 <ff_convert>
 80086d8:	0003      	movs	r3, r0
 80086da:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80086dc:	197b      	adds	r3, r7, r5
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d006      	beq.n	80086f2 <create_name+0x2a2>
 80086e4:	197b      	adds	r3, r7, r5
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	3b80      	subs	r3, #128	; 0x80
 80086ea:	4a2f      	ldr	r2, [pc, #188]	; (80087a8 <create_name+0x358>)
 80086ec:	5cd2      	ldrb	r2, [r2, r3]
 80086ee:	197b      	adds	r3, r7, r5
 80086f0:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80086f2:	2227      	movs	r2, #39	; 0x27
 80086f4:	18bb      	adds	r3, r7, r2
 80086f6:	18ba      	adds	r2, r7, r2
 80086f8:	7812      	ldrb	r2, [r2, #0]
 80086fa:	2102      	movs	r1, #2
 80086fc:	430a      	orrs	r2, r1
 80086fe:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008700:	2224      	movs	r2, #36	; 0x24
 8008702:	18bb      	adds	r3, r7, r2
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d008      	beq.n	800871c <create_name+0x2cc>
 800870a:	18bb      	adds	r3, r7, r2
 800870c:	881a      	ldrh	r2, [r3, #0]
 800870e:	4b27      	ldr	r3, [pc, #156]	; (80087ac <create_name+0x35c>)
 8008710:	0011      	movs	r1, r2
 8008712:	0018      	movs	r0, r3
 8008714:	f7fe fae9 	bl	8006cea <chk_chr>
 8008718:	1e03      	subs	r3, r0, #0
 800871a:	d00b      	beq.n	8008734 <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800871c:	2324      	movs	r3, #36	; 0x24
 800871e:	18fb      	adds	r3, r7, r3
 8008720:	225f      	movs	r2, #95	; 0x5f
 8008722:	801a      	strh	r2, [r3, #0]
 8008724:	2227      	movs	r2, #39	; 0x27
 8008726:	18bb      	adds	r3, r7, r2
 8008728:	18ba      	adds	r2, r7, r2
 800872a:	7812      	ldrb	r2, [r2, #0]
 800872c:	2103      	movs	r1, #3
 800872e:	430a      	orrs	r2, r1
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	e025      	b.n	8008780 <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008734:	2224      	movs	r2, #36	; 0x24
 8008736:	18bb      	adds	r3, r7, r2
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	2b40      	cmp	r3, #64	; 0x40
 800873c:	d90b      	bls.n	8008756 <create_name+0x306>
 800873e:	18bb      	adds	r3, r7, r2
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	2b5a      	cmp	r3, #90	; 0x5a
 8008744:	d807      	bhi.n	8008756 <create_name+0x306>
					b |= 2;
 8008746:	2226      	movs	r2, #38	; 0x26
 8008748:	18bb      	adds	r3, r7, r2
 800874a:	18ba      	adds	r2, r7, r2
 800874c:	7812      	ldrb	r2, [r2, #0]
 800874e:	2102      	movs	r1, #2
 8008750:	430a      	orrs	r2, r1
 8008752:	701a      	strb	r2, [r3, #0]
 8008754:	e014      	b.n	8008780 <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008756:	2024      	movs	r0, #36	; 0x24
 8008758:	183b      	adds	r3, r7, r0
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	2b60      	cmp	r3, #96	; 0x60
 800875e:	d90f      	bls.n	8008780 <create_name+0x330>
 8008760:	183b      	adds	r3, r7, r0
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	2b7a      	cmp	r3, #122	; 0x7a
 8008766:	d80b      	bhi.n	8008780 <create_name+0x330>
						b |= 1; w -= 0x20;
 8008768:	2226      	movs	r2, #38	; 0x26
 800876a:	18bb      	adds	r3, r7, r2
 800876c:	18ba      	adds	r2, r7, r2
 800876e:	7812      	ldrb	r2, [r2, #0]
 8008770:	2101      	movs	r1, #1
 8008772:	430a      	orrs	r2, r1
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	183b      	adds	r3, r7, r0
 8008778:	183a      	adds	r2, r7, r0
 800877a:	8812      	ldrh	r2, [r2, #0]
 800877c:	3a20      	subs	r2, #32
 800877e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	623a      	str	r2, [r7, #32]
 8008786:	2224      	movs	r2, #36	; 0x24
 8008788:	18ba      	adds	r2, r7, r2
 800878a:	8812      	ldrh	r2, [r2, #0]
 800878c:	b2d0      	uxtb	r0, r2
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	2124      	movs	r1, #36	; 0x24
 8008792:	18d3      	adds	r3, r2, r3
 8008794:	185b      	adds	r3, r3, r1
 8008796:	1c02      	adds	r2, r0, #0
 8008798:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800879a:	e73d      	b.n	8008618 <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 800879c:	46c0      	nop			; (mov r8, r8)
 800879e:	e008      	b.n	80087b2 <create_name+0x362>
 80087a0:	0800e7a8 	.word	0x0800e7a8
 80087a4:	7fffffff 	.word	0x7fffffff
 80087a8:	0800e904 	.word	0x0800e904
 80087ac:	0800e7b4 	.word	0x0800e7b4
			if (si > di) break;			/* No extension */
 80087b0:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2224      	movs	r2, #36	; 0x24
 80087b6:	5c9b      	ldrb	r3, [r3, r2]
 80087b8:	2be5      	cmp	r3, #229	; 0xe5
 80087ba:	d103      	bne.n	80087c4 <create_name+0x374>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2224      	movs	r2, #36	; 0x24
 80087c0:	2105      	movs	r1, #5
 80087c2:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	2b08      	cmp	r3, #8
 80087c8:	d105      	bne.n	80087d6 <create_name+0x386>
 80087ca:	2226      	movs	r2, #38	; 0x26
 80087cc:	18bb      	adds	r3, r7, r2
 80087ce:	18ba      	adds	r2, r7, r2
 80087d0:	7812      	ldrb	r2, [r2, #0]
 80087d2:	0092      	lsls	r2, r2, #2
 80087d4:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80087d6:	2126      	movs	r1, #38	; 0x26
 80087d8:	187b      	adds	r3, r7, r1
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	220c      	movs	r2, #12
 80087de:	4013      	ands	r3, r2
 80087e0:	2b0c      	cmp	r3, #12
 80087e2:	d005      	beq.n	80087f0 <create_name+0x3a0>
 80087e4:	187b      	adds	r3, r7, r1
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2203      	movs	r2, #3
 80087ea:	4013      	ands	r3, r2
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d106      	bne.n	80087fe <create_name+0x3ae>
 80087f0:	2227      	movs	r2, #39	; 0x27
 80087f2:	18bb      	adds	r3, r7, r2
 80087f4:	18ba      	adds	r2, r7, r2
 80087f6:	7812      	ldrb	r2, [r2, #0]
 80087f8:	2102      	movs	r1, #2
 80087fa:	430a      	orrs	r2, r1
 80087fc:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80087fe:	2127      	movs	r1, #39	; 0x27
 8008800:	187b      	adds	r3, r7, r1
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2202      	movs	r2, #2
 8008806:	4013      	ands	r3, r2
 8008808:	d11a      	bne.n	8008840 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800880a:	2326      	movs	r3, #38	; 0x26
 800880c:	18fb      	adds	r3, r7, r3
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2203      	movs	r2, #3
 8008812:	4013      	ands	r3, r2
 8008814:	2b01      	cmp	r3, #1
 8008816:	d105      	bne.n	8008824 <create_name+0x3d4>
 8008818:	187b      	adds	r3, r7, r1
 800881a:	187a      	adds	r2, r7, r1
 800881c:	7812      	ldrb	r2, [r2, #0]
 800881e:	2110      	movs	r1, #16
 8008820:	430a      	orrs	r2, r1
 8008822:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008824:	2326      	movs	r3, #38	; 0x26
 8008826:	18fb      	adds	r3, r7, r3
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	220c      	movs	r2, #12
 800882c:	4013      	ands	r3, r2
 800882e:	2b04      	cmp	r3, #4
 8008830:	d106      	bne.n	8008840 <create_name+0x3f0>
 8008832:	2227      	movs	r2, #39	; 0x27
 8008834:	18bb      	adds	r3, r7, r2
 8008836:	18ba      	adds	r2, r7, r2
 8008838:	7812      	ldrb	r2, [r2, #0]
 800883a:	2108      	movs	r1, #8
 800883c:	430a      	orrs	r2, r1
 800883e:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2227      	movs	r2, #39	; 0x27
 8008844:	18ba      	adds	r2, r7, r2
 8008846:	212f      	movs	r1, #47	; 0x2f
 8008848:	7812      	ldrb	r2, [r2, #0]
 800884a:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 800884c:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800884e:	0018      	movs	r0, r3
 8008850:	46bd      	mov	sp, r7
 8008852:	b00a      	add	sp, #40	; 0x28
 8008854:	bdb0      	pop	{r4, r5, r7, pc}
 8008856:	46c0      	nop			; (mov r8, r8)

08008858 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008858:	b5b0      	push	{r4, r5, r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800886c:	e002      	b.n	8008874 <follow_path+0x1c>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	3301      	adds	r3, #1
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b2f      	cmp	r3, #47	; 0x2f
 800887a:	d0f8      	beq.n	800886e <follow_path+0x16>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b5c      	cmp	r3, #92	; 0x5c
 8008882:	d0f4      	beq.n	800886e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	2200      	movs	r2, #0
 8008888:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2b1f      	cmp	r3, #31
 8008890:	d80d      	bhi.n	80088ae <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	222f      	movs	r2, #47	; 0x2f
 8008896:	2180      	movs	r1, #128	; 0x80
 8008898:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 800889a:	2317      	movs	r3, #23
 800889c:	18fc      	adds	r4, r7, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2100      	movs	r1, #0
 80088a2:	0018      	movs	r0, r3
 80088a4:	f7ff f819 	bl	80078da <dir_sdi>
 80088a8:	0003      	movs	r3, r0
 80088aa:	7023      	strb	r3, [r4, #0]
 80088ac:	e057      	b.n	800895e <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80088ae:	2517      	movs	r5, #23
 80088b0:	197c      	adds	r4, r7, r5
 80088b2:	003a      	movs	r2, r7
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	0011      	movs	r1, r2
 80088b8:	0018      	movs	r0, r3
 80088ba:	f7ff fdc9 	bl	8008450 <create_name>
 80088be:	0003      	movs	r3, r0
 80088c0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80088c2:	197b      	adds	r3, r7, r5
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d144      	bne.n	8008954 <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 80088ca:	197c      	adds	r4, r7, r5
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	0018      	movs	r0, r3
 80088d0:	f7ff fbb3 	bl	800803a <dir_find>
 80088d4:	0003      	movs	r3, r0
 80088d6:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80088d8:	200b      	movs	r0, #11
 80088da:	183b      	adds	r3, r7, r0
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	212f      	movs	r1, #47	; 0x2f
 80088e0:	5c52      	ldrb	r2, [r2, r1]
 80088e2:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80088e4:	197b      	adds	r3, r7, r5
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00c      	beq.n	8008906 <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80088ec:	197b      	adds	r3, r7, r5
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	d131      	bne.n	8008958 <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80088f4:	183b      	adds	r3, r7, r0
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2204      	movs	r2, #4
 80088fa:	4013      	ands	r3, r2
 80088fc:	d12c      	bne.n	8008958 <follow_path+0x100>
 80088fe:	197b      	adds	r3, r7, r5
 8008900:	2205      	movs	r2, #5
 8008902:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8008904:	e028      	b.n	8008958 <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008906:	230b      	movs	r3, #11
 8008908:	18fb      	adds	r3, r7, r3
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2204      	movs	r2, #4
 800890e:	4013      	ands	r3, r2
 8008910:	d124      	bne.n	800895c <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	799b      	ldrb	r3, [r3, #6]
 8008916:	001a      	movs	r2, r3
 8008918:	2310      	movs	r3, #16
 800891a:	4013      	ands	r3, r2
 800891c:	d104      	bne.n	8008928 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 800891e:	2317      	movs	r3, #23
 8008920:	18fb      	adds	r3, r7, r3
 8008922:	2205      	movs	r2, #5
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e01a      	b.n	800895e <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3338      	adds	r3, #56	; 0x38
 800892c:	001c      	movs	r4, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	695a      	ldr	r2, [r3, #20]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	899b      	ldrh	r3, [r3, #12]
 8008936:	0019      	movs	r1, r3
 8008938:	0010      	movs	r0, r2
 800893a:	f7f7 fc87 	bl	800024c <__aeabi_uidivmod>
 800893e:	000b      	movs	r3, r1
 8008940:	18e2      	adds	r2, r4, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	0011      	movs	r1, r2
 8008946:	0018      	movs	r0, r3
 8008948:	f7ff f987 	bl	8007c5a <ld_clust>
 800894c:	0002      	movs	r2, r0
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008952:	e7ac      	b.n	80088ae <follow_path+0x56>
			if (res != FR_OK) break;
 8008954:	46c0      	nop			; (mov r8, r8)
 8008956:	e002      	b.n	800895e <follow_path+0x106>
				break;
 8008958:	46c0      	nop			; (mov r8, r8)
 800895a:	e000      	b.n	800895e <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800895c:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 800895e:	2317      	movs	r3, #23
 8008960:	18fb      	adds	r3, r7, r3
 8008962:	781b      	ldrb	r3, [r3, #0]
}
 8008964:	0018      	movs	r0, r3
 8008966:	46bd      	mov	sp, r7
 8008968:	b006      	add	sp, #24
 800896a:	bdb0      	pop	{r4, r5, r7, pc}

0800896c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008974:	2301      	movs	r3, #1
 8008976:	425b      	negs	r3, r3
 8008978:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d031      	beq.n	80089e6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	e002      	b.n	8008990 <get_ldnumber+0x24>
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	3301      	adds	r3, #1
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	2b1f      	cmp	r3, #31
 8008996:	d903      	bls.n	80089a0 <get_ldnumber+0x34>
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	2b3a      	cmp	r3, #58	; 0x3a
 800899e:	d1f4      	bne.n	800898a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b3a      	cmp	r3, #58	; 0x3a
 80089a6:	d11c      	bne.n	80089e2 <get_ldnumber+0x76>
			tp = *path;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	60fa      	str	r2, [r7, #12]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	3b30      	subs	r3, #48	; 0x30
 80089b8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b09      	cmp	r3, #9
 80089be:	d80e      	bhi.n	80089de <get_ldnumber+0x72>
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d10a      	bne.n	80089de <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d107      	bne.n	80089de <get_ldnumber+0x72>
					vol = (int)i;
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	3301      	adds	r3, #1
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	e002      	b.n	80089e8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80089e2:	2300      	movs	r3, #0
 80089e4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80089e6:	693b      	ldr	r3, [r7, #16]
}
 80089e8:	0018      	movs	r0, r3
 80089ea:	46bd      	mov	sp, r7
 80089ec:	b006      	add	sp, #24
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	70da      	strb	r2, [r3, #3]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	4252      	negs	r2, r2
 8008a06:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	0011      	movs	r1, r2
 8008a0e:	0018      	movs	r0, r3
 8008a10:	f7fe fb36 	bl	8007080 <move_window>
 8008a14:	1e03      	subs	r3, r0, #0
 8008a16:	d001      	beq.n	8008a1c <check_fs+0x2c>
 8008a18:	2304      	movs	r3, #4
 8008a1a:	e037      	b.n	8008a8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3338      	adds	r3, #56	; 0x38
 8008a20:	33ff      	adds	r3, #255	; 0xff
 8008a22:	33ff      	adds	r3, #255	; 0xff
 8008a24:	0018      	movs	r0, r3
 8008a26:	f7fe f87f 	bl	8006b28 <ld_word>
 8008a2a:	0003      	movs	r3, r0
 8008a2c:	001a      	movs	r2, r3
 8008a2e:	4b19      	ldr	r3, [pc, #100]	; (8008a94 <check_fs+0xa4>)
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d001      	beq.n	8008a38 <check_fs+0x48>
 8008a34:	2303      	movs	r3, #3
 8008a36:	e029      	b.n	8008a8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2238      	movs	r2, #56	; 0x38
 8008a3c:	5c9b      	ldrb	r3, [r3, r2]
 8008a3e:	2be9      	cmp	r3, #233	; 0xe9
 8008a40:	d009      	beq.n	8008a56 <check_fs+0x66>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2238      	movs	r2, #56	; 0x38
 8008a46:	5c9b      	ldrb	r3, [r3, r2]
 8008a48:	2beb      	cmp	r3, #235	; 0xeb
 8008a4a:	d11e      	bne.n	8008a8a <check_fs+0x9a>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	223a      	movs	r2, #58	; 0x3a
 8008a50:	5c9b      	ldrb	r3, [r3, r2]
 8008a52:	2b90      	cmp	r3, #144	; 0x90
 8008a54:	d119      	bne.n	8008a8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3338      	adds	r3, #56	; 0x38
 8008a5a:	3336      	adds	r3, #54	; 0x36
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f7fe f87e 	bl	8006b5e <ld_dword>
 8008a62:	0003      	movs	r3, r0
 8008a64:	021b      	lsls	r3, r3, #8
 8008a66:	0a1b      	lsrs	r3, r3, #8
 8008a68:	4a0b      	ldr	r2, [pc, #44]	; (8008a98 <check_fs+0xa8>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d101      	bne.n	8008a72 <check_fs+0x82>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e00c      	b.n	8008a8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3338      	adds	r3, #56	; 0x38
 8008a76:	3352      	adds	r3, #82	; 0x52
 8008a78:	0018      	movs	r0, r3
 8008a7a:	f7fe f870 	bl	8006b5e <ld_dword>
 8008a7e:	0003      	movs	r3, r0
 8008a80:	4a06      	ldr	r2, [pc, #24]	; (8008a9c <check_fs+0xac>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d101      	bne.n	8008a8a <check_fs+0x9a>
 8008a86:	2300      	movs	r3, #0
 8008a88:	e000      	b.n	8008a8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008a8a:	2302      	movs	r3, #2
}
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	b002      	add	sp, #8
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	0000aa55 	.word	0x0000aa55
 8008a98:	00544146 	.word	0x00544146
 8008a9c:	33544146 	.word	0x33544146

08008aa0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008aa0:	b5b0      	push	{r4, r5, r7, lr}
 8008aa2:	b096      	sub	sp, #88	; 0x58
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	1dfb      	adds	r3, r7, #7
 8008aac:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	f7ff ff58 	bl	800896c <get_ldnumber>
 8008abc:	0003      	movs	r3, r0
 8008abe:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	da01      	bge.n	8008aca <find_volume+0x2a>
 8008ac6:	230b      	movs	r3, #11
 8008ac8:	e283      	b.n	8008fd2 <find_volume+0x532>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008aca:	4bc2      	ldr	r3, [pc, #776]	; (8008dd4 <find_volume+0x334>)
 8008acc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ace:	0092      	lsls	r2, r2, #2
 8008ad0:	58d3      	ldr	r3, [r2, r3]
 8008ad2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <find_volume+0x3e>
 8008ada:	230c      	movs	r3, #12
 8008adc:	e279      	b.n	8008fd2 <find_volume+0x532>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ae2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008ae4:	1dfb      	adds	r3, r7, #7
 8008ae6:	1dfa      	adds	r2, r7, #7
 8008ae8:	7812      	ldrb	r2, [r2, #0]
 8008aea:	2101      	movs	r1, #1
 8008aec:	438a      	bics	r2, r1
 8008aee:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01b      	beq.n	8008b30 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	785b      	ldrb	r3, [r3, #1]
 8008afc:	2537      	movs	r5, #55	; 0x37
 8008afe:	197c      	adds	r4, r7, r5
 8008b00:	0018      	movs	r0, r3
 8008b02:	f7fd ff47 	bl	8006994 <disk_status>
 8008b06:	0003      	movs	r3, r0
 8008b08:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008b0a:	0029      	movs	r1, r5
 8008b0c:	187b      	adds	r3, r7, r1
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2201      	movs	r2, #1
 8008b12:	4013      	ands	r3, r2
 8008b14:	d10c      	bne.n	8008b30 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008b16:	1dfb      	adds	r3, r7, #7
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d006      	beq.n	8008b2c <find_volume+0x8c>
 8008b1e:	187b      	adds	r3, r7, r1
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	2204      	movs	r2, #4
 8008b24:	4013      	ands	r3, r2
 8008b26:	d001      	beq.n	8008b2c <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8008b28:	230a      	movs	r3, #10
 8008b2a:	e252      	b.n	8008fd2 <find_volume+0x532>
			}
			return FR_OK;				/* The file system object is valid */
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e250      	b.n	8008fd2 <find_volume+0x532>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	2200      	movs	r2, #0
 8008b34:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b40:	785b      	ldrb	r3, [r3, #1]
 8008b42:	2537      	movs	r5, #55	; 0x37
 8008b44:	197c      	adds	r4, r7, r5
 8008b46:	0018      	movs	r0, r3
 8008b48:	f7fd ff46 	bl	80069d8 <disk_initialize>
 8008b4c:	0003      	movs	r3, r0
 8008b4e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008b50:	197b      	adds	r3, r7, r5
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2201      	movs	r2, #1
 8008b56:	4013      	ands	r3, r2
 8008b58:	d001      	beq.n	8008b5e <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e239      	b.n	8008fd2 <find_volume+0x532>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008b5e:	1dfb      	adds	r3, r7, #7
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d007      	beq.n	8008b76 <find_volume+0xd6>
 8008b66:	2337      	movs	r3, #55	; 0x37
 8008b68:	18fb      	adds	r3, r7, r3
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	2204      	movs	r2, #4
 8008b6e:	4013      	ands	r3, r2
 8008b70:	d001      	beq.n	8008b76 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8008b72:	230a      	movs	r3, #10
 8008b74:	e22d      	b.n	8008fd2 <find_volume+0x532>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	7858      	ldrb	r0, [r3, #1]
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	001a      	movs	r2, r3
 8008b80:	2102      	movs	r1, #2
 8008b82:	f7fd ffa9 	bl	8006ad8 <disk_ioctl>
 8008b86:	1e03      	subs	r3, r0, #0
 8008b88:	d001      	beq.n	8008b8e <find_volume+0xee>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e221      	b.n	8008fd2 <find_volume+0x532>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b90:	899a      	ldrh	r2, [r3, #12]
 8008b92:	2380      	movs	r3, #128	; 0x80
 8008b94:	015b      	lsls	r3, r3, #5
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d80d      	bhi.n	8008bb6 <find_volume+0x116>
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9c:	899a      	ldrh	r2, [r3, #12]
 8008b9e:	2380      	movs	r3, #128	; 0x80
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d307      	bcc.n	8008bb6 <find_volume+0x116>
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	899b      	ldrh	r3, [r3, #12]
 8008baa:	001a      	movs	r2, r3
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	899b      	ldrh	r3, [r3, #12]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	d001      	beq.n	8008bba <find_volume+0x11a>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e20b      	b.n	8008fd2 <find_volume+0x532>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008bbe:	2557      	movs	r5, #87	; 0x57
 8008bc0:	197c      	adds	r4, r7, r5
 8008bc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	0011      	movs	r1, r2
 8008bc8:	0018      	movs	r0, r3
 8008bca:	f7ff ff11 	bl	80089f0 <check_fs>
 8008bce:	0003      	movs	r3, r0
 8008bd0:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008bd2:	197b      	adds	r3, r7, r5
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d14b      	bne.n	8008c72 <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008bda:	2300      	movs	r3, #0
 8008bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8008bde:	e01d      	b.n	8008c1c <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be2:	3338      	adds	r3, #56	; 0x38
 8008be4:	001a      	movs	r2, r3
 8008be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be8:	011b      	lsls	r3, r3, #4
 8008bea:	33bf      	adds	r3, #191	; 0xbf
 8008bec:	33ff      	adds	r3, #255	; 0xff
 8008bee:	18d3      	adds	r3, r2, r3
 8008bf0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d006      	beq.n	8008c0a <find_volume+0x16a>
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	3308      	adds	r3, #8
 8008c00:	0018      	movs	r0, r3
 8008c02:	f7fd ffac 	bl	8006b5e <ld_dword>
 8008c06:	0003      	movs	r3, r0
 8008c08:	e000      	b.n	8008c0c <find_volume+0x16c>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	2214      	movs	r2, #20
 8008c0e:	18ba      	adds	r2, r7, r2
 8008c10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c12:	0089      	lsls	r1, r1, #2
 8008c14:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c18:	3301      	adds	r3, #1
 8008c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d9de      	bls.n	8008be0 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008c22:	2300      	movs	r3, #0
 8008c24:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <find_volume+0x192>
 8008c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008c32:	2314      	movs	r3, #20
 8008c34:	18fb      	adds	r3, r7, r3
 8008c36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c38:	0092      	lsls	r2, r2, #2
 8008c3a:	58d3      	ldr	r3, [r2, r3]
 8008c3c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d008      	beq.n	8008c56 <find_volume+0x1b6>
 8008c44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c48:	0011      	movs	r1, r2
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	f7ff fed0 	bl	80089f0 <check_fs>
 8008c50:	0003      	movs	r3, r0
 8008c52:	001a      	movs	r2, r3
 8008c54:	e000      	b.n	8008c58 <find_volume+0x1b8>
 8008c56:	2203      	movs	r2, #3
 8008c58:	2157      	movs	r1, #87	; 0x57
 8008c5a:	187b      	adds	r3, r7, r1
 8008c5c:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008c5e:	187b      	adds	r3, r7, r1
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d905      	bls.n	8008c72 <find_volume+0x1d2>
 8008c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c68:	3301      	adds	r3, #1
 8008c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d9df      	bls.n	8008c32 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008c72:	2357      	movs	r3, #87	; 0x57
 8008c74:	18fb      	adds	r3, r7, r3
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2b04      	cmp	r3, #4
 8008c7a:	d101      	bne.n	8008c80 <find_volume+0x1e0>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e1a8      	b.n	8008fd2 <find_volume+0x532>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008c80:	2357      	movs	r3, #87	; 0x57
 8008c82:	18fb      	adds	r3, r7, r3
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d901      	bls.n	8008c8e <find_volume+0x1ee>
 8008c8a:	230d      	movs	r3, #13
 8008c8c:	e1a1      	b.n	8008fd2 <find_volume+0x532>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	3338      	adds	r3, #56	; 0x38
 8008c92:	330b      	adds	r3, #11
 8008c94:	0018      	movs	r0, r3
 8008c96:	f7fd ff47 	bl	8006b28 <ld_word>
 8008c9a:	0003      	movs	r3, r0
 8008c9c:	001a      	movs	r2, r3
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca0:	899b      	ldrh	r3, [r3, #12]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d001      	beq.n	8008caa <find_volume+0x20a>
 8008ca6:	230d      	movs	r3, #13
 8008ca8:	e193      	b.n	8008fd2 <find_volume+0x532>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cac:	3338      	adds	r3, #56	; 0x38
 8008cae:	3316      	adds	r3, #22
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	f7fd ff39 	bl	8006b28 <ld_word>
 8008cb6:	0003      	movs	r3, r0
 8008cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d107      	bne.n	8008cd0 <find_volume+0x230>
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	3338      	adds	r3, #56	; 0x38
 8008cc4:	3324      	adds	r3, #36	; 0x24
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f7fd ff49 	bl	8006b5e <ld_dword>
 8008ccc:	0003      	movs	r3, r0
 8008cce:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cd4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd8:	2248      	movs	r2, #72	; 0x48
 8008cda:	5c9a      	ldrb	r2, [r3, r2]
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce2:	789b      	ldrb	r3, [r3, #2]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d005      	beq.n	8008cf4 <find_volume+0x254>
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	789b      	ldrb	r3, [r3, #2]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d001      	beq.n	8008cf4 <find_volume+0x254>
 8008cf0:	230d      	movs	r3, #13
 8008cf2:	e16e      	b.n	8008fd2 <find_volume+0x532>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf6:	789b      	ldrb	r3, [r3, #2]
 8008cf8:	001a      	movs	r2, r3
 8008cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cfc:	4353      	muls	r3, r2
 8008cfe:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d02:	2245      	movs	r2, #69	; 0x45
 8008d04:	5c9b      	ldrb	r3, [r3, r2]
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	895b      	ldrh	r3, [r3, #10]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d007      	beq.n	8008d24 <find_volume+0x284>
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	895b      	ldrh	r3, [r3, #10]
 8008d18:	001a      	movs	r2, r3
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	895b      	ldrh	r3, [r3, #10]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	4013      	ands	r3, r2
 8008d22:	d001      	beq.n	8008d28 <find_volume+0x288>
 8008d24:	230d      	movs	r3, #13
 8008d26:	e154      	b.n	8008fd2 <find_volume+0x532>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	3338      	adds	r3, #56	; 0x38
 8008d2c:	3311      	adds	r3, #17
 8008d2e:	0018      	movs	r0, r3
 8008d30:	f7fd fefa 	bl	8006b28 <ld_word>
 8008d34:	0003      	movs	r3, r0
 8008d36:	001a      	movs	r2, r3
 8008d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3e:	891a      	ldrh	r2, [r3, #8]
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	899b      	ldrh	r3, [r3, #12]
 8008d44:	095b      	lsrs	r3, r3, #5
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	0019      	movs	r1, r3
 8008d4a:	0010      	movs	r0, r2
 8008d4c:	f7f7 fa7e 	bl	800024c <__aeabi_uidivmod>
 8008d50:	000b      	movs	r3, r1
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <find_volume+0x2bc>
 8008d58:	230d      	movs	r3, #13
 8008d5a:	e13a      	b.n	8008fd2 <find_volume+0x532>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	3338      	adds	r3, #56	; 0x38
 8008d60:	3313      	adds	r3, #19
 8008d62:	0018      	movs	r0, r3
 8008d64:	f7fd fee0 	bl	8006b28 <ld_word>
 8008d68:	0003      	movs	r3, r0
 8008d6a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d107      	bne.n	8008d82 <find_volume+0x2e2>
 8008d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d74:	3338      	adds	r3, #56	; 0x38
 8008d76:	3320      	adds	r3, #32
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f7fd fef0 	bl	8006b5e <ld_dword>
 8008d7e:	0003      	movs	r3, r0
 8008d80:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	3338      	adds	r3, #56	; 0x38
 8008d86:	330e      	adds	r3, #14
 8008d88:	252e      	movs	r5, #46	; 0x2e
 8008d8a:	197c      	adds	r4, r7, r5
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	f7fd fecb 	bl	8006b28 <ld_word>
 8008d92:	0003      	movs	r3, r0
 8008d94:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008d96:	197b      	adds	r3, r7, r5
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <find_volume+0x302>
 8008d9e:	230d      	movs	r3, #13
 8008da0:	e117      	b.n	8008fd2 <find_volume+0x532>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008da2:	232e      	movs	r3, #46	; 0x2e
 8008da4:	18fb      	adds	r3, r7, r3
 8008da6:	881a      	ldrh	r2, [r3, #0]
 8008da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008daa:	18d4      	adds	r4, r2, r3
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	891a      	ldrh	r2, [r3, #8]
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	899b      	ldrh	r3, [r3, #12]
 8008db4:	095b      	lsrs	r3, r3, #5
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	0019      	movs	r1, r3
 8008dba:	0010      	movs	r0, r2
 8008dbc:	f7f7 f9c0 	bl	8000140 <__udivsi3>
 8008dc0:	0003      	movs	r3, r0
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	18e3      	adds	r3, r4, r3
 8008dc6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d203      	bcs.n	8008dd8 <find_volume+0x338>
 8008dd0:	230d      	movs	r3, #13
 8008dd2:	e0fe      	b.n	8008fd2 <find_volume+0x532>
 8008dd4:	200002f0 	.word	0x200002f0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	1ad2      	subs	r2, r2, r3
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	895b      	ldrh	r3, [r3, #10]
 8008de2:	0019      	movs	r1, r3
 8008de4:	0010      	movs	r0, r2
 8008de6:	f7f7 f9ab 	bl	8000140 <__udivsi3>
 8008dea:	0003      	movs	r3, r0
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <find_volume+0x358>
 8008df4:	230d      	movs	r3, #13
 8008df6:	e0ec      	b.n	8008fd2 <find_volume+0x532>
		fmt = FS_FAT32;
 8008df8:	2157      	movs	r1, #87	; 0x57
 8008dfa:	187b      	adds	r3, r7, r1
 8008dfc:	2203      	movs	r2, #3
 8008dfe:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	4a76      	ldr	r2, [pc, #472]	; (8008fdc <find_volume+0x53c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d802      	bhi.n	8008e0e <find_volume+0x36e>
 8008e08:	187b      	adds	r3, r7, r1
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	4a73      	ldr	r2, [pc, #460]	; (8008fe0 <find_volume+0x540>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d803      	bhi.n	8008e1e <find_volume+0x37e>
 8008e16:	2357      	movs	r3, #87	; 0x57
 8008e18:	18fb      	adds	r3, r7, r3
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	1c9a      	adds	r2, r3, #2
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e2a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e2c:	232e      	movs	r3, #46	; 0x2e
 8008e2e:	18fb      	adds	r3, r7, r3
 8008e30:	881a      	ldrh	r2, [r3, #0]
 8008e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e34:	18d2      	adds	r2, r2, r3
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008e3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3e:	18d2      	adds	r2, r2, r3
 8008e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e42:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008e44:	2357      	movs	r3, #87	; 0x57
 8008e46:	18fb      	adds	r3, r7, r3
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d11d      	bne.n	8008e8a <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e50:	3338      	adds	r3, #56	; 0x38
 8008e52:	332a      	adds	r3, #42	; 0x2a
 8008e54:	0018      	movs	r0, r3
 8008e56:	f7fd fe67 	bl	8006b28 <ld_word>
 8008e5a:	1e03      	subs	r3, r0, #0
 8008e5c:	d001      	beq.n	8008e62 <find_volume+0x3c2>
 8008e5e:	230d      	movs	r3, #13
 8008e60:	e0b7      	b.n	8008fd2 <find_volume+0x532>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	891b      	ldrh	r3, [r3, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <find_volume+0x3ce>
 8008e6a:	230d      	movs	r3, #13
 8008e6c:	e0b1      	b.n	8008fd2 <find_volume+0x532>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e70:	3338      	adds	r3, #56	; 0x38
 8008e72:	332c      	adds	r3, #44	; 0x2c
 8008e74:	0018      	movs	r0, r3
 8008e76:	f7fd fe72 	bl	8006b5e <ld_dword>
 8008e7a:	0002      	movs	r2, r0
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	647b      	str	r3, [r7, #68]	; 0x44
 8008e88:	e020      	b.n	8008ecc <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8c:	891b      	ldrh	r3, [r3, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <find_volume+0x3f6>
 8008e92:	230d      	movs	r3, #13
 8008e94:	e09d      	b.n	8008fd2 <find_volume+0x532>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e9c:	18d2      	adds	r2, r2, r3
 8008e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008ea2:	2357      	movs	r3, #87	; 0x57
 8008ea4:	18fb      	adds	r3, r7, r3
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d103      	bne.n	8008eb4 <find_volume+0x414>
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	e00a      	b.n	8008eca <find_volume+0x42a>
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb6:	69da      	ldr	r2, [r3, #28]
 8008eb8:	0013      	movs	r3, r2
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	189b      	adds	r3, r3, r2
 8008ebe:	085a      	lsrs	r2, r3, #1
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	400b      	ands	r3, r1
 8008ec8:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008eca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	6a1c      	ldr	r4, [r3, #32]
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	899b      	ldrh	r3, [r3, #12]
 8008ed4:	001a      	movs	r2, r3
 8008ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed8:	18d3      	adds	r3, r2, r3
 8008eda:	1e5a      	subs	r2, r3, #1
 8008edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ede:	899b      	ldrh	r3, [r3, #12]
 8008ee0:	0019      	movs	r1, r3
 8008ee2:	0010      	movs	r0, r2
 8008ee4:	f7f7 f92c 	bl	8000140 <__udivsi3>
 8008ee8:	0003      	movs	r3, r0
 8008eea:	429c      	cmp	r4, r3
 8008eec:	d201      	bcs.n	8008ef2 <find_volume+0x452>
 8008eee:	230d      	movs	r3, #13
 8008ef0:	e06f      	b.n	8008fd2 <find_volume+0x532>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	4252      	negs	r2, r2
 8008ef8:	619a      	str	r2, [r3, #24]
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efc:	699a      	ldr	r2, [r3, #24]
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f04:	2280      	movs	r2, #128	; 0x80
 8008f06:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008f08:	2357      	movs	r3, #87	; 0x57
 8008f0a:	18fb      	adds	r3, r7, r3
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d148      	bne.n	8008fa4 <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	3338      	adds	r3, #56	; 0x38
 8008f16:	3330      	adds	r3, #48	; 0x30
 8008f18:	0018      	movs	r0, r3
 8008f1a:	f7fd fe05 	bl	8006b28 <ld_word>
 8008f1e:	0003      	movs	r3, r0
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d13f      	bne.n	8008fa4 <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	0011      	movs	r1, r2
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	f7fe f8a7 	bl	8007080 <move_window>
 8008f32:	1e03      	subs	r3, r0, #0
 8008f34:	d136      	bne.n	8008fa4 <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 8008f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f38:	2200      	movs	r2, #0
 8008f3a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	3338      	adds	r3, #56	; 0x38
 8008f40:	33ff      	adds	r3, #255	; 0xff
 8008f42:	33ff      	adds	r3, #255	; 0xff
 8008f44:	0018      	movs	r0, r3
 8008f46:	f7fd fdef 	bl	8006b28 <ld_word>
 8008f4a:	0003      	movs	r3, r0
 8008f4c:	001a      	movs	r2, r3
 8008f4e:	4b25      	ldr	r3, [pc, #148]	; (8008fe4 <find_volume+0x544>)
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d127      	bne.n	8008fa4 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f56:	3338      	adds	r3, #56	; 0x38
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f7fd fe00 	bl	8006b5e <ld_dword>
 8008f5e:	0003      	movs	r3, r0
 8008f60:	4a21      	ldr	r2, [pc, #132]	; (8008fe8 <find_volume+0x548>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d11e      	bne.n	8008fa4 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f68:	3338      	adds	r3, #56	; 0x38
 8008f6a:	33e5      	adds	r3, #229	; 0xe5
 8008f6c:	33ff      	adds	r3, #255	; 0xff
 8008f6e:	0018      	movs	r0, r3
 8008f70:	f7fd fdf5 	bl	8006b5e <ld_dword>
 8008f74:	0003      	movs	r3, r0
 8008f76:	4a1d      	ldr	r2, [pc, #116]	; (8008fec <find_volume+0x54c>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d113      	bne.n	8008fa4 <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	3338      	adds	r3, #56	; 0x38
 8008f80:	33e9      	adds	r3, #233	; 0xe9
 8008f82:	33ff      	adds	r3, #255	; 0xff
 8008f84:	0018      	movs	r0, r3
 8008f86:	f7fd fdea 	bl	8006b5e <ld_dword>
 8008f8a:	0002      	movs	r2, r0
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	3338      	adds	r3, #56	; 0x38
 8008f94:	33ed      	adds	r3, #237	; 0xed
 8008f96:	33ff      	adds	r3, #255	; 0xff
 8008f98:	0018      	movs	r0, r3
 8008f9a:	f7fd fde0 	bl	8006b5e <ld_dword>
 8008f9e:	0002      	movs	r2, r0
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa6:	2257      	movs	r2, #87	; 0x57
 8008fa8:	18ba      	adds	r2, r7, r2
 8008faa:	7812      	ldrb	r2, [r2, #0]
 8008fac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008fae:	4b10      	ldr	r3, [pc, #64]	; (8008ff0 <find_volume+0x550>)
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	4b0e      	ldr	r3, [pc, #56]	; (8008ff0 <find_volume+0x550>)
 8008fb8:	801a      	strh	r2, [r3, #0]
 8008fba:	4b0d      	ldr	r3, [pc, #52]	; (8008ff0 <find_volume+0x550>)
 8008fbc:	881a      	ldrh	r2, [r3, #0]
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc4:	4a0b      	ldr	r2, [pc, #44]	; (8008ff4 <find_volume+0x554>)
 8008fc6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f7fd fff0 	bl	8006fb0 <clear_lock>
#endif
	return FR_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	b016      	add	sp, #88	; 0x58
 8008fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8008fda:	46c0      	nop			; (mov r8, r8)
 8008fdc:	0000fff5 	.word	0x0000fff5
 8008fe0:	00000ff5 	.word	0x00000ff5
 8008fe4:	0000aa55 	.word	0x0000aa55
 8008fe8:	41615252 	.word	0x41615252
 8008fec:	61417272 	.word	0x61417272
 8008ff0:	200002f4 	.word	0x200002f4
 8008ff4:	20000318 	.word	0x20000318

08008ff8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008ff8:	b590      	push	{r4, r7, lr}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009002:	240f      	movs	r4, #15
 8009004:	193b      	adds	r3, r7, r4
 8009006:	2209      	movs	r2, #9
 8009008:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d01d      	beq.n	800904c <validate+0x54>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d019      	beq.n	800904c <validate+0x54>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d014      	beq.n	800904c <validate+0x54>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	889a      	ldrh	r2, [r3, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	88db      	ldrh	r3, [r3, #6]
 800902c:	429a      	cmp	r2, r3
 800902e:	d10d      	bne.n	800904c <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	0018      	movs	r0, r3
 8009038:	f7fd fcac 	bl	8006994 <disk_status>
 800903c:	0003      	movs	r3, r0
 800903e:	001a      	movs	r2, r3
 8009040:	2301      	movs	r3, #1
 8009042:	4013      	ands	r3, r2
 8009044:	d102      	bne.n	800904c <validate+0x54>
			res = FR_OK;
 8009046:	193b      	adds	r3, r7, r4
 8009048:	2200      	movs	r2, #0
 800904a:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800904c:	230f      	movs	r3, #15
 800904e:	18fb      	adds	r3, r7, r3
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d102      	bne.n	800905c <validate+0x64>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	e000      	b.n	800905e <validate+0x66>
 800905c:	2200      	movs	r2, #0
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	601a      	str	r2, [r3, #0]
	return res;
 8009062:	230f      	movs	r3, #15
 8009064:	18fb      	adds	r3, r7, r3
 8009066:	781b      	ldrb	r3, [r3, #0]
}
 8009068:	0018      	movs	r0, r3
 800906a:	46bd      	mov	sp, r7
 800906c:	b005      	add	sp, #20
 800906e:	bd90      	pop	{r4, r7, pc}

08009070 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009070:	b5b0      	push	{r4, r5, r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	1dfb      	adds	r3, r7, #7
 800907c:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009082:	2310      	movs	r3, #16
 8009084:	18fb      	adds	r3, r7, r3
 8009086:	0018      	movs	r0, r3
 8009088:	f7ff fc70 	bl	800896c <get_ldnumber>
 800908c:	0003      	movs	r3, r0
 800908e:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	2b00      	cmp	r3, #0
 8009094:	da01      	bge.n	800909a <f_mount+0x2a>
 8009096:	230b      	movs	r3, #11
 8009098:	e030      	b.n	80090fc <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800909a:	4b1a      	ldr	r3, [pc, #104]	; (8009104 <f_mount+0x94>)
 800909c:	69fa      	ldr	r2, [r7, #28]
 800909e:	0092      	lsls	r2, r2, #2
 80090a0:	58d3      	ldr	r3, [r2, r3]
 80090a2:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d006      	beq.n	80090b8 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	0018      	movs	r0, r3
 80090ae:	f7fd ff7f 	bl	8006fb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	2200      	movs	r2, #0
 80090b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80090c4:	68f9      	ldr	r1, [r7, #12]
 80090c6:	4b0f      	ldr	r3, [pc, #60]	; (8009104 <f_mount+0x94>)
 80090c8:	69fa      	ldr	r2, [r7, #28]
 80090ca:	0092      	lsls	r2, r2, #2
 80090cc:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <f_mount+0x6c>
 80090d4:	1dfb      	adds	r3, r7, #7
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d001      	beq.n	80090e0 <f_mount+0x70>
 80090dc:	2300      	movs	r3, #0
 80090de:	e00d      	b.n	80090fc <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80090e0:	2517      	movs	r5, #23
 80090e2:	197c      	adds	r4, r7, r5
 80090e4:	230c      	movs	r3, #12
 80090e6:	18f9      	adds	r1, r7, r3
 80090e8:	2308      	movs	r3, #8
 80090ea:	18fb      	adds	r3, r7, r3
 80090ec:	2200      	movs	r2, #0
 80090ee:	0018      	movs	r0, r3
 80090f0:	f7ff fcd6 	bl	8008aa0 <find_volume>
 80090f4:	0003      	movs	r3, r0
 80090f6:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 80090f8:	197b      	adds	r3, r7, r5
 80090fa:	781b      	ldrb	r3, [r3, #0]
}
 80090fc:	0018      	movs	r0, r3
 80090fe:	46bd      	mov	sp, r7
 8009100:	b008      	add	sp, #32
 8009102:	bdb0      	pop	{r4, r5, r7, pc}
 8009104:	200002f0 	.word	0x200002f0

08009108 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800910a:	b09b      	sub	sp, #108	; 0x6c
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	1dfb      	adds	r3, r7, #7
 8009114:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d101      	bne.n	8009120 <f_open+0x18>
 800911c:	2309      	movs	r3, #9
 800911e:	e1f4      	b.n	800950a <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009120:	1dfb      	adds	r3, r7, #7
 8009122:	1dfa      	adds	r2, r7, #7
 8009124:	7812      	ldrb	r2, [r2, #0]
 8009126:	213f      	movs	r1, #63	; 0x3f
 8009128:	400a      	ands	r2, r1
 800912a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800912c:	2567      	movs	r5, #103	; 0x67
 800912e:	197c      	adds	r4, r7, r5
 8009130:	1dfb      	adds	r3, r7, #7
 8009132:	781a      	ldrb	r2, [r3, #0]
 8009134:	2314      	movs	r3, #20
 8009136:	18f9      	adds	r1, r7, r3
 8009138:	2308      	movs	r3, #8
 800913a:	18fb      	adds	r3, r7, r3
 800913c:	0018      	movs	r0, r3
 800913e:	f7ff fcaf 	bl	8008aa0 <find_volume>
 8009142:	0003      	movs	r3, r0
 8009144:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009146:	197b      	adds	r3, r7, r5
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d000      	beq.n	8009150 <f_open+0x48>
 800914e:	e1d1      	b.n	80094f4 <f_open+0x3ec>
		dj.obj.fs = fs;
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	2618      	movs	r6, #24
 8009154:	19bb      	adds	r3, r7, r6
 8009156:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	197c      	adds	r4, r7, r5
 800915c:	19bb      	adds	r3, r7, r6
 800915e:	0011      	movs	r1, r2
 8009160:	0018      	movs	r0, r3
 8009162:	f7ff fb79 	bl	8008858 <follow_path>
 8009166:	0003      	movs	r3, r0
 8009168:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800916a:	0029      	movs	r1, r5
 800916c:	197b      	adds	r3, r7, r5
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d11b      	bne.n	80091ac <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009174:	19bb      	adds	r3, r7, r6
 8009176:	222f      	movs	r2, #47	; 0x2f
 8009178:	5c9b      	ldrb	r3, [r3, r2]
 800917a:	b25b      	sxtb	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	da03      	bge.n	8009188 <f_open+0x80>
				res = FR_INVALID_NAME;
 8009180:	187b      	adds	r3, r7, r1
 8009182:	2206      	movs	r2, #6
 8009184:	701a      	strb	r2, [r3, #0]
 8009186:	e011      	b.n	80091ac <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009188:	1dfb      	adds	r3, r7, #7
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	2201      	movs	r2, #1
 800918e:	4393      	bics	r3, r2
 8009190:	1e5a      	subs	r2, r3, #1
 8009192:	4193      	sbcs	r3, r2
 8009194:	b2db      	uxtb	r3, r3
 8009196:	001a      	movs	r2, r3
 8009198:	2367      	movs	r3, #103	; 0x67
 800919a:	18fc      	adds	r4, r7, r3
 800919c:	2318      	movs	r3, #24
 800919e:	18fb      	adds	r3, r7, r3
 80091a0:	0011      	movs	r1, r2
 80091a2:	0018      	movs	r0, r3
 80091a4:	f7fd fdba 	bl	8006d1c <chk_lock>
 80091a8:	0003      	movs	r3, r0
 80091aa:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80091ac:	1dfb      	adds	r3, r7, #7
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	221c      	movs	r2, #28
 80091b2:	4013      	ands	r3, r2
 80091b4:	d100      	bne.n	80091b8 <f_open+0xb0>
 80091b6:	e096      	b.n	80092e6 <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 80091b8:	2267      	movs	r2, #103	; 0x67
 80091ba:	18bb      	adds	r3, r7, r2
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d01a      	beq.n	80091f8 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80091c2:	18bb      	adds	r3, r7, r2
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d10f      	bne.n	80091ea <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80091ca:	f7fd fdff 	bl	8006dcc <enq_lock>
 80091ce:	1e03      	subs	r3, r0, #0
 80091d0:	d007      	beq.n	80091e2 <f_open+0xda>
 80091d2:	2318      	movs	r3, #24
 80091d4:	18fb      	adds	r3, r7, r3
 80091d6:	0018      	movs	r0, r3
 80091d8:	f7ff f82a 	bl	8008230 <dir_register>
 80091dc:	0003      	movs	r3, r0
 80091de:	001a      	movs	r2, r3
 80091e0:	e000      	b.n	80091e4 <f_open+0xdc>
 80091e2:	2212      	movs	r2, #18
 80091e4:	2367      	movs	r3, #103	; 0x67
 80091e6:	18fb      	adds	r3, r7, r3
 80091e8:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80091ea:	1dfb      	adds	r3, r7, #7
 80091ec:	1dfa      	adds	r2, r7, #7
 80091ee:	7812      	ldrb	r2, [r2, #0]
 80091f0:	2108      	movs	r1, #8
 80091f2:	430a      	orrs	r2, r1
 80091f4:	701a      	strb	r2, [r3, #0]
 80091f6:	e014      	b.n	8009222 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80091f8:	2318      	movs	r3, #24
 80091fa:	18fb      	adds	r3, r7, r3
 80091fc:	799b      	ldrb	r3, [r3, #6]
 80091fe:	001a      	movs	r2, r3
 8009200:	2311      	movs	r3, #17
 8009202:	4013      	ands	r3, r2
 8009204:	d004      	beq.n	8009210 <f_open+0x108>
					res = FR_DENIED;
 8009206:	2367      	movs	r3, #103	; 0x67
 8009208:	18fb      	adds	r3, r7, r3
 800920a:	2207      	movs	r2, #7
 800920c:	701a      	strb	r2, [r3, #0]
 800920e:	e008      	b.n	8009222 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009210:	1dfb      	adds	r3, r7, #7
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2204      	movs	r2, #4
 8009216:	4013      	ands	r3, r2
 8009218:	d003      	beq.n	8009222 <f_open+0x11a>
 800921a:	2367      	movs	r3, #103	; 0x67
 800921c:	18fb      	adds	r3, r7, r3
 800921e:	2208      	movs	r2, #8
 8009220:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009222:	2467      	movs	r4, #103	; 0x67
 8009224:	193b      	adds	r3, r7, r4
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d000      	beq.n	800922e <f_open+0x126>
 800922c:	e07b      	b.n	8009326 <f_open+0x21e>
 800922e:	1dfb      	adds	r3, r7, #7
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2208      	movs	r2, #8
 8009234:	4013      	ands	r3, r2
 8009236:	d100      	bne.n	800923a <f_open+0x132>
 8009238:	e075      	b.n	8009326 <f_open+0x21e>
				dw = GET_FATTIME();
 800923a:	f7fd fb3f 	bl	80068bc <get_fattime>
 800923e:	0003      	movs	r3, r0
 8009240:	65bb      	str	r3, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009242:	2518      	movs	r5, #24
 8009244:	197b      	adds	r3, r7, r5
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	330e      	adds	r3, #14
 800924a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800924c:	0011      	movs	r1, r2
 800924e:	0018      	movs	r0, r3
 8009250:	f7fd fcc4 	bl	8006bdc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009254:	197b      	adds	r3, r7, r5
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	3316      	adds	r3, #22
 800925a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800925c:	0011      	movs	r1, r2
 800925e:	0018      	movs	r0, r3
 8009260:	f7fd fcbc 	bl	8006bdc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009264:	197b      	adds	r3, r7, r5
 8009266:	6a1b      	ldr	r3, [r3, #32]
 8009268:	330b      	adds	r3, #11
 800926a:	2220      	movs	r2, #32
 800926c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	197b      	adds	r3, r7, r5
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	0019      	movs	r1, r3
 8009276:	0010      	movs	r0, r2
 8009278:	f7fe fcef 	bl	8007c5a <ld_clust>
 800927c:	0003      	movs	r3, r0
 800927e:	657b      	str	r3, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009280:	6978      	ldr	r0, [r7, #20]
 8009282:	197b      	adds	r3, r7, r5
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	2200      	movs	r2, #0
 8009288:	0019      	movs	r1, r3
 800928a:	f7fe fd05 	bl	8007c98 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800928e:	197b      	adds	r3, r7, r5
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	331c      	adds	r3, #28
 8009294:	2100      	movs	r1, #0
 8009296:	0018      	movs	r0, r3
 8009298:	f7fd fca0 	bl	8006bdc <st_dword>
					fs->wflag = 1;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2201      	movs	r2, #1
 80092a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80092a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d03e      	beq.n	8009326 <f_open+0x21e>
						dw = fs->winsect;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80092ae:	0026      	movs	r6, r4
 80092b0:	193c      	adds	r4, r7, r4
 80092b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092b4:	197b      	adds	r3, r7, r5
 80092b6:	2200      	movs	r2, #0
 80092b8:	0018      	movs	r0, r3
 80092ba:	f7fe f9ba 	bl	8007632 <remove_chain>
 80092be:	0003      	movs	r3, r0
 80092c0:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 80092c2:	19bb      	adds	r3, r7, r6
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d12d      	bne.n	8009326 <f_open+0x21e>
							res = move_window(fs, dw);
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	19bc      	adds	r4, r7, r6
 80092ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092d0:	0011      	movs	r1, r2
 80092d2:	0018      	movs	r0, r3
 80092d4:	f7fd fed4 	bl	8007080 <move_window>
 80092d8:	0003      	movs	r3, r0
 80092da:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092e0:	3a01      	subs	r2, #1
 80092e2:	615a      	str	r2, [r3, #20]
 80092e4:	e01f      	b.n	8009326 <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80092e6:	2167      	movs	r1, #103	; 0x67
 80092e8:	187b      	adds	r3, r7, r1
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d11a      	bne.n	8009326 <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80092f0:	2318      	movs	r3, #24
 80092f2:	18fb      	adds	r3, r7, r3
 80092f4:	799b      	ldrb	r3, [r3, #6]
 80092f6:	001a      	movs	r2, r3
 80092f8:	2310      	movs	r3, #16
 80092fa:	4013      	ands	r3, r2
 80092fc:	d003      	beq.n	8009306 <f_open+0x1fe>
					res = FR_NO_FILE;
 80092fe:	187b      	adds	r3, r7, r1
 8009300:	2204      	movs	r2, #4
 8009302:	701a      	strb	r2, [r3, #0]
 8009304:	e00f      	b.n	8009326 <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009306:	1dfb      	adds	r3, r7, #7
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2202      	movs	r2, #2
 800930c:	4013      	ands	r3, r2
 800930e:	d00a      	beq.n	8009326 <f_open+0x21e>
 8009310:	2318      	movs	r3, #24
 8009312:	18fb      	adds	r3, r7, r3
 8009314:	799b      	ldrb	r3, [r3, #6]
 8009316:	001a      	movs	r2, r3
 8009318:	2301      	movs	r3, #1
 800931a:	4013      	ands	r3, r2
 800931c:	d003      	beq.n	8009326 <f_open+0x21e>
						res = FR_DENIED;
 800931e:	2367      	movs	r3, #103	; 0x67
 8009320:	18fb      	adds	r3, r7, r3
 8009322:	2207      	movs	r2, #7
 8009324:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 8009326:	2367      	movs	r3, #103	; 0x67
 8009328:	18fb      	adds	r3, r7, r3
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d12b      	bne.n	8009388 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009330:	1dfb      	adds	r3, r7, #7
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2208      	movs	r2, #8
 8009336:	4013      	ands	r3, r2
 8009338:	d005      	beq.n	8009346 <f_open+0x23e>
				mode |= FA_MODIFIED;
 800933a:	1dfb      	adds	r3, r7, #7
 800933c:	1dfa      	adds	r2, r7, #7
 800933e:	7812      	ldrb	r2, [r2, #0]
 8009340:	2140      	movs	r1, #64	; 0x40
 8009342:	430a      	orrs	r2, r1
 8009344:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800934e:	2118      	movs	r1, #24
 8009350:	187b      	adds	r3, r7, r1
 8009352:	6a1a      	ldr	r2, [r3, #32]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009358:	1dfb      	adds	r3, r7, #7
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2201      	movs	r2, #1
 800935e:	4393      	bics	r3, r2
 8009360:	1e5a      	subs	r2, r3, #1
 8009362:	4193      	sbcs	r3, r2
 8009364:	b2db      	uxtb	r3, r3
 8009366:	001a      	movs	r2, r3
 8009368:	187b      	adds	r3, r7, r1
 800936a:	0011      	movs	r1, r2
 800936c:	0018      	movs	r0, r3
 800936e:	f7fd fd4b 	bl	8006e08 <inc_lock>
 8009372:	0002      	movs	r2, r0
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d103      	bne.n	8009388 <f_open+0x280>
 8009380:	2367      	movs	r3, #103	; 0x67
 8009382:	18fb      	adds	r3, r7, r3
 8009384:	2202      	movs	r2, #2
 8009386:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009388:	2367      	movs	r3, #103	; 0x67
 800938a:	18fb      	adds	r3, r7, r3
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d000      	beq.n	8009394 <f_open+0x28c>
 8009392:	e0af      	b.n	80094f4 <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	2418      	movs	r4, #24
 8009398:	193b      	adds	r3, r7, r4
 800939a:	6a1b      	ldr	r3, [r3, #32]
 800939c:	0019      	movs	r1, r3
 800939e:	0010      	movs	r0, r2
 80093a0:	f7fe fc5b 	bl	8007c5a <ld_clust>
 80093a4:	0002      	movs	r2, r0
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80093aa:	193b      	adds	r3, r7, r4
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	331c      	adds	r3, #28
 80093b0:	0018      	movs	r0, r3
 80093b2:	f7fd fbd4 	bl	8006b5e <ld_dword>
 80093b6:	0002      	movs	r2, r0
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	88da      	ldrh	r2, [r3, #6]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	1dfa      	adds	r2, r7, #7
 80093d4:	7812      	ldrb	r2, [r2, #0]
 80093d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3330      	adds	r3, #48	; 0x30
 80093ee:	2280      	movs	r2, #128	; 0x80
 80093f0:	0152      	lsls	r2, r2, #5
 80093f2:	2100      	movs	r1, #0
 80093f4:	0018      	movs	r0, r3
 80093f6:	f7fd fc3a 	bl	8006c6e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80093fa:	1dfb      	adds	r3, r7, #7
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	2220      	movs	r2, #32
 8009400:	4013      	ands	r3, r2
 8009402:	d100      	bne.n	8009406 <f_open+0x2fe>
 8009404:	e076      	b.n	80094f4 <f_open+0x3ec>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d100      	bne.n	8009410 <f_open+0x308>
 800940e:	e071      	b.n	80094f4 <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	68da      	ldr	r2, [r3, #12]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	895b      	ldrh	r3, [r3, #10]
 800941c:	001a      	movs	r2, r3
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	899b      	ldrh	r3, [r3, #12]
 8009422:	4353      	muls	r3, r2
 8009424:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009432:	e019      	b.n	8009468 <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009438:	0011      	movs	r1, r2
 800943a:	0018      	movs	r0, r3
 800943c:	f7fd feee 	bl	800721c <get_fat>
 8009440:	0003      	movs	r3, r0
 8009442:	663b      	str	r3, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009446:	2b01      	cmp	r3, #1
 8009448:	d803      	bhi.n	8009452 <f_open+0x34a>
 800944a:	2367      	movs	r3, #103	; 0x67
 800944c:	18fb      	adds	r3, r7, r3
 800944e:	2202      	movs	r2, #2
 8009450:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009454:	3301      	adds	r3, #1
 8009456:	d103      	bne.n	8009460 <f_open+0x358>
 8009458:	2367      	movs	r3, #103	; 0x67
 800945a:	18fb      	adds	r3, r7, r3
 800945c:	2201      	movs	r2, #1
 800945e:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009460:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009468:	2367      	movs	r3, #103	; 0x67
 800946a:	18fb      	adds	r3, r7, r3
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d103      	bne.n	800947a <f_open+0x372>
 8009472:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009476:	429a      	cmp	r2, r3
 8009478:	d8dc      	bhi.n	8009434 <f_open+0x32c>
				}
				fp->clust = clst;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800947e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009480:	2467      	movs	r4, #103	; 0x67
 8009482:	193b      	adds	r3, r7, r4
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d134      	bne.n	80094f4 <f_open+0x3ec>
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	899b      	ldrh	r3, [r3, #12]
 800948e:	001a      	movs	r2, r3
 8009490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009492:	0011      	movs	r1, r2
 8009494:	0018      	movs	r0, r3
 8009496:	f7f6 fed9 	bl	800024c <__aeabi_uidivmod>
 800949a:	1e0b      	subs	r3, r1, #0
 800949c:	d02a      	beq.n	80094f4 <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094a2:	0011      	movs	r1, r2
 80094a4:	0018      	movs	r0, r3
 80094a6:	f7fd fe9d 	bl	80071e4 <clust2sect>
 80094aa:	0003      	movs	r3, r0
 80094ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d103      	bne.n	80094bc <f_open+0x3b4>
						res = FR_INT_ERR;
 80094b4:	193b      	adds	r3, r7, r4
 80094b6:	2202      	movs	r2, #2
 80094b8:	701a      	strb	r2, [r3, #0]
 80094ba:	e01b      	b.n	80094f4 <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	899b      	ldrh	r3, [r3, #12]
 80094c0:	0019      	movs	r1, r3
 80094c2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80094c4:	f7f6 fe3c 	bl	8000140 <__udivsi3>
 80094c8:	0003      	movs	r3, r0
 80094ca:	001a      	movs	r2, r3
 80094cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ce:	18d2      	adds	r2, r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	7858      	ldrb	r0, [r3, #1]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3330      	adds	r3, #48	; 0x30
 80094dc:	0019      	movs	r1, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6a1a      	ldr	r2, [r3, #32]
 80094e2:	2301      	movs	r3, #1
 80094e4:	f7fd faa8 	bl	8006a38 <disk_read>
 80094e8:	1e03      	subs	r3, r0, #0
 80094ea:	d003      	beq.n	80094f4 <f_open+0x3ec>
 80094ec:	2367      	movs	r3, #103	; 0x67
 80094ee:	18fb      	adds	r3, r7, r3
 80094f0:	2201      	movs	r2, #1
 80094f2:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80094f4:	2367      	movs	r3, #103	; 0x67
 80094f6:	18fb      	adds	r3, r7, r3
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d002      	beq.n	8009504 <f_open+0x3fc>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009504:	2367      	movs	r3, #103	; 0x67
 8009506:	18fb      	adds	r3, r7, r3
 8009508:	781b      	ldrb	r3, [r3, #0]
}
 800950a:	0018      	movs	r0, r3
 800950c:	46bd      	mov	sp, r7
 800950e:	b01b      	add	sp, #108	; 0x6c
 8009510:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009512 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009512:	b5b0      	push	{r4, r5, r7, lr}
 8009514:	b08c      	sub	sp, #48	; 0x30
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	607a      	str	r2, [r7, #4]
 800951e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	2200      	movs	r2, #0
 8009528:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	252f      	movs	r5, #47	; 0x2f
 800952e:	197c      	adds	r4, r7, r5
 8009530:	2210      	movs	r2, #16
 8009532:	18ba      	adds	r2, r7, r2
 8009534:	0011      	movs	r1, r2
 8009536:	0018      	movs	r0, r3
 8009538:	f7ff fd5e 	bl	8008ff8 <validate>
 800953c:	0003      	movs	r3, r0
 800953e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009540:	197b      	adds	r3, r7, r5
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d107      	bne.n	8009558 <f_write+0x46>
 8009548:	197b      	adds	r3, r7, r5
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	7d52      	ldrb	r2, [r2, #21]
 800954e:	701a      	strb	r2, [r3, #0]
 8009550:	197b      	adds	r3, r7, r5
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d003      	beq.n	8009560 <f_write+0x4e>
 8009558:	232f      	movs	r3, #47	; 0x2f
 800955a:	18fb      	adds	r3, r7, r3
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	e16f      	b.n	8009840 <f_write+0x32e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	7d1b      	ldrb	r3, [r3, #20]
 8009564:	001a      	movs	r2, r3
 8009566:	2302      	movs	r3, #2
 8009568:	4013      	ands	r3, r2
 800956a:	d101      	bne.n	8009570 <f_write+0x5e>
 800956c:	2307      	movs	r3, #7
 800956e:	e167      	b.n	8009840 <f_write+0x32e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	699a      	ldr	r2, [r3, #24]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	18d2      	adds	r2, r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	429a      	cmp	r2, r3
 800957e:	d300      	bcc.n	8009582 <f_write+0x70>
 8009580:	e150      	b.n	8009824 <f_write+0x312>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	43db      	mvns	r3, r3
 8009588:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800958a:	e14b      	b.n	8009824 <f_write+0x312>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	699a      	ldr	r2, [r3, #24]
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	899b      	ldrh	r3, [r3, #12]
 8009594:	0019      	movs	r1, r3
 8009596:	0010      	movs	r0, r2
 8009598:	f7f6 fe58 	bl	800024c <__aeabi_uidivmod>
 800959c:	1e0b      	subs	r3, r1, #0
 800959e:	d000      	beq.n	80095a2 <f_write+0x90>
 80095a0:	e0f4      	b.n	800978c <f_write+0x27a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	699a      	ldr	r2, [r3, #24]
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	899b      	ldrh	r3, [r3, #12]
 80095aa:	0019      	movs	r1, r3
 80095ac:	0010      	movs	r0, r2
 80095ae:	f7f6 fdc7 	bl	8000140 <__udivsi3>
 80095b2:	0003      	movs	r3, r0
 80095b4:	001a      	movs	r2, r3
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	895b      	ldrh	r3, [r3, #10]
 80095ba:	3b01      	subs	r3, #1
 80095bc:	4013      	ands	r3, r2
 80095be:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d146      	bne.n	8009654 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10d      	bne.n	80095ea <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d11e      	bne.n	8009618 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2100      	movs	r1, #0
 80095de:	0018      	movs	r0, r3
 80095e0:	f7fe f89a 	bl	8007718 <create_chain>
 80095e4:	0003      	movs	r3, r0
 80095e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80095e8:	e016      	b.n	8009618 <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d009      	beq.n	8009606 <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	699a      	ldr	r2, [r3, #24]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	0011      	movs	r1, r2
 80095fa:	0018      	movs	r0, r3
 80095fc:	f7fe f932 	bl	8007864 <clmt_clust>
 8009600:	0003      	movs	r3, r0
 8009602:	62bb      	str	r3, [r7, #40]	; 0x28
 8009604:	e008      	b.n	8009618 <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	0019      	movs	r1, r3
 800960e:	0010      	movs	r0, r2
 8009610:	f7fe f882 	bl	8007718 <create_chain>
 8009614:	0003      	movs	r3, r0
 8009616:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	2b00      	cmp	r3, #0
 800961c:	d100      	bne.n	8009620 <f_write+0x10e>
 800961e:	e106      	b.n	800982e <f_write+0x31c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	2b01      	cmp	r3, #1
 8009624:	d104      	bne.n	8009630 <f_write+0x11e>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2202      	movs	r2, #2
 800962a:	755a      	strb	r2, [r3, #21]
 800962c:	2302      	movs	r3, #2
 800962e:	e107      	b.n	8009840 <f_write+0x32e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	3301      	adds	r3, #1
 8009634:	d104      	bne.n	8009640 <f_write+0x12e>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2201      	movs	r2, #1
 800963a:	755a      	strb	r2, [r3, #21]
 800963c:	2301      	movs	r3, #1
 800963e:	e0ff      	b.n	8009840 <f_write+0x32e>
				fp->clust = clst;			/* Update current cluster */
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009644:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d102      	bne.n	8009654 <f_write+0x142>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009652:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	7d1b      	ldrb	r3, [r3, #20]
 8009658:	b25b      	sxtb	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	da17      	bge.n	800968e <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	7858      	ldrb	r0, [r3, #1]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3330      	adds	r3, #48	; 0x30
 8009666:	0019      	movs	r1, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6a1a      	ldr	r2, [r3, #32]
 800966c:	2301      	movs	r3, #1
 800966e:	f7fd fa0b 	bl	8006a88 <disk_write>
 8009672:	1e03      	subs	r3, r0, #0
 8009674:	d004      	beq.n	8009680 <f_write+0x16e>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2201      	movs	r2, #1
 800967a:	755a      	strb	r2, [r3, #21]
 800967c:	2301      	movs	r3, #1
 800967e:	e0df      	b.n	8009840 <f_write+0x32e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	7d1b      	ldrb	r3, [r3, #20]
 8009684:	227f      	movs	r2, #127	; 0x7f
 8009686:	4013      	ands	r3, r2
 8009688:	b2da      	uxtb	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	0019      	movs	r1, r3
 8009696:	0010      	movs	r0, r2
 8009698:	f7fd fda4 	bl	80071e4 <clust2sect>
 800969c:	0003      	movs	r3, r0
 800969e:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d104      	bne.n	80096b0 <f_write+0x19e>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2202      	movs	r2, #2
 80096aa:	755a      	strb	r2, [r3, #21]
 80096ac:	2302      	movs	r3, #2
 80096ae:	e0c7      	b.n	8009840 <f_write+0x32e>
			sect += csect;
 80096b0:	697a      	ldr	r2, [r7, #20]
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	18d3      	adds	r3, r2, r3
 80096b6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	899b      	ldrh	r3, [r3, #12]
 80096bc:	0019      	movs	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7f6 fd3e 	bl	8000140 <__udivsi3>
 80096c4:	0003      	movs	r3, r0
 80096c6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d040      	beq.n	8009750 <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	18d3      	adds	r3, r2, r3
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	8952      	ldrh	r2, [r2, #10]
 80096d8:	4293      	cmp	r3, r2
 80096da:	d905      	bls.n	80096e8 <f_write+0x1d6>
					cc = fs->csize - csect;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	895b      	ldrh	r3, [r3, #10]
 80096e0:	001a      	movs	r2, r3
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	7858      	ldrb	r0, [r3, #1]
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	69f9      	ldr	r1, [r7, #28]
 80096f2:	f7fd f9c9 	bl	8006a88 <disk_write>
 80096f6:	1e03      	subs	r3, r0, #0
 80096f8:	d004      	beq.n	8009704 <f_write+0x1f2>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	755a      	strb	r2, [r3, #21]
 8009700:	2301      	movs	r3, #1
 8009702:	e09d      	b.n	8009840 <f_write+0x32e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6a1a      	ldr	r2, [r3, #32]
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	6a3a      	ldr	r2, [r7, #32]
 800970e:	429a      	cmp	r2, r3
 8009710:	d917      	bls.n	8009742 <f_write+0x230>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3330      	adds	r3, #48	; 0x30
 8009716:	0018      	movs	r0, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6a1a      	ldr	r2, [r3, #32]
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	8992      	ldrh	r2, [r2, #12]
 8009724:	4353      	muls	r3, r2
 8009726:	69fa      	ldr	r2, [r7, #28]
 8009728:	18d1      	adds	r1, r2, r3
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	899b      	ldrh	r3, [r3, #12]
 800972e:	001a      	movs	r2, r3
 8009730:	f7fd fa7e 	bl	8006c30 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	7d1b      	ldrb	r3, [r3, #20]
 8009738:	227f      	movs	r2, #127	; 0x7f
 800973a:	4013      	ands	r3, r2
 800973c:	b2da      	uxtb	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	899b      	ldrh	r3, [r3, #12]
 8009746:	001a      	movs	r2, r3
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	4353      	muls	r3, r2
 800974c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800974e:	e04b      	b.n	80097e8 <f_write+0x2d6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	429a      	cmp	r2, r3
 8009758:	d015      	beq.n	8009786 <f_write+0x274>
				fp->fptr < fp->obj.objsize &&
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009762:	429a      	cmp	r2, r3
 8009764:	d20f      	bcs.n	8009786 <f_write+0x274>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	7858      	ldrb	r0, [r3, #1]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3330      	adds	r3, #48	; 0x30
 800976e:	0019      	movs	r1, r3
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	2301      	movs	r3, #1
 8009774:	f7fd f960 	bl	8006a38 <disk_read>
 8009778:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 800977a:	d004      	beq.n	8009786 <f_write+0x274>
					ABORT(fs, FR_DISK_ERR);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2201      	movs	r2, #1
 8009780:	755a      	strb	r2, [r3, #21]
 8009782:	2301      	movs	r3, #1
 8009784:	e05c      	b.n	8009840 <f_write+0x32e>
			}
#endif
			fp->sect = sect;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	899b      	ldrh	r3, [r3, #12]
 8009790:	001c      	movs	r4, r3
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	699a      	ldr	r2, [r3, #24]
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	899b      	ldrh	r3, [r3, #12]
 800979a:	0019      	movs	r1, r3
 800979c:	0010      	movs	r0, r2
 800979e:	f7f6 fd55 	bl	800024c <__aeabi_uidivmod>
 80097a2:	000b      	movs	r3, r1
 80097a4:	1ae3      	subs	r3, r4, r3
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80097a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d901      	bls.n	80097b4 <f_write+0x2a2>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3330      	adds	r3, #48	; 0x30
 80097b8:	001c      	movs	r4, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	699a      	ldr	r2, [r3, #24]
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	899b      	ldrh	r3, [r3, #12]
 80097c2:	0019      	movs	r1, r3
 80097c4:	0010      	movs	r0, r2
 80097c6:	f7f6 fd41 	bl	800024c <__aeabi_uidivmod>
 80097ca:	000b      	movs	r3, r1
 80097cc:	18e3      	adds	r3, r4, r3
 80097ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d0:	69f9      	ldr	r1, [r7, #28]
 80097d2:	0018      	movs	r0, r3
 80097d4:	f7fd fa2c 	bl	8006c30 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	7d1b      	ldrb	r3, [r3, #20]
 80097dc:	2280      	movs	r2, #128	; 0x80
 80097de:	4252      	negs	r2, r2
 80097e0:	4313      	orrs	r3, r2
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80097e8:	69fa      	ldr	r2, [r7, #28]
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	18d3      	adds	r3, r2, r3
 80097ee:	61fb      	str	r3, [r7, #28]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	699a      	ldr	r2, [r3, #24]
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	18d2      	adds	r2, r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	619a      	str	r2, [r3, #24]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	68d9      	ldr	r1, [r3, #12]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	699a      	ldr	r2, [r3, #24]
 8009804:	000b      	movs	r3, r1
 8009806:	4293      	cmp	r3, r2
 8009808:	d200      	bcs.n	800980c <f_write+0x2fa>
 800980a:	0013      	movs	r3, r2
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	60d3      	str	r3, [r2, #12]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	18d2      	adds	r2, r2, r3
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d000      	beq.n	800982c <f_write+0x31a>
 800982a:	e6af      	b.n	800958c <f_write+0x7a>
 800982c:	e000      	b.n	8009830 <f_write+0x31e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800982e:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	7d1b      	ldrb	r3, [r3, #20]
 8009834:	2240      	movs	r2, #64	; 0x40
 8009836:	4313      	orrs	r3, r2
 8009838:	b2da      	uxtb	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800983e:	2300      	movs	r3, #0
}
 8009840:	0018      	movs	r0, r3
 8009842:	46bd      	mov	sp, r7
 8009844:	b00c      	add	sp, #48	; 0x30
 8009846:	bdb0      	pop	{r4, r5, r7, pc}

08009848 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009848:	b5b0      	push	{r4, r5, r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2517      	movs	r5, #23
 8009854:	197c      	adds	r4, r7, r5
 8009856:	2208      	movs	r2, #8
 8009858:	18ba      	adds	r2, r7, r2
 800985a:	0011      	movs	r1, r2
 800985c:	0018      	movs	r0, r3
 800985e:	f7ff fbcb 	bl	8008ff8 <validate>
 8009862:	0003      	movs	r3, r0
 8009864:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009866:	197b      	adds	r3, r7, r5
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d16e      	bne.n	800994c <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	7d1b      	ldrb	r3, [r3, #20]
 8009872:	001a      	movs	r2, r3
 8009874:	2340      	movs	r3, #64	; 0x40
 8009876:	4013      	ands	r3, r2
 8009878:	d068      	beq.n	800994c <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7d1b      	ldrb	r3, [r3, #20]
 800987e:	b25b      	sxtb	r3, r3
 8009880:	2b00      	cmp	r3, #0
 8009882:	da14      	bge.n	80098ae <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	7858      	ldrb	r0, [r3, #1]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3330      	adds	r3, #48	; 0x30
 800988c:	0019      	movs	r1, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a1a      	ldr	r2, [r3, #32]
 8009892:	2301      	movs	r3, #1
 8009894:	f7fd f8f8 	bl	8006a88 <disk_write>
 8009898:	1e03      	subs	r3, r0, #0
 800989a:	d001      	beq.n	80098a0 <f_sync+0x58>
 800989c:	2301      	movs	r3, #1
 800989e:	e058      	b.n	8009952 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	7d1b      	ldrb	r3, [r3, #20]
 80098a4:	227f      	movs	r2, #127	; 0x7f
 80098a6:	4013      	ands	r3, r2
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80098ae:	f7fd f805 	bl	80068bc <get_fattime>
 80098b2:	0003      	movs	r3, r0
 80098b4:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098bc:	2517      	movs	r5, #23
 80098be:	197c      	adds	r4, r7, r5
 80098c0:	0019      	movs	r1, r3
 80098c2:	0010      	movs	r0, r2
 80098c4:	f7fd fbdc 	bl	8007080 <move_window>
 80098c8:	0003      	movs	r3, r0
 80098ca:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 80098cc:	002c      	movs	r4, r5
 80098ce:	193b      	adds	r3, r7, r4
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d13a      	bne.n	800994c <f_sync+0x104>
					dir = fp->dir_ptr;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	330b      	adds	r3, #11
 80098e0:	781a      	ldrb	r2, [r3, #0]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	330b      	adds	r3, #11
 80098e6:	2120      	movs	r1, #32
 80098e8:	430a      	orrs	r2, r1
 80098ea:	b2d2      	uxtb	r2, r2
 80098ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6818      	ldr	r0, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	689a      	ldr	r2, [r3, #8]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	0019      	movs	r1, r3
 80098fa:	f7fe f9cd 	bl	8007c98 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	331c      	adds	r3, #28
 8009902:	001a      	movs	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	0019      	movs	r1, r3
 800990a:	0010      	movs	r0, r2
 800990c:	f7fd f966 	bl	8006bdc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	3316      	adds	r3, #22
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	0011      	movs	r1, r2
 8009918:	0018      	movs	r0, r3
 800991a:	f7fd f95f 	bl	8006bdc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3312      	adds	r3, #18
 8009922:	2100      	movs	r1, #0
 8009924:	0018      	movs	r0, r3
 8009926:	f7fd f93b 	bl	8006ba0 <st_word>
					fs->wflag = 1;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2201      	movs	r2, #1
 800992e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	193c      	adds	r4, r7, r4
 8009934:	0018      	movs	r0, r3
 8009936:	f7fd fbd9 	bl	80070ec <sync_fs>
 800993a:	0003      	movs	r3, r0
 800993c:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	7d1b      	ldrb	r3, [r3, #20]
 8009942:	2240      	movs	r2, #64	; 0x40
 8009944:	4393      	bics	r3, r2
 8009946:	b2da      	uxtb	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800994c:	2317      	movs	r3, #23
 800994e:	18fb      	adds	r3, r7, r3
 8009950:	781b      	ldrb	r3, [r3, #0]
}
 8009952:	0018      	movs	r0, r3
 8009954:	46bd      	mov	sp, r7
 8009956:	b006      	add	sp, #24
 8009958:	bdb0      	pop	{r4, r5, r7, pc}

0800995a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800995a:	b5b0      	push	{r4, r5, r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009962:	250f      	movs	r5, #15
 8009964:	197c      	adds	r4, r7, r5
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	0018      	movs	r0, r3
 800996a:	f7ff ff6d 	bl	8009848 <f_sync>
 800996e:	0003      	movs	r3, r0
 8009970:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8009972:	197b      	adds	r3, r7, r5
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d11c      	bne.n	80099b4 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	197c      	adds	r4, r7, r5
 800997e:	2208      	movs	r2, #8
 8009980:	18ba      	adds	r2, r7, r2
 8009982:	0011      	movs	r1, r2
 8009984:	0018      	movs	r0, r3
 8009986:	f7ff fb37 	bl	8008ff8 <validate>
 800998a:	0003      	movs	r3, r0
 800998c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800998e:	197b      	adds	r3, r7, r5
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10e      	bne.n	80099b4 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	197c      	adds	r4, r7, r5
 800999c:	0018      	movs	r0, r3
 800999e:	f7fd fabd 	bl	8006f1c <dec_lock>
 80099a2:	0003      	movs	r3, r0
 80099a4:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 80099a6:	197b      	adds	r3, r7, r5
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d102      	bne.n	80099b4 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80099b4:	230f      	movs	r3, #15
 80099b6:	18fb      	adds	r3, r7, r3
 80099b8:	781b      	ldrb	r3, [r3, #0]
}
 80099ba:	0018      	movs	r0, r3
 80099bc:	46bd      	mov	sp, r7
 80099be:	b004      	add	sp, #16
 80099c0:	bdb0      	pop	{r4, r5, r7, pc}

080099c2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	000a      	movs	r2, r1
 80099cc:	1cfb      	adds	r3, r7, #3
 80099ce:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80099d0:	1cfb      	adds	r3, r7, #3
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b0a      	cmp	r3, #10
 80099d6:	d104      	bne.n	80099e2 <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	210d      	movs	r1, #13
 80099dc:	0018      	movs	r0, r3
 80099de:	f7ff fff0 	bl	80099c2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	db26      	blt.n	8009a3c <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	60fa      	str	r2, [r7, #12]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	18d3      	adds	r3, r2, r3
 80099f8:	1cfa      	adds	r2, r7, #3
 80099fa:	7812      	ldrb	r2, [r2, #0]
 80099fc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2b3c      	cmp	r3, #60	; 0x3c
 8009a02:	dd12      	ble.n	8009a2a <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	330c      	adds	r3, #12
 8009a0c:	0019      	movs	r1, r3
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	2308      	movs	r3, #8
 8009a12:	18fb      	adds	r3, r7, r3
 8009a14:	f7ff fd7d 	bl	8009512 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d101      	bne.n	8009a24 <putc_bfd+0x62>
 8009a20:	2300      	movs	r3, #0
 8009a22:	e001      	b.n	8009a28 <putc_bfd+0x66>
 8009a24:	2301      	movs	r3, #1
 8009a26:	425b      	negs	r3, r3
 8009a28:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	609a      	str	r2, [r3, #8]
 8009a3a:	e000      	b.n	8009a3e <putc_bfd+0x7c>
	if (i < 0) return;
 8009a3c:	46c0      	nop			; (mov r8, r8)
}
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	b004      	add	sp, #16
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	db15      	blt.n	8009a80 <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6818      	ldr	r0, [r3, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	330c      	adds	r3, #12
 8009a5c:	0019      	movs	r1, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	001a      	movs	r2, r3
 8009a64:	230c      	movs	r3, #12
 8009a66:	18fb      	adds	r3, r7, r3
 8009a68:	f7ff fd53 	bl	8009512 <f_write>
 8009a6c:	1e03      	subs	r3, r0, #0
 8009a6e:	d107      	bne.n	8009a80 <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d102      	bne.n	8009a80 <putc_flush+0x3c>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	e001      	b.n	8009a84 <putc_flush+0x40>
	return EOF;
 8009a80:	2301      	movs	r3, #1
 8009a82:	425b      	negs	r3, r3
}
 8009a84:	0018      	movs	r0, r3
 8009a86:	46bd      	mov	sp, r7
 8009a88:	b004      	add	sp, #16
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	605a      	str	r2, [r3, #4]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685a      	ldr	r2, [r3, #4]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	609a      	str	r2, [r3, #8]
}
 8009aaa:	46c0      	nop			; (mov r8, r8)
 8009aac:	46bd      	mov	sp, r7
 8009aae:	b002      	add	sp, #8
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b096      	sub	sp, #88	; 0x58
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	230c      	movs	r3, #12
 8009ac0:	18fb      	adds	r3, r7, r3
 8009ac2:	0011      	movs	r1, r2
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f7ff ffe1 	bl	8009a8c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009aca:	e009      	b.n	8009ae0 <f_puts+0x2e>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	1c5a      	adds	r2, r3, #1
 8009ad0:	607a      	str	r2, [r7, #4]
 8009ad2:	781a      	ldrb	r2, [r3, #0]
 8009ad4:	230c      	movs	r3, #12
 8009ad6:	18fb      	adds	r3, r7, r3
 8009ad8:	0011      	movs	r1, r2
 8009ada:	0018      	movs	r0, r3
 8009adc:	f7ff ff71 	bl	80099c2 <putc_bfd>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1f1      	bne.n	8009acc <f_puts+0x1a>
	return putc_flush(&pb);
 8009ae8:	230c      	movs	r3, #12
 8009aea:	18fb      	adds	r3, r7, r3
 8009aec:	0018      	movs	r0, r3
 8009aee:	f7ff ffa9 	bl	8009a44 <putc_flush>
 8009af2:	0003      	movs	r3, r0
}
 8009af4:	0018      	movs	r0, r3
 8009af6:	46bd      	mov	sp, r7
 8009af8:	b016      	add	sp, #88	; 0x58
 8009afa:	bd80      	pop	{r7, pc}

08009afc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009afc:	b590      	push	{r4, r7, lr}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	1dfb      	adds	r3, r7, #7
 8009b08:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8009b0a:	2417      	movs	r4, #23
 8009b0c:	193b      	adds	r3, r7, r4
 8009b0e:	2201      	movs	r2, #1
 8009b10:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8009b12:	2016      	movs	r0, #22
 8009b14:	183b      	adds	r3, r7, r0
 8009b16:	2200      	movs	r2, #0
 8009b18:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8009b1a:	4b21      	ldr	r3, [pc, #132]	; (8009ba0 <FATFS_LinkDriverEx+0xa4>)
 8009b1c:	7a5b      	ldrb	r3, [r3, #9]
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d136      	bne.n	8009b92 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009b24:	4b1e      	ldr	r3, [pc, #120]	; (8009ba0 <FATFS_LinkDriverEx+0xa4>)
 8009b26:	7a5b      	ldrb	r3, [r3, #9]
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	001a      	movs	r2, r3
 8009b2c:	4b1c      	ldr	r3, [pc, #112]	; (8009ba0 <FATFS_LinkDriverEx+0xa4>)
 8009b2e:	2100      	movs	r1, #0
 8009b30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009b32:	4b1b      	ldr	r3, [pc, #108]	; (8009ba0 <FATFS_LinkDriverEx+0xa4>)
 8009b34:	7a5b      	ldrb	r3, [r3, #9]
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	4a19      	ldr	r2, [pc, #100]	; (8009ba0 <FATFS_LinkDriverEx+0xa4>)
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	18d3      	adds	r3, r2, r3
 8009b3e:	3304      	adds	r3, #4
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8009b44:	4b16      	ldr	r3, [pc, #88]	; (8009ba0 <FATFS_LinkDriverEx+0xa4>)
 8009b46:	7a5b      	ldrb	r3, [r3, #9]
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	001a      	movs	r2, r3
 8009b4c:	4b14      	ldr	r3, [pc, #80]	; (8009ba0 <FATFS_LinkDriverEx+0xa4>)
 8009b4e:	189b      	adds	r3, r3, r2
 8009b50:	1dfa      	adds	r2, r7, #7
 8009b52:	7812      	ldrb	r2, [r2, #0]
 8009b54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009b56:	4b12      	ldr	r3, [pc, #72]	; (8009ba0 <FATFS_LinkDriverEx+0xa4>)
 8009b58:	7a5b      	ldrb	r3, [r3, #9]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	b2d1      	uxtb	r1, r2
 8009b60:	4a0f      	ldr	r2, [pc, #60]	; (8009ba0 <FATFS_LinkDriverEx+0xa4>)
 8009b62:	7251      	strb	r1, [r2, #9]
 8009b64:	183a      	adds	r2, r7, r0
 8009b66:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8009b68:	183b      	adds	r3, r7, r0
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	3330      	adds	r3, #48	; 0x30
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	3301      	adds	r3, #1
 8009b78:	223a      	movs	r2, #58	; 0x3a
 8009b7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	3302      	adds	r3, #2
 8009b80:	222f      	movs	r2, #47	; 0x2f
 8009b82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	3303      	adds	r3, #3
 8009b88:	2200      	movs	r2, #0
 8009b8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b8c:	193b      	adds	r3, r7, r4
 8009b8e:	2200      	movs	r2, #0
 8009b90:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009b92:	2317      	movs	r3, #23
 8009b94:	18fb      	adds	r3, r7, r3
 8009b96:	781b      	ldrb	r3, [r3, #0]
}
 8009b98:	0018      	movs	r0, r3
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	b007      	add	sp, #28
 8009b9e:	bd90      	pop	{r4, r7, pc}
 8009ba0:	20000518 	.word	0x20000518

08009ba4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	0018      	movs	r0, r3
 8009bb6:	f7ff ffa1 	bl	8009afc <FATFS_LinkDriverEx>
 8009bba:	0003      	movs	r3, r0
}
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	b002      	add	sp, #8
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	0002      	movs	r2, r0
 8009bcc:	6039      	str	r1, [r7, #0]
 8009bce:	1dbb      	adds	r3, r7, #6
 8009bd0:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009bd2:	1dbb      	adds	r3, r7, #6
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8009bd8:	d805      	bhi.n	8009be6 <ff_convert+0x22>
		c = chr;
 8009bda:	230e      	movs	r3, #14
 8009bdc:	18fb      	adds	r3, r7, r3
 8009bde:	1dba      	adds	r2, r7, #6
 8009be0:	8812      	ldrh	r2, [r2, #0]
 8009be2:	801a      	strh	r2, [r3, #0]
 8009be4:	e037      	b.n	8009c56 <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d010      	beq.n	8009c0e <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009bec:	1dbb      	adds	r3, r7, #6
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	2bff      	cmp	r3, #255	; 0xff
 8009bf2:	d807      	bhi.n	8009c04 <ff_convert+0x40>
 8009bf4:	1dbb      	adds	r3, r7, #6
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	3b80      	subs	r3, #128	; 0x80
 8009bfa:	001a      	movs	r2, r3
 8009bfc:	4b19      	ldr	r3, [pc, #100]	; (8009c64 <ff_convert+0xa0>)
 8009bfe:	0052      	lsls	r2, r2, #1
 8009c00:	5ad2      	ldrh	r2, [r2, r3]
 8009c02:	e000      	b.n	8009c06 <ff_convert+0x42>
 8009c04:	2200      	movs	r2, #0
 8009c06:	230e      	movs	r3, #14
 8009c08:	18fb      	adds	r3, r7, r3
 8009c0a:	801a      	strh	r2, [r3, #0]
 8009c0c:	e023      	b.n	8009c56 <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009c0e:	230e      	movs	r3, #14
 8009c10:	18fb      	adds	r3, r7, r3
 8009c12:	2200      	movs	r2, #0
 8009c14:	801a      	strh	r2, [r3, #0]
 8009c16:	e00e      	b.n	8009c36 <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 8009c18:	210e      	movs	r1, #14
 8009c1a:	187b      	adds	r3, r7, r1
 8009c1c:	881a      	ldrh	r2, [r3, #0]
 8009c1e:	4b11      	ldr	r3, [pc, #68]	; (8009c64 <ff_convert+0xa0>)
 8009c20:	0052      	lsls	r2, r2, #1
 8009c22:	5ad3      	ldrh	r3, [r2, r3]
 8009c24:	1dba      	adds	r2, r7, #6
 8009c26:	8812      	ldrh	r2, [r2, #0]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d00a      	beq.n	8009c42 <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 8009c2c:	187b      	adds	r3, r7, r1
 8009c2e:	881a      	ldrh	r2, [r3, #0]
 8009c30:	187b      	adds	r3, r7, r1
 8009c32:	3201      	adds	r2, #1
 8009c34:	801a      	strh	r2, [r3, #0]
 8009c36:	230e      	movs	r3, #14
 8009c38:	18fb      	adds	r3, r7, r3
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8009c3e:	d9eb      	bls.n	8009c18 <ff_convert+0x54>
 8009c40:	e000      	b.n	8009c44 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 8009c42:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 8009c44:	210e      	movs	r1, #14
 8009c46:	187b      	adds	r3, r7, r1
 8009c48:	881b      	ldrh	r3, [r3, #0]
 8009c4a:	3380      	adds	r3, #128	; 0x80
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	187b      	adds	r3, r7, r1
 8009c50:	21ff      	movs	r1, #255	; 0xff
 8009c52:	400a      	ands	r2, r1
 8009c54:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 8009c56:	230e      	movs	r3, #14
 8009c58:	18fb      	adds	r3, r7, r3
 8009c5a:	881b      	ldrh	r3, [r3, #0]
}
 8009c5c:	0018      	movs	r0, r3
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	b004      	add	sp, #16
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	0800e994 	.word	0x0800e994

08009c68 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009c68:	b5b0      	push	{r4, r5, r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	0002      	movs	r2, r0
 8009c70:	1dbb      	adds	r3, r7, #6
 8009c72:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009c74:	1dbb      	adds	r3, r7, #6
 8009c76:	881a      	ldrh	r2, [r3, #0]
 8009c78:	2380      	movs	r3, #128	; 0x80
 8009c7a:	015b      	lsls	r3, r3, #5
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d201      	bcs.n	8009c84 <ff_wtoupper+0x1c>
 8009c80:	4b4d      	ldr	r3, [pc, #308]	; (8009db8 <ff_wtoupper+0x150>)
 8009c82:	e000      	b.n	8009c86 <ff_wtoupper+0x1e>
 8009c84:	4b4d      	ldr	r3, [pc, #308]	; (8009dbc <ff_wtoupper+0x154>)
 8009c86:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	1c9a      	adds	r2, r3, #2
 8009c8c:	617a      	str	r2, [r7, #20]
 8009c8e:	2412      	movs	r4, #18
 8009c90:	193a      	adds	r2, r7, r4
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 8009c96:	193b      	adds	r3, r7, r4
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d100      	bne.n	8009ca0 <ff_wtoupper+0x38>
 8009c9e:	e084      	b.n	8009daa <ff_wtoupper+0x142>
 8009ca0:	1dba      	adds	r2, r7, #6
 8009ca2:	193b      	adds	r3, r7, r4
 8009ca4:	8812      	ldrh	r2, [r2, #0]
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d200      	bcs.n	8009cae <ff_wtoupper+0x46>
 8009cac:	e07d      	b.n	8009daa <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	1c9a      	adds	r2, r3, #2
 8009cb2:	617a      	str	r2, [r7, #20]
 8009cb4:	2010      	movs	r0, #16
 8009cb6:	183a      	adds	r2, r7, r0
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	8013      	strh	r3, [r2, #0]
 8009cbc:	250e      	movs	r5, #14
 8009cbe:	197b      	adds	r3, r7, r5
 8009cc0:	183a      	adds	r2, r7, r0
 8009cc2:	8812      	ldrh	r2, [r2, #0]
 8009cc4:	0a12      	lsrs	r2, r2, #8
 8009cc6:	801a      	strh	r2, [r3, #0]
 8009cc8:	183b      	adds	r3, r7, r0
 8009cca:	183a      	adds	r2, r7, r0
 8009ccc:	8812      	ldrh	r2, [r2, #0]
 8009cce:	21ff      	movs	r1, #255	; 0xff
 8009cd0:	400a      	ands	r2, r1
 8009cd2:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 8009cd4:	1dbb      	adds	r3, r7, #6
 8009cd6:	881a      	ldrh	r2, [r3, #0]
 8009cd8:	193b      	adds	r3, r7, r4
 8009cda:	8819      	ldrh	r1, [r3, #0]
 8009cdc:	183b      	adds	r3, r7, r0
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	18cb      	adds	r3, r1, r3
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	da52      	bge.n	8009d8c <ff_wtoupper+0x124>
			switch (cmd) {
 8009ce6:	197b      	adds	r3, r7, r5
 8009ce8:	881b      	ldrh	r3, [r3, #0]
 8009cea:	2b08      	cmp	r3, #8
 8009cec:	d85c      	bhi.n	8009da8 <ff_wtoupper+0x140>
 8009cee:	009a      	lsls	r2, r3, #2
 8009cf0:	4b33      	ldr	r3, [pc, #204]	; (8009dc0 <ff_wtoupper+0x158>)
 8009cf2:	18d3      	adds	r3, r2, r3
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009cf8:	1dbb      	adds	r3, r7, #6
 8009cfa:	881a      	ldrh	r2, [r3, #0]
 8009cfc:	2312      	movs	r3, #18
 8009cfe:	18fb      	adds	r3, r7, r3
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	18d2      	adds	r2, r2, r3
 8009d0a:	1dbb      	adds	r3, r7, #6
 8009d0c:	8812      	ldrh	r2, [r2, #0]
 8009d0e:	801a      	strh	r2, [r3, #0]
 8009d10:	e03b      	b.n	8009d8a <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009d12:	1dba      	adds	r2, r7, #6
 8009d14:	2312      	movs	r3, #18
 8009d16:	18fb      	adds	r3, r7, r3
 8009d18:	8812      	ldrh	r2, [r2, #0]
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	2201      	movs	r2, #1
 8009d22:	4013      	ands	r3, r2
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	1dbb      	adds	r3, r7, #6
 8009d28:	1db9      	adds	r1, r7, #6
 8009d2a:	8809      	ldrh	r1, [r1, #0]
 8009d2c:	1a8a      	subs	r2, r1, r2
 8009d2e:	801a      	strh	r2, [r3, #0]
 8009d30:	e02b      	b.n	8009d8a <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009d32:	1dbb      	adds	r3, r7, #6
 8009d34:	1dba      	adds	r2, r7, #6
 8009d36:	8812      	ldrh	r2, [r2, #0]
 8009d38:	3a10      	subs	r2, #16
 8009d3a:	801a      	strh	r2, [r3, #0]
 8009d3c:	e025      	b.n	8009d8a <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009d3e:	1dbb      	adds	r3, r7, #6
 8009d40:	1dba      	adds	r2, r7, #6
 8009d42:	8812      	ldrh	r2, [r2, #0]
 8009d44:	3a20      	subs	r2, #32
 8009d46:	801a      	strh	r2, [r3, #0]
 8009d48:	e01f      	b.n	8009d8a <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009d4a:	1dbb      	adds	r3, r7, #6
 8009d4c:	1dba      	adds	r2, r7, #6
 8009d4e:	8812      	ldrh	r2, [r2, #0]
 8009d50:	3a30      	subs	r2, #48	; 0x30
 8009d52:	801a      	strh	r2, [r3, #0]
 8009d54:	e019      	b.n	8009d8a <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009d56:	1dbb      	adds	r3, r7, #6
 8009d58:	1dba      	adds	r2, r7, #6
 8009d5a:	8812      	ldrh	r2, [r2, #0]
 8009d5c:	3a1a      	subs	r2, #26
 8009d5e:	801a      	strh	r2, [r3, #0]
 8009d60:	e013      	b.n	8009d8a <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009d62:	1dbb      	adds	r3, r7, #6
 8009d64:	1dba      	adds	r2, r7, #6
 8009d66:	8812      	ldrh	r2, [r2, #0]
 8009d68:	3208      	adds	r2, #8
 8009d6a:	801a      	strh	r2, [r3, #0]
 8009d6c:	e00d      	b.n	8009d8a <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009d6e:	1dbb      	adds	r3, r7, #6
 8009d70:	1dba      	adds	r2, r7, #6
 8009d72:	8812      	ldrh	r2, [r2, #0]
 8009d74:	3a50      	subs	r2, #80	; 0x50
 8009d76:	801a      	strh	r2, [r3, #0]
 8009d78:	e007      	b.n	8009d8a <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009d7a:	1dbb      	adds	r3, r7, #6
 8009d7c:	1dba      	adds	r2, r7, #6
 8009d7e:	8812      	ldrh	r2, [r2, #0]
 8009d80:	4910      	ldr	r1, [pc, #64]	; (8009dc4 <ff_wtoupper+0x15c>)
 8009d82:	468c      	mov	ip, r1
 8009d84:	4462      	add	r2, ip
 8009d86:	801a      	strh	r2, [r3, #0]
 8009d88:	46c0      	nop			; (mov r8, r8)
			}
			break;
 8009d8a:	e00d      	b.n	8009da8 <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 8009d8c:	230e      	movs	r3, #14
 8009d8e:	18fb      	adds	r3, r7, r3
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d000      	beq.n	8009d98 <ff_wtoupper+0x130>
 8009d96:	e777      	b.n	8009c88 <ff_wtoupper+0x20>
 8009d98:	2310      	movs	r3, #16
 8009d9a:	18fb      	adds	r3, r7, r3
 8009d9c:	881b      	ldrh	r3, [r3, #0]
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	697a      	ldr	r2, [r7, #20]
 8009da2:	18d3      	adds	r3, r2, r3
 8009da4:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009da6:	e76f      	b.n	8009c88 <ff_wtoupper+0x20>
			break;
 8009da8:	46c0      	nop			; (mov r8, r8)
	}

	return chr;
 8009daa:	1dbb      	adds	r3, r7, #6
 8009dac:	881b      	ldrh	r3, [r3, #0]
}
 8009dae:	0018      	movs	r0, r3
 8009db0:	46bd      	mov	sp, r7
 8009db2:	b006      	add	sp, #24
 8009db4:	bdb0      	pop	{r4, r5, r7, pc}
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	0800eab8 	.word	0x0800eab8
 8009dbc:	0800ecac 	.word	0x0800ecac
 8009dc0:	0800ea94 	.word	0x0800ea94
 8009dc4:	ffffe3a0 	.word	0xffffe3a0

08009dc8 <__cvt>:
 8009dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dca:	001e      	movs	r6, r3
 8009dcc:	2300      	movs	r3, #0
 8009dce:	0014      	movs	r4, r2
 8009dd0:	b08b      	sub	sp, #44	; 0x2c
 8009dd2:	429e      	cmp	r6, r3
 8009dd4:	da04      	bge.n	8009de0 <__cvt+0x18>
 8009dd6:	2180      	movs	r1, #128	; 0x80
 8009dd8:	0609      	lsls	r1, r1, #24
 8009dda:	1873      	adds	r3, r6, r1
 8009ddc:	001e      	movs	r6, r3
 8009dde:	232d      	movs	r3, #45	; 0x2d
 8009de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009de2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009de4:	7013      	strb	r3, [r2, #0]
 8009de6:	2320      	movs	r3, #32
 8009de8:	2203      	movs	r2, #3
 8009dea:	439f      	bics	r7, r3
 8009dec:	2f46      	cmp	r7, #70	; 0x46
 8009dee:	d007      	beq.n	8009e00 <__cvt+0x38>
 8009df0:	003b      	movs	r3, r7
 8009df2:	3b45      	subs	r3, #69	; 0x45
 8009df4:	4259      	negs	r1, r3
 8009df6:	414b      	adcs	r3, r1
 8009df8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009dfa:	3a01      	subs	r2, #1
 8009dfc:	18cb      	adds	r3, r1, r3
 8009dfe:	9310      	str	r3, [sp, #64]	; 0x40
 8009e00:	ab09      	add	r3, sp, #36	; 0x24
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	ab08      	add	r3, sp, #32
 8009e06:	9303      	str	r3, [sp, #12]
 8009e08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e0a:	9200      	str	r2, [sp, #0]
 8009e0c:	9302      	str	r3, [sp, #8]
 8009e0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e10:	0022      	movs	r2, r4
 8009e12:	9301      	str	r3, [sp, #4]
 8009e14:	0033      	movs	r3, r6
 8009e16:	f001 f8e7 	bl	800afe8 <_dtoa_r>
 8009e1a:	0005      	movs	r5, r0
 8009e1c:	2f47      	cmp	r7, #71	; 0x47
 8009e1e:	d102      	bne.n	8009e26 <__cvt+0x5e>
 8009e20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e22:	07db      	lsls	r3, r3, #31
 8009e24:	d528      	bpl.n	8009e78 <__cvt+0xb0>
 8009e26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e28:	18eb      	adds	r3, r5, r3
 8009e2a:	9307      	str	r3, [sp, #28]
 8009e2c:	2f46      	cmp	r7, #70	; 0x46
 8009e2e:	d114      	bne.n	8009e5a <__cvt+0x92>
 8009e30:	782b      	ldrb	r3, [r5, #0]
 8009e32:	2b30      	cmp	r3, #48	; 0x30
 8009e34:	d10c      	bne.n	8009e50 <__cvt+0x88>
 8009e36:	2200      	movs	r2, #0
 8009e38:	2300      	movs	r3, #0
 8009e3a:	0020      	movs	r0, r4
 8009e3c:	0031      	movs	r1, r6
 8009e3e:	f7f6 fb05 	bl	800044c <__aeabi_dcmpeq>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d104      	bne.n	8009e50 <__cvt+0x88>
 8009e46:	2301      	movs	r3, #1
 8009e48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e4a:	1a9b      	subs	r3, r3, r2
 8009e4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e52:	9a07      	ldr	r2, [sp, #28]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	18d3      	adds	r3, r2, r3
 8009e58:	9307      	str	r3, [sp, #28]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	0020      	movs	r0, r4
 8009e60:	0031      	movs	r1, r6
 8009e62:	f7f6 faf3 	bl	800044c <__aeabi_dcmpeq>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d001      	beq.n	8009e6e <__cvt+0xa6>
 8009e6a:	9b07      	ldr	r3, [sp, #28]
 8009e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e6e:	2230      	movs	r2, #48	; 0x30
 8009e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e72:	9907      	ldr	r1, [sp, #28]
 8009e74:	428b      	cmp	r3, r1
 8009e76:	d306      	bcc.n	8009e86 <__cvt+0xbe>
 8009e78:	0028      	movs	r0, r5
 8009e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e7e:	1b5b      	subs	r3, r3, r5
 8009e80:	6013      	str	r3, [r2, #0]
 8009e82:	b00b      	add	sp, #44	; 0x2c
 8009e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e86:	1c59      	adds	r1, r3, #1
 8009e88:	9109      	str	r1, [sp, #36]	; 0x24
 8009e8a:	701a      	strb	r2, [r3, #0]
 8009e8c:	e7f0      	b.n	8009e70 <__cvt+0xa8>

08009e8e <__exponent>:
 8009e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e90:	1c83      	adds	r3, r0, #2
 8009e92:	b087      	sub	sp, #28
 8009e94:	9303      	str	r3, [sp, #12]
 8009e96:	0005      	movs	r5, r0
 8009e98:	000c      	movs	r4, r1
 8009e9a:	232b      	movs	r3, #43	; 0x2b
 8009e9c:	7002      	strb	r2, [r0, #0]
 8009e9e:	2900      	cmp	r1, #0
 8009ea0:	da01      	bge.n	8009ea6 <__exponent+0x18>
 8009ea2:	424c      	negs	r4, r1
 8009ea4:	3302      	adds	r3, #2
 8009ea6:	706b      	strb	r3, [r5, #1]
 8009ea8:	2c09      	cmp	r4, #9
 8009eaa:	dd2f      	ble.n	8009f0c <__exponent+0x7e>
 8009eac:	270a      	movs	r7, #10
 8009eae:	ab04      	add	r3, sp, #16
 8009eb0:	1dde      	adds	r6, r3, #7
 8009eb2:	0020      	movs	r0, r4
 8009eb4:	0039      	movs	r1, r7
 8009eb6:	9601      	str	r6, [sp, #4]
 8009eb8:	f7f6 fab2 	bl	8000420 <__aeabi_idivmod>
 8009ebc:	3e01      	subs	r6, #1
 8009ebe:	3130      	adds	r1, #48	; 0x30
 8009ec0:	0020      	movs	r0, r4
 8009ec2:	7031      	strb	r1, [r6, #0]
 8009ec4:	0039      	movs	r1, r7
 8009ec6:	9402      	str	r4, [sp, #8]
 8009ec8:	f7f6 f9c4 	bl	8000254 <__divsi3>
 8009ecc:	9b02      	ldr	r3, [sp, #8]
 8009ece:	0004      	movs	r4, r0
 8009ed0:	2b63      	cmp	r3, #99	; 0x63
 8009ed2:	dcee      	bgt.n	8009eb2 <__exponent+0x24>
 8009ed4:	9b01      	ldr	r3, [sp, #4]
 8009ed6:	3430      	adds	r4, #48	; 0x30
 8009ed8:	1e9a      	subs	r2, r3, #2
 8009eda:	0013      	movs	r3, r2
 8009edc:	9903      	ldr	r1, [sp, #12]
 8009ede:	7014      	strb	r4, [r2, #0]
 8009ee0:	a804      	add	r0, sp, #16
 8009ee2:	3007      	adds	r0, #7
 8009ee4:	4298      	cmp	r0, r3
 8009ee6:	d80c      	bhi.n	8009f02 <__exponent+0x74>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4282      	cmp	r2, r0
 8009eec:	d804      	bhi.n	8009ef8 <__exponent+0x6a>
 8009eee:	aa04      	add	r2, sp, #16
 8009ef0:	3309      	adds	r3, #9
 8009ef2:	189b      	adds	r3, r3, r2
 8009ef4:	9a01      	ldr	r2, [sp, #4]
 8009ef6:	1a9b      	subs	r3, r3, r2
 8009ef8:	9a03      	ldr	r2, [sp, #12]
 8009efa:	18d3      	adds	r3, r2, r3
 8009efc:	1b58      	subs	r0, r3, r5
 8009efe:	b007      	add	sp, #28
 8009f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f02:	7818      	ldrb	r0, [r3, #0]
 8009f04:	3301      	adds	r3, #1
 8009f06:	7008      	strb	r0, [r1, #0]
 8009f08:	3101      	adds	r1, #1
 8009f0a:	e7e9      	b.n	8009ee0 <__exponent+0x52>
 8009f0c:	2330      	movs	r3, #48	; 0x30
 8009f0e:	3430      	adds	r4, #48	; 0x30
 8009f10:	70ab      	strb	r3, [r5, #2]
 8009f12:	70ec      	strb	r4, [r5, #3]
 8009f14:	1d2b      	adds	r3, r5, #4
 8009f16:	e7f1      	b.n	8009efc <__exponent+0x6e>

08009f18 <_printf_float>:
 8009f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f1a:	b095      	sub	sp, #84	; 0x54
 8009f1c:	000c      	movs	r4, r1
 8009f1e:	9208      	str	r2, [sp, #32]
 8009f20:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009f22:	9309      	str	r3, [sp, #36]	; 0x24
 8009f24:	0007      	movs	r7, r0
 8009f26:	f000 ff41 	bl	800adac <_localeconv_r>
 8009f2a:	6803      	ldr	r3, [r0, #0]
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f30:	f7f6 f8ea 	bl	8000108 <strlen>
 8009f34:	2300      	movs	r3, #0
 8009f36:	9312      	str	r3, [sp, #72]	; 0x48
 8009f38:	7e23      	ldrb	r3, [r4, #24]
 8009f3a:	2207      	movs	r2, #7
 8009f3c:	930a      	str	r3, [sp, #40]	; 0x28
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	900d      	str	r0, [sp, #52]	; 0x34
 8009f42:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f46:	682b      	ldr	r3, [r5, #0]
 8009f48:	05c9      	lsls	r1, r1, #23
 8009f4a:	d547      	bpl.n	8009fdc <_printf_float+0xc4>
 8009f4c:	189b      	adds	r3, r3, r2
 8009f4e:	4393      	bics	r3, r2
 8009f50:	001a      	movs	r2, r3
 8009f52:	3208      	adds	r2, #8
 8009f54:	602a      	str	r2, [r5, #0]
 8009f56:	681e      	ldr	r6, [r3, #0]
 8009f58:	685d      	ldr	r5, [r3, #4]
 8009f5a:	0032      	movs	r2, r6
 8009f5c:	002b      	movs	r3, r5
 8009f5e:	64a2      	str	r2, [r4, #72]	; 0x48
 8009f60:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009f62:	2201      	movs	r2, #1
 8009f64:	006b      	lsls	r3, r5, #1
 8009f66:	085b      	lsrs	r3, r3, #1
 8009f68:	930e      	str	r3, [sp, #56]	; 0x38
 8009f6a:	0030      	movs	r0, r6
 8009f6c:	4bab      	ldr	r3, [pc, #684]	; (800a21c <_printf_float+0x304>)
 8009f6e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009f70:	4252      	negs	r2, r2
 8009f72:	f7f8 fcc3 	bl	80028fc <__aeabi_dcmpun>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d132      	bne.n	8009fe0 <_printf_float+0xc8>
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	0030      	movs	r0, r6
 8009f7e:	4ba7      	ldr	r3, [pc, #668]	; (800a21c <_printf_float+0x304>)
 8009f80:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009f82:	4252      	negs	r2, r2
 8009f84:	f7f6 fa72 	bl	800046c <__aeabi_dcmple>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d129      	bne.n	8009fe0 <_printf_float+0xc8>
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	2300      	movs	r3, #0
 8009f90:	0030      	movs	r0, r6
 8009f92:	0029      	movs	r1, r5
 8009f94:	f7f6 fa60 	bl	8000458 <__aeabi_dcmplt>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d003      	beq.n	8009fa4 <_printf_float+0x8c>
 8009f9c:	0023      	movs	r3, r4
 8009f9e:	222d      	movs	r2, #45	; 0x2d
 8009fa0:	3343      	adds	r3, #67	; 0x43
 8009fa2:	701a      	strb	r2, [r3, #0]
 8009fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa6:	4d9e      	ldr	r5, [pc, #632]	; (800a220 <_printf_float+0x308>)
 8009fa8:	2b47      	cmp	r3, #71	; 0x47
 8009faa:	d900      	bls.n	8009fae <_printf_float+0x96>
 8009fac:	4d9d      	ldr	r5, [pc, #628]	; (800a224 <_printf_float+0x30c>)
 8009fae:	2303      	movs	r3, #3
 8009fb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fb2:	6123      	str	r3, [r4, #16]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	439a      	bics	r2, r3
 8009fb8:	2300      	movs	r3, #0
 8009fba:	6022      	str	r2, [r4, #0]
 8009fbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc0:	0021      	movs	r1, r4
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	0038      	movs	r0, r7
 8009fc6:	9b08      	ldr	r3, [sp, #32]
 8009fc8:	aa13      	add	r2, sp, #76	; 0x4c
 8009fca:	f000 f9fb 	bl	800a3c4 <_printf_common>
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d000      	beq.n	8009fd4 <_printf_float+0xbc>
 8009fd2:	e0a3      	b.n	800a11c <_printf_float+0x204>
 8009fd4:	2001      	movs	r0, #1
 8009fd6:	4240      	negs	r0, r0
 8009fd8:	b015      	add	sp, #84	; 0x54
 8009fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fdc:	3307      	adds	r3, #7
 8009fde:	e7b6      	b.n	8009f4e <_printf_float+0x36>
 8009fe0:	0032      	movs	r2, r6
 8009fe2:	002b      	movs	r3, r5
 8009fe4:	0030      	movs	r0, r6
 8009fe6:	0029      	movs	r1, r5
 8009fe8:	f7f8 fc88 	bl	80028fc <__aeabi_dcmpun>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d00b      	beq.n	800a008 <_printf_float+0xf0>
 8009ff0:	2d00      	cmp	r5, #0
 8009ff2:	da03      	bge.n	8009ffc <_printf_float+0xe4>
 8009ff4:	0023      	movs	r3, r4
 8009ff6:	222d      	movs	r2, #45	; 0x2d
 8009ff8:	3343      	adds	r3, #67	; 0x43
 8009ffa:	701a      	strb	r2, [r3, #0]
 8009ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ffe:	4d8a      	ldr	r5, [pc, #552]	; (800a228 <_printf_float+0x310>)
 800a000:	2b47      	cmp	r3, #71	; 0x47
 800a002:	d9d4      	bls.n	8009fae <_printf_float+0x96>
 800a004:	4d89      	ldr	r5, [pc, #548]	; (800a22c <_printf_float+0x314>)
 800a006:	e7d2      	b.n	8009fae <_printf_float+0x96>
 800a008:	2220      	movs	r2, #32
 800a00a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a00c:	6863      	ldr	r3, [r4, #4]
 800a00e:	4391      	bics	r1, r2
 800a010:	910e      	str	r1, [sp, #56]	; 0x38
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	d14a      	bne.n	800a0ac <_printf_float+0x194>
 800a016:	3307      	adds	r3, #7
 800a018:	6063      	str	r3, [r4, #4]
 800a01a:	2380      	movs	r3, #128	; 0x80
 800a01c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	4313      	orrs	r3, r2
 800a022:	2200      	movs	r2, #0
 800a024:	9206      	str	r2, [sp, #24]
 800a026:	aa12      	add	r2, sp, #72	; 0x48
 800a028:	9205      	str	r2, [sp, #20]
 800a02a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	9204      	str	r2, [sp, #16]
 800a030:	aa11      	add	r2, sp, #68	; 0x44
 800a032:	9203      	str	r2, [sp, #12]
 800a034:	2223      	movs	r2, #35	; 0x23
 800a036:	a908      	add	r1, sp, #32
 800a038:	9301      	str	r3, [sp, #4]
 800a03a:	6863      	ldr	r3, [r4, #4]
 800a03c:	1852      	adds	r2, r2, r1
 800a03e:	9202      	str	r2, [sp, #8]
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	0032      	movs	r2, r6
 800a044:	002b      	movs	r3, r5
 800a046:	0038      	movs	r0, r7
 800a048:	f7ff febe 	bl	8009dc8 <__cvt>
 800a04c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a04e:	0005      	movs	r5, r0
 800a050:	2b47      	cmp	r3, #71	; 0x47
 800a052:	d109      	bne.n	800a068 <_printf_float+0x150>
 800a054:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a056:	1cda      	adds	r2, r3, #3
 800a058:	db02      	blt.n	800a060 <_printf_float+0x148>
 800a05a:	6862      	ldr	r2, [r4, #4]
 800a05c:	4293      	cmp	r3, r2
 800a05e:	dd49      	ble.n	800a0f4 <_printf_float+0x1dc>
 800a060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a062:	3b02      	subs	r3, #2
 800a064:	b2db      	uxtb	r3, r3
 800a066:	930a      	str	r3, [sp, #40]	; 0x28
 800a068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a06a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a06c:	2b65      	cmp	r3, #101	; 0x65
 800a06e:	d824      	bhi.n	800a0ba <_printf_float+0x1a2>
 800a070:	0020      	movs	r0, r4
 800a072:	001a      	movs	r2, r3
 800a074:	3901      	subs	r1, #1
 800a076:	3050      	adds	r0, #80	; 0x50
 800a078:	9111      	str	r1, [sp, #68]	; 0x44
 800a07a:	f7ff ff08 	bl	8009e8e <__exponent>
 800a07e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a080:	900b      	str	r0, [sp, #44]	; 0x2c
 800a082:	1813      	adds	r3, r2, r0
 800a084:	6123      	str	r3, [r4, #16]
 800a086:	2a01      	cmp	r2, #1
 800a088:	dc02      	bgt.n	800a090 <_printf_float+0x178>
 800a08a:	6822      	ldr	r2, [r4, #0]
 800a08c:	07d2      	lsls	r2, r2, #31
 800a08e:	d501      	bpl.n	800a094 <_printf_float+0x17c>
 800a090:	3301      	adds	r3, #1
 800a092:	6123      	str	r3, [r4, #16]
 800a094:	2323      	movs	r3, #35	; 0x23
 800a096:	aa08      	add	r2, sp, #32
 800a098:	189b      	adds	r3, r3, r2
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d100      	bne.n	800a0a2 <_printf_float+0x18a>
 800a0a0:	e78d      	b.n	8009fbe <_printf_float+0xa6>
 800a0a2:	0023      	movs	r3, r4
 800a0a4:	222d      	movs	r2, #45	; 0x2d
 800a0a6:	3343      	adds	r3, #67	; 0x43
 800a0a8:	701a      	strb	r2, [r3, #0]
 800a0aa:	e788      	b.n	8009fbe <_printf_float+0xa6>
 800a0ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0ae:	2a47      	cmp	r2, #71	; 0x47
 800a0b0:	d1b3      	bne.n	800a01a <_printf_float+0x102>
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1b1      	bne.n	800a01a <_printf_float+0x102>
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	e7ae      	b.n	800a018 <_printf_float+0x100>
 800a0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0bc:	2b66      	cmp	r3, #102	; 0x66
 800a0be:	d11b      	bne.n	800a0f8 <_printf_float+0x1e0>
 800a0c0:	6863      	ldr	r3, [r4, #4]
 800a0c2:	2900      	cmp	r1, #0
 800a0c4:	dd09      	ble.n	800a0da <_printf_float+0x1c2>
 800a0c6:	6121      	str	r1, [r4, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d102      	bne.n	800a0d2 <_printf_float+0x1ba>
 800a0cc:	6822      	ldr	r2, [r4, #0]
 800a0ce:	07d2      	lsls	r2, r2, #31
 800a0d0:	d50b      	bpl.n	800a0ea <_printf_float+0x1d2>
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	185b      	adds	r3, r3, r1
 800a0d6:	6123      	str	r3, [r4, #16]
 800a0d8:	e007      	b.n	800a0ea <_printf_float+0x1d2>
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d103      	bne.n	800a0e6 <_printf_float+0x1ce>
 800a0de:	2201      	movs	r2, #1
 800a0e0:	6821      	ldr	r1, [r4, #0]
 800a0e2:	4211      	tst	r1, r2
 800a0e4:	d000      	beq.n	800a0e8 <_printf_float+0x1d0>
 800a0e6:	1c9a      	adds	r2, r3, #2
 800a0e8:	6122      	str	r2, [r4, #16]
 800a0ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0ec:	65a3      	str	r3, [r4, #88]	; 0x58
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0f2:	e7cf      	b.n	800a094 <_printf_float+0x17c>
 800a0f4:	2367      	movs	r3, #103	; 0x67
 800a0f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a0f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a0fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0fc:	4299      	cmp	r1, r3
 800a0fe:	db06      	blt.n	800a10e <_printf_float+0x1f6>
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	6121      	str	r1, [r4, #16]
 800a104:	07db      	lsls	r3, r3, #31
 800a106:	d5f0      	bpl.n	800a0ea <_printf_float+0x1d2>
 800a108:	3101      	adds	r1, #1
 800a10a:	6121      	str	r1, [r4, #16]
 800a10c:	e7ed      	b.n	800a0ea <_printf_float+0x1d2>
 800a10e:	2201      	movs	r2, #1
 800a110:	2900      	cmp	r1, #0
 800a112:	dc01      	bgt.n	800a118 <_printf_float+0x200>
 800a114:	1892      	adds	r2, r2, r2
 800a116:	1a52      	subs	r2, r2, r1
 800a118:	189b      	adds	r3, r3, r2
 800a11a:	e7dc      	b.n	800a0d6 <_printf_float+0x1be>
 800a11c:	6822      	ldr	r2, [r4, #0]
 800a11e:	0553      	lsls	r3, r2, #21
 800a120:	d408      	bmi.n	800a134 <_printf_float+0x21c>
 800a122:	6923      	ldr	r3, [r4, #16]
 800a124:	002a      	movs	r2, r5
 800a126:	0038      	movs	r0, r7
 800a128:	9908      	ldr	r1, [sp, #32]
 800a12a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a12c:	47a8      	blx	r5
 800a12e:	3001      	adds	r0, #1
 800a130:	d12a      	bne.n	800a188 <_printf_float+0x270>
 800a132:	e74f      	b.n	8009fd4 <_printf_float+0xbc>
 800a134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a136:	2b65      	cmp	r3, #101	; 0x65
 800a138:	d800      	bhi.n	800a13c <_printf_float+0x224>
 800a13a:	e0ec      	b.n	800a316 <_printf_float+0x3fe>
 800a13c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a13e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a140:	2200      	movs	r2, #0
 800a142:	2300      	movs	r3, #0
 800a144:	f7f6 f982 	bl	800044c <__aeabi_dcmpeq>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d034      	beq.n	800a1b6 <_printf_float+0x29e>
 800a14c:	2301      	movs	r3, #1
 800a14e:	0038      	movs	r0, r7
 800a150:	4a37      	ldr	r2, [pc, #220]	; (800a230 <_printf_float+0x318>)
 800a152:	9908      	ldr	r1, [sp, #32]
 800a154:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a156:	47a8      	blx	r5
 800a158:	3001      	adds	r0, #1
 800a15a:	d100      	bne.n	800a15e <_printf_float+0x246>
 800a15c:	e73a      	b.n	8009fd4 <_printf_float+0xbc>
 800a15e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a162:	429a      	cmp	r2, r3
 800a164:	db02      	blt.n	800a16c <_printf_float+0x254>
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	07db      	lsls	r3, r3, #31
 800a16a:	d50d      	bpl.n	800a188 <_printf_float+0x270>
 800a16c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a16e:	0038      	movs	r0, r7
 800a170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a174:	9908      	ldr	r1, [sp, #32]
 800a176:	47a8      	blx	r5
 800a178:	2500      	movs	r5, #0
 800a17a:	3001      	adds	r0, #1
 800a17c:	d100      	bne.n	800a180 <_printf_float+0x268>
 800a17e:	e729      	b.n	8009fd4 <_printf_float+0xbc>
 800a180:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a182:	3b01      	subs	r3, #1
 800a184:	42ab      	cmp	r3, r5
 800a186:	dc0a      	bgt.n	800a19e <_printf_float+0x286>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	079b      	lsls	r3, r3, #30
 800a18c:	d500      	bpl.n	800a190 <_printf_float+0x278>
 800a18e:	e116      	b.n	800a3be <_printf_float+0x4a6>
 800a190:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a192:	68e0      	ldr	r0, [r4, #12]
 800a194:	4298      	cmp	r0, r3
 800a196:	db00      	blt.n	800a19a <_printf_float+0x282>
 800a198:	e71e      	b.n	8009fd8 <_printf_float+0xc0>
 800a19a:	0018      	movs	r0, r3
 800a19c:	e71c      	b.n	8009fd8 <_printf_float+0xc0>
 800a19e:	0022      	movs	r2, r4
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	0038      	movs	r0, r7
 800a1a4:	9908      	ldr	r1, [sp, #32]
 800a1a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1a8:	321a      	adds	r2, #26
 800a1aa:	47b0      	blx	r6
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d100      	bne.n	800a1b2 <_printf_float+0x29a>
 800a1b0:	e710      	b.n	8009fd4 <_printf_float+0xbc>
 800a1b2:	3501      	adds	r5, #1
 800a1b4:	e7e4      	b.n	800a180 <_printf_float+0x268>
 800a1b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	dc3b      	bgt.n	800a234 <_printf_float+0x31c>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	0038      	movs	r0, r7
 800a1c0:	4a1b      	ldr	r2, [pc, #108]	; (800a230 <_printf_float+0x318>)
 800a1c2:	9908      	ldr	r1, [sp, #32]
 800a1c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1c6:	47b0      	blx	r6
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d100      	bne.n	800a1ce <_printf_float+0x2b6>
 800a1cc:	e702      	b.n	8009fd4 <_printf_float+0xbc>
 800a1ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	d102      	bne.n	800a1dc <_printf_float+0x2c4>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	07db      	lsls	r3, r3, #31
 800a1da:	d5d5      	bpl.n	800a188 <_printf_float+0x270>
 800a1dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1de:	0038      	movs	r0, r7
 800a1e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1e2:	9908      	ldr	r1, [sp, #32]
 800a1e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1e6:	47b0      	blx	r6
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	d100      	bne.n	800a1f0 <_printf_float+0x2d8>
 800a1ee:	e6f1      	b.n	8009fd4 <_printf_float+0xbc>
 800a1f0:	930a      	str	r3, [sp, #40]	; 0x28
 800a1f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1f6:	425b      	negs	r3, r3
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	dc01      	bgt.n	800a200 <_printf_float+0x2e8>
 800a1fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1fe:	e791      	b.n	800a124 <_printf_float+0x20c>
 800a200:	0022      	movs	r2, r4
 800a202:	2301      	movs	r3, #1
 800a204:	0038      	movs	r0, r7
 800a206:	9908      	ldr	r1, [sp, #32]
 800a208:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a20a:	321a      	adds	r2, #26
 800a20c:	47b0      	blx	r6
 800a20e:	3001      	adds	r0, #1
 800a210:	d100      	bne.n	800a214 <_printf_float+0x2fc>
 800a212:	e6df      	b.n	8009fd4 <_printf_float+0xbc>
 800a214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a216:	3301      	adds	r3, #1
 800a218:	e7ea      	b.n	800a1f0 <_printf_float+0x2d8>
 800a21a:	46c0      	nop			; (mov r8, r8)
 800a21c:	7fefffff 	.word	0x7fefffff
 800a220:	0800ed68 	.word	0x0800ed68
 800a224:	0800ed6c 	.word	0x0800ed6c
 800a228:	0800ed70 	.word	0x0800ed70
 800a22c:	0800ed74 	.word	0x0800ed74
 800a230:	0800ed78 	.word	0x0800ed78
 800a234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a236:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a238:	920a      	str	r2, [sp, #40]	; 0x28
 800a23a:	429a      	cmp	r2, r3
 800a23c:	dd00      	ble.n	800a240 <_printf_float+0x328>
 800a23e:	930a      	str	r3, [sp, #40]	; 0x28
 800a240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a242:	2b00      	cmp	r3, #0
 800a244:	dc3d      	bgt.n	800a2c2 <_printf_float+0x3aa>
 800a246:	2300      	movs	r3, #0
 800a248:	930e      	str	r3, [sp, #56]	; 0x38
 800a24a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a24c:	43db      	mvns	r3, r3
 800a24e:	17db      	asrs	r3, r3, #31
 800a250:	930f      	str	r3, [sp, #60]	; 0x3c
 800a252:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a256:	930b      	str	r3, [sp, #44]	; 0x2c
 800a258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a25a:	4013      	ands	r3, r2
 800a25c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a262:	4293      	cmp	r3, r2
 800a264:	dc36      	bgt.n	800a2d4 <_printf_float+0x3bc>
 800a266:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a26a:	429a      	cmp	r2, r3
 800a26c:	db40      	blt.n	800a2f0 <_printf_float+0x3d8>
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	07db      	lsls	r3, r3, #31
 800a272:	d43d      	bmi.n	800a2f0 <_printf_float+0x3d8>
 800a274:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a276:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a27a:	1af3      	subs	r3, r6, r3
 800a27c:	1ab6      	subs	r6, r6, r2
 800a27e:	429e      	cmp	r6, r3
 800a280:	dd00      	ble.n	800a284 <_printf_float+0x36c>
 800a282:	001e      	movs	r6, r3
 800a284:	2e00      	cmp	r6, #0
 800a286:	dc3c      	bgt.n	800a302 <_printf_float+0x3ea>
 800a288:	2300      	movs	r3, #0
 800a28a:	930a      	str	r3, [sp, #40]	; 0x28
 800a28c:	43f3      	mvns	r3, r6
 800a28e:	17db      	asrs	r3, r3, #31
 800a290:	930b      	str	r3, [sp, #44]	; 0x2c
 800a292:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a294:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a296:	1a9b      	subs	r3, r3, r2
 800a298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a29a:	4032      	ands	r2, r6
 800a29c:	1a9b      	subs	r3, r3, r2
 800a29e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	dc00      	bgt.n	800a2a6 <_printf_float+0x38e>
 800a2a4:	e770      	b.n	800a188 <_printf_float+0x270>
 800a2a6:	0022      	movs	r2, r4
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	0038      	movs	r0, r7
 800a2ac:	9908      	ldr	r1, [sp, #32]
 800a2ae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a2b0:	321a      	adds	r2, #26
 800a2b2:	47a8      	blx	r5
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d100      	bne.n	800a2ba <_printf_float+0x3a2>
 800a2b8:	e68c      	b.n	8009fd4 <_printf_float+0xbc>
 800a2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2bc:	3301      	adds	r3, #1
 800a2be:	930a      	str	r3, [sp, #40]	; 0x28
 800a2c0:	e7e7      	b.n	800a292 <_printf_float+0x37a>
 800a2c2:	002a      	movs	r2, r5
 800a2c4:	0038      	movs	r0, r7
 800a2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c8:	9908      	ldr	r1, [sp, #32]
 800a2ca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2cc:	47b0      	blx	r6
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d1b9      	bne.n	800a246 <_printf_float+0x32e>
 800a2d2:	e67f      	b.n	8009fd4 <_printf_float+0xbc>
 800a2d4:	0022      	movs	r2, r4
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	0038      	movs	r0, r7
 800a2da:	9908      	ldr	r1, [sp, #32]
 800a2dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2de:	321a      	adds	r2, #26
 800a2e0:	47b0      	blx	r6
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	d100      	bne.n	800a2e8 <_printf_float+0x3d0>
 800a2e6:	e675      	b.n	8009fd4 <_printf_float+0xbc>
 800a2e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	930e      	str	r3, [sp, #56]	; 0x38
 800a2ee:	e7b0      	b.n	800a252 <_printf_float+0x33a>
 800a2f0:	0038      	movs	r0, r7
 800a2f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2f6:	9908      	ldr	r1, [sp, #32]
 800a2f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2fa:	47b0      	blx	r6
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d1b9      	bne.n	800a274 <_printf_float+0x35c>
 800a300:	e668      	b.n	8009fd4 <_printf_float+0xbc>
 800a302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a304:	0038      	movs	r0, r7
 800a306:	18ea      	adds	r2, r5, r3
 800a308:	9908      	ldr	r1, [sp, #32]
 800a30a:	0033      	movs	r3, r6
 800a30c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a30e:	47a8      	blx	r5
 800a310:	3001      	adds	r0, #1
 800a312:	d1b9      	bne.n	800a288 <_printf_float+0x370>
 800a314:	e65e      	b.n	8009fd4 <_printf_float+0xbc>
 800a316:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a318:	2b01      	cmp	r3, #1
 800a31a:	dc02      	bgt.n	800a322 <_printf_float+0x40a>
 800a31c:	2301      	movs	r3, #1
 800a31e:	421a      	tst	r2, r3
 800a320:	d03a      	beq.n	800a398 <_printf_float+0x480>
 800a322:	2301      	movs	r3, #1
 800a324:	002a      	movs	r2, r5
 800a326:	0038      	movs	r0, r7
 800a328:	9908      	ldr	r1, [sp, #32]
 800a32a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a32c:	47b0      	blx	r6
 800a32e:	3001      	adds	r0, #1
 800a330:	d100      	bne.n	800a334 <_printf_float+0x41c>
 800a332:	e64f      	b.n	8009fd4 <_printf_float+0xbc>
 800a334:	0038      	movs	r0, r7
 800a336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a33a:	9908      	ldr	r1, [sp, #32]
 800a33c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a33e:	47b0      	blx	r6
 800a340:	3001      	adds	r0, #1
 800a342:	d100      	bne.n	800a346 <_printf_float+0x42e>
 800a344:	e646      	b.n	8009fd4 <_printf_float+0xbc>
 800a346:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a348:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a34a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a34c:	2200      	movs	r2, #0
 800a34e:	001e      	movs	r6, r3
 800a350:	2300      	movs	r3, #0
 800a352:	f7f6 f87b 	bl	800044c <__aeabi_dcmpeq>
 800a356:	2800      	cmp	r0, #0
 800a358:	d11c      	bne.n	800a394 <_printf_float+0x47c>
 800a35a:	0033      	movs	r3, r6
 800a35c:	1c6a      	adds	r2, r5, #1
 800a35e:	3b01      	subs	r3, #1
 800a360:	0038      	movs	r0, r7
 800a362:	9908      	ldr	r1, [sp, #32]
 800a364:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a366:	47a8      	blx	r5
 800a368:	3001      	adds	r0, #1
 800a36a:	d10f      	bne.n	800a38c <_printf_float+0x474>
 800a36c:	e632      	b.n	8009fd4 <_printf_float+0xbc>
 800a36e:	0022      	movs	r2, r4
 800a370:	2301      	movs	r3, #1
 800a372:	0038      	movs	r0, r7
 800a374:	9908      	ldr	r1, [sp, #32]
 800a376:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a378:	321a      	adds	r2, #26
 800a37a:	47b0      	blx	r6
 800a37c:	3001      	adds	r0, #1
 800a37e:	d100      	bne.n	800a382 <_printf_float+0x46a>
 800a380:	e628      	b.n	8009fd4 <_printf_float+0xbc>
 800a382:	3501      	adds	r5, #1
 800a384:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a386:	3b01      	subs	r3, #1
 800a388:	42ab      	cmp	r3, r5
 800a38a:	dcf0      	bgt.n	800a36e <_printf_float+0x456>
 800a38c:	0022      	movs	r2, r4
 800a38e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a390:	3250      	adds	r2, #80	; 0x50
 800a392:	e6c8      	b.n	800a126 <_printf_float+0x20e>
 800a394:	2500      	movs	r5, #0
 800a396:	e7f5      	b.n	800a384 <_printf_float+0x46c>
 800a398:	002a      	movs	r2, r5
 800a39a:	e7e1      	b.n	800a360 <_printf_float+0x448>
 800a39c:	0022      	movs	r2, r4
 800a39e:	2301      	movs	r3, #1
 800a3a0:	0038      	movs	r0, r7
 800a3a2:	9908      	ldr	r1, [sp, #32]
 800a3a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a3a6:	3219      	adds	r2, #25
 800a3a8:	47b0      	blx	r6
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	d100      	bne.n	800a3b0 <_printf_float+0x498>
 800a3ae:	e611      	b.n	8009fd4 <_printf_float+0xbc>
 800a3b0:	3501      	adds	r5, #1
 800a3b2:	68e3      	ldr	r3, [r4, #12]
 800a3b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3b6:	1a9b      	subs	r3, r3, r2
 800a3b8:	42ab      	cmp	r3, r5
 800a3ba:	dcef      	bgt.n	800a39c <_printf_float+0x484>
 800a3bc:	e6e8      	b.n	800a190 <_printf_float+0x278>
 800a3be:	2500      	movs	r5, #0
 800a3c0:	e7f7      	b.n	800a3b2 <_printf_float+0x49a>
 800a3c2:	46c0      	nop			; (mov r8, r8)

0800a3c4 <_printf_common>:
 800a3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3c6:	0016      	movs	r6, r2
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	688a      	ldr	r2, [r1, #8]
 800a3cc:	690b      	ldr	r3, [r1, #16]
 800a3ce:	000c      	movs	r4, r1
 800a3d0:	9000      	str	r0, [sp, #0]
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	da00      	bge.n	800a3d8 <_printf_common+0x14>
 800a3d6:	0013      	movs	r3, r2
 800a3d8:	0022      	movs	r2, r4
 800a3da:	6033      	str	r3, [r6, #0]
 800a3dc:	3243      	adds	r2, #67	; 0x43
 800a3de:	7812      	ldrb	r2, [r2, #0]
 800a3e0:	2a00      	cmp	r2, #0
 800a3e2:	d001      	beq.n	800a3e8 <_printf_common+0x24>
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	6033      	str	r3, [r6, #0]
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	069b      	lsls	r3, r3, #26
 800a3ec:	d502      	bpl.n	800a3f4 <_printf_common+0x30>
 800a3ee:	6833      	ldr	r3, [r6, #0]
 800a3f0:	3302      	adds	r3, #2
 800a3f2:	6033      	str	r3, [r6, #0]
 800a3f4:	6822      	ldr	r2, [r4, #0]
 800a3f6:	2306      	movs	r3, #6
 800a3f8:	0015      	movs	r5, r2
 800a3fa:	401d      	ands	r5, r3
 800a3fc:	421a      	tst	r2, r3
 800a3fe:	d027      	beq.n	800a450 <_printf_common+0x8c>
 800a400:	0023      	movs	r3, r4
 800a402:	3343      	adds	r3, #67	; 0x43
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	1e5a      	subs	r2, r3, #1
 800a408:	4193      	sbcs	r3, r2
 800a40a:	6822      	ldr	r2, [r4, #0]
 800a40c:	0692      	lsls	r2, r2, #26
 800a40e:	d430      	bmi.n	800a472 <_printf_common+0xae>
 800a410:	0022      	movs	r2, r4
 800a412:	9901      	ldr	r1, [sp, #4]
 800a414:	9800      	ldr	r0, [sp, #0]
 800a416:	9d08      	ldr	r5, [sp, #32]
 800a418:	3243      	adds	r2, #67	; 0x43
 800a41a:	47a8      	blx	r5
 800a41c:	3001      	adds	r0, #1
 800a41e:	d025      	beq.n	800a46c <_printf_common+0xa8>
 800a420:	2206      	movs	r2, #6
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	2500      	movs	r5, #0
 800a426:	4013      	ands	r3, r2
 800a428:	2b04      	cmp	r3, #4
 800a42a:	d105      	bne.n	800a438 <_printf_common+0x74>
 800a42c:	6833      	ldr	r3, [r6, #0]
 800a42e:	68e5      	ldr	r5, [r4, #12]
 800a430:	1aed      	subs	r5, r5, r3
 800a432:	43eb      	mvns	r3, r5
 800a434:	17db      	asrs	r3, r3, #31
 800a436:	401d      	ands	r5, r3
 800a438:	68a3      	ldr	r3, [r4, #8]
 800a43a:	6922      	ldr	r2, [r4, #16]
 800a43c:	4293      	cmp	r3, r2
 800a43e:	dd01      	ble.n	800a444 <_printf_common+0x80>
 800a440:	1a9b      	subs	r3, r3, r2
 800a442:	18ed      	adds	r5, r5, r3
 800a444:	2600      	movs	r6, #0
 800a446:	42b5      	cmp	r5, r6
 800a448:	d120      	bne.n	800a48c <_printf_common+0xc8>
 800a44a:	2000      	movs	r0, #0
 800a44c:	e010      	b.n	800a470 <_printf_common+0xac>
 800a44e:	3501      	adds	r5, #1
 800a450:	68e3      	ldr	r3, [r4, #12]
 800a452:	6832      	ldr	r2, [r6, #0]
 800a454:	1a9b      	subs	r3, r3, r2
 800a456:	42ab      	cmp	r3, r5
 800a458:	ddd2      	ble.n	800a400 <_printf_common+0x3c>
 800a45a:	0022      	movs	r2, r4
 800a45c:	2301      	movs	r3, #1
 800a45e:	9901      	ldr	r1, [sp, #4]
 800a460:	9800      	ldr	r0, [sp, #0]
 800a462:	9f08      	ldr	r7, [sp, #32]
 800a464:	3219      	adds	r2, #25
 800a466:	47b8      	blx	r7
 800a468:	3001      	adds	r0, #1
 800a46a:	d1f0      	bne.n	800a44e <_printf_common+0x8a>
 800a46c:	2001      	movs	r0, #1
 800a46e:	4240      	negs	r0, r0
 800a470:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a472:	2030      	movs	r0, #48	; 0x30
 800a474:	18e1      	adds	r1, r4, r3
 800a476:	3143      	adds	r1, #67	; 0x43
 800a478:	7008      	strb	r0, [r1, #0]
 800a47a:	0021      	movs	r1, r4
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	3145      	adds	r1, #69	; 0x45
 800a480:	7809      	ldrb	r1, [r1, #0]
 800a482:	18a2      	adds	r2, r4, r2
 800a484:	3243      	adds	r2, #67	; 0x43
 800a486:	3302      	adds	r3, #2
 800a488:	7011      	strb	r1, [r2, #0]
 800a48a:	e7c1      	b.n	800a410 <_printf_common+0x4c>
 800a48c:	0022      	movs	r2, r4
 800a48e:	2301      	movs	r3, #1
 800a490:	9901      	ldr	r1, [sp, #4]
 800a492:	9800      	ldr	r0, [sp, #0]
 800a494:	9f08      	ldr	r7, [sp, #32]
 800a496:	321a      	adds	r2, #26
 800a498:	47b8      	blx	r7
 800a49a:	3001      	adds	r0, #1
 800a49c:	d0e6      	beq.n	800a46c <_printf_common+0xa8>
 800a49e:	3601      	adds	r6, #1
 800a4a0:	e7d1      	b.n	800a446 <_printf_common+0x82>
	...

0800a4a4 <_printf_i>:
 800a4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4a6:	b08b      	sub	sp, #44	; 0x2c
 800a4a8:	9206      	str	r2, [sp, #24]
 800a4aa:	000a      	movs	r2, r1
 800a4ac:	3243      	adds	r2, #67	; 0x43
 800a4ae:	9307      	str	r3, [sp, #28]
 800a4b0:	9005      	str	r0, [sp, #20]
 800a4b2:	9204      	str	r2, [sp, #16]
 800a4b4:	7e0a      	ldrb	r2, [r1, #24]
 800a4b6:	000c      	movs	r4, r1
 800a4b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4ba:	2a78      	cmp	r2, #120	; 0x78
 800a4bc:	d809      	bhi.n	800a4d2 <_printf_i+0x2e>
 800a4be:	2a62      	cmp	r2, #98	; 0x62
 800a4c0:	d80b      	bhi.n	800a4da <_printf_i+0x36>
 800a4c2:	2a00      	cmp	r2, #0
 800a4c4:	d100      	bne.n	800a4c8 <_printf_i+0x24>
 800a4c6:	e0be      	b.n	800a646 <_printf_i+0x1a2>
 800a4c8:	497c      	ldr	r1, [pc, #496]	; (800a6bc <_printf_i+0x218>)
 800a4ca:	9103      	str	r1, [sp, #12]
 800a4cc:	2a58      	cmp	r2, #88	; 0x58
 800a4ce:	d100      	bne.n	800a4d2 <_printf_i+0x2e>
 800a4d0:	e093      	b.n	800a5fa <_printf_i+0x156>
 800a4d2:	0026      	movs	r6, r4
 800a4d4:	3642      	adds	r6, #66	; 0x42
 800a4d6:	7032      	strb	r2, [r6, #0]
 800a4d8:	e022      	b.n	800a520 <_printf_i+0x7c>
 800a4da:	0010      	movs	r0, r2
 800a4dc:	3863      	subs	r0, #99	; 0x63
 800a4de:	2815      	cmp	r0, #21
 800a4e0:	d8f7      	bhi.n	800a4d2 <_printf_i+0x2e>
 800a4e2:	f7f5 fe23 	bl	800012c <__gnu_thumb1_case_shi>
 800a4e6:	0016      	.short	0x0016
 800a4e8:	fff6001f 	.word	0xfff6001f
 800a4ec:	fff6fff6 	.word	0xfff6fff6
 800a4f0:	001ffff6 	.word	0x001ffff6
 800a4f4:	fff6fff6 	.word	0xfff6fff6
 800a4f8:	fff6fff6 	.word	0xfff6fff6
 800a4fc:	003600a3 	.word	0x003600a3
 800a500:	fff60083 	.word	0xfff60083
 800a504:	00b4fff6 	.word	0x00b4fff6
 800a508:	0036fff6 	.word	0x0036fff6
 800a50c:	fff6fff6 	.word	0xfff6fff6
 800a510:	0087      	.short	0x0087
 800a512:	0026      	movs	r6, r4
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	3642      	adds	r6, #66	; 0x42
 800a518:	1d11      	adds	r1, r2, #4
 800a51a:	6019      	str	r1, [r3, #0]
 800a51c:	6813      	ldr	r3, [r2, #0]
 800a51e:	7033      	strb	r3, [r6, #0]
 800a520:	2301      	movs	r3, #1
 800a522:	e0a2      	b.n	800a66a <_printf_i+0x1c6>
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	6809      	ldr	r1, [r1, #0]
 800a528:	1d02      	adds	r2, r0, #4
 800a52a:	060d      	lsls	r5, r1, #24
 800a52c:	d50b      	bpl.n	800a546 <_printf_i+0xa2>
 800a52e:	6805      	ldr	r5, [r0, #0]
 800a530:	601a      	str	r2, [r3, #0]
 800a532:	2d00      	cmp	r5, #0
 800a534:	da03      	bge.n	800a53e <_printf_i+0x9a>
 800a536:	232d      	movs	r3, #45	; 0x2d
 800a538:	9a04      	ldr	r2, [sp, #16]
 800a53a:	426d      	negs	r5, r5
 800a53c:	7013      	strb	r3, [r2, #0]
 800a53e:	4b5f      	ldr	r3, [pc, #380]	; (800a6bc <_printf_i+0x218>)
 800a540:	270a      	movs	r7, #10
 800a542:	9303      	str	r3, [sp, #12]
 800a544:	e01b      	b.n	800a57e <_printf_i+0xda>
 800a546:	6805      	ldr	r5, [r0, #0]
 800a548:	601a      	str	r2, [r3, #0]
 800a54a:	0649      	lsls	r1, r1, #25
 800a54c:	d5f1      	bpl.n	800a532 <_printf_i+0x8e>
 800a54e:	b22d      	sxth	r5, r5
 800a550:	e7ef      	b.n	800a532 <_printf_i+0x8e>
 800a552:	680d      	ldr	r5, [r1, #0]
 800a554:	6819      	ldr	r1, [r3, #0]
 800a556:	1d08      	adds	r0, r1, #4
 800a558:	6018      	str	r0, [r3, #0]
 800a55a:	062e      	lsls	r6, r5, #24
 800a55c:	d501      	bpl.n	800a562 <_printf_i+0xbe>
 800a55e:	680d      	ldr	r5, [r1, #0]
 800a560:	e003      	b.n	800a56a <_printf_i+0xc6>
 800a562:	066d      	lsls	r5, r5, #25
 800a564:	d5fb      	bpl.n	800a55e <_printf_i+0xba>
 800a566:	680d      	ldr	r5, [r1, #0]
 800a568:	b2ad      	uxth	r5, r5
 800a56a:	4b54      	ldr	r3, [pc, #336]	; (800a6bc <_printf_i+0x218>)
 800a56c:	2708      	movs	r7, #8
 800a56e:	9303      	str	r3, [sp, #12]
 800a570:	2a6f      	cmp	r2, #111	; 0x6f
 800a572:	d000      	beq.n	800a576 <_printf_i+0xd2>
 800a574:	3702      	adds	r7, #2
 800a576:	0023      	movs	r3, r4
 800a578:	2200      	movs	r2, #0
 800a57a:	3343      	adds	r3, #67	; 0x43
 800a57c:	701a      	strb	r2, [r3, #0]
 800a57e:	6863      	ldr	r3, [r4, #4]
 800a580:	60a3      	str	r3, [r4, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	db03      	blt.n	800a58e <_printf_i+0xea>
 800a586:	2104      	movs	r1, #4
 800a588:	6822      	ldr	r2, [r4, #0]
 800a58a:	438a      	bics	r2, r1
 800a58c:	6022      	str	r2, [r4, #0]
 800a58e:	2d00      	cmp	r5, #0
 800a590:	d102      	bne.n	800a598 <_printf_i+0xf4>
 800a592:	9e04      	ldr	r6, [sp, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00c      	beq.n	800a5b2 <_printf_i+0x10e>
 800a598:	9e04      	ldr	r6, [sp, #16]
 800a59a:	0028      	movs	r0, r5
 800a59c:	0039      	movs	r1, r7
 800a59e:	f7f5 fe55 	bl	800024c <__aeabi_uidivmod>
 800a5a2:	9b03      	ldr	r3, [sp, #12]
 800a5a4:	3e01      	subs	r6, #1
 800a5a6:	5c5b      	ldrb	r3, [r3, r1]
 800a5a8:	7033      	strb	r3, [r6, #0]
 800a5aa:	002b      	movs	r3, r5
 800a5ac:	0005      	movs	r5, r0
 800a5ae:	429f      	cmp	r7, r3
 800a5b0:	d9f3      	bls.n	800a59a <_printf_i+0xf6>
 800a5b2:	2f08      	cmp	r7, #8
 800a5b4:	d109      	bne.n	800a5ca <_printf_i+0x126>
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	07db      	lsls	r3, r3, #31
 800a5ba:	d506      	bpl.n	800a5ca <_printf_i+0x126>
 800a5bc:	6862      	ldr	r2, [r4, #4]
 800a5be:	6923      	ldr	r3, [r4, #16]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	dc02      	bgt.n	800a5ca <_printf_i+0x126>
 800a5c4:	2330      	movs	r3, #48	; 0x30
 800a5c6:	3e01      	subs	r6, #1
 800a5c8:	7033      	strb	r3, [r6, #0]
 800a5ca:	9b04      	ldr	r3, [sp, #16]
 800a5cc:	1b9b      	subs	r3, r3, r6
 800a5ce:	6123      	str	r3, [r4, #16]
 800a5d0:	9b07      	ldr	r3, [sp, #28]
 800a5d2:	0021      	movs	r1, r4
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	9805      	ldr	r0, [sp, #20]
 800a5d8:	9b06      	ldr	r3, [sp, #24]
 800a5da:	aa09      	add	r2, sp, #36	; 0x24
 800a5dc:	f7ff fef2 	bl	800a3c4 <_printf_common>
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d147      	bne.n	800a674 <_printf_i+0x1d0>
 800a5e4:	2001      	movs	r0, #1
 800a5e6:	4240      	negs	r0, r0
 800a5e8:	b00b      	add	sp, #44	; 0x2c
 800a5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	6809      	ldr	r1, [r1, #0]
 800a5f0:	430a      	orrs	r2, r1
 800a5f2:	6022      	str	r2, [r4, #0]
 800a5f4:	2278      	movs	r2, #120	; 0x78
 800a5f6:	4932      	ldr	r1, [pc, #200]	; (800a6c0 <_printf_i+0x21c>)
 800a5f8:	9103      	str	r1, [sp, #12]
 800a5fa:	0021      	movs	r1, r4
 800a5fc:	3145      	adds	r1, #69	; 0x45
 800a5fe:	700a      	strb	r2, [r1, #0]
 800a600:	6819      	ldr	r1, [r3, #0]
 800a602:	6822      	ldr	r2, [r4, #0]
 800a604:	c920      	ldmia	r1!, {r5}
 800a606:	0610      	lsls	r0, r2, #24
 800a608:	d402      	bmi.n	800a610 <_printf_i+0x16c>
 800a60a:	0650      	lsls	r0, r2, #25
 800a60c:	d500      	bpl.n	800a610 <_printf_i+0x16c>
 800a60e:	b2ad      	uxth	r5, r5
 800a610:	6019      	str	r1, [r3, #0]
 800a612:	07d3      	lsls	r3, r2, #31
 800a614:	d502      	bpl.n	800a61c <_printf_i+0x178>
 800a616:	2320      	movs	r3, #32
 800a618:	4313      	orrs	r3, r2
 800a61a:	6023      	str	r3, [r4, #0]
 800a61c:	2710      	movs	r7, #16
 800a61e:	2d00      	cmp	r5, #0
 800a620:	d1a9      	bne.n	800a576 <_printf_i+0xd2>
 800a622:	2220      	movs	r2, #32
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	4393      	bics	r3, r2
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	e7a4      	b.n	800a576 <_printf_i+0xd2>
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	680d      	ldr	r5, [r1, #0]
 800a630:	1d10      	adds	r0, r2, #4
 800a632:	6949      	ldr	r1, [r1, #20]
 800a634:	6018      	str	r0, [r3, #0]
 800a636:	6813      	ldr	r3, [r2, #0]
 800a638:	062e      	lsls	r6, r5, #24
 800a63a:	d501      	bpl.n	800a640 <_printf_i+0x19c>
 800a63c:	6019      	str	r1, [r3, #0]
 800a63e:	e002      	b.n	800a646 <_printf_i+0x1a2>
 800a640:	066d      	lsls	r5, r5, #25
 800a642:	d5fb      	bpl.n	800a63c <_printf_i+0x198>
 800a644:	8019      	strh	r1, [r3, #0]
 800a646:	2300      	movs	r3, #0
 800a648:	9e04      	ldr	r6, [sp, #16]
 800a64a:	6123      	str	r3, [r4, #16]
 800a64c:	e7c0      	b.n	800a5d0 <_printf_i+0x12c>
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	1d11      	adds	r1, r2, #4
 800a652:	6019      	str	r1, [r3, #0]
 800a654:	6816      	ldr	r6, [r2, #0]
 800a656:	2100      	movs	r1, #0
 800a658:	0030      	movs	r0, r6
 800a65a:	6862      	ldr	r2, [r4, #4]
 800a65c:	f000 fc25 	bl	800aeaa <memchr>
 800a660:	2800      	cmp	r0, #0
 800a662:	d001      	beq.n	800a668 <_printf_i+0x1c4>
 800a664:	1b80      	subs	r0, r0, r6
 800a666:	6060      	str	r0, [r4, #4]
 800a668:	6863      	ldr	r3, [r4, #4]
 800a66a:	6123      	str	r3, [r4, #16]
 800a66c:	2300      	movs	r3, #0
 800a66e:	9a04      	ldr	r2, [sp, #16]
 800a670:	7013      	strb	r3, [r2, #0]
 800a672:	e7ad      	b.n	800a5d0 <_printf_i+0x12c>
 800a674:	0032      	movs	r2, r6
 800a676:	6923      	ldr	r3, [r4, #16]
 800a678:	9906      	ldr	r1, [sp, #24]
 800a67a:	9805      	ldr	r0, [sp, #20]
 800a67c:	9d07      	ldr	r5, [sp, #28]
 800a67e:	47a8      	blx	r5
 800a680:	3001      	adds	r0, #1
 800a682:	d0af      	beq.n	800a5e4 <_printf_i+0x140>
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	079b      	lsls	r3, r3, #30
 800a688:	d415      	bmi.n	800a6b6 <_printf_i+0x212>
 800a68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a68c:	68e0      	ldr	r0, [r4, #12]
 800a68e:	4298      	cmp	r0, r3
 800a690:	daaa      	bge.n	800a5e8 <_printf_i+0x144>
 800a692:	0018      	movs	r0, r3
 800a694:	e7a8      	b.n	800a5e8 <_printf_i+0x144>
 800a696:	0022      	movs	r2, r4
 800a698:	2301      	movs	r3, #1
 800a69a:	9906      	ldr	r1, [sp, #24]
 800a69c:	9805      	ldr	r0, [sp, #20]
 800a69e:	9e07      	ldr	r6, [sp, #28]
 800a6a0:	3219      	adds	r2, #25
 800a6a2:	47b0      	blx	r6
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	d09d      	beq.n	800a5e4 <_printf_i+0x140>
 800a6a8:	3501      	adds	r5, #1
 800a6aa:	68e3      	ldr	r3, [r4, #12]
 800a6ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ae:	1a9b      	subs	r3, r3, r2
 800a6b0:	42ab      	cmp	r3, r5
 800a6b2:	dcf0      	bgt.n	800a696 <_printf_i+0x1f2>
 800a6b4:	e7e9      	b.n	800a68a <_printf_i+0x1e6>
 800a6b6:	2500      	movs	r5, #0
 800a6b8:	e7f7      	b.n	800a6aa <_printf_i+0x206>
 800a6ba:	46c0      	nop			; (mov r8, r8)
 800a6bc:	0800ed7a 	.word	0x0800ed7a
 800a6c0:	0800ed8b 	.word	0x0800ed8b

0800a6c4 <_scanf_float>:
 800a6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c6:	b08b      	sub	sp, #44	; 0x2c
 800a6c8:	0016      	movs	r6, r2
 800a6ca:	9002      	str	r0, [sp, #8]
 800a6cc:	22ae      	movs	r2, #174	; 0xae
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	9307      	str	r3, [sp, #28]
 800a6d2:	688b      	ldr	r3, [r1, #8]
 800a6d4:	000f      	movs	r7, r1
 800a6d6:	1e59      	subs	r1, r3, #1
 800a6d8:	0052      	lsls	r2, r2, #1
 800a6da:	9006      	str	r0, [sp, #24]
 800a6dc:	4291      	cmp	r1, r2
 800a6de:	d905      	bls.n	800a6ec <_scanf_float+0x28>
 800a6e0:	3b5e      	subs	r3, #94	; 0x5e
 800a6e2:	3bff      	subs	r3, #255	; 0xff
 800a6e4:	9306      	str	r3, [sp, #24]
 800a6e6:	235e      	movs	r3, #94	; 0x5e
 800a6e8:	33ff      	adds	r3, #255	; 0xff
 800a6ea:	60bb      	str	r3, [r7, #8]
 800a6ec:	23f0      	movs	r3, #240	; 0xf0
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	603b      	str	r3, [r7, #0]
 800a6f6:	003b      	movs	r3, r7
 800a6f8:	2400      	movs	r4, #0
 800a6fa:	331c      	adds	r3, #28
 800a6fc:	001d      	movs	r5, r3
 800a6fe:	9304      	str	r3, [sp, #16]
 800a700:	9403      	str	r4, [sp, #12]
 800a702:	9409      	str	r4, [sp, #36]	; 0x24
 800a704:	9408      	str	r4, [sp, #32]
 800a706:	9401      	str	r4, [sp, #4]
 800a708:	9405      	str	r4, [sp, #20]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	2a00      	cmp	r2, #0
 800a70e:	d00a      	beq.n	800a726 <_scanf_float+0x62>
 800a710:	6833      	ldr	r3, [r6, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	2b4e      	cmp	r3, #78	; 0x4e
 800a716:	d844      	bhi.n	800a7a2 <_scanf_float+0xde>
 800a718:	0018      	movs	r0, r3
 800a71a:	2b40      	cmp	r3, #64	; 0x40
 800a71c:	d82c      	bhi.n	800a778 <_scanf_float+0xb4>
 800a71e:	382b      	subs	r0, #43	; 0x2b
 800a720:	b2c1      	uxtb	r1, r0
 800a722:	290e      	cmp	r1, #14
 800a724:	d92a      	bls.n	800a77c <_scanf_float+0xb8>
 800a726:	9b01      	ldr	r3, [sp, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d003      	beq.n	800a734 <_scanf_float+0x70>
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	4aa3      	ldr	r2, [pc, #652]	; (800a9bc <_scanf_float+0x2f8>)
 800a730:	4013      	ands	r3, r2
 800a732:	603b      	str	r3, [r7, #0]
 800a734:	9b03      	ldr	r3, [sp, #12]
 800a736:	3b01      	subs	r3, #1
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d900      	bls.n	800a73e <_scanf_float+0x7a>
 800a73c:	e0f9      	b.n	800a932 <_scanf_float+0x26e>
 800a73e:	24be      	movs	r4, #190	; 0xbe
 800a740:	0064      	lsls	r4, r4, #1
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	429d      	cmp	r5, r3
 800a746:	d900      	bls.n	800a74a <_scanf_float+0x86>
 800a748:	e0e9      	b.n	800a91e <_scanf_float+0x25a>
 800a74a:	2301      	movs	r3, #1
 800a74c:	9303      	str	r3, [sp, #12]
 800a74e:	e183      	b.n	800aa58 <_scanf_float+0x394>
 800a750:	0018      	movs	r0, r3
 800a752:	3861      	subs	r0, #97	; 0x61
 800a754:	280d      	cmp	r0, #13
 800a756:	d8e6      	bhi.n	800a726 <_scanf_float+0x62>
 800a758:	f7f5 fce8 	bl	800012c <__gnu_thumb1_case_shi>
 800a75c:	ffe50083 	.word	0xffe50083
 800a760:	ffe5ffe5 	.word	0xffe5ffe5
 800a764:	00a200b6 	.word	0x00a200b6
 800a768:	ffe5ffe5 	.word	0xffe5ffe5
 800a76c:	ffe50089 	.word	0xffe50089
 800a770:	ffe5ffe5 	.word	0xffe5ffe5
 800a774:	0065ffe5 	.word	0x0065ffe5
 800a778:	3841      	subs	r0, #65	; 0x41
 800a77a:	e7eb      	b.n	800a754 <_scanf_float+0x90>
 800a77c:	280e      	cmp	r0, #14
 800a77e:	d8d2      	bhi.n	800a726 <_scanf_float+0x62>
 800a780:	f7f5 fcd4 	bl	800012c <__gnu_thumb1_case_shi>
 800a784:	ffd1004b 	.word	0xffd1004b
 800a788:	0098004b 	.word	0x0098004b
 800a78c:	0020ffd1 	.word	0x0020ffd1
 800a790:	00400040 	.word	0x00400040
 800a794:	00400040 	.word	0x00400040
 800a798:	00400040 	.word	0x00400040
 800a79c:	00400040 	.word	0x00400040
 800a7a0:	0040      	.short	0x0040
 800a7a2:	2b6e      	cmp	r3, #110	; 0x6e
 800a7a4:	d809      	bhi.n	800a7ba <_scanf_float+0xf6>
 800a7a6:	2b60      	cmp	r3, #96	; 0x60
 800a7a8:	d8d2      	bhi.n	800a750 <_scanf_float+0x8c>
 800a7aa:	2b54      	cmp	r3, #84	; 0x54
 800a7ac:	d07d      	beq.n	800a8aa <_scanf_float+0x1e6>
 800a7ae:	2b59      	cmp	r3, #89	; 0x59
 800a7b0:	d1b9      	bne.n	800a726 <_scanf_float+0x62>
 800a7b2:	2c07      	cmp	r4, #7
 800a7b4:	d1b7      	bne.n	800a726 <_scanf_float+0x62>
 800a7b6:	2408      	movs	r4, #8
 800a7b8:	e02c      	b.n	800a814 <_scanf_float+0x150>
 800a7ba:	2b74      	cmp	r3, #116	; 0x74
 800a7bc:	d075      	beq.n	800a8aa <_scanf_float+0x1e6>
 800a7be:	2b79      	cmp	r3, #121	; 0x79
 800a7c0:	d0f7      	beq.n	800a7b2 <_scanf_float+0xee>
 800a7c2:	e7b0      	b.n	800a726 <_scanf_float+0x62>
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	05c8      	lsls	r0, r1, #23
 800a7c8:	d51c      	bpl.n	800a804 <_scanf_float+0x140>
 800a7ca:	2380      	movs	r3, #128	; 0x80
 800a7cc:	4399      	bics	r1, r3
 800a7ce:	9b01      	ldr	r3, [sp, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	9b06      	ldr	r3, [sp, #24]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d003      	beq.n	800a7e4 <_scanf_float+0x120>
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	3201      	adds	r2, #1
 800a7e0:	9306      	str	r3, [sp, #24]
 800a7e2:	60ba      	str	r2, [r7, #8]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	60bb      	str	r3, [r7, #8]
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	613b      	str	r3, [r7, #16]
 800a7f0:	6873      	ldr	r3, [r6, #4]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	6073      	str	r3, [r6, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	dc00      	bgt.n	800a7fc <_scanf_float+0x138>
 800a7fa:	e086      	b.n	800a90a <_scanf_float+0x246>
 800a7fc:	6833      	ldr	r3, [r6, #0]
 800a7fe:	3301      	adds	r3, #1
 800a800:	6033      	str	r3, [r6, #0]
 800a802:	e782      	b.n	800a70a <_scanf_float+0x46>
 800a804:	9a03      	ldr	r2, [sp, #12]
 800a806:	1912      	adds	r2, r2, r4
 800a808:	2a00      	cmp	r2, #0
 800a80a:	d18c      	bne.n	800a726 <_scanf_float+0x62>
 800a80c:	683a      	ldr	r2, [r7, #0]
 800a80e:	496c      	ldr	r1, [pc, #432]	; (800a9c0 <_scanf_float+0x2fc>)
 800a810:	400a      	ands	r2, r1
 800a812:	603a      	str	r2, [r7, #0]
 800a814:	702b      	strb	r3, [r5, #0]
 800a816:	3501      	adds	r5, #1
 800a818:	e7e4      	b.n	800a7e4 <_scanf_float+0x120>
 800a81a:	2180      	movs	r1, #128	; 0x80
 800a81c:	683a      	ldr	r2, [r7, #0]
 800a81e:	420a      	tst	r2, r1
 800a820:	d081      	beq.n	800a726 <_scanf_float+0x62>
 800a822:	438a      	bics	r2, r1
 800a824:	e7f5      	b.n	800a812 <_scanf_float+0x14e>
 800a826:	9a03      	ldr	r2, [sp, #12]
 800a828:	2a00      	cmp	r2, #0
 800a82a:	d10f      	bne.n	800a84c <_scanf_float+0x188>
 800a82c:	9a01      	ldr	r2, [sp, #4]
 800a82e:	2a00      	cmp	r2, #0
 800a830:	d10f      	bne.n	800a852 <_scanf_float+0x18e>
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	21e0      	movs	r1, #224	; 0xe0
 800a836:	0010      	movs	r0, r2
 800a838:	00c9      	lsls	r1, r1, #3
 800a83a:	4008      	ands	r0, r1
 800a83c:	4288      	cmp	r0, r1
 800a83e:	d108      	bne.n	800a852 <_scanf_float+0x18e>
 800a840:	4960      	ldr	r1, [pc, #384]	; (800a9c4 <_scanf_float+0x300>)
 800a842:	400a      	ands	r2, r1
 800a844:	603a      	str	r2, [r7, #0]
 800a846:	2201      	movs	r2, #1
 800a848:	9203      	str	r2, [sp, #12]
 800a84a:	e7e3      	b.n	800a814 <_scanf_float+0x150>
 800a84c:	9a03      	ldr	r2, [sp, #12]
 800a84e:	2a02      	cmp	r2, #2
 800a850:	d059      	beq.n	800a906 <_scanf_float+0x242>
 800a852:	2c01      	cmp	r4, #1
 800a854:	d002      	beq.n	800a85c <_scanf_float+0x198>
 800a856:	2c04      	cmp	r4, #4
 800a858:	d000      	beq.n	800a85c <_scanf_float+0x198>
 800a85a:	e764      	b.n	800a726 <_scanf_float+0x62>
 800a85c:	3401      	adds	r4, #1
 800a85e:	b2e4      	uxtb	r4, r4
 800a860:	e7d8      	b.n	800a814 <_scanf_float+0x150>
 800a862:	9a03      	ldr	r2, [sp, #12]
 800a864:	2a01      	cmp	r2, #1
 800a866:	d000      	beq.n	800a86a <_scanf_float+0x1a6>
 800a868:	e75d      	b.n	800a726 <_scanf_float+0x62>
 800a86a:	2202      	movs	r2, #2
 800a86c:	e7ec      	b.n	800a848 <_scanf_float+0x184>
 800a86e:	2c00      	cmp	r4, #0
 800a870:	d110      	bne.n	800a894 <_scanf_float+0x1d0>
 800a872:	9a01      	ldr	r2, [sp, #4]
 800a874:	2a00      	cmp	r2, #0
 800a876:	d000      	beq.n	800a87a <_scanf_float+0x1b6>
 800a878:	e758      	b.n	800a72c <_scanf_float+0x68>
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	21e0      	movs	r1, #224	; 0xe0
 800a87e:	0010      	movs	r0, r2
 800a880:	00c9      	lsls	r1, r1, #3
 800a882:	4008      	ands	r0, r1
 800a884:	4288      	cmp	r0, r1
 800a886:	d000      	beq.n	800a88a <_scanf_float+0x1c6>
 800a888:	e754      	b.n	800a734 <_scanf_float+0x70>
 800a88a:	494e      	ldr	r1, [pc, #312]	; (800a9c4 <_scanf_float+0x300>)
 800a88c:	3401      	adds	r4, #1
 800a88e:	400a      	ands	r2, r1
 800a890:	603a      	str	r2, [r7, #0]
 800a892:	e7bf      	b.n	800a814 <_scanf_float+0x150>
 800a894:	21fd      	movs	r1, #253	; 0xfd
 800a896:	1ee2      	subs	r2, r4, #3
 800a898:	420a      	tst	r2, r1
 800a89a:	d000      	beq.n	800a89e <_scanf_float+0x1da>
 800a89c:	e743      	b.n	800a726 <_scanf_float+0x62>
 800a89e:	e7dd      	b.n	800a85c <_scanf_float+0x198>
 800a8a0:	2c02      	cmp	r4, #2
 800a8a2:	d000      	beq.n	800a8a6 <_scanf_float+0x1e2>
 800a8a4:	e73f      	b.n	800a726 <_scanf_float+0x62>
 800a8a6:	2403      	movs	r4, #3
 800a8a8:	e7b4      	b.n	800a814 <_scanf_float+0x150>
 800a8aa:	2c06      	cmp	r4, #6
 800a8ac:	d000      	beq.n	800a8b0 <_scanf_float+0x1ec>
 800a8ae:	e73a      	b.n	800a726 <_scanf_float+0x62>
 800a8b0:	2407      	movs	r4, #7
 800a8b2:	e7af      	b.n	800a814 <_scanf_float+0x150>
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	0591      	lsls	r1, r2, #22
 800a8b8:	d400      	bmi.n	800a8bc <_scanf_float+0x1f8>
 800a8ba:	e734      	b.n	800a726 <_scanf_float+0x62>
 800a8bc:	4942      	ldr	r1, [pc, #264]	; (800a9c8 <_scanf_float+0x304>)
 800a8be:	400a      	ands	r2, r1
 800a8c0:	603a      	str	r2, [r7, #0]
 800a8c2:	9a01      	ldr	r2, [sp, #4]
 800a8c4:	9205      	str	r2, [sp, #20]
 800a8c6:	e7a5      	b.n	800a814 <_scanf_float+0x150>
 800a8c8:	21a0      	movs	r1, #160	; 0xa0
 800a8ca:	2080      	movs	r0, #128	; 0x80
 800a8cc:	683a      	ldr	r2, [r7, #0]
 800a8ce:	00c9      	lsls	r1, r1, #3
 800a8d0:	4011      	ands	r1, r2
 800a8d2:	00c0      	lsls	r0, r0, #3
 800a8d4:	4281      	cmp	r1, r0
 800a8d6:	d006      	beq.n	800a8e6 <_scanf_float+0x222>
 800a8d8:	4202      	tst	r2, r0
 800a8da:	d100      	bne.n	800a8de <_scanf_float+0x21a>
 800a8dc:	e723      	b.n	800a726 <_scanf_float+0x62>
 800a8de:	9901      	ldr	r1, [sp, #4]
 800a8e0:	2900      	cmp	r1, #0
 800a8e2:	d100      	bne.n	800a8e6 <_scanf_float+0x222>
 800a8e4:	e726      	b.n	800a734 <_scanf_float+0x70>
 800a8e6:	0591      	lsls	r1, r2, #22
 800a8e8:	d404      	bmi.n	800a8f4 <_scanf_float+0x230>
 800a8ea:	9901      	ldr	r1, [sp, #4]
 800a8ec:	9805      	ldr	r0, [sp, #20]
 800a8ee:	9509      	str	r5, [sp, #36]	; 0x24
 800a8f0:	1a09      	subs	r1, r1, r0
 800a8f2:	9108      	str	r1, [sp, #32]
 800a8f4:	4933      	ldr	r1, [pc, #204]	; (800a9c4 <_scanf_float+0x300>)
 800a8f6:	400a      	ands	r2, r1
 800a8f8:	21c0      	movs	r1, #192	; 0xc0
 800a8fa:	0049      	lsls	r1, r1, #1
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	603a      	str	r2, [r7, #0]
 800a900:	2200      	movs	r2, #0
 800a902:	9201      	str	r2, [sp, #4]
 800a904:	e786      	b.n	800a814 <_scanf_float+0x150>
 800a906:	2203      	movs	r2, #3
 800a908:	e79e      	b.n	800a848 <_scanf_float+0x184>
 800a90a:	23c0      	movs	r3, #192	; 0xc0
 800a90c:	005b      	lsls	r3, r3, #1
 800a90e:	0031      	movs	r1, r6
 800a910:	58fb      	ldr	r3, [r7, r3]
 800a912:	9802      	ldr	r0, [sp, #8]
 800a914:	4798      	blx	r3
 800a916:	2800      	cmp	r0, #0
 800a918:	d100      	bne.n	800a91c <_scanf_float+0x258>
 800a91a:	e6f6      	b.n	800a70a <_scanf_float+0x46>
 800a91c:	e703      	b.n	800a726 <_scanf_float+0x62>
 800a91e:	3d01      	subs	r5, #1
 800a920:	593b      	ldr	r3, [r7, r4]
 800a922:	0032      	movs	r2, r6
 800a924:	7829      	ldrb	r1, [r5, #0]
 800a926:	9802      	ldr	r0, [sp, #8]
 800a928:	4798      	blx	r3
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	613b      	str	r3, [r7, #16]
 800a930:	e707      	b.n	800a742 <_scanf_float+0x7e>
 800a932:	1e63      	subs	r3, r4, #1
 800a934:	2b06      	cmp	r3, #6
 800a936:	d80e      	bhi.n	800a956 <_scanf_float+0x292>
 800a938:	9503      	str	r5, [sp, #12]
 800a93a:	2c02      	cmp	r4, #2
 800a93c:	d920      	bls.n	800a980 <_scanf_float+0x2bc>
 800a93e:	1b63      	subs	r3, r4, r5
 800a940:	b2db      	uxtb	r3, r3
 800a942:	9306      	str	r3, [sp, #24]
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	9a06      	ldr	r2, [sp, #24]
 800a948:	189b      	adds	r3, r3, r2
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b03      	cmp	r3, #3
 800a94e:	d827      	bhi.n	800a9a0 <_scanf_float+0x2dc>
 800a950:	3c03      	subs	r4, #3
 800a952:	b2e4      	uxtb	r4, r4
 800a954:	1b2d      	subs	r5, r5, r4
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	05da      	lsls	r2, r3, #23
 800a95a:	d552      	bpl.n	800aa02 <_scanf_float+0x33e>
 800a95c:	055b      	lsls	r3, r3, #21
 800a95e:	d535      	bpl.n	800a9cc <_scanf_float+0x308>
 800a960:	24be      	movs	r4, #190	; 0xbe
 800a962:	0064      	lsls	r4, r4, #1
 800a964:	9b04      	ldr	r3, [sp, #16]
 800a966:	429d      	cmp	r5, r3
 800a968:	d800      	bhi.n	800a96c <_scanf_float+0x2a8>
 800a96a:	e6ee      	b.n	800a74a <_scanf_float+0x86>
 800a96c:	3d01      	subs	r5, #1
 800a96e:	593b      	ldr	r3, [r7, r4]
 800a970:	0032      	movs	r2, r6
 800a972:	7829      	ldrb	r1, [r5, #0]
 800a974:	9802      	ldr	r0, [sp, #8]
 800a976:	4798      	blx	r3
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	3b01      	subs	r3, #1
 800a97c:	613b      	str	r3, [r7, #16]
 800a97e:	e7f1      	b.n	800a964 <_scanf_float+0x2a0>
 800a980:	24be      	movs	r4, #190	; 0xbe
 800a982:	0064      	lsls	r4, r4, #1
 800a984:	9b04      	ldr	r3, [sp, #16]
 800a986:	429d      	cmp	r5, r3
 800a988:	d800      	bhi.n	800a98c <_scanf_float+0x2c8>
 800a98a:	e6de      	b.n	800a74a <_scanf_float+0x86>
 800a98c:	3d01      	subs	r5, #1
 800a98e:	593b      	ldr	r3, [r7, r4]
 800a990:	0032      	movs	r2, r6
 800a992:	7829      	ldrb	r1, [r5, #0]
 800a994:	9802      	ldr	r0, [sp, #8]
 800a996:	4798      	blx	r3
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	613b      	str	r3, [r7, #16]
 800a99e:	e7f1      	b.n	800a984 <_scanf_float+0x2c0>
 800a9a0:	9b03      	ldr	r3, [sp, #12]
 800a9a2:	0032      	movs	r2, r6
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	7819      	ldrb	r1, [r3, #0]
 800a9a8:	9303      	str	r3, [sp, #12]
 800a9aa:	23be      	movs	r3, #190	; 0xbe
 800a9ac:	005b      	lsls	r3, r3, #1
 800a9ae:	58fb      	ldr	r3, [r7, r3]
 800a9b0:	9802      	ldr	r0, [sp, #8]
 800a9b2:	4798      	blx	r3
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	613b      	str	r3, [r7, #16]
 800a9ba:	e7c3      	b.n	800a944 <_scanf_float+0x280>
 800a9bc:	fffffeff 	.word	0xfffffeff
 800a9c0:	fffffe7f 	.word	0xfffffe7f
 800a9c4:	fffff87f 	.word	0xfffff87f
 800a9c8:	fffffd7f 	.word	0xfffffd7f
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	1e6c      	subs	r4, r5, #1
 800a9d0:	7821      	ldrb	r1, [r4, #0]
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	613b      	str	r3, [r7, #16]
 800a9d6:	2965      	cmp	r1, #101	; 0x65
 800a9d8:	d00c      	beq.n	800a9f4 <_scanf_float+0x330>
 800a9da:	2945      	cmp	r1, #69	; 0x45
 800a9dc:	d00a      	beq.n	800a9f4 <_scanf_float+0x330>
 800a9de:	23be      	movs	r3, #190	; 0xbe
 800a9e0:	005b      	lsls	r3, r3, #1
 800a9e2:	58fb      	ldr	r3, [r7, r3]
 800a9e4:	0032      	movs	r2, r6
 800a9e6:	9802      	ldr	r0, [sp, #8]
 800a9e8:	4798      	blx	r3
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	1eac      	subs	r4, r5, #2
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	7821      	ldrb	r1, [r4, #0]
 800a9f2:	613b      	str	r3, [r7, #16]
 800a9f4:	23be      	movs	r3, #190	; 0xbe
 800a9f6:	005b      	lsls	r3, r3, #1
 800a9f8:	0032      	movs	r2, r6
 800a9fa:	58fb      	ldr	r3, [r7, r3]
 800a9fc:	9802      	ldr	r0, [sp, #8]
 800a9fe:	4798      	blx	r3
 800aa00:	0025      	movs	r5, r4
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	2310      	movs	r3, #16
 800aa06:	0011      	movs	r1, r2
 800aa08:	4019      	ands	r1, r3
 800aa0a:	9103      	str	r1, [sp, #12]
 800aa0c:	421a      	tst	r2, r3
 800aa0e:	d15b      	bne.n	800aac8 <_scanf_float+0x404>
 800aa10:	22c0      	movs	r2, #192	; 0xc0
 800aa12:	7029      	strb	r1, [r5, #0]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	00d2      	lsls	r2, r2, #3
 800aa18:	4013      	ands	r3, r2
 800aa1a:	2280      	movs	r2, #128	; 0x80
 800aa1c:	00d2      	lsls	r2, r2, #3
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d11d      	bne.n	800aa5e <_scanf_float+0x39a>
 800aa22:	9b05      	ldr	r3, [sp, #20]
 800aa24:	9a01      	ldr	r2, [sp, #4]
 800aa26:	9901      	ldr	r1, [sp, #4]
 800aa28:	1a9a      	subs	r2, r3, r2
 800aa2a:	428b      	cmp	r3, r1
 800aa2c:	d124      	bne.n	800aa78 <_scanf_float+0x3b4>
 800aa2e:	2200      	movs	r2, #0
 800aa30:	9904      	ldr	r1, [sp, #16]
 800aa32:	9802      	ldr	r0, [sp, #8]
 800aa34:	f002 fccc 	bl	800d3d0 <_strtod_r>
 800aa38:	9b07      	ldr	r3, [sp, #28]
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	0004      	movs	r4, r0
 800aa3e:	000d      	movs	r5, r1
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	0791      	lsls	r1, r2, #30
 800aa44:	d525      	bpl.n	800aa92 <_scanf_float+0x3ce>
 800aa46:	9907      	ldr	r1, [sp, #28]
 800aa48:	1d1a      	adds	r2, r3, #4
 800aa4a:	600a      	str	r2, [r1, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	601c      	str	r4, [r3, #0]
 800aa50:	605d      	str	r5, [r3, #4]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	3301      	adds	r3, #1
 800aa56:	60fb      	str	r3, [r7, #12]
 800aa58:	9803      	ldr	r0, [sp, #12]
 800aa5a:	b00b      	add	sp, #44	; 0x2c
 800aa5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa5e:	9b08      	ldr	r3, [sp, #32]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0e4      	beq.n	800aa2e <_scanf_float+0x36a>
 800aa64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa66:	9a03      	ldr	r2, [sp, #12]
 800aa68:	1c59      	adds	r1, r3, #1
 800aa6a:	9802      	ldr	r0, [sp, #8]
 800aa6c:	230a      	movs	r3, #10
 800aa6e:	f002 fd3d 	bl	800d4ec <_strtol_r>
 800aa72:	9b08      	ldr	r3, [sp, #32]
 800aa74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aa76:	1ac2      	subs	r2, r0, r3
 800aa78:	003b      	movs	r3, r7
 800aa7a:	3370      	adds	r3, #112	; 0x70
 800aa7c:	33ff      	adds	r3, #255	; 0xff
 800aa7e:	429d      	cmp	r5, r3
 800aa80:	d302      	bcc.n	800aa88 <_scanf_float+0x3c4>
 800aa82:	003d      	movs	r5, r7
 800aa84:	356f      	adds	r5, #111	; 0x6f
 800aa86:	35ff      	adds	r5, #255	; 0xff
 800aa88:	0028      	movs	r0, r5
 800aa8a:	4910      	ldr	r1, [pc, #64]	; (800aacc <_scanf_float+0x408>)
 800aa8c:	f000 f91a 	bl	800acc4 <siprintf>
 800aa90:	e7cd      	b.n	800aa2e <_scanf_float+0x36a>
 800aa92:	1d19      	adds	r1, r3, #4
 800aa94:	0752      	lsls	r2, r2, #29
 800aa96:	d502      	bpl.n	800aa9e <_scanf_float+0x3da>
 800aa98:	9a07      	ldr	r2, [sp, #28]
 800aa9a:	6011      	str	r1, [r2, #0]
 800aa9c:	e7d6      	b.n	800aa4c <_scanf_float+0x388>
 800aa9e:	9a07      	ldr	r2, [sp, #28]
 800aaa0:	0020      	movs	r0, r4
 800aaa2:	6011      	str	r1, [r2, #0]
 800aaa4:	681e      	ldr	r6, [r3, #0]
 800aaa6:	0022      	movs	r2, r4
 800aaa8:	002b      	movs	r3, r5
 800aaaa:	0029      	movs	r1, r5
 800aaac:	f7f7 ff26 	bl	80028fc <__aeabi_dcmpun>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d004      	beq.n	800aabe <_scanf_float+0x3fa>
 800aab4:	4806      	ldr	r0, [pc, #24]	; (800aad0 <_scanf_float+0x40c>)
 800aab6:	f000 fa03 	bl	800aec0 <nanf>
 800aaba:	6030      	str	r0, [r6, #0]
 800aabc:	e7c9      	b.n	800aa52 <_scanf_float+0x38e>
 800aabe:	0020      	movs	r0, r4
 800aac0:	0029      	movs	r1, r5
 800aac2:	f7f8 f80d 	bl	8002ae0 <__aeabi_d2f>
 800aac6:	e7f8      	b.n	800aaba <_scanf_float+0x3f6>
 800aac8:	2300      	movs	r3, #0
 800aaca:	e63f      	b.n	800a74c <_scanf_float+0x88>
 800aacc:	0800ed9c 	.word	0x0800ed9c
 800aad0:	0800f12d 	.word	0x0800f12d

0800aad4 <std>:
 800aad4:	2300      	movs	r3, #0
 800aad6:	b510      	push	{r4, lr}
 800aad8:	0004      	movs	r4, r0
 800aada:	6003      	str	r3, [r0, #0]
 800aadc:	6043      	str	r3, [r0, #4]
 800aade:	6083      	str	r3, [r0, #8]
 800aae0:	8181      	strh	r1, [r0, #12]
 800aae2:	6643      	str	r3, [r0, #100]	; 0x64
 800aae4:	81c2      	strh	r2, [r0, #14]
 800aae6:	6103      	str	r3, [r0, #16]
 800aae8:	6143      	str	r3, [r0, #20]
 800aaea:	6183      	str	r3, [r0, #24]
 800aaec:	0019      	movs	r1, r3
 800aaee:	2208      	movs	r2, #8
 800aaf0:	305c      	adds	r0, #92	; 0x5c
 800aaf2:	f000 f953 	bl	800ad9c <memset>
 800aaf6:	4b0b      	ldr	r3, [pc, #44]	; (800ab24 <std+0x50>)
 800aaf8:	6224      	str	r4, [r4, #32]
 800aafa:	6263      	str	r3, [r4, #36]	; 0x24
 800aafc:	4b0a      	ldr	r3, [pc, #40]	; (800ab28 <std+0x54>)
 800aafe:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab00:	4b0a      	ldr	r3, [pc, #40]	; (800ab2c <std+0x58>)
 800ab02:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab04:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <std+0x5c>)
 800ab06:	6323      	str	r3, [r4, #48]	; 0x30
 800ab08:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <std+0x60>)
 800ab0a:	429c      	cmp	r4, r3
 800ab0c:	d005      	beq.n	800ab1a <std+0x46>
 800ab0e:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <std+0x64>)
 800ab10:	429c      	cmp	r4, r3
 800ab12:	d002      	beq.n	800ab1a <std+0x46>
 800ab14:	4b09      	ldr	r3, [pc, #36]	; (800ab3c <std+0x68>)
 800ab16:	429c      	cmp	r4, r3
 800ab18:	d103      	bne.n	800ab22 <std+0x4e>
 800ab1a:	0020      	movs	r0, r4
 800ab1c:	3058      	adds	r0, #88	; 0x58
 800ab1e:	f000 f9c1 	bl	800aea4 <__retarget_lock_init_recursive>
 800ab22:	bd10      	pop	{r4, pc}
 800ab24:	0800ad05 	.word	0x0800ad05
 800ab28:	0800ad2d 	.word	0x0800ad2d
 800ab2c:	0800ad65 	.word	0x0800ad65
 800ab30:	0800ad91 	.word	0x0800ad91
 800ab34:	20000524 	.word	0x20000524
 800ab38:	2000058c 	.word	0x2000058c
 800ab3c:	200005f4 	.word	0x200005f4

0800ab40 <stdio_exit_handler>:
 800ab40:	b510      	push	{r4, lr}
 800ab42:	4a03      	ldr	r2, [pc, #12]	; (800ab50 <stdio_exit_handler+0x10>)
 800ab44:	4903      	ldr	r1, [pc, #12]	; (800ab54 <stdio_exit_handler+0x14>)
 800ab46:	4804      	ldr	r0, [pc, #16]	; (800ab58 <stdio_exit_handler+0x18>)
 800ab48:	f000 f86c 	bl	800ac24 <_fwalk_sglue>
 800ab4c:	bd10      	pop	{r4, pc}
 800ab4e:	46c0      	nop			; (mov r8, r8)
 800ab50:	20000024 	.word	0x20000024
 800ab54:	0800d8cd 	.word	0x0800d8cd
 800ab58:	20000030 	.word	0x20000030

0800ab5c <cleanup_stdio>:
 800ab5c:	6841      	ldr	r1, [r0, #4]
 800ab5e:	4b0b      	ldr	r3, [pc, #44]	; (800ab8c <cleanup_stdio+0x30>)
 800ab60:	b510      	push	{r4, lr}
 800ab62:	0004      	movs	r4, r0
 800ab64:	4299      	cmp	r1, r3
 800ab66:	d001      	beq.n	800ab6c <cleanup_stdio+0x10>
 800ab68:	f002 feb0 	bl	800d8cc <_fflush_r>
 800ab6c:	68a1      	ldr	r1, [r4, #8]
 800ab6e:	4b08      	ldr	r3, [pc, #32]	; (800ab90 <cleanup_stdio+0x34>)
 800ab70:	4299      	cmp	r1, r3
 800ab72:	d002      	beq.n	800ab7a <cleanup_stdio+0x1e>
 800ab74:	0020      	movs	r0, r4
 800ab76:	f002 fea9 	bl	800d8cc <_fflush_r>
 800ab7a:	68e1      	ldr	r1, [r4, #12]
 800ab7c:	4b05      	ldr	r3, [pc, #20]	; (800ab94 <cleanup_stdio+0x38>)
 800ab7e:	4299      	cmp	r1, r3
 800ab80:	d002      	beq.n	800ab88 <cleanup_stdio+0x2c>
 800ab82:	0020      	movs	r0, r4
 800ab84:	f002 fea2 	bl	800d8cc <_fflush_r>
 800ab88:	bd10      	pop	{r4, pc}
 800ab8a:	46c0      	nop			; (mov r8, r8)
 800ab8c:	20000524 	.word	0x20000524
 800ab90:	2000058c 	.word	0x2000058c
 800ab94:	200005f4 	.word	0x200005f4

0800ab98 <global_stdio_init.part.0>:
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <global_stdio_init.part.0+0x28>)
 800ab9c:	4a09      	ldr	r2, [pc, #36]	; (800abc4 <global_stdio_init.part.0+0x2c>)
 800ab9e:	2104      	movs	r1, #4
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	4809      	ldr	r0, [pc, #36]	; (800abc8 <global_stdio_init.part.0+0x30>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	f7ff ff95 	bl	800aad4 <std>
 800abaa:	2201      	movs	r2, #1
 800abac:	2109      	movs	r1, #9
 800abae:	4807      	ldr	r0, [pc, #28]	; (800abcc <global_stdio_init.part.0+0x34>)
 800abb0:	f7ff ff90 	bl	800aad4 <std>
 800abb4:	2202      	movs	r2, #2
 800abb6:	2112      	movs	r1, #18
 800abb8:	4805      	ldr	r0, [pc, #20]	; (800abd0 <global_stdio_init.part.0+0x38>)
 800abba:	f7ff ff8b 	bl	800aad4 <std>
 800abbe:	bd10      	pop	{r4, pc}
 800abc0:	2000065c 	.word	0x2000065c
 800abc4:	0800ab41 	.word	0x0800ab41
 800abc8:	20000524 	.word	0x20000524
 800abcc:	2000058c 	.word	0x2000058c
 800abd0:	200005f4 	.word	0x200005f4

0800abd4 <__sfp_lock_acquire>:
 800abd4:	b510      	push	{r4, lr}
 800abd6:	4802      	ldr	r0, [pc, #8]	; (800abe0 <__sfp_lock_acquire+0xc>)
 800abd8:	f000 f965 	bl	800aea6 <__retarget_lock_acquire_recursive>
 800abdc:	bd10      	pop	{r4, pc}
 800abde:	46c0      	nop			; (mov r8, r8)
 800abe0:	20000665 	.word	0x20000665

0800abe4 <__sfp_lock_release>:
 800abe4:	b510      	push	{r4, lr}
 800abe6:	4802      	ldr	r0, [pc, #8]	; (800abf0 <__sfp_lock_release+0xc>)
 800abe8:	f000 f95e 	bl	800aea8 <__retarget_lock_release_recursive>
 800abec:	bd10      	pop	{r4, pc}
 800abee:	46c0      	nop			; (mov r8, r8)
 800abf0:	20000665 	.word	0x20000665

0800abf4 <__sinit>:
 800abf4:	b510      	push	{r4, lr}
 800abf6:	0004      	movs	r4, r0
 800abf8:	f7ff ffec 	bl	800abd4 <__sfp_lock_acquire>
 800abfc:	6a23      	ldr	r3, [r4, #32]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d002      	beq.n	800ac08 <__sinit+0x14>
 800ac02:	f7ff ffef 	bl	800abe4 <__sfp_lock_release>
 800ac06:	bd10      	pop	{r4, pc}
 800ac08:	4b04      	ldr	r3, [pc, #16]	; (800ac1c <__sinit+0x28>)
 800ac0a:	6223      	str	r3, [r4, #32]
 800ac0c:	4b04      	ldr	r3, [pc, #16]	; (800ac20 <__sinit+0x2c>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1f6      	bne.n	800ac02 <__sinit+0xe>
 800ac14:	f7ff ffc0 	bl	800ab98 <global_stdio_init.part.0>
 800ac18:	e7f3      	b.n	800ac02 <__sinit+0xe>
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	0800ab5d 	.word	0x0800ab5d
 800ac20:	2000065c 	.word	0x2000065c

0800ac24 <_fwalk_sglue>:
 800ac24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac26:	0014      	movs	r4, r2
 800ac28:	2600      	movs	r6, #0
 800ac2a:	9000      	str	r0, [sp, #0]
 800ac2c:	9101      	str	r1, [sp, #4]
 800ac2e:	68a5      	ldr	r5, [r4, #8]
 800ac30:	6867      	ldr	r7, [r4, #4]
 800ac32:	3f01      	subs	r7, #1
 800ac34:	d504      	bpl.n	800ac40 <_fwalk_sglue+0x1c>
 800ac36:	6824      	ldr	r4, [r4, #0]
 800ac38:	2c00      	cmp	r4, #0
 800ac3a:	d1f8      	bne.n	800ac2e <_fwalk_sglue+0xa>
 800ac3c:	0030      	movs	r0, r6
 800ac3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac40:	89ab      	ldrh	r3, [r5, #12]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d908      	bls.n	800ac58 <_fwalk_sglue+0x34>
 800ac46:	220e      	movs	r2, #14
 800ac48:	5eab      	ldrsh	r3, [r5, r2]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	d004      	beq.n	800ac58 <_fwalk_sglue+0x34>
 800ac4e:	0029      	movs	r1, r5
 800ac50:	9800      	ldr	r0, [sp, #0]
 800ac52:	9b01      	ldr	r3, [sp, #4]
 800ac54:	4798      	blx	r3
 800ac56:	4306      	orrs	r6, r0
 800ac58:	3568      	adds	r5, #104	; 0x68
 800ac5a:	e7ea      	b.n	800ac32 <_fwalk_sglue+0xe>

0800ac5c <sniprintf>:
 800ac5c:	b40c      	push	{r2, r3}
 800ac5e:	b530      	push	{r4, r5, lr}
 800ac60:	4b17      	ldr	r3, [pc, #92]	; (800acc0 <sniprintf+0x64>)
 800ac62:	000c      	movs	r4, r1
 800ac64:	681d      	ldr	r5, [r3, #0]
 800ac66:	b09d      	sub	sp, #116	; 0x74
 800ac68:	2900      	cmp	r1, #0
 800ac6a:	da08      	bge.n	800ac7e <sniprintf+0x22>
 800ac6c:	238b      	movs	r3, #139	; 0x8b
 800ac6e:	2001      	movs	r0, #1
 800ac70:	602b      	str	r3, [r5, #0]
 800ac72:	4240      	negs	r0, r0
 800ac74:	b01d      	add	sp, #116	; 0x74
 800ac76:	bc30      	pop	{r4, r5}
 800ac78:	bc08      	pop	{r3}
 800ac7a:	b002      	add	sp, #8
 800ac7c:	4718      	bx	r3
 800ac7e:	2382      	movs	r3, #130	; 0x82
 800ac80:	466a      	mov	r2, sp
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	8293      	strh	r3, [r2, #20]
 800ac86:	2300      	movs	r3, #0
 800ac88:	9002      	str	r0, [sp, #8]
 800ac8a:	9006      	str	r0, [sp, #24]
 800ac8c:	4299      	cmp	r1, r3
 800ac8e:	d000      	beq.n	800ac92 <sniprintf+0x36>
 800ac90:	1e4b      	subs	r3, r1, #1
 800ac92:	9304      	str	r3, [sp, #16]
 800ac94:	9307      	str	r3, [sp, #28]
 800ac96:	2301      	movs	r3, #1
 800ac98:	466a      	mov	r2, sp
 800ac9a:	425b      	negs	r3, r3
 800ac9c:	82d3      	strh	r3, [r2, #22]
 800ac9e:	0028      	movs	r0, r5
 800aca0:	ab21      	add	r3, sp, #132	; 0x84
 800aca2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aca4:	a902      	add	r1, sp, #8
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	f002 fc86 	bl	800d5b8 <_svfiprintf_r>
 800acac:	1c43      	adds	r3, r0, #1
 800acae:	da01      	bge.n	800acb4 <sniprintf+0x58>
 800acb0:	238b      	movs	r3, #139	; 0x8b
 800acb2:	602b      	str	r3, [r5, #0]
 800acb4:	2c00      	cmp	r4, #0
 800acb6:	d0dd      	beq.n	800ac74 <sniprintf+0x18>
 800acb8:	2200      	movs	r2, #0
 800acba:	9b02      	ldr	r3, [sp, #8]
 800acbc:	701a      	strb	r2, [r3, #0]
 800acbe:	e7d9      	b.n	800ac74 <sniprintf+0x18>
 800acc0:	2000007c 	.word	0x2000007c

0800acc4 <siprintf>:
 800acc4:	b40e      	push	{r1, r2, r3}
 800acc6:	b500      	push	{lr}
 800acc8:	490b      	ldr	r1, [pc, #44]	; (800acf8 <siprintf+0x34>)
 800acca:	b09c      	sub	sp, #112	; 0x70
 800accc:	ab1d      	add	r3, sp, #116	; 0x74
 800acce:	9002      	str	r0, [sp, #8]
 800acd0:	9006      	str	r0, [sp, #24]
 800acd2:	9107      	str	r1, [sp, #28]
 800acd4:	9104      	str	r1, [sp, #16]
 800acd6:	4809      	ldr	r0, [pc, #36]	; (800acfc <siprintf+0x38>)
 800acd8:	4909      	ldr	r1, [pc, #36]	; (800ad00 <siprintf+0x3c>)
 800acda:	cb04      	ldmia	r3!, {r2}
 800acdc:	9105      	str	r1, [sp, #20]
 800acde:	6800      	ldr	r0, [r0, #0]
 800ace0:	a902      	add	r1, sp, #8
 800ace2:	9301      	str	r3, [sp, #4]
 800ace4:	f002 fc68 	bl	800d5b8 <_svfiprintf_r>
 800ace8:	2200      	movs	r2, #0
 800acea:	9b02      	ldr	r3, [sp, #8]
 800acec:	701a      	strb	r2, [r3, #0]
 800acee:	b01c      	add	sp, #112	; 0x70
 800acf0:	bc08      	pop	{r3}
 800acf2:	b003      	add	sp, #12
 800acf4:	4718      	bx	r3
 800acf6:	46c0      	nop			; (mov r8, r8)
 800acf8:	7fffffff 	.word	0x7fffffff
 800acfc:	2000007c 	.word	0x2000007c
 800ad00:	ffff0208 	.word	0xffff0208

0800ad04 <__sread>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	000c      	movs	r4, r1
 800ad08:	250e      	movs	r5, #14
 800ad0a:	5f49      	ldrsh	r1, [r1, r5]
 800ad0c:	f000 f878 	bl	800ae00 <_read_r>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	db03      	blt.n	800ad1c <__sread+0x18>
 800ad14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ad16:	181b      	adds	r3, r3, r0
 800ad18:	6563      	str	r3, [r4, #84]	; 0x54
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	4a02      	ldr	r2, [pc, #8]	; (800ad28 <__sread+0x24>)
 800ad20:	4013      	ands	r3, r2
 800ad22:	81a3      	strh	r3, [r4, #12]
 800ad24:	e7f9      	b.n	800ad1a <__sread+0x16>
 800ad26:	46c0      	nop			; (mov r8, r8)
 800ad28:	ffffefff 	.word	0xffffefff

0800ad2c <__swrite>:
 800ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2e:	001f      	movs	r7, r3
 800ad30:	898b      	ldrh	r3, [r1, #12]
 800ad32:	0005      	movs	r5, r0
 800ad34:	000c      	movs	r4, r1
 800ad36:	0016      	movs	r6, r2
 800ad38:	05db      	lsls	r3, r3, #23
 800ad3a:	d505      	bpl.n	800ad48 <__swrite+0x1c>
 800ad3c:	230e      	movs	r3, #14
 800ad3e:	5ec9      	ldrsh	r1, [r1, r3]
 800ad40:	2200      	movs	r2, #0
 800ad42:	2302      	movs	r3, #2
 800ad44:	f000 f848 	bl	800add8 <_lseek_r>
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	4a05      	ldr	r2, [pc, #20]	; (800ad60 <__swrite+0x34>)
 800ad4c:	0028      	movs	r0, r5
 800ad4e:	4013      	ands	r3, r2
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	0032      	movs	r2, r6
 800ad54:	230e      	movs	r3, #14
 800ad56:	5ee1      	ldrsh	r1, [r4, r3]
 800ad58:	003b      	movs	r3, r7
 800ad5a:	f000 f865 	bl	800ae28 <_write_r>
 800ad5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad60:	ffffefff 	.word	0xffffefff

0800ad64 <__sseek>:
 800ad64:	b570      	push	{r4, r5, r6, lr}
 800ad66:	000c      	movs	r4, r1
 800ad68:	250e      	movs	r5, #14
 800ad6a:	5f49      	ldrsh	r1, [r1, r5]
 800ad6c:	f000 f834 	bl	800add8 <_lseek_r>
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	1c42      	adds	r2, r0, #1
 800ad74:	d103      	bne.n	800ad7e <__sseek+0x1a>
 800ad76:	4a05      	ldr	r2, [pc, #20]	; (800ad8c <__sseek+0x28>)
 800ad78:	4013      	ands	r3, r2
 800ad7a:	81a3      	strh	r3, [r4, #12]
 800ad7c:	bd70      	pop	{r4, r5, r6, pc}
 800ad7e:	2280      	movs	r2, #128	; 0x80
 800ad80:	0152      	lsls	r2, r2, #5
 800ad82:	4313      	orrs	r3, r2
 800ad84:	81a3      	strh	r3, [r4, #12]
 800ad86:	6560      	str	r0, [r4, #84]	; 0x54
 800ad88:	e7f8      	b.n	800ad7c <__sseek+0x18>
 800ad8a:	46c0      	nop			; (mov r8, r8)
 800ad8c:	ffffefff 	.word	0xffffefff

0800ad90 <__sclose>:
 800ad90:	b510      	push	{r4, lr}
 800ad92:	230e      	movs	r3, #14
 800ad94:	5ec9      	ldrsh	r1, [r1, r3]
 800ad96:	f000 f80d 	bl	800adb4 <_close_r>
 800ad9a:	bd10      	pop	{r4, pc}

0800ad9c <memset>:
 800ad9c:	0003      	movs	r3, r0
 800ad9e:	1882      	adds	r2, r0, r2
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d100      	bne.n	800ada6 <memset+0xa>
 800ada4:	4770      	bx	lr
 800ada6:	7019      	strb	r1, [r3, #0]
 800ada8:	3301      	adds	r3, #1
 800adaa:	e7f9      	b.n	800ada0 <memset+0x4>

0800adac <_localeconv_r>:
 800adac:	4800      	ldr	r0, [pc, #0]	; (800adb0 <_localeconv_r+0x4>)
 800adae:	4770      	bx	lr
 800adb0:	20000170 	.word	0x20000170

0800adb4 <_close_r>:
 800adb4:	2300      	movs	r3, #0
 800adb6:	b570      	push	{r4, r5, r6, lr}
 800adb8:	4d06      	ldr	r5, [pc, #24]	; (800add4 <_close_r+0x20>)
 800adba:	0004      	movs	r4, r0
 800adbc:	0008      	movs	r0, r1
 800adbe:	602b      	str	r3, [r5, #0]
 800adc0:	f7f9 fb78 	bl	80044b4 <_close>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d103      	bne.n	800add0 <_close_r+0x1c>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d000      	beq.n	800add0 <_close_r+0x1c>
 800adce:	6023      	str	r3, [r4, #0]
 800add0:	bd70      	pop	{r4, r5, r6, pc}
 800add2:	46c0      	nop			; (mov r8, r8)
 800add4:	20000660 	.word	0x20000660

0800add8 <_lseek_r>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	0004      	movs	r4, r0
 800addc:	0008      	movs	r0, r1
 800adde:	0011      	movs	r1, r2
 800ade0:	001a      	movs	r2, r3
 800ade2:	2300      	movs	r3, #0
 800ade4:	4d05      	ldr	r5, [pc, #20]	; (800adfc <_lseek_r+0x24>)
 800ade6:	602b      	str	r3, [r5, #0]
 800ade8:	f7f9 fb85 	bl	80044f6 <_lseek>
 800adec:	1c43      	adds	r3, r0, #1
 800adee:	d103      	bne.n	800adf8 <_lseek_r+0x20>
 800adf0:	682b      	ldr	r3, [r5, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d000      	beq.n	800adf8 <_lseek_r+0x20>
 800adf6:	6023      	str	r3, [r4, #0]
 800adf8:	bd70      	pop	{r4, r5, r6, pc}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	20000660 	.word	0x20000660

0800ae00 <_read_r>:
 800ae00:	b570      	push	{r4, r5, r6, lr}
 800ae02:	0004      	movs	r4, r0
 800ae04:	0008      	movs	r0, r1
 800ae06:	0011      	movs	r1, r2
 800ae08:	001a      	movs	r2, r3
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	4d05      	ldr	r5, [pc, #20]	; (800ae24 <_read_r+0x24>)
 800ae0e:	602b      	str	r3, [r5, #0]
 800ae10:	f7f9 fb17 	bl	8004442 <_read>
 800ae14:	1c43      	adds	r3, r0, #1
 800ae16:	d103      	bne.n	800ae20 <_read_r+0x20>
 800ae18:	682b      	ldr	r3, [r5, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d000      	beq.n	800ae20 <_read_r+0x20>
 800ae1e:	6023      	str	r3, [r4, #0]
 800ae20:	bd70      	pop	{r4, r5, r6, pc}
 800ae22:	46c0      	nop			; (mov r8, r8)
 800ae24:	20000660 	.word	0x20000660

0800ae28 <_write_r>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	0004      	movs	r4, r0
 800ae2c:	0008      	movs	r0, r1
 800ae2e:	0011      	movs	r1, r2
 800ae30:	001a      	movs	r2, r3
 800ae32:	2300      	movs	r3, #0
 800ae34:	4d05      	ldr	r5, [pc, #20]	; (800ae4c <_write_r+0x24>)
 800ae36:	602b      	str	r3, [r5, #0]
 800ae38:	f7f9 fb20 	bl	800447c <_write>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d103      	bne.n	800ae48 <_write_r+0x20>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d000      	beq.n	800ae48 <_write_r+0x20>
 800ae46:	6023      	str	r3, [r4, #0]
 800ae48:	bd70      	pop	{r4, r5, r6, pc}
 800ae4a:	46c0      	nop			; (mov r8, r8)
 800ae4c:	20000660 	.word	0x20000660

0800ae50 <__errno>:
 800ae50:	4b01      	ldr	r3, [pc, #4]	; (800ae58 <__errno+0x8>)
 800ae52:	6818      	ldr	r0, [r3, #0]
 800ae54:	4770      	bx	lr
 800ae56:	46c0      	nop			; (mov r8, r8)
 800ae58:	2000007c 	.word	0x2000007c

0800ae5c <__libc_init_array>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	2600      	movs	r6, #0
 800ae60:	4c0c      	ldr	r4, [pc, #48]	; (800ae94 <__libc_init_array+0x38>)
 800ae62:	4d0d      	ldr	r5, [pc, #52]	; (800ae98 <__libc_init_array+0x3c>)
 800ae64:	1b64      	subs	r4, r4, r5
 800ae66:	10a4      	asrs	r4, r4, #2
 800ae68:	42a6      	cmp	r6, r4
 800ae6a:	d109      	bne.n	800ae80 <__libc_init_array+0x24>
 800ae6c:	2600      	movs	r6, #0
 800ae6e:	f003 fc71 	bl	800e754 <_init>
 800ae72:	4c0a      	ldr	r4, [pc, #40]	; (800ae9c <__libc_init_array+0x40>)
 800ae74:	4d0a      	ldr	r5, [pc, #40]	; (800aea0 <__libc_init_array+0x44>)
 800ae76:	1b64      	subs	r4, r4, r5
 800ae78:	10a4      	asrs	r4, r4, #2
 800ae7a:	42a6      	cmp	r6, r4
 800ae7c:	d105      	bne.n	800ae8a <__libc_init_array+0x2e>
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
 800ae80:	00b3      	lsls	r3, r6, #2
 800ae82:	58eb      	ldr	r3, [r5, r3]
 800ae84:	4798      	blx	r3
 800ae86:	3601      	adds	r6, #1
 800ae88:	e7ee      	b.n	800ae68 <__libc_init_array+0xc>
 800ae8a:	00b3      	lsls	r3, r6, #2
 800ae8c:	58eb      	ldr	r3, [r5, r3]
 800ae8e:	4798      	blx	r3
 800ae90:	3601      	adds	r6, #1
 800ae92:	e7f2      	b.n	800ae7a <__libc_init_array+0x1e>
 800ae94:	0800f198 	.word	0x0800f198
 800ae98:	0800f198 	.word	0x0800f198
 800ae9c:	0800f19c 	.word	0x0800f19c
 800aea0:	0800f198 	.word	0x0800f198

0800aea4 <__retarget_lock_init_recursive>:
 800aea4:	4770      	bx	lr

0800aea6 <__retarget_lock_acquire_recursive>:
 800aea6:	4770      	bx	lr

0800aea8 <__retarget_lock_release_recursive>:
 800aea8:	4770      	bx	lr

0800aeaa <memchr>:
 800aeaa:	b2c9      	uxtb	r1, r1
 800aeac:	1882      	adds	r2, r0, r2
 800aeae:	4290      	cmp	r0, r2
 800aeb0:	d101      	bne.n	800aeb6 <memchr+0xc>
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	4770      	bx	lr
 800aeb6:	7803      	ldrb	r3, [r0, #0]
 800aeb8:	428b      	cmp	r3, r1
 800aeba:	d0fb      	beq.n	800aeb4 <memchr+0xa>
 800aebc:	3001      	adds	r0, #1
 800aebe:	e7f6      	b.n	800aeae <memchr+0x4>

0800aec0 <nanf>:
 800aec0:	4800      	ldr	r0, [pc, #0]	; (800aec4 <nanf+0x4>)
 800aec2:	4770      	bx	lr
 800aec4:	7fc00000 	.word	0x7fc00000

0800aec8 <quorem>:
 800aec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeca:	6902      	ldr	r2, [r0, #16]
 800aecc:	690b      	ldr	r3, [r1, #16]
 800aece:	b089      	sub	sp, #36	; 0x24
 800aed0:	0007      	movs	r7, r0
 800aed2:	9104      	str	r1, [sp, #16]
 800aed4:	2000      	movs	r0, #0
 800aed6:	429a      	cmp	r2, r3
 800aed8:	db69      	blt.n	800afae <quorem+0xe6>
 800aeda:	3b01      	subs	r3, #1
 800aedc:	009c      	lsls	r4, r3, #2
 800aede:	9301      	str	r3, [sp, #4]
 800aee0:	000b      	movs	r3, r1
 800aee2:	3314      	adds	r3, #20
 800aee4:	9306      	str	r3, [sp, #24]
 800aee6:	191b      	adds	r3, r3, r4
 800aee8:	9305      	str	r3, [sp, #20]
 800aeea:	003b      	movs	r3, r7
 800aeec:	3314      	adds	r3, #20
 800aeee:	9303      	str	r3, [sp, #12]
 800aef0:	191c      	adds	r4, r3, r4
 800aef2:	9b05      	ldr	r3, [sp, #20]
 800aef4:	6826      	ldr	r6, [r4, #0]
 800aef6:	681d      	ldr	r5, [r3, #0]
 800aef8:	0030      	movs	r0, r6
 800aefa:	3501      	adds	r5, #1
 800aefc:	0029      	movs	r1, r5
 800aefe:	f7f5 f91f 	bl	8000140 <__udivsi3>
 800af02:	9002      	str	r0, [sp, #8]
 800af04:	42ae      	cmp	r6, r5
 800af06:	d329      	bcc.n	800af5c <quorem+0x94>
 800af08:	9b06      	ldr	r3, [sp, #24]
 800af0a:	2600      	movs	r6, #0
 800af0c:	469c      	mov	ip, r3
 800af0e:	9d03      	ldr	r5, [sp, #12]
 800af10:	9606      	str	r6, [sp, #24]
 800af12:	4662      	mov	r2, ip
 800af14:	ca08      	ldmia	r2!, {r3}
 800af16:	6828      	ldr	r0, [r5, #0]
 800af18:	4694      	mov	ip, r2
 800af1a:	9a02      	ldr	r2, [sp, #8]
 800af1c:	b299      	uxth	r1, r3
 800af1e:	4351      	muls	r1, r2
 800af20:	0c1b      	lsrs	r3, r3, #16
 800af22:	4353      	muls	r3, r2
 800af24:	1989      	adds	r1, r1, r6
 800af26:	0c0a      	lsrs	r2, r1, #16
 800af28:	189b      	adds	r3, r3, r2
 800af2a:	9307      	str	r3, [sp, #28]
 800af2c:	0c1e      	lsrs	r6, r3, #16
 800af2e:	9b06      	ldr	r3, [sp, #24]
 800af30:	b282      	uxth	r2, r0
 800af32:	18d2      	adds	r2, r2, r3
 800af34:	466b      	mov	r3, sp
 800af36:	b289      	uxth	r1, r1
 800af38:	8b9b      	ldrh	r3, [r3, #28]
 800af3a:	1a52      	subs	r2, r2, r1
 800af3c:	0c01      	lsrs	r1, r0, #16
 800af3e:	1ac9      	subs	r1, r1, r3
 800af40:	1413      	asrs	r3, r2, #16
 800af42:	18cb      	adds	r3, r1, r3
 800af44:	1419      	asrs	r1, r3, #16
 800af46:	b292      	uxth	r2, r2
 800af48:	041b      	lsls	r3, r3, #16
 800af4a:	4313      	orrs	r3, r2
 800af4c:	c508      	stmia	r5!, {r3}
 800af4e:	9b05      	ldr	r3, [sp, #20]
 800af50:	9106      	str	r1, [sp, #24]
 800af52:	4563      	cmp	r3, ip
 800af54:	d2dd      	bcs.n	800af12 <quorem+0x4a>
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d030      	beq.n	800afbe <quorem+0xf6>
 800af5c:	0038      	movs	r0, r7
 800af5e:	9904      	ldr	r1, [sp, #16]
 800af60:	f001 fa2a 	bl	800c3b8 <__mcmp>
 800af64:	2800      	cmp	r0, #0
 800af66:	db21      	blt.n	800afac <quorem+0xe4>
 800af68:	0038      	movs	r0, r7
 800af6a:	2600      	movs	r6, #0
 800af6c:	9b02      	ldr	r3, [sp, #8]
 800af6e:	9c04      	ldr	r4, [sp, #16]
 800af70:	3301      	adds	r3, #1
 800af72:	9302      	str	r3, [sp, #8]
 800af74:	3014      	adds	r0, #20
 800af76:	3414      	adds	r4, #20
 800af78:	6803      	ldr	r3, [r0, #0]
 800af7a:	cc02      	ldmia	r4!, {r1}
 800af7c:	b29d      	uxth	r5, r3
 800af7e:	19ad      	adds	r5, r5, r6
 800af80:	b28a      	uxth	r2, r1
 800af82:	1aaa      	subs	r2, r5, r2
 800af84:	0c09      	lsrs	r1, r1, #16
 800af86:	0c1b      	lsrs	r3, r3, #16
 800af88:	1a5b      	subs	r3, r3, r1
 800af8a:	1411      	asrs	r1, r2, #16
 800af8c:	185b      	adds	r3, r3, r1
 800af8e:	141e      	asrs	r6, r3, #16
 800af90:	b292      	uxth	r2, r2
 800af92:	041b      	lsls	r3, r3, #16
 800af94:	4313      	orrs	r3, r2
 800af96:	c008      	stmia	r0!, {r3}
 800af98:	9b05      	ldr	r3, [sp, #20]
 800af9a:	42a3      	cmp	r3, r4
 800af9c:	d2ec      	bcs.n	800af78 <quorem+0xb0>
 800af9e:	9b01      	ldr	r3, [sp, #4]
 800afa0:	9a03      	ldr	r2, [sp, #12]
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	18d3      	adds	r3, r2, r3
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	2a00      	cmp	r2, #0
 800afaa:	d015      	beq.n	800afd8 <quorem+0x110>
 800afac:	9802      	ldr	r0, [sp, #8]
 800afae:	b009      	add	sp, #36	; 0x24
 800afb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d106      	bne.n	800afc6 <quorem+0xfe>
 800afb8:	9b01      	ldr	r3, [sp, #4]
 800afba:	3b01      	subs	r3, #1
 800afbc:	9301      	str	r3, [sp, #4]
 800afbe:	9b03      	ldr	r3, [sp, #12]
 800afc0:	3c04      	subs	r4, #4
 800afc2:	42a3      	cmp	r3, r4
 800afc4:	d3f5      	bcc.n	800afb2 <quorem+0xea>
 800afc6:	9b01      	ldr	r3, [sp, #4]
 800afc8:	613b      	str	r3, [r7, #16]
 800afca:	e7c7      	b.n	800af5c <quorem+0x94>
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	2a00      	cmp	r2, #0
 800afd0:	d106      	bne.n	800afe0 <quorem+0x118>
 800afd2:	9a01      	ldr	r2, [sp, #4]
 800afd4:	3a01      	subs	r2, #1
 800afd6:	9201      	str	r2, [sp, #4]
 800afd8:	9a03      	ldr	r2, [sp, #12]
 800afda:	3b04      	subs	r3, #4
 800afdc:	429a      	cmp	r2, r3
 800afde:	d3f5      	bcc.n	800afcc <quorem+0x104>
 800afe0:	9b01      	ldr	r3, [sp, #4]
 800afe2:	613b      	str	r3, [r7, #16]
 800afe4:	e7e2      	b.n	800afac <quorem+0xe4>
	...

0800afe8 <_dtoa_r>:
 800afe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afea:	0014      	movs	r4, r2
 800afec:	001d      	movs	r5, r3
 800afee:	69c6      	ldr	r6, [r0, #28]
 800aff0:	b09d      	sub	sp, #116	; 0x74
 800aff2:	9408      	str	r4, [sp, #32]
 800aff4:	9509      	str	r5, [sp, #36]	; 0x24
 800aff6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800aff8:	9004      	str	r0, [sp, #16]
 800affa:	2e00      	cmp	r6, #0
 800affc:	d10f      	bne.n	800b01e <_dtoa_r+0x36>
 800affe:	2010      	movs	r0, #16
 800b000:	f000 fe4a 	bl	800bc98 <malloc>
 800b004:	9b04      	ldr	r3, [sp, #16]
 800b006:	1e02      	subs	r2, r0, #0
 800b008:	61d8      	str	r0, [r3, #28]
 800b00a:	d104      	bne.n	800b016 <_dtoa_r+0x2e>
 800b00c:	21ef      	movs	r1, #239	; 0xef
 800b00e:	4bc6      	ldr	r3, [pc, #792]	; (800b328 <_dtoa_r+0x340>)
 800b010:	48c6      	ldr	r0, [pc, #792]	; (800b32c <_dtoa_r+0x344>)
 800b012:	f002 fccd 	bl	800d9b0 <__assert_func>
 800b016:	6046      	str	r6, [r0, #4]
 800b018:	6086      	str	r6, [r0, #8]
 800b01a:	6006      	str	r6, [r0, #0]
 800b01c:	60c6      	str	r6, [r0, #12]
 800b01e:	9b04      	ldr	r3, [sp, #16]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	6819      	ldr	r1, [r3, #0]
 800b024:	2900      	cmp	r1, #0
 800b026:	d00b      	beq.n	800b040 <_dtoa_r+0x58>
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	2301      	movs	r3, #1
 800b02c:	4093      	lsls	r3, r2
 800b02e:	604a      	str	r2, [r1, #4]
 800b030:	608b      	str	r3, [r1, #8]
 800b032:	9804      	ldr	r0, [sp, #16]
 800b034:	f000 ff32 	bl	800be9c <_Bfree>
 800b038:	2200      	movs	r2, #0
 800b03a:	9b04      	ldr	r3, [sp, #16]
 800b03c:	69db      	ldr	r3, [r3, #28]
 800b03e:	601a      	str	r2, [r3, #0]
 800b040:	2d00      	cmp	r5, #0
 800b042:	da1e      	bge.n	800b082 <_dtoa_r+0x9a>
 800b044:	2301      	movs	r3, #1
 800b046:	603b      	str	r3, [r7, #0]
 800b048:	006b      	lsls	r3, r5, #1
 800b04a:	085b      	lsrs	r3, r3, #1
 800b04c:	9309      	str	r3, [sp, #36]	; 0x24
 800b04e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b050:	4bb7      	ldr	r3, [pc, #732]	; (800b330 <_dtoa_r+0x348>)
 800b052:	4ab7      	ldr	r2, [pc, #732]	; (800b330 <_dtoa_r+0x348>)
 800b054:	403b      	ands	r3, r7
 800b056:	4293      	cmp	r3, r2
 800b058:	d116      	bne.n	800b088 <_dtoa_r+0xa0>
 800b05a:	4bb6      	ldr	r3, [pc, #728]	; (800b334 <_dtoa_r+0x34c>)
 800b05c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	033b      	lsls	r3, r7, #12
 800b062:	0b1b      	lsrs	r3, r3, #12
 800b064:	4323      	orrs	r3, r4
 800b066:	d101      	bne.n	800b06c <_dtoa_r+0x84>
 800b068:	f000 fdb5 	bl	800bbd6 <_dtoa_r+0xbee>
 800b06c:	4bb2      	ldr	r3, [pc, #712]	; (800b338 <_dtoa_r+0x350>)
 800b06e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b070:	9306      	str	r3, [sp, #24]
 800b072:	2a00      	cmp	r2, #0
 800b074:	d002      	beq.n	800b07c <_dtoa_r+0x94>
 800b076:	4bb1      	ldr	r3, [pc, #708]	; (800b33c <_dtoa_r+0x354>)
 800b078:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b07a:	6013      	str	r3, [r2, #0]
 800b07c:	9806      	ldr	r0, [sp, #24]
 800b07e:	b01d      	add	sp, #116	; 0x74
 800b080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b082:	2300      	movs	r3, #0
 800b084:	603b      	str	r3, [r7, #0]
 800b086:	e7e2      	b.n	800b04e <_dtoa_r+0x66>
 800b088:	9a08      	ldr	r2, [sp, #32]
 800b08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08c:	9210      	str	r2, [sp, #64]	; 0x40
 800b08e:	9311      	str	r3, [sp, #68]	; 0x44
 800b090:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b092:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b094:	2200      	movs	r2, #0
 800b096:	2300      	movs	r3, #0
 800b098:	f7f5 f9d8 	bl	800044c <__aeabi_dcmpeq>
 800b09c:	1e06      	subs	r6, r0, #0
 800b09e:	d009      	beq.n	800b0b4 <_dtoa_r+0xcc>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b0a4:	6013      	str	r3, [r2, #0]
 800b0a6:	4ba6      	ldr	r3, [pc, #664]	; (800b340 <_dtoa_r+0x358>)
 800b0a8:	9306      	str	r3, [sp, #24]
 800b0aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d0e5      	beq.n	800b07c <_dtoa_r+0x94>
 800b0b0:	4ba4      	ldr	r3, [pc, #656]	; (800b344 <_dtoa_r+0x35c>)
 800b0b2:	e7e1      	b.n	800b078 <_dtoa_r+0x90>
 800b0b4:	ab1a      	add	r3, sp, #104	; 0x68
 800b0b6:	9301      	str	r3, [sp, #4]
 800b0b8:	ab1b      	add	r3, sp, #108	; 0x6c
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	9804      	ldr	r0, [sp, #16]
 800b0be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0c2:	f001 fa95 	bl	800c5f0 <__d2b>
 800b0c6:	007a      	lsls	r2, r7, #1
 800b0c8:	9005      	str	r0, [sp, #20]
 800b0ca:	0d52      	lsrs	r2, r2, #21
 800b0cc:	d100      	bne.n	800b0d0 <_dtoa_r+0xe8>
 800b0ce:	e07b      	b.n	800b1c8 <_dtoa_r+0x1e0>
 800b0d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0d2:	9617      	str	r6, [sp, #92]	; 0x5c
 800b0d4:	0319      	lsls	r1, r3, #12
 800b0d6:	4b9c      	ldr	r3, [pc, #624]	; (800b348 <_dtoa_r+0x360>)
 800b0d8:	0b09      	lsrs	r1, r1, #12
 800b0da:	430b      	orrs	r3, r1
 800b0dc:	499b      	ldr	r1, [pc, #620]	; (800b34c <_dtoa_r+0x364>)
 800b0de:	1857      	adds	r7, r2, r1
 800b0e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b0e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b0e4:	0019      	movs	r1, r3
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	4b99      	ldr	r3, [pc, #612]	; (800b350 <_dtoa_r+0x368>)
 800b0ea:	f7f7 f885 	bl	80021f8 <__aeabi_dsub>
 800b0ee:	4a99      	ldr	r2, [pc, #612]	; (800b354 <_dtoa_r+0x36c>)
 800b0f0:	4b99      	ldr	r3, [pc, #612]	; (800b358 <_dtoa_r+0x370>)
 800b0f2:	f7f6 fdbf 	bl	8001c74 <__aeabi_dmul>
 800b0f6:	4a99      	ldr	r2, [pc, #612]	; (800b35c <_dtoa_r+0x374>)
 800b0f8:	4b99      	ldr	r3, [pc, #612]	; (800b360 <_dtoa_r+0x378>)
 800b0fa:	f7f5 fe61 	bl	8000dc0 <__aeabi_dadd>
 800b0fe:	0004      	movs	r4, r0
 800b100:	0038      	movs	r0, r7
 800b102:	000d      	movs	r5, r1
 800b104:	f7f7 fc4e 	bl	80029a4 <__aeabi_i2d>
 800b108:	4a96      	ldr	r2, [pc, #600]	; (800b364 <_dtoa_r+0x37c>)
 800b10a:	4b97      	ldr	r3, [pc, #604]	; (800b368 <_dtoa_r+0x380>)
 800b10c:	f7f6 fdb2 	bl	8001c74 <__aeabi_dmul>
 800b110:	0002      	movs	r2, r0
 800b112:	000b      	movs	r3, r1
 800b114:	0020      	movs	r0, r4
 800b116:	0029      	movs	r1, r5
 800b118:	f7f5 fe52 	bl	8000dc0 <__aeabi_dadd>
 800b11c:	0004      	movs	r4, r0
 800b11e:	000d      	movs	r5, r1
 800b120:	f7f7 fc0a 	bl	8002938 <__aeabi_d2iz>
 800b124:	2200      	movs	r2, #0
 800b126:	9003      	str	r0, [sp, #12]
 800b128:	2300      	movs	r3, #0
 800b12a:	0020      	movs	r0, r4
 800b12c:	0029      	movs	r1, r5
 800b12e:	f7f5 f993 	bl	8000458 <__aeabi_dcmplt>
 800b132:	2800      	cmp	r0, #0
 800b134:	d00b      	beq.n	800b14e <_dtoa_r+0x166>
 800b136:	9803      	ldr	r0, [sp, #12]
 800b138:	f7f7 fc34 	bl	80029a4 <__aeabi_i2d>
 800b13c:	002b      	movs	r3, r5
 800b13e:	0022      	movs	r2, r4
 800b140:	f7f5 f984 	bl	800044c <__aeabi_dcmpeq>
 800b144:	4243      	negs	r3, r0
 800b146:	4158      	adcs	r0, r3
 800b148:	9b03      	ldr	r3, [sp, #12]
 800b14a:	1a1b      	subs	r3, r3, r0
 800b14c:	9303      	str	r3, [sp, #12]
 800b14e:	2301      	movs	r3, #1
 800b150:	9316      	str	r3, [sp, #88]	; 0x58
 800b152:	9b03      	ldr	r3, [sp, #12]
 800b154:	2b16      	cmp	r3, #22
 800b156:	d810      	bhi.n	800b17a <_dtoa_r+0x192>
 800b158:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b15a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b15c:	9a03      	ldr	r2, [sp, #12]
 800b15e:	4b83      	ldr	r3, [pc, #524]	; (800b36c <_dtoa_r+0x384>)
 800b160:	00d2      	lsls	r2, r2, #3
 800b162:	189b      	adds	r3, r3, r2
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	f7f5 f976 	bl	8000458 <__aeabi_dcmplt>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d047      	beq.n	800b200 <_dtoa_r+0x218>
 800b170:	9b03      	ldr	r3, [sp, #12]
 800b172:	3b01      	subs	r3, #1
 800b174:	9303      	str	r3, [sp, #12]
 800b176:	2300      	movs	r3, #0
 800b178:	9316      	str	r3, [sp, #88]	; 0x58
 800b17a:	2200      	movs	r2, #0
 800b17c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b17e:	920a      	str	r2, [sp, #40]	; 0x28
 800b180:	1bdb      	subs	r3, r3, r7
 800b182:	1e5a      	subs	r2, r3, #1
 800b184:	d53e      	bpl.n	800b204 <_dtoa_r+0x21c>
 800b186:	2201      	movs	r2, #1
 800b188:	1ad3      	subs	r3, r2, r3
 800b18a:	930a      	str	r3, [sp, #40]	; 0x28
 800b18c:	2300      	movs	r3, #0
 800b18e:	930c      	str	r3, [sp, #48]	; 0x30
 800b190:	9b03      	ldr	r3, [sp, #12]
 800b192:	2b00      	cmp	r3, #0
 800b194:	db38      	blt.n	800b208 <_dtoa_r+0x220>
 800b196:	9a03      	ldr	r2, [sp, #12]
 800b198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b19a:	4694      	mov	ip, r2
 800b19c:	4463      	add	r3, ip
 800b19e:	930c      	str	r3, [sp, #48]	; 0x30
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	9213      	str	r2, [sp, #76]	; 0x4c
 800b1a4:	930d      	str	r3, [sp, #52]	; 0x34
 800b1a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1a8:	2401      	movs	r4, #1
 800b1aa:	2b09      	cmp	r3, #9
 800b1ac:	d867      	bhi.n	800b27e <_dtoa_r+0x296>
 800b1ae:	2b05      	cmp	r3, #5
 800b1b0:	dd02      	ble.n	800b1b8 <_dtoa_r+0x1d0>
 800b1b2:	2400      	movs	r4, #0
 800b1b4:	3b04      	subs	r3, #4
 800b1b6:	9322      	str	r3, [sp, #136]	; 0x88
 800b1b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1ba:	1e98      	subs	r0, r3, #2
 800b1bc:	2803      	cmp	r0, #3
 800b1be:	d867      	bhi.n	800b290 <_dtoa_r+0x2a8>
 800b1c0:	f7f4 ffaa 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b1c4:	5b383a2b 	.word	0x5b383a2b
 800b1c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1ca:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800b1cc:	18f6      	adds	r6, r6, r3
 800b1ce:	4b68      	ldr	r3, [pc, #416]	; (800b370 <_dtoa_r+0x388>)
 800b1d0:	18f2      	adds	r2, r6, r3
 800b1d2:	2a20      	cmp	r2, #32
 800b1d4:	dd0f      	ble.n	800b1f6 <_dtoa_r+0x20e>
 800b1d6:	2340      	movs	r3, #64	; 0x40
 800b1d8:	1a9b      	subs	r3, r3, r2
 800b1da:	409f      	lsls	r7, r3
 800b1dc:	4b65      	ldr	r3, [pc, #404]	; (800b374 <_dtoa_r+0x38c>)
 800b1de:	0038      	movs	r0, r7
 800b1e0:	18f3      	adds	r3, r6, r3
 800b1e2:	40dc      	lsrs	r4, r3
 800b1e4:	4320      	orrs	r0, r4
 800b1e6:	f7f7 fc0d 	bl	8002a04 <__aeabi_ui2d>
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	4b62      	ldr	r3, [pc, #392]	; (800b378 <_dtoa_r+0x390>)
 800b1ee:	1e77      	subs	r7, r6, #1
 800b1f0:	18cb      	adds	r3, r1, r3
 800b1f2:	9217      	str	r2, [sp, #92]	; 0x5c
 800b1f4:	e776      	b.n	800b0e4 <_dtoa_r+0xfc>
 800b1f6:	2320      	movs	r3, #32
 800b1f8:	0020      	movs	r0, r4
 800b1fa:	1a9b      	subs	r3, r3, r2
 800b1fc:	4098      	lsls	r0, r3
 800b1fe:	e7f2      	b.n	800b1e6 <_dtoa_r+0x1fe>
 800b200:	9016      	str	r0, [sp, #88]	; 0x58
 800b202:	e7ba      	b.n	800b17a <_dtoa_r+0x192>
 800b204:	920c      	str	r2, [sp, #48]	; 0x30
 800b206:	e7c3      	b.n	800b190 <_dtoa_r+0x1a8>
 800b208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b20a:	9a03      	ldr	r2, [sp, #12]
 800b20c:	1a9b      	subs	r3, r3, r2
 800b20e:	930a      	str	r3, [sp, #40]	; 0x28
 800b210:	4253      	negs	r3, r2
 800b212:	930d      	str	r3, [sp, #52]	; 0x34
 800b214:	2300      	movs	r3, #0
 800b216:	9313      	str	r3, [sp, #76]	; 0x4c
 800b218:	e7c5      	b.n	800b1a6 <_dtoa_r+0x1be>
 800b21a:	2300      	movs	r3, #0
 800b21c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b21e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b220:	930b      	str	r3, [sp, #44]	; 0x2c
 800b222:	9307      	str	r3, [sp, #28]
 800b224:	2b00      	cmp	r3, #0
 800b226:	dc13      	bgt.n	800b250 <_dtoa_r+0x268>
 800b228:	2301      	movs	r3, #1
 800b22a:	001a      	movs	r2, r3
 800b22c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b22e:	9307      	str	r3, [sp, #28]
 800b230:	9223      	str	r2, [sp, #140]	; 0x8c
 800b232:	e00d      	b.n	800b250 <_dtoa_r+0x268>
 800b234:	2301      	movs	r3, #1
 800b236:	e7f1      	b.n	800b21c <_dtoa_r+0x234>
 800b238:	2300      	movs	r3, #0
 800b23a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b23c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b23e:	4694      	mov	ip, r2
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	4463      	add	r3, ip
 800b244:	930b      	str	r3, [sp, #44]	; 0x2c
 800b246:	3301      	adds	r3, #1
 800b248:	9307      	str	r3, [sp, #28]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	dc00      	bgt.n	800b250 <_dtoa_r+0x268>
 800b24e:	2301      	movs	r3, #1
 800b250:	9a04      	ldr	r2, [sp, #16]
 800b252:	2100      	movs	r1, #0
 800b254:	69d0      	ldr	r0, [r2, #28]
 800b256:	2204      	movs	r2, #4
 800b258:	0015      	movs	r5, r2
 800b25a:	3514      	adds	r5, #20
 800b25c:	429d      	cmp	r5, r3
 800b25e:	d91b      	bls.n	800b298 <_dtoa_r+0x2b0>
 800b260:	6041      	str	r1, [r0, #4]
 800b262:	9804      	ldr	r0, [sp, #16]
 800b264:	f000 fdd6 	bl	800be14 <_Balloc>
 800b268:	9006      	str	r0, [sp, #24]
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d117      	bne.n	800b29e <_dtoa_r+0x2b6>
 800b26e:	21b0      	movs	r1, #176	; 0xb0
 800b270:	4b42      	ldr	r3, [pc, #264]	; (800b37c <_dtoa_r+0x394>)
 800b272:	482e      	ldr	r0, [pc, #184]	; (800b32c <_dtoa_r+0x344>)
 800b274:	9a06      	ldr	r2, [sp, #24]
 800b276:	31ff      	adds	r1, #255	; 0xff
 800b278:	e6cb      	b.n	800b012 <_dtoa_r+0x2a>
 800b27a:	2301      	movs	r3, #1
 800b27c:	e7dd      	b.n	800b23a <_dtoa_r+0x252>
 800b27e:	2300      	movs	r3, #0
 800b280:	940f      	str	r4, [sp, #60]	; 0x3c
 800b282:	9322      	str	r3, [sp, #136]	; 0x88
 800b284:	3b01      	subs	r3, #1
 800b286:	930b      	str	r3, [sp, #44]	; 0x2c
 800b288:	9307      	str	r3, [sp, #28]
 800b28a:	2200      	movs	r2, #0
 800b28c:	3313      	adds	r3, #19
 800b28e:	e7cf      	b.n	800b230 <_dtoa_r+0x248>
 800b290:	2301      	movs	r3, #1
 800b292:	930f      	str	r3, [sp, #60]	; 0x3c
 800b294:	3b02      	subs	r3, #2
 800b296:	e7f6      	b.n	800b286 <_dtoa_r+0x29e>
 800b298:	3101      	adds	r1, #1
 800b29a:	0052      	lsls	r2, r2, #1
 800b29c:	e7dc      	b.n	800b258 <_dtoa_r+0x270>
 800b29e:	9b04      	ldr	r3, [sp, #16]
 800b2a0:	9a06      	ldr	r2, [sp, #24]
 800b2a2:	69db      	ldr	r3, [r3, #28]
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	9b07      	ldr	r3, [sp, #28]
 800b2a8:	2b0e      	cmp	r3, #14
 800b2aa:	d900      	bls.n	800b2ae <_dtoa_r+0x2c6>
 800b2ac:	e0e5      	b.n	800b47a <_dtoa_r+0x492>
 800b2ae:	2c00      	cmp	r4, #0
 800b2b0:	d100      	bne.n	800b2b4 <_dtoa_r+0x2cc>
 800b2b2:	e0e2      	b.n	800b47a <_dtoa_r+0x492>
 800b2b4:	9b03      	ldr	r3, [sp, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	dd64      	ble.n	800b384 <_dtoa_r+0x39c>
 800b2ba:	210f      	movs	r1, #15
 800b2bc:	9a03      	ldr	r2, [sp, #12]
 800b2be:	4b2b      	ldr	r3, [pc, #172]	; (800b36c <_dtoa_r+0x384>)
 800b2c0:	400a      	ands	r2, r1
 800b2c2:	00d2      	lsls	r2, r2, #3
 800b2c4:	189b      	adds	r3, r3, r2
 800b2c6:	681e      	ldr	r6, [r3, #0]
 800b2c8:	685f      	ldr	r7, [r3, #4]
 800b2ca:	9b03      	ldr	r3, [sp, #12]
 800b2cc:	2402      	movs	r4, #2
 800b2ce:	111d      	asrs	r5, r3, #4
 800b2d0:	05db      	lsls	r3, r3, #23
 800b2d2:	d50a      	bpl.n	800b2ea <_dtoa_r+0x302>
 800b2d4:	4b2a      	ldr	r3, [pc, #168]	; (800b380 <_dtoa_r+0x398>)
 800b2d6:	400d      	ands	r5, r1
 800b2d8:	6a1a      	ldr	r2, [r3, #32]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b2de:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b2e0:	f7f6 f8ce 	bl	8001480 <__aeabi_ddiv>
 800b2e4:	9008      	str	r0, [sp, #32]
 800b2e6:	9109      	str	r1, [sp, #36]	; 0x24
 800b2e8:	3401      	adds	r4, #1
 800b2ea:	4b25      	ldr	r3, [pc, #148]	; (800b380 <_dtoa_r+0x398>)
 800b2ec:	930e      	str	r3, [sp, #56]	; 0x38
 800b2ee:	2d00      	cmp	r5, #0
 800b2f0:	d108      	bne.n	800b304 <_dtoa_r+0x31c>
 800b2f2:	9808      	ldr	r0, [sp, #32]
 800b2f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2f6:	0032      	movs	r2, r6
 800b2f8:	003b      	movs	r3, r7
 800b2fa:	f7f6 f8c1 	bl	8001480 <__aeabi_ddiv>
 800b2fe:	9008      	str	r0, [sp, #32]
 800b300:	9109      	str	r1, [sp, #36]	; 0x24
 800b302:	e05a      	b.n	800b3ba <_dtoa_r+0x3d2>
 800b304:	2301      	movs	r3, #1
 800b306:	421d      	tst	r5, r3
 800b308:	d009      	beq.n	800b31e <_dtoa_r+0x336>
 800b30a:	18e4      	adds	r4, r4, r3
 800b30c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b30e:	0030      	movs	r0, r6
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	0039      	movs	r1, r7
 800b316:	f7f6 fcad 	bl	8001c74 <__aeabi_dmul>
 800b31a:	0006      	movs	r6, r0
 800b31c:	000f      	movs	r7, r1
 800b31e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b320:	106d      	asrs	r5, r5, #1
 800b322:	3308      	adds	r3, #8
 800b324:	e7e2      	b.n	800b2ec <_dtoa_r+0x304>
 800b326:	46c0      	nop			; (mov r8, r8)
 800b328:	0800edae 	.word	0x0800edae
 800b32c:	0800edc5 	.word	0x0800edc5
 800b330:	7ff00000 	.word	0x7ff00000
 800b334:	0000270f 	.word	0x0000270f
 800b338:	0800edaa 	.word	0x0800edaa
 800b33c:	0800edad 	.word	0x0800edad
 800b340:	0800ed78 	.word	0x0800ed78
 800b344:	0800ed79 	.word	0x0800ed79
 800b348:	3ff00000 	.word	0x3ff00000
 800b34c:	fffffc01 	.word	0xfffffc01
 800b350:	3ff80000 	.word	0x3ff80000
 800b354:	636f4361 	.word	0x636f4361
 800b358:	3fd287a7 	.word	0x3fd287a7
 800b35c:	8b60c8b3 	.word	0x8b60c8b3
 800b360:	3fc68a28 	.word	0x3fc68a28
 800b364:	509f79fb 	.word	0x509f79fb
 800b368:	3fd34413 	.word	0x3fd34413
 800b36c:	0800eeb0 	.word	0x0800eeb0
 800b370:	00000432 	.word	0x00000432
 800b374:	00000412 	.word	0x00000412
 800b378:	fe100000 	.word	0xfe100000
 800b37c:	0800ee1d 	.word	0x0800ee1d
 800b380:	0800ee88 	.word	0x0800ee88
 800b384:	9b03      	ldr	r3, [sp, #12]
 800b386:	2402      	movs	r4, #2
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d016      	beq.n	800b3ba <_dtoa_r+0x3d2>
 800b38c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b38e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b390:	220f      	movs	r2, #15
 800b392:	425d      	negs	r5, r3
 800b394:	402a      	ands	r2, r5
 800b396:	4bdd      	ldr	r3, [pc, #884]	; (800b70c <_dtoa_r+0x724>)
 800b398:	00d2      	lsls	r2, r2, #3
 800b39a:	189b      	adds	r3, r3, r2
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	f7f6 fc68 	bl	8001c74 <__aeabi_dmul>
 800b3a4:	2701      	movs	r7, #1
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	9008      	str	r0, [sp, #32]
 800b3aa:	9109      	str	r1, [sp, #36]	; 0x24
 800b3ac:	4ed8      	ldr	r6, [pc, #864]	; (800b710 <_dtoa_r+0x728>)
 800b3ae:	112d      	asrs	r5, r5, #4
 800b3b0:	2d00      	cmp	r5, #0
 800b3b2:	d000      	beq.n	800b3b6 <_dtoa_r+0x3ce>
 800b3b4:	e091      	b.n	800b4da <_dtoa_r+0x4f2>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1a1      	bne.n	800b2fe <_dtoa_r+0x316>
 800b3ba:	9e08      	ldr	r6, [sp, #32]
 800b3bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b3be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d100      	bne.n	800b3c6 <_dtoa_r+0x3de>
 800b3c4:	e094      	b.n	800b4f0 <_dtoa_r+0x508>
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	0030      	movs	r0, r6
 800b3ca:	0039      	movs	r1, r7
 800b3cc:	4bd1      	ldr	r3, [pc, #836]	; (800b714 <_dtoa_r+0x72c>)
 800b3ce:	f7f5 f843 	bl	8000458 <__aeabi_dcmplt>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d100      	bne.n	800b3d8 <_dtoa_r+0x3f0>
 800b3d6:	e08b      	b.n	800b4f0 <_dtoa_r+0x508>
 800b3d8:	9b07      	ldr	r3, [sp, #28]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d100      	bne.n	800b3e0 <_dtoa_r+0x3f8>
 800b3de:	e087      	b.n	800b4f0 <_dtoa_r+0x508>
 800b3e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	dd45      	ble.n	800b472 <_dtoa_r+0x48a>
 800b3e6:	9b03      	ldr	r3, [sp, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	930e      	str	r3, [sp, #56]	; 0x38
 800b3ee:	0030      	movs	r0, r6
 800b3f0:	4bc9      	ldr	r3, [pc, #804]	; (800b718 <_dtoa_r+0x730>)
 800b3f2:	0039      	movs	r1, r7
 800b3f4:	f7f6 fc3e 	bl	8001c74 <__aeabi_dmul>
 800b3f8:	9008      	str	r0, [sp, #32]
 800b3fa:	9109      	str	r1, [sp, #36]	; 0x24
 800b3fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3fe:	3401      	adds	r4, #1
 800b400:	0020      	movs	r0, r4
 800b402:	9e08      	ldr	r6, [sp, #32]
 800b404:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b406:	9312      	str	r3, [sp, #72]	; 0x48
 800b408:	f7f7 facc 	bl	80029a4 <__aeabi_i2d>
 800b40c:	0032      	movs	r2, r6
 800b40e:	003b      	movs	r3, r7
 800b410:	f7f6 fc30 	bl	8001c74 <__aeabi_dmul>
 800b414:	2200      	movs	r2, #0
 800b416:	4bc1      	ldr	r3, [pc, #772]	; (800b71c <_dtoa_r+0x734>)
 800b418:	f7f5 fcd2 	bl	8000dc0 <__aeabi_dadd>
 800b41c:	4ac0      	ldr	r2, [pc, #768]	; (800b720 <_dtoa_r+0x738>)
 800b41e:	9014      	str	r0, [sp, #80]	; 0x50
 800b420:	9115      	str	r1, [sp, #84]	; 0x54
 800b422:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b424:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b426:	4694      	mov	ip, r2
 800b428:	9308      	str	r3, [sp, #32]
 800b42a:	9409      	str	r4, [sp, #36]	; 0x24
 800b42c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b42e:	4463      	add	r3, ip
 800b430:	9318      	str	r3, [sp, #96]	; 0x60
 800b432:	9309      	str	r3, [sp, #36]	; 0x24
 800b434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b436:	2b00      	cmp	r3, #0
 800b438:	d15e      	bne.n	800b4f8 <_dtoa_r+0x510>
 800b43a:	2200      	movs	r2, #0
 800b43c:	4bb9      	ldr	r3, [pc, #740]	; (800b724 <_dtoa_r+0x73c>)
 800b43e:	0030      	movs	r0, r6
 800b440:	0039      	movs	r1, r7
 800b442:	f7f6 fed9 	bl	80021f8 <__aeabi_dsub>
 800b446:	9a08      	ldr	r2, [sp, #32]
 800b448:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b44a:	0004      	movs	r4, r0
 800b44c:	000d      	movs	r5, r1
 800b44e:	f7f5 f817 	bl	8000480 <__aeabi_dcmpgt>
 800b452:	2800      	cmp	r0, #0
 800b454:	d000      	beq.n	800b458 <_dtoa_r+0x470>
 800b456:	e2b3      	b.n	800b9c0 <_dtoa_r+0x9d8>
 800b458:	48b3      	ldr	r0, [pc, #716]	; (800b728 <_dtoa_r+0x740>)
 800b45a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b45c:	4684      	mov	ip, r0
 800b45e:	4461      	add	r1, ip
 800b460:	000b      	movs	r3, r1
 800b462:	0020      	movs	r0, r4
 800b464:	0029      	movs	r1, r5
 800b466:	9a08      	ldr	r2, [sp, #32]
 800b468:	f7f4 fff6 	bl	8000458 <__aeabi_dcmplt>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d000      	beq.n	800b472 <_dtoa_r+0x48a>
 800b470:	e2a3      	b.n	800b9ba <_dtoa_r+0x9d2>
 800b472:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b474:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b476:	9308      	str	r3, [sp, #32]
 800b478:	9409      	str	r4, [sp, #36]	; 0x24
 800b47a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	da00      	bge.n	800b482 <_dtoa_r+0x49a>
 800b480:	e179      	b.n	800b776 <_dtoa_r+0x78e>
 800b482:	9a03      	ldr	r2, [sp, #12]
 800b484:	2a0e      	cmp	r2, #14
 800b486:	dd00      	ble.n	800b48a <_dtoa_r+0x4a2>
 800b488:	e175      	b.n	800b776 <_dtoa_r+0x78e>
 800b48a:	4ba0      	ldr	r3, [pc, #640]	; (800b70c <_dtoa_r+0x724>)
 800b48c:	00d2      	lsls	r2, r2, #3
 800b48e:	189b      	adds	r3, r3, r2
 800b490:	681e      	ldr	r6, [r3, #0]
 800b492:	685f      	ldr	r7, [r3, #4]
 800b494:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b496:	2b00      	cmp	r3, #0
 800b498:	db00      	blt.n	800b49c <_dtoa_r+0x4b4>
 800b49a:	e0e5      	b.n	800b668 <_dtoa_r+0x680>
 800b49c:	9b07      	ldr	r3, [sp, #28]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	dd00      	ble.n	800b4a4 <_dtoa_r+0x4bc>
 800b4a2:	e0e1      	b.n	800b668 <_dtoa_r+0x680>
 800b4a4:	d000      	beq.n	800b4a8 <_dtoa_r+0x4c0>
 800b4a6:	e288      	b.n	800b9ba <_dtoa_r+0x9d2>
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	0030      	movs	r0, r6
 800b4ac:	0039      	movs	r1, r7
 800b4ae:	4b9d      	ldr	r3, [pc, #628]	; (800b724 <_dtoa_r+0x73c>)
 800b4b0:	f7f6 fbe0 	bl	8001c74 <__aeabi_dmul>
 800b4b4:	9a08      	ldr	r2, [sp, #32]
 800b4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b8:	f7f4 ffec 	bl	8000494 <__aeabi_dcmpge>
 800b4bc:	9e07      	ldr	r6, [sp, #28]
 800b4be:	0037      	movs	r7, r6
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d000      	beq.n	800b4c6 <_dtoa_r+0x4de>
 800b4c4:	e25f      	b.n	800b986 <_dtoa_r+0x99e>
 800b4c6:	9b06      	ldr	r3, [sp, #24]
 800b4c8:	9a06      	ldr	r2, [sp, #24]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	9308      	str	r3, [sp, #32]
 800b4ce:	2331      	movs	r3, #49	; 0x31
 800b4d0:	7013      	strb	r3, [r2, #0]
 800b4d2:	9b03      	ldr	r3, [sp, #12]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	9303      	str	r3, [sp, #12]
 800b4d8:	e25a      	b.n	800b990 <_dtoa_r+0x9a8>
 800b4da:	423d      	tst	r5, r7
 800b4dc:	d005      	beq.n	800b4ea <_dtoa_r+0x502>
 800b4de:	6832      	ldr	r2, [r6, #0]
 800b4e0:	6873      	ldr	r3, [r6, #4]
 800b4e2:	f7f6 fbc7 	bl	8001c74 <__aeabi_dmul>
 800b4e6:	003b      	movs	r3, r7
 800b4e8:	3401      	adds	r4, #1
 800b4ea:	106d      	asrs	r5, r5, #1
 800b4ec:	3608      	adds	r6, #8
 800b4ee:	e75f      	b.n	800b3b0 <_dtoa_r+0x3c8>
 800b4f0:	9b03      	ldr	r3, [sp, #12]
 800b4f2:	930e      	str	r3, [sp, #56]	; 0x38
 800b4f4:	9b07      	ldr	r3, [sp, #28]
 800b4f6:	e783      	b.n	800b400 <_dtoa_r+0x418>
 800b4f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4fa:	4b84      	ldr	r3, [pc, #528]	; (800b70c <_dtoa_r+0x724>)
 800b4fc:	3a01      	subs	r2, #1
 800b4fe:	00d2      	lsls	r2, r2, #3
 800b500:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b502:	189b      	adds	r3, r3, r2
 800b504:	9c08      	ldr	r4, [sp, #32]
 800b506:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	2900      	cmp	r1, #0
 800b50e:	d051      	beq.n	800b5b4 <_dtoa_r+0x5cc>
 800b510:	2000      	movs	r0, #0
 800b512:	4986      	ldr	r1, [pc, #536]	; (800b72c <_dtoa_r+0x744>)
 800b514:	f7f5 ffb4 	bl	8001480 <__aeabi_ddiv>
 800b518:	0022      	movs	r2, r4
 800b51a:	002b      	movs	r3, r5
 800b51c:	f7f6 fe6c 	bl	80021f8 <__aeabi_dsub>
 800b520:	9a06      	ldr	r2, [sp, #24]
 800b522:	0004      	movs	r4, r0
 800b524:	4694      	mov	ip, r2
 800b526:	000d      	movs	r5, r1
 800b528:	9b06      	ldr	r3, [sp, #24]
 800b52a:	9314      	str	r3, [sp, #80]	; 0x50
 800b52c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b52e:	4463      	add	r3, ip
 800b530:	9318      	str	r3, [sp, #96]	; 0x60
 800b532:	0039      	movs	r1, r7
 800b534:	0030      	movs	r0, r6
 800b536:	f7f7 f9ff 	bl	8002938 <__aeabi_d2iz>
 800b53a:	9012      	str	r0, [sp, #72]	; 0x48
 800b53c:	f7f7 fa32 	bl	80029a4 <__aeabi_i2d>
 800b540:	0002      	movs	r2, r0
 800b542:	000b      	movs	r3, r1
 800b544:	0030      	movs	r0, r6
 800b546:	0039      	movs	r1, r7
 800b548:	f7f6 fe56 	bl	80021f8 <__aeabi_dsub>
 800b54c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b54e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b550:	3301      	adds	r3, #1
 800b552:	9308      	str	r3, [sp, #32]
 800b554:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b556:	0006      	movs	r6, r0
 800b558:	3330      	adds	r3, #48	; 0x30
 800b55a:	7013      	strb	r3, [r2, #0]
 800b55c:	0022      	movs	r2, r4
 800b55e:	002b      	movs	r3, r5
 800b560:	000f      	movs	r7, r1
 800b562:	f7f4 ff79 	bl	8000458 <__aeabi_dcmplt>
 800b566:	2800      	cmp	r0, #0
 800b568:	d174      	bne.n	800b654 <_dtoa_r+0x66c>
 800b56a:	0032      	movs	r2, r6
 800b56c:	003b      	movs	r3, r7
 800b56e:	2000      	movs	r0, #0
 800b570:	4968      	ldr	r1, [pc, #416]	; (800b714 <_dtoa_r+0x72c>)
 800b572:	f7f6 fe41 	bl	80021f8 <__aeabi_dsub>
 800b576:	0022      	movs	r2, r4
 800b578:	002b      	movs	r3, r5
 800b57a:	f7f4 ff6d 	bl	8000458 <__aeabi_dcmplt>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d000      	beq.n	800b584 <_dtoa_r+0x59c>
 800b582:	e0d7      	b.n	800b734 <_dtoa_r+0x74c>
 800b584:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b586:	9a08      	ldr	r2, [sp, #32]
 800b588:	4293      	cmp	r3, r2
 800b58a:	d100      	bne.n	800b58e <_dtoa_r+0x5a6>
 800b58c:	e771      	b.n	800b472 <_dtoa_r+0x48a>
 800b58e:	2200      	movs	r2, #0
 800b590:	0020      	movs	r0, r4
 800b592:	0029      	movs	r1, r5
 800b594:	4b60      	ldr	r3, [pc, #384]	; (800b718 <_dtoa_r+0x730>)
 800b596:	f7f6 fb6d 	bl	8001c74 <__aeabi_dmul>
 800b59a:	4b5f      	ldr	r3, [pc, #380]	; (800b718 <_dtoa_r+0x730>)
 800b59c:	0004      	movs	r4, r0
 800b59e:	000d      	movs	r5, r1
 800b5a0:	0030      	movs	r0, r6
 800b5a2:	0039      	movs	r1, r7
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f7f6 fb65 	bl	8001c74 <__aeabi_dmul>
 800b5aa:	9b08      	ldr	r3, [sp, #32]
 800b5ac:	0006      	movs	r6, r0
 800b5ae:	000f      	movs	r7, r1
 800b5b0:	9314      	str	r3, [sp, #80]	; 0x50
 800b5b2:	e7be      	b.n	800b532 <_dtoa_r+0x54a>
 800b5b4:	0020      	movs	r0, r4
 800b5b6:	0029      	movs	r1, r5
 800b5b8:	f7f6 fb5c 	bl	8001c74 <__aeabi_dmul>
 800b5bc:	9a06      	ldr	r2, [sp, #24]
 800b5be:	9b06      	ldr	r3, [sp, #24]
 800b5c0:	4694      	mov	ip, r2
 800b5c2:	9308      	str	r3, [sp, #32]
 800b5c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5c6:	9014      	str	r0, [sp, #80]	; 0x50
 800b5c8:	9115      	str	r1, [sp, #84]	; 0x54
 800b5ca:	4463      	add	r3, ip
 800b5cc:	9319      	str	r3, [sp, #100]	; 0x64
 800b5ce:	0030      	movs	r0, r6
 800b5d0:	0039      	movs	r1, r7
 800b5d2:	f7f7 f9b1 	bl	8002938 <__aeabi_d2iz>
 800b5d6:	9018      	str	r0, [sp, #96]	; 0x60
 800b5d8:	f7f7 f9e4 	bl	80029a4 <__aeabi_i2d>
 800b5dc:	0002      	movs	r2, r0
 800b5de:	000b      	movs	r3, r1
 800b5e0:	0030      	movs	r0, r6
 800b5e2:	0039      	movs	r1, r7
 800b5e4:	f7f6 fe08 	bl	80021f8 <__aeabi_dsub>
 800b5e8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b5ea:	9b08      	ldr	r3, [sp, #32]
 800b5ec:	3630      	adds	r6, #48	; 0x30
 800b5ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b5f0:	701e      	strb	r6, [r3, #0]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	0004      	movs	r4, r0
 800b5f6:	000d      	movs	r5, r1
 800b5f8:	9308      	str	r3, [sp, #32]
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d12d      	bne.n	800b65a <_dtoa_r+0x672>
 800b5fe:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b600:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b602:	9a06      	ldr	r2, [sp, #24]
 800b604:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b606:	4694      	mov	ip, r2
 800b608:	4463      	add	r3, ip
 800b60a:	2200      	movs	r2, #0
 800b60c:	9308      	str	r3, [sp, #32]
 800b60e:	4b47      	ldr	r3, [pc, #284]	; (800b72c <_dtoa_r+0x744>)
 800b610:	f7f5 fbd6 	bl	8000dc0 <__aeabi_dadd>
 800b614:	0002      	movs	r2, r0
 800b616:	000b      	movs	r3, r1
 800b618:	0020      	movs	r0, r4
 800b61a:	0029      	movs	r1, r5
 800b61c:	f7f4 ff30 	bl	8000480 <__aeabi_dcmpgt>
 800b620:	2800      	cmp	r0, #0
 800b622:	d000      	beq.n	800b626 <_dtoa_r+0x63e>
 800b624:	e086      	b.n	800b734 <_dtoa_r+0x74c>
 800b626:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b62a:	2000      	movs	r0, #0
 800b62c:	493f      	ldr	r1, [pc, #252]	; (800b72c <_dtoa_r+0x744>)
 800b62e:	f7f6 fde3 	bl	80021f8 <__aeabi_dsub>
 800b632:	0002      	movs	r2, r0
 800b634:	000b      	movs	r3, r1
 800b636:	0020      	movs	r0, r4
 800b638:	0029      	movs	r1, r5
 800b63a:	f7f4 ff0d 	bl	8000458 <__aeabi_dcmplt>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d100      	bne.n	800b644 <_dtoa_r+0x65c>
 800b642:	e716      	b.n	800b472 <_dtoa_r+0x48a>
 800b644:	9b08      	ldr	r3, [sp, #32]
 800b646:	001a      	movs	r2, r3
 800b648:	3a01      	subs	r2, #1
 800b64a:	9208      	str	r2, [sp, #32]
 800b64c:	7812      	ldrb	r2, [r2, #0]
 800b64e:	2a30      	cmp	r2, #48	; 0x30
 800b650:	d0f8      	beq.n	800b644 <_dtoa_r+0x65c>
 800b652:	9308      	str	r3, [sp, #32]
 800b654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b656:	9303      	str	r3, [sp, #12]
 800b658:	e046      	b.n	800b6e8 <_dtoa_r+0x700>
 800b65a:	2200      	movs	r2, #0
 800b65c:	4b2e      	ldr	r3, [pc, #184]	; (800b718 <_dtoa_r+0x730>)
 800b65e:	f7f6 fb09 	bl	8001c74 <__aeabi_dmul>
 800b662:	0006      	movs	r6, r0
 800b664:	000f      	movs	r7, r1
 800b666:	e7b2      	b.n	800b5ce <_dtoa_r+0x5e6>
 800b668:	9b06      	ldr	r3, [sp, #24]
 800b66a:	9a06      	ldr	r2, [sp, #24]
 800b66c:	930a      	str	r3, [sp, #40]	; 0x28
 800b66e:	9b07      	ldr	r3, [sp, #28]
 800b670:	9c08      	ldr	r4, [sp, #32]
 800b672:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b674:	3b01      	subs	r3, #1
 800b676:	189b      	adds	r3, r3, r2
 800b678:	930b      	str	r3, [sp, #44]	; 0x2c
 800b67a:	0032      	movs	r2, r6
 800b67c:	003b      	movs	r3, r7
 800b67e:	0020      	movs	r0, r4
 800b680:	0029      	movs	r1, r5
 800b682:	f7f5 fefd 	bl	8001480 <__aeabi_ddiv>
 800b686:	f7f7 f957 	bl	8002938 <__aeabi_d2iz>
 800b68a:	9007      	str	r0, [sp, #28]
 800b68c:	f7f7 f98a 	bl	80029a4 <__aeabi_i2d>
 800b690:	0032      	movs	r2, r6
 800b692:	003b      	movs	r3, r7
 800b694:	f7f6 faee 	bl	8001c74 <__aeabi_dmul>
 800b698:	0002      	movs	r2, r0
 800b69a:	000b      	movs	r3, r1
 800b69c:	0020      	movs	r0, r4
 800b69e:	0029      	movs	r1, r5
 800b6a0:	f7f6 fdaa 	bl	80021f8 <__aeabi_dsub>
 800b6a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a6:	001a      	movs	r2, r3
 800b6a8:	3201      	adds	r2, #1
 800b6aa:	920a      	str	r2, [sp, #40]	; 0x28
 800b6ac:	9208      	str	r2, [sp, #32]
 800b6ae:	9a07      	ldr	r2, [sp, #28]
 800b6b0:	3230      	adds	r2, #48	; 0x30
 800b6b2:	701a      	strb	r2, [r3, #0]
 800b6b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d14f      	bne.n	800b75a <_dtoa_r+0x772>
 800b6ba:	0002      	movs	r2, r0
 800b6bc:	000b      	movs	r3, r1
 800b6be:	f7f5 fb7f 	bl	8000dc0 <__aeabi_dadd>
 800b6c2:	0032      	movs	r2, r6
 800b6c4:	003b      	movs	r3, r7
 800b6c6:	0004      	movs	r4, r0
 800b6c8:	000d      	movs	r5, r1
 800b6ca:	f7f4 fed9 	bl	8000480 <__aeabi_dcmpgt>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d12e      	bne.n	800b730 <_dtoa_r+0x748>
 800b6d2:	0032      	movs	r2, r6
 800b6d4:	003b      	movs	r3, r7
 800b6d6:	0020      	movs	r0, r4
 800b6d8:	0029      	movs	r1, r5
 800b6da:	f7f4 feb7 	bl	800044c <__aeabi_dcmpeq>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d002      	beq.n	800b6e8 <_dtoa_r+0x700>
 800b6e2:	9b07      	ldr	r3, [sp, #28]
 800b6e4:	07de      	lsls	r6, r3, #31
 800b6e6:	d423      	bmi.n	800b730 <_dtoa_r+0x748>
 800b6e8:	9905      	ldr	r1, [sp, #20]
 800b6ea:	9804      	ldr	r0, [sp, #16]
 800b6ec:	f000 fbd6 	bl	800be9c <_Bfree>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	9a08      	ldr	r2, [sp, #32]
 800b6f4:	7013      	strb	r3, [r2, #0]
 800b6f6:	9b03      	ldr	r3, [sp, #12]
 800b6f8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	6013      	str	r3, [r2, #0]
 800b6fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b700:	2b00      	cmp	r3, #0
 800b702:	d100      	bne.n	800b706 <_dtoa_r+0x71e>
 800b704:	e4ba      	b.n	800b07c <_dtoa_r+0x94>
 800b706:	9a08      	ldr	r2, [sp, #32]
 800b708:	601a      	str	r2, [r3, #0]
 800b70a:	e4b7      	b.n	800b07c <_dtoa_r+0x94>
 800b70c:	0800eeb0 	.word	0x0800eeb0
 800b710:	0800ee88 	.word	0x0800ee88
 800b714:	3ff00000 	.word	0x3ff00000
 800b718:	40240000 	.word	0x40240000
 800b71c:	401c0000 	.word	0x401c0000
 800b720:	fcc00000 	.word	0xfcc00000
 800b724:	40140000 	.word	0x40140000
 800b728:	7cc00000 	.word	0x7cc00000
 800b72c:	3fe00000 	.word	0x3fe00000
 800b730:	9b03      	ldr	r3, [sp, #12]
 800b732:	930e      	str	r3, [sp, #56]	; 0x38
 800b734:	9b08      	ldr	r3, [sp, #32]
 800b736:	9308      	str	r3, [sp, #32]
 800b738:	3b01      	subs	r3, #1
 800b73a:	781a      	ldrb	r2, [r3, #0]
 800b73c:	2a39      	cmp	r2, #57	; 0x39
 800b73e:	d108      	bne.n	800b752 <_dtoa_r+0x76a>
 800b740:	9a06      	ldr	r2, [sp, #24]
 800b742:	429a      	cmp	r2, r3
 800b744:	d1f7      	bne.n	800b736 <_dtoa_r+0x74e>
 800b746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b748:	9906      	ldr	r1, [sp, #24]
 800b74a:	3201      	adds	r2, #1
 800b74c:	920e      	str	r2, [sp, #56]	; 0x38
 800b74e:	2230      	movs	r2, #48	; 0x30
 800b750:	700a      	strb	r2, [r1, #0]
 800b752:	781a      	ldrb	r2, [r3, #0]
 800b754:	3201      	adds	r2, #1
 800b756:	701a      	strb	r2, [r3, #0]
 800b758:	e77c      	b.n	800b654 <_dtoa_r+0x66c>
 800b75a:	2200      	movs	r2, #0
 800b75c:	4ba9      	ldr	r3, [pc, #676]	; (800ba04 <_dtoa_r+0xa1c>)
 800b75e:	f7f6 fa89 	bl	8001c74 <__aeabi_dmul>
 800b762:	2200      	movs	r2, #0
 800b764:	2300      	movs	r3, #0
 800b766:	0004      	movs	r4, r0
 800b768:	000d      	movs	r5, r1
 800b76a:	f7f4 fe6f 	bl	800044c <__aeabi_dcmpeq>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d100      	bne.n	800b774 <_dtoa_r+0x78c>
 800b772:	e782      	b.n	800b67a <_dtoa_r+0x692>
 800b774:	e7b8      	b.n	800b6e8 <_dtoa_r+0x700>
 800b776:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b778:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b77a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b77c:	2f00      	cmp	r7, #0
 800b77e:	d012      	beq.n	800b7a6 <_dtoa_r+0x7be>
 800b780:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b782:	2a01      	cmp	r2, #1
 800b784:	dc6e      	bgt.n	800b864 <_dtoa_r+0x87c>
 800b786:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b788:	2a00      	cmp	r2, #0
 800b78a:	d065      	beq.n	800b858 <_dtoa_r+0x870>
 800b78c:	4a9e      	ldr	r2, [pc, #632]	; (800ba08 <_dtoa_r+0xa20>)
 800b78e:	189b      	adds	r3, r3, r2
 800b790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b792:	2101      	movs	r1, #1
 800b794:	18d2      	adds	r2, r2, r3
 800b796:	920a      	str	r2, [sp, #40]	; 0x28
 800b798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b79a:	9804      	ldr	r0, [sp, #16]
 800b79c:	18d3      	adds	r3, r2, r3
 800b79e:	930c      	str	r3, [sp, #48]	; 0x30
 800b7a0:	f000 fc78 	bl	800c094 <__i2b>
 800b7a4:	0007      	movs	r7, r0
 800b7a6:	2c00      	cmp	r4, #0
 800b7a8:	d00e      	beq.n	800b7c8 <_dtoa_r+0x7e0>
 800b7aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	dd0b      	ble.n	800b7c8 <_dtoa_r+0x7e0>
 800b7b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7b2:	0023      	movs	r3, r4
 800b7b4:	4294      	cmp	r4, r2
 800b7b6:	dd00      	ble.n	800b7ba <_dtoa_r+0x7d2>
 800b7b8:	0013      	movs	r3, r2
 800b7ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7bc:	1ae4      	subs	r4, r4, r3
 800b7be:	1ad2      	subs	r2, r2, r3
 800b7c0:	920a      	str	r2, [sp, #40]	; 0x28
 800b7c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	930c      	str	r3, [sp, #48]	; 0x30
 800b7c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d01e      	beq.n	800b80c <_dtoa_r+0x824>
 800b7ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d05c      	beq.n	800b88e <_dtoa_r+0x8a6>
 800b7d4:	2d00      	cmp	r5, #0
 800b7d6:	dd10      	ble.n	800b7fa <_dtoa_r+0x812>
 800b7d8:	0039      	movs	r1, r7
 800b7da:	002a      	movs	r2, r5
 800b7dc:	9804      	ldr	r0, [sp, #16]
 800b7de:	f000 fd21 	bl	800c224 <__pow5mult>
 800b7e2:	9a05      	ldr	r2, [sp, #20]
 800b7e4:	0001      	movs	r1, r0
 800b7e6:	0007      	movs	r7, r0
 800b7e8:	9804      	ldr	r0, [sp, #16]
 800b7ea:	f000 fc6b 	bl	800c0c4 <__multiply>
 800b7ee:	0006      	movs	r6, r0
 800b7f0:	9905      	ldr	r1, [sp, #20]
 800b7f2:	9804      	ldr	r0, [sp, #16]
 800b7f4:	f000 fb52 	bl	800be9c <_Bfree>
 800b7f8:	9605      	str	r6, [sp, #20]
 800b7fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7fc:	1b5a      	subs	r2, r3, r5
 800b7fe:	42ab      	cmp	r3, r5
 800b800:	d004      	beq.n	800b80c <_dtoa_r+0x824>
 800b802:	9905      	ldr	r1, [sp, #20]
 800b804:	9804      	ldr	r0, [sp, #16]
 800b806:	f000 fd0d 	bl	800c224 <__pow5mult>
 800b80a:	9005      	str	r0, [sp, #20]
 800b80c:	2101      	movs	r1, #1
 800b80e:	9804      	ldr	r0, [sp, #16]
 800b810:	f000 fc40 	bl	800c094 <__i2b>
 800b814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b816:	0006      	movs	r6, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	dd3a      	ble.n	800b892 <_dtoa_r+0x8aa>
 800b81c:	001a      	movs	r2, r3
 800b81e:	0001      	movs	r1, r0
 800b820:	9804      	ldr	r0, [sp, #16]
 800b822:	f000 fcff 	bl	800c224 <__pow5mult>
 800b826:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b828:	0006      	movs	r6, r0
 800b82a:	2500      	movs	r5, #0
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	dc38      	bgt.n	800b8a2 <_dtoa_r+0x8ba>
 800b830:	2500      	movs	r5, #0
 800b832:	9b08      	ldr	r3, [sp, #32]
 800b834:	42ab      	cmp	r3, r5
 800b836:	d130      	bne.n	800b89a <_dtoa_r+0x8b2>
 800b838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83a:	031b      	lsls	r3, r3, #12
 800b83c:	42ab      	cmp	r3, r5
 800b83e:	d12c      	bne.n	800b89a <_dtoa_r+0x8b2>
 800b840:	4b72      	ldr	r3, [pc, #456]	; (800ba0c <_dtoa_r+0xa24>)
 800b842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b844:	4213      	tst	r3, r2
 800b846:	d028      	beq.n	800b89a <_dtoa_r+0x8b2>
 800b848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b84a:	3501      	adds	r5, #1
 800b84c:	3301      	adds	r3, #1
 800b84e:	930a      	str	r3, [sp, #40]	; 0x28
 800b850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b852:	3301      	adds	r3, #1
 800b854:	930c      	str	r3, [sp, #48]	; 0x30
 800b856:	e020      	b.n	800b89a <_dtoa_r+0x8b2>
 800b858:	2336      	movs	r3, #54	; 0x36
 800b85a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b85c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b85e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b860:	1a9b      	subs	r3, r3, r2
 800b862:	e795      	b.n	800b790 <_dtoa_r+0x7a8>
 800b864:	9b07      	ldr	r3, [sp, #28]
 800b866:	1e5d      	subs	r5, r3, #1
 800b868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b86a:	42ab      	cmp	r3, r5
 800b86c:	db07      	blt.n	800b87e <_dtoa_r+0x896>
 800b86e:	1b5d      	subs	r5, r3, r5
 800b870:	9b07      	ldr	r3, [sp, #28]
 800b872:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b874:	2b00      	cmp	r3, #0
 800b876:	da8b      	bge.n	800b790 <_dtoa_r+0x7a8>
 800b878:	1ae4      	subs	r4, r4, r3
 800b87a:	2300      	movs	r3, #0
 800b87c:	e788      	b.n	800b790 <_dtoa_r+0x7a8>
 800b87e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b882:	1aeb      	subs	r3, r5, r3
 800b884:	18d3      	adds	r3, r2, r3
 800b886:	950d      	str	r5, [sp, #52]	; 0x34
 800b888:	9313      	str	r3, [sp, #76]	; 0x4c
 800b88a:	2500      	movs	r5, #0
 800b88c:	e7f0      	b.n	800b870 <_dtoa_r+0x888>
 800b88e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b890:	e7b7      	b.n	800b802 <_dtoa_r+0x81a>
 800b892:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b894:	2500      	movs	r5, #0
 800b896:	2b01      	cmp	r3, #1
 800b898:	ddca      	ble.n	800b830 <_dtoa_r+0x848>
 800b89a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b89c:	2001      	movs	r0, #1
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d008      	beq.n	800b8b4 <_dtoa_r+0x8cc>
 800b8a2:	6933      	ldr	r3, [r6, #16]
 800b8a4:	3303      	adds	r3, #3
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	18f3      	adds	r3, r6, r3
 800b8aa:	6858      	ldr	r0, [r3, #4]
 800b8ac:	f000 fbaa 	bl	800c004 <__hi0bits>
 800b8b0:	2320      	movs	r3, #32
 800b8b2:	1a18      	subs	r0, r3, r0
 800b8b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8b6:	1818      	adds	r0, r3, r0
 800b8b8:	0002      	movs	r2, r0
 800b8ba:	231f      	movs	r3, #31
 800b8bc:	401a      	ands	r2, r3
 800b8be:	4218      	tst	r0, r3
 800b8c0:	d047      	beq.n	800b952 <_dtoa_r+0x96a>
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	1a9b      	subs	r3, r3, r2
 800b8c6:	2b04      	cmp	r3, #4
 800b8c8:	dd3f      	ble.n	800b94a <_dtoa_r+0x962>
 800b8ca:	231c      	movs	r3, #28
 800b8cc:	1a9b      	subs	r3, r3, r2
 800b8ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8d0:	18e4      	adds	r4, r4, r3
 800b8d2:	18d2      	adds	r2, r2, r3
 800b8d4:	920a      	str	r2, [sp, #40]	; 0x28
 800b8d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8d8:	18d3      	adds	r3, r2, r3
 800b8da:	930c      	str	r3, [sp, #48]	; 0x30
 800b8dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	dd05      	ble.n	800b8ee <_dtoa_r+0x906>
 800b8e2:	001a      	movs	r2, r3
 800b8e4:	9905      	ldr	r1, [sp, #20]
 800b8e6:	9804      	ldr	r0, [sp, #16]
 800b8e8:	f000 fcf8 	bl	800c2dc <__lshift>
 800b8ec:	9005      	str	r0, [sp, #20]
 800b8ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	dd05      	ble.n	800b900 <_dtoa_r+0x918>
 800b8f4:	0031      	movs	r1, r6
 800b8f6:	001a      	movs	r2, r3
 800b8f8:	9804      	ldr	r0, [sp, #16]
 800b8fa:	f000 fcef 	bl	800c2dc <__lshift>
 800b8fe:	0006      	movs	r6, r0
 800b900:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b902:	2b00      	cmp	r3, #0
 800b904:	d027      	beq.n	800b956 <_dtoa_r+0x96e>
 800b906:	0031      	movs	r1, r6
 800b908:	9805      	ldr	r0, [sp, #20]
 800b90a:	f000 fd55 	bl	800c3b8 <__mcmp>
 800b90e:	2800      	cmp	r0, #0
 800b910:	da21      	bge.n	800b956 <_dtoa_r+0x96e>
 800b912:	9b03      	ldr	r3, [sp, #12]
 800b914:	220a      	movs	r2, #10
 800b916:	3b01      	subs	r3, #1
 800b918:	9303      	str	r3, [sp, #12]
 800b91a:	9905      	ldr	r1, [sp, #20]
 800b91c:	2300      	movs	r3, #0
 800b91e:	9804      	ldr	r0, [sp, #16]
 800b920:	f000 fae0 	bl	800bee4 <__multadd>
 800b924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b926:	9005      	str	r0, [sp, #20]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d100      	bne.n	800b92e <_dtoa_r+0x946>
 800b92c:	e15d      	b.n	800bbea <_dtoa_r+0xc02>
 800b92e:	2300      	movs	r3, #0
 800b930:	0039      	movs	r1, r7
 800b932:	220a      	movs	r2, #10
 800b934:	9804      	ldr	r0, [sp, #16]
 800b936:	f000 fad5 	bl	800bee4 <__multadd>
 800b93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b93c:	0007      	movs	r7, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	dc49      	bgt.n	800b9d6 <_dtoa_r+0x9ee>
 800b942:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b944:	2b02      	cmp	r3, #2
 800b946:	dc0e      	bgt.n	800b966 <_dtoa_r+0x97e>
 800b948:	e045      	b.n	800b9d6 <_dtoa_r+0x9ee>
 800b94a:	2b04      	cmp	r3, #4
 800b94c:	d0c6      	beq.n	800b8dc <_dtoa_r+0x8f4>
 800b94e:	331c      	adds	r3, #28
 800b950:	e7bd      	b.n	800b8ce <_dtoa_r+0x8e6>
 800b952:	0013      	movs	r3, r2
 800b954:	e7fb      	b.n	800b94e <_dtoa_r+0x966>
 800b956:	9b07      	ldr	r3, [sp, #28]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	dc36      	bgt.n	800b9ca <_dtoa_r+0x9e2>
 800b95c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b95e:	2b02      	cmp	r3, #2
 800b960:	dd33      	ble.n	800b9ca <_dtoa_r+0x9e2>
 800b962:	9b07      	ldr	r3, [sp, #28]
 800b964:	930b      	str	r3, [sp, #44]	; 0x2c
 800b966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10c      	bne.n	800b986 <_dtoa_r+0x99e>
 800b96c:	0031      	movs	r1, r6
 800b96e:	2205      	movs	r2, #5
 800b970:	9804      	ldr	r0, [sp, #16]
 800b972:	f000 fab7 	bl	800bee4 <__multadd>
 800b976:	0006      	movs	r6, r0
 800b978:	0001      	movs	r1, r0
 800b97a:	9805      	ldr	r0, [sp, #20]
 800b97c:	f000 fd1c 	bl	800c3b8 <__mcmp>
 800b980:	2800      	cmp	r0, #0
 800b982:	dd00      	ble.n	800b986 <_dtoa_r+0x99e>
 800b984:	e59f      	b.n	800b4c6 <_dtoa_r+0x4de>
 800b986:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b988:	43db      	mvns	r3, r3
 800b98a:	9303      	str	r3, [sp, #12]
 800b98c:	9b06      	ldr	r3, [sp, #24]
 800b98e:	9308      	str	r3, [sp, #32]
 800b990:	2500      	movs	r5, #0
 800b992:	0031      	movs	r1, r6
 800b994:	9804      	ldr	r0, [sp, #16]
 800b996:	f000 fa81 	bl	800be9c <_Bfree>
 800b99a:	2f00      	cmp	r7, #0
 800b99c:	d100      	bne.n	800b9a0 <_dtoa_r+0x9b8>
 800b99e:	e6a3      	b.n	800b6e8 <_dtoa_r+0x700>
 800b9a0:	2d00      	cmp	r5, #0
 800b9a2:	d005      	beq.n	800b9b0 <_dtoa_r+0x9c8>
 800b9a4:	42bd      	cmp	r5, r7
 800b9a6:	d003      	beq.n	800b9b0 <_dtoa_r+0x9c8>
 800b9a8:	0029      	movs	r1, r5
 800b9aa:	9804      	ldr	r0, [sp, #16]
 800b9ac:	f000 fa76 	bl	800be9c <_Bfree>
 800b9b0:	0039      	movs	r1, r7
 800b9b2:	9804      	ldr	r0, [sp, #16]
 800b9b4:	f000 fa72 	bl	800be9c <_Bfree>
 800b9b8:	e696      	b.n	800b6e8 <_dtoa_r+0x700>
 800b9ba:	2600      	movs	r6, #0
 800b9bc:	0037      	movs	r7, r6
 800b9be:	e7e2      	b.n	800b986 <_dtoa_r+0x99e>
 800b9c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9c2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b9c4:	9303      	str	r3, [sp, #12]
 800b9c6:	0037      	movs	r7, r6
 800b9c8:	e57d      	b.n	800b4c6 <_dtoa_r+0x4de>
 800b9ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d100      	bne.n	800b9d2 <_dtoa_r+0x9ea>
 800b9d0:	e0c3      	b.n	800bb5a <_dtoa_r+0xb72>
 800b9d2:	9b07      	ldr	r3, [sp, #28]
 800b9d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9d6:	2c00      	cmp	r4, #0
 800b9d8:	dd05      	ble.n	800b9e6 <_dtoa_r+0x9fe>
 800b9da:	0039      	movs	r1, r7
 800b9dc:	0022      	movs	r2, r4
 800b9de:	9804      	ldr	r0, [sp, #16]
 800b9e0:	f000 fc7c 	bl	800c2dc <__lshift>
 800b9e4:	0007      	movs	r7, r0
 800b9e6:	0038      	movs	r0, r7
 800b9e8:	2d00      	cmp	r5, #0
 800b9ea:	d024      	beq.n	800ba36 <_dtoa_r+0xa4e>
 800b9ec:	6879      	ldr	r1, [r7, #4]
 800b9ee:	9804      	ldr	r0, [sp, #16]
 800b9f0:	f000 fa10 	bl	800be14 <_Balloc>
 800b9f4:	1e04      	subs	r4, r0, #0
 800b9f6:	d111      	bne.n	800ba1c <_dtoa_r+0xa34>
 800b9f8:	0022      	movs	r2, r4
 800b9fa:	4b05      	ldr	r3, [pc, #20]	; (800ba10 <_dtoa_r+0xa28>)
 800b9fc:	4805      	ldr	r0, [pc, #20]	; (800ba14 <_dtoa_r+0xa2c>)
 800b9fe:	4906      	ldr	r1, [pc, #24]	; (800ba18 <_dtoa_r+0xa30>)
 800ba00:	f7ff fb07 	bl	800b012 <_dtoa_r+0x2a>
 800ba04:	40240000 	.word	0x40240000
 800ba08:	00000433 	.word	0x00000433
 800ba0c:	7ff00000 	.word	0x7ff00000
 800ba10:	0800ee1d 	.word	0x0800ee1d
 800ba14:	0800edc5 	.word	0x0800edc5
 800ba18:	000002ef 	.word	0x000002ef
 800ba1c:	0039      	movs	r1, r7
 800ba1e:	693a      	ldr	r2, [r7, #16]
 800ba20:	310c      	adds	r1, #12
 800ba22:	3202      	adds	r2, #2
 800ba24:	0092      	lsls	r2, r2, #2
 800ba26:	300c      	adds	r0, #12
 800ba28:	f001 ffb2 	bl	800d990 <memcpy>
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	0021      	movs	r1, r4
 800ba30:	9804      	ldr	r0, [sp, #16]
 800ba32:	f000 fc53 	bl	800c2dc <__lshift>
 800ba36:	9b06      	ldr	r3, [sp, #24]
 800ba38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba3a:	9307      	str	r3, [sp, #28]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	189b      	adds	r3, r3, r2
 800ba40:	2201      	movs	r2, #1
 800ba42:	003d      	movs	r5, r7
 800ba44:	0007      	movs	r7, r0
 800ba46:	930e      	str	r3, [sp, #56]	; 0x38
 800ba48:	9b08      	ldr	r3, [sp, #32]
 800ba4a:	4013      	ands	r3, r2
 800ba4c:	930d      	str	r3, [sp, #52]	; 0x34
 800ba4e:	0031      	movs	r1, r6
 800ba50:	9805      	ldr	r0, [sp, #20]
 800ba52:	f7ff fa39 	bl	800aec8 <quorem>
 800ba56:	0029      	movs	r1, r5
 800ba58:	0004      	movs	r4, r0
 800ba5a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba5c:	9805      	ldr	r0, [sp, #20]
 800ba5e:	f000 fcab 	bl	800c3b8 <__mcmp>
 800ba62:	003a      	movs	r2, r7
 800ba64:	900c      	str	r0, [sp, #48]	; 0x30
 800ba66:	0031      	movs	r1, r6
 800ba68:	9804      	ldr	r0, [sp, #16]
 800ba6a:	f000 fcc1 	bl	800c3f0 <__mdiff>
 800ba6e:	2201      	movs	r2, #1
 800ba70:	68c3      	ldr	r3, [r0, #12]
 800ba72:	3430      	adds	r4, #48	; 0x30
 800ba74:	9008      	str	r0, [sp, #32]
 800ba76:	920a      	str	r2, [sp, #40]	; 0x28
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d104      	bne.n	800ba86 <_dtoa_r+0xa9e>
 800ba7c:	0001      	movs	r1, r0
 800ba7e:	9805      	ldr	r0, [sp, #20]
 800ba80:	f000 fc9a 	bl	800c3b8 <__mcmp>
 800ba84:	900a      	str	r0, [sp, #40]	; 0x28
 800ba86:	9908      	ldr	r1, [sp, #32]
 800ba88:	9804      	ldr	r0, [sp, #16]
 800ba8a:	f000 fa07 	bl	800be9c <_Bfree>
 800ba8e:	9b07      	ldr	r3, [sp, #28]
 800ba90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba92:	3301      	adds	r3, #1
 800ba94:	9308      	str	r3, [sp, #32]
 800ba96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	d109      	bne.n	800bab4 <_dtoa_r+0xacc>
 800baa0:	2c39      	cmp	r4, #57	; 0x39
 800baa2:	d022      	beq.n	800baea <_dtoa_r+0xb02>
 800baa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	dd01      	ble.n	800baae <_dtoa_r+0xac6>
 800baaa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800baac:	3431      	adds	r4, #49	; 0x31
 800baae:	9b07      	ldr	r3, [sp, #28]
 800bab0:	701c      	strb	r4, [r3, #0]
 800bab2:	e76e      	b.n	800b992 <_dtoa_r+0x9aa>
 800bab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	db04      	blt.n	800bac4 <_dtoa_r+0xadc>
 800baba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800babc:	4313      	orrs	r3, r2
 800babe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bac0:	4313      	orrs	r3, r2
 800bac2:	d11e      	bne.n	800bb02 <_dtoa_r+0xb1a>
 800bac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	ddf1      	ble.n	800baae <_dtoa_r+0xac6>
 800baca:	9905      	ldr	r1, [sp, #20]
 800bacc:	2201      	movs	r2, #1
 800bace:	9804      	ldr	r0, [sp, #16]
 800bad0:	f000 fc04 	bl	800c2dc <__lshift>
 800bad4:	0031      	movs	r1, r6
 800bad6:	9005      	str	r0, [sp, #20]
 800bad8:	f000 fc6e 	bl	800c3b8 <__mcmp>
 800badc:	2800      	cmp	r0, #0
 800bade:	dc02      	bgt.n	800bae6 <_dtoa_r+0xafe>
 800bae0:	d1e5      	bne.n	800baae <_dtoa_r+0xac6>
 800bae2:	07e3      	lsls	r3, r4, #31
 800bae4:	d5e3      	bpl.n	800baae <_dtoa_r+0xac6>
 800bae6:	2c39      	cmp	r4, #57	; 0x39
 800bae8:	d1df      	bne.n	800baaa <_dtoa_r+0xac2>
 800baea:	2339      	movs	r3, #57	; 0x39
 800baec:	9a07      	ldr	r2, [sp, #28]
 800baee:	7013      	strb	r3, [r2, #0]
 800baf0:	9b08      	ldr	r3, [sp, #32]
 800baf2:	9308      	str	r3, [sp, #32]
 800baf4:	3b01      	subs	r3, #1
 800baf6:	781a      	ldrb	r2, [r3, #0]
 800baf8:	2a39      	cmp	r2, #57	; 0x39
 800bafa:	d063      	beq.n	800bbc4 <_dtoa_r+0xbdc>
 800bafc:	3201      	adds	r2, #1
 800bafe:	701a      	strb	r2, [r3, #0]
 800bb00:	e747      	b.n	800b992 <_dtoa_r+0x9aa>
 800bb02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	dd03      	ble.n	800bb10 <_dtoa_r+0xb28>
 800bb08:	2c39      	cmp	r4, #57	; 0x39
 800bb0a:	d0ee      	beq.n	800baea <_dtoa_r+0xb02>
 800bb0c:	3401      	adds	r4, #1
 800bb0e:	e7ce      	b.n	800baae <_dtoa_r+0xac6>
 800bb10:	9b07      	ldr	r3, [sp, #28]
 800bb12:	9a07      	ldr	r2, [sp, #28]
 800bb14:	701c      	strb	r4, [r3, #0]
 800bb16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d03e      	beq.n	800bb9a <_dtoa_r+0xbb2>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	220a      	movs	r2, #10
 800bb20:	9905      	ldr	r1, [sp, #20]
 800bb22:	9804      	ldr	r0, [sp, #16]
 800bb24:	f000 f9de 	bl	800bee4 <__multadd>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	9005      	str	r0, [sp, #20]
 800bb2c:	220a      	movs	r2, #10
 800bb2e:	0029      	movs	r1, r5
 800bb30:	9804      	ldr	r0, [sp, #16]
 800bb32:	42bd      	cmp	r5, r7
 800bb34:	d106      	bne.n	800bb44 <_dtoa_r+0xb5c>
 800bb36:	f000 f9d5 	bl	800bee4 <__multadd>
 800bb3a:	0005      	movs	r5, r0
 800bb3c:	0007      	movs	r7, r0
 800bb3e:	9b08      	ldr	r3, [sp, #32]
 800bb40:	9307      	str	r3, [sp, #28]
 800bb42:	e784      	b.n	800ba4e <_dtoa_r+0xa66>
 800bb44:	f000 f9ce 	bl	800bee4 <__multadd>
 800bb48:	0039      	movs	r1, r7
 800bb4a:	0005      	movs	r5, r0
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	220a      	movs	r2, #10
 800bb50:	9804      	ldr	r0, [sp, #16]
 800bb52:	f000 f9c7 	bl	800bee4 <__multadd>
 800bb56:	0007      	movs	r7, r0
 800bb58:	e7f1      	b.n	800bb3e <_dtoa_r+0xb56>
 800bb5a:	9b07      	ldr	r3, [sp, #28]
 800bb5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb5e:	2500      	movs	r5, #0
 800bb60:	0031      	movs	r1, r6
 800bb62:	9805      	ldr	r0, [sp, #20]
 800bb64:	f7ff f9b0 	bl	800aec8 <quorem>
 800bb68:	9b06      	ldr	r3, [sp, #24]
 800bb6a:	3030      	adds	r0, #48	; 0x30
 800bb6c:	5558      	strb	r0, [r3, r5]
 800bb6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb70:	3501      	adds	r5, #1
 800bb72:	0004      	movs	r4, r0
 800bb74:	42ab      	cmp	r3, r5
 800bb76:	dd07      	ble.n	800bb88 <_dtoa_r+0xba0>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	220a      	movs	r2, #10
 800bb7c:	9905      	ldr	r1, [sp, #20]
 800bb7e:	9804      	ldr	r0, [sp, #16]
 800bb80:	f000 f9b0 	bl	800bee4 <__multadd>
 800bb84:	9005      	str	r0, [sp, #20]
 800bb86:	e7eb      	b.n	800bb60 <_dtoa_r+0xb78>
 800bb88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	2a00      	cmp	r2, #0
 800bb8e:	dd00      	ble.n	800bb92 <_dtoa_r+0xbaa>
 800bb90:	0013      	movs	r3, r2
 800bb92:	2500      	movs	r5, #0
 800bb94:	9a06      	ldr	r2, [sp, #24]
 800bb96:	18d3      	adds	r3, r2, r3
 800bb98:	9308      	str	r3, [sp, #32]
 800bb9a:	9905      	ldr	r1, [sp, #20]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	9804      	ldr	r0, [sp, #16]
 800bba0:	f000 fb9c 	bl	800c2dc <__lshift>
 800bba4:	0031      	movs	r1, r6
 800bba6:	9005      	str	r0, [sp, #20]
 800bba8:	f000 fc06 	bl	800c3b8 <__mcmp>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	dc9f      	bgt.n	800baf0 <_dtoa_r+0xb08>
 800bbb0:	d101      	bne.n	800bbb6 <_dtoa_r+0xbce>
 800bbb2:	07e4      	lsls	r4, r4, #31
 800bbb4:	d49c      	bmi.n	800baf0 <_dtoa_r+0xb08>
 800bbb6:	9b08      	ldr	r3, [sp, #32]
 800bbb8:	9308      	str	r3, [sp, #32]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	781a      	ldrb	r2, [r3, #0]
 800bbbe:	2a30      	cmp	r2, #48	; 0x30
 800bbc0:	d0fa      	beq.n	800bbb8 <_dtoa_r+0xbd0>
 800bbc2:	e6e6      	b.n	800b992 <_dtoa_r+0x9aa>
 800bbc4:	9a06      	ldr	r2, [sp, #24]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d193      	bne.n	800baf2 <_dtoa_r+0xb0a>
 800bbca:	9b03      	ldr	r3, [sp, #12]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	9303      	str	r3, [sp, #12]
 800bbd0:	2331      	movs	r3, #49	; 0x31
 800bbd2:	7013      	strb	r3, [r2, #0]
 800bbd4:	e6dd      	b.n	800b992 <_dtoa_r+0x9aa>
 800bbd6:	4b09      	ldr	r3, [pc, #36]	; (800bbfc <_dtoa_r+0xc14>)
 800bbd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bbda:	9306      	str	r3, [sp, #24]
 800bbdc:	4b08      	ldr	r3, [pc, #32]	; (800bc00 <_dtoa_r+0xc18>)
 800bbde:	2a00      	cmp	r2, #0
 800bbe0:	d001      	beq.n	800bbe6 <_dtoa_r+0xbfe>
 800bbe2:	f7ff fa49 	bl	800b078 <_dtoa_r+0x90>
 800bbe6:	f7ff fa49 	bl	800b07c <_dtoa_r+0x94>
 800bbea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	dcb6      	bgt.n	800bb5e <_dtoa_r+0xb76>
 800bbf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bbf2:	2b02      	cmp	r3, #2
 800bbf4:	dd00      	ble.n	800bbf8 <_dtoa_r+0xc10>
 800bbf6:	e6b6      	b.n	800b966 <_dtoa_r+0x97e>
 800bbf8:	e7b1      	b.n	800bb5e <_dtoa_r+0xb76>
 800bbfa:	46c0      	nop			; (mov r8, r8)
 800bbfc:	0800eda1 	.word	0x0800eda1
 800bc00:	0800eda9 	.word	0x0800eda9

0800bc04 <_free_r>:
 800bc04:	b570      	push	{r4, r5, r6, lr}
 800bc06:	0005      	movs	r5, r0
 800bc08:	2900      	cmp	r1, #0
 800bc0a:	d010      	beq.n	800bc2e <_free_r+0x2a>
 800bc0c:	1f0c      	subs	r4, r1, #4
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	da00      	bge.n	800bc16 <_free_r+0x12>
 800bc14:	18e4      	adds	r4, r4, r3
 800bc16:	0028      	movs	r0, r5
 800bc18:	f000 f8ec 	bl	800bdf4 <__malloc_lock>
 800bc1c:	4a1d      	ldr	r2, [pc, #116]	; (800bc94 <_free_r+0x90>)
 800bc1e:	6813      	ldr	r3, [r2, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d105      	bne.n	800bc30 <_free_r+0x2c>
 800bc24:	6063      	str	r3, [r4, #4]
 800bc26:	6014      	str	r4, [r2, #0]
 800bc28:	0028      	movs	r0, r5
 800bc2a:	f000 f8eb 	bl	800be04 <__malloc_unlock>
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}
 800bc30:	42a3      	cmp	r3, r4
 800bc32:	d908      	bls.n	800bc46 <_free_r+0x42>
 800bc34:	6820      	ldr	r0, [r4, #0]
 800bc36:	1821      	adds	r1, r4, r0
 800bc38:	428b      	cmp	r3, r1
 800bc3a:	d1f3      	bne.n	800bc24 <_free_r+0x20>
 800bc3c:	6819      	ldr	r1, [r3, #0]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	1809      	adds	r1, r1, r0
 800bc42:	6021      	str	r1, [r4, #0]
 800bc44:	e7ee      	b.n	800bc24 <_free_r+0x20>
 800bc46:	001a      	movs	r2, r3
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <_free_r+0x4e>
 800bc4e:	42a3      	cmp	r3, r4
 800bc50:	d9f9      	bls.n	800bc46 <_free_r+0x42>
 800bc52:	6811      	ldr	r1, [r2, #0]
 800bc54:	1850      	adds	r0, r2, r1
 800bc56:	42a0      	cmp	r0, r4
 800bc58:	d10b      	bne.n	800bc72 <_free_r+0x6e>
 800bc5a:	6820      	ldr	r0, [r4, #0]
 800bc5c:	1809      	adds	r1, r1, r0
 800bc5e:	1850      	adds	r0, r2, r1
 800bc60:	6011      	str	r1, [r2, #0]
 800bc62:	4283      	cmp	r3, r0
 800bc64:	d1e0      	bne.n	800bc28 <_free_r+0x24>
 800bc66:	6818      	ldr	r0, [r3, #0]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	1841      	adds	r1, r0, r1
 800bc6c:	6011      	str	r1, [r2, #0]
 800bc6e:	6053      	str	r3, [r2, #4]
 800bc70:	e7da      	b.n	800bc28 <_free_r+0x24>
 800bc72:	42a0      	cmp	r0, r4
 800bc74:	d902      	bls.n	800bc7c <_free_r+0x78>
 800bc76:	230c      	movs	r3, #12
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	e7d5      	b.n	800bc28 <_free_r+0x24>
 800bc7c:	6820      	ldr	r0, [r4, #0]
 800bc7e:	1821      	adds	r1, r4, r0
 800bc80:	428b      	cmp	r3, r1
 800bc82:	d103      	bne.n	800bc8c <_free_r+0x88>
 800bc84:	6819      	ldr	r1, [r3, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	1809      	adds	r1, r1, r0
 800bc8a:	6021      	str	r1, [r4, #0]
 800bc8c:	6063      	str	r3, [r4, #4]
 800bc8e:	6054      	str	r4, [r2, #4]
 800bc90:	e7ca      	b.n	800bc28 <_free_r+0x24>
 800bc92:	46c0      	nop			; (mov r8, r8)
 800bc94:	20000668 	.word	0x20000668

0800bc98 <malloc>:
 800bc98:	b510      	push	{r4, lr}
 800bc9a:	4b03      	ldr	r3, [pc, #12]	; (800bca8 <malloc+0x10>)
 800bc9c:	0001      	movs	r1, r0
 800bc9e:	6818      	ldr	r0, [r3, #0]
 800bca0:	f000 f826 	bl	800bcf0 <_malloc_r>
 800bca4:	bd10      	pop	{r4, pc}
 800bca6:	46c0      	nop			; (mov r8, r8)
 800bca8:	2000007c 	.word	0x2000007c

0800bcac <sbrk_aligned>:
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	4e0f      	ldr	r6, [pc, #60]	; (800bcec <sbrk_aligned+0x40>)
 800bcb0:	000d      	movs	r5, r1
 800bcb2:	6831      	ldr	r1, [r6, #0]
 800bcb4:	0004      	movs	r4, r0
 800bcb6:	2900      	cmp	r1, #0
 800bcb8:	d102      	bne.n	800bcc0 <sbrk_aligned+0x14>
 800bcba:	f001 fe57 	bl	800d96c <_sbrk_r>
 800bcbe:	6030      	str	r0, [r6, #0]
 800bcc0:	0029      	movs	r1, r5
 800bcc2:	0020      	movs	r0, r4
 800bcc4:	f001 fe52 	bl	800d96c <_sbrk_r>
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	d00a      	beq.n	800bce2 <sbrk_aligned+0x36>
 800bccc:	2303      	movs	r3, #3
 800bcce:	1cc5      	adds	r5, r0, #3
 800bcd0:	439d      	bics	r5, r3
 800bcd2:	42a8      	cmp	r0, r5
 800bcd4:	d007      	beq.n	800bce6 <sbrk_aligned+0x3a>
 800bcd6:	1a29      	subs	r1, r5, r0
 800bcd8:	0020      	movs	r0, r4
 800bcda:	f001 fe47 	bl	800d96c <_sbrk_r>
 800bcde:	3001      	adds	r0, #1
 800bce0:	d101      	bne.n	800bce6 <sbrk_aligned+0x3a>
 800bce2:	2501      	movs	r5, #1
 800bce4:	426d      	negs	r5, r5
 800bce6:	0028      	movs	r0, r5
 800bce8:	bd70      	pop	{r4, r5, r6, pc}
 800bcea:	46c0      	nop			; (mov r8, r8)
 800bcec:	2000066c 	.word	0x2000066c

0800bcf0 <_malloc_r>:
 800bcf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcf2:	2203      	movs	r2, #3
 800bcf4:	1ccb      	adds	r3, r1, #3
 800bcf6:	4393      	bics	r3, r2
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	0006      	movs	r6, r0
 800bcfc:	001f      	movs	r7, r3
 800bcfe:	2b0c      	cmp	r3, #12
 800bd00:	d238      	bcs.n	800bd74 <_malloc_r+0x84>
 800bd02:	270c      	movs	r7, #12
 800bd04:	42b9      	cmp	r1, r7
 800bd06:	d837      	bhi.n	800bd78 <_malloc_r+0x88>
 800bd08:	0030      	movs	r0, r6
 800bd0a:	f000 f873 	bl	800bdf4 <__malloc_lock>
 800bd0e:	4b38      	ldr	r3, [pc, #224]	; (800bdf0 <_malloc_r+0x100>)
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	001c      	movs	r4, r3
 800bd16:	2c00      	cmp	r4, #0
 800bd18:	d133      	bne.n	800bd82 <_malloc_r+0x92>
 800bd1a:	0039      	movs	r1, r7
 800bd1c:	0030      	movs	r0, r6
 800bd1e:	f7ff ffc5 	bl	800bcac <sbrk_aligned>
 800bd22:	0004      	movs	r4, r0
 800bd24:	1c43      	adds	r3, r0, #1
 800bd26:	d15e      	bne.n	800bde6 <_malloc_r+0xf6>
 800bd28:	9b00      	ldr	r3, [sp, #0]
 800bd2a:	681c      	ldr	r4, [r3, #0]
 800bd2c:	0025      	movs	r5, r4
 800bd2e:	2d00      	cmp	r5, #0
 800bd30:	d14e      	bne.n	800bdd0 <_malloc_r+0xe0>
 800bd32:	2c00      	cmp	r4, #0
 800bd34:	d051      	beq.n	800bdda <_malloc_r+0xea>
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	0029      	movs	r1, r5
 800bd3a:	18e3      	adds	r3, r4, r3
 800bd3c:	0030      	movs	r0, r6
 800bd3e:	9301      	str	r3, [sp, #4]
 800bd40:	f001 fe14 	bl	800d96c <_sbrk_r>
 800bd44:	9b01      	ldr	r3, [sp, #4]
 800bd46:	4283      	cmp	r3, r0
 800bd48:	d147      	bne.n	800bdda <_malloc_r+0xea>
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	0030      	movs	r0, r6
 800bd4e:	1aff      	subs	r7, r7, r3
 800bd50:	0039      	movs	r1, r7
 800bd52:	f7ff ffab 	bl	800bcac <sbrk_aligned>
 800bd56:	3001      	adds	r0, #1
 800bd58:	d03f      	beq.n	800bdda <_malloc_r+0xea>
 800bd5a:	6823      	ldr	r3, [r4, #0]
 800bd5c:	19db      	adds	r3, r3, r7
 800bd5e:	6023      	str	r3, [r4, #0]
 800bd60:	9b00      	ldr	r3, [sp, #0]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d040      	beq.n	800bdea <_malloc_r+0xfa>
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	42a2      	cmp	r2, r4
 800bd6c:	d133      	bne.n	800bdd6 <_malloc_r+0xe6>
 800bd6e:	2200      	movs	r2, #0
 800bd70:	605a      	str	r2, [r3, #4]
 800bd72:	e014      	b.n	800bd9e <_malloc_r+0xae>
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	dac5      	bge.n	800bd04 <_malloc_r+0x14>
 800bd78:	230c      	movs	r3, #12
 800bd7a:	2500      	movs	r5, #0
 800bd7c:	6033      	str	r3, [r6, #0]
 800bd7e:	0028      	movs	r0, r5
 800bd80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd82:	6821      	ldr	r1, [r4, #0]
 800bd84:	1bc9      	subs	r1, r1, r7
 800bd86:	d420      	bmi.n	800bdca <_malloc_r+0xda>
 800bd88:	290b      	cmp	r1, #11
 800bd8a:	d918      	bls.n	800bdbe <_malloc_r+0xce>
 800bd8c:	19e2      	adds	r2, r4, r7
 800bd8e:	6027      	str	r7, [r4, #0]
 800bd90:	42a3      	cmp	r3, r4
 800bd92:	d112      	bne.n	800bdba <_malloc_r+0xca>
 800bd94:	9b00      	ldr	r3, [sp, #0]
 800bd96:	601a      	str	r2, [r3, #0]
 800bd98:	6863      	ldr	r3, [r4, #4]
 800bd9a:	6011      	str	r1, [r2, #0]
 800bd9c:	6053      	str	r3, [r2, #4]
 800bd9e:	0030      	movs	r0, r6
 800bda0:	0025      	movs	r5, r4
 800bda2:	f000 f82f 	bl	800be04 <__malloc_unlock>
 800bda6:	2207      	movs	r2, #7
 800bda8:	350b      	adds	r5, #11
 800bdaa:	1d23      	adds	r3, r4, #4
 800bdac:	4395      	bics	r5, r2
 800bdae:	1aea      	subs	r2, r5, r3
 800bdb0:	429d      	cmp	r5, r3
 800bdb2:	d0e4      	beq.n	800bd7e <_malloc_r+0x8e>
 800bdb4:	1b5b      	subs	r3, r3, r5
 800bdb6:	50a3      	str	r3, [r4, r2]
 800bdb8:	e7e1      	b.n	800bd7e <_malloc_r+0x8e>
 800bdba:	605a      	str	r2, [r3, #4]
 800bdbc:	e7ec      	b.n	800bd98 <_malloc_r+0xa8>
 800bdbe:	6862      	ldr	r2, [r4, #4]
 800bdc0:	42a3      	cmp	r3, r4
 800bdc2:	d1d5      	bne.n	800bd70 <_malloc_r+0x80>
 800bdc4:	9b00      	ldr	r3, [sp, #0]
 800bdc6:	601a      	str	r2, [r3, #0]
 800bdc8:	e7e9      	b.n	800bd9e <_malloc_r+0xae>
 800bdca:	0023      	movs	r3, r4
 800bdcc:	6864      	ldr	r4, [r4, #4]
 800bdce:	e7a2      	b.n	800bd16 <_malloc_r+0x26>
 800bdd0:	002c      	movs	r4, r5
 800bdd2:	686d      	ldr	r5, [r5, #4]
 800bdd4:	e7ab      	b.n	800bd2e <_malloc_r+0x3e>
 800bdd6:	0013      	movs	r3, r2
 800bdd8:	e7c4      	b.n	800bd64 <_malloc_r+0x74>
 800bdda:	230c      	movs	r3, #12
 800bddc:	0030      	movs	r0, r6
 800bdde:	6033      	str	r3, [r6, #0]
 800bde0:	f000 f810 	bl	800be04 <__malloc_unlock>
 800bde4:	e7cb      	b.n	800bd7e <_malloc_r+0x8e>
 800bde6:	6027      	str	r7, [r4, #0]
 800bde8:	e7d9      	b.n	800bd9e <_malloc_r+0xae>
 800bdea:	605b      	str	r3, [r3, #4]
 800bdec:	deff      	udf	#255	; 0xff
 800bdee:	46c0      	nop			; (mov r8, r8)
 800bdf0:	20000668 	.word	0x20000668

0800bdf4 <__malloc_lock>:
 800bdf4:	b510      	push	{r4, lr}
 800bdf6:	4802      	ldr	r0, [pc, #8]	; (800be00 <__malloc_lock+0xc>)
 800bdf8:	f7ff f855 	bl	800aea6 <__retarget_lock_acquire_recursive>
 800bdfc:	bd10      	pop	{r4, pc}
 800bdfe:	46c0      	nop			; (mov r8, r8)
 800be00:	20000664 	.word	0x20000664

0800be04 <__malloc_unlock>:
 800be04:	b510      	push	{r4, lr}
 800be06:	4802      	ldr	r0, [pc, #8]	; (800be10 <__malloc_unlock+0xc>)
 800be08:	f7ff f84e 	bl	800aea8 <__retarget_lock_release_recursive>
 800be0c:	bd10      	pop	{r4, pc}
 800be0e:	46c0      	nop			; (mov r8, r8)
 800be10:	20000664 	.word	0x20000664

0800be14 <_Balloc>:
 800be14:	b570      	push	{r4, r5, r6, lr}
 800be16:	69c5      	ldr	r5, [r0, #28]
 800be18:	0006      	movs	r6, r0
 800be1a:	000c      	movs	r4, r1
 800be1c:	2d00      	cmp	r5, #0
 800be1e:	d10e      	bne.n	800be3e <_Balloc+0x2a>
 800be20:	2010      	movs	r0, #16
 800be22:	f7ff ff39 	bl	800bc98 <malloc>
 800be26:	1e02      	subs	r2, r0, #0
 800be28:	61f0      	str	r0, [r6, #28]
 800be2a:	d104      	bne.n	800be36 <_Balloc+0x22>
 800be2c:	216b      	movs	r1, #107	; 0x6b
 800be2e:	4b19      	ldr	r3, [pc, #100]	; (800be94 <_Balloc+0x80>)
 800be30:	4819      	ldr	r0, [pc, #100]	; (800be98 <_Balloc+0x84>)
 800be32:	f001 fdbd 	bl	800d9b0 <__assert_func>
 800be36:	6045      	str	r5, [r0, #4]
 800be38:	6085      	str	r5, [r0, #8]
 800be3a:	6005      	str	r5, [r0, #0]
 800be3c:	60c5      	str	r5, [r0, #12]
 800be3e:	69f5      	ldr	r5, [r6, #28]
 800be40:	68eb      	ldr	r3, [r5, #12]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d013      	beq.n	800be6e <_Balloc+0x5a>
 800be46:	69f3      	ldr	r3, [r6, #28]
 800be48:	00a2      	lsls	r2, r4, #2
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	189b      	adds	r3, r3, r2
 800be4e:	6818      	ldr	r0, [r3, #0]
 800be50:	2800      	cmp	r0, #0
 800be52:	d118      	bne.n	800be86 <_Balloc+0x72>
 800be54:	2101      	movs	r1, #1
 800be56:	000d      	movs	r5, r1
 800be58:	40a5      	lsls	r5, r4
 800be5a:	1d6a      	adds	r2, r5, #5
 800be5c:	0030      	movs	r0, r6
 800be5e:	0092      	lsls	r2, r2, #2
 800be60:	f001 fdc4 	bl	800d9ec <_calloc_r>
 800be64:	2800      	cmp	r0, #0
 800be66:	d00c      	beq.n	800be82 <_Balloc+0x6e>
 800be68:	6044      	str	r4, [r0, #4]
 800be6a:	6085      	str	r5, [r0, #8]
 800be6c:	e00d      	b.n	800be8a <_Balloc+0x76>
 800be6e:	2221      	movs	r2, #33	; 0x21
 800be70:	2104      	movs	r1, #4
 800be72:	0030      	movs	r0, r6
 800be74:	f001 fdba 	bl	800d9ec <_calloc_r>
 800be78:	69f3      	ldr	r3, [r6, #28]
 800be7a:	60e8      	str	r0, [r5, #12]
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1e1      	bne.n	800be46 <_Balloc+0x32>
 800be82:	2000      	movs	r0, #0
 800be84:	bd70      	pop	{r4, r5, r6, pc}
 800be86:	6802      	ldr	r2, [r0, #0]
 800be88:	601a      	str	r2, [r3, #0]
 800be8a:	2300      	movs	r3, #0
 800be8c:	6103      	str	r3, [r0, #16]
 800be8e:	60c3      	str	r3, [r0, #12]
 800be90:	e7f8      	b.n	800be84 <_Balloc+0x70>
 800be92:	46c0      	nop			; (mov r8, r8)
 800be94:	0800edae 	.word	0x0800edae
 800be98:	0800ee2e 	.word	0x0800ee2e

0800be9c <_Bfree>:
 800be9c:	b570      	push	{r4, r5, r6, lr}
 800be9e:	69c6      	ldr	r6, [r0, #28]
 800bea0:	0005      	movs	r5, r0
 800bea2:	000c      	movs	r4, r1
 800bea4:	2e00      	cmp	r6, #0
 800bea6:	d10e      	bne.n	800bec6 <_Bfree+0x2a>
 800bea8:	2010      	movs	r0, #16
 800beaa:	f7ff fef5 	bl	800bc98 <malloc>
 800beae:	1e02      	subs	r2, r0, #0
 800beb0:	61e8      	str	r0, [r5, #28]
 800beb2:	d104      	bne.n	800bebe <_Bfree+0x22>
 800beb4:	218f      	movs	r1, #143	; 0x8f
 800beb6:	4b09      	ldr	r3, [pc, #36]	; (800bedc <_Bfree+0x40>)
 800beb8:	4809      	ldr	r0, [pc, #36]	; (800bee0 <_Bfree+0x44>)
 800beba:	f001 fd79 	bl	800d9b0 <__assert_func>
 800bebe:	6046      	str	r6, [r0, #4]
 800bec0:	6086      	str	r6, [r0, #8]
 800bec2:	6006      	str	r6, [r0, #0]
 800bec4:	60c6      	str	r6, [r0, #12]
 800bec6:	2c00      	cmp	r4, #0
 800bec8:	d007      	beq.n	800beda <_Bfree+0x3e>
 800beca:	69eb      	ldr	r3, [r5, #28]
 800becc:	6862      	ldr	r2, [r4, #4]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	0092      	lsls	r2, r2, #2
 800bed2:	189b      	adds	r3, r3, r2
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	6022      	str	r2, [r4, #0]
 800bed8:	601c      	str	r4, [r3, #0]
 800beda:	bd70      	pop	{r4, r5, r6, pc}
 800bedc:	0800edae 	.word	0x0800edae
 800bee0:	0800ee2e 	.word	0x0800ee2e

0800bee4 <__multadd>:
 800bee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bee6:	000e      	movs	r6, r1
 800bee8:	9001      	str	r0, [sp, #4]
 800beea:	000c      	movs	r4, r1
 800beec:	001d      	movs	r5, r3
 800beee:	2000      	movs	r0, #0
 800bef0:	690f      	ldr	r7, [r1, #16]
 800bef2:	3614      	adds	r6, #20
 800bef4:	6833      	ldr	r3, [r6, #0]
 800bef6:	3001      	adds	r0, #1
 800bef8:	b299      	uxth	r1, r3
 800befa:	4351      	muls	r1, r2
 800befc:	0c1b      	lsrs	r3, r3, #16
 800befe:	4353      	muls	r3, r2
 800bf00:	1949      	adds	r1, r1, r5
 800bf02:	0c0d      	lsrs	r5, r1, #16
 800bf04:	195b      	adds	r3, r3, r5
 800bf06:	0c1d      	lsrs	r5, r3, #16
 800bf08:	b289      	uxth	r1, r1
 800bf0a:	041b      	lsls	r3, r3, #16
 800bf0c:	185b      	adds	r3, r3, r1
 800bf0e:	c608      	stmia	r6!, {r3}
 800bf10:	4287      	cmp	r7, r0
 800bf12:	dcef      	bgt.n	800bef4 <__multadd+0x10>
 800bf14:	2d00      	cmp	r5, #0
 800bf16:	d022      	beq.n	800bf5e <__multadd+0x7a>
 800bf18:	68a3      	ldr	r3, [r4, #8]
 800bf1a:	42bb      	cmp	r3, r7
 800bf1c:	dc19      	bgt.n	800bf52 <__multadd+0x6e>
 800bf1e:	6861      	ldr	r1, [r4, #4]
 800bf20:	9801      	ldr	r0, [sp, #4]
 800bf22:	3101      	adds	r1, #1
 800bf24:	f7ff ff76 	bl	800be14 <_Balloc>
 800bf28:	1e06      	subs	r6, r0, #0
 800bf2a:	d105      	bne.n	800bf38 <__multadd+0x54>
 800bf2c:	0032      	movs	r2, r6
 800bf2e:	21ba      	movs	r1, #186	; 0xba
 800bf30:	4b0c      	ldr	r3, [pc, #48]	; (800bf64 <__multadd+0x80>)
 800bf32:	480d      	ldr	r0, [pc, #52]	; (800bf68 <__multadd+0x84>)
 800bf34:	f001 fd3c 	bl	800d9b0 <__assert_func>
 800bf38:	0021      	movs	r1, r4
 800bf3a:	6922      	ldr	r2, [r4, #16]
 800bf3c:	310c      	adds	r1, #12
 800bf3e:	3202      	adds	r2, #2
 800bf40:	0092      	lsls	r2, r2, #2
 800bf42:	300c      	adds	r0, #12
 800bf44:	f001 fd24 	bl	800d990 <memcpy>
 800bf48:	0021      	movs	r1, r4
 800bf4a:	9801      	ldr	r0, [sp, #4]
 800bf4c:	f7ff ffa6 	bl	800be9c <_Bfree>
 800bf50:	0034      	movs	r4, r6
 800bf52:	1d3b      	adds	r3, r7, #4
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	18e3      	adds	r3, r4, r3
 800bf58:	605d      	str	r5, [r3, #4]
 800bf5a:	1c7b      	adds	r3, r7, #1
 800bf5c:	6123      	str	r3, [r4, #16]
 800bf5e:	0020      	movs	r0, r4
 800bf60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bf62:	46c0      	nop			; (mov r8, r8)
 800bf64:	0800ee1d 	.word	0x0800ee1d
 800bf68:	0800ee2e 	.word	0x0800ee2e

0800bf6c <__s2b>:
 800bf6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf6e:	0006      	movs	r6, r0
 800bf70:	0018      	movs	r0, r3
 800bf72:	000c      	movs	r4, r1
 800bf74:	3008      	adds	r0, #8
 800bf76:	2109      	movs	r1, #9
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	0015      	movs	r5, r2
 800bf7c:	f7f4 f96a 	bl	8000254 <__divsi3>
 800bf80:	2301      	movs	r3, #1
 800bf82:	2100      	movs	r1, #0
 800bf84:	4283      	cmp	r3, r0
 800bf86:	db0a      	blt.n	800bf9e <__s2b+0x32>
 800bf88:	0030      	movs	r0, r6
 800bf8a:	f7ff ff43 	bl	800be14 <_Balloc>
 800bf8e:	1e01      	subs	r1, r0, #0
 800bf90:	d108      	bne.n	800bfa4 <__s2b+0x38>
 800bf92:	000a      	movs	r2, r1
 800bf94:	4b19      	ldr	r3, [pc, #100]	; (800bffc <__s2b+0x90>)
 800bf96:	481a      	ldr	r0, [pc, #104]	; (800c000 <__s2b+0x94>)
 800bf98:	31d3      	adds	r1, #211	; 0xd3
 800bf9a:	f001 fd09 	bl	800d9b0 <__assert_func>
 800bf9e:	005b      	lsls	r3, r3, #1
 800bfa0:	3101      	adds	r1, #1
 800bfa2:	e7ef      	b.n	800bf84 <__s2b+0x18>
 800bfa4:	9b08      	ldr	r3, [sp, #32]
 800bfa6:	6143      	str	r3, [r0, #20]
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	6103      	str	r3, [r0, #16]
 800bfac:	2d09      	cmp	r5, #9
 800bfae:	dd18      	ble.n	800bfe2 <__s2b+0x76>
 800bfb0:	0023      	movs	r3, r4
 800bfb2:	3309      	adds	r3, #9
 800bfb4:	001f      	movs	r7, r3
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	1964      	adds	r4, r4, r5
 800bfba:	783b      	ldrb	r3, [r7, #0]
 800bfbc:	220a      	movs	r2, #10
 800bfbe:	0030      	movs	r0, r6
 800bfc0:	3b30      	subs	r3, #48	; 0x30
 800bfc2:	f7ff ff8f 	bl	800bee4 <__multadd>
 800bfc6:	3701      	adds	r7, #1
 800bfc8:	0001      	movs	r1, r0
 800bfca:	42a7      	cmp	r7, r4
 800bfcc:	d1f5      	bne.n	800bfba <__s2b+0x4e>
 800bfce:	002c      	movs	r4, r5
 800bfd0:	9b00      	ldr	r3, [sp, #0]
 800bfd2:	3c08      	subs	r4, #8
 800bfd4:	191c      	adds	r4, r3, r4
 800bfd6:	002f      	movs	r7, r5
 800bfd8:	9b01      	ldr	r3, [sp, #4]
 800bfda:	429f      	cmp	r7, r3
 800bfdc:	db04      	blt.n	800bfe8 <__s2b+0x7c>
 800bfde:	0008      	movs	r0, r1
 800bfe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfe2:	2509      	movs	r5, #9
 800bfe4:	340a      	adds	r4, #10
 800bfe6:	e7f6      	b.n	800bfd6 <__s2b+0x6a>
 800bfe8:	1b63      	subs	r3, r4, r5
 800bfea:	5ddb      	ldrb	r3, [r3, r7]
 800bfec:	220a      	movs	r2, #10
 800bfee:	0030      	movs	r0, r6
 800bff0:	3b30      	subs	r3, #48	; 0x30
 800bff2:	f7ff ff77 	bl	800bee4 <__multadd>
 800bff6:	3701      	adds	r7, #1
 800bff8:	0001      	movs	r1, r0
 800bffa:	e7ed      	b.n	800bfd8 <__s2b+0x6c>
 800bffc:	0800ee1d 	.word	0x0800ee1d
 800c000:	0800ee2e 	.word	0x0800ee2e

0800c004 <__hi0bits>:
 800c004:	0003      	movs	r3, r0
 800c006:	0c02      	lsrs	r2, r0, #16
 800c008:	2000      	movs	r0, #0
 800c00a:	4282      	cmp	r2, r0
 800c00c:	d101      	bne.n	800c012 <__hi0bits+0xe>
 800c00e:	041b      	lsls	r3, r3, #16
 800c010:	3010      	adds	r0, #16
 800c012:	0e1a      	lsrs	r2, r3, #24
 800c014:	d101      	bne.n	800c01a <__hi0bits+0x16>
 800c016:	3008      	adds	r0, #8
 800c018:	021b      	lsls	r3, r3, #8
 800c01a:	0f1a      	lsrs	r2, r3, #28
 800c01c:	d101      	bne.n	800c022 <__hi0bits+0x1e>
 800c01e:	3004      	adds	r0, #4
 800c020:	011b      	lsls	r3, r3, #4
 800c022:	0f9a      	lsrs	r2, r3, #30
 800c024:	d101      	bne.n	800c02a <__hi0bits+0x26>
 800c026:	3002      	adds	r0, #2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	db03      	blt.n	800c036 <__hi0bits+0x32>
 800c02e:	3001      	adds	r0, #1
 800c030:	005b      	lsls	r3, r3, #1
 800c032:	d400      	bmi.n	800c036 <__hi0bits+0x32>
 800c034:	2020      	movs	r0, #32
 800c036:	4770      	bx	lr

0800c038 <__lo0bits>:
 800c038:	6803      	ldr	r3, [r0, #0]
 800c03a:	0001      	movs	r1, r0
 800c03c:	2207      	movs	r2, #7
 800c03e:	0018      	movs	r0, r3
 800c040:	4010      	ands	r0, r2
 800c042:	4213      	tst	r3, r2
 800c044:	d00d      	beq.n	800c062 <__lo0bits+0x2a>
 800c046:	3a06      	subs	r2, #6
 800c048:	2000      	movs	r0, #0
 800c04a:	4213      	tst	r3, r2
 800c04c:	d105      	bne.n	800c05a <__lo0bits+0x22>
 800c04e:	3002      	adds	r0, #2
 800c050:	4203      	tst	r3, r0
 800c052:	d003      	beq.n	800c05c <__lo0bits+0x24>
 800c054:	40d3      	lsrs	r3, r2
 800c056:	0010      	movs	r0, r2
 800c058:	600b      	str	r3, [r1, #0]
 800c05a:	4770      	bx	lr
 800c05c:	089b      	lsrs	r3, r3, #2
 800c05e:	600b      	str	r3, [r1, #0]
 800c060:	e7fb      	b.n	800c05a <__lo0bits+0x22>
 800c062:	b29a      	uxth	r2, r3
 800c064:	2a00      	cmp	r2, #0
 800c066:	d101      	bne.n	800c06c <__lo0bits+0x34>
 800c068:	2010      	movs	r0, #16
 800c06a:	0c1b      	lsrs	r3, r3, #16
 800c06c:	b2da      	uxtb	r2, r3
 800c06e:	2a00      	cmp	r2, #0
 800c070:	d101      	bne.n	800c076 <__lo0bits+0x3e>
 800c072:	3008      	adds	r0, #8
 800c074:	0a1b      	lsrs	r3, r3, #8
 800c076:	071a      	lsls	r2, r3, #28
 800c078:	d101      	bne.n	800c07e <__lo0bits+0x46>
 800c07a:	3004      	adds	r0, #4
 800c07c:	091b      	lsrs	r3, r3, #4
 800c07e:	079a      	lsls	r2, r3, #30
 800c080:	d101      	bne.n	800c086 <__lo0bits+0x4e>
 800c082:	3002      	adds	r0, #2
 800c084:	089b      	lsrs	r3, r3, #2
 800c086:	07da      	lsls	r2, r3, #31
 800c088:	d4e9      	bmi.n	800c05e <__lo0bits+0x26>
 800c08a:	3001      	adds	r0, #1
 800c08c:	085b      	lsrs	r3, r3, #1
 800c08e:	d1e6      	bne.n	800c05e <__lo0bits+0x26>
 800c090:	2020      	movs	r0, #32
 800c092:	e7e2      	b.n	800c05a <__lo0bits+0x22>

0800c094 <__i2b>:
 800c094:	b510      	push	{r4, lr}
 800c096:	000c      	movs	r4, r1
 800c098:	2101      	movs	r1, #1
 800c09a:	f7ff febb 	bl	800be14 <_Balloc>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d107      	bne.n	800c0b2 <__i2b+0x1e>
 800c0a2:	2146      	movs	r1, #70	; 0x46
 800c0a4:	4c05      	ldr	r4, [pc, #20]	; (800c0bc <__i2b+0x28>)
 800c0a6:	0002      	movs	r2, r0
 800c0a8:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <__i2b+0x2c>)
 800c0aa:	0020      	movs	r0, r4
 800c0ac:	31ff      	adds	r1, #255	; 0xff
 800c0ae:	f001 fc7f 	bl	800d9b0 <__assert_func>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	6144      	str	r4, [r0, #20]
 800c0b6:	6103      	str	r3, [r0, #16]
 800c0b8:	bd10      	pop	{r4, pc}
 800c0ba:	46c0      	nop			; (mov r8, r8)
 800c0bc:	0800ee2e 	.word	0x0800ee2e
 800c0c0:	0800ee1d 	.word	0x0800ee1d

0800c0c4 <__multiply>:
 800c0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0c6:	0015      	movs	r5, r2
 800c0c8:	690a      	ldr	r2, [r1, #16]
 800c0ca:	692b      	ldr	r3, [r5, #16]
 800c0cc:	000c      	movs	r4, r1
 800c0ce:	b08b      	sub	sp, #44	; 0x2c
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	da01      	bge.n	800c0d8 <__multiply+0x14>
 800c0d4:	002c      	movs	r4, r5
 800c0d6:	000d      	movs	r5, r1
 800c0d8:	6927      	ldr	r7, [r4, #16]
 800c0da:	692e      	ldr	r6, [r5, #16]
 800c0dc:	6861      	ldr	r1, [r4, #4]
 800c0de:	19bb      	adds	r3, r7, r6
 800c0e0:	9303      	str	r3, [sp, #12]
 800c0e2:	68a3      	ldr	r3, [r4, #8]
 800c0e4:	19ba      	adds	r2, r7, r6
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	da00      	bge.n	800c0ec <__multiply+0x28>
 800c0ea:	3101      	adds	r1, #1
 800c0ec:	f7ff fe92 	bl	800be14 <_Balloc>
 800c0f0:	9002      	str	r0, [sp, #8]
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d106      	bne.n	800c104 <__multiply+0x40>
 800c0f6:	21b1      	movs	r1, #177	; 0xb1
 800c0f8:	4b48      	ldr	r3, [pc, #288]	; (800c21c <__multiply+0x158>)
 800c0fa:	4849      	ldr	r0, [pc, #292]	; (800c220 <__multiply+0x15c>)
 800c0fc:	9a02      	ldr	r2, [sp, #8]
 800c0fe:	0049      	lsls	r1, r1, #1
 800c100:	f001 fc56 	bl	800d9b0 <__assert_func>
 800c104:	9b02      	ldr	r3, [sp, #8]
 800c106:	2200      	movs	r2, #0
 800c108:	3314      	adds	r3, #20
 800c10a:	469c      	mov	ip, r3
 800c10c:	19bb      	adds	r3, r7, r6
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	4463      	add	r3, ip
 800c112:	9304      	str	r3, [sp, #16]
 800c114:	4663      	mov	r3, ip
 800c116:	9904      	ldr	r1, [sp, #16]
 800c118:	428b      	cmp	r3, r1
 800c11a:	d32a      	bcc.n	800c172 <__multiply+0xae>
 800c11c:	0023      	movs	r3, r4
 800c11e:	00bf      	lsls	r7, r7, #2
 800c120:	3314      	adds	r3, #20
 800c122:	3514      	adds	r5, #20
 800c124:	9308      	str	r3, [sp, #32]
 800c126:	00b6      	lsls	r6, r6, #2
 800c128:	19db      	adds	r3, r3, r7
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	19ab      	adds	r3, r5, r6
 800c12e:	9309      	str	r3, [sp, #36]	; 0x24
 800c130:	2304      	movs	r3, #4
 800c132:	9306      	str	r3, [sp, #24]
 800c134:	0023      	movs	r3, r4
 800c136:	9a05      	ldr	r2, [sp, #20]
 800c138:	3315      	adds	r3, #21
 800c13a:	9501      	str	r5, [sp, #4]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d305      	bcc.n	800c14c <__multiply+0x88>
 800c140:	1b13      	subs	r3, r2, r4
 800c142:	3b15      	subs	r3, #21
 800c144:	089b      	lsrs	r3, r3, #2
 800c146:	3301      	adds	r3, #1
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	9306      	str	r3, [sp, #24]
 800c14c:	9b01      	ldr	r3, [sp, #4]
 800c14e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c150:	4293      	cmp	r3, r2
 800c152:	d310      	bcc.n	800c176 <__multiply+0xb2>
 800c154:	9b03      	ldr	r3, [sp, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	dd05      	ble.n	800c166 <__multiply+0xa2>
 800c15a:	9b04      	ldr	r3, [sp, #16]
 800c15c:	3b04      	subs	r3, #4
 800c15e:	9304      	str	r3, [sp, #16]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d056      	beq.n	800c214 <__multiply+0x150>
 800c166:	9b02      	ldr	r3, [sp, #8]
 800c168:	9a03      	ldr	r2, [sp, #12]
 800c16a:	0018      	movs	r0, r3
 800c16c:	611a      	str	r2, [r3, #16]
 800c16e:	b00b      	add	sp, #44	; 0x2c
 800c170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c172:	c304      	stmia	r3!, {r2}
 800c174:	e7cf      	b.n	800c116 <__multiply+0x52>
 800c176:	9b01      	ldr	r3, [sp, #4]
 800c178:	6818      	ldr	r0, [r3, #0]
 800c17a:	b280      	uxth	r0, r0
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d01e      	beq.n	800c1be <__multiply+0xfa>
 800c180:	4667      	mov	r7, ip
 800c182:	2500      	movs	r5, #0
 800c184:	9e08      	ldr	r6, [sp, #32]
 800c186:	ce02      	ldmia	r6!, {r1}
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	9307      	str	r3, [sp, #28]
 800c18c:	b28b      	uxth	r3, r1
 800c18e:	4343      	muls	r3, r0
 800c190:	001a      	movs	r2, r3
 800c192:	466b      	mov	r3, sp
 800c194:	8b9b      	ldrh	r3, [r3, #28]
 800c196:	18d3      	adds	r3, r2, r3
 800c198:	195b      	adds	r3, r3, r5
 800c19a:	0c0d      	lsrs	r5, r1, #16
 800c19c:	4345      	muls	r5, r0
 800c19e:	9a07      	ldr	r2, [sp, #28]
 800c1a0:	0c11      	lsrs	r1, r2, #16
 800c1a2:	1869      	adds	r1, r5, r1
 800c1a4:	0c1a      	lsrs	r2, r3, #16
 800c1a6:	188a      	adds	r2, r1, r2
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	0c15      	lsrs	r5, r2, #16
 800c1ac:	0412      	lsls	r2, r2, #16
 800c1ae:	431a      	orrs	r2, r3
 800c1b0:	9b05      	ldr	r3, [sp, #20]
 800c1b2:	c704      	stmia	r7!, {r2}
 800c1b4:	42b3      	cmp	r3, r6
 800c1b6:	d8e6      	bhi.n	800c186 <__multiply+0xc2>
 800c1b8:	4663      	mov	r3, ip
 800c1ba:	9a06      	ldr	r2, [sp, #24]
 800c1bc:	509d      	str	r5, [r3, r2]
 800c1be:	9b01      	ldr	r3, [sp, #4]
 800c1c0:	6818      	ldr	r0, [r3, #0]
 800c1c2:	0c00      	lsrs	r0, r0, #16
 800c1c4:	d020      	beq.n	800c208 <__multiply+0x144>
 800c1c6:	4663      	mov	r3, ip
 800c1c8:	0025      	movs	r5, r4
 800c1ca:	4661      	mov	r1, ip
 800c1cc:	2700      	movs	r7, #0
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3514      	adds	r5, #20
 800c1d2:	682a      	ldr	r2, [r5, #0]
 800c1d4:	680e      	ldr	r6, [r1, #0]
 800c1d6:	b292      	uxth	r2, r2
 800c1d8:	4342      	muls	r2, r0
 800c1da:	0c36      	lsrs	r6, r6, #16
 800c1dc:	1992      	adds	r2, r2, r6
 800c1de:	19d2      	adds	r2, r2, r7
 800c1e0:	0416      	lsls	r6, r2, #16
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	431e      	orrs	r6, r3
 800c1e6:	600e      	str	r6, [r1, #0]
 800c1e8:	cd40      	ldmia	r5!, {r6}
 800c1ea:	684b      	ldr	r3, [r1, #4]
 800c1ec:	0c36      	lsrs	r6, r6, #16
 800c1ee:	4346      	muls	r6, r0
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	0c12      	lsrs	r2, r2, #16
 800c1f4:	18f3      	adds	r3, r6, r3
 800c1f6:	189b      	adds	r3, r3, r2
 800c1f8:	9a05      	ldr	r2, [sp, #20]
 800c1fa:	0c1f      	lsrs	r7, r3, #16
 800c1fc:	3104      	adds	r1, #4
 800c1fe:	42aa      	cmp	r2, r5
 800c200:	d8e7      	bhi.n	800c1d2 <__multiply+0x10e>
 800c202:	4662      	mov	r2, ip
 800c204:	9906      	ldr	r1, [sp, #24]
 800c206:	5053      	str	r3, [r2, r1]
 800c208:	9b01      	ldr	r3, [sp, #4]
 800c20a:	3304      	adds	r3, #4
 800c20c:	9301      	str	r3, [sp, #4]
 800c20e:	2304      	movs	r3, #4
 800c210:	449c      	add	ip, r3
 800c212:	e79b      	b.n	800c14c <__multiply+0x88>
 800c214:	9b03      	ldr	r3, [sp, #12]
 800c216:	3b01      	subs	r3, #1
 800c218:	9303      	str	r3, [sp, #12]
 800c21a:	e79b      	b.n	800c154 <__multiply+0x90>
 800c21c:	0800ee1d 	.word	0x0800ee1d
 800c220:	0800ee2e 	.word	0x0800ee2e

0800c224 <__pow5mult>:
 800c224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c226:	2303      	movs	r3, #3
 800c228:	0015      	movs	r5, r2
 800c22a:	0007      	movs	r7, r0
 800c22c:	000e      	movs	r6, r1
 800c22e:	401a      	ands	r2, r3
 800c230:	421d      	tst	r5, r3
 800c232:	d008      	beq.n	800c246 <__pow5mult+0x22>
 800c234:	4925      	ldr	r1, [pc, #148]	; (800c2cc <__pow5mult+0xa8>)
 800c236:	3a01      	subs	r2, #1
 800c238:	0092      	lsls	r2, r2, #2
 800c23a:	5852      	ldr	r2, [r2, r1]
 800c23c:	2300      	movs	r3, #0
 800c23e:	0031      	movs	r1, r6
 800c240:	f7ff fe50 	bl	800bee4 <__multadd>
 800c244:	0006      	movs	r6, r0
 800c246:	10ad      	asrs	r5, r5, #2
 800c248:	d03d      	beq.n	800c2c6 <__pow5mult+0xa2>
 800c24a:	69fc      	ldr	r4, [r7, #28]
 800c24c:	2c00      	cmp	r4, #0
 800c24e:	d10f      	bne.n	800c270 <__pow5mult+0x4c>
 800c250:	2010      	movs	r0, #16
 800c252:	f7ff fd21 	bl	800bc98 <malloc>
 800c256:	1e02      	subs	r2, r0, #0
 800c258:	61f8      	str	r0, [r7, #28]
 800c25a:	d105      	bne.n	800c268 <__pow5mult+0x44>
 800c25c:	21b4      	movs	r1, #180	; 0xb4
 800c25e:	4b1c      	ldr	r3, [pc, #112]	; (800c2d0 <__pow5mult+0xac>)
 800c260:	481c      	ldr	r0, [pc, #112]	; (800c2d4 <__pow5mult+0xb0>)
 800c262:	31ff      	adds	r1, #255	; 0xff
 800c264:	f001 fba4 	bl	800d9b0 <__assert_func>
 800c268:	6044      	str	r4, [r0, #4]
 800c26a:	6084      	str	r4, [r0, #8]
 800c26c:	6004      	str	r4, [r0, #0]
 800c26e:	60c4      	str	r4, [r0, #12]
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	689c      	ldr	r4, [r3, #8]
 800c274:	9301      	str	r3, [sp, #4]
 800c276:	2c00      	cmp	r4, #0
 800c278:	d108      	bne.n	800c28c <__pow5mult+0x68>
 800c27a:	0038      	movs	r0, r7
 800c27c:	4916      	ldr	r1, [pc, #88]	; (800c2d8 <__pow5mult+0xb4>)
 800c27e:	f7ff ff09 	bl	800c094 <__i2b>
 800c282:	9b01      	ldr	r3, [sp, #4]
 800c284:	0004      	movs	r4, r0
 800c286:	6098      	str	r0, [r3, #8]
 800c288:	2300      	movs	r3, #0
 800c28a:	6003      	str	r3, [r0, #0]
 800c28c:	2301      	movs	r3, #1
 800c28e:	421d      	tst	r5, r3
 800c290:	d00a      	beq.n	800c2a8 <__pow5mult+0x84>
 800c292:	0031      	movs	r1, r6
 800c294:	0022      	movs	r2, r4
 800c296:	0038      	movs	r0, r7
 800c298:	f7ff ff14 	bl	800c0c4 <__multiply>
 800c29c:	0031      	movs	r1, r6
 800c29e:	9001      	str	r0, [sp, #4]
 800c2a0:	0038      	movs	r0, r7
 800c2a2:	f7ff fdfb 	bl	800be9c <_Bfree>
 800c2a6:	9e01      	ldr	r6, [sp, #4]
 800c2a8:	106d      	asrs	r5, r5, #1
 800c2aa:	d00c      	beq.n	800c2c6 <__pow5mult+0xa2>
 800c2ac:	6820      	ldr	r0, [r4, #0]
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d107      	bne.n	800c2c2 <__pow5mult+0x9e>
 800c2b2:	0022      	movs	r2, r4
 800c2b4:	0021      	movs	r1, r4
 800c2b6:	0038      	movs	r0, r7
 800c2b8:	f7ff ff04 	bl	800c0c4 <__multiply>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	6020      	str	r0, [r4, #0]
 800c2c0:	6003      	str	r3, [r0, #0]
 800c2c2:	0004      	movs	r4, r0
 800c2c4:	e7e2      	b.n	800c28c <__pow5mult+0x68>
 800c2c6:	0030      	movs	r0, r6
 800c2c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c2ca:	46c0      	nop			; (mov r8, r8)
 800c2cc:	0800ef78 	.word	0x0800ef78
 800c2d0:	0800edae 	.word	0x0800edae
 800c2d4:	0800ee2e 	.word	0x0800ee2e
 800c2d8:	00000271 	.word	0x00000271

0800c2dc <__lshift>:
 800c2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2de:	000c      	movs	r4, r1
 800c2e0:	0017      	movs	r7, r2
 800c2e2:	6923      	ldr	r3, [r4, #16]
 800c2e4:	1155      	asrs	r5, r2, #5
 800c2e6:	b087      	sub	sp, #28
 800c2e8:	18eb      	adds	r3, r5, r3
 800c2ea:	9302      	str	r3, [sp, #8]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	9301      	str	r3, [sp, #4]
 800c2f0:	6849      	ldr	r1, [r1, #4]
 800c2f2:	68a3      	ldr	r3, [r4, #8]
 800c2f4:	9004      	str	r0, [sp, #16]
 800c2f6:	9a01      	ldr	r2, [sp, #4]
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	db10      	blt.n	800c31e <__lshift+0x42>
 800c2fc:	9804      	ldr	r0, [sp, #16]
 800c2fe:	f7ff fd89 	bl	800be14 <_Balloc>
 800c302:	2300      	movs	r3, #0
 800c304:	0002      	movs	r2, r0
 800c306:	0006      	movs	r6, r0
 800c308:	0019      	movs	r1, r3
 800c30a:	3214      	adds	r2, #20
 800c30c:	4298      	cmp	r0, r3
 800c30e:	d10c      	bne.n	800c32a <__lshift+0x4e>
 800c310:	31df      	adds	r1, #223	; 0xdf
 800c312:	0032      	movs	r2, r6
 800c314:	4b26      	ldr	r3, [pc, #152]	; (800c3b0 <__lshift+0xd4>)
 800c316:	4827      	ldr	r0, [pc, #156]	; (800c3b4 <__lshift+0xd8>)
 800c318:	31ff      	adds	r1, #255	; 0xff
 800c31a:	f001 fb49 	bl	800d9b0 <__assert_func>
 800c31e:	3101      	adds	r1, #1
 800c320:	005b      	lsls	r3, r3, #1
 800c322:	e7e8      	b.n	800c2f6 <__lshift+0x1a>
 800c324:	0098      	lsls	r0, r3, #2
 800c326:	5011      	str	r1, [r2, r0]
 800c328:	3301      	adds	r3, #1
 800c32a:	42ab      	cmp	r3, r5
 800c32c:	dbfa      	blt.n	800c324 <__lshift+0x48>
 800c32e:	43eb      	mvns	r3, r5
 800c330:	17db      	asrs	r3, r3, #31
 800c332:	401d      	ands	r5, r3
 800c334:	211f      	movs	r1, #31
 800c336:	0023      	movs	r3, r4
 800c338:	0038      	movs	r0, r7
 800c33a:	00ad      	lsls	r5, r5, #2
 800c33c:	1955      	adds	r5, r2, r5
 800c33e:	6922      	ldr	r2, [r4, #16]
 800c340:	3314      	adds	r3, #20
 800c342:	0092      	lsls	r2, r2, #2
 800c344:	4008      	ands	r0, r1
 800c346:	4684      	mov	ip, r0
 800c348:	189a      	adds	r2, r3, r2
 800c34a:	420f      	tst	r7, r1
 800c34c:	d02a      	beq.n	800c3a4 <__lshift+0xc8>
 800c34e:	3101      	adds	r1, #1
 800c350:	1a09      	subs	r1, r1, r0
 800c352:	9105      	str	r1, [sp, #20]
 800c354:	2100      	movs	r1, #0
 800c356:	9503      	str	r5, [sp, #12]
 800c358:	4667      	mov	r7, ip
 800c35a:	6818      	ldr	r0, [r3, #0]
 800c35c:	40b8      	lsls	r0, r7
 800c35e:	4308      	orrs	r0, r1
 800c360:	9903      	ldr	r1, [sp, #12]
 800c362:	c101      	stmia	r1!, {r0}
 800c364:	9103      	str	r1, [sp, #12]
 800c366:	9805      	ldr	r0, [sp, #20]
 800c368:	cb02      	ldmia	r3!, {r1}
 800c36a:	40c1      	lsrs	r1, r0
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d8f3      	bhi.n	800c358 <__lshift+0x7c>
 800c370:	0020      	movs	r0, r4
 800c372:	3015      	adds	r0, #21
 800c374:	2304      	movs	r3, #4
 800c376:	4282      	cmp	r2, r0
 800c378:	d304      	bcc.n	800c384 <__lshift+0xa8>
 800c37a:	1b13      	subs	r3, r2, r4
 800c37c:	3b15      	subs	r3, #21
 800c37e:	089b      	lsrs	r3, r3, #2
 800c380:	3301      	adds	r3, #1
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	50e9      	str	r1, [r5, r3]
 800c386:	2900      	cmp	r1, #0
 800c388:	d002      	beq.n	800c390 <__lshift+0xb4>
 800c38a:	9b02      	ldr	r3, [sp, #8]
 800c38c:	3302      	adds	r3, #2
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	9b01      	ldr	r3, [sp, #4]
 800c392:	9804      	ldr	r0, [sp, #16]
 800c394:	3b01      	subs	r3, #1
 800c396:	0021      	movs	r1, r4
 800c398:	6133      	str	r3, [r6, #16]
 800c39a:	f7ff fd7f 	bl	800be9c <_Bfree>
 800c39e:	0030      	movs	r0, r6
 800c3a0:	b007      	add	sp, #28
 800c3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3a4:	cb02      	ldmia	r3!, {r1}
 800c3a6:	c502      	stmia	r5!, {r1}
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d8fb      	bhi.n	800c3a4 <__lshift+0xc8>
 800c3ac:	e7f0      	b.n	800c390 <__lshift+0xb4>
 800c3ae:	46c0      	nop			; (mov r8, r8)
 800c3b0:	0800ee1d 	.word	0x0800ee1d
 800c3b4:	0800ee2e 	.word	0x0800ee2e

0800c3b8 <__mcmp>:
 800c3b8:	b530      	push	{r4, r5, lr}
 800c3ba:	690b      	ldr	r3, [r1, #16]
 800c3bc:	6904      	ldr	r4, [r0, #16]
 800c3be:	0002      	movs	r2, r0
 800c3c0:	1ae0      	subs	r0, r4, r3
 800c3c2:	429c      	cmp	r4, r3
 800c3c4:	d10e      	bne.n	800c3e4 <__mcmp+0x2c>
 800c3c6:	3214      	adds	r2, #20
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	3114      	adds	r1, #20
 800c3cc:	0014      	movs	r4, r2
 800c3ce:	18c9      	adds	r1, r1, r3
 800c3d0:	18d2      	adds	r2, r2, r3
 800c3d2:	3a04      	subs	r2, #4
 800c3d4:	3904      	subs	r1, #4
 800c3d6:	6815      	ldr	r5, [r2, #0]
 800c3d8:	680b      	ldr	r3, [r1, #0]
 800c3da:	429d      	cmp	r5, r3
 800c3dc:	d003      	beq.n	800c3e6 <__mcmp+0x2e>
 800c3de:	2001      	movs	r0, #1
 800c3e0:	429d      	cmp	r5, r3
 800c3e2:	d303      	bcc.n	800c3ec <__mcmp+0x34>
 800c3e4:	bd30      	pop	{r4, r5, pc}
 800c3e6:	4294      	cmp	r4, r2
 800c3e8:	d3f3      	bcc.n	800c3d2 <__mcmp+0x1a>
 800c3ea:	e7fb      	b.n	800c3e4 <__mcmp+0x2c>
 800c3ec:	4240      	negs	r0, r0
 800c3ee:	e7f9      	b.n	800c3e4 <__mcmp+0x2c>

0800c3f0 <__mdiff>:
 800c3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3f2:	000e      	movs	r6, r1
 800c3f4:	0007      	movs	r7, r0
 800c3f6:	0011      	movs	r1, r2
 800c3f8:	0030      	movs	r0, r6
 800c3fa:	b087      	sub	sp, #28
 800c3fc:	0014      	movs	r4, r2
 800c3fe:	f7ff ffdb 	bl	800c3b8 <__mcmp>
 800c402:	1e05      	subs	r5, r0, #0
 800c404:	d110      	bne.n	800c428 <__mdiff+0x38>
 800c406:	0001      	movs	r1, r0
 800c408:	0038      	movs	r0, r7
 800c40a:	f7ff fd03 	bl	800be14 <_Balloc>
 800c40e:	1e02      	subs	r2, r0, #0
 800c410:	d104      	bne.n	800c41c <__mdiff+0x2c>
 800c412:	4b3f      	ldr	r3, [pc, #252]	; (800c510 <__mdiff+0x120>)
 800c414:	483f      	ldr	r0, [pc, #252]	; (800c514 <__mdiff+0x124>)
 800c416:	4940      	ldr	r1, [pc, #256]	; (800c518 <__mdiff+0x128>)
 800c418:	f001 faca 	bl	800d9b0 <__assert_func>
 800c41c:	2301      	movs	r3, #1
 800c41e:	6145      	str	r5, [r0, #20]
 800c420:	6103      	str	r3, [r0, #16]
 800c422:	0010      	movs	r0, r2
 800c424:	b007      	add	sp, #28
 800c426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c428:	2301      	movs	r3, #1
 800c42a:	9301      	str	r3, [sp, #4]
 800c42c:	2800      	cmp	r0, #0
 800c42e:	db04      	blt.n	800c43a <__mdiff+0x4a>
 800c430:	0023      	movs	r3, r4
 800c432:	0034      	movs	r4, r6
 800c434:	001e      	movs	r6, r3
 800c436:	2300      	movs	r3, #0
 800c438:	9301      	str	r3, [sp, #4]
 800c43a:	0038      	movs	r0, r7
 800c43c:	6861      	ldr	r1, [r4, #4]
 800c43e:	f7ff fce9 	bl	800be14 <_Balloc>
 800c442:	1e02      	subs	r2, r0, #0
 800c444:	d103      	bne.n	800c44e <__mdiff+0x5e>
 800c446:	4b32      	ldr	r3, [pc, #200]	; (800c510 <__mdiff+0x120>)
 800c448:	4832      	ldr	r0, [pc, #200]	; (800c514 <__mdiff+0x124>)
 800c44a:	4934      	ldr	r1, [pc, #208]	; (800c51c <__mdiff+0x12c>)
 800c44c:	e7e4      	b.n	800c418 <__mdiff+0x28>
 800c44e:	9b01      	ldr	r3, [sp, #4]
 800c450:	2700      	movs	r7, #0
 800c452:	60c3      	str	r3, [r0, #12]
 800c454:	6920      	ldr	r0, [r4, #16]
 800c456:	3414      	adds	r4, #20
 800c458:	0083      	lsls	r3, r0, #2
 800c45a:	18e3      	adds	r3, r4, r3
 800c45c:	0021      	movs	r1, r4
 800c45e:	9401      	str	r4, [sp, #4]
 800c460:	0034      	movs	r4, r6
 800c462:	9302      	str	r3, [sp, #8]
 800c464:	6933      	ldr	r3, [r6, #16]
 800c466:	3414      	adds	r4, #20
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	18e3      	adds	r3, r4, r3
 800c46c:	9303      	str	r3, [sp, #12]
 800c46e:	0013      	movs	r3, r2
 800c470:	3314      	adds	r3, #20
 800c472:	469c      	mov	ip, r3
 800c474:	9305      	str	r3, [sp, #20]
 800c476:	9104      	str	r1, [sp, #16]
 800c478:	9b04      	ldr	r3, [sp, #16]
 800c47a:	cc02      	ldmia	r4!, {r1}
 800c47c:	cb20      	ldmia	r3!, {r5}
 800c47e:	9304      	str	r3, [sp, #16]
 800c480:	b2ab      	uxth	r3, r5
 800c482:	19df      	adds	r7, r3, r7
 800c484:	b28b      	uxth	r3, r1
 800c486:	1afb      	subs	r3, r7, r3
 800c488:	0c09      	lsrs	r1, r1, #16
 800c48a:	0c2d      	lsrs	r5, r5, #16
 800c48c:	1a6d      	subs	r5, r5, r1
 800c48e:	1419      	asrs	r1, r3, #16
 800c490:	1869      	adds	r1, r5, r1
 800c492:	b29b      	uxth	r3, r3
 800c494:	140f      	asrs	r7, r1, #16
 800c496:	0409      	lsls	r1, r1, #16
 800c498:	4319      	orrs	r1, r3
 800c49a:	4663      	mov	r3, ip
 800c49c:	c302      	stmia	r3!, {r1}
 800c49e:	469c      	mov	ip, r3
 800c4a0:	9b03      	ldr	r3, [sp, #12]
 800c4a2:	42a3      	cmp	r3, r4
 800c4a4:	d8e8      	bhi.n	800c478 <__mdiff+0x88>
 800c4a6:	0031      	movs	r1, r6
 800c4a8:	9c03      	ldr	r4, [sp, #12]
 800c4aa:	3115      	adds	r1, #21
 800c4ac:	2304      	movs	r3, #4
 800c4ae:	428c      	cmp	r4, r1
 800c4b0:	d304      	bcc.n	800c4bc <__mdiff+0xcc>
 800c4b2:	1ba3      	subs	r3, r4, r6
 800c4b4:	3b15      	subs	r3, #21
 800c4b6:	089b      	lsrs	r3, r3, #2
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	9901      	ldr	r1, [sp, #4]
 800c4be:	18cd      	adds	r5, r1, r3
 800c4c0:	9905      	ldr	r1, [sp, #20]
 800c4c2:	002e      	movs	r6, r5
 800c4c4:	18cb      	adds	r3, r1, r3
 800c4c6:	469c      	mov	ip, r3
 800c4c8:	9902      	ldr	r1, [sp, #8]
 800c4ca:	428e      	cmp	r6, r1
 800c4cc:	d310      	bcc.n	800c4f0 <__mdiff+0x100>
 800c4ce:	9e02      	ldr	r6, [sp, #8]
 800c4d0:	1ee9      	subs	r1, r5, #3
 800c4d2:	2400      	movs	r4, #0
 800c4d4:	428e      	cmp	r6, r1
 800c4d6:	d304      	bcc.n	800c4e2 <__mdiff+0xf2>
 800c4d8:	0031      	movs	r1, r6
 800c4da:	3103      	adds	r1, #3
 800c4dc:	1b49      	subs	r1, r1, r5
 800c4de:	0889      	lsrs	r1, r1, #2
 800c4e0:	008c      	lsls	r4, r1, #2
 800c4e2:	191b      	adds	r3, r3, r4
 800c4e4:	3b04      	subs	r3, #4
 800c4e6:	6819      	ldr	r1, [r3, #0]
 800c4e8:	2900      	cmp	r1, #0
 800c4ea:	d00f      	beq.n	800c50c <__mdiff+0x11c>
 800c4ec:	6110      	str	r0, [r2, #16]
 800c4ee:	e798      	b.n	800c422 <__mdiff+0x32>
 800c4f0:	ce02      	ldmia	r6!, {r1}
 800c4f2:	b28c      	uxth	r4, r1
 800c4f4:	19e4      	adds	r4, r4, r7
 800c4f6:	0c0f      	lsrs	r7, r1, #16
 800c4f8:	1421      	asrs	r1, r4, #16
 800c4fa:	1879      	adds	r1, r7, r1
 800c4fc:	b2a4      	uxth	r4, r4
 800c4fe:	140f      	asrs	r7, r1, #16
 800c500:	0409      	lsls	r1, r1, #16
 800c502:	4321      	orrs	r1, r4
 800c504:	4664      	mov	r4, ip
 800c506:	c402      	stmia	r4!, {r1}
 800c508:	46a4      	mov	ip, r4
 800c50a:	e7dd      	b.n	800c4c8 <__mdiff+0xd8>
 800c50c:	3801      	subs	r0, #1
 800c50e:	e7e9      	b.n	800c4e4 <__mdiff+0xf4>
 800c510:	0800ee1d 	.word	0x0800ee1d
 800c514:	0800ee2e 	.word	0x0800ee2e
 800c518:	00000237 	.word	0x00000237
 800c51c:	00000245 	.word	0x00000245

0800c520 <__ulp>:
 800c520:	2000      	movs	r0, #0
 800c522:	4b0b      	ldr	r3, [pc, #44]	; (800c550 <__ulp+0x30>)
 800c524:	4019      	ands	r1, r3
 800c526:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <__ulp+0x34>)
 800c528:	18c9      	adds	r1, r1, r3
 800c52a:	4281      	cmp	r1, r0
 800c52c:	dc06      	bgt.n	800c53c <__ulp+0x1c>
 800c52e:	4249      	negs	r1, r1
 800c530:	150b      	asrs	r3, r1, #20
 800c532:	2b13      	cmp	r3, #19
 800c534:	dc03      	bgt.n	800c53e <__ulp+0x1e>
 800c536:	2180      	movs	r1, #128	; 0x80
 800c538:	0309      	lsls	r1, r1, #12
 800c53a:	4119      	asrs	r1, r3
 800c53c:	4770      	bx	lr
 800c53e:	3b14      	subs	r3, #20
 800c540:	2001      	movs	r0, #1
 800c542:	2b1e      	cmp	r3, #30
 800c544:	dc02      	bgt.n	800c54c <__ulp+0x2c>
 800c546:	2080      	movs	r0, #128	; 0x80
 800c548:	0600      	lsls	r0, r0, #24
 800c54a:	40d8      	lsrs	r0, r3
 800c54c:	2100      	movs	r1, #0
 800c54e:	e7f5      	b.n	800c53c <__ulp+0x1c>
 800c550:	7ff00000 	.word	0x7ff00000
 800c554:	fcc00000 	.word	0xfcc00000

0800c558 <__b2d>:
 800c558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c55a:	0006      	movs	r6, r0
 800c55c:	6903      	ldr	r3, [r0, #16]
 800c55e:	3614      	adds	r6, #20
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	18f3      	adds	r3, r6, r3
 800c564:	1f1d      	subs	r5, r3, #4
 800c566:	682c      	ldr	r4, [r5, #0]
 800c568:	000f      	movs	r7, r1
 800c56a:	0020      	movs	r0, r4
 800c56c:	9301      	str	r3, [sp, #4]
 800c56e:	f7ff fd49 	bl	800c004 <__hi0bits>
 800c572:	2220      	movs	r2, #32
 800c574:	1a12      	subs	r2, r2, r0
 800c576:	603a      	str	r2, [r7, #0]
 800c578:	0003      	movs	r3, r0
 800c57a:	4a1c      	ldr	r2, [pc, #112]	; (800c5ec <__b2d+0x94>)
 800c57c:	280a      	cmp	r0, #10
 800c57e:	dc15      	bgt.n	800c5ac <__b2d+0x54>
 800c580:	210b      	movs	r1, #11
 800c582:	0027      	movs	r7, r4
 800c584:	1a09      	subs	r1, r1, r0
 800c586:	40cf      	lsrs	r7, r1
 800c588:	433a      	orrs	r2, r7
 800c58a:	468c      	mov	ip, r1
 800c58c:	0011      	movs	r1, r2
 800c58e:	2200      	movs	r2, #0
 800c590:	42ae      	cmp	r6, r5
 800c592:	d202      	bcs.n	800c59a <__b2d+0x42>
 800c594:	9a01      	ldr	r2, [sp, #4]
 800c596:	3a08      	subs	r2, #8
 800c598:	6812      	ldr	r2, [r2, #0]
 800c59a:	3315      	adds	r3, #21
 800c59c:	409c      	lsls	r4, r3
 800c59e:	4663      	mov	r3, ip
 800c5a0:	0027      	movs	r7, r4
 800c5a2:	40da      	lsrs	r2, r3
 800c5a4:	4317      	orrs	r7, r2
 800c5a6:	0038      	movs	r0, r7
 800c5a8:	b003      	add	sp, #12
 800c5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5ac:	2700      	movs	r7, #0
 800c5ae:	42ae      	cmp	r6, r5
 800c5b0:	d202      	bcs.n	800c5b8 <__b2d+0x60>
 800c5b2:	9d01      	ldr	r5, [sp, #4]
 800c5b4:	3d08      	subs	r5, #8
 800c5b6:	682f      	ldr	r7, [r5, #0]
 800c5b8:	210b      	movs	r1, #11
 800c5ba:	4249      	negs	r1, r1
 800c5bc:	468c      	mov	ip, r1
 800c5be:	449c      	add	ip, r3
 800c5c0:	2b0b      	cmp	r3, #11
 800c5c2:	d010      	beq.n	800c5e6 <__b2d+0x8e>
 800c5c4:	4661      	mov	r1, ip
 800c5c6:	2320      	movs	r3, #32
 800c5c8:	408c      	lsls	r4, r1
 800c5ca:	1a5b      	subs	r3, r3, r1
 800c5cc:	0039      	movs	r1, r7
 800c5ce:	40d9      	lsrs	r1, r3
 800c5d0:	430c      	orrs	r4, r1
 800c5d2:	4322      	orrs	r2, r4
 800c5d4:	0011      	movs	r1, r2
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	42b5      	cmp	r5, r6
 800c5da:	d901      	bls.n	800c5e0 <__b2d+0x88>
 800c5dc:	3d04      	subs	r5, #4
 800c5de:	682a      	ldr	r2, [r5, #0]
 800c5e0:	4664      	mov	r4, ip
 800c5e2:	40a7      	lsls	r7, r4
 800c5e4:	e7dd      	b.n	800c5a2 <__b2d+0x4a>
 800c5e6:	4322      	orrs	r2, r4
 800c5e8:	0011      	movs	r1, r2
 800c5ea:	e7dc      	b.n	800c5a6 <__b2d+0x4e>
 800c5ec:	3ff00000 	.word	0x3ff00000

0800c5f0 <__d2b>:
 800c5f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	0014      	movs	r4, r2
 800c5f6:	001d      	movs	r5, r3
 800c5f8:	9f08      	ldr	r7, [sp, #32]
 800c5fa:	f7ff fc0b 	bl	800be14 <_Balloc>
 800c5fe:	1e06      	subs	r6, r0, #0
 800c600:	d105      	bne.n	800c60e <__d2b+0x1e>
 800c602:	0032      	movs	r2, r6
 800c604:	4b24      	ldr	r3, [pc, #144]	; (800c698 <__d2b+0xa8>)
 800c606:	4825      	ldr	r0, [pc, #148]	; (800c69c <__d2b+0xac>)
 800c608:	4925      	ldr	r1, [pc, #148]	; (800c6a0 <__d2b+0xb0>)
 800c60a:	f001 f9d1 	bl	800d9b0 <__assert_func>
 800c60e:	032b      	lsls	r3, r5, #12
 800c610:	006d      	lsls	r5, r5, #1
 800c612:	0b1b      	lsrs	r3, r3, #12
 800c614:	0d6d      	lsrs	r5, r5, #21
 800c616:	d125      	bne.n	800c664 <__d2b+0x74>
 800c618:	9301      	str	r3, [sp, #4]
 800c61a:	2c00      	cmp	r4, #0
 800c61c:	d028      	beq.n	800c670 <__d2b+0x80>
 800c61e:	4668      	mov	r0, sp
 800c620:	9400      	str	r4, [sp, #0]
 800c622:	f7ff fd09 	bl	800c038 <__lo0bits>
 800c626:	9b01      	ldr	r3, [sp, #4]
 800c628:	9900      	ldr	r1, [sp, #0]
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d01e      	beq.n	800c66c <__d2b+0x7c>
 800c62e:	2220      	movs	r2, #32
 800c630:	001c      	movs	r4, r3
 800c632:	1a12      	subs	r2, r2, r0
 800c634:	4094      	lsls	r4, r2
 800c636:	0022      	movs	r2, r4
 800c638:	40c3      	lsrs	r3, r0
 800c63a:	430a      	orrs	r2, r1
 800c63c:	6172      	str	r2, [r6, #20]
 800c63e:	9301      	str	r3, [sp, #4]
 800c640:	9c01      	ldr	r4, [sp, #4]
 800c642:	61b4      	str	r4, [r6, #24]
 800c644:	1e63      	subs	r3, r4, #1
 800c646:	419c      	sbcs	r4, r3
 800c648:	3401      	adds	r4, #1
 800c64a:	6134      	str	r4, [r6, #16]
 800c64c:	2d00      	cmp	r5, #0
 800c64e:	d017      	beq.n	800c680 <__d2b+0x90>
 800c650:	2435      	movs	r4, #53	; 0x35
 800c652:	4b14      	ldr	r3, [pc, #80]	; (800c6a4 <__d2b+0xb4>)
 800c654:	18ed      	adds	r5, r5, r3
 800c656:	182d      	adds	r5, r5, r0
 800c658:	603d      	str	r5, [r7, #0]
 800c65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c65c:	1a24      	subs	r4, r4, r0
 800c65e:	601c      	str	r4, [r3, #0]
 800c660:	0030      	movs	r0, r6
 800c662:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c664:	2280      	movs	r2, #128	; 0x80
 800c666:	0352      	lsls	r2, r2, #13
 800c668:	4313      	orrs	r3, r2
 800c66a:	e7d5      	b.n	800c618 <__d2b+0x28>
 800c66c:	6171      	str	r1, [r6, #20]
 800c66e:	e7e7      	b.n	800c640 <__d2b+0x50>
 800c670:	a801      	add	r0, sp, #4
 800c672:	f7ff fce1 	bl	800c038 <__lo0bits>
 800c676:	9b01      	ldr	r3, [sp, #4]
 800c678:	2401      	movs	r4, #1
 800c67a:	6173      	str	r3, [r6, #20]
 800c67c:	3020      	adds	r0, #32
 800c67e:	e7e4      	b.n	800c64a <__d2b+0x5a>
 800c680:	4b09      	ldr	r3, [pc, #36]	; (800c6a8 <__d2b+0xb8>)
 800c682:	18c0      	adds	r0, r0, r3
 800c684:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <__d2b+0xbc>)
 800c686:	6038      	str	r0, [r7, #0]
 800c688:	18e3      	adds	r3, r4, r3
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	18f3      	adds	r3, r6, r3
 800c68e:	6958      	ldr	r0, [r3, #20]
 800c690:	f7ff fcb8 	bl	800c004 <__hi0bits>
 800c694:	0164      	lsls	r4, r4, #5
 800c696:	e7e0      	b.n	800c65a <__d2b+0x6a>
 800c698:	0800ee1d 	.word	0x0800ee1d
 800c69c:	0800ee2e 	.word	0x0800ee2e
 800c6a0:	0000030f 	.word	0x0000030f
 800c6a4:	fffffbcd 	.word	0xfffffbcd
 800c6a8:	fffffbce 	.word	0xfffffbce
 800c6ac:	3fffffff 	.word	0x3fffffff

0800c6b0 <__ratio>:
 800c6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	000f      	movs	r7, r1
 800c6b6:	a904      	add	r1, sp, #16
 800c6b8:	0006      	movs	r6, r0
 800c6ba:	f7ff ff4d 	bl	800c558 <__b2d>
 800c6be:	9000      	str	r0, [sp, #0]
 800c6c0:	9101      	str	r1, [sp, #4]
 800c6c2:	9c00      	ldr	r4, [sp, #0]
 800c6c4:	9d01      	ldr	r5, [sp, #4]
 800c6c6:	0038      	movs	r0, r7
 800c6c8:	a905      	add	r1, sp, #20
 800c6ca:	f7ff ff45 	bl	800c558 <__b2d>
 800c6ce:	9002      	str	r0, [sp, #8]
 800c6d0:	9103      	str	r1, [sp, #12]
 800c6d2:	9a02      	ldr	r2, [sp, #8]
 800c6d4:	9b03      	ldr	r3, [sp, #12]
 800c6d6:	6930      	ldr	r0, [r6, #16]
 800c6d8:	6939      	ldr	r1, [r7, #16]
 800c6da:	9e04      	ldr	r6, [sp, #16]
 800c6dc:	1a40      	subs	r0, r0, r1
 800c6de:	9905      	ldr	r1, [sp, #20]
 800c6e0:	0140      	lsls	r0, r0, #5
 800c6e2:	1a71      	subs	r1, r6, r1
 800c6e4:	1841      	adds	r1, r0, r1
 800c6e6:	0508      	lsls	r0, r1, #20
 800c6e8:	2900      	cmp	r1, #0
 800c6ea:	dd07      	ble.n	800c6fc <__ratio+0x4c>
 800c6ec:	9901      	ldr	r1, [sp, #4]
 800c6ee:	1845      	adds	r5, r0, r1
 800c6f0:	0020      	movs	r0, r4
 800c6f2:	0029      	movs	r1, r5
 800c6f4:	f7f4 fec4 	bl	8001480 <__aeabi_ddiv>
 800c6f8:	b007      	add	sp, #28
 800c6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6fc:	9903      	ldr	r1, [sp, #12]
 800c6fe:	1a0b      	subs	r3, r1, r0
 800c700:	e7f6      	b.n	800c6f0 <__ratio+0x40>

0800c702 <__copybits>:
 800c702:	b570      	push	{r4, r5, r6, lr}
 800c704:	0014      	movs	r4, r2
 800c706:	0005      	movs	r5, r0
 800c708:	3901      	subs	r1, #1
 800c70a:	6913      	ldr	r3, [r2, #16]
 800c70c:	1149      	asrs	r1, r1, #5
 800c70e:	3101      	adds	r1, #1
 800c710:	0089      	lsls	r1, r1, #2
 800c712:	3414      	adds	r4, #20
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	1841      	adds	r1, r0, r1
 800c718:	18e3      	adds	r3, r4, r3
 800c71a:	42a3      	cmp	r3, r4
 800c71c:	d80d      	bhi.n	800c73a <__copybits+0x38>
 800c71e:	0014      	movs	r4, r2
 800c720:	3411      	adds	r4, #17
 800c722:	2500      	movs	r5, #0
 800c724:	429c      	cmp	r4, r3
 800c726:	d803      	bhi.n	800c730 <__copybits+0x2e>
 800c728:	1a9b      	subs	r3, r3, r2
 800c72a:	3b11      	subs	r3, #17
 800c72c:	089b      	lsrs	r3, r3, #2
 800c72e:	009d      	lsls	r5, r3, #2
 800c730:	2300      	movs	r3, #0
 800c732:	1940      	adds	r0, r0, r5
 800c734:	4281      	cmp	r1, r0
 800c736:	d803      	bhi.n	800c740 <__copybits+0x3e>
 800c738:	bd70      	pop	{r4, r5, r6, pc}
 800c73a:	cc40      	ldmia	r4!, {r6}
 800c73c:	c540      	stmia	r5!, {r6}
 800c73e:	e7ec      	b.n	800c71a <__copybits+0x18>
 800c740:	c008      	stmia	r0!, {r3}
 800c742:	e7f7      	b.n	800c734 <__copybits+0x32>

0800c744 <__any_on>:
 800c744:	0002      	movs	r2, r0
 800c746:	6900      	ldr	r0, [r0, #16]
 800c748:	b510      	push	{r4, lr}
 800c74a:	3214      	adds	r2, #20
 800c74c:	114b      	asrs	r3, r1, #5
 800c74e:	4298      	cmp	r0, r3
 800c750:	db13      	blt.n	800c77a <__any_on+0x36>
 800c752:	dd0c      	ble.n	800c76e <__any_on+0x2a>
 800c754:	241f      	movs	r4, #31
 800c756:	0008      	movs	r0, r1
 800c758:	4020      	ands	r0, r4
 800c75a:	4221      	tst	r1, r4
 800c75c:	d007      	beq.n	800c76e <__any_on+0x2a>
 800c75e:	0099      	lsls	r1, r3, #2
 800c760:	588c      	ldr	r4, [r1, r2]
 800c762:	0021      	movs	r1, r4
 800c764:	40c1      	lsrs	r1, r0
 800c766:	4081      	lsls	r1, r0
 800c768:	2001      	movs	r0, #1
 800c76a:	428c      	cmp	r4, r1
 800c76c:	d104      	bne.n	800c778 <__any_on+0x34>
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	18d3      	adds	r3, r2, r3
 800c772:	4293      	cmp	r3, r2
 800c774:	d803      	bhi.n	800c77e <__any_on+0x3a>
 800c776:	2000      	movs	r0, #0
 800c778:	bd10      	pop	{r4, pc}
 800c77a:	0003      	movs	r3, r0
 800c77c:	e7f7      	b.n	800c76e <__any_on+0x2a>
 800c77e:	3b04      	subs	r3, #4
 800c780:	6819      	ldr	r1, [r3, #0]
 800c782:	2900      	cmp	r1, #0
 800c784:	d0f5      	beq.n	800c772 <__any_on+0x2e>
 800c786:	2001      	movs	r0, #1
 800c788:	e7f6      	b.n	800c778 <__any_on+0x34>
	...

0800c78c <sulp>:
 800c78c:	b570      	push	{r4, r5, r6, lr}
 800c78e:	0016      	movs	r6, r2
 800c790:	000d      	movs	r5, r1
 800c792:	f7ff fec5 	bl	800c520 <__ulp>
 800c796:	2e00      	cmp	r6, #0
 800c798:	d00d      	beq.n	800c7b6 <sulp+0x2a>
 800c79a:	236b      	movs	r3, #107	; 0x6b
 800c79c:	006a      	lsls	r2, r5, #1
 800c79e:	0d52      	lsrs	r2, r2, #21
 800c7a0:	1a9b      	subs	r3, r3, r2
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	dd07      	ble.n	800c7b6 <sulp+0x2a>
 800c7a6:	2400      	movs	r4, #0
 800c7a8:	4a03      	ldr	r2, [pc, #12]	; (800c7b8 <sulp+0x2c>)
 800c7aa:	051b      	lsls	r3, r3, #20
 800c7ac:	189d      	adds	r5, r3, r2
 800c7ae:	002b      	movs	r3, r5
 800c7b0:	0022      	movs	r2, r4
 800c7b2:	f7f5 fa5f 	bl	8001c74 <__aeabi_dmul>
 800c7b6:	bd70      	pop	{r4, r5, r6, pc}
 800c7b8:	3ff00000 	.word	0x3ff00000

0800c7bc <_strtod_l>:
 800c7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7be:	b0a1      	sub	sp, #132	; 0x84
 800c7c0:	9219      	str	r2, [sp, #100]	; 0x64
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	2600      	movs	r6, #0
 800c7c6:	2700      	movs	r7, #0
 800c7c8:	9004      	str	r0, [sp, #16]
 800c7ca:	9107      	str	r1, [sp, #28]
 800c7cc:	921c      	str	r2, [sp, #112]	; 0x70
 800c7ce:	911b      	str	r1, [sp, #108]	; 0x6c
 800c7d0:	780a      	ldrb	r2, [r1, #0]
 800c7d2:	2a2b      	cmp	r2, #43	; 0x2b
 800c7d4:	d055      	beq.n	800c882 <_strtod_l+0xc6>
 800c7d6:	d841      	bhi.n	800c85c <_strtod_l+0xa0>
 800c7d8:	2a0d      	cmp	r2, #13
 800c7da:	d83b      	bhi.n	800c854 <_strtod_l+0x98>
 800c7dc:	2a08      	cmp	r2, #8
 800c7de:	d83b      	bhi.n	800c858 <_strtod_l+0x9c>
 800c7e0:	2a00      	cmp	r2, #0
 800c7e2:	d044      	beq.n	800c86e <_strtod_l+0xb2>
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	920f      	str	r2, [sp, #60]	; 0x3c
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c7ec:	9109      	str	r1, [sp, #36]	; 0x24
 800c7ee:	782a      	ldrb	r2, [r5, #0]
 800c7f0:	2a30      	cmp	r2, #48	; 0x30
 800c7f2:	d000      	beq.n	800c7f6 <_strtod_l+0x3a>
 800c7f4:	e085      	b.n	800c902 <_strtod_l+0x146>
 800c7f6:	786a      	ldrb	r2, [r5, #1]
 800c7f8:	3120      	adds	r1, #32
 800c7fa:	438a      	bics	r2, r1
 800c7fc:	2a58      	cmp	r2, #88	; 0x58
 800c7fe:	d000      	beq.n	800c802 <_strtod_l+0x46>
 800c800:	e075      	b.n	800c8ee <_strtod_l+0x132>
 800c802:	9302      	str	r3, [sp, #8]
 800c804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c806:	4a97      	ldr	r2, [pc, #604]	; (800ca64 <_strtod_l+0x2a8>)
 800c808:	9301      	str	r3, [sp, #4]
 800c80a:	ab1c      	add	r3, sp, #112	; 0x70
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	9804      	ldr	r0, [sp, #16]
 800c810:	ab1d      	add	r3, sp, #116	; 0x74
 800c812:	a91b      	add	r1, sp, #108	; 0x6c
 800c814:	f001 f982 	bl	800db1c <__gethex>
 800c818:	230f      	movs	r3, #15
 800c81a:	0002      	movs	r2, r0
 800c81c:	401a      	ands	r2, r3
 800c81e:	0004      	movs	r4, r0
 800c820:	9205      	str	r2, [sp, #20]
 800c822:	4218      	tst	r0, r3
 800c824:	d005      	beq.n	800c832 <_strtod_l+0x76>
 800c826:	2a06      	cmp	r2, #6
 800c828:	d12d      	bne.n	800c886 <_strtod_l+0xca>
 800c82a:	1c6b      	adds	r3, r5, #1
 800c82c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c82e:	2300      	movs	r3, #0
 800c830:	930f      	str	r3, [sp, #60]	; 0x3c
 800c832:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c834:	2b00      	cmp	r3, #0
 800c836:	d002      	beq.n	800c83e <_strtod_l+0x82>
 800c838:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c83a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c83c:	6013      	str	r3, [r2, #0]
 800c83e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c840:	2b00      	cmp	r3, #0
 800c842:	d01b      	beq.n	800c87c <_strtod_l+0xc0>
 800c844:	2380      	movs	r3, #128	; 0x80
 800c846:	0032      	movs	r2, r6
 800c848:	061b      	lsls	r3, r3, #24
 800c84a:	18fb      	adds	r3, r7, r3
 800c84c:	0010      	movs	r0, r2
 800c84e:	0019      	movs	r1, r3
 800c850:	b021      	add	sp, #132	; 0x84
 800c852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c854:	2a20      	cmp	r2, #32
 800c856:	d1c5      	bne.n	800c7e4 <_strtod_l+0x28>
 800c858:	3101      	adds	r1, #1
 800c85a:	e7b8      	b.n	800c7ce <_strtod_l+0x12>
 800c85c:	2a2d      	cmp	r2, #45	; 0x2d
 800c85e:	d1c1      	bne.n	800c7e4 <_strtod_l+0x28>
 800c860:	3a2c      	subs	r2, #44	; 0x2c
 800c862:	920f      	str	r2, [sp, #60]	; 0x3c
 800c864:	1c4a      	adds	r2, r1, #1
 800c866:	921b      	str	r2, [sp, #108]	; 0x6c
 800c868:	784a      	ldrb	r2, [r1, #1]
 800c86a:	2a00      	cmp	r2, #0
 800c86c:	d1bc      	bne.n	800c7e8 <_strtod_l+0x2c>
 800c86e:	9b07      	ldr	r3, [sp, #28]
 800c870:	931b      	str	r3, [sp, #108]	; 0x6c
 800c872:	2300      	movs	r3, #0
 800c874:	930f      	str	r3, [sp, #60]	; 0x3c
 800c876:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1dd      	bne.n	800c838 <_strtod_l+0x7c>
 800c87c:	0032      	movs	r2, r6
 800c87e:	003b      	movs	r3, r7
 800c880:	e7e4      	b.n	800c84c <_strtod_l+0x90>
 800c882:	2200      	movs	r2, #0
 800c884:	e7ed      	b.n	800c862 <_strtod_l+0xa6>
 800c886:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c888:	2a00      	cmp	r2, #0
 800c88a:	d007      	beq.n	800c89c <_strtod_l+0xe0>
 800c88c:	2135      	movs	r1, #53	; 0x35
 800c88e:	a81e      	add	r0, sp, #120	; 0x78
 800c890:	f7ff ff37 	bl	800c702 <__copybits>
 800c894:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c896:	9804      	ldr	r0, [sp, #16]
 800c898:	f7ff fb00 	bl	800be9c <_Bfree>
 800c89c:	9805      	ldr	r0, [sp, #20]
 800c89e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c8a0:	3801      	subs	r0, #1
 800c8a2:	2804      	cmp	r0, #4
 800c8a4:	d806      	bhi.n	800c8b4 <_strtod_l+0xf8>
 800c8a6:	f7f3 fc37 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c8aa:	0312      	.short	0x0312
 800c8ac:	1e1c      	.short	0x1e1c
 800c8ae:	12          	.byte	0x12
 800c8af:	00          	.byte	0x00
 800c8b0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c8b2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c8b4:	05e4      	lsls	r4, r4, #23
 800c8b6:	d502      	bpl.n	800c8be <_strtod_l+0x102>
 800c8b8:	2380      	movs	r3, #128	; 0x80
 800c8ba:	061b      	lsls	r3, r3, #24
 800c8bc:	431f      	orrs	r7, r3
 800c8be:	4b6a      	ldr	r3, [pc, #424]	; (800ca68 <_strtod_l+0x2ac>)
 800c8c0:	423b      	tst	r3, r7
 800c8c2:	d1b6      	bne.n	800c832 <_strtod_l+0x76>
 800c8c4:	f7fe fac4 	bl	800ae50 <__errno>
 800c8c8:	2322      	movs	r3, #34	; 0x22
 800c8ca:	6003      	str	r3, [r0, #0]
 800c8cc:	e7b1      	b.n	800c832 <_strtod_l+0x76>
 800c8ce:	4967      	ldr	r1, [pc, #412]	; (800ca6c <_strtod_l+0x2b0>)
 800c8d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c8d2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c8d4:	400a      	ands	r2, r1
 800c8d6:	4966      	ldr	r1, [pc, #408]	; (800ca70 <_strtod_l+0x2b4>)
 800c8d8:	185b      	adds	r3, r3, r1
 800c8da:	051b      	lsls	r3, r3, #20
 800c8dc:	431a      	orrs	r2, r3
 800c8de:	0017      	movs	r7, r2
 800c8e0:	e7e8      	b.n	800c8b4 <_strtod_l+0xf8>
 800c8e2:	4f61      	ldr	r7, [pc, #388]	; (800ca68 <_strtod_l+0x2ac>)
 800c8e4:	e7e6      	b.n	800c8b4 <_strtod_l+0xf8>
 800c8e6:	2601      	movs	r6, #1
 800c8e8:	4f62      	ldr	r7, [pc, #392]	; (800ca74 <_strtod_l+0x2b8>)
 800c8ea:	4276      	negs	r6, r6
 800c8ec:	e7e2      	b.n	800c8b4 <_strtod_l+0xf8>
 800c8ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8f0:	1c5a      	adds	r2, r3, #1
 800c8f2:	921b      	str	r2, [sp, #108]	; 0x6c
 800c8f4:	785b      	ldrb	r3, [r3, #1]
 800c8f6:	2b30      	cmp	r3, #48	; 0x30
 800c8f8:	d0f9      	beq.n	800c8ee <_strtod_l+0x132>
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d099      	beq.n	800c832 <_strtod_l+0x76>
 800c8fe:	2301      	movs	r3, #1
 800c900:	9309      	str	r3, [sp, #36]	; 0x24
 800c902:	2500      	movs	r5, #0
 800c904:	220a      	movs	r2, #10
 800c906:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c908:	950d      	str	r5, [sp, #52]	; 0x34
 800c90a:	9310      	str	r3, [sp, #64]	; 0x40
 800c90c:	9508      	str	r5, [sp, #32]
 800c90e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c910:	7804      	ldrb	r4, [r0, #0]
 800c912:	0023      	movs	r3, r4
 800c914:	3b30      	subs	r3, #48	; 0x30
 800c916:	b2d9      	uxtb	r1, r3
 800c918:	2909      	cmp	r1, #9
 800c91a:	d927      	bls.n	800c96c <_strtod_l+0x1b0>
 800c91c:	2201      	movs	r2, #1
 800c91e:	4956      	ldr	r1, [pc, #344]	; (800ca78 <_strtod_l+0x2bc>)
 800c920:	f001 f812 	bl	800d948 <strncmp>
 800c924:	2800      	cmp	r0, #0
 800c926:	d031      	beq.n	800c98c <_strtod_l+0x1d0>
 800c928:	2000      	movs	r0, #0
 800c92a:	0023      	movs	r3, r4
 800c92c:	4684      	mov	ip, r0
 800c92e:	9a08      	ldr	r2, [sp, #32]
 800c930:	900c      	str	r0, [sp, #48]	; 0x30
 800c932:	9205      	str	r2, [sp, #20]
 800c934:	2220      	movs	r2, #32
 800c936:	0019      	movs	r1, r3
 800c938:	4391      	bics	r1, r2
 800c93a:	000a      	movs	r2, r1
 800c93c:	2100      	movs	r1, #0
 800c93e:	9106      	str	r1, [sp, #24]
 800c940:	2a45      	cmp	r2, #69	; 0x45
 800c942:	d000      	beq.n	800c946 <_strtod_l+0x18a>
 800c944:	e0c2      	b.n	800cacc <_strtod_l+0x310>
 800c946:	9b05      	ldr	r3, [sp, #20]
 800c948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c94a:	4303      	orrs	r3, r0
 800c94c:	4313      	orrs	r3, r2
 800c94e:	428b      	cmp	r3, r1
 800c950:	d08d      	beq.n	800c86e <_strtod_l+0xb2>
 800c952:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c954:	9307      	str	r3, [sp, #28]
 800c956:	3301      	adds	r3, #1
 800c958:	931b      	str	r3, [sp, #108]	; 0x6c
 800c95a:	9b07      	ldr	r3, [sp, #28]
 800c95c:	785b      	ldrb	r3, [r3, #1]
 800c95e:	2b2b      	cmp	r3, #43	; 0x2b
 800c960:	d071      	beq.n	800ca46 <_strtod_l+0x28a>
 800c962:	000c      	movs	r4, r1
 800c964:	2b2d      	cmp	r3, #45	; 0x2d
 800c966:	d174      	bne.n	800ca52 <_strtod_l+0x296>
 800c968:	2401      	movs	r4, #1
 800c96a:	e06d      	b.n	800ca48 <_strtod_l+0x28c>
 800c96c:	9908      	ldr	r1, [sp, #32]
 800c96e:	2908      	cmp	r1, #8
 800c970:	dc09      	bgt.n	800c986 <_strtod_l+0x1ca>
 800c972:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c974:	4351      	muls	r1, r2
 800c976:	185b      	adds	r3, r3, r1
 800c978:	930d      	str	r3, [sp, #52]	; 0x34
 800c97a:	9b08      	ldr	r3, [sp, #32]
 800c97c:	3001      	adds	r0, #1
 800c97e:	3301      	adds	r3, #1
 800c980:	9308      	str	r3, [sp, #32]
 800c982:	901b      	str	r0, [sp, #108]	; 0x6c
 800c984:	e7c3      	b.n	800c90e <_strtod_l+0x152>
 800c986:	4355      	muls	r5, r2
 800c988:	195d      	adds	r5, r3, r5
 800c98a:	e7f6      	b.n	800c97a <_strtod_l+0x1be>
 800c98c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c98e:	1c5a      	adds	r2, r3, #1
 800c990:	921b      	str	r2, [sp, #108]	; 0x6c
 800c992:	9a08      	ldr	r2, [sp, #32]
 800c994:	785b      	ldrb	r3, [r3, #1]
 800c996:	2a00      	cmp	r2, #0
 800c998:	d03a      	beq.n	800ca10 <_strtod_l+0x254>
 800c99a:	900c      	str	r0, [sp, #48]	; 0x30
 800c99c:	9205      	str	r2, [sp, #20]
 800c99e:	001a      	movs	r2, r3
 800c9a0:	3a30      	subs	r2, #48	; 0x30
 800c9a2:	2a09      	cmp	r2, #9
 800c9a4:	d912      	bls.n	800c9cc <_strtod_l+0x210>
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	4694      	mov	ip, r2
 800c9aa:	e7c3      	b.n	800c934 <_strtod_l+0x178>
 800c9ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9ae:	3001      	adds	r0, #1
 800c9b0:	1c5a      	adds	r2, r3, #1
 800c9b2:	921b      	str	r2, [sp, #108]	; 0x6c
 800c9b4:	785b      	ldrb	r3, [r3, #1]
 800c9b6:	2b30      	cmp	r3, #48	; 0x30
 800c9b8:	d0f8      	beq.n	800c9ac <_strtod_l+0x1f0>
 800c9ba:	001a      	movs	r2, r3
 800c9bc:	3a31      	subs	r2, #49	; 0x31
 800c9be:	2a08      	cmp	r2, #8
 800c9c0:	d83c      	bhi.n	800ca3c <_strtod_l+0x280>
 800c9c2:	900c      	str	r0, [sp, #48]	; 0x30
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c9c8:	9005      	str	r0, [sp, #20]
 800c9ca:	9210      	str	r2, [sp, #64]	; 0x40
 800c9cc:	001a      	movs	r2, r3
 800c9ce:	1c41      	adds	r1, r0, #1
 800c9d0:	3a30      	subs	r2, #48	; 0x30
 800c9d2:	2b30      	cmp	r3, #48	; 0x30
 800c9d4:	d016      	beq.n	800ca04 <_strtod_l+0x248>
 800c9d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9d8:	185b      	adds	r3, r3, r1
 800c9da:	930c      	str	r3, [sp, #48]	; 0x30
 800c9dc:	9b05      	ldr	r3, [sp, #20]
 800c9de:	210a      	movs	r1, #10
 800c9e0:	469c      	mov	ip, r3
 800c9e2:	4484      	add	ip, r0
 800c9e4:	4563      	cmp	r3, ip
 800c9e6:	d115      	bne.n	800ca14 <_strtod_l+0x258>
 800c9e8:	9905      	ldr	r1, [sp, #20]
 800c9ea:	9b05      	ldr	r3, [sp, #20]
 800c9ec:	3101      	adds	r1, #1
 800c9ee:	1809      	adds	r1, r1, r0
 800c9f0:	181b      	adds	r3, r3, r0
 800c9f2:	9105      	str	r1, [sp, #20]
 800c9f4:	2b08      	cmp	r3, #8
 800c9f6:	dc19      	bgt.n	800ca2c <_strtod_l+0x270>
 800c9f8:	230a      	movs	r3, #10
 800c9fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c9fc:	434b      	muls	r3, r1
 800c9fe:	2100      	movs	r1, #0
 800ca00:	18d3      	adds	r3, r2, r3
 800ca02:	930d      	str	r3, [sp, #52]	; 0x34
 800ca04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca06:	0008      	movs	r0, r1
 800ca08:	1c5a      	adds	r2, r3, #1
 800ca0a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ca0c:	785b      	ldrb	r3, [r3, #1]
 800ca0e:	e7c6      	b.n	800c99e <_strtod_l+0x1e2>
 800ca10:	9808      	ldr	r0, [sp, #32]
 800ca12:	e7d0      	b.n	800c9b6 <_strtod_l+0x1fa>
 800ca14:	1c5c      	adds	r4, r3, #1
 800ca16:	2b08      	cmp	r3, #8
 800ca18:	dc04      	bgt.n	800ca24 <_strtod_l+0x268>
 800ca1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca1c:	434b      	muls	r3, r1
 800ca1e:	930d      	str	r3, [sp, #52]	; 0x34
 800ca20:	0023      	movs	r3, r4
 800ca22:	e7df      	b.n	800c9e4 <_strtod_l+0x228>
 800ca24:	2c10      	cmp	r4, #16
 800ca26:	dcfb      	bgt.n	800ca20 <_strtod_l+0x264>
 800ca28:	434d      	muls	r5, r1
 800ca2a:	e7f9      	b.n	800ca20 <_strtod_l+0x264>
 800ca2c:	9b05      	ldr	r3, [sp, #20]
 800ca2e:	2100      	movs	r1, #0
 800ca30:	2b10      	cmp	r3, #16
 800ca32:	dce7      	bgt.n	800ca04 <_strtod_l+0x248>
 800ca34:	230a      	movs	r3, #10
 800ca36:	435d      	muls	r5, r3
 800ca38:	1955      	adds	r5, r2, r5
 800ca3a:	e7e3      	b.n	800ca04 <_strtod_l+0x248>
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	920c      	str	r2, [sp, #48]	; 0x30
 800ca40:	9205      	str	r2, [sp, #20]
 800ca42:	3201      	adds	r2, #1
 800ca44:	e7b0      	b.n	800c9a8 <_strtod_l+0x1ec>
 800ca46:	2400      	movs	r4, #0
 800ca48:	9b07      	ldr	r3, [sp, #28]
 800ca4a:	3302      	adds	r3, #2
 800ca4c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ca4e:	9b07      	ldr	r3, [sp, #28]
 800ca50:	789b      	ldrb	r3, [r3, #2]
 800ca52:	001a      	movs	r2, r3
 800ca54:	3a30      	subs	r2, #48	; 0x30
 800ca56:	2a09      	cmp	r2, #9
 800ca58:	d914      	bls.n	800ca84 <_strtod_l+0x2c8>
 800ca5a:	9a07      	ldr	r2, [sp, #28]
 800ca5c:	921b      	str	r2, [sp, #108]	; 0x6c
 800ca5e:	2200      	movs	r2, #0
 800ca60:	e033      	b.n	800caca <_strtod_l+0x30e>
 800ca62:	46c0      	nop			; (mov r8, r8)
 800ca64:	0800ef88 	.word	0x0800ef88
 800ca68:	7ff00000 	.word	0x7ff00000
 800ca6c:	ffefffff 	.word	0xffefffff
 800ca70:	00000433 	.word	0x00000433
 800ca74:	7fffffff 	.word	0x7fffffff
 800ca78:	0800ef84 	.word	0x0800ef84
 800ca7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca7e:	1c5a      	adds	r2, r3, #1
 800ca80:	921b      	str	r2, [sp, #108]	; 0x6c
 800ca82:	785b      	ldrb	r3, [r3, #1]
 800ca84:	2b30      	cmp	r3, #48	; 0x30
 800ca86:	d0f9      	beq.n	800ca7c <_strtod_l+0x2c0>
 800ca88:	2200      	movs	r2, #0
 800ca8a:	9206      	str	r2, [sp, #24]
 800ca8c:	001a      	movs	r2, r3
 800ca8e:	3a31      	subs	r2, #49	; 0x31
 800ca90:	2a08      	cmp	r2, #8
 800ca92:	d81b      	bhi.n	800cacc <_strtod_l+0x310>
 800ca94:	3b30      	subs	r3, #48	; 0x30
 800ca96:	930e      	str	r3, [sp, #56]	; 0x38
 800ca98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca9a:	9306      	str	r3, [sp, #24]
 800ca9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca9e:	1c59      	adds	r1, r3, #1
 800caa0:	911b      	str	r1, [sp, #108]	; 0x6c
 800caa2:	785b      	ldrb	r3, [r3, #1]
 800caa4:	001a      	movs	r2, r3
 800caa6:	3a30      	subs	r2, #48	; 0x30
 800caa8:	2a09      	cmp	r2, #9
 800caaa:	d93a      	bls.n	800cb22 <_strtod_l+0x366>
 800caac:	9a06      	ldr	r2, [sp, #24]
 800caae:	1a8a      	subs	r2, r1, r2
 800cab0:	49b2      	ldr	r1, [pc, #712]	; (800cd7c <_strtod_l+0x5c0>)
 800cab2:	9106      	str	r1, [sp, #24]
 800cab4:	2a08      	cmp	r2, #8
 800cab6:	dc04      	bgt.n	800cac2 <_strtod_l+0x306>
 800cab8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800caba:	9206      	str	r2, [sp, #24]
 800cabc:	428a      	cmp	r2, r1
 800cabe:	dd00      	ble.n	800cac2 <_strtod_l+0x306>
 800cac0:	9106      	str	r1, [sp, #24]
 800cac2:	2c00      	cmp	r4, #0
 800cac4:	d002      	beq.n	800cacc <_strtod_l+0x310>
 800cac6:	9a06      	ldr	r2, [sp, #24]
 800cac8:	4252      	negs	r2, r2
 800caca:	9206      	str	r2, [sp, #24]
 800cacc:	9a05      	ldr	r2, [sp, #20]
 800cace:	2a00      	cmp	r2, #0
 800cad0:	d14d      	bne.n	800cb6e <_strtod_l+0x3b2>
 800cad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cad4:	4310      	orrs	r0, r2
 800cad6:	d000      	beq.n	800cada <_strtod_l+0x31e>
 800cad8:	e6ab      	b.n	800c832 <_strtod_l+0x76>
 800cada:	4662      	mov	r2, ip
 800cadc:	2a00      	cmp	r2, #0
 800cade:	d000      	beq.n	800cae2 <_strtod_l+0x326>
 800cae0:	e6c5      	b.n	800c86e <_strtod_l+0xb2>
 800cae2:	2b69      	cmp	r3, #105	; 0x69
 800cae4:	d027      	beq.n	800cb36 <_strtod_l+0x37a>
 800cae6:	dc23      	bgt.n	800cb30 <_strtod_l+0x374>
 800cae8:	2b49      	cmp	r3, #73	; 0x49
 800caea:	d024      	beq.n	800cb36 <_strtod_l+0x37a>
 800caec:	2b4e      	cmp	r3, #78	; 0x4e
 800caee:	d000      	beq.n	800caf2 <_strtod_l+0x336>
 800caf0:	e6bd      	b.n	800c86e <_strtod_l+0xb2>
 800caf2:	49a3      	ldr	r1, [pc, #652]	; (800cd80 <_strtod_l+0x5c4>)
 800caf4:	a81b      	add	r0, sp, #108	; 0x6c
 800caf6:	f001 fa47 	bl	800df88 <__match>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d100      	bne.n	800cb00 <_strtod_l+0x344>
 800cafe:	e6b6      	b.n	800c86e <_strtod_l+0xb2>
 800cb00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b28      	cmp	r3, #40	; 0x28
 800cb06:	d12c      	bne.n	800cb62 <_strtod_l+0x3a6>
 800cb08:	499e      	ldr	r1, [pc, #632]	; (800cd84 <_strtod_l+0x5c8>)
 800cb0a:	aa1e      	add	r2, sp, #120	; 0x78
 800cb0c:	a81b      	add	r0, sp, #108	; 0x6c
 800cb0e:	f001 fa4f 	bl	800dfb0 <__hexnan>
 800cb12:	2805      	cmp	r0, #5
 800cb14:	d125      	bne.n	800cb62 <_strtod_l+0x3a6>
 800cb16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cb18:	4a9b      	ldr	r2, [pc, #620]	; (800cd88 <_strtod_l+0x5cc>)
 800cb1a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cb1c:	431a      	orrs	r2, r3
 800cb1e:	0017      	movs	r7, r2
 800cb20:	e687      	b.n	800c832 <_strtod_l+0x76>
 800cb22:	220a      	movs	r2, #10
 800cb24:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cb26:	434a      	muls	r2, r1
 800cb28:	18d2      	adds	r2, r2, r3
 800cb2a:	3a30      	subs	r2, #48	; 0x30
 800cb2c:	920e      	str	r2, [sp, #56]	; 0x38
 800cb2e:	e7b5      	b.n	800ca9c <_strtod_l+0x2e0>
 800cb30:	2b6e      	cmp	r3, #110	; 0x6e
 800cb32:	d0de      	beq.n	800caf2 <_strtod_l+0x336>
 800cb34:	e69b      	b.n	800c86e <_strtod_l+0xb2>
 800cb36:	4995      	ldr	r1, [pc, #596]	; (800cd8c <_strtod_l+0x5d0>)
 800cb38:	a81b      	add	r0, sp, #108	; 0x6c
 800cb3a:	f001 fa25 	bl	800df88 <__match>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d100      	bne.n	800cb44 <_strtod_l+0x388>
 800cb42:	e694      	b.n	800c86e <_strtod_l+0xb2>
 800cb44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb46:	4992      	ldr	r1, [pc, #584]	; (800cd90 <_strtod_l+0x5d4>)
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	a81b      	add	r0, sp, #108	; 0x6c
 800cb4c:	931b      	str	r3, [sp, #108]	; 0x6c
 800cb4e:	f001 fa1b 	bl	800df88 <__match>
 800cb52:	2800      	cmp	r0, #0
 800cb54:	d102      	bne.n	800cb5c <_strtod_l+0x3a0>
 800cb56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb58:	3301      	adds	r3, #1
 800cb5a:	931b      	str	r3, [sp, #108]	; 0x6c
 800cb5c:	2600      	movs	r6, #0
 800cb5e:	4f8a      	ldr	r7, [pc, #552]	; (800cd88 <_strtod_l+0x5cc>)
 800cb60:	e667      	b.n	800c832 <_strtod_l+0x76>
 800cb62:	488c      	ldr	r0, [pc, #560]	; (800cd94 <_strtod_l+0x5d8>)
 800cb64:	f000 ff1e 	bl	800d9a4 <nan>
 800cb68:	0006      	movs	r6, r0
 800cb6a:	000f      	movs	r7, r1
 800cb6c:	e661      	b.n	800c832 <_strtod_l+0x76>
 800cb6e:	9b06      	ldr	r3, [sp, #24]
 800cb70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb72:	1a9b      	subs	r3, r3, r2
 800cb74:	9309      	str	r3, [sp, #36]	; 0x24
 800cb76:	9b08      	ldr	r3, [sp, #32]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d101      	bne.n	800cb80 <_strtod_l+0x3c4>
 800cb7c:	9b05      	ldr	r3, [sp, #20]
 800cb7e:	9308      	str	r3, [sp, #32]
 800cb80:	9c05      	ldr	r4, [sp, #20]
 800cb82:	2c10      	cmp	r4, #16
 800cb84:	dd00      	ble.n	800cb88 <_strtod_l+0x3cc>
 800cb86:	2410      	movs	r4, #16
 800cb88:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cb8a:	f7f5 ff3b 	bl	8002a04 <__aeabi_ui2d>
 800cb8e:	9b05      	ldr	r3, [sp, #20]
 800cb90:	0006      	movs	r6, r0
 800cb92:	000f      	movs	r7, r1
 800cb94:	2b09      	cmp	r3, #9
 800cb96:	dd15      	ble.n	800cbc4 <_strtod_l+0x408>
 800cb98:	0022      	movs	r2, r4
 800cb9a:	4b7f      	ldr	r3, [pc, #508]	; (800cd98 <_strtod_l+0x5dc>)
 800cb9c:	3a09      	subs	r2, #9
 800cb9e:	00d2      	lsls	r2, r2, #3
 800cba0:	189b      	adds	r3, r3, r2
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	f7f5 f865 	bl	8001c74 <__aeabi_dmul>
 800cbaa:	0006      	movs	r6, r0
 800cbac:	0028      	movs	r0, r5
 800cbae:	000f      	movs	r7, r1
 800cbb0:	f7f5 ff28 	bl	8002a04 <__aeabi_ui2d>
 800cbb4:	0002      	movs	r2, r0
 800cbb6:	000b      	movs	r3, r1
 800cbb8:	0030      	movs	r0, r6
 800cbba:	0039      	movs	r1, r7
 800cbbc:	f7f4 f900 	bl	8000dc0 <__aeabi_dadd>
 800cbc0:	0006      	movs	r6, r0
 800cbc2:	000f      	movs	r7, r1
 800cbc4:	9b05      	ldr	r3, [sp, #20]
 800cbc6:	2b0f      	cmp	r3, #15
 800cbc8:	dc39      	bgt.n	800cc3e <_strtod_l+0x482>
 800cbca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d100      	bne.n	800cbd2 <_strtod_l+0x416>
 800cbd0:	e62f      	b.n	800c832 <_strtod_l+0x76>
 800cbd2:	dd24      	ble.n	800cc1e <_strtod_l+0x462>
 800cbd4:	2b16      	cmp	r3, #22
 800cbd6:	dc09      	bgt.n	800cbec <_strtod_l+0x430>
 800cbd8:	496f      	ldr	r1, [pc, #444]	; (800cd98 <_strtod_l+0x5dc>)
 800cbda:	00db      	lsls	r3, r3, #3
 800cbdc:	18c9      	adds	r1, r1, r3
 800cbde:	0032      	movs	r2, r6
 800cbe0:	6808      	ldr	r0, [r1, #0]
 800cbe2:	6849      	ldr	r1, [r1, #4]
 800cbe4:	003b      	movs	r3, r7
 800cbe6:	f7f5 f845 	bl	8001c74 <__aeabi_dmul>
 800cbea:	e7bd      	b.n	800cb68 <_strtod_l+0x3ac>
 800cbec:	2325      	movs	r3, #37	; 0x25
 800cbee:	9a05      	ldr	r2, [sp, #20]
 800cbf0:	1a9b      	subs	r3, r3, r2
 800cbf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	db22      	blt.n	800cc3e <_strtod_l+0x482>
 800cbf8:	240f      	movs	r4, #15
 800cbfa:	9b05      	ldr	r3, [sp, #20]
 800cbfc:	4d66      	ldr	r5, [pc, #408]	; (800cd98 <_strtod_l+0x5dc>)
 800cbfe:	1ae4      	subs	r4, r4, r3
 800cc00:	00e1      	lsls	r1, r4, #3
 800cc02:	1869      	adds	r1, r5, r1
 800cc04:	0032      	movs	r2, r6
 800cc06:	6808      	ldr	r0, [r1, #0]
 800cc08:	6849      	ldr	r1, [r1, #4]
 800cc0a:	003b      	movs	r3, r7
 800cc0c:	f7f5 f832 	bl	8001c74 <__aeabi_dmul>
 800cc10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc12:	1b1c      	subs	r4, r3, r4
 800cc14:	00e4      	lsls	r4, r4, #3
 800cc16:	192d      	adds	r5, r5, r4
 800cc18:	682a      	ldr	r2, [r5, #0]
 800cc1a:	686b      	ldr	r3, [r5, #4]
 800cc1c:	e7e3      	b.n	800cbe6 <_strtod_l+0x42a>
 800cc1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc20:	3316      	adds	r3, #22
 800cc22:	db0c      	blt.n	800cc3e <_strtod_l+0x482>
 800cc24:	9906      	ldr	r1, [sp, #24]
 800cc26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc28:	4b5b      	ldr	r3, [pc, #364]	; (800cd98 <_strtod_l+0x5dc>)
 800cc2a:	1a52      	subs	r2, r2, r1
 800cc2c:	00d2      	lsls	r2, r2, #3
 800cc2e:	189b      	adds	r3, r3, r2
 800cc30:	0030      	movs	r0, r6
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	0039      	movs	r1, r7
 800cc38:	f7f4 fc22 	bl	8001480 <__aeabi_ddiv>
 800cc3c:	e794      	b.n	800cb68 <_strtod_l+0x3ac>
 800cc3e:	9b05      	ldr	r3, [sp, #20]
 800cc40:	1b1c      	subs	r4, r3, r4
 800cc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc44:	18e4      	adds	r4, r4, r3
 800cc46:	2c00      	cmp	r4, #0
 800cc48:	dd72      	ble.n	800cd30 <_strtod_l+0x574>
 800cc4a:	220f      	movs	r2, #15
 800cc4c:	0023      	movs	r3, r4
 800cc4e:	4013      	ands	r3, r2
 800cc50:	4214      	tst	r4, r2
 800cc52:	d00a      	beq.n	800cc6a <_strtod_l+0x4ae>
 800cc54:	4950      	ldr	r1, [pc, #320]	; (800cd98 <_strtod_l+0x5dc>)
 800cc56:	00db      	lsls	r3, r3, #3
 800cc58:	18c9      	adds	r1, r1, r3
 800cc5a:	0032      	movs	r2, r6
 800cc5c:	6808      	ldr	r0, [r1, #0]
 800cc5e:	6849      	ldr	r1, [r1, #4]
 800cc60:	003b      	movs	r3, r7
 800cc62:	f7f5 f807 	bl	8001c74 <__aeabi_dmul>
 800cc66:	0006      	movs	r6, r0
 800cc68:	000f      	movs	r7, r1
 800cc6a:	230f      	movs	r3, #15
 800cc6c:	439c      	bics	r4, r3
 800cc6e:	d04a      	beq.n	800cd06 <_strtod_l+0x54a>
 800cc70:	3326      	adds	r3, #38	; 0x26
 800cc72:	33ff      	adds	r3, #255	; 0xff
 800cc74:	429c      	cmp	r4, r3
 800cc76:	dd22      	ble.n	800ccbe <_strtod_l+0x502>
 800cc78:	2300      	movs	r3, #0
 800cc7a:	9305      	str	r3, [sp, #20]
 800cc7c:	9306      	str	r3, [sp, #24]
 800cc7e:	930d      	str	r3, [sp, #52]	; 0x34
 800cc80:	9308      	str	r3, [sp, #32]
 800cc82:	2322      	movs	r3, #34	; 0x22
 800cc84:	2600      	movs	r6, #0
 800cc86:	9a04      	ldr	r2, [sp, #16]
 800cc88:	4f3f      	ldr	r7, [pc, #252]	; (800cd88 <_strtod_l+0x5cc>)
 800cc8a:	6013      	str	r3, [r2, #0]
 800cc8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc8e:	42b3      	cmp	r3, r6
 800cc90:	d100      	bne.n	800cc94 <_strtod_l+0x4d8>
 800cc92:	e5ce      	b.n	800c832 <_strtod_l+0x76>
 800cc94:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc96:	9804      	ldr	r0, [sp, #16]
 800cc98:	f7ff f900 	bl	800be9c <_Bfree>
 800cc9c:	9908      	ldr	r1, [sp, #32]
 800cc9e:	9804      	ldr	r0, [sp, #16]
 800cca0:	f7ff f8fc 	bl	800be9c <_Bfree>
 800cca4:	9906      	ldr	r1, [sp, #24]
 800cca6:	9804      	ldr	r0, [sp, #16]
 800cca8:	f7ff f8f8 	bl	800be9c <_Bfree>
 800ccac:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ccae:	9804      	ldr	r0, [sp, #16]
 800ccb0:	f7ff f8f4 	bl	800be9c <_Bfree>
 800ccb4:	9905      	ldr	r1, [sp, #20]
 800ccb6:	9804      	ldr	r0, [sp, #16]
 800ccb8:	f7ff f8f0 	bl	800be9c <_Bfree>
 800ccbc:	e5b9      	b.n	800c832 <_strtod_l+0x76>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	0030      	movs	r0, r6
 800ccc2:	0039      	movs	r1, r7
 800ccc4:	4d35      	ldr	r5, [pc, #212]	; (800cd9c <_strtod_l+0x5e0>)
 800ccc6:	1124      	asrs	r4, r4, #4
 800ccc8:	9307      	str	r3, [sp, #28]
 800ccca:	2c01      	cmp	r4, #1
 800cccc:	dc1e      	bgt.n	800cd0c <_strtod_l+0x550>
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <_strtod_l+0x51a>
 800ccd2:	0006      	movs	r6, r0
 800ccd4:	000f      	movs	r7, r1
 800ccd6:	4b32      	ldr	r3, [pc, #200]	; (800cda0 <_strtod_l+0x5e4>)
 800ccd8:	9a07      	ldr	r2, [sp, #28]
 800ccda:	18ff      	adds	r7, r7, r3
 800ccdc:	4b2f      	ldr	r3, [pc, #188]	; (800cd9c <_strtod_l+0x5e0>)
 800ccde:	00d2      	lsls	r2, r2, #3
 800cce0:	189d      	adds	r5, r3, r2
 800cce2:	6828      	ldr	r0, [r5, #0]
 800cce4:	6869      	ldr	r1, [r5, #4]
 800cce6:	0032      	movs	r2, r6
 800cce8:	003b      	movs	r3, r7
 800ccea:	f7f4 ffc3 	bl	8001c74 <__aeabi_dmul>
 800ccee:	4b26      	ldr	r3, [pc, #152]	; (800cd88 <_strtod_l+0x5cc>)
 800ccf0:	4a2c      	ldr	r2, [pc, #176]	; (800cda4 <_strtod_l+0x5e8>)
 800ccf2:	0006      	movs	r6, r0
 800ccf4:	400b      	ands	r3, r1
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d8be      	bhi.n	800cc78 <_strtod_l+0x4bc>
 800ccfa:	4a2b      	ldr	r2, [pc, #172]	; (800cda8 <_strtod_l+0x5ec>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d913      	bls.n	800cd28 <_strtod_l+0x56c>
 800cd00:	2601      	movs	r6, #1
 800cd02:	4f2a      	ldr	r7, [pc, #168]	; (800cdac <_strtod_l+0x5f0>)
 800cd04:	4276      	negs	r6, r6
 800cd06:	2300      	movs	r3, #0
 800cd08:	9307      	str	r3, [sp, #28]
 800cd0a:	e088      	b.n	800ce1e <_strtod_l+0x662>
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	4214      	tst	r4, r2
 800cd10:	d004      	beq.n	800cd1c <_strtod_l+0x560>
 800cd12:	682a      	ldr	r2, [r5, #0]
 800cd14:	686b      	ldr	r3, [r5, #4]
 800cd16:	f7f4 ffad 	bl	8001c74 <__aeabi_dmul>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	9a07      	ldr	r2, [sp, #28]
 800cd1e:	1064      	asrs	r4, r4, #1
 800cd20:	3201      	adds	r2, #1
 800cd22:	9207      	str	r2, [sp, #28]
 800cd24:	3508      	adds	r5, #8
 800cd26:	e7d0      	b.n	800ccca <_strtod_l+0x50e>
 800cd28:	23d4      	movs	r3, #212	; 0xd4
 800cd2a:	049b      	lsls	r3, r3, #18
 800cd2c:	18cf      	adds	r7, r1, r3
 800cd2e:	e7ea      	b.n	800cd06 <_strtod_l+0x54a>
 800cd30:	2c00      	cmp	r4, #0
 800cd32:	d0e8      	beq.n	800cd06 <_strtod_l+0x54a>
 800cd34:	4264      	negs	r4, r4
 800cd36:	230f      	movs	r3, #15
 800cd38:	0022      	movs	r2, r4
 800cd3a:	401a      	ands	r2, r3
 800cd3c:	421c      	tst	r4, r3
 800cd3e:	d00a      	beq.n	800cd56 <_strtod_l+0x59a>
 800cd40:	4b15      	ldr	r3, [pc, #84]	; (800cd98 <_strtod_l+0x5dc>)
 800cd42:	00d2      	lsls	r2, r2, #3
 800cd44:	189b      	adds	r3, r3, r2
 800cd46:	0030      	movs	r0, r6
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	0039      	movs	r1, r7
 800cd4e:	f7f4 fb97 	bl	8001480 <__aeabi_ddiv>
 800cd52:	0006      	movs	r6, r0
 800cd54:	000f      	movs	r7, r1
 800cd56:	1124      	asrs	r4, r4, #4
 800cd58:	d0d5      	beq.n	800cd06 <_strtod_l+0x54a>
 800cd5a:	2c1f      	cmp	r4, #31
 800cd5c:	dd28      	ble.n	800cdb0 <_strtod_l+0x5f4>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	9305      	str	r3, [sp, #20]
 800cd62:	9306      	str	r3, [sp, #24]
 800cd64:	930d      	str	r3, [sp, #52]	; 0x34
 800cd66:	9308      	str	r3, [sp, #32]
 800cd68:	2322      	movs	r3, #34	; 0x22
 800cd6a:	9a04      	ldr	r2, [sp, #16]
 800cd6c:	2600      	movs	r6, #0
 800cd6e:	6013      	str	r3, [r2, #0]
 800cd70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd72:	2700      	movs	r7, #0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d18d      	bne.n	800cc94 <_strtod_l+0x4d8>
 800cd78:	e55b      	b.n	800c832 <_strtod_l+0x76>
 800cd7a:	46c0      	nop			; (mov r8, r8)
 800cd7c:	00004e1f 	.word	0x00004e1f
 800cd80:	0800ed75 	.word	0x0800ed75
 800cd84:	0800ef9c 	.word	0x0800ef9c
 800cd88:	7ff00000 	.word	0x7ff00000
 800cd8c:	0800ed6d 	.word	0x0800ed6d
 800cd90:	0800eda4 	.word	0x0800eda4
 800cd94:	0800f12d 	.word	0x0800f12d
 800cd98:	0800eeb0 	.word	0x0800eeb0
 800cd9c:	0800ee88 	.word	0x0800ee88
 800cda0:	fcb00000 	.word	0xfcb00000
 800cda4:	7ca00000 	.word	0x7ca00000
 800cda8:	7c900000 	.word	0x7c900000
 800cdac:	7fefffff 	.word	0x7fefffff
 800cdb0:	2310      	movs	r3, #16
 800cdb2:	0022      	movs	r2, r4
 800cdb4:	401a      	ands	r2, r3
 800cdb6:	9207      	str	r2, [sp, #28]
 800cdb8:	421c      	tst	r4, r3
 800cdba:	d001      	beq.n	800cdc0 <_strtod_l+0x604>
 800cdbc:	335a      	adds	r3, #90	; 0x5a
 800cdbe:	9307      	str	r3, [sp, #28]
 800cdc0:	0030      	movs	r0, r6
 800cdc2:	0039      	movs	r1, r7
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	4dc4      	ldr	r5, [pc, #784]	; (800d0d8 <_strtod_l+0x91c>)
 800cdc8:	2201      	movs	r2, #1
 800cdca:	4214      	tst	r4, r2
 800cdcc:	d004      	beq.n	800cdd8 <_strtod_l+0x61c>
 800cdce:	682a      	ldr	r2, [r5, #0]
 800cdd0:	686b      	ldr	r3, [r5, #4]
 800cdd2:	f7f4 ff4f 	bl	8001c74 <__aeabi_dmul>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	1064      	asrs	r4, r4, #1
 800cdda:	3508      	adds	r5, #8
 800cddc:	2c00      	cmp	r4, #0
 800cdde:	d1f3      	bne.n	800cdc8 <_strtod_l+0x60c>
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d001      	beq.n	800cde8 <_strtod_l+0x62c>
 800cde4:	0006      	movs	r6, r0
 800cde6:	000f      	movs	r7, r1
 800cde8:	9b07      	ldr	r3, [sp, #28]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00f      	beq.n	800ce0e <_strtod_l+0x652>
 800cdee:	236b      	movs	r3, #107	; 0x6b
 800cdf0:	007a      	lsls	r2, r7, #1
 800cdf2:	0d52      	lsrs	r2, r2, #21
 800cdf4:	0039      	movs	r1, r7
 800cdf6:	1a9b      	subs	r3, r3, r2
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	dd08      	ble.n	800ce0e <_strtod_l+0x652>
 800cdfc:	2b1f      	cmp	r3, #31
 800cdfe:	dc00      	bgt.n	800ce02 <_strtod_l+0x646>
 800ce00:	e121      	b.n	800d046 <_strtod_l+0x88a>
 800ce02:	2600      	movs	r6, #0
 800ce04:	2b34      	cmp	r3, #52	; 0x34
 800ce06:	dc00      	bgt.n	800ce0a <_strtod_l+0x64e>
 800ce08:	e116      	b.n	800d038 <_strtod_l+0x87c>
 800ce0a:	27dc      	movs	r7, #220	; 0xdc
 800ce0c:	04bf      	lsls	r7, r7, #18
 800ce0e:	2200      	movs	r2, #0
 800ce10:	2300      	movs	r3, #0
 800ce12:	0030      	movs	r0, r6
 800ce14:	0039      	movs	r1, r7
 800ce16:	f7f3 fb19 	bl	800044c <__aeabi_dcmpeq>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	d19f      	bne.n	800cd5e <_strtod_l+0x5a2>
 800ce1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce20:	9a08      	ldr	r2, [sp, #32]
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ce26:	9b05      	ldr	r3, [sp, #20]
 800ce28:	9804      	ldr	r0, [sp, #16]
 800ce2a:	f7ff f89f 	bl	800bf6c <__s2b>
 800ce2e:	900d      	str	r0, [sp, #52]	; 0x34
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d100      	bne.n	800ce36 <_strtod_l+0x67a>
 800ce34:	e720      	b.n	800cc78 <_strtod_l+0x4bc>
 800ce36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce38:	9906      	ldr	r1, [sp, #24]
 800ce3a:	17da      	asrs	r2, r3, #31
 800ce3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce3e:	1a5b      	subs	r3, r3, r1
 800ce40:	401a      	ands	r2, r3
 800ce42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce44:	9215      	str	r2, [sp, #84]	; 0x54
 800ce46:	43db      	mvns	r3, r3
 800ce48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce4a:	17db      	asrs	r3, r3, #31
 800ce4c:	401a      	ands	r2, r3
 800ce4e:	2300      	movs	r3, #0
 800ce50:	9218      	str	r2, [sp, #96]	; 0x60
 800ce52:	9305      	str	r3, [sp, #20]
 800ce54:	9306      	str	r3, [sp, #24]
 800ce56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce58:	9804      	ldr	r0, [sp, #16]
 800ce5a:	6859      	ldr	r1, [r3, #4]
 800ce5c:	f7fe ffda 	bl	800be14 <_Balloc>
 800ce60:	9008      	str	r0, [sp, #32]
 800ce62:	2800      	cmp	r0, #0
 800ce64:	d100      	bne.n	800ce68 <_strtod_l+0x6ac>
 800ce66:	e70c      	b.n	800cc82 <_strtod_l+0x4c6>
 800ce68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce6a:	300c      	adds	r0, #12
 800ce6c:	0019      	movs	r1, r3
 800ce6e:	691a      	ldr	r2, [r3, #16]
 800ce70:	310c      	adds	r1, #12
 800ce72:	3202      	adds	r2, #2
 800ce74:	0092      	lsls	r2, r2, #2
 800ce76:	f000 fd8b 	bl	800d990 <memcpy>
 800ce7a:	ab1e      	add	r3, sp, #120	; 0x78
 800ce7c:	9301      	str	r3, [sp, #4]
 800ce7e:	ab1d      	add	r3, sp, #116	; 0x74
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	0032      	movs	r2, r6
 800ce84:	003b      	movs	r3, r7
 800ce86:	9804      	ldr	r0, [sp, #16]
 800ce88:	9610      	str	r6, [sp, #64]	; 0x40
 800ce8a:	9711      	str	r7, [sp, #68]	; 0x44
 800ce8c:	f7ff fbb0 	bl	800c5f0 <__d2b>
 800ce90:	901c      	str	r0, [sp, #112]	; 0x70
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d100      	bne.n	800ce98 <_strtod_l+0x6dc>
 800ce96:	e6f4      	b.n	800cc82 <_strtod_l+0x4c6>
 800ce98:	2101      	movs	r1, #1
 800ce9a:	9804      	ldr	r0, [sp, #16]
 800ce9c:	f7ff f8fa 	bl	800c094 <__i2b>
 800cea0:	9006      	str	r0, [sp, #24]
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d100      	bne.n	800cea8 <_strtod_l+0x6ec>
 800cea6:	e6ec      	b.n	800cc82 <_strtod_l+0x4c6>
 800cea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ceaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ceac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ceae:	1ad4      	subs	r4, r2, r3
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	db01      	blt.n	800ceb8 <_strtod_l+0x6fc>
 800ceb4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800ceb6:	195d      	adds	r5, r3, r5
 800ceb8:	9907      	ldr	r1, [sp, #28]
 800ceba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cebc:	1a5b      	subs	r3, r3, r1
 800cebe:	2136      	movs	r1, #54	; 0x36
 800cec0:	189b      	adds	r3, r3, r2
 800cec2:	1a8a      	subs	r2, r1, r2
 800cec4:	4985      	ldr	r1, [pc, #532]	; (800d0dc <_strtod_l+0x920>)
 800cec6:	2001      	movs	r0, #1
 800cec8:	468c      	mov	ip, r1
 800ceca:	2100      	movs	r1, #0
 800cecc:	3b01      	subs	r3, #1
 800cece:	9114      	str	r1, [sp, #80]	; 0x50
 800ced0:	9012      	str	r0, [sp, #72]	; 0x48
 800ced2:	4563      	cmp	r3, ip
 800ced4:	da07      	bge.n	800cee6 <_strtod_l+0x72a>
 800ced6:	4661      	mov	r1, ip
 800ced8:	1ac9      	subs	r1, r1, r3
 800ceda:	1a52      	subs	r2, r2, r1
 800cedc:	291f      	cmp	r1, #31
 800cede:	dd00      	ble.n	800cee2 <_strtod_l+0x726>
 800cee0:	e0b6      	b.n	800d050 <_strtod_l+0x894>
 800cee2:	4088      	lsls	r0, r1
 800cee4:	9012      	str	r0, [sp, #72]	; 0x48
 800cee6:	18ab      	adds	r3, r5, r2
 800cee8:	930c      	str	r3, [sp, #48]	; 0x30
 800ceea:	18a4      	adds	r4, r4, r2
 800ceec:	9b07      	ldr	r3, [sp, #28]
 800ceee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cef0:	191c      	adds	r4, r3, r4
 800cef2:	002b      	movs	r3, r5
 800cef4:	4295      	cmp	r5, r2
 800cef6:	dd00      	ble.n	800cefa <_strtod_l+0x73e>
 800cef8:	0013      	movs	r3, r2
 800cefa:	42a3      	cmp	r3, r4
 800cefc:	dd00      	ble.n	800cf00 <_strtod_l+0x744>
 800cefe:	0023      	movs	r3, r4
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	dd04      	ble.n	800cf0e <_strtod_l+0x752>
 800cf04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf06:	1ae4      	subs	r4, r4, r3
 800cf08:	1ad2      	subs	r2, r2, r3
 800cf0a:	920c      	str	r2, [sp, #48]	; 0x30
 800cf0c:	1aed      	subs	r5, r5, r3
 800cf0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	dd17      	ble.n	800cf44 <_strtod_l+0x788>
 800cf14:	001a      	movs	r2, r3
 800cf16:	9906      	ldr	r1, [sp, #24]
 800cf18:	9804      	ldr	r0, [sp, #16]
 800cf1a:	f7ff f983 	bl	800c224 <__pow5mult>
 800cf1e:	9006      	str	r0, [sp, #24]
 800cf20:	2800      	cmp	r0, #0
 800cf22:	d100      	bne.n	800cf26 <_strtod_l+0x76a>
 800cf24:	e6ad      	b.n	800cc82 <_strtod_l+0x4c6>
 800cf26:	0001      	movs	r1, r0
 800cf28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cf2a:	9804      	ldr	r0, [sp, #16]
 800cf2c:	f7ff f8ca 	bl	800c0c4 <__multiply>
 800cf30:	900e      	str	r0, [sp, #56]	; 0x38
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d100      	bne.n	800cf38 <_strtod_l+0x77c>
 800cf36:	e6a4      	b.n	800cc82 <_strtod_l+0x4c6>
 800cf38:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cf3a:	9804      	ldr	r0, [sp, #16]
 800cf3c:	f7fe ffae 	bl	800be9c <_Bfree>
 800cf40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf42:	931c      	str	r3, [sp, #112]	; 0x70
 800cf44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	dd00      	ble.n	800cf4c <_strtod_l+0x790>
 800cf4a:	e087      	b.n	800d05c <_strtod_l+0x8a0>
 800cf4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	dd08      	ble.n	800cf64 <_strtod_l+0x7a8>
 800cf52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cf54:	9908      	ldr	r1, [sp, #32]
 800cf56:	9804      	ldr	r0, [sp, #16]
 800cf58:	f7ff f964 	bl	800c224 <__pow5mult>
 800cf5c:	9008      	str	r0, [sp, #32]
 800cf5e:	2800      	cmp	r0, #0
 800cf60:	d100      	bne.n	800cf64 <_strtod_l+0x7a8>
 800cf62:	e68e      	b.n	800cc82 <_strtod_l+0x4c6>
 800cf64:	2c00      	cmp	r4, #0
 800cf66:	dd08      	ble.n	800cf7a <_strtod_l+0x7be>
 800cf68:	0022      	movs	r2, r4
 800cf6a:	9908      	ldr	r1, [sp, #32]
 800cf6c:	9804      	ldr	r0, [sp, #16]
 800cf6e:	f7ff f9b5 	bl	800c2dc <__lshift>
 800cf72:	9008      	str	r0, [sp, #32]
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d100      	bne.n	800cf7a <_strtod_l+0x7be>
 800cf78:	e683      	b.n	800cc82 <_strtod_l+0x4c6>
 800cf7a:	2d00      	cmp	r5, #0
 800cf7c:	dd08      	ble.n	800cf90 <_strtod_l+0x7d4>
 800cf7e:	002a      	movs	r2, r5
 800cf80:	9906      	ldr	r1, [sp, #24]
 800cf82:	9804      	ldr	r0, [sp, #16]
 800cf84:	f7ff f9aa 	bl	800c2dc <__lshift>
 800cf88:	9006      	str	r0, [sp, #24]
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	d100      	bne.n	800cf90 <_strtod_l+0x7d4>
 800cf8e:	e678      	b.n	800cc82 <_strtod_l+0x4c6>
 800cf90:	9a08      	ldr	r2, [sp, #32]
 800cf92:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cf94:	9804      	ldr	r0, [sp, #16]
 800cf96:	f7ff fa2b 	bl	800c3f0 <__mdiff>
 800cf9a:	9005      	str	r0, [sp, #20]
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	d100      	bne.n	800cfa2 <_strtod_l+0x7e6>
 800cfa0:	e66f      	b.n	800cc82 <_strtod_l+0x4c6>
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	68c3      	ldr	r3, [r0, #12]
 800cfa6:	9906      	ldr	r1, [sp, #24]
 800cfa8:	60c2      	str	r2, [r0, #12]
 800cfaa:	930c      	str	r3, [sp, #48]	; 0x30
 800cfac:	f7ff fa04 	bl	800c3b8 <__mcmp>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	da5d      	bge.n	800d070 <_strtod_l+0x8b4>
 800cfb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfb6:	4333      	orrs	r3, r6
 800cfb8:	d000      	beq.n	800cfbc <_strtod_l+0x800>
 800cfba:	e088      	b.n	800d0ce <_strtod_l+0x912>
 800cfbc:	033b      	lsls	r3, r7, #12
 800cfbe:	d000      	beq.n	800cfc2 <_strtod_l+0x806>
 800cfc0:	e085      	b.n	800d0ce <_strtod_l+0x912>
 800cfc2:	22d6      	movs	r2, #214	; 0xd6
 800cfc4:	4b46      	ldr	r3, [pc, #280]	; (800d0e0 <_strtod_l+0x924>)
 800cfc6:	04d2      	lsls	r2, r2, #19
 800cfc8:	403b      	ands	r3, r7
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d97f      	bls.n	800d0ce <_strtod_l+0x912>
 800cfce:	9b05      	ldr	r3, [sp, #20]
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d103      	bne.n	800cfde <_strtod_l+0x822>
 800cfd6:	9b05      	ldr	r3, [sp, #20]
 800cfd8:	691b      	ldr	r3, [r3, #16]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	dd77      	ble.n	800d0ce <_strtod_l+0x912>
 800cfde:	9905      	ldr	r1, [sp, #20]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	9804      	ldr	r0, [sp, #16]
 800cfe4:	f7ff f97a 	bl	800c2dc <__lshift>
 800cfe8:	9906      	ldr	r1, [sp, #24]
 800cfea:	9005      	str	r0, [sp, #20]
 800cfec:	f7ff f9e4 	bl	800c3b8 <__mcmp>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	dd6c      	ble.n	800d0ce <_strtod_l+0x912>
 800cff4:	9907      	ldr	r1, [sp, #28]
 800cff6:	003b      	movs	r3, r7
 800cff8:	4a39      	ldr	r2, [pc, #228]	; (800d0e0 <_strtod_l+0x924>)
 800cffa:	2900      	cmp	r1, #0
 800cffc:	d100      	bne.n	800d000 <_strtod_l+0x844>
 800cffe:	e094      	b.n	800d12a <_strtod_l+0x96e>
 800d000:	0011      	movs	r1, r2
 800d002:	20d6      	movs	r0, #214	; 0xd6
 800d004:	4039      	ands	r1, r7
 800d006:	04c0      	lsls	r0, r0, #19
 800d008:	4281      	cmp	r1, r0
 800d00a:	dd00      	ble.n	800d00e <_strtod_l+0x852>
 800d00c:	e08d      	b.n	800d12a <_strtod_l+0x96e>
 800d00e:	23dc      	movs	r3, #220	; 0xdc
 800d010:	049b      	lsls	r3, r3, #18
 800d012:	4299      	cmp	r1, r3
 800d014:	dc00      	bgt.n	800d018 <_strtod_l+0x85c>
 800d016:	e6a7      	b.n	800cd68 <_strtod_l+0x5ac>
 800d018:	0030      	movs	r0, r6
 800d01a:	0039      	movs	r1, r7
 800d01c:	4b31      	ldr	r3, [pc, #196]	; (800d0e4 <_strtod_l+0x928>)
 800d01e:	2200      	movs	r2, #0
 800d020:	f7f4 fe28 	bl	8001c74 <__aeabi_dmul>
 800d024:	4b2e      	ldr	r3, [pc, #184]	; (800d0e0 <_strtod_l+0x924>)
 800d026:	0006      	movs	r6, r0
 800d028:	000f      	movs	r7, r1
 800d02a:	420b      	tst	r3, r1
 800d02c:	d000      	beq.n	800d030 <_strtod_l+0x874>
 800d02e:	e631      	b.n	800cc94 <_strtod_l+0x4d8>
 800d030:	2322      	movs	r3, #34	; 0x22
 800d032:	9a04      	ldr	r2, [sp, #16]
 800d034:	6013      	str	r3, [r2, #0]
 800d036:	e62d      	b.n	800cc94 <_strtod_l+0x4d8>
 800d038:	234b      	movs	r3, #75	; 0x4b
 800d03a:	1a9a      	subs	r2, r3, r2
 800d03c:	3b4c      	subs	r3, #76	; 0x4c
 800d03e:	4093      	lsls	r3, r2
 800d040:	4019      	ands	r1, r3
 800d042:	000f      	movs	r7, r1
 800d044:	e6e3      	b.n	800ce0e <_strtod_l+0x652>
 800d046:	2201      	movs	r2, #1
 800d048:	4252      	negs	r2, r2
 800d04a:	409a      	lsls	r2, r3
 800d04c:	4016      	ands	r6, r2
 800d04e:	e6de      	b.n	800ce0e <_strtod_l+0x652>
 800d050:	4925      	ldr	r1, [pc, #148]	; (800d0e8 <_strtod_l+0x92c>)
 800d052:	1acb      	subs	r3, r1, r3
 800d054:	0001      	movs	r1, r0
 800d056:	4099      	lsls	r1, r3
 800d058:	9114      	str	r1, [sp, #80]	; 0x50
 800d05a:	e743      	b.n	800cee4 <_strtod_l+0x728>
 800d05c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d05e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d060:	9804      	ldr	r0, [sp, #16]
 800d062:	f7ff f93b 	bl	800c2dc <__lshift>
 800d066:	901c      	str	r0, [sp, #112]	; 0x70
 800d068:	2800      	cmp	r0, #0
 800d06a:	d000      	beq.n	800d06e <_strtod_l+0x8b2>
 800d06c:	e76e      	b.n	800cf4c <_strtod_l+0x790>
 800d06e:	e608      	b.n	800cc82 <_strtod_l+0x4c6>
 800d070:	970e      	str	r7, [sp, #56]	; 0x38
 800d072:	2800      	cmp	r0, #0
 800d074:	d177      	bne.n	800d166 <_strtod_l+0x9aa>
 800d076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d078:	033b      	lsls	r3, r7, #12
 800d07a:	0b1b      	lsrs	r3, r3, #12
 800d07c:	2a00      	cmp	r2, #0
 800d07e:	d039      	beq.n	800d0f4 <_strtod_l+0x938>
 800d080:	4a1a      	ldr	r2, [pc, #104]	; (800d0ec <_strtod_l+0x930>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d139      	bne.n	800d0fa <_strtod_l+0x93e>
 800d086:	2101      	movs	r1, #1
 800d088:	9b07      	ldr	r3, [sp, #28]
 800d08a:	4249      	negs	r1, r1
 800d08c:	0032      	movs	r2, r6
 800d08e:	0008      	movs	r0, r1
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00b      	beq.n	800d0ac <_strtod_l+0x8f0>
 800d094:	24d4      	movs	r4, #212	; 0xd4
 800d096:	4b12      	ldr	r3, [pc, #72]	; (800d0e0 <_strtod_l+0x924>)
 800d098:	0008      	movs	r0, r1
 800d09a:	403b      	ands	r3, r7
 800d09c:	04e4      	lsls	r4, r4, #19
 800d09e:	42a3      	cmp	r3, r4
 800d0a0:	d804      	bhi.n	800d0ac <_strtod_l+0x8f0>
 800d0a2:	306c      	adds	r0, #108	; 0x6c
 800d0a4:	0d1b      	lsrs	r3, r3, #20
 800d0a6:	1ac3      	subs	r3, r0, r3
 800d0a8:	4099      	lsls	r1, r3
 800d0aa:	0008      	movs	r0, r1
 800d0ac:	4282      	cmp	r2, r0
 800d0ae:	d124      	bne.n	800d0fa <_strtod_l+0x93e>
 800d0b0:	4b0f      	ldr	r3, [pc, #60]	; (800d0f0 <_strtod_l+0x934>)
 800d0b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d0b4:	4299      	cmp	r1, r3
 800d0b6:	d102      	bne.n	800d0be <_strtod_l+0x902>
 800d0b8:	3201      	adds	r2, #1
 800d0ba:	d100      	bne.n	800d0be <_strtod_l+0x902>
 800d0bc:	e5e1      	b.n	800cc82 <_strtod_l+0x4c6>
 800d0be:	4b08      	ldr	r3, [pc, #32]	; (800d0e0 <_strtod_l+0x924>)
 800d0c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0c2:	2600      	movs	r6, #0
 800d0c4:	401a      	ands	r2, r3
 800d0c6:	0013      	movs	r3, r2
 800d0c8:	2280      	movs	r2, #128	; 0x80
 800d0ca:	0352      	lsls	r2, r2, #13
 800d0cc:	189f      	adds	r7, r3, r2
 800d0ce:	9b07      	ldr	r3, [sp, #28]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d1a1      	bne.n	800d018 <_strtod_l+0x85c>
 800d0d4:	e5de      	b.n	800cc94 <_strtod_l+0x4d8>
 800d0d6:	46c0      	nop			; (mov r8, r8)
 800d0d8:	0800efb0 	.word	0x0800efb0
 800d0dc:	fffffc02 	.word	0xfffffc02
 800d0e0:	7ff00000 	.word	0x7ff00000
 800d0e4:	39500000 	.word	0x39500000
 800d0e8:	fffffbe2 	.word	0xfffffbe2
 800d0ec:	000fffff 	.word	0x000fffff
 800d0f0:	7fefffff 	.word	0x7fefffff
 800d0f4:	4333      	orrs	r3, r6
 800d0f6:	d100      	bne.n	800d0fa <_strtod_l+0x93e>
 800d0f8:	e77c      	b.n	800cff4 <_strtod_l+0x838>
 800d0fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d01d      	beq.n	800d13c <_strtod_l+0x980>
 800d100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d102:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d104:	4213      	tst	r3, r2
 800d106:	d0e2      	beq.n	800d0ce <_strtod_l+0x912>
 800d108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d10a:	0030      	movs	r0, r6
 800d10c:	0039      	movs	r1, r7
 800d10e:	9a07      	ldr	r2, [sp, #28]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d017      	beq.n	800d144 <_strtod_l+0x988>
 800d114:	f7ff fb3a 	bl	800c78c <sulp>
 800d118:	0002      	movs	r2, r0
 800d11a:	000b      	movs	r3, r1
 800d11c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d11e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d120:	f7f3 fe4e 	bl	8000dc0 <__aeabi_dadd>
 800d124:	0006      	movs	r6, r0
 800d126:	000f      	movs	r7, r1
 800d128:	e7d1      	b.n	800d0ce <_strtod_l+0x912>
 800d12a:	2601      	movs	r6, #1
 800d12c:	4013      	ands	r3, r2
 800d12e:	4a98      	ldr	r2, [pc, #608]	; (800d390 <_strtod_l+0xbd4>)
 800d130:	4276      	negs	r6, r6
 800d132:	189b      	adds	r3, r3, r2
 800d134:	4a97      	ldr	r2, [pc, #604]	; (800d394 <_strtod_l+0xbd8>)
 800d136:	431a      	orrs	r2, r3
 800d138:	0017      	movs	r7, r2
 800d13a:	e7c8      	b.n	800d0ce <_strtod_l+0x912>
 800d13c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d13e:	4233      	tst	r3, r6
 800d140:	d0c5      	beq.n	800d0ce <_strtod_l+0x912>
 800d142:	e7e1      	b.n	800d108 <_strtod_l+0x94c>
 800d144:	f7ff fb22 	bl	800c78c <sulp>
 800d148:	0002      	movs	r2, r0
 800d14a:	000b      	movs	r3, r1
 800d14c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d14e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d150:	f7f5 f852 	bl	80021f8 <__aeabi_dsub>
 800d154:	2200      	movs	r2, #0
 800d156:	2300      	movs	r3, #0
 800d158:	0006      	movs	r6, r0
 800d15a:	000f      	movs	r7, r1
 800d15c:	f7f3 f976 	bl	800044c <__aeabi_dcmpeq>
 800d160:	2800      	cmp	r0, #0
 800d162:	d0b4      	beq.n	800d0ce <_strtod_l+0x912>
 800d164:	e600      	b.n	800cd68 <_strtod_l+0x5ac>
 800d166:	9906      	ldr	r1, [sp, #24]
 800d168:	9805      	ldr	r0, [sp, #20]
 800d16a:	f7ff faa1 	bl	800c6b0 <__ratio>
 800d16e:	2380      	movs	r3, #128	; 0x80
 800d170:	2200      	movs	r2, #0
 800d172:	05db      	lsls	r3, r3, #23
 800d174:	0004      	movs	r4, r0
 800d176:	000d      	movs	r5, r1
 800d178:	f7f3 f978 	bl	800046c <__aeabi_dcmple>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d06d      	beq.n	800d25c <_strtod_l+0xaa0>
 800d180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d182:	2b00      	cmp	r3, #0
 800d184:	d000      	beq.n	800d188 <_strtod_l+0x9cc>
 800d186:	e07e      	b.n	800d286 <_strtod_l+0xaca>
 800d188:	2e00      	cmp	r6, #0
 800d18a:	d158      	bne.n	800d23e <_strtod_l+0xa82>
 800d18c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d18e:	031b      	lsls	r3, r3, #12
 800d190:	d000      	beq.n	800d194 <_strtod_l+0x9d8>
 800d192:	e07f      	b.n	800d294 <_strtod_l+0xad8>
 800d194:	2200      	movs	r2, #0
 800d196:	0020      	movs	r0, r4
 800d198:	0029      	movs	r1, r5
 800d19a:	4b7f      	ldr	r3, [pc, #508]	; (800d398 <_strtod_l+0xbdc>)
 800d19c:	f7f3 f95c 	bl	8000458 <__aeabi_dcmplt>
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d158      	bne.n	800d256 <_strtod_l+0xa9a>
 800d1a4:	0020      	movs	r0, r4
 800d1a6:	0029      	movs	r1, r5
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	4b7c      	ldr	r3, [pc, #496]	; (800d39c <_strtod_l+0xbe0>)
 800d1ac:	f7f4 fd62 	bl	8001c74 <__aeabi_dmul>
 800d1b0:	0004      	movs	r4, r0
 800d1b2:	000d      	movs	r5, r1
 800d1b4:	2380      	movs	r3, #128	; 0x80
 800d1b6:	061b      	lsls	r3, r3, #24
 800d1b8:	940a      	str	r4, [sp, #40]	; 0x28
 800d1ba:	18eb      	adds	r3, r5, r3
 800d1bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1c2:	9212      	str	r2, [sp, #72]	; 0x48
 800d1c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d1c6:	4a76      	ldr	r2, [pc, #472]	; (800d3a0 <_strtod_l+0xbe4>)
 800d1c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1ca:	4013      	ands	r3, r2
 800d1cc:	9314      	str	r3, [sp, #80]	; 0x50
 800d1ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d1d0:	4b74      	ldr	r3, [pc, #464]	; (800d3a4 <_strtod_l+0xbe8>)
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d000      	beq.n	800d1d8 <_strtod_l+0xa1c>
 800d1d6:	e091      	b.n	800d2fc <_strtod_l+0xb40>
 800d1d8:	4a73      	ldr	r2, [pc, #460]	; (800d3a8 <_strtod_l+0xbec>)
 800d1da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1dc:	4694      	mov	ip, r2
 800d1de:	4463      	add	r3, ip
 800d1e0:	001f      	movs	r7, r3
 800d1e2:	0030      	movs	r0, r6
 800d1e4:	0019      	movs	r1, r3
 800d1e6:	f7ff f99b 	bl	800c520 <__ulp>
 800d1ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1ee:	f7f4 fd41 	bl	8001c74 <__aeabi_dmul>
 800d1f2:	0032      	movs	r2, r6
 800d1f4:	003b      	movs	r3, r7
 800d1f6:	f7f3 fde3 	bl	8000dc0 <__aeabi_dadd>
 800d1fa:	4a69      	ldr	r2, [pc, #420]	; (800d3a0 <_strtod_l+0xbe4>)
 800d1fc:	4b6b      	ldr	r3, [pc, #428]	; (800d3ac <_strtod_l+0xbf0>)
 800d1fe:	0006      	movs	r6, r0
 800d200:	400a      	ands	r2, r1
 800d202:	429a      	cmp	r2, r3
 800d204:	d949      	bls.n	800d29a <_strtod_l+0xade>
 800d206:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d208:	4b69      	ldr	r3, [pc, #420]	; (800d3b0 <_strtod_l+0xbf4>)
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d103      	bne.n	800d216 <_strtod_l+0xa5a>
 800d20e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d210:	3301      	adds	r3, #1
 800d212:	d100      	bne.n	800d216 <_strtod_l+0xa5a>
 800d214:	e535      	b.n	800cc82 <_strtod_l+0x4c6>
 800d216:	2601      	movs	r6, #1
 800d218:	4f65      	ldr	r7, [pc, #404]	; (800d3b0 <_strtod_l+0xbf4>)
 800d21a:	4276      	negs	r6, r6
 800d21c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d21e:	9804      	ldr	r0, [sp, #16]
 800d220:	f7fe fe3c 	bl	800be9c <_Bfree>
 800d224:	9908      	ldr	r1, [sp, #32]
 800d226:	9804      	ldr	r0, [sp, #16]
 800d228:	f7fe fe38 	bl	800be9c <_Bfree>
 800d22c:	9906      	ldr	r1, [sp, #24]
 800d22e:	9804      	ldr	r0, [sp, #16]
 800d230:	f7fe fe34 	bl	800be9c <_Bfree>
 800d234:	9905      	ldr	r1, [sp, #20]
 800d236:	9804      	ldr	r0, [sp, #16]
 800d238:	f7fe fe30 	bl	800be9c <_Bfree>
 800d23c:	e60b      	b.n	800ce56 <_strtod_l+0x69a>
 800d23e:	2e01      	cmp	r6, #1
 800d240:	d103      	bne.n	800d24a <_strtod_l+0xa8e>
 800d242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d244:	2b00      	cmp	r3, #0
 800d246:	d100      	bne.n	800d24a <_strtod_l+0xa8e>
 800d248:	e58e      	b.n	800cd68 <_strtod_l+0x5ac>
 800d24a:	2300      	movs	r3, #0
 800d24c:	4c59      	ldr	r4, [pc, #356]	; (800d3b4 <_strtod_l+0xbf8>)
 800d24e:	930a      	str	r3, [sp, #40]	; 0x28
 800d250:	940b      	str	r4, [sp, #44]	; 0x2c
 800d252:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d254:	e01c      	b.n	800d290 <_strtod_l+0xad4>
 800d256:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d258:	4d50      	ldr	r5, [pc, #320]	; (800d39c <_strtod_l+0xbe0>)
 800d25a:	e7ab      	b.n	800d1b4 <_strtod_l+0x9f8>
 800d25c:	2200      	movs	r2, #0
 800d25e:	0020      	movs	r0, r4
 800d260:	0029      	movs	r1, r5
 800d262:	4b4e      	ldr	r3, [pc, #312]	; (800d39c <_strtod_l+0xbe0>)
 800d264:	f7f4 fd06 	bl	8001c74 <__aeabi_dmul>
 800d268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d26a:	0004      	movs	r4, r0
 800d26c:	000b      	movs	r3, r1
 800d26e:	000d      	movs	r5, r1
 800d270:	2a00      	cmp	r2, #0
 800d272:	d104      	bne.n	800d27e <_strtod_l+0xac2>
 800d274:	2280      	movs	r2, #128	; 0x80
 800d276:	0612      	lsls	r2, r2, #24
 800d278:	900a      	str	r0, [sp, #40]	; 0x28
 800d27a:	188b      	adds	r3, r1, r2
 800d27c:	e79e      	b.n	800d1bc <_strtod_l+0xa00>
 800d27e:	0002      	movs	r2, r0
 800d280:	920a      	str	r2, [sp, #40]	; 0x28
 800d282:	930b      	str	r3, [sp, #44]	; 0x2c
 800d284:	e79b      	b.n	800d1be <_strtod_l+0xa02>
 800d286:	2300      	movs	r3, #0
 800d288:	4c43      	ldr	r4, [pc, #268]	; (800d398 <_strtod_l+0xbdc>)
 800d28a:	930a      	str	r3, [sp, #40]	; 0x28
 800d28c:	940b      	str	r4, [sp, #44]	; 0x2c
 800d28e:	2400      	movs	r4, #0
 800d290:	4d41      	ldr	r5, [pc, #260]	; (800d398 <_strtod_l+0xbdc>)
 800d292:	e794      	b.n	800d1be <_strtod_l+0xa02>
 800d294:	2300      	movs	r3, #0
 800d296:	4c47      	ldr	r4, [pc, #284]	; (800d3b4 <_strtod_l+0xbf8>)
 800d298:	e7f7      	b.n	800d28a <_strtod_l+0xace>
 800d29a:	23d4      	movs	r3, #212	; 0xd4
 800d29c:	049b      	lsls	r3, r3, #18
 800d29e:	18cf      	adds	r7, r1, r3
 800d2a0:	9b07      	ldr	r3, [sp, #28]
 800d2a2:	970e      	str	r7, [sp, #56]	; 0x38
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d1b9      	bne.n	800d21c <_strtod_l+0xa60>
 800d2a8:	4b3d      	ldr	r3, [pc, #244]	; (800d3a0 <_strtod_l+0xbe4>)
 800d2aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d2ac:	403b      	ands	r3, r7
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d1b4      	bne.n	800d21c <_strtod_l+0xa60>
 800d2b2:	0020      	movs	r0, r4
 800d2b4:	0029      	movs	r1, r5
 800d2b6:	f7f3 f963 	bl	8000580 <__aeabi_d2lz>
 800d2ba:	f7f3 f99d 	bl	80005f8 <__aeabi_l2d>
 800d2be:	0002      	movs	r2, r0
 800d2c0:	000b      	movs	r3, r1
 800d2c2:	0020      	movs	r0, r4
 800d2c4:	0029      	movs	r1, r5
 800d2c6:	f7f4 ff97 	bl	80021f8 <__aeabi_dsub>
 800d2ca:	033b      	lsls	r3, r7, #12
 800d2cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2ce:	0b1b      	lsrs	r3, r3, #12
 800d2d0:	4333      	orrs	r3, r6
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	0004      	movs	r4, r0
 800d2d6:	000d      	movs	r5, r1
 800d2d8:	4a37      	ldr	r2, [pc, #220]	; (800d3b8 <_strtod_l+0xbfc>)
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d054      	beq.n	800d388 <_strtod_l+0xbcc>
 800d2de:	4b37      	ldr	r3, [pc, #220]	; (800d3bc <_strtod_l+0xc00>)
 800d2e0:	f7f3 f8ba 	bl	8000458 <__aeabi_dcmplt>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d000      	beq.n	800d2ea <_strtod_l+0xb2e>
 800d2e8:	e4d4      	b.n	800cc94 <_strtod_l+0x4d8>
 800d2ea:	0020      	movs	r0, r4
 800d2ec:	0029      	movs	r1, r5
 800d2ee:	4a34      	ldr	r2, [pc, #208]	; (800d3c0 <_strtod_l+0xc04>)
 800d2f0:	4b2a      	ldr	r3, [pc, #168]	; (800d39c <_strtod_l+0xbe0>)
 800d2f2:	f7f3 f8c5 	bl	8000480 <__aeabi_dcmpgt>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d090      	beq.n	800d21c <_strtod_l+0xa60>
 800d2fa:	e4cb      	b.n	800cc94 <_strtod_l+0x4d8>
 800d2fc:	9b07      	ldr	r3, [sp, #28]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d02b      	beq.n	800d35a <_strtod_l+0xb9e>
 800d302:	23d4      	movs	r3, #212	; 0xd4
 800d304:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d306:	04db      	lsls	r3, r3, #19
 800d308:	429a      	cmp	r2, r3
 800d30a:	d826      	bhi.n	800d35a <_strtod_l+0xb9e>
 800d30c:	0020      	movs	r0, r4
 800d30e:	0029      	movs	r1, r5
 800d310:	4a2c      	ldr	r2, [pc, #176]	; (800d3c4 <_strtod_l+0xc08>)
 800d312:	4b2d      	ldr	r3, [pc, #180]	; (800d3c8 <_strtod_l+0xc0c>)
 800d314:	f7f3 f8aa 	bl	800046c <__aeabi_dcmple>
 800d318:	2800      	cmp	r0, #0
 800d31a:	d017      	beq.n	800d34c <_strtod_l+0xb90>
 800d31c:	0020      	movs	r0, r4
 800d31e:	0029      	movs	r1, r5
 800d320:	f7f3 f910 	bl	8000544 <__aeabi_d2uiz>
 800d324:	2800      	cmp	r0, #0
 800d326:	d100      	bne.n	800d32a <_strtod_l+0xb6e>
 800d328:	3001      	adds	r0, #1
 800d32a:	f7f5 fb6b 	bl	8002a04 <__aeabi_ui2d>
 800d32e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d330:	0004      	movs	r4, r0
 800d332:	000b      	movs	r3, r1
 800d334:	000d      	movs	r5, r1
 800d336:	2a00      	cmp	r2, #0
 800d338:	d122      	bne.n	800d380 <_strtod_l+0xbc4>
 800d33a:	2280      	movs	r2, #128	; 0x80
 800d33c:	0612      	lsls	r2, r2, #24
 800d33e:	188b      	adds	r3, r1, r2
 800d340:	9016      	str	r0, [sp, #88]	; 0x58
 800d342:	9317      	str	r3, [sp, #92]	; 0x5c
 800d344:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d346:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d348:	9212      	str	r2, [sp, #72]	; 0x48
 800d34a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d34c:	22d6      	movs	r2, #214	; 0xd6
 800d34e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d350:	04d2      	lsls	r2, r2, #19
 800d352:	189b      	adds	r3, r3, r2
 800d354:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d356:	1a9b      	subs	r3, r3, r2
 800d358:	9313      	str	r3, [sp, #76]	; 0x4c
 800d35a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d35c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d35e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d360:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d362:	f7ff f8dd 	bl	800c520 <__ulp>
 800d366:	0002      	movs	r2, r0
 800d368:	000b      	movs	r3, r1
 800d36a:	0030      	movs	r0, r6
 800d36c:	0039      	movs	r1, r7
 800d36e:	f7f4 fc81 	bl	8001c74 <__aeabi_dmul>
 800d372:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d374:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d376:	f7f3 fd23 	bl	8000dc0 <__aeabi_dadd>
 800d37a:	0006      	movs	r6, r0
 800d37c:	000f      	movs	r7, r1
 800d37e:	e78f      	b.n	800d2a0 <_strtod_l+0xae4>
 800d380:	0002      	movs	r2, r0
 800d382:	9216      	str	r2, [sp, #88]	; 0x58
 800d384:	9317      	str	r3, [sp, #92]	; 0x5c
 800d386:	e7dd      	b.n	800d344 <_strtod_l+0xb88>
 800d388:	4b10      	ldr	r3, [pc, #64]	; (800d3cc <_strtod_l+0xc10>)
 800d38a:	f7f3 f865 	bl	8000458 <__aeabi_dcmplt>
 800d38e:	e7b2      	b.n	800d2f6 <_strtod_l+0xb3a>
 800d390:	fff00000 	.word	0xfff00000
 800d394:	000fffff 	.word	0x000fffff
 800d398:	3ff00000 	.word	0x3ff00000
 800d39c:	3fe00000 	.word	0x3fe00000
 800d3a0:	7ff00000 	.word	0x7ff00000
 800d3a4:	7fe00000 	.word	0x7fe00000
 800d3a8:	fcb00000 	.word	0xfcb00000
 800d3ac:	7c9fffff 	.word	0x7c9fffff
 800d3b0:	7fefffff 	.word	0x7fefffff
 800d3b4:	bff00000 	.word	0xbff00000
 800d3b8:	94a03595 	.word	0x94a03595
 800d3bc:	3fdfffff 	.word	0x3fdfffff
 800d3c0:	35afe535 	.word	0x35afe535
 800d3c4:	ffc00000 	.word	0xffc00000
 800d3c8:	41dfffff 	.word	0x41dfffff
 800d3cc:	3fcfffff 	.word	0x3fcfffff

0800d3d0 <_strtod_r>:
 800d3d0:	b510      	push	{r4, lr}
 800d3d2:	4b02      	ldr	r3, [pc, #8]	; (800d3dc <_strtod_r+0xc>)
 800d3d4:	f7ff f9f2 	bl	800c7bc <_strtod_l>
 800d3d8:	bd10      	pop	{r4, pc}
 800d3da:	46c0      	nop			; (mov r8, r8)
 800d3dc:	20000080 	.word	0x20000080

0800d3e0 <_strtol_l.constprop.0>:
 800d3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3e2:	b087      	sub	sp, #28
 800d3e4:	001e      	movs	r6, r3
 800d3e6:	9005      	str	r0, [sp, #20]
 800d3e8:	9101      	str	r1, [sp, #4]
 800d3ea:	9202      	str	r2, [sp, #8]
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d048      	beq.n	800d482 <_strtol_l.constprop.0+0xa2>
 800d3f0:	000b      	movs	r3, r1
 800d3f2:	2e24      	cmp	r6, #36	; 0x24
 800d3f4:	d845      	bhi.n	800d482 <_strtol_l.constprop.0+0xa2>
 800d3f6:	4a3b      	ldr	r2, [pc, #236]	; (800d4e4 <_strtol_l.constprop.0+0x104>)
 800d3f8:	2108      	movs	r1, #8
 800d3fa:	4694      	mov	ip, r2
 800d3fc:	001a      	movs	r2, r3
 800d3fe:	4660      	mov	r0, ip
 800d400:	7814      	ldrb	r4, [r2, #0]
 800d402:	3301      	adds	r3, #1
 800d404:	5d00      	ldrb	r0, [r0, r4]
 800d406:	001d      	movs	r5, r3
 800d408:	0007      	movs	r7, r0
 800d40a:	400f      	ands	r7, r1
 800d40c:	4208      	tst	r0, r1
 800d40e:	d1f5      	bne.n	800d3fc <_strtol_l.constprop.0+0x1c>
 800d410:	2c2d      	cmp	r4, #45	; 0x2d
 800d412:	d13d      	bne.n	800d490 <_strtol_l.constprop.0+0xb0>
 800d414:	2701      	movs	r7, #1
 800d416:	781c      	ldrb	r4, [r3, #0]
 800d418:	1c95      	adds	r5, r2, #2
 800d41a:	2e00      	cmp	r6, #0
 800d41c:	d05e      	beq.n	800d4dc <_strtol_l.constprop.0+0xfc>
 800d41e:	2e10      	cmp	r6, #16
 800d420:	d109      	bne.n	800d436 <_strtol_l.constprop.0+0x56>
 800d422:	2c30      	cmp	r4, #48	; 0x30
 800d424:	d107      	bne.n	800d436 <_strtol_l.constprop.0+0x56>
 800d426:	2220      	movs	r2, #32
 800d428:	782b      	ldrb	r3, [r5, #0]
 800d42a:	4393      	bics	r3, r2
 800d42c:	2b58      	cmp	r3, #88	; 0x58
 800d42e:	d150      	bne.n	800d4d2 <_strtol_l.constprop.0+0xf2>
 800d430:	2610      	movs	r6, #16
 800d432:	786c      	ldrb	r4, [r5, #1]
 800d434:	3502      	adds	r5, #2
 800d436:	4b2c      	ldr	r3, [pc, #176]	; (800d4e8 <_strtol_l.constprop.0+0x108>)
 800d438:	0031      	movs	r1, r6
 800d43a:	18fb      	adds	r3, r7, r3
 800d43c:	0018      	movs	r0, r3
 800d43e:	9303      	str	r3, [sp, #12]
 800d440:	f7f2 ff04 	bl	800024c <__aeabi_uidivmod>
 800d444:	2200      	movs	r2, #0
 800d446:	9104      	str	r1, [sp, #16]
 800d448:	2101      	movs	r1, #1
 800d44a:	4684      	mov	ip, r0
 800d44c:	0010      	movs	r0, r2
 800d44e:	4249      	negs	r1, r1
 800d450:	0023      	movs	r3, r4
 800d452:	3b30      	subs	r3, #48	; 0x30
 800d454:	2b09      	cmp	r3, #9
 800d456:	d903      	bls.n	800d460 <_strtol_l.constprop.0+0x80>
 800d458:	3b11      	subs	r3, #17
 800d45a:	2b19      	cmp	r3, #25
 800d45c:	d81d      	bhi.n	800d49a <_strtol_l.constprop.0+0xba>
 800d45e:	330a      	adds	r3, #10
 800d460:	429e      	cmp	r6, r3
 800d462:	dd1e      	ble.n	800d4a2 <_strtol_l.constprop.0+0xc2>
 800d464:	1c54      	adds	r4, r2, #1
 800d466:	d009      	beq.n	800d47c <_strtol_l.constprop.0+0x9c>
 800d468:	000a      	movs	r2, r1
 800d46a:	4584      	cmp	ip, r0
 800d46c:	d306      	bcc.n	800d47c <_strtol_l.constprop.0+0x9c>
 800d46e:	d102      	bne.n	800d476 <_strtol_l.constprop.0+0x96>
 800d470:	9c04      	ldr	r4, [sp, #16]
 800d472:	429c      	cmp	r4, r3
 800d474:	db02      	blt.n	800d47c <_strtol_l.constprop.0+0x9c>
 800d476:	2201      	movs	r2, #1
 800d478:	4370      	muls	r0, r6
 800d47a:	1818      	adds	r0, r3, r0
 800d47c:	782c      	ldrb	r4, [r5, #0]
 800d47e:	3501      	adds	r5, #1
 800d480:	e7e6      	b.n	800d450 <_strtol_l.constprop.0+0x70>
 800d482:	f7fd fce5 	bl	800ae50 <__errno>
 800d486:	2316      	movs	r3, #22
 800d488:	6003      	str	r3, [r0, #0]
 800d48a:	2000      	movs	r0, #0
 800d48c:	b007      	add	sp, #28
 800d48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d490:	2c2b      	cmp	r4, #43	; 0x2b
 800d492:	d1c2      	bne.n	800d41a <_strtol_l.constprop.0+0x3a>
 800d494:	781c      	ldrb	r4, [r3, #0]
 800d496:	1c95      	adds	r5, r2, #2
 800d498:	e7bf      	b.n	800d41a <_strtol_l.constprop.0+0x3a>
 800d49a:	0023      	movs	r3, r4
 800d49c:	3b61      	subs	r3, #97	; 0x61
 800d49e:	2b19      	cmp	r3, #25
 800d4a0:	d9dd      	bls.n	800d45e <_strtol_l.constprop.0+0x7e>
 800d4a2:	1c53      	adds	r3, r2, #1
 800d4a4:	d109      	bne.n	800d4ba <_strtol_l.constprop.0+0xda>
 800d4a6:	2322      	movs	r3, #34	; 0x22
 800d4a8:	9a05      	ldr	r2, [sp, #20]
 800d4aa:	9803      	ldr	r0, [sp, #12]
 800d4ac:	6013      	str	r3, [r2, #0]
 800d4ae:	9b02      	ldr	r3, [sp, #8]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d0eb      	beq.n	800d48c <_strtol_l.constprop.0+0xac>
 800d4b4:	1e6b      	subs	r3, r5, #1
 800d4b6:	9301      	str	r3, [sp, #4]
 800d4b8:	e007      	b.n	800d4ca <_strtol_l.constprop.0+0xea>
 800d4ba:	2f00      	cmp	r7, #0
 800d4bc:	d000      	beq.n	800d4c0 <_strtol_l.constprop.0+0xe0>
 800d4be:	4240      	negs	r0, r0
 800d4c0:	9b02      	ldr	r3, [sp, #8]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d0e2      	beq.n	800d48c <_strtol_l.constprop.0+0xac>
 800d4c6:	2a00      	cmp	r2, #0
 800d4c8:	d1f4      	bne.n	800d4b4 <_strtol_l.constprop.0+0xd4>
 800d4ca:	9b02      	ldr	r3, [sp, #8]
 800d4cc:	9a01      	ldr	r2, [sp, #4]
 800d4ce:	601a      	str	r2, [r3, #0]
 800d4d0:	e7dc      	b.n	800d48c <_strtol_l.constprop.0+0xac>
 800d4d2:	2430      	movs	r4, #48	; 0x30
 800d4d4:	2e00      	cmp	r6, #0
 800d4d6:	d1ae      	bne.n	800d436 <_strtol_l.constprop.0+0x56>
 800d4d8:	3608      	adds	r6, #8
 800d4da:	e7ac      	b.n	800d436 <_strtol_l.constprop.0+0x56>
 800d4dc:	2c30      	cmp	r4, #48	; 0x30
 800d4de:	d0a2      	beq.n	800d426 <_strtol_l.constprop.0+0x46>
 800d4e0:	260a      	movs	r6, #10
 800d4e2:	e7a8      	b.n	800d436 <_strtol_l.constprop.0+0x56>
 800d4e4:	0800efd9 	.word	0x0800efd9
 800d4e8:	7fffffff 	.word	0x7fffffff

0800d4ec <_strtol_r>:
 800d4ec:	b510      	push	{r4, lr}
 800d4ee:	f7ff ff77 	bl	800d3e0 <_strtol_l.constprop.0>
 800d4f2:	bd10      	pop	{r4, pc}

0800d4f4 <__ssputs_r>:
 800d4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	9301      	str	r3, [sp, #4]
 800d4fa:	9203      	str	r2, [sp, #12]
 800d4fc:	688e      	ldr	r6, [r1, #8]
 800d4fe:	9a01      	ldr	r2, [sp, #4]
 800d500:	0007      	movs	r7, r0
 800d502:	000c      	movs	r4, r1
 800d504:	680b      	ldr	r3, [r1, #0]
 800d506:	4296      	cmp	r6, r2
 800d508:	d831      	bhi.n	800d56e <__ssputs_r+0x7a>
 800d50a:	898a      	ldrh	r2, [r1, #12]
 800d50c:	2190      	movs	r1, #144	; 0x90
 800d50e:	00c9      	lsls	r1, r1, #3
 800d510:	420a      	tst	r2, r1
 800d512:	d029      	beq.n	800d568 <__ssputs_r+0x74>
 800d514:	2003      	movs	r0, #3
 800d516:	6921      	ldr	r1, [r4, #16]
 800d518:	1a5b      	subs	r3, r3, r1
 800d51a:	9302      	str	r3, [sp, #8]
 800d51c:	6963      	ldr	r3, [r4, #20]
 800d51e:	4343      	muls	r3, r0
 800d520:	0fdd      	lsrs	r5, r3, #31
 800d522:	18ed      	adds	r5, r5, r3
 800d524:	9b01      	ldr	r3, [sp, #4]
 800d526:	9802      	ldr	r0, [sp, #8]
 800d528:	3301      	adds	r3, #1
 800d52a:	181b      	adds	r3, r3, r0
 800d52c:	106d      	asrs	r5, r5, #1
 800d52e:	42ab      	cmp	r3, r5
 800d530:	d900      	bls.n	800d534 <__ssputs_r+0x40>
 800d532:	001d      	movs	r5, r3
 800d534:	0552      	lsls	r2, r2, #21
 800d536:	d529      	bpl.n	800d58c <__ssputs_r+0x98>
 800d538:	0029      	movs	r1, r5
 800d53a:	0038      	movs	r0, r7
 800d53c:	f7fe fbd8 	bl	800bcf0 <_malloc_r>
 800d540:	1e06      	subs	r6, r0, #0
 800d542:	d02d      	beq.n	800d5a0 <__ssputs_r+0xac>
 800d544:	9a02      	ldr	r2, [sp, #8]
 800d546:	6921      	ldr	r1, [r4, #16]
 800d548:	f000 fa22 	bl	800d990 <memcpy>
 800d54c:	89a2      	ldrh	r2, [r4, #12]
 800d54e:	4b19      	ldr	r3, [pc, #100]	; (800d5b4 <__ssputs_r+0xc0>)
 800d550:	401a      	ands	r2, r3
 800d552:	2380      	movs	r3, #128	; 0x80
 800d554:	4313      	orrs	r3, r2
 800d556:	81a3      	strh	r3, [r4, #12]
 800d558:	9b02      	ldr	r3, [sp, #8]
 800d55a:	6126      	str	r6, [r4, #16]
 800d55c:	18f6      	adds	r6, r6, r3
 800d55e:	6026      	str	r6, [r4, #0]
 800d560:	6165      	str	r5, [r4, #20]
 800d562:	9e01      	ldr	r6, [sp, #4]
 800d564:	1aed      	subs	r5, r5, r3
 800d566:	60a5      	str	r5, [r4, #8]
 800d568:	9b01      	ldr	r3, [sp, #4]
 800d56a:	429e      	cmp	r6, r3
 800d56c:	d900      	bls.n	800d570 <__ssputs_r+0x7c>
 800d56e:	9e01      	ldr	r6, [sp, #4]
 800d570:	0032      	movs	r2, r6
 800d572:	9903      	ldr	r1, [sp, #12]
 800d574:	6820      	ldr	r0, [r4, #0]
 800d576:	f000 f9d4 	bl	800d922 <memmove>
 800d57a:	2000      	movs	r0, #0
 800d57c:	68a3      	ldr	r3, [r4, #8]
 800d57e:	1b9b      	subs	r3, r3, r6
 800d580:	60a3      	str	r3, [r4, #8]
 800d582:	6823      	ldr	r3, [r4, #0]
 800d584:	199b      	adds	r3, r3, r6
 800d586:	6023      	str	r3, [r4, #0]
 800d588:	b005      	add	sp, #20
 800d58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d58c:	002a      	movs	r2, r5
 800d58e:	0038      	movs	r0, r7
 800d590:	f000 fdc8 	bl	800e124 <_realloc_r>
 800d594:	1e06      	subs	r6, r0, #0
 800d596:	d1df      	bne.n	800d558 <__ssputs_r+0x64>
 800d598:	0038      	movs	r0, r7
 800d59a:	6921      	ldr	r1, [r4, #16]
 800d59c:	f7fe fb32 	bl	800bc04 <_free_r>
 800d5a0:	230c      	movs	r3, #12
 800d5a2:	2001      	movs	r0, #1
 800d5a4:	603b      	str	r3, [r7, #0]
 800d5a6:	89a2      	ldrh	r2, [r4, #12]
 800d5a8:	3334      	adds	r3, #52	; 0x34
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	81a3      	strh	r3, [r4, #12]
 800d5ae:	4240      	negs	r0, r0
 800d5b0:	e7ea      	b.n	800d588 <__ssputs_r+0x94>
 800d5b2:	46c0      	nop			; (mov r8, r8)
 800d5b4:	fffffb7f 	.word	0xfffffb7f

0800d5b8 <_svfiprintf_r>:
 800d5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ba:	b0a1      	sub	sp, #132	; 0x84
 800d5bc:	9003      	str	r0, [sp, #12]
 800d5be:	001d      	movs	r5, r3
 800d5c0:	898b      	ldrh	r3, [r1, #12]
 800d5c2:	000f      	movs	r7, r1
 800d5c4:	0016      	movs	r6, r2
 800d5c6:	061b      	lsls	r3, r3, #24
 800d5c8:	d511      	bpl.n	800d5ee <_svfiprintf_r+0x36>
 800d5ca:	690b      	ldr	r3, [r1, #16]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10e      	bne.n	800d5ee <_svfiprintf_r+0x36>
 800d5d0:	2140      	movs	r1, #64	; 0x40
 800d5d2:	f7fe fb8d 	bl	800bcf0 <_malloc_r>
 800d5d6:	6038      	str	r0, [r7, #0]
 800d5d8:	6138      	str	r0, [r7, #16]
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d105      	bne.n	800d5ea <_svfiprintf_r+0x32>
 800d5de:	230c      	movs	r3, #12
 800d5e0:	9a03      	ldr	r2, [sp, #12]
 800d5e2:	3801      	subs	r0, #1
 800d5e4:	6013      	str	r3, [r2, #0]
 800d5e6:	b021      	add	sp, #132	; 0x84
 800d5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5ea:	2340      	movs	r3, #64	; 0x40
 800d5ec:	617b      	str	r3, [r7, #20]
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	ac08      	add	r4, sp, #32
 800d5f2:	6163      	str	r3, [r4, #20]
 800d5f4:	3320      	adds	r3, #32
 800d5f6:	7663      	strb	r3, [r4, #25]
 800d5f8:	3310      	adds	r3, #16
 800d5fa:	76a3      	strb	r3, [r4, #26]
 800d5fc:	9507      	str	r5, [sp, #28]
 800d5fe:	0035      	movs	r5, r6
 800d600:	782b      	ldrb	r3, [r5, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d001      	beq.n	800d60a <_svfiprintf_r+0x52>
 800d606:	2b25      	cmp	r3, #37	; 0x25
 800d608:	d148      	bne.n	800d69c <_svfiprintf_r+0xe4>
 800d60a:	1bab      	subs	r3, r5, r6
 800d60c:	9305      	str	r3, [sp, #20]
 800d60e:	42b5      	cmp	r5, r6
 800d610:	d00b      	beq.n	800d62a <_svfiprintf_r+0x72>
 800d612:	0032      	movs	r2, r6
 800d614:	0039      	movs	r1, r7
 800d616:	9803      	ldr	r0, [sp, #12]
 800d618:	f7ff ff6c 	bl	800d4f4 <__ssputs_r>
 800d61c:	3001      	adds	r0, #1
 800d61e:	d100      	bne.n	800d622 <_svfiprintf_r+0x6a>
 800d620:	e0af      	b.n	800d782 <_svfiprintf_r+0x1ca>
 800d622:	6963      	ldr	r3, [r4, #20]
 800d624:	9a05      	ldr	r2, [sp, #20]
 800d626:	189b      	adds	r3, r3, r2
 800d628:	6163      	str	r3, [r4, #20]
 800d62a:	782b      	ldrb	r3, [r5, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d100      	bne.n	800d632 <_svfiprintf_r+0x7a>
 800d630:	e0a7      	b.n	800d782 <_svfiprintf_r+0x1ca>
 800d632:	2201      	movs	r2, #1
 800d634:	2300      	movs	r3, #0
 800d636:	4252      	negs	r2, r2
 800d638:	6062      	str	r2, [r4, #4]
 800d63a:	a904      	add	r1, sp, #16
 800d63c:	3254      	adds	r2, #84	; 0x54
 800d63e:	1852      	adds	r2, r2, r1
 800d640:	1c6e      	adds	r6, r5, #1
 800d642:	6023      	str	r3, [r4, #0]
 800d644:	60e3      	str	r3, [r4, #12]
 800d646:	60a3      	str	r3, [r4, #8]
 800d648:	7013      	strb	r3, [r2, #0]
 800d64a:	65a3      	str	r3, [r4, #88]	; 0x58
 800d64c:	4b55      	ldr	r3, [pc, #340]	; (800d7a4 <_svfiprintf_r+0x1ec>)
 800d64e:	2205      	movs	r2, #5
 800d650:	0018      	movs	r0, r3
 800d652:	7831      	ldrb	r1, [r6, #0]
 800d654:	9305      	str	r3, [sp, #20]
 800d656:	f7fd fc28 	bl	800aeaa <memchr>
 800d65a:	1c75      	adds	r5, r6, #1
 800d65c:	2800      	cmp	r0, #0
 800d65e:	d11f      	bne.n	800d6a0 <_svfiprintf_r+0xe8>
 800d660:	6822      	ldr	r2, [r4, #0]
 800d662:	06d3      	lsls	r3, r2, #27
 800d664:	d504      	bpl.n	800d670 <_svfiprintf_r+0xb8>
 800d666:	2353      	movs	r3, #83	; 0x53
 800d668:	a904      	add	r1, sp, #16
 800d66a:	185b      	adds	r3, r3, r1
 800d66c:	2120      	movs	r1, #32
 800d66e:	7019      	strb	r1, [r3, #0]
 800d670:	0713      	lsls	r3, r2, #28
 800d672:	d504      	bpl.n	800d67e <_svfiprintf_r+0xc6>
 800d674:	2353      	movs	r3, #83	; 0x53
 800d676:	a904      	add	r1, sp, #16
 800d678:	185b      	adds	r3, r3, r1
 800d67a:	212b      	movs	r1, #43	; 0x2b
 800d67c:	7019      	strb	r1, [r3, #0]
 800d67e:	7833      	ldrb	r3, [r6, #0]
 800d680:	2b2a      	cmp	r3, #42	; 0x2a
 800d682:	d016      	beq.n	800d6b2 <_svfiprintf_r+0xfa>
 800d684:	0035      	movs	r5, r6
 800d686:	2100      	movs	r1, #0
 800d688:	200a      	movs	r0, #10
 800d68a:	68e3      	ldr	r3, [r4, #12]
 800d68c:	782a      	ldrb	r2, [r5, #0]
 800d68e:	1c6e      	adds	r6, r5, #1
 800d690:	3a30      	subs	r2, #48	; 0x30
 800d692:	2a09      	cmp	r2, #9
 800d694:	d94e      	bls.n	800d734 <_svfiprintf_r+0x17c>
 800d696:	2900      	cmp	r1, #0
 800d698:	d111      	bne.n	800d6be <_svfiprintf_r+0x106>
 800d69a:	e017      	b.n	800d6cc <_svfiprintf_r+0x114>
 800d69c:	3501      	adds	r5, #1
 800d69e:	e7af      	b.n	800d600 <_svfiprintf_r+0x48>
 800d6a0:	9b05      	ldr	r3, [sp, #20]
 800d6a2:	6822      	ldr	r2, [r4, #0]
 800d6a4:	1ac0      	subs	r0, r0, r3
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	4083      	lsls	r3, r0
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	002e      	movs	r6, r5
 800d6ae:	6023      	str	r3, [r4, #0]
 800d6b0:	e7cc      	b.n	800d64c <_svfiprintf_r+0x94>
 800d6b2:	9b07      	ldr	r3, [sp, #28]
 800d6b4:	1d19      	adds	r1, r3, #4
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	9107      	str	r1, [sp, #28]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	db01      	blt.n	800d6c2 <_svfiprintf_r+0x10a>
 800d6be:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6c0:	e004      	b.n	800d6cc <_svfiprintf_r+0x114>
 800d6c2:	425b      	negs	r3, r3
 800d6c4:	60e3      	str	r3, [r4, #12]
 800d6c6:	2302      	movs	r3, #2
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	6023      	str	r3, [r4, #0]
 800d6cc:	782b      	ldrb	r3, [r5, #0]
 800d6ce:	2b2e      	cmp	r3, #46	; 0x2e
 800d6d0:	d10a      	bne.n	800d6e8 <_svfiprintf_r+0x130>
 800d6d2:	786b      	ldrb	r3, [r5, #1]
 800d6d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d6d6:	d135      	bne.n	800d744 <_svfiprintf_r+0x18c>
 800d6d8:	9b07      	ldr	r3, [sp, #28]
 800d6da:	3502      	adds	r5, #2
 800d6dc:	1d1a      	adds	r2, r3, #4
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	9207      	str	r2, [sp, #28]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	db2b      	blt.n	800d73e <_svfiprintf_r+0x186>
 800d6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6e8:	4e2f      	ldr	r6, [pc, #188]	; (800d7a8 <_svfiprintf_r+0x1f0>)
 800d6ea:	2203      	movs	r2, #3
 800d6ec:	0030      	movs	r0, r6
 800d6ee:	7829      	ldrb	r1, [r5, #0]
 800d6f0:	f7fd fbdb 	bl	800aeaa <memchr>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d006      	beq.n	800d706 <_svfiprintf_r+0x14e>
 800d6f8:	2340      	movs	r3, #64	; 0x40
 800d6fa:	1b80      	subs	r0, r0, r6
 800d6fc:	4083      	lsls	r3, r0
 800d6fe:	6822      	ldr	r2, [r4, #0]
 800d700:	3501      	adds	r5, #1
 800d702:	4313      	orrs	r3, r2
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	7829      	ldrb	r1, [r5, #0]
 800d708:	2206      	movs	r2, #6
 800d70a:	4828      	ldr	r0, [pc, #160]	; (800d7ac <_svfiprintf_r+0x1f4>)
 800d70c:	1c6e      	adds	r6, r5, #1
 800d70e:	7621      	strb	r1, [r4, #24]
 800d710:	f7fd fbcb 	bl	800aeaa <memchr>
 800d714:	2800      	cmp	r0, #0
 800d716:	d03c      	beq.n	800d792 <_svfiprintf_r+0x1da>
 800d718:	4b25      	ldr	r3, [pc, #148]	; (800d7b0 <_svfiprintf_r+0x1f8>)
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d125      	bne.n	800d76a <_svfiprintf_r+0x1b2>
 800d71e:	2207      	movs	r2, #7
 800d720:	9b07      	ldr	r3, [sp, #28]
 800d722:	3307      	adds	r3, #7
 800d724:	4393      	bics	r3, r2
 800d726:	3308      	adds	r3, #8
 800d728:	9307      	str	r3, [sp, #28]
 800d72a:	6963      	ldr	r3, [r4, #20]
 800d72c:	9a04      	ldr	r2, [sp, #16]
 800d72e:	189b      	adds	r3, r3, r2
 800d730:	6163      	str	r3, [r4, #20]
 800d732:	e764      	b.n	800d5fe <_svfiprintf_r+0x46>
 800d734:	4343      	muls	r3, r0
 800d736:	0035      	movs	r5, r6
 800d738:	2101      	movs	r1, #1
 800d73a:	189b      	adds	r3, r3, r2
 800d73c:	e7a6      	b.n	800d68c <_svfiprintf_r+0xd4>
 800d73e:	2301      	movs	r3, #1
 800d740:	425b      	negs	r3, r3
 800d742:	e7d0      	b.n	800d6e6 <_svfiprintf_r+0x12e>
 800d744:	2300      	movs	r3, #0
 800d746:	200a      	movs	r0, #10
 800d748:	001a      	movs	r2, r3
 800d74a:	3501      	adds	r5, #1
 800d74c:	6063      	str	r3, [r4, #4]
 800d74e:	7829      	ldrb	r1, [r5, #0]
 800d750:	1c6e      	adds	r6, r5, #1
 800d752:	3930      	subs	r1, #48	; 0x30
 800d754:	2909      	cmp	r1, #9
 800d756:	d903      	bls.n	800d760 <_svfiprintf_r+0x1a8>
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d0c5      	beq.n	800d6e8 <_svfiprintf_r+0x130>
 800d75c:	9209      	str	r2, [sp, #36]	; 0x24
 800d75e:	e7c3      	b.n	800d6e8 <_svfiprintf_r+0x130>
 800d760:	4342      	muls	r2, r0
 800d762:	0035      	movs	r5, r6
 800d764:	2301      	movs	r3, #1
 800d766:	1852      	adds	r2, r2, r1
 800d768:	e7f1      	b.n	800d74e <_svfiprintf_r+0x196>
 800d76a:	aa07      	add	r2, sp, #28
 800d76c:	9200      	str	r2, [sp, #0]
 800d76e:	0021      	movs	r1, r4
 800d770:	003a      	movs	r2, r7
 800d772:	4b10      	ldr	r3, [pc, #64]	; (800d7b4 <_svfiprintf_r+0x1fc>)
 800d774:	9803      	ldr	r0, [sp, #12]
 800d776:	f7fc fbcf 	bl	8009f18 <_printf_float>
 800d77a:	9004      	str	r0, [sp, #16]
 800d77c:	9b04      	ldr	r3, [sp, #16]
 800d77e:	3301      	adds	r3, #1
 800d780:	d1d3      	bne.n	800d72a <_svfiprintf_r+0x172>
 800d782:	89bb      	ldrh	r3, [r7, #12]
 800d784:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d786:	065b      	lsls	r3, r3, #25
 800d788:	d400      	bmi.n	800d78c <_svfiprintf_r+0x1d4>
 800d78a:	e72c      	b.n	800d5e6 <_svfiprintf_r+0x2e>
 800d78c:	2001      	movs	r0, #1
 800d78e:	4240      	negs	r0, r0
 800d790:	e729      	b.n	800d5e6 <_svfiprintf_r+0x2e>
 800d792:	aa07      	add	r2, sp, #28
 800d794:	9200      	str	r2, [sp, #0]
 800d796:	0021      	movs	r1, r4
 800d798:	003a      	movs	r2, r7
 800d79a:	4b06      	ldr	r3, [pc, #24]	; (800d7b4 <_svfiprintf_r+0x1fc>)
 800d79c:	9803      	ldr	r0, [sp, #12]
 800d79e:	f7fc fe81 	bl	800a4a4 <_printf_i>
 800d7a2:	e7ea      	b.n	800d77a <_svfiprintf_r+0x1c2>
 800d7a4:	0800f0d9 	.word	0x0800f0d9
 800d7a8:	0800f0df 	.word	0x0800f0df
 800d7ac:	0800f0e3 	.word	0x0800f0e3
 800d7b0:	08009f19 	.word	0x08009f19
 800d7b4:	0800d4f5 	.word	0x0800d4f5

0800d7b8 <__sflush_r>:
 800d7b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7ba:	898b      	ldrh	r3, [r1, #12]
 800d7bc:	0005      	movs	r5, r0
 800d7be:	000c      	movs	r4, r1
 800d7c0:	071a      	lsls	r2, r3, #28
 800d7c2:	d45c      	bmi.n	800d87e <__sflush_r+0xc6>
 800d7c4:	684a      	ldr	r2, [r1, #4]
 800d7c6:	2a00      	cmp	r2, #0
 800d7c8:	dc04      	bgt.n	800d7d4 <__sflush_r+0x1c>
 800d7ca:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d7cc:	2a00      	cmp	r2, #0
 800d7ce:	dc01      	bgt.n	800d7d4 <__sflush_r+0x1c>
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d7d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d7d6:	2f00      	cmp	r7, #0
 800d7d8:	d0fa      	beq.n	800d7d0 <__sflush_r+0x18>
 800d7da:	2200      	movs	r2, #0
 800d7dc:	2080      	movs	r0, #128	; 0x80
 800d7de:	682e      	ldr	r6, [r5, #0]
 800d7e0:	602a      	str	r2, [r5, #0]
 800d7e2:	001a      	movs	r2, r3
 800d7e4:	0140      	lsls	r0, r0, #5
 800d7e6:	6a21      	ldr	r1, [r4, #32]
 800d7e8:	4002      	ands	r2, r0
 800d7ea:	4203      	tst	r3, r0
 800d7ec:	d034      	beq.n	800d858 <__sflush_r+0xa0>
 800d7ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7f0:	89a3      	ldrh	r3, [r4, #12]
 800d7f2:	075b      	lsls	r3, r3, #29
 800d7f4:	d506      	bpl.n	800d804 <__sflush_r+0x4c>
 800d7f6:	6863      	ldr	r3, [r4, #4]
 800d7f8:	1ac0      	subs	r0, r0, r3
 800d7fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d001      	beq.n	800d804 <__sflush_r+0x4c>
 800d800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d802:	1ac0      	subs	r0, r0, r3
 800d804:	0002      	movs	r2, r0
 800d806:	2300      	movs	r3, #0
 800d808:	0028      	movs	r0, r5
 800d80a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d80c:	6a21      	ldr	r1, [r4, #32]
 800d80e:	47b8      	blx	r7
 800d810:	89a2      	ldrh	r2, [r4, #12]
 800d812:	1c43      	adds	r3, r0, #1
 800d814:	d106      	bne.n	800d824 <__sflush_r+0x6c>
 800d816:	6829      	ldr	r1, [r5, #0]
 800d818:	291d      	cmp	r1, #29
 800d81a:	d82c      	bhi.n	800d876 <__sflush_r+0xbe>
 800d81c:	4b2a      	ldr	r3, [pc, #168]	; (800d8c8 <__sflush_r+0x110>)
 800d81e:	410b      	asrs	r3, r1
 800d820:	07db      	lsls	r3, r3, #31
 800d822:	d428      	bmi.n	800d876 <__sflush_r+0xbe>
 800d824:	2300      	movs	r3, #0
 800d826:	6063      	str	r3, [r4, #4]
 800d828:	6923      	ldr	r3, [r4, #16]
 800d82a:	6023      	str	r3, [r4, #0]
 800d82c:	04d2      	lsls	r2, r2, #19
 800d82e:	d505      	bpl.n	800d83c <__sflush_r+0x84>
 800d830:	1c43      	adds	r3, r0, #1
 800d832:	d102      	bne.n	800d83a <__sflush_r+0x82>
 800d834:	682b      	ldr	r3, [r5, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d100      	bne.n	800d83c <__sflush_r+0x84>
 800d83a:	6560      	str	r0, [r4, #84]	; 0x54
 800d83c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d83e:	602e      	str	r6, [r5, #0]
 800d840:	2900      	cmp	r1, #0
 800d842:	d0c5      	beq.n	800d7d0 <__sflush_r+0x18>
 800d844:	0023      	movs	r3, r4
 800d846:	3344      	adds	r3, #68	; 0x44
 800d848:	4299      	cmp	r1, r3
 800d84a:	d002      	beq.n	800d852 <__sflush_r+0x9a>
 800d84c:	0028      	movs	r0, r5
 800d84e:	f7fe f9d9 	bl	800bc04 <_free_r>
 800d852:	2000      	movs	r0, #0
 800d854:	6360      	str	r0, [r4, #52]	; 0x34
 800d856:	e7bc      	b.n	800d7d2 <__sflush_r+0x1a>
 800d858:	2301      	movs	r3, #1
 800d85a:	0028      	movs	r0, r5
 800d85c:	47b8      	blx	r7
 800d85e:	1c43      	adds	r3, r0, #1
 800d860:	d1c6      	bne.n	800d7f0 <__sflush_r+0x38>
 800d862:	682b      	ldr	r3, [r5, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d0c3      	beq.n	800d7f0 <__sflush_r+0x38>
 800d868:	2b1d      	cmp	r3, #29
 800d86a:	d001      	beq.n	800d870 <__sflush_r+0xb8>
 800d86c:	2b16      	cmp	r3, #22
 800d86e:	d101      	bne.n	800d874 <__sflush_r+0xbc>
 800d870:	602e      	str	r6, [r5, #0]
 800d872:	e7ad      	b.n	800d7d0 <__sflush_r+0x18>
 800d874:	89a2      	ldrh	r2, [r4, #12]
 800d876:	2340      	movs	r3, #64	; 0x40
 800d878:	4313      	orrs	r3, r2
 800d87a:	81a3      	strh	r3, [r4, #12]
 800d87c:	e7a9      	b.n	800d7d2 <__sflush_r+0x1a>
 800d87e:	690e      	ldr	r6, [r1, #16]
 800d880:	2e00      	cmp	r6, #0
 800d882:	d0a5      	beq.n	800d7d0 <__sflush_r+0x18>
 800d884:	680f      	ldr	r7, [r1, #0]
 800d886:	600e      	str	r6, [r1, #0]
 800d888:	1bba      	subs	r2, r7, r6
 800d88a:	9201      	str	r2, [sp, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	079b      	lsls	r3, r3, #30
 800d890:	d100      	bne.n	800d894 <__sflush_r+0xdc>
 800d892:	694a      	ldr	r2, [r1, #20]
 800d894:	60a2      	str	r2, [r4, #8]
 800d896:	9b01      	ldr	r3, [sp, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	dd99      	ble.n	800d7d0 <__sflush_r+0x18>
 800d89c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d89e:	0032      	movs	r2, r6
 800d8a0:	001f      	movs	r7, r3
 800d8a2:	0028      	movs	r0, r5
 800d8a4:	9b01      	ldr	r3, [sp, #4]
 800d8a6:	6a21      	ldr	r1, [r4, #32]
 800d8a8:	47b8      	blx	r7
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	dc06      	bgt.n	800d8bc <__sflush_r+0x104>
 800d8ae:	2340      	movs	r3, #64	; 0x40
 800d8b0:	2001      	movs	r0, #1
 800d8b2:	89a2      	ldrh	r2, [r4, #12]
 800d8b4:	4240      	negs	r0, r0
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	81a3      	strh	r3, [r4, #12]
 800d8ba:	e78a      	b.n	800d7d2 <__sflush_r+0x1a>
 800d8bc:	9b01      	ldr	r3, [sp, #4]
 800d8be:	1836      	adds	r6, r6, r0
 800d8c0:	1a1b      	subs	r3, r3, r0
 800d8c2:	9301      	str	r3, [sp, #4]
 800d8c4:	e7e7      	b.n	800d896 <__sflush_r+0xde>
 800d8c6:	46c0      	nop			; (mov r8, r8)
 800d8c8:	dfbffffe 	.word	0xdfbffffe

0800d8cc <_fflush_r>:
 800d8cc:	690b      	ldr	r3, [r1, #16]
 800d8ce:	b570      	push	{r4, r5, r6, lr}
 800d8d0:	0005      	movs	r5, r0
 800d8d2:	000c      	movs	r4, r1
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d102      	bne.n	800d8de <_fflush_r+0x12>
 800d8d8:	2500      	movs	r5, #0
 800d8da:	0028      	movs	r0, r5
 800d8dc:	bd70      	pop	{r4, r5, r6, pc}
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d004      	beq.n	800d8ec <_fflush_r+0x20>
 800d8e2:	6a03      	ldr	r3, [r0, #32]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d101      	bne.n	800d8ec <_fflush_r+0x20>
 800d8e8:	f7fd f984 	bl	800abf4 <__sinit>
 800d8ec:	220c      	movs	r2, #12
 800d8ee:	5ea3      	ldrsh	r3, [r4, r2]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d0f1      	beq.n	800d8d8 <_fflush_r+0xc>
 800d8f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8f6:	07d2      	lsls	r2, r2, #31
 800d8f8:	d404      	bmi.n	800d904 <_fflush_r+0x38>
 800d8fa:	059b      	lsls	r3, r3, #22
 800d8fc:	d402      	bmi.n	800d904 <_fflush_r+0x38>
 800d8fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d900:	f7fd fad1 	bl	800aea6 <__retarget_lock_acquire_recursive>
 800d904:	0028      	movs	r0, r5
 800d906:	0021      	movs	r1, r4
 800d908:	f7ff ff56 	bl	800d7b8 <__sflush_r>
 800d90c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d90e:	0005      	movs	r5, r0
 800d910:	07db      	lsls	r3, r3, #31
 800d912:	d4e2      	bmi.n	800d8da <_fflush_r+0xe>
 800d914:	89a3      	ldrh	r3, [r4, #12]
 800d916:	059b      	lsls	r3, r3, #22
 800d918:	d4df      	bmi.n	800d8da <_fflush_r+0xe>
 800d91a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d91c:	f7fd fac4 	bl	800aea8 <__retarget_lock_release_recursive>
 800d920:	e7db      	b.n	800d8da <_fflush_r+0xe>

0800d922 <memmove>:
 800d922:	b510      	push	{r4, lr}
 800d924:	4288      	cmp	r0, r1
 800d926:	d902      	bls.n	800d92e <memmove+0xc>
 800d928:	188b      	adds	r3, r1, r2
 800d92a:	4298      	cmp	r0, r3
 800d92c:	d303      	bcc.n	800d936 <memmove+0x14>
 800d92e:	2300      	movs	r3, #0
 800d930:	e007      	b.n	800d942 <memmove+0x20>
 800d932:	5c8b      	ldrb	r3, [r1, r2]
 800d934:	5483      	strb	r3, [r0, r2]
 800d936:	3a01      	subs	r2, #1
 800d938:	d2fb      	bcs.n	800d932 <memmove+0x10>
 800d93a:	bd10      	pop	{r4, pc}
 800d93c:	5ccc      	ldrb	r4, [r1, r3]
 800d93e:	54c4      	strb	r4, [r0, r3]
 800d940:	3301      	adds	r3, #1
 800d942:	429a      	cmp	r2, r3
 800d944:	d1fa      	bne.n	800d93c <memmove+0x1a>
 800d946:	e7f8      	b.n	800d93a <memmove+0x18>

0800d948 <strncmp>:
 800d948:	b530      	push	{r4, r5, lr}
 800d94a:	0005      	movs	r5, r0
 800d94c:	1e10      	subs	r0, r2, #0
 800d94e:	d00b      	beq.n	800d968 <strncmp+0x20>
 800d950:	2400      	movs	r4, #0
 800d952:	3a01      	subs	r2, #1
 800d954:	5d2b      	ldrb	r3, [r5, r4]
 800d956:	5d08      	ldrb	r0, [r1, r4]
 800d958:	4283      	cmp	r3, r0
 800d95a:	d104      	bne.n	800d966 <strncmp+0x1e>
 800d95c:	42a2      	cmp	r2, r4
 800d95e:	d002      	beq.n	800d966 <strncmp+0x1e>
 800d960:	3401      	adds	r4, #1
 800d962:	2b00      	cmp	r3, #0
 800d964:	d1f6      	bne.n	800d954 <strncmp+0xc>
 800d966:	1a18      	subs	r0, r3, r0
 800d968:	bd30      	pop	{r4, r5, pc}
	...

0800d96c <_sbrk_r>:
 800d96c:	2300      	movs	r3, #0
 800d96e:	b570      	push	{r4, r5, r6, lr}
 800d970:	4d06      	ldr	r5, [pc, #24]	; (800d98c <_sbrk_r+0x20>)
 800d972:	0004      	movs	r4, r0
 800d974:	0008      	movs	r0, r1
 800d976:	602b      	str	r3, [r5, #0]
 800d978:	f7f6 fdc8 	bl	800450c <_sbrk>
 800d97c:	1c43      	adds	r3, r0, #1
 800d97e:	d103      	bne.n	800d988 <_sbrk_r+0x1c>
 800d980:	682b      	ldr	r3, [r5, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d000      	beq.n	800d988 <_sbrk_r+0x1c>
 800d986:	6023      	str	r3, [r4, #0]
 800d988:	bd70      	pop	{r4, r5, r6, pc}
 800d98a:	46c0      	nop			; (mov r8, r8)
 800d98c:	20000660 	.word	0x20000660

0800d990 <memcpy>:
 800d990:	2300      	movs	r3, #0
 800d992:	b510      	push	{r4, lr}
 800d994:	429a      	cmp	r2, r3
 800d996:	d100      	bne.n	800d99a <memcpy+0xa>
 800d998:	bd10      	pop	{r4, pc}
 800d99a:	5ccc      	ldrb	r4, [r1, r3]
 800d99c:	54c4      	strb	r4, [r0, r3]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	e7f8      	b.n	800d994 <memcpy+0x4>
	...

0800d9a4 <nan>:
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	4901      	ldr	r1, [pc, #4]	; (800d9ac <nan+0x8>)
 800d9a8:	4770      	bx	lr
 800d9aa:	46c0      	nop			; (mov r8, r8)
 800d9ac:	7ff80000 	.word	0x7ff80000

0800d9b0 <__assert_func>:
 800d9b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d9b2:	0014      	movs	r4, r2
 800d9b4:	001a      	movs	r2, r3
 800d9b6:	4b09      	ldr	r3, [pc, #36]	; (800d9dc <__assert_func+0x2c>)
 800d9b8:	0005      	movs	r5, r0
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	000e      	movs	r6, r1
 800d9be:	68d8      	ldr	r0, [r3, #12]
 800d9c0:	4b07      	ldr	r3, [pc, #28]	; (800d9e0 <__assert_func+0x30>)
 800d9c2:	2c00      	cmp	r4, #0
 800d9c4:	d101      	bne.n	800d9ca <__assert_func+0x1a>
 800d9c6:	4b07      	ldr	r3, [pc, #28]	; (800d9e4 <__assert_func+0x34>)
 800d9c8:	001c      	movs	r4, r3
 800d9ca:	4907      	ldr	r1, [pc, #28]	; (800d9e8 <__assert_func+0x38>)
 800d9cc:	9301      	str	r3, [sp, #4]
 800d9ce:	9402      	str	r4, [sp, #8]
 800d9d0:	002b      	movs	r3, r5
 800d9d2:	9600      	str	r6, [sp, #0]
 800d9d4:	f000 fbe2 	bl	800e19c <fiprintf>
 800d9d8:	f000 fbf0 	bl	800e1bc <abort>
 800d9dc:	2000007c 	.word	0x2000007c
 800d9e0:	0800f0f2 	.word	0x0800f0f2
 800d9e4:	0800f12d 	.word	0x0800f12d
 800d9e8:	0800f0ff 	.word	0x0800f0ff

0800d9ec <_calloc_r>:
 800d9ec:	b570      	push	{r4, r5, r6, lr}
 800d9ee:	0c0b      	lsrs	r3, r1, #16
 800d9f0:	0c15      	lsrs	r5, r2, #16
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d11e      	bne.n	800da34 <_calloc_r+0x48>
 800d9f6:	2d00      	cmp	r5, #0
 800d9f8:	d10c      	bne.n	800da14 <_calloc_r+0x28>
 800d9fa:	b289      	uxth	r1, r1
 800d9fc:	b294      	uxth	r4, r2
 800d9fe:	434c      	muls	r4, r1
 800da00:	0021      	movs	r1, r4
 800da02:	f7fe f975 	bl	800bcf0 <_malloc_r>
 800da06:	1e05      	subs	r5, r0, #0
 800da08:	d01b      	beq.n	800da42 <_calloc_r+0x56>
 800da0a:	0022      	movs	r2, r4
 800da0c:	2100      	movs	r1, #0
 800da0e:	f7fd f9c5 	bl	800ad9c <memset>
 800da12:	e016      	b.n	800da42 <_calloc_r+0x56>
 800da14:	1c2b      	adds	r3, r5, #0
 800da16:	1c0c      	adds	r4, r1, #0
 800da18:	b289      	uxth	r1, r1
 800da1a:	b292      	uxth	r2, r2
 800da1c:	434a      	muls	r2, r1
 800da1e:	b2a1      	uxth	r1, r4
 800da20:	b29c      	uxth	r4, r3
 800da22:	434c      	muls	r4, r1
 800da24:	0c13      	lsrs	r3, r2, #16
 800da26:	18e4      	adds	r4, r4, r3
 800da28:	0c23      	lsrs	r3, r4, #16
 800da2a:	d107      	bne.n	800da3c <_calloc_r+0x50>
 800da2c:	0424      	lsls	r4, r4, #16
 800da2e:	b292      	uxth	r2, r2
 800da30:	4314      	orrs	r4, r2
 800da32:	e7e5      	b.n	800da00 <_calloc_r+0x14>
 800da34:	2d00      	cmp	r5, #0
 800da36:	d101      	bne.n	800da3c <_calloc_r+0x50>
 800da38:	1c14      	adds	r4, r2, #0
 800da3a:	e7ed      	b.n	800da18 <_calloc_r+0x2c>
 800da3c:	230c      	movs	r3, #12
 800da3e:	2500      	movs	r5, #0
 800da40:	6003      	str	r3, [r0, #0]
 800da42:	0028      	movs	r0, r5
 800da44:	bd70      	pop	{r4, r5, r6, pc}

0800da46 <rshift>:
 800da46:	0002      	movs	r2, r0
 800da48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da4a:	6904      	ldr	r4, [r0, #16]
 800da4c:	114b      	asrs	r3, r1, #5
 800da4e:	b085      	sub	sp, #20
 800da50:	3214      	adds	r2, #20
 800da52:	9302      	str	r3, [sp, #8]
 800da54:	114d      	asrs	r5, r1, #5
 800da56:	0013      	movs	r3, r2
 800da58:	42ac      	cmp	r4, r5
 800da5a:	dd32      	ble.n	800dac2 <rshift+0x7c>
 800da5c:	261f      	movs	r6, #31
 800da5e:	000f      	movs	r7, r1
 800da60:	114b      	asrs	r3, r1, #5
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	00a5      	lsls	r5, r4, #2
 800da66:	18d3      	adds	r3, r2, r3
 800da68:	4037      	ands	r7, r6
 800da6a:	1955      	adds	r5, r2, r5
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	9701      	str	r7, [sp, #4]
 800da70:	4231      	tst	r1, r6
 800da72:	d10d      	bne.n	800da90 <rshift+0x4a>
 800da74:	0016      	movs	r6, r2
 800da76:	0019      	movs	r1, r3
 800da78:	428d      	cmp	r5, r1
 800da7a:	d836      	bhi.n	800daea <rshift+0xa4>
 800da7c:	9900      	ldr	r1, [sp, #0]
 800da7e:	2300      	movs	r3, #0
 800da80:	3903      	subs	r1, #3
 800da82:	428d      	cmp	r5, r1
 800da84:	d302      	bcc.n	800da8c <rshift+0x46>
 800da86:	9b02      	ldr	r3, [sp, #8]
 800da88:	1ae4      	subs	r4, r4, r3
 800da8a:	00a3      	lsls	r3, r4, #2
 800da8c:	18d3      	adds	r3, r2, r3
 800da8e:	e018      	b.n	800dac2 <rshift+0x7c>
 800da90:	2120      	movs	r1, #32
 800da92:	9e01      	ldr	r6, [sp, #4]
 800da94:	9f01      	ldr	r7, [sp, #4]
 800da96:	1b89      	subs	r1, r1, r6
 800da98:	9e00      	ldr	r6, [sp, #0]
 800da9a:	9103      	str	r1, [sp, #12]
 800da9c:	ce02      	ldmia	r6!, {r1}
 800da9e:	4694      	mov	ip, r2
 800daa0:	40f9      	lsrs	r1, r7
 800daa2:	42b5      	cmp	r5, r6
 800daa4:	d816      	bhi.n	800dad4 <rshift+0x8e>
 800daa6:	9e00      	ldr	r6, [sp, #0]
 800daa8:	2300      	movs	r3, #0
 800daaa:	3601      	adds	r6, #1
 800daac:	42b5      	cmp	r5, r6
 800daae:	d303      	bcc.n	800dab8 <rshift+0x72>
 800dab0:	9b02      	ldr	r3, [sp, #8]
 800dab2:	1ae3      	subs	r3, r4, r3
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	3b04      	subs	r3, #4
 800dab8:	18d3      	adds	r3, r2, r3
 800daba:	6019      	str	r1, [r3, #0]
 800dabc:	2900      	cmp	r1, #0
 800dabe:	d000      	beq.n	800dac2 <rshift+0x7c>
 800dac0:	3304      	adds	r3, #4
 800dac2:	1a99      	subs	r1, r3, r2
 800dac4:	1089      	asrs	r1, r1, #2
 800dac6:	6101      	str	r1, [r0, #16]
 800dac8:	4293      	cmp	r3, r2
 800daca:	d101      	bne.n	800dad0 <rshift+0x8a>
 800dacc:	2300      	movs	r3, #0
 800dace:	6143      	str	r3, [r0, #20]
 800dad0:	b005      	add	sp, #20
 800dad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dad4:	6837      	ldr	r7, [r6, #0]
 800dad6:	9b03      	ldr	r3, [sp, #12]
 800dad8:	409f      	lsls	r7, r3
 800dada:	430f      	orrs	r7, r1
 800dadc:	4661      	mov	r1, ip
 800dade:	c180      	stmia	r1!, {r7}
 800dae0:	468c      	mov	ip, r1
 800dae2:	9b01      	ldr	r3, [sp, #4]
 800dae4:	ce02      	ldmia	r6!, {r1}
 800dae6:	40d9      	lsrs	r1, r3
 800dae8:	e7db      	b.n	800daa2 <rshift+0x5c>
 800daea:	c980      	ldmia	r1!, {r7}
 800daec:	c680      	stmia	r6!, {r7}
 800daee:	e7c3      	b.n	800da78 <rshift+0x32>

0800daf0 <__hexdig_fun>:
 800daf0:	0002      	movs	r2, r0
 800daf2:	3a30      	subs	r2, #48	; 0x30
 800daf4:	0003      	movs	r3, r0
 800daf6:	2a09      	cmp	r2, #9
 800daf8:	d802      	bhi.n	800db00 <__hexdig_fun+0x10>
 800dafa:	3b20      	subs	r3, #32
 800dafc:	b2d8      	uxtb	r0, r3
 800dafe:	4770      	bx	lr
 800db00:	0002      	movs	r2, r0
 800db02:	3a61      	subs	r2, #97	; 0x61
 800db04:	2a05      	cmp	r2, #5
 800db06:	d801      	bhi.n	800db0c <__hexdig_fun+0x1c>
 800db08:	3b47      	subs	r3, #71	; 0x47
 800db0a:	e7f7      	b.n	800dafc <__hexdig_fun+0xc>
 800db0c:	001a      	movs	r2, r3
 800db0e:	3a41      	subs	r2, #65	; 0x41
 800db10:	2000      	movs	r0, #0
 800db12:	2a05      	cmp	r2, #5
 800db14:	d8f3      	bhi.n	800dafe <__hexdig_fun+0xe>
 800db16:	3b27      	subs	r3, #39	; 0x27
 800db18:	e7f0      	b.n	800dafc <__hexdig_fun+0xc>
	...

0800db1c <__gethex>:
 800db1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db1e:	b089      	sub	sp, #36	; 0x24
 800db20:	9307      	str	r3, [sp, #28]
 800db22:	2302      	movs	r3, #2
 800db24:	9201      	str	r2, [sp, #4]
 800db26:	680a      	ldr	r2, [r1, #0]
 800db28:	425b      	negs	r3, r3
 800db2a:	9003      	str	r0, [sp, #12]
 800db2c:	9106      	str	r1, [sp, #24]
 800db2e:	1c96      	adds	r6, r2, #2
 800db30:	1a9b      	subs	r3, r3, r2
 800db32:	199a      	adds	r2, r3, r6
 800db34:	9600      	str	r6, [sp, #0]
 800db36:	9205      	str	r2, [sp, #20]
 800db38:	9a00      	ldr	r2, [sp, #0]
 800db3a:	3601      	adds	r6, #1
 800db3c:	7810      	ldrb	r0, [r2, #0]
 800db3e:	2830      	cmp	r0, #48	; 0x30
 800db40:	d0f7      	beq.n	800db32 <__gethex+0x16>
 800db42:	f7ff ffd5 	bl	800daf0 <__hexdig_fun>
 800db46:	2300      	movs	r3, #0
 800db48:	001d      	movs	r5, r3
 800db4a:	9302      	str	r3, [sp, #8]
 800db4c:	4298      	cmp	r0, r3
 800db4e:	d11d      	bne.n	800db8c <__gethex+0x70>
 800db50:	2201      	movs	r2, #1
 800db52:	49a6      	ldr	r1, [pc, #664]	; (800ddec <__gethex+0x2d0>)
 800db54:	9800      	ldr	r0, [sp, #0]
 800db56:	f7ff fef7 	bl	800d948 <strncmp>
 800db5a:	0007      	movs	r7, r0
 800db5c:	42a8      	cmp	r0, r5
 800db5e:	d169      	bne.n	800dc34 <__gethex+0x118>
 800db60:	9b00      	ldr	r3, [sp, #0]
 800db62:	0034      	movs	r4, r6
 800db64:	7858      	ldrb	r0, [r3, #1]
 800db66:	f7ff ffc3 	bl	800daf0 <__hexdig_fun>
 800db6a:	2301      	movs	r3, #1
 800db6c:	9302      	str	r3, [sp, #8]
 800db6e:	42a8      	cmp	r0, r5
 800db70:	d02f      	beq.n	800dbd2 <__gethex+0xb6>
 800db72:	9600      	str	r6, [sp, #0]
 800db74:	9b00      	ldr	r3, [sp, #0]
 800db76:	7818      	ldrb	r0, [r3, #0]
 800db78:	2830      	cmp	r0, #48	; 0x30
 800db7a:	d009      	beq.n	800db90 <__gethex+0x74>
 800db7c:	f7ff ffb8 	bl	800daf0 <__hexdig_fun>
 800db80:	4242      	negs	r2, r0
 800db82:	4142      	adcs	r2, r0
 800db84:	2301      	movs	r3, #1
 800db86:	0035      	movs	r5, r6
 800db88:	9202      	str	r2, [sp, #8]
 800db8a:	9305      	str	r3, [sp, #20]
 800db8c:	9c00      	ldr	r4, [sp, #0]
 800db8e:	e004      	b.n	800db9a <__gethex+0x7e>
 800db90:	9b00      	ldr	r3, [sp, #0]
 800db92:	3301      	adds	r3, #1
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	e7ed      	b.n	800db74 <__gethex+0x58>
 800db98:	3401      	adds	r4, #1
 800db9a:	7820      	ldrb	r0, [r4, #0]
 800db9c:	f7ff ffa8 	bl	800daf0 <__hexdig_fun>
 800dba0:	1e07      	subs	r7, r0, #0
 800dba2:	d1f9      	bne.n	800db98 <__gethex+0x7c>
 800dba4:	2201      	movs	r2, #1
 800dba6:	0020      	movs	r0, r4
 800dba8:	4990      	ldr	r1, [pc, #576]	; (800ddec <__gethex+0x2d0>)
 800dbaa:	f7ff fecd 	bl	800d948 <strncmp>
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d10d      	bne.n	800dbce <__gethex+0xb2>
 800dbb2:	2d00      	cmp	r5, #0
 800dbb4:	d106      	bne.n	800dbc4 <__gethex+0xa8>
 800dbb6:	3401      	adds	r4, #1
 800dbb8:	0025      	movs	r5, r4
 800dbba:	7820      	ldrb	r0, [r4, #0]
 800dbbc:	f7ff ff98 	bl	800daf0 <__hexdig_fun>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d102      	bne.n	800dbca <__gethex+0xae>
 800dbc4:	1b2d      	subs	r5, r5, r4
 800dbc6:	00af      	lsls	r7, r5, #2
 800dbc8:	e003      	b.n	800dbd2 <__gethex+0xb6>
 800dbca:	3401      	adds	r4, #1
 800dbcc:	e7f5      	b.n	800dbba <__gethex+0x9e>
 800dbce:	2d00      	cmp	r5, #0
 800dbd0:	d1f8      	bne.n	800dbc4 <__gethex+0xa8>
 800dbd2:	2220      	movs	r2, #32
 800dbd4:	7823      	ldrb	r3, [r4, #0]
 800dbd6:	0026      	movs	r6, r4
 800dbd8:	4393      	bics	r3, r2
 800dbda:	2b50      	cmp	r3, #80	; 0x50
 800dbdc:	d11d      	bne.n	800dc1a <__gethex+0xfe>
 800dbde:	7863      	ldrb	r3, [r4, #1]
 800dbe0:	2b2b      	cmp	r3, #43	; 0x2b
 800dbe2:	d02c      	beq.n	800dc3e <__gethex+0x122>
 800dbe4:	2b2d      	cmp	r3, #45	; 0x2d
 800dbe6:	d02e      	beq.n	800dc46 <__gethex+0x12a>
 800dbe8:	2300      	movs	r3, #0
 800dbea:	1c66      	adds	r6, r4, #1
 800dbec:	9304      	str	r3, [sp, #16]
 800dbee:	7830      	ldrb	r0, [r6, #0]
 800dbf0:	f7ff ff7e 	bl	800daf0 <__hexdig_fun>
 800dbf4:	1e43      	subs	r3, r0, #1
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2b18      	cmp	r3, #24
 800dbfa:	d82b      	bhi.n	800dc54 <__gethex+0x138>
 800dbfc:	3810      	subs	r0, #16
 800dbfe:	0005      	movs	r5, r0
 800dc00:	7870      	ldrb	r0, [r6, #1]
 800dc02:	f7ff ff75 	bl	800daf0 <__hexdig_fun>
 800dc06:	1e43      	subs	r3, r0, #1
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	3601      	adds	r6, #1
 800dc0c:	2b18      	cmp	r3, #24
 800dc0e:	d91c      	bls.n	800dc4a <__gethex+0x12e>
 800dc10:	9b04      	ldr	r3, [sp, #16]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d000      	beq.n	800dc18 <__gethex+0xfc>
 800dc16:	426d      	negs	r5, r5
 800dc18:	197f      	adds	r7, r7, r5
 800dc1a:	9b06      	ldr	r3, [sp, #24]
 800dc1c:	601e      	str	r6, [r3, #0]
 800dc1e:	9b02      	ldr	r3, [sp, #8]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d019      	beq.n	800dc58 <__gethex+0x13c>
 800dc24:	2600      	movs	r6, #0
 800dc26:	9b05      	ldr	r3, [sp, #20]
 800dc28:	42b3      	cmp	r3, r6
 800dc2a:	d100      	bne.n	800dc2e <__gethex+0x112>
 800dc2c:	3606      	adds	r6, #6
 800dc2e:	0030      	movs	r0, r6
 800dc30:	b009      	add	sp, #36	; 0x24
 800dc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc34:	2301      	movs	r3, #1
 800dc36:	2700      	movs	r7, #0
 800dc38:	9c00      	ldr	r4, [sp, #0]
 800dc3a:	9302      	str	r3, [sp, #8]
 800dc3c:	e7c9      	b.n	800dbd2 <__gethex+0xb6>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	9304      	str	r3, [sp, #16]
 800dc42:	1ca6      	adds	r6, r4, #2
 800dc44:	e7d3      	b.n	800dbee <__gethex+0xd2>
 800dc46:	2301      	movs	r3, #1
 800dc48:	e7fa      	b.n	800dc40 <__gethex+0x124>
 800dc4a:	230a      	movs	r3, #10
 800dc4c:	435d      	muls	r5, r3
 800dc4e:	182d      	adds	r5, r5, r0
 800dc50:	3d10      	subs	r5, #16
 800dc52:	e7d5      	b.n	800dc00 <__gethex+0xe4>
 800dc54:	0026      	movs	r6, r4
 800dc56:	e7e0      	b.n	800dc1a <__gethex+0xfe>
 800dc58:	9b00      	ldr	r3, [sp, #0]
 800dc5a:	9902      	ldr	r1, [sp, #8]
 800dc5c:	1ae3      	subs	r3, r4, r3
 800dc5e:	3b01      	subs	r3, #1
 800dc60:	2b07      	cmp	r3, #7
 800dc62:	dc0a      	bgt.n	800dc7a <__gethex+0x15e>
 800dc64:	9803      	ldr	r0, [sp, #12]
 800dc66:	f7fe f8d5 	bl	800be14 <_Balloc>
 800dc6a:	1e05      	subs	r5, r0, #0
 800dc6c:	d108      	bne.n	800dc80 <__gethex+0x164>
 800dc6e:	002a      	movs	r2, r5
 800dc70:	21e4      	movs	r1, #228	; 0xe4
 800dc72:	4b5f      	ldr	r3, [pc, #380]	; (800ddf0 <__gethex+0x2d4>)
 800dc74:	485f      	ldr	r0, [pc, #380]	; (800ddf4 <__gethex+0x2d8>)
 800dc76:	f7ff fe9b 	bl	800d9b0 <__assert_func>
 800dc7a:	3101      	adds	r1, #1
 800dc7c:	105b      	asrs	r3, r3, #1
 800dc7e:	e7ef      	b.n	800dc60 <__gethex+0x144>
 800dc80:	0003      	movs	r3, r0
 800dc82:	3314      	adds	r3, #20
 800dc84:	9302      	str	r3, [sp, #8]
 800dc86:	9305      	str	r3, [sp, #20]
 800dc88:	2300      	movs	r3, #0
 800dc8a:	001e      	movs	r6, r3
 800dc8c:	9304      	str	r3, [sp, #16]
 800dc8e:	9b00      	ldr	r3, [sp, #0]
 800dc90:	42a3      	cmp	r3, r4
 800dc92:	d33f      	bcc.n	800dd14 <__gethex+0x1f8>
 800dc94:	9c05      	ldr	r4, [sp, #20]
 800dc96:	9b02      	ldr	r3, [sp, #8]
 800dc98:	c440      	stmia	r4!, {r6}
 800dc9a:	1ae4      	subs	r4, r4, r3
 800dc9c:	10a4      	asrs	r4, r4, #2
 800dc9e:	0030      	movs	r0, r6
 800dca0:	612c      	str	r4, [r5, #16]
 800dca2:	f7fe f9af 	bl	800c004 <__hi0bits>
 800dca6:	9b01      	ldr	r3, [sp, #4]
 800dca8:	0164      	lsls	r4, r4, #5
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	1a26      	subs	r6, r4, r0
 800dcae:	9300      	str	r3, [sp, #0]
 800dcb0:	429e      	cmp	r6, r3
 800dcb2:	dd51      	ble.n	800dd58 <__gethex+0x23c>
 800dcb4:	1af6      	subs	r6, r6, r3
 800dcb6:	0031      	movs	r1, r6
 800dcb8:	0028      	movs	r0, r5
 800dcba:	f7fe fd43 	bl	800c744 <__any_on>
 800dcbe:	1e04      	subs	r4, r0, #0
 800dcc0:	d016      	beq.n	800dcf0 <__gethex+0x1d4>
 800dcc2:	2401      	movs	r4, #1
 800dcc4:	231f      	movs	r3, #31
 800dcc6:	0020      	movs	r0, r4
 800dcc8:	1e72      	subs	r2, r6, #1
 800dcca:	4013      	ands	r3, r2
 800dccc:	4098      	lsls	r0, r3
 800dcce:	0003      	movs	r3, r0
 800dcd0:	1151      	asrs	r1, r2, #5
 800dcd2:	9802      	ldr	r0, [sp, #8]
 800dcd4:	0089      	lsls	r1, r1, #2
 800dcd6:	5809      	ldr	r1, [r1, r0]
 800dcd8:	4219      	tst	r1, r3
 800dcda:	d009      	beq.n	800dcf0 <__gethex+0x1d4>
 800dcdc:	42a2      	cmp	r2, r4
 800dcde:	dd06      	ble.n	800dcee <__gethex+0x1d2>
 800dce0:	0028      	movs	r0, r5
 800dce2:	1eb1      	subs	r1, r6, #2
 800dce4:	f7fe fd2e 	bl	800c744 <__any_on>
 800dce8:	3402      	adds	r4, #2
 800dcea:	2800      	cmp	r0, #0
 800dcec:	d100      	bne.n	800dcf0 <__gethex+0x1d4>
 800dcee:	2402      	movs	r4, #2
 800dcf0:	0031      	movs	r1, r6
 800dcf2:	0028      	movs	r0, r5
 800dcf4:	f7ff fea7 	bl	800da46 <rshift>
 800dcf8:	19bf      	adds	r7, r7, r6
 800dcfa:	9b01      	ldr	r3, [sp, #4]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	42bb      	cmp	r3, r7
 800dd00:	da3a      	bge.n	800dd78 <__gethex+0x25c>
 800dd02:	0029      	movs	r1, r5
 800dd04:	9803      	ldr	r0, [sp, #12]
 800dd06:	f7fe f8c9 	bl	800be9c <_Bfree>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd0e:	26a3      	movs	r6, #163	; 0xa3
 800dd10:	6013      	str	r3, [r2, #0]
 800dd12:	e78c      	b.n	800dc2e <__gethex+0x112>
 800dd14:	3c01      	subs	r4, #1
 800dd16:	7823      	ldrb	r3, [r4, #0]
 800dd18:	2b2e      	cmp	r3, #46	; 0x2e
 800dd1a:	d012      	beq.n	800dd42 <__gethex+0x226>
 800dd1c:	9b04      	ldr	r3, [sp, #16]
 800dd1e:	2b20      	cmp	r3, #32
 800dd20:	d104      	bne.n	800dd2c <__gethex+0x210>
 800dd22:	9b05      	ldr	r3, [sp, #20]
 800dd24:	c340      	stmia	r3!, {r6}
 800dd26:	2600      	movs	r6, #0
 800dd28:	9305      	str	r3, [sp, #20]
 800dd2a:	9604      	str	r6, [sp, #16]
 800dd2c:	7820      	ldrb	r0, [r4, #0]
 800dd2e:	f7ff fedf 	bl	800daf0 <__hexdig_fun>
 800dd32:	230f      	movs	r3, #15
 800dd34:	4018      	ands	r0, r3
 800dd36:	9b04      	ldr	r3, [sp, #16]
 800dd38:	4098      	lsls	r0, r3
 800dd3a:	3304      	adds	r3, #4
 800dd3c:	4306      	orrs	r6, r0
 800dd3e:	9304      	str	r3, [sp, #16]
 800dd40:	e7a5      	b.n	800dc8e <__gethex+0x172>
 800dd42:	9b00      	ldr	r3, [sp, #0]
 800dd44:	42a3      	cmp	r3, r4
 800dd46:	d8e9      	bhi.n	800dd1c <__gethex+0x200>
 800dd48:	2201      	movs	r2, #1
 800dd4a:	0020      	movs	r0, r4
 800dd4c:	4927      	ldr	r1, [pc, #156]	; (800ddec <__gethex+0x2d0>)
 800dd4e:	f7ff fdfb 	bl	800d948 <strncmp>
 800dd52:	2800      	cmp	r0, #0
 800dd54:	d1e2      	bne.n	800dd1c <__gethex+0x200>
 800dd56:	e79a      	b.n	800dc8e <__gethex+0x172>
 800dd58:	9b00      	ldr	r3, [sp, #0]
 800dd5a:	2400      	movs	r4, #0
 800dd5c:	429e      	cmp	r6, r3
 800dd5e:	dacc      	bge.n	800dcfa <__gethex+0x1de>
 800dd60:	1b9e      	subs	r6, r3, r6
 800dd62:	0029      	movs	r1, r5
 800dd64:	0032      	movs	r2, r6
 800dd66:	9803      	ldr	r0, [sp, #12]
 800dd68:	f7fe fab8 	bl	800c2dc <__lshift>
 800dd6c:	0003      	movs	r3, r0
 800dd6e:	3314      	adds	r3, #20
 800dd70:	0005      	movs	r5, r0
 800dd72:	1bbf      	subs	r7, r7, r6
 800dd74:	9302      	str	r3, [sp, #8]
 800dd76:	e7c0      	b.n	800dcfa <__gethex+0x1de>
 800dd78:	9b01      	ldr	r3, [sp, #4]
 800dd7a:	685e      	ldr	r6, [r3, #4]
 800dd7c:	42be      	cmp	r6, r7
 800dd7e:	dd70      	ble.n	800de62 <__gethex+0x346>
 800dd80:	9b00      	ldr	r3, [sp, #0]
 800dd82:	1bf6      	subs	r6, r6, r7
 800dd84:	42b3      	cmp	r3, r6
 800dd86:	dc37      	bgt.n	800ddf8 <__gethex+0x2dc>
 800dd88:	9b01      	ldr	r3, [sp, #4]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	2b02      	cmp	r3, #2
 800dd8e:	d024      	beq.n	800ddda <__gethex+0x2be>
 800dd90:	2b03      	cmp	r3, #3
 800dd92:	d026      	beq.n	800dde2 <__gethex+0x2c6>
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d117      	bne.n	800ddc8 <__gethex+0x2ac>
 800dd98:	9b00      	ldr	r3, [sp, #0]
 800dd9a:	42b3      	cmp	r3, r6
 800dd9c:	d114      	bne.n	800ddc8 <__gethex+0x2ac>
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d10b      	bne.n	800ddba <__gethex+0x29e>
 800dda2:	9b01      	ldr	r3, [sp, #4]
 800dda4:	9a07      	ldr	r2, [sp, #28]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	2662      	movs	r6, #98	; 0x62
 800ddaa:	6013      	str	r3, [r2, #0]
 800ddac:	2301      	movs	r3, #1
 800ddae:	9a02      	ldr	r2, [sp, #8]
 800ddb0:	612b      	str	r3, [r5, #16]
 800ddb2:	6013      	str	r3, [r2, #0]
 800ddb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddb6:	601d      	str	r5, [r3, #0]
 800ddb8:	e739      	b.n	800dc2e <__gethex+0x112>
 800ddba:	9900      	ldr	r1, [sp, #0]
 800ddbc:	0028      	movs	r0, r5
 800ddbe:	3901      	subs	r1, #1
 800ddc0:	f7fe fcc0 	bl	800c744 <__any_on>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	d1ec      	bne.n	800dda2 <__gethex+0x286>
 800ddc8:	0029      	movs	r1, r5
 800ddca:	9803      	ldr	r0, [sp, #12]
 800ddcc:	f7fe f866 	bl	800be9c <_Bfree>
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddd4:	2650      	movs	r6, #80	; 0x50
 800ddd6:	6013      	str	r3, [r2, #0]
 800ddd8:	e729      	b.n	800dc2e <__gethex+0x112>
 800ddda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d1f3      	bne.n	800ddc8 <__gethex+0x2ac>
 800dde0:	e7df      	b.n	800dda2 <__gethex+0x286>
 800dde2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d1dc      	bne.n	800dda2 <__gethex+0x286>
 800dde8:	e7ee      	b.n	800ddc8 <__gethex+0x2ac>
 800ddea:	46c0      	nop			; (mov r8, r8)
 800ddec:	0800ef84 	.word	0x0800ef84
 800ddf0:	0800ee1d 	.word	0x0800ee1d
 800ddf4:	0800f12e 	.word	0x0800f12e
 800ddf8:	1e77      	subs	r7, r6, #1
 800ddfa:	2c00      	cmp	r4, #0
 800ddfc:	d12f      	bne.n	800de5e <__gethex+0x342>
 800ddfe:	2f00      	cmp	r7, #0
 800de00:	d004      	beq.n	800de0c <__gethex+0x2f0>
 800de02:	0039      	movs	r1, r7
 800de04:	0028      	movs	r0, r5
 800de06:	f7fe fc9d 	bl	800c744 <__any_on>
 800de0a:	0004      	movs	r4, r0
 800de0c:	231f      	movs	r3, #31
 800de0e:	117a      	asrs	r2, r7, #5
 800de10:	401f      	ands	r7, r3
 800de12:	3b1e      	subs	r3, #30
 800de14:	40bb      	lsls	r3, r7
 800de16:	9902      	ldr	r1, [sp, #8]
 800de18:	0092      	lsls	r2, r2, #2
 800de1a:	5852      	ldr	r2, [r2, r1]
 800de1c:	421a      	tst	r2, r3
 800de1e:	d001      	beq.n	800de24 <__gethex+0x308>
 800de20:	2302      	movs	r3, #2
 800de22:	431c      	orrs	r4, r3
 800de24:	9b00      	ldr	r3, [sp, #0]
 800de26:	0031      	movs	r1, r6
 800de28:	1b9b      	subs	r3, r3, r6
 800de2a:	2602      	movs	r6, #2
 800de2c:	0028      	movs	r0, r5
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	f7ff fe09 	bl	800da46 <rshift>
 800de34:	9b01      	ldr	r3, [sp, #4]
 800de36:	685f      	ldr	r7, [r3, #4]
 800de38:	2c00      	cmp	r4, #0
 800de3a:	d041      	beq.n	800dec0 <__gethex+0x3a4>
 800de3c:	9b01      	ldr	r3, [sp, #4]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	2b02      	cmp	r3, #2
 800de42:	d010      	beq.n	800de66 <__gethex+0x34a>
 800de44:	2b03      	cmp	r3, #3
 800de46:	d012      	beq.n	800de6e <__gethex+0x352>
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d106      	bne.n	800de5a <__gethex+0x33e>
 800de4c:	07a2      	lsls	r2, r4, #30
 800de4e:	d504      	bpl.n	800de5a <__gethex+0x33e>
 800de50:	9a02      	ldr	r2, [sp, #8]
 800de52:	6812      	ldr	r2, [r2, #0]
 800de54:	4314      	orrs	r4, r2
 800de56:	421c      	tst	r4, r3
 800de58:	d10c      	bne.n	800de74 <__gethex+0x358>
 800de5a:	2310      	movs	r3, #16
 800de5c:	e02f      	b.n	800debe <__gethex+0x3a2>
 800de5e:	2401      	movs	r4, #1
 800de60:	e7d4      	b.n	800de0c <__gethex+0x2f0>
 800de62:	2601      	movs	r6, #1
 800de64:	e7e8      	b.n	800de38 <__gethex+0x31c>
 800de66:	2301      	movs	r3, #1
 800de68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de6a:	1a9b      	subs	r3, r3, r2
 800de6c:	930f      	str	r3, [sp, #60]	; 0x3c
 800de6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de70:	2b00      	cmp	r3, #0
 800de72:	d0f2      	beq.n	800de5a <__gethex+0x33e>
 800de74:	692b      	ldr	r3, [r5, #16]
 800de76:	2000      	movs	r0, #0
 800de78:	9302      	str	r3, [sp, #8]
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	9304      	str	r3, [sp, #16]
 800de7e:	002b      	movs	r3, r5
 800de80:	9a04      	ldr	r2, [sp, #16]
 800de82:	3314      	adds	r3, #20
 800de84:	1899      	adds	r1, r3, r2
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	1c54      	adds	r4, r2, #1
 800de8a:	d01e      	beq.n	800deca <__gethex+0x3ae>
 800de8c:	3201      	adds	r2, #1
 800de8e:	601a      	str	r2, [r3, #0]
 800de90:	002b      	movs	r3, r5
 800de92:	3314      	adds	r3, #20
 800de94:	2e02      	cmp	r6, #2
 800de96:	d141      	bne.n	800df1c <__gethex+0x400>
 800de98:	9a01      	ldr	r2, [sp, #4]
 800de9a:	9900      	ldr	r1, [sp, #0]
 800de9c:	6812      	ldr	r2, [r2, #0]
 800de9e:	3a01      	subs	r2, #1
 800dea0:	428a      	cmp	r2, r1
 800dea2:	d10b      	bne.n	800debc <__gethex+0x3a0>
 800dea4:	221f      	movs	r2, #31
 800dea6:	9800      	ldr	r0, [sp, #0]
 800dea8:	1149      	asrs	r1, r1, #5
 800deaa:	4002      	ands	r2, r0
 800deac:	2001      	movs	r0, #1
 800deae:	0004      	movs	r4, r0
 800deb0:	4094      	lsls	r4, r2
 800deb2:	0089      	lsls	r1, r1, #2
 800deb4:	58cb      	ldr	r3, [r1, r3]
 800deb6:	4223      	tst	r3, r4
 800deb8:	d000      	beq.n	800debc <__gethex+0x3a0>
 800deba:	2601      	movs	r6, #1
 800debc:	2320      	movs	r3, #32
 800debe:	431e      	orrs	r6, r3
 800dec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dec2:	601d      	str	r5, [r3, #0]
 800dec4:	9b07      	ldr	r3, [sp, #28]
 800dec6:	601f      	str	r7, [r3, #0]
 800dec8:	e6b1      	b.n	800dc2e <__gethex+0x112>
 800deca:	c301      	stmia	r3!, {r0}
 800decc:	4299      	cmp	r1, r3
 800dece:	d8da      	bhi.n	800de86 <__gethex+0x36a>
 800ded0:	68ab      	ldr	r3, [r5, #8]
 800ded2:	9a02      	ldr	r2, [sp, #8]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	db18      	blt.n	800df0a <__gethex+0x3ee>
 800ded8:	6869      	ldr	r1, [r5, #4]
 800deda:	9803      	ldr	r0, [sp, #12]
 800dedc:	3101      	adds	r1, #1
 800dede:	f7fd ff99 	bl	800be14 <_Balloc>
 800dee2:	1e04      	subs	r4, r0, #0
 800dee4:	d104      	bne.n	800def0 <__gethex+0x3d4>
 800dee6:	0022      	movs	r2, r4
 800dee8:	2184      	movs	r1, #132	; 0x84
 800deea:	4b1c      	ldr	r3, [pc, #112]	; (800df5c <__gethex+0x440>)
 800deec:	481c      	ldr	r0, [pc, #112]	; (800df60 <__gethex+0x444>)
 800deee:	e6c2      	b.n	800dc76 <__gethex+0x15a>
 800def0:	0029      	movs	r1, r5
 800def2:	692a      	ldr	r2, [r5, #16]
 800def4:	310c      	adds	r1, #12
 800def6:	3202      	adds	r2, #2
 800def8:	0092      	lsls	r2, r2, #2
 800defa:	300c      	adds	r0, #12
 800defc:	f7ff fd48 	bl	800d990 <memcpy>
 800df00:	0029      	movs	r1, r5
 800df02:	9803      	ldr	r0, [sp, #12]
 800df04:	f7fd ffca 	bl	800be9c <_Bfree>
 800df08:	0025      	movs	r5, r4
 800df0a:	692b      	ldr	r3, [r5, #16]
 800df0c:	1c5a      	adds	r2, r3, #1
 800df0e:	612a      	str	r2, [r5, #16]
 800df10:	2201      	movs	r2, #1
 800df12:	3304      	adds	r3, #4
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	18eb      	adds	r3, r5, r3
 800df18:	605a      	str	r2, [r3, #4]
 800df1a:	e7b9      	b.n	800de90 <__gethex+0x374>
 800df1c:	692a      	ldr	r2, [r5, #16]
 800df1e:	9902      	ldr	r1, [sp, #8]
 800df20:	428a      	cmp	r2, r1
 800df22:	dd09      	ble.n	800df38 <__gethex+0x41c>
 800df24:	2101      	movs	r1, #1
 800df26:	0028      	movs	r0, r5
 800df28:	f7ff fd8d 	bl	800da46 <rshift>
 800df2c:	9b01      	ldr	r3, [sp, #4]
 800df2e:	3701      	adds	r7, #1
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	42bb      	cmp	r3, r7
 800df34:	dac1      	bge.n	800deba <__gethex+0x39e>
 800df36:	e6e4      	b.n	800dd02 <__gethex+0x1e6>
 800df38:	221f      	movs	r2, #31
 800df3a:	9c00      	ldr	r4, [sp, #0]
 800df3c:	9900      	ldr	r1, [sp, #0]
 800df3e:	2601      	movs	r6, #1
 800df40:	4014      	ands	r4, r2
 800df42:	4211      	tst	r1, r2
 800df44:	d0ba      	beq.n	800debc <__gethex+0x3a0>
 800df46:	9a04      	ldr	r2, [sp, #16]
 800df48:	189b      	adds	r3, r3, r2
 800df4a:	3b04      	subs	r3, #4
 800df4c:	6818      	ldr	r0, [r3, #0]
 800df4e:	f7fe f859 	bl	800c004 <__hi0bits>
 800df52:	2320      	movs	r3, #32
 800df54:	1b1b      	subs	r3, r3, r4
 800df56:	4298      	cmp	r0, r3
 800df58:	dbe4      	blt.n	800df24 <__gethex+0x408>
 800df5a:	e7af      	b.n	800debc <__gethex+0x3a0>
 800df5c:	0800ee1d 	.word	0x0800ee1d
 800df60:	0800f12e 	.word	0x0800f12e

0800df64 <L_shift>:
 800df64:	2308      	movs	r3, #8
 800df66:	b570      	push	{r4, r5, r6, lr}
 800df68:	2520      	movs	r5, #32
 800df6a:	1a9a      	subs	r2, r3, r2
 800df6c:	0092      	lsls	r2, r2, #2
 800df6e:	1aad      	subs	r5, r5, r2
 800df70:	6843      	ldr	r3, [r0, #4]
 800df72:	6804      	ldr	r4, [r0, #0]
 800df74:	001e      	movs	r6, r3
 800df76:	40ae      	lsls	r6, r5
 800df78:	40d3      	lsrs	r3, r2
 800df7a:	4334      	orrs	r4, r6
 800df7c:	6004      	str	r4, [r0, #0]
 800df7e:	6043      	str	r3, [r0, #4]
 800df80:	3004      	adds	r0, #4
 800df82:	4288      	cmp	r0, r1
 800df84:	d3f4      	bcc.n	800df70 <L_shift+0xc>
 800df86:	bd70      	pop	{r4, r5, r6, pc}

0800df88 <__match>:
 800df88:	b530      	push	{r4, r5, lr}
 800df8a:	6803      	ldr	r3, [r0, #0]
 800df8c:	780c      	ldrb	r4, [r1, #0]
 800df8e:	3301      	adds	r3, #1
 800df90:	2c00      	cmp	r4, #0
 800df92:	d102      	bne.n	800df9a <__match+0x12>
 800df94:	6003      	str	r3, [r0, #0]
 800df96:	2001      	movs	r0, #1
 800df98:	bd30      	pop	{r4, r5, pc}
 800df9a:	781a      	ldrb	r2, [r3, #0]
 800df9c:	0015      	movs	r5, r2
 800df9e:	3d41      	subs	r5, #65	; 0x41
 800dfa0:	2d19      	cmp	r5, #25
 800dfa2:	d800      	bhi.n	800dfa6 <__match+0x1e>
 800dfa4:	3220      	adds	r2, #32
 800dfa6:	3101      	adds	r1, #1
 800dfa8:	42a2      	cmp	r2, r4
 800dfaa:	d0ef      	beq.n	800df8c <__match+0x4>
 800dfac:	2000      	movs	r0, #0
 800dfae:	e7f3      	b.n	800df98 <__match+0x10>

0800dfb0 <__hexnan>:
 800dfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfb2:	680b      	ldr	r3, [r1, #0]
 800dfb4:	b08b      	sub	sp, #44	; 0x2c
 800dfb6:	9201      	str	r2, [sp, #4]
 800dfb8:	9901      	ldr	r1, [sp, #4]
 800dfba:	115a      	asrs	r2, r3, #5
 800dfbc:	0092      	lsls	r2, r2, #2
 800dfbe:	188a      	adds	r2, r1, r2
 800dfc0:	9202      	str	r2, [sp, #8]
 800dfc2:	0019      	movs	r1, r3
 800dfc4:	221f      	movs	r2, #31
 800dfc6:	4011      	ands	r1, r2
 800dfc8:	9008      	str	r0, [sp, #32]
 800dfca:	9106      	str	r1, [sp, #24]
 800dfcc:	4213      	tst	r3, r2
 800dfce:	d002      	beq.n	800dfd6 <__hexnan+0x26>
 800dfd0:	9b02      	ldr	r3, [sp, #8]
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	9302      	str	r3, [sp, #8]
 800dfd6:	9b02      	ldr	r3, [sp, #8]
 800dfd8:	2500      	movs	r5, #0
 800dfda:	1f1f      	subs	r7, r3, #4
 800dfdc:	003e      	movs	r6, r7
 800dfde:	003c      	movs	r4, r7
 800dfe0:	9b08      	ldr	r3, [sp, #32]
 800dfe2:	603d      	str	r5, [r7, #0]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	9507      	str	r5, [sp, #28]
 800dfe8:	9305      	str	r3, [sp, #20]
 800dfea:	9503      	str	r5, [sp, #12]
 800dfec:	9b05      	ldr	r3, [sp, #20]
 800dfee:	3301      	adds	r3, #1
 800dff0:	9309      	str	r3, [sp, #36]	; 0x24
 800dff2:	9b05      	ldr	r3, [sp, #20]
 800dff4:	785b      	ldrb	r3, [r3, #1]
 800dff6:	9304      	str	r3, [sp, #16]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d028      	beq.n	800e04e <__hexnan+0x9e>
 800dffc:	9804      	ldr	r0, [sp, #16]
 800dffe:	f7ff fd77 	bl	800daf0 <__hexdig_fun>
 800e002:	2800      	cmp	r0, #0
 800e004:	d154      	bne.n	800e0b0 <__hexnan+0x100>
 800e006:	9b04      	ldr	r3, [sp, #16]
 800e008:	2b20      	cmp	r3, #32
 800e00a:	d819      	bhi.n	800e040 <__hexnan+0x90>
 800e00c:	9b03      	ldr	r3, [sp, #12]
 800e00e:	9a07      	ldr	r2, [sp, #28]
 800e010:	4293      	cmp	r3, r2
 800e012:	dd12      	ble.n	800e03a <__hexnan+0x8a>
 800e014:	42b4      	cmp	r4, r6
 800e016:	d206      	bcs.n	800e026 <__hexnan+0x76>
 800e018:	2d07      	cmp	r5, #7
 800e01a:	dc04      	bgt.n	800e026 <__hexnan+0x76>
 800e01c:	002a      	movs	r2, r5
 800e01e:	0031      	movs	r1, r6
 800e020:	0020      	movs	r0, r4
 800e022:	f7ff ff9f 	bl	800df64 <L_shift>
 800e026:	9b01      	ldr	r3, [sp, #4]
 800e028:	2508      	movs	r5, #8
 800e02a:	429c      	cmp	r4, r3
 800e02c:	d905      	bls.n	800e03a <__hexnan+0x8a>
 800e02e:	1f26      	subs	r6, r4, #4
 800e030:	2500      	movs	r5, #0
 800e032:	0034      	movs	r4, r6
 800e034:	9b03      	ldr	r3, [sp, #12]
 800e036:	6035      	str	r5, [r6, #0]
 800e038:	9307      	str	r3, [sp, #28]
 800e03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e03c:	9305      	str	r3, [sp, #20]
 800e03e:	e7d5      	b.n	800dfec <__hexnan+0x3c>
 800e040:	9b04      	ldr	r3, [sp, #16]
 800e042:	2b29      	cmp	r3, #41	; 0x29
 800e044:	d159      	bne.n	800e0fa <__hexnan+0x14a>
 800e046:	9b05      	ldr	r3, [sp, #20]
 800e048:	9a08      	ldr	r2, [sp, #32]
 800e04a:	3302      	adds	r3, #2
 800e04c:	6013      	str	r3, [r2, #0]
 800e04e:	9b03      	ldr	r3, [sp, #12]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d052      	beq.n	800e0fa <__hexnan+0x14a>
 800e054:	42b4      	cmp	r4, r6
 800e056:	d206      	bcs.n	800e066 <__hexnan+0xb6>
 800e058:	2d07      	cmp	r5, #7
 800e05a:	dc04      	bgt.n	800e066 <__hexnan+0xb6>
 800e05c:	002a      	movs	r2, r5
 800e05e:	0031      	movs	r1, r6
 800e060:	0020      	movs	r0, r4
 800e062:	f7ff ff7f 	bl	800df64 <L_shift>
 800e066:	9b01      	ldr	r3, [sp, #4]
 800e068:	429c      	cmp	r4, r3
 800e06a:	d935      	bls.n	800e0d8 <__hexnan+0x128>
 800e06c:	001a      	movs	r2, r3
 800e06e:	0023      	movs	r3, r4
 800e070:	cb02      	ldmia	r3!, {r1}
 800e072:	c202      	stmia	r2!, {r1}
 800e074:	429f      	cmp	r7, r3
 800e076:	d2fb      	bcs.n	800e070 <__hexnan+0xc0>
 800e078:	9b02      	ldr	r3, [sp, #8]
 800e07a:	1c62      	adds	r2, r4, #1
 800e07c:	1ed9      	subs	r1, r3, #3
 800e07e:	2304      	movs	r3, #4
 800e080:	4291      	cmp	r1, r2
 800e082:	d305      	bcc.n	800e090 <__hexnan+0xe0>
 800e084:	9b02      	ldr	r3, [sp, #8]
 800e086:	3b04      	subs	r3, #4
 800e088:	1b1b      	subs	r3, r3, r4
 800e08a:	089b      	lsrs	r3, r3, #2
 800e08c:	3301      	adds	r3, #1
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	9a01      	ldr	r2, [sp, #4]
 800e092:	18d3      	adds	r3, r2, r3
 800e094:	2200      	movs	r2, #0
 800e096:	c304      	stmia	r3!, {r2}
 800e098:	429f      	cmp	r7, r3
 800e09a:	d2fc      	bcs.n	800e096 <__hexnan+0xe6>
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d104      	bne.n	800e0ac <__hexnan+0xfc>
 800e0a2:	9b01      	ldr	r3, [sp, #4]
 800e0a4:	429f      	cmp	r7, r3
 800e0a6:	d126      	bne.n	800e0f6 <__hexnan+0x146>
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	603b      	str	r3, [r7, #0]
 800e0ac:	2005      	movs	r0, #5
 800e0ae:	e025      	b.n	800e0fc <__hexnan+0x14c>
 800e0b0:	9b03      	ldr	r3, [sp, #12]
 800e0b2:	3501      	adds	r5, #1
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	9303      	str	r3, [sp, #12]
 800e0b8:	2d08      	cmp	r5, #8
 800e0ba:	dd06      	ble.n	800e0ca <__hexnan+0x11a>
 800e0bc:	9b01      	ldr	r3, [sp, #4]
 800e0be:	429c      	cmp	r4, r3
 800e0c0:	d9bb      	bls.n	800e03a <__hexnan+0x8a>
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	2501      	movs	r5, #1
 800e0c6:	3c04      	subs	r4, #4
 800e0c8:	6023      	str	r3, [r4, #0]
 800e0ca:	220f      	movs	r2, #15
 800e0cc:	6823      	ldr	r3, [r4, #0]
 800e0ce:	4010      	ands	r0, r2
 800e0d0:	011b      	lsls	r3, r3, #4
 800e0d2:	4303      	orrs	r3, r0
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	e7b0      	b.n	800e03a <__hexnan+0x8a>
 800e0d8:	9b06      	ldr	r3, [sp, #24]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d0de      	beq.n	800e09c <__hexnan+0xec>
 800e0de:	2320      	movs	r3, #32
 800e0e0:	9a06      	ldr	r2, [sp, #24]
 800e0e2:	9902      	ldr	r1, [sp, #8]
 800e0e4:	1a9b      	subs	r3, r3, r2
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	4252      	negs	r2, r2
 800e0ea:	40da      	lsrs	r2, r3
 800e0ec:	3904      	subs	r1, #4
 800e0ee:	680b      	ldr	r3, [r1, #0]
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	600b      	str	r3, [r1, #0]
 800e0f4:	e7d2      	b.n	800e09c <__hexnan+0xec>
 800e0f6:	3f04      	subs	r7, #4
 800e0f8:	e7d0      	b.n	800e09c <__hexnan+0xec>
 800e0fa:	2004      	movs	r0, #4
 800e0fc:	b00b      	add	sp, #44	; 0x2c
 800e0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e100 <__ascii_mbtowc>:
 800e100:	b082      	sub	sp, #8
 800e102:	2900      	cmp	r1, #0
 800e104:	d100      	bne.n	800e108 <__ascii_mbtowc+0x8>
 800e106:	a901      	add	r1, sp, #4
 800e108:	1e10      	subs	r0, r2, #0
 800e10a:	d006      	beq.n	800e11a <__ascii_mbtowc+0x1a>
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d006      	beq.n	800e11e <__ascii_mbtowc+0x1e>
 800e110:	7813      	ldrb	r3, [r2, #0]
 800e112:	600b      	str	r3, [r1, #0]
 800e114:	7810      	ldrb	r0, [r2, #0]
 800e116:	1e43      	subs	r3, r0, #1
 800e118:	4198      	sbcs	r0, r3
 800e11a:	b002      	add	sp, #8
 800e11c:	4770      	bx	lr
 800e11e:	2002      	movs	r0, #2
 800e120:	4240      	negs	r0, r0
 800e122:	e7fa      	b.n	800e11a <__ascii_mbtowc+0x1a>

0800e124 <_realloc_r>:
 800e124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e126:	0007      	movs	r7, r0
 800e128:	000e      	movs	r6, r1
 800e12a:	0014      	movs	r4, r2
 800e12c:	2900      	cmp	r1, #0
 800e12e:	d105      	bne.n	800e13c <_realloc_r+0x18>
 800e130:	0011      	movs	r1, r2
 800e132:	f7fd fddd 	bl	800bcf0 <_malloc_r>
 800e136:	0005      	movs	r5, r0
 800e138:	0028      	movs	r0, r5
 800e13a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e13c:	2a00      	cmp	r2, #0
 800e13e:	d103      	bne.n	800e148 <_realloc_r+0x24>
 800e140:	f7fd fd60 	bl	800bc04 <_free_r>
 800e144:	0025      	movs	r5, r4
 800e146:	e7f7      	b.n	800e138 <_realloc_r+0x14>
 800e148:	f000 f83f 	bl	800e1ca <_malloc_usable_size_r>
 800e14c:	9001      	str	r0, [sp, #4]
 800e14e:	4284      	cmp	r4, r0
 800e150:	d803      	bhi.n	800e15a <_realloc_r+0x36>
 800e152:	0035      	movs	r5, r6
 800e154:	0843      	lsrs	r3, r0, #1
 800e156:	42a3      	cmp	r3, r4
 800e158:	d3ee      	bcc.n	800e138 <_realloc_r+0x14>
 800e15a:	0021      	movs	r1, r4
 800e15c:	0038      	movs	r0, r7
 800e15e:	f7fd fdc7 	bl	800bcf0 <_malloc_r>
 800e162:	1e05      	subs	r5, r0, #0
 800e164:	d0e8      	beq.n	800e138 <_realloc_r+0x14>
 800e166:	9b01      	ldr	r3, [sp, #4]
 800e168:	0022      	movs	r2, r4
 800e16a:	429c      	cmp	r4, r3
 800e16c:	d900      	bls.n	800e170 <_realloc_r+0x4c>
 800e16e:	001a      	movs	r2, r3
 800e170:	0031      	movs	r1, r6
 800e172:	0028      	movs	r0, r5
 800e174:	f7ff fc0c 	bl	800d990 <memcpy>
 800e178:	0031      	movs	r1, r6
 800e17a:	0038      	movs	r0, r7
 800e17c:	f7fd fd42 	bl	800bc04 <_free_r>
 800e180:	e7da      	b.n	800e138 <_realloc_r+0x14>

0800e182 <__ascii_wctomb>:
 800e182:	0003      	movs	r3, r0
 800e184:	1e08      	subs	r0, r1, #0
 800e186:	d005      	beq.n	800e194 <__ascii_wctomb+0x12>
 800e188:	2aff      	cmp	r2, #255	; 0xff
 800e18a:	d904      	bls.n	800e196 <__ascii_wctomb+0x14>
 800e18c:	228a      	movs	r2, #138	; 0x8a
 800e18e:	2001      	movs	r0, #1
 800e190:	601a      	str	r2, [r3, #0]
 800e192:	4240      	negs	r0, r0
 800e194:	4770      	bx	lr
 800e196:	2001      	movs	r0, #1
 800e198:	700a      	strb	r2, [r1, #0]
 800e19a:	e7fb      	b.n	800e194 <__ascii_wctomb+0x12>

0800e19c <fiprintf>:
 800e19c:	b40e      	push	{r1, r2, r3}
 800e19e:	b517      	push	{r0, r1, r2, r4, lr}
 800e1a0:	4c05      	ldr	r4, [pc, #20]	; (800e1b8 <fiprintf+0x1c>)
 800e1a2:	ab05      	add	r3, sp, #20
 800e1a4:	cb04      	ldmia	r3!, {r2}
 800e1a6:	0001      	movs	r1, r0
 800e1a8:	6820      	ldr	r0, [r4, #0]
 800e1aa:	9301      	str	r3, [sp, #4]
 800e1ac:	f000 f83c 	bl	800e228 <_vfiprintf_r>
 800e1b0:	bc1e      	pop	{r1, r2, r3, r4}
 800e1b2:	bc08      	pop	{r3}
 800e1b4:	b003      	add	sp, #12
 800e1b6:	4718      	bx	r3
 800e1b8:	2000007c 	.word	0x2000007c

0800e1bc <abort>:
 800e1bc:	2006      	movs	r0, #6
 800e1be:	b510      	push	{r4, lr}
 800e1c0:	f000 fa1e 	bl	800e600 <raise>
 800e1c4:	2001      	movs	r0, #1
 800e1c6:	f7f6 f930 	bl	800442a <_exit>

0800e1ca <_malloc_usable_size_r>:
 800e1ca:	1f0b      	subs	r3, r1, #4
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	1f18      	subs	r0, r3, #4
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	da01      	bge.n	800e1d8 <_malloc_usable_size_r+0xe>
 800e1d4:	580b      	ldr	r3, [r1, r0]
 800e1d6:	18c0      	adds	r0, r0, r3
 800e1d8:	4770      	bx	lr

0800e1da <__sfputc_r>:
 800e1da:	6893      	ldr	r3, [r2, #8]
 800e1dc:	b510      	push	{r4, lr}
 800e1de:	3b01      	subs	r3, #1
 800e1e0:	6093      	str	r3, [r2, #8]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	da04      	bge.n	800e1f0 <__sfputc_r+0x16>
 800e1e6:	6994      	ldr	r4, [r2, #24]
 800e1e8:	42a3      	cmp	r3, r4
 800e1ea:	db07      	blt.n	800e1fc <__sfputc_r+0x22>
 800e1ec:	290a      	cmp	r1, #10
 800e1ee:	d005      	beq.n	800e1fc <__sfputc_r+0x22>
 800e1f0:	6813      	ldr	r3, [r2, #0]
 800e1f2:	1c58      	adds	r0, r3, #1
 800e1f4:	6010      	str	r0, [r2, #0]
 800e1f6:	7019      	strb	r1, [r3, #0]
 800e1f8:	0008      	movs	r0, r1
 800e1fa:	bd10      	pop	{r4, pc}
 800e1fc:	f000 f930 	bl	800e460 <__swbuf_r>
 800e200:	0001      	movs	r1, r0
 800e202:	e7f9      	b.n	800e1f8 <__sfputc_r+0x1e>

0800e204 <__sfputs_r>:
 800e204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e206:	0006      	movs	r6, r0
 800e208:	000f      	movs	r7, r1
 800e20a:	0014      	movs	r4, r2
 800e20c:	18d5      	adds	r5, r2, r3
 800e20e:	42ac      	cmp	r4, r5
 800e210:	d101      	bne.n	800e216 <__sfputs_r+0x12>
 800e212:	2000      	movs	r0, #0
 800e214:	e007      	b.n	800e226 <__sfputs_r+0x22>
 800e216:	7821      	ldrb	r1, [r4, #0]
 800e218:	003a      	movs	r2, r7
 800e21a:	0030      	movs	r0, r6
 800e21c:	f7ff ffdd 	bl	800e1da <__sfputc_r>
 800e220:	3401      	adds	r4, #1
 800e222:	1c43      	adds	r3, r0, #1
 800e224:	d1f3      	bne.n	800e20e <__sfputs_r+0xa>
 800e226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e228 <_vfiprintf_r>:
 800e228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e22a:	b0a1      	sub	sp, #132	; 0x84
 800e22c:	000f      	movs	r7, r1
 800e22e:	0015      	movs	r5, r2
 800e230:	001e      	movs	r6, r3
 800e232:	9003      	str	r0, [sp, #12]
 800e234:	2800      	cmp	r0, #0
 800e236:	d004      	beq.n	800e242 <_vfiprintf_r+0x1a>
 800e238:	6a03      	ldr	r3, [r0, #32]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d101      	bne.n	800e242 <_vfiprintf_r+0x1a>
 800e23e:	f7fc fcd9 	bl	800abf4 <__sinit>
 800e242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e244:	07db      	lsls	r3, r3, #31
 800e246:	d405      	bmi.n	800e254 <_vfiprintf_r+0x2c>
 800e248:	89bb      	ldrh	r3, [r7, #12]
 800e24a:	059b      	lsls	r3, r3, #22
 800e24c:	d402      	bmi.n	800e254 <_vfiprintf_r+0x2c>
 800e24e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e250:	f7fc fe29 	bl	800aea6 <__retarget_lock_acquire_recursive>
 800e254:	89bb      	ldrh	r3, [r7, #12]
 800e256:	071b      	lsls	r3, r3, #28
 800e258:	d502      	bpl.n	800e260 <_vfiprintf_r+0x38>
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d113      	bne.n	800e288 <_vfiprintf_r+0x60>
 800e260:	0039      	movs	r1, r7
 800e262:	9803      	ldr	r0, [sp, #12]
 800e264:	f000 f93e 	bl	800e4e4 <__swsetup_r>
 800e268:	2800      	cmp	r0, #0
 800e26a:	d00d      	beq.n	800e288 <_vfiprintf_r+0x60>
 800e26c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e26e:	07db      	lsls	r3, r3, #31
 800e270:	d503      	bpl.n	800e27a <_vfiprintf_r+0x52>
 800e272:	2001      	movs	r0, #1
 800e274:	4240      	negs	r0, r0
 800e276:	b021      	add	sp, #132	; 0x84
 800e278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e27a:	89bb      	ldrh	r3, [r7, #12]
 800e27c:	059b      	lsls	r3, r3, #22
 800e27e:	d4f8      	bmi.n	800e272 <_vfiprintf_r+0x4a>
 800e280:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e282:	f7fc fe11 	bl	800aea8 <__retarget_lock_release_recursive>
 800e286:	e7f4      	b.n	800e272 <_vfiprintf_r+0x4a>
 800e288:	2300      	movs	r3, #0
 800e28a:	ac08      	add	r4, sp, #32
 800e28c:	6163      	str	r3, [r4, #20]
 800e28e:	3320      	adds	r3, #32
 800e290:	7663      	strb	r3, [r4, #25]
 800e292:	3310      	adds	r3, #16
 800e294:	76a3      	strb	r3, [r4, #26]
 800e296:	9607      	str	r6, [sp, #28]
 800e298:	002e      	movs	r6, r5
 800e29a:	7833      	ldrb	r3, [r6, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d001      	beq.n	800e2a4 <_vfiprintf_r+0x7c>
 800e2a0:	2b25      	cmp	r3, #37	; 0x25
 800e2a2:	d148      	bne.n	800e336 <_vfiprintf_r+0x10e>
 800e2a4:	1b73      	subs	r3, r6, r5
 800e2a6:	9305      	str	r3, [sp, #20]
 800e2a8:	42ae      	cmp	r6, r5
 800e2aa:	d00b      	beq.n	800e2c4 <_vfiprintf_r+0x9c>
 800e2ac:	002a      	movs	r2, r5
 800e2ae:	0039      	movs	r1, r7
 800e2b0:	9803      	ldr	r0, [sp, #12]
 800e2b2:	f7ff ffa7 	bl	800e204 <__sfputs_r>
 800e2b6:	3001      	adds	r0, #1
 800e2b8:	d100      	bne.n	800e2bc <_vfiprintf_r+0x94>
 800e2ba:	e0af      	b.n	800e41c <_vfiprintf_r+0x1f4>
 800e2bc:	6963      	ldr	r3, [r4, #20]
 800e2be:	9a05      	ldr	r2, [sp, #20]
 800e2c0:	189b      	adds	r3, r3, r2
 800e2c2:	6163      	str	r3, [r4, #20]
 800e2c4:	7833      	ldrb	r3, [r6, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d100      	bne.n	800e2cc <_vfiprintf_r+0xa4>
 800e2ca:	e0a7      	b.n	800e41c <_vfiprintf_r+0x1f4>
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	4252      	negs	r2, r2
 800e2d2:	6062      	str	r2, [r4, #4]
 800e2d4:	a904      	add	r1, sp, #16
 800e2d6:	3254      	adds	r2, #84	; 0x54
 800e2d8:	1852      	adds	r2, r2, r1
 800e2da:	1c75      	adds	r5, r6, #1
 800e2dc:	6023      	str	r3, [r4, #0]
 800e2de:	60e3      	str	r3, [r4, #12]
 800e2e0:	60a3      	str	r3, [r4, #8]
 800e2e2:	7013      	strb	r3, [r2, #0]
 800e2e4:	65a3      	str	r3, [r4, #88]	; 0x58
 800e2e6:	4b59      	ldr	r3, [pc, #356]	; (800e44c <_vfiprintf_r+0x224>)
 800e2e8:	2205      	movs	r2, #5
 800e2ea:	0018      	movs	r0, r3
 800e2ec:	7829      	ldrb	r1, [r5, #0]
 800e2ee:	9305      	str	r3, [sp, #20]
 800e2f0:	f7fc fddb 	bl	800aeaa <memchr>
 800e2f4:	1c6e      	adds	r6, r5, #1
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	d11f      	bne.n	800e33a <_vfiprintf_r+0x112>
 800e2fa:	6822      	ldr	r2, [r4, #0]
 800e2fc:	06d3      	lsls	r3, r2, #27
 800e2fe:	d504      	bpl.n	800e30a <_vfiprintf_r+0xe2>
 800e300:	2353      	movs	r3, #83	; 0x53
 800e302:	a904      	add	r1, sp, #16
 800e304:	185b      	adds	r3, r3, r1
 800e306:	2120      	movs	r1, #32
 800e308:	7019      	strb	r1, [r3, #0]
 800e30a:	0713      	lsls	r3, r2, #28
 800e30c:	d504      	bpl.n	800e318 <_vfiprintf_r+0xf0>
 800e30e:	2353      	movs	r3, #83	; 0x53
 800e310:	a904      	add	r1, sp, #16
 800e312:	185b      	adds	r3, r3, r1
 800e314:	212b      	movs	r1, #43	; 0x2b
 800e316:	7019      	strb	r1, [r3, #0]
 800e318:	782b      	ldrb	r3, [r5, #0]
 800e31a:	2b2a      	cmp	r3, #42	; 0x2a
 800e31c:	d016      	beq.n	800e34c <_vfiprintf_r+0x124>
 800e31e:	002e      	movs	r6, r5
 800e320:	2100      	movs	r1, #0
 800e322:	200a      	movs	r0, #10
 800e324:	68e3      	ldr	r3, [r4, #12]
 800e326:	7832      	ldrb	r2, [r6, #0]
 800e328:	1c75      	adds	r5, r6, #1
 800e32a:	3a30      	subs	r2, #48	; 0x30
 800e32c:	2a09      	cmp	r2, #9
 800e32e:	d94e      	bls.n	800e3ce <_vfiprintf_r+0x1a6>
 800e330:	2900      	cmp	r1, #0
 800e332:	d111      	bne.n	800e358 <_vfiprintf_r+0x130>
 800e334:	e017      	b.n	800e366 <_vfiprintf_r+0x13e>
 800e336:	3601      	adds	r6, #1
 800e338:	e7af      	b.n	800e29a <_vfiprintf_r+0x72>
 800e33a:	9b05      	ldr	r3, [sp, #20]
 800e33c:	6822      	ldr	r2, [r4, #0]
 800e33e:	1ac0      	subs	r0, r0, r3
 800e340:	2301      	movs	r3, #1
 800e342:	4083      	lsls	r3, r0
 800e344:	4313      	orrs	r3, r2
 800e346:	0035      	movs	r5, r6
 800e348:	6023      	str	r3, [r4, #0]
 800e34a:	e7cc      	b.n	800e2e6 <_vfiprintf_r+0xbe>
 800e34c:	9b07      	ldr	r3, [sp, #28]
 800e34e:	1d19      	adds	r1, r3, #4
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	9107      	str	r1, [sp, #28]
 800e354:	2b00      	cmp	r3, #0
 800e356:	db01      	blt.n	800e35c <_vfiprintf_r+0x134>
 800e358:	930b      	str	r3, [sp, #44]	; 0x2c
 800e35a:	e004      	b.n	800e366 <_vfiprintf_r+0x13e>
 800e35c:	425b      	negs	r3, r3
 800e35e:	60e3      	str	r3, [r4, #12]
 800e360:	2302      	movs	r3, #2
 800e362:	4313      	orrs	r3, r2
 800e364:	6023      	str	r3, [r4, #0]
 800e366:	7833      	ldrb	r3, [r6, #0]
 800e368:	2b2e      	cmp	r3, #46	; 0x2e
 800e36a:	d10a      	bne.n	800e382 <_vfiprintf_r+0x15a>
 800e36c:	7873      	ldrb	r3, [r6, #1]
 800e36e:	2b2a      	cmp	r3, #42	; 0x2a
 800e370:	d135      	bne.n	800e3de <_vfiprintf_r+0x1b6>
 800e372:	9b07      	ldr	r3, [sp, #28]
 800e374:	3602      	adds	r6, #2
 800e376:	1d1a      	adds	r2, r3, #4
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	9207      	str	r2, [sp, #28]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	db2b      	blt.n	800e3d8 <_vfiprintf_r+0x1b0>
 800e380:	9309      	str	r3, [sp, #36]	; 0x24
 800e382:	4d33      	ldr	r5, [pc, #204]	; (800e450 <_vfiprintf_r+0x228>)
 800e384:	2203      	movs	r2, #3
 800e386:	0028      	movs	r0, r5
 800e388:	7831      	ldrb	r1, [r6, #0]
 800e38a:	f7fc fd8e 	bl	800aeaa <memchr>
 800e38e:	2800      	cmp	r0, #0
 800e390:	d006      	beq.n	800e3a0 <_vfiprintf_r+0x178>
 800e392:	2340      	movs	r3, #64	; 0x40
 800e394:	1b40      	subs	r0, r0, r5
 800e396:	4083      	lsls	r3, r0
 800e398:	6822      	ldr	r2, [r4, #0]
 800e39a:	3601      	adds	r6, #1
 800e39c:	4313      	orrs	r3, r2
 800e39e:	6023      	str	r3, [r4, #0]
 800e3a0:	7831      	ldrb	r1, [r6, #0]
 800e3a2:	2206      	movs	r2, #6
 800e3a4:	482b      	ldr	r0, [pc, #172]	; (800e454 <_vfiprintf_r+0x22c>)
 800e3a6:	1c75      	adds	r5, r6, #1
 800e3a8:	7621      	strb	r1, [r4, #24]
 800e3aa:	f7fc fd7e 	bl	800aeaa <memchr>
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d043      	beq.n	800e43a <_vfiprintf_r+0x212>
 800e3b2:	4b29      	ldr	r3, [pc, #164]	; (800e458 <_vfiprintf_r+0x230>)
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d125      	bne.n	800e404 <_vfiprintf_r+0x1dc>
 800e3b8:	2207      	movs	r2, #7
 800e3ba:	9b07      	ldr	r3, [sp, #28]
 800e3bc:	3307      	adds	r3, #7
 800e3be:	4393      	bics	r3, r2
 800e3c0:	3308      	adds	r3, #8
 800e3c2:	9307      	str	r3, [sp, #28]
 800e3c4:	6963      	ldr	r3, [r4, #20]
 800e3c6:	9a04      	ldr	r2, [sp, #16]
 800e3c8:	189b      	adds	r3, r3, r2
 800e3ca:	6163      	str	r3, [r4, #20]
 800e3cc:	e764      	b.n	800e298 <_vfiprintf_r+0x70>
 800e3ce:	4343      	muls	r3, r0
 800e3d0:	002e      	movs	r6, r5
 800e3d2:	2101      	movs	r1, #1
 800e3d4:	189b      	adds	r3, r3, r2
 800e3d6:	e7a6      	b.n	800e326 <_vfiprintf_r+0xfe>
 800e3d8:	2301      	movs	r3, #1
 800e3da:	425b      	negs	r3, r3
 800e3dc:	e7d0      	b.n	800e380 <_vfiprintf_r+0x158>
 800e3de:	2300      	movs	r3, #0
 800e3e0:	200a      	movs	r0, #10
 800e3e2:	001a      	movs	r2, r3
 800e3e4:	3601      	adds	r6, #1
 800e3e6:	6063      	str	r3, [r4, #4]
 800e3e8:	7831      	ldrb	r1, [r6, #0]
 800e3ea:	1c75      	adds	r5, r6, #1
 800e3ec:	3930      	subs	r1, #48	; 0x30
 800e3ee:	2909      	cmp	r1, #9
 800e3f0:	d903      	bls.n	800e3fa <_vfiprintf_r+0x1d2>
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d0c5      	beq.n	800e382 <_vfiprintf_r+0x15a>
 800e3f6:	9209      	str	r2, [sp, #36]	; 0x24
 800e3f8:	e7c3      	b.n	800e382 <_vfiprintf_r+0x15a>
 800e3fa:	4342      	muls	r2, r0
 800e3fc:	002e      	movs	r6, r5
 800e3fe:	2301      	movs	r3, #1
 800e400:	1852      	adds	r2, r2, r1
 800e402:	e7f1      	b.n	800e3e8 <_vfiprintf_r+0x1c0>
 800e404:	aa07      	add	r2, sp, #28
 800e406:	9200      	str	r2, [sp, #0]
 800e408:	0021      	movs	r1, r4
 800e40a:	003a      	movs	r2, r7
 800e40c:	4b13      	ldr	r3, [pc, #76]	; (800e45c <_vfiprintf_r+0x234>)
 800e40e:	9803      	ldr	r0, [sp, #12]
 800e410:	f7fb fd82 	bl	8009f18 <_printf_float>
 800e414:	9004      	str	r0, [sp, #16]
 800e416:	9b04      	ldr	r3, [sp, #16]
 800e418:	3301      	adds	r3, #1
 800e41a:	d1d3      	bne.n	800e3c4 <_vfiprintf_r+0x19c>
 800e41c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e41e:	07db      	lsls	r3, r3, #31
 800e420:	d405      	bmi.n	800e42e <_vfiprintf_r+0x206>
 800e422:	89bb      	ldrh	r3, [r7, #12]
 800e424:	059b      	lsls	r3, r3, #22
 800e426:	d402      	bmi.n	800e42e <_vfiprintf_r+0x206>
 800e428:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e42a:	f7fc fd3d 	bl	800aea8 <__retarget_lock_release_recursive>
 800e42e:	89bb      	ldrh	r3, [r7, #12]
 800e430:	065b      	lsls	r3, r3, #25
 800e432:	d500      	bpl.n	800e436 <_vfiprintf_r+0x20e>
 800e434:	e71d      	b.n	800e272 <_vfiprintf_r+0x4a>
 800e436:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e438:	e71d      	b.n	800e276 <_vfiprintf_r+0x4e>
 800e43a:	aa07      	add	r2, sp, #28
 800e43c:	9200      	str	r2, [sp, #0]
 800e43e:	0021      	movs	r1, r4
 800e440:	003a      	movs	r2, r7
 800e442:	4b06      	ldr	r3, [pc, #24]	; (800e45c <_vfiprintf_r+0x234>)
 800e444:	9803      	ldr	r0, [sp, #12]
 800e446:	f7fc f82d 	bl	800a4a4 <_printf_i>
 800e44a:	e7e3      	b.n	800e414 <_vfiprintf_r+0x1ec>
 800e44c:	0800f0d9 	.word	0x0800f0d9
 800e450:	0800f0df 	.word	0x0800f0df
 800e454:	0800f0e3 	.word	0x0800f0e3
 800e458:	08009f19 	.word	0x08009f19
 800e45c:	0800e205 	.word	0x0800e205

0800e460 <__swbuf_r>:
 800e460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e462:	0006      	movs	r6, r0
 800e464:	000d      	movs	r5, r1
 800e466:	0014      	movs	r4, r2
 800e468:	2800      	cmp	r0, #0
 800e46a:	d004      	beq.n	800e476 <__swbuf_r+0x16>
 800e46c:	6a03      	ldr	r3, [r0, #32]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <__swbuf_r+0x16>
 800e472:	f7fc fbbf 	bl	800abf4 <__sinit>
 800e476:	69a3      	ldr	r3, [r4, #24]
 800e478:	60a3      	str	r3, [r4, #8]
 800e47a:	89a3      	ldrh	r3, [r4, #12]
 800e47c:	071b      	lsls	r3, r3, #28
 800e47e:	d528      	bpl.n	800e4d2 <__swbuf_r+0x72>
 800e480:	6923      	ldr	r3, [r4, #16]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d025      	beq.n	800e4d2 <__swbuf_r+0x72>
 800e486:	6923      	ldr	r3, [r4, #16]
 800e488:	6820      	ldr	r0, [r4, #0]
 800e48a:	b2ef      	uxtb	r7, r5
 800e48c:	1ac0      	subs	r0, r0, r3
 800e48e:	6963      	ldr	r3, [r4, #20]
 800e490:	b2ed      	uxtb	r5, r5
 800e492:	4283      	cmp	r3, r0
 800e494:	dc05      	bgt.n	800e4a2 <__swbuf_r+0x42>
 800e496:	0021      	movs	r1, r4
 800e498:	0030      	movs	r0, r6
 800e49a:	f7ff fa17 	bl	800d8cc <_fflush_r>
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d11d      	bne.n	800e4de <__swbuf_r+0x7e>
 800e4a2:	68a3      	ldr	r3, [r4, #8]
 800e4a4:	3001      	adds	r0, #1
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	60a3      	str	r3, [r4, #8]
 800e4aa:	6823      	ldr	r3, [r4, #0]
 800e4ac:	1c5a      	adds	r2, r3, #1
 800e4ae:	6022      	str	r2, [r4, #0]
 800e4b0:	701f      	strb	r7, [r3, #0]
 800e4b2:	6963      	ldr	r3, [r4, #20]
 800e4b4:	4283      	cmp	r3, r0
 800e4b6:	d004      	beq.n	800e4c2 <__swbuf_r+0x62>
 800e4b8:	89a3      	ldrh	r3, [r4, #12]
 800e4ba:	07db      	lsls	r3, r3, #31
 800e4bc:	d507      	bpl.n	800e4ce <__swbuf_r+0x6e>
 800e4be:	2d0a      	cmp	r5, #10
 800e4c0:	d105      	bne.n	800e4ce <__swbuf_r+0x6e>
 800e4c2:	0021      	movs	r1, r4
 800e4c4:	0030      	movs	r0, r6
 800e4c6:	f7ff fa01 	bl	800d8cc <_fflush_r>
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	d107      	bne.n	800e4de <__swbuf_r+0x7e>
 800e4ce:	0028      	movs	r0, r5
 800e4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4d2:	0021      	movs	r1, r4
 800e4d4:	0030      	movs	r0, r6
 800e4d6:	f000 f805 	bl	800e4e4 <__swsetup_r>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	d0d3      	beq.n	800e486 <__swbuf_r+0x26>
 800e4de:	2501      	movs	r5, #1
 800e4e0:	426d      	negs	r5, r5
 800e4e2:	e7f4      	b.n	800e4ce <__swbuf_r+0x6e>

0800e4e4 <__swsetup_r>:
 800e4e4:	4b30      	ldr	r3, [pc, #192]	; (800e5a8 <__swsetup_r+0xc4>)
 800e4e6:	b570      	push	{r4, r5, r6, lr}
 800e4e8:	0005      	movs	r5, r0
 800e4ea:	6818      	ldr	r0, [r3, #0]
 800e4ec:	000c      	movs	r4, r1
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d004      	beq.n	800e4fc <__swsetup_r+0x18>
 800e4f2:	6a03      	ldr	r3, [r0, #32]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d101      	bne.n	800e4fc <__swsetup_r+0x18>
 800e4f8:	f7fc fb7c 	bl	800abf4 <__sinit>
 800e4fc:	230c      	movs	r3, #12
 800e4fe:	5ee2      	ldrsh	r2, [r4, r3]
 800e500:	b293      	uxth	r3, r2
 800e502:	0711      	lsls	r1, r2, #28
 800e504:	d423      	bmi.n	800e54e <__swsetup_r+0x6a>
 800e506:	06d9      	lsls	r1, r3, #27
 800e508:	d407      	bmi.n	800e51a <__swsetup_r+0x36>
 800e50a:	2309      	movs	r3, #9
 800e50c:	2001      	movs	r0, #1
 800e50e:	602b      	str	r3, [r5, #0]
 800e510:	3337      	adds	r3, #55	; 0x37
 800e512:	4313      	orrs	r3, r2
 800e514:	81a3      	strh	r3, [r4, #12]
 800e516:	4240      	negs	r0, r0
 800e518:	bd70      	pop	{r4, r5, r6, pc}
 800e51a:	075b      	lsls	r3, r3, #29
 800e51c:	d513      	bpl.n	800e546 <__swsetup_r+0x62>
 800e51e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e520:	2900      	cmp	r1, #0
 800e522:	d008      	beq.n	800e536 <__swsetup_r+0x52>
 800e524:	0023      	movs	r3, r4
 800e526:	3344      	adds	r3, #68	; 0x44
 800e528:	4299      	cmp	r1, r3
 800e52a:	d002      	beq.n	800e532 <__swsetup_r+0x4e>
 800e52c:	0028      	movs	r0, r5
 800e52e:	f7fd fb69 	bl	800bc04 <_free_r>
 800e532:	2300      	movs	r3, #0
 800e534:	6363      	str	r3, [r4, #52]	; 0x34
 800e536:	2224      	movs	r2, #36	; 0x24
 800e538:	89a3      	ldrh	r3, [r4, #12]
 800e53a:	4393      	bics	r3, r2
 800e53c:	81a3      	strh	r3, [r4, #12]
 800e53e:	2300      	movs	r3, #0
 800e540:	6063      	str	r3, [r4, #4]
 800e542:	6923      	ldr	r3, [r4, #16]
 800e544:	6023      	str	r3, [r4, #0]
 800e546:	2308      	movs	r3, #8
 800e548:	89a2      	ldrh	r2, [r4, #12]
 800e54a:	4313      	orrs	r3, r2
 800e54c:	81a3      	strh	r3, [r4, #12]
 800e54e:	6923      	ldr	r3, [r4, #16]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d10b      	bne.n	800e56c <__swsetup_r+0x88>
 800e554:	21a0      	movs	r1, #160	; 0xa0
 800e556:	2280      	movs	r2, #128	; 0x80
 800e558:	89a3      	ldrh	r3, [r4, #12]
 800e55a:	0089      	lsls	r1, r1, #2
 800e55c:	0092      	lsls	r2, r2, #2
 800e55e:	400b      	ands	r3, r1
 800e560:	4293      	cmp	r3, r2
 800e562:	d003      	beq.n	800e56c <__swsetup_r+0x88>
 800e564:	0021      	movs	r1, r4
 800e566:	0028      	movs	r0, r5
 800e568:	f000 f892 	bl	800e690 <__smakebuf_r>
 800e56c:	220c      	movs	r2, #12
 800e56e:	5ea3      	ldrsh	r3, [r4, r2]
 800e570:	2001      	movs	r0, #1
 800e572:	001a      	movs	r2, r3
 800e574:	b299      	uxth	r1, r3
 800e576:	4002      	ands	r2, r0
 800e578:	4203      	tst	r3, r0
 800e57a:	d00f      	beq.n	800e59c <__swsetup_r+0xb8>
 800e57c:	2200      	movs	r2, #0
 800e57e:	60a2      	str	r2, [r4, #8]
 800e580:	6962      	ldr	r2, [r4, #20]
 800e582:	4252      	negs	r2, r2
 800e584:	61a2      	str	r2, [r4, #24]
 800e586:	2000      	movs	r0, #0
 800e588:	6922      	ldr	r2, [r4, #16]
 800e58a:	4282      	cmp	r2, r0
 800e58c:	d1c4      	bne.n	800e518 <__swsetup_r+0x34>
 800e58e:	0609      	lsls	r1, r1, #24
 800e590:	d5c2      	bpl.n	800e518 <__swsetup_r+0x34>
 800e592:	2240      	movs	r2, #64	; 0x40
 800e594:	4313      	orrs	r3, r2
 800e596:	81a3      	strh	r3, [r4, #12]
 800e598:	3801      	subs	r0, #1
 800e59a:	e7bd      	b.n	800e518 <__swsetup_r+0x34>
 800e59c:	0788      	lsls	r0, r1, #30
 800e59e:	d400      	bmi.n	800e5a2 <__swsetup_r+0xbe>
 800e5a0:	6962      	ldr	r2, [r4, #20]
 800e5a2:	60a2      	str	r2, [r4, #8]
 800e5a4:	e7ef      	b.n	800e586 <__swsetup_r+0xa2>
 800e5a6:	46c0      	nop			; (mov r8, r8)
 800e5a8:	2000007c 	.word	0x2000007c

0800e5ac <_raise_r>:
 800e5ac:	b570      	push	{r4, r5, r6, lr}
 800e5ae:	0004      	movs	r4, r0
 800e5b0:	000d      	movs	r5, r1
 800e5b2:	291f      	cmp	r1, #31
 800e5b4:	d904      	bls.n	800e5c0 <_raise_r+0x14>
 800e5b6:	2316      	movs	r3, #22
 800e5b8:	6003      	str	r3, [r0, #0]
 800e5ba:	2001      	movs	r0, #1
 800e5bc:	4240      	negs	r0, r0
 800e5be:	bd70      	pop	{r4, r5, r6, pc}
 800e5c0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d004      	beq.n	800e5d0 <_raise_r+0x24>
 800e5c6:	008a      	lsls	r2, r1, #2
 800e5c8:	189b      	adds	r3, r3, r2
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	2a00      	cmp	r2, #0
 800e5ce:	d108      	bne.n	800e5e2 <_raise_r+0x36>
 800e5d0:	0020      	movs	r0, r4
 800e5d2:	f000 f831 	bl	800e638 <_getpid_r>
 800e5d6:	002a      	movs	r2, r5
 800e5d8:	0001      	movs	r1, r0
 800e5da:	0020      	movs	r0, r4
 800e5dc:	f000 f81a 	bl	800e614 <_kill_r>
 800e5e0:	e7ed      	b.n	800e5be <_raise_r+0x12>
 800e5e2:	2000      	movs	r0, #0
 800e5e4:	2a01      	cmp	r2, #1
 800e5e6:	d0ea      	beq.n	800e5be <_raise_r+0x12>
 800e5e8:	1c51      	adds	r1, r2, #1
 800e5ea:	d103      	bne.n	800e5f4 <_raise_r+0x48>
 800e5ec:	2316      	movs	r3, #22
 800e5ee:	3001      	adds	r0, #1
 800e5f0:	6023      	str	r3, [r4, #0]
 800e5f2:	e7e4      	b.n	800e5be <_raise_r+0x12>
 800e5f4:	2400      	movs	r4, #0
 800e5f6:	0028      	movs	r0, r5
 800e5f8:	601c      	str	r4, [r3, #0]
 800e5fa:	4790      	blx	r2
 800e5fc:	0020      	movs	r0, r4
 800e5fe:	e7de      	b.n	800e5be <_raise_r+0x12>

0800e600 <raise>:
 800e600:	b510      	push	{r4, lr}
 800e602:	4b03      	ldr	r3, [pc, #12]	; (800e610 <raise+0x10>)
 800e604:	0001      	movs	r1, r0
 800e606:	6818      	ldr	r0, [r3, #0]
 800e608:	f7ff ffd0 	bl	800e5ac <_raise_r>
 800e60c:	bd10      	pop	{r4, pc}
 800e60e:	46c0      	nop			; (mov r8, r8)
 800e610:	2000007c 	.word	0x2000007c

0800e614 <_kill_r>:
 800e614:	2300      	movs	r3, #0
 800e616:	b570      	push	{r4, r5, r6, lr}
 800e618:	4d06      	ldr	r5, [pc, #24]	; (800e634 <_kill_r+0x20>)
 800e61a:	0004      	movs	r4, r0
 800e61c:	0008      	movs	r0, r1
 800e61e:	0011      	movs	r1, r2
 800e620:	602b      	str	r3, [r5, #0]
 800e622:	f7f5 fef2 	bl	800440a <_kill>
 800e626:	1c43      	adds	r3, r0, #1
 800e628:	d103      	bne.n	800e632 <_kill_r+0x1e>
 800e62a:	682b      	ldr	r3, [r5, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d000      	beq.n	800e632 <_kill_r+0x1e>
 800e630:	6023      	str	r3, [r4, #0]
 800e632:	bd70      	pop	{r4, r5, r6, pc}
 800e634:	20000660 	.word	0x20000660

0800e638 <_getpid_r>:
 800e638:	b510      	push	{r4, lr}
 800e63a:	f7f5 fee0 	bl	80043fe <_getpid>
 800e63e:	bd10      	pop	{r4, pc}

0800e640 <__swhatbuf_r>:
 800e640:	b570      	push	{r4, r5, r6, lr}
 800e642:	000e      	movs	r6, r1
 800e644:	001d      	movs	r5, r3
 800e646:	230e      	movs	r3, #14
 800e648:	5ec9      	ldrsh	r1, [r1, r3]
 800e64a:	0014      	movs	r4, r2
 800e64c:	b096      	sub	sp, #88	; 0x58
 800e64e:	2900      	cmp	r1, #0
 800e650:	da0c      	bge.n	800e66c <__swhatbuf_r+0x2c>
 800e652:	89b2      	ldrh	r2, [r6, #12]
 800e654:	2380      	movs	r3, #128	; 0x80
 800e656:	0011      	movs	r1, r2
 800e658:	4019      	ands	r1, r3
 800e65a:	421a      	tst	r2, r3
 800e65c:	d013      	beq.n	800e686 <__swhatbuf_r+0x46>
 800e65e:	2100      	movs	r1, #0
 800e660:	3b40      	subs	r3, #64	; 0x40
 800e662:	2000      	movs	r0, #0
 800e664:	6029      	str	r1, [r5, #0]
 800e666:	6023      	str	r3, [r4, #0]
 800e668:	b016      	add	sp, #88	; 0x58
 800e66a:	bd70      	pop	{r4, r5, r6, pc}
 800e66c:	466a      	mov	r2, sp
 800e66e:	f000 f84d 	bl	800e70c <_fstat_r>
 800e672:	2800      	cmp	r0, #0
 800e674:	dbed      	blt.n	800e652 <__swhatbuf_r+0x12>
 800e676:	23f0      	movs	r3, #240	; 0xf0
 800e678:	9901      	ldr	r1, [sp, #4]
 800e67a:	021b      	lsls	r3, r3, #8
 800e67c:	4019      	ands	r1, r3
 800e67e:	4b03      	ldr	r3, [pc, #12]	; (800e68c <__swhatbuf_r+0x4c>)
 800e680:	18c9      	adds	r1, r1, r3
 800e682:	424b      	negs	r3, r1
 800e684:	4159      	adcs	r1, r3
 800e686:	2380      	movs	r3, #128	; 0x80
 800e688:	00db      	lsls	r3, r3, #3
 800e68a:	e7ea      	b.n	800e662 <__swhatbuf_r+0x22>
 800e68c:	ffffe000 	.word	0xffffe000

0800e690 <__smakebuf_r>:
 800e690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e692:	2602      	movs	r6, #2
 800e694:	898b      	ldrh	r3, [r1, #12]
 800e696:	0005      	movs	r5, r0
 800e698:	000c      	movs	r4, r1
 800e69a:	4233      	tst	r3, r6
 800e69c:	d006      	beq.n	800e6ac <__smakebuf_r+0x1c>
 800e69e:	0023      	movs	r3, r4
 800e6a0:	3347      	adds	r3, #71	; 0x47
 800e6a2:	6023      	str	r3, [r4, #0]
 800e6a4:	6123      	str	r3, [r4, #16]
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	6163      	str	r3, [r4, #20]
 800e6aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e6ac:	466a      	mov	r2, sp
 800e6ae:	ab01      	add	r3, sp, #4
 800e6b0:	f7ff ffc6 	bl	800e640 <__swhatbuf_r>
 800e6b4:	9900      	ldr	r1, [sp, #0]
 800e6b6:	0007      	movs	r7, r0
 800e6b8:	0028      	movs	r0, r5
 800e6ba:	f7fd fb19 	bl	800bcf0 <_malloc_r>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d108      	bne.n	800e6d4 <__smakebuf_r+0x44>
 800e6c2:	220c      	movs	r2, #12
 800e6c4:	5ea3      	ldrsh	r3, [r4, r2]
 800e6c6:	059a      	lsls	r2, r3, #22
 800e6c8:	d4ef      	bmi.n	800e6aa <__smakebuf_r+0x1a>
 800e6ca:	2203      	movs	r2, #3
 800e6cc:	4393      	bics	r3, r2
 800e6ce:	431e      	orrs	r6, r3
 800e6d0:	81a6      	strh	r6, [r4, #12]
 800e6d2:	e7e4      	b.n	800e69e <__smakebuf_r+0xe>
 800e6d4:	2380      	movs	r3, #128	; 0x80
 800e6d6:	89a2      	ldrh	r2, [r4, #12]
 800e6d8:	6020      	str	r0, [r4, #0]
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	81a3      	strh	r3, [r4, #12]
 800e6de:	9b00      	ldr	r3, [sp, #0]
 800e6e0:	6120      	str	r0, [r4, #16]
 800e6e2:	6163      	str	r3, [r4, #20]
 800e6e4:	9b01      	ldr	r3, [sp, #4]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00c      	beq.n	800e704 <__smakebuf_r+0x74>
 800e6ea:	0028      	movs	r0, r5
 800e6ec:	230e      	movs	r3, #14
 800e6ee:	5ee1      	ldrsh	r1, [r4, r3]
 800e6f0:	f000 f81e 	bl	800e730 <_isatty_r>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d005      	beq.n	800e704 <__smakebuf_r+0x74>
 800e6f8:	2303      	movs	r3, #3
 800e6fa:	89a2      	ldrh	r2, [r4, #12]
 800e6fc:	439a      	bics	r2, r3
 800e6fe:	3b02      	subs	r3, #2
 800e700:	4313      	orrs	r3, r2
 800e702:	81a3      	strh	r3, [r4, #12]
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	433b      	orrs	r3, r7
 800e708:	81a3      	strh	r3, [r4, #12]
 800e70a:	e7ce      	b.n	800e6aa <__smakebuf_r+0x1a>

0800e70c <_fstat_r>:
 800e70c:	2300      	movs	r3, #0
 800e70e:	b570      	push	{r4, r5, r6, lr}
 800e710:	4d06      	ldr	r5, [pc, #24]	; (800e72c <_fstat_r+0x20>)
 800e712:	0004      	movs	r4, r0
 800e714:	0008      	movs	r0, r1
 800e716:	0011      	movs	r1, r2
 800e718:	602b      	str	r3, [r5, #0]
 800e71a:	f7f5 fed5 	bl	80044c8 <_fstat>
 800e71e:	1c43      	adds	r3, r0, #1
 800e720:	d103      	bne.n	800e72a <_fstat_r+0x1e>
 800e722:	682b      	ldr	r3, [r5, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d000      	beq.n	800e72a <_fstat_r+0x1e>
 800e728:	6023      	str	r3, [r4, #0]
 800e72a:	bd70      	pop	{r4, r5, r6, pc}
 800e72c:	20000660 	.word	0x20000660

0800e730 <_isatty_r>:
 800e730:	2300      	movs	r3, #0
 800e732:	b570      	push	{r4, r5, r6, lr}
 800e734:	4d06      	ldr	r5, [pc, #24]	; (800e750 <_isatty_r+0x20>)
 800e736:	0004      	movs	r4, r0
 800e738:	0008      	movs	r0, r1
 800e73a:	602b      	str	r3, [r5, #0]
 800e73c:	f7f5 fed2 	bl	80044e4 <_isatty>
 800e740:	1c43      	adds	r3, r0, #1
 800e742:	d103      	bne.n	800e74c <_isatty_r+0x1c>
 800e744:	682b      	ldr	r3, [r5, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d000      	beq.n	800e74c <_isatty_r+0x1c>
 800e74a:	6023      	str	r3, [r4, #0]
 800e74c:	bd70      	pop	{r4, r5, r6, pc}
 800e74e:	46c0      	nop			; (mov r8, r8)
 800e750:	20000660 	.word	0x20000660

0800e754 <_init>:
 800e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e756:	46c0      	nop			; (mov r8, r8)
 800e758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e75a:	bc08      	pop	{r3}
 800e75c:	469e      	mov	lr, r3
 800e75e:	4770      	bx	lr

0800e760 <_fini>:
 800e760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e762:	46c0      	nop			; (mov r8, r8)
 800e764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e766:	bc08      	pop	{r3}
 800e768:	469e      	mov	lr, r3
 800e76a:	4770      	bx	lr
