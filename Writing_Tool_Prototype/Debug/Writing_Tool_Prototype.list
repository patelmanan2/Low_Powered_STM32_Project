
Writing_Tool_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e66c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a20  0800e730  0800e730  0001e730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f150  0800f150  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f150  0800f150  0001f150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f158  0800f158  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f158  0800f158  0001f158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f15c  0800f15c  0001f15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200001ec  0800f34c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800f34c  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b280  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a7  00000000  00000000  0002b4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008ca  00000000  00000000  0002e420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013652  00000000  00000000  0002ecea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001241e  00000000  00000000  0004233c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00069c2e  00000000  00000000  0005475a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003edc  00000000  00000000  000be388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000c2264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e714 	.word	0x0800e714

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800e714 	.word	0x0800e714

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fbb5 	bl	8001bac <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fb05 	bl	8001a5c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fba7 	bl	8001bac <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb9d 	bl	8001bac <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fb2d 	bl	8001ae0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fb23 	bl	8001ae0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 f9ed 	bl	8002938 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fe46 	bl	80021f8 <__aeabi_dsub>
 800056c:	f002 f9e4 	bl	8002938 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fb55 	bl	8001c74 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fa18 	bl	8002a04 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fb4c 	bl	8001c74 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fe08 	bl	80021f8 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 f9d1 	bl	80029a4 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fb35 	bl	8001c74 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 f9f8 	bl	8002a04 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fbd2 	bl	8000dc0 <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 faf0 	bl	8002c28 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 faeb 	bl	8002c28 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fdiv>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0245      	lsls	r5, r0, #9
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	0047      	lsls	r7, r0, #1
 80007ca:	1c0c      	adds	r4, r1, #0
 80007cc:	0a6d      	lsrs	r5, r5, #9
 80007ce:	0e3f      	lsrs	r7, r7, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2f00      	cmp	r7, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fdiv+0x1c>
 80007d6:	e06f      	b.n	80008b8 <__aeabi_fdiv+0xfc>
 80007d8:	2fff      	cmp	r7, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x22>
 80007dc:	e074      	b.n	80008c8 <__aeabi_fdiv+0x10c>
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00ed      	lsls	r5, r5, #3
 80007e8:	04d2      	lsls	r2, r2, #19
 80007ea:	4315      	orrs	r5, r2
 80007ec:	3f7f      	subs	r7, #127	; 0x7f
 80007ee:	0263      	lsls	r3, r4, #9
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	0063      	lsls	r3, r4, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fe4      	lsrs	r4, r4, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d04d      	beq.n	800089a <__aeabi_fdiv+0xde>
 80007fe:	2bff      	cmp	r3, #255	; 0xff
 8000800:	d045      	beq.n	800088e <__aeabi_fdiv+0xd2>
 8000802:	4642      	mov	r2, r8
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	4311      	orrs	r1, r2
 800080c:	4688      	mov	r8, r1
 800080e:	2200      	movs	r2, #0
 8000810:	3b7f      	subs	r3, #127	; 0x7f
 8000812:	0031      	movs	r1, r6
 8000814:	1aff      	subs	r7, r7, r3
 8000816:	464b      	mov	r3, r9
 8000818:	4061      	eors	r1, r4
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d900      	bls.n	8000822 <__aeabi_fdiv+0x66>
 8000820:	e0b8      	b.n	8000994 <__aeabi_fdiv+0x1d8>
 8000822:	4870      	ldr	r0, [pc, #448]	; (80009e4 <__aeabi_fdiv+0x228>)
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	58c3      	ldr	r3, [r0, r3]
 8000828:	469f      	mov	pc, r3
 800082a:	2300      	movs	r3, #0
 800082c:	4698      	mov	r8, r3
 800082e:	0026      	movs	r6, r4
 8000830:	4645      	mov	r5, r8
 8000832:	4692      	mov	sl, r2
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d100      	bne.n	800083c <__aeabi_fdiv+0x80>
 800083a:	e08d      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800083c:	2b03      	cmp	r3, #3
 800083e:	d100      	bne.n	8000842 <__aeabi_fdiv+0x86>
 8000840:	e0a1      	b.n	8000986 <__aeabi_fdiv+0x1ca>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d018      	beq.n	8000878 <__aeabi_fdiv+0xbc>
 8000846:	003b      	movs	r3, r7
 8000848:	337f      	adds	r3, #127	; 0x7f
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd6d      	ble.n	800092a <__aeabi_fdiv+0x16e>
 800084e:	076a      	lsls	r2, r5, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0xa0>
 8000852:	220f      	movs	r2, #15
 8000854:	402a      	ands	r2, r5
 8000856:	2a04      	cmp	r2, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0xa0>
 800085a:	3504      	adds	r5, #4
 800085c:	012a      	lsls	r2, r5, #4
 800085e:	d503      	bpl.n	8000868 <__aeabi_fdiv+0xac>
 8000860:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <__aeabi_fdiv+0x22c>)
 8000862:	401d      	ands	r5, r3
 8000864:	003b      	movs	r3, r7
 8000866:	3380      	adds	r3, #128	; 0x80
 8000868:	2bfe      	cmp	r3, #254	; 0xfe
 800086a:	dd00      	ble.n	800086e <__aeabi_fdiv+0xb2>
 800086c:	e074      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800086e:	01aa      	lsls	r2, r5, #6
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	e002      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000876:	000e      	movs	r6, r1
 8000878:	2000      	movs	r0, #0
 800087a:	2200      	movs	r2, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	07f6      	lsls	r6, r6, #31
 8000880:	4310      	orrs	r0, r2
 8000882:	4330      	orrs	r0, r6
 8000884:	bce0      	pop	{r5, r6, r7}
 8000886:	46ba      	mov	sl, r7
 8000888:	46b1      	mov	r9, r6
 800088a:	46a8      	mov	r8, r5
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	4643      	mov	r3, r8
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <__aeabi_fdiv+0x158>
 8000894:	2202      	movs	r2, #2
 8000896:	3fff      	subs	r7, #255	; 0xff
 8000898:	e003      	b.n	80008a2 <__aeabi_fdiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12d      	bne.n	80008fc <__aeabi_fdiv+0x140>
 80008a0:	2201      	movs	r2, #1
 80008a2:	0031      	movs	r1, r6
 80008a4:	464b      	mov	r3, r9
 80008a6:	4061      	eors	r1, r4
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4313      	orrs	r3, r2
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d838      	bhi.n	8000922 <__aeabi_fdiv+0x166>
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <__aeabi_fdiv+0x230>)
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	58c3      	ldr	r3, [r0, r3]
 80008b6:	469f      	mov	pc, r3
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d113      	bne.n	80008e4 <__aeabi_fdiv+0x128>
 80008bc:	2304      	movs	r3, #4
 80008be:	4699      	mov	r9, r3
 80008c0:	3b03      	subs	r3, #3
 80008c2:	2700      	movs	r7, #0
 80008c4:	469a      	mov	sl, r3
 80008c6:	e792      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d105      	bne.n	80008d8 <__aeabi_fdiv+0x11c>
 80008cc:	2308      	movs	r3, #8
 80008ce:	4699      	mov	r9, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	27ff      	movs	r7, #255	; 0xff
 80008d4:	469a      	mov	sl, r3
 80008d6:	e78a      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008d8:	230c      	movs	r3, #12
 80008da:	4699      	mov	r9, r3
 80008dc:	3b09      	subs	r3, #9
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e784      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008e4:	0028      	movs	r0, r5
 80008e6:	f002 f981 	bl	8002bec <__clzsi2>
 80008ea:	2776      	movs	r7, #118	; 0x76
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409d      	lsls	r5, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	427f      	negs	r7, r7
 80008f4:	4699      	mov	r9, r3
 80008f6:	469a      	mov	sl, r3
 80008f8:	1a3f      	subs	r7, r7, r0
 80008fa:	e778      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008fc:	4640      	mov	r0, r8
 80008fe:	f002 f975 	bl	8002bec <__clzsi2>
 8000902:	4642      	mov	r2, r8
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409a      	lsls	r2, r3
 8000908:	2376      	movs	r3, #118	; 0x76
 800090a:	425b      	negs	r3, r3
 800090c:	4690      	mov	r8, r2
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	2200      	movs	r2, #0
 8000912:	e77e      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000914:	2303      	movs	r3, #3
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	33fc      	adds	r3, #252	; 0xfc
 800091e:	2203      	movs	r2, #3
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000922:	000e      	movs	r6, r1
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2200      	movs	r2, #0
 8000928:	e7a8      	b.n	800087c <__aeabi_fdiv+0xc0>
 800092a:	2201      	movs	r2, #1
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dca2      	bgt.n	8000878 <__aeabi_fdiv+0xbc>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	002a      	movs	r2, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40da      	lsrs	r2, r3
 800093a:	1e6b      	subs	r3, r5, #1
 800093c:	419d      	sbcs	r5, r3
 800093e:	4315      	orrs	r5, r2
 8000940:	076a      	lsls	r2, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x192>
 8000944:	220f      	movs	r2, #15
 8000946:	402a      	ands	r2, r5
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x192>
 800094c:	3504      	adds	r5, #4
 800094e:	016a      	lsls	r2, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x220>
 8000952:	2001      	movs	r0, #1
 8000954:	2200      	movs	r2, #0
 8000956:	e791      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2200      	movs	r2, #0
 800095c:	e78e      	b.n	800087c <__aeabi_fdiv+0xc0>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	e789      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4215      	tst	r5, r2
 8000972:	d008      	beq.n	8000986 <__aeabi_fdiv+0x1ca>
 8000974:	4643      	mov	r3, r8
 8000976:	4213      	tst	r3, r2
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0x1ca>
 800097a:	431a      	orrs	r2, r3
 800097c:	0252      	lsls	r2, r2, #9
 800097e:	0026      	movs	r6, r4
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	0a52      	lsrs	r2, r2, #9
 8000984:	e77a      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	03d2      	lsls	r2, r2, #15
 800098a:	432a      	orrs	r2, r5
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	0a52      	lsrs	r2, r2, #9
 8000992:	e773      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000994:	4642      	mov	r2, r8
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	0155      	lsls	r5, r2, #5
 800099a:	42ab      	cmp	r3, r5
 800099c:	d21a      	bcs.n	80009d4 <__aeabi_fdiv+0x218>
 800099e:	201b      	movs	r0, #27
 80009a0:	2200      	movs	r2, #0
 80009a2:	3f01      	subs	r7, #1
 80009a4:	2601      	movs	r6, #1
 80009a6:	001c      	movs	r4, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	db01      	blt.n	80009b4 <__aeabi_fdiv+0x1f8>
 80009b0:	429d      	cmp	r5, r3
 80009b2:	d801      	bhi.n	80009b8 <__aeabi_fdiv+0x1fc>
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	4332      	orrs	r2, r6
 80009b8:	3801      	subs	r0, #1
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1f3      	bne.n	80009a6 <__aeabi_fdiv+0x1ea>
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	4183      	sbcs	r3, r0
 80009c2:	4313      	orrs	r3, r2
 80009c4:	001d      	movs	r5, r3
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	000e      	movs	r6, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x216>
 80009d0:	e73d      	b.n	800084e <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x16e>
 80009d4:	201a      	movs	r0, #26
 80009d6:	2201      	movs	r2, #1
 80009d8:	1b5b      	subs	r3, r3, r5
 80009da:	e7e3      	b.n	80009a4 <__aeabi_fdiv+0x1e8>
 80009dc:	01aa      	lsls	r2, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	e74b      	b.n	800087c <__aeabi_fdiv+0xc0>
 80009e4:	0800e7b0 	.word	0x0800e7b0
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	0800e7f0 	.word	0x0800e7f0

080009f0 <__aeabi_fmul>:
 80009f0:	0243      	lsls	r3, r0, #9
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464f      	mov	r7, r9
 80009f8:	4646      	mov	r6, r8
 80009fa:	4699      	mov	r9, r3
 80009fc:	46d6      	mov	lr, sl
 80009fe:	0fc3      	lsrs	r3, r0, #31
 8000a00:	0045      	lsls	r5, r0, #1
 8000a02:	4698      	mov	r8, r3
 8000a04:	b5c0      	push	{r6, r7, lr}
 8000a06:	464b      	mov	r3, r9
 8000a08:	1c0f      	adds	r7, r1, #0
 8000a0a:	0e2d      	lsrs	r5, r5, #24
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fmul+0x20>
 8000a0e:	e0cb      	b.n	8000ba8 <__aeabi_fmul+0x1b8>
 8000a10:	2dff      	cmp	r5, #255	; 0xff
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fmul+0x26>
 8000a14:	e0cf      	b.n	8000bb6 <__aeabi_fmul+0x1c6>
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	04d2      	lsls	r2, r2, #19
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	2300      	movs	r3, #0
 8000a20:	4691      	mov	r9, r2
 8000a22:	2600      	movs	r6, #0
 8000a24:	469a      	mov	sl, r3
 8000a26:	3d7f      	subs	r5, #127	; 0x7f
 8000a28:	027c      	lsls	r4, r7, #9
 8000a2a:	007b      	lsls	r3, r7, #1
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e1b      	lsrs	r3, r3, #24
 8000a30:	0fff      	lsrs	r7, r7, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fmul+0x48>
 8000a36:	e0a9      	b.n	8000b8c <__aeabi_fmul+0x19c>
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d011      	beq.n	8000a60 <__aeabi_fmul+0x70>
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	00e4      	lsls	r4, r4, #3
 8000a40:	04d2      	lsls	r2, r2, #19
 8000a42:	4314      	orrs	r4, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	3b7f      	subs	r3, #127	; 0x7f
 8000a48:	195b      	adds	r3, r3, r5
 8000a4a:	407a      	eors	r2, r7
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	1c5d      	adds	r5, r3, #1
 8000a52:	2e0a      	cmp	r6, #10
 8000a54:	dd13      	ble.n	8000a7e <__aeabi_fmul+0x8e>
 8000a56:	003a      	movs	r2, r7
 8000a58:	2e0b      	cmp	r6, #11
 8000a5a:	d047      	beq.n	8000aec <__aeabi_fmul+0xfc>
 8000a5c:	4647      	mov	r7, r8
 8000a5e:	e03f      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000a60:	002b      	movs	r3, r5
 8000a62:	33ff      	adds	r3, #255	; 0xff
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d11e      	bne.n	8000aa6 <__aeabi_fmul+0xb6>
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4316      	orrs	r6, r2
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	3501      	adds	r5, #1
 8000a70:	407a      	eors	r2, r7
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	35ff      	adds	r5, #255	; 0xff
 8000a76:	2e0a      	cmp	r6, #10
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_fmul+0x8c>
 8000a7a:	e0e4      	b.n	8000c46 <__aeabi_fmul+0x256>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	2e02      	cmp	r6, #2
 8000a80:	dc1c      	bgt.n	8000abc <__aeabi_fmul+0xcc>
 8000a82:	3e01      	subs	r6, #1
 8000a84:	2e01      	cmp	r6, #1
 8000a86:	d842      	bhi.n	8000b0e <__aeabi_fmul+0x11e>
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d03d      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000a8c:	2801      	cmp	r0, #1
 8000a8e:	d166      	bne.n	8000b5e <__aeabi_fmul+0x16e>
 8000a90:	2000      	movs	r0, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	05c0      	lsls	r0, r0, #23
 8000a96:	4308      	orrs	r0, r1
 8000a98:	07d2      	lsls	r2, r2, #31
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	bce0      	pop	{r5, r6, r7}
 8000a9e:	46ba      	mov	sl, r7
 8000aa0:	46b1      	mov	r9, r6
 8000aa2:	46a8      	mov	r8, r5
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	4316      	orrs	r6, r2
 8000aaa:	4642      	mov	r2, r8
 8000aac:	3501      	adds	r5, #1
 8000aae:	407a      	eors	r2, r7
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	35ff      	adds	r5, #255	; 0xff
 8000ab4:	2e0a      	cmp	r6, #10
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_fmul+0xca>
 8000ab8:	e0e4      	b.n	8000c84 <__aeabi_fmul+0x294>
 8000aba:	2003      	movs	r0, #3
 8000abc:	2101      	movs	r1, #1
 8000abe:	40b1      	lsls	r1, r6
 8000ac0:	26a6      	movs	r6, #166	; 0xa6
 8000ac2:	00f6      	lsls	r6, r6, #3
 8000ac4:	4231      	tst	r1, r6
 8000ac6:	d10a      	bne.n	8000ade <__aeabi_fmul+0xee>
 8000ac8:	2690      	movs	r6, #144	; 0x90
 8000aca:	00b6      	lsls	r6, r6, #2
 8000acc:	4231      	tst	r1, r6
 8000ace:	d116      	bne.n	8000afe <__aeabi_fmul+0x10e>
 8000ad0:	3eb9      	subs	r6, #185	; 0xb9
 8000ad2:	3eff      	subs	r6, #255	; 0xff
 8000ad4:	420e      	tst	r6, r1
 8000ad6:	d01a      	beq.n	8000b0e <__aeabi_fmul+0x11e>
 8000ad8:	46a1      	mov	r9, r4
 8000ada:	4682      	mov	sl, r0
 8000adc:	e000      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000ade:	0017      	movs	r7, r2
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d00f      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	4650      	mov	r0, sl
 8000aec:	2803      	cmp	r0, #3
 8000aee:	d1cd      	bne.n	8000a8c <__aeabi_fmul+0x9c>
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	03c9      	lsls	r1, r1, #15
 8000af4:	4321      	orrs	r1, r4
 8000af6:	0249      	lsls	r1, r1, #9
 8000af8:	20ff      	movs	r0, #255	; 0xff
 8000afa:	0a49      	lsrs	r1, r1, #9
 8000afc:	e7ca      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	2200      	movs	r2, #0
 8000b02:	20ff      	movs	r0, #255	; 0xff
 8000b04:	03c9      	lsls	r1, r1, #15
 8000b06:	e7c5      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b08:	20ff      	movs	r0, #255	; 0xff
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e7c2      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b0e:	0c20      	lsrs	r0, r4, #16
 8000b10:	4649      	mov	r1, r9
 8000b12:	0424      	lsls	r4, r4, #16
 8000b14:	0c24      	lsrs	r4, r4, #16
 8000b16:	0027      	movs	r7, r4
 8000b18:	0c0e      	lsrs	r6, r1, #16
 8000b1a:	0409      	lsls	r1, r1, #16
 8000b1c:	0c09      	lsrs	r1, r1, #16
 8000b1e:	4374      	muls	r4, r6
 8000b20:	434f      	muls	r7, r1
 8000b22:	4346      	muls	r6, r0
 8000b24:	4348      	muls	r0, r1
 8000b26:	0c39      	lsrs	r1, r7, #16
 8000b28:	1900      	adds	r0, r0, r4
 8000b2a:	1809      	adds	r1, r1, r0
 8000b2c:	428c      	cmp	r4, r1
 8000b2e:	d903      	bls.n	8000b38 <__aeabi_fmul+0x148>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	0240      	lsls	r0, r0, #9
 8000b34:	4684      	mov	ip, r0
 8000b36:	4466      	add	r6, ip
 8000b38:	043f      	lsls	r7, r7, #16
 8000b3a:	0408      	lsls	r0, r1, #16
 8000b3c:	0c3f      	lsrs	r7, r7, #16
 8000b3e:	19c0      	adds	r0, r0, r7
 8000b40:	0184      	lsls	r4, r0, #6
 8000b42:	1e67      	subs	r7, r4, #1
 8000b44:	41bc      	sbcs	r4, r7
 8000b46:	0c09      	lsrs	r1, r1, #16
 8000b48:	0e80      	lsrs	r0, r0, #26
 8000b4a:	1989      	adds	r1, r1, r6
 8000b4c:	4304      	orrs	r4, r0
 8000b4e:	0189      	lsls	r1, r1, #6
 8000b50:	430c      	orrs	r4, r1
 8000b52:	0109      	lsls	r1, r1, #4
 8000b54:	d571      	bpl.n	8000c3a <__aeabi_fmul+0x24a>
 8000b56:	2301      	movs	r3, #1
 8000b58:	0861      	lsrs	r1, r4, #1
 8000b5a:	401c      	ands	r4, r3
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	002b      	movs	r3, r5
 8000b60:	337f      	adds	r3, #127	; 0x7f
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd51      	ble.n	8000c0a <__aeabi_fmul+0x21a>
 8000b66:	0761      	lsls	r1, r4, #29
 8000b68:	d004      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	4021      	ands	r1, r4
 8000b6e:	2904      	cmp	r1, #4
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b72:	3404      	adds	r4, #4
 8000b74:	0121      	lsls	r1, r4, #4
 8000b76:	d503      	bpl.n	8000b80 <__aeabi_fmul+0x190>
 8000b78:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <__aeabi_fmul+0x298>)
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	3380      	adds	r3, #128	; 0x80
 8000b80:	2bfe      	cmp	r3, #254	; 0xfe
 8000b82:	dcc1      	bgt.n	8000b08 <__aeabi_fmul+0x118>
 8000b84:	01a1      	lsls	r1, r4, #6
 8000b86:	0a49      	lsrs	r1, r1, #9
 8000b88:	b2d8      	uxtb	r0, r3
 8000b8a:	e783      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d12c      	bne.n	8000bea <__aeabi_fmul+0x1fa>
 8000b90:	2301      	movs	r3, #1
 8000b92:	4642      	mov	r2, r8
 8000b94:	431e      	orrs	r6, r3
 8000b96:	002b      	movs	r3, r5
 8000b98:	407a      	eors	r2, r7
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	1c5d      	adds	r5, r3, #1
 8000ba0:	2e0a      	cmp	r6, #10
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_fmul+0x1b6>
 8000ba4:	e757      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000ba6:	e76a      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d110      	bne.n	8000bce <__aeabi_fmul+0x1de>
 8000bac:	2301      	movs	r3, #1
 8000bae:	2604      	movs	r6, #4
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	e738      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d104      	bne.n	8000bc4 <__aeabi_fmul+0x1d4>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2608      	movs	r6, #8
 8000bbe:	25ff      	movs	r5, #255	; 0xff
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	e731      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	260c      	movs	r6, #12
 8000bc8:	25ff      	movs	r5, #255	; 0xff
 8000bca:	469a      	mov	sl, r3
 8000bcc:	e72c      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bce:	4648      	mov	r0, r9
 8000bd0:	f002 f80c 	bl	8002bec <__clzsi2>
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1f43      	subs	r3, r0, #5
 8000bd8:	2576      	movs	r5, #118	; 0x76
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	426d      	negs	r5, r5
 8000be0:	4691      	mov	r9, r2
 8000be2:	2600      	movs	r6, #0
 8000be4:	469a      	mov	sl, r3
 8000be6:	1a2d      	subs	r5, r5, r0
 8000be8:	e71e      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bea:	0020      	movs	r0, r4
 8000bec:	f001 fffe 	bl	8002bec <__clzsi2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	1f43      	subs	r3, r0, #5
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	1a2b      	subs	r3, r5, r0
 8000bf8:	3b76      	subs	r3, #118	; 0x76
 8000bfa:	407a      	eors	r2, r7
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	1c5d      	adds	r5, r3, #1
 8000c02:	2e0a      	cmp	r6, #10
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x218>
 8000c06:	e726      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000c08:	e739      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	1acb      	subs	r3, r1, r3
 8000c0e:	2b1b      	cmp	r3, #27
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_fmul+0x224>
 8000c12:	e73d      	b.n	8000a90 <__aeabi_fmul+0xa0>
 8000c14:	359e      	adds	r5, #158	; 0x9e
 8000c16:	0021      	movs	r1, r4
 8000c18:	40ac      	lsls	r4, r5
 8000c1a:	40d9      	lsrs	r1, r3
 8000c1c:	1e63      	subs	r3, r4, #1
 8000c1e:	419c      	sbcs	r4, r3
 8000c20:	4321      	orrs	r1, r4
 8000c22:	074b      	lsls	r3, r1, #29
 8000c24:	d004      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c26:	230f      	movs	r3, #15
 8000c28:	400b      	ands	r3, r1
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c2e:	3104      	adds	r1, #4
 8000c30:	014b      	lsls	r3, r1, #5
 8000c32:	d504      	bpl.n	8000c3e <__aeabi_fmul+0x24e>
 8000c34:	2001      	movs	r0, #1
 8000c36:	2100      	movs	r1, #0
 8000c38:	e72c      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c3a:	001d      	movs	r5, r3
 8000c3c:	e78f      	b.n	8000b5e <__aeabi_fmul+0x16e>
 8000c3e:	0189      	lsls	r1, r1, #6
 8000c40:	2000      	movs	r0, #0
 8000c42:	0a49      	lsrs	r1, r1, #9
 8000c44:	e726      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c46:	2302      	movs	r3, #2
 8000c48:	2e0f      	cmp	r6, #15
 8000c4a:	d10c      	bne.n	8000c66 <__aeabi_fmul+0x276>
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	464b      	mov	r3, r9
 8000c50:	03c9      	lsls	r1, r1, #15
 8000c52:	420b      	tst	r3, r1
 8000c54:	d00d      	beq.n	8000c72 <__aeabi_fmul+0x282>
 8000c56:	420c      	tst	r4, r1
 8000c58:	d10b      	bne.n	8000c72 <__aeabi_fmul+0x282>
 8000c5a:	4321      	orrs	r1, r4
 8000c5c:	0249      	lsls	r1, r1, #9
 8000c5e:	003a      	movs	r2, r7
 8000c60:	20ff      	movs	r0, #255	; 0xff
 8000c62:	0a49      	lsrs	r1, r1, #9
 8000c64:	e716      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c66:	2e0b      	cmp	r6, #11
 8000c68:	d000      	beq.n	8000c6c <__aeabi_fmul+0x27c>
 8000c6a:	e6f7      	b.n	8000a5c <__aeabi_fmul+0x6c>
 8000c6c:	46a1      	mov	r9, r4
 8000c6e:	469a      	mov	sl, r3
 8000c70:	e736      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	464b      	mov	r3, r9
 8000c76:	03c9      	lsls	r1, r1, #15
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	0249      	lsls	r1, r1, #9
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	0a49      	lsrs	r1, r1, #9
 8000c82:	e707      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e7df      	b.n	8000c48 <__aeabi_fmul+0x258>
 8000c88:	f7ffffff 	.word	0xf7ffffff

08000c8c <__aeabi_i2f>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	d013      	beq.n	8000cba <__aeabi_i2f+0x2e>
 8000c92:	17c3      	asrs	r3, r0, #31
 8000c94:	18c5      	adds	r5, r0, r3
 8000c96:	405d      	eors	r5, r3
 8000c98:	0fc4      	lsrs	r4, r0, #31
 8000c9a:	0028      	movs	r0, r5
 8000c9c:	f001 ffa6 	bl	8002bec <__clzsi2>
 8000ca0:	239e      	movs	r3, #158	; 0x9e
 8000ca2:	0001      	movs	r1, r0
 8000ca4:	1a1b      	subs	r3, r3, r0
 8000ca6:	2b96      	cmp	r3, #150	; 0x96
 8000ca8:	dc0f      	bgt.n	8000cca <__aeabi_i2f+0x3e>
 8000caa:	2808      	cmp	r0, #8
 8000cac:	d031      	beq.n	8000d12 <__aeabi_i2f+0x86>
 8000cae:	3908      	subs	r1, #8
 8000cb0:	408d      	lsls	r5, r1
 8000cb2:	026d      	lsls	r5, r5, #9
 8000cb4:	0a6d      	lsrs	r5, r5, #9
 8000cb6:	b2d8      	uxtb	r0, r3
 8000cb8:	e002      	b.n	8000cc0 <__aeabi_i2f+0x34>
 8000cba:	2400      	movs	r4, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	2500      	movs	r5, #0
 8000cc0:	05c0      	lsls	r0, r0, #23
 8000cc2:	4328      	orrs	r0, r5
 8000cc4:	07e4      	lsls	r4, r4, #31
 8000cc6:	4320      	orrs	r0, r4
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	2b99      	cmp	r3, #153	; 0x99
 8000ccc:	dd0c      	ble.n	8000ce8 <__aeabi_i2f+0x5c>
 8000cce:	2205      	movs	r2, #5
 8000cd0:	1a12      	subs	r2, r2, r0
 8000cd2:	0028      	movs	r0, r5
 8000cd4:	40d0      	lsrs	r0, r2
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	0008      	movs	r0, r1
 8000cda:	301b      	adds	r0, #27
 8000cdc:	4085      	lsls	r5, r0
 8000cde:	0028      	movs	r0, r5
 8000ce0:	1e45      	subs	r5, r0, #1
 8000ce2:	41a8      	sbcs	r0, r5
 8000ce4:	4302      	orrs	r2, r0
 8000ce6:	0015      	movs	r5, r2
 8000ce8:	2905      	cmp	r1, #5
 8000cea:	dc16      	bgt.n	8000d1a <__aeabi_i2f+0x8e>
 8000cec:	002a      	movs	r2, r5
 8000cee:	480f      	ldr	r0, [pc, #60]	; (8000d2c <__aeabi_i2f+0xa0>)
 8000cf0:	4002      	ands	r2, r0
 8000cf2:	076e      	lsls	r6, r5, #29
 8000cf4:	d009      	beq.n	8000d0a <__aeabi_i2f+0x7e>
 8000cf6:	260f      	movs	r6, #15
 8000cf8:	4035      	ands	r5, r6
 8000cfa:	2d04      	cmp	r5, #4
 8000cfc:	d005      	beq.n	8000d0a <__aeabi_i2f+0x7e>
 8000cfe:	3204      	adds	r2, #4
 8000d00:	0155      	lsls	r5, r2, #5
 8000d02:	d502      	bpl.n	8000d0a <__aeabi_i2f+0x7e>
 8000d04:	239f      	movs	r3, #159	; 0x9f
 8000d06:	4002      	ands	r2, r0
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	0192      	lsls	r2, r2, #6
 8000d0c:	0a55      	lsrs	r5, r2, #9
 8000d0e:	b2d8      	uxtb	r0, r3
 8000d10:	e7d6      	b.n	8000cc0 <__aeabi_i2f+0x34>
 8000d12:	026d      	lsls	r5, r5, #9
 8000d14:	2096      	movs	r0, #150	; 0x96
 8000d16:	0a6d      	lsrs	r5, r5, #9
 8000d18:	e7d2      	b.n	8000cc0 <__aeabi_i2f+0x34>
 8000d1a:	1f4a      	subs	r2, r1, #5
 8000d1c:	4095      	lsls	r5, r2
 8000d1e:	002a      	movs	r2, r5
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <__aeabi_i2f+0xa0>)
 8000d22:	4002      	ands	r2, r0
 8000d24:	076e      	lsls	r6, r5, #29
 8000d26:	d0f0      	beq.n	8000d0a <__aeabi_i2f+0x7e>
 8000d28:	e7e5      	b.n	8000cf6 <__aeabi_i2f+0x6a>
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	fbffffff 	.word	0xfbffffff

08000d30 <__aeabi_ui2f>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	1e04      	subs	r4, r0, #0
 8000d34:	d00e      	beq.n	8000d54 <__aeabi_ui2f+0x24>
 8000d36:	f001 ff59 	bl	8002bec <__clzsi2>
 8000d3a:	239e      	movs	r3, #158	; 0x9e
 8000d3c:	0001      	movs	r1, r0
 8000d3e:	1a1b      	subs	r3, r3, r0
 8000d40:	2b96      	cmp	r3, #150	; 0x96
 8000d42:	dc0c      	bgt.n	8000d5e <__aeabi_ui2f+0x2e>
 8000d44:	2808      	cmp	r0, #8
 8000d46:	d02c      	beq.n	8000da2 <__aeabi_ui2f+0x72>
 8000d48:	3908      	subs	r1, #8
 8000d4a:	408c      	lsls	r4, r1
 8000d4c:	0264      	lsls	r4, r4, #9
 8000d4e:	0a64      	lsrs	r4, r4, #9
 8000d50:	b2d8      	uxtb	r0, r3
 8000d52:	e001      	b.n	8000d58 <__aeabi_ui2f+0x28>
 8000d54:	2000      	movs	r0, #0
 8000d56:	2400      	movs	r4, #0
 8000d58:	05c0      	lsls	r0, r0, #23
 8000d5a:	4320      	orrs	r0, r4
 8000d5c:	bd70      	pop	{r4, r5, r6, pc}
 8000d5e:	2b99      	cmp	r3, #153	; 0x99
 8000d60:	dd0a      	ble.n	8000d78 <__aeabi_ui2f+0x48>
 8000d62:	0002      	movs	r2, r0
 8000d64:	0020      	movs	r0, r4
 8000d66:	321b      	adds	r2, #27
 8000d68:	4090      	lsls	r0, r2
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	1e50      	subs	r0, r2, #1
 8000d6e:	4182      	sbcs	r2, r0
 8000d70:	2005      	movs	r0, #5
 8000d72:	1a40      	subs	r0, r0, r1
 8000d74:	40c4      	lsrs	r4, r0
 8000d76:	4314      	orrs	r4, r2
 8000d78:	2905      	cmp	r1, #5
 8000d7a:	dc16      	bgt.n	8000daa <__aeabi_ui2f+0x7a>
 8000d7c:	0022      	movs	r2, r4
 8000d7e:	480f      	ldr	r0, [pc, #60]	; (8000dbc <__aeabi_ui2f+0x8c>)
 8000d80:	4002      	ands	r2, r0
 8000d82:	0765      	lsls	r5, r4, #29
 8000d84:	d009      	beq.n	8000d9a <__aeabi_ui2f+0x6a>
 8000d86:	250f      	movs	r5, #15
 8000d88:	402c      	ands	r4, r5
 8000d8a:	2c04      	cmp	r4, #4
 8000d8c:	d005      	beq.n	8000d9a <__aeabi_ui2f+0x6a>
 8000d8e:	3204      	adds	r2, #4
 8000d90:	0154      	lsls	r4, r2, #5
 8000d92:	d502      	bpl.n	8000d9a <__aeabi_ui2f+0x6a>
 8000d94:	239f      	movs	r3, #159	; 0x9f
 8000d96:	4002      	ands	r2, r0
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	0192      	lsls	r2, r2, #6
 8000d9c:	0a54      	lsrs	r4, r2, #9
 8000d9e:	b2d8      	uxtb	r0, r3
 8000da0:	e7da      	b.n	8000d58 <__aeabi_ui2f+0x28>
 8000da2:	0264      	lsls	r4, r4, #9
 8000da4:	2096      	movs	r0, #150	; 0x96
 8000da6:	0a64      	lsrs	r4, r4, #9
 8000da8:	e7d6      	b.n	8000d58 <__aeabi_ui2f+0x28>
 8000daa:	1f4a      	subs	r2, r1, #5
 8000dac:	4094      	lsls	r4, r2
 8000dae:	0022      	movs	r2, r4
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <__aeabi_ui2f+0x8c>)
 8000db2:	4002      	ands	r2, r0
 8000db4:	0765      	lsls	r5, r4, #29
 8000db6:	d0f0      	beq.n	8000d9a <__aeabi_ui2f+0x6a>
 8000db8:	e7e5      	b.n	8000d86 <__aeabi_ui2f+0x56>
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	fbffffff 	.word	0xfbffffff

08000dc0 <__aeabi_dadd>:
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	464f      	mov	r7, r9
 8000dc4:	4646      	mov	r6, r8
 8000dc6:	46d6      	mov	lr, sl
 8000dc8:	0004      	movs	r4, r0
 8000dca:	b5c0      	push	{r6, r7, lr}
 8000dcc:	001f      	movs	r7, r3
 8000dce:	030b      	lsls	r3, r1, #12
 8000dd0:	0010      	movs	r0, r2
 8000dd2:	004e      	lsls	r6, r1, #1
 8000dd4:	0a5b      	lsrs	r3, r3, #9
 8000dd6:	0fcd      	lsrs	r5, r1, #31
 8000dd8:	0f61      	lsrs	r1, r4, #29
 8000dda:	007a      	lsls	r2, r7, #1
 8000ddc:	4319      	orrs	r1, r3
 8000dde:	00e3      	lsls	r3, r4, #3
 8000de0:	033c      	lsls	r4, r7, #12
 8000de2:	0fff      	lsrs	r7, r7, #31
 8000de4:	46bc      	mov	ip, r7
 8000de6:	0a64      	lsrs	r4, r4, #9
 8000de8:	0f47      	lsrs	r7, r0, #29
 8000dea:	4327      	orrs	r7, r4
 8000dec:	0d76      	lsrs	r6, r6, #21
 8000dee:	0d52      	lsrs	r2, r2, #21
 8000df0:	00c0      	lsls	r0, r0, #3
 8000df2:	46b9      	mov	r9, r7
 8000df4:	4680      	mov	r8, r0
 8000df6:	1ab7      	subs	r7, r6, r2
 8000df8:	4565      	cmp	r5, ip
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dadd+0x3e>
 8000dfc:	e09b      	b.n	8000f36 <__aeabi_dadd+0x176>
 8000dfe:	2f00      	cmp	r7, #0
 8000e00:	dc00      	bgt.n	8000e04 <__aeabi_dadd+0x44>
 8000e02:	e084      	b.n	8000f0e <__aeabi_dadd+0x14e>
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dadd+0x4a>
 8000e08:	e0be      	b.n	8000f88 <__aeabi_dadd+0x1c8>
 8000e0a:	4ac8      	ldr	r2, [pc, #800]	; (800112c <__aeabi_dadd+0x36c>)
 8000e0c:	4296      	cmp	r6, r2
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_dadd+0x52>
 8000e10:	e124      	b.n	800105c <__aeabi_dadd+0x29c>
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	464c      	mov	r4, r9
 8000e16:	0412      	lsls	r2, r2, #16
 8000e18:	4314      	orrs	r4, r2
 8000e1a:	46a1      	mov	r9, r4
 8000e1c:	2f38      	cmp	r7, #56	; 0x38
 8000e1e:	dd00      	ble.n	8000e22 <__aeabi_dadd+0x62>
 8000e20:	e167      	b.n	80010f2 <__aeabi_dadd+0x332>
 8000e22:	2f1f      	cmp	r7, #31
 8000e24:	dd00      	ble.n	8000e28 <__aeabi_dadd+0x68>
 8000e26:	e1d6      	b.n	80011d6 <__aeabi_dadd+0x416>
 8000e28:	2220      	movs	r2, #32
 8000e2a:	464c      	mov	r4, r9
 8000e2c:	1bd2      	subs	r2, r2, r7
 8000e2e:	4094      	lsls	r4, r2
 8000e30:	46a2      	mov	sl, r4
 8000e32:	4644      	mov	r4, r8
 8000e34:	40fc      	lsrs	r4, r7
 8000e36:	0020      	movs	r0, r4
 8000e38:	4654      	mov	r4, sl
 8000e3a:	4304      	orrs	r4, r0
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	4090      	lsls	r0, r2
 8000e40:	1e42      	subs	r2, r0, #1
 8000e42:	4190      	sbcs	r0, r2
 8000e44:	464a      	mov	r2, r9
 8000e46:	40fa      	lsrs	r2, r7
 8000e48:	4304      	orrs	r4, r0
 8000e4a:	1a89      	subs	r1, r1, r2
 8000e4c:	1b1c      	subs	r4, r3, r4
 8000e4e:	42a3      	cmp	r3, r4
 8000e50:	4192      	sbcs	r2, r2
 8000e52:	4252      	negs	r2, r2
 8000e54:	1a8b      	subs	r3, r1, r2
 8000e56:	469a      	mov	sl, r3
 8000e58:	4653      	mov	r3, sl
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	d400      	bmi.n	8000e60 <__aeabi_dadd+0xa0>
 8000e5e:	e0d4      	b.n	800100a <__aeabi_dadd+0x24a>
 8000e60:	4653      	mov	r3, sl
 8000e62:	025a      	lsls	r2, r3, #9
 8000e64:	0a53      	lsrs	r3, r2, #9
 8000e66:	469a      	mov	sl, r3
 8000e68:	4653      	mov	r3, sl
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dadd+0xb0>
 8000e6e:	e104      	b.n	800107a <__aeabi_dadd+0x2ba>
 8000e70:	4650      	mov	r0, sl
 8000e72:	f001 febb 	bl	8002bec <__clzsi2>
 8000e76:	0003      	movs	r3, r0
 8000e78:	3b08      	subs	r3, #8
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	0020      	movs	r0, r4
 8000e7e:	1ad2      	subs	r2, r2, r3
 8000e80:	4651      	mov	r1, sl
 8000e82:	40d0      	lsrs	r0, r2
 8000e84:	4099      	lsls	r1, r3
 8000e86:	0002      	movs	r2, r0
 8000e88:	409c      	lsls	r4, r3
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	42b3      	cmp	r3, r6
 8000e8e:	da00      	bge.n	8000e92 <__aeabi_dadd+0xd2>
 8000e90:	e102      	b.n	8001098 <__aeabi_dadd+0x2d8>
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	1c59      	adds	r1, r3, #1
 8000e96:	291f      	cmp	r1, #31
 8000e98:	dd00      	ble.n	8000e9c <__aeabi_dadd+0xdc>
 8000e9a:	e0a7      	b.n	8000fec <__aeabi_dadd+0x22c>
 8000e9c:	2320      	movs	r3, #32
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	0026      	movs	r6, r4
 8000ea2:	1a5b      	subs	r3, r3, r1
 8000ea4:	409c      	lsls	r4, r3
 8000ea6:	4098      	lsls	r0, r3
 8000ea8:	40ce      	lsrs	r6, r1
 8000eaa:	40ca      	lsrs	r2, r1
 8000eac:	1e63      	subs	r3, r4, #1
 8000eae:	419c      	sbcs	r4, r3
 8000eb0:	4330      	orrs	r0, r6
 8000eb2:	4692      	mov	sl, r2
 8000eb4:	2600      	movs	r6, #0
 8000eb6:	4304      	orrs	r4, r0
 8000eb8:	0763      	lsls	r3, r4, #29
 8000eba:	d009      	beq.n	8000ed0 <__aeabi_dadd+0x110>
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	4023      	ands	r3, r4
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d005      	beq.n	8000ed0 <__aeabi_dadd+0x110>
 8000ec4:	1d23      	adds	r3, r4, #4
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	41a4      	sbcs	r4, r4
 8000eca:	4264      	negs	r4, r4
 8000ecc:	44a2      	add	sl, r4
 8000ece:	001c      	movs	r4, r3
 8000ed0:	4653      	mov	r3, sl
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	d400      	bmi.n	8000ed8 <__aeabi_dadd+0x118>
 8000ed6:	e09b      	b.n	8001010 <__aeabi_dadd+0x250>
 8000ed8:	4b94      	ldr	r3, [pc, #592]	; (800112c <__aeabi_dadd+0x36c>)
 8000eda:	3601      	adds	r6, #1
 8000edc:	429e      	cmp	r6, r3
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x122>
 8000ee0:	e0b8      	b.n	8001054 <__aeabi_dadd+0x294>
 8000ee2:	4653      	mov	r3, sl
 8000ee4:	4992      	ldr	r1, [pc, #584]	; (8001130 <__aeabi_dadd+0x370>)
 8000ee6:	08e4      	lsrs	r4, r4, #3
 8000ee8:	400b      	ands	r3, r1
 8000eea:	0019      	movs	r1, r3
 8000eec:	075b      	lsls	r3, r3, #29
 8000eee:	4323      	orrs	r3, r4
 8000ef0:	0572      	lsls	r2, r6, #21
 8000ef2:	024c      	lsls	r4, r1, #9
 8000ef4:	0b24      	lsrs	r4, r4, #12
 8000ef6:	0d52      	lsrs	r2, r2, #21
 8000ef8:	0512      	lsls	r2, r2, #20
 8000efa:	07ed      	lsls	r5, r5, #31
 8000efc:	4322      	orrs	r2, r4
 8000efe:	432a      	orrs	r2, r5
 8000f00:	0018      	movs	r0, r3
 8000f02:	0011      	movs	r1, r2
 8000f04:	bce0      	pop	{r5, r6, r7}
 8000f06:	46ba      	mov	sl, r7
 8000f08:	46b1      	mov	r9, r6
 8000f0a:	46a8      	mov	r8, r5
 8000f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0e:	2f00      	cmp	r7, #0
 8000f10:	d048      	beq.n	8000fa4 <__aeabi_dadd+0x1e4>
 8000f12:	1b97      	subs	r7, r2, r6
 8000f14:	2e00      	cmp	r6, #0
 8000f16:	d000      	beq.n	8000f1a <__aeabi_dadd+0x15a>
 8000f18:	e10e      	b.n	8001138 <__aeabi_dadd+0x378>
 8000f1a:	000c      	movs	r4, r1
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x162>
 8000f20:	e1b7      	b.n	8001292 <__aeabi_dadd+0x4d2>
 8000f22:	1e7c      	subs	r4, r7, #1
 8000f24:	2f01      	cmp	r7, #1
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x16a>
 8000f28:	e226      	b.n	8001378 <__aeabi_dadd+0x5b8>
 8000f2a:	4d80      	ldr	r5, [pc, #512]	; (800112c <__aeabi_dadd+0x36c>)
 8000f2c:	42af      	cmp	r7, r5
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_dadd+0x172>
 8000f30:	e1d5      	b.n	80012de <__aeabi_dadd+0x51e>
 8000f32:	0027      	movs	r7, r4
 8000f34:	e107      	b.n	8001146 <__aeabi_dadd+0x386>
 8000f36:	2f00      	cmp	r7, #0
 8000f38:	dc00      	bgt.n	8000f3c <__aeabi_dadd+0x17c>
 8000f3a:	e0b2      	b.n	80010a2 <__aeabi_dadd+0x2e2>
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d047      	beq.n	8000fd0 <__aeabi_dadd+0x210>
 8000f40:	4a7a      	ldr	r2, [pc, #488]	; (800112c <__aeabi_dadd+0x36c>)
 8000f42:	4296      	cmp	r6, r2
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x188>
 8000f46:	e089      	b.n	800105c <__aeabi_dadd+0x29c>
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	464c      	mov	r4, r9
 8000f4c:	0412      	lsls	r2, r2, #16
 8000f4e:	4314      	orrs	r4, r2
 8000f50:	46a1      	mov	r9, r4
 8000f52:	2f38      	cmp	r7, #56	; 0x38
 8000f54:	dc6b      	bgt.n	800102e <__aeabi_dadd+0x26e>
 8000f56:	2f1f      	cmp	r7, #31
 8000f58:	dc00      	bgt.n	8000f5c <__aeabi_dadd+0x19c>
 8000f5a:	e16e      	b.n	800123a <__aeabi_dadd+0x47a>
 8000f5c:	003a      	movs	r2, r7
 8000f5e:	4648      	mov	r0, r9
 8000f60:	3a20      	subs	r2, #32
 8000f62:	40d0      	lsrs	r0, r2
 8000f64:	4684      	mov	ip, r0
 8000f66:	2f20      	cmp	r7, #32
 8000f68:	d007      	beq.n	8000f7a <__aeabi_dadd+0x1ba>
 8000f6a:	2240      	movs	r2, #64	; 0x40
 8000f6c:	4648      	mov	r0, r9
 8000f6e:	1bd2      	subs	r2, r2, r7
 8000f70:	4090      	lsls	r0, r2
 8000f72:	0002      	movs	r2, r0
 8000f74:	4640      	mov	r0, r8
 8000f76:	4310      	orrs	r0, r2
 8000f78:	4680      	mov	r8, r0
 8000f7a:	4640      	mov	r0, r8
 8000f7c:	1e42      	subs	r2, r0, #1
 8000f7e:	4190      	sbcs	r0, r2
 8000f80:	4662      	mov	r2, ip
 8000f82:	0004      	movs	r4, r0
 8000f84:	4314      	orrs	r4, r2
 8000f86:	e057      	b.n	8001038 <__aeabi_dadd+0x278>
 8000f88:	464a      	mov	r2, r9
 8000f8a:	4302      	orrs	r2, r0
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dadd+0x1d0>
 8000f8e:	e103      	b.n	8001198 <__aeabi_dadd+0x3d8>
 8000f90:	1e7a      	subs	r2, r7, #1
 8000f92:	2f01      	cmp	r7, #1
 8000f94:	d100      	bne.n	8000f98 <__aeabi_dadd+0x1d8>
 8000f96:	e193      	b.n	80012c0 <__aeabi_dadd+0x500>
 8000f98:	4c64      	ldr	r4, [pc, #400]	; (800112c <__aeabi_dadd+0x36c>)
 8000f9a:	42a7      	cmp	r7, r4
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dadd+0x1e0>
 8000f9e:	e18a      	b.n	80012b6 <__aeabi_dadd+0x4f6>
 8000fa0:	0017      	movs	r7, r2
 8000fa2:	e73b      	b.n	8000e1c <__aeabi_dadd+0x5c>
 8000fa4:	4c63      	ldr	r4, [pc, #396]	; (8001134 <__aeabi_dadd+0x374>)
 8000fa6:	1c72      	adds	r2, r6, #1
 8000fa8:	4222      	tst	r2, r4
 8000faa:	d000      	beq.n	8000fae <__aeabi_dadd+0x1ee>
 8000fac:	e0e0      	b.n	8001170 <__aeabi_dadd+0x3b0>
 8000fae:	000a      	movs	r2, r1
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	2e00      	cmp	r6, #0
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_dadd+0x1f8>
 8000fb6:	e174      	b.n	80012a2 <__aeabi_dadd+0x4e2>
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_dadd+0x1fe>
 8000fbc:	e1d0      	b.n	8001360 <__aeabi_dadd+0x5a0>
 8000fbe:	464a      	mov	r2, r9
 8000fc0:	4302      	orrs	r2, r0
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_dadd+0x206>
 8000fc4:	e1e3      	b.n	800138e <__aeabi_dadd+0x5ce>
 8000fc6:	074a      	lsls	r2, r1, #29
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	08c9      	lsrs	r1, r1, #3
 8000fce:	e029      	b.n	8001024 <__aeabi_dadd+0x264>
 8000fd0:	464a      	mov	r2, r9
 8000fd2:	4302      	orrs	r2, r0
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_dadd+0x218>
 8000fd6:	e17d      	b.n	80012d4 <__aeabi_dadd+0x514>
 8000fd8:	1e7a      	subs	r2, r7, #1
 8000fda:	2f01      	cmp	r7, #1
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dadd+0x220>
 8000fde:	e0e0      	b.n	80011a2 <__aeabi_dadd+0x3e2>
 8000fe0:	4c52      	ldr	r4, [pc, #328]	; (800112c <__aeabi_dadd+0x36c>)
 8000fe2:	42a7      	cmp	r7, r4
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x228>
 8000fe6:	e166      	b.n	80012b6 <__aeabi_dadd+0x4f6>
 8000fe8:	0017      	movs	r7, r2
 8000fea:	e7b2      	b.n	8000f52 <__aeabi_dadd+0x192>
 8000fec:	0010      	movs	r0, r2
 8000fee:	3b1f      	subs	r3, #31
 8000ff0:	40d8      	lsrs	r0, r3
 8000ff2:	2920      	cmp	r1, #32
 8000ff4:	d003      	beq.n	8000ffe <__aeabi_dadd+0x23e>
 8000ff6:	2340      	movs	r3, #64	; 0x40
 8000ff8:	1a5b      	subs	r3, r3, r1
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	4314      	orrs	r4, r2
 8000ffe:	1e63      	subs	r3, r4, #1
 8001000:	419c      	sbcs	r4, r3
 8001002:	2300      	movs	r3, #0
 8001004:	2600      	movs	r6, #0
 8001006:	469a      	mov	sl, r3
 8001008:	4304      	orrs	r4, r0
 800100a:	0763      	lsls	r3, r4, #29
 800100c:	d000      	beq.n	8001010 <__aeabi_dadd+0x250>
 800100e:	e755      	b.n	8000ebc <__aeabi_dadd+0xfc>
 8001010:	4652      	mov	r2, sl
 8001012:	08e3      	lsrs	r3, r4, #3
 8001014:	0752      	lsls	r2, r2, #29
 8001016:	4313      	orrs	r3, r2
 8001018:	4652      	mov	r2, sl
 800101a:	0037      	movs	r7, r6
 800101c:	08d1      	lsrs	r1, r2, #3
 800101e:	4a43      	ldr	r2, [pc, #268]	; (800112c <__aeabi_dadd+0x36c>)
 8001020:	4297      	cmp	r7, r2
 8001022:	d01f      	beq.n	8001064 <__aeabi_dadd+0x2a4>
 8001024:	0309      	lsls	r1, r1, #12
 8001026:	057a      	lsls	r2, r7, #21
 8001028:	0b0c      	lsrs	r4, r1, #12
 800102a:	0d52      	lsrs	r2, r2, #21
 800102c:	e764      	b.n	8000ef8 <__aeabi_dadd+0x138>
 800102e:	4642      	mov	r2, r8
 8001030:	464c      	mov	r4, r9
 8001032:	4314      	orrs	r4, r2
 8001034:	1e62      	subs	r2, r4, #1
 8001036:	4194      	sbcs	r4, r2
 8001038:	18e4      	adds	r4, r4, r3
 800103a:	429c      	cmp	r4, r3
 800103c:	4192      	sbcs	r2, r2
 800103e:	4252      	negs	r2, r2
 8001040:	4692      	mov	sl, r2
 8001042:	448a      	add	sl, r1
 8001044:	4653      	mov	r3, sl
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	d5df      	bpl.n	800100a <__aeabi_dadd+0x24a>
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <__aeabi_dadd+0x36c>)
 800104c:	3601      	adds	r6, #1
 800104e:	429e      	cmp	r6, r3
 8001050:	d000      	beq.n	8001054 <__aeabi_dadd+0x294>
 8001052:	e0b3      	b.n	80011bc <__aeabi_dadd+0x3fc>
 8001054:	0032      	movs	r2, r6
 8001056:	2400      	movs	r4, #0
 8001058:	2300      	movs	r3, #0
 800105a:	e74d      	b.n	8000ef8 <__aeabi_dadd+0x138>
 800105c:	074a      	lsls	r2, r1, #29
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	4313      	orrs	r3, r2
 8001062:	08c9      	lsrs	r1, r1, #3
 8001064:	001a      	movs	r2, r3
 8001066:	430a      	orrs	r2, r1
 8001068:	d100      	bne.n	800106c <__aeabi_dadd+0x2ac>
 800106a:	e200      	b.n	800146e <__aeabi_dadd+0x6ae>
 800106c:	2480      	movs	r4, #128	; 0x80
 800106e:	0324      	lsls	r4, r4, #12
 8001070:	430c      	orrs	r4, r1
 8001072:	0324      	lsls	r4, r4, #12
 8001074:	4a2d      	ldr	r2, [pc, #180]	; (800112c <__aeabi_dadd+0x36c>)
 8001076:	0b24      	lsrs	r4, r4, #12
 8001078:	e73e      	b.n	8000ef8 <__aeabi_dadd+0x138>
 800107a:	0020      	movs	r0, r4
 800107c:	f001 fdb6 	bl	8002bec <__clzsi2>
 8001080:	0003      	movs	r3, r0
 8001082:	3318      	adds	r3, #24
 8001084:	2b1f      	cmp	r3, #31
 8001086:	dc00      	bgt.n	800108a <__aeabi_dadd+0x2ca>
 8001088:	e6f7      	b.n	8000e7a <__aeabi_dadd+0xba>
 800108a:	0022      	movs	r2, r4
 800108c:	3808      	subs	r0, #8
 800108e:	4082      	lsls	r2, r0
 8001090:	2400      	movs	r4, #0
 8001092:	42b3      	cmp	r3, r6
 8001094:	db00      	blt.n	8001098 <__aeabi_dadd+0x2d8>
 8001096:	e6fc      	b.n	8000e92 <__aeabi_dadd+0xd2>
 8001098:	1af6      	subs	r6, r6, r3
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <__aeabi_dadd+0x370>)
 800109c:	401a      	ands	r2, r3
 800109e:	4692      	mov	sl, r2
 80010a0:	e70a      	b.n	8000eb8 <__aeabi_dadd+0xf8>
 80010a2:	2f00      	cmp	r7, #0
 80010a4:	d02b      	beq.n	80010fe <__aeabi_dadd+0x33e>
 80010a6:	1b97      	subs	r7, r2, r6
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x2ee>
 80010ac:	e0b8      	b.n	8001220 <__aeabi_dadd+0x460>
 80010ae:	4c1f      	ldr	r4, [pc, #124]	; (800112c <__aeabi_dadd+0x36c>)
 80010b0:	42a2      	cmp	r2, r4
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dadd+0x2f6>
 80010b4:	e11c      	b.n	80012f0 <__aeabi_dadd+0x530>
 80010b6:	2480      	movs	r4, #128	; 0x80
 80010b8:	0424      	lsls	r4, r4, #16
 80010ba:	4321      	orrs	r1, r4
 80010bc:	2f38      	cmp	r7, #56	; 0x38
 80010be:	dd00      	ble.n	80010c2 <__aeabi_dadd+0x302>
 80010c0:	e11e      	b.n	8001300 <__aeabi_dadd+0x540>
 80010c2:	2f1f      	cmp	r7, #31
 80010c4:	dd00      	ble.n	80010c8 <__aeabi_dadd+0x308>
 80010c6:	e19e      	b.n	8001406 <__aeabi_dadd+0x646>
 80010c8:	2620      	movs	r6, #32
 80010ca:	000c      	movs	r4, r1
 80010cc:	1bf6      	subs	r6, r6, r7
 80010ce:	0018      	movs	r0, r3
 80010d0:	40b3      	lsls	r3, r6
 80010d2:	40b4      	lsls	r4, r6
 80010d4:	40f8      	lsrs	r0, r7
 80010d6:	1e5e      	subs	r6, r3, #1
 80010d8:	41b3      	sbcs	r3, r6
 80010da:	40f9      	lsrs	r1, r7
 80010dc:	4304      	orrs	r4, r0
 80010de:	431c      	orrs	r4, r3
 80010e0:	4489      	add	r9, r1
 80010e2:	4444      	add	r4, r8
 80010e4:	4544      	cmp	r4, r8
 80010e6:	419b      	sbcs	r3, r3
 80010e8:	425b      	negs	r3, r3
 80010ea:	444b      	add	r3, r9
 80010ec:	469a      	mov	sl, r3
 80010ee:	0016      	movs	r6, r2
 80010f0:	e7a8      	b.n	8001044 <__aeabi_dadd+0x284>
 80010f2:	4642      	mov	r2, r8
 80010f4:	464c      	mov	r4, r9
 80010f6:	4314      	orrs	r4, r2
 80010f8:	1e62      	subs	r2, r4, #1
 80010fa:	4194      	sbcs	r4, r2
 80010fc:	e6a6      	b.n	8000e4c <__aeabi_dadd+0x8c>
 80010fe:	4c0d      	ldr	r4, [pc, #52]	; (8001134 <__aeabi_dadd+0x374>)
 8001100:	1c72      	adds	r2, r6, #1
 8001102:	4222      	tst	r2, r4
 8001104:	d000      	beq.n	8001108 <__aeabi_dadd+0x348>
 8001106:	e0a8      	b.n	800125a <__aeabi_dadd+0x49a>
 8001108:	000a      	movs	r2, r1
 800110a:	431a      	orrs	r2, r3
 800110c:	2e00      	cmp	r6, #0
 800110e:	d000      	beq.n	8001112 <__aeabi_dadd+0x352>
 8001110:	e10a      	b.n	8001328 <__aeabi_dadd+0x568>
 8001112:	2a00      	cmp	r2, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x358>
 8001116:	e15e      	b.n	80013d6 <__aeabi_dadd+0x616>
 8001118:	464a      	mov	r2, r9
 800111a:	4302      	orrs	r2, r0
 800111c:	d000      	beq.n	8001120 <__aeabi_dadd+0x360>
 800111e:	e161      	b.n	80013e4 <__aeabi_dadd+0x624>
 8001120:	074a      	lsls	r2, r1, #29
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	4313      	orrs	r3, r2
 8001126:	08c9      	lsrs	r1, r1, #3
 8001128:	e77c      	b.n	8001024 <__aeabi_dadd+0x264>
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	000007ff 	.word	0x000007ff
 8001130:	ff7fffff 	.word	0xff7fffff
 8001134:	000007fe 	.word	0x000007fe
 8001138:	4ccf      	ldr	r4, [pc, #828]	; (8001478 <__aeabi_dadd+0x6b8>)
 800113a:	42a2      	cmp	r2, r4
 800113c:	d100      	bne.n	8001140 <__aeabi_dadd+0x380>
 800113e:	e0ce      	b.n	80012de <__aeabi_dadd+0x51e>
 8001140:	2480      	movs	r4, #128	; 0x80
 8001142:	0424      	lsls	r4, r4, #16
 8001144:	4321      	orrs	r1, r4
 8001146:	2f38      	cmp	r7, #56	; 0x38
 8001148:	dc5b      	bgt.n	8001202 <__aeabi_dadd+0x442>
 800114a:	2f1f      	cmp	r7, #31
 800114c:	dd00      	ble.n	8001150 <__aeabi_dadd+0x390>
 800114e:	e0dc      	b.n	800130a <__aeabi_dadd+0x54a>
 8001150:	2520      	movs	r5, #32
 8001152:	000c      	movs	r4, r1
 8001154:	1bed      	subs	r5, r5, r7
 8001156:	001e      	movs	r6, r3
 8001158:	40ab      	lsls	r3, r5
 800115a:	40ac      	lsls	r4, r5
 800115c:	40fe      	lsrs	r6, r7
 800115e:	1e5d      	subs	r5, r3, #1
 8001160:	41ab      	sbcs	r3, r5
 8001162:	4334      	orrs	r4, r6
 8001164:	40f9      	lsrs	r1, r7
 8001166:	431c      	orrs	r4, r3
 8001168:	464b      	mov	r3, r9
 800116a:	1a5b      	subs	r3, r3, r1
 800116c:	4699      	mov	r9, r3
 800116e:	e04c      	b.n	800120a <__aeabi_dadd+0x44a>
 8001170:	464a      	mov	r2, r9
 8001172:	1a1c      	subs	r4, r3, r0
 8001174:	1a88      	subs	r0, r1, r2
 8001176:	42a3      	cmp	r3, r4
 8001178:	4192      	sbcs	r2, r2
 800117a:	4252      	negs	r2, r2
 800117c:	4692      	mov	sl, r2
 800117e:	0002      	movs	r2, r0
 8001180:	4650      	mov	r0, sl
 8001182:	1a12      	subs	r2, r2, r0
 8001184:	4692      	mov	sl, r2
 8001186:	0212      	lsls	r2, r2, #8
 8001188:	d478      	bmi.n	800127c <__aeabi_dadd+0x4bc>
 800118a:	4653      	mov	r3, sl
 800118c:	4323      	orrs	r3, r4
 800118e:	d000      	beq.n	8001192 <__aeabi_dadd+0x3d2>
 8001190:	e66a      	b.n	8000e68 <__aeabi_dadd+0xa8>
 8001192:	2100      	movs	r1, #0
 8001194:	2500      	movs	r5, #0
 8001196:	e745      	b.n	8001024 <__aeabi_dadd+0x264>
 8001198:	074a      	lsls	r2, r1, #29
 800119a:	08db      	lsrs	r3, r3, #3
 800119c:	4313      	orrs	r3, r2
 800119e:	08c9      	lsrs	r1, r1, #3
 80011a0:	e73d      	b.n	800101e <__aeabi_dadd+0x25e>
 80011a2:	181c      	adds	r4, r3, r0
 80011a4:	429c      	cmp	r4, r3
 80011a6:	419b      	sbcs	r3, r3
 80011a8:	4449      	add	r1, r9
 80011aa:	468a      	mov	sl, r1
 80011ac:	425b      	negs	r3, r3
 80011ae:	449a      	add	sl, r3
 80011b0:	4653      	mov	r3, sl
 80011b2:	2601      	movs	r6, #1
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	d400      	bmi.n	80011ba <__aeabi_dadd+0x3fa>
 80011b8:	e727      	b.n	800100a <__aeabi_dadd+0x24a>
 80011ba:	2602      	movs	r6, #2
 80011bc:	4652      	mov	r2, sl
 80011be:	4baf      	ldr	r3, [pc, #700]	; (800147c <__aeabi_dadd+0x6bc>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	401a      	ands	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	4021      	ands	r1, r4
 80011c8:	0862      	lsrs	r2, r4, #1
 80011ca:	430a      	orrs	r2, r1
 80011cc:	07dc      	lsls	r4, r3, #31
 80011ce:	085b      	lsrs	r3, r3, #1
 80011d0:	469a      	mov	sl, r3
 80011d2:	4314      	orrs	r4, r2
 80011d4:	e670      	b.n	8000eb8 <__aeabi_dadd+0xf8>
 80011d6:	003a      	movs	r2, r7
 80011d8:	464c      	mov	r4, r9
 80011da:	3a20      	subs	r2, #32
 80011dc:	40d4      	lsrs	r4, r2
 80011de:	46a4      	mov	ip, r4
 80011e0:	2f20      	cmp	r7, #32
 80011e2:	d007      	beq.n	80011f4 <__aeabi_dadd+0x434>
 80011e4:	2240      	movs	r2, #64	; 0x40
 80011e6:	4648      	mov	r0, r9
 80011e8:	1bd2      	subs	r2, r2, r7
 80011ea:	4090      	lsls	r0, r2
 80011ec:	0002      	movs	r2, r0
 80011ee:	4640      	mov	r0, r8
 80011f0:	4310      	orrs	r0, r2
 80011f2:	4680      	mov	r8, r0
 80011f4:	4640      	mov	r0, r8
 80011f6:	1e42      	subs	r2, r0, #1
 80011f8:	4190      	sbcs	r0, r2
 80011fa:	4662      	mov	r2, ip
 80011fc:	0004      	movs	r4, r0
 80011fe:	4314      	orrs	r4, r2
 8001200:	e624      	b.n	8000e4c <__aeabi_dadd+0x8c>
 8001202:	4319      	orrs	r1, r3
 8001204:	000c      	movs	r4, r1
 8001206:	1e63      	subs	r3, r4, #1
 8001208:	419c      	sbcs	r4, r3
 800120a:	4643      	mov	r3, r8
 800120c:	1b1c      	subs	r4, r3, r4
 800120e:	45a0      	cmp	r8, r4
 8001210:	419b      	sbcs	r3, r3
 8001212:	4649      	mov	r1, r9
 8001214:	425b      	negs	r3, r3
 8001216:	1acb      	subs	r3, r1, r3
 8001218:	469a      	mov	sl, r3
 800121a:	4665      	mov	r5, ip
 800121c:	0016      	movs	r6, r2
 800121e:	e61b      	b.n	8000e58 <__aeabi_dadd+0x98>
 8001220:	000c      	movs	r4, r1
 8001222:	431c      	orrs	r4, r3
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x468>
 8001226:	e0c7      	b.n	80013b8 <__aeabi_dadd+0x5f8>
 8001228:	1e7c      	subs	r4, r7, #1
 800122a:	2f01      	cmp	r7, #1
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0x470>
 800122e:	e0f9      	b.n	8001424 <__aeabi_dadd+0x664>
 8001230:	4e91      	ldr	r6, [pc, #580]	; (8001478 <__aeabi_dadd+0x6b8>)
 8001232:	42b7      	cmp	r7, r6
 8001234:	d05c      	beq.n	80012f0 <__aeabi_dadd+0x530>
 8001236:	0027      	movs	r7, r4
 8001238:	e740      	b.n	80010bc <__aeabi_dadd+0x2fc>
 800123a:	2220      	movs	r2, #32
 800123c:	464c      	mov	r4, r9
 800123e:	4640      	mov	r0, r8
 8001240:	1bd2      	subs	r2, r2, r7
 8001242:	4094      	lsls	r4, r2
 8001244:	40f8      	lsrs	r0, r7
 8001246:	4304      	orrs	r4, r0
 8001248:	4640      	mov	r0, r8
 800124a:	4090      	lsls	r0, r2
 800124c:	1e42      	subs	r2, r0, #1
 800124e:	4190      	sbcs	r0, r2
 8001250:	464a      	mov	r2, r9
 8001252:	40fa      	lsrs	r2, r7
 8001254:	4304      	orrs	r4, r0
 8001256:	1889      	adds	r1, r1, r2
 8001258:	e6ee      	b.n	8001038 <__aeabi_dadd+0x278>
 800125a:	4c87      	ldr	r4, [pc, #540]	; (8001478 <__aeabi_dadd+0x6b8>)
 800125c:	42a2      	cmp	r2, r4
 800125e:	d100      	bne.n	8001262 <__aeabi_dadd+0x4a2>
 8001260:	e6f9      	b.n	8001056 <__aeabi_dadd+0x296>
 8001262:	1818      	adds	r0, r3, r0
 8001264:	4298      	cmp	r0, r3
 8001266:	419b      	sbcs	r3, r3
 8001268:	4449      	add	r1, r9
 800126a:	425b      	negs	r3, r3
 800126c:	18cb      	adds	r3, r1, r3
 800126e:	07dc      	lsls	r4, r3, #31
 8001270:	0840      	lsrs	r0, r0, #1
 8001272:	085b      	lsrs	r3, r3, #1
 8001274:	469a      	mov	sl, r3
 8001276:	0016      	movs	r6, r2
 8001278:	4304      	orrs	r4, r0
 800127a:	e6c6      	b.n	800100a <__aeabi_dadd+0x24a>
 800127c:	4642      	mov	r2, r8
 800127e:	1ad4      	subs	r4, r2, r3
 8001280:	45a0      	cmp	r8, r4
 8001282:	4180      	sbcs	r0, r0
 8001284:	464b      	mov	r3, r9
 8001286:	4240      	negs	r0, r0
 8001288:	1a59      	subs	r1, r3, r1
 800128a:	1a0b      	subs	r3, r1, r0
 800128c:	469a      	mov	sl, r3
 800128e:	4665      	mov	r5, ip
 8001290:	e5ea      	b.n	8000e68 <__aeabi_dadd+0xa8>
 8001292:	464b      	mov	r3, r9
 8001294:	464a      	mov	r2, r9
 8001296:	08c0      	lsrs	r0, r0, #3
 8001298:	075b      	lsls	r3, r3, #29
 800129a:	4665      	mov	r5, ip
 800129c:	4303      	orrs	r3, r0
 800129e:	08d1      	lsrs	r1, r2, #3
 80012a0:	e6bd      	b.n	800101e <__aeabi_dadd+0x25e>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d000      	beq.n	80012a8 <__aeabi_dadd+0x4e8>
 80012a6:	e08e      	b.n	80013c6 <__aeabi_dadd+0x606>
 80012a8:	464b      	mov	r3, r9
 80012aa:	4303      	orrs	r3, r0
 80012ac:	d117      	bne.n	80012de <__aeabi_dadd+0x51e>
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	2500      	movs	r5, #0
 80012b2:	0309      	lsls	r1, r1, #12
 80012b4:	e6da      	b.n	800106c <__aeabi_dadd+0x2ac>
 80012b6:	074a      	lsls	r2, r1, #29
 80012b8:	08db      	lsrs	r3, r3, #3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	08c9      	lsrs	r1, r1, #3
 80012be:	e6d1      	b.n	8001064 <__aeabi_dadd+0x2a4>
 80012c0:	1a1c      	subs	r4, r3, r0
 80012c2:	464a      	mov	r2, r9
 80012c4:	42a3      	cmp	r3, r4
 80012c6:	419b      	sbcs	r3, r3
 80012c8:	1a89      	subs	r1, r1, r2
 80012ca:	425b      	negs	r3, r3
 80012cc:	1acb      	subs	r3, r1, r3
 80012ce:	469a      	mov	sl, r3
 80012d0:	2601      	movs	r6, #1
 80012d2:	e5c1      	b.n	8000e58 <__aeabi_dadd+0x98>
 80012d4:	074a      	lsls	r2, r1, #29
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	4313      	orrs	r3, r2
 80012da:	08c9      	lsrs	r1, r1, #3
 80012dc:	e69f      	b.n	800101e <__aeabi_dadd+0x25e>
 80012de:	4643      	mov	r3, r8
 80012e0:	08d8      	lsrs	r0, r3, #3
 80012e2:	464b      	mov	r3, r9
 80012e4:	464a      	mov	r2, r9
 80012e6:	075b      	lsls	r3, r3, #29
 80012e8:	4665      	mov	r5, ip
 80012ea:	4303      	orrs	r3, r0
 80012ec:	08d1      	lsrs	r1, r2, #3
 80012ee:	e6b9      	b.n	8001064 <__aeabi_dadd+0x2a4>
 80012f0:	4643      	mov	r3, r8
 80012f2:	08d8      	lsrs	r0, r3, #3
 80012f4:	464b      	mov	r3, r9
 80012f6:	464a      	mov	r2, r9
 80012f8:	075b      	lsls	r3, r3, #29
 80012fa:	4303      	orrs	r3, r0
 80012fc:	08d1      	lsrs	r1, r2, #3
 80012fe:	e6b1      	b.n	8001064 <__aeabi_dadd+0x2a4>
 8001300:	4319      	orrs	r1, r3
 8001302:	000c      	movs	r4, r1
 8001304:	1e63      	subs	r3, r4, #1
 8001306:	419c      	sbcs	r4, r3
 8001308:	e6eb      	b.n	80010e2 <__aeabi_dadd+0x322>
 800130a:	003c      	movs	r4, r7
 800130c:	000d      	movs	r5, r1
 800130e:	3c20      	subs	r4, #32
 8001310:	40e5      	lsrs	r5, r4
 8001312:	2f20      	cmp	r7, #32
 8001314:	d003      	beq.n	800131e <__aeabi_dadd+0x55e>
 8001316:	2440      	movs	r4, #64	; 0x40
 8001318:	1be4      	subs	r4, r4, r7
 800131a:	40a1      	lsls	r1, r4
 800131c:	430b      	orrs	r3, r1
 800131e:	001c      	movs	r4, r3
 8001320:	1e63      	subs	r3, r4, #1
 8001322:	419c      	sbcs	r4, r3
 8001324:	432c      	orrs	r4, r5
 8001326:	e770      	b.n	800120a <__aeabi_dadd+0x44a>
 8001328:	2a00      	cmp	r2, #0
 800132a:	d0e1      	beq.n	80012f0 <__aeabi_dadd+0x530>
 800132c:	464a      	mov	r2, r9
 800132e:	4302      	orrs	r2, r0
 8001330:	d0c1      	beq.n	80012b6 <__aeabi_dadd+0x4f6>
 8001332:	074a      	lsls	r2, r1, #29
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	4313      	orrs	r3, r2
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	08c9      	lsrs	r1, r1, #3
 800133c:	0312      	lsls	r2, r2, #12
 800133e:	4211      	tst	r1, r2
 8001340:	d008      	beq.n	8001354 <__aeabi_dadd+0x594>
 8001342:	4648      	mov	r0, r9
 8001344:	08c4      	lsrs	r4, r0, #3
 8001346:	4214      	tst	r4, r2
 8001348:	d104      	bne.n	8001354 <__aeabi_dadd+0x594>
 800134a:	4643      	mov	r3, r8
 800134c:	0021      	movs	r1, r4
 800134e:	08db      	lsrs	r3, r3, #3
 8001350:	0742      	lsls	r2, r0, #29
 8001352:	4313      	orrs	r3, r2
 8001354:	0f5a      	lsrs	r2, r3, #29
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	0752      	lsls	r2, r2, #29
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	4313      	orrs	r3, r2
 800135e:	e681      	b.n	8001064 <__aeabi_dadd+0x2a4>
 8001360:	464b      	mov	r3, r9
 8001362:	4303      	orrs	r3, r0
 8001364:	d100      	bne.n	8001368 <__aeabi_dadd+0x5a8>
 8001366:	e714      	b.n	8001192 <__aeabi_dadd+0x3d2>
 8001368:	464b      	mov	r3, r9
 800136a:	464a      	mov	r2, r9
 800136c:	08c0      	lsrs	r0, r0, #3
 800136e:	075b      	lsls	r3, r3, #29
 8001370:	4665      	mov	r5, ip
 8001372:	4303      	orrs	r3, r0
 8001374:	08d1      	lsrs	r1, r2, #3
 8001376:	e655      	b.n	8001024 <__aeabi_dadd+0x264>
 8001378:	1ac4      	subs	r4, r0, r3
 800137a:	45a0      	cmp	r8, r4
 800137c:	4180      	sbcs	r0, r0
 800137e:	464b      	mov	r3, r9
 8001380:	4240      	negs	r0, r0
 8001382:	1a59      	subs	r1, r3, r1
 8001384:	1a0b      	subs	r3, r1, r0
 8001386:	469a      	mov	sl, r3
 8001388:	4665      	mov	r5, ip
 800138a:	2601      	movs	r6, #1
 800138c:	e564      	b.n	8000e58 <__aeabi_dadd+0x98>
 800138e:	1a1c      	subs	r4, r3, r0
 8001390:	464a      	mov	r2, r9
 8001392:	42a3      	cmp	r3, r4
 8001394:	4180      	sbcs	r0, r0
 8001396:	1a8a      	subs	r2, r1, r2
 8001398:	4240      	negs	r0, r0
 800139a:	1a12      	subs	r2, r2, r0
 800139c:	4692      	mov	sl, r2
 800139e:	0212      	lsls	r2, r2, #8
 80013a0:	d549      	bpl.n	8001436 <__aeabi_dadd+0x676>
 80013a2:	4642      	mov	r2, r8
 80013a4:	1ad4      	subs	r4, r2, r3
 80013a6:	45a0      	cmp	r8, r4
 80013a8:	4180      	sbcs	r0, r0
 80013aa:	464b      	mov	r3, r9
 80013ac:	4240      	negs	r0, r0
 80013ae:	1a59      	subs	r1, r3, r1
 80013b0:	1a0b      	subs	r3, r1, r0
 80013b2:	469a      	mov	sl, r3
 80013b4:	4665      	mov	r5, ip
 80013b6:	e57f      	b.n	8000eb8 <__aeabi_dadd+0xf8>
 80013b8:	464b      	mov	r3, r9
 80013ba:	464a      	mov	r2, r9
 80013bc:	08c0      	lsrs	r0, r0, #3
 80013be:	075b      	lsls	r3, r3, #29
 80013c0:	4303      	orrs	r3, r0
 80013c2:	08d1      	lsrs	r1, r2, #3
 80013c4:	e62b      	b.n	800101e <__aeabi_dadd+0x25e>
 80013c6:	464a      	mov	r2, r9
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	4302      	orrs	r2, r0
 80013cc:	d138      	bne.n	8001440 <__aeabi_dadd+0x680>
 80013ce:	074a      	lsls	r2, r1, #29
 80013d0:	4313      	orrs	r3, r2
 80013d2:	08c9      	lsrs	r1, r1, #3
 80013d4:	e646      	b.n	8001064 <__aeabi_dadd+0x2a4>
 80013d6:	464b      	mov	r3, r9
 80013d8:	464a      	mov	r2, r9
 80013da:	08c0      	lsrs	r0, r0, #3
 80013dc:	075b      	lsls	r3, r3, #29
 80013de:	4303      	orrs	r3, r0
 80013e0:	08d1      	lsrs	r1, r2, #3
 80013e2:	e61f      	b.n	8001024 <__aeabi_dadd+0x264>
 80013e4:	181c      	adds	r4, r3, r0
 80013e6:	429c      	cmp	r4, r3
 80013e8:	419b      	sbcs	r3, r3
 80013ea:	4449      	add	r1, r9
 80013ec:	468a      	mov	sl, r1
 80013ee:	425b      	negs	r3, r3
 80013f0:	449a      	add	sl, r3
 80013f2:	4653      	mov	r3, sl
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	d400      	bmi.n	80013fa <__aeabi_dadd+0x63a>
 80013f8:	e607      	b.n	800100a <__aeabi_dadd+0x24a>
 80013fa:	4652      	mov	r2, sl
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <__aeabi_dadd+0x6bc>)
 80013fe:	2601      	movs	r6, #1
 8001400:	401a      	ands	r2, r3
 8001402:	4692      	mov	sl, r2
 8001404:	e601      	b.n	800100a <__aeabi_dadd+0x24a>
 8001406:	003c      	movs	r4, r7
 8001408:	000e      	movs	r6, r1
 800140a:	3c20      	subs	r4, #32
 800140c:	40e6      	lsrs	r6, r4
 800140e:	2f20      	cmp	r7, #32
 8001410:	d003      	beq.n	800141a <__aeabi_dadd+0x65a>
 8001412:	2440      	movs	r4, #64	; 0x40
 8001414:	1be4      	subs	r4, r4, r7
 8001416:	40a1      	lsls	r1, r4
 8001418:	430b      	orrs	r3, r1
 800141a:	001c      	movs	r4, r3
 800141c:	1e63      	subs	r3, r4, #1
 800141e:	419c      	sbcs	r4, r3
 8001420:	4334      	orrs	r4, r6
 8001422:	e65e      	b.n	80010e2 <__aeabi_dadd+0x322>
 8001424:	4443      	add	r3, r8
 8001426:	4283      	cmp	r3, r0
 8001428:	4180      	sbcs	r0, r0
 800142a:	4449      	add	r1, r9
 800142c:	468a      	mov	sl, r1
 800142e:	4240      	negs	r0, r0
 8001430:	001c      	movs	r4, r3
 8001432:	4482      	add	sl, r0
 8001434:	e6bc      	b.n	80011b0 <__aeabi_dadd+0x3f0>
 8001436:	4653      	mov	r3, sl
 8001438:	4323      	orrs	r3, r4
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x67e>
 800143c:	e6a9      	b.n	8001192 <__aeabi_dadd+0x3d2>
 800143e:	e5e4      	b.n	800100a <__aeabi_dadd+0x24a>
 8001440:	074a      	lsls	r2, r1, #29
 8001442:	4313      	orrs	r3, r2
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	08c9      	lsrs	r1, r1, #3
 8001448:	0312      	lsls	r2, r2, #12
 800144a:	4211      	tst	r1, r2
 800144c:	d009      	beq.n	8001462 <__aeabi_dadd+0x6a2>
 800144e:	4648      	mov	r0, r9
 8001450:	08c4      	lsrs	r4, r0, #3
 8001452:	4214      	tst	r4, r2
 8001454:	d105      	bne.n	8001462 <__aeabi_dadd+0x6a2>
 8001456:	4643      	mov	r3, r8
 8001458:	4665      	mov	r5, ip
 800145a:	0021      	movs	r1, r4
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	0742      	lsls	r2, r0, #29
 8001460:	4313      	orrs	r3, r2
 8001462:	0f5a      	lsrs	r2, r3, #29
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	08db      	lsrs	r3, r3, #3
 8001468:	0752      	lsls	r2, r2, #29
 800146a:	4313      	orrs	r3, r2
 800146c:	e5fa      	b.n	8001064 <__aeabi_dadd+0x2a4>
 800146e:	2300      	movs	r3, #0
 8001470:	4a01      	ldr	r2, [pc, #4]	; (8001478 <__aeabi_dadd+0x6b8>)
 8001472:	001c      	movs	r4, r3
 8001474:	e540      	b.n	8000ef8 <__aeabi_dadd+0x138>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	000007ff 	.word	0x000007ff
 800147c:	ff7fffff 	.word	0xff7fffff

08001480 <__aeabi_ddiv>:
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	4657      	mov	r7, sl
 8001484:	464e      	mov	r6, r9
 8001486:	4645      	mov	r5, r8
 8001488:	46de      	mov	lr, fp
 800148a:	b5e0      	push	{r5, r6, r7, lr}
 800148c:	030c      	lsls	r4, r1, #12
 800148e:	001f      	movs	r7, r3
 8001490:	004b      	lsls	r3, r1, #1
 8001492:	4681      	mov	r9, r0
 8001494:	4692      	mov	sl, r2
 8001496:	0005      	movs	r5, r0
 8001498:	b085      	sub	sp, #20
 800149a:	0b24      	lsrs	r4, r4, #12
 800149c:	0d5b      	lsrs	r3, r3, #21
 800149e:	0fce      	lsrs	r6, r1, #31
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_ddiv+0x26>
 80014a4:	e152      	b.n	800174c <__aeabi_ddiv+0x2cc>
 80014a6:	4ad2      	ldr	r2, [pc, #840]	; (80017f0 <__aeabi_ddiv+0x370>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d100      	bne.n	80014ae <__aeabi_ddiv+0x2e>
 80014ac:	e16e      	b.n	800178c <__aeabi_ddiv+0x30c>
 80014ae:	0f42      	lsrs	r2, r0, #29
 80014b0:	00e4      	lsls	r4, r4, #3
 80014b2:	4314      	orrs	r4, r2
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	0412      	lsls	r2, r2, #16
 80014b8:	4322      	orrs	r2, r4
 80014ba:	4690      	mov	r8, r2
 80014bc:	4acd      	ldr	r2, [pc, #820]	; (80017f4 <__aeabi_ddiv+0x374>)
 80014be:	00c5      	lsls	r5, r0, #3
 80014c0:	4693      	mov	fp, r2
 80014c2:	449b      	add	fp, r3
 80014c4:	2300      	movs	r3, #0
 80014c6:	4699      	mov	r9, r3
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	033c      	lsls	r4, r7, #12
 80014cc:	007b      	lsls	r3, r7, #1
 80014ce:	4650      	mov	r0, sl
 80014d0:	0b24      	lsrs	r4, r4, #12
 80014d2:	0d5b      	lsrs	r3, r3, #21
 80014d4:	0fff      	lsrs	r7, r7, #31
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d100      	bne.n	80014dc <__aeabi_ddiv+0x5c>
 80014da:	e11a      	b.n	8001712 <__aeabi_ddiv+0x292>
 80014dc:	4ac4      	ldr	r2, [pc, #784]	; (80017f0 <__aeabi_ddiv+0x370>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d100      	bne.n	80014e4 <__aeabi_ddiv+0x64>
 80014e2:	e15e      	b.n	80017a2 <__aeabi_ddiv+0x322>
 80014e4:	0f42      	lsrs	r2, r0, #29
 80014e6:	00e4      	lsls	r4, r4, #3
 80014e8:	4322      	orrs	r2, r4
 80014ea:	2480      	movs	r4, #128	; 0x80
 80014ec:	0424      	lsls	r4, r4, #16
 80014ee:	4314      	orrs	r4, r2
 80014f0:	4ac0      	ldr	r2, [pc, #768]	; (80017f4 <__aeabi_ddiv+0x374>)
 80014f2:	00c1      	lsls	r1, r0, #3
 80014f4:	4694      	mov	ip, r2
 80014f6:	465a      	mov	r2, fp
 80014f8:	4463      	add	r3, ip
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	469b      	mov	fp, r3
 80014fe:	2000      	movs	r0, #0
 8001500:	0033      	movs	r3, r6
 8001502:	407b      	eors	r3, r7
 8001504:	469a      	mov	sl, r3
 8001506:	464b      	mov	r3, r9
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d827      	bhi.n	800155c <__aeabi_ddiv+0xdc>
 800150c:	4aba      	ldr	r2, [pc, #744]	; (80017f8 <__aeabi_ddiv+0x378>)
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	58d3      	ldr	r3, [r2, r3]
 8001512:	469f      	mov	pc, r3
 8001514:	46b2      	mov	sl, r6
 8001516:	9b00      	ldr	r3, [sp, #0]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d016      	beq.n	800154a <__aeabi_ddiv+0xca>
 800151c:	2b03      	cmp	r3, #3
 800151e:	d100      	bne.n	8001522 <__aeabi_ddiv+0xa2>
 8001520:	e287      	b.n	8001a32 <__aeabi_ddiv+0x5b2>
 8001522:	2b01      	cmp	r3, #1
 8001524:	d000      	beq.n	8001528 <__aeabi_ddiv+0xa8>
 8001526:	e0d5      	b.n	80016d4 <__aeabi_ddiv+0x254>
 8001528:	2300      	movs	r3, #0
 800152a:	2200      	movs	r2, #0
 800152c:	2500      	movs	r5, #0
 800152e:	051b      	lsls	r3, r3, #20
 8001530:	4313      	orrs	r3, r2
 8001532:	4652      	mov	r2, sl
 8001534:	07d2      	lsls	r2, r2, #31
 8001536:	4313      	orrs	r3, r2
 8001538:	0028      	movs	r0, r5
 800153a:	0019      	movs	r1, r3
 800153c:	b005      	add	sp, #20
 800153e:	bcf0      	pop	{r4, r5, r6, r7}
 8001540:	46bb      	mov	fp, r7
 8001542:	46b2      	mov	sl, r6
 8001544:	46a9      	mov	r9, r5
 8001546:	46a0      	mov	r8, r4
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154a:	2200      	movs	r2, #0
 800154c:	2500      	movs	r5, #0
 800154e:	4ba8      	ldr	r3, [pc, #672]	; (80017f0 <__aeabi_ddiv+0x370>)
 8001550:	e7ed      	b.n	800152e <__aeabi_ddiv+0xae>
 8001552:	46ba      	mov	sl, r7
 8001554:	46a0      	mov	r8, r4
 8001556:	000d      	movs	r5, r1
 8001558:	9000      	str	r0, [sp, #0]
 800155a:	e7dc      	b.n	8001516 <__aeabi_ddiv+0x96>
 800155c:	4544      	cmp	r4, r8
 800155e:	d200      	bcs.n	8001562 <__aeabi_ddiv+0xe2>
 8001560:	e1c4      	b.n	80018ec <__aeabi_ddiv+0x46c>
 8001562:	d100      	bne.n	8001566 <__aeabi_ddiv+0xe6>
 8001564:	e1bf      	b.n	80018e6 <__aeabi_ddiv+0x466>
 8001566:	2301      	movs	r3, #1
 8001568:	425b      	negs	r3, r3
 800156a:	469c      	mov	ip, r3
 800156c:	002e      	movs	r6, r5
 800156e:	4640      	mov	r0, r8
 8001570:	2500      	movs	r5, #0
 8001572:	44e3      	add	fp, ip
 8001574:	0223      	lsls	r3, r4, #8
 8001576:	0e0c      	lsrs	r4, r1, #24
 8001578:	431c      	orrs	r4, r3
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	4699      	mov	r9, r3
 800157e:	0423      	lsls	r3, r4, #16
 8001580:	020a      	lsls	r2, r1, #8
 8001582:	0c1f      	lsrs	r7, r3, #16
 8001584:	4649      	mov	r1, r9
 8001586:	9200      	str	r2, [sp, #0]
 8001588:	9701      	str	r7, [sp, #4]
 800158a:	f7fe fe5f 	bl	800024c <__aeabi_uidivmod>
 800158e:	0002      	movs	r2, r0
 8001590:	437a      	muls	r2, r7
 8001592:	040b      	lsls	r3, r1, #16
 8001594:	0c31      	lsrs	r1, r6, #16
 8001596:	4680      	mov	r8, r0
 8001598:	4319      	orrs	r1, r3
 800159a:	428a      	cmp	r2, r1
 800159c:	d907      	bls.n	80015ae <__aeabi_ddiv+0x12e>
 800159e:	2301      	movs	r3, #1
 80015a0:	425b      	negs	r3, r3
 80015a2:	469c      	mov	ip, r3
 80015a4:	1909      	adds	r1, r1, r4
 80015a6:	44e0      	add	r8, ip
 80015a8:	428c      	cmp	r4, r1
 80015aa:	d800      	bhi.n	80015ae <__aeabi_ddiv+0x12e>
 80015ac:	e201      	b.n	80019b2 <__aeabi_ddiv+0x532>
 80015ae:	1a88      	subs	r0, r1, r2
 80015b0:	4649      	mov	r1, r9
 80015b2:	f7fe fe4b 	bl	800024c <__aeabi_uidivmod>
 80015b6:	9a01      	ldr	r2, [sp, #4]
 80015b8:	0436      	lsls	r6, r6, #16
 80015ba:	4342      	muls	r2, r0
 80015bc:	0409      	lsls	r1, r1, #16
 80015be:	0c36      	lsrs	r6, r6, #16
 80015c0:	0003      	movs	r3, r0
 80015c2:	430e      	orrs	r6, r1
 80015c4:	42b2      	cmp	r2, r6
 80015c6:	d904      	bls.n	80015d2 <__aeabi_ddiv+0x152>
 80015c8:	1936      	adds	r6, r6, r4
 80015ca:	3b01      	subs	r3, #1
 80015cc:	42b4      	cmp	r4, r6
 80015ce:	d800      	bhi.n	80015d2 <__aeabi_ddiv+0x152>
 80015d0:	e1e9      	b.n	80019a6 <__aeabi_ddiv+0x526>
 80015d2:	1ab0      	subs	r0, r6, r2
 80015d4:	4642      	mov	r2, r8
 80015d6:	9e00      	ldr	r6, [sp, #0]
 80015d8:	0412      	lsls	r2, r2, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	0c33      	lsrs	r3, r6, #16
 80015de:	001f      	movs	r7, r3
 80015e0:	0c11      	lsrs	r1, r2, #16
 80015e2:	4690      	mov	r8, r2
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	0413      	lsls	r3, r2, #16
 80015e8:	0432      	lsls	r2, r6, #16
 80015ea:	0c16      	lsrs	r6, r2, #16
 80015ec:	0032      	movs	r2, r6
 80015ee:	0c1b      	lsrs	r3, r3, #16
 80015f0:	435a      	muls	r2, r3
 80015f2:	9603      	str	r6, [sp, #12]
 80015f4:	437b      	muls	r3, r7
 80015f6:	434e      	muls	r6, r1
 80015f8:	4379      	muls	r1, r7
 80015fa:	0c17      	lsrs	r7, r2, #16
 80015fc:	46bc      	mov	ip, r7
 80015fe:	199b      	adds	r3, r3, r6
 8001600:	4463      	add	r3, ip
 8001602:	429e      	cmp	r6, r3
 8001604:	d903      	bls.n	800160e <__aeabi_ddiv+0x18e>
 8001606:	2680      	movs	r6, #128	; 0x80
 8001608:	0276      	lsls	r6, r6, #9
 800160a:	46b4      	mov	ip, r6
 800160c:	4461      	add	r1, ip
 800160e:	0c1e      	lsrs	r6, r3, #16
 8001610:	1871      	adds	r1, r6, r1
 8001612:	0416      	lsls	r6, r2, #16
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	0c36      	lsrs	r6, r6, #16
 8001618:	199e      	adds	r6, r3, r6
 800161a:	4288      	cmp	r0, r1
 800161c:	d302      	bcc.n	8001624 <__aeabi_ddiv+0x1a4>
 800161e:	d112      	bne.n	8001646 <__aeabi_ddiv+0x1c6>
 8001620:	42b5      	cmp	r5, r6
 8001622:	d210      	bcs.n	8001646 <__aeabi_ddiv+0x1c6>
 8001624:	4643      	mov	r3, r8
 8001626:	1e5a      	subs	r2, r3, #1
 8001628:	9b00      	ldr	r3, [sp, #0]
 800162a:	469c      	mov	ip, r3
 800162c:	4465      	add	r5, ip
 800162e:	001f      	movs	r7, r3
 8001630:	429d      	cmp	r5, r3
 8001632:	419b      	sbcs	r3, r3
 8001634:	425b      	negs	r3, r3
 8001636:	191b      	adds	r3, r3, r4
 8001638:	18c0      	adds	r0, r0, r3
 800163a:	4284      	cmp	r4, r0
 800163c:	d200      	bcs.n	8001640 <__aeabi_ddiv+0x1c0>
 800163e:	e19e      	b.n	800197e <__aeabi_ddiv+0x4fe>
 8001640:	d100      	bne.n	8001644 <__aeabi_ddiv+0x1c4>
 8001642:	e199      	b.n	8001978 <__aeabi_ddiv+0x4f8>
 8001644:	4690      	mov	r8, r2
 8001646:	1bae      	subs	r6, r5, r6
 8001648:	42b5      	cmp	r5, r6
 800164a:	41ad      	sbcs	r5, r5
 800164c:	1a40      	subs	r0, r0, r1
 800164e:	426d      	negs	r5, r5
 8001650:	1b40      	subs	r0, r0, r5
 8001652:	4284      	cmp	r4, r0
 8001654:	d100      	bne.n	8001658 <__aeabi_ddiv+0x1d8>
 8001656:	e1d2      	b.n	80019fe <__aeabi_ddiv+0x57e>
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe fdf7 	bl	800024c <__aeabi_uidivmod>
 800165e:	9a01      	ldr	r2, [sp, #4]
 8001660:	040b      	lsls	r3, r1, #16
 8001662:	4342      	muls	r2, r0
 8001664:	0c31      	lsrs	r1, r6, #16
 8001666:	0005      	movs	r5, r0
 8001668:	4319      	orrs	r1, r3
 800166a:	428a      	cmp	r2, r1
 800166c:	d900      	bls.n	8001670 <__aeabi_ddiv+0x1f0>
 800166e:	e16c      	b.n	800194a <__aeabi_ddiv+0x4ca>
 8001670:	1a88      	subs	r0, r1, r2
 8001672:	4649      	mov	r1, r9
 8001674:	f7fe fdea 	bl	800024c <__aeabi_uidivmod>
 8001678:	9a01      	ldr	r2, [sp, #4]
 800167a:	0436      	lsls	r6, r6, #16
 800167c:	4342      	muls	r2, r0
 800167e:	0409      	lsls	r1, r1, #16
 8001680:	0c36      	lsrs	r6, r6, #16
 8001682:	0003      	movs	r3, r0
 8001684:	430e      	orrs	r6, r1
 8001686:	42b2      	cmp	r2, r6
 8001688:	d900      	bls.n	800168c <__aeabi_ddiv+0x20c>
 800168a:	e153      	b.n	8001934 <__aeabi_ddiv+0x4b4>
 800168c:	9803      	ldr	r0, [sp, #12]
 800168e:	1ab6      	subs	r6, r6, r2
 8001690:	0002      	movs	r2, r0
 8001692:	042d      	lsls	r5, r5, #16
 8001694:	431d      	orrs	r5, r3
 8001696:	9f02      	ldr	r7, [sp, #8]
 8001698:	042b      	lsls	r3, r5, #16
 800169a:	0c1b      	lsrs	r3, r3, #16
 800169c:	435a      	muls	r2, r3
 800169e:	437b      	muls	r3, r7
 80016a0:	469c      	mov	ip, r3
 80016a2:	0c29      	lsrs	r1, r5, #16
 80016a4:	4348      	muls	r0, r1
 80016a6:	0c13      	lsrs	r3, r2, #16
 80016a8:	4484      	add	ip, r0
 80016aa:	4463      	add	r3, ip
 80016ac:	4379      	muls	r1, r7
 80016ae:	4298      	cmp	r0, r3
 80016b0:	d903      	bls.n	80016ba <__aeabi_ddiv+0x23a>
 80016b2:	2080      	movs	r0, #128	; 0x80
 80016b4:	0240      	lsls	r0, r0, #9
 80016b6:	4684      	mov	ip, r0
 80016b8:	4461      	add	r1, ip
 80016ba:	0c18      	lsrs	r0, r3, #16
 80016bc:	0412      	lsls	r2, r2, #16
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	0c12      	lsrs	r2, r2, #16
 80016c2:	1840      	adds	r0, r0, r1
 80016c4:	189b      	adds	r3, r3, r2
 80016c6:	4286      	cmp	r6, r0
 80016c8:	d200      	bcs.n	80016cc <__aeabi_ddiv+0x24c>
 80016ca:	e100      	b.n	80018ce <__aeabi_ddiv+0x44e>
 80016cc:	d100      	bne.n	80016d0 <__aeabi_ddiv+0x250>
 80016ce:	e0fb      	b.n	80018c8 <__aeabi_ddiv+0x448>
 80016d0:	2301      	movs	r3, #1
 80016d2:	431d      	orrs	r5, r3
 80016d4:	4b49      	ldr	r3, [pc, #292]	; (80017fc <__aeabi_ddiv+0x37c>)
 80016d6:	445b      	add	r3, fp
 80016d8:	2b00      	cmp	r3, #0
 80016da:	dc00      	bgt.n	80016de <__aeabi_ddiv+0x25e>
 80016dc:	e0aa      	b.n	8001834 <__aeabi_ddiv+0x3b4>
 80016de:	076a      	lsls	r2, r5, #29
 80016e0:	d000      	beq.n	80016e4 <__aeabi_ddiv+0x264>
 80016e2:	e13d      	b.n	8001960 <__aeabi_ddiv+0x4e0>
 80016e4:	08e9      	lsrs	r1, r5, #3
 80016e6:	4642      	mov	r2, r8
 80016e8:	01d2      	lsls	r2, r2, #7
 80016ea:	d506      	bpl.n	80016fa <__aeabi_ddiv+0x27a>
 80016ec:	4642      	mov	r2, r8
 80016ee:	4b44      	ldr	r3, [pc, #272]	; (8001800 <__aeabi_ddiv+0x380>)
 80016f0:	401a      	ands	r2, r3
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	4690      	mov	r8, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	445b      	add	r3, fp
 80016fa:	4a42      	ldr	r2, [pc, #264]	; (8001804 <__aeabi_ddiv+0x384>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	dd00      	ble.n	8001702 <__aeabi_ddiv+0x282>
 8001700:	e723      	b.n	800154a <__aeabi_ddiv+0xca>
 8001702:	4642      	mov	r2, r8
 8001704:	055b      	lsls	r3, r3, #21
 8001706:	0755      	lsls	r5, r2, #29
 8001708:	0252      	lsls	r2, r2, #9
 800170a:	430d      	orrs	r5, r1
 800170c:	0b12      	lsrs	r2, r2, #12
 800170e:	0d5b      	lsrs	r3, r3, #21
 8001710:	e70d      	b.n	800152e <__aeabi_ddiv+0xae>
 8001712:	4651      	mov	r1, sl
 8001714:	4321      	orrs	r1, r4
 8001716:	d100      	bne.n	800171a <__aeabi_ddiv+0x29a>
 8001718:	e07c      	b.n	8001814 <__aeabi_ddiv+0x394>
 800171a:	2c00      	cmp	r4, #0
 800171c:	d100      	bne.n	8001720 <__aeabi_ddiv+0x2a0>
 800171e:	e0fb      	b.n	8001918 <__aeabi_ddiv+0x498>
 8001720:	0020      	movs	r0, r4
 8001722:	f001 fa63 	bl	8002bec <__clzsi2>
 8001726:	0002      	movs	r2, r0
 8001728:	3a0b      	subs	r2, #11
 800172a:	231d      	movs	r3, #29
 800172c:	1a9b      	subs	r3, r3, r2
 800172e:	4652      	mov	r2, sl
 8001730:	0001      	movs	r1, r0
 8001732:	40da      	lsrs	r2, r3
 8001734:	4653      	mov	r3, sl
 8001736:	3908      	subs	r1, #8
 8001738:	408b      	lsls	r3, r1
 800173a:	408c      	lsls	r4, r1
 800173c:	0019      	movs	r1, r3
 800173e:	4314      	orrs	r4, r2
 8001740:	4b31      	ldr	r3, [pc, #196]	; (8001808 <__aeabi_ddiv+0x388>)
 8001742:	4458      	add	r0, fp
 8001744:	469b      	mov	fp, r3
 8001746:	4483      	add	fp, r0
 8001748:	2000      	movs	r0, #0
 800174a:	e6d9      	b.n	8001500 <__aeabi_ddiv+0x80>
 800174c:	0003      	movs	r3, r0
 800174e:	4323      	orrs	r3, r4
 8001750:	4698      	mov	r8, r3
 8001752:	d044      	beq.n	80017de <__aeabi_ddiv+0x35e>
 8001754:	2c00      	cmp	r4, #0
 8001756:	d100      	bne.n	800175a <__aeabi_ddiv+0x2da>
 8001758:	e0cf      	b.n	80018fa <__aeabi_ddiv+0x47a>
 800175a:	0020      	movs	r0, r4
 800175c:	f001 fa46 	bl	8002bec <__clzsi2>
 8001760:	0001      	movs	r1, r0
 8001762:	0002      	movs	r2, r0
 8001764:	390b      	subs	r1, #11
 8001766:	231d      	movs	r3, #29
 8001768:	1a5b      	subs	r3, r3, r1
 800176a:	4649      	mov	r1, r9
 800176c:	0010      	movs	r0, r2
 800176e:	40d9      	lsrs	r1, r3
 8001770:	3808      	subs	r0, #8
 8001772:	4084      	lsls	r4, r0
 8001774:	000b      	movs	r3, r1
 8001776:	464d      	mov	r5, r9
 8001778:	4323      	orrs	r3, r4
 800177a:	4698      	mov	r8, r3
 800177c:	4085      	lsls	r5, r0
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <__aeabi_ddiv+0x38c>)
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	469b      	mov	fp, r3
 8001784:	2300      	movs	r3, #0
 8001786:	4699      	mov	r9, r3
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	e69e      	b.n	80014ca <__aeabi_ddiv+0x4a>
 800178c:	0002      	movs	r2, r0
 800178e:	4322      	orrs	r2, r4
 8001790:	4690      	mov	r8, r2
 8001792:	d11d      	bne.n	80017d0 <__aeabi_ddiv+0x350>
 8001794:	2208      	movs	r2, #8
 8001796:	469b      	mov	fp, r3
 8001798:	2302      	movs	r3, #2
 800179a:	2500      	movs	r5, #0
 800179c:	4691      	mov	r9, r2
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	e693      	b.n	80014ca <__aeabi_ddiv+0x4a>
 80017a2:	4651      	mov	r1, sl
 80017a4:	4321      	orrs	r1, r4
 80017a6:	d109      	bne.n	80017bc <__aeabi_ddiv+0x33c>
 80017a8:	2302      	movs	r3, #2
 80017aa:	464a      	mov	r2, r9
 80017ac:	431a      	orrs	r2, r3
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <__aeabi_ddiv+0x390>)
 80017b0:	4691      	mov	r9, r2
 80017b2:	469c      	mov	ip, r3
 80017b4:	2400      	movs	r4, #0
 80017b6:	2002      	movs	r0, #2
 80017b8:	44e3      	add	fp, ip
 80017ba:	e6a1      	b.n	8001500 <__aeabi_ddiv+0x80>
 80017bc:	2303      	movs	r3, #3
 80017be:	464a      	mov	r2, r9
 80017c0:	431a      	orrs	r2, r3
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <__aeabi_ddiv+0x390>)
 80017c4:	4691      	mov	r9, r2
 80017c6:	469c      	mov	ip, r3
 80017c8:	4651      	mov	r1, sl
 80017ca:	2003      	movs	r0, #3
 80017cc:	44e3      	add	fp, ip
 80017ce:	e697      	b.n	8001500 <__aeabi_ddiv+0x80>
 80017d0:	220c      	movs	r2, #12
 80017d2:	469b      	mov	fp, r3
 80017d4:	2303      	movs	r3, #3
 80017d6:	46a0      	mov	r8, r4
 80017d8:	4691      	mov	r9, r2
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	e675      	b.n	80014ca <__aeabi_ddiv+0x4a>
 80017de:	2304      	movs	r3, #4
 80017e0:	4699      	mov	r9, r3
 80017e2:	2300      	movs	r3, #0
 80017e4:	469b      	mov	fp, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	2500      	movs	r5, #0
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	e66d      	b.n	80014ca <__aeabi_ddiv+0x4a>
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	fffffc01 	.word	0xfffffc01
 80017f8:	0800e830 	.word	0x0800e830
 80017fc:	000003ff 	.word	0x000003ff
 8001800:	feffffff 	.word	0xfeffffff
 8001804:	000007fe 	.word	0x000007fe
 8001808:	000003f3 	.word	0x000003f3
 800180c:	fffffc0d 	.word	0xfffffc0d
 8001810:	fffff801 	.word	0xfffff801
 8001814:	464a      	mov	r2, r9
 8001816:	2301      	movs	r3, #1
 8001818:	431a      	orrs	r2, r3
 800181a:	4691      	mov	r9, r2
 800181c:	2400      	movs	r4, #0
 800181e:	2001      	movs	r0, #1
 8001820:	e66e      	b.n	8001500 <__aeabi_ddiv+0x80>
 8001822:	2300      	movs	r3, #0
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	469a      	mov	sl, r3
 8001828:	2500      	movs	r5, #0
 800182a:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 800182c:	0312      	lsls	r2, r2, #12
 800182e:	e67e      	b.n	800152e <__aeabi_ddiv+0xae>
 8001830:	2501      	movs	r5, #1
 8001832:	426d      	negs	r5, r5
 8001834:	2201      	movs	r2, #1
 8001836:	1ad2      	subs	r2, r2, r3
 8001838:	2a38      	cmp	r2, #56	; 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_ddiv+0x3be>
 800183c:	e674      	b.n	8001528 <__aeabi_ddiv+0xa8>
 800183e:	2a1f      	cmp	r2, #31
 8001840:	dc00      	bgt.n	8001844 <__aeabi_ddiv+0x3c4>
 8001842:	e0bd      	b.n	80019c0 <__aeabi_ddiv+0x540>
 8001844:	211f      	movs	r1, #31
 8001846:	4249      	negs	r1, r1
 8001848:	1acb      	subs	r3, r1, r3
 800184a:	4641      	mov	r1, r8
 800184c:	40d9      	lsrs	r1, r3
 800184e:	000b      	movs	r3, r1
 8001850:	2a20      	cmp	r2, #32
 8001852:	d004      	beq.n	800185e <__aeabi_ddiv+0x3de>
 8001854:	4641      	mov	r1, r8
 8001856:	4a7e      	ldr	r2, [pc, #504]	; (8001a50 <__aeabi_ddiv+0x5d0>)
 8001858:	445a      	add	r2, fp
 800185a:	4091      	lsls	r1, r2
 800185c:	430d      	orrs	r5, r1
 800185e:	0029      	movs	r1, r5
 8001860:	1e4a      	subs	r2, r1, #1
 8001862:	4191      	sbcs	r1, r2
 8001864:	4319      	orrs	r1, r3
 8001866:	2307      	movs	r3, #7
 8001868:	001d      	movs	r5, r3
 800186a:	2200      	movs	r2, #0
 800186c:	400d      	ands	r5, r1
 800186e:	420b      	tst	r3, r1
 8001870:	d100      	bne.n	8001874 <__aeabi_ddiv+0x3f4>
 8001872:	e0d0      	b.n	8001a16 <__aeabi_ddiv+0x596>
 8001874:	220f      	movs	r2, #15
 8001876:	2300      	movs	r3, #0
 8001878:	400a      	ands	r2, r1
 800187a:	2a04      	cmp	r2, #4
 800187c:	d100      	bne.n	8001880 <__aeabi_ddiv+0x400>
 800187e:	e0c7      	b.n	8001a10 <__aeabi_ddiv+0x590>
 8001880:	1d0a      	adds	r2, r1, #4
 8001882:	428a      	cmp	r2, r1
 8001884:	4189      	sbcs	r1, r1
 8001886:	4249      	negs	r1, r1
 8001888:	185b      	adds	r3, r3, r1
 800188a:	0011      	movs	r1, r2
 800188c:	021a      	lsls	r2, r3, #8
 800188e:	d400      	bmi.n	8001892 <__aeabi_ddiv+0x412>
 8001890:	e0be      	b.n	8001a10 <__aeabi_ddiv+0x590>
 8001892:	2301      	movs	r3, #1
 8001894:	2200      	movs	r2, #0
 8001896:	2500      	movs	r5, #0
 8001898:	e649      	b.n	800152e <__aeabi_ddiv+0xae>
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	4643      	mov	r3, r8
 800189e:	0312      	lsls	r2, r2, #12
 80018a0:	4213      	tst	r3, r2
 80018a2:	d008      	beq.n	80018b6 <__aeabi_ddiv+0x436>
 80018a4:	4214      	tst	r4, r2
 80018a6:	d106      	bne.n	80018b6 <__aeabi_ddiv+0x436>
 80018a8:	4322      	orrs	r2, r4
 80018aa:	0312      	lsls	r2, r2, #12
 80018ac:	46ba      	mov	sl, r7
 80018ae:	000d      	movs	r5, r1
 80018b0:	4b66      	ldr	r3, [pc, #408]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 80018b2:	0b12      	lsrs	r2, r2, #12
 80018b4:	e63b      	b.n	800152e <__aeabi_ddiv+0xae>
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	4643      	mov	r3, r8
 80018ba:	0312      	lsls	r2, r2, #12
 80018bc:	431a      	orrs	r2, r3
 80018be:	0312      	lsls	r2, r2, #12
 80018c0:	46b2      	mov	sl, r6
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 80018c4:	0b12      	lsrs	r2, r2, #12
 80018c6:	e632      	b.n	800152e <__aeabi_ddiv+0xae>
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x44e>
 80018cc:	e702      	b.n	80016d4 <__aeabi_ddiv+0x254>
 80018ce:	19a6      	adds	r6, r4, r6
 80018d0:	1e6a      	subs	r2, r5, #1
 80018d2:	42a6      	cmp	r6, r4
 80018d4:	d200      	bcs.n	80018d8 <__aeabi_ddiv+0x458>
 80018d6:	e089      	b.n	80019ec <__aeabi_ddiv+0x56c>
 80018d8:	4286      	cmp	r6, r0
 80018da:	d200      	bcs.n	80018de <__aeabi_ddiv+0x45e>
 80018dc:	e09f      	b.n	8001a1e <__aeabi_ddiv+0x59e>
 80018de:	d100      	bne.n	80018e2 <__aeabi_ddiv+0x462>
 80018e0:	e0af      	b.n	8001a42 <__aeabi_ddiv+0x5c2>
 80018e2:	0015      	movs	r5, r2
 80018e4:	e6f4      	b.n	80016d0 <__aeabi_ddiv+0x250>
 80018e6:	42a9      	cmp	r1, r5
 80018e8:	d900      	bls.n	80018ec <__aeabi_ddiv+0x46c>
 80018ea:	e63c      	b.n	8001566 <__aeabi_ddiv+0xe6>
 80018ec:	4643      	mov	r3, r8
 80018ee:	07de      	lsls	r6, r3, #31
 80018f0:	0858      	lsrs	r0, r3, #1
 80018f2:	086b      	lsrs	r3, r5, #1
 80018f4:	431e      	orrs	r6, r3
 80018f6:	07ed      	lsls	r5, r5, #31
 80018f8:	e63c      	b.n	8001574 <__aeabi_ddiv+0xf4>
 80018fa:	f001 f977 	bl	8002bec <__clzsi2>
 80018fe:	0001      	movs	r1, r0
 8001900:	0002      	movs	r2, r0
 8001902:	3115      	adds	r1, #21
 8001904:	3220      	adds	r2, #32
 8001906:	291c      	cmp	r1, #28
 8001908:	dc00      	bgt.n	800190c <__aeabi_ddiv+0x48c>
 800190a:	e72c      	b.n	8001766 <__aeabi_ddiv+0x2e6>
 800190c:	464b      	mov	r3, r9
 800190e:	3808      	subs	r0, #8
 8001910:	4083      	lsls	r3, r0
 8001912:	2500      	movs	r5, #0
 8001914:	4698      	mov	r8, r3
 8001916:	e732      	b.n	800177e <__aeabi_ddiv+0x2fe>
 8001918:	f001 f968 	bl	8002bec <__clzsi2>
 800191c:	0003      	movs	r3, r0
 800191e:	001a      	movs	r2, r3
 8001920:	3215      	adds	r2, #21
 8001922:	3020      	adds	r0, #32
 8001924:	2a1c      	cmp	r2, #28
 8001926:	dc00      	bgt.n	800192a <__aeabi_ddiv+0x4aa>
 8001928:	e6ff      	b.n	800172a <__aeabi_ddiv+0x2aa>
 800192a:	4654      	mov	r4, sl
 800192c:	3b08      	subs	r3, #8
 800192e:	2100      	movs	r1, #0
 8001930:	409c      	lsls	r4, r3
 8001932:	e705      	b.n	8001740 <__aeabi_ddiv+0x2c0>
 8001934:	1936      	adds	r6, r6, r4
 8001936:	3b01      	subs	r3, #1
 8001938:	42b4      	cmp	r4, r6
 800193a:	d900      	bls.n	800193e <__aeabi_ddiv+0x4be>
 800193c:	e6a6      	b.n	800168c <__aeabi_ddiv+0x20c>
 800193e:	42b2      	cmp	r2, r6
 8001940:	d800      	bhi.n	8001944 <__aeabi_ddiv+0x4c4>
 8001942:	e6a3      	b.n	800168c <__aeabi_ddiv+0x20c>
 8001944:	1e83      	subs	r3, r0, #2
 8001946:	1936      	adds	r6, r6, r4
 8001948:	e6a0      	b.n	800168c <__aeabi_ddiv+0x20c>
 800194a:	1909      	adds	r1, r1, r4
 800194c:	3d01      	subs	r5, #1
 800194e:	428c      	cmp	r4, r1
 8001950:	d900      	bls.n	8001954 <__aeabi_ddiv+0x4d4>
 8001952:	e68d      	b.n	8001670 <__aeabi_ddiv+0x1f0>
 8001954:	428a      	cmp	r2, r1
 8001956:	d800      	bhi.n	800195a <__aeabi_ddiv+0x4da>
 8001958:	e68a      	b.n	8001670 <__aeabi_ddiv+0x1f0>
 800195a:	1e85      	subs	r5, r0, #2
 800195c:	1909      	adds	r1, r1, r4
 800195e:	e687      	b.n	8001670 <__aeabi_ddiv+0x1f0>
 8001960:	220f      	movs	r2, #15
 8001962:	402a      	ands	r2, r5
 8001964:	2a04      	cmp	r2, #4
 8001966:	d100      	bne.n	800196a <__aeabi_ddiv+0x4ea>
 8001968:	e6bc      	b.n	80016e4 <__aeabi_ddiv+0x264>
 800196a:	1d29      	adds	r1, r5, #4
 800196c:	42a9      	cmp	r1, r5
 800196e:	41ad      	sbcs	r5, r5
 8001970:	426d      	negs	r5, r5
 8001972:	08c9      	lsrs	r1, r1, #3
 8001974:	44a8      	add	r8, r5
 8001976:	e6b6      	b.n	80016e6 <__aeabi_ddiv+0x266>
 8001978:	42af      	cmp	r7, r5
 800197a:	d900      	bls.n	800197e <__aeabi_ddiv+0x4fe>
 800197c:	e662      	b.n	8001644 <__aeabi_ddiv+0x1c4>
 800197e:	4281      	cmp	r1, r0
 8001980:	d804      	bhi.n	800198c <__aeabi_ddiv+0x50c>
 8001982:	d000      	beq.n	8001986 <__aeabi_ddiv+0x506>
 8001984:	e65e      	b.n	8001644 <__aeabi_ddiv+0x1c4>
 8001986:	42ae      	cmp	r6, r5
 8001988:	d800      	bhi.n	800198c <__aeabi_ddiv+0x50c>
 800198a:	e65b      	b.n	8001644 <__aeabi_ddiv+0x1c4>
 800198c:	2302      	movs	r3, #2
 800198e:	425b      	negs	r3, r3
 8001990:	469c      	mov	ip, r3
 8001992:	9b00      	ldr	r3, [sp, #0]
 8001994:	44e0      	add	r8, ip
 8001996:	469c      	mov	ip, r3
 8001998:	4465      	add	r5, ip
 800199a:	429d      	cmp	r5, r3
 800199c:	419b      	sbcs	r3, r3
 800199e:	425b      	negs	r3, r3
 80019a0:	191b      	adds	r3, r3, r4
 80019a2:	18c0      	adds	r0, r0, r3
 80019a4:	e64f      	b.n	8001646 <__aeabi_ddiv+0x1c6>
 80019a6:	42b2      	cmp	r2, r6
 80019a8:	d800      	bhi.n	80019ac <__aeabi_ddiv+0x52c>
 80019aa:	e612      	b.n	80015d2 <__aeabi_ddiv+0x152>
 80019ac:	1e83      	subs	r3, r0, #2
 80019ae:	1936      	adds	r6, r6, r4
 80019b0:	e60f      	b.n	80015d2 <__aeabi_ddiv+0x152>
 80019b2:	428a      	cmp	r2, r1
 80019b4:	d800      	bhi.n	80019b8 <__aeabi_ddiv+0x538>
 80019b6:	e5fa      	b.n	80015ae <__aeabi_ddiv+0x12e>
 80019b8:	1e83      	subs	r3, r0, #2
 80019ba:	4698      	mov	r8, r3
 80019bc:	1909      	adds	r1, r1, r4
 80019be:	e5f6      	b.n	80015ae <__aeabi_ddiv+0x12e>
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <__aeabi_ddiv+0x5d4>)
 80019c2:	0028      	movs	r0, r5
 80019c4:	445b      	add	r3, fp
 80019c6:	4641      	mov	r1, r8
 80019c8:	409d      	lsls	r5, r3
 80019ca:	4099      	lsls	r1, r3
 80019cc:	40d0      	lsrs	r0, r2
 80019ce:	1e6b      	subs	r3, r5, #1
 80019d0:	419d      	sbcs	r5, r3
 80019d2:	4643      	mov	r3, r8
 80019d4:	4301      	orrs	r1, r0
 80019d6:	4329      	orrs	r1, r5
 80019d8:	40d3      	lsrs	r3, r2
 80019da:	074a      	lsls	r2, r1, #29
 80019dc:	d100      	bne.n	80019e0 <__aeabi_ddiv+0x560>
 80019de:	e755      	b.n	800188c <__aeabi_ddiv+0x40c>
 80019e0:	220f      	movs	r2, #15
 80019e2:	400a      	ands	r2, r1
 80019e4:	2a04      	cmp	r2, #4
 80019e6:	d000      	beq.n	80019ea <__aeabi_ddiv+0x56a>
 80019e8:	e74a      	b.n	8001880 <__aeabi_ddiv+0x400>
 80019ea:	e74f      	b.n	800188c <__aeabi_ddiv+0x40c>
 80019ec:	0015      	movs	r5, r2
 80019ee:	4286      	cmp	r6, r0
 80019f0:	d000      	beq.n	80019f4 <__aeabi_ddiv+0x574>
 80019f2:	e66d      	b.n	80016d0 <__aeabi_ddiv+0x250>
 80019f4:	9a00      	ldr	r2, [sp, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d000      	beq.n	80019fc <__aeabi_ddiv+0x57c>
 80019fa:	e669      	b.n	80016d0 <__aeabi_ddiv+0x250>
 80019fc:	e66a      	b.n	80016d4 <__aeabi_ddiv+0x254>
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <__aeabi_ddiv+0x5d8>)
 8001a00:	445b      	add	r3, fp
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_ddiv+0x588>
 8001a06:	e713      	b.n	8001830 <__aeabi_ddiv+0x3b0>
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	44a8      	add	r8, r5
 8001a0e:	e66a      	b.n	80016e6 <__aeabi_ddiv+0x266>
 8001a10:	075d      	lsls	r5, r3, #29
 8001a12:	025b      	lsls	r3, r3, #9
 8001a14:	0b1a      	lsrs	r2, r3, #12
 8001a16:	08c9      	lsrs	r1, r1, #3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	430d      	orrs	r5, r1
 8001a1c:	e587      	b.n	800152e <__aeabi_ddiv+0xae>
 8001a1e:	9900      	ldr	r1, [sp, #0]
 8001a20:	3d02      	subs	r5, #2
 8001a22:	004a      	lsls	r2, r1, #1
 8001a24:	428a      	cmp	r2, r1
 8001a26:	41bf      	sbcs	r7, r7
 8001a28:	427f      	negs	r7, r7
 8001a2a:	193f      	adds	r7, r7, r4
 8001a2c:	19f6      	adds	r6, r6, r7
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	e7dd      	b.n	80019ee <__aeabi_ddiv+0x56e>
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	4643      	mov	r3, r8
 8001a36:	0312      	lsls	r2, r2, #12
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	0312      	lsls	r2, r2, #12
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 8001a3e:	0b12      	lsrs	r2, r2, #12
 8001a40:	e575      	b.n	800152e <__aeabi_ddiv+0xae>
 8001a42:	9900      	ldr	r1, [sp, #0]
 8001a44:	4299      	cmp	r1, r3
 8001a46:	d3ea      	bcc.n	8001a1e <__aeabi_ddiv+0x59e>
 8001a48:	0015      	movs	r5, r2
 8001a4a:	e7d3      	b.n	80019f4 <__aeabi_ddiv+0x574>
 8001a4c:	000007ff 	.word	0x000007ff
 8001a50:	0000043e 	.word	0x0000043e
 8001a54:	0000041e 	.word	0x0000041e
 8001a58:	000003ff 	.word	0x000003ff

08001a5c <__eqdf2>:
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	464e      	mov	r6, r9
 8001a60:	4645      	mov	r5, r8
 8001a62:	46de      	mov	lr, fp
 8001a64:	4657      	mov	r7, sl
 8001a66:	4690      	mov	r8, r2
 8001a68:	b5e0      	push	{r5, r6, r7, lr}
 8001a6a:	0017      	movs	r7, r2
 8001a6c:	031a      	lsls	r2, r3, #12
 8001a6e:	0b12      	lsrs	r2, r2, #12
 8001a70:	0005      	movs	r5, r0
 8001a72:	4684      	mov	ip, r0
 8001a74:	4819      	ldr	r0, [pc, #100]	; (8001adc <__eqdf2+0x80>)
 8001a76:	030e      	lsls	r6, r1, #12
 8001a78:	004c      	lsls	r4, r1, #1
 8001a7a:	4691      	mov	r9, r2
 8001a7c:	005a      	lsls	r2, r3, #1
 8001a7e:	0fdb      	lsrs	r3, r3, #31
 8001a80:	469b      	mov	fp, r3
 8001a82:	0b36      	lsrs	r6, r6, #12
 8001a84:	0d64      	lsrs	r4, r4, #21
 8001a86:	0fc9      	lsrs	r1, r1, #31
 8001a88:	0d52      	lsrs	r2, r2, #21
 8001a8a:	4284      	cmp	r4, r0
 8001a8c:	d019      	beq.n	8001ac2 <__eqdf2+0x66>
 8001a8e:	4282      	cmp	r2, r0
 8001a90:	d010      	beq.n	8001ab4 <__eqdf2+0x58>
 8001a92:	2001      	movs	r0, #1
 8001a94:	4294      	cmp	r4, r2
 8001a96:	d10e      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001a98:	454e      	cmp	r6, r9
 8001a9a:	d10c      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	45c4      	cmp	ip, r8
 8001aa0:	d109      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001aa2:	4559      	cmp	r1, fp
 8001aa4:	d017      	beq.n	8001ad6 <__eqdf2+0x7a>
 8001aa6:	2c00      	cmp	r4, #0
 8001aa8:	d105      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001aaa:	0030      	movs	r0, r6
 8001aac:	4328      	orrs	r0, r5
 8001aae:	1e43      	subs	r3, r0, #1
 8001ab0:	4198      	sbcs	r0, r3
 8001ab2:	e000      	b.n	8001ab6 <__eqdf2+0x5a>
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ab8:	46bb      	mov	fp, r7
 8001aba:	46b2      	mov	sl, r6
 8001abc:	46a9      	mov	r9, r5
 8001abe:	46a0      	mov	r8, r4
 8001ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac2:	0033      	movs	r3, r6
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	432b      	orrs	r3, r5
 8001ac8:	d1f5      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001aca:	42a2      	cmp	r2, r4
 8001acc:	d1f3      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001ace:	464b      	mov	r3, r9
 8001ad0:	433b      	orrs	r3, r7
 8001ad2:	d1f0      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001ad4:	e7e2      	b.n	8001a9c <__eqdf2+0x40>
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	e7ed      	b.n	8001ab6 <__eqdf2+0x5a>
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	000007ff 	.word	0x000007ff

08001ae0 <__gedf2>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4647      	mov	r7, r8
 8001ae4:	46ce      	mov	lr, r9
 8001ae6:	0004      	movs	r4, r0
 8001ae8:	0018      	movs	r0, r3
 8001aea:	0016      	movs	r6, r2
 8001aec:	031b      	lsls	r3, r3, #12
 8001aee:	0b1b      	lsrs	r3, r3, #12
 8001af0:	4d2d      	ldr	r5, [pc, #180]	; (8001ba8 <__gedf2+0xc8>)
 8001af2:	004a      	lsls	r2, r1, #1
 8001af4:	4699      	mov	r9, r3
 8001af6:	b580      	push	{r7, lr}
 8001af8:	0043      	lsls	r3, r0, #1
 8001afa:	030f      	lsls	r7, r1, #12
 8001afc:	46a4      	mov	ip, r4
 8001afe:	46b0      	mov	r8, r6
 8001b00:	0b3f      	lsrs	r7, r7, #12
 8001b02:	0d52      	lsrs	r2, r2, #21
 8001b04:	0fc9      	lsrs	r1, r1, #31
 8001b06:	0d5b      	lsrs	r3, r3, #21
 8001b08:	0fc0      	lsrs	r0, r0, #31
 8001b0a:	42aa      	cmp	r2, r5
 8001b0c:	d021      	beq.n	8001b52 <__gedf2+0x72>
 8001b0e:	42ab      	cmp	r3, r5
 8001b10:	d013      	beq.n	8001b3a <__gedf2+0x5a>
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	d122      	bne.n	8001b5c <__gedf2+0x7c>
 8001b16:	433c      	orrs	r4, r7
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <__gedf2+0x42>
 8001b1c:	464d      	mov	r5, r9
 8001b1e:	432e      	orrs	r6, r5
 8001b20:	d022      	beq.n	8001b68 <__gedf2+0x88>
 8001b22:	2c00      	cmp	r4, #0
 8001b24:	d010      	beq.n	8001b48 <__gedf2+0x68>
 8001b26:	4281      	cmp	r1, r0
 8001b28:	d022      	beq.n	8001b70 <__gedf2+0x90>
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	3901      	subs	r1, #1
 8001b2e:	4008      	ands	r0, r1
 8001b30:	3801      	subs	r0, #1
 8001b32:	bcc0      	pop	{r6, r7}
 8001b34:	46b9      	mov	r9, r7
 8001b36:	46b0      	mov	r8, r6
 8001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3a:	464d      	mov	r5, r9
 8001b3c:	432e      	orrs	r6, r5
 8001b3e:	d129      	bne.n	8001b94 <__gedf2+0xb4>
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	d1f0      	bne.n	8001b26 <__gedf2+0x46>
 8001b44:	433c      	orrs	r4, r7
 8001b46:	d1ee      	bne.n	8001b26 <__gedf2+0x46>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d1f2      	bne.n	8001b32 <__gedf2+0x52>
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	4240      	negs	r0, r0
 8001b50:	e7ef      	b.n	8001b32 <__gedf2+0x52>
 8001b52:	003d      	movs	r5, r7
 8001b54:	4325      	orrs	r5, r4
 8001b56:	d11d      	bne.n	8001b94 <__gedf2+0xb4>
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d0ee      	beq.n	8001b3a <__gedf2+0x5a>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e2      	bne.n	8001b26 <__gedf2+0x46>
 8001b60:	464c      	mov	r4, r9
 8001b62:	4326      	orrs	r6, r4
 8001b64:	d1df      	bne.n	8001b26 <__gedf2+0x46>
 8001b66:	e7e0      	b.n	8001b2a <__gedf2+0x4a>
 8001b68:	2000      	movs	r0, #0
 8001b6a:	2c00      	cmp	r4, #0
 8001b6c:	d0e1      	beq.n	8001b32 <__gedf2+0x52>
 8001b6e:	e7dc      	b.n	8001b2a <__gedf2+0x4a>
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dc0a      	bgt.n	8001b8a <__gedf2+0xaa>
 8001b74:	dbe8      	blt.n	8001b48 <__gedf2+0x68>
 8001b76:	454f      	cmp	r7, r9
 8001b78:	d8d7      	bhi.n	8001b2a <__gedf2+0x4a>
 8001b7a:	d00e      	beq.n	8001b9a <__gedf2+0xba>
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	454f      	cmp	r7, r9
 8001b80:	d2d7      	bcs.n	8001b32 <__gedf2+0x52>
 8001b82:	2900      	cmp	r1, #0
 8001b84:	d0e2      	beq.n	8001b4c <__gedf2+0x6c>
 8001b86:	0008      	movs	r0, r1
 8001b88:	e7d3      	b.n	8001b32 <__gedf2+0x52>
 8001b8a:	4243      	negs	r3, r0
 8001b8c:	4158      	adcs	r0, r3
 8001b8e:	0040      	lsls	r0, r0, #1
 8001b90:	3801      	subs	r0, #1
 8001b92:	e7ce      	b.n	8001b32 <__gedf2+0x52>
 8001b94:	2002      	movs	r0, #2
 8001b96:	4240      	negs	r0, r0
 8001b98:	e7cb      	b.n	8001b32 <__gedf2+0x52>
 8001b9a:	45c4      	cmp	ip, r8
 8001b9c:	d8c5      	bhi.n	8001b2a <__gedf2+0x4a>
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	45c4      	cmp	ip, r8
 8001ba2:	d2c6      	bcs.n	8001b32 <__gedf2+0x52>
 8001ba4:	e7ed      	b.n	8001b82 <__gedf2+0xa2>
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	000007ff 	.word	0x000007ff

08001bac <__ledf2>:
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bae:	4647      	mov	r7, r8
 8001bb0:	46ce      	mov	lr, r9
 8001bb2:	0004      	movs	r4, r0
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	0016      	movs	r6, r2
 8001bb8:	031b      	lsls	r3, r3, #12
 8001bba:	0b1b      	lsrs	r3, r3, #12
 8001bbc:	4d2c      	ldr	r5, [pc, #176]	; (8001c70 <__ledf2+0xc4>)
 8001bbe:	004a      	lsls	r2, r1, #1
 8001bc0:	4699      	mov	r9, r3
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	0043      	lsls	r3, r0, #1
 8001bc6:	030f      	lsls	r7, r1, #12
 8001bc8:	46a4      	mov	ip, r4
 8001bca:	46b0      	mov	r8, r6
 8001bcc:	0b3f      	lsrs	r7, r7, #12
 8001bce:	0d52      	lsrs	r2, r2, #21
 8001bd0:	0fc9      	lsrs	r1, r1, #31
 8001bd2:	0d5b      	lsrs	r3, r3, #21
 8001bd4:	0fc0      	lsrs	r0, r0, #31
 8001bd6:	42aa      	cmp	r2, r5
 8001bd8:	d00d      	beq.n	8001bf6 <__ledf2+0x4a>
 8001bda:	42ab      	cmp	r3, r5
 8001bdc:	d010      	beq.n	8001c00 <__ledf2+0x54>
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	d127      	bne.n	8001c32 <__ledf2+0x86>
 8001be2:	433c      	orrs	r4, r7
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d111      	bne.n	8001c0c <__ledf2+0x60>
 8001be8:	464d      	mov	r5, r9
 8001bea:	432e      	orrs	r6, r5
 8001bec:	d10e      	bne.n	8001c0c <__ledf2+0x60>
 8001bee:	2000      	movs	r0, #0
 8001bf0:	2c00      	cmp	r4, #0
 8001bf2:	d015      	beq.n	8001c20 <__ledf2+0x74>
 8001bf4:	e00e      	b.n	8001c14 <__ledf2+0x68>
 8001bf6:	003d      	movs	r5, r7
 8001bf8:	4325      	orrs	r5, r4
 8001bfa:	d110      	bne.n	8001c1e <__ledf2+0x72>
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d118      	bne.n	8001c32 <__ledf2+0x86>
 8001c00:	464d      	mov	r5, r9
 8001c02:	432e      	orrs	r6, r5
 8001c04:	d10b      	bne.n	8001c1e <__ledf2+0x72>
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d102      	bne.n	8001c10 <__ledf2+0x64>
 8001c0a:	433c      	orrs	r4, r7
 8001c0c:	2c00      	cmp	r4, #0
 8001c0e:	d00b      	beq.n	8001c28 <__ledf2+0x7c>
 8001c10:	4281      	cmp	r1, r0
 8001c12:	d014      	beq.n	8001c3e <__ledf2+0x92>
 8001c14:	2002      	movs	r0, #2
 8001c16:	3901      	subs	r1, #1
 8001c18:	4008      	ands	r0, r1
 8001c1a:	3801      	subs	r0, #1
 8001c1c:	e000      	b.n	8001c20 <__ledf2+0x74>
 8001c1e:	2002      	movs	r0, #2
 8001c20:	bcc0      	pop	{r6, r7}
 8001c22:	46b9      	mov	r9, r7
 8001c24:	46b0      	mov	r8, r6
 8001c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d1f9      	bne.n	8001c20 <__ledf2+0x74>
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	4240      	negs	r0, r0
 8001c30:	e7f6      	b.n	8001c20 <__ledf2+0x74>
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ec      	bne.n	8001c10 <__ledf2+0x64>
 8001c36:	464c      	mov	r4, r9
 8001c38:	4326      	orrs	r6, r4
 8001c3a:	d1e9      	bne.n	8001c10 <__ledf2+0x64>
 8001c3c:	e7ea      	b.n	8001c14 <__ledf2+0x68>
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dd04      	ble.n	8001c4c <__ledf2+0xa0>
 8001c42:	4243      	negs	r3, r0
 8001c44:	4158      	adcs	r0, r3
 8001c46:	0040      	lsls	r0, r0, #1
 8001c48:	3801      	subs	r0, #1
 8001c4a:	e7e9      	b.n	8001c20 <__ledf2+0x74>
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbeb      	blt.n	8001c28 <__ledf2+0x7c>
 8001c50:	454f      	cmp	r7, r9
 8001c52:	d8df      	bhi.n	8001c14 <__ledf2+0x68>
 8001c54:	d006      	beq.n	8001c64 <__ledf2+0xb8>
 8001c56:	2000      	movs	r0, #0
 8001c58:	454f      	cmp	r7, r9
 8001c5a:	d2e1      	bcs.n	8001c20 <__ledf2+0x74>
 8001c5c:	2900      	cmp	r1, #0
 8001c5e:	d0e5      	beq.n	8001c2c <__ledf2+0x80>
 8001c60:	0008      	movs	r0, r1
 8001c62:	e7dd      	b.n	8001c20 <__ledf2+0x74>
 8001c64:	45c4      	cmp	ip, r8
 8001c66:	d8d5      	bhi.n	8001c14 <__ledf2+0x68>
 8001c68:	2000      	movs	r0, #0
 8001c6a:	45c4      	cmp	ip, r8
 8001c6c:	d2d8      	bcs.n	8001c20 <__ledf2+0x74>
 8001c6e:	e7f5      	b.n	8001c5c <__ledf2+0xb0>
 8001c70:	000007ff 	.word	0x000007ff

08001c74 <__aeabi_dmul>:
 8001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c76:	4645      	mov	r5, r8
 8001c78:	46de      	mov	lr, fp
 8001c7a:	4657      	mov	r7, sl
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	b5e0      	push	{r5, r6, r7, lr}
 8001c80:	001f      	movs	r7, r3
 8001c82:	030b      	lsls	r3, r1, #12
 8001c84:	0b1b      	lsrs	r3, r3, #12
 8001c86:	469b      	mov	fp, r3
 8001c88:	004d      	lsls	r5, r1, #1
 8001c8a:	0fcb      	lsrs	r3, r1, #31
 8001c8c:	0004      	movs	r4, r0
 8001c8e:	4691      	mov	r9, r2
 8001c90:	4698      	mov	r8, r3
 8001c92:	b087      	sub	sp, #28
 8001c94:	0d6d      	lsrs	r5, r5, #21
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dmul+0x26>
 8001c98:	e1cd      	b.n	8002036 <__aeabi_dmul+0x3c2>
 8001c9a:	4bce      	ldr	r3, [pc, #824]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001c9c:	429d      	cmp	r5, r3
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dmul+0x2e>
 8001ca0:	e1e9      	b.n	8002076 <__aeabi_dmul+0x402>
 8001ca2:	465a      	mov	r2, fp
 8001ca4:	0f43      	lsrs	r3, r0, #29
 8001ca6:	00d2      	lsls	r2, r2, #3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	0412      	lsls	r2, r2, #16
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	00c3      	lsls	r3, r0, #3
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4bc8      	ldr	r3, [pc, #800]	; (8001fd8 <__aeabi_dmul+0x364>)
 8001cb6:	4693      	mov	fp, r2
 8001cb8:	469c      	mov	ip, r3
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2600      	movs	r6, #0
 8001cbe:	4465      	add	r5, ip
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	033c      	lsls	r4, r7, #12
 8001cc4:	007b      	lsls	r3, r7, #1
 8001cc6:	4648      	mov	r0, r9
 8001cc8:	0b24      	lsrs	r4, r4, #12
 8001cca:	0d5b      	lsrs	r3, r3, #21
 8001ccc:	0fff      	lsrs	r7, r7, #31
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dmul+0x60>
 8001cd2:	e189      	b.n	8001fe8 <__aeabi_dmul+0x374>
 8001cd4:	4abf      	ldr	r2, [pc, #764]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d019      	beq.n	8001d0e <__aeabi_dmul+0x9a>
 8001cda:	0f42      	lsrs	r2, r0, #29
 8001cdc:	00e4      	lsls	r4, r4, #3
 8001cde:	4322      	orrs	r2, r4
 8001ce0:	2480      	movs	r4, #128	; 0x80
 8001ce2:	0424      	lsls	r4, r4, #16
 8001ce4:	4314      	orrs	r4, r2
 8001ce6:	4abc      	ldr	r2, [pc, #752]	; (8001fd8 <__aeabi_dmul+0x364>)
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4694      	mov	ip, r2
 8001cec:	4642      	mov	r2, r8
 8001cee:	4463      	add	r3, ip
 8001cf0:	195b      	adds	r3, r3, r5
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	9b01      	ldr	r3, [sp, #4]
 8001cf6:	407a      	eors	r2, r7
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	00c0      	lsls	r0, r0, #3
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	2e0a      	cmp	r6, #10
 8001d02:	dd1c      	ble.n	8001d3e <__aeabi_dmul+0xca>
 8001d04:	003a      	movs	r2, r7
 8001d06:	2e0b      	cmp	r6, #11
 8001d08:	d05e      	beq.n	8001dc8 <__aeabi_dmul+0x154>
 8001d0a:	4647      	mov	r7, r8
 8001d0c:	e056      	b.n	8001dbc <__aeabi_dmul+0x148>
 8001d0e:	4649      	mov	r1, r9
 8001d10:	4bb0      	ldr	r3, [pc, #704]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001d12:	4321      	orrs	r1, r4
 8001d14:	18eb      	adds	r3, r5, r3
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2900      	cmp	r1, #0
 8001d1a:	d12a      	bne.n	8001d72 <__aeabi_dmul+0xfe>
 8001d1c:	2080      	movs	r0, #128	; 0x80
 8001d1e:	2202      	movs	r2, #2
 8001d20:	0100      	lsls	r0, r0, #4
 8001d22:	002b      	movs	r3, r5
 8001d24:	4684      	mov	ip, r0
 8001d26:	4316      	orrs	r6, r2
 8001d28:	4642      	mov	r2, r8
 8001d2a:	4463      	add	r3, ip
 8001d2c:	407a      	eors	r2, r7
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	9302      	str	r3, [sp, #8]
 8001d32:	2e0a      	cmp	r6, #10
 8001d34:	dd00      	ble.n	8001d38 <__aeabi_dmul+0xc4>
 8001d36:	e231      	b.n	800219c <__aeabi_dmul+0x528>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	2400      	movs	r4, #0
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	2e02      	cmp	r6, #2
 8001d40:	dc26      	bgt.n	8001d90 <__aeabi_dmul+0x11c>
 8001d42:	3e01      	subs	r6, #1
 8001d44:	2e01      	cmp	r6, #1
 8001d46:	d852      	bhi.n	8001dee <__aeabi_dmul+0x17a>
 8001d48:	2902      	cmp	r1, #2
 8001d4a:	d04c      	beq.n	8001de6 <__aeabi_dmul+0x172>
 8001d4c:	2901      	cmp	r1, #1
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dmul+0xde>
 8001d50:	e118      	b.n	8001f84 <__aeabi_dmul+0x310>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2400      	movs	r4, #0
 8001d56:	2500      	movs	r5, #0
 8001d58:	051b      	lsls	r3, r3, #20
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	07d2      	lsls	r2, r2, #31
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	0028      	movs	r0, r5
 8001d62:	0019      	movs	r1, r3
 8001d64:	b007      	add	sp, #28
 8001d66:	bcf0      	pop	{r4, r5, r6, r7}
 8001d68:	46bb      	mov	fp, r7
 8001d6a:	46b2      	mov	sl, r6
 8001d6c:	46a9      	mov	r9, r5
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	2203      	movs	r2, #3
 8001d76:	0109      	lsls	r1, r1, #4
 8001d78:	002b      	movs	r3, r5
 8001d7a:	468c      	mov	ip, r1
 8001d7c:	4316      	orrs	r6, r2
 8001d7e:	4642      	mov	r2, r8
 8001d80:	4463      	add	r3, ip
 8001d82:	407a      	eors	r2, r7
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	2e0a      	cmp	r6, #10
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_dmul+0x11a>
 8001d8c:	e228      	b.n	80021e0 <__aeabi_dmul+0x56c>
 8001d8e:	2103      	movs	r1, #3
 8001d90:	2501      	movs	r5, #1
 8001d92:	40b5      	lsls	r5, r6
 8001d94:	46ac      	mov	ip, r5
 8001d96:	26a6      	movs	r6, #166	; 0xa6
 8001d98:	4663      	mov	r3, ip
 8001d9a:	00f6      	lsls	r6, r6, #3
 8001d9c:	4035      	ands	r5, r6
 8001d9e:	4233      	tst	r3, r6
 8001da0:	d10b      	bne.n	8001dba <__aeabi_dmul+0x146>
 8001da2:	2690      	movs	r6, #144	; 0x90
 8001da4:	00b6      	lsls	r6, r6, #2
 8001da6:	4233      	tst	r3, r6
 8001da8:	d118      	bne.n	8001ddc <__aeabi_dmul+0x168>
 8001daa:	3eb9      	subs	r6, #185	; 0xb9
 8001dac:	3eff      	subs	r6, #255	; 0xff
 8001dae:	421e      	tst	r6, r3
 8001db0:	d01d      	beq.n	8001dee <__aeabi_dmul+0x17a>
 8001db2:	46a3      	mov	fp, r4
 8001db4:	4682      	mov	sl, r0
 8001db6:	9100      	str	r1, [sp, #0]
 8001db8:	e000      	b.n	8001dbc <__aeabi_dmul+0x148>
 8001dba:	0017      	movs	r7, r2
 8001dbc:	9900      	ldr	r1, [sp, #0]
 8001dbe:	003a      	movs	r2, r7
 8001dc0:	2902      	cmp	r1, #2
 8001dc2:	d010      	beq.n	8001de6 <__aeabi_dmul+0x172>
 8001dc4:	465c      	mov	r4, fp
 8001dc6:	4650      	mov	r0, sl
 8001dc8:	2903      	cmp	r1, #3
 8001dca:	d1bf      	bne.n	8001d4c <__aeabi_dmul+0xd8>
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	031b      	lsls	r3, r3, #12
 8001dd0:	431c      	orrs	r4, r3
 8001dd2:	0324      	lsls	r4, r4, #12
 8001dd4:	0005      	movs	r5, r0
 8001dd6:	4b7f      	ldr	r3, [pc, #508]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001dd8:	0b24      	lsrs	r4, r4, #12
 8001dda:	e7bd      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001ddc:	2480      	movs	r4, #128	; 0x80
 8001dde:	2200      	movs	r2, #0
 8001de0:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001de2:	0324      	lsls	r4, r4, #12
 8001de4:	e7b8      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001de6:	2400      	movs	r4, #0
 8001de8:	2500      	movs	r5, #0
 8001dea:	4b7a      	ldr	r3, [pc, #488]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001dec:	e7b4      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001dee:	4653      	mov	r3, sl
 8001df0:	041e      	lsls	r6, r3, #16
 8001df2:	0c36      	lsrs	r6, r6, #16
 8001df4:	0c1f      	lsrs	r7, r3, #16
 8001df6:	0033      	movs	r3, r6
 8001df8:	0c01      	lsrs	r1, r0, #16
 8001dfa:	0400      	lsls	r0, r0, #16
 8001dfc:	0c00      	lsrs	r0, r0, #16
 8001dfe:	4343      	muls	r3, r0
 8001e00:	4698      	mov	r8, r3
 8001e02:	0003      	movs	r3, r0
 8001e04:	437b      	muls	r3, r7
 8001e06:	4699      	mov	r9, r3
 8001e08:	0033      	movs	r3, r6
 8001e0a:	434b      	muls	r3, r1
 8001e0c:	469c      	mov	ip, r3
 8001e0e:	4643      	mov	r3, r8
 8001e10:	000d      	movs	r5, r1
 8001e12:	0c1b      	lsrs	r3, r3, #16
 8001e14:	469a      	mov	sl, r3
 8001e16:	437d      	muls	r5, r7
 8001e18:	44cc      	add	ip, r9
 8001e1a:	44d4      	add	ip, sl
 8001e1c:	9500      	str	r5, [sp, #0]
 8001e1e:	45e1      	cmp	r9, ip
 8001e20:	d904      	bls.n	8001e2c <__aeabi_dmul+0x1b8>
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	025b      	lsls	r3, r3, #9
 8001e26:	4699      	mov	r9, r3
 8001e28:	444d      	add	r5, r9
 8001e2a:	9500      	str	r5, [sp, #0]
 8001e2c:	4663      	mov	r3, ip
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	001d      	movs	r5, r3
 8001e32:	4663      	mov	r3, ip
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	469c      	mov	ip, r3
 8001e38:	4643      	mov	r3, r8
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	4698      	mov	r8, r3
 8001e40:	4663      	mov	r3, ip
 8001e42:	4443      	add	r3, r8
 8001e44:	9303      	str	r3, [sp, #12]
 8001e46:	0c23      	lsrs	r3, r4, #16
 8001e48:	4698      	mov	r8, r3
 8001e4a:	0033      	movs	r3, r6
 8001e4c:	0424      	lsls	r4, r4, #16
 8001e4e:	0c24      	lsrs	r4, r4, #16
 8001e50:	4363      	muls	r3, r4
 8001e52:	469c      	mov	ip, r3
 8001e54:	0023      	movs	r3, r4
 8001e56:	437b      	muls	r3, r7
 8001e58:	4699      	mov	r9, r3
 8001e5a:	4643      	mov	r3, r8
 8001e5c:	435e      	muls	r6, r3
 8001e5e:	435f      	muls	r7, r3
 8001e60:	444e      	add	r6, r9
 8001e62:	4663      	mov	r3, ip
 8001e64:	46b2      	mov	sl, r6
 8001e66:	0c1e      	lsrs	r6, r3, #16
 8001e68:	4456      	add	r6, sl
 8001e6a:	45b1      	cmp	r9, r6
 8001e6c:	d903      	bls.n	8001e76 <__aeabi_dmul+0x202>
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	4699      	mov	r9, r3
 8001e74:	444f      	add	r7, r9
 8001e76:	0c33      	lsrs	r3, r6, #16
 8001e78:	4699      	mov	r9, r3
 8001e7a:	003b      	movs	r3, r7
 8001e7c:	444b      	add	r3, r9
 8001e7e:	9305      	str	r3, [sp, #20]
 8001e80:	4663      	mov	r3, ip
 8001e82:	46ac      	mov	ip, r5
 8001e84:	041f      	lsls	r7, r3, #16
 8001e86:	0c3f      	lsrs	r7, r7, #16
 8001e88:	0436      	lsls	r6, r6, #16
 8001e8a:	19f6      	adds	r6, r6, r7
 8001e8c:	44b4      	add	ip, r6
 8001e8e:	4663      	mov	r3, ip
 8001e90:	9304      	str	r3, [sp, #16]
 8001e92:	465b      	mov	r3, fp
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	469c      	mov	ip, r3
 8001e98:	465b      	mov	r3, fp
 8001e9a:	041f      	lsls	r7, r3, #16
 8001e9c:	0c3f      	lsrs	r7, r7, #16
 8001e9e:	003b      	movs	r3, r7
 8001ea0:	4343      	muls	r3, r0
 8001ea2:	4699      	mov	r9, r3
 8001ea4:	4663      	mov	r3, ip
 8001ea6:	4343      	muls	r3, r0
 8001ea8:	469a      	mov	sl, r3
 8001eaa:	464b      	mov	r3, r9
 8001eac:	4660      	mov	r0, ip
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	469b      	mov	fp, r3
 8001eb2:	4348      	muls	r0, r1
 8001eb4:	4379      	muls	r1, r7
 8001eb6:	4451      	add	r1, sl
 8001eb8:	4459      	add	r1, fp
 8001eba:	458a      	cmp	sl, r1
 8001ebc:	d903      	bls.n	8001ec6 <__aeabi_dmul+0x252>
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	025b      	lsls	r3, r3, #9
 8001ec2:	469a      	mov	sl, r3
 8001ec4:	4450      	add	r0, sl
 8001ec6:	0c0b      	lsrs	r3, r1, #16
 8001ec8:	469a      	mov	sl, r3
 8001eca:	464b      	mov	r3, r9
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	0c1b      	lsrs	r3, r3, #16
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	003b      	movs	r3, r7
 8001ed4:	4363      	muls	r3, r4
 8001ed6:	0409      	lsls	r1, r1, #16
 8001ed8:	4645      	mov	r5, r8
 8001eda:	4449      	add	r1, r9
 8001edc:	4699      	mov	r9, r3
 8001ede:	4663      	mov	r3, ip
 8001ee0:	435c      	muls	r4, r3
 8001ee2:	436b      	muls	r3, r5
 8001ee4:	469c      	mov	ip, r3
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	4698      	mov	r8, r3
 8001eec:	436f      	muls	r7, r5
 8001eee:	193f      	adds	r7, r7, r4
 8001ef0:	4447      	add	r7, r8
 8001ef2:	4450      	add	r0, sl
 8001ef4:	42bc      	cmp	r4, r7
 8001ef6:	d903      	bls.n	8001f00 <__aeabi_dmul+0x28c>
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	025b      	lsls	r3, r3, #9
 8001efc:	4698      	mov	r8, r3
 8001efe:	44c4      	add	ip, r8
 8001f00:	9b04      	ldr	r3, [sp, #16]
 8001f02:	9d00      	ldr	r5, [sp, #0]
 8001f04:	4698      	mov	r8, r3
 8001f06:	4445      	add	r5, r8
 8001f08:	42b5      	cmp	r5, r6
 8001f0a:	41b6      	sbcs	r6, r6
 8001f0c:	4273      	negs	r3, r6
 8001f0e:	4698      	mov	r8, r3
 8001f10:	464b      	mov	r3, r9
 8001f12:	041e      	lsls	r6, r3, #16
 8001f14:	9b05      	ldr	r3, [sp, #20]
 8001f16:	043c      	lsls	r4, r7, #16
 8001f18:	4699      	mov	r9, r3
 8001f1a:	0c36      	lsrs	r6, r6, #16
 8001f1c:	19a4      	adds	r4, r4, r6
 8001f1e:	444c      	add	r4, r9
 8001f20:	46a1      	mov	r9, r4
 8001f22:	4683      	mov	fp, r0
 8001f24:	186e      	adds	r6, r5, r1
 8001f26:	44c1      	add	r9, r8
 8001f28:	428e      	cmp	r6, r1
 8001f2a:	4189      	sbcs	r1, r1
 8001f2c:	44cb      	add	fp, r9
 8001f2e:	465d      	mov	r5, fp
 8001f30:	4249      	negs	r1, r1
 8001f32:	186d      	adds	r5, r5, r1
 8001f34:	429c      	cmp	r4, r3
 8001f36:	41a4      	sbcs	r4, r4
 8001f38:	45c1      	cmp	r9, r8
 8001f3a:	419b      	sbcs	r3, r3
 8001f3c:	4583      	cmp	fp, r0
 8001f3e:	4180      	sbcs	r0, r0
 8001f40:	428d      	cmp	r5, r1
 8001f42:	4189      	sbcs	r1, r1
 8001f44:	425b      	negs	r3, r3
 8001f46:	4264      	negs	r4, r4
 8001f48:	431c      	orrs	r4, r3
 8001f4a:	4240      	negs	r0, r0
 8001f4c:	9b03      	ldr	r3, [sp, #12]
 8001f4e:	4249      	negs	r1, r1
 8001f50:	4301      	orrs	r1, r0
 8001f52:	0270      	lsls	r0, r6, #9
 8001f54:	0c3f      	lsrs	r7, r7, #16
 8001f56:	4318      	orrs	r0, r3
 8001f58:	19e4      	adds	r4, r4, r7
 8001f5a:	1e47      	subs	r7, r0, #1
 8001f5c:	41b8      	sbcs	r0, r7
 8001f5e:	1864      	adds	r4, r4, r1
 8001f60:	4464      	add	r4, ip
 8001f62:	0df6      	lsrs	r6, r6, #23
 8001f64:	0261      	lsls	r1, r4, #9
 8001f66:	4330      	orrs	r0, r6
 8001f68:	0dec      	lsrs	r4, r5, #23
 8001f6a:	026e      	lsls	r6, r5, #9
 8001f6c:	430c      	orrs	r4, r1
 8001f6e:	4330      	orrs	r0, r6
 8001f70:	01c9      	lsls	r1, r1, #7
 8001f72:	d400      	bmi.n	8001f76 <__aeabi_dmul+0x302>
 8001f74:	e0f1      	b.n	800215a <__aeabi_dmul+0x4e6>
 8001f76:	2101      	movs	r1, #1
 8001f78:	0843      	lsrs	r3, r0, #1
 8001f7a:	4001      	ands	r1, r0
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	07e0      	lsls	r0, r4, #31
 8001f80:	4318      	orrs	r0, r3
 8001f82:	0864      	lsrs	r4, r4, #1
 8001f84:	4915      	ldr	r1, [pc, #84]	; (8001fdc <__aeabi_dmul+0x368>)
 8001f86:	9b02      	ldr	r3, [sp, #8]
 8001f88:	468c      	mov	ip, r1
 8001f8a:	4463      	add	r3, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	dc00      	bgt.n	8001f92 <__aeabi_dmul+0x31e>
 8001f90:	e097      	b.n	80020c2 <__aeabi_dmul+0x44e>
 8001f92:	0741      	lsls	r1, r0, #29
 8001f94:	d009      	beq.n	8001faa <__aeabi_dmul+0x336>
 8001f96:	210f      	movs	r1, #15
 8001f98:	4001      	ands	r1, r0
 8001f9a:	2904      	cmp	r1, #4
 8001f9c:	d005      	beq.n	8001faa <__aeabi_dmul+0x336>
 8001f9e:	1d01      	adds	r1, r0, #4
 8001fa0:	4281      	cmp	r1, r0
 8001fa2:	4180      	sbcs	r0, r0
 8001fa4:	4240      	negs	r0, r0
 8001fa6:	1824      	adds	r4, r4, r0
 8001fa8:	0008      	movs	r0, r1
 8001faa:	01e1      	lsls	r1, r4, #7
 8001fac:	d506      	bpl.n	8001fbc <__aeabi_dmul+0x348>
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	00c9      	lsls	r1, r1, #3
 8001fb2:	468c      	mov	ip, r1
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <__aeabi_dmul+0x36c>)
 8001fb6:	401c      	ands	r4, r3
 8001fb8:	9b02      	ldr	r3, [sp, #8]
 8001fba:	4463      	add	r3, ip
 8001fbc:	4909      	ldr	r1, [pc, #36]	; (8001fe4 <__aeabi_dmul+0x370>)
 8001fbe:	428b      	cmp	r3, r1
 8001fc0:	dd00      	ble.n	8001fc4 <__aeabi_dmul+0x350>
 8001fc2:	e710      	b.n	8001de6 <__aeabi_dmul+0x172>
 8001fc4:	0761      	lsls	r1, r4, #29
 8001fc6:	08c5      	lsrs	r5, r0, #3
 8001fc8:	0264      	lsls	r4, r4, #9
 8001fca:	055b      	lsls	r3, r3, #21
 8001fcc:	430d      	orrs	r5, r1
 8001fce:	0b24      	lsrs	r4, r4, #12
 8001fd0:	0d5b      	lsrs	r3, r3, #21
 8001fd2:	e6c1      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001fd4:	000007ff 	.word	0x000007ff
 8001fd8:	fffffc01 	.word	0xfffffc01
 8001fdc:	000003ff 	.word	0x000003ff
 8001fe0:	feffffff 	.word	0xfeffffff
 8001fe4:	000007fe 	.word	0x000007fe
 8001fe8:	464b      	mov	r3, r9
 8001fea:	4323      	orrs	r3, r4
 8001fec:	d059      	beq.n	80020a2 <__aeabi_dmul+0x42e>
 8001fee:	2c00      	cmp	r4, #0
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dmul+0x380>
 8001ff2:	e0a3      	b.n	800213c <__aeabi_dmul+0x4c8>
 8001ff4:	0020      	movs	r0, r4
 8001ff6:	f000 fdf9 	bl	8002bec <__clzsi2>
 8001ffa:	0001      	movs	r1, r0
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	390b      	subs	r1, #11
 8002000:	221d      	movs	r2, #29
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	4649      	mov	r1, r9
 8002006:	0018      	movs	r0, r3
 8002008:	40d1      	lsrs	r1, r2
 800200a:	464a      	mov	r2, r9
 800200c:	3808      	subs	r0, #8
 800200e:	4082      	lsls	r2, r0
 8002010:	4084      	lsls	r4, r0
 8002012:	0010      	movs	r0, r2
 8002014:	430c      	orrs	r4, r1
 8002016:	4a74      	ldr	r2, [pc, #464]	; (80021e8 <__aeabi_dmul+0x574>)
 8002018:	1aeb      	subs	r3, r5, r3
 800201a:	4694      	mov	ip, r2
 800201c:	4642      	mov	r2, r8
 800201e:	4463      	add	r3, ip
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	9b01      	ldr	r3, [sp, #4]
 8002024:	407a      	eors	r2, r7
 8002026:	3301      	adds	r3, #1
 8002028:	2100      	movs	r1, #0
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	2e0a      	cmp	r6, #10
 8002030:	dd00      	ble.n	8002034 <__aeabi_dmul+0x3c0>
 8002032:	e667      	b.n	8001d04 <__aeabi_dmul+0x90>
 8002034:	e683      	b.n	8001d3e <__aeabi_dmul+0xca>
 8002036:	465b      	mov	r3, fp
 8002038:	4303      	orrs	r3, r0
 800203a:	469a      	mov	sl, r3
 800203c:	d02a      	beq.n	8002094 <__aeabi_dmul+0x420>
 800203e:	465b      	mov	r3, fp
 8002040:	2b00      	cmp	r3, #0
 8002042:	d06d      	beq.n	8002120 <__aeabi_dmul+0x4ac>
 8002044:	4658      	mov	r0, fp
 8002046:	f000 fdd1 	bl	8002bec <__clzsi2>
 800204a:	0001      	movs	r1, r0
 800204c:	0003      	movs	r3, r0
 800204e:	390b      	subs	r1, #11
 8002050:	221d      	movs	r2, #29
 8002052:	1a52      	subs	r2, r2, r1
 8002054:	0021      	movs	r1, r4
 8002056:	0018      	movs	r0, r3
 8002058:	465d      	mov	r5, fp
 800205a:	40d1      	lsrs	r1, r2
 800205c:	3808      	subs	r0, #8
 800205e:	4085      	lsls	r5, r0
 8002060:	000a      	movs	r2, r1
 8002062:	4084      	lsls	r4, r0
 8002064:	432a      	orrs	r2, r5
 8002066:	4693      	mov	fp, r2
 8002068:	46a2      	mov	sl, r4
 800206a:	4d5f      	ldr	r5, [pc, #380]	; (80021e8 <__aeabi_dmul+0x574>)
 800206c:	2600      	movs	r6, #0
 800206e:	1aed      	subs	r5, r5, r3
 8002070:	2300      	movs	r3, #0
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	e625      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 8002076:	465b      	mov	r3, fp
 8002078:	4303      	orrs	r3, r0
 800207a:	469a      	mov	sl, r3
 800207c:	d105      	bne.n	800208a <__aeabi_dmul+0x416>
 800207e:	2300      	movs	r3, #0
 8002080:	469b      	mov	fp, r3
 8002082:	3302      	adds	r3, #2
 8002084:	2608      	movs	r6, #8
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	e61b      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 800208a:	2303      	movs	r3, #3
 800208c:	4682      	mov	sl, r0
 800208e:	260c      	movs	r6, #12
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	e616      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 8002094:	2300      	movs	r3, #0
 8002096:	469b      	mov	fp, r3
 8002098:	3301      	adds	r3, #1
 800209a:	2604      	movs	r6, #4
 800209c:	2500      	movs	r5, #0
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	e60f      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 80020a2:	4642      	mov	r2, r8
 80020a4:	3301      	adds	r3, #1
 80020a6:	9501      	str	r5, [sp, #4]
 80020a8:	431e      	orrs	r6, r3
 80020aa:	9b01      	ldr	r3, [sp, #4]
 80020ac:	407a      	eors	r2, r7
 80020ae:	3301      	adds	r3, #1
 80020b0:	2400      	movs	r4, #0
 80020b2:	2000      	movs	r0, #0
 80020b4:	2101      	movs	r1, #1
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	2e0a      	cmp	r6, #10
 80020bc:	dd00      	ble.n	80020c0 <__aeabi_dmul+0x44c>
 80020be:	e621      	b.n	8001d04 <__aeabi_dmul+0x90>
 80020c0:	e63d      	b.n	8001d3e <__aeabi_dmul+0xca>
 80020c2:	2101      	movs	r1, #1
 80020c4:	1ac9      	subs	r1, r1, r3
 80020c6:	2938      	cmp	r1, #56	; 0x38
 80020c8:	dd00      	ble.n	80020cc <__aeabi_dmul+0x458>
 80020ca:	e642      	b.n	8001d52 <__aeabi_dmul+0xde>
 80020cc:	291f      	cmp	r1, #31
 80020ce:	dd47      	ble.n	8002160 <__aeabi_dmul+0x4ec>
 80020d0:	261f      	movs	r6, #31
 80020d2:	0025      	movs	r5, r4
 80020d4:	4276      	negs	r6, r6
 80020d6:	1af3      	subs	r3, r6, r3
 80020d8:	40dd      	lsrs	r5, r3
 80020da:	002b      	movs	r3, r5
 80020dc:	2920      	cmp	r1, #32
 80020de:	d005      	beq.n	80020ec <__aeabi_dmul+0x478>
 80020e0:	4942      	ldr	r1, [pc, #264]	; (80021ec <__aeabi_dmul+0x578>)
 80020e2:	9d02      	ldr	r5, [sp, #8]
 80020e4:	468c      	mov	ip, r1
 80020e6:	4465      	add	r5, ip
 80020e8:	40ac      	lsls	r4, r5
 80020ea:	4320      	orrs	r0, r4
 80020ec:	1e41      	subs	r1, r0, #1
 80020ee:	4188      	sbcs	r0, r1
 80020f0:	4318      	orrs	r0, r3
 80020f2:	2307      	movs	r3, #7
 80020f4:	001d      	movs	r5, r3
 80020f6:	2400      	movs	r4, #0
 80020f8:	4005      	ands	r5, r0
 80020fa:	4203      	tst	r3, r0
 80020fc:	d04a      	beq.n	8002194 <__aeabi_dmul+0x520>
 80020fe:	230f      	movs	r3, #15
 8002100:	2400      	movs	r4, #0
 8002102:	4003      	ands	r3, r0
 8002104:	2b04      	cmp	r3, #4
 8002106:	d042      	beq.n	800218e <__aeabi_dmul+0x51a>
 8002108:	1d03      	adds	r3, r0, #4
 800210a:	4283      	cmp	r3, r0
 800210c:	4180      	sbcs	r0, r0
 800210e:	4240      	negs	r0, r0
 8002110:	1824      	adds	r4, r4, r0
 8002112:	0018      	movs	r0, r3
 8002114:	0223      	lsls	r3, r4, #8
 8002116:	d53a      	bpl.n	800218e <__aeabi_dmul+0x51a>
 8002118:	2301      	movs	r3, #1
 800211a:	2400      	movs	r4, #0
 800211c:	2500      	movs	r5, #0
 800211e:	e61b      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8002120:	f000 fd64 	bl	8002bec <__clzsi2>
 8002124:	0001      	movs	r1, r0
 8002126:	0003      	movs	r3, r0
 8002128:	3115      	adds	r1, #21
 800212a:	3320      	adds	r3, #32
 800212c:	291c      	cmp	r1, #28
 800212e:	dd8f      	ble.n	8002050 <__aeabi_dmul+0x3dc>
 8002130:	3808      	subs	r0, #8
 8002132:	2200      	movs	r2, #0
 8002134:	4084      	lsls	r4, r0
 8002136:	4692      	mov	sl, r2
 8002138:	46a3      	mov	fp, r4
 800213a:	e796      	b.n	800206a <__aeabi_dmul+0x3f6>
 800213c:	f000 fd56 	bl	8002bec <__clzsi2>
 8002140:	0001      	movs	r1, r0
 8002142:	0003      	movs	r3, r0
 8002144:	3115      	adds	r1, #21
 8002146:	3320      	adds	r3, #32
 8002148:	291c      	cmp	r1, #28
 800214a:	dc00      	bgt.n	800214e <__aeabi_dmul+0x4da>
 800214c:	e758      	b.n	8002000 <__aeabi_dmul+0x38c>
 800214e:	0002      	movs	r2, r0
 8002150:	464c      	mov	r4, r9
 8002152:	3a08      	subs	r2, #8
 8002154:	2000      	movs	r0, #0
 8002156:	4094      	lsls	r4, r2
 8002158:	e75d      	b.n	8002016 <__aeabi_dmul+0x3a2>
 800215a:	9b01      	ldr	r3, [sp, #4]
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	e711      	b.n	8001f84 <__aeabi_dmul+0x310>
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <__aeabi_dmul+0x57c>)
 8002162:	0026      	movs	r6, r4
 8002164:	469c      	mov	ip, r3
 8002166:	0003      	movs	r3, r0
 8002168:	9d02      	ldr	r5, [sp, #8]
 800216a:	40cb      	lsrs	r3, r1
 800216c:	4465      	add	r5, ip
 800216e:	40ae      	lsls	r6, r5
 8002170:	431e      	orrs	r6, r3
 8002172:	0003      	movs	r3, r0
 8002174:	40ab      	lsls	r3, r5
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	4183      	sbcs	r3, r0
 800217a:	0030      	movs	r0, r6
 800217c:	4318      	orrs	r0, r3
 800217e:	40cc      	lsrs	r4, r1
 8002180:	0743      	lsls	r3, r0, #29
 8002182:	d0c7      	beq.n	8002114 <__aeabi_dmul+0x4a0>
 8002184:	230f      	movs	r3, #15
 8002186:	4003      	ands	r3, r0
 8002188:	2b04      	cmp	r3, #4
 800218a:	d1bd      	bne.n	8002108 <__aeabi_dmul+0x494>
 800218c:	e7c2      	b.n	8002114 <__aeabi_dmul+0x4a0>
 800218e:	0765      	lsls	r5, r4, #29
 8002190:	0264      	lsls	r4, r4, #9
 8002192:	0b24      	lsrs	r4, r4, #12
 8002194:	08c0      	lsrs	r0, r0, #3
 8002196:	2300      	movs	r3, #0
 8002198:	4305      	orrs	r5, r0
 800219a:	e5dd      	b.n	8001d58 <__aeabi_dmul+0xe4>
 800219c:	2500      	movs	r5, #0
 800219e:	2302      	movs	r3, #2
 80021a0:	2e0f      	cmp	r6, #15
 80021a2:	d10c      	bne.n	80021be <__aeabi_dmul+0x54a>
 80021a4:	2480      	movs	r4, #128	; 0x80
 80021a6:	465b      	mov	r3, fp
 80021a8:	0324      	lsls	r4, r4, #12
 80021aa:	4223      	tst	r3, r4
 80021ac:	d00e      	beq.n	80021cc <__aeabi_dmul+0x558>
 80021ae:	4221      	tst	r1, r4
 80021b0:	d10c      	bne.n	80021cc <__aeabi_dmul+0x558>
 80021b2:	430c      	orrs	r4, r1
 80021b4:	0324      	lsls	r4, r4, #12
 80021b6:	003a      	movs	r2, r7
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <__aeabi_dmul+0x580>)
 80021ba:	0b24      	lsrs	r4, r4, #12
 80021bc:	e5cc      	b.n	8001d58 <__aeabi_dmul+0xe4>
 80021be:	2e0b      	cmp	r6, #11
 80021c0:	d000      	beq.n	80021c4 <__aeabi_dmul+0x550>
 80021c2:	e5a2      	b.n	8001d0a <__aeabi_dmul+0x96>
 80021c4:	468b      	mov	fp, r1
 80021c6:	46aa      	mov	sl, r5
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	e5f7      	b.n	8001dbc <__aeabi_dmul+0x148>
 80021cc:	2480      	movs	r4, #128	; 0x80
 80021ce:	465b      	mov	r3, fp
 80021d0:	0324      	lsls	r4, r4, #12
 80021d2:	431c      	orrs	r4, r3
 80021d4:	0324      	lsls	r4, r4, #12
 80021d6:	4642      	mov	r2, r8
 80021d8:	4655      	mov	r5, sl
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <__aeabi_dmul+0x580>)
 80021dc:	0b24      	lsrs	r4, r4, #12
 80021de:	e5bb      	b.n	8001d58 <__aeabi_dmul+0xe4>
 80021e0:	464d      	mov	r5, r9
 80021e2:	0021      	movs	r1, r4
 80021e4:	2303      	movs	r3, #3
 80021e6:	e7db      	b.n	80021a0 <__aeabi_dmul+0x52c>
 80021e8:	fffffc0d 	.word	0xfffffc0d
 80021ec:	0000043e 	.word	0x0000043e
 80021f0:	0000041e 	.word	0x0000041e
 80021f4:	000007ff 	.word	0x000007ff

080021f8 <__aeabi_dsub>:
 80021f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fa:	4657      	mov	r7, sl
 80021fc:	464e      	mov	r6, r9
 80021fe:	4645      	mov	r5, r8
 8002200:	46de      	mov	lr, fp
 8002202:	b5e0      	push	{r5, r6, r7, lr}
 8002204:	000d      	movs	r5, r1
 8002206:	0004      	movs	r4, r0
 8002208:	0019      	movs	r1, r3
 800220a:	0010      	movs	r0, r2
 800220c:	032b      	lsls	r3, r5, #12
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	0f62      	lsrs	r2, r4, #29
 8002212:	431a      	orrs	r2, r3
 8002214:	00e3      	lsls	r3, r4, #3
 8002216:	030c      	lsls	r4, r1, #12
 8002218:	0a64      	lsrs	r4, r4, #9
 800221a:	0f47      	lsrs	r7, r0, #29
 800221c:	4327      	orrs	r7, r4
 800221e:	4cd0      	ldr	r4, [pc, #832]	; (8002560 <__aeabi_dsub+0x368>)
 8002220:	006e      	lsls	r6, r5, #1
 8002222:	4691      	mov	r9, r2
 8002224:	b083      	sub	sp, #12
 8002226:	004a      	lsls	r2, r1, #1
 8002228:	00c0      	lsls	r0, r0, #3
 800222a:	4698      	mov	r8, r3
 800222c:	46a2      	mov	sl, r4
 800222e:	0d76      	lsrs	r6, r6, #21
 8002230:	0fed      	lsrs	r5, r5, #31
 8002232:	0d52      	lsrs	r2, r2, #21
 8002234:	0fc9      	lsrs	r1, r1, #31
 8002236:	9001      	str	r0, [sp, #4]
 8002238:	42a2      	cmp	r2, r4
 800223a:	d100      	bne.n	800223e <__aeabi_dsub+0x46>
 800223c:	e0b9      	b.n	80023b2 <__aeabi_dsub+0x1ba>
 800223e:	2401      	movs	r4, #1
 8002240:	4061      	eors	r1, r4
 8002242:	468b      	mov	fp, r1
 8002244:	428d      	cmp	r5, r1
 8002246:	d100      	bne.n	800224a <__aeabi_dsub+0x52>
 8002248:	e08d      	b.n	8002366 <__aeabi_dsub+0x16e>
 800224a:	1ab4      	subs	r4, r6, r2
 800224c:	46a4      	mov	ip, r4
 800224e:	2c00      	cmp	r4, #0
 8002250:	dc00      	bgt.n	8002254 <__aeabi_dsub+0x5c>
 8002252:	e0b7      	b.n	80023c4 <__aeabi_dsub+0x1cc>
 8002254:	2a00      	cmp	r2, #0
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x62>
 8002258:	e0cb      	b.n	80023f2 <__aeabi_dsub+0x1fa>
 800225a:	4ac1      	ldr	r2, [pc, #772]	; (8002560 <__aeabi_dsub+0x368>)
 800225c:	4296      	cmp	r6, r2
 800225e:	d100      	bne.n	8002262 <__aeabi_dsub+0x6a>
 8002260:	e186      	b.n	8002570 <__aeabi_dsub+0x378>
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	0412      	lsls	r2, r2, #16
 8002266:	4317      	orrs	r7, r2
 8002268:	4662      	mov	r2, ip
 800226a:	2a38      	cmp	r2, #56	; 0x38
 800226c:	dd00      	ble.n	8002270 <__aeabi_dsub+0x78>
 800226e:	e1a4      	b.n	80025ba <__aeabi_dsub+0x3c2>
 8002270:	2a1f      	cmp	r2, #31
 8002272:	dd00      	ble.n	8002276 <__aeabi_dsub+0x7e>
 8002274:	e21d      	b.n	80026b2 <__aeabi_dsub+0x4ba>
 8002276:	4661      	mov	r1, ip
 8002278:	2220      	movs	r2, #32
 800227a:	003c      	movs	r4, r7
 800227c:	1a52      	subs	r2, r2, r1
 800227e:	0001      	movs	r1, r0
 8002280:	4090      	lsls	r0, r2
 8002282:	4094      	lsls	r4, r2
 8002284:	1e42      	subs	r2, r0, #1
 8002286:	4190      	sbcs	r0, r2
 8002288:	4662      	mov	r2, ip
 800228a:	46a0      	mov	r8, r4
 800228c:	4664      	mov	r4, ip
 800228e:	40d7      	lsrs	r7, r2
 8002290:	464a      	mov	r2, r9
 8002292:	40e1      	lsrs	r1, r4
 8002294:	4644      	mov	r4, r8
 8002296:	1bd2      	subs	r2, r2, r7
 8002298:	4691      	mov	r9, r2
 800229a:	430c      	orrs	r4, r1
 800229c:	4304      	orrs	r4, r0
 800229e:	1b1c      	subs	r4, r3, r4
 80022a0:	42a3      	cmp	r3, r4
 80022a2:	4192      	sbcs	r2, r2
 80022a4:	464b      	mov	r3, r9
 80022a6:	4252      	negs	r2, r2
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	469a      	mov	sl, r3
 80022ac:	4653      	mov	r3, sl
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	d400      	bmi.n	80022b4 <__aeabi_dsub+0xbc>
 80022b2:	e12b      	b.n	800250c <__aeabi_dsub+0x314>
 80022b4:	4653      	mov	r3, sl
 80022b6:	025a      	lsls	r2, r3, #9
 80022b8:	0a53      	lsrs	r3, r2, #9
 80022ba:	469a      	mov	sl, r3
 80022bc:	4653      	mov	r3, sl
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d100      	bne.n	80022c4 <__aeabi_dsub+0xcc>
 80022c2:	e166      	b.n	8002592 <__aeabi_dsub+0x39a>
 80022c4:	4650      	mov	r0, sl
 80022c6:	f000 fc91 	bl	8002bec <__clzsi2>
 80022ca:	0003      	movs	r3, r0
 80022cc:	3b08      	subs	r3, #8
 80022ce:	2220      	movs	r2, #32
 80022d0:	0020      	movs	r0, r4
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	4651      	mov	r1, sl
 80022d6:	40d0      	lsrs	r0, r2
 80022d8:	4099      	lsls	r1, r3
 80022da:	0002      	movs	r2, r0
 80022dc:	409c      	lsls	r4, r3
 80022de:	430a      	orrs	r2, r1
 80022e0:	429e      	cmp	r6, r3
 80022e2:	dd00      	ble.n	80022e6 <__aeabi_dsub+0xee>
 80022e4:	e164      	b.n	80025b0 <__aeabi_dsub+0x3b8>
 80022e6:	1b9b      	subs	r3, r3, r6
 80022e8:	1c59      	adds	r1, r3, #1
 80022ea:	291f      	cmp	r1, #31
 80022ec:	dd00      	ble.n	80022f0 <__aeabi_dsub+0xf8>
 80022ee:	e0fe      	b.n	80024ee <__aeabi_dsub+0x2f6>
 80022f0:	2320      	movs	r3, #32
 80022f2:	0010      	movs	r0, r2
 80022f4:	0026      	movs	r6, r4
 80022f6:	1a5b      	subs	r3, r3, r1
 80022f8:	409c      	lsls	r4, r3
 80022fa:	4098      	lsls	r0, r3
 80022fc:	40ce      	lsrs	r6, r1
 80022fe:	40ca      	lsrs	r2, r1
 8002300:	1e63      	subs	r3, r4, #1
 8002302:	419c      	sbcs	r4, r3
 8002304:	4330      	orrs	r0, r6
 8002306:	4692      	mov	sl, r2
 8002308:	2600      	movs	r6, #0
 800230a:	4304      	orrs	r4, r0
 800230c:	0763      	lsls	r3, r4, #29
 800230e:	d009      	beq.n	8002324 <__aeabi_dsub+0x12c>
 8002310:	230f      	movs	r3, #15
 8002312:	4023      	ands	r3, r4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d005      	beq.n	8002324 <__aeabi_dsub+0x12c>
 8002318:	1d23      	adds	r3, r4, #4
 800231a:	42a3      	cmp	r3, r4
 800231c:	41a4      	sbcs	r4, r4
 800231e:	4264      	negs	r4, r4
 8002320:	44a2      	add	sl, r4
 8002322:	001c      	movs	r4, r3
 8002324:	4653      	mov	r3, sl
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	d400      	bmi.n	800232c <__aeabi_dsub+0x134>
 800232a:	e0f2      	b.n	8002512 <__aeabi_dsub+0x31a>
 800232c:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <__aeabi_dsub+0x368>)
 800232e:	3601      	adds	r6, #1
 8002330:	429e      	cmp	r6, r3
 8002332:	d100      	bne.n	8002336 <__aeabi_dsub+0x13e>
 8002334:	e10f      	b.n	8002556 <__aeabi_dsub+0x35e>
 8002336:	4653      	mov	r3, sl
 8002338:	498a      	ldr	r1, [pc, #552]	; (8002564 <__aeabi_dsub+0x36c>)
 800233a:	08e4      	lsrs	r4, r4, #3
 800233c:	400b      	ands	r3, r1
 800233e:	0019      	movs	r1, r3
 8002340:	075b      	lsls	r3, r3, #29
 8002342:	4323      	orrs	r3, r4
 8002344:	0572      	lsls	r2, r6, #21
 8002346:	024c      	lsls	r4, r1, #9
 8002348:	0b24      	lsrs	r4, r4, #12
 800234a:	0d52      	lsrs	r2, r2, #21
 800234c:	0512      	lsls	r2, r2, #20
 800234e:	4322      	orrs	r2, r4
 8002350:	07ed      	lsls	r5, r5, #31
 8002352:	432a      	orrs	r2, r5
 8002354:	0018      	movs	r0, r3
 8002356:	0011      	movs	r1, r2
 8002358:	b003      	add	sp, #12
 800235a:	bcf0      	pop	{r4, r5, r6, r7}
 800235c:	46bb      	mov	fp, r7
 800235e:	46b2      	mov	sl, r6
 8002360:	46a9      	mov	r9, r5
 8002362:	46a0      	mov	r8, r4
 8002364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002366:	1ab4      	subs	r4, r6, r2
 8002368:	46a4      	mov	ip, r4
 800236a:	2c00      	cmp	r4, #0
 800236c:	dd59      	ble.n	8002422 <__aeabi_dsub+0x22a>
 800236e:	2a00      	cmp	r2, #0
 8002370:	d100      	bne.n	8002374 <__aeabi_dsub+0x17c>
 8002372:	e0b0      	b.n	80024d6 <__aeabi_dsub+0x2de>
 8002374:	4556      	cmp	r6, sl
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x182>
 8002378:	e0fa      	b.n	8002570 <__aeabi_dsub+0x378>
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	0412      	lsls	r2, r2, #16
 800237e:	4317      	orrs	r7, r2
 8002380:	4662      	mov	r2, ip
 8002382:	2a38      	cmp	r2, #56	; 0x38
 8002384:	dd00      	ble.n	8002388 <__aeabi_dsub+0x190>
 8002386:	e0d4      	b.n	8002532 <__aeabi_dsub+0x33a>
 8002388:	2a1f      	cmp	r2, #31
 800238a:	dc00      	bgt.n	800238e <__aeabi_dsub+0x196>
 800238c:	e1c0      	b.n	8002710 <__aeabi_dsub+0x518>
 800238e:	0039      	movs	r1, r7
 8002390:	3a20      	subs	r2, #32
 8002392:	40d1      	lsrs	r1, r2
 8002394:	4662      	mov	r2, ip
 8002396:	2a20      	cmp	r2, #32
 8002398:	d006      	beq.n	80023a8 <__aeabi_dsub+0x1b0>
 800239a:	4664      	mov	r4, ip
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	1b12      	subs	r2, r2, r4
 80023a0:	003c      	movs	r4, r7
 80023a2:	4094      	lsls	r4, r2
 80023a4:	4304      	orrs	r4, r0
 80023a6:	9401      	str	r4, [sp, #4]
 80023a8:	9c01      	ldr	r4, [sp, #4]
 80023aa:	1e62      	subs	r2, r4, #1
 80023ac:	4194      	sbcs	r4, r2
 80023ae:	430c      	orrs	r4, r1
 80023b0:	e0c3      	b.n	800253a <__aeabi_dsub+0x342>
 80023b2:	003c      	movs	r4, r7
 80023b4:	4304      	orrs	r4, r0
 80023b6:	d02b      	beq.n	8002410 <__aeabi_dsub+0x218>
 80023b8:	468b      	mov	fp, r1
 80023ba:	428d      	cmp	r5, r1
 80023bc:	d02e      	beq.n	800241c <__aeabi_dsub+0x224>
 80023be:	4c6a      	ldr	r4, [pc, #424]	; (8002568 <__aeabi_dsub+0x370>)
 80023c0:	46a4      	mov	ip, r4
 80023c2:	44b4      	add	ip, r6
 80023c4:	4664      	mov	r4, ip
 80023c6:	2c00      	cmp	r4, #0
 80023c8:	d05f      	beq.n	800248a <__aeabi_dsub+0x292>
 80023ca:	1b94      	subs	r4, r2, r6
 80023cc:	46a4      	mov	ip, r4
 80023ce:	2e00      	cmp	r6, #0
 80023d0:	d000      	beq.n	80023d4 <__aeabi_dsub+0x1dc>
 80023d2:	e120      	b.n	8002616 <__aeabi_dsub+0x41e>
 80023d4:	464c      	mov	r4, r9
 80023d6:	431c      	orrs	r4, r3
 80023d8:	d100      	bne.n	80023dc <__aeabi_dsub+0x1e4>
 80023da:	e1c7      	b.n	800276c <__aeabi_dsub+0x574>
 80023dc:	4661      	mov	r1, ip
 80023de:	1e4c      	subs	r4, r1, #1
 80023e0:	2901      	cmp	r1, #1
 80023e2:	d100      	bne.n	80023e6 <__aeabi_dsub+0x1ee>
 80023e4:	e223      	b.n	800282e <__aeabi_dsub+0x636>
 80023e6:	4d5e      	ldr	r5, [pc, #376]	; (8002560 <__aeabi_dsub+0x368>)
 80023e8:	45ac      	cmp	ip, r5
 80023ea:	d100      	bne.n	80023ee <__aeabi_dsub+0x1f6>
 80023ec:	e1d8      	b.n	80027a0 <__aeabi_dsub+0x5a8>
 80023ee:	46a4      	mov	ip, r4
 80023f0:	e11a      	b.n	8002628 <__aeabi_dsub+0x430>
 80023f2:	003a      	movs	r2, r7
 80023f4:	4302      	orrs	r2, r0
 80023f6:	d100      	bne.n	80023fa <__aeabi_dsub+0x202>
 80023f8:	e0e4      	b.n	80025c4 <__aeabi_dsub+0x3cc>
 80023fa:	0022      	movs	r2, r4
 80023fc:	3a01      	subs	r2, #1
 80023fe:	2c01      	cmp	r4, #1
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x20c>
 8002402:	e1c3      	b.n	800278c <__aeabi_dsub+0x594>
 8002404:	4956      	ldr	r1, [pc, #344]	; (8002560 <__aeabi_dsub+0x368>)
 8002406:	428c      	cmp	r4, r1
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x214>
 800240a:	e0b1      	b.n	8002570 <__aeabi_dsub+0x378>
 800240c:	4694      	mov	ip, r2
 800240e:	e72b      	b.n	8002268 <__aeabi_dsub+0x70>
 8002410:	2401      	movs	r4, #1
 8002412:	4061      	eors	r1, r4
 8002414:	468b      	mov	fp, r1
 8002416:	428d      	cmp	r5, r1
 8002418:	d000      	beq.n	800241c <__aeabi_dsub+0x224>
 800241a:	e716      	b.n	800224a <__aeabi_dsub+0x52>
 800241c:	4952      	ldr	r1, [pc, #328]	; (8002568 <__aeabi_dsub+0x370>)
 800241e:	468c      	mov	ip, r1
 8002420:	44b4      	add	ip, r6
 8002422:	4664      	mov	r4, ip
 8002424:	2c00      	cmp	r4, #0
 8002426:	d100      	bne.n	800242a <__aeabi_dsub+0x232>
 8002428:	e0d3      	b.n	80025d2 <__aeabi_dsub+0x3da>
 800242a:	1b91      	subs	r1, r2, r6
 800242c:	468c      	mov	ip, r1
 800242e:	2e00      	cmp	r6, #0
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x23c>
 8002432:	e15e      	b.n	80026f2 <__aeabi_dsub+0x4fa>
 8002434:	494a      	ldr	r1, [pc, #296]	; (8002560 <__aeabi_dsub+0x368>)
 8002436:	428a      	cmp	r2, r1
 8002438:	d100      	bne.n	800243c <__aeabi_dsub+0x244>
 800243a:	e1be      	b.n	80027ba <__aeabi_dsub+0x5c2>
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	464c      	mov	r4, r9
 8002440:	0409      	lsls	r1, r1, #16
 8002442:	430c      	orrs	r4, r1
 8002444:	46a1      	mov	r9, r4
 8002446:	4661      	mov	r1, ip
 8002448:	2938      	cmp	r1, #56	; 0x38
 800244a:	dd00      	ble.n	800244e <__aeabi_dsub+0x256>
 800244c:	e1ba      	b.n	80027c4 <__aeabi_dsub+0x5cc>
 800244e:	291f      	cmp	r1, #31
 8002450:	dd00      	ble.n	8002454 <__aeabi_dsub+0x25c>
 8002452:	e227      	b.n	80028a4 <__aeabi_dsub+0x6ac>
 8002454:	2420      	movs	r4, #32
 8002456:	1a64      	subs	r4, r4, r1
 8002458:	4649      	mov	r1, r9
 800245a:	40a1      	lsls	r1, r4
 800245c:	001e      	movs	r6, r3
 800245e:	4688      	mov	r8, r1
 8002460:	4661      	mov	r1, ip
 8002462:	40a3      	lsls	r3, r4
 8002464:	40ce      	lsrs	r6, r1
 8002466:	4641      	mov	r1, r8
 8002468:	1e5c      	subs	r4, r3, #1
 800246a:	41a3      	sbcs	r3, r4
 800246c:	4331      	orrs	r1, r6
 800246e:	4319      	orrs	r1, r3
 8002470:	000c      	movs	r4, r1
 8002472:	4663      	mov	r3, ip
 8002474:	4649      	mov	r1, r9
 8002476:	40d9      	lsrs	r1, r3
 8002478:	187f      	adds	r7, r7, r1
 800247a:	1824      	adds	r4, r4, r0
 800247c:	4284      	cmp	r4, r0
 800247e:	419b      	sbcs	r3, r3
 8002480:	425b      	negs	r3, r3
 8002482:	469a      	mov	sl, r3
 8002484:	0016      	movs	r6, r2
 8002486:	44ba      	add	sl, r7
 8002488:	e05d      	b.n	8002546 <__aeabi_dsub+0x34e>
 800248a:	4c38      	ldr	r4, [pc, #224]	; (800256c <__aeabi_dsub+0x374>)
 800248c:	1c72      	adds	r2, r6, #1
 800248e:	4222      	tst	r2, r4
 8002490:	d000      	beq.n	8002494 <__aeabi_dsub+0x29c>
 8002492:	e0df      	b.n	8002654 <__aeabi_dsub+0x45c>
 8002494:	464a      	mov	r2, r9
 8002496:	431a      	orrs	r2, r3
 8002498:	2e00      	cmp	r6, #0
 800249a:	d000      	beq.n	800249e <__aeabi_dsub+0x2a6>
 800249c:	e15c      	b.n	8002758 <__aeabi_dsub+0x560>
 800249e:	2a00      	cmp	r2, #0
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x2ac>
 80024a2:	e1cf      	b.n	8002844 <__aeabi_dsub+0x64c>
 80024a4:	003a      	movs	r2, r7
 80024a6:	4302      	orrs	r2, r0
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x2b4>
 80024aa:	e17f      	b.n	80027ac <__aeabi_dsub+0x5b4>
 80024ac:	1a1c      	subs	r4, r3, r0
 80024ae:	464a      	mov	r2, r9
 80024b0:	42a3      	cmp	r3, r4
 80024b2:	4189      	sbcs	r1, r1
 80024b4:	1bd2      	subs	r2, r2, r7
 80024b6:	4249      	negs	r1, r1
 80024b8:	1a52      	subs	r2, r2, r1
 80024ba:	4692      	mov	sl, r2
 80024bc:	0212      	lsls	r2, r2, #8
 80024be:	d400      	bmi.n	80024c2 <__aeabi_dsub+0x2ca>
 80024c0:	e20a      	b.n	80028d8 <__aeabi_dsub+0x6e0>
 80024c2:	1ac4      	subs	r4, r0, r3
 80024c4:	42a0      	cmp	r0, r4
 80024c6:	4180      	sbcs	r0, r0
 80024c8:	464b      	mov	r3, r9
 80024ca:	4240      	negs	r0, r0
 80024cc:	1aff      	subs	r7, r7, r3
 80024ce:	1a3b      	subs	r3, r7, r0
 80024d0:	469a      	mov	sl, r3
 80024d2:	465d      	mov	r5, fp
 80024d4:	e71a      	b.n	800230c <__aeabi_dsub+0x114>
 80024d6:	003a      	movs	r2, r7
 80024d8:	4302      	orrs	r2, r0
 80024da:	d073      	beq.n	80025c4 <__aeabi_dsub+0x3cc>
 80024dc:	0022      	movs	r2, r4
 80024de:	3a01      	subs	r2, #1
 80024e0:	2c01      	cmp	r4, #1
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x2ee>
 80024e4:	e0cb      	b.n	800267e <__aeabi_dsub+0x486>
 80024e6:	4554      	cmp	r4, sl
 80024e8:	d042      	beq.n	8002570 <__aeabi_dsub+0x378>
 80024ea:	4694      	mov	ip, r2
 80024ec:	e748      	b.n	8002380 <__aeabi_dsub+0x188>
 80024ee:	0010      	movs	r0, r2
 80024f0:	3b1f      	subs	r3, #31
 80024f2:	40d8      	lsrs	r0, r3
 80024f4:	2920      	cmp	r1, #32
 80024f6:	d003      	beq.n	8002500 <__aeabi_dsub+0x308>
 80024f8:	2340      	movs	r3, #64	; 0x40
 80024fa:	1a5b      	subs	r3, r3, r1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	4314      	orrs	r4, r2
 8002500:	1e63      	subs	r3, r4, #1
 8002502:	419c      	sbcs	r4, r3
 8002504:	2300      	movs	r3, #0
 8002506:	2600      	movs	r6, #0
 8002508:	469a      	mov	sl, r3
 800250a:	4304      	orrs	r4, r0
 800250c:	0763      	lsls	r3, r4, #29
 800250e:	d000      	beq.n	8002512 <__aeabi_dsub+0x31a>
 8002510:	e6fe      	b.n	8002310 <__aeabi_dsub+0x118>
 8002512:	4652      	mov	r2, sl
 8002514:	08e3      	lsrs	r3, r4, #3
 8002516:	0752      	lsls	r2, r2, #29
 8002518:	4313      	orrs	r3, r2
 800251a:	4652      	mov	r2, sl
 800251c:	46b4      	mov	ip, r6
 800251e:	08d2      	lsrs	r2, r2, #3
 8002520:	490f      	ldr	r1, [pc, #60]	; (8002560 <__aeabi_dsub+0x368>)
 8002522:	458c      	cmp	ip, r1
 8002524:	d02a      	beq.n	800257c <__aeabi_dsub+0x384>
 8002526:	0312      	lsls	r2, r2, #12
 8002528:	0b14      	lsrs	r4, r2, #12
 800252a:	4662      	mov	r2, ip
 800252c:	0552      	lsls	r2, r2, #21
 800252e:	0d52      	lsrs	r2, r2, #21
 8002530:	e70c      	b.n	800234c <__aeabi_dsub+0x154>
 8002532:	003c      	movs	r4, r7
 8002534:	4304      	orrs	r4, r0
 8002536:	1e62      	subs	r2, r4, #1
 8002538:	4194      	sbcs	r4, r2
 800253a:	18e4      	adds	r4, r4, r3
 800253c:	429c      	cmp	r4, r3
 800253e:	4192      	sbcs	r2, r2
 8002540:	4252      	negs	r2, r2
 8002542:	444a      	add	r2, r9
 8002544:	4692      	mov	sl, r2
 8002546:	4653      	mov	r3, sl
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	d5df      	bpl.n	800250c <__aeabi_dsub+0x314>
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <__aeabi_dsub+0x368>)
 800254e:	3601      	adds	r6, #1
 8002550:	429e      	cmp	r6, r3
 8002552:	d000      	beq.n	8002556 <__aeabi_dsub+0x35e>
 8002554:	e0a0      	b.n	8002698 <__aeabi_dsub+0x4a0>
 8002556:	0032      	movs	r2, r6
 8002558:	2400      	movs	r4, #0
 800255a:	2300      	movs	r3, #0
 800255c:	e6f6      	b.n	800234c <__aeabi_dsub+0x154>
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	000007ff 	.word	0x000007ff
 8002564:	ff7fffff 	.word	0xff7fffff
 8002568:	fffff801 	.word	0xfffff801
 800256c:	000007fe 	.word	0x000007fe
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	464a      	mov	r2, r9
 8002574:	0752      	lsls	r2, r2, #29
 8002576:	4313      	orrs	r3, r2
 8002578:	464a      	mov	r2, r9
 800257a:	08d2      	lsrs	r2, r2, #3
 800257c:	0019      	movs	r1, r3
 800257e:	4311      	orrs	r1, r2
 8002580:	d100      	bne.n	8002584 <__aeabi_dsub+0x38c>
 8002582:	e1b5      	b.n	80028f0 <__aeabi_dsub+0x6f8>
 8002584:	2480      	movs	r4, #128	; 0x80
 8002586:	0324      	lsls	r4, r4, #12
 8002588:	4314      	orrs	r4, r2
 800258a:	0324      	lsls	r4, r4, #12
 800258c:	4ad5      	ldr	r2, [pc, #852]	; (80028e4 <__aeabi_dsub+0x6ec>)
 800258e:	0b24      	lsrs	r4, r4, #12
 8002590:	e6dc      	b.n	800234c <__aeabi_dsub+0x154>
 8002592:	0020      	movs	r0, r4
 8002594:	f000 fb2a 	bl	8002bec <__clzsi2>
 8002598:	0003      	movs	r3, r0
 800259a:	3318      	adds	r3, #24
 800259c:	2b1f      	cmp	r3, #31
 800259e:	dc00      	bgt.n	80025a2 <__aeabi_dsub+0x3aa>
 80025a0:	e695      	b.n	80022ce <__aeabi_dsub+0xd6>
 80025a2:	0022      	movs	r2, r4
 80025a4:	3808      	subs	r0, #8
 80025a6:	4082      	lsls	r2, r0
 80025a8:	2400      	movs	r4, #0
 80025aa:	429e      	cmp	r6, r3
 80025ac:	dc00      	bgt.n	80025b0 <__aeabi_dsub+0x3b8>
 80025ae:	e69a      	b.n	80022e6 <__aeabi_dsub+0xee>
 80025b0:	1af6      	subs	r6, r6, r3
 80025b2:	4bcd      	ldr	r3, [pc, #820]	; (80028e8 <__aeabi_dsub+0x6f0>)
 80025b4:	401a      	ands	r2, r3
 80025b6:	4692      	mov	sl, r2
 80025b8:	e6a8      	b.n	800230c <__aeabi_dsub+0x114>
 80025ba:	003c      	movs	r4, r7
 80025bc:	4304      	orrs	r4, r0
 80025be:	1e62      	subs	r2, r4, #1
 80025c0:	4194      	sbcs	r4, r2
 80025c2:	e66c      	b.n	800229e <__aeabi_dsub+0xa6>
 80025c4:	464a      	mov	r2, r9
 80025c6:	08db      	lsrs	r3, r3, #3
 80025c8:	0752      	lsls	r2, r2, #29
 80025ca:	4313      	orrs	r3, r2
 80025cc:	464a      	mov	r2, r9
 80025ce:	08d2      	lsrs	r2, r2, #3
 80025d0:	e7a6      	b.n	8002520 <__aeabi_dsub+0x328>
 80025d2:	4cc6      	ldr	r4, [pc, #792]	; (80028ec <__aeabi_dsub+0x6f4>)
 80025d4:	1c72      	adds	r2, r6, #1
 80025d6:	4222      	tst	r2, r4
 80025d8:	d000      	beq.n	80025dc <__aeabi_dsub+0x3e4>
 80025da:	e0ac      	b.n	8002736 <__aeabi_dsub+0x53e>
 80025dc:	464a      	mov	r2, r9
 80025de:	431a      	orrs	r2, r3
 80025e0:	2e00      	cmp	r6, #0
 80025e2:	d000      	beq.n	80025e6 <__aeabi_dsub+0x3ee>
 80025e4:	e105      	b.n	80027f2 <__aeabi_dsub+0x5fa>
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0x3f4>
 80025ea:	e156      	b.n	800289a <__aeabi_dsub+0x6a2>
 80025ec:	003a      	movs	r2, r7
 80025ee:	4302      	orrs	r2, r0
 80025f0:	d100      	bne.n	80025f4 <__aeabi_dsub+0x3fc>
 80025f2:	e0db      	b.n	80027ac <__aeabi_dsub+0x5b4>
 80025f4:	181c      	adds	r4, r3, r0
 80025f6:	429c      	cmp	r4, r3
 80025f8:	419b      	sbcs	r3, r3
 80025fa:	444f      	add	r7, r9
 80025fc:	46ba      	mov	sl, r7
 80025fe:	425b      	negs	r3, r3
 8002600:	449a      	add	sl, r3
 8002602:	4653      	mov	r3, sl
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	d400      	bmi.n	800260a <__aeabi_dsub+0x412>
 8002608:	e780      	b.n	800250c <__aeabi_dsub+0x314>
 800260a:	4652      	mov	r2, sl
 800260c:	4bb6      	ldr	r3, [pc, #728]	; (80028e8 <__aeabi_dsub+0x6f0>)
 800260e:	2601      	movs	r6, #1
 8002610:	401a      	ands	r2, r3
 8002612:	4692      	mov	sl, r2
 8002614:	e77a      	b.n	800250c <__aeabi_dsub+0x314>
 8002616:	4cb3      	ldr	r4, [pc, #716]	; (80028e4 <__aeabi_dsub+0x6ec>)
 8002618:	42a2      	cmp	r2, r4
 800261a:	d100      	bne.n	800261e <__aeabi_dsub+0x426>
 800261c:	e0c0      	b.n	80027a0 <__aeabi_dsub+0x5a8>
 800261e:	2480      	movs	r4, #128	; 0x80
 8002620:	464d      	mov	r5, r9
 8002622:	0424      	lsls	r4, r4, #16
 8002624:	4325      	orrs	r5, r4
 8002626:	46a9      	mov	r9, r5
 8002628:	4664      	mov	r4, ip
 800262a:	2c38      	cmp	r4, #56	; 0x38
 800262c:	dc53      	bgt.n	80026d6 <__aeabi_dsub+0x4de>
 800262e:	4661      	mov	r1, ip
 8002630:	2c1f      	cmp	r4, #31
 8002632:	dd00      	ble.n	8002636 <__aeabi_dsub+0x43e>
 8002634:	e0cd      	b.n	80027d2 <__aeabi_dsub+0x5da>
 8002636:	2520      	movs	r5, #32
 8002638:	001e      	movs	r6, r3
 800263a:	1b2d      	subs	r5, r5, r4
 800263c:	464c      	mov	r4, r9
 800263e:	40ab      	lsls	r3, r5
 8002640:	40ac      	lsls	r4, r5
 8002642:	40ce      	lsrs	r6, r1
 8002644:	1e5d      	subs	r5, r3, #1
 8002646:	41ab      	sbcs	r3, r5
 8002648:	4334      	orrs	r4, r6
 800264a:	4323      	orrs	r3, r4
 800264c:	464c      	mov	r4, r9
 800264e:	40cc      	lsrs	r4, r1
 8002650:	1b3f      	subs	r7, r7, r4
 8002652:	e045      	b.n	80026e0 <__aeabi_dsub+0x4e8>
 8002654:	464a      	mov	r2, r9
 8002656:	1a1c      	subs	r4, r3, r0
 8002658:	1bd1      	subs	r1, r2, r7
 800265a:	42a3      	cmp	r3, r4
 800265c:	4192      	sbcs	r2, r2
 800265e:	4252      	negs	r2, r2
 8002660:	4692      	mov	sl, r2
 8002662:	000a      	movs	r2, r1
 8002664:	4651      	mov	r1, sl
 8002666:	1a52      	subs	r2, r2, r1
 8002668:	4692      	mov	sl, r2
 800266a:	0212      	lsls	r2, r2, #8
 800266c:	d500      	bpl.n	8002670 <__aeabi_dsub+0x478>
 800266e:	e083      	b.n	8002778 <__aeabi_dsub+0x580>
 8002670:	4653      	mov	r3, sl
 8002672:	4323      	orrs	r3, r4
 8002674:	d000      	beq.n	8002678 <__aeabi_dsub+0x480>
 8002676:	e621      	b.n	80022bc <__aeabi_dsub+0xc4>
 8002678:	2200      	movs	r2, #0
 800267a:	2500      	movs	r5, #0
 800267c:	e753      	b.n	8002526 <__aeabi_dsub+0x32e>
 800267e:	181c      	adds	r4, r3, r0
 8002680:	429c      	cmp	r4, r3
 8002682:	419b      	sbcs	r3, r3
 8002684:	444f      	add	r7, r9
 8002686:	46ba      	mov	sl, r7
 8002688:	425b      	negs	r3, r3
 800268a:	449a      	add	sl, r3
 800268c:	4653      	mov	r3, sl
 800268e:	2601      	movs	r6, #1
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	d400      	bmi.n	8002696 <__aeabi_dsub+0x49e>
 8002694:	e73a      	b.n	800250c <__aeabi_dsub+0x314>
 8002696:	2602      	movs	r6, #2
 8002698:	4652      	mov	r2, sl
 800269a:	4b93      	ldr	r3, [pc, #588]	; (80028e8 <__aeabi_dsub+0x6f0>)
 800269c:	2101      	movs	r1, #1
 800269e:	401a      	ands	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	4021      	ands	r1, r4
 80026a4:	0862      	lsrs	r2, r4, #1
 80026a6:	430a      	orrs	r2, r1
 80026a8:	07dc      	lsls	r4, r3, #31
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	469a      	mov	sl, r3
 80026ae:	4314      	orrs	r4, r2
 80026b0:	e62c      	b.n	800230c <__aeabi_dsub+0x114>
 80026b2:	0039      	movs	r1, r7
 80026b4:	3a20      	subs	r2, #32
 80026b6:	40d1      	lsrs	r1, r2
 80026b8:	4662      	mov	r2, ip
 80026ba:	2a20      	cmp	r2, #32
 80026bc:	d006      	beq.n	80026cc <__aeabi_dsub+0x4d4>
 80026be:	4664      	mov	r4, ip
 80026c0:	2240      	movs	r2, #64	; 0x40
 80026c2:	1b12      	subs	r2, r2, r4
 80026c4:	003c      	movs	r4, r7
 80026c6:	4094      	lsls	r4, r2
 80026c8:	4304      	orrs	r4, r0
 80026ca:	9401      	str	r4, [sp, #4]
 80026cc:	9c01      	ldr	r4, [sp, #4]
 80026ce:	1e62      	subs	r2, r4, #1
 80026d0:	4194      	sbcs	r4, r2
 80026d2:	430c      	orrs	r4, r1
 80026d4:	e5e3      	b.n	800229e <__aeabi_dsub+0xa6>
 80026d6:	4649      	mov	r1, r9
 80026d8:	4319      	orrs	r1, r3
 80026da:	000b      	movs	r3, r1
 80026dc:	1e5c      	subs	r4, r3, #1
 80026de:	41a3      	sbcs	r3, r4
 80026e0:	1ac4      	subs	r4, r0, r3
 80026e2:	42a0      	cmp	r0, r4
 80026e4:	419b      	sbcs	r3, r3
 80026e6:	425b      	negs	r3, r3
 80026e8:	1afb      	subs	r3, r7, r3
 80026ea:	469a      	mov	sl, r3
 80026ec:	465d      	mov	r5, fp
 80026ee:	0016      	movs	r6, r2
 80026f0:	e5dc      	b.n	80022ac <__aeabi_dsub+0xb4>
 80026f2:	4649      	mov	r1, r9
 80026f4:	4319      	orrs	r1, r3
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x502>
 80026f8:	e0ae      	b.n	8002858 <__aeabi_dsub+0x660>
 80026fa:	4661      	mov	r1, ip
 80026fc:	4664      	mov	r4, ip
 80026fe:	3901      	subs	r1, #1
 8002700:	2c01      	cmp	r4, #1
 8002702:	d100      	bne.n	8002706 <__aeabi_dsub+0x50e>
 8002704:	e0e0      	b.n	80028c8 <__aeabi_dsub+0x6d0>
 8002706:	4c77      	ldr	r4, [pc, #476]	; (80028e4 <__aeabi_dsub+0x6ec>)
 8002708:	45a4      	cmp	ip, r4
 800270a:	d056      	beq.n	80027ba <__aeabi_dsub+0x5c2>
 800270c:	468c      	mov	ip, r1
 800270e:	e69a      	b.n	8002446 <__aeabi_dsub+0x24e>
 8002710:	4661      	mov	r1, ip
 8002712:	2220      	movs	r2, #32
 8002714:	003c      	movs	r4, r7
 8002716:	1a52      	subs	r2, r2, r1
 8002718:	4094      	lsls	r4, r2
 800271a:	0001      	movs	r1, r0
 800271c:	4090      	lsls	r0, r2
 800271e:	46a0      	mov	r8, r4
 8002720:	4664      	mov	r4, ip
 8002722:	1e42      	subs	r2, r0, #1
 8002724:	4190      	sbcs	r0, r2
 8002726:	4662      	mov	r2, ip
 8002728:	40e1      	lsrs	r1, r4
 800272a:	4644      	mov	r4, r8
 800272c:	40d7      	lsrs	r7, r2
 800272e:	430c      	orrs	r4, r1
 8002730:	4304      	orrs	r4, r0
 8002732:	44b9      	add	r9, r7
 8002734:	e701      	b.n	800253a <__aeabi_dsub+0x342>
 8002736:	496b      	ldr	r1, [pc, #428]	; (80028e4 <__aeabi_dsub+0x6ec>)
 8002738:	428a      	cmp	r2, r1
 800273a:	d100      	bne.n	800273e <__aeabi_dsub+0x546>
 800273c:	e70c      	b.n	8002558 <__aeabi_dsub+0x360>
 800273e:	1818      	adds	r0, r3, r0
 8002740:	4298      	cmp	r0, r3
 8002742:	419b      	sbcs	r3, r3
 8002744:	444f      	add	r7, r9
 8002746:	425b      	negs	r3, r3
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	07dc      	lsls	r4, r3, #31
 800274c:	0840      	lsrs	r0, r0, #1
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	469a      	mov	sl, r3
 8002752:	0016      	movs	r6, r2
 8002754:	4304      	orrs	r4, r0
 8002756:	e6d9      	b.n	800250c <__aeabi_dsub+0x314>
 8002758:	2a00      	cmp	r2, #0
 800275a:	d000      	beq.n	800275e <__aeabi_dsub+0x566>
 800275c:	e081      	b.n	8002862 <__aeabi_dsub+0x66a>
 800275e:	003b      	movs	r3, r7
 8002760:	4303      	orrs	r3, r0
 8002762:	d11d      	bne.n	80027a0 <__aeabi_dsub+0x5a8>
 8002764:	2280      	movs	r2, #128	; 0x80
 8002766:	2500      	movs	r5, #0
 8002768:	0312      	lsls	r2, r2, #12
 800276a:	e70b      	b.n	8002584 <__aeabi_dsub+0x38c>
 800276c:	08c0      	lsrs	r0, r0, #3
 800276e:	077b      	lsls	r3, r7, #29
 8002770:	465d      	mov	r5, fp
 8002772:	4303      	orrs	r3, r0
 8002774:	08fa      	lsrs	r2, r7, #3
 8002776:	e6d3      	b.n	8002520 <__aeabi_dsub+0x328>
 8002778:	1ac4      	subs	r4, r0, r3
 800277a:	42a0      	cmp	r0, r4
 800277c:	4180      	sbcs	r0, r0
 800277e:	464b      	mov	r3, r9
 8002780:	4240      	negs	r0, r0
 8002782:	1aff      	subs	r7, r7, r3
 8002784:	1a3b      	subs	r3, r7, r0
 8002786:	469a      	mov	sl, r3
 8002788:	465d      	mov	r5, fp
 800278a:	e597      	b.n	80022bc <__aeabi_dsub+0xc4>
 800278c:	1a1c      	subs	r4, r3, r0
 800278e:	464a      	mov	r2, r9
 8002790:	42a3      	cmp	r3, r4
 8002792:	419b      	sbcs	r3, r3
 8002794:	1bd7      	subs	r7, r2, r7
 8002796:	425b      	negs	r3, r3
 8002798:	1afb      	subs	r3, r7, r3
 800279a:	469a      	mov	sl, r3
 800279c:	2601      	movs	r6, #1
 800279e:	e585      	b.n	80022ac <__aeabi_dsub+0xb4>
 80027a0:	08c0      	lsrs	r0, r0, #3
 80027a2:	077b      	lsls	r3, r7, #29
 80027a4:	465d      	mov	r5, fp
 80027a6:	4303      	orrs	r3, r0
 80027a8:	08fa      	lsrs	r2, r7, #3
 80027aa:	e6e7      	b.n	800257c <__aeabi_dsub+0x384>
 80027ac:	464a      	mov	r2, r9
 80027ae:	08db      	lsrs	r3, r3, #3
 80027b0:	0752      	lsls	r2, r2, #29
 80027b2:	4313      	orrs	r3, r2
 80027b4:	464a      	mov	r2, r9
 80027b6:	08d2      	lsrs	r2, r2, #3
 80027b8:	e6b5      	b.n	8002526 <__aeabi_dsub+0x32e>
 80027ba:	08c0      	lsrs	r0, r0, #3
 80027bc:	077b      	lsls	r3, r7, #29
 80027be:	4303      	orrs	r3, r0
 80027c0:	08fa      	lsrs	r2, r7, #3
 80027c2:	e6db      	b.n	800257c <__aeabi_dsub+0x384>
 80027c4:	4649      	mov	r1, r9
 80027c6:	4319      	orrs	r1, r3
 80027c8:	000b      	movs	r3, r1
 80027ca:	1e59      	subs	r1, r3, #1
 80027cc:	418b      	sbcs	r3, r1
 80027ce:	001c      	movs	r4, r3
 80027d0:	e653      	b.n	800247a <__aeabi_dsub+0x282>
 80027d2:	464d      	mov	r5, r9
 80027d4:	3c20      	subs	r4, #32
 80027d6:	40e5      	lsrs	r5, r4
 80027d8:	2920      	cmp	r1, #32
 80027da:	d005      	beq.n	80027e8 <__aeabi_dsub+0x5f0>
 80027dc:	2440      	movs	r4, #64	; 0x40
 80027de:	1a64      	subs	r4, r4, r1
 80027e0:	4649      	mov	r1, r9
 80027e2:	40a1      	lsls	r1, r4
 80027e4:	430b      	orrs	r3, r1
 80027e6:	4698      	mov	r8, r3
 80027e8:	4643      	mov	r3, r8
 80027ea:	1e5c      	subs	r4, r3, #1
 80027ec:	41a3      	sbcs	r3, r4
 80027ee:	432b      	orrs	r3, r5
 80027f0:	e776      	b.n	80026e0 <__aeabi_dsub+0x4e8>
 80027f2:	2a00      	cmp	r2, #0
 80027f4:	d0e1      	beq.n	80027ba <__aeabi_dsub+0x5c2>
 80027f6:	003a      	movs	r2, r7
 80027f8:	08db      	lsrs	r3, r3, #3
 80027fa:	4302      	orrs	r2, r0
 80027fc:	d100      	bne.n	8002800 <__aeabi_dsub+0x608>
 80027fe:	e6b8      	b.n	8002572 <__aeabi_dsub+0x37a>
 8002800:	464a      	mov	r2, r9
 8002802:	0752      	lsls	r2, r2, #29
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	4313      	orrs	r3, r2
 8002808:	464a      	mov	r2, r9
 800280a:	0324      	lsls	r4, r4, #12
 800280c:	08d2      	lsrs	r2, r2, #3
 800280e:	4222      	tst	r2, r4
 8002810:	d007      	beq.n	8002822 <__aeabi_dsub+0x62a>
 8002812:	08fe      	lsrs	r6, r7, #3
 8002814:	4226      	tst	r6, r4
 8002816:	d104      	bne.n	8002822 <__aeabi_dsub+0x62a>
 8002818:	465d      	mov	r5, fp
 800281a:	0032      	movs	r2, r6
 800281c:	08c3      	lsrs	r3, r0, #3
 800281e:	077f      	lsls	r7, r7, #29
 8002820:	433b      	orrs	r3, r7
 8002822:	0f59      	lsrs	r1, r3, #29
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	0749      	lsls	r1, r1, #29
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	430b      	orrs	r3, r1
 800282c:	e6a6      	b.n	800257c <__aeabi_dsub+0x384>
 800282e:	1ac4      	subs	r4, r0, r3
 8002830:	42a0      	cmp	r0, r4
 8002832:	4180      	sbcs	r0, r0
 8002834:	464b      	mov	r3, r9
 8002836:	4240      	negs	r0, r0
 8002838:	1aff      	subs	r7, r7, r3
 800283a:	1a3b      	subs	r3, r7, r0
 800283c:	469a      	mov	sl, r3
 800283e:	465d      	mov	r5, fp
 8002840:	2601      	movs	r6, #1
 8002842:	e533      	b.n	80022ac <__aeabi_dsub+0xb4>
 8002844:	003b      	movs	r3, r7
 8002846:	4303      	orrs	r3, r0
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x654>
 800284a:	e715      	b.n	8002678 <__aeabi_dsub+0x480>
 800284c:	08c0      	lsrs	r0, r0, #3
 800284e:	077b      	lsls	r3, r7, #29
 8002850:	465d      	mov	r5, fp
 8002852:	4303      	orrs	r3, r0
 8002854:	08fa      	lsrs	r2, r7, #3
 8002856:	e666      	b.n	8002526 <__aeabi_dsub+0x32e>
 8002858:	08c0      	lsrs	r0, r0, #3
 800285a:	077b      	lsls	r3, r7, #29
 800285c:	4303      	orrs	r3, r0
 800285e:	08fa      	lsrs	r2, r7, #3
 8002860:	e65e      	b.n	8002520 <__aeabi_dsub+0x328>
 8002862:	003a      	movs	r2, r7
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	4302      	orrs	r2, r0
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x674>
 800286a:	e682      	b.n	8002572 <__aeabi_dsub+0x37a>
 800286c:	464a      	mov	r2, r9
 800286e:	0752      	lsls	r2, r2, #29
 8002870:	2480      	movs	r4, #128	; 0x80
 8002872:	4313      	orrs	r3, r2
 8002874:	464a      	mov	r2, r9
 8002876:	0324      	lsls	r4, r4, #12
 8002878:	08d2      	lsrs	r2, r2, #3
 800287a:	4222      	tst	r2, r4
 800287c:	d007      	beq.n	800288e <__aeabi_dsub+0x696>
 800287e:	08fe      	lsrs	r6, r7, #3
 8002880:	4226      	tst	r6, r4
 8002882:	d104      	bne.n	800288e <__aeabi_dsub+0x696>
 8002884:	465d      	mov	r5, fp
 8002886:	0032      	movs	r2, r6
 8002888:	08c3      	lsrs	r3, r0, #3
 800288a:	077f      	lsls	r7, r7, #29
 800288c:	433b      	orrs	r3, r7
 800288e:	0f59      	lsrs	r1, r3, #29
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	0749      	lsls	r1, r1, #29
 8002896:	430b      	orrs	r3, r1
 8002898:	e670      	b.n	800257c <__aeabi_dsub+0x384>
 800289a:	08c0      	lsrs	r0, r0, #3
 800289c:	077b      	lsls	r3, r7, #29
 800289e:	4303      	orrs	r3, r0
 80028a0:	08fa      	lsrs	r2, r7, #3
 80028a2:	e640      	b.n	8002526 <__aeabi_dsub+0x32e>
 80028a4:	464c      	mov	r4, r9
 80028a6:	3920      	subs	r1, #32
 80028a8:	40cc      	lsrs	r4, r1
 80028aa:	4661      	mov	r1, ip
 80028ac:	2920      	cmp	r1, #32
 80028ae:	d006      	beq.n	80028be <__aeabi_dsub+0x6c6>
 80028b0:	4666      	mov	r6, ip
 80028b2:	2140      	movs	r1, #64	; 0x40
 80028b4:	1b89      	subs	r1, r1, r6
 80028b6:	464e      	mov	r6, r9
 80028b8:	408e      	lsls	r6, r1
 80028ba:	4333      	orrs	r3, r6
 80028bc:	4698      	mov	r8, r3
 80028be:	4643      	mov	r3, r8
 80028c0:	1e59      	subs	r1, r3, #1
 80028c2:	418b      	sbcs	r3, r1
 80028c4:	431c      	orrs	r4, r3
 80028c6:	e5d8      	b.n	800247a <__aeabi_dsub+0x282>
 80028c8:	181c      	adds	r4, r3, r0
 80028ca:	4284      	cmp	r4, r0
 80028cc:	4180      	sbcs	r0, r0
 80028ce:	444f      	add	r7, r9
 80028d0:	46ba      	mov	sl, r7
 80028d2:	4240      	negs	r0, r0
 80028d4:	4482      	add	sl, r0
 80028d6:	e6d9      	b.n	800268c <__aeabi_dsub+0x494>
 80028d8:	4653      	mov	r3, sl
 80028da:	4323      	orrs	r3, r4
 80028dc:	d100      	bne.n	80028e0 <__aeabi_dsub+0x6e8>
 80028de:	e6cb      	b.n	8002678 <__aeabi_dsub+0x480>
 80028e0:	e614      	b.n	800250c <__aeabi_dsub+0x314>
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	000007ff 	.word	0x000007ff
 80028e8:	ff7fffff 	.word	0xff7fffff
 80028ec:	000007fe 	.word	0x000007fe
 80028f0:	2300      	movs	r3, #0
 80028f2:	4a01      	ldr	r2, [pc, #4]	; (80028f8 <__aeabi_dsub+0x700>)
 80028f4:	001c      	movs	r4, r3
 80028f6:	e529      	b.n	800234c <__aeabi_dsub+0x154>
 80028f8:	000007ff 	.word	0x000007ff

080028fc <__aeabi_dcmpun>:
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	0005      	movs	r5, r0
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <__aeabi_dcmpun+0x38>)
 8002902:	031c      	lsls	r4, r3, #12
 8002904:	0016      	movs	r6, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	030a      	lsls	r2, r1, #12
 800290a:	0049      	lsls	r1, r1, #1
 800290c:	0b12      	lsrs	r2, r2, #12
 800290e:	0d49      	lsrs	r1, r1, #21
 8002910:	0b24      	lsrs	r4, r4, #12
 8002912:	0d5b      	lsrs	r3, r3, #21
 8002914:	4281      	cmp	r1, r0
 8002916:	d008      	beq.n	800292a <__aeabi_dcmpun+0x2e>
 8002918:	4a06      	ldr	r2, [pc, #24]	; (8002934 <__aeabi_dcmpun+0x38>)
 800291a:	2000      	movs	r0, #0
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <__aeabi_dcmpun+0x2c>
 8002920:	0020      	movs	r0, r4
 8002922:	4330      	orrs	r0, r6
 8002924:	1e43      	subs	r3, r0, #1
 8002926:	4198      	sbcs	r0, r3
 8002928:	bd70      	pop	{r4, r5, r6, pc}
 800292a:	2001      	movs	r0, #1
 800292c:	432a      	orrs	r2, r5
 800292e:	d1fb      	bne.n	8002928 <__aeabi_dcmpun+0x2c>
 8002930:	e7f2      	b.n	8002918 <__aeabi_dcmpun+0x1c>
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	000007ff 	.word	0x000007ff

08002938 <__aeabi_d2iz>:
 8002938:	000a      	movs	r2, r1
 800293a:	b530      	push	{r4, r5, lr}
 800293c:	4c13      	ldr	r4, [pc, #76]	; (800298c <__aeabi_d2iz+0x54>)
 800293e:	0053      	lsls	r3, r2, #1
 8002940:	0309      	lsls	r1, r1, #12
 8002942:	0005      	movs	r5, r0
 8002944:	0b09      	lsrs	r1, r1, #12
 8002946:	2000      	movs	r0, #0
 8002948:	0d5b      	lsrs	r3, r3, #21
 800294a:	0fd2      	lsrs	r2, r2, #31
 800294c:	42a3      	cmp	r3, r4
 800294e:	dd04      	ble.n	800295a <__aeabi_d2iz+0x22>
 8002950:	480f      	ldr	r0, [pc, #60]	; (8002990 <__aeabi_d2iz+0x58>)
 8002952:	4283      	cmp	r3, r0
 8002954:	dd02      	ble.n	800295c <__aeabi_d2iz+0x24>
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <__aeabi_d2iz+0x5c>)
 8002958:	18d0      	adds	r0, r2, r3
 800295a:	bd30      	pop	{r4, r5, pc}
 800295c:	2080      	movs	r0, #128	; 0x80
 800295e:	0340      	lsls	r0, r0, #13
 8002960:	4301      	orrs	r1, r0
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <__aeabi_d2iz+0x60>)
 8002964:	1ac0      	subs	r0, r0, r3
 8002966:	281f      	cmp	r0, #31
 8002968:	dd08      	ble.n	800297c <__aeabi_d2iz+0x44>
 800296a:	480c      	ldr	r0, [pc, #48]	; (800299c <__aeabi_d2iz+0x64>)
 800296c:	1ac3      	subs	r3, r0, r3
 800296e:	40d9      	lsrs	r1, r3
 8002970:	000b      	movs	r3, r1
 8002972:	4258      	negs	r0, r3
 8002974:	2a00      	cmp	r2, #0
 8002976:	d1f0      	bne.n	800295a <__aeabi_d2iz+0x22>
 8002978:	0018      	movs	r0, r3
 800297a:	e7ee      	b.n	800295a <__aeabi_d2iz+0x22>
 800297c:	4c08      	ldr	r4, [pc, #32]	; (80029a0 <__aeabi_d2iz+0x68>)
 800297e:	40c5      	lsrs	r5, r0
 8002980:	46a4      	mov	ip, r4
 8002982:	4463      	add	r3, ip
 8002984:	4099      	lsls	r1, r3
 8002986:	000b      	movs	r3, r1
 8002988:	432b      	orrs	r3, r5
 800298a:	e7f2      	b.n	8002972 <__aeabi_d2iz+0x3a>
 800298c:	000003fe 	.word	0x000003fe
 8002990:	0000041d 	.word	0x0000041d
 8002994:	7fffffff 	.word	0x7fffffff
 8002998:	00000433 	.word	0x00000433
 800299c:	00000413 	.word	0x00000413
 80029a0:	fffffbed 	.word	0xfffffbed

080029a4 <__aeabi_i2d>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	2800      	cmp	r0, #0
 80029a8:	d016      	beq.n	80029d8 <__aeabi_i2d+0x34>
 80029aa:	17c3      	asrs	r3, r0, #31
 80029ac:	18c5      	adds	r5, r0, r3
 80029ae:	405d      	eors	r5, r3
 80029b0:	0fc4      	lsrs	r4, r0, #31
 80029b2:	0028      	movs	r0, r5
 80029b4:	f000 f91a 	bl	8002bec <__clzsi2>
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <__aeabi_i2d+0x5c>)
 80029ba:	1a1b      	subs	r3, r3, r0
 80029bc:	280a      	cmp	r0, #10
 80029be:	dc16      	bgt.n	80029ee <__aeabi_i2d+0x4a>
 80029c0:	0002      	movs	r2, r0
 80029c2:	002e      	movs	r6, r5
 80029c4:	3215      	adds	r2, #21
 80029c6:	4096      	lsls	r6, r2
 80029c8:	220b      	movs	r2, #11
 80029ca:	1a12      	subs	r2, r2, r0
 80029cc:	40d5      	lsrs	r5, r2
 80029ce:	055b      	lsls	r3, r3, #21
 80029d0:	032d      	lsls	r5, r5, #12
 80029d2:	0b2d      	lsrs	r5, r5, #12
 80029d4:	0d5b      	lsrs	r3, r3, #21
 80029d6:	e003      	b.n	80029e0 <__aeabi_i2d+0x3c>
 80029d8:	2400      	movs	r4, #0
 80029da:	2300      	movs	r3, #0
 80029dc:	2500      	movs	r5, #0
 80029de:	2600      	movs	r6, #0
 80029e0:	051b      	lsls	r3, r3, #20
 80029e2:	432b      	orrs	r3, r5
 80029e4:	07e4      	lsls	r4, r4, #31
 80029e6:	4323      	orrs	r3, r4
 80029e8:	0030      	movs	r0, r6
 80029ea:	0019      	movs	r1, r3
 80029ec:	bd70      	pop	{r4, r5, r6, pc}
 80029ee:	380b      	subs	r0, #11
 80029f0:	4085      	lsls	r5, r0
 80029f2:	055b      	lsls	r3, r3, #21
 80029f4:	032d      	lsls	r5, r5, #12
 80029f6:	2600      	movs	r6, #0
 80029f8:	0b2d      	lsrs	r5, r5, #12
 80029fa:	0d5b      	lsrs	r3, r3, #21
 80029fc:	e7f0      	b.n	80029e0 <__aeabi_i2d+0x3c>
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	0000041e 	.word	0x0000041e

08002a04 <__aeabi_ui2d>:
 8002a04:	b510      	push	{r4, lr}
 8002a06:	1e04      	subs	r4, r0, #0
 8002a08:	d010      	beq.n	8002a2c <__aeabi_ui2d+0x28>
 8002a0a:	f000 f8ef 	bl	8002bec <__clzsi2>
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <__aeabi_ui2d+0x48>)
 8002a10:	1a1b      	subs	r3, r3, r0
 8002a12:	280a      	cmp	r0, #10
 8002a14:	dc11      	bgt.n	8002a3a <__aeabi_ui2d+0x36>
 8002a16:	220b      	movs	r2, #11
 8002a18:	0021      	movs	r1, r4
 8002a1a:	1a12      	subs	r2, r2, r0
 8002a1c:	40d1      	lsrs	r1, r2
 8002a1e:	3015      	adds	r0, #21
 8002a20:	030a      	lsls	r2, r1, #12
 8002a22:	055b      	lsls	r3, r3, #21
 8002a24:	4084      	lsls	r4, r0
 8002a26:	0b12      	lsrs	r2, r2, #12
 8002a28:	0d5b      	lsrs	r3, r3, #21
 8002a2a:	e001      	b.n	8002a30 <__aeabi_ui2d+0x2c>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2200      	movs	r2, #0
 8002a30:	051b      	lsls	r3, r3, #20
 8002a32:	4313      	orrs	r3, r2
 8002a34:	0020      	movs	r0, r4
 8002a36:	0019      	movs	r1, r3
 8002a38:	bd10      	pop	{r4, pc}
 8002a3a:	0022      	movs	r2, r4
 8002a3c:	380b      	subs	r0, #11
 8002a3e:	4082      	lsls	r2, r0
 8002a40:	055b      	lsls	r3, r3, #21
 8002a42:	0312      	lsls	r2, r2, #12
 8002a44:	2400      	movs	r4, #0
 8002a46:	0b12      	lsrs	r2, r2, #12
 8002a48:	0d5b      	lsrs	r3, r3, #21
 8002a4a:	e7f1      	b.n	8002a30 <__aeabi_ui2d+0x2c>
 8002a4c:	0000041e 	.word	0x0000041e

08002a50 <__aeabi_f2d>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	0242      	lsls	r2, r0, #9
 8002a54:	0043      	lsls	r3, r0, #1
 8002a56:	0fc4      	lsrs	r4, r0, #31
 8002a58:	20fe      	movs	r0, #254	; 0xfe
 8002a5a:	0e1b      	lsrs	r3, r3, #24
 8002a5c:	1c59      	adds	r1, r3, #1
 8002a5e:	0a55      	lsrs	r5, r2, #9
 8002a60:	4208      	tst	r0, r1
 8002a62:	d00c      	beq.n	8002a7e <__aeabi_f2d+0x2e>
 8002a64:	21e0      	movs	r1, #224	; 0xe0
 8002a66:	0089      	lsls	r1, r1, #2
 8002a68:	468c      	mov	ip, r1
 8002a6a:	076d      	lsls	r5, r5, #29
 8002a6c:	0b12      	lsrs	r2, r2, #12
 8002a6e:	4463      	add	r3, ip
 8002a70:	051b      	lsls	r3, r3, #20
 8002a72:	4313      	orrs	r3, r2
 8002a74:	07e4      	lsls	r4, r4, #31
 8002a76:	4323      	orrs	r3, r4
 8002a78:	0028      	movs	r0, r5
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	bd70      	pop	{r4, r5, r6, pc}
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d114      	bne.n	8002aac <__aeabi_f2d+0x5c>
 8002a82:	2d00      	cmp	r5, #0
 8002a84:	d01b      	beq.n	8002abe <__aeabi_f2d+0x6e>
 8002a86:	0028      	movs	r0, r5
 8002a88:	f000 f8b0 	bl	8002bec <__clzsi2>
 8002a8c:	280a      	cmp	r0, #10
 8002a8e:	dc1c      	bgt.n	8002aca <__aeabi_f2d+0x7a>
 8002a90:	230b      	movs	r3, #11
 8002a92:	002a      	movs	r2, r5
 8002a94:	1a1b      	subs	r3, r3, r0
 8002a96:	40da      	lsrs	r2, r3
 8002a98:	0003      	movs	r3, r0
 8002a9a:	3315      	adds	r3, #21
 8002a9c:	409d      	lsls	r5, r3
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <__aeabi_f2d+0x88>)
 8002aa0:	0312      	lsls	r2, r2, #12
 8002aa2:	1a1b      	subs	r3, r3, r0
 8002aa4:	055b      	lsls	r3, r3, #21
 8002aa6:	0b12      	lsrs	r2, r2, #12
 8002aa8:	0d5b      	lsrs	r3, r3, #21
 8002aaa:	e7e1      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002aac:	2d00      	cmp	r5, #0
 8002aae:	d009      	beq.n	8002ac4 <__aeabi_f2d+0x74>
 8002ab0:	0b13      	lsrs	r3, r2, #12
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	0312      	lsls	r2, r2, #12
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	076d      	lsls	r5, r5, #29
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <__aeabi_f2d+0x8c>)
 8002abc:	e7d8      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	e7d5      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <__aeabi_f2d+0x8c>)
 8002ac8:	e7d2      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002aca:	0003      	movs	r3, r0
 8002acc:	002a      	movs	r2, r5
 8002ace:	3b0b      	subs	r3, #11
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	2500      	movs	r5, #0
 8002ad4:	e7e3      	b.n	8002a9e <__aeabi_f2d+0x4e>
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	00000389 	.word	0x00000389
 8002adc:	000007ff 	.word	0x000007ff

08002ae0 <__aeabi_d2f>:
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae4:	004b      	lsls	r3, r1, #1
 8002ae6:	030d      	lsls	r5, r1, #12
 8002ae8:	0f40      	lsrs	r0, r0, #29
 8002aea:	0d5b      	lsrs	r3, r3, #21
 8002aec:	0fcc      	lsrs	r4, r1, #31
 8002aee:	0a6d      	lsrs	r5, r5, #9
 8002af0:	493a      	ldr	r1, [pc, #232]	; (8002bdc <__aeabi_d2f+0xfc>)
 8002af2:	4305      	orrs	r5, r0
 8002af4:	1c58      	adds	r0, r3, #1
 8002af6:	00d7      	lsls	r7, r2, #3
 8002af8:	4208      	tst	r0, r1
 8002afa:	d00a      	beq.n	8002b12 <__aeabi_d2f+0x32>
 8002afc:	4938      	ldr	r1, [pc, #224]	; (8002be0 <__aeabi_d2f+0x100>)
 8002afe:	1859      	adds	r1, r3, r1
 8002b00:	29fe      	cmp	r1, #254	; 0xfe
 8002b02:	dd16      	ble.n	8002b32 <__aeabi_d2f+0x52>
 8002b04:	20ff      	movs	r0, #255	; 0xff
 8002b06:	2200      	movs	r2, #0
 8002b08:	05c0      	lsls	r0, r0, #23
 8002b0a:	4310      	orrs	r0, r2
 8002b0c:	07e4      	lsls	r4, r4, #31
 8002b0e:	4320      	orrs	r0, r4
 8002b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <__aeabi_d2f+0x44>
 8002b16:	433d      	orrs	r5, r7
 8002b18:	d026      	beq.n	8002b68 <__aeabi_d2f+0x88>
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	0192      	lsls	r2, r2, #6
 8002b1e:	0a52      	lsrs	r2, r2, #9
 8002b20:	b2d8      	uxtb	r0, r3
 8002b22:	e7f1      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b24:	432f      	orrs	r7, r5
 8002b26:	d0ed      	beq.n	8002b04 <__aeabi_d2f+0x24>
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	03d2      	lsls	r2, r2, #15
 8002b2c:	20ff      	movs	r0, #255	; 0xff
 8002b2e:	432a      	orrs	r2, r5
 8002b30:	e7ea      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b32:	2900      	cmp	r1, #0
 8002b34:	dd1b      	ble.n	8002b6e <__aeabi_d2f+0x8e>
 8002b36:	0192      	lsls	r2, r2, #6
 8002b38:	1e50      	subs	r0, r2, #1
 8002b3a:	4182      	sbcs	r2, r0
 8002b3c:	00ed      	lsls	r5, r5, #3
 8002b3e:	0f7f      	lsrs	r7, r7, #29
 8002b40:	432a      	orrs	r2, r5
 8002b42:	433a      	orrs	r2, r7
 8002b44:	0753      	lsls	r3, r2, #29
 8002b46:	d047      	beq.n	8002bd8 <__aeabi_d2f+0xf8>
 8002b48:	230f      	movs	r3, #15
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d000      	beq.n	8002b52 <__aeabi_d2f+0x72>
 8002b50:	3204      	adds	r2, #4
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	04db      	lsls	r3, r3, #19
 8002b56:	4013      	ands	r3, r2
 8002b58:	d03e      	beq.n	8002bd8 <__aeabi_d2f+0xf8>
 8002b5a:	1c48      	adds	r0, r1, #1
 8002b5c:	29fe      	cmp	r1, #254	; 0xfe
 8002b5e:	d0d1      	beq.n	8002b04 <__aeabi_d2f+0x24>
 8002b60:	0192      	lsls	r2, r2, #6
 8002b62:	0a52      	lsrs	r2, r2, #9
 8002b64:	b2c0      	uxtb	r0, r0
 8002b66:	e7cf      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b68:	2000      	movs	r0, #0
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	e7cc      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b6e:	000a      	movs	r2, r1
 8002b70:	3217      	adds	r2, #23
 8002b72:	db2f      	blt.n	8002bd4 <__aeabi_d2f+0xf4>
 8002b74:	2680      	movs	r6, #128	; 0x80
 8002b76:	0436      	lsls	r6, r6, #16
 8002b78:	432e      	orrs	r6, r5
 8002b7a:	251e      	movs	r5, #30
 8002b7c:	1a6d      	subs	r5, r5, r1
 8002b7e:	2d1f      	cmp	r5, #31
 8002b80:	dd11      	ble.n	8002ba6 <__aeabi_d2f+0xc6>
 8002b82:	2202      	movs	r2, #2
 8002b84:	4252      	negs	r2, r2
 8002b86:	1a52      	subs	r2, r2, r1
 8002b88:	0031      	movs	r1, r6
 8002b8a:	40d1      	lsrs	r1, r2
 8002b8c:	2d20      	cmp	r5, #32
 8002b8e:	d004      	beq.n	8002b9a <__aeabi_d2f+0xba>
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <__aeabi_d2f+0x104>)
 8002b92:	4694      	mov	ip, r2
 8002b94:	4463      	add	r3, ip
 8002b96:	409e      	lsls	r6, r3
 8002b98:	4337      	orrs	r7, r6
 8002b9a:	003a      	movs	r2, r7
 8002b9c:	1e53      	subs	r3, r2, #1
 8002b9e:	419a      	sbcs	r2, r3
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	e7ce      	b.n	8002b44 <__aeabi_d2f+0x64>
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <__aeabi_d2f+0x108>)
 8002ba8:	0038      	movs	r0, r7
 8002baa:	4694      	mov	ip, r2
 8002bac:	4463      	add	r3, ip
 8002bae:	4098      	lsls	r0, r3
 8002bb0:	003a      	movs	r2, r7
 8002bb2:	1e41      	subs	r1, r0, #1
 8002bb4:	4188      	sbcs	r0, r1
 8002bb6:	409e      	lsls	r6, r3
 8002bb8:	40ea      	lsrs	r2, r5
 8002bba:	4330      	orrs	r0, r6
 8002bbc:	4302      	orrs	r2, r0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	0753      	lsls	r3, r2, #29
 8002bc2:	d1c1      	bne.n	8002b48 <__aeabi_d2f+0x68>
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	04c9      	lsls	r1, r1, #19
 8002bca:	2001      	movs	r0, #1
 8002bcc:	400b      	ands	r3, r1
 8002bce:	420a      	tst	r2, r1
 8002bd0:	d1c6      	bne.n	8002b60 <__aeabi_d2f+0x80>
 8002bd2:	e7a3      	b.n	8002b1c <__aeabi_d2f+0x3c>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e7a0      	b.n	8002b1a <__aeabi_d2f+0x3a>
 8002bd8:	000b      	movs	r3, r1
 8002bda:	e79f      	b.n	8002b1c <__aeabi_d2f+0x3c>
 8002bdc:	000007fe 	.word	0x000007fe
 8002be0:	fffffc80 	.word	0xfffffc80
 8002be4:	fffffca2 	.word	0xfffffca2
 8002be8:	fffffc82 	.word	0xfffffc82

08002bec <__clzsi2>:
 8002bec:	211c      	movs	r1, #28
 8002bee:	2301      	movs	r3, #1
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	4298      	cmp	r0, r3
 8002bf4:	d301      	bcc.n	8002bfa <__clzsi2+0xe>
 8002bf6:	0c00      	lsrs	r0, r0, #16
 8002bf8:	3910      	subs	r1, #16
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	4298      	cmp	r0, r3
 8002bfe:	d301      	bcc.n	8002c04 <__clzsi2+0x18>
 8002c00:	0a00      	lsrs	r0, r0, #8
 8002c02:	3908      	subs	r1, #8
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	4298      	cmp	r0, r3
 8002c08:	d301      	bcc.n	8002c0e <__clzsi2+0x22>
 8002c0a:	0900      	lsrs	r0, r0, #4
 8002c0c:	3904      	subs	r1, #4
 8002c0e:	a202      	add	r2, pc, #8	; (adr r2, 8002c18 <__clzsi2+0x2c>)
 8002c10:	5c10      	ldrb	r0, [r2, r0]
 8002c12:	1840      	adds	r0, r0, r1
 8002c14:	4770      	bx	lr
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	02020304 	.word	0x02020304
 8002c1c:	01010101 	.word	0x01010101
	...

08002c28 <__clzdi2>:
 8002c28:	b510      	push	{r4, lr}
 8002c2a:	2900      	cmp	r1, #0
 8002c2c:	d103      	bne.n	8002c36 <__clzdi2+0xe>
 8002c2e:	f7ff ffdd 	bl	8002bec <__clzsi2>
 8002c32:	3020      	adds	r0, #32
 8002c34:	e002      	b.n	8002c3c <__clzdi2+0x14>
 8002c36:	0008      	movs	r0, r1
 8002c38:	f7ff ffd8 	bl	8002bec <__clzsi2>
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)

08002c40 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002c44:	23a0      	movs	r3, #160	; 0xa0
 8002c46:	05db      	lsls	r3, r3, #23
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2110      	movs	r1, #16
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f002 fbf2 	bl	8005436 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002c52:	2001      	movs	r0, #1
 8002c54:	f001 fd28 	bl	80046a8 <HAL_Delay>
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002c62:	23a0      	movs	r3, #160	; 0xa0
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	2201      	movs	r2, #1
 8002c68:	2110      	movs	r1, #16
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f002 fbe3 	bl	8005436 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002c70:	2001      	movs	r0, #1
 8002c72:	f001 fd19 	bl	80046a8 <HAL_Delay>
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	0002      	movs	r2, r0
 8002c84:	1dfb      	adds	r3, r7, #7
 8002c86:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <SPI_TxByte+0x30>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2202      	movs	r2, #2
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d1f8      	bne.n	8002c8a <SPI_TxByte+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002c98:	1df9      	adds	r1, r7, #7
 8002c9a:	4804      	ldr	r0, [pc, #16]	; (8002cac <SPI_TxByte+0x30>)
 8002c9c:	2364      	movs	r3, #100	; 0x64
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f003 f9d9 	bl	8006056 <HAL_SPI_Transmit>
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2000026c 	.word	0x2000026c

08002cb0 <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	000a      	movs	r2, r1
 8002cba:	1cbb      	adds	r3, r7, #2
 8002cbc:	801a      	strh	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <SPI_TxBuffer+0x34>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d1f8      	bne.n	8002cc0 <SPI_TxBuffer+0x10>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002cce:	1cbb      	adds	r3, r7, #2
 8002cd0:	881a      	ldrh	r2, [r3, #0]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4803      	ldr	r0, [pc, #12]	; (8002ce4 <SPI_TxBuffer+0x34>)
 8002cd6:	2364      	movs	r3, #100	; 0x64
 8002cd8:	f003 f9bd 	bl	8006056 <HAL_SPI_Transmit>
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	2000026c 	.word	0x2000026c

08002ce8 <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8002cee:	1dfb      	adds	r3, r7, #7
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <SPI_RxByte+0x38>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d1f8      	bne.n	8002cf6 <SPI_RxByte+0xe>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002d04:	1dba      	adds	r2, r7, #6
 8002d06:	1df9      	adds	r1, r7, #7
 8002d08:	4805      	ldr	r0, [pc, #20]	; (8002d20 <SPI_RxByte+0x38>)
 8002d0a:	2364      	movs	r3, #100	; 0x64
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f003 fafe 	bl	8006310 <HAL_SPI_TransmitReceive>
  return data;
 8002d14:	1dbb      	adds	r3, r7, #6
 8002d16:	781b      	ldrb	r3, [r3, #0]
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	2000026c 	.word	0x2000026c

08002d24 <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002d2c:	f7ff ffdc 	bl	8002ce8 <SPI_RxByte>
 8002d30:	0003      	movs	r3, r0
 8002d32:	001a      	movs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	701a      	strb	r2, [r3, #0]
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <SD_ReadyWait+0x34>)
 8002d48:	22fa      	movs	r2, #250	; 0xfa
 8002d4a:	0052      	lsls	r2, r2, #1
 8002d4c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8002d4e:	1dfc      	adds	r4, r7, #7
 8002d50:	f7ff ffca 	bl	8002ce8 <SPI_RxByte>
 8002d54:	0003      	movs	r3, r0
 8002d56:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 8002d58:	1dfb      	adds	r3, r7, #7
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2bff      	cmp	r3, #255	; 0xff
 8002d5e:	d003      	beq.n	8002d68 <SD_ReadyWait+0x28>
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <SD_ReadyWait+0x34>)
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f2      	bne.n	8002d4e <SD_ReadyWait+0xe>
  return res;
 8002d68:	1dfb      	adds	r3, r7, #7
 8002d6a:	781b      	ldrb	r3, [r3, #0]
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b003      	add	sp, #12
 8002d72:	bd90      	pop	{r4, r7, pc}
 8002d74:	2000020a 	.word	0x2000020a

08002d78 <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <SD_PowerOn+0x88>)
 8002d80:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8002d82:	f7ff ff6c 	bl	8002c5e <DESELECT>
  for(int i = 0; i < 10; i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	e005      	b.n	8002d98 <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 8002d8c:	20ff      	movs	r0, #255	; 0xff
 8002d8e:	f7ff ff75 	bl	8002c7c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3301      	adds	r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b09      	cmp	r3, #9
 8002d9c:	ddf6      	ble.n	8002d8c <SD_PowerOn+0x14>
  }
  /* slave select */
  SELECT();
 8002d9e:	f7ff ff4f 	bl	8002c40 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8002da2:	003b      	movs	r3, r7
 8002da4:	2240      	movs	r2, #64	; 0x40
 8002da6:	701a      	strb	r2, [r3, #0]
  args[1] = 0;
 8002da8:	003b      	movs	r3, r7
 8002daa:	2200      	movs	r2, #0
 8002dac:	705a      	strb	r2, [r3, #1]
  args[2] = 0;
 8002dae:	003b      	movs	r3, r7
 8002db0:	2200      	movs	r2, #0
 8002db2:	709a      	strb	r2, [r3, #2]
  args[3] = 0;
 8002db4:	003b      	movs	r3, r7
 8002db6:	2200      	movs	r2, #0
 8002db8:	70da      	strb	r2, [r3, #3]
  args[4] = 0;
 8002dba:	003b      	movs	r3, r7
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	711a      	strb	r2, [r3, #4]
  args[5] = 0x95;   /* CRC */
 8002dc0:	003b      	movs	r3, r7
 8002dc2:	2295      	movs	r2, #149	; 0x95
 8002dc4:	715a      	strb	r2, [r3, #5]
  SPI_TxBuffer(args, sizeof(args));
 8002dc6:	003b      	movs	r3, r7
 8002dc8:	2106      	movs	r1, #6
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7ff ff70 	bl	8002cb0 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8002dd0:	e002      	b.n	8002dd8 <SD_PowerOn+0x60>
  {
    cnt--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8002dd8:	f7ff ff86 	bl	8002ce8 <SPI_RxByte>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d002      	beq.n	8002de8 <SD_PowerOn+0x70>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f4      	bne.n	8002dd2 <SD_PowerOn+0x5a>
  }
  DESELECT();
 8002de8:	f7ff ff39 	bl	8002c5e <DESELECT>
  SPI_TxByte(0XFF);
 8002dec:	20ff      	movs	r0, #255	; 0xff
 8002dee:	f7ff ff45 	bl	8002c7c <SPI_TxByte>
  PowerFlag = 1;
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <SD_PowerOn+0x8c>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b004      	add	sp, #16
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00001fff 	.word	0x00001fff
 8002e04:	2000020d 	.word	0x2000020d

08002e08 <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002e0c:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <SD_PowerOff+0x10>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	2000020d 	.word	0x2000020d

08002e1c <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  return PowerFlag;
 8002e20:	4b02      	ldr	r3, [pc, #8]	; (8002e2c <SD_CheckPower+0x10>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	2000020d 	.word	0x2000020d

08002e30 <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002e30:	b5b0      	push	{r4, r5, r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <SD_RxDataBlock+0x64>)
 8002e3c:	22c8      	movs	r2, #200	; 0xc8
 8002e3e:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8002e40:	250f      	movs	r5, #15
 8002e42:	197c      	adds	r4, r7, r5
 8002e44:	f7ff ff50 	bl	8002ce8 <SPI_RxByte>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 8002e4c:	197b      	adds	r3, r7, r5
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2bff      	cmp	r3, #255	; 0xff
 8002e52:	d103      	bne.n	8002e5c <SD_RxDataBlock+0x2c>
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <SD_RxDataBlock+0x64>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f1      	bne.n	8002e40 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8002e5c:	230f      	movs	r3, #15
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2bfe      	cmp	r3, #254	; 0xfe
 8002e64:	d001      	beq.n	8002e6a <SD_RxDataBlock+0x3a>
 8002e66:	2300      	movs	r3, #0
 8002e68:	e00f      	b.n	8002e8a <SD_RxDataBlock+0x5a>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7ff ff57 	bl	8002d24 <SPI_RxBytePtr>
  } while(len--);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	603a      	str	r2, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f4      	bne.n	8002e6a <SD_RxDataBlock+0x3a>
  /* discard CRC */
  SPI_RxByte();
 8002e80:	f7ff ff32 	bl	8002ce8 <SPI_RxByte>
  SPI_RxByte();
 8002e84:	f7ff ff30 	bl	8002ce8 <SPI_RxByte>
  return TRUE;
 8002e88:	2301      	movs	r3, #1
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b004      	add	sp, #16
 8002e90:	bdb0      	pop	{r4, r5, r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	20000208 	.word	0x20000208

08002e98 <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	000a      	movs	r2, r1
 8002ea2:	1cfb      	adds	r3, r7, #3
 8002ea4:	701a      	strb	r2, [r3, #0]
  uint8_t resp;
  uint8_t i = 0;
 8002ea6:	230e      	movs	r3, #14
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8002eae:	f7ff ff47 	bl	8002d40 <SD_ReadyWait>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	2bff      	cmp	r3, #255	; 0xff
 8002eb6:	d001      	beq.n	8002ebc <SD_TxDataBlock+0x24>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e03c      	b.n	8002f36 <SD_TxDataBlock+0x9e>
  /* transmit token */
  SPI_TxByte(token);
 8002ebc:	1cfb      	adds	r3, r7, #3
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7ff fedb 	bl	8002c7c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8002ec6:	1cfb      	adds	r3, r7, #3
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2bfd      	cmp	r3, #253	; 0xfd
 8002ecc:	d029      	beq.n	8002f22 <SD_TxDataBlock+0x8a>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	009a      	lsls	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0011      	movs	r1, r2
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff feea 	bl	8002cb0 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8002edc:	f7ff ff04 	bl	8002ce8 <SPI_RxByte>
    SPI_RxByte();
 8002ee0:	f7ff ff02 	bl	8002ce8 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8002ee4:	e011      	b.n	8002f0a <SD_TxDataBlock+0x72>
    {
      resp = SPI_RxByte();
 8002ee6:	250f      	movs	r5, #15
 8002ee8:	197c      	adds	r4, r7, r5
 8002eea:	f7ff fefd 	bl	8002ce8 <SPI_RxByte>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	7023      	strb	r3, [r4, #0]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8002ef2:	197b      	adds	r3, r7, r5
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	221f      	movs	r2, #31
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b05      	cmp	r3, #5
 8002efc:	d00b      	beq.n	8002f16 <SD_TxDataBlock+0x7e>
      i++;
 8002efe:	210e      	movs	r1, #14
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	3201      	adds	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
    while (i <= 64)
 8002f0a:	230e      	movs	r3, #14
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d9e8      	bls.n	8002ee6 <SD_TxDataBlock+0x4e>
 8002f14:	e000      	b.n	8002f18 <SD_TxDataBlock+0x80>
      if ((resp & 0x1F) == 0x05) break;
 8002f16:	46c0      	nop			; (mov r8, r8)
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	f7ff fee5 	bl	8002ce8 <SPI_RxByte>
 8002f1e:	1e03      	subs	r3, r0, #0
 8002f20:	d0fb      	beq.n	8002f1a <SD_TxDataBlock+0x82>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8002f22:	230f      	movs	r3, #15
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	221f      	movs	r2, #31
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d101      	bne.n	8002f34 <SD_TxDataBlock+0x9c>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <SD_TxDataBlock+0x9e>
  return FALSE;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b004      	add	sp, #16
 8002f3c:	bdb0      	pop	{r4, r5, r7, pc}

08002f3e <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002f3e:	b5b0      	push	{r4, r5, r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	0002      	movs	r2, r0
 8002f46:	6039      	str	r1, [r7, #0]
 8002f48:	1dfb      	adds	r3, r7, #7
 8002f4a:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002f4c:	f7ff fef8 	bl	8002d40 <SD_ReadyWait>
 8002f50:	0003      	movs	r3, r0
 8002f52:	2bff      	cmp	r3, #255	; 0xff
 8002f54:	d001      	beq.n	8002f5a <SD_SendCmd+0x1c>
 8002f56:	23ff      	movs	r3, #255	; 0xff
 8002f58:	e059      	b.n	800300e <SD_SendCmd+0xd0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8002f5a:	1dfb      	adds	r3, r7, #7
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7ff fe8c 	bl	8002c7c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	0e1b      	lsrs	r3, r3, #24
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff fe86 	bl	8002c7c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff fe80 	bl	8002c7c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff fe7a 	bl	8002c7c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7ff fe75 	bl	8002c7c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8002f92:	1dfb      	adds	r3, r7, #7
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d104      	bne.n	8002fa4 <SD_SendCmd+0x66>
 8002f9a:	230f      	movs	r3, #15
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	2295      	movs	r2, #149	; 0x95
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e00c      	b.n	8002fbe <SD_SendCmd+0x80>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b48      	cmp	r3, #72	; 0x48
 8002faa:	d104      	bne.n	8002fb6 <SD_SendCmd+0x78>
 8002fac:	230f      	movs	r3, #15
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2287      	movs	r2, #135	; 0x87
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e003      	b.n	8002fbe <SD_SendCmd+0x80>
  else crc = 1;
 8002fb6:	230f      	movs	r3, #15
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
  /* transmit CRC */
  SPI_TxByte(crc);
 8002fbe:	230f      	movs	r3, #15
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7ff fe59 	bl	8002c7c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8002fca:	1dfb      	adds	r3, r7, #7
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b4c      	cmp	r3, #76	; 0x4c
 8002fd0:	d101      	bne.n	8002fd6 <SD_SendCmd+0x98>
 8002fd2:	f7ff fe89 	bl	8002ce8 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8002fd6:	230e      	movs	r3, #14
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	220a      	movs	r2, #10
 8002fdc:	701a      	strb	r2, [r3, #0]
  do {
    res = SPI_RxByte();
 8002fde:	250d      	movs	r5, #13
 8002fe0:	197c      	adds	r4, r7, r5
 8002fe2:	f7ff fe81 	bl	8002ce8 <SPI_RxByte>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 8002fea:	197b      	adds	r3, r7, r5
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b25b      	sxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da09      	bge.n	8003008 <SD_SendCmd+0xca>
 8002ff4:	210e      	movs	r1, #14
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	187a      	adds	r2, r7, r1
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	3a01      	subs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	187b      	adds	r3, r7, r1
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ea      	bne.n	8002fde <SD_SendCmd+0xa0>
  return res;
 8003008:	230d      	movs	r3, #13
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	781b      	ldrb	r3, [r3, #0]
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b004      	add	sp, #16
 8003014:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003018 <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	0002      	movs	r2, r0
 8003020:	1dfb      	adds	r3, r7, #7
 8003022:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8003024:	1dfb      	adds	r3, r7, #7
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <SD_disk_initialize+0x18>
 800302c:	2301      	movs	r3, #1
 800302e:	e0f2      	b.n	8003216 <SD_disk_initialize+0x1fe>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8003030:	4b7b      	ldr	r3, [pc, #492]	; (8003220 <SD_disk_initialize+0x208>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	001a      	movs	r2, r3
 8003038:	2302      	movs	r3, #2
 800303a:	4013      	ands	r3, r2
 800303c:	d003      	beq.n	8003046 <SD_disk_initialize+0x2e>
 800303e:	4b78      	ldr	r3, [pc, #480]	; (8003220 <SD_disk_initialize+0x208>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e0e7      	b.n	8003216 <SD_disk_initialize+0x1fe>
  /* power on */
  SD_PowerOn();
 8003046:	f7ff fe97 	bl	8002d78 <SD_PowerOn>
  /* slave select */
  SELECT();
 800304a:	f7ff fdf9 	bl	8002c40 <SELECT>
  /* check disk type */
  type = 0;
 800304e:	230e      	movs	r3, #14
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8003056:	2100      	movs	r1, #0
 8003058:	2040      	movs	r0, #64	; 0x40
 800305a:	f7ff ff70 	bl	8002f3e <SD_SendCmd>
 800305e:	0003      	movs	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	d000      	beq.n	8003066 <SD_disk_initialize+0x4e>
 8003064:	e0bc      	b.n	80031e0 <SD_disk_initialize+0x1c8>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8003066:	4b6f      	ldr	r3, [pc, #444]	; (8003224 <SD_disk_initialize+0x20c>)
 8003068:	22fa      	movs	r2, #250	; 0xfa
 800306a:	0092      	lsls	r2, r2, #2
 800306c:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800306e:	23d5      	movs	r3, #213	; 0xd5
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	0019      	movs	r1, r3
 8003074:	2048      	movs	r0, #72	; 0x48
 8003076:	f7ff ff62 	bl	8002f3e <SD_SendCmd>
 800307a:	0003      	movs	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d000      	beq.n	8003082 <SD_disk_initialize+0x6a>
 8003080:	e06b      	b.n	800315a <SD_disk_initialize+0x142>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8003082:	230f      	movs	r3, #15
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e00e      	b.n	80030aa <SD_disk_initialize+0x92>
      {
        ocr[n] = SPI_RxByte();
 800308c:	250f      	movs	r5, #15
 800308e:	197b      	adds	r3, r7, r5
 8003090:	781c      	ldrb	r4, [r3, #0]
 8003092:	f7ff fe29 	bl	8002ce8 <SPI_RxByte>
 8003096:	0003      	movs	r3, r0
 8003098:	001a      	movs	r2, r3
 800309a:	2308      	movs	r3, #8
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 80030a0:	197b      	adds	r3, r7, r5
 80030a2:	781a      	ldrb	r2, [r3, #0]
 80030a4:	197b      	adds	r3, r7, r5
 80030a6:	3201      	adds	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	230f      	movs	r3, #15
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d9eb      	bls.n	800308c <SD_disk_initialize+0x74>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80030b4:	2208      	movs	r2, #8
 80030b6:	18bb      	adds	r3, r7, r2
 80030b8:	789b      	ldrb	r3, [r3, #2]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d000      	beq.n	80030c0 <SD_disk_initialize+0xa8>
 80030be:	e08f      	b.n	80031e0 <SD_disk_initialize+0x1c8>
 80030c0:	18bb      	adds	r3, r7, r2
 80030c2:	78db      	ldrb	r3, [r3, #3]
 80030c4:	2baa      	cmp	r3, #170	; 0xaa
 80030c6:	d000      	beq.n	80030ca <SD_disk_initialize+0xb2>
 80030c8:	e08a      	b.n	80031e0 <SD_disk_initialize+0x1c8>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80030ca:	2100      	movs	r1, #0
 80030cc:	2077      	movs	r0, #119	; 0x77
 80030ce:	f7ff ff36 	bl	8002f3e <SD_SendCmd>
 80030d2:	0003      	movs	r3, r0
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d807      	bhi.n	80030e8 <SD_disk_initialize+0xd0>
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	05db      	lsls	r3, r3, #23
 80030dc:	0019      	movs	r1, r3
 80030de:	2069      	movs	r0, #105	; 0x69
 80030e0:	f7ff ff2d 	bl	8002f3e <SD_SendCmd>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d004      	beq.n	80030f2 <SD_disk_initialize+0xda>
        } while (Timer1);
 80030e8:	4b4e      	ldr	r3, [pc, #312]	; (8003224 <SD_disk_initialize+0x20c>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ec      	bne.n	80030ca <SD_disk_initialize+0xb2>
 80030f0:	e000      	b.n	80030f4 <SD_disk_initialize+0xdc>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80030f2:	46c0      	nop			; (mov r8, r8)
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80030f4:	4b4b      	ldr	r3, [pc, #300]	; (8003224 <SD_disk_initialize+0x20c>)
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d100      	bne.n	80030fe <SD_disk_initialize+0xe6>
 80030fc:	e070      	b.n	80031e0 <SD_disk_initialize+0x1c8>
 80030fe:	2100      	movs	r1, #0
 8003100:	207a      	movs	r0, #122	; 0x7a
 8003102:	f7ff ff1c 	bl	8002f3e <SD_SendCmd>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d000      	beq.n	800310c <SD_disk_initialize+0xf4>
 800310a:	e069      	b.n	80031e0 <SD_disk_initialize+0x1c8>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800310c:	230f      	movs	r3, #15
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e00e      	b.n	8003134 <SD_disk_initialize+0x11c>
          {
            ocr[n] = SPI_RxByte();
 8003116:	250f      	movs	r5, #15
 8003118:	197b      	adds	r3, r7, r5
 800311a:	781c      	ldrb	r4, [r3, #0]
 800311c:	f7ff fde4 	bl	8002ce8 <SPI_RxByte>
 8003120:	0003      	movs	r3, r0
 8003122:	001a      	movs	r2, r3
 8003124:	2308      	movs	r3, #8
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 800312a:	197b      	adds	r3, r7, r5
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	197b      	adds	r3, r7, r5
 8003130:	3201      	adds	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	230f      	movs	r3, #15
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d9eb      	bls.n	8003116 <SD_disk_initialize+0xfe>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800313e:	2308      	movs	r3, #8
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	001a      	movs	r2, r3
 8003146:	2340      	movs	r3, #64	; 0x40
 8003148:	4013      	ands	r3, r2
 800314a:	d001      	beq.n	8003150 <SD_disk_initialize+0x138>
 800314c:	220c      	movs	r2, #12
 800314e:	e000      	b.n	8003152 <SD_disk_initialize+0x13a>
 8003150:	2204      	movs	r2, #4
 8003152:	230e      	movs	r3, #14
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e042      	b.n	80031e0 <SD_disk_initialize+0x1c8>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800315a:	2100      	movs	r1, #0
 800315c:	2077      	movs	r0, #119	; 0x77
 800315e:	f7ff feee 	bl	8002f3e <SD_SendCmd>
 8003162:	0003      	movs	r3, r0
 8003164:	2b01      	cmp	r3, #1
 8003166:	d808      	bhi.n	800317a <SD_disk_initialize+0x162>
 8003168:	2100      	movs	r1, #0
 800316a:	2069      	movs	r0, #105	; 0x69
 800316c:	f7ff fee7 	bl	8002f3e <SD_SendCmd>
 8003170:	0003      	movs	r3, r0
 8003172:	2b01      	cmp	r3, #1
 8003174:	d801      	bhi.n	800317a <SD_disk_initialize+0x162>
 8003176:	2202      	movs	r2, #2
 8003178:	e000      	b.n	800317c <SD_disk_initialize+0x164>
 800317a:	2201      	movs	r2, #1
 800317c:	230e      	movs	r3, #14
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	701a      	strb	r2, [r3, #0]
      do
      {
        if (type == CT_SD1)
 8003182:	230e      	movs	r3, #14
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d10d      	bne.n	80031a8 <SD_disk_initialize+0x190>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800318c:	2100      	movs	r1, #0
 800318e:	2077      	movs	r0, #119	; 0x77
 8003190:	f7ff fed5 	bl	8002f3e <SD_SendCmd>
 8003194:	0003      	movs	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d80c      	bhi.n	80031b4 <SD_disk_initialize+0x19c>
 800319a:	2100      	movs	r1, #0
 800319c:	2069      	movs	r0, #105	; 0x69
 800319e:	f7ff fece 	bl	8002f3e <SD_SendCmd>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d106      	bne.n	80031b4 <SD_disk_initialize+0x19c>
 80031a6:	e00b      	b.n	80031c0 <SD_disk_initialize+0x1a8>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80031a8:	2100      	movs	r1, #0
 80031aa:	2041      	movs	r0, #65	; 0x41
 80031ac:	f7ff fec7 	bl	8002f3e <SD_SendCmd>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d004      	beq.n	80031be <SD_disk_initialize+0x1a6>
        }
      } while (Timer1);
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <SD_disk_initialize+0x20c>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e2      	bne.n	8003182 <SD_disk_initialize+0x16a>
 80031bc:	e000      	b.n	80031c0 <SD_disk_initialize+0x1a8>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80031be:	46c0      	nop			; (mov r8, r8)
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80031c0:	4b18      	ldr	r3, [pc, #96]	; (8003224 <SD_disk_initialize+0x20c>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <SD_disk_initialize+0x1c0>
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	0019      	movs	r1, r3
 80031ce:	2050      	movs	r0, #80	; 0x50
 80031d0:	f7ff feb5 	bl	8002f3e <SD_SendCmd>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d003      	beq.n	80031e0 <SD_disk_initialize+0x1c8>
 80031d8:	230e      	movs	r3, #14
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
    }
  }
  CardType = type;
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <SD_disk_initialize+0x210>)
 80031e2:	240e      	movs	r4, #14
 80031e4:	193a      	adds	r2, r7, r4
 80031e6:	7812      	ldrb	r2, [r2, #0]
 80031e8:	701a      	strb	r2, [r3, #0]
  /* Idle */
  DESELECT();
 80031ea:	f7ff fd38 	bl	8002c5e <DESELECT>
  SPI_RxByte();
 80031ee:	f7ff fd7b 	bl	8002ce8 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80031f2:	193b      	adds	r3, r7, r4
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <SD_disk_initialize+0x1f4>
  {
    Stat &= ~STA_NOINIT;
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <SD_disk_initialize+0x208>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2201      	movs	r2, #1
 8003202:	4393      	bics	r3, r2
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <SD_disk_initialize+0x208>)
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e001      	b.n	8003210 <SD_disk_initialize+0x1f8>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800320c:	f7ff fdfc 	bl	8002e08 <SD_PowerOff>
  }
  return Stat;
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <SD_disk_initialize+0x208>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bdb0      	pop	{r4, r5, r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	20000000 	.word	0x20000000
 8003224:	20000208 	.word	0x20000208
 8003228:	2000020c 	.word	0x2000020c

0800322c <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	0002      	movs	r2, r0
 8003234:	1dfb      	adds	r3, r7, #7
 8003236:	701a      	strb	r2, [r3, #0]
  if (drv) return STA_NOINIT;
 8003238:	1dfb      	adds	r3, r7, #7
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <SD_disk_status+0x18>
 8003240:	2301      	movs	r3, #1
 8003242:	e002      	b.n	800324a <SD_disk_status+0x1e>
  return Stat;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <SD_disk_status+0x28>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b2db      	uxtb	r3, r3
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b002      	add	sp, #8
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	20000000 	.word	0x20000000

08003258 <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	210f      	movs	r1, #15
 8003266:	187b      	adds	r3, r7, r1
 8003268:	1c02      	adds	r2, r0, #0
 800326a:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800326c:	187b      	adds	r3, r7, r1
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <SD_disk_read+0x22>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <SD_disk_read+0x26>
 800327a:	2304      	movs	r3, #4
 800327c:	e053      	b.n	8003326 <SD_disk_read+0xce>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <SD_disk_read+0xd8>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	001a      	movs	r2, r3
 8003286:	2301      	movs	r3, #1
 8003288:	4013      	ands	r3, r2
 800328a:	d001      	beq.n	8003290 <SD_disk_read+0x38>
 800328c:	2303      	movs	r3, #3
 800328e:	e04a      	b.n	8003326 <SD_disk_read+0xce>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003290:	4b28      	ldr	r3, [pc, #160]	; (8003334 <SD_disk_read+0xdc>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	001a      	movs	r2, r3
 8003296:	2304      	movs	r3, #4
 8003298:	4013      	ands	r3, r2
 800329a:	d102      	bne.n	80032a2 <SD_disk_read+0x4a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	025b      	lsls	r3, r3, #9
 80032a0:	607b      	str	r3, [r7, #4]
  SELECT();
 80032a2:	f7ff fccd 	bl	8002c40 <SELECT>
  if (count == 1)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d112      	bne.n	80032d2 <SD_disk_read+0x7a>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	0019      	movs	r1, r3
 80032b0:	2051      	movs	r0, #81	; 0x51
 80032b2:	f7ff fe44 	bl	8002f3e <SD_SendCmd>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d12d      	bne.n	8003316 <SD_disk_read+0xbe>
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	009a      	lsls	r2, r3, #2
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	0011      	movs	r1, r2
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff fdb4 	bl	8002e30 <SD_RxDataBlock>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d024      	beq.n	8003316 <SD_disk_read+0xbe>
 80032cc:	2300      	movs	r3, #0
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	e021      	b.n	8003316 <SD_disk_read+0xbe>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	0019      	movs	r1, r3
 80032d6:	2052      	movs	r0, #82	; 0x52
 80032d8:	f7ff fe31 	bl	8002f3e <SD_SendCmd>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d11a      	bne.n	8003316 <SD_disk_read+0xbe>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	009a      	lsls	r2, r3, #2
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fda1 	bl	8002e30 <SD_RxDataBlock>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d00c      	beq.n	800330c <SD_disk_read+0xb4>
        buff += 512;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	4694      	mov	ip, r2
 80032fa:	4463      	add	r3, ip
 80032fc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	3b01      	subs	r3, #1
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ea      	bne.n	80032e0 <SD_disk_read+0x88>
 800330a:	e000      	b.n	800330e <SD_disk_read+0xb6>
        if (!SD_RxDataBlock(buff, 512)) break;
 800330c:	46c0      	nop			; (mov r8, r8)
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800330e:	2100      	movs	r1, #0
 8003310:	204c      	movs	r0, #76	; 0x4c
 8003312:	f7ff fe14 	bl	8002f3e <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 8003316:	f7ff fca2 	bl	8002c5e <DESELECT>
  SPI_RxByte();
 800331a:	f7ff fce5 	bl	8002ce8 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	1e5a      	subs	r2, r3, #1
 8003322:	4193      	sbcs	r3, r2
 8003324:	b2db      	uxtb	r3, r3
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	20000000 	.word	0x20000000
 8003334:	2000020c 	.word	0x2000020c

08003338 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	210f      	movs	r1, #15
 8003346:	187b      	adds	r3, r7, r1
 8003348:	1c02      	adds	r2, r0, #0
 800334a:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800334c:	187b      	adds	r3, r7, r1
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <SD_disk_write+0x22>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <SD_disk_write+0x26>
 800335a:	2304      	movs	r3, #4
 800335c:	e06b      	b.n	8003436 <SD_disk_write+0xfe>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <SD_disk_write+0x108>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	001a      	movs	r2, r3
 8003366:	2301      	movs	r3, #1
 8003368:	4013      	ands	r3, r2
 800336a:	d001      	beq.n	8003370 <SD_disk_write+0x38>
 800336c:	2303      	movs	r3, #3
 800336e:	e062      	b.n	8003436 <SD_disk_write+0xfe>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8003370:	4b33      	ldr	r3, [pc, #204]	; (8003440 <SD_disk_write+0x108>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	001a      	movs	r2, r3
 8003378:	2304      	movs	r3, #4
 800337a:	4013      	ands	r3, r2
 800337c:	d001      	beq.n	8003382 <SD_disk_write+0x4a>
 800337e:	2302      	movs	r3, #2
 8003380:	e059      	b.n	8003436 <SD_disk_write+0xfe>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003382:	4b30      	ldr	r3, [pc, #192]	; (8003444 <SD_disk_write+0x10c>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	001a      	movs	r2, r3
 8003388:	2304      	movs	r3, #4
 800338a:	4013      	ands	r3, r2
 800338c:	d102      	bne.n	8003394 <SD_disk_write+0x5c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	025b      	lsls	r3, r3, #9
 8003392:	607b      	str	r3, [r7, #4]
  SELECT();
 8003394:	f7ff fc54 	bl	8002c40 <SELECT>
  if (count == 1)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d110      	bne.n	80033c0 <SD_disk_write+0x88>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	0019      	movs	r1, r3
 80033a2:	2058      	movs	r0, #88	; 0x58
 80033a4:	f7ff fdcb 	bl	8002f3e <SD_SendCmd>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d13c      	bne.n	8003426 <SD_disk_write+0xee>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	21fe      	movs	r1, #254	; 0xfe
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff fd71 	bl	8002e98 <SD_TxDataBlock>
 80033b6:	1e03      	subs	r3, r0, #0
 80033b8:	d035      	beq.n	8003426 <SD_disk_write+0xee>
      count = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	e032      	b.n	8003426 <SD_disk_write+0xee>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <SD_disk_write+0x10c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	001a      	movs	r2, r3
 80033c6:	2302      	movs	r3, #2
 80033c8:	4013      	ands	r3, r2
 80033ca:	d008      	beq.n	80033de <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 80033cc:	2100      	movs	r1, #0
 80033ce:	2077      	movs	r0, #119	; 0x77
 80033d0:	f7ff fdb5 	bl	8002f3e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	0019      	movs	r1, r3
 80033d8:	2057      	movs	r0, #87	; 0x57
 80033da:	f7ff fdb0 	bl	8002f3e <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0019      	movs	r1, r3
 80033e2:	2059      	movs	r0, #89	; 0x59
 80033e4:	f7ff fdab 	bl	8002f3e <SD_SendCmd>
 80033e8:	1e03      	subs	r3, r0, #0
 80033ea:	d11c      	bne.n	8003426 <SD_disk_write+0xee>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	21fc      	movs	r1, #252	; 0xfc
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff fd51 	bl	8002e98 <SD_TxDataBlock>
 80033f6:	1e03      	subs	r3, r0, #0
 80033f8:	d00c      	beq.n	8003414 <SD_disk_write+0xdc>
        buff += 512;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	0092      	lsls	r2, r2, #2
 8003400:	4694      	mov	ip, r2
 8003402:	4463      	add	r3, ip
 8003404:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ec      	bne.n	80033ec <SD_disk_write+0xb4>
 8003412:	e000      	b.n	8003416 <SD_disk_write+0xde>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003414:	46c0      	nop			; (mov r8, r8)
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8003416:	21fd      	movs	r1, #253	; 0xfd
 8003418:	2000      	movs	r0, #0
 800341a:	f7ff fd3d 	bl	8002e98 <SD_TxDataBlock>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d101      	bne.n	8003426 <SD_disk_write+0xee>
      {
        count = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 8003426:	f7ff fc1a 	bl	8002c5e <DESELECT>
  SPI_RxByte();
 800342a:	f7ff fc5d 	bl	8002ce8 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	1e5a      	subs	r2, r3, #1
 8003432:	4193      	sbcs	r3, r2
 8003434:	b2db      	uxtb	r3, r3
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b004      	add	sp, #16
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	20000000 	.word	0x20000000
 8003444:	2000020c 	.word	0x2000020c

08003448 <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	603a      	str	r2, [r7, #0]
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	1c02      	adds	r2, r0, #0
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	1dbb      	adds	r3, r7, #6
 8003458:	1c0a      	adds	r2, r1, #0
 800345a:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8003460:	1dfb      	adds	r3, r7, #7
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <SD_disk_ioctl+0x24>
 8003468:	2304      	movs	r3, #4
 800346a:	e11b      	b.n	80036a4 <SD_disk_ioctl+0x25c>
  res = RES_ERROR;
 800346c:	2327      	movs	r3, #39	; 0x27
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
  if (ctrl == CTRL_POWER)
 8003474:	1dbb      	adds	r3, r7, #6
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b05      	cmp	r3, #5
 800347a:	d127      	bne.n	80034cc <SD_disk_ioctl+0x84>
  {
    switch (*ptr)
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d013      	beq.n	80034ac <SD_disk_ioctl+0x64>
 8003484:	dc1d      	bgt.n	80034c2 <SD_disk_ioctl+0x7a>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <SD_disk_ioctl+0x48>
 800348a:	2b01      	cmp	r3, #1
 800348c:	d007      	beq.n	800349e <SD_disk_ioctl+0x56>
 800348e:	e018      	b.n	80034c2 <SD_disk_ioctl+0x7a>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8003490:	f7ff fcba 	bl	8002e08 <SD_PowerOff>
      res = RES_OK;
 8003494:	2327      	movs	r3, #39	; 0x27
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
      break;
 800349c:	e0ff      	b.n	800369e <SD_disk_ioctl+0x256>
    case 1:
      SD_PowerOn();   /* Power On */
 800349e:	f7ff fc6b 	bl	8002d78 <SD_PowerOn>
      res = RES_OK;
 80034a2:	2327      	movs	r3, #39	; 0x27
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
      break;
 80034aa:	e0f8      	b.n	800369e <SD_disk_ioctl+0x256>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	1c5c      	adds	r4, r3, #1
 80034b0:	f7ff fcb4 	bl	8002e1c <SD_CheckPower>
 80034b4:	0003      	movs	r3, r0
 80034b6:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80034b8:	2327      	movs	r3, #39	; 0x27
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
      break;
 80034c0:	e0ed      	b.n	800369e <SD_disk_ioctl+0x256>
    default:
      res = RES_PARERR;
 80034c2:	2327      	movs	r3, #39	; 0x27
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	2204      	movs	r2, #4
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e0e8      	b.n	800369e <SD_disk_ioctl+0x256>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80034cc:	4b77      	ldr	r3, [pc, #476]	; (80036ac <SD_disk_ioctl+0x264>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	001a      	movs	r2, r3
 80034d4:	2301      	movs	r3, #1
 80034d6:	4013      	ands	r3, r2
 80034d8:	d001      	beq.n	80034de <SD_disk_ioctl+0x96>
 80034da:	2303      	movs	r3, #3
 80034dc:	e0e2      	b.n	80036a4 <SD_disk_ioctl+0x25c>
    SELECT();
 80034de:	f7ff fbaf 	bl	8002c40 <SELECT>
    switch (ctrl)
 80034e2:	1dbb      	adds	r3, r7, #6
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b0d      	cmp	r3, #13
 80034e8:	d900      	bls.n	80034ec <SD_disk_ioctl+0xa4>
 80034ea:	e0c8      	b.n	800367e <SD_disk_ioctl+0x236>
 80034ec:	009a      	lsls	r2, r3, #2
 80034ee:	4b70      	ldr	r3, [pc, #448]	; (80036b0 <SD_disk_ioctl+0x268>)
 80034f0:	18d3      	adds	r3, r2, r3
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80034f6:	2100      	movs	r1, #0
 80034f8:	2049      	movs	r0, #73	; 0x49
 80034fa:	f7ff fd20 	bl	8002f3e <SD_SendCmd>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d000      	beq.n	8003504 <SD_disk_ioctl+0xbc>
 8003502:	e0c1      	b.n	8003688 <SD_disk_ioctl+0x240>
 8003504:	240c      	movs	r4, #12
 8003506:	193b      	adds	r3, r7, r4
 8003508:	2110      	movs	r1, #16
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff fc90 	bl	8002e30 <SD_RxDataBlock>
 8003510:	1e03      	subs	r3, r0, #0
 8003512:	d100      	bne.n	8003516 <SD_disk_ioctl+0xce>
 8003514:	e0b8      	b.n	8003688 <SD_disk_ioctl+0x240>
      {
        if ((csd[0] >> 6) == 1)
 8003516:	0022      	movs	r2, r4
 8003518:	18bb      	adds	r3, r7, r2
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d114      	bne.n	800354e <SD_disk_ioctl+0x106>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003524:	0011      	movs	r1, r2
 8003526:	18bb      	adds	r3, r7, r2
 8003528:	7a5b      	ldrb	r3, [r3, #9]
 800352a:	b29a      	uxth	r2, r3
 800352c:	187b      	adds	r3, r7, r1
 800352e:	7a1b      	ldrb	r3, [r3, #8]
 8003530:	b29b      	uxth	r3, r3
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	b29b      	uxth	r3, r3
 8003536:	18d3      	adds	r3, r2, r3
 8003538:	b29a      	uxth	r2, r3
 800353a:	211e      	movs	r1, #30
 800353c:	187b      	adds	r3, r7, r1
 800353e:	3201      	adds	r2, #1
 8003540:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 8003542:	187b      	adds	r3, r7, r1
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	029a      	lsls	r2, r3, #10
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e03a      	b.n	80035c4 <SD_disk_ioctl+0x17c>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800354e:	200c      	movs	r0, #12
 8003550:	183b      	adds	r3, r7, r0
 8003552:	795b      	ldrb	r3, [r3, #5]
 8003554:	220f      	movs	r2, #15
 8003556:	4013      	ands	r3, r2
 8003558:	b2da      	uxtb	r2, r3
 800355a:	183b      	adds	r3, r7, r0
 800355c:	7a9b      	ldrb	r3, [r3, #10]
 800355e:	09db      	lsrs	r3, r3, #7
 8003560:	b2db      	uxtb	r3, r3
 8003562:	18d3      	adds	r3, r2, r3
 8003564:	b2da      	uxtb	r2, r3
 8003566:	183b      	adds	r3, r7, r0
 8003568:	7a5b      	ldrb	r3, [r3, #9]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2106      	movs	r1, #6
 8003570:	400b      	ands	r3, r1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	18d3      	adds	r3, r2, r3
 8003576:	b2da      	uxtb	r2, r3
 8003578:	2426      	movs	r4, #38	; 0x26
 800357a:	193b      	adds	r3, r7, r4
 800357c:	3202      	adds	r2, #2
 800357e:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003580:	183b      	adds	r3, r7, r0
 8003582:	7a1b      	ldrb	r3, [r3, #8]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	b2db      	uxtb	r3, r3
 8003588:	b29a      	uxth	r2, r3
 800358a:	183b      	adds	r3, r7, r0
 800358c:	79db      	ldrb	r3, [r3, #7]
 800358e:	b29b      	uxth	r3, r3
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	b29b      	uxth	r3, r3
 8003594:	18d3      	adds	r3, r2, r3
 8003596:	b29a      	uxth	r2, r3
 8003598:	183b      	adds	r3, r7, r0
 800359a:	799b      	ldrb	r3, [r3, #6]
 800359c:	029b      	lsls	r3, r3, #10
 800359e:	b299      	uxth	r1, r3
 80035a0:	23c0      	movs	r3, #192	; 0xc0
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	400b      	ands	r3, r1
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	18d3      	adds	r3, r2, r3
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	211e      	movs	r1, #30
 80035ae:	187b      	adds	r3, r7, r1
 80035b0:	3201      	adds	r2, #1
 80035b2:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	881a      	ldrh	r2, [r3, #0]
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	3b09      	subs	r3, #9
 80035be:	409a      	lsls	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80035c4:	2327      	movs	r3, #39	; 0x27
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
      }
      break;
 80035cc:	e05c      	b.n	8003688 <SD_disk_ioctl+0x240>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80035d6:	2327      	movs	r3, #39	; 0x27
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
      break;
 80035de:	e05a      	b.n	8003696 <SD_disk_ioctl+0x24e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80035e0:	f7ff fbae 	bl	8002d40 <SD_ReadyWait>
 80035e4:	0003      	movs	r3, r0
 80035e6:	2bff      	cmp	r3, #255	; 0xff
 80035e8:	d150      	bne.n	800368c <SD_disk_ioctl+0x244>
 80035ea:	2327      	movs	r3, #39	; 0x27
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
      break;
 80035f2:	e04b      	b.n	800368c <SD_disk_ioctl+0x244>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80035f4:	2100      	movs	r1, #0
 80035f6:	2049      	movs	r0, #73	; 0x49
 80035f8:	f7ff fca1 	bl	8002f3e <SD_SendCmd>
 80035fc:	1e03      	subs	r3, r0, #0
 80035fe:	d147      	bne.n	8003690 <SD_disk_ioctl+0x248>
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2110      	movs	r1, #16
 8003604:	0018      	movs	r0, r3
 8003606:	f7ff fc13 	bl	8002e30 <SD_RxDataBlock>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d040      	beq.n	8003690 <SD_disk_ioctl+0x248>
 800360e:	2327      	movs	r3, #39	; 0x27
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
      break;
 8003616:	e03b      	b.n	8003690 <SD_disk_ioctl+0x248>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003618:	2100      	movs	r1, #0
 800361a:	204a      	movs	r0, #74	; 0x4a
 800361c:	f7ff fc8f 	bl	8002f3e <SD_SendCmd>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d137      	bne.n	8003694 <SD_disk_ioctl+0x24c>
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	2110      	movs	r1, #16
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff fc01 	bl	8002e30 <SD_RxDataBlock>
 800362e:	1e03      	subs	r3, r0, #0
 8003630:	d030      	beq.n	8003694 <SD_disk_ioctl+0x24c>
 8003632:	2327      	movs	r3, #39	; 0x27
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
      break;
 800363a:	e02b      	b.n	8003694 <SD_disk_ioctl+0x24c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800363c:	2100      	movs	r1, #0
 800363e:	207a      	movs	r0, #122	; 0x7a
 8003640:	f7ff fc7d 	bl	8002f3e <SD_SendCmd>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d11a      	bne.n	800367e <SD_disk_ioctl+0x236>
      {
        for (n = 0; n < 4; n++)
 8003648:	2326      	movs	r3, #38	; 0x26
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e00c      	b.n	800366c <SD_disk_ioctl+0x224>
        {
          *ptr++ = SPI_RxByte();
 8003652:	6a3c      	ldr	r4, [r7, #32]
 8003654:	1c63      	adds	r3, r4, #1
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	f7ff fb46 	bl	8002ce8 <SPI_RxByte>
 800365c:	0003      	movs	r3, r0
 800365e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003660:	2126      	movs	r1, #38	; 0x26
 8003662:	187b      	adds	r3, r7, r1
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	187b      	adds	r3, r7, r1
 8003668:	3201      	adds	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	2326      	movs	r3, #38	; 0x26
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d9ed      	bls.n	8003652 <SD_disk_ioctl+0x20a>
        }
        res = RES_OK;
 8003676:	2327      	movs	r3, #39	; 0x27
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
      }
    default:
      res = RES_PARERR;
 800367e:	2327      	movs	r3, #39	; 0x27
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	2204      	movs	r2, #4
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e006      	b.n	8003696 <SD_disk_ioctl+0x24e>
      break;
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	e004      	b.n	8003696 <SD_disk_ioctl+0x24e>
      break;
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	e002      	b.n	8003696 <SD_disk_ioctl+0x24e>
      break;
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	e000      	b.n	8003696 <SD_disk_ioctl+0x24e>
      break;
 8003694:	46c0      	nop			; (mov r8, r8)
    }
    DESELECT();
 8003696:	f7ff fae2 	bl	8002c5e <DESELECT>
    SPI_RxByte();
 800369a:	f7ff fb25 	bl	8002ce8 <SPI_RxByte>
  }
  return res;
 800369e:	2327      	movs	r3, #39	; 0x27
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	781b      	ldrb	r3, [r3, #0]
}
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b00b      	add	sp, #44	; 0x2c
 80036aa:	bd90      	pop	{r4, r7, pc}
 80036ac:	20000000 	.word	0x20000000
 80036b0:	0800e870 	.word	0x0800e870

080036b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036ba:	f000 ff85 	bl	80045c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036be:	f000 f84d 	bl	800375c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036c2:	f000 f921 	bl	8003908 <MX_GPIO_Init>
  MX_SPI1_Init();
 80036c6:	f000 f8e7 	bl	8003898 <MX_SPI1_Init>
  MX_FATFS_Init();
 80036ca:	f003 f8c1 	bl	8006850 <MX_FATFS_Init>
  MX_ADC_Init();
 80036ce:	f000 f899 	bl	8003804 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  start_time_ms = HAL_GetTick();
 80036d2:	f000 ffdf 	bl	8004694 <HAL_GetTick>
 80036d6:	0002      	movs	r2, r0
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <main+0x9c>)
 80036da:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 80036dc:	23a0      	movs	r3, #160	; 0xa0
 80036de:	05db      	lsls	r3, r3, #23
 80036e0:	2101      	movs	r1, #1
 80036e2:	0018      	movs	r0, r3
 80036e4:	f001 fe8a 	bl	80053fc <HAL_GPIO_ReadPin>
 80036e8:	0003      	movs	r3, r0
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d127      	bne.n	800373e <main+0x8a>
	 		  {
	 			  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_SET);
 80036ee:	23a0      	movs	r3, #160	; 0xa0
 80036f0:	05db      	lsls	r3, r3, #23
 80036f2:	2201      	movs	r2, #1
 80036f4:	2102      	movs	r1, #2
 80036f6:	0018      	movs	r0, r3
 80036f8:	f001 fe9d 	bl	8005436 <HAL_GPIO_WritePin>
	 			  uint32_t current_time_ms = HAL_GetTick();
 80036fc:	f000 ffca 	bl	8004694 <HAL_GetTick>
 8003700:	0003      	movs	r3, r0
 8003702:	607b      	str	r3, [r7, #4]
	 			  seconds_since_start = (current_time_ms - start_time_ms) / 1000.0f;
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <main+0x9c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	0018      	movs	r0, r3
 800370e:	f7fd fb0f 	bl	8000d30 <__aeabi_ui2f>
 8003712:	1c03      	adds	r3, r0, #0
 8003714:	490f      	ldr	r1, [pc, #60]	; (8003754 <main+0xa0>)
 8003716:	1c18      	adds	r0, r3, #0
 8003718:	f7fd f850 	bl	80007bc <__aeabi_fdiv>
 800371c:	1c03      	adds	r3, r0, #0
 800371e:	1c1a      	adds	r2, r3, #0
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <main+0xa4>)
 8003722:	601a      	str	r2, [r3, #0]
	 			  readNumber();
 8003724:	f000 fb96 	bl	8003e54 <readNumber>
	 			  Measurement_of_ADC_Voltage_18650();
 8003728:	f000 fa1c 	bl	8003b64 <Measurement_of_ADC_Voltage_18650>
	 			  Measurement_of_ADC_Voltage_CMOS();
 800372c:	f000 fa4c 	bl	8003bc8 <Measurement_of_ADC_Voltage_CMOS>
	 			  Measurement_of_ADC_Current_CMOS();
 8003730:	f000 fabe 	bl	8003cb0 <Measurement_of_ADC_Current_CMOS>
	 			  Measurement_of_ADC_Current_18650();
 8003734:	f000 fa7a 	bl	8003c2c <Measurement_of_ADC_Current_18650>

	 			  process_SD_card();
 8003738:	f000 f974 	bl	8003a24 <process_SD_card>
 800373c:	e7ce      	b.n	80036dc <main+0x28>
	 		  }
	 		  else
	 		  {
	 			  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 800373e:	23a0      	movs	r3, #160	; 0xa0
 8003740:	05db      	lsls	r3, r3, #23
 8003742:	2200      	movs	r2, #0
 8003744:	2102      	movs	r1, #2
 8003746:	0018      	movs	r0, r3
 8003748:	f001 fe75 	bl	8005436 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 800374c:	e7c6      	b.n	80036dc <main+0x28>
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	200002d8 	.word	0x200002d8
 8003754:	447a0000 	.word	0x447a0000
 8003758:	200002d4 	.word	0x200002d4

0800375c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b093      	sub	sp, #76	; 0x4c
 8003760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003762:	2414      	movs	r4, #20
 8003764:	193b      	adds	r3, r7, r4
 8003766:	0018      	movs	r0, r3
 8003768:	2334      	movs	r3, #52	; 0x34
 800376a:	001a      	movs	r2, r3
 800376c:	2100      	movs	r1, #0
 800376e:	f007 faf5 	bl	800ad5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003772:	003b      	movs	r3, r7
 8003774:	0018      	movs	r0, r3
 8003776:	2314      	movs	r3, #20
 8003778:	001a      	movs	r2, r3
 800377a:	2100      	movs	r1, #0
 800377c:	f007 faee 	bl	800ad5c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003780:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <SystemClock_Config+0xa0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <SystemClock_Config+0xa4>)
 8003786:	401a      	ands	r2, r3
 8003788:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <SystemClock_Config+0xa0>)
 800378a:	2180      	movs	r1, #128	; 0x80
 800378c:	0109      	lsls	r1, r1, #4
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003792:	0021      	movs	r1, r4
 8003794:	187b      	adds	r3, r7, r1
 8003796:	2210      	movs	r2, #16
 8003798:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800379a:	187b      	adds	r3, r7, r1
 800379c:	2201      	movs	r2, #1
 800379e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	2200      	movs	r2, #0
 80037a4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	22a0      	movs	r2, #160	; 0xa0
 80037aa:	0212      	lsls	r2, r2, #8
 80037ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	2200      	movs	r2, #0
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	0018      	movs	r0, r3
 80037b8:	f001 fe5a 	bl	8005470 <HAL_RCC_OscConfig>
 80037bc:	1e03      	subs	r3, r0, #0
 80037be:	d001      	beq.n	80037c4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80037c0:	f000 fcf8 	bl	80041b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037c4:	003b      	movs	r3, r7
 80037c6:	220f      	movs	r2, #15
 80037c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80037ca:	003b      	movs	r3, r7
 80037cc:	2200      	movs	r2, #0
 80037ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037d0:	003b      	movs	r3, r7
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037d6:	003b      	movs	r3, r7
 80037d8:	2200      	movs	r2, #0
 80037da:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037dc:	003b      	movs	r3, r7
 80037de:	2200      	movs	r2, #0
 80037e0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80037e2:	003b      	movs	r3, r7
 80037e4:	2100      	movs	r1, #0
 80037e6:	0018      	movs	r0, r3
 80037e8:	f002 f9be 	bl	8005b68 <HAL_RCC_ClockConfig>
 80037ec:	1e03      	subs	r3, r0, #0
 80037ee:	d001      	beq.n	80037f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80037f0:	f000 fce0 	bl	80041b4 <Error_Handler>
  }
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b013      	add	sp, #76	; 0x4c
 80037fa:	bd90      	pop	{r4, r7, pc}
 80037fc:	40007000 	.word	0x40007000
 8003800:	ffffe7ff 	.word	0xffffe7ff

08003804 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003808:	4b21      	ldr	r3, [pc, #132]	; (8003890 <MX_ADC_Init+0x8c>)
 800380a:	4a22      	ldr	r2, [pc, #136]	; (8003894 <MX_ADC_Init+0x90>)
 800380c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800380e:	4b20      	ldr	r3, [pc, #128]	; (8003890 <MX_ADC_Init+0x8c>)
 8003810:	2200      	movs	r2, #0
 8003812:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003814:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <MX_ADC_Init+0x8c>)
 8003816:	2280      	movs	r2, #128	; 0x80
 8003818:	0612      	lsls	r2, r2, #24
 800381a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800381c:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <MX_ADC_Init+0x8c>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003822:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <MX_ADC_Init+0x8c>)
 8003824:	2200      	movs	r2, #0
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003828:	4b19      	ldr	r3, [pc, #100]	; (8003890 <MX_ADC_Init+0x8c>)
 800382a:	2201      	movs	r2, #1
 800382c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800382e:	4b18      	ldr	r3, [pc, #96]	; (8003890 <MX_ADC_Init+0x8c>)
 8003830:	2200      	movs	r2, #0
 8003832:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003834:	4b16      	ldr	r3, [pc, #88]	; (8003890 <MX_ADC_Init+0x8c>)
 8003836:	2220      	movs	r2, #32
 8003838:	2100      	movs	r1, #0
 800383a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800383c:	4b14      	ldr	r3, [pc, #80]	; (8003890 <MX_ADC_Init+0x8c>)
 800383e:	2221      	movs	r2, #33	; 0x21
 8003840:	2100      	movs	r1, #0
 8003842:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003844:	4b12      	ldr	r3, [pc, #72]	; (8003890 <MX_ADC_Init+0x8c>)
 8003846:	2200      	movs	r2, #0
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <MX_ADC_Init+0x8c>)
 800384c:	22c2      	movs	r2, #194	; 0xc2
 800384e:	32ff      	adds	r2, #255	; 0xff
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003852:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <MX_ADC_Init+0x8c>)
 8003854:	222c      	movs	r2, #44	; 0x2c
 8003856:	2100      	movs	r1, #0
 8003858:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <MX_ADC_Init+0x8c>)
 800385c:	2204      	movs	r2, #4
 800385e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <MX_ADC_Init+0x8c>)
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <MX_ADC_Init+0x8c>)
 8003868:	2200      	movs	r2, #0
 800386a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 800386c:	4b08      	ldr	r3, [pc, #32]	; (8003890 <MX_ADC_Init+0x8c>)
 800386e:	2201      	movs	r2, #1
 8003870:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <MX_ADC_Init+0x8c>)
 8003874:	2200      	movs	r2, #0
 8003876:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <MX_ADC_Init+0x8c>)
 800387a:	0018      	movs	r0, r3
 800387c:	f000 ff38 	bl	80046f0 <HAL_ADC_Init>
 8003880:	1e03      	subs	r3, r0, #0
 8003882:	d001      	beq.n	8003888 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8003884:	f000 fc96 	bl	80041b4 <Error_Handler>

  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	20000210 	.word	0x20000210
 8003894:	40012400 	.word	0x40012400

08003898 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800389c:	4b18      	ldr	r3, [pc, #96]	; (8003900 <MX_SPI1_Init+0x68>)
 800389e:	4a19      	ldr	r2, [pc, #100]	; (8003904 <MX_SPI1_Init+0x6c>)
 80038a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038a2:	4b17      	ldr	r3, [pc, #92]	; (8003900 <MX_SPI1_Init+0x68>)
 80038a4:	2282      	movs	r2, #130	; 0x82
 80038a6:	0052      	lsls	r2, r2, #1
 80038a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <MX_SPI1_Init+0x68>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <MX_SPI1_Init+0x68>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <MX_SPI1_Init+0x68>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <MX_SPI1_Init+0x68>)
 80038be:	2200      	movs	r2, #0
 80038c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <MX_SPI1_Init+0x68>)
 80038c4:	2280      	movs	r2, #128	; 0x80
 80038c6:	0092      	lsls	r2, r2, #2
 80038c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <MX_SPI1_Init+0x68>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <MX_SPI1_Init+0x68>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <MX_SPI1_Init+0x68>)
 80038d8:	2200      	movs	r2, #0
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <MX_SPI1_Init+0x68>)
 80038de:	2200      	movs	r2, #0
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80038e2:	4b07      	ldr	r3, [pc, #28]	; (8003900 <MX_SPI1_Init+0x68>)
 80038e4:	2207      	movs	r2, #7
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <MX_SPI1_Init+0x68>)
 80038ea:	0018      	movs	r0, r3
 80038ec:	f002 fb2a 	bl	8005f44 <HAL_SPI_Init>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d001      	beq.n	80038f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80038f4:	f000 fc5e 	bl	80041b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	2000026c 	.word	0x2000026c
 8003904:	40013000 	.word	0x40013000

08003908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b089      	sub	sp, #36	; 0x24
 800390c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390e:	240c      	movs	r4, #12
 8003910:	193b      	adds	r3, r7, r4
 8003912:	0018      	movs	r0, r3
 8003914:	2314      	movs	r3, #20
 8003916:	001a      	movs	r2, r3
 8003918:	2100      	movs	r1, #0
 800391a:	f007 fa1f 	bl	800ad5c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800391e:	4b38      	ldr	r3, [pc, #224]	; (8003a00 <MX_GPIO_Init+0xf8>)
 8003920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003922:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <MX_GPIO_Init+0xf8>)
 8003924:	2104      	movs	r1, #4
 8003926:	430a      	orrs	r2, r1
 8003928:	62da      	str	r2, [r3, #44]	; 0x2c
 800392a:	4b35      	ldr	r3, [pc, #212]	; (8003a00 <MX_GPIO_Init+0xf8>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	2204      	movs	r2, #4
 8003930:	4013      	ands	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003936:	4b32      	ldr	r3, [pc, #200]	; (8003a00 <MX_GPIO_Init+0xf8>)
 8003938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393a:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <MX_GPIO_Init+0xf8>)
 800393c:	2101      	movs	r1, #1
 800393e:	430a      	orrs	r2, r1
 8003940:	62da      	str	r2, [r3, #44]	; 0x2c
 8003942:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <MX_GPIO_Init+0xf8>)
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	2201      	movs	r2, #1
 8003948:	4013      	ands	r3, r2
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800394e:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <MX_GPIO_Init+0xf8>)
 8003950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003952:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <MX_GPIO_Init+0xf8>)
 8003954:	2102      	movs	r1, #2
 8003956:	430a      	orrs	r2, r1
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c
 800395a:	4b29      	ldr	r3, [pc, #164]	; (8003a00 <MX_GPIO_Init+0xf8>)
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	2202      	movs	r2, #2
 8003960:	4013      	ands	r3, r2
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CardDetect_Output_Pin|GPIO_PIN_4|User_Input_Status_Light_Red_Pin|User_Input_Status_Light_Green_Pin
 8003966:	4927      	ldr	r1, [pc, #156]	; (8003a04 <MX_GPIO_Init+0xfc>)
 8003968:	23a0      	movs	r3, #160	; 0xa0
 800396a:	05db      	lsls	r3, r3, #23
 800396c:	2200      	movs	r2, #0
 800396e:	0018      	movs	r0, r3
 8003970:	f001 fd61 	bl	8005436 <HAL_GPIO_WritePin>
                          |User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Discrete_Bit_0_Pin Discrete_Bit_1_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_0_Pin|Discrete_Bit_1_Pin;
 8003974:	193b      	adds	r3, r7, r4
 8003976:	2203      	movs	r2, #3
 8003978:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800397a:	193b      	adds	r3, r7, r4
 800397c:	2200      	movs	r2, #0
 800397e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	193b      	adds	r3, r7, r4
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003986:	193b      	adds	r3, r7, r4
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <MX_GPIO_Init+0x100>)
 800398a:	0019      	movs	r1, r3
 800398c:	0010      	movs	r0, r2
 800398e:	f001 fbb7 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Input_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Input_Pin;
 8003992:	193b      	adds	r3, r7, r4
 8003994:	2201      	movs	r2, #1
 8003996:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003998:	193b      	adds	r3, r7, r4
 800399a:	2200      	movs	r2, #0
 800399c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399e:	193b      	adds	r3, r7, r4
 80039a0:	2200      	movs	r2, #0
 80039a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_CardDetect_Input_GPIO_Port, &GPIO_InitStruct);
 80039a4:	193a      	adds	r2, r7, r4
 80039a6:	23a0      	movs	r3, #160	; 0xa0
 80039a8:	05db      	lsls	r3, r3, #23
 80039aa:	0011      	movs	r1, r2
 80039ac:	0018      	movs	r0, r3
 80039ae:	f001 fba7 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CardDetect_Output_Pin PA4 User_Input_Status_Light_Red_Pin User_Input_Status_Light_Green_Pin
                           User_Input_Status_Light_Blue_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Output_Pin|GPIO_PIN_4|User_Input_Status_Light_Red_Pin|User_Input_Status_Light_Green_Pin
 80039b2:	193b      	adds	r3, r7, r4
 80039b4:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <MX_GPIO_Init+0xfc>)
 80039b6:	601a      	str	r2, [r3, #0]
                          |User_Input_Status_Light_Blue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b8:	193b      	adds	r3, r7, r4
 80039ba:	2201      	movs	r2, #1
 80039bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039be:	193b      	adds	r3, r7, r4
 80039c0:	2200      	movs	r2, #0
 80039c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c4:	193b      	adds	r3, r7, r4
 80039c6:	2200      	movs	r2, #0
 80039c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ca:	193a      	adds	r2, r7, r4
 80039cc:	23a0      	movs	r3, #160	; 0xa0
 80039ce:	05db      	lsls	r3, r3, #23
 80039d0:	0011      	movs	r1, r2
 80039d2:	0018      	movs	r0, r3
 80039d4:	f001 fb94 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : Discrete_Bit_2_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_2_Pin;
 80039d8:	193b      	adds	r3, r7, r4
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039de:	193b      	adds	r3, r7, r4
 80039e0:	2200      	movs	r2, #0
 80039e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	193b      	adds	r3, r7, r4
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Discrete_Bit_2_GPIO_Port, &GPIO_InitStruct);
 80039ea:	193b      	adds	r3, r7, r4
 80039ec:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <MX_GPIO_Init+0x104>)
 80039ee:	0019      	movs	r1, r3
 80039f0:	0010      	movs	r0, r2
 80039f2:	f001 fb85 	bl	8005100 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b009      	add	sp, #36	; 0x24
 80039fc:	bd90      	pop	{r4, r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	40021000 	.word	0x40021000
 8003a04:	00000712 	.word	0x00000712
 8003a08:	50000800 	.word	0x50000800
 8003a0c:	50000400 	.word	0x50000400

08003a10 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  //HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
 8003a18:	687b      	ldr	r3, [r7, #4]
}
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b002      	add	sp, #8
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <process_SD_card>:

void process_SD_card(void)
{
 8003a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a26:	4c42      	ldr	r4, [pc, #264]	; (8003b30 <process_SD_card+0x10c>)
 8003a28:	44a5      	add	sp, r4
 8003a2a:	af0c      	add	r7, sp, #48	; 0x30

    // Buffer for storing the complete string to write
    char writeBuffer[50]; // Adjust the size based on your needs

    // Attempt to mount the SD Card
    fres = f_mount(&FatFs, "", 1); // 1=mount now
 8003a2c:	4d41      	ldr	r5, [pc, #260]	; (8003b34 <process_SD_card+0x110>)
 8003a2e:	2618      	movs	r6, #24
 8003a30:	19ab      	adds	r3, r5, r6
 8003a32:	19dc      	adds	r4, r3, r7
 8003a34:	4940      	ldr	r1, [pc, #256]	; (8003b38 <process_SD_card+0x114>)
 8003a36:	4b41      	ldr	r3, [pc, #260]	; (8003b3c <process_SD_card+0x118>)
 8003a38:	199b      	adds	r3, r3, r6
 8003a3a:	19db      	adds	r3, r3, r7
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f005 faf6 	bl	8009030 <f_mount>
 8003a44:	0003      	movs	r3, r0
 8003a46:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK) return; // Exit if fail to mount
 8003a48:	19ab      	adds	r3, r5, r6
 8003a4a:	19db      	adds	r3, r3, r7
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d169      	bne.n	8003b26 <process_SD_card+0x102>

    // Open or create the file and append data
    fres = f_open(&fil, "TestingReadings.csv", FA_WRITE | FA_READ | FA_OPEN_APPEND);
 8003a52:	19ab      	adds	r3, r5, r6
 8003a54:	19dc      	adds	r4, r3, r7
 8003a56:	493a      	ldr	r1, [pc, #232]	; (8003b40 <process_SD_card+0x11c>)
 8003a58:	2334      	movs	r3, #52	; 0x34
 8003a5a:	199b      	adds	r3, r3, r6
 8003a5c:	19db      	adds	r3, r3, r7
 8003a5e:	2233      	movs	r2, #51	; 0x33
 8003a60:	0018      	movs	r0, r3
 8003a62:	f005 fb31 	bl	80090c8 <f_open>
 8003a66:	0003      	movs	r3, r0
 8003a68:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK) {
 8003a6a:	19ab      	adds	r3, r5, r6
 8003a6c:	19db      	adds	r3, r3, r7
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d006      	beq.n	8003a82 <process_SD_card+0x5e>
        f_mount(NULL, "", 0); // Dismount the SD card if fail to open
 8003a74:	4b30      	ldr	r3, [pc, #192]	; (8003b38 <process_SD_card+0x114>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	0019      	movs	r1, r3
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f005 fad8 	bl	8009030 <f_mount>
        return; // Exit if fail to open/create the file
 8003a80:	e052      	b.n	8003b28 <process_SD_card+0x104>
    }

    // Prepare the data string
    snprintf(writeBuffer, sizeof(writeBuffer),
 8003a82:	4b30      	ldr	r3, [pc, #192]	; (8003b44 <process_SD_card+0x120>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	1c18      	adds	r0, r3, #0
 8003a88:	f7fe ffe2 	bl	8002a50 <__aeabi_f2d>
 8003a8c:	0004      	movs	r4, r0
 8003a8e:	000d      	movs	r5, r1
 8003a90:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <process_SD_card+0x124>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	1c18      	adds	r0, r3, #0
 8003a96:	f7fe ffdb 	bl	8002a50 <__aeabi_f2d>
 8003a9a:	6138      	str	r0, [r7, #16]
 8003a9c:	6179      	str	r1, [r7, #20]
 8003a9e:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <process_SD_card+0x128>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	1c18      	adds	r0, r3, #0
 8003aa4:	f7fe ffd4 	bl	8002a50 <__aeabi_f2d>
 8003aa8:	60b8      	str	r0, [r7, #8]
 8003aaa:	60f9      	str	r1, [r7, #12]
 8003aac:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <process_SD_card+0x12c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	1c18      	adds	r0, r3, #0
 8003ab2:	f7fe ffcd 	bl	8002a50 <__aeabi_f2d>
 8003ab6:	6038      	str	r0, [r7, #0]
 8003ab8:	6079      	str	r1, [r7, #4]
 8003aba:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <process_SD_card+0x130>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	1c18      	adds	r0, r3, #0
 8003ac0:	f7fe ffc6 	bl	8002a50 <__aeabi_f2d>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	000b      	movs	r3, r1
 8003ac8:	4923      	ldr	r1, [pc, #140]	; (8003b58 <process_SD_card+0x134>)
 8003aca:	6809      	ldr	r1, [r1, #0]
 8003acc:	4e23      	ldr	r6, [pc, #140]	; (8003b5c <process_SD_card+0x138>)
 8003ace:	2018      	movs	r0, #24
 8003ad0:	1838      	adds	r0, r7, r0
 8003ad2:	910a      	str	r1, [sp, #40]	; 0x28
 8003ad4:	9208      	str	r2, [sp, #32]
 8003ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	9206      	str	r2, [sp, #24]
 8003ade:	9307      	str	r3, [sp, #28]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	9204      	str	r2, [sp, #16]
 8003ae6:	9305      	str	r3, [sp, #20]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	9202      	str	r2, [sp, #8]
 8003aee:	9303      	str	r3, [sp, #12]
 8003af0:	9400      	str	r4, [sp, #0]
 8003af2:	9501      	str	r5, [sp, #4]
 8003af4:	0032      	movs	r2, r6
 8003af6:	2132      	movs	r1, #50	; 0x32
 8003af8:	f007 f890 	bl	800ac1c <sniprintf>
             V_CMOS, // CMOS Voltage
             C_CMOS, // CMOS Current
			 valueToAdjust); // Switch State

    // Write the prepared string to the file
    f_puts(writeBuffer, &fil);
 8003afc:	2434      	movs	r4, #52	; 0x34
 8003afe:	2518      	movs	r5, #24
 8003b00:	1963      	adds	r3, r4, r5
 8003b02:	19da      	adds	r2, r3, r7
 8003b04:	197b      	adds	r3, r7, r5
 8003b06:	0011      	movs	r1, r2
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f005 ffb2 	bl	8009a72 <f_puts>

    // Close the file to ensure data is written to the SD card
    f_close(&fil);
 8003b0e:	1963      	adds	r3, r4, r5
 8003b10:	19db      	adds	r3, r3, r7
 8003b12:	0018      	movs	r0, r3
 8003b14:	f005 ff01 	bl	800991a <f_close>

    // Dismount the SD card
    f_mount(NULL, "", 0);
 8003b18:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <process_SD_card+0x114>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	2000      	movs	r0, #0
 8003b20:	f005 fa86 	bl	8009030 <f_mount>
 8003b24:	e000      	b.n	8003b28 <process_SD_card+0x104>
    if (fres != FR_OK) return; // Exit if fail to mount
 8003b26:	46c0      	nop			; (mov r8, r8)
}
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <process_SD_card+0x13c>)
 8003b2c:	449d      	add	sp, r3
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b30:	ffffdf14 	.word	0xffffdf14
 8003b34:	0000209f 	.word	0x0000209f
 8003b38:	0800e730 	.word	0x0800e730
 8003b3c:	00001064 	.word	0x00001064
 8003b40:	0800e734 	.word	0x0800e734
 8003b44:	200002d4 	.word	0x200002d4
 8003b48:	200002c4 	.word	0x200002c4
 8003b4c:	200002d0 	.word	0x200002d0
 8003b50:	200002c8 	.word	0x200002c8
 8003b54:	200002cc 	.word	0x200002cc
 8003b58:	200002dc 	.word	0x200002dc
 8003b5c:	0800e748 	.word	0x0800e748
 8003b60:	000020bc 	.word	0x000020bc

08003b64 <Measurement_of_ADC_Voltage_18650>:


void Measurement_of_ADC_Voltage_18650(){
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
	float V_ref = 3.3;  // This is known for each micro controller from data
 8003b6a:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <Measurement_of_ADC_Voltage_18650+0x58>)
 8003b6c:	60fb      	str	r3, [r7, #12]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8003b6e:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <Measurement_of_ADC_Voltage_18650+0x5c>)
 8003b70:	60bb      	str	r3, [r7, #8]
		float V_stepSize = V_ref / ADC_resolution;
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7fc fe21 	bl	80007bc <__aeabi_fdiv>
 8003b7a:	1c03      	adds	r3, r0, #0
 8003b7c:	607b      	str	r3, [r7, #4]
		// ADC
	    /* Start ADC Conversion for ADC1 */
	    ADC_Select_Voltage18650();
 8003b7e:	f000 f8d9 	bl	8003d34 <ADC_Select_Voltage18650>
	    HAL_ADC_Start(&hadc);
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <Measurement_of_ADC_Voltage_18650+0x60>)
 8003b84:	0018      	movs	r0, r3
 8003b86:	f000 ff27 	bl	80049d8 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	425a      	negs	r2, r3
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <Measurement_of_ADC_Voltage_18650+0x60>)
 8003b90:	0011      	movs	r1, r2
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 ffb4 	bl	8004b00 <HAL_ADC_PollForConversion>
 8003b98:	1e03      	subs	r3, r0, #0
 8003b9a:	d106      	bne.n	8003baa <Measurement_of_ADC_Voltage_18650+0x46>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc);
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <Measurement_of_ADC_Voltage_18650+0x60>)
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f001 f84a 	bl	8004c38 <HAL_ADC_GetValue>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	1cbb      	adds	r3, r7, #2
 8003ba8:	801a      	strh	r2, [r3, #0]
	       }
	    HAL_ADC_Stop(&hadc);
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <Measurement_of_ADC_Voltage_18650+0x60>)
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 ff67 	bl	8004a80 <HAL_ADC_Stop>
}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b004      	add	sp, #16
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	40533333 	.word	0x40533333
 8003bc0:	457ff000 	.word	0x457ff000
 8003bc4:	20000210 	.word	0x20000210

08003bc8 <Measurement_of_ADC_Voltage_CMOS>:
void Measurement_of_ADC_Voltage_CMOS(){
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
	float V_ref = 3.3;  // This is known for each micro controller from data
 8003bce:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <Measurement_of_ADC_Voltage_CMOS+0x58>)
 8003bd0:	60fb      	str	r3, [r7, #12]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <Measurement_of_ADC_Voltage_CMOS+0x5c>)
 8003bd4:	60bb      	str	r3, [r7, #8]
		float V_stepSize = V_ref / ADC_resolution;
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7fc fdef 	bl	80007bc <__aeabi_fdiv>
 8003bde:	1c03      	adds	r3, r0, #0
 8003be0:	607b      	str	r3, [r7, #4]
		// ADC
	    /* Start ADC Conversion for ADC1 */
	    ADC_Select_VoltageCMOS();
 8003be2:	f000 f8cb 	bl	8003d7c <ADC_Select_VoltageCMOS>
	    HAL_ADC_Start(&hadc);
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <Measurement_of_ADC_Voltage_CMOS+0x60>)
 8003be8:	0018      	movs	r0, r3
 8003bea:	f000 fef5 	bl	80049d8 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8003bee:	2301      	movs	r3, #1
 8003bf0:	425a      	negs	r2, r3
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <Measurement_of_ADC_Voltage_CMOS+0x60>)
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 ff82 	bl	8004b00 <HAL_ADC_PollForConversion>
 8003bfc:	1e03      	subs	r3, r0, #0
 8003bfe:	d106      	bne.n	8003c0e <Measurement_of_ADC_Voltage_CMOS+0x46>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc);
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <Measurement_of_ADC_Voltage_CMOS+0x60>)
 8003c02:	0018      	movs	r0, r3
 8003c04:	f001 f818 	bl	8004c38 <HAL_ADC_GetValue>
 8003c08:	0002      	movs	r2, r0
 8003c0a:	1cbb      	adds	r3, r7, #2
 8003c0c:	801a      	strh	r2, [r3, #0]
	       }
	    HAL_ADC_Stop(&hadc);
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <Measurement_of_ADC_Voltage_CMOS+0x60>)
 8003c10:	0018      	movs	r0, r3
 8003c12:	f000 ff35 	bl	8004a80 <HAL_ADC_Stop>
}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b004      	add	sp, #16
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	40533333 	.word	0x40533333
 8003c24:	457ff000 	.word	0x457ff000
 8003c28:	20000210 	.word	0x20000210

08003c2c <Measurement_of_ADC_Current_18650>:

void Measurement_of_ADC_Current_18650(){
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
	float V_ref = 3.3;  // This is known for each micro controller from data
 8003c32:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <Measurement_of_ADC_Current_18650+0x74>)
 8003c34:	60fb      	str	r3, [r7, #12]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8003c36:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <Measurement_of_ADC_Current_18650+0x78>)
 8003c38:	60bb      	str	r3, [r7, #8]
		float V_stepSize = V_ref / ADC_resolution;
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7fc fdbd 	bl	80007bc <__aeabi_fdiv>
 8003c42:	1c03      	adds	r3, r0, #0
 8003c44:	607b      	str	r3, [r7, #4]
		// ADC
	    /* Start ADC Conversion for ADC1 */
	    ADC_Select_Current18650();
 8003c46:	f000 f8bd 	bl	8003dc4 <ADC_Select_Current18650>
	    HAL_ADC_Start(&hadc);
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <Measurement_of_ADC_Current_18650+0x7c>)
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f000 fec3 	bl	80049d8 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8003c52:	2301      	movs	r3, #1
 8003c54:	425a      	negs	r2, r3
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <Measurement_of_ADC_Current_18650+0x7c>)
 8003c58:	0011      	movs	r1, r2
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 ff50 	bl	8004b00 <HAL_ADC_PollForConversion>
 8003c60:	1e03      	subs	r3, r0, #0
 8003c62:	d114      	bne.n	8003c8e <Measurement_of_ADC_Current_18650+0x62>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc);
 8003c64:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <Measurement_of_ADC_Current_18650+0x7c>)
 8003c66:	0018      	movs	r0, r3
 8003c68:	f000 ffe6 	bl	8004c38 <HAL_ADC_GetValue>
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	1cbb      	adds	r3, r7, #2
 8003c70:	801a      	strh	r2, [r3, #0]
	           C_18650 = ((rawValue1 * V_stepSize));
 8003c72:	1cbb      	adds	r3, r7, #2
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7fd f808 	bl	8000c8c <__aeabi_i2f>
 8003c7c:	1c03      	adds	r3, r0, #0
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	1c18      	adds	r0, r3, #0
 8003c82:	f7fc feb5 	bl	80009f0 <__aeabi_fmul>
 8003c86:	1c03      	adds	r3, r0, #0
 8003c88:	1c1a      	adds	r2, r3, #0
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <Measurement_of_ADC_Current_18650+0x80>)
 8003c8c:	601a      	str	r2, [r3, #0]
	        		   //50)/.0299562); //I_load = ((V_ADC / 50 gain) / .03 calibrated shunt)
	       }
	    HAL_ADC_Stop(&hadc);
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <Measurement_of_ADC_Current_18650+0x7c>)
 8003c90:	0018      	movs	r0, r3
 8003c92:	f000 fef5 	bl	8004a80 <HAL_ADC_Stop>
}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b004      	add	sp, #16
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	40533333 	.word	0x40533333
 8003ca4:	457ff000 	.word	0x457ff000
 8003ca8:	20000210 	.word	0x20000210
 8003cac:	200002d0 	.word	0x200002d0

08003cb0 <Measurement_of_ADC_Current_CMOS>:

void Measurement_of_ADC_Current_CMOS(){
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
	float V_ref = 3.3;  // This is known for each micro controller from data
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <Measurement_of_ADC_Current_CMOS+0x74>)
 8003cb8:	60fb      	str	r3, [r7, #12]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8003cba:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <Measurement_of_ADC_Current_CMOS+0x78>)
 8003cbc:	60bb      	str	r3, [r7, #8]
		float V_stepSize = V_ref / ADC_resolution;
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f7fc fd7b 	bl	80007bc <__aeabi_fdiv>
 8003cc6:	1c03      	adds	r3, r0, #0
 8003cc8:	607b      	str	r3, [r7, #4]
		// ADC
	    /* Start ADC Conversion for ADC1 */
	    ADC_Select_CurrentCMOS();
 8003cca:	f000 f89f 	bl	8003e0c <ADC_Select_CurrentCMOS>
	    HAL_ADC_Start(&hadc);
 8003cce:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <Measurement_of_ADC_Current_CMOS+0x7c>)
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f000 fe81 	bl	80049d8 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	425a      	negs	r2, r3
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <Measurement_of_ADC_Current_CMOS+0x7c>)
 8003cdc:	0011      	movs	r1, r2
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f000 ff0e 	bl	8004b00 <HAL_ADC_PollForConversion>
 8003ce4:	1e03      	subs	r3, r0, #0
 8003ce6:	d114      	bne.n	8003d12 <Measurement_of_ADC_Current_CMOS+0x62>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc);
 8003ce8:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <Measurement_of_ADC_Current_CMOS+0x7c>)
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 ffa4 	bl	8004c38 <HAL_ADC_GetValue>
 8003cf0:	0002      	movs	r2, r0
 8003cf2:	1cbb      	adds	r3, r7, #2
 8003cf4:	801a      	strh	r2, [r3, #0]
	           C_CMOS = ((rawValue1 * V_stepSize));
 8003cf6:	1cbb      	adds	r3, r7, #2
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f7fc ffc6 	bl	8000c8c <__aeabi_i2f>
 8003d00:	1c03      	adds	r3, r0, #0
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	1c18      	adds	r0, r3, #0
 8003d06:	f7fc fe73 	bl	80009f0 <__aeabi_fmul>
 8003d0a:	1c03      	adds	r3, r0, #0
 8003d0c:	1c1a      	adds	r2, r3, #0
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <Measurement_of_ADC_Current_CMOS+0x80>)
 8003d10:	601a      	str	r2, [r3, #0]
	        		   ///20)/4.713492); // I_load = (( V_ADC / 20 Gain ) / 4.71 calibrated shunt )
	       }
	    HAL_ADC_Stop(&hadc);
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <Measurement_of_ADC_Current_CMOS+0x7c>)
 8003d14:	0018      	movs	r0, r3
 8003d16:	f000 feb3 	bl	8004a80 <HAL_ADC_Stop>
}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b004      	add	sp, #16
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	40533333 	.word	0x40533333
 8003d28:	457ff000 	.word	0x457ff000
 8003d2c:	20000210 	.word	0x20000210
 8003d30:	200002cc 	.word	0x200002cc

08003d34 <ADC_Select_Voltage18650>:


void ADC_Select_Voltage18650(void){
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 8003d3a:	003b      	movs	r3, r7
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	2308      	movs	r3, #8
 8003d40:	001a      	movs	r2, r3
 8003d42:	2100      	movs	r1, #0
 8003d44:	f007 f80a 	bl	800ad5c <memset>
sConfig.Channel = ADC_CHANNEL_15;
 8003d48:	003b      	movs	r3, r7
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <ADC_Select_Voltage18650+0x40>)
 8003d4c:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003d4e:	003b      	movs	r3, r7
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	0152      	lsls	r2, r2, #5
 8003d54:	605a      	str	r2, [r3, #4]
if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003d56:	003a      	movs	r2, r7
 8003d58:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <ADC_Select_Voltage18650+0x44>)
 8003d5a:	0011      	movs	r1, r2
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f000 ff77 	bl	8004c50 <HAL_ADC_ConfigChannel>
 8003d62:	1e03      	subs	r3, r0, #0
 8003d64:	d001      	beq.n	8003d6a <ADC_Select_Voltage18650+0x36>
{
  Error_Handler();
 8003d66:	f000 fa25 	bl	80041b4 <Error_Handler>
}
}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b002      	add	sp, #8
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	3c008000 	.word	0x3c008000
 8003d78:	20000210 	.word	0x20000210

08003d7c <ADC_Select_VoltageCMOS>:

void ADC_Select_VoltageCMOS(void){
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 8003d82:	003b      	movs	r3, r7
 8003d84:	0018      	movs	r0, r3
 8003d86:	2308      	movs	r3, #8
 8003d88:	001a      	movs	r2, r3
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	f006 ffe6 	bl	800ad5c <memset>
sConfig.Channel = ADC_CHANNEL_13;
 8003d90:	003b      	movs	r3, r7
 8003d92:	4a0a      	ldr	r2, [pc, #40]	; (8003dbc <ADC_Select_VoltageCMOS+0x40>)
 8003d94:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003d96:	003b      	movs	r3, r7
 8003d98:	2280      	movs	r2, #128	; 0x80
 8003d9a:	0152      	lsls	r2, r2, #5
 8003d9c:	605a      	str	r2, [r3, #4]
if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003d9e:	003a      	movs	r2, r7
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <ADC_Select_VoltageCMOS+0x44>)
 8003da2:	0011      	movs	r1, r2
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 ff53 	bl	8004c50 <HAL_ADC_ConfigChannel>
 8003daa:	1e03      	subs	r3, r0, #0
 8003dac:	d001      	beq.n	8003db2 <ADC_Select_VoltageCMOS+0x36>
{
Error_Handler();
 8003dae:	f000 fa01 	bl	80041b4 <Error_Handler>
}

}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b002      	add	sp, #8
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	34002000 	.word	0x34002000
 8003dc0:	20000210 	.word	0x20000210

08003dc4 <ADC_Select_Current18650>:

void ADC_Select_Current18650(void){
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 8003dca:	003b      	movs	r3, r7
 8003dcc:	0018      	movs	r0, r3
 8003dce:	2308      	movs	r3, #8
 8003dd0:	001a      	movs	r2, r3
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	f006 ffc2 	bl	800ad5c <memset>
sConfig.Channel = ADC_CHANNEL_9;
 8003dd8:	003b      	movs	r3, r7
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <ADC_Select_Current18650+0x40>)
 8003ddc:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003dde:	003b      	movs	r3, r7
 8003de0:	2280      	movs	r2, #128	; 0x80
 8003de2:	0152      	lsls	r2, r2, #5
 8003de4:	605a      	str	r2, [r3, #4]
if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003de6:	003a      	movs	r2, r7
 8003de8:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <ADC_Select_Current18650+0x44>)
 8003dea:	0011      	movs	r1, r2
 8003dec:	0018      	movs	r0, r3
 8003dee:	f000 ff2f 	bl	8004c50 <HAL_ADC_ConfigChannel>
 8003df2:	1e03      	subs	r3, r0, #0
 8003df4:	d001      	beq.n	8003dfa <ADC_Select_Current18650+0x36>
{
	    Error_Handler();
 8003df6:	f000 f9dd 	bl	80041b4 <Error_Handler>
}

}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	24000200 	.word	0x24000200
 8003e08:	20000210 	.word	0x20000210

08003e0c <ADC_Select_CurrentCMOS>:

void ADC_Select_CurrentCMOS(void){
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 8003e12:	003b      	movs	r3, r7
 8003e14:	0018      	movs	r0, r3
 8003e16:	2308      	movs	r3, #8
 8003e18:	001a      	movs	r2, r3
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	f006 ff9e 	bl	800ad5c <memset>
sConfig.Channel = ADC_CHANNEL_12;
 8003e20:	003b      	movs	r3, r7
 8003e22:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <ADC_Select_CurrentCMOS+0x40>)
 8003e24:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003e26:	003b      	movs	r3, r7
 8003e28:	2280      	movs	r2, #128	; 0x80
 8003e2a:	0152      	lsls	r2, r2, #5
 8003e2c:	605a      	str	r2, [r3, #4]
if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003e2e:	003a      	movs	r2, r7
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <ADC_Select_CurrentCMOS+0x44>)
 8003e32:	0011      	movs	r1, r2
 8003e34:	0018      	movs	r0, r3
 8003e36:	f000 ff0b 	bl	8004c50 <HAL_ADC_ConfigChannel>
 8003e3a:	1e03      	subs	r3, r0, #0
 8003e3c:	d001      	beq.n	8003e42 <ADC_Select_CurrentCMOS+0x36>
{
Error_Handler();
 8003e3e:	f000 f9b9 	bl	80041b4 <Error_Handler>
}

}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b002      	add	sp, #8
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	30001000 	.word	0x30001000
 8003e50:	20000210 	.word	0x20000210

08003e54 <readNumber>:

void readNumber() {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003e58:	4bd3      	ldr	r3, [pc, #844]	; (80041a8 <readNumber+0x354>)
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f001 facd 	bl	80053fc <HAL_GPIO_ReadPin>
 8003e62:	1e03      	subs	r3, r0, #0
 8003e64:	d12b      	bne.n	8003ebe <readNumber+0x6a>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003e66:	4bd0      	ldr	r3, [pc, #832]	; (80041a8 <readNumber+0x354>)
 8003e68:	2102      	movs	r1, #2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f001 fac6 	bl	80053fc <HAL_GPIO_ReadPin>
 8003e70:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003e72:	d124      	bne.n	8003ebe <readNumber+0x6a>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003e74:	4bcd      	ldr	r3, [pc, #820]	; (80041ac <readNumber+0x358>)
 8003e76:	2101      	movs	r1, #1
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f001 fabf 	bl	80053fc <HAL_GPIO_ReadPin>
 8003e7e:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003e80:	d11d      	bne.n	8003ebe <readNumber+0x6a>
		HAL_Delay(5);
 8003e82:	2005      	movs	r0, #5
 8003e84:	f000 fc10 	bl	80046a8 <HAL_Delay>
		valueToAdjust = 0;
 8003e88:	4bc9      	ldr	r3, [pc, #804]	; (80041b0 <readNumber+0x35c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
		// Set LED to Off
		HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	0059      	lsls	r1, r3, #1
 8003e92:	23a0      	movs	r3, #160	; 0xa0
 8003e94:	05db      	lsls	r3, r3, #23
 8003e96:	2200      	movs	r2, #0
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f001 facc 	bl	8005436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	0099      	lsls	r1, r3, #2
 8003ea2:	23a0      	movs	r3, #160	; 0xa0
 8003ea4:	05db      	lsls	r3, r3, #23
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f001 fac4 	bl	8005436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	00d9      	lsls	r1, r3, #3
 8003eb2:	23a0      	movs	r3, #160	; 0xa0
 8003eb4:	05db      	lsls	r3, r3, #23
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f001 fabc 	bl	8005436 <HAL_GPIO_WritePin>

		}

	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003ebe:	4bba      	ldr	r3, [pc, #744]	; (80041a8 <readNumber+0x354>)
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f001 fa9a 	bl	80053fc <HAL_GPIO_ReadPin>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d12b      	bne.n	8003f26 <readNumber+0xd2>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003ece:	4bb6      	ldr	r3, [pc, #728]	; (80041a8 <readNumber+0x354>)
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f001 fa92 	bl	80053fc <HAL_GPIO_ReadPin>
 8003ed8:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003eda:	d124      	bne.n	8003f26 <readNumber+0xd2>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003edc:	4bb3      	ldr	r3, [pc, #716]	; (80041ac <readNumber+0x358>)
 8003ede:	2101      	movs	r1, #1
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f001 fa8b 	bl	80053fc <HAL_GPIO_ReadPin>
 8003ee6:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003ee8:	d11d      	bne.n	8003f26 <readNumber+0xd2>
		HAL_Delay(5);
 8003eea:	2005      	movs	r0, #5
 8003eec:	f000 fbdc 	bl	80046a8 <HAL_Delay>
		valueToAdjust = 1;
 8003ef0:	4baf      	ldr	r3, [pc, #700]	; (80041b0 <readNumber+0x35c>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
		// Set Red
		HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	0059      	lsls	r1, r3, #1
 8003efa:	23a0      	movs	r3, #160	; 0xa0
 8003efc:	05db      	lsls	r3, r3, #23
 8003efe:	2201      	movs	r2, #1
 8003f00:	0018      	movs	r0, r3
 8003f02:	f001 fa98 	bl	8005436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	0099      	lsls	r1, r3, #2
 8003f0a:	23a0      	movs	r3, #160	; 0xa0
 8003f0c:	05db      	lsls	r3, r3, #23
 8003f0e:	2200      	movs	r2, #0
 8003f10:	0018      	movs	r0, r3
 8003f12:	f001 fa90 	bl	8005436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	00d9      	lsls	r1, r3, #3
 8003f1a:	23a0      	movs	r3, #160	; 0xa0
 8003f1c:	05db      	lsls	r3, r3, #23
 8003f1e:	2200      	movs	r2, #0
 8003f20:	0018      	movs	r0, r3
 8003f22:	f001 fa88 	bl	8005436 <HAL_GPIO_WritePin>

	}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003f26:	4ba0      	ldr	r3, [pc, #640]	; (80041a8 <readNumber+0x354>)
 8003f28:	2101      	movs	r1, #1
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f001 fa66 	bl	80053fc <HAL_GPIO_ReadPin>
 8003f30:	1e03      	subs	r3, r0, #0
 8003f32:	d12c      	bne.n	8003f8e <readNumber+0x13a>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003f34:	4b9c      	ldr	r3, [pc, #624]	; (80041a8 <readNumber+0x354>)
 8003f36:	2102      	movs	r1, #2
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f001 fa5f 	bl	80053fc <HAL_GPIO_ReadPin>
 8003f3e:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d124      	bne.n	8003f8e <readNumber+0x13a>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003f44:	4b99      	ldr	r3, [pc, #612]	; (80041ac <readNumber+0x358>)
 8003f46:	2101      	movs	r1, #1
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f001 fa57 	bl	80053fc <HAL_GPIO_ReadPin>
 8003f4e:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003f50:	d11d      	bne.n	8003f8e <readNumber+0x13a>
		HAL_Delay(5);
 8003f52:	2005      	movs	r0, #5
 8003f54:	f000 fba8 	bl	80046a8 <HAL_Delay>
		valueToAdjust = 2;
 8003f58:	4b95      	ldr	r3, [pc, #596]	; (80041b0 <readNumber+0x35c>)
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	601a      	str	r2, [r3, #0]
		// Set Yellow
		HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	0059      	lsls	r1, r3, #1
 8003f62:	23a0      	movs	r3, #160	; 0xa0
 8003f64:	05db      	lsls	r3, r3, #23
 8003f66:	2201      	movs	r2, #1
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f001 fa64 	bl	8005436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	0099      	lsls	r1, r3, #2
 8003f72:	23a0      	movs	r3, #160	; 0xa0
 8003f74:	05db      	lsls	r3, r3, #23
 8003f76:	2201      	movs	r2, #1
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f001 fa5c 	bl	8005436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	00d9      	lsls	r1, r3, #3
 8003f82:	23a0      	movs	r3, #160	; 0xa0
 8003f84:	05db      	lsls	r3, r3, #23
 8003f86:	2200      	movs	r2, #0
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f001 fa54 	bl	8005436 <HAL_GPIO_WritePin>

	}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003f8e:	4b86      	ldr	r3, [pc, #536]	; (80041a8 <readNumber+0x354>)
 8003f90:	2101      	movs	r1, #1
 8003f92:	0018      	movs	r0, r3
 8003f94:	f001 fa32 	bl	80053fc <HAL_GPIO_ReadPin>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d12c      	bne.n	8003ff8 <readNumber+0x1a4>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003f9e:	4b82      	ldr	r3, [pc, #520]	; (80041a8 <readNumber+0x354>)
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f001 fa2a 	bl	80053fc <HAL_GPIO_ReadPin>
 8003fa8:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d124      	bne.n	8003ff8 <readNumber+0x1a4>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003fae:	4b7f      	ldr	r3, [pc, #508]	; (80041ac <readNumber+0x358>)
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f001 fa22 	bl	80053fc <HAL_GPIO_ReadPin>
 8003fb8:	1e03      	subs	r3, r0, #0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003fba:	d11d      	bne.n	8003ff8 <readNumber+0x1a4>
			HAL_Delay(5);
 8003fbc:	2005      	movs	r0, #5
 8003fbe:	f000 fb73 	bl	80046a8 <HAL_Delay>
			valueToAdjust = 3;
 8003fc2:	4b7b      	ldr	r3, [pc, #492]	; (80041b0 <readNumber+0x35c>)
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	601a      	str	r2, [r3, #0]
			// Set Green
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	0059      	lsls	r1, r3, #1
 8003fcc:	23a0      	movs	r3, #160	; 0xa0
 8003fce:	05db      	lsls	r3, r3, #23
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f001 fa2f 	bl	8005436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	0099      	lsls	r1, r3, #2
 8003fdc:	23a0      	movs	r3, #160	; 0xa0
 8003fde:	05db      	lsls	r3, r3, #23
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f001 fa27 	bl	8005436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	00d9      	lsls	r1, r3, #3
 8003fec:	23a0      	movs	r3, #160	; 0xa0
 8003fee:	05db      	lsls	r3, r3, #23
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f001 fa1f 	bl	8005436 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003ff8:	4b6b      	ldr	r3, [pc, #428]	; (80041a8 <readNumber+0x354>)
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f001 f9fd 	bl	80053fc <HAL_GPIO_ReadPin>
 8004002:	1e03      	subs	r3, r0, #0
 8004004:	d12c      	bne.n	8004060 <readNumber+0x20c>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8004006:	4b68      	ldr	r3, [pc, #416]	; (80041a8 <readNumber+0x354>)
 8004008:	2102      	movs	r1, #2
 800400a:	0018      	movs	r0, r3
 800400c:	f001 f9f6 	bl	80053fc <HAL_GPIO_ReadPin>
 8004010:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8004012:	d125      	bne.n	8004060 <readNumber+0x20c>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8004014:	4b65      	ldr	r3, [pc, #404]	; (80041ac <readNumber+0x358>)
 8004016:	2101      	movs	r1, #1
 8004018:	0018      	movs	r0, r3
 800401a:	f001 f9ef 	bl	80053fc <HAL_GPIO_ReadPin>
 800401e:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8004020:	2b01      	cmp	r3, #1
 8004022:	d11d      	bne.n	8004060 <readNumber+0x20c>
			HAL_Delay(5);
 8004024:	2005      	movs	r0, #5
 8004026:	f000 fb3f 	bl	80046a8 <HAL_Delay>
			valueToAdjust = 4;
 800402a:	4b61      	ldr	r3, [pc, #388]	; (80041b0 <readNumber+0x35c>)
 800402c:	2204      	movs	r2, #4
 800402e:	601a      	str	r2, [r3, #0]
			// Set Cyan
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	0059      	lsls	r1, r3, #1
 8004034:	23a0      	movs	r3, #160	; 0xa0
 8004036:	05db      	lsls	r3, r3, #23
 8004038:	2200      	movs	r2, #0
 800403a:	0018      	movs	r0, r3
 800403c:	f001 f9fb 	bl	8005436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	0099      	lsls	r1, r3, #2
 8004044:	23a0      	movs	r3, #160	; 0xa0
 8004046:	05db      	lsls	r3, r3, #23
 8004048:	2201      	movs	r2, #1
 800404a:	0018      	movs	r0, r3
 800404c:	f001 f9f3 	bl	8005436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	00d9      	lsls	r1, r3, #3
 8004054:	23a0      	movs	r3, #160	; 0xa0
 8004056:	05db      	lsls	r3, r3, #23
 8004058:	2201      	movs	r2, #1
 800405a:	0018      	movs	r0, r3
 800405c:	f001 f9eb 	bl	8005436 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8004060:	4b51      	ldr	r3, [pc, #324]	; (80041a8 <readNumber+0x354>)
 8004062:	2101      	movs	r1, #1
 8004064:	0018      	movs	r0, r3
 8004066:	f001 f9c9 	bl	80053fc <HAL_GPIO_ReadPin>
 800406a:	0003      	movs	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d12c      	bne.n	80040ca <readNumber+0x276>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8004070:	4b4d      	ldr	r3, [pc, #308]	; (80041a8 <readNumber+0x354>)
 8004072:	2102      	movs	r1, #2
 8004074:	0018      	movs	r0, r3
 8004076:	f001 f9c1 	bl	80053fc <HAL_GPIO_ReadPin>
 800407a:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 800407c:	d125      	bne.n	80040ca <readNumber+0x276>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 800407e:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <readNumber+0x358>)
 8004080:	2101      	movs	r1, #1
 8004082:	0018      	movs	r0, r3
 8004084:	f001 f9ba 	bl	80053fc <HAL_GPIO_ReadPin>
 8004088:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 800408a:	2b01      	cmp	r3, #1
 800408c:	d11d      	bne.n	80040ca <readNumber+0x276>
			HAL_Delay(5);
 800408e:	2005      	movs	r0, #5
 8004090:	f000 fb0a 	bl	80046a8 <HAL_Delay>
			valueToAdjust = 5;
 8004094:	4b46      	ldr	r3, [pc, #280]	; (80041b0 <readNumber+0x35c>)
 8004096:	2205      	movs	r2, #5
 8004098:	601a      	str	r2, [r3, #0]
			// Set Blue
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	0059      	lsls	r1, r3, #1
 800409e:	23a0      	movs	r3, #160	; 0xa0
 80040a0:	05db      	lsls	r3, r3, #23
 80040a2:	2200      	movs	r2, #0
 80040a4:	0018      	movs	r0, r3
 80040a6:	f001 f9c6 	bl	8005436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	0099      	lsls	r1, r3, #2
 80040ae:	23a0      	movs	r3, #160	; 0xa0
 80040b0:	05db      	lsls	r3, r3, #23
 80040b2:	2200      	movs	r2, #0
 80040b4:	0018      	movs	r0, r3
 80040b6:	f001 f9be 	bl	8005436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	00d9      	lsls	r1, r3, #3
 80040be:	23a0      	movs	r3, #160	; 0xa0
 80040c0:	05db      	lsls	r3, r3, #23
 80040c2:	2201      	movs	r2, #1
 80040c4:	0018      	movs	r0, r3
 80040c6:	f001 f9b6 	bl	8005436 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 80040ca:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <readNumber+0x354>)
 80040cc:	2101      	movs	r1, #1
 80040ce:	0018      	movs	r0, r3
 80040d0:	f001 f994 	bl	80053fc <HAL_GPIO_ReadPin>
 80040d4:	1e03      	subs	r3, r0, #0
 80040d6:	d12d      	bne.n	8004134 <readNumber+0x2e0>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80040d8:	4b33      	ldr	r3, [pc, #204]	; (80041a8 <readNumber+0x354>)
 80040da:	2102      	movs	r1, #2
 80040dc:	0018      	movs	r0, r3
 80040de:	f001 f98d 	bl	80053fc <HAL_GPIO_ReadPin>
 80040e2:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d125      	bne.n	8004134 <readNumber+0x2e0>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 80040e8:	4b30      	ldr	r3, [pc, #192]	; (80041ac <readNumber+0x358>)
 80040ea:	2101      	movs	r1, #1
 80040ec:	0018      	movs	r0, r3
 80040ee:	f001 f985 	bl	80053fc <HAL_GPIO_ReadPin>
 80040f2:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d11d      	bne.n	8004134 <readNumber+0x2e0>
			HAL_Delay(5);
 80040f8:	2005      	movs	r0, #5
 80040fa:	f000 fad5 	bl	80046a8 <HAL_Delay>
			valueToAdjust = 6;
 80040fe:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <readNumber+0x35c>)
 8004100:	2206      	movs	r2, #6
 8004102:	601a      	str	r2, [r3, #0]
			// Set Magenta
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	0059      	lsls	r1, r3, #1
 8004108:	23a0      	movs	r3, #160	; 0xa0
 800410a:	05db      	lsls	r3, r3, #23
 800410c:	2201      	movs	r2, #1
 800410e:	0018      	movs	r0, r3
 8004110:	f001 f991 	bl	8005436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	0099      	lsls	r1, r3, #2
 8004118:	23a0      	movs	r3, #160	; 0xa0
 800411a:	05db      	lsls	r3, r3, #23
 800411c:	2200      	movs	r2, #0
 800411e:	0018      	movs	r0, r3
 8004120:	f001 f989 	bl	8005436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	00d9      	lsls	r1, r3, #3
 8004128:	23a0      	movs	r3, #160	; 0xa0
 800412a:	05db      	lsls	r3, r3, #23
 800412c:	2201      	movs	r2, #1
 800412e:	0018      	movs	r0, r3
 8004130:	f001 f981 	bl	8005436 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8004134:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <readNumber+0x354>)
 8004136:	2101      	movs	r1, #1
 8004138:	0018      	movs	r0, r3
 800413a:	f001 f95f 	bl	80053fc <HAL_GPIO_ReadPin>
 800413e:	0003      	movs	r3, r0
 8004140:	2b01      	cmp	r3, #1
 8004142:	d12d      	bne.n	80041a0 <readNumber+0x34c>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8004144:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <readNumber+0x354>)
 8004146:	2102      	movs	r1, #2
 8004148:	0018      	movs	r0, r3
 800414a:	f001 f957 	bl	80053fc <HAL_GPIO_ReadPin>
 800414e:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8004150:	2b01      	cmp	r3, #1
 8004152:	d125      	bne.n	80041a0 <readNumber+0x34c>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8004154:	4b15      	ldr	r3, [pc, #84]	; (80041ac <readNumber+0x358>)
 8004156:	2101      	movs	r1, #1
 8004158:	0018      	movs	r0, r3
 800415a:	f001 f94f 	bl	80053fc <HAL_GPIO_ReadPin>
 800415e:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8004160:	2b01      	cmp	r3, #1
 8004162:	d11d      	bne.n	80041a0 <readNumber+0x34c>
			HAL_Delay(5);
 8004164:	2005      	movs	r0, #5
 8004166:	f000 fa9f 	bl	80046a8 <HAL_Delay>
			valueToAdjust = 7;
 800416a:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <readNumber+0x35c>)
 800416c:	2207      	movs	r2, #7
 800416e:	601a      	str	r2, [r3, #0]
			// Set White
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	0059      	lsls	r1, r3, #1
 8004174:	23a0      	movs	r3, #160	; 0xa0
 8004176:	05db      	lsls	r3, r3, #23
 8004178:	2201      	movs	r2, #1
 800417a:	0018      	movs	r0, r3
 800417c:	f001 f95b 	bl	8005436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	0099      	lsls	r1, r3, #2
 8004184:	23a0      	movs	r3, #160	; 0xa0
 8004186:	05db      	lsls	r3, r3, #23
 8004188:	2201      	movs	r2, #1
 800418a:	0018      	movs	r0, r3
 800418c:	f001 f953 	bl	8005436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	00d9      	lsls	r1, r3, #3
 8004194:	23a0      	movs	r3, #160	; 0xa0
 8004196:	05db      	lsls	r3, r3, #23
 8004198:	2201      	movs	r2, #1
 800419a:	0018      	movs	r0, r3
 800419c:	f001 f94b 	bl	8005436 <HAL_GPIO_WritePin>

		}
}
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	50000800 	.word	0x50000800
 80041ac:	50000400 	.word	0x50000400
 80041b0:	200002dc 	.word	0x200002dc

080041b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041b8:	b672      	cpsid	i
}
 80041ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041bc:	e7fe      	b.n	80041bc <Error_Handler+0x8>
	...

080041c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c4:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_MspInit+0x24>)
 80041c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_MspInit+0x24>)
 80041ca:	2101      	movs	r1, #1
 80041cc:	430a      	orrs	r2, r1
 80041ce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <HAL_MspInit+0x24>)
 80041d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_MspInit+0x24>)
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	0549      	lsls	r1, r1, #21
 80041da:	430a      	orrs	r2, r1
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021000 	.word	0x40021000

080041e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b08b      	sub	sp, #44	; 0x2c
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f0:	2414      	movs	r4, #20
 80041f2:	193b      	adds	r3, r7, r4
 80041f4:	0018      	movs	r0, r3
 80041f6:	2314      	movs	r3, #20
 80041f8:	001a      	movs	r2, r3
 80041fa:	2100      	movs	r1, #0
 80041fc:	f006 fdae 	bl	800ad5c <memset>
  if(hadc->Instance==ADC1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2f      	ldr	r2, [pc, #188]	; (80042c4 <HAL_ADC_MspInit+0xdc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d158      	bne.n	80042bc <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800420a:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <HAL_ADC_MspInit+0xe0>)
 800420c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800420e:	4b2e      	ldr	r3, [pc, #184]	; (80042c8 <HAL_ADC_MspInit+0xe0>)
 8004210:	2180      	movs	r1, #128	; 0x80
 8004212:	0089      	lsls	r1, r1, #2
 8004214:	430a      	orrs	r2, r1
 8004216:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004218:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <HAL_ADC_MspInit+0xe0>)
 800421a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421c:	4b2a      	ldr	r3, [pc, #168]	; (80042c8 <HAL_ADC_MspInit+0xe0>)
 800421e:	2104      	movs	r1, #4
 8004220:	430a      	orrs	r2, r1
 8004222:	62da      	str	r2, [r3, #44]	; 0x2c
 8004224:	4b28      	ldr	r3, [pc, #160]	; (80042c8 <HAL_ADC_MspInit+0xe0>)
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	2204      	movs	r2, #4
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004230:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <HAL_ADC_MspInit+0xe0>)
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <HAL_ADC_MspInit+0xe0>)
 8004236:	2101      	movs	r1, #1
 8004238:	430a      	orrs	r2, r1
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c
 800423c:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <HAL_ADC_MspInit+0xe0>)
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	2201      	movs	r2, #1
 8004242:	4013      	ands	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004248:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <HAL_ADC_MspInit+0xe0>)
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <HAL_ADC_MspInit+0xe0>)
 800424e:	2102      	movs	r1, #2
 8004250:	430a      	orrs	r2, r1
 8004252:	62da      	str	r2, [r3, #44]	; 0x2c
 8004254:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <HAL_ADC_MspInit+0xe0>)
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	2202      	movs	r2, #2
 800425a:	4013      	ands	r3, r2
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC_IN13
    PA2     ------> ADC_IN2
    PC5     ------> ADC_IN15
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Current_ADC_CMOS_Pin|Voltage_ADC_CMOS_Pin|Voltage_ADC_18650_Pin;
 8004260:	193b      	adds	r3, r7, r4
 8004262:	222c      	movs	r2, #44	; 0x2c
 8004264:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004266:	193b      	adds	r3, r7, r4
 8004268:	2203      	movs	r2, #3
 800426a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426c:	193b      	adds	r3, r7, r4
 800426e:	2200      	movs	r2, #0
 8004270:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004272:	193b      	adds	r3, r7, r4
 8004274:	4a15      	ldr	r2, [pc, #84]	; (80042cc <HAL_ADC_MspInit+0xe4>)
 8004276:	0019      	movs	r1, r3
 8004278:	0010      	movs	r0, r2
 800427a:	f000 ff41 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800427e:	193b      	adds	r3, r7, r4
 8004280:	2204      	movs	r2, #4
 8004282:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004284:	193b      	adds	r3, r7, r4
 8004286:	2203      	movs	r2, #3
 8004288:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428a:	193b      	adds	r3, r7, r4
 800428c:	2200      	movs	r2, #0
 800428e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004290:	193a      	adds	r2, r7, r4
 8004292:	23a0      	movs	r3, #160	; 0xa0
 8004294:	05db      	lsls	r3, r3, #23
 8004296:	0011      	movs	r1, r2
 8004298:	0018      	movs	r0, r3
 800429a:	f000 ff31 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800429e:	193b      	adds	r3, r7, r4
 80042a0:	2202      	movs	r2, #2
 80042a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042a4:	193b      	adds	r3, r7, r4
 80042a6:	2203      	movs	r2, #3
 80042a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042aa:	193b      	adds	r3, r7, r4
 80042ac:	2200      	movs	r2, #0
 80042ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b0:	193b      	adds	r3, r7, r4
 80042b2:	4a07      	ldr	r2, [pc, #28]	; (80042d0 <HAL_ADC_MspInit+0xe8>)
 80042b4:	0019      	movs	r1, r3
 80042b6:	0010      	movs	r0, r2
 80042b8:	f000 ff22 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b00b      	add	sp, #44	; 0x2c
 80042c2:	bd90      	pop	{r4, r7, pc}
 80042c4:	40012400 	.word	0x40012400
 80042c8:	40021000 	.word	0x40021000
 80042cc:	50000800 	.word	0x50000800
 80042d0:	50000400 	.word	0x50000400

080042d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b089      	sub	sp, #36	; 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042dc:	240c      	movs	r4, #12
 80042de:	193b      	adds	r3, r7, r4
 80042e0:	0018      	movs	r0, r3
 80042e2:	2314      	movs	r3, #20
 80042e4:	001a      	movs	r2, r3
 80042e6:	2100      	movs	r1, #0
 80042e8:	f006 fd38 	bl	800ad5c <memset>
  if(hspi->Instance==SPI1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a18      	ldr	r2, [pc, #96]	; (8004354 <HAL_SPI_MspInit+0x80>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d129      	bne.n	800434a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <HAL_SPI_MspInit+0x84>)
 80042f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fa:	4b17      	ldr	r3, [pc, #92]	; (8004358 <HAL_SPI_MspInit+0x84>)
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	0149      	lsls	r1, r1, #5
 8004300:	430a      	orrs	r2, r1
 8004302:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <HAL_SPI_MspInit+0x84>)
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_SPI_MspInit+0x84>)
 800430a:	2101      	movs	r1, #1
 800430c:	430a      	orrs	r2, r1
 800430e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <HAL_SPI_MspInit+0x84>)
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	2201      	movs	r2, #1
 8004316:	4013      	ands	r3, r2
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800431c:	0021      	movs	r1, r4
 800431e:	187b      	adds	r3, r7, r1
 8004320:	22e0      	movs	r2, #224	; 0xe0
 8004322:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004324:	187b      	adds	r3, r7, r1
 8004326:	2202      	movs	r2, #2
 8004328:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432a:	187b      	adds	r3, r7, r1
 800432c:	2200      	movs	r2, #0
 800432e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004330:	187b      	adds	r3, r7, r1
 8004332:	2203      	movs	r2, #3
 8004334:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004336:	187b      	adds	r3, r7, r1
 8004338:	2200      	movs	r2, #0
 800433a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800433c:	187a      	adds	r2, r7, r1
 800433e:	23a0      	movs	r3, #160	; 0xa0
 8004340:	05db      	lsls	r3, r3, #23
 8004342:	0011      	movs	r1, r2
 8004344:	0018      	movs	r0, r3
 8004346:	f000 fedb 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	46bd      	mov	sp, r7
 800434e:	b009      	add	sp, #36	; 0x24
 8004350:	bd90      	pop	{r4, r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	40013000 	.word	0x40013000
 8004358:	40021000 	.word	0x40021000

0800435c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004360:	e7fe      	b.n	8004360 <NMI_Handler+0x4>

08004362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004366:	e7fe      	b.n	8004366 <HardFault_Handler+0x4>

08004368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	if(Timer1 > 0)
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <PendSV_Handler+0x34>)
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <PendSV_Handler+0x18>
	  Timer1--;
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <PendSV_Handler+0x34>)
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <PendSV_Handler+0x34>)
 800438a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800438c:	4b07      	ldr	r3, [pc, #28]	; (80043ac <PendSV_Handler+0x38>)
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <PendSV_Handler+0x2c>
	  Timer2--;
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <PendSV_Handler+0x38>)
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <PendSV_Handler+0x38>)
 800439e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043a0:	46c0      	nop			; (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	20000208 	.word	0x20000208
 80043ac:	2000020a 	.word	0x2000020a

080043b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043b4:	f000 f95c 	bl	8004670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043b8:	46c0      	nop			; (mov r8, r8)
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	af00      	add	r7, sp, #0
  return 1;
 80043c2:	2301      	movs	r3, #1
}
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <_kill>:

int _kill(int pid, int sig)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043d4:	f006 fd1c 	bl	800ae10 <__errno>
 80043d8:	0003      	movs	r3, r0
 80043da:	2216      	movs	r2, #22
 80043dc:	601a      	str	r2, [r3, #0]
  return -1;
 80043de:	2301      	movs	r3, #1
 80043e0:	425b      	negs	r3, r3
}
 80043e2:	0018      	movs	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b002      	add	sp, #8
 80043e8:	bd80      	pop	{r7, pc}

080043ea <_exit>:

void _exit (int status)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043f2:	2301      	movs	r3, #1
 80043f4:	425a      	negs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	0011      	movs	r1, r2
 80043fa:	0018      	movs	r0, r3
 80043fc:	f7ff ffe5 	bl	80043ca <_kill>
  while (1) {}    /* Make sure we hang here */
 8004400:	e7fe      	b.n	8004400 <_exit+0x16>

08004402 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b086      	sub	sp, #24
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e00a      	b.n	800442a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004414:	e000      	b.n	8004418 <_read+0x16>
 8004416:	bf00      	nop
 8004418:	0001      	movs	r1, r0
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	60ba      	str	r2, [r7, #8]
 8004420:	b2ca      	uxtb	r2, r1
 8004422:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	3301      	adds	r3, #1
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	429a      	cmp	r2, r3
 8004430:	dbf0      	blt.n	8004414 <_read+0x12>
  }

  return len;
 8004432:	687b      	ldr	r3, [r7, #4]
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	b006      	add	sp, #24
 800443a:	bd80      	pop	{r7, pc}

0800443c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e009      	b.n	8004462 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	60ba      	str	r2, [r7, #8]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff fada 	bl	8003a10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	3301      	adds	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	429a      	cmp	r2, r3
 8004468:	dbf1      	blt.n	800444e <_write+0x12>
  }
  return len;
 800446a:	687b      	ldr	r3, [r7, #4]
}
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	b006      	add	sp, #24
 8004472:	bd80      	pop	{r7, pc}

08004474 <_close>:

int _close(int file)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800447c:	2301      	movs	r3, #1
 800447e:	425b      	negs	r3, r3
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	b002      	add	sp, #8
 8004486:	bd80      	pop	{r7, pc}

08004488 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2280      	movs	r2, #128	; 0x80
 8004496:	0192      	lsls	r2, r2, #6
 8004498:	605a      	str	r2, [r3, #4]
  return 0;
 800449a:	2300      	movs	r3, #0
}
 800449c:	0018      	movs	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	b002      	add	sp, #8
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <_isatty>:

int _isatty(int file)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044ac:	2301      	movs	r3, #1
}
 80044ae:	0018      	movs	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b002      	add	sp, #8
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	0018      	movs	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b004      	add	sp, #16
 80044ca:	bd80      	pop	{r7, pc}

080044cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044d4:	4a14      	ldr	r2, [pc, #80]	; (8004528 <_sbrk+0x5c>)
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <_sbrk+0x60>)
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <_sbrk+0x64>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d102      	bne.n	80044ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <_sbrk+0x64>)
 80044ea:	4a12      	ldr	r2, [pc, #72]	; (8004534 <_sbrk+0x68>)
 80044ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044ee:	4b10      	ldr	r3, [pc, #64]	; (8004530 <_sbrk+0x64>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	18d3      	adds	r3, r2, r3
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d207      	bcs.n	800450c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044fc:	f006 fc88 	bl	800ae10 <__errno>
 8004500:	0003      	movs	r3, r0
 8004502:	220c      	movs	r2, #12
 8004504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004506:	2301      	movs	r3, #1
 8004508:	425b      	negs	r3, r3
 800450a:	e009      	b.n	8004520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800450c:	4b08      	ldr	r3, [pc, #32]	; (8004530 <_sbrk+0x64>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004512:	4b07      	ldr	r3, [pc, #28]	; (8004530 <_sbrk+0x64>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	18d2      	adds	r2, r2, r3
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <_sbrk+0x64>)
 800451c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800451e:	68fb      	ldr	r3, [r7, #12]
}
 8004520:	0018      	movs	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	b006      	add	sp, #24
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20005000 	.word	0x20005000
 800452c:	00000400 	.word	0x00000400
 8004530:	200002e0 	.word	0x200002e0
 8004534:	20000670 	.word	0x20000670

08004538 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800453c:	46c0      	nop			; (mov r8, r8)
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004544:	4813      	ldr	r0, [pc, #76]	; (8004594 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004546:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004548:	f7ff fff6 	bl	8004538 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800454c:	4812      	ldr	r0, [pc, #72]	; (8004598 <LoopForever+0x6>)
    LDR R1, [R0]
 800454e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8004550:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8004552:	4a12      	ldr	r2, [pc, #72]	; (800459c <LoopForever+0xa>)
    CMP R1, R2
 8004554:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8004556:	d105      	bne.n	8004564 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8004558:	4811      	ldr	r0, [pc, #68]	; (80045a0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800455a:	4912      	ldr	r1, [pc, #72]	; (80045a4 <LoopForever+0x12>)
    STR R1, [R0]
 800455c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800455e:	4812      	ldr	r0, [pc, #72]	; (80045a8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8004560:	4912      	ldr	r1, [pc, #72]	; (80045ac <LoopForever+0x1a>)
    STR R1, [R0]
 8004562:	6001      	str	r1, [r0, #0]

08004564 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004564:	4812      	ldr	r0, [pc, #72]	; (80045b0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8004566:	4913      	ldr	r1, [pc, #76]	; (80045b4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8004568:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <LoopForever+0x26>)
  movs r3, #0
 800456a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800456c:	e002      	b.n	8004574 <LoopCopyDataInit>

0800456e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800456e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004572:	3304      	adds	r3, #4

08004574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004578:	d3f9      	bcc.n	800456e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800457a:	4a10      	ldr	r2, [pc, #64]	; (80045bc <LoopForever+0x2a>)
  ldr r4, =_ebss
 800457c:	4c10      	ldr	r4, [pc, #64]	; (80045c0 <LoopForever+0x2e>)
  movs r3, #0
 800457e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004580:	e001      	b.n	8004586 <LoopFillZerobss>

08004582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004584:	3204      	adds	r2, #4

08004586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004588:	d3fb      	bcc.n	8004582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800458a:	f006 fc47 	bl	800ae1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800458e:	f7ff f891 	bl	80036b4 <main>

08004592 <LoopForever>:

LoopForever:
    b LoopForever
 8004592:	e7fe      	b.n	8004592 <LoopForever>
   ldr   r0, =_estack
 8004594:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8004598:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800459c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80045a0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80045a4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80045a8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80045ac:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80045b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045b4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80045b8:	0800f160 	.word	0x0800f160
  ldr r2, =_sbss
 80045bc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80045c0:	20000670 	.word	0x20000670

080045c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045c4:	e7fe      	b.n	80045c4 <ADC1_IRQHandler>
	...

080045c8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80045ce:	1dfb      	adds	r3, r7, #7
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <HAL_Init+0x3c>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <HAL_Init+0x3c>)
 80045da:	2140      	movs	r1, #64	; 0x40
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045e0:	2003      	movs	r0, #3
 80045e2:	f000 f811 	bl	8004608 <HAL_InitTick>
 80045e6:	1e03      	subs	r3, r0, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80045ea:	1dfb      	adds	r3, r7, #7
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	e001      	b.n	80045f6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80045f2:	f7ff fde5 	bl	80041c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80045f6:	1dfb      	adds	r3, r7, #7
 80045f8:	781b      	ldrb	r3, [r3, #0]
}
 80045fa:	0018      	movs	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b002      	add	sp, #8
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	40022000 	.word	0x40022000

08004608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004610:	4b14      	ldr	r3, [pc, #80]	; (8004664 <HAL_InitTick+0x5c>)
 8004612:	681c      	ldr	r4, [r3, #0]
 8004614:	4b14      	ldr	r3, [pc, #80]	; (8004668 <HAL_InitTick+0x60>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	0019      	movs	r1, r3
 800461a:	23fa      	movs	r3, #250	; 0xfa
 800461c:	0098      	lsls	r0, r3, #2
 800461e:	f7fb fd8f 	bl	8000140 <__udivsi3>
 8004622:	0003      	movs	r3, r0
 8004624:	0019      	movs	r1, r3
 8004626:	0020      	movs	r0, r4
 8004628:	f7fb fd8a 	bl	8000140 <__udivsi3>
 800462c:	0003      	movs	r3, r0
 800462e:	0018      	movs	r0, r3
 8004630:	f000 fd59 	bl	80050e6 <HAL_SYSTICK_Config>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d001      	beq.n	800463c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e00f      	b.n	800465c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b03      	cmp	r3, #3
 8004640:	d80b      	bhi.n	800465a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	2301      	movs	r3, #1
 8004646:	425b      	negs	r3, r3
 8004648:	2200      	movs	r2, #0
 800464a:	0018      	movs	r0, r3
 800464c:	f000 fd36 	bl	80050bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <HAL_InitTick+0x64>)
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b003      	add	sp, #12
 8004662:	bd90      	pop	{r4, r7, pc}
 8004664:	20000004 	.word	0x20000004
 8004668:	2000000c 	.word	0x2000000c
 800466c:	20000008 	.word	0x20000008

08004670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_IncTick+0x1c>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	001a      	movs	r2, r3
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_IncTick+0x20>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	18d2      	adds	r2, r2, r3
 8004680:	4b03      	ldr	r3, [pc, #12]	; (8004690 <HAL_IncTick+0x20>)
 8004682:	601a      	str	r2, [r3, #0]
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	2000000c 	.word	0x2000000c
 8004690:	200002e4 	.word	0x200002e4

08004694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  return uwTick;
 8004698:	4b02      	ldr	r3, [pc, #8]	; (80046a4 <HAL_GetTick+0x10>)
 800469a:	681b      	ldr	r3, [r3, #0]
}
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	200002e4 	.word	0x200002e4

080046a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046b0:	f7ff fff0 	bl	8004694 <HAL_GetTick>
 80046b4:	0003      	movs	r3, r0
 80046b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3301      	adds	r3, #1
 80046c0:	d005      	beq.n	80046ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <HAL_Delay+0x44>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	001a      	movs	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	189b      	adds	r3, r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	f7ff ffe0 	bl	8004694 <HAL_GetTick>
 80046d4:	0002      	movs	r2, r0
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d8f7      	bhi.n	80046d0 <HAL_Delay+0x28>
  {
  }
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	2000000c 	.word	0x2000000c

080046f0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e159      	b.n	80049b6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2250      	movs	r2, #80	; 0x50
 8004714:	2100      	movs	r1, #0
 8004716:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	0018      	movs	r0, r3
 800471c:	f7ff fd64 	bl	80041e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	2210      	movs	r2, #16
 8004726:	4013      	ands	r3, r2
 8004728:	2b10      	cmp	r3, #16
 800472a:	d005      	beq.n	8004738 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2204      	movs	r2, #4
 8004734:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004736:	d00b      	beq.n	8004750 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	2210      	movs	r2, #16
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2250      	movs	r2, #80	; 0x50
 8004748:	2100      	movs	r1, #0
 800474a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e132      	b.n	80049b6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004754:	4a9a      	ldr	r2, [pc, #616]	; (80049c0 <HAL_ADC_Init+0x2d0>)
 8004756:	4013      	ands	r3, r2
 8004758:	2202      	movs	r2, #2
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2203      	movs	r2, #3
 8004768:	4013      	ands	r3, r2
 800476a:	2b01      	cmp	r3, #1
 800476c:	d108      	bne.n	8004780 <HAL_ADC_Init+0x90>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2201      	movs	r2, #1
 8004776:	4013      	ands	r3, r2
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_ADC_Init+0x90>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_ADC_Init+0x92>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d149      	bne.n	800481a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	23c0      	movs	r3, #192	; 0xc0
 800478c:	061b      	lsls	r3, r3, #24
 800478e:	429a      	cmp	r2, r3
 8004790:	d00b      	beq.n	80047aa <HAL_ADC_Init+0xba>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	2380      	movs	r3, #128	; 0x80
 8004798:	05db      	lsls	r3, r3, #23
 800479a:	429a      	cmp	r2, r3
 800479c:	d005      	beq.n	80047aa <HAL_ADC_Init+0xba>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	2380      	movs	r3, #128	; 0x80
 80047a4:	061b      	lsls	r3, r3, #24
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d111      	bne.n	80047ce <HAL_ADC_Init+0xde>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	0092      	lsls	r2, r2, #2
 80047b6:	0892      	lsrs	r2, r2, #2
 80047b8:	611a      	str	r2, [r3, #16]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6919      	ldr	r1, [r3, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	611a      	str	r2, [r3, #16]
 80047cc:	e014      	b.n	80047f8 <HAL_ADC_Init+0x108>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	0092      	lsls	r2, r2, #2
 80047da:	0892      	lsrs	r2, r2, #2
 80047dc:	611a      	str	r2, [r3, #16]
 80047de:	4b79      	ldr	r3, [pc, #484]	; (80049c4 <HAL_ADC_Init+0x2d4>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b78      	ldr	r3, [pc, #480]	; (80049c4 <HAL_ADC_Init+0x2d4>)
 80047e4:	4978      	ldr	r1, [pc, #480]	; (80049c8 <HAL_ADC_Init+0x2d8>)
 80047e6:	400a      	ands	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	4b76      	ldr	r3, [pc, #472]	; (80049c4 <HAL_ADC_Init+0x2d4>)
 80047ec:	6819      	ldr	r1, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	4b74      	ldr	r3, [pc, #464]	; (80049c4 <HAL_ADC_Init+0x2d4>)
 80047f4:	430a      	orrs	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2118      	movs	r1, #24
 8004804:	438a      	bics	r2, r1
 8004806:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68d9      	ldr	r1, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800481a:	4b6a      	ldr	r3, [pc, #424]	; (80049c4 <HAL_ADC_Init+0x2d4>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b69      	ldr	r3, [pc, #420]	; (80049c4 <HAL_ADC_Init+0x2d4>)
 8004820:	496a      	ldr	r1, [pc, #424]	; (80049cc <HAL_ADC_Init+0x2dc>)
 8004822:	400a      	ands	r2, r1
 8004824:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8004826:	4b67      	ldr	r3, [pc, #412]	; (80049c4 <HAL_ADC_Init+0x2d4>)
 8004828:	6819      	ldr	r1, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482e:	065a      	lsls	r2, r3, #25
 8004830:	4b64      	ldr	r3, [pc, #400]	; (80049c4 <HAL_ADC_Init+0x2d4>)
 8004832:	430a      	orrs	r2, r1
 8004834:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	055b      	lsls	r3, r3, #21
 8004840:	4013      	ands	r3, r2
 8004842:	d108      	bne.n	8004856 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2180      	movs	r1, #128	; 0x80
 8004850:	0549      	lsls	r1, r1, #21
 8004852:	430a      	orrs	r2, r1
 8004854:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	495b      	ldr	r1, [pc, #364]	; (80049d0 <HAL_ADC_Init+0x2e0>)
 8004862:	400a      	ands	r2, r1
 8004864:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68d9      	ldr	r1, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d101      	bne.n	800487c <HAL_ADC_Init+0x18c>
 8004878:	2304      	movs	r3, #4
 800487a:	e000      	b.n	800487e <HAL_ADC_Init+0x18e>
 800487c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800487e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2020      	movs	r0, #32
 8004884:	5c1b      	ldrb	r3, [r3, r0]
 8004886:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004888:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	202c      	movs	r0, #44	; 0x2c
 800488e:	5c1b      	ldrb	r3, [r3, r0]
 8004890:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004892:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004898:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80048a0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80048a8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b6:	23c2      	movs	r3, #194	; 0xc2
 80048b8:	33ff      	adds	r3, #255	; 0xff
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d00b      	beq.n	80048d6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68d9      	ldr	r1, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2221      	movs	r2, #33	; 0x21
 80048da:	5c9b      	ldrb	r3, [r3, r2]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d11a      	bne.n	8004916 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	5c9b      	ldrb	r3, [r3, r2]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d109      	bne.n	80048fe <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2180      	movs	r1, #128	; 0x80
 80048f6:	0249      	lsls	r1, r1, #9
 80048f8:	430a      	orrs	r2, r1
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	e00b      	b.n	8004916 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004902:	2220      	movs	r2, #32
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490e:	2201      	movs	r2, #1
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491a:	2b01      	cmp	r3, #1
 800491c:	d11f      	bne.n	800495e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	492a      	ldr	r1, [pc, #168]	; (80049d4 <HAL_ADC_Init+0x2e4>)
 800492a:	400a      	ands	r2, r1
 800492c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6919      	ldr	r1, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800493c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8004942:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2101      	movs	r1, #1
 8004958:	430a      	orrs	r2, r1
 800495a:	611a      	str	r2, [r3, #16]
 800495c:	e00e      	b.n	800497c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2201      	movs	r2, #1
 8004966:	4013      	ands	r3, r2
 8004968:	2b01      	cmp	r3, #1
 800496a:	d107      	bne.n	800497c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2101      	movs	r1, #1
 8004978:	438a      	bics	r2, r1
 800497a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2107      	movs	r1, #7
 8004988:	438a      	bics	r2, r1
 800498a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6959      	ldr	r1, [r3, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	2203      	movs	r2, #3
 80049aa:	4393      	bics	r3, r2
 80049ac:	2201      	movs	r2, #1
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	0018      	movs	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b002      	add	sp, #8
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	fffffefd 	.word	0xfffffefd
 80049c4:	40012708 	.word	0x40012708
 80049c8:	ffc3ffff 	.word	0xffc3ffff
 80049cc:	fdffffff 	.word	0xfdffffff
 80049d0:	fffe0219 	.word	0xfffe0219
 80049d4:	fffffc03 	.word	0xfffffc03

080049d8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80049d8:	b590      	push	{r4, r7, lr}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049e0:	230f      	movs	r3, #15
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2204      	movs	r2, #4
 80049f0:	4013      	ands	r3, r2
 80049f2:	d138      	bne.n	8004a66 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2250      	movs	r2, #80	; 0x50
 80049f8:	5c9b      	ldrb	r3, [r3, r2]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_ADC_Start+0x2a>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e038      	b.n	8004a74 <HAL_ADC_Start+0x9c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2250      	movs	r2, #80	; 0x50
 8004a06:	2101      	movs	r1, #1
 8004a08:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d007      	beq.n	8004a22 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004a12:	230f      	movs	r3, #15
 8004a14:	18fc      	adds	r4, r7, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f000 f981 	bl	8004d20 <ADC_Enable>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004a22:	230f      	movs	r3, #15
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d120      	bne.n	8004a6e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	4a12      	ldr	r2, [pc, #72]	; (8004a7c <HAL_ADC_Start+0xa4>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	2280      	movs	r2, #128	; 0x80
 8004a36:	0052      	lsls	r2, r2, #1
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2250      	movs	r2, #80	; 0x50
 8004a48:	2100      	movs	r1, #0
 8004a4a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	221c      	movs	r2, #28
 8004a52:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2104      	movs	r1, #4
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	e003      	b.n	8004a6e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a66:	230f      	movs	r3, #15
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a6e:	230f      	movs	r3, #15
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	781b      	ldrb	r3, [r3, #0]
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b005      	add	sp, #20
 8004a7a:	bd90      	pop	{r4, r7, pc}
 8004a7c:	fffff0fe 	.word	0xfffff0fe

08004a80 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004a80:	b5b0      	push	{r4, r5, r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a88:	230f      	movs	r3, #15
 8004a8a:	18fb      	adds	r3, r7, r3
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2250      	movs	r2, #80	; 0x50
 8004a94:	5c9b      	ldrb	r3, [r3, r2]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_ADC_Stop+0x1e>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e029      	b.n	8004af2 <HAL_ADC_Stop+0x72>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2250      	movs	r2, #80	; 0x50
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004aa6:	250f      	movs	r5, #15
 8004aa8:	197c      	adds	r4, r7, r5
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0018      	movs	r0, r3
 8004aae:	f000 fa06 	bl	8004ebe <ADC_ConversionStop>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004ab6:	197b      	adds	r3, r7, r5
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d112      	bne.n	8004ae4 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004abe:	197c      	adds	r4, r7, r5
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 f994 	bl	8004df0 <ADC_Disable>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004acc:	197b      	adds	r3, r7, r5
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d107      	bne.n	8004ae4 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	4a08      	ldr	r2, [pc, #32]	; (8004afc <HAL_ADC_Stop+0x7c>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	2201      	movs	r2, #1
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2250      	movs	r2, #80	; 0x50
 8004ae8:	2100      	movs	r1, #0
 8004aea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8004aec:	230f      	movs	r3, #15
 8004aee:	18fb      	adds	r3, r7, r3
 8004af0:	781b      	ldrb	r3, [r3, #0]
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b004      	add	sp, #16
 8004af8:	bdb0      	pop	{r4, r5, r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	fffffefe 	.word	0xfffffefe

08004b00 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d102      	bne.n	8004b20 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e014      	b.n	8004b4a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d10b      	bne.n	8004b46 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b32:	2220      	movs	r2, #32
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2250      	movs	r2, #80	; 0x50
 8004b3e:	2100      	movs	r1, #0
 8004b40:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e072      	b.n	8004c2c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004b46:	230c      	movs	r3, #12
 8004b48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004b4a:	f7ff fda3 	bl	8004694 <HAL_GetTick>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004b52:	e01f      	b.n	8004b94 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	d01c      	beq.n	8004b94 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <HAL_ADC_PollForConversion+0x70>
 8004b60:	f7ff fd98 	bl	8004694 <HAL_GetTick>
 8004b64:	0002      	movs	r2, r0
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d211      	bcs.n	8004b94 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d10b      	bne.n	8004b94 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b80:	2204      	movs	r2, #4
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2250      	movs	r2, #80	; 0x50
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e04b      	b.n	8004c2c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d0d9      	beq.n	8004b54 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba4:	2280      	movs	r2, #128	; 0x80
 8004ba6:	0092      	lsls	r2, r2, #2
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	23c0      	movs	r3, #192	; 0xc0
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d12e      	bne.n	8004c1a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d129      	bne.n	8004c1a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2208      	movs	r2, #8
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d122      	bne.n	8004c1a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2204      	movs	r2, #4
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d110      	bne.n	8004c02 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	210c      	movs	r1, #12
 8004bec:	438a      	bics	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf4:	4a0f      	ldr	r2, [pc, #60]	; (8004c34 <HAL_ADC_PollForConversion+0x134>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54
 8004c00:	e00b      	b.n	8004c1a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	2220      	movs	r2, #32
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c12:	2201      	movs	r2, #1
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	220c      	movs	r2, #12
 8004c28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b004      	add	sp, #16
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	fffffefe 	.word	0xfffffefe

08004c38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004c46:	0018      	movs	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b002      	add	sp, #8
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2250      	movs	r2, #80	; 0x50
 8004c5e:	5c9b      	ldrb	r3, [r3, r2]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x18>
 8004c64:	2302      	movs	r3, #2
 8004c66:	e050      	b.n	8004d0a <HAL_ADC_ConfigChannel+0xba>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2250      	movs	r2, #80	; 0x50
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2204      	movs	r2, #4
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d00b      	beq.n	8004c94 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c80:	2220      	movs	r2, #32
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2250      	movs	r2, #80	; 0x50
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e03a      	b.n	8004d0a <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4a1e      	ldr	r2, [pc, #120]	; (8004d14 <HAL_ADC_ConfigChannel+0xc4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d018      	beq.n	8004cd0 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	035b      	lsls	r3, r3, #13
 8004caa:	0b5a      	lsrs	r2, r3, #13
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	2380      	movs	r3, #128	; 0x80
 8004cba:	029b      	lsls	r3, r3, #10
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d01f      	beq.n	8004d00 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8004cc0:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <HAL_ADC_ConfigChannel+0xc8>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <HAL_ADC_ConfigChannel+0xc8>)
 8004cc6:	2180      	movs	r1, #128	; 0x80
 8004cc8:	03c9      	lsls	r1, r1, #15
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e017      	b.n	8004d00 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	035b      	lsls	r3, r3, #13
 8004cdc:	0b5b      	lsrs	r3, r3, #13
 8004cde:	43d9      	mvns	r1, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	400a      	ands	r2, r1
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	029b      	lsls	r3, r3, #10
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d005      	beq.n	8004d00 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8004cf4:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <HAL_ADC_ConfigChannel+0xc8>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <HAL_ADC_ConfigChannel+0xc8>)
 8004cfa:	4908      	ldr	r1, [pc, #32]	; (8004d1c <HAL_ADC_ConfigChannel+0xcc>)
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2250      	movs	r2, #80	; 0x50
 8004d04:	2100      	movs	r1, #0
 8004d06:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b002      	add	sp, #8
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	00001001 	.word	0x00001001
 8004d18:	40012708 	.word	0x40012708
 8004d1c:	ffbfffff 	.word	0xffbfffff

08004d20 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2203      	movs	r2, #3
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d108      	bne.n	8004d4c <ADC_Enable+0x2c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2201      	movs	r2, #1
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <ADC_Enable+0x2c>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <ADC_Enable+0x2e>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d146      	bne.n	8004de0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	4a24      	ldr	r2, [pc, #144]	; (8004dec <ADC_Enable+0xcc>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d00d      	beq.n	8004d7a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	2210      	movs	r2, #16
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6e:	2201      	movs	r2, #1
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e033      	b.n	8004de2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2101      	movs	r1, #1
 8004d86:	430a      	orrs	r2, r1
 8004d88:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	f000 f8e4 	bl	8004f58 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d90:	f7ff fc80 	bl	8004694 <HAL_GetTick>
 8004d94:	0003      	movs	r3, r0
 8004d96:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004d98:	e01b      	b.n	8004dd2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d9a:	f7ff fc7b 	bl	8004694 <HAL_GetTick>
 8004d9e:	0002      	movs	r2, r0
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b0a      	cmp	r3, #10
 8004da6:	d914      	bls.n	8004dd2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d00d      	beq.n	8004dd2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	2210      	movs	r2, #16
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e007      	b.n	8004de2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d1dc      	bne.n	8004d9a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b004      	add	sp, #16
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	80000017 	.word	0x80000017

08004df0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2203      	movs	r2, #3
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d108      	bne.n	8004e1c <ADC_Disable+0x2c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2201      	movs	r2, #1
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <ADC_Disable+0x2c>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <ADC_Disable+0x2e>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d048      	beq.n	8004eb4 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2205      	movs	r2, #5
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d110      	bne.n	8004e52 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2102      	movs	r1, #2
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	609a      	str	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2203      	movs	r2, #3
 8004e46:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e48:	f7ff fc24 	bl	8004694 <HAL_GetTick>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004e50:	e029      	b.n	8004ea6 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	2210      	movs	r2, #16
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e62:	2201      	movs	r2, #1
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e023      	b.n	8004eb6 <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e6e:	f7ff fc11 	bl	8004694 <HAL_GetTick>
 8004e72:	0002      	movs	r2, r0
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b0a      	cmp	r3, #10
 8004e7a:	d914      	bls.n	8004ea6 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2201      	movs	r2, #1
 8004e84:	4013      	ands	r3, r2
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d10d      	bne.n	8004ea6 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	2210      	movs	r2, #16
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e007      	b.n	8004eb6 <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2201      	movs	r2, #1
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d0dc      	beq.n	8004e6e <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b004      	add	sp, #16
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d03a      	beq.n	8004f4c <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2204      	movs	r2, #4
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d10d      	bne.n	8004f00 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2202      	movs	r2, #2
 8004eec:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8004eee:	d107      	bne.n	8004f00 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2110      	movs	r1, #16
 8004efc:	430a      	orrs	r2, r1
 8004efe:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f00:	f7ff fbc8 	bl	8004694 <HAL_GetTick>
 8004f04:	0003      	movs	r3, r0
 8004f06:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004f08:	e01a      	b.n	8004f40 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004f0a:	f7ff fbc3 	bl	8004694 <HAL_GetTick>
 8004f0e:	0002      	movs	r2, r0
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b0a      	cmp	r3, #10
 8004f16:	d913      	bls.n	8004f40 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2204      	movs	r2, #4
 8004f20:	4013      	ands	r3, r2
 8004f22:	d00d      	beq.n	8004f40 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	2210      	movs	r2, #16
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f34:	2201      	movs	r2, #1
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e006      	b.n	8004f4e <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2204      	movs	r2, #4
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d1de      	bne.n	8004f0a <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b004      	add	sp, #16
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <ADC_DelayMicroSecond+0x38>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	490b      	ldr	r1, [pc, #44]	; (8004f94 <ADC_DelayMicroSecond+0x3c>)
 8004f66:	0018      	movs	r0, r3
 8004f68:	f7fb f8ea 	bl	8000140 <__udivsi3>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	001a      	movs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4353      	muls	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8004f76:	e002      	b.n	8004f7e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f9      	bne.n	8004f78 <ADC_DelayMicroSecond+0x20>
  }
}
 8004f84:	46c0      	nop			; (mov r8, r8)
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b004      	add	sp, #16
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	20000004 	.word	0x20000004
 8004f94:	000f4240 	.word	0x000f4240

08004f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	0002      	movs	r2, r0
 8004fa0:	6039      	str	r1, [r7, #0]
 8004fa2:	1dfb      	adds	r3, r7, #7
 8004fa4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fa6:	1dfb      	adds	r3, r7, #7
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b7f      	cmp	r3, #127	; 0x7f
 8004fac:	d828      	bhi.n	8005000 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fae:	4a2f      	ldr	r2, [pc, #188]	; (800506c <__NVIC_SetPriority+0xd4>)
 8004fb0:	1dfb      	adds	r3, r7, #7
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	b25b      	sxtb	r3, r3
 8004fb6:	089b      	lsrs	r3, r3, #2
 8004fb8:	33c0      	adds	r3, #192	; 0xc0
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	589b      	ldr	r3, [r3, r2]
 8004fbe:	1dfa      	adds	r2, r7, #7
 8004fc0:	7812      	ldrb	r2, [r2, #0]
 8004fc2:	0011      	movs	r1, r2
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	400a      	ands	r2, r1
 8004fc8:	00d2      	lsls	r2, r2, #3
 8004fca:	21ff      	movs	r1, #255	; 0xff
 8004fcc:	4091      	lsls	r1, r2
 8004fce:	000a      	movs	r2, r1
 8004fd0:	43d2      	mvns	r2, r2
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	019b      	lsls	r3, r3, #6
 8004fda:	22ff      	movs	r2, #255	; 0xff
 8004fdc:	401a      	ands	r2, r3
 8004fde:	1dfb      	adds	r3, r7, #7
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	4003      	ands	r3, r0
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fec:	481f      	ldr	r0, [pc, #124]	; (800506c <__NVIC_SetPriority+0xd4>)
 8004fee:	1dfb      	adds	r3, r7, #7
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b25b      	sxtb	r3, r3
 8004ff4:	089b      	lsrs	r3, r3, #2
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	33c0      	adds	r3, #192	; 0xc0
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004ffe:	e031      	b.n	8005064 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005000:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <__NVIC_SetPriority+0xd8>)
 8005002:	1dfb      	adds	r3, r7, #7
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	0019      	movs	r1, r3
 8005008:	230f      	movs	r3, #15
 800500a:	400b      	ands	r3, r1
 800500c:	3b08      	subs	r3, #8
 800500e:	089b      	lsrs	r3, r3, #2
 8005010:	3306      	adds	r3, #6
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	18d3      	adds	r3, r2, r3
 8005016:	3304      	adds	r3, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	1dfa      	adds	r2, r7, #7
 800501c:	7812      	ldrb	r2, [r2, #0]
 800501e:	0011      	movs	r1, r2
 8005020:	2203      	movs	r2, #3
 8005022:	400a      	ands	r2, r1
 8005024:	00d2      	lsls	r2, r2, #3
 8005026:	21ff      	movs	r1, #255	; 0xff
 8005028:	4091      	lsls	r1, r2
 800502a:	000a      	movs	r2, r1
 800502c:	43d2      	mvns	r2, r2
 800502e:	401a      	ands	r2, r3
 8005030:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	22ff      	movs	r2, #255	; 0xff
 8005038:	401a      	ands	r2, r3
 800503a:	1dfb      	adds	r3, r7, #7
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	0018      	movs	r0, r3
 8005040:	2303      	movs	r3, #3
 8005042:	4003      	ands	r3, r0
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005048:	4809      	ldr	r0, [pc, #36]	; (8005070 <__NVIC_SetPriority+0xd8>)
 800504a:	1dfb      	adds	r3, r7, #7
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	001c      	movs	r4, r3
 8005050:	230f      	movs	r3, #15
 8005052:	4023      	ands	r3, r4
 8005054:	3b08      	subs	r3, #8
 8005056:	089b      	lsrs	r3, r3, #2
 8005058:	430a      	orrs	r2, r1
 800505a:	3306      	adds	r3, #6
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	18c3      	adds	r3, r0, r3
 8005060:	3304      	adds	r3, #4
 8005062:	601a      	str	r2, [r3, #0]
}
 8005064:	46c0      	nop			; (mov r8, r8)
 8005066:	46bd      	mov	sp, r7
 8005068:	b003      	add	sp, #12
 800506a:	bd90      	pop	{r4, r7, pc}
 800506c:	e000e100 	.word	0xe000e100
 8005070:	e000ed00 	.word	0xe000ed00

08005074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	1e5a      	subs	r2, r3, #1
 8005080:	2380      	movs	r3, #128	; 0x80
 8005082:	045b      	lsls	r3, r3, #17
 8005084:	429a      	cmp	r2, r3
 8005086:	d301      	bcc.n	800508c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005088:	2301      	movs	r3, #1
 800508a:	e010      	b.n	80050ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800508c:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <SysTick_Config+0x44>)
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	3a01      	subs	r2, #1
 8005092:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005094:	2301      	movs	r3, #1
 8005096:	425b      	negs	r3, r3
 8005098:	2103      	movs	r1, #3
 800509a:	0018      	movs	r0, r3
 800509c:	f7ff ff7c 	bl	8004f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <SysTick_Config+0x44>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050a6:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <SysTick_Config+0x44>)
 80050a8:	2207      	movs	r2, #7
 80050aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	0018      	movs	r0, r3
 80050b0:	46bd      	mov	sp, r7
 80050b2:	b002      	add	sp, #8
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	e000e010 	.word	0xe000e010

080050bc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	607a      	str	r2, [r7, #4]
 80050c6:	210f      	movs	r1, #15
 80050c8:	187b      	adds	r3, r7, r1
 80050ca:	1c02      	adds	r2, r0, #0
 80050cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	187b      	adds	r3, r7, r1
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b25b      	sxtb	r3, r3
 80050d6:	0011      	movs	r1, r2
 80050d8:	0018      	movs	r0, r3
 80050da:	f7ff ff5d 	bl	8004f98 <__NVIC_SetPriority>
}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b004      	add	sp, #16
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	0018      	movs	r0, r3
 80050f2:	f7ff ffbf 	bl	8005074 <SysTick_Config>
 80050f6:	0003      	movs	r3, r0
}
 80050f8:	0018      	movs	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b002      	add	sp, #8
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005116:	e155      	b.n	80053c4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2101      	movs	r1, #1
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4091      	lsls	r1, r2
 8005122:	000a      	movs	r2, r1
 8005124:	4013      	ands	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d100      	bne.n	8005130 <HAL_GPIO_Init+0x30>
 800512e:	e146      	b.n	80053be <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2203      	movs	r2, #3
 8005136:	4013      	ands	r3, r2
 8005138:	2b01      	cmp	r3, #1
 800513a:	d005      	beq.n	8005148 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2203      	movs	r2, #3
 8005142:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005144:	2b02      	cmp	r3, #2
 8005146:	d130      	bne.n	80051aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	2203      	movs	r2, #3
 8005154:	409a      	lsls	r2, r3
 8005156:	0013      	movs	r3, r2
 8005158:	43da      	mvns	r2, r3
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4013      	ands	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	409a      	lsls	r2, r3
 800516a:	0013      	movs	r3, r2
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800517e:	2201      	movs	r2, #1
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	409a      	lsls	r2, r3
 8005184:	0013      	movs	r3, r2
 8005186:	43da      	mvns	r2, r3
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4013      	ands	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	091b      	lsrs	r3, r3, #4
 8005194:	2201      	movs	r2, #1
 8005196:	401a      	ands	r2, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	409a      	lsls	r2, r3
 800519c:	0013      	movs	r3, r2
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2203      	movs	r2, #3
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d017      	beq.n	80051e6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	2203      	movs	r2, #3
 80051c2:	409a      	lsls	r2, r3
 80051c4:	0013      	movs	r3, r2
 80051c6:	43da      	mvns	r2, r3
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4013      	ands	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	409a      	lsls	r2, r3
 80051d8:	0013      	movs	r3, r2
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2203      	movs	r2, #3
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d123      	bne.n	800523a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	08da      	lsrs	r2, r3, #3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3208      	adds	r2, #8
 80051fa:	0092      	lsls	r2, r2, #2
 80051fc:	58d3      	ldr	r3, [r2, r3]
 80051fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2207      	movs	r2, #7
 8005204:	4013      	ands	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	220f      	movs	r2, #15
 800520a:	409a      	lsls	r2, r3
 800520c:	0013      	movs	r3, r2
 800520e:	43da      	mvns	r2, r3
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4013      	ands	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2107      	movs	r1, #7
 800521e:	400b      	ands	r3, r1
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	409a      	lsls	r2, r3
 8005224:	0013      	movs	r3, r2
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	08da      	lsrs	r2, r3, #3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3208      	adds	r2, #8
 8005234:	0092      	lsls	r2, r2, #2
 8005236:	6939      	ldr	r1, [r7, #16]
 8005238:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	2203      	movs	r2, #3
 8005246:	409a      	lsls	r2, r3
 8005248:	0013      	movs	r3, r2
 800524a:	43da      	mvns	r2, r3
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4013      	ands	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2203      	movs	r2, #3
 8005258:	401a      	ands	r2, r3
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	409a      	lsls	r2, r3
 8005260:	0013      	movs	r3, r2
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	23c0      	movs	r3, #192	; 0xc0
 8005274:	029b      	lsls	r3, r3, #10
 8005276:	4013      	ands	r3, r2
 8005278:	d100      	bne.n	800527c <HAL_GPIO_Init+0x17c>
 800527a:	e0a0      	b.n	80053be <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800527c:	4b57      	ldr	r3, [pc, #348]	; (80053dc <HAL_GPIO_Init+0x2dc>)
 800527e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005280:	4b56      	ldr	r3, [pc, #344]	; (80053dc <HAL_GPIO_Init+0x2dc>)
 8005282:	2101      	movs	r1, #1
 8005284:	430a      	orrs	r2, r1
 8005286:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005288:	4a55      	ldr	r2, [pc, #340]	; (80053e0 <HAL_GPIO_Init+0x2e0>)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	089b      	lsrs	r3, r3, #2
 800528e:	3302      	adds	r3, #2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	589b      	ldr	r3, [r3, r2]
 8005294:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2203      	movs	r2, #3
 800529a:	4013      	ands	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	220f      	movs	r2, #15
 80052a0:	409a      	lsls	r2, r3
 80052a2:	0013      	movs	r3, r2
 80052a4:	43da      	mvns	r2, r3
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4013      	ands	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	23a0      	movs	r3, #160	; 0xa0
 80052b0:	05db      	lsls	r3, r3, #23
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d01f      	beq.n	80052f6 <HAL_GPIO_Init+0x1f6>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a4a      	ldr	r2, [pc, #296]	; (80053e4 <HAL_GPIO_Init+0x2e4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d019      	beq.n	80052f2 <HAL_GPIO_Init+0x1f2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a49      	ldr	r2, [pc, #292]	; (80053e8 <HAL_GPIO_Init+0x2e8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <HAL_GPIO_Init+0x1ee>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a48      	ldr	r2, [pc, #288]	; (80053ec <HAL_GPIO_Init+0x2ec>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00d      	beq.n	80052ea <HAL_GPIO_Init+0x1ea>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a47      	ldr	r2, [pc, #284]	; (80053f0 <HAL_GPIO_Init+0x2f0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d007      	beq.n	80052e6 <HAL_GPIO_Init+0x1e6>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a46      	ldr	r2, [pc, #280]	; (80053f4 <HAL_GPIO_Init+0x2f4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d101      	bne.n	80052e2 <HAL_GPIO_Init+0x1e2>
 80052de:	2305      	movs	r3, #5
 80052e0:	e00a      	b.n	80052f8 <HAL_GPIO_Init+0x1f8>
 80052e2:	2306      	movs	r3, #6
 80052e4:	e008      	b.n	80052f8 <HAL_GPIO_Init+0x1f8>
 80052e6:	2304      	movs	r3, #4
 80052e8:	e006      	b.n	80052f8 <HAL_GPIO_Init+0x1f8>
 80052ea:	2303      	movs	r3, #3
 80052ec:	e004      	b.n	80052f8 <HAL_GPIO_Init+0x1f8>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e002      	b.n	80052f8 <HAL_GPIO_Init+0x1f8>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <HAL_GPIO_Init+0x1f8>
 80052f6:	2300      	movs	r3, #0
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	2103      	movs	r1, #3
 80052fc:	400a      	ands	r2, r1
 80052fe:	0092      	lsls	r2, r2, #2
 8005300:	4093      	lsls	r3, r2
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005308:	4935      	ldr	r1, [pc, #212]	; (80053e0 <HAL_GPIO_Init+0x2e0>)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	089b      	lsrs	r3, r3, #2
 800530e:	3302      	adds	r3, #2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005316:	4b38      	ldr	r3, [pc, #224]	; (80053f8 <HAL_GPIO_Init+0x2f8>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	43da      	mvns	r2, r3
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4013      	ands	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	035b      	lsls	r3, r3, #13
 800532e:	4013      	ands	r3, r2
 8005330:	d003      	beq.n	800533a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800533a:	4b2f      	ldr	r3, [pc, #188]	; (80053f8 <HAL_GPIO_Init+0x2f8>)
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005340:	4b2d      	ldr	r3, [pc, #180]	; (80053f8 <HAL_GPIO_Init+0x2f8>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	43da      	mvns	r2, r3
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4013      	ands	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	039b      	lsls	r3, r3, #14
 8005358:	4013      	ands	r3, r2
 800535a:	d003      	beq.n	8005364 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005364:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <HAL_GPIO_Init+0x2f8>)
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800536a:	4b23      	ldr	r3, [pc, #140]	; (80053f8 <HAL_GPIO_Init+0x2f8>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	43da      	mvns	r2, r3
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4013      	ands	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	2380      	movs	r3, #128	; 0x80
 8005380:	029b      	lsls	r3, r3, #10
 8005382:	4013      	ands	r3, r2
 8005384:	d003      	beq.n	800538e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800538e:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <HAL_GPIO_Init+0x2f8>)
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005394:	4b18      	ldr	r3, [pc, #96]	; (80053f8 <HAL_GPIO_Init+0x2f8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	43da      	mvns	r2, r3
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4013      	ands	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	2380      	movs	r3, #128	; 0x80
 80053aa:	025b      	lsls	r3, r3, #9
 80053ac:	4013      	ands	r3, r2
 80053ae:	d003      	beq.n	80053b8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80053b8:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <HAL_GPIO_Init+0x2f8>)
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	3301      	adds	r3, #1
 80053c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	40da      	lsrs	r2, r3
 80053cc:	1e13      	subs	r3, r2, #0
 80053ce:	d000      	beq.n	80053d2 <HAL_GPIO_Init+0x2d2>
 80053d0:	e6a2      	b.n	8005118 <HAL_GPIO_Init+0x18>
  }
}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	46c0      	nop			; (mov r8, r8)
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b006      	add	sp, #24
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	40010000 	.word	0x40010000
 80053e4:	50000400 	.word	0x50000400
 80053e8:	50000800 	.word	0x50000800
 80053ec:	50000c00 	.word	0x50000c00
 80053f0:	50001000 	.word	0x50001000
 80053f4:	50001c00 	.word	0x50001c00
 80053f8:	40010400 	.word	0x40010400

080053fc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	000a      	movs	r2, r1
 8005406:	1cbb      	adds	r3, r7, #2
 8005408:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	1cba      	adds	r2, r7, #2
 8005410:	8812      	ldrh	r2, [r2, #0]
 8005412:	4013      	ands	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005416:	230f      	movs	r3, #15
 8005418:	18fb      	adds	r3, r7, r3
 800541a:	2201      	movs	r2, #1
 800541c:	701a      	strb	r2, [r3, #0]
 800541e:	e003      	b.n	8005428 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005420:	230f      	movs	r3, #15
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005428:	230f      	movs	r3, #15
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	781b      	ldrb	r3, [r3, #0]
}
 800542e:	0018      	movs	r0, r3
 8005430:	46bd      	mov	sp, r7
 8005432:	b004      	add	sp, #16
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	0008      	movs	r0, r1
 8005440:	0011      	movs	r1, r2
 8005442:	1cbb      	adds	r3, r7, #2
 8005444:	1c02      	adds	r2, r0, #0
 8005446:	801a      	strh	r2, [r3, #0]
 8005448:	1c7b      	adds	r3, r7, #1
 800544a:	1c0a      	adds	r2, r1, #0
 800544c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800544e:	1c7b      	adds	r3, r7, #1
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d004      	beq.n	8005460 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005456:	1cbb      	adds	r3, r7, #2
 8005458:	881a      	ldrh	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800545e:	e003      	b.n	8005468 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005460:	1cbb      	adds	r3, r7, #2
 8005462:	881a      	ldrh	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005468:	46c0      	nop			; (mov r8, r8)
 800546a:	46bd      	mov	sp, r7
 800546c:	b002      	add	sp, #8
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b08a      	sub	sp, #40	; 0x28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d102      	bne.n	8005484 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f000 fb6c 	bl	8005b5c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005484:	4bc8      	ldr	r3, [pc, #800]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	220c      	movs	r2, #12
 800548a:	4013      	ands	r3, r2
 800548c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800548e:	4bc6      	ldr	r3, [pc, #792]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	025b      	lsls	r3, r3, #9
 8005496:	4013      	ands	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2201      	movs	r2, #1
 80054a0:	4013      	ands	r3, r2
 80054a2:	d100      	bne.n	80054a6 <HAL_RCC_OscConfig+0x36>
 80054a4:	e07d      	b.n	80055a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d007      	beq.n	80054bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	2b0c      	cmp	r3, #12
 80054b0:	d112      	bne.n	80054d8 <HAL_RCC_OscConfig+0x68>
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	025b      	lsls	r3, r3, #9
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d10d      	bne.n	80054d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054bc:	4bba      	ldr	r3, [pc, #744]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	2380      	movs	r3, #128	; 0x80
 80054c2:	029b      	lsls	r3, r3, #10
 80054c4:	4013      	ands	r3, r2
 80054c6:	d100      	bne.n	80054ca <HAL_RCC_OscConfig+0x5a>
 80054c8:	e06a      	b.n	80055a0 <HAL_RCC_OscConfig+0x130>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d166      	bne.n	80055a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f000 fb42 	bl	8005b5c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	025b      	lsls	r3, r3, #9
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_OscConfig+0x84>
 80054e4:	4bb0      	ldr	r3, [pc, #704]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	4baf      	ldr	r3, [pc, #700]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 80054ea:	2180      	movs	r1, #128	; 0x80
 80054ec:	0249      	lsls	r1, r1, #9
 80054ee:	430a      	orrs	r2, r1
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e027      	b.n	8005544 <HAL_RCC_OscConfig+0xd4>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	23a0      	movs	r3, #160	; 0xa0
 80054fa:	02db      	lsls	r3, r3, #11
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d10e      	bne.n	800551e <HAL_RCC_OscConfig+0xae>
 8005500:	4ba9      	ldr	r3, [pc, #676]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4ba8      	ldr	r3, [pc, #672]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005506:	2180      	movs	r1, #128	; 0x80
 8005508:	02c9      	lsls	r1, r1, #11
 800550a:	430a      	orrs	r2, r1
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	4ba6      	ldr	r3, [pc, #664]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4ba5      	ldr	r3, [pc, #660]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005514:	2180      	movs	r1, #128	; 0x80
 8005516:	0249      	lsls	r1, r1, #9
 8005518:	430a      	orrs	r2, r1
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e012      	b.n	8005544 <HAL_RCC_OscConfig+0xd4>
 800551e:	4ba2      	ldr	r3, [pc, #648]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4ba1      	ldr	r3, [pc, #644]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005524:	49a1      	ldr	r1, [pc, #644]	; (80057ac <HAL_RCC_OscConfig+0x33c>)
 8005526:	400a      	ands	r2, r1
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	4b9f      	ldr	r3, [pc, #636]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	2380      	movs	r3, #128	; 0x80
 8005530:	025b      	lsls	r3, r3, #9
 8005532:	4013      	ands	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4b9b      	ldr	r3, [pc, #620]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	4b9a      	ldr	r3, [pc, #616]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 800553e:	499c      	ldr	r1, [pc, #624]	; (80057b0 <HAL_RCC_OscConfig+0x340>)
 8005540:	400a      	ands	r2, r1
 8005542:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d014      	beq.n	8005576 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554c:	f7ff f8a2 	bl	8004694 <HAL_GetTick>
 8005550:	0003      	movs	r3, r0
 8005552:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005556:	f7ff f89d 	bl	8004694 <HAL_GetTick>
 800555a:	0002      	movs	r2, r0
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b64      	cmp	r3, #100	; 0x64
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e2f9      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005568:	4b8f      	ldr	r3, [pc, #572]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	2380      	movs	r3, #128	; 0x80
 800556e:	029b      	lsls	r3, r3, #10
 8005570:	4013      	ands	r3, r2
 8005572:	d0f0      	beq.n	8005556 <HAL_RCC_OscConfig+0xe6>
 8005574:	e015      	b.n	80055a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005576:	f7ff f88d 	bl	8004694 <HAL_GetTick>
 800557a:	0003      	movs	r3, r0
 800557c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005580:	f7ff f888 	bl	8004694 <HAL_GetTick>
 8005584:	0002      	movs	r2, r0
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b64      	cmp	r3, #100	; 0x64
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e2e4      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005592:	4b85      	ldr	r3, [pc, #532]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	029b      	lsls	r3, r3, #10
 800559a:	4013      	ands	r3, r2
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_OscConfig+0x110>
 800559e:	e000      	b.n	80055a2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2202      	movs	r2, #2
 80055a8:	4013      	ands	r3, r2
 80055aa:	d100      	bne.n	80055ae <HAL_RCC_OscConfig+0x13e>
 80055ac:	e099      	b.n	80056e2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	2220      	movs	r2, #32
 80055b8:	4013      	ands	r3, r2
 80055ba:	d009      	beq.n	80055d0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80055bc:	4b7a      	ldr	r3, [pc, #488]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4b79      	ldr	r3, [pc, #484]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 80055c2:	2120      	movs	r1, #32
 80055c4:	430a      	orrs	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	2220      	movs	r2, #32
 80055cc:	4393      	bics	r3, r2
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d005      	beq.n	80055e2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	d13e      	bne.n	800565a <HAL_RCC_OscConfig+0x1ea>
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d13b      	bne.n	800565a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80055e2:	4b71      	ldr	r3, [pc, #452]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2204      	movs	r2, #4
 80055e8:	4013      	ands	r3, r2
 80055ea:	d004      	beq.n	80055f6 <HAL_RCC_OscConfig+0x186>
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e2b2      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f6:	4b6c      	ldr	r3, [pc, #432]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4a6e      	ldr	r2, [pc, #440]	; (80057b4 <HAL_RCC_OscConfig+0x344>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	0019      	movs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	4b68      	ldr	r3, [pc, #416]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800560c:	4b66      	ldr	r3, [pc, #408]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2209      	movs	r2, #9
 8005612:	4393      	bics	r3, r2
 8005614:	0019      	movs	r1, r3
 8005616:	4b64      	ldr	r3, [pc, #400]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561a:	430a      	orrs	r2, r1
 800561c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800561e:	f000 fbeb 	bl	8005df8 <HAL_RCC_GetSysClockFreq>
 8005622:	0001      	movs	r1, r0
 8005624:	4b60      	ldr	r3, [pc, #384]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	220f      	movs	r2, #15
 800562c:	4013      	ands	r3, r2
 800562e:	4a62      	ldr	r2, [pc, #392]	; (80057b8 <HAL_RCC_OscConfig+0x348>)
 8005630:	5cd3      	ldrb	r3, [r2, r3]
 8005632:	000a      	movs	r2, r1
 8005634:	40da      	lsrs	r2, r3
 8005636:	4b61      	ldr	r3, [pc, #388]	; (80057bc <HAL_RCC_OscConfig+0x34c>)
 8005638:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800563a:	4b61      	ldr	r3, [pc, #388]	; (80057c0 <HAL_RCC_OscConfig+0x350>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2513      	movs	r5, #19
 8005640:	197c      	adds	r4, r7, r5
 8005642:	0018      	movs	r0, r3
 8005644:	f7fe ffe0 	bl	8004608 <HAL_InitTick>
 8005648:	0003      	movs	r3, r0
 800564a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800564c:	197b      	adds	r3, r7, r5
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d046      	beq.n	80056e2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8005654:	197b      	adds	r3, r7, r5
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	e280      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	2b00      	cmp	r3, #0
 800565e:	d027      	beq.n	80056b0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005660:	4b51      	ldr	r3, [pc, #324]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2209      	movs	r2, #9
 8005666:	4393      	bics	r3, r2
 8005668:	0019      	movs	r1, r3
 800566a:	4b4f      	ldr	r3, [pc, #316]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 800566c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566e:	430a      	orrs	r2, r1
 8005670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005672:	f7ff f80f 	bl	8004694 <HAL_GetTick>
 8005676:	0003      	movs	r3, r0
 8005678:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800567c:	f7ff f80a 	bl	8004694 <HAL_GetTick>
 8005680:	0002      	movs	r2, r0
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e266      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800568e:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2204      	movs	r2, #4
 8005694:	4013      	ands	r3, r2
 8005696:	d0f1      	beq.n	800567c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005698:	4b43      	ldr	r3, [pc, #268]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	4a45      	ldr	r2, [pc, #276]	; (80057b4 <HAL_RCC_OscConfig+0x344>)
 800569e:	4013      	ands	r3, r2
 80056a0:	0019      	movs	r1, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	021a      	lsls	r2, r3, #8
 80056a8:	4b3f      	ldr	r3, [pc, #252]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	e018      	b.n	80056e2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056b0:	4b3d      	ldr	r3, [pc, #244]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	4b3c      	ldr	r3, [pc, #240]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 80056b6:	2101      	movs	r1, #1
 80056b8:	438a      	bics	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056bc:	f7fe ffea 	bl	8004694 <HAL_GetTick>
 80056c0:	0003      	movs	r3, r0
 80056c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056c6:	f7fe ffe5 	bl	8004694 <HAL_GetTick>
 80056ca:	0002      	movs	r2, r0
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e241      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056d8:	4b33      	ldr	r3, [pc, #204]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2204      	movs	r2, #4
 80056de:	4013      	ands	r3, r2
 80056e0:	d1f1      	bne.n	80056c6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2210      	movs	r2, #16
 80056e8:	4013      	ands	r3, r2
 80056ea:	d100      	bne.n	80056ee <HAL_RCC_OscConfig+0x27e>
 80056ec:	e0a1      	b.n	8005832 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d140      	bne.n	8005776 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056f4:	4b2c      	ldr	r3, [pc, #176]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	2380      	movs	r3, #128	; 0x80
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4013      	ands	r3, r2
 80056fe:	d005      	beq.n	800570c <HAL_RCC_OscConfig+0x29c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e227      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800570c:	4b26      	ldr	r3, [pc, #152]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	4a2c      	ldr	r2, [pc, #176]	; (80057c4 <HAL_RCC_OscConfig+0x354>)
 8005712:	4013      	ands	r3, r2
 8005714:	0019      	movs	r1, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	4b23      	ldr	r3, [pc, #140]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 800571c:	430a      	orrs	r2, r1
 800571e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005720:	4b21      	ldr	r3, [pc, #132]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	0a19      	lsrs	r1, r3, #8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	061a      	lsls	r2, r3, #24
 800572e:	4b1e      	ldr	r3, [pc, #120]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	0b5b      	lsrs	r3, r3, #13
 800573a:	3301      	adds	r3, #1
 800573c:	2280      	movs	r2, #128	; 0x80
 800573e:	0212      	lsls	r2, r2, #8
 8005740:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005742:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	210f      	movs	r1, #15
 800574a:	400b      	ands	r3, r1
 800574c:	491a      	ldr	r1, [pc, #104]	; (80057b8 <HAL_RCC_OscConfig+0x348>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005752:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <HAL_RCC_OscConfig+0x34c>)
 8005754:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005756:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <HAL_RCC_OscConfig+0x350>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2513      	movs	r5, #19
 800575c:	197c      	adds	r4, r7, r5
 800575e:	0018      	movs	r0, r3
 8005760:	f7fe ff52 	bl	8004608 <HAL_InitTick>
 8005764:	0003      	movs	r3, r0
 8005766:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005768:	197b      	adds	r3, r7, r5
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d060      	beq.n	8005832 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8005770:	197b      	adds	r3, r7, r5
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	e1f2      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d03f      	beq.n	80057fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800577e:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <HAL_RCC_OscConfig+0x338>)
 8005784:	2180      	movs	r1, #128	; 0x80
 8005786:	0049      	lsls	r1, r1, #1
 8005788:	430a      	orrs	r2, r1
 800578a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578c:	f7fe ff82 	bl	8004694 <HAL_GetTick>
 8005790:	0003      	movs	r3, r0
 8005792:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005794:	e018      	b.n	80057c8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005796:	f7fe ff7d 	bl	8004694 <HAL_GetTick>
 800579a:	0002      	movs	r2, r0
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d911      	bls.n	80057c8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e1d9      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
 80057a8:	40021000 	.word	0x40021000
 80057ac:	fffeffff 	.word	0xfffeffff
 80057b0:	fffbffff 	.word	0xfffbffff
 80057b4:	ffffe0ff 	.word	0xffffe0ff
 80057b8:	0800e8a8 	.word	0x0800e8a8
 80057bc:	20000004 	.word	0x20000004
 80057c0:	20000008 	.word	0x20000008
 80057c4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80057c8:	4bc9      	ldr	r3, [pc, #804]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	2380      	movs	r3, #128	; 0x80
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4013      	ands	r3, r2
 80057d2:	d0e0      	beq.n	8005796 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057d4:	4bc6      	ldr	r3, [pc, #792]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	4ac6      	ldr	r2, [pc, #792]	; (8005af4 <HAL_RCC_OscConfig+0x684>)
 80057da:	4013      	ands	r3, r2
 80057dc:	0019      	movs	r1, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	4bc3      	ldr	r3, [pc, #780]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057e8:	4bc1      	ldr	r3, [pc, #772]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	0a19      	lsrs	r1, r3, #8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	061a      	lsls	r2, r3, #24
 80057f6:	4bbe      	ldr	r3, [pc, #760]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
 80057fc:	e019      	b.n	8005832 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057fe:	4bbc      	ldr	r3, [pc, #752]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	4bbb      	ldr	r3, [pc, #748]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005804:	49bc      	ldr	r1, [pc, #752]	; (8005af8 <HAL_RCC_OscConfig+0x688>)
 8005806:	400a      	ands	r2, r1
 8005808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580a:	f7fe ff43 	bl	8004694 <HAL_GetTick>
 800580e:	0003      	movs	r3, r0
 8005810:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005814:	f7fe ff3e 	bl	8004694 <HAL_GetTick>
 8005818:	0002      	movs	r2, r0
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e19a      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005826:	4bb2      	ldr	r3, [pc, #712]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	2380      	movs	r3, #128	; 0x80
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4013      	ands	r3, r2
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2208      	movs	r2, #8
 8005838:	4013      	ands	r3, r2
 800583a:	d036      	beq.n	80058aa <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d019      	beq.n	8005878 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005844:	4baa      	ldr	r3, [pc, #680]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005846:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005848:	4ba9      	ldr	r3, [pc, #676]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 800584a:	2101      	movs	r1, #1
 800584c:	430a      	orrs	r2, r1
 800584e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005850:	f7fe ff20 	bl	8004694 <HAL_GetTick>
 8005854:	0003      	movs	r3, r0
 8005856:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800585a:	f7fe ff1b 	bl	8004694 <HAL_GetTick>
 800585e:	0002      	movs	r2, r0
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e177      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800586c:	4ba0      	ldr	r3, [pc, #640]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 800586e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005870:	2202      	movs	r2, #2
 8005872:	4013      	ands	r3, r2
 8005874:	d0f1      	beq.n	800585a <HAL_RCC_OscConfig+0x3ea>
 8005876:	e018      	b.n	80058aa <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005878:	4b9d      	ldr	r3, [pc, #628]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 800587a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800587c:	4b9c      	ldr	r3, [pc, #624]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 800587e:	2101      	movs	r1, #1
 8005880:	438a      	bics	r2, r1
 8005882:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005884:	f7fe ff06 	bl	8004694 <HAL_GetTick>
 8005888:	0003      	movs	r3, r0
 800588a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800588c:	e008      	b.n	80058a0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800588e:	f7fe ff01 	bl	8004694 <HAL_GetTick>
 8005892:	0002      	movs	r2, r0
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e15d      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058a0:	4b93      	ldr	r3, [pc, #588]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 80058a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a4:	2202      	movs	r2, #2
 80058a6:	4013      	ands	r3, r2
 80058a8:	d1f1      	bne.n	800588e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2204      	movs	r2, #4
 80058b0:	4013      	ands	r3, r2
 80058b2:	d100      	bne.n	80058b6 <HAL_RCC_OscConfig+0x446>
 80058b4:	e0ae      	b.n	8005a14 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058b6:	2023      	movs	r0, #35	; 0x23
 80058b8:	183b      	adds	r3, r7, r0
 80058ba:	2200      	movs	r2, #0
 80058bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058be:	4b8c      	ldr	r3, [pc, #560]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 80058c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	055b      	lsls	r3, r3, #21
 80058c6:	4013      	ands	r3, r2
 80058c8:	d109      	bne.n	80058de <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ca:	4b89      	ldr	r3, [pc, #548]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 80058cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ce:	4b88      	ldr	r3, [pc, #544]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 80058d0:	2180      	movs	r1, #128	; 0x80
 80058d2:	0549      	lsls	r1, r1, #21
 80058d4:	430a      	orrs	r2, r1
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80058d8:	183b      	adds	r3, r7, r0
 80058da:	2201      	movs	r2, #1
 80058dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058de:	4b87      	ldr	r3, [pc, #540]	; (8005afc <HAL_RCC_OscConfig+0x68c>)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	2380      	movs	r3, #128	; 0x80
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4013      	ands	r3, r2
 80058e8:	d11a      	bne.n	8005920 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ea:	4b84      	ldr	r3, [pc, #528]	; (8005afc <HAL_RCC_OscConfig+0x68c>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4b83      	ldr	r3, [pc, #524]	; (8005afc <HAL_RCC_OscConfig+0x68c>)
 80058f0:	2180      	movs	r1, #128	; 0x80
 80058f2:	0049      	lsls	r1, r1, #1
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058f8:	f7fe fecc 	bl	8004694 <HAL_GetTick>
 80058fc:	0003      	movs	r3, r0
 80058fe:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005902:	f7fe fec7 	bl	8004694 <HAL_GetTick>
 8005906:	0002      	movs	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b64      	cmp	r3, #100	; 0x64
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e123      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005914:	4b79      	ldr	r3, [pc, #484]	; (8005afc <HAL_RCC_OscConfig+0x68c>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	4013      	ands	r3, r2
 800591e:	d0f0      	beq.n	8005902 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	2380      	movs	r3, #128	; 0x80
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	429a      	cmp	r2, r3
 800592a:	d107      	bne.n	800593c <HAL_RCC_OscConfig+0x4cc>
 800592c:	4b70      	ldr	r3, [pc, #448]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 800592e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005930:	4b6f      	ldr	r3, [pc, #444]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005932:	2180      	movs	r1, #128	; 0x80
 8005934:	0049      	lsls	r1, r1, #1
 8005936:	430a      	orrs	r2, r1
 8005938:	651a      	str	r2, [r3, #80]	; 0x50
 800593a:	e031      	b.n	80059a0 <HAL_RCC_OscConfig+0x530>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10c      	bne.n	800595e <HAL_RCC_OscConfig+0x4ee>
 8005944:	4b6a      	ldr	r3, [pc, #424]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005948:	4b69      	ldr	r3, [pc, #420]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 800594a:	496b      	ldr	r1, [pc, #428]	; (8005af8 <HAL_RCC_OscConfig+0x688>)
 800594c:	400a      	ands	r2, r1
 800594e:	651a      	str	r2, [r3, #80]	; 0x50
 8005950:	4b67      	ldr	r3, [pc, #412]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005954:	4b66      	ldr	r3, [pc, #408]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005956:	496a      	ldr	r1, [pc, #424]	; (8005b00 <HAL_RCC_OscConfig+0x690>)
 8005958:	400a      	ands	r2, r1
 800595a:	651a      	str	r2, [r3, #80]	; 0x50
 800595c:	e020      	b.n	80059a0 <HAL_RCC_OscConfig+0x530>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	23a0      	movs	r3, #160	; 0xa0
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	429a      	cmp	r2, r3
 8005968:	d10e      	bne.n	8005988 <HAL_RCC_OscConfig+0x518>
 800596a:	4b61      	ldr	r3, [pc, #388]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 800596c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800596e:	4b60      	ldr	r3, [pc, #384]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005970:	2180      	movs	r1, #128	; 0x80
 8005972:	00c9      	lsls	r1, r1, #3
 8005974:	430a      	orrs	r2, r1
 8005976:	651a      	str	r2, [r3, #80]	; 0x50
 8005978:	4b5d      	ldr	r3, [pc, #372]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 800597a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800597c:	4b5c      	ldr	r3, [pc, #368]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 800597e:	2180      	movs	r1, #128	; 0x80
 8005980:	0049      	lsls	r1, r1, #1
 8005982:	430a      	orrs	r2, r1
 8005984:	651a      	str	r2, [r3, #80]	; 0x50
 8005986:	e00b      	b.n	80059a0 <HAL_RCC_OscConfig+0x530>
 8005988:	4b59      	ldr	r3, [pc, #356]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 800598a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800598c:	4b58      	ldr	r3, [pc, #352]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 800598e:	495a      	ldr	r1, [pc, #360]	; (8005af8 <HAL_RCC_OscConfig+0x688>)
 8005990:	400a      	ands	r2, r1
 8005992:	651a      	str	r2, [r3, #80]	; 0x50
 8005994:	4b56      	ldr	r3, [pc, #344]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005996:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005998:	4b55      	ldr	r3, [pc, #340]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 800599a:	4959      	ldr	r1, [pc, #356]	; (8005b00 <HAL_RCC_OscConfig+0x690>)
 800599c:	400a      	ands	r2, r1
 800599e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d015      	beq.n	80059d4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a8:	f7fe fe74 	bl	8004694 <HAL_GetTick>
 80059ac:	0003      	movs	r3, r0
 80059ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059b0:	e009      	b.n	80059c6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b2:	f7fe fe6f 	bl	8004694 <HAL_GetTick>
 80059b6:	0002      	movs	r2, r0
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	4a51      	ldr	r2, [pc, #324]	; (8005b04 <HAL_RCC_OscConfig+0x694>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e0ca      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059c6:	4b4a      	ldr	r3, [pc, #296]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 80059c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059ca:	2380      	movs	r3, #128	; 0x80
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4013      	ands	r3, r2
 80059d0:	d0ef      	beq.n	80059b2 <HAL_RCC_OscConfig+0x542>
 80059d2:	e014      	b.n	80059fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059d4:	f7fe fe5e 	bl	8004694 <HAL_GetTick>
 80059d8:	0003      	movs	r3, r0
 80059da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059dc:	e009      	b.n	80059f2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059de:	f7fe fe59 	bl	8004694 <HAL_GetTick>
 80059e2:	0002      	movs	r2, r0
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	4a46      	ldr	r2, [pc, #280]	; (8005b04 <HAL_RCC_OscConfig+0x694>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e0b4      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059f2:	4b3f      	ldr	r3, [pc, #252]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 80059f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059f6:	2380      	movs	r3, #128	; 0x80
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4013      	ands	r3, r2
 80059fc:	d1ef      	bne.n	80059de <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059fe:	2323      	movs	r3, #35	; 0x23
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d105      	bne.n	8005a14 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a08:	4b39      	ldr	r3, [pc, #228]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a0c:	4b38      	ldr	r3, [pc, #224]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005a0e:	493e      	ldr	r1, [pc, #248]	; (8005b08 <HAL_RCC_OscConfig+0x698>)
 8005a10:	400a      	ands	r2, r1
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d100      	bne.n	8005a1e <HAL_RCC_OscConfig+0x5ae>
 8005a1c:	e09d      	b.n	8005b5a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	2b0c      	cmp	r3, #12
 8005a22:	d100      	bne.n	8005a26 <HAL_RCC_OscConfig+0x5b6>
 8005a24:	e076      	b.n	8005b14 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d145      	bne.n	8005aba <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a2e:	4b30      	ldr	r3, [pc, #192]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	4b2f      	ldr	r3, [pc, #188]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005a34:	4935      	ldr	r1, [pc, #212]	; (8005b0c <HAL_RCC_OscConfig+0x69c>)
 8005a36:	400a      	ands	r2, r1
 8005a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3a:	f7fe fe2b 	bl	8004694 <HAL_GetTick>
 8005a3e:	0003      	movs	r3, r0
 8005a40:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a44:	f7fe fe26 	bl	8004694 <HAL_GetTick>
 8005a48:	0002      	movs	r2, r0
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e082      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a56:	4b26      	ldr	r3, [pc, #152]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	2380      	movs	r3, #128	; 0x80
 8005a5c:	049b      	lsls	r3, r3, #18
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d1f0      	bne.n	8005a44 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a62:	4b23      	ldr	r3, [pc, #140]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	4a2a      	ldr	r2, [pc, #168]	; (8005b10 <HAL_RCC_OscConfig+0x6a0>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	0019      	movs	r1, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	4b1c      	ldr	r3, [pc, #112]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a82:	4b1b      	ldr	r3, [pc, #108]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005a88:	2180      	movs	r1, #128	; 0x80
 8005a8a:	0449      	lsls	r1, r1, #17
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a90:	f7fe fe00 	bl	8004694 <HAL_GetTick>
 8005a94:	0003      	movs	r3, r0
 8005a96:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a9a:	f7fe fdfb 	bl	8004694 <HAL_GetTick>
 8005a9e:	0002      	movs	r2, r0
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e057      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005aac:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	049b      	lsls	r3, r3, #18
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d0f0      	beq.n	8005a9a <HAL_RCC_OscConfig+0x62a>
 8005ab8:	e04f      	b.n	8005b5a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aba:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005ac0:	4912      	ldr	r1, [pc, #72]	; (8005b0c <HAL_RCC_OscConfig+0x69c>)
 8005ac2:	400a      	ands	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac6:	f7fe fde5 	bl	8004694 <HAL_GetTick>
 8005aca:	0003      	movs	r3, r0
 8005acc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fe fde0 	bl	8004694 <HAL_GetTick>
 8005ad4:	0002      	movs	r2, r0
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e03c      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005ae2:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <HAL_RCC_OscConfig+0x680>)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	049b      	lsls	r3, r3, #18
 8005aea:	4013      	ands	r3, r2
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x660>
 8005aee:	e034      	b.n	8005b5a <HAL_RCC_OscConfig+0x6ea>
 8005af0:	40021000 	.word	0x40021000
 8005af4:	ffff1fff 	.word	0xffff1fff
 8005af8:	fffffeff 	.word	0xfffffeff
 8005afc:	40007000 	.word	0x40007000
 8005b00:	fffffbff 	.word	0xfffffbff
 8005b04:	00001388 	.word	0x00001388
 8005b08:	efffffff 	.word	0xefffffff
 8005b0c:	feffffff 	.word	0xfeffffff
 8005b10:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e01d      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b20:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <HAL_RCC_OscConfig+0x6f4>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	025b      	lsls	r3, r3, #9
 8005b2c:	401a      	ands	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d10f      	bne.n	8005b56 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	23f0      	movs	r3, #240	; 0xf0
 8005b3a:	039b      	lsls	r3, r3, #14
 8005b3c:	401a      	ands	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	23c0      	movs	r3, #192	; 0xc0
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	401a      	ands	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d001      	beq.n	8005b5a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b00a      	add	sp, #40	; 0x28
 8005b62:	bdb0      	pop	{r4, r5, r7, pc}
 8005b64:	40021000 	.word	0x40021000

08005b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b68:	b5b0      	push	{r4, r5, r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e128      	b.n	8005dce <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b7c:	4b96      	ldr	r3, [pc, #600]	; (8005dd8 <HAL_RCC_ClockConfig+0x270>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2201      	movs	r2, #1
 8005b82:	4013      	ands	r3, r2
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d91e      	bls.n	8005bc8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b8a:	4b93      	ldr	r3, [pc, #588]	; (8005dd8 <HAL_RCC_ClockConfig+0x270>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	4393      	bics	r3, r2
 8005b92:	0019      	movs	r1, r3
 8005b94:	4b90      	ldr	r3, [pc, #576]	; (8005dd8 <HAL_RCC_ClockConfig+0x270>)
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b9c:	f7fe fd7a 	bl	8004694 <HAL_GetTick>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba4:	e009      	b.n	8005bba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba6:	f7fe fd75 	bl	8004694 <HAL_GetTick>
 8005baa:	0002      	movs	r2, r0
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	4a8a      	ldr	r2, [pc, #552]	; (8005ddc <HAL_RCC_ClockConfig+0x274>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e109      	b.n	8005dce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bba:	4b87      	ldr	r3, [pc, #540]	; (8005dd8 <HAL_RCC_ClockConfig+0x270>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d1ee      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d009      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd2:	4b83      	ldr	r3, [pc, #524]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	22f0      	movs	r2, #240	; 0xf0
 8005bd8:	4393      	bics	r3, r2
 8005bda:	0019      	movs	r1, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	4b7f      	ldr	r3, [pc, #508]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005be2:	430a      	orrs	r2, r1
 8005be4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2201      	movs	r2, #1
 8005bec:	4013      	ands	r3, r2
 8005bee:	d100      	bne.n	8005bf2 <HAL_RCC_ClockConfig+0x8a>
 8005bf0:	e089      	b.n	8005d06 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d107      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bfa:	4b79      	ldr	r3, [pc, #484]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	2380      	movs	r3, #128	; 0x80
 8005c00:	029b      	lsls	r3, r3, #10
 8005c02:	4013      	ands	r3, r2
 8005c04:	d120      	bne.n	8005c48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e0e1      	b.n	8005dce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d107      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c12:	4b73      	ldr	r3, [pc, #460]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	049b      	lsls	r3, r3, #18
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d114      	bne.n	8005c48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e0d5      	b.n	8005dce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d106      	bne.n	8005c38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c2a:	4b6d      	ldr	r3, [pc, #436]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2204      	movs	r2, #4
 8005c30:	4013      	ands	r3, r2
 8005c32:	d109      	bne.n	8005c48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0ca      	b.n	8005dce <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c38:	4b69      	ldr	r3, [pc, #420]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4013      	ands	r3, r2
 8005c42:	d101      	bne.n	8005c48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0c2      	b.n	8005dce <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c48:	4b65      	ldr	r3, [pc, #404]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	2203      	movs	r2, #3
 8005c4e:	4393      	bics	r3, r2
 8005c50:	0019      	movs	r1, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	4b62      	ldr	r3, [pc, #392]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c5c:	f7fe fd1a 	bl	8004694 <HAL_GetTick>
 8005c60:	0003      	movs	r3, r0
 8005c62:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d111      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c6c:	e009      	b.n	8005c82 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c6e:	f7fe fd11 	bl	8004694 <HAL_GetTick>
 8005c72:	0002      	movs	r2, r0
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	4a58      	ldr	r2, [pc, #352]	; (8005ddc <HAL_RCC_ClockConfig+0x274>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e0a5      	b.n	8005dce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c82:	4b57      	ldr	r3, [pc, #348]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	220c      	movs	r2, #12
 8005c88:	4013      	ands	r3, r2
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d1ef      	bne.n	8005c6e <HAL_RCC_ClockConfig+0x106>
 8005c8e:	e03a      	b.n	8005d06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d111      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c98:	e009      	b.n	8005cae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c9a:	f7fe fcfb 	bl	8004694 <HAL_GetTick>
 8005c9e:	0002      	movs	r2, r0
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	4a4d      	ldr	r2, [pc, #308]	; (8005ddc <HAL_RCC_ClockConfig+0x274>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e08f      	b.n	8005dce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cae:	4b4c      	ldr	r3, [pc, #304]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	220c      	movs	r2, #12
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b0c      	cmp	r3, #12
 8005cb8:	d1ef      	bne.n	8005c9a <HAL_RCC_ClockConfig+0x132>
 8005cba:	e024      	b.n	8005d06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d11b      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cc4:	e009      	b.n	8005cda <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc6:	f7fe fce5 	bl	8004694 <HAL_GetTick>
 8005cca:	0002      	movs	r2, r0
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	4a42      	ldr	r2, [pc, #264]	; (8005ddc <HAL_RCC_ClockConfig+0x274>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e079      	b.n	8005dce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cda:	4b41      	ldr	r3, [pc, #260]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	220c      	movs	r2, #12
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d1ef      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0x15e>
 8005ce6:	e00e      	b.n	8005d06 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce8:	f7fe fcd4 	bl	8004694 <HAL_GetTick>
 8005cec:	0002      	movs	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	4a3a      	ldr	r2, [pc, #232]	; (8005ddc <HAL_RCC_ClockConfig+0x274>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e068      	b.n	8005dce <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cfc:	4b38      	ldr	r3, [pc, #224]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	220c      	movs	r2, #12
 8005d02:	4013      	ands	r3, r2
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d06:	4b34      	ldr	r3, [pc, #208]	; (8005dd8 <HAL_RCC_ClockConfig+0x270>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d21e      	bcs.n	8005d52 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d14:	4b30      	ldr	r3, [pc, #192]	; (8005dd8 <HAL_RCC_ClockConfig+0x270>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	4393      	bics	r3, r2
 8005d1c:	0019      	movs	r1, r3
 8005d1e:	4b2e      	ldr	r3, [pc, #184]	; (8005dd8 <HAL_RCC_ClockConfig+0x270>)
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d26:	f7fe fcb5 	bl	8004694 <HAL_GetTick>
 8005d2a:	0003      	movs	r3, r0
 8005d2c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2e:	e009      	b.n	8005d44 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d30:	f7fe fcb0 	bl	8004694 <HAL_GetTick>
 8005d34:	0002      	movs	r2, r0
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	4a28      	ldr	r2, [pc, #160]	; (8005ddc <HAL_RCC_ClockConfig+0x274>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e044      	b.n	8005dce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d44:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <HAL_RCC_ClockConfig+0x270>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d1ee      	bne.n	8005d30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2204      	movs	r2, #4
 8005d58:	4013      	ands	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d5c:	4b20      	ldr	r3, [pc, #128]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4a20      	ldr	r2, [pc, #128]	; (8005de4 <HAL_RCC_ClockConfig+0x27c>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	0019      	movs	r1, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2208      	movs	r2, #8
 8005d76:	4013      	ands	r3, r2
 8005d78:	d00a      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d7a:	4b19      	ldr	r3, [pc, #100]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	4a1a      	ldr	r2, [pc, #104]	; (8005de8 <HAL_RCC_ClockConfig+0x280>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	0019      	movs	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	00da      	lsls	r2, r3, #3
 8005d8a:	4b15      	ldr	r3, [pc, #84]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d90:	f000 f832 	bl	8005df8 <HAL_RCC_GetSysClockFreq>
 8005d94:	0001      	movs	r1, r0
 8005d96:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <HAL_RCC_ClockConfig+0x278>)
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	091b      	lsrs	r3, r3, #4
 8005d9c:	220f      	movs	r2, #15
 8005d9e:	4013      	ands	r3, r2
 8005da0:	4a12      	ldr	r2, [pc, #72]	; (8005dec <HAL_RCC_ClockConfig+0x284>)
 8005da2:	5cd3      	ldrb	r3, [r2, r3]
 8005da4:	000a      	movs	r2, r1
 8005da6:	40da      	lsrs	r2, r3
 8005da8:	4b11      	ldr	r3, [pc, #68]	; (8005df0 <HAL_RCC_ClockConfig+0x288>)
 8005daa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005dac:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <HAL_RCC_ClockConfig+0x28c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	250b      	movs	r5, #11
 8005db2:	197c      	adds	r4, r7, r5
 8005db4:	0018      	movs	r0, r3
 8005db6:	f7fe fc27 	bl	8004608 <HAL_InitTick>
 8005dba:	0003      	movs	r3, r0
 8005dbc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005dbe:	197b      	adds	r3, r7, r5
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005dc6:	197b      	adds	r3, r7, r5
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	e000      	b.n	8005dce <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	0018      	movs	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b004      	add	sp, #16
 8005dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	40022000 	.word	0x40022000
 8005ddc:	00001388 	.word	0x00001388
 8005de0:	40021000 	.word	0x40021000
 8005de4:	fffff8ff 	.word	0xfffff8ff
 8005de8:	ffffc7ff 	.word	0xffffc7ff
 8005dec:	0800e8a8 	.word	0x0800e8a8
 8005df0:	20000004 	.word	0x20000004
 8005df4:	20000008 	.word	0x20000008

08005df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df8:	b5b0      	push	{r4, r5, r7, lr}
 8005dfa:	b08e      	sub	sp, #56	; 0x38
 8005dfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005dfe:	4b4c      	ldr	r3, [pc, #304]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e06:	230c      	movs	r3, #12
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b0c      	cmp	r3, #12
 8005e0c:	d014      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq+0x40>
 8005e0e:	d900      	bls.n	8005e12 <HAL_RCC_GetSysClockFreq+0x1a>
 8005e10:	e07b      	b.n	8005f0a <HAL_RCC_GetSysClockFreq+0x112>
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d002      	beq.n	8005e1c <HAL_RCC_GetSysClockFreq+0x24>
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d00b      	beq.n	8005e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e1a:	e076      	b.n	8005f0a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005e1c:	4b44      	ldr	r3, [pc, #272]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2210      	movs	r2, #16
 8005e22:	4013      	ands	r3, r2
 8005e24:	d002      	beq.n	8005e2c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005e26:	4b43      	ldr	r3, [pc, #268]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e28:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005e2a:	e07c      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005e2c:	4b42      	ldr	r3, [pc, #264]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x140>)
 8005e2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e30:	e079      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e32:	4b42      	ldr	r3, [pc, #264]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x144>)
 8005e34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e36:	e076      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	0c9a      	lsrs	r2, r3, #18
 8005e3c:	230f      	movs	r3, #15
 8005e3e:	401a      	ands	r2, r3
 8005e40:	4b3f      	ldr	r3, [pc, #252]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x148>)
 8005e42:	5c9b      	ldrb	r3, [r3, r2]
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	0d9a      	lsrs	r2, r3, #22
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	3301      	adds	r3, #1
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e52:	4b37      	ldr	r3, [pc, #220]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	025b      	lsls	r3, r3, #9
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d01a      	beq.n	8005e94 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
 8005e66:	4a35      	ldr	r2, [pc, #212]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x144>)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	69b8      	ldr	r0, [r7, #24]
 8005e6c:	69f9      	ldr	r1, [r7, #28]
 8005e6e:	f7fa fb3b 	bl	80004e8 <__aeabi_lmul>
 8005e72:	0002      	movs	r2, r0
 8005e74:	000b      	movs	r3, r1
 8005e76:	0010      	movs	r0, r2
 8005e78:	0019      	movs	r1, r3
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f7fa fb0f 	bl	80004a8 <__aeabi_uldivmod>
 8005e8a:	0002      	movs	r2, r0
 8005e8c:	000b      	movs	r3, r1
 8005e8e:	0013      	movs	r3, r2
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
 8005e92:	e037      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005e94:	4b26      	ldr	r3, [pc, #152]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2210      	movs	r2, #16
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d01a      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	4a23      	ldr	r2, [pc, #140]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	68b8      	ldr	r0, [r7, #8]
 8005eac:	68f9      	ldr	r1, [r7, #12]
 8005eae:	f7fa fb1b 	bl	80004e8 <__aeabi_lmul>
 8005eb2:	0002      	movs	r2, r0
 8005eb4:	000b      	movs	r3, r1
 8005eb6:	0010      	movs	r0, r2
 8005eb8:	0019      	movs	r1, r3
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	603b      	str	r3, [r7, #0]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	607b      	str	r3, [r7, #4]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f7fa faef 	bl	80004a8 <__aeabi_uldivmod>
 8005eca:	0002      	movs	r2, r0
 8005ecc:	000b      	movs	r3, r1
 8005ece:	0013      	movs	r3, r2
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed2:	e017      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	2300      	movs	r3, #0
 8005eda:	0019      	movs	r1, r3
 8005edc:	4a16      	ldr	r2, [pc, #88]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x140>)
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f7fa fb02 	bl	80004e8 <__aeabi_lmul>
 8005ee4:	0002      	movs	r2, r0
 8005ee6:	000b      	movs	r3, r1
 8005ee8:	0010      	movs	r0, r2
 8005eea:	0019      	movs	r1, r3
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	001c      	movs	r4, r3
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	001d      	movs	r5, r3
 8005ef4:	0022      	movs	r2, r4
 8005ef6:	002b      	movs	r3, r5
 8005ef8:	f7fa fad6 	bl	80004a8 <__aeabi_uldivmod>
 8005efc:	0002      	movs	r2, r0
 8005efe:	000b      	movs	r3, r1
 8005f00:	0013      	movs	r3, r2
 8005f02:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005f08:	e00d      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005f0a:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	0b5b      	lsrs	r3, r3, #13
 8005f10:	2207      	movs	r2, #7
 8005f12:	4013      	ands	r3, r2
 8005f14:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	2280      	movs	r2, #128	; 0x80
 8005f1c:	0212      	lsls	r2, r2, #8
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	0013      	movs	r3, r2
 8005f22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005f24:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005f28:	0018      	movs	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b00e      	add	sp, #56	; 0x38
 8005f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f30:	40021000 	.word	0x40021000
 8005f34:	003d0900 	.word	0x003d0900
 8005f38:	00f42400 	.word	0x00f42400
 8005f3c:	007a1200 	.word	0x007a1200
 8005f40:	0800e8b8 	.word	0x0800e8b8

08005f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e07b      	b.n	800604e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	2382      	movs	r3, #130	; 0x82
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d009      	beq.n	8005f7e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	61da      	str	r2, [r3, #28]
 8005f70:	e005      	b.n	8005f7e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2251      	movs	r2, #81	; 0x51
 8005f88:	5c9b      	ldrb	r3, [r3, r2]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d107      	bne.n	8005fa0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2250      	movs	r2, #80	; 0x50
 8005f94:	2100      	movs	r1, #0
 8005f96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f7fe f99a 	bl	80042d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2251      	movs	r2, #81	; 0x51
 8005fa4:	2102      	movs	r1, #2
 8005fa6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2140      	movs	r1, #64	; 0x40
 8005fb4:	438a      	bics	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	2382      	movs	r3, #130	; 0x82
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	401a      	ands	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6899      	ldr	r1, [r3, #8]
 8005fc6:	2384      	movs	r3, #132	; 0x84
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	400b      	ands	r3, r1
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68d9      	ldr	r1, [r3, #12]
 8005fd2:	2380      	movs	r3, #128	; 0x80
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	400b      	ands	r3, r1
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2102      	movs	r1, #2
 8005fe0:	400b      	ands	r3, r1
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	2101      	movs	r1, #1
 8005fea:	400b      	ands	r3, r1
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6999      	ldr	r1, [r3, #24]
 8005ff2:	2380      	movs	r3, #128	; 0x80
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	400b      	ands	r3, r1
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	2138      	movs	r1, #56	; 0x38
 8006000:	400b      	ands	r3, r1
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	2180      	movs	r1, #128	; 0x80
 800600a:	400b      	ands	r3, r1
 800600c:	431a      	orrs	r2, r3
 800600e:	0011      	movs	r1, r2
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006014:	2380      	movs	r3, #128	; 0x80
 8006016:	019b      	lsls	r3, r3, #6
 8006018:	401a      	ands	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	0c1b      	lsrs	r3, r3, #16
 8006028:	2204      	movs	r2, #4
 800602a:	4013      	ands	r3, r2
 800602c:	0019      	movs	r1, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	2210      	movs	r2, #16
 8006034:	401a      	ands	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2251      	movs	r2, #81	; 0x51
 8006048:	2101      	movs	r1, #1
 800604a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	0018      	movs	r0, r3
 8006050:	46bd      	mov	sp, r7
 8006052:	b002      	add	sp, #8
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b088      	sub	sp, #32
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	603b      	str	r3, [r7, #0]
 8006062:	1dbb      	adds	r3, r7, #6
 8006064:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006066:	231f      	movs	r3, #31
 8006068:	18fb      	adds	r3, r7, r3
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2250      	movs	r2, #80	; 0x50
 8006072:	5c9b      	ldrb	r3, [r3, r2]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_SPI_Transmit+0x26>
 8006078:	2302      	movs	r3, #2
 800607a:	e145      	b.n	8006308 <HAL_SPI_Transmit+0x2b2>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2250      	movs	r2, #80	; 0x50
 8006080:	2101      	movs	r1, #1
 8006082:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006084:	f7fe fb06 	bl	8004694 <HAL_GetTick>
 8006088:	0003      	movs	r3, r0
 800608a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800608c:	2316      	movs	r3, #22
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	1dba      	adds	r2, r7, #6
 8006092:	8812      	ldrh	r2, [r2, #0]
 8006094:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2251      	movs	r2, #81	; 0x51
 800609a:	5c9b      	ldrb	r3, [r3, r2]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d004      	beq.n	80060ac <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80060a2:	231f      	movs	r3, #31
 80060a4:	18fb      	adds	r3, r7, r3
 80060a6:	2202      	movs	r2, #2
 80060a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80060aa:	e126      	b.n	80062fa <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_SPI_Transmit+0x64>
 80060b2:	1dbb      	adds	r3, r7, #6
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80060ba:	231f      	movs	r3, #31
 80060bc:	18fb      	adds	r3, r7, r3
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80060c2:	e11a      	b.n	80062fa <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2251      	movs	r2, #81	; 0x51
 80060c8:	2103      	movs	r1, #3
 80060ca:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	1dba      	adds	r2, r7, #6
 80060dc:	8812      	ldrh	r2, [r2, #0]
 80060de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	1dba      	adds	r2, r7, #6
 80060e4:	8812      	ldrh	r2, [r2, #0]
 80060e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	429a      	cmp	r2, r3
 8006110:	d110      	bne.n	8006134 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2140      	movs	r1, #64	; 0x40
 800611e:	438a      	bics	r2, r1
 8006120:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2180      	movs	r1, #128	; 0x80
 800612e:	01c9      	lsls	r1, r1, #7
 8006130:	430a      	orrs	r2, r1
 8006132:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2240      	movs	r2, #64	; 0x40
 800613c:	4013      	ands	r3, r2
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d007      	beq.n	8006152 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2140      	movs	r1, #64	; 0x40
 800614e:	430a      	orrs	r2, r1
 8006150:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	429a      	cmp	r2, r3
 800615c:	d152      	bne.n	8006204 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <HAL_SPI_Transmit+0x11a>
 8006166:	2316      	movs	r3, #22
 8006168:	18fb      	adds	r3, r7, r3
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d143      	bne.n	80061f8 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	881a      	ldrh	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	1c9a      	adds	r2, r3, #2
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006194:	e030      	b.n	80061f8 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2202      	movs	r2, #2
 800619e:	4013      	ands	r3, r2
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d112      	bne.n	80061ca <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	881a      	ldrh	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	1c9a      	adds	r2, r3, #2
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80061c8:	e016      	b.n	80061f8 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ca:	f7fe fa63 	bl	8004694 <HAL_GetTick>
 80061ce:	0002      	movs	r2, r0
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d802      	bhi.n	80061e0 <HAL_SPI_Transmit+0x18a>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	3301      	adds	r3, #1
 80061de:	d102      	bne.n	80061e6 <HAL_SPI_Transmit+0x190>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d108      	bne.n	80061f8 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80061e6:	231f      	movs	r3, #31
 80061e8:	18fb      	adds	r3, r7, r3
 80061ea:	2203      	movs	r2, #3
 80061ec:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2251      	movs	r2, #81	; 0x51
 80061f2:	2101      	movs	r1, #1
 80061f4:	5499      	strb	r1, [r3, r2]
          goto error;
 80061f6:	e080      	b.n	80062fa <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1c9      	bne.n	8006196 <HAL_SPI_Transmit+0x140>
 8006202:	e053      	b.n	80062ac <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d004      	beq.n	8006216 <HAL_SPI_Transmit+0x1c0>
 800620c:	2316      	movs	r3, #22
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d145      	bne.n	80062a2 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	330c      	adds	r3, #12
 8006220:	7812      	ldrb	r2, [r2, #0]
 8006222:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800623c:	e031      	b.n	80062a2 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2202      	movs	r2, #2
 8006246:	4013      	ands	r3, r2
 8006248:	2b02      	cmp	r3, #2
 800624a:	d113      	bne.n	8006274 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	7812      	ldrb	r2, [r2, #0]
 8006258:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	86da      	strh	r2, [r3, #54]	; 0x36
 8006272:	e016      	b.n	80062a2 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006274:	f7fe fa0e 	bl	8004694 <HAL_GetTick>
 8006278:	0002      	movs	r2, r0
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d802      	bhi.n	800628a <HAL_SPI_Transmit+0x234>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	3301      	adds	r3, #1
 8006288:	d102      	bne.n	8006290 <HAL_SPI_Transmit+0x23a>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d108      	bne.n	80062a2 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8006290:	231f      	movs	r3, #31
 8006292:	18fb      	adds	r3, r7, r3
 8006294:	2203      	movs	r2, #3
 8006296:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2251      	movs	r2, #81	; 0x51
 800629c:	2101      	movs	r1, #1
 800629e:	5499      	strb	r1, [r3, r2]
          goto error;
 80062a0:	e02b      	b.n	80062fa <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1c8      	bne.n	800623e <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	0018      	movs	r0, r3
 80062b4:	f000 fa86 	bl	80067c4 <SPI_EndRxTxTransaction>
 80062b8:	1e03      	subs	r3, r0, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2220      	movs	r2, #32
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10a      	bne.n	80062e0 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062ca:	2300      	movs	r3, #0
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	613b      	str	r3, [r7, #16]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80062e8:	231f      	movs	r3, #31
 80062ea:	18fb      	adds	r3, r7, r3
 80062ec:	2201      	movs	r2, #1
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	e003      	b.n	80062fa <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2251      	movs	r2, #81	; 0x51
 80062f6:	2101      	movs	r1, #1
 80062f8:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2250      	movs	r2, #80	; 0x50
 80062fe:	2100      	movs	r1, #0
 8006300:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006302:	231f      	movs	r3, #31
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	781b      	ldrb	r3, [r3, #0]
}
 8006308:	0018      	movs	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	b008      	add	sp, #32
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08c      	sub	sp, #48	; 0x30
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	001a      	movs	r2, r3
 800631e:	1cbb      	adds	r3, r7, #2
 8006320:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006322:	2301      	movs	r3, #1
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006326:	232b      	movs	r3, #43	; 0x2b
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2250      	movs	r2, #80	; 0x50
 8006332:	5c9b      	ldrb	r3, [r3, r2]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_SPI_TransmitReceive+0x2c>
 8006338:	2302      	movs	r3, #2
 800633a:	e1b0      	b.n	800669e <HAL_SPI_TransmitReceive+0x38e>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2250      	movs	r2, #80	; 0x50
 8006340:	2101      	movs	r1, #1
 8006342:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006344:	f7fe f9a6 	bl	8004694 <HAL_GetTick>
 8006348:	0003      	movs	r3, r0
 800634a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800634c:	2023      	movs	r0, #35	; 0x23
 800634e:	183b      	adds	r3, r7, r0
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	2151      	movs	r1, #81	; 0x51
 8006354:	5c52      	ldrb	r2, [r2, r1]
 8006356:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800635e:	231a      	movs	r3, #26
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	1cba      	adds	r2, r7, #2
 8006364:	8812      	ldrh	r2, [r2, #0]
 8006366:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006368:	183b      	adds	r3, r7, r0
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d011      	beq.n	8006394 <HAL_SPI_TransmitReceive+0x84>
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	2382      	movs	r3, #130	; 0x82
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	429a      	cmp	r2, r3
 8006378:	d107      	bne.n	800638a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d103      	bne.n	800638a <HAL_SPI_TransmitReceive+0x7a>
 8006382:	183b      	adds	r3, r7, r0
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b04      	cmp	r3, #4
 8006388:	d004      	beq.n	8006394 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800638a:	232b      	movs	r3, #43	; 0x2b
 800638c:	18fb      	adds	r3, r7, r3
 800638e:	2202      	movs	r2, #2
 8006390:	701a      	strb	r2, [r3, #0]
    goto error;
 8006392:	e17d      	b.n	8006690 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d006      	beq.n	80063a8 <HAL_SPI_TransmitReceive+0x98>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <HAL_SPI_TransmitReceive+0x98>
 80063a0:	1cbb      	adds	r3, r7, #2
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80063a8:	232b      	movs	r3, #43	; 0x2b
 80063aa:	18fb      	adds	r3, r7, r3
 80063ac:	2201      	movs	r2, #1
 80063ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80063b0:	e16e      	b.n	8006690 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2251      	movs	r2, #81	; 0x51
 80063b6:	5c9b      	ldrb	r3, [r3, r2]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d003      	beq.n	80063c6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2251      	movs	r2, #81	; 0x51
 80063c2:	2105      	movs	r1, #5
 80063c4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	1cba      	adds	r2, r7, #2
 80063d6:	8812      	ldrh	r2, [r2, #0]
 80063d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	1cba      	adds	r2, r7, #2
 80063de:	8812      	ldrh	r2, [r2, #0]
 80063e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	1cba      	adds	r2, r7, #2
 80063ec:	8812      	ldrh	r2, [r2, #0]
 80063ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1cba      	adds	r2, r7, #2
 80063f4:	8812      	ldrh	r2, [r2, #0]
 80063f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2240      	movs	r2, #64	; 0x40
 800640c:	4013      	ands	r3, r2
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d007      	beq.n	8006422 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2140      	movs	r1, #64	; 0x40
 800641e:	430a      	orrs	r2, r1
 8006420:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	2380      	movs	r3, #128	; 0x80
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	429a      	cmp	r2, r3
 800642c:	d000      	beq.n	8006430 <HAL_SPI_TransmitReceive+0x120>
 800642e:	e07f      	b.n	8006530 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <HAL_SPI_TransmitReceive+0x134>
 8006438:	231a      	movs	r3, #26
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d000      	beq.n	8006444 <HAL_SPI_TransmitReceive+0x134>
 8006442:	e06a      	b.n	800651a <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006454:	1c9a      	adds	r2, r3, #2
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006468:	e057      	b.n	800651a <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2202      	movs	r2, #2
 8006472:	4013      	ands	r3, r2
 8006474:	2b02      	cmp	r3, #2
 8006476:	d11b      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x1a0>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d016      	beq.n	80064b0 <HAL_SPI_TransmitReceive+0x1a0>
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d113      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	881a      	ldrh	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	1c9a      	adds	r2, r3, #2
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2201      	movs	r2, #1
 80064b8:	4013      	ands	r3, r2
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d119      	bne.n	80064f2 <HAL_SPI_TransmitReceive+0x1e2>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d014      	beq.n	80064f2 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	b292      	uxth	r2, r2
 80064d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	1c9a      	adds	r2, r3, #2
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064ee:	2301      	movs	r3, #1
 80064f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064f2:	f7fe f8cf 	bl	8004694 <HAL_GetTick>
 80064f6:	0002      	movs	r2, r0
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064fe:	429a      	cmp	r2, r3
 8006500:	d80b      	bhi.n	800651a <HAL_SPI_TransmitReceive+0x20a>
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	3301      	adds	r3, #1
 8006506:	d008      	beq.n	800651a <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8006508:	232b      	movs	r3, #43	; 0x2b
 800650a:	18fb      	adds	r3, r7, r3
 800650c:	2203      	movs	r2, #3
 800650e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2251      	movs	r2, #81	; 0x51
 8006514:	2101      	movs	r1, #1
 8006516:	5499      	strb	r1, [r3, r2]
        goto error;
 8006518:	e0ba      	b.n	8006690 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1a2      	bne.n	800646a <HAL_SPI_TransmitReceive+0x15a>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d19d      	bne.n	800646a <HAL_SPI_TransmitReceive+0x15a>
 800652e:	e083      	b.n	8006638 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_SPI_TransmitReceive+0x234>
 8006538:	231a      	movs	r3, #26
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d000      	beq.n	8006544 <HAL_SPI_TransmitReceive+0x234>
 8006542:	e06f      	b.n	8006624 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	330c      	adds	r3, #12
 800654e:	7812      	ldrb	r2, [r2, #0]
 8006550:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006560:	b29b      	uxth	r3, r3
 8006562:	3b01      	subs	r3, #1
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800656a:	e05b      	b.n	8006624 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	2202      	movs	r2, #2
 8006574:	4013      	ands	r3, r2
 8006576:	2b02      	cmp	r3, #2
 8006578:	d11c      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x2a4>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d017      	beq.n	80065b4 <HAL_SPI_TransmitReceive+0x2a4>
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	2b01      	cmp	r3, #1
 8006588:	d114      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	330c      	adds	r3, #12
 8006594:	7812      	ldrb	r2, [r2, #0]
 8006596:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	3b01      	subs	r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2201      	movs	r2, #1
 80065bc:	4013      	ands	r3, r2
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d119      	bne.n	80065f6 <HAL_SPI_TransmitReceive+0x2e6>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d014      	beq.n	80065f6 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065f2:	2301      	movs	r3, #1
 80065f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065f6:	f7fe f84d 	bl	8004694 <HAL_GetTick>
 80065fa:	0002      	movs	r2, r0
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006602:	429a      	cmp	r2, r3
 8006604:	d802      	bhi.n	800660c <HAL_SPI_TransmitReceive+0x2fc>
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	3301      	adds	r3, #1
 800660a:	d102      	bne.n	8006612 <HAL_SPI_TransmitReceive+0x302>
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	2b00      	cmp	r3, #0
 8006610:	d108      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8006612:	232b      	movs	r3, #43	; 0x2b
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	2203      	movs	r2, #3
 8006618:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2251      	movs	r2, #81	; 0x51
 800661e:	2101      	movs	r1, #1
 8006620:	5499      	strb	r1, [r3, r2]
        goto error;
 8006622:	e035      	b.n	8006690 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d19e      	bne.n	800656c <HAL_SPI_TransmitReceive+0x25c>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d199      	bne.n	800656c <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	0018      	movs	r0, r3
 8006640:	f000 f8c0 	bl	80067c4 <SPI_EndRxTxTransaction>
 8006644:	1e03      	subs	r3, r0, #0
 8006646:	d007      	beq.n	8006658 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8006648:	232b      	movs	r3, #43	; 0x2b
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	2201      	movs	r2, #1
 800664e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2220      	movs	r2, #32
 8006654:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006656:	e01b      	b.n	8006690 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006660:	2300      	movs	r3, #0
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 800667e:	232b      	movs	r3, #43	; 0x2b
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e003      	b.n	8006690 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2251      	movs	r2, #81	; 0x51
 800668c:	2101      	movs	r1, #1
 800668e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2250      	movs	r2, #80	; 0x50
 8006694:	2100      	movs	r1, #0
 8006696:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006698:	232b      	movs	r3, #43	; 0x2b
 800669a:	18fb      	adds	r3, r7, r3
 800669c:	781b      	ldrb	r3, [r3, #0]
}
 800669e:	0018      	movs	r0, r3
 80066a0:	46bd      	mov	sp, r7
 80066a2:	b00c      	add	sp, #48	; 0x30
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	1dfb      	adds	r3, r7, #7
 80066b6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066b8:	f7fd ffec 	bl	8004694 <HAL_GetTick>
 80066bc:	0002      	movs	r2, r0
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	1a9b      	subs	r3, r3, r2
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	18d3      	adds	r3, r2, r3
 80066c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066c8:	f7fd ffe4 	bl	8004694 <HAL_GetTick>
 80066cc:	0003      	movs	r3, r0
 80066ce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066d0:	4b3a      	ldr	r3, [pc, #232]	; (80067bc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	015b      	lsls	r3, r3, #5
 80066d6:	0d1b      	lsrs	r3, r3, #20
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	4353      	muls	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066de:	e058      	b.n	8006792 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	d055      	beq.n	8006792 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066e6:	f7fd ffd5 	bl	8004694 <HAL_GetTick>
 80066ea:	0002      	movs	r2, r0
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d902      	bls.n	80066fc <SPI_WaitFlagStateUntilTimeout+0x54>
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d142      	bne.n	8006782 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	21e0      	movs	r1, #224	; 0xe0
 8006708:	438a      	bics	r2, r1
 800670a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	2382      	movs	r3, #130	; 0x82
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	429a      	cmp	r2, r3
 8006716:	d113      	bne.n	8006740 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	2380      	movs	r3, #128	; 0x80
 800671e:	021b      	lsls	r3, r3, #8
 8006720:	429a      	cmp	r2, r3
 8006722:	d005      	beq.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	2380      	movs	r3, #128	; 0x80
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	429a      	cmp	r2, r3
 800672e:	d107      	bne.n	8006740 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2140      	movs	r1, #64	; 0x40
 800673c:	438a      	bics	r2, r1
 800673e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006744:	2380      	movs	r3, #128	; 0x80
 8006746:	019b      	lsls	r3, r3, #6
 8006748:	429a      	cmp	r2, r3
 800674a:	d110      	bne.n	800676e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	491a      	ldr	r1, [pc, #104]	; (80067c0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006758:	400a      	ands	r2, r1
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2180      	movs	r1, #128	; 0x80
 8006768:	0189      	lsls	r1, r1, #6
 800676a:	430a      	orrs	r2, r1
 800676c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2251      	movs	r2, #81	; 0x51
 8006772:	2101      	movs	r1, #1
 8006774:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2250      	movs	r2, #80	; 0x50
 800677a:	2100      	movs	r1, #0
 800677c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e017      	b.n	80067b2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	3b01      	subs	r3, #1
 8006790:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	4013      	ands	r3, r2
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	425a      	negs	r2, r3
 80067a2:	4153      	adcs	r3, r2
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	001a      	movs	r2, r3
 80067a8:	1dfb      	adds	r3, r7, #7
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d197      	bne.n	80066e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	0018      	movs	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b008      	add	sp, #32
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	20000004 	.word	0x20000004
 80067c0:	ffffdfff 	.word	0xffffdfff

080067c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067d0:	4b1d      	ldr	r3, [pc, #116]	; (8006848 <SPI_EndRxTxTransaction+0x84>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	491d      	ldr	r1, [pc, #116]	; (800684c <SPI_EndRxTxTransaction+0x88>)
 80067d6:	0018      	movs	r0, r3
 80067d8:	f7f9 fcb2 	bl	8000140 <__udivsi3>
 80067dc:	0003      	movs	r3, r0
 80067de:	001a      	movs	r2, r3
 80067e0:	0013      	movs	r3, r2
 80067e2:	015b      	lsls	r3, r3, #5
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	189b      	adds	r3, r3, r2
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	2382      	movs	r3, #130	; 0x82
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d112      	bne.n	8006820 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	0013      	movs	r3, r2
 8006804:	2200      	movs	r2, #0
 8006806:	2180      	movs	r1, #128	; 0x80
 8006808:	f7ff ff4e 	bl	80066a8 <SPI_WaitFlagStateUntilTimeout>
 800680c:	1e03      	subs	r3, r0, #0
 800680e:	d016      	beq.n	800683e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	2220      	movs	r2, #32
 8006816:	431a      	orrs	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e00f      	b.n	8006840 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	3b01      	subs	r3, #1
 800682a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2280      	movs	r2, #128	; 0x80
 8006834:	4013      	ands	r3, r2
 8006836:	2b80      	cmp	r3, #128	; 0x80
 8006838:	d0f2      	beq.n	8006820 <SPI_EndRxTxTransaction+0x5c>
 800683a:	e000      	b.n	800683e <SPI_EndRxTxTransaction+0x7a>
        break;
 800683c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	0018      	movs	r0, r3
 8006842:	46bd      	mov	sp, r7
 8006844:	b006      	add	sp, #24
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20000004 	.word	0x20000004
 800684c:	016e3600 	.word	0x016e3600

08006850 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006854:	4a06      	ldr	r2, [pc, #24]	; (8006870 <MX_FATFS_Init+0x20>)
 8006856:	4b07      	ldr	r3, [pc, #28]	; (8006874 <MX_FATFS_Init+0x24>)
 8006858:	0011      	movs	r1, r2
 800685a:	0018      	movs	r0, r3
 800685c:	f003 f982 	bl	8009b64 <FATFS_LinkDriver>
 8006860:	0003      	movs	r3, r0
 8006862:	001a      	movs	r2, r3
 8006864:	4b04      	ldr	r3, [pc, #16]	; (8006878 <MX_FATFS_Init+0x28>)
 8006866:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006868:	46c0      	nop			; (mov r8, r8)
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	200002ec 	.word	0x200002ec
 8006874:	20000010 	.word	0x20000010
 8006878:	200002e8 	.word	0x200002e8

0800687c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006880:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006882:	0018      	movs	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	0002      	movs	r2, r0
 8006890:	1dfb      	adds	r3, r7, #7
 8006892:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006894:	1dfb      	adds	r3, r7, #7
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	0018      	movs	r0, r3
 800689a:	f7fc fbbd 	bl	8003018 <SD_disk_initialize>
 800689e:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80068a0:	0018      	movs	r0, r3
 80068a2:	46bd      	mov	sp, r7
 80068a4:	b002      	add	sp, #8
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	0002      	movs	r2, r0
 80068b0:	1dfb      	adds	r3, r7, #7
 80068b2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80068b4:	1dfb      	adds	r3, r7, #7
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7fc fcb7 	bl	800322c <SD_disk_status>
 80068be:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 80068c0:	0018      	movs	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b002      	add	sp, #8
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80068c8:	b5b0      	push	{r4, r5, r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	250f      	movs	r5, #15
 80068d6:	197b      	adds	r3, r7, r5
 80068d8:	1c02      	adds	r2, r0, #0
 80068da:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80068dc:	683c      	ldr	r4, [r7, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	197b      	adds	r3, r7, r5
 80068e4:	7818      	ldrb	r0, [r3, #0]
 80068e6:	0023      	movs	r3, r4
 80068e8:	f7fc fcb6 	bl	8003258 <SD_disk_read>
 80068ec:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 80068ee:	0018      	movs	r0, r3
 80068f0:	46bd      	mov	sp, r7
 80068f2:	b004      	add	sp, #16
 80068f4:	bdb0      	pop	{r4, r5, r7, pc}

080068f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80068f6:	b5b0      	push	{r4, r5, r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
 8006902:	250f      	movs	r5, #15
 8006904:	197b      	adds	r3, r7, r5
 8006906:	1c02      	adds	r2, r0, #0
 8006908:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800690a:	683c      	ldr	r4, [r7, #0]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	197b      	adds	r3, r7, r5
 8006912:	7818      	ldrb	r0, [r3, #0]
 8006914:	0023      	movs	r3, r4
 8006916:	f7fc fd0f 	bl	8003338 <SD_disk_write>
 800691a:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 800691c:	0018      	movs	r0, r3
 800691e:	46bd      	mov	sp, r7
 8006920:	b004      	add	sp, #16
 8006922:	bdb0      	pop	{r4, r5, r7, pc}

08006924 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	603a      	str	r2, [r7, #0]
 800692c:	1dfb      	adds	r3, r7, #7
 800692e:	1c02      	adds	r2, r0, #0
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	1dbb      	adds	r3, r7, #6
 8006934:	1c0a      	adds	r2, r1, #0
 8006936:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	1dbb      	adds	r3, r7, #6
 800693c:	7819      	ldrb	r1, [r3, #0]
 800693e:	1dfb      	adds	r3, r7, #7
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	0018      	movs	r0, r3
 8006944:	f7fc fd80 	bl	8003448 <SD_disk_ioctl>
 8006948:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 800694a:	0018      	movs	r0, r3
 800694c:	46bd      	mov	sp, r7
 800694e:	b002      	add	sp, #8
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006954:	b5b0      	push	{r4, r5, r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	0002      	movs	r2, r0
 800695c:	1dfb      	adds	r3, r7, #7
 800695e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006960:	1dfb      	adds	r3, r7, #7
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	4a0b      	ldr	r2, [pc, #44]	; (8006994 <disk_status+0x40>)
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	18d3      	adds	r3, r2, r3
 800696a:	3304      	adds	r3, #4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	1dfa      	adds	r2, r7, #7
 8006972:	7812      	ldrb	r2, [r2, #0]
 8006974:	4907      	ldr	r1, [pc, #28]	; (8006994 <disk_status+0x40>)
 8006976:	188a      	adds	r2, r1, r2
 8006978:	7a12      	ldrb	r2, [r2, #8]
 800697a:	250f      	movs	r5, #15
 800697c:	197c      	adds	r4, r7, r5
 800697e:	0010      	movs	r0, r2
 8006980:	4798      	blx	r3
 8006982:	0003      	movs	r3, r0
 8006984:	7023      	strb	r3, [r4, #0]
  return stat;
 8006986:	197b      	adds	r3, r7, r5
 8006988:	781b      	ldrb	r3, [r3, #0]
}
 800698a:	0018      	movs	r0, r3
 800698c:	46bd      	mov	sp, r7
 800698e:	b004      	add	sp, #16
 8006990:	bdb0      	pop	{r4, r5, r7, pc}
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	20000518 	.word	0x20000518

08006998 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006998:	b590      	push	{r4, r7, lr}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	0002      	movs	r2, r0
 80069a0:	1dfb      	adds	r3, r7, #7
 80069a2:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80069a4:	200f      	movs	r0, #15
 80069a6:	183b      	adds	r3, r7, r0
 80069a8:	2200      	movs	r2, #0
 80069aa:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80069ac:	1dfb      	adds	r3, r7, #7
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	4a10      	ldr	r2, [pc, #64]	; (80069f4 <disk_initialize+0x5c>)
 80069b2:	5cd3      	ldrb	r3, [r2, r3]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d116      	bne.n	80069e6 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 80069b8:	1dfb      	adds	r3, r7, #7
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	4a0d      	ldr	r2, [pc, #52]	; (80069f4 <disk_initialize+0x5c>)
 80069be:	2101      	movs	r1, #1
 80069c0:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80069c2:	1dfb      	adds	r3, r7, #7
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	4a0b      	ldr	r2, [pc, #44]	; (80069f4 <disk_initialize+0x5c>)
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	18d3      	adds	r3, r2, r3
 80069cc:	3304      	adds	r3, #4
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	1dfa      	adds	r2, r7, #7
 80069d4:	7812      	ldrb	r2, [r2, #0]
 80069d6:	4907      	ldr	r1, [pc, #28]	; (80069f4 <disk_initialize+0x5c>)
 80069d8:	188a      	adds	r2, r1, r2
 80069da:	7a12      	ldrb	r2, [r2, #8]
 80069dc:	183c      	adds	r4, r7, r0
 80069de:	0010      	movs	r0, r2
 80069e0:	4798      	blx	r3
 80069e2:	0003      	movs	r3, r0
 80069e4:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 80069e6:	230f      	movs	r3, #15
 80069e8:	18fb      	adds	r3, r7, r3
 80069ea:	781b      	ldrb	r3, [r3, #0]
}
 80069ec:	0018      	movs	r0, r3
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b005      	add	sp, #20
 80069f2:	bd90      	pop	{r4, r7, pc}
 80069f4:	20000518 	.word	0x20000518

080069f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80069f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	607a      	str	r2, [r7, #4]
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	210f      	movs	r1, #15
 8006a06:	187b      	adds	r3, r7, r1
 8006a08:	1c02      	adds	r2, r0, #0
 8006a0a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006a0c:	187b      	adds	r3, r7, r1
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	4a0c      	ldr	r2, [pc, #48]	; (8006a44 <disk_read+0x4c>)
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	18d3      	adds	r3, r2, r3
 8006a16:	3304      	adds	r3, #4
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689d      	ldr	r5, [r3, #8]
 8006a1c:	187b      	adds	r3, r7, r1
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	4a08      	ldr	r2, [pc, #32]	; (8006a44 <disk_read+0x4c>)
 8006a22:	18d3      	adds	r3, r2, r3
 8006a24:	7a18      	ldrb	r0, [r3, #8]
 8006a26:	2617      	movs	r6, #23
 8006a28:	19bc      	adds	r4, r7, r6
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	47a8      	blx	r5
 8006a32:	0003      	movs	r3, r0
 8006a34:	7023      	strb	r3, [r4, #0]
  return res;
 8006a36:	19bb      	adds	r3, r7, r6
 8006a38:	781b      	ldrb	r3, [r3, #0]
}
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b007      	add	sp, #28
 8006a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	20000518 	.word	0x20000518

08006a48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	210f      	movs	r1, #15
 8006a56:	187b      	adds	r3, r7, r1
 8006a58:	1c02      	adds	r2, r0, #0
 8006a5a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006a5c:	187b      	adds	r3, r7, r1
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	4a0c      	ldr	r2, [pc, #48]	; (8006a94 <disk_write+0x4c>)
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	18d3      	adds	r3, r2, r3
 8006a66:	3304      	adds	r3, #4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68dd      	ldr	r5, [r3, #12]
 8006a6c:	187b      	adds	r3, r7, r1
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	4a08      	ldr	r2, [pc, #32]	; (8006a94 <disk_write+0x4c>)
 8006a72:	18d3      	adds	r3, r2, r3
 8006a74:	7a18      	ldrb	r0, [r3, #8]
 8006a76:	2617      	movs	r6, #23
 8006a78:	19bc      	adds	r4, r7, r6
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	47a8      	blx	r5
 8006a82:	0003      	movs	r3, r0
 8006a84:	7023      	strb	r3, [r4, #0]
  return res;
 8006a86:	19bb      	adds	r3, r7, r6
 8006a88:	781b      	ldrb	r3, [r3, #0]
}
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	b007      	add	sp, #28
 8006a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a92:	46c0      	nop			; (mov r8, r8)
 8006a94:	20000518 	.word	0x20000518

08006a98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	603a      	str	r2, [r7, #0]
 8006aa0:	1dfb      	adds	r3, r7, #7
 8006aa2:	1c02      	adds	r2, r0, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	1dbb      	adds	r3, r7, #6
 8006aa8:	1c0a      	adds	r2, r1, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006aac:	1dfb      	adds	r3, r7, #7
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	4a0c      	ldr	r2, [pc, #48]	; (8006ae4 <disk_ioctl+0x4c>)
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	18d3      	adds	r3, r2, r3
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	1dfa      	adds	r2, r7, #7
 8006abe:	7812      	ldrb	r2, [r2, #0]
 8006ac0:	4908      	ldr	r1, [pc, #32]	; (8006ae4 <disk_ioctl+0x4c>)
 8006ac2:	188a      	adds	r2, r1, r2
 8006ac4:	7a10      	ldrb	r0, [r2, #8]
 8006ac6:	260f      	movs	r6, #15
 8006ac8:	19bc      	adds	r4, r7, r6
 8006aca:	683d      	ldr	r5, [r7, #0]
 8006acc:	1dba      	adds	r2, r7, #6
 8006ace:	7811      	ldrb	r1, [r2, #0]
 8006ad0:	002a      	movs	r2, r5
 8006ad2:	4798      	blx	r3
 8006ad4:	0003      	movs	r3, r0
 8006ad6:	7023      	strb	r3, [r4, #0]
  return res;
 8006ad8:	19bb      	adds	r3, r7, r6
 8006ada:	781b      	ldrb	r3, [r3, #0]
}
 8006adc:	0018      	movs	r0, r3
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b005      	add	sp, #20
 8006ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ae4:	20000518 	.word	0x20000518

08006ae8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3301      	adds	r3, #1
 8006af4:	781a      	ldrb	r2, [r3, #0]
 8006af6:	210e      	movs	r1, #14
 8006af8:	187b      	adds	r3, r7, r1
 8006afa:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8006afc:	187b      	adds	r3, r7, r1
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	b21a      	sxth	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	b21b      	sxth	r3, r3
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	b21a      	sxth	r2, r3
 8006b0e:	187b      	adds	r3, r7, r1
 8006b10:	801a      	strh	r2, [r3, #0]
	return rv;
 8006b12:	187b      	adds	r3, r7, r1
 8006b14:	881b      	ldrh	r3, [r3, #0]
}
 8006b16:	0018      	movs	r0, r3
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b004      	add	sp, #16
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3303      	adds	r3, #3
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	021b      	lsls	r3, r3, #8
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	3202      	adds	r2, #2
 8006b36:	7812      	ldrb	r2, [r2, #0]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	3201      	adds	r2, #1
 8006b44:	7812      	ldrb	r2, [r2, #0]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	7812      	ldrb	r2, [r2, #0]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
	return rv;
 8006b56:	68fb      	ldr	r3, [r7, #12]
}
 8006b58:	0018      	movs	r0, r3
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	b004      	add	sp, #16
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	000a      	movs	r2, r1
 8006b6a:	1cbb      	adds	r3, r7, #2
 8006b6c:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	1cba      	adds	r2, r7, #2
 8006b76:	8812      	ldrh	r2, [r2, #0]
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	1cbb      	adds	r3, r7, #2
 8006b7e:	1cba      	adds	r2, r7, #2
 8006b80:	8812      	ldrh	r2, [r2, #0]
 8006b82:	0a12      	lsrs	r2, r2, #8
 8006b84:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	1cba      	adds	r2, r7, #2
 8006b8e:	8812      	ldrh	r2, [r2, #0]
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	701a      	strb	r2, [r3, #0]
}
 8006b94:	46c0      	nop			; (mov r8, r8)
 8006b96:	46bd      	mov	sp, r7
 8006b98:	b002      	add	sp, #8
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	0a1b      	lsrs	r3, r3, #8
 8006bb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	607a      	str	r2, [r7, #4]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	0a1b      	lsrs	r3, r3, #8
 8006bc8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
}
 8006be8:	46c0      	nop			; (mov r8, r8)
 8006bea:	46bd      	mov	sp, r7
 8006bec:	b002      	add	sp, #8
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00d      	beq.n	8006c26 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	1c53      	adds	r3, r2, #1
 8006c0e:	613b      	str	r3, [r7, #16]
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	1c59      	adds	r1, r3, #1
 8006c14:	6179      	str	r1, [r7, #20]
 8006c16:	7812      	ldrb	r2, [r2, #0]
 8006c18:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	607b      	str	r3, [r7, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1f1      	bne.n	8006c0a <mem_cpy+0x1a>
	}
}
 8006c26:	46c0      	nop			; (mov r8, r8)
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	b006      	add	sp, #24
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b086      	sub	sp, #24
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	617a      	str	r2, [r7, #20]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	607b      	str	r3, [r7, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1f3      	bne.n	8006c3e <mem_set+0x10>
}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	46c0      	nop			; (mov r8, r8)
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	b006      	add	sp, #24
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	61fb      	str	r3, [r7, #28]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	61fa      	str	r2, [r7, #28]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	0019      	movs	r1, r3
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	61ba      	str	r2, [r7, #24]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	1acb      	subs	r3, r1, r3
 8006c8c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	607b      	str	r3, [r7, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <mem_cmp+0x40>
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0eb      	beq.n	8006c78 <mem_cmp+0x18>

	return r;
 8006ca0:	697b      	ldr	r3, [r7, #20]
}
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	b008      	add	sp, #32
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006cb4:	e002      	b.n	8006cbc <chk_chr+0x12>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	607b      	str	r3, [r7, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <chk_chr+0x26>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	001a      	movs	r2, r3
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d1f2      	bne.n	8006cb6 <chk_chr+0xc>
	return *str;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
}
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b002      	add	sp, #8
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e027      	b.n	8006d40 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8006cf0:	4b25      	ldr	r3, [pc, #148]	; (8006d88 <chk_lock+0xac>)
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	0112      	lsls	r2, r2, #4
 8006cf6:	58d3      	ldr	r3, [r2, r3]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01c      	beq.n	8006d36 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006cfc:	4b22      	ldr	r3, [pc, #136]	; (8006d88 <chk_lock+0xac>)
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	0112      	lsls	r2, r2, #4
 8006d02:	58d2      	ldr	r2, [r2, r3]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d116      	bne.n	8006d3a <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8006d0c:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <chk_lock+0xac>)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	011b      	lsls	r3, r3, #4
 8006d12:	18d3      	adds	r3, r2, r3
 8006d14:	3304      	adds	r3, #4
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d10c      	bne.n	8006d3a <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006d20:	4a19      	ldr	r2, [pc, #100]	; (8006d88 <chk_lock+0xac>)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	18d3      	adds	r3, r2, r3
 8006d28:	3308      	adds	r3, #8
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d102      	bne.n	8006d3a <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006d34:	e007      	b.n	8006d46 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8006d36:	2301      	movs	r3, #1
 8006d38:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d9d4      	bls.n	8006cf0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d109      	bne.n	8006d60 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d102      	bne.n	8006d58 <chk_lock+0x7c>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d101      	bne.n	8006d5c <chk_lock+0x80>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e011      	b.n	8006d80 <chk_lock+0xa4>
 8006d5c:	2312      	movs	r3, #18
 8006d5e:	e00f      	b.n	8006d80 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d109      	bne.n	8006d7a <chk_lock+0x9e>
 8006d66:	4a08      	ldr	r2, [pc, #32]	; (8006d88 <chk_lock+0xac>)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	18d3      	adds	r3, r2, r3
 8006d6e:	330c      	adds	r3, #12
 8006d70:	881a      	ldrh	r2, [r3, #0]
 8006d72:	2380      	movs	r3, #128	; 0x80
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d101      	bne.n	8006d7e <chk_lock+0xa2>
 8006d7a:	2310      	movs	r3, #16
 8006d7c:	e000      	b.n	8006d80 <chk_lock+0xa4>
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	0018      	movs	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b004      	add	sp, #16
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	200002f8 	.word	0x200002f8

08006d8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
 8006d96:	e002      	b.n	8006d9e <enq_lock+0x12>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	607b      	str	r3, [r7, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d805      	bhi.n	8006db0 <enq_lock+0x24>
 8006da4:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <enq_lock+0x38>)
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	0112      	lsls	r2, r2, #4
 8006daa:	58d3      	ldr	r3, [r2, r3]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f3      	bne.n	8006d98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3b02      	subs	r3, #2
 8006db4:	1e5a      	subs	r2, r3, #1
 8006db6:	4193      	sbcs	r3, r2
 8006db8:	b2db      	uxtb	r3, r3
}
 8006dba:	0018      	movs	r0, r3
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	b002      	add	sp, #8
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	200002f8 	.word	0x200002f8

08006dc8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	e01e      	b.n	8006e16 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8006dd8:	4b3f      	ldr	r3, [pc, #252]	; (8006ed8 <inc_lock+0x110>)
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	0112      	lsls	r2, r2, #4
 8006dde:	58d2      	ldr	r2, [r2, r3]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d113      	bne.n	8006e10 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8006de8:	4a3b      	ldr	r2, [pc, #236]	; (8006ed8 <inc_lock+0x110>)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	18d3      	adds	r3, r2, r3
 8006df0:	3304      	adds	r3, #4
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d109      	bne.n	8006e10 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8006dfc:	4a36      	ldr	r2, [pc, #216]	; (8006ed8 <inc_lock+0x110>)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	18d3      	adds	r3, r2, r3
 8006e04:	3308      	adds	r3, #8
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d006      	beq.n	8006e1e <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d9dd      	bls.n	8006dd8 <inc_lock+0x10>
 8006e1c:	e000      	b.n	8006e20 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8006e1e:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d130      	bne.n	8006e88 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	e002      	b.n	8006e32 <inc_lock+0x6a>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d805      	bhi.n	8006e44 <inc_lock+0x7c>
 8006e38:	4b27      	ldr	r3, [pc, #156]	; (8006ed8 <inc_lock+0x110>)
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	0112      	lsls	r2, r2, #4
 8006e3e:	58d3      	ldr	r3, [r2, r3]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f3      	bne.n	8006e2c <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d101      	bne.n	8006e4e <inc_lock+0x86>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e03f      	b.n	8006ece <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6819      	ldr	r1, [r3, #0]
 8006e52:	4b21      	ldr	r3, [pc, #132]	; (8006ed8 <inc_lock+0x110>)
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	0112      	lsls	r2, r2, #4
 8006e58:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	491e      	ldr	r1, [pc, #120]	; (8006ed8 <inc_lock+0x110>)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	011b      	lsls	r3, r3, #4
 8006e64:	18cb      	adds	r3, r1, r3
 8006e66:	3304      	adds	r3, #4
 8006e68:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	695a      	ldr	r2, [r3, #20]
 8006e6e:	491a      	ldr	r1, [pc, #104]	; (8006ed8 <inc_lock+0x110>)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	18cb      	adds	r3, r1, r3
 8006e76:	3308      	adds	r3, #8
 8006e78:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006e7a:	4a17      	ldr	r2, [pc, #92]	; (8006ed8 <inc_lock+0x110>)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	18d3      	adds	r3, r2, r3
 8006e82:	330c      	adds	r3, #12
 8006e84:	2200      	movs	r2, #0
 8006e86:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d009      	beq.n	8006ea2 <inc_lock+0xda>
 8006e8e:	4a12      	ldr	r2, [pc, #72]	; (8006ed8 <inc_lock+0x110>)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	18d3      	adds	r3, r2, r3
 8006e96:	330c      	adds	r3, #12
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <inc_lock+0xda>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e015      	b.n	8006ece <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d108      	bne.n	8006eba <inc_lock+0xf2>
 8006ea8:	4a0b      	ldr	r2, [pc, #44]	; (8006ed8 <inc_lock+0x110>)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	18d3      	adds	r3, r2, r3
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	e001      	b.n	8006ebe <inc_lock+0xf6>
 8006eba:	2380      	movs	r3, #128	; 0x80
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	4906      	ldr	r1, [pc, #24]	; (8006ed8 <inc_lock+0x110>)
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	0112      	lsls	r2, r2, #4
 8006ec4:	188a      	adds	r2, r1, r2
 8006ec6:	320c      	adds	r2, #12
 8006ec8:	8013      	strh	r3, [r2, #0]

	return i + 1;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3301      	adds	r3, #1
}
 8006ece:	0018      	movs	r0, r3
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b004      	add	sp, #16
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	200002f8 	.word	0x200002f8

08006edc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	607b      	str	r3, [r7, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d832      	bhi.n	8006f56 <dec_lock+0x7a>
		n = Files[i].ctr;
 8006ef0:	200e      	movs	r0, #14
 8006ef2:	183b      	adds	r3, r7, r0
 8006ef4:	491d      	ldr	r1, [pc, #116]	; (8006f6c <dec_lock+0x90>)
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	0112      	lsls	r2, r2, #4
 8006efa:	188a      	adds	r2, r1, r2
 8006efc:	320c      	adds	r2, #12
 8006efe:	8812      	ldrh	r2, [r2, #0]
 8006f00:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006f02:	183b      	adds	r3, r7, r0
 8006f04:	881a      	ldrh	r2, [r3, #0]
 8006f06:	2380      	movs	r3, #128	; 0x80
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d102      	bne.n	8006f14 <dec_lock+0x38>
 8006f0e:	183b      	adds	r3, r7, r0
 8006f10:	2200      	movs	r2, #0
 8006f12:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006f14:	210e      	movs	r1, #14
 8006f16:	187b      	adds	r3, r7, r1
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d004      	beq.n	8006f28 <dec_lock+0x4c>
 8006f1e:	187b      	adds	r3, r7, r1
 8006f20:	881a      	ldrh	r2, [r3, #0]
 8006f22:	187b      	adds	r3, r7, r1
 8006f24:	3a01      	subs	r2, #1
 8006f26:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8006f28:	4a10      	ldr	r2, [pc, #64]	; (8006f6c <dec_lock+0x90>)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	18d3      	adds	r3, r2, r3
 8006f30:	330c      	adds	r3, #12
 8006f32:	210e      	movs	r1, #14
 8006f34:	187a      	adds	r2, r7, r1
 8006f36:	8812      	ldrh	r2, [r2, #0]
 8006f38:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006f3a:	187b      	adds	r3, r7, r1
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d104      	bne.n	8006f4c <dec_lock+0x70>
 8006f42:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <dec_lock+0x90>)
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	0112      	lsls	r2, r2, #4
 8006f48:	2100      	movs	r1, #0
 8006f4a:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8006f4c:	230d      	movs	r3, #13
 8006f4e:	18fb      	adds	r3, r7, r3
 8006f50:	2200      	movs	r2, #0
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	e003      	b.n	8006f5e <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006f56:	230d      	movs	r3, #13
 8006f58:	18fb      	adds	r3, r7, r3
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8006f5e:	230d      	movs	r3, #13
 8006f60:	18fb      	adds	r3, r7, r3
 8006f62:	781b      	ldrb	r3, [r3, #0]
}
 8006f64:	0018      	movs	r0, r3
 8006f66:	46bd      	mov	sp, r7
 8006f68:	b004      	add	sp, #16
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	200002f8 	.word	0x200002f8

08006f70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	e00e      	b.n	8006f9c <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <clear_lock+0x3c>)
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	0112      	lsls	r2, r2, #4
 8006f84:	58d3      	ldr	r3, [r2, r3]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d104      	bne.n	8006f96 <clear_lock+0x26>
 8006f8c:	4b07      	ldr	r3, [pc, #28]	; (8006fac <clear_lock+0x3c>)
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	0112      	lsls	r2, r2, #4
 8006f92:	2100      	movs	r1, #0
 8006f94:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d9ed      	bls.n	8006f7e <clear_lock+0xe>
	}
}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	46c0      	nop			; (mov r8, r8)
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b004      	add	sp, #16
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	200002f8 	.word	0x200002f8

08006fb0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006fb0:	b590      	push	{r4, r7, lr}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006fb8:	240f      	movs	r4, #15
 8006fba:	193b      	adds	r3, r7, r4
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	78db      	ldrb	r3, [r3, #3]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d034      	beq.n	8007032 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fcc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	7858      	ldrb	r0, [r3, #1]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3338      	adds	r3, #56	; 0x38
 8006fd6:	0019      	movs	r1, r3
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f7ff fd34 	bl	8006a48 <disk_write>
 8006fe0:	1e03      	subs	r3, r0, #0
 8006fe2:	d003      	beq.n	8006fec <sync_window+0x3c>
			res = FR_DISK_ERR;
 8006fe4:	193b      	adds	r3, r7, r4
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	e022      	b.n	8007032 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	1ad2      	subs	r2, r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d217      	bcs.n	8007032 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	789b      	ldrb	r3, [r3, #2]
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	e010      	b.n	800702c <sync_window+0x7c>
					wsect += fs->fsize;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	18d3      	adds	r3, r2, r3
 8007012:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	7858      	ldrb	r0, [r3, #1]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3338      	adds	r3, #56	; 0x38
 800701c:	0019      	movs	r1, r3
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	2301      	movs	r3, #1
 8007022:	f7ff fd11 	bl	8006a48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	3b01      	subs	r3, #1
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d8eb      	bhi.n	800700a <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8007032:	230f      	movs	r3, #15
 8007034:	18fb      	adds	r3, r7, r3
 8007036:	781b      	ldrb	r3, [r3, #0]
}
 8007038:	0018      	movs	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	b007      	add	sp, #28
 800703e:	bd90      	pop	{r4, r7, pc}

08007040 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007040:	b5b0      	push	{r4, r5, r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800704a:	250f      	movs	r5, #15
 800704c:	197b      	adds	r3, r7, r5
 800704e:	2200      	movs	r2, #0
 8007050:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d01f      	beq.n	800709c <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800705c:	197c      	adds	r4, r7, r5
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	0018      	movs	r0, r3
 8007062:	f7ff ffa5 	bl	8006fb0 <sync_window>
 8007066:	0003      	movs	r3, r0
 8007068:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800706a:	002c      	movs	r4, r5
 800706c:	193b      	adds	r3, r7, r4
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d113      	bne.n	800709c <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	7858      	ldrb	r0, [r3, #1]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3338      	adds	r3, #56	; 0x38
 800707c:	0019      	movs	r1, r3
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	2301      	movs	r3, #1
 8007082:	f7ff fcb9 	bl	80069f8 <disk_read>
 8007086:	1e03      	subs	r3, r0, #0
 8007088:	d005      	beq.n	8007096 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800708a:	2301      	movs	r3, #1
 800708c:	425b      	negs	r3, r3
 800708e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007090:	193b      	adds	r3, r7, r4
 8007092:	2201      	movs	r2, #1
 8007094:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800709c:	230f      	movs	r3, #15
 800709e:	18fb      	adds	r3, r7, r3
 80070a0:	781b      	ldrb	r3, [r3, #0]
}
 80070a2:	0018      	movs	r0, r3
 80070a4:	46bd      	mov	sp, r7
 80070a6:	b004      	add	sp, #16
 80070a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080070ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80070ac:	b5b0      	push	{r4, r5, r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80070b4:	250f      	movs	r5, #15
 80070b6:	197c      	adds	r4, r7, r5
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	0018      	movs	r0, r3
 80070bc:	f7ff ff78 	bl	8006fb0 <sync_window>
 80070c0:	0003      	movs	r3, r0
 80070c2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80070c4:	197b      	adds	r3, r7, r5
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d15e      	bne.n	800718a <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d14d      	bne.n	8007170 <sync_fs+0xc4>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	791b      	ldrb	r3, [r3, #4]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d149      	bne.n	8007170 <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3338      	adds	r3, #56	; 0x38
 80070e0:	0018      	movs	r0, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	899b      	ldrh	r3, [r3, #12]
 80070e6:	001a      	movs	r2, r3
 80070e8:	2100      	movs	r1, #0
 80070ea:	f7ff fda0 	bl	8006c2e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3338      	adds	r3, #56	; 0x38
 80070f2:	33ff      	adds	r3, #255	; 0xff
 80070f4:	33ff      	adds	r3, #255	; 0xff
 80070f6:	4a28      	ldr	r2, [pc, #160]	; (8007198 <sync_fs+0xec>)
 80070f8:	0011      	movs	r1, r2
 80070fa:	0018      	movs	r0, r3
 80070fc:	f7ff fd30 	bl	8006b60 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3338      	adds	r3, #56	; 0x38
 8007104:	4a25      	ldr	r2, [pc, #148]	; (800719c <sync_fs+0xf0>)
 8007106:	0011      	movs	r1, r2
 8007108:	0018      	movs	r0, r3
 800710a:	f7ff fd47 	bl	8006b9c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3338      	adds	r3, #56	; 0x38
 8007112:	33e5      	adds	r3, #229	; 0xe5
 8007114:	33ff      	adds	r3, #255	; 0xff
 8007116:	4a22      	ldr	r2, [pc, #136]	; (80071a0 <sync_fs+0xf4>)
 8007118:	0011      	movs	r1, r2
 800711a:	0018      	movs	r0, r3
 800711c:	f7ff fd3e 	bl	8006b9c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3338      	adds	r3, #56	; 0x38
 8007124:	33e9      	adds	r3, #233	; 0xe9
 8007126:	33ff      	adds	r3, #255	; 0xff
 8007128:	001a      	movs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	0019      	movs	r1, r3
 8007130:	0010      	movs	r0, r2
 8007132:	f7ff fd33 	bl	8006b9c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3338      	adds	r3, #56	; 0x38
 800713a:	33ed      	adds	r3, #237	; 0xed
 800713c:	33ff      	adds	r3, #255	; 0xff
 800713e:	001a      	movs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	0019      	movs	r1, r3
 8007146:	0010      	movs	r0, r2
 8007148:	f7ff fd28 	bl	8006b9c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	7858      	ldrb	r0, [r3, #1]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3338      	adds	r3, #56	; 0x38
 800715e:	0019      	movs	r1, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007164:	2301      	movs	r3, #1
 8007166:	f7ff fc6f 	bl	8006a48 <disk_write>
			fs->fsi_flag = 0;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	785b      	ldrb	r3, [r3, #1]
 8007174:	2200      	movs	r2, #0
 8007176:	2100      	movs	r1, #0
 8007178:	0018      	movs	r0, r3
 800717a:	f7ff fc8d 	bl	8006a98 <disk_ioctl>
 800717e:	1e03      	subs	r3, r0, #0
 8007180:	d003      	beq.n	800718a <sync_fs+0xde>
 8007182:	230f      	movs	r3, #15
 8007184:	18fb      	adds	r3, r7, r3
 8007186:	2201      	movs	r2, #1
 8007188:	701a      	strb	r2, [r3, #0]
	}

	return res;
 800718a:	230f      	movs	r3, #15
 800718c:	18fb      	adds	r3, r7, r3
 800718e:	781b      	ldrb	r3, [r3, #0]
}
 8007190:	0018      	movs	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	b004      	add	sp, #16
 8007196:	bdb0      	pop	{r4, r5, r7, pc}
 8007198:	0000aa55 	.word	0x0000aa55
 800719c:	41615252 	.word	0x41615252
 80071a0:	61417272 	.word	0x61417272

080071a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	3b02      	subs	r3, #2
 80071b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	3b02      	subs	r3, #2
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d301      	bcc.n	80071c4 <clust2sect+0x20>
 80071c0:	2300      	movs	r3, #0
 80071c2:	e007      	b.n	80071d4 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	895b      	ldrh	r3, [r3, #10]
 80071c8:	001a      	movs	r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	435a      	muls	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	18d3      	adds	r3, r2, r3
}
 80071d4:	0018      	movs	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b002      	add	sp, #8
 80071da:	bd80      	pop	{r7, pc}

080071dc <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80071dc:	b590      	push	{r4, r7, lr}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d904      	bls.n	80071fc <get_fat+0x20>
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d302      	bcc.n	8007202 <get_fat+0x26>
		val = 1;	/* Internal error */
 80071fc:	2301      	movs	r3, #1
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	e0c2      	b.n	8007388 <get_fat+0x1ac>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007202:	2301      	movs	r3, #1
 8007204:	425b      	negs	r3, r3
 8007206:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b03      	cmp	r3, #3
 800720e:	d100      	bne.n	8007212 <get_fat+0x36>
 8007210:	e088      	b.n	8007324 <get_fat+0x148>
 8007212:	dd00      	ble.n	8007216 <get_fat+0x3a>
 8007214:	e0ae      	b.n	8007374 <get_fat+0x198>
 8007216:	2b01      	cmp	r3, #1
 8007218:	d002      	beq.n	8007220 <get_fat+0x44>
 800721a:	2b02      	cmp	r3, #2
 800721c:	d05c      	beq.n	80072d8 <get_fat+0xfc>
 800721e:	e0a9      	b.n	8007374 <get_fat+0x198>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	18d3      	adds	r3, r2, r3
 800722c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	899b      	ldrh	r3, [r3, #12]
 8007236:	0019      	movs	r1, r3
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7f8 ff81 	bl	8000140 <__udivsi3>
 800723e:	0003      	movs	r3, r0
 8007240:	18e2      	adds	r2, r4, r3
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	0011      	movs	r1, r2
 8007246:	0018      	movs	r0, r3
 8007248:	f7ff fefa 	bl	8007040 <move_window>
 800724c:	1e03      	subs	r3, r0, #0
 800724e:	d000      	beq.n	8007252 <get_fat+0x76>
 8007250:	e093      	b.n	800737a <get_fat+0x19e>
			wc = fs->win[bc++ % SS(fs)];
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	60fa      	str	r2, [r7, #12]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	8992      	ldrh	r2, [r2, #12]
 800725c:	0011      	movs	r1, r2
 800725e:	0018      	movs	r0, r3
 8007260:	f7f8 fff4 	bl	800024c <__aeabi_uidivmod>
 8007264:	000b      	movs	r3, r1
 8007266:	0019      	movs	r1, r3
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2238      	movs	r2, #56	; 0x38
 800726c:	185b      	adds	r3, r3, r1
 800726e:	189b      	adds	r3, r3, r2
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	899b      	ldrh	r3, [r3, #12]
 800727c:	0019      	movs	r1, r3
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7f8 ff5e 	bl	8000140 <__udivsi3>
 8007284:	0003      	movs	r3, r0
 8007286:	18e2      	adds	r2, r4, r3
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	0011      	movs	r1, r2
 800728c:	0018      	movs	r0, r3
 800728e:	f7ff fed7 	bl	8007040 <move_window>
 8007292:	1e03      	subs	r3, r0, #0
 8007294:	d000      	beq.n	8007298 <get_fat+0xbc>
 8007296:	e072      	b.n	800737e <get_fat+0x1a2>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	899b      	ldrh	r3, [r3, #12]
 800729c:	001a      	movs	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	0011      	movs	r1, r2
 80072a2:	0018      	movs	r0, r3
 80072a4:	f7f8 ffd2 	bl	800024c <__aeabi_uidivmod>
 80072a8:	000b      	movs	r3, r1
 80072aa:	0019      	movs	r1, r3
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2238      	movs	r2, #56	; 0x38
 80072b0:	185b      	adds	r3, r3, r1
 80072b2:	189b      	adds	r3, r3, r2
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	021b      	lsls	r3, r3, #8
 80072b8:	001a      	movs	r2, r3
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	4313      	orrs	r3, r2
 80072be:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2201      	movs	r2, #1
 80072c4:	4013      	ands	r3, r2
 80072c6:	d002      	beq.n	80072ce <get_fat+0xf2>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	091b      	lsrs	r3, r3, #4
 80072cc:	e002      	b.n	80072d4 <get_fat+0xf8>
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	051b      	lsls	r3, r3, #20
 80072d2:	0d1b      	lsrs	r3, r3, #20
 80072d4:	617b      	str	r3, [r7, #20]
			break;
 80072d6:	e057      	b.n	8007388 <get_fat+0x1ac>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	899b      	ldrh	r3, [r3, #12]
 80072e0:	085b      	lsrs	r3, r3, #1
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	0019      	movs	r1, r3
 80072e6:	6838      	ldr	r0, [r7, #0]
 80072e8:	f7f8 ff2a 	bl	8000140 <__udivsi3>
 80072ec:	0003      	movs	r3, r0
 80072ee:	18e2      	adds	r2, r4, r3
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	0011      	movs	r1, r2
 80072f4:	0018      	movs	r0, r3
 80072f6:	f7ff fea3 	bl	8007040 <move_window>
 80072fa:	1e03      	subs	r3, r0, #0
 80072fc:	d141      	bne.n	8007382 <get_fat+0x1a6>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	3338      	adds	r3, #56	; 0x38
 8007302:	001c      	movs	r4, r3
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	005a      	lsls	r2, r3, #1
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	899b      	ldrh	r3, [r3, #12]
 800730c:	0019      	movs	r1, r3
 800730e:	0010      	movs	r0, r2
 8007310:	f7f8 ff9c 	bl	800024c <__aeabi_uidivmod>
 8007314:	000b      	movs	r3, r1
 8007316:	18e3      	adds	r3, r4, r3
 8007318:	0018      	movs	r0, r3
 800731a:	f7ff fbe5 	bl	8006ae8 <ld_word>
 800731e:	0003      	movs	r3, r0
 8007320:	617b      	str	r3, [r7, #20]
			break;
 8007322:	e031      	b.n	8007388 <get_fat+0x1ac>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	899b      	ldrh	r3, [r3, #12]
 800732c:	089b      	lsrs	r3, r3, #2
 800732e:	b29b      	uxth	r3, r3
 8007330:	0019      	movs	r1, r3
 8007332:	6838      	ldr	r0, [r7, #0]
 8007334:	f7f8 ff04 	bl	8000140 <__udivsi3>
 8007338:	0003      	movs	r3, r0
 800733a:	18e2      	adds	r2, r4, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	0011      	movs	r1, r2
 8007340:	0018      	movs	r0, r3
 8007342:	f7ff fe7d 	bl	8007040 <move_window>
 8007346:	1e03      	subs	r3, r0, #0
 8007348:	d11d      	bne.n	8007386 <get_fat+0x1aa>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3338      	adds	r3, #56	; 0x38
 800734e:	001c      	movs	r4, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	009a      	lsls	r2, r3, #2
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	899b      	ldrh	r3, [r3, #12]
 8007358:	0019      	movs	r1, r3
 800735a:	0010      	movs	r0, r2
 800735c:	f7f8 ff76 	bl	800024c <__aeabi_uidivmod>
 8007360:	000b      	movs	r3, r1
 8007362:	18e3      	adds	r3, r4, r3
 8007364:	0018      	movs	r0, r3
 8007366:	f7ff fbda 	bl	8006b1e <ld_dword>
 800736a:	0003      	movs	r3, r0
 800736c:	011b      	lsls	r3, r3, #4
 800736e:	091b      	lsrs	r3, r3, #4
 8007370:	617b      	str	r3, [r7, #20]
			break;
 8007372:	e009      	b.n	8007388 <get_fat+0x1ac>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007374:	2301      	movs	r3, #1
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	e006      	b.n	8007388 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	e004      	b.n	8007388 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800737e:	46c0      	nop			; (mov r8, r8)
 8007380:	e002      	b.n	8007388 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	e000      	b.n	8007388 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007386:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8007388:	697b      	ldr	r3, [r7, #20]
}
 800738a:	0018      	movs	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	b007      	add	sp, #28
 8007390:	bd90      	pop	{r4, r7, pc}

08007392 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007392:	b5b0      	push	{r4, r5, r7, lr}
 8007394:	b088      	sub	sp, #32
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800739e:	231f      	movs	r3, #31
 80073a0:	18fb      	adds	r3, r7, r3
 80073a2:	2202      	movs	r2, #2
 80073a4:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d800      	bhi.n	80073ae <put_fat+0x1c>
 80073ac:	e11a      	b.n	80075e4 <put_fat+0x252>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d300      	bcc.n	80073ba <put_fat+0x28>
 80073b8:	e114      	b.n	80075e4 <put_fat+0x252>
		switch (fs->fs_type) {
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d100      	bne.n	80073c4 <put_fat+0x32>
 80073c2:	e0c1      	b.n	8007548 <put_fat+0x1b6>
 80073c4:	dd00      	ble.n	80073c8 <put_fat+0x36>
 80073c6:	e10d      	b.n	80075e4 <put_fat+0x252>
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d003      	beq.n	80073d4 <put_fat+0x42>
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d100      	bne.n	80073d2 <put_fat+0x40>
 80073d0:	e08a      	b.n	80074e8 <put_fat+0x156>
 80073d2:	e107      	b.n	80075e4 <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	61bb      	str	r3, [r7, #24]
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	18d3      	adds	r3, r2, r3
 80073e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	899b      	ldrh	r3, [r3, #12]
 80073ea:	0019      	movs	r1, r3
 80073ec:	69b8      	ldr	r0, [r7, #24]
 80073ee:	f7f8 fea7 	bl	8000140 <__udivsi3>
 80073f2:	0003      	movs	r3, r0
 80073f4:	18e2      	adds	r2, r4, r3
 80073f6:	251f      	movs	r5, #31
 80073f8:	197c      	adds	r4, r7, r5
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	0011      	movs	r1, r2
 80073fe:	0018      	movs	r0, r3
 8007400:	f7ff fe1e 	bl	8007040 <move_window>
 8007404:	0003      	movs	r3, r0
 8007406:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007408:	197b      	adds	r3, r7, r5
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d000      	beq.n	8007412 <put_fat+0x80>
 8007410:	e0e1      	b.n	80075d6 <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3338      	adds	r3, #56	; 0x38
 8007416:	001c      	movs	r4, r3
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	61ba      	str	r2, [r7, #24]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	8992      	ldrh	r2, [r2, #12]
 8007422:	0011      	movs	r1, r2
 8007424:	0018      	movs	r0, r3
 8007426:	f7f8 ff11 	bl	800024c <__aeabi_uidivmod>
 800742a:	000b      	movs	r3, r1
 800742c:	18e3      	adds	r3, r4, r3
 800742e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2201      	movs	r2, #1
 8007434:	4013      	ands	r3, r2
 8007436:	d00d      	beq.n	8007454 <put_fat+0xc2>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	b25b      	sxtb	r3, r3
 800743e:	220f      	movs	r2, #15
 8007440:	4013      	ands	r3, r2
 8007442:	b25a      	sxtb	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	b25b      	sxtb	r3, r3
 800744c:	4313      	orrs	r3, r2
 800744e:	b25b      	sxtb	r3, r3
 8007450:	b2db      	uxtb	r3, r3
 8007452:	e001      	b.n	8007458 <put_fat+0xc6>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	899b      	ldrh	r3, [r3, #12]
 800746a:	0019      	movs	r1, r3
 800746c:	69b8      	ldr	r0, [r7, #24]
 800746e:	f7f8 fe67 	bl	8000140 <__udivsi3>
 8007472:	0003      	movs	r3, r0
 8007474:	18e2      	adds	r2, r4, r3
 8007476:	251f      	movs	r5, #31
 8007478:	197c      	adds	r4, r7, r5
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	0011      	movs	r1, r2
 800747e:	0018      	movs	r0, r3
 8007480:	f7ff fdde 	bl	8007040 <move_window>
 8007484:	0003      	movs	r3, r0
 8007486:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007488:	197b      	adds	r3, r7, r5
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d000      	beq.n	8007492 <put_fat+0x100>
 8007490:	e0a3      	b.n	80075da <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3338      	adds	r3, #56	; 0x38
 8007496:	001c      	movs	r4, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	899b      	ldrh	r3, [r3, #12]
 800749c:	001a      	movs	r2, r3
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	0011      	movs	r1, r2
 80074a2:	0018      	movs	r0, r3
 80074a4:	f7f8 fed2 	bl	800024c <__aeabi_uidivmod>
 80074a8:	000b      	movs	r3, r1
 80074aa:	18e3      	adds	r3, r4, r3
 80074ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2201      	movs	r2, #1
 80074b2:	4013      	ands	r3, r2
 80074b4:	d003      	beq.n	80074be <put_fat+0x12c>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	091b      	lsrs	r3, r3, #4
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	e00e      	b.n	80074dc <put_fat+0x14a>
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	b25b      	sxtb	r3, r3
 80074c4:	220f      	movs	r2, #15
 80074c6:	4393      	bics	r3, r2
 80074c8:	b25a      	sxtb	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	0a1b      	lsrs	r3, r3, #8
 80074ce:	b25b      	sxtb	r3, r3
 80074d0:	210f      	movs	r1, #15
 80074d2:	400b      	ands	r3, r1
 80074d4:	b25b      	sxtb	r3, r3
 80074d6:	4313      	orrs	r3, r2
 80074d8:	b25b      	sxtb	r3, r3
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	70da      	strb	r2, [r3, #3]
			break;
 80074e6:	e07d      	b.n	80075e4 <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	899b      	ldrh	r3, [r3, #12]
 80074f0:	085b      	lsrs	r3, r3, #1
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	0019      	movs	r1, r3
 80074f6:	68b8      	ldr	r0, [r7, #8]
 80074f8:	f7f8 fe22 	bl	8000140 <__udivsi3>
 80074fc:	0003      	movs	r3, r0
 80074fe:	18e2      	adds	r2, r4, r3
 8007500:	251f      	movs	r5, #31
 8007502:	197c      	adds	r4, r7, r5
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	0011      	movs	r1, r2
 8007508:	0018      	movs	r0, r3
 800750a:	f7ff fd99 	bl	8007040 <move_window>
 800750e:	0003      	movs	r3, r0
 8007510:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007512:	197b      	adds	r3, r7, r5
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d161      	bne.n	80075de <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3338      	adds	r3, #56	; 0x38
 800751e:	001c      	movs	r4, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	005a      	lsls	r2, r3, #1
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	899b      	ldrh	r3, [r3, #12]
 8007528:	0019      	movs	r1, r3
 800752a:	0010      	movs	r0, r2
 800752c:	f7f8 fe8e 	bl	800024c <__aeabi_uidivmod>
 8007530:	000b      	movs	r3, r1
 8007532:	18e3      	adds	r3, r4, r3
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	b292      	uxth	r2, r2
 8007538:	0011      	movs	r1, r2
 800753a:	0018      	movs	r0, r3
 800753c:	f7ff fb10 	bl	8006b60 <st_word>
			fs->wflag = 1;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2201      	movs	r2, #1
 8007544:	70da      	strb	r2, [r3, #3]
			break;
 8007546:	e04d      	b.n	80075e4 <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	899b      	ldrh	r3, [r3, #12]
 8007550:	089b      	lsrs	r3, r3, #2
 8007552:	b29b      	uxth	r3, r3
 8007554:	0019      	movs	r1, r3
 8007556:	68b8      	ldr	r0, [r7, #8]
 8007558:	f7f8 fdf2 	bl	8000140 <__udivsi3>
 800755c:	0003      	movs	r3, r0
 800755e:	18e2      	adds	r2, r4, r3
 8007560:	251f      	movs	r5, #31
 8007562:	197c      	adds	r4, r7, r5
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	0011      	movs	r1, r2
 8007568:	0018      	movs	r0, r3
 800756a:	f7ff fd69 	bl	8007040 <move_window>
 800756e:	0003      	movs	r3, r0
 8007570:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007572:	197b      	adds	r3, r7, r5
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d133      	bne.n	80075e2 <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	091c      	lsrs	r4, r3, #4
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3338      	adds	r3, #56	; 0x38
 8007584:	001d      	movs	r5, r3
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	009a      	lsls	r2, r3, #2
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	899b      	ldrh	r3, [r3, #12]
 800758e:	0019      	movs	r1, r3
 8007590:	0010      	movs	r0, r2
 8007592:	f7f8 fe5b 	bl	800024c <__aeabi_uidivmod>
 8007596:	000b      	movs	r3, r1
 8007598:	18eb      	adds	r3, r5, r3
 800759a:	0018      	movs	r0, r3
 800759c:	f7ff fabf 	bl	8006b1e <ld_dword>
 80075a0:	0003      	movs	r3, r0
 80075a2:	0f1b      	lsrs	r3, r3, #28
 80075a4:	071b      	lsls	r3, r3, #28
 80075a6:	4323      	orrs	r3, r4
 80075a8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3338      	adds	r3, #56	; 0x38
 80075ae:	001c      	movs	r4, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	009a      	lsls	r2, r3, #2
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	899b      	ldrh	r3, [r3, #12]
 80075b8:	0019      	movs	r1, r3
 80075ba:	0010      	movs	r0, r2
 80075bc:	f7f8 fe46 	bl	800024c <__aeabi_uidivmod>
 80075c0:	000b      	movs	r3, r1
 80075c2:	18e3      	adds	r3, r4, r3
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	0011      	movs	r1, r2
 80075c8:	0018      	movs	r0, r3
 80075ca:	f7ff fae7 	bl	8006b9c <st_dword>
			fs->wflag = 1;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	70da      	strb	r2, [r3, #3]
			break;
 80075d4:	e006      	b.n	80075e4 <put_fat+0x252>
			if (res != FR_OK) break;
 80075d6:	46c0      	nop			; (mov r8, r8)
 80075d8:	e004      	b.n	80075e4 <put_fat+0x252>
			if (res != FR_OK) break;
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	e002      	b.n	80075e4 <put_fat+0x252>
			if (res != FR_OK) break;
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	e000      	b.n	80075e4 <put_fat+0x252>
			if (res != FR_OK) break;
 80075e2:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 80075e4:	231f      	movs	r3, #31
 80075e6:	18fb      	adds	r3, r7, r3
 80075e8:	781b      	ldrb	r3, [r3, #0]
}
 80075ea:	0018      	movs	r0, r3
 80075ec:	46bd      	mov	sp, r7
 80075ee:	b008      	add	sp, #32
 80075f0:	bdb0      	pop	{r4, r5, r7, pc}

080075f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80075f2:	b5b0      	push	{r4, r5, r7, lr}
 80075f4:	b088      	sub	sp, #32
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80075fe:	231f      	movs	r3, #31
 8007600:	18fb      	adds	r3, r7, r3
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d904      	bls.n	800761c <remove_chain+0x2a>
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	429a      	cmp	r2, r3
 800761a:	d301      	bcc.n	8007620 <remove_chain+0x2e>
 800761c:	2302      	movs	r3, #2
 800761e:	e057      	b.n	80076d0 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d011      	beq.n	800764a <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007626:	251f      	movs	r5, #31
 8007628:	197c      	adds	r4, r7, r5
 800762a:	2301      	movs	r3, #1
 800762c:	425a      	negs	r2, r3
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	0018      	movs	r0, r3
 8007634:	f7ff fead 	bl	8007392 <put_fat>
 8007638:	0003      	movs	r3, r0
 800763a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 800763c:	197b      	adds	r3, r7, r5
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <remove_chain+0x58>
 8007644:	197b      	adds	r3, r7, r5
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	e042      	b.n	80076d0 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	0011      	movs	r1, r2
 8007650:	0018      	movs	r0, r3
 8007652:	f7ff fdc3 	bl	80071dc <get_fat>
 8007656:	0003      	movs	r3, r0
 8007658:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d035      	beq.n	80076cc <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <remove_chain+0x78>
 8007666:	2302      	movs	r3, #2
 8007668:	e032      	b.n	80076d0 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	3301      	adds	r3, #1
 800766e:	d101      	bne.n	8007674 <remove_chain+0x82>
 8007670:	2301      	movs	r3, #1
 8007672:	e02d      	b.n	80076d0 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007674:	251f      	movs	r5, #31
 8007676:	197c      	adds	r4, r7, r5
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	2200      	movs	r2, #0
 800767e:	0018      	movs	r0, r3
 8007680:	f7ff fe87 	bl	8007392 <put_fat>
 8007684:	0003      	movs	r3, r0
 8007686:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8007688:	197b      	adds	r3, r7, r5
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <remove_chain+0xa4>
 8007690:	197b      	adds	r3, r7, r5
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	e01c      	b.n	80076d0 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	699a      	ldr	r2, [r3, #24]
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	3b02      	subs	r3, #2
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d20b      	bcs.n	80076bc <remove_chain+0xca>
			fs->free_clst++;
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	791b      	ldrb	r3, [r3, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	4313      	orrs	r3, r2
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d3bf      	bcc.n	800764a <remove_chain+0x58>
 80076ca:	e000      	b.n	80076ce <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 80076cc:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	0018      	movs	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b008      	add	sp, #32
 80076d6:	bdb0      	pop	{r4, r5, r7, pc}

080076d8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80076d8:	b5b0      	push	{r4, r5, r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10d      	bne.n	800770a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d004      	beq.n	8007704 <create_chain+0x2c>
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	429a      	cmp	r2, r3
 8007702:	d31d      	bcc.n	8007740 <create_chain+0x68>
 8007704:	2301      	movs	r3, #1
 8007706:	61bb      	str	r3, [r7, #24]
 8007708:	e01a      	b.n	8007740 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	0011      	movs	r1, r2
 8007710:	0018      	movs	r0, r3
 8007712:	f7ff fd63 	bl	80071dc <get_fat>
 8007716:	0003      	movs	r3, r0
 8007718:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d801      	bhi.n	8007724 <create_chain+0x4c>
 8007720:	2301      	movs	r3, #1
 8007722:	e07b      	b.n	800781c <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3301      	adds	r3, #1
 8007728:	d101      	bne.n	800772e <create_chain+0x56>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	e076      	b.n	800781c <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	429a      	cmp	r2, r3
 8007736:	d201      	bcs.n	800773c <create_chain+0x64>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	e06f      	b.n	800781c <create_chain+0x144>
		scl = clst;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	3301      	adds	r3, #1
 8007748:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	429a      	cmp	r2, r3
 8007752:	d307      	bcc.n	8007764 <create_chain+0x8c>
				ncl = 2;
 8007754:	2302      	movs	r3, #2
 8007756:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007758:	69fa      	ldr	r2, [r7, #28]
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	429a      	cmp	r2, r3
 800775e:	d901      	bls.n	8007764 <create_chain+0x8c>
 8007760:	2300      	movs	r3, #0
 8007762:	e05b      	b.n	800781c <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	0011      	movs	r1, r2
 800776a:	0018      	movs	r0, r3
 800776c:	f7ff fd36 	bl	80071dc <get_fat>
 8007770:	0003      	movs	r3, r0
 8007772:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00d      	beq.n	8007796 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d002      	beq.n	8007786 <create_chain+0xae>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3301      	adds	r3, #1
 8007784:	d101      	bne.n	800778a <create_chain+0xb2>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	e048      	b.n	800781c <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	429a      	cmp	r2, r3
 8007790:	d1d8      	bne.n	8007744 <create_chain+0x6c>
 8007792:	2300      	movs	r3, #0
 8007794:	e042      	b.n	800781c <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8007796:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007798:	2517      	movs	r5, #23
 800779a:	197c      	adds	r4, r7, r5
 800779c:	2301      	movs	r3, #1
 800779e:	425a      	negs	r2, r3
 80077a0:	69f9      	ldr	r1, [r7, #28]
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	0018      	movs	r0, r3
 80077a6:	f7ff fdf4 	bl	8007392 <put_fat>
 80077aa:	0003      	movs	r3, r0
 80077ac:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 80077ae:	197b      	adds	r3, r7, r5
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10b      	bne.n	80077ce <create_chain+0xf6>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d008      	beq.n	80077ce <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80077bc:	197c      	adds	r4, r7, r5
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	0018      	movs	r0, r3
 80077c6:	f7ff fde4 	bl	8007392 <put_fat>
 80077ca:	0003      	movs	r3, r0
 80077cc:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80077ce:	2317      	movs	r3, #23
 80077d0:	18fb      	adds	r3, r7, r3
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d116      	bne.n	8007806 <create_chain+0x12e>
		fs->last_clst = ncl;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	699a      	ldr	r2, [r3, #24]
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	3b02      	subs	r3, #2
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d804      	bhi.n	80077f6 <create_chain+0x11e>
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	1e5a      	subs	r2, r3, #1
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	791b      	ldrb	r3, [r3, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	4313      	orrs	r3, r2
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	711a      	strb	r2, [r3, #4]
 8007804:	e009      	b.n	800781a <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007806:	2317      	movs	r3, #23
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d102      	bne.n	8007816 <create_chain+0x13e>
 8007810:	2301      	movs	r3, #1
 8007812:	425b      	negs	r3, r3
 8007814:	e000      	b.n	8007818 <create_chain+0x140>
 8007816:	2301      	movs	r3, #1
 8007818:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800781a:	69fb      	ldr	r3, [r7, #28]
}
 800781c:	0018      	movs	r0, r3
 800781e:	46bd      	mov	sp, r7
 8007820:	b008      	add	sp, #32
 8007822:	bdb0      	pop	{r4, r5, r7, pc}

08007824 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	3304      	adds	r3, #4
 800783a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	899b      	ldrh	r3, [r3, #12]
 8007840:	0019      	movs	r1, r3
 8007842:	6838      	ldr	r0, [r7, #0]
 8007844:	f7f8 fc7c 	bl	8000140 <__udivsi3>
 8007848:	0003      	movs	r3, r0
 800784a:	001a      	movs	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	895b      	ldrh	r3, [r3, #10]
 8007850:	0019      	movs	r1, r3
 8007852:	0010      	movs	r0, r2
 8007854:	f7f8 fc74 	bl	8000140 <__udivsi3>
 8007858:	0003      	movs	r3, r0
 800785a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	1d1a      	adds	r2, r3, #4
 8007860:	613a      	str	r2, [r7, #16]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <clmt_clust+0x4c>
 800786c:	2300      	movs	r3, #0
 800786e:	e010      	b.n	8007892 <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	429a      	cmp	r2, r3
 8007876:	d307      	bcc.n	8007888 <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	3304      	adds	r3, #4
 8007884:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007886:	e7e9      	b.n	800785c <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 8007888:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	18d3      	adds	r3, r2, r3
}
 8007892:	0018      	movs	r0, r3
 8007894:	46bd      	mov	sp, r7
 8007896:	b006      	add	sp, #24
 8007898:	bd80      	pop	{r7, pc}

0800789a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800789a:	b590      	push	{r4, r7, lr}
 800789c:	b087      	sub	sp, #28
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	2380      	movs	r3, #128	; 0x80
 80078ae:	039b      	lsls	r3, r3, #14
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d203      	bcs.n	80078bc <dir_sdi+0x22>
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	221f      	movs	r2, #31
 80078b8:	4013      	ands	r3, r2
 80078ba:	d001      	beq.n	80078c0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80078bc:	2302      	movs	r3, #2
 80078be:	e074      	b.n	80079aa <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <dir_sdi+0x46>
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d902      	bls.n	80078e0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10c      	bne.n	8007900 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	8912      	ldrh	r2, [r2, #8]
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d301      	bcc.n	80078f6 <dir_sdi+0x5c>
 80078f2:	2302      	movs	r3, #2
 80078f4:	e059      	b.n	80079aa <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	61da      	str	r2, [r3, #28]
 80078fe:	e02f      	b.n	8007960 <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	895b      	ldrh	r3, [r3, #10]
 8007904:	001a      	movs	r2, r3
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	899b      	ldrh	r3, [r3, #12]
 800790a:	4353      	muls	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800790e:	e01a      	b.n	8007946 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	0011      	movs	r1, r2
 8007916:	0018      	movs	r0, r3
 8007918:	f7ff fc60 	bl	80071dc <get_fat>
 800791c:	0003      	movs	r3, r0
 800791e:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	3301      	adds	r3, #1
 8007924:	d101      	bne.n	800792a <dir_sdi+0x90>
 8007926:	2301      	movs	r3, #1
 8007928:	e03f      	b.n	80079aa <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d904      	bls.n	800793a <dir_sdi+0xa0>
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	429a      	cmp	r2, r3
 8007938:	d301      	bcc.n	800793e <dir_sdi+0xa4>
 800793a:	2302      	movs	r3, #2
 800793c:	e035      	b.n	80079aa <dir_sdi+0x110>
			ofs -= csz;
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	429a      	cmp	r2, r3
 800794c:	d2e0      	bcs.n	8007910 <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	0011      	movs	r1, r2
 8007954:	0018      	movs	r0, r3
 8007956:	f7ff fc25 	bl	80071a4 <clust2sect>
 800795a:	0002      	movs	r2, r0
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <dir_sdi+0xd8>
 800796e:	2302      	movs	r3, #2
 8007970:	e01b      	b.n	80079aa <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69dc      	ldr	r4, [r3, #28]
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	899b      	ldrh	r3, [r3, #12]
 800797a:	0019      	movs	r1, r3
 800797c:	6838      	ldr	r0, [r7, #0]
 800797e:	f7f8 fbdf 	bl	8000140 <__udivsi3>
 8007982:	0003      	movs	r3, r0
 8007984:	18e2      	adds	r2, r4, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	3338      	adds	r3, #56	; 0x38
 800798e:	001c      	movs	r4, r3
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	899b      	ldrh	r3, [r3, #12]
 8007994:	001a      	movs	r2, r3
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	0011      	movs	r1, r2
 800799a:	0018      	movs	r0, r3
 800799c:	f7f8 fc56 	bl	800024c <__aeabi_uidivmod>
 80079a0:	000b      	movs	r3, r1
 80079a2:	18e2      	adds	r2, r4, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	0018      	movs	r0, r3
 80079ac:	46bd      	mov	sp, r7
 80079ae:	b007      	add	sp, #28
 80079b0:	bd90      	pop	{r4, r7, pc}

080079b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80079b2:	b590      	push	{r4, r7, lr}
 80079b4:	b087      	sub	sp, #28
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	3320      	adds	r3, #32
 80079c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d004      	beq.n	80079dc <dir_next+0x2a>
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	2380      	movs	r3, #128	; 0x80
 80079d6:	039b      	lsls	r3, r3, #14
 80079d8:	429a      	cmp	r2, r3
 80079da:	d301      	bcc.n	80079e0 <dir_next+0x2e>
 80079dc:	2304      	movs	r3, #4
 80079de:	e0c0      	b.n	8007b62 <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	899b      	ldrh	r3, [r3, #12]
 80079e4:	001a      	movs	r2, r3
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	0011      	movs	r1, r2
 80079ea:	0018      	movs	r0, r3
 80079ec:	f7f8 fc2e 	bl	800024c <__aeabi_uidivmod>
 80079f0:	1e0b      	subs	r3, r1, #0
 80079f2:	d000      	beq.n	80079f6 <dir_next+0x44>
 80079f4:	e0a2      	b.n	8007b3c <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10b      	bne.n	8007a20 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	095b      	lsrs	r3, r3, #5
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	8912      	ldrh	r2, [r2, #8]
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d200      	bcs.n	8007a16 <dir_next+0x64>
 8007a14:	e092      	b.n	8007b3c <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	61da      	str	r2, [r3, #28]
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	e0a0      	b.n	8007b62 <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	899b      	ldrh	r3, [r3, #12]
 8007a24:	0019      	movs	r1, r3
 8007a26:	68b8      	ldr	r0, [r7, #8]
 8007a28:	f7f8 fb8a 	bl	8000140 <__udivsi3>
 8007a2c:	0003      	movs	r3, r0
 8007a2e:	001a      	movs	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	895b      	ldrh	r3, [r3, #10]
 8007a34:	3b01      	subs	r3, #1
 8007a36:	4013      	ands	r3, r2
 8007a38:	d000      	beq.n	8007a3c <dir_next+0x8a>
 8007a3a:	e07f      	b.n	8007b3c <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	0019      	movs	r1, r3
 8007a44:	0010      	movs	r0, r2
 8007a46:	f7ff fbc9 	bl	80071dc <get_fat>
 8007a4a:	0003      	movs	r3, r0
 8007a4c:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d801      	bhi.n	8007a58 <dir_next+0xa6>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e084      	b.n	8007b62 <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	d101      	bne.n	8007a62 <dir_next+0xb0>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e07f      	b.n	8007b62 <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d35b      	bcc.n	8007b24 <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d104      	bne.n	8007a7c <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	61da      	str	r2, [r3, #28]
 8007a78:	2304      	movs	r3, #4
 8007a7a:	e072      	b.n	8007b62 <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	0019      	movs	r1, r3
 8007a84:	0010      	movs	r0, r2
 8007a86:	f7ff fe27 	bl	80076d8 <create_chain>
 8007a8a:	0003      	movs	r3, r0
 8007a8c:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <dir_next+0xe6>
 8007a94:	2307      	movs	r3, #7
 8007a96:	e064      	b.n	8007b62 <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d101      	bne.n	8007aa2 <dir_next+0xf0>
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	e05f      	b.n	8007b62 <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	d101      	bne.n	8007aac <dir_next+0xfa>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e05a      	b.n	8007b62 <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f7ff fa7e 	bl	8006fb0 <sync_window>
 8007ab4:	1e03      	subs	r3, r0, #0
 8007ab6:	d001      	beq.n	8007abc <dir_next+0x10a>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e052      	b.n	8007b62 <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3338      	adds	r3, #56	; 0x38
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	899b      	ldrh	r3, [r3, #12]
 8007ac6:	001a      	movs	r2, r3
 8007ac8:	2100      	movs	r1, #0
 8007aca:	f7ff f8b0 	bl	8006c2e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007ace:	2300      	movs	r3, #0
 8007ad0:	613b      	str	r3, [r7, #16]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	0011      	movs	r1, r2
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f7ff fb63 	bl	80071a4 <clust2sect>
 8007ade:	0002      	movs	r2, r0
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	635a      	str	r2, [r3, #52]	; 0x34
 8007ae4:	e012      	b.n	8007b0c <dir_next+0x15a>
						fs->wflag = 1;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	0018      	movs	r0, r3
 8007af0:	f7ff fa5e 	bl	8006fb0 <sync_window>
 8007af4:	1e03      	subs	r3, r0, #0
 8007af6:	d001      	beq.n	8007afc <dir_next+0x14a>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e032      	b.n	8007b62 <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	3301      	adds	r3, #1
 8007b00:	613b      	str	r3, [r7, #16]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	635a      	str	r2, [r3, #52]	; 0x34
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	895b      	ldrh	r3, [r3, #10]
 8007b10:	001a      	movs	r2, r3
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d3e6      	bcc.n	8007ae6 <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	1ad2      	subs	r2, r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	0011      	movs	r1, r2
 8007b30:	0018      	movs	r0, r3
 8007b32:	f7ff fb37 	bl	80071a4 <clust2sect>
 8007b36:	0002      	movs	r2, r0
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3338      	adds	r3, #56	; 0x38
 8007b46:	001c      	movs	r4, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	899b      	ldrh	r3, [r3, #12]
 8007b4c:	001a      	movs	r2, r3
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	0011      	movs	r1, r2
 8007b52:	0018      	movs	r0, r3
 8007b54:	f7f8 fb7a 	bl	800024c <__aeabi_uidivmod>
 8007b58:	000b      	movs	r3, r1
 8007b5a:	18e2      	adds	r2, r4, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	0018      	movs	r0, r3
 8007b64:	46bd      	mov	sp, r7
 8007b66:	b007      	add	sp, #28
 8007b68:	bd90      	pop	{r4, r7, pc}

08007b6a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007b6a:	b5b0      	push	{r4, r5, r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007b7a:	2517      	movs	r5, #23
 8007b7c:	197c      	adds	r4, r7, r5
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2100      	movs	r1, #0
 8007b82:	0018      	movs	r0, r3
 8007b84:	f7ff fe89 	bl	800789a <dir_sdi>
 8007b88:	0003      	movs	r3, r0
 8007b8a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007b8c:	197b      	adds	r3, r7, r5
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d133      	bne.n	8007bfc <dir_alloc+0x92>
		n = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69da      	ldr	r2, [r3, #28]
 8007b9c:	2517      	movs	r5, #23
 8007b9e:	197c      	adds	r4, r7, r5
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	0011      	movs	r1, r2
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f7ff fa4b 	bl	8007040 <move_window>
 8007baa:	0003      	movs	r3, r0
 8007bac:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007bae:	197b      	adds	r3, r7, r5
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d121      	bne.n	8007bfa <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2be5      	cmp	r3, #229	; 0xe5
 8007bbe:	d004      	beq.n	8007bca <dir_alloc+0x60>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d107      	bne.n	8007bda <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d102      	bne.n	8007bde <dir_alloc+0x74>
 8007bd8:	e010      	b.n	8007bfc <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007bda:	2300      	movs	r3, #0
 8007bdc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007bde:	2517      	movs	r5, #23
 8007be0:	197c      	adds	r4, r7, r5
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2101      	movs	r1, #1
 8007be6:	0018      	movs	r0, r3
 8007be8:	f7ff fee3 	bl	80079b2 <dir_next>
 8007bec:	0003      	movs	r3, r0
 8007bee:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007bf0:	197b      	adds	r3, r7, r5
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0cf      	beq.n	8007b98 <dir_alloc+0x2e>
 8007bf8:	e000      	b.n	8007bfc <dir_alloc+0x92>
			if (res != FR_OK) break;
 8007bfa:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007bfc:	2217      	movs	r2, #23
 8007bfe:	18bb      	adds	r3, r7, r2
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d102      	bne.n	8007c0c <dir_alloc+0xa2>
 8007c06:	18bb      	adds	r3, r7, r2
 8007c08:	2207      	movs	r2, #7
 8007c0a:	701a      	strb	r2, [r3, #0]
	return res;
 8007c0c:	2317      	movs	r3, #23
 8007c0e:	18fb      	adds	r3, r7, r3
 8007c10:	781b      	ldrb	r3, [r3, #0]
}
 8007c12:	0018      	movs	r0, r3
 8007c14:	46bd      	mov	sp, r7
 8007c16:	b006      	add	sp, #24
 8007c18:	bdb0      	pop	{r4, r5, r7, pc}

08007c1a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	331a      	adds	r3, #26
 8007c28:	0018      	movs	r0, r3
 8007c2a:	f7fe ff5d 	bl	8006ae8 <ld_word>
 8007c2e:	0003      	movs	r3, r0
 8007c30:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d109      	bne.n	8007c4e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	3314      	adds	r3, #20
 8007c3e:	0018      	movs	r0, r3
 8007c40:	f7fe ff52 	bl	8006ae8 <ld_word>
 8007c44:	0003      	movs	r3, r0
 8007c46:	041b      	lsls	r3, r3, #16
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
}
 8007c50:	0018      	movs	r0, r3
 8007c52:	46bd      	mov	sp, r7
 8007c54:	b004      	add	sp, #16
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	331a      	adds	r3, #26
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	0011      	movs	r1, r2
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f7fe ff76 	bl	8006b60 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d109      	bne.n	8007c90 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	3314      	adds	r3, #20
 8007c80:	001a      	movs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	0c1b      	lsrs	r3, r3, #16
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	0019      	movs	r1, r3
 8007c8a:	0010      	movs	r0, r2
 8007c8c:	f7fe ff68 	bl	8006b60 <st_word>
	}
}
 8007c90:	46c0      	nop			; (mov r8, r8)
 8007c92:	46bd      	mov	sp, r7
 8007c94:	b004      	add	sp, #16
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007c98:	b5b0      	push	{r4, r5, r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	331a      	adds	r3, #26
 8007ca6:	0018      	movs	r0, r3
 8007ca8:	f7fe ff1e 	bl	8006ae8 <ld_word>
 8007cac:	1e03      	subs	r3, r0, #0
 8007cae:	d001      	beq.n	8007cb4 <cmp_lfn+0x1c>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e068      	b.n	8007d86 <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	001a      	movs	r2, r3
 8007cba:	233f      	movs	r3, #63	; 0x3f
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	1e5a      	subs	r2, r3, #1
 8007cc0:	0013      	movs	r3, r2
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	189b      	adds	r3, r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	189b      	adds	r3, r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007ccc:	230e      	movs	r3, #14
 8007cce:	18fb      	adds	r3, r7, r3
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	801a      	strh	r2, [r3, #0]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	613b      	str	r3, [r7, #16]
 8007cd8:	e03d      	b.n	8007d56 <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007cda:	4a2d      	ldr	r2, [pc, #180]	; (8007d90 <cmp_lfn+0xf8>)
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	18d3      	adds	r3, r2, r3
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	001a      	movs	r2, r3
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	189b      	adds	r3, r3, r2
 8007ce8:	250c      	movs	r5, #12
 8007cea:	197c      	adds	r4, r7, r5
 8007cec:	0018      	movs	r0, r3
 8007cee:	f7fe fefb 	bl	8006ae8 <ld_word>
 8007cf2:	0003      	movs	r3, r0
 8007cf4:	8023      	strh	r3, [r4, #0]
		if (wc) {
 8007cf6:	230e      	movs	r3, #14
 8007cf8:	18fb      	adds	r3, r7, r3
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01f      	beq.n	8007d40 <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	2bfe      	cmp	r3, #254	; 0xfe
 8007d04:	d813      	bhi.n	8007d2e <cmp_lfn+0x96>
 8007d06:	197b      	adds	r3, r7, r5
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f001 ff8c 	bl	8009c28 <ff_wtoupper>
 8007d10:	0003      	movs	r3, r0
 8007d12:	001c      	movs	r4, r3
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	617a      	str	r2, [r7, #20]
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	18d3      	adds	r3, r2, r3
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	0018      	movs	r0, r3
 8007d24:	f001 ff80 	bl	8009c28 <ff_wtoupper>
 8007d28:	0003      	movs	r3, r0
 8007d2a:	429c      	cmp	r4, r3
 8007d2c:	d001      	beq.n	8007d32 <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e029      	b.n	8007d86 <cmp_lfn+0xee>
			}
			wc = uc;
 8007d32:	230e      	movs	r3, #14
 8007d34:	18fb      	adds	r3, r7, r3
 8007d36:	220c      	movs	r2, #12
 8007d38:	18ba      	adds	r2, r7, r2
 8007d3a:	8812      	ldrh	r2, [r2, #0]
 8007d3c:	801a      	strh	r2, [r3, #0]
 8007d3e:	e007      	b.n	8007d50 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007d40:	230c      	movs	r3, #12
 8007d42:	18fb      	adds	r3, r7, r3
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	4a13      	ldr	r2, [pc, #76]	; (8007d94 <cmp_lfn+0xfc>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d001      	beq.n	8007d50 <cmp_lfn+0xb8>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e01a      	b.n	8007d86 <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	3301      	adds	r3, #1
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2b0c      	cmp	r3, #12
 8007d5a:	d9be      	bls.n	8007cda <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	001a      	movs	r2, r3
 8007d62:	2340      	movs	r3, #64	; 0x40
 8007d64:	4013      	ands	r3, r2
 8007d66:	d00d      	beq.n	8007d84 <cmp_lfn+0xec>
 8007d68:	230e      	movs	r3, #14
 8007d6a:	18fb      	adds	r3, r7, r3
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d008      	beq.n	8007d84 <cmp_lfn+0xec>
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	005b      	lsls	r3, r3, #1
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	18d3      	adds	r3, r2, r3
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <cmp_lfn+0xec>
 8007d80:	2300      	movs	r3, #0
 8007d82:	e000      	b.n	8007d86 <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 8007d84:	2301      	movs	r3, #1
}
 8007d86:	0018      	movs	r0, r3
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	b006      	add	sp, #24
 8007d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	0800e944 	.word	0x0800e944
 8007d94:	0000ffff 	.word	0x0000ffff

08007d98 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007d98:	b590      	push	{r4, r7, lr}
 8007d9a:	b089      	sub	sp, #36	; 0x24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	0019      	movs	r1, r3
 8007da4:	1dfb      	adds	r3, r7, #7
 8007da6:	701a      	strb	r2, [r3, #0]
 8007da8:	1dbb      	adds	r3, r7, #6
 8007daa:	1c0a      	adds	r2, r1, #0
 8007dac:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	330d      	adds	r3, #13
 8007db2:	1dba      	adds	r2, r7, #6
 8007db4:	7812      	ldrb	r2, [r2, #0]
 8007db6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	330b      	adds	r3, #11
 8007dbc:	220f      	movs	r2, #15
 8007dbe:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	331a      	adds	r3, #26
 8007dcc:	2100      	movs	r1, #0
 8007dce:	0018      	movs	r0, r3
 8007dd0:	f7fe fec6 	bl	8006b60 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007dd4:	1dfb      	adds	r3, r7, #7
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	1e5a      	subs	r2, r3, #1
 8007dda:	0013      	movs	r3, r2
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	189b      	adds	r3, r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	189b      	adds	r3, r3, r2
 8007de4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007de6:	2316      	movs	r3, #22
 8007de8:	18fb      	adds	r3, r7, r3
 8007dea:	2200      	movs	r2, #0
 8007dec:	801a      	strh	r2, [r3, #0]
 8007dee:	2300      	movs	r3, #0
 8007df0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007df2:	2116      	movs	r1, #22
 8007df4:	187b      	adds	r3, r7, r1
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	4a21      	ldr	r2, [pc, #132]	; (8007e80 <put_lfn+0xe8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d008      	beq.n	8007e10 <put_lfn+0x78>
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	61fa      	str	r2, [r7, #28]
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	18d2      	adds	r2, r2, r3
 8007e0a:	187b      	adds	r3, r7, r1
 8007e0c:	8812      	ldrh	r2, [r2, #0]
 8007e0e:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007e10:	4a1c      	ldr	r2, [pc, #112]	; (8007e84 <put_lfn+0xec>)
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	18d3      	adds	r3, r2, r3
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	001a      	movs	r2, r3
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	189a      	adds	r2, r3, r2
 8007e1e:	2416      	movs	r4, #22
 8007e20:	193b      	adds	r3, r7, r4
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	0019      	movs	r1, r3
 8007e26:	0010      	movs	r0, r2
 8007e28:	f7fe fe9a 	bl	8006b60 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007e2c:	0022      	movs	r2, r4
 8007e2e:	18bb      	adds	r3, r7, r2
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d103      	bne.n	8007e3e <put_lfn+0xa6>
 8007e36:	18bb      	adds	r3, r7, r2
 8007e38:	2201      	movs	r2, #1
 8007e3a:	4252      	negs	r2, r2
 8007e3c:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	3301      	adds	r3, #1
 8007e42:	61bb      	str	r3, [r7, #24]
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	2b0c      	cmp	r3, #12
 8007e48:	d9d3      	bls.n	8007df2 <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007e4a:	2316      	movs	r3, #22
 8007e4c:	18fb      	adds	r3, r7, r3
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	4a0b      	ldr	r2, [pc, #44]	; (8007e80 <put_lfn+0xe8>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d006      	beq.n	8007e64 <put_lfn+0xcc>
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	18d3      	adds	r3, r2, r3
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d105      	bne.n	8007e70 <put_lfn+0xd8>
 8007e64:	1dfb      	adds	r3, r7, #7
 8007e66:	1dfa      	adds	r2, r7, #7
 8007e68:	7812      	ldrb	r2, [r2, #0]
 8007e6a:	2140      	movs	r1, #64	; 0x40
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	1dfa      	adds	r2, r7, #7
 8007e74:	7812      	ldrb	r2, [r2, #0]
 8007e76:	701a      	strb	r2, [r3, #0]
}
 8007e78:	46c0      	nop			; (mov r8, r8)
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	b009      	add	sp, #36	; 0x24
 8007e7e:	bd90      	pop	{r4, r7, pc}
 8007e80:	0000ffff 	.word	0x0000ffff
 8007e84:	0800e944 	.word	0x0800e944

08007e88 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08c      	sub	sp, #48	; 0x30
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	220b      	movs	r2, #11
 8007e9c:	0018      	movs	r0, r3
 8007e9e:	f7fe fea7 	bl	8006bf0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b05      	cmp	r3, #5
 8007ea6:	d92f      	bls.n	8007f08 <gen_numname+0x80>
		sr = seq;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007eac:	e026      	b.n	8007efc <gen_numname+0x74>
			wc = *lfn++;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	1c9a      	adds	r2, r3, #2
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	2222      	movs	r2, #34	; 0x22
 8007eb6:	18ba      	adds	r2, r7, r2
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec0:	e019      	b.n	8007ef6 <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	005a      	lsls	r2, r3, #1
 8007ec6:	2022      	movs	r0, #34	; 0x22
 8007ec8:	183b      	adds	r3, r7, r0
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	2101      	movs	r1, #1
 8007ece:	400b      	ands	r3, r1
 8007ed0:	18d3      	adds	r3, r2, r3
 8007ed2:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007ed4:	183b      	adds	r3, r7, r0
 8007ed6:	183a      	adds	r2, r7, r0
 8007ed8:	8812      	ldrh	r2, [r2, #0]
 8007eda:	0852      	lsrs	r2, r2, #1
 8007edc:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	2380      	movs	r3, #128	; 0x80
 8007ee2:	025b      	lsls	r3, r3, #9
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	d003      	beq.n	8007ef0 <gen_numname+0x68>
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	4a30      	ldr	r2, [pc, #192]	; (8007fac <gen_numname+0x124>)
 8007eec:	4053      	eors	r3, r2
 8007eee:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef8:	2b0f      	cmp	r3, #15
 8007efa:	d9e2      	bls.n	8007ec2 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1d4      	bne.n	8007eae <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007f08:	2307      	movs	r3, #7
 8007f0a:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	220f      	movs	r2, #15
 8007f12:	4013      	ands	r3, r2
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	212f      	movs	r1, #47	; 0x2f
 8007f18:	187b      	adds	r3, r7, r1
 8007f1a:	3230      	adds	r2, #48	; 0x30
 8007f1c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8007f1e:	187b      	adds	r3, r7, r1
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b39      	cmp	r3, #57	; 0x39
 8007f24:	d904      	bls.n	8007f30 <gen_numname+0xa8>
 8007f26:	187b      	adds	r3, r7, r1
 8007f28:	187a      	adds	r2, r7, r1
 8007f2a:	7812      	ldrb	r2, [r2, #0]
 8007f2c:	3207      	adds	r2, #7
 8007f2e:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	1e5a      	subs	r2, r3, #1
 8007f34:	62ba      	str	r2, [r7, #40]	; 0x28
 8007f36:	2014      	movs	r0, #20
 8007f38:	183a      	adds	r2, r7, r0
 8007f3a:	212f      	movs	r1, #47	; 0x2f
 8007f3c:	1879      	adds	r1, r7, r1
 8007f3e:	7809      	ldrb	r1, [r1, #0]
 8007f40:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	091b      	lsrs	r3, r3, #4
 8007f46:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1de      	bne.n	8007f0c <gen_numname+0x84>
	ns[i] = '~';
 8007f4e:	183a      	adds	r2, r7, r0
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	18d3      	adds	r3, r2, r3
 8007f54:	227e      	movs	r2, #126	; 0x7e
 8007f56:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007f58:	2300      	movs	r3, #0
 8007f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f5c:	e002      	b.n	8007f64 <gen_numname+0xdc>
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	3301      	adds	r3, #1
 8007f62:	627b      	str	r3, [r7, #36]	; 0x24
 8007f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d205      	bcs.n	8007f78 <gen_numname+0xf0>
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	18d3      	adds	r3, r2, r3
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	d1f2      	bne.n	8007f5e <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7a:	2b07      	cmp	r3, #7
 8007f7c:	d806      	bhi.n	8007f8c <gen_numname+0x104>
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	62ba      	str	r2, [r7, #40]	; 0x28
 8007f84:	2214      	movs	r2, #20
 8007f86:	18ba      	adds	r2, r7, r2
 8007f88:	5cd1      	ldrb	r1, [r2, r3]
 8007f8a:	e000      	b.n	8007f8e <gen_numname+0x106>
 8007f8c:	2120      	movs	r1, #32
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	627a      	str	r2, [r7, #36]	; 0x24
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	18d3      	adds	r3, r2, r3
 8007f98:	1c0a      	adds	r2, r1, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	2b07      	cmp	r3, #7
 8007fa0:	d9ea      	bls.n	8007f78 <gen_numname+0xf0>
}
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	46c0      	nop			; (mov r8, r8)
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	b00c      	add	sp, #48	; 0x30
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	00011021 	.word	0x00011021

08007fb0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007fb8:	230f      	movs	r3, #15
 8007fba:	18fb      	adds	r3, r7, r3
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 8007fc0:	230b      	movs	r3, #11
 8007fc2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007fc4:	200f      	movs	r0, #15
 8007fc6:	183b      	adds	r3, r7, r0
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	0852      	lsrs	r2, r2, #1
 8007fce:	01db      	lsls	r3, r3, #7
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	b2d9      	uxtb	r1, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	607a      	str	r2, [r7, #4]
 8007fda:	781a      	ldrb	r2, [r3, #0]
 8007fdc:	183b      	adds	r3, r7, r0
 8007fde:	188a      	adds	r2, r1, r2
 8007fe0:	701a      	strb	r2, [r3, #0]
	} while (--n);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	60bb      	str	r3, [r7, #8]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1ea      	bne.n	8007fc4 <sum_sfn+0x14>
	return sum;
 8007fee:	183b      	adds	r3, r7, r0
 8007ff0:	781b      	ldrb	r3, [r3, #0]
}
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	b004      	add	sp, #16
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007ffa:	b5b0      	push	{r4, r5, r7, lr}
 8007ffc:	b086      	sub	sp, #24
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008008:	2517      	movs	r5, #23
 800800a:	197c      	adds	r4, r7, r5
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2100      	movs	r1, #0
 8008010:	0018      	movs	r0, r3
 8008012:	f7ff fc42 	bl	800789a <dir_sdi>
 8008016:	0003      	movs	r3, r0
 8008018:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800801a:	197b      	adds	r3, r7, r5
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <dir_find+0x2e>
 8008022:	197b      	adds	r3, r7, r5
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	e0df      	b.n	80081e8 <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008028:	2114      	movs	r1, #20
 800802a:	187b      	adds	r3, r7, r1
 800802c:	22ff      	movs	r2, #255	; 0xff
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	2315      	movs	r3, #21
 8008032:	18fb      	adds	r3, r7, r3
 8008034:	187a      	adds	r2, r7, r1
 8008036:	7812      	ldrb	r2, [r2, #0]
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	4252      	negs	r2, r2
 8008040:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	69da      	ldr	r2, [r3, #28]
 8008046:	2517      	movs	r5, #23
 8008048:	197c      	adds	r4, r7, r5
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	0011      	movs	r1, r2
 800804e:	0018      	movs	r0, r3
 8008050:	f7fe fff6 	bl	8007040 <move_window>
 8008054:	0003      	movs	r3, r0
 8008056:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8008058:	0029      	movs	r1, r5
 800805a:	187b      	adds	r3, r7, r1
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d000      	beq.n	8008064 <dir_find+0x6a>
 8008062:	e0b9      	b.n	80081d8 <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a1a      	ldr	r2, [r3, #32]
 8008068:	2016      	movs	r0, #22
 800806a:	183b      	adds	r3, r7, r0
 800806c:	7812      	ldrb	r2, [r2, #0]
 800806e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008070:	183b      	adds	r3, r7, r0
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d103      	bne.n	8008080 <dir_find+0x86>
 8008078:	187b      	adds	r3, r7, r1
 800807a:	2204      	movs	r2, #4
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	e0b0      	b.n	80081e2 <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	330b      	adds	r3, #11
 8008086:	781a      	ldrb	r2, [r3, #0]
 8008088:	200f      	movs	r0, #15
 800808a:	183b      	adds	r3, r7, r0
 800808c:	213f      	movs	r1, #63	; 0x3f
 800808e:	400a      	ands	r2, r1
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	0001      	movs	r1, r0
 8008096:	187a      	adds	r2, r7, r1
 8008098:	7812      	ldrb	r2, [r2, #0]
 800809a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800809c:	2316      	movs	r3, #22
 800809e:	18fb      	adds	r3, r7, r3
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	2be5      	cmp	r3, #229	; 0xe5
 80080a4:	d008      	beq.n	80080b8 <dir_find+0xbe>
 80080a6:	187b      	adds	r3, r7, r1
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2208      	movs	r2, #8
 80080ac:	4013      	ands	r3, r2
 80080ae:	d00c      	beq.n	80080ca <dir_find+0xd0>
 80080b0:	187b      	adds	r3, r7, r1
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b0f      	cmp	r3, #15
 80080b6:	d008      	beq.n	80080ca <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80080b8:	2315      	movs	r3, #21
 80080ba:	18fb      	adds	r3, r7, r3
 80080bc:	22ff      	movs	r2, #255	; 0xff
 80080be:	701a      	strb	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	4252      	negs	r2, r2
 80080c6:	631a      	str	r2, [r3, #48]	; 0x30
 80080c8:	e077      	b.n	80081ba <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80080ca:	230f      	movs	r3, #15
 80080cc:	18fb      	adds	r3, r7, r3
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b0f      	cmp	r3, #15
 80080d2:	d148      	bne.n	8008166 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	222f      	movs	r2, #47	; 0x2f
 80080d8:	5c9b      	ldrb	r3, [r3, r2]
 80080da:	001a      	movs	r2, r3
 80080dc:	2340      	movs	r3, #64	; 0x40
 80080de:	4013      	ands	r3, r2
 80080e0:	d000      	beq.n	80080e4 <dir_find+0xea>
 80080e2:	e06a      	b.n	80081ba <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80080e4:	2116      	movs	r1, #22
 80080e6:	187b      	adds	r3, r7, r1
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2240      	movs	r2, #64	; 0x40
 80080ec:	4013      	ands	r3, r2
 80080ee:	d015      	beq.n	800811c <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	2314      	movs	r3, #20
 80080f6:	18fb      	adds	r3, r7, r3
 80080f8:	7b52      	ldrb	r2, [r2, #13]
 80080fa:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80080fc:	187b      	adds	r3, r7, r1
 80080fe:	0008      	movs	r0, r1
 8008100:	187a      	adds	r2, r7, r1
 8008102:	7812      	ldrb	r2, [r2, #0]
 8008104:	2140      	movs	r1, #64	; 0x40
 8008106:	438a      	bics	r2, r1
 8008108:	701a      	strb	r2, [r3, #0]
 800810a:	2315      	movs	r3, #21
 800810c:	18fb      	adds	r3, r7, r3
 800810e:	183a      	adds	r2, r7, r0
 8008110:	7812      	ldrb	r2, [r2, #0]
 8008112:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	695a      	ldr	r2, [r3, #20]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800811c:	2316      	movs	r3, #22
 800811e:	18fa      	adds	r2, r7, r3
 8008120:	2415      	movs	r4, #21
 8008122:	193b      	adds	r3, r7, r4
 8008124:	7812      	ldrb	r2, [r2, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d117      	bne.n	800815c <dir_find+0x162>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	330d      	adds	r3, #13
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2214      	movs	r2, #20
 8008136:	18ba      	adds	r2, r7, r2
 8008138:	7812      	ldrb	r2, [r2, #0]
 800813a:	429a      	cmp	r2, r3
 800813c:	d10e      	bne.n	800815c <dir_find+0x162>
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	691a      	ldr	r2, [r3, #16]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	0019      	movs	r1, r3
 8008148:	0010      	movs	r0, r2
 800814a:	f7ff fda5 	bl	8007c98 <cmp_lfn>
 800814e:	1e03      	subs	r3, r0, #0
 8008150:	d004      	beq.n	800815c <dir_find+0x162>
 8008152:	193b      	adds	r3, r7, r4
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	3b01      	subs	r3, #1
 8008158:	b2da      	uxtb	r2, r3
 800815a:	e000      	b.n	800815e <dir_find+0x164>
 800815c:	22ff      	movs	r2, #255	; 0xff
 800815e:	2315      	movs	r3, #21
 8008160:	18fb      	adds	r3, r7, r3
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	e029      	b.n	80081ba <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008166:	2315      	movs	r3, #21
 8008168:	18fb      	adds	r3, r7, r3
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10b      	bne.n	8008188 <dir_find+0x18e>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	0018      	movs	r0, r3
 8008176:	f7ff ff1b 	bl	8007fb0 <sum_sfn>
 800817a:	0003      	movs	r3, r0
 800817c:	001a      	movs	r2, r3
 800817e:	2314      	movs	r3, #20
 8008180:	18fb      	adds	r3, r7, r3
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	4293      	cmp	r3, r2
 8008186:	d029      	beq.n	80081dc <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	222f      	movs	r2, #47	; 0x2f
 800818c:	5c9b      	ldrb	r3, [r3, r2]
 800818e:	001a      	movs	r2, r3
 8008190:	2301      	movs	r3, #1
 8008192:	4013      	ands	r3, r2
 8008194:	d109      	bne.n	80081aa <dir_find+0x1b0>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a18      	ldr	r0, [r3, #32]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3324      	adds	r3, #36	; 0x24
 800819e:	220b      	movs	r2, #11
 80081a0:	0019      	movs	r1, r3
 80081a2:	f7fe fd5d 	bl	8006c60 <mem_cmp>
 80081a6:	1e03      	subs	r3, r0, #0
 80081a8:	d01a      	beq.n	80081e0 <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80081aa:	2315      	movs	r3, #21
 80081ac:	18fb      	adds	r3, r7, r3
 80081ae:	22ff      	movs	r2, #255	; 0xff
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	4252      	negs	r2, r2
 80081b8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80081ba:	2517      	movs	r5, #23
 80081bc:	197c      	adds	r4, r7, r5
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2100      	movs	r1, #0
 80081c2:	0018      	movs	r0, r3
 80081c4:	f7ff fbf5 	bl	80079b2 <dir_next>
 80081c8:	0003      	movs	r3, r0
 80081ca:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80081cc:	197b      	adds	r3, r7, r5
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d100      	bne.n	80081d6 <dir_find+0x1dc>
 80081d4:	e735      	b.n	8008042 <dir_find+0x48>
 80081d6:	e004      	b.n	80081e2 <dir_find+0x1e8>
		if (res != FR_OK) break;
 80081d8:	46c0      	nop			; (mov r8, r8)
 80081da:	e002      	b.n	80081e2 <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80081dc:	46c0      	nop			; (mov r8, r8)
 80081de:	e000      	b.n	80081e2 <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80081e0:	46c0      	nop			; (mov r8, r8)

	return res;
 80081e2:	2317      	movs	r3, #23
 80081e4:	18fb      	adds	r3, r7, r3
 80081e6:	781b      	ldrb	r3, [r3, #0]
}
 80081e8:	0018      	movs	r0, r3
 80081ea:	46bd      	mov	sp, r7
 80081ec:	b006      	add	sp, #24
 80081ee:	bdb0      	pop	{r4, r5, r7, pc}

080081f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80081f0:	b5b0      	push	{r4, r5, r7, lr}
 80081f2:	b08c      	sub	sp, #48	; 0x30
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	222f      	movs	r2, #47	; 0x2f
 8008202:	5c9b      	ldrb	r3, [r3, r2]
 8008204:	001a      	movs	r2, r3
 8008206:	23a0      	movs	r3, #160	; 0xa0
 8008208:	4013      	ands	r3, r2
 800820a:	d001      	beq.n	8008210 <dir_register+0x20>
 800820c:	2306      	movs	r3, #6
 800820e:	e0fb      	b.n	8008408 <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008210:	2300      	movs	r3, #0
 8008212:	627b      	str	r3, [r7, #36]	; 0x24
 8008214:	e002      	b.n	800821c <dir_register+0x2c>
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	3301      	adds	r3, #1
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	691a      	ldr	r2, [r3, #16]
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	18d3      	adds	r3, r2, r3
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1f4      	bne.n	8008216 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3324      	adds	r3, #36	; 0x24
 8008230:	0019      	movs	r1, r3
 8008232:	240c      	movs	r4, #12
 8008234:	193b      	adds	r3, r7, r4
 8008236:	220c      	movs	r2, #12
 8008238:	0018      	movs	r0, r3
 800823a:	f7fe fcd9 	bl	8006bf0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800823e:	193b      	adds	r3, r7, r4
 8008240:	7adb      	ldrb	r3, [r3, #11]
 8008242:	001a      	movs	r2, r3
 8008244:	2301      	movs	r3, #1
 8008246:	4013      	ands	r3, r2
 8008248:	d037      	beq.n	80082ba <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	222f      	movs	r2, #47	; 0x2f
 800824e:	2140      	movs	r1, #64	; 0x40
 8008250:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 8008252:	2301      	movs	r3, #1
 8008254:	62bb      	str	r3, [r7, #40]	; 0x28
 8008256:	e018      	b.n	800828a <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3324      	adds	r3, #36	; 0x24
 800825c:	0018      	movs	r0, r3
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	691a      	ldr	r2, [r3, #16]
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	210c      	movs	r1, #12
 8008266:	1879      	adds	r1, r7, r1
 8008268:	f7ff fe0e 	bl	8007e88 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800826c:	252f      	movs	r5, #47	; 0x2f
 800826e:	197c      	adds	r4, r7, r5
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	0018      	movs	r0, r3
 8008274:	f7ff fec1 	bl	8007ffa <dir_find>
 8008278:	0003      	movs	r3, r0
 800827a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800827c:	197b      	adds	r3, r7, r5
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d106      	bne.n	8008292 <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	3301      	adds	r3, #1
 8008288:	62bb      	str	r3, [r7, #40]	; 0x28
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	2b63      	cmp	r3, #99	; 0x63
 800828e:	d9e3      	bls.n	8008258 <dir_register+0x68>
 8008290:	e000      	b.n	8008294 <dir_register+0xa4>
			if (res != FR_OK) break;
 8008292:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008296:	2b64      	cmp	r3, #100	; 0x64
 8008298:	d101      	bne.n	800829e <dir_register+0xae>
 800829a:	2307      	movs	r3, #7
 800829c:	e0b4      	b.n	8008408 <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800829e:	222f      	movs	r2, #47	; 0x2f
 80082a0:	18bb      	adds	r3, r7, r2
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d002      	beq.n	80082ae <dir_register+0xbe>
 80082a8:	18bb      	adds	r3, r7, r2
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	e0ac      	b.n	8008408 <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80082ae:	230c      	movs	r3, #12
 80082b0:	18fb      	adds	r3, r7, r3
 80082b2:	7ad9      	ldrb	r1, [r3, #11]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	222f      	movs	r2, #47	; 0x2f
 80082b8:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80082ba:	230c      	movs	r3, #12
 80082bc:	18fb      	adds	r3, r7, r3
 80082be:	7adb      	ldrb	r3, [r3, #11]
 80082c0:	001a      	movs	r2, r3
 80082c2:	2302      	movs	r3, #2
 80082c4:	4013      	ands	r3, r2
 80082c6:	d008      	beq.n	80082da <dir_register+0xea>
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	330c      	adds	r3, #12
 80082cc:	210d      	movs	r1, #13
 80082ce:	0018      	movs	r0, r3
 80082d0:	f7f7 ff36 	bl	8000140 <__udivsi3>
 80082d4:	0003      	movs	r3, r0
 80082d6:	3301      	adds	r3, #1
 80082d8:	e000      	b.n	80082dc <dir_register+0xec>
 80082da:	2301      	movs	r3, #1
 80082dc:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80082de:	252f      	movs	r5, #47	; 0x2f
 80082e0:	197c      	adds	r4, r7, r5
 80082e2:	6a3a      	ldr	r2, [r7, #32]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	0011      	movs	r1, r2
 80082e8:	0018      	movs	r0, r3
 80082ea:	f7ff fc3e 	bl	8007b6a <dir_alloc>
 80082ee:	0003      	movs	r3, r0
 80082f0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80082f2:	0029      	movs	r1, r5
 80082f4:	187b      	adds	r3, r7, r1
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d153      	bne.n	80083a4 <dir_register+0x1b4>
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	3b01      	subs	r3, #1
 8008300:	623b      	str	r3, [r7, #32]
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d04d      	beq.n	80083a4 <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	695a      	ldr	r2, [r3, #20]
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	015b      	lsls	r3, r3, #5
 8008310:	1ad2      	subs	r2, r2, r3
 8008312:	000d      	movs	r5, r1
 8008314:	187c      	adds	r4, r7, r1
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	0011      	movs	r1, r2
 800831a:	0018      	movs	r0, r3
 800831c:	f7ff fabd 	bl	800789a <dir_sdi>
 8008320:	0003      	movs	r3, r0
 8008322:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008324:	197b      	adds	r3, r7, r5
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d13b      	bne.n	80083a4 <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3324      	adds	r3, #36	; 0x24
 8008330:	221b      	movs	r2, #27
 8008332:	18bc      	adds	r4, r7, r2
 8008334:	0018      	movs	r0, r3
 8008336:	f7ff fe3b 	bl	8007fb0 <sum_sfn>
 800833a:	0003      	movs	r3, r0
 800833c:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69da      	ldr	r2, [r3, #28]
 8008342:	252f      	movs	r5, #47	; 0x2f
 8008344:	197c      	adds	r4, r7, r5
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	0011      	movs	r1, r2
 800834a:	0018      	movs	r0, r3
 800834c:	f7fe fe78 	bl	8007040 <move_window>
 8008350:	0003      	movs	r3, r0
 8008352:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 8008354:	002c      	movs	r4, r5
 8008356:	193b      	adds	r3, r7, r4
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d121      	bne.n	80083a2 <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	6918      	ldr	r0, [r3, #16]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a19      	ldr	r1, [r3, #32]
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	b2da      	uxtb	r2, r3
 800836a:	231b      	movs	r3, #27
 800836c:	18fb      	adds	r3, r7, r3
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	f7ff fd12 	bl	8007d98 <put_lfn>
				fs->wflag = 1;
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	2201      	movs	r2, #1
 8008378:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800837a:	0025      	movs	r5, r4
 800837c:	193c      	adds	r4, r7, r4
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2100      	movs	r1, #0
 8008382:	0018      	movs	r0, r3
 8008384:	f7ff fb15 	bl	80079b2 <dir_next>
 8008388:	0003      	movs	r3, r0
 800838a:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 800838c:	197b      	adds	r3, r7, r5
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d107      	bne.n	80083a4 <dir_register+0x1b4>
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	3b01      	subs	r3, #1
 8008398:	623b      	str	r3, [r7, #32]
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1ce      	bne.n	800833e <dir_register+0x14e>
 80083a0:	e000      	b.n	80083a4 <dir_register+0x1b4>
				if (res != FR_OK) break;
 80083a2:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80083a4:	252f      	movs	r5, #47	; 0x2f
 80083a6:	197b      	adds	r3, r7, r5
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d129      	bne.n	8008402 <dir_register+0x212>
		res = move_window(fs, dp->sect);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	69da      	ldr	r2, [r3, #28]
 80083b2:	197c      	adds	r4, r7, r5
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	0011      	movs	r1, r2
 80083b8:	0018      	movs	r0, r3
 80083ba:	f7fe fe41 	bl	8007040 <move_window>
 80083be:	0003      	movs	r3, r0
 80083c0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80083c2:	197b      	adds	r3, r7, r5
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d11b      	bne.n	8008402 <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	2220      	movs	r2, #32
 80083d0:	2100      	movs	r1, #0
 80083d2:	0018      	movs	r0, r3
 80083d4:	f7fe fc2b 	bl	8006c2e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a18      	ldr	r0, [r3, #32]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3324      	adds	r3, #36	; 0x24
 80083e0:	220b      	movs	r2, #11
 80083e2:	0019      	movs	r1, r3
 80083e4:	f7fe fc04 	bl	8006bf0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	222f      	movs	r2, #47	; 0x2f
 80083ec:	5c9a      	ldrb	r2, [r3, r2]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	330c      	adds	r3, #12
 80083f4:	2118      	movs	r1, #24
 80083f6:	400a      	ands	r2, r1
 80083f8:	b2d2      	uxtb	r2, r2
 80083fa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	2201      	movs	r2, #1
 8008400:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008402:	232f      	movs	r3, #47	; 0x2f
 8008404:	18fb      	adds	r3, r7, r3
 8008406:	781b      	ldrb	r3, [r3, #0]
}
 8008408:	0018      	movs	r0, r3
 800840a:	46bd      	mov	sp, r7
 800840c:	b00c      	add	sp, #48	; 0x30
 800840e:	bdb0      	pop	{r4, r5, r7, pc}

08008410 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008410:	b5b0      	push	{r4, r5, r7, lr}
 8008412:	b08a      	sub	sp, #40	; 0x28
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	2300      	movs	r3, #0
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	61ba      	str	r2, [r7, #24]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	18d3      	adds	r3, r2, r3
 800843a:	781a      	ldrb	r2, [r3, #0]
 800843c:	2124      	movs	r1, #36	; 0x24
 800843e:	187b      	adds	r3, r7, r1
 8008440:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 8008442:	000a      	movs	r2, r1
 8008444:	18bb      	adds	r3, r7, r2
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	2b1f      	cmp	r3, #31
 800844a:	d94e      	bls.n	80084ea <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800844c:	18bb      	adds	r3, r7, r2
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	2b2f      	cmp	r3, #47	; 0x2f
 8008452:	d007      	beq.n	8008464 <create_name+0x54>
 8008454:	18bb      	adds	r3, r7, r2
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	2b5c      	cmp	r3, #92	; 0x5c
 800845a:	d110      	bne.n	800847e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800845c:	e002      	b.n	8008464 <create_name+0x54>
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	3301      	adds	r3, #1
 8008462:	61bb      	str	r3, [r7, #24]
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	18d3      	adds	r3, r2, r3
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b2f      	cmp	r3, #47	; 0x2f
 800846e:	d0f6      	beq.n	800845e <create_name+0x4e>
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	18d3      	adds	r3, r2, r3
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2b5c      	cmp	r3, #92	; 0x5c
 800847a:	d0f0      	beq.n	800845e <create_name+0x4e>
			break;
 800847c:	e036      	b.n	80084ec <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2bfe      	cmp	r3, #254	; 0xfe
 8008482:	d901      	bls.n	8008488 <create_name+0x78>
 8008484:	2306      	movs	r3, #6
 8008486:	e1c2      	b.n	800880e <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008488:	2524      	movs	r5, #36	; 0x24
 800848a:	197b      	adds	r3, r7, r5
 800848c:	197a      	adds	r2, r7, r5
 800848e:	8812      	ldrh	r2, [r2, #0]
 8008490:	21ff      	movs	r1, #255	; 0xff
 8008492:	400a      	ands	r2, r1
 8008494:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008496:	197c      	adds	r4, r7, r5
 8008498:	197b      	adds	r3, r7, r5
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	2101      	movs	r1, #1
 800849e:	0018      	movs	r0, r3
 80084a0:	f001 fb70 	bl	8009b84 <ff_convert>
 80084a4:	0003      	movs	r3, r0
 80084a6:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80084a8:	197b      	adds	r3, r7, r5
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <create_name+0xa4>
 80084b0:	2306      	movs	r3, #6
 80084b2:	e1ac      	b.n	800880e <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80084b4:	2224      	movs	r2, #36	; 0x24
 80084b6:	18bb      	adds	r3, r7, r2
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	2b7f      	cmp	r3, #127	; 0x7f
 80084bc:	d80a      	bhi.n	80084d4 <create_name+0xc4>
 80084be:	18bb      	adds	r3, r7, r2
 80084c0:	881a      	ldrh	r2, [r3, #0]
 80084c2:	4ba7      	ldr	r3, [pc, #668]	; (8008760 <create_name+0x350>)
 80084c4:	0011      	movs	r1, r2
 80084c6:	0018      	movs	r0, r3
 80084c8:	f7fe fbef 	bl	8006caa <chk_chr>
 80084cc:	1e03      	subs	r3, r0, #0
 80084ce:	d001      	beq.n	80084d4 <create_name+0xc4>
 80084d0:	2306      	movs	r3, #6
 80084d2:	e19c      	b.n	800880e <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	617a      	str	r2, [r7, #20]
 80084da:	005b      	lsls	r3, r3, #1
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	18d3      	adds	r3, r2, r3
 80084e0:	2224      	movs	r2, #36	; 0x24
 80084e2:	18ba      	adds	r2, r7, r2
 80084e4:	8812      	ldrh	r2, [r2, #0]
 80084e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80084e8:	e7a2      	b.n	8008430 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80084ea:	46c0      	nop			; (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	18d2      	adds	r2, r2, r3
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80084f6:	2324      	movs	r3, #36	; 0x24
 80084f8:	18fb      	adds	r3, r7, r3
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	2b1f      	cmp	r3, #31
 80084fe:	d801      	bhi.n	8008504 <create_name+0xf4>
 8008500:	2204      	movs	r2, #4
 8008502:	e000      	b.n	8008506 <create_name+0xf6>
 8008504:	2200      	movs	r2, #0
 8008506:	2327      	movs	r3, #39	; 0x27
 8008508:	18fb      	adds	r3, r7, r3
 800850a:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800850c:	e016      	b.n	800853c <create_name+0x12c>
		w = lfn[di - 1];
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	4a94      	ldr	r2, [pc, #592]	; (8008764 <create_name+0x354>)
 8008512:	4694      	mov	ip, r2
 8008514:	4463      	add	r3, ip
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	18d2      	adds	r2, r2, r3
 800851c:	2124      	movs	r1, #36	; 0x24
 800851e:	187b      	adds	r3, r7, r1
 8008520:	8812      	ldrh	r2, [r2, #0]
 8008522:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8008524:	000a      	movs	r2, r1
 8008526:	18bb      	adds	r3, r7, r2
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	2b20      	cmp	r3, #32
 800852c:	d003      	beq.n	8008536 <create_name+0x126>
 800852e:	18bb      	adds	r3, r7, r2
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	2b2e      	cmp	r3, #46	; 0x2e
 8008534:	d106      	bne.n	8008544 <create_name+0x134>
		di--;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	3b01      	subs	r3, #1
 800853a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e5      	bne.n	800850e <create_name+0xfe>
 8008542:	e000      	b.n	8008546 <create_name+0x136>
		if (w != ' ' && w != '.') break;
 8008544:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	18d3      	adds	r3, r2, r3
 800854e:	2200      	movs	r2, #0
 8008550:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <create_name+0x14c>
 8008558:	2306      	movs	r3, #6
 800855a:	e158      	b.n	800880e <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3324      	adds	r3, #36	; 0x24
 8008560:	220b      	movs	r2, #11
 8008562:	2120      	movs	r1, #32
 8008564:	0018      	movs	r0, r3
 8008566:	f7fe fb62 	bl	8006c2e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800856a:	2300      	movs	r3, #0
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	e002      	b.n	8008576 <create_name+0x166>
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	3301      	adds	r3, #1
 8008574:	61bb      	str	r3, [r7, #24]
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	18d3      	adds	r3, r2, r3
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	2b20      	cmp	r3, #32
 8008582:	d0f5      	beq.n	8008570 <create_name+0x160>
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	18d3      	adds	r3, r2, r3
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	2b2e      	cmp	r3, #46	; 0x2e
 8008590:	d0ee      	beq.n	8008570 <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00a      	beq.n	80085ae <create_name+0x19e>
 8008598:	2227      	movs	r2, #39	; 0x27
 800859a:	18bb      	adds	r3, r7, r2
 800859c:	18ba      	adds	r2, r7, r2
 800859e:	7812      	ldrb	r2, [r2, #0]
 80085a0:	2103      	movs	r1, #3
 80085a2:	430a      	orrs	r2, r1
 80085a4:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80085a6:	e002      	b.n	80085ae <create_name+0x19e>
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	3b01      	subs	r3, #1
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d009      	beq.n	80085c8 <create_name+0x1b8>
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	4a6b      	ldr	r2, [pc, #428]	; (8008764 <create_name+0x354>)
 80085b8:	4694      	mov	ip, r2
 80085ba:	4463      	add	r3, ip
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	18d3      	adds	r3, r2, r3
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	2b2e      	cmp	r3, #46	; 0x2e
 80085c6:	d1ef      	bne.n	80085a8 <create_name+0x198>

	i = b = 0; ni = 8;
 80085c8:	2326      	movs	r3, #38	; 0x26
 80085ca:	18fb      	adds	r3, r7, r3
 80085cc:	2200      	movs	r2, #0
 80085ce:	701a      	strb	r2, [r3, #0]
 80085d0:	2300      	movs	r3, #0
 80085d2:	623b      	str	r3, [r7, #32]
 80085d4:	2308      	movs	r3, #8
 80085d6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	61ba      	str	r2, [r7, #24]
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	18d2      	adds	r2, r2, r3
 80085e4:	2124      	movs	r1, #36	; 0x24
 80085e6:	187b      	adds	r3, r7, r1
 80085e8:	8812      	ldrh	r2, [r2, #0]
 80085ea:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 80085ec:	000a      	movs	r2, r1
 80085ee:	18bb      	adds	r3, r7, r2
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d100      	bne.n	80085f8 <create_name+0x1e8>
 80085f6:	e0b1      	b.n	800875c <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80085f8:	18bb      	adds	r3, r7, r2
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	d007      	beq.n	8008610 <create_name+0x200>
 8008600:	18bb      	adds	r3, r7, r2
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	2b2e      	cmp	r3, #46	; 0x2e
 8008606:	d10b      	bne.n	8008620 <create_name+0x210>
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	429a      	cmp	r2, r3
 800860e:	d007      	beq.n	8008620 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 8008610:	2227      	movs	r2, #39	; 0x27
 8008612:	18bb      	adds	r3, r7, r2
 8008614:	18ba      	adds	r2, r7, r2
 8008616:	7812      	ldrb	r2, [r2, #0]
 8008618:	2103      	movs	r1, #3
 800861a:	430a      	orrs	r2, r1
 800861c:	701a      	strb	r2, [r3, #0]
 800861e:	e09c      	b.n	800875a <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008620:	6a3a      	ldr	r2, [r7, #32]
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	429a      	cmp	r2, r3
 8008626:	d203      	bcs.n	8008630 <create_name+0x220>
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	429a      	cmp	r2, r3
 800862e:	d127      	bne.n	8008680 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	2b0b      	cmp	r3, #11
 8008634:	d107      	bne.n	8008646 <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 8008636:	2227      	movs	r2, #39	; 0x27
 8008638:	18bb      	adds	r3, r7, r2
 800863a:	18ba      	adds	r2, r7, r2
 800863c:	7812      	ldrb	r2, [r2, #0]
 800863e:	2103      	movs	r1, #3
 8008640:	430a      	orrs	r2, r1
 8008642:	701a      	strb	r2, [r3, #0]
 8008644:	e095      	b.n	8008772 <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	429a      	cmp	r2, r3
 800864c:	d006      	beq.n	800865c <create_name+0x24c>
 800864e:	2227      	movs	r2, #39	; 0x27
 8008650:	18bb      	adds	r3, r7, r2
 8008652:	18ba      	adds	r2, r7, r2
 8008654:	7812      	ldrb	r2, [r2, #0]
 8008656:	2103      	movs	r1, #3
 8008658:	430a      	orrs	r2, r1
 800865a:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	429a      	cmp	r2, r3
 8008662:	d900      	bls.n	8008666 <create_name+0x256>
 8008664:	e084      	b.n	8008770 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	61bb      	str	r3, [r7, #24]
 800866a:	2308      	movs	r3, #8
 800866c:	623b      	str	r3, [r7, #32]
 800866e:	230b      	movs	r3, #11
 8008670:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008672:	2226      	movs	r2, #38	; 0x26
 8008674:	18bb      	adds	r3, r7, r2
 8008676:	18ba      	adds	r2, r7, r2
 8008678:	7812      	ldrb	r2, [r2, #0]
 800867a:	0092      	lsls	r2, r2, #2
 800867c:	701a      	strb	r2, [r3, #0]
 800867e:	e06c      	b.n	800875a <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008680:	2524      	movs	r5, #36	; 0x24
 8008682:	197b      	adds	r3, r7, r5
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	2b7f      	cmp	r3, #127	; 0x7f
 8008688:	d91a      	bls.n	80086c0 <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800868a:	197c      	adds	r4, r7, r5
 800868c:	197b      	adds	r3, r7, r5
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	2100      	movs	r1, #0
 8008692:	0018      	movs	r0, r3
 8008694:	f001 fa76 	bl	8009b84 <ff_convert>
 8008698:	0003      	movs	r3, r0
 800869a:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800869c:	197b      	adds	r3, r7, r5
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d006      	beq.n	80086b2 <create_name+0x2a2>
 80086a4:	197b      	adds	r3, r7, r5
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	3b80      	subs	r3, #128	; 0x80
 80086aa:	4a2f      	ldr	r2, [pc, #188]	; (8008768 <create_name+0x358>)
 80086ac:	5cd2      	ldrb	r2, [r2, r3]
 80086ae:	197b      	adds	r3, r7, r5
 80086b0:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80086b2:	2227      	movs	r2, #39	; 0x27
 80086b4:	18bb      	adds	r3, r7, r2
 80086b6:	18ba      	adds	r2, r7, r2
 80086b8:	7812      	ldrb	r2, [r2, #0]
 80086ba:	2102      	movs	r1, #2
 80086bc:	430a      	orrs	r2, r1
 80086be:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80086c0:	2224      	movs	r2, #36	; 0x24
 80086c2:	18bb      	adds	r3, r7, r2
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d008      	beq.n	80086dc <create_name+0x2cc>
 80086ca:	18bb      	adds	r3, r7, r2
 80086cc:	881a      	ldrh	r2, [r3, #0]
 80086ce:	4b27      	ldr	r3, [pc, #156]	; (800876c <create_name+0x35c>)
 80086d0:	0011      	movs	r1, r2
 80086d2:	0018      	movs	r0, r3
 80086d4:	f7fe fae9 	bl	8006caa <chk_chr>
 80086d8:	1e03      	subs	r3, r0, #0
 80086da:	d00b      	beq.n	80086f4 <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80086dc:	2324      	movs	r3, #36	; 0x24
 80086de:	18fb      	adds	r3, r7, r3
 80086e0:	225f      	movs	r2, #95	; 0x5f
 80086e2:	801a      	strh	r2, [r3, #0]
 80086e4:	2227      	movs	r2, #39	; 0x27
 80086e6:	18bb      	adds	r3, r7, r2
 80086e8:	18ba      	adds	r2, r7, r2
 80086ea:	7812      	ldrb	r2, [r2, #0]
 80086ec:	2103      	movs	r1, #3
 80086ee:	430a      	orrs	r2, r1
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	e025      	b.n	8008740 <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80086f4:	2224      	movs	r2, #36	; 0x24
 80086f6:	18bb      	adds	r3, r7, r2
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	2b40      	cmp	r3, #64	; 0x40
 80086fc:	d90b      	bls.n	8008716 <create_name+0x306>
 80086fe:	18bb      	adds	r3, r7, r2
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	2b5a      	cmp	r3, #90	; 0x5a
 8008704:	d807      	bhi.n	8008716 <create_name+0x306>
					b |= 2;
 8008706:	2226      	movs	r2, #38	; 0x26
 8008708:	18bb      	adds	r3, r7, r2
 800870a:	18ba      	adds	r2, r7, r2
 800870c:	7812      	ldrb	r2, [r2, #0]
 800870e:	2102      	movs	r1, #2
 8008710:	430a      	orrs	r2, r1
 8008712:	701a      	strb	r2, [r3, #0]
 8008714:	e014      	b.n	8008740 <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008716:	2024      	movs	r0, #36	; 0x24
 8008718:	183b      	adds	r3, r7, r0
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	2b60      	cmp	r3, #96	; 0x60
 800871e:	d90f      	bls.n	8008740 <create_name+0x330>
 8008720:	183b      	adds	r3, r7, r0
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	2b7a      	cmp	r3, #122	; 0x7a
 8008726:	d80b      	bhi.n	8008740 <create_name+0x330>
						b |= 1; w -= 0x20;
 8008728:	2226      	movs	r2, #38	; 0x26
 800872a:	18bb      	adds	r3, r7, r2
 800872c:	18ba      	adds	r2, r7, r2
 800872e:	7812      	ldrb	r2, [r2, #0]
 8008730:	2101      	movs	r1, #1
 8008732:	430a      	orrs	r2, r1
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	183b      	adds	r3, r7, r0
 8008738:	183a      	adds	r2, r7, r0
 800873a:	8812      	ldrh	r2, [r2, #0]
 800873c:	3a20      	subs	r2, #32
 800873e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	623a      	str	r2, [r7, #32]
 8008746:	2224      	movs	r2, #36	; 0x24
 8008748:	18ba      	adds	r2, r7, r2
 800874a:	8812      	ldrh	r2, [r2, #0]
 800874c:	b2d0      	uxtb	r0, r2
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	2124      	movs	r1, #36	; 0x24
 8008752:	18d3      	adds	r3, r2, r3
 8008754:	185b      	adds	r3, r3, r1
 8008756:	1c02      	adds	r2, r0, #0
 8008758:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800875a:	e73d      	b.n	80085d8 <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 800875c:	46c0      	nop			; (mov r8, r8)
 800875e:	e008      	b.n	8008772 <create_name+0x362>
 8008760:	0800e768 	.word	0x0800e768
 8008764:	7fffffff 	.word	0x7fffffff
 8008768:	0800e8c4 	.word	0x0800e8c4
 800876c:	0800e774 	.word	0x0800e774
			if (si > di) break;			/* No extension */
 8008770:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2224      	movs	r2, #36	; 0x24
 8008776:	5c9b      	ldrb	r3, [r3, r2]
 8008778:	2be5      	cmp	r3, #229	; 0xe5
 800877a:	d103      	bne.n	8008784 <create_name+0x374>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2224      	movs	r2, #36	; 0x24
 8008780:	2105      	movs	r1, #5
 8008782:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	2b08      	cmp	r3, #8
 8008788:	d105      	bne.n	8008796 <create_name+0x386>
 800878a:	2226      	movs	r2, #38	; 0x26
 800878c:	18bb      	adds	r3, r7, r2
 800878e:	18ba      	adds	r2, r7, r2
 8008790:	7812      	ldrb	r2, [r2, #0]
 8008792:	0092      	lsls	r2, r2, #2
 8008794:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008796:	2126      	movs	r1, #38	; 0x26
 8008798:	187b      	adds	r3, r7, r1
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	220c      	movs	r2, #12
 800879e:	4013      	ands	r3, r2
 80087a0:	2b0c      	cmp	r3, #12
 80087a2:	d005      	beq.n	80087b0 <create_name+0x3a0>
 80087a4:	187b      	adds	r3, r7, r1
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2203      	movs	r2, #3
 80087aa:	4013      	ands	r3, r2
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d106      	bne.n	80087be <create_name+0x3ae>
 80087b0:	2227      	movs	r2, #39	; 0x27
 80087b2:	18bb      	adds	r3, r7, r2
 80087b4:	18ba      	adds	r2, r7, r2
 80087b6:	7812      	ldrb	r2, [r2, #0]
 80087b8:	2102      	movs	r1, #2
 80087ba:	430a      	orrs	r2, r1
 80087bc:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80087be:	2127      	movs	r1, #39	; 0x27
 80087c0:	187b      	adds	r3, r7, r1
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	2202      	movs	r2, #2
 80087c6:	4013      	ands	r3, r2
 80087c8:	d11a      	bne.n	8008800 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80087ca:	2326      	movs	r3, #38	; 0x26
 80087cc:	18fb      	adds	r3, r7, r3
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2203      	movs	r2, #3
 80087d2:	4013      	ands	r3, r2
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d105      	bne.n	80087e4 <create_name+0x3d4>
 80087d8:	187b      	adds	r3, r7, r1
 80087da:	187a      	adds	r2, r7, r1
 80087dc:	7812      	ldrb	r2, [r2, #0]
 80087de:	2110      	movs	r1, #16
 80087e0:	430a      	orrs	r2, r1
 80087e2:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80087e4:	2326      	movs	r3, #38	; 0x26
 80087e6:	18fb      	adds	r3, r7, r3
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	220c      	movs	r2, #12
 80087ec:	4013      	ands	r3, r2
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d106      	bne.n	8008800 <create_name+0x3f0>
 80087f2:	2227      	movs	r2, #39	; 0x27
 80087f4:	18bb      	adds	r3, r7, r2
 80087f6:	18ba      	adds	r2, r7, r2
 80087f8:	7812      	ldrb	r2, [r2, #0]
 80087fa:	2108      	movs	r1, #8
 80087fc:	430a      	orrs	r2, r1
 80087fe:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2227      	movs	r2, #39	; 0x27
 8008804:	18ba      	adds	r2, r7, r2
 8008806:	212f      	movs	r1, #47	; 0x2f
 8008808:	7812      	ldrb	r2, [r2, #0]
 800880a:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 800880c:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800880e:	0018      	movs	r0, r3
 8008810:	46bd      	mov	sp, r7
 8008812:	b00a      	add	sp, #40	; 0x28
 8008814:	bdb0      	pop	{r4, r5, r7, pc}
 8008816:	46c0      	nop			; (mov r8, r8)

08008818 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008818:	b5b0      	push	{r4, r5, r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800882c:	e002      	b.n	8008834 <follow_path+0x1c>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	3301      	adds	r3, #1
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	2b2f      	cmp	r3, #47	; 0x2f
 800883a:	d0f8      	beq.n	800882e <follow_path+0x16>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b5c      	cmp	r3, #92	; 0x5c
 8008842:	d0f4      	beq.n	800882e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	2200      	movs	r2, #0
 8008848:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	2b1f      	cmp	r3, #31
 8008850:	d80d      	bhi.n	800886e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	222f      	movs	r2, #47	; 0x2f
 8008856:	2180      	movs	r1, #128	; 0x80
 8008858:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 800885a:	2317      	movs	r3, #23
 800885c:	18fc      	adds	r4, r7, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2100      	movs	r1, #0
 8008862:	0018      	movs	r0, r3
 8008864:	f7ff f819 	bl	800789a <dir_sdi>
 8008868:	0003      	movs	r3, r0
 800886a:	7023      	strb	r3, [r4, #0]
 800886c:	e057      	b.n	800891e <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800886e:	2517      	movs	r5, #23
 8008870:	197c      	adds	r4, r7, r5
 8008872:	003a      	movs	r2, r7
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	0011      	movs	r1, r2
 8008878:	0018      	movs	r0, r3
 800887a:	f7ff fdc9 	bl	8008410 <create_name>
 800887e:	0003      	movs	r3, r0
 8008880:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8008882:	197b      	adds	r3, r7, r5
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d144      	bne.n	8008914 <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 800888a:	197c      	adds	r4, r7, r5
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	0018      	movs	r0, r3
 8008890:	f7ff fbb3 	bl	8007ffa <dir_find>
 8008894:	0003      	movs	r3, r0
 8008896:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8008898:	200b      	movs	r0, #11
 800889a:	183b      	adds	r3, r7, r0
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	212f      	movs	r1, #47	; 0x2f
 80088a0:	5c52      	ldrb	r2, [r2, r1]
 80088a2:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80088a4:	197b      	adds	r3, r7, r5
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00c      	beq.n	80088c6 <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80088ac:	197b      	adds	r3, r7, r5
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d131      	bne.n	8008918 <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80088b4:	183b      	adds	r3, r7, r0
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2204      	movs	r2, #4
 80088ba:	4013      	ands	r3, r2
 80088bc:	d12c      	bne.n	8008918 <follow_path+0x100>
 80088be:	197b      	adds	r3, r7, r5
 80088c0:	2205      	movs	r2, #5
 80088c2:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 80088c4:	e028      	b.n	8008918 <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80088c6:	230b      	movs	r3, #11
 80088c8:	18fb      	adds	r3, r7, r3
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2204      	movs	r2, #4
 80088ce:	4013      	ands	r3, r2
 80088d0:	d124      	bne.n	800891c <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	799b      	ldrb	r3, [r3, #6]
 80088d6:	001a      	movs	r2, r3
 80088d8:	2310      	movs	r3, #16
 80088da:	4013      	ands	r3, r2
 80088dc:	d104      	bne.n	80088e8 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 80088de:	2317      	movs	r3, #23
 80088e0:	18fb      	adds	r3, r7, r3
 80088e2:	2205      	movs	r2, #5
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	e01a      	b.n	800891e <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3338      	adds	r3, #56	; 0x38
 80088ec:	001c      	movs	r4, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	695a      	ldr	r2, [r3, #20]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	899b      	ldrh	r3, [r3, #12]
 80088f6:	0019      	movs	r1, r3
 80088f8:	0010      	movs	r0, r2
 80088fa:	f7f7 fca7 	bl	800024c <__aeabi_uidivmod>
 80088fe:	000b      	movs	r3, r1
 8008900:	18e2      	adds	r2, r4, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	0011      	movs	r1, r2
 8008906:	0018      	movs	r0, r3
 8008908:	f7ff f987 	bl	8007c1a <ld_clust>
 800890c:	0002      	movs	r2, r0
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008912:	e7ac      	b.n	800886e <follow_path+0x56>
			if (res != FR_OK) break;
 8008914:	46c0      	nop			; (mov r8, r8)
 8008916:	e002      	b.n	800891e <follow_path+0x106>
				break;
 8008918:	46c0      	nop			; (mov r8, r8)
 800891a:	e000      	b.n	800891e <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800891c:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 800891e:	2317      	movs	r3, #23
 8008920:	18fb      	adds	r3, r7, r3
 8008922:	781b      	ldrb	r3, [r3, #0]
}
 8008924:	0018      	movs	r0, r3
 8008926:	46bd      	mov	sp, r7
 8008928:	b006      	add	sp, #24
 800892a:	bdb0      	pop	{r4, r5, r7, pc}

0800892c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008934:	2301      	movs	r3, #1
 8008936:	425b      	negs	r3, r3
 8008938:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d031      	beq.n	80089a6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	e002      	b.n	8008950 <get_ldnumber+0x24>
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	3301      	adds	r3, #1
 800894e:	617b      	str	r3, [r7, #20]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	2b1f      	cmp	r3, #31
 8008956:	d903      	bls.n	8008960 <get_ldnumber+0x34>
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b3a      	cmp	r3, #58	; 0x3a
 800895e:	d1f4      	bne.n	800894a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	2b3a      	cmp	r3, #58	; 0x3a
 8008966:	d11c      	bne.n	80089a2 <get_ldnumber+0x76>
			tp = *path;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	1c5a      	adds	r2, r3, #1
 8008972:	60fa      	str	r2, [r7, #12]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	3b30      	subs	r3, #48	; 0x30
 8008978:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b09      	cmp	r3, #9
 800897e:	d80e      	bhi.n	800899e <get_ldnumber+0x72>
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	429a      	cmp	r2, r3
 8008986:	d10a      	bne.n	800899e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d107      	bne.n	800899e <get_ldnumber+0x72>
					vol = (int)i;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	3301      	adds	r3, #1
 8008996:	617b      	str	r3, [r7, #20]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	e002      	b.n	80089a8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80089a2:	2300      	movs	r3, #0
 80089a4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80089a6:	693b      	ldr	r3, [r7, #16]
}
 80089a8:	0018      	movs	r0, r3
 80089aa:	46bd      	mov	sp, r7
 80089ac:	b006      	add	sp, #24
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	70da      	strb	r2, [r3, #3]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	4252      	negs	r2, r2
 80089c6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	0011      	movs	r1, r2
 80089ce:	0018      	movs	r0, r3
 80089d0:	f7fe fb36 	bl	8007040 <move_window>
 80089d4:	1e03      	subs	r3, r0, #0
 80089d6:	d001      	beq.n	80089dc <check_fs+0x2c>
 80089d8:	2304      	movs	r3, #4
 80089da:	e037      	b.n	8008a4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3338      	adds	r3, #56	; 0x38
 80089e0:	33ff      	adds	r3, #255	; 0xff
 80089e2:	33ff      	adds	r3, #255	; 0xff
 80089e4:	0018      	movs	r0, r3
 80089e6:	f7fe f87f 	bl	8006ae8 <ld_word>
 80089ea:	0003      	movs	r3, r0
 80089ec:	001a      	movs	r2, r3
 80089ee:	4b19      	ldr	r3, [pc, #100]	; (8008a54 <check_fs+0xa4>)
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d001      	beq.n	80089f8 <check_fs+0x48>
 80089f4:	2303      	movs	r3, #3
 80089f6:	e029      	b.n	8008a4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2238      	movs	r2, #56	; 0x38
 80089fc:	5c9b      	ldrb	r3, [r3, r2]
 80089fe:	2be9      	cmp	r3, #233	; 0xe9
 8008a00:	d009      	beq.n	8008a16 <check_fs+0x66>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2238      	movs	r2, #56	; 0x38
 8008a06:	5c9b      	ldrb	r3, [r3, r2]
 8008a08:	2beb      	cmp	r3, #235	; 0xeb
 8008a0a:	d11e      	bne.n	8008a4a <check_fs+0x9a>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	223a      	movs	r2, #58	; 0x3a
 8008a10:	5c9b      	ldrb	r3, [r3, r2]
 8008a12:	2b90      	cmp	r3, #144	; 0x90
 8008a14:	d119      	bne.n	8008a4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3338      	adds	r3, #56	; 0x38
 8008a1a:	3336      	adds	r3, #54	; 0x36
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	f7fe f87e 	bl	8006b1e <ld_dword>
 8008a22:	0003      	movs	r3, r0
 8008a24:	021b      	lsls	r3, r3, #8
 8008a26:	0a1b      	lsrs	r3, r3, #8
 8008a28:	4a0b      	ldr	r2, [pc, #44]	; (8008a58 <check_fs+0xa8>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d101      	bne.n	8008a32 <check_fs+0x82>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e00c      	b.n	8008a4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	3338      	adds	r3, #56	; 0x38
 8008a36:	3352      	adds	r3, #82	; 0x52
 8008a38:	0018      	movs	r0, r3
 8008a3a:	f7fe f870 	bl	8006b1e <ld_dword>
 8008a3e:	0003      	movs	r3, r0
 8008a40:	4a06      	ldr	r2, [pc, #24]	; (8008a5c <check_fs+0xac>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d101      	bne.n	8008a4a <check_fs+0x9a>
 8008a46:	2300      	movs	r3, #0
 8008a48:	e000      	b.n	8008a4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008a4a:	2302      	movs	r3, #2
}
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	b002      	add	sp, #8
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	0000aa55 	.word	0x0000aa55
 8008a58:	00544146 	.word	0x00544146
 8008a5c:	33544146 	.word	0x33544146

08008a60 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008a60:	b5b0      	push	{r4, r5, r7, lr}
 8008a62:	b096      	sub	sp, #88	; 0x58
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	1dfb      	adds	r3, r7, #7
 8008a6c:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	0018      	movs	r0, r3
 8008a78:	f7ff ff58 	bl	800892c <get_ldnumber>
 8008a7c:	0003      	movs	r3, r0
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	da01      	bge.n	8008a8a <find_volume+0x2a>
 8008a86:	230b      	movs	r3, #11
 8008a88:	e283      	b.n	8008f92 <find_volume+0x532>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008a8a:	4bc2      	ldr	r3, [pc, #776]	; (8008d94 <find_volume+0x334>)
 8008a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a8e:	0092      	lsls	r2, r2, #2
 8008a90:	58d3      	ldr	r3, [r2, r3]
 8008a92:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <find_volume+0x3e>
 8008a9a:	230c      	movs	r3, #12
 8008a9c:	e279      	b.n	8008f92 <find_volume+0x532>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aa2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008aa4:	1dfb      	adds	r3, r7, #7
 8008aa6:	1dfa      	adds	r2, r7, #7
 8008aa8:	7812      	ldrb	r2, [r2, #0]
 8008aaa:	2101      	movs	r1, #1
 8008aac:	438a      	bics	r2, r1
 8008aae:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d01b      	beq.n	8008af0 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	2537      	movs	r5, #55	; 0x37
 8008abe:	197c      	adds	r4, r7, r5
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f7fd ff47 	bl	8006954 <disk_status>
 8008ac6:	0003      	movs	r3, r0
 8008ac8:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008aca:	0029      	movs	r1, r5
 8008acc:	187b      	adds	r3, r7, r1
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	d10c      	bne.n	8008af0 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008ad6:	1dfb      	adds	r3, r7, #7
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d006      	beq.n	8008aec <find_volume+0x8c>
 8008ade:	187b      	adds	r3, r7, r1
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2204      	movs	r2, #4
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	d001      	beq.n	8008aec <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8008ae8:	230a      	movs	r3, #10
 8008aea:	e252      	b.n	8008f92 <find_volume+0x532>
			}
			return FR_OK;				/* The file system object is valid */
 8008aec:	2300      	movs	r3, #0
 8008aee:	e250      	b.n	8008f92 <find_volume+0x532>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	2200      	movs	r2, #0
 8008af4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b00:	785b      	ldrb	r3, [r3, #1]
 8008b02:	2537      	movs	r5, #55	; 0x37
 8008b04:	197c      	adds	r4, r7, r5
 8008b06:	0018      	movs	r0, r3
 8008b08:	f7fd ff46 	bl	8006998 <disk_initialize>
 8008b0c:	0003      	movs	r3, r0
 8008b0e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008b10:	197b      	adds	r3, r7, r5
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2201      	movs	r2, #1
 8008b16:	4013      	ands	r3, r2
 8008b18:	d001      	beq.n	8008b1e <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e239      	b.n	8008f92 <find_volume+0x532>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008b1e:	1dfb      	adds	r3, r7, #7
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d007      	beq.n	8008b36 <find_volume+0xd6>
 8008b26:	2337      	movs	r3, #55	; 0x37
 8008b28:	18fb      	adds	r3, r7, r3
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	2204      	movs	r2, #4
 8008b2e:	4013      	ands	r3, r2
 8008b30:	d001      	beq.n	8008b36 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8008b32:	230a      	movs	r3, #10
 8008b34:	e22d      	b.n	8008f92 <find_volume+0x532>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b38:	7858      	ldrb	r0, [r3, #1]
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3c:	330c      	adds	r3, #12
 8008b3e:	001a      	movs	r2, r3
 8008b40:	2102      	movs	r1, #2
 8008b42:	f7fd ffa9 	bl	8006a98 <disk_ioctl>
 8008b46:	1e03      	subs	r3, r0, #0
 8008b48:	d001      	beq.n	8008b4e <find_volume+0xee>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e221      	b.n	8008f92 <find_volume+0x532>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b50:	899a      	ldrh	r2, [r3, #12]
 8008b52:	2380      	movs	r3, #128	; 0x80
 8008b54:	015b      	lsls	r3, r3, #5
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d80d      	bhi.n	8008b76 <find_volume+0x116>
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5c:	899a      	ldrh	r2, [r3, #12]
 8008b5e:	2380      	movs	r3, #128	; 0x80
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d307      	bcc.n	8008b76 <find_volume+0x116>
 8008b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b68:	899b      	ldrh	r3, [r3, #12]
 8008b6a:	001a      	movs	r2, r3
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	899b      	ldrh	r3, [r3, #12]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	4013      	ands	r3, r2
 8008b74:	d001      	beq.n	8008b7a <find_volume+0x11a>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e20b      	b.n	8008f92 <find_volume+0x532>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008b7e:	2557      	movs	r5, #87	; 0x57
 8008b80:	197c      	adds	r4, r7, r5
 8008b82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	0011      	movs	r1, r2
 8008b88:	0018      	movs	r0, r3
 8008b8a:	f7ff ff11 	bl	80089b0 <check_fs>
 8008b8e:	0003      	movs	r3, r0
 8008b90:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008b92:	197b      	adds	r3, r7, r5
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d14b      	bne.n	8008c32 <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b9e:	e01d      	b.n	8008bdc <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba2:	3338      	adds	r3, #56	; 0x38
 8008ba4:	001a      	movs	r2, r3
 8008ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba8:	011b      	lsls	r3, r3, #4
 8008baa:	33bf      	adds	r3, #191	; 0xbf
 8008bac:	33ff      	adds	r3, #255	; 0xff
 8008bae:	18d3      	adds	r3, r2, r3
 8008bb0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d006      	beq.n	8008bca <find_volume+0x16a>
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	0018      	movs	r0, r3
 8008bc2:	f7fd ffac 	bl	8006b1e <ld_dword>
 8008bc6:	0003      	movs	r3, r0
 8008bc8:	e000      	b.n	8008bcc <find_volume+0x16c>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	2214      	movs	r2, #20
 8008bce:	18ba      	adds	r2, r7, r2
 8008bd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bd2:	0089      	lsls	r1, r1, #2
 8008bd4:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bd8:	3301      	adds	r3, #1
 8008bda:	643b      	str	r3, [r7, #64]	; 0x40
 8008bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d9de      	bls.n	8008ba0 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008be2:	2300      	movs	r3, #0
 8008be4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <find_volume+0x192>
 8008bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008bf2:	2314      	movs	r3, #20
 8008bf4:	18fb      	adds	r3, r7, r3
 8008bf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bf8:	0092      	lsls	r2, r2, #2
 8008bfa:	58d3      	ldr	r3, [r2, r3]
 8008bfc:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d008      	beq.n	8008c16 <find_volume+0x1b6>
 8008c04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	0011      	movs	r1, r2
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	f7ff fed0 	bl	80089b0 <check_fs>
 8008c10:	0003      	movs	r3, r0
 8008c12:	001a      	movs	r2, r3
 8008c14:	e000      	b.n	8008c18 <find_volume+0x1b8>
 8008c16:	2203      	movs	r2, #3
 8008c18:	2157      	movs	r1, #87	; 0x57
 8008c1a:	187b      	adds	r3, r7, r1
 8008c1c:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008c1e:	187b      	adds	r3, r7, r1
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d905      	bls.n	8008c32 <find_volume+0x1d2>
 8008c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c28:	3301      	adds	r3, #1
 8008c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d9df      	bls.n	8008bf2 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008c32:	2357      	movs	r3, #87	; 0x57
 8008c34:	18fb      	adds	r3, r7, r3
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d101      	bne.n	8008c40 <find_volume+0x1e0>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e1a8      	b.n	8008f92 <find_volume+0x532>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008c40:	2357      	movs	r3, #87	; 0x57
 8008c42:	18fb      	adds	r3, r7, r3
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d901      	bls.n	8008c4e <find_volume+0x1ee>
 8008c4a:	230d      	movs	r3, #13
 8008c4c:	e1a1      	b.n	8008f92 <find_volume+0x532>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c50:	3338      	adds	r3, #56	; 0x38
 8008c52:	330b      	adds	r3, #11
 8008c54:	0018      	movs	r0, r3
 8008c56:	f7fd ff47 	bl	8006ae8 <ld_word>
 8008c5a:	0003      	movs	r3, r0
 8008c5c:	001a      	movs	r2, r3
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c60:	899b      	ldrh	r3, [r3, #12]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d001      	beq.n	8008c6a <find_volume+0x20a>
 8008c66:	230d      	movs	r3, #13
 8008c68:	e193      	b.n	8008f92 <find_volume+0x532>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6c:	3338      	adds	r3, #56	; 0x38
 8008c6e:	3316      	adds	r3, #22
 8008c70:	0018      	movs	r0, r3
 8008c72:	f7fd ff39 	bl	8006ae8 <ld_word>
 8008c76:	0003      	movs	r3, r0
 8008c78:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d107      	bne.n	8008c90 <find_volume+0x230>
 8008c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c82:	3338      	adds	r3, #56	; 0x38
 8008c84:	3324      	adds	r3, #36	; 0x24
 8008c86:	0018      	movs	r0, r3
 8008c88:	f7fd ff49 	bl	8006b1e <ld_dword>
 8008c8c:	0003      	movs	r3, r0
 8008c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c94:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c98:	2248      	movs	r2, #72	; 0x48
 8008c9a:	5c9a      	ldrb	r2, [r3, r2]
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	789b      	ldrb	r3, [r3, #2]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d005      	beq.n	8008cb4 <find_volume+0x254>
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008caa:	789b      	ldrb	r3, [r3, #2]
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d001      	beq.n	8008cb4 <find_volume+0x254>
 8008cb0:	230d      	movs	r3, #13
 8008cb2:	e16e      	b.n	8008f92 <find_volume+0x532>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	789b      	ldrb	r3, [r3, #2]
 8008cb8:	001a      	movs	r2, r3
 8008cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cbc:	4353      	muls	r3, r2
 8008cbe:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	2245      	movs	r2, #69	; 0x45
 8008cc4:	5c9b      	ldrb	r3, [r3, r2]
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cca:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cce:	895b      	ldrh	r3, [r3, #10]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d007      	beq.n	8008ce4 <find_volume+0x284>
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd6:	895b      	ldrh	r3, [r3, #10]
 8008cd8:	001a      	movs	r2, r3
 8008cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cdc:	895b      	ldrh	r3, [r3, #10]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	d001      	beq.n	8008ce8 <find_volume+0x288>
 8008ce4:	230d      	movs	r3, #13
 8008ce6:	e154      	b.n	8008f92 <find_volume+0x532>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	3338      	adds	r3, #56	; 0x38
 8008cec:	3311      	adds	r3, #17
 8008cee:	0018      	movs	r0, r3
 8008cf0:	f7fd fefa 	bl	8006ae8 <ld_word>
 8008cf4:	0003      	movs	r3, r0
 8008cf6:	001a      	movs	r2, r3
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfe:	891a      	ldrh	r2, [r3, #8]
 8008d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d02:	899b      	ldrh	r3, [r3, #12]
 8008d04:	095b      	lsrs	r3, r3, #5
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	0019      	movs	r1, r3
 8008d0a:	0010      	movs	r0, r2
 8008d0c:	f7f7 fa9e 	bl	800024c <__aeabi_uidivmod>
 8008d10:	000b      	movs	r3, r1
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <find_volume+0x2bc>
 8008d18:	230d      	movs	r3, #13
 8008d1a:	e13a      	b.n	8008f92 <find_volume+0x532>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1e:	3338      	adds	r3, #56	; 0x38
 8008d20:	3313      	adds	r3, #19
 8008d22:	0018      	movs	r0, r3
 8008d24:	f7fd fee0 	bl	8006ae8 <ld_word>
 8008d28:	0003      	movs	r3, r0
 8008d2a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d107      	bne.n	8008d42 <find_volume+0x2e2>
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	3338      	adds	r3, #56	; 0x38
 8008d36:	3320      	adds	r3, #32
 8008d38:	0018      	movs	r0, r3
 8008d3a:	f7fd fef0 	bl	8006b1e <ld_dword>
 8008d3e:	0003      	movs	r3, r0
 8008d40:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	3338      	adds	r3, #56	; 0x38
 8008d46:	330e      	adds	r3, #14
 8008d48:	252e      	movs	r5, #46	; 0x2e
 8008d4a:	197c      	adds	r4, r7, r5
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f7fd fecb 	bl	8006ae8 <ld_word>
 8008d52:	0003      	movs	r3, r0
 8008d54:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008d56:	197b      	adds	r3, r7, r5
 8008d58:	881b      	ldrh	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <find_volume+0x302>
 8008d5e:	230d      	movs	r3, #13
 8008d60:	e117      	b.n	8008f92 <find_volume+0x532>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008d62:	232e      	movs	r3, #46	; 0x2e
 8008d64:	18fb      	adds	r3, r7, r3
 8008d66:	881a      	ldrh	r2, [r3, #0]
 8008d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6a:	18d4      	adds	r4, r2, r3
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	891a      	ldrh	r2, [r3, #8]
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	899b      	ldrh	r3, [r3, #12]
 8008d74:	095b      	lsrs	r3, r3, #5
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	0019      	movs	r1, r3
 8008d7a:	0010      	movs	r0, r2
 8008d7c:	f7f7 f9e0 	bl	8000140 <__udivsi3>
 8008d80:	0003      	movs	r3, r0
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	18e3      	adds	r3, r4, r3
 8008d86:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d203      	bcs.n	8008d98 <find_volume+0x338>
 8008d90:	230d      	movs	r3, #13
 8008d92:	e0fe      	b.n	8008f92 <find_volume+0x532>
 8008d94:	200002f0 	.word	0x200002f0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	1ad2      	subs	r2, r2, r3
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da0:	895b      	ldrh	r3, [r3, #10]
 8008da2:	0019      	movs	r1, r3
 8008da4:	0010      	movs	r0, r2
 8008da6:	f7f7 f9cb 	bl	8000140 <__udivsi3>
 8008daa:	0003      	movs	r3, r0
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <find_volume+0x358>
 8008db4:	230d      	movs	r3, #13
 8008db6:	e0ec      	b.n	8008f92 <find_volume+0x532>
		fmt = FS_FAT32;
 8008db8:	2157      	movs	r1, #87	; 0x57
 8008dba:	187b      	adds	r3, r7, r1
 8008dbc:	2203      	movs	r2, #3
 8008dbe:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	4a76      	ldr	r2, [pc, #472]	; (8008f9c <find_volume+0x53c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d802      	bhi.n	8008dce <find_volume+0x36e>
 8008dc8:	187b      	adds	r3, r7, r1
 8008dca:	2202      	movs	r2, #2
 8008dcc:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	4a73      	ldr	r2, [pc, #460]	; (8008fa0 <find_volume+0x540>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d803      	bhi.n	8008dde <find_volume+0x37e>
 8008dd6:	2357      	movs	r3, #87	; 0x57
 8008dd8:	18fb      	adds	r3, r7, r3
 8008dda:	2201      	movs	r2, #1
 8008ddc:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	1c9a      	adds	r2, r3, #2
 8008de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008dea:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008dec:	232e      	movs	r3, #46	; 0x2e
 8008dee:	18fb      	adds	r3, r7, r3
 8008df0:	881a      	ldrh	r2, [r3, #0]
 8008df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008df4:	18d2      	adds	r2, r2, r3
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008dfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	18d2      	adds	r2, r2, r3
 8008e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e02:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008e04:	2357      	movs	r3, #87	; 0x57
 8008e06:	18fb      	adds	r3, r7, r3
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	d11d      	bne.n	8008e4a <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e10:	3338      	adds	r3, #56	; 0x38
 8008e12:	332a      	adds	r3, #42	; 0x2a
 8008e14:	0018      	movs	r0, r3
 8008e16:	f7fd fe67 	bl	8006ae8 <ld_word>
 8008e1a:	1e03      	subs	r3, r0, #0
 8008e1c:	d001      	beq.n	8008e22 <find_volume+0x3c2>
 8008e1e:	230d      	movs	r3, #13
 8008e20:	e0b7      	b.n	8008f92 <find_volume+0x532>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	891b      	ldrh	r3, [r3, #8]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <find_volume+0x3ce>
 8008e2a:	230d      	movs	r3, #13
 8008e2c:	e0b1      	b.n	8008f92 <find_volume+0x532>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	3338      	adds	r3, #56	; 0x38
 8008e32:	332c      	adds	r3, #44	; 0x2c
 8008e34:	0018      	movs	r0, r3
 8008e36:	f7fd fe72 	bl	8006b1e <ld_dword>
 8008e3a:	0002      	movs	r2, r0
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	647b      	str	r3, [r7, #68]	; 0x44
 8008e48:	e020      	b.n	8008e8c <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4c:	891b      	ldrh	r3, [r3, #8]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <find_volume+0x3f6>
 8008e52:	230d      	movs	r3, #13
 8008e54:	e09d      	b.n	8008f92 <find_volume+0x532>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e5c:	18d2      	adds	r2, r2, r3
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e60:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008e62:	2357      	movs	r3, #87	; 0x57
 8008e64:	18fb      	adds	r3, r7, r3
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d103      	bne.n	8008e74 <find_volume+0x414>
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	e00a      	b.n	8008e8a <find_volume+0x42a>
 8008e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e76:	69da      	ldr	r2, [r3, #28]
 8008e78:	0013      	movs	r3, r2
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	189b      	adds	r3, r3, r2
 8008e7e:	085a      	lsrs	r2, r3, #1
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	2101      	movs	r1, #1
 8008e86:	400b      	ands	r3, r1
 8008e88:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008e8a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	6a1c      	ldr	r4, [r3, #32]
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	899b      	ldrh	r3, [r3, #12]
 8008e94:	001a      	movs	r2, r3
 8008e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e98:	18d3      	adds	r3, r2, r3
 8008e9a:	1e5a      	subs	r2, r3, #1
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	899b      	ldrh	r3, [r3, #12]
 8008ea0:	0019      	movs	r1, r3
 8008ea2:	0010      	movs	r0, r2
 8008ea4:	f7f7 f94c 	bl	8000140 <__udivsi3>
 8008ea8:	0003      	movs	r3, r0
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	d201      	bcs.n	8008eb2 <find_volume+0x452>
 8008eae:	230d      	movs	r3, #13
 8008eb0:	e06f      	b.n	8008f92 <find_volume+0x532>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	4252      	negs	r2, r2
 8008eb8:	619a      	str	r2, [r3, #24]
 8008eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebc:	699a      	ldr	r2, [r3, #24]
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec4:	2280      	movs	r2, #128	; 0x80
 8008ec6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008ec8:	2357      	movs	r3, #87	; 0x57
 8008eca:	18fb      	adds	r3, r7, r3
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d148      	bne.n	8008f64 <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed4:	3338      	adds	r3, #56	; 0x38
 8008ed6:	3330      	adds	r3, #48	; 0x30
 8008ed8:	0018      	movs	r0, r3
 8008eda:	f7fd fe05 	bl	8006ae8 <ld_word>
 8008ede:	0003      	movs	r3, r0
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d13f      	bne.n	8008f64 <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	0011      	movs	r1, r2
 8008eec:	0018      	movs	r0, r3
 8008eee:	f7fe f8a7 	bl	8007040 <move_window>
 8008ef2:	1e03      	subs	r3, r0, #0
 8008ef4:	d136      	bne.n	8008f64 <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef8:	2200      	movs	r2, #0
 8008efa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efe:	3338      	adds	r3, #56	; 0x38
 8008f00:	33ff      	adds	r3, #255	; 0xff
 8008f02:	33ff      	adds	r3, #255	; 0xff
 8008f04:	0018      	movs	r0, r3
 8008f06:	f7fd fdef 	bl	8006ae8 <ld_word>
 8008f0a:	0003      	movs	r3, r0
 8008f0c:	001a      	movs	r2, r3
 8008f0e:	4b25      	ldr	r3, [pc, #148]	; (8008fa4 <find_volume+0x544>)
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d127      	bne.n	8008f64 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f16:	3338      	adds	r3, #56	; 0x38
 8008f18:	0018      	movs	r0, r3
 8008f1a:	f7fd fe00 	bl	8006b1e <ld_dword>
 8008f1e:	0003      	movs	r3, r0
 8008f20:	4a21      	ldr	r2, [pc, #132]	; (8008fa8 <find_volume+0x548>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d11e      	bne.n	8008f64 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f28:	3338      	adds	r3, #56	; 0x38
 8008f2a:	33e5      	adds	r3, #229	; 0xe5
 8008f2c:	33ff      	adds	r3, #255	; 0xff
 8008f2e:	0018      	movs	r0, r3
 8008f30:	f7fd fdf5 	bl	8006b1e <ld_dword>
 8008f34:	0003      	movs	r3, r0
 8008f36:	4a1d      	ldr	r2, [pc, #116]	; (8008fac <find_volume+0x54c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d113      	bne.n	8008f64 <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	3338      	adds	r3, #56	; 0x38
 8008f40:	33e9      	adds	r3, #233	; 0xe9
 8008f42:	33ff      	adds	r3, #255	; 0xff
 8008f44:	0018      	movs	r0, r3
 8008f46:	f7fd fdea 	bl	8006b1e <ld_dword>
 8008f4a:	0002      	movs	r2, r0
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	3338      	adds	r3, #56	; 0x38
 8008f54:	33ed      	adds	r3, #237	; 0xed
 8008f56:	33ff      	adds	r3, #255	; 0xff
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f7fd fde0 	bl	8006b1e <ld_dword>
 8008f5e:	0002      	movs	r2, r0
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f66:	2257      	movs	r2, #87	; 0x57
 8008f68:	18ba      	adds	r2, r7, r2
 8008f6a:	7812      	ldrb	r2, [r2, #0]
 8008f6c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008f6e:	4b10      	ldr	r3, [pc, #64]	; (8008fb0 <find_volume+0x550>)
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	3301      	adds	r3, #1
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	4b0e      	ldr	r3, [pc, #56]	; (8008fb0 <find_volume+0x550>)
 8008f78:	801a      	strh	r2, [r3, #0]
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <find_volume+0x550>)
 8008f7c:	881a      	ldrh	r2, [r3, #0]
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f84:	4a0b      	ldr	r2, [pc, #44]	; (8008fb4 <find_volume+0x554>)
 8008f86:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f7fd fff0 	bl	8006f70 <clear_lock>
#endif
	return FR_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	0018      	movs	r0, r3
 8008f94:	46bd      	mov	sp, r7
 8008f96:	b016      	add	sp, #88	; 0x58
 8008f98:	bdb0      	pop	{r4, r5, r7, pc}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	0000fff5 	.word	0x0000fff5
 8008fa0:	00000ff5 	.word	0x00000ff5
 8008fa4:	0000aa55 	.word	0x0000aa55
 8008fa8:	41615252 	.word	0x41615252
 8008fac:	61417272 	.word	0x61417272
 8008fb0:	200002f4 	.word	0x200002f4
 8008fb4:	20000318 	.word	0x20000318

08008fb8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008fb8:	b590      	push	{r4, r7, lr}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008fc2:	240f      	movs	r4, #15
 8008fc4:	193b      	adds	r3, r7, r4
 8008fc6:	2209      	movs	r2, #9
 8008fc8:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d01d      	beq.n	800900c <validate+0x54>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d019      	beq.n	800900c <validate+0x54>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d014      	beq.n	800900c <validate+0x54>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	889a      	ldrh	r2, [r3, #4]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	88db      	ldrh	r3, [r3, #6]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d10d      	bne.n	800900c <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	785b      	ldrb	r3, [r3, #1]
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f7fd fcac 	bl	8006954 <disk_status>
 8008ffc:	0003      	movs	r3, r0
 8008ffe:	001a      	movs	r2, r3
 8009000:	2301      	movs	r3, #1
 8009002:	4013      	ands	r3, r2
 8009004:	d102      	bne.n	800900c <validate+0x54>
			res = FR_OK;
 8009006:	193b      	adds	r3, r7, r4
 8009008:	2200      	movs	r2, #0
 800900a:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800900c:	230f      	movs	r3, #15
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d102      	bne.n	800901c <validate+0x64>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	e000      	b.n	800901e <validate+0x66>
 800901c:	2200      	movs	r2, #0
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	601a      	str	r2, [r3, #0]
	return res;
 8009022:	230f      	movs	r3, #15
 8009024:	18fb      	adds	r3, r7, r3
 8009026:	781b      	ldrb	r3, [r3, #0]
}
 8009028:	0018      	movs	r0, r3
 800902a:	46bd      	mov	sp, r7
 800902c:	b005      	add	sp, #20
 800902e:	bd90      	pop	{r4, r7, pc}

08009030 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009030:	b5b0      	push	{r4, r5, r7, lr}
 8009032:	b088      	sub	sp, #32
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	1dfb      	adds	r3, r7, #7
 800903c:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009042:	2310      	movs	r3, #16
 8009044:	18fb      	adds	r3, r7, r3
 8009046:	0018      	movs	r0, r3
 8009048:	f7ff fc70 	bl	800892c <get_ldnumber>
 800904c:	0003      	movs	r3, r0
 800904e:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	2b00      	cmp	r3, #0
 8009054:	da01      	bge.n	800905a <f_mount+0x2a>
 8009056:	230b      	movs	r3, #11
 8009058:	e030      	b.n	80090bc <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800905a:	4b1a      	ldr	r3, [pc, #104]	; (80090c4 <f_mount+0x94>)
 800905c:	69fa      	ldr	r2, [r7, #28]
 800905e:	0092      	lsls	r2, r2, #2
 8009060:	58d3      	ldr	r3, [r2, r3]
 8009062:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d006      	beq.n	8009078 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	0018      	movs	r0, r3
 800906e:	f7fd ff7f 	bl	8006f70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	2200      	movs	r2, #0
 8009076:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009084:	68f9      	ldr	r1, [r7, #12]
 8009086:	4b0f      	ldr	r3, [pc, #60]	; (80090c4 <f_mount+0x94>)
 8009088:	69fa      	ldr	r2, [r7, #28]
 800908a:	0092      	lsls	r2, r2, #2
 800908c:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <f_mount+0x6c>
 8009094:	1dfb      	adds	r3, r7, #7
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d001      	beq.n	80090a0 <f_mount+0x70>
 800909c:	2300      	movs	r3, #0
 800909e:	e00d      	b.n	80090bc <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80090a0:	2517      	movs	r5, #23
 80090a2:	197c      	adds	r4, r7, r5
 80090a4:	230c      	movs	r3, #12
 80090a6:	18f9      	adds	r1, r7, r3
 80090a8:	2308      	movs	r3, #8
 80090aa:	18fb      	adds	r3, r7, r3
 80090ac:	2200      	movs	r2, #0
 80090ae:	0018      	movs	r0, r3
 80090b0:	f7ff fcd6 	bl	8008a60 <find_volume>
 80090b4:	0003      	movs	r3, r0
 80090b6:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 80090b8:	197b      	adds	r3, r7, r5
 80090ba:	781b      	ldrb	r3, [r3, #0]
}
 80090bc:	0018      	movs	r0, r3
 80090be:	46bd      	mov	sp, r7
 80090c0:	b008      	add	sp, #32
 80090c2:	bdb0      	pop	{r4, r5, r7, pc}
 80090c4:	200002f0 	.word	0x200002f0

080090c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80090c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ca:	b09b      	sub	sp, #108	; 0x6c
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	1dfb      	adds	r3, r7, #7
 80090d4:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <f_open+0x18>
 80090dc:	2309      	movs	r3, #9
 80090de:	e1f4      	b.n	80094ca <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80090e0:	1dfb      	adds	r3, r7, #7
 80090e2:	1dfa      	adds	r2, r7, #7
 80090e4:	7812      	ldrb	r2, [r2, #0]
 80090e6:	213f      	movs	r1, #63	; 0x3f
 80090e8:	400a      	ands	r2, r1
 80090ea:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80090ec:	2567      	movs	r5, #103	; 0x67
 80090ee:	197c      	adds	r4, r7, r5
 80090f0:	1dfb      	adds	r3, r7, #7
 80090f2:	781a      	ldrb	r2, [r3, #0]
 80090f4:	2314      	movs	r3, #20
 80090f6:	18f9      	adds	r1, r7, r3
 80090f8:	2308      	movs	r3, #8
 80090fa:	18fb      	adds	r3, r7, r3
 80090fc:	0018      	movs	r0, r3
 80090fe:	f7ff fcaf 	bl	8008a60 <find_volume>
 8009102:	0003      	movs	r3, r0
 8009104:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009106:	197b      	adds	r3, r7, r5
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d000      	beq.n	8009110 <f_open+0x48>
 800910e:	e1d1      	b.n	80094b4 <f_open+0x3ec>
		dj.obj.fs = fs;
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	2618      	movs	r6, #24
 8009114:	19bb      	adds	r3, r7, r6
 8009116:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	197c      	adds	r4, r7, r5
 800911c:	19bb      	adds	r3, r7, r6
 800911e:	0011      	movs	r1, r2
 8009120:	0018      	movs	r0, r3
 8009122:	f7ff fb79 	bl	8008818 <follow_path>
 8009126:	0003      	movs	r3, r0
 8009128:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800912a:	0029      	movs	r1, r5
 800912c:	197b      	adds	r3, r7, r5
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d11b      	bne.n	800916c <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009134:	19bb      	adds	r3, r7, r6
 8009136:	222f      	movs	r2, #47	; 0x2f
 8009138:	5c9b      	ldrb	r3, [r3, r2]
 800913a:	b25b      	sxtb	r3, r3
 800913c:	2b00      	cmp	r3, #0
 800913e:	da03      	bge.n	8009148 <f_open+0x80>
				res = FR_INVALID_NAME;
 8009140:	187b      	adds	r3, r7, r1
 8009142:	2206      	movs	r2, #6
 8009144:	701a      	strb	r2, [r3, #0]
 8009146:	e011      	b.n	800916c <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009148:	1dfb      	adds	r3, r7, #7
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2201      	movs	r2, #1
 800914e:	4393      	bics	r3, r2
 8009150:	1e5a      	subs	r2, r3, #1
 8009152:	4193      	sbcs	r3, r2
 8009154:	b2db      	uxtb	r3, r3
 8009156:	001a      	movs	r2, r3
 8009158:	2367      	movs	r3, #103	; 0x67
 800915a:	18fc      	adds	r4, r7, r3
 800915c:	2318      	movs	r3, #24
 800915e:	18fb      	adds	r3, r7, r3
 8009160:	0011      	movs	r1, r2
 8009162:	0018      	movs	r0, r3
 8009164:	f7fd fdba 	bl	8006cdc <chk_lock>
 8009168:	0003      	movs	r3, r0
 800916a:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800916c:	1dfb      	adds	r3, r7, #7
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	221c      	movs	r2, #28
 8009172:	4013      	ands	r3, r2
 8009174:	d100      	bne.n	8009178 <f_open+0xb0>
 8009176:	e096      	b.n	80092a6 <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 8009178:	2267      	movs	r2, #103	; 0x67
 800917a:	18bb      	adds	r3, r7, r2
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d01a      	beq.n	80091b8 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009182:	18bb      	adds	r3, r7, r2
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2b04      	cmp	r3, #4
 8009188:	d10f      	bne.n	80091aa <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800918a:	f7fd fdff 	bl	8006d8c <enq_lock>
 800918e:	1e03      	subs	r3, r0, #0
 8009190:	d007      	beq.n	80091a2 <f_open+0xda>
 8009192:	2318      	movs	r3, #24
 8009194:	18fb      	adds	r3, r7, r3
 8009196:	0018      	movs	r0, r3
 8009198:	f7ff f82a 	bl	80081f0 <dir_register>
 800919c:	0003      	movs	r3, r0
 800919e:	001a      	movs	r2, r3
 80091a0:	e000      	b.n	80091a4 <f_open+0xdc>
 80091a2:	2212      	movs	r2, #18
 80091a4:	2367      	movs	r3, #103	; 0x67
 80091a6:	18fb      	adds	r3, r7, r3
 80091a8:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80091aa:	1dfb      	adds	r3, r7, #7
 80091ac:	1dfa      	adds	r2, r7, #7
 80091ae:	7812      	ldrb	r2, [r2, #0]
 80091b0:	2108      	movs	r1, #8
 80091b2:	430a      	orrs	r2, r1
 80091b4:	701a      	strb	r2, [r3, #0]
 80091b6:	e014      	b.n	80091e2 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80091b8:	2318      	movs	r3, #24
 80091ba:	18fb      	adds	r3, r7, r3
 80091bc:	799b      	ldrb	r3, [r3, #6]
 80091be:	001a      	movs	r2, r3
 80091c0:	2311      	movs	r3, #17
 80091c2:	4013      	ands	r3, r2
 80091c4:	d004      	beq.n	80091d0 <f_open+0x108>
					res = FR_DENIED;
 80091c6:	2367      	movs	r3, #103	; 0x67
 80091c8:	18fb      	adds	r3, r7, r3
 80091ca:	2207      	movs	r2, #7
 80091cc:	701a      	strb	r2, [r3, #0]
 80091ce:	e008      	b.n	80091e2 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80091d0:	1dfb      	adds	r3, r7, #7
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2204      	movs	r2, #4
 80091d6:	4013      	ands	r3, r2
 80091d8:	d003      	beq.n	80091e2 <f_open+0x11a>
 80091da:	2367      	movs	r3, #103	; 0x67
 80091dc:	18fb      	adds	r3, r7, r3
 80091de:	2208      	movs	r2, #8
 80091e0:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80091e2:	2467      	movs	r4, #103	; 0x67
 80091e4:	193b      	adds	r3, r7, r4
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d000      	beq.n	80091ee <f_open+0x126>
 80091ec:	e07b      	b.n	80092e6 <f_open+0x21e>
 80091ee:	1dfb      	adds	r3, r7, #7
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2208      	movs	r2, #8
 80091f4:	4013      	ands	r3, r2
 80091f6:	d100      	bne.n	80091fa <f_open+0x132>
 80091f8:	e075      	b.n	80092e6 <f_open+0x21e>
				dw = GET_FATTIME();
 80091fa:	f7fd fb3f 	bl	800687c <get_fattime>
 80091fe:	0003      	movs	r3, r0
 8009200:	65bb      	str	r3, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009202:	2518      	movs	r5, #24
 8009204:	197b      	adds	r3, r7, r5
 8009206:	6a1b      	ldr	r3, [r3, #32]
 8009208:	330e      	adds	r3, #14
 800920a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800920c:	0011      	movs	r1, r2
 800920e:	0018      	movs	r0, r3
 8009210:	f7fd fcc4 	bl	8006b9c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009214:	197b      	adds	r3, r7, r5
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	3316      	adds	r3, #22
 800921a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800921c:	0011      	movs	r1, r2
 800921e:	0018      	movs	r0, r3
 8009220:	f7fd fcbc 	bl	8006b9c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009224:	197b      	adds	r3, r7, r5
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	330b      	adds	r3, #11
 800922a:	2220      	movs	r2, #32
 800922c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	197b      	adds	r3, r7, r5
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	0019      	movs	r1, r3
 8009236:	0010      	movs	r0, r2
 8009238:	f7fe fcef 	bl	8007c1a <ld_clust>
 800923c:	0003      	movs	r3, r0
 800923e:	657b      	str	r3, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009240:	6978      	ldr	r0, [r7, #20]
 8009242:	197b      	adds	r3, r7, r5
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	2200      	movs	r2, #0
 8009248:	0019      	movs	r1, r3
 800924a:	f7fe fd05 	bl	8007c58 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800924e:	197b      	adds	r3, r7, r5
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	331c      	adds	r3, #28
 8009254:	2100      	movs	r1, #0
 8009256:	0018      	movs	r0, r3
 8009258:	f7fd fca0 	bl	8006b9c <st_dword>
					fs->wflag = 1;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	2201      	movs	r2, #1
 8009260:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009264:	2b00      	cmp	r3, #0
 8009266:	d03e      	beq.n	80092e6 <f_open+0x21e>
						dw = fs->winsect;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800926e:	0026      	movs	r6, r4
 8009270:	193c      	adds	r4, r7, r4
 8009272:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009274:	197b      	adds	r3, r7, r5
 8009276:	2200      	movs	r2, #0
 8009278:	0018      	movs	r0, r3
 800927a:	f7fe f9ba 	bl	80075f2 <remove_chain>
 800927e:	0003      	movs	r3, r0
 8009280:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 8009282:	19bb      	adds	r3, r7, r6
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d12d      	bne.n	80092e6 <f_open+0x21e>
							res = move_window(fs, dw);
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	19bc      	adds	r4, r7, r6
 800928e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009290:	0011      	movs	r1, r2
 8009292:	0018      	movs	r0, r3
 8009294:	f7fd fed4 	bl	8007040 <move_window>
 8009298:	0003      	movs	r3, r0
 800929a:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092a0:	3a01      	subs	r2, #1
 80092a2:	615a      	str	r2, [r3, #20]
 80092a4:	e01f      	b.n	80092e6 <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80092a6:	2167      	movs	r1, #103	; 0x67
 80092a8:	187b      	adds	r3, r7, r1
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d11a      	bne.n	80092e6 <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80092b0:	2318      	movs	r3, #24
 80092b2:	18fb      	adds	r3, r7, r3
 80092b4:	799b      	ldrb	r3, [r3, #6]
 80092b6:	001a      	movs	r2, r3
 80092b8:	2310      	movs	r3, #16
 80092ba:	4013      	ands	r3, r2
 80092bc:	d003      	beq.n	80092c6 <f_open+0x1fe>
					res = FR_NO_FILE;
 80092be:	187b      	adds	r3, r7, r1
 80092c0:	2204      	movs	r2, #4
 80092c2:	701a      	strb	r2, [r3, #0]
 80092c4:	e00f      	b.n	80092e6 <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80092c6:	1dfb      	adds	r3, r7, #7
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	2202      	movs	r2, #2
 80092cc:	4013      	ands	r3, r2
 80092ce:	d00a      	beq.n	80092e6 <f_open+0x21e>
 80092d0:	2318      	movs	r3, #24
 80092d2:	18fb      	adds	r3, r7, r3
 80092d4:	799b      	ldrb	r3, [r3, #6]
 80092d6:	001a      	movs	r2, r3
 80092d8:	2301      	movs	r3, #1
 80092da:	4013      	ands	r3, r2
 80092dc:	d003      	beq.n	80092e6 <f_open+0x21e>
						res = FR_DENIED;
 80092de:	2367      	movs	r3, #103	; 0x67
 80092e0:	18fb      	adds	r3, r7, r3
 80092e2:	2207      	movs	r2, #7
 80092e4:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 80092e6:	2367      	movs	r3, #103	; 0x67
 80092e8:	18fb      	adds	r3, r7, r3
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d12b      	bne.n	8009348 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80092f0:	1dfb      	adds	r3, r7, #7
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2208      	movs	r2, #8
 80092f6:	4013      	ands	r3, r2
 80092f8:	d005      	beq.n	8009306 <f_open+0x23e>
				mode |= FA_MODIFIED;
 80092fa:	1dfb      	adds	r3, r7, #7
 80092fc:	1dfa      	adds	r2, r7, #7
 80092fe:	7812      	ldrb	r2, [r2, #0]
 8009300:	2140      	movs	r1, #64	; 0x40
 8009302:	430a      	orrs	r2, r1
 8009304:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800930e:	2118      	movs	r1, #24
 8009310:	187b      	adds	r3, r7, r1
 8009312:	6a1a      	ldr	r2, [r3, #32]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009318:	1dfb      	adds	r3, r7, #7
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2201      	movs	r2, #1
 800931e:	4393      	bics	r3, r2
 8009320:	1e5a      	subs	r2, r3, #1
 8009322:	4193      	sbcs	r3, r2
 8009324:	b2db      	uxtb	r3, r3
 8009326:	001a      	movs	r2, r3
 8009328:	187b      	adds	r3, r7, r1
 800932a:	0011      	movs	r1, r2
 800932c:	0018      	movs	r0, r3
 800932e:	f7fd fd4b 	bl	8006dc8 <inc_lock>
 8009332:	0002      	movs	r2, r0
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d103      	bne.n	8009348 <f_open+0x280>
 8009340:	2367      	movs	r3, #103	; 0x67
 8009342:	18fb      	adds	r3, r7, r3
 8009344:	2202      	movs	r2, #2
 8009346:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009348:	2367      	movs	r3, #103	; 0x67
 800934a:	18fb      	adds	r3, r7, r3
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d000      	beq.n	8009354 <f_open+0x28c>
 8009352:	e0af      	b.n	80094b4 <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	2418      	movs	r4, #24
 8009358:	193b      	adds	r3, r7, r4
 800935a:	6a1b      	ldr	r3, [r3, #32]
 800935c:	0019      	movs	r1, r3
 800935e:	0010      	movs	r0, r2
 8009360:	f7fe fc5b 	bl	8007c1a <ld_clust>
 8009364:	0002      	movs	r2, r0
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800936a:	193b      	adds	r3, r7, r4
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	331c      	adds	r3, #28
 8009370:	0018      	movs	r0, r3
 8009372:	f7fd fbd4 	bl	8006b1e <ld_dword>
 8009376:	0002      	movs	r2, r0
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	88da      	ldrh	r2, [r3, #6]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	1dfa      	adds	r2, r7, #7
 8009394:	7812      	ldrb	r2, [r2, #0]
 8009396:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3330      	adds	r3, #48	; 0x30
 80093ae:	2280      	movs	r2, #128	; 0x80
 80093b0:	0152      	lsls	r2, r2, #5
 80093b2:	2100      	movs	r1, #0
 80093b4:	0018      	movs	r0, r3
 80093b6:	f7fd fc3a 	bl	8006c2e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80093ba:	1dfb      	adds	r3, r7, #7
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	2220      	movs	r2, #32
 80093c0:	4013      	ands	r3, r2
 80093c2:	d100      	bne.n	80093c6 <f_open+0x2fe>
 80093c4:	e076      	b.n	80094b4 <f_open+0x3ec>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d100      	bne.n	80093d0 <f_open+0x308>
 80093ce:	e071      	b.n	80094b4 <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	68da      	ldr	r2, [r3, #12]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	895b      	ldrh	r3, [r3, #10]
 80093dc:	001a      	movs	r2, r3
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	899b      	ldrh	r3, [r3, #12]
 80093e2:	4353      	muls	r3, r2
 80093e4:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093f2:	e019      	b.n	8009428 <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093f8:	0011      	movs	r1, r2
 80093fa:	0018      	movs	r0, r3
 80093fc:	f7fd feee 	bl	80071dc <get_fat>
 8009400:	0003      	movs	r3, r0
 8009402:	663b      	str	r3, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009406:	2b01      	cmp	r3, #1
 8009408:	d803      	bhi.n	8009412 <f_open+0x34a>
 800940a:	2367      	movs	r3, #103	; 0x67
 800940c:	18fb      	adds	r3, r7, r3
 800940e:	2202      	movs	r2, #2
 8009410:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009414:	3301      	adds	r3, #1
 8009416:	d103      	bne.n	8009420 <f_open+0x358>
 8009418:	2367      	movs	r3, #103	; 0x67
 800941a:	18fb      	adds	r3, r7, r3
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009420:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009428:	2367      	movs	r3, #103	; 0x67
 800942a:	18fb      	adds	r3, r7, r3
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d103      	bne.n	800943a <f_open+0x372>
 8009432:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009436:	429a      	cmp	r2, r3
 8009438:	d8dc      	bhi.n	80093f4 <f_open+0x32c>
				}
				fp->clust = clst;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800943e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009440:	2467      	movs	r4, #103	; 0x67
 8009442:	193b      	adds	r3, r7, r4
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d134      	bne.n	80094b4 <f_open+0x3ec>
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	899b      	ldrh	r3, [r3, #12]
 800944e:	001a      	movs	r2, r3
 8009450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009452:	0011      	movs	r1, r2
 8009454:	0018      	movs	r0, r3
 8009456:	f7f6 fef9 	bl	800024c <__aeabi_uidivmod>
 800945a:	1e0b      	subs	r3, r1, #0
 800945c:	d02a      	beq.n	80094b4 <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009462:	0011      	movs	r1, r2
 8009464:	0018      	movs	r0, r3
 8009466:	f7fd fe9d 	bl	80071a4 <clust2sect>
 800946a:	0003      	movs	r3, r0
 800946c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800946e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009470:	2b00      	cmp	r3, #0
 8009472:	d103      	bne.n	800947c <f_open+0x3b4>
						res = FR_INT_ERR;
 8009474:	193b      	adds	r3, r7, r4
 8009476:	2202      	movs	r2, #2
 8009478:	701a      	strb	r2, [r3, #0]
 800947a:	e01b      	b.n	80094b4 <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	899b      	ldrh	r3, [r3, #12]
 8009480:	0019      	movs	r1, r3
 8009482:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009484:	f7f6 fe5c 	bl	8000140 <__udivsi3>
 8009488:	0003      	movs	r3, r0
 800948a:	001a      	movs	r2, r3
 800948c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800948e:	18d2      	adds	r2, r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	7858      	ldrb	r0, [r3, #1]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	3330      	adds	r3, #48	; 0x30
 800949c:	0019      	movs	r1, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6a1a      	ldr	r2, [r3, #32]
 80094a2:	2301      	movs	r3, #1
 80094a4:	f7fd faa8 	bl	80069f8 <disk_read>
 80094a8:	1e03      	subs	r3, r0, #0
 80094aa:	d003      	beq.n	80094b4 <f_open+0x3ec>
 80094ac:	2367      	movs	r3, #103	; 0x67
 80094ae:	18fb      	adds	r3, r7, r3
 80094b0:	2201      	movs	r2, #1
 80094b2:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80094b4:	2367      	movs	r3, #103	; 0x67
 80094b6:	18fb      	adds	r3, r7, r3
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d002      	beq.n	80094c4 <f_open+0x3fc>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80094c4:	2367      	movs	r3, #103	; 0x67
 80094c6:	18fb      	adds	r3, r7, r3
 80094c8:	781b      	ldrb	r3, [r3, #0]
}
 80094ca:	0018      	movs	r0, r3
 80094cc:	46bd      	mov	sp, r7
 80094ce:	b01b      	add	sp, #108	; 0x6c
 80094d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094d2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80094d2:	b5b0      	push	{r4, r5, r7, lr}
 80094d4:	b08c      	sub	sp, #48	; 0x30
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	60f8      	str	r0, [r7, #12]
 80094da:	60b9      	str	r1, [r7, #8]
 80094dc:	607a      	str	r2, [r7, #4]
 80094de:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2200      	movs	r2, #0
 80094e8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	252f      	movs	r5, #47	; 0x2f
 80094ee:	197c      	adds	r4, r7, r5
 80094f0:	2210      	movs	r2, #16
 80094f2:	18ba      	adds	r2, r7, r2
 80094f4:	0011      	movs	r1, r2
 80094f6:	0018      	movs	r0, r3
 80094f8:	f7ff fd5e 	bl	8008fb8 <validate>
 80094fc:	0003      	movs	r3, r0
 80094fe:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009500:	197b      	adds	r3, r7, r5
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d107      	bne.n	8009518 <f_write+0x46>
 8009508:	197b      	adds	r3, r7, r5
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	7d52      	ldrb	r2, [r2, #21]
 800950e:	701a      	strb	r2, [r3, #0]
 8009510:	197b      	adds	r3, r7, r5
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <f_write+0x4e>
 8009518:	232f      	movs	r3, #47	; 0x2f
 800951a:	18fb      	adds	r3, r7, r3
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	e16f      	b.n	8009800 <f_write+0x32e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	7d1b      	ldrb	r3, [r3, #20]
 8009524:	001a      	movs	r2, r3
 8009526:	2302      	movs	r3, #2
 8009528:	4013      	ands	r3, r2
 800952a:	d101      	bne.n	8009530 <f_write+0x5e>
 800952c:	2307      	movs	r3, #7
 800952e:	e167      	b.n	8009800 <f_write+0x32e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	699a      	ldr	r2, [r3, #24]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	18d2      	adds	r2, r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	429a      	cmp	r2, r3
 800953e:	d300      	bcc.n	8009542 <f_write+0x70>
 8009540:	e150      	b.n	80097e4 <f_write+0x312>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	43db      	mvns	r3, r3
 8009548:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800954a:	e14b      	b.n	80097e4 <f_write+0x312>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	699a      	ldr	r2, [r3, #24]
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	899b      	ldrh	r3, [r3, #12]
 8009554:	0019      	movs	r1, r3
 8009556:	0010      	movs	r0, r2
 8009558:	f7f6 fe78 	bl	800024c <__aeabi_uidivmod>
 800955c:	1e0b      	subs	r3, r1, #0
 800955e:	d000      	beq.n	8009562 <f_write+0x90>
 8009560:	e0f4      	b.n	800974c <f_write+0x27a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	699a      	ldr	r2, [r3, #24]
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	899b      	ldrh	r3, [r3, #12]
 800956a:	0019      	movs	r1, r3
 800956c:	0010      	movs	r0, r2
 800956e:	f7f6 fde7 	bl	8000140 <__udivsi3>
 8009572:	0003      	movs	r3, r0
 8009574:	001a      	movs	r2, r3
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	895b      	ldrh	r3, [r3, #10]
 800957a:	3b01      	subs	r3, #1
 800957c:	4013      	ands	r3, r2
 800957e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d146      	bne.n	8009614 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10d      	bne.n	80095aa <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	2b00      	cmp	r3, #0
 8009598:	d11e      	bne.n	80095d8 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2100      	movs	r1, #0
 800959e:	0018      	movs	r0, r3
 80095a0:	f7fe f89a 	bl	80076d8 <create_chain>
 80095a4:	0003      	movs	r3, r0
 80095a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80095a8:	e016      	b.n	80095d8 <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d009      	beq.n	80095c6 <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	699a      	ldr	r2, [r3, #24]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	0011      	movs	r1, r2
 80095ba:	0018      	movs	r0, r3
 80095bc:	f7fe f932 	bl	8007824 <clmt_clust>
 80095c0:	0003      	movs	r3, r0
 80095c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80095c4:	e008      	b.n	80095d8 <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	0019      	movs	r1, r3
 80095ce:	0010      	movs	r0, r2
 80095d0:	f7fe f882 	bl	80076d8 <create_chain>
 80095d4:	0003      	movs	r3, r0
 80095d6:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d100      	bne.n	80095e0 <f_write+0x10e>
 80095de:	e106      	b.n	80097ee <f_write+0x31c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d104      	bne.n	80095f0 <f_write+0x11e>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2202      	movs	r2, #2
 80095ea:	755a      	strb	r2, [r3, #21]
 80095ec:	2302      	movs	r3, #2
 80095ee:	e107      	b.n	8009800 <f_write+0x32e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	3301      	adds	r3, #1
 80095f4:	d104      	bne.n	8009600 <f_write+0x12e>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2201      	movs	r2, #1
 80095fa:	755a      	strb	r2, [r3, #21]
 80095fc:	2301      	movs	r3, #1
 80095fe:	e0ff      	b.n	8009800 <f_write+0x32e>
				fp->clust = clst;			/* Update current cluster */
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009604:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d102      	bne.n	8009614 <f_write+0x142>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009612:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	7d1b      	ldrb	r3, [r3, #20]
 8009618:	b25b      	sxtb	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	da17      	bge.n	800964e <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	7858      	ldrb	r0, [r3, #1]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3330      	adds	r3, #48	; 0x30
 8009626:	0019      	movs	r1, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6a1a      	ldr	r2, [r3, #32]
 800962c:	2301      	movs	r3, #1
 800962e:	f7fd fa0b 	bl	8006a48 <disk_write>
 8009632:	1e03      	subs	r3, r0, #0
 8009634:	d004      	beq.n	8009640 <f_write+0x16e>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2201      	movs	r2, #1
 800963a:	755a      	strb	r2, [r3, #21]
 800963c:	2301      	movs	r3, #1
 800963e:	e0df      	b.n	8009800 <f_write+0x32e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	7d1b      	ldrb	r3, [r3, #20]
 8009644:	227f      	movs	r2, #127	; 0x7f
 8009646:	4013      	ands	r3, r2
 8009648:	b2da      	uxtb	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	0019      	movs	r1, r3
 8009656:	0010      	movs	r0, r2
 8009658:	f7fd fda4 	bl	80071a4 <clust2sect>
 800965c:	0003      	movs	r3, r0
 800965e:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d104      	bne.n	8009670 <f_write+0x19e>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2202      	movs	r2, #2
 800966a:	755a      	strb	r2, [r3, #21]
 800966c:	2302      	movs	r3, #2
 800966e:	e0c7      	b.n	8009800 <f_write+0x32e>
			sect += csect;
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	18d3      	adds	r3, r2, r3
 8009676:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	899b      	ldrh	r3, [r3, #12]
 800967c:	0019      	movs	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7f6 fd5e 	bl	8000140 <__udivsi3>
 8009684:	0003      	movs	r3, r0
 8009686:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d040      	beq.n	8009710 <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	18d3      	adds	r3, r2, r3
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	8952      	ldrh	r2, [r2, #10]
 8009698:	4293      	cmp	r3, r2
 800969a:	d905      	bls.n	80096a8 <f_write+0x1d6>
					cc = fs->csize - csect;
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	895b      	ldrh	r3, [r3, #10]
 80096a0:	001a      	movs	r2, r3
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	7858      	ldrb	r0, [r3, #1]
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	69f9      	ldr	r1, [r7, #28]
 80096b2:	f7fd f9c9 	bl	8006a48 <disk_write>
 80096b6:	1e03      	subs	r3, r0, #0
 80096b8:	d004      	beq.n	80096c4 <f_write+0x1f2>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2201      	movs	r2, #1
 80096be:	755a      	strb	r2, [r3, #21]
 80096c0:	2301      	movs	r3, #1
 80096c2:	e09d      	b.n	8009800 <f_write+0x32e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6a1a      	ldr	r2, [r3, #32]
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	6a3a      	ldr	r2, [r7, #32]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d917      	bls.n	8009702 <f_write+0x230>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3330      	adds	r3, #48	; 0x30
 80096d6:	0018      	movs	r0, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6a1a      	ldr	r2, [r3, #32]
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	8992      	ldrh	r2, [r2, #12]
 80096e4:	4353      	muls	r3, r2
 80096e6:	69fa      	ldr	r2, [r7, #28]
 80096e8:	18d1      	adds	r1, r2, r3
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	899b      	ldrh	r3, [r3, #12]
 80096ee:	001a      	movs	r2, r3
 80096f0:	f7fd fa7e 	bl	8006bf0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	7d1b      	ldrb	r3, [r3, #20]
 80096f8:	227f      	movs	r2, #127	; 0x7f
 80096fa:	4013      	ands	r3, r2
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	899b      	ldrh	r3, [r3, #12]
 8009706:	001a      	movs	r2, r3
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	4353      	muls	r3, r2
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800970e:	e04b      	b.n	80097a8 <f_write+0x2d6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6a1b      	ldr	r3, [r3, #32]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	429a      	cmp	r2, r3
 8009718:	d015      	beq.n	8009746 <f_write+0x274>
				fp->fptr < fp->obj.objsize &&
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	699a      	ldr	r2, [r3, #24]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009722:	429a      	cmp	r2, r3
 8009724:	d20f      	bcs.n	8009746 <f_write+0x274>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	7858      	ldrb	r0, [r3, #1]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3330      	adds	r3, #48	; 0x30
 800972e:	0019      	movs	r1, r3
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	2301      	movs	r3, #1
 8009734:	f7fd f960 	bl	80069f8 <disk_read>
 8009738:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 800973a:	d004      	beq.n	8009746 <f_write+0x274>
					ABORT(fs, FR_DISK_ERR);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2201      	movs	r2, #1
 8009740:	755a      	strb	r2, [r3, #21]
 8009742:	2301      	movs	r3, #1
 8009744:	e05c      	b.n	8009800 <f_write+0x32e>
			}
#endif
			fp->sect = sect;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	697a      	ldr	r2, [r7, #20]
 800974a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	899b      	ldrh	r3, [r3, #12]
 8009750:	001c      	movs	r4, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	699a      	ldr	r2, [r3, #24]
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	899b      	ldrh	r3, [r3, #12]
 800975a:	0019      	movs	r1, r3
 800975c:	0010      	movs	r0, r2
 800975e:	f7f6 fd75 	bl	800024c <__aeabi_uidivmod>
 8009762:	000b      	movs	r3, r1
 8009764:	1ae3      	subs	r3, r4, r3
 8009766:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	429a      	cmp	r2, r3
 800976e:	d901      	bls.n	8009774 <f_write+0x2a2>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3330      	adds	r3, #48	; 0x30
 8009778:	001c      	movs	r4, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	699a      	ldr	r2, [r3, #24]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	899b      	ldrh	r3, [r3, #12]
 8009782:	0019      	movs	r1, r3
 8009784:	0010      	movs	r0, r2
 8009786:	f7f6 fd61 	bl	800024c <__aeabi_uidivmod>
 800978a:	000b      	movs	r3, r1
 800978c:	18e3      	adds	r3, r4, r3
 800978e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009790:	69f9      	ldr	r1, [r7, #28]
 8009792:	0018      	movs	r0, r3
 8009794:	f7fd fa2c 	bl	8006bf0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	7d1b      	ldrb	r3, [r3, #20]
 800979c:	2280      	movs	r2, #128	; 0x80
 800979e:	4252      	negs	r2, r2
 80097a0:	4313      	orrs	r3, r2
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80097a8:	69fa      	ldr	r2, [r7, #28]
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	18d3      	adds	r3, r2, r3
 80097ae:	61fb      	str	r3, [r7, #28]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	699a      	ldr	r2, [r3, #24]
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	18d2      	adds	r2, r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	619a      	str	r2, [r3, #24]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	68d9      	ldr	r1, [r3, #12]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	699a      	ldr	r2, [r3, #24]
 80097c4:	000b      	movs	r3, r1
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d200      	bcs.n	80097cc <f_write+0x2fa>
 80097ca:	0013      	movs	r3, r2
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	60d3      	str	r3, [r2, #12]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	18d2      	adds	r2, r2, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d000      	beq.n	80097ec <f_write+0x31a>
 80097ea:	e6af      	b.n	800954c <f_write+0x7a>
 80097ec:	e000      	b.n	80097f0 <f_write+0x31e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80097ee:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	7d1b      	ldrb	r3, [r3, #20]
 80097f4:	2240      	movs	r2, #64	; 0x40
 80097f6:	4313      	orrs	r3, r2
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80097fe:	2300      	movs	r3, #0
}
 8009800:	0018      	movs	r0, r3
 8009802:	46bd      	mov	sp, r7
 8009804:	b00c      	add	sp, #48	; 0x30
 8009806:	bdb0      	pop	{r4, r5, r7, pc}

08009808 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009808:	b5b0      	push	{r4, r5, r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2517      	movs	r5, #23
 8009814:	197c      	adds	r4, r7, r5
 8009816:	2208      	movs	r2, #8
 8009818:	18ba      	adds	r2, r7, r2
 800981a:	0011      	movs	r1, r2
 800981c:	0018      	movs	r0, r3
 800981e:	f7ff fbcb 	bl	8008fb8 <validate>
 8009822:	0003      	movs	r3, r0
 8009824:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009826:	197b      	adds	r3, r7, r5
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d16e      	bne.n	800990c <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	7d1b      	ldrb	r3, [r3, #20]
 8009832:	001a      	movs	r2, r3
 8009834:	2340      	movs	r3, #64	; 0x40
 8009836:	4013      	ands	r3, r2
 8009838:	d068      	beq.n	800990c <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	7d1b      	ldrb	r3, [r3, #20]
 800983e:	b25b      	sxtb	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	da14      	bge.n	800986e <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	7858      	ldrb	r0, [r3, #1]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	3330      	adds	r3, #48	; 0x30
 800984c:	0019      	movs	r1, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1a      	ldr	r2, [r3, #32]
 8009852:	2301      	movs	r3, #1
 8009854:	f7fd f8f8 	bl	8006a48 <disk_write>
 8009858:	1e03      	subs	r3, r0, #0
 800985a:	d001      	beq.n	8009860 <f_sync+0x58>
 800985c:	2301      	movs	r3, #1
 800985e:	e058      	b.n	8009912 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	7d1b      	ldrb	r3, [r3, #20]
 8009864:	227f      	movs	r2, #127	; 0x7f
 8009866:	4013      	ands	r3, r2
 8009868:	b2da      	uxtb	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800986e:	f7fd f805 	bl	800687c <get_fattime>
 8009872:	0003      	movs	r3, r0
 8009874:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	2517      	movs	r5, #23
 800987e:	197c      	adds	r4, r7, r5
 8009880:	0019      	movs	r1, r3
 8009882:	0010      	movs	r0, r2
 8009884:	f7fd fbdc 	bl	8007040 <move_window>
 8009888:	0003      	movs	r3, r0
 800988a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 800988c:	002c      	movs	r4, r5
 800988e:	193b      	adds	r3, r7, r4
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d13a      	bne.n	800990c <f_sync+0x104>
					dir = fp->dir_ptr;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	330b      	adds	r3, #11
 80098a0:	781a      	ldrb	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	330b      	adds	r3, #11
 80098a6:	2120      	movs	r1, #32
 80098a8:	430a      	orrs	r2, r1
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6818      	ldr	r0, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	0019      	movs	r1, r3
 80098ba:	f7fe f9cd 	bl	8007c58 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	331c      	adds	r3, #28
 80098c2:	001a      	movs	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	0019      	movs	r1, r3
 80098ca:	0010      	movs	r0, r2
 80098cc:	f7fd f966 	bl	8006b9c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	3316      	adds	r3, #22
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	0011      	movs	r1, r2
 80098d8:	0018      	movs	r0, r3
 80098da:	f7fd f95f 	bl	8006b9c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	3312      	adds	r3, #18
 80098e2:	2100      	movs	r1, #0
 80098e4:	0018      	movs	r0, r3
 80098e6:	f7fd f93b 	bl	8006b60 <st_word>
					fs->wflag = 1;
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	2201      	movs	r2, #1
 80098ee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	193c      	adds	r4, r7, r4
 80098f4:	0018      	movs	r0, r3
 80098f6:	f7fd fbd9 	bl	80070ac <sync_fs>
 80098fa:	0003      	movs	r3, r0
 80098fc:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	7d1b      	ldrb	r3, [r3, #20]
 8009902:	2240      	movs	r2, #64	; 0x40
 8009904:	4393      	bics	r3, r2
 8009906:	b2da      	uxtb	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800990c:	2317      	movs	r3, #23
 800990e:	18fb      	adds	r3, r7, r3
 8009910:	781b      	ldrb	r3, [r3, #0]
}
 8009912:	0018      	movs	r0, r3
 8009914:	46bd      	mov	sp, r7
 8009916:	b006      	add	sp, #24
 8009918:	bdb0      	pop	{r4, r5, r7, pc}

0800991a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800991a:	b5b0      	push	{r4, r5, r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009922:	250f      	movs	r5, #15
 8009924:	197c      	adds	r4, r7, r5
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	0018      	movs	r0, r3
 800992a:	f7ff ff6d 	bl	8009808 <f_sync>
 800992e:	0003      	movs	r3, r0
 8009930:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8009932:	197b      	adds	r3, r7, r5
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d11c      	bne.n	8009974 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	197c      	adds	r4, r7, r5
 800993e:	2208      	movs	r2, #8
 8009940:	18ba      	adds	r2, r7, r2
 8009942:	0011      	movs	r1, r2
 8009944:	0018      	movs	r0, r3
 8009946:	f7ff fb37 	bl	8008fb8 <validate>
 800994a:	0003      	movs	r3, r0
 800994c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800994e:	197b      	adds	r3, r7, r5
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10e      	bne.n	8009974 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	197c      	adds	r4, r7, r5
 800995c:	0018      	movs	r0, r3
 800995e:	f7fd fabd 	bl	8006edc <dec_lock>
 8009962:	0003      	movs	r3, r0
 8009964:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8009966:	197b      	adds	r3, r7, r5
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d102      	bne.n	8009974 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009974:	230f      	movs	r3, #15
 8009976:	18fb      	adds	r3, r7, r3
 8009978:	781b      	ldrb	r3, [r3, #0]
}
 800997a:	0018      	movs	r0, r3
 800997c:	46bd      	mov	sp, r7
 800997e:	b004      	add	sp, #16
 8009980:	bdb0      	pop	{r4, r5, r7, pc}

08009982 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b084      	sub	sp, #16
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	000a      	movs	r2, r1
 800998c:	1cfb      	adds	r3, r7, #3
 800998e:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009990:	1cfb      	adds	r3, r7, #3
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b0a      	cmp	r3, #10
 8009996:	d104      	bne.n	80099a2 <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	210d      	movs	r1, #13
 800999c:	0018      	movs	r0, r3
 800999e:	f7ff fff0 	bl	8009982 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	db26      	blt.n	80099fc <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	60fa      	str	r2, [r7, #12]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	18d3      	adds	r3, r2, r3
 80099b8:	1cfa      	adds	r2, r7, #3
 80099ba:	7812      	ldrb	r2, [r2, #0]
 80099bc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b3c      	cmp	r3, #60	; 0x3c
 80099c2:	dd12      	ble.n	80099ea <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	330c      	adds	r3, #12
 80099cc:	0019      	movs	r1, r3
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	2308      	movs	r3, #8
 80099d2:	18fb      	adds	r3, r7, r3
 80099d4:	f7ff fd7d 	bl	80094d2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d101      	bne.n	80099e4 <putc_bfd+0x62>
 80099e0:	2300      	movs	r3, #0
 80099e2:	e001      	b.n	80099e8 <putc_bfd+0x66>
 80099e4:	2301      	movs	r3, #1
 80099e6:	425b      	negs	r3, r3
 80099e8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	609a      	str	r2, [r3, #8]
 80099fa:	e000      	b.n	80099fe <putc_bfd+0x7c>
	if (i < 0) return;
 80099fc:	46c0      	nop			; (mov r8, r8)
}
 80099fe:	46bd      	mov	sp, r7
 8009a00:	b004      	add	sp, #16
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	db15      	blt.n	8009a40 <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6818      	ldr	r0, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	330c      	adds	r3, #12
 8009a1c:	0019      	movs	r1, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	001a      	movs	r2, r3
 8009a24:	230c      	movs	r3, #12
 8009a26:	18fb      	adds	r3, r7, r3
 8009a28:	f7ff fd53 	bl	80094d2 <f_write>
 8009a2c:	1e03      	subs	r3, r0, #0
 8009a2e:	d107      	bne.n	8009a40 <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d102      	bne.n	8009a40 <putc_flush+0x3c>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	e001      	b.n	8009a44 <putc_flush+0x40>
	return EOF;
 8009a40:	2301      	movs	r3, #1
 8009a42:	425b      	negs	r3, r3
}
 8009a44:	0018      	movs	r0, r3
 8009a46:	46bd      	mov	sp, r7
 8009a48:	b004      	add	sp, #16
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	683a      	ldr	r2, [r7, #0]
 8009a5a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	605a      	str	r2, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	609a      	str	r2, [r3, #8]
}
 8009a6a:	46c0      	nop			; (mov r8, r8)
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	b002      	add	sp, #8
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b096      	sub	sp, #88	; 0x58
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009a7c:	683a      	ldr	r2, [r7, #0]
 8009a7e:	230c      	movs	r3, #12
 8009a80:	18fb      	adds	r3, r7, r3
 8009a82:	0011      	movs	r1, r2
 8009a84:	0018      	movs	r0, r3
 8009a86:	f7ff ffe1 	bl	8009a4c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009a8a:	e009      	b.n	8009aa0 <f_puts+0x2e>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	607a      	str	r2, [r7, #4]
 8009a92:	781a      	ldrb	r2, [r3, #0]
 8009a94:	230c      	movs	r3, #12
 8009a96:	18fb      	adds	r3, r7, r3
 8009a98:	0011      	movs	r1, r2
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	f7ff ff71 	bl	8009982 <putc_bfd>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1f1      	bne.n	8009a8c <f_puts+0x1a>
	return putc_flush(&pb);
 8009aa8:	230c      	movs	r3, #12
 8009aaa:	18fb      	adds	r3, r7, r3
 8009aac:	0018      	movs	r0, r3
 8009aae:	f7ff ffa9 	bl	8009a04 <putc_flush>
 8009ab2:	0003      	movs	r3, r0
}
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	b016      	add	sp, #88	; 0x58
 8009aba:	bd80      	pop	{r7, pc}

08009abc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009abc:	b590      	push	{r4, r7, lr}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	1dfb      	adds	r3, r7, #7
 8009ac8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8009aca:	2417      	movs	r4, #23
 8009acc:	193b      	adds	r3, r7, r4
 8009ace:	2201      	movs	r2, #1
 8009ad0:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8009ad2:	2016      	movs	r0, #22
 8009ad4:	183b      	adds	r3, r7, r0
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8009ada:	4b21      	ldr	r3, [pc, #132]	; (8009b60 <FATFS_LinkDriverEx+0xa4>)
 8009adc:	7a5b      	ldrb	r3, [r3, #9]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d136      	bne.n	8009b52 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009ae4:	4b1e      	ldr	r3, [pc, #120]	; (8009b60 <FATFS_LinkDriverEx+0xa4>)
 8009ae6:	7a5b      	ldrb	r3, [r3, #9]
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	001a      	movs	r2, r3
 8009aec:	4b1c      	ldr	r3, [pc, #112]	; (8009b60 <FATFS_LinkDriverEx+0xa4>)
 8009aee:	2100      	movs	r1, #0
 8009af0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009af2:	4b1b      	ldr	r3, [pc, #108]	; (8009b60 <FATFS_LinkDriverEx+0xa4>)
 8009af4:	7a5b      	ldrb	r3, [r3, #9]
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	4a19      	ldr	r2, [pc, #100]	; (8009b60 <FATFS_LinkDriverEx+0xa4>)
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	18d3      	adds	r3, r2, r3
 8009afe:	3304      	adds	r3, #4
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8009b04:	4b16      	ldr	r3, [pc, #88]	; (8009b60 <FATFS_LinkDriverEx+0xa4>)
 8009b06:	7a5b      	ldrb	r3, [r3, #9]
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	001a      	movs	r2, r3
 8009b0c:	4b14      	ldr	r3, [pc, #80]	; (8009b60 <FATFS_LinkDriverEx+0xa4>)
 8009b0e:	189b      	adds	r3, r3, r2
 8009b10:	1dfa      	adds	r2, r7, #7
 8009b12:	7812      	ldrb	r2, [r2, #0]
 8009b14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009b16:	4b12      	ldr	r3, [pc, #72]	; (8009b60 <FATFS_LinkDriverEx+0xa4>)
 8009b18:	7a5b      	ldrb	r3, [r3, #9]
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	b2d1      	uxtb	r1, r2
 8009b20:	4a0f      	ldr	r2, [pc, #60]	; (8009b60 <FATFS_LinkDriverEx+0xa4>)
 8009b22:	7251      	strb	r1, [r2, #9]
 8009b24:	183a      	adds	r2, r7, r0
 8009b26:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8009b28:	183b      	adds	r3, r7, r0
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	3330      	adds	r3, #48	; 0x30
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	3301      	adds	r3, #1
 8009b38:	223a      	movs	r2, #58	; 0x3a
 8009b3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	3302      	adds	r3, #2
 8009b40:	222f      	movs	r2, #47	; 0x2f
 8009b42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	3303      	adds	r3, #3
 8009b48:	2200      	movs	r2, #0
 8009b4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b4c:	193b      	adds	r3, r7, r4
 8009b4e:	2200      	movs	r2, #0
 8009b50:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009b52:	2317      	movs	r3, #23
 8009b54:	18fb      	adds	r3, r7, r3
 8009b56:	781b      	ldrb	r3, [r3, #0]
}
 8009b58:	0018      	movs	r0, r3
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	b007      	add	sp, #28
 8009b5e:	bd90      	pop	{r4, r7, pc}
 8009b60:	20000518 	.word	0x20000518

08009b64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	0018      	movs	r0, r3
 8009b76:	f7ff ffa1 	bl	8009abc <FATFS_LinkDriverEx>
 8009b7a:	0003      	movs	r3, r0
}
 8009b7c:	0018      	movs	r0, r3
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	b002      	add	sp, #8
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	0002      	movs	r2, r0
 8009b8c:	6039      	str	r1, [r7, #0]
 8009b8e:	1dbb      	adds	r3, r7, #6
 8009b90:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009b92:	1dbb      	adds	r3, r7, #6
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	2b7f      	cmp	r3, #127	; 0x7f
 8009b98:	d805      	bhi.n	8009ba6 <ff_convert+0x22>
		c = chr;
 8009b9a:	230e      	movs	r3, #14
 8009b9c:	18fb      	adds	r3, r7, r3
 8009b9e:	1dba      	adds	r2, r7, #6
 8009ba0:	8812      	ldrh	r2, [r2, #0]
 8009ba2:	801a      	strh	r2, [r3, #0]
 8009ba4:	e037      	b.n	8009c16 <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d010      	beq.n	8009bce <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009bac:	1dbb      	adds	r3, r7, #6
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	2bff      	cmp	r3, #255	; 0xff
 8009bb2:	d807      	bhi.n	8009bc4 <ff_convert+0x40>
 8009bb4:	1dbb      	adds	r3, r7, #6
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	3b80      	subs	r3, #128	; 0x80
 8009bba:	001a      	movs	r2, r3
 8009bbc:	4b19      	ldr	r3, [pc, #100]	; (8009c24 <ff_convert+0xa0>)
 8009bbe:	0052      	lsls	r2, r2, #1
 8009bc0:	5ad2      	ldrh	r2, [r2, r3]
 8009bc2:	e000      	b.n	8009bc6 <ff_convert+0x42>
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	230e      	movs	r3, #14
 8009bc8:	18fb      	adds	r3, r7, r3
 8009bca:	801a      	strh	r2, [r3, #0]
 8009bcc:	e023      	b.n	8009c16 <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009bce:	230e      	movs	r3, #14
 8009bd0:	18fb      	adds	r3, r7, r3
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	801a      	strh	r2, [r3, #0]
 8009bd6:	e00e      	b.n	8009bf6 <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 8009bd8:	210e      	movs	r1, #14
 8009bda:	187b      	adds	r3, r7, r1
 8009bdc:	881a      	ldrh	r2, [r3, #0]
 8009bde:	4b11      	ldr	r3, [pc, #68]	; (8009c24 <ff_convert+0xa0>)
 8009be0:	0052      	lsls	r2, r2, #1
 8009be2:	5ad3      	ldrh	r3, [r2, r3]
 8009be4:	1dba      	adds	r2, r7, #6
 8009be6:	8812      	ldrh	r2, [r2, #0]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d00a      	beq.n	8009c02 <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 8009bec:	187b      	adds	r3, r7, r1
 8009bee:	881a      	ldrh	r2, [r3, #0]
 8009bf0:	187b      	adds	r3, r7, r1
 8009bf2:	3201      	adds	r2, #1
 8009bf4:	801a      	strh	r2, [r3, #0]
 8009bf6:	230e      	movs	r3, #14
 8009bf8:	18fb      	adds	r3, r7, r3
 8009bfa:	881b      	ldrh	r3, [r3, #0]
 8009bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8009bfe:	d9eb      	bls.n	8009bd8 <ff_convert+0x54>
 8009c00:	e000      	b.n	8009c04 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 8009c02:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 8009c04:	210e      	movs	r1, #14
 8009c06:	187b      	adds	r3, r7, r1
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	3380      	adds	r3, #128	; 0x80
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	187b      	adds	r3, r7, r1
 8009c10:	21ff      	movs	r1, #255	; 0xff
 8009c12:	400a      	ands	r2, r1
 8009c14:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 8009c16:	230e      	movs	r3, #14
 8009c18:	18fb      	adds	r3, r7, r3
 8009c1a:	881b      	ldrh	r3, [r3, #0]
}
 8009c1c:	0018      	movs	r0, r3
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	b004      	add	sp, #16
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	0800e954 	.word	0x0800e954

08009c28 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009c28:	b5b0      	push	{r4, r5, r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	0002      	movs	r2, r0
 8009c30:	1dbb      	adds	r3, r7, #6
 8009c32:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009c34:	1dbb      	adds	r3, r7, #6
 8009c36:	881a      	ldrh	r2, [r3, #0]
 8009c38:	2380      	movs	r3, #128	; 0x80
 8009c3a:	015b      	lsls	r3, r3, #5
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d201      	bcs.n	8009c44 <ff_wtoupper+0x1c>
 8009c40:	4b4d      	ldr	r3, [pc, #308]	; (8009d78 <ff_wtoupper+0x150>)
 8009c42:	e000      	b.n	8009c46 <ff_wtoupper+0x1e>
 8009c44:	4b4d      	ldr	r3, [pc, #308]	; (8009d7c <ff_wtoupper+0x154>)
 8009c46:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	1c9a      	adds	r2, r3, #2
 8009c4c:	617a      	str	r2, [r7, #20]
 8009c4e:	2412      	movs	r4, #18
 8009c50:	193a      	adds	r2, r7, r4
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 8009c56:	193b      	adds	r3, r7, r4
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d100      	bne.n	8009c60 <ff_wtoupper+0x38>
 8009c5e:	e084      	b.n	8009d6a <ff_wtoupper+0x142>
 8009c60:	1dba      	adds	r2, r7, #6
 8009c62:	193b      	adds	r3, r7, r4
 8009c64:	8812      	ldrh	r2, [r2, #0]
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d200      	bcs.n	8009c6e <ff_wtoupper+0x46>
 8009c6c:	e07d      	b.n	8009d6a <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	1c9a      	adds	r2, r3, #2
 8009c72:	617a      	str	r2, [r7, #20]
 8009c74:	2010      	movs	r0, #16
 8009c76:	183a      	adds	r2, r7, r0
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	8013      	strh	r3, [r2, #0]
 8009c7c:	250e      	movs	r5, #14
 8009c7e:	197b      	adds	r3, r7, r5
 8009c80:	183a      	adds	r2, r7, r0
 8009c82:	8812      	ldrh	r2, [r2, #0]
 8009c84:	0a12      	lsrs	r2, r2, #8
 8009c86:	801a      	strh	r2, [r3, #0]
 8009c88:	183b      	adds	r3, r7, r0
 8009c8a:	183a      	adds	r2, r7, r0
 8009c8c:	8812      	ldrh	r2, [r2, #0]
 8009c8e:	21ff      	movs	r1, #255	; 0xff
 8009c90:	400a      	ands	r2, r1
 8009c92:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 8009c94:	1dbb      	adds	r3, r7, #6
 8009c96:	881a      	ldrh	r2, [r3, #0]
 8009c98:	193b      	adds	r3, r7, r4
 8009c9a:	8819      	ldrh	r1, [r3, #0]
 8009c9c:	183b      	adds	r3, r7, r0
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	18cb      	adds	r3, r1, r3
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	da52      	bge.n	8009d4c <ff_wtoupper+0x124>
			switch (cmd) {
 8009ca6:	197b      	adds	r3, r7, r5
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	2b08      	cmp	r3, #8
 8009cac:	d85c      	bhi.n	8009d68 <ff_wtoupper+0x140>
 8009cae:	009a      	lsls	r2, r3, #2
 8009cb0:	4b33      	ldr	r3, [pc, #204]	; (8009d80 <ff_wtoupper+0x158>)
 8009cb2:	18d3      	adds	r3, r2, r3
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009cb8:	1dbb      	adds	r3, r7, #6
 8009cba:	881a      	ldrh	r2, [r3, #0]
 8009cbc:	2312      	movs	r3, #18
 8009cbe:	18fb      	adds	r3, r7, r3
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	18d2      	adds	r2, r2, r3
 8009cca:	1dbb      	adds	r3, r7, #6
 8009ccc:	8812      	ldrh	r2, [r2, #0]
 8009cce:	801a      	strh	r2, [r3, #0]
 8009cd0:	e03b      	b.n	8009d4a <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009cd2:	1dba      	adds	r2, r7, #6
 8009cd4:	2312      	movs	r3, #18
 8009cd6:	18fb      	adds	r3, r7, r3
 8009cd8:	8812      	ldrh	r2, [r2, #0]
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	1dbb      	adds	r3, r7, #6
 8009ce8:	1db9      	adds	r1, r7, #6
 8009cea:	8809      	ldrh	r1, [r1, #0]
 8009cec:	1a8a      	subs	r2, r1, r2
 8009cee:	801a      	strh	r2, [r3, #0]
 8009cf0:	e02b      	b.n	8009d4a <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009cf2:	1dbb      	adds	r3, r7, #6
 8009cf4:	1dba      	adds	r2, r7, #6
 8009cf6:	8812      	ldrh	r2, [r2, #0]
 8009cf8:	3a10      	subs	r2, #16
 8009cfa:	801a      	strh	r2, [r3, #0]
 8009cfc:	e025      	b.n	8009d4a <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009cfe:	1dbb      	adds	r3, r7, #6
 8009d00:	1dba      	adds	r2, r7, #6
 8009d02:	8812      	ldrh	r2, [r2, #0]
 8009d04:	3a20      	subs	r2, #32
 8009d06:	801a      	strh	r2, [r3, #0]
 8009d08:	e01f      	b.n	8009d4a <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009d0a:	1dbb      	adds	r3, r7, #6
 8009d0c:	1dba      	adds	r2, r7, #6
 8009d0e:	8812      	ldrh	r2, [r2, #0]
 8009d10:	3a30      	subs	r2, #48	; 0x30
 8009d12:	801a      	strh	r2, [r3, #0]
 8009d14:	e019      	b.n	8009d4a <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009d16:	1dbb      	adds	r3, r7, #6
 8009d18:	1dba      	adds	r2, r7, #6
 8009d1a:	8812      	ldrh	r2, [r2, #0]
 8009d1c:	3a1a      	subs	r2, #26
 8009d1e:	801a      	strh	r2, [r3, #0]
 8009d20:	e013      	b.n	8009d4a <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009d22:	1dbb      	adds	r3, r7, #6
 8009d24:	1dba      	adds	r2, r7, #6
 8009d26:	8812      	ldrh	r2, [r2, #0]
 8009d28:	3208      	adds	r2, #8
 8009d2a:	801a      	strh	r2, [r3, #0]
 8009d2c:	e00d      	b.n	8009d4a <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009d2e:	1dbb      	adds	r3, r7, #6
 8009d30:	1dba      	adds	r2, r7, #6
 8009d32:	8812      	ldrh	r2, [r2, #0]
 8009d34:	3a50      	subs	r2, #80	; 0x50
 8009d36:	801a      	strh	r2, [r3, #0]
 8009d38:	e007      	b.n	8009d4a <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009d3a:	1dbb      	adds	r3, r7, #6
 8009d3c:	1dba      	adds	r2, r7, #6
 8009d3e:	8812      	ldrh	r2, [r2, #0]
 8009d40:	4910      	ldr	r1, [pc, #64]	; (8009d84 <ff_wtoupper+0x15c>)
 8009d42:	468c      	mov	ip, r1
 8009d44:	4462      	add	r2, ip
 8009d46:	801a      	strh	r2, [r3, #0]
 8009d48:	46c0      	nop			; (mov r8, r8)
			}
			break;
 8009d4a:	e00d      	b.n	8009d68 <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 8009d4c:	230e      	movs	r3, #14
 8009d4e:	18fb      	adds	r3, r7, r3
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d000      	beq.n	8009d58 <ff_wtoupper+0x130>
 8009d56:	e777      	b.n	8009c48 <ff_wtoupper+0x20>
 8009d58:	2310      	movs	r3, #16
 8009d5a:	18fb      	adds	r3, r7, r3
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	005b      	lsls	r3, r3, #1
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	18d3      	adds	r3, r2, r3
 8009d64:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009d66:	e76f      	b.n	8009c48 <ff_wtoupper+0x20>
			break;
 8009d68:	46c0      	nop			; (mov r8, r8)
	}

	return chr;
 8009d6a:	1dbb      	adds	r3, r7, #6
 8009d6c:	881b      	ldrh	r3, [r3, #0]
}
 8009d6e:	0018      	movs	r0, r3
 8009d70:	46bd      	mov	sp, r7
 8009d72:	b006      	add	sp, #24
 8009d74:	bdb0      	pop	{r4, r5, r7, pc}
 8009d76:	46c0      	nop			; (mov r8, r8)
 8009d78:	0800ea78 	.word	0x0800ea78
 8009d7c:	0800ec6c 	.word	0x0800ec6c
 8009d80:	0800ea54 	.word	0x0800ea54
 8009d84:	ffffe3a0 	.word	0xffffe3a0

08009d88 <__cvt>:
 8009d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d8a:	001e      	movs	r6, r3
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	0014      	movs	r4, r2
 8009d90:	b08b      	sub	sp, #44	; 0x2c
 8009d92:	429e      	cmp	r6, r3
 8009d94:	da04      	bge.n	8009da0 <__cvt+0x18>
 8009d96:	2180      	movs	r1, #128	; 0x80
 8009d98:	0609      	lsls	r1, r1, #24
 8009d9a:	1873      	adds	r3, r6, r1
 8009d9c:	001e      	movs	r6, r3
 8009d9e:	232d      	movs	r3, #45	; 0x2d
 8009da0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009da2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009da4:	7013      	strb	r3, [r2, #0]
 8009da6:	2320      	movs	r3, #32
 8009da8:	2203      	movs	r2, #3
 8009daa:	439f      	bics	r7, r3
 8009dac:	2f46      	cmp	r7, #70	; 0x46
 8009dae:	d007      	beq.n	8009dc0 <__cvt+0x38>
 8009db0:	003b      	movs	r3, r7
 8009db2:	3b45      	subs	r3, #69	; 0x45
 8009db4:	4259      	negs	r1, r3
 8009db6:	414b      	adcs	r3, r1
 8009db8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009dba:	3a01      	subs	r2, #1
 8009dbc:	18cb      	adds	r3, r1, r3
 8009dbe:	9310      	str	r3, [sp, #64]	; 0x40
 8009dc0:	ab09      	add	r3, sp, #36	; 0x24
 8009dc2:	9304      	str	r3, [sp, #16]
 8009dc4:	ab08      	add	r3, sp, #32
 8009dc6:	9303      	str	r3, [sp, #12]
 8009dc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dca:	9200      	str	r2, [sp, #0]
 8009dcc:	9302      	str	r3, [sp, #8]
 8009dce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009dd0:	0022      	movs	r2, r4
 8009dd2:	9301      	str	r3, [sp, #4]
 8009dd4:	0033      	movs	r3, r6
 8009dd6:	f001 f8e7 	bl	800afa8 <_dtoa_r>
 8009dda:	0005      	movs	r5, r0
 8009ddc:	2f47      	cmp	r7, #71	; 0x47
 8009dde:	d102      	bne.n	8009de6 <__cvt+0x5e>
 8009de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009de2:	07db      	lsls	r3, r3, #31
 8009de4:	d528      	bpl.n	8009e38 <__cvt+0xb0>
 8009de6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009de8:	18eb      	adds	r3, r5, r3
 8009dea:	9307      	str	r3, [sp, #28]
 8009dec:	2f46      	cmp	r7, #70	; 0x46
 8009dee:	d114      	bne.n	8009e1a <__cvt+0x92>
 8009df0:	782b      	ldrb	r3, [r5, #0]
 8009df2:	2b30      	cmp	r3, #48	; 0x30
 8009df4:	d10c      	bne.n	8009e10 <__cvt+0x88>
 8009df6:	2200      	movs	r2, #0
 8009df8:	2300      	movs	r3, #0
 8009dfa:	0020      	movs	r0, r4
 8009dfc:	0031      	movs	r1, r6
 8009dfe:	f7f6 fb25 	bl	800044c <__aeabi_dcmpeq>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	d104      	bne.n	8009e10 <__cvt+0x88>
 8009e06:	2301      	movs	r3, #1
 8009e08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e0a:	1a9b      	subs	r3, r3, r2
 8009e0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e12:	9a07      	ldr	r2, [sp, #28]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	18d3      	adds	r3, r2, r3
 8009e18:	9307      	str	r3, [sp, #28]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	0020      	movs	r0, r4
 8009e20:	0031      	movs	r1, r6
 8009e22:	f7f6 fb13 	bl	800044c <__aeabi_dcmpeq>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d001      	beq.n	8009e2e <__cvt+0xa6>
 8009e2a:	9b07      	ldr	r3, [sp, #28]
 8009e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e2e:	2230      	movs	r2, #48	; 0x30
 8009e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e32:	9907      	ldr	r1, [sp, #28]
 8009e34:	428b      	cmp	r3, r1
 8009e36:	d306      	bcc.n	8009e46 <__cvt+0xbe>
 8009e38:	0028      	movs	r0, r5
 8009e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e3e:	1b5b      	subs	r3, r3, r5
 8009e40:	6013      	str	r3, [r2, #0]
 8009e42:	b00b      	add	sp, #44	; 0x2c
 8009e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e46:	1c59      	adds	r1, r3, #1
 8009e48:	9109      	str	r1, [sp, #36]	; 0x24
 8009e4a:	701a      	strb	r2, [r3, #0]
 8009e4c:	e7f0      	b.n	8009e30 <__cvt+0xa8>

08009e4e <__exponent>:
 8009e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e50:	1c83      	adds	r3, r0, #2
 8009e52:	b087      	sub	sp, #28
 8009e54:	9303      	str	r3, [sp, #12]
 8009e56:	0005      	movs	r5, r0
 8009e58:	000c      	movs	r4, r1
 8009e5a:	232b      	movs	r3, #43	; 0x2b
 8009e5c:	7002      	strb	r2, [r0, #0]
 8009e5e:	2900      	cmp	r1, #0
 8009e60:	da01      	bge.n	8009e66 <__exponent+0x18>
 8009e62:	424c      	negs	r4, r1
 8009e64:	3302      	adds	r3, #2
 8009e66:	706b      	strb	r3, [r5, #1]
 8009e68:	2c09      	cmp	r4, #9
 8009e6a:	dd2f      	ble.n	8009ecc <__exponent+0x7e>
 8009e6c:	270a      	movs	r7, #10
 8009e6e:	ab04      	add	r3, sp, #16
 8009e70:	1dde      	adds	r6, r3, #7
 8009e72:	0020      	movs	r0, r4
 8009e74:	0039      	movs	r1, r7
 8009e76:	9601      	str	r6, [sp, #4]
 8009e78:	f7f6 fad2 	bl	8000420 <__aeabi_idivmod>
 8009e7c:	3e01      	subs	r6, #1
 8009e7e:	3130      	adds	r1, #48	; 0x30
 8009e80:	0020      	movs	r0, r4
 8009e82:	7031      	strb	r1, [r6, #0]
 8009e84:	0039      	movs	r1, r7
 8009e86:	9402      	str	r4, [sp, #8]
 8009e88:	f7f6 f9e4 	bl	8000254 <__divsi3>
 8009e8c:	9b02      	ldr	r3, [sp, #8]
 8009e8e:	0004      	movs	r4, r0
 8009e90:	2b63      	cmp	r3, #99	; 0x63
 8009e92:	dcee      	bgt.n	8009e72 <__exponent+0x24>
 8009e94:	9b01      	ldr	r3, [sp, #4]
 8009e96:	3430      	adds	r4, #48	; 0x30
 8009e98:	1e9a      	subs	r2, r3, #2
 8009e9a:	0013      	movs	r3, r2
 8009e9c:	9903      	ldr	r1, [sp, #12]
 8009e9e:	7014      	strb	r4, [r2, #0]
 8009ea0:	a804      	add	r0, sp, #16
 8009ea2:	3007      	adds	r0, #7
 8009ea4:	4298      	cmp	r0, r3
 8009ea6:	d80c      	bhi.n	8009ec2 <__exponent+0x74>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4282      	cmp	r2, r0
 8009eac:	d804      	bhi.n	8009eb8 <__exponent+0x6a>
 8009eae:	aa04      	add	r2, sp, #16
 8009eb0:	3309      	adds	r3, #9
 8009eb2:	189b      	adds	r3, r3, r2
 8009eb4:	9a01      	ldr	r2, [sp, #4]
 8009eb6:	1a9b      	subs	r3, r3, r2
 8009eb8:	9a03      	ldr	r2, [sp, #12]
 8009eba:	18d3      	adds	r3, r2, r3
 8009ebc:	1b58      	subs	r0, r3, r5
 8009ebe:	b007      	add	sp, #28
 8009ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ec2:	7818      	ldrb	r0, [r3, #0]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	7008      	strb	r0, [r1, #0]
 8009ec8:	3101      	adds	r1, #1
 8009eca:	e7e9      	b.n	8009ea0 <__exponent+0x52>
 8009ecc:	2330      	movs	r3, #48	; 0x30
 8009ece:	3430      	adds	r4, #48	; 0x30
 8009ed0:	70ab      	strb	r3, [r5, #2]
 8009ed2:	70ec      	strb	r4, [r5, #3]
 8009ed4:	1d2b      	adds	r3, r5, #4
 8009ed6:	e7f1      	b.n	8009ebc <__exponent+0x6e>

08009ed8 <_printf_float>:
 8009ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eda:	b095      	sub	sp, #84	; 0x54
 8009edc:	000c      	movs	r4, r1
 8009ede:	9208      	str	r2, [sp, #32]
 8009ee0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee4:	0007      	movs	r7, r0
 8009ee6:	f000 ff41 	bl	800ad6c <_localeconv_r>
 8009eea:	6803      	ldr	r3, [r0, #0]
 8009eec:	0018      	movs	r0, r3
 8009eee:	930c      	str	r3, [sp, #48]	; 0x30
 8009ef0:	f7f6 f90a 	bl	8000108 <strlen>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	9312      	str	r3, [sp, #72]	; 0x48
 8009ef8:	7e23      	ldrb	r3, [r4, #24]
 8009efa:	2207      	movs	r2, #7
 8009efc:	930a      	str	r3, [sp, #40]	; 0x28
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	900d      	str	r0, [sp, #52]	; 0x34
 8009f02:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f06:	682b      	ldr	r3, [r5, #0]
 8009f08:	05c9      	lsls	r1, r1, #23
 8009f0a:	d547      	bpl.n	8009f9c <_printf_float+0xc4>
 8009f0c:	189b      	adds	r3, r3, r2
 8009f0e:	4393      	bics	r3, r2
 8009f10:	001a      	movs	r2, r3
 8009f12:	3208      	adds	r2, #8
 8009f14:	602a      	str	r2, [r5, #0]
 8009f16:	681e      	ldr	r6, [r3, #0]
 8009f18:	685d      	ldr	r5, [r3, #4]
 8009f1a:	0032      	movs	r2, r6
 8009f1c:	002b      	movs	r3, r5
 8009f1e:	64a2      	str	r2, [r4, #72]	; 0x48
 8009f20:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009f22:	2201      	movs	r2, #1
 8009f24:	006b      	lsls	r3, r5, #1
 8009f26:	085b      	lsrs	r3, r3, #1
 8009f28:	930e      	str	r3, [sp, #56]	; 0x38
 8009f2a:	0030      	movs	r0, r6
 8009f2c:	4bab      	ldr	r3, [pc, #684]	; (800a1dc <_printf_float+0x304>)
 8009f2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009f30:	4252      	negs	r2, r2
 8009f32:	f7f8 fce3 	bl	80028fc <__aeabi_dcmpun>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d132      	bne.n	8009fa0 <_printf_float+0xc8>
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	0030      	movs	r0, r6
 8009f3e:	4ba7      	ldr	r3, [pc, #668]	; (800a1dc <_printf_float+0x304>)
 8009f40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009f42:	4252      	negs	r2, r2
 8009f44:	f7f6 fa92 	bl	800046c <__aeabi_dcmple>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d129      	bne.n	8009fa0 <_printf_float+0xc8>
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2300      	movs	r3, #0
 8009f50:	0030      	movs	r0, r6
 8009f52:	0029      	movs	r1, r5
 8009f54:	f7f6 fa80 	bl	8000458 <__aeabi_dcmplt>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d003      	beq.n	8009f64 <_printf_float+0x8c>
 8009f5c:	0023      	movs	r3, r4
 8009f5e:	222d      	movs	r2, #45	; 0x2d
 8009f60:	3343      	adds	r3, #67	; 0x43
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f66:	4d9e      	ldr	r5, [pc, #632]	; (800a1e0 <_printf_float+0x308>)
 8009f68:	2b47      	cmp	r3, #71	; 0x47
 8009f6a:	d900      	bls.n	8009f6e <_printf_float+0x96>
 8009f6c:	4d9d      	ldr	r5, [pc, #628]	; (800a1e4 <_printf_float+0x30c>)
 8009f6e:	2303      	movs	r3, #3
 8009f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f72:	6123      	str	r3, [r4, #16]
 8009f74:	3301      	adds	r3, #1
 8009f76:	439a      	bics	r2, r3
 8009f78:	2300      	movs	r3, #0
 8009f7a:	6022      	str	r2, [r4, #0]
 8009f7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f80:	0021      	movs	r1, r4
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	0038      	movs	r0, r7
 8009f86:	9b08      	ldr	r3, [sp, #32]
 8009f88:	aa13      	add	r2, sp, #76	; 0x4c
 8009f8a:	f000 f9fb 	bl	800a384 <_printf_common>
 8009f8e:	3001      	adds	r0, #1
 8009f90:	d000      	beq.n	8009f94 <_printf_float+0xbc>
 8009f92:	e0a3      	b.n	800a0dc <_printf_float+0x204>
 8009f94:	2001      	movs	r0, #1
 8009f96:	4240      	negs	r0, r0
 8009f98:	b015      	add	sp, #84	; 0x54
 8009f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f9c:	3307      	adds	r3, #7
 8009f9e:	e7b6      	b.n	8009f0e <_printf_float+0x36>
 8009fa0:	0032      	movs	r2, r6
 8009fa2:	002b      	movs	r3, r5
 8009fa4:	0030      	movs	r0, r6
 8009fa6:	0029      	movs	r1, r5
 8009fa8:	f7f8 fca8 	bl	80028fc <__aeabi_dcmpun>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d00b      	beq.n	8009fc8 <_printf_float+0xf0>
 8009fb0:	2d00      	cmp	r5, #0
 8009fb2:	da03      	bge.n	8009fbc <_printf_float+0xe4>
 8009fb4:	0023      	movs	r3, r4
 8009fb6:	222d      	movs	r2, #45	; 0x2d
 8009fb8:	3343      	adds	r3, #67	; 0x43
 8009fba:	701a      	strb	r2, [r3, #0]
 8009fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fbe:	4d8a      	ldr	r5, [pc, #552]	; (800a1e8 <_printf_float+0x310>)
 8009fc0:	2b47      	cmp	r3, #71	; 0x47
 8009fc2:	d9d4      	bls.n	8009f6e <_printf_float+0x96>
 8009fc4:	4d89      	ldr	r5, [pc, #548]	; (800a1ec <_printf_float+0x314>)
 8009fc6:	e7d2      	b.n	8009f6e <_printf_float+0x96>
 8009fc8:	2220      	movs	r2, #32
 8009fca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009fcc:	6863      	ldr	r3, [r4, #4]
 8009fce:	4391      	bics	r1, r2
 8009fd0:	910e      	str	r1, [sp, #56]	; 0x38
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	d14a      	bne.n	800a06c <_printf_float+0x194>
 8009fd6:	3307      	adds	r3, #7
 8009fd8:	6063      	str	r3, [r4, #4]
 8009fda:	2380      	movs	r3, #128	; 0x80
 8009fdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fde:	00db      	lsls	r3, r3, #3
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	9206      	str	r2, [sp, #24]
 8009fe6:	aa12      	add	r2, sp, #72	; 0x48
 8009fe8:	9205      	str	r2, [sp, #20]
 8009fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	9204      	str	r2, [sp, #16]
 8009ff0:	aa11      	add	r2, sp, #68	; 0x44
 8009ff2:	9203      	str	r2, [sp, #12]
 8009ff4:	2223      	movs	r2, #35	; 0x23
 8009ff6:	a908      	add	r1, sp, #32
 8009ff8:	9301      	str	r3, [sp, #4]
 8009ffa:	6863      	ldr	r3, [r4, #4]
 8009ffc:	1852      	adds	r2, r2, r1
 8009ffe:	9202      	str	r2, [sp, #8]
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	0032      	movs	r2, r6
 800a004:	002b      	movs	r3, r5
 800a006:	0038      	movs	r0, r7
 800a008:	f7ff febe 	bl	8009d88 <__cvt>
 800a00c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a00e:	0005      	movs	r5, r0
 800a010:	2b47      	cmp	r3, #71	; 0x47
 800a012:	d109      	bne.n	800a028 <_printf_float+0x150>
 800a014:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a016:	1cda      	adds	r2, r3, #3
 800a018:	db02      	blt.n	800a020 <_printf_float+0x148>
 800a01a:	6862      	ldr	r2, [r4, #4]
 800a01c:	4293      	cmp	r3, r2
 800a01e:	dd49      	ble.n	800a0b4 <_printf_float+0x1dc>
 800a020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a022:	3b02      	subs	r3, #2
 800a024:	b2db      	uxtb	r3, r3
 800a026:	930a      	str	r3, [sp, #40]	; 0x28
 800a028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a02a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a02c:	2b65      	cmp	r3, #101	; 0x65
 800a02e:	d824      	bhi.n	800a07a <_printf_float+0x1a2>
 800a030:	0020      	movs	r0, r4
 800a032:	001a      	movs	r2, r3
 800a034:	3901      	subs	r1, #1
 800a036:	3050      	adds	r0, #80	; 0x50
 800a038:	9111      	str	r1, [sp, #68]	; 0x44
 800a03a:	f7ff ff08 	bl	8009e4e <__exponent>
 800a03e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a040:	900b      	str	r0, [sp, #44]	; 0x2c
 800a042:	1813      	adds	r3, r2, r0
 800a044:	6123      	str	r3, [r4, #16]
 800a046:	2a01      	cmp	r2, #1
 800a048:	dc02      	bgt.n	800a050 <_printf_float+0x178>
 800a04a:	6822      	ldr	r2, [r4, #0]
 800a04c:	07d2      	lsls	r2, r2, #31
 800a04e:	d501      	bpl.n	800a054 <_printf_float+0x17c>
 800a050:	3301      	adds	r3, #1
 800a052:	6123      	str	r3, [r4, #16]
 800a054:	2323      	movs	r3, #35	; 0x23
 800a056:	aa08      	add	r2, sp, #32
 800a058:	189b      	adds	r3, r3, r2
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d100      	bne.n	800a062 <_printf_float+0x18a>
 800a060:	e78d      	b.n	8009f7e <_printf_float+0xa6>
 800a062:	0023      	movs	r3, r4
 800a064:	222d      	movs	r2, #45	; 0x2d
 800a066:	3343      	adds	r3, #67	; 0x43
 800a068:	701a      	strb	r2, [r3, #0]
 800a06a:	e788      	b.n	8009f7e <_printf_float+0xa6>
 800a06c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a06e:	2a47      	cmp	r2, #71	; 0x47
 800a070:	d1b3      	bne.n	8009fda <_printf_float+0x102>
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1b1      	bne.n	8009fda <_printf_float+0x102>
 800a076:	3301      	adds	r3, #1
 800a078:	e7ae      	b.n	8009fd8 <_printf_float+0x100>
 800a07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a07c:	2b66      	cmp	r3, #102	; 0x66
 800a07e:	d11b      	bne.n	800a0b8 <_printf_float+0x1e0>
 800a080:	6863      	ldr	r3, [r4, #4]
 800a082:	2900      	cmp	r1, #0
 800a084:	dd09      	ble.n	800a09a <_printf_float+0x1c2>
 800a086:	6121      	str	r1, [r4, #16]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d102      	bne.n	800a092 <_printf_float+0x1ba>
 800a08c:	6822      	ldr	r2, [r4, #0]
 800a08e:	07d2      	lsls	r2, r2, #31
 800a090:	d50b      	bpl.n	800a0aa <_printf_float+0x1d2>
 800a092:	3301      	adds	r3, #1
 800a094:	185b      	adds	r3, r3, r1
 800a096:	6123      	str	r3, [r4, #16]
 800a098:	e007      	b.n	800a0aa <_printf_float+0x1d2>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d103      	bne.n	800a0a6 <_printf_float+0x1ce>
 800a09e:	2201      	movs	r2, #1
 800a0a0:	6821      	ldr	r1, [r4, #0]
 800a0a2:	4211      	tst	r1, r2
 800a0a4:	d000      	beq.n	800a0a8 <_printf_float+0x1d0>
 800a0a6:	1c9a      	adds	r2, r3, #2
 800a0a8:	6122      	str	r2, [r4, #16]
 800a0aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0ac:	65a3      	str	r3, [r4, #88]	; 0x58
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0b2:	e7cf      	b.n	800a054 <_printf_float+0x17c>
 800a0b4:	2367      	movs	r3, #103	; 0x67
 800a0b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a0b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a0ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0bc:	4299      	cmp	r1, r3
 800a0be:	db06      	blt.n	800a0ce <_printf_float+0x1f6>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	6121      	str	r1, [r4, #16]
 800a0c4:	07db      	lsls	r3, r3, #31
 800a0c6:	d5f0      	bpl.n	800a0aa <_printf_float+0x1d2>
 800a0c8:	3101      	adds	r1, #1
 800a0ca:	6121      	str	r1, [r4, #16]
 800a0cc:	e7ed      	b.n	800a0aa <_printf_float+0x1d2>
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	2900      	cmp	r1, #0
 800a0d2:	dc01      	bgt.n	800a0d8 <_printf_float+0x200>
 800a0d4:	1892      	adds	r2, r2, r2
 800a0d6:	1a52      	subs	r2, r2, r1
 800a0d8:	189b      	adds	r3, r3, r2
 800a0da:	e7dc      	b.n	800a096 <_printf_float+0x1be>
 800a0dc:	6822      	ldr	r2, [r4, #0]
 800a0de:	0553      	lsls	r3, r2, #21
 800a0e0:	d408      	bmi.n	800a0f4 <_printf_float+0x21c>
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	002a      	movs	r2, r5
 800a0e6:	0038      	movs	r0, r7
 800a0e8:	9908      	ldr	r1, [sp, #32]
 800a0ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a0ec:	47a8      	blx	r5
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	d12a      	bne.n	800a148 <_printf_float+0x270>
 800a0f2:	e74f      	b.n	8009f94 <_printf_float+0xbc>
 800a0f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f6:	2b65      	cmp	r3, #101	; 0x65
 800a0f8:	d800      	bhi.n	800a0fc <_printf_float+0x224>
 800a0fa:	e0ec      	b.n	800a2d6 <_printf_float+0x3fe>
 800a0fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a0fe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a100:	2200      	movs	r2, #0
 800a102:	2300      	movs	r3, #0
 800a104:	f7f6 f9a2 	bl	800044c <__aeabi_dcmpeq>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d034      	beq.n	800a176 <_printf_float+0x29e>
 800a10c:	2301      	movs	r3, #1
 800a10e:	0038      	movs	r0, r7
 800a110:	4a37      	ldr	r2, [pc, #220]	; (800a1f0 <_printf_float+0x318>)
 800a112:	9908      	ldr	r1, [sp, #32]
 800a114:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a116:	47a8      	blx	r5
 800a118:	3001      	adds	r0, #1
 800a11a:	d100      	bne.n	800a11e <_printf_float+0x246>
 800a11c:	e73a      	b.n	8009f94 <_printf_float+0xbc>
 800a11e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a120:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a122:	429a      	cmp	r2, r3
 800a124:	db02      	blt.n	800a12c <_printf_float+0x254>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	07db      	lsls	r3, r3, #31
 800a12a:	d50d      	bpl.n	800a148 <_printf_float+0x270>
 800a12c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a12e:	0038      	movs	r0, r7
 800a130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a132:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a134:	9908      	ldr	r1, [sp, #32]
 800a136:	47a8      	blx	r5
 800a138:	2500      	movs	r5, #0
 800a13a:	3001      	adds	r0, #1
 800a13c:	d100      	bne.n	800a140 <_printf_float+0x268>
 800a13e:	e729      	b.n	8009f94 <_printf_float+0xbc>
 800a140:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a142:	3b01      	subs	r3, #1
 800a144:	42ab      	cmp	r3, r5
 800a146:	dc0a      	bgt.n	800a15e <_printf_float+0x286>
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	079b      	lsls	r3, r3, #30
 800a14c:	d500      	bpl.n	800a150 <_printf_float+0x278>
 800a14e:	e116      	b.n	800a37e <_printf_float+0x4a6>
 800a150:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a152:	68e0      	ldr	r0, [r4, #12]
 800a154:	4298      	cmp	r0, r3
 800a156:	db00      	blt.n	800a15a <_printf_float+0x282>
 800a158:	e71e      	b.n	8009f98 <_printf_float+0xc0>
 800a15a:	0018      	movs	r0, r3
 800a15c:	e71c      	b.n	8009f98 <_printf_float+0xc0>
 800a15e:	0022      	movs	r2, r4
 800a160:	2301      	movs	r3, #1
 800a162:	0038      	movs	r0, r7
 800a164:	9908      	ldr	r1, [sp, #32]
 800a166:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a168:	321a      	adds	r2, #26
 800a16a:	47b0      	blx	r6
 800a16c:	3001      	adds	r0, #1
 800a16e:	d100      	bne.n	800a172 <_printf_float+0x29a>
 800a170:	e710      	b.n	8009f94 <_printf_float+0xbc>
 800a172:	3501      	adds	r5, #1
 800a174:	e7e4      	b.n	800a140 <_printf_float+0x268>
 800a176:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a178:	2b00      	cmp	r3, #0
 800a17a:	dc3b      	bgt.n	800a1f4 <_printf_float+0x31c>
 800a17c:	2301      	movs	r3, #1
 800a17e:	0038      	movs	r0, r7
 800a180:	4a1b      	ldr	r2, [pc, #108]	; (800a1f0 <_printf_float+0x318>)
 800a182:	9908      	ldr	r1, [sp, #32]
 800a184:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a186:	47b0      	blx	r6
 800a188:	3001      	adds	r0, #1
 800a18a:	d100      	bne.n	800a18e <_printf_float+0x2b6>
 800a18c:	e702      	b.n	8009f94 <_printf_float+0xbc>
 800a18e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a190:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a192:	4313      	orrs	r3, r2
 800a194:	d102      	bne.n	800a19c <_printf_float+0x2c4>
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	07db      	lsls	r3, r3, #31
 800a19a:	d5d5      	bpl.n	800a148 <_printf_float+0x270>
 800a19c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a19e:	0038      	movs	r0, r7
 800a1a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1a2:	9908      	ldr	r1, [sp, #32]
 800a1a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1a6:	47b0      	blx	r6
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d100      	bne.n	800a1b0 <_printf_float+0x2d8>
 800a1ae:	e6f1      	b.n	8009f94 <_printf_float+0xbc>
 800a1b0:	930a      	str	r3, [sp, #40]	; 0x28
 800a1b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1b6:	425b      	negs	r3, r3
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	dc01      	bgt.n	800a1c0 <_printf_float+0x2e8>
 800a1bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1be:	e791      	b.n	800a0e4 <_printf_float+0x20c>
 800a1c0:	0022      	movs	r2, r4
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	0038      	movs	r0, r7
 800a1c6:	9908      	ldr	r1, [sp, #32]
 800a1c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1ca:	321a      	adds	r2, #26
 800a1cc:	47b0      	blx	r6
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d100      	bne.n	800a1d4 <_printf_float+0x2fc>
 800a1d2:	e6df      	b.n	8009f94 <_printf_float+0xbc>
 800a1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	e7ea      	b.n	800a1b0 <_printf_float+0x2d8>
 800a1da:	46c0      	nop			; (mov r8, r8)
 800a1dc:	7fefffff 	.word	0x7fefffff
 800a1e0:	0800ed28 	.word	0x0800ed28
 800a1e4:	0800ed2c 	.word	0x0800ed2c
 800a1e8:	0800ed30 	.word	0x0800ed30
 800a1ec:	0800ed34 	.word	0x0800ed34
 800a1f0:	0800ed38 	.word	0x0800ed38
 800a1f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1f8:	920a      	str	r2, [sp, #40]	; 0x28
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	dd00      	ble.n	800a200 <_printf_float+0x328>
 800a1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a202:	2b00      	cmp	r3, #0
 800a204:	dc3d      	bgt.n	800a282 <_printf_float+0x3aa>
 800a206:	2300      	movs	r3, #0
 800a208:	930e      	str	r3, [sp, #56]	; 0x38
 800a20a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a20c:	43db      	mvns	r3, r3
 800a20e:	17db      	asrs	r3, r3, #31
 800a210:	930f      	str	r3, [sp, #60]	; 0x3c
 800a212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a216:	930b      	str	r3, [sp, #44]	; 0x2c
 800a218:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a21a:	4013      	ands	r3, r2
 800a21c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a222:	4293      	cmp	r3, r2
 800a224:	dc36      	bgt.n	800a294 <_printf_float+0x3bc>
 800a226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a228:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a22a:	429a      	cmp	r2, r3
 800a22c:	db40      	blt.n	800a2b0 <_printf_float+0x3d8>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	07db      	lsls	r3, r3, #31
 800a232:	d43d      	bmi.n	800a2b0 <_printf_float+0x3d8>
 800a234:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a236:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a23a:	1af3      	subs	r3, r6, r3
 800a23c:	1ab6      	subs	r6, r6, r2
 800a23e:	429e      	cmp	r6, r3
 800a240:	dd00      	ble.n	800a244 <_printf_float+0x36c>
 800a242:	001e      	movs	r6, r3
 800a244:	2e00      	cmp	r6, #0
 800a246:	dc3c      	bgt.n	800a2c2 <_printf_float+0x3ea>
 800a248:	2300      	movs	r3, #0
 800a24a:	930a      	str	r3, [sp, #40]	; 0x28
 800a24c:	43f3      	mvns	r3, r6
 800a24e:	17db      	asrs	r3, r3, #31
 800a250:	930b      	str	r3, [sp, #44]	; 0x2c
 800a252:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a254:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a256:	1a9b      	subs	r3, r3, r2
 800a258:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a25a:	4032      	ands	r2, r6
 800a25c:	1a9b      	subs	r3, r3, r2
 800a25e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a260:	4293      	cmp	r3, r2
 800a262:	dc00      	bgt.n	800a266 <_printf_float+0x38e>
 800a264:	e770      	b.n	800a148 <_printf_float+0x270>
 800a266:	0022      	movs	r2, r4
 800a268:	2301      	movs	r3, #1
 800a26a:	0038      	movs	r0, r7
 800a26c:	9908      	ldr	r1, [sp, #32]
 800a26e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a270:	321a      	adds	r2, #26
 800a272:	47a8      	blx	r5
 800a274:	3001      	adds	r0, #1
 800a276:	d100      	bne.n	800a27a <_printf_float+0x3a2>
 800a278:	e68c      	b.n	8009f94 <_printf_float+0xbc>
 800a27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27c:	3301      	adds	r3, #1
 800a27e:	930a      	str	r3, [sp, #40]	; 0x28
 800a280:	e7e7      	b.n	800a252 <_printf_float+0x37a>
 800a282:	002a      	movs	r2, r5
 800a284:	0038      	movs	r0, r7
 800a286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a288:	9908      	ldr	r1, [sp, #32]
 800a28a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a28c:	47b0      	blx	r6
 800a28e:	3001      	adds	r0, #1
 800a290:	d1b9      	bne.n	800a206 <_printf_float+0x32e>
 800a292:	e67f      	b.n	8009f94 <_printf_float+0xbc>
 800a294:	0022      	movs	r2, r4
 800a296:	2301      	movs	r3, #1
 800a298:	0038      	movs	r0, r7
 800a29a:	9908      	ldr	r1, [sp, #32]
 800a29c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a29e:	321a      	adds	r2, #26
 800a2a0:	47b0      	blx	r6
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	d100      	bne.n	800a2a8 <_printf_float+0x3d0>
 800a2a6:	e675      	b.n	8009f94 <_printf_float+0xbc>
 800a2a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	930e      	str	r3, [sp, #56]	; 0x38
 800a2ae:	e7b0      	b.n	800a212 <_printf_float+0x33a>
 800a2b0:	0038      	movs	r0, r7
 800a2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2b6:	9908      	ldr	r1, [sp, #32]
 800a2b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2ba:	47b0      	blx	r6
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d1b9      	bne.n	800a234 <_printf_float+0x35c>
 800a2c0:	e668      	b.n	8009f94 <_printf_float+0xbc>
 800a2c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2c4:	0038      	movs	r0, r7
 800a2c6:	18ea      	adds	r2, r5, r3
 800a2c8:	9908      	ldr	r1, [sp, #32]
 800a2ca:	0033      	movs	r3, r6
 800a2cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a2ce:	47a8      	blx	r5
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	d1b9      	bne.n	800a248 <_printf_float+0x370>
 800a2d4:	e65e      	b.n	8009f94 <_printf_float+0xbc>
 800a2d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	dc02      	bgt.n	800a2e2 <_printf_float+0x40a>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	421a      	tst	r2, r3
 800a2e0:	d03a      	beq.n	800a358 <_printf_float+0x480>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	002a      	movs	r2, r5
 800a2e6:	0038      	movs	r0, r7
 800a2e8:	9908      	ldr	r1, [sp, #32]
 800a2ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2ec:	47b0      	blx	r6
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d100      	bne.n	800a2f4 <_printf_float+0x41c>
 800a2f2:	e64f      	b.n	8009f94 <_printf_float+0xbc>
 800a2f4:	0038      	movs	r0, r7
 800a2f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2fa:	9908      	ldr	r1, [sp, #32]
 800a2fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2fe:	47b0      	blx	r6
 800a300:	3001      	adds	r0, #1
 800a302:	d100      	bne.n	800a306 <_printf_float+0x42e>
 800a304:	e646      	b.n	8009f94 <_printf_float+0xbc>
 800a306:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a308:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a30a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a30c:	2200      	movs	r2, #0
 800a30e:	001e      	movs	r6, r3
 800a310:	2300      	movs	r3, #0
 800a312:	f7f6 f89b 	bl	800044c <__aeabi_dcmpeq>
 800a316:	2800      	cmp	r0, #0
 800a318:	d11c      	bne.n	800a354 <_printf_float+0x47c>
 800a31a:	0033      	movs	r3, r6
 800a31c:	1c6a      	adds	r2, r5, #1
 800a31e:	3b01      	subs	r3, #1
 800a320:	0038      	movs	r0, r7
 800a322:	9908      	ldr	r1, [sp, #32]
 800a324:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a326:	47a8      	blx	r5
 800a328:	3001      	adds	r0, #1
 800a32a:	d10f      	bne.n	800a34c <_printf_float+0x474>
 800a32c:	e632      	b.n	8009f94 <_printf_float+0xbc>
 800a32e:	0022      	movs	r2, r4
 800a330:	2301      	movs	r3, #1
 800a332:	0038      	movs	r0, r7
 800a334:	9908      	ldr	r1, [sp, #32]
 800a336:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a338:	321a      	adds	r2, #26
 800a33a:	47b0      	blx	r6
 800a33c:	3001      	adds	r0, #1
 800a33e:	d100      	bne.n	800a342 <_printf_float+0x46a>
 800a340:	e628      	b.n	8009f94 <_printf_float+0xbc>
 800a342:	3501      	adds	r5, #1
 800a344:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a346:	3b01      	subs	r3, #1
 800a348:	42ab      	cmp	r3, r5
 800a34a:	dcf0      	bgt.n	800a32e <_printf_float+0x456>
 800a34c:	0022      	movs	r2, r4
 800a34e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a350:	3250      	adds	r2, #80	; 0x50
 800a352:	e6c8      	b.n	800a0e6 <_printf_float+0x20e>
 800a354:	2500      	movs	r5, #0
 800a356:	e7f5      	b.n	800a344 <_printf_float+0x46c>
 800a358:	002a      	movs	r2, r5
 800a35a:	e7e1      	b.n	800a320 <_printf_float+0x448>
 800a35c:	0022      	movs	r2, r4
 800a35e:	2301      	movs	r3, #1
 800a360:	0038      	movs	r0, r7
 800a362:	9908      	ldr	r1, [sp, #32]
 800a364:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a366:	3219      	adds	r2, #25
 800a368:	47b0      	blx	r6
 800a36a:	3001      	adds	r0, #1
 800a36c:	d100      	bne.n	800a370 <_printf_float+0x498>
 800a36e:	e611      	b.n	8009f94 <_printf_float+0xbc>
 800a370:	3501      	adds	r5, #1
 800a372:	68e3      	ldr	r3, [r4, #12]
 800a374:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a376:	1a9b      	subs	r3, r3, r2
 800a378:	42ab      	cmp	r3, r5
 800a37a:	dcef      	bgt.n	800a35c <_printf_float+0x484>
 800a37c:	e6e8      	b.n	800a150 <_printf_float+0x278>
 800a37e:	2500      	movs	r5, #0
 800a380:	e7f7      	b.n	800a372 <_printf_float+0x49a>
 800a382:	46c0      	nop			; (mov r8, r8)

0800a384 <_printf_common>:
 800a384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a386:	0016      	movs	r6, r2
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	688a      	ldr	r2, [r1, #8]
 800a38c:	690b      	ldr	r3, [r1, #16]
 800a38e:	000c      	movs	r4, r1
 800a390:	9000      	str	r0, [sp, #0]
 800a392:	4293      	cmp	r3, r2
 800a394:	da00      	bge.n	800a398 <_printf_common+0x14>
 800a396:	0013      	movs	r3, r2
 800a398:	0022      	movs	r2, r4
 800a39a:	6033      	str	r3, [r6, #0]
 800a39c:	3243      	adds	r2, #67	; 0x43
 800a39e:	7812      	ldrb	r2, [r2, #0]
 800a3a0:	2a00      	cmp	r2, #0
 800a3a2:	d001      	beq.n	800a3a8 <_printf_common+0x24>
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	6033      	str	r3, [r6, #0]
 800a3a8:	6823      	ldr	r3, [r4, #0]
 800a3aa:	069b      	lsls	r3, r3, #26
 800a3ac:	d502      	bpl.n	800a3b4 <_printf_common+0x30>
 800a3ae:	6833      	ldr	r3, [r6, #0]
 800a3b0:	3302      	adds	r3, #2
 800a3b2:	6033      	str	r3, [r6, #0]
 800a3b4:	6822      	ldr	r2, [r4, #0]
 800a3b6:	2306      	movs	r3, #6
 800a3b8:	0015      	movs	r5, r2
 800a3ba:	401d      	ands	r5, r3
 800a3bc:	421a      	tst	r2, r3
 800a3be:	d027      	beq.n	800a410 <_printf_common+0x8c>
 800a3c0:	0023      	movs	r3, r4
 800a3c2:	3343      	adds	r3, #67	; 0x43
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	1e5a      	subs	r2, r3, #1
 800a3c8:	4193      	sbcs	r3, r2
 800a3ca:	6822      	ldr	r2, [r4, #0]
 800a3cc:	0692      	lsls	r2, r2, #26
 800a3ce:	d430      	bmi.n	800a432 <_printf_common+0xae>
 800a3d0:	0022      	movs	r2, r4
 800a3d2:	9901      	ldr	r1, [sp, #4]
 800a3d4:	9800      	ldr	r0, [sp, #0]
 800a3d6:	9d08      	ldr	r5, [sp, #32]
 800a3d8:	3243      	adds	r2, #67	; 0x43
 800a3da:	47a8      	blx	r5
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d025      	beq.n	800a42c <_printf_common+0xa8>
 800a3e0:	2206      	movs	r2, #6
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	2500      	movs	r5, #0
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	d105      	bne.n	800a3f8 <_printf_common+0x74>
 800a3ec:	6833      	ldr	r3, [r6, #0]
 800a3ee:	68e5      	ldr	r5, [r4, #12]
 800a3f0:	1aed      	subs	r5, r5, r3
 800a3f2:	43eb      	mvns	r3, r5
 800a3f4:	17db      	asrs	r3, r3, #31
 800a3f6:	401d      	ands	r5, r3
 800a3f8:	68a3      	ldr	r3, [r4, #8]
 800a3fa:	6922      	ldr	r2, [r4, #16]
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	dd01      	ble.n	800a404 <_printf_common+0x80>
 800a400:	1a9b      	subs	r3, r3, r2
 800a402:	18ed      	adds	r5, r5, r3
 800a404:	2600      	movs	r6, #0
 800a406:	42b5      	cmp	r5, r6
 800a408:	d120      	bne.n	800a44c <_printf_common+0xc8>
 800a40a:	2000      	movs	r0, #0
 800a40c:	e010      	b.n	800a430 <_printf_common+0xac>
 800a40e:	3501      	adds	r5, #1
 800a410:	68e3      	ldr	r3, [r4, #12]
 800a412:	6832      	ldr	r2, [r6, #0]
 800a414:	1a9b      	subs	r3, r3, r2
 800a416:	42ab      	cmp	r3, r5
 800a418:	ddd2      	ble.n	800a3c0 <_printf_common+0x3c>
 800a41a:	0022      	movs	r2, r4
 800a41c:	2301      	movs	r3, #1
 800a41e:	9901      	ldr	r1, [sp, #4]
 800a420:	9800      	ldr	r0, [sp, #0]
 800a422:	9f08      	ldr	r7, [sp, #32]
 800a424:	3219      	adds	r2, #25
 800a426:	47b8      	blx	r7
 800a428:	3001      	adds	r0, #1
 800a42a:	d1f0      	bne.n	800a40e <_printf_common+0x8a>
 800a42c:	2001      	movs	r0, #1
 800a42e:	4240      	negs	r0, r0
 800a430:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a432:	2030      	movs	r0, #48	; 0x30
 800a434:	18e1      	adds	r1, r4, r3
 800a436:	3143      	adds	r1, #67	; 0x43
 800a438:	7008      	strb	r0, [r1, #0]
 800a43a:	0021      	movs	r1, r4
 800a43c:	1c5a      	adds	r2, r3, #1
 800a43e:	3145      	adds	r1, #69	; 0x45
 800a440:	7809      	ldrb	r1, [r1, #0]
 800a442:	18a2      	adds	r2, r4, r2
 800a444:	3243      	adds	r2, #67	; 0x43
 800a446:	3302      	adds	r3, #2
 800a448:	7011      	strb	r1, [r2, #0]
 800a44a:	e7c1      	b.n	800a3d0 <_printf_common+0x4c>
 800a44c:	0022      	movs	r2, r4
 800a44e:	2301      	movs	r3, #1
 800a450:	9901      	ldr	r1, [sp, #4]
 800a452:	9800      	ldr	r0, [sp, #0]
 800a454:	9f08      	ldr	r7, [sp, #32]
 800a456:	321a      	adds	r2, #26
 800a458:	47b8      	blx	r7
 800a45a:	3001      	adds	r0, #1
 800a45c:	d0e6      	beq.n	800a42c <_printf_common+0xa8>
 800a45e:	3601      	adds	r6, #1
 800a460:	e7d1      	b.n	800a406 <_printf_common+0x82>
	...

0800a464 <_printf_i>:
 800a464:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a466:	b08b      	sub	sp, #44	; 0x2c
 800a468:	9206      	str	r2, [sp, #24]
 800a46a:	000a      	movs	r2, r1
 800a46c:	3243      	adds	r2, #67	; 0x43
 800a46e:	9307      	str	r3, [sp, #28]
 800a470:	9005      	str	r0, [sp, #20]
 800a472:	9204      	str	r2, [sp, #16]
 800a474:	7e0a      	ldrb	r2, [r1, #24]
 800a476:	000c      	movs	r4, r1
 800a478:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a47a:	2a78      	cmp	r2, #120	; 0x78
 800a47c:	d809      	bhi.n	800a492 <_printf_i+0x2e>
 800a47e:	2a62      	cmp	r2, #98	; 0x62
 800a480:	d80b      	bhi.n	800a49a <_printf_i+0x36>
 800a482:	2a00      	cmp	r2, #0
 800a484:	d100      	bne.n	800a488 <_printf_i+0x24>
 800a486:	e0be      	b.n	800a606 <_printf_i+0x1a2>
 800a488:	497c      	ldr	r1, [pc, #496]	; (800a67c <_printf_i+0x218>)
 800a48a:	9103      	str	r1, [sp, #12]
 800a48c:	2a58      	cmp	r2, #88	; 0x58
 800a48e:	d100      	bne.n	800a492 <_printf_i+0x2e>
 800a490:	e093      	b.n	800a5ba <_printf_i+0x156>
 800a492:	0026      	movs	r6, r4
 800a494:	3642      	adds	r6, #66	; 0x42
 800a496:	7032      	strb	r2, [r6, #0]
 800a498:	e022      	b.n	800a4e0 <_printf_i+0x7c>
 800a49a:	0010      	movs	r0, r2
 800a49c:	3863      	subs	r0, #99	; 0x63
 800a49e:	2815      	cmp	r0, #21
 800a4a0:	d8f7      	bhi.n	800a492 <_printf_i+0x2e>
 800a4a2:	f7f5 fe43 	bl	800012c <__gnu_thumb1_case_shi>
 800a4a6:	0016      	.short	0x0016
 800a4a8:	fff6001f 	.word	0xfff6001f
 800a4ac:	fff6fff6 	.word	0xfff6fff6
 800a4b0:	001ffff6 	.word	0x001ffff6
 800a4b4:	fff6fff6 	.word	0xfff6fff6
 800a4b8:	fff6fff6 	.word	0xfff6fff6
 800a4bc:	003600a3 	.word	0x003600a3
 800a4c0:	fff60083 	.word	0xfff60083
 800a4c4:	00b4fff6 	.word	0x00b4fff6
 800a4c8:	0036fff6 	.word	0x0036fff6
 800a4cc:	fff6fff6 	.word	0xfff6fff6
 800a4d0:	0087      	.short	0x0087
 800a4d2:	0026      	movs	r6, r4
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	3642      	adds	r6, #66	; 0x42
 800a4d8:	1d11      	adds	r1, r2, #4
 800a4da:	6019      	str	r1, [r3, #0]
 800a4dc:	6813      	ldr	r3, [r2, #0]
 800a4de:	7033      	strb	r3, [r6, #0]
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e0a2      	b.n	800a62a <_printf_i+0x1c6>
 800a4e4:	6818      	ldr	r0, [r3, #0]
 800a4e6:	6809      	ldr	r1, [r1, #0]
 800a4e8:	1d02      	adds	r2, r0, #4
 800a4ea:	060d      	lsls	r5, r1, #24
 800a4ec:	d50b      	bpl.n	800a506 <_printf_i+0xa2>
 800a4ee:	6805      	ldr	r5, [r0, #0]
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	2d00      	cmp	r5, #0
 800a4f4:	da03      	bge.n	800a4fe <_printf_i+0x9a>
 800a4f6:	232d      	movs	r3, #45	; 0x2d
 800a4f8:	9a04      	ldr	r2, [sp, #16]
 800a4fa:	426d      	negs	r5, r5
 800a4fc:	7013      	strb	r3, [r2, #0]
 800a4fe:	4b5f      	ldr	r3, [pc, #380]	; (800a67c <_printf_i+0x218>)
 800a500:	270a      	movs	r7, #10
 800a502:	9303      	str	r3, [sp, #12]
 800a504:	e01b      	b.n	800a53e <_printf_i+0xda>
 800a506:	6805      	ldr	r5, [r0, #0]
 800a508:	601a      	str	r2, [r3, #0]
 800a50a:	0649      	lsls	r1, r1, #25
 800a50c:	d5f1      	bpl.n	800a4f2 <_printf_i+0x8e>
 800a50e:	b22d      	sxth	r5, r5
 800a510:	e7ef      	b.n	800a4f2 <_printf_i+0x8e>
 800a512:	680d      	ldr	r5, [r1, #0]
 800a514:	6819      	ldr	r1, [r3, #0]
 800a516:	1d08      	adds	r0, r1, #4
 800a518:	6018      	str	r0, [r3, #0]
 800a51a:	062e      	lsls	r6, r5, #24
 800a51c:	d501      	bpl.n	800a522 <_printf_i+0xbe>
 800a51e:	680d      	ldr	r5, [r1, #0]
 800a520:	e003      	b.n	800a52a <_printf_i+0xc6>
 800a522:	066d      	lsls	r5, r5, #25
 800a524:	d5fb      	bpl.n	800a51e <_printf_i+0xba>
 800a526:	680d      	ldr	r5, [r1, #0]
 800a528:	b2ad      	uxth	r5, r5
 800a52a:	4b54      	ldr	r3, [pc, #336]	; (800a67c <_printf_i+0x218>)
 800a52c:	2708      	movs	r7, #8
 800a52e:	9303      	str	r3, [sp, #12]
 800a530:	2a6f      	cmp	r2, #111	; 0x6f
 800a532:	d000      	beq.n	800a536 <_printf_i+0xd2>
 800a534:	3702      	adds	r7, #2
 800a536:	0023      	movs	r3, r4
 800a538:	2200      	movs	r2, #0
 800a53a:	3343      	adds	r3, #67	; 0x43
 800a53c:	701a      	strb	r2, [r3, #0]
 800a53e:	6863      	ldr	r3, [r4, #4]
 800a540:	60a3      	str	r3, [r4, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	db03      	blt.n	800a54e <_printf_i+0xea>
 800a546:	2104      	movs	r1, #4
 800a548:	6822      	ldr	r2, [r4, #0]
 800a54a:	438a      	bics	r2, r1
 800a54c:	6022      	str	r2, [r4, #0]
 800a54e:	2d00      	cmp	r5, #0
 800a550:	d102      	bne.n	800a558 <_printf_i+0xf4>
 800a552:	9e04      	ldr	r6, [sp, #16]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00c      	beq.n	800a572 <_printf_i+0x10e>
 800a558:	9e04      	ldr	r6, [sp, #16]
 800a55a:	0028      	movs	r0, r5
 800a55c:	0039      	movs	r1, r7
 800a55e:	f7f5 fe75 	bl	800024c <__aeabi_uidivmod>
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	3e01      	subs	r6, #1
 800a566:	5c5b      	ldrb	r3, [r3, r1]
 800a568:	7033      	strb	r3, [r6, #0]
 800a56a:	002b      	movs	r3, r5
 800a56c:	0005      	movs	r5, r0
 800a56e:	429f      	cmp	r7, r3
 800a570:	d9f3      	bls.n	800a55a <_printf_i+0xf6>
 800a572:	2f08      	cmp	r7, #8
 800a574:	d109      	bne.n	800a58a <_printf_i+0x126>
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	07db      	lsls	r3, r3, #31
 800a57a:	d506      	bpl.n	800a58a <_printf_i+0x126>
 800a57c:	6862      	ldr	r2, [r4, #4]
 800a57e:	6923      	ldr	r3, [r4, #16]
 800a580:	429a      	cmp	r2, r3
 800a582:	dc02      	bgt.n	800a58a <_printf_i+0x126>
 800a584:	2330      	movs	r3, #48	; 0x30
 800a586:	3e01      	subs	r6, #1
 800a588:	7033      	strb	r3, [r6, #0]
 800a58a:	9b04      	ldr	r3, [sp, #16]
 800a58c:	1b9b      	subs	r3, r3, r6
 800a58e:	6123      	str	r3, [r4, #16]
 800a590:	9b07      	ldr	r3, [sp, #28]
 800a592:	0021      	movs	r1, r4
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	9805      	ldr	r0, [sp, #20]
 800a598:	9b06      	ldr	r3, [sp, #24]
 800a59a:	aa09      	add	r2, sp, #36	; 0x24
 800a59c:	f7ff fef2 	bl	800a384 <_printf_common>
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d147      	bne.n	800a634 <_printf_i+0x1d0>
 800a5a4:	2001      	movs	r0, #1
 800a5a6:	4240      	negs	r0, r0
 800a5a8:	b00b      	add	sp, #44	; 0x2c
 800a5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	6809      	ldr	r1, [r1, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	6022      	str	r2, [r4, #0]
 800a5b4:	2278      	movs	r2, #120	; 0x78
 800a5b6:	4932      	ldr	r1, [pc, #200]	; (800a680 <_printf_i+0x21c>)
 800a5b8:	9103      	str	r1, [sp, #12]
 800a5ba:	0021      	movs	r1, r4
 800a5bc:	3145      	adds	r1, #69	; 0x45
 800a5be:	700a      	strb	r2, [r1, #0]
 800a5c0:	6819      	ldr	r1, [r3, #0]
 800a5c2:	6822      	ldr	r2, [r4, #0]
 800a5c4:	c920      	ldmia	r1!, {r5}
 800a5c6:	0610      	lsls	r0, r2, #24
 800a5c8:	d402      	bmi.n	800a5d0 <_printf_i+0x16c>
 800a5ca:	0650      	lsls	r0, r2, #25
 800a5cc:	d500      	bpl.n	800a5d0 <_printf_i+0x16c>
 800a5ce:	b2ad      	uxth	r5, r5
 800a5d0:	6019      	str	r1, [r3, #0]
 800a5d2:	07d3      	lsls	r3, r2, #31
 800a5d4:	d502      	bpl.n	800a5dc <_printf_i+0x178>
 800a5d6:	2320      	movs	r3, #32
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	6023      	str	r3, [r4, #0]
 800a5dc:	2710      	movs	r7, #16
 800a5de:	2d00      	cmp	r5, #0
 800a5e0:	d1a9      	bne.n	800a536 <_printf_i+0xd2>
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	6823      	ldr	r3, [r4, #0]
 800a5e6:	4393      	bics	r3, r2
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	e7a4      	b.n	800a536 <_printf_i+0xd2>
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	680d      	ldr	r5, [r1, #0]
 800a5f0:	1d10      	adds	r0, r2, #4
 800a5f2:	6949      	ldr	r1, [r1, #20]
 800a5f4:	6018      	str	r0, [r3, #0]
 800a5f6:	6813      	ldr	r3, [r2, #0]
 800a5f8:	062e      	lsls	r6, r5, #24
 800a5fa:	d501      	bpl.n	800a600 <_printf_i+0x19c>
 800a5fc:	6019      	str	r1, [r3, #0]
 800a5fe:	e002      	b.n	800a606 <_printf_i+0x1a2>
 800a600:	066d      	lsls	r5, r5, #25
 800a602:	d5fb      	bpl.n	800a5fc <_printf_i+0x198>
 800a604:	8019      	strh	r1, [r3, #0]
 800a606:	2300      	movs	r3, #0
 800a608:	9e04      	ldr	r6, [sp, #16]
 800a60a:	6123      	str	r3, [r4, #16]
 800a60c:	e7c0      	b.n	800a590 <_printf_i+0x12c>
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	1d11      	adds	r1, r2, #4
 800a612:	6019      	str	r1, [r3, #0]
 800a614:	6816      	ldr	r6, [r2, #0]
 800a616:	2100      	movs	r1, #0
 800a618:	0030      	movs	r0, r6
 800a61a:	6862      	ldr	r2, [r4, #4]
 800a61c:	f000 fc25 	bl	800ae6a <memchr>
 800a620:	2800      	cmp	r0, #0
 800a622:	d001      	beq.n	800a628 <_printf_i+0x1c4>
 800a624:	1b80      	subs	r0, r0, r6
 800a626:	6060      	str	r0, [r4, #4]
 800a628:	6863      	ldr	r3, [r4, #4]
 800a62a:	6123      	str	r3, [r4, #16]
 800a62c:	2300      	movs	r3, #0
 800a62e:	9a04      	ldr	r2, [sp, #16]
 800a630:	7013      	strb	r3, [r2, #0]
 800a632:	e7ad      	b.n	800a590 <_printf_i+0x12c>
 800a634:	0032      	movs	r2, r6
 800a636:	6923      	ldr	r3, [r4, #16]
 800a638:	9906      	ldr	r1, [sp, #24]
 800a63a:	9805      	ldr	r0, [sp, #20]
 800a63c:	9d07      	ldr	r5, [sp, #28]
 800a63e:	47a8      	blx	r5
 800a640:	3001      	adds	r0, #1
 800a642:	d0af      	beq.n	800a5a4 <_printf_i+0x140>
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	079b      	lsls	r3, r3, #30
 800a648:	d415      	bmi.n	800a676 <_printf_i+0x212>
 800a64a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a64c:	68e0      	ldr	r0, [r4, #12]
 800a64e:	4298      	cmp	r0, r3
 800a650:	daaa      	bge.n	800a5a8 <_printf_i+0x144>
 800a652:	0018      	movs	r0, r3
 800a654:	e7a8      	b.n	800a5a8 <_printf_i+0x144>
 800a656:	0022      	movs	r2, r4
 800a658:	2301      	movs	r3, #1
 800a65a:	9906      	ldr	r1, [sp, #24]
 800a65c:	9805      	ldr	r0, [sp, #20]
 800a65e:	9e07      	ldr	r6, [sp, #28]
 800a660:	3219      	adds	r2, #25
 800a662:	47b0      	blx	r6
 800a664:	3001      	adds	r0, #1
 800a666:	d09d      	beq.n	800a5a4 <_printf_i+0x140>
 800a668:	3501      	adds	r5, #1
 800a66a:	68e3      	ldr	r3, [r4, #12]
 800a66c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a66e:	1a9b      	subs	r3, r3, r2
 800a670:	42ab      	cmp	r3, r5
 800a672:	dcf0      	bgt.n	800a656 <_printf_i+0x1f2>
 800a674:	e7e9      	b.n	800a64a <_printf_i+0x1e6>
 800a676:	2500      	movs	r5, #0
 800a678:	e7f7      	b.n	800a66a <_printf_i+0x206>
 800a67a:	46c0      	nop			; (mov r8, r8)
 800a67c:	0800ed3a 	.word	0x0800ed3a
 800a680:	0800ed4b 	.word	0x0800ed4b

0800a684 <_scanf_float>:
 800a684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a686:	b08b      	sub	sp, #44	; 0x2c
 800a688:	0016      	movs	r6, r2
 800a68a:	9002      	str	r0, [sp, #8]
 800a68c:	22ae      	movs	r2, #174	; 0xae
 800a68e:	2000      	movs	r0, #0
 800a690:	9307      	str	r3, [sp, #28]
 800a692:	688b      	ldr	r3, [r1, #8]
 800a694:	000f      	movs	r7, r1
 800a696:	1e59      	subs	r1, r3, #1
 800a698:	0052      	lsls	r2, r2, #1
 800a69a:	9006      	str	r0, [sp, #24]
 800a69c:	4291      	cmp	r1, r2
 800a69e:	d905      	bls.n	800a6ac <_scanf_float+0x28>
 800a6a0:	3b5e      	subs	r3, #94	; 0x5e
 800a6a2:	3bff      	subs	r3, #255	; 0xff
 800a6a4:	9306      	str	r3, [sp, #24]
 800a6a6:	235e      	movs	r3, #94	; 0x5e
 800a6a8:	33ff      	adds	r3, #255	; 0xff
 800a6aa:	60bb      	str	r3, [r7, #8]
 800a6ac:	23f0      	movs	r3, #240	; 0xf0
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	00db      	lsls	r3, r3, #3
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	603b      	str	r3, [r7, #0]
 800a6b6:	003b      	movs	r3, r7
 800a6b8:	2400      	movs	r4, #0
 800a6ba:	331c      	adds	r3, #28
 800a6bc:	001d      	movs	r5, r3
 800a6be:	9304      	str	r3, [sp, #16]
 800a6c0:	9403      	str	r4, [sp, #12]
 800a6c2:	9409      	str	r4, [sp, #36]	; 0x24
 800a6c4:	9408      	str	r4, [sp, #32]
 800a6c6:	9401      	str	r4, [sp, #4]
 800a6c8:	9405      	str	r4, [sp, #20]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	2a00      	cmp	r2, #0
 800a6ce:	d00a      	beq.n	800a6e6 <_scanf_float+0x62>
 800a6d0:	6833      	ldr	r3, [r6, #0]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b4e      	cmp	r3, #78	; 0x4e
 800a6d6:	d844      	bhi.n	800a762 <_scanf_float+0xde>
 800a6d8:	0018      	movs	r0, r3
 800a6da:	2b40      	cmp	r3, #64	; 0x40
 800a6dc:	d82c      	bhi.n	800a738 <_scanf_float+0xb4>
 800a6de:	382b      	subs	r0, #43	; 0x2b
 800a6e0:	b2c1      	uxtb	r1, r0
 800a6e2:	290e      	cmp	r1, #14
 800a6e4:	d92a      	bls.n	800a73c <_scanf_float+0xb8>
 800a6e6:	9b01      	ldr	r3, [sp, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <_scanf_float+0x70>
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	4aa3      	ldr	r2, [pc, #652]	; (800a97c <_scanf_float+0x2f8>)
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	603b      	str	r3, [r7, #0]
 800a6f4:	9b03      	ldr	r3, [sp, #12]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d900      	bls.n	800a6fe <_scanf_float+0x7a>
 800a6fc:	e0f9      	b.n	800a8f2 <_scanf_float+0x26e>
 800a6fe:	24be      	movs	r4, #190	; 0xbe
 800a700:	0064      	lsls	r4, r4, #1
 800a702:	9b04      	ldr	r3, [sp, #16]
 800a704:	429d      	cmp	r5, r3
 800a706:	d900      	bls.n	800a70a <_scanf_float+0x86>
 800a708:	e0e9      	b.n	800a8de <_scanf_float+0x25a>
 800a70a:	2301      	movs	r3, #1
 800a70c:	9303      	str	r3, [sp, #12]
 800a70e:	e183      	b.n	800aa18 <_scanf_float+0x394>
 800a710:	0018      	movs	r0, r3
 800a712:	3861      	subs	r0, #97	; 0x61
 800a714:	280d      	cmp	r0, #13
 800a716:	d8e6      	bhi.n	800a6e6 <_scanf_float+0x62>
 800a718:	f7f5 fd08 	bl	800012c <__gnu_thumb1_case_shi>
 800a71c:	ffe50083 	.word	0xffe50083
 800a720:	ffe5ffe5 	.word	0xffe5ffe5
 800a724:	00a200b6 	.word	0x00a200b6
 800a728:	ffe5ffe5 	.word	0xffe5ffe5
 800a72c:	ffe50089 	.word	0xffe50089
 800a730:	ffe5ffe5 	.word	0xffe5ffe5
 800a734:	0065ffe5 	.word	0x0065ffe5
 800a738:	3841      	subs	r0, #65	; 0x41
 800a73a:	e7eb      	b.n	800a714 <_scanf_float+0x90>
 800a73c:	280e      	cmp	r0, #14
 800a73e:	d8d2      	bhi.n	800a6e6 <_scanf_float+0x62>
 800a740:	f7f5 fcf4 	bl	800012c <__gnu_thumb1_case_shi>
 800a744:	ffd1004b 	.word	0xffd1004b
 800a748:	0098004b 	.word	0x0098004b
 800a74c:	0020ffd1 	.word	0x0020ffd1
 800a750:	00400040 	.word	0x00400040
 800a754:	00400040 	.word	0x00400040
 800a758:	00400040 	.word	0x00400040
 800a75c:	00400040 	.word	0x00400040
 800a760:	0040      	.short	0x0040
 800a762:	2b6e      	cmp	r3, #110	; 0x6e
 800a764:	d809      	bhi.n	800a77a <_scanf_float+0xf6>
 800a766:	2b60      	cmp	r3, #96	; 0x60
 800a768:	d8d2      	bhi.n	800a710 <_scanf_float+0x8c>
 800a76a:	2b54      	cmp	r3, #84	; 0x54
 800a76c:	d07d      	beq.n	800a86a <_scanf_float+0x1e6>
 800a76e:	2b59      	cmp	r3, #89	; 0x59
 800a770:	d1b9      	bne.n	800a6e6 <_scanf_float+0x62>
 800a772:	2c07      	cmp	r4, #7
 800a774:	d1b7      	bne.n	800a6e6 <_scanf_float+0x62>
 800a776:	2408      	movs	r4, #8
 800a778:	e02c      	b.n	800a7d4 <_scanf_float+0x150>
 800a77a:	2b74      	cmp	r3, #116	; 0x74
 800a77c:	d075      	beq.n	800a86a <_scanf_float+0x1e6>
 800a77e:	2b79      	cmp	r3, #121	; 0x79
 800a780:	d0f7      	beq.n	800a772 <_scanf_float+0xee>
 800a782:	e7b0      	b.n	800a6e6 <_scanf_float+0x62>
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	05c8      	lsls	r0, r1, #23
 800a788:	d51c      	bpl.n	800a7c4 <_scanf_float+0x140>
 800a78a:	2380      	movs	r3, #128	; 0x80
 800a78c:	4399      	bics	r1, r3
 800a78e:	9b01      	ldr	r3, [sp, #4]
 800a790:	6039      	str	r1, [r7, #0]
 800a792:	3301      	adds	r3, #1
 800a794:	9301      	str	r3, [sp, #4]
 800a796:	9b06      	ldr	r3, [sp, #24]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <_scanf_float+0x120>
 800a79c:	3b01      	subs	r3, #1
 800a79e:	3201      	adds	r2, #1
 800a7a0:	9306      	str	r3, [sp, #24]
 800a7a2:	60ba      	str	r2, [r7, #8]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	60bb      	str	r3, [r7, #8]
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	613b      	str	r3, [r7, #16]
 800a7b0:	6873      	ldr	r3, [r6, #4]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	6073      	str	r3, [r6, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	dc00      	bgt.n	800a7bc <_scanf_float+0x138>
 800a7ba:	e086      	b.n	800a8ca <_scanf_float+0x246>
 800a7bc:	6833      	ldr	r3, [r6, #0]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	6033      	str	r3, [r6, #0]
 800a7c2:	e782      	b.n	800a6ca <_scanf_float+0x46>
 800a7c4:	9a03      	ldr	r2, [sp, #12]
 800a7c6:	1912      	adds	r2, r2, r4
 800a7c8:	2a00      	cmp	r2, #0
 800a7ca:	d18c      	bne.n	800a6e6 <_scanf_float+0x62>
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	496c      	ldr	r1, [pc, #432]	; (800a980 <_scanf_float+0x2fc>)
 800a7d0:	400a      	ands	r2, r1
 800a7d2:	603a      	str	r2, [r7, #0]
 800a7d4:	702b      	strb	r3, [r5, #0]
 800a7d6:	3501      	adds	r5, #1
 800a7d8:	e7e4      	b.n	800a7a4 <_scanf_float+0x120>
 800a7da:	2180      	movs	r1, #128	; 0x80
 800a7dc:	683a      	ldr	r2, [r7, #0]
 800a7de:	420a      	tst	r2, r1
 800a7e0:	d081      	beq.n	800a6e6 <_scanf_float+0x62>
 800a7e2:	438a      	bics	r2, r1
 800a7e4:	e7f5      	b.n	800a7d2 <_scanf_float+0x14e>
 800a7e6:	9a03      	ldr	r2, [sp, #12]
 800a7e8:	2a00      	cmp	r2, #0
 800a7ea:	d10f      	bne.n	800a80c <_scanf_float+0x188>
 800a7ec:	9a01      	ldr	r2, [sp, #4]
 800a7ee:	2a00      	cmp	r2, #0
 800a7f0:	d10f      	bne.n	800a812 <_scanf_float+0x18e>
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	21e0      	movs	r1, #224	; 0xe0
 800a7f6:	0010      	movs	r0, r2
 800a7f8:	00c9      	lsls	r1, r1, #3
 800a7fa:	4008      	ands	r0, r1
 800a7fc:	4288      	cmp	r0, r1
 800a7fe:	d108      	bne.n	800a812 <_scanf_float+0x18e>
 800a800:	4960      	ldr	r1, [pc, #384]	; (800a984 <_scanf_float+0x300>)
 800a802:	400a      	ands	r2, r1
 800a804:	603a      	str	r2, [r7, #0]
 800a806:	2201      	movs	r2, #1
 800a808:	9203      	str	r2, [sp, #12]
 800a80a:	e7e3      	b.n	800a7d4 <_scanf_float+0x150>
 800a80c:	9a03      	ldr	r2, [sp, #12]
 800a80e:	2a02      	cmp	r2, #2
 800a810:	d059      	beq.n	800a8c6 <_scanf_float+0x242>
 800a812:	2c01      	cmp	r4, #1
 800a814:	d002      	beq.n	800a81c <_scanf_float+0x198>
 800a816:	2c04      	cmp	r4, #4
 800a818:	d000      	beq.n	800a81c <_scanf_float+0x198>
 800a81a:	e764      	b.n	800a6e6 <_scanf_float+0x62>
 800a81c:	3401      	adds	r4, #1
 800a81e:	b2e4      	uxtb	r4, r4
 800a820:	e7d8      	b.n	800a7d4 <_scanf_float+0x150>
 800a822:	9a03      	ldr	r2, [sp, #12]
 800a824:	2a01      	cmp	r2, #1
 800a826:	d000      	beq.n	800a82a <_scanf_float+0x1a6>
 800a828:	e75d      	b.n	800a6e6 <_scanf_float+0x62>
 800a82a:	2202      	movs	r2, #2
 800a82c:	e7ec      	b.n	800a808 <_scanf_float+0x184>
 800a82e:	2c00      	cmp	r4, #0
 800a830:	d110      	bne.n	800a854 <_scanf_float+0x1d0>
 800a832:	9a01      	ldr	r2, [sp, #4]
 800a834:	2a00      	cmp	r2, #0
 800a836:	d000      	beq.n	800a83a <_scanf_float+0x1b6>
 800a838:	e758      	b.n	800a6ec <_scanf_float+0x68>
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	21e0      	movs	r1, #224	; 0xe0
 800a83e:	0010      	movs	r0, r2
 800a840:	00c9      	lsls	r1, r1, #3
 800a842:	4008      	ands	r0, r1
 800a844:	4288      	cmp	r0, r1
 800a846:	d000      	beq.n	800a84a <_scanf_float+0x1c6>
 800a848:	e754      	b.n	800a6f4 <_scanf_float+0x70>
 800a84a:	494e      	ldr	r1, [pc, #312]	; (800a984 <_scanf_float+0x300>)
 800a84c:	3401      	adds	r4, #1
 800a84e:	400a      	ands	r2, r1
 800a850:	603a      	str	r2, [r7, #0]
 800a852:	e7bf      	b.n	800a7d4 <_scanf_float+0x150>
 800a854:	21fd      	movs	r1, #253	; 0xfd
 800a856:	1ee2      	subs	r2, r4, #3
 800a858:	420a      	tst	r2, r1
 800a85a:	d000      	beq.n	800a85e <_scanf_float+0x1da>
 800a85c:	e743      	b.n	800a6e6 <_scanf_float+0x62>
 800a85e:	e7dd      	b.n	800a81c <_scanf_float+0x198>
 800a860:	2c02      	cmp	r4, #2
 800a862:	d000      	beq.n	800a866 <_scanf_float+0x1e2>
 800a864:	e73f      	b.n	800a6e6 <_scanf_float+0x62>
 800a866:	2403      	movs	r4, #3
 800a868:	e7b4      	b.n	800a7d4 <_scanf_float+0x150>
 800a86a:	2c06      	cmp	r4, #6
 800a86c:	d000      	beq.n	800a870 <_scanf_float+0x1ec>
 800a86e:	e73a      	b.n	800a6e6 <_scanf_float+0x62>
 800a870:	2407      	movs	r4, #7
 800a872:	e7af      	b.n	800a7d4 <_scanf_float+0x150>
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	0591      	lsls	r1, r2, #22
 800a878:	d400      	bmi.n	800a87c <_scanf_float+0x1f8>
 800a87a:	e734      	b.n	800a6e6 <_scanf_float+0x62>
 800a87c:	4942      	ldr	r1, [pc, #264]	; (800a988 <_scanf_float+0x304>)
 800a87e:	400a      	ands	r2, r1
 800a880:	603a      	str	r2, [r7, #0]
 800a882:	9a01      	ldr	r2, [sp, #4]
 800a884:	9205      	str	r2, [sp, #20]
 800a886:	e7a5      	b.n	800a7d4 <_scanf_float+0x150>
 800a888:	21a0      	movs	r1, #160	; 0xa0
 800a88a:	2080      	movs	r0, #128	; 0x80
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	00c9      	lsls	r1, r1, #3
 800a890:	4011      	ands	r1, r2
 800a892:	00c0      	lsls	r0, r0, #3
 800a894:	4281      	cmp	r1, r0
 800a896:	d006      	beq.n	800a8a6 <_scanf_float+0x222>
 800a898:	4202      	tst	r2, r0
 800a89a:	d100      	bne.n	800a89e <_scanf_float+0x21a>
 800a89c:	e723      	b.n	800a6e6 <_scanf_float+0x62>
 800a89e:	9901      	ldr	r1, [sp, #4]
 800a8a0:	2900      	cmp	r1, #0
 800a8a2:	d100      	bne.n	800a8a6 <_scanf_float+0x222>
 800a8a4:	e726      	b.n	800a6f4 <_scanf_float+0x70>
 800a8a6:	0591      	lsls	r1, r2, #22
 800a8a8:	d404      	bmi.n	800a8b4 <_scanf_float+0x230>
 800a8aa:	9901      	ldr	r1, [sp, #4]
 800a8ac:	9805      	ldr	r0, [sp, #20]
 800a8ae:	9509      	str	r5, [sp, #36]	; 0x24
 800a8b0:	1a09      	subs	r1, r1, r0
 800a8b2:	9108      	str	r1, [sp, #32]
 800a8b4:	4933      	ldr	r1, [pc, #204]	; (800a984 <_scanf_float+0x300>)
 800a8b6:	400a      	ands	r2, r1
 800a8b8:	21c0      	movs	r1, #192	; 0xc0
 800a8ba:	0049      	lsls	r1, r1, #1
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	603a      	str	r2, [r7, #0]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	9201      	str	r2, [sp, #4]
 800a8c4:	e786      	b.n	800a7d4 <_scanf_float+0x150>
 800a8c6:	2203      	movs	r2, #3
 800a8c8:	e79e      	b.n	800a808 <_scanf_float+0x184>
 800a8ca:	23c0      	movs	r3, #192	; 0xc0
 800a8cc:	005b      	lsls	r3, r3, #1
 800a8ce:	0031      	movs	r1, r6
 800a8d0:	58fb      	ldr	r3, [r7, r3]
 800a8d2:	9802      	ldr	r0, [sp, #8]
 800a8d4:	4798      	blx	r3
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d100      	bne.n	800a8dc <_scanf_float+0x258>
 800a8da:	e6f6      	b.n	800a6ca <_scanf_float+0x46>
 800a8dc:	e703      	b.n	800a6e6 <_scanf_float+0x62>
 800a8de:	3d01      	subs	r5, #1
 800a8e0:	593b      	ldr	r3, [r7, r4]
 800a8e2:	0032      	movs	r2, r6
 800a8e4:	7829      	ldrb	r1, [r5, #0]
 800a8e6:	9802      	ldr	r0, [sp, #8]
 800a8e8:	4798      	blx	r3
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	613b      	str	r3, [r7, #16]
 800a8f0:	e707      	b.n	800a702 <_scanf_float+0x7e>
 800a8f2:	1e63      	subs	r3, r4, #1
 800a8f4:	2b06      	cmp	r3, #6
 800a8f6:	d80e      	bhi.n	800a916 <_scanf_float+0x292>
 800a8f8:	9503      	str	r5, [sp, #12]
 800a8fa:	2c02      	cmp	r4, #2
 800a8fc:	d920      	bls.n	800a940 <_scanf_float+0x2bc>
 800a8fe:	1b63      	subs	r3, r4, r5
 800a900:	b2db      	uxtb	r3, r3
 800a902:	9306      	str	r3, [sp, #24]
 800a904:	9b03      	ldr	r3, [sp, #12]
 800a906:	9a06      	ldr	r2, [sp, #24]
 800a908:	189b      	adds	r3, r3, r2
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d827      	bhi.n	800a960 <_scanf_float+0x2dc>
 800a910:	3c03      	subs	r4, #3
 800a912:	b2e4      	uxtb	r4, r4
 800a914:	1b2d      	subs	r5, r5, r4
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	05da      	lsls	r2, r3, #23
 800a91a:	d552      	bpl.n	800a9c2 <_scanf_float+0x33e>
 800a91c:	055b      	lsls	r3, r3, #21
 800a91e:	d535      	bpl.n	800a98c <_scanf_float+0x308>
 800a920:	24be      	movs	r4, #190	; 0xbe
 800a922:	0064      	lsls	r4, r4, #1
 800a924:	9b04      	ldr	r3, [sp, #16]
 800a926:	429d      	cmp	r5, r3
 800a928:	d800      	bhi.n	800a92c <_scanf_float+0x2a8>
 800a92a:	e6ee      	b.n	800a70a <_scanf_float+0x86>
 800a92c:	3d01      	subs	r5, #1
 800a92e:	593b      	ldr	r3, [r7, r4]
 800a930:	0032      	movs	r2, r6
 800a932:	7829      	ldrb	r1, [r5, #0]
 800a934:	9802      	ldr	r0, [sp, #8]
 800a936:	4798      	blx	r3
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	3b01      	subs	r3, #1
 800a93c:	613b      	str	r3, [r7, #16]
 800a93e:	e7f1      	b.n	800a924 <_scanf_float+0x2a0>
 800a940:	24be      	movs	r4, #190	; 0xbe
 800a942:	0064      	lsls	r4, r4, #1
 800a944:	9b04      	ldr	r3, [sp, #16]
 800a946:	429d      	cmp	r5, r3
 800a948:	d800      	bhi.n	800a94c <_scanf_float+0x2c8>
 800a94a:	e6de      	b.n	800a70a <_scanf_float+0x86>
 800a94c:	3d01      	subs	r5, #1
 800a94e:	593b      	ldr	r3, [r7, r4]
 800a950:	0032      	movs	r2, r6
 800a952:	7829      	ldrb	r1, [r5, #0]
 800a954:	9802      	ldr	r0, [sp, #8]
 800a956:	4798      	blx	r3
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	613b      	str	r3, [r7, #16]
 800a95e:	e7f1      	b.n	800a944 <_scanf_float+0x2c0>
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	0032      	movs	r2, r6
 800a964:	3b01      	subs	r3, #1
 800a966:	7819      	ldrb	r1, [r3, #0]
 800a968:	9303      	str	r3, [sp, #12]
 800a96a:	23be      	movs	r3, #190	; 0xbe
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	58fb      	ldr	r3, [r7, r3]
 800a970:	9802      	ldr	r0, [sp, #8]
 800a972:	4798      	blx	r3
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	3b01      	subs	r3, #1
 800a978:	613b      	str	r3, [r7, #16]
 800a97a:	e7c3      	b.n	800a904 <_scanf_float+0x280>
 800a97c:	fffffeff 	.word	0xfffffeff
 800a980:	fffffe7f 	.word	0xfffffe7f
 800a984:	fffff87f 	.word	0xfffff87f
 800a988:	fffffd7f 	.word	0xfffffd7f
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	1e6c      	subs	r4, r5, #1
 800a990:	7821      	ldrb	r1, [r4, #0]
 800a992:	3b01      	subs	r3, #1
 800a994:	613b      	str	r3, [r7, #16]
 800a996:	2965      	cmp	r1, #101	; 0x65
 800a998:	d00c      	beq.n	800a9b4 <_scanf_float+0x330>
 800a99a:	2945      	cmp	r1, #69	; 0x45
 800a99c:	d00a      	beq.n	800a9b4 <_scanf_float+0x330>
 800a99e:	23be      	movs	r3, #190	; 0xbe
 800a9a0:	005b      	lsls	r3, r3, #1
 800a9a2:	58fb      	ldr	r3, [r7, r3]
 800a9a4:	0032      	movs	r2, r6
 800a9a6:	9802      	ldr	r0, [sp, #8]
 800a9a8:	4798      	blx	r3
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	1eac      	subs	r4, r5, #2
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	7821      	ldrb	r1, [r4, #0]
 800a9b2:	613b      	str	r3, [r7, #16]
 800a9b4:	23be      	movs	r3, #190	; 0xbe
 800a9b6:	005b      	lsls	r3, r3, #1
 800a9b8:	0032      	movs	r2, r6
 800a9ba:	58fb      	ldr	r3, [r7, r3]
 800a9bc:	9802      	ldr	r0, [sp, #8]
 800a9be:	4798      	blx	r3
 800a9c0:	0025      	movs	r5, r4
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	2310      	movs	r3, #16
 800a9c6:	0011      	movs	r1, r2
 800a9c8:	4019      	ands	r1, r3
 800a9ca:	9103      	str	r1, [sp, #12]
 800a9cc:	421a      	tst	r2, r3
 800a9ce:	d15b      	bne.n	800aa88 <_scanf_float+0x404>
 800a9d0:	22c0      	movs	r2, #192	; 0xc0
 800a9d2:	7029      	strb	r1, [r5, #0]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	00d2      	lsls	r2, r2, #3
 800a9d8:	4013      	ands	r3, r2
 800a9da:	2280      	movs	r2, #128	; 0x80
 800a9dc:	00d2      	lsls	r2, r2, #3
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d11d      	bne.n	800aa1e <_scanf_float+0x39a>
 800a9e2:	9b05      	ldr	r3, [sp, #20]
 800a9e4:	9a01      	ldr	r2, [sp, #4]
 800a9e6:	9901      	ldr	r1, [sp, #4]
 800a9e8:	1a9a      	subs	r2, r3, r2
 800a9ea:	428b      	cmp	r3, r1
 800a9ec:	d124      	bne.n	800aa38 <_scanf_float+0x3b4>
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	9904      	ldr	r1, [sp, #16]
 800a9f2:	9802      	ldr	r0, [sp, #8]
 800a9f4:	f002 fccc 	bl	800d390 <_strtod_r>
 800a9f8:	9b07      	ldr	r3, [sp, #28]
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	0004      	movs	r4, r0
 800a9fe:	000d      	movs	r5, r1
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	0791      	lsls	r1, r2, #30
 800aa04:	d525      	bpl.n	800aa52 <_scanf_float+0x3ce>
 800aa06:	9907      	ldr	r1, [sp, #28]
 800aa08:	1d1a      	adds	r2, r3, #4
 800aa0a:	600a      	str	r2, [r1, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	601c      	str	r4, [r3, #0]
 800aa10:	605d      	str	r5, [r3, #4]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	3301      	adds	r3, #1
 800aa16:	60fb      	str	r3, [r7, #12]
 800aa18:	9803      	ldr	r0, [sp, #12]
 800aa1a:	b00b      	add	sp, #44	; 0x2c
 800aa1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa1e:	9b08      	ldr	r3, [sp, #32]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d0e4      	beq.n	800a9ee <_scanf_float+0x36a>
 800aa24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa26:	9a03      	ldr	r2, [sp, #12]
 800aa28:	1c59      	adds	r1, r3, #1
 800aa2a:	9802      	ldr	r0, [sp, #8]
 800aa2c:	230a      	movs	r3, #10
 800aa2e:	f002 fd3d 	bl	800d4ac <_strtol_r>
 800aa32:	9b08      	ldr	r3, [sp, #32]
 800aa34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aa36:	1ac2      	subs	r2, r0, r3
 800aa38:	003b      	movs	r3, r7
 800aa3a:	3370      	adds	r3, #112	; 0x70
 800aa3c:	33ff      	adds	r3, #255	; 0xff
 800aa3e:	429d      	cmp	r5, r3
 800aa40:	d302      	bcc.n	800aa48 <_scanf_float+0x3c4>
 800aa42:	003d      	movs	r5, r7
 800aa44:	356f      	adds	r5, #111	; 0x6f
 800aa46:	35ff      	adds	r5, #255	; 0xff
 800aa48:	0028      	movs	r0, r5
 800aa4a:	4910      	ldr	r1, [pc, #64]	; (800aa8c <_scanf_float+0x408>)
 800aa4c:	f000 f91a 	bl	800ac84 <siprintf>
 800aa50:	e7cd      	b.n	800a9ee <_scanf_float+0x36a>
 800aa52:	1d19      	adds	r1, r3, #4
 800aa54:	0752      	lsls	r2, r2, #29
 800aa56:	d502      	bpl.n	800aa5e <_scanf_float+0x3da>
 800aa58:	9a07      	ldr	r2, [sp, #28]
 800aa5a:	6011      	str	r1, [r2, #0]
 800aa5c:	e7d6      	b.n	800aa0c <_scanf_float+0x388>
 800aa5e:	9a07      	ldr	r2, [sp, #28]
 800aa60:	0020      	movs	r0, r4
 800aa62:	6011      	str	r1, [r2, #0]
 800aa64:	681e      	ldr	r6, [r3, #0]
 800aa66:	0022      	movs	r2, r4
 800aa68:	002b      	movs	r3, r5
 800aa6a:	0029      	movs	r1, r5
 800aa6c:	f7f7 ff46 	bl	80028fc <__aeabi_dcmpun>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d004      	beq.n	800aa7e <_scanf_float+0x3fa>
 800aa74:	4806      	ldr	r0, [pc, #24]	; (800aa90 <_scanf_float+0x40c>)
 800aa76:	f000 fa03 	bl	800ae80 <nanf>
 800aa7a:	6030      	str	r0, [r6, #0]
 800aa7c:	e7c9      	b.n	800aa12 <_scanf_float+0x38e>
 800aa7e:	0020      	movs	r0, r4
 800aa80:	0029      	movs	r1, r5
 800aa82:	f7f8 f82d 	bl	8002ae0 <__aeabi_d2f>
 800aa86:	e7f8      	b.n	800aa7a <_scanf_float+0x3f6>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	e63f      	b.n	800a70c <_scanf_float+0x88>
 800aa8c:	0800ed5c 	.word	0x0800ed5c
 800aa90:	0800f0ed 	.word	0x0800f0ed

0800aa94 <std>:
 800aa94:	2300      	movs	r3, #0
 800aa96:	b510      	push	{r4, lr}
 800aa98:	0004      	movs	r4, r0
 800aa9a:	6003      	str	r3, [r0, #0]
 800aa9c:	6043      	str	r3, [r0, #4]
 800aa9e:	6083      	str	r3, [r0, #8]
 800aaa0:	8181      	strh	r1, [r0, #12]
 800aaa2:	6643      	str	r3, [r0, #100]	; 0x64
 800aaa4:	81c2      	strh	r2, [r0, #14]
 800aaa6:	6103      	str	r3, [r0, #16]
 800aaa8:	6143      	str	r3, [r0, #20]
 800aaaa:	6183      	str	r3, [r0, #24]
 800aaac:	0019      	movs	r1, r3
 800aaae:	2208      	movs	r2, #8
 800aab0:	305c      	adds	r0, #92	; 0x5c
 800aab2:	f000 f953 	bl	800ad5c <memset>
 800aab6:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <std+0x50>)
 800aab8:	6224      	str	r4, [r4, #32]
 800aaba:	6263      	str	r3, [r4, #36]	; 0x24
 800aabc:	4b0a      	ldr	r3, [pc, #40]	; (800aae8 <std+0x54>)
 800aabe:	62a3      	str	r3, [r4, #40]	; 0x28
 800aac0:	4b0a      	ldr	r3, [pc, #40]	; (800aaec <std+0x58>)
 800aac2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aac4:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <std+0x5c>)
 800aac6:	6323      	str	r3, [r4, #48]	; 0x30
 800aac8:	4b0a      	ldr	r3, [pc, #40]	; (800aaf4 <std+0x60>)
 800aaca:	429c      	cmp	r4, r3
 800aacc:	d005      	beq.n	800aada <std+0x46>
 800aace:	4b0a      	ldr	r3, [pc, #40]	; (800aaf8 <std+0x64>)
 800aad0:	429c      	cmp	r4, r3
 800aad2:	d002      	beq.n	800aada <std+0x46>
 800aad4:	4b09      	ldr	r3, [pc, #36]	; (800aafc <std+0x68>)
 800aad6:	429c      	cmp	r4, r3
 800aad8:	d103      	bne.n	800aae2 <std+0x4e>
 800aada:	0020      	movs	r0, r4
 800aadc:	3058      	adds	r0, #88	; 0x58
 800aade:	f000 f9c1 	bl	800ae64 <__retarget_lock_init_recursive>
 800aae2:	bd10      	pop	{r4, pc}
 800aae4:	0800acc5 	.word	0x0800acc5
 800aae8:	0800aced 	.word	0x0800aced
 800aaec:	0800ad25 	.word	0x0800ad25
 800aaf0:	0800ad51 	.word	0x0800ad51
 800aaf4:	20000524 	.word	0x20000524
 800aaf8:	2000058c 	.word	0x2000058c
 800aafc:	200005f4 	.word	0x200005f4

0800ab00 <stdio_exit_handler>:
 800ab00:	b510      	push	{r4, lr}
 800ab02:	4a03      	ldr	r2, [pc, #12]	; (800ab10 <stdio_exit_handler+0x10>)
 800ab04:	4903      	ldr	r1, [pc, #12]	; (800ab14 <stdio_exit_handler+0x14>)
 800ab06:	4804      	ldr	r0, [pc, #16]	; (800ab18 <stdio_exit_handler+0x18>)
 800ab08:	f000 f86c 	bl	800abe4 <_fwalk_sglue>
 800ab0c:	bd10      	pop	{r4, pc}
 800ab0e:	46c0      	nop			; (mov r8, r8)
 800ab10:	20000024 	.word	0x20000024
 800ab14:	0800d88d 	.word	0x0800d88d
 800ab18:	20000030 	.word	0x20000030

0800ab1c <cleanup_stdio>:
 800ab1c:	6841      	ldr	r1, [r0, #4]
 800ab1e:	4b0b      	ldr	r3, [pc, #44]	; (800ab4c <cleanup_stdio+0x30>)
 800ab20:	b510      	push	{r4, lr}
 800ab22:	0004      	movs	r4, r0
 800ab24:	4299      	cmp	r1, r3
 800ab26:	d001      	beq.n	800ab2c <cleanup_stdio+0x10>
 800ab28:	f002 feb0 	bl	800d88c <_fflush_r>
 800ab2c:	68a1      	ldr	r1, [r4, #8]
 800ab2e:	4b08      	ldr	r3, [pc, #32]	; (800ab50 <cleanup_stdio+0x34>)
 800ab30:	4299      	cmp	r1, r3
 800ab32:	d002      	beq.n	800ab3a <cleanup_stdio+0x1e>
 800ab34:	0020      	movs	r0, r4
 800ab36:	f002 fea9 	bl	800d88c <_fflush_r>
 800ab3a:	68e1      	ldr	r1, [r4, #12]
 800ab3c:	4b05      	ldr	r3, [pc, #20]	; (800ab54 <cleanup_stdio+0x38>)
 800ab3e:	4299      	cmp	r1, r3
 800ab40:	d002      	beq.n	800ab48 <cleanup_stdio+0x2c>
 800ab42:	0020      	movs	r0, r4
 800ab44:	f002 fea2 	bl	800d88c <_fflush_r>
 800ab48:	bd10      	pop	{r4, pc}
 800ab4a:	46c0      	nop			; (mov r8, r8)
 800ab4c:	20000524 	.word	0x20000524
 800ab50:	2000058c 	.word	0x2000058c
 800ab54:	200005f4 	.word	0x200005f4

0800ab58 <global_stdio_init.part.0>:
 800ab58:	b510      	push	{r4, lr}
 800ab5a:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <global_stdio_init.part.0+0x28>)
 800ab5c:	4a09      	ldr	r2, [pc, #36]	; (800ab84 <global_stdio_init.part.0+0x2c>)
 800ab5e:	2104      	movs	r1, #4
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	4809      	ldr	r0, [pc, #36]	; (800ab88 <global_stdio_init.part.0+0x30>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	f7ff ff95 	bl	800aa94 <std>
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	2109      	movs	r1, #9
 800ab6e:	4807      	ldr	r0, [pc, #28]	; (800ab8c <global_stdio_init.part.0+0x34>)
 800ab70:	f7ff ff90 	bl	800aa94 <std>
 800ab74:	2202      	movs	r2, #2
 800ab76:	2112      	movs	r1, #18
 800ab78:	4805      	ldr	r0, [pc, #20]	; (800ab90 <global_stdio_init.part.0+0x38>)
 800ab7a:	f7ff ff8b 	bl	800aa94 <std>
 800ab7e:	bd10      	pop	{r4, pc}
 800ab80:	2000065c 	.word	0x2000065c
 800ab84:	0800ab01 	.word	0x0800ab01
 800ab88:	20000524 	.word	0x20000524
 800ab8c:	2000058c 	.word	0x2000058c
 800ab90:	200005f4 	.word	0x200005f4

0800ab94 <__sfp_lock_acquire>:
 800ab94:	b510      	push	{r4, lr}
 800ab96:	4802      	ldr	r0, [pc, #8]	; (800aba0 <__sfp_lock_acquire+0xc>)
 800ab98:	f000 f965 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800ab9c:	bd10      	pop	{r4, pc}
 800ab9e:	46c0      	nop			; (mov r8, r8)
 800aba0:	20000665 	.word	0x20000665

0800aba4 <__sfp_lock_release>:
 800aba4:	b510      	push	{r4, lr}
 800aba6:	4802      	ldr	r0, [pc, #8]	; (800abb0 <__sfp_lock_release+0xc>)
 800aba8:	f000 f95e 	bl	800ae68 <__retarget_lock_release_recursive>
 800abac:	bd10      	pop	{r4, pc}
 800abae:	46c0      	nop			; (mov r8, r8)
 800abb0:	20000665 	.word	0x20000665

0800abb4 <__sinit>:
 800abb4:	b510      	push	{r4, lr}
 800abb6:	0004      	movs	r4, r0
 800abb8:	f7ff ffec 	bl	800ab94 <__sfp_lock_acquire>
 800abbc:	6a23      	ldr	r3, [r4, #32]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d002      	beq.n	800abc8 <__sinit+0x14>
 800abc2:	f7ff ffef 	bl	800aba4 <__sfp_lock_release>
 800abc6:	bd10      	pop	{r4, pc}
 800abc8:	4b04      	ldr	r3, [pc, #16]	; (800abdc <__sinit+0x28>)
 800abca:	6223      	str	r3, [r4, #32]
 800abcc:	4b04      	ldr	r3, [pc, #16]	; (800abe0 <__sinit+0x2c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1f6      	bne.n	800abc2 <__sinit+0xe>
 800abd4:	f7ff ffc0 	bl	800ab58 <global_stdio_init.part.0>
 800abd8:	e7f3      	b.n	800abc2 <__sinit+0xe>
 800abda:	46c0      	nop			; (mov r8, r8)
 800abdc:	0800ab1d 	.word	0x0800ab1d
 800abe0:	2000065c 	.word	0x2000065c

0800abe4 <_fwalk_sglue>:
 800abe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abe6:	0014      	movs	r4, r2
 800abe8:	2600      	movs	r6, #0
 800abea:	9000      	str	r0, [sp, #0]
 800abec:	9101      	str	r1, [sp, #4]
 800abee:	68a5      	ldr	r5, [r4, #8]
 800abf0:	6867      	ldr	r7, [r4, #4]
 800abf2:	3f01      	subs	r7, #1
 800abf4:	d504      	bpl.n	800ac00 <_fwalk_sglue+0x1c>
 800abf6:	6824      	ldr	r4, [r4, #0]
 800abf8:	2c00      	cmp	r4, #0
 800abfa:	d1f8      	bne.n	800abee <_fwalk_sglue+0xa>
 800abfc:	0030      	movs	r0, r6
 800abfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac00:	89ab      	ldrh	r3, [r5, #12]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d908      	bls.n	800ac18 <_fwalk_sglue+0x34>
 800ac06:	220e      	movs	r2, #14
 800ac08:	5eab      	ldrsh	r3, [r5, r2]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	d004      	beq.n	800ac18 <_fwalk_sglue+0x34>
 800ac0e:	0029      	movs	r1, r5
 800ac10:	9800      	ldr	r0, [sp, #0]
 800ac12:	9b01      	ldr	r3, [sp, #4]
 800ac14:	4798      	blx	r3
 800ac16:	4306      	orrs	r6, r0
 800ac18:	3568      	adds	r5, #104	; 0x68
 800ac1a:	e7ea      	b.n	800abf2 <_fwalk_sglue+0xe>

0800ac1c <sniprintf>:
 800ac1c:	b40c      	push	{r2, r3}
 800ac1e:	b530      	push	{r4, r5, lr}
 800ac20:	4b17      	ldr	r3, [pc, #92]	; (800ac80 <sniprintf+0x64>)
 800ac22:	000c      	movs	r4, r1
 800ac24:	681d      	ldr	r5, [r3, #0]
 800ac26:	b09d      	sub	sp, #116	; 0x74
 800ac28:	2900      	cmp	r1, #0
 800ac2a:	da08      	bge.n	800ac3e <sniprintf+0x22>
 800ac2c:	238b      	movs	r3, #139	; 0x8b
 800ac2e:	2001      	movs	r0, #1
 800ac30:	602b      	str	r3, [r5, #0]
 800ac32:	4240      	negs	r0, r0
 800ac34:	b01d      	add	sp, #116	; 0x74
 800ac36:	bc30      	pop	{r4, r5}
 800ac38:	bc08      	pop	{r3}
 800ac3a:	b002      	add	sp, #8
 800ac3c:	4718      	bx	r3
 800ac3e:	2382      	movs	r3, #130	; 0x82
 800ac40:	466a      	mov	r2, sp
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	8293      	strh	r3, [r2, #20]
 800ac46:	2300      	movs	r3, #0
 800ac48:	9002      	str	r0, [sp, #8]
 800ac4a:	9006      	str	r0, [sp, #24]
 800ac4c:	4299      	cmp	r1, r3
 800ac4e:	d000      	beq.n	800ac52 <sniprintf+0x36>
 800ac50:	1e4b      	subs	r3, r1, #1
 800ac52:	9304      	str	r3, [sp, #16]
 800ac54:	9307      	str	r3, [sp, #28]
 800ac56:	2301      	movs	r3, #1
 800ac58:	466a      	mov	r2, sp
 800ac5a:	425b      	negs	r3, r3
 800ac5c:	82d3      	strh	r3, [r2, #22]
 800ac5e:	0028      	movs	r0, r5
 800ac60:	ab21      	add	r3, sp, #132	; 0x84
 800ac62:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac64:	a902      	add	r1, sp, #8
 800ac66:	9301      	str	r3, [sp, #4]
 800ac68:	f002 fc86 	bl	800d578 <_svfiprintf_r>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	da01      	bge.n	800ac74 <sniprintf+0x58>
 800ac70:	238b      	movs	r3, #139	; 0x8b
 800ac72:	602b      	str	r3, [r5, #0]
 800ac74:	2c00      	cmp	r4, #0
 800ac76:	d0dd      	beq.n	800ac34 <sniprintf+0x18>
 800ac78:	2200      	movs	r2, #0
 800ac7a:	9b02      	ldr	r3, [sp, #8]
 800ac7c:	701a      	strb	r2, [r3, #0]
 800ac7e:	e7d9      	b.n	800ac34 <sniprintf+0x18>
 800ac80:	2000007c 	.word	0x2000007c

0800ac84 <siprintf>:
 800ac84:	b40e      	push	{r1, r2, r3}
 800ac86:	b500      	push	{lr}
 800ac88:	490b      	ldr	r1, [pc, #44]	; (800acb8 <siprintf+0x34>)
 800ac8a:	b09c      	sub	sp, #112	; 0x70
 800ac8c:	ab1d      	add	r3, sp, #116	; 0x74
 800ac8e:	9002      	str	r0, [sp, #8]
 800ac90:	9006      	str	r0, [sp, #24]
 800ac92:	9107      	str	r1, [sp, #28]
 800ac94:	9104      	str	r1, [sp, #16]
 800ac96:	4809      	ldr	r0, [pc, #36]	; (800acbc <siprintf+0x38>)
 800ac98:	4909      	ldr	r1, [pc, #36]	; (800acc0 <siprintf+0x3c>)
 800ac9a:	cb04      	ldmia	r3!, {r2}
 800ac9c:	9105      	str	r1, [sp, #20]
 800ac9e:	6800      	ldr	r0, [r0, #0]
 800aca0:	a902      	add	r1, sp, #8
 800aca2:	9301      	str	r3, [sp, #4]
 800aca4:	f002 fc68 	bl	800d578 <_svfiprintf_r>
 800aca8:	2200      	movs	r2, #0
 800acaa:	9b02      	ldr	r3, [sp, #8]
 800acac:	701a      	strb	r2, [r3, #0]
 800acae:	b01c      	add	sp, #112	; 0x70
 800acb0:	bc08      	pop	{r3}
 800acb2:	b003      	add	sp, #12
 800acb4:	4718      	bx	r3
 800acb6:	46c0      	nop			; (mov r8, r8)
 800acb8:	7fffffff 	.word	0x7fffffff
 800acbc:	2000007c 	.word	0x2000007c
 800acc0:	ffff0208 	.word	0xffff0208

0800acc4 <__sread>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	000c      	movs	r4, r1
 800acc8:	250e      	movs	r5, #14
 800acca:	5f49      	ldrsh	r1, [r1, r5]
 800accc:	f000 f878 	bl	800adc0 <_read_r>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	db03      	blt.n	800acdc <__sread+0x18>
 800acd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800acd6:	181b      	adds	r3, r3, r0
 800acd8:	6563      	str	r3, [r4, #84]	; 0x54
 800acda:	bd70      	pop	{r4, r5, r6, pc}
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	4a02      	ldr	r2, [pc, #8]	; (800ace8 <__sread+0x24>)
 800ace0:	4013      	ands	r3, r2
 800ace2:	81a3      	strh	r3, [r4, #12]
 800ace4:	e7f9      	b.n	800acda <__sread+0x16>
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	ffffefff 	.word	0xffffefff

0800acec <__swrite>:
 800acec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acee:	001f      	movs	r7, r3
 800acf0:	898b      	ldrh	r3, [r1, #12]
 800acf2:	0005      	movs	r5, r0
 800acf4:	000c      	movs	r4, r1
 800acf6:	0016      	movs	r6, r2
 800acf8:	05db      	lsls	r3, r3, #23
 800acfa:	d505      	bpl.n	800ad08 <__swrite+0x1c>
 800acfc:	230e      	movs	r3, #14
 800acfe:	5ec9      	ldrsh	r1, [r1, r3]
 800ad00:	2200      	movs	r2, #0
 800ad02:	2302      	movs	r3, #2
 800ad04:	f000 f848 	bl	800ad98 <_lseek_r>
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	4a05      	ldr	r2, [pc, #20]	; (800ad20 <__swrite+0x34>)
 800ad0c:	0028      	movs	r0, r5
 800ad0e:	4013      	ands	r3, r2
 800ad10:	81a3      	strh	r3, [r4, #12]
 800ad12:	0032      	movs	r2, r6
 800ad14:	230e      	movs	r3, #14
 800ad16:	5ee1      	ldrsh	r1, [r4, r3]
 800ad18:	003b      	movs	r3, r7
 800ad1a:	f000 f865 	bl	800ade8 <_write_r>
 800ad1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad20:	ffffefff 	.word	0xffffefff

0800ad24 <__sseek>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	000c      	movs	r4, r1
 800ad28:	250e      	movs	r5, #14
 800ad2a:	5f49      	ldrsh	r1, [r1, r5]
 800ad2c:	f000 f834 	bl	800ad98 <_lseek_r>
 800ad30:	89a3      	ldrh	r3, [r4, #12]
 800ad32:	1c42      	adds	r2, r0, #1
 800ad34:	d103      	bne.n	800ad3e <__sseek+0x1a>
 800ad36:	4a05      	ldr	r2, [pc, #20]	; (800ad4c <__sseek+0x28>)
 800ad38:	4013      	ands	r3, r2
 800ad3a:	81a3      	strh	r3, [r4, #12]
 800ad3c:	bd70      	pop	{r4, r5, r6, pc}
 800ad3e:	2280      	movs	r2, #128	; 0x80
 800ad40:	0152      	lsls	r2, r2, #5
 800ad42:	4313      	orrs	r3, r2
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	6560      	str	r0, [r4, #84]	; 0x54
 800ad48:	e7f8      	b.n	800ad3c <__sseek+0x18>
 800ad4a:	46c0      	nop			; (mov r8, r8)
 800ad4c:	ffffefff 	.word	0xffffefff

0800ad50 <__sclose>:
 800ad50:	b510      	push	{r4, lr}
 800ad52:	230e      	movs	r3, #14
 800ad54:	5ec9      	ldrsh	r1, [r1, r3]
 800ad56:	f000 f80d 	bl	800ad74 <_close_r>
 800ad5a:	bd10      	pop	{r4, pc}

0800ad5c <memset>:
 800ad5c:	0003      	movs	r3, r0
 800ad5e:	1882      	adds	r2, r0, r2
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d100      	bne.n	800ad66 <memset+0xa>
 800ad64:	4770      	bx	lr
 800ad66:	7019      	strb	r1, [r3, #0]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	e7f9      	b.n	800ad60 <memset+0x4>

0800ad6c <_localeconv_r>:
 800ad6c:	4800      	ldr	r0, [pc, #0]	; (800ad70 <_localeconv_r+0x4>)
 800ad6e:	4770      	bx	lr
 800ad70:	20000170 	.word	0x20000170

0800ad74 <_close_r>:
 800ad74:	2300      	movs	r3, #0
 800ad76:	b570      	push	{r4, r5, r6, lr}
 800ad78:	4d06      	ldr	r5, [pc, #24]	; (800ad94 <_close_r+0x20>)
 800ad7a:	0004      	movs	r4, r0
 800ad7c:	0008      	movs	r0, r1
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	f7f9 fb78 	bl	8004474 <_close>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d103      	bne.n	800ad90 <_close_r+0x1c>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d000      	beq.n	800ad90 <_close_r+0x1c>
 800ad8e:	6023      	str	r3, [r4, #0]
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
 800ad92:	46c0      	nop			; (mov r8, r8)
 800ad94:	20000660 	.word	0x20000660

0800ad98 <_lseek_r>:
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	0004      	movs	r4, r0
 800ad9c:	0008      	movs	r0, r1
 800ad9e:	0011      	movs	r1, r2
 800ada0:	001a      	movs	r2, r3
 800ada2:	2300      	movs	r3, #0
 800ada4:	4d05      	ldr	r5, [pc, #20]	; (800adbc <_lseek_r+0x24>)
 800ada6:	602b      	str	r3, [r5, #0]
 800ada8:	f7f9 fb85 	bl	80044b6 <_lseek>
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	d103      	bne.n	800adb8 <_lseek_r+0x20>
 800adb0:	682b      	ldr	r3, [r5, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d000      	beq.n	800adb8 <_lseek_r+0x20>
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	bd70      	pop	{r4, r5, r6, pc}
 800adba:	46c0      	nop			; (mov r8, r8)
 800adbc:	20000660 	.word	0x20000660

0800adc0 <_read_r>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	0004      	movs	r4, r0
 800adc4:	0008      	movs	r0, r1
 800adc6:	0011      	movs	r1, r2
 800adc8:	001a      	movs	r2, r3
 800adca:	2300      	movs	r3, #0
 800adcc:	4d05      	ldr	r5, [pc, #20]	; (800ade4 <_read_r+0x24>)
 800adce:	602b      	str	r3, [r5, #0]
 800add0:	f7f9 fb17 	bl	8004402 <_read>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	d103      	bne.n	800ade0 <_read_r+0x20>
 800add8:	682b      	ldr	r3, [r5, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d000      	beq.n	800ade0 <_read_r+0x20>
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	bd70      	pop	{r4, r5, r6, pc}
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	20000660 	.word	0x20000660

0800ade8 <_write_r>:
 800ade8:	b570      	push	{r4, r5, r6, lr}
 800adea:	0004      	movs	r4, r0
 800adec:	0008      	movs	r0, r1
 800adee:	0011      	movs	r1, r2
 800adf0:	001a      	movs	r2, r3
 800adf2:	2300      	movs	r3, #0
 800adf4:	4d05      	ldr	r5, [pc, #20]	; (800ae0c <_write_r+0x24>)
 800adf6:	602b      	str	r3, [r5, #0]
 800adf8:	f7f9 fb20 	bl	800443c <_write>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d103      	bne.n	800ae08 <_write_r+0x20>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d000      	beq.n	800ae08 <_write_r+0x20>
 800ae06:	6023      	str	r3, [r4, #0]
 800ae08:	bd70      	pop	{r4, r5, r6, pc}
 800ae0a:	46c0      	nop			; (mov r8, r8)
 800ae0c:	20000660 	.word	0x20000660

0800ae10 <__errno>:
 800ae10:	4b01      	ldr	r3, [pc, #4]	; (800ae18 <__errno+0x8>)
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	4770      	bx	lr
 800ae16:	46c0      	nop			; (mov r8, r8)
 800ae18:	2000007c 	.word	0x2000007c

0800ae1c <__libc_init_array>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	2600      	movs	r6, #0
 800ae20:	4c0c      	ldr	r4, [pc, #48]	; (800ae54 <__libc_init_array+0x38>)
 800ae22:	4d0d      	ldr	r5, [pc, #52]	; (800ae58 <__libc_init_array+0x3c>)
 800ae24:	1b64      	subs	r4, r4, r5
 800ae26:	10a4      	asrs	r4, r4, #2
 800ae28:	42a6      	cmp	r6, r4
 800ae2a:	d109      	bne.n	800ae40 <__libc_init_array+0x24>
 800ae2c:	2600      	movs	r6, #0
 800ae2e:	f003 fc71 	bl	800e714 <_init>
 800ae32:	4c0a      	ldr	r4, [pc, #40]	; (800ae5c <__libc_init_array+0x40>)
 800ae34:	4d0a      	ldr	r5, [pc, #40]	; (800ae60 <__libc_init_array+0x44>)
 800ae36:	1b64      	subs	r4, r4, r5
 800ae38:	10a4      	asrs	r4, r4, #2
 800ae3a:	42a6      	cmp	r6, r4
 800ae3c:	d105      	bne.n	800ae4a <__libc_init_array+0x2e>
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
 800ae40:	00b3      	lsls	r3, r6, #2
 800ae42:	58eb      	ldr	r3, [r5, r3]
 800ae44:	4798      	blx	r3
 800ae46:	3601      	adds	r6, #1
 800ae48:	e7ee      	b.n	800ae28 <__libc_init_array+0xc>
 800ae4a:	00b3      	lsls	r3, r6, #2
 800ae4c:	58eb      	ldr	r3, [r5, r3]
 800ae4e:	4798      	blx	r3
 800ae50:	3601      	adds	r6, #1
 800ae52:	e7f2      	b.n	800ae3a <__libc_init_array+0x1e>
 800ae54:	0800f158 	.word	0x0800f158
 800ae58:	0800f158 	.word	0x0800f158
 800ae5c:	0800f15c 	.word	0x0800f15c
 800ae60:	0800f158 	.word	0x0800f158

0800ae64 <__retarget_lock_init_recursive>:
 800ae64:	4770      	bx	lr

0800ae66 <__retarget_lock_acquire_recursive>:
 800ae66:	4770      	bx	lr

0800ae68 <__retarget_lock_release_recursive>:
 800ae68:	4770      	bx	lr

0800ae6a <memchr>:
 800ae6a:	b2c9      	uxtb	r1, r1
 800ae6c:	1882      	adds	r2, r0, r2
 800ae6e:	4290      	cmp	r0, r2
 800ae70:	d101      	bne.n	800ae76 <memchr+0xc>
 800ae72:	2000      	movs	r0, #0
 800ae74:	4770      	bx	lr
 800ae76:	7803      	ldrb	r3, [r0, #0]
 800ae78:	428b      	cmp	r3, r1
 800ae7a:	d0fb      	beq.n	800ae74 <memchr+0xa>
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	e7f6      	b.n	800ae6e <memchr+0x4>

0800ae80 <nanf>:
 800ae80:	4800      	ldr	r0, [pc, #0]	; (800ae84 <nanf+0x4>)
 800ae82:	4770      	bx	lr
 800ae84:	7fc00000 	.word	0x7fc00000

0800ae88 <quorem>:
 800ae88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae8a:	6902      	ldr	r2, [r0, #16]
 800ae8c:	690b      	ldr	r3, [r1, #16]
 800ae8e:	b089      	sub	sp, #36	; 0x24
 800ae90:	0007      	movs	r7, r0
 800ae92:	9104      	str	r1, [sp, #16]
 800ae94:	2000      	movs	r0, #0
 800ae96:	429a      	cmp	r2, r3
 800ae98:	db69      	blt.n	800af6e <quorem+0xe6>
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	009c      	lsls	r4, r3, #2
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	000b      	movs	r3, r1
 800aea2:	3314      	adds	r3, #20
 800aea4:	9306      	str	r3, [sp, #24]
 800aea6:	191b      	adds	r3, r3, r4
 800aea8:	9305      	str	r3, [sp, #20]
 800aeaa:	003b      	movs	r3, r7
 800aeac:	3314      	adds	r3, #20
 800aeae:	9303      	str	r3, [sp, #12]
 800aeb0:	191c      	adds	r4, r3, r4
 800aeb2:	9b05      	ldr	r3, [sp, #20]
 800aeb4:	6826      	ldr	r6, [r4, #0]
 800aeb6:	681d      	ldr	r5, [r3, #0]
 800aeb8:	0030      	movs	r0, r6
 800aeba:	3501      	adds	r5, #1
 800aebc:	0029      	movs	r1, r5
 800aebe:	f7f5 f93f 	bl	8000140 <__udivsi3>
 800aec2:	9002      	str	r0, [sp, #8]
 800aec4:	42ae      	cmp	r6, r5
 800aec6:	d329      	bcc.n	800af1c <quorem+0x94>
 800aec8:	9b06      	ldr	r3, [sp, #24]
 800aeca:	2600      	movs	r6, #0
 800aecc:	469c      	mov	ip, r3
 800aece:	9d03      	ldr	r5, [sp, #12]
 800aed0:	9606      	str	r6, [sp, #24]
 800aed2:	4662      	mov	r2, ip
 800aed4:	ca08      	ldmia	r2!, {r3}
 800aed6:	6828      	ldr	r0, [r5, #0]
 800aed8:	4694      	mov	ip, r2
 800aeda:	9a02      	ldr	r2, [sp, #8]
 800aedc:	b299      	uxth	r1, r3
 800aede:	4351      	muls	r1, r2
 800aee0:	0c1b      	lsrs	r3, r3, #16
 800aee2:	4353      	muls	r3, r2
 800aee4:	1989      	adds	r1, r1, r6
 800aee6:	0c0a      	lsrs	r2, r1, #16
 800aee8:	189b      	adds	r3, r3, r2
 800aeea:	9307      	str	r3, [sp, #28]
 800aeec:	0c1e      	lsrs	r6, r3, #16
 800aeee:	9b06      	ldr	r3, [sp, #24]
 800aef0:	b282      	uxth	r2, r0
 800aef2:	18d2      	adds	r2, r2, r3
 800aef4:	466b      	mov	r3, sp
 800aef6:	b289      	uxth	r1, r1
 800aef8:	8b9b      	ldrh	r3, [r3, #28]
 800aefa:	1a52      	subs	r2, r2, r1
 800aefc:	0c01      	lsrs	r1, r0, #16
 800aefe:	1ac9      	subs	r1, r1, r3
 800af00:	1413      	asrs	r3, r2, #16
 800af02:	18cb      	adds	r3, r1, r3
 800af04:	1419      	asrs	r1, r3, #16
 800af06:	b292      	uxth	r2, r2
 800af08:	041b      	lsls	r3, r3, #16
 800af0a:	4313      	orrs	r3, r2
 800af0c:	c508      	stmia	r5!, {r3}
 800af0e:	9b05      	ldr	r3, [sp, #20]
 800af10:	9106      	str	r1, [sp, #24]
 800af12:	4563      	cmp	r3, ip
 800af14:	d2dd      	bcs.n	800aed2 <quorem+0x4a>
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d030      	beq.n	800af7e <quorem+0xf6>
 800af1c:	0038      	movs	r0, r7
 800af1e:	9904      	ldr	r1, [sp, #16]
 800af20:	f001 fa2a 	bl	800c378 <__mcmp>
 800af24:	2800      	cmp	r0, #0
 800af26:	db21      	blt.n	800af6c <quorem+0xe4>
 800af28:	0038      	movs	r0, r7
 800af2a:	2600      	movs	r6, #0
 800af2c:	9b02      	ldr	r3, [sp, #8]
 800af2e:	9c04      	ldr	r4, [sp, #16]
 800af30:	3301      	adds	r3, #1
 800af32:	9302      	str	r3, [sp, #8]
 800af34:	3014      	adds	r0, #20
 800af36:	3414      	adds	r4, #20
 800af38:	6803      	ldr	r3, [r0, #0]
 800af3a:	cc02      	ldmia	r4!, {r1}
 800af3c:	b29d      	uxth	r5, r3
 800af3e:	19ad      	adds	r5, r5, r6
 800af40:	b28a      	uxth	r2, r1
 800af42:	1aaa      	subs	r2, r5, r2
 800af44:	0c09      	lsrs	r1, r1, #16
 800af46:	0c1b      	lsrs	r3, r3, #16
 800af48:	1a5b      	subs	r3, r3, r1
 800af4a:	1411      	asrs	r1, r2, #16
 800af4c:	185b      	adds	r3, r3, r1
 800af4e:	141e      	asrs	r6, r3, #16
 800af50:	b292      	uxth	r2, r2
 800af52:	041b      	lsls	r3, r3, #16
 800af54:	4313      	orrs	r3, r2
 800af56:	c008      	stmia	r0!, {r3}
 800af58:	9b05      	ldr	r3, [sp, #20]
 800af5a:	42a3      	cmp	r3, r4
 800af5c:	d2ec      	bcs.n	800af38 <quorem+0xb0>
 800af5e:	9b01      	ldr	r3, [sp, #4]
 800af60:	9a03      	ldr	r2, [sp, #12]
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	18d3      	adds	r3, r2, r3
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	2a00      	cmp	r2, #0
 800af6a:	d015      	beq.n	800af98 <quorem+0x110>
 800af6c:	9802      	ldr	r0, [sp, #8]
 800af6e:	b009      	add	sp, #36	; 0x24
 800af70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af72:	6823      	ldr	r3, [r4, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d106      	bne.n	800af86 <quorem+0xfe>
 800af78:	9b01      	ldr	r3, [sp, #4]
 800af7a:	3b01      	subs	r3, #1
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	9b03      	ldr	r3, [sp, #12]
 800af80:	3c04      	subs	r4, #4
 800af82:	42a3      	cmp	r3, r4
 800af84:	d3f5      	bcc.n	800af72 <quorem+0xea>
 800af86:	9b01      	ldr	r3, [sp, #4]
 800af88:	613b      	str	r3, [r7, #16]
 800af8a:	e7c7      	b.n	800af1c <quorem+0x94>
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	2a00      	cmp	r2, #0
 800af90:	d106      	bne.n	800afa0 <quorem+0x118>
 800af92:	9a01      	ldr	r2, [sp, #4]
 800af94:	3a01      	subs	r2, #1
 800af96:	9201      	str	r2, [sp, #4]
 800af98:	9a03      	ldr	r2, [sp, #12]
 800af9a:	3b04      	subs	r3, #4
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d3f5      	bcc.n	800af8c <quorem+0x104>
 800afa0:	9b01      	ldr	r3, [sp, #4]
 800afa2:	613b      	str	r3, [r7, #16]
 800afa4:	e7e2      	b.n	800af6c <quorem+0xe4>
	...

0800afa8 <_dtoa_r>:
 800afa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afaa:	0014      	movs	r4, r2
 800afac:	001d      	movs	r5, r3
 800afae:	69c6      	ldr	r6, [r0, #28]
 800afb0:	b09d      	sub	sp, #116	; 0x74
 800afb2:	9408      	str	r4, [sp, #32]
 800afb4:	9509      	str	r5, [sp, #36]	; 0x24
 800afb6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800afb8:	9004      	str	r0, [sp, #16]
 800afba:	2e00      	cmp	r6, #0
 800afbc:	d10f      	bne.n	800afde <_dtoa_r+0x36>
 800afbe:	2010      	movs	r0, #16
 800afc0:	f000 fe4a 	bl	800bc58 <malloc>
 800afc4:	9b04      	ldr	r3, [sp, #16]
 800afc6:	1e02      	subs	r2, r0, #0
 800afc8:	61d8      	str	r0, [r3, #28]
 800afca:	d104      	bne.n	800afd6 <_dtoa_r+0x2e>
 800afcc:	21ef      	movs	r1, #239	; 0xef
 800afce:	4bc6      	ldr	r3, [pc, #792]	; (800b2e8 <_dtoa_r+0x340>)
 800afd0:	48c6      	ldr	r0, [pc, #792]	; (800b2ec <_dtoa_r+0x344>)
 800afd2:	f002 fccd 	bl	800d970 <__assert_func>
 800afd6:	6046      	str	r6, [r0, #4]
 800afd8:	6086      	str	r6, [r0, #8]
 800afda:	6006      	str	r6, [r0, #0]
 800afdc:	60c6      	str	r6, [r0, #12]
 800afde:	9b04      	ldr	r3, [sp, #16]
 800afe0:	69db      	ldr	r3, [r3, #28]
 800afe2:	6819      	ldr	r1, [r3, #0]
 800afe4:	2900      	cmp	r1, #0
 800afe6:	d00b      	beq.n	800b000 <_dtoa_r+0x58>
 800afe8:	685a      	ldr	r2, [r3, #4]
 800afea:	2301      	movs	r3, #1
 800afec:	4093      	lsls	r3, r2
 800afee:	604a      	str	r2, [r1, #4]
 800aff0:	608b      	str	r3, [r1, #8]
 800aff2:	9804      	ldr	r0, [sp, #16]
 800aff4:	f000 ff32 	bl	800be5c <_Bfree>
 800aff8:	2200      	movs	r2, #0
 800affa:	9b04      	ldr	r3, [sp, #16]
 800affc:	69db      	ldr	r3, [r3, #28]
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	2d00      	cmp	r5, #0
 800b002:	da1e      	bge.n	800b042 <_dtoa_r+0x9a>
 800b004:	2301      	movs	r3, #1
 800b006:	603b      	str	r3, [r7, #0]
 800b008:	006b      	lsls	r3, r5, #1
 800b00a:	085b      	lsrs	r3, r3, #1
 800b00c:	9309      	str	r3, [sp, #36]	; 0x24
 800b00e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b010:	4bb7      	ldr	r3, [pc, #732]	; (800b2f0 <_dtoa_r+0x348>)
 800b012:	4ab7      	ldr	r2, [pc, #732]	; (800b2f0 <_dtoa_r+0x348>)
 800b014:	403b      	ands	r3, r7
 800b016:	4293      	cmp	r3, r2
 800b018:	d116      	bne.n	800b048 <_dtoa_r+0xa0>
 800b01a:	4bb6      	ldr	r3, [pc, #728]	; (800b2f4 <_dtoa_r+0x34c>)
 800b01c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b01e:	6013      	str	r3, [r2, #0]
 800b020:	033b      	lsls	r3, r7, #12
 800b022:	0b1b      	lsrs	r3, r3, #12
 800b024:	4323      	orrs	r3, r4
 800b026:	d101      	bne.n	800b02c <_dtoa_r+0x84>
 800b028:	f000 fdb5 	bl	800bb96 <_dtoa_r+0xbee>
 800b02c:	4bb2      	ldr	r3, [pc, #712]	; (800b2f8 <_dtoa_r+0x350>)
 800b02e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b030:	9306      	str	r3, [sp, #24]
 800b032:	2a00      	cmp	r2, #0
 800b034:	d002      	beq.n	800b03c <_dtoa_r+0x94>
 800b036:	4bb1      	ldr	r3, [pc, #708]	; (800b2fc <_dtoa_r+0x354>)
 800b038:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b03a:	6013      	str	r3, [r2, #0]
 800b03c:	9806      	ldr	r0, [sp, #24]
 800b03e:	b01d      	add	sp, #116	; 0x74
 800b040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b042:	2300      	movs	r3, #0
 800b044:	603b      	str	r3, [r7, #0]
 800b046:	e7e2      	b.n	800b00e <_dtoa_r+0x66>
 800b048:	9a08      	ldr	r2, [sp, #32]
 800b04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b04c:	9210      	str	r2, [sp, #64]	; 0x40
 800b04e:	9311      	str	r3, [sp, #68]	; 0x44
 800b050:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b052:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b054:	2200      	movs	r2, #0
 800b056:	2300      	movs	r3, #0
 800b058:	f7f5 f9f8 	bl	800044c <__aeabi_dcmpeq>
 800b05c:	1e06      	subs	r6, r0, #0
 800b05e:	d009      	beq.n	800b074 <_dtoa_r+0xcc>
 800b060:	2301      	movs	r3, #1
 800b062:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b064:	6013      	str	r3, [r2, #0]
 800b066:	4ba6      	ldr	r3, [pc, #664]	; (800b300 <_dtoa_r+0x358>)
 800b068:	9306      	str	r3, [sp, #24]
 800b06a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d0e5      	beq.n	800b03c <_dtoa_r+0x94>
 800b070:	4ba4      	ldr	r3, [pc, #656]	; (800b304 <_dtoa_r+0x35c>)
 800b072:	e7e1      	b.n	800b038 <_dtoa_r+0x90>
 800b074:	ab1a      	add	r3, sp, #104	; 0x68
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	ab1b      	add	r3, sp, #108	; 0x6c
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	9804      	ldr	r0, [sp, #16]
 800b07e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b082:	f001 fa95 	bl	800c5b0 <__d2b>
 800b086:	007a      	lsls	r2, r7, #1
 800b088:	9005      	str	r0, [sp, #20]
 800b08a:	0d52      	lsrs	r2, r2, #21
 800b08c:	d100      	bne.n	800b090 <_dtoa_r+0xe8>
 800b08e:	e07b      	b.n	800b188 <_dtoa_r+0x1e0>
 800b090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b092:	9617      	str	r6, [sp, #92]	; 0x5c
 800b094:	0319      	lsls	r1, r3, #12
 800b096:	4b9c      	ldr	r3, [pc, #624]	; (800b308 <_dtoa_r+0x360>)
 800b098:	0b09      	lsrs	r1, r1, #12
 800b09a:	430b      	orrs	r3, r1
 800b09c:	499b      	ldr	r1, [pc, #620]	; (800b30c <_dtoa_r+0x364>)
 800b09e:	1857      	adds	r7, r2, r1
 800b0a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b0a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b0a4:	0019      	movs	r1, r3
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	4b99      	ldr	r3, [pc, #612]	; (800b310 <_dtoa_r+0x368>)
 800b0aa:	f7f7 f8a5 	bl	80021f8 <__aeabi_dsub>
 800b0ae:	4a99      	ldr	r2, [pc, #612]	; (800b314 <_dtoa_r+0x36c>)
 800b0b0:	4b99      	ldr	r3, [pc, #612]	; (800b318 <_dtoa_r+0x370>)
 800b0b2:	f7f6 fddf 	bl	8001c74 <__aeabi_dmul>
 800b0b6:	4a99      	ldr	r2, [pc, #612]	; (800b31c <_dtoa_r+0x374>)
 800b0b8:	4b99      	ldr	r3, [pc, #612]	; (800b320 <_dtoa_r+0x378>)
 800b0ba:	f7f5 fe81 	bl	8000dc0 <__aeabi_dadd>
 800b0be:	0004      	movs	r4, r0
 800b0c0:	0038      	movs	r0, r7
 800b0c2:	000d      	movs	r5, r1
 800b0c4:	f7f7 fc6e 	bl	80029a4 <__aeabi_i2d>
 800b0c8:	4a96      	ldr	r2, [pc, #600]	; (800b324 <_dtoa_r+0x37c>)
 800b0ca:	4b97      	ldr	r3, [pc, #604]	; (800b328 <_dtoa_r+0x380>)
 800b0cc:	f7f6 fdd2 	bl	8001c74 <__aeabi_dmul>
 800b0d0:	0002      	movs	r2, r0
 800b0d2:	000b      	movs	r3, r1
 800b0d4:	0020      	movs	r0, r4
 800b0d6:	0029      	movs	r1, r5
 800b0d8:	f7f5 fe72 	bl	8000dc0 <__aeabi_dadd>
 800b0dc:	0004      	movs	r4, r0
 800b0de:	000d      	movs	r5, r1
 800b0e0:	f7f7 fc2a 	bl	8002938 <__aeabi_d2iz>
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	9003      	str	r0, [sp, #12]
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	0020      	movs	r0, r4
 800b0ec:	0029      	movs	r1, r5
 800b0ee:	f7f5 f9b3 	bl	8000458 <__aeabi_dcmplt>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d00b      	beq.n	800b10e <_dtoa_r+0x166>
 800b0f6:	9803      	ldr	r0, [sp, #12]
 800b0f8:	f7f7 fc54 	bl	80029a4 <__aeabi_i2d>
 800b0fc:	002b      	movs	r3, r5
 800b0fe:	0022      	movs	r2, r4
 800b100:	f7f5 f9a4 	bl	800044c <__aeabi_dcmpeq>
 800b104:	4243      	negs	r3, r0
 800b106:	4158      	adcs	r0, r3
 800b108:	9b03      	ldr	r3, [sp, #12]
 800b10a:	1a1b      	subs	r3, r3, r0
 800b10c:	9303      	str	r3, [sp, #12]
 800b10e:	2301      	movs	r3, #1
 800b110:	9316      	str	r3, [sp, #88]	; 0x58
 800b112:	9b03      	ldr	r3, [sp, #12]
 800b114:	2b16      	cmp	r3, #22
 800b116:	d810      	bhi.n	800b13a <_dtoa_r+0x192>
 800b118:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b11a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b11c:	9a03      	ldr	r2, [sp, #12]
 800b11e:	4b83      	ldr	r3, [pc, #524]	; (800b32c <_dtoa_r+0x384>)
 800b120:	00d2      	lsls	r2, r2, #3
 800b122:	189b      	adds	r3, r3, r2
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	f7f5 f996 	bl	8000458 <__aeabi_dcmplt>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d047      	beq.n	800b1c0 <_dtoa_r+0x218>
 800b130:	9b03      	ldr	r3, [sp, #12]
 800b132:	3b01      	subs	r3, #1
 800b134:	9303      	str	r3, [sp, #12]
 800b136:	2300      	movs	r3, #0
 800b138:	9316      	str	r3, [sp, #88]	; 0x58
 800b13a:	2200      	movs	r2, #0
 800b13c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b13e:	920a      	str	r2, [sp, #40]	; 0x28
 800b140:	1bdb      	subs	r3, r3, r7
 800b142:	1e5a      	subs	r2, r3, #1
 800b144:	d53e      	bpl.n	800b1c4 <_dtoa_r+0x21c>
 800b146:	2201      	movs	r2, #1
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	930a      	str	r3, [sp, #40]	; 0x28
 800b14c:	2300      	movs	r3, #0
 800b14e:	930c      	str	r3, [sp, #48]	; 0x30
 800b150:	9b03      	ldr	r3, [sp, #12]
 800b152:	2b00      	cmp	r3, #0
 800b154:	db38      	blt.n	800b1c8 <_dtoa_r+0x220>
 800b156:	9a03      	ldr	r2, [sp, #12]
 800b158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b15a:	4694      	mov	ip, r2
 800b15c:	4463      	add	r3, ip
 800b15e:	930c      	str	r3, [sp, #48]	; 0x30
 800b160:	2300      	movs	r3, #0
 800b162:	9213      	str	r2, [sp, #76]	; 0x4c
 800b164:	930d      	str	r3, [sp, #52]	; 0x34
 800b166:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b168:	2401      	movs	r4, #1
 800b16a:	2b09      	cmp	r3, #9
 800b16c:	d867      	bhi.n	800b23e <_dtoa_r+0x296>
 800b16e:	2b05      	cmp	r3, #5
 800b170:	dd02      	ble.n	800b178 <_dtoa_r+0x1d0>
 800b172:	2400      	movs	r4, #0
 800b174:	3b04      	subs	r3, #4
 800b176:	9322      	str	r3, [sp, #136]	; 0x88
 800b178:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b17a:	1e98      	subs	r0, r3, #2
 800b17c:	2803      	cmp	r0, #3
 800b17e:	d867      	bhi.n	800b250 <_dtoa_r+0x2a8>
 800b180:	f7f4 ffca 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b184:	5b383a2b 	.word	0x5b383a2b
 800b188:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b18a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800b18c:	18f6      	adds	r6, r6, r3
 800b18e:	4b68      	ldr	r3, [pc, #416]	; (800b330 <_dtoa_r+0x388>)
 800b190:	18f2      	adds	r2, r6, r3
 800b192:	2a20      	cmp	r2, #32
 800b194:	dd0f      	ble.n	800b1b6 <_dtoa_r+0x20e>
 800b196:	2340      	movs	r3, #64	; 0x40
 800b198:	1a9b      	subs	r3, r3, r2
 800b19a:	409f      	lsls	r7, r3
 800b19c:	4b65      	ldr	r3, [pc, #404]	; (800b334 <_dtoa_r+0x38c>)
 800b19e:	0038      	movs	r0, r7
 800b1a0:	18f3      	adds	r3, r6, r3
 800b1a2:	40dc      	lsrs	r4, r3
 800b1a4:	4320      	orrs	r0, r4
 800b1a6:	f7f7 fc2d 	bl	8002a04 <__aeabi_ui2d>
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	4b62      	ldr	r3, [pc, #392]	; (800b338 <_dtoa_r+0x390>)
 800b1ae:	1e77      	subs	r7, r6, #1
 800b1b0:	18cb      	adds	r3, r1, r3
 800b1b2:	9217      	str	r2, [sp, #92]	; 0x5c
 800b1b4:	e776      	b.n	800b0a4 <_dtoa_r+0xfc>
 800b1b6:	2320      	movs	r3, #32
 800b1b8:	0020      	movs	r0, r4
 800b1ba:	1a9b      	subs	r3, r3, r2
 800b1bc:	4098      	lsls	r0, r3
 800b1be:	e7f2      	b.n	800b1a6 <_dtoa_r+0x1fe>
 800b1c0:	9016      	str	r0, [sp, #88]	; 0x58
 800b1c2:	e7ba      	b.n	800b13a <_dtoa_r+0x192>
 800b1c4:	920c      	str	r2, [sp, #48]	; 0x30
 800b1c6:	e7c3      	b.n	800b150 <_dtoa_r+0x1a8>
 800b1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ca:	9a03      	ldr	r2, [sp, #12]
 800b1cc:	1a9b      	subs	r3, r3, r2
 800b1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b1d0:	4253      	negs	r3, r2
 800b1d2:	930d      	str	r3, [sp, #52]	; 0x34
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	9313      	str	r3, [sp, #76]	; 0x4c
 800b1d8:	e7c5      	b.n	800b166 <_dtoa_r+0x1be>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b1e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1e2:	9307      	str	r3, [sp, #28]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	dc13      	bgt.n	800b210 <_dtoa_r+0x268>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	001a      	movs	r2, r3
 800b1ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1ee:	9307      	str	r3, [sp, #28]
 800b1f0:	9223      	str	r2, [sp, #140]	; 0x8c
 800b1f2:	e00d      	b.n	800b210 <_dtoa_r+0x268>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e7f1      	b.n	800b1dc <_dtoa_r+0x234>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b1fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1fe:	4694      	mov	ip, r2
 800b200:	9b03      	ldr	r3, [sp, #12]
 800b202:	4463      	add	r3, ip
 800b204:	930b      	str	r3, [sp, #44]	; 0x2c
 800b206:	3301      	adds	r3, #1
 800b208:	9307      	str	r3, [sp, #28]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	dc00      	bgt.n	800b210 <_dtoa_r+0x268>
 800b20e:	2301      	movs	r3, #1
 800b210:	9a04      	ldr	r2, [sp, #16]
 800b212:	2100      	movs	r1, #0
 800b214:	69d0      	ldr	r0, [r2, #28]
 800b216:	2204      	movs	r2, #4
 800b218:	0015      	movs	r5, r2
 800b21a:	3514      	adds	r5, #20
 800b21c:	429d      	cmp	r5, r3
 800b21e:	d91b      	bls.n	800b258 <_dtoa_r+0x2b0>
 800b220:	6041      	str	r1, [r0, #4]
 800b222:	9804      	ldr	r0, [sp, #16]
 800b224:	f000 fdd6 	bl	800bdd4 <_Balloc>
 800b228:	9006      	str	r0, [sp, #24]
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d117      	bne.n	800b25e <_dtoa_r+0x2b6>
 800b22e:	21b0      	movs	r1, #176	; 0xb0
 800b230:	4b42      	ldr	r3, [pc, #264]	; (800b33c <_dtoa_r+0x394>)
 800b232:	482e      	ldr	r0, [pc, #184]	; (800b2ec <_dtoa_r+0x344>)
 800b234:	9a06      	ldr	r2, [sp, #24]
 800b236:	31ff      	adds	r1, #255	; 0xff
 800b238:	e6cb      	b.n	800afd2 <_dtoa_r+0x2a>
 800b23a:	2301      	movs	r3, #1
 800b23c:	e7dd      	b.n	800b1fa <_dtoa_r+0x252>
 800b23e:	2300      	movs	r3, #0
 800b240:	940f      	str	r4, [sp, #60]	; 0x3c
 800b242:	9322      	str	r3, [sp, #136]	; 0x88
 800b244:	3b01      	subs	r3, #1
 800b246:	930b      	str	r3, [sp, #44]	; 0x2c
 800b248:	9307      	str	r3, [sp, #28]
 800b24a:	2200      	movs	r2, #0
 800b24c:	3313      	adds	r3, #19
 800b24e:	e7cf      	b.n	800b1f0 <_dtoa_r+0x248>
 800b250:	2301      	movs	r3, #1
 800b252:	930f      	str	r3, [sp, #60]	; 0x3c
 800b254:	3b02      	subs	r3, #2
 800b256:	e7f6      	b.n	800b246 <_dtoa_r+0x29e>
 800b258:	3101      	adds	r1, #1
 800b25a:	0052      	lsls	r2, r2, #1
 800b25c:	e7dc      	b.n	800b218 <_dtoa_r+0x270>
 800b25e:	9b04      	ldr	r3, [sp, #16]
 800b260:	9a06      	ldr	r2, [sp, #24]
 800b262:	69db      	ldr	r3, [r3, #28]
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	9b07      	ldr	r3, [sp, #28]
 800b268:	2b0e      	cmp	r3, #14
 800b26a:	d900      	bls.n	800b26e <_dtoa_r+0x2c6>
 800b26c:	e0e5      	b.n	800b43a <_dtoa_r+0x492>
 800b26e:	2c00      	cmp	r4, #0
 800b270:	d100      	bne.n	800b274 <_dtoa_r+0x2cc>
 800b272:	e0e2      	b.n	800b43a <_dtoa_r+0x492>
 800b274:	9b03      	ldr	r3, [sp, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	dd64      	ble.n	800b344 <_dtoa_r+0x39c>
 800b27a:	210f      	movs	r1, #15
 800b27c:	9a03      	ldr	r2, [sp, #12]
 800b27e:	4b2b      	ldr	r3, [pc, #172]	; (800b32c <_dtoa_r+0x384>)
 800b280:	400a      	ands	r2, r1
 800b282:	00d2      	lsls	r2, r2, #3
 800b284:	189b      	adds	r3, r3, r2
 800b286:	681e      	ldr	r6, [r3, #0]
 800b288:	685f      	ldr	r7, [r3, #4]
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	2402      	movs	r4, #2
 800b28e:	111d      	asrs	r5, r3, #4
 800b290:	05db      	lsls	r3, r3, #23
 800b292:	d50a      	bpl.n	800b2aa <_dtoa_r+0x302>
 800b294:	4b2a      	ldr	r3, [pc, #168]	; (800b340 <_dtoa_r+0x398>)
 800b296:	400d      	ands	r5, r1
 800b298:	6a1a      	ldr	r2, [r3, #32]
 800b29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b29e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b2a0:	f7f6 f8ee 	bl	8001480 <__aeabi_ddiv>
 800b2a4:	9008      	str	r0, [sp, #32]
 800b2a6:	9109      	str	r1, [sp, #36]	; 0x24
 800b2a8:	3401      	adds	r4, #1
 800b2aa:	4b25      	ldr	r3, [pc, #148]	; (800b340 <_dtoa_r+0x398>)
 800b2ac:	930e      	str	r3, [sp, #56]	; 0x38
 800b2ae:	2d00      	cmp	r5, #0
 800b2b0:	d108      	bne.n	800b2c4 <_dtoa_r+0x31c>
 800b2b2:	9808      	ldr	r0, [sp, #32]
 800b2b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2b6:	0032      	movs	r2, r6
 800b2b8:	003b      	movs	r3, r7
 800b2ba:	f7f6 f8e1 	bl	8001480 <__aeabi_ddiv>
 800b2be:	9008      	str	r0, [sp, #32]
 800b2c0:	9109      	str	r1, [sp, #36]	; 0x24
 800b2c2:	e05a      	b.n	800b37a <_dtoa_r+0x3d2>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	421d      	tst	r5, r3
 800b2c8:	d009      	beq.n	800b2de <_dtoa_r+0x336>
 800b2ca:	18e4      	adds	r4, r4, r3
 800b2cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ce:	0030      	movs	r0, r6
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	0039      	movs	r1, r7
 800b2d6:	f7f6 fccd 	bl	8001c74 <__aeabi_dmul>
 800b2da:	0006      	movs	r6, r0
 800b2dc:	000f      	movs	r7, r1
 800b2de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2e0:	106d      	asrs	r5, r5, #1
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	e7e2      	b.n	800b2ac <_dtoa_r+0x304>
 800b2e6:	46c0      	nop			; (mov r8, r8)
 800b2e8:	0800ed6e 	.word	0x0800ed6e
 800b2ec:	0800ed85 	.word	0x0800ed85
 800b2f0:	7ff00000 	.word	0x7ff00000
 800b2f4:	0000270f 	.word	0x0000270f
 800b2f8:	0800ed6a 	.word	0x0800ed6a
 800b2fc:	0800ed6d 	.word	0x0800ed6d
 800b300:	0800ed38 	.word	0x0800ed38
 800b304:	0800ed39 	.word	0x0800ed39
 800b308:	3ff00000 	.word	0x3ff00000
 800b30c:	fffffc01 	.word	0xfffffc01
 800b310:	3ff80000 	.word	0x3ff80000
 800b314:	636f4361 	.word	0x636f4361
 800b318:	3fd287a7 	.word	0x3fd287a7
 800b31c:	8b60c8b3 	.word	0x8b60c8b3
 800b320:	3fc68a28 	.word	0x3fc68a28
 800b324:	509f79fb 	.word	0x509f79fb
 800b328:	3fd34413 	.word	0x3fd34413
 800b32c:	0800ee70 	.word	0x0800ee70
 800b330:	00000432 	.word	0x00000432
 800b334:	00000412 	.word	0x00000412
 800b338:	fe100000 	.word	0xfe100000
 800b33c:	0800eddd 	.word	0x0800eddd
 800b340:	0800ee48 	.word	0x0800ee48
 800b344:	9b03      	ldr	r3, [sp, #12]
 800b346:	2402      	movs	r4, #2
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d016      	beq.n	800b37a <_dtoa_r+0x3d2>
 800b34c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b34e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b350:	220f      	movs	r2, #15
 800b352:	425d      	negs	r5, r3
 800b354:	402a      	ands	r2, r5
 800b356:	4bdd      	ldr	r3, [pc, #884]	; (800b6cc <_dtoa_r+0x724>)
 800b358:	00d2      	lsls	r2, r2, #3
 800b35a:	189b      	adds	r3, r3, r2
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	f7f6 fc88 	bl	8001c74 <__aeabi_dmul>
 800b364:	2701      	movs	r7, #1
 800b366:	2300      	movs	r3, #0
 800b368:	9008      	str	r0, [sp, #32]
 800b36a:	9109      	str	r1, [sp, #36]	; 0x24
 800b36c:	4ed8      	ldr	r6, [pc, #864]	; (800b6d0 <_dtoa_r+0x728>)
 800b36e:	112d      	asrs	r5, r5, #4
 800b370:	2d00      	cmp	r5, #0
 800b372:	d000      	beq.n	800b376 <_dtoa_r+0x3ce>
 800b374:	e091      	b.n	800b49a <_dtoa_r+0x4f2>
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1a1      	bne.n	800b2be <_dtoa_r+0x316>
 800b37a:	9e08      	ldr	r6, [sp, #32]
 800b37c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b37e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b380:	2b00      	cmp	r3, #0
 800b382:	d100      	bne.n	800b386 <_dtoa_r+0x3de>
 800b384:	e094      	b.n	800b4b0 <_dtoa_r+0x508>
 800b386:	2200      	movs	r2, #0
 800b388:	0030      	movs	r0, r6
 800b38a:	0039      	movs	r1, r7
 800b38c:	4bd1      	ldr	r3, [pc, #836]	; (800b6d4 <_dtoa_r+0x72c>)
 800b38e:	f7f5 f863 	bl	8000458 <__aeabi_dcmplt>
 800b392:	2800      	cmp	r0, #0
 800b394:	d100      	bne.n	800b398 <_dtoa_r+0x3f0>
 800b396:	e08b      	b.n	800b4b0 <_dtoa_r+0x508>
 800b398:	9b07      	ldr	r3, [sp, #28]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d100      	bne.n	800b3a0 <_dtoa_r+0x3f8>
 800b39e:	e087      	b.n	800b4b0 <_dtoa_r+0x508>
 800b3a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	dd45      	ble.n	800b432 <_dtoa_r+0x48a>
 800b3a6:	9b03      	ldr	r3, [sp, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	930e      	str	r3, [sp, #56]	; 0x38
 800b3ae:	0030      	movs	r0, r6
 800b3b0:	4bc9      	ldr	r3, [pc, #804]	; (800b6d8 <_dtoa_r+0x730>)
 800b3b2:	0039      	movs	r1, r7
 800b3b4:	f7f6 fc5e 	bl	8001c74 <__aeabi_dmul>
 800b3b8:	9008      	str	r0, [sp, #32]
 800b3ba:	9109      	str	r1, [sp, #36]	; 0x24
 800b3bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3be:	3401      	adds	r4, #1
 800b3c0:	0020      	movs	r0, r4
 800b3c2:	9e08      	ldr	r6, [sp, #32]
 800b3c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b3c6:	9312      	str	r3, [sp, #72]	; 0x48
 800b3c8:	f7f7 faec 	bl	80029a4 <__aeabi_i2d>
 800b3cc:	0032      	movs	r2, r6
 800b3ce:	003b      	movs	r3, r7
 800b3d0:	f7f6 fc50 	bl	8001c74 <__aeabi_dmul>
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	4bc1      	ldr	r3, [pc, #772]	; (800b6dc <_dtoa_r+0x734>)
 800b3d8:	f7f5 fcf2 	bl	8000dc0 <__aeabi_dadd>
 800b3dc:	4ac0      	ldr	r2, [pc, #768]	; (800b6e0 <_dtoa_r+0x738>)
 800b3de:	9014      	str	r0, [sp, #80]	; 0x50
 800b3e0:	9115      	str	r1, [sp, #84]	; 0x54
 800b3e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3e4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b3e6:	4694      	mov	ip, r2
 800b3e8:	9308      	str	r3, [sp, #32]
 800b3ea:	9409      	str	r4, [sp, #36]	; 0x24
 800b3ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3ee:	4463      	add	r3, ip
 800b3f0:	9318      	str	r3, [sp, #96]	; 0x60
 800b3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d15e      	bne.n	800b4b8 <_dtoa_r+0x510>
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	4bb9      	ldr	r3, [pc, #740]	; (800b6e4 <_dtoa_r+0x73c>)
 800b3fe:	0030      	movs	r0, r6
 800b400:	0039      	movs	r1, r7
 800b402:	f7f6 fef9 	bl	80021f8 <__aeabi_dsub>
 800b406:	9a08      	ldr	r2, [sp, #32]
 800b408:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b40a:	0004      	movs	r4, r0
 800b40c:	000d      	movs	r5, r1
 800b40e:	f7f5 f837 	bl	8000480 <__aeabi_dcmpgt>
 800b412:	2800      	cmp	r0, #0
 800b414:	d000      	beq.n	800b418 <_dtoa_r+0x470>
 800b416:	e2b3      	b.n	800b980 <_dtoa_r+0x9d8>
 800b418:	48b3      	ldr	r0, [pc, #716]	; (800b6e8 <_dtoa_r+0x740>)
 800b41a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b41c:	4684      	mov	ip, r0
 800b41e:	4461      	add	r1, ip
 800b420:	000b      	movs	r3, r1
 800b422:	0020      	movs	r0, r4
 800b424:	0029      	movs	r1, r5
 800b426:	9a08      	ldr	r2, [sp, #32]
 800b428:	f7f5 f816 	bl	8000458 <__aeabi_dcmplt>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d000      	beq.n	800b432 <_dtoa_r+0x48a>
 800b430:	e2a3      	b.n	800b97a <_dtoa_r+0x9d2>
 800b432:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b434:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b436:	9308      	str	r3, [sp, #32]
 800b438:	9409      	str	r4, [sp, #36]	; 0x24
 800b43a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	da00      	bge.n	800b442 <_dtoa_r+0x49a>
 800b440:	e179      	b.n	800b736 <_dtoa_r+0x78e>
 800b442:	9a03      	ldr	r2, [sp, #12]
 800b444:	2a0e      	cmp	r2, #14
 800b446:	dd00      	ble.n	800b44a <_dtoa_r+0x4a2>
 800b448:	e175      	b.n	800b736 <_dtoa_r+0x78e>
 800b44a:	4ba0      	ldr	r3, [pc, #640]	; (800b6cc <_dtoa_r+0x724>)
 800b44c:	00d2      	lsls	r2, r2, #3
 800b44e:	189b      	adds	r3, r3, r2
 800b450:	681e      	ldr	r6, [r3, #0]
 800b452:	685f      	ldr	r7, [r3, #4]
 800b454:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b456:	2b00      	cmp	r3, #0
 800b458:	db00      	blt.n	800b45c <_dtoa_r+0x4b4>
 800b45a:	e0e5      	b.n	800b628 <_dtoa_r+0x680>
 800b45c:	9b07      	ldr	r3, [sp, #28]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	dd00      	ble.n	800b464 <_dtoa_r+0x4bc>
 800b462:	e0e1      	b.n	800b628 <_dtoa_r+0x680>
 800b464:	d000      	beq.n	800b468 <_dtoa_r+0x4c0>
 800b466:	e288      	b.n	800b97a <_dtoa_r+0x9d2>
 800b468:	2200      	movs	r2, #0
 800b46a:	0030      	movs	r0, r6
 800b46c:	0039      	movs	r1, r7
 800b46e:	4b9d      	ldr	r3, [pc, #628]	; (800b6e4 <_dtoa_r+0x73c>)
 800b470:	f7f6 fc00 	bl	8001c74 <__aeabi_dmul>
 800b474:	9a08      	ldr	r2, [sp, #32]
 800b476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b478:	f7f5 f80c 	bl	8000494 <__aeabi_dcmpge>
 800b47c:	9e07      	ldr	r6, [sp, #28]
 800b47e:	0037      	movs	r7, r6
 800b480:	2800      	cmp	r0, #0
 800b482:	d000      	beq.n	800b486 <_dtoa_r+0x4de>
 800b484:	e25f      	b.n	800b946 <_dtoa_r+0x99e>
 800b486:	9b06      	ldr	r3, [sp, #24]
 800b488:	9a06      	ldr	r2, [sp, #24]
 800b48a:	3301      	adds	r3, #1
 800b48c:	9308      	str	r3, [sp, #32]
 800b48e:	2331      	movs	r3, #49	; 0x31
 800b490:	7013      	strb	r3, [r2, #0]
 800b492:	9b03      	ldr	r3, [sp, #12]
 800b494:	3301      	adds	r3, #1
 800b496:	9303      	str	r3, [sp, #12]
 800b498:	e25a      	b.n	800b950 <_dtoa_r+0x9a8>
 800b49a:	423d      	tst	r5, r7
 800b49c:	d005      	beq.n	800b4aa <_dtoa_r+0x502>
 800b49e:	6832      	ldr	r2, [r6, #0]
 800b4a0:	6873      	ldr	r3, [r6, #4]
 800b4a2:	f7f6 fbe7 	bl	8001c74 <__aeabi_dmul>
 800b4a6:	003b      	movs	r3, r7
 800b4a8:	3401      	adds	r4, #1
 800b4aa:	106d      	asrs	r5, r5, #1
 800b4ac:	3608      	adds	r6, #8
 800b4ae:	e75f      	b.n	800b370 <_dtoa_r+0x3c8>
 800b4b0:	9b03      	ldr	r3, [sp, #12]
 800b4b2:	930e      	str	r3, [sp, #56]	; 0x38
 800b4b4:	9b07      	ldr	r3, [sp, #28]
 800b4b6:	e783      	b.n	800b3c0 <_dtoa_r+0x418>
 800b4b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4ba:	4b84      	ldr	r3, [pc, #528]	; (800b6cc <_dtoa_r+0x724>)
 800b4bc:	3a01      	subs	r2, #1
 800b4be:	00d2      	lsls	r2, r2, #3
 800b4c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b4c2:	189b      	adds	r3, r3, r2
 800b4c4:	9c08      	ldr	r4, [sp, #32]
 800b4c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	2900      	cmp	r1, #0
 800b4ce:	d051      	beq.n	800b574 <_dtoa_r+0x5cc>
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	4986      	ldr	r1, [pc, #536]	; (800b6ec <_dtoa_r+0x744>)
 800b4d4:	f7f5 ffd4 	bl	8001480 <__aeabi_ddiv>
 800b4d8:	0022      	movs	r2, r4
 800b4da:	002b      	movs	r3, r5
 800b4dc:	f7f6 fe8c 	bl	80021f8 <__aeabi_dsub>
 800b4e0:	9a06      	ldr	r2, [sp, #24]
 800b4e2:	0004      	movs	r4, r0
 800b4e4:	4694      	mov	ip, r2
 800b4e6:	000d      	movs	r5, r1
 800b4e8:	9b06      	ldr	r3, [sp, #24]
 800b4ea:	9314      	str	r3, [sp, #80]	; 0x50
 800b4ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4ee:	4463      	add	r3, ip
 800b4f0:	9318      	str	r3, [sp, #96]	; 0x60
 800b4f2:	0039      	movs	r1, r7
 800b4f4:	0030      	movs	r0, r6
 800b4f6:	f7f7 fa1f 	bl	8002938 <__aeabi_d2iz>
 800b4fa:	9012      	str	r0, [sp, #72]	; 0x48
 800b4fc:	f7f7 fa52 	bl	80029a4 <__aeabi_i2d>
 800b500:	0002      	movs	r2, r0
 800b502:	000b      	movs	r3, r1
 800b504:	0030      	movs	r0, r6
 800b506:	0039      	movs	r1, r7
 800b508:	f7f6 fe76 	bl	80021f8 <__aeabi_dsub>
 800b50c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b50e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b510:	3301      	adds	r3, #1
 800b512:	9308      	str	r3, [sp, #32]
 800b514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b516:	0006      	movs	r6, r0
 800b518:	3330      	adds	r3, #48	; 0x30
 800b51a:	7013      	strb	r3, [r2, #0]
 800b51c:	0022      	movs	r2, r4
 800b51e:	002b      	movs	r3, r5
 800b520:	000f      	movs	r7, r1
 800b522:	f7f4 ff99 	bl	8000458 <__aeabi_dcmplt>
 800b526:	2800      	cmp	r0, #0
 800b528:	d174      	bne.n	800b614 <_dtoa_r+0x66c>
 800b52a:	0032      	movs	r2, r6
 800b52c:	003b      	movs	r3, r7
 800b52e:	2000      	movs	r0, #0
 800b530:	4968      	ldr	r1, [pc, #416]	; (800b6d4 <_dtoa_r+0x72c>)
 800b532:	f7f6 fe61 	bl	80021f8 <__aeabi_dsub>
 800b536:	0022      	movs	r2, r4
 800b538:	002b      	movs	r3, r5
 800b53a:	f7f4 ff8d 	bl	8000458 <__aeabi_dcmplt>
 800b53e:	2800      	cmp	r0, #0
 800b540:	d000      	beq.n	800b544 <_dtoa_r+0x59c>
 800b542:	e0d7      	b.n	800b6f4 <_dtoa_r+0x74c>
 800b544:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b546:	9a08      	ldr	r2, [sp, #32]
 800b548:	4293      	cmp	r3, r2
 800b54a:	d100      	bne.n	800b54e <_dtoa_r+0x5a6>
 800b54c:	e771      	b.n	800b432 <_dtoa_r+0x48a>
 800b54e:	2200      	movs	r2, #0
 800b550:	0020      	movs	r0, r4
 800b552:	0029      	movs	r1, r5
 800b554:	4b60      	ldr	r3, [pc, #384]	; (800b6d8 <_dtoa_r+0x730>)
 800b556:	f7f6 fb8d 	bl	8001c74 <__aeabi_dmul>
 800b55a:	4b5f      	ldr	r3, [pc, #380]	; (800b6d8 <_dtoa_r+0x730>)
 800b55c:	0004      	movs	r4, r0
 800b55e:	000d      	movs	r5, r1
 800b560:	0030      	movs	r0, r6
 800b562:	0039      	movs	r1, r7
 800b564:	2200      	movs	r2, #0
 800b566:	f7f6 fb85 	bl	8001c74 <__aeabi_dmul>
 800b56a:	9b08      	ldr	r3, [sp, #32]
 800b56c:	0006      	movs	r6, r0
 800b56e:	000f      	movs	r7, r1
 800b570:	9314      	str	r3, [sp, #80]	; 0x50
 800b572:	e7be      	b.n	800b4f2 <_dtoa_r+0x54a>
 800b574:	0020      	movs	r0, r4
 800b576:	0029      	movs	r1, r5
 800b578:	f7f6 fb7c 	bl	8001c74 <__aeabi_dmul>
 800b57c:	9a06      	ldr	r2, [sp, #24]
 800b57e:	9b06      	ldr	r3, [sp, #24]
 800b580:	4694      	mov	ip, r2
 800b582:	9308      	str	r3, [sp, #32]
 800b584:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b586:	9014      	str	r0, [sp, #80]	; 0x50
 800b588:	9115      	str	r1, [sp, #84]	; 0x54
 800b58a:	4463      	add	r3, ip
 800b58c:	9319      	str	r3, [sp, #100]	; 0x64
 800b58e:	0030      	movs	r0, r6
 800b590:	0039      	movs	r1, r7
 800b592:	f7f7 f9d1 	bl	8002938 <__aeabi_d2iz>
 800b596:	9018      	str	r0, [sp, #96]	; 0x60
 800b598:	f7f7 fa04 	bl	80029a4 <__aeabi_i2d>
 800b59c:	0002      	movs	r2, r0
 800b59e:	000b      	movs	r3, r1
 800b5a0:	0030      	movs	r0, r6
 800b5a2:	0039      	movs	r1, r7
 800b5a4:	f7f6 fe28 	bl	80021f8 <__aeabi_dsub>
 800b5a8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b5aa:	9b08      	ldr	r3, [sp, #32]
 800b5ac:	3630      	adds	r6, #48	; 0x30
 800b5ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b5b0:	701e      	strb	r6, [r3, #0]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	0004      	movs	r4, r0
 800b5b6:	000d      	movs	r5, r1
 800b5b8:	9308      	str	r3, [sp, #32]
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d12d      	bne.n	800b61a <_dtoa_r+0x672>
 800b5be:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b5c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b5c2:	9a06      	ldr	r2, [sp, #24]
 800b5c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5c6:	4694      	mov	ip, r2
 800b5c8:	4463      	add	r3, ip
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	9308      	str	r3, [sp, #32]
 800b5ce:	4b47      	ldr	r3, [pc, #284]	; (800b6ec <_dtoa_r+0x744>)
 800b5d0:	f7f5 fbf6 	bl	8000dc0 <__aeabi_dadd>
 800b5d4:	0002      	movs	r2, r0
 800b5d6:	000b      	movs	r3, r1
 800b5d8:	0020      	movs	r0, r4
 800b5da:	0029      	movs	r1, r5
 800b5dc:	f7f4 ff50 	bl	8000480 <__aeabi_dcmpgt>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d000      	beq.n	800b5e6 <_dtoa_r+0x63e>
 800b5e4:	e086      	b.n	800b6f4 <_dtoa_r+0x74c>
 800b5e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	493f      	ldr	r1, [pc, #252]	; (800b6ec <_dtoa_r+0x744>)
 800b5ee:	f7f6 fe03 	bl	80021f8 <__aeabi_dsub>
 800b5f2:	0002      	movs	r2, r0
 800b5f4:	000b      	movs	r3, r1
 800b5f6:	0020      	movs	r0, r4
 800b5f8:	0029      	movs	r1, r5
 800b5fa:	f7f4 ff2d 	bl	8000458 <__aeabi_dcmplt>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d100      	bne.n	800b604 <_dtoa_r+0x65c>
 800b602:	e716      	b.n	800b432 <_dtoa_r+0x48a>
 800b604:	9b08      	ldr	r3, [sp, #32]
 800b606:	001a      	movs	r2, r3
 800b608:	3a01      	subs	r2, #1
 800b60a:	9208      	str	r2, [sp, #32]
 800b60c:	7812      	ldrb	r2, [r2, #0]
 800b60e:	2a30      	cmp	r2, #48	; 0x30
 800b610:	d0f8      	beq.n	800b604 <_dtoa_r+0x65c>
 800b612:	9308      	str	r3, [sp, #32]
 800b614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b616:	9303      	str	r3, [sp, #12]
 800b618:	e046      	b.n	800b6a8 <_dtoa_r+0x700>
 800b61a:	2200      	movs	r2, #0
 800b61c:	4b2e      	ldr	r3, [pc, #184]	; (800b6d8 <_dtoa_r+0x730>)
 800b61e:	f7f6 fb29 	bl	8001c74 <__aeabi_dmul>
 800b622:	0006      	movs	r6, r0
 800b624:	000f      	movs	r7, r1
 800b626:	e7b2      	b.n	800b58e <_dtoa_r+0x5e6>
 800b628:	9b06      	ldr	r3, [sp, #24]
 800b62a:	9a06      	ldr	r2, [sp, #24]
 800b62c:	930a      	str	r3, [sp, #40]	; 0x28
 800b62e:	9b07      	ldr	r3, [sp, #28]
 800b630:	9c08      	ldr	r4, [sp, #32]
 800b632:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b634:	3b01      	subs	r3, #1
 800b636:	189b      	adds	r3, r3, r2
 800b638:	930b      	str	r3, [sp, #44]	; 0x2c
 800b63a:	0032      	movs	r2, r6
 800b63c:	003b      	movs	r3, r7
 800b63e:	0020      	movs	r0, r4
 800b640:	0029      	movs	r1, r5
 800b642:	f7f5 ff1d 	bl	8001480 <__aeabi_ddiv>
 800b646:	f7f7 f977 	bl	8002938 <__aeabi_d2iz>
 800b64a:	9007      	str	r0, [sp, #28]
 800b64c:	f7f7 f9aa 	bl	80029a4 <__aeabi_i2d>
 800b650:	0032      	movs	r2, r6
 800b652:	003b      	movs	r3, r7
 800b654:	f7f6 fb0e 	bl	8001c74 <__aeabi_dmul>
 800b658:	0002      	movs	r2, r0
 800b65a:	000b      	movs	r3, r1
 800b65c:	0020      	movs	r0, r4
 800b65e:	0029      	movs	r1, r5
 800b660:	f7f6 fdca 	bl	80021f8 <__aeabi_dsub>
 800b664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b666:	001a      	movs	r2, r3
 800b668:	3201      	adds	r2, #1
 800b66a:	920a      	str	r2, [sp, #40]	; 0x28
 800b66c:	9208      	str	r2, [sp, #32]
 800b66e:	9a07      	ldr	r2, [sp, #28]
 800b670:	3230      	adds	r2, #48	; 0x30
 800b672:	701a      	strb	r2, [r3, #0]
 800b674:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b676:	429a      	cmp	r2, r3
 800b678:	d14f      	bne.n	800b71a <_dtoa_r+0x772>
 800b67a:	0002      	movs	r2, r0
 800b67c:	000b      	movs	r3, r1
 800b67e:	f7f5 fb9f 	bl	8000dc0 <__aeabi_dadd>
 800b682:	0032      	movs	r2, r6
 800b684:	003b      	movs	r3, r7
 800b686:	0004      	movs	r4, r0
 800b688:	000d      	movs	r5, r1
 800b68a:	f7f4 fef9 	bl	8000480 <__aeabi_dcmpgt>
 800b68e:	2800      	cmp	r0, #0
 800b690:	d12e      	bne.n	800b6f0 <_dtoa_r+0x748>
 800b692:	0032      	movs	r2, r6
 800b694:	003b      	movs	r3, r7
 800b696:	0020      	movs	r0, r4
 800b698:	0029      	movs	r1, r5
 800b69a:	f7f4 fed7 	bl	800044c <__aeabi_dcmpeq>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d002      	beq.n	800b6a8 <_dtoa_r+0x700>
 800b6a2:	9b07      	ldr	r3, [sp, #28]
 800b6a4:	07de      	lsls	r6, r3, #31
 800b6a6:	d423      	bmi.n	800b6f0 <_dtoa_r+0x748>
 800b6a8:	9905      	ldr	r1, [sp, #20]
 800b6aa:	9804      	ldr	r0, [sp, #16]
 800b6ac:	f000 fbd6 	bl	800be5c <_Bfree>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	9a08      	ldr	r2, [sp, #32]
 800b6b4:	7013      	strb	r3, [r2, #0]
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	6013      	str	r3, [r2, #0]
 800b6be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d100      	bne.n	800b6c6 <_dtoa_r+0x71e>
 800b6c4:	e4ba      	b.n	800b03c <_dtoa_r+0x94>
 800b6c6:	9a08      	ldr	r2, [sp, #32]
 800b6c8:	601a      	str	r2, [r3, #0]
 800b6ca:	e4b7      	b.n	800b03c <_dtoa_r+0x94>
 800b6cc:	0800ee70 	.word	0x0800ee70
 800b6d0:	0800ee48 	.word	0x0800ee48
 800b6d4:	3ff00000 	.word	0x3ff00000
 800b6d8:	40240000 	.word	0x40240000
 800b6dc:	401c0000 	.word	0x401c0000
 800b6e0:	fcc00000 	.word	0xfcc00000
 800b6e4:	40140000 	.word	0x40140000
 800b6e8:	7cc00000 	.word	0x7cc00000
 800b6ec:	3fe00000 	.word	0x3fe00000
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	930e      	str	r3, [sp, #56]	; 0x38
 800b6f4:	9b08      	ldr	r3, [sp, #32]
 800b6f6:	9308      	str	r3, [sp, #32]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	781a      	ldrb	r2, [r3, #0]
 800b6fc:	2a39      	cmp	r2, #57	; 0x39
 800b6fe:	d108      	bne.n	800b712 <_dtoa_r+0x76a>
 800b700:	9a06      	ldr	r2, [sp, #24]
 800b702:	429a      	cmp	r2, r3
 800b704:	d1f7      	bne.n	800b6f6 <_dtoa_r+0x74e>
 800b706:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b708:	9906      	ldr	r1, [sp, #24]
 800b70a:	3201      	adds	r2, #1
 800b70c:	920e      	str	r2, [sp, #56]	; 0x38
 800b70e:	2230      	movs	r2, #48	; 0x30
 800b710:	700a      	strb	r2, [r1, #0]
 800b712:	781a      	ldrb	r2, [r3, #0]
 800b714:	3201      	adds	r2, #1
 800b716:	701a      	strb	r2, [r3, #0]
 800b718:	e77c      	b.n	800b614 <_dtoa_r+0x66c>
 800b71a:	2200      	movs	r2, #0
 800b71c:	4ba9      	ldr	r3, [pc, #676]	; (800b9c4 <_dtoa_r+0xa1c>)
 800b71e:	f7f6 faa9 	bl	8001c74 <__aeabi_dmul>
 800b722:	2200      	movs	r2, #0
 800b724:	2300      	movs	r3, #0
 800b726:	0004      	movs	r4, r0
 800b728:	000d      	movs	r5, r1
 800b72a:	f7f4 fe8f 	bl	800044c <__aeabi_dcmpeq>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d100      	bne.n	800b734 <_dtoa_r+0x78c>
 800b732:	e782      	b.n	800b63a <_dtoa_r+0x692>
 800b734:	e7b8      	b.n	800b6a8 <_dtoa_r+0x700>
 800b736:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b738:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b73a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b73c:	2f00      	cmp	r7, #0
 800b73e:	d012      	beq.n	800b766 <_dtoa_r+0x7be>
 800b740:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b742:	2a01      	cmp	r2, #1
 800b744:	dc6e      	bgt.n	800b824 <_dtoa_r+0x87c>
 800b746:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b748:	2a00      	cmp	r2, #0
 800b74a:	d065      	beq.n	800b818 <_dtoa_r+0x870>
 800b74c:	4a9e      	ldr	r2, [pc, #632]	; (800b9c8 <_dtoa_r+0xa20>)
 800b74e:	189b      	adds	r3, r3, r2
 800b750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b752:	2101      	movs	r1, #1
 800b754:	18d2      	adds	r2, r2, r3
 800b756:	920a      	str	r2, [sp, #40]	; 0x28
 800b758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b75a:	9804      	ldr	r0, [sp, #16]
 800b75c:	18d3      	adds	r3, r2, r3
 800b75e:	930c      	str	r3, [sp, #48]	; 0x30
 800b760:	f000 fc78 	bl	800c054 <__i2b>
 800b764:	0007      	movs	r7, r0
 800b766:	2c00      	cmp	r4, #0
 800b768:	d00e      	beq.n	800b788 <_dtoa_r+0x7e0>
 800b76a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dd0b      	ble.n	800b788 <_dtoa_r+0x7e0>
 800b770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b772:	0023      	movs	r3, r4
 800b774:	4294      	cmp	r4, r2
 800b776:	dd00      	ble.n	800b77a <_dtoa_r+0x7d2>
 800b778:	0013      	movs	r3, r2
 800b77a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b77c:	1ae4      	subs	r4, r4, r3
 800b77e:	1ad2      	subs	r2, r2, r3
 800b780:	920a      	str	r2, [sp, #40]	; 0x28
 800b782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	930c      	str	r3, [sp, #48]	; 0x30
 800b788:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d01e      	beq.n	800b7cc <_dtoa_r+0x824>
 800b78e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b790:	2b00      	cmp	r3, #0
 800b792:	d05c      	beq.n	800b84e <_dtoa_r+0x8a6>
 800b794:	2d00      	cmp	r5, #0
 800b796:	dd10      	ble.n	800b7ba <_dtoa_r+0x812>
 800b798:	0039      	movs	r1, r7
 800b79a:	002a      	movs	r2, r5
 800b79c:	9804      	ldr	r0, [sp, #16]
 800b79e:	f000 fd21 	bl	800c1e4 <__pow5mult>
 800b7a2:	9a05      	ldr	r2, [sp, #20]
 800b7a4:	0001      	movs	r1, r0
 800b7a6:	0007      	movs	r7, r0
 800b7a8:	9804      	ldr	r0, [sp, #16]
 800b7aa:	f000 fc6b 	bl	800c084 <__multiply>
 800b7ae:	0006      	movs	r6, r0
 800b7b0:	9905      	ldr	r1, [sp, #20]
 800b7b2:	9804      	ldr	r0, [sp, #16]
 800b7b4:	f000 fb52 	bl	800be5c <_Bfree>
 800b7b8:	9605      	str	r6, [sp, #20]
 800b7ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7bc:	1b5a      	subs	r2, r3, r5
 800b7be:	42ab      	cmp	r3, r5
 800b7c0:	d004      	beq.n	800b7cc <_dtoa_r+0x824>
 800b7c2:	9905      	ldr	r1, [sp, #20]
 800b7c4:	9804      	ldr	r0, [sp, #16]
 800b7c6:	f000 fd0d 	bl	800c1e4 <__pow5mult>
 800b7ca:	9005      	str	r0, [sp, #20]
 800b7cc:	2101      	movs	r1, #1
 800b7ce:	9804      	ldr	r0, [sp, #16]
 800b7d0:	f000 fc40 	bl	800c054 <__i2b>
 800b7d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7d6:	0006      	movs	r6, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	dd3a      	ble.n	800b852 <_dtoa_r+0x8aa>
 800b7dc:	001a      	movs	r2, r3
 800b7de:	0001      	movs	r1, r0
 800b7e0:	9804      	ldr	r0, [sp, #16]
 800b7e2:	f000 fcff 	bl	800c1e4 <__pow5mult>
 800b7e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7e8:	0006      	movs	r6, r0
 800b7ea:	2500      	movs	r5, #0
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	dc38      	bgt.n	800b862 <_dtoa_r+0x8ba>
 800b7f0:	2500      	movs	r5, #0
 800b7f2:	9b08      	ldr	r3, [sp, #32]
 800b7f4:	42ab      	cmp	r3, r5
 800b7f6:	d130      	bne.n	800b85a <_dtoa_r+0x8b2>
 800b7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7fa:	031b      	lsls	r3, r3, #12
 800b7fc:	42ab      	cmp	r3, r5
 800b7fe:	d12c      	bne.n	800b85a <_dtoa_r+0x8b2>
 800b800:	4b72      	ldr	r3, [pc, #456]	; (800b9cc <_dtoa_r+0xa24>)
 800b802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b804:	4213      	tst	r3, r2
 800b806:	d028      	beq.n	800b85a <_dtoa_r+0x8b2>
 800b808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b80a:	3501      	adds	r5, #1
 800b80c:	3301      	adds	r3, #1
 800b80e:	930a      	str	r3, [sp, #40]	; 0x28
 800b810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b812:	3301      	adds	r3, #1
 800b814:	930c      	str	r3, [sp, #48]	; 0x30
 800b816:	e020      	b.n	800b85a <_dtoa_r+0x8b2>
 800b818:	2336      	movs	r3, #54	; 0x36
 800b81a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b81c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b81e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b820:	1a9b      	subs	r3, r3, r2
 800b822:	e795      	b.n	800b750 <_dtoa_r+0x7a8>
 800b824:	9b07      	ldr	r3, [sp, #28]
 800b826:	1e5d      	subs	r5, r3, #1
 800b828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b82a:	42ab      	cmp	r3, r5
 800b82c:	db07      	blt.n	800b83e <_dtoa_r+0x896>
 800b82e:	1b5d      	subs	r5, r3, r5
 800b830:	9b07      	ldr	r3, [sp, #28]
 800b832:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b834:	2b00      	cmp	r3, #0
 800b836:	da8b      	bge.n	800b750 <_dtoa_r+0x7a8>
 800b838:	1ae4      	subs	r4, r4, r3
 800b83a:	2300      	movs	r3, #0
 800b83c:	e788      	b.n	800b750 <_dtoa_r+0x7a8>
 800b83e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b842:	1aeb      	subs	r3, r5, r3
 800b844:	18d3      	adds	r3, r2, r3
 800b846:	950d      	str	r5, [sp, #52]	; 0x34
 800b848:	9313      	str	r3, [sp, #76]	; 0x4c
 800b84a:	2500      	movs	r5, #0
 800b84c:	e7f0      	b.n	800b830 <_dtoa_r+0x888>
 800b84e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b850:	e7b7      	b.n	800b7c2 <_dtoa_r+0x81a>
 800b852:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b854:	2500      	movs	r5, #0
 800b856:	2b01      	cmp	r3, #1
 800b858:	ddca      	ble.n	800b7f0 <_dtoa_r+0x848>
 800b85a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b85c:	2001      	movs	r0, #1
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d008      	beq.n	800b874 <_dtoa_r+0x8cc>
 800b862:	6933      	ldr	r3, [r6, #16]
 800b864:	3303      	adds	r3, #3
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	18f3      	adds	r3, r6, r3
 800b86a:	6858      	ldr	r0, [r3, #4]
 800b86c:	f000 fbaa 	bl	800bfc4 <__hi0bits>
 800b870:	2320      	movs	r3, #32
 800b872:	1a18      	subs	r0, r3, r0
 800b874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b876:	1818      	adds	r0, r3, r0
 800b878:	0002      	movs	r2, r0
 800b87a:	231f      	movs	r3, #31
 800b87c:	401a      	ands	r2, r3
 800b87e:	4218      	tst	r0, r3
 800b880:	d047      	beq.n	800b912 <_dtoa_r+0x96a>
 800b882:	3301      	adds	r3, #1
 800b884:	1a9b      	subs	r3, r3, r2
 800b886:	2b04      	cmp	r3, #4
 800b888:	dd3f      	ble.n	800b90a <_dtoa_r+0x962>
 800b88a:	231c      	movs	r3, #28
 800b88c:	1a9b      	subs	r3, r3, r2
 800b88e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b890:	18e4      	adds	r4, r4, r3
 800b892:	18d2      	adds	r2, r2, r3
 800b894:	920a      	str	r2, [sp, #40]	; 0x28
 800b896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b898:	18d3      	adds	r3, r2, r3
 800b89a:	930c      	str	r3, [sp, #48]	; 0x30
 800b89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	dd05      	ble.n	800b8ae <_dtoa_r+0x906>
 800b8a2:	001a      	movs	r2, r3
 800b8a4:	9905      	ldr	r1, [sp, #20]
 800b8a6:	9804      	ldr	r0, [sp, #16]
 800b8a8:	f000 fcf8 	bl	800c29c <__lshift>
 800b8ac:	9005      	str	r0, [sp, #20]
 800b8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	dd05      	ble.n	800b8c0 <_dtoa_r+0x918>
 800b8b4:	0031      	movs	r1, r6
 800b8b6:	001a      	movs	r2, r3
 800b8b8:	9804      	ldr	r0, [sp, #16]
 800b8ba:	f000 fcef 	bl	800c29c <__lshift>
 800b8be:	0006      	movs	r6, r0
 800b8c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d027      	beq.n	800b916 <_dtoa_r+0x96e>
 800b8c6:	0031      	movs	r1, r6
 800b8c8:	9805      	ldr	r0, [sp, #20]
 800b8ca:	f000 fd55 	bl	800c378 <__mcmp>
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	da21      	bge.n	800b916 <_dtoa_r+0x96e>
 800b8d2:	9b03      	ldr	r3, [sp, #12]
 800b8d4:	220a      	movs	r2, #10
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	9303      	str	r3, [sp, #12]
 800b8da:	9905      	ldr	r1, [sp, #20]
 800b8dc:	2300      	movs	r3, #0
 800b8de:	9804      	ldr	r0, [sp, #16]
 800b8e0:	f000 fae0 	bl	800bea4 <__multadd>
 800b8e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8e6:	9005      	str	r0, [sp, #20]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d100      	bne.n	800b8ee <_dtoa_r+0x946>
 800b8ec:	e15d      	b.n	800bbaa <_dtoa_r+0xc02>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	0039      	movs	r1, r7
 800b8f2:	220a      	movs	r2, #10
 800b8f4:	9804      	ldr	r0, [sp, #16]
 800b8f6:	f000 fad5 	bl	800bea4 <__multadd>
 800b8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8fc:	0007      	movs	r7, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	dc49      	bgt.n	800b996 <_dtoa_r+0x9ee>
 800b902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b904:	2b02      	cmp	r3, #2
 800b906:	dc0e      	bgt.n	800b926 <_dtoa_r+0x97e>
 800b908:	e045      	b.n	800b996 <_dtoa_r+0x9ee>
 800b90a:	2b04      	cmp	r3, #4
 800b90c:	d0c6      	beq.n	800b89c <_dtoa_r+0x8f4>
 800b90e:	331c      	adds	r3, #28
 800b910:	e7bd      	b.n	800b88e <_dtoa_r+0x8e6>
 800b912:	0013      	movs	r3, r2
 800b914:	e7fb      	b.n	800b90e <_dtoa_r+0x966>
 800b916:	9b07      	ldr	r3, [sp, #28]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	dc36      	bgt.n	800b98a <_dtoa_r+0x9e2>
 800b91c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b91e:	2b02      	cmp	r3, #2
 800b920:	dd33      	ble.n	800b98a <_dtoa_r+0x9e2>
 800b922:	9b07      	ldr	r3, [sp, #28]
 800b924:	930b      	str	r3, [sp, #44]	; 0x2c
 800b926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10c      	bne.n	800b946 <_dtoa_r+0x99e>
 800b92c:	0031      	movs	r1, r6
 800b92e:	2205      	movs	r2, #5
 800b930:	9804      	ldr	r0, [sp, #16]
 800b932:	f000 fab7 	bl	800bea4 <__multadd>
 800b936:	0006      	movs	r6, r0
 800b938:	0001      	movs	r1, r0
 800b93a:	9805      	ldr	r0, [sp, #20]
 800b93c:	f000 fd1c 	bl	800c378 <__mcmp>
 800b940:	2800      	cmp	r0, #0
 800b942:	dd00      	ble.n	800b946 <_dtoa_r+0x99e>
 800b944:	e59f      	b.n	800b486 <_dtoa_r+0x4de>
 800b946:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b948:	43db      	mvns	r3, r3
 800b94a:	9303      	str	r3, [sp, #12]
 800b94c:	9b06      	ldr	r3, [sp, #24]
 800b94e:	9308      	str	r3, [sp, #32]
 800b950:	2500      	movs	r5, #0
 800b952:	0031      	movs	r1, r6
 800b954:	9804      	ldr	r0, [sp, #16]
 800b956:	f000 fa81 	bl	800be5c <_Bfree>
 800b95a:	2f00      	cmp	r7, #0
 800b95c:	d100      	bne.n	800b960 <_dtoa_r+0x9b8>
 800b95e:	e6a3      	b.n	800b6a8 <_dtoa_r+0x700>
 800b960:	2d00      	cmp	r5, #0
 800b962:	d005      	beq.n	800b970 <_dtoa_r+0x9c8>
 800b964:	42bd      	cmp	r5, r7
 800b966:	d003      	beq.n	800b970 <_dtoa_r+0x9c8>
 800b968:	0029      	movs	r1, r5
 800b96a:	9804      	ldr	r0, [sp, #16]
 800b96c:	f000 fa76 	bl	800be5c <_Bfree>
 800b970:	0039      	movs	r1, r7
 800b972:	9804      	ldr	r0, [sp, #16]
 800b974:	f000 fa72 	bl	800be5c <_Bfree>
 800b978:	e696      	b.n	800b6a8 <_dtoa_r+0x700>
 800b97a:	2600      	movs	r6, #0
 800b97c:	0037      	movs	r7, r6
 800b97e:	e7e2      	b.n	800b946 <_dtoa_r+0x99e>
 800b980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b982:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b984:	9303      	str	r3, [sp, #12]
 800b986:	0037      	movs	r7, r6
 800b988:	e57d      	b.n	800b486 <_dtoa_r+0x4de>
 800b98a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d100      	bne.n	800b992 <_dtoa_r+0x9ea>
 800b990:	e0c3      	b.n	800bb1a <_dtoa_r+0xb72>
 800b992:	9b07      	ldr	r3, [sp, #28]
 800b994:	930b      	str	r3, [sp, #44]	; 0x2c
 800b996:	2c00      	cmp	r4, #0
 800b998:	dd05      	ble.n	800b9a6 <_dtoa_r+0x9fe>
 800b99a:	0039      	movs	r1, r7
 800b99c:	0022      	movs	r2, r4
 800b99e:	9804      	ldr	r0, [sp, #16]
 800b9a0:	f000 fc7c 	bl	800c29c <__lshift>
 800b9a4:	0007      	movs	r7, r0
 800b9a6:	0038      	movs	r0, r7
 800b9a8:	2d00      	cmp	r5, #0
 800b9aa:	d024      	beq.n	800b9f6 <_dtoa_r+0xa4e>
 800b9ac:	6879      	ldr	r1, [r7, #4]
 800b9ae:	9804      	ldr	r0, [sp, #16]
 800b9b0:	f000 fa10 	bl	800bdd4 <_Balloc>
 800b9b4:	1e04      	subs	r4, r0, #0
 800b9b6:	d111      	bne.n	800b9dc <_dtoa_r+0xa34>
 800b9b8:	0022      	movs	r2, r4
 800b9ba:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <_dtoa_r+0xa28>)
 800b9bc:	4805      	ldr	r0, [pc, #20]	; (800b9d4 <_dtoa_r+0xa2c>)
 800b9be:	4906      	ldr	r1, [pc, #24]	; (800b9d8 <_dtoa_r+0xa30>)
 800b9c0:	f7ff fb07 	bl	800afd2 <_dtoa_r+0x2a>
 800b9c4:	40240000 	.word	0x40240000
 800b9c8:	00000433 	.word	0x00000433
 800b9cc:	7ff00000 	.word	0x7ff00000
 800b9d0:	0800eddd 	.word	0x0800eddd
 800b9d4:	0800ed85 	.word	0x0800ed85
 800b9d8:	000002ef 	.word	0x000002ef
 800b9dc:	0039      	movs	r1, r7
 800b9de:	693a      	ldr	r2, [r7, #16]
 800b9e0:	310c      	adds	r1, #12
 800b9e2:	3202      	adds	r2, #2
 800b9e4:	0092      	lsls	r2, r2, #2
 800b9e6:	300c      	adds	r0, #12
 800b9e8:	f001 ffb2 	bl	800d950 <memcpy>
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	0021      	movs	r1, r4
 800b9f0:	9804      	ldr	r0, [sp, #16]
 800b9f2:	f000 fc53 	bl	800c29c <__lshift>
 800b9f6:	9b06      	ldr	r3, [sp, #24]
 800b9f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9fa:	9307      	str	r3, [sp, #28]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	189b      	adds	r3, r3, r2
 800ba00:	2201      	movs	r2, #1
 800ba02:	003d      	movs	r5, r7
 800ba04:	0007      	movs	r7, r0
 800ba06:	930e      	str	r3, [sp, #56]	; 0x38
 800ba08:	9b08      	ldr	r3, [sp, #32]
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	930d      	str	r3, [sp, #52]	; 0x34
 800ba0e:	0031      	movs	r1, r6
 800ba10:	9805      	ldr	r0, [sp, #20]
 800ba12:	f7ff fa39 	bl	800ae88 <quorem>
 800ba16:	0029      	movs	r1, r5
 800ba18:	0004      	movs	r4, r0
 800ba1a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba1c:	9805      	ldr	r0, [sp, #20]
 800ba1e:	f000 fcab 	bl	800c378 <__mcmp>
 800ba22:	003a      	movs	r2, r7
 800ba24:	900c      	str	r0, [sp, #48]	; 0x30
 800ba26:	0031      	movs	r1, r6
 800ba28:	9804      	ldr	r0, [sp, #16]
 800ba2a:	f000 fcc1 	bl	800c3b0 <__mdiff>
 800ba2e:	2201      	movs	r2, #1
 800ba30:	68c3      	ldr	r3, [r0, #12]
 800ba32:	3430      	adds	r4, #48	; 0x30
 800ba34:	9008      	str	r0, [sp, #32]
 800ba36:	920a      	str	r2, [sp, #40]	; 0x28
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d104      	bne.n	800ba46 <_dtoa_r+0xa9e>
 800ba3c:	0001      	movs	r1, r0
 800ba3e:	9805      	ldr	r0, [sp, #20]
 800ba40:	f000 fc9a 	bl	800c378 <__mcmp>
 800ba44:	900a      	str	r0, [sp, #40]	; 0x28
 800ba46:	9908      	ldr	r1, [sp, #32]
 800ba48:	9804      	ldr	r0, [sp, #16]
 800ba4a:	f000 fa07 	bl	800be5c <_Bfree>
 800ba4e:	9b07      	ldr	r3, [sp, #28]
 800ba50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba52:	3301      	adds	r3, #1
 800ba54:	9308      	str	r3, [sp, #32]
 800ba56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	d109      	bne.n	800ba74 <_dtoa_r+0xacc>
 800ba60:	2c39      	cmp	r4, #57	; 0x39
 800ba62:	d022      	beq.n	800baaa <_dtoa_r+0xb02>
 800ba64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	dd01      	ble.n	800ba6e <_dtoa_r+0xac6>
 800ba6a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ba6c:	3431      	adds	r4, #49	; 0x31
 800ba6e:	9b07      	ldr	r3, [sp, #28]
 800ba70:	701c      	strb	r4, [r3, #0]
 800ba72:	e76e      	b.n	800b952 <_dtoa_r+0x9aa>
 800ba74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	db04      	blt.n	800ba84 <_dtoa_r+0xadc>
 800ba7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba80:	4313      	orrs	r3, r2
 800ba82:	d11e      	bne.n	800bac2 <_dtoa_r+0xb1a>
 800ba84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	ddf1      	ble.n	800ba6e <_dtoa_r+0xac6>
 800ba8a:	9905      	ldr	r1, [sp, #20]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	9804      	ldr	r0, [sp, #16]
 800ba90:	f000 fc04 	bl	800c29c <__lshift>
 800ba94:	0031      	movs	r1, r6
 800ba96:	9005      	str	r0, [sp, #20]
 800ba98:	f000 fc6e 	bl	800c378 <__mcmp>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	dc02      	bgt.n	800baa6 <_dtoa_r+0xafe>
 800baa0:	d1e5      	bne.n	800ba6e <_dtoa_r+0xac6>
 800baa2:	07e3      	lsls	r3, r4, #31
 800baa4:	d5e3      	bpl.n	800ba6e <_dtoa_r+0xac6>
 800baa6:	2c39      	cmp	r4, #57	; 0x39
 800baa8:	d1df      	bne.n	800ba6a <_dtoa_r+0xac2>
 800baaa:	2339      	movs	r3, #57	; 0x39
 800baac:	9a07      	ldr	r2, [sp, #28]
 800baae:	7013      	strb	r3, [r2, #0]
 800bab0:	9b08      	ldr	r3, [sp, #32]
 800bab2:	9308      	str	r3, [sp, #32]
 800bab4:	3b01      	subs	r3, #1
 800bab6:	781a      	ldrb	r2, [r3, #0]
 800bab8:	2a39      	cmp	r2, #57	; 0x39
 800baba:	d063      	beq.n	800bb84 <_dtoa_r+0xbdc>
 800babc:	3201      	adds	r2, #1
 800babe:	701a      	strb	r2, [r3, #0]
 800bac0:	e747      	b.n	800b952 <_dtoa_r+0x9aa>
 800bac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	dd03      	ble.n	800bad0 <_dtoa_r+0xb28>
 800bac8:	2c39      	cmp	r4, #57	; 0x39
 800baca:	d0ee      	beq.n	800baaa <_dtoa_r+0xb02>
 800bacc:	3401      	adds	r4, #1
 800bace:	e7ce      	b.n	800ba6e <_dtoa_r+0xac6>
 800bad0:	9b07      	ldr	r3, [sp, #28]
 800bad2:	9a07      	ldr	r2, [sp, #28]
 800bad4:	701c      	strb	r4, [r3, #0]
 800bad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bad8:	4293      	cmp	r3, r2
 800bada:	d03e      	beq.n	800bb5a <_dtoa_r+0xbb2>
 800badc:	2300      	movs	r3, #0
 800bade:	220a      	movs	r2, #10
 800bae0:	9905      	ldr	r1, [sp, #20]
 800bae2:	9804      	ldr	r0, [sp, #16]
 800bae4:	f000 f9de 	bl	800bea4 <__multadd>
 800bae8:	2300      	movs	r3, #0
 800baea:	9005      	str	r0, [sp, #20]
 800baec:	220a      	movs	r2, #10
 800baee:	0029      	movs	r1, r5
 800baf0:	9804      	ldr	r0, [sp, #16]
 800baf2:	42bd      	cmp	r5, r7
 800baf4:	d106      	bne.n	800bb04 <_dtoa_r+0xb5c>
 800baf6:	f000 f9d5 	bl	800bea4 <__multadd>
 800bafa:	0005      	movs	r5, r0
 800bafc:	0007      	movs	r7, r0
 800bafe:	9b08      	ldr	r3, [sp, #32]
 800bb00:	9307      	str	r3, [sp, #28]
 800bb02:	e784      	b.n	800ba0e <_dtoa_r+0xa66>
 800bb04:	f000 f9ce 	bl	800bea4 <__multadd>
 800bb08:	0039      	movs	r1, r7
 800bb0a:	0005      	movs	r5, r0
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	220a      	movs	r2, #10
 800bb10:	9804      	ldr	r0, [sp, #16]
 800bb12:	f000 f9c7 	bl	800bea4 <__multadd>
 800bb16:	0007      	movs	r7, r0
 800bb18:	e7f1      	b.n	800bafe <_dtoa_r+0xb56>
 800bb1a:	9b07      	ldr	r3, [sp, #28]
 800bb1c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb1e:	2500      	movs	r5, #0
 800bb20:	0031      	movs	r1, r6
 800bb22:	9805      	ldr	r0, [sp, #20]
 800bb24:	f7ff f9b0 	bl	800ae88 <quorem>
 800bb28:	9b06      	ldr	r3, [sp, #24]
 800bb2a:	3030      	adds	r0, #48	; 0x30
 800bb2c:	5558      	strb	r0, [r3, r5]
 800bb2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb30:	3501      	adds	r5, #1
 800bb32:	0004      	movs	r4, r0
 800bb34:	42ab      	cmp	r3, r5
 800bb36:	dd07      	ble.n	800bb48 <_dtoa_r+0xba0>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	220a      	movs	r2, #10
 800bb3c:	9905      	ldr	r1, [sp, #20]
 800bb3e:	9804      	ldr	r0, [sp, #16]
 800bb40:	f000 f9b0 	bl	800bea4 <__multadd>
 800bb44:	9005      	str	r0, [sp, #20]
 800bb46:	e7eb      	b.n	800bb20 <_dtoa_r+0xb78>
 800bb48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	2a00      	cmp	r2, #0
 800bb4e:	dd00      	ble.n	800bb52 <_dtoa_r+0xbaa>
 800bb50:	0013      	movs	r3, r2
 800bb52:	2500      	movs	r5, #0
 800bb54:	9a06      	ldr	r2, [sp, #24]
 800bb56:	18d3      	adds	r3, r2, r3
 800bb58:	9308      	str	r3, [sp, #32]
 800bb5a:	9905      	ldr	r1, [sp, #20]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	9804      	ldr	r0, [sp, #16]
 800bb60:	f000 fb9c 	bl	800c29c <__lshift>
 800bb64:	0031      	movs	r1, r6
 800bb66:	9005      	str	r0, [sp, #20]
 800bb68:	f000 fc06 	bl	800c378 <__mcmp>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	dc9f      	bgt.n	800bab0 <_dtoa_r+0xb08>
 800bb70:	d101      	bne.n	800bb76 <_dtoa_r+0xbce>
 800bb72:	07e4      	lsls	r4, r4, #31
 800bb74:	d49c      	bmi.n	800bab0 <_dtoa_r+0xb08>
 800bb76:	9b08      	ldr	r3, [sp, #32]
 800bb78:	9308      	str	r3, [sp, #32]
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	781a      	ldrb	r2, [r3, #0]
 800bb7e:	2a30      	cmp	r2, #48	; 0x30
 800bb80:	d0fa      	beq.n	800bb78 <_dtoa_r+0xbd0>
 800bb82:	e6e6      	b.n	800b952 <_dtoa_r+0x9aa>
 800bb84:	9a06      	ldr	r2, [sp, #24]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d193      	bne.n	800bab2 <_dtoa_r+0xb0a>
 800bb8a:	9b03      	ldr	r3, [sp, #12]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	9303      	str	r3, [sp, #12]
 800bb90:	2331      	movs	r3, #49	; 0x31
 800bb92:	7013      	strb	r3, [r2, #0]
 800bb94:	e6dd      	b.n	800b952 <_dtoa_r+0x9aa>
 800bb96:	4b09      	ldr	r3, [pc, #36]	; (800bbbc <_dtoa_r+0xc14>)
 800bb98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bb9a:	9306      	str	r3, [sp, #24]
 800bb9c:	4b08      	ldr	r3, [pc, #32]	; (800bbc0 <_dtoa_r+0xc18>)
 800bb9e:	2a00      	cmp	r2, #0
 800bba0:	d001      	beq.n	800bba6 <_dtoa_r+0xbfe>
 800bba2:	f7ff fa49 	bl	800b038 <_dtoa_r+0x90>
 800bba6:	f7ff fa49 	bl	800b03c <_dtoa_r+0x94>
 800bbaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	dcb6      	bgt.n	800bb1e <_dtoa_r+0xb76>
 800bbb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	dd00      	ble.n	800bbb8 <_dtoa_r+0xc10>
 800bbb6:	e6b6      	b.n	800b926 <_dtoa_r+0x97e>
 800bbb8:	e7b1      	b.n	800bb1e <_dtoa_r+0xb76>
 800bbba:	46c0      	nop			; (mov r8, r8)
 800bbbc:	0800ed61 	.word	0x0800ed61
 800bbc0:	0800ed69 	.word	0x0800ed69

0800bbc4 <_free_r>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	0005      	movs	r5, r0
 800bbc8:	2900      	cmp	r1, #0
 800bbca:	d010      	beq.n	800bbee <_free_r+0x2a>
 800bbcc:	1f0c      	subs	r4, r1, #4
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	da00      	bge.n	800bbd6 <_free_r+0x12>
 800bbd4:	18e4      	adds	r4, r4, r3
 800bbd6:	0028      	movs	r0, r5
 800bbd8:	f000 f8ec 	bl	800bdb4 <__malloc_lock>
 800bbdc:	4a1d      	ldr	r2, [pc, #116]	; (800bc54 <_free_r+0x90>)
 800bbde:	6813      	ldr	r3, [r2, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d105      	bne.n	800bbf0 <_free_r+0x2c>
 800bbe4:	6063      	str	r3, [r4, #4]
 800bbe6:	6014      	str	r4, [r2, #0]
 800bbe8:	0028      	movs	r0, r5
 800bbea:	f000 f8eb 	bl	800bdc4 <__malloc_unlock>
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	42a3      	cmp	r3, r4
 800bbf2:	d908      	bls.n	800bc06 <_free_r+0x42>
 800bbf4:	6820      	ldr	r0, [r4, #0]
 800bbf6:	1821      	adds	r1, r4, r0
 800bbf8:	428b      	cmp	r3, r1
 800bbfa:	d1f3      	bne.n	800bbe4 <_free_r+0x20>
 800bbfc:	6819      	ldr	r1, [r3, #0]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	1809      	adds	r1, r1, r0
 800bc02:	6021      	str	r1, [r4, #0]
 800bc04:	e7ee      	b.n	800bbe4 <_free_r+0x20>
 800bc06:	001a      	movs	r2, r3
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d001      	beq.n	800bc12 <_free_r+0x4e>
 800bc0e:	42a3      	cmp	r3, r4
 800bc10:	d9f9      	bls.n	800bc06 <_free_r+0x42>
 800bc12:	6811      	ldr	r1, [r2, #0]
 800bc14:	1850      	adds	r0, r2, r1
 800bc16:	42a0      	cmp	r0, r4
 800bc18:	d10b      	bne.n	800bc32 <_free_r+0x6e>
 800bc1a:	6820      	ldr	r0, [r4, #0]
 800bc1c:	1809      	adds	r1, r1, r0
 800bc1e:	1850      	adds	r0, r2, r1
 800bc20:	6011      	str	r1, [r2, #0]
 800bc22:	4283      	cmp	r3, r0
 800bc24:	d1e0      	bne.n	800bbe8 <_free_r+0x24>
 800bc26:	6818      	ldr	r0, [r3, #0]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	1841      	adds	r1, r0, r1
 800bc2c:	6011      	str	r1, [r2, #0]
 800bc2e:	6053      	str	r3, [r2, #4]
 800bc30:	e7da      	b.n	800bbe8 <_free_r+0x24>
 800bc32:	42a0      	cmp	r0, r4
 800bc34:	d902      	bls.n	800bc3c <_free_r+0x78>
 800bc36:	230c      	movs	r3, #12
 800bc38:	602b      	str	r3, [r5, #0]
 800bc3a:	e7d5      	b.n	800bbe8 <_free_r+0x24>
 800bc3c:	6820      	ldr	r0, [r4, #0]
 800bc3e:	1821      	adds	r1, r4, r0
 800bc40:	428b      	cmp	r3, r1
 800bc42:	d103      	bne.n	800bc4c <_free_r+0x88>
 800bc44:	6819      	ldr	r1, [r3, #0]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	1809      	adds	r1, r1, r0
 800bc4a:	6021      	str	r1, [r4, #0]
 800bc4c:	6063      	str	r3, [r4, #4]
 800bc4e:	6054      	str	r4, [r2, #4]
 800bc50:	e7ca      	b.n	800bbe8 <_free_r+0x24>
 800bc52:	46c0      	nop			; (mov r8, r8)
 800bc54:	20000668 	.word	0x20000668

0800bc58 <malloc>:
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	4b03      	ldr	r3, [pc, #12]	; (800bc68 <malloc+0x10>)
 800bc5c:	0001      	movs	r1, r0
 800bc5e:	6818      	ldr	r0, [r3, #0]
 800bc60:	f000 f826 	bl	800bcb0 <_malloc_r>
 800bc64:	bd10      	pop	{r4, pc}
 800bc66:	46c0      	nop			; (mov r8, r8)
 800bc68:	2000007c 	.word	0x2000007c

0800bc6c <sbrk_aligned>:
 800bc6c:	b570      	push	{r4, r5, r6, lr}
 800bc6e:	4e0f      	ldr	r6, [pc, #60]	; (800bcac <sbrk_aligned+0x40>)
 800bc70:	000d      	movs	r5, r1
 800bc72:	6831      	ldr	r1, [r6, #0]
 800bc74:	0004      	movs	r4, r0
 800bc76:	2900      	cmp	r1, #0
 800bc78:	d102      	bne.n	800bc80 <sbrk_aligned+0x14>
 800bc7a:	f001 fe57 	bl	800d92c <_sbrk_r>
 800bc7e:	6030      	str	r0, [r6, #0]
 800bc80:	0029      	movs	r1, r5
 800bc82:	0020      	movs	r0, r4
 800bc84:	f001 fe52 	bl	800d92c <_sbrk_r>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d00a      	beq.n	800bca2 <sbrk_aligned+0x36>
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	1cc5      	adds	r5, r0, #3
 800bc90:	439d      	bics	r5, r3
 800bc92:	42a8      	cmp	r0, r5
 800bc94:	d007      	beq.n	800bca6 <sbrk_aligned+0x3a>
 800bc96:	1a29      	subs	r1, r5, r0
 800bc98:	0020      	movs	r0, r4
 800bc9a:	f001 fe47 	bl	800d92c <_sbrk_r>
 800bc9e:	3001      	adds	r0, #1
 800bca0:	d101      	bne.n	800bca6 <sbrk_aligned+0x3a>
 800bca2:	2501      	movs	r5, #1
 800bca4:	426d      	negs	r5, r5
 800bca6:	0028      	movs	r0, r5
 800bca8:	bd70      	pop	{r4, r5, r6, pc}
 800bcaa:	46c0      	nop			; (mov r8, r8)
 800bcac:	2000066c 	.word	0x2000066c

0800bcb0 <_malloc_r>:
 800bcb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcb2:	2203      	movs	r2, #3
 800bcb4:	1ccb      	adds	r3, r1, #3
 800bcb6:	4393      	bics	r3, r2
 800bcb8:	3308      	adds	r3, #8
 800bcba:	0006      	movs	r6, r0
 800bcbc:	001f      	movs	r7, r3
 800bcbe:	2b0c      	cmp	r3, #12
 800bcc0:	d238      	bcs.n	800bd34 <_malloc_r+0x84>
 800bcc2:	270c      	movs	r7, #12
 800bcc4:	42b9      	cmp	r1, r7
 800bcc6:	d837      	bhi.n	800bd38 <_malloc_r+0x88>
 800bcc8:	0030      	movs	r0, r6
 800bcca:	f000 f873 	bl	800bdb4 <__malloc_lock>
 800bcce:	4b38      	ldr	r3, [pc, #224]	; (800bdb0 <_malloc_r+0x100>)
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	001c      	movs	r4, r3
 800bcd6:	2c00      	cmp	r4, #0
 800bcd8:	d133      	bne.n	800bd42 <_malloc_r+0x92>
 800bcda:	0039      	movs	r1, r7
 800bcdc:	0030      	movs	r0, r6
 800bcde:	f7ff ffc5 	bl	800bc6c <sbrk_aligned>
 800bce2:	0004      	movs	r4, r0
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d15e      	bne.n	800bda6 <_malloc_r+0xf6>
 800bce8:	9b00      	ldr	r3, [sp, #0]
 800bcea:	681c      	ldr	r4, [r3, #0]
 800bcec:	0025      	movs	r5, r4
 800bcee:	2d00      	cmp	r5, #0
 800bcf0:	d14e      	bne.n	800bd90 <_malloc_r+0xe0>
 800bcf2:	2c00      	cmp	r4, #0
 800bcf4:	d051      	beq.n	800bd9a <_malloc_r+0xea>
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	0029      	movs	r1, r5
 800bcfa:	18e3      	adds	r3, r4, r3
 800bcfc:	0030      	movs	r0, r6
 800bcfe:	9301      	str	r3, [sp, #4]
 800bd00:	f001 fe14 	bl	800d92c <_sbrk_r>
 800bd04:	9b01      	ldr	r3, [sp, #4]
 800bd06:	4283      	cmp	r3, r0
 800bd08:	d147      	bne.n	800bd9a <_malloc_r+0xea>
 800bd0a:	6823      	ldr	r3, [r4, #0]
 800bd0c:	0030      	movs	r0, r6
 800bd0e:	1aff      	subs	r7, r7, r3
 800bd10:	0039      	movs	r1, r7
 800bd12:	f7ff ffab 	bl	800bc6c <sbrk_aligned>
 800bd16:	3001      	adds	r0, #1
 800bd18:	d03f      	beq.n	800bd9a <_malloc_r+0xea>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	19db      	adds	r3, r3, r7
 800bd1e:	6023      	str	r3, [r4, #0]
 800bd20:	9b00      	ldr	r3, [sp, #0]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d040      	beq.n	800bdaa <_malloc_r+0xfa>
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	42a2      	cmp	r2, r4
 800bd2c:	d133      	bne.n	800bd96 <_malloc_r+0xe6>
 800bd2e:	2200      	movs	r2, #0
 800bd30:	605a      	str	r2, [r3, #4]
 800bd32:	e014      	b.n	800bd5e <_malloc_r+0xae>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	dac5      	bge.n	800bcc4 <_malloc_r+0x14>
 800bd38:	230c      	movs	r3, #12
 800bd3a:	2500      	movs	r5, #0
 800bd3c:	6033      	str	r3, [r6, #0]
 800bd3e:	0028      	movs	r0, r5
 800bd40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd42:	6821      	ldr	r1, [r4, #0]
 800bd44:	1bc9      	subs	r1, r1, r7
 800bd46:	d420      	bmi.n	800bd8a <_malloc_r+0xda>
 800bd48:	290b      	cmp	r1, #11
 800bd4a:	d918      	bls.n	800bd7e <_malloc_r+0xce>
 800bd4c:	19e2      	adds	r2, r4, r7
 800bd4e:	6027      	str	r7, [r4, #0]
 800bd50:	42a3      	cmp	r3, r4
 800bd52:	d112      	bne.n	800bd7a <_malloc_r+0xca>
 800bd54:	9b00      	ldr	r3, [sp, #0]
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	6863      	ldr	r3, [r4, #4]
 800bd5a:	6011      	str	r1, [r2, #0]
 800bd5c:	6053      	str	r3, [r2, #4]
 800bd5e:	0030      	movs	r0, r6
 800bd60:	0025      	movs	r5, r4
 800bd62:	f000 f82f 	bl	800bdc4 <__malloc_unlock>
 800bd66:	2207      	movs	r2, #7
 800bd68:	350b      	adds	r5, #11
 800bd6a:	1d23      	adds	r3, r4, #4
 800bd6c:	4395      	bics	r5, r2
 800bd6e:	1aea      	subs	r2, r5, r3
 800bd70:	429d      	cmp	r5, r3
 800bd72:	d0e4      	beq.n	800bd3e <_malloc_r+0x8e>
 800bd74:	1b5b      	subs	r3, r3, r5
 800bd76:	50a3      	str	r3, [r4, r2]
 800bd78:	e7e1      	b.n	800bd3e <_malloc_r+0x8e>
 800bd7a:	605a      	str	r2, [r3, #4]
 800bd7c:	e7ec      	b.n	800bd58 <_malloc_r+0xa8>
 800bd7e:	6862      	ldr	r2, [r4, #4]
 800bd80:	42a3      	cmp	r3, r4
 800bd82:	d1d5      	bne.n	800bd30 <_malloc_r+0x80>
 800bd84:	9b00      	ldr	r3, [sp, #0]
 800bd86:	601a      	str	r2, [r3, #0]
 800bd88:	e7e9      	b.n	800bd5e <_malloc_r+0xae>
 800bd8a:	0023      	movs	r3, r4
 800bd8c:	6864      	ldr	r4, [r4, #4]
 800bd8e:	e7a2      	b.n	800bcd6 <_malloc_r+0x26>
 800bd90:	002c      	movs	r4, r5
 800bd92:	686d      	ldr	r5, [r5, #4]
 800bd94:	e7ab      	b.n	800bcee <_malloc_r+0x3e>
 800bd96:	0013      	movs	r3, r2
 800bd98:	e7c4      	b.n	800bd24 <_malloc_r+0x74>
 800bd9a:	230c      	movs	r3, #12
 800bd9c:	0030      	movs	r0, r6
 800bd9e:	6033      	str	r3, [r6, #0]
 800bda0:	f000 f810 	bl	800bdc4 <__malloc_unlock>
 800bda4:	e7cb      	b.n	800bd3e <_malloc_r+0x8e>
 800bda6:	6027      	str	r7, [r4, #0]
 800bda8:	e7d9      	b.n	800bd5e <_malloc_r+0xae>
 800bdaa:	605b      	str	r3, [r3, #4]
 800bdac:	deff      	udf	#255	; 0xff
 800bdae:	46c0      	nop			; (mov r8, r8)
 800bdb0:	20000668 	.word	0x20000668

0800bdb4 <__malloc_lock>:
 800bdb4:	b510      	push	{r4, lr}
 800bdb6:	4802      	ldr	r0, [pc, #8]	; (800bdc0 <__malloc_lock+0xc>)
 800bdb8:	f7ff f855 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800bdbc:	bd10      	pop	{r4, pc}
 800bdbe:	46c0      	nop			; (mov r8, r8)
 800bdc0:	20000664 	.word	0x20000664

0800bdc4 <__malloc_unlock>:
 800bdc4:	b510      	push	{r4, lr}
 800bdc6:	4802      	ldr	r0, [pc, #8]	; (800bdd0 <__malloc_unlock+0xc>)
 800bdc8:	f7ff f84e 	bl	800ae68 <__retarget_lock_release_recursive>
 800bdcc:	bd10      	pop	{r4, pc}
 800bdce:	46c0      	nop			; (mov r8, r8)
 800bdd0:	20000664 	.word	0x20000664

0800bdd4 <_Balloc>:
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	69c5      	ldr	r5, [r0, #28]
 800bdd8:	0006      	movs	r6, r0
 800bdda:	000c      	movs	r4, r1
 800bddc:	2d00      	cmp	r5, #0
 800bdde:	d10e      	bne.n	800bdfe <_Balloc+0x2a>
 800bde0:	2010      	movs	r0, #16
 800bde2:	f7ff ff39 	bl	800bc58 <malloc>
 800bde6:	1e02      	subs	r2, r0, #0
 800bde8:	61f0      	str	r0, [r6, #28]
 800bdea:	d104      	bne.n	800bdf6 <_Balloc+0x22>
 800bdec:	216b      	movs	r1, #107	; 0x6b
 800bdee:	4b19      	ldr	r3, [pc, #100]	; (800be54 <_Balloc+0x80>)
 800bdf0:	4819      	ldr	r0, [pc, #100]	; (800be58 <_Balloc+0x84>)
 800bdf2:	f001 fdbd 	bl	800d970 <__assert_func>
 800bdf6:	6045      	str	r5, [r0, #4]
 800bdf8:	6085      	str	r5, [r0, #8]
 800bdfa:	6005      	str	r5, [r0, #0]
 800bdfc:	60c5      	str	r5, [r0, #12]
 800bdfe:	69f5      	ldr	r5, [r6, #28]
 800be00:	68eb      	ldr	r3, [r5, #12]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d013      	beq.n	800be2e <_Balloc+0x5a>
 800be06:	69f3      	ldr	r3, [r6, #28]
 800be08:	00a2      	lsls	r2, r4, #2
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	189b      	adds	r3, r3, r2
 800be0e:	6818      	ldr	r0, [r3, #0]
 800be10:	2800      	cmp	r0, #0
 800be12:	d118      	bne.n	800be46 <_Balloc+0x72>
 800be14:	2101      	movs	r1, #1
 800be16:	000d      	movs	r5, r1
 800be18:	40a5      	lsls	r5, r4
 800be1a:	1d6a      	adds	r2, r5, #5
 800be1c:	0030      	movs	r0, r6
 800be1e:	0092      	lsls	r2, r2, #2
 800be20:	f001 fdc4 	bl	800d9ac <_calloc_r>
 800be24:	2800      	cmp	r0, #0
 800be26:	d00c      	beq.n	800be42 <_Balloc+0x6e>
 800be28:	6044      	str	r4, [r0, #4]
 800be2a:	6085      	str	r5, [r0, #8]
 800be2c:	e00d      	b.n	800be4a <_Balloc+0x76>
 800be2e:	2221      	movs	r2, #33	; 0x21
 800be30:	2104      	movs	r1, #4
 800be32:	0030      	movs	r0, r6
 800be34:	f001 fdba 	bl	800d9ac <_calloc_r>
 800be38:	69f3      	ldr	r3, [r6, #28]
 800be3a:	60e8      	str	r0, [r5, #12]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1e1      	bne.n	800be06 <_Balloc+0x32>
 800be42:	2000      	movs	r0, #0
 800be44:	bd70      	pop	{r4, r5, r6, pc}
 800be46:	6802      	ldr	r2, [r0, #0]
 800be48:	601a      	str	r2, [r3, #0]
 800be4a:	2300      	movs	r3, #0
 800be4c:	6103      	str	r3, [r0, #16]
 800be4e:	60c3      	str	r3, [r0, #12]
 800be50:	e7f8      	b.n	800be44 <_Balloc+0x70>
 800be52:	46c0      	nop			; (mov r8, r8)
 800be54:	0800ed6e 	.word	0x0800ed6e
 800be58:	0800edee 	.word	0x0800edee

0800be5c <_Bfree>:
 800be5c:	b570      	push	{r4, r5, r6, lr}
 800be5e:	69c6      	ldr	r6, [r0, #28]
 800be60:	0005      	movs	r5, r0
 800be62:	000c      	movs	r4, r1
 800be64:	2e00      	cmp	r6, #0
 800be66:	d10e      	bne.n	800be86 <_Bfree+0x2a>
 800be68:	2010      	movs	r0, #16
 800be6a:	f7ff fef5 	bl	800bc58 <malloc>
 800be6e:	1e02      	subs	r2, r0, #0
 800be70:	61e8      	str	r0, [r5, #28]
 800be72:	d104      	bne.n	800be7e <_Bfree+0x22>
 800be74:	218f      	movs	r1, #143	; 0x8f
 800be76:	4b09      	ldr	r3, [pc, #36]	; (800be9c <_Bfree+0x40>)
 800be78:	4809      	ldr	r0, [pc, #36]	; (800bea0 <_Bfree+0x44>)
 800be7a:	f001 fd79 	bl	800d970 <__assert_func>
 800be7e:	6046      	str	r6, [r0, #4]
 800be80:	6086      	str	r6, [r0, #8]
 800be82:	6006      	str	r6, [r0, #0]
 800be84:	60c6      	str	r6, [r0, #12]
 800be86:	2c00      	cmp	r4, #0
 800be88:	d007      	beq.n	800be9a <_Bfree+0x3e>
 800be8a:	69eb      	ldr	r3, [r5, #28]
 800be8c:	6862      	ldr	r2, [r4, #4]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	0092      	lsls	r2, r2, #2
 800be92:	189b      	adds	r3, r3, r2
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	6022      	str	r2, [r4, #0]
 800be98:	601c      	str	r4, [r3, #0]
 800be9a:	bd70      	pop	{r4, r5, r6, pc}
 800be9c:	0800ed6e 	.word	0x0800ed6e
 800bea0:	0800edee 	.word	0x0800edee

0800bea4 <__multadd>:
 800bea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bea6:	000e      	movs	r6, r1
 800bea8:	9001      	str	r0, [sp, #4]
 800beaa:	000c      	movs	r4, r1
 800beac:	001d      	movs	r5, r3
 800beae:	2000      	movs	r0, #0
 800beb0:	690f      	ldr	r7, [r1, #16]
 800beb2:	3614      	adds	r6, #20
 800beb4:	6833      	ldr	r3, [r6, #0]
 800beb6:	3001      	adds	r0, #1
 800beb8:	b299      	uxth	r1, r3
 800beba:	4351      	muls	r1, r2
 800bebc:	0c1b      	lsrs	r3, r3, #16
 800bebe:	4353      	muls	r3, r2
 800bec0:	1949      	adds	r1, r1, r5
 800bec2:	0c0d      	lsrs	r5, r1, #16
 800bec4:	195b      	adds	r3, r3, r5
 800bec6:	0c1d      	lsrs	r5, r3, #16
 800bec8:	b289      	uxth	r1, r1
 800beca:	041b      	lsls	r3, r3, #16
 800becc:	185b      	adds	r3, r3, r1
 800bece:	c608      	stmia	r6!, {r3}
 800bed0:	4287      	cmp	r7, r0
 800bed2:	dcef      	bgt.n	800beb4 <__multadd+0x10>
 800bed4:	2d00      	cmp	r5, #0
 800bed6:	d022      	beq.n	800bf1e <__multadd+0x7a>
 800bed8:	68a3      	ldr	r3, [r4, #8]
 800beda:	42bb      	cmp	r3, r7
 800bedc:	dc19      	bgt.n	800bf12 <__multadd+0x6e>
 800bede:	6861      	ldr	r1, [r4, #4]
 800bee0:	9801      	ldr	r0, [sp, #4]
 800bee2:	3101      	adds	r1, #1
 800bee4:	f7ff ff76 	bl	800bdd4 <_Balloc>
 800bee8:	1e06      	subs	r6, r0, #0
 800beea:	d105      	bne.n	800bef8 <__multadd+0x54>
 800beec:	0032      	movs	r2, r6
 800beee:	21ba      	movs	r1, #186	; 0xba
 800bef0:	4b0c      	ldr	r3, [pc, #48]	; (800bf24 <__multadd+0x80>)
 800bef2:	480d      	ldr	r0, [pc, #52]	; (800bf28 <__multadd+0x84>)
 800bef4:	f001 fd3c 	bl	800d970 <__assert_func>
 800bef8:	0021      	movs	r1, r4
 800befa:	6922      	ldr	r2, [r4, #16]
 800befc:	310c      	adds	r1, #12
 800befe:	3202      	adds	r2, #2
 800bf00:	0092      	lsls	r2, r2, #2
 800bf02:	300c      	adds	r0, #12
 800bf04:	f001 fd24 	bl	800d950 <memcpy>
 800bf08:	0021      	movs	r1, r4
 800bf0a:	9801      	ldr	r0, [sp, #4]
 800bf0c:	f7ff ffa6 	bl	800be5c <_Bfree>
 800bf10:	0034      	movs	r4, r6
 800bf12:	1d3b      	adds	r3, r7, #4
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	18e3      	adds	r3, r4, r3
 800bf18:	605d      	str	r5, [r3, #4]
 800bf1a:	1c7b      	adds	r3, r7, #1
 800bf1c:	6123      	str	r3, [r4, #16]
 800bf1e:	0020      	movs	r0, r4
 800bf20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	0800eddd 	.word	0x0800eddd
 800bf28:	0800edee 	.word	0x0800edee

0800bf2c <__s2b>:
 800bf2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf2e:	0006      	movs	r6, r0
 800bf30:	0018      	movs	r0, r3
 800bf32:	000c      	movs	r4, r1
 800bf34:	3008      	adds	r0, #8
 800bf36:	2109      	movs	r1, #9
 800bf38:	9301      	str	r3, [sp, #4]
 800bf3a:	0015      	movs	r5, r2
 800bf3c:	f7f4 f98a 	bl	8000254 <__divsi3>
 800bf40:	2301      	movs	r3, #1
 800bf42:	2100      	movs	r1, #0
 800bf44:	4283      	cmp	r3, r0
 800bf46:	db0a      	blt.n	800bf5e <__s2b+0x32>
 800bf48:	0030      	movs	r0, r6
 800bf4a:	f7ff ff43 	bl	800bdd4 <_Balloc>
 800bf4e:	1e01      	subs	r1, r0, #0
 800bf50:	d108      	bne.n	800bf64 <__s2b+0x38>
 800bf52:	000a      	movs	r2, r1
 800bf54:	4b19      	ldr	r3, [pc, #100]	; (800bfbc <__s2b+0x90>)
 800bf56:	481a      	ldr	r0, [pc, #104]	; (800bfc0 <__s2b+0x94>)
 800bf58:	31d3      	adds	r1, #211	; 0xd3
 800bf5a:	f001 fd09 	bl	800d970 <__assert_func>
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	3101      	adds	r1, #1
 800bf62:	e7ef      	b.n	800bf44 <__s2b+0x18>
 800bf64:	9b08      	ldr	r3, [sp, #32]
 800bf66:	6143      	str	r3, [r0, #20]
 800bf68:	2301      	movs	r3, #1
 800bf6a:	6103      	str	r3, [r0, #16]
 800bf6c:	2d09      	cmp	r5, #9
 800bf6e:	dd18      	ble.n	800bfa2 <__s2b+0x76>
 800bf70:	0023      	movs	r3, r4
 800bf72:	3309      	adds	r3, #9
 800bf74:	001f      	movs	r7, r3
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	1964      	adds	r4, r4, r5
 800bf7a:	783b      	ldrb	r3, [r7, #0]
 800bf7c:	220a      	movs	r2, #10
 800bf7e:	0030      	movs	r0, r6
 800bf80:	3b30      	subs	r3, #48	; 0x30
 800bf82:	f7ff ff8f 	bl	800bea4 <__multadd>
 800bf86:	3701      	adds	r7, #1
 800bf88:	0001      	movs	r1, r0
 800bf8a:	42a7      	cmp	r7, r4
 800bf8c:	d1f5      	bne.n	800bf7a <__s2b+0x4e>
 800bf8e:	002c      	movs	r4, r5
 800bf90:	9b00      	ldr	r3, [sp, #0]
 800bf92:	3c08      	subs	r4, #8
 800bf94:	191c      	adds	r4, r3, r4
 800bf96:	002f      	movs	r7, r5
 800bf98:	9b01      	ldr	r3, [sp, #4]
 800bf9a:	429f      	cmp	r7, r3
 800bf9c:	db04      	blt.n	800bfa8 <__s2b+0x7c>
 800bf9e:	0008      	movs	r0, r1
 800bfa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfa2:	2509      	movs	r5, #9
 800bfa4:	340a      	adds	r4, #10
 800bfa6:	e7f6      	b.n	800bf96 <__s2b+0x6a>
 800bfa8:	1b63      	subs	r3, r4, r5
 800bfaa:	5ddb      	ldrb	r3, [r3, r7]
 800bfac:	220a      	movs	r2, #10
 800bfae:	0030      	movs	r0, r6
 800bfb0:	3b30      	subs	r3, #48	; 0x30
 800bfb2:	f7ff ff77 	bl	800bea4 <__multadd>
 800bfb6:	3701      	adds	r7, #1
 800bfb8:	0001      	movs	r1, r0
 800bfba:	e7ed      	b.n	800bf98 <__s2b+0x6c>
 800bfbc:	0800eddd 	.word	0x0800eddd
 800bfc0:	0800edee 	.word	0x0800edee

0800bfc4 <__hi0bits>:
 800bfc4:	0003      	movs	r3, r0
 800bfc6:	0c02      	lsrs	r2, r0, #16
 800bfc8:	2000      	movs	r0, #0
 800bfca:	4282      	cmp	r2, r0
 800bfcc:	d101      	bne.n	800bfd2 <__hi0bits+0xe>
 800bfce:	041b      	lsls	r3, r3, #16
 800bfd0:	3010      	adds	r0, #16
 800bfd2:	0e1a      	lsrs	r2, r3, #24
 800bfd4:	d101      	bne.n	800bfda <__hi0bits+0x16>
 800bfd6:	3008      	adds	r0, #8
 800bfd8:	021b      	lsls	r3, r3, #8
 800bfda:	0f1a      	lsrs	r2, r3, #28
 800bfdc:	d101      	bne.n	800bfe2 <__hi0bits+0x1e>
 800bfde:	3004      	adds	r0, #4
 800bfe0:	011b      	lsls	r3, r3, #4
 800bfe2:	0f9a      	lsrs	r2, r3, #30
 800bfe4:	d101      	bne.n	800bfea <__hi0bits+0x26>
 800bfe6:	3002      	adds	r0, #2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	db03      	blt.n	800bff6 <__hi0bits+0x32>
 800bfee:	3001      	adds	r0, #1
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	d400      	bmi.n	800bff6 <__hi0bits+0x32>
 800bff4:	2020      	movs	r0, #32
 800bff6:	4770      	bx	lr

0800bff8 <__lo0bits>:
 800bff8:	6803      	ldr	r3, [r0, #0]
 800bffa:	0001      	movs	r1, r0
 800bffc:	2207      	movs	r2, #7
 800bffe:	0018      	movs	r0, r3
 800c000:	4010      	ands	r0, r2
 800c002:	4213      	tst	r3, r2
 800c004:	d00d      	beq.n	800c022 <__lo0bits+0x2a>
 800c006:	3a06      	subs	r2, #6
 800c008:	2000      	movs	r0, #0
 800c00a:	4213      	tst	r3, r2
 800c00c:	d105      	bne.n	800c01a <__lo0bits+0x22>
 800c00e:	3002      	adds	r0, #2
 800c010:	4203      	tst	r3, r0
 800c012:	d003      	beq.n	800c01c <__lo0bits+0x24>
 800c014:	40d3      	lsrs	r3, r2
 800c016:	0010      	movs	r0, r2
 800c018:	600b      	str	r3, [r1, #0]
 800c01a:	4770      	bx	lr
 800c01c:	089b      	lsrs	r3, r3, #2
 800c01e:	600b      	str	r3, [r1, #0]
 800c020:	e7fb      	b.n	800c01a <__lo0bits+0x22>
 800c022:	b29a      	uxth	r2, r3
 800c024:	2a00      	cmp	r2, #0
 800c026:	d101      	bne.n	800c02c <__lo0bits+0x34>
 800c028:	2010      	movs	r0, #16
 800c02a:	0c1b      	lsrs	r3, r3, #16
 800c02c:	b2da      	uxtb	r2, r3
 800c02e:	2a00      	cmp	r2, #0
 800c030:	d101      	bne.n	800c036 <__lo0bits+0x3e>
 800c032:	3008      	adds	r0, #8
 800c034:	0a1b      	lsrs	r3, r3, #8
 800c036:	071a      	lsls	r2, r3, #28
 800c038:	d101      	bne.n	800c03e <__lo0bits+0x46>
 800c03a:	3004      	adds	r0, #4
 800c03c:	091b      	lsrs	r3, r3, #4
 800c03e:	079a      	lsls	r2, r3, #30
 800c040:	d101      	bne.n	800c046 <__lo0bits+0x4e>
 800c042:	3002      	adds	r0, #2
 800c044:	089b      	lsrs	r3, r3, #2
 800c046:	07da      	lsls	r2, r3, #31
 800c048:	d4e9      	bmi.n	800c01e <__lo0bits+0x26>
 800c04a:	3001      	adds	r0, #1
 800c04c:	085b      	lsrs	r3, r3, #1
 800c04e:	d1e6      	bne.n	800c01e <__lo0bits+0x26>
 800c050:	2020      	movs	r0, #32
 800c052:	e7e2      	b.n	800c01a <__lo0bits+0x22>

0800c054 <__i2b>:
 800c054:	b510      	push	{r4, lr}
 800c056:	000c      	movs	r4, r1
 800c058:	2101      	movs	r1, #1
 800c05a:	f7ff febb 	bl	800bdd4 <_Balloc>
 800c05e:	2800      	cmp	r0, #0
 800c060:	d107      	bne.n	800c072 <__i2b+0x1e>
 800c062:	2146      	movs	r1, #70	; 0x46
 800c064:	4c05      	ldr	r4, [pc, #20]	; (800c07c <__i2b+0x28>)
 800c066:	0002      	movs	r2, r0
 800c068:	4b05      	ldr	r3, [pc, #20]	; (800c080 <__i2b+0x2c>)
 800c06a:	0020      	movs	r0, r4
 800c06c:	31ff      	adds	r1, #255	; 0xff
 800c06e:	f001 fc7f 	bl	800d970 <__assert_func>
 800c072:	2301      	movs	r3, #1
 800c074:	6144      	str	r4, [r0, #20]
 800c076:	6103      	str	r3, [r0, #16]
 800c078:	bd10      	pop	{r4, pc}
 800c07a:	46c0      	nop			; (mov r8, r8)
 800c07c:	0800edee 	.word	0x0800edee
 800c080:	0800eddd 	.word	0x0800eddd

0800c084 <__multiply>:
 800c084:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c086:	0015      	movs	r5, r2
 800c088:	690a      	ldr	r2, [r1, #16]
 800c08a:	692b      	ldr	r3, [r5, #16]
 800c08c:	000c      	movs	r4, r1
 800c08e:	b08b      	sub	sp, #44	; 0x2c
 800c090:	429a      	cmp	r2, r3
 800c092:	da01      	bge.n	800c098 <__multiply+0x14>
 800c094:	002c      	movs	r4, r5
 800c096:	000d      	movs	r5, r1
 800c098:	6927      	ldr	r7, [r4, #16]
 800c09a:	692e      	ldr	r6, [r5, #16]
 800c09c:	6861      	ldr	r1, [r4, #4]
 800c09e:	19bb      	adds	r3, r7, r6
 800c0a0:	9303      	str	r3, [sp, #12]
 800c0a2:	68a3      	ldr	r3, [r4, #8]
 800c0a4:	19ba      	adds	r2, r7, r6
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	da00      	bge.n	800c0ac <__multiply+0x28>
 800c0aa:	3101      	adds	r1, #1
 800c0ac:	f7ff fe92 	bl	800bdd4 <_Balloc>
 800c0b0:	9002      	str	r0, [sp, #8]
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d106      	bne.n	800c0c4 <__multiply+0x40>
 800c0b6:	21b1      	movs	r1, #177	; 0xb1
 800c0b8:	4b48      	ldr	r3, [pc, #288]	; (800c1dc <__multiply+0x158>)
 800c0ba:	4849      	ldr	r0, [pc, #292]	; (800c1e0 <__multiply+0x15c>)
 800c0bc:	9a02      	ldr	r2, [sp, #8]
 800c0be:	0049      	lsls	r1, r1, #1
 800c0c0:	f001 fc56 	bl	800d970 <__assert_func>
 800c0c4:	9b02      	ldr	r3, [sp, #8]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	3314      	adds	r3, #20
 800c0ca:	469c      	mov	ip, r3
 800c0cc:	19bb      	adds	r3, r7, r6
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4463      	add	r3, ip
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	4663      	mov	r3, ip
 800c0d6:	9904      	ldr	r1, [sp, #16]
 800c0d8:	428b      	cmp	r3, r1
 800c0da:	d32a      	bcc.n	800c132 <__multiply+0xae>
 800c0dc:	0023      	movs	r3, r4
 800c0de:	00bf      	lsls	r7, r7, #2
 800c0e0:	3314      	adds	r3, #20
 800c0e2:	3514      	adds	r5, #20
 800c0e4:	9308      	str	r3, [sp, #32]
 800c0e6:	00b6      	lsls	r6, r6, #2
 800c0e8:	19db      	adds	r3, r3, r7
 800c0ea:	9305      	str	r3, [sp, #20]
 800c0ec:	19ab      	adds	r3, r5, r6
 800c0ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c0f0:	2304      	movs	r3, #4
 800c0f2:	9306      	str	r3, [sp, #24]
 800c0f4:	0023      	movs	r3, r4
 800c0f6:	9a05      	ldr	r2, [sp, #20]
 800c0f8:	3315      	adds	r3, #21
 800c0fa:	9501      	str	r5, [sp, #4]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d305      	bcc.n	800c10c <__multiply+0x88>
 800c100:	1b13      	subs	r3, r2, r4
 800c102:	3b15      	subs	r3, #21
 800c104:	089b      	lsrs	r3, r3, #2
 800c106:	3301      	adds	r3, #1
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	9306      	str	r3, [sp, #24]
 800c10c:	9b01      	ldr	r3, [sp, #4]
 800c10e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c110:	4293      	cmp	r3, r2
 800c112:	d310      	bcc.n	800c136 <__multiply+0xb2>
 800c114:	9b03      	ldr	r3, [sp, #12]
 800c116:	2b00      	cmp	r3, #0
 800c118:	dd05      	ble.n	800c126 <__multiply+0xa2>
 800c11a:	9b04      	ldr	r3, [sp, #16]
 800c11c:	3b04      	subs	r3, #4
 800c11e:	9304      	str	r3, [sp, #16]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d056      	beq.n	800c1d4 <__multiply+0x150>
 800c126:	9b02      	ldr	r3, [sp, #8]
 800c128:	9a03      	ldr	r2, [sp, #12]
 800c12a:	0018      	movs	r0, r3
 800c12c:	611a      	str	r2, [r3, #16]
 800c12e:	b00b      	add	sp, #44	; 0x2c
 800c130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c132:	c304      	stmia	r3!, {r2}
 800c134:	e7cf      	b.n	800c0d6 <__multiply+0x52>
 800c136:	9b01      	ldr	r3, [sp, #4]
 800c138:	6818      	ldr	r0, [r3, #0]
 800c13a:	b280      	uxth	r0, r0
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d01e      	beq.n	800c17e <__multiply+0xfa>
 800c140:	4667      	mov	r7, ip
 800c142:	2500      	movs	r5, #0
 800c144:	9e08      	ldr	r6, [sp, #32]
 800c146:	ce02      	ldmia	r6!, {r1}
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	9307      	str	r3, [sp, #28]
 800c14c:	b28b      	uxth	r3, r1
 800c14e:	4343      	muls	r3, r0
 800c150:	001a      	movs	r2, r3
 800c152:	466b      	mov	r3, sp
 800c154:	8b9b      	ldrh	r3, [r3, #28]
 800c156:	18d3      	adds	r3, r2, r3
 800c158:	195b      	adds	r3, r3, r5
 800c15a:	0c0d      	lsrs	r5, r1, #16
 800c15c:	4345      	muls	r5, r0
 800c15e:	9a07      	ldr	r2, [sp, #28]
 800c160:	0c11      	lsrs	r1, r2, #16
 800c162:	1869      	adds	r1, r5, r1
 800c164:	0c1a      	lsrs	r2, r3, #16
 800c166:	188a      	adds	r2, r1, r2
 800c168:	b29b      	uxth	r3, r3
 800c16a:	0c15      	lsrs	r5, r2, #16
 800c16c:	0412      	lsls	r2, r2, #16
 800c16e:	431a      	orrs	r2, r3
 800c170:	9b05      	ldr	r3, [sp, #20]
 800c172:	c704      	stmia	r7!, {r2}
 800c174:	42b3      	cmp	r3, r6
 800c176:	d8e6      	bhi.n	800c146 <__multiply+0xc2>
 800c178:	4663      	mov	r3, ip
 800c17a:	9a06      	ldr	r2, [sp, #24]
 800c17c:	509d      	str	r5, [r3, r2]
 800c17e:	9b01      	ldr	r3, [sp, #4]
 800c180:	6818      	ldr	r0, [r3, #0]
 800c182:	0c00      	lsrs	r0, r0, #16
 800c184:	d020      	beq.n	800c1c8 <__multiply+0x144>
 800c186:	4663      	mov	r3, ip
 800c188:	0025      	movs	r5, r4
 800c18a:	4661      	mov	r1, ip
 800c18c:	2700      	movs	r7, #0
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3514      	adds	r5, #20
 800c192:	682a      	ldr	r2, [r5, #0]
 800c194:	680e      	ldr	r6, [r1, #0]
 800c196:	b292      	uxth	r2, r2
 800c198:	4342      	muls	r2, r0
 800c19a:	0c36      	lsrs	r6, r6, #16
 800c19c:	1992      	adds	r2, r2, r6
 800c19e:	19d2      	adds	r2, r2, r7
 800c1a0:	0416      	lsls	r6, r2, #16
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	431e      	orrs	r6, r3
 800c1a6:	600e      	str	r6, [r1, #0]
 800c1a8:	cd40      	ldmia	r5!, {r6}
 800c1aa:	684b      	ldr	r3, [r1, #4]
 800c1ac:	0c36      	lsrs	r6, r6, #16
 800c1ae:	4346      	muls	r6, r0
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	0c12      	lsrs	r2, r2, #16
 800c1b4:	18f3      	adds	r3, r6, r3
 800c1b6:	189b      	adds	r3, r3, r2
 800c1b8:	9a05      	ldr	r2, [sp, #20]
 800c1ba:	0c1f      	lsrs	r7, r3, #16
 800c1bc:	3104      	adds	r1, #4
 800c1be:	42aa      	cmp	r2, r5
 800c1c0:	d8e7      	bhi.n	800c192 <__multiply+0x10e>
 800c1c2:	4662      	mov	r2, ip
 800c1c4:	9906      	ldr	r1, [sp, #24]
 800c1c6:	5053      	str	r3, [r2, r1]
 800c1c8:	9b01      	ldr	r3, [sp, #4]
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	9301      	str	r3, [sp, #4]
 800c1ce:	2304      	movs	r3, #4
 800c1d0:	449c      	add	ip, r3
 800c1d2:	e79b      	b.n	800c10c <__multiply+0x88>
 800c1d4:	9b03      	ldr	r3, [sp, #12]
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	9303      	str	r3, [sp, #12]
 800c1da:	e79b      	b.n	800c114 <__multiply+0x90>
 800c1dc:	0800eddd 	.word	0x0800eddd
 800c1e0:	0800edee 	.word	0x0800edee

0800c1e4 <__pow5mult>:
 800c1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	0015      	movs	r5, r2
 800c1ea:	0007      	movs	r7, r0
 800c1ec:	000e      	movs	r6, r1
 800c1ee:	401a      	ands	r2, r3
 800c1f0:	421d      	tst	r5, r3
 800c1f2:	d008      	beq.n	800c206 <__pow5mult+0x22>
 800c1f4:	4925      	ldr	r1, [pc, #148]	; (800c28c <__pow5mult+0xa8>)
 800c1f6:	3a01      	subs	r2, #1
 800c1f8:	0092      	lsls	r2, r2, #2
 800c1fa:	5852      	ldr	r2, [r2, r1]
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	0031      	movs	r1, r6
 800c200:	f7ff fe50 	bl	800bea4 <__multadd>
 800c204:	0006      	movs	r6, r0
 800c206:	10ad      	asrs	r5, r5, #2
 800c208:	d03d      	beq.n	800c286 <__pow5mult+0xa2>
 800c20a:	69fc      	ldr	r4, [r7, #28]
 800c20c:	2c00      	cmp	r4, #0
 800c20e:	d10f      	bne.n	800c230 <__pow5mult+0x4c>
 800c210:	2010      	movs	r0, #16
 800c212:	f7ff fd21 	bl	800bc58 <malloc>
 800c216:	1e02      	subs	r2, r0, #0
 800c218:	61f8      	str	r0, [r7, #28]
 800c21a:	d105      	bne.n	800c228 <__pow5mult+0x44>
 800c21c:	21b4      	movs	r1, #180	; 0xb4
 800c21e:	4b1c      	ldr	r3, [pc, #112]	; (800c290 <__pow5mult+0xac>)
 800c220:	481c      	ldr	r0, [pc, #112]	; (800c294 <__pow5mult+0xb0>)
 800c222:	31ff      	adds	r1, #255	; 0xff
 800c224:	f001 fba4 	bl	800d970 <__assert_func>
 800c228:	6044      	str	r4, [r0, #4]
 800c22a:	6084      	str	r4, [r0, #8]
 800c22c:	6004      	str	r4, [r0, #0]
 800c22e:	60c4      	str	r4, [r0, #12]
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	689c      	ldr	r4, [r3, #8]
 800c234:	9301      	str	r3, [sp, #4]
 800c236:	2c00      	cmp	r4, #0
 800c238:	d108      	bne.n	800c24c <__pow5mult+0x68>
 800c23a:	0038      	movs	r0, r7
 800c23c:	4916      	ldr	r1, [pc, #88]	; (800c298 <__pow5mult+0xb4>)
 800c23e:	f7ff ff09 	bl	800c054 <__i2b>
 800c242:	9b01      	ldr	r3, [sp, #4]
 800c244:	0004      	movs	r4, r0
 800c246:	6098      	str	r0, [r3, #8]
 800c248:	2300      	movs	r3, #0
 800c24a:	6003      	str	r3, [r0, #0]
 800c24c:	2301      	movs	r3, #1
 800c24e:	421d      	tst	r5, r3
 800c250:	d00a      	beq.n	800c268 <__pow5mult+0x84>
 800c252:	0031      	movs	r1, r6
 800c254:	0022      	movs	r2, r4
 800c256:	0038      	movs	r0, r7
 800c258:	f7ff ff14 	bl	800c084 <__multiply>
 800c25c:	0031      	movs	r1, r6
 800c25e:	9001      	str	r0, [sp, #4]
 800c260:	0038      	movs	r0, r7
 800c262:	f7ff fdfb 	bl	800be5c <_Bfree>
 800c266:	9e01      	ldr	r6, [sp, #4]
 800c268:	106d      	asrs	r5, r5, #1
 800c26a:	d00c      	beq.n	800c286 <__pow5mult+0xa2>
 800c26c:	6820      	ldr	r0, [r4, #0]
 800c26e:	2800      	cmp	r0, #0
 800c270:	d107      	bne.n	800c282 <__pow5mult+0x9e>
 800c272:	0022      	movs	r2, r4
 800c274:	0021      	movs	r1, r4
 800c276:	0038      	movs	r0, r7
 800c278:	f7ff ff04 	bl	800c084 <__multiply>
 800c27c:	2300      	movs	r3, #0
 800c27e:	6020      	str	r0, [r4, #0]
 800c280:	6003      	str	r3, [r0, #0]
 800c282:	0004      	movs	r4, r0
 800c284:	e7e2      	b.n	800c24c <__pow5mult+0x68>
 800c286:	0030      	movs	r0, r6
 800c288:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c28a:	46c0      	nop			; (mov r8, r8)
 800c28c:	0800ef38 	.word	0x0800ef38
 800c290:	0800ed6e 	.word	0x0800ed6e
 800c294:	0800edee 	.word	0x0800edee
 800c298:	00000271 	.word	0x00000271

0800c29c <__lshift>:
 800c29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c29e:	000c      	movs	r4, r1
 800c2a0:	0017      	movs	r7, r2
 800c2a2:	6923      	ldr	r3, [r4, #16]
 800c2a4:	1155      	asrs	r5, r2, #5
 800c2a6:	b087      	sub	sp, #28
 800c2a8:	18eb      	adds	r3, r5, r3
 800c2aa:	9302      	str	r3, [sp, #8]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	6849      	ldr	r1, [r1, #4]
 800c2b2:	68a3      	ldr	r3, [r4, #8]
 800c2b4:	9004      	str	r0, [sp, #16]
 800c2b6:	9a01      	ldr	r2, [sp, #4]
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	db10      	blt.n	800c2de <__lshift+0x42>
 800c2bc:	9804      	ldr	r0, [sp, #16]
 800c2be:	f7ff fd89 	bl	800bdd4 <_Balloc>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	0002      	movs	r2, r0
 800c2c6:	0006      	movs	r6, r0
 800c2c8:	0019      	movs	r1, r3
 800c2ca:	3214      	adds	r2, #20
 800c2cc:	4298      	cmp	r0, r3
 800c2ce:	d10c      	bne.n	800c2ea <__lshift+0x4e>
 800c2d0:	31df      	adds	r1, #223	; 0xdf
 800c2d2:	0032      	movs	r2, r6
 800c2d4:	4b26      	ldr	r3, [pc, #152]	; (800c370 <__lshift+0xd4>)
 800c2d6:	4827      	ldr	r0, [pc, #156]	; (800c374 <__lshift+0xd8>)
 800c2d8:	31ff      	adds	r1, #255	; 0xff
 800c2da:	f001 fb49 	bl	800d970 <__assert_func>
 800c2de:	3101      	adds	r1, #1
 800c2e0:	005b      	lsls	r3, r3, #1
 800c2e2:	e7e8      	b.n	800c2b6 <__lshift+0x1a>
 800c2e4:	0098      	lsls	r0, r3, #2
 800c2e6:	5011      	str	r1, [r2, r0]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	42ab      	cmp	r3, r5
 800c2ec:	dbfa      	blt.n	800c2e4 <__lshift+0x48>
 800c2ee:	43eb      	mvns	r3, r5
 800c2f0:	17db      	asrs	r3, r3, #31
 800c2f2:	401d      	ands	r5, r3
 800c2f4:	211f      	movs	r1, #31
 800c2f6:	0023      	movs	r3, r4
 800c2f8:	0038      	movs	r0, r7
 800c2fa:	00ad      	lsls	r5, r5, #2
 800c2fc:	1955      	adds	r5, r2, r5
 800c2fe:	6922      	ldr	r2, [r4, #16]
 800c300:	3314      	adds	r3, #20
 800c302:	0092      	lsls	r2, r2, #2
 800c304:	4008      	ands	r0, r1
 800c306:	4684      	mov	ip, r0
 800c308:	189a      	adds	r2, r3, r2
 800c30a:	420f      	tst	r7, r1
 800c30c:	d02a      	beq.n	800c364 <__lshift+0xc8>
 800c30e:	3101      	adds	r1, #1
 800c310:	1a09      	subs	r1, r1, r0
 800c312:	9105      	str	r1, [sp, #20]
 800c314:	2100      	movs	r1, #0
 800c316:	9503      	str	r5, [sp, #12]
 800c318:	4667      	mov	r7, ip
 800c31a:	6818      	ldr	r0, [r3, #0]
 800c31c:	40b8      	lsls	r0, r7
 800c31e:	4308      	orrs	r0, r1
 800c320:	9903      	ldr	r1, [sp, #12]
 800c322:	c101      	stmia	r1!, {r0}
 800c324:	9103      	str	r1, [sp, #12]
 800c326:	9805      	ldr	r0, [sp, #20]
 800c328:	cb02      	ldmia	r3!, {r1}
 800c32a:	40c1      	lsrs	r1, r0
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d8f3      	bhi.n	800c318 <__lshift+0x7c>
 800c330:	0020      	movs	r0, r4
 800c332:	3015      	adds	r0, #21
 800c334:	2304      	movs	r3, #4
 800c336:	4282      	cmp	r2, r0
 800c338:	d304      	bcc.n	800c344 <__lshift+0xa8>
 800c33a:	1b13      	subs	r3, r2, r4
 800c33c:	3b15      	subs	r3, #21
 800c33e:	089b      	lsrs	r3, r3, #2
 800c340:	3301      	adds	r3, #1
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	50e9      	str	r1, [r5, r3]
 800c346:	2900      	cmp	r1, #0
 800c348:	d002      	beq.n	800c350 <__lshift+0xb4>
 800c34a:	9b02      	ldr	r3, [sp, #8]
 800c34c:	3302      	adds	r3, #2
 800c34e:	9301      	str	r3, [sp, #4]
 800c350:	9b01      	ldr	r3, [sp, #4]
 800c352:	9804      	ldr	r0, [sp, #16]
 800c354:	3b01      	subs	r3, #1
 800c356:	0021      	movs	r1, r4
 800c358:	6133      	str	r3, [r6, #16]
 800c35a:	f7ff fd7f 	bl	800be5c <_Bfree>
 800c35e:	0030      	movs	r0, r6
 800c360:	b007      	add	sp, #28
 800c362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c364:	cb02      	ldmia	r3!, {r1}
 800c366:	c502      	stmia	r5!, {r1}
 800c368:	429a      	cmp	r2, r3
 800c36a:	d8fb      	bhi.n	800c364 <__lshift+0xc8>
 800c36c:	e7f0      	b.n	800c350 <__lshift+0xb4>
 800c36e:	46c0      	nop			; (mov r8, r8)
 800c370:	0800eddd 	.word	0x0800eddd
 800c374:	0800edee 	.word	0x0800edee

0800c378 <__mcmp>:
 800c378:	b530      	push	{r4, r5, lr}
 800c37a:	690b      	ldr	r3, [r1, #16]
 800c37c:	6904      	ldr	r4, [r0, #16]
 800c37e:	0002      	movs	r2, r0
 800c380:	1ae0      	subs	r0, r4, r3
 800c382:	429c      	cmp	r4, r3
 800c384:	d10e      	bne.n	800c3a4 <__mcmp+0x2c>
 800c386:	3214      	adds	r2, #20
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	3114      	adds	r1, #20
 800c38c:	0014      	movs	r4, r2
 800c38e:	18c9      	adds	r1, r1, r3
 800c390:	18d2      	adds	r2, r2, r3
 800c392:	3a04      	subs	r2, #4
 800c394:	3904      	subs	r1, #4
 800c396:	6815      	ldr	r5, [r2, #0]
 800c398:	680b      	ldr	r3, [r1, #0]
 800c39a:	429d      	cmp	r5, r3
 800c39c:	d003      	beq.n	800c3a6 <__mcmp+0x2e>
 800c39e:	2001      	movs	r0, #1
 800c3a0:	429d      	cmp	r5, r3
 800c3a2:	d303      	bcc.n	800c3ac <__mcmp+0x34>
 800c3a4:	bd30      	pop	{r4, r5, pc}
 800c3a6:	4294      	cmp	r4, r2
 800c3a8:	d3f3      	bcc.n	800c392 <__mcmp+0x1a>
 800c3aa:	e7fb      	b.n	800c3a4 <__mcmp+0x2c>
 800c3ac:	4240      	negs	r0, r0
 800c3ae:	e7f9      	b.n	800c3a4 <__mcmp+0x2c>

0800c3b0 <__mdiff>:
 800c3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3b2:	000e      	movs	r6, r1
 800c3b4:	0007      	movs	r7, r0
 800c3b6:	0011      	movs	r1, r2
 800c3b8:	0030      	movs	r0, r6
 800c3ba:	b087      	sub	sp, #28
 800c3bc:	0014      	movs	r4, r2
 800c3be:	f7ff ffdb 	bl	800c378 <__mcmp>
 800c3c2:	1e05      	subs	r5, r0, #0
 800c3c4:	d110      	bne.n	800c3e8 <__mdiff+0x38>
 800c3c6:	0001      	movs	r1, r0
 800c3c8:	0038      	movs	r0, r7
 800c3ca:	f7ff fd03 	bl	800bdd4 <_Balloc>
 800c3ce:	1e02      	subs	r2, r0, #0
 800c3d0:	d104      	bne.n	800c3dc <__mdiff+0x2c>
 800c3d2:	4b3f      	ldr	r3, [pc, #252]	; (800c4d0 <__mdiff+0x120>)
 800c3d4:	483f      	ldr	r0, [pc, #252]	; (800c4d4 <__mdiff+0x124>)
 800c3d6:	4940      	ldr	r1, [pc, #256]	; (800c4d8 <__mdiff+0x128>)
 800c3d8:	f001 faca 	bl	800d970 <__assert_func>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	6145      	str	r5, [r0, #20]
 800c3e0:	6103      	str	r3, [r0, #16]
 800c3e2:	0010      	movs	r0, r2
 800c3e4:	b007      	add	sp, #28
 800c3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	9301      	str	r3, [sp, #4]
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	db04      	blt.n	800c3fa <__mdiff+0x4a>
 800c3f0:	0023      	movs	r3, r4
 800c3f2:	0034      	movs	r4, r6
 800c3f4:	001e      	movs	r6, r3
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	9301      	str	r3, [sp, #4]
 800c3fa:	0038      	movs	r0, r7
 800c3fc:	6861      	ldr	r1, [r4, #4]
 800c3fe:	f7ff fce9 	bl	800bdd4 <_Balloc>
 800c402:	1e02      	subs	r2, r0, #0
 800c404:	d103      	bne.n	800c40e <__mdiff+0x5e>
 800c406:	4b32      	ldr	r3, [pc, #200]	; (800c4d0 <__mdiff+0x120>)
 800c408:	4832      	ldr	r0, [pc, #200]	; (800c4d4 <__mdiff+0x124>)
 800c40a:	4934      	ldr	r1, [pc, #208]	; (800c4dc <__mdiff+0x12c>)
 800c40c:	e7e4      	b.n	800c3d8 <__mdiff+0x28>
 800c40e:	9b01      	ldr	r3, [sp, #4]
 800c410:	2700      	movs	r7, #0
 800c412:	60c3      	str	r3, [r0, #12]
 800c414:	6920      	ldr	r0, [r4, #16]
 800c416:	3414      	adds	r4, #20
 800c418:	0083      	lsls	r3, r0, #2
 800c41a:	18e3      	adds	r3, r4, r3
 800c41c:	0021      	movs	r1, r4
 800c41e:	9401      	str	r4, [sp, #4]
 800c420:	0034      	movs	r4, r6
 800c422:	9302      	str	r3, [sp, #8]
 800c424:	6933      	ldr	r3, [r6, #16]
 800c426:	3414      	adds	r4, #20
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	18e3      	adds	r3, r4, r3
 800c42c:	9303      	str	r3, [sp, #12]
 800c42e:	0013      	movs	r3, r2
 800c430:	3314      	adds	r3, #20
 800c432:	469c      	mov	ip, r3
 800c434:	9305      	str	r3, [sp, #20]
 800c436:	9104      	str	r1, [sp, #16]
 800c438:	9b04      	ldr	r3, [sp, #16]
 800c43a:	cc02      	ldmia	r4!, {r1}
 800c43c:	cb20      	ldmia	r3!, {r5}
 800c43e:	9304      	str	r3, [sp, #16]
 800c440:	b2ab      	uxth	r3, r5
 800c442:	19df      	adds	r7, r3, r7
 800c444:	b28b      	uxth	r3, r1
 800c446:	1afb      	subs	r3, r7, r3
 800c448:	0c09      	lsrs	r1, r1, #16
 800c44a:	0c2d      	lsrs	r5, r5, #16
 800c44c:	1a6d      	subs	r5, r5, r1
 800c44e:	1419      	asrs	r1, r3, #16
 800c450:	1869      	adds	r1, r5, r1
 800c452:	b29b      	uxth	r3, r3
 800c454:	140f      	asrs	r7, r1, #16
 800c456:	0409      	lsls	r1, r1, #16
 800c458:	4319      	orrs	r1, r3
 800c45a:	4663      	mov	r3, ip
 800c45c:	c302      	stmia	r3!, {r1}
 800c45e:	469c      	mov	ip, r3
 800c460:	9b03      	ldr	r3, [sp, #12]
 800c462:	42a3      	cmp	r3, r4
 800c464:	d8e8      	bhi.n	800c438 <__mdiff+0x88>
 800c466:	0031      	movs	r1, r6
 800c468:	9c03      	ldr	r4, [sp, #12]
 800c46a:	3115      	adds	r1, #21
 800c46c:	2304      	movs	r3, #4
 800c46e:	428c      	cmp	r4, r1
 800c470:	d304      	bcc.n	800c47c <__mdiff+0xcc>
 800c472:	1ba3      	subs	r3, r4, r6
 800c474:	3b15      	subs	r3, #21
 800c476:	089b      	lsrs	r3, r3, #2
 800c478:	3301      	adds	r3, #1
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	9901      	ldr	r1, [sp, #4]
 800c47e:	18cd      	adds	r5, r1, r3
 800c480:	9905      	ldr	r1, [sp, #20]
 800c482:	002e      	movs	r6, r5
 800c484:	18cb      	adds	r3, r1, r3
 800c486:	469c      	mov	ip, r3
 800c488:	9902      	ldr	r1, [sp, #8]
 800c48a:	428e      	cmp	r6, r1
 800c48c:	d310      	bcc.n	800c4b0 <__mdiff+0x100>
 800c48e:	9e02      	ldr	r6, [sp, #8]
 800c490:	1ee9      	subs	r1, r5, #3
 800c492:	2400      	movs	r4, #0
 800c494:	428e      	cmp	r6, r1
 800c496:	d304      	bcc.n	800c4a2 <__mdiff+0xf2>
 800c498:	0031      	movs	r1, r6
 800c49a:	3103      	adds	r1, #3
 800c49c:	1b49      	subs	r1, r1, r5
 800c49e:	0889      	lsrs	r1, r1, #2
 800c4a0:	008c      	lsls	r4, r1, #2
 800c4a2:	191b      	adds	r3, r3, r4
 800c4a4:	3b04      	subs	r3, #4
 800c4a6:	6819      	ldr	r1, [r3, #0]
 800c4a8:	2900      	cmp	r1, #0
 800c4aa:	d00f      	beq.n	800c4cc <__mdiff+0x11c>
 800c4ac:	6110      	str	r0, [r2, #16]
 800c4ae:	e798      	b.n	800c3e2 <__mdiff+0x32>
 800c4b0:	ce02      	ldmia	r6!, {r1}
 800c4b2:	b28c      	uxth	r4, r1
 800c4b4:	19e4      	adds	r4, r4, r7
 800c4b6:	0c0f      	lsrs	r7, r1, #16
 800c4b8:	1421      	asrs	r1, r4, #16
 800c4ba:	1879      	adds	r1, r7, r1
 800c4bc:	b2a4      	uxth	r4, r4
 800c4be:	140f      	asrs	r7, r1, #16
 800c4c0:	0409      	lsls	r1, r1, #16
 800c4c2:	4321      	orrs	r1, r4
 800c4c4:	4664      	mov	r4, ip
 800c4c6:	c402      	stmia	r4!, {r1}
 800c4c8:	46a4      	mov	ip, r4
 800c4ca:	e7dd      	b.n	800c488 <__mdiff+0xd8>
 800c4cc:	3801      	subs	r0, #1
 800c4ce:	e7e9      	b.n	800c4a4 <__mdiff+0xf4>
 800c4d0:	0800eddd 	.word	0x0800eddd
 800c4d4:	0800edee 	.word	0x0800edee
 800c4d8:	00000237 	.word	0x00000237
 800c4dc:	00000245 	.word	0x00000245

0800c4e0 <__ulp>:
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <__ulp+0x30>)
 800c4e4:	4019      	ands	r1, r3
 800c4e6:	4b0b      	ldr	r3, [pc, #44]	; (800c514 <__ulp+0x34>)
 800c4e8:	18c9      	adds	r1, r1, r3
 800c4ea:	4281      	cmp	r1, r0
 800c4ec:	dc06      	bgt.n	800c4fc <__ulp+0x1c>
 800c4ee:	4249      	negs	r1, r1
 800c4f0:	150b      	asrs	r3, r1, #20
 800c4f2:	2b13      	cmp	r3, #19
 800c4f4:	dc03      	bgt.n	800c4fe <__ulp+0x1e>
 800c4f6:	2180      	movs	r1, #128	; 0x80
 800c4f8:	0309      	lsls	r1, r1, #12
 800c4fa:	4119      	asrs	r1, r3
 800c4fc:	4770      	bx	lr
 800c4fe:	3b14      	subs	r3, #20
 800c500:	2001      	movs	r0, #1
 800c502:	2b1e      	cmp	r3, #30
 800c504:	dc02      	bgt.n	800c50c <__ulp+0x2c>
 800c506:	2080      	movs	r0, #128	; 0x80
 800c508:	0600      	lsls	r0, r0, #24
 800c50a:	40d8      	lsrs	r0, r3
 800c50c:	2100      	movs	r1, #0
 800c50e:	e7f5      	b.n	800c4fc <__ulp+0x1c>
 800c510:	7ff00000 	.word	0x7ff00000
 800c514:	fcc00000 	.word	0xfcc00000

0800c518 <__b2d>:
 800c518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c51a:	0006      	movs	r6, r0
 800c51c:	6903      	ldr	r3, [r0, #16]
 800c51e:	3614      	adds	r6, #20
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	18f3      	adds	r3, r6, r3
 800c524:	1f1d      	subs	r5, r3, #4
 800c526:	682c      	ldr	r4, [r5, #0]
 800c528:	000f      	movs	r7, r1
 800c52a:	0020      	movs	r0, r4
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	f7ff fd49 	bl	800bfc4 <__hi0bits>
 800c532:	2220      	movs	r2, #32
 800c534:	1a12      	subs	r2, r2, r0
 800c536:	603a      	str	r2, [r7, #0]
 800c538:	0003      	movs	r3, r0
 800c53a:	4a1c      	ldr	r2, [pc, #112]	; (800c5ac <__b2d+0x94>)
 800c53c:	280a      	cmp	r0, #10
 800c53e:	dc15      	bgt.n	800c56c <__b2d+0x54>
 800c540:	210b      	movs	r1, #11
 800c542:	0027      	movs	r7, r4
 800c544:	1a09      	subs	r1, r1, r0
 800c546:	40cf      	lsrs	r7, r1
 800c548:	433a      	orrs	r2, r7
 800c54a:	468c      	mov	ip, r1
 800c54c:	0011      	movs	r1, r2
 800c54e:	2200      	movs	r2, #0
 800c550:	42ae      	cmp	r6, r5
 800c552:	d202      	bcs.n	800c55a <__b2d+0x42>
 800c554:	9a01      	ldr	r2, [sp, #4]
 800c556:	3a08      	subs	r2, #8
 800c558:	6812      	ldr	r2, [r2, #0]
 800c55a:	3315      	adds	r3, #21
 800c55c:	409c      	lsls	r4, r3
 800c55e:	4663      	mov	r3, ip
 800c560:	0027      	movs	r7, r4
 800c562:	40da      	lsrs	r2, r3
 800c564:	4317      	orrs	r7, r2
 800c566:	0038      	movs	r0, r7
 800c568:	b003      	add	sp, #12
 800c56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c56c:	2700      	movs	r7, #0
 800c56e:	42ae      	cmp	r6, r5
 800c570:	d202      	bcs.n	800c578 <__b2d+0x60>
 800c572:	9d01      	ldr	r5, [sp, #4]
 800c574:	3d08      	subs	r5, #8
 800c576:	682f      	ldr	r7, [r5, #0]
 800c578:	210b      	movs	r1, #11
 800c57a:	4249      	negs	r1, r1
 800c57c:	468c      	mov	ip, r1
 800c57e:	449c      	add	ip, r3
 800c580:	2b0b      	cmp	r3, #11
 800c582:	d010      	beq.n	800c5a6 <__b2d+0x8e>
 800c584:	4661      	mov	r1, ip
 800c586:	2320      	movs	r3, #32
 800c588:	408c      	lsls	r4, r1
 800c58a:	1a5b      	subs	r3, r3, r1
 800c58c:	0039      	movs	r1, r7
 800c58e:	40d9      	lsrs	r1, r3
 800c590:	430c      	orrs	r4, r1
 800c592:	4322      	orrs	r2, r4
 800c594:	0011      	movs	r1, r2
 800c596:	2200      	movs	r2, #0
 800c598:	42b5      	cmp	r5, r6
 800c59a:	d901      	bls.n	800c5a0 <__b2d+0x88>
 800c59c:	3d04      	subs	r5, #4
 800c59e:	682a      	ldr	r2, [r5, #0]
 800c5a0:	4664      	mov	r4, ip
 800c5a2:	40a7      	lsls	r7, r4
 800c5a4:	e7dd      	b.n	800c562 <__b2d+0x4a>
 800c5a6:	4322      	orrs	r2, r4
 800c5a8:	0011      	movs	r1, r2
 800c5aa:	e7dc      	b.n	800c566 <__b2d+0x4e>
 800c5ac:	3ff00000 	.word	0x3ff00000

0800c5b0 <__d2b>:
 800c5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5b2:	2101      	movs	r1, #1
 800c5b4:	0014      	movs	r4, r2
 800c5b6:	001d      	movs	r5, r3
 800c5b8:	9f08      	ldr	r7, [sp, #32]
 800c5ba:	f7ff fc0b 	bl	800bdd4 <_Balloc>
 800c5be:	1e06      	subs	r6, r0, #0
 800c5c0:	d105      	bne.n	800c5ce <__d2b+0x1e>
 800c5c2:	0032      	movs	r2, r6
 800c5c4:	4b24      	ldr	r3, [pc, #144]	; (800c658 <__d2b+0xa8>)
 800c5c6:	4825      	ldr	r0, [pc, #148]	; (800c65c <__d2b+0xac>)
 800c5c8:	4925      	ldr	r1, [pc, #148]	; (800c660 <__d2b+0xb0>)
 800c5ca:	f001 f9d1 	bl	800d970 <__assert_func>
 800c5ce:	032b      	lsls	r3, r5, #12
 800c5d0:	006d      	lsls	r5, r5, #1
 800c5d2:	0b1b      	lsrs	r3, r3, #12
 800c5d4:	0d6d      	lsrs	r5, r5, #21
 800c5d6:	d125      	bne.n	800c624 <__d2b+0x74>
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	2c00      	cmp	r4, #0
 800c5dc:	d028      	beq.n	800c630 <__d2b+0x80>
 800c5de:	4668      	mov	r0, sp
 800c5e0:	9400      	str	r4, [sp, #0]
 800c5e2:	f7ff fd09 	bl	800bff8 <__lo0bits>
 800c5e6:	9b01      	ldr	r3, [sp, #4]
 800c5e8:	9900      	ldr	r1, [sp, #0]
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	d01e      	beq.n	800c62c <__d2b+0x7c>
 800c5ee:	2220      	movs	r2, #32
 800c5f0:	001c      	movs	r4, r3
 800c5f2:	1a12      	subs	r2, r2, r0
 800c5f4:	4094      	lsls	r4, r2
 800c5f6:	0022      	movs	r2, r4
 800c5f8:	40c3      	lsrs	r3, r0
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	6172      	str	r2, [r6, #20]
 800c5fe:	9301      	str	r3, [sp, #4]
 800c600:	9c01      	ldr	r4, [sp, #4]
 800c602:	61b4      	str	r4, [r6, #24]
 800c604:	1e63      	subs	r3, r4, #1
 800c606:	419c      	sbcs	r4, r3
 800c608:	3401      	adds	r4, #1
 800c60a:	6134      	str	r4, [r6, #16]
 800c60c:	2d00      	cmp	r5, #0
 800c60e:	d017      	beq.n	800c640 <__d2b+0x90>
 800c610:	2435      	movs	r4, #53	; 0x35
 800c612:	4b14      	ldr	r3, [pc, #80]	; (800c664 <__d2b+0xb4>)
 800c614:	18ed      	adds	r5, r5, r3
 800c616:	182d      	adds	r5, r5, r0
 800c618:	603d      	str	r5, [r7, #0]
 800c61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c61c:	1a24      	subs	r4, r4, r0
 800c61e:	601c      	str	r4, [r3, #0]
 800c620:	0030      	movs	r0, r6
 800c622:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c624:	2280      	movs	r2, #128	; 0x80
 800c626:	0352      	lsls	r2, r2, #13
 800c628:	4313      	orrs	r3, r2
 800c62a:	e7d5      	b.n	800c5d8 <__d2b+0x28>
 800c62c:	6171      	str	r1, [r6, #20]
 800c62e:	e7e7      	b.n	800c600 <__d2b+0x50>
 800c630:	a801      	add	r0, sp, #4
 800c632:	f7ff fce1 	bl	800bff8 <__lo0bits>
 800c636:	9b01      	ldr	r3, [sp, #4]
 800c638:	2401      	movs	r4, #1
 800c63a:	6173      	str	r3, [r6, #20]
 800c63c:	3020      	adds	r0, #32
 800c63e:	e7e4      	b.n	800c60a <__d2b+0x5a>
 800c640:	4b09      	ldr	r3, [pc, #36]	; (800c668 <__d2b+0xb8>)
 800c642:	18c0      	adds	r0, r0, r3
 800c644:	4b09      	ldr	r3, [pc, #36]	; (800c66c <__d2b+0xbc>)
 800c646:	6038      	str	r0, [r7, #0]
 800c648:	18e3      	adds	r3, r4, r3
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	18f3      	adds	r3, r6, r3
 800c64e:	6958      	ldr	r0, [r3, #20]
 800c650:	f7ff fcb8 	bl	800bfc4 <__hi0bits>
 800c654:	0164      	lsls	r4, r4, #5
 800c656:	e7e0      	b.n	800c61a <__d2b+0x6a>
 800c658:	0800eddd 	.word	0x0800eddd
 800c65c:	0800edee 	.word	0x0800edee
 800c660:	0000030f 	.word	0x0000030f
 800c664:	fffffbcd 	.word	0xfffffbcd
 800c668:	fffffbce 	.word	0xfffffbce
 800c66c:	3fffffff 	.word	0x3fffffff

0800c670 <__ratio>:
 800c670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c672:	b087      	sub	sp, #28
 800c674:	000f      	movs	r7, r1
 800c676:	a904      	add	r1, sp, #16
 800c678:	0006      	movs	r6, r0
 800c67a:	f7ff ff4d 	bl	800c518 <__b2d>
 800c67e:	9000      	str	r0, [sp, #0]
 800c680:	9101      	str	r1, [sp, #4]
 800c682:	9c00      	ldr	r4, [sp, #0]
 800c684:	9d01      	ldr	r5, [sp, #4]
 800c686:	0038      	movs	r0, r7
 800c688:	a905      	add	r1, sp, #20
 800c68a:	f7ff ff45 	bl	800c518 <__b2d>
 800c68e:	9002      	str	r0, [sp, #8]
 800c690:	9103      	str	r1, [sp, #12]
 800c692:	9a02      	ldr	r2, [sp, #8]
 800c694:	9b03      	ldr	r3, [sp, #12]
 800c696:	6930      	ldr	r0, [r6, #16]
 800c698:	6939      	ldr	r1, [r7, #16]
 800c69a:	9e04      	ldr	r6, [sp, #16]
 800c69c:	1a40      	subs	r0, r0, r1
 800c69e:	9905      	ldr	r1, [sp, #20]
 800c6a0:	0140      	lsls	r0, r0, #5
 800c6a2:	1a71      	subs	r1, r6, r1
 800c6a4:	1841      	adds	r1, r0, r1
 800c6a6:	0508      	lsls	r0, r1, #20
 800c6a8:	2900      	cmp	r1, #0
 800c6aa:	dd07      	ble.n	800c6bc <__ratio+0x4c>
 800c6ac:	9901      	ldr	r1, [sp, #4]
 800c6ae:	1845      	adds	r5, r0, r1
 800c6b0:	0020      	movs	r0, r4
 800c6b2:	0029      	movs	r1, r5
 800c6b4:	f7f4 fee4 	bl	8001480 <__aeabi_ddiv>
 800c6b8:	b007      	add	sp, #28
 800c6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6bc:	9903      	ldr	r1, [sp, #12]
 800c6be:	1a0b      	subs	r3, r1, r0
 800c6c0:	e7f6      	b.n	800c6b0 <__ratio+0x40>

0800c6c2 <__copybits>:
 800c6c2:	b570      	push	{r4, r5, r6, lr}
 800c6c4:	0014      	movs	r4, r2
 800c6c6:	0005      	movs	r5, r0
 800c6c8:	3901      	subs	r1, #1
 800c6ca:	6913      	ldr	r3, [r2, #16]
 800c6cc:	1149      	asrs	r1, r1, #5
 800c6ce:	3101      	adds	r1, #1
 800c6d0:	0089      	lsls	r1, r1, #2
 800c6d2:	3414      	adds	r4, #20
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	1841      	adds	r1, r0, r1
 800c6d8:	18e3      	adds	r3, r4, r3
 800c6da:	42a3      	cmp	r3, r4
 800c6dc:	d80d      	bhi.n	800c6fa <__copybits+0x38>
 800c6de:	0014      	movs	r4, r2
 800c6e0:	3411      	adds	r4, #17
 800c6e2:	2500      	movs	r5, #0
 800c6e4:	429c      	cmp	r4, r3
 800c6e6:	d803      	bhi.n	800c6f0 <__copybits+0x2e>
 800c6e8:	1a9b      	subs	r3, r3, r2
 800c6ea:	3b11      	subs	r3, #17
 800c6ec:	089b      	lsrs	r3, r3, #2
 800c6ee:	009d      	lsls	r5, r3, #2
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	1940      	adds	r0, r0, r5
 800c6f4:	4281      	cmp	r1, r0
 800c6f6:	d803      	bhi.n	800c700 <__copybits+0x3e>
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	cc40      	ldmia	r4!, {r6}
 800c6fc:	c540      	stmia	r5!, {r6}
 800c6fe:	e7ec      	b.n	800c6da <__copybits+0x18>
 800c700:	c008      	stmia	r0!, {r3}
 800c702:	e7f7      	b.n	800c6f4 <__copybits+0x32>

0800c704 <__any_on>:
 800c704:	0002      	movs	r2, r0
 800c706:	6900      	ldr	r0, [r0, #16]
 800c708:	b510      	push	{r4, lr}
 800c70a:	3214      	adds	r2, #20
 800c70c:	114b      	asrs	r3, r1, #5
 800c70e:	4298      	cmp	r0, r3
 800c710:	db13      	blt.n	800c73a <__any_on+0x36>
 800c712:	dd0c      	ble.n	800c72e <__any_on+0x2a>
 800c714:	241f      	movs	r4, #31
 800c716:	0008      	movs	r0, r1
 800c718:	4020      	ands	r0, r4
 800c71a:	4221      	tst	r1, r4
 800c71c:	d007      	beq.n	800c72e <__any_on+0x2a>
 800c71e:	0099      	lsls	r1, r3, #2
 800c720:	588c      	ldr	r4, [r1, r2]
 800c722:	0021      	movs	r1, r4
 800c724:	40c1      	lsrs	r1, r0
 800c726:	4081      	lsls	r1, r0
 800c728:	2001      	movs	r0, #1
 800c72a:	428c      	cmp	r4, r1
 800c72c:	d104      	bne.n	800c738 <__any_on+0x34>
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	18d3      	adds	r3, r2, r3
 800c732:	4293      	cmp	r3, r2
 800c734:	d803      	bhi.n	800c73e <__any_on+0x3a>
 800c736:	2000      	movs	r0, #0
 800c738:	bd10      	pop	{r4, pc}
 800c73a:	0003      	movs	r3, r0
 800c73c:	e7f7      	b.n	800c72e <__any_on+0x2a>
 800c73e:	3b04      	subs	r3, #4
 800c740:	6819      	ldr	r1, [r3, #0]
 800c742:	2900      	cmp	r1, #0
 800c744:	d0f5      	beq.n	800c732 <__any_on+0x2e>
 800c746:	2001      	movs	r0, #1
 800c748:	e7f6      	b.n	800c738 <__any_on+0x34>
	...

0800c74c <sulp>:
 800c74c:	b570      	push	{r4, r5, r6, lr}
 800c74e:	0016      	movs	r6, r2
 800c750:	000d      	movs	r5, r1
 800c752:	f7ff fec5 	bl	800c4e0 <__ulp>
 800c756:	2e00      	cmp	r6, #0
 800c758:	d00d      	beq.n	800c776 <sulp+0x2a>
 800c75a:	236b      	movs	r3, #107	; 0x6b
 800c75c:	006a      	lsls	r2, r5, #1
 800c75e:	0d52      	lsrs	r2, r2, #21
 800c760:	1a9b      	subs	r3, r3, r2
 800c762:	2b00      	cmp	r3, #0
 800c764:	dd07      	ble.n	800c776 <sulp+0x2a>
 800c766:	2400      	movs	r4, #0
 800c768:	4a03      	ldr	r2, [pc, #12]	; (800c778 <sulp+0x2c>)
 800c76a:	051b      	lsls	r3, r3, #20
 800c76c:	189d      	adds	r5, r3, r2
 800c76e:	002b      	movs	r3, r5
 800c770:	0022      	movs	r2, r4
 800c772:	f7f5 fa7f 	bl	8001c74 <__aeabi_dmul>
 800c776:	bd70      	pop	{r4, r5, r6, pc}
 800c778:	3ff00000 	.word	0x3ff00000

0800c77c <_strtod_l>:
 800c77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c77e:	b0a1      	sub	sp, #132	; 0x84
 800c780:	9219      	str	r2, [sp, #100]	; 0x64
 800c782:	2200      	movs	r2, #0
 800c784:	2600      	movs	r6, #0
 800c786:	2700      	movs	r7, #0
 800c788:	9004      	str	r0, [sp, #16]
 800c78a:	9107      	str	r1, [sp, #28]
 800c78c:	921c      	str	r2, [sp, #112]	; 0x70
 800c78e:	911b      	str	r1, [sp, #108]	; 0x6c
 800c790:	780a      	ldrb	r2, [r1, #0]
 800c792:	2a2b      	cmp	r2, #43	; 0x2b
 800c794:	d055      	beq.n	800c842 <_strtod_l+0xc6>
 800c796:	d841      	bhi.n	800c81c <_strtod_l+0xa0>
 800c798:	2a0d      	cmp	r2, #13
 800c79a:	d83b      	bhi.n	800c814 <_strtod_l+0x98>
 800c79c:	2a08      	cmp	r2, #8
 800c79e:	d83b      	bhi.n	800c818 <_strtod_l+0x9c>
 800c7a0:	2a00      	cmp	r2, #0
 800c7a2:	d044      	beq.n	800c82e <_strtod_l+0xb2>
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	920f      	str	r2, [sp, #60]	; 0x3c
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c7ac:	9109      	str	r1, [sp, #36]	; 0x24
 800c7ae:	782a      	ldrb	r2, [r5, #0]
 800c7b0:	2a30      	cmp	r2, #48	; 0x30
 800c7b2:	d000      	beq.n	800c7b6 <_strtod_l+0x3a>
 800c7b4:	e085      	b.n	800c8c2 <_strtod_l+0x146>
 800c7b6:	786a      	ldrb	r2, [r5, #1]
 800c7b8:	3120      	adds	r1, #32
 800c7ba:	438a      	bics	r2, r1
 800c7bc:	2a58      	cmp	r2, #88	; 0x58
 800c7be:	d000      	beq.n	800c7c2 <_strtod_l+0x46>
 800c7c0:	e075      	b.n	800c8ae <_strtod_l+0x132>
 800c7c2:	9302      	str	r3, [sp, #8]
 800c7c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7c6:	4a97      	ldr	r2, [pc, #604]	; (800ca24 <_strtod_l+0x2a8>)
 800c7c8:	9301      	str	r3, [sp, #4]
 800c7ca:	ab1c      	add	r3, sp, #112	; 0x70
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	9804      	ldr	r0, [sp, #16]
 800c7d0:	ab1d      	add	r3, sp, #116	; 0x74
 800c7d2:	a91b      	add	r1, sp, #108	; 0x6c
 800c7d4:	f001 f982 	bl	800dadc <__gethex>
 800c7d8:	230f      	movs	r3, #15
 800c7da:	0002      	movs	r2, r0
 800c7dc:	401a      	ands	r2, r3
 800c7de:	0004      	movs	r4, r0
 800c7e0:	9205      	str	r2, [sp, #20]
 800c7e2:	4218      	tst	r0, r3
 800c7e4:	d005      	beq.n	800c7f2 <_strtod_l+0x76>
 800c7e6:	2a06      	cmp	r2, #6
 800c7e8:	d12d      	bne.n	800c846 <_strtod_l+0xca>
 800c7ea:	1c6b      	adds	r3, r5, #1
 800c7ec:	931b      	str	r3, [sp, #108]	; 0x6c
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d002      	beq.n	800c7fe <_strtod_l+0x82>
 800c7f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c7fc:	6013      	str	r3, [r2, #0]
 800c7fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c800:	2b00      	cmp	r3, #0
 800c802:	d01b      	beq.n	800c83c <_strtod_l+0xc0>
 800c804:	2380      	movs	r3, #128	; 0x80
 800c806:	0032      	movs	r2, r6
 800c808:	061b      	lsls	r3, r3, #24
 800c80a:	18fb      	adds	r3, r7, r3
 800c80c:	0010      	movs	r0, r2
 800c80e:	0019      	movs	r1, r3
 800c810:	b021      	add	sp, #132	; 0x84
 800c812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c814:	2a20      	cmp	r2, #32
 800c816:	d1c5      	bne.n	800c7a4 <_strtod_l+0x28>
 800c818:	3101      	adds	r1, #1
 800c81a:	e7b8      	b.n	800c78e <_strtod_l+0x12>
 800c81c:	2a2d      	cmp	r2, #45	; 0x2d
 800c81e:	d1c1      	bne.n	800c7a4 <_strtod_l+0x28>
 800c820:	3a2c      	subs	r2, #44	; 0x2c
 800c822:	920f      	str	r2, [sp, #60]	; 0x3c
 800c824:	1c4a      	adds	r2, r1, #1
 800c826:	921b      	str	r2, [sp, #108]	; 0x6c
 800c828:	784a      	ldrb	r2, [r1, #1]
 800c82a:	2a00      	cmp	r2, #0
 800c82c:	d1bc      	bne.n	800c7a8 <_strtod_l+0x2c>
 800c82e:	9b07      	ldr	r3, [sp, #28]
 800c830:	931b      	str	r3, [sp, #108]	; 0x6c
 800c832:	2300      	movs	r3, #0
 800c834:	930f      	str	r3, [sp, #60]	; 0x3c
 800c836:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1dd      	bne.n	800c7f8 <_strtod_l+0x7c>
 800c83c:	0032      	movs	r2, r6
 800c83e:	003b      	movs	r3, r7
 800c840:	e7e4      	b.n	800c80c <_strtod_l+0x90>
 800c842:	2200      	movs	r2, #0
 800c844:	e7ed      	b.n	800c822 <_strtod_l+0xa6>
 800c846:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c848:	2a00      	cmp	r2, #0
 800c84a:	d007      	beq.n	800c85c <_strtod_l+0xe0>
 800c84c:	2135      	movs	r1, #53	; 0x35
 800c84e:	a81e      	add	r0, sp, #120	; 0x78
 800c850:	f7ff ff37 	bl	800c6c2 <__copybits>
 800c854:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c856:	9804      	ldr	r0, [sp, #16]
 800c858:	f7ff fb00 	bl	800be5c <_Bfree>
 800c85c:	9805      	ldr	r0, [sp, #20]
 800c85e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c860:	3801      	subs	r0, #1
 800c862:	2804      	cmp	r0, #4
 800c864:	d806      	bhi.n	800c874 <_strtod_l+0xf8>
 800c866:	f7f3 fc57 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c86a:	0312      	.short	0x0312
 800c86c:	1e1c      	.short	0x1e1c
 800c86e:	12          	.byte	0x12
 800c86f:	00          	.byte	0x00
 800c870:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c872:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c874:	05e4      	lsls	r4, r4, #23
 800c876:	d502      	bpl.n	800c87e <_strtod_l+0x102>
 800c878:	2380      	movs	r3, #128	; 0x80
 800c87a:	061b      	lsls	r3, r3, #24
 800c87c:	431f      	orrs	r7, r3
 800c87e:	4b6a      	ldr	r3, [pc, #424]	; (800ca28 <_strtod_l+0x2ac>)
 800c880:	423b      	tst	r3, r7
 800c882:	d1b6      	bne.n	800c7f2 <_strtod_l+0x76>
 800c884:	f7fe fac4 	bl	800ae10 <__errno>
 800c888:	2322      	movs	r3, #34	; 0x22
 800c88a:	6003      	str	r3, [r0, #0]
 800c88c:	e7b1      	b.n	800c7f2 <_strtod_l+0x76>
 800c88e:	4967      	ldr	r1, [pc, #412]	; (800ca2c <_strtod_l+0x2b0>)
 800c890:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c892:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c894:	400a      	ands	r2, r1
 800c896:	4966      	ldr	r1, [pc, #408]	; (800ca30 <_strtod_l+0x2b4>)
 800c898:	185b      	adds	r3, r3, r1
 800c89a:	051b      	lsls	r3, r3, #20
 800c89c:	431a      	orrs	r2, r3
 800c89e:	0017      	movs	r7, r2
 800c8a0:	e7e8      	b.n	800c874 <_strtod_l+0xf8>
 800c8a2:	4f61      	ldr	r7, [pc, #388]	; (800ca28 <_strtod_l+0x2ac>)
 800c8a4:	e7e6      	b.n	800c874 <_strtod_l+0xf8>
 800c8a6:	2601      	movs	r6, #1
 800c8a8:	4f62      	ldr	r7, [pc, #392]	; (800ca34 <_strtod_l+0x2b8>)
 800c8aa:	4276      	negs	r6, r6
 800c8ac:	e7e2      	b.n	800c874 <_strtod_l+0xf8>
 800c8ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8b0:	1c5a      	adds	r2, r3, #1
 800c8b2:	921b      	str	r2, [sp, #108]	; 0x6c
 800c8b4:	785b      	ldrb	r3, [r3, #1]
 800c8b6:	2b30      	cmp	r3, #48	; 0x30
 800c8b8:	d0f9      	beq.n	800c8ae <_strtod_l+0x132>
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d099      	beq.n	800c7f2 <_strtod_l+0x76>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8c2:	2500      	movs	r5, #0
 800c8c4:	220a      	movs	r2, #10
 800c8c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8c8:	950d      	str	r5, [sp, #52]	; 0x34
 800c8ca:	9310      	str	r3, [sp, #64]	; 0x40
 800c8cc:	9508      	str	r5, [sp, #32]
 800c8ce:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c8d0:	7804      	ldrb	r4, [r0, #0]
 800c8d2:	0023      	movs	r3, r4
 800c8d4:	3b30      	subs	r3, #48	; 0x30
 800c8d6:	b2d9      	uxtb	r1, r3
 800c8d8:	2909      	cmp	r1, #9
 800c8da:	d927      	bls.n	800c92c <_strtod_l+0x1b0>
 800c8dc:	2201      	movs	r2, #1
 800c8de:	4956      	ldr	r1, [pc, #344]	; (800ca38 <_strtod_l+0x2bc>)
 800c8e0:	f001 f812 	bl	800d908 <strncmp>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d031      	beq.n	800c94c <_strtod_l+0x1d0>
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	0023      	movs	r3, r4
 800c8ec:	4684      	mov	ip, r0
 800c8ee:	9a08      	ldr	r2, [sp, #32]
 800c8f0:	900c      	str	r0, [sp, #48]	; 0x30
 800c8f2:	9205      	str	r2, [sp, #20]
 800c8f4:	2220      	movs	r2, #32
 800c8f6:	0019      	movs	r1, r3
 800c8f8:	4391      	bics	r1, r2
 800c8fa:	000a      	movs	r2, r1
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	9106      	str	r1, [sp, #24]
 800c900:	2a45      	cmp	r2, #69	; 0x45
 800c902:	d000      	beq.n	800c906 <_strtod_l+0x18a>
 800c904:	e0c2      	b.n	800ca8c <_strtod_l+0x310>
 800c906:	9b05      	ldr	r3, [sp, #20]
 800c908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c90a:	4303      	orrs	r3, r0
 800c90c:	4313      	orrs	r3, r2
 800c90e:	428b      	cmp	r3, r1
 800c910:	d08d      	beq.n	800c82e <_strtod_l+0xb2>
 800c912:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c914:	9307      	str	r3, [sp, #28]
 800c916:	3301      	adds	r3, #1
 800c918:	931b      	str	r3, [sp, #108]	; 0x6c
 800c91a:	9b07      	ldr	r3, [sp, #28]
 800c91c:	785b      	ldrb	r3, [r3, #1]
 800c91e:	2b2b      	cmp	r3, #43	; 0x2b
 800c920:	d071      	beq.n	800ca06 <_strtod_l+0x28a>
 800c922:	000c      	movs	r4, r1
 800c924:	2b2d      	cmp	r3, #45	; 0x2d
 800c926:	d174      	bne.n	800ca12 <_strtod_l+0x296>
 800c928:	2401      	movs	r4, #1
 800c92a:	e06d      	b.n	800ca08 <_strtod_l+0x28c>
 800c92c:	9908      	ldr	r1, [sp, #32]
 800c92e:	2908      	cmp	r1, #8
 800c930:	dc09      	bgt.n	800c946 <_strtod_l+0x1ca>
 800c932:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c934:	4351      	muls	r1, r2
 800c936:	185b      	adds	r3, r3, r1
 800c938:	930d      	str	r3, [sp, #52]	; 0x34
 800c93a:	9b08      	ldr	r3, [sp, #32]
 800c93c:	3001      	adds	r0, #1
 800c93e:	3301      	adds	r3, #1
 800c940:	9308      	str	r3, [sp, #32]
 800c942:	901b      	str	r0, [sp, #108]	; 0x6c
 800c944:	e7c3      	b.n	800c8ce <_strtod_l+0x152>
 800c946:	4355      	muls	r5, r2
 800c948:	195d      	adds	r5, r3, r5
 800c94a:	e7f6      	b.n	800c93a <_strtod_l+0x1be>
 800c94c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	921b      	str	r2, [sp, #108]	; 0x6c
 800c952:	9a08      	ldr	r2, [sp, #32]
 800c954:	785b      	ldrb	r3, [r3, #1]
 800c956:	2a00      	cmp	r2, #0
 800c958:	d03a      	beq.n	800c9d0 <_strtod_l+0x254>
 800c95a:	900c      	str	r0, [sp, #48]	; 0x30
 800c95c:	9205      	str	r2, [sp, #20]
 800c95e:	001a      	movs	r2, r3
 800c960:	3a30      	subs	r2, #48	; 0x30
 800c962:	2a09      	cmp	r2, #9
 800c964:	d912      	bls.n	800c98c <_strtod_l+0x210>
 800c966:	2201      	movs	r2, #1
 800c968:	4694      	mov	ip, r2
 800c96a:	e7c3      	b.n	800c8f4 <_strtod_l+0x178>
 800c96c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c96e:	3001      	adds	r0, #1
 800c970:	1c5a      	adds	r2, r3, #1
 800c972:	921b      	str	r2, [sp, #108]	; 0x6c
 800c974:	785b      	ldrb	r3, [r3, #1]
 800c976:	2b30      	cmp	r3, #48	; 0x30
 800c978:	d0f8      	beq.n	800c96c <_strtod_l+0x1f0>
 800c97a:	001a      	movs	r2, r3
 800c97c:	3a31      	subs	r2, #49	; 0x31
 800c97e:	2a08      	cmp	r2, #8
 800c980:	d83c      	bhi.n	800c9fc <_strtod_l+0x280>
 800c982:	900c      	str	r0, [sp, #48]	; 0x30
 800c984:	2000      	movs	r0, #0
 800c986:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c988:	9005      	str	r0, [sp, #20]
 800c98a:	9210      	str	r2, [sp, #64]	; 0x40
 800c98c:	001a      	movs	r2, r3
 800c98e:	1c41      	adds	r1, r0, #1
 800c990:	3a30      	subs	r2, #48	; 0x30
 800c992:	2b30      	cmp	r3, #48	; 0x30
 800c994:	d016      	beq.n	800c9c4 <_strtod_l+0x248>
 800c996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c998:	185b      	adds	r3, r3, r1
 800c99a:	930c      	str	r3, [sp, #48]	; 0x30
 800c99c:	9b05      	ldr	r3, [sp, #20]
 800c99e:	210a      	movs	r1, #10
 800c9a0:	469c      	mov	ip, r3
 800c9a2:	4484      	add	ip, r0
 800c9a4:	4563      	cmp	r3, ip
 800c9a6:	d115      	bne.n	800c9d4 <_strtod_l+0x258>
 800c9a8:	9905      	ldr	r1, [sp, #20]
 800c9aa:	9b05      	ldr	r3, [sp, #20]
 800c9ac:	3101      	adds	r1, #1
 800c9ae:	1809      	adds	r1, r1, r0
 800c9b0:	181b      	adds	r3, r3, r0
 800c9b2:	9105      	str	r1, [sp, #20]
 800c9b4:	2b08      	cmp	r3, #8
 800c9b6:	dc19      	bgt.n	800c9ec <_strtod_l+0x270>
 800c9b8:	230a      	movs	r3, #10
 800c9ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c9bc:	434b      	muls	r3, r1
 800c9be:	2100      	movs	r1, #0
 800c9c0:	18d3      	adds	r3, r2, r3
 800c9c2:	930d      	str	r3, [sp, #52]	; 0x34
 800c9c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9c6:	0008      	movs	r0, r1
 800c9c8:	1c5a      	adds	r2, r3, #1
 800c9ca:	921b      	str	r2, [sp, #108]	; 0x6c
 800c9cc:	785b      	ldrb	r3, [r3, #1]
 800c9ce:	e7c6      	b.n	800c95e <_strtod_l+0x1e2>
 800c9d0:	9808      	ldr	r0, [sp, #32]
 800c9d2:	e7d0      	b.n	800c976 <_strtod_l+0x1fa>
 800c9d4:	1c5c      	adds	r4, r3, #1
 800c9d6:	2b08      	cmp	r3, #8
 800c9d8:	dc04      	bgt.n	800c9e4 <_strtod_l+0x268>
 800c9da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9dc:	434b      	muls	r3, r1
 800c9de:	930d      	str	r3, [sp, #52]	; 0x34
 800c9e0:	0023      	movs	r3, r4
 800c9e2:	e7df      	b.n	800c9a4 <_strtod_l+0x228>
 800c9e4:	2c10      	cmp	r4, #16
 800c9e6:	dcfb      	bgt.n	800c9e0 <_strtod_l+0x264>
 800c9e8:	434d      	muls	r5, r1
 800c9ea:	e7f9      	b.n	800c9e0 <_strtod_l+0x264>
 800c9ec:	9b05      	ldr	r3, [sp, #20]
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	2b10      	cmp	r3, #16
 800c9f2:	dce7      	bgt.n	800c9c4 <_strtod_l+0x248>
 800c9f4:	230a      	movs	r3, #10
 800c9f6:	435d      	muls	r5, r3
 800c9f8:	1955      	adds	r5, r2, r5
 800c9fa:	e7e3      	b.n	800c9c4 <_strtod_l+0x248>
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	920c      	str	r2, [sp, #48]	; 0x30
 800ca00:	9205      	str	r2, [sp, #20]
 800ca02:	3201      	adds	r2, #1
 800ca04:	e7b0      	b.n	800c968 <_strtod_l+0x1ec>
 800ca06:	2400      	movs	r4, #0
 800ca08:	9b07      	ldr	r3, [sp, #28]
 800ca0a:	3302      	adds	r3, #2
 800ca0c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ca0e:	9b07      	ldr	r3, [sp, #28]
 800ca10:	789b      	ldrb	r3, [r3, #2]
 800ca12:	001a      	movs	r2, r3
 800ca14:	3a30      	subs	r2, #48	; 0x30
 800ca16:	2a09      	cmp	r2, #9
 800ca18:	d914      	bls.n	800ca44 <_strtod_l+0x2c8>
 800ca1a:	9a07      	ldr	r2, [sp, #28]
 800ca1c:	921b      	str	r2, [sp, #108]	; 0x6c
 800ca1e:	2200      	movs	r2, #0
 800ca20:	e033      	b.n	800ca8a <_strtod_l+0x30e>
 800ca22:	46c0      	nop			; (mov r8, r8)
 800ca24:	0800ef48 	.word	0x0800ef48
 800ca28:	7ff00000 	.word	0x7ff00000
 800ca2c:	ffefffff 	.word	0xffefffff
 800ca30:	00000433 	.word	0x00000433
 800ca34:	7fffffff 	.word	0x7fffffff
 800ca38:	0800ef44 	.word	0x0800ef44
 800ca3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca3e:	1c5a      	adds	r2, r3, #1
 800ca40:	921b      	str	r2, [sp, #108]	; 0x6c
 800ca42:	785b      	ldrb	r3, [r3, #1]
 800ca44:	2b30      	cmp	r3, #48	; 0x30
 800ca46:	d0f9      	beq.n	800ca3c <_strtod_l+0x2c0>
 800ca48:	2200      	movs	r2, #0
 800ca4a:	9206      	str	r2, [sp, #24]
 800ca4c:	001a      	movs	r2, r3
 800ca4e:	3a31      	subs	r2, #49	; 0x31
 800ca50:	2a08      	cmp	r2, #8
 800ca52:	d81b      	bhi.n	800ca8c <_strtod_l+0x310>
 800ca54:	3b30      	subs	r3, #48	; 0x30
 800ca56:	930e      	str	r3, [sp, #56]	; 0x38
 800ca58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca5a:	9306      	str	r3, [sp, #24]
 800ca5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca5e:	1c59      	adds	r1, r3, #1
 800ca60:	911b      	str	r1, [sp, #108]	; 0x6c
 800ca62:	785b      	ldrb	r3, [r3, #1]
 800ca64:	001a      	movs	r2, r3
 800ca66:	3a30      	subs	r2, #48	; 0x30
 800ca68:	2a09      	cmp	r2, #9
 800ca6a:	d93a      	bls.n	800cae2 <_strtod_l+0x366>
 800ca6c:	9a06      	ldr	r2, [sp, #24]
 800ca6e:	1a8a      	subs	r2, r1, r2
 800ca70:	49b2      	ldr	r1, [pc, #712]	; (800cd3c <_strtod_l+0x5c0>)
 800ca72:	9106      	str	r1, [sp, #24]
 800ca74:	2a08      	cmp	r2, #8
 800ca76:	dc04      	bgt.n	800ca82 <_strtod_l+0x306>
 800ca78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca7a:	9206      	str	r2, [sp, #24]
 800ca7c:	428a      	cmp	r2, r1
 800ca7e:	dd00      	ble.n	800ca82 <_strtod_l+0x306>
 800ca80:	9106      	str	r1, [sp, #24]
 800ca82:	2c00      	cmp	r4, #0
 800ca84:	d002      	beq.n	800ca8c <_strtod_l+0x310>
 800ca86:	9a06      	ldr	r2, [sp, #24]
 800ca88:	4252      	negs	r2, r2
 800ca8a:	9206      	str	r2, [sp, #24]
 800ca8c:	9a05      	ldr	r2, [sp, #20]
 800ca8e:	2a00      	cmp	r2, #0
 800ca90:	d14d      	bne.n	800cb2e <_strtod_l+0x3b2>
 800ca92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca94:	4310      	orrs	r0, r2
 800ca96:	d000      	beq.n	800ca9a <_strtod_l+0x31e>
 800ca98:	e6ab      	b.n	800c7f2 <_strtod_l+0x76>
 800ca9a:	4662      	mov	r2, ip
 800ca9c:	2a00      	cmp	r2, #0
 800ca9e:	d000      	beq.n	800caa2 <_strtod_l+0x326>
 800caa0:	e6c5      	b.n	800c82e <_strtod_l+0xb2>
 800caa2:	2b69      	cmp	r3, #105	; 0x69
 800caa4:	d027      	beq.n	800caf6 <_strtod_l+0x37a>
 800caa6:	dc23      	bgt.n	800caf0 <_strtod_l+0x374>
 800caa8:	2b49      	cmp	r3, #73	; 0x49
 800caaa:	d024      	beq.n	800caf6 <_strtod_l+0x37a>
 800caac:	2b4e      	cmp	r3, #78	; 0x4e
 800caae:	d000      	beq.n	800cab2 <_strtod_l+0x336>
 800cab0:	e6bd      	b.n	800c82e <_strtod_l+0xb2>
 800cab2:	49a3      	ldr	r1, [pc, #652]	; (800cd40 <_strtod_l+0x5c4>)
 800cab4:	a81b      	add	r0, sp, #108	; 0x6c
 800cab6:	f001 fa47 	bl	800df48 <__match>
 800caba:	2800      	cmp	r0, #0
 800cabc:	d100      	bne.n	800cac0 <_strtod_l+0x344>
 800cabe:	e6b6      	b.n	800c82e <_strtod_l+0xb2>
 800cac0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	2b28      	cmp	r3, #40	; 0x28
 800cac6:	d12c      	bne.n	800cb22 <_strtod_l+0x3a6>
 800cac8:	499e      	ldr	r1, [pc, #632]	; (800cd44 <_strtod_l+0x5c8>)
 800caca:	aa1e      	add	r2, sp, #120	; 0x78
 800cacc:	a81b      	add	r0, sp, #108	; 0x6c
 800cace:	f001 fa4f 	bl	800df70 <__hexnan>
 800cad2:	2805      	cmp	r0, #5
 800cad4:	d125      	bne.n	800cb22 <_strtod_l+0x3a6>
 800cad6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cad8:	4a9b      	ldr	r2, [pc, #620]	; (800cd48 <_strtod_l+0x5cc>)
 800cada:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cadc:	431a      	orrs	r2, r3
 800cade:	0017      	movs	r7, r2
 800cae0:	e687      	b.n	800c7f2 <_strtod_l+0x76>
 800cae2:	220a      	movs	r2, #10
 800cae4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cae6:	434a      	muls	r2, r1
 800cae8:	18d2      	adds	r2, r2, r3
 800caea:	3a30      	subs	r2, #48	; 0x30
 800caec:	920e      	str	r2, [sp, #56]	; 0x38
 800caee:	e7b5      	b.n	800ca5c <_strtod_l+0x2e0>
 800caf0:	2b6e      	cmp	r3, #110	; 0x6e
 800caf2:	d0de      	beq.n	800cab2 <_strtod_l+0x336>
 800caf4:	e69b      	b.n	800c82e <_strtod_l+0xb2>
 800caf6:	4995      	ldr	r1, [pc, #596]	; (800cd4c <_strtod_l+0x5d0>)
 800caf8:	a81b      	add	r0, sp, #108	; 0x6c
 800cafa:	f001 fa25 	bl	800df48 <__match>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d100      	bne.n	800cb04 <_strtod_l+0x388>
 800cb02:	e694      	b.n	800c82e <_strtod_l+0xb2>
 800cb04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb06:	4992      	ldr	r1, [pc, #584]	; (800cd50 <_strtod_l+0x5d4>)
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	a81b      	add	r0, sp, #108	; 0x6c
 800cb0c:	931b      	str	r3, [sp, #108]	; 0x6c
 800cb0e:	f001 fa1b 	bl	800df48 <__match>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d102      	bne.n	800cb1c <_strtod_l+0x3a0>
 800cb16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb18:	3301      	adds	r3, #1
 800cb1a:	931b      	str	r3, [sp, #108]	; 0x6c
 800cb1c:	2600      	movs	r6, #0
 800cb1e:	4f8a      	ldr	r7, [pc, #552]	; (800cd48 <_strtod_l+0x5cc>)
 800cb20:	e667      	b.n	800c7f2 <_strtod_l+0x76>
 800cb22:	488c      	ldr	r0, [pc, #560]	; (800cd54 <_strtod_l+0x5d8>)
 800cb24:	f000 ff1e 	bl	800d964 <nan>
 800cb28:	0006      	movs	r6, r0
 800cb2a:	000f      	movs	r7, r1
 800cb2c:	e661      	b.n	800c7f2 <_strtod_l+0x76>
 800cb2e:	9b06      	ldr	r3, [sp, #24]
 800cb30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb32:	1a9b      	subs	r3, r3, r2
 800cb34:	9309      	str	r3, [sp, #36]	; 0x24
 800cb36:	9b08      	ldr	r3, [sp, #32]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d101      	bne.n	800cb40 <_strtod_l+0x3c4>
 800cb3c:	9b05      	ldr	r3, [sp, #20]
 800cb3e:	9308      	str	r3, [sp, #32]
 800cb40:	9c05      	ldr	r4, [sp, #20]
 800cb42:	2c10      	cmp	r4, #16
 800cb44:	dd00      	ble.n	800cb48 <_strtod_l+0x3cc>
 800cb46:	2410      	movs	r4, #16
 800cb48:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cb4a:	f7f5 ff5b 	bl	8002a04 <__aeabi_ui2d>
 800cb4e:	9b05      	ldr	r3, [sp, #20]
 800cb50:	0006      	movs	r6, r0
 800cb52:	000f      	movs	r7, r1
 800cb54:	2b09      	cmp	r3, #9
 800cb56:	dd15      	ble.n	800cb84 <_strtod_l+0x408>
 800cb58:	0022      	movs	r2, r4
 800cb5a:	4b7f      	ldr	r3, [pc, #508]	; (800cd58 <_strtod_l+0x5dc>)
 800cb5c:	3a09      	subs	r2, #9
 800cb5e:	00d2      	lsls	r2, r2, #3
 800cb60:	189b      	adds	r3, r3, r2
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	f7f5 f885 	bl	8001c74 <__aeabi_dmul>
 800cb6a:	0006      	movs	r6, r0
 800cb6c:	0028      	movs	r0, r5
 800cb6e:	000f      	movs	r7, r1
 800cb70:	f7f5 ff48 	bl	8002a04 <__aeabi_ui2d>
 800cb74:	0002      	movs	r2, r0
 800cb76:	000b      	movs	r3, r1
 800cb78:	0030      	movs	r0, r6
 800cb7a:	0039      	movs	r1, r7
 800cb7c:	f7f4 f920 	bl	8000dc0 <__aeabi_dadd>
 800cb80:	0006      	movs	r6, r0
 800cb82:	000f      	movs	r7, r1
 800cb84:	9b05      	ldr	r3, [sp, #20]
 800cb86:	2b0f      	cmp	r3, #15
 800cb88:	dc39      	bgt.n	800cbfe <_strtod_l+0x482>
 800cb8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d100      	bne.n	800cb92 <_strtod_l+0x416>
 800cb90:	e62f      	b.n	800c7f2 <_strtod_l+0x76>
 800cb92:	dd24      	ble.n	800cbde <_strtod_l+0x462>
 800cb94:	2b16      	cmp	r3, #22
 800cb96:	dc09      	bgt.n	800cbac <_strtod_l+0x430>
 800cb98:	496f      	ldr	r1, [pc, #444]	; (800cd58 <_strtod_l+0x5dc>)
 800cb9a:	00db      	lsls	r3, r3, #3
 800cb9c:	18c9      	adds	r1, r1, r3
 800cb9e:	0032      	movs	r2, r6
 800cba0:	6808      	ldr	r0, [r1, #0]
 800cba2:	6849      	ldr	r1, [r1, #4]
 800cba4:	003b      	movs	r3, r7
 800cba6:	f7f5 f865 	bl	8001c74 <__aeabi_dmul>
 800cbaa:	e7bd      	b.n	800cb28 <_strtod_l+0x3ac>
 800cbac:	2325      	movs	r3, #37	; 0x25
 800cbae:	9a05      	ldr	r2, [sp, #20]
 800cbb0:	1a9b      	subs	r3, r3, r2
 800cbb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	db22      	blt.n	800cbfe <_strtod_l+0x482>
 800cbb8:	240f      	movs	r4, #15
 800cbba:	9b05      	ldr	r3, [sp, #20]
 800cbbc:	4d66      	ldr	r5, [pc, #408]	; (800cd58 <_strtod_l+0x5dc>)
 800cbbe:	1ae4      	subs	r4, r4, r3
 800cbc0:	00e1      	lsls	r1, r4, #3
 800cbc2:	1869      	adds	r1, r5, r1
 800cbc4:	0032      	movs	r2, r6
 800cbc6:	6808      	ldr	r0, [r1, #0]
 800cbc8:	6849      	ldr	r1, [r1, #4]
 800cbca:	003b      	movs	r3, r7
 800cbcc:	f7f5 f852 	bl	8001c74 <__aeabi_dmul>
 800cbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd2:	1b1c      	subs	r4, r3, r4
 800cbd4:	00e4      	lsls	r4, r4, #3
 800cbd6:	192d      	adds	r5, r5, r4
 800cbd8:	682a      	ldr	r2, [r5, #0]
 800cbda:	686b      	ldr	r3, [r5, #4]
 800cbdc:	e7e3      	b.n	800cba6 <_strtod_l+0x42a>
 800cbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbe0:	3316      	adds	r3, #22
 800cbe2:	db0c      	blt.n	800cbfe <_strtod_l+0x482>
 800cbe4:	9906      	ldr	r1, [sp, #24]
 800cbe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbe8:	4b5b      	ldr	r3, [pc, #364]	; (800cd58 <_strtod_l+0x5dc>)
 800cbea:	1a52      	subs	r2, r2, r1
 800cbec:	00d2      	lsls	r2, r2, #3
 800cbee:	189b      	adds	r3, r3, r2
 800cbf0:	0030      	movs	r0, r6
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	0039      	movs	r1, r7
 800cbf8:	f7f4 fc42 	bl	8001480 <__aeabi_ddiv>
 800cbfc:	e794      	b.n	800cb28 <_strtod_l+0x3ac>
 800cbfe:	9b05      	ldr	r3, [sp, #20]
 800cc00:	1b1c      	subs	r4, r3, r4
 800cc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc04:	18e4      	adds	r4, r4, r3
 800cc06:	2c00      	cmp	r4, #0
 800cc08:	dd72      	ble.n	800ccf0 <_strtod_l+0x574>
 800cc0a:	220f      	movs	r2, #15
 800cc0c:	0023      	movs	r3, r4
 800cc0e:	4013      	ands	r3, r2
 800cc10:	4214      	tst	r4, r2
 800cc12:	d00a      	beq.n	800cc2a <_strtod_l+0x4ae>
 800cc14:	4950      	ldr	r1, [pc, #320]	; (800cd58 <_strtod_l+0x5dc>)
 800cc16:	00db      	lsls	r3, r3, #3
 800cc18:	18c9      	adds	r1, r1, r3
 800cc1a:	0032      	movs	r2, r6
 800cc1c:	6808      	ldr	r0, [r1, #0]
 800cc1e:	6849      	ldr	r1, [r1, #4]
 800cc20:	003b      	movs	r3, r7
 800cc22:	f7f5 f827 	bl	8001c74 <__aeabi_dmul>
 800cc26:	0006      	movs	r6, r0
 800cc28:	000f      	movs	r7, r1
 800cc2a:	230f      	movs	r3, #15
 800cc2c:	439c      	bics	r4, r3
 800cc2e:	d04a      	beq.n	800ccc6 <_strtod_l+0x54a>
 800cc30:	3326      	adds	r3, #38	; 0x26
 800cc32:	33ff      	adds	r3, #255	; 0xff
 800cc34:	429c      	cmp	r4, r3
 800cc36:	dd22      	ble.n	800cc7e <_strtod_l+0x502>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	9305      	str	r3, [sp, #20]
 800cc3c:	9306      	str	r3, [sp, #24]
 800cc3e:	930d      	str	r3, [sp, #52]	; 0x34
 800cc40:	9308      	str	r3, [sp, #32]
 800cc42:	2322      	movs	r3, #34	; 0x22
 800cc44:	2600      	movs	r6, #0
 800cc46:	9a04      	ldr	r2, [sp, #16]
 800cc48:	4f3f      	ldr	r7, [pc, #252]	; (800cd48 <_strtod_l+0x5cc>)
 800cc4a:	6013      	str	r3, [r2, #0]
 800cc4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc4e:	42b3      	cmp	r3, r6
 800cc50:	d100      	bne.n	800cc54 <_strtod_l+0x4d8>
 800cc52:	e5ce      	b.n	800c7f2 <_strtod_l+0x76>
 800cc54:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc56:	9804      	ldr	r0, [sp, #16]
 800cc58:	f7ff f900 	bl	800be5c <_Bfree>
 800cc5c:	9908      	ldr	r1, [sp, #32]
 800cc5e:	9804      	ldr	r0, [sp, #16]
 800cc60:	f7ff f8fc 	bl	800be5c <_Bfree>
 800cc64:	9906      	ldr	r1, [sp, #24]
 800cc66:	9804      	ldr	r0, [sp, #16]
 800cc68:	f7ff f8f8 	bl	800be5c <_Bfree>
 800cc6c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cc6e:	9804      	ldr	r0, [sp, #16]
 800cc70:	f7ff f8f4 	bl	800be5c <_Bfree>
 800cc74:	9905      	ldr	r1, [sp, #20]
 800cc76:	9804      	ldr	r0, [sp, #16]
 800cc78:	f7ff f8f0 	bl	800be5c <_Bfree>
 800cc7c:	e5b9      	b.n	800c7f2 <_strtod_l+0x76>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	0030      	movs	r0, r6
 800cc82:	0039      	movs	r1, r7
 800cc84:	4d35      	ldr	r5, [pc, #212]	; (800cd5c <_strtod_l+0x5e0>)
 800cc86:	1124      	asrs	r4, r4, #4
 800cc88:	9307      	str	r3, [sp, #28]
 800cc8a:	2c01      	cmp	r4, #1
 800cc8c:	dc1e      	bgt.n	800cccc <_strtod_l+0x550>
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d001      	beq.n	800cc96 <_strtod_l+0x51a>
 800cc92:	0006      	movs	r6, r0
 800cc94:	000f      	movs	r7, r1
 800cc96:	4b32      	ldr	r3, [pc, #200]	; (800cd60 <_strtod_l+0x5e4>)
 800cc98:	9a07      	ldr	r2, [sp, #28]
 800cc9a:	18ff      	adds	r7, r7, r3
 800cc9c:	4b2f      	ldr	r3, [pc, #188]	; (800cd5c <_strtod_l+0x5e0>)
 800cc9e:	00d2      	lsls	r2, r2, #3
 800cca0:	189d      	adds	r5, r3, r2
 800cca2:	6828      	ldr	r0, [r5, #0]
 800cca4:	6869      	ldr	r1, [r5, #4]
 800cca6:	0032      	movs	r2, r6
 800cca8:	003b      	movs	r3, r7
 800ccaa:	f7f4 ffe3 	bl	8001c74 <__aeabi_dmul>
 800ccae:	4b26      	ldr	r3, [pc, #152]	; (800cd48 <_strtod_l+0x5cc>)
 800ccb0:	4a2c      	ldr	r2, [pc, #176]	; (800cd64 <_strtod_l+0x5e8>)
 800ccb2:	0006      	movs	r6, r0
 800ccb4:	400b      	ands	r3, r1
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d8be      	bhi.n	800cc38 <_strtod_l+0x4bc>
 800ccba:	4a2b      	ldr	r2, [pc, #172]	; (800cd68 <_strtod_l+0x5ec>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d913      	bls.n	800cce8 <_strtod_l+0x56c>
 800ccc0:	2601      	movs	r6, #1
 800ccc2:	4f2a      	ldr	r7, [pc, #168]	; (800cd6c <_strtod_l+0x5f0>)
 800ccc4:	4276      	negs	r6, r6
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	9307      	str	r3, [sp, #28]
 800ccca:	e088      	b.n	800cdde <_strtod_l+0x662>
 800cccc:	2201      	movs	r2, #1
 800ccce:	4214      	tst	r4, r2
 800ccd0:	d004      	beq.n	800ccdc <_strtod_l+0x560>
 800ccd2:	682a      	ldr	r2, [r5, #0]
 800ccd4:	686b      	ldr	r3, [r5, #4]
 800ccd6:	f7f4 ffcd 	bl	8001c74 <__aeabi_dmul>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	9a07      	ldr	r2, [sp, #28]
 800ccde:	1064      	asrs	r4, r4, #1
 800cce0:	3201      	adds	r2, #1
 800cce2:	9207      	str	r2, [sp, #28]
 800cce4:	3508      	adds	r5, #8
 800cce6:	e7d0      	b.n	800cc8a <_strtod_l+0x50e>
 800cce8:	23d4      	movs	r3, #212	; 0xd4
 800ccea:	049b      	lsls	r3, r3, #18
 800ccec:	18cf      	adds	r7, r1, r3
 800ccee:	e7ea      	b.n	800ccc6 <_strtod_l+0x54a>
 800ccf0:	2c00      	cmp	r4, #0
 800ccf2:	d0e8      	beq.n	800ccc6 <_strtod_l+0x54a>
 800ccf4:	4264      	negs	r4, r4
 800ccf6:	230f      	movs	r3, #15
 800ccf8:	0022      	movs	r2, r4
 800ccfa:	401a      	ands	r2, r3
 800ccfc:	421c      	tst	r4, r3
 800ccfe:	d00a      	beq.n	800cd16 <_strtod_l+0x59a>
 800cd00:	4b15      	ldr	r3, [pc, #84]	; (800cd58 <_strtod_l+0x5dc>)
 800cd02:	00d2      	lsls	r2, r2, #3
 800cd04:	189b      	adds	r3, r3, r2
 800cd06:	0030      	movs	r0, r6
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	0039      	movs	r1, r7
 800cd0e:	f7f4 fbb7 	bl	8001480 <__aeabi_ddiv>
 800cd12:	0006      	movs	r6, r0
 800cd14:	000f      	movs	r7, r1
 800cd16:	1124      	asrs	r4, r4, #4
 800cd18:	d0d5      	beq.n	800ccc6 <_strtod_l+0x54a>
 800cd1a:	2c1f      	cmp	r4, #31
 800cd1c:	dd28      	ble.n	800cd70 <_strtod_l+0x5f4>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	9305      	str	r3, [sp, #20]
 800cd22:	9306      	str	r3, [sp, #24]
 800cd24:	930d      	str	r3, [sp, #52]	; 0x34
 800cd26:	9308      	str	r3, [sp, #32]
 800cd28:	2322      	movs	r3, #34	; 0x22
 800cd2a:	9a04      	ldr	r2, [sp, #16]
 800cd2c:	2600      	movs	r6, #0
 800cd2e:	6013      	str	r3, [r2, #0]
 800cd30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd32:	2700      	movs	r7, #0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d18d      	bne.n	800cc54 <_strtod_l+0x4d8>
 800cd38:	e55b      	b.n	800c7f2 <_strtod_l+0x76>
 800cd3a:	46c0      	nop			; (mov r8, r8)
 800cd3c:	00004e1f 	.word	0x00004e1f
 800cd40:	0800ed35 	.word	0x0800ed35
 800cd44:	0800ef5c 	.word	0x0800ef5c
 800cd48:	7ff00000 	.word	0x7ff00000
 800cd4c:	0800ed2d 	.word	0x0800ed2d
 800cd50:	0800ed64 	.word	0x0800ed64
 800cd54:	0800f0ed 	.word	0x0800f0ed
 800cd58:	0800ee70 	.word	0x0800ee70
 800cd5c:	0800ee48 	.word	0x0800ee48
 800cd60:	fcb00000 	.word	0xfcb00000
 800cd64:	7ca00000 	.word	0x7ca00000
 800cd68:	7c900000 	.word	0x7c900000
 800cd6c:	7fefffff 	.word	0x7fefffff
 800cd70:	2310      	movs	r3, #16
 800cd72:	0022      	movs	r2, r4
 800cd74:	401a      	ands	r2, r3
 800cd76:	9207      	str	r2, [sp, #28]
 800cd78:	421c      	tst	r4, r3
 800cd7a:	d001      	beq.n	800cd80 <_strtod_l+0x604>
 800cd7c:	335a      	adds	r3, #90	; 0x5a
 800cd7e:	9307      	str	r3, [sp, #28]
 800cd80:	0030      	movs	r0, r6
 800cd82:	0039      	movs	r1, r7
 800cd84:	2300      	movs	r3, #0
 800cd86:	4dc4      	ldr	r5, [pc, #784]	; (800d098 <_strtod_l+0x91c>)
 800cd88:	2201      	movs	r2, #1
 800cd8a:	4214      	tst	r4, r2
 800cd8c:	d004      	beq.n	800cd98 <_strtod_l+0x61c>
 800cd8e:	682a      	ldr	r2, [r5, #0]
 800cd90:	686b      	ldr	r3, [r5, #4]
 800cd92:	f7f4 ff6f 	bl	8001c74 <__aeabi_dmul>
 800cd96:	2301      	movs	r3, #1
 800cd98:	1064      	asrs	r4, r4, #1
 800cd9a:	3508      	adds	r5, #8
 800cd9c:	2c00      	cmp	r4, #0
 800cd9e:	d1f3      	bne.n	800cd88 <_strtod_l+0x60c>
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d001      	beq.n	800cda8 <_strtod_l+0x62c>
 800cda4:	0006      	movs	r6, r0
 800cda6:	000f      	movs	r7, r1
 800cda8:	9b07      	ldr	r3, [sp, #28]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00f      	beq.n	800cdce <_strtod_l+0x652>
 800cdae:	236b      	movs	r3, #107	; 0x6b
 800cdb0:	007a      	lsls	r2, r7, #1
 800cdb2:	0d52      	lsrs	r2, r2, #21
 800cdb4:	0039      	movs	r1, r7
 800cdb6:	1a9b      	subs	r3, r3, r2
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	dd08      	ble.n	800cdce <_strtod_l+0x652>
 800cdbc:	2b1f      	cmp	r3, #31
 800cdbe:	dc00      	bgt.n	800cdc2 <_strtod_l+0x646>
 800cdc0:	e121      	b.n	800d006 <_strtod_l+0x88a>
 800cdc2:	2600      	movs	r6, #0
 800cdc4:	2b34      	cmp	r3, #52	; 0x34
 800cdc6:	dc00      	bgt.n	800cdca <_strtod_l+0x64e>
 800cdc8:	e116      	b.n	800cff8 <_strtod_l+0x87c>
 800cdca:	27dc      	movs	r7, #220	; 0xdc
 800cdcc:	04bf      	lsls	r7, r7, #18
 800cdce:	2200      	movs	r2, #0
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	0030      	movs	r0, r6
 800cdd4:	0039      	movs	r1, r7
 800cdd6:	f7f3 fb39 	bl	800044c <__aeabi_dcmpeq>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d19f      	bne.n	800cd1e <_strtod_l+0x5a2>
 800cdde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cde0:	9a08      	ldr	r2, [sp, #32]
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cde6:	9b05      	ldr	r3, [sp, #20]
 800cde8:	9804      	ldr	r0, [sp, #16]
 800cdea:	f7ff f89f 	bl	800bf2c <__s2b>
 800cdee:	900d      	str	r0, [sp, #52]	; 0x34
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d100      	bne.n	800cdf6 <_strtod_l+0x67a>
 800cdf4:	e720      	b.n	800cc38 <_strtod_l+0x4bc>
 800cdf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf8:	9906      	ldr	r1, [sp, #24]
 800cdfa:	17da      	asrs	r2, r3, #31
 800cdfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdfe:	1a5b      	subs	r3, r3, r1
 800ce00:	401a      	ands	r2, r3
 800ce02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce04:	9215      	str	r2, [sp, #84]	; 0x54
 800ce06:	43db      	mvns	r3, r3
 800ce08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce0a:	17db      	asrs	r3, r3, #31
 800ce0c:	401a      	ands	r2, r3
 800ce0e:	2300      	movs	r3, #0
 800ce10:	9218      	str	r2, [sp, #96]	; 0x60
 800ce12:	9305      	str	r3, [sp, #20]
 800ce14:	9306      	str	r3, [sp, #24]
 800ce16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce18:	9804      	ldr	r0, [sp, #16]
 800ce1a:	6859      	ldr	r1, [r3, #4]
 800ce1c:	f7fe ffda 	bl	800bdd4 <_Balloc>
 800ce20:	9008      	str	r0, [sp, #32]
 800ce22:	2800      	cmp	r0, #0
 800ce24:	d100      	bne.n	800ce28 <_strtod_l+0x6ac>
 800ce26:	e70c      	b.n	800cc42 <_strtod_l+0x4c6>
 800ce28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce2a:	300c      	adds	r0, #12
 800ce2c:	0019      	movs	r1, r3
 800ce2e:	691a      	ldr	r2, [r3, #16]
 800ce30:	310c      	adds	r1, #12
 800ce32:	3202      	adds	r2, #2
 800ce34:	0092      	lsls	r2, r2, #2
 800ce36:	f000 fd8b 	bl	800d950 <memcpy>
 800ce3a:	ab1e      	add	r3, sp, #120	; 0x78
 800ce3c:	9301      	str	r3, [sp, #4]
 800ce3e:	ab1d      	add	r3, sp, #116	; 0x74
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	0032      	movs	r2, r6
 800ce44:	003b      	movs	r3, r7
 800ce46:	9804      	ldr	r0, [sp, #16]
 800ce48:	9610      	str	r6, [sp, #64]	; 0x40
 800ce4a:	9711      	str	r7, [sp, #68]	; 0x44
 800ce4c:	f7ff fbb0 	bl	800c5b0 <__d2b>
 800ce50:	901c      	str	r0, [sp, #112]	; 0x70
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d100      	bne.n	800ce58 <_strtod_l+0x6dc>
 800ce56:	e6f4      	b.n	800cc42 <_strtod_l+0x4c6>
 800ce58:	2101      	movs	r1, #1
 800ce5a:	9804      	ldr	r0, [sp, #16]
 800ce5c:	f7ff f8fa 	bl	800c054 <__i2b>
 800ce60:	9006      	str	r0, [sp, #24]
 800ce62:	2800      	cmp	r0, #0
 800ce64:	d100      	bne.n	800ce68 <_strtod_l+0x6ec>
 800ce66:	e6ec      	b.n	800cc42 <_strtod_l+0x4c6>
 800ce68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ce6c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ce6e:	1ad4      	subs	r4, r2, r3
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	db01      	blt.n	800ce78 <_strtod_l+0x6fc>
 800ce74:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800ce76:	195d      	adds	r5, r3, r5
 800ce78:	9907      	ldr	r1, [sp, #28]
 800ce7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ce7c:	1a5b      	subs	r3, r3, r1
 800ce7e:	2136      	movs	r1, #54	; 0x36
 800ce80:	189b      	adds	r3, r3, r2
 800ce82:	1a8a      	subs	r2, r1, r2
 800ce84:	4985      	ldr	r1, [pc, #532]	; (800d09c <_strtod_l+0x920>)
 800ce86:	2001      	movs	r0, #1
 800ce88:	468c      	mov	ip, r1
 800ce8a:	2100      	movs	r1, #0
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	9114      	str	r1, [sp, #80]	; 0x50
 800ce90:	9012      	str	r0, [sp, #72]	; 0x48
 800ce92:	4563      	cmp	r3, ip
 800ce94:	da07      	bge.n	800cea6 <_strtod_l+0x72a>
 800ce96:	4661      	mov	r1, ip
 800ce98:	1ac9      	subs	r1, r1, r3
 800ce9a:	1a52      	subs	r2, r2, r1
 800ce9c:	291f      	cmp	r1, #31
 800ce9e:	dd00      	ble.n	800cea2 <_strtod_l+0x726>
 800cea0:	e0b6      	b.n	800d010 <_strtod_l+0x894>
 800cea2:	4088      	lsls	r0, r1
 800cea4:	9012      	str	r0, [sp, #72]	; 0x48
 800cea6:	18ab      	adds	r3, r5, r2
 800cea8:	930c      	str	r3, [sp, #48]	; 0x30
 800ceaa:	18a4      	adds	r4, r4, r2
 800ceac:	9b07      	ldr	r3, [sp, #28]
 800ceae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ceb0:	191c      	adds	r4, r3, r4
 800ceb2:	002b      	movs	r3, r5
 800ceb4:	4295      	cmp	r5, r2
 800ceb6:	dd00      	ble.n	800ceba <_strtod_l+0x73e>
 800ceb8:	0013      	movs	r3, r2
 800ceba:	42a3      	cmp	r3, r4
 800cebc:	dd00      	ble.n	800cec0 <_strtod_l+0x744>
 800cebe:	0023      	movs	r3, r4
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	dd04      	ble.n	800cece <_strtod_l+0x752>
 800cec4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cec6:	1ae4      	subs	r4, r4, r3
 800cec8:	1ad2      	subs	r2, r2, r3
 800ceca:	920c      	str	r2, [sp, #48]	; 0x30
 800cecc:	1aed      	subs	r5, r5, r3
 800cece:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	dd17      	ble.n	800cf04 <_strtod_l+0x788>
 800ced4:	001a      	movs	r2, r3
 800ced6:	9906      	ldr	r1, [sp, #24]
 800ced8:	9804      	ldr	r0, [sp, #16]
 800ceda:	f7ff f983 	bl	800c1e4 <__pow5mult>
 800cede:	9006      	str	r0, [sp, #24]
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d100      	bne.n	800cee6 <_strtod_l+0x76a>
 800cee4:	e6ad      	b.n	800cc42 <_strtod_l+0x4c6>
 800cee6:	0001      	movs	r1, r0
 800cee8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ceea:	9804      	ldr	r0, [sp, #16]
 800ceec:	f7ff f8ca 	bl	800c084 <__multiply>
 800cef0:	900e      	str	r0, [sp, #56]	; 0x38
 800cef2:	2800      	cmp	r0, #0
 800cef4:	d100      	bne.n	800cef8 <_strtod_l+0x77c>
 800cef6:	e6a4      	b.n	800cc42 <_strtod_l+0x4c6>
 800cef8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cefa:	9804      	ldr	r0, [sp, #16]
 800cefc:	f7fe ffae 	bl	800be5c <_Bfree>
 800cf00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf02:	931c      	str	r3, [sp, #112]	; 0x70
 800cf04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	dd00      	ble.n	800cf0c <_strtod_l+0x790>
 800cf0a:	e087      	b.n	800d01c <_strtod_l+0x8a0>
 800cf0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	dd08      	ble.n	800cf24 <_strtod_l+0x7a8>
 800cf12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cf14:	9908      	ldr	r1, [sp, #32]
 800cf16:	9804      	ldr	r0, [sp, #16]
 800cf18:	f7ff f964 	bl	800c1e4 <__pow5mult>
 800cf1c:	9008      	str	r0, [sp, #32]
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d100      	bne.n	800cf24 <_strtod_l+0x7a8>
 800cf22:	e68e      	b.n	800cc42 <_strtod_l+0x4c6>
 800cf24:	2c00      	cmp	r4, #0
 800cf26:	dd08      	ble.n	800cf3a <_strtod_l+0x7be>
 800cf28:	0022      	movs	r2, r4
 800cf2a:	9908      	ldr	r1, [sp, #32]
 800cf2c:	9804      	ldr	r0, [sp, #16]
 800cf2e:	f7ff f9b5 	bl	800c29c <__lshift>
 800cf32:	9008      	str	r0, [sp, #32]
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d100      	bne.n	800cf3a <_strtod_l+0x7be>
 800cf38:	e683      	b.n	800cc42 <_strtod_l+0x4c6>
 800cf3a:	2d00      	cmp	r5, #0
 800cf3c:	dd08      	ble.n	800cf50 <_strtod_l+0x7d4>
 800cf3e:	002a      	movs	r2, r5
 800cf40:	9906      	ldr	r1, [sp, #24]
 800cf42:	9804      	ldr	r0, [sp, #16]
 800cf44:	f7ff f9aa 	bl	800c29c <__lshift>
 800cf48:	9006      	str	r0, [sp, #24]
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d100      	bne.n	800cf50 <_strtod_l+0x7d4>
 800cf4e:	e678      	b.n	800cc42 <_strtod_l+0x4c6>
 800cf50:	9a08      	ldr	r2, [sp, #32]
 800cf52:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cf54:	9804      	ldr	r0, [sp, #16]
 800cf56:	f7ff fa2b 	bl	800c3b0 <__mdiff>
 800cf5a:	9005      	str	r0, [sp, #20]
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d100      	bne.n	800cf62 <_strtod_l+0x7e6>
 800cf60:	e66f      	b.n	800cc42 <_strtod_l+0x4c6>
 800cf62:	2200      	movs	r2, #0
 800cf64:	68c3      	ldr	r3, [r0, #12]
 800cf66:	9906      	ldr	r1, [sp, #24]
 800cf68:	60c2      	str	r2, [r0, #12]
 800cf6a:	930c      	str	r3, [sp, #48]	; 0x30
 800cf6c:	f7ff fa04 	bl	800c378 <__mcmp>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	da5d      	bge.n	800d030 <_strtod_l+0x8b4>
 800cf74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf76:	4333      	orrs	r3, r6
 800cf78:	d000      	beq.n	800cf7c <_strtod_l+0x800>
 800cf7a:	e088      	b.n	800d08e <_strtod_l+0x912>
 800cf7c:	033b      	lsls	r3, r7, #12
 800cf7e:	d000      	beq.n	800cf82 <_strtod_l+0x806>
 800cf80:	e085      	b.n	800d08e <_strtod_l+0x912>
 800cf82:	22d6      	movs	r2, #214	; 0xd6
 800cf84:	4b46      	ldr	r3, [pc, #280]	; (800d0a0 <_strtod_l+0x924>)
 800cf86:	04d2      	lsls	r2, r2, #19
 800cf88:	403b      	ands	r3, r7
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d97f      	bls.n	800d08e <_strtod_l+0x912>
 800cf8e:	9b05      	ldr	r3, [sp, #20]
 800cf90:	695b      	ldr	r3, [r3, #20]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d103      	bne.n	800cf9e <_strtod_l+0x822>
 800cf96:	9b05      	ldr	r3, [sp, #20]
 800cf98:	691b      	ldr	r3, [r3, #16]
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	dd77      	ble.n	800d08e <_strtod_l+0x912>
 800cf9e:	9905      	ldr	r1, [sp, #20]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	9804      	ldr	r0, [sp, #16]
 800cfa4:	f7ff f97a 	bl	800c29c <__lshift>
 800cfa8:	9906      	ldr	r1, [sp, #24]
 800cfaa:	9005      	str	r0, [sp, #20]
 800cfac:	f7ff f9e4 	bl	800c378 <__mcmp>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	dd6c      	ble.n	800d08e <_strtod_l+0x912>
 800cfb4:	9907      	ldr	r1, [sp, #28]
 800cfb6:	003b      	movs	r3, r7
 800cfb8:	4a39      	ldr	r2, [pc, #228]	; (800d0a0 <_strtod_l+0x924>)
 800cfba:	2900      	cmp	r1, #0
 800cfbc:	d100      	bne.n	800cfc0 <_strtod_l+0x844>
 800cfbe:	e094      	b.n	800d0ea <_strtod_l+0x96e>
 800cfc0:	0011      	movs	r1, r2
 800cfc2:	20d6      	movs	r0, #214	; 0xd6
 800cfc4:	4039      	ands	r1, r7
 800cfc6:	04c0      	lsls	r0, r0, #19
 800cfc8:	4281      	cmp	r1, r0
 800cfca:	dd00      	ble.n	800cfce <_strtod_l+0x852>
 800cfcc:	e08d      	b.n	800d0ea <_strtod_l+0x96e>
 800cfce:	23dc      	movs	r3, #220	; 0xdc
 800cfd0:	049b      	lsls	r3, r3, #18
 800cfd2:	4299      	cmp	r1, r3
 800cfd4:	dc00      	bgt.n	800cfd8 <_strtod_l+0x85c>
 800cfd6:	e6a7      	b.n	800cd28 <_strtod_l+0x5ac>
 800cfd8:	0030      	movs	r0, r6
 800cfda:	0039      	movs	r1, r7
 800cfdc:	4b31      	ldr	r3, [pc, #196]	; (800d0a4 <_strtod_l+0x928>)
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f7f4 fe48 	bl	8001c74 <__aeabi_dmul>
 800cfe4:	4b2e      	ldr	r3, [pc, #184]	; (800d0a0 <_strtod_l+0x924>)
 800cfe6:	0006      	movs	r6, r0
 800cfe8:	000f      	movs	r7, r1
 800cfea:	420b      	tst	r3, r1
 800cfec:	d000      	beq.n	800cff0 <_strtod_l+0x874>
 800cfee:	e631      	b.n	800cc54 <_strtod_l+0x4d8>
 800cff0:	2322      	movs	r3, #34	; 0x22
 800cff2:	9a04      	ldr	r2, [sp, #16]
 800cff4:	6013      	str	r3, [r2, #0]
 800cff6:	e62d      	b.n	800cc54 <_strtod_l+0x4d8>
 800cff8:	234b      	movs	r3, #75	; 0x4b
 800cffa:	1a9a      	subs	r2, r3, r2
 800cffc:	3b4c      	subs	r3, #76	; 0x4c
 800cffe:	4093      	lsls	r3, r2
 800d000:	4019      	ands	r1, r3
 800d002:	000f      	movs	r7, r1
 800d004:	e6e3      	b.n	800cdce <_strtod_l+0x652>
 800d006:	2201      	movs	r2, #1
 800d008:	4252      	negs	r2, r2
 800d00a:	409a      	lsls	r2, r3
 800d00c:	4016      	ands	r6, r2
 800d00e:	e6de      	b.n	800cdce <_strtod_l+0x652>
 800d010:	4925      	ldr	r1, [pc, #148]	; (800d0a8 <_strtod_l+0x92c>)
 800d012:	1acb      	subs	r3, r1, r3
 800d014:	0001      	movs	r1, r0
 800d016:	4099      	lsls	r1, r3
 800d018:	9114      	str	r1, [sp, #80]	; 0x50
 800d01a:	e743      	b.n	800cea4 <_strtod_l+0x728>
 800d01c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d01e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d020:	9804      	ldr	r0, [sp, #16]
 800d022:	f7ff f93b 	bl	800c29c <__lshift>
 800d026:	901c      	str	r0, [sp, #112]	; 0x70
 800d028:	2800      	cmp	r0, #0
 800d02a:	d000      	beq.n	800d02e <_strtod_l+0x8b2>
 800d02c:	e76e      	b.n	800cf0c <_strtod_l+0x790>
 800d02e:	e608      	b.n	800cc42 <_strtod_l+0x4c6>
 800d030:	970e      	str	r7, [sp, #56]	; 0x38
 800d032:	2800      	cmp	r0, #0
 800d034:	d177      	bne.n	800d126 <_strtod_l+0x9aa>
 800d036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d038:	033b      	lsls	r3, r7, #12
 800d03a:	0b1b      	lsrs	r3, r3, #12
 800d03c:	2a00      	cmp	r2, #0
 800d03e:	d039      	beq.n	800d0b4 <_strtod_l+0x938>
 800d040:	4a1a      	ldr	r2, [pc, #104]	; (800d0ac <_strtod_l+0x930>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d139      	bne.n	800d0ba <_strtod_l+0x93e>
 800d046:	2101      	movs	r1, #1
 800d048:	9b07      	ldr	r3, [sp, #28]
 800d04a:	4249      	negs	r1, r1
 800d04c:	0032      	movs	r2, r6
 800d04e:	0008      	movs	r0, r1
 800d050:	2b00      	cmp	r3, #0
 800d052:	d00b      	beq.n	800d06c <_strtod_l+0x8f0>
 800d054:	24d4      	movs	r4, #212	; 0xd4
 800d056:	4b12      	ldr	r3, [pc, #72]	; (800d0a0 <_strtod_l+0x924>)
 800d058:	0008      	movs	r0, r1
 800d05a:	403b      	ands	r3, r7
 800d05c:	04e4      	lsls	r4, r4, #19
 800d05e:	42a3      	cmp	r3, r4
 800d060:	d804      	bhi.n	800d06c <_strtod_l+0x8f0>
 800d062:	306c      	adds	r0, #108	; 0x6c
 800d064:	0d1b      	lsrs	r3, r3, #20
 800d066:	1ac3      	subs	r3, r0, r3
 800d068:	4099      	lsls	r1, r3
 800d06a:	0008      	movs	r0, r1
 800d06c:	4282      	cmp	r2, r0
 800d06e:	d124      	bne.n	800d0ba <_strtod_l+0x93e>
 800d070:	4b0f      	ldr	r3, [pc, #60]	; (800d0b0 <_strtod_l+0x934>)
 800d072:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d074:	4299      	cmp	r1, r3
 800d076:	d102      	bne.n	800d07e <_strtod_l+0x902>
 800d078:	3201      	adds	r2, #1
 800d07a:	d100      	bne.n	800d07e <_strtod_l+0x902>
 800d07c:	e5e1      	b.n	800cc42 <_strtod_l+0x4c6>
 800d07e:	4b08      	ldr	r3, [pc, #32]	; (800d0a0 <_strtod_l+0x924>)
 800d080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d082:	2600      	movs	r6, #0
 800d084:	401a      	ands	r2, r3
 800d086:	0013      	movs	r3, r2
 800d088:	2280      	movs	r2, #128	; 0x80
 800d08a:	0352      	lsls	r2, r2, #13
 800d08c:	189f      	adds	r7, r3, r2
 800d08e:	9b07      	ldr	r3, [sp, #28]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1a1      	bne.n	800cfd8 <_strtod_l+0x85c>
 800d094:	e5de      	b.n	800cc54 <_strtod_l+0x4d8>
 800d096:	46c0      	nop			; (mov r8, r8)
 800d098:	0800ef70 	.word	0x0800ef70
 800d09c:	fffffc02 	.word	0xfffffc02
 800d0a0:	7ff00000 	.word	0x7ff00000
 800d0a4:	39500000 	.word	0x39500000
 800d0a8:	fffffbe2 	.word	0xfffffbe2
 800d0ac:	000fffff 	.word	0x000fffff
 800d0b0:	7fefffff 	.word	0x7fefffff
 800d0b4:	4333      	orrs	r3, r6
 800d0b6:	d100      	bne.n	800d0ba <_strtod_l+0x93e>
 800d0b8:	e77c      	b.n	800cfb4 <_strtod_l+0x838>
 800d0ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d01d      	beq.n	800d0fc <_strtod_l+0x980>
 800d0c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d0c4:	4213      	tst	r3, r2
 800d0c6:	d0e2      	beq.n	800d08e <_strtod_l+0x912>
 800d0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0ca:	0030      	movs	r0, r6
 800d0cc:	0039      	movs	r1, r7
 800d0ce:	9a07      	ldr	r2, [sp, #28]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d017      	beq.n	800d104 <_strtod_l+0x988>
 800d0d4:	f7ff fb3a 	bl	800c74c <sulp>
 800d0d8:	0002      	movs	r2, r0
 800d0da:	000b      	movs	r3, r1
 800d0dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d0de:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d0e0:	f7f3 fe6e 	bl	8000dc0 <__aeabi_dadd>
 800d0e4:	0006      	movs	r6, r0
 800d0e6:	000f      	movs	r7, r1
 800d0e8:	e7d1      	b.n	800d08e <_strtod_l+0x912>
 800d0ea:	2601      	movs	r6, #1
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	4a98      	ldr	r2, [pc, #608]	; (800d350 <_strtod_l+0xbd4>)
 800d0f0:	4276      	negs	r6, r6
 800d0f2:	189b      	adds	r3, r3, r2
 800d0f4:	4a97      	ldr	r2, [pc, #604]	; (800d354 <_strtod_l+0xbd8>)
 800d0f6:	431a      	orrs	r2, r3
 800d0f8:	0017      	movs	r7, r2
 800d0fa:	e7c8      	b.n	800d08e <_strtod_l+0x912>
 800d0fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0fe:	4233      	tst	r3, r6
 800d100:	d0c5      	beq.n	800d08e <_strtod_l+0x912>
 800d102:	e7e1      	b.n	800d0c8 <_strtod_l+0x94c>
 800d104:	f7ff fb22 	bl	800c74c <sulp>
 800d108:	0002      	movs	r2, r0
 800d10a:	000b      	movs	r3, r1
 800d10c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d10e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d110:	f7f5 f872 	bl	80021f8 <__aeabi_dsub>
 800d114:	2200      	movs	r2, #0
 800d116:	2300      	movs	r3, #0
 800d118:	0006      	movs	r6, r0
 800d11a:	000f      	movs	r7, r1
 800d11c:	f7f3 f996 	bl	800044c <__aeabi_dcmpeq>
 800d120:	2800      	cmp	r0, #0
 800d122:	d0b4      	beq.n	800d08e <_strtod_l+0x912>
 800d124:	e600      	b.n	800cd28 <_strtod_l+0x5ac>
 800d126:	9906      	ldr	r1, [sp, #24]
 800d128:	9805      	ldr	r0, [sp, #20]
 800d12a:	f7ff faa1 	bl	800c670 <__ratio>
 800d12e:	2380      	movs	r3, #128	; 0x80
 800d130:	2200      	movs	r2, #0
 800d132:	05db      	lsls	r3, r3, #23
 800d134:	0004      	movs	r4, r0
 800d136:	000d      	movs	r5, r1
 800d138:	f7f3 f998 	bl	800046c <__aeabi_dcmple>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d06d      	beq.n	800d21c <_strtod_l+0xaa0>
 800d140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d142:	2b00      	cmp	r3, #0
 800d144:	d000      	beq.n	800d148 <_strtod_l+0x9cc>
 800d146:	e07e      	b.n	800d246 <_strtod_l+0xaca>
 800d148:	2e00      	cmp	r6, #0
 800d14a:	d158      	bne.n	800d1fe <_strtod_l+0xa82>
 800d14c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d14e:	031b      	lsls	r3, r3, #12
 800d150:	d000      	beq.n	800d154 <_strtod_l+0x9d8>
 800d152:	e07f      	b.n	800d254 <_strtod_l+0xad8>
 800d154:	2200      	movs	r2, #0
 800d156:	0020      	movs	r0, r4
 800d158:	0029      	movs	r1, r5
 800d15a:	4b7f      	ldr	r3, [pc, #508]	; (800d358 <_strtod_l+0xbdc>)
 800d15c:	f7f3 f97c 	bl	8000458 <__aeabi_dcmplt>
 800d160:	2800      	cmp	r0, #0
 800d162:	d158      	bne.n	800d216 <_strtod_l+0xa9a>
 800d164:	0020      	movs	r0, r4
 800d166:	0029      	movs	r1, r5
 800d168:	2200      	movs	r2, #0
 800d16a:	4b7c      	ldr	r3, [pc, #496]	; (800d35c <_strtod_l+0xbe0>)
 800d16c:	f7f4 fd82 	bl	8001c74 <__aeabi_dmul>
 800d170:	0004      	movs	r4, r0
 800d172:	000d      	movs	r5, r1
 800d174:	2380      	movs	r3, #128	; 0x80
 800d176:	061b      	lsls	r3, r3, #24
 800d178:	940a      	str	r4, [sp, #40]	; 0x28
 800d17a:	18eb      	adds	r3, r5, r3
 800d17c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d17e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d182:	9212      	str	r2, [sp, #72]	; 0x48
 800d184:	9313      	str	r3, [sp, #76]	; 0x4c
 800d186:	4a76      	ldr	r2, [pc, #472]	; (800d360 <_strtod_l+0xbe4>)
 800d188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d18a:	4013      	ands	r3, r2
 800d18c:	9314      	str	r3, [sp, #80]	; 0x50
 800d18e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d190:	4b74      	ldr	r3, [pc, #464]	; (800d364 <_strtod_l+0xbe8>)
 800d192:	429a      	cmp	r2, r3
 800d194:	d000      	beq.n	800d198 <_strtod_l+0xa1c>
 800d196:	e091      	b.n	800d2bc <_strtod_l+0xb40>
 800d198:	4a73      	ldr	r2, [pc, #460]	; (800d368 <_strtod_l+0xbec>)
 800d19a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d19c:	4694      	mov	ip, r2
 800d19e:	4463      	add	r3, ip
 800d1a0:	001f      	movs	r7, r3
 800d1a2:	0030      	movs	r0, r6
 800d1a4:	0019      	movs	r1, r3
 800d1a6:	f7ff f99b 	bl	800c4e0 <__ulp>
 800d1aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1ae:	f7f4 fd61 	bl	8001c74 <__aeabi_dmul>
 800d1b2:	0032      	movs	r2, r6
 800d1b4:	003b      	movs	r3, r7
 800d1b6:	f7f3 fe03 	bl	8000dc0 <__aeabi_dadd>
 800d1ba:	4a69      	ldr	r2, [pc, #420]	; (800d360 <_strtod_l+0xbe4>)
 800d1bc:	4b6b      	ldr	r3, [pc, #428]	; (800d36c <_strtod_l+0xbf0>)
 800d1be:	0006      	movs	r6, r0
 800d1c0:	400a      	ands	r2, r1
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d949      	bls.n	800d25a <_strtod_l+0xade>
 800d1c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d1c8:	4b69      	ldr	r3, [pc, #420]	; (800d370 <_strtod_l+0xbf4>)
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d103      	bne.n	800d1d6 <_strtod_l+0xa5a>
 800d1ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	d100      	bne.n	800d1d6 <_strtod_l+0xa5a>
 800d1d4:	e535      	b.n	800cc42 <_strtod_l+0x4c6>
 800d1d6:	2601      	movs	r6, #1
 800d1d8:	4f65      	ldr	r7, [pc, #404]	; (800d370 <_strtod_l+0xbf4>)
 800d1da:	4276      	negs	r6, r6
 800d1dc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d1de:	9804      	ldr	r0, [sp, #16]
 800d1e0:	f7fe fe3c 	bl	800be5c <_Bfree>
 800d1e4:	9908      	ldr	r1, [sp, #32]
 800d1e6:	9804      	ldr	r0, [sp, #16]
 800d1e8:	f7fe fe38 	bl	800be5c <_Bfree>
 800d1ec:	9906      	ldr	r1, [sp, #24]
 800d1ee:	9804      	ldr	r0, [sp, #16]
 800d1f0:	f7fe fe34 	bl	800be5c <_Bfree>
 800d1f4:	9905      	ldr	r1, [sp, #20]
 800d1f6:	9804      	ldr	r0, [sp, #16]
 800d1f8:	f7fe fe30 	bl	800be5c <_Bfree>
 800d1fc:	e60b      	b.n	800ce16 <_strtod_l+0x69a>
 800d1fe:	2e01      	cmp	r6, #1
 800d200:	d103      	bne.n	800d20a <_strtod_l+0xa8e>
 800d202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d204:	2b00      	cmp	r3, #0
 800d206:	d100      	bne.n	800d20a <_strtod_l+0xa8e>
 800d208:	e58e      	b.n	800cd28 <_strtod_l+0x5ac>
 800d20a:	2300      	movs	r3, #0
 800d20c:	4c59      	ldr	r4, [pc, #356]	; (800d374 <_strtod_l+0xbf8>)
 800d20e:	930a      	str	r3, [sp, #40]	; 0x28
 800d210:	940b      	str	r4, [sp, #44]	; 0x2c
 800d212:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d214:	e01c      	b.n	800d250 <_strtod_l+0xad4>
 800d216:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d218:	4d50      	ldr	r5, [pc, #320]	; (800d35c <_strtod_l+0xbe0>)
 800d21a:	e7ab      	b.n	800d174 <_strtod_l+0x9f8>
 800d21c:	2200      	movs	r2, #0
 800d21e:	0020      	movs	r0, r4
 800d220:	0029      	movs	r1, r5
 800d222:	4b4e      	ldr	r3, [pc, #312]	; (800d35c <_strtod_l+0xbe0>)
 800d224:	f7f4 fd26 	bl	8001c74 <__aeabi_dmul>
 800d228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d22a:	0004      	movs	r4, r0
 800d22c:	000b      	movs	r3, r1
 800d22e:	000d      	movs	r5, r1
 800d230:	2a00      	cmp	r2, #0
 800d232:	d104      	bne.n	800d23e <_strtod_l+0xac2>
 800d234:	2280      	movs	r2, #128	; 0x80
 800d236:	0612      	lsls	r2, r2, #24
 800d238:	900a      	str	r0, [sp, #40]	; 0x28
 800d23a:	188b      	adds	r3, r1, r2
 800d23c:	e79e      	b.n	800d17c <_strtod_l+0xa00>
 800d23e:	0002      	movs	r2, r0
 800d240:	920a      	str	r2, [sp, #40]	; 0x28
 800d242:	930b      	str	r3, [sp, #44]	; 0x2c
 800d244:	e79b      	b.n	800d17e <_strtod_l+0xa02>
 800d246:	2300      	movs	r3, #0
 800d248:	4c43      	ldr	r4, [pc, #268]	; (800d358 <_strtod_l+0xbdc>)
 800d24a:	930a      	str	r3, [sp, #40]	; 0x28
 800d24c:	940b      	str	r4, [sp, #44]	; 0x2c
 800d24e:	2400      	movs	r4, #0
 800d250:	4d41      	ldr	r5, [pc, #260]	; (800d358 <_strtod_l+0xbdc>)
 800d252:	e794      	b.n	800d17e <_strtod_l+0xa02>
 800d254:	2300      	movs	r3, #0
 800d256:	4c47      	ldr	r4, [pc, #284]	; (800d374 <_strtod_l+0xbf8>)
 800d258:	e7f7      	b.n	800d24a <_strtod_l+0xace>
 800d25a:	23d4      	movs	r3, #212	; 0xd4
 800d25c:	049b      	lsls	r3, r3, #18
 800d25e:	18cf      	adds	r7, r1, r3
 800d260:	9b07      	ldr	r3, [sp, #28]
 800d262:	970e      	str	r7, [sp, #56]	; 0x38
 800d264:	2b00      	cmp	r3, #0
 800d266:	d1b9      	bne.n	800d1dc <_strtod_l+0xa60>
 800d268:	4b3d      	ldr	r3, [pc, #244]	; (800d360 <_strtod_l+0xbe4>)
 800d26a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d26c:	403b      	ands	r3, r7
 800d26e:	429a      	cmp	r2, r3
 800d270:	d1b4      	bne.n	800d1dc <_strtod_l+0xa60>
 800d272:	0020      	movs	r0, r4
 800d274:	0029      	movs	r1, r5
 800d276:	f7f3 f983 	bl	8000580 <__aeabi_d2lz>
 800d27a:	f7f3 f9bd 	bl	80005f8 <__aeabi_l2d>
 800d27e:	0002      	movs	r2, r0
 800d280:	000b      	movs	r3, r1
 800d282:	0020      	movs	r0, r4
 800d284:	0029      	movs	r1, r5
 800d286:	f7f4 ffb7 	bl	80021f8 <__aeabi_dsub>
 800d28a:	033b      	lsls	r3, r7, #12
 800d28c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d28e:	0b1b      	lsrs	r3, r3, #12
 800d290:	4333      	orrs	r3, r6
 800d292:	4313      	orrs	r3, r2
 800d294:	0004      	movs	r4, r0
 800d296:	000d      	movs	r5, r1
 800d298:	4a37      	ldr	r2, [pc, #220]	; (800d378 <_strtod_l+0xbfc>)
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d054      	beq.n	800d348 <_strtod_l+0xbcc>
 800d29e:	4b37      	ldr	r3, [pc, #220]	; (800d37c <_strtod_l+0xc00>)
 800d2a0:	f7f3 f8da 	bl	8000458 <__aeabi_dcmplt>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d000      	beq.n	800d2aa <_strtod_l+0xb2e>
 800d2a8:	e4d4      	b.n	800cc54 <_strtod_l+0x4d8>
 800d2aa:	0020      	movs	r0, r4
 800d2ac:	0029      	movs	r1, r5
 800d2ae:	4a34      	ldr	r2, [pc, #208]	; (800d380 <_strtod_l+0xc04>)
 800d2b0:	4b2a      	ldr	r3, [pc, #168]	; (800d35c <_strtod_l+0xbe0>)
 800d2b2:	f7f3 f8e5 	bl	8000480 <__aeabi_dcmpgt>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d090      	beq.n	800d1dc <_strtod_l+0xa60>
 800d2ba:	e4cb      	b.n	800cc54 <_strtod_l+0x4d8>
 800d2bc:	9b07      	ldr	r3, [sp, #28]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d02b      	beq.n	800d31a <_strtod_l+0xb9e>
 800d2c2:	23d4      	movs	r3, #212	; 0xd4
 800d2c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d2c6:	04db      	lsls	r3, r3, #19
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d826      	bhi.n	800d31a <_strtod_l+0xb9e>
 800d2cc:	0020      	movs	r0, r4
 800d2ce:	0029      	movs	r1, r5
 800d2d0:	4a2c      	ldr	r2, [pc, #176]	; (800d384 <_strtod_l+0xc08>)
 800d2d2:	4b2d      	ldr	r3, [pc, #180]	; (800d388 <_strtod_l+0xc0c>)
 800d2d4:	f7f3 f8ca 	bl	800046c <__aeabi_dcmple>
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	d017      	beq.n	800d30c <_strtod_l+0xb90>
 800d2dc:	0020      	movs	r0, r4
 800d2de:	0029      	movs	r1, r5
 800d2e0:	f7f3 f930 	bl	8000544 <__aeabi_d2uiz>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d100      	bne.n	800d2ea <_strtod_l+0xb6e>
 800d2e8:	3001      	adds	r0, #1
 800d2ea:	f7f5 fb8b 	bl	8002a04 <__aeabi_ui2d>
 800d2ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2f0:	0004      	movs	r4, r0
 800d2f2:	000b      	movs	r3, r1
 800d2f4:	000d      	movs	r5, r1
 800d2f6:	2a00      	cmp	r2, #0
 800d2f8:	d122      	bne.n	800d340 <_strtod_l+0xbc4>
 800d2fa:	2280      	movs	r2, #128	; 0x80
 800d2fc:	0612      	lsls	r2, r2, #24
 800d2fe:	188b      	adds	r3, r1, r2
 800d300:	9016      	str	r0, [sp, #88]	; 0x58
 800d302:	9317      	str	r3, [sp, #92]	; 0x5c
 800d304:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d306:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d308:	9212      	str	r2, [sp, #72]	; 0x48
 800d30a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d30c:	22d6      	movs	r2, #214	; 0xd6
 800d30e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d310:	04d2      	lsls	r2, r2, #19
 800d312:	189b      	adds	r3, r3, r2
 800d314:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d316:	1a9b      	subs	r3, r3, r2
 800d318:	9313      	str	r3, [sp, #76]	; 0x4c
 800d31a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d31c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d31e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d320:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d322:	f7ff f8dd 	bl	800c4e0 <__ulp>
 800d326:	0002      	movs	r2, r0
 800d328:	000b      	movs	r3, r1
 800d32a:	0030      	movs	r0, r6
 800d32c:	0039      	movs	r1, r7
 800d32e:	f7f4 fca1 	bl	8001c74 <__aeabi_dmul>
 800d332:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d334:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d336:	f7f3 fd43 	bl	8000dc0 <__aeabi_dadd>
 800d33a:	0006      	movs	r6, r0
 800d33c:	000f      	movs	r7, r1
 800d33e:	e78f      	b.n	800d260 <_strtod_l+0xae4>
 800d340:	0002      	movs	r2, r0
 800d342:	9216      	str	r2, [sp, #88]	; 0x58
 800d344:	9317      	str	r3, [sp, #92]	; 0x5c
 800d346:	e7dd      	b.n	800d304 <_strtod_l+0xb88>
 800d348:	4b10      	ldr	r3, [pc, #64]	; (800d38c <_strtod_l+0xc10>)
 800d34a:	f7f3 f885 	bl	8000458 <__aeabi_dcmplt>
 800d34e:	e7b2      	b.n	800d2b6 <_strtod_l+0xb3a>
 800d350:	fff00000 	.word	0xfff00000
 800d354:	000fffff 	.word	0x000fffff
 800d358:	3ff00000 	.word	0x3ff00000
 800d35c:	3fe00000 	.word	0x3fe00000
 800d360:	7ff00000 	.word	0x7ff00000
 800d364:	7fe00000 	.word	0x7fe00000
 800d368:	fcb00000 	.word	0xfcb00000
 800d36c:	7c9fffff 	.word	0x7c9fffff
 800d370:	7fefffff 	.word	0x7fefffff
 800d374:	bff00000 	.word	0xbff00000
 800d378:	94a03595 	.word	0x94a03595
 800d37c:	3fdfffff 	.word	0x3fdfffff
 800d380:	35afe535 	.word	0x35afe535
 800d384:	ffc00000 	.word	0xffc00000
 800d388:	41dfffff 	.word	0x41dfffff
 800d38c:	3fcfffff 	.word	0x3fcfffff

0800d390 <_strtod_r>:
 800d390:	b510      	push	{r4, lr}
 800d392:	4b02      	ldr	r3, [pc, #8]	; (800d39c <_strtod_r+0xc>)
 800d394:	f7ff f9f2 	bl	800c77c <_strtod_l>
 800d398:	bd10      	pop	{r4, pc}
 800d39a:	46c0      	nop			; (mov r8, r8)
 800d39c:	20000080 	.word	0x20000080

0800d3a0 <_strtol_l.constprop.0>:
 800d3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3a2:	b087      	sub	sp, #28
 800d3a4:	001e      	movs	r6, r3
 800d3a6:	9005      	str	r0, [sp, #20]
 800d3a8:	9101      	str	r1, [sp, #4]
 800d3aa:	9202      	str	r2, [sp, #8]
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d048      	beq.n	800d442 <_strtol_l.constprop.0+0xa2>
 800d3b0:	000b      	movs	r3, r1
 800d3b2:	2e24      	cmp	r6, #36	; 0x24
 800d3b4:	d845      	bhi.n	800d442 <_strtol_l.constprop.0+0xa2>
 800d3b6:	4a3b      	ldr	r2, [pc, #236]	; (800d4a4 <_strtol_l.constprop.0+0x104>)
 800d3b8:	2108      	movs	r1, #8
 800d3ba:	4694      	mov	ip, r2
 800d3bc:	001a      	movs	r2, r3
 800d3be:	4660      	mov	r0, ip
 800d3c0:	7814      	ldrb	r4, [r2, #0]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	5d00      	ldrb	r0, [r0, r4]
 800d3c6:	001d      	movs	r5, r3
 800d3c8:	0007      	movs	r7, r0
 800d3ca:	400f      	ands	r7, r1
 800d3cc:	4208      	tst	r0, r1
 800d3ce:	d1f5      	bne.n	800d3bc <_strtol_l.constprop.0+0x1c>
 800d3d0:	2c2d      	cmp	r4, #45	; 0x2d
 800d3d2:	d13d      	bne.n	800d450 <_strtol_l.constprop.0+0xb0>
 800d3d4:	2701      	movs	r7, #1
 800d3d6:	781c      	ldrb	r4, [r3, #0]
 800d3d8:	1c95      	adds	r5, r2, #2
 800d3da:	2e00      	cmp	r6, #0
 800d3dc:	d05e      	beq.n	800d49c <_strtol_l.constprop.0+0xfc>
 800d3de:	2e10      	cmp	r6, #16
 800d3e0:	d109      	bne.n	800d3f6 <_strtol_l.constprop.0+0x56>
 800d3e2:	2c30      	cmp	r4, #48	; 0x30
 800d3e4:	d107      	bne.n	800d3f6 <_strtol_l.constprop.0+0x56>
 800d3e6:	2220      	movs	r2, #32
 800d3e8:	782b      	ldrb	r3, [r5, #0]
 800d3ea:	4393      	bics	r3, r2
 800d3ec:	2b58      	cmp	r3, #88	; 0x58
 800d3ee:	d150      	bne.n	800d492 <_strtol_l.constprop.0+0xf2>
 800d3f0:	2610      	movs	r6, #16
 800d3f2:	786c      	ldrb	r4, [r5, #1]
 800d3f4:	3502      	adds	r5, #2
 800d3f6:	4b2c      	ldr	r3, [pc, #176]	; (800d4a8 <_strtol_l.constprop.0+0x108>)
 800d3f8:	0031      	movs	r1, r6
 800d3fa:	18fb      	adds	r3, r7, r3
 800d3fc:	0018      	movs	r0, r3
 800d3fe:	9303      	str	r3, [sp, #12]
 800d400:	f7f2 ff24 	bl	800024c <__aeabi_uidivmod>
 800d404:	2200      	movs	r2, #0
 800d406:	9104      	str	r1, [sp, #16]
 800d408:	2101      	movs	r1, #1
 800d40a:	4684      	mov	ip, r0
 800d40c:	0010      	movs	r0, r2
 800d40e:	4249      	negs	r1, r1
 800d410:	0023      	movs	r3, r4
 800d412:	3b30      	subs	r3, #48	; 0x30
 800d414:	2b09      	cmp	r3, #9
 800d416:	d903      	bls.n	800d420 <_strtol_l.constprop.0+0x80>
 800d418:	3b11      	subs	r3, #17
 800d41a:	2b19      	cmp	r3, #25
 800d41c:	d81d      	bhi.n	800d45a <_strtol_l.constprop.0+0xba>
 800d41e:	330a      	adds	r3, #10
 800d420:	429e      	cmp	r6, r3
 800d422:	dd1e      	ble.n	800d462 <_strtol_l.constprop.0+0xc2>
 800d424:	1c54      	adds	r4, r2, #1
 800d426:	d009      	beq.n	800d43c <_strtol_l.constprop.0+0x9c>
 800d428:	000a      	movs	r2, r1
 800d42a:	4584      	cmp	ip, r0
 800d42c:	d306      	bcc.n	800d43c <_strtol_l.constprop.0+0x9c>
 800d42e:	d102      	bne.n	800d436 <_strtol_l.constprop.0+0x96>
 800d430:	9c04      	ldr	r4, [sp, #16]
 800d432:	429c      	cmp	r4, r3
 800d434:	db02      	blt.n	800d43c <_strtol_l.constprop.0+0x9c>
 800d436:	2201      	movs	r2, #1
 800d438:	4370      	muls	r0, r6
 800d43a:	1818      	adds	r0, r3, r0
 800d43c:	782c      	ldrb	r4, [r5, #0]
 800d43e:	3501      	adds	r5, #1
 800d440:	e7e6      	b.n	800d410 <_strtol_l.constprop.0+0x70>
 800d442:	f7fd fce5 	bl	800ae10 <__errno>
 800d446:	2316      	movs	r3, #22
 800d448:	6003      	str	r3, [r0, #0]
 800d44a:	2000      	movs	r0, #0
 800d44c:	b007      	add	sp, #28
 800d44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d450:	2c2b      	cmp	r4, #43	; 0x2b
 800d452:	d1c2      	bne.n	800d3da <_strtol_l.constprop.0+0x3a>
 800d454:	781c      	ldrb	r4, [r3, #0]
 800d456:	1c95      	adds	r5, r2, #2
 800d458:	e7bf      	b.n	800d3da <_strtol_l.constprop.0+0x3a>
 800d45a:	0023      	movs	r3, r4
 800d45c:	3b61      	subs	r3, #97	; 0x61
 800d45e:	2b19      	cmp	r3, #25
 800d460:	d9dd      	bls.n	800d41e <_strtol_l.constprop.0+0x7e>
 800d462:	1c53      	adds	r3, r2, #1
 800d464:	d109      	bne.n	800d47a <_strtol_l.constprop.0+0xda>
 800d466:	2322      	movs	r3, #34	; 0x22
 800d468:	9a05      	ldr	r2, [sp, #20]
 800d46a:	9803      	ldr	r0, [sp, #12]
 800d46c:	6013      	str	r3, [r2, #0]
 800d46e:	9b02      	ldr	r3, [sp, #8]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d0eb      	beq.n	800d44c <_strtol_l.constprop.0+0xac>
 800d474:	1e6b      	subs	r3, r5, #1
 800d476:	9301      	str	r3, [sp, #4]
 800d478:	e007      	b.n	800d48a <_strtol_l.constprop.0+0xea>
 800d47a:	2f00      	cmp	r7, #0
 800d47c:	d000      	beq.n	800d480 <_strtol_l.constprop.0+0xe0>
 800d47e:	4240      	negs	r0, r0
 800d480:	9b02      	ldr	r3, [sp, #8]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d0e2      	beq.n	800d44c <_strtol_l.constprop.0+0xac>
 800d486:	2a00      	cmp	r2, #0
 800d488:	d1f4      	bne.n	800d474 <_strtol_l.constprop.0+0xd4>
 800d48a:	9b02      	ldr	r3, [sp, #8]
 800d48c:	9a01      	ldr	r2, [sp, #4]
 800d48e:	601a      	str	r2, [r3, #0]
 800d490:	e7dc      	b.n	800d44c <_strtol_l.constprop.0+0xac>
 800d492:	2430      	movs	r4, #48	; 0x30
 800d494:	2e00      	cmp	r6, #0
 800d496:	d1ae      	bne.n	800d3f6 <_strtol_l.constprop.0+0x56>
 800d498:	3608      	adds	r6, #8
 800d49a:	e7ac      	b.n	800d3f6 <_strtol_l.constprop.0+0x56>
 800d49c:	2c30      	cmp	r4, #48	; 0x30
 800d49e:	d0a2      	beq.n	800d3e6 <_strtol_l.constprop.0+0x46>
 800d4a0:	260a      	movs	r6, #10
 800d4a2:	e7a8      	b.n	800d3f6 <_strtol_l.constprop.0+0x56>
 800d4a4:	0800ef99 	.word	0x0800ef99
 800d4a8:	7fffffff 	.word	0x7fffffff

0800d4ac <_strtol_r>:
 800d4ac:	b510      	push	{r4, lr}
 800d4ae:	f7ff ff77 	bl	800d3a0 <_strtol_l.constprop.0>
 800d4b2:	bd10      	pop	{r4, pc}

0800d4b4 <__ssputs_r>:
 800d4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	9203      	str	r2, [sp, #12]
 800d4bc:	688e      	ldr	r6, [r1, #8]
 800d4be:	9a01      	ldr	r2, [sp, #4]
 800d4c0:	0007      	movs	r7, r0
 800d4c2:	000c      	movs	r4, r1
 800d4c4:	680b      	ldr	r3, [r1, #0]
 800d4c6:	4296      	cmp	r6, r2
 800d4c8:	d831      	bhi.n	800d52e <__ssputs_r+0x7a>
 800d4ca:	898a      	ldrh	r2, [r1, #12]
 800d4cc:	2190      	movs	r1, #144	; 0x90
 800d4ce:	00c9      	lsls	r1, r1, #3
 800d4d0:	420a      	tst	r2, r1
 800d4d2:	d029      	beq.n	800d528 <__ssputs_r+0x74>
 800d4d4:	2003      	movs	r0, #3
 800d4d6:	6921      	ldr	r1, [r4, #16]
 800d4d8:	1a5b      	subs	r3, r3, r1
 800d4da:	9302      	str	r3, [sp, #8]
 800d4dc:	6963      	ldr	r3, [r4, #20]
 800d4de:	4343      	muls	r3, r0
 800d4e0:	0fdd      	lsrs	r5, r3, #31
 800d4e2:	18ed      	adds	r5, r5, r3
 800d4e4:	9b01      	ldr	r3, [sp, #4]
 800d4e6:	9802      	ldr	r0, [sp, #8]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	181b      	adds	r3, r3, r0
 800d4ec:	106d      	asrs	r5, r5, #1
 800d4ee:	42ab      	cmp	r3, r5
 800d4f0:	d900      	bls.n	800d4f4 <__ssputs_r+0x40>
 800d4f2:	001d      	movs	r5, r3
 800d4f4:	0552      	lsls	r2, r2, #21
 800d4f6:	d529      	bpl.n	800d54c <__ssputs_r+0x98>
 800d4f8:	0029      	movs	r1, r5
 800d4fa:	0038      	movs	r0, r7
 800d4fc:	f7fe fbd8 	bl	800bcb0 <_malloc_r>
 800d500:	1e06      	subs	r6, r0, #0
 800d502:	d02d      	beq.n	800d560 <__ssputs_r+0xac>
 800d504:	9a02      	ldr	r2, [sp, #8]
 800d506:	6921      	ldr	r1, [r4, #16]
 800d508:	f000 fa22 	bl	800d950 <memcpy>
 800d50c:	89a2      	ldrh	r2, [r4, #12]
 800d50e:	4b19      	ldr	r3, [pc, #100]	; (800d574 <__ssputs_r+0xc0>)
 800d510:	401a      	ands	r2, r3
 800d512:	2380      	movs	r3, #128	; 0x80
 800d514:	4313      	orrs	r3, r2
 800d516:	81a3      	strh	r3, [r4, #12]
 800d518:	9b02      	ldr	r3, [sp, #8]
 800d51a:	6126      	str	r6, [r4, #16]
 800d51c:	18f6      	adds	r6, r6, r3
 800d51e:	6026      	str	r6, [r4, #0]
 800d520:	6165      	str	r5, [r4, #20]
 800d522:	9e01      	ldr	r6, [sp, #4]
 800d524:	1aed      	subs	r5, r5, r3
 800d526:	60a5      	str	r5, [r4, #8]
 800d528:	9b01      	ldr	r3, [sp, #4]
 800d52a:	429e      	cmp	r6, r3
 800d52c:	d900      	bls.n	800d530 <__ssputs_r+0x7c>
 800d52e:	9e01      	ldr	r6, [sp, #4]
 800d530:	0032      	movs	r2, r6
 800d532:	9903      	ldr	r1, [sp, #12]
 800d534:	6820      	ldr	r0, [r4, #0]
 800d536:	f000 f9d4 	bl	800d8e2 <memmove>
 800d53a:	2000      	movs	r0, #0
 800d53c:	68a3      	ldr	r3, [r4, #8]
 800d53e:	1b9b      	subs	r3, r3, r6
 800d540:	60a3      	str	r3, [r4, #8]
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	199b      	adds	r3, r3, r6
 800d546:	6023      	str	r3, [r4, #0]
 800d548:	b005      	add	sp, #20
 800d54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d54c:	002a      	movs	r2, r5
 800d54e:	0038      	movs	r0, r7
 800d550:	f000 fdc8 	bl	800e0e4 <_realloc_r>
 800d554:	1e06      	subs	r6, r0, #0
 800d556:	d1df      	bne.n	800d518 <__ssputs_r+0x64>
 800d558:	0038      	movs	r0, r7
 800d55a:	6921      	ldr	r1, [r4, #16]
 800d55c:	f7fe fb32 	bl	800bbc4 <_free_r>
 800d560:	230c      	movs	r3, #12
 800d562:	2001      	movs	r0, #1
 800d564:	603b      	str	r3, [r7, #0]
 800d566:	89a2      	ldrh	r2, [r4, #12]
 800d568:	3334      	adds	r3, #52	; 0x34
 800d56a:	4313      	orrs	r3, r2
 800d56c:	81a3      	strh	r3, [r4, #12]
 800d56e:	4240      	negs	r0, r0
 800d570:	e7ea      	b.n	800d548 <__ssputs_r+0x94>
 800d572:	46c0      	nop			; (mov r8, r8)
 800d574:	fffffb7f 	.word	0xfffffb7f

0800d578 <_svfiprintf_r>:
 800d578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d57a:	b0a1      	sub	sp, #132	; 0x84
 800d57c:	9003      	str	r0, [sp, #12]
 800d57e:	001d      	movs	r5, r3
 800d580:	898b      	ldrh	r3, [r1, #12]
 800d582:	000f      	movs	r7, r1
 800d584:	0016      	movs	r6, r2
 800d586:	061b      	lsls	r3, r3, #24
 800d588:	d511      	bpl.n	800d5ae <_svfiprintf_r+0x36>
 800d58a:	690b      	ldr	r3, [r1, #16]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d10e      	bne.n	800d5ae <_svfiprintf_r+0x36>
 800d590:	2140      	movs	r1, #64	; 0x40
 800d592:	f7fe fb8d 	bl	800bcb0 <_malloc_r>
 800d596:	6038      	str	r0, [r7, #0]
 800d598:	6138      	str	r0, [r7, #16]
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d105      	bne.n	800d5aa <_svfiprintf_r+0x32>
 800d59e:	230c      	movs	r3, #12
 800d5a0:	9a03      	ldr	r2, [sp, #12]
 800d5a2:	3801      	subs	r0, #1
 800d5a4:	6013      	str	r3, [r2, #0]
 800d5a6:	b021      	add	sp, #132	; 0x84
 800d5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5aa:	2340      	movs	r3, #64	; 0x40
 800d5ac:	617b      	str	r3, [r7, #20]
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	ac08      	add	r4, sp, #32
 800d5b2:	6163      	str	r3, [r4, #20]
 800d5b4:	3320      	adds	r3, #32
 800d5b6:	7663      	strb	r3, [r4, #25]
 800d5b8:	3310      	adds	r3, #16
 800d5ba:	76a3      	strb	r3, [r4, #26]
 800d5bc:	9507      	str	r5, [sp, #28]
 800d5be:	0035      	movs	r5, r6
 800d5c0:	782b      	ldrb	r3, [r5, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d001      	beq.n	800d5ca <_svfiprintf_r+0x52>
 800d5c6:	2b25      	cmp	r3, #37	; 0x25
 800d5c8:	d148      	bne.n	800d65c <_svfiprintf_r+0xe4>
 800d5ca:	1bab      	subs	r3, r5, r6
 800d5cc:	9305      	str	r3, [sp, #20]
 800d5ce:	42b5      	cmp	r5, r6
 800d5d0:	d00b      	beq.n	800d5ea <_svfiprintf_r+0x72>
 800d5d2:	0032      	movs	r2, r6
 800d5d4:	0039      	movs	r1, r7
 800d5d6:	9803      	ldr	r0, [sp, #12]
 800d5d8:	f7ff ff6c 	bl	800d4b4 <__ssputs_r>
 800d5dc:	3001      	adds	r0, #1
 800d5de:	d100      	bne.n	800d5e2 <_svfiprintf_r+0x6a>
 800d5e0:	e0af      	b.n	800d742 <_svfiprintf_r+0x1ca>
 800d5e2:	6963      	ldr	r3, [r4, #20]
 800d5e4:	9a05      	ldr	r2, [sp, #20]
 800d5e6:	189b      	adds	r3, r3, r2
 800d5e8:	6163      	str	r3, [r4, #20]
 800d5ea:	782b      	ldrb	r3, [r5, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d100      	bne.n	800d5f2 <_svfiprintf_r+0x7a>
 800d5f0:	e0a7      	b.n	800d742 <_svfiprintf_r+0x1ca>
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	4252      	negs	r2, r2
 800d5f8:	6062      	str	r2, [r4, #4]
 800d5fa:	a904      	add	r1, sp, #16
 800d5fc:	3254      	adds	r2, #84	; 0x54
 800d5fe:	1852      	adds	r2, r2, r1
 800d600:	1c6e      	adds	r6, r5, #1
 800d602:	6023      	str	r3, [r4, #0]
 800d604:	60e3      	str	r3, [r4, #12]
 800d606:	60a3      	str	r3, [r4, #8]
 800d608:	7013      	strb	r3, [r2, #0]
 800d60a:	65a3      	str	r3, [r4, #88]	; 0x58
 800d60c:	4b55      	ldr	r3, [pc, #340]	; (800d764 <_svfiprintf_r+0x1ec>)
 800d60e:	2205      	movs	r2, #5
 800d610:	0018      	movs	r0, r3
 800d612:	7831      	ldrb	r1, [r6, #0]
 800d614:	9305      	str	r3, [sp, #20]
 800d616:	f7fd fc28 	bl	800ae6a <memchr>
 800d61a:	1c75      	adds	r5, r6, #1
 800d61c:	2800      	cmp	r0, #0
 800d61e:	d11f      	bne.n	800d660 <_svfiprintf_r+0xe8>
 800d620:	6822      	ldr	r2, [r4, #0]
 800d622:	06d3      	lsls	r3, r2, #27
 800d624:	d504      	bpl.n	800d630 <_svfiprintf_r+0xb8>
 800d626:	2353      	movs	r3, #83	; 0x53
 800d628:	a904      	add	r1, sp, #16
 800d62a:	185b      	adds	r3, r3, r1
 800d62c:	2120      	movs	r1, #32
 800d62e:	7019      	strb	r1, [r3, #0]
 800d630:	0713      	lsls	r3, r2, #28
 800d632:	d504      	bpl.n	800d63e <_svfiprintf_r+0xc6>
 800d634:	2353      	movs	r3, #83	; 0x53
 800d636:	a904      	add	r1, sp, #16
 800d638:	185b      	adds	r3, r3, r1
 800d63a:	212b      	movs	r1, #43	; 0x2b
 800d63c:	7019      	strb	r1, [r3, #0]
 800d63e:	7833      	ldrb	r3, [r6, #0]
 800d640:	2b2a      	cmp	r3, #42	; 0x2a
 800d642:	d016      	beq.n	800d672 <_svfiprintf_r+0xfa>
 800d644:	0035      	movs	r5, r6
 800d646:	2100      	movs	r1, #0
 800d648:	200a      	movs	r0, #10
 800d64a:	68e3      	ldr	r3, [r4, #12]
 800d64c:	782a      	ldrb	r2, [r5, #0]
 800d64e:	1c6e      	adds	r6, r5, #1
 800d650:	3a30      	subs	r2, #48	; 0x30
 800d652:	2a09      	cmp	r2, #9
 800d654:	d94e      	bls.n	800d6f4 <_svfiprintf_r+0x17c>
 800d656:	2900      	cmp	r1, #0
 800d658:	d111      	bne.n	800d67e <_svfiprintf_r+0x106>
 800d65a:	e017      	b.n	800d68c <_svfiprintf_r+0x114>
 800d65c:	3501      	adds	r5, #1
 800d65e:	e7af      	b.n	800d5c0 <_svfiprintf_r+0x48>
 800d660:	9b05      	ldr	r3, [sp, #20]
 800d662:	6822      	ldr	r2, [r4, #0]
 800d664:	1ac0      	subs	r0, r0, r3
 800d666:	2301      	movs	r3, #1
 800d668:	4083      	lsls	r3, r0
 800d66a:	4313      	orrs	r3, r2
 800d66c:	002e      	movs	r6, r5
 800d66e:	6023      	str	r3, [r4, #0]
 800d670:	e7cc      	b.n	800d60c <_svfiprintf_r+0x94>
 800d672:	9b07      	ldr	r3, [sp, #28]
 800d674:	1d19      	adds	r1, r3, #4
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	9107      	str	r1, [sp, #28]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	db01      	blt.n	800d682 <_svfiprintf_r+0x10a>
 800d67e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d680:	e004      	b.n	800d68c <_svfiprintf_r+0x114>
 800d682:	425b      	negs	r3, r3
 800d684:	60e3      	str	r3, [r4, #12]
 800d686:	2302      	movs	r3, #2
 800d688:	4313      	orrs	r3, r2
 800d68a:	6023      	str	r3, [r4, #0]
 800d68c:	782b      	ldrb	r3, [r5, #0]
 800d68e:	2b2e      	cmp	r3, #46	; 0x2e
 800d690:	d10a      	bne.n	800d6a8 <_svfiprintf_r+0x130>
 800d692:	786b      	ldrb	r3, [r5, #1]
 800d694:	2b2a      	cmp	r3, #42	; 0x2a
 800d696:	d135      	bne.n	800d704 <_svfiprintf_r+0x18c>
 800d698:	9b07      	ldr	r3, [sp, #28]
 800d69a:	3502      	adds	r5, #2
 800d69c:	1d1a      	adds	r2, r3, #4
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	9207      	str	r2, [sp, #28]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	db2b      	blt.n	800d6fe <_svfiprintf_r+0x186>
 800d6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6a8:	4e2f      	ldr	r6, [pc, #188]	; (800d768 <_svfiprintf_r+0x1f0>)
 800d6aa:	2203      	movs	r2, #3
 800d6ac:	0030      	movs	r0, r6
 800d6ae:	7829      	ldrb	r1, [r5, #0]
 800d6b0:	f7fd fbdb 	bl	800ae6a <memchr>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d006      	beq.n	800d6c6 <_svfiprintf_r+0x14e>
 800d6b8:	2340      	movs	r3, #64	; 0x40
 800d6ba:	1b80      	subs	r0, r0, r6
 800d6bc:	4083      	lsls	r3, r0
 800d6be:	6822      	ldr	r2, [r4, #0]
 800d6c0:	3501      	adds	r5, #1
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	6023      	str	r3, [r4, #0]
 800d6c6:	7829      	ldrb	r1, [r5, #0]
 800d6c8:	2206      	movs	r2, #6
 800d6ca:	4828      	ldr	r0, [pc, #160]	; (800d76c <_svfiprintf_r+0x1f4>)
 800d6cc:	1c6e      	adds	r6, r5, #1
 800d6ce:	7621      	strb	r1, [r4, #24]
 800d6d0:	f7fd fbcb 	bl	800ae6a <memchr>
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	d03c      	beq.n	800d752 <_svfiprintf_r+0x1da>
 800d6d8:	4b25      	ldr	r3, [pc, #148]	; (800d770 <_svfiprintf_r+0x1f8>)
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d125      	bne.n	800d72a <_svfiprintf_r+0x1b2>
 800d6de:	2207      	movs	r2, #7
 800d6e0:	9b07      	ldr	r3, [sp, #28]
 800d6e2:	3307      	adds	r3, #7
 800d6e4:	4393      	bics	r3, r2
 800d6e6:	3308      	adds	r3, #8
 800d6e8:	9307      	str	r3, [sp, #28]
 800d6ea:	6963      	ldr	r3, [r4, #20]
 800d6ec:	9a04      	ldr	r2, [sp, #16]
 800d6ee:	189b      	adds	r3, r3, r2
 800d6f0:	6163      	str	r3, [r4, #20]
 800d6f2:	e764      	b.n	800d5be <_svfiprintf_r+0x46>
 800d6f4:	4343      	muls	r3, r0
 800d6f6:	0035      	movs	r5, r6
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	189b      	adds	r3, r3, r2
 800d6fc:	e7a6      	b.n	800d64c <_svfiprintf_r+0xd4>
 800d6fe:	2301      	movs	r3, #1
 800d700:	425b      	negs	r3, r3
 800d702:	e7d0      	b.n	800d6a6 <_svfiprintf_r+0x12e>
 800d704:	2300      	movs	r3, #0
 800d706:	200a      	movs	r0, #10
 800d708:	001a      	movs	r2, r3
 800d70a:	3501      	adds	r5, #1
 800d70c:	6063      	str	r3, [r4, #4]
 800d70e:	7829      	ldrb	r1, [r5, #0]
 800d710:	1c6e      	adds	r6, r5, #1
 800d712:	3930      	subs	r1, #48	; 0x30
 800d714:	2909      	cmp	r1, #9
 800d716:	d903      	bls.n	800d720 <_svfiprintf_r+0x1a8>
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d0c5      	beq.n	800d6a8 <_svfiprintf_r+0x130>
 800d71c:	9209      	str	r2, [sp, #36]	; 0x24
 800d71e:	e7c3      	b.n	800d6a8 <_svfiprintf_r+0x130>
 800d720:	4342      	muls	r2, r0
 800d722:	0035      	movs	r5, r6
 800d724:	2301      	movs	r3, #1
 800d726:	1852      	adds	r2, r2, r1
 800d728:	e7f1      	b.n	800d70e <_svfiprintf_r+0x196>
 800d72a:	aa07      	add	r2, sp, #28
 800d72c:	9200      	str	r2, [sp, #0]
 800d72e:	0021      	movs	r1, r4
 800d730:	003a      	movs	r2, r7
 800d732:	4b10      	ldr	r3, [pc, #64]	; (800d774 <_svfiprintf_r+0x1fc>)
 800d734:	9803      	ldr	r0, [sp, #12]
 800d736:	f7fc fbcf 	bl	8009ed8 <_printf_float>
 800d73a:	9004      	str	r0, [sp, #16]
 800d73c:	9b04      	ldr	r3, [sp, #16]
 800d73e:	3301      	adds	r3, #1
 800d740:	d1d3      	bne.n	800d6ea <_svfiprintf_r+0x172>
 800d742:	89bb      	ldrh	r3, [r7, #12]
 800d744:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d746:	065b      	lsls	r3, r3, #25
 800d748:	d400      	bmi.n	800d74c <_svfiprintf_r+0x1d4>
 800d74a:	e72c      	b.n	800d5a6 <_svfiprintf_r+0x2e>
 800d74c:	2001      	movs	r0, #1
 800d74e:	4240      	negs	r0, r0
 800d750:	e729      	b.n	800d5a6 <_svfiprintf_r+0x2e>
 800d752:	aa07      	add	r2, sp, #28
 800d754:	9200      	str	r2, [sp, #0]
 800d756:	0021      	movs	r1, r4
 800d758:	003a      	movs	r2, r7
 800d75a:	4b06      	ldr	r3, [pc, #24]	; (800d774 <_svfiprintf_r+0x1fc>)
 800d75c:	9803      	ldr	r0, [sp, #12]
 800d75e:	f7fc fe81 	bl	800a464 <_printf_i>
 800d762:	e7ea      	b.n	800d73a <_svfiprintf_r+0x1c2>
 800d764:	0800f099 	.word	0x0800f099
 800d768:	0800f09f 	.word	0x0800f09f
 800d76c:	0800f0a3 	.word	0x0800f0a3
 800d770:	08009ed9 	.word	0x08009ed9
 800d774:	0800d4b5 	.word	0x0800d4b5

0800d778 <__sflush_r>:
 800d778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d77a:	898b      	ldrh	r3, [r1, #12]
 800d77c:	0005      	movs	r5, r0
 800d77e:	000c      	movs	r4, r1
 800d780:	071a      	lsls	r2, r3, #28
 800d782:	d45c      	bmi.n	800d83e <__sflush_r+0xc6>
 800d784:	684a      	ldr	r2, [r1, #4]
 800d786:	2a00      	cmp	r2, #0
 800d788:	dc04      	bgt.n	800d794 <__sflush_r+0x1c>
 800d78a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d78c:	2a00      	cmp	r2, #0
 800d78e:	dc01      	bgt.n	800d794 <__sflush_r+0x1c>
 800d790:	2000      	movs	r0, #0
 800d792:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d794:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d796:	2f00      	cmp	r7, #0
 800d798:	d0fa      	beq.n	800d790 <__sflush_r+0x18>
 800d79a:	2200      	movs	r2, #0
 800d79c:	2080      	movs	r0, #128	; 0x80
 800d79e:	682e      	ldr	r6, [r5, #0]
 800d7a0:	602a      	str	r2, [r5, #0]
 800d7a2:	001a      	movs	r2, r3
 800d7a4:	0140      	lsls	r0, r0, #5
 800d7a6:	6a21      	ldr	r1, [r4, #32]
 800d7a8:	4002      	ands	r2, r0
 800d7aa:	4203      	tst	r3, r0
 800d7ac:	d034      	beq.n	800d818 <__sflush_r+0xa0>
 800d7ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7b0:	89a3      	ldrh	r3, [r4, #12]
 800d7b2:	075b      	lsls	r3, r3, #29
 800d7b4:	d506      	bpl.n	800d7c4 <__sflush_r+0x4c>
 800d7b6:	6863      	ldr	r3, [r4, #4]
 800d7b8:	1ac0      	subs	r0, r0, r3
 800d7ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d001      	beq.n	800d7c4 <__sflush_r+0x4c>
 800d7c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7c2:	1ac0      	subs	r0, r0, r3
 800d7c4:	0002      	movs	r2, r0
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	0028      	movs	r0, r5
 800d7ca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d7cc:	6a21      	ldr	r1, [r4, #32]
 800d7ce:	47b8      	blx	r7
 800d7d0:	89a2      	ldrh	r2, [r4, #12]
 800d7d2:	1c43      	adds	r3, r0, #1
 800d7d4:	d106      	bne.n	800d7e4 <__sflush_r+0x6c>
 800d7d6:	6829      	ldr	r1, [r5, #0]
 800d7d8:	291d      	cmp	r1, #29
 800d7da:	d82c      	bhi.n	800d836 <__sflush_r+0xbe>
 800d7dc:	4b2a      	ldr	r3, [pc, #168]	; (800d888 <__sflush_r+0x110>)
 800d7de:	410b      	asrs	r3, r1
 800d7e0:	07db      	lsls	r3, r3, #31
 800d7e2:	d428      	bmi.n	800d836 <__sflush_r+0xbe>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	6063      	str	r3, [r4, #4]
 800d7e8:	6923      	ldr	r3, [r4, #16]
 800d7ea:	6023      	str	r3, [r4, #0]
 800d7ec:	04d2      	lsls	r2, r2, #19
 800d7ee:	d505      	bpl.n	800d7fc <__sflush_r+0x84>
 800d7f0:	1c43      	adds	r3, r0, #1
 800d7f2:	d102      	bne.n	800d7fa <__sflush_r+0x82>
 800d7f4:	682b      	ldr	r3, [r5, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d100      	bne.n	800d7fc <__sflush_r+0x84>
 800d7fa:	6560      	str	r0, [r4, #84]	; 0x54
 800d7fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7fe:	602e      	str	r6, [r5, #0]
 800d800:	2900      	cmp	r1, #0
 800d802:	d0c5      	beq.n	800d790 <__sflush_r+0x18>
 800d804:	0023      	movs	r3, r4
 800d806:	3344      	adds	r3, #68	; 0x44
 800d808:	4299      	cmp	r1, r3
 800d80a:	d002      	beq.n	800d812 <__sflush_r+0x9a>
 800d80c:	0028      	movs	r0, r5
 800d80e:	f7fe f9d9 	bl	800bbc4 <_free_r>
 800d812:	2000      	movs	r0, #0
 800d814:	6360      	str	r0, [r4, #52]	; 0x34
 800d816:	e7bc      	b.n	800d792 <__sflush_r+0x1a>
 800d818:	2301      	movs	r3, #1
 800d81a:	0028      	movs	r0, r5
 800d81c:	47b8      	blx	r7
 800d81e:	1c43      	adds	r3, r0, #1
 800d820:	d1c6      	bne.n	800d7b0 <__sflush_r+0x38>
 800d822:	682b      	ldr	r3, [r5, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d0c3      	beq.n	800d7b0 <__sflush_r+0x38>
 800d828:	2b1d      	cmp	r3, #29
 800d82a:	d001      	beq.n	800d830 <__sflush_r+0xb8>
 800d82c:	2b16      	cmp	r3, #22
 800d82e:	d101      	bne.n	800d834 <__sflush_r+0xbc>
 800d830:	602e      	str	r6, [r5, #0]
 800d832:	e7ad      	b.n	800d790 <__sflush_r+0x18>
 800d834:	89a2      	ldrh	r2, [r4, #12]
 800d836:	2340      	movs	r3, #64	; 0x40
 800d838:	4313      	orrs	r3, r2
 800d83a:	81a3      	strh	r3, [r4, #12]
 800d83c:	e7a9      	b.n	800d792 <__sflush_r+0x1a>
 800d83e:	690e      	ldr	r6, [r1, #16]
 800d840:	2e00      	cmp	r6, #0
 800d842:	d0a5      	beq.n	800d790 <__sflush_r+0x18>
 800d844:	680f      	ldr	r7, [r1, #0]
 800d846:	600e      	str	r6, [r1, #0]
 800d848:	1bba      	subs	r2, r7, r6
 800d84a:	9201      	str	r2, [sp, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	079b      	lsls	r3, r3, #30
 800d850:	d100      	bne.n	800d854 <__sflush_r+0xdc>
 800d852:	694a      	ldr	r2, [r1, #20]
 800d854:	60a2      	str	r2, [r4, #8]
 800d856:	9b01      	ldr	r3, [sp, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	dd99      	ble.n	800d790 <__sflush_r+0x18>
 800d85c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d85e:	0032      	movs	r2, r6
 800d860:	001f      	movs	r7, r3
 800d862:	0028      	movs	r0, r5
 800d864:	9b01      	ldr	r3, [sp, #4]
 800d866:	6a21      	ldr	r1, [r4, #32]
 800d868:	47b8      	blx	r7
 800d86a:	2800      	cmp	r0, #0
 800d86c:	dc06      	bgt.n	800d87c <__sflush_r+0x104>
 800d86e:	2340      	movs	r3, #64	; 0x40
 800d870:	2001      	movs	r0, #1
 800d872:	89a2      	ldrh	r2, [r4, #12]
 800d874:	4240      	negs	r0, r0
 800d876:	4313      	orrs	r3, r2
 800d878:	81a3      	strh	r3, [r4, #12]
 800d87a:	e78a      	b.n	800d792 <__sflush_r+0x1a>
 800d87c:	9b01      	ldr	r3, [sp, #4]
 800d87e:	1836      	adds	r6, r6, r0
 800d880:	1a1b      	subs	r3, r3, r0
 800d882:	9301      	str	r3, [sp, #4]
 800d884:	e7e7      	b.n	800d856 <__sflush_r+0xde>
 800d886:	46c0      	nop			; (mov r8, r8)
 800d888:	dfbffffe 	.word	0xdfbffffe

0800d88c <_fflush_r>:
 800d88c:	690b      	ldr	r3, [r1, #16]
 800d88e:	b570      	push	{r4, r5, r6, lr}
 800d890:	0005      	movs	r5, r0
 800d892:	000c      	movs	r4, r1
 800d894:	2b00      	cmp	r3, #0
 800d896:	d102      	bne.n	800d89e <_fflush_r+0x12>
 800d898:	2500      	movs	r5, #0
 800d89a:	0028      	movs	r0, r5
 800d89c:	bd70      	pop	{r4, r5, r6, pc}
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d004      	beq.n	800d8ac <_fflush_r+0x20>
 800d8a2:	6a03      	ldr	r3, [r0, #32]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d101      	bne.n	800d8ac <_fflush_r+0x20>
 800d8a8:	f7fd f984 	bl	800abb4 <__sinit>
 800d8ac:	220c      	movs	r2, #12
 800d8ae:	5ea3      	ldrsh	r3, [r4, r2]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d0f1      	beq.n	800d898 <_fflush_r+0xc>
 800d8b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8b6:	07d2      	lsls	r2, r2, #31
 800d8b8:	d404      	bmi.n	800d8c4 <_fflush_r+0x38>
 800d8ba:	059b      	lsls	r3, r3, #22
 800d8bc:	d402      	bmi.n	800d8c4 <_fflush_r+0x38>
 800d8be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8c0:	f7fd fad1 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800d8c4:	0028      	movs	r0, r5
 800d8c6:	0021      	movs	r1, r4
 800d8c8:	f7ff ff56 	bl	800d778 <__sflush_r>
 800d8cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8ce:	0005      	movs	r5, r0
 800d8d0:	07db      	lsls	r3, r3, #31
 800d8d2:	d4e2      	bmi.n	800d89a <_fflush_r+0xe>
 800d8d4:	89a3      	ldrh	r3, [r4, #12]
 800d8d6:	059b      	lsls	r3, r3, #22
 800d8d8:	d4df      	bmi.n	800d89a <_fflush_r+0xe>
 800d8da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8dc:	f7fd fac4 	bl	800ae68 <__retarget_lock_release_recursive>
 800d8e0:	e7db      	b.n	800d89a <_fflush_r+0xe>

0800d8e2 <memmove>:
 800d8e2:	b510      	push	{r4, lr}
 800d8e4:	4288      	cmp	r0, r1
 800d8e6:	d902      	bls.n	800d8ee <memmove+0xc>
 800d8e8:	188b      	adds	r3, r1, r2
 800d8ea:	4298      	cmp	r0, r3
 800d8ec:	d303      	bcc.n	800d8f6 <memmove+0x14>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	e007      	b.n	800d902 <memmove+0x20>
 800d8f2:	5c8b      	ldrb	r3, [r1, r2]
 800d8f4:	5483      	strb	r3, [r0, r2]
 800d8f6:	3a01      	subs	r2, #1
 800d8f8:	d2fb      	bcs.n	800d8f2 <memmove+0x10>
 800d8fa:	bd10      	pop	{r4, pc}
 800d8fc:	5ccc      	ldrb	r4, [r1, r3]
 800d8fe:	54c4      	strb	r4, [r0, r3]
 800d900:	3301      	adds	r3, #1
 800d902:	429a      	cmp	r2, r3
 800d904:	d1fa      	bne.n	800d8fc <memmove+0x1a>
 800d906:	e7f8      	b.n	800d8fa <memmove+0x18>

0800d908 <strncmp>:
 800d908:	b530      	push	{r4, r5, lr}
 800d90a:	0005      	movs	r5, r0
 800d90c:	1e10      	subs	r0, r2, #0
 800d90e:	d00b      	beq.n	800d928 <strncmp+0x20>
 800d910:	2400      	movs	r4, #0
 800d912:	3a01      	subs	r2, #1
 800d914:	5d2b      	ldrb	r3, [r5, r4]
 800d916:	5d08      	ldrb	r0, [r1, r4]
 800d918:	4283      	cmp	r3, r0
 800d91a:	d104      	bne.n	800d926 <strncmp+0x1e>
 800d91c:	42a2      	cmp	r2, r4
 800d91e:	d002      	beq.n	800d926 <strncmp+0x1e>
 800d920:	3401      	adds	r4, #1
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1f6      	bne.n	800d914 <strncmp+0xc>
 800d926:	1a18      	subs	r0, r3, r0
 800d928:	bd30      	pop	{r4, r5, pc}
	...

0800d92c <_sbrk_r>:
 800d92c:	2300      	movs	r3, #0
 800d92e:	b570      	push	{r4, r5, r6, lr}
 800d930:	4d06      	ldr	r5, [pc, #24]	; (800d94c <_sbrk_r+0x20>)
 800d932:	0004      	movs	r4, r0
 800d934:	0008      	movs	r0, r1
 800d936:	602b      	str	r3, [r5, #0]
 800d938:	f7f6 fdc8 	bl	80044cc <_sbrk>
 800d93c:	1c43      	adds	r3, r0, #1
 800d93e:	d103      	bne.n	800d948 <_sbrk_r+0x1c>
 800d940:	682b      	ldr	r3, [r5, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d000      	beq.n	800d948 <_sbrk_r+0x1c>
 800d946:	6023      	str	r3, [r4, #0]
 800d948:	bd70      	pop	{r4, r5, r6, pc}
 800d94a:	46c0      	nop			; (mov r8, r8)
 800d94c:	20000660 	.word	0x20000660

0800d950 <memcpy>:
 800d950:	2300      	movs	r3, #0
 800d952:	b510      	push	{r4, lr}
 800d954:	429a      	cmp	r2, r3
 800d956:	d100      	bne.n	800d95a <memcpy+0xa>
 800d958:	bd10      	pop	{r4, pc}
 800d95a:	5ccc      	ldrb	r4, [r1, r3]
 800d95c:	54c4      	strb	r4, [r0, r3]
 800d95e:	3301      	adds	r3, #1
 800d960:	e7f8      	b.n	800d954 <memcpy+0x4>
	...

0800d964 <nan>:
 800d964:	2000      	movs	r0, #0
 800d966:	4901      	ldr	r1, [pc, #4]	; (800d96c <nan+0x8>)
 800d968:	4770      	bx	lr
 800d96a:	46c0      	nop			; (mov r8, r8)
 800d96c:	7ff80000 	.word	0x7ff80000

0800d970 <__assert_func>:
 800d970:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d972:	0014      	movs	r4, r2
 800d974:	001a      	movs	r2, r3
 800d976:	4b09      	ldr	r3, [pc, #36]	; (800d99c <__assert_func+0x2c>)
 800d978:	0005      	movs	r5, r0
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	000e      	movs	r6, r1
 800d97e:	68d8      	ldr	r0, [r3, #12]
 800d980:	4b07      	ldr	r3, [pc, #28]	; (800d9a0 <__assert_func+0x30>)
 800d982:	2c00      	cmp	r4, #0
 800d984:	d101      	bne.n	800d98a <__assert_func+0x1a>
 800d986:	4b07      	ldr	r3, [pc, #28]	; (800d9a4 <__assert_func+0x34>)
 800d988:	001c      	movs	r4, r3
 800d98a:	4907      	ldr	r1, [pc, #28]	; (800d9a8 <__assert_func+0x38>)
 800d98c:	9301      	str	r3, [sp, #4]
 800d98e:	9402      	str	r4, [sp, #8]
 800d990:	002b      	movs	r3, r5
 800d992:	9600      	str	r6, [sp, #0]
 800d994:	f000 fbe2 	bl	800e15c <fiprintf>
 800d998:	f000 fbf0 	bl	800e17c <abort>
 800d99c:	2000007c 	.word	0x2000007c
 800d9a0:	0800f0b2 	.word	0x0800f0b2
 800d9a4:	0800f0ed 	.word	0x0800f0ed
 800d9a8:	0800f0bf 	.word	0x0800f0bf

0800d9ac <_calloc_r>:
 800d9ac:	b570      	push	{r4, r5, r6, lr}
 800d9ae:	0c0b      	lsrs	r3, r1, #16
 800d9b0:	0c15      	lsrs	r5, r2, #16
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d11e      	bne.n	800d9f4 <_calloc_r+0x48>
 800d9b6:	2d00      	cmp	r5, #0
 800d9b8:	d10c      	bne.n	800d9d4 <_calloc_r+0x28>
 800d9ba:	b289      	uxth	r1, r1
 800d9bc:	b294      	uxth	r4, r2
 800d9be:	434c      	muls	r4, r1
 800d9c0:	0021      	movs	r1, r4
 800d9c2:	f7fe f975 	bl	800bcb0 <_malloc_r>
 800d9c6:	1e05      	subs	r5, r0, #0
 800d9c8:	d01b      	beq.n	800da02 <_calloc_r+0x56>
 800d9ca:	0022      	movs	r2, r4
 800d9cc:	2100      	movs	r1, #0
 800d9ce:	f7fd f9c5 	bl	800ad5c <memset>
 800d9d2:	e016      	b.n	800da02 <_calloc_r+0x56>
 800d9d4:	1c2b      	adds	r3, r5, #0
 800d9d6:	1c0c      	adds	r4, r1, #0
 800d9d8:	b289      	uxth	r1, r1
 800d9da:	b292      	uxth	r2, r2
 800d9dc:	434a      	muls	r2, r1
 800d9de:	b2a1      	uxth	r1, r4
 800d9e0:	b29c      	uxth	r4, r3
 800d9e2:	434c      	muls	r4, r1
 800d9e4:	0c13      	lsrs	r3, r2, #16
 800d9e6:	18e4      	adds	r4, r4, r3
 800d9e8:	0c23      	lsrs	r3, r4, #16
 800d9ea:	d107      	bne.n	800d9fc <_calloc_r+0x50>
 800d9ec:	0424      	lsls	r4, r4, #16
 800d9ee:	b292      	uxth	r2, r2
 800d9f0:	4314      	orrs	r4, r2
 800d9f2:	e7e5      	b.n	800d9c0 <_calloc_r+0x14>
 800d9f4:	2d00      	cmp	r5, #0
 800d9f6:	d101      	bne.n	800d9fc <_calloc_r+0x50>
 800d9f8:	1c14      	adds	r4, r2, #0
 800d9fa:	e7ed      	b.n	800d9d8 <_calloc_r+0x2c>
 800d9fc:	230c      	movs	r3, #12
 800d9fe:	2500      	movs	r5, #0
 800da00:	6003      	str	r3, [r0, #0]
 800da02:	0028      	movs	r0, r5
 800da04:	bd70      	pop	{r4, r5, r6, pc}

0800da06 <rshift>:
 800da06:	0002      	movs	r2, r0
 800da08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da0a:	6904      	ldr	r4, [r0, #16]
 800da0c:	114b      	asrs	r3, r1, #5
 800da0e:	b085      	sub	sp, #20
 800da10:	3214      	adds	r2, #20
 800da12:	9302      	str	r3, [sp, #8]
 800da14:	114d      	asrs	r5, r1, #5
 800da16:	0013      	movs	r3, r2
 800da18:	42ac      	cmp	r4, r5
 800da1a:	dd32      	ble.n	800da82 <rshift+0x7c>
 800da1c:	261f      	movs	r6, #31
 800da1e:	000f      	movs	r7, r1
 800da20:	114b      	asrs	r3, r1, #5
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	00a5      	lsls	r5, r4, #2
 800da26:	18d3      	adds	r3, r2, r3
 800da28:	4037      	ands	r7, r6
 800da2a:	1955      	adds	r5, r2, r5
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	9701      	str	r7, [sp, #4]
 800da30:	4231      	tst	r1, r6
 800da32:	d10d      	bne.n	800da50 <rshift+0x4a>
 800da34:	0016      	movs	r6, r2
 800da36:	0019      	movs	r1, r3
 800da38:	428d      	cmp	r5, r1
 800da3a:	d836      	bhi.n	800daaa <rshift+0xa4>
 800da3c:	9900      	ldr	r1, [sp, #0]
 800da3e:	2300      	movs	r3, #0
 800da40:	3903      	subs	r1, #3
 800da42:	428d      	cmp	r5, r1
 800da44:	d302      	bcc.n	800da4c <rshift+0x46>
 800da46:	9b02      	ldr	r3, [sp, #8]
 800da48:	1ae4      	subs	r4, r4, r3
 800da4a:	00a3      	lsls	r3, r4, #2
 800da4c:	18d3      	adds	r3, r2, r3
 800da4e:	e018      	b.n	800da82 <rshift+0x7c>
 800da50:	2120      	movs	r1, #32
 800da52:	9e01      	ldr	r6, [sp, #4]
 800da54:	9f01      	ldr	r7, [sp, #4]
 800da56:	1b89      	subs	r1, r1, r6
 800da58:	9e00      	ldr	r6, [sp, #0]
 800da5a:	9103      	str	r1, [sp, #12]
 800da5c:	ce02      	ldmia	r6!, {r1}
 800da5e:	4694      	mov	ip, r2
 800da60:	40f9      	lsrs	r1, r7
 800da62:	42b5      	cmp	r5, r6
 800da64:	d816      	bhi.n	800da94 <rshift+0x8e>
 800da66:	9e00      	ldr	r6, [sp, #0]
 800da68:	2300      	movs	r3, #0
 800da6a:	3601      	adds	r6, #1
 800da6c:	42b5      	cmp	r5, r6
 800da6e:	d303      	bcc.n	800da78 <rshift+0x72>
 800da70:	9b02      	ldr	r3, [sp, #8]
 800da72:	1ae3      	subs	r3, r4, r3
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	3b04      	subs	r3, #4
 800da78:	18d3      	adds	r3, r2, r3
 800da7a:	6019      	str	r1, [r3, #0]
 800da7c:	2900      	cmp	r1, #0
 800da7e:	d000      	beq.n	800da82 <rshift+0x7c>
 800da80:	3304      	adds	r3, #4
 800da82:	1a99      	subs	r1, r3, r2
 800da84:	1089      	asrs	r1, r1, #2
 800da86:	6101      	str	r1, [r0, #16]
 800da88:	4293      	cmp	r3, r2
 800da8a:	d101      	bne.n	800da90 <rshift+0x8a>
 800da8c:	2300      	movs	r3, #0
 800da8e:	6143      	str	r3, [r0, #20]
 800da90:	b005      	add	sp, #20
 800da92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da94:	6837      	ldr	r7, [r6, #0]
 800da96:	9b03      	ldr	r3, [sp, #12]
 800da98:	409f      	lsls	r7, r3
 800da9a:	430f      	orrs	r7, r1
 800da9c:	4661      	mov	r1, ip
 800da9e:	c180      	stmia	r1!, {r7}
 800daa0:	468c      	mov	ip, r1
 800daa2:	9b01      	ldr	r3, [sp, #4]
 800daa4:	ce02      	ldmia	r6!, {r1}
 800daa6:	40d9      	lsrs	r1, r3
 800daa8:	e7db      	b.n	800da62 <rshift+0x5c>
 800daaa:	c980      	ldmia	r1!, {r7}
 800daac:	c680      	stmia	r6!, {r7}
 800daae:	e7c3      	b.n	800da38 <rshift+0x32>

0800dab0 <__hexdig_fun>:
 800dab0:	0002      	movs	r2, r0
 800dab2:	3a30      	subs	r2, #48	; 0x30
 800dab4:	0003      	movs	r3, r0
 800dab6:	2a09      	cmp	r2, #9
 800dab8:	d802      	bhi.n	800dac0 <__hexdig_fun+0x10>
 800daba:	3b20      	subs	r3, #32
 800dabc:	b2d8      	uxtb	r0, r3
 800dabe:	4770      	bx	lr
 800dac0:	0002      	movs	r2, r0
 800dac2:	3a61      	subs	r2, #97	; 0x61
 800dac4:	2a05      	cmp	r2, #5
 800dac6:	d801      	bhi.n	800dacc <__hexdig_fun+0x1c>
 800dac8:	3b47      	subs	r3, #71	; 0x47
 800daca:	e7f7      	b.n	800dabc <__hexdig_fun+0xc>
 800dacc:	001a      	movs	r2, r3
 800dace:	3a41      	subs	r2, #65	; 0x41
 800dad0:	2000      	movs	r0, #0
 800dad2:	2a05      	cmp	r2, #5
 800dad4:	d8f3      	bhi.n	800dabe <__hexdig_fun+0xe>
 800dad6:	3b27      	subs	r3, #39	; 0x27
 800dad8:	e7f0      	b.n	800dabc <__hexdig_fun+0xc>
	...

0800dadc <__gethex>:
 800dadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dade:	b089      	sub	sp, #36	; 0x24
 800dae0:	9307      	str	r3, [sp, #28]
 800dae2:	2302      	movs	r3, #2
 800dae4:	9201      	str	r2, [sp, #4]
 800dae6:	680a      	ldr	r2, [r1, #0]
 800dae8:	425b      	negs	r3, r3
 800daea:	9003      	str	r0, [sp, #12]
 800daec:	9106      	str	r1, [sp, #24]
 800daee:	1c96      	adds	r6, r2, #2
 800daf0:	1a9b      	subs	r3, r3, r2
 800daf2:	199a      	adds	r2, r3, r6
 800daf4:	9600      	str	r6, [sp, #0]
 800daf6:	9205      	str	r2, [sp, #20]
 800daf8:	9a00      	ldr	r2, [sp, #0]
 800dafa:	3601      	adds	r6, #1
 800dafc:	7810      	ldrb	r0, [r2, #0]
 800dafe:	2830      	cmp	r0, #48	; 0x30
 800db00:	d0f7      	beq.n	800daf2 <__gethex+0x16>
 800db02:	f7ff ffd5 	bl	800dab0 <__hexdig_fun>
 800db06:	2300      	movs	r3, #0
 800db08:	001d      	movs	r5, r3
 800db0a:	9302      	str	r3, [sp, #8]
 800db0c:	4298      	cmp	r0, r3
 800db0e:	d11d      	bne.n	800db4c <__gethex+0x70>
 800db10:	2201      	movs	r2, #1
 800db12:	49a6      	ldr	r1, [pc, #664]	; (800ddac <__gethex+0x2d0>)
 800db14:	9800      	ldr	r0, [sp, #0]
 800db16:	f7ff fef7 	bl	800d908 <strncmp>
 800db1a:	0007      	movs	r7, r0
 800db1c:	42a8      	cmp	r0, r5
 800db1e:	d169      	bne.n	800dbf4 <__gethex+0x118>
 800db20:	9b00      	ldr	r3, [sp, #0]
 800db22:	0034      	movs	r4, r6
 800db24:	7858      	ldrb	r0, [r3, #1]
 800db26:	f7ff ffc3 	bl	800dab0 <__hexdig_fun>
 800db2a:	2301      	movs	r3, #1
 800db2c:	9302      	str	r3, [sp, #8]
 800db2e:	42a8      	cmp	r0, r5
 800db30:	d02f      	beq.n	800db92 <__gethex+0xb6>
 800db32:	9600      	str	r6, [sp, #0]
 800db34:	9b00      	ldr	r3, [sp, #0]
 800db36:	7818      	ldrb	r0, [r3, #0]
 800db38:	2830      	cmp	r0, #48	; 0x30
 800db3a:	d009      	beq.n	800db50 <__gethex+0x74>
 800db3c:	f7ff ffb8 	bl	800dab0 <__hexdig_fun>
 800db40:	4242      	negs	r2, r0
 800db42:	4142      	adcs	r2, r0
 800db44:	2301      	movs	r3, #1
 800db46:	0035      	movs	r5, r6
 800db48:	9202      	str	r2, [sp, #8]
 800db4a:	9305      	str	r3, [sp, #20]
 800db4c:	9c00      	ldr	r4, [sp, #0]
 800db4e:	e004      	b.n	800db5a <__gethex+0x7e>
 800db50:	9b00      	ldr	r3, [sp, #0]
 800db52:	3301      	adds	r3, #1
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	e7ed      	b.n	800db34 <__gethex+0x58>
 800db58:	3401      	adds	r4, #1
 800db5a:	7820      	ldrb	r0, [r4, #0]
 800db5c:	f7ff ffa8 	bl	800dab0 <__hexdig_fun>
 800db60:	1e07      	subs	r7, r0, #0
 800db62:	d1f9      	bne.n	800db58 <__gethex+0x7c>
 800db64:	2201      	movs	r2, #1
 800db66:	0020      	movs	r0, r4
 800db68:	4990      	ldr	r1, [pc, #576]	; (800ddac <__gethex+0x2d0>)
 800db6a:	f7ff fecd 	bl	800d908 <strncmp>
 800db6e:	2800      	cmp	r0, #0
 800db70:	d10d      	bne.n	800db8e <__gethex+0xb2>
 800db72:	2d00      	cmp	r5, #0
 800db74:	d106      	bne.n	800db84 <__gethex+0xa8>
 800db76:	3401      	adds	r4, #1
 800db78:	0025      	movs	r5, r4
 800db7a:	7820      	ldrb	r0, [r4, #0]
 800db7c:	f7ff ff98 	bl	800dab0 <__hexdig_fun>
 800db80:	2800      	cmp	r0, #0
 800db82:	d102      	bne.n	800db8a <__gethex+0xae>
 800db84:	1b2d      	subs	r5, r5, r4
 800db86:	00af      	lsls	r7, r5, #2
 800db88:	e003      	b.n	800db92 <__gethex+0xb6>
 800db8a:	3401      	adds	r4, #1
 800db8c:	e7f5      	b.n	800db7a <__gethex+0x9e>
 800db8e:	2d00      	cmp	r5, #0
 800db90:	d1f8      	bne.n	800db84 <__gethex+0xa8>
 800db92:	2220      	movs	r2, #32
 800db94:	7823      	ldrb	r3, [r4, #0]
 800db96:	0026      	movs	r6, r4
 800db98:	4393      	bics	r3, r2
 800db9a:	2b50      	cmp	r3, #80	; 0x50
 800db9c:	d11d      	bne.n	800dbda <__gethex+0xfe>
 800db9e:	7863      	ldrb	r3, [r4, #1]
 800dba0:	2b2b      	cmp	r3, #43	; 0x2b
 800dba2:	d02c      	beq.n	800dbfe <__gethex+0x122>
 800dba4:	2b2d      	cmp	r3, #45	; 0x2d
 800dba6:	d02e      	beq.n	800dc06 <__gethex+0x12a>
 800dba8:	2300      	movs	r3, #0
 800dbaa:	1c66      	adds	r6, r4, #1
 800dbac:	9304      	str	r3, [sp, #16]
 800dbae:	7830      	ldrb	r0, [r6, #0]
 800dbb0:	f7ff ff7e 	bl	800dab0 <__hexdig_fun>
 800dbb4:	1e43      	subs	r3, r0, #1
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	2b18      	cmp	r3, #24
 800dbba:	d82b      	bhi.n	800dc14 <__gethex+0x138>
 800dbbc:	3810      	subs	r0, #16
 800dbbe:	0005      	movs	r5, r0
 800dbc0:	7870      	ldrb	r0, [r6, #1]
 800dbc2:	f7ff ff75 	bl	800dab0 <__hexdig_fun>
 800dbc6:	1e43      	subs	r3, r0, #1
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	3601      	adds	r6, #1
 800dbcc:	2b18      	cmp	r3, #24
 800dbce:	d91c      	bls.n	800dc0a <__gethex+0x12e>
 800dbd0:	9b04      	ldr	r3, [sp, #16]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d000      	beq.n	800dbd8 <__gethex+0xfc>
 800dbd6:	426d      	negs	r5, r5
 800dbd8:	197f      	adds	r7, r7, r5
 800dbda:	9b06      	ldr	r3, [sp, #24]
 800dbdc:	601e      	str	r6, [r3, #0]
 800dbde:	9b02      	ldr	r3, [sp, #8]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d019      	beq.n	800dc18 <__gethex+0x13c>
 800dbe4:	2600      	movs	r6, #0
 800dbe6:	9b05      	ldr	r3, [sp, #20]
 800dbe8:	42b3      	cmp	r3, r6
 800dbea:	d100      	bne.n	800dbee <__gethex+0x112>
 800dbec:	3606      	adds	r6, #6
 800dbee:	0030      	movs	r0, r6
 800dbf0:	b009      	add	sp, #36	; 0x24
 800dbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	2700      	movs	r7, #0
 800dbf8:	9c00      	ldr	r4, [sp, #0]
 800dbfa:	9302      	str	r3, [sp, #8]
 800dbfc:	e7c9      	b.n	800db92 <__gethex+0xb6>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	9304      	str	r3, [sp, #16]
 800dc02:	1ca6      	adds	r6, r4, #2
 800dc04:	e7d3      	b.n	800dbae <__gethex+0xd2>
 800dc06:	2301      	movs	r3, #1
 800dc08:	e7fa      	b.n	800dc00 <__gethex+0x124>
 800dc0a:	230a      	movs	r3, #10
 800dc0c:	435d      	muls	r5, r3
 800dc0e:	182d      	adds	r5, r5, r0
 800dc10:	3d10      	subs	r5, #16
 800dc12:	e7d5      	b.n	800dbc0 <__gethex+0xe4>
 800dc14:	0026      	movs	r6, r4
 800dc16:	e7e0      	b.n	800dbda <__gethex+0xfe>
 800dc18:	9b00      	ldr	r3, [sp, #0]
 800dc1a:	9902      	ldr	r1, [sp, #8]
 800dc1c:	1ae3      	subs	r3, r4, r3
 800dc1e:	3b01      	subs	r3, #1
 800dc20:	2b07      	cmp	r3, #7
 800dc22:	dc0a      	bgt.n	800dc3a <__gethex+0x15e>
 800dc24:	9803      	ldr	r0, [sp, #12]
 800dc26:	f7fe f8d5 	bl	800bdd4 <_Balloc>
 800dc2a:	1e05      	subs	r5, r0, #0
 800dc2c:	d108      	bne.n	800dc40 <__gethex+0x164>
 800dc2e:	002a      	movs	r2, r5
 800dc30:	21e4      	movs	r1, #228	; 0xe4
 800dc32:	4b5f      	ldr	r3, [pc, #380]	; (800ddb0 <__gethex+0x2d4>)
 800dc34:	485f      	ldr	r0, [pc, #380]	; (800ddb4 <__gethex+0x2d8>)
 800dc36:	f7ff fe9b 	bl	800d970 <__assert_func>
 800dc3a:	3101      	adds	r1, #1
 800dc3c:	105b      	asrs	r3, r3, #1
 800dc3e:	e7ef      	b.n	800dc20 <__gethex+0x144>
 800dc40:	0003      	movs	r3, r0
 800dc42:	3314      	adds	r3, #20
 800dc44:	9302      	str	r3, [sp, #8]
 800dc46:	9305      	str	r3, [sp, #20]
 800dc48:	2300      	movs	r3, #0
 800dc4a:	001e      	movs	r6, r3
 800dc4c:	9304      	str	r3, [sp, #16]
 800dc4e:	9b00      	ldr	r3, [sp, #0]
 800dc50:	42a3      	cmp	r3, r4
 800dc52:	d33f      	bcc.n	800dcd4 <__gethex+0x1f8>
 800dc54:	9c05      	ldr	r4, [sp, #20]
 800dc56:	9b02      	ldr	r3, [sp, #8]
 800dc58:	c440      	stmia	r4!, {r6}
 800dc5a:	1ae4      	subs	r4, r4, r3
 800dc5c:	10a4      	asrs	r4, r4, #2
 800dc5e:	0030      	movs	r0, r6
 800dc60:	612c      	str	r4, [r5, #16]
 800dc62:	f7fe f9af 	bl	800bfc4 <__hi0bits>
 800dc66:	9b01      	ldr	r3, [sp, #4]
 800dc68:	0164      	lsls	r4, r4, #5
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	1a26      	subs	r6, r4, r0
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	429e      	cmp	r6, r3
 800dc72:	dd51      	ble.n	800dd18 <__gethex+0x23c>
 800dc74:	1af6      	subs	r6, r6, r3
 800dc76:	0031      	movs	r1, r6
 800dc78:	0028      	movs	r0, r5
 800dc7a:	f7fe fd43 	bl	800c704 <__any_on>
 800dc7e:	1e04      	subs	r4, r0, #0
 800dc80:	d016      	beq.n	800dcb0 <__gethex+0x1d4>
 800dc82:	2401      	movs	r4, #1
 800dc84:	231f      	movs	r3, #31
 800dc86:	0020      	movs	r0, r4
 800dc88:	1e72      	subs	r2, r6, #1
 800dc8a:	4013      	ands	r3, r2
 800dc8c:	4098      	lsls	r0, r3
 800dc8e:	0003      	movs	r3, r0
 800dc90:	1151      	asrs	r1, r2, #5
 800dc92:	9802      	ldr	r0, [sp, #8]
 800dc94:	0089      	lsls	r1, r1, #2
 800dc96:	5809      	ldr	r1, [r1, r0]
 800dc98:	4219      	tst	r1, r3
 800dc9a:	d009      	beq.n	800dcb0 <__gethex+0x1d4>
 800dc9c:	42a2      	cmp	r2, r4
 800dc9e:	dd06      	ble.n	800dcae <__gethex+0x1d2>
 800dca0:	0028      	movs	r0, r5
 800dca2:	1eb1      	subs	r1, r6, #2
 800dca4:	f7fe fd2e 	bl	800c704 <__any_on>
 800dca8:	3402      	adds	r4, #2
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	d100      	bne.n	800dcb0 <__gethex+0x1d4>
 800dcae:	2402      	movs	r4, #2
 800dcb0:	0031      	movs	r1, r6
 800dcb2:	0028      	movs	r0, r5
 800dcb4:	f7ff fea7 	bl	800da06 <rshift>
 800dcb8:	19bf      	adds	r7, r7, r6
 800dcba:	9b01      	ldr	r3, [sp, #4]
 800dcbc:	689b      	ldr	r3, [r3, #8]
 800dcbe:	42bb      	cmp	r3, r7
 800dcc0:	da3a      	bge.n	800dd38 <__gethex+0x25c>
 800dcc2:	0029      	movs	r1, r5
 800dcc4:	9803      	ldr	r0, [sp, #12]
 800dcc6:	f7fe f8c9 	bl	800be5c <_Bfree>
 800dcca:	2300      	movs	r3, #0
 800dccc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcce:	26a3      	movs	r6, #163	; 0xa3
 800dcd0:	6013      	str	r3, [r2, #0]
 800dcd2:	e78c      	b.n	800dbee <__gethex+0x112>
 800dcd4:	3c01      	subs	r4, #1
 800dcd6:	7823      	ldrb	r3, [r4, #0]
 800dcd8:	2b2e      	cmp	r3, #46	; 0x2e
 800dcda:	d012      	beq.n	800dd02 <__gethex+0x226>
 800dcdc:	9b04      	ldr	r3, [sp, #16]
 800dcde:	2b20      	cmp	r3, #32
 800dce0:	d104      	bne.n	800dcec <__gethex+0x210>
 800dce2:	9b05      	ldr	r3, [sp, #20]
 800dce4:	c340      	stmia	r3!, {r6}
 800dce6:	2600      	movs	r6, #0
 800dce8:	9305      	str	r3, [sp, #20]
 800dcea:	9604      	str	r6, [sp, #16]
 800dcec:	7820      	ldrb	r0, [r4, #0]
 800dcee:	f7ff fedf 	bl	800dab0 <__hexdig_fun>
 800dcf2:	230f      	movs	r3, #15
 800dcf4:	4018      	ands	r0, r3
 800dcf6:	9b04      	ldr	r3, [sp, #16]
 800dcf8:	4098      	lsls	r0, r3
 800dcfa:	3304      	adds	r3, #4
 800dcfc:	4306      	orrs	r6, r0
 800dcfe:	9304      	str	r3, [sp, #16]
 800dd00:	e7a5      	b.n	800dc4e <__gethex+0x172>
 800dd02:	9b00      	ldr	r3, [sp, #0]
 800dd04:	42a3      	cmp	r3, r4
 800dd06:	d8e9      	bhi.n	800dcdc <__gethex+0x200>
 800dd08:	2201      	movs	r2, #1
 800dd0a:	0020      	movs	r0, r4
 800dd0c:	4927      	ldr	r1, [pc, #156]	; (800ddac <__gethex+0x2d0>)
 800dd0e:	f7ff fdfb 	bl	800d908 <strncmp>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d1e2      	bne.n	800dcdc <__gethex+0x200>
 800dd16:	e79a      	b.n	800dc4e <__gethex+0x172>
 800dd18:	9b00      	ldr	r3, [sp, #0]
 800dd1a:	2400      	movs	r4, #0
 800dd1c:	429e      	cmp	r6, r3
 800dd1e:	dacc      	bge.n	800dcba <__gethex+0x1de>
 800dd20:	1b9e      	subs	r6, r3, r6
 800dd22:	0029      	movs	r1, r5
 800dd24:	0032      	movs	r2, r6
 800dd26:	9803      	ldr	r0, [sp, #12]
 800dd28:	f7fe fab8 	bl	800c29c <__lshift>
 800dd2c:	0003      	movs	r3, r0
 800dd2e:	3314      	adds	r3, #20
 800dd30:	0005      	movs	r5, r0
 800dd32:	1bbf      	subs	r7, r7, r6
 800dd34:	9302      	str	r3, [sp, #8]
 800dd36:	e7c0      	b.n	800dcba <__gethex+0x1de>
 800dd38:	9b01      	ldr	r3, [sp, #4]
 800dd3a:	685e      	ldr	r6, [r3, #4]
 800dd3c:	42be      	cmp	r6, r7
 800dd3e:	dd70      	ble.n	800de22 <__gethex+0x346>
 800dd40:	9b00      	ldr	r3, [sp, #0]
 800dd42:	1bf6      	subs	r6, r6, r7
 800dd44:	42b3      	cmp	r3, r6
 800dd46:	dc37      	bgt.n	800ddb8 <__gethex+0x2dc>
 800dd48:	9b01      	ldr	r3, [sp, #4]
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	d024      	beq.n	800dd9a <__gethex+0x2be>
 800dd50:	2b03      	cmp	r3, #3
 800dd52:	d026      	beq.n	800dda2 <__gethex+0x2c6>
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d117      	bne.n	800dd88 <__gethex+0x2ac>
 800dd58:	9b00      	ldr	r3, [sp, #0]
 800dd5a:	42b3      	cmp	r3, r6
 800dd5c:	d114      	bne.n	800dd88 <__gethex+0x2ac>
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d10b      	bne.n	800dd7a <__gethex+0x29e>
 800dd62:	9b01      	ldr	r3, [sp, #4]
 800dd64:	9a07      	ldr	r2, [sp, #28]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	2662      	movs	r6, #98	; 0x62
 800dd6a:	6013      	str	r3, [r2, #0]
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	9a02      	ldr	r2, [sp, #8]
 800dd70:	612b      	str	r3, [r5, #16]
 800dd72:	6013      	str	r3, [r2, #0]
 800dd74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd76:	601d      	str	r5, [r3, #0]
 800dd78:	e739      	b.n	800dbee <__gethex+0x112>
 800dd7a:	9900      	ldr	r1, [sp, #0]
 800dd7c:	0028      	movs	r0, r5
 800dd7e:	3901      	subs	r1, #1
 800dd80:	f7fe fcc0 	bl	800c704 <__any_on>
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d1ec      	bne.n	800dd62 <__gethex+0x286>
 800dd88:	0029      	movs	r1, r5
 800dd8a:	9803      	ldr	r0, [sp, #12]
 800dd8c:	f7fe f866 	bl	800be5c <_Bfree>
 800dd90:	2300      	movs	r3, #0
 800dd92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd94:	2650      	movs	r6, #80	; 0x50
 800dd96:	6013      	str	r3, [r2, #0]
 800dd98:	e729      	b.n	800dbee <__gethex+0x112>
 800dd9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d1f3      	bne.n	800dd88 <__gethex+0x2ac>
 800dda0:	e7df      	b.n	800dd62 <__gethex+0x286>
 800dda2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1dc      	bne.n	800dd62 <__gethex+0x286>
 800dda8:	e7ee      	b.n	800dd88 <__gethex+0x2ac>
 800ddaa:	46c0      	nop			; (mov r8, r8)
 800ddac:	0800ef44 	.word	0x0800ef44
 800ddb0:	0800eddd 	.word	0x0800eddd
 800ddb4:	0800f0ee 	.word	0x0800f0ee
 800ddb8:	1e77      	subs	r7, r6, #1
 800ddba:	2c00      	cmp	r4, #0
 800ddbc:	d12f      	bne.n	800de1e <__gethex+0x342>
 800ddbe:	2f00      	cmp	r7, #0
 800ddc0:	d004      	beq.n	800ddcc <__gethex+0x2f0>
 800ddc2:	0039      	movs	r1, r7
 800ddc4:	0028      	movs	r0, r5
 800ddc6:	f7fe fc9d 	bl	800c704 <__any_on>
 800ddca:	0004      	movs	r4, r0
 800ddcc:	231f      	movs	r3, #31
 800ddce:	117a      	asrs	r2, r7, #5
 800ddd0:	401f      	ands	r7, r3
 800ddd2:	3b1e      	subs	r3, #30
 800ddd4:	40bb      	lsls	r3, r7
 800ddd6:	9902      	ldr	r1, [sp, #8]
 800ddd8:	0092      	lsls	r2, r2, #2
 800ddda:	5852      	ldr	r2, [r2, r1]
 800dddc:	421a      	tst	r2, r3
 800ddde:	d001      	beq.n	800dde4 <__gethex+0x308>
 800dde0:	2302      	movs	r3, #2
 800dde2:	431c      	orrs	r4, r3
 800dde4:	9b00      	ldr	r3, [sp, #0]
 800dde6:	0031      	movs	r1, r6
 800dde8:	1b9b      	subs	r3, r3, r6
 800ddea:	2602      	movs	r6, #2
 800ddec:	0028      	movs	r0, r5
 800ddee:	9300      	str	r3, [sp, #0]
 800ddf0:	f7ff fe09 	bl	800da06 <rshift>
 800ddf4:	9b01      	ldr	r3, [sp, #4]
 800ddf6:	685f      	ldr	r7, [r3, #4]
 800ddf8:	2c00      	cmp	r4, #0
 800ddfa:	d041      	beq.n	800de80 <__gethex+0x3a4>
 800ddfc:	9b01      	ldr	r3, [sp, #4]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	2b02      	cmp	r3, #2
 800de02:	d010      	beq.n	800de26 <__gethex+0x34a>
 800de04:	2b03      	cmp	r3, #3
 800de06:	d012      	beq.n	800de2e <__gethex+0x352>
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d106      	bne.n	800de1a <__gethex+0x33e>
 800de0c:	07a2      	lsls	r2, r4, #30
 800de0e:	d504      	bpl.n	800de1a <__gethex+0x33e>
 800de10:	9a02      	ldr	r2, [sp, #8]
 800de12:	6812      	ldr	r2, [r2, #0]
 800de14:	4314      	orrs	r4, r2
 800de16:	421c      	tst	r4, r3
 800de18:	d10c      	bne.n	800de34 <__gethex+0x358>
 800de1a:	2310      	movs	r3, #16
 800de1c:	e02f      	b.n	800de7e <__gethex+0x3a2>
 800de1e:	2401      	movs	r4, #1
 800de20:	e7d4      	b.n	800ddcc <__gethex+0x2f0>
 800de22:	2601      	movs	r6, #1
 800de24:	e7e8      	b.n	800ddf8 <__gethex+0x31c>
 800de26:	2301      	movs	r3, #1
 800de28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de2a:	1a9b      	subs	r3, r3, r2
 800de2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800de2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de30:	2b00      	cmp	r3, #0
 800de32:	d0f2      	beq.n	800de1a <__gethex+0x33e>
 800de34:	692b      	ldr	r3, [r5, #16]
 800de36:	2000      	movs	r0, #0
 800de38:	9302      	str	r3, [sp, #8]
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	9304      	str	r3, [sp, #16]
 800de3e:	002b      	movs	r3, r5
 800de40:	9a04      	ldr	r2, [sp, #16]
 800de42:	3314      	adds	r3, #20
 800de44:	1899      	adds	r1, r3, r2
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	1c54      	adds	r4, r2, #1
 800de4a:	d01e      	beq.n	800de8a <__gethex+0x3ae>
 800de4c:	3201      	adds	r2, #1
 800de4e:	601a      	str	r2, [r3, #0]
 800de50:	002b      	movs	r3, r5
 800de52:	3314      	adds	r3, #20
 800de54:	2e02      	cmp	r6, #2
 800de56:	d141      	bne.n	800dedc <__gethex+0x400>
 800de58:	9a01      	ldr	r2, [sp, #4]
 800de5a:	9900      	ldr	r1, [sp, #0]
 800de5c:	6812      	ldr	r2, [r2, #0]
 800de5e:	3a01      	subs	r2, #1
 800de60:	428a      	cmp	r2, r1
 800de62:	d10b      	bne.n	800de7c <__gethex+0x3a0>
 800de64:	221f      	movs	r2, #31
 800de66:	9800      	ldr	r0, [sp, #0]
 800de68:	1149      	asrs	r1, r1, #5
 800de6a:	4002      	ands	r2, r0
 800de6c:	2001      	movs	r0, #1
 800de6e:	0004      	movs	r4, r0
 800de70:	4094      	lsls	r4, r2
 800de72:	0089      	lsls	r1, r1, #2
 800de74:	58cb      	ldr	r3, [r1, r3]
 800de76:	4223      	tst	r3, r4
 800de78:	d000      	beq.n	800de7c <__gethex+0x3a0>
 800de7a:	2601      	movs	r6, #1
 800de7c:	2320      	movs	r3, #32
 800de7e:	431e      	orrs	r6, r3
 800de80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de82:	601d      	str	r5, [r3, #0]
 800de84:	9b07      	ldr	r3, [sp, #28]
 800de86:	601f      	str	r7, [r3, #0]
 800de88:	e6b1      	b.n	800dbee <__gethex+0x112>
 800de8a:	c301      	stmia	r3!, {r0}
 800de8c:	4299      	cmp	r1, r3
 800de8e:	d8da      	bhi.n	800de46 <__gethex+0x36a>
 800de90:	68ab      	ldr	r3, [r5, #8]
 800de92:	9a02      	ldr	r2, [sp, #8]
 800de94:	429a      	cmp	r2, r3
 800de96:	db18      	blt.n	800deca <__gethex+0x3ee>
 800de98:	6869      	ldr	r1, [r5, #4]
 800de9a:	9803      	ldr	r0, [sp, #12]
 800de9c:	3101      	adds	r1, #1
 800de9e:	f7fd ff99 	bl	800bdd4 <_Balloc>
 800dea2:	1e04      	subs	r4, r0, #0
 800dea4:	d104      	bne.n	800deb0 <__gethex+0x3d4>
 800dea6:	0022      	movs	r2, r4
 800dea8:	2184      	movs	r1, #132	; 0x84
 800deaa:	4b1c      	ldr	r3, [pc, #112]	; (800df1c <__gethex+0x440>)
 800deac:	481c      	ldr	r0, [pc, #112]	; (800df20 <__gethex+0x444>)
 800deae:	e6c2      	b.n	800dc36 <__gethex+0x15a>
 800deb0:	0029      	movs	r1, r5
 800deb2:	692a      	ldr	r2, [r5, #16]
 800deb4:	310c      	adds	r1, #12
 800deb6:	3202      	adds	r2, #2
 800deb8:	0092      	lsls	r2, r2, #2
 800deba:	300c      	adds	r0, #12
 800debc:	f7ff fd48 	bl	800d950 <memcpy>
 800dec0:	0029      	movs	r1, r5
 800dec2:	9803      	ldr	r0, [sp, #12]
 800dec4:	f7fd ffca 	bl	800be5c <_Bfree>
 800dec8:	0025      	movs	r5, r4
 800deca:	692b      	ldr	r3, [r5, #16]
 800decc:	1c5a      	adds	r2, r3, #1
 800dece:	612a      	str	r2, [r5, #16]
 800ded0:	2201      	movs	r2, #1
 800ded2:	3304      	adds	r3, #4
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	18eb      	adds	r3, r5, r3
 800ded8:	605a      	str	r2, [r3, #4]
 800deda:	e7b9      	b.n	800de50 <__gethex+0x374>
 800dedc:	692a      	ldr	r2, [r5, #16]
 800dede:	9902      	ldr	r1, [sp, #8]
 800dee0:	428a      	cmp	r2, r1
 800dee2:	dd09      	ble.n	800def8 <__gethex+0x41c>
 800dee4:	2101      	movs	r1, #1
 800dee6:	0028      	movs	r0, r5
 800dee8:	f7ff fd8d 	bl	800da06 <rshift>
 800deec:	9b01      	ldr	r3, [sp, #4]
 800deee:	3701      	adds	r7, #1
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	42bb      	cmp	r3, r7
 800def4:	dac1      	bge.n	800de7a <__gethex+0x39e>
 800def6:	e6e4      	b.n	800dcc2 <__gethex+0x1e6>
 800def8:	221f      	movs	r2, #31
 800defa:	9c00      	ldr	r4, [sp, #0]
 800defc:	9900      	ldr	r1, [sp, #0]
 800defe:	2601      	movs	r6, #1
 800df00:	4014      	ands	r4, r2
 800df02:	4211      	tst	r1, r2
 800df04:	d0ba      	beq.n	800de7c <__gethex+0x3a0>
 800df06:	9a04      	ldr	r2, [sp, #16]
 800df08:	189b      	adds	r3, r3, r2
 800df0a:	3b04      	subs	r3, #4
 800df0c:	6818      	ldr	r0, [r3, #0]
 800df0e:	f7fe f859 	bl	800bfc4 <__hi0bits>
 800df12:	2320      	movs	r3, #32
 800df14:	1b1b      	subs	r3, r3, r4
 800df16:	4298      	cmp	r0, r3
 800df18:	dbe4      	blt.n	800dee4 <__gethex+0x408>
 800df1a:	e7af      	b.n	800de7c <__gethex+0x3a0>
 800df1c:	0800eddd 	.word	0x0800eddd
 800df20:	0800f0ee 	.word	0x0800f0ee

0800df24 <L_shift>:
 800df24:	2308      	movs	r3, #8
 800df26:	b570      	push	{r4, r5, r6, lr}
 800df28:	2520      	movs	r5, #32
 800df2a:	1a9a      	subs	r2, r3, r2
 800df2c:	0092      	lsls	r2, r2, #2
 800df2e:	1aad      	subs	r5, r5, r2
 800df30:	6843      	ldr	r3, [r0, #4]
 800df32:	6804      	ldr	r4, [r0, #0]
 800df34:	001e      	movs	r6, r3
 800df36:	40ae      	lsls	r6, r5
 800df38:	40d3      	lsrs	r3, r2
 800df3a:	4334      	orrs	r4, r6
 800df3c:	6004      	str	r4, [r0, #0]
 800df3e:	6043      	str	r3, [r0, #4]
 800df40:	3004      	adds	r0, #4
 800df42:	4288      	cmp	r0, r1
 800df44:	d3f4      	bcc.n	800df30 <L_shift+0xc>
 800df46:	bd70      	pop	{r4, r5, r6, pc}

0800df48 <__match>:
 800df48:	b530      	push	{r4, r5, lr}
 800df4a:	6803      	ldr	r3, [r0, #0]
 800df4c:	780c      	ldrb	r4, [r1, #0]
 800df4e:	3301      	adds	r3, #1
 800df50:	2c00      	cmp	r4, #0
 800df52:	d102      	bne.n	800df5a <__match+0x12>
 800df54:	6003      	str	r3, [r0, #0]
 800df56:	2001      	movs	r0, #1
 800df58:	bd30      	pop	{r4, r5, pc}
 800df5a:	781a      	ldrb	r2, [r3, #0]
 800df5c:	0015      	movs	r5, r2
 800df5e:	3d41      	subs	r5, #65	; 0x41
 800df60:	2d19      	cmp	r5, #25
 800df62:	d800      	bhi.n	800df66 <__match+0x1e>
 800df64:	3220      	adds	r2, #32
 800df66:	3101      	adds	r1, #1
 800df68:	42a2      	cmp	r2, r4
 800df6a:	d0ef      	beq.n	800df4c <__match+0x4>
 800df6c:	2000      	movs	r0, #0
 800df6e:	e7f3      	b.n	800df58 <__match+0x10>

0800df70 <__hexnan>:
 800df70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df72:	680b      	ldr	r3, [r1, #0]
 800df74:	b08b      	sub	sp, #44	; 0x2c
 800df76:	9201      	str	r2, [sp, #4]
 800df78:	9901      	ldr	r1, [sp, #4]
 800df7a:	115a      	asrs	r2, r3, #5
 800df7c:	0092      	lsls	r2, r2, #2
 800df7e:	188a      	adds	r2, r1, r2
 800df80:	9202      	str	r2, [sp, #8]
 800df82:	0019      	movs	r1, r3
 800df84:	221f      	movs	r2, #31
 800df86:	4011      	ands	r1, r2
 800df88:	9008      	str	r0, [sp, #32]
 800df8a:	9106      	str	r1, [sp, #24]
 800df8c:	4213      	tst	r3, r2
 800df8e:	d002      	beq.n	800df96 <__hexnan+0x26>
 800df90:	9b02      	ldr	r3, [sp, #8]
 800df92:	3304      	adds	r3, #4
 800df94:	9302      	str	r3, [sp, #8]
 800df96:	9b02      	ldr	r3, [sp, #8]
 800df98:	2500      	movs	r5, #0
 800df9a:	1f1f      	subs	r7, r3, #4
 800df9c:	003e      	movs	r6, r7
 800df9e:	003c      	movs	r4, r7
 800dfa0:	9b08      	ldr	r3, [sp, #32]
 800dfa2:	603d      	str	r5, [r7, #0]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	9507      	str	r5, [sp, #28]
 800dfa8:	9305      	str	r3, [sp, #20]
 800dfaa:	9503      	str	r5, [sp, #12]
 800dfac:	9b05      	ldr	r3, [sp, #20]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb2:	9b05      	ldr	r3, [sp, #20]
 800dfb4:	785b      	ldrb	r3, [r3, #1]
 800dfb6:	9304      	str	r3, [sp, #16]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d028      	beq.n	800e00e <__hexnan+0x9e>
 800dfbc:	9804      	ldr	r0, [sp, #16]
 800dfbe:	f7ff fd77 	bl	800dab0 <__hexdig_fun>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d154      	bne.n	800e070 <__hexnan+0x100>
 800dfc6:	9b04      	ldr	r3, [sp, #16]
 800dfc8:	2b20      	cmp	r3, #32
 800dfca:	d819      	bhi.n	800e000 <__hexnan+0x90>
 800dfcc:	9b03      	ldr	r3, [sp, #12]
 800dfce:	9a07      	ldr	r2, [sp, #28]
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	dd12      	ble.n	800dffa <__hexnan+0x8a>
 800dfd4:	42b4      	cmp	r4, r6
 800dfd6:	d206      	bcs.n	800dfe6 <__hexnan+0x76>
 800dfd8:	2d07      	cmp	r5, #7
 800dfda:	dc04      	bgt.n	800dfe6 <__hexnan+0x76>
 800dfdc:	002a      	movs	r2, r5
 800dfde:	0031      	movs	r1, r6
 800dfe0:	0020      	movs	r0, r4
 800dfe2:	f7ff ff9f 	bl	800df24 <L_shift>
 800dfe6:	9b01      	ldr	r3, [sp, #4]
 800dfe8:	2508      	movs	r5, #8
 800dfea:	429c      	cmp	r4, r3
 800dfec:	d905      	bls.n	800dffa <__hexnan+0x8a>
 800dfee:	1f26      	subs	r6, r4, #4
 800dff0:	2500      	movs	r5, #0
 800dff2:	0034      	movs	r4, r6
 800dff4:	9b03      	ldr	r3, [sp, #12]
 800dff6:	6035      	str	r5, [r6, #0]
 800dff8:	9307      	str	r3, [sp, #28]
 800dffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dffc:	9305      	str	r3, [sp, #20]
 800dffe:	e7d5      	b.n	800dfac <__hexnan+0x3c>
 800e000:	9b04      	ldr	r3, [sp, #16]
 800e002:	2b29      	cmp	r3, #41	; 0x29
 800e004:	d159      	bne.n	800e0ba <__hexnan+0x14a>
 800e006:	9b05      	ldr	r3, [sp, #20]
 800e008:	9a08      	ldr	r2, [sp, #32]
 800e00a:	3302      	adds	r3, #2
 800e00c:	6013      	str	r3, [r2, #0]
 800e00e:	9b03      	ldr	r3, [sp, #12]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d052      	beq.n	800e0ba <__hexnan+0x14a>
 800e014:	42b4      	cmp	r4, r6
 800e016:	d206      	bcs.n	800e026 <__hexnan+0xb6>
 800e018:	2d07      	cmp	r5, #7
 800e01a:	dc04      	bgt.n	800e026 <__hexnan+0xb6>
 800e01c:	002a      	movs	r2, r5
 800e01e:	0031      	movs	r1, r6
 800e020:	0020      	movs	r0, r4
 800e022:	f7ff ff7f 	bl	800df24 <L_shift>
 800e026:	9b01      	ldr	r3, [sp, #4]
 800e028:	429c      	cmp	r4, r3
 800e02a:	d935      	bls.n	800e098 <__hexnan+0x128>
 800e02c:	001a      	movs	r2, r3
 800e02e:	0023      	movs	r3, r4
 800e030:	cb02      	ldmia	r3!, {r1}
 800e032:	c202      	stmia	r2!, {r1}
 800e034:	429f      	cmp	r7, r3
 800e036:	d2fb      	bcs.n	800e030 <__hexnan+0xc0>
 800e038:	9b02      	ldr	r3, [sp, #8]
 800e03a:	1c62      	adds	r2, r4, #1
 800e03c:	1ed9      	subs	r1, r3, #3
 800e03e:	2304      	movs	r3, #4
 800e040:	4291      	cmp	r1, r2
 800e042:	d305      	bcc.n	800e050 <__hexnan+0xe0>
 800e044:	9b02      	ldr	r3, [sp, #8]
 800e046:	3b04      	subs	r3, #4
 800e048:	1b1b      	subs	r3, r3, r4
 800e04a:	089b      	lsrs	r3, r3, #2
 800e04c:	3301      	adds	r3, #1
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	9a01      	ldr	r2, [sp, #4]
 800e052:	18d3      	adds	r3, r2, r3
 800e054:	2200      	movs	r2, #0
 800e056:	c304      	stmia	r3!, {r2}
 800e058:	429f      	cmp	r7, r3
 800e05a:	d2fc      	bcs.n	800e056 <__hexnan+0xe6>
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d104      	bne.n	800e06c <__hexnan+0xfc>
 800e062:	9b01      	ldr	r3, [sp, #4]
 800e064:	429f      	cmp	r7, r3
 800e066:	d126      	bne.n	800e0b6 <__hexnan+0x146>
 800e068:	2301      	movs	r3, #1
 800e06a:	603b      	str	r3, [r7, #0]
 800e06c:	2005      	movs	r0, #5
 800e06e:	e025      	b.n	800e0bc <__hexnan+0x14c>
 800e070:	9b03      	ldr	r3, [sp, #12]
 800e072:	3501      	adds	r5, #1
 800e074:	3301      	adds	r3, #1
 800e076:	9303      	str	r3, [sp, #12]
 800e078:	2d08      	cmp	r5, #8
 800e07a:	dd06      	ble.n	800e08a <__hexnan+0x11a>
 800e07c:	9b01      	ldr	r3, [sp, #4]
 800e07e:	429c      	cmp	r4, r3
 800e080:	d9bb      	bls.n	800dffa <__hexnan+0x8a>
 800e082:	2300      	movs	r3, #0
 800e084:	2501      	movs	r5, #1
 800e086:	3c04      	subs	r4, #4
 800e088:	6023      	str	r3, [r4, #0]
 800e08a:	220f      	movs	r2, #15
 800e08c:	6823      	ldr	r3, [r4, #0]
 800e08e:	4010      	ands	r0, r2
 800e090:	011b      	lsls	r3, r3, #4
 800e092:	4303      	orrs	r3, r0
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	e7b0      	b.n	800dffa <__hexnan+0x8a>
 800e098:	9b06      	ldr	r3, [sp, #24]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d0de      	beq.n	800e05c <__hexnan+0xec>
 800e09e:	2320      	movs	r3, #32
 800e0a0:	9a06      	ldr	r2, [sp, #24]
 800e0a2:	9902      	ldr	r1, [sp, #8]
 800e0a4:	1a9b      	subs	r3, r3, r2
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	4252      	negs	r2, r2
 800e0aa:	40da      	lsrs	r2, r3
 800e0ac:	3904      	subs	r1, #4
 800e0ae:	680b      	ldr	r3, [r1, #0]
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	600b      	str	r3, [r1, #0]
 800e0b4:	e7d2      	b.n	800e05c <__hexnan+0xec>
 800e0b6:	3f04      	subs	r7, #4
 800e0b8:	e7d0      	b.n	800e05c <__hexnan+0xec>
 800e0ba:	2004      	movs	r0, #4
 800e0bc:	b00b      	add	sp, #44	; 0x2c
 800e0be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e0c0 <__ascii_mbtowc>:
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	2900      	cmp	r1, #0
 800e0c4:	d100      	bne.n	800e0c8 <__ascii_mbtowc+0x8>
 800e0c6:	a901      	add	r1, sp, #4
 800e0c8:	1e10      	subs	r0, r2, #0
 800e0ca:	d006      	beq.n	800e0da <__ascii_mbtowc+0x1a>
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d006      	beq.n	800e0de <__ascii_mbtowc+0x1e>
 800e0d0:	7813      	ldrb	r3, [r2, #0]
 800e0d2:	600b      	str	r3, [r1, #0]
 800e0d4:	7810      	ldrb	r0, [r2, #0]
 800e0d6:	1e43      	subs	r3, r0, #1
 800e0d8:	4198      	sbcs	r0, r3
 800e0da:	b002      	add	sp, #8
 800e0dc:	4770      	bx	lr
 800e0de:	2002      	movs	r0, #2
 800e0e0:	4240      	negs	r0, r0
 800e0e2:	e7fa      	b.n	800e0da <__ascii_mbtowc+0x1a>

0800e0e4 <_realloc_r>:
 800e0e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0e6:	0007      	movs	r7, r0
 800e0e8:	000e      	movs	r6, r1
 800e0ea:	0014      	movs	r4, r2
 800e0ec:	2900      	cmp	r1, #0
 800e0ee:	d105      	bne.n	800e0fc <_realloc_r+0x18>
 800e0f0:	0011      	movs	r1, r2
 800e0f2:	f7fd fddd 	bl	800bcb0 <_malloc_r>
 800e0f6:	0005      	movs	r5, r0
 800e0f8:	0028      	movs	r0, r5
 800e0fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e0fc:	2a00      	cmp	r2, #0
 800e0fe:	d103      	bne.n	800e108 <_realloc_r+0x24>
 800e100:	f7fd fd60 	bl	800bbc4 <_free_r>
 800e104:	0025      	movs	r5, r4
 800e106:	e7f7      	b.n	800e0f8 <_realloc_r+0x14>
 800e108:	f000 f83f 	bl	800e18a <_malloc_usable_size_r>
 800e10c:	9001      	str	r0, [sp, #4]
 800e10e:	4284      	cmp	r4, r0
 800e110:	d803      	bhi.n	800e11a <_realloc_r+0x36>
 800e112:	0035      	movs	r5, r6
 800e114:	0843      	lsrs	r3, r0, #1
 800e116:	42a3      	cmp	r3, r4
 800e118:	d3ee      	bcc.n	800e0f8 <_realloc_r+0x14>
 800e11a:	0021      	movs	r1, r4
 800e11c:	0038      	movs	r0, r7
 800e11e:	f7fd fdc7 	bl	800bcb0 <_malloc_r>
 800e122:	1e05      	subs	r5, r0, #0
 800e124:	d0e8      	beq.n	800e0f8 <_realloc_r+0x14>
 800e126:	9b01      	ldr	r3, [sp, #4]
 800e128:	0022      	movs	r2, r4
 800e12a:	429c      	cmp	r4, r3
 800e12c:	d900      	bls.n	800e130 <_realloc_r+0x4c>
 800e12e:	001a      	movs	r2, r3
 800e130:	0031      	movs	r1, r6
 800e132:	0028      	movs	r0, r5
 800e134:	f7ff fc0c 	bl	800d950 <memcpy>
 800e138:	0031      	movs	r1, r6
 800e13a:	0038      	movs	r0, r7
 800e13c:	f7fd fd42 	bl	800bbc4 <_free_r>
 800e140:	e7da      	b.n	800e0f8 <_realloc_r+0x14>

0800e142 <__ascii_wctomb>:
 800e142:	0003      	movs	r3, r0
 800e144:	1e08      	subs	r0, r1, #0
 800e146:	d005      	beq.n	800e154 <__ascii_wctomb+0x12>
 800e148:	2aff      	cmp	r2, #255	; 0xff
 800e14a:	d904      	bls.n	800e156 <__ascii_wctomb+0x14>
 800e14c:	228a      	movs	r2, #138	; 0x8a
 800e14e:	2001      	movs	r0, #1
 800e150:	601a      	str	r2, [r3, #0]
 800e152:	4240      	negs	r0, r0
 800e154:	4770      	bx	lr
 800e156:	2001      	movs	r0, #1
 800e158:	700a      	strb	r2, [r1, #0]
 800e15a:	e7fb      	b.n	800e154 <__ascii_wctomb+0x12>

0800e15c <fiprintf>:
 800e15c:	b40e      	push	{r1, r2, r3}
 800e15e:	b517      	push	{r0, r1, r2, r4, lr}
 800e160:	4c05      	ldr	r4, [pc, #20]	; (800e178 <fiprintf+0x1c>)
 800e162:	ab05      	add	r3, sp, #20
 800e164:	cb04      	ldmia	r3!, {r2}
 800e166:	0001      	movs	r1, r0
 800e168:	6820      	ldr	r0, [r4, #0]
 800e16a:	9301      	str	r3, [sp, #4]
 800e16c:	f000 f83c 	bl	800e1e8 <_vfiprintf_r>
 800e170:	bc1e      	pop	{r1, r2, r3, r4}
 800e172:	bc08      	pop	{r3}
 800e174:	b003      	add	sp, #12
 800e176:	4718      	bx	r3
 800e178:	2000007c 	.word	0x2000007c

0800e17c <abort>:
 800e17c:	2006      	movs	r0, #6
 800e17e:	b510      	push	{r4, lr}
 800e180:	f000 fa1e 	bl	800e5c0 <raise>
 800e184:	2001      	movs	r0, #1
 800e186:	f7f6 f930 	bl	80043ea <_exit>

0800e18a <_malloc_usable_size_r>:
 800e18a:	1f0b      	subs	r3, r1, #4
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	1f18      	subs	r0, r3, #4
 800e190:	2b00      	cmp	r3, #0
 800e192:	da01      	bge.n	800e198 <_malloc_usable_size_r+0xe>
 800e194:	580b      	ldr	r3, [r1, r0]
 800e196:	18c0      	adds	r0, r0, r3
 800e198:	4770      	bx	lr

0800e19a <__sfputc_r>:
 800e19a:	6893      	ldr	r3, [r2, #8]
 800e19c:	b510      	push	{r4, lr}
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	6093      	str	r3, [r2, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	da04      	bge.n	800e1b0 <__sfputc_r+0x16>
 800e1a6:	6994      	ldr	r4, [r2, #24]
 800e1a8:	42a3      	cmp	r3, r4
 800e1aa:	db07      	blt.n	800e1bc <__sfputc_r+0x22>
 800e1ac:	290a      	cmp	r1, #10
 800e1ae:	d005      	beq.n	800e1bc <__sfputc_r+0x22>
 800e1b0:	6813      	ldr	r3, [r2, #0]
 800e1b2:	1c58      	adds	r0, r3, #1
 800e1b4:	6010      	str	r0, [r2, #0]
 800e1b6:	7019      	strb	r1, [r3, #0]
 800e1b8:	0008      	movs	r0, r1
 800e1ba:	bd10      	pop	{r4, pc}
 800e1bc:	f000 f930 	bl	800e420 <__swbuf_r>
 800e1c0:	0001      	movs	r1, r0
 800e1c2:	e7f9      	b.n	800e1b8 <__sfputc_r+0x1e>

0800e1c4 <__sfputs_r>:
 800e1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c6:	0006      	movs	r6, r0
 800e1c8:	000f      	movs	r7, r1
 800e1ca:	0014      	movs	r4, r2
 800e1cc:	18d5      	adds	r5, r2, r3
 800e1ce:	42ac      	cmp	r4, r5
 800e1d0:	d101      	bne.n	800e1d6 <__sfputs_r+0x12>
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	e007      	b.n	800e1e6 <__sfputs_r+0x22>
 800e1d6:	7821      	ldrb	r1, [r4, #0]
 800e1d8:	003a      	movs	r2, r7
 800e1da:	0030      	movs	r0, r6
 800e1dc:	f7ff ffdd 	bl	800e19a <__sfputc_r>
 800e1e0:	3401      	adds	r4, #1
 800e1e2:	1c43      	adds	r3, r0, #1
 800e1e4:	d1f3      	bne.n	800e1ce <__sfputs_r+0xa>
 800e1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e1e8 <_vfiprintf_r>:
 800e1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ea:	b0a1      	sub	sp, #132	; 0x84
 800e1ec:	000f      	movs	r7, r1
 800e1ee:	0015      	movs	r5, r2
 800e1f0:	001e      	movs	r6, r3
 800e1f2:	9003      	str	r0, [sp, #12]
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	d004      	beq.n	800e202 <_vfiprintf_r+0x1a>
 800e1f8:	6a03      	ldr	r3, [r0, #32]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <_vfiprintf_r+0x1a>
 800e1fe:	f7fc fcd9 	bl	800abb4 <__sinit>
 800e202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e204:	07db      	lsls	r3, r3, #31
 800e206:	d405      	bmi.n	800e214 <_vfiprintf_r+0x2c>
 800e208:	89bb      	ldrh	r3, [r7, #12]
 800e20a:	059b      	lsls	r3, r3, #22
 800e20c:	d402      	bmi.n	800e214 <_vfiprintf_r+0x2c>
 800e20e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e210:	f7fc fe29 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800e214:	89bb      	ldrh	r3, [r7, #12]
 800e216:	071b      	lsls	r3, r3, #28
 800e218:	d502      	bpl.n	800e220 <_vfiprintf_r+0x38>
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d113      	bne.n	800e248 <_vfiprintf_r+0x60>
 800e220:	0039      	movs	r1, r7
 800e222:	9803      	ldr	r0, [sp, #12]
 800e224:	f000 f93e 	bl	800e4a4 <__swsetup_r>
 800e228:	2800      	cmp	r0, #0
 800e22a:	d00d      	beq.n	800e248 <_vfiprintf_r+0x60>
 800e22c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e22e:	07db      	lsls	r3, r3, #31
 800e230:	d503      	bpl.n	800e23a <_vfiprintf_r+0x52>
 800e232:	2001      	movs	r0, #1
 800e234:	4240      	negs	r0, r0
 800e236:	b021      	add	sp, #132	; 0x84
 800e238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e23a:	89bb      	ldrh	r3, [r7, #12]
 800e23c:	059b      	lsls	r3, r3, #22
 800e23e:	d4f8      	bmi.n	800e232 <_vfiprintf_r+0x4a>
 800e240:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e242:	f7fc fe11 	bl	800ae68 <__retarget_lock_release_recursive>
 800e246:	e7f4      	b.n	800e232 <_vfiprintf_r+0x4a>
 800e248:	2300      	movs	r3, #0
 800e24a:	ac08      	add	r4, sp, #32
 800e24c:	6163      	str	r3, [r4, #20]
 800e24e:	3320      	adds	r3, #32
 800e250:	7663      	strb	r3, [r4, #25]
 800e252:	3310      	adds	r3, #16
 800e254:	76a3      	strb	r3, [r4, #26]
 800e256:	9607      	str	r6, [sp, #28]
 800e258:	002e      	movs	r6, r5
 800e25a:	7833      	ldrb	r3, [r6, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d001      	beq.n	800e264 <_vfiprintf_r+0x7c>
 800e260:	2b25      	cmp	r3, #37	; 0x25
 800e262:	d148      	bne.n	800e2f6 <_vfiprintf_r+0x10e>
 800e264:	1b73      	subs	r3, r6, r5
 800e266:	9305      	str	r3, [sp, #20]
 800e268:	42ae      	cmp	r6, r5
 800e26a:	d00b      	beq.n	800e284 <_vfiprintf_r+0x9c>
 800e26c:	002a      	movs	r2, r5
 800e26e:	0039      	movs	r1, r7
 800e270:	9803      	ldr	r0, [sp, #12]
 800e272:	f7ff ffa7 	bl	800e1c4 <__sfputs_r>
 800e276:	3001      	adds	r0, #1
 800e278:	d100      	bne.n	800e27c <_vfiprintf_r+0x94>
 800e27a:	e0af      	b.n	800e3dc <_vfiprintf_r+0x1f4>
 800e27c:	6963      	ldr	r3, [r4, #20]
 800e27e:	9a05      	ldr	r2, [sp, #20]
 800e280:	189b      	adds	r3, r3, r2
 800e282:	6163      	str	r3, [r4, #20]
 800e284:	7833      	ldrb	r3, [r6, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d100      	bne.n	800e28c <_vfiprintf_r+0xa4>
 800e28a:	e0a7      	b.n	800e3dc <_vfiprintf_r+0x1f4>
 800e28c:	2201      	movs	r2, #1
 800e28e:	2300      	movs	r3, #0
 800e290:	4252      	negs	r2, r2
 800e292:	6062      	str	r2, [r4, #4]
 800e294:	a904      	add	r1, sp, #16
 800e296:	3254      	adds	r2, #84	; 0x54
 800e298:	1852      	adds	r2, r2, r1
 800e29a:	1c75      	adds	r5, r6, #1
 800e29c:	6023      	str	r3, [r4, #0]
 800e29e:	60e3      	str	r3, [r4, #12]
 800e2a0:	60a3      	str	r3, [r4, #8]
 800e2a2:	7013      	strb	r3, [r2, #0]
 800e2a4:	65a3      	str	r3, [r4, #88]	; 0x58
 800e2a6:	4b59      	ldr	r3, [pc, #356]	; (800e40c <_vfiprintf_r+0x224>)
 800e2a8:	2205      	movs	r2, #5
 800e2aa:	0018      	movs	r0, r3
 800e2ac:	7829      	ldrb	r1, [r5, #0]
 800e2ae:	9305      	str	r3, [sp, #20]
 800e2b0:	f7fc fddb 	bl	800ae6a <memchr>
 800e2b4:	1c6e      	adds	r6, r5, #1
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d11f      	bne.n	800e2fa <_vfiprintf_r+0x112>
 800e2ba:	6822      	ldr	r2, [r4, #0]
 800e2bc:	06d3      	lsls	r3, r2, #27
 800e2be:	d504      	bpl.n	800e2ca <_vfiprintf_r+0xe2>
 800e2c0:	2353      	movs	r3, #83	; 0x53
 800e2c2:	a904      	add	r1, sp, #16
 800e2c4:	185b      	adds	r3, r3, r1
 800e2c6:	2120      	movs	r1, #32
 800e2c8:	7019      	strb	r1, [r3, #0]
 800e2ca:	0713      	lsls	r3, r2, #28
 800e2cc:	d504      	bpl.n	800e2d8 <_vfiprintf_r+0xf0>
 800e2ce:	2353      	movs	r3, #83	; 0x53
 800e2d0:	a904      	add	r1, sp, #16
 800e2d2:	185b      	adds	r3, r3, r1
 800e2d4:	212b      	movs	r1, #43	; 0x2b
 800e2d6:	7019      	strb	r1, [r3, #0]
 800e2d8:	782b      	ldrb	r3, [r5, #0]
 800e2da:	2b2a      	cmp	r3, #42	; 0x2a
 800e2dc:	d016      	beq.n	800e30c <_vfiprintf_r+0x124>
 800e2de:	002e      	movs	r6, r5
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	200a      	movs	r0, #10
 800e2e4:	68e3      	ldr	r3, [r4, #12]
 800e2e6:	7832      	ldrb	r2, [r6, #0]
 800e2e8:	1c75      	adds	r5, r6, #1
 800e2ea:	3a30      	subs	r2, #48	; 0x30
 800e2ec:	2a09      	cmp	r2, #9
 800e2ee:	d94e      	bls.n	800e38e <_vfiprintf_r+0x1a6>
 800e2f0:	2900      	cmp	r1, #0
 800e2f2:	d111      	bne.n	800e318 <_vfiprintf_r+0x130>
 800e2f4:	e017      	b.n	800e326 <_vfiprintf_r+0x13e>
 800e2f6:	3601      	adds	r6, #1
 800e2f8:	e7af      	b.n	800e25a <_vfiprintf_r+0x72>
 800e2fa:	9b05      	ldr	r3, [sp, #20]
 800e2fc:	6822      	ldr	r2, [r4, #0]
 800e2fe:	1ac0      	subs	r0, r0, r3
 800e300:	2301      	movs	r3, #1
 800e302:	4083      	lsls	r3, r0
 800e304:	4313      	orrs	r3, r2
 800e306:	0035      	movs	r5, r6
 800e308:	6023      	str	r3, [r4, #0]
 800e30a:	e7cc      	b.n	800e2a6 <_vfiprintf_r+0xbe>
 800e30c:	9b07      	ldr	r3, [sp, #28]
 800e30e:	1d19      	adds	r1, r3, #4
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	9107      	str	r1, [sp, #28]
 800e314:	2b00      	cmp	r3, #0
 800e316:	db01      	blt.n	800e31c <_vfiprintf_r+0x134>
 800e318:	930b      	str	r3, [sp, #44]	; 0x2c
 800e31a:	e004      	b.n	800e326 <_vfiprintf_r+0x13e>
 800e31c:	425b      	negs	r3, r3
 800e31e:	60e3      	str	r3, [r4, #12]
 800e320:	2302      	movs	r3, #2
 800e322:	4313      	orrs	r3, r2
 800e324:	6023      	str	r3, [r4, #0]
 800e326:	7833      	ldrb	r3, [r6, #0]
 800e328:	2b2e      	cmp	r3, #46	; 0x2e
 800e32a:	d10a      	bne.n	800e342 <_vfiprintf_r+0x15a>
 800e32c:	7873      	ldrb	r3, [r6, #1]
 800e32e:	2b2a      	cmp	r3, #42	; 0x2a
 800e330:	d135      	bne.n	800e39e <_vfiprintf_r+0x1b6>
 800e332:	9b07      	ldr	r3, [sp, #28]
 800e334:	3602      	adds	r6, #2
 800e336:	1d1a      	adds	r2, r3, #4
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	9207      	str	r2, [sp, #28]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	db2b      	blt.n	800e398 <_vfiprintf_r+0x1b0>
 800e340:	9309      	str	r3, [sp, #36]	; 0x24
 800e342:	4d33      	ldr	r5, [pc, #204]	; (800e410 <_vfiprintf_r+0x228>)
 800e344:	2203      	movs	r2, #3
 800e346:	0028      	movs	r0, r5
 800e348:	7831      	ldrb	r1, [r6, #0]
 800e34a:	f7fc fd8e 	bl	800ae6a <memchr>
 800e34e:	2800      	cmp	r0, #0
 800e350:	d006      	beq.n	800e360 <_vfiprintf_r+0x178>
 800e352:	2340      	movs	r3, #64	; 0x40
 800e354:	1b40      	subs	r0, r0, r5
 800e356:	4083      	lsls	r3, r0
 800e358:	6822      	ldr	r2, [r4, #0]
 800e35a:	3601      	adds	r6, #1
 800e35c:	4313      	orrs	r3, r2
 800e35e:	6023      	str	r3, [r4, #0]
 800e360:	7831      	ldrb	r1, [r6, #0]
 800e362:	2206      	movs	r2, #6
 800e364:	482b      	ldr	r0, [pc, #172]	; (800e414 <_vfiprintf_r+0x22c>)
 800e366:	1c75      	adds	r5, r6, #1
 800e368:	7621      	strb	r1, [r4, #24]
 800e36a:	f7fc fd7e 	bl	800ae6a <memchr>
 800e36e:	2800      	cmp	r0, #0
 800e370:	d043      	beq.n	800e3fa <_vfiprintf_r+0x212>
 800e372:	4b29      	ldr	r3, [pc, #164]	; (800e418 <_vfiprintf_r+0x230>)
 800e374:	2b00      	cmp	r3, #0
 800e376:	d125      	bne.n	800e3c4 <_vfiprintf_r+0x1dc>
 800e378:	2207      	movs	r2, #7
 800e37a:	9b07      	ldr	r3, [sp, #28]
 800e37c:	3307      	adds	r3, #7
 800e37e:	4393      	bics	r3, r2
 800e380:	3308      	adds	r3, #8
 800e382:	9307      	str	r3, [sp, #28]
 800e384:	6963      	ldr	r3, [r4, #20]
 800e386:	9a04      	ldr	r2, [sp, #16]
 800e388:	189b      	adds	r3, r3, r2
 800e38a:	6163      	str	r3, [r4, #20]
 800e38c:	e764      	b.n	800e258 <_vfiprintf_r+0x70>
 800e38e:	4343      	muls	r3, r0
 800e390:	002e      	movs	r6, r5
 800e392:	2101      	movs	r1, #1
 800e394:	189b      	adds	r3, r3, r2
 800e396:	e7a6      	b.n	800e2e6 <_vfiprintf_r+0xfe>
 800e398:	2301      	movs	r3, #1
 800e39a:	425b      	negs	r3, r3
 800e39c:	e7d0      	b.n	800e340 <_vfiprintf_r+0x158>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	200a      	movs	r0, #10
 800e3a2:	001a      	movs	r2, r3
 800e3a4:	3601      	adds	r6, #1
 800e3a6:	6063      	str	r3, [r4, #4]
 800e3a8:	7831      	ldrb	r1, [r6, #0]
 800e3aa:	1c75      	adds	r5, r6, #1
 800e3ac:	3930      	subs	r1, #48	; 0x30
 800e3ae:	2909      	cmp	r1, #9
 800e3b0:	d903      	bls.n	800e3ba <_vfiprintf_r+0x1d2>
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d0c5      	beq.n	800e342 <_vfiprintf_r+0x15a>
 800e3b6:	9209      	str	r2, [sp, #36]	; 0x24
 800e3b8:	e7c3      	b.n	800e342 <_vfiprintf_r+0x15a>
 800e3ba:	4342      	muls	r2, r0
 800e3bc:	002e      	movs	r6, r5
 800e3be:	2301      	movs	r3, #1
 800e3c0:	1852      	adds	r2, r2, r1
 800e3c2:	e7f1      	b.n	800e3a8 <_vfiprintf_r+0x1c0>
 800e3c4:	aa07      	add	r2, sp, #28
 800e3c6:	9200      	str	r2, [sp, #0]
 800e3c8:	0021      	movs	r1, r4
 800e3ca:	003a      	movs	r2, r7
 800e3cc:	4b13      	ldr	r3, [pc, #76]	; (800e41c <_vfiprintf_r+0x234>)
 800e3ce:	9803      	ldr	r0, [sp, #12]
 800e3d0:	f7fb fd82 	bl	8009ed8 <_printf_float>
 800e3d4:	9004      	str	r0, [sp, #16]
 800e3d6:	9b04      	ldr	r3, [sp, #16]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	d1d3      	bne.n	800e384 <_vfiprintf_r+0x19c>
 800e3dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3de:	07db      	lsls	r3, r3, #31
 800e3e0:	d405      	bmi.n	800e3ee <_vfiprintf_r+0x206>
 800e3e2:	89bb      	ldrh	r3, [r7, #12]
 800e3e4:	059b      	lsls	r3, r3, #22
 800e3e6:	d402      	bmi.n	800e3ee <_vfiprintf_r+0x206>
 800e3e8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e3ea:	f7fc fd3d 	bl	800ae68 <__retarget_lock_release_recursive>
 800e3ee:	89bb      	ldrh	r3, [r7, #12]
 800e3f0:	065b      	lsls	r3, r3, #25
 800e3f2:	d500      	bpl.n	800e3f6 <_vfiprintf_r+0x20e>
 800e3f4:	e71d      	b.n	800e232 <_vfiprintf_r+0x4a>
 800e3f6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e3f8:	e71d      	b.n	800e236 <_vfiprintf_r+0x4e>
 800e3fa:	aa07      	add	r2, sp, #28
 800e3fc:	9200      	str	r2, [sp, #0]
 800e3fe:	0021      	movs	r1, r4
 800e400:	003a      	movs	r2, r7
 800e402:	4b06      	ldr	r3, [pc, #24]	; (800e41c <_vfiprintf_r+0x234>)
 800e404:	9803      	ldr	r0, [sp, #12]
 800e406:	f7fc f82d 	bl	800a464 <_printf_i>
 800e40a:	e7e3      	b.n	800e3d4 <_vfiprintf_r+0x1ec>
 800e40c:	0800f099 	.word	0x0800f099
 800e410:	0800f09f 	.word	0x0800f09f
 800e414:	0800f0a3 	.word	0x0800f0a3
 800e418:	08009ed9 	.word	0x08009ed9
 800e41c:	0800e1c5 	.word	0x0800e1c5

0800e420 <__swbuf_r>:
 800e420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e422:	0006      	movs	r6, r0
 800e424:	000d      	movs	r5, r1
 800e426:	0014      	movs	r4, r2
 800e428:	2800      	cmp	r0, #0
 800e42a:	d004      	beq.n	800e436 <__swbuf_r+0x16>
 800e42c:	6a03      	ldr	r3, [r0, #32]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d101      	bne.n	800e436 <__swbuf_r+0x16>
 800e432:	f7fc fbbf 	bl	800abb4 <__sinit>
 800e436:	69a3      	ldr	r3, [r4, #24]
 800e438:	60a3      	str	r3, [r4, #8]
 800e43a:	89a3      	ldrh	r3, [r4, #12]
 800e43c:	071b      	lsls	r3, r3, #28
 800e43e:	d528      	bpl.n	800e492 <__swbuf_r+0x72>
 800e440:	6923      	ldr	r3, [r4, #16]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d025      	beq.n	800e492 <__swbuf_r+0x72>
 800e446:	6923      	ldr	r3, [r4, #16]
 800e448:	6820      	ldr	r0, [r4, #0]
 800e44a:	b2ef      	uxtb	r7, r5
 800e44c:	1ac0      	subs	r0, r0, r3
 800e44e:	6963      	ldr	r3, [r4, #20]
 800e450:	b2ed      	uxtb	r5, r5
 800e452:	4283      	cmp	r3, r0
 800e454:	dc05      	bgt.n	800e462 <__swbuf_r+0x42>
 800e456:	0021      	movs	r1, r4
 800e458:	0030      	movs	r0, r6
 800e45a:	f7ff fa17 	bl	800d88c <_fflush_r>
 800e45e:	2800      	cmp	r0, #0
 800e460:	d11d      	bne.n	800e49e <__swbuf_r+0x7e>
 800e462:	68a3      	ldr	r3, [r4, #8]
 800e464:	3001      	adds	r0, #1
 800e466:	3b01      	subs	r3, #1
 800e468:	60a3      	str	r3, [r4, #8]
 800e46a:	6823      	ldr	r3, [r4, #0]
 800e46c:	1c5a      	adds	r2, r3, #1
 800e46e:	6022      	str	r2, [r4, #0]
 800e470:	701f      	strb	r7, [r3, #0]
 800e472:	6963      	ldr	r3, [r4, #20]
 800e474:	4283      	cmp	r3, r0
 800e476:	d004      	beq.n	800e482 <__swbuf_r+0x62>
 800e478:	89a3      	ldrh	r3, [r4, #12]
 800e47a:	07db      	lsls	r3, r3, #31
 800e47c:	d507      	bpl.n	800e48e <__swbuf_r+0x6e>
 800e47e:	2d0a      	cmp	r5, #10
 800e480:	d105      	bne.n	800e48e <__swbuf_r+0x6e>
 800e482:	0021      	movs	r1, r4
 800e484:	0030      	movs	r0, r6
 800e486:	f7ff fa01 	bl	800d88c <_fflush_r>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	d107      	bne.n	800e49e <__swbuf_r+0x7e>
 800e48e:	0028      	movs	r0, r5
 800e490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e492:	0021      	movs	r1, r4
 800e494:	0030      	movs	r0, r6
 800e496:	f000 f805 	bl	800e4a4 <__swsetup_r>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d0d3      	beq.n	800e446 <__swbuf_r+0x26>
 800e49e:	2501      	movs	r5, #1
 800e4a0:	426d      	negs	r5, r5
 800e4a2:	e7f4      	b.n	800e48e <__swbuf_r+0x6e>

0800e4a4 <__swsetup_r>:
 800e4a4:	4b30      	ldr	r3, [pc, #192]	; (800e568 <__swsetup_r+0xc4>)
 800e4a6:	b570      	push	{r4, r5, r6, lr}
 800e4a8:	0005      	movs	r5, r0
 800e4aa:	6818      	ldr	r0, [r3, #0]
 800e4ac:	000c      	movs	r4, r1
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	d004      	beq.n	800e4bc <__swsetup_r+0x18>
 800e4b2:	6a03      	ldr	r3, [r0, #32]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d101      	bne.n	800e4bc <__swsetup_r+0x18>
 800e4b8:	f7fc fb7c 	bl	800abb4 <__sinit>
 800e4bc:	230c      	movs	r3, #12
 800e4be:	5ee2      	ldrsh	r2, [r4, r3]
 800e4c0:	b293      	uxth	r3, r2
 800e4c2:	0711      	lsls	r1, r2, #28
 800e4c4:	d423      	bmi.n	800e50e <__swsetup_r+0x6a>
 800e4c6:	06d9      	lsls	r1, r3, #27
 800e4c8:	d407      	bmi.n	800e4da <__swsetup_r+0x36>
 800e4ca:	2309      	movs	r3, #9
 800e4cc:	2001      	movs	r0, #1
 800e4ce:	602b      	str	r3, [r5, #0]
 800e4d0:	3337      	adds	r3, #55	; 0x37
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	81a3      	strh	r3, [r4, #12]
 800e4d6:	4240      	negs	r0, r0
 800e4d8:	bd70      	pop	{r4, r5, r6, pc}
 800e4da:	075b      	lsls	r3, r3, #29
 800e4dc:	d513      	bpl.n	800e506 <__swsetup_r+0x62>
 800e4de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4e0:	2900      	cmp	r1, #0
 800e4e2:	d008      	beq.n	800e4f6 <__swsetup_r+0x52>
 800e4e4:	0023      	movs	r3, r4
 800e4e6:	3344      	adds	r3, #68	; 0x44
 800e4e8:	4299      	cmp	r1, r3
 800e4ea:	d002      	beq.n	800e4f2 <__swsetup_r+0x4e>
 800e4ec:	0028      	movs	r0, r5
 800e4ee:	f7fd fb69 	bl	800bbc4 <_free_r>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	6363      	str	r3, [r4, #52]	; 0x34
 800e4f6:	2224      	movs	r2, #36	; 0x24
 800e4f8:	89a3      	ldrh	r3, [r4, #12]
 800e4fa:	4393      	bics	r3, r2
 800e4fc:	81a3      	strh	r3, [r4, #12]
 800e4fe:	2300      	movs	r3, #0
 800e500:	6063      	str	r3, [r4, #4]
 800e502:	6923      	ldr	r3, [r4, #16]
 800e504:	6023      	str	r3, [r4, #0]
 800e506:	2308      	movs	r3, #8
 800e508:	89a2      	ldrh	r2, [r4, #12]
 800e50a:	4313      	orrs	r3, r2
 800e50c:	81a3      	strh	r3, [r4, #12]
 800e50e:	6923      	ldr	r3, [r4, #16]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d10b      	bne.n	800e52c <__swsetup_r+0x88>
 800e514:	21a0      	movs	r1, #160	; 0xa0
 800e516:	2280      	movs	r2, #128	; 0x80
 800e518:	89a3      	ldrh	r3, [r4, #12]
 800e51a:	0089      	lsls	r1, r1, #2
 800e51c:	0092      	lsls	r2, r2, #2
 800e51e:	400b      	ands	r3, r1
 800e520:	4293      	cmp	r3, r2
 800e522:	d003      	beq.n	800e52c <__swsetup_r+0x88>
 800e524:	0021      	movs	r1, r4
 800e526:	0028      	movs	r0, r5
 800e528:	f000 f892 	bl	800e650 <__smakebuf_r>
 800e52c:	220c      	movs	r2, #12
 800e52e:	5ea3      	ldrsh	r3, [r4, r2]
 800e530:	2001      	movs	r0, #1
 800e532:	001a      	movs	r2, r3
 800e534:	b299      	uxth	r1, r3
 800e536:	4002      	ands	r2, r0
 800e538:	4203      	tst	r3, r0
 800e53a:	d00f      	beq.n	800e55c <__swsetup_r+0xb8>
 800e53c:	2200      	movs	r2, #0
 800e53e:	60a2      	str	r2, [r4, #8]
 800e540:	6962      	ldr	r2, [r4, #20]
 800e542:	4252      	negs	r2, r2
 800e544:	61a2      	str	r2, [r4, #24]
 800e546:	2000      	movs	r0, #0
 800e548:	6922      	ldr	r2, [r4, #16]
 800e54a:	4282      	cmp	r2, r0
 800e54c:	d1c4      	bne.n	800e4d8 <__swsetup_r+0x34>
 800e54e:	0609      	lsls	r1, r1, #24
 800e550:	d5c2      	bpl.n	800e4d8 <__swsetup_r+0x34>
 800e552:	2240      	movs	r2, #64	; 0x40
 800e554:	4313      	orrs	r3, r2
 800e556:	81a3      	strh	r3, [r4, #12]
 800e558:	3801      	subs	r0, #1
 800e55a:	e7bd      	b.n	800e4d8 <__swsetup_r+0x34>
 800e55c:	0788      	lsls	r0, r1, #30
 800e55e:	d400      	bmi.n	800e562 <__swsetup_r+0xbe>
 800e560:	6962      	ldr	r2, [r4, #20]
 800e562:	60a2      	str	r2, [r4, #8]
 800e564:	e7ef      	b.n	800e546 <__swsetup_r+0xa2>
 800e566:	46c0      	nop			; (mov r8, r8)
 800e568:	2000007c 	.word	0x2000007c

0800e56c <_raise_r>:
 800e56c:	b570      	push	{r4, r5, r6, lr}
 800e56e:	0004      	movs	r4, r0
 800e570:	000d      	movs	r5, r1
 800e572:	291f      	cmp	r1, #31
 800e574:	d904      	bls.n	800e580 <_raise_r+0x14>
 800e576:	2316      	movs	r3, #22
 800e578:	6003      	str	r3, [r0, #0]
 800e57a:	2001      	movs	r0, #1
 800e57c:	4240      	negs	r0, r0
 800e57e:	bd70      	pop	{r4, r5, r6, pc}
 800e580:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e582:	2b00      	cmp	r3, #0
 800e584:	d004      	beq.n	800e590 <_raise_r+0x24>
 800e586:	008a      	lsls	r2, r1, #2
 800e588:	189b      	adds	r3, r3, r2
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	2a00      	cmp	r2, #0
 800e58e:	d108      	bne.n	800e5a2 <_raise_r+0x36>
 800e590:	0020      	movs	r0, r4
 800e592:	f000 f831 	bl	800e5f8 <_getpid_r>
 800e596:	002a      	movs	r2, r5
 800e598:	0001      	movs	r1, r0
 800e59a:	0020      	movs	r0, r4
 800e59c:	f000 f81a 	bl	800e5d4 <_kill_r>
 800e5a0:	e7ed      	b.n	800e57e <_raise_r+0x12>
 800e5a2:	2000      	movs	r0, #0
 800e5a4:	2a01      	cmp	r2, #1
 800e5a6:	d0ea      	beq.n	800e57e <_raise_r+0x12>
 800e5a8:	1c51      	adds	r1, r2, #1
 800e5aa:	d103      	bne.n	800e5b4 <_raise_r+0x48>
 800e5ac:	2316      	movs	r3, #22
 800e5ae:	3001      	adds	r0, #1
 800e5b0:	6023      	str	r3, [r4, #0]
 800e5b2:	e7e4      	b.n	800e57e <_raise_r+0x12>
 800e5b4:	2400      	movs	r4, #0
 800e5b6:	0028      	movs	r0, r5
 800e5b8:	601c      	str	r4, [r3, #0]
 800e5ba:	4790      	blx	r2
 800e5bc:	0020      	movs	r0, r4
 800e5be:	e7de      	b.n	800e57e <_raise_r+0x12>

0800e5c0 <raise>:
 800e5c0:	b510      	push	{r4, lr}
 800e5c2:	4b03      	ldr	r3, [pc, #12]	; (800e5d0 <raise+0x10>)
 800e5c4:	0001      	movs	r1, r0
 800e5c6:	6818      	ldr	r0, [r3, #0]
 800e5c8:	f7ff ffd0 	bl	800e56c <_raise_r>
 800e5cc:	bd10      	pop	{r4, pc}
 800e5ce:	46c0      	nop			; (mov r8, r8)
 800e5d0:	2000007c 	.word	0x2000007c

0800e5d4 <_kill_r>:
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	b570      	push	{r4, r5, r6, lr}
 800e5d8:	4d06      	ldr	r5, [pc, #24]	; (800e5f4 <_kill_r+0x20>)
 800e5da:	0004      	movs	r4, r0
 800e5dc:	0008      	movs	r0, r1
 800e5de:	0011      	movs	r1, r2
 800e5e0:	602b      	str	r3, [r5, #0]
 800e5e2:	f7f5 fef2 	bl	80043ca <_kill>
 800e5e6:	1c43      	adds	r3, r0, #1
 800e5e8:	d103      	bne.n	800e5f2 <_kill_r+0x1e>
 800e5ea:	682b      	ldr	r3, [r5, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d000      	beq.n	800e5f2 <_kill_r+0x1e>
 800e5f0:	6023      	str	r3, [r4, #0]
 800e5f2:	bd70      	pop	{r4, r5, r6, pc}
 800e5f4:	20000660 	.word	0x20000660

0800e5f8 <_getpid_r>:
 800e5f8:	b510      	push	{r4, lr}
 800e5fa:	f7f5 fee0 	bl	80043be <_getpid>
 800e5fe:	bd10      	pop	{r4, pc}

0800e600 <__swhatbuf_r>:
 800e600:	b570      	push	{r4, r5, r6, lr}
 800e602:	000e      	movs	r6, r1
 800e604:	001d      	movs	r5, r3
 800e606:	230e      	movs	r3, #14
 800e608:	5ec9      	ldrsh	r1, [r1, r3]
 800e60a:	0014      	movs	r4, r2
 800e60c:	b096      	sub	sp, #88	; 0x58
 800e60e:	2900      	cmp	r1, #0
 800e610:	da0c      	bge.n	800e62c <__swhatbuf_r+0x2c>
 800e612:	89b2      	ldrh	r2, [r6, #12]
 800e614:	2380      	movs	r3, #128	; 0x80
 800e616:	0011      	movs	r1, r2
 800e618:	4019      	ands	r1, r3
 800e61a:	421a      	tst	r2, r3
 800e61c:	d013      	beq.n	800e646 <__swhatbuf_r+0x46>
 800e61e:	2100      	movs	r1, #0
 800e620:	3b40      	subs	r3, #64	; 0x40
 800e622:	2000      	movs	r0, #0
 800e624:	6029      	str	r1, [r5, #0]
 800e626:	6023      	str	r3, [r4, #0]
 800e628:	b016      	add	sp, #88	; 0x58
 800e62a:	bd70      	pop	{r4, r5, r6, pc}
 800e62c:	466a      	mov	r2, sp
 800e62e:	f000 f84d 	bl	800e6cc <_fstat_r>
 800e632:	2800      	cmp	r0, #0
 800e634:	dbed      	blt.n	800e612 <__swhatbuf_r+0x12>
 800e636:	23f0      	movs	r3, #240	; 0xf0
 800e638:	9901      	ldr	r1, [sp, #4]
 800e63a:	021b      	lsls	r3, r3, #8
 800e63c:	4019      	ands	r1, r3
 800e63e:	4b03      	ldr	r3, [pc, #12]	; (800e64c <__swhatbuf_r+0x4c>)
 800e640:	18c9      	adds	r1, r1, r3
 800e642:	424b      	negs	r3, r1
 800e644:	4159      	adcs	r1, r3
 800e646:	2380      	movs	r3, #128	; 0x80
 800e648:	00db      	lsls	r3, r3, #3
 800e64a:	e7ea      	b.n	800e622 <__swhatbuf_r+0x22>
 800e64c:	ffffe000 	.word	0xffffe000

0800e650 <__smakebuf_r>:
 800e650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e652:	2602      	movs	r6, #2
 800e654:	898b      	ldrh	r3, [r1, #12]
 800e656:	0005      	movs	r5, r0
 800e658:	000c      	movs	r4, r1
 800e65a:	4233      	tst	r3, r6
 800e65c:	d006      	beq.n	800e66c <__smakebuf_r+0x1c>
 800e65e:	0023      	movs	r3, r4
 800e660:	3347      	adds	r3, #71	; 0x47
 800e662:	6023      	str	r3, [r4, #0]
 800e664:	6123      	str	r3, [r4, #16]
 800e666:	2301      	movs	r3, #1
 800e668:	6163      	str	r3, [r4, #20]
 800e66a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e66c:	466a      	mov	r2, sp
 800e66e:	ab01      	add	r3, sp, #4
 800e670:	f7ff ffc6 	bl	800e600 <__swhatbuf_r>
 800e674:	9900      	ldr	r1, [sp, #0]
 800e676:	0007      	movs	r7, r0
 800e678:	0028      	movs	r0, r5
 800e67a:	f7fd fb19 	bl	800bcb0 <_malloc_r>
 800e67e:	2800      	cmp	r0, #0
 800e680:	d108      	bne.n	800e694 <__smakebuf_r+0x44>
 800e682:	220c      	movs	r2, #12
 800e684:	5ea3      	ldrsh	r3, [r4, r2]
 800e686:	059a      	lsls	r2, r3, #22
 800e688:	d4ef      	bmi.n	800e66a <__smakebuf_r+0x1a>
 800e68a:	2203      	movs	r2, #3
 800e68c:	4393      	bics	r3, r2
 800e68e:	431e      	orrs	r6, r3
 800e690:	81a6      	strh	r6, [r4, #12]
 800e692:	e7e4      	b.n	800e65e <__smakebuf_r+0xe>
 800e694:	2380      	movs	r3, #128	; 0x80
 800e696:	89a2      	ldrh	r2, [r4, #12]
 800e698:	6020      	str	r0, [r4, #0]
 800e69a:	4313      	orrs	r3, r2
 800e69c:	81a3      	strh	r3, [r4, #12]
 800e69e:	9b00      	ldr	r3, [sp, #0]
 800e6a0:	6120      	str	r0, [r4, #16]
 800e6a2:	6163      	str	r3, [r4, #20]
 800e6a4:	9b01      	ldr	r3, [sp, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d00c      	beq.n	800e6c4 <__smakebuf_r+0x74>
 800e6aa:	0028      	movs	r0, r5
 800e6ac:	230e      	movs	r3, #14
 800e6ae:	5ee1      	ldrsh	r1, [r4, r3]
 800e6b0:	f000 f81e 	bl	800e6f0 <_isatty_r>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	d005      	beq.n	800e6c4 <__smakebuf_r+0x74>
 800e6b8:	2303      	movs	r3, #3
 800e6ba:	89a2      	ldrh	r2, [r4, #12]
 800e6bc:	439a      	bics	r2, r3
 800e6be:	3b02      	subs	r3, #2
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	81a3      	strh	r3, [r4, #12]
 800e6c4:	89a3      	ldrh	r3, [r4, #12]
 800e6c6:	433b      	orrs	r3, r7
 800e6c8:	81a3      	strh	r3, [r4, #12]
 800e6ca:	e7ce      	b.n	800e66a <__smakebuf_r+0x1a>

0800e6cc <_fstat_r>:
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	b570      	push	{r4, r5, r6, lr}
 800e6d0:	4d06      	ldr	r5, [pc, #24]	; (800e6ec <_fstat_r+0x20>)
 800e6d2:	0004      	movs	r4, r0
 800e6d4:	0008      	movs	r0, r1
 800e6d6:	0011      	movs	r1, r2
 800e6d8:	602b      	str	r3, [r5, #0]
 800e6da:	f7f5 fed5 	bl	8004488 <_fstat>
 800e6de:	1c43      	adds	r3, r0, #1
 800e6e0:	d103      	bne.n	800e6ea <_fstat_r+0x1e>
 800e6e2:	682b      	ldr	r3, [r5, #0]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d000      	beq.n	800e6ea <_fstat_r+0x1e>
 800e6e8:	6023      	str	r3, [r4, #0]
 800e6ea:	bd70      	pop	{r4, r5, r6, pc}
 800e6ec:	20000660 	.word	0x20000660

0800e6f0 <_isatty_r>:
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	b570      	push	{r4, r5, r6, lr}
 800e6f4:	4d06      	ldr	r5, [pc, #24]	; (800e710 <_isatty_r+0x20>)
 800e6f6:	0004      	movs	r4, r0
 800e6f8:	0008      	movs	r0, r1
 800e6fa:	602b      	str	r3, [r5, #0]
 800e6fc:	f7f5 fed2 	bl	80044a4 <_isatty>
 800e700:	1c43      	adds	r3, r0, #1
 800e702:	d103      	bne.n	800e70c <_isatty_r+0x1c>
 800e704:	682b      	ldr	r3, [r5, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d000      	beq.n	800e70c <_isatty_r+0x1c>
 800e70a:	6023      	str	r3, [r4, #0]
 800e70c:	bd70      	pop	{r4, r5, r6, pc}
 800e70e:	46c0      	nop			; (mov r8, r8)
 800e710:	20000660 	.word	0x20000660

0800e714 <_init>:
 800e714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e716:	46c0      	nop			; (mov r8, r8)
 800e718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e71a:	bc08      	pop	{r3}
 800e71c:	469e      	mov	lr, r3
 800e71e:	4770      	bx	lr

0800e720 <_fini>:
 800e720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e722:	46c0      	nop			; (mov r8, r8)
 800e724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e726:	bc08      	pop	{r3}
 800e728:	469e      	mov	lr, r3
 800e72a:	4770      	bx	lr
