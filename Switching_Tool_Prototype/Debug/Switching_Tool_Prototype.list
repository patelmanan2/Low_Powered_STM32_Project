
Switching_Tool_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abcc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800ac90  0800ac90  0001ac90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b208  0800b208  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b208  0800b208  0001b208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b210  0800b210  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b210  0800b210  0001b210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b214  0800b214  0001b214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001d4  0800b3ec  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  0800b3ec  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a0d  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001975  00000000  00000000  00029c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  0002b5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000066e  00000000  00000000  0002be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001201b  00000000  00000000  0002c496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b88d  00000000  00000000  0003e4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006afa8  00000000  00000000  00049d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032d4  00000000  00000000  000b4ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000b7fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ac74 	.word	0x0800ac74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800ac74 	.word	0x0800ac74

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fbb5 	bl	8001bac <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fb05 	bl	8001a5c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fba7 	bl	8001bac <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb9d 	bl	8001bac <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fb2d 	bl	8001ae0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fb23 	bl	8001ae0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 f9ed 	bl	8002938 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fe46 	bl	80021f8 <__aeabi_dsub>
 800056c:	f002 f9e4 	bl	8002938 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fb55 	bl	8001c74 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fa18 	bl	8002a04 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fb4c 	bl	8001c74 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fe08 	bl	80021f8 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 f9d1 	bl	80029a4 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fb35 	bl	8001c74 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 f9f8 	bl	8002a04 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fbd2 	bl	8000dc0 <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 faf0 	bl	8002c28 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 faeb 	bl	8002c28 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fdiv>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0245      	lsls	r5, r0, #9
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	0047      	lsls	r7, r0, #1
 80007ca:	1c0c      	adds	r4, r1, #0
 80007cc:	0a6d      	lsrs	r5, r5, #9
 80007ce:	0e3f      	lsrs	r7, r7, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2f00      	cmp	r7, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fdiv+0x1c>
 80007d6:	e06f      	b.n	80008b8 <__aeabi_fdiv+0xfc>
 80007d8:	2fff      	cmp	r7, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x22>
 80007dc:	e074      	b.n	80008c8 <__aeabi_fdiv+0x10c>
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00ed      	lsls	r5, r5, #3
 80007e8:	04d2      	lsls	r2, r2, #19
 80007ea:	4315      	orrs	r5, r2
 80007ec:	3f7f      	subs	r7, #127	; 0x7f
 80007ee:	0263      	lsls	r3, r4, #9
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	0063      	lsls	r3, r4, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fe4      	lsrs	r4, r4, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d04d      	beq.n	800089a <__aeabi_fdiv+0xde>
 80007fe:	2bff      	cmp	r3, #255	; 0xff
 8000800:	d045      	beq.n	800088e <__aeabi_fdiv+0xd2>
 8000802:	4642      	mov	r2, r8
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	4311      	orrs	r1, r2
 800080c:	4688      	mov	r8, r1
 800080e:	2200      	movs	r2, #0
 8000810:	3b7f      	subs	r3, #127	; 0x7f
 8000812:	0031      	movs	r1, r6
 8000814:	1aff      	subs	r7, r7, r3
 8000816:	464b      	mov	r3, r9
 8000818:	4061      	eors	r1, r4
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d900      	bls.n	8000822 <__aeabi_fdiv+0x66>
 8000820:	e0b8      	b.n	8000994 <__aeabi_fdiv+0x1d8>
 8000822:	4870      	ldr	r0, [pc, #448]	; (80009e4 <__aeabi_fdiv+0x228>)
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	58c3      	ldr	r3, [r0, r3]
 8000828:	469f      	mov	pc, r3
 800082a:	2300      	movs	r3, #0
 800082c:	4698      	mov	r8, r3
 800082e:	0026      	movs	r6, r4
 8000830:	4645      	mov	r5, r8
 8000832:	4692      	mov	sl, r2
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d100      	bne.n	800083c <__aeabi_fdiv+0x80>
 800083a:	e08d      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800083c:	2b03      	cmp	r3, #3
 800083e:	d100      	bne.n	8000842 <__aeabi_fdiv+0x86>
 8000840:	e0a1      	b.n	8000986 <__aeabi_fdiv+0x1ca>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d018      	beq.n	8000878 <__aeabi_fdiv+0xbc>
 8000846:	003b      	movs	r3, r7
 8000848:	337f      	adds	r3, #127	; 0x7f
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd6d      	ble.n	800092a <__aeabi_fdiv+0x16e>
 800084e:	076a      	lsls	r2, r5, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0xa0>
 8000852:	220f      	movs	r2, #15
 8000854:	402a      	ands	r2, r5
 8000856:	2a04      	cmp	r2, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0xa0>
 800085a:	3504      	adds	r5, #4
 800085c:	012a      	lsls	r2, r5, #4
 800085e:	d503      	bpl.n	8000868 <__aeabi_fdiv+0xac>
 8000860:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <__aeabi_fdiv+0x22c>)
 8000862:	401d      	ands	r5, r3
 8000864:	003b      	movs	r3, r7
 8000866:	3380      	adds	r3, #128	; 0x80
 8000868:	2bfe      	cmp	r3, #254	; 0xfe
 800086a:	dd00      	ble.n	800086e <__aeabi_fdiv+0xb2>
 800086c:	e074      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800086e:	01aa      	lsls	r2, r5, #6
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	e002      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000876:	000e      	movs	r6, r1
 8000878:	2000      	movs	r0, #0
 800087a:	2200      	movs	r2, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	07f6      	lsls	r6, r6, #31
 8000880:	4310      	orrs	r0, r2
 8000882:	4330      	orrs	r0, r6
 8000884:	bce0      	pop	{r5, r6, r7}
 8000886:	46ba      	mov	sl, r7
 8000888:	46b1      	mov	r9, r6
 800088a:	46a8      	mov	r8, r5
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	4643      	mov	r3, r8
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <__aeabi_fdiv+0x158>
 8000894:	2202      	movs	r2, #2
 8000896:	3fff      	subs	r7, #255	; 0xff
 8000898:	e003      	b.n	80008a2 <__aeabi_fdiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12d      	bne.n	80008fc <__aeabi_fdiv+0x140>
 80008a0:	2201      	movs	r2, #1
 80008a2:	0031      	movs	r1, r6
 80008a4:	464b      	mov	r3, r9
 80008a6:	4061      	eors	r1, r4
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4313      	orrs	r3, r2
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d838      	bhi.n	8000922 <__aeabi_fdiv+0x166>
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <__aeabi_fdiv+0x230>)
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	58c3      	ldr	r3, [r0, r3]
 80008b6:	469f      	mov	pc, r3
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d113      	bne.n	80008e4 <__aeabi_fdiv+0x128>
 80008bc:	2304      	movs	r3, #4
 80008be:	4699      	mov	r9, r3
 80008c0:	3b03      	subs	r3, #3
 80008c2:	2700      	movs	r7, #0
 80008c4:	469a      	mov	sl, r3
 80008c6:	e792      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d105      	bne.n	80008d8 <__aeabi_fdiv+0x11c>
 80008cc:	2308      	movs	r3, #8
 80008ce:	4699      	mov	r9, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	27ff      	movs	r7, #255	; 0xff
 80008d4:	469a      	mov	sl, r3
 80008d6:	e78a      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008d8:	230c      	movs	r3, #12
 80008da:	4699      	mov	r9, r3
 80008dc:	3b09      	subs	r3, #9
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e784      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008e4:	0028      	movs	r0, r5
 80008e6:	f002 f981 	bl	8002bec <__clzsi2>
 80008ea:	2776      	movs	r7, #118	; 0x76
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409d      	lsls	r5, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	427f      	negs	r7, r7
 80008f4:	4699      	mov	r9, r3
 80008f6:	469a      	mov	sl, r3
 80008f8:	1a3f      	subs	r7, r7, r0
 80008fa:	e778      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008fc:	4640      	mov	r0, r8
 80008fe:	f002 f975 	bl	8002bec <__clzsi2>
 8000902:	4642      	mov	r2, r8
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409a      	lsls	r2, r3
 8000908:	2376      	movs	r3, #118	; 0x76
 800090a:	425b      	negs	r3, r3
 800090c:	4690      	mov	r8, r2
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	2200      	movs	r2, #0
 8000912:	e77e      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000914:	2303      	movs	r3, #3
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	33fc      	adds	r3, #252	; 0xfc
 800091e:	2203      	movs	r2, #3
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000922:	000e      	movs	r6, r1
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2200      	movs	r2, #0
 8000928:	e7a8      	b.n	800087c <__aeabi_fdiv+0xc0>
 800092a:	2201      	movs	r2, #1
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dca2      	bgt.n	8000878 <__aeabi_fdiv+0xbc>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	002a      	movs	r2, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40da      	lsrs	r2, r3
 800093a:	1e6b      	subs	r3, r5, #1
 800093c:	419d      	sbcs	r5, r3
 800093e:	4315      	orrs	r5, r2
 8000940:	076a      	lsls	r2, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x192>
 8000944:	220f      	movs	r2, #15
 8000946:	402a      	ands	r2, r5
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x192>
 800094c:	3504      	adds	r5, #4
 800094e:	016a      	lsls	r2, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x220>
 8000952:	2001      	movs	r0, #1
 8000954:	2200      	movs	r2, #0
 8000956:	e791      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2200      	movs	r2, #0
 800095c:	e78e      	b.n	800087c <__aeabi_fdiv+0xc0>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	e789      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4215      	tst	r5, r2
 8000972:	d008      	beq.n	8000986 <__aeabi_fdiv+0x1ca>
 8000974:	4643      	mov	r3, r8
 8000976:	4213      	tst	r3, r2
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0x1ca>
 800097a:	431a      	orrs	r2, r3
 800097c:	0252      	lsls	r2, r2, #9
 800097e:	0026      	movs	r6, r4
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	0a52      	lsrs	r2, r2, #9
 8000984:	e77a      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	03d2      	lsls	r2, r2, #15
 800098a:	432a      	orrs	r2, r5
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	0a52      	lsrs	r2, r2, #9
 8000992:	e773      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000994:	4642      	mov	r2, r8
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	0155      	lsls	r5, r2, #5
 800099a:	42ab      	cmp	r3, r5
 800099c:	d21a      	bcs.n	80009d4 <__aeabi_fdiv+0x218>
 800099e:	201b      	movs	r0, #27
 80009a0:	2200      	movs	r2, #0
 80009a2:	3f01      	subs	r7, #1
 80009a4:	2601      	movs	r6, #1
 80009a6:	001c      	movs	r4, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	db01      	blt.n	80009b4 <__aeabi_fdiv+0x1f8>
 80009b0:	429d      	cmp	r5, r3
 80009b2:	d801      	bhi.n	80009b8 <__aeabi_fdiv+0x1fc>
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	4332      	orrs	r2, r6
 80009b8:	3801      	subs	r0, #1
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1f3      	bne.n	80009a6 <__aeabi_fdiv+0x1ea>
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	4183      	sbcs	r3, r0
 80009c2:	4313      	orrs	r3, r2
 80009c4:	001d      	movs	r5, r3
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	000e      	movs	r6, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x216>
 80009d0:	e73d      	b.n	800084e <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x16e>
 80009d4:	201a      	movs	r0, #26
 80009d6:	2201      	movs	r2, #1
 80009d8:	1b5b      	subs	r3, r3, r5
 80009da:	e7e3      	b.n	80009a4 <__aeabi_fdiv+0x1e8>
 80009dc:	01aa      	lsls	r2, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	e74b      	b.n	800087c <__aeabi_fdiv+0xc0>
 80009e4:	0800acb4 	.word	0x0800acb4
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	0800acf4 	.word	0x0800acf4

080009f0 <__aeabi_fmul>:
 80009f0:	0243      	lsls	r3, r0, #9
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464f      	mov	r7, r9
 80009f8:	4646      	mov	r6, r8
 80009fa:	4699      	mov	r9, r3
 80009fc:	46d6      	mov	lr, sl
 80009fe:	0fc3      	lsrs	r3, r0, #31
 8000a00:	0045      	lsls	r5, r0, #1
 8000a02:	4698      	mov	r8, r3
 8000a04:	b5c0      	push	{r6, r7, lr}
 8000a06:	464b      	mov	r3, r9
 8000a08:	1c0f      	adds	r7, r1, #0
 8000a0a:	0e2d      	lsrs	r5, r5, #24
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fmul+0x20>
 8000a0e:	e0cb      	b.n	8000ba8 <__aeabi_fmul+0x1b8>
 8000a10:	2dff      	cmp	r5, #255	; 0xff
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fmul+0x26>
 8000a14:	e0cf      	b.n	8000bb6 <__aeabi_fmul+0x1c6>
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	04d2      	lsls	r2, r2, #19
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	2300      	movs	r3, #0
 8000a20:	4691      	mov	r9, r2
 8000a22:	2600      	movs	r6, #0
 8000a24:	469a      	mov	sl, r3
 8000a26:	3d7f      	subs	r5, #127	; 0x7f
 8000a28:	027c      	lsls	r4, r7, #9
 8000a2a:	007b      	lsls	r3, r7, #1
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e1b      	lsrs	r3, r3, #24
 8000a30:	0fff      	lsrs	r7, r7, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fmul+0x48>
 8000a36:	e0a9      	b.n	8000b8c <__aeabi_fmul+0x19c>
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d011      	beq.n	8000a60 <__aeabi_fmul+0x70>
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	00e4      	lsls	r4, r4, #3
 8000a40:	04d2      	lsls	r2, r2, #19
 8000a42:	4314      	orrs	r4, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	3b7f      	subs	r3, #127	; 0x7f
 8000a48:	195b      	adds	r3, r3, r5
 8000a4a:	407a      	eors	r2, r7
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	1c5d      	adds	r5, r3, #1
 8000a52:	2e0a      	cmp	r6, #10
 8000a54:	dd13      	ble.n	8000a7e <__aeabi_fmul+0x8e>
 8000a56:	003a      	movs	r2, r7
 8000a58:	2e0b      	cmp	r6, #11
 8000a5a:	d047      	beq.n	8000aec <__aeabi_fmul+0xfc>
 8000a5c:	4647      	mov	r7, r8
 8000a5e:	e03f      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000a60:	002b      	movs	r3, r5
 8000a62:	33ff      	adds	r3, #255	; 0xff
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d11e      	bne.n	8000aa6 <__aeabi_fmul+0xb6>
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4316      	orrs	r6, r2
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	3501      	adds	r5, #1
 8000a70:	407a      	eors	r2, r7
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	35ff      	adds	r5, #255	; 0xff
 8000a76:	2e0a      	cmp	r6, #10
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_fmul+0x8c>
 8000a7a:	e0e4      	b.n	8000c46 <__aeabi_fmul+0x256>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	2e02      	cmp	r6, #2
 8000a80:	dc1c      	bgt.n	8000abc <__aeabi_fmul+0xcc>
 8000a82:	3e01      	subs	r6, #1
 8000a84:	2e01      	cmp	r6, #1
 8000a86:	d842      	bhi.n	8000b0e <__aeabi_fmul+0x11e>
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d03d      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000a8c:	2801      	cmp	r0, #1
 8000a8e:	d166      	bne.n	8000b5e <__aeabi_fmul+0x16e>
 8000a90:	2000      	movs	r0, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	05c0      	lsls	r0, r0, #23
 8000a96:	4308      	orrs	r0, r1
 8000a98:	07d2      	lsls	r2, r2, #31
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	bce0      	pop	{r5, r6, r7}
 8000a9e:	46ba      	mov	sl, r7
 8000aa0:	46b1      	mov	r9, r6
 8000aa2:	46a8      	mov	r8, r5
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	4316      	orrs	r6, r2
 8000aaa:	4642      	mov	r2, r8
 8000aac:	3501      	adds	r5, #1
 8000aae:	407a      	eors	r2, r7
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	35ff      	adds	r5, #255	; 0xff
 8000ab4:	2e0a      	cmp	r6, #10
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_fmul+0xca>
 8000ab8:	e0e4      	b.n	8000c84 <__aeabi_fmul+0x294>
 8000aba:	2003      	movs	r0, #3
 8000abc:	2101      	movs	r1, #1
 8000abe:	40b1      	lsls	r1, r6
 8000ac0:	26a6      	movs	r6, #166	; 0xa6
 8000ac2:	00f6      	lsls	r6, r6, #3
 8000ac4:	4231      	tst	r1, r6
 8000ac6:	d10a      	bne.n	8000ade <__aeabi_fmul+0xee>
 8000ac8:	2690      	movs	r6, #144	; 0x90
 8000aca:	00b6      	lsls	r6, r6, #2
 8000acc:	4231      	tst	r1, r6
 8000ace:	d116      	bne.n	8000afe <__aeabi_fmul+0x10e>
 8000ad0:	3eb9      	subs	r6, #185	; 0xb9
 8000ad2:	3eff      	subs	r6, #255	; 0xff
 8000ad4:	420e      	tst	r6, r1
 8000ad6:	d01a      	beq.n	8000b0e <__aeabi_fmul+0x11e>
 8000ad8:	46a1      	mov	r9, r4
 8000ada:	4682      	mov	sl, r0
 8000adc:	e000      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000ade:	0017      	movs	r7, r2
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d00f      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	4650      	mov	r0, sl
 8000aec:	2803      	cmp	r0, #3
 8000aee:	d1cd      	bne.n	8000a8c <__aeabi_fmul+0x9c>
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	03c9      	lsls	r1, r1, #15
 8000af4:	4321      	orrs	r1, r4
 8000af6:	0249      	lsls	r1, r1, #9
 8000af8:	20ff      	movs	r0, #255	; 0xff
 8000afa:	0a49      	lsrs	r1, r1, #9
 8000afc:	e7ca      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	2200      	movs	r2, #0
 8000b02:	20ff      	movs	r0, #255	; 0xff
 8000b04:	03c9      	lsls	r1, r1, #15
 8000b06:	e7c5      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b08:	20ff      	movs	r0, #255	; 0xff
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e7c2      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b0e:	0c20      	lsrs	r0, r4, #16
 8000b10:	4649      	mov	r1, r9
 8000b12:	0424      	lsls	r4, r4, #16
 8000b14:	0c24      	lsrs	r4, r4, #16
 8000b16:	0027      	movs	r7, r4
 8000b18:	0c0e      	lsrs	r6, r1, #16
 8000b1a:	0409      	lsls	r1, r1, #16
 8000b1c:	0c09      	lsrs	r1, r1, #16
 8000b1e:	4374      	muls	r4, r6
 8000b20:	434f      	muls	r7, r1
 8000b22:	4346      	muls	r6, r0
 8000b24:	4348      	muls	r0, r1
 8000b26:	0c39      	lsrs	r1, r7, #16
 8000b28:	1900      	adds	r0, r0, r4
 8000b2a:	1809      	adds	r1, r1, r0
 8000b2c:	428c      	cmp	r4, r1
 8000b2e:	d903      	bls.n	8000b38 <__aeabi_fmul+0x148>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	0240      	lsls	r0, r0, #9
 8000b34:	4684      	mov	ip, r0
 8000b36:	4466      	add	r6, ip
 8000b38:	043f      	lsls	r7, r7, #16
 8000b3a:	0408      	lsls	r0, r1, #16
 8000b3c:	0c3f      	lsrs	r7, r7, #16
 8000b3e:	19c0      	adds	r0, r0, r7
 8000b40:	0184      	lsls	r4, r0, #6
 8000b42:	1e67      	subs	r7, r4, #1
 8000b44:	41bc      	sbcs	r4, r7
 8000b46:	0c09      	lsrs	r1, r1, #16
 8000b48:	0e80      	lsrs	r0, r0, #26
 8000b4a:	1989      	adds	r1, r1, r6
 8000b4c:	4304      	orrs	r4, r0
 8000b4e:	0189      	lsls	r1, r1, #6
 8000b50:	430c      	orrs	r4, r1
 8000b52:	0109      	lsls	r1, r1, #4
 8000b54:	d571      	bpl.n	8000c3a <__aeabi_fmul+0x24a>
 8000b56:	2301      	movs	r3, #1
 8000b58:	0861      	lsrs	r1, r4, #1
 8000b5a:	401c      	ands	r4, r3
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	002b      	movs	r3, r5
 8000b60:	337f      	adds	r3, #127	; 0x7f
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd51      	ble.n	8000c0a <__aeabi_fmul+0x21a>
 8000b66:	0761      	lsls	r1, r4, #29
 8000b68:	d004      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	4021      	ands	r1, r4
 8000b6e:	2904      	cmp	r1, #4
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b72:	3404      	adds	r4, #4
 8000b74:	0121      	lsls	r1, r4, #4
 8000b76:	d503      	bpl.n	8000b80 <__aeabi_fmul+0x190>
 8000b78:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <__aeabi_fmul+0x298>)
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	3380      	adds	r3, #128	; 0x80
 8000b80:	2bfe      	cmp	r3, #254	; 0xfe
 8000b82:	dcc1      	bgt.n	8000b08 <__aeabi_fmul+0x118>
 8000b84:	01a1      	lsls	r1, r4, #6
 8000b86:	0a49      	lsrs	r1, r1, #9
 8000b88:	b2d8      	uxtb	r0, r3
 8000b8a:	e783      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d12c      	bne.n	8000bea <__aeabi_fmul+0x1fa>
 8000b90:	2301      	movs	r3, #1
 8000b92:	4642      	mov	r2, r8
 8000b94:	431e      	orrs	r6, r3
 8000b96:	002b      	movs	r3, r5
 8000b98:	407a      	eors	r2, r7
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	1c5d      	adds	r5, r3, #1
 8000ba0:	2e0a      	cmp	r6, #10
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_fmul+0x1b6>
 8000ba4:	e757      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000ba6:	e76a      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d110      	bne.n	8000bce <__aeabi_fmul+0x1de>
 8000bac:	2301      	movs	r3, #1
 8000bae:	2604      	movs	r6, #4
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	e738      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d104      	bne.n	8000bc4 <__aeabi_fmul+0x1d4>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2608      	movs	r6, #8
 8000bbe:	25ff      	movs	r5, #255	; 0xff
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	e731      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	260c      	movs	r6, #12
 8000bc8:	25ff      	movs	r5, #255	; 0xff
 8000bca:	469a      	mov	sl, r3
 8000bcc:	e72c      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bce:	4648      	mov	r0, r9
 8000bd0:	f002 f80c 	bl	8002bec <__clzsi2>
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1f43      	subs	r3, r0, #5
 8000bd8:	2576      	movs	r5, #118	; 0x76
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	426d      	negs	r5, r5
 8000be0:	4691      	mov	r9, r2
 8000be2:	2600      	movs	r6, #0
 8000be4:	469a      	mov	sl, r3
 8000be6:	1a2d      	subs	r5, r5, r0
 8000be8:	e71e      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bea:	0020      	movs	r0, r4
 8000bec:	f001 fffe 	bl	8002bec <__clzsi2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	1f43      	subs	r3, r0, #5
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	1a2b      	subs	r3, r5, r0
 8000bf8:	3b76      	subs	r3, #118	; 0x76
 8000bfa:	407a      	eors	r2, r7
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	1c5d      	adds	r5, r3, #1
 8000c02:	2e0a      	cmp	r6, #10
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x218>
 8000c06:	e726      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000c08:	e739      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	1acb      	subs	r3, r1, r3
 8000c0e:	2b1b      	cmp	r3, #27
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_fmul+0x224>
 8000c12:	e73d      	b.n	8000a90 <__aeabi_fmul+0xa0>
 8000c14:	359e      	adds	r5, #158	; 0x9e
 8000c16:	0021      	movs	r1, r4
 8000c18:	40ac      	lsls	r4, r5
 8000c1a:	40d9      	lsrs	r1, r3
 8000c1c:	1e63      	subs	r3, r4, #1
 8000c1e:	419c      	sbcs	r4, r3
 8000c20:	4321      	orrs	r1, r4
 8000c22:	074b      	lsls	r3, r1, #29
 8000c24:	d004      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c26:	230f      	movs	r3, #15
 8000c28:	400b      	ands	r3, r1
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c2e:	3104      	adds	r1, #4
 8000c30:	014b      	lsls	r3, r1, #5
 8000c32:	d504      	bpl.n	8000c3e <__aeabi_fmul+0x24e>
 8000c34:	2001      	movs	r0, #1
 8000c36:	2100      	movs	r1, #0
 8000c38:	e72c      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c3a:	001d      	movs	r5, r3
 8000c3c:	e78f      	b.n	8000b5e <__aeabi_fmul+0x16e>
 8000c3e:	0189      	lsls	r1, r1, #6
 8000c40:	2000      	movs	r0, #0
 8000c42:	0a49      	lsrs	r1, r1, #9
 8000c44:	e726      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c46:	2302      	movs	r3, #2
 8000c48:	2e0f      	cmp	r6, #15
 8000c4a:	d10c      	bne.n	8000c66 <__aeabi_fmul+0x276>
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	464b      	mov	r3, r9
 8000c50:	03c9      	lsls	r1, r1, #15
 8000c52:	420b      	tst	r3, r1
 8000c54:	d00d      	beq.n	8000c72 <__aeabi_fmul+0x282>
 8000c56:	420c      	tst	r4, r1
 8000c58:	d10b      	bne.n	8000c72 <__aeabi_fmul+0x282>
 8000c5a:	4321      	orrs	r1, r4
 8000c5c:	0249      	lsls	r1, r1, #9
 8000c5e:	003a      	movs	r2, r7
 8000c60:	20ff      	movs	r0, #255	; 0xff
 8000c62:	0a49      	lsrs	r1, r1, #9
 8000c64:	e716      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c66:	2e0b      	cmp	r6, #11
 8000c68:	d000      	beq.n	8000c6c <__aeabi_fmul+0x27c>
 8000c6a:	e6f7      	b.n	8000a5c <__aeabi_fmul+0x6c>
 8000c6c:	46a1      	mov	r9, r4
 8000c6e:	469a      	mov	sl, r3
 8000c70:	e736      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	464b      	mov	r3, r9
 8000c76:	03c9      	lsls	r1, r1, #15
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	0249      	lsls	r1, r1, #9
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	0a49      	lsrs	r1, r1, #9
 8000c82:	e707      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e7df      	b.n	8000c48 <__aeabi_fmul+0x258>
 8000c88:	f7ffffff 	.word	0xf7ffffff

08000c8c <__aeabi_i2f>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	d013      	beq.n	8000cba <__aeabi_i2f+0x2e>
 8000c92:	17c3      	asrs	r3, r0, #31
 8000c94:	18c5      	adds	r5, r0, r3
 8000c96:	405d      	eors	r5, r3
 8000c98:	0fc4      	lsrs	r4, r0, #31
 8000c9a:	0028      	movs	r0, r5
 8000c9c:	f001 ffa6 	bl	8002bec <__clzsi2>
 8000ca0:	239e      	movs	r3, #158	; 0x9e
 8000ca2:	0001      	movs	r1, r0
 8000ca4:	1a1b      	subs	r3, r3, r0
 8000ca6:	2b96      	cmp	r3, #150	; 0x96
 8000ca8:	dc0f      	bgt.n	8000cca <__aeabi_i2f+0x3e>
 8000caa:	2808      	cmp	r0, #8
 8000cac:	d031      	beq.n	8000d12 <__aeabi_i2f+0x86>
 8000cae:	3908      	subs	r1, #8
 8000cb0:	408d      	lsls	r5, r1
 8000cb2:	026d      	lsls	r5, r5, #9
 8000cb4:	0a6d      	lsrs	r5, r5, #9
 8000cb6:	b2d8      	uxtb	r0, r3
 8000cb8:	e002      	b.n	8000cc0 <__aeabi_i2f+0x34>
 8000cba:	2400      	movs	r4, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	2500      	movs	r5, #0
 8000cc0:	05c0      	lsls	r0, r0, #23
 8000cc2:	4328      	orrs	r0, r5
 8000cc4:	07e4      	lsls	r4, r4, #31
 8000cc6:	4320      	orrs	r0, r4
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	2b99      	cmp	r3, #153	; 0x99
 8000ccc:	dd0c      	ble.n	8000ce8 <__aeabi_i2f+0x5c>
 8000cce:	2205      	movs	r2, #5
 8000cd0:	1a12      	subs	r2, r2, r0
 8000cd2:	0028      	movs	r0, r5
 8000cd4:	40d0      	lsrs	r0, r2
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	0008      	movs	r0, r1
 8000cda:	301b      	adds	r0, #27
 8000cdc:	4085      	lsls	r5, r0
 8000cde:	0028      	movs	r0, r5
 8000ce0:	1e45      	subs	r5, r0, #1
 8000ce2:	41a8      	sbcs	r0, r5
 8000ce4:	4302      	orrs	r2, r0
 8000ce6:	0015      	movs	r5, r2
 8000ce8:	2905      	cmp	r1, #5
 8000cea:	dc16      	bgt.n	8000d1a <__aeabi_i2f+0x8e>
 8000cec:	002a      	movs	r2, r5
 8000cee:	480f      	ldr	r0, [pc, #60]	; (8000d2c <__aeabi_i2f+0xa0>)
 8000cf0:	4002      	ands	r2, r0
 8000cf2:	076e      	lsls	r6, r5, #29
 8000cf4:	d009      	beq.n	8000d0a <__aeabi_i2f+0x7e>
 8000cf6:	260f      	movs	r6, #15
 8000cf8:	4035      	ands	r5, r6
 8000cfa:	2d04      	cmp	r5, #4
 8000cfc:	d005      	beq.n	8000d0a <__aeabi_i2f+0x7e>
 8000cfe:	3204      	adds	r2, #4
 8000d00:	0155      	lsls	r5, r2, #5
 8000d02:	d502      	bpl.n	8000d0a <__aeabi_i2f+0x7e>
 8000d04:	239f      	movs	r3, #159	; 0x9f
 8000d06:	4002      	ands	r2, r0
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	0192      	lsls	r2, r2, #6
 8000d0c:	0a55      	lsrs	r5, r2, #9
 8000d0e:	b2d8      	uxtb	r0, r3
 8000d10:	e7d6      	b.n	8000cc0 <__aeabi_i2f+0x34>
 8000d12:	026d      	lsls	r5, r5, #9
 8000d14:	2096      	movs	r0, #150	; 0x96
 8000d16:	0a6d      	lsrs	r5, r5, #9
 8000d18:	e7d2      	b.n	8000cc0 <__aeabi_i2f+0x34>
 8000d1a:	1f4a      	subs	r2, r1, #5
 8000d1c:	4095      	lsls	r5, r2
 8000d1e:	002a      	movs	r2, r5
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <__aeabi_i2f+0xa0>)
 8000d22:	4002      	ands	r2, r0
 8000d24:	076e      	lsls	r6, r5, #29
 8000d26:	d0f0      	beq.n	8000d0a <__aeabi_i2f+0x7e>
 8000d28:	e7e5      	b.n	8000cf6 <__aeabi_i2f+0x6a>
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	fbffffff 	.word	0xfbffffff

08000d30 <__aeabi_ui2f>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	1e04      	subs	r4, r0, #0
 8000d34:	d00e      	beq.n	8000d54 <__aeabi_ui2f+0x24>
 8000d36:	f001 ff59 	bl	8002bec <__clzsi2>
 8000d3a:	239e      	movs	r3, #158	; 0x9e
 8000d3c:	0001      	movs	r1, r0
 8000d3e:	1a1b      	subs	r3, r3, r0
 8000d40:	2b96      	cmp	r3, #150	; 0x96
 8000d42:	dc0c      	bgt.n	8000d5e <__aeabi_ui2f+0x2e>
 8000d44:	2808      	cmp	r0, #8
 8000d46:	d02c      	beq.n	8000da2 <__aeabi_ui2f+0x72>
 8000d48:	3908      	subs	r1, #8
 8000d4a:	408c      	lsls	r4, r1
 8000d4c:	0264      	lsls	r4, r4, #9
 8000d4e:	0a64      	lsrs	r4, r4, #9
 8000d50:	b2d8      	uxtb	r0, r3
 8000d52:	e001      	b.n	8000d58 <__aeabi_ui2f+0x28>
 8000d54:	2000      	movs	r0, #0
 8000d56:	2400      	movs	r4, #0
 8000d58:	05c0      	lsls	r0, r0, #23
 8000d5a:	4320      	orrs	r0, r4
 8000d5c:	bd70      	pop	{r4, r5, r6, pc}
 8000d5e:	2b99      	cmp	r3, #153	; 0x99
 8000d60:	dd0a      	ble.n	8000d78 <__aeabi_ui2f+0x48>
 8000d62:	0002      	movs	r2, r0
 8000d64:	0020      	movs	r0, r4
 8000d66:	321b      	adds	r2, #27
 8000d68:	4090      	lsls	r0, r2
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	1e50      	subs	r0, r2, #1
 8000d6e:	4182      	sbcs	r2, r0
 8000d70:	2005      	movs	r0, #5
 8000d72:	1a40      	subs	r0, r0, r1
 8000d74:	40c4      	lsrs	r4, r0
 8000d76:	4314      	orrs	r4, r2
 8000d78:	2905      	cmp	r1, #5
 8000d7a:	dc16      	bgt.n	8000daa <__aeabi_ui2f+0x7a>
 8000d7c:	0022      	movs	r2, r4
 8000d7e:	480f      	ldr	r0, [pc, #60]	; (8000dbc <__aeabi_ui2f+0x8c>)
 8000d80:	4002      	ands	r2, r0
 8000d82:	0765      	lsls	r5, r4, #29
 8000d84:	d009      	beq.n	8000d9a <__aeabi_ui2f+0x6a>
 8000d86:	250f      	movs	r5, #15
 8000d88:	402c      	ands	r4, r5
 8000d8a:	2c04      	cmp	r4, #4
 8000d8c:	d005      	beq.n	8000d9a <__aeabi_ui2f+0x6a>
 8000d8e:	3204      	adds	r2, #4
 8000d90:	0154      	lsls	r4, r2, #5
 8000d92:	d502      	bpl.n	8000d9a <__aeabi_ui2f+0x6a>
 8000d94:	239f      	movs	r3, #159	; 0x9f
 8000d96:	4002      	ands	r2, r0
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	0192      	lsls	r2, r2, #6
 8000d9c:	0a54      	lsrs	r4, r2, #9
 8000d9e:	b2d8      	uxtb	r0, r3
 8000da0:	e7da      	b.n	8000d58 <__aeabi_ui2f+0x28>
 8000da2:	0264      	lsls	r4, r4, #9
 8000da4:	2096      	movs	r0, #150	; 0x96
 8000da6:	0a64      	lsrs	r4, r4, #9
 8000da8:	e7d6      	b.n	8000d58 <__aeabi_ui2f+0x28>
 8000daa:	1f4a      	subs	r2, r1, #5
 8000dac:	4094      	lsls	r4, r2
 8000dae:	0022      	movs	r2, r4
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <__aeabi_ui2f+0x8c>)
 8000db2:	4002      	ands	r2, r0
 8000db4:	0765      	lsls	r5, r4, #29
 8000db6:	d0f0      	beq.n	8000d9a <__aeabi_ui2f+0x6a>
 8000db8:	e7e5      	b.n	8000d86 <__aeabi_ui2f+0x56>
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	fbffffff 	.word	0xfbffffff

08000dc0 <__aeabi_dadd>:
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	464f      	mov	r7, r9
 8000dc4:	4646      	mov	r6, r8
 8000dc6:	46d6      	mov	lr, sl
 8000dc8:	0004      	movs	r4, r0
 8000dca:	b5c0      	push	{r6, r7, lr}
 8000dcc:	001f      	movs	r7, r3
 8000dce:	030b      	lsls	r3, r1, #12
 8000dd0:	0010      	movs	r0, r2
 8000dd2:	004e      	lsls	r6, r1, #1
 8000dd4:	0a5b      	lsrs	r3, r3, #9
 8000dd6:	0fcd      	lsrs	r5, r1, #31
 8000dd8:	0f61      	lsrs	r1, r4, #29
 8000dda:	007a      	lsls	r2, r7, #1
 8000ddc:	4319      	orrs	r1, r3
 8000dde:	00e3      	lsls	r3, r4, #3
 8000de0:	033c      	lsls	r4, r7, #12
 8000de2:	0fff      	lsrs	r7, r7, #31
 8000de4:	46bc      	mov	ip, r7
 8000de6:	0a64      	lsrs	r4, r4, #9
 8000de8:	0f47      	lsrs	r7, r0, #29
 8000dea:	4327      	orrs	r7, r4
 8000dec:	0d76      	lsrs	r6, r6, #21
 8000dee:	0d52      	lsrs	r2, r2, #21
 8000df0:	00c0      	lsls	r0, r0, #3
 8000df2:	46b9      	mov	r9, r7
 8000df4:	4680      	mov	r8, r0
 8000df6:	1ab7      	subs	r7, r6, r2
 8000df8:	4565      	cmp	r5, ip
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dadd+0x3e>
 8000dfc:	e09b      	b.n	8000f36 <__aeabi_dadd+0x176>
 8000dfe:	2f00      	cmp	r7, #0
 8000e00:	dc00      	bgt.n	8000e04 <__aeabi_dadd+0x44>
 8000e02:	e084      	b.n	8000f0e <__aeabi_dadd+0x14e>
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dadd+0x4a>
 8000e08:	e0be      	b.n	8000f88 <__aeabi_dadd+0x1c8>
 8000e0a:	4ac8      	ldr	r2, [pc, #800]	; (800112c <__aeabi_dadd+0x36c>)
 8000e0c:	4296      	cmp	r6, r2
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_dadd+0x52>
 8000e10:	e124      	b.n	800105c <__aeabi_dadd+0x29c>
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	464c      	mov	r4, r9
 8000e16:	0412      	lsls	r2, r2, #16
 8000e18:	4314      	orrs	r4, r2
 8000e1a:	46a1      	mov	r9, r4
 8000e1c:	2f38      	cmp	r7, #56	; 0x38
 8000e1e:	dd00      	ble.n	8000e22 <__aeabi_dadd+0x62>
 8000e20:	e167      	b.n	80010f2 <__aeabi_dadd+0x332>
 8000e22:	2f1f      	cmp	r7, #31
 8000e24:	dd00      	ble.n	8000e28 <__aeabi_dadd+0x68>
 8000e26:	e1d6      	b.n	80011d6 <__aeabi_dadd+0x416>
 8000e28:	2220      	movs	r2, #32
 8000e2a:	464c      	mov	r4, r9
 8000e2c:	1bd2      	subs	r2, r2, r7
 8000e2e:	4094      	lsls	r4, r2
 8000e30:	46a2      	mov	sl, r4
 8000e32:	4644      	mov	r4, r8
 8000e34:	40fc      	lsrs	r4, r7
 8000e36:	0020      	movs	r0, r4
 8000e38:	4654      	mov	r4, sl
 8000e3a:	4304      	orrs	r4, r0
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	4090      	lsls	r0, r2
 8000e40:	1e42      	subs	r2, r0, #1
 8000e42:	4190      	sbcs	r0, r2
 8000e44:	464a      	mov	r2, r9
 8000e46:	40fa      	lsrs	r2, r7
 8000e48:	4304      	orrs	r4, r0
 8000e4a:	1a89      	subs	r1, r1, r2
 8000e4c:	1b1c      	subs	r4, r3, r4
 8000e4e:	42a3      	cmp	r3, r4
 8000e50:	4192      	sbcs	r2, r2
 8000e52:	4252      	negs	r2, r2
 8000e54:	1a8b      	subs	r3, r1, r2
 8000e56:	469a      	mov	sl, r3
 8000e58:	4653      	mov	r3, sl
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	d400      	bmi.n	8000e60 <__aeabi_dadd+0xa0>
 8000e5e:	e0d4      	b.n	800100a <__aeabi_dadd+0x24a>
 8000e60:	4653      	mov	r3, sl
 8000e62:	025a      	lsls	r2, r3, #9
 8000e64:	0a53      	lsrs	r3, r2, #9
 8000e66:	469a      	mov	sl, r3
 8000e68:	4653      	mov	r3, sl
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dadd+0xb0>
 8000e6e:	e104      	b.n	800107a <__aeabi_dadd+0x2ba>
 8000e70:	4650      	mov	r0, sl
 8000e72:	f001 febb 	bl	8002bec <__clzsi2>
 8000e76:	0003      	movs	r3, r0
 8000e78:	3b08      	subs	r3, #8
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	0020      	movs	r0, r4
 8000e7e:	1ad2      	subs	r2, r2, r3
 8000e80:	4651      	mov	r1, sl
 8000e82:	40d0      	lsrs	r0, r2
 8000e84:	4099      	lsls	r1, r3
 8000e86:	0002      	movs	r2, r0
 8000e88:	409c      	lsls	r4, r3
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	42b3      	cmp	r3, r6
 8000e8e:	da00      	bge.n	8000e92 <__aeabi_dadd+0xd2>
 8000e90:	e102      	b.n	8001098 <__aeabi_dadd+0x2d8>
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	1c59      	adds	r1, r3, #1
 8000e96:	291f      	cmp	r1, #31
 8000e98:	dd00      	ble.n	8000e9c <__aeabi_dadd+0xdc>
 8000e9a:	e0a7      	b.n	8000fec <__aeabi_dadd+0x22c>
 8000e9c:	2320      	movs	r3, #32
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	0026      	movs	r6, r4
 8000ea2:	1a5b      	subs	r3, r3, r1
 8000ea4:	409c      	lsls	r4, r3
 8000ea6:	4098      	lsls	r0, r3
 8000ea8:	40ce      	lsrs	r6, r1
 8000eaa:	40ca      	lsrs	r2, r1
 8000eac:	1e63      	subs	r3, r4, #1
 8000eae:	419c      	sbcs	r4, r3
 8000eb0:	4330      	orrs	r0, r6
 8000eb2:	4692      	mov	sl, r2
 8000eb4:	2600      	movs	r6, #0
 8000eb6:	4304      	orrs	r4, r0
 8000eb8:	0763      	lsls	r3, r4, #29
 8000eba:	d009      	beq.n	8000ed0 <__aeabi_dadd+0x110>
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	4023      	ands	r3, r4
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d005      	beq.n	8000ed0 <__aeabi_dadd+0x110>
 8000ec4:	1d23      	adds	r3, r4, #4
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	41a4      	sbcs	r4, r4
 8000eca:	4264      	negs	r4, r4
 8000ecc:	44a2      	add	sl, r4
 8000ece:	001c      	movs	r4, r3
 8000ed0:	4653      	mov	r3, sl
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	d400      	bmi.n	8000ed8 <__aeabi_dadd+0x118>
 8000ed6:	e09b      	b.n	8001010 <__aeabi_dadd+0x250>
 8000ed8:	4b94      	ldr	r3, [pc, #592]	; (800112c <__aeabi_dadd+0x36c>)
 8000eda:	3601      	adds	r6, #1
 8000edc:	429e      	cmp	r6, r3
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x122>
 8000ee0:	e0b8      	b.n	8001054 <__aeabi_dadd+0x294>
 8000ee2:	4653      	mov	r3, sl
 8000ee4:	4992      	ldr	r1, [pc, #584]	; (8001130 <__aeabi_dadd+0x370>)
 8000ee6:	08e4      	lsrs	r4, r4, #3
 8000ee8:	400b      	ands	r3, r1
 8000eea:	0019      	movs	r1, r3
 8000eec:	075b      	lsls	r3, r3, #29
 8000eee:	4323      	orrs	r3, r4
 8000ef0:	0572      	lsls	r2, r6, #21
 8000ef2:	024c      	lsls	r4, r1, #9
 8000ef4:	0b24      	lsrs	r4, r4, #12
 8000ef6:	0d52      	lsrs	r2, r2, #21
 8000ef8:	0512      	lsls	r2, r2, #20
 8000efa:	07ed      	lsls	r5, r5, #31
 8000efc:	4322      	orrs	r2, r4
 8000efe:	432a      	orrs	r2, r5
 8000f00:	0018      	movs	r0, r3
 8000f02:	0011      	movs	r1, r2
 8000f04:	bce0      	pop	{r5, r6, r7}
 8000f06:	46ba      	mov	sl, r7
 8000f08:	46b1      	mov	r9, r6
 8000f0a:	46a8      	mov	r8, r5
 8000f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0e:	2f00      	cmp	r7, #0
 8000f10:	d048      	beq.n	8000fa4 <__aeabi_dadd+0x1e4>
 8000f12:	1b97      	subs	r7, r2, r6
 8000f14:	2e00      	cmp	r6, #0
 8000f16:	d000      	beq.n	8000f1a <__aeabi_dadd+0x15a>
 8000f18:	e10e      	b.n	8001138 <__aeabi_dadd+0x378>
 8000f1a:	000c      	movs	r4, r1
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x162>
 8000f20:	e1b7      	b.n	8001292 <__aeabi_dadd+0x4d2>
 8000f22:	1e7c      	subs	r4, r7, #1
 8000f24:	2f01      	cmp	r7, #1
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x16a>
 8000f28:	e226      	b.n	8001378 <__aeabi_dadd+0x5b8>
 8000f2a:	4d80      	ldr	r5, [pc, #512]	; (800112c <__aeabi_dadd+0x36c>)
 8000f2c:	42af      	cmp	r7, r5
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_dadd+0x172>
 8000f30:	e1d5      	b.n	80012de <__aeabi_dadd+0x51e>
 8000f32:	0027      	movs	r7, r4
 8000f34:	e107      	b.n	8001146 <__aeabi_dadd+0x386>
 8000f36:	2f00      	cmp	r7, #0
 8000f38:	dc00      	bgt.n	8000f3c <__aeabi_dadd+0x17c>
 8000f3a:	e0b2      	b.n	80010a2 <__aeabi_dadd+0x2e2>
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d047      	beq.n	8000fd0 <__aeabi_dadd+0x210>
 8000f40:	4a7a      	ldr	r2, [pc, #488]	; (800112c <__aeabi_dadd+0x36c>)
 8000f42:	4296      	cmp	r6, r2
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x188>
 8000f46:	e089      	b.n	800105c <__aeabi_dadd+0x29c>
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	464c      	mov	r4, r9
 8000f4c:	0412      	lsls	r2, r2, #16
 8000f4e:	4314      	orrs	r4, r2
 8000f50:	46a1      	mov	r9, r4
 8000f52:	2f38      	cmp	r7, #56	; 0x38
 8000f54:	dc6b      	bgt.n	800102e <__aeabi_dadd+0x26e>
 8000f56:	2f1f      	cmp	r7, #31
 8000f58:	dc00      	bgt.n	8000f5c <__aeabi_dadd+0x19c>
 8000f5a:	e16e      	b.n	800123a <__aeabi_dadd+0x47a>
 8000f5c:	003a      	movs	r2, r7
 8000f5e:	4648      	mov	r0, r9
 8000f60:	3a20      	subs	r2, #32
 8000f62:	40d0      	lsrs	r0, r2
 8000f64:	4684      	mov	ip, r0
 8000f66:	2f20      	cmp	r7, #32
 8000f68:	d007      	beq.n	8000f7a <__aeabi_dadd+0x1ba>
 8000f6a:	2240      	movs	r2, #64	; 0x40
 8000f6c:	4648      	mov	r0, r9
 8000f6e:	1bd2      	subs	r2, r2, r7
 8000f70:	4090      	lsls	r0, r2
 8000f72:	0002      	movs	r2, r0
 8000f74:	4640      	mov	r0, r8
 8000f76:	4310      	orrs	r0, r2
 8000f78:	4680      	mov	r8, r0
 8000f7a:	4640      	mov	r0, r8
 8000f7c:	1e42      	subs	r2, r0, #1
 8000f7e:	4190      	sbcs	r0, r2
 8000f80:	4662      	mov	r2, ip
 8000f82:	0004      	movs	r4, r0
 8000f84:	4314      	orrs	r4, r2
 8000f86:	e057      	b.n	8001038 <__aeabi_dadd+0x278>
 8000f88:	464a      	mov	r2, r9
 8000f8a:	4302      	orrs	r2, r0
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dadd+0x1d0>
 8000f8e:	e103      	b.n	8001198 <__aeabi_dadd+0x3d8>
 8000f90:	1e7a      	subs	r2, r7, #1
 8000f92:	2f01      	cmp	r7, #1
 8000f94:	d100      	bne.n	8000f98 <__aeabi_dadd+0x1d8>
 8000f96:	e193      	b.n	80012c0 <__aeabi_dadd+0x500>
 8000f98:	4c64      	ldr	r4, [pc, #400]	; (800112c <__aeabi_dadd+0x36c>)
 8000f9a:	42a7      	cmp	r7, r4
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dadd+0x1e0>
 8000f9e:	e18a      	b.n	80012b6 <__aeabi_dadd+0x4f6>
 8000fa0:	0017      	movs	r7, r2
 8000fa2:	e73b      	b.n	8000e1c <__aeabi_dadd+0x5c>
 8000fa4:	4c63      	ldr	r4, [pc, #396]	; (8001134 <__aeabi_dadd+0x374>)
 8000fa6:	1c72      	adds	r2, r6, #1
 8000fa8:	4222      	tst	r2, r4
 8000faa:	d000      	beq.n	8000fae <__aeabi_dadd+0x1ee>
 8000fac:	e0e0      	b.n	8001170 <__aeabi_dadd+0x3b0>
 8000fae:	000a      	movs	r2, r1
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	2e00      	cmp	r6, #0
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_dadd+0x1f8>
 8000fb6:	e174      	b.n	80012a2 <__aeabi_dadd+0x4e2>
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_dadd+0x1fe>
 8000fbc:	e1d0      	b.n	8001360 <__aeabi_dadd+0x5a0>
 8000fbe:	464a      	mov	r2, r9
 8000fc0:	4302      	orrs	r2, r0
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_dadd+0x206>
 8000fc4:	e1e3      	b.n	800138e <__aeabi_dadd+0x5ce>
 8000fc6:	074a      	lsls	r2, r1, #29
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	08c9      	lsrs	r1, r1, #3
 8000fce:	e029      	b.n	8001024 <__aeabi_dadd+0x264>
 8000fd0:	464a      	mov	r2, r9
 8000fd2:	4302      	orrs	r2, r0
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_dadd+0x218>
 8000fd6:	e17d      	b.n	80012d4 <__aeabi_dadd+0x514>
 8000fd8:	1e7a      	subs	r2, r7, #1
 8000fda:	2f01      	cmp	r7, #1
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dadd+0x220>
 8000fde:	e0e0      	b.n	80011a2 <__aeabi_dadd+0x3e2>
 8000fe0:	4c52      	ldr	r4, [pc, #328]	; (800112c <__aeabi_dadd+0x36c>)
 8000fe2:	42a7      	cmp	r7, r4
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x228>
 8000fe6:	e166      	b.n	80012b6 <__aeabi_dadd+0x4f6>
 8000fe8:	0017      	movs	r7, r2
 8000fea:	e7b2      	b.n	8000f52 <__aeabi_dadd+0x192>
 8000fec:	0010      	movs	r0, r2
 8000fee:	3b1f      	subs	r3, #31
 8000ff0:	40d8      	lsrs	r0, r3
 8000ff2:	2920      	cmp	r1, #32
 8000ff4:	d003      	beq.n	8000ffe <__aeabi_dadd+0x23e>
 8000ff6:	2340      	movs	r3, #64	; 0x40
 8000ff8:	1a5b      	subs	r3, r3, r1
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	4314      	orrs	r4, r2
 8000ffe:	1e63      	subs	r3, r4, #1
 8001000:	419c      	sbcs	r4, r3
 8001002:	2300      	movs	r3, #0
 8001004:	2600      	movs	r6, #0
 8001006:	469a      	mov	sl, r3
 8001008:	4304      	orrs	r4, r0
 800100a:	0763      	lsls	r3, r4, #29
 800100c:	d000      	beq.n	8001010 <__aeabi_dadd+0x250>
 800100e:	e755      	b.n	8000ebc <__aeabi_dadd+0xfc>
 8001010:	4652      	mov	r2, sl
 8001012:	08e3      	lsrs	r3, r4, #3
 8001014:	0752      	lsls	r2, r2, #29
 8001016:	4313      	orrs	r3, r2
 8001018:	4652      	mov	r2, sl
 800101a:	0037      	movs	r7, r6
 800101c:	08d1      	lsrs	r1, r2, #3
 800101e:	4a43      	ldr	r2, [pc, #268]	; (800112c <__aeabi_dadd+0x36c>)
 8001020:	4297      	cmp	r7, r2
 8001022:	d01f      	beq.n	8001064 <__aeabi_dadd+0x2a4>
 8001024:	0309      	lsls	r1, r1, #12
 8001026:	057a      	lsls	r2, r7, #21
 8001028:	0b0c      	lsrs	r4, r1, #12
 800102a:	0d52      	lsrs	r2, r2, #21
 800102c:	e764      	b.n	8000ef8 <__aeabi_dadd+0x138>
 800102e:	4642      	mov	r2, r8
 8001030:	464c      	mov	r4, r9
 8001032:	4314      	orrs	r4, r2
 8001034:	1e62      	subs	r2, r4, #1
 8001036:	4194      	sbcs	r4, r2
 8001038:	18e4      	adds	r4, r4, r3
 800103a:	429c      	cmp	r4, r3
 800103c:	4192      	sbcs	r2, r2
 800103e:	4252      	negs	r2, r2
 8001040:	4692      	mov	sl, r2
 8001042:	448a      	add	sl, r1
 8001044:	4653      	mov	r3, sl
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	d5df      	bpl.n	800100a <__aeabi_dadd+0x24a>
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <__aeabi_dadd+0x36c>)
 800104c:	3601      	adds	r6, #1
 800104e:	429e      	cmp	r6, r3
 8001050:	d000      	beq.n	8001054 <__aeabi_dadd+0x294>
 8001052:	e0b3      	b.n	80011bc <__aeabi_dadd+0x3fc>
 8001054:	0032      	movs	r2, r6
 8001056:	2400      	movs	r4, #0
 8001058:	2300      	movs	r3, #0
 800105a:	e74d      	b.n	8000ef8 <__aeabi_dadd+0x138>
 800105c:	074a      	lsls	r2, r1, #29
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	4313      	orrs	r3, r2
 8001062:	08c9      	lsrs	r1, r1, #3
 8001064:	001a      	movs	r2, r3
 8001066:	430a      	orrs	r2, r1
 8001068:	d100      	bne.n	800106c <__aeabi_dadd+0x2ac>
 800106a:	e200      	b.n	800146e <__aeabi_dadd+0x6ae>
 800106c:	2480      	movs	r4, #128	; 0x80
 800106e:	0324      	lsls	r4, r4, #12
 8001070:	430c      	orrs	r4, r1
 8001072:	0324      	lsls	r4, r4, #12
 8001074:	4a2d      	ldr	r2, [pc, #180]	; (800112c <__aeabi_dadd+0x36c>)
 8001076:	0b24      	lsrs	r4, r4, #12
 8001078:	e73e      	b.n	8000ef8 <__aeabi_dadd+0x138>
 800107a:	0020      	movs	r0, r4
 800107c:	f001 fdb6 	bl	8002bec <__clzsi2>
 8001080:	0003      	movs	r3, r0
 8001082:	3318      	adds	r3, #24
 8001084:	2b1f      	cmp	r3, #31
 8001086:	dc00      	bgt.n	800108a <__aeabi_dadd+0x2ca>
 8001088:	e6f7      	b.n	8000e7a <__aeabi_dadd+0xba>
 800108a:	0022      	movs	r2, r4
 800108c:	3808      	subs	r0, #8
 800108e:	4082      	lsls	r2, r0
 8001090:	2400      	movs	r4, #0
 8001092:	42b3      	cmp	r3, r6
 8001094:	db00      	blt.n	8001098 <__aeabi_dadd+0x2d8>
 8001096:	e6fc      	b.n	8000e92 <__aeabi_dadd+0xd2>
 8001098:	1af6      	subs	r6, r6, r3
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <__aeabi_dadd+0x370>)
 800109c:	401a      	ands	r2, r3
 800109e:	4692      	mov	sl, r2
 80010a0:	e70a      	b.n	8000eb8 <__aeabi_dadd+0xf8>
 80010a2:	2f00      	cmp	r7, #0
 80010a4:	d02b      	beq.n	80010fe <__aeabi_dadd+0x33e>
 80010a6:	1b97      	subs	r7, r2, r6
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x2ee>
 80010ac:	e0b8      	b.n	8001220 <__aeabi_dadd+0x460>
 80010ae:	4c1f      	ldr	r4, [pc, #124]	; (800112c <__aeabi_dadd+0x36c>)
 80010b0:	42a2      	cmp	r2, r4
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dadd+0x2f6>
 80010b4:	e11c      	b.n	80012f0 <__aeabi_dadd+0x530>
 80010b6:	2480      	movs	r4, #128	; 0x80
 80010b8:	0424      	lsls	r4, r4, #16
 80010ba:	4321      	orrs	r1, r4
 80010bc:	2f38      	cmp	r7, #56	; 0x38
 80010be:	dd00      	ble.n	80010c2 <__aeabi_dadd+0x302>
 80010c0:	e11e      	b.n	8001300 <__aeabi_dadd+0x540>
 80010c2:	2f1f      	cmp	r7, #31
 80010c4:	dd00      	ble.n	80010c8 <__aeabi_dadd+0x308>
 80010c6:	e19e      	b.n	8001406 <__aeabi_dadd+0x646>
 80010c8:	2620      	movs	r6, #32
 80010ca:	000c      	movs	r4, r1
 80010cc:	1bf6      	subs	r6, r6, r7
 80010ce:	0018      	movs	r0, r3
 80010d0:	40b3      	lsls	r3, r6
 80010d2:	40b4      	lsls	r4, r6
 80010d4:	40f8      	lsrs	r0, r7
 80010d6:	1e5e      	subs	r6, r3, #1
 80010d8:	41b3      	sbcs	r3, r6
 80010da:	40f9      	lsrs	r1, r7
 80010dc:	4304      	orrs	r4, r0
 80010de:	431c      	orrs	r4, r3
 80010e0:	4489      	add	r9, r1
 80010e2:	4444      	add	r4, r8
 80010e4:	4544      	cmp	r4, r8
 80010e6:	419b      	sbcs	r3, r3
 80010e8:	425b      	negs	r3, r3
 80010ea:	444b      	add	r3, r9
 80010ec:	469a      	mov	sl, r3
 80010ee:	0016      	movs	r6, r2
 80010f0:	e7a8      	b.n	8001044 <__aeabi_dadd+0x284>
 80010f2:	4642      	mov	r2, r8
 80010f4:	464c      	mov	r4, r9
 80010f6:	4314      	orrs	r4, r2
 80010f8:	1e62      	subs	r2, r4, #1
 80010fa:	4194      	sbcs	r4, r2
 80010fc:	e6a6      	b.n	8000e4c <__aeabi_dadd+0x8c>
 80010fe:	4c0d      	ldr	r4, [pc, #52]	; (8001134 <__aeabi_dadd+0x374>)
 8001100:	1c72      	adds	r2, r6, #1
 8001102:	4222      	tst	r2, r4
 8001104:	d000      	beq.n	8001108 <__aeabi_dadd+0x348>
 8001106:	e0a8      	b.n	800125a <__aeabi_dadd+0x49a>
 8001108:	000a      	movs	r2, r1
 800110a:	431a      	orrs	r2, r3
 800110c:	2e00      	cmp	r6, #0
 800110e:	d000      	beq.n	8001112 <__aeabi_dadd+0x352>
 8001110:	e10a      	b.n	8001328 <__aeabi_dadd+0x568>
 8001112:	2a00      	cmp	r2, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x358>
 8001116:	e15e      	b.n	80013d6 <__aeabi_dadd+0x616>
 8001118:	464a      	mov	r2, r9
 800111a:	4302      	orrs	r2, r0
 800111c:	d000      	beq.n	8001120 <__aeabi_dadd+0x360>
 800111e:	e161      	b.n	80013e4 <__aeabi_dadd+0x624>
 8001120:	074a      	lsls	r2, r1, #29
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	4313      	orrs	r3, r2
 8001126:	08c9      	lsrs	r1, r1, #3
 8001128:	e77c      	b.n	8001024 <__aeabi_dadd+0x264>
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	000007ff 	.word	0x000007ff
 8001130:	ff7fffff 	.word	0xff7fffff
 8001134:	000007fe 	.word	0x000007fe
 8001138:	4ccf      	ldr	r4, [pc, #828]	; (8001478 <__aeabi_dadd+0x6b8>)
 800113a:	42a2      	cmp	r2, r4
 800113c:	d100      	bne.n	8001140 <__aeabi_dadd+0x380>
 800113e:	e0ce      	b.n	80012de <__aeabi_dadd+0x51e>
 8001140:	2480      	movs	r4, #128	; 0x80
 8001142:	0424      	lsls	r4, r4, #16
 8001144:	4321      	orrs	r1, r4
 8001146:	2f38      	cmp	r7, #56	; 0x38
 8001148:	dc5b      	bgt.n	8001202 <__aeabi_dadd+0x442>
 800114a:	2f1f      	cmp	r7, #31
 800114c:	dd00      	ble.n	8001150 <__aeabi_dadd+0x390>
 800114e:	e0dc      	b.n	800130a <__aeabi_dadd+0x54a>
 8001150:	2520      	movs	r5, #32
 8001152:	000c      	movs	r4, r1
 8001154:	1bed      	subs	r5, r5, r7
 8001156:	001e      	movs	r6, r3
 8001158:	40ab      	lsls	r3, r5
 800115a:	40ac      	lsls	r4, r5
 800115c:	40fe      	lsrs	r6, r7
 800115e:	1e5d      	subs	r5, r3, #1
 8001160:	41ab      	sbcs	r3, r5
 8001162:	4334      	orrs	r4, r6
 8001164:	40f9      	lsrs	r1, r7
 8001166:	431c      	orrs	r4, r3
 8001168:	464b      	mov	r3, r9
 800116a:	1a5b      	subs	r3, r3, r1
 800116c:	4699      	mov	r9, r3
 800116e:	e04c      	b.n	800120a <__aeabi_dadd+0x44a>
 8001170:	464a      	mov	r2, r9
 8001172:	1a1c      	subs	r4, r3, r0
 8001174:	1a88      	subs	r0, r1, r2
 8001176:	42a3      	cmp	r3, r4
 8001178:	4192      	sbcs	r2, r2
 800117a:	4252      	negs	r2, r2
 800117c:	4692      	mov	sl, r2
 800117e:	0002      	movs	r2, r0
 8001180:	4650      	mov	r0, sl
 8001182:	1a12      	subs	r2, r2, r0
 8001184:	4692      	mov	sl, r2
 8001186:	0212      	lsls	r2, r2, #8
 8001188:	d478      	bmi.n	800127c <__aeabi_dadd+0x4bc>
 800118a:	4653      	mov	r3, sl
 800118c:	4323      	orrs	r3, r4
 800118e:	d000      	beq.n	8001192 <__aeabi_dadd+0x3d2>
 8001190:	e66a      	b.n	8000e68 <__aeabi_dadd+0xa8>
 8001192:	2100      	movs	r1, #0
 8001194:	2500      	movs	r5, #0
 8001196:	e745      	b.n	8001024 <__aeabi_dadd+0x264>
 8001198:	074a      	lsls	r2, r1, #29
 800119a:	08db      	lsrs	r3, r3, #3
 800119c:	4313      	orrs	r3, r2
 800119e:	08c9      	lsrs	r1, r1, #3
 80011a0:	e73d      	b.n	800101e <__aeabi_dadd+0x25e>
 80011a2:	181c      	adds	r4, r3, r0
 80011a4:	429c      	cmp	r4, r3
 80011a6:	419b      	sbcs	r3, r3
 80011a8:	4449      	add	r1, r9
 80011aa:	468a      	mov	sl, r1
 80011ac:	425b      	negs	r3, r3
 80011ae:	449a      	add	sl, r3
 80011b0:	4653      	mov	r3, sl
 80011b2:	2601      	movs	r6, #1
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	d400      	bmi.n	80011ba <__aeabi_dadd+0x3fa>
 80011b8:	e727      	b.n	800100a <__aeabi_dadd+0x24a>
 80011ba:	2602      	movs	r6, #2
 80011bc:	4652      	mov	r2, sl
 80011be:	4baf      	ldr	r3, [pc, #700]	; (800147c <__aeabi_dadd+0x6bc>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	401a      	ands	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	4021      	ands	r1, r4
 80011c8:	0862      	lsrs	r2, r4, #1
 80011ca:	430a      	orrs	r2, r1
 80011cc:	07dc      	lsls	r4, r3, #31
 80011ce:	085b      	lsrs	r3, r3, #1
 80011d0:	469a      	mov	sl, r3
 80011d2:	4314      	orrs	r4, r2
 80011d4:	e670      	b.n	8000eb8 <__aeabi_dadd+0xf8>
 80011d6:	003a      	movs	r2, r7
 80011d8:	464c      	mov	r4, r9
 80011da:	3a20      	subs	r2, #32
 80011dc:	40d4      	lsrs	r4, r2
 80011de:	46a4      	mov	ip, r4
 80011e0:	2f20      	cmp	r7, #32
 80011e2:	d007      	beq.n	80011f4 <__aeabi_dadd+0x434>
 80011e4:	2240      	movs	r2, #64	; 0x40
 80011e6:	4648      	mov	r0, r9
 80011e8:	1bd2      	subs	r2, r2, r7
 80011ea:	4090      	lsls	r0, r2
 80011ec:	0002      	movs	r2, r0
 80011ee:	4640      	mov	r0, r8
 80011f0:	4310      	orrs	r0, r2
 80011f2:	4680      	mov	r8, r0
 80011f4:	4640      	mov	r0, r8
 80011f6:	1e42      	subs	r2, r0, #1
 80011f8:	4190      	sbcs	r0, r2
 80011fa:	4662      	mov	r2, ip
 80011fc:	0004      	movs	r4, r0
 80011fe:	4314      	orrs	r4, r2
 8001200:	e624      	b.n	8000e4c <__aeabi_dadd+0x8c>
 8001202:	4319      	orrs	r1, r3
 8001204:	000c      	movs	r4, r1
 8001206:	1e63      	subs	r3, r4, #1
 8001208:	419c      	sbcs	r4, r3
 800120a:	4643      	mov	r3, r8
 800120c:	1b1c      	subs	r4, r3, r4
 800120e:	45a0      	cmp	r8, r4
 8001210:	419b      	sbcs	r3, r3
 8001212:	4649      	mov	r1, r9
 8001214:	425b      	negs	r3, r3
 8001216:	1acb      	subs	r3, r1, r3
 8001218:	469a      	mov	sl, r3
 800121a:	4665      	mov	r5, ip
 800121c:	0016      	movs	r6, r2
 800121e:	e61b      	b.n	8000e58 <__aeabi_dadd+0x98>
 8001220:	000c      	movs	r4, r1
 8001222:	431c      	orrs	r4, r3
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x468>
 8001226:	e0c7      	b.n	80013b8 <__aeabi_dadd+0x5f8>
 8001228:	1e7c      	subs	r4, r7, #1
 800122a:	2f01      	cmp	r7, #1
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0x470>
 800122e:	e0f9      	b.n	8001424 <__aeabi_dadd+0x664>
 8001230:	4e91      	ldr	r6, [pc, #580]	; (8001478 <__aeabi_dadd+0x6b8>)
 8001232:	42b7      	cmp	r7, r6
 8001234:	d05c      	beq.n	80012f0 <__aeabi_dadd+0x530>
 8001236:	0027      	movs	r7, r4
 8001238:	e740      	b.n	80010bc <__aeabi_dadd+0x2fc>
 800123a:	2220      	movs	r2, #32
 800123c:	464c      	mov	r4, r9
 800123e:	4640      	mov	r0, r8
 8001240:	1bd2      	subs	r2, r2, r7
 8001242:	4094      	lsls	r4, r2
 8001244:	40f8      	lsrs	r0, r7
 8001246:	4304      	orrs	r4, r0
 8001248:	4640      	mov	r0, r8
 800124a:	4090      	lsls	r0, r2
 800124c:	1e42      	subs	r2, r0, #1
 800124e:	4190      	sbcs	r0, r2
 8001250:	464a      	mov	r2, r9
 8001252:	40fa      	lsrs	r2, r7
 8001254:	4304      	orrs	r4, r0
 8001256:	1889      	adds	r1, r1, r2
 8001258:	e6ee      	b.n	8001038 <__aeabi_dadd+0x278>
 800125a:	4c87      	ldr	r4, [pc, #540]	; (8001478 <__aeabi_dadd+0x6b8>)
 800125c:	42a2      	cmp	r2, r4
 800125e:	d100      	bne.n	8001262 <__aeabi_dadd+0x4a2>
 8001260:	e6f9      	b.n	8001056 <__aeabi_dadd+0x296>
 8001262:	1818      	adds	r0, r3, r0
 8001264:	4298      	cmp	r0, r3
 8001266:	419b      	sbcs	r3, r3
 8001268:	4449      	add	r1, r9
 800126a:	425b      	negs	r3, r3
 800126c:	18cb      	adds	r3, r1, r3
 800126e:	07dc      	lsls	r4, r3, #31
 8001270:	0840      	lsrs	r0, r0, #1
 8001272:	085b      	lsrs	r3, r3, #1
 8001274:	469a      	mov	sl, r3
 8001276:	0016      	movs	r6, r2
 8001278:	4304      	orrs	r4, r0
 800127a:	e6c6      	b.n	800100a <__aeabi_dadd+0x24a>
 800127c:	4642      	mov	r2, r8
 800127e:	1ad4      	subs	r4, r2, r3
 8001280:	45a0      	cmp	r8, r4
 8001282:	4180      	sbcs	r0, r0
 8001284:	464b      	mov	r3, r9
 8001286:	4240      	negs	r0, r0
 8001288:	1a59      	subs	r1, r3, r1
 800128a:	1a0b      	subs	r3, r1, r0
 800128c:	469a      	mov	sl, r3
 800128e:	4665      	mov	r5, ip
 8001290:	e5ea      	b.n	8000e68 <__aeabi_dadd+0xa8>
 8001292:	464b      	mov	r3, r9
 8001294:	464a      	mov	r2, r9
 8001296:	08c0      	lsrs	r0, r0, #3
 8001298:	075b      	lsls	r3, r3, #29
 800129a:	4665      	mov	r5, ip
 800129c:	4303      	orrs	r3, r0
 800129e:	08d1      	lsrs	r1, r2, #3
 80012a0:	e6bd      	b.n	800101e <__aeabi_dadd+0x25e>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d000      	beq.n	80012a8 <__aeabi_dadd+0x4e8>
 80012a6:	e08e      	b.n	80013c6 <__aeabi_dadd+0x606>
 80012a8:	464b      	mov	r3, r9
 80012aa:	4303      	orrs	r3, r0
 80012ac:	d117      	bne.n	80012de <__aeabi_dadd+0x51e>
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	2500      	movs	r5, #0
 80012b2:	0309      	lsls	r1, r1, #12
 80012b4:	e6da      	b.n	800106c <__aeabi_dadd+0x2ac>
 80012b6:	074a      	lsls	r2, r1, #29
 80012b8:	08db      	lsrs	r3, r3, #3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	08c9      	lsrs	r1, r1, #3
 80012be:	e6d1      	b.n	8001064 <__aeabi_dadd+0x2a4>
 80012c0:	1a1c      	subs	r4, r3, r0
 80012c2:	464a      	mov	r2, r9
 80012c4:	42a3      	cmp	r3, r4
 80012c6:	419b      	sbcs	r3, r3
 80012c8:	1a89      	subs	r1, r1, r2
 80012ca:	425b      	negs	r3, r3
 80012cc:	1acb      	subs	r3, r1, r3
 80012ce:	469a      	mov	sl, r3
 80012d0:	2601      	movs	r6, #1
 80012d2:	e5c1      	b.n	8000e58 <__aeabi_dadd+0x98>
 80012d4:	074a      	lsls	r2, r1, #29
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	4313      	orrs	r3, r2
 80012da:	08c9      	lsrs	r1, r1, #3
 80012dc:	e69f      	b.n	800101e <__aeabi_dadd+0x25e>
 80012de:	4643      	mov	r3, r8
 80012e0:	08d8      	lsrs	r0, r3, #3
 80012e2:	464b      	mov	r3, r9
 80012e4:	464a      	mov	r2, r9
 80012e6:	075b      	lsls	r3, r3, #29
 80012e8:	4665      	mov	r5, ip
 80012ea:	4303      	orrs	r3, r0
 80012ec:	08d1      	lsrs	r1, r2, #3
 80012ee:	e6b9      	b.n	8001064 <__aeabi_dadd+0x2a4>
 80012f0:	4643      	mov	r3, r8
 80012f2:	08d8      	lsrs	r0, r3, #3
 80012f4:	464b      	mov	r3, r9
 80012f6:	464a      	mov	r2, r9
 80012f8:	075b      	lsls	r3, r3, #29
 80012fa:	4303      	orrs	r3, r0
 80012fc:	08d1      	lsrs	r1, r2, #3
 80012fe:	e6b1      	b.n	8001064 <__aeabi_dadd+0x2a4>
 8001300:	4319      	orrs	r1, r3
 8001302:	000c      	movs	r4, r1
 8001304:	1e63      	subs	r3, r4, #1
 8001306:	419c      	sbcs	r4, r3
 8001308:	e6eb      	b.n	80010e2 <__aeabi_dadd+0x322>
 800130a:	003c      	movs	r4, r7
 800130c:	000d      	movs	r5, r1
 800130e:	3c20      	subs	r4, #32
 8001310:	40e5      	lsrs	r5, r4
 8001312:	2f20      	cmp	r7, #32
 8001314:	d003      	beq.n	800131e <__aeabi_dadd+0x55e>
 8001316:	2440      	movs	r4, #64	; 0x40
 8001318:	1be4      	subs	r4, r4, r7
 800131a:	40a1      	lsls	r1, r4
 800131c:	430b      	orrs	r3, r1
 800131e:	001c      	movs	r4, r3
 8001320:	1e63      	subs	r3, r4, #1
 8001322:	419c      	sbcs	r4, r3
 8001324:	432c      	orrs	r4, r5
 8001326:	e770      	b.n	800120a <__aeabi_dadd+0x44a>
 8001328:	2a00      	cmp	r2, #0
 800132a:	d0e1      	beq.n	80012f0 <__aeabi_dadd+0x530>
 800132c:	464a      	mov	r2, r9
 800132e:	4302      	orrs	r2, r0
 8001330:	d0c1      	beq.n	80012b6 <__aeabi_dadd+0x4f6>
 8001332:	074a      	lsls	r2, r1, #29
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	4313      	orrs	r3, r2
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	08c9      	lsrs	r1, r1, #3
 800133c:	0312      	lsls	r2, r2, #12
 800133e:	4211      	tst	r1, r2
 8001340:	d008      	beq.n	8001354 <__aeabi_dadd+0x594>
 8001342:	4648      	mov	r0, r9
 8001344:	08c4      	lsrs	r4, r0, #3
 8001346:	4214      	tst	r4, r2
 8001348:	d104      	bne.n	8001354 <__aeabi_dadd+0x594>
 800134a:	4643      	mov	r3, r8
 800134c:	0021      	movs	r1, r4
 800134e:	08db      	lsrs	r3, r3, #3
 8001350:	0742      	lsls	r2, r0, #29
 8001352:	4313      	orrs	r3, r2
 8001354:	0f5a      	lsrs	r2, r3, #29
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	0752      	lsls	r2, r2, #29
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	4313      	orrs	r3, r2
 800135e:	e681      	b.n	8001064 <__aeabi_dadd+0x2a4>
 8001360:	464b      	mov	r3, r9
 8001362:	4303      	orrs	r3, r0
 8001364:	d100      	bne.n	8001368 <__aeabi_dadd+0x5a8>
 8001366:	e714      	b.n	8001192 <__aeabi_dadd+0x3d2>
 8001368:	464b      	mov	r3, r9
 800136a:	464a      	mov	r2, r9
 800136c:	08c0      	lsrs	r0, r0, #3
 800136e:	075b      	lsls	r3, r3, #29
 8001370:	4665      	mov	r5, ip
 8001372:	4303      	orrs	r3, r0
 8001374:	08d1      	lsrs	r1, r2, #3
 8001376:	e655      	b.n	8001024 <__aeabi_dadd+0x264>
 8001378:	1ac4      	subs	r4, r0, r3
 800137a:	45a0      	cmp	r8, r4
 800137c:	4180      	sbcs	r0, r0
 800137e:	464b      	mov	r3, r9
 8001380:	4240      	negs	r0, r0
 8001382:	1a59      	subs	r1, r3, r1
 8001384:	1a0b      	subs	r3, r1, r0
 8001386:	469a      	mov	sl, r3
 8001388:	4665      	mov	r5, ip
 800138a:	2601      	movs	r6, #1
 800138c:	e564      	b.n	8000e58 <__aeabi_dadd+0x98>
 800138e:	1a1c      	subs	r4, r3, r0
 8001390:	464a      	mov	r2, r9
 8001392:	42a3      	cmp	r3, r4
 8001394:	4180      	sbcs	r0, r0
 8001396:	1a8a      	subs	r2, r1, r2
 8001398:	4240      	negs	r0, r0
 800139a:	1a12      	subs	r2, r2, r0
 800139c:	4692      	mov	sl, r2
 800139e:	0212      	lsls	r2, r2, #8
 80013a0:	d549      	bpl.n	8001436 <__aeabi_dadd+0x676>
 80013a2:	4642      	mov	r2, r8
 80013a4:	1ad4      	subs	r4, r2, r3
 80013a6:	45a0      	cmp	r8, r4
 80013a8:	4180      	sbcs	r0, r0
 80013aa:	464b      	mov	r3, r9
 80013ac:	4240      	negs	r0, r0
 80013ae:	1a59      	subs	r1, r3, r1
 80013b0:	1a0b      	subs	r3, r1, r0
 80013b2:	469a      	mov	sl, r3
 80013b4:	4665      	mov	r5, ip
 80013b6:	e57f      	b.n	8000eb8 <__aeabi_dadd+0xf8>
 80013b8:	464b      	mov	r3, r9
 80013ba:	464a      	mov	r2, r9
 80013bc:	08c0      	lsrs	r0, r0, #3
 80013be:	075b      	lsls	r3, r3, #29
 80013c0:	4303      	orrs	r3, r0
 80013c2:	08d1      	lsrs	r1, r2, #3
 80013c4:	e62b      	b.n	800101e <__aeabi_dadd+0x25e>
 80013c6:	464a      	mov	r2, r9
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	4302      	orrs	r2, r0
 80013cc:	d138      	bne.n	8001440 <__aeabi_dadd+0x680>
 80013ce:	074a      	lsls	r2, r1, #29
 80013d0:	4313      	orrs	r3, r2
 80013d2:	08c9      	lsrs	r1, r1, #3
 80013d4:	e646      	b.n	8001064 <__aeabi_dadd+0x2a4>
 80013d6:	464b      	mov	r3, r9
 80013d8:	464a      	mov	r2, r9
 80013da:	08c0      	lsrs	r0, r0, #3
 80013dc:	075b      	lsls	r3, r3, #29
 80013de:	4303      	orrs	r3, r0
 80013e0:	08d1      	lsrs	r1, r2, #3
 80013e2:	e61f      	b.n	8001024 <__aeabi_dadd+0x264>
 80013e4:	181c      	adds	r4, r3, r0
 80013e6:	429c      	cmp	r4, r3
 80013e8:	419b      	sbcs	r3, r3
 80013ea:	4449      	add	r1, r9
 80013ec:	468a      	mov	sl, r1
 80013ee:	425b      	negs	r3, r3
 80013f0:	449a      	add	sl, r3
 80013f2:	4653      	mov	r3, sl
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	d400      	bmi.n	80013fa <__aeabi_dadd+0x63a>
 80013f8:	e607      	b.n	800100a <__aeabi_dadd+0x24a>
 80013fa:	4652      	mov	r2, sl
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <__aeabi_dadd+0x6bc>)
 80013fe:	2601      	movs	r6, #1
 8001400:	401a      	ands	r2, r3
 8001402:	4692      	mov	sl, r2
 8001404:	e601      	b.n	800100a <__aeabi_dadd+0x24a>
 8001406:	003c      	movs	r4, r7
 8001408:	000e      	movs	r6, r1
 800140a:	3c20      	subs	r4, #32
 800140c:	40e6      	lsrs	r6, r4
 800140e:	2f20      	cmp	r7, #32
 8001410:	d003      	beq.n	800141a <__aeabi_dadd+0x65a>
 8001412:	2440      	movs	r4, #64	; 0x40
 8001414:	1be4      	subs	r4, r4, r7
 8001416:	40a1      	lsls	r1, r4
 8001418:	430b      	orrs	r3, r1
 800141a:	001c      	movs	r4, r3
 800141c:	1e63      	subs	r3, r4, #1
 800141e:	419c      	sbcs	r4, r3
 8001420:	4334      	orrs	r4, r6
 8001422:	e65e      	b.n	80010e2 <__aeabi_dadd+0x322>
 8001424:	4443      	add	r3, r8
 8001426:	4283      	cmp	r3, r0
 8001428:	4180      	sbcs	r0, r0
 800142a:	4449      	add	r1, r9
 800142c:	468a      	mov	sl, r1
 800142e:	4240      	negs	r0, r0
 8001430:	001c      	movs	r4, r3
 8001432:	4482      	add	sl, r0
 8001434:	e6bc      	b.n	80011b0 <__aeabi_dadd+0x3f0>
 8001436:	4653      	mov	r3, sl
 8001438:	4323      	orrs	r3, r4
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x67e>
 800143c:	e6a9      	b.n	8001192 <__aeabi_dadd+0x3d2>
 800143e:	e5e4      	b.n	800100a <__aeabi_dadd+0x24a>
 8001440:	074a      	lsls	r2, r1, #29
 8001442:	4313      	orrs	r3, r2
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	08c9      	lsrs	r1, r1, #3
 8001448:	0312      	lsls	r2, r2, #12
 800144a:	4211      	tst	r1, r2
 800144c:	d009      	beq.n	8001462 <__aeabi_dadd+0x6a2>
 800144e:	4648      	mov	r0, r9
 8001450:	08c4      	lsrs	r4, r0, #3
 8001452:	4214      	tst	r4, r2
 8001454:	d105      	bne.n	8001462 <__aeabi_dadd+0x6a2>
 8001456:	4643      	mov	r3, r8
 8001458:	4665      	mov	r5, ip
 800145a:	0021      	movs	r1, r4
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	0742      	lsls	r2, r0, #29
 8001460:	4313      	orrs	r3, r2
 8001462:	0f5a      	lsrs	r2, r3, #29
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	08db      	lsrs	r3, r3, #3
 8001468:	0752      	lsls	r2, r2, #29
 800146a:	4313      	orrs	r3, r2
 800146c:	e5fa      	b.n	8001064 <__aeabi_dadd+0x2a4>
 800146e:	2300      	movs	r3, #0
 8001470:	4a01      	ldr	r2, [pc, #4]	; (8001478 <__aeabi_dadd+0x6b8>)
 8001472:	001c      	movs	r4, r3
 8001474:	e540      	b.n	8000ef8 <__aeabi_dadd+0x138>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	000007ff 	.word	0x000007ff
 800147c:	ff7fffff 	.word	0xff7fffff

08001480 <__aeabi_ddiv>:
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	4657      	mov	r7, sl
 8001484:	464e      	mov	r6, r9
 8001486:	4645      	mov	r5, r8
 8001488:	46de      	mov	lr, fp
 800148a:	b5e0      	push	{r5, r6, r7, lr}
 800148c:	030c      	lsls	r4, r1, #12
 800148e:	001f      	movs	r7, r3
 8001490:	004b      	lsls	r3, r1, #1
 8001492:	4681      	mov	r9, r0
 8001494:	4692      	mov	sl, r2
 8001496:	0005      	movs	r5, r0
 8001498:	b085      	sub	sp, #20
 800149a:	0b24      	lsrs	r4, r4, #12
 800149c:	0d5b      	lsrs	r3, r3, #21
 800149e:	0fce      	lsrs	r6, r1, #31
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_ddiv+0x26>
 80014a4:	e152      	b.n	800174c <__aeabi_ddiv+0x2cc>
 80014a6:	4ad2      	ldr	r2, [pc, #840]	; (80017f0 <__aeabi_ddiv+0x370>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d100      	bne.n	80014ae <__aeabi_ddiv+0x2e>
 80014ac:	e16e      	b.n	800178c <__aeabi_ddiv+0x30c>
 80014ae:	0f42      	lsrs	r2, r0, #29
 80014b0:	00e4      	lsls	r4, r4, #3
 80014b2:	4314      	orrs	r4, r2
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	0412      	lsls	r2, r2, #16
 80014b8:	4322      	orrs	r2, r4
 80014ba:	4690      	mov	r8, r2
 80014bc:	4acd      	ldr	r2, [pc, #820]	; (80017f4 <__aeabi_ddiv+0x374>)
 80014be:	00c5      	lsls	r5, r0, #3
 80014c0:	4693      	mov	fp, r2
 80014c2:	449b      	add	fp, r3
 80014c4:	2300      	movs	r3, #0
 80014c6:	4699      	mov	r9, r3
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	033c      	lsls	r4, r7, #12
 80014cc:	007b      	lsls	r3, r7, #1
 80014ce:	4650      	mov	r0, sl
 80014d0:	0b24      	lsrs	r4, r4, #12
 80014d2:	0d5b      	lsrs	r3, r3, #21
 80014d4:	0fff      	lsrs	r7, r7, #31
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d100      	bne.n	80014dc <__aeabi_ddiv+0x5c>
 80014da:	e11a      	b.n	8001712 <__aeabi_ddiv+0x292>
 80014dc:	4ac4      	ldr	r2, [pc, #784]	; (80017f0 <__aeabi_ddiv+0x370>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d100      	bne.n	80014e4 <__aeabi_ddiv+0x64>
 80014e2:	e15e      	b.n	80017a2 <__aeabi_ddiv+0x322>
 80014e4:	0f42      	lsrs	r2, r0, #29
 80014e6:	00e4      	lsls	r4, r4, #3
 80014e8:	4322      	orrs	r2, r4
 80014ea:	2480      	movs	r4, #128	; 0x80
 80014ec:	0424      	lsls	r4, r4, #16
 80014ee:	4314      	orrs	r4, r2
 80014f0:	4ac0      	ldr	r2, [pc, #768]	; (80017f4 <__aeabi_ddiv+0x374>)
 80014f2:	00c1      	lsls	r1, r0, #3
 80014f4:	4694      	mov	ip, r2
 80014f6:	465a      	mov	r2, fp
 80014f8:	4463      	add	r3, ip
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	469b      	mov	fp, r3
 80014fe:	2000      	movs	r0, #0
 8001500:	0033      	movs	r3, r6
 8001502:	407b      	eors	r3, r7
 8001504:	469a      	mov	sl, r3
 8001506:	464b      	mov	r3, r9
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d827      	bhi.n	800155c <__aeabi_ddiv+0xdc>
 800150c:	4aba      	ldr	r2, [pc, #744]	; (80017f8 <__aeabi_ddiv+0x378>)
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	58d3      	ldr	r3, [r2, r3]
 8001512:	469f      	mov	pc, r3
 8001514:	46b2      	mov	sl, r6
 8001516:	9b00      	ldr	r3, [sp, #0]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d016      	beq.n	800154a <__aeabi_ddiv+0xca>
 800151c:	2b03      	cmp	r3, #3
 800151e:	d100      	bne.n	8001522 <__aeabi_ddiv+0xa2>
 8001520:	e287      	b.n	8001a32 <__aeabi_ddiv+0x5b2>
 8001522:	2b01      	cmp	r3, #1
 8001524:	d000      	beq.n	8001528 <__aeabi_ddiv+0xa8>
 8001526:	e0d5      	b.n	80016d4 <__aeabi_ddiv+0x254>
 8001528:	2300      	movs	r3, #0
 800152a:	2200      	movs	r2, #0
 800152c:	2500      	movs	r5, #0
 800152e:	051b      	lsls	r3, r3, #20
 8001530:	4313      	orrs	r3, r2
 8001532:	4652      	mov	r2, sl
 8001534:	07d2      	lsls	r2, r2, #31
 8001536:	4313      	orrs	r3, r2
 8001538:	0028      	movs	r0, r5
 800153a:	0019      	movs	r1, r3
 800153c:	b005      	add	sp, #20
 800153e:	bcf0      	pop	{r4, r5, r6, r7}
 8001540:	46bb      	mov	fp, r7
 8001542:	46b2      	mov	sl, r6
 8001544:	46a9      	mov	r9, r5
 8001546:	46a0      	mov	r8, r4
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154a:	2200      	movs	r2, #0
 800154c:	2500      	movs	r5, #0
 800154e:	4ba8      	ldr	r3, [pc, #672]	; (80017f0 <__aeabi_ddiv+0x370>)
 8001550:	e7ed      	b.n	800152e <__aeabi_ddiv+0xae>
 8001552:	46ba      	mov	sl, r7
 8001554:	46a0      	mov	r8, r4
 8001556:	000d      	movs	r5, r1
 8001558:	9000      	str	r0, [sp, #0]
 800155a:	e7dc      	b.n	8001516 <__aeabi_ddiv+0x96>
 800155c:	4544      	cmp	r4, r8
 800155e:	d200      	bcs.n	8001562 <__aeabi_ddiv+0xe2>
 8001560:	e1c4      	b.n	80018ec <__aeabi_ddiv+0x46c>
 8001562:	d100      	bne.n	8001566 <__aeabi_ddiv+0xe6>
 8001564:	e1bf      	b.n	80018e6 <__aeabi_ddiv+0x466>
 8001566:	2301      	movs	r3, #1
 8001568:	425b      	negs	r3, r3
 800156a:	469c      	mov	ip, r3
 800156c:	002e      	movs	r6, r5
 800156e:	4640      	mov	r0, r8
 8001570:	2500      	movs	r5, #0
 8001572:	44e3      	add	fp, ip
 8001574:	0223      	lsls	r3, r4, #8
 8001576:	0e0c      	lsrs	r4, r1, #24
 8001578:	431c      	orrs	r4, r3
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	4699      	mov	r9, r3
 800157e:	0423      	lsls	r3, r4, #16
 8001580:	020a      	lsls	r2, r1, #8
 8001582:	0c1f      	lsrs	r7, r3, #16
 8001584:	4649      	mov	r1, r9
 8001586:	9200      	str	r2, [sp, #0]
 8001588:	9701      	str	r7, [sp, #4]
 800158a:	f7fe fe5f 	bl	800024c <__aeabi_uidivmod>
 800158e:	0002      	movs	r2, r0
 8001590:	437a      	muls	r2, r7
 8001592:	040b      	lsls	r3, r1, #16
 8001594:	0c31      	lsrs	r1, r6, #16
 8001596:	4680      	mov	r8, r0
 8001598:	4319      	orrs	r1, r3
 800159a:	428a      	cmp	r2, r1
 800159c:	d907      	bls.n	80015ae <__aeabi_ddiv+0x12e>
 800159e:	2301      	movs	r3, #1
 80015a0:	425b      	negs	r3, r3
 80015a2:	469c      	mov	ip, r3
 80015a4:	1909      	adds	r1, r1, r4
 80015a6:	44e0      	add	r8, ip
 80015a8:	428c      	cmp	r4, r1
 80015aa:	d800      	bhi.n	80015ae <__aeabi_ddiv+0x12e>
 80015ac:	e201      	b.n	80019b2 <__aeabi_ddiv+0x532>
 80015ae:	1a88      	subs	r0, r1, r2
 80015b0:	4649      	mov	r1, r9
 80015b2:	f7fe fe4b 	bl	800024c <__aeabi_uidivmod>
 80015b6:	9a01      	ldr	r2, [sp, #4]
 80015b8:	0436      	lsls	r6, r6, #16
 80015ba:	4342      	muls	r2, r0
 80015bc:	0409      	lsls	r1, r1, #16
 80015be:	0c36      	lsrs	r6, r6, #16
 80015c0:	0003      	movs	r3, r0
 80015c2:	430e      	orrs	r6, r1
 80015c4:	42b2      	cmp	r2, r6
 80015c6:	d904      	bls.n	80015d2 <__aeabi_ddiv+0x152>
 80015c8:	1936      	adds	r6, r6, r4
 80015ca:	3b01      	subs	r3, #1
 80015cc:	42b4      	cmp	r4, r6
 80015ce:	d800      	bhi.n	80015d2 <__aeabi_ddiv+0x152>
 80015d0:	e1e9      	b.n	80019a6 <__aeabi_ddiv+0x526>
 80015d2:	1ab0      	subs	r0, r6, r2
 80015d4:	4642      	mov	r2, r8
 80015d6:	9e00      	ldr	r6, [sp, #0]
 80015d8:	0412      	lsls	r2, r2, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	0c33      	lsrs	r3, r6, #16
 80015de:	001f      	movs	r7, r3
 80015e0:	0c11      	lsrs	r1, r2, #16
 80015e2:	4690      	mov	r8, r2
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	0413      	lsls	r3, r2, #16
 80015e8:	0432      	lsls	r2, r6, #16
 80015ea:	0c16      	lsrs	r6, r2, #16
 80015ec:	0032      	movs	r2, r6
 80015ee:	0c1b      	lsrs	r3, r3, #16
 80015f0:	435a      	muls	r2, r3
 80015f2:	9603      	str	r6, [sp, #12]
 80015f4:	437b      	muls	r3, r7
 80015f6:	434e      	muls	r6, r1
 80015f8:	4379      	muls	r1, r7
 80015fa:	0c17      	lsrs	r7, r2, #16
 80015fc:	46bc      	mov	ip, r7
 80015fe:	199b      	adds	r3, r3, r6
 8001600:	4463      	add	r3, ip
 8001602:	429e      	cmp	r6, r3
 8001604:	d903      	bls.n	800160e <__aeabi_ddiv+0x18e>
 8001606:	2680      	movs	r6, #128	; 0x80
 8001608:	0276      	lsls	r6, r6, #9
 800160a:	46b4      	mov	ip, r6
 800160c:	4461      	add	r1, ip
 800160e:	0c1e      	lsrs	r6, r3, #16
 8001610:	1871      	adds	r1, r6, r1
 8001612:	0416      	lsls	r6, r2, #16
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	0c36      	lsrs	r6, r6, #16
 8001618:	199e      	adds	r6, r3, r6
 800161a:	4288      	cmp	r0, r1
 800161c:	d302      	bcc.n	8001624 <__aeabi_ddiv+0x1a4>
 800161e:	d112      	bne.n	8001646 <__aeabi_ddiv+0x1c6>
 8001620:	42b5      	cmp	r5, r6
 8001622:	d210      	bcs.n	8001646 <__aeabi_ddiv+0x1c6>
 8001624:	4643      	mov	r3, r8
 8001626:	1e5a      	subs	r2, r3, #1
 8001628:	9b00      	ldr	r3, [sp, #0]
 800162a:	469c      	mov	ip, r3
 800162c:	4465      	add	r5, ip
 800162e:	001f      	movs	r7, r3
 8001630:	429d      	cmp	r5, r3
 8001632:	419b      	sbcs	r3, r3
 8001634:	425b      	negs	r3, r3
 8001636:	191b      	adds	r3, r3, r4
 8001638:	18c0      	adds	r0, r0, r3
 800163a:	4284      	cmp	r4, r0
 800163c:	d200      	bcs.n	8001640 <__aeabi_ddiv+0x1c0>
 800163e:	e19e      	b.n	800197e <__aeabi_ddiv+0x4fe>
 8001640:	d100      	bne.n	8001644 <__aeabi_ddiv+0x1c4>
 8001642:	e199      	b.n	8001978 <__aeabi_ddiv+0x4f8>
 8001644:	4690      	mov	r8, r2
 8001646:	1bae      	subs	r6, r5, r6
 8001648:	42b5      	cmp	r5, r6
 800164a:	41ad      	sbcs	r5, r5
 800164c:	1a40      	subs	r0, r0, r1
 800164e:	426d      	negs	r5, r5
 8001650:	1b40      	subs	r0, r0, r5
 8001652:	4284      	cmp	r4, r0
 8001654:	d100      	bne.n	8001658 <__aeabi_ddiv+0x1d8>
 8001656:	e1d2      	b.n	80019fe <__aeabi_ddiv+0x57e>
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe fdf7 	bl	800024c <__aeabi_uidivmod>
 800165e:	9a01      	ldr	r2, [sp, #4]
 8001660:	040b      	lsls	r3, r1, #16
 8001662:	4342      	muls	r2, r0
 8001664:	0c31      	lsrs	r1, r6, #16
 8001666:	0005      	movs	r5, r0
 8001668:	4319      	orrs	r1, r3
 800166a:	428a      	cmp	r2, r1
 800166c:	d900      	bls.n	8001670 <__aeabi_ddiv+0x1f0>
 800166e:	e16c      	b.n	800194a <__aeabi_ddiv+0x4ca>
 8001670:	1a88      	subs	r0, r1, r2
 8001672:	4649      	mov	r1, r9
 8001674:	f7fe fdea 	bl	800024c <__aeabi_uidivmod>
 8001678:	9a01      	ldr	r2, [sp, #4]
 800167a:	0436      	lsls	r6, r6, #16
 800167c:	4342      	muls	r2, r0
 800167e:	0409      	lsls	r1, r1, #16
 8001680:	0c36      	lsrs	r6, r6, #16
 8001682:	0003      	movs	r3, r0
 8001684:	430e      	orrs	r6, r1
 8001686:	42b2      	cmp	r2, r6
 8001688:	d900      	bls.n	800168c <__aeabi_ddiv+0x20c>
 800168a:	e153      	b.n	8001934 <__aeabi_ddiv+0x4b4>
 800168c:	9803      	ldr	r0, [sp, #12]
 800168e:	1ab6      	subs	r6, r6, r2
 8001690:	0002      	movs	r2, r0
 8001692:	042d      	lsls	r5, r5, #16
 8001694:	431d      	orrs	r5, r3
 8001696:	9f02      	ldr	r7, [sp, #8]
 8001698:	042b      	lsls	r3, r5, #16
 800169a:	0c1b      	lsrs	r3, r3, #16
 800169c:	435a      	muls	r2, r3
 800169e:	437b      	muls	r3, r7
 80016a0:	469c      	mov	ip, r3
 80016a2:	0c29      	lsrs	r1, r5, #16
 80016a4:	4348      	muls	r0, r1
 80016a6:	0c13      	lsrs	r3, r2, #16
 80016a8:	4484      	add	ip, r0
 80016aa:	4463      	add	r3, ip
 80016ac:	4379      	muls	r1, r7
 80016ae:	4298      	cmp	r0, r3
 80016b0:	d903      	bls.n	80016ba <__aeabi_ddiv+0x23a>
 80016b2:	2080      	movs	r0, #128	; 0x80
 80016b4:	0240      	lsls	r0, r0, #9
 80016b6:	4684      	mov	ip, r0
 80016b8:	4461      	add	r1, ip
 80016ba:	0c18      	lsrs	r0, r3, #16
 80016bc:	0412      	lsls	r2, r2, #16
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	0c12      	lsrs	r2, r2, #16
 80016c2:	1840      	adds	r0, r0, r1
 80016c4:	189b      	adds	r3, r3, r2
 80016c6:	4286      	cmp	r6, r0
 80016c8:	d200      	bcs.n	80016cc <__aeabi_ddiv+0x24c>
 80016ca:	e100      	b.n	80018ce <__aeabi_ddiv+0x44e>
 80016cc:	d100      	bne.n	80016d0 <__aeabi_ddiv+0x250>
 80016ce:	e0fb      	b.n	80018c8 <__aeabi_ddiv+0x448>
 80016d0:	2301      	movs	r3, #1
 80016d2:	431d      	orrs	r5, r3
 80016d4:	4b49      	ldr	r3, [pc, #292]	; (80017fc <__aeabi_ddiv+0x37c>)
 80016d6:	445b      	add	r3, fp
 80016d8:	2b00      	cmp	r3, #0
 80016da:	dc00      	bgt.n	80016de <__aeabi_ddiv+0x25e>
 80016dc:	e0aa      	b.n	8001834 <__aeabi_ddiv+0x3b4>
 80016de:	076a      	lsls	r2, r5, #29
 80016e0:	d000      	beq.n	80016e4 <__aeabi_ddiv+0x264>
 80016e2:	e13d      	b.n	8001960 <__aeabi_ddiv+0x4e0>
 80016e4:	08e9      	lsrs	r1, r5, #3
 80016e6:	4642      	mov	r2, r8
 80016e8:	01d2      	lsls	r2, r2, #7
 80016ea:	d506      	bpl.n	80016fa <__aeabi_ddiv+0x27a>
 80016ec:	4642      	mov	r2, r8
 80016ee:	4b44      	ldr	r3, [pc, #272]	; (8001800 <__aeabi_ddiv+0x380>)
 80016f0:	401a      	ands	r2, r3
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	4690      	mov	r8, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	445b      	add	r3, fp
 80016fa:	4a42      	ldr	r2, [pc, #264]	; (8001804 <__aeabi_ddiv+0x384>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	dd00      	ble.n	8001702 <__aeabi_ddiv+0x282>
 8001700:	e723      	b.n	800154a <__aeabi_ddiv+0xca>
 8001702:	4642      	mov	r2, r8
 8001704:	055b      	lsls	r3, r3, #21
 8001706:	0755      	lsls	r5, r2, #29
 8001708:	0252      	lsls	r2, r2, #9
 800170a:	430d      	orrs	r5, r1
 800170c:	0b12      	lsrs	r2, r2, #12
 800170e:	0d5b      	lsrs	r3, r3, #21
 8001710:	e70d      	b.n	800152e <__aeabi_ddiv+0xae>
 8001712:	4651      	mov	r1, sl
 8001714:	4321      	orrs	r1, r4
 8001716:	d100      	bne.n	800171a <__aeabi_ddiv+0x29a>
 8001718:	e07c      	b.n	8001814 <__aeabi_ddiv+0x394>
 800171a:	2c00      	cmp	r4, #0
 800171c:	d100      	bne.n	8001720 <__aeabi_ddiv+0x2a0>
 800171e:	e0fb      	b.n	8001918 <__aeabi_ddiv+0x498>
 8001720:	0020      	movs	r0, r4
 8001722:	f001 fa63 	bl	8002bec <__clzsi2>
 8001726:	0002      	movs	r2, r0
 8001728:	3a0b      	subs	r2, #11
 800172a:	231d      	movs	r3, #29
 800172c:	1a9b      	subs	r3, r3, r2
 800172e:	4652      	mov	r2, sl
 8001730:	0001      	movs	r1, r0
 8001732:	40da      	lsrs	r2, r3
 8001734:	4653      	mov	r3, sl
 8001736:	3908      	subs	r1, #8
 8001738:	408b      	lsls	r3, r1
 800173a:	408c      	lsls	r4, r1
 800173c:	0019      	movs	r1, r3
 800173e:	4314      	orrs	r4, r2
 8001740:	4b31      	ldr	r3, [pc, #196]	; (8001808 <__aeabi_ddiv+0x388>)
 8001742:	4458      	add	r0, fp
 8001744:	469b      	mov	fp, r3
 8001746:	4483      	add	fp, r0
 8001748:	2000      	movs	r0, #0
 800174a:	e6d9      	b.n	8001500 <__aeabi_ddiv+0x80>
 800174c:	0003      	movs	r3, r0
 800174e:	4323      	orrs	r3, r4
 8001750:	4698      	mov	r8, r3
 8001752:	d044      	beq.n	80017de <__aeabi_ddiv+0x35e>
 8001754:	2c00      	cmp	r4, #0
 8001756:	d100      	bne.n	800175a <__aeabi_ddiv+0x2da>
 8001758:	e0cf      	b.n	80018fa <__aeabi_ddiv+0x47a>
 800175a:	0020      	movs	r0, r4
 800175c:	f001 fa46 	bl	8002bec <__clzsi2>
 8001760:	0001      	movs	r1, r0
 8001762:	0002      	movs	r2, r0
 8001764:	390b      	subs	r1, #11
 8001766:	231d      	movs	r3, #29
 8001768:	1a5b      	subs	r3, r3, r1
 800176a:	4649      	mov	r1, r9
 800176c:	0010      	movs	r0, r2
 800176e:	40d9      	lsrs	r1, r3
 8001770:	3808      	subs	r0, #8
 8001772:	4084      	lsls	r4, r0
 8001774:	000b      	movs	r3, r1
 8001776:	464d      	mov	r5, r9
 8001778:	4323      	orrs	r3, r4
 800177a:	4698      	mov	r8, r3
 800177c:	4085      	lsls	r5, r0
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <__aeabi_ddiv+0x38c>)
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	469b      	mov	fp, r3
 8001784:	2300      	movs	r3, #0
 8001786:	4699      	mov	r9, r3
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	e69e      	b.n	80014ca <__aeabi_ddiv+0x4a>
 800178c:	0002      	movs	r2, r0
 800178e:	4322      	orrs	r2, r4
 8001790:	4690      	mov	r8, r2
 8001792:	d11d      	bne.n	80017d0 <__aeabi_ddiv+0x350>
 8001794:	2208      	movs	r2, #8
 8001796:	469b      	mov	fp, r3
 8001798:	2302      	movs	r3, #2
 800179a:	2500      	movs	r5, #0
 800179c:	4691      	mov	r9, r2
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	e693      	b.n	80014ca <__aeabi_ddiv+0x4a>
 80017a2:	4651      	mov	r1, sl
 80017a4:	4321      	orrs	r1, r4
 80017a6:	d109      	bne.n	80017bc <__aeabi_ddiv+0x33c>
 80017a8:	2302      	movs	r3, #2
 80017aa:	464a      	mov	r2, r9
 80017ac:	431a      	orrs	r2, r3
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <__aeabi_ddiv+0x390>)
 80017b0:	4691      	mov	r9, r2
 80017b2:	469c      	mov	ip, r3
 80017b4:	2400      	movs	r4, #0
 80017b6:	2002      	movs	r0, #2
 80017b8:	44e3      	add	fp, ip
 80017ba:	e6a1      	b.n	8001500 <__aeabi_ddiv+0x80>
 80017bc:	2303      	movs	r3, #3
 80017be:	464a      	mov	r2, r9
 80017c0:	431a      	orrs	r2, r3
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <__aeabi_ddiv+0x390>)
 80017c4:	4691      	mov	r9, r2
 80017c6:	469c      	mov	ip, r3
 80017c8:	4651      	mov	r1, sl
 80017ca:	2003      	movs	r0, #3
 80017cc:	44e3      	add	fp, ip
 80017ce:	e697      	b.n	8001500 <__aeabi_ddiv+0x80>
 80017d0:	220c      	movs	r2, #12
 80017d2:	469b      	mov	fp, r3
 80017d4:	2303      	movs	r3, #3
 80017d6:	46a0      	mov	r8, r4
 80017d8:	4691      	mov	r9, r2
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	e675      	b.n	80014ca <__aeabi_ddiv+0x4a>
 80017de:	2304      	movs	r3, #4
 80017e0:	4699      	mov	r9, r3
 80017e2:	2300      	movs	r3, #0
 80017e4:	469b      	mov	fp, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	2500      	movs	r5, #0
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	e66d      	b.n	80014ca <__aeabi_ddiv+0x4a>
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	fffffc01 	.word	0xfffffc01
 80017f8:	0800ad34 	.word	0x0800ad34
 80017fc:	000003ff 	.word	0x000003ff
 8001800:	feffffff 	.word	0xfeffffff
 8001804:	000007fe 	.word	0x000007fe
 8001808:	000003f3 	.word	0x000003f3
 800180c:	fffffc0d 	.word	0xfffffc0d
 8001810:	fffff801 	.word	0xfffff801
 8001814:	464a      	mov	r2, r9
 8001816:	2301      	movs	r3, #1
 8001818:	431a      	orrs	r2, r3
 800181a:	4691      	mov	r9, r2
 800181c:	2400      	movs	r4, #0
 800181e:	2001      	movs	r0, #1
 8001820:	e66e      	b.n	8001500 <__aeabi_ddiv+0x80>
 8001822:	2300      	movs	r3, #0
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	469a      	mov	sl, r3
 8001828:	2500      	movs	r5, #0
 800182a:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 800182c:	0312      	lsls	r2, r2, #12
 800182e:	e67e      	b.n	800152e <__aeabi_ddiv+0xae>
 8001830:	2501      	movs	r5, #1
 8001832:	426d      	negs	r5, r5
 8001834:	2201      	movs	r2, #1
 8001836:	1ad2      	subs	r2, r2, r3
 8001838:	2a38      	cmp	r2, #56	; 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_ddiv+0x3be>
 800183c:	e674      	b.n	8001528 <__aeabi_ddiv+0xa8>
 800183e:	2a1f      	cmp	r2, #31
 8001840:	dc00      	bgt.n	8001844 <__aeabi_ddiv+0x3c4>
 8001842:	e0bd      	b.n	80019c0 <__aeabi_ddiv+0x540>
 8001844:	211f      	movs	r1, #31
 8001846:	4249      	negs	r1, r1
 8001848:	1acb      	subs	r3, r1, r3
 800184a:	4641      	mov	r1, r8
 800184c:	40d9      	lsrs	r1, r3
 800184e:	000b      	movs	r3, r1
 8001850:	2a20      	cmp	r2, #32
 8001852:	d004      	beq.n	800185e <__aeabi_ddiv+0x3de>
 8001854:	4641      	mov	r1, r8
 8001856:	4a7e      	ldr	r2, [pc, #504]	; (8001a50 <__aeabi_ddiv+0x5d0>)
 8001858:	445a      	add	r2, fp
 800185a:	4091      	lsls	r1, r2
 800185c:	430d      	orrs	r5, r1
 800185e:	0029      	movs	r1, r5
 8001860:	1e4a      	subs	r2, r1, #1
 8001862:	4191      	sbcs	r1, r2
 8001864:	4319      	orrs	r1, r3
 8001866:	2307      	movs	r3, #7
 8001868:	001d      	movs	r5, r3
 800186a:	2200      	movs	r2, #0
 800186c:	400d      	ands	r5, r1
 800186e:	420b      	tst	r3, r1
 8001870:	d100      	bne.n	8001874 <__aeabi_ddiv+0x3f4>
 8001872:	e0d0      	b.n	8001a16 <__aeabi_ddiv+0x596>
 8001874:	220f      	movs	r2, #15
 8001876:	2300      	movs	r3, #0
 8001878:	400a      	ands	r2, r1
 800187a:	2a04      	cmp	r2, #4
 800187c:	d100      	bne.n	8001880 <__aeabi_ddiv+0x400>
 800187e:	e0c7      	b.n	8001a10 <__aeabi_ddiv+0x590>
 8001880:	1d0a      	adds	r2, r1, #4
 8001882:	428a      	cmp	r2, r1
 8001884:	4189      	sbcs	r1, r1
 8001886:	4249      	negs	r1, r1
 8001888:	185b      	adds	r3, r3, r1
 800188a:	0011      	movs	r1, r2
 800188c:	021a      	lsls	r2, r3, #8
 800188e:	d400      	bmi.n	8001892 <__aeabi_ddiv+0x412>
 8001890:	e0be      	b.n	8001a10 <__aeabi_ddiv+0x590>
 8001892:	2301      	movs	r3, #1
 8001894:	2200      	movs	r2, #0
 8001896:	2500      	movs	r5, #0
 8001898:	e649      	b.n	800152e <__aeabi_ddiv+0xae>
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	4643      	mov	r3, r8
 800189e:	0312      	lsls	r2, r2, #12
 80018a0:	4213      	tst	r3, r2
 80018a2:	d008      	beq.n	80018b6 <__aeabi_ddiv+0x436>
 80018a4:	4214      	tst	r4, r2
 80018a6:	d106      	bne.n	80018b6 <__aeabi_ddiv+0x436>
 80018a8:	4322      	orrs	r2, r4
 80018aa:	0312      	lsls	r2, r2, #12
 80018ac:	46ba      	mov	sl, r7
 80018ae:	000d      	movs	r5, r1
 80018b0:	4b66      	ldr	r3, [pc, #408]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 80018b2:	0b12      	lsrs	r2, r2, #12
 80018b4:	e63b      	b.n	800152e <__aeabi_ddiv+0xae>
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	4643      	mov	r3, r8
 80018ba:	0312      	lsls	r2, r2, #12
 80018bc:	431a      	orrs	r2, r3
 80018be:	0312      	lsls	r2, r2, #12
 80018c0:	46b2      	mov	sl, r6
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 80018c4:	0b12      	lsrs	r2, r2, #12
 80018c6:	e632      	b.n	800152e <__aeabi_ddiv+0xae>
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x44e>
 80018cc:	e702      	b.n	80016d4 <__aeabi_ddiv+0x254>
 80018ce:	19a6      	adds	r6, r4, r6
 80018d0:	1e6a      	subs	r2, r5, #1
 80018d2:	42a6      	cmp	r6, r4
 80018d4:	d200      	bcs.n	80018d8 <__aeabi_ddiv+0x458>
 80018d6:	e089      	b.n	80019ec <__aeabi_ddiv+0x56c>
 80018d8:	4286      	cmp	r6, r0
 80018da:	d200      	bcs.n	80018de <__aeabi_ddiv+0x45e>
 80018dc:	e09f      	b.n	8001a1e <__aeabi_ddiv+0x59e>
 80018de:	d100      	bne.n	80018e2 <__aeabi_ddiv+0x462>
 80018e0:	e0af      	b.n	8001a42 <__aeabi_ddiv+0x5c2>
 80018e2:	0015      	movs	r5, r2
 80018e4:	e6f4      	b.n	80016d0 <__aeabi_ddiv+0x250>
 80018e6:	42a9      	cmp	r1, r5
 80018e8:	d900      	bls.n	80018ec <__aeabi_ddiv+0x46c>
 80018ea:	e63c      	b.n	8001566 <__aeabi_ddiv+0xe6>
 80018ec:	4643      	mov	r3, r8
 80018ee:	07de      	lsls	r6, r3, #31
 80018f0:	0858      	lsrs	r0, r3, #1
 80018f2:	086b      	lsrs	r3, r5, #1
 80018f4:	431e      	orrs	r6, r3
 80018f6:	07ed      	lsls	r5, r5, #31
 80018f8:	e63c      	b.n	8001574 <__aeabi_ddiv+0xf4>
 80018fa:	f001 f977 	bl	8002bec <__clzsi2>
 80018fe:	0001      	movs	r1, r0
 8001900:	0002      	movs	r2, r0
 8001902:	3115      	adds	r1, #21
 8001904:	3220      	adds	r2, #32
 8001906:	291c      	cmp	r1, #28
 8001908:	dc00      	bgt.n	800190c <__aeabi_ddiv+0x48c>
 800190a:	e72c      	b.n	8001766 <__aeabi_ddiv+0x2e6>
 800190c:	464b      	mov	r3, r9
 800190e:	3808      	subs	r0, #8
 8001910:	4083      	lsls	r3, r0
 8001912:	2500      	movs	r5, #0
 8001914:	4698      	mov	r8, r3
 8001916:	e732      	b.n	800177e <__aeabi_ddiv+0x2fe>
 8001918:	f001 f968 	bl	8002bec <__clzsi2>
 800191c:	0003      	movs	r3, r0
 800191e:	001a      	movs	r2, r3
 8001920:	3215      	adds	r2, #21
 8001922:	3020      	adds	r0, #32
 8001924:	2a1c      	cmp	r2, #28
 8001926:	dc00      	bgt.n	800192a <__aeabi_ddiv+0x4aa>
 8001928:	e6ff      	b.n	800172a <__aeabi_ddiv+0x2aa>
 800192a:	4654      	mov	r4, sl
 800192c:	3b08      	subs	r3, #8
 800192e:	2100      	movs	r1, #0
 8001930:	409c      	lsls	r4, r3
 8001932:	e705      	b.n	8001740 <__aeabi_ddiv+0x2c0>
 8001934:	1936      	adds	r6, r6, r4
 8001936:	3b01      	subs	r3, #1
 8001938:	42b4      	cmp	r4, r6
 800193a:	d900      	bls.n	800193e <__aeabi_ddiv+0x4be>
 800193c:	e6a6      	b.n	800168c <__aeabi_ddiv+0x20c>
 800193e:	42b2      	cmp	r2, r6
 8001940:	d800      	bhi.n	8001944 <__aeabi_ddiv+0x4c4>
 8001942:	e6a3      	b.n	800168c <__aeabi_ddiv+0x20c>
 8001944:	1e83      	subs	r3, r0, #2
 8001946:	1936      	adds	r6, r6, r4
 8001948:	e6a0      	b.n	800168c <__aeabi_ddiv+0x20c>
 800194a:	1909      	adds	r1, r1, r4
 800194c:	3d01      	subs	r5, #1
 800194e:	428c      	cmp	r4, r1
 8001950:	d900      	bls.n	8001954 <__aeabi_ddiv+0x4d4>
 8001952:	e68d      	b.n	8001670 <__aeabi_ddiv+0x1f0>
 8001954:	428a      	cmp	r2, r1
 8001956:	d800      	bhi.n	800195a <__aeabi_ddiv+0x4da>
 8001958:	e68a      	b.n	8001670 <__aeabi_ddiv+0x1f0>
 800195a:	1e85      	subs	r5, r0, #2
 800195c:	1909      	adds	r1, r1, r4
 800195e:	e687      	b.n	8001670 <__aeabi_ddiv+0x1f0>
 8001960:	220f      	movs	r2, #15
 8001962:	402a      	ands	r2, r5
 8001964:	2a04      	cmp	r2, #4
 8001966:	d100      	bne.n	800196a <__aeabi_ddiv+0x4ea>
 8001968:	e6bc      	b.n	80016e4 <__aeabi_ddiv+0x264>
 800196a:	1d29      	adds	r1, r5, #4
 800196c:	42a9      	cmp	r1, r5
 800196e:	41ad      	sbcs	r5, r5
 8001970:	426d      	negs	r5, r5
 8001972:	08c9      	lsrs	r1, r1, #3
 8001974:	44a8      	add	r8, r5
 8001976:	e6b6      	b.n	80016e6 <__aeabi_ddiv+0x266>
 8001978:	42af      	cmp	r7, r5
 800197a:	d900      	bls.n	800197e <__aeabi_ddiv+0x4fe>
 800197c:	e662      	b.n	8001644 <__aeabi_ddiv+0x1c4>
 800197e:	4281      	cmp	r1, r0
 8001980:	d804      	bhi.n	800198c <__aeabi_ddiv+0x50c>
 8001982:	d000      	beq.n	8001986 <__aeabi_ddiv+0x506>
 8001984:	e65e      	b.n	8001644 <__aeabi_ddiv+0x1c4>
 8001986:	42ae      	cmp	r6, r5
 8001988:	d800      	bhi.n	800198c <__aeabi_ddiv+0x50c>
 800198a:	e65b      	b.n	8001644 <__aeabi_ddiv+0x1c4>
 800198c:	2302      	movs	r3, #2
 800198e:	425b      	negs	r3, r3
 8001990:	469c      	mov	ip, r3
 8001992:	9b00      	ldr	r3, [sp, #0]
 8001994:	44e0      	add	r8, ip
 8001996:	469c      	mov	ip, r3
 8001998:	4465      	add	r5, ip
 800199a:	429d      	cmp	r5, r3
 800199c:	419b      	sbcs	r3, r3
 800199e:	425b      	negs	r3, r3
 80019a0:	191b      	adds	r3, r3, r4
 80019a2:	18c0      	adds	r0, r0, r3
 80019a4:	e64f      	b.n	8001646 <__aeabi_ddiv+0x1c6>
 80019a6:	42b2      	cmp	r2, r6
 80019a8:	d800      	bhi.n	80019ac <__aeabi_ddiv+0x52c>
 80019aa:	e612      	b.n	80015d2 <__aeabi_ddiv+0x152>
 80019ac:	1e83      	subs	r3, r0, #2
 80019ae:	1936      	adds	r6, r6, r4
 80019b0:	e60f      	b.n	80015d2 <__aeabi_ddiv+0x152>
 80019b2:	428a      	cmp	r2, r1
 80019b4:	d800      	bhi.n	80019b8 <__aeabi_ddiv+0x538>
 80019b6:	e5fa      	b.n	80015ae <__aeabi_ddiv+0x12e>
 80019b8:	1e83      	subs	r3, r0, #2
 80019ba:	4698      	mov	r8, r3
 80019bc:	1909      	adds	r1, r1, r4
 80019be:	e5f6      	b.n	80015ae <__aeabi_ddiv+0x12e>
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <__aeabi_ddiv+0x5d4>)
 80019c2:	0028      	movs	r0, r5
 80019c4:	445b      	add	r3, fp
 80019c6:	4641      	mov	r1, r8
 80019c8:	409d      	lsls	r5, r3
 80019ca:	4099      	lsls	r1, r3
 80019cc:	40d0      	lsrs	r0, r2
 80019ce:	1e6b      	subs	r3, r5, #1
 80019d0:	419d      	sbcs	r5, r3
 80019d2:	4643      	mov	r3, r8
 80019d4:	4301      	orrs	r1, r0
 80019d6:	4329      	orrs	r1, r5
 80019d8:	40d3      	lsrs	r3, r2
 80019da:	074a      	lsls	r2, r1, #29
 80019dc:	d100      	bne.n	80019e0 <__aeabi_ddiv+0x560>
 80019de:	e755      	b.n	800188c <__aeabi_ddiv+0x40c>
 80019e0:	220f      	movs	r2, #15
 80019e2:	400a      	ands	r2, r1
 80019e4:	2a04      	cmp	r2, #4
 80019e6:	d000      	beq.n	80019ea <__aeabi_ddiv+0x56a>
 80019e8:	e74a      	b.n	8001880 <__aeabi_ddiv+0x400>
 80019ea:	e74f      	b.n	800188c <__aeabi_ddiv+0x40c>
 80019ec:	0015      	movs	r5, r2
 80019ee:	4286      	cmp	r6, r0
 80019f0:	d000      	beq.n	80019f4 <__aeabi_ddiv+0x574>
 80019f2:	e66d      	b.n	80016d0 <__aeabi_ddiv+0x250>
 80019f4:	9a00      	ldr	r2, [sp, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d000      	beq.n	80019fc <__aeabi_ddiv+0x57c>
 80019fa:	e669      	b.n	80016d0 <__aeabi_ddiv+0x250>
 80019fc:	e66a      	b.n	80016d4 <__aeabi_ddiv+0x254>
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <__aeabi_ddiv+0x5d8>)
 8001a00:	445b      	add	r3, fp
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_ddiv+0x588>
 8001a06:	e713      	b.n	8001830 <__aeabi_ddiv+0x3b0>
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	44a8      	add	r8, r5
 8001a0e:	e66a      	b.n	80016e6 <__aeabi_ddiv+0x266>
 8001a10:	075d      	lsls	r5, r3, #29
 8001a12:	025b      	lsls	r3, r3, #9
 8001a14:	0b1a      	lsrs	r2, r3, #12
 8001a16:	08c9      	lsrs	r1, r1, #3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	430d      	orrs	r5, r1
 8001a1c:	e587      	b.n	800152e <__aeabi_ddiv+0xae>
 8001a1e:	9900      	ldr	r1, [sp, #0]
 8001a20:	3d02      	subs	r5, #2
 8001a22:	004a      	lsls	r2, r1, #1
 8001a24:	428a      	cmp	r2, r1
 8001a26:	41bf      	sbcs	r7, r7
 8001a28:	427f      	negs	r7, r7
 8001a2a:	193f      	adds	r7, r7, r4
 8001a2c:	19f6      	adds	r6, r6, r7
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	e7dd      	b.n	80019ee <__aeabi_ddiv+0x56e>
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	4643      	mov	r3, r8
 8001a36:	0312      	lsls	r2, r2, #12
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	0312      	lsls	r2, r2, #12
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 8001a3e:	0b12      	lsrs	r2, r2, #12
 8001a40:	e575      	b.n	800152e <__aeabi_ddiv+0xae>
 8001a42:	9900      	ldr	r1, [sp, #0]
 8001a44:	4299      	cmp	r1, r3
 8001a46:	d3ea      	bcc.n	8001a1e <__aeabi_ddiv+0x59e>
 8001a48:	0015      	movs	r5, r2
 8001a4a:	e7d3      	b.n	80019f4 <__aeabi_ddiv+0x574>
 8001a4c:	000007ff 	.word	0x000007ff
 8001a50:	0000043e 	.word	0x0000043e
 8001a54:	0000041e 	.word	0x0000041e
 8001a58:	000003ff 	.word	0x000003ff

08001a5c <__eqdf2>:
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	464e      	mov	r6, r9
 8001a60:	4645      	mov	r5, r8
 8001a62:	46de      	mov	lr, fp
 8001a64:	4657      	mov	r7, sl
 8001a66:	4690      	mov	r8, r2
 8001a68:	b5e0      	push	{r5, r6, r7, lr}
 8001a6a:	0017      	movs	r7, r2
 8001a6c:	031a      	lsls	r2, r3, #12
 8001a6e:	0b12      	lsrs	r2, r2, #12
 8001a70:	0005      	movs	r5, r0
 8001a72:	4684      	mov	ip, r0
 8001a74:	4819      	ldr	r0, [pc, #100]	; (8001adc <__eqdf2+0x80>)
 8001a76:	030e      	lsls	r6, r1, #12
 8001a78:	004c      	lsls	r4, r1, #1
 8001a7a:	4691      	mov	r9, r2
 8001a7c:	005a      	lsls	r2, r3, #1
 8001a7e:	0fdb      	lsrs	r3, r3, #31
 8001a80:	469b      	mov	fp, r3
 8001a82:	0b36      	lsrs	r6, r6, #12
 8001a84:	0d64      	lsrs	r4, r4, #21
 8001a86:	0fc9      	lsrs	r1, r1, #31
 8001a88:	0d52      	lsrs	r2, r2, #21
 8001a8a:	4284      	cmp	r4, r0
 8001a8c:	d019      	beq.n	8001ac2 <__eqdf2+0x66>
 8001a8e:	4282      	cmp	r2, r0
 8001a90:	d010      	beq.n	8001ab4 <__eqdf2+0x58>
 8001a92:	2001      	movs	r0, #1
 8001a94:	4294      	cmp	r4, r2
 8001a96:	d10e      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001a98:	454e      	cmp	r6, r9
 8001a9a:	d10c      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	45c4      	cmp	ip, r8
 8001aa0:	d109      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001aa2:	4559      	cmp	r1, fp
 8001aa4:	d017      	beq.n	8001ad6 <__eqdf2+0x7a>
 8001aa6:	2c00      	cmp	r4, #0
 8001aa8:	d105      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001aaa:	0030      	movs	r0, r6
 8001aac:	4328      	orrs	r0, r5
 8001aae:	1e43      	subs	r3, r0, #1
 8001ab0:	4198      	sbcs	r0, r3
 8001ab2:	e000      	b.n	8001ab6 <__eqdf2+0x5a>
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ab8:	46bb      	mov	fp, r7
 8001aba:	46b2      	mov	sl, r6
 8001abc:	46a9      	mov	r9, r5
 8001abe:	46a0      	mov	r8, r4
 8001ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac2:	0033      	movs	r3, r6
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	432b      	orrs	r3, r5
 8001ac8:	d1f5      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001aca:	42a2      	cmp	r2, r4
 8001acc:	d1f3      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001ace:	464b      	mov	r3, r9
 8001ad0:	433b      	orrs	r3, r7
 8001ad2:	d1f0      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001ad4:	e7e2      	b.n	8001a9c <__eqdf2+0x40>
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	e7ed      	b.n	8001ab6 <__eqdf2+0x5a>
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	000007ff 	.word	0x000007ff

08001ae0 <__gedf2>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4647      	mov	r7, r8
 8001ae4:	46ce      	mov	lr, r9
 8001ae6:	0004      	movs	r4, r0
 8001ae8:	0018      	movs	r0, r3
 8001aea:	0016      	movs	r6, r2
 8001aec:	031b      	lsls	r3, r3, #12
 8001aee:	0b1b      	lsrs	r3, r3, #12
 8001af0:	4d2d      	ldr	r5, [pc, #180]	; (8001ba8 <__gedf2+0xc8>)
 8001af2:	004a      	lsls	r2, r1, #1
 8001af4:	4699      	mov	r9, r3
 8001af6:	b580      	push	{r7, lr}
 8001af8:	0043      	lsls	r3, r0, #1
 8001afa:	030f      	lsls	r7, r1, #12
 8001afc:	46a4      	mov	ip, r4
 8001afe:	46b0      	mov	r8, r6
 8001b00:	0b3f      	lsrs	r7, r7, #12
 8001b02:	0d52      	lsrs	r2, r2, #21
 8001b04:	0fc9      	lsrs	r1, r1, #31
 8001b06:	0d5b      	lsrs	r3, r3, #21
 8001b08:	0fc0      	lsrs	r0, r0, #31
 8001b0a:	42aa      	cmp	r2, r5
 8001b0c:	d021      	beq.n	8001b52 <__gedf2+0x72>
 8001b0e:	42ab      	cmp	r3, r5
 8001b10:	d013      	beq.n	8001b3a <__gedf2+0x5a>
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	d122      	bne.n	8001b5c <__gedf2+0x7c>
 8001b16:	433c      	orrs	r4, r7
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <__gedf2+0x42>
 8001b1c:	464d      	mov	r5, r9
 8001b1e:	432e      	orrs	r6, r5
 8001b20:	d022      	beq.n	8001b68 <__gedf2+0x88>
 8001b22:	2c00      	cmp	r4, #0
 8001b24:	d010      	beq.n	8001b48 <__gedf2+0x68>
 8001b26:	4281      	cmp	r1, r0
 8001b28:	d022      	beq.n	8001b70 <__gedf2+0x90>
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	3901      	subs	r1, #1
 8001b2e:	4008      	ands	r0, r1
 8001b30:	3801      	subs	r0, #1
 8001b32:	bcc0      	pop	{r6, r7}
 8001b34:	46b9      	mov	r9, r7
 8001b36:	46b0      	mov	r8, r6
 8001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3a:	464d      	mov	r5, r9
 8001b3c:	432e      	orrs	r6, r5
 8001b3e:	d129      	bne.n	8001b94 <__gedf2+0xb4>
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	d1f0      	bne.n	8001b26 <__gedf2+0x46>
 8001b44:	433c      	orrs	r4, r7
 8001b46:	d1ee      	bne.n	8001b26 <__gedf2+0x46>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d1f2      	bne.n	8001b32 <__gedf2+0x52>
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	4240      	negs	r0, r0
 8001b50:	e7ef      	b.n	8001b32 <__gedf2+0x52>
 8001b52:	003d      	movs	r5, r7
 8001b54:	4325      	orrs	r5, r4
 8001b56:	d11d      	bne.n	8001b94 <__gedf2+0xb4>
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d0ee      	beq.n	8001b3a <__gedf2+0x5a>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e2      	bne.n	8001b26 <__gedf2+0x46>
 8001b60:	464c      	mov	r4, r9
 8001b62:	4326      	orrs	r6, r4
 8001b64:	d1df      	bne.n	8001b26 <__gedf2+0x46>
 8001b66:	e7e0      	b.n	8001b2a <__gedf2+0x4a>
 8001b68:	2000      	movs	r0, #0
 8001b6a:	2c00      	cmp	r4, #0
 8001b6c:	d0e1      	beq.n	8001b32 <__gedf2+0x52>
 8001b6e:	e7dc      	b.n	8001b2a <__gedf2+0x4a>
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dc0a      	bgt.n	8001b8a <__gedf2+0xaa>
 8001b74:	dbe8      	blt.n	8001b48 <__gedf2+0x68>
 8001b76:	454f      	cmp	r7, r9
 8001b78:	d8d7      	bhi.n	8001b2a <__gedf2+0x4a>
 8001b7a:	d00e      	beq.n	8001b9a <__gedf2+0xba>
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	454f      	cmp	r7, r9
 8001b80:	d2d7      	bcs.n	8001b32 <__gedf2+0x52>
 8001b82:	2900      	cmp	r1, #0
 8001b84:	d0e2      	beq.n	8001b4c <__gedf2+0x6c>
 8001b86:	0008      	movs	r0, r1
 8001b88:	e7d3      	b.n	8001b32 <__gedf2+0x52>
 8001b8a:	4243      	negs	r3, r0
 8001b8c:	4158      	adcs	r0, r3
 8001b8e:	0040      	lsls	r0, r0, #1
 8001b90:	3801      	subs	r0, #1
 8001b92:	e7ce      	b.n	8001b32 <__gedf2+0x52>
 8001b94:	2002      	movs	r0, #2
 8001b96:	4240      	negs	r0, r0
 8001b98:	e7cb      	b.n	8001b32 <__gedf2+0x52>
 8001b9a:	45c4      	cmp	ip, r8
 8001b9c:	d8c5      	bhi.n	8001b2a <__gedf2+0x4a>
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	45c4      	cmp	ip, r8
 8001ba2:	d2c6      	bcs.n	8001b32 <__gedf2+0x52>
 8001ba4:	e7ed      	b.n	8001b82 <__gedf2+0xa2>
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	000007ff 	.word	0x000007ff

08001bac <__ledf2>:
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bae:	4647      	mov	r7, r8
 8001bb0:	46ce      	mov	lr, r9
 8001bb2:	0004      	movs	r4, r0
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	0016      	movs	r6, r2
 8001bb8:	031b      	lsls	r3, r3, #12
 8001bba:	0b1b      	lsrs	r3, r3, #12
 8001bbc:	4d2c      	ldr	r5, [pc, #176]	; (8001c70 <__ledf2+0xc4>)
 8001bbe:	004a      	lsls	r2, r1, #1
 8001bc0:	4699      	mov	r9, r3
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	0043      	lsls	r3, r0, #1
 8001bc6:	030f      	lsls	r7, r1, #12
 8001bc8:	46a4      	mov	ip, r4
 8001bca:	46b0      	mov	r8, r6
 8001bcc:	0b3f      	lsrs	r7, r7, #12
 8001bce:	0d52      	lsrs	r2, r2, #21
 8001bd0:	0fc9      	lsrs	r1, r1, #31
 8001bd2:	0d5b      	lsrs	r3, r3, #21
 8001bd4:	0fc0      	lsrs	r0, r0, #31
 8001bd6:	42aa      	cmp	r2, r5
 8001bd8:	d00d      	beq.n	8001bf6 <__ledf2+0x4a>
 8001bda:	42ab      	cmp	r3, r5
 8001bdc:	d010      	beq.n	8001c00 <__ledf2+0x54>
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	d127      	bne.n	8001c32 <__ledf2+0x86>
 8001be2:	433c      	orrs	r4, r7
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d111      	bne.n	8001c0c <__ledf2+0x60>
 8001be8:	464d      	mov	r5, r9
 8001bea:	432e      	orrs	r6, r5
 8001bec:	d10e      	bne.n	8001c0c <__ledf2+0x60>
 8001bee:	2000      	movs	r0, #0
 8001bf0:	2c00      	cmp	r4, #0
 8001bf2:	d015      	beq.n	8001c20 <__ledf2+0x74>
 8001bf4:	e00e      	b.n	8001c14 <__ledf2+0x68>
 8001bf6:	003d      	movs	r5, r7
 8001bf8:	4325      	orrs	r5, r4
 8001bfa:	d110      	bne.n	8001c1e <__ledf2+0x72>
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d118      	bne.n	8001c32 <__ledf2+0x86>
 8001c00:	464d      	mov	r5, r9
 8001c02:	432e      	orrs	r6, r5
 8001c04:	d10b      	bne.n	8001c1e <__ledf2+0x72>
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d102      	bne.n	8001c10 <__ledf2+0x64>
 8001c0a:	433c      	orrs	r4, r7
 8001c0c:	2c00      	cmp	r4, #0
 8001c0e:	d00b      	beq.n	8001c28 <__ledf2+0x7c>
 8001c10:	4281      	cmp	r1, r0
 8001c12:	d014      	beq.n	8001c3e <__ledf2+0x92>
 8001c14:	2002      	movs	r0, #2
 8001c16:	3901      	subs	r1, #1
 8001c18:	4008      	ands	r0, r1
 8001c1a:	3801      	subs	r0, #1
 8001c1c:	e000      	b.n	8001c20 <__ledf2+0x74>
 8001c1e:	2002      	movs	r0, #2
 8001c20:	bcc0      	pop	{r6, r7}
 8001c22:	46b9      	mov	r9, r7
 8001c24:	46b0      	mov	r8, r6
 8001c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d1f9      	bne.n	8001c20 <__ledf2+0x74>
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	4240      	negs	r0, r0
 8001c30:	e7f6      	b.n	8001c20 <__ledf2+0x74>
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ec      	bne.n	8001c10 <__ledf2+0x64>
 8001c36:	464c      	mov	r4, r9
 8001c38:	4326      	orrs	r6, r4
 8001c3a:	d1e9      	bne.n	8001c10 <__ledf2+0x64>
 8001c3c:	e7ea      	b.n	8001c14 <__ledf2+0x68>
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dd04      	ble.n	8001c4c <__ledf2+0xa0>
 8001c42:	4243      	negs	r3, r0
 8001c44:	4158      	adcs	r0, r3
 8001c46:	0040      	lsls	r0, r0, #1
 8001c48:	3801      	subs	r0, #1
 8001c4a:	e7e9      	b.n	8001c20 <__ledf2+0x74>
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbeb      	blt.n	8001c28 <__ledf2+0x7c>
 8001c50:	454f      	cmp	r7, r9
 8001c52:	d8df      	bhi.n	8001c14 <__ledf2+0x68>
 8001c54:	d006      	beq.n	8001c64 <__ledf2+0xb8>
 8001c56:	2000      	movs	r0, #0
 8001c58:	454f      	cmp	r7, r9
 8001c5a:	d2e1      	bcs.n	8001c20 <__ledf2+0x74>
 8001c5c:	2900      	cmp	r1, #0
 8001c5e:	d0e5      	beq.n	8001c2c <__ledf2+0x80>
 8001c60:	0008      	movs	r0, r1
 8001c62:	e7dd      	b.n	8001c20 <__ledf2+0x74>
 8001c64:	45c4      	cmp	ip, r8
 8001c66:	d8d5      	bhi.n	8001c14 <__ledf2+0x68>
 8001c68:	2000      	movs	r0, #0
 8001c6a:	45c4      	cmp	ip, r8
 8001c6c:	d2d8      	bcs.n	8001c20 <__ledf2+0x74>
 8001c6e:	e7f5      	b.n	8001c5c <__ledf2+0xb0>
 8001c70:	000007ff 	.word	0x000007ff

08001c74 <__aeabi_dmul>:
 8001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c76:	4645      	mov	r5, r8
 8001c78:	46de      	mov	lr, fp
 8001c7a:	4657      	mov	r7, sl
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	b5e0      	push	{r5, r6, r7, lr}
 8001c80:	001f      	movs	r7, r3
 8001c82:	030b      	lsls	r3, r1, #12
 8001c84:	0b1b      	lsrs	r3, r3, #12
 8001c86:	469b      	mov	fp, r3
 8001c88:	004d      	lsls	r5, r1, #1
 8001c8a:	0fcb      	lsrs	r3, r1, #31
 8001c8c:	0004      	movs	r4, r0
 8001c8e:	4691      	mov	r9, r2
 8001c90:	4698      	mov	r8, r3
 8001c92:	b087      	sub	sp, #28
 8001c94:	0d6d      	lsrs	r5, r5, #21
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dmul+0x26>
 8001c98:	e1cd      	b.n	8002036 <__aeabi_dmul+0x3c2>
 8001c9a:	4bce      	ldr	r3, [pc, #824]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001c9c:	429d      	cmp	r5, r3
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dmul+0x2e>
 8001ca0:	e1e9      	b.n	8002076 <__aeabi_dmul+0x402>
 8001ca2:	465a      	mov	r2, fp
 8001ca4:	0f43      	lsrs	r3, r0, #29
 8001ca6:	00d2      	lsls	r2, r2, #3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	0412      	lsls	r2, r2, #16
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	00c3      	lsls	r3, r0, #3
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4bc8      	ldr	r3, [pc, #800]	; (8001fd8 <__aeabi_dmul+0x364>)
 8001cb6:	4693      	mov	fp, r2
 8001cb8:	469c      	mov	ip, r3
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2600      	movs	r6, #0
 8001cbe:	4465      	add	r5, ip
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	033c      	lsls	r4, r7, #12
 8001cc4:	007b      	lsls	r3, r7, #1
 8001cc6:	4648      	mov	r0, r9
 8001cc8:	0b24      	lsrs	r4, r4, #12
 8001cca:	0d5b      	lsrs	r3, r3, #21
 8001ccc:	0fff      	lsrs	r7, r7, #31
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dmul+0x60>
 8001cd2:	e189      	b.n	8001fe8 <__aeabi_dmul+0x374>
 8001cd4:	4abf      	ldr	r2, [pc, #764]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d019      	beq.n	8001d0e <__aeabi_dmul+0x9a>
 8001cda:	0f42      	lsrs	r2, r0, #29
 8001cdc:	00e4      	lsls	r4, r4, #3
 8001cde:	4322      	orrs	r2, r4
 8001ce0:	2480      	movs	r4, #128	; 0x80
 8001ce2:	0424      	lsls	r4, r4, #16
 8001ce4:	4314      	orrs	r4, r2
 8001ce6:	4abc      	ldr	r2, [pc, #752]	; (8001fd8 <__aeabi_dmul+0x364>)
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4694      	mov	ip, r2
 8001cec:	4642      	mov	r2, r8
 8001cee:	4463      	add	r3, ip
 8001cf0:	195b      	adds	r3, r3, r5
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	9b01      	ldr	r3, [sp, #4]
 8001cf6:	407a      	eors	r2, r7
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	00c0      	lsls	r0, r0, #3
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	2e0a      	cmp	r6, #10
 8001d02:	dd1c      	ble.n	8001d3e <__aeabi_dmul+0xca>
 8001d04:	003a      	movs	r2, r7
 8001d06:	2e0b      	cmp	r6, #11
 8001d08:	d05e      	beq.n	8001dc8 <__aeabi_dmul+0x154>
 8001d0a:	4647      	mov	r7, r8
 8001d0c:	e056      	b.n	8001dbc <__aeabi_dmul+0x148>
 8001d0e:	4649      	mov	r1, r9
 8001d10:	4bb0      	ldr	r3, [pc, #704]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001d12:	4321      	orrs	r1, r4
 8001d14:	18eb      	adds	r3, r5, r3
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2900      	cmp	r1, #0
 8001d1a:	d12a      	bne.n	8001d72 <__aeabi_dmul+0xfe>
 8001d1c:	2080      	movs	r0, #128	; 0x80
 8001d1e:	2202      	movs	r2, #2
 8001d20:	0100      	lsls	r0, r0, #4
 8001d22:	002b      	movs	r3, r5
 8001d24:	4684      	mov	ip, r0
 8001d26:	4316      	orrs	r6, r2
 8001d28:	4642      	mov	r2, r8
 8001d2a:	4463      	add	r3, ip
 8001d2c:	407a      	eors	r2, r7
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	9302      	str	r3, [sp, #8]
 8001d32:	2e0a      	cmp	r6, #10
 8001d34:	dd00      	ble.n	8001d38 <__aeabi_dmul+0xc4>
 8001d36:	e231      	b.n	800219c <__aeabi_dmul+0x528>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	2400      	movs	r4, #0
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	2e02      	cmp	r6, #2
 8001d40:	dc26      	bgt.n	8001d90 <__aeabi_dmul+0x11c>
 8001d42:	3e01      	subs	r6, #1
 8001d44:	2e01      	cmp	r6, #1
 8001d46:	d852      	bhi.n	8001dee <__aeabi_dmul+0x17a>
 8001d48:	2902      	cmp	r1, #2
 8001d4a:	d04c      	beq.n	8001de6 <__aeabi_dmul+0x172>
 8001d4c:	2901      	cmp	r1, #1
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dmul+0xde>
 8001d50:	e118      	b.n	8001f84 <__aeabi_dmul+0x310>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2400      	movs	r4, #0
 8001d56:	2500      	movs	r5, #0
 8001d58:	051b      	lsls	r3, r3, #20
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	07d2      	lsls	r2, r2, #31
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	0028      	movs	r0, r5
 8001d62:	0019      	movs	r1, r3
 8001d64:	b007      	add	sp, #28
 8001d66:	bcf0      	pop	{r4, r5, r6, r7}
 8001d68:	46bb      	mov	fp, r7
 8001d6a:	46b2      	mov	sl, r6
 8001d6c:	46a9      	mov	r9, r5
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	2203      	movs	r2, #3
 8001d76:	0109      	lsls	r1, r1, #4
 8001d78:	002b      	movs	r3, r5
 8001d7a:	468c      	mov	ip, r1
 8001d7c:	4316      	orrs	r6, r2
 8001d7e:	4642      	mov	r2, r8
 8001d80:	4463      	add	r3, ip
 8001d82:	407a      	eors	r2, r7
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	2e0a      	cmp	r6, #10
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_dmul+0x11a>
 8001d8c:	e228      	b.n	80021e0 <__aeabi_dmul+0x56c>
 8001d8e:	2103      	movs	r1, #3
 8001d90:	2501      	movs	r5, #1
 8001d92:	40b5      	lsls	r5, r6
 8001d94:	46ac      	mov	ip, r5
 8001d96:	26a6      	movs	r6, #166	; 0xa6
 8001d98:	4663      	mov	r3, ip
 8001d9a:	00f6      	lsls	r6, r6, #3
 8001d9c:	4035      	ands	r5, r6
 8001d9e:	4233      	tst	r3, r6
 8001da0:	d10b      	bne.n	8001dba <__aeabi_dmul+0x146>
 8001da2:	2690      	movs	r6, #144	; 0x90
 8001da4:	00b6      	lsls	r6, r6, #2
 8001da6:	4233      	tst	r3, r6
 8001da8:	d118      	bne.n	8001ddc <__aeabi_dmul+0x168>
 8001daa:	3eb9      	subs	r6, #185	; 0xb9
 8001dac:	3eff      	subs	r6, #255	; 0xff
 8001dae:	421e      	tst	r6, r3
 8001db0:	d01d      	beq.n	8001dee <__aeabi_dmul+0x17a>
 8001db2:	46a3      	mov	fp, r4
 8001db4:	4682      	mov	sl, r0
 8001db6:	9100      	str	r1, [sp, #0]
 8001db8:	e000      	b.n	8001dbc <__aeabi_dmul+0x148>
 8001dba:	0017      	movs	r7, r2
 8001dbc:	9900      	ldr	r1, [sp, #0]
 8001dbe:	003a      	movs	r2, r7
 8001dc0:	2902      	cmp	r1, #2
 8001dc2:	d010      	beq.n	8001de6 <__aeabi_dmul+0x172>
 8001dc4:	465c      	mov	r4, fp
 8001dc6:	4650      	mov	r0, sl
 8001dc8:	2903      	cmp	r1, #3
 8001dca:	d1bf      	bne.n	8001d4c <__aeabi_dmul+0xd8>
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	031b      	lsls	r3, r3, #12
 8001dd0:	431c      	orrs	r4, r3
 8001dd2:	0324      	lsls	r4, r4, #12
 8001dd4:	0005      	movs	r5, r0
 8001dd6:	4b7f      	ldr	r3, [pc, #508]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001dd8:	0b24      	lsrs	r4, r4, #12
 8001dda:	e7bd      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001ddc:	2480      	movs	r4, #128	; 0x80
 8001dde:	2200      	movs	r2, #0
 8001de0:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001de2:	0324      	lsls	r4, r4, #12
 8001de4:	e7b8      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001de6:	2400      	movs	r4, #0
 8001de8:	2500      	movs	r5, #0
 8001dea:	4b7a      	ldr	r3, [pc, #488]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001dec:	e7b4      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001dee:	4653      	mov	r3, sl
 8001df0:	041e      	lsls	r6, r3, #16
 8001df2:	0c36      	lsrs	r6, r6, #16
 8001df4:	0c1f      	lsrs	r7, r3, #16
 8001df6:	0033      	movs	r3, r6
 8001df8:	0c01      	lsrs	r1, r0, #16
 8001dfa:	0400      	lsls	r0, r0, #16
 8001dfc:	0c00      	lsrs	r0, r0, #16
 8001dfe:	4343      	muls	r3, r0
 8001e00:	4698      	mov	r8, r3
 8001e02:	0003      	movs	r3, r0
 8001e04:	437b      	muls	r3, r7
 8001e06:	4699      	mov	r9, r3
 8001e08:	0033      	movs	r3, r6
 8001e0a:	434b      	muls	r3, r1
 8001e0c:	469c      	mov	ip, r3
 8001e0e:	4643      	mov	r3, r8
 8001e10:	000d      	movs	r5, r1
 8001e12:	0c1b      	lsrs	r3, r3, #16
 8001e14:	469a      	mov	sl, r3
 8001e16:	437d      	muls	r5, r7
 8001e18:	44cc      	add	ip, r9
 8001e1a:	44d4      	add	ip, sl
 8001e1c:	9500      	str	r5, [sp, #0]
 8001e1e:	45e1      	cmp	r9, ip
 8001e20:	d904      	bls.n	8001e2c <__aeabi_dmul+0x1b8>
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	025b      	lsls	r3, r3, #9
 8001e26:	4699      	mov	r9, r3
 8001e28:	444d      	add	r5, r9
 8001e2a:	9500      	str	r5, [sp, #0]
 8001e2c:	4663      	mov	r3, ip
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	001d      	movs	r5, r3
 8001e32:	4663      	mov	r3, ip
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	469c      	mov	ip, r3
 8001e38:	4643      	mov	r3, r8
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	4698      	mov	r8, r3
 8001e40:	4663      	mov	r3, ip
 8001e42:	4443      	add	r3, r8
 8001e44:	9303      	str	r3, [sp, #12]
 8001e46:	0c23      	lsrs	r3, r4, #16
 8001e48:	4698      	mov	r8, r3
 8001e4a:	0033      	movs	r3, r6
 8001e4c:	0424      	lsls	r4, r4, #16
 8001e4e:	0c24      	lsrs	r4, r4, #16
 8001e50:	4363      	muls	r3, r4
 8001e52:	469c      	mov	ip, r3
 8001e54:	0023      	movs	r3, r4
 8001e56:	437b      	muls	r3, r7
 8001e58:	4699      	mov	r9, r3
 8001e5a:	4643      	mov	r3, r8
 8001e5c:	435e      	muls	r6, r3
 8001e5e:	435f      	muls	r7, r3
 8001e60:	444e      	add	r6, r9
 8001e62:	4663      	mov	r3, ip
 8001e64:	46b2      	mov	sl, r6
 8001e66:	0c1e      	lsrs	r6, r3, #16
 8001e68:	4456      	add	r6, sl
 8001e6a:	45b1      	cmp	r9, r6
 8001e6c:	d903      	bls.n	8001e76 <__aeabi_dmul+0x202>
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	4699      	mov	r9, r3
 8001e74:	444f      	add	r7, r9
 8001e76:	0c33      	lsrs	r3, r6, #16
 8001e78:	4699      	mov	r9, r3
 8001e7a:	003b      	movs	r3, r7
 8001e7c:	444b      	add	r3, r9
 8001e7e:	9305      	str	r3, [sp, #20]
 8001e80:	4663      	mov	r3, ip
 8001e82:	46ac      	mov	ip, r5
 8001e84:	041f      	lsls	r7, r3, #16
 8001e86:	0c3f      	lsrs	r7, r7, #16
 8001e88:	0436      	lsls	r6, r6, #16
 8001e8a:	19f6      	adds	r6, r6, r7
 8001e8c:	44b4      	add	ip, r6
 8001e8e:	4663      	mov	r3, ip
 8001e90:	9304      	str	r3, [sp, #16]
 8001e92:	465b      	mov	r3, fp
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	469c      	mov	ip, r3
 8001e98:	465b      	mov	r3, fp
 8001e9a:	041f      	lsls	r7, r3, #16
 8001e9c:	0c3f      	lsrs	r7, r7, #16
 8001e9e:	003b      	movs	r3, r7
 8001ea0:	4343      	muls	r3, r0
 8001ea2:	4699      	mov	r9, r3
 8001ea4:	4663      	mov	r3, ip
 8001ea6:	4343      	muls	r3, r0
 8001ea8:	469a      	mov	sl, r3
 8001eaa:	464b      	mov	r3, r9
 8001eac:	4660      	mov	r0, ip
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	469b      	mov	fp, r3
 8001eb2:	4348      	muls	r0, r1
 8001eb4:	4379      	muls	r1, r7
 8001eb6:	4451      	add	r1, sl
 8001eb8:	4459      	add	r1, fp
 8001eba:	458a      	cmp	sl, r1
 8001ebc:	d903      	bls.n	8001ec6 <__aeabi_dmul+0x252>
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	025b      	lsls	r3, r3, #9
 8001ec2:	469a      	mov	sl, r3
 8001ec4:	4450      	add	r0, sl
 8001ec6:	0c0b      	lsrs	r3, r1, #16
 8001ec8:	469a      	mov	sl, r3
 8001eca:	464b      	mov	r3, r9
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	0c1b      	lsrs	r3, r3, #16
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	003b      	movs	r3, r7
 8001ed4:	4363      	muls	r3, r4
 8001ed6:	0409      	lsls	r1, r1, #16
 8001ed8:	4645      	mov	r5, r8
 8001eda:	4449      	add	r1, r9
 8001edc:	4699      	mov	r9, r3
 8001ede:	4663      	mov	r3, ip
 8001ee0:	435c      	muls	r4, r3
 8001ee2:	436b      	muls	r3, r5
 8001ee4:	469c      	mov	ip, r3
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	4698      	mov	r8, r3
 8001eec:	436f      	muls	r7, r5
 8001eee:	193f      	adds	r7, r7, r4
 8001ef0:	4447      	add	r7, r8
 8001ef2:	4450      	add	r0, sl
 8001ef4:	42bc      	cmp	r4, r7
 8001ef6:	d903      	bls.n	8001f00 <__aeabi_dmul+0x28c>
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	025b      	lsls	r3, r3, #9
 8001efc:	4698      	mov	r8, r3
 8001efe:	44c4      	add	ip, r8
 8001f00:	9b04      	ldr	r3, [sp, #16]
 8001f02:	9d00      	ldr	r5, [sp, #0]
 8001f04:	4698      	mov	r8, r3
 8001f06:	4445      	add	r5, r8
 8001f08:	42b5      	cmp	r5, r6
 8001f0a:	41b6      	sbcs	r6, r6
 8001f0c:	4273      	negs	r3, r6
 8001f0e:	4698      	mov	r8, r3
 8001f10:	464b      	mov	r3, r9
 8001f12:	041e      	lsls	r6, r3, #16
 8001f14:	9b05      	ldr	r3, [sp, #20]
 8001f16:	043c      	lsls	r4, r7, #16
 8001f18:	4699      	mov	r9, r3
 8001f1a:	0c36      	lsrs	r6, r6, #16
 8001f1c:	19a4      	adds	r4, r4, r6
 8001f1e:	444c      	add	r4, r9
 8001f20:	46a1      	mov	r9, r4
 8001f22:	4683      	mov	fp, r0
 8001f24:	186e      	adds	r6, r5, r1
 8001f26:	44c1      	add	r9, r8
 8001f28:	428e      	cmp	r6, r1
 8001f2a:	4189      	sbcs	r1, r1
 8001f2c:	44cb      	add	fp, r9
 8001f2e:	465d      	mov	r5, fp
 8001f30:	4249      	negs	r1, r1
 8001f32:	186d      	adds	r5, r5, r1
 8001f34:	429c      	cmp	r4, r3
 8001f36:	41a4      	sbcs	r4, r4
 8001f38:	45c1      	cmp	r9, r8
 8001f3a:	419b      	sbcs	r3, r3
 8001f3c:	4583      	cmp	fp, r0
 8001f3e:	4180      	sbcs	r0, r0
 8001f40:	428d      	cmp	r5, r1
 8001f42:	4189      	sbcs	r1, r1
 8001f44:	425b      	negs	r3, r3
 8001f46:	4264      	negs	r4, r4
 8001f48:	431c      	orrs	r4, r3
 8001f4a:	4240      	negs	r0, r0
 8001f4c:	9b03      	ldr	r3, [sp, #12]
 8001f4e:	4249      	negs	r1, r1
 8001f50:	4301      	orrs	r1, r0
 8001f52:	0270      	lsls	r0, r6, #9
 8001f54:	0c3f      	lsrs	r7, r7, #16
 8001f56:	4318      	orrs	r0, r3
 8001f58:	19e4      	adds	r4, r4, r7
 8001f5a:	1e47      	subs	r7, r0, #1
 8001f5c:	41b8      	sbcs	r0, r7
 8001f5e:	1864      	adds	r4, r4, r1
 8001f60:	4464      	add	r4, ip
 8001f62:	0df6      	lsrs	r6, r6, #23
 8001f64:	0261      	lsls	r1, r4, #9
 8001f66:	4330      	orrs	r0, r6
 8001f68:	0dec      	lsrs	r4, r5, #23
 8001f6a:	026e      	lsls	r6, r5, #9
 8001f6c:	430c      	orrs	r4, r1
 8001f6e:	4330      	orrs	r0, r6
 8001f70:	01c9      	lsls	r1, r1, #7
 8001f72:	d400      	bmi.n	8001f76 <__aeabi_dmul+0x302>
 8001f74:	e0f1      	b.n	800215a <__aeabi_dmul+0x4e6>
 8001f76:	2101      	movs	r1, #1
 8001f78:	0843      	lsrs	r3, r0, #1
 8001f7a:	4001      	ands	r1, r0
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	07e0      	lsls	r0, r4, #31
 8001f80:	4318      	orrs	r0, r3
 8001f82:	0864      	lsrs	r4, r4, #1
 8001f84:	4915      	ldr	r1, [pc, #84]	; (8001fdc <__aeabi_dmul+0x368>)
 8001f86:	9b02      	ldr	r3, [sp, #8]
 8001f88:	468c      	mov	ip, r1
 8001f8a:	4463      	add	r3, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	dc00      	bgt.n	8001f92 <__aeabi_dmul+0x31e>
 8001f90:	e097      	b.n	80020c2 <__aeabi_dmul+0x44e>
 8001f92:	0741      	lsls	r1, r0, #29
 8001f94:	d009      	beq.n	8001faa <__aeabi_dmul+0x336>
 8001f96:	210f      	movs	r1, #15
 8001f98:	4001      	ands	r1, r0
 8001f9a:	2904      	cmp	r1, #4
 8001f9c:	d005      	beq.n	8001faa <__aeabi_dmul+0x336>
 8001f9e:	1d01      	adds	r1, r0, #4
 8001fa0:	4281      	cmp	r1, r0
 8001fa2:	4180      	sbcs	r0, r0
 8001fa4:	4240      	negs	r0, r0
 8001fa6:	1824      	adds	r4, r4, r0
 8001fa8:	0008      	movs	r0, r1
 8001faa:	01e1      	lsls	r1, r4, #7
 8001fac:	d506      	bpl.n	8001fbc <__aeabi_dmul+0x348>
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	00c9      	lsls	r1, r1, #3
 8001fb2:	468c      	mov	ip, r1
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <__aeabi_dmul+0x36c>)
 8001fb6:	401c      	ands	r4, r3
 8001fb8:	9b02      	ldr	r3, [sp, #8]
 8001fba:	4463      	add	r3, ip
 8001fbc:	4909      	ldr	r1, [pc, #36]	; (8001fe4 <__aeabi_dmul+0x370>)
 8001fbe:	428b      	cmp	r3, r1
 8001fc0:	dd00      	ble.n	8001fc4 <__aeabi_dmul+0x350>
 8001fc2:	e710      	b.n	8001de6 <__aeabi_dmul+0x172>
 8001fc4:	0761      	lsls	r1, r4, #29
 8001fc6:	08c5      	lsrs	r5, r0, #3
 8001fc8:	0264      	lsls	r4, r4, #9
 8001fca:	055b      	lsls	r3, r3, #21
 8001fcc:	430d      	orrs	r5, r1
 8001fce:	0b24      	lsrs	r4, r4, #12
 8001fd0:	0d5b      	lsrs	r3, r3, #21
 8001fd2:	e6c1      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001fd4:	000007ff 	.word	0x000007ff
 8001fd8:	fffffc01 	.word	0xfffffc01
 8001fdc:	000003ff 	.word	0x000003ff
 8001fe0:	feffffff 	.word	0xfeffffff
 8001fe4:	000007fe 	.word	0x000007fe
 8001fe8:	464b      	mov	r3, r9
 8001fea:	4323      	orrs	r3, r4
 8001fec:	d059      	beq.n	80020a2 <__aeabi_dmul+0x42e>
 8001fee:	2c00      	cmp	r4, #0
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dmul+0x380>
 8001ff2:	e0a3      	b.n	800213c <__aeabi_dmul+0x4c8>
 8001ff4:	0020      	movs	r0, r4
 8001ff6:	f000 fdf9 	bl	8002bec <__clzsi2>
 8001ffa:	0001      	movs	r1, r0
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	390b      	subs	r1, #11
 8002000:	221d      	movs	r2, #29
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	4649      	mov	r1, r9
 8002006:	0018      	movs	r0, r3
 8002008:	40d1      	lsrs	r1, r2
 800200a:	464a      	mov	r2, r9
 800200c:	3808      	subs	r0, #8
 800200e:	4082      	lsls	r2, r0
 8002010:	4084      	lsls	r4, r0
 8002012:	0010      	movs	r0, r2
 8002014:	430c      	orrs	r4, r1
 8002016:	4a74      	ldr	r2, [pc, #464]	; (80021e8 <__aeabi_dmul+0x574>)
 8002018:	1aeb      	subs	r3, r5, r3
 800201a:	4694      	mov	ip, r2
 800201c:	4642      	mov	r2, r8
 800201e:	4463      	add	r3, ip
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	9b01      	ldr	r3, [sp, #4]
 8002024:	407a      	eors	r2, r7
 8002026:	3301      	adds	r3, #1
 8002028:	2100      	movs	r1, #0
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	2e0a      	cmp	r6, #10
 8002030:	dd00      	ble.n	8002034 <__aeabi_dmul+0x3c0>
 8002032:	e667      	b.n	8001d04 <__aeabi_dmul+0x90>
 8002034:	e683      	b.n	8001d3e <__aeabi_dmul+0xca>
 8002036:	465b      	mov	r3, fp
 8002038:	4303      	orrs	r3, r0
 800203a:	469a      	mov	sl, r3
 800203c:	d02a      	beq.n	8002094 <__aeabi_dmul+0x420>
 800203e:	465b      	mov	r3, fp
 8002040:	2b00      	cmp	r3, #0
 8002042:	d06d      	beq.n	8002120 <__aeabi_dmul+0x4ac>
 8002044:	4658      	mov	r0, fp
 8002046:	f000 fdd1 	bl	8002bec <__clzsi2>
 800204a:	0001      	movs	r1, r0
 800204c:	0003      	movs	r3, r0
 800204e:	390b      	subs	r1, #11
 8002050:	221d      	movs	r2, #29
 8002052:	1a52      	subs	r2, r2, r1
 8002054:	0021      	movs	r1, r4
 8002056:	0018      	movs	r0, r3
 8002058:	465d      	mov	r5, fp
 800205a:	40d1      	lsrs	r1, r2
 800205c:	3808      	subs	r0, #8
 800205e:	4085      	lsls	r5, r0
 8002060:	000a      	movs	r2, r1
 8002062:	4084      	lsls	r4, r0
 8002064:	432a      	orrs	r2, r5
 8002066:	4693      	mov	fp, r2
 8002068:	46a2      	mov	sl, r4
 800206a:	4d5f      	ldr	r5, [pc, #380]	; (80021e8 <__aeabi_dmul+0x574>)
 800206c:	2600      	movs	r6, #0
 800206e:	1aed      	subs	r5, r5, r3
 8002070:	2300      	movs	r3, #0
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	e625      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 8002076:	465b      	mov	r3, fp
 8002078:	4303      	orrs	r3, r0
 800207a:	469a      	mov	sl, r3
 800207c:	d105      	bne.n	800208a <__aeabi_dmul+0x416>
 800207e:	2300      	movs	r3, #0
 8002080:	469b      	mov	fp, r3
 8002082:	3302      	adds	r3, #2
 8002084:	2608      	movs	r6, #8
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	e61b      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 800208a:	2303      	movs	r3, #3
 800208c:	4682      	mov	sl, r0
 800208e:	260c      	movs	r6, #12
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	e616      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 8002094:	2300      	movs	r3, #0
 8002096:	469b      	mov	fp, r3
 8002098:	3301      	adds	r3, #1
 800209a:	2604      	movs	r6, #4
 800209c:	2500      	movs	r5, #0
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	e60f      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 80020a2:	4642      	mov	r2, r8
 80020a4:	3301      	adds	r3, #1
 80020a6:	9501      	str	r5, [sp, #4]
 80020a8:	431e      	orrs	r6, r3
 80020aa:	9b01      	ldr	r3, [sp, #4]
 80020ac:	407a      	eors	r2, r7
 80020ae:	3301      	adds	r3, #1
 80020b0:	2400      	movs	r4, #0
 80020b2:	2000      	movs	r0, #0
 80020b4:	2101      	movs	r1, #1
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	2e0a      	cmp	r6, #10
 80020bc:	dd00      	ble.n	80020c0 <__aeabi_dmul+0x44c>
 80020be:	e621      	b.n	8001d04 <__aeabi_dmul+0x90>
 80020c0:	e63d      	b.n	8001d3e <__aeabi_dmul+0xca>
 80020c2:	2101      	movs	r1, #1
 80020c4:	1ac9      	subs	r1, r1, r3
 80020c6:	2938      	cmp	r1, #56	; 0x38
 80020c8:	dd00      	ble.n	80020cc <__aeabi_dmul+0x458>
 80020ca:	e642      	b.n	8001d52 <__aeabi_dmul+0xde>
 80020cc:	291f      	cmp	r1, #31
 80020ce:	dd47      	ble.n	8002160 <__aeabi_dmul+0x4ec>
 80020d0:	261f      	movs	r6, #31
 80020d2:	0025      	movs	r5, r4
 80020d4:	4276      	negs	r6, r6
 80020d6:	1af3      	subs	r3, r6, r3
 80020d8:	40dd      	lsrs	r5, r3
 80020da:	002b      	movs	r3, r5
 80020dc:	2920      	cmp	r1, #32
 80020de:	d005      	beq.n	80020ec <__aeabi_dmul+0x478>
 80020e0:	4942      	ldr	r1, [pc, #264]	; (80021ec <__aeabi_dmul+0x578>)
 80020e2:	9d02      	ldr	r5, [sp, #8]
 80020e4:	468c      	mov	ip, r1
 80020e6:	4465      	add	r5, ip
 80020e8:	40ac      	lsls	r4, r5
 80020ea:	4320      	orrs	r0, r4
 80020ec:	1e41      	subs	r1, r0, #1
 80020ee:	4188      	sbcs	r0, r1
 80020f0:	4318      	orrs	r0, r3
 80020f2:	2307      	movs	r3, #7
 80020f4:	001d      	movs	r5, r3
 80020f6:	2400      	movs	r4, #0
 80020f8:	4005      	ands	r5, r0
 80020fa:	4203      	tst	r3, r0
 80020fc:	d04a      	beq.n	8002194 <__aeabi_dmul+0x520>
 80020fe:	230f      	movs	r3, #15
 8002100:	2400      	movs	r4, #0
 8002102:	4003      	ands	r3, r0
 8002104:	2b04      	cmp	r3, #4
 8002106:	d042      	beq.n	800218e <__aeabi_dmul+0x51a>
 8002108:	1d03      	adds	r3, r0, #4
 800210a:	4283      	cmp	r3, r0
 800210c:	4180      	sbcs	r0, r0
 800210e:	4240      	negs	r0, r0
 8002110:	1824      	adds	r4, r4, r0
 8002112:	0018      	movs	r0, r3
 8002114:	0223      	lsls	r3, r4, #8
 8002116:	d53a      	bpl.n	800218e <__aeabi_dmul+0x51a>
 8002118:	2301      	movs	r3, #1
 800211a:	2400      	movs	r4, #0
 800211c:	2500      	movs	r5, #0
 800211e:	e61b      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8002120:	f000 fd64 	bl	8002bec <__clzsi2>
 8002124:	0001      	movs	r1, r0
 8002126:	0003      	movs	r3, r0
 8002128:	3115      	adds	r1, #21
 800212a:	3320      	adds	r3, #32
 800212c:	291c      	cmp	r1, #28
 800212e:	dd8f      	ble.n	8002050 <__aeabi_dmul+0x3dc>
 8002130:	3808      	subs	r0, #8
 8002132:	2200      	movs	r2, #0
 8002134:	4084      	lsls	r4, r0
 8002136:	4692      	mov	sl, r2
 8002138:	46a3      	mov	fp, r4
 800213a:	e796      	b.n	800206a <__aeabi_dmul+0x3f6>
 800213c:	f000 fd56 	bl	8002bec <__clzsi2>
 8002140:	0001      	movs	r1, r0
 8002142:	0003      	movs	r3, r0
 8002144:	3115      	adds	r1, #21
 8002146:	3320      	adds	r3, #32
 8002148:	291c      	cmp	r1, #28
 800214a:	dc00      	bgt.n	800214e <__aeabi_dmul+0x4da>
 800214c:	e758      	b.n	8002000 <__aeabi_dmul+0x38c>
 800214e:	0002      	movs	r2, r0
 8002150:	464c      	mov	r4, r9
 8002152:	3a08      	subs	r2, #8
 8002154:	2000      	movs	r0, #0
 8002156:	4094      	lsls	r4, r2
 8002158:	e75d      	b.n	8002016 <__aeabi_dmul+0x3a2>
 800215a:	9b01      	ldr	r3, [sp, #4]
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	e711      	b.n	8001f84 <__aeabi_dmul+0x310>
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <__aeabi_dmul+0x57c>)
 8002162:	0026      	movs	r6, r4
 8002164:	469c      	mov	ip, r3
 8002166:	0003      	movs	r3, r0
 8002168:	9d02      	ldr	r5, [sp, #8]
 800216a:	40cb      	lsrs	r3, r1
 800216c:	4465      	add	r5, ip
 800216e:	40ae      	lsls	r6, r5
 8002170:	431e      	orrs	r6, r3
 8002172:	0003      	movs	r3, r0
 8002174:	40ab      	lsls	r3, r5
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	4183      	sbcs	r3, r0
 800217a:	0030      	movs	r0, r6
 800217c:	4318      	orrs	r0, r3
 800217e:	40cc      	lsrs	r4, r1
 8002180:	0743      	lsls	r3, r0, #29
 8002182:	d0c7      	beq.n	8002114 <__aeabi_dmul+0x4a0>
 8002184:	230f      	movs	r3, #15
 8002186:	4003      	ands	r3, r0
 8002188:	2b04      	cmp	r3, #4
 800218a:	d1bd      	bne.n	8002108 <__aeabi_dmul+0x494>
 800218c:	e7c2      	b.n	8002114 <__aeabi_dmul+0x4a0>
 800218e:	0765      	lsls	r5, r4, #29
 8002190:	0264      	lsls	r4, r4, #9
 8002192:	0b24      	lsrs	r4, r4, #12
 8002194:	08c0      	lsrs	r0, r0, #3
 8002196:	2300      	movs	r3, #0
 8002198:	4305      	orrs	r5, r0
 800219a:	e5dd      	b.n	8001d58 <__aeabi_dmul+0xe4>
 800219c:	2500      	movs	r5, #0
 800219e:	2302      	movs	r3, #2
 80021a0:	2e0f      	cmp	r6, #15
 80021a2:	d10c      	bne.n	80021be <__aeabi_dmul+0x54a>
 80021a4:	2480      	movs	r4, #128	; 0x80
 80021a6:	465b      	mov	r3, fp
 80021a8:	0324      	lsls	r4, r4, #12
 80021aa:	4223      	tst	r3, r4
 80021ac:	d00e      	beq.n	80021cc <__aeabi_dmul+0x558>
 80021ae:	4221      	tst	r1, r4
 80021b0:	d10c      	bne.n	80021cc <__aeabi_dmul+0x558>
 80021b2:	430c      	orrs	r4, r1
 80021b4:	0324      	lsls	r4, r4, #12
 80021b6:	003a      	movs	r2, r7
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <__aeabi_dmul+0x580>)
 80021ba:	0b24      	lsrs	r4, r4, #12
 80021bc:	e5cc      	b.n	8001d58 <__aeabi_dmul+0xe4>
 80021be:	2e0b      	cmp	r6, #11
 80021c0:	d000      	beq.n	80021c4 <__aeabi_dmul+0x550>
 80021c2:	e5a2      	b.n	8001d0a <__aeabi_dmul+0x96>
 80021c4:	468b      	mov	fp, r1
 80021c6:	46aa      	mov	sl, r5
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	e5f7      	b.n	8001dbc <__aeabi_dmul+0x148>
 80021cc:	2480      	movs	r4, #128	; 0x80
 80021ce:	465b      	mov	r3, fp
 80021d0:	0324      	lsls	r4, r4, #12
 80021d2:	431c      	orrs	r4, r3
 80021d4:	0324      	lsls	r4, r4, #12
 80021d6:	4642      	mov	r2, r8
 80021d8:	4655      	mov	r5, sl
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <__aeabi_dmul+0x580>)
 80021dc:	0b24      	lsrs	r4, r4, #12
 80021de:	e5bb      	b.n	8001d58 <__aeabi_dmul+0xe4>
 80021e0:	464d      	mov	r5, r9
 80021e2:	0021      	movs	r1, r4
 80021e4:	2303      	movs	r3, #3
 80021e6:	e7db      	b.n	80021a0 <__aeabi_dmul+0x52c>
 80021e8:	fffffc0d 	.word	0xfffffc0d
 80021ec:	0000043e 	.word	0x0000043e
 80021f0:	0000041e 	.word	0x0000041e
 80021f4:	000007ff 	.word	0x000007ff

080021f8 <__aeabi_dsub>:
 80021f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fa:	4657      	mov	r7, sl
 80021fc:	464e      	mov	r6, r9
 80021fe:	4645      	mov	r5, r8
 8002200:	46de      	mov	lr, fp
 8002202:	b5e0      	push	{r5, r6, r7, lr}
 8002204:	000d      	movs	r5, r1
 8002206:	0004      	movs	r4, r0
 8002208:	0019      	movs	r1, r3
 800220a:	0010      	movs	r0, r2
 800220c:	032b      	lsls	r3, r5, #12
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	0f62      	lsrs	r2, r4, #29
 8002212:	431a      	orrs	r2, r3
 8002214:	00e3      	lsls	r3, r4, #3
 8002216:	030c      	lsls	r4, r1, #12
 8002218:	0a64      	lsrs	r4, r4, #9
 800221a:	0f47      	lsrs	r7, r0, #29
 800221c:	4327      	orrs	r7, r4
 800221e:	4cd0      	ldr	r4, [pc, #832]	; (8002560 <__aeabi_dsub+0x368>)
 8002220:	006e      	lsls	r6, r5, #1
 8002222:	4691      	mov	r9, r2
 8002224:	b083      	sub	sp, #12
 8002226:	004a      	lsls	r2, r1, #1
 8002228:	00c0      	lsls	r0, r0, #3
 800222a:	4698      	mov	r8, r3
 800222c:	46a2      	mov	sl, r4
 800222e:	0d76      	lsrs	r6, r6, #21
 8002230:	0fed      	lsrs	r5, r5, #31
 8002232:	0d52      	lsrs	r2, r2, #21
 8002234:	0fc9      	lsrs	r1, r1, #31
 8002236:	9001      	str	r0, [sp, #4]
 8002238:	42a2      	cmp	r2, r4
 800223a:	d100      	bne.n	800223e <__aeabi_dsub+0x46>
 800223c:	e0b9      	b.n	80023b2 <__aeabi_dsub+0x1ba>
 800223e:	2401      	movs	r4, #1
 8002240:	4061      	eors	r1, r4
 8002242:	468b      	mov	fp, r1
 8002244:	428d      	cmp	r5, r1
 8002246:	d100      	bne.n	800224a <__aeabi_dsub+0x52>
 8002248:	e08d      	b.n	8002366 <__aeabi_dsub+0x16e>
 800224a:	1ab4      	subs	r4, r6, r2
 800224c:	46a4      	mov	ip, r4
 800224e:	2c00      	cmp	r4, #0
 8002250:	dc00      	bgt.n	8002254 <__aeabi_dsub+0x5c>
 8002252:	e0b7      	b.n	80023c4 <__aeabi_dsub+0x1cc>
 8002254:	2a00      	cmp	r2, #0
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x62>
 8002258:	e0cb      	b.n	80023f2 <__aeabi_dsub+0x1fa>
 800225a:	4ac1      	ldr	r2, [pc, #772]	; (8002560 <__aeabi_dsub+0x368>)
 800225c:	4296      	cmp	r6, r2
 800225e:	d100      	bne.n	8002262 <__aeabi_dsub+0x6a>
 8002260:	e186      	b.n	8002570 <__aeabi_dsub+0x378>
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	0412      	lsls	r2, r2, #16
 8002266:	4317      	orrs	r7, r2
 8002268:	4662      	mov	r2, ip
 800226a:	2a38      	cmp	r2, #56	; 0x38
 800226c:	dd00      	ble.n	8002270 <__aeabi_dsub+0x78>
 800226e:	e1a4      	b.n	80025ba <__aeabi_dsub+0x3c2>
 8002270:	2a1f      	cmp	r2, #31
 8002272:	dd00      	ble.n	8002276 <__aeabi_dsub+0x7e>
 8002274:	e21d      	b.n	80026b2 <__aeabi_dsub+0x4ba>
 8002276:	4661      	mov	r1, ip
 8002278:	2220      	movs	r2, #32
 800227a:	003c      	movs	r4, r7
 800227c:	1a52      	subs	r2, r2, r1
 800227e:	0001      	movs	r1, r0
 8002280:	4090      	lsls	r0, r2
 8002282:	4094      	lsls	r4, r2
 8002284:	1e42      	subs	r2, r0, #1
 8002286:	4190      	sbcs	r0, r2
 8002288:	4662      	mov	r2, ip
 800228a:	46a0      	mov	r8, r4
 800228c:	4664      	mov	r4, ip
 800228e:	40d7      	lsrs	r7, r2
 8002290:	464a      	mov	r2, r9
 8002292:	40e1      	lsrs	r1, r4
 8002294:	4644      	mov	r4, r8
 8002296:	1bd2      	subs	r2, r2, r7
 8002298:	4691      	mov	r9, r2
 800229a:	430c      	orrs	r4, r1
 800229c:	4304      	orrs	r4, r0
 800229e:	1b1c      	subs	r4, r3, r4
 80022a0:	42a3      	cmp	r3, r4
 80022a2:	4192      	sbcs	r2, r2
 80022a4:	464b      	mov	r3, r9
 80022a6:	4252      	negs	r2, r2
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	469a      	mov	sl, r3
 80022ac:	4653      	mov	r3, sl
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	d400      	bmi.n	80022b4 <__aeabi_dsub+0xbc>
 80022b2:	e12b      	b.n	800250c <__aeabi_dsub+0x314>
 80022b4:	4653      	mov	r3, sl
 80022b6:	025a      	lsls	r2, r3, #9
 80022b8:	0a53      	lsrs	r3, r2, #9
 80022ba:	469a      	mov	sl, r3
 80022bc:	4653      	mov	r3, sl
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d100      	bne.n	80022c4 <__aeabi_dsub+0xcc>
 80022c2:	e166      	b.n	8002592 <__aeabi_dsub+0x39a>
 80022c4:	4650      	mov	r0, sl
 80022c6:	f000 fc91 	bl	8002bec <__clzsi2>
 80022ca:	0003      	movs	r3, r0
 80022cc:	3b08      	subs	r3, #8
 80022ce:	2220      	movs	r2, #32
 80022d0:	0020      	movs	r0, r4
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	4651      	mov	r1, sl
 80022d6:	40d0      	lsrs	r0, r2
 80022d8:	4099      	lsls	r1, r3
 80022da:	0002      	movs	r2, r0
 80022dc:	409c      	lsls	r4, r3
 80022de:	430a      	orrs	r2, r1
 80022e0:	429e      	cmp	r6, r3
 80022e2:	dd00      	ble.n	80022e6 <__aeabi_dsub+0xee>
 80022e4:	e164      	b.n	80025b0 <__aeabi_dsub+0x3b8>
 80022e6:	1b9b      	subs	r3, r3, r6
 80022e8:	1c59      	adds	r1, r3, #1
 80022ea:	291f      	cmp	r1, #31
 80022ec:	dd00      	ble.n	80022f0 <__aeabi_dsub+0xf8>
 80022ee:	e0fe      	b.n	80024ee <__aeabi_dsub+0x2f6>
 80022f0:	2320      	movs	r3, #32
 80022f2:	0010      	movs	r0, r2
 80022f4:	0026      	movs	r6, r4
 80022f6:	1a5b      	subs	r3, r3, r1
 80022f8:	409c      	lsls	r4, r3
 80022fa:	4098      	lsls	r0, r3
 80022fc:	40ce      	lsrs	r6, r1
 80022fe:	40ca      	lsrs	r2, r1
 8002300:	1e63      	subs	r3, r4, #1
 8002302:	419c      	sbcs	r4, r3
 8002304:	4330      	orrs	r0, r6
 8002306:	4692      	mov	sl, r2
 8002308:	2600      	movs	r6, #0
 800230a:	4304      	orrs	r4, r0
 800230c:	0763      	lsls	r3, r4, #29
 800230e:	d009      	beq.n	8002324 <__aeabi_dsub+0x12c>
 8002310:	230f      	movs	r3, #15
 8002312:	4023      	ands	r3, r4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d005      	beq.n	8002324 <__aeabi_dsub+0x12c>
 8002318:	1d23      	adds	r3, r4, #4
 800231a:	42a3      	cmp	r3, r4
 800231c:	41a4      	sbcs	r4, r4
 800231e:	4264      	negs	r4, r4
 8002320:	44a2      	add	sl, r4
 8002322:	001c      	movs	r4, r3
 8002324:	4653      	mov	r3, sl
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	d400      	bmi.n	800232c <__aeabi_dsub+0x134>
 800232a:	e0f2      	b.n	8002512 <__aeabi_dsub+0x31a>
 800232c:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <__aeabi_dsub+0x368>)
 800232e:	3601      	adds	r6, #1
 8002330:	429e      	cmp	r6, r3
 8002332:	d100      	bne.n	8002336 <__aeabi_dsub+0x13e>
 8002334:	e10f      	b.n	8002556 <__aeabi_dsub+0x35e>
 8002336:	4653      	mov	r3, sl
 8002338:	498a      	ldr	r1, [pc, #552]	; (8002564 <__aeabi_dsub+0x36c>)
 800233a:	08e4      	lsrs	r4, r4, #3
 800233c:	400b      	ands	r3, r1
 800233e:	0019      	movs	r1, r3
 8002340:	075b      	lsls	r3, r3, #29
 8002342:	4323      	orrs	r3, r4
 8002344:	0572      	lsls	r2, r6, #21
 8002346:	024c      	lsls	r4, r1, #9
 8002348:	0b24      	lsrs	r4, r4, #12
 800234a:	0d52      	lsrs	r2, r2, #21
 800234c:	0512      	lsls	r2, r2, #20
 800234e:	4322      	orrs	r2, r4
 8002350:	07ed      	lsls	r5, r5, #31
 8002352:	432a      	orrs	r2, r5
 8002354:	0018      	movs	r0, r3
 8002356:	0011      	movs	r1, r2
 8002358:	b003      	add	sp, #12
 800235a:	bcf0      	pop	{r4, r5, r6, r7}
 800235c:	46bb      	mov	fp, r7
 800235e:	46b2      	mov	sl, r6
 8002360:	46a9      	mov	r9, r5
 8002362:	46a0      	mov	r8, r4
 8002364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002366:	1ab4      	subs	r4, r6, r2
 8002368:	46a4      	mov	ip, r4
 800236a:	2c00      	cmp	r4, #0
 800236c:	dd59      	ble.n	8002422 <__aeabi_dsub+0x22a>
 800236e:	2a00      	cmp	r2, #0
 8002370:	d100      	bne.n	8002374 <__aeabi_dsub+0x17c>
 8002372:	e0b0      	b.n	80024d6 <__aeabi_dsub+0x2de>
 8002374:	4556      	cmp	r6, sl
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x182>
 8002378:	e0fa      	b.n	8002570 <__aeabi_dsub+0x378>
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	0412      	lsls	r2, r2, #16
 800237e:	4317      	orrs	r7, r2
 8002380:	4662      	mov	r2, ip
 8002382:	2a38      	cmp	r2, #56	; 0x38
 8002384:	dd00      	ble.n	8002388 <__aeabi_dsub+0x190>
 8002386:	e0d4      	b.n	8002532 <__aeabi_dsub+0x33a>
 8002388:	2a1f      	cmp	r2, #31
 800238a:	dc00      	bgt.n	800238e <__aeabi_dsub+0x196>
 800238c:	e1c0      	b.n	8002710 <__aeabi_dsub+0x518>
 800238e:	0039      	movs	r1, r7
 8002390:	3a20      	subs	r2, #32
 8002392:	40d1      	lsrs	r1, r2
 8002394:	4662      	mov	r2, ip
 8002396:	2a20      	cmp	r2, #32
 8002398:	d006      	beq.n	80023a8 <__aeabi_dsub+0x1b0>
 800239a:	4664      	mov	r4, ip
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	1b12      	subs	r2, r2, r4
 80023a0:	003c      	movs	r4, r7
 80023a2:	4094      	lsls	r4, r2
 80023a4:	4304      	orrs	r4, r0
 80023a6:	9401      	str	r4, [sp, #4]
 80023a8:	9c01      	ldr	r4, [sp, #4]
 80023aa:	1e62      	subs	r2, r4, #1
 80023ac:	4194      	sbcs	r4, r2
 80023ae:	430c      	orrs	r4, r1
 80023b0:	e0c3      	b.n	800253a <__aeabi_dsub+0x342>
 80023b2:	003c      	movs	r4, r7
 80023b4:	4304      	orrs	r4, r0
 80023b6:	d02b      	beq.n	8002410 <__aeabi_dsub+0x218>
 80023b8:	468b      	mov	fp, r1
 80023ba:	428d      	cmp	r5, r1
 80023bc:	d02e      	beq.n	800241c <__aeabi_dsub+0x224>
 80023be:	4c6a      	ldr	r4, [pc, #424]	; (8002568 <__aeabi_dsub+0x370>)
 80023c0:	46a4      	mov	ip, r4
 80023c2:	44b4      	add	ip, r6
 80023c4:	4664      	mov	r4, ip
 80023c6:	2c00      	cmp	r4, #0
 80023c8:	d05f      	beq.n	800248a <__aeabi_dsub+0x292>
 80023ca:	1b94      	subs	r4, r2, r6
 80023cc:	46a4      	mov	ip, r4
 80023ce:	2e00      	cmp	r6, #0
 80023d0:	d000      	beq.n	80023d4 <__aeabi_dsub+0x1dc>
 80023d2:	e120      	b.n	8002616 <__aeabi_dsub+0x41e>
 80023d4:	464c      	mov	r4, r9
 80023d6:	431c      	orrs	r4, r3
 80023d8:	d100      	bne.n	80023dc <__aeabi_dsub+0x1e4>
 80023da:	e1c7      	b.n	800276c <__aeabi_dsub+0x574>
 80023dc:	4661      	mov	r1, ip
 80023de:	1e4c      	subs	r4, r1, #1
 80023e0:	2901      	cmp	r1, #1
 80023e2:	d100      	bne.n	80023e6 <__aeabi_dsub+0x1ee>
 80023e4:	e223      	b.n	800282e <__aeabi_dsub+0x636>
 80023e6:	4d5e      	ldr	r5, [pc, #376]	; (8002560 <__aeabi_dsub+0x368>)
 80023e8:	45ac      	cmp	ip, r5
 80023ea:	d100      	bne.n	80023ee <__aeabi_dsub+0x1f6>
 80023ec:	e1d8      	b.n	80027a0 <__aeabi_dsub+0x5a8>
 80023ee:	46a4      	mov	ip, r4
 80023f0:	e11a      	b.n	8002628 <__aeabi_dsub+0x430>
 80023f2:	003a      	movs	r2, r7
 80023f4:	4302      	orrs	r2, r0
 80023f6:	d100      	bne.n	80023fa <__aeabi_dsub+0x202>
 80023f8:	e0e4      	b.n	80025c4 <__aeabi_dsub+0x3cc>
 80023fa:	0022      	movs	r2, r4
 80023fc:	3a01      	subs	r2, #1
 80023fe:	2c01      	cmp	r4, #1
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x20c>
 8002402:	e1c3      	b.n	800278c <__aeabi_dsub+0x594>
 8002404:	4956      	ldr	r1, [pc, #344]	; (8002560 <__aeabi_dsub+0x368>)
 8002406:	428c      	cmp	r4, r1
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x214>
 800240a:	e0b1      	b.n	8002570 <__aeabi_dsub+0x378>
 800240c:	4694      	mov	ip, r2
 800240e:	e72b      	b.n	8002268 <__aeabi_dsub+0x70>
 8002410:	2401      	movs	r4, #1
 8002412:	4061      	eors	r1, r4
 8002414:	468b      	mov	fp, r1
 8002416:	428d      	cmp	r5, r1
 8002418:	d000      	beq.n	800241c <__aeabi_dsub+0x224>
 800241a:	e716      	b.n	800224a <__aeabi_dsub+0x52>
 800241c:	4952      	ldr	r1, [pc, #328]	; (8002568 <__aeabi_dsub+0x370>)
 800241e:	468c      	mov	ip, r1
 8002420:	44b4      	add	ip, r6
 8002422:	4664      	mov	r4, ip
 8002424:	2c00      	cmp	r4, #0
 8002426:	d100      	bne.n	800242a <__aeabi_dsub+0x232>
 8002428:	e0d3      	b.n	80025d2 <__aeabi_dsub+0x3da>
 800242a:	1b91      	subs	r1, r2, r6
 800242c:	468c      	mov	ip, r1
 800242e:	2e00      	cmp	r6, #0
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x23c>
 8002432:	e15e      	b.n	80026f2 <__aeabi_dsub+0x4fa>
 8002434:	494a      	ldr	r1, [pc, #296]	; (8002560 <__aeabi_dsub+0x368>)
 8002436:	428a      	cmp	r2, r1
 8002438:	d100      	bne.n	800243c <__aeabi_dsub+0x244>
 800243a:	e1be      	b.n	80027ba <__aeabi_dsub+0x5c2>
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	464c      	mov	r4, r9
 8002440:	0409      	lsls	r1, r1, #16
 8002442:	430c      	orrs	r4, r1
 8002444:	46a1      	mov	r9, r4
 8002446:	4661      	mov	r1, ip
 8002448:	2938      	cmp	r1, #56	; 0x38
 800244a:	dd00      	ble.n	800244e <__aeabi_dsub+0x256>
 800244c:	e1ba      	b.n	80027c4 <__aeabi_dsub+0x5cc>
 800244e:	291f      	cmp	r1, #31
 8002450:	dd00      	ble.n	8002454 <__aeabi_dsub+0x25c>
 8002452:	e227      	b.n	80028a4 <__aeabi_dsub+0x6ac>
 8002454:	2420      	movs	r4, #32
 8002456:	1a64      	subs	r4, r4, r1
 8002458:	4649      	mov	r1, r9
 800245a:	40a1      	lsls	r1, r4
 800245c:	001e      	movs	r6, r3
 800245e:	4688      	mov	r8, r1
 8002460:	4661      	mov	r1, ip
 8002462:	40a3      	lsls	r3, r4
 8002464:	40ce      	lsrs	r6, r1
 8002466:	4641      	mov	r1, r8
 8002468:	1e5c      	subs	r4, r3, #1
 800246a:	41a3      	sbcs	r3, r4
 800246c:	4331      	orrs	r1, r6
 800246e:	4319      	orrs	r1, r3
 8002470:	000c      	movs	r4, r1
 8002472:	4663      	mov	r3, ip
 8002474:	4649      	mov	r1, r9
 8002476:	40d9      	lsrs	r1, r3
 8002478:	187f      	adds	r7, r7, r1
 800247a:	1824      	adds	r4, r4, r0
 800247c:	4284      	cmp	r4, r0
 800247e:	419b      	sbcs	r3, r3
 8002480:	425b      	negs	r3, r3
 8002482:	469a      	mov	sl, r3
 8002484:	0016      	movs	r6, r2
 8002486:	44ba      	add	sl, r7
 8002488:	e05d      	b.n	8002546 <__aeabi_dsub+0x34e>
 800248a:	4c38      	ldr	r4, [pc, #224]	; (800256c <__aeabi_dsub+0x374>)
 800248c:	1c72      	adds	r2, r6, #1
 800248e:	4222      	tst	r2, r4
 8002490:	d000      	beq.n	8002494 <__aeabi_dsub+0x29c>
 8002492:	e0df      	b.n	8002654 <__aeabi_dsub+0x45c>
 8002494:	464a      	mov	r2, r9
 8002496:	431a      	orrs	r2, r3
 8002498:	2e00      	cmp	r6, #0
 800249a:	d000      	beq.n	800249e <__aeabi_dsub+0x2a6>
 800249c:	e15c      	b.n	8002758 <__aeabi_dsub+0x560>
 800249e:	2a00      	cmp	r2, #0
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x2ac>
 80024a2:	e1cf      	b.n	8002844 <__aeabi_dsub+0x64c>
 80024a4:	003a      	movs	r2, r7
 80024a6:	4302      	orrs	r2, r0
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x2b4>
 80024aa:	e17f      	b.n	80027ac <__aeabi_dsub+0x5b4>
 80024ac:	1a1c      	subs	r4, r3, r0
 80024ae:	464a      	mov	r2, r9
 80024b0:	42a3      	cmp	r3, r4
 80024b2:	4189      	sbcs	r1, r1
 80024b4:	1bd2      	subs	r2, r2, r7
 80024b6:	4249      	negs	r1, r1
 80024b8:	1a52      	subs	r2, r2, r1
 80024ba:	4692      	mov	sl, r2
 80024bc:	0212      	lsls	r2, r2, #8
 80024be:	d400      	bmi.n	80024c2 <__aeabi_dsub+0x2ca>
 80024c0:	e20a      	b.n	80028d8 <__aeabi_dsub+0x6e0>
 80024c2:	1ac4      	subs	r4, r0, r3
 80024c4:	42a0      	cmp	r0, r4
 80024c6:	4180      	sbcs	r0, r0
 80024c8:	464b      	mov	r3, r9
 80024ca:	4240      	negs	r0, r0
 80024cc:	1aff      	subs	r7, r7, r3
 80024ce:	1a3b      	subs	r3, r7, r0
 80024d0:	469a      	mov	sl, r3
 80024d2:	465d      	mov	r5, fp
 80024d4:	e71a      	b.n	800230c <__aeabi_dsub+0x114>
 80024d6:	003a      	movs	r2, r7
 80024d8:	4302      	orrs	r2, r0
 80024da:	d073      	beq.n	80025c4 <__aeabi_dsub+0x3cc>
 80024dc:	0022      	movs	r2, r4
 80024de:	3a01      	subs	r2, #1
 80024e0:	2c01      	cmp	r4, #1
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x2ee>
 80024e4:	e0cb      	b.n	800267e <__aeabi_dsub+0x486>
 80024e6:	4554      	cmp	r4, sl
 80024e8:	d042      	beq.n	8002570 <__aeabi_dsub+0x378>
 80024ea:	4694      	mov	ip, r2
 80024ec:	e748      	b.n	8002380 <__aeabi_dsub+0x188>
 80024ee:	0010      	movs	r0, r2
 80024f0:	3b1f      	subs	r3, #31
 80024f2:	40d8      	lsrs	r0, r3
 80024f4:	2920      	cmp	r1, #32
 80024f6:	d003      	beq.n	8002500 <__aeabi_dsub+0x308>
 80024f8:	2340      	movs	r3, #64	; 0x40
 80024fa:	1a5b      	subs	r3, r3, r1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	4314      	orrs	r4, r2
 8002500:	1e63      	subs	r3, r4, #1
 8002502:	419c      	sbcs	r4, r3
 8002504:	2300      	movs	r3, #0
 8002506:	2600      	movs	r6, #0
 8002508:	469a      	mov	sl, r3
 800250a:	4304      	orrs	r4, r0
 800250c:	0763      	lsls	r3, r4, #29
 800250e:	d000      	beq.n	8002512 <__aeabi_dsub+0x31a>
 8002510:	e6fe      	b.n	8002310 <__aeabi_dsub+0x118>
 8002512:	4652      	mov	r2, sl
 8002514:	08e3      	lsrs	r3, r4, #3
 8002516:	0752      	lsls	r2, r2, #29
 8002518:	4313      	orrs	r3, r2
 800251a:	4652      	mov	r2, sl
 800251c:	46b4      	mov	ip, r6
 800251e:	08d2      	lsrs	r2, r2, #3
 8002520:	490f      	ldr	r1, [pc, #60]	; (8002560 <__aeabi_dsub+0x368>)
 8002522:	458c      	cmp	ip, r1
 8002524:	d02a      	beq.n	800257c <__aeabi_dsub+0x384>
 8002526:	0312      	lsls	r2, r2, #12
 8002528:	0b14      	lsrs	r4, r2, #12
 800252a:	4662      	mov	r2, ip
 800252c:	0552      	lsls	r2, r2, #21
 800252e:	0d52      	lsrs	r2, r2, #21
 8002530:	e70c      	b.n	800234c <__aeabi_dsub+0x154>
 8002532:	003c      	movs	r4, r7
 8002534:	4304      	orrs	r4, r0
 8002536:	1e62      	subs	r2, r4, #1
 8002538:	4194      	sbcs	r4, r2
 800253a:	18e4      	adds	r4, r4, r3
 800253c:	429c      	cmp	r4, r3
 800253e:	4192      	sbcs	r2, r2
 8002540:	4252      	negs	r2, r2
 8002542:	444a      	add	r2, r9
 8002544:	4692      	mov	sl, r2
 8002546:	4653      	mov	r3, sl
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	d5df      	bpl.n	800250c <__aeabi_dsub+0x314>
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <__aeabi_dsub+0x368>)
 800254e:	3601      	adds	r6, #1
 8002550:	429e      	cmp	r6, r3
 8002552:	d000      	beq.n	8002556 <__aeabi_dsub+0x35e>
 8002554:	e0a0      	b.n	8002698 <__aeabi_dsub+0x4a0>
 8002556:	0032      	movs	r2, r6
 8002558:	2400      	movs	r4, #0
 800255a:	2300      	movs	r3, #0
 800255c:	e6f6      	b.n	800234c <__aeabi_dsub+0x154>
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	000007ff 	.word	0x000007ff
 8002564:	ff7fffff 	.word	0xff7fffff
 8002568:	fffff801 	.word	0xfffff801
 800256c:	000007fe 	.word	0x000007fe
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	464a      	mov	r2, r9
 8002574:	0752      	lsls	r2, r2, #29
 8002576:	4313      	orrs	r3, r2
 8002578:	464a      	mov	r2, r9
 800257a:	08d2      	lsrs	r2, r2, #3
 800257c:	0019      	movs	r1, r3
 800257e:	4311      	orrs	r1, r2
 8002580:	d100      	bne.n	8002584 <__aeabi_dsub+0x38c>
 8002582:	e1b5      	b.n	80028f0 <__aeabi_dsub+0x6f8>
 8002584:	2480      	movs	r4, #128	; 0x80
 8002586:	0324      	lsls	r4, r4, #12
 8002588:	4314      	orrs	r4, r2
 800258a:	0324      	lsls	r4, r4, #12
 800258c:	4ad5      	ldr	r2, [pc, #852]	; (80028e4 <__aeabi_dsub+0x6ec>)
 800258e:	0b24      	lsrs	r4, r4, #12
 8002590:	e6dc      	b.n	800234c <__aeabi_dsub+0x154>
 8002592:	0020      	movs	r0, r4
 8002594:	f000 fb2a 	bl	8002bec <__clzsi2>
 8002598:	0003      	movs	r3, r0
 800259a:	3318      	adds	r3, #24
 800259c:	2b1f      	cmp	r3, #31
 800259e:	dc00      	bgt.n	80025a2 <__aeabi_dsub+0x3aa>
 80025a0:	e695      	b.n	80022ce <__aeabi_dsub+0xd6>
 80025a2:	0022      	movs	r2, r4
 80025a4:	3808      	subs	r0, #8
 80025a6:	4082      	lsls	r2, r0
 80025a8:	2400      	movs	r4, #0
 80025aa:	429e      	cmp	r6, r3
 80025ac:	dc00      	bgt.n	80025b0 <__aeabi_dsub+0x3b8>
 80025ae:	e69a      	b.n	80022e6 <__aeabi_dsub+0xee>
 80025b0:	1af6      	subs	r6, r6, r3
 80025b2:	4bcd      	ldr	r3, [pc, #820]	; (80028e8 <__aeabi_dsub+0x6f0>)
 80025b4:	401a      	ands	r2, r3
 80025b6:	4692      	mov	sl, r2
 80025b8:	e6a8      	b.n	800230c <__aeabi_dsub+0x114>
 80025ba:	003c      	movs	r4, r7
 80025bc:	4304      	orrs	r4, r0
 80025be:	1e62      	subs	r2, r4, #1
 80025c0:	4194      	sbcs	r4, r2
 80025c2:	e66c      	b.n	800229e <__aeabi_dsub+0xa6>
 80025c4:	464a      	mov	r2, r9
 80025c6:	08db      	lsrs	r3, r3, #3
 80025c8:	0752      	lsls	r2, r2, #29
 80025ca:	4313      	orrs	r3, r2
 80025cc:	464a      	mov	r2, r9
 80025ce:	08d2      	lsrs	r2, r2, #3
 80025d0:	e7a6      	b.n	8002520 <__aeabi_dsub+0x328>
 80025d2:	4cc6      	ldr	r4, [pc, #792]	; (80028ec <__aeabi_dsub+0x6f4>)
 80025d4:	1c72      	adds	r2, r6, #1
 80025d6:	4222      	tst	r2, r4
 80025d8:	d000      	beq.n	80025dc <__aeabi_dsub+0x3e4>
 80025da:	e0ac      	b.n	8002736 <__aeabi_dsub+0x53e>
 80025dc:	464a      	mov	r2, r9
 80025de:	431a      	orrs	r2, r3
 80025e0:	2e00      	cmp	r6, #0
 80025e2:	d000      	beq.n	80025e6 <__aeabi_dsub+0x3ee>
 80025e4:	e105      	b.n	80027f2 <__aeabi_dsub+0x5fa>
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0x3f4>
 80025ea:	e156      	b.n	800289a <__aeabi_dsub+0x6a2>
 80025ec:	003a      	movs	r2, r7
 80025ee:	4302      	orrs	r2, r0
 80025f0:	d100      	bne.n	80025f4 <__aeabi_dsub+0x3fc>
 80025f2:	e0db      	b.n	80027ac <__aeabi_dsub+0x5b4>
 80025f4:	181c      	adds	r4, r3, r0
 80025f6:	429c      	cmp	r4, r3
 80025f8:	419b      	sbcs	r3, r3
 80025fa:	444f      	add	r7, r9
 80025fc:	46ba      	mov	sl, r7
 80025fe:	425b      	negs	r3, r3
 8002600:	449a      	add	sl, r3
 8002602:	4653      	mov	r3, sl
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	d400      	bmi.n	800260a <__aeabi_dsub+0x412>
 8002608:	e780      	b.n	800250c <__aeabi_dsub+0x314>
 800260a:	4652      	mov	r2, sl
 800260c:	4bb6      	ldr	r3, [pc, #728]	; (80028e8 <__aeabi_dsub+0x6f0>)
 800260e:	2601      	movs	r6, #1
 8002610:	401a      	ands	r2, r3
 8002612:	4692      	mov	sl, r2
 8002614:	e77a      	b.n	800250c <__aeabi_dsub+0x314>
 8002616:	4cb3      	ldr	r4, [pc, #716]	; (80028e4 <__aeabi_dsub+0x6ec>)
 8002618:	42a2      	cmp	r2, r4
 800261a:	d100      	bne.n	800261e <__aeabi_dsub+0x426>
 800261c:	e0c0      	b.n	80027a0 <__aeabi_dsub+0x5a8>
 800261e:	2480      	movs	r4, #128	; 0x80
 8002620:	464d      	mov	r5, r9
 8002622:	0424      	lsls	r4, r4, #16
 8002624:	4325      	orrs	r5, r4
 8002626:	46a9      	mov	r9, r5
 8002628:	4664      	mov	r4, ip
 800262a:	2c38      	cmp	r4, #56	; 0x38
 800262c:	dc53      	bgt.n	80026d6 <__aeabi_dsub+0x4de>
 800262e:	4661      	mov	r1, ip
 8002630:	2c1f      	cmp	r4, #31
 8002632:	dd00      	ble.n	8002636 <__aeabi_dsub+0x43e>
 8002634:	e0cd      	b.n	80027d2 <__aeabi_dsub+0x5da>
 8002636:	2520      	movs	r5, #32
 8002638:	001e      	movs	r6, r3
 800263a:	1b2d      	subs	r5, r5, r4
 800263c:	464c      	mov	r4, r9
 800263e:	40ab      	lsls	r3, r5
 8002640:	40ac      	lsls	r4, r5
 8002642:	40ce      	lsrs	r6, r1
 8002644:	1e5d      	subs	r5, r3, #1
 8002646:	41ab      	sbcs	r3, r5
 8002648:	4334      	orrs	r4, r6
 800264a:	4323      	orrs	r3, r4
 800264c:	464c      	mov	r4, r9
 800264e:	40cc      	lsrs	r4, r1
 8002650:	1b3f      	subs	r7, r7, r4
 8002652:	e045      	b.n	80026e0 <__aeabi_dsub+0x4e8>
 8002654:	464a      	mov	r2, r9
 8002656:	1a1c      	subs	r4, r3, r0
 8002658:	1bd1      	subs	r1, r2, r7
 800265a:	42a3      	cmp	r3, r4
 800265c:	4192      	sbcs	r2, r2
 800265e:	4252      	negs	r2, r2
 8002660:	4692      	mov	sl, r2
 8002662:	000a      	movs	r2, r1
 8002664:	4651      	mov	r1, sl
 8002666:	1a52      	subs	r2, r2, r1
 8002668:	4692      	mov	sl, r2
 800266a:	0212      	lsls	r2, r2, #8
 800266c:	d500      	bpl.n	8002670 <__aeabi_dsub+0x478>
 800266e:	e083      	b.n	8002778 <__aeabi_dsub+0x580>
 8002670:	4653      	mov	r3, sl
 8002672:	4323      	orrs	r3, r4
 8002674:	d000      	beq.n	8002678 <__aeabi_dsub+0x480>
 8002676:	e621      	b.n	80022bc <__aeabi_dsub+0xc4>
 8002678:	2200      	movs	r2, #0
 800267a:	2500      	movs	r5, #0
 800267c:	e753      	b.n	8002526 <__aeabi_dsub+0x32e>
 800267e:	181c      	adds	r4, r3, r0
 8002680:	429c      	cmp	r4, r3
 8002682:	419b      	sbcs	r3, r3
 8002684:	444f      	add	r7, r9
 8002686:	46ba      	mov	sl, r7
 8002688:	425b      	negs	r3, r3
 800268a:	449a      	add	sl, r3
 800268c:	4653      	mov	r3, sl
 800268e:	2601      	movs	r6, #1
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	d400      	bmi.n	8002696 <__aeabi_dsub+0x49e>
 8002694:	e73a      	b.n	800250c <__aeabi_dsub+0x314>
 8002696:	2602      	movs	r6, #2
 8002698:	4652      	mov	r2, sl
 800269a:	4b93      	ldr	r3, [pc, #588]	; (80028e8 <__aeabi_dsub+0x6f0>)
 800269c:	2101      	movs	r1, #1
 800269e:	401a      	ands	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	4021      	ands	r1, r4
 80026a4:	0862      	lsrs	r2, r4, #1
 80026a6:	430a      	orrs	r2, r1
 80026a8:	07dc      	lsls	r4, r3, #31
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	469a      	mov	sl, r3
 80026ae:	4314      	orrs	r4, r2
 80026b0:	e62c      	b.n	800230c <__aeabi_dsub+0x114>
 80026b2:	0039      	movs	r1, r7
 80026b4:	3a20      	subs	r2, #32
 80026b6:	40d1      	lsrs	r1, r2
 80026b8:	4662      	mov	r2, ip
 80026ba:	2a20      	cmp	r2, #32
 80026bc:	d006      	beq.n	80026cc <__aeabi_dsub+0x4d4>
 80026be:	4664      	mov	r4, ip
 80026c0:	2240      	movs	r2, #64	; 0x40
 80026c2:	1b12      	subs	r2, r2, r4
 80026c4:	003c      	movs	r4, r7
 80026c6:	4094      	lsls	r4, r2
 80026c8:	4304      	orrs	r4, r0
 80026ca:	9401      	str	r4, [sp, #4]
 80026cc:	9c01      	ldr	r4, [sp, #4]
 80026ce:	1e62      	subs	r2, r4, #1
 80026d0:	4194      	sbcs	r4, r2
 80026d2:	430c      	orrs	r4, r1
 80026d4:	e5e3      	b.n	800229e <__aeabi_dsub+0xa6>
 80026d6:	4649      	mov	r1, r9
 80026d8:	4319      	orrs	r1, r3
 80026da:	000b      	movs	r3, r1
 80026dc:	1e5c      	subs	r4, r3, #1
 80026de:	41a3      	sbcs	r3, r4
 80026e0:	1ac4      	subs	r4, r0, r3
 80026e2:	42a0      	cmp	r0, r4
 80026e4:	419b      	sbcs	r3, r3
 80026e6:	425b      	negs	r3, r3
 80026e8:	1afb      	subs	r3, r7, r3
 80026ea:	469a      	mov	sl, r3
 80026ec:	465d      	mov	r5, fp
 80026ee:	0016      	movs	r6, r2
 80026f0:	e5dc      	b.n	80022ac <__aeabi_dsub+0xb4>
 80026f2:	4649      	mov	r1, r9
 80026f4:	4319      	orrs	r1, r3
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x502>
 80026f8:	e0ae      	b.n	8002858 <__aeabi_dsub+0x660>
 80026fa:	4661      	mov	r1, ip
 80026fc:	4664      	mov	r4, ip
 80026fe:	3901      	subs	r1, #1
 8002700:	2c01      	cmp	r4, #1
 8002702:	d100      	bne.n	8002706 <__aeabi_dsub+0x50e>
 8002704:	e0e0      	b.n	80028c8 <__aeabi_dsub+0x6d0>
 8002706:	4c77      	ldr	r4, [pc, #476]	; (80028e4 <__aeabi_dsub+0x6ec>)
 8002708:	45a4      	cmp	ip, r4
 800270a:	d056      	beq.n	80027ba <__aeabi_dsub+0x5c2>
 800270c:	468c      	mov	ip, r1
 800270e:	e69a      	b.n	8002446 <__aeabi_dsub+0x24e>
 8002710:	4661      	mov	r1, ip
 8002712:	2220      	movs	r2, #32
 8002714:	003c      	movs	r4, r7
 8002716:	1a52      	subs	r2, r2, r1
 8002718:	4094      	lsls	r4, r2
 800271a:	0001      	movs	r1, r0
 800271c:	4090      	lsls	r0, r2
 800271e:	46a0      	mov	r8, r4
 8002720:	4664      	mov	r4, ip
 8002722:	1e42      	subs	r2, r0, #1
 8002724:	4190      	sbcs	r0, r2
 8002726:	4662      	mov	r2, ip
 8002728:	40e1      	lsrs	r1, r4
 800272a:	4644      	mov	r4, r8
 800272c:	40d7      	lsrs	r7, r2
 800272e:	430c      	orrs	r4, r1
 8002730:	4304      	orrs	r4, r0
 8002732:	44b9      	add	r9, r7
 8002734:	e701      	b.n	800253a <__aeabi_dsub+0x342>
 8002736:	496b      	ldr	r1, [pc, #428]	; (80028e4 <__aeabi_dsub+0x6ec>)
 8002738:	428a      	cmp	r2, r1
 800273a:	d100      	bne.n	800273e <__aeabi_dsub+0x546>
 800273c:	e70c      	b.n	8002558 <__aeabi_dsub+0x360>
 800273e:	1818      	adds	r0, r3, r0
 8002740:	4298      	cmp	r0, r3
 8002742:	419b      	sbcs	r3, r3
 8002744:	444f      	add	r7, r9
 8002746:	425b      	negs	r3, r3
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	07dc      	lsls	r4, r3, #31
 800274c:	0840      	lsrs	r0, r0, #1
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	469a      	mov	sl, r3
 8002752:	0016      	movs	r6, r2
 8002754:	4304      	orrs	r4, r0
 8002756:	e6d9      	b.n	800250c <__aeabi_dsub+0x314>
 8002758:	2a00      	cmp	r2, #0
 800275a:	d000      	beq.n	800275e <__aeabi_dsub+0x566>
 800275c:	e081      	b.n	8002862 <__aeabi_dsub+0x66a>
 800275e:	003b      	movs	r3, r7
 8002760:	4303      	orrs	r3, r0
 8002762:	d11d      	bne.n	80027a0 <__aeabi_dsub+0x5a8>
 8002764:	2280      	movs	r2, #128	; 0x80
 8002766:	2500      	movs	r5, #0
 8002768:	0312      	lsls	r2, r2, #12
 800276a:	e70b      	b.n	8002584 <__aeabi_dsub+0x38c>
 800276c:	08c0      	lsrs	r0, r0, #3
 800276e:	077b      	lsls	r3, r7, #29
 8002770:	465d      	mov	r5, fp
 8002772:	4303      	orrs	r3, r0
 8002774:	08fa      	lsrs	r2, r7, #3
 8002776:	e6d3      	b.n	8002520 <__aeabi_dsub+0x328>
 8002778:	1ac4      	subs	r4, r0, r3
 800277a:	42a0      	cmp	r0, r4
 800277c:	4180      	sbcs	r0, r0
 800277e:	464b      	mov	r3, r9
 8002780:	4240      	negs	r0, r0
 8002782:	1aff      	subs	r7, r7, r3
 8002784:	1a3b      	subs	r3, r7, r0
 8002786:	469a      	mov	sl, r3
 8002788:	465d      	mov	r5, fp
 800278a:	e597      	b.n	80022bc <__aeabi_dsub+0xc4>
 800278c:	1a1c      	subs	r4, r3, r0
 800278e:	464a      	mov	r2, r9
 8002790:	42a3      	cmp	r3, r4
 8002792:	419b      	sbcs	r3, r3
 8002794:	1bd7      	subs	r7, r2, r7
 8002796:	425b      	negs	r3, r3
 8002798:	1afb      	subs	r3, r7, r3
 800279a:	469a      	mov	sl, r3
 800279c:	2601      	movs	r6, #1
 800279e:	e585      	b.n	80022ac <__aeabi_dsub+0xb4>
 80027a0:	08c0      	lsrs	r0, r0, #3
 80027a2:	077b      	lsls	r3, r7, #29
 80027a4:	465d      	mov	r5, fp
 80027a6:	4303      	orrs	r3, r0
 80027a8:	08fa      	lsrs	r2, r7, #3
 80027aa:	e6e7      	b.n	800257c <__aeabi_dsub+0x384>
 80027ac:	464a      	mov	r2, r9
 80027ae:	08db      	lsrs	r3, r3, #3
 80027b0:	0752      	lsls	r2, r2, #29
 80027b2:	4313      	orrs	r3, r2
 80027b4:	464a      	mov	r2, r9
 80027b6:	08d2      	lsrs	r2, r2, #3
 80027b8:	e6b5      	b.n	8002526 <__aeabi_dsub+0x32e>
 80027ba:	08c0      	lsrs	r0, r0, #3
 80027bc:	077b      	lsls	r3, r7, #29
 80027be:	4303      	orrs	r3, r0
 80027c0:	08fa      	lsrs	r2, r7, #3
 80027c2:	e6db      	b.n	800257c <__aeabi_dsub+0x384>
 80027c4:	4649      	mov	r1, r9
 80027c6:	4319      	orrs	r1, r3
 80027c8:	000b      	movs	r3, r1
 80027ca:	1e59      	subs	r1, r3, #1
 80027cc:	418b      	sbcs	r3, r1
 80027ce:	001c      	movs	r4, r3
 80027d0:	e653      	b.n	800247a <__aeabi_dsub+0x282>
 80027d2:	464d      	mov	r5, r9
 80027d4:	3c20      	subs	r4, #32
 80027d6:	40e5      	lsrs	r5, r4
 80027d8:	2920      	cmp	r1, #32
 80027da:	d005      	beq.n	80027e8 <__aeabi_dsub+0x5f0>
 80027dc:	2440      	movs	r4, #64	; 0x40
 80027de:	1a64      	subs	r4, r4, r1
 80027e0:	4649      	mov	r1, r9
 80027e2:	40a1      	lsls	r1, r4
 80027e4:	430b      	orrs	r3, r1
 80027e6:	4698      	mov	r8, r3
 80027e8:	4643      	mov	r3, r8
 80027ea:	1e5c      	subs	r4, r3, #1
 80027ec:	41a3      	sbcs	r3, r4
 80027ee:	432b      	orrs	r3, r5
 80027f0:	e776      	b.n	80026e0 <__aeabi_dsub+0x4e8>
 80027f2:	2a00      	cmp	r2, #0
 80027f4:	d0e1      	beq.n	80027ba <__aeabi_dsub+0x5c2>
 80027f6:	003a      	movs	r2, r7
 80027f8:	08db      	lsrs	r3, r3, #3
 80027fa:	4302      	orrs	r2, r0
 80027fc:	d100      	bne.n	8002800 <__aeabi_dsub+0x608>
 80027fe:	e6b8      	b.n	8002572 <__aeabi_dsub+0x37a>
 8002800:	464a      	mov	r2, r9
 8002802:	0752      	lsls	r2, r2, #29
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	4313      	orrs	r3, r2
 8002808:	464a      	mov	r2, r9
 800280a:	0324      	lsls	r4, r4, #12
 800280c:	08d2      	lsrs	r2, r2, #3
 800280e:	4222      	tst	r2, r4
 8002810:	d007      	beq.n	8002822 <__aeabi_dsub+0x62a>
 8002812:	08fe      	lsrs	r6, r7, #3
 8002814:	4226      	tst	r6, r4
 8002816:	d104      	bne.n	8002822 <__aeabi_dsub+0x62a>
 8002818:	465d      	mov	r5, fp
 800281a:	0032      	movs	r2, r6
 800281c:	08c3      	lsrs	r3, r0, #3
 800281e:	077f      	lsls	r7, r7, #29
 8002820:	433b      	orrs	r3, r7
 8002822:	0f59      	lsrs	r1, r3, #29
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	0749      	lsls	r1, r1, #29
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	430b      	orrs	r3, r1
 800282c:	e6a6      	b.n	800257c <__aeabi_dsub+0x384>
 800282e:	1ac4      	subs	r4, r0, r3
 8002830:	42a0      	cmp	r0, r4
 8002832:	4180      	sbcs	r0, r0
 8002834:	464b      	mov	r3, r9
 8002836:	4240      	negs	r0, r0
 8002838:	1aff      	subs	r7, r7, r3
 800283a:	1a3b      	subs	r3, r7, r0
 800283c:	469a      	mov	sl, r3
 800283e:	465d      	mov	r5, fp
 8002840:	2601      	movs	r6, #1
 8002842:	e533      	b.n	80022ac <__aeabi_dsub+0xb4>
 8002844:	003b      	movs	r3, r7
 8002846:	4303      	orrs	r3, r0
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x654>
 800284a:	e715      	b.n	8002678 <__aeabi_dsub+0x480>
 800284c:	08c0      	lsrs	r0, r0, #3
 800284e:	077b      	lsls	r3, r7, #29
 8002850:	465d      	mov	r5, fp
 8002852:	4303      	orrs	r3, r0
 8002854:	08fa      	lsrs	r2, r7, #3
 8002856:	e666      	b.n	8002526 <__aeabi_dsub+0x32e>
 8002858:	08c0      	lsrs	r0, r0, #3
 800285a:	077b      	lsls	r3, r7, #29
 800285c:	4303      	orrs	r3, r0
 800285e:	08fa      	lsrs	r2, r7, #3
 8002860:	e65e      	b.n	8002520 <__aeabi_dsub+0x328>
 8002862:	003a      	movs	r2, r7
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	4302      	orrs	r2, r0
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x674>
 800286a:	e682      	b.n	8002572 <__aeabi_dsub+0x37a>
 800286c:	464a      	mov	r2, r9
 800286e:	0752      	lsls	r2, r2, #29
 8002870:	2480      	movs	r4, #128	; 0x80
 8002872:	4313      	orrs	r3, r2
 8002874:	464a      	mov	r2, r9
 8002876:	0324      	lsls	r4, r4, #12
 8002878:	08d2      	lsrs	r2, r2, #3
 800287a:	4222      	tst	r2, r4
 800287c:	d007      	beq.n	800288e <__aeabi_dsub+0x696>
 800287e:	08fe      	lsrs	r6, r7, #3
 8002880:	4226      	tst	r6, r4
 8002882:	d104      	bne.n	800288e <__aeabi_dsub+0x696>
 8002884:	465d      	mov	r5, fp
 8002886:	0032      	movs	r2, r6
 8002888:	08c3      	lsrs	r3, r0, #3
 800288a:	077f      	lsls	r7, r7, #29
 800288c:	433b      	orrs	r3, r7
 800288e:	0f59      	lsrs	r1, r3, #29
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	0749      	lsls	r1, r1, #29
 8002896:	430b      	orrs	r3, r1
 8002898:	e670      	b.n	800257c <__aeabi_dsub+0x384>
 800289a:	08c0      	lsrs	r0, r0, #3
 800289c:	077b      	lsls	r3, r7, #29
 800289e:	4303      	orrs	r3, r0
 80028a0:	08fa      	lsrs	r2, r7, #3
 80028a2:	e640      	b.n	8002526 <__aeabi_dsub+0x32e>
 80028a4:	464c      	mov	r4, r9
 80028a6:	3920      	subs	r1, #32
 80028a8:	40cc      	lsrs	r4, r1
 80028aa:	4661      	mov	r1, ip
 80028ac:	2920      	cmp	r1, #32
 80028ae:	d006      	beq.n	80028be <__aeabi_dsub+0x6c6>
 80028b0:	4666      	mov	r6, ip
 80028b2:	2140      	movs	r1, #64	; 0x40
 80028b4:	1b89      	subs	r1, r1, r6
 80028b6:	464e      	mov	r6, r9
 80028b8:	408e      	lsls	r6, r1
 80028ba:	4333      	orrs	r3, r6
 80028bc:	4698      	mov	r8, r3
 80028be:	4643      	mov	r3, r8
 80028c0:	1e59      	subs	r1, r3, #1
 80028c2:	418b      	sbcs	r3, r1
 80028c4:	431c      	orrs	r4, r3
 80028c6:	e5d8      	b.n	800247a <__aeabi_dsub+0x282>
 80028c8:	181c      	adds	r4, r3, r0
 80028ca:	4284      	cmp	r4, r0
 80028cc:	4180      	sbcs	r0, r0
 80028ce:	444f      	add	r7, r9
 80028d0:	46ba      	mov	sl, r7
 80028d2:	4240      	negs	r0, r0
 80028d4:	4482      	add	sl, r0
 80028d6:	e6d9      	b.n	800268c <__aeabi_dsub+0x494>
 80028d8:	4653      	mov	r3, sl
 80028da:	4323      	orrs	r3, r4
 80028dc:	d100      	bne.n	80028e0 <__aeabi_dsub+0x6e8>
 80028de:	e6cb      	b.n	8002678 <__aeabi_dsub+0x480>
 80028e0:	e614      	b.n	800250c <__aeabi_dsub+0x314>
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	000007ff 	.word	0x000007ff
 80028e8:	ff7fffff 	.word	0xff7fffff
 80028ec:	000007fe 	.word	0x000007fe
 80028f0:	2300      	movs	r3, #0
 80028f2:	4a01      	ldr	r2, [pc, #4]	; (80028f8 <__aeabi_dsub+0x700>)
 80028f4:	001c      	movs	r4, r3
 80028f6:	e529      	b.n	800234c <__aeabi_dsub+0x154>
 80028f8:	000007ff 	.word	0x000007ff

080028fc <__aeabi_dcmpun>:
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	0005      	movs	r5, r0
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <__aeabi_dcmpun+0x38>)
 8002902:	031c      	lsls	r4, r3, #12
 8002904:	0016      	movs	r6, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	030a      	lsls	r2, r1, #12
 800290a:	0049      	lsls	r1, r1, #1
 800290c:	0b12      	lsrs	r2, r2, #12
 800290e:	0d49      	lsrs	r1, r1, #21
 8002910:	0b24      	lsrs	r4, r4, #12
 8002912:	0d5b      	lsrs	r3, r3, #21
 8002914:	4281      	cmp	r1, r0
 8002916:	d008      	beq.n	800292a <__aeabi_dcmpun+0x2e>
 8002918:	4a06      	ldr	r2, [pc, #24]	; (8002934 <__aeabi_dcmpun+0x38>)
 800291a:	2000      	movs	r0, #0
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <__aeabi_dcmpun+0x2c>
 8002920:	0020      	movs	r0, r4
 8002922:	4330      	orrs	r0, r6
 8002924:	1e43      	subs	r3, r0, #1
 8002926:	4198      	sbcs	r0, r3
 8002928:	bd70      	pop	{r4, r5, r6, pc}
 800292a:	2001      	movs	r0, #1
 800292c:	432a      	orrs	r2, r5
 800292e:	d1fb      	bne.n	8002928 <__aeabi_dcmpun+0x2c>
 8002930:	e7f2      	b.n	8002918 <__aeabi_dcmpun+0x1c>
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	000007ff 	.word	0x000007ff

08002938 <__aeabi_d2iz>:
 8002938:	000a      	movs	r2, r1
 800293a:	b530      	push	{r4, r5, lr}
 800293c:	4c13      	ldr	r4, [pc, #76]	; (800298c <__aeabi_d2iz+0x54>)
 800293e:	0053      	lsls	r3, r2, #1
 8002940:	0309      	lsls	r1, r1, #12
 8002942:	0005      	movs	r5, r0
 8002944:	0b09      	lsrs	r1, r1, #12
 8002946:	2000      	movs	r0, #0
 8002948:	0d5b      	lsrs	r3, r3, #21
 800294a:	0fd2      	lsrs	r2, r2, #31
 800294c:	42a3      	cmp	r3, r4
 800294e:	dd04      	ble.n	800295a <__aeabi_d2iz+0x22>
 8002950:	480f      	ldr	r0, [pc, #60]	; (8002990 <__aeabi_d2iz+0x58>)
 8002952:	4283      	cmp	r3, r0
 8002954:	dd02      	ble.n	800295c <__aeabi_d2iz+0x24>
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <__aeabi_d2iz+0x5c>)
 8002958:	18d0      	adds	r0, r2, r3
 800295a:	bd30      	pop	{r4, r5, pc}
 800295c:	2080      	movs	r0, #128	; 0x80
 800295e:	0340      	lsls	r0, r0, #13
 8002960:	4301      	orrs	r1, r0
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <__aeabi_d2iz+0x60>)
 8002964:	1ac0      	subs	r0, r0, r3
 8002966:	281f      	cmp	r0, #31
 8002968:	dd08      	ble.n	800297c <__aeabi_d2iz+0x44>
 800296a:	480c      	ldr	r0, [pc, #48]	; (800299c <__aeabi_d2iz+0x64>)
 800296c:	1ac3      	subs	r3, r0, r3
 800296e:	40d9      	lsrs	r1, r3
 8002970:	000b      	movs	r3, r1
 8002972:	4258      	negs	r0, r3
 8002974:	2a00      	cmp	r2, #0
 8002976:	d1f0      	bne.n	800295a <__aeabi_d2iz+0x22>
 8002978:	0018      	movs	r0, r3
 800297a:	e7ee      	b.n	800295a <__aeabi_d2iz+0x22>
 800297c:	4c08      	ldr	r4, [pc, #32]	; (80029a0 <__aeabi_d2iz+0x68>)
 800297e:	40c5      	lsrs	r5, r0
 8002980:	46a4      	mov	ip, r4
 8002982:	4463      	add	r3, ip
 8002984:	4099      	lsls	r1, r3
 8002986:	000b      	movs	r3, r1
 8002988:	432b      	orrs	r3, r5
 800298a:	e7f2      	b.n	8002972 <__aeabi_d2iz+0x3a>
 800298c:	000003fe 	.word	0x000003fe
 8002990:	0000041d 	.word	0x0000041d
 8002994:	7fffffff 	.word	0x7fffffff
 8002998:	00000433 	.word	0x00000433
 800299c:	00000413 	.word	0x00000413
 80029a0:	fffffbed 	.word	0xfffffbed

080029a4 <__aeabi_i2d>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	2800      	cmp	r0, #0
 80029a8:	d016      	beq.n	80029d8 <__aeabi_i2d+0x34>
 80029aa:	17c3      	asrs	r3, r0, #31
 80029ac:	18c5      	adds	r5, r0, r3
 80029ae:	405d      	eors	r5, r3
 80029b0:	0fc4      	lsrs	r4, r0, #31
 80029b2:	0028      	movs	r0, r5
 80029b4:	f000 f91a 	bl	8002bec <__clzsi2>
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <__aeabi_i2d+0x5c>)
 80029ba:	1a1b      	subs	r3, r3, r0
 80029bc:	280a      	cmp	r0, #10
 80029be:	dc16      	bgt.n	80029ee <__aeabi_i2d+0x4a>
 80029c0:	0002      	movs	r2, r0
 80029c2:	002e      	movs	r6, r5
 80029c4:	3215      	adds	r2, #21
 80029c6:	4096      	lsls	r6, r2
 80029c8:	220b      	movs	r2, #11
 80029ca:	1a12      	subs	r2, r2, r0
 80029cc:	40d5      	lsrs	r5, r2
 80029ce:	055b      	lsls	r3, r3, #21
 80029d0:	032d      	lsls	r5, r5, #12
 80029d2:	0b2d      	lsrs	r5, r5, #12
 80029d4:	0d5b      	lsrs	r3, r3, #21
 80029d6:	e003      	b.n	80029e0 <__aeabi_i2d+0x3c>
 80029d8:	2400      	movs	r4, #0
 80029da:	2300      	movs	r3, #0
 80029dc:	2500      	movs	r5, #0
 80029de:	2600      	movs	r6, #0
 80029e0:	051b      	lsls	r3, r3, #20
 80029e2:	432b      	orrs	r3, r5
 80029e4:	07e4      	lsls	r4, r4, #31
 80029e6:	4323      	orrs	r3, r4
 80029e8:	0030      	movs	r0, r6
 80029ea:	0019      	movs	r1, r3
 80029ec:	bd70      	pop	{r4, r5, r6, pc}
 80029ee:	380b      	subs	r0, #11
 80029f0:	4085      	lsls	r5, r0
 80029f2:	055b      	lsls	r3, r3, #21
 80029f4:	032d      	lsls	r5, r5, #12
 80029f6:	2600      	movs	r6, #0
 80029f8:	0b2d      	lsrs	r5, r5, #12
 80029fa:	0d5b      	lsrs	r3, r3, #21
 80029fc:	e7f0      	b.n	80029e0 <__aeabi_i2d+0x3c>
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	0000041e 	.word	0x0000041e

08002a04 <__aeabi_ui2d>:
 8002a04:	b510      	push	{r4, lr}
 8002a06:	1e04      	subs	r4, r0, #0
 8002a08:	d010      	beq.n	8002a2c <__aeabi_ui2d+0x28>
 8002a0a:	f000 f8ef 	bl	8002bec <__clzsi2>
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <__aeabi_ui2d+0x48>)
 8002a10:	1a1b      	subs	r3, r3, r0
 8002a12:	280a      	cmp	r0, #10
 8002a14:	dc11      	bgt.n	8002a3a <__aeabi_ui2d+0x36>
 8002a16:	220b      	movs	r2, #11
 8002a18:	0021      	movs	r1, r4
 8002a1a:	1a12      	subs	r2, r2, r0
 8002a1c:	40d1      	lsrs	r1, r2
 8002a1e:	3015      	adds	r0, #21
 8002a20:	030a      	lsls	r2, r1, #12
 8002a22:	055b      	lsls	r3, r3, #21
 8002a24:	4084      	lsls	r4, r0
 8002a26:	0b12      	lsrs	r2, r2, #12
 8002a28:	0d5b      	lsrs	r3, r3, #21
 8002a2a:	e001      	b.n	8002a30 <__aeabi_ui2d+0x2c>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2200      	movs	r2, #0
 8002a30:	051b      	lsls	r3, r3, #20
 8002a32:	4313      	orrs	r3, r2
 8002a34:	0020      	movs	r0, r4
 8002a36:	0019      	movs	r1, r3
 8002a38:	bd10      	pop	{r4, pc}
 8002a3a:	0022      	movs	r2, r4
 8002a3c:	380b      	subs	r0, #11
 8002a3e:	4082      	lsls	r2, r0
 8002a40:	055b      	lsls	r3, r3, #21
 8002a42:	0312      	lsls	r2, r2, #12
 8002a44:	2400      	movs	r4, #0
 8002a46:	0b12      	lsrs	r2, r2, #12
 8002a48:	0d5b      	lsrs	r3, r3, #21
 8002a4a:	e7f1      	b.n	8002a30 <__aeabi_ui2d+0x2c>
 8002a4c:	0000041e 	.word	0x0000041e

08002a50 <__aeabi_f2d>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	0242      	lsls	r2, r0, #9
 8002a54:	0043      	lsls	r3, r0, #1
 8002a56:	0fc4      	lsrs	r4, r0, #31
 8002a58:	20fe      	movs	r0, #254	; 0xfe
 8002a5a:	0e1b      	lsrs	r3, r3, #24
 8002a5c:	1c59      	adds	r1, r3, #1
 8002a5e:	0a55      	lsrs	r5, r2, #9
 8002a60:	4208      	tst	r0, r1
 8002a62:	d00c      	beq.n	8002a7e <__aeabi_f2d+0x2e>
 8002a64:	21e0      	movs	r1, #224	; 0xe0
 8002a66:	0089      	lsls	r1, r1, #2
 8002a68:	468c      	mov	ip, r1
 8002a6a:	076d      	lsls	r5, r5, #29
 8002a6c:	0b12      	lsrs	r2, r2, #12
 8002a6e:	4463      	add	r3, ip
 8002a70:	051b      	lsls	r3, r3, #20
 8002a72:	4313      	orrs	r3, r2
 8002a74:	07e4      	lsls	r4, r4, #31
 8002a76:	4323      	orrs	r3, r4
 8002a78:	0028      	movs	r0, r5
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	bd70      	pop	{r4, r5, r6, pc}
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d114      	bne.n	8002aac <__aeabi_f2d+0x5c>
 8002a82:	2d00      	cmp	r5, #0
 8002a84:	d01b      	beq.n	8002abe <__aeabi_f2d+0x6e>
 8002a86:	0028      	movs	r0, r5
 8002a88:	f000 f8b0 	bl	8002bec <__clzsi2>
 8002a8c:	280a      	cmp	r0, #10
 8002a8e:	dc1c      	bgt.n	8002aca <__aeabi_f2d+0x7a>
 8002a90:	230b      	movs	r3, #11
 8002a92:	002a      	movs	r2, r5
 8002a94:	1a1b      	subs	r3, r3, r0
 8002a96:	40da      	lsrs	r2, r3
 8002a98:	0003      	movs	r3, r0
 8002a9a:	3315      	adds	r3, #21
 8002a9c:	409d      	lsls	r5, r3
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <__aeabi_f2d+0x88>)
 8002aa0:	0312      	lsls	r2, r2, #12
 8002aa2:	1a1b      	subs	r3, r3, r0
 8002aa4:	055b      	lsls	r3, r3, #21
 8002aa6:	0b12      	lsrs	r2, r2, #12
 8002aa8:	0d5b      	lsrs	r3, r3, #21
 8002aaa:	e7e1      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002aac:	2d00      	cmp	r5, #0
 8002aae:	d009      	beq.n	8002ac4 <__aeabi_f2d+0x74>
 8002ab0:	0b13      	lsrs	r3, r2, #12
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	0312      	lsls	r2, r2, #12
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	076d      	lsls	r5, r5, #29
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <__aeabi_f2d+0x8c>)
 8002abc:	e7d8      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	e7d5      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <__aeabi_f2d+0x8c>)
 8002ac8:	e7d2      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002aca:	0003      	movs	r3, r0
 8002acc:	002a      	movs	r2, r5
 8002ace:	3b0b      	subs	r3, #11
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	2500      	movs	r5, #0
 8002ad4:	e7e3      	b.n	8002a9e <__aeabi_f2d+0x4e>
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	00000389 	.word	0x00000389
 8002adc:	000007ff 	.word	0x000007ff

08002ae0 <__aeabi_d2f>:
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae4:	004b      	lsls	r3, r1, #1
 8002ae6:	030d      	lsls	r5, r1, #12
 8002ae8:	0f40      	lsrs	r0, r0, #29
 8002aea:	0d5b      	lsrs	r3, r3, #21
 8002aec:	0fcc      	lsrs	r4, r1, #31
 8002aee:	0a6d      	lsrs	r5, r5, #9
 8002af0:	493a      	ldr	r1, [pc, #232]	; (8002bdc <__aeabi_d2f+0xfc>)
 8002af2:	4305      	orrs	r5, r0
 8002af4:	1c58      	adds	r0, r3, #1
 8002af6:	00d7      	lsls	r7, r2, #3
 8002af8:	4208      	tst	r0, r1
 8002afa:	d00a      	beq.n	8002b12 <__aeabi_d2f+0x32>
 8002afc:	4938      	ldr	r1, [pc, #224]	; (8002be0 <__aeabi_d2f+0x100>)
 8002afe:	1859      	adds	r1, r3, r1
 8002b00:	29fe      	cmp	r1, #254	; 0xfe
 8002b02:	dd16      	ble.n	8002b32 <__aeabi_d2f+0x52>
 8002b04:	20ff      	movs	r0, #255	; 0xff
 8002b06:	2200      	movs	r2, #0
 8002b08:	05c0      	lsls	r0, r0, #23
 8002b0a:	4310      	orrs	r0, r2
 8002b0c:	07e4      	lsls	r4, r4, #31
 8002b0e:	4320      	orrs	r0, r4
 8002b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <__aeabi_d2f+0x44>
 8002b16:	433d      	orrs	r5, r7
 8002b18:	d026      	beq.n	8002b68 <__aeabi_d2f+0x88>
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	0192      	lsls	r2, r2, #6
 8002b1e:	0a52      	lsrs	r2, r2, #9
 8002b20:	b2d8      	uxtb	r0, r3
 8002b22:	e7f1      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b24:	432f      	orrs	r7, r5
 8002b26:	d0ed      	beq.n	8002b04 <__aeabi_d2f+0x24>
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	03d2      	lsls	r2, r2, #15
 8002b2c:	20ff      	movs	r0, #255	; 0xff
 8002b2e:	432a      	orrs	r2, r5
 8002b30:	e7ea      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b32:	2900      	cmp	r1, #0
 8002b34:	dd1b      	ble.n	8002b6e <__aeabi_d2f+0x8e>
 8002b36:	0192      	lsls	r2, r2, #6
 8002b38:	1e50      	subs	r0, r2, #1
 8002b3a:	4182      	sbcs	r2, r0
 8002b3c:	00ed      	lsls	r5, r5, #3
 8002b3e:	0f7f      	lsrs	r7, r7, #29
 8002b40:	432a      	orrs	r2, r5
 8002b42:	433a      	orrs	r2, r7
 8002b44:	0753      	lsls	r3, r2, #29
 8002b46:	d047      	beq.n	8002bd8 <__aeabi_d2f+0xf8>
 8002b48:	230f      	movs	r3, #15
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d000      	beq.n	8002b52 <__aeabi_d2f+0x72>
 8002b50:	3204      	adds	r2, #4
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	04db      	lsls	r3, r3, #19
 8002b56:	4013      	ands	r3, r2
 8002b58:	d03e      	beq.n	8002bd8 <__aeabi_d2f+0xf8>
 8002b5a:	1c48      	adds	r0, r1, #1
 8002b5c:	29fe      	cmp	r1, #254	; 0xfe
 8002b5e:	d0d1      	beq.n	8002b04 <__aeabi_d2f+0x24>
 8002b60:	0192      	lsls	r2, r2, #6
 8002b62:	0a52      	lsrs	r2, r2, #9
 8002b64:	b2c0      	uxtb	r0, r0
 8002b66:	e7cf      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b68:	2000      	movs	r0, #0
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	e7cc      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b6e:	000a      	movs	r2, r1
 8002b70:	3217      	adds	r2, #23
 8002b72:	db2f      	blt.n	8002bd4 <__aeabi_d2f+0xf4>
 8002b74:	2680      	movs	r6, #128	; 0x80
 8002b76:	0436      	lsls	r6, r6, #16
 8002b78:	432e      	orrs	r6, r5
 8002b7a:	251e      	movs	r5, #30
 8002b7c:	1a6d      	subs	r5, r5, r1
 8002b7e:	2d1f      	cmp	r5, #31
 8002b80:	dd11      	ble.n	8002ba6 <__aeabi_d2f+0xc6>
 8002b82:	2202      	movs	r2, #2
 8002b84:	4252      	negs	r2, r2
 8002b86:	1a52      	subs	r2, r2, r1
 8002b88:	0031      	movs	r1, r6
 8002b8a:	40d1      	lsrs	r1, r2
 8002b8c:	2d20      	cmp	r5, #32
 8002b8e:	d004      	beq.n	8002b9a <__aeabi_d2f+0xba>
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <__aeabi_d2f+0x104>)
 8002b92:	4694      	mov	ip, r2
 8002b94:	4463      	add	r3, ip
 8002b96:	409e      	lsls	r6, r3
 8002b98:	4337      	orrs	r7, r6
 8002b9a:	003a      	movs	r2, r7
 8002b9c:	1e53      	subs	r3, r2, #1
 8002b9e:	419a      	sbcs	r2, r3
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	e7ce      	b.n	8002b44 <__aeabi_d2f+0x64>
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <__aeabi_d2f+0x108>)
 8002ba8:	0038      	movs	r0, r7
 8002baa:	4694      	mov	ip, r2
 8002bac:	4463      	add	r3, ip
 8002bae:	4098      	lsls	r0, r3
 8002bb0:	003a      	movs	r2, r7
 8002bb2:	1e41      	subs	r1, r0, #1
 8002bb4:	4188      	sbcs	r0, r1
 8002bb6:	409e      	lsls	r6, r3
 8002bb8:	40ea      	lsrs	r2, r5
 8002bba:	4330      	orrs	r0, r6
 8002bbc:	4302      	orrs	r2, r0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	0753      	lsls	r3, r2, #29
 8002bc2:	d1c1      	bne.n	8002b48 <__aeabi_d2f+0x68>
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	04c9      	lsls	r1, r1, #19
 8002bca:	2001      	movs	r0, #1
 8002bcc:	400b      	ands	r3, r1
 8002bce:	420a      	tst	r2, r1
 8002bd0:	d1c6      	bne.n	8002b60 <__aeabi_d2f+0x80>
 8002bd2:	e7a3      	b.n	8002b1c <__aeabi_d2f+0x3c>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e7a0      	b.n	8002b1a <__aeabi_d2f+0x3a>
 8002bd8:	000b      	movs	r3, r1
 8002bda:	e79f      	b.n	8002b1c <__aeabi_d2f+0x3c>
 8002bdc:	000007fe 	.word	0x000007fe
 8002be0:	fffffc80 	.word	0xfffffc80
 8002be4:	fffffca2 	.word	0xfffffca2
 8002be8:	fffffc82 	.word	0xfffffc82

08002bec <__clzsi2>:
 8002bec:	211c      	movs	r1, #28
 8002bee:	2301      	movs	r3, #1
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	4298      	cmp	r0, r3
 8002bf4:	d301      	bcc.n	8002bfa <__clzsi2+0xe>
 8002bf6:	0c00      	lsrs	r0, r0, #16
 8002bf8:	3910      	subs	r1, #16
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	4298      	cmp	r0, r3
 8002bfe:	d301      	bcc.n	8002c04 <__clzsi2+0x18>
 8002c00:	0a00      	lsrs	r0, r0, #8
 8002c02:	3908      	subs	r1, #8
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	4298      	cmp	r0, r3
 8002c08:	d301      	bcc.n	8002c0e <__clzsi2+0x22>
 8002c0a:	0900      	lsrs	r0, r0, #4
 8002c0c:	3904      	subs	r1, #4
 8002c0e:	a202      	add	r2, pc, #8	; (adr r2, 8002c18 <__clzsi2+0x2c>)
 8002c10:	5c10      	ldrb	r0, [r2, r0]
 8002c12:	1840      	adds	r0, r0, r1
 8002c14:	4770      	bx	lr
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	02020304 	.word	0x02020304
 8002c1c:	01010101 	.word	0x01010101
	...

08002c28 <__clzdi2>:
 8002c28:	b510      	push	{r4, lr}
 8002c2a:	2900      	cmp	r1, #0
 8002c2c:	d103      	bne.n	8002c36 <__clzdi2+0xe>
 8002c2e:	f7ff ffdd 	bl	8002bec <__clzsi2>
 8002c32:	3020      	adds	r0, #32
 8002c34:	e002      	b.n	8002c3c <__clzdi2+0x14>
 8002c36:	0008      	movs	r0, r1
 8002c38:	f7ff ffd8 	bl	8002bec <__clzsi2>
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)

08002c40 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c42:	46c6      	mov	lr, r8
 8002c44:	b500      	push	{lr}
 8002c46:	b0b4      	sub	sp, #208	; 0xd0
 8002c48:	af0c      	add	r7, sp, #48	; 0x30
     /* MCU
      * Configuration--------------------------------------------------------*/

     /* Reset of all peripherals, Initializes the Flash interface and the
      * Systick. */
     HAL_Init();
 8002c4a:	f001 f887 	bl	8003d5c <HAL_Init>
     /* USER CODE BEGIN Init */

     /* USER CODE END Init */

     /* Configure the system clock */
     SystemClock_Config();
 8002c4e:	f000 f8ad 	bl	8002dac <SystemClock_Config>
     /* USER CODE BEGIN SysInit */

     /* USER CODE END SysInit */

     /* Initialize all configured peripherals */
     MX_GPIO_Init();
 8002c52:	f000 f979 	bl	8002f48 <MX_GPIO_Init>
     MX_ADC_Init();
 8002c56:	f000 f8fd 	bl	8002e54 <MX_ADC_Init>
     MX_USART2_UART_Init();
 8002c5a:	f000 f945 	bl	8002ee8 <MX_USART2_UART_Init>

     /* USER CODE BEGIN 2 */
     char msg[128];
     start_time_ms = HAL_GetTick();
 8002c5e:	f001 f8e3 	bl	8003e28 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	4b44      	ldr	r3, [pc, #272]	; (8002d78 <main+0x138>)
 8002c66:	601a      	str	r2, [r3, #0]
     HAL_Delay(15);
 8002c68:	200f      	movs	r0, #15
 8002c6a:	f001 f8e7 	bl	8003e3c <HAL_Delay>
     setNumber();
 8002c6e:	f000 fbdf 	bl	8003430 <setNumber>
     HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8002c72:	4b42      	ldr	r3, [pc, #264]	; (8002d7c <main+0x13c>)
 8002c74:	2100      	movs	r1, #0
 8002c76:	0018      	movs	r0, r3
 8002c78:	f001 fd58 	bl	800472c <HAL_ADCEx_Calibration_Start>
     /* USER CODE END 2 */

     /* Infinite loop */
     /* USER CODE BEGIN WHILE */
     while (1) {
    	  Button_Debounce_Set();
 8002c7c:	f000 fdda 	bl	8003834 <Button_Debounce_Set>
          setNumber();
 8002c80:	f000 fbd6 	bl	8003430 <setNumber>
          HAL_Delay(10);
 8002c84:	200a      	movs	r0, #10
 8002c86:	f001 f8d9 	bl	8003e3c <HAL_Delay>
          uint32_t current_time_ms = HAL_GetTick();
 8002c8a:	f001 f8cd 	bl	8003e28 <HAL_GetTick>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	2284      	movs	r2, #132	; 0x84
 8002c92:	2018      	movs	r0, #24
 8002c94:	1811      	adds	r1, r2, r0
 8002c96:	19c9      	adds	r1, r1, r7
 8002c98:	600b      	str	r3, [r1, #0]
          seconds_since_start = (current_time_ms - start_time_ms) / 1000.0f;
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <main+0x138>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	1812      	adds	r2, r2, r0
 8002ca0:	19d2      	adds	r2, r2, r7
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7fe f842 	bl	8000d30 <__aeabi_ui2f>
 8002cac:	1c03      	adds	r3, r0, #0
 8002cae:	4934      	ldr	r1, [pc, #208]	; (8002d80 <main+0x140>)
 8002cb0:	1c18      	adds	r0, r3, #0
 8002cb2:	f7fd fd83 	bl	80007bc <__aeabi_fdiv>
 8002cb6:	1c03      	adds	r3, r0, #0
 8002cb8:	1c1a      	adds	r2, r3, #0
 8002cba:	4b32      	ldr	r3, [pc, #200]	; (8002d84 <main+0x144>)
 8002cbc:	601a      	str	r2, [r3, #0]

          Measurement_of_ADC_Voltage_18650();
 8002cbe:	f000 f9e7 	bl	8003090 <Measurement_of_ADC_Voltage_18650>
          Measurement_of_ADC_Voltage_CMOS();
 8002cc2:	f000 fa35 	bl	8003130 <Measurement_of_ADC_Voltage_CMOS>
          Measurement_of_ADC_Current_CMOS();
 8002cc6:	f000 fad3 	bl	8003270 <Measurement_of_ADC_Current_CMOS>
          Measurement_of_ADC_Current_18650();
 8002cca:	f000 fa81 	bl	80031d0 <Measurement_of_ADC_Current_18650>

          //UART Debugging
          sprintf(msg, "%.3f,%.3f,%.3f,%.3f,%.3f,%d,%d,%d\r\n",
 8002cce:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <main+0x144>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	1c18      	adds	r0, r3, #0
 8002cd4:	f7ff febc 	bl	8002a50 <__aeabi_f2d>
 8002cd8:	6138      	str	r0, [r7, #16]
 8002cda:	6179      	str	r1, [r7, #20]
 8002cdc:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <main+0x148>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	1c18      	adds	r0, r3, #0
 8002ce2:	f7ff feb5 	bl	8002a50 <__aeabi_f2d>
 8002ce6:	0004      	movs	r4, r0
 8002ce8:	000d      	movs	r5, r1
 8002cea:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <main+0x14c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	1c18      	adds	r0, r3, #0
 8002cf0:	f7ff feae 	bl	8002a50 <__aeabi_f2d>
 8002cf4:	60b8      	str	r0, [r7, #8]
 8002cf6:	60f9      	str	r1, [r7, #12]
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <main+0x150>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	1c18      	adds	r0, r3, #0
 8002cfe:	f7ff fea7 	bl	8002a50 <__aeabi_f2d>
 8002d02:	6038      	str	r0, [r7, #0]
 8002d04:	6079      	str	r1, [r7, #4]
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <main+0x154>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	1c18      	adds	r0, r3, #0
 8002d0c:	f7ff fea0 	bl	8002a50 <__aeabi_f2d>
 8002d10:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <main+0x158>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4698      	mov	r8, r3
 8002d16:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <main+0x15c>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <main+0x160>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4e21      	ldr	r6, [pc, #132]	; (8002da4 <main+0x164>)
 8002d20:	46b4      	mov	ip, r6
 8002d22:	261c      	movs	r6, #28
 8002d24:	19be      	adds	r6, r7, r6
 8002d26:	930a      	str	r3, [sp, #40]	; 0x28
 8002d28:	9209      	str	r2, [sp, #36]	; 0x24
 8002d2a:	4643      	mov	r3, r8
 8002d2c:	9308      	str	r3, [sp, #32]
 8002d2e:	9006      	str	r0, [sp, #24]
 8002d30:	9107      	str	r1, [sp, #28]
 8002d32:	6839      	ldr	r1, [r7, #0]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	9104      	str	r1, [sp, #16]
 8002d38:	9205      	str	r2, [sp, #20]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	9102      	str	r1, [sp, #8]
 8002d40:	9203      	str	r2, [sp, #12]
 8002d42:	9400      	str	r4, [sp, #0]
 8002d44:	9501      	str	r5, [sp, #4]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	4661      	mov	r1, ip
 8002d4c:	0030      	movs	r0, r6
 8002d4e:	f004 fa49 	bl	80071e4 <siprintf>
                 V_CMOS, // CMOS Voltage
                 C_CMOS, // CMOS Current
     			 valueToAdjust, //Threshold
     			 Switch_State,
				 measurement_num);
          HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8002d52:	241c      	movs	r4, #28
 8002d54:	193b      	adds	r3, r7, r4
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7fd f9d6 	bl	8000108 <strlen>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	2301      	movs	r3, #1
 8002d62:	425b      	negs	r3, r3
 8002d64:	1939      	adds	r1, r7, r4
 8002d66:	4810      	ldr	r0, [pc, #64]	; (8002da8 <main+0x168>)
 8002d68:	f002 fdde 	bl	8005928 <HAL_UART_Transmit>

          measurement_num++;
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <main+0x160>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <main+0x160>)
 8002d74:	601a      	str	r2, [r3, #0]
     while (1) {
 8002d76:	e781      	b.n	8002c7c <main+0x3c>
 8002d78:	200002ec 	.word	0x200002ec
 8002d7c:	200001f0 	.word	0x200001f0
 8002d80:	447a0000 	.word	0x447a0000
 8002d84:	200002e8 	.word	0x200002e8
 8002d88:	200002d4 	.word	0x200002d4
 8002d8c:	200002e0 	.word	0x200002e0
 8002d90:	200002d8 	.word	0x200002d8
 8002d94:	200002dc 	.word	0x200002dc
 8002d98:	200002f8 	.word	0x200002f8
 8002d9c:	200002e4 	.word	0x200002e4
 8002da0:	20000300 	.word	0x20000300
 8002da4:	0800ac90 	.word	0x0800ac90
 8002da8:	2000024c 	.word	0x2000024c

08002dac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b093      	sub	sp, #76	; 0x4c
 8002db0:	af00      	add	r7, sp, #0
     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002db2:	2414      	movs	r4, #20
 8002db4:	193b      	adds	r3, r7, r4
 8002db6:	0018      	movs	r0, r3
 8002db8:	2334      	movs	r3, #52	; 0x34
 8002dba:	001a      	movs	r2, r3
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	f004 fa7d 	bl	80072bc <memset>
     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dc2:	003b      	movs	r3, r7
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	2314      	movs	r3, #20
 8002dc8:	001a      	movs	r2, r3
 8002dca:	2100      	movs	r1, #0
 8002dcc:	f004 fa76 	bl	80072bc <memset>

     /** Configure the main internal regulator output voltage
      */
     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <SystemClock_Config+0xa0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <SystemClock_Config+0xa4>)
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <SystemClock_Config+0xa0>)
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	0109      	lsls	r1, r1, #4
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]

     /** Initializes the RCC Oscillators according to the specified parameters
      * in the RCC_OscInitTypeDef structure.
      */
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002de2:	0021      	movs	r1, r4
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	2210      	movs	r2, #16
 8002de8:	601a      	str	r2, [r3, #0]
     RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	2201      	movs	r2, #1
 8002dee:	619a      	str	r2, [r3, #24]
     RCC_OscInitStruct.MSICalibrationValue = 0;
 8002df0:	187b      	adds	r3, r7, r1
 8002df2:	2200      	movs	r2, #0
 8002df4:	61da      	str	r2, [r3, #28]
     RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002df6:	187b      	adds	r3, r7, r1
 8002df8:	22a0      	movs	r2, #160	; 0xa0
 8002dfa:	0212      	lsls	r2, r2, #8
 8002dfc:	621a      	str	r2, [r3, #32]
     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	2200      	movs	r2, #0
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24
     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	0018      	movs	r0, r3
 8002e08:	f001 ff9a 	bl	8004d40 <HAL_RCC_OscConfig>
 8002e0c:	1e03      	subs	r3, r0, #0
 8002e0e:	d001      	beq.n	8002e14 <SystemClock_Config+0x68>
          Error_Handler();
 8002e10:	f000 fdec 	bl	80039ec <Error_Handler>
     }

     /** Initializes the CPU, AHB and APB buses clocks
      */
     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8002e14:	003b      	movs	r3, r7
 8002e16:	220f      	movs	r2, #15
 8002e18:	601a      	str	r2, [r3, #0]
                                   RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002e1a:	003b      	movs	r3, r7
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	605a      	str	r2, [r3, #4]
     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e20:	003b      	movs	r3, r7
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e26:	003b      	movs	r3, r7
 8002e28:	2200      	movs	r2, #0
 8002e2a:	60da      	str	r2, [r3, #12]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e2c:	003b      	movs	r3, r7
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]

     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002e32:	003b      	movs	r3, r7
 8002e34:	2100      	movs	r1, #0
 8002e36:	0018      	movs	r0, r3
 8002e38:	f002 fafe 	bl	8005438 <HAL_RCC_ClockConfig>
 8002e3c:	1e03      	subs	r3, r0, #0
 8002e3e:	d001      	beq.n	8002e44 <SystemClock_Config+0x98>
          Error_Handler();
 8002e40:	f000 fdd4 	bl	80039ec <Error_Handler>
     }
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b013      	add	sp, #76	; 0x4c
 8002e4a:	bd90      	pop	{r4, r7, pc}
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	ffffe7ff 	.word	0xffffe7ff

08002e54 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002e58:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002e5a:	4a22      	ldr	r2, [pc, #136]	; (8002ee4 <MX_ADC_Init+0x90>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002e5e:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	0612      	lsls	r2, r2, #24
 8002e6a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002e84:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002e86:	2220      	movs	r2, #32
 8002e88:	2101      	movs	r1, #1
 8002e8a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002e8c:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002e8e:	2221      	movs	r2, #33	; 0x21
 8002e90:	2100      	movs	r1, #0
 8002e92:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002e9c:	22c2      	movs	r2, #194	; 0xc2
 8002e9e:	32ff      	adds	r2, #255	; 0xff
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002ea4:	222c      	movs	r2, #44	; 0x2c
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002eac:	2204      	movs	r2, #4
 8002eae:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <MX_ADC_Init+0x8c>)
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 ffda 	bl	8003e84 <HAL_ADC_Init>
 8002ed0:	1e03      	subs	r3, r0, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8002ed4:	f000 fd8a 	bl	80039ec <Error_Handler>

  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	200001f0 	.word	0x200001f0
 8002ee4:	40012400 	.word	0x40012400

08002ee8 <MX_USART2_UART_Init>:
static void MX_USART2_UART_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002eee:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <MX_USART2_UART_Init+0x5c>)
 8002ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002ef4:	22e1      	movs	r2, #225	; 0xe1
 8002ef6:	0252      	lsls	r2, r2, #9
 8002ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f0e:	220c      	movs	r2, #12
 8002f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f002 fca7 	bl	8005880 <HAL_UART_Init>
 8002f32:	1e03      	subs	r3, r0, #0
 8002f34:	d001      	beq.n	8002f3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f36:	f000 fd59 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	2000024c 	.word	0x2000024c
 8002f44:	40004400 	.word	0x40004400

08002f48 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b089      	sub	sp, #36	; 0x24
 8002f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4e:	240c      	movs	r4, #12
 8002f50:	193b      	adds	r3, r7, r4
 8002f52:	0018      	movs	r0, r3
 8002f54:	2314      	movs	r3, #20
 8002f56:	001a      	movs	r2, r3
 8002f58:	2100      	movs	r1, #0
 8002f5a:	f004 f9af 	bl	80072bc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	4b42      	ldr	r3, [pc, #264]	; (8003068 <MX_GPIO_Init+0x120>)
 8002f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f62:	4b41      	ldr	r3, [pc, #260]	; (8003068 <MX_GPIO_Init+0x120>)
 8002f64:	2104      	movs	r1, #4
 8002f66:	430a      	orrs	r2, r1
 8002f68:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <MX_GPIO_Init+0x120>)
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	2204      	movs	r2, #4
 8002f70:	4013      	ands	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f76:	4b3c      	ldr	r3, [pc, #240]	; (8003068 <MX_GPIO_Init+0x120>)
 8002f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <MX_GPIO_Init+0x120>)
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f82:	4b39      	ldr	r3, [pc, #228]	; (8003068 <MX_GPIO_Init+0x120>)
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	2201      	movs	r2, #1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8e:	4b36      	ldr	r3, [pc, #216]	; (8003068 <MX_GPIO_Init+0x120>)
 8002f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f92:	4b35      	ldr	r3, [pc, #212]	; (8003068 <MX_GPIO_Init+0x120>)
 8002f94:	2102      	movs	r1, #2
 8002f96:	430a      	orrs	r2, r1
 8002f98:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <MX_GPIO_Init+0x120>)
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA,
 8002fa6:	4931      	ldr	r1, [pc, #196]	; (800306c <MX_GPIO_Init+0x124>)
 8002fa8:	23a0      	movs	r3, #160	; 0xa0
 8002faa:	05db      	lsls	r3, r3, #23
 8002fac:	2200      	movs	r2, #0
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f001 fea9 	bl	8004d06 <HAL_GPIO_WritePin>
                    Discrete_Bit_0_Pin | Discrete_Bit_1_Pin |
                        Discrete_Bit_2_Pin | LS_8_Pin | LS_HIGH_Pin,
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB,
 8002fb4:	492e      	ldr	r1, [pc, #184]	; (8003070 <MX_GPIO_Init+0x128>)
 8002fb6:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <MX_GPIO_Init+0x12c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f001 fea3 	bl	8004d06 <HAL_GPIO_WritePin>
                        User_Input_Status_Light_Blue_Pin | LS_1_Pin | LS_2_Pin |
                        LS_3_Pin | LS_4_Pin,
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LS_LOW_Pin | LS_5_Pin | LS_6_Pin | LS_7_Pin,
 8002fc0:	23f0      	movs	r3, #240	; 0xf0
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	482c      	ldr	r0, [pc, #176]	; (8003078 <MX_GPIO_Init+0x130>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	0019      	movs	r1, r3
 8002fca:	f001 fe9c 	bl	8004d06 <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pins : Minus_Pin Plus_Pin */
  GPIO_InitStruct.Pin = Minus_Pin | Plus_Pin;
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd4:	193b      	adds	r3, r7, r4
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	193b      	adds	r3, r7, r4
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe0:	193b      	adds	r3, r7, r4
 8002fe2:	4a25      	ldr	r2, [pc, #148]	; (8003078 <MX_GPIO_Init+0x130>)
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	0010      	movs	r0, r2
 8002fe8:	f001 fcf2 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Discrete_Bit_0_Pin Discrete_Bit_1_Pin
     Discrete_Bit_2_Pin LS_8_Pin LS_HIGH_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_0_Pin | Discrete_Bit_1_Pin |
 8002fec:	193b      	adds	r3, r7, r4
 8002fee:	4a1f      	ldr	r2, [pc, #124]	; (800306c <MX_GPIO_Init+0x124>)
 8002ff0:	601a      	str	r2, [r3, #0]
                        Discrete_Bit_2_Pin | LS_8_Pin | LS_HIGH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff2:	193b      	adds	r3, r7, r4
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffe:	193b      	adds	r3, r7, r4
 8003000:	2200      	movs	r2, #0
 8003002:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003004:	193a      	adds	r2, r7, r4
 8003006:	23a0      	movs	r3, #160	; 0xa0
 8003008:	05db      	lsls	r3, r3, #23
 800300a:	0011      	movs	r1, r2
 800300c:	0018      	movs	r0, r3
 800300e:	f001 fcdf 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : User_Input_Status_Light_Pin
     User_Input_Status_Light_Green_Pin User_Input_Status_Light_Blue_Pin LS_1_Pin
                           LS_2_Pin LS_3_Pin LS_4_Pin */
  GPIO_InitStruct.Pin = User_Input_Status_Light_Pin |
 8003012:	193b      	adds	r3, r7, r4
 8003014:	4a16      	ldr	r2, [pc, #88]	; (8003070 <MX_GPIO_Init+0x128>)
 8003016:	601a      	str	r2, [r3, #0]
                        User_Input_Status_Light_Green_Pin |
                        User_Input_Status_Light_Blue_Pin | LS_1_Pin | LS_2_Pin |
                        LS_3_Pin | LS_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003018:	193b      	adds	r3, r7, r4
 800301a:	2201      	movs	r2, #1
 800301c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	193b      	adds	r3, r7, r4
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	193b      	adds	r3, r7, r4
 8003026:	2200      	movs	r2, #0
 8003028:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302a:	193b      	adds	r3, r7, r4
 800302c:	4a11      	ldr	r2, [pc, #68]	; (8003074 <MX_GPIO_Init+0x12c>)
 800302e:	0019      	movs	r1, r3
 8003030:	0010      	movs	r0, r2
 8003032:	f001 fccd 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS_LOW_Pin LS_5_Pin LS_6_Pin LS_7_Pin */
  GPIO_InitStruct.Pin = LS_LOW_Pin | LS_5_Pin | LS_6_Pin | LS_7_Pin;
 8003036:	0021      	movs	r1, r4
 8003038:	187b      	adds	r3, r7, r1
 800303a:	22f0      	movs	r2, #240	; 0xf0
 800303c:	0092      	lsls	r2, r2, #2
 800303e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003040:	187b      	adds	r3, r7, r1
 8003042:	2201      	movs	r2, #1
 8003044:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	187b      	adds	r3, r7, r1
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304c:	187b      	adds	r3, r7, r1
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003052:	187b      	adds	r3, r7, r1
 8003054:	4a08      	ldr	r2, [pc, #32]	; (8003078 <MX_GPIO_Init+0x130>)
 8003056:	0019      	movs	r1, r3
 8003058:	0010      	movs	r0, r2
 800305a:	f001 fcb9 	bl	80049d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b009      	add	sp, #36	; 0x24
 8003064:	bd90      	pop	{r4, r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	40021000 	.word	0x40021000
 800306c:	00000313 	.word	0x00000313
 8003070:	0000f007 	.word	0x0000f007
 8003074:	50000400 	.word	0x50000400
 8003078:	50000800 	.word	0x50000800

0800307c <__io_putchar>:
   set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
     /* Place your implementation of fputc here */
     /* e.g. write a character to the UART3 and Loop until the end of
      * transmission */
     // HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
     return ch;
 8003084:	687b      	ldr	r3, [r7, #4]
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <Measurement_of_ADC_Voltage_18650>:

void Measurement_of_ADC_Voltage_18650() {
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc);
 8003096:	4b21      	ldr	r3, [pc, #132]	; (800311c <Measurement_of_ADC_Voltage_18650+0x8c>)
 8003098:	0018      	movs	r0, r3
 800309a:	f001 f8bb 	bl	8004214 <HAL_ADC_Stop>
		 HAL_ADC_Init(&hadc);
 800309e:	4b1f      	ldr	r3, [pc, #124]	; (800311c <Measurement_of_ADC_Voltage_18650+0x8c>)
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 feef 	bl	8003e84 <HAL_ADC_Init>
     float V_ref = 3.3;  // This is known for each micro controller from data
 80030a6:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <Measurement_of_ADC_Voltage_18650+0x90>)
 80030a8:	60fb      	str	r3, [r7, #12]
     // sheet, V_ref = power supply in
     float ADC_resolution = (4096 - 1);  // 2^12 - 1
 80030aa:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <Measurement_of_ADC_Voltage_18650+0x94>)
 80030ac:	60bb      	str	r3, [r7, #8]
     float V_stepSize = V_ref / ADC_resolution;
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f7fd fb83 	bl	80007bc <__aeabi_fdiv>
 80030b6:	1c03      	adds	r3, r0, #0
 80030b8:	607b      	str	r3, [r7, #4]
     // ADC
     /* Start ADC Conversion for ADC1 */
     ADC1 ->CHSELR=0x8000;
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <Measurement_of_ADC_Voltage_18650+0x98>)
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	0212      	lsls	r2, r2, #8
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
     ADC_Select_Voltage18650();
 80030c2:	f000 f925 	bl	8003310 <ADC_Select_Voltage18650>
     HAL_ADC_Start(&hadc);
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <Measurement_of_ADC_Voltage_18650+0x8c>)
 80030c8:	0018      	movs	r0, r3
 80030ca:	f001 f84f 	bl	800416c <HAL_ADC_Start>
     uint16_t rawValue1;
     if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 80030ce:	2301      	movs	r3, #1
 80030d0:	425a      	negs	r2, r3
 80030d2:	4b12      	ldr	r3, [pc, #72]	; (800311c <Measurement_of_ADC_Voltage_18650+0x8c>)
 80030d4:	0011      	movs	r1, r2
 80030d6:	0018      	movs	r0, r3
 80030d8:	f001 f8dc 	bl	8004294 <HAL_ADC_PollForConversion>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d114      	bne.n	800310a <Measurement_of_ADC_Voltage_18650+0x7a>
          /* Read the ADC1 value */
          rawValue1 = HAL_ADC_GetValue(&hadc);
 80030e0:	4b0e      	ldr	r3, [pc, #56]	; (800311c <Measurement_of_ADC_Voltage_18650+0x8c>)
 80030e2:	0018      	movs	r0, r3
 80030e4:	f001 f972 	bl	80043cc <HAL_ADC_GetValue>
 80030e8:	0002      	movs	r2, r0
 80030ea:	1cbb      	adds	r3, r7, #2
 80030ec:	801a      	strh	r2, [r3, #0]
          V_18650 = rawValue1 * V_stepSize;
 80030ee:	1cbb      	adds	r3, r7, #2
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	0018      	movs	r0, r3
 80030f4:	f7fd fdca 	bl	8000c8c <__aeabi_i2f>
 80030f8:	1c03      	adds	r3, r0, #0
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	1c18      	adds	r0, r3, #0
 80030fe:	f7fd fc77 	bl	80009f0 <__aeabi_fmul>
 8003102:	1c03      	adds	r3, r0, #0
 8003104:	1c1a      	adds	r2, r3, #0
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <Measurement_of_ADC_Voltage_18650+0x9c>)
 8003108:	601a      	str	r2, [r3, #0]
     }
     HAL_ADC_Stop(&hadc);
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <Measurement_of_ADC_Voltage_18650+0x8c>)
 800310c:	0018      	movs	r0, r3
 800310e:	f001 f881 	bl	8004214 <HAL_ADC_Stop>
}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b004      	add	sp, #16
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	200001f0 	.word	0x200001f0
 8003120:	40533333 	.word	0x40533333
 8003124:	457ff000 	.word	0x457ff000
 8003128:	40012400 	.word	0x40012400
 800312c:	200002d4 	.word	0x200002d4

08003130 <Measurement_of_ADC_Voltage_CMOS>:
void Measurement_of_ADC_Voltage_CMOS() {
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc);
 8003136:	4b21      	ldr	r3, [pc, #132]	; (80031bc <Measurement_of_ADC_Voltage_CMOS+0x8c>)
 8003138:	0018      	movs	r0, r3
 800313a:	f001 f86b 	bl	8004214 <HAL_ADC_Stop>
		 HAL_ADC_Init(&hadc);
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <Measurement_of_ADC_Voltage_CMOS+0x8c>)
 8003140:	0018      	movs	r0, r3
 8003142:	f000 fe9f 	bl	8003e84 <HAL_ADC_Init>
     float V_ref = 3.3;  // This is known for each micro controller from data
 8003146:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <Measurement_of_ADC_Voltage_CMOS+0x90>)
 8003148:	60fb      	str	r3, [r7, #12]
     // sheet, V_ref = power supply in
     float ADC_resolution = (4096 - 1);  // 2^12 - 1
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <Measurement_of_ADC_Voltage_CMOS+0x94>)
 800314c:	60bb      	str	r3, [r7, #8]
     float V_stepSize = V_ref / ADC_resolution;
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f7fd fb33 	bl	80007bc <__aeabi_fdiv>
 8003156:	1c03      	adds	r3, r0, #0
 8003158:	607b      	str	r3, [r7, #4]
     // ADC
     /* Start ADC Conversion for ADC1 */
     ADC1 ->CHSELR=0x2000;
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <Measurement_of_ADC_Voltage_CMOS+0x98>)
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	0192      	lsls	r2, r2, #6
 8003160:	629a      	str	r2, [r3, #40]	; 0x28
     ADC_Select_VoltageCMOS();
 8003162:	f000 f8f9 	bl	8003358 <ADC_Select_VoltageCMOS>
     HAL_ADC_Start(&hadc);
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <Measurement_of_ADC_Voltage_CMOS+0x8c>)
 8003168:	0018      	movs	r0, r3
 800316a:	f000 ffff 	bl	800416c <HAL_ADC_Start>
     uint16_t rawValue1;
     if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 800316e:	2301      	movs	r3, #1
 8003170:	425a      	negs	r2, r3
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <Measurement_of_ADC_Voltage_CMOS+0x8c>)
 8003174:	0011      	movs	r1, r2
 8003176:	0018      	movs	r0, r3
 8003178:	f001 f88c 	bl	8004294 <HAL_ADC_PollForConversion>
 800317c:	1e03      	subs	r3, r0, #0
 800317e:	d114      	bne.n	80031aa <Measurement_of_ADC_Voltage_CMOS+0x7a>
          /* Read the ADC1 value */
          rawValue1 = HAL_ADC_GetValue(&hadc);
 8003180:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <Measurement_of_ADC_Voltage_CMOS+0x8c>)
 8003182:	0018      	movs	r0, r3
 8003184:	f001 f922 	bl	80043cc <HAL_ADC_GetValue>
 8003188:	0002      	movs	r2, r0
 800318a:	1cbb      	adds	r3, r7, #2
 800318c:	801a      	strh	r2, [r3, #0]
          V_CMOS = rawValue1 * V_stepSize;
 800318e:	1cbb      	adds	r3, r7, #2
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	0018      	movs	r0, r3
 8003194:	f7fd fd7a 	bl	8000c8c <__aeabi_i2f>
 8003198:	1c03      	adds	r3, r0, #0
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	1c18      	adds	r0, r3, #0
 800319e:	f7fd fc27 	bl	80009f0 <__aeabi_fmul>
 80031a2:	1c03      	adds	r3, r0, #0
 80031a4:	1c1a      	adds	r2, r3, #0
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <Measurement_of_ADC_Voltage_CMOS+0x9c>)
 80031a8:	601a      	str	r2, [r3, #0]
     }
     HAL_ADC_Stop(&hadc);
 80031aa:	4b04      	ldr	r3, [pc, #16]	; (80031bc <Measurement_of_ADC_Voltage_CMOS+0x8c>)
 80031ac:	0018      	movs	r0, r3
 80031ae:	f001 f831 	bl	8004214 <HAL_ADC_Stop>
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b004      	add	sp, #16
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	200001f0 	.word	0x200001f0
 80031c0:	40533333 	.word	0x40533333
 80031c4:	457ff000 	.word	0x457ff000
 80031c8:	40012400 	.word	0x40012400
 80031cc:	200002d8 	.word	0x200002d8

080031d0 <Measurement_of_ADC_Current_18650>:

void Measurement_of_ADC_Current_18650() {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc);
 80031d6:	4b21      	ldr	r3, [pc, #132]	; (800325c <Measurement_of_ADC_Current_18650+0x8c>)
 80031d8:	0018      	movs	r0, r3
 80031da:	f001 f81b 	bl	8004214 <HAL_ADC_Stop>
		 HAL_ADC_Init(&hadc);
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <Measurement_of_ADC_Current_18650+0x8c>)
 80031e0:	0018      	movs	r0, r3
 80031e2:	f000 fe4f 	bl	8003e84 <HAL_ADC_Init>
     float V_ref = 3.3;  // This is known for each micro controller from data
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <Measurement_of_ADC_Current_18650+0x90>)
 80031e8:	60fb      	str	r3, [r7, #12]
     // sheet, V_ref = power supply in
     float ADC_resolution = (4096 - 1);  // 2^12 - 1
 80031ea:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <Measurement_of_ADC_Current_18650+0x94>)
 80031ec:	60bb      	str	r3, [r7, #8]
     float V_stepSize = V_ref / ADC_resolution;
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7fd fae3 	bl	80007bc <__aeabi_fdiv>
 80031f6:	1c03      	adds	r3, r0, #0
 80031f8:	607b      	str	r3, [r7, #4]
     // ADC
     /* Start ADC Conversion for ADC1 */
     ADC1 ->CHSELR=0x4000;
 80031fa:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <Measurement_of_ADC_Current_18650+0x98>)
 80031fc:	2280      	movs	r2, #128	; 0x80
 80031fe:	01d2      	lsls	r2, r2, #7
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
     ADC_Select_Current18650();
 8003202:	f000 f8cd 	bl	80033a0 <ADC_Select_Current18650>
     HAL_ADC_Start(&hadc);
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <Measurement_of_ADC_Current_18650+0x8c>)
 8003208:	0018      	movs	r0, r3
 800320a:	f000 ffaf 	bl	800416c <HAL_ADC_Start>
     uint16_t rawValue1;
     if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 800320e:	2301      	movs	r3, #1
 8003210:	425a      	negs	r2, r3
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <Measurement_of_ADC_Current_18650+0x8c>)
 8003214:	0011      	movs	r1, r2
 8003216:	0018      	movs	r0, r3
 8003218:	f001 f83c 	bl	8004294 <HAL_ADC_PollForConversion>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d114      	bne.n	800324a <Measurement_of_ADC_Current_18650+0x7a>
          /* Read the ADC1 value */
          rawValue1 = HAL_ADC_GetValue(&hadc);
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <Measurement_of_ADC_Current_18650+0x8c>)
 8003222:	0018      	movs	r0, r3
 8003224:	f001 f8d2 	bl	80043cc <HAL_ADC_GetValue>
 8003228:	0002      	movs	r2, r0
 800322a:	1cbb      	adds	r3, r7, #2
 800322c:	801a      	strh	r2, [r3, #0]
          C_18650 = ((rawValue1 * V_stepSize));
 800322e:	1cbb      	adds	r3, r7, #2
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	0018      	movs	r0, r3
 8003234:	f7fd fd2a 	bl	8000c8c <__aeabi_i2f>
 8003238:	1c03      	adds	r3, r0, #0
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	1c18      	adds	r0, r3, #0
 800323e:	f7fd fbd7 	bl	80009f0 <__aeabi_fmul>
 8003242:	1c03      	adds	r3, r0, #0
 8003244:	1c1a      	adds	r2, r3, #0
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <Measurement_of_ADC_Current_18650+0x9c>)
 8003248:	601a      	str	r2, [r3, #0]

        /// 50) /
        //.0299562) // I_load = ((V_ADC / 50 gain) / .03 calibrated
                                 // shunt)
     }
     HAL_ADC_Stop(&hadc);
 800324a:	4b04      	ldr	r3, [pc, #16]	; (800325c <Measurement_of_ADC_Current_18650+0x8c>)
 800324c:	0018      	movs	r0, r3
 800324e:	f000 ffe1 	bl	8004214 <HAL_ADC_Stop>
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b004      	add	sp, #16
 8003258:	bd80      	pop	{r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	200001f0 	.word	0x200001f0
 8003260:	40533333 	.word	0x40533333
 8003264:	457ff000 	.word	0x457ff000
 8003268:	40012400 	.word	0x40012400
 800326c:	200002e0 	.word	0x200002e0

08003270 <Measurement_of_ADC_Current_CMOS>:

void Measurement_of_ADC_Current_CMOS() {
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc);
 8003276:	4b21      	ldr	r3, [pc, #132]	; (80032fc <Measurement_of_ADC_Current_CMOS+0x8c>)
 8003278:	0018      	movs	r0, r3
 800327a:	f000 ffcb 	bl	8004214 <HAL_ADC_Stop>
		 HAL_ADC_Init(&hadc);
 800327e:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <Measurement_of_ADC_Current_CMOS+0x8c>)
 8003280:	0018      	movs	r0, r3
 8003282:	f000 fdff 	bl	8003e84 <HAL_ADC_Init>
     float V_ref = 3.3;  // This is known for each micro controller from data
 8003286:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <Measurement_of_ADC_Current_CMOS+0x90>)
 8003288:	60fb      	str	r3, [r7, #12]
     // sheet, V_ref = power supply in
     float ADC_resolution = (4096 - 1);  // 2^12 - 1
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <Measurement_of_ADC_Current_CMOS+0x94>)
 800328c:	60bb      	str	r3, [r7, #8]
     float V_stepSize = V_ref / ADC_resolution;
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7fd fa93 	bl	80007bc <__aeabi_fdiv>
 8003296:	1c03      	adds	r3, r0, #0
 8003298:	607b      	str	r3, [r7, #4]
     // ADC
     /* Start ADC Conversion for ADC1 */
     ADC1 ->CHSELR=0x1000;
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <Measurement_of_ADC_Current_CMOS+0x98>)
 800329c:	2280      	movs	r2, #128	; 0x80
 800329e:	0152      	lsls	r2, r2, #5
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
     ADC_Select_CurrentCMOS();
 80032a2:	f000 f8a1 	bl	80033e8 <ADC_Select_CurrentCMOS>
     HAL_ADC_Start(&hadc);
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <Measurement_of_ADC_Current_CMOS+0x8c>)
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 ff5f 	bl	800416c <HAL_ADC_Start>
     uint16_t rawValue1;
     if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 80032ae:	2301      	movs	r3, #1
 80032b0:	425a      	negs	r2, r3
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <Measurement_of_ADC_Current_CMOS+0x8c>)
 80032b4:	0011      	movs	r1, r2
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 ffec 	bl	8004294 <HAL_ADC_PollForConversion>
 80032bc:	1e03      	subs	r3, r0, #0
 80032be:	d114      	bne.n	80032ea <Measurement_of_ADC_Current_CMOS+0x7a>
          /* Read the ADC1 value */
          rawValue1 = HAL_ADC_GetValue(&hadc);
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <Measurement_of_ADC_Current_CMOS+0x8c>)
 80032c2:	0018      	movs	r0, r3
 80032c4:	f001 f882 	bl	80043cc <HAL_ADC_GetValue>
 80032c8:	0002      	movs	r2, r0
 80032ca:	1cbb      	adds	r3, r7, #2
 80032cc:	801a      	strh	r2, [r3, #0]
          C_CMOS = ((rawValue1 * V_stepSize));
 80032ce:	1cbb      	adds	r3, r7, #2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7fd fcda 	bl	8000c8c <__aeabi_i2f>
 80032d8:	1c03      	adds	r3, r0, #0
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	1c18      	adds	r0, r3, #0
 80032de:	f7fd fb87 	bl	80009f0 <__aeabi_fmul>
 80032e2:	1c03      	adds	r3, r0, #0
 80032e4:	1c1a      	adds	r2, r3, #0
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <Measurement_of_ADC_Current_CMOS+0x9c>)
 80032e8:	601a      	str	r2, [r3, #0]
        		  /// 20) /
                   // 4.713492);  // I_load = (( V_ADC / 20 Gain ) / 4.71
                                // calibrated shunt )
     }
     HAL_ADC_Stop(&hadc);
 80032ea:	4b04      	ldr	r3, [pc, #16]	; (80032fc <Measurement_of_ADC_Current_CMOS+0x8c>)
 80032ec:	0018      	movs	r0, r3
 80032ee:	f000 ff91 	bl	8004214 <HAL_ADC_Stop>
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b004      	add	sp, #16
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	200001f0 	.word	0x200001f0
 8003300:	40533333 	.word	0x40533333
 8003304:	457ff000 	.word	0x457ff000
 8003308:	40012400 	.word	0x40012400
 800330c:	200002dc 	.word	0x200002dc

08003310 <ADC_Select_Voltage18650>:

void ADC_Select_Voltage18650(void) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0

     ADC_ChannelConfTypeDef sConfig = {0};
 8003316:	003b      	movs	r3, r7
 8003318:	0018      	movs	r0, r3
 800331a:	2308      	movs	r3, #8
 800331c:	001a      	movs	r2, r3
 800331e:	2100      	movs	r1, #0
 8003320:	f003 ffcc 	bl	80072bc <memset>
     sConfig.Channel = ADC_CHANNEL_15;
 8003324:	003b      	movs	r3, r7
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <ADC_Select_Voltage18650+0x40>)
 8003328:	601a      	str	r2, [r3, #0]
     sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800332a:	003b      	movs	r3, r7
 800332c:	2280      	movs	r2, #128	; 0x80
 800332e:	0152      	lsls	r2, r2, #5
 8003330:	605a      	str	r2, [r3, #4]
     if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8003332:	003a      	movs	r2, r7
 8003334:	4b07      	ldr	r3, [pc, #28]	; (8003354 <ADC_Select_Voltage18650+0x44>)
 8003336:	0011      	movs	r1, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f001 f853 	bl	80043e4 <HAL_ADC_ConfigChannel>
 800333e:	1e03      	subs	r3, r0, #0
 8003340:	d001      	beq.n	8003346 <ADC_Select_Voltage18650+0x36>
          Error_Handler();
 8003342:	f000 fb53 	bl	80039ec <Error_Handler>
     }
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b002      	add	sp, #8
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	3c008000 	.word	0x3c008000
 8003354:	200001f0 	.word	0x200001f0

08003358 <ADC_Select_VoltageCMOS>:

void ADC_Select_VoltageCMOS(void) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
     ADC_ChannelConfTypeDef sConfig = {0};
 800335e:	003b      	movs	r3, r7
 8003360:	0018      	movs	r0, r3
 8003362:	2308      	movs	r3, #8
 8003364:	001a      	movs	r2, r3
 8003366:	2100      	movs	r1, #0
 8003368:	f003 ffa8 	bl	80072bc <memset>
     sConfig.Channel = ADC_CHANNEL_13;
 800336c:	003b      	movs	r3, r7
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <ADC_Select_VoltageCMOS+0x40>)
 8003370:	601a      	str	r2, [r3, #0]
     sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003372:	003b      	movs	r3, r7
 8003374:	2280      	movs	r2, #128	; 0x80
 8003376:	0152      	lsls	r2, r2, #5
 8003378:	605a      	str	r2, [r3, #4]
     if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800337a:	003a      	movs	r2, r7
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <ADC_Select_VoltageCMOS+0x44>)
 800337e:	0011      	movs	r1, r2
 8003380:	0018      	movs	r0, r3
 8003382:	f001 f82f 	bl	80043e4 <HAL_ADC_ConfigChannel>
 8003386:	1e03      	subs	r3, r0, #0
 8003388:	d001      	beq.n	800338e <ADC_Select_VoltageCMOS+0x36>
          Error_Handler();
 800338a:	f000 fb2f 	bl	80039ec <Error_Handler>
     }
}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	46bd      	mov	sp, r7
 8003392:	b002      	add	sp, #8
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	34002000 	.word	0x34002000
 800339c:	200001f0 	.word	0x200001f0

080033a0 <ADC_Select_Current18650>:

void ADC_Select_Current18650(void) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
     ADC_ChannelConfTypeDef sConfig = {0};
 80033a6:	003b      	movs	r3, r7
 80033a8:	0018      	movs	r0, r3
 80033aa:	2308      	movs	r3, #8
 80033ac:	001a      	movs	r2, r3
 80033ae:	2100      	movs	r1, #0
 80033b0:	f003 ff84 	bl	80072bc <memset>
     sConfig.Channel = ADC_CHANNEL_14;
 80033b4:	003b      	movs	r3, r7
 80033b6:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <ADC_Select_Current18650+0x40>)
 80033b8:	601a      	str	r2, [r3, #0]
     sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80033ba:	003b      	movs	r3, r7
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	0152      	lsls	r2, r2, #5
 80033c0:	605a      	str	r2, [r3, #4]
     if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80033c2:	003a      	movs	r2, r7
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <ADC_Select_Current18650+0x44>)
 80033c6:	0011      	movs	r1, r2
 80033c8:	0018      	movs	r0, r3
 80033ca:	f001 f80b 	bl	80043e4 <HAL_ADC_ConfigChannel>
 80033ce:	1e03      	subs	r3, r0, #0
 80033d0:	d001      	beq.n	80033d6 <ADC_Select_Current18650+0x36>
          Error_Handler();
 80033d2:	f000 fb0b 	bl	80039ec <Error_Handler>
     }
}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	b002      	add	sp, #8
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	38004000 	.word	0x38004000
 80033e4:	200001f0 	.word	0x200001f0

080033e8 <ADC_Select_CurrentCMOS>:

void ADC_Select_CurrentCMOS(void) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
     ADC_ChannelConfTypeDef sConfig = {0};
 80033ee:	003b      	movs	r3, r7
 80033f0:	0018      	movs	r0, r3
 80033f2:	2308      	movs	r3, #8
 80033f4:	001a      	movs	r2, r3
 80033f6:	2100      	movs	r1, #0
 80033f8:	f003 ff60 	bl	80072bc <memset>
     sConfig.Channel = ADC_CHANNEL_12;
 80033fc:	003b      	movs	r3, r7
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <ADC_Select_CurrentCMOS+0x40>)
 8003400:	601a      	str	r2, [r3, #0]
     sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003402:	003b      	movs	r3, r7
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	0152      	lsls	r2, r2, #5
 8003408:	605a      	str	r2, [r3, #4]
     if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800340a:	003a      	movs	r2, r7
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <ADC_Select_CurrentCMOS+0x44>)
 800340e:	0011      	movs	r1, r2
 8003410:	0018      	movs	r0, r3
 8003412:	f000 ffe7 	bl	80043e4 <HAL_ADC_ConfigChannel>
 8003416:	1e03      	subs	r3, r0, #0
 8003418:	d001      	beq.n	800341e <ADC_Select_CurrentCMOS+0x36>
          Error_Handler();
 800341a:	f000 fae7 	bl	80039ec <Error_Handler>
     }
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	30001000 	.word	0x30001000
 800342c:	200001f0 	.word	0x200001f0

08003430 <setNumber>:

void setNumber() {
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
     // Check each value and set the pins accordingly
     if (valueToAdjust == 1) {
 8003434:	4bb0      	ldr	r3, [pc, #704]	; (80036f8 <setNumber+0x2c8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d127      	bne.n	800348c <setNumber+0x5c>
          // value 1 = 001
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_SET);
 800343c:	23a0      	movs	r3, #160	; 0xa0
 800343e:	05db      	lsls	r3, r3, #23
 8003440:	2201      	movs	r2, #1
 8003442:	2101      	movs	r1, #1
 8003444:	0018      	movs	r0, r3
 8003446:	f001 fc5e 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_RESET);
 800344a:	23a0      	movs	r3, #160	; 0xa0
 800344c:	05db      	lsls	r3, r3, #23
 800344e:	2200      	movs	r2, #0
 8003450:	2102      	movs	r1, #2
 8003452:	0018      	movs	r0, r3
 8003454:	f001 fc57 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_RESET);
 8003458:	23a0      	movs	r3, #160	; 0xa0
 800345a:	05db      	lsls	r3, r3, #23
 800345c:	2200      	movs	r2, #0
 800345e:	2110      	movs	r1, #16
 8003460:	0018      	movs	r0, r3
 8003462:	f001 fc50 	bl	8004d06 <HAL_GPIO_WritePin>

          // Set Red
          HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 8003466:	4ba5      	ldr	r3, [pc, #660]	; (80036fc <setNumber+0x2cc>)
 8003468:	2201      	movs	r2, #1
 800346a:	2101      	movs	r1, #1
 800346c:	0018      	movs	r0, r3
 800346e:	f001 fc4a 	bl	8004d06 <HAL_GPIO_WritePin>
                            User_Input_Status_Light_Pin, GPIO_PIN_SET);
          HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port,
 8003472:	4ba2      	ldr	r3, [pc, #648]	; (80036fc <setNumber+0x2cc>)
 8003474:	2200      	movs	r2, #0
 8003476:	2102      	movs	r1, #2
 8003478:	0018      	movs	r0, r3
 800347a:	f001 fc44 	bl	8004d06 <HAL_GPIO_WritePin>
                            User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
          HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port,
 800347e:	4b9f      	ldr	r3, [pc, #636]	; (80036fc <setNumber+0x2cc>)
 8003480:	2200      	movs	r2, #0
 8003482:	2104      	movs	r1, #4
 8003484:	0018      	movs	r0, r3
 8003486:	f001 fc3e 	bl	8004d06 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port,
                                 User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
          }
     /*may need to implement state for numbers entered over 7 and numbers
     under zero */
}
 800348a:	e132      	b.n	80036f2 <setNumber+0x2c2>
     } else if (valueToAdjust == 2) {
 800348c:	4b9a      	ldr	r3, [pc, #616]	; (80036f8 <setNumber+0x2c8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d127      	bne.n	80034e4 <setNumber+0xb4>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_RESET);
 8003494:	23a0      	movs	r3, #160	; 0xa0
 8003496:	05db      	lsls	r3, r3, #23
 8003498:	2200      	movs	r2, #0
 800349a:	2101      	movs	r1, #1
 800349c:	0018      	movs	r0, r3
 800349e:	f001 fc32 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_SET);
 80034a2:	23a0      	movs	r3, #160	; 0xa0
 80034a4:	05db      	lsls	r3, r3, #23
 80034a6:	2201      	movs	r2, #1
 80034a8:	2102      	movs	r1, #2
 80034aa:	0018      	movs	r0, r3
 80034ac:	f001 fc2b 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_RESET);
 80034b0:	23a0      	movs	r3, #160	; 0xa0
 80034b2:	05db      	lsls	r3, r3, #23
 80034b4:	2200      	movs	r2, #0
 80034b6:	2110      	movs	r1, #16
 80034b8:	0018      	movs	r0, r3
 80034ba:	f001 fc24 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 80034be:	4b8f      	ldr	r3, [pc, #572]	; (80036fc <setNumber+0x2cc>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	2101      	movs	r1, #1
 80034c4:	0018      	movs	r0, r3
 80034c6:	f001 fc1e 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port,
 80034ca:	4b8c      	ldr	r3, [pc, #560]	; (80036fc <setNumber+0x2cc>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	2102      	movs	r1, #2
 80034d0:	0018      	movs	r0, r3
 80034d2:	f001 fc18 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port,
 80034d6:	4b89      	ldr	r3, [pc, #548]	; (80036fc <setNumber+0x2cc>)
 80034d8:	2200      	movs	r2, #0
 80034da:	2104      	movs	r1, #4
 80034dc:	0018      	movs	r0, r3
 80034de:	f001 fc12 	bl	8004d06 <HAL_GPIO_WritePin>
}
 80034e2:	e106      	b.n	80036f2 <setNumber+0x2c2>
     } else if (valueToAdjust == 3) {
 80034e4:	4b84      	ldr	r3, [pc, #528]	; (80036f8 <setNumber+0x2c8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d127      	bne.n	800353c <setNumber+0x10c>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_SET);
 80034ec:	23a0      	movs	r3, #160	; 0xa0
 80034ee:	05db      	lsls	r3, r3, #23
 80034f0:	2201      	movs	r2, #1
 80034f2:	2101      	movs	r1, #1
 80034f4:	0018      	movs	r0, r3
 80034f6:	f001 fc06 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_SET);
 80034fa:	23a0      	movs	r3, #160	; 0xa0
 80034fc:	05db      	lsls	r3, r3, #23
 80034fe:	2201      	movs	r2, #1
 8003500:	2102      	movs	r1, #2
 8003502:	0018      	movs	r0, r3
 8003504:	f001 fbff 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_RESET);
 8003508:	23a0      	movs	r3, #160	; 0xa0
 800350a:	05db      	lsls	r3, r3, #23
 800350c:	2200      	movs	r2, #0
 800350e:	2110      	movs	r1, #16
 8003510:	0018      	movs	r0, r3
 8003512:	f001 fbf8 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 8003516:	4b79      	ldr	r3, [pc, #484]	; (80036fc <setNumber+0x2cc>)
 8003518:	2200      	movs	r2, #0
 800351a:	2101      	movs	r1, #1
 800351c:	0018      	movs	r0, r3
 800351e:	f001 fbf2 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port,
 8003522:	4b76      	ldr	r3, [pc, #472]	; (80036fc <setNumber+0x2cc>)
 8003524:	2201      	movs	r2, #1
 8003526:	2102      	movs	r1, #2
 8003528:	0018      	movs	r0, r3
 800352a:	f001 fbec 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port,
 800352e:	4b73      	ldr	r3, [pc, #460]	; (80036fc <setNumber+0x2cc>)
 8003530:	2200      	movs	r2, #0
 8003532:	2104      	movs	r1, #4
 8003534:	0018      	movs	r0, r3
 8003536:	f001 fbe6 	bl	8004d06 <HAL_GPIO_WritePin>
}
 800353a:	e0da      	b.n	80036f2 <setNumber+0x2c2>
     } else if (valueToAdjust == 4) {
 800353c:	4b6e      	ldr	r3, [pc, #440]	; (80036f8 <setNumber+0x2c8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b04      	cmp	r3, #4
 8003542:	d127      	bne.n	8003594 <setNumber+0x164>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_RESET);
 8003544:	23a0      	movs	r3, #160	; 0xa0
 8003546:	05db      	lsls	r3, r3, #23
 8003548:	2200      	movs	r2, #0
 800354a:	2101      	movs	r1, #1
 800354c:	0018      	movs	r0, r3
 800354e:	f001 fbda 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_RESET);
 8003552:	23a0      	movs	r3, #160	; 0xa0
 8003554:	05db      	lsls	r3, r3, #23
 8003556:	2200      	movs	r2, #0
 8003558:	2102      	movs	r1, #2
 800355a:	0018      	movs	r0, r3
 800355c:	f001 fbd3 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_SET);
 8003560:	23a0      	movs	r3, #160	; 0xa0
 8003562:	05db      	lsls	r3, r3, #23
 8003564:	2201      	movs	r2, #1
 8003566:	2110      	movs	r1, #16
 8003568:	0018      	movs	r0, r3
 800356a:	f001 fbcc 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 800356e:	4b63      	ldr	r3, [pc, #396]	; (80036fc <setNumber+0x2cc>)
 8003570:	2200      	movs	r2, #0
 8003572:	2101      	movs	r1, #1
 8003574:	0018      	movs	r0, r3
 8003576:	f001 fbc6 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port,
 800357a:	4b60      	ldr	r3, [pc, #384]	; (80036fc <setNumber+0x2cc>)
 800357c:	2201      	movs	r2, #1
 800357e:	2102      	movs	r1, #2
 8003580:	0018      	movs	r0, r3
 8003582:	f001 fbc0 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port,
 8003586:	4b5d      	ldr	r3, [pc, #372]	; (80036fc <setNumber+0x2cc>)
 8003588:	2201      	movs	r2, #1
 800358a:	2104      	movs	r1, #4
 800358c:	0018      	movs	r0, r3
 800358e:	f001 fbba 	bl	8004d06 <HAL_GPIO_WritePin>
}
 8003592:	e0ae      	b.n	80036f2 <setNumber+0x2c2>
     } else if (valueToAdjust == 5) {
 8003594:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <setNumber+0x2c8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b05      	cmp	r3, #5
 800359a:	d127      	bne.n	80035ec <setNumber+0x1bc>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_SET);
 800359c:	23a0      	movs	r3, #160	; 0xa0
 800359e:	05db      	lsls	r3, r3, #23
 80035a0:	2201      	movs	r2, #1
 80035a2:	2101      	movs	r1, #1
 80035a4:	0018      	movs	r0, r3
 80035a6:	f001 fbae 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_RESET);
 80035aa:	23a0      	movs	r3, #160	; 0xa0
 80035ac:	05db      	lsls	r3, r3, #23
 80035ae:	2200      	movs	r2, #0
 80035b0:	2102      	movs	r1, #2
 80035b2:	0018      	movs	r0, r3
 80035b4:	f001 fba7 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_SET);
 80035b8:	23a0      	movs	r3, #160	; 0xa0
 80035ba:	05db      	lsls	r3, r3, #23
 80035bc:	2201      	movs	r2, #1
 80035be:	2110      	movs	r1, #16
 80035c0:	0018      	movs	r0, r3
 80035c2:	f001 fba0 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 80035c6:	4b4d      	ldr	r3, [pc, #308]	; (80036fc <setNumber+0x2cc>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	2101      	movs	r1, #1
 80035cc:	0018      	movs	r0, r3
 80035ce:	f001 fb9a 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port,
 80035d2:	4b4a      	ldr	r3, [pc, #296]	; (80036fc <setNumber+0x2cc>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	2102      	movs	r1, #2
 80035d8:	0018      	movs	r0, r3
 80035da:	f001 fb94 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port,
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <setNumber+0x2cc>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	2104      	movs	r1, #4
 80035e4:	0018      	movs	r0, r3
 80035e6:	f001 fb8e 	bl	8004d06 <HAL_GPIO_WritePin>
}
 80035ea:	e082      	b.n	80036f2 <setNumber+0x2c2>
     } else if (valueToAdjust == 6) {
 80035ec:	4b42      	ldr	r3, [pc, #264]	; (80036f8 <setNumber+0x2c8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b06      	cmp	r3, #6
 80035f2:	d127      	bne.n	8003644 <setNumber+0x214>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_RESET);
 80035f4:	23a0      	movs	r3, #160	; 0xa0
 80035f6:	05db      	lsls	r3, r3, #23
 80035f8:	2200      	movs	r2, #0
 80035fa:	2101      	movs	r1, #1
 80035fc:	0018      	movs	r0, r3
 80035fe:	f001 fb82 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_SET);
 8003602:	23a0      	movs	r3, #160	; 0xa0
 8003604:	05db      	lsls	r3, r3, #23
 8003606:	2201      	movs	r2, #1
 8003608:	2102      	movs	r1, #2
 800360a:	0018      	movs	r0, r3
 800360c:	f001 fb7b 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_SET);
 8003610:	23a0      	movs	r3, #160	; 0xa0
 8003612:	05db      	lsls	r3, r3, #23
 8003614:	2201      	movs	r2, #1
 8003616:	2110      	movs	r1, #16
 8003618:	0018      	movs	r0, r3
 800361a:	f001 fb74 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <setNumber+0x2cc>)
 8003620:	2201      	movs	r2, #1
 8003622:	2101      	movs	r1, #1
 8003624:	0018      	movs	r0, r3
 8003626:	f001 fb6e 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port,
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <setNumber+0x2cc>)
 800362c:	2200      	movs	r2, #0
 800362e:	2102      	movs	r1, #2
 8003630:	0018      	movs	r0, r3
 8003632:	f001 fb68 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port,
 8003636:	4b31      	ldr	r3, [pc, #196]	; (80036fc <setNumber+0x2cc>)
 8003638:	2201      	movs	r2, #1
 800363a:	2104      	movs	r1, #4
 800363c:	0018      	movs	r0, r3
 800363e:	f001 fb62 	bl	8004d06 <HAL_GPIO_WritePin>
}
 8003642:	e056      	b.n	80036f2 <setNumber+0x2c2>
     } else if (valueToAdjust == 7) {
 8003644:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <setNumber+0x2c8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b07      	cmp	r3, #7
 800364a:	d127      	bne.n	800369c <setNumber+0x26c>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_SET);
 800364c:	23a0      	movs	r3, #160	; 0xa0
 800364e:	05db      	lsls	r3, r3, #23
 8003650:	2201      	movs	r2, #1
 8003652:	2101      	movs	r1, #1
 8003654:	0018      	movs	r0, r3
 8003656:	f001 fb56 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_SET);
 800365a:	23a0      	movs	r3, #160	; 0xa0
 800365c:	05db      	lsls	r3, r3, #23
 800365e:	2201      	movs	r2, #1
 8003660:	2102      	movs	r1, #2
 8003662:	0018      	movs	r0, r3
 8003664:	f001 fb4f 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_SET);
 8003668:	23a0      	movs	r3, #160	; 0xa0
 800366a:	05db      	lsls	r3, r3, #23
 800366c:	2201      	movs	r2, #1
 800366e:	2110      	movs	r1, #16
 8003670:	0018      	movs	r0, r3
 8003672:	f001 fb48 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 8003676:	4b21      	ldr	r3, [pc, #132]	; (80036fc <setNumber+0x2cc>)
 8003678:	2201      	movs	r2, #1
 800367a:	2101      	movs	r1, #1
 800367c:	0018      	movs	r0, r3
 800367e:	f001 fb42 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port,
 8003682:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <setNumber+0x2cc>)
 8003684:	2201      	movs	r2, #1
 8003686:	2102      	movs	r1, #2
 8003688:	0018      	movs	r0, r3
 800368a:	f001 fb3c 	bl	8004d06 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port,
 800368e:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <setNumber+0x2cc>)
 8003690:	2201      	movs	r2, #1
 8003692:	2104      	movs	r1, #4
 8003694:	0018      	movs	r0, r3
 8003696:	f001 fb36 	bl	8004d06 <HAL_GPIO_WritePin>
}
 800369a:	e02a      	b.n	80036f2 <setNumber+0x2c2>
     else if (valueToAdjust == 0) {
 800369c:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <setNumber+0x2c8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d126      	bne.n	80036f2 <setNumber+0x2c2>
               HAL_GPIO_WritePin(GPIOA, Discrete_Bit_0_Pin, GPIO_PIN_RESET);
 80036a4:	23a0      	movs	r3, #160	; 0xa0
 80036a6:	05db      	lsls	r3, r3, #23
 80036a8:	2200      	movs	r2, #0
 80036aa:	2101      	movs	r1, #1
 80036ac:	0018      	movs	r0, r3
 80036ae:	f001 fb2a 	bl	8004d06 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, Discrete_Bit_1_Pin, GPIO_PIN_RESET);
 80036b2:	23a0      	movs	r3, #160	; 0xa0
 80036b4:	05db      	lsls	r3, r3, #23
 80036b6:	2200      	movs	r2, #0
 80036b8:	2102      	movs	r1, #2
 80036ba:	0018      	movs	r0, r3
 80036bc:	f001 fb23 	bl	8004d06 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, Discrete_Bit_2_Pin, GPIO_PIN_RESET);
 80036c0:	23a0      	movs	r3, #160	; 0xa0
 80036c2:	05db      	lsls	r3, r3, #23
 80036c4:	2200      	movs	r2, #0
 80036c6:	2110      	movs	r1, #16
 80036c8:	0018      	movs	r0, r3
 80036ca:	f001 fb1c 	bl	8004d06 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <setNumber+0x2cc>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	2101      	movs	r1, #1
 80036d4:	0018      	movs	r0, r3
 80036d6:	f001 fb16 	bl	8004d06 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port,
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <setNumber+0x2cc>)
 80036dc:	2200      	movs	r2, #0
 80036de:	2102      	movs	r1, #2
 80036e0:	0018      	movs	r0, r3
 80036e2:	f001 fb10 	bl	8004d06 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port,
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <setNumber+0x2cc>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	2104      	movs	r1, #4
 80036ec:	0018      	movs	r0, r3
 80036ee:	f001 fb0a 	bl	8004d06 <HAL_GPIO_WritePin>
}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	200002f8 	.word	0x200002f8
 80036fc:	50000400 	.word	0x50000400

08003700 <User_Input_Light_Cycel>:
     // testing

void User_Input_Light_Cycel(){
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
	// 1. Set Red
	                         HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 8003704:	4b4a      	ldr	r3, [pc, #296]	; (8003830 <User_Input_Light_Cycel+0x130>)
 8003706:	2201      	movs	r2, #1
 8003708:	2101      	movs	r1, #1
 800370a:	0018      	movs	r0, r3
 800370c:	f001 fafb 	bl	8004d06 <HAL_GPIO_WritePin>
	                                           User_Input_Status_Light_Pin,
	                                           GPIO_PIN_SET);
	                         HAL_GPIO_WritePin(
 8003710:	4b47      	ldr	r3, [pc, #284]	; (8003830 <User_Input_Light_Cycel+0x130>)
 8003712:	2200      	movs	r2, #0
 8003714:	2102      	movs	r1, #2
 8003716:	0018      	movs	r0, r3
 8003718:	f001 faf5 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Green_GPIO_Port,
	                             User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
	                         HAL_GPIO_WritePin(
 800371c:	4b44      	ldr	r3, [pc, #272]	; (8003830 <User_Input_Light_Cycel+0x130>)
 800371e:	2200      	movs	r2, #0
 8003720:	2104      	movs	r1, #4
 8003722:	0018      	movs	r0, r3
 8003724:	f001 faef 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Blue_GPIO_Port,
	                             User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
	                         HAL_Delay(14);
 8003728:	200e      	movs	r0, #14
 800372a:	f000 fb87 	bl	8003e3c <HAL_Delay>

	                         // 2. Set Yellow (Red + Green)
	                         HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 800372e:	4b40      	ldr	r3, [pc, #256]	; (8003830 <User_Input_Light_Cycel+0x130>)
 8003730:	2201      	movs	r2, #1
 8003732:	2101      	movs	r1, #1
 8003734:	0018      	movs	r0, r3
 8003736:	f001 fae6 	bl	8004d06 <HAL_GPIO_WritePin>
	                                           User_Input_Status_Light_Pin,
	                                           GPIO_PIN_SET);
	                         HAL_GPIO_WritePin(
 800373a:	4b3d      	ldr	r3, [pc, #244]	; (8003830 <User_Input_Light_Cycel+0x130>)
 800373c:	2201      	movs	r2, #1
 800373e:	2102      	movs	r1, #2
 8003740:	0018      	movs	r0, r3
 8003742:	f001 fae0 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Green_GPIO_Port,
	                             User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
	                         HAL_GPIO_WritePin(
 8003746:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <User_Input_Light_Cycel+0x130>)
 8003748:	2200      	movs	r2, #0
 800374a:	2104      	movs	r1, #4
 800374c:	0018      	movs	r0, r3
 800374e:	f001 fada 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Blue_GPIO_Port,
	                             User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
	                         HAL_Delay(14);
 8003752:	200e      	movs	r0, #14
 8003754:	f000 fb72 	bl	8003e3c <HAL_Delay>

	                         // 3. Set Green
	                         HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 8003758:	4b35      	ldr	r3, [pc, #212]	; (8003830 <User_Input_Light_Cycel+0x130>)
 800375a:	2200      	movs	r2, #0
 800375c:	2101      	movs	r1, #1
 800375e:	0018      	movs	r0, r3
 8003760:	f001 fad1 	bl	8004d06 <HAL_GPIO_WritePin>
	                                           User_Input_Status_Light_Pin,
	                                           GPIO_PIN_RESET);
	                         HAL_GPIO_WritePin(
 8003764:	4b32      	ldr	r3, [pc, #200]	; (8003830 <User_Input_Light_Cycel+0x130>)
 8003766:	2201      	movs	r2, #1
 8003768:	2102      	movs	r1, #2
 800376a:	0018      	movs	r0, r3
 800376c:	f001 facb 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Green_GPIO_Port,
	                             User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
	                         HAL_GPIO_WritePin(
 8003770:	4b2f      	ldr	r3, [pc, #188]	; (8003830 <User_Input_Light_Cycel+0x130>)
 8003772:	2200      	movs	r2, #0
 8003774:	2104      	movs	r1, #4
 8003776:	0018      	movs	r0, r3
 8003778:	f001 fac5 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Blue_GPIO_Port,
	                             User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
	                         HAL_Delay(14);
 800377c:	200e      	movs	r0, #14
 800377e:	f000 fb5d 	bl	8003e3c <HAL_Delay>

	                         // 4. Set Cyan (Green + Blue)
	                         HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 8003782:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <User_Input_Light_Cycel+0x130>)
 8003784:	2200      	movs	r2, #0
 8003786:	2101      	movs	r1, #1
 8003788:	0018      	movs	r0, r3
 800378a:	f001 fabc 	bl	8004d06 <HAL_GPIO_WritePin>
	                                           User_Input_Status_Light_Pin,
	                                           GPIO_PIN_RESET);
	                         HAL_GPIO_WritePin(
 800378e:	4b28      	ldr	r3, [pc, #160]	; (8003830 <User_Input_Light_Cycel+0x130>)
 8003790:	2201      	movs	r2, #1
 8003792:	2102      	movs	r1, #2
 8003794:	0018      	movs	r0, r3
 8003796:	f001 fab6 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Green_GPIO_Port,
	                             User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
	                         HAL_GPIO_WritePin(
 800379a:	4b25      	ldr	r3, [pc, #148]	; (8003830 <User_Input_Light_Cycel+0x130>)
 800379c:	2201      	movs	r2, #1
 800379e:	2104      	movs	r1, #4
 80037a0:	0018      	movs	r0, r3
 80037a2:	f001 fab0 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Blue_GPIO_Port,
	                             User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
	                         HAL_Delay(14);
 80037a6:	200e      	movs	r0, #14
 80037a8:	f000 fb48 	bl	8003e3c <HAL_Delay>

	                         // 5. Set Blue
	                         HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 80037ac:	4b20      	ldr	r3, [pc, #128]	; (8003830 <User_Input_Light_Cycel+0x130>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	2101      	movs	r1, #1
 80037b2:	0018      	movs	r0, r3
 80037b4:	f001 faa7 	bl	8004d06 <HAL_GPIO_WritePin>
	                                           User_Input_Status_Light_Pin,
	                                           GPIO_PIN_RESET);
	                         HAL_GPIO_WritePin(
 80037b8:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <User_Input_Light_Cycel+0x130>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	2102      	movs	r1, #2
 80037be:	0018      	movs	r0, r3
 80037c0:	f001 faa1 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Green_GPIO_Port,
	                             User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
	                         HAL_GPIO_WritePin(
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <User_Input_Light_Cycel+0x130>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	2104      	movs	r1, #4
 80037ca:	0018      	movs	r0, r3
 80037cc:	f001 fa9b 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Blue_GPIO_Port,
	                             User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
	                         HAL_Delay(14);
 80037d0:	200e      	movs	r0, #14
 80037d2:	f000 fb33 	bl	8003e3c <HAL_Delay>

	                         // 6. Set Magenta (Red + Blue)
	                         HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 80037d6:	4b16      	ldr	r3, [pc, #88]	; (8003830 <User_Input_Light_Cycel+0x130>)
 80037d8:	2201      	movs	r2, #1
 80037da:	2101      	movs	r1, #1
 80037dc:	0018      	movs	r0, r3
 80037de:	f001 fa92 	bl	8004d06 <HAL_GPIO_WritePin>
	                                           User_Input_Status_Light_Pin,
	                                           GPIO_PIN_SET);
	                         HAL_GPIO_WritePin(
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <User_Input_Light_Cycel+0x130>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	2102      	movs	r1, #2
 80037e8:	0018      	movs	r0, r3
 80037ea:	f001 fa8c 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Green_GPIO_Port,
	                             User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
	                         HAL_GPIO_WritePin(
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <User_Input_Light_Cycel+0x130>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	2104      	movs	r1, #4
 80037f4:	0018      	movs	r0, r3
 80037f6:	f001 fa86 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Blue_GPIO_Port,
	                             User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
	                         HAL_Delay(14);
 80037fa:	200e      	movs	r0, #14
 80037fc:	f000 fb1e 	bl	8003e3c <HAL_Delay>

	                         // 7. Set White (Red + Green + Blue)
	                         HAL_GPIO_WritePin(User_Input_Status_Light_GPIO_Port,
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <User_Input_Light_Cycel+0x130>)
 8003802:	2201      	movs	r2, #1
 8003804:	2101      	movs	r1, #1
 8003806:	0018      	movs	r0, r3
 8003808:	f001 fa7d 	bl	8004d06 <HAL_GPIO_WritePin>
	                                           User_Input_Status_Light_Pin,
	                                           GPIO_PIN_SET);
	                         HAL_GPIO_WritePin(
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <User_Input_Light_Cycel+0x130>)
 800380e:	2201      	movs	r2, #1
 8003810:	2102      	movs	r1, #2
 8003812:	0018      	movs	r0, r3
 8003814:	f001 fa77 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Green_GPIO_Port,
	                             User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
	                         HAL_GPIO_WritePin(
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <User_Input_Light_Cycel+0x130>)
 800381a:	2201      	movs	r2, #1
 800381c:	2104      	movs	r1, #4
 800381e:	0018      	movs	r0, r3
 8003820:	f001 fa71 	bl	8004d06 <HAL_GPIO_WritePin>
	                             User_Input_Status_Light_Blue_GPIO_Port,
	                             User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
	                         HAL_Delay(14);
 8003824:	200e      	movs	r0, #14
 8003826:	f000 fb09 	bl	8003e3c <HAL_Delay>
}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	50000400 	.word	0x50000400

08003834 <Button_Debounce_Set>:

void Button_Debounce_Set(){
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
	uint8_t currentPlusState = HAL_GPIO_ReadPin(GPIOC, Plus_Pin);
 800383a:	1dfc      	adds	r4, r7, #7
 800383c:	4b65      	ldr	r3, [pc, #404]	; (80039d4 <Button_Debounce_Set+0x1a0>)
 800383e:	2102      	movs	r1, #2
 8003840:	0018      	movs	r0, r3
 8003842:	f001 fa43 	bl	8004ccc <HAL_GPIO_ReadPin>
 8003846:	0003      	movs	r3, r0
 8003848:	7023      	strb	r3, [r4, #0]
	          uint8_t currentMinusState = HAL_GPIO_ReadPin(GPIOC, Minus_Pin);
 800384a:	1dbc      	adds	r4, r7, #6
 800384c:	4b61      	ldr	r3, [pc, #388]	; (80039d4 <Button_Debounce_Set+0x1a0>)
 800384e:	2101      	movs	r1, #1
 8003850:	0018      	movs	r0, r3
 8003852:	f001 fa3b 	bl	8004ccc <HAL_GPIO_ReadPin>
 8003856:	0003      	movs	r3, r0
 8003858:	7023      	strb	r3, [r4, #0]

	          if (currentPlusState == GPIO_PIN_SET ||
 800385a:	1dfb      	adds	r3, r7, #7
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d004      	beq.n	800386c <Button_Debounce_Set+0x38>
 8003862:	1dbb      	adds	r3, r7, #6
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d000      	beq.n	800386c <Button_Debounce_Set+0x38>
 800386a:	e0ae      	b.n	80039ca <Button_Debounce_Set+0x196>
	              currentMinusState == GPIO_PIN_SET) {
	               // set to high state
	               if ((HAL_GetTick() - lastDebounceTime) > debounceDelay) {
 800386c:	f000 fadc 	bl	8003e28 <HAL_GetTick>
 8003870:	0002      	movs	r2, r0
 8003872:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <Button_Debounce_Set+0x1a4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2232      	movs	r2, #50	; 0x32
 800387a:	4293      	cmp	r3, r2
 800387c:	d800      	bhi.n	8003880 <Button_Debounce_Set+0x4c>
 800387e:	e09c      	b.n	80039ba <Button_Debounce_Set+0x186>
	                    // Only update the value if the state has changed
	                    if ((currentPlusState == GPIO_PIN_SET &&
 8003880:	1dfb      	adds	r3, r7, #7
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d103      	bne.n	8003890 <Button_Debounce_Set+0x5c>
	                         lastPlusState != GPIO_PIN_SET) ||
 8003888:	4b54      	ldr	r3, [pc, #336]	; (80039dc <Button_Debounce_Set+0x1a8>)
 800388a:	781b      	ldrb	r3, [r3, #0]
	                    if ((currentPlusState == GPIO_PIN_SET &&
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <Button_Debounce_Set+0x6c>
	                         lastPlusState != GPIO_PIN_SET) ||
 8003890:	1dbb      	adds	r3, r7, #6
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d124      	bne.n	80038e2 <Button_Debounce_Set+0xae>
	                        (currentMinusState == GPIO_PIN_SET &&
	                         lastMinusState != GPIO_PIN_SET)) {
 8003898:	4b51      	ldr	r3, [pc, #324]	; (80039e0 <Button_Debounce_Set+0x1ac>)
 800389a:	781b      	ldrb	r3, [r3, #0]
	                        (currentMinusState == GPIO_PIN_SET &&
 800389c:	2b01      	cmp	r3, #1
 800389e:	d020      	beq.n	80038e2 <Button_Debounce_Set+0xae>
	                         if (currentPlusState == GPIO_PIN_SET) {
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d10c      	bne.n	80038c2 <Button_Debounce_Set+0x8e>
	                              valueToAdjust++;
 80038a8:	4b4e      	ldr	r3, [pc, #312]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	4b4d      	ldr	r3, [pc, #308]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 80038b0:	601a      	str	r2, [r3, #0]
	                              if (valueToAdjust >= 7) {
 80038b2:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	dd13      	ble.n	80038e2 <Button_Debounce_Set+0xae>
	                                   valueToAdjust = 7;
 80038ba:	4b4a      	ldr	r3, [pc, #296]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 80038bc:	2207      	movs	r2, #7
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	e00f      	b.n	80038e2 <Button_Debounce_Set+0xae>
	                              }
	                         }

	                         else if (currentMinusState == GPIO_PIN_SET) {
 80038c2:	1dbb      	adds	r3, r7, #6
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d10b      	bne.n	80038e2 <Button_Debounce_Set+0xae>
	                              valueToAdjust--;
 80038ca:	4b46      	ldr	r3, [pc, #280]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	1e5a      	subs	r2, r3, #1
 80038d0:	4b44      	ldr	r3, [pc, #272]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 80038d2:	601a      	str	r2, [r3, #0]
	                              if (valueToAdjust < 0) {
 80038d4:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	da02      	bge.n	80038e2 <Button_Debounce_Set+0xae>
	                                   valueToAdjust = 0;
 80038dc:	4b41      	ldr	r3, [pc, #260]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
	                              }
	                         }
	                    }

	                    flashingStartTime = HAL_GetTick();
 80038e2:	f000 faa1 	bl	8003e28 <HAL_GetTick>
 80038e6:	0002      	movs	r2, r0
 80038e8:	4b3f      	ldr	r3, [pc, #252]	; (80039e8 <Button_Debounce_Set+0x1b4>)
 80038ea:	601a      	str	r2, [r3, #0]
	                    while ((HAL_GetTick() - flashingStartTime) <
 80038ec:	e057      	b.n	800399e <Button_Debounce_Set+0x16a>
	                           flashingDuration) {
	                         // Save the last state before reading the current state
	                         lastPlusState = currentPlusState;
 80038ee:	4b3b      	ldr	r3, [pc, #236]	; (80039dc <Button_Debounce_Set+0x1a8>)
 80038f0:	1dfa      	adds	r2, r7, #7
 80038f2:	7812      	ldrb	r2, [r2, #0]
 80038f4:	701a      	strb	r2, [r3, #0]
	                         lastMinusState = currentMinusState;
 80038f6:	4b3a      	ldr	r3, [pc, #232]	; (80039e0 <Button_Debounce_Set+0x1ac>)
 80038f8:	1dba      	adds	r2, r7, #6
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	701a      	strb	r2, [r3, #0]

	                         currentPlusState = HAL_GPIO_ReadPin(GPIOC, Plus_Pin);
 80038fe:	1dfc      	adds	r4, r7, #7
 8003900:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <Button_Debounce_Set+0x1a0>)
 8003902:	2102      	movs	r1, #2
 8003904:	0018      	movs	r0, r3
 8003906:	f001 f9e1 	bl	8004ccc <HAL_GPIO_ReadPin>
 800390a:	0003      	movs	r3, r0
 800390c:	7023      	strb	r3, [r4, #0]
	                         currentMinusState = HAL_GPIO_ReadPin(GPIOC, Minus_Pin);
 800390e:	1dbc      	adds	r4, r7, #6
 8003910:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <Button_Debounce_Set+0x1a0>)
 8003912:	2101      	movs	r1, #1
 8003914:	0018      	movs	r0, r3
 8003916:	f001 f9d9 	bl	8004ccc <HAL_GPIO_ReadPin>
 800391a:	0003      	movs	r3, r0
 800391c:	7023      	strb	r3, [r4, #0]

	                         // Check for subsequent button presses to restart the
	                         // timer
	                         if (currentPlusState == GPIO_PIN_SET ||
 800391e:	1dfb      	adds	r3, r7, #7
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d003      	beq.n	800392e <Button_Debounce_Set+0xfa>
 8003926:	1dbb      	adds	r3, r7, #6
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d135      	bne.n	800399a <Button_Debounce_Set+0x166>
	                             currentMinusState == GPIO_PIN_SET) {
	                              flashingStartTime =
	                                  HAL_GetTick();  // Restart the 5-second
 800392e:	f000 fa7b 	bl	8003e28 <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
	                              flashingStartTime =
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <Button_Debounce_Set+0x1b4>)
 8003936:	601a      	str	r2, [r3, #0]
	                                                  // interval

	                              // Only update the value if the state has changed
	                              if ((currentPlusState == GPIO_PIN_SET &&
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d103      	bne.n	8003948 <Button_Debounce_Set+0x114>
	                                   lastPlusState != GPIO_PIN_SET) ||
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <Button_Debounce_Set+0x1a8>)
 8003942:	781b      	ldrb	r3, [r3, #0]
	                              if ((currentPlusState == GPIO_PIN_SET &&
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <Button_Debounce_Set+0x124>
	                                   lastPlusState != GPIO_PIN_SET) ||
 8003948:	1dbb      	adds	r3, r7, #6
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d124      	bne.n	800399a <Button_Debounce_Set+0x166>
	                                  (currentMinusState == GPIO_PIN_SET &&
	                                   lastMinusState != GPIO_PIN_SET)) {
 8003950:	4b23      	ldr	r3, [pc, #140]	; (80039e0 <Button_Debounce_Set+0x1ac>)
 8003952:	781b      	ldrb	r3, [r3, #0]
	                                  (currentMinusState == GPIO_PIN_SET &&
 8003954:	2b01      	cmp	r3, #1
 8003956:	d020      	beq.n	800399a <Button_Debounce_Set+0x166>
	                                   if (currentPlusState == GPIO_PIN_SET) {
 8003958:	1dfb      	adds	r3, r7, #7
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10c      	bne.n	800397a <Button_Debounce_Set+0x146>
	                                        valueToAdjust++;
 8003960:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	4b1f      	ldr	r3, [pc, #124]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 8003968:	601a      	str	r2, [r3, #0]
	                                        if (valueToAdjust >= 7) {
 800396a:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b06      	cmp	r3, #6
 8003970:	dd13      	ble.n	800399a <Button_Debounce_Set+0x166>
	                                             valueToAdjust = 7;
 8003972:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 8003974:	2207      	movs	r2, #7
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e00f      	b.n	800399a <Button_Debounce_Set+0x166>
	                                        }
	                                   }

	                                   else if (currentMinusState == GPIO_PIN_SET) {
 800397a:	1dbb      	adds	r3, r7, #6
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d10b      	bne.n	800399a <Button_Debounce_Set+0x166>
	                                        valueToAdjust--;
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	1e5a      	subs	r2, r3, #1
 8003988:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 800398a:	601a      	str	r2, [r3, #0]
	                                        if (valueToAdjust < 0) {
 800398c:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	da02      	bge.n	800399a <Button_Debounce_Set+0x166>
	                                             valueToAdjust = 0;
 8003994:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <Button_Debounce_Set+0x1b0>)
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]

	                              // HAL_GPIO_TogglePin(User_Input_Status_Light_GPIO_Port,
	                              // User_Input_Status_Light_Pin); HAL_Delay(100);
	                         }
	                         // 1. Set Red
	                         User_Input_Light_Cycel();
 800399a:	f7ff feb1 	bl	8003700 <User_Input_Light_Cycel>
	                    while ((HAL_GetTick() - flashingStartTime) <
 800399e:	f000 fa43 	bl	8003e28 <HAL_GetTick>
 80039a2:	0002      	movs	r2, r0
 80039a4:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <Button_Debounce_Set+0x1b4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2296      	movs	r2, #150	; 0x96
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d39e      	bcc.n	80038ee <Button_Debounce_Set+0xba>
	                    }
	                    lastDebounceTime = HAL_GetTick();
 80039b0:	f000 fa3a 	bl	8003e28 <HAL_GetTick>
 80039b4:	0002      	movs	r2, r0
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <Button_Debounce_Set+0x1a4>)
 80039b8:	601a      	str	r2, [r3, #0]
	               }

	               // Save the last state at the end of the loop
	               lastPlusState = currentPlusState;
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <Button_Debounce_Set+0x1a8>)
 80039bc:	1dfa      	adds	r2, r7, #7
 80039be:	7812      	ldrb	r2, [r2, #0]
 80039c0:	701a      	strb	r2, [r3, #0]
	               lastMinusState = currentMinusState;
 80039c2:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <Button_Debounce_Set+0x1ac>)
 80039c4:	1dba      	adds	r2, r7, #6
 80039c6:	7812      	ldrb	r2, [r2, #0]
 80039c8:	701a      	strb	r2, [r3, #0]

	               /* USER CODE END WHILE */

	               /* USER CODE BEGIN 3 */
	          }
}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b003      	add	sp, #12
 80039d0:	bd90      	pop	{r4, r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	50000800 	.word	0x50000800
 80039d8:	200002f0 	.word	0x200002f0
 80039dc:	200002fc 	.word	0x200002fc
 80039e0:	200002fd 	.word	0x200002fd
 80039e4:	200002f8 	.word	0x200002f8
 80039e8:	200002f4 	.word	0x200002f4

080039ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039f0:	b672      	cpsid	i
}
 80039f2:	46c0      	nop			; (mov r8, r8)
     /* USER CODE BEGIN Error_Handler_Debug */
     /* User can add his own implementation to report the HAL error return state
      */
     __disable_irq();
     while (1) {
 80039f4:	e7fe      	b.n	80039f4 <Error_Handler+0x8>
	...

080039f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <HAL_MspInit+0x24>)
 80039fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_MspInit+0x24>)
 8003a02:	2101      	movs	r1, #1
 8003a04:	430a      	orrs	r2, r1
 8003a06:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <HAL_MspInit+0x24>)
 8003a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_MspInit+0x24>)
 8003a0e:	2180      	movs	r1, #128	; 0x80
 8003a10:	0549      	lsls	r1, r1, #21
 8003a12:	430a      	orrs	r2, r1
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000

08003a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	240c      	movs	r4, #12
 8003a2a:	193b      	adds	r3, r7, r4
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	2314      	movs	r3, #20
 8003a30:	001a      	movs	r2, r3
 8003a32:	2100      	movs	r1, #0
 8003a34:	f003 fc42 	bl	80072bc <memset>
  if(hadc->Instance==ADC1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <HAL_ADC_MspInit+0x70>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d121      	bne.n	8003a86 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <HAL_ADC_MspInit+0x74>)
 8003a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a46:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <HAL_ADC_MspInit+0x74>)
 8003a48:	2180      	movs	r1, #128	; 0x80
 8003a4a:	0089      	lsls	r1, r1, #2
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a50:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <HAL_ADC_MspInit+0x74>)
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <HAL_ADC_MspInit+0x74>)
 8003a56:	2104      	movs	r1, #4
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <HAL_ADC_MspInit+0x74>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	2204      	movs	r2, #4
 8003a62:	4013      	ands	r3, r2
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = Current_ADC_CMOS_Pin|Voltage_ADC_CMOS_Pin|Current_ADC_18650_Pin|Voltage_ADC_18650_Pin;
 8003a68:	193b      	adds	r3, r7, r4
 8003a6a:	223c      	movs	r2, #60	; 0x3c
 8003a6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a6e:	193b      	adds	r3, r7, r4
 8003a70:	2203      	movs	r2, #3
 8003a72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	193b      	adds	r3, r7, r4
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a7a:	193b      	adds	r3, r7, r4
 8003a7c:	4a06      	ldr	r2, [pc, #24]	; (8003a98 <HAL_ADC_MspInit+0x78>)
 8003a7e:	0019      	movs	r1, r3
 8003a80:	0010      	movs	r0, r2
 8003a82:	f000 ffa5 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b009      	add	sp, #36	; 0x24
 8003a8c:	bd90      	pop	{r4, r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	40012400 	.word	0x40012400
 8003a94:	40021000 	.word	0x40021000
 8003a98:	50000800 	.word	0x50000800

08003a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a9c:	b590      	push	{r4, r7, lr}
 8003a9e:	b089      	sub	sp, #36	; 0x24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa4:	240c      	movs	r4, #12
 8003aa6:	193b      	adds	r3, r7, r4
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	2314      	movs	r3, #20
 8003aac:	001a      	movs	r2, r3
 8003aae:	2100      	movs	r1, #0
 8003ab0:	f003 fc04 	bl	80072bc <memset>
  if(huart->Instance==USART2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_UART_MspInit+0x80>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d129      	bne.n	8003b12 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003abe:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <HAL_UART_MspInit+0x84>)
 8003ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac2:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <HAL_UART_MspInit+0x84>)
 8003ac4:	2180      	movs	r1, #128	; 0x80
 8003ac6:	0289      	lsls	r1, r1, #10
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003acc:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <HAL_UART_MspInit+0x84>)
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_UART_MspInit+0x84>)
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ad8:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <HAL_UART_MspInit+0x84>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	2201      	movs	r2, #1
 8003ade:	4013      	ands	r3, r2
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ae4:	0021      	movs	r1, r4
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	220c      	movs	r2, #12
 8003aea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	2202      	movs	r2, #2
 8003af0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	187b      	adds	r3, r7, r1
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	2203      	movs	r2, #3
 8003afc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	2204      	movs	r2, #4
 8003b02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b04:	187a      	adds	r2, r7, r1
 8003b06:	23a0      	movs	r3, #160	; 0xa0
 8003b08:	05db      	lsls	r3, r3, #23
 8003b0a:	0011      	movs	r1, r2
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 ff5f 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b009      	add	sp, #36	; 0x24
 8003b18:	bd90      	pop	{r4, r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	40004400 	.word	0x40004400
 8003b20:	40021000 	.word	0x40021000

08003b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b28:	e7fe      	b.n	8003b28 <NMI_Handler+0x4>

08003b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b2e:	e7fe      	b.n	8003b2e <HardFault_Handler+0x4>

08003b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b48:	f000 f95c 	bl	8003e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b4c:	46c0      	nop			; (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	af00      	add	r7, sp, #0
  return 1;
 8003b56:	2301      	movs	r3, #1
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <_kill>:

int _kill(int pid, int sig)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b68:	f003 fc02 	bl	8007370 <__errno>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	2216      	movs	r2, #22
 8003b70:	601a      	str	r2, [r3, #0]
  return -1;
 8003b72:	2301      	movs	r3, #1
 8003b74:	425b      	negs	r3, r3
}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b002      	add	sp, #8
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <_exit>:

void _exit (int status)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b86:	2301      	movs	r3, #1
 8003b88:	425a      	negs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	0011      	movs	r1, r2
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f7ff ffe5 	bl	8003b5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b94:	e7fe      	b.n	8003b94 <_exit+0x16>

08003b96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	e00a      	b.n	8003bbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ba8:	e000      	b.n	8003bac <_read+0x16>
 8003baa:	bf00      	nop
 8003bac:	0001      	movs	r1, r0
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	60ba      	str	r2, [r7, #8]
 8003bb4:	b2ca      	uxtb	r2, r1
 8003bb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	dbf0      	blt.n	8003ba8 <_read+0x12>
  }

  return len;
 8003bc6:	687b      	ldr	r3, [r7, #4]
}
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b006      	add	sp, #24
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e009      	b.n	8003bf6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	60ba      	str	r2, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	0018      	movs	r0, r3
 8003bec:	f7ff fa46 	bl	800307c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	dbf1      	blt.n	8003be2 <_write+0x12>
  }
  return len;
 8003bfe:	687b      	ldr	r3, [r7, #4]
}
 8003c00:	0018      	movs	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b006      	add	sp, #24
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_close>:

int _close(int file)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c10:	2301      	movs	r3, #1
 8003c12:	425b      	negs	r3, r3
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2280      	movs	r2, #128	; 0x80
 8003c2a:	0192      	lsls	r2, r2, #6
 8003c2c:	605a      	str	r2, [r3, #4]
  return 0;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b002      	add	sp, #8
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <_isatty>:

int _isatty(int file)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c40:	2301      	movs	r3, #1
}
 8003c42:	0018      	movs	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b002      	add	sp, #8
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	0018      	movs	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b004      	add	sp, #16
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c68:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <_sbrk+0x5c>)
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <_sbrk+0x60>)
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c74:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <_sbrk+0x64>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d102      	bne.n	8003c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <_sbrk+0x64>)
 8003c7e:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <_sbrk+0x68>)
 8003c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <_sbrk+0x64>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	18d3      	adds	r3, r2, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d207      	bcs.n	8003ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c90:	f003 fb6e 	bl	8007370 <__errno>
 8003c94:	0003      	movs	r3, r0
 8003c96:	220c      	movs	r2, #12
 8003c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	425b      	negs	r3, r3
 8003c9e:	e009      	b.n	8003cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ca0:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <_sbrk+0x64>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <_sbrk+0x64>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	18d2      	adds	r2, r2, r3
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <_sbrk+0x64>)
 8003cb0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
}
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b006      	add	sp, #24
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20005000 	.word	0x20005000
 8003cc0:	00000400 	.word	0x00000400
 8003cc4:	20000304 	.word	0x20000304
 8003cc8:	20000458 	.word	0x20000458

08003ccc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003cd8:	4813      	ldr	r0, [pc, #76]	; (8003d28 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003cda:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003cdc:	f7ff fff6 	bl	8003ccc <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8003ce0:	4812      	ldr	r0, [pc, #72]	; (8003d2c <LoopForever+0x6>)
    LDR R1, [R0]
 8003ce2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003ce4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8003ce6:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <LoopForever+0xa>)
    CMP R1, R2
 8003ce8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8003cea:	d105      	bne.n	8003cf8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8003cec:	4811      	ldr	r0, [pc, #68]	; (8003d34 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8003cee:	4912      	ldr	r1, [pc, #72]	; (8003d38 <LoopForever+0x12>)
    STR R1, [R0]
 8003cf0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8003cf2:	4812      	ldr	r0, [pc, #72]	; (8003d3c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003cf4:	4912      	ldr	r1, [pc, #72]	; (8003d40 <LoopForever+0x1a>)
    STR R1, [R0]
 8003cf6:	6001      	str	r1, [r0, #0]

08003cf8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cf8:	4812      	ldr	r0, [pc, #72]	; (8003d44 <LoopForever+0x1e>)
  ldr r1, =_edata
 8003cfa:	4913      	ldr	r1, [pc, #76]	; (8003d48 <LoopForever+0x22>)
  ldr r2, =_sidata
 8003cfc:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <LoopForever+0x26>)
  movs r3, #0
 8003cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d00:	e002      	b.n	8003d08 <LoopCopyDataInit>

08003d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d06:	3304      	adds	r3, #4

08003d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d0c:	d3f9      	bcc.n	8003d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d0e:	4a10      	ldr	r2, [pc, #64]	; (8003d50 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003d10:	4c10      	ldr	r4, [pc, #64]	; (8003d54 <LoopForever+0x2e>)
  movs r3, #0
 8003d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d14:	e001      	b.n	8003d1a <LoopFillZerobss>

08003d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d18:	3204      	adds	r2, #4

08003d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d1c:	d3fb      	bcc.n	8003d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d1e:	f003 fb2d 	bl	800737c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d22:	f7fe ff8d 	bl	8002c40 <main>

08003d26 <LoopForever>:

LoopForever:
    b LoopForever
 8003d26:	e7fe      	b.n	8003d26 <LoopForever>
   ldr   r0, =_estack
 8003d28:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8003d2c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003d30:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8003d34:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8003d38:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003d3c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003d40:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8003d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d48:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003d4c:	0800b218 	.word	0x0800b218
  ldr r2, =_sbss
 8003d50:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003d54:	20000458 	.word	0x20000458

08003d58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d58:	e7fe      	b.n	8003d58 <ADC1_IRQHandler>
	...

08003d5c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d62:	1dfb      	adds	r3, r7, #7
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_Init+0x3c>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <HAL_Init+0x3c>)
 8003d6e:	2140      	movs	r1, #64	; 0x40
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d74:	2003      	movs	r0, #3
 8003d76:	f000 f811 	bl	8003d9c <HAL_InitTick>
 8003d7a:	1e03      	subs	r3, r0, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003d7e:	1dfb      	adds	r3, r7, #7
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	e001      	b.n	8003d8a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d86:	f7ff fe37 	bl	80039f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d8a:	1dfb      	adds	r3, r7, #7
 8003d8c:	781b      	ldrb	r3, [r3, #0]
}
 8003d8e:	0018      	movs	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b002      	add	sp, #8
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	40022000 	.word	0x40022000

08003d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003da4:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <HAL_InitTick+0x5c>)
 8003da6:	681c      	ldr	r4, [r3, #0]
 8003da8:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <HAL_InitTick+0x60>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	0019      	movs	r1, r3
 8003dae:	23fa      	movs	r3, #250	; 0xfa
 8003db0:	0098      	lsls	r0, r3, #2
 8003db2:	f7fc f9c5 	bl	8000140 <__udivsi3>
 8003db6:	0003      	movs	r3, r0
 8003db8:	0019      	movs	r1, r3
 8003dba:	0020      	movs	r0, r4
 8003dbc:	f7fc f9c0 	bl	8000140 <__udivsi3>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f000 fdf7 	bl	80049b6 <HAL_SYSTICK_Config>
 8003dc8:	1e03      	subs	r3, r0, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e00f      	b.n	8003df0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d80b      	bhi.n	8003dee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	425b      	negs	r3, r3
 8003ddc:	2200      	movs	r2, #0
 8003dde:	0018      	movs	r0, r3
 8003de0:	f000 fdd4 	bl	800498c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_InitTick+0x64>)
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
}
 8003df0:	0018      	movs	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b003      	add	sp, #12
 8003df6:	bd90      	pop	{r4, r7, pc}
 8003df8:	20000000 	.word	0x20000000
 8003dfc:	20000008 	.word	0x20000008
 8003e00:	20000004 	.word	0x20000004

08003e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_IncTick+0x1c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	001a      	movs	r2, r3
 8003e0e:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HAL_IncTick+0x20>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	18d2      	adds	r2, r2, r3
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <HAL_IncTick+0x20>)
 8003e16:	601a      	str	r2, [r3, #0]
}
 8003e18:	46c0      	nop			; (mov r8, r8)
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	20000008 	.word	0x20000008
 8003e24:	20000308 	.word	0x20000308

08003e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e2c:	4b02      	ldr	r3, [pc, #8]	; (8003e38 <HAL_GetTick+0x10>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	0018      	movs	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	20000308 	.word	0x20000308

08003e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e44:	f7ff fff0 	bl	8003e28 <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3301      	adds	r3, #1
 8003e54:	d005      	beq.n	8003e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <HAL_Delay+0x44>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	001a      	movs	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	f7ff ffe0 	bl	8003e28 <HAL_GetTick>
 8003e68:	0002      	movs	r2, r0
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d8f7      	bhi.n	8003e64 <HAL_Delay+0x28>
  {
  }
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b004      	add	sp, #16
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	20000008 	.word	0x20000008

08003e84 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e159      	b.n	800414a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2250      	movs	r2, #80	; 0x50
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7ff fdb6 	bl	8003a20 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	2210      	movs	r2, #16
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d005      	beq.n	8003ecc <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003eca:	d00b      	beq.n	8003ee4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2250      	movs	r2, #80	; 0x50
 8003edc:	2100      	movs	r1, #0
 8003ede:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e132      	b.n	800414a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	4a9a      	ldr	r2, [pc, #616]	; (8004154 <HAL_ADC_Init+0x2d0>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	2202      	movs	r2, #2
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2203      	movs	r2, #3
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d108      	bne.n	8003f14 <HAL_ADC_Init+0x90>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADC_Init+0x90>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_ADC_Init+0x92>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d149      	bne.n	8003fae <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	23c0      	movs	r3, #192	; 0xc0
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d00b      	beq.n	8003f3e <HAL_ADC_Init+0xba>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	05db      	lsls	r3, r3, #23
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d005      	beq.n	8003f3e <HAL_ADC_Init+0xba>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d111      	bne.n	8003f62 <HAL_ADC_Init+0xde>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	0092      	lsls	r2, r2, #2
 8003f4a:	0892      	lsrs	r2, r2, #2
 8003f4c:	611a      	str	r2, [r3, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6919      	ldr	r1, [r3, #16]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	611a      	str	r2, [r3, #16]
 8003f60:	e014      	b.n	8003f8c <HAL_ADC_Init+0x108>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	0092      	lsls	r2, r2, #2
 8003f6e:	0892      	lsrs	r2, r2, #2
 8003f70:	611a      	str	r2, [r3, #16]
 8003f72:	4b79      	ldr	r3, [pc, #484]	; (8004158 <HAL_ADC_Init+0x2d4>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b78      	ldr	r3, [pc, #480]	; (8004158 <HAL_ADC_Init+0x2d4>)
 8003f78:	4978      	ldr	r1, [pc, #480]	; (800415c <HAL_ADC_Init+0x2d8>)
 8003f7a:	400a      	ands	r2, r1
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	4b76      	ldr	r3, [pc, #472]	; (8004158 <HAL_ADC_Init+0x2d4>)
 8003f80:	6819      	ldr	r1, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	4b74      	ldr	r3, [pc, #464]	; (8004158 <HAL_ADC_Init+0x2d4>)
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2118      	movs	r1, #24
 8003f98:	438a      	bics	r2, r1
 8003f9a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68d9      	ldr	r1, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003fae:	4b6a      	ldr	r3, [pc, #424]	; (8004158 <HAL_ADC_Init+0x2d4>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	4b69      	ldr	r3, [pc, #420]	; (8004158 <HAL_ADC_Init+0x2d4>)
 8003fb4:	496a      	ldr	r1, [pc, #424]	; (8004160 <HAL_ADC_Init+0x2dc>)
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8003fba:	4b67      	ldr	r3, [pc, #412]	; (8004158 <HAL_ADC_Init+0x2d4>)
 8003fbc:	6819      	ldr	r1, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc2:	065a      	lsls	r2, r3, #25
 8003fc4:	4b64      	ldr	r3, [pc, #400]	; (8004158 <HAL_ADC_Init+0x2d4>)
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	055b      	lsls	r3, r3, #21
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d108      	bne.n	8003fea <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2180      	movs	r1, #128	; 0x80
 8003fe4:	0549      	lsls	r1, r1, #21
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	495b      	ldr	r1, [pc, #364]	; (8004164 <HAL_ADC_Init+0x2e0>)
 8003ff6:	400a      	ands	r2, r1
 8003ff8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68d9      	ldr	r1, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d101      	bne.n	8004010 <HAL_ADC_Init+0x18c>
 800400c:	2304      	movs	r3, #4
 800400e:	e000      	b.n	8004012 <HAL_ADC_Init+0x18e>
 8004010:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004012:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2020      	movs	r0, #32
 8004018:	5c1b      	ldrb	r3, [r3, r0]
 800401a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800401c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	202c      	movs	r0, #44	; 0x2c
 8004022:	5c1b      	ldrb	r3, [r3, r0]
 8004024:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004026:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800402c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004034:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800403c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800404a:	23c2      	movs	r3, #194	; 0xc2
 800404c:	33ff      	adds	r3, #255	; 0xff
 800404e:	429a      	cmp	r2, r3
 8004050:	d00b      	beq.n	800406a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68d9      	ldr	r1, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2221      	movs	r2, #33	; 0x21
 800406e:	5c9b      	ldrb	r3, [r3, r2]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d11a      	bne.n	80040aa <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	5c9b      	ldrb	r3, [r3, r2]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2180      	movs	r1, #128	; 0x80
 800408a:	0249      	lsls	r1, r1, #9
 800408c:	430a      	orrs	r2, r1
 800408e:	60da      	str	r2, [r3, #12]
 8004090:	e00b      	b.n	80040aa <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	2220      	movs	r2, #32
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	2201      	movs	r2, #1
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d11f      	bne.n	80040f2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	492a      	ldr	r1, [pc, #168]	; (8004168 <HAL_ADC_Init+0x2e4>)
 80040be:	400a      	ands	r2, r1
 80040c0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6919      	ldr	r1, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80040d0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80040d6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2101      	movs	r1, #1
 80040ec:	430a      	orrs	r2, r1
 80040ee:	611a      	str	r2, [r3, #16]
 80040f0:	e00e      	b.n	8004110 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2201      	movs	r2, #1
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d107      	bne.n	8004110 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2101      	movs	r1, #1
 800410c:	438a      	bics	r2, r1
 800410e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2107      	movs	r1, #7
 800411c:	438a      	bics	r2, r1
 800411e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6959      	ldr	r1, [r3, #20]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	2203      	movs	r2, #3
 800413e:	4393      	bics	r3, r2
 8004140:	2201      	movs	r2, #1
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	0018      	movs	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	b002      	add	sp, #8
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	fffffefd 	.word	0xfffffefd
 8004158:	40012708 	.word	0x40012708
 800415c:	ffc3ffff 	.word	0xffc3ffff
 8004160:	fdffffff 	.word	0xfdffffff
 8004164:	fffe0219 	.word	0xfffe0219
 8004168:	fffffc03 	.word	0xfffffc03

0800416c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800416c:	b590      	push	{r4, r7, lr}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004174:	230f      	movs	r3, #15
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	2200      	movs	r2, #0
 800417a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2204      	movs	r2, #4
 8004184:	4013      	ands	r3, r2
 8004186:	d138      	bne.n	80041fa <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2250      	movs	r2, #80	; 0x50
 800418c:	5c9b      	ldrb	r3, [r3, r2]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_ADC_Start+0x2a>
 8004192:	2302      	movs	r3, #2
 8004194:	e038      	b.n	8004208 <HAL_ADC_Start+0x9c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2250      	movs	r2, #80	; 0x50
 800419a:	2101      	movs	r1, #1
 800419c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d007      	beq.n	80041b6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80041a6:	230f      	movs	r3, #15
 80041a8:	18fc      	adds	r4, r7, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f000 f981 	bl	80044b4 <ADC_Enable>
 80041b2:	0003      	movs	r3, r0
 80041b4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80041b6:	230f      	movs	r3, #15
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d120      	bne.n	8004202 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	4a12      	ldr	r2, [pc, #72]	; (8004210 <HAL_ADC_Start+0xa4>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	2280      	movs	r2, #128	; 0x80
 80041ca:	0052      	lsls	r2, r2, #1
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2250      	movs	r2, #80	; 0x50
 80041dc:	2100      	movs	r1, #0
 80041de:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	221c      	movs	r2, #28
 80041e6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2104      	movs	r1, #4
 80041f4:	430a      	orrs	r2, r1
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	e003      	b.n	8004202 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041fa:	230f      	movs	r3, #15
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	2202      	movs	r2, #2
 8004200:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8004202:	230f      	movs	r3, #15
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	781b      	ldrb	r3, [r3, #0]
}
 8004208:	0018      	movs	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	b005      	add	sp, #20
 800420e:	bd90      	pop	{r4, r7, pc}
 8004210:	fffff0fe 	.word	0xfffff0fe

08004214 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004214:	b5b0      	push	{r4, r5, r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800421c:	230f      	movs	r3, #15
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2250      	movs	r2, #80	; 0x50
 8004228:	5c9b      	ldrb	r3, [r3, r2]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_ADC_Stop+0x1e>
 800422e:	2302      	movs	r3, #2
 8004230:	e029      	b.n	8004286 <HAL_ADC_Stop+0x72>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2250      	movs	r2, #80	; 0x50
 8004236:	2101      	movs	r1, #1
 8004238:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800423a:	250f      	movs	r5, #15
 800423c:	197c      	adds	r4, r7, r5
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0018      	movs	r0, r3
 8004242:	f000 fa06 	bl	8004652 <ADC_ConversionStop>
 8004246:	0003      	movs	r3, r0
 8004248:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800424a:	197b      	adds	r3, r7, r5
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d112      	bne.n	8004278 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004252:	197c      	adds	r4, r7, r5
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	0018      	movs	r0, r3
 8004258:	f000 f994 	bl	8004584 <ADC_Disable>
 800425c:	0003      	movs	r3, r0
 800425e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004260:	197b      	adds	r3, r7, r5
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426c:	4a08      	ldr	r2, [pc, #32]	; (8004290 <HAL_ADC_Stop+0x7c>)
 800426e:	4013      	ands	r3, r2
 8004270:	2201      	movs	r2, #1
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2250      	movs	r2, #80	; 0x50
 800427c:	2100      	movs	r1, #0
 800427e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8004280:	230f      	movs	r3, #15
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	781b      	ldrb	r3, [r3, #0]
}
 8004286:	0018      	movs	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	b004      	add	sp, #16
 800428c:	bdb0      	pop	{r4, r5, r7, pc}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	fffffefe 	.word	0xfffffefe

08004294 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d102      	bne.n	80042b4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80042ae:	2308      	movs	r3, #8
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e014      	b.n	80042de <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	4013      	ands	r3, r2
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d10b      	bne.n	80042da <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	2220      	movs	r2, #32
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2250      	movs	r2, #80	; 0x50
 80042d2:	2100      	movs	r1, #0
 80042d4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e072      	b.n	80043c0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80042da:	230c      	movs	r3, #12
 80042dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80042de:	f7ff fda3 	bl	8003e28 <HAL_GetTick>
 80042e2:	0003      	movs	r3, r0
 80042e4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80042e6:	e01f      	b.n	8004328 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	3301      	adds	r3, #1
 80042ec:	d01c      	beq.n	8004328 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <HAL_ADC_PollForConversion+0x70>
 80042f4:	f7ff fd98 	bl	8003e28 <HAL_GetTick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d211      	bcs.n	8004328 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4013      	ands	r3, r2
 800430e:	d10b      	bne.n	8004328 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	2204      	movs	r2, #4
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2250      	movs	r2, #80	; 0x50
 8004320:	2100      	movs	r1, #0
 8004322:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e04b      	b.n	80043c0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4013      	ands	r3, r2
 8004332:	d0d9      	beq.n	80042e8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	2280      	movs	r2, #128	; 0x80
 800433a:	0092      	lsls	r2, r2, #2
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	23c0      	movs	r3, #192	; 0xc0
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	4013      	ands	r3, r2
 800434e:	d12e      	bne.n	80043ae <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004356:	2b00      	cmp	r3, #0
 8004358:	d129      	bne.n	80043ae <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2208      	movs	r2, #8
 8004362:	4013      	ands	r3, r2
 8004364:	2b08      	cmp	r3, #8
 8004366:	d122      	bne.n	80043ae <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2204      	movs	r2, #4
 8004370:	4013      	ands	r3, r2
 8004372:	d110      	bne.n	8004396 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	210c      	movs	r1, #12
 8004380:	438a      	bics	r2, r1
 8004382:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	4a0f      	ldr	r2, [pc, #60]	; (80043c8 <HAL_ADC_PollForConversion+0x134>)
 800438a:	4013      	ands	r3, r2
 800438c:	2201      	movs	r2, #1
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	655a      	str	r2, [r3, #84]	; 0x54
 8004394:	e00b      	b.n	80043ae <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	2220      	movs	r2, #32
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	2201      	movs	r2, #1
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	220c      	movs	r2, #12
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	0018      	movs	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b004      	add	sp, #16
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	fffffefe 	.word	0xfffffefe

080043cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80043da:	0018      	movs	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	b002      	add	sp, #8
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2250      	movs	r2, #80	; 0x50
 80043f2:	5c9b      	ldrb	r3, [r3, r2]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x18>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e050      	b.n	800449e <HAL_ADC_ConfigChannel+0xba>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2250      	movs	r2, #80	; 0x50
 8004400:	2101      	movs	r1, #1
 8004402:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2204      	movs	r2, #4
 800440c:	4013      	ands	r3, r2
 800440e:	d00b      	beq.n	8004428 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	2220      	movs	r2, #32
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2250      	movs	r2, #80	; 0x50
 8004420:	2100      	movs	r1, #0
 8004422:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e03a      	b.n	800449e <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <HAL_ADC_ConfigChannel+0xc4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d018      	beq.n	8004464 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	035b      	lsls	r3, r3, #13
 800443e:	0b5a      	lsrs	r2, r3, #13
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	029b      	lsls	r3, r3, #10
 8004450:	4013      	ands	r3, r2
 8004452:	d01f      	beq.n	8004494 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8004454:	4b15      	ldr	r3, [pc, #84]	; (80044ac <HAL_ADC_ConfigChannel+0xc8>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b14      	ldr	r3, [pc, #80]	; (80044ac <HAL_ADC_ConfigChannel+0xc8>)
 800445a:	2180      	movs	r1, #128	; 0x80
 800445c:	03c9      	lsls	r1, r1, #15
 800445e:	430a      	orrs	r2, r1
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e017      	b.n	8004494 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	035b      	lsls	r3, r3, #13
 8004470:	0b5b      	lsrs	r3, r3, #13
 8004472:	43d9      	mvns	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	400a      	ands	r2, r1
 800447a:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	029b      	lsls	r3, r3, #10
 8004484:	4013      	ands	r3, r2
 8004486:	d005      	beq.n	8004494 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8004488:	4b08      	ldr	r3, [pc, #32]	; (80044ac <HAL_ADC_ConfigChannel+0xc8>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <HAL_ADC_ConfigChannel+0xc8>)
 800448e:	4908      	ldr	r1, [pc, #32]	; (80044b0 <HAL_ADC_ConfigChannel+0xcc>)
 8004490:	400a      	ands	r2, r1
 8004492:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2250      	movs	r2, #80	; 0x50
 8004498:	2100      	movs	r1, #0
 800449a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b002      	add	sp, #8
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	00001001 	.word	0x00001001
 80044ac:	40012708 	.word	0x40012708
 80044b0:	ffbfffff 	.word	0xffbfffff

080044b4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2203      	movs	r2, #3
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d108      	bne.n	80044e0 <ADC_Enable+0x2c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2201      	movs	r2, #1
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <ADC_Enable+0x2c>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <ADC_Enable+0x2e>
 80044e0:	2300      	movs	r3, #0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d146      	bne.n	8004574 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	4a24      	ldr	r2, [pc, #144]	; (8004580 <ADC_Enable+0xcc>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	d00d      	beq.n	800450e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	2210      	movs	r2, #16
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004502:	2201      	movs	r2, #1
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e033      	b.n	8004576 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2101      	movs	r1, #1
 800451a:	430a      	orrs	r2, r1
 800451c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800451e:	2001      	movs	r0, #1
 8004520:	f000 f8e4 	bl	80046ec <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004524:	f7ff fc80 	bl	8003e28 <HAL_GetTick>
 8004528:	0003      	movs	r3, r0
 800452a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800452c:	e01b      	b.n	8004566 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800452e:	f7ff fc7b 	bl	8003e28 <HAL_GetTick>
 8004532:	0002      	movs	r2, r0
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b0a      	cmp	r3, #10
 800453a:	d914      	bls.n	8004566 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2201      	movs	r2, #1
 8004544:	4013      	ands	r3, r2
 8004546:	2b01      	cmp	r3, #1
 8004548:	d00d      	beq.n	8004566 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	2210      	movs	r2, #16
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	2201      	movs	r2, #1
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e007      	b.n	8004576 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	4013      	ands	r3, r2
 8004570:	2b01      	cmp	r3, #1
 8004572:	d1dc      	bne.n	800452e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	0018      	movs	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	b004      	add	sp, #16
 800457c:	bd80      	pop	{r7, pc}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	80000017 	.word	0x80000017

08004584 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2203      	movs	r2, #3
 8004598:	4013      	ands	r3, r2
 800459a:	2b01      	cmp	r3, #1
 800459c:	d108      	bne.n	80045b0 <ADC_Disable+0x2c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2201      	movs	r2, #1
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <ADC_Disable+0x2c>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <ADC_Disable+0x2e>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d048      	beq.n	8004648 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2205      	movs	r2, #5
 80045be:	4013      	ands	r3, r2
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d110      	bne.n	80045e6 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2102      	movs	r1, #2
 80045d0:	430a      	orrs	r2, r1
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2203      	movs	r2, #3
 80045da:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045dc:	f7ff fc24 	bl	8003e28 <HAL_GetTick>
 80045e0:	0003      	movs	r3, r0
 80045e2:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045e4:	e029      	b.n	800463a <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	2210      	movs	r2, #16
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	2201      	movs	r2, #1
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e023      	b.n	800464a <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004602:	f7ff fc11 	bl	8003e28 <HAL_GetTick>
 8004606:	0002      	movs	r2, r0
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b0a      	cmp	r3, #10
 800460e:	d914      	bls.n	800463a <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2201      	movs	r2, #1
 8004618:	4013      	ands	r3, r2
 800461a:	2b01      	cmp	r3, #1
 800461c:	d10d      	bne.n	800463a <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	2210      	movs	r2, #16
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	2201      	movs	r2, #1
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e007      	b.n	800464a <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2201      	movs	r2, #1
 8004642:	4013      	ands	r3, r2
 8004644:	2b01      	cmp	r3, #1
 8004646:	d0dc      	beq.n	8004602 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	0018      	movs	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	b004      	add	sp, #16
 8004650:	bd80      	pop	{r7, pc}

08004652 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2204      	movs	r2, #4
 8004666:	4013      	ands	r3, r2
 8004668:	d03a      	beq.n	80046e0 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2204      	movs	r2, #4
 8004672:	4013      	ands	r3, r2
 8004674:	2b04      	cmp	r3, #4
 8004676:	d10d      	bne.n	8004694 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2202      	movs	r2, #2
 8004680:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8004682:	d107      	bne.n	8004694 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2110      	movs	r1, #16
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004694:	f7ff fbc8 	bl	8003e28 <HAL_GetTick>
 8004698:	0003      	movs	r3, r0
 800469a:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800469c:	e01a      	b.n	80046d4 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800469e:	f7ff fbc3 	bl	8003e28 <HAL_GetTick>
 80046a2:	0002      	movs	r2, r0
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b0a      	cmp	r3, #10
 80046aa:	d913      	bls.n	80046d4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2204      	movs	r2, #4
 80046b4:	4013      	ands	r3, r2
 80046b6:	d00d      	beq.n	80046d4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	2210      	movs	r2, #16
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	2201      	movs	r2, #1
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e006      	b.n	80046e2 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2204      	movs	r2, #4
 80046dc:	4013      	ands	r3, r2
 80046de:	d1de      	bne.n	800469e <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <ADC_DelayMicroSecond+0x38>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	490b      	ldr	r1, [pc, #44]	; (8004728 <ADC_DelayMicroSecond+0x3c>)
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7fb fd20 	bl	8000140 <__udivsi3>
 8004700:	0003      	movs	r3, r0
 8004702:	001a      	movs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4353      	muls	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800470a:	e002      	b.n	8004712 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3b01      	subs	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f9      	bne.n	800470c <ADC_DelayMicroSecond+0x20>
  }
}
 8004718:	46c0      	nop			; (mov r8, r8)
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b004      	add	sp, #16
 8004720:	bd80      	pop	{r7, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	20000000 	.word	0x20000000
 8004728:	000f4240 	.word	0x000f4240

0800472c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004736:	2317      	movs	r3, #23
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2250      	movs	r2, #80	; 0x50
 800474a:	5c9b      	ldrb	r3, [r3, r2]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_ADCEx_Calibration_Start+0x28>
 8004750:	2302      	movs	r3, #2
 8004752:	e083      	b.n	800485c <HAL_ADCEx_Calibration_Start+0x130>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2250      	movs	r2, #80	; 0x50
 8004758:	2101      	movs	r1, #1
 800475a:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2203      	movs	r2, #3
 8004764:	4013      	ands	r3, r2
 8004766:	2b01      	cmp	r3, #1
 8004768:	d108      	bne.n	800477c <HAL_ADCEx_Calibration_Start+0x50>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2201      	movs	r2, #1
 8004772:	4013      	ands	r3, r2
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_ADCEx_Calibration_Start+0x50>
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <HAL_ADCEx_Calibration_Start+0x52>
 800477c:	2300      	movs	r3, #0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d15b      	bne.n	800483a <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	4a37      	ldr	r2, [pc, #220]	; (8004864 <HAL_ADCEx_Calibration_Start+0x138>)
 8004788:	4013      	ands	r3, r2
 800478a:	2202      	movs	r2, #2
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2203      	movs	r2, #3
 800479a:	4013      	ands	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2103      	movs	r1, #3
 80047aa:	438a      	bics	r2, r1
 80047ac:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2180      	movs	r1, #128	; 0x80
 80047ba:	0609      	lsls	r1, r1, #24
 80047bc:	430a      	orrs	r2, r1
 80047be:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80047c0:	f7ff fb32 	bl	8003e28 <HAL_GetTick>
 80047c4:	0003      	movs	r3, r0
 80047c6:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80047c8:	e01d      	b.n	8004806 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80047ca:	f7ff fb2d 	bl	8003e28 <HAL_GetTick>
 80047ce:	0002      	movs	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b0a      	cmp	r3, #10
 80047d6:	d916      	bls.n	8004806 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0fdb      	lsrs	r3, r3, #31
 80047e0:	07da      	lsls	r2, r3, #31
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d10d      	bne.n	8004806 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	2212      	movs	r2, #18
 80047f0:	4393      	bics	r3, r2
 80047f2:	2210      	movs	r2, #16
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2250      	movs	r2, #80	; 0x50
 80047fe:	2100      	movs	r1, #0
 8004800:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e02a      	b.n	800485c <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	0fdb      	lsrs	r3, r3, #31
 800480e:	07da      	lsls	r2, r3, #31
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	061b      	lsls	r3, r3, #24
 8004814:	429a      	cmp	r2, r3
 8004816:	d0d8      	beq.n	80047ca <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68d9      	ldr	r1, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	430a      	orrs	r2, r1
 8004826:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482c:	2203      	movs	r2, #3
 800482e:	4393      	bics	r3, r2
 8004830:	2201      	movs	r2, #1
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	655a      	str	r2, [r3, #84]	; 0x54
 8004838:	e009      	b.n	800484e <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	2220      	movs	r2, #32
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004846:	2317      	movs	r3, #23
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2250      	movs	r2, #80	; 0x50
 8004852:	2100      	movs	r1, #0
 8004854:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8004856:	2317      	movs	r3, #23
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	781b      	ldrb	r3, [r3, #0]
}
 800485c:	0018      	movs	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	b006      	add	sp, #24
 8004862:	bd80      	pop	{r7, pc}
 8004864:	fffffefd 	.word	0xfffffefd

08004868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	0002      	movs	r2, r0
 8004870:	6039      	str	r1, [r7, #0]
 8004872:	1dfb      	adds	r3, r7, #7
 8004874:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004876:	1dfb      	adds	r3, r7, #7
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b7f      	cmp	r3, #127	; 0x7f
 800487c:	d828      	bhi.n	80048d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800487e:	4a2f      	ldr	r2, [pc, #188]	; (800493c <__NVIC_SetPriority+0xd4>)
 8004880:	1dfb      	adds	r3, r7, #7
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b25b      	sxtb	r3, r3
 8004886:	089b      	lsrs	r3, r3, #2
 8004888:	33c0      	adds	r3, #192	; 0xc0
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	589b      	ldr	r3, [r3, r2]
 800488e:	1dfa      	adds	r2, r7, #7
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	0011      	movs	r1, r2
 8004894:	2203      	movs	r2, #3
 8004896:	400a      	ands	r2, r1
 8004898:	00d2      	lsls	r2, r2, #3
 800489a:	21ff      	movs	r1, #255	; 0xff
 800489c:	4091      	lsls	r1, r2
 800489e:	000a      	movs	r2, r1
 80048a0:	43d2      	mvns	r2, r2
 80048a2:	401a      	ands	r2, r3
 80048a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	019b      	lsls	r3, r3, #6
 80048aa:	22ff      	movs	r2, #255	; 0xff
 80048ac:	401a      	ands	r2, r3
 80048ae:	1dfb      	adds	r3, r7, #7
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	0018      	movs	r0, r3
 80048b4:	2303      	movs	r3, #3
 80048b6:	4003      	ands	r3, r0
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048bc:	481f      	ldr	r0, [pc, #124]	; (800493c <__NVIC_SetPriority+0xd4>)
 80048be:	1dfb      	adds	r3, r7, #7
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	b25b      	sxtb	r3, r3
 80048c4:	089b      	lsrs	r3, r3, #2
 80048c6:	430a      	orrs	r2, r1
 80048c8:	33c0      	adds	r3, #192	; 0xc0
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80048ce:	e031      	b.n	8004934 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048d0:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <__NVIC_SetPriority+0xd8>)
 80048d2:	1dfb      	adds	r3, r7, #7
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	0019      	movs	r1, r3
 80048d8:	230f      	movs	r3, #15
 80048da:	400b      	ands	r3, r1
 80048dc:	3b08      	subs	r3, #8
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	3306      	adds	r3, #6
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	18d3      	adds	r3, r2, r3
 80048e6:	3304      	adds	r3, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	1dfa      	adds	r2, r7, #7
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	0011      	movs	r1, r2
 80048f0:	2203      	movs	r2, #3
 80048f2:	400a      	ands	r2, r1
 80048f4:	00d2      	lsls	r2, r2, #3
 80048f6:	21ff      	movs	r1, #255	; 0xff
 80048f8:	4091      	lsls	r1, r2
 80048fa:	000a      	movs	r2, r1
 80048fc:	43d2      	mvns	r2, r2
 80048fe:	401a      	ands	r2, r3
 8004900:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	019b      	lsls	r3, r3, #6
 8004906:	22ff      	movs	r2, #255	; 0xff
 8004908:	401a      	ands	r2, r3
 800490a:	1dfb      	adds	r3, r7, #7
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	0018      	movs	r0, r3
 8004910:	2303      	movs	r3, #3
 8004912:	4003      	ands	r3, r0
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004918:	4809      	ldr	r0, [pc, #36]	; (8004940 <__NVIC_SetPriority+0xd8>)
 800491a:	1dfb      	adds	r3, r7, #7
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	001c      	movs	r4, r3
 8004920:	230f      	movs	r3, #15
 8004922:	4023      	ands	r3, r4
 8004924:	3b08      	subs	r3, #8
 8004926:	089b      	lsrs	r3, r3, #2
 8004928:	430a      	orrs	r2, r1
 800492a:	3306      	adds	r3, #6
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	18c3      	adds	r3, r0, r3
 8004930:	3304      	adds	r3, #4
 8004932:	601a      	str	r2, [r3, #0]
}
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	46bd      	mov	sp, r7
 8004938:	b003      	add	sp, #12
 800493a:	bd90      	pop	{r4, r7, pc}
 800493c:	e000e100 	.word	0xe000e100
 8004940:	e000ed00 	.word	0xe000ed00

08004944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1e5a      	subs	r2, r3, #1
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	045b      	lsls	r3, r3, #17
 8004954:	429a      	cmp	r2, r3
 8004956:	d301      	bcc.n	800495c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004958:	2301      	movs	r3, #1
 800495a:	e010      	b.n	800497e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <SysTick_Config+0x44>)
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	3a01      	subs	r2, #1
 8004962:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004964:	2301      	movs	r3, #1
 8004966:	425b      	negs	r3, r3
 8004968:	2103      	movs	r1, #3
 800496a:	0018      	movs	r0, r3
 800496c:	f7ff ff7c 	bl	8004868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <SysTick_Config+0x44>)
 8004972:	2200      	movs	r2, #0
 8004974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004976:	4b04      	ldr	r3, [pc, #16]	; (8004988 <SysTick_Config+0x44>)
 8004978:	2207      	movs	r2, #7
 800497a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800497c:	2300      	movs	r3, #0
}
 800497e:	0018      	movs	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	b002      	add	sp, #8
 8004984:	bd80      	pop	{r7, pc}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	e000e010 	.word	0xe000e010

0800498c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	210f      	movs	r1, #15
 8004998:	187b      	adds	r3, r7, r1
 800499a:	1c02      	adds	r2, r0, #0
 800499c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	b25b      	sxtb	r3, r3
 80049a6:	0011      	movs	r1, r2
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7ff ff5d 	bl	8004868 <__NVIC_SetPriority>
}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b004      	add	sp, #16
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7ff ffbf 	bl	8004944 <SysTick_Config>
 80049c6:	0003      	movs	r3, r0
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b002      	add	sp, #8
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80049e6:	e155      	b.n	8004c94 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2101      	movs	r1, #1
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4091      	lsls	r1, r2
 80049f2:	000a      	movs	r2, r1
 80049f4:	4013      	ands	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d100      	bne.n	8004a00 <HAL_GPIO_Init+0x30>
 80049fe:	e146      	b.n	8004c8e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2203      	movs	r2, #3
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d005      	beq.n	8004a18 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2203      	movs	r2, #3
 8004a12:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d130      	bne.n	8004a7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	2203      	movs	r2, #3
 8004a24:	409a      	lsls	r2, r3
 8004a26:	0013      	movs	r3, r2
 8004a28:	43da      	mvns	r2, r3
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	0013      	movs	r3, r2
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a4e:	2201      	movs	r2, #1
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	409a      	lsls	r2, r3
 8004a54:	0013      	movs	r3, r2
 8004a56:	43da      	mvns	r2, r3
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	2201      	movs	r2, #1
 8004a66:	401a      	ands	r2, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	0013      	movs	r3, r2
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2203      	movs	r2, #3
 8004a80:	4013      	ands	r3, r2
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d017      	beq.n	8004ab6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	2203      	movs	r2, #3
 8004a92:	409a      	lsls	r2, r3
 8004a94:	0013      	movs	r3, r2
 8004a96:	43da      	mvns	r2, r3
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	0013      	movs	r3, r2
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2203      	movs	r2, #3
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d123      	bne.n	8004b0a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	08da      	lsrs	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3208      	adds	r2, #8
 8004aca:	0092      	lsls	r2, r2, #2
 8004acc:	58d3      	ldr	r3, [r2, r3]
 8004ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2207      	movs	r2, #7
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	220f      	movs	r2, #15
 8004ada:	409a      	lsls	r2, r3
 8004adc:	0013      	movs	r3, r2
 8004ade:	43da      	mvns	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2107      	movs	r1, #7
 8004aee:	400b      	ands	r3, r1
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	409a      	lsls	r2, r3
 8004af4:	0013      	movs	r3, r2
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	08da      	lsrs	r2, r3, #3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3208      	adds	r2, #8
 8004b04:	0092      	lsls	r2, r2, #2
 8004b06:	6939      	ldr	r1, [r7, #16]
 8004b08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	2203      	movs	r2, #3
 8004b16:	409a      	lsls	r2, r3
 8004b18:	0013      	movs	r3, r2
 8004b1a:	43da      	mvns	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2203      	movs	r2, #3
 8004b28:	401a      	ands	r2, r3
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	409a      	lsls	r2, r3
 8004b30:	0013      	movs	r3, r2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	23c0      	movs	r3, #192	; 0xc0
 8004b44:	029b      	lsls	r3, r3, #10
 8004b46:	4013      	ands	r3, r2
 8004b48:	d100      	bne.n	8004b4c <HAL_GPIO_Init+0x17c>
 8004b4a:	e0a0      	b.n	8004c8e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b4c:	4b57      	ldr	r3, [pc, #348]	; (8004cac <HAL_GPIO_Init+0x2dc>)
 8004b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b50:	4b56      	ldr	r3, [pc, #344]	; (8004cac <HAL_GPIO_Init+0x2dc>)
 8004b52:	2101      	movs	r1, #1
 8004b54:	430a      	orrs	r2, r1
 8004b56:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b58:	4a55      	ldr	r2, [pc, #340]	; (8004cb0 <HAL_GPIO_Init+0x2e0>)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	089b      	lsrs	r3, r3, #2
 8004b5e:	3302      	adds	r3, #2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	589b      	ldr	r3, [r3, r2]
 8004b64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2203      	movs	r2, #3
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	220f      	movs	r2, #15
 8004b70:	409a      	lsls	r2, r3
 8004b72:	0013      	movs	r3, r2
 8004b74:	43da      	mvns	r2, r3
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	23a0      	movs	r3, #160	; 0xa0
 8004b80:	05db      	lsls	r3, r3, #23
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d01f      	beq.n	8004bc6 <HAL_GPIO_Init+0x1f6>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a4a      	ldr	r2, [pc, #296]	; (8004cb4 <HAL_GPIO_Init+0x2e4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d019      	beq.n	8004bc2 <HAL_GPIO_Init+0x1f2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a49      	ldr	r2, [pc, #292]	; (8004cb8 <HAL_GPIO_Init+0x2e8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <HAL_GPIO_Init+0x1ee>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a48      	ldr	r2, [pc, #288]	; (8004cbc <HAL_GPIO_Init+0x2ec>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00d      	beq.n	8004bba <HAL_GPIO_Init+0x1ea>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a47      	ldr	r2, [pc, #284]	; (8004cc0 <HAL_GPIO_Init+0x2f0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d007      	beq.n	8004bb6 <HAL_GPIO_Init+0x1e6>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a46      	ldr	r2, [pc, #280]	; (8004cc4 <HAL_GPIO_Init+0x2f4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d101      	bne.n	8004bb2 <HAL_GPIO_Init+0x1e2>
 8004bae:	2305      	movs	r3, #5
 8004bb0:	e00a      	b.n	8004bc8 <HAL_GPIO_Init+0x1f8>
 8004bb2:	2306      	movs	r3, #6
 8004bb4:	e008      	b.n	8004bc8 <HAL_GPIO_Init+0x1f8>
 8004bb6:	2304      	movs	r3, #4
 8004bb8:	e006      	b.n	8004bc8 <HAL_GPIO_Init+0x1f8>
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e004      	b.n	8004bc8 <HAL_GPIO_Init+0x1f8>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e002      	b.n	8004bc8 <HAL_GPIO_Init+0x1f8>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <HAL_GPIO_Init+0x1f8>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	2103      	movs	r1, #3
 8004bcc:	400a      	ands	r2, r1
 8004bce:	0092      	lsls	r2, r2, #2
 8004bd0:	4093      	lsls	r3, r2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bd8:	4935      	ldr	r1, [pc, #212]	; (8004cb0 <HAL_GPIO_Init+0x2e0>)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	089b      	lsrs	r3, r3, #2
 8004bde:	3302      	adds	r3, #2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004be6:	4b38      	ldr	r3, [pc, #224]	; (8004cc8 <HAL_GPIO_Init+0x2f8>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	035b      	lsls	r3, r3, #13
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d003      	beq.n	8004c0a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004c0a:	4b2f      	ldr	r3, [pc, #188]	; (8004cc8 <HAL_GPIO_Init+0x2f8>)
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004c10:	4b2d      	ldr	r3, [pc, #180]	; (8004cc8 <HAL_GPIO_Init+0x2f8>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	43da      	mvns	r2, r3
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	039b      	lsls	r3, r3, #14
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d003      	beq.n	8004c34 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004c34:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <HAL_GPIO_Init+0x2f8>)
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004c3a:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <HAL_GPIO_Init+0x2f8>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	43da      	mvns	r2, r3
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4013      	ands	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	029b      	lsls	r3, r3, #10
 8004c52:	4013      	ands	r3, r2
 8004c54:	d003      	beq.n	8004c5e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <HAL_GPIO_Init+0x2f8>)
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c64:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <HAL_GPIO_Init+0x2f8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	43da      	mvns	r2, r3
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4013      	ands	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	025b      	lsls	r3, r3, #9
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004c88:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <HAL_GPIO_Init+0x2f8>)
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	3301      	adds	r3, #1
 8004c92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	40da      	lsrs	r2, r3
 8004c9c:	1e13      	subs	r3, r2, #0
 8004c9e:	d000      	beq.n	8004ca2 <HAL_GPIO_Init+0x2d2>
 8004ca0:	e6a2      	b.n	80049e8 <HAL_GPIO_Init+0x18>
  }
}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	46c0      	nop			; (mov r8, r8)
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b006      	add	sp, #24
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	50000400 	.word	0x50000400
 8004cb8:	50000800 	.word	0x50000800
 8004cbc:	50000c00 	.word	0x50000c00
 8004cc0:	50001000 	.word	0x50001000
 8004cc4:	50001c00 	.word	0x50001c00
 8004cc8:	40010400 	.word	0x40010400

08004ccc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	000a      	movs	r2, r1
 8004cd6:	1cbb      	adds	r3, r7, #2
 8004cd8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	1cba      	adds	r2, r7, #2
 8004ce0:	8812      	ldrh	r2, [r2, #0]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004ce6:	230f      	movs	r3, #15
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	2201      	movs	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	e003      	b.n	8004cf8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cf0:	230f      	movs	r3, #15
 8004cf2:	18fb      	adds	r3, r7, r3
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004cf8:	230f      	movs	r3, #15
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	781b      	ldrb	r3, [r3, #0]
}
 8004cfe:	0018      	movs	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b004      	add	sp, #16
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	0008      	movs	r0, r1
 8004d10:	0011      	movs	r1, r2
 8004d12:	1cbb      	adds	r3, r7, #2
 8004d14:	1c02      	adds	r2, r0, #0
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	1c7b      	adds	r3, r7, #1
 8004d1a:	1c0a      	adds	r2, r1, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d1e:	1c7b      	adds	r3, r7, #1
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d004      	beq.n	8004d30 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d26:	1cbb      	adds	r3, r7, #2
 8004d28:	881a      	ldrh	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004d2e:	e003      	b.n	8004d38 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004d30:	1cbb      	adds	r3, r7, #2
 8004d32:	881a      	ldrh	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d38:	46c0      	nop			; (mov r8, r8)
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	b002      	add	sp, #8
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d40:	b5b0      	push	{r4, r5, r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f000 fb6c 	bl	800542c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d54:	4bc8      	ldr	r3, [pc, #800]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	220c      	movs	r2, #12
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d5e:	4bc6      	ldr	r3, [pc, #792]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	2380      	movs	r3, #128	; 0x80
 8004d64:	025b      	lsls	r3, r3, #9
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4013      	ands	r3, r2
 8004d72:	d100      	bne.n	8004d76 <HAL_RCC_OscConfig+0x36>
 8004d74:	e07d      	b.n	8004e72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d007      	beq.n	8004d8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	2b0c      	cmp	r3, #12
 8004d80:	d112      	bne.n	8004da8 <HAL_RCC_OscConfig+0x68>
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	025b      	lsls	r3, r3, #9
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d10d      	bne.n	8004da8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8c:	4bba      	ldr	r3, [pc, #744]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	029b      	lsls	r3, r3, #10
 8004d94:	4013      	ands	r3, r2
 8004d96:	d100      	bne.n	8004d9a <HAL_RCC_OscConfig+0x5a>
 8004d98:	e06a      	b.n	8004e70 <HAL_RCC_OscConfig+0x130>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d166      	bne.n	8004e70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f000 fb42 	bl	800542c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	025b      	lsls	r3, r3, #9
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x84>
 8004db4:	4bb0      	ldr	r3, [pc, #704]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4baf      	ldr	r3, [pc, #700]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004dba:	2180      	movs	r1, #128	; 0x80
 8004dbc:	0249      	lsls	r1, r1, #9
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	e027      	b.n	8004e14 <HAL_RCC_OscConfig+0xd4>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	23a0      	movs	r3, #160	; 0xa0
 8004dca:	02db      	lsls	r3, r3, #11
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d10e      	bne.n	8004dee <HAL_RCC_OscConfig+0xae>
 8004dd0:	4ba9      	ldr	r3, [pc, #676]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4ba8      	ldr	r3, [pc, #672]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004dd6:	2180      	movs	r1, #128	; 0x80
 8004dd8:	02c9      	lsls	r1, r1, #11
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	4ba6      	ldr	r3, [pc, #664]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4ba5      	ldr	r3, [pc, #660]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004de4:	2180      	movs	r1, #128	; 0x80
 8004de6:	0249      	lsls	r1, r1, #9
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	e012      	b.n	8004e14 <HAL_RCC_OscConfig+0xd4>
 8004dee:	4ba2      	ldr	r3, [pc, #648]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4ba1      	ldr	r3, [pc, #644]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004df4:	49a1      	ldr	r1, [pc, #644]	; (800507c <HAL_RCC_OscConfig+0x33c>)
 8004df6:	400a      	ands	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	4b9f      	ldr	r3, [pc, #636]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	025b      	lsls	r3, r3, #9
 8004e02:	4013      	ands	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4b9b      	ldr	r3, [pc, #620]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	4b9a      	ldr	r3, [pc, #616]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004e0e:	499c      	ldr	r1, [pc, #624]	; (8005080 <HAL_RCC_OscConfig+0x340>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d014      	beq.n	8004e46 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7ff f804 	bl	8003e28 <HAL_GetTick>
 8004e20:	0003      	movs	r3, r0
 8004e22:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e26:	f7fe ffff 	bl	8003e28 <HAL_GetTick>
 8004e2a:	0002      	movs	r2, r0
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b64      	cmp	r3, #100	; 0x64
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e2f9      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e38:	4b8f      	ldr	r3, [pc, #572]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	029b      	lsls	r3, r3, #10
 8004e40:	4013      	ands	r3, r2
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0xe6>
 8004e44:	e015      	b.n	8004e72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7fe ffef 	bl	8003e28 <HAL_GetTick>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fe ffea 	bl	8003e28 <HAL_GetTick>
 8004e54:	0002      	movs	r2, r0
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e2e4      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e62:	4b85      	ldr	r3, [pc, #532]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	029b      	lsls	r3, r3, #10
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x110>
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2202      	movs	r2, #2
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <HAL_RCC_OscConfig+0x13e>
 8004e7c:	e099      	b.n	8004fb2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	2220      	movs	r2, #32
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d009      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004e8c:	4b7a      	ldr	r3, [pc, #488]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b79      	ldr	r3, [pc, #484]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004e92:	2120      	movs	r1, #32
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	4393      	bics	r3, r2
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d005      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	2b0c      	cmp	r3, #12
 8004eaa:	d13e      	bne.n	8004f2a <HAL_RCC_OscConfig+0x1ea>
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d13b      	bne.n	8004f2a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004eb2:	4b71      	ldr	r3, [pc, #452]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d004      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x186>
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e2b2      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec6:	4b6c      	ldr	r3, [pc, #432]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4a6e      	ldr	r2, [pc, #440]	; (8005084 <HAL_RCC_OscConfig+0x344>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	0019      	movs	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	021a      	lsls	r2, r3, #8
 8004ed6:	4b68      	ldr	r3, [pc, #416]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004edc:	4b66      	ldr	r3, [pc, #408]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2209      	movs	r2, #9
 8004ee2:	4393      	bics	r3, r2
 8004ee4:	0019      	movs	r1, r3
 8004ee6:	4b64      	ldr	r3, [pc, #400]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eea:	430a      	orrs	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eee:	f000 fbeb 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8004ef2:	0001      	movs	r1, r0
 8004ef4:	4b60      	ldr	r3, [pc, #384]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	220f      	movs	r2, #15
 8004efc:	4013      	ands	r3, r2
 8004efe:	4a62      	ldr	r2, [pc, #392]	; (8005088 <HAL_RCC_OscConfig+0x348>)
 8004f00:	5cd3      	ldrb	r3, [r2, r3]
 8004f02:	000a      	movs	r2, r1
 8004f04:	40da      	lsrs	r2, r3
 8004f06:	4b61      	ldr	r3, [pc, #388]	; (800508c <HAL_RCC_OscConfig+0x34c>)
 8004f08:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004f0a:	4b61      	ldr	r3, [pc, #388]	; (8005090 <HAL_RCC_OscConfig+0x350>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2513      	movs	r5, #19
 8004f10:	197c      	adds	r4, r7, r5
 8004f12:	0018      	movs	r0, r3
 8004f14:	f7fe ff42 	bl	8003d9c <HAL_InitTick>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004f1c:	197b      	adds	r3, r7, r5
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d046      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004f24:	197b      	adds	r3, r7, r5
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	e280      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d027      	beq.n	8004f80 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004f30:	4b51      	ldr	r3, [pc, #324]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2209      	movs	r2, #9
 8004f36:	4393      	bics	r3, r2
 8004f38:	0019      	movs	r1, r3
 8004f3a:	4b4f      	ldr	r3, [pc, #316]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f42:	f7fe ff71 	bl	8003e28 <HAL_GetTick>
 8004f46:	0003      	movs	r3, r0
 8004f48:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f4c:	f7fe ff6c 	bl	8003e28 <HAL_GetTick>
 8004f50:	0002      	movs	r2, r0
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e266      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f5e:	4b46      	ldr	r3, [pc, #280]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2204      	movs	r2, #4
 8004f64:	4013      	ands	r3, r2
 8004f66:	d0f1      	beq.n	8004f4c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f68:	4b43      	ldr	r3, [pc, #268]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a45      	ldr	r2, [pc, #276]	; (8005084 <HAL_RCC_OscConfig+0x344>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	0019      	movs	r1, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	021a      	lsls	r2, r3, #8
 8004f78:	4b3f      	ldr	r3, [pc, #252]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
 8004f7e:	e018      	b.n	8004fb2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f80:	4b3d      	ldr	r3, [pc, #244]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4b3c      	ldr	r3, [pc, #240]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f86:	2101      	movs	r1, #1
 8004f88:	438a      	bics	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8c:	f7fe ff4c 	bl	8003e28 <HAL_GetTick>
 8004f90:	0003      	movs	r3, r0
 8004f92:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f96:	f7fe ff47 	bl	8003e28 <HAL_GetTick>
 8004f9a:	0002      	movs	r2, r0
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e241      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fa8:	4b33      	ldr	r3, [pc, #204]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2204      	movs	r2, #4
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d1f1      	bne.n	8004f96 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d100      	bne.n	8004fbe <HAL_RCC_OscConfig+0x27e>
 8004fbc:	e0a1      	b.n	8005102 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d140      	bne.n	8005046 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_OscConfig+0x29c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e227      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fdc:	4b26      	ldr	r3, [pc, #152]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4a2c      	ldr	r2, [pc, #176]	; (8005094 <HAL_RCC_OscConfig+0x354>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1a      	ldr	r2, [r3, #32]
 8004fea:	4b23      	ldr	r3, [pc, #140]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004fec:	430a      	orrs	r2, r1
 8004fee:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ff0:	4b21      	ldr	r3, [pc, #132]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	0a19      	lsrs	r1, r3, #8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	061a      	lsls	r2, r3, #24
 8004ffe:	4b1e      	ldr	r3, [pc, #120]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	0b5b      	lsrs	r3, r3, #13
 800500a:	3301      	adds	r3, #1
 800500c:	2280      	movs	r2, #128	; 0x80
 800500e:	0212      	lsls	r2, r2, #8
 8005010:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005012:	4b19      	ldr	r3, [pc, #100]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	210f      	movs	r1, #15
 800501a:	400b      	ands	r3, r1
 800501c:	491a      	ldr	r1, [pc, #104]	; (8005088 <HAL_RCC_OscConfig+0x348>)
 800501e:	5ccb      	ldrb	r3, [r1, r3]
 8005020:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005022:	4b1a      	ldr	r3, [pc, #104]	; (800508c <HAL_RCC_OscConfig+0x34c>)
 8005024:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005026:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <HAL_RCC_OscConfig+0x350>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2513      	movs	r5, #19
 800502c:	197c      	adds	r4, r7, r5
 800502e:	0018      	movs	r0, r3
 8005030:	f7fe feb4 	bl	8003d9c <HAL_InitTick>
 8005034:	0003      	movs	r3, r0
 8005036:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005038:	197b      	adds	r3, r7, r5
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d060      	beq.n	8005102 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8005040:	197b      	adds	r3, r7, r5
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	e1f2      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d03f      	beq.n	80050ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8005054:	2180      	movs	r1, #128	; 0x80
 8005056:	0049      	lsls	r1, r1, #1
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fe fee4 	bl	8003e28 <HAL_GetTick>
 8005060:	0003      	movs	r3, r0
 8005062:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005064:	e018      	b.n	8005098 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005066:	f7fe fedf 	bl	8003e28 <HAL_GetTick>
 800506a:	0002      	movs	r2, r0
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d911      	bls.n	8005098 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e1d9      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
 8005078:	40021000 	.word	0x40021000
 800507c:	fffeffff 	.word	0xfffeffff
 8005080:	fffbffff 	.word	0xfffbffff
 8005084:	ffffe0ff 	.word	0xffffe0ff
 8005088:	0800ad74 	.word	0x0800ad74
 800508c:	20000000 	.word	0x20000000
 8005090:	20000004 	.word	0x20000004
 8005094:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005098:	4bc9      	ldr	r3, [pc, #804]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4013      	ands	r3, r2
 80050a2:	d0e0      	beq.n	8005066 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050a4:	4bc6      	ldr	r3, [pc, #792]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4ac6      	ldr	r2, [pc, #792]	; (80053c4 <HAL_RCC_OscConfig+0x684>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1a      	ldr	r2, [r3, #32]
 80050b2:	4bc3      	ldr	r3, [pc, #780]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050b4:	430a      	orrs	r2, r1
 80050b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050b8:	4bc1      	ldr	r3, [pc, #772]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	0a19      	lsrs	r1, r3, #8
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	061a      	lsls	r2, r3, #24
 80050c6:	4bbe      	ldr	r3, [pc, #760]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050c8:	430a      	orrs	r2, r1
 80050ca:	605a      	str	r2, [r3, #4]
 80050cc:	e019      	b.n	8005102 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050ce:	4bbc      	ldr	r3, [pc, #752]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4bbb      	ldr	r3, [pc, #748]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050d4:	49bc      	ldr	r1, [pc, #752]	; (80053c8 <HAL_RCC_OscConfig+0x688>)
 80050d6:	400a      	ands	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050da:	f7fe fea5 	bl	8003e28 <HAL_GetTick>
 80050de:	0003      	movs	r3, r0
 80050e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050e4:	f7fe fea0 	bl	8003e28 <HAL_GetTick>
 80050e8:	0002      	movs	r2, r0
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e19a      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80050f6:	4bb2      	ldr	r3, [pc, #712]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	2380      	movs	r3, #128	; 0x80
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4013      	ands	r3, r2
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2208      	movs	r2, #8
 8005108:	4013      	ands	r3, r2
 800510a:	d036      	beq.n	800517a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d019      	beq.n	8005148 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005114:	4baa      	ldr	r3, [pc, #680]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005118:	4ba9      	ldr	r3, [pc, #676]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800511a:	2101      	movs	r1, #1
 800511c:	430a      	orrs	r2, r1
 800511e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005120:	f7fe fe82 	bl	8003e28 <HAL_GetTick>
 8005124:	0003      	movs	r3, r0
 8005126:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800512a:	f7fe fe7d 	bl	8003e28 <HAL_GetTick>
 800512e:	0002      	movs	r2, r0
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e177      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800513c:	4ba0      	ldr	r3, [pc, #640]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800513e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005140:	2202      	movs	r2, #2
 8005142:	4013      	ands	r3, r2
 8005144:	d0f1      	beq.n	800512a <HAL_RCC_OscConfig+0x3ea>
 8005146:	e018      	b.n	800517a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005148:	4b9d      	ldr	r3, [pc, #628]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800514a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800514c:	4b9c      	ldr	r3, [pc, #624]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800514e:	2101      	movs	r1, #1
 8005150:	438a      	bics	r2, r1
 8005152:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005154:	f7fe fe68 	bl	8003e28 <HAL_GetTick>
 8005158:	0003      	movs	r3, r0
 800515a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800515e:	f7fe fe63 	bl	8003e28 <HAL_GetTick>
 8005162:	0002      	movs	r2, r0
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e15d      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005170:	4b93      	ldr	r3, [pc, #588]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005174:	2202      	movs	r2, #2
 8005176:	4013      	ands	r3, r2
 8005178:	d1f1      	bne.n	800515e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2204      	movs	r2, #4
 8005180:	4013      	ands	r3, r2
 8005182:	d100      	bne.n	8005186 <HAL_RCC_OscConfig+0x446>
 8005184:	e0ae      	b.n	80052e4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005186:	2023      	movs	r0, #35	; 0x23
 8005188:	183b      	adds	r3, r7, r0
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800518e:	4b8c      	ldr	r3, [pc, #560]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005192:	2380      	movs	r3, #128	; 0x80
 8005194:	055b      	lsls	r3, r3, #21
 8005196:	4013      	ands	r3, r2
 8005198:	d109      	bne.n	80051ae <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519a:	4b89      	ldr	r3, [pc, #548]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800519c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519e:	4b88      	ldr	r3, [pc, #544]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80051a0:	2180      	movs	r1, #128	; 0x80
 80051a2:	0549      	lsls	r1, r1, #21
 80051a4:	430a      	orrs	r2, r1
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80051a8:	183b      	adds	r3, r7, r0
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ae:	4b87      	ldr	r3, [pc, #540]	; (80053cc <HAL_RCC_OscConfig+0x68c>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	2380      	movs	r3, #128	; 0x80
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4013      	ands	r3, r2
 80051b8:	d11a      	bne.n	80051f0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ba:	4b84      	ldr	r3, [pc, #528]	; (80053cc <HAL_RCC_OscConfig+0x68c>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4b83      	ldr	r3, [pc, #524]	; (80053cc <HAL_RCC_OscConfig+0x68c>)
 80051c0:	2180      	movs	r1, #128	; 0x80
 80051c2:	0049      	lsls	r1, r1, #1
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c8:	f7fe fe2e 	bl	8003e28 <HAL_GetTick>
 80051cc:	0003      	movs	r3, r0
 80051ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d2:	f7fe fe29 	bl	8003e28 <HAL_GetTick>
 80051d6:	0002      	movs	r2, r0
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b64      	cmp	r3, #100	; 0x64
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e123      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	4b79      	ldr	r3, [pc, #484]	; (80053cc <HAL_RCC_OscConfig+0x68c>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	4013      	ands	r3, r2
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d107      	bne.n	800520c <HAL_RCC_OscConfig+0x4cc>
 80051fc:	4b70      	ldr	r3, [pc, #448]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80051fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005200:	4b6f      	ldr	r3, [pc, #444]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	0049      	lsls	r1, r1, #1
 8005206:	430a      	orrs	r2, r1
 8005208:	651a      	str	r2, [r3, #80]	; 0x50
 800520a:	e031      	b.n	8005270 <HAL_RCC_OscConfig+0x530>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10c      	bne.n	800522e <HAL_RCC_OscConfig+0x4ee>
 8005214:	4b6a      	ldr	r3, [pc, #424]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005216:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005218:	4b69      	ldr	r3, [pc, #420]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800521a:	496b      	ldr	r1, [pc, #428]	; (80053c8 <HAL_RCC_OscConfig+0x688>)
 800521c:	400a      	ands	r2, r1
 800521e:	651a      	str	r2, [r3, #80]	; 0x50
 8005220:	4b67      	ldr	r3, [pc, #412]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005224:	4b66      	ldr	r3, [pc, #408]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005226:	496a      	ldr	r1, [pc, #424]	; (80053d0 <HAL_RCC_OscConfig+0x690>)
 8005228:	400a      	ands	r2, r1
 800522a:	651a      	str	r2, [r3, #80]	; 0x50
 800522c:	e020      	b.n	8005270 <HAL_RCC_OscConfig+0x530>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	23a0      	movs	r3, #160	; 0xa0
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	429a      	cmp	r2, r3
 8005238:	d10e      	bne.n	8005258 <HAL_RCC_OscConfig+0x518>
 800523a:	4b61      	ldr	r3, [pc, #388]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800523c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800523e:	4b60      	ldr	r3, [pc, #384]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005240:	2180      	movs	r1, #128	; 0x80
 8005242:	00c9      	lsls	r1, r1, #3
 8005244:	430a      	orrs	r2, r1
 8005246:	651a      	str	r2, [r3, #80]	; 0x50
 8005248:	4b5d      	ldr	r3, [pc, #372]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800524a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800524c:	4b5c      	ldr	r3, [pc, #368]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800524e:	2180      	movs	r1, #128	; 0x80
 8005250:	0049      	lsls	r1, r1, #1
 8005252:	430a      	orrs	r2, r1
 8005254:	651a      	str	r2, [r3, #80]	; 0x50
 8005256:	e00b      	b.n	8005270 <HAL_RCC_OscConfig+0x530>
 8005258:	4b59      	ldr	r3, [pc, #356]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800525a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800525c:	4b58      	ldr	r3, [pc, #352]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800525e:	495a      	ldr	r1, [pc, #360]	; (80053c8 <HAL_RCC_OscConfig+0x688>)
 8005260:	400a      	ands	r2, r1
 8005262:	651a      	str	r2, [r3, #80]	; 0x50
 8005264:	4b56      	ldr	r3, [pc, #344]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005266:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005268:	4b55      	ldr	r3, [pc, #340]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800526a:	4959      	ldr	r1, [pc, #356]	; (80053d0 <HAL_RCC_OscConfig+0x690>)
 800526c:	400a      	ands	r2, r1
 800526e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d015      	beq.n	80052a4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005278:	f7fe fdd6 	bl	8003e28 <HAL_GetTick>
 800527c:	0003      	movs	r3, r0
 800527e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005280:	e009      	b.n	8005296 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005282:	f7fe fdd1 	bl	8003e28 <HAL_GetTick>
 8005286:	0002      	movs	r2, r0
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	4a51      	ldr	r2, [pc, #324]	; (80053d4 <HAL_RCC_OscConfig+0x694>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e0ca      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005296:	4b4a      	ldr	r3, [pc, #296]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4013      	ands	r3, r2
 80052a0:	d0ef      	beq.n	8005282 <HAL_RCC_OscConfig+0x542>
 80052a2:	e014      	b.n	80052ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a4:	f7fe fdc0 	bl	8003e28 <HAL_GetTick>
 80052a8:	0003      	movs	r3, r0
 80052aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052ac:	e009      	b.n	80052c2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ae:	f7fe fdbb 	bl	8003e28 <HAL_GetTick>
 80052b2:	0002      	movs	r2, r0
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	4a46      	ldr	r2, [pc, #280]	; (80053d4 <HAL_RCC_OscConfig+0x694>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e0b4      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052c2:	4b3f      	ldr	r3, [pc, #252]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80052c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4013      	ands	r3, r2
 80052cc:	d1ef      	bne.n	80052ae <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052ce:	2323      	movs	r3, #35	; 0x23
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d105      	bne.n	80052e4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d8:	4b39      	ldr	r3, [pc, #228]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80052da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052dc:	4b38      	ldr	r3, [pc, #224]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80052de:	493e      	ldr	r1, [pc, #248]	; (80053d8 <HAL_RCC_OscConfig+0x698>)
 80052e0:	400a      	ands	r2, r1
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d100      	bne.n	80052ee <HAL_RCC_OscConfig+0x5ae>
 80052ec:	e09d      	b.n	800542a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	d100      	bne.n	80052f6 <HAL_RCC_OscConfig+0x5b6>
 80052f4:	e076      	b.n	80053e4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d145      	bne.n	800538a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fe:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	4b2f      	ldr	r3, [pc, #188]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005304:	4935      	ldr	r1, [pc, #212]	; (80053dc <HAL_RCC_OscConfig+0x69c>)
 8005306:	400a      	ands	r2, r1
 8005308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530a:	f7fe fd8d 	bl	8003e28 <HAL_GetTick>
 800530e:	0003      	movs	r3, r0
 8005310:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005314:	f7fe fd88 	bl	8003e28 <HAL_GetTick>
 8005318:	0002      	movs	r2, r0
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e082      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005326:	4b26      	ldr	r3, [pc, #152]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	049b      	lsls	r3, r3, #18
 800532e:	4013      	ands	r3, r2
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005332:	4b23      	ldr	r3, [pc, #140]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	4a2a      	ldr	r2, [pc, #168]	; (80053e0 <HAL_RCC_OscConfig+0x6a0>)
 8005338:	4013      	ands	r3, r2
 800533a:	0019      	movs	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	431a      	orrs	r2, r3
 800534c:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800534e:	430a      	orrs	r2, r1
 8005350:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005358:	2180      	movs	r1, #128	; 0x80
 800535a:	0449      	lsls	r1, r1, #17
 800535c:	430a      	orrs	r2, r1
 800535e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fe fd62 	bl	8003e28 <HAL_GetTick>
 8005364:	0003      	movs	r3, r0
 8005366:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536a:	f7fe fd5d 	bl	8003e28 <HAL_GetTick>
 800536e:	0002      	movs	r2, r0
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e057      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800537c:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	049b      	lsls	r3, r3, #18
 8005384:	4013      	ands	r3, r2
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x62a>
 8005388:	e04f      	b.n	800542a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005390:	4912      	ldr	r1, [pc, #72]	; (80053dc <HAL_RCC_OscConfig+0x69c>)
 8005392:	400a      	ands	r2, r1
 8005394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005396:	f7fe fd47 	bl	8003e28 <HAL_GetTick>
 800539a:	0003      	movs	r3, r0
 800539c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fe fd42 	bl	8003e28 <HAL_GetTick>
 80053a4:	0002      	movs	r2, r0
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e03c      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80053b2:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	049b      	lsls	r3, r3, #18
 80053ba:	4013      	ands	r3, r2
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x660>
 80053be:	e034      	b.n	800542a <HAL_RCC_OscConfig+0x6ea>
 80053c0:	40021000 	.word	0x40021000
 80053c4:	ffff1fff 	.word	0xffff1fff
 80053c8:	fffffeff 	.word	0xfffffeff
 80053cc:	40007000 	.word	0x40007000
 80053d0:	fffffbff 	.word	0xfffffbff
 80053d4:	00001388 	.word	0x00001388
 80053d8:	efffffff 	.word	0xefffffff
 80053dc:	feffffff 	.word	0xfeffffff
 80053e0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e01d      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053f0:	4b10      	ldr	r3, [pc, #64]	; (8005434 <HAL_RCC_OscConfig+0x6f4>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	2380      	movs	r3, #128	; 0x80
 80053fa:	025b      	lsls	r3, r3, #9
 80053fc:	401a      	ands	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	429a      	cmp	r2, r3
 8005404:	d10f      	bne.n	8005426 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	23f0      	movs	r3, #240	; 0xf0
 800540a:	039b      	lsls	r3, r3, #14
 800540c:	401a      	ands	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005412:	429a      	cmp	r2, r3
 8005414:	d107      	bne.n	8005426 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	23c0      	movs	r3, #192	; 0xc0
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	401a      	ands	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005422:	429a      	cmp	r2, r3
 8005424:	d001      	beq.n	800542a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	0018      	movs	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	b00a      	add	sp, #40	; 0x28
 8005432:	bdb0      	pop	{r4, r5, r7, pc}
 8005434:	40021000 	.word	0x40021000

08005438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005438:	b5b0      	push	{r4, r5, r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e128      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800544c:	4b96      	ldr	r3, [pc, #600]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2201      	movs	r2, #1
 8005452:	4013      	ands	r3, r2
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d91e      	bls.n	8005498 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545a:	4b93      	ldr	r3, [pc, #588]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2201      	movs	r2, #1
 8005460:	4393      	bics	r3, r2
 8005462:	0019      	movs	r1, r3
 8005464:	4b90      	ldr	r3, [pc, #576]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800546c:	f7fe fcdc 	bl	8003e28 <HAL_GetTick>
 8005470:	0003      	movs	r3, r0
 8005472:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005474:	e009      	b.n	800548a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005476:	f7fe fcd7 	bl	8003e28 <HAL_GetTick>
 800547a:	0002      	movs	r2, r0
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	4a8a      	ldr	r2, [pc, #552]	; (80056ac <HAL_RCC_ClockConfig+0x274>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e109      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800548a:	4b87      	ldr	r3, [pc, #540]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2201      	movs	r2, #1
 8005490:	4013      	ands	r3, r2
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d1ee      	bne.n	8005476 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2202      	movs	r2, #2
 800549e:	4013      	ands	r3, r2
 80054a0:	d009      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a2:	4b83      	ldr	r3, [pc, #524]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	22f0      	movs	r2, #240	; 0xf0
 80054a8:	4393      	bics	r3, r2
 80054aa:	0019      	movs	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	4b7f      	ldr	r3, [pc, #508]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80054b2:	430a      	orrs	r2, r1
 80054b4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2201      	movs	r2, #1
 80054bc:	4013      	ands	r3, r2
 80054be:	d100      	bne.n	80054c2 <HAL_RCC_ClockConfig+0x8a>
 80054c0:	e089      	b.n	80055d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d107      	bne.n	80054da <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ca:	4b79      	ldr	r3, [pc, #484]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	029b      	lsls	r3, r3, #10
 80054d2:	4013      	ands	r3, r2
 80054d4:	d120      	bne.n	8005518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e0e1      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d107      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054e2:	4b73      	ldr	r3, [pc, #460]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	049b      	lsls	r3, r3, #18
 80054ea:	4013      	ands	r3, r2
 80054ec:	d114      	bne.n	8005518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e0d5      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d106      	bne.n	8005508 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054fa:	4b6d      	ldr	r3, [pc, #436]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2204      	movs	r2, #4
 8005500:	4013      	ands	r3, r2
 8005502:	d109      	bne.n	8005518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0ca      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005508:	4b69      	ldr	r3, [pc, #420]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4013      	ands	r3, r2
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0c2      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005518:	4b65      	ldr	r3, [pc, #404]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	2203      	movs	r2, #3
 800551e:	4393      	bics	r3, r2
 8005520:	0019      	movs	r1, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4b62      	ldr	r3, [pc, #392]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 8005528:	430a      	orrs	r2, r1
 800552a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800552c:	f7fe fc7c 	bl	8003e28 <HAL_GetTick>
 8005530:	0003      	movs	r3, r0
 8005532:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d111      	bne.n	8005560 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800553c:	e009      	b.n	8005552 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800553e:	f7fe fc73 	bl	8003e28 <HAL_GetTick>
 8005542:	0002      	movs	r2, r0
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	4a58      	ldr	r2, [pc, #352]	; (80056ac <HAL_RCC_ClockConfig+0x274>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e0a5      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005552:	4b57      	ldr	r3, [pc, #348]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	220c      	movs	r2, #12
 8005558:	4013      	ands	r3, r2
 800555a:	2b08      	cmp	r3, #8
 800555c:	d1ef      	bne.n	800553e <HAL_RCC_ClockConfig+0x106>
 800555e:	e03a      	b.n	80055d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d111      	bne.n	800558c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005568:	e009      	b.n	800557e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800556a:	f7fe fc5d 	bl	8003e28 <HAL_GetTick>
 800556e:	0002      	movs	r2, r0
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	4a4d      	ldr	r2, [pc, #308]	; (80056ac <HAL_RCC_ClockConfig+0x274>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d901      	bls.n	800557e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e08f      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800557e:	4b4c      	ldr	r3, [pc, #304]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	220c      	movs	r2, #12
 8005584:	4013      	ands	r3, r2
 8005586:	2b0c      	cmp	r3, #12
 8005588:	d1ef      	bne.n	800556a <HAL_RCC_ClockConfig+0x132>
 800558a:	e024      	b.n	80055d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d11b      	bne.n	80055cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005594:	e009      	b.n	80055aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005596:	f7fe fc47 	bl	8003e28 <HAL_GetTick>
 800559a:	0002      	movs	r2, r0
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	4a42      	ldr	r2, [pc, #264]	; (80056ac <HAL_RCC_ClockConfig+0x274>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e079      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80055aa:	4b41      	ldr	r3, [pc, #260]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	220c      	movs	r2, #12
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d1ef      	bne.n	8005596 <HAL_RCC_ClockConfig+0x15e>
 80055b6:	e00e      	b.n	80055d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b8:	f7fe fc36 	bl	8003e28 <HAL_GetTick>
 80055bc:	0002      	movs	r2, r0
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	4a3a      	ldr	r2, [pc, #232]	; (80056ac <HAL_RCC_ClockConfig+0x274>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e068      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80055cc:	4b38      	ldr	r3, [pc, #224]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	220c      	movs	r2, #12
 80055d2:	4013      	ands	r3, r2
 80055d4:	d1f0      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055d6:	4b34      	ldr	r3, [pc, #208]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2201      	movs	r2, #1
 80055dc:	4013      	ands	r3, r2
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d21e      	bcs.n	8005622 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e4:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2201      	movs	r2, #1
 80055ea:	4393      	bics	r3, r2
 80055ec:	0019      	movs	r1, r3
 80055ee:	4b2e      	ldr	r3, [pc, #184]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055f6:	f7fe fc17 	bl	8003e28 <HAL_GetTick>
 80055fa:	0003      	movs	r3, r0
 80055fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fe:	e009      	b.n	8005614 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005600:	f7fe fc12 	bl	8003e28 <HAL_GetTick>
 8005604:	0002      	movs	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	4a28      	ldr	r2, [pc, #160]	; (80056ac <HAL_RCC_ClockConfig+0x274>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e044      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005614:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2201      	movs	r2, #1
 800561a:	4013      	ands	r3, r2
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d1ee      	bne.n	8005600 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2204      	movs	r2, #4
 8005628:	4013      	ands	r3, r2
 800562a:	d009      	beq.n	8005640 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800562c:	4b20      	ldr	r3, [pc, #128]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4a20      	ldr	r2, [pc, #128]	; (80056b4 <HAL_RCC_ClockConfig+0x27c>)
 8005632:	4013      	ands	r3, r2
 8005634:	0019      	movs	r1, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	4b1d      	ldr	r3, [pc, #116]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 800563c:	430a      	orrs	r2, r1
 800563e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2208      	movs	r2, #8
 8005646:	4013      	ands	r3, r2
 8005648:	d00a      	beq.n	8005660 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800564a:	4b19      	ldr	r3, [pc, #100]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	4a1a      	ldr	r2, [pc, #104]	; (80056b8 <HAL_RCC_ClockConfig+0x280>)
 8005650:	4013      	ands	r3, r2
 8005652:	0019      	movs	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	00da      	lsls	r2, r3, #3
 800565a:	4b15      	ldr	r3, [pc, #84]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 800565c:	430a      	orrs	r2, r1
 800565e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005660:	f000 f832 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005664:	0001      	movs	r1, r0
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	220f      	movs	r2, #15
 800566e:	4013      	ands	r3, r2
 8005670:	4a12      	ldr	r2, [pc, #72]	; (80056bc <HAL_RCC_ClockConfig+0x284>)
 8005672:	5cd3      	ldrb	r3, [r2, r3]
 8005674:	000a      	movs	r2, r1
 8005676:	40da      	lsrs	r2, r3
 8005678:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <HAL_RCC_ClockConfig+0x288>)
 800567a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800567c:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <HAL_RCC_ClockConfig+0x28c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	250b      	movs	r5, #11
 8005682:	197c      	adds	r4, r7, r5
 8005684:	0018      	movs	r0, r3
 8005686:	f7fe fb89 	bl	8003d9c <HAL_InitTick>
 800568a:	0003      	movs	r3, r0
 800568c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800568e:	197b      	adds	r3, r7, r5
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005696:	197b      	adds	r3, r7, r5
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	e000      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	0018      	movs	r0, r3
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b004      	add	sp, #16
 80056a4:	bdb0      	pop	{r4, r5, r7, pc}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	40022000 	.word	0x40022000
 80056ac:	00001388 	.word	0x00001388
 80056b0:	40021000 	.word	0x40021000
 80056b4:	fffff8ff 	.word	0xfffff8ff
 80056b8:	ffffc7ff 	.word	0xffffc7ff
 80056bc:	0800ad74 	.word	0x0800ad74
 80056c0:	20000000 	.word	0x20000000
 80056c4:	20000004 	.word	0x20000004

080056c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c8:	b5b0      	push	{r4, r5, r7, lr}
 80056ca:	b08e      	sub	sp, #56	; 0x38
 80056cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80056ce:	4b4c      	ldr	r3, [pc, #304]	; (8005800 <HAL_RCC_GetSysClockFreq+0x138>)
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d6:	230c      	movs	r3, #12
 80056d8:	4013      	ands	r3, r2
 80056da:	2b0c      	cmp	r3, #12
 80056dc:	d014      	beq.n	8005708 <HAL_RCC_GetSysClockFreq+0x40>
 80056de:	d900      	bls.n	80056e2 <HAL_RCC_GetSysClockFreq+0x1a>
 80056e0:	e07b      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x112>
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d002      	beq.n	80056ec <HAL_RCC_GetSysClockFreq+0x24>
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d00b      	beq.n	8005702 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ea:	e076      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80056ec:	4b44      	ldr	r3, [pc, #272]	; (8005800 <HAL_RCC_GetSysClockFreq+0x138>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2210      	movs	r2, #16
 80056f2:	4013      	ands	r3, r2
 80056f4:	d002      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80056f6:	4b43      	ldr	r3, [pc, #268]	; (8005804 <HAL_RCC_GetSysClockFreq+0x13c>)
 80056f8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80056fa:	e07c      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80056fc:	4b42      	ldr	r3, [pc, #264]	; (8005808 <HAL_RCC_GetSysClockFreq+0x140>)
 80056fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005700:	e079      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005702:	4b42      	ldr	r3, [pc, #264]	; (800580c <HAL_RCC_GetSysClockFreq+0x144>)
 8005704:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005706:	e076      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	0c9a      	lsrs	r2, r3, #18
 800570c:	230f      	movs	r3, #15
 800570e:	401a      	ands	r2, r3
 8005710:	4b3f      	ldr	r3, [pc, #252]	; (8005810 <HAL_RCC_GetSysClockFreq+0x148>)
 8005712:	5c9b      	ldrb	r3, [r3, r2]
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	0d9a      	lsrs	r2, r3, #22
 800571a:	2303      	movs	r3, #3
 800571c:	4013      	ands	r3, r2
 800571e:	3301      	adds	r3, #1
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005722:	4b37      	ldr	r3, [pc, #220]	; (8005800 <HAL_RCC_GetSysClockFreq+0x138>)
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	2380      	movs	r3, #128	; 0x80
 8005728:	025b      	lsls	r3, r3, #9
 800572a:	4013      	ands	r3, r2
 800572c:	d01a      	beq.n	8005764 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
 8005736:	4a35      	ldr	r2, [pc, #212]	; (800580c <HAL_RCC_GetSysClockFreq+0x144>)
 8005738:	2300      	movs	r3, #0
 800573a:	69b8      	ldr	r0, [r7, #24]
 800573c:	69f9      	ldr	r1, [r7, #28]
 800573e:	f7fa fed3 	bl	80004e8 <__aeabi_lmul>
 8005742:	0002      	movs	r2, r0
 8005744:	000b      	movs	r3, r1
 8005746:	0010      	movs	r0, r2
 8005748:	0019      	movs	r1, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f7fa fea7 	bl	80004a8 <__aeabi_uldivmod>
 800575a:	0002      	movs	r2, r0
 800575c:	000b      	movs	r3, r1
 800575e:	0013      	movs	r3, r2
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
 8005762:	e037      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005764:	4b26      	ldr	r3, [pc, #152]	; (8005800 <HAL_RCC_GetSysClockFreq+0x138>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2210      	movs	r2, #16
 800576a:	4013      	ands	r3, r2
 800576c:	d01a      	beq.n	80057a4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	4a23      	ldr	r2, [pc, #140]	; (8005804 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005778:	2300      	movs	r3, #0
 800577a:	68b8      	ldr	r0, [r7, #8]
 800577c:	68f9      	ldr	r1, [r7, #12]
 800577e:	f7fa feb3 	bl	80004e8 <__aeabi_lmul>
 8005782:	0002      	movs	r2, r0
 8005784:	000b      	movs	r3, r1
 8005786:	0010      	movs	r0, r2
 8005788:	0019      	movs	r1, r3
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f7fa fe87 	bl	80004a8 <__aeabi_uldivmod>
 800579a:	0002      	movs	r2, r0
 800579c:	000b      	movs	r3, r1
 800579e:	0013      	movs	r3, r2
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
 80057a2:	e017      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	0018      	movs	r0, r3
 80057a8:	2300      	movs	r3, #0
 80057aa:	0019      	movs	r1, r3
 80057ac:	4a16      	ldr	r2, [pc, #88]	; (8005808 <HAL_RCC_GetSysClockFreq+0x140>)
 80057ae:	2300      	movs	r3, #0
 80057b0:	f7fa fe9a 	bl	80004e8 <__aeabi_lmul>
 80057b4:	0002      	movs	r2, r0
 80057b6:	000b      	movs	r3, r1
 80057b8:	0010      	movs	r0, r2
 80057ba:	0019      	movs	r1, r3
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	001c      	movs	r4, r3
 80057c0:	2300      	movs	r3, #0
 80057c2:	001d      	movs	r5, r3
 80057c4:	0022      	movs	r2, r4
 80057c6:	002b      	movs	r3, r5
 80057c8:	f7fa fe6e 	bl	80004a8 <__aeabi_uldivmod>
 80057cc:	0002      	movs	r2, r0
 80057ce:	000b      	movs	r3, r1
 80057d0:	0013      	movs	r3, r2
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80057d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80057d8:	e00d      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <HAL_RCC_GetSysClockFreq+0x138>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	0b5b      	lsrs	r3, r3, #13
 80057e0:	2207      	movs	r2, #7
 80057e2:	4013      	ands	r3, r2
 80057e4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	3301      	adds	r3, #1
 80057ea:	2280      	movs	r2, #128	; 0x80
 80057ec:	0212      	lsls	r2, r2, #8
 80057ee:	409a      	lsls	r2, r3
 80057f0:	0013      	movs	r3, r2
 80057f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80057f4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b00e      	add	sp, #56	; 0x38
 80057fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005800:	40021000 	.word	0x40021000
 8005804:	003d0900 	.word	0x003d0900
 8005808:	00f42400 	.word	0x00f42400
 800580c:	007a1200 	.word	0x007a1200
 8005810:	0800ad8c 	.word	0x0800ad8c

08005814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005818:	4b02      	ldr	r3, [pc, #8]	; (8005824 <HAL_RCC_GetHCLKFreq+0x10>)
 800581a:	681b      	ldr	r3, [r3, #0]
}
 800581c:	0018      	movs	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	20000000 	.word	0x20000000

08005828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800582c:	f7ff fff2 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 8005830:	0001      	movs	r1, r0
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	0a1b      	lsrs	r3, r3, #8
 8005838:	2207      	movs	r2, #7
 800583a:	4013      	ands	r3, r2
 800583c:	4a04      	ldr	r2, [pc, #16]	; (8005850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800583e:	5cd3      	ldrb	r3, [r2, r3]
 8005840:	40d9      	lsrs	r1, r3
 8005842:	000b      	movs	r3, r1
}
 8005844:	0018      	movs	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	40021000 	.word	0x40021000
 8005850:	0800ad84 	.word	0x0800ad84

08005854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005858:	f7ff ffdc 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 800585c:	0001      	movs	r1, r0
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	0adb      	lsrs	r3, r3, #11
 8005864:	2207      	movs	r2, #7
 8005866:	4013      	ands	r3, r2
 8005868:	4a04      	ldr	r2, [pc, #16]	; (800587c <HAL_RCC_GetPCLK2Freq+0x28>)
 800586a:	5cd3      	ldrb	r3, [r2, r3]
 800586c:	40d9      	lsrs	r1, r3
 800586e:	000b      	movs	r3, r1
}
 8005870:	0018      	movs	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	40021000 	.word	0x40021000
 800587c:	0800ad84 	.word	0x0800ad84

08005880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e044      	b.n	800591c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d107      	bne.n	80058aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2278      	movs	r2, #120	; 0x78
 800589e:	2100      	movs	r1, #0
 80058a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7fe f8f9 	bl	8003a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2224      	movs	r2, #36	; 0x24
 80058ae:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2101      	movs	r1, #1
 80058bc:	438a      	bics	r2, r1
 80058be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	0018      	movs	r0, r3
 80058c4:	f000 f8d0 	bl	8005a68 <UART_SetConfig>
 80058c8:	0003      	movs	r3, r0
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e024      	b.n	800591c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 fb0d 	bl	8005efc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	490d      	ldr	r1, [pc, #52]	; (8005924 <HAL_UART_Init+0xa4>)
 80058ee:	400a      	ands	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	212a      	movs	r1, #42	; 0x2a
 80058fe:	438a      	bics	r2, r1
 8005900:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2101      	movs	r1, #1
 800590e:	430a      	orrs	r2, r1
 8005910:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	0018      	movs	r0, r3
 8005916:	f000 fba5 	bl	8006064 <UART_CheckIdleState>
 800591a:	0003      	movs	r3, r0
}
 800591c:	0018      	movs	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	b002      	add	sp, #8
 8005922:	bd80      	pop	{r7, pc}
 8005924:	ffffb7ff 	.word	0xffffb7ff

08005928 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	; 0x28
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	1dbb      	adds	r3, r7, #6
 8005936:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800593c:	2b20      	cmp	r3, #32
 800593e:	d000      	beq.n	8005942 <HAL_UART_Transmit+0x1a>
 8005940:	e08c      	b.n	8005a5c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_UART_Transmit+0x28>
 8005948:	1dbb      	adds	r3, r7, #6
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e084      	b.n	8005a5e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	2380      	movs	r3, #128	; 0x80
 800595a:	015b      	lsls	r3, r3, #5
 800595c:	429a      	cmp	r2, r3
 800595e:	d109      	bne.n	8005974 <HAL_UART_Transmit+0x4c>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d105      	bne.n	8005974 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2201      	movs	r2, #1
 800596c:	4013      	ands	r3, r2
 800596e:	d001      	beq.n	8005974 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e074      	b.n	8005a5e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2284      	movs	r2, #132	; 0x84
 8005978:	2100      	movs	r1, #0
 800597a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2221      	movs	r2, #33	; 0x21
 8005980:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005982:	f7fe fa51 	bl	8003e28 <HAL_GetTick>
 8005986:	0003      	movs	r3, r0
 8005988:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1dba      	adds	r2, r7, #6
 800598e:	2150      	movs	r1, #80	; 0x50
 8005990:	8812      	ldrh	r2, [r2, #0]
 8005992:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	1dba      	adds	r2, r7, #6
 8005998:	2152      	movs	r1, #82	; 0x52
 800599a:	8812      	ldrh	r2, [r2, #0]
 800599c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	2380      	movs	r3, #128	; 0x80
 80059a4:	015b      	lsls	r3, r3, #5
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d108      	bne.n	80059bc <HAL_UART_Transmit+0x94>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d104      	bne.n	80059bc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	e003      	b.n	80059c4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059c4:	e02f      	b.n	8005a26 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	0013      	movs	r3, r2
 80059d0:	2200      	movs	r2, #0
 80059d2:	2180      	movs	r1, #128	; 0x80
 80059d4:	f000 fbee 	bl	80061b4 <UART_WaitOnFlagUntilTimeout>
 80059d8:	1e03      	subs	r3, r0, #0
 80059da:	d004      	beq.n	80059e6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e03b      	b.n	8005a5e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10b      	bne.n	8005a04 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	001a      	movs	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	05d2      	lsls	r2, r2, #23
 80059f8:	0dd2      	lsrs	r2, r2, #23
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	3302      	adds	r3, #2
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	e007      	b.n	8005a14 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	781a      	ldrb	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	3301      	adds	r3, #1
 8005a12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2252      	movs	r2, #82	; 0x52
 8005a18:	5a9b      	ldrh	r3, [r3, r2]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b299      	uxth	r1, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2252      	movs	r2, #82	; 0x52
 8005a24:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2252      	movs	r2, #82	; 0x52
 8005a2a:	5a9b      	ldrh	r3, [r3, r2]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1c9      	bne.n	80059c6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	0013      	movs	r3, r2
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2140      	movs	r1, #64	; 0x40
 8005a40:	f000 fbb8 	bl	80061b4 <UART_WaitOnFlagUntilTimeout>
 8005a44:	1e03      	subs	r3, r0, #0
 8005a46:	d004      	beq.n	8005a52 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e005      	b.n	8005a5e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2220      	movs	r2, #32
 8005a56:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e000      	b.n	8005a5e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
  }
}
 8005a5e:	0018      	movs	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	b008      	add	sp, #32
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a68:	b5b0      	push	{r4, r5, r7, lr}
 8005a6a:	b08e      	sub	sp, #56	; 0x38
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a70:	231a      	movs	r3, #26
 8005a72:	2218      	movs	r2, #24
 8005a74:	189b      	adds	r3, r3, r2
 8005a76:	19db      	adds	r3, r3, r7
 8005a78:	2200      	movs	r2, #0
 8005a7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4ab4      	ldr	r2, [pc, #720]	; (8005d6c <UART_SetConfig+0x304>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	0019      	movs	r1, r3
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	4aaf      	ldr	r2, [pc, #700]	; (8005d70 <UART_SetConfig+0x308>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	0019      	movs	r1, r3
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4aa9      	ldr	r2, [pc, #676]	; (8005d74 <UART_SetConfig+0x30c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d004      	beq.n	8005adc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	4aa5      	ldr	r2, [pc, #660]	; (8005d78 <UART_SetConfig+0x310>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	0019      	movs	r1, r3
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aee:	430a      	orrs	r2, r1
 8005af0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4aa1      	ldr	r2, [pc, #644]	; (8005d7c <UART_SetConfig+0x314>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d131      	bne.n	8005b60 <UART_SetConfig+0xf8>
 8005afc:	4ba0      	ldr	r3, [pc, #640]	; (8005d80 <UART_SetConfig+0x318>)
 8005afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b00:	220c      	movs	r2, #12
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b0c      	cmp	r3, #12
 8005b06:	d01d      	beq.n	8005b44 <UART_SetConfig+0xdc>
 8005b08:	d823      	bhi.n	8005b52 <UART_SetConfig+0xea>
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d00c      	beq.n	8005b28 <UART_SetConfig+0xc0>
 8005b0e:	d820      	bhi.n	8005b52 <UART_SetConfig+0xea>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <UART_SetConfig+0xb2>
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d00e      	beq.n	8005b36 <UART_SetConfig+0xce>
 8005b18:	e01b      	b.n	8005b52 <UART_SetConfig+0xea>
 8005b1a:	231b      	movs	r3, #27
 8005b1c:	2218      	movs	r2, #24
 8005b1e:	189b      	adds	r3, r3, r2
 8005b20:	19db      	adds	r3, r3, r7
 8005b22:	2200      	movs	r2, #0
 8005b24:	701a      	strb	r2, [r3, #0]
 8005b26:	e065      	b.n	8005bf4 <UART_SetConfig+0x18c>
 8005b28:	231b      	movs	r3, #27
 8005b2a:	2218      	movs	r2, #24
 8005b2c:	189b      	adds	r3, r3, r2
 8005b2e:	19db      	adds	r3, r3, r7
 8005b30:	2202      	movs	r2, #2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	e05e      	b.n	8005bf4 <UART_SetConfig+0x18c>
 8005b36:	231b      	movs	r3, #27
 8005b38:	2218      	movs	r2, #24
 8005b3a:	189b      	adds	r3, r3, r2
 8005b3c:	19db      	adds	r3, r3, r7
 8005b3e:	2204      	movs	r2, #4
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	e057      	b.n	8005bf4 <UART_SetConfig+0x18c>
 8005b44:	231b      	movs	r3, #27
 8005b46:	2218      	movs	r2, #24
 8005b48:	189b      	adds	r3, r3, r2
 8005b4a:	19db      	adds	r3, r3, r7
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e050      	b.n	8005bf4 <UART_SetConfig+0x18c>
 8005b52:	231b      	movs	r3, #27
 8005b54:	2218      	movs	r2, #24
 8005b56:	189b      	adds	r3, r3, r2
 8005b58:	19db      	adds	r3, r3, r7
 8005b5a:	2210      	movs	r2, #16
 8005b5c:	701a      	strb	r2, [r3, #0]
 8005b5e:	e049      	b.n	8005bf4 <UART_SetConfig+0x18c>
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a83      	ldr	r2, [pc, #524]	; (8005d74 <UART_SetConfig+0x30c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d13e      	bne.n	8005be8 <UART_SetConfig+0x180>
 8005b6a:	4b85      	ldr	r3, [pc, #532]	; (8005d80 <UART_SetConfig+0x318>)
 8005b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b6e:	23c0      	movs	r3, #192	; 0xc0
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	4013      	ands	r3, r2
 8005b74:	22c0      	movs	r2, #192	; 0xc0
 8005b76:	0112      	lsls	r2, r2, #4
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d027      	beq.n	8005bcc <UART_SetConfig+0x164>
 8005b7c:	22c0      	movs	r2, #192	; 0xc0
 8005b7e:	0112      	lsls	r2, r2, #4
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d82a      	bhi.n	8005bda <UART_SetConfig+0x172>
 8005b84:	2280      	movs	r2, #128	; 0x80
 8005b86:	0112      	lsls	r2, r2, #4
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d011      	beq.n	8005bb0 <UART_SetConfig+0x148>
 8005b8c:	2280      	movs	r2, #128	; 0x80
 8005b8e:	0112      	lsls	r2, r2, #4
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d822      	bhi.n	8005bda <UART_SetConfig+0x172>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <UART_SetConfig+0x13a>
 8005b98:	2280      	movs	r2, #128	; 0x80
 8005b9a:	00d2      	lsls	r2, r2, #3
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00e      	beq.n	8005bbe <UART_SetConfig+0x156>
 8005ba0:	e01b      	b.n	8005bda <UART_SetConfig+0x172>
 8005ba2:	231b      	movs	r3, #27
 8005ba4:	2218      	movs	r2, #24
 8005ba6:	189b      	adds	r3, r3, r2
 8005ba8:	19db      	adds	r3, r3, r7
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	e021      	b.n	8005bf4 <UART_SetConfig+0x18c>
 8005bb0:	231b      	movs	r3, #27
 8005bb2:	2218      	movs	r2, #24
 8005bb4:	189b      	adds	r3, r3, r2
 8005bb6:	19db      	adds	r3, r3, r7
 8005bb8:	2202      	movs	r2, #2
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e01a      	b.n	8005bf4 <UART_SetConfig+0x18c>
 8005bbe:	231b      	movs	r3, #27
 8005bc0:	2218      	movs	r2, #24
 8005bc2:	189b      	adds	r3, r3, r2
 8005bc4:	19db      	adds	r3, r3, r7
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	e013      	b.n	8005bf4 <UART_SetConfig+0x18c>
 8005bcc:	231b      	movs	r3, #27
 8005bce:	2218      	movs	r2, #24
 8005bd0:	189b      	adds	r3, r3, r2
 8005bd2:	19db      	adds	r3, r3, r7
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	e00c      	b.n	8005bf4 <UART_SetConfig+0x18c>
 8005bda:	231b      	movs	r3, #27
 8005bdc:	2218      	movs	r2, #24
 8005bde:	189b      	adds	r3, r3, r2
 8005be0:	19db      	adds	r3, r3, r7
 8005be2:	2210      	movs	r2, #16
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e005      	b.n	8005bf4 <UART_SetConfig+0x18c>
 8005be8:	231b      	movs	r3, #27
 8005bea:	2218      	movs	r2, #24
 8005bec:	189b      	adds	r3, r3, r2
 8005bee:	19db      	adds	r3, r3, r7
 8005bf0:	2210      	movs	r2, #16
 8005bf2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a5e      	ldr	r2, [pc, #376]	; (8005d74 <UART_SetConfig+0x30c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d000      	beq.n	8005c00 <UART_SetConfig+0x198>
 8005bfe:	e084      	b.n	8005d0a <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c00:	231b      	movs	r3, #27
 8005c02:	2218      	movs	r2, #24
 8005c04:	189b      	adds	r3, r3, r2
 8005c06:	19db      	adds	r3, r3, r7
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d01d      	beq.n	8005c4a <UART_SetConfig+0x1e2>
 8005c0e:	dc20      	bgt.n	8005c52 <UART_SetConfig+0x1ea>
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d015      	beq.n	8005c40 <UART_SetConfig+0x1d8>
 8005c14:	dc1d      	bgt.n	8005c52 <UART_SetConfig+0x1ea>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <UART_SetConfig+0x1b8>
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d005      	beq.n	8005c2a <UART_SetConfig+0x1c2>
 8005c1e:	e018      	b.n	8005c52 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c20:	f7ff fe02 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 8005c24:	0003      	movs	r3, r0
 8005c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c28:	e01c      	b.n	8005c64 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c2a:	4b55      	ldr	r3, [pc, #340]	; (8005d80 <UART_SetConfig+0x318>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2210      	movs	r2, #16
 8005c30:	4013      	ands	r3, r2
 8005c32:	d002      	beq.n	8005c3a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005c34:	4b53      	ldr	r3, [pc, #332]	; (8005d84 <UART_SetConfig+0x31c>)
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c38:	e014      	b.n	8005c64 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8005c3a:	4b53      	ldr	r3, [pc, #332]	; (8005d88 <UART_SetConfig+0x320>)
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c3e:	e011      	b.n	8005c64 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c40:	f7ff fd42 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005c44:	0003      	movs	r3, r0
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c48:	e00c      	b.n	8005c64 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c50:	e008      	b.n	8005c64 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c56:	231a      	movs	r3, #26
 8005c58:	2218      	movs	r2, #24
 8005c5a:	189b      	adds	r3, r3, r2
 8005c5c:	19db      	adds	r3, r3, r7
 8005c5e:	2201      	movs	r2, #1
 8005c60:	701a      	strb	r2, [r3, #0]
        break;
 8005c62:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d100      	bne.n	8005c6c <UART_SetConfig+0x204>
 8005c6a:	e12f      	b.n	8005ecc <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	0013      	movs	r3, r2
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	189b      	adds	r3, r3, r2
 8005c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d305      	bcc.n	8005c88 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d906      	bls.n	8005c96 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8005c88:	231a      	movs	r3, #26
 8005c8a:	2218      	movs	r2, #24
 8005c8c:	189b      	adds	r3, r3, r2
 8005c8e:	19db      	adds	r3, r3, r7
 8005c90:	2201      	movs	r2, #1
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e11a      	b.n	8005ecc <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	6939      	ldr	r1, [r7, #16]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	000b      	movs	r3, r1
 8005ca4:	0e1b      	lsrs	r3, r3, #24
 8005ca6:	0010      	movs	r0, r2
 8005ca8:	0205      	lsls	r5, r0, #8
 8005caa:	431d      	orrs	r5, r3
 8005cac:	000b      	movs	r3, r1
 8005cae:	021c      	lsls	r4, r3, #8
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	60bb      	str	r3, [r7, #8]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	68b8      	ldr	r0, [r7, #8]
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	1900      	adds	r0, r0, r4
 8005cc2:	4169      	adcs	r1, r5
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f7fa fbe9 	bl	80004a8 <__aeabi_uldivmod>
 8005cd6:	0002      	movs	r2, r0
 8005cd8:	000b      	movs	r3, r1
 8005cda:	0013      	movs	r3, r2
 8005cdc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce0:	23c0      	movs	r3, #192	; 0xc0
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d309      	bcc.n	8005cfc <UART_SetConfig+0x294>
 8005ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cea:	2380      	movs	r3, #128	; 0x80
 8005cec:	035b      	lsls	r3, r3, #13
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d204      	bcs.n	8005cfc <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e0e7      	b.n	8005ecc <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8005cfc:	231a      	movs	r3, #26
 8005cfe:	2218      	movs	r2, #24
 8005d00:	189b      	adds	r3, r3, r2
 8005d02:	19db      	adds	r3, r3, r7
 8005d04:	2201      	movs	r2, #1
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	e0e0      	b.n	8005ecc <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d000      	beq.n	8005d18 <UART_SetConfig+0x2b0>
 8005d16:	e082      	b.n	8005e1e <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8005d18:	231b      	movs	r3, #27
 8005d1a:	2218      	movs	r2, #24
 8005d1c:	189b      	adds	r3, r3, r2
 8005d1e:	19db      	adds	r3, r3, r7
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d834      	bhi.n	8005d90 <UART_SetConfig+0x328>
 8005d26:	009a      	lsls	r2, r3, #2
 8005d28:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <UART_SetConfig+0x324>)
 8005d2a:	18d3      	adds	r3, r2, r3
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d30:	f7ff fd7a 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 8005d34:	0003      	movs	r3, r0
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d38:	e033      	b.n	8005da2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d3a:	f7ff fd8b 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 8005d3e:	0003      	movs	r3, r0
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d42:	e02e      	b.n	8005da2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d44:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <UART_SetConfig+0x318>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2210      	movs	r2, #16
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d002      	beq.n	8005d54 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <UART_SetConfig+0x31c>)
 8005d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d52:	e026      	b.n	8005da2 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <UART_SetConfig+0x320>)
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d58:	e023      	b.n	8005da2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d5a:	f7ff fcb5 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005d5e:	0003      	movs	r3, r0
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d62:	e01e      	b.n	8005da2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d6a:	e01a      	b.n	8005da2 <UART_SetConfig+0x33a>
 8005d6c:	efff69f3 	.word	0xefff69f3
 8005d70:	ffffcfff 	.word	0xffffcfff
 8005d74:	40004800 	.word	0x40004800
 8005d78:	fffff4ff 	.word	0xfffff4ff
 8005d7c:	40004400 	.word	0x40004400
 8005d80:	40021000 	.word	0x40021000
 8005d84:	003d0900 	.word	0x003d0900
 8005d88:	00f42400 	.word	0x00f42400
 8005d8c:	0800ad98 	.word	0x0800ad98
      default:
        pclk = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d94:	231a      	movs	r3, #26
 8005d96:	2218      	movs	r2, #24
 8005d98:	189b      	adds	r3, r3, r2
 8005d9a:	19db      	adds	r3, r3, r7
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]
        break;
 8005da0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d100      	bne.n	8005daa <UART_SetConfig+0x342>
 8005da8:	e090      	b.n	8005ecc <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	005a      	lsls	r2, r3, #1
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	18d2      	adds	r2, r2, r3
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	0019      	movs	r1, r3
 8005dbc:	0010      	movs	r0, r2
 8005dbe:	f7fa f9bf 	bl	8000140 <__udivsi3>
 8005dc2:	0003      	movs	r3, r0
 8005dc4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	2b0f      	cmp	r3, #15
 8005dca:	d921      	bls.n	8005e10 <UART_SetConfig+0x3a8>
 8005dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dce:	2380      	movs	r3, #128	; 0x80
 8005dd0:	025b      	lsls	r3, r3, #9
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d21c      	bcs.n	8005e10 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	200e      	movs	r0, #14
 8005ddc:	2418      	movs	r4, #24
 8005dde:	1903      	adds	r3, r0, r4
 8005de0:	19db      	adds	r3, r3, r7
 8005de2:	210f      	movs	r1, #15
 8005de4:	438a      	bics	r2, r1
 8005de6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2207      	movs	r2, #7
 8005df0:	4013      	ands	r3, r2
 8005df2:	b299      	uxth	r1, r3
 8005df4:	1903      	adds	r3, r0, r4
 8005df6:	19db      	adds	r3, r3, r7
 8005df8:	1902      	adds	r2, r0, r4
 8005dfa:	19d2      	adds	r2, r2, r7
 8005dfc:	8812      	ldrh	r2, [r2, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	1902      	adds	r2, r0, r4
 8005e08:	19d2      	adds	r2, r2, r7
 8005e0a:	8812      	ldrh	r2, [r2, #0]
 8005e0c:	60da      	str	r2, [r3, #12]
 8005e0e:	e05d      	b.n	8005ecc <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005e10:	231a      	movs	r3, #26
 8005e12:	2218      	movs	r2, #24
 8005e14:	189b      	adds	r3, r3, r2
 8005e16:	19db      	adds	r3, r3, r7
 8005e18:	2201      	movs	r2, #1
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	e056      	b.n	8005ecc <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e1e:	231b      	movs	r3, #27
 8005e20:	2218      	movs	r2, #24
 8005e22:	189b      	adds	r3, r3, r2
 8005e24:	19db      	adds	r3, r3, r7
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d822      	bhi.n	8005e72 <UART_SetConfig+0x40a>
 8005e2c:	009a      	lsls	r2, r3, #2
 8005e2e:	4b2f      	ldr	r3, [pc, #188]	; (8005eec <UART_SetConfig+0x484>)
 8005e30:	18d3      	adds	r3, r2, r3
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e36:	f7ff fcf7 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 8005e3a:	0003      	movs	r3, r0
 8005e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e3e:	e021      	b.n	8005e84 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e40:	f7ff fd08 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 8005e44:	0003      	movs	r3, r0
 8005e46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e48:	e01c      	b.n	8005e84 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e4a:	4b29      	ldr	r3, [pc, #164]	; (8005ef0 <UART_SetConfig+0x488>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2210      	movs	r2, #16
 8005e50:	4013      	ands	r3, r2
 8005e52:	d002      	beq.n	8005e5a <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005e54:	4b27      	ldr	r3, [pc, #156]	; (8005ef4 <UART_SetConfig+0x48c>)
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e58:	e014      	b.n	8005e84 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8005e5a:	4b27      	ldr	r3, [pc, #156]	; (8005ef8 <UART_SetConfig+0x490>)
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e5e:	e011      	b.n	8005e84 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e60:	f7ff fc32 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005e64:	0003      	movs	r3, r0
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e68:	e00c      	b.n	8005e84 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e6a:	2380      	movs	r3, #128	; 0x80
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e70:	e008      	b.n	8005e84 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005e76:	231a      	movs	r3, #26
 8005e78:	2218      	movs	r2, #24
 8005e7a:	189b      	adds	r3, r3, r2
 8005e7c:	19db      	adds	r3, r3, r7
 8005e7e:	2201      	movs	r2, #1
 8005e80:	701a      	strb	r2, [r3, #0]
        break;
 8005e82:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d020      	beq.n	8005ecc <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	085a      	lsrs	r2, r3, #1
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	18d2      	adds	r2, r2, r3
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	0019      	movs	r1, r3
 8005e9a:	0010      	movs	r0, r2
 8005e9c:	f7fa f950 	bl	8000140 <__udivsi3>
 8005ea0:	0003      	movs	r3, r0
 8005ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	2b0f      	cmp	r3, #15
 8005ea8:	d90a      	bls.n	8005ec0 <UART_SetConfig+0x458>
 8005eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	025b      	lsls	r3, r3, #9
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d205      	bcs.n	8005ec0 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60da      	str	r2, [r3, #12]
 8005ebe:	e005      	b.n	8005ecc <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005ec0:	231a      	movs	r3, #26
 8005ec2:	2218      	movs	r2, #24
 8005ec4:	189b      	adds	r3, r3, r2
 8005ec6:	19db      	adds	r3, r3, r7
 8005ec8:	2201      	movs	r2, #1
 8005eca:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ed8:	231a      	movs	r3, #26
 8005eda:	2218      	movs	r2, #24
 8005edc:	189b      	adds	r3, r3, r2
 8005ede:	19db      	adds	r3, r3, r7
 8005ee0:	781b      	ldrb	r3, [r3, #0]
}
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	b00e      	add	sp, #56	; 0x38
 8005ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	0800adbc 	.word	0x0800adbc
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	003d0900 	.word	0x003d0900
 8005ef8:	00f42400 	.word	0x00f42400

08005efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2201      	movs	r2, #1
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d00b      	beq.n	8005f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	4a4a      	ldr	r2, [pc, #296]	; (8006040 <UART_AdvFeatureConfig+0x144>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	0019      	movs	r1, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	d00b      	beq.n	8005f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	4a43      	ldr	r2, [pc, #268]	; (8006044 <UART_AdvFeatureConfig+0x148>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	0019      	movs	r1, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d00b      	beq.n	8005f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a3b      	ldr	r2, [pc, #236]	; (8006048 <UART_AdvFeatureConfig+0x14c>)
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	2208      	movs	r2, #8
 8005f70:	4013      	ands	r3, r2
 8005f72:	d00b      	beq.n	8005f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	4a34      	ldr	r2, [pc, #208]	; (800604c <UART_AdvFeatureConfig+0x150>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	0019      	movs	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	2210      	movs	r2, #16
 8005f92:	4013      	ands	r3, r2
 8005f94:	d00b      	beq.n	8005fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	4a2c      	ldr	r2, [pc, #176]	; (8006050 <UART_AdvFeatureConfig+0x154>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	0019      	movs	r1, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	d00b      	beq.n	8005fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	4a25      	ldr	r2, [pc, #148]	; (8006054 <UART_AdvFeatureConfig+0x158>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	2240      	movs	r2, #64	; 0x40
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	d01d      	beq.n	8006016 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4a1d      	ldr	r2, [pc, #116]	; (8006058 <UART_AdvFeatureConfig+0x15c>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	0019      	movs	r1, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ff6:	2380      	movs	r3, #128	; 0x80
 8005ff8:	035b      	lsls	r3, r3, #13
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d10b      	bne.n	8006016 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	4a15      	ldr	r2, [pc, #84]	; (800605c <UART_AdvFeatureConfig+0x160>)
 8006006:	4013      	ands	r3, r2
 8006008:	0019      	movs	r1, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2280      	movs	r2, #128	; 0x80
 800601c:	4013      	ands	r3, r2
 800601e:	d00b      	beq.n	8006038 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	4a0e      	ldr	r2, [pc, #56]	; (8006060 <UART_AdvFeatureConfig+0x164>)
 8006028:	4013      	ands	r3, r2
 800602a:	0019      	movs	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	605a      	str	r2, [r3, #4]
  }
}
 8006038:	46c0      	nop			; (mov r8, r8)
 800603a:	46bd      	mov	sp, r7
 800603c:	b002      	add	sp, #8
 800603e:	bd80      	pop	{r7, pc}
 8006040:	fffdffff 	.word	0xfffdffff
 8006044:	fffeffff 	.word	0xfffeffff
 8006048:	fffbffff 	.word	0xfffbffff
 800604c:	ffff7fff 	.word	0xffff7fff
 8006050:	ffffefff 	.word	0xffffefff
 8006054:	ffffdfff 	.word	0xffffdfff
 8006058:	ffefffff 	.word	0xffefffff
 800605c:	ff9fffff 	.word	0xff9fffff
 8006060:	fff7ffff 	.word	0xfff7ffff

08006064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b092      	sub	sp, #72	; 0x48
 8006068:	af02      	add	r7, sp, #8
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2284      	movs	r2, #132	; 0x84
 8006070:	2100      	movs	r1, #0
 8006072:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006074:	f7fd fed8 	bl	8003e28 <HAL_GetTick>
 8006078:	0003      	movs	r3, r0
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2208      	movs	r2, #8
 8006084:	4013      	ands	r3, r2
 8006086:	2b08      	cmp	r3, #8
 8006088:	d12c      	bne.n	80060e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800608a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608c:	2280      	movs	r2, #128	; 0x80
 800608e:	0391      	lsls	r1, r2, #14
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	4a46      	ldr	r2, [pc, #280]	; (80061ac <UART_CheckIdleState+0x148>)
 8006094:	9200      	str	r2, [sp, #0]
 8006096:	2200      	movs	r2, #0
 8006098:	f000 f88c 	bl	80061b4 <UART_WaitOnFlagUntilTimeout>
 800609c:	1e03      	subs	r3, r0, #0
 800609e:	d021      	beq.n	80060e4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a0:	f3ef 8310 	mrs	r3, PRIMASK
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80060a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80060aa:	2301      	movs	r3, #1
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b0:	f383 8810 	msr	PRIMASK, r3
}
 80060b4:	46c0      	nop			; (mov r8, r8)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2180      	movs	r1, #128	; 0x80
 80060c2:	438a      	bics	r2, r1
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	f383 8810 	msr	PRIMASK, r3
}
 80060d0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2278      	movs	r2, #120	; 0x78
 80060dc:	2100      	movs	r1, #0
 80060de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e05f      	b.n	80061a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2204      	movs	r2, #4
 80060ec:	4013      	ands	r3, r2
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d146      	bne.n	8006180 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f4:	2280      	movs	r2, #128	; 0x80
 80060f6:	03d1      	lsls	r1, r2, #15
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	4a2c      	ldr	r2, [pc, #176]	; (80061ac <UART_CheckIdleState+0x148>)
 80060fc:	9200      	str	r2, [sp, #0]
 80060fe:	2200      	movs	r2, #0
 8006100:	f000 f858 	bl	80061b4 <UART_WaitOnFlagUntilTimeout>
 8006104:	1e03      	subs	r3, r0, #0
 8006106:	d03b      	beq.n	8006180 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006108:	f3ef 8310 	mrs	r3, PRIMASK
 800610c:	60fb      	str	r3, [r7, #12]
  return(result);
 800610e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006110:	637b      	str	r3, [r7, #52]	; 0x34
 8006112:	2301      	movs	r3, #1
 8006114:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f383 8810 	msr	PRIMASK, r3
}
 800611c:	46c0      	nop			; (mov r8, r8)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4921      	ldr	r1, [pc, #132]	; (80061b0 <UART_CheckIdleState+0x14c>)
 800612a:	400a      	ands	r2, r1
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006130:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f383 8810 	msr	PRIMASK, r3
}
 8006138:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800613a:	f3ef 8310 	mrs	r3, PRIMASK
 800613e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006140:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006142:	633b      	str	r3, [r7, #48]	; 0x30
 8006144:	2301      	movs	r3, #1
 8006146:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f383 8810 	msr	PRIMASK, r3
}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2101      	movs	r1, #1
 800615c:	438a      	bics	r2, r1
 800615e:	609a      	str	r2, [r3, #8]
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	f383 8810 	msr	PRIMASK, r3
}
 800616a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2280      	movs	r2, #128	; 0x80
 8006170:	2120      	movs	r1, #32
 8006172:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2278      	movs	r2, #120	; 0x78
 8006178:	2100      	movs	r1, #0
 800617a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e011      	b.n	80061a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2280      	movs	r2, #128	; 0x80
 800618a:	2120      	movs	r1, #32
 800618c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2278      	movs	r2, #120	; 0x78
 800619e:	2100      	movs	r1, #0
 80061a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	0018      	movs	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b010      	add	sp, #64	; 0x40
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	01ffffff 	.word	0x01ffffff
 80061b0:	fffffedf 	.word	0xfffffedf

080061b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	1dfb      	adds	r3, r7, #7
 80061c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c4:	e04b      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	3301      	adds	r3, #1
 80061ca:	d048      	beq.n	800625e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061cc:	f7fd fe2c 	bl	8003e28 <HAL_GetTick>
 80061d0:	0002      	movs	r2, r0
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d302      	bcc.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e04b      	b.n	800627e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2204      	movs	r2, #4
 80061ee:	4013      	ands	r3, r2
 80061f0:	d035      	beq.n	800625e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	2208      	movs	r2, #8
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d111      	bne.n	8006224 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2208      	movs	r2, #8
 8006206:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	0018      	movs	r0, r3
 800620c:	f000 f83c 	bl	8006288 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2284      	movs	r2, #132	; 0x84
 8006214:	2108      	movs	r1, #8
 8006216:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2278      	movs	r2, #120	; 0x78
 800621c:	2100      	movs	r1, #0
 800621e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e02c      	b.n	800627e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69da      	ldr	r2, [r3, #28]
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	401a      	ands	r2, r3
 8006230:	2380      	movs	r3, #128	; 0x80
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	429a      	cmp	r2, r3
 8006236:	d112      	bne.n	800625e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2280      	movs	r2, #128	; 0x80
 800623e:	0112      	lsls	r2, r2, #4
 8006240:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	0018      	movs	r0, r3
 8006246:	f000 f81f 	bl	8006288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2284      	movs	r2, #132	; 0x84
 800624e:	2120      	movs	r1, #32
 8006250:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2278      	movs	r2, #120	; 0x78
 8006256:	2100      	movs	r1, #0
 8006258:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e00f      	b.n	800627e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	4013      	ands	r3, r2
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	425a      	negs	r2, r3
 800626e:	4153      	adcs	r3, r2
 8006270:	b2db      	uxtb	r3, r3
 8006272:	001a      	movs	r2, r3
 8006274:	1dfb      	adds	r3, r7, #7
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d0a4      	beq.n	80061c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	0018      	movs	r0, r3
 8006280:	46bd      	mov	sp, r7
 8006282:	b004      	add	sp, #16
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08e      	sub	sp, #56	; 0x38
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006290:	f3ef 8310 	mrs	r3, PRIMASK
 8006294:	617b      	str	r3, [r7, #20]
  return(result);
 8006296:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
 800629a:	2301      	movs	r3, #1
 800629c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	f383 8810 	msr	PRIMASK, r3
}
 80062a4:	46c0      	nop			; (mov r8, r8)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4926      	ldr	r1, [pc, #152]	; (800634c <UART_EndRxTransfer+0xc4>)
 80062b2:	400a      	ands	r2, r1
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	f383 8810 	msr	PRIMASK, r3
}
 80062c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c2:	f3ef 8310 	mrs	r3, PRIMASK
 80062c6:	623b      	str	r3, [r7, #32]
  return(result);
 80062c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ca:	633b      	str	r3, [r7, #48]	; 0x30
 80062cc:	2301      	movs	r3, #1
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	f383 8810 	msr	PRIMASK, r3
}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2101      	movs	r1, #1
 80062e4:	438a      	bics	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	f383 8810 	msr	PRIMASK, r3
}
 80062f2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d118      	bne.n	800632e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006300:	60bb      	str	r3, [r7, #8]
  return(result);
 8006302:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006306:	2301      	movs	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f383 8810 	msr	PRIMASK, r3
}
 8006310:	46c0      	nop			; (mov r8, r8)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2110      	movs	r1, #16
 800631e:	438a      	bics	r2, r1
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f383 8810 	msr	PRIMASK, r3
}
 800632c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2280      	movs	r2, #128	; 0x80
 8006332:	2120      	movs	r1, #32
 8006334:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	46bd      	mov	sp, r7
 8006346:	b00e      	add	sp, #56	; 0x38
 8006348:	bd80      	pop	{r7, pc}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	fffffedf 	.word	0xfffffedf

08006350 <__cvt>:
 8006350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006352:	001e      	movs	r6, r3
 8006354:	2300      	movs	r3, #0
 8006356:	0014      	movs	r4, r2
 8006358:	b08b      	sub	sp, #44	; 0x2c
 800635a:	429e      	cmp	r6, r3
 800635c:	da04      	bge.n	8006368 <__cvt+0x18>
 800635e:	2180      	movs	r1, #128	; 0x80
 8006360:	0609      	lsls	r1, r1, #24
 8006362:	1873      	adds	r3, r6, r1
 8006364:	001e      	movs	r6, r3
 8006366:	232d      	movs	r3, #45	; 0x2d
 8006368:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800636a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800636c:	7013      	strb	r3, [r2, #0]
 800636e:	2320      	movs	r3, #32
 8006370:	2203      	movs	r2, #3
 8006372:	439f      	bics	r7, r3
 8006374:	2f46      	cmp	r7, #70	; 0x46
 8006376:	d007      	beq.n	8006388 <__cvt+0x38>
 8006378:	003b      	movs	r3, r7
 800637a:	3b45      	subs	r3, #69	; 0x45
 800637c:	4259      	negs	r1, r3
 800637e:	414b      	adcs	r3, r1
 8006380:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006382:	3a01      	subs	r2, #1
 8006384:	18cb      	adds	r3, r1, r3
 8006386:	9310      	str	r3, [sp, #64]	; 0x40
 8006388:	ab09      	add	r3, sp, #36	; 0x24
 800638a:	9304      	str	r3, [sp, #16]
 800638c:	ab08      	add	r3, sp, #32
 800638e:	9303      	str	r3, [sp, #12]
 8006390:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006392:	9200      	str	r2, [sp, #0]
 8006394:	9302      	str	r3, [sp, #8]
 8006396:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006398:	0022      	movs	r2, r4
 800639a:	9301      	str	r3, [sp, #4]
 800639c:	0033      	movs	r3, r6
 800639e:	f001 f8b3 	bl	8007508 <_dtoa_r>
 80063a2:	0005      	movs	r5, r0
 80063a4:	2f47      	cmp	r7, #71	; 0x47
 80063a6:	d102      	bne.n	80063ae <__cvt+0x5e>
 80063a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063aa:	07db      	lsls	r3, r3, #31
 80063ac:	d528      	bpl.n	8006400 <__cvt+0xb0>
 80063ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063b0:	18eb      	adds	r3, r5, r3
 80063b2:	9307      	str	r3, [sp, #28]
 80063b4:	2f46      	cmp	r7, #70	; 0x46
 80063b6:	d114      	bne.n	80063e2 <__cvt+0x92>
 80063b8:	782b      	ldrb	r3, [r5, #0]
 80063ba:	2b30      	cmp	r3, #48	; 0x30
 80063bc:	d10c      	bne.n	80063d8 <__cvt+0x88>
 80063be:	2200      	movs	r2, #0
 80063c0:	2300      	movs	r3, #0
 80063c2:	0020      	movs	r0, r4
 80063c4:	0031      	movs	r1, r6
 80063c6:	f7fa f841 	bl	800044c <__aeabi_dcmpeq>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d104      	bne.n	80063d8 <__cvt+0x88>
 80063ce:	2301      	movs	r3, #1
 80063d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063d2:	1a9b      	subs	r3, r3, r2
 80063d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063da:	9a07      	ldr	r2, [sp, #28]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	18d3      	adds	r3, r2, r3
 80063e0:	9307      	str	r3, [sp, #28]
 80063e2:	2200      	movs	r2, #0
 80063e4:	2300      	movs	r3, #0
 80063e6:	0020      	movs	r0, r4
 80063e8:	0031      	movs	r1, r6
 80063ea:	f7fa f82f 	bl	800044c <__aeabi_dcmpeq>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d001      	beq.n	80063f6 <__cvt+0xa6>
 80063f2:	9b07      	ldr	r3, [sp, #28]
 80063f4:	9309      	str	r3, [sp, #36]	; 0x24
 80063f6:	2230      	movs	r2, #48	; 0x30
 80063f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fa:	9907      	ldr	r1, [sp, #28]
 80063fc:	428b      	cmp	r3, r1
 80063fe:	d306      	bcc.n	800640e <__cvt+0xbe>
 8006400:	0028      	movs	r0, r5
 8006402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006404:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006406:	1b5b      	subs	r3, r3, r5
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	b00b      	add	sp, #44	; 0x2c
 800640c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640e:	1c59      	adds	r1, r3, #1
 8006410:	9109      	str	r1, [sp, #36]	; 0x24
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	e7f0      	b.n	80063f8 <__cvt+0xa8>

08006416 <__exponent>:
 8006416:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006418:	1c83      	adds	r3, r0, #2
 800641a:	b087      	sub	sp, #28
 800641c:	9303      	str	r3, [sp, #12]
 800641e:	0005      	movs	r5, r0
 8006420:	000c      	movs	r4, r1
 8006422:	232b      	movs	r3, #43	; 0x2b
 8006424:	7002      	strb	r2, [r0, #0]
 8006426:	2900      	cmp	r1, #0
 8006428:	da01      	bge.n	800642e <__exponent+0x18>
 800642a:	424c      	negs	r4, r1
 800642c:	3302      	adds	r3, #2
 800642e:	706b      	strb	r3, [r5, #1]
 8006430:	2c09      	cmp	r4, #9
 8006432:	dd2f      	ble.n	8006494 <__exponent+0x7e>
 8006434:	270a      	movs	r7, #10
 8006436:	ab04      	add	r3, sp, #16
 8006438:	1dde      	adds	r6, r3, #7
 800643a:	0020      	movs	r0, r4
 800643c:	0039      	movs	r1, r7
 800643e:	9601      	str	r6, [sp, #4]
 8006440:	f7f9 ffee 	bl	8000420 <__aeabi_idivmod>
 8006444:	3e01      	subs	r6, #1
 8006446:	3130      	adds	r1, #48	; 0x30
 8006448:	0020      	movs	r0, r4
 800644a:	7031      	strb	r1, [r6, #0]
 800644c:	0039      	movs	r1, r7
 800644e:	9402      	str	r4, [sp, #8]
 8006450:	f7f9 ff00 	bl	8000254 <__divsi3>
 8006454:	9b02      	ldr	r3, [sp, #8]
 8006456:	0004      	movs	r4, r0
 8006458:	2b63      	cmp	r3, #99	; 0x63
 800645a:	dcee      	bgt.n	800643a <__exponent+0x24>
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	3430      	adds	r4, #48	; 0x30
 8006460:	1e9a      	subs	r2, r3, #2
 8006462:	0013      	movs	r3, r2
 8006464:	9903      	ldr	r1, [sp, #12]
 8006466:	7014      	strb	r4, [r2, #0]
 8006468:	a804      	add	r0, sp, #16
 800646a:	3007      	adds	r0, #7
 800646c:	4298      	cmp	r0, r3
 800646e:	d80c      	bhi.n	800648a <__exponent+0x74>
 8006470:	2300      	movs	r3, #0
 8006472:	4282      	cmp	r2, r0
 8006474:	d804      	bhi.n	8006480 <__exponent+0x6a>
 8006476:	aa04      	add	r2, sp, #16
 8006478:	3309      	adds	r3, #9
 800647a:	189b      	adds	r3, r3, r2
 800647c:	9a01      	ldr	r2, [sp, #4]
 800647e:	1a9b      	subs	r3, r3, r2
 8006480:	9a03      	ldr	r2, [sp, #12]
 8006482:	18d3      	adds	r3, r2, r3
 8006484:	1b58      	subs	r0, r3, r5
 8006486:	b007      	add	sp, #28
 8006488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648a:	7818      	ldrb	r0, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	7008      	strb	r0, [r1, #0]
 8006490:	3101      	adds	r1, #1
 8006492:	e7e9      	b.n	8006468 <__exponent+0x52>
 8006494:	2330      	movs	r3, #48	; 0x30
 8006496:	3430      	adds	r4, #48	; 0x30
 8006498:	70ab      	strb	r3, [r5, #2]
 800649a:	70ec      	strb	r4, [r5, #3]
 800649c:	1d2b      	adds	r3, r5, #4
 800649e:	e7f1      	b.n	8006484 <__exponent+0x6e>

080064a0 <_printf_float>:
 80064a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a2:	b095      	sub	sp, #84	; 0x54
 80064a4:	000c      	movs	r4, r1
 80064a6:	9208      	str	r2, [sp, #32]
 80064a8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80064aa:	9309      	str	r3, [sp, #36]	; 0x24
 80064ac:	0007      	movs	r7, r0
 80064ae:	f000 ff0d 	bl	80072cc <_localeconv_r>
 80064b2:	6803      	ldr	r3, [r0, #0]
 80064b4:	0018      	movs	r0, r3
 80064b6:	930c      	str	r3, [sp, #48]	; 0x30
 80064b8:	f7f9 fe26 	bl	8000108 <strlen>
 80064bc:	2300      	movs	r3, #0
 80064be:	9312      	str	r3, [sp, #72]	; 0x48
 80064c0:	7e23      	ldrb	r3, [r4, #24]
 80064c2:	2207      	movs	r2, #7
 80064c4:	930a      	str	r3, [sp, #40]	; 0x28
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	900d      	str	r0, [sp, #52]	; 0x34
 80064ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80064cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064ce:	682b      	ldr	r3, [r5, #0]
 80064d0:	05c9      	lsls	r1, r1, #23
 80064d2:	d547      	bpl.n	8006564 <_printf_float+0xc4>
 80064d4:	189b      	adds	r3, r3, r2
 80064d6:	4393      	bics	r3, r2
 80064d8:	001a      	movs	r2, r3
 80064da:	3208      	adds	r2, #8
 80064dc:	602a      	str	r2, [r5, #0]
 80064de:	681e      	ldr	r6, [r3, #0]
 80064e0:	685d      	ldr	r5, [r3, #4]
 80064e2:	0032      	movs	r2, r6
 80064e4:	002b      	movs	r3, r5
 80064e6:	64a2      	str	r2, [r4, #72]	; 0x48
 80064e8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80064ea:	2201      	movs	r2, #1
 80064ec:	006b      	lsls	r3, r5, #1
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	930e      	str	r3, [sp, #56]	; 0x38
 80064f2:	0030      	movs	r0, r6
 80064f4:	4bab      	ldr	r3, [pc, #684]	; (80067a4 <_printf_float+0x304>)
 80064f6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80064f8:	4252      	negs	r2, r2
 80064fa:	f7fc f9ff 	bl	80028fc <__aeabi_dcmpun>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d132      	bne.n	8006568 <_printf_float+0xc8>
 8006502:	2201      	movs	r2, #1
 8006504:	0030      	movs	r0, r6
 8006506:	4ba7      	ldr	r3, [pc, #668]	; (80067a4 <_printf_float+0x304>)
 8006508:	990e      	ldr	r1, [sp, #56]	; 0x38
 800650a:	4252      	negs	r2, r2
 800650c:	f7f9 ffae 	bl	800046c <__aeabi_dcmple>
 8006510:	2800      	cmp	r0, #0
 8006512:	d129      	bne.n	8006568 <_printf_float+0xc8>
 8006514:	2200      	movs	r2, #0
 8006516:	2300      	movs	r3, #0
 8006518:	0030      	movs	r0, r6
 800651a:	0029      	movs	r1, r5
 800651c:	f7f9 ff9c 	bl	8000458 <__aeabi_dcmplt>
 8006520:	2800      	cmp	r0, #0
 8006522:	d003      	beq.n	800652c <_printf_float+0x8c>
 8006524:	0023      	movs	r3, r4
 8006526:	222d      	movs	r2, #45	; 0x2d
 8006528:	3343      	adds	r3, #67	; 0x43
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800652e:	4d9e      	ldr	r5, [pc, #632]	; (80067a8 <_printf_float+0x308>)
 8006530:	2b47      	cmp	r3, #71	; 0x47
 8006532:	d900      	bls.n	8006536 <_printf_float+0x96>
 8006534:	4d9d      	ldr	r5, [pc, #628]	; (80067ac <_printf_float+0x30c>)
 8006536:	2303      	movs	r3, #3
 8006538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800653a:	6123      	str	r3, [r4, #16]
 800653c:	3301      	adds	r3, #1
 800653e:	439a      	bics	r2, r3
 8006540:	2300      	movs	r3, #0
 8006542:	6022      	str	r2, [r4, #0]
 8006544:	930b      	str	r3, [sp, #44]	; 0x2c
 8006546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006548:	0021      	movs	r1, r4
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	0038      	movs	r0, r7
 800654e:	9b08      	ldr	r3, [sp, #32]
 8006550:	aa13      	add	r2, sp, #76	; 0x4c
 8006552:	f000 f9fb 	bl	800694c <_printf_common>
 8006556:	3001      	adds	r0, #1
 8006558:	d000      	beq.n	800655c <_printf_float+0xbc>
 800655a:	e0a3      	b.n	80066a4 <_printf_float+0x204>
 800655c:	2001      	movs	r0, #1
 800655e:	4240      	negs	r0, r0
 8006560:	b015      	add	sp, #84	; 0x54
 8006562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006564:	3307      	adds	r3, #7
 8006566:	e7b6      	b.n	80064d6 <_printf_float+0x36>
 8006568:	0032      	movs	r2, r6
 800656a:	002b      	movs	r3, r5
 800656c:	0030      	movs	r0, r6
 800656e:	0029      	movs	r1, r5
 8006570:	f7fc f9c4 	bl	80028fc <__aeabi_dcmpun>
 8006574:	2800      	cmp	r0, #0
 8006576:	d00b      	beq.n	8006590 <_printf_float+0xf0>
 8006578:	2d00      	cmp	r5, #0
 800657a:	da03      	bge.n	8006584 <_printf_float+0xe4>
 800657c:	0023      	movs	r3, r4
 800657e:	222d      	movs	r2, #45	; 0x2d
 8006580:	3343      	adds	r3, #67	; 0x43
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006586:	4d8a      	ldr	r5, [pc, #552]	; (80067b0 <_printf_float+0x310>)
 8006588:	2b47      	cmp	r3, #71	; 0x47
 800658a:	d9d4      	bls.n	8006536 <_printf_float+0x96>
 800658c:	4d89      	ldr	r5, [pc, #548]	; (80067b4 <_printf_float+0x314>)
 800658e:	e7d2      	b.n	8006536 <_printf_float+0x96>
 8006590:	2220      	movs	r2, #32
 8006592:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006594:	6863      	ldr	r3, [r4, #4]
 8006596:	4391      	bics	r1, r2
 8006598:	910e      	str	r1, [sp, #56]	; 0x38
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	d14a      	bne.n	8006634 <_printf_float+0x194>
 800659e:	3307      	adds	r3, #7
 80065a0:	6063      	str	r3, [r4, #4]
 80065a2:	2380      	movs	r3, #128	; 0x80
 80065a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4313      	orrs	r3, r2
 80065aa:	2200      	movs	r2, #0
 80065ac:	9206      	str	r2, [sp, #24]
 80065ae:	aa12      	add	r2, sp, #72	; 0x48
 80065b0:	9205      	str	r2, [sp, #20]
 80065b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	9204      	str	r2, [sp, #16]
 80065b8:	aa11      	add	r2, sp, #68	; 0x44
 80065ba:	9203      	str	r2, [sp, #12]
 80065bc:	2223      	movs	r2, #35	; 0x23
 80065be:	a908      	add	r1, sp, #32
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	6863      	ldr	r3, [r4, #4]
 80065c4:	1852      	adds	r2, r2, r1
 80065c6:	9202      	str	r2, [sp, #8]
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	0032      	movs	r2, r6
 80065cc:	002b      	movs	r3, r5
 80065ce:	0038      	movs	r0, r7
 80065d0:	f7ff febe 	bl	8006350 <__cvt>
 80065d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065d6:	0005      	movs	r5, r0
 80065d8:	2b47      	cmp	r3, #71	; 0x47
 80065da:	d109      	bne.n	80065f0 <_printf_float+0x150>
 80065dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065de:	1cda      	adds	r2, r3, #3
 80065e0:	db02      	blt.n	80065e8 <_printf_float+0x148>
 80065e2:	6862      	ldr	r2, [r4, #4]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	dd49      	ble.n	800667c <_printf_float+0x1dc>
 80065e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ea:	3b02      	subs	r3, #2
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	930a      	str	r3, [sp, #40]	; 0x28
 80065f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80065f4:	2b65      	cmp	r3, #101	; 0x65
 80065f6:	d824      	bhi.n	8006642 <_printf_float+0x1a2>
 80065f8:	0020      	movs	r0, r4
 80065fa:	001a      	movs	r2, r3
 80065fc:	3901      	subs	r1, #1
 80065fe:	3050      	adds	r0, #80	; 0x50
 8006600:	9111      	str	r1, [sp, #68]	; 0x44
 8006602:	f7ff ff08 	bl	8006416 <__exponent>
 8006606:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006608:	900b      	str	r0, [sp, #44]	; 0x2c
 800660a:	1813      	adds	r3, r2, r0
 800660c:	6123      	str	r3, [r4, #16]
 800660e:	2a01      	cmp	r2, #1
 8006610:	dc02      	bgt.n	8006618 <_printf_float+0x178>
 8006612:	6822      	ldr	r2, [r4, #0]
 8006614:	07d2      	lsls	r2, r2, #31
 8006616:	d501      	bpl.n	800661c <_printf_float+0x17c>
 8006618:	3301      	adds	r3, #1
 800661a:	6123      	str	r3, [r4, #16]
 800661c:	2323      	movs	r3, #35	; 0x23
 800661e:	aa08      	add	r2, sp, #32
 8006620:	189b      	adds	r3, r3, r2
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d100      	bne.n	800662a <_printf_float+0x18a>
 8006628:	e78d      	b.n	8006546 <_printf_float+0xa6>
 800662a:	0023      	movs	r3, r4
 800662c:	222d      	movs	r2, #45	; 0x2d
 800662e:	3343      	adds	r3, #67	; 0x43
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e788      	b.n	8006546 <_printf_float+0xa6>
 8006634:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006636:	2a47      	cmp	r2, #71	; 0x47
 8006638:	d1b3      	bne.n	80065a2 <_printf_float+0x102>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1b1      	bne.n	80065a2 <_printf_float+0x102>
 800663e:	3301      	adds	r3, #1
 8006640:	e7ae      	b.n	80065a0 <_printf_float+0x100>
 8006642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006644:	2b66      	cmp	r3, #102	; 0x66
 8006646:	d11b      	bne.n	8006680 <_printf_float+0x1e0>
 8006648:	6863      	ldr	r3, [r4, #4]
 800664a:	2900      	cmp	r1, #0
 800664c:	dd09      	ble.n	8006662 <_printf_float+0x1c2>
 800664e:	6121      	str	r1, [r4, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <_printf_float+0x1ba>
 8006654:	6822      	ldr	r2, [r4, #0]
 8006656:	07d2      	lsls	r2, r2, #31
 8006658:	d50b      	bpl.n	8006672 <_printf_float+0x1d2>
 800665a:	3301      	adds	r3, #1
 800665c:	185b      	adds	r3, r3, r1
 800665e:	6123      	str	r3, [r4, #16]
 8006660:	e007      	b.n	8006672 <_printf_float+0x1d2>
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <_printf_float+0x1ce>
 8006666:	2201      	movs	r2, #1
 8006668:	6821      	ldr	r1, [r4, #0]
 800666a:	4211      	tst	r1, r2
 800666c:	d000      	beq.n	8006670 <_printf_float+0x1d0>
 800666e:	1c9a      	adds	r2, r3, #2
 8006670:	6122      	str	r2, [r4, #16]
 8006672:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006674:	65a3      	str	r3, [r4, #88]	; 0x58
 8006676:	2300      	movs	r3, #0
 8006678:	930b      	str	r3, [sp, #44]	; 0x2c
 800667a:	e7cf      	b.n	800661c <_printf_float+0x17c>
 800667c:	2367      	movs	r3, #103	; 0x67
 800667e:	930a      	str	r3, [sp, #40]	; 0x28
 8006680:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006682:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006684:	4299      	cmp	r1, r3
 8006686:	db06      	blt.n	8006696 <_printf_float+0x1f6>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	6121      	str	r1, [r4, #16]
 800668c:	07db      	lsls	r3, r3, #31
 800668e:	d5f0      	bpl.n	8006672 <_printf_float+0x1d2>
 8006690:	3101      	adds	r1, #1
 8006692:	6121      	str	r1, [r4, #16]
 8006694:	e7ed      	b.n	8006672 <_printf_float+0x1d2>
 8006696:	2201      	movs	r2, #1
 8006698:	2900      	cmp	r1, #0
 800669a:	dc01      	bgt.n	80066a0 <_printf_float+0x200>
 800669c:	1892      	adds	r2, r2, r2
 800669e:	1a52      	subs	r2, r2, r1
 80066a0:	189b      	adds	r3, r3, r2
 80066a2:	e7dc      	b.n	800665e <_printf_float+0x1be>
 80066a4:	6822      	ldr	r2, [r4, #0]
 80066a6:	0553      	lsls	r3, r2, #21
 80066a8:	d408      	bmi.n	80066bc <_printf_float+0x21c>
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	002a      	movs	r2, r5
 80066ae:	0038      	movs	r0, r7
 80066b0:	9908      	ldr	r1, [sp, #32]
 80066b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80066b4:	47a8      	blx	r5
 80066b6:	3001      	adds	r0, #1
 80066b8:	d12a      	bne.n	8006710 <_printf_float+0x270>
 80066ba:	e74f      	b.n	800655c <_printf_float+0xbc>
 80066bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066be:	2b65      	cmp	r3, #101	; 0x65
 80066c0:	d800      	bhi.n	80066c4 <_printf_float+0x224>
 80066c2:	e0ec      	b.n	800689e <_printf_float+0x3fe>
 80066c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80066c6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80066c8:	2200      	movs	r2, #0
 80066ca:	2300      	movs	r3, #0
 80066cc:	f7f9 febe 	bl	800044c <__aeabi_dcmpeq>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d034      	beq.n	800673e <_printf_float+0x29e>
 80066d4:	2301      	movs	r3, #1
 80066d6:	0038      	movs	r0, r7
 80066d8:	4a37      	ldr	r2, [pc, #220]	; (80067b8 <_printf_float+0x318>)
 80066da:	9908      	ldr	r1, [sp, #32]
 80066dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80066de:	47a8      	blx	r5
 80066e0:	3001      	adds	r0, #1
 80066e2:	d100      	bne.n	80066e6 <_printf_float+0x246>
 80066e4:	e73a      	b.n	800655c <_printf_float+0xbc>
 80066e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80066e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066ea:	429a      	cmp	r2, r3
 80066ec:	db02      	blt.n	80066f4 <_printf_float+0x254>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	07db      	lsls	r3, r3, #31
 80066f2:	d50d      	bpl.n	8006710 <_printf_float+0x270>
 80066f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80066f6:	0038      	movs	r0, r7
 80066f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066fc:	9908      	ldr	r1, [sp, #32]
 80066fe:	47a8      	blx	r5
 8006700:	2500      	movs	r5, #0
 8006702:	3001      	adds	r0, #1
 8006704:	d100      	bne.n	8006708 <_printf_float+0x268>
 8006706:	e729      	b.n	800655c <_printf_float+0xbc>
 8006708:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800670a:	3b01      	subs	r3, #1
 800670c:	42ab      	cmp	r3, r5
 800670e:	dc0a      	bgt.n	8006726 <_printf_float+0x286>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	079b      	lsls	r3, r3, #30
 8006714:	d500      	bpl.n	8006718 <_printf_float+0x278>
 8006716:	e116      	b.n	8006946 <_printf_float+0x4a6>
 8006718:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800671a:	68e0      	ldr	r0, [r4, #12]
 800671c:	4298      	cmp	r0, r3
 800671e:	db00      	blt.n	8006722 <_printf_float+0x282>
 8006720:	e71e      	b.n	8006560 <_printf_float+0xc0>
 8006722:	0018      	movs	r0, r3
 8006724:	e71c      	b.n	8006560 <_printf_float+0xc0>
 8006726:	0022      	movs	r2, r4
 8006728:	2301      	movs	r3, #1
 800672a:	0038      	movs	r0, r7
 800672c:	9908      	ldr	r1, [sp, #32]
 800672e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006730:	321a      	adds	r2, #26
 8006732:	47b0      	blx	r6
 8006734:	3001      	adds	r0, #1
 8006736:	d100      	bne.n	800673a <_printf_float+0x29a>
 8006738:	e710      	b.n	800655c <_printf_float+0xbc>
 800673a:	3501      	adds	r5, #1
 800673c:	e7e4      	b.n	8006708 <_printf_float+0x268>
 800673e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006740:	2b00      	cmp	r3, #0
 8006742:	dc3b      	bgt.n	80067bc <_printf_float+0x31c>
 8006744:	2301      	movs	r3, #1
 8006746:	0038      	movs	r0, r7
 8006748:	4a1b      	ldr	r2, [pc, #108]	; (80067b8 <_printf_float+0x318>)
 800674a:	9908      	ldr	r1, [sp, #32]
 800674c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800674e:	47b0      	blx	r6
 8006750:	3001      	adds	r0, #1
 8006752:	d100      	bne.n	8006756 <_printf_float+0x2b6>
 8006754:	e702      	b.n	800655c <_printf_float+0xbc>
 8006756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006758:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800675a:	4313      	orrs	r3, r2
 800675c:	d102      	bne.n	8006764 <_printf_float+0x2c4>
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	07db      	lsls	r3, r3, #31
 8006762:	d5d5      	bpl.n	8006710 <_printf_float+0x270>
 8006764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006766:	0038      	movs	r0, r7
 8006768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800676a:	9908      	ldr	r1, [sp, #32]
 800676c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800676e:	47b0      	blx	r6
 8006770:	2300      	movs	r3, #0
 8006772:	3001      	adds	r0, #1
 8006774:	d100      	bne.n	8006778 <_printf_float+0x2d8>
 8006776:	e6f1      	b.n	800655c <_printf_float+0xbc>
 8006778:	930a      	str	r3, [sp, #40]	; 0x28
 800677a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800677c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800677e:	425b      	negs	r3, r3
 8006780:	4293      	cmp	r3, r2
 8006782:	dc01      	bgt.n	8006788 <_printf_float+0x2e8>
 8006784:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006786:	e791      	b.n	80066ac <_printf_float+0x20c>
 8006788:	0022      	movs	r2, r4
 800678a:	2301      	movs	r3, #1
 800678c:	0038      	movs	r0, r7
 800678e:	9908      	ldr	r1, [sp, #32]
 8006790:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006792:	321a      	adds	r2, #26
 8006794:	47b0      	blx	r6
 8006796:	3001      	adds	r0, #1
 8006798:	d100      	bne.n	800679c <_printf_float+0x2fc>
 800679a:	e6df      	b.n	800655c <_printf_float+0xbc>
 800679c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800679e:	3301      	adds	r3, #1
 80067a0:	e7ea      	b.n	8006778 <_printf_float+0x2d8>
 80067a2:	46c0      	nop			; (mov r8, r8)
 80067a4:	7fefffff 	.word	0x7fefffff
 80067a8:	0800ade0 	.word	0x0800ade0
 80067ac:	0800ade4 	.word	0x0800ade4
 80067b0:	0800ade8 	.word	0x0800ade8
 80067b4:	0800adec 	.word	0x0800adec
 80067b8:	0800adf0 	.word	0x0800adf0
 80067bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067c0:	920a      	str	r2, [sp, #40]	; 0x28
 80067c2:	429a      	cmp	r2, r3
 80067c4:	dd00      	ble.n	80067c8 <_printf_float+0x328>
 80067c6:	930a      	str	r3, [sp, #40]	; 0x28
 80067c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	dc3d      	bgt.n	800684a <_printf_float+0x3aa>
 80067ce:	2300      	movs	r3, #0
 80067d0:	930e      	str	r3, [sp, #56]	; 0x38
 80067d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d4:	43db      	mvns	r3, r3
 80067d6:	17db      	asrs	r3, r3, #31
 80067d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80067da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067de:	930b      	str	r3, [sp, #44]	; 0x2c
 80067e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067e2:	4013      	ands	r3, r2
 80067e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067ea:	4293      	cmp	r3, r2
 80067ec:	dc36      	bgt.n	800685c <_printf_float+0x3bc>
 80067ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80067f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067f2:	429a      	cmp	r2, r3
 80067f4:	db40      	blt.n	8006878 <_printf_float+0x3d8>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	07db      	lsls	r3, r3, #31
 80067fa:	d43d      	bmi.n	8006878 <_printf_float+0x3d8>
 80067fc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80067fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006802:	1af3      	subs	r3, r6, r3
 8006804:	1ab6      	subs	r6, r6, r2
 8006806:	429e      	cmp	r6, r3
 8006808:	dd00      	ble.n	800680c <_printf_float+0x36c>
 800680a:	001e      	movs	r6, r3
 800680c:	2e00      	cmp	r6, #0
 800680e:	dc3c      	bgt.n	800688a <_printf_float+0x3ea>
 8006810:	2300      	movs	r3, #0
 8006812:	930a      	str	r3, [sp, #40]	; 0x28
 8006814:	43f3      	mvns	r3, r6
 8006816:	17db      	asrs	r3, r3, #31
 8006818:	930b      	str	r3, [sp, #44]	; 0x2c
 800681a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800681c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006822:	4032      	ands	r2, r6
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006828:	4293      	cmp	r3, r2
 800682a:	dc00      	bgt.n	800682e <_printf_float+0x38e>
 800682c:	e770      	b.n	8006710 <_printf_float+0x270>
 800682e:	0022      	movs	r2, r4
 8006830:	2301      	movs	r3, #1
 8006832:	0038      	movs	r0, r7
 8006834:	9908      	ldr	r1, [sp, #32]
 8006836:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006838:	321a      	adds	r2, #26
 800683a:	47a8      	blx	r5
 800683c:	3001      	adds	r0, #1
 800683e:	d100      	bne.n	8006842 <_printf_float+0x3a2>
 8006840:	e68c      	b.n	800655c <_printf_float+0xbc>
 8006842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006844:	3301      	adds	r3, #1
 8006846:	930a      	str	r3, [sp, #40]	; 0x28
 8006848:	e7e7      	b.n	800681a <_printf_float+0x37a>
 800684a:	002a      	movs	r2, r5
 800684c:	0038      	movs	r0, r7
 800684e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006850:	9908      	ldr	r1, [sp, #32]
 8006852:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006854:	47b0      	blx	r6
 8006856:	3001      	adds	r0, #1
 8006858:	d1b9      	bne.n	80067ce <_printf_float+0x32e>
 800685a:	e67f      	b.n	800655c <_printf_float+0xbc>
 800685c:	0022      	movs	r2, r4
 800685e:	2301      	movs	r3, #1
 8006860:	0038      	movs	r0, r7
 8006862:	9908      	ldr	r1, [sp, #32]
 8006864:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006866:	321a      	adds	r2, #26
 8006868:	47b0      	blx	r6
 800686a:	3001      	adds	r0, #1
 800686c:	d100      	bne.n	8006870 <_printf_float+0x3d0>
 800686e:	e675      	b.n	800655c <_printf_float+0xbc>
 8006870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006872:	3301      	adds	r3, #1
 8006874:	930e      	str	r3, [sp, #56]	; 0x38
 8006876:	e7b0      	b.n	80067da <_printf_float+0x33a>
 8006878:	0038      	movs	r0, r7
 800687a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800687c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800687e:	9908      	ldr	r1, [sp, #32]
 8006880:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006882:	47b0      	blx	r6
 8006884:	3001      	adds	r0, #1
 8006886:	d1b9      	bne.n	80067fc <_printf_float+0x35c>
 8006888:	e668      	b.n	800655c <_printf_float+0xbc>
 800688a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800688c:	0038      	movs	r0, r7
 800688e:	18ea      	adds	r2, r5, r3
 8006890:	9908      	ldr	r1, [sp, #32]
 8006892:	0033      	movs	r3, r6
 8006894:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006896:	47a8      	blx	r5
 8006898:	3001      	adds	r0, #1
 800689a:	d1b9      	bne.n	8006810 <_printf_float+0x370>
 800689c:	e65e      	b.n	800655c <_printf_float+0xbc>
 800689e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	dc02      	bgt.n	80068aa <_printf_float+0x40a>
 80068a4:	2301      	movs	r3, #1
 80068a6:	421a      	tst	r2, r3
 80068a8:	d03a      	beq.n	8006920 <_printf_float+0x480>
 80068aa:	2301      	movs	r3, #1
 80068ac:	002a      	movs	r2, r5
 80068ae:	0038      	movs	r0, r7
 80068b0:	9908      	ldr	r1, [sp, #32]
 80068b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80068b4:	47b0      	blx	r6
 80068b6:	3001      	adds	r0, #1
 80068b8:	d100      	bne.n	80068bc <_printf_float+0x41c>
 80068ba:	e64f      	b.n	800655c <_printf_float+0xbc>
 80068bc:	0038      	movs	r0, r7
 80068be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068c2:	9908      	ldr	r1, [sp, #32]
 80068c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80068c6:	47b0      	blx	r6
 80068c8:	3001      	adds	r0, #1
 80068ca:	d100      	bne.n	80068ce <_printf_float+0x42e>
 80068cc:	e646      	b.n	800655c <_printf_float+0xbc>
 80068ce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80068d0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80068d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068d4:	2200      	movs	r2, #0
 80068d6:	001e      	movs	r6, r3
 80068d8:	2300      	movs	r3, #0
 80068da:	f7f9 fdb7 	bl	800044c <__aeabi_dcmpeq>
 80068de:	2800      	cmp	r0, #0
 80068e0:	d11c      	bne.n	800691c <_printf_float+0x47c>
 80068e2:	0033      	movs	r3, r6
 80068e4:	1c6a      	adds	r2, r5, #1
 80068e6:	3b01      	subs	r3, #1
 80068e8:	0038      	movs	r0, r7
 80068ea:	9908      	ldr	r1, [sp, #32]
 80068ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80068ee:	47a8      	blx	r5
 80068f0:	3001      	adds	r0, #1
 80068f2:	d10f      	bne.n	8006914 <_printf_float+0x474>
 80068f4:	e632      	b.n	800655c <_printf_float+0xbc>
 80068f6:	0022      	movs	r2, r4
 80068f8:	2301      	movs	r3, #1
 80068fa:	0038      	movs	r0, r7
 80068fc:	9908      	ldr	r1, [sp, #32]
 80068fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006900:	321a      	adds	r2, #26
 8006902:	47b0      	blx	r6
 8006904:	3001      	adds	r0, #1
 8006906:	d100      	bne.n	800690a <_printf_float+0x46a>
 8006908:	e628      	b.n	800655c <_printf_float+0xbc>
 800690a:	3501      	adds	r5, #1
 800690c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800690e:	3b01      	subs	r3, #1
 8006910:	42ab      	cmp	r3, r5
 8006912:	dcf0      	bgt.n	80068f6 <_printf_float+0x456>
 8006914:	0022      	movs	r2, r4
 8006916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006918:	3250      	adds	r2, #80	; 0x50
 800691a:	e6c8      	b.n	80066ae <_printf_float+0x20e>
 800691c:	2500      	movs	r5, #0
 800691e:	e7f5      	b.n	800690c <_printf_float+0x46c>
 8006920:	002a      	movs	r2, r5
 8006922:	e7e1      	b.n	80068e8 <_printf_float+0x448>
 8006924:	0022      	movs	r2, r4
 8006926:	2301      	movs	r3, #1
 8006928:	0038      	movs	r0, r7
 800692a:	9908      	ldr	r1, [sp, #32]
 800692c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800692e:	3219      	adds	r2, #25
 8006930:	47b0      	blx	r6
 8006932:	3001      	adds	r0, #1
 8006934:	d100      	bne.n	8006938 <_printf_float+0x498>
 8006936:	e611      	b.n	800655c <_printf_float+0xbc>
 8006938:	3501      	adds	r5, #1
 800693a:	68e3      	ldr	r3, [r4, #12]
 800693c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800693e:	1a9b      	subs	r3, r3, r2
 8006940:	42ab      	cmp	r3, r5
 8006942:	dcef      	bgt.n	8006924 <_printf_float+0x484>
 8006944:	e6e8      	b.n	8006718 <_printf_float+0x278>
 8006946:	2500      	movs	r5, #0
 8006948:	e7f7      	b.n	800693a <_printf_float+0x49a>
 800694a:	46c0      	nop			; (mov r8, r8)

0800694c <_printf_common>:
 800694c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800694e:	0016      	movs	r6, r2
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	688a      	ldr	r2, [r1, #8]
 8006954:	690b      	ldr	r3, [r1, #16]
 8006956:	000c      	movs	r4, r1
 8006958:	9000      	str	r0, [sp, #0]
 800695a:	4293      	cmp	r3, r2
 800695c:	da00      	bge.n	8006960 <_printf_common+0x14>
 800695e:	0013      	movs	r3, r2
 8006960:	0022      	movs	r2, r4
 8006962:	6033      	str	r3, [r6, #0]
 8006964:	3243      	adds	r2, #67	; 0x43
 8006966:	7812      	ldrb	r2, [r2, #0]
 8006968:	2a00      	cmp	r2, #0
 800696a:	d001      	beq.n	8006970 <_printf_common+0x24>
 800696c:	3301      	adds	r3, #1
 800696e:	6033      	str	r3, [r6, #0]
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	069b      	lsls	r3, r3, #26
 8006974:	d502      	bpl.n	800697c <_printf_common+0x30>
 8006976:	6833      	ldr	r3, [r6, #0]
 8006978:	3302      	adds	r3, #2
 800697a:	6033      	str	r3, [r6, #0]
 800697c:	6822      	ldr	r2, [r4, #0]
 800697e:	2306      	movs	r3, #6
 8006980:	0015      	movs	r5, r2
 8006982:	401d      	ands	r5, r3
 8006984:	421a      	tst	r2, r3
 8006986:	d027      	beq.n	80069d8 <_printf_common+0x8c>
 8006988:	0023      	movs	r3, r4
 800698a:	3343      	adds	r3, #67	; 0x43
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	1e5a      	subs	r2, r3, #1
 8006990:	4193      	sbcs	r3, r2
 8006992:	6822      	ldr	r2, [r4, #0]
 8006994:	0692      	lsls	r2, r2, #26
 8006996:	d430      	bmi.n	80069fa <_printf_common+0xae>
 8006998:	0022      	movs	r2, r4
 800699a:	9901      	ldr	r1, [sp, #4]
 800699c:	9800      	ldr	r0, [sp, #0]
 800699e:	9d08      	ldr	r5, [sp, #32]
 80069a0:	3243      	adds	r2, #67	; 0x43
 80069a2:	47a8      	blx	r5
 80069a4:	3001      	adds	r0, #1
 80069a6:	d025      	beq.n	80069f4 <_printf_common+0xa8>
 80069a8:	2206      	movs	r2, #6
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	2500      	movs	r5, #0
 80069ae:	4013      	ands	r3, r2
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d105      	bne.n	80069c0 <_printf_common+0x74>
 80069b4:	6833      	ldr	r3, [r6, #0]
 80069b6:	68e5      	ldr	r5, [r4, #12]
 80069b8:	1aed      	subs	r5, r5, r3
 80069ba:	43eb      	mvns	r3, r5
 80069bc:	17db      	asrs	r3, r3, #31
 80069be:	401d      	ands	r5, r3
 80069c0:	68a3      	ldr	r3, [r4, #8]
 80069c2:	6922      	ldr	r2, [r4, #16]
 80069c4:	4293      	cmp	r3, r2
 80069c6:	dd01      	ble.n	80069cc <_printf_common+0x80>
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	18ed      	adds	r5, r5, r3
 80069cc:	2600      	movs	r6, #0
 80069ce:	42b5      	cmp	r5, r6
 80069d0:	d120      	bne.n	8006a14 <_printf_common+0xc8>
 80069d2:	2000      	movs	r0, #0
 80069d4:	e010      	b.n	80069f8 <_printf_common+0xac>
 80069d6:	3501      	adds	r5, #1
 80069d8:	68e3      	ldr	r3, [r4, #12]
 80069da:	6832      	ldr	r2, [r6, #0]
 80069dc:	1a9b      	subs	r3, r3, r2
 80069de:	42ab      	cmp	r3, r5
 80069e0:	ddd2      	ble.n	8006988 <_printf_common+0x3c>
 80069e2:	0022      	movs	r2, r4
 80069e4:	2301      	movs	r3, #1
 80069e6:	9901      	ldr	r1, [sp, #4]
 80069e8:	9800      	ldr	r0, [sp, #0]
 80069ea:	9f08      	ldr	r7, [sp, #32]
 80069ec:	3219      	adds	r2, #25
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	d1f0      	bne.n	80069d6 <_printf_common+0x8a>
 80069f4:	2001      	movs	r0, #1
 80069f6:	4240      	negs	r0, r0
 80069f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069fa:	2030      	movs	r0, #48	; 0x30
 80069fc:	18e1      	adds	r1, r4, r3
 80069fe:	3143      	adds	r1, #67	; 0x43
 8006a00:	7008      	strb	r0, [r1, #0]
 8006a02:	0021      	movs	r1, r4
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	3145      	adds	r1, #69	; 0x45
 8006a08:	7809      	ldrb	r1, [r1, #0]
 8006a0a:	18a2      	adds	r2, r4, r2
 8006a0c:	3243      	adds	r2, #67	; 0x43
 8006a0e:	3302      	adds	r3, #2
 8006a10:	7011      	strb	r1, [r2, #0]
 8006a12:	e7c1      	b.n	8006998 <_printf_common+0x4c>
 8006a14:	0022      	movs	r2, r4
 8006a16:	2301      	movs	r3, #1
 8006a18:	9901      	ldr	r1, [sp, #4]
 8006a1a:	9800      	ldr	r0, [sp, #0]
 8006a1c:	9f08      	ldr	r7, [sp, #32]
 8006a1e:	321a      	adds	r2, #26
 8006a20:	47b8      	blx	r7
 8006a22:	3001      	adds	r0, #1
 8006a24:	d0e6      	beq.n	80069f4 <_printf_common+0xa8>
 8006a26:	3601      	adds	r6, #1
 8006a28:	e7d1      	b.n	80069ce <_printf_common+0x82>
	...

08006a2c <_printf_i>:
 8006a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a2e:	b08b      	sub	sp, #44	; 0x2c
 8006a30:	9206      	str	r2, [sp, #24]
 8006a32:	000a      	movs	r2, r1
 8006a34:	3243      	adds	r2, #67	; 0x43
 8006a36:	9307      	str	r3, [sp, #28]
 8006a38:	9005      	str	r0, [sp, #20]
 8006a3a:	9204      	str	r2, [sp, #16]
 8006a3c:	7e0a      	ldrb	r2, [r1, #24]
 8006a3e:	000c      	movs	r4, r1
 8006a40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a42:	2a78      	cmp	r2, #120	; 0x78
 8006a44:	d809      	bhi.n	8006a5a <_printf_i+0x2e>
 8006a46:	2a62      	cmp	r2, #98	; 0x62
 8006a48:	d80b      	bhi.n	8006a62 <_printf_i+0x36>
 8006a4a:	2a00      	cmp	r2, #0
 8006a4c:	d100      	bne.n	8006a50 <_printf_i+0x24>
 8006a4e:	e0be      	b.n	8006bce <_printf_i+0x1a2>
 8006a50:	497c      	ldr	r1, [pc, #496]	; (8006c44 <_printf_i+0x218>)
 8006a52:	9103      	str	r1, [sp, #12]
 8006a54:	2a58      	cmp	r2, #88	; 0x58
 8006a56:	d100      	bne.n	8006a5a <_printf_i+0x2e>
 8006a58:	e093      	b.n	8006b82 <_printf_i+0x156>
 8006a5a:	0026      	movs	r6, r4
 8006a5c:	3642      	adds	r6, #66	; 0x42
 8006a5e:	7032      	strb	r2, [r6, #0]
 8006a60:	e022      	b.n	8006aa8 <_printf_i+0x7c>
 8006a62:	0010      	movs	r0, r2
 8006a64:	3863      	subs	r0, #99	; 0x63
 8006a66:	2815      	cmp	r0, #21
 8006a68:	d8f7      	bhi.n	8006a5a <_printf_i+0x2e>
 8006a6a:	f7f9 fb5f 	bl	800012c <__gnu_thumb1_case_shi>
 8006a6e:	0016      	.short	0x0016
 8006a70:	fff6001f 	.word	0xfff6001f
 8006a74:	fff6fff6 	.word	0xfff6fff6
 8006a78:	001ffff6 	.word	0x001ffff6
 8006a7c:	fff6fff6 	.word	0xfff6fff6
 8006a80:	fff6fff6 	.word	0xfff6fff6
 8006a84:	003600a3 	.word	0x003600a3
 8006a88:	fff60083 	.word	0xfff60083
 8006a8c:	00b4fff6 	.word	0x00b4fff6
 8006a90:	0036fff6 	.word	0x0036fff6
 8006a94:	fff6fff6 	.word	0xfff6fff6
 8006a98:	0087      	.short	0x0087
 8006a9a:	0026      	movs	r6, r4
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	3642      	adds	r6, #66	; 0x42
 8006aa0:	1d11      	adds	r1, r2, #4
 8006aa2:	6019      	str	r1, [r3, #0]
 8006aa4:	6813      	ldr	r3, [r2, #0]
 8006aa6:	7033      	strb	r3, [r6, #0]
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0a2      	b.n	8006bf2 <_printf_i+0x1c6>
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	6809      	ldr	r1, [r1, #0]
 8006ab0:	1d02      	adds	r2, r0, #4
 8006ab2:	060d      	lsls	r5, r1, #24
 8006ab4:	d50b      	bpl.n	8006ace <_printf_i+0xa2>
 8006ab6:	6805      	ldr	r5, [r0, #0]
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	2d00      	cmp	r5, #0
 8006abc:	da03      	bge.n	8006ac6 <_printf_i+0x9a>
 8006abe:	232d      	movs	r3, #45	; 0x2d
 8006ac0:	9a04      	ldr	r2, [sp, #16]
 8006ac2:	426d      	negs	r5, r5
 8006ac4:	7013      	strb	r3, [r2, #0]
 8006ac6:	4b5f      	ldr	r3, [pc, #380]	; (8006c44 <_printf_i+0x218>)
 8006ac8:	270a      	movs	r7, #10
 8006aca:	9303      	str	r3, [sp, #12]
 8006acc:	e01b      	b.n	8006b06 <_printf_i+0xda>
 8006ace:	6805      	ldr	r5, [r0, #0]
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	0649      	lsls	r1, r1, #25
 8006ad4:	d5f1      	bpl.n	8006aba <_printf_i+0x8e>
 8006ad6:	b22d      	sxth	r5, r5
 8006ad8:	e7ef      	b.n	8006aba <_printf_i+0x8e>
 8006ada:	680d      	ldr	r5, [r1, #0]
 8006adc:	6819      	ldr	r1, [r3, #0]
 8006ade:	1d08      	adds	r0, r1, #4
 8006ae0:	6018      	str	r0, [r3, #0]
 8006ae2:	062e      	lsls	r6, r5, #24
 8006ae4:	d501      	bpl.n	8006aea <_printf_i+0xbe>
 8006ae6:	680d      	ldr	r5, [r1, #0]
 8006ae8:	e003      	b.n	8006af2 <_printf_i+0xc6>
 8006aea:	066d      	lsls	r5, r5, #25
 8006aec:	d5fb      	bpl.n	8006ae6 <_printf_i+0xba>
 8006aee:	680d      	ldr	r5, [r1, #0]
 8006af0:	b2ad      	uxth	r5, r5
 8006af2:	4b54      	ldr	r3, [pc, #336]	; (8006c44 <_printf_i+0x218>)
 8006af4:	2708      	movs	r7, #8
 8006af6:	9303      	str	r3, [sp, #12]
 8006af8:	2a6f      	cmp	r2, #111	; 0x6f
 8006afa:	d000      	beq.n	8006afe <_printf_i+0xd2>
 8006afc:	3702      	adds	r7, #2
 8006afe:	0023      	movs	r3, r4
 8006b00:	2200      	movs	r2, #0
 8006b02:	3343      	adds	r3, #67	; 0x43
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	6863      	ldr	r3, [r4, #4]
 8006b08:	60a3      	str	r3, [r4, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	db03      	blt.n	8006b16 <_printf_i+0xea>
 8006b0e:	2104      	movs	r1, #4
 8006b10:	6822      	ldr	r2, [r4, #0]
 8006b12:	438a      	bics	r2, r1
 8006b14:	6022      	str	r2, [r4, #0]
 8006b16:	2d00      	cmp	r5, #0
 8006b18:	d102      	bne.n	8006b20 <_printf_i+0xf4>
 8006b1a:	9e04      	ldr	r6, [sp, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00c      	beq.n	8006b3a <_printf_i+0x10e>
 8006b20:	9e04      	ldr	r6, [sp, #16]
 8006b22:	0028      	movs	r0, r5
 8006b24:	0039      	movs	r1, r7
 8006b26:	f7f9 fb91 	bl	800024c <__aeabi_uidivmod>
 8006b2a:	9b03      	ldr	r3, [sp, #12]
 8006b2c:	3e01      	subs	r6, #1
 8006b2e:	5c5b      	ldrb	r3, [r3, r1]
 8006b30:	7033      	strb	r3, [r6, #0]
 8006b32:	002b      	movs	r3, r5
 8006b34:	0005      	movs	r5, r0
 8006b36:	429f      	cmp	r7, r3
 8006b38:	d9f3      	bls.n	8006b22 <_printf_i+0xf6>
 8006b3a:	2f08      	cmp	r7, #8
 8006b3c:	d109      	bne.n	8006b52 <_printf_i+0x126>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	07db      	lsls	r3, r3, #31
 8006b42:	d506      	bpl.n	8006b52 <_printf_i+0x126>
 8006b44:	6862      	ldr	r2, [r4, #4]
 8006b46:	6923      	ldr	r3, [r4, #16]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	dc02      	bgt.n	8006b52 <_printf_i+0x126>
 8006b4c:	2330      	movs	r3, #48	; 0x30
 8006b4e:	3e01      	subs	r6, #1
 8006b50:	7033      	strb	r3, [r6, #0]
 8006b52:	9b04      	ldr	r3, [sp, #16]
 8006b54:	1b9b      	subs	r3, r3, r6
 8006b56:	6123      	str	r3, [r4, #16]
 8006b58:	9b07      	ldr	r3, [sp, #28]
 8006b5a:	0021      	movs	r1, r4
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	9805      	ldr	r0, [sp, #20]
 8006b60:	9b06      	ldr	r3, [sp, #24]
 8006b62:	aa09      	add	r2, sp, #36	; 0x24
 8006b64:	f7ff fef2 	bl	800694c <_printf_common>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d147      	bne.n	8006bfc <_printf_i+0x1d0>
 8006b6c:	2001      	movs	r0, #1
 8006b6e:	4240      	negs	r0, r0
 8006b70:	b00b      	add	sp, #44	; 0x2c
 8006b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b74:	2220      	movs	r2, #32
 8006b76:	6809      	ldr	r1, [r1, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	6022      	str	r2, [r4, #0]
 8006b7c:	2278      	movs	r2, #120	; 0x78
 8006b7e:	4932      	ldr	r1, [pc, #200]	; (8006c48 <_printf_i+0x21c>)
 8006b80:	9103      	str	r1, [sp, #12]
 8006b82:	0021      	movs	r1, r4
 8006b84:	3145      	adds	r1, #69	; 0x45
 8006b86:	700a      	strb	r2, [r1, #0]
 8006b88:	6819      	ldr	r1, [r3, #0]
 8006b8a:	6822      	ldr	r2, [r4, #0]
 8006b8c:	c920      	ldmia	r1!, {r5}
 8006b8e:	0610      	lsls	r0, r2, #24
 8006b90:	d402      	bmi.n	8006b98 <_printf_i+0x16c>
 8006b92:	0650      	lsls	r0, r2, #25
 8006b94:	d500      	bpl.n	8006b98 <_printf_i+0x16c>
 8006b96:	b2ad      	uxth	r5, r5
 8006b98:	6019      	str	r1, [r3, #0]
 8006b9a:	07d3      	lsls	r3, r2, #31
 8006b9c:	d502      	bpl.n	8006ba4 <_printf_i+0x178>
 8006b9e:	2320      	movs	r3, #32
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	2710      	movs	r7, #16
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	d1a9      	bne.n	8006afe <_printf_i+0xd2>
 8006baa:	2220      	movs	r2, #32
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	4393      	bics	r3, r2
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	e7a4      	b.n	8006afe <_printf_i+0xd2>
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	680d      	ldr	r5, [r1, #0]
 8006bb8:	1d10      	adds	r0, r2, #4
 8006bba:	6949      	ldr	r1, [r1, #20]
 8006bbc:	6018      	str	r0, [r3, #0]
 8006bbe:	6813      	ldr	r3, [r2, #0]
 8006bc0:	062e      	lsls	r6, r5, #24
 8006bc2:	d501      	bpl.n	8006bc8 <_printf_i+0x19c>
 8006bc4:	6019      	str	r1, [r3, #0]
 8006bc6:	e002      	b.n	8006bce <_printf_i+0x1a2>
 8006bc8:	066d      	lsls	r5, r5, #25
 8006bca:	d5fb      	bpl.n	8006bc4 <_printf_i+0x198>
 8006bcc:	8019      	strh	r1, [r3, #0]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	9e04      	ldr	r6, [sp, #16]
 8006bd2:	6123      	str	r3, [r4, #16]
 8006bd4:	e7c0      	b.n	8006b58 <_printf_i+0x12c>
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	1d11      	adds	r1, r2, #4
 8006bda:	6019      	str	r1, [r3, #0]
 8006bdc:	6816      	ldr	r6, [r2, #0]
 8006bde:	2100      	movs	r1, #0
 8006be0:	0030      	movs	r0, r6
 8006be2:	6862      	ldr	r2, [r4, #4]
 8006be4:	f000 fbf1 	bl	80073ca <memchr>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d001      	beq.n	8006bf0 <_printf_i+0x1c4>
 8006bec:	1b80      	subs	r0, r0, r6
 8006bee:	6060      	str	r0, [r4, #4]
 8006bf0:	6863      	ldr	r3, [r4, #4]
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9a04      	ldr	r2, [sp, #16]
 8006bf8:	7013      	strb	r3, [r2, #0]
 8006bfa:	e7ad      	b.n	8006b58 <_printf_i+0x12c>
 8006bfc:	0032      	movs	r2, r6
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	9906      	ldr	r1, [sp, #24]
 8006c02:	9805      	ldr	r0, [sp, #20]
 8006c04:	9d07      	ldr	r5, [sp, #28]
 8006c06:	47a8      	blx	r5
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d0af      	beq.n	8006b6c <_printf_i+0x140>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	079b      	lsls	r3, r3, #30
 8006c10:	d415      	bmi.n	8006c3e <_printf_i+0x212>
 8006c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c14:	68e0      	ldr	r0, [r4, #12]
 8006c16:	4298      	cmp	r0, r3
 8006c18:	daaa      	bge.n	8006b70 <_printf_i+0x144>
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	e7a8      	b.n	8006b70 <_printf_i+0x144>
 8006c1e:	0022      	movs	r2, r4
 8006c20:	2301      	movs	r3, #1
 8006c22:	9906      	ldr	r1, [sp, #24]
 8006c24:	9805      	ldr	r0, [sp, #20]
 8006c26:	9e07      	ldr	r6, [sp, #28]
 8006c28:	3219      	adds	r2, #25
 8006c2a:	47b0      	blx	r6
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d09d      	beq.n	8006b6c <_printf_i+0x140>
 8006c30:	3501      	adds	r5, #1
 8006c32:	68e3      	ldr	r3, [r4, #12]
 8006c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c36:	1a9b      	subs	r3, r3, r2
 8006c38:	42ab      	cmp	r3, r5
 8006c3a:	dcf0      	bgt.n	8006c1e <_printf_i+0x1f2>
 8006c3c:	e7e9      	b.n	8006c12 <_printf_i+0x1e6>
 8006c3e:	2500      	movs	r5, #0
 8006c40:	e7f7      	b.n	8006c32 <_printf_i+0x206>
 8006c42:	46c0      	nop			; (mov r8, r8)
 8006c44:	0800adf2 	.word	0x0800adf2
 8006c48:	0800ae03 	.word	0x0800ae03

08006c4c <_scanf_float>:
 8006c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4e:	b08b      	sub	sp, #44	; 0x2c
 8006c50:	0016      	movs	r6, r2
 8006c52:	9002      	str	r0, [sp, #8]
 8006c54:	22ae      	movs	r2, #174	; 0xae
 8006c56:	2000      	movs	r0, #0
 8006c58:	9307      	str	r3, [sp, #28]
 8006c5a:	688b      	ldr	r3, [r1, #8]
 8006c5c:	000f      	movs	r7, r1
 8006c5e:	1e59      	subs	r1, r3, #1
 8006c60:	0052      	lsls	r2, r2, #1
 8006c62:	9006      	str	r0, [sp, #24]
 8006c64:	4291      	cmp	r1, r2
 8006c66:	d905      	bls.n	8006c74 <_scanf_float+0x28>
 8006c68:	3b5e      	subs	r3, #94	; 0x5e
 8006c6a:	3bff      	subs	r3, #255	; 0xff
 8006c6c:	9306      	str	r3, [sp, #24]
 8006c6e:	235e      	movs	r3, #94	; 0x5e
 8006c70:	33ff      	adds	r3, #255	; 0xff
 8006c72:	60bb      	str	r3, [r7, #8]
 8006c74:	23f0      	movs	r3, #240	; 0xf0
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	003b      	movs	r3, r7
 8006c80:	2400      	movs	r4, #0
 8006c82:	331c      	adds	r3, #28
 8006c84:	001d      	movs	r5, r3
 8006c86:	9304      	str	r3, [sp, #16]
 8006c88:	9403      	str	r4, [sp, #12]
 8006c8a:	9409      	str	r4, [sp, #36]	; 0x24
 8006c8c:	9408      	str	r4, [sp, #32]
 8006c8e:	9401      	str	r4, [sp, #4]
 8006c90:	9405      	str	r4, [sp, #20]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	d00a      	beq.n	8006cae <_scanf_float+0x62>
 8006c98:	6833      	ldr	r3, [r6, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b4e      	cmp	r3, #78	; 0x4e
 8006c9e:	d844      	bhi.n	8006d2a <_scanf_float+0xde>
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	d82c      	bhi.n	8006d00 <_scanf_float+0xb4>
 8006ca6:	382b      	subs	r0, #43	; 0x2b
 8006ca8:	b2c1      	uxtb	r1, r0
 8006caa:	290e      	cmp	r1, #14
 8006cac:	d92a      	bls.n	8006d04 <_scanf_float+0xb8>
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <_scanf_float+0x70>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	4aa3      	ldr	r2, [pc, #652]	; (8006f44 <_scanf_float+0x2f8>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d900      	bls.n	8006cc6 <_scanf_float+0x7a>
 8006cc4:	e0f9      	b.n	8006eba <_scanf_float+0x26e>
 8006cc6:	24be      	movs	r4, #190	; 0xbe
 8006cc8:	0064      	lsls	r4, r4, #1
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	429d      	cmp	r5, r3
 8006cce:	d900      	bls.n	8006cd2 <_scanf_float+0x86>
 8006cd0:	e0e9      	b.n	8006ea6 <_scanf_float+0x25a>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	9303      	str	r3, [sp, #12]
 8006cd6:	e183      	b.n	8006fe0 <_scanf_float+0x394>
 8006cd8:	0018      	movs	r0, r3
 8006cda:	3861      	subs	r0, #97	; 0x61
 8006cdc:	280d      	cmp	r0, #13
 8006cde:	d8e6      	bhi.n	8006cae <_scanf_float+0x62>
 8006ce0:	f7f9 fa24 	bl	800012c <__gnu_thumb1_case_shi>
 8006ce4:	ffe50083 	.word	0xffe50083
 8006ce8:	ffe5ffe5 	.word	0xffe5ffe5
 8006cec:	00a200b6 	.word	0x00a200b6
 8006cf0:	ffe5ffe5 	.word	0xffe5ffe5
 8006cf4:	ffe50089 	.word	0xffe50089
 8006cf8:	ffe5ffe5 	.word	0xffe5ffe5
 8006cfc:	0065ffe5 	.word	0x0065ffe5
 8006d00:	3841      	subs	r0, #65	; 0x41
 8006d02:	e7eb      	b.n	8006cdc <_scanf_float+0x90>
 8006d04:	280e      	cmp	r0, #14
 8006d06:	d8d2      	bhi.n	8006cae <_scanf_float+0x62>
 8006d08:	f7f9 fa10 	bl	800012c <__gnu_thumb1_case_shi>
 8006d0c:	ffd1004b 	.word	0xffd1004b
 8006d10:	0098004b 	.word	0x0098004b
 8006d14:	0020ffd1 	.word	0x0020ffd1
 8006d18:	00400040 	.word	0x00400040
 8006d1c:	00400040 	.word	0x00400040
 8006d20:	00400040 	.word	0x00400040
 8006d24:	00400040 	.word	0x00400040
 8006d28:	0040      	.short	0x0040
 8006d2a:	2b6e      	cmp	r3, #110	; 0x6e
 8006d2c:	d809      	bhi.n	8006d42 <_scanf_float+0xf6>
 8006d2e:	2b60      	cmp	r3, #96	; 0x60
 8006d30:	d8d2      	bhi.n	8006cd8 <_scanf_float+0x8c>
 8006d32:	2b54      	cmp	r3, #84	; 0x54
 8006d34:	d07d      	beq.n	8006e32 <_scanf_float+0x1e6>
 8006d36:	2b59      	cmp	r3, #89	; 0x59
 8006d38:	d1b9      	bne.n	8006cae <_scanf_float+0x62>
 8006d3a:	2c07      	cmp	r4, #7
 8006d3c:	d1b7      	bne.n	8006cae <_scanf_float+0x62>
 8006d3e:	2408      	movs	r4, #8
 8006d40:	e02c      	b.n	8006d9c <_scanf_float+0x150>
 8006d42:	2b74      	cmp	r3, #116	; 0x74
 8006d44:	d075      	beq.n	8006e32 <_scanf_float+0x1e6>
 8006d46:	2b79      	cmp	r3, #121	; 0x79
 8006d48:	d0f7      	beq.n	8006d3a <_scanf_float+0xee>
 8006d4a:	e7b0      	b.n	8006cae <_scanf_float+0x62>
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	05c8      	lsls	r0, r1, #23
 8006d50:	d51c      	bpl.n	8006d8c <_scanf_float+0x140>
 8006d52:	2380      	movs	r3, #128	; 0x80
 8006d54:	4399      	bics	r1, r3
 8006d56:	9b01      	ldr	r3, [sp, #4]
 8006d58:	6039      	str	r1, [r7, #0]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	9b06      	ldr	r3, [sp, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <_scanf_float+0x120>
 8006d64:	3b01      	subs	r3, #1
 8006d66:	3201      	adds	r2, #1
 8006d68:	9306      	str	r3, [sp, #24]
 8006d6a:	60ba      	str	r2, [r7, #8]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	60bb      	str	r3, [r7, #8]
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	3301      	adds	r3, #1
 8006d76:	613b      	str	r3, [r7, #16]
 8006d78:	6873      	ldr	r3, [r6, #4]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	6073      	str	r3, [r6, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dc00      	bgt.n	8006d84 <_scanf_float+0x138>
 8006d82:	e086      	b.n	8006e92 <_scanf_float+0x246>
 8006d84:	6833      	ldr	r3, [r6, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	6033      	str	r3, [r6, #0]
 8006d8a:	e782      	b.n	8006c92 <_scanf_float+0x46>
 8006d8c:	9a03      	ldr	r2, [sp, #12]
 8006d8e:	1912      	adds	r2, r2, r4
 8006d90:	2a00      	cmp	r2, #0
 8006d92:	d18c      	bne.n	8006cae <_scanf_float+0x62>
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	496c      	ldr	r1, [pc, #432]	; (8006f48 <_scanf_float+0x2fc>)
 8006d98:	400a      	ands	r2, r1
 8006d9a:	603a      	str	r2, [r7, #0]
 8006d9c:	702b      	strb	r3, [r5, #0]
 8006d9e:	3501      	adds	r5, #1
 8006da0:	e7e4      	b.n	8006d6c <_scanf_float+0x120>
 8006da2:	2180      	movs	r1, #128	; 0x80
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	420a      	tst	r2, r1
 8006da8:	d081      	beq.n	8006cae <_scanf_float+0x62>
 8006daa:	438a      	bics	r2, r1
 8006dac:	e7f5      	b.n	8006d9a <_scanf_float+0x14e>
 8006dae:	9a03      	ldr	r2, [sp, #12]
 8006db0:	2a00      	cmp	r2, #0
 8006db2:	d10f      	bne.n	8006dd4 <_scanf_float+0x188>
 8006db4:	9a01      	ldr	r2, [sp, #4]
 8006db6:	2a00      	cmp	r2, #0
 8006db8:	d10f      	bne.n	8006dda <_scanf_float+0x18e>
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	21e0      	movs	r1, #224	; 0xe0
 8006dbe:	0010      	movs	r0, r2
 8006dc0:	00c9      	lsls	r1, r1, #3
 8006dc2:	4008      	ands	r0, r1
 8006dc4:	4288      	cmp	r0, r1
 8006dc6:	d108      	bne.n	8006dda <_scanf_float+0x18e>
 8006dc8:	4960      	ldr	r1, [pc, #384]	; (8006f4c <_scanf_float+0x300>)
 8006dca:	400a      	ands	r2, r1
 8006dcc:	603a      	str	r2, [r7, #0]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	9203      	str	r2, [sp, #12]
 8006dd2:	e7e3      	b.n	8006d9c <_scanf_float+0x150>
 8006dd4:	9a03      	ldr	r2, [sp, #12]
 8006dd6:	2a02      	cmp	r2, #2
 8006dd8:	d059      	beq.n	8006e8e <_scanf_float+0x242>
 8006dda:	2c01      	cmp	r4, #1
 8006ddc:	d002      	beq.n	8006de4 <_scanf_float+0x198>
 8006dde:	2c04      	cmp	r4, #4
 8006de0:	d000      	beq.n	8006de4 <_scanf_float+0x198>
 8006de2:	e764      	b.n	8006cae <_scanf_float+0x62>
 8006de4:	3401      	adds	r4, #1
 8006de6:	b2e4      	uxtb	r4, r4
 8006de8:	e7d8      	b.n	8006d9c <_scanf_float+0x150>
 8006dea:	9a03      	ldr	r2, [sp, #12]
 8006dec:	2a01      	cmp	r2, #1
 8006dee:	d000      	beq.n	8006df2 <_scanf_float+0x1a6>
 8006df0:	e75d      	b.n	8006cae <_scanf_float+0x62>
 8006df2:	2202      	movs	r2, #2
 8006df4:	e7ec      	b.n	8006dd0 <_scanf_float+0x184>
 8006df6:	2c00      	cmp	r4, #0
 8006df8:	d110      	bne.n	8006e1c <_scanf_float+0x1d0>
 8006dfa:	9a01      	ldr	r2, [sp, #4]
 8006dfc:	2a00      	cmp	r2, #0
 8006dfe:	d000      	beq.n	8006e02 <_scanf_float+0x1b6>
 8006e00:	e758      	b.n	8006cb4 <_scanf_float+0x68>
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	21e0      	movs	r1, #224	; 0xe0
 8006e06:	0010      	movs	r0, r2
 8006e08:	00c9      	lsls	r1, r1, #3
 8006e0a:	4008      	ands	r0, r1
 8006e0c:	4288      	cmp	r0, r1
 8006e0e:	d000      	beq.n	8006e12 <_scanf_float+0x1c6>
 8006e10:	e754      	b.n	8006cbc <_scanf_float+0x70>
 8006e12:	494e      	ldr	r1, [pc, #312]	; (8006f4c <_scanf_float+0x300>)
 8006e14:	3401      	adds	r4, #1
 8006e16:	400a      	ands	r2, r1
 8006e18:	603a      	str	r2, [r7, #0]
 8006e1a:	e7bf      	b.n	8006d9c <_scanf_float+0x150>
 8006e1c:	21fd      	movs	r1, #253	; 0xfd
 8006e1e:	1ee2      	subs	r2, r4, #3
 8006e20:	420a      	tst	r2, r1
 8006e22:	d000      	beq.n	8006e26 <_scanf_float+0x1da>
 8006e24:	e743      	b.n	8006cae <_scanf_float+0x62>
 8006e26:	e7dd      	b.n	8006de4 <_scanf_float+0x198>
 8006e28:	2c02      	cmp	r4, #2
 8006e2a:	d000      	beq.n	8006e2e <_scanf_float+0x1e2>
 8006e2c:	e73f      	b.n	8006cae <_scanf_float+0x62>
 8006e2e:	2403      	movs	r4, #3
 8006e30:	e7b4      	b.n	8006d9c <_scanf_float+0x150>
 8006e32:	2c06      	cmp	r4, #6
 8006e34:	d000      	beq.n	8006e38 <_scanf_float+0x1ec>
 8006e36:	e73a      	b.n	8006cae <_scanf_float+0x62>
 8006e38:	2407      	movs	r4, #7
 8006e3a:	e7af      	b.n	8006d9c <_scanf_float+0x150>
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	0591      	lsls	r1, r2, #22
 8006e40:	d400      	bmi.n	8006e44 <_scanf_float+0x1f8>
 8006e42:	e734      	b.n	8006cae <_scanf_float+0x62>
 8006e44:	4942      	ldr	r1, [pc, #264]	; (8006f50 <_scanf_float+0x304>)
 8006e46:	400a      	ands	r2, r1
 8006e48:	603a      	str	r2, [r7, #0]
 8006e4a:	9a01      	ldr	r2, [sp, #4]
 8006e4c:	9205      	str	r2, [sp, #20]
 8006e4e:	e7a5      	b.n	8006d9c <_scanf_float+0x150>
 8006e50:	21a0      	movs	r1, #160	; 0xa0
 8006e52:	2080      	movs	r0, #128	; 0x80
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	00c9      	lsls	r1, r1, #3
 8006e58:	4011      	ands	r1, r2
 8006e5a:	00c0      	lsls	r0, r0, #3
 8006e5c:	4281      	cmp	r1, r0
 8006e5e:	d006      	beq.n	8006e6e <_scanf_float+0x222>
 8006e60:	4202      	tst	r2, r0
 8006e62:	d100      	bne.n	8006e66 <_scanf_float+0x21a>
 8006e64:	e723      	b.n	8006cae <_scanf_float+0x62>
 8006e66:	9901      	ldr	r1, [sp, #4]
 8006e68:	2900      	cmp	r1, #0
 8006e6a:	d100      	bne.n	8006e6e <_scanf_float+0x222>
 8006e6c:	e726      	b.n	8006cbc <_scanf_float+0x70>
 8006e6e:	0591      	lsls	r1, r2, #22
 8006e70:	d404      	bmi.n	8006e7c <_scanf_float+0x230>
 8006e72:	9901      	ldr	r1, [sp, #4]
 8006e74:	9805      	ldr	r0, [sp, #20]
 8006e76:	9509      	str	r5, [sp, #36]	; 0x24
 8006e78:	1a09      	subs	r1, r1, r0
 8006e7a:	9108      	str	r1, [sp, #32]
 8006e7c:	4933      	ldr	r1, [pc, #204]	; (8006f4c <_scanf_float+0x300>)
 8006e7e:	400a      	ands	r2, r1
 8006e80:	21c0      	movs	r1, #192	; 0xc0
 8006e82:	0049      	lsls	r1, r1, #1
 8006e84:	430a      	orrs	r2, r1
 8006e86:	603a      	str	r2, [r7, #0]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	9201      	str	r2, [sp, #4]
 8006e8c:	e786      	b.n	8006d9c <_scanf_float+0x150>
 8006e8e:	2203      	movs	r2, #3
 8006e90:	e79e      	b.n	8006dd0 <_scanf_float+0x184>
 8006e92:	23c0      	movs	r3, #192	; 0xc0
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	0031      	movs	r1, r6
 8006e98:	58fb      	ldr	r3, [r7, r3]
 8006e9a:	9802      	ldr	r0, [sp, #8]
 8006e9c:	4798      	blx	r3
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d100      	bne.n	8006ea4 <_scanf_float+0x258>
 8006ea2:	e6f6      	b.n	8006c92 <_scanf_float+0x46>
 8006ea4:	e703      	b.n	8006cae <_scanf_float+0x62>
 8006ea6:	3d01      	subs	r5, #1
 8006ea8:	593b      	ldr	r3, [r7, r4]
 8006eaa:	0032      	movs	r2, r6
 8006eac:	7829      	ldrb	r1, [r5, #0]
 8006eae:	9802      	ldr	r0, [sp, #8]
 8006eb0:	4798      	blx	r3
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	e707      	b.n	8006cca <_scanf_float+0x7e>
 8006eba:	1e63      	subs	r3, r4, #1
 8006ebc:	2b06      	cmp	r3, #6
 8006ebe:	d80e      	bhi.n	8006ede <_scanf_float+0x292>
 8006ec0:	9503      	str	r5, [sp, #12]
 8006ec2:	2c02      	cmp	r4, #2
 8006ec4:	d920      	bls.n	8006f08 <_scanf_float+0x2bc>
 8006ec6:	1b63      	subs	r3, r4, r5
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	9306      	str	r3, [sp, #24]
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	9a06      	ldr	r2, [sp, #24]
 8006ed0:	189b      	adds	r3, r3, r2
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d827      	bhi.n	8006f28 <_scanf_float+0x2dc>
 8006ed8:	3c03      	subs	r4, #3
 8006eda:	b2e4      	uxtb	r4, r4
 8006edc:	1b2d      	subs	r5, r5, r4
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	05da      	lsls	r2, r3, #23
 8006ee2:	d552      	bpl.n	8006f8a <_scanf_float+0x33e>
 8006ee4:	055b      	lsls	r3, r3, #21
 8006ee6:	d535      	bpl.n	8006f54 <_scanf_float+0x308>
 8006ee8:	24be      	movs	r4, #190	; 0xbe
 8006eea:	0064      	lsls	r4, r4, #1
 8006eec:	9b04      	ldr	r3, [sp, #16]
 8006eee:	429d      	cmp	r5, r3
 8006ef0:	d800      	bhi.n	8006ef4 <_scanf_float+0x2a8>
 8006ef2:	e6ee      	b.n	8006cd2 <_scanf_float+0x86>
 8006ef4:	3d01      	subs	r5, #1
 8006ef6:	593b      	ldr	r3, [r7, r4]
 8006ef8:	0032      	movs	r2, r6
 8006efa:	7829      	ldrb	r1, [r5, #0]
 8006efc:	9802      	ldr	r0, [sp, #8]
 8006efe:	4798      	blx	r3
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	e7f1      	b.n	8006eec <_scanf_float+0x2a0>
 8006f08:	24be      	movs	r4, #190	; 0xbe
 8006f0a:	0064      	lsls	r4, r4, #1
 8006f0c:	9b04      	ldr	r3, [sp, #16]
 8006f0e:	429d      	cmp	r5, r3
 8006f10:	d800      	bhi.n	8006f14 <_scanf_float+0x2c8>
 8006f12:	e6de      	b.n	8006cd2 <_scanf_float+0x86>
 8006f14:	3d01      	subs	r5, #1
 8006f16:	593b      	ldr	r3, [r7, r4]
 8006f18:	0032      	movs	r2, r6
 8006f1a:	7829      	ldrb	r1, [r5, #0]
 8006f1c:	9802      	ldr	r0, [sp, #8]
 8006f1e:	4798      	blx	r3
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	e7f1      	b.n	8006f0c <_scanf_float+0x2c0>
 8006f28:	9b03      	ldr	r3, [sp, #12]
 8006f2a:	0032      	movs	r2, r6
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	7819      	ldrb	r1, [r3, #0]
 8006f30:	9303      	str	r3, [sp, #12]
 8006f32:	23be      	movs	r3, #190	; 0xbe
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	58fb      	ldr	r3, [r7, r3]
 8006f38:	9802      	ldr	r0, [sp, #8]
 8006f3a:	4798      	blx	r3
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	e7c3      	b.n	8006ecc <_scanf_float+0x280>
 8006f44:	fffffeff 	.word	0xfffffeff
 8006f48:	fffffe7f 	.word	0xfffffe7f
 8006f4c:	fffff87f 	.word	0xfffff87f
 8006f50:	fffffd7f 	.word	0xfffffd7f
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1e6c      	subs	r4, r5, #1
 8006f58:	7821      	ldrb	r1, [r4, #0]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	613b      	str	r3, [r7, #16]
 8006f5e:	2965      	cmp	r1, #101	; 0x65
 8006f60:	d00c      	beq.n	8006f7c <_scanf_float+0x330>
 8006f62:	2945      	cmp	r1, #69	; 0x45
 8006f64:	d00a      	beq.n	8006f7c <_scanf_float+0x330>
 8006f66:	23be      	movs	r3, #190	; 0xbe
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	58fb      	ldr	r3, [r7, r3]
 8006f6c:	0032      	movs	r2, r6
 8006f6e:	9802      	ldr	r0, [sp, #8]
 8006f70:	4798      	blx	r3
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1eac      	subs	r4, r5, #2
 8006f76:	3b01      	subs	r3, #1
 8006f78:	7821      	ldrb	r1, [r4, #0]
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	23be      	movs	r3, #190	; 0xbe
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	0032      	movs	r2, r6
 8006f82:	58fb      	ldr	r3, [r7, r3]
 8006f84:	9802      	ldr	r0, [sp, #8]
 8006f86:	4798      	blx	r3
 8006f88:	0025      	movs	r5, r4
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	0011      	movs	r1, r2
 8006f90:	4019      	ands	r1, r3
 8006f92:	9103      	str	r1, [sp, #12]
 8006f94:	421a      	tst	r2, r3
 8006f96:	d15b      	bne.n	8007050 <_scanf_float+0x404>
 8006f98:	22c0      	movs	r2, #192	; 0xc0
 8006f9a:	7029      	strb	r1, [r5, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	00d2      	lsls	r2, r2, #3
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2280      	movs	r2, #128	; 0x80
 8006fa4:	00d2      	lsls	r2, r2, #3
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d11d      	bne.n	8006fe6 <_scanf_float+0x39a>
 8006faa:	9b05      	ldr	r3, [sp, #20]
 8006fac:	9a01      	ldr	r2, [sp, #4]
 8006fae:	9901      	ldr	r1, [sp, #4]
 8006fb0:	1a9a      	subs	r2, r3, r2
 8006fb2:	428b      	cmp	r3, r1
 8006fb4:	d124      	bne.n	8007000 <_scanf_float+0x3b4>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	9904      	ldr	r1, [sp, #16]
 8006fba:	9802      	ldr	r0, [sp, #8]
 8006fbc:	f002 fc98 	bl	80098f0 <_strtod_r>
 8006fc0:	9b07      	ldr	r3, [sp, #28]
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	0004      	movs	r4, r0
 8006fc6:	000d      	movs	r5, r1
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	0791      	lsls	r1, r2, #30
 8006fcc:	d525      	bpl.n	800701a <_scanf_float+0x3ce>
 8006fce:	9907      	ldr	r1, [sp, #28]
 8006fd0:	1d1a      	adds	r2, r3, #4
 8006fd2:	600a      	str	r2, [r1, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	601c      	str	r4, [r3, #0]
 8006fd8:	605d      	str	r5, [r3, #4]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	9803      	ldr	r0, [sp, #12]
 8006fe2:	b00b      	add	sp, #44	; 0x2c
 8006fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe6:	9b08      	ldr	r3, [sp, #32]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0e4      	beq.n	8006fb6 <_scanf_float+0x36a>
 8006fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fee:	9a03      	ldr	r2, [sp, #12]
 8006ff0:	1c59      	adds	r1, r3, #1
 8006ff2:	9802      	ldr	r0, [sp, #8]
 8006ff4:	230a      	movs	r3, #10
 8006ff6:	f002 fd09 	bl	8009a0c <_strtol_r>
 8006ffa:	9b08      	ldr	r3, [sp, #32]
 8006ffc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ffe:	1ac2      	subs	r2, r0, r3
 8007000:	003b      	movs	r3, r7
 8007002:	3370      	adds	r3, #112	; 0x70
 8007004:	33ff      	adds	r3, #255	; 0xff
 8007006:	429d      	cmp	r5, r3
 8007008:	d302      	bcc.n	8007010 <_scanf_float+0x3c4>
 800700a:	003d      	movs	r5, r7
 800700c:	356f      	adds	r5, #111	; 0x6f
 800700e:	35ff      	adds	r5, #255	; 0xff
 8007010:	0028      	movs	r0, r5
 8007012:	4910      	ldr	r1, [pc, #64]	; (8007054 <_scanf_float+0x408>)
 8007014:	f000 f8e6 	bl	80071e4 <siprintf>
 8007018:	e7cd      	b.n	8006fb6 <_scanf_float+0x36a>
 800701a:	1d19      	adds	r1, r3, #4
 800701c:	0752      	lsls	r2, r2, #29
 800701e:	d502      	bpl.n	8007026 <_scanf_float+0x3da>
 8007020:	9a07      	ldr	r2, [sp, #28]
 8007022:	6011      	str	r1, [r2, #0]
 8007024:	e7d6      	b.n	8006fd4 <_scanf_float+0x388>
 8007026:	9a07      	ldr	r2, [sp, #28]
 8007028:	0020      	movs	r0, r4
 800702a:	6011      	str	r1, [r2, #0]
 800702c:	681e      	ldr	r6, [r3, #0]
 800702e:	0022      	movs	r2, r4
 8007030:	002b      	movs	r3, r5
 8007032:	0029      	movs	r1, r5
 8007034:	f7fb fc62 	bl	80028fc <__aeabi_dcmpun>
 8007038:	2800      	cmp	r0, #0
 800703a:	d004      	beq.n	8007046 <_scanf_float+0x3fa>
 800703c:	4806      	ldr	r0, [pc, #24]	; (8007058 <_scanf_float+0x40c>)
 800703e:	f000 f9cf 	bl	80073e0 <nanf>
 8007042:	6030      	str	r0, [r6, #0]
 8007044:	e7c9      	b.n	8006fda <_scanf_float+0x38e>
 8007046:	0020      	movs	r0, r4
 8007048:	0029      	movs	r1, r5
 800704a:	f7fb fd49 	bl	8002ae0 <__aeabi_d2f>
 800704e:	e7f8      	b.n	8007042 <_scanf_float+0x3f6>
 8007050:	2300      	movs	r3, #0
 8007052:	e63f      	b.n	8006cd4 <_scanf_float+0x88>
 8007054:	0800ae14 	.word	0x0800ae14
 8007058:	0800b1a5 	.word	0x0800b1a5

0800705c <std>:
 800705c:	2300      	movs	r3, #0
 800705e:	b510      	push	{r4, lr}
 8007060:	0004      	movs	r4, r0
 8007062:	6003      	str	r3, [r0, #0]
 8007064:	6043      	str	r3, [r0, #4]
 8007066:	6083      	str	r3, [r0, #8]
 8007068:	8181      	strh	r1, [r0, #12]
 800706a:	6643      	str	r3, [r0, #100]	; 0x64
 800706c:	81c2      	strh	r2, [r0, #14]
 800706e:	6103      	str	r3, [r0, #16]
 8007070:	6143      	str	r3, [r0, #20]
 8007072:	6183      	str	r3, [r0, #24]
 8007074:	0019      	movs	r1, r3
 8007076:	2208      	movs	r2, #8
 8007078:	305c      	adds	r0, #92	; 0x5c
 800707a:	f000 f91f 	bl	80072bc <memset>
 800707e:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <std+0x50>)
 8007080:	6224      	str	r4, [r4, #32]
 8007082:	6263      	str	r3, [r4, #36]	; 0x24
 8007084:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <std+0x54>)
 8007086:	62a3      	str	r3, [r4, #40]	; 0x28
 8007088:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <std+0x58>)
 800708a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <std+0x5c>)
 800708e:	6323      	str	r3, [r4, #48]	; 0x30
 8007090:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <std+0x60>)
 8007092:	429c      	cmp	r4, r3
 8007094:	d005      	beq.n	80070a2 <std+0x46>
 8007096:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <std+0x64>)
 8007098:	429c      	cmp	r4, r3
 800709a:	d002      	beq.n	80070a2 <std+0x46>
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <std+0x68>)
 800709e:	429c      	cmp	r4, r3
 80070a0:	d103      	bne.n	80070aa <std+0x4e>
 80070a2:	0020      	movs	r0, r4
 80070a4:	3058      	adds	r0, #88	; 0x58
 80070a6:	f000 f98d 	bl	80073c4 <__retarget_lock_init_recursive>
 80070aa:	bd10      	pop	{r4, pc}
 80070ac:	08007225 	.word	0x08007225
 80070b0:	0800724d 	.word	0x0800724d
 80070b4:	08007285 	.word	0x08007285
 80070b8:	080072b1 	.word	0x080072b1
 80070bc:	2000030c 	.word	0x2000030c
 80070c0:	20000374 	.word	0x20000374
 80070c4:	200003dc 	.word	0x200003dc

080070c8 <stdio_exit_handler>:
 80070c8:	b510      	push	{r4, lr}
 80070ca:	4a03      	ldr	r2, [pc, #12]	; (80070d8 <stdio_exit_handler+0x10>)
 80070cc:	4903      	ldr	r1, [pc, #12]	; (80070dc <stdio_exit_handler+0x14>)
 80070ce:	4804      	ldr	r0, [pc, #16]	; (80070e0 <stdio_exit_handler+0x18>)
 80070d0:	f000 f86c 	bl	80071ac <_fwalk_sglue>
 80070d4:	bd10      	pop	{r4, pc}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	2000000c 	.word	0x2000000c
 80070dc:	08009ded 	.word	0x08009ded
 80070e0:	20000018 	.word	0x20000018

080070e4 <cleanup_stdio>:
 80070e4:	6841      	ldr	r1, [r0, #4]
 80070e6:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <cleanup_stdio+0x30>)
 80070e8:	b510      	push	{r4, lr}
 80070ea:	0004      	movs	r4, r0
 80070ec:	4299      	cmp	r1, r3
 80070ee:	d001      	beq.n	80070f4 <cleanup_stdio+0x10>
 80070f0:	f002 fe7c 	bl	8009dec <_fflush_r>
 80070f4:	68a1      	ldr	r1, [r4, #8]
 80070f6:	4b08      	ldr	r3, [pc, #32]	; (8007118 <cleanup_stdio+0x34>)
 80070f8:	4299      	cmp	r1, r3
 80070fa:	d002      	beq.n	8007102 <cleanup_stdio+0x1e>
 80070fc:	0020      	movs	r0, r4
 80070fe:	f002 fe75 	bl	8009dec <_fflush_r>
 8007102:	68e1      	ldr	r1, [r4, #12]
 8007104:	4b05      	ldr	r3, [pc, #20]	; (800711c <cleanup_stdio+0x38>)
 8007106:	4299      	cmp	r1, r3
 8007108:	d002      	beq.n	8007110 <cleanup_stdio+0x2c>
 800710a:	0020      	movs	r0, r4
 800710c:	f002 fe6e 	bl	8009dec <_fflush_r>
 8007110:	bd10      	pop	{r4, pc}
 8007112:	46c0      	nop			; (mov r8, r8)
 8007114:	2000030c 	.word	0x2000030c
 8007118:	20000374 	.word	0x20000374
 800711c:	200003dc 	.word	0x200003dc

08007120 <global_stdio_init.part.0>:
 8007120:	b510      	push	{r4, lr}
 8007122:	4b09      	ldr	r3, [pc, #36]	; (8007148 <global_stdio_init.part.0+0x28>)
 8007124:	4a09      	ldr	r2, [pc, #36]	; (800714c <global_stdio_init.part.0+0x2c>)
 8007126:	2104      	movs	r1, #4
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	4809      	ldr	r0, [pc, #36]	; (8007150 <global_stdio_init.part.0+0x30>)
 800712c:	2200      	movs	r2, #0
 800712e:	f7ff ff95 	bl	800705c <std>
 8007132:	2201      	movs	r2, #1
 8007134:	2109      	movs	r1, #9
 8007136:	4807      	ldr	r0, [pc, #28]	; (8007154 <global_stdio_init.part.0+0x34>)
 8007138:	f7ff ff90 	bl	800705c <std>
 800713c:	2202      	movs	r2, #2
 800713e:	2112      	movs	r1, #18
 8007140:	4805      	ldr	r0, [pc, #20]	; (8007158 <global_stdio_init.part.0+0x38>)
 8007142:	f7ff ff8b 	bl	800705c <std>
 8007146:	bd10      	pop	{r4, pc}
 8007148:	20000444 	.word	0x20000444
 800714c:	080070c9 	.word	0x080070c9
 8007150:	2000030c 	.word	0x2000030c
 8007154:	20000374 	.word	0x20000374
 8007158:	200003dc 	.word	0x200003dc

0800715c <__sfp_lock_acquire>:
 800715c:	b510      	push	{r4, lr}
 800715e:	4802      	ldr	r0, [pc, #8]	; (8007168 <__sfp_lock_acquire+0xc>)
 8007160:	f000 f931 	bl	80073c6 <__retarget_lock_acquire_recursive>
 8007164:	bd10      	pop	{r4, pc}
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	2000044d 	.word	0x2000044d

0800716c <__sfp_lock_release>:
 800716c:	b510      	push	{r4, lr}
 800716e:	4802      	ldr	r0, [pc, #8]	; (8007178 <__sfp_lock_release+0xc>)
 8007170:	f000 f92a 	bl	80073c8 <__retarget_lock_release_recursive>
 8007174:	bd10      	pop	{r4, pc}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	2000044d 	.word	0x2000044d

0800717c <__sinit>:
 800717c:	b510      	push	{r4, lr}
 800717e:	0004      	movs	r4, r0
 8007180:	f7ff ffec 	bl	800715c <__sfp_lock_acquire>
 8007184:	6a23      	ldr	r3, [r4, #32]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <__sinit+0x14>
 800718a:	f7ff ffef 	bl	800716c <__sfp_lock_release>
 800718e:	bd10      	pop	{r4, pc}
 8007190:	4b04      	ldr	r3, [pc, #16]	; (80071a4 <__sinit+0x28>)
 8007192:	6223      	str	r3, [r4, #32]
 8007194:	4b04      	ldr	r3, [pc, #16]	; (80071a8 <__sinit+0x2c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f6      	bne.n	800718a <__sinit+0xe>
 800719c:	f7ff ffc0 	bl	8007120 <global_stdio_init.part.0>
 80071a0:	e7f3      	b.n	800718a <__sinit+0xe>
 80071a2:	46c0      	nop			; (mov r8, r8)
 80071a4:	080070e5 	.word	0x080070e5
 80071a8:	20000444 	.word	0x20000444

080071ac <_fwalk_sglue>:
 80071ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ae:	0014      	movs	r4, r2
 80071b0:	2600      	movs	r6, #0
 80071b2:	9000      	str	r0, [sp, #0]
 80071b4:	9101      	str	r1, [sp, #4]
 80071b6:	68a5      	ldr	r5, [r4, #8]
 80071b8:	6867      	ldr	r7, [r4, #4]
 80071ba:	3f01      	subs	r7, #1
 80071bc:	d504      	bpl.n	80071c8 <_fwalk_sglue+0x1c>
 80071be:	6824      	ldr	r4, [r4, #0]
 80071c0:	2c00      	cmp	r4, #0
 80071c2:	d1f8      	bne.n	80071b6 <_fwalk_sglue+0xa>
 80071c4:	0030      	movs	r0, r6
 80071c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071c8:	89ab      	ldrh	r3, [r5, #12]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d908      	bls.n	80071e0 <_fwalk_sglue+0x34>
 80071ce:	220e      	movs	r2, #14
 80071d0:	5eab      	ldrsh	r3, [r5, r2]
 80071d2:	3301      	adds	r3, #1
 80071d4:	d004      	beq.n	80071e0 <_fwalk_sglue+0x34>
 80071d6:	0029      	movs	r1, r5
 80071d8:	9800      	ldr	r0, [sp, #0]
 80071da:	9b01      	ldr	r3, [sp, #4]
 80071dc:	4798      	blx	r3
 80071de:	4306      	orrs	r6, r0
 80071e0:	3568      	adds	r5, #104	; 0x68
 80071e2:	e7ea      	b.n	80071ba <_fwalk_sglue+0xe>

080071e4 <siprintf>:
 80071e4:	b40e      	push	{r1, r2, r3}
 80071e6:	b500      	push	{lr}
 80071e8:	490b      	ldr	r1, [pc, #44]	; (8007218 <siprintf+0x34>)
 80071ea:	b09c      	sub	sp, #112	; 0x70
 80071ec:	ab1d      	add	r3, sp, #116	; 0x74
 80071ee:	9002      	str	r0, [sp, #8]
 80071f0:	9006      	str	r0, [sp, #24]
 80071f2:	9107      	str	r1, [sp, #28]
 80071f4:	9104      	str	r1, [sp, #16]
 80071f6:	4809      	ldr	r0, [pc, #36]	; (800721c <siprintf+0x38>)
 80071f8:	4909      	ldr	r1, [pc, #36]	; (8007220 <siprintf+0x3c>)
 80071fa:	cb04      	ldmia	r3!, {r2}
 80071fc:	9105      	str	r1, [sp, #20]
 80071fe:	6800      	ldr	r0, [r0, #0]
 8007200:	a902      	add	r1, sp, #8
 8007202:	9301      	str	r3, [sp, #4]
 8007204:	f002 fc68 	bl	8009ad8 <_svfiprintf_r>
 8007208:	2200      	movs	r2, #0
 800720a:	9b02      	ldr	r3, [sp, #8]
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	b01c      	add	sp, #112	; 0x70
 8007210:	bc08      	pop	{r3}
 8007212:	b003      	add	sp, #12
 8007214:	4718      	bx	r3
 8007216:	46c0      	nop			; (mov r8, r8)
 8007218:	7fffffff 	.word	0x7fffffff
 800721c:	20000064 	.word	0x20000064
 8007220:	ffff0208 	.word	0xffff0208

08007224 <__sread>:
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	000c      	movs	r4, r1
 8007228:	250e      	movs	r5, #14
 800722a:	5f49      	ldrsh	r1, [r1, r5]
 800722c:	f000 f878 	bl	8007320 <_read_r>
 8007230:	2800      	cmp	r0, #0
 8007232:	db03      	blt.n	800723c <__sread+0x18>
 8007234:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007236:	181b      	adds	r3, r3, r0
 8007238:	6563      	str	r3, [r4, #84]	; 0x54
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	4a02      	ldr	r2, [pc, #8]	; (8007248 <__sread+0x24>)
 8007240:	4013      	ands	r3, r2
 8007242:	81a3      	strh	r3, [r4, #12]
 8007244:	e7f9      	b.n	800723a <__sread+0x16>
 8007246:	46c0      	nop			; (mov r8, r8)
 8007248:	ffffefff 	.word	0xffffefff

0800724c <__swrite>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	001f      	movs	r7, r3
 8007250:	898b      	ldrh	r3, [r1, #12]
 8007252:	0005      	movs	r5, r0
 8007254:	000c      	movs	r4, r1
 8007256:	0016      	movs	r6, r2
 8007258:	05db      	lsls	r3, r3, #23
 800725a:	d505      	bpl.n	8007268 <__swrite+0x1c>
 800725c:	230e      	movs	r3, #14
 800725e:	5ec9      	ldrsh	r1, [r1, r3]
 8007260:	2200      	movs	r2, #0
 8007262:	2302      	movs	r3, #2
 8007264:	f000 f848 	bl	80072f8 <_lseek_r>
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	4a05      	ldr	r2, [pc, #20]	; (8007280 <__swrite+0x34>)
 800726c:	0028      	movs	r0, r5
 800726e:	4013      	ands	r3, r2
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	0032      	movs	r2, r6
 8007274:	230e      	movs	r3, #14
 8007276:	5ee1      	ldrsh	r1, [r4, r3]
 8007278:	003b      	movs	r3, r7
 800727a:	f000 f865 	bl	8007348 <_write_r>
 800727e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007280:	ffffefff 	.word	0xffffefff

08007284 <__sseek>:
 8007284:	b570      	push	{r4, r5, r6, lr}
 8007286:	000c      	movs	r4, r1
 8007288:	250e      	movs	r5, #14
 800728a:	5f49      	ldrsh	r1, [r1, r5]
 800728c:	f000 f834 	bl	80072f8 <_lseek_r>
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	1c42      	adds	r2, r0, #1
 8007294:	d103      	bne.n	800729e <__sseek+0x1a>
 8007296:	4a05      	ldr	r2, [pc, #20]	; (80072ac <__sseek+0x28>)
 8007298:	4013      	ands	r3, r2
 800729a:	81a3      	strh	r3, [r4, #12]
 800729c:	bd70      	pop	{r4, r5, r6, pc}
 800729e:	2280      	movs	r2, #128	; 0x80
 80072a0:	0152      	lsls	r2, r2, #5
 80072a2:	4313      	orrs	r3, r2
 80072a4:	81a3      	strh	r3, [r4, #12]
 80072a6:	6560      	str	r0, [r4, #84]	; 0x54
 80072a8:	e7f8      	b.n	800729c <__sseek+0x18>
 80072aa:	46c0      	nop			; (mov r8, r8)
 80072ac:	ffffefff 	.word	0xffffefff

080072b0 <__sclose>:
 80072b0:	b510      	push	{r4, lr}
 80072b2:	230e      	movs	r3, #14
 80072b4:	5ec9      	ldrsh	r1, [r1, r3]
 80072b6:	f000 f80d 	bl	80072d4 <_close_r>
 80072ba:	bd10      	pop	{r4, pc}

080072bc <memset>:
 80072bc:	0003      	movs	r3, r0
 80072be:	1882      	adds	r2, r0, r2
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d100      	bne.n	80072c6 <memset+0xa>
 80072c4:	4770      	bx	lr
 80072c6:	7019      	strb	r1, [r3, #0]
 80072c8:	3301      	adds	r3, #1
 80072ca:	e7f9      	b.n	80072c0 <memset+0x4>

080072cc <_localeconv_r>:
 80072cc:	4800      	ldr	r0, [pc, #0]	; (80072d0 <_localeconv_r+0x4>)
 80072ce:	4770      	bx	lr
 80072d0:	20000158 	.word	0x20000158

080072d4 <_close_r>:
 80072d4:	2300      	movs	r3, #0
 80072d6:	b570      	push	{r4, r5, r6, lr}
 80072d8:	4d06      	ldr	r5, [pc, #24]	; (80072f4 <_close_r+0x20>)
 80072da:	0004      	movs	r4, r0
 80072dc:	0008      	movs	r0, r1
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	f7fc fc92 	bl	8003c08 <_close>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d103      	bne.n	80072f0 <_close_r+0x1c>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d000      	beq.n	80072f0 <_close_r+0x1c>
 80072ee:	6023      	str	r3, [r4, #0]
 80072f0:	bd70      	pop	{r4, r5, r6, pc}
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	20000448 	.word	0x20000448

080072f8 <_lseek_r>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	0004      	movs	r4, r0
 80072fc:	0008      	movs	r0, r1
 80072fe:	0011      	movs	r1, r2
 8007300:	001a      	movs	r2, r3
 8007302:	2300      	movs	r3, #0
 8007304:	4d05      	ldr	r5, [pc, #20]	; (800731c <_lseek_r+0x24>)
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	f7fc fc9f 	bl	8003c4a <_lseek>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d103      	bne.n	8007318 <_lseek_r+0x20>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d000      	beq.n	8007318 <_lseek_r+0x20>
 8007316:	6023      	str	r3, [r4, #0]
 8007318:	bd70      	pop	{r4, r5, r6, pc}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	20000448 	.word	0x20000448

08007320 <_read_r>:
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	0004      	movs	r4, r0
 8007324:	0008      	movs	r0, r1
 8007326:	0011      	movs	r1, r2
 8007328:	001a      	movs	r2, r3
 800732a:	2300      	movs	r3, #0
 800732c:	4d05      	ldr	r5, [pc, #20]	; (8007344 <_read_r+0x24>)
 800732e:	602b      	str	r3, [r5, #0]
 8007330:	f7fc fc31 	bl	8003b96 <_read>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d103      	bne.n	8007340 <_read_r+0x20>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d000      	beq.n	8007340 <_read_r+0x20>
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	bd70      	pop	{r4, r5, r6, pc}
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	20000448 	.word	0x20000448

08007348 <_write_r>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	0004      	movs	r4, r0
 800734c:	0008      	movs	r0, r1
 800734e:	0011      	movs	r1, r2
 8007350:	001a      	movs	r2, r3
 8007352:	2300      	movs	r3, #0
 8007354:	4d05      	ldr	r5, [pc, #20]	; (800736c <_write_r+0x24>)
 8007356:	602b      	str	r3, [r5, #0]
 8007358:	f7fc fc3a 	bl	8003bd0 <_write>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d103      	bne.n	8007368 <_write_r+0x20>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d000      	beq.n	8007368 <_write_r+0x20>
 8007366:	6023      	str	r3, [r4, #0]
 8007368:	bd70      	pop	{r4, r5, r6, pc}
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	20000448 	.word	0x20000448

08007370 <__errno>:
 8007370:	4b01      	ldr	r3, [pc, #4]	; (8007378 <__errno+0x8>)
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	4770      	bx	lr
 8007376:	46c0      	nop			; (mov r8, r8)
 8007378:	20000064 	.word	0x20000064

0800737c <__libc_init_array>:
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	2600      	movs	r6, #0
 8007380:	4c0c      	ldr	r4, [pc, #48]	; (80073b4 <__libc_init_array+0x38>)
 8007382:	4d0d      	ldr	r5, [pc, #52]	; (80073b8 <__libc_init_array+0x3c>)
 8007384:	1b64      	subs	r4, r4, r5
 8007386:	10a4      	asrs	r4, r4, #2
 8007388:	42a6      	cmp	r6, r4
 800738a:	d109      	bne.n	80073a0 <__libc_init_array+0x24>
 800738c:	2600      	movs	r6, #0
 800738e:	f003 fc71 	bl	800ac74 <_init>
 8007392:	4c0a      	ldr	r4, [pc, #40]	; (80073bc <__libc_init_array+0x40>)
 8007394:	4d0a      	ldr	r5, [pc, #40]	; (80073c0 <__libc_init_array+0x44>)
 8007396:	1b64      	subs	r4, r4, r5
 8007398:	10a4      	asrs	r4, r4, #2
 800739a:	42a6      	cmp	r6, r4
 800739c:	d105      	bne.n	80073aa <__libc_init_array+0x2e>
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	00b3      	lsls	r3, r6, #2
 80073a2:	58eb      	ldr	r3, [r5, r3]
 80073a4:	4798      	blx	r3
 80073a6:	3601      	adds	r6, #1
 80073a8:	e7ee      	b.n	8007388 <__libc_init_array+0xc>
 80073aa:	00b3      	lsls	r3, r6, #2
 80073ac:	58eb      	ldr	r3, [r5, r3]
 80073ae:	4798      	blx	r3
 80073b0:	3601      	adds	r6, #1
 80073b2:	e7f2      	b.n	800739a <__libc_init_array+0x1e>
 80073b4:	0800b210 	.word	0x0800b210
 80073b8:	0800b210 	.word	0x0800b210
 80073bc:	0800b214 	.word	0x0800b214
 80073c0:	0800b210 	.word	0x0800b210

080073c4 <__retarget_lock_init_recursive>:
 80073c4:	4770      	bx	lr

080073c6 <__retarget_lock_acquire_recursive>:
 80073c6:	4770      	bx	lr

080073c8 <__retarget_lock_release_recursive>:
 80073c8:	4770      	bx	lr

080073ca <memchr>:
 80073ca:	b2c9      	uxtb	r1, r1
 80073cc:	1882      	adds	r2, r0, r2
 80073ce:	4290      	cmp	r0, r2
 80073d0:	d101      	bne.n	80073d6 <memchr+0xc>
 80073d2:	2000      	movs	r0, #0
 80073d4:	4770      	bx	lr
 80073d6:	7803      	ldrb	r3, [r0, #0]
 80073d8:	428b      	cmp	r3, r1
 80073da:	d0fb      	beq.n	80073d4 <memchr+0xa>
 80073dc:	3001      	adds	r0, #1
 80073de:	e7f6      	b.n	80073ce <memchr+0x4>

080073e0 <nanf>:
 80073e0:	4800      	ldr	r0, [pc, #0]	; (80073e4 <nanf+0x4>)
 80073e2:	4770      	bx	lr
 80073e4:	7fc00000 	.word	0x7fc00000

080073e8 <quorem>:
 80073e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ea:	6902      	ldr	r2, [r0, #16]
 80073ec:	690b      	ldr	r3, [r1, #16]
 80073ee:	b089      	sub	sp, #36	; 0x24
 80073f0:	0007      	movs	r7, r0
 80073f2:	9104      	str	r1, [sp, #16]
 80073f4:	2000      	movs	r0, #0
 80073f6:	429a      	cmp	r2, r3
 80073f8:	db69      	blt.n	80074ce <quorem+0xe6>
 80073fa:	3b01      	subs	r3, #1
 80073fc:	009c      	lsls	r4, r3, #2
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	000b      	movs	r3, r1
 8007402:	3314      	adds	r3, #20
 8007404:	9306      	str	r3, [sp, #24]
 8007406:	191b      	adds	r3, r3, r4
 8007408:	9305      	str	r3, [sp, #20]
 800740a:	003b      	movs	r3, r7
 800740c:	3314      	adds	r3, #20
 800740e:	9303      	str	r3, [sp, #12]
 8007410:	191c      	adds	r4, r3, r4
 8007412:	9b05      	ldr	r3, [sp, #20]
 8007414:	6826      	ldr	r6, [r4, #0]
 8007416:	681d      	ldr	r5, [r3, #0]
 8007418:	0030      	movs	r0, r6
 800741a:	3501      	adds	r5, #1
 800741c:	0029      	movs	r1, r5
 800741e:	f7f8 fe8f 	bl	8000140 <__udivsi3>
 8007422:	9002      	str	r0, [sp, #8]
 8007424:	42ae      	cmp	r6, r5
 8007426:	d329      	bcc.n	800747c <quorem+0x94>
 8007428:	9b06      	ldr	r3, [sp, #24]
 800742a:	2600      	movs	r6, #0
 800742c:	469c      	mov	ip, r3
 800742e:	9d03      	ldr	r5, [sp, #12]
 8007430:	9606      	str	r6, [sp, #24]
 8007432:	4662      	mov	r2, ip
 8007434:	ca08      	ldmia	r2!, {r3}
 8007436:	6828      	ldr	r0, [r5, #0]
 8007438:	4694      	mov	ip, r2
 800743a:	9a02      	ldr	r2, [sp, #8]
 800743c:	b299      	uxth	r1, r3
 800743e:	4351      	muls	r1, r2
 8007440:	0c1b      	lsrs	r3, r3, #16
 8007442:	4353      	muls	r3, r2
 8007444:	1989      	adds	r1, r1, r6
 8007446:	0c0a      	lsrs	r2, r1, #16
 8007448:	189b      	adds	r3, r3, r2
 800744a:	9307      	str	r3, [sp, #28]
 800744c:	0c1e      	lsrs	r6, r3, #16
 800744e:	9b06      	ldr	r3, [sp, #24]
 8007450:	b282      	uxth	r2, r0
 8007452:	18d2      	adds	r2, r2, r3
 8007454:	466b      	mov	r3, sp
 8007456:	b289      	uxth	r1, r1
 8007458:	8b9b      	ldrh	r3, [r3, #28]
 800745a:	1a52      	subs	r2, r2, r1
 800745c:	0c01      	lsrs	r1, r0, #16
 800745e:	1ac9      	subs	r1, r1, r3
 8007460:	1413      	asrs	r3, r2, #16
 8007462:	18cb      	adds	r3, r1, r3
 8007464:	1419      	asrs	r1, r3, #16
 8007466:	b292      	uxth	r2, r2
 8007468:	041b      	lsls	r3, r3, #16
 800746a:	4313      	orrs	r3, r2
 800746c:	c508      	stmia	r5!, {r3}
 800746e:	9b05      	ldr	r3, [sp, #20]
 8007470:	9106      	str	r1, [sp, #24]
 8007472:	4563      	cmp	r3, ip
 8007474:	d2dd      	bcs.n	8007432 <quorem+0x4a>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d030      	beq.n	80074de <quorem+0xf6>
 800747c:	0038      	movs	r0, r7
 800747e:	9904      	ldr	r1, [sp, #16]
 8007480:	f001 fa2a 	bl	80088d8 <__mcmp>
 8007484:	2800      	cmp	r0, #0
 8007486:	db21      	blt.n	80074cc <quorem+0xe4>
 8007488:	0038      	movs	r0, r7
 800748a:	2600      	movs	r6, #0
 800748c:	9b02      	ldr	r3, [sp, #8]
 800748e:	9c04      	ldr	r4, [sp, #16]
 8007490:	3301      	adds	r3, #1
 8007492:	9302      	str	r3, [sp, #8]
 8007494:	3014      	adds	r0, #20
 8007496:	3414      	adds	r4, #20
 8007498:	6803      	ldr	r3, [r0, #0]
 800749a:	cc02      	ldmia	r4!, {r1}
 800749c:	b29d      	uxth	r5, r3
 800749e:	19ad      	adds	r5, r5, r6
 80074a0:	b28a      	uxth	r2, r1
 80074a2:	1aaa      	subs	r2, r5, r2
 80074a4:	0c09      	lsrs	r1, r1, #16
 80074a6:	0c1b      	lsrs	r3, r3, #16
 80074a8:	1a5b      	subs	r3, r3, r1
 80074aa:	1411      	asrs	r1, r2, #16
 80074ac:	185b      	adds	r3, r3, r1
 80074ae:	141e      	asrs	r6, r3, #16
 80074b0:	b292      	uxth	r2, r2
 80074b2:	041b      	lsls	r3, r3, #16
 80074b4:	4313      	orrs	r3, r2
 80074b6:	c008      	stmia	r0!, {r3}
 80074b8:	9b05      	ldr	r3, [sp, #20]
 80074ba:	42a3      	cmp	r3, r4
 80074bc:	d2ec      	bcs.n	8007498 <quorem+0xb0>
 80074be:	9b01      	ldr	r3, [sp, #4]
 80074c0:	9a03      	ldr	r2, [sp, #12]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	18d3      	adds	r3, r2, r3
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	2a00      	cmp	r2, #0
 80074ca:	d015      	beq.n	80074f8 <quorem+0x110>
 80074cc:	9802      	ldr	r0, [sp, #8]
 80074ce:	b009      	add	sp, #36	; 0x24
 80074d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d106      	bne.n	80074e6 <quorem+0xfe>
 80074d8:	9b01      	ldr	r3, [sp, #4]
 80074da:	3b01      	subs	r3, #1
 80074dc:	9301      	str	r3, [sp, #4]
 80074de:	9b03      	ldr	r3, [sp, #12]
 80074e0:	3c04      	subs	r4, #4
 80074e2:	42a3      	cmp	r3, r4
 80074e4:	d3f5      	bcc.n	80074d2 <quorem+0xea>
 80074e6:	9b01      	ldr	r3, [sp, #4]
 80074e8:	613b      	str	r3, [r7, #16]
 80074ea:	e7c7      	b.n	800747c <quorem+0x94>
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	2a00      	cmp	r2, #0
 80074f0:	d106      	bne.n	8007500 <quorem+0x118>
 80074f2:	9a01      	ldr	r2, [sp, #4]
 80074f4:	3a01      	subs	r2, #1
 80074f6:	9201      	str	r2, [sp, #4]
 80074f8:	9a03      	ldr	r2, [sp, #12]
 80074fa:	3b04      	subs	r3, #4
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d3f5      	bcc.n	80074ec <quorem+0x104>
 8007500:	9b01      	ldr	r3, [sp, #4]
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	e7e2      	b.n	80074cc <quorem+0xe4>
	...

08007508 <_dtoa_r>:
 8007508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800750a:	0014      	movs	r4, r2
 800750c:	001d      	movs	r5, r3
 800750e:	69c6      	ldr	r6, [r0, #28]
 8007510:	b09d      	sub	sp, #116	; 0x74
 8007512:	9408      	str	r4, [sp, #32]
 8007514:	9509      	str	r5, [sp, #36]	; 0x24
 8007516:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007518:	9004      	str	r0, [sp, #16]
 800751a:	2e00      	cmp	r6, #0
 800751c:	d10f      	bne.n	800753e <_dtoa_r+0x36>
 800751e:	2010      	movs	r0, #16
 8007520:	f000 fe4a 	bl	80081b8 <malloc>
 8007524:	9b04      	ldr	r3, [sp, #16]
 8007526:	1e02      	subs	r2, r0, #0
 8007528:	61d8      	str	r0, [r3, #28]
 800752a:	d104      	bne.n	8007536 <_dtoa_r+0x2e>
 800752c:	21ef      	movs	r1, #239	; 0xef
 800752e:	4bc6      	ldr	r3, [pc, #792]	; (8007848 <_dtoa_r+0x340>)
 8007530:	48c6      	ldr	r0, [pc, #792]	; (800784c <_dtoa_r+0x344>)
 8007532:	f002 fccd 	bl	8009ed0 <__assert_func>
 8007536:	6046      	str	r6, [r0, #4]
 8007538:	6086      	str	r6, [r0, #8]
 800753a:	6006      	str	r6, [r0, #0]
 800753c:	60c6      	str	r6, [r0, #12]
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	6819      	ldr	r1, [r3, #0]
 8007544:	2900      	cmp	r1, #0
 8007546:	d00b      	beq.n	8007560 <_dtoa_r+0x58>
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	2301      	movs	r3, #1
 800754c:	4093      	lsls	r3, r2
 800754e:	604a      	str	r2, [r1, #4]
 8007550:	608b      	str	r3, [r1, #8]
 8007552:	9804      	ldr	r0, [sp, #16]
 8007554:	f000 ff32 	bl	80083bc <_Bfree>
 8007558:	2200      	movs	r2, #0
 800755a:	9b04      	ldr	r3, [sp, #16]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	2d00      	cmp	r5, #0
 8007562:	da1e      	bge.n	80075a2 <_dtoa_r+0x9a>
 8007564:	2301      	movs	r3, #1
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	006b      	lsls	r3, r5, #1
 800756a:	085b      	lsrs	r3, r3, #1
 800756c:	9309      	str	r3, [sp, #36]	; 0x24
 800756e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007570:	4bb7      	ldr	r3, [pc, #732]	; (8007850 <_dtoa_r+0x348>)
 8007572:	4ab7      	ldr	r2, [pc, #732]	; (8007850 <_dtoa_r+0x348>)
 8007574:	403b      	ands	r3, r7
 8007576:	4293      	cmp	r3, r2
 8007578:	d116      	bne.n	80075a8 <_dtoa_r+0xa0>
 800757a:	4bb6      	ldr	r3, [pc, #728]	; (8007854 <_dtoa_r+0x34c>)
 800757c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	033b      	lsls	r3, r7, #12
 8007582:	0b1b      	lsrs	r3, r3, #12
 8007584:	4323      	orrs	r3, r4
 8007586:	d101      	bne.n	800758c <_dtoa_r+0x84>
 8007588:	f000 fdb5 	bl	80080f6 <_dtoa_r+0xbee>
 800758c:	4bb2      	ldr	r3, [pc, #712]	; (8007858 <_dtoa_r+0x350>)
 800758e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007590:	9306      	str	r3, [sp, #24]
 8007592:	2a00      	cmp	r2, #0
 8007594:	d002      	beq.n	800759c <_dtoa_r+0x94>
 8007596:	4bb1      	ldr	r3, [pc, #708]	; (800785c <_dtoa_r+0x354>)
 8007598:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	9806      	ldr	r0, [sp, #24]
 800759e:	b01d      	add	sp, #116	; 0x74
 80075a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a2:	2300      	movs	r3, #0
 80075a4:	603b      	str	r3, [r7, #0]
 80075a6:	e7e2      	b.n	800756e <_dtoa_r+0x66>
 80075a8:	9a08      	ldr	r2, [sp, #32]
 80075aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ac:	9210      	str	r2, [sp, #64]	; 0x40
 80075ae:	9311      	str	r3, [sp, #68]	; 0x44
 80075b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80075b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075b4:	2200      	movs	r2, #0
 80075b6:	2300      	movs	r3, #0
 80075b8:	f7f8 ff48 	bl	800044c <__aeabi_dcmpeq>
 80075bc:	1e06      	subs	r6, r0, #0
 80075be:	d009      	beq.n	80075d4 <_dtoa_r+0xcc>
 80075c0:	2301      	movs	r3, #1
 80075c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	4ba6      	ldr	r3, [pc, #664]	; (8007860 <_dtoa_r+0x358>)
 80075c8:	9306      	str	r3, [sp, #24]
 80075ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0e5      	beq.n	800759c <_dtoa_r+0x94>
 80075d0:	4ba4      	ldr	r3, [pc, #656]	; (8007864 <_dtoa_r+0x35c>)
 80075d2:	e7e1      	b.n	8007598 <_dtoa_r+0x90>
 80075d4:	ab1a      	add	r3, sp, #104	; 0x68
 80075d6:	9301      	str	r3, [sp, #4]
 80075d8:	ab1b      	add	r3, sp, #108	; 0x6c
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	9804      	ldr	r0, [sp, #16]
 80075de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075e2:	f001 fa95 	bl	8008b10 <__d2b>
 80075e6:	007a      	lsls	r2, r7, #1
 80075e8:	9005      	str	r0, [sp, #20]
 80075ea:	0d52      	lsrs	r2, r2, #21
 80075ec:	d100      	bne.n	80075f0 <_dtoa_r+0xe8>
 80075ee:	e07b      	b.n	80076e8 <_dtoa_r+0x1e0>
 80075f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075f2:	9617      	str	r6, [sp, #92]	; 0x5c
 80075f4:	0319      	lsls	r1, r3, #12
 80075f6:	4b9c      	ldr	r3, [pc, #624]	; (8007868 <_dtoa_r+0x360>)
 80075f8:	0b09      	lsrs	r1, r1, #12
 80075fa:	430b      	orrs	r3, r1
 80075fc:	499b      	ldr	r1, [pc, #620]	; (800786c <_dtoa_r+0x364>)
 80075fe:	1857      	adds	r7, r2, r1
 8007600:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007602:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007604:	0019      	movs	r1, r3
 8007606:	2200      	movs	r2, #0
 8007608:	4b99      	ldr	r3, [pc, #612]	; (8007870 <_dtoa_r+0x368>)
 800760a:	f7fa fdf5 	bl	80021f8 <__aeabi_dsub>
 800760e:	4a99      	ldr	r2, [pc, #612]	; (8007874 <_dtoa_r+0x36c>)
 8007610:	4b99      	ldr	r3, [pc, #612]	; (8007878 <_dtoa_r+0x370>)
 8007612:	f7fa fb2f 	bl	8001c74 <__aeabi_dmul>
 8007616:	4a99      	ldr	r2, [pc, #612]	; (800787c <_dtoa_r+0x374>)
 8007618:	4b99      	ldr	r3, [pc, #612]	; (8007880 <_dtoa_r+0x378>)
 800761a:	f7f9 fbd1 	bl	8000dc0 <__aeabi_dadd>
 800761e:	0004      	movs	r4, r0
 8007620:	0038      	movs	r0, r7
 8007622:	000d      	movs	r5, r1
 8007624:	f7fb f9be 	bl	80029a4 <__aeabi_i2d>
 8007628:	4a96      	ldr	r2, [pc, #600]	; (8007884 <_dtoa_r+0x37c>)
 800762a:	4b97      	ldr	r3, [pc, #604]	; (8007888 <_dtoa_r+0x380>)
 800762c:	f7fa fb22 	bl	8001c74 <__aeabi_dmul>
 8007630:	0002      	movs	r2, r0
 8007632:	000b      	movs	r3, r1
 8007634:	0020      	movs	r0, r4
 8007636:	0029      	movs	r1, r5
 8007638:	f7f9 fbc2 	bl	8000dc0 <__aeabi_dadd>
 800763c:	0004      	movs	r4, r0
 800763e:	000d      	movs	r5, r1
 8007640:	f7fb f97a 	bl	8002938 <__aeabi_d2iz>
 8007644:	2200      	movs	r2, #0
 8007646:	9003      	str	r0, [sp, #12]
 8007648:	2300      	movs	r3, #0
 800764a:	0020      	movs	r0, r4
 800764c:	0029      	movs	r1, r5
 800764e:	f7f8 ff03 	bl	8000458 <__aeabi_dcmplt>
 8007652:	2800      	cmp	r0, #0
 8007654:	d00b      	beq.n	800766e <_dtoa_r+0x166>
 8007656:	9803      	ldr	r0, [sp, #12]
 8007658:	f7fb f9a4 	bl	80029a4 <__aeabi_i2d>
 800765c:	002b      	movs	r3, r5
 800765e:	0022      	movs	r2, r4
 8007660:	f7f8 fef4 	bl	800044c <__aeabi_dcmpeq>
 8007664:	4243      	negs	r3, r0
 8007666:	4158      	adcs	r0, r3
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	1a1b      	subs	r3, r3, r0
 800766c:	9303      	str	r3, [sp, #12]
 800766e:	2301      	movs	r3, #1
 8007670:	9316      	str	r3, [sp, #88]	; 0x58
 8007672:	9b03      	ldr	r3, [sp, #12]
 8007674:	2b16      	cmp	r3, #22
 8007676:	d810      	bhi.n	800769a <_dtoa_r+0x192>
 8007678:	9810      	ldr	r0, [sp, #64]	; 0x40
 800767a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800767c:	9a03      	ldr	r2, [sp, #12]
 800767e:	4b83      	ldr	r3, [pc, #524]	; (800788c <_dtoa_r+0x384>)
 8007680:	00d2      	lsls	r2, r2, #3
 8007682:	189b      	adds	r3, r3, r2
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f7f8 fee6 	bl	8000458 <__aeabi_dcmplt>
 800768c:	2800      	cmp	r0, #0
 800768e:	d047      	beq.n	8007720 <_dtoa_r+0x218>
 8007690:	9b03      	ldr	r3, [sp, #12]
 8007692:	3b01      	subs	r3, #1
 8007694:	9303      	str	r3, [sp, #12]
 8007696:	2300      	movs	r3, #0
 8007698:	9316      	str	r3, [sp, #88]	; 0x58
 800769a:	2200      	movs	r2, #0
 800769c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800769e:	920a      	str	r2, [sp, #40]	; 0x28
 80076a0:	1bdb      	subs	r3, r3, r7
 80076a2:	1e5a      	subs	r2, r3, #1
 80076a4:	d53e      	bpl.n	8007724 <_dtoa_r+0x21c>
 80076a6:	2201      	movs	r2, #1
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	930a      	str	r3, [sp, #40]	; 0x28
 80076ac:	2300      	movs	r3, #0
 80076ae:	930c      	str	r3, [sp, #48]	; 0x30
 80076b0:	9b03      	ldr	r3, [sp, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	db38      	blt.n	8007728 <_dtoa_r+0x220>
 80076b6:	9a03      	ldr	r2, [sp, #12]
 80076b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076ba:	4694      	mov	ip, r2
 80076bc:	4463      	add	r3, ip
 80076be:	930c      	str	r3, [sp, #48]	; 0x30
 80076c0:	2300      	movs	r3, #0
 80076c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80076c4:	930d      	str	r3, [sp, #52]	; 0x34
 80076c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076c8:	2401      	movs	r4, #1
 80076ca:	2b09      	cmp	r3, #9
 80076cc:	d867      	bhi.n	800779e <_dtoa_r+0x296>
 80076ce:	2b05      	cmp	r3, #5
 80076d0:	dd02      	ble.n	80076d8 <_dtoa_r+0x1d0>
 80076d2:	2400      	movs	r4, #0
 80076d4:	3b04      	subs	r3, #4
 80076d6:	9322      	str	r3, [sp, #136]	; 0x88
 80076d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076da:	1e98      	subs	r0, r3, #2
 80076dc:	2803      	cmp	r0, #3
 80076de:	d867      	bhi.n	80077b0 <_dtoa_r+0x2a8>
 80076e0:	f7f8 fd1a 	bl	8000118 <__gnu_thumb1_case_uqi>
 80076e4:	5b383a2b 	.word	0x5b383a2b
 80076e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076ea:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80076ec:	18f6      	adds	r6, r6, r3
 80076ee:	4b68      	ldr	r3, [pc, #416]	; (8007890 <_dtoa_r+0x388>)
 80076f0:	18f2      	adds	r2, r6, r3
 80076f2:	2a20      	cmp	r2, #32
 80076f4:	dd0f      	ble.n	8007716 <_dtoa_r+0x20e>
 80076f6:	2340      	movs	r3, #64	; 0x40
 80076f8:	1a9b      	subs	r3, r3, r2
 80076fa:	409f      	lsls	r7, r3
 80076fc:	4b65      	ldr	r3, [pc, #404]	; (8007894 <_dtoa_r+0x38c>)
 80076fe:	0038      	movs	r0, r7
 8007700:	18f3      	adds	r3, r6, r3
 8007702:	40dc      	lsrs	r4, r3
 8007704:	4320      	orrs	r0, r4
 8007706:	f7fb f97d 	bl	8002a04 <__aeabi_ui2d>
 800770a:	2201      	movs	r2, #1
 800770c:	4b62      	ldr	r3, [pc, #392]	; (8007898 <_dtoa_r+0x390>)
 800770e:	1e77      	subs	r7, r6, #1
 8007710:	18cb      	adds	r3, r1, r3
 8007712:	9217      	str	r2, [sp, #92]	; 0x5c
 8007714:	e776      	b.n	8007604 <_dtoa_r+0xfc>
 8007716:	2320      	movs	r3, #32
 8007718:	0020      	movs	r0, r4
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	4098      	lsls	r0, r3
 800771e:	e7f2      	b.n	8007706 <_dtoa_r+0x1fe>
 8007720:	9016      	str	r0, [sp, #88]	; 0x58
 8007722:	e7ba      	b.n	800769a <_dtoa_r+0x192>
 8007724:	920c      	str	r2, [sp, #48]	; 0x30
 8007726:	e7c3      	b.n	80076b0 <_dtoa_r+0x1a8>
 8007728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772a:	9a03      	ldr	r2, [sp, #12]
 800772c:	1a9b      	subs	r3, r3, r2
 800772e:	930a      	str	r3, [sp, #40]	; 0x28
 8007730:	4253      	negs	r3, r2
 8007732:	930d      	str	r3, [sp, #52]	; 0x34
 8007734:	2300      	movs	r3, #0
 8007736:	9313      	str	r3, [sp, #76]	; 0x4c
 8007738:	e7c5      	b.n	80076c6 <_dtoa_r+0x1be>
 800773a:	2300      	movs	r3, #0
 800773c:	930f      	str	r3, [sp, #60]	; 0x3c
 800773e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007740:	930b      	str	r3, [sp, #44]	; 0x2c
 8007742:	9307      	str	r3, [sp, #28]
 8007744:	2b00      	cmp	r3, #0
 8007746:	dc13      	bgt.n	8007770 <_dtoa_r+0x268>
 8007748:	2301      	movs	r3, #1
 800774a:	001a      	movs	r2, r3
 800774c:	930b      	str	r3, [sp, #44]	; 0x2c
 800774e:	9307      	str	r3, [sp, #28]
 8007750:	9223      	str	r2, [sp, #140]	; 0x8c
 8007752:	e00d      	b.n	8007770 <_dtoa_r+0x268>
 8007754:	2301      	movs	r3, #1
 8007756:	e7f1      	b.n	800773c <_dtoa_r+0x234>
 8007758:	2300      	movs	r3, #0
 800775a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800775c:	930f      	str	r3, [sp, #60]	; 0x3c
 800775e:	4694      	mov	ip, r2
 8007760:	9b03      	ldr	r3, [sp, #12]
 8007762:	4463      	add	r3, ip
 8007764:	930b      	str	r3, [sp, #44]	; 0x2c
 8007766:	3301      	adds	r3, #1
 8007768:	9307      	str	r3, [sp, #28]
 800776a:	2b00      	cmp	r3, #0
 800776c:	dc00      	bgt.n	8007770 <_dtoa_r+0x268>
 800776e:	2301      	movs	r3, #1
 8007770:	9a04      	ldr	r2, [sp, #16]
 8007772:	2100      	movs	r1, #0
 8007774:	69d0      	ldr	r0, [r2, #28]
 8007776:	2204      	movs	r2, #4
 8007778:	0015      	movs	r5, r2
 800777a:	3514      	adds	r5, #20
 800777c:	429d      	cmp	r5, r3
 800777e:	d91b      	bls.n	80077b8 <_dtoa_r+0x2b0>
 8007780:	6041      	str	r1, [r0, #4]
 8007782:	9804      	ldr	r0, [sp, #16]
 8007784:	f000 fdd6 	bl	8008334 <_Balloc>
 8007788:	9006      	str	r0, [sp, #24]
 800778a:	2800      	cmp	r0, #0
 800778c:	d117      	bne.n	80077be <_dtoa_r+0x2b6>
 800778e:	21b0      	movs	r1, #176	; 0xb0
 8007790:	4b42      	ldr	r3, [pc, #264]	; (800789c <_dtoa_r+0x394>)
 8007792:	482e      	ldr	r0, [pc, #184]	; (800784c <_dtoa_r+0x344>)
 8007794:	9a06      	ldr	r2, [sp, #24]
 8007796:	31ff      	adds	r1, #255	; 0xff
 8007798:	e6cb      	b.n	8007532 <_dtoa_r+0x2a>
 800779a:	2301      	movs	r3, #1
 800779c:	e7dd      	b.n	800775a <_dtoa_r+0x252>
 800779e:	2300      	movs	r3, #0
 80077a0:	940f      	str	r4, [sp, #60]	; 0x3c
 80077a2:	9322      	str	r3, [sp, #136]	; 0x88
 80077a4:	3b01      	subs	r3, #1
 80077a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80077a8:	9307      	str	r3, [sp, #28]
 80077aa:	2200      	movs	r2, #0
 80077ac:	3313      	adds	r3, #19
 80077ae:	e7cf      	b.n	8007750 <_dtoa_r+0x248>
 80077b0:	2301      	movs	r3, #1
 80077b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80077b4:	3b02      	subs	r3, #2
 80077b6:	e7f6      	b.n	80077a6 <_dtoa_r+0x29e>
 80077b8:	3101      	adds	r1, #1
 80077ba:	0052      	lsls	r2, r2, #1
 80077bc:	e7dc      	b.n	8007778 <_dtoa_r+0x270>
 80077be:	9b04      	ldr	r3, [sp, #16]
 80077c0:	9a06      	ldr	r2, [sp, #24]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	9b07      	ldr	r3, [sp, #28]
 80077c8:	2b0e      	cmp	r3, #14
 80077ca:	d900      	bls.n	80077ce <_dtoa_r+0x2c6>
 80077cc:	e0e5      	b.n	800799a <_dtoa_r+0x492>
 80077ce:	2c00      	cmp	r4, #0
 80077d0:	d100      	bne.n	80077d4 <_dtoa_r+0x2cc>
 80077d2:	e0e2      	b.n	800799a <_dtoa_r+0x492>
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	dd64      	ble.n	80078a4 <_dtoa_r+0x39c>
 80077da:	210f      	movs	r1, #15
 80077dc:	9a03      	ldr	r2, [sp, #12]
 80077de:	4b2b      	ldr	r3, [pc, #172]	; (800788c <_dtoa_r+0x384>)
 80077e0:	400a      	ands	r2, r1
 80077e2:	00d2      	lsls	r2, r2, #3
 80077e4:	189b      	adds	r3, r3, r2
 80077e6:	681e      	ldr	r6, [r3, #0]
 80077e8:	685f      	ldr	r7, [r3, #4]
 80077ea:	9b03      	ldr	r3, [sp, #12]
 80077ec:	2402      	movs	r4, #2
 80077ee:	111d      	asrs	r5, r3, #4
 80077f0:	05db      	lsls	r3, r3, #23
 80077f2:	d50a      	bpl.n	800780a <_dtoa_r+0x302>
 80077f4:	4b2a      	ldr	r3, [pc, #168]	; (80078a0 <_dtoa_r+0x398>)
 80077f6:	400d      	ands	r5, r1
 80077f8:	6a1a      	ldr	r2, [r3, #32]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80077fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007800:	f7f9 fe3e 	bl	8001480 <__aeabi_ddiv>
 8007804:	9008      	str	r0, [sp, #32]
 8007806:	9109      	str	r1, [sp, #36]	; 0x24
 8007808:	3401      	adds	r4, #1
 800780a:	4b25      	ldr	r3, [pc, #148]	; (80078a0 <_dtoa_r+0x398>)
 800780c:	930e      	str	r3, [sp, #56]	; 0x38
 800780e:	2d00      	cmp	r5, #0
 8007810:	d108      	bne.n	8007824 <_dtoa_r+0x31c>
 8007812:	9808      	ldr	r0, [sp, #32]
 8007814:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007816:	0032      	movs	r2, r6
 8007818:	003b      	movs	r3, r7
 800781a:	f7f9 fe31 	bl	8001480 <__aeabi_ddiv>
 800781e:	9008      	str	r0, [sp, #32]
 8007820:	9109      	str	r1, [sp, #36]	; 0x24
 8007822:	e05a      	b.n	80078da <_dtoa_r+0x3d2>
 8007824:	2301      	movs	r3, #1
 8007826:	421d      	tst	r5, r3
 8007828:	d009      	beq.n	800783e <_dtoa_r+0x336>
 800782a:	18e4      	adds	r4, r4, r3
 800782c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800782e:	0030      	movs	r0, r6
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	0039      	movs	r1, r7
 8007836:	f7fa fa1d 	bl	8001c74 <__aeabi_dmul>
 800783a:	0006      	movs	r6, r0
 800783c:	000f      	movs	r7, r1
 800783e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007840:	106d      	asrs	r5, r5, #1
 8007842:	3308      	adds	r3, #8
 8007844:	e7e2      	b.n	800780c <_dtoa_r+0x304>
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	0800ae26 	.word	0x0800ae26
 800784c:	0800ae3d 	.word	0x0800ae3d
 8007850:	7ff00000 	.word	0x7ff00000
 8007854:	0000270f 	.word	0x0000270f
 8007858:	0800ae22 	.word	0x0800ae22
 800785c:	0800ae25 	.word	0x0800ae25
 8007860:	0800adf0 	.word	0x0800adf0
 8007864:	0800adf1 	.word	0x0800adf1
 8007868:	3ff00000 	.word	0x3ff00000
 800786c:	fffffc01 	.word	0xfffffc01
 8007870:	3ff80000 	.word	0x3ff80000
 8007874:	636f4361 	.word	0x636f4361
 8007878:	3fd287a7 	.word	0x3fd287a7
 800787c:	8b60c8b3 	.word	0x8b60c8b3
 8007880:	3fc68a28 	.word	0x3fc68a28
 8007884:	509f79fb 	.word	0x509f79fb
 8007888:	3fd34413 	.word	0x3fd34413
 800788c:	0800af28 	.word	0x0800af28
 8007890:	00000432 	.word	0x00000432
 8007894:	00000412 	.word	0x00000412
 8007898:	fe100000 	.word	0xfe100000
 800789c:	0800ae95 	.word	0x0800ae95
 80078a0:	0800af00 	.word	0x0800af00
 80078a4:	9b03      	ldr	r3, [sp, #12]
 80078a6:	2402      	movs	r4, #2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d016      	beq.n	80078da <_dtoa_r+0x3d2>
 80078ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80078ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80078b0:	220f      	movs	r2, #15
 80078b2:	425d      	negs	r5, r3
 80078b4:	402a      	ands	r2, r5
 80078b6:	4bdd      	ldr	r3, [pc, #884]	; (8007c2c <_dtoa_r+0x724>)
 80078b8:	00d2      	lsls	r2, r2, #3
 80078ba:	189b      	adds	r3, r3, r2
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f7fa f9d8 	bl	8001c74 <__aeabi_dmul>
 80078c4:	2701      	movs	r7, #1
 80078c6:	2300      	movs	r3, #0
 80078c8:	9008      	str	r0, [sp, #32]
 80078ca:	9109      	str	r1, [sp, #36]	; 0x24
 80078cc:	4ed8      	ldr	r6, [pc, #864]	; (8007c30 <_dtoa_r+0x728>)
 80078ce:	112d      	asrs	r5, r5, #4
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	d000      	beq.n	80078d6 <_dtoa_r+0x3ce>
 80078d4:	e091      	b.n	80079fa <_dtoa_r+0x4f2>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1a1      	bne.n	800781e <_dtoa_r+0x316>
 80078da:	9e08      	ldr	r6, [sp, #32]
 80078dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80078de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d100      	bne.n	80078e6 <_dtoa_r+0x3de>
 80078e4:	e094      	b.n	8007a10 <_dtoa_r+0x508>
 80078e6:	2200      	movs	r2, #0
 80078e8:	0030      	movs	r0, r6
 80078ea:	0039      	movs	r1, r7
 80078ec:	4bd1      	ldr	r3, [pc, #836]	; (8007c34 <_dtoa_r+0x72c>)
 80078ee:	f7f8 fdb3 	bl	8000458 <__aeabi_dcmplt>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d100      	bne.n	80078f8 <_dtoa_r+0x3f0>
 80078f6:	e08b      	b.n	8007a10 <_dtoa_r+0x508>
 80078f8:	9b07      	ldr	r3, [sp, #28]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d100      	bne.n	8007900 <_dtoa_r+0x3f8>
 80078fe:	e087      	b.n	8007a10 <_dtoa_r+0x508>
 8007900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007902:	2b00      	cmp	r3, #0
 8007904:	dd45      	ble.n	8007992 <_dtoa_r+0x48a>
 8007906:	9b03      	ldr	r3, [sp, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	3b01      	subs	r3, #1
 800790c:	930e      	str	r3, [sp, #56]	; 0x38
 800790e:	0030      	movs	r0, r6
 8007910:	4bc9      	ldr	r3, [pc, #804]	; (8007c38 <_dtoa_r+0x730>)
 8007912:	0039      	movs	r1, r7
 8007914:	f7fa f9ae 	bl	8001c74 <__aeabi_dmul>
 8007918:	9008      	str	r0, [sp, #32]
 800791a:	9109      	str	r1, [sp, #36]	; 0x24
 800791c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800791e:	3401      	adds	r4, #1
 8007920:	0020      	movs	r0, r4
 8007922:	9e08      	ldr	r6, [sp, #32]
 8007924:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007926:	9312      	str	r3, [sp, #72]	; 0x48
 8007928:	f7fb f83c 	bl	80029a4 <__aeabi_i2d>
 800792c:	0032      	movs	r2, r6
 800792e:	003b      	movs	r3, r7
 8007930:	f7fa f9a0 	bl	8001c74 <__aeabi_dmul>
 8007934:	2200      	movs	r2, #0
 8007936:	4bc1      	ldr	r3, [pc, #772]	; (8007c3c <_dtoa_r+0x734>)
 8007938:	f7f9 fa42 	bl	8000dc0 <__aeabi_dadd>
 800793c:	4ac0      	ldr	r2, [pc, #768]	; (8007c40 <_dtoa_r+0x738>)
 800793e:	9014      	str	r0, [sp, #80]	; 0x50
 8007940:	9115      	str	r1, [sp, #84]	; 0x54
 8007942:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007944:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8007946:	4694      	mov	ip, r2
 8007948:	9308      	str	r3, [sp, #32]
 800794a:	9409      	str	r4, [sp, #36]	; 0x24
 800794c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800794e:	4463      	add	r3, ip
 8007950:	9318      	str	r3, [sp, #96]	; 0x60
 8007952:	9309      	str	r3, [sp, #36]	; 0x24
 8007954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007956:	2b00      	cmp	r3, #0
 8007958:	d15e      	bne.n	8007a18 <_dtoa_r+0x510>
 800795a:	2200      	movs	r2, #0
 800795c:	4bb9      	ldr	r3, [pc, #740]	; (8007c44 <_dtoa_r+0x73c>)
 800795e:	0030      	movs	r0, r6
 8007960:	0039      	movs	r1, r7
 8007962:	f7fa fc49 	bl	80021f8 <__aeabi_dsub>
 8007966:	9a08      	ldr	r2, [sp, #32]
 8007968:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800796a:	0004      	movs	r4, r0
 800796c:	000d      	movs	r5, r1
 800796e:	f7f8 fd87 	bl	8000480 <__aeabi_dcmpgt>
 8007972:	2800      	cmp	r0, #0
 8007974:	d000      	beq.n	8007978 <_dtoa_r+0x470>
 8007976:	e2b3      	b.n	8007ee0 <_dtoa_r+0x9d8>
 8007978:	48b3      	ldr	r0, [pc, #716]	; (8007c48 <_dtoa_r+0x740>)
 800797a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800797c:	4684      	mov	ip, r0
 800797e:	4461      	add	r1, ip
 8007980:	000b      	movs	r3, r1
 8007982:	0020      	movs	r0, r4
 8007984:	0029      	movs	r1, r5
 8007986:	9a08      	ldr	r2, [sp, #32]
 8007988:	f7f8 fd66 	bl	8000458 <__aeabi_dcmplt>
 800798c:	2800      	cmp	r0, #0
 800798e:	d000      	beq.n	8007992 <_dtoa_r+0x48a>
 8007990:	e2a3      	b.n	8007eda <_dtoa_r+0x9d2>
 8007992:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007994:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007996:	9308      	str	r3, [sp, #32]
 8007998:	9409      	str	r4, [sp, #36]	; 0x24
 800799a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800799c:	2b00      	cmp	r3, #0
 800799e:	da00      	bge.n	80079a2 <_dtoa_r+0x49a>
 80079a0:	e179      	b.n	8007c96 <_dtoa_r+0x78e>
 80079a2:	9a03      	ldr	r2, [sp, #12]
 80079a4:	2a0e      	cmp	r2, #14
 80079a6:	dd00      	ble.n	80079aa <_dtoa_r+0x4a2>
 80079a8:	e175      	b.n	8007c96 <_dtoa_r+0x78e>
 80079aa:	4ba0      	ldr	r3, [pc, #640]	; (8007c2c <_dtoa_r+0x724>)
 80079ac:	00d2      	lsls	r2, r2, #3
 80079ae:	189b      	adds	r3, r3, r2
 80079b0:	681e      	ldr	r6, [r3, #0]
 80079b2:	685f      	ldr	r7, [r3, #4]
 80079b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	db00      	blt.n	80079bc <_dtoa_r+0x4b4>
 80079ba:	e0e5      	b.n	8007b88 <_dtoa_r+0x680>
 80079bc:	9b07      	ldr	r3, [sp, #28]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	dd00      	ble.n	80079c4 <_dtoa_r+0x4bc>
 80079c2:	e0e1      	b.n	8007b88 <_dtoa_r+0x680>
 80079c4:	d000      	beq.n	80079c8 <_dtoa_r+0x4c0>
 80079c6:	e288      	b.n	8007eda <_dtoa_r+0x9d2>
 80079c8:	2200      	movs	r2, #0
 80079ca:	0030      	movs	r0, r6
 80079cc:	0039      	movs	r1, r7
 80079ce:	4b9d      	ldr	r3, [pc, #628]	; (8007c44 <_dtoa_r+0x73c>)
 80079d0:	f7fa f950 	bl	8001c74 <__aeabi_dmul>
 80079d4:	9a08      	ldr	r2, [sp, #32]
 80079d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d8:	f7f8 fd5c 	bl	8000494 <__aeabi_dcmpge>
 80079dc:	9e07      	ldr	r6, [sp, #28]
 80079de:	0037      	movs	r7, r6
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d000      	beq.n	80079e6 <_dtoa_r+0x4de>
 80079e4:	e25f      	b.n	8007ea6 <_dtoa_r+0x99e>
 80079e6:	9b06      	ldr	r3, [sp, #24]
 80079e8:	9a06      	ldr	r2, [sp, #24]
 80079ea:	3301      	adds	r3, #1
 80079ec:	9308      	str	r3, [sp, #32]
 80079ee:	2331      	movs	r3, #49	; 0x31
 80079f0:	7013      	strb	r3, [r2, #0]
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	9303      	str	r3, [sp, #12]
 80079f8:	e25a      	b.n	8007eb0 <_dtoa_r+0x9a8>
 80079fa:	423d      	tst	r5, r7
 80079fc:	d005      	beq.n	8007a0a <_dtoa_r+0x502>
 80079fe:	6832      	ldr	r2, [r6, #0]
 8007a00:	6873      	ldr	r3, [r6, #4]
 8007a02:	f7fa f937 	bl	8001c74 <__aeabi_dmul>
 8007a06:	003b      	movs	r3, r7
 8007a08:	3401      	adds	r4, #1
 8007a0a:	106d      	asrs	r5, r5, #1
 8007a0c:	3608      	adds	r6, #8
 8007a0e:	e75f      	b.n	80078d0 <_dtoa_r+0x3c8>
 8007a10:	9b03      	ldr	r3, [sp, #12]
 8007a12:	930e      	str	r3, [sp, #56]	; 0x38
 8007a14:	9b07      	ldr	r3, [sp, #28]
 8007a16:	e783      	b.n	8007920 <_dtoa_r+0x418>
 8007a18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a1a:	4b84      	ldr	r3, [pc, #528]	; (8007c2c <_dtoa_r+0x724>)
 8007a1c:	3a01      	subs	r2, #1
 8007a1e:	00d2      	lsls	r2, r2, #3
 8007a20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a22:	189b      	adds	r3, r3, r2
 8007a24:	9c08      	ldr	r4, [sp, #32]
 8007a26:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2900      	cmp	r1, #0
 8007a2e:	d051      	beq.n	8007ad4 <_dtoa_r+0x5cc>
 8007a30:	2000      	movs	r0, #0
 8007a32:	4986      	ldr	r1, [pc, #536]	; (8007c4c <_dtoa_r+0x744>)
 8007a34:	f7f9 fd24 	bl	8001480 <__aeabi_ddiv>
 8007a38:	0022      	movs	r2, r4
 8007a3a:	002b      	movs	r3, r5
 8007a3c:	f7fa fbdc 	bl	80021f8 <__aeabi_dsub>
 8007a40:	9a06      	ldr	r2, [sp, #24]
 8007a42:	0004      	movs	r4, r0
 8007a44:	4694      	mov	ip, r2
 8007a46:	000d      	movs	r5, r1
 8007a48:	9b06      	ldr	r3, [sp, #24]
 8007a4a:	9314      	str	r3, [sp, #80]	; 0x50
 8007a4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a4e:	4463      	add	r3, ip
 8007a50:	9318      	str	r3, [sp, #96]	; 0x60
 8007a52:	0039      	movs	r1, r7
 8007a54:	0030      	movs	r0, r6
 8007a56:	f7fa ff6f 	bl	8002938 <__aeabi_d2iz>
 8007a5a:	9012      	str	r0, [sp, #72]	; 0x48
 8007a5c:	f7fa ffa2 	bl	80029a4 <__aeabi_i2d>
 8007a60:	0002      	movs	r2, r0
 8007a62:	000b      	movs	r3, r1
 8007a64:	0030      	movs	r0, r6
 8007a66:	0039      	movs	r1, r7
 8007a68:	f7fa fbc6 	bl	80021f8 <__aeabi_dsub>
 8007a6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a70:	3301      	adds	r3, #1
 8007a72:	9308      	str	r3, [sp, #32]
 8007a74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a76:	0006      	movs	r6, r0
 8007a78:	3330      	adds	r3, #48	; 0x30
 8007a7a:	7013      	strb	r3, [r2, #0]
 8007a7c:	0022      	movs	r2, r4
 8007a7e:	002b      	movs	r3, r5
 8007a80:	000f      	movs	r7, r1
 8007a82:	f7f8 fce9 	bl	8000458 <__aeabi_dcmplt>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d174      	bne.n	8007b74 <_dtoa_r+0x66c>
 8007a8a:	0032      	movs	r2, r6
 8007a8c:	003b      	movs	r3, r7
 8007a8e:	2000      	movs	r0, #0
 8007a90:	4968      	ldr	r1, [pc, #416]	; (8007c34 <_dtoa_r+0x72c>)
 8007a92:	f7fa fbb1 	bl	80021f8 <__aeabi_dsub>
 8007a96:	0022      	movs	r2, r4
 8007a98:	002b      	movs	r3, r5
 8007a9a:	f7f8 fcdd 	bl	8000458 <__aeabi_dcmplt>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d000      	beq.n	8007aa4 <_dtoa_r+0x59c>
 8007aa2:	e0d7      	b.n	8007c54 <_dtoa_r+0x74c>
 8007aa4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007aa6:	9a08      	ldr	r2, [sp, #32]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d100      	bne.n	8007aae <_dtoa_r+0x5a6>
 8007aac:	e771      	b.n	8007992 <_dtoa_r+0x48a>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	0020      	movs	r0, r4
 8007ab2:	0029      	movs	r1, r5
 8007ab4:	4b60      	ldr	r3, [pc, #384]	; (8007c38 <_dtoa_r+0x730>)
 8007ab6:	f7fa f8dd 	bl	8001c74 <__aeabi_dmul>
 8007aba:	4b5f      	ldr	r3, [pc, #380]	; (8007c38 <_dtoa_r+0x730>)
 8007abc:	0004      	movs	r4, r0
 8007abe:	000d      	movs	r5, r1
 8007ac0:	0030      	movs	r0, r6
 8007ac2:	0039      	movs	r1, r7
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f7fa f8d5 	bl	8001c74 <__aeabi_dmul>
 8007aca:	9b08      	ldr	r3, [sp, #32]
 8007acc:	0006      	movs	r6, r0
 8007ace:	000f      	movs	r7, r1
 8007ad0:	9314      	str	r3, [sp, #80]	; 0x50
 8007ad2:	e7be      	b.n	8007a52 <_dtoa_r+0x54a>
 8007ad4:	0020      	movs	r0, r4
 8007ad6:	0029      	movs	r1, r5
 8007ad8:	f7fa f8cc 	bl	8001c74 <__aeabi_dmul>
 8007adc:	9a06      	ldr	r2, [sp, #24]
 8007ade:	9b06      	ldr	r3, [sp, #24]
 8007ae0:	4694      	mov	ip, r2
 8007ae2:	9308      	str	r3, [sp, #32]
 8007ae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ae6:	9014      	str	r0, [sp, #80]	; 0x50
 8007ae8:	9115      	str	r1, [sp, #84]	; 0x54
 8007aea:	4463      	add	r3, ip
 8007aec:	9319      	str	r3, [sp, #100]	; 0x64
 8007aee:	0030      	movs	r0, r6
 8007af0:	0039      	movs	r1, r7
 8007af2:	f7fa ff21 	bl	8002938 <__aeabi_d2iz>
 8007af6:	9018      	str	r0, [sp, #96]	; 0x60
 8007af8:	f7fa ff54 	bl	80029a4 <__aeabi_i2d>
 8007afc:	0002      	movs	r2, r0
 8007afe:	000b      	movs	r3, r1
 8007b00:	0030      	movs	r0, r6
 8007b02:	0039      	movs	r1, r7
 8007b04:	f7fa fb78 	bl	80021f8 <__aeabi_dsub>
 8007b08:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8007b0a:	9b08      	ldr	r3, [sp, #32]
 8007b0c:	3630      	adds	r6, #48	; 0x30
 8007b0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b10:	701e      	strb	r6, [r3, #0]
 8007b12:	3301      	adds	r3, #1
 8007b14:	0004      	movs	r4, r0
 8007b16:	000d      	movs	r5, r1
 8007b18:	9308      	str	r3, [sp, #32]
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d12d      	bne.n	8007b7a <_dtoa_r+0x672>
 8007b1e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007b20:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007b22:	9a06      	ldr	r2, [sp, #24]
 8007b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b26:	4694      	mov	ip, r2
 8007b28:	4463      	add	r3, ip
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	9308      	str	r3, [sp, #32]
 8007b2e:	4b47      	ldr	r3, [pc, #284]	; (8007c4c <_dtoa_r+0x744>)
 8007b30:	f7f9 f946 	bl	8000dc0 <__aeabi_dadd>
 8007b34:	0002      	movs	r2, r0
 8007b36:	000b      	movs	r3, r1
 8007b38:	0020      	movs	r0, r4
 8007b3a:	0029      	movs	r1, r5
 8007b3c:	f7f8 fca0 	bl	8000480 <__aeabi_dcmpgt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d000      	beq.n	8007b46 <_dtoa_r+0x63e>
 8007b44:	e086      	b.n	8007c54 <_dtoa_r+0x74c>
 8007b46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	493f      	ldr	r1, [pc, #252]	; (8007c4c <_dtoa_r+0x744>)
 8007b4e:	f7fa fb53 	bl	80021f8 <__aeabi_dsub>
 8007b52:	0002      	movs	r2, r0
 8007b54:	000b      	movs	r3, r1
 8007b56:	0020      	movs	r0, r4
 8007b58:	0029      	movs	r1, r5
 8007b5a:	f7f8 fc7d 	bl	8000458 <__aeabi_dcmplt>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d100      	bne.n	8007b64 <_dtoa_r+0x65c>
 8007b62:	e716      	b.n	8007992 <_dtoa_r+0x48a>
 8007b64:	9b08      	ldr	r3, [sp, #32]
 8007b66:	001a      	movs	r2, r3
 8007b68:	3a01      	subs	r2, #1
 8007b6a:	9208      	str	r2, [sp, #32]
 8007b6c:	7812      	ldrb	r2, [r2, #0]
 8007b6e:	2a30      	cmp	r2, #48	; 0x30
 8007b70:	d0f8      	beq.n	8007b64 <_dtoa_r+0x65c>
 8007b72:	9308      	str	r3, [sp, #32]
 8007b74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b76:	9303      	str	r3, [sp, #12]
 8007b78:	e046      	b.n	8007c08 <_dtoa_r+0x700>
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	4b2e      	ldr	r3, [pc, #184]	; (8007c38 <_dtoa_r+0x730>)
 8007b7e:	f7fa f879 	bl	8001c74 <__aeabi_dmul>
 8007b82:	0006      	movs	r6, r0
 8007b84:	000f      	movs	r7, r1
 8007b86:	e7b2      	b.n	8007aee <_dtoa_r+0x5e6>
 8007b88:	9b06      	ldr	r3, [sp, #24]
 8007b8a:	9a06      	ldr	r2, [sp, #24]
 8007b8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007b8e:	9b07      	ldr	r3, [sp, #28]
 8007b90:	9c08      	ldr	r4, [sp, #32]
 8007b92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b94:	3b01      	subs	r3, #1
 8007b96:	189b      	adds	r3, r3, r2
 8007b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b9a:	0032      	movs	r2, r6
 8007b9c:	003b      	movs	r3, r7
 8007b9e:	0020      	movs	r0, r4
 8007ba0:	0029      	movs	r1, r5
 8007ba2:	f7f9 fc6d 	bl	8001480 <__aeabi_ddiv>
 8007ba6:	f7fa fec7 	bl	8002938 <__aeabi_d2iz>
 8007baa:	9007      	str	r0, [sp, #28]
 8007bac:	f7fa fefa 	bl	80029a4 <__aeabi_i2d>
 8007bb0:	0032      	movs	r2, r6
 8007bb2:	003b      	movs	r3, r7
 8007bb4:	f7fa f85e 	bl	8001c74 <__aeabi_dmul>
 8007bb8:	0002      	movs	r2, r0
 8007bba:	000b      	movs	r3, r1
 8007bbc:	0020      	movs	r0, r4
 8007bbe:	0029      	movs	r1, r5
 8007bc0:	f7fa fb1a 	bl	80021f8 <__aeabi_dsub>
 8007bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc6:	001a      	movs	r2, r3
 8007bc8:	3201      	adds	r2, #1
 8007bca:	920a      	str	r2, [sp, #40]	; 0x28
 8007bcc:	9208      	str	r2, [sp, #32]
 8007bce:	9a07      	ldr	r2, [sp, #28]
 8007bd0:	3230      	adds	r2, #48	; 0x30
 8007bd2:	701a      	strb	r2, [r3, #0]
 8007bd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d14f      	bne.n	8007c7a <_dtoa_r+0x772>
 8007bda:	0002      	movs	r2, r0
 8007bdc:	000b      	movs	r3, r1
 8007bde:	f7f9 f8ef 	bl	8000dc0 <__aeabi_dadd>
 8007be2:	0032      	movs	r2, r6
 8007be4:	003b      	movs	r3, r7
 8007be6:	0004      	movs	r4, r0
 8007be8:	000d      	movs	r5, r1
 8007bea:	f7f8 fc49 	bl	8000480 <__aeabi_dcmpgt>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d12e      	bne.n	8007c50 <_dtoa_r+0x748>
 8007bf2:	0032      	movs	r2, r6
 8007bf4:	003b      	movs	r3, r7
 8007bf6:	0020      	movs	r0, r4
 8007bf8:	0029      	movs	r1, r5
 8007bfa:	f7f8 fc27 	bl	800044c <__aeabi_dcmpeq>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d002      	beq.n	8007c08 <_dtoa_r+0x700>
 8007c02:	9b07      	ldr	r3, [sp, #28]
 8007c04:	07de      	lsls	r6, r3, #31
 8007c06:	d423      	bmi.n	8007c50 <_dtoa_r+0x748>
 8007c08:	9905      	ldr	r1, [sp, #20]
 8007c0a:	9804      	ldr	r0, [sp, #16]
 8007c0c:	f000 fbd6 	bl	80083bc <_Bfree>
 8007c10:	2300      	movs	r3, #0
 8007c12:	9a08      	ldr	r2, [sp, #32]
 8007c14:	7013      	strb	r3, [r2, #0]
 8007c16:	9b03      	ldr	r3, [sp, #12]
 8007c18:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d100      	bne.n	8007c26 <_dtoa_r+0x71e>
 8007c24:	e4ba      	b.n	800759c <_dtoa_r+0x94>
 8007c26:	9a08      	ldr	r2, [sp, #32]
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	e4b7      	b.n	800759c <_dtoa_r+0x94>
 8007c2c:	0800af28 	.word	0x0800af28
 8007c30:	0800af00 	.word	0x0800af00
 8007c34:	3ff00000 	.word	0x3ff00000
 8007c38:	40240000 	.word	0x40240000
 8007c3c:	401c0000 	.word	0x401c0000
 8007c40:	fcc00000 	.word	0xfcc00000
 8007c44:	40140000 	.word	0x40140000
 8007c48:	7cc00000 	.word	0x7cc00000
 8007c4c:	3fe00000 	.word	0x3fe00000
 8007c50:	9b03      	ldr	r3, [sp, #12]
 8007c52:	930e      	str	r3, [sp, #56]	; 0x38
 8007c54:	9b08      	ldr	r3, [sp, #32]
 8007c56:	9308      	str	r3, [sp, #32]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	781a      	ldrb	r2, [r3, #0]
 8007c5c:	2a39      	cmp	r2, #57	; 0x39
 8007c5e:	d108      	bne.n	8007c72 <_dtoa_r+0x76a>
 8007c60:	9a06      	ldr	r2, [sp, #24]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d1f7      	bne.n	8007c56 <_dtoa_r+0x74e>
 8007c66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c68:	9906      	ldr	r1, [sp, #24]
 8007c6a:	3201      	adds	r2, #1
 8007c6c:	920e      	str	r2, [sp, #56]	; 0x38
 8007c6e:	2230      	movs	r2, #48	; 0x30
 8007c70:	700a      	strb	r2, [r1, #0]
 8007c72:	781a      	ldrb	r2, [r3, #0]
 8007c74:	3201      	adds	r2, #1
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	e77c      	b.n	8007b74 <_dtoa_r+0x66c>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4ba9      	ldr	r3, [pc, #676]	; (8007f24 <_dtoa_r+0xa1c>)
 8007c7e:	f7f9 fff9 	bl	8001c74 <__aeabi_dmul>
 8007c82:	2200      	movs	r2, #0
 8007c84:	2300      	movs	r3, #0
 8007c86:	0004      	movs	r4, r0
 8007c88:	000d      	movs	r5, r1
 8007c8a:	f7f8 fbdf 	bl	800044c <__aeabi_dcmpeq>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d100      	bne.n	8007c94 <_dtoa_r+0x78c>
 8007c92:	e782      	b.n	8007b9a <_dtoa_r+0x692>
 8007c94:	e7b8      	b.n	8007c08 <_dtoa_r+0x700>
 8007c96:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007c98:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007c9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c9c:	2f00      	cmp	r7, #0
 8007c9e:	d012      	beq.n	8007cc6 <_dtoa_r+0x7be>
 8007ca0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ca2:	2a01      	cmp	r2, #1
 8007ca4:	dc6e      	bgt.n	8007d84 <_dtoa_r+0x87c>
 8007ca6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ca8:	2a00      	cmp	r2, #0
 8007caa:	d065      	beq.n	8007d78 <_dtoa_r+0x870>
 8007cac:	4a9e      	ldr	r2, [pc, #632]	; (8007f28 <_dtoa_r+0xa20>)
 8007cae:	189b      	adds	r3, r3, r2
 8007cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	18d2      	adds	r2, r2, r3
 8007cb6:	920a      	str	r2, [sp, #40]	; 0x28
 8007cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cba:	9804      	ldr	r0, [sp, #16]
 8007cbc:	18d3      	adds	r3, r2, r3
 8007cbe:	930c      	str	r3, [sp, #48]	; 0x30
 8007cc0:	f000 fc78 	bl	80085b4 <__i2b>
 8007cc4:	0007      	movs	r7, r0
 8007cc6:	2c00      	cmp	r4, #0
 8007cc8:	d00e      	beq.n	8007ce8 <_dtoa_r+0x7e0>
 8007cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	dd0b      	ble.n	8007ce8 <_dtoa_r+0x7e0>
 8007cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cd2:	0023      	movs	r3, r4
 8007cd4:	4294      	cmp	r4, r2
 8007cd6:	dd00      	ble.n	8007cda <_dtoa_r+0x7d2>
 8007cd8:	0013      	movs	r3, r2
 8007cda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cdc:	1ae4      	subs	r4, r4, r3
 8007cde:	1ad2      	subs	r2, r2, r3
 8007ce0:	920a      	str	r2, [sp, #40]	; 0x28
 8007ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d01e      	beq.n	8007d2c <_dtoa_r+0x824>
 8007cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d05c      	beq.n	8007dae <_dtoa_r+0x8a6>
 8007cf4:	2d00      	cmp	r5, #0
 8007cf6:	dd10      	ble.n	8007d1a <_dtoa_r+0x812>
 8007cf8:	0039      	movs	r1, r7
 8007cfa:	002a      	movs	r2, r5
 8007cfc:	9804      	ldr	r0, [sp, #16]
 8007cfe:	f000 fd21 	bl	8008744 <__pow5mult>
 8007d02:	9a05      	ldr	r2, [sp, #20]
 8007d04:	0001      	movs	r1, r0
 8007d06:	0007      	movs	r7, r0
 8007d08:	9804      	ldr	r0, [sp, #16]
 8007d0a:	f000 fc6b 	bl	80085e4 <__multiply>
 8007d0e:	0006      	movs	r6, r0
 8007d10:	9905      	ldr	r1, [sp, #20]
 8007d12:	9804      	ldr	r0, [sp, #16]
 8007d14:	f000 fb52 	bl	80083bc <_Bfree>
 8007d18:	9605      	str	r6, [sp, #20]
 8007d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d1c:	1b5a      	subs	r2, r3, r5
 8007d1e:	42ab      	cmp	r3, r5
 8007d20:	d004      	beq.n	8007d2c <_dtoa_r+0x824>
 8007d22:	9905      	ldr	r1, [sp, #20]
 8007d24:	9804      	ldr	r0, [sp, #16]
 8007d26:	f000 fd0d 	bl	8008744 <__pow5mult>
 8007d2a:	9005      	str	r0, [sp, #20]
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	9804      	ldr	r0, [sp, #16]
 8007d30:	f000 fc40 	bl	80085b4 <__i2b>
 8007d34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d36:	0006      	movs	r6, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	dd3a      	ble.n	8007db2 <_dtoa_r+0x8aa>
 8007d3c:	001a      	movs	r2, r3
 8007d3e:	0001      	movs	r1, r0
 8007d40:	9804      	ldr	r0, [sp, #16]
 8007d42:	f000 fcff 	bl	8008744 <__pow5mult>
 8007d46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d48:	0006      	movs	r6, r0
 8007d4a:	2500      	movs	r5, #0
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	dc38      	bgt.n	8007dc2 <_dtoa_r+0x8ba>
 8007d50:	2500      	movs	r5, #0
 8007d52:	9b08      	ldr	r3, [sp, #32]
 8007d54:	42ab      	cmp	r3, r5
 8007d56:	d130      	bne.n	8007dba <_dtoa_r+0x8b2>
 8007d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d5a:	031b      	lsls	r3, r3, #12
 8007d5c:	42ab      	cmp	r3, r5
 8007d5e:	d12c      	bne.n	8007dba <_dtoa_r+0x8b2>
 8007d60:	4b72      	ldr	r3, [pc, #456]	; (8007f2c <_dtoa_r+0xa24>)
 8007d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d64:	4213      	tst	r3, r2
 8007d66:	d028      	beq.n	8007dba <_dtoa_r+0x8b2>
 8007d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d6a:	3501      	adds	r5, #1
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d72:	3301      	adds	r3, #1
 8007d74:	930c      	str	r3, [sp, #48]	; 0x30
 8007d76:	e020      	b.n	8007dba <_dtoa_r+0x8b2>
 8007d78:	2336      	movs	r3, #54	; 0x36
 8007d7a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d7c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007d7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d80:	1a9b      	subs	r3, r3, r2
 8007d82:	e795      	b.n	8007cb0 <_dtoa_r+0x7a8>
 8007d84:	9b07      	ldr	r3, [sp, #28]
 8007d86:	1e5d      	subs	r5, r3, #1
 8007d88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d8a:	42ab      	cmp	r3, r5
 8007d8c:	db07      	blt.n	8007d9e <_dtoa_r+0x896>
 8007d8e:	1b5d      	subs	r5, r3, r5
 8007d90:	9b07      	ldr	r3, [sp, #28]
 8007d92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	da8b      	bge.n	8007cb0 <_dtoa_r+0x7a8>
 8007d98:	1ae4      	subs	r4, r4, r3
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	e788      	b.n	8007cb0 <_dtoa_r+0x7a8>
 8007d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007da0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007da2:	1aeb      	subs	r3, r5, r3
 8007da4:	18d3      	adds	r3, r2, r3
 8007da6:	950d      	str	r5, [sp, #52]	; 0x34
 8007da8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007daa:	2500      	movs	r5, #0
 8007dac:	e7f0      	b.n	8007d90 <_dtoa_r+0x888>
 8007dae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007db0:	e7b7      	b.n	8007d22 <_dtoa_r+0x81a>
 8007db2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007db4:	2500      	movs	r5, #0
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	ddca      	ble.n	8007d50 <_dtoa_r+0x848>
 8007dba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007dbc:	2001      	movs	r0, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d008      	beq.n	8007dd4 <_dtoa_r+0x8cc>
 8007dc2:	6933      	ldr	r3, [r6, #16]
 8007dc4:	3303      	adds	r3, #3
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	18f3      	adds	r3, r6, r3
 8007dca:	6858      	ldr	r0, [r3, #4]
 8007dcc:	f000 fbaa 	bl	8008524 <__hi0bits>
 8007dd0:	2320      	movs	r3, #32
 8007dd2:	1a18      	subs	r0, r3, r0
 8007dd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dd6:	1818      	adds	r0, r3, r0
 8007dd8:	0002      	movs	r2, r0
 8007dda:	231f      	movs	r3, #31
 8007ddc:	401a      	ands	r2, r3
 8007dde:	4218      	tst	r0, r3
 8007de0:	d047      	beq.n	8007e72 <_dtoa_r+0x96a>
 8007de2:	3301      	adds	r3, #1
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	dd3f      	ble.n	8007e6a <_dtoa_r+0x962>
 8007dea:	231c      	movs	r3, #28
 8007dec:	1a9b      	subs	r3, r3, r2
 8007dee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007df0:	18e4      	adds	r4, r4, r3
 8007df2:	18d2      	adds	r2, r2, r3
 8007df4:	920a      	str	r2, [sp, #40]	; 0x28
 8007df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007df8:	18d3      	adds	r3, r2, r3
 8007dfa:	930c      	str	r3, [sp, #48]	; 0x30
 8007dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	dd05      	ble.n	8007e0e <_dtoa_r+0x906>
 8007e02:	001a      	movs	r2, r3
 8007e04:	9905      	ldr	r1, [sp, #20]
 8007e06:	9804      	ldr	r0, [sp, #16]
 8007e08:	f000 fcf8 	bl	80087fc <__lshift>
 8007e0c:	9005      	str	r0, [sp, #20]
 8007e0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	dd05      	ble.n	8007e20 <_dtoa_r+0x918>
 8007e14:	0031      	movs	r1, r6
 8007e16:	001a      	movs	r2, r3
 8007e18:	9804      	ldr	r0, [sp, #16]
 8007e1a:	f000 fcef 	bl	80087fc <__lshift>
 8007e1e:	0006      	movs	r6, r0
 8007e20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d027      	beq.n	8007e76 <_dtoa_r+0x96e>
 8007e26:	0031      	movs	r1, r6
 8007e28:	9805      	ldr	r0, [sp, #20]
 8007e2a:	f000 fd55 	bl	80088d8 <__mcmp>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	da21      	bge.n	8007e76 <_dtoa_r+0x96e>
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	220a      	movs	r2, #10
 8007e36:	3b01      	subs	r3, #1
 8007e38:	9303      	str	r3, [sp, #12]
 8007e3a:	9905      	ldr	r1, [sp, #20]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9804      	ldr	r0, [sp, #16]
 8007e40:	f000 fae0 	bl	8008404 <__multadd>
 8007e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e46:	9005      	str	r0, [sp, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d100      	bne.n	8007e4e <_dtoa_r+0x946>
 8007e4c:	e15d      	b.n	800810a <_dtoa_r+0xc02>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	0039      	movs	r1, r7
 8007e52:	220a      	movs	r2, #10
 8007e54:	9804      	ldr	r0, [sp, #16]
 8007e56:	f000 fad5 	bl	8008404 <__multadd>
 8007e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e5c:	0007      	movs	r7, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	dc49      	bgt.n	8007ef6 <_dtoa_r+0x9ee>
 8007e62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	dc0e      	bgt.n	8007e86 <_dtoa_r+0x97e>
 8007e68:	e045      	b.n	8007ef6 <_dtoa_r+0x9ee>
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	d0c6      	beq.n	8007dfc <_dtoa_r+0x8f4>
 8007e6e:	331c      	adds	r3, #28
 8007e70:	e7bd      	b.n	8007dee <_dtoa_r+0x8e6>
 8007e72:	0013      	movs	r3, r2
 8007e74:	e7fb      	b.n	8007e6e <_dtoa_r+0x966>
 8007e76:	9b07      	ldr	r3, [sp, #28]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	dc36      	bgt.n	8007eea <_dtoa_r+0x9e2>
 8007e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	dd33      	ble.n	8007eea <_dtoa_r+0x9e2>
 8007e82:	9b07      	ldr	r3, [sp, #28]
 8007e84:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10c      	bne.n	8007ea6 <_dtoa_r+0x99e>
 8007e8c:	0031      	movs	r1, r6
 8007e8e:	2205      	movs	r2, #5
 8007e90:	9804      	ldr	r0, [sp, #16]
 8007e92:	f000 fab7 	bl	8008404 <__multadd>
 8007e96:	0006      	movs	r6, r0
 8007e98:	0001      	movs	r1, r0
 8007e9a:	9805      	ldr	r0, [sp, #20]
 8007e9c:	f000 fd1c 	bl	80088d8 <__mcmp>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	dd00      	ble.n	8007ea6 <_dtoa_r+0x99e>
 8007ea4:	e59f      	b.n	80079e6 <_dtoa_r+0x4de>
 8007ea6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ea8:	43db      	mvns	r3, r3
 8007eaa:	9303      	str	r3, [sp, #12]
 8007eac:	9b06      	ldr	r3, [sp, #24]
 8007eae:	9308      	str	r3, [sp, #32]
 8007eb0:	2500      	movs	r5, #0
 8007eb2:	0031      	movs	r1, r6
 8007eb4:	9804      	ldr	r0, [sp, #16]
 8007eb6:	f000 fa81 	bl	80083bc <_Bfree>
 8007eba:	2f00      	cmp	r7, #0
 8007ebc:	d100      	bne.n	8007ec0 <_dtoa_r+0x9b8>
 8007ebe:	e6a3      	b.n	8007c08 <_dtoa_r+0x700>
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	d005      	beq.n	8007ed0 <_dtoa_r+0x9c8>
 8007ec4:	42bd      	cmp	r5, r7
 8007ec6:	d003      	beq.n	8007ed0 <_dtoa_r+0x9c8>
 8007ec8:	0029      	movs	r1, r5
 8007eca:	9804      	ldr	r0, [sp, #16]
 8007ecc:	f000 fa76 	bl	80083bc <_Bfree>
 8007ed0:	0039      	movs	r1, r7
 8007ed2:	9804      	ldr	r0, [sp, #16]
 8007ed4:	f000 fa72 	bl	80083bc <_Bfree>
 8007ed8:	e696      	b.n	8007c08 <_dtoa_r+0x700>
 8007eda:	2600      	movs	r6, #0
 8007edc:	0037      	movs	r7, r6
 8007ede:	e7e2      	b.n	8007ea6 <_dtoa_r+0x99e>
 8007ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ee2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007ee4:	9303      	str	r3, [sp, #12]
 8007ee6:	0037      	movs	r7, r6
 8007ee8:	e57d      	b.n	80079e6 <_dtoa_r+0x4de>
 8007eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d100      	bne.n	8007ef2 <_dtoa_r+0x9ea>
 8007ef0:	e0c3      	b.n	800807a <_dtoa_r+0xb72>
 8007ef2:	9b07      	ldr	r3, [sp, #28]
 8007ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ef6:	2c00      	cmp	r4, #0
 8007ef8:	dd05      	ble.n	8007f06 <_dtoa_r+0x9fe>
 8007efa:	0039      	movs	r1, r7
 8007efc:	0022      	movs	r2, r4
 8007efe:	9804      	ldr	r0, [sp, #16]
 8007f00:	f000 fc7c 	bl	80087fc <__lshift>
 8007f04:	0007      	movs	r7, r0
 8007f06:	0038      	movs	r0, r7
 8007f08:	2d00      	cmp	r5, #0
 8007f0a:	d024      	beq.n	8007f56 <_dtoa_r+0xa4e>
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	9804      	ldr	r0, [sp, #16]
 8007f10:	f000 fa10 	bl	8008334 <_Balloc>
 8007f14:	1e04      	subs	r4, r0, #0
 8007f16:	d111      	bne.n	8007f3c <_dtoa_r+0xa34>
 8007f18:	0022      	movs	r2, r4
 8007f1a:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <_dtoa_r+0xa28>)
 8007f1c:	4805      	ldr	r0, [pc, #20]	; (8007f34 <_dtoa_r+0xa2c>)
 8007f1e:	4906      	ldr	r1, [pc, #24]	; (8007f38 <_dtoa_r+0xa30>)
 8007f20:	f7ff fb07 	bl	8007532 <_dtoa_r+0x2a>
 8007f24:	40240000 	.word	0x40240000
 8007f28:	00000433 	.word	0x00000433
 8007f2c:	7ff00000 	.word	0x7ff00000
 8007f30:	0800ae95 	.word	0x0800ae95
 8007f34:	0800ae3d 	.word	0x0800ae3d
 8007f38:	000002ef 	.word	0x000002ef
 8007f3c:	0039      	movs	r1, r7
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	310c      	adds	r1, #12
 8007f42:	3202      	adds	r2, #2
 8007f44:	0092      	lsls	r2, r2, #2
 8007f46:	300c      	adds	r0, #12
 8007f48:	f001 ffb2 	bl	8009eb0 <memcpy>
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	0021      	movs	r1, r4
 8007f50:	9804      	ldr	r0, [sp, #16]
 8007f52:	f000 fc53 	bl	80087fc <__lshift>
 8007f56:	9b06      	ldr	r3, [sp, #24]
 8007f58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f5a:	9307      	str	r3, [sp, #28]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	189b      	adds	r3, r3, r2
 8007f60:	2201      	movs	r2, #1
 8007f62:	003d      	movs	r5, r7
 8007f64:	0007      	movs	r7, r0
 8007f66:	930e      	str	r3, [sp, #56]	; 0x38
 8007f68:	9b08      	ldr	r3, [sp, #32]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8007f6e:	0031      	movs	r1, r6
 8007f70:	9805      	ldr	r0, [sp, #20]
 8007f72:	f7ff fa39 	bl	80073e8 <quorem>
 8007f76:	0029      	movs	r1, r5
 8007f78:	0004      	movs	r4, r0
 8007f7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f7c:	9805      	ldr	r0, [sp, #20]
 8007f7e:	f000 fcab 	bl	80088d8 <__mcmp>
 8007f82:	003a      	movs	r2, r7
 8007f84:	900c      	str	r0, [sp, #48]	; 0x30
 8007f86:	0031      	movs	r1, r6
 8007f88:	9804      	ldr	r0, [sp, #16]
 8007f8a:	f000 fcc1 	bl	8008910 <__mdiff>
 8007f8e:	2201      	movs	r2, #1
 8007f90:	68c3      	ldr	r3, [r0, #12]
 8007f92:	3430      	adds	r4, #48	; 0x30
 8007f94:	9008      	str	r0, [sp, #32]
 8007f96:	920a      	str	r2, [sp, #40]	; 0x28
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d104      	bne.n	8007fa6 <_dtoa_r+0xa9e>
 8007f9c:	0001      	movs	r1, r0
 8007f9e:	9805      	ldr	r0, [sp, #20]
 8007fa0:	f000 fc9a 	bl	80088d8 <__mcmp>
 8007fa4:	900a      	str	r0, [sp, #40]	; 0x28
 8007fa6:	9908      	ldr	r1, [sp, #32]
 8007fa8:	9804      	ldr	r0, [sp, #16]
 8007faa:	f000 fa07 	bl	80083bc <_Bfree>
 8007fae:	9b07      	ldr	r3, [sp, #28]
 8007fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	9308      	str	r3, [sp, #32]
 8007fb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	d109      	bne.n	8007fd4 <_dtoa_r+0xacc>
 8007fc0:	2c39      	cmp	r4, #57	; 0x39
 8007fc2:	d022      	beq.n	800800a <_dtoa_r+0xb02>
 8007fc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	dd01      	ble.n	8007fce <_dtoa_r+0xac6>
 8007fca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007fcc:	3431      	adds	r4, #49	; 0x31
 8007fce:	9b07      	ldr	r3, [sp, #28]
 8007fd0:	701c      	strb	r4, [r3, #0]
 8007fd2:	e76e      	b.n	8007eb2 <_dtoa_r+0x9aa>
 8007fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	db04      	blt.n	8007fe4 <_dtoa_r+0xadc>
 8007fda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	d11e      	bne.n	8008022 <_dtoa_r+0xb1a>
 8007fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	ddf1      	ble.n	8007fce <_dtoa_r+0xac6>
 8007fea:	9905      	ldr	r1, [sp, #20]
 8007fec:	2201      	movs	r2, #1
 8007fee:	9804      	ldr	r0, [sp, #16]
 8007ff0:	f000 fc04 	bl	80087fc <__lshift>
 8007ff4:	0031      	movs	r1, r6
 8007ff6:	9005      	str	r0, [sp, #20]
 8007ff8:	f000 fc6e 	bl	80088d8 <__mcmp>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	dc02      	bgt.n	8008006 <_dtoa_r+0xafe>
 8008000:	d1e5      	bne.n	8007fce <_dtoa_r+0xac6>
 8008002:	07e3      	lsls	r3, r4, #31
 8008004:	d5e3      	bpl.n	8007fce <_dtoa_r+0xac6>
 8008006:	2c39      	cmp	r4, #57	; 0x39
 8008008:	d1df      	bne.n	8007fca <_dtoa_r+0xac2>
 800800a:	2339      	movs	r3, #57	; 0x39
 800800c:	9a07      	ldr	r2, [sp, #28]
 800800e:	7013      	strb	r3, [r2, #0]
 8008010:	9b08      	ldr	r3, [sp, #32]
 8008012:	9308      	str	r3, [sp, #32]
 8008014:	3b01      	subs	r3, #1
 8008016:	781a      	ldrb	r2, [r3, #0]
 8008018:	2a39      	cmp	r2, #57	; 0x39
 800801a:	d063      	beq.n	80080e4 <_dtoa_r+0xbdc>
 800801c:	3201      	adds	r2, #1
 800801e:	701a      	strb	r2, [r3, #0]
 8008020:	e747      	b.n	8007eb2 <_dtoa_r+0x9aa>
 8008022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008024:	2b00      	cmp	r3, #0
 8008026:	dd03      	ble.n	8008030 <_dtoa_r+0xb28>
 8008028:	2c39      	cmp	r4, #57	; 0x39
 800802a:	d0ee      	beq.n	800800a <_dtoa_r+0xb02>
 800802c:	3401      	adds	r4, #1
 800802e:	e7ce      	b.n	8007fce <_dtoa_r+0xac6>
 8008030:	9b07      	ldr	r3, [sp, #28]
 8008032:	9a07      	ldr	r2, [sp, #28]
 8008034:	701c      	strb	r4, [r3, #0]
 8008036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008038:	4293      	cmp	r3, r2
 800803a:	d03e      	beq.n	80080ba <_dtoa_r+0xbb2>
 800803c:	2300      	movs	r3, #0
 800803e:	220a      	movs	r2, #10
 8008040:	9905      	ldr	r1, [sp, #20]
 8008042:	9804      	ldr	r0, [sp, #16]
 8008044:	f000 f9de 	bl	8008404 <__multadd>
 8008048:	2300      	movs	r3, #0
 800804a:	9005      	str	r0, [sp, #20]
 800804c:	220a      	movs	r2, #10
 800804e:	0029      	movs	r1, r5
 8008050:	9804      	ldr	r0, [sp, #16]
 8008052:	42bd      	cmp	r5, r7
 8008054:	d106      	bne.n	8008064 <_dtoa_r+0xb5c>
 8008056:	f000 f9d5 	bl	8008404 <__multadd>
 800805a:	0005      	movs	r5, r0
 800805c:	0007      	movs	r7, r0
 800805e:	9b08      	ldr	r3, [sp, #32]
 8008060:	9307      	str	r3, [sp, #28]
 8008062:	e784      	b.n	8007f6e <_dtoa_r+0xa66>
 8008064:	f000 f9ce 	bl	8008404 <__multadd>
 8008068:	0039      	movs	r1, r7
 800806a:	0005      	movs	r5, r0
 800806c:	2300      	movs	r3, #0
 800806e:	220a      	movs	r2, #10
 8008070:	9804      	ldr	r0, [sp, #16]
 8008072:	f000 f9c7 	bl	8008404 <__multadd>
 8008076:	0007      	movs	r7, r0
 8008078:	e7f1      	b.n	800805e <_dtoa_r+0xb56>
 800807a:	9b07      	ldr	r3, [sp, #28]
 800807c:	930b      	str	r3, [sp, #44]	; 0x2c
 800807e:	2500      	movs	r5, #0
 8008080:	0031      	movs	r1, r6
 8008082:	9805      	ldr	r0, [sp, #20]
 8008084:	f7ff f9b0 	bl	80073e8 <quorem>
 8008088:	9b06      	ldr	r3, [sp, #24]
 800808a:	3030      	adds	r0, #48	; 0x30
 800808c:	5558      	strb	r0, [r3, r5]
 800808e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008090:	3501      	adds	r5, #1
 8008092:	0004      	movs	r4, r0
 8008094:	42ab      	cmp	r3, r5
 8008096:	dd07      	ble.n	80080a8 <_dtoa_r+0xba0>
 8008098:	2300      	movs	r3, #0
 800809a:	220a      	movs	r2, #10
 800809c:	9905      	ldr	r1, [sp, #20]
 800809e:	9804      	ldr	r0, [sp, #16]
 80080a0:	f000 f9b0 	bl	8008404 <__multadd>
 80080a4:	9005      	str	r0, [sp, #20]
 80080a6:	e7eb      	b.n	8008080 <_dtoa_r+0xb78>
 80080a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080aa:	2301      	movs	r3, #1
 80080ac:	2a00      	cmp	r2, #0
 80080ae:	dd00      	ble.n	80080b2 <_dtoa_r+0xbaa>
 80080b0:	0013      	movs	r3, r2
 80080b2:	2500      	movs	r5, #0
 80080b4:	9a06      	ldr	r2, [sp, #24]
 80080b6:	18d3      	adds	r3, r2, r3
 80080b8:	9308      	str	r3, [sp, #32]
 80080ba:	9905      	ldr	r1, [sp, #20]
 80080bc:	2201      	movs	r2, #1
 80080be:	9804      	ldr	r0, [sp, #16]
 80080c0:	f000 fb9c 	bl	80087fc <__lshift>
 80080c4:	0031      	movs	r1, r6
 80080c6:	9005      	str	r0, [sp, #20]
 80080c8:	f000 fc06 	bl	80088d8 <__mcmp>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	dc9f      	bgt.n	8008010 <_dtoa_r+0xb08>
 80080d0:	d101      	bne.n	80080d6 <_dtoa_r+0xbce>
 80080d2:	07e4      	lsls	r4, r4, #31
 80080d4:	d49c      	bmi.n	8008010 <_dtoa_r+0xb08>
 80080d6:	9b08      	ldr	r3, [sp, #32]
 80080d8:	9308      	str	r3, [sp, #32]
 80080da:	3b01      	subs	r3, #1
 80080dc:	781a      	ldrb	r2, [r3, #0]
 80080de:	2a30      	cmp	r2, #48	; 0x30
 80080e0:	d0fa      	beq.n	80080d8 <_dtoa_r+0xbd0>
 80080e2:	e6e6      	b.n	8007eb2 <_dtoa_r+0x9aa>
 80080e4:	9a06      	ldr	r2, [sp, #24]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d193      	bne.n	8008012 <_dtoa_r+0xb0a>
 80080ea:	9b03      	ldr	r3, [sp, #12]
 80080ec:	3301      	adds	r3, #1
 80080ee:	9303      	str	r3, [sp, #12]
 80080f0:	2331      	movs	r3, #49	; 0x31
 80080f2:	7013      	strb	r3, [r2, #0]
 80080f4:	e6dd      	b.n	8007eb2 <_dtoa_r+0x9aa>
 80080f6:	4b09      	ldr	r3, [pc, #36]	; (800811c <_dtoa_r+0xc14>)
 80080f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80080fa:	9306      	str	r3, [sp, #24]
 80080fc:	4b08      	ldr	r3, [pc, #32]	; (8008120 <_dtoa_r+0xc18>)
 80080fe:	2a00      	cmp	r2, #0
 8008100:	d001      	beq.n	8008106 <_dtoa_r+0xbfe>
 8008102:	f7ff fa49 	bl	8007598 <_dtoa_r+0x90>
 8008106:	f7ff fa49 	bl	800759c <_dtoa_r+0x94>
 800810a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800810c:	2b00      	cmp	r3, #0
 800810e:	dcb6      	bgt.n	800807e <_dtoa_r+0xb76>
 8008110:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008112:	2b02      	cmp	r3, #2
 8008114:	dd00      	ble.n	8008118 <_dtoa_r+0xc10>
 8008116:	e6b6      	b.n	8007e86 <_dtoa_r+0x97e>
 8008118:	e7b1      	b.n	800807e <_dtoa_r+0xb76>
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	0800ae19 	.word	0x0800ae19
 8008120:	0800ae21 	.word	0x0800ae21

08008124 <_free_r>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	0005      	movs	r5, r0
 8008128:	2900      	cmp	r1, #0
 800812a:	d010      	beq.n	800814e <_free_r+0x2a>
 800812c:	1f0c      	subs	r4, r1, #4
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	da00      	bge.n	8008136 <_free_r+0x12>
 8008134:	18e4      	adds	r4, r4, r3
 8008136:	0028      	movs	r0, r5
 8008138:	f000 f8ec 	bl	8008314 <__malloc_lock>
 800813c:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <_free_r+0x90>)
 800813e:	6813      	ldr	r3, [r2, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d105      	bne.n	8008150 <_free_r+0x2c>
 8008144:	6063      	str	r3, [r4, #4]
 8008146:	6014      	str	r4, [r2, #0]
 8008148:	0028      	movs	r0, r5
 800814a:	f000 f8eb 	bl	8008324 <__malloc_unlock>
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	42a3      	cmp	r3, r4
 8008152:	d908      	bls.n	8008166 <_free_r+0x42>
 8008154:	6820      	ldr	r0, [r4, #0]
 8008156:	1821      	adds	r1, r4, r0
 8008158:	428b      	cmp	r3, r1
 800815a:	d1f3      	bne.n	8008144 <_free_r+0x20>
 800815c:	6819      	ldr	r1, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	1809      	adds	r1, r1, r0
 8008162:	6021      	str	r1, [r4, #0]
 8008164:	e7ee      	b.n	8008144 <_free_r+0x20>
 8008166:	001a      	movs	r2, r3
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <_free_r+0x4e>
 800816e:	42a3      	cmp	r3, r4
 8008170:	d9f9      	bls.n	8008166 <_free_r+0x42>
 8008172:	6811      	ldr	r1, [r2, #0]
 8008174:	1850      	adds	r0, r2, r1
 8008176:	42a0      	cmp	r0, r4
 8008178:	d10b      	bne.n	8008192 <_free_r+0x6e>
 800817a:	6820      	ldr	r0, [r4, #0]
 800817c:	1809      	adds	r1, r1, r0
 800817e:	1850      	adds	r0, r2, r1
 8008180:	6011      	str	r1, [r2, #0]
 8008182:	4283      	cmp	r3, r0
 8008184:	d1e0      	bne.n	8008148 <_free_r+0x24>
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	1841      	adds	r1, r0, r1
 800818c:	6011      	str	r1, [r2, #0]
 800818e:	6053      	str	r3, [r2, #4]
 8008190:	e7da      	b.n	8008148 <_free_r+0x24>
 8008192:	42a0      	cmp	r0, r4
 8008194:	d902      	bls.n	800819c <_free_r+0x78>
 8008196:	230c      	movs	r3, #12
 8008198:	602b      	str	r3, [r5, #0]
 800819a:	e7d5      	b.n	8008148 <_free_r+0x24>
 800819c:	6820      	ldr	r0, [r4, #0]
 800819e:	1821      	adds	r1, r4, r0
 80081a0:	428b      	cmp	r3, r1
 80081a2:	d103      	bne.n	80081ac <_free_r+0x88>
 80081a4:	6819      	ldr	r1, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	1809      	adds	r1, r1, r0
 80081aa:	6021      	str	r1, [r4, #0]
 80081ac:	6063      	str	r3, [r4, #4]
 80081ae:	6054      	str	r4, [r2, #4]
 80081b0:	e7ca      	b.n	8008148 <_free_r+0x24>
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	20000450 	.word	0x20000450

080081b8 <malloc>:
 80081b8:	b510      	push	{r4, lr}
 80081ba:	4b03      	ldr	r3, [pc, #12]	; (80081c8 <malloc+0x10>)
 80081bc:	0001      	movs	r1, r0
 80081be:	6818      	ldr	r0, [r3, #0]
 80081c0:	f000 f826 	bl	8008210 <_malloc_r>
 80081c4:	bd10      	pop	{r4, pc}
 80081c6:	46c0      	nop			; (mov r8, r8)
 80081c8:	20000064 	.word	0x20000064

080081cc <sbrk_aligned>:
 80081cc:	b570      	push	{r4, r5, r6, lr}
 80081ce:	4e0f      	ldr	r6, [pc, #60]	; (800820c <sbrk_aligned+0x40>)
 80081d0:	000d      	movs	r5, r1
 80081d2:	6831      	ldr	r1, [r6, #0]
 80081d4:	0004      	movs	r4, r0
 80081d6:	2900      	cmp	r1, #0
 80081d8:	d102      	bne.n	80081e0 <sbrk_aligned+0x14>
 80081da:	f001 fe57 	bl	8009e8c <_sbrk_r>
 80081de:	6030      	str	r0, [r6, #0]
 80081e0:	0029      	movs	r1, r5
 80081e2:	0020      	movs	r0, r4
 80081e4:	f001 fe52 	bl	8009e8c <_sbrk_r>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d00a      	beq.n	8008202 <sbrk_aligned+0x36>
 80081ec:	2303      	movs	r3, #3
 80081ee:	1cc5      	adds	r5, r0, #3
 80081f0:	439d      	bics	r5, r3
 80081f2:	42a8      	cmp	r0, r5
 80081f4:	d007      	beq.n	8008206 <sbrk_aligned+0x3a>
 80081f6:	1a29      	subs	r1, r5, r0
 80081f8:	0020      	movs	r0, r4
 80081fa:	f001 fe47 	bl	8009e8c <_sbrk_r>
 80081fe:	3001      	adds	r0, #1
 8008200:	d101      	bne.n	8008206 <sbrk_aligned+0x3a>
 8008202:	2501      	movs	r5, #1
 8008204:	426d      	negs	r5, r5
 8008206:	0028      	movs	r0, r5
 8008208:	bd70      	pop	{r4, r5, r6, pc}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	20000454 	.word	0x20000454

08008210 <_malloc_r>:
 8008210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008212:	2203      	movs	r2, #3
 8008214:	1ccb      	adds	r3, r1, #3
 8008216:	4393      	bics	r3, r2
 8008218:	3308      	adds	r3, #8
 800821a:	0006      	movs	r6, r0
 800821c:	001f      	movs	r7, r3
 800821e:	2b0c      	cmp	r3, #12
 8008220:	d238      	bcs.n	8008294 <_malloc_r+0x84>
 8008222:	270c      	movs	r7, #12
 8008224:	42b9      	cmp	r1, r7
 8008226:	d837      	bhi.n	8008298 <_malloc_r+0x88>
 8008228:	0030      	movs	r0, r6
 800822a:	f000 f873 	bl	8008314 <__malloc_lock>
 800822e:	4b38      	ldr	r3, [pc, #224]	; (8008310 <_malloc_r+0x100>)
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	001c      	movs	r4, r3
 8008236:	2c00      	cmp	r4, #0
 8008238:	d133      	bne.n	80082a2 <_malloc_r+0x92>
 800823a:	0039      	movs	r1, r7
 800823c:	0030      	movs	r0, r6
 800823e:	f7ff ffc5 	bl	80081cc <sbrk_aligned>
 8008242:	0004      	movs	r4, r0
 8008244:	1c43      	adds	r3, r0, #1
 8008246:	d15e      	bne.n	8008306 <_malloc_r+0xf6>
 8008248:	9b00      	ldr	r3, [sp, #0]
 800824a:	681c      	ldr	r4, [r3, #0]
 800824c:	0025      	movs	r5, r4
 800824e:	2d00      	cmp	r5, #0
 8008250:	d14e      	bne.n	80082f0 <_malloc_r+0xe0>
 8008252:	2c00      	cmp	r4, #0
 8008254:	d051      	beq.n	80082fa <_malloc_r+0xea>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	0029      	movs	r1, r5
 800825a:	18e3      	adds	r3, r4, r3
 800825c:	0030      	movs	r0, r6
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	f001 fe14 	bl	8009e8c <_sbrk_r>
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	4283      	cmp	r3, r0
 8008268:	d147      	bne.n	80082fa <_malloc_r+0xea>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	0030      	movs	r0, r6
 800826e:	1aff      	subs	r7, r7, r3
 8008270:	0039      	movs	r1, r7
 8008272:	f7ff ffab 	bl	80081cc <sbrk_aligned>
 8008276:	3001      	adds	r0, #1
 8008278:	d03f      	beq.n	80082fa <_malloc_r+0xea>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	19db      	adds	r3, r3, r7
 800827e:	6023      	str	r3, [r4, #0]
 8008280:	9b00      	ldr	r3, [sp, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d040      	beq.n	800830a <_malloc_r+0xfa>
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	42a2      	cmp	r2, r4
 800828c:	d133      	bne.n	80082f6 <_malloc_r+0xe6>
 800828e:	2200      	movs	r2, #0
 8008290:	605a      	str	r2, [r3, #4]
 8008292:	e014      	b.n	80082be <_malloc_r+0xae>
 8008294:	2b00      	cmp	r3, #0
 8008296:	dac5      	bge.n	8008224 <_malloc_r+0x14>
 8008298:	230c      	movs	r3, #12
 800829a:	2500      	movs	r5, #0
 800829c:	6033      	str	r3, [r6, #0]
 800829e:	0028      	movs	r0, r5
 80082a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082a2:	6821      	ldr	r1, [r4, #0]
 80082a4:	1bc9      	subs	r1, r1, r7
 80082a6:	d420      	bmi.n	80082ea <_malloc_r+0xda>
 80082a8:	290b      	cmp	r1, #11
 80082aa:	d918      	bls.n	80082de <_malloc_r+0xce>
 80082ac:	19e2      	adds	r2, r4, r7
 80082ae:	6027      	str	r7, [r4, #0]
 80082b0:	42a3      	cmp	r3, r4
 80082b2:	d112      	bne.n	80082da <_malloc_r+0xca>
 80082b4:	9b00      	ldr	r3, [sp, #0]
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	6863      	ldr	r3, [r4, #4]
 80082ba:	6011      	str	r1, [r2, #0]
 80082bc:	6053      	str	r3, [r2, #4]
 80082be:	0030      	movs	r0, r6
 80082c0:	0025      	movs	r5, r4
 80082c2:	f000 f82f 	bl	8008324 <__malloc_unlock>
 80082c6:	2207      	movs	r2, #7
 80082c8:	350b      	adds	r5, #11
 80082ca:	1d23      	adds	r3, r4, #4
 80082cc:	4395      	bics	r5, r2
 80082ce:	1aea      	subs	r2, r5, r3
 80082d0:	429d      	cmp	r5, r3
 80082d2:	d0e4      	beq.n	800829e <_malloc_r+0x8e>
 80082d4:	1b5b      	subs	r3, r3, r5
 80082d6:	50a3      	str	r3, [r4, r2]
 80082d8:	e7e1      	b.n	800829e <_malloc_r+0x8e>
 80082da:	605a      	str	r2, [r3, #4]
 80082dc:	e7ec      	b.n	80082b8 <_malloc_r+0xa8>
 80082de:	6862      	ldr	r2, [r4, #4]
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	d1d5      	bne.n	8008290 <_malloc_r+0x80>
 80082e4:	9b00      	ldr	r3, [sp, #0]
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	e7e9      	b.n	80082be <_malloc_r+0xae>
 80082ea:	0023      	movs	r3, r4
 80082ec:	6864      	ldr	r4, [r4, #4]
 80082ee:	e7a2      	b.n	8008236 <_malloc_r+0x26>
 80082f0:	002c      	movs	r4, r5
 80082f2:	686d      	ldr	r5, [r5, #4]
 80082f4:	e7ab      	b.n	800824e <_malloc_r+0x3e>
 80082f6:	0013      	movs	r3, r2
 80082f8:	e7c4      	b.n	8008284 <_malloc_r+0x74>
 80082fa:	230c      	movs	r3, #12
 80082fc:	0030      	movs	r0, r6
 80082fe:	6033      	str	r3, [r6, #0]
 8008300:	f000 f810 	bl	8008324 <__malloc_unlock>
 8008304:	e7cb      	b.n	800829e <_malloc_r+0x8e>
 8008306:	6027      	str	r7, [r4, #0]
 8008308:	e7d9      	b.n	80082be <_malloc_r+0xae>
 800830a:	605b      	str	r3, [r3, #4]
 800830c:	deff      	udf	#255	; 0xff
 800830e:	46c0      	nop			; (mov r8, r8)
 8008310:	20000450 	.word	0x20000450

08008314 <__malloc_lock>:
 8008314:	b510      	push	{r4, lr}
 8008316:	4802      	ldr	r0, [pc, #8]	; (8008320 <__malloc_lock+0xc>)
 8008318:	f7ff f855 	bl	80073c6 <__retarget_lock_acquire_recursive>
 800831c:	bd10      	pop	{r4, pc}
 800831e:	46c0      	nop			; (mov r8, r8)
 8008320:	2000044c 	.word	0x2000044c

08008324 <__malloc_unlock>:
 8008324:	b510      	push	{r4, lr}
 8008326:	4802      	ldr	r0, [pc, #8]	; (8008330 <__malloc_unlock+0xc>)
 8008328:	f7ff f84e 	bl	80073c8 <__retarget_lock_release_recursive>
 800832c:	bd10      	pop	{r4, pc}
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	2000044c 	.word	0x2000044c

08008334 <_Balloc>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	69c5      	ldr	r5, [r0, #28]
 8008338:	0006      	movs	r6, r0
 800833a:	000c      	movs	r4, r1
 800833c:	2d00      	cmp	r5, #0
 800833e:	d10e      	bne.n	800835e <_Balloc+0x2a>
 8008340:	2010      	movs	r0, #16
 8008342:	f7ff ff39 	bl	80081b8 <malloc>
 8008346:	1e02      	subs	r2, r0, #0
 8008348:	61f0      	str	r0, [r6, #28]
 800834a:	d104      	bne.n	8008356 <_Balloc+0x22>
 800834c:	216b      	movs	r1, #107	; 0x6b
 800834e:	4b19      	ldr	r3, [pc, #100]	; (80083b4 <_Balloc+0x80>)
 8008350:	4819      	ldr	r0, [pc, #100]	; (80083b8 <_Balloc+0x84>)
 8008352:	f001 fdbd 	bl	8009ed0 <__assert_func>
 8008356:	6045      	str	r5, [r0, #4]
 8008358:	6085      	str	r5, [r0, #8]
 800835a:	6005      	str	r5, [r0, #0]
 800835c:	60c5      	str	r5, [r0, #12]
 800835e:	69f5      	ldr	r5, [r6, #28]
 8008360:	68eb      	ldr	r3, [r5, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d013      	beq.n	800838e <_Balloc+0x5a>
 8008366:	69f3      	ldr	r3, [r6, #28]
 8008368:	00a2      	lsls	r2, r4, #2
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	189b      	adds	r3, r3, r2
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	2800      	cmp	r0, #0
 8008372:	d118      	bne.n	80083a6 <_Balloc+0x72>
 8008374:	2101      	movs	r1, #1
 8008376:	000d      	movs	r5, r1
 8008378:	40a5      	lsls	r5, r4
 800837a:	1d6a      	adds	r2, r5, #5
 800837c:	0030      	movs	r0, r6
 800837e:	0092      	lsls	r2, r2, #2
 8008380:	f001 fdc4 	bl	8009f0c <_calloc_r>
 8008384:	2800      	cmp	r0, #0
 8008386:	d00c      	beq.n	80083a2 <_Balloc+0x6e>
 8008388:	6044      	str	r4, [r0, #4]
 800838a:	6085      	str	r5, [r0, #8]
 800838c:	e00d      	b.n	80083aa <_Balloc+0x76>
 800838e:	2221      	movs	r2, #33	; 0x21
 8008390:	2104      	movs	r1, #4
 8008392:	0030      	movs	r0, r6
 8008394:	f001 fdba 	bl	8009f0c <_calloc_r>
 8008398:	69f3      	ldr	r3, [r6, #28]
 800839a:	60e8      	str	r0, [r5, #12]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e1      	bne.n	8008366 <_Balloc+0x32>
 80083a2:	2000      	movs	r0, #0
 80083a4:	bd70      	pop	{r4, r5, r6, pc}
 80083a6:	6802      	ldr	r2, [r0, #0]
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	2300      	movs	r3, #0
 80083ac:	6103      	str	r3, [r0, #16]
 80083ae:	60c3      	str	r3, [r0, #12]
 80083b0:	e7f8      	b.n	80083a4 <_Balloc+0x70>
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	0800ae26 	.word	0x0800ae26
 80083b8:	0800aea6 	.word	0x0800aea6

080083bc <_Bfree>:
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	69c6      	ldr	r6, [r0, #28]
 80083c0:	0005      	movs	r5, r0
 80083c2:	000c      	movs	r4, r1
 80083c4:	2e00      	cmp	r6, #0
 80083c6:	d10e      	bne.n	80083e6 <_Bfree+0x2a>
 80083c8:	2010      	movs	r0, #16
 80083ca:	f7ff fef5 	bl	80081b8 <malloc>
 80083ce:	1e02      	subs	r2, r0, #0
 80083d0:	61e8      	str	r0, [r5, #28]
 80083d2:	d104      	bne.n	80083de <_Bfree+0x22>
 80083d4:	218f      	movs	r1, #143	; 0x8f
 80083d6:	4b09      	ldr	r3, [pc, #36]	; (80083fc <_Bfree+0x40>)
 80083d8:	4809      	ldr	r0, [pc, #36]	; (8008400 <_Bfree+0x44>)
 80083da:	f001 fd79 	bl	8009ed0 <__assert_func>
 80083de:	6046      	str	r6, [r0, #4]
 80083e0:	6086      	str	r6, [r0, #8]
 80083e2:	6006      	str	r6, [r0, #0]
 80083e4:	60c6      	str	r6, [r0, #12]
 80083e6:	2c00      	cmp	r4, #0
 80083e8:	d007      	beq.n	80083fa <_Bfree+0x3e>
 80083ea:	69eb      	ldr	r3, [r5, #28]
 80083ec:	6862      	ldr	r2, [r4, #4]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	0092      	lsls	r2, r2, #2
 80083f2:	189b      	adds	r3, r3, r2
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	6022      	str	r2, [r4, #0]
 80083f8:	601c      	str	r4, [r3, #0]
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
 80083fc:	0800ae26 	.word	0x0800ae26
 8008400:	0800aea6 	.word	0x0800aea6

08008404 <__multadd>:
 8008404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008406:	000e      	movs	r6, r1
 8008408:	9001      	str	r0, [sp, #4]
 800840a:	000c      	movs	r4, r1
 800840c:	001d      	movs	r5, r3
 800840e:	2000      	movs	r0, #0
 8008410:	690f      	ldr	r7, [r1, #16]
 8008412:	3614      	adds	r6, #20
 8008414:	6833      	ldr	r3, [r6, #0]
 8008416:	3001      	adds	r0, #1
 8008418:	b299      	uxth	r1, r3
 800841a:	4351      	muls	r1, r2
 800841c:	0c1b      	lsrs	r3, r3, #16
 800841e:	4353      	muls	r3, r2
 8008420:	1949      	adds	r1, r1, r5
 8008422:	0c0d      	lsrs	r5, r1, #16
 8008424:	195b      	adds	r3, r3, r5
 8008426:	0c1d      	lsrs	r5, r3, #16
 8008428:	b289      	uxth	r1, r1
 800842a:	041b      	lsls	r3, r3, #16
 800842c:	185b      	adds	r3, r3, r1
 800842e:	c608      	stmia	r6!, {r3}
 8008430:	4287      	cmp	r7, r0
 8008432:	dcef      	bgt.n	8008414 <__multadd+0x10>
 8008434:	2d00      	cmp	r5, #0
 8008436:	d022      	beq.n	800847e <__multadd+0x7a>
 8008438:	68a3      	ldr	r3, [r4, #8]
 800843a:	42bb      	cmp	r3, r7
 800843c:	dc19      	bgt.n	8008472 <__multadd+0x6e>
 800843e:	6861      	ldr	r1, [r4, #4]
 8008440:	9801      	ldr	r0, [sp, #4]
 8008442:	3101      	adds	r1, #1
 8008444:	f7ff ff76 	bl	8008334 <_Balloc>
 8008448:	1e06      	subs	r6, r0, #0
 800844a:	d105      	bne.n	8008458 <__multadd+0x54>
 800844c:	0032      	movs	r2, r6
 800844e:	21ba      	movs	r1, #186	; 0xba
 8008450:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <__multadd+0x80>)
 8008452:	480d      	ldr	r0, [pc, #52]	; (8008488 <__multadd+0x84>)
 8008454:	f001 fd3c 	bl	8009ed0 <__assert_func>
 8008458:	0021      	movs	r1, r4
 800845a:	6922      	ldr	r2, [r4, #16]
 800845c:	310c      	adds	r1, #12
 800845e:	3202      	adds	r2, #2
 8008460:	0092      	lsls	r2, r2, #2
 8008462:	300c      	adds	r0, #12
 8008464:	f001 fd24 	bl	8009eb0 <memcpy>
 8008468:	0021      	movs	r1, r4
 800846a:	9801      	ldr	r0, [sp, #4]
 800846c:	f7ff ffa6 	bl	80083bc <_Bfree>
 8008470:	0034      	movs	r4, r6
 8008472:	1d3b      	adds	r3, r7, #4
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	18e3      	adds	r3, r4, r3
 8008478:	605d      	str	r5, [r3, #4]
 800847a:	1c7b      	adds	r3, r7, #1
 800847c:	6123      	str	r3, [r4, #16]
 800847e:	0020      	movs	r0, r4
 8008480:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008482:	46c0      	nop			; (mov r8, r8)
 8008484:	0800ae95 	.word	0x0800ae95
 8008488:	0800aea6 	.word	0x0800aea6

0800848c <__s2b>:
 800848c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800848e:	0006      	movs	r6, r0
 8008490:	0018      	movs	r0, r3
 8008492:	000c      	movs	r4, r1
 8008494:	3008      	adds	r0, #8
 8008496:	2109      	movs	r1, #9
 8008498:	9301      	str	r3, [sp, #4]
 800849a:	0015      	movs	r5, r2
 800849c:	f7f7 feda 	bl	8000254 <__divsi3>
 80084a0:	2301      	movs	r3, #1
 80084a2:	2100      	movs	r1, #0
 80084a4:	4283      	cmp	r3, r0
 80084a6:	db0a      	blt.n	80084be <__s2b+0x32>
 80084a8:	0030      	movs	r0, r6
 80084aa:	f7ff ff43 	bl	8008334 <_Balloc>
 80084ae:	1e01      	subs	r1, r0, #0
 80084b0:	d108      	bne.n	80084c4 <__s2b+0x38>
 80084b2:	000a      	movs	r2, r1
 80084b4:	4b19      	ldr	r3, [pc, #100]	; (800851c <__s2b+0x90>)
 80084b6:	481a      	ldr	r0, [pc, #104]	; (8008520 <__s2b+0x94>)
 80084b8:	31d3      	adds	r1, #211	; 0xd3
 80084ba:	f001 fd09 	bl	8009ed0 <__assert_func>
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	3101      	adds	r1, #1
 80084c2:	e7ef      	b.n	80084a4 <__s2b+0x18>
 80084c4:	9b08      	ldr	r3, [sp, #32]
 80084c6:	6143      	str	r3, [r0, #20]
 80084c8:	2301      	movs	r3, #1
 80084ca:	6103      	str	r3, [r0, #16]
 80084cc:	2d09      	cmp	r5, #9
 80084ce:	dd18      	ble.n	8008502 <__s2b+0x76>
 80084d0:	0023      	movs	r3, r4
 80084d2:	3309      	adds	r3, #9
 80084d4:	001f      	movs	r7, r3
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	1964      	adds	r4, r4, r5
 80084da:	783b      	ldrb	r3, [r7, #0]
 80084dc:	220a      	movs	r2, #10
 80084de:	0030      	movs	r0, r6
 80084e0:	3b30      	subs	r3, #48	; 0x30
 80084e2:	f7ff ff8f 	bl	8008404 <__multadd>
 80084e6:	3701      	adds	r7, #1
 80084e8:	0001      	movs	r1, r0
 80084ea:	42a7      	cmp	r7, r4
 80084ec:	d1f5      	bne.n	80084da <__s2b+0x4e>
 80084ee:	002c      	movs	r4, r5
 80084f0:	9b00      	ldr	r3, [sp, #0]
 80084f2:	3c08      	subs	r4, #8
 80084f4:	191c      	adds	r4, r3, r4
 80084f6:	002f      	movs	r7, r5
 80084f8:	9b01      	ldr	r3, [sp, #4]
 80084fa:	429f      	cmp	r7, r3
 80084fc:	db04      	blt.n	8008508 <__s2b+0x7c>
 80084fe:	0008      	movs	r0, r1
 8008500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008502:	2509      	movs	r5, #9
 8008504:	340a      	adds	r4, #10
 8008506:	e7f6      	b.n	80084f6 <__s2b+0x6a>
 8008508:	1b63      	subs	r3, r4, r5
 800850a:	5ddb      	ldrb	r3, [r3, r7]
 800850c:	220a      	movs	r2, #10
 800850e:	0030      	movs	r0, r6
 8008510:	3b30      	subs	r3, #48	; 0x30
 8008512:	f7ff ff77 	bl	8008404 <__multadd>
 8008516:	3701      	adds	r7, #1
 8008518:	0001      	movs	r1, r0
 800851a:	e7ed      	b.n	80084f8 <__s2b+0x6c>
 800851c:	0800ae95 	.word	0x0800ae95
 8008520:	0800aea6 	.word	0x0800aea6

08008524 <__hi0bits>:
 8008524:	0003      	movs	r3, r0
 8008526:	0c02      	lsrs	r2, r0, #16
 8008528:	2000      	movs	r0, #0
 800852a:	4282      	cmp	r2, r0
 800852c:	d101      	bne.n	8008532 <__hi0bits+0xe>
 800852e:	041b      	lsls	r3, r3, #16
 8008530:	3010      	adds	r0, #16
 8008532:	0e1a      	lsrs	r2, r3, #24
 8008534:	d101      	bne.n	800853a <__hi0bits+0x16>
 8008536:	3008      	adds	r0, #8
 8008538:	021b      	lsls	r3, r3, #8
 800853a:	0f1a      	lsrs	r2, r3, #28
 800853c:	d101      	bne.n	8008542 <__hi0bits+0x1e>
 800853e:	3004      	adds	r0, #4
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	0f9a      	lsrs	r2, r3, #30
 8008544:	d101      	bne.n	800854a <__hi0bits+0x26>
 8008546:	3002      	adds	r0, #2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	2b00      	cmp	r3, #0
 800854c:	db03      	blt.n	8008556 <__hi0bits+0x32>
 800854e:	3001      	adds	r0, #1
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	d400      	bmi.n	8008556 <__hi0bits+0x32>
 8008554:	2020      	movs	r0, #32
 8008556:	4770      	bx	lr

08008558 <__lo0bits>:
 8008558:	6803      	ldr	r3, [r0, #0]
 800855a:	0001      	movs	r1, r0
 800855c:	2207      	movs	r2, #7
 800855e:	0018      	movs	r0, r3
 8008560:	4010      	ands	r0, r2
 8008562:	4213      	tst	r3, r2
 8008564:	d00d      	beq.n	8008582 <__lo0bits+0x2a>
 8008566:	3a06      	subs	r2, #6
 8008568:	2000      	movs	r0, #0
 800856a:	4213      	tst	r3, r2
 800856c:	d105      	bne.n	800857a <__lo0bits+0x22>
 800856e:	3002      	adds	r0, #2
 8008570:	4203      	tst	r3, r0
 8008572:	d003      	beq.n	800857c <__lo0bits+0x24>
 8008574:	40d3      	lsrs	r3, r2
 8008576:	0010      	movs	r0, r2
 8008578:	600b      	str	r3, [r1, #0]
 800857a:	4770      	bx	lr
 800857c:	089b      	lsrs	r3, r3, #2
 800857e:	600b      	str	r3, [r1, #0]
 8008580:	e7fb      	b.n	800857a <__lo0bits+0x22>
 8008582:	b29a      	uxth	r2, r3
 8008584:	2a00      	cmp	r2, #0
 8008586:	d101      	bne.n	800858c <__lo0bits+0x34>
 8008588:	2010      	movs	r0, #16
 800858a:	0c1b      	lsrs	r3, r3, #16
 800858c:	b2da      	uxtb	r2, r3
 800858e:	2a00      	cmp	r2, #0
 8008590:	d101      	bne.n	8008596 <__lo0bits+0x3e>
 8008592:	3008      	adds	r0, #8
 8008594:	0a1b      	lsrs	r3, r3, #8
 8008596:	071a      	lsls	r2, r3, #28
 8008598:	d101      	bne.n	800859e <__lo0bits+0x46>
 800859a:	3004      	adds	r0, #4
 800859c:	091b      	lsrs	r3, r3, #4
 800859e:	079a      	lsls	r2, r3, #30
 80085a0:	d101      	bne.n	80085a6 <__lo0bits+0x4e>
 80085a2:	3002      	adds	r0, #2
 80085a4:	089b      	lsrs	r3, r3, #2
 80085a6:	07da      	lsls	r2, r3, #31
 80085a8:	d4e9      	bmi.n	800857e <__lo0bits+0x26>
 80085aa:	3001      	adds	r0, #1
 80085ac:	085b      	lsrs	r3, r3, #1
 80085ae:	d1e6      	bne.n	800857e <__lo0bits+0x26>
 80085b0:	2020      	movs	r0, #32
 80085b2:	e7e2      	b.n	800857a <__lo0bits+0x22>

080085b4 <__i2b>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	000c      	movs	r4, r1
 80085b8:	2101      	movs	r1, #1
 80085ba:	f7ff febb 	bl	8008334 <_Balloc>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d107      	bne.n	80085d2 <__i2b+0x1e>
 80085c2:	2146      	movs	r1, #70	; 0x46
 80085c4:	4c05      	ldr	r4, [pc, #20]	; (80085dc <__i2b+0x28>)
 80085c6:	0002      	movs	r2, r0
 80085c8:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <__i2b+0x2c>)
 80085ca:	0020      	movs	r0, r4
 80085cc:	31ff      	adds	r1, #255	; 0xff
 80085ce:	f001 fc7f 	bl	8009ed0 <__assert_func>
 80085d2:	2301      	movs	r3, #1
 80085d4:	6144      	str	r4, [r0, #20]
 80085d6:	6103      	str	r3, [r0, #16]
 80085d8:	bd10      	pop	{r4, pc}
 80085da:	46c0      	nop			; (mov r8, r8)
 80085dc:	0800aea6 	.word	0x0800aea6
 80085e0:	0800ae95 	.word	0x0800ae95

080085e4 <__multiply>:
 80085e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085e6:	0015      	movs	r5, r2
 80085e8:	690a      	ldr	r2, [r1, #16]
 80085ea:	692b      	ldr	r3, [r5, #16]
 80085ec:	000c      	movs	r4, r1
 80085ee:	b08b      	sub	sp, #44	; 0x2c
 80085f0:	429a      	cmp	r2, r3
 80085f2:	da01      	bge.n	80085f8 <__multiply+0x14>
 80085f4:	002c      	movs	r4, r5
 80085f6:	000d      	movs	r5, r1
 80085f8:	6927      	ldr	r7, [r4, #16]
 80085fa:	692e      	ldr	r6, [r5, #16]
 80085fc:	6861      	ldr	r1, [r4, #4]
 80085fe:	19bb      	adds	r3, r7, r6
 8008600:	9303      	str	r3, [sp, #12]
 8008602:	68a3      	ldr	r3, [r4, #8]
 8008604:	19ba      	adds	r2, r7, r6
 8008606:	4293      	cmp	r3, r2
 8008608:	da00      	bge.n	800860c <__multiply+0x28>
 800860a:	3101      	adds	r1, #1
 800860c:	f7ff fe92 	bl	8008334 <_Balloc>
 8008610:	9002      	str	r0, [sp, #8]
 8008612:	2800      	cmp	r0, #0
 8008614:	d106      	bne.n	8008624 <__multiply+0x40>
 8008616:	21b1      	movs	r1, #177	; 0xb1
 8008618:	4b48      	ldr	r3, [pc, #288]	; (800873c <__multiply+0x158>)
 800861a:	4849      	ldr	r0, [pc, #292]	; (8008740 <__multiply+0x15c>)
 800861c:	9a02      	ldr	r2, [sp, #8]
 800861e:	0049      	lsls	r1, r1, #1
 8008620:	f001 fc56 	bl	8009ed0 <__assert_func>
 8008624:	9b02      	ldr	r3, [sp, #8]
 8008626:	2200      	movs	r2, #0
 8008628:	3314      	adds	r3, #20
 800862a:	469c      	mov	ip, r3
 800862c:	19bb      	adds	r3, r7, r6
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4463      	add	r3, ip
 8008632:	9304      	str	r3, [sp, #16]
 8008634:	4663      	mov	r3, ip
 8008636:	9904      	ldr	r1, [sp, #16]
 8008638:	428b      	cmp	r3, r1
 800863a:	d32a      	bcc.n	8008692 <__multiply+0xae>
 800863c:	0023      	movs	r3, r4
 800863e:	00bf      	lsls	r7, r7, #2
 8008640:	3314      	adds	r3, #20
 8008642:	3514      	adds	r5, #20
 8008644:	9308      	str	r3, [sp, #32]
 8008646:	00b6      	lsls	r6, r6, #2
 8008648:	19db      	adds	r3, r3, r7
 800864a:	9305      	str	r3, [sp, #20]
 800864c:	19ab      	adds	r3, r5, r6
 800864e:	9309      	str	r3, [sp, #36]	; 0x24
 8008650:	2304      	movs	r3, #4
 8008652:	9306      	str	r3, [sp, #24]
 8008654:	0023      	movs	r3, r4
 8008656:	9a05      	ldr	r2, [sp, #20]
 8008658:	3315      	adds	r3, #21
 800865a:	9501      	str	r5, [sp, #4]
 800865c:	429a      	cmp	r2, r3
 800865e:	d305      	bcc.n	800866c <__multiply+0x88>
 8008660:	1b13      	subs	r3, r2, r4
 8008662:	3b15      	subs	r3, #21
 8008664:	089b      	lsrs	r3, r3, #2
 8008666:	3301      	adds	r3, #1
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	9306      	str	r3, [sp, #24]
 800866c:	9b01      	ldr	r3, [sp, #4]
 800866e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008670:	4293      	cmp	r3, r2
 8008672:	d310      	bcc.n	8008696 <__multiply+0xb2>
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	dd05      	ble.n	8008686 <__multiply+0xa2>
 800867a:	9b04      	ldr	r3, [sp, #16]
 800867c:	3b04      	subs	r3, #4
 800867e:	9304      	str	r3, [sp, #16]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d056      	beq.n	8008734 <__multiply+0x150>
 8008686:	9b02      	ldr	r3, [sp, #8]
 8008688:	9a03      	ldr	r2, [sp, #12]
 800868a:	0018      	movs	r0, r3
 800868c:	611a      	str	r2, [r3, #16]
 800868e:	b00b      	add	sp, #44	; 0x2c
 8008690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008692:	c304      	stmia	r3!, {r2}
 8008694:	e7cf      	b.n	8008636 <__multiply+0x52>
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	6818      	ldr	r0, [r3, #0]
 800869a:	b280      	uxth	r0, r0
 800869c:	2800      	cmp	r0, #0
 800869e:	d01e      	beq.n	80086de <__multiply+0xfa>
 80086a0:	4667      	mov	r7, ip
 80086a2:	2500      	movs	r5, #0
 80086a4:	9e08      	ldr	r6, [sp, #32]
 80086a6:	ce02      	ldmia	r6!, {r1}
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	9307      	str	r3, [sp, #28]
 80086ac:	b28b      	uxth	r3, r1
 80086ae:	4343      	muls	r3, r0
 80086b0:	001a      	movs	r2, r3
 80086b2:	466b      	mov	r3, sp
 80086b4:	8b9b      	ldrh	r3, [r3, #28]
 80086b6:	18d3      	adds	r3, r2, r3
 80086b8:	195b      	adds	r3, r3, r5
 80086ba:	0c0d      	lsrs	r5, r1, #16
 80086bc:	4345      	muls	r5, r0
 80086be:	9a07      	ldr	r2, [sp, #28]
 80086c0:	0c11      	lsrs	r1, r2, #16
 80086c2:	1869      	adds	r1, r5, r1
 80086c4:	0c1a      	lsrs	r2, r3, #16
 80086c6:	188a      	adds	r2, r1, r2
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	0c15      	lsrs	r5, r2, #16
 80086cc:	0412      	lsls	r2, r2, #16
 80086ce:	431a      	orrs	r2, r3
 80086d0:	9b05      	ldr	r3, [sp, #20]
 80086d2:	c704      	stmia	r7!, {r2}
 80086d4:	42b3      	cmp	r3, r6
 80086d6:	d8e6      	bhi.n	80086a6 <__multiply+0xc2>
 80086d8:	4663      	mov	r3, ip
 80086da:	9a06      	ldr	r2, [sp, #24]
 80086dc:	509d      	str	r5, [r3, r2]
 80086de:	9b01      	ldr	r3, [sp, #4]
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	0c00      	lsrs	r0, r0, #16
 80086e4:	d020      	beq.n	8008728 <__multiply+0x144>
 80086e6:	4663      	mov	r3, ip
 80086e8:	0025      	movs	r5, r4
 80086ea:	4661      	mov	r1, ip
 80086ec:	2700      	movs	r7, #0
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3514      	adds	r5, #20
 80086f2:	682a      	ldr	r2, [r5, #0]
 80086f4:	680e      	ldr	r6, [r1, #0]
 80086f6:	b292      	uxth	r2, r2
 80086f8:	4342      	muls	r2, r0
 80086fa:	0c36      	lsrs	r6, r6, #16
 80086fc:	1992      	adds	r2, r2, r6
 80086fe:	19d2      	adds	r2, r2, r7
 8008700:	0416      	lsls	r6, r2, #16
 8008702:	b29b      	uxth	r3, r3
 8008704:	431e      	orrs	r6, r3
 8008706:	600e      	str	r6, [r1, #0]
 8008708:	cd40      	ldmia	r5!, {r6}
 800870a:	684b      	ldr	r3, [r1, #4]
 800870c:	0c36      	lsrs	r6, r6, #16
 800870e:	4346      	muls	r6, r0
 8008710:	b29b      	uxth	r3, r3
 8008712:	0c12      	lsrs	r2, r2, #16
 8008714:	18f3      	adds	r3, r6, r3
 8008716:	189b      	adds	r3, r3, r2
 8008718:	9a05      	ldr	r2, [sp, #20]
 800871a:	0c1f      	lsrs	r7, r3, #16
 800871c:	3104      	adds	r1, #4
 800871e:	42aa      	cmp	r2, r5
 8008720:	d8e7      	bhi.n	80086f2 <__multiply+0x10e>
 8008722:	4662      	mov	r2, ip
 8008724:	9906      	ldr	r1, [sp, #24]
 8008726:	5053      	str	r3, [r2, r1]
 8008728:	9b01      	ldr	r3, [sp, #4]
 800872a:	3304      	adds	r3, #4
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	2304      	movs	r3, #4
 8008730:	449c      	add	ip, r3
 8008732:	e79b      	b.n	800866c <__multiply+0x88>
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	3b01      	subs	r3, #1
 8008738:	9303      	str	r3, [sp, #12]
 800873a:	e79b      	b.n	8008674 <__multiply+0x90>
 800873c:	0800ae95 	.word	0x0800ae95
 8008740:	0800aea6 	.word	0x0800aea6

08008744 <__pow5mult>:
 8008744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008746:	2303      	movs	r3, #3
 8008748:	0015      	movs	r5, r2
 800874a:	0007      	movs	r7, r0
 800874c:	000e      	movs	r6, r1
 800874e:	401a      	ands	r2, r3
 8008750:	421d      	tst	r5, r3
 8008752:	d008      	beq.n	8008766 <__pow5mult+0x22>
 8008754:	4925      	ldr	r1, [pc, #148]	; (80087ec <__pow5mult+0xa8>)
 8008756:	3a01      	subs	r2, #1
 8008758:	0092      	lsls	r2, r2, #2
 800875a:	5852      	ldr	r2, [r2, r1]
 800875c:	2300      	movs	r3, #0
 800875e:	0031      	movs	r1, r6
 8008760:	f7ff fe50 	bl	8008404 <__multadd>
 8008764:	0006      	movs	r6, r0
 8008766:	10ad      	asrs	r5, r5, #2
 8008768:	d03d      	beq.n	80087e6 <__pow5mult+0xa2>
 800876a:	69fc      	ldr	r4, [r7, #28]
 800876c:	2c00      	cmp	r4, #0
 800876e:	d10f      	bne.n	8008790 <__pow5mult+0x4c>
 8008770:	2010      	movs	r0, #16
 8008772:	f7ff fd21 	bl	80081b8 <malloc>
 8008776:	1e02      	subs	r2, r0, #0
 8008778:	61f8      	str	r0, [r7, #28]
 800877a:	d105      	bne.n	8008788 <__pow5mult+0x44>
 800877c:	21b4      	movs	r1, #180	; 0xb4
 800877e:	4b1c      	ldr	r3, [pc, #112]	; (80087f0 <__pow5mult+0xac>)
 8008780:	481c      	ldr	r0, [pc, #112]	; (80087f4 <__pow5mult+0xb0>)
 8008782:	31ff      	adds	r1, #255	; 0xff
 8008784:	f001 fba4 	bl	8009ed0 <__assert_func>
 8008788:	6044      	str	r4, [r0, #4]
 800878a:	6084      	str	r4, [r0, #8]
 800878c:	6004      	str	r4, [r0, #0]
 800878e:	60c4      	str	r4, [r0, #12]
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	689c      	ldr	r4, [r3, #8]
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	2c00      	cmp	r4, #0
 8008798:	d108      	bne.n	80087ac <__pow5mult+0x68>
 800879a:	0038      	movs	r0, r7
 800879c:	4916      	ldr	r1, [pc, #88]	; (80087f8 <__pow5mult+0xb4>)
 800879e:	f7ff ff09 	bl	80085b4 <__i2b>
 80087a2:	9b01      	ldr	r3, [sp, #4]
 80087a4:	0004      	movs	r4, r0
 80087a6:	6098      	str	r0, [r3, #8]
 80087a8:	2300      	movs	r3, #0
 80087aa:	6003      	str	r3, [r0, #0]
 80087ac:	2301      	movs	r3, #1
 80087ae:	421d      	tst	r5, r3
 80087b0:	d00a      	beq.n	80087c8 <__pow5mult+0x84>
 80087b2:	0031      	movs	r1, r6
 80087b4:	0022      	movs	r2, r4
 80087b6:	0038      	movs	r0, r7
 80087b8:	f7ff ff14 	bl	80085e4 <__multiply>
 80087bc:	0031      	movs	r1, r6
 80087be:	9001      	str	r0, [sp, #4]
 80087c0:	0038      	movs	r0, r7
 80087c2:	f7ff fdfb 	bl	80083bc <_Bfree>
 80087c6:	9e01      	ldr	r6, [sp, #4]
 80087c8:	106d      	asrs	r5, r5, #1
 80087ca:	d00c      	beq.n	80087e6 <__pow5mult+0xa2>
 80087cc:	6820      	ldr	r0, [r4, #0]
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d107      	bne.n	80087e2 <__pow5mult+0x9e>
 80087d2:	0022      	movs	r2, r4
 80087d4:	0021      	movs	r1, r4
 80087d6:	0038      	movs	r0, r7
 80087d8:	f7ff ff04 	bl	80085e4 <__multiply>
 80087dc:	2300      	movs	r3, #0
 80087de:	6020      	str	r0, [r4, #0]
 80087e0:	6003      	str	r3, [r0, #0]
 80087e2:	0004      	movs	r4, r0
 80087e4:	e7e2      	b.n	80087ac <__pow5mult+0x68>
 80087e6:	0030      	movs	r0, r6
 80087e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	0800aff0 	.word	0x0800aff0
 80087f0:	0800ae26 	.word	0x0800ae26
 80087f4:	0800aea6 	.word	0x0800aea6
 80087f8:	00000271 	.word	0x00000271

080087fc <__lshift>:
 80087fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fe:	000c      	movs	r4, r1
 8008800:	0017      	movs	r7, r2
 8008802:	6923      	ldr	r3, [r4, #16]
 8008804:	1155      	asrs	r5, r2, #5
 8008806:	b087      	sub	sp, #28
 8008808:	18eb      	adds	r3, r5, r3
 800880a:	9302      	str	r3, [sp, #8]
 800880c:	3301      	adds	r3, #1
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	6849      	ldr	r1, [r1, #4]
 8008812:	68a3      	ldr	r3, [r4, #8]
 8008814:	9004      	str	r0, [sp, #16]
 8008816:	9a01      	ldr	r2, [sp, #4]
 8008818:	4293      	cmp	r3, r2
 800881a:	db10      	blt.n	800883e <__lshift+0x42>
 800881c:	9804      	ldr	r0, [sp, #16]
 800881e:	f7ff fd89 	bl	8008334 <_Balloc>
 8008822:	2300      	movs	r3, #0
 8008824:	0002      	movs	r2, r0
 8008826:	0006      	movs	r6, r0
 8008828:	0019      	movs	r1, r3
 800882a:	3214      	adds	r2, #20
 800882c:	4298      	cmp	r0, r3
 800882e:	d10c      	bne.n	800884a <__lshift+0x4e>
 8008830:	31df      	adds	r1, #223	; 0xdf
 8008832:	0032      	movs	r2, r6
 8008834:	4b26      	ldr	r3, [pc, #152]	; (80088d0 <__lshift+0xd4>)
 8008836:	4827      	ldr	r0, [pc, #156]	; (80088d4 <__lshift+0xd8>)
 8008838:	31ff      	adds	r1, #255	; 0xff
 800883a:	f001 fb49 	bl	8009ed0 <__assert_func>
 800883e:	3101      	adds	r1, #1
 8008840:	005b      	lsls	r3, r3, #1
 8008842:	e7e8      	b.n	8008816 <__lshift+0x1a>
 8008844:	0098      	lsls	r0, r3, #2
 8008846:	5011      	str	r1, [r2, r0]
 8008848:	3301      	adds	r3, #1
 800884a:	42ab      	cmp	r3, r5
 800884c:	dbfa      	blt.n	8008844 <__lshift+0x48>
 800884e:	43eb      	mvns	r3, r5
 8008850:	17db      	asrs	r3, r3, #31
 8008852:	401d      	ands	r5, r3
 8008854:	211f      	movs	r1, #31
 8008856:	0023      	movs	r3, r4
 8008858:	0038      	movs	r0, r7
 800885a:	00ad      	lsls	r5, r5, #2
 800885c:	1955      	adds	r5, r2, r5
 800885e:	6922      	ldr	r2, [r4, #16]
 8008860:	3314      	adds	r3, #20
 8008862:	0092      	lsls	r2, r2, #2
 8008864:	4008      	ands	r0, r1
 8008866:	4684      	mov	ip, r0
 8008868:	189a      	adds	r2, r3, r2
 800886a:	420f      	tst	r7, r1
 800886c:	d02a      	beq.n	80088c4 <__lshift+0xc8>
 800886e:	3101      	adds	r1, #1
 8008870:	1a09      	subs	r1, r1, r0
 8008872:	9105      	str	r1, [sp, #20]
 8008874:	2100      	movs	r1, #0
 8008876:	9503      	str	r5, [sp, #12]
 8008878:	4667      	mov	r7, ip
 800887a:	6818      	ldr	r0, [r3, #0]
 800887c:	40b8      	lsls	r0, r7
 800887e:	4308      	orrs	r0, r1
 8008880:	9903      	ldr	r1, [sp, #12]
 8008882:	c101      	stmia	r1!, {r0}
 8008884:	9103      	str	r1, [sp, #12]
 8008886:	9805      	ldr	r0, [sp, #20]
 8008888:	cb02      	ldmia	r3!, {r1}
 800888a:	40c1      	lsrs	r1, r0
 800888c:	429a      	cmp	r2, r3
 800888e:	d8f3      	bhi.n	8008878 <__lshift+0x7c>
 8008890:	0020      	movs	r0, r4
 8008892:	3015      	adds	r0, #21
 8008894:	2304      	movs	r3, #4
 8008896:	4282      	cmp	r2, r0
 8008898:	d304      	bcc.n	80088a4 <__lshift+0xa8>
 800889a:	1b13      	subs	r3, r2, r4
 800889c:	3b15      	subs	r3, #21
 800889e:	089b      	lsrs	r3, r3, #2
 80088a0:	3301      	adds	r3, #1
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	50e9      	str	r1, [r5, r3]
 80088a6:	2900      	cmp	r1, #0
 80088a8:	d002      	beq.n	80088b0 <__lshift+0xb4>
 80088aa:	9b02      	ldr	r3, [sp, #8]
 80088ac:	3302      	adds	r3, #2
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	9b01      	ldr	r3, [sp, #4]
 80088b2:	9804      	ldr	r0, [sp, #16]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	0021      	movs	r1, r4
 80088b8:	6133      	str	r3, [r6, #16]
 80088ba:	f7ff fd7f 	bl	80083bc <_Bfree>
 80088be:	0030      	movs	r0, r6
 80088c0:	b007      	add	sp, #28
 80088c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c4:	cb02      	ldmia	r3!, {r1}
 80088c6:	c502      	stmia	r5!, {r1}
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d8fb      	bhi.n	80088c4 <__lshift+0xc8>
 80088cc:	e7f0      	b.n	80088b0 <__lshift+0xb4>
 80088ce:	46c0      	nop			; (mov r8, r8)
 80088d0:	0800ae95 	.word	0x0800ae95
 80088d4:	0800aea6 	.word	0x0800aea6

080088d8 <__mcmp>:
 80088d8:	b530      	push	{r4, r5, lr}
 80088da:	690b      	ldr	r3, [r1, #16]
 80088dc:	6904      	ldr	r4, [r0, #16]
 80088de:	0002      	movs	r2, r0
 80088e0:	1ae0      	subs	r0, r4, r3
 80088e2:	429c      	cmp	r4, r3
 80088e4:	d10e      	bne.n	8008904 <__mcmp+0x2c>
 80088e6:	3214      	adds	r2, #20
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	3114      	adds	r1, #20
 80088ec:	0014      	movs	r4, r2
 80088ee:	18c9      	adds	r1, r1, r3
 80088f0:	18d2      	adds	r2, r2, r3
 80088f2:	3a04      	subs	r2, #4
 80088f4:	3904      	subs	r1, #4
 80088f6:	6815      	ldr	r5, [r2, #0]
 80088f8:	680b      	ldr	r3, [r1, #0]
 80088fa:	429d      	cmp	r5, r3
 80088fc:	d003      	beq.n	8008906 <__mcmp+0x2e>
 80088fe:	2001      	movs	r0, #1
 8008900:	429d      	cmp	r5, r3
 8008902:	d303      	bcc.n	800890c <__mcmp+0x34>
 8008904:	bd30      	pop	{r4, r5, pc}
 8008906:	4294      	cmp	r4, r2
 8008908:	d3f3      	bcc.n	80088f2 <__mcmp+0x1a>
 800890a:	e7fb      	b.n	8008904 <__mcmp+0x2c>
 800890c:	4240      	negs	r0, r0
 800890e:	e7f9      	b.n	8008904 <__mcmp+0x2c>

08008910 <__mdiff>:
 8008910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008912:	000e      	movs	r6, r1
 8008914:	0007      	movs	r7, r0
 8008916:	0011      	movs	r1, r2
 8008918:	0030      	movs	r0, r6
 800891a:	b087      	sub	sp, #28
 800891c:	0014      	movs	r4, r2
 800891e:	f7ff ffdb 	bl	80088d8 <__mcmp>
 8008922:	1e05      	subs	r5, r0, #0
 8008924:	d110      	bne.n	8008948 <__mdiff+0x38>
 8008926:	0001      	movs	r1, r0
 8008928:	0038      	movs	r0, r7
 800892a:	f7ff fd03 	bl	8008334 <_Balloc>
 800892e:	1e02      	subs	r2, r0, #0
 8008930:	d104      	bne.n	800893c <__mdiff+0x2c>
 8008932:	4b3f      	ldr	r3, [pc, #252]	; (8008a30 <__mdiff+0x120>)
 8008934:	483f      	ldr	r0, [pc, #252]	; (8008a34 <__mdiff+0x124>)
 8008936:	4940      	ldr	r1, [pc, #256]	; (8008a38 <__mdiff+0x128>)
 8008938:	f001 faca 	bl	8009ed0 <__assert_func>
 800893c:	2301      	movs	r3, #1
 800893e:	6145      	str	r5, [r0, #20]
 8008940:	6103      	str	r3, [r0, #16]
 8008942:	0010      	movs	r0, r2
 8008944:	b007      	add	sp, #28
 8008946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008948:	2301      	movs	r3, #1
 800894a:	9301      	str	r3, [sp, #4]
 800894c:	2800      	cmp	r0, #0
 800894e:	db04      	blt.n	800895a <__mdiff+0x4a>
 8008950:	0023      	movs	r3, r4
 8008952:	0034      	movs	r4, r6
 8008954:	001e      	movs	r6, r3
 8008956:	2300      	movs	r3, #0
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	0038      	movs	r0, r7
 800895c:	6861      	ldr	r1, [r4, #4]
 800895e:	f7ff fce9 	bl	8008334 <_Balloc>
 8008962:	1e02      	subs	r2, r0, #0
 8008964:	d103      	bne.n	800896e <__mdiff+0x5e>
 8008966:	4b32      	ldr	r3, [pc, #200]	; (8008a30 <__mdiff+0x120>)
 8008968:	4832      	ldr	r0, [pc, #200]	; (8008a34 <__mdiff+0x124>)
 800896a:	4934      	ldr	r1, [pc, #208]	; (8008a3c <__mdiff+0x12c>)
 800896c:	e7e4      	b.n	8008938 <__mdiff+0x28>
 800896e:	9b01      	ldr	r3, [sp, #4]
 8008970:	2700      	movs	r7, #0
 8008972:	60c3      	str	r3, [r0, #12]
 8008974:	6920      	ldr	r0, [r4, #16]
 8008976:	3414      	adds	r4, #20
 8008978:	0083      	lsls	r3, r0, #2
 800897a:	18e3      	adds	r3, r4, r3
 800897c:	0021      	movs	r1, r4
 800897e:	9401      	str	r4, [sp, #4]
 8008980:	0034      	movs	r4, r6
 8008982:	9302      	str	r3, [sp, #8]
 8008984:	6933      	ldr	r3, [r6, #16]
 8008986:	3414      	adds	r4, #20
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	18e3      	adds	r3, r4, r3
 800898c:	9303      	str	r3, [sp, #12]
 800898e:	0013      	movs	r3, r2
 8008990:	3314      	adds	r3, #20
 8008992:	469c      	mov	ip, r3
 8008994:	9305      	str	r3, [sp, #20]
 8008996:	9104      	str	r1, [sp, #16]
 8008998:	9b04      	ldr	r3, [sp, #16]
 800899a:	cc02      	ldmia	r4!, {r1}
 800899c:	cb20      	ldmia	r3!, {r5}
 800899e:	9304      	str	r3, [sp, #16]
 80089a0:	b2ab      	uxth	r3, r5
 80089a2:	19df      	adds	r7, r3, r7
 80089a4:	b28b      	uxth	r3, r1
 80089a6:	1afb      	subs	r3, r7, r3
 80089a8:	0c09      	lsrs	r1, r1, #16
 80089aa:	0c2d      	lsrs	r5, r5, #16
 80089ac:	1a6d      	subs	r5, r5, r1
 80089ae:	1419      	asrs	r1, r3, #16
 80089b0:	1869      	adds	r1, r5, r1
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	140f      	asrs	r7, r1, #16
 80089b6:	0409      	lsls	r1, r1, #16
 80089b8:	4319      	orrs	r1, r3
 80089ba:	4663      	mov	r3, ip
 80089bc:	c302      	stmia	r3!, {r1}
 80089be:	469c      	mov	ip, r3
 80089c0:	9b03      	ldr	r3, [sp, #12]
 80089c2:	42a3      	cmp	r3, r4
 80089c4:	d8e8      	bhi.n	8008998 <__mdiff+0x88>
 80089c6:	0031      	movs	r1, r6
 80089c8:	9c03      	ldr	r4, [sp, #12]
 80089ca:	3115      	adds	r1, #21
 80089cc:	2304      	movs	r3, #4
 80089ce:	428c      	cmp	r4, r1
 80089d0:	d304      	bcc.n	80089dc <__mdiff+0xcc>
 80089d2:	1ba3      	subs	r3, r4, r6
 80089d4:	3b15      	subs	r3, #21
 80089d6:	089b      	lsrs	r3, r3, #2
 80089d8:	3301      	adds	r3, #1
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	9901      	ldr	r1, [sp, #4]
 80089de:	18cd      	adds	r5, r1, r3
 80089e0:	9905      	ldr	r1, [sp, #20]
 80089e2:	002e      	movs	r6, r5
 80089e4:	18cb      	adds	r3, r1, r3
 80089e6:	469c      	mov	ip, r3
 80089e8:	9902      	ldr	r1, [sp, #8]
 80089ea:	428e      	cmp	r6, r1
 80089ec:	d310      	bcc.n	8008a10 <__mdiff+0x100>
 80089ee:	9e02      	ldr	r6, [sp, #8]
 80089f0:	1ee9      	subs	r1, r5, #3
 80089f2:	2400      	movs	r4, #0
 80089f4:	428e      	cmp	r6, r1
 80089f6:	d304      	bcc.n	8008a02 <__mdiff+0xf2>
 80089f8:	0031      	movs	r1, r6
 80089fa:	3103      	adds	r1, #3
 80089fc:	1b49      	subs	r1, r1, r5
 80089fe:	0889      	lsrs	r1, r1, #2
 8008a00:	008c      	lsls	r4, r1, #2
 8008a02:	191b      	adds	r3, r3, r4
 8008a04:	3b04      	subs	r3, #4
 8008a06:	6819      	ldr	r1, [r3, #0]
 8008a08:	2900      	cmp	r1, #0
 8008a0a:	d00f      	beq.n	8008a2c <__mdiff+0x11c>
 8008a0c:	6110      	str	r0, [r2, #16]
 8008a0e:	e798      	b.n	8008942 <__mdiff+0x32>
 8008a10:	ce02      	ldmia	r6!, {r1}
 8008a12:	b28c      	uxth	r4, r1
 8008a14:	19e4      	adds	r4, r4, r7
 8008a16:	0c0f      	lsrs	r7, r1, #16
 8008a18:	1421      	asrs	r1, r4, #16
 8008a1a:	1879      	adds	r1, r7, r1
 8008a1c:	b2a4      	uxth	r4, r4
 8008a1e:	140f      	asrs	r7, r1, #16
 8008a20:	0409      	lsls	r1, r1, #16
 8008a22:	4321      	orrs	r1, r4
 8008a24:	4664      	mov	r4, ip
 8008a26:	c402      	stmia	r4!, {r1}
 8008a28:	46a4      	mov	ip, r4
 8008a2a:	e7dd      	b.n	80089e8 <__mdiff+0xd8>
 8008a2c:	3801      	subs	r0, #1
 8008a2e:	e7e9      	b.n	8008a04 <__mdiff+0xf4>
 8008a30:	0800ae95 	.word	0x0800ae95
 8008a34:	0800aea6 	.word	0x0800aea6
 8008a38:	00000237 	.word	0x00000237
 8008a3c:	00000245 	.word	0x00000245

08008a40 <__ulp>:
 8008a40:	2000      	movs	r0, #0
 8008a42:	4b0b      	ldr	r3, [pc, #44]	; (8008a70 <__ulp+0x30>)
 8008a44:	4019      	ands	r1, r3
 8008a46:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <__ulp+0x34>)
 8008a48:	18c9      	adds	r1, r1, r3
 8008a4a:	4281      	cmp	r1, r0
 8008a4c:	dc06      	bgt.n	8008a5c <__ulp+0x1c>
 8008a4e:	4249      	negs	r1, r1
 8008a50:	150b      	asrs	r3, r1, #20
 8008a52:	2b13      	cmp	r3, #19
 8008a54:	dc03      	bgt.n	8008a5e <__ulp+0x1e>
 8008a56:	2180      	movs	r1, #128	; 0x80
 8008a58:	0309      	lsls	r1, r1, #12
 8008a5a:	4119      	asrs	r1, r3
 8008a5c:	4770      	bx	lr
 8008a5e:	3b14      	subs	r3, #20
 8008a60:	2001      	movs	r0, #1
 8008a62:	2b1e      	cmp	r3, #30
 8008a64:	dc02      	bgt.n	8008a6c <__ulp+0x2c>
 8008a66:	2080      	movs	r0, #128	; 0x80
 8008a68:	0600      	lsls	r0, r0, #24
 8008a6a:	40d8      	lsrs	r0, r3
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	e7f5      	b.n	8008a5c <__ulp+0x1c>
 8008a70:	7ff00000 	.word	0x7ff00000
 8008a74:	fcc00000 	.word	0xfcc00000

08008a78 <__b2d>:
 8008a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a7a:	0006      	movs	r6, r0
 8008a7c:	6903      	ldr	r3, [r0, #16]
 8008a7e:	3614      	adds	r6, #20
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	18f3      	adds	r3, r6, r3
 8008a84:	1f1d      	subs	r5, r3, #4
 8008a86:	682c      	ldr	r4, [r5, #0]
 8008a88:	000f      	movs	r7, r1
 8008a8a:	0020      	movs	r0, r4
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	f7ff fd49 	bl	8008524 <__hi0bits>
 8008a92:	2220      	movs	r2, #32
 8008a94:	1a12      	subs	r2, r2, r0
 8008a96:	603a      	str	r2, [r7, #0]
 8008a98:	0003      	movs	r3, r0
 8008a9a:	4a1c      	ldr	r2, [pc, #112]	; (8008b0c <__b2d+0x94>)
 8008a9c:	280a      	cmp	r0, #10
 8008a9e:	dc15      	bgt.n	8008acc <__b2d+0x54>
 8008aa0:	210b      	movs	r1, #11
 8008aa2:	0027      	movs	r7, r4
 8008aa4:	1a09      	subs	r1, r1, r0
 8008aa6:	40cf      	lsrs	r7, r1
 8008aa8:	433a      	orrs	r2, r7
 8008aaa:	468c      	mov	ip, r1
 8008aac:	0011      	movs	r1, r2
 8008aae:	2200      	movs	r2, #0
 8008ab0:	42ae      	cmp	r6, r5
 8008ab2:	d202      	bcs.n	8008aba <__b2d+0x42>
 8008ab4:	9a01      	ldr	r2, [sp, #4]
 8008ab6:	3a08      	subs	r2, #8
 8008ab8:	6812      	ldr	r2, [r2, #0]
 8008aba:	3315      	adds	r3, #21
 8008abc:	409c      	lsls	r4, r3
 8008abe:	4663      	mov	r3, ip
 8008ac0:	0027      	movs	r7, r4
 8008ac2:	40da      	lsrs	r2, r3
 8008ac4:	4317      	orrs	r7, r2
 8008ac6:	0038      	movs	r0, r7
 8008ac8:	b003      	add	sp, #12
 8008aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008acc:	2700      	movs	r7, #0
 8008ace:	42ae      	cmp	r6, r5
 8008ad0:	d202      	bcs.n	8008ad8 <__b2d+0x60>
 8008ad2:	9d01      	ldr	r5, [sp, #4]
 8008ad4:	3d08      	subs	r5, #8
 8008ad6:	682f      	ldr	r7, [r5, #0]
 8008ad8:	210b      	movs	r1, #11
 8008ada:	4249      	negs	r1, r1
 8008adc:	468c      	mov	ip, r1
 8008ade:	449c      	add	ip, r3
 8008ae0:	2b0b      	cmp	r3, #11
 8008ae2:	d010      	beq.n	8008b06 <__b2d+0x8e>
 8008ae4:	4661      	mov	r1, ip
 8008ae6:	2320      	movs	r3, #32
 8008ae8:	408c      	lsls	r4, r1
 8008aea:	1a5b      	subs	r3, r3, r1
 8008aec:	0039      	movs	r1, r7
 8008aee:	40d9      	lsrs	r1, r3
 8008af0:	430c      	orrs	r4, r1
 8008af2:	4322      	orrs	r2, r4
 8008af4:	0011      	movs	r1, r2
 8008af6:	2200      	movs	r2, #0
 8008af8:	42b5      	cmp	r5, r6
 8008afa:	d901      	bls.n	8008b00 <__b2d+0x88>
 8008afc:	3d04      	subs	r5, #4
 8008afe:	682a      	ldr	r2, [r5, #0]
 8008b00:	4664      	mov	r4, ip
 8008b02:	40a7      	lsls	r7, r4
 8008b04:	e7dd      	b.n	8008ac2 <__b2d+0x4a>
 8008b06:	4322      	orrs	r2, r4
 8008b08:	0011      	movs	r1, r2
 8008b0a:	e7dc      	b.n	8008ac6 <__b2d+0x4e>
 8008b0c:	3ff00000 	.word	0x3ff00000

08008b10 <__d2b>:
 8008b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b12:	2101      	movs	r1, #1
 8008b14:	0014      	movs	r4, r2
 8008b16:	001d      	movs	r5, r3
 8008b18:	9f08      	ldr	r7, [sp, #32]
 8008b1a:	f7ff fc0b 	bl	8008334 <_Balloc>
 8008b1e:	1e06      	subs	r6, r0, #0
 8008b20:	d105      	bne.n	8008b2e <__d2b+0x1e>
 8008b22:	0032      	movs	r2, r6
 8008b24:	4b24      	ldr	r3, [pc, #144]	; (8008bb8 <__d2b+0xa8>)
 8008b26:	4825      	ldr	r0, [pc, #148]	; (8008bbc <__d2b+0xac>)
 8008b28:	4925      	ldr	r1, [pc, #148]	; (8008bc0 <__d2b+0xb0>)
 8008b2a:	f001 f9d1 	bl	8009ed0 <__assert_func>
 8008b2e:	032b      	lsls	r3, r5, #12
 8008b30:	006d      	lsls	r5, r5, #1
 8008b32:	0b1b      	lsrs	r3, r3, #12
 8008b34:	0d6d      	lsrs	r5, r5, #21
 8008b36:	d125      	bne.n	8008b84 <__d2b+0x74>
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	2c00      	cmp	r4, #0
 8008b3c:	d028      	beq.n	8008b90 <__d2b+0x80>
 8008b3e:	4668      	mov	r0, sp
 8008b40:	9400      	str	r4, [sp, #0]
 8008b42:	f7ff fd09 	bl	8008558 <__lo0bits>
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	9900      	ldr	r1, [sp, #0]
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d01e      	beq.n	8008b8c <__d2b+0x7c>
 8008b4e:	2220      	movs	r2, #32
 8008b50:	001c      	movs	r4, r3
 8008b52:	1a12      	subs	r2, r2, r0
 8008b54:	4094      	lsls	r4, r2
 8008b56:	0022      	movs	r2, r4
 8008b58:	40c3      	lsrs	r3, r0
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	6172      	str	r2, [r6, #20]
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	9c01      	ldr	r4, [sp, #4]
 8008b62:	61b4      	str	r4, [r6, #24]
 8008b64:	1e63      	subs	r3, r4, #1
 8008b66:	419c      	sbcs	r4, r3
 8008b68:	3401      	adds	r4, #1
 8008b6a:	6134      	str	r4, [r6, #16]
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	d017      	beq.n	8008ba0 <__d2b+0x90>
 8008b70:	2435      	movs	r4, #53	; 0x35
 8008b72:	4b14      	ldr	r3, [pc, #80]	; (8008bc4 <__d2b+0xb4>)
 8008b74:	18ed      	adds	r5, r5, r3
 8008b76:	182d      	adds	r5, r5, r0
 8008b78:	603d      	str	r5, [r7, #0]
 8008b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7c:	1a24      	subs	r4, r4, r0
 8008b7e:	601c      	str	r4, [r3, #0]
 8008b80:	0030      	movs	r0, r6
 8008b82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b84:	2280      	movs	r2, #128	; 0x80
 8008b86:	0352      	lsls	r2, r2, #13
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	e7d5      	b.n	8008b38 <__d2b+0x28>
 8008b8c:	6171      	str	r1, [r6, #20]
 8008b8e:	e7e7      	b.n	8008b60 <__d2b+0x50>
 8008b90:	a801      	add	r0, sp, #4
 8008b92:	f7ff fce1 	bl	8008558 <__lo0bits>
 8008b96:	9b01      	ldr	r3, [sp, #4]
 8008b98:	2401      	movs	r4, #1
 8008b9a:	6173      	str	r3, [r6, #20]
 8008b9c:	3020      	adds	r0, #32
 8008b9e:	e7e4      	b.n	8008b6a <__d2b+0x5a>
 8008ba0:	4b09      	ldr	r3, [pc, #36]	; (8008bc8 <__d2b+0xb8>)
 8008ba2:	18c0      	adds	r0, r0, r3
 8008ba4:	4b09      	ldr	r3, [pc, #36]	; (8008bcc <__d2b+0xbc>)
 8008ba6:	6038      	str	r0, [r7, #0]
 8008ba8:	18e3      	adds	r3, r4, r3
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	18f3      	adds	r3, r6, r3
 8008bae:	6958      	ldr	r0, [r3, #20]
 8008bb0:	f7ff fcb8 	bl	8008524 <__hi0bits>
 8008bb4:	0164      	lsls	r4, r4, #5
 8008bb6:	e7e0      	b.n	8008b7a <__d2b+0x6a>
 8008bb8:	0800ae95 	.word	0x0800ae95
 8008bbc:	0800aea6 	.word	0x0800aea6
 8008bc0:	0000030f 	.word	0x0000030f
 8008bc4:	fffffbcd 	.word	0xfffffbcd
 8008bc8:	fffffbce 	.word	0xfffffbce
 8008bcc:	3fffffff 	.word	0x3fffffff

08008bd0 <__ratio>:
 8008bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	000f      	movs	r7, r1
 8008bd6:	a904      	add	r1, sp, #16
 8008bd8:	0006      	movs	r6, r0
 8008bda:	f7ff ff4d 	bl	8008a78 <__b2d>
 8008bde:	9000      	str	r0, [sp, #0]
 8008be0:	9101      	str	r1, [sp, #4]
 8008be2:	9c00      	ldr	r4, [sp, #0]
 8008be4:	9d01      	ldr	r5, [sp, #4]
 8008be6:	0038      	movs	r0, r7
 8008be8:	a905      	add	r1, sp, #20
 8008bea:	f7ff ff45 	bl	8008a78 <__b2d>
 8008bee:	9002      	str	r0, [sp, #8]
 8008bf0:	9103      	str	r1, [sp, #12]
 8008bf2:	9a02      	ldr	r2, [sp, #8]
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	6930      	ldr	r0, [r6, #16]
 8008bf8:	6939      	ldr	r1, [r7, #16]
 8008bfa:	9e04      	ldr	r6, [sp, #16]
 8008bfc:	1a40      	subs	r0, r0, r1
 8008bfe:	9905      	ldr	r1, [sp, #20]
 8008c00:	0140      	lsls	r0, r0, #5
 8008c02:	1a71      	subs	r1, r6, r1
 8008c04:	1841      	adds	r1, r0, r1
 8008c06:	0508      	lsls	r0, r1, #20
 8008c08:	2900      	cmp	r1, #0
 8008c0a:	dd07      	ble.n	8008c1c <__ratio+0x4c>
 8008c0c:	9901      	ldr	r1, [sp, #4]
 8008c0e:	1845      	adds	r5, r0, r1
 8008c10:	0020      	movs	r0, r4
 8008c12:	0029      	movs	r1, r5
 8008c14:	f7f8 fc34 	bl	8001480 <__aeabi_ddiv>
 8008c18:	b007      	add	sp, #28
 8008c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1c:	9903      	ldr	r1, [sp, #12]
 8008c1e:	1a0b      	subs	r3, r1, r0
 8008c20:	e7f6      	b.n	8008c10 <__ratio+0x40>

08008c22 <__copybits>:
 8008c22:	b570      	push	{r4, r5, r6, lr}
 8008c24:	0014      	movs	r4, r2
 8008c26:	0005      	movs	r5, r0
 8008c28:	3901      	subs	r1, #1
 8008c2a:	6913      	ldr	r3, [r2, #16]
 8008c2c:	1149      	asrs	r1, r1, #5
 8008c2e:	3101      	adds	r1, #1
 8008c30:	0089      	lsls	r1, r1, #2
 8008c32:	3414      	adds	r4, #20
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	1841      	adds	r1, r0, r1
 8008c38:	18e3      	adds	r3, r4, r3
 8008c3a:	42a3      	cmp	r3, r4
 8008c3c:	d80d      	bhi.n	8008c5a <__copybits+0x38>
 8008c3e:	0014      	movs	r4, r2
 8008c40:	3411      	adds	r4, #17
 8008c42:	2500      	movs	r5, #0
 8008c44:	429c      	cmp	r4, r3
 8008c46:	d803      	bhi.n	8008c50 <__copybits+0x2e>
 8008c48:	1a9b      	subs	r3, r3, r2
 8008c4a:	3b11      	subs	r3, #17
 8008c4c:	089b      	lsrs	r3, r3, #2
 8008c4e:	009d      	lsls	r5, r3, #2
 8008c50:	2300      	movs	r3, #0
 8008c52:	1940      	adds	r0, r0, r5
 8008c54:	4281      	cmp	r1, r0
 8008c56:	d803      	bhi.n	8008c60 <__copybits+0x3e>
 8008c58:	bd70      	pop	{r4, r5, r6, pc}
 8008c5a:	cc40      	ldmia	r4!, {r6}
 8008c5c:	c540      	stmia	r5!, {r6}
 8008c5e:	e7ec      	b.n	8008c3a <__copybits+0x18>
 8008c60:	c008      	stmia	r0!, {r3}
 8008c62:	e7f7      	b.n	8008c54 <__copybits+0x32>

08008c64 <__any_on>:
 8008c64:	0002      	movs	r2, r0
 8008c66:	6900      	ldr	r0, [r0, #16]
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	3214      	adds	r2, #20
 8008c6c:	114b      	asrs	r3, r1, #5
 8008c6e:	4298      	cmp	r0, r3
 8008c70:	db13      	blt.n	8008c9a <__any_on+0x36>
 8008c72:	dd0c      	ble.n	8008c8e <__any_on+0x2a>
 8008c74:	241f      	movs	r4, #31
 8008c76:	0008      	movs	r0, r1
 8008c78:	4020      	ands	r0, r4
 8008c7a:	4221      	tst	r1, r4
 8008c7c:	d007      	beq.n	8008c8e <__any_on+0x2a>
 8008c7e:	0099      	lsls	r1, r3, #2
 8008c80:	588c      	ldr	r4, [r1, r2]
 8008c82:	0021      	movs	r1, r4
 8008c84:	40c1      	lsrs	r1, r0
 8008c86:	4081      	lsls	r1, r0
 8008c88:	2001      	movs	r0, #1
 8008c8a:	428c      	cmp	r4, r1
 8008c8c:	d104      	bne.n	8008c98 <__any_on+0x34>
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	18d3      	adds	r3, r2, r3
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d803      	bhi.n	8008c9e <__any_on+0x3a>
 8008c96:	2000      	movs	r0, #0
 8008c98:	bd10      	pop	{r4, pc}
 8008c9a:	0003      	movs	r3, r0
 8008c9c:	e7f7      	b.n	8008c8e <__any_on+0x2a>
 8008c9e:	3b04      	subs	r3, #4
 8008ca0:	6819      	ldr	r1, [r3, #0]
 8008ca2:	2900      	cmp	r1, #0
 8008ca4:	d0f5      	beq.n	8008c92 <__any_on+0x2e>
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	e7f6      	b.n	8008c98 <__any_on+0x34>
	...

08008cac <sulp>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	0016      	movs	r6, r2
 8008cb0:	000d      	movs	r5, r1
 8008cb2:	f7ff fec5 	bl	8008a40 <__ulp>
 8008cb6:	2e00      	cmp	r6, #0
 8008cb8:	d00d      	beq.n	8008cd6 <sulp+0x2a>
 8008cba:	236b      	movs	r3, #107	; 0x6b
 8008cbc:	006a      	lsls	r2, r5, #1
 8008cbe:	0d52      	lsrs	r2, r2, #21
 8008cc0:	1a9b      	subs	r3, r3, r2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dd07      	ble.n	8008cd6 <sulp+0x2a>
 8008cc6:	2400      	movs	r4, #0
 8008cc8:	4a03      	ldr	r2, [pc, #12]	; (8008cd8 <sulp+0x2c>)
 8008cca:	051b      	lsls	r3, r3, #20
 8008ccc:	189d      	adds	r5, r3, r2
 8008cce:	002b      	movs	r3, r5
 8008cd0:	0022      	movs	r2, r4
 8008cd2:	f7f8 ffcf 	bl	8001c74 <__aeabi_dmul>
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
 8008cd8:	3ff00000 	.word	0x3ff00000

08008cdc <_strtod_l>:
 8008cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cde:	b0a1      	sub	sp, #132	; 0x84
 8008ce0:	9219      	str	r2, [sp, #100]	; 0x64
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2600      	movs	r6, #0
 8008ce6:	2700      	movs	r7, #0
 8008ce8:	9004      	str	r0, [sp, #16]
 8008cea:	9107      	str	r1, [sp, #28]
 8008cec:	921c      	str	r2, [sp, #112]	; 0x70
 8008cee:	911b      	str	r1, [sp, #108]	; 0x6c
 8008cf0:	780a      	ldrb	r2, [r1, #0]
 8008cf2:	2a2b      	cmp	r2, #43	; 0x2b
 8008cf4:	d055      	beq.n	8008da2 <_strtod_l+0xc6>
 8008cf6:	d841      	bhi.n	8008d7c <_strtod_l+0xa0>
 8008cf8:	2a0d      	cmp	r2, #13
 8008cfa:	d83b      	bhi.n	8008d74 <_strtod_l+0x98>
 8008cfc:	2a08      	cmp	r2, #8
 8008cfe:	d83b      	bhi.n	8008d78 <_strtod_l+0x9c>
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	d044      	beq.n	8008d8e <_strtod_l+0xb2>
 8008d04:	2200      	movs	r2, #0
 8008d06:	920f      	str	r2, [sp, #60]	; 0x3c
 8008d08:	2100      	movs	r1, #0
 8008d0a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008d0c:	9109      	str	r1, [sp, #36]	; 0x24
 8008d0e:	782a      	ldrb	r2, [r5, #0]
 8008d10:	2a30      	cmp	r2, #48	; 0x30
 8008d12:	d000      	beq.n	8008d16 <_strtod_l+0x3a>
 8008d14:	e085      	b.n	8008e22 <_strtod_l+0x146>
 8008d16:	786a      	ldrb	r2, [r5, #1]
 8008d18:	3120      	adds	r1, #32
 8008d1a:	438a      	bics	r2, r1
 8008d1c:	2a58      	cmp	r2, #88	; 0x58
 8008d1e:	d000      	beq.n	8008d22 <_strtod_l+0x46>
 8008d20:	e075      	b.n	8008e0e <_strtod_l+0x132>
 8008d22:	9302      	str	r3, [sp, #8]
 8008d24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d26:	4a97      	ldr	r2, [pc, #604]	; (8008f84 <_strtod_l+0x2a8>)
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	ab1c      	add	r3, sp, #112	; 0x70
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	9804      	ldr	r0, [sp, #16]
 8008d30:	ab1d      	add	r3, sp, #116	; 0x74
 8008d32:	a91b      	add	r1, sp, #108	; 0x6c
 8008d34:	f001 f982 	bl	800a03c <__gethex>
 8008d38:	230f      	movs	r3, #15
 8008d3a:	0002      	movs	r2, r0
 8008d3c:	401a      	ands	r2, r3
 8008d3e:	0004      	movs	r4, r0
 8008d40:	9205      	str	r2, [sp, #20]
 8008d42:	4218      	tst	r0, r3
 8008d44:	d005      	beq.n	8008d52 <_strtod_l+0x76>
 8008d46:	2a06      	cmp	r2, #6
 8008d48:	d12d      	bne.n	8008da6 <_strtod_l+0xca>
 8008d4a:	1c6b      	adds	r3, r5, #1
 8008d4c:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d4e:	2300      	movs	r3, #0
 8008d50:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <_strtod_l+0x82>
 8008d58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d5c:	6013      	str	r3, [r2, #0]
 8008d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01b      	beq.n	8008d9c <_strtod_l+0xc0>
 8008d64:	2380      	movs	r3, #128	; 0x80
 8008d66:	0032      	movs	r2, r6
 8008d68:	061b      	lsls	r3, r3, #24
 8008d6a:	18fb      	adds	r3, r7, r3
 8008d6c:	0010      	movs	r0, r2
 8008d6e:	0019      	movs	r1, r3
 8008d70:	b021      	add	sp, #132	; 0x84
 8008d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d74:	2a20      	cmp	r2, #32
 8008d76:	d1c5      	bne.n	8008d04 <_strtod_l+0x28>
 8008d78:	3101      	adds	r1, #1
 8008d7a:	e7b8      	b.n	8008cee <_strtod_l+0x12>
 8008d7c:	2a2d      	cmp	r2, #45	; 0x2d
 8008d7e:	d1c1      	bne.n	8008d04 <_strtod_l+0x28>
 8008d80:	3a2c      	subs	r2, #44	; 0x2c
 8008d82:	920f      	str	r2, [sp, #60]	; 0x3c
 8008d84:	1c4a      	adds	r2, r1, #1
 8008d86:	921b      	str	r2, [sp, #108]	; 0x6c
 8008d88:	784a      	ldrb	r2, [r1, #1]
 8008d8a:	2a00      	cmp	r2, #0
 8008d8c:	d1bc      	bne.n	8008d08 <_strtod_l+0x2c>
 8008d8e:	9b07      	ldr	r3, [sp, #28]
 8008d90:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d92:	2300      	movs	r3, #0
 8008d94:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1dd      	bne.n	8008d58 <_strtod_l+0x7c>
 8008d9c:	0032      	movs	r2, r6
 8008d9e:	003b      	movs	r3, r7
 8008da0:	e7e4      	b.n	8008d6c <_strtod_l+0x90>
 8008da2:	2200      	movs	r2, #0
 8008da4:	e7ed      	b.n	8008d82 <_strtod_l+0xa6>
 8008da6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008da8:	2a00      	cmp	r2, #0
 8008daa:	d007      	beq.n	8008dbc <_strtod_l+0xe0>
 8008dac:	2135      	movs	r1, #53	; 0x35
 8008dae:	a81e      	add	r0, sp, #120	; 0x78
 8008db0:	f7ff ff37 	bl	8008c22 <__copybits>
 8008db4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008db6:	9804      	ldr	r0, [sp, #16]
 8008db8:	f7ff fb00 	bl	80083bc <_Bfree>
 8008dbc:	9805      	ldr	r0, [sp, #20]
 8008dbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dc0:	3801      	subs	r0, #1
 8008dc2:	2804      	cmp	r0, #4
 8008dc4:	d806      	bhi.n	8008dd4 <_strtod_l+0xf8>
 8008dc6:	f7f7 f9a7 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008dca:	0312      	.short	0x0312
 8008dcc:	1e1c      	.short	0x1e1c
 8008dce:	12          	.byte	0x12
 8008dcf:	00          	.byte	0x00
 8008dd0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008dd2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8008dd4:	05e4      	lsls	r4, r4, #23
 8008dd6:	d502      	bpl.n	8008dde <_strtod_l+0x102>
 8008dd8:	2380      	movs	r3, #128	; 0x80
 8008dda:	061b      	lsls	r3, r3, #24
 8008ddc:	431f      	orrs	r7, r3
 8008dde:	4b6a      	ldr	r3, [pc, #424]	; (8008f88 <_strtod_l+0x2ac>)
 8008de0:	423b      	tst	r3, r7
 8008de2:	d1b6      	bne.n	8008d52 <_strtod_l+0x76>
 8008de4:	f7fe fac4 	bl	8007370 <__errno>
 8008de8:	2322      	movs	r3, #34	; 0x22
 8008dea:	6003      	str	r3, [r0, #0]
 8008dec:	e7b1      	b.n	8008d52 <_strtod_l+0x76>
 8008dee:	4967      	ldr	r1, [pc, #412]	; (8008f8c <_strtod_l+0x2b0>)
 8008df0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008df2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008df4:	400a      	ands	r2, r1
 8008df6:	4966      	ldr	r1, [pc, #408]	; (8008f90 <_strtod_l+0x2b4>)
 8008df8:	185b      	adds	r3, r3, r1
 8008dfa:	051b      	lsls	r3, r3, #20
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	0017      	movs	r7, r2
 8008e00:	e7e8      	b.n	8008dd4 <_strtod_l+0xf8>
 8008e02:	4f61      	ldr	r7, [pc, #388]	; (8008f88 <_strtod_l+0x2ac>)
 8008e04:	e7e6      	b.n	8008dd4 <_strtod_l+0xf8>
 8008e06:	2601      	movs	r6, #1
 8008e08:	4f62      	ldr	r7, [pc, #392]	; (8008f94 <_strtod_l+0x2b8>)
 8008e0a:	4276      	negs	r6, r6
 8008e0c:	e7e2      	b.n	8008dd4 <_strtod_l+0xf8>
 8008e0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e10:	1c5a      	adds	r2, r3, #1
 8008e12:	921b      	str	r2, [sp, #108]	; 0x6c
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	2b30      	cmp	r3, #48	; 0x30
 8008e18:	d0f9      	beq.n	8008e0e <_strtod_l+0x132>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d099      	beq.n	8008d52 <_strtod_l+0x76>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	9309      	str	r3, [sp, #36]	; 0x24
 8008e22:	2500      	movs	r5, #0
 8008e24:	220a      	movs	r2, #10
 8008e26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e28:	950d      	str	r5, [sp, #52]	; 0x34
 8008e2a:	9310      	str	r3, [sp, #64]	; 0x40
 8008e2c:	9508      	str	r5, [sp, #32]
 8008e2e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008e30:	7804      	ldrb	r4, [r0, #0]
 8008e32:	0023      	movs	r3, r4
 8008e34:	3b30      	subs	r3, #48	; 0x30
 8008e36:	b2d9      	uxtb	r1, r3
 8008e38:	2909      	cmp	r1, #9
 8008e3a:	d927      	bls.n	8008e8c <_strtod_l+0x1b0>
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	4956      	ldr	r1, [pc, #344]	; (8008f98 <_strtod_l+0x2bc>)
 8008e40:	f001 f812 	bl	8009e68 <strncmp>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d031      	beq.n	8008eac <_strtod_l+0x1d0>
 8008e48:	2000      	movs	r0, #0
 8008e4a:	0023      	movs	r3, r4
 8008e4c:	4684      	mov	ip, r0
 8008e4e:	9a08      	ldr	r2, [sp, #32]
 8008e50:	900c      	str	r0, [sp, #48]	; 0x30
 8008e52:	9205      	str	r2, [sp, #20]
 8008e54:	2220      	movs	r2, #32
 8008e56:	0019      	movs	r1, r3
 8008e58:	4391      	bics	r1, r2
 8008e5a:	000a      	movs	r2, r1
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	9106      	str	r1, [sp, #24]
 8008e60:	2a45      	cmp	r2, #69	; 0x45
 8008e62:	d000      	beq.n	8008e66 <_strtod_l+0x18a>
 8008e64:	e0c2      	b.n	8008fec <_strtod_l+0x310>
 8008e66:	9b05      	ldr	r3, [sp, #20]
 8008e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e6a:	4303      	orrs	r3, r0
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	428b      	cmp	r3, r1
 8008e70:	d08d      	beq.n	8008d8e <_strtod_l+0xb2>
 8008e72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e74:	9307      	str	r3, [sp, #28]
 8008e76:	3301      	adds	r3, #1
 8008e78:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e7a:	9b07      	ldr	r3, [sp, #28]
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	2b2b      	cmp	r3, #43	; 0x2b
 8008e80:	d071      	beq.n	8008f66 <_strtod_l+0x28a>
 8008e82:	000c      	movs	r4, r1
 8008e84:	2b2d      	cmp	r3, #45	; 0x2d
 8008e86:	d174      	bne.n	8008f72 <_strtod_l+0x296>
 8008e88:	2401      	movs	r4, #1
 8008e8a:	e06d      	b.n	8008f68 <_strtod_l+0x28c>
 8008e8c:	9908      	ldr	r1, [sp, #32]
 8008e8e:	2908      	cmp	r1, #8
 8008e90:	dc09      	bgt.n	8008ea6 <_strtod_l+0x1ca>
 8008e92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e94:	4351      	muls	r1, r2
 8008e96:	185b      	adds	r3, r3, r1
 8008e98:	930d      	str	r3, [sp, #52]	; 0x34
 8008e9a:	9b08      	ldr	r3, [sp, #32]
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	9308      	str	r3, [sp, #32]
 8008ea2:	901b      	str	r0, [sp, #108]	; 0x6c
 8008ea4:	e7c3      	b.n	8008e2e <_strtod_l+0x152>
 8008ea6:	4355      	muls	r5, r2
 8008ea8:	195d      	adds	r5, r3, r5
 8008eaa:	e7f6      	b.n	8008e9a <_strtod_l+0x1be>
 8008eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8008eb2:	9a08      	ldr	r2, [sp, #32]
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	d03a      	beq.n	8008f30 <_strtod_l+0x254>
 8008eba:	900c      	str	r0, [sp, #48]	; 0x30
 8008ebc:	9205      	str	r2, [sp, #20]
 8008ebe:	001a      	movs	r2, r3
 8008ec0:	3a30      	subs	r2, #48	; 0x30
 8008ec2:	2a09      	cmp	r2, #9
 8008ec4:	d912      	bls.n	8008eec <_strtod_l+0x210>
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	4694      	mov	ip, r2
 8008eca:	e7c3      	b.n	8008e54 <_strtod_l+0x178>
 8008ecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ece:	3001      	adds	r0, #1
 8008ed0:	1c5a      	adds	r2, r3, #1
 8008ed2:	921b      	str	r2, [sp, #108]	; 0x6c
 8008ed4:	785b      	ldrb	r3, [r3, #1]
 8008ed6:	2b30      	cmp	r3, #48	; 0x30
 8008ed8:	d0f8      	beq.n	8008ecc <_strtod_l+0x1f0>
 8008eda:	001a      	movs	r2, r3
 8008edc:	3a31      	subs	r2, #49	; 0x31
 8008ede:	2a08      	cmp	r2, #8
 8008ee0:	d83c      	bhi.n	8008f5c <_strtod_l+0x280>
 8008ee2:	900c      	str	r0, [sp, #48]	; 0x30
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008ee8:	9005      	str	r0, [sp, #20]
 8008eea:	9210      	str	r2, [sp, #64]	; 0x40
 8008eec:	001a      	movs	r2, r3
 8008eee:	1c41      	adds	r1, r0, #1
 8008ef0:	3a30      	subs	r2, #48	; 0x30
 8008ef2:	2b30      	cmp	r3, #48	; 0x30
 8008ef4:	d016      	beq.n	8008f24 <_strtod_l+0x248>
 8008ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ef8:	185b      	adds	r3, r3, r1
 8008efa:	930c      	str	r3, [sp, #48]	; 0x30
 8008efc:	9b05      	ldr	r3, [sp, #20]
 8008efe:	210a      	movs	r1, #10
 8008f00:	469c      	mov	ip, r3
 8008f02:	4484      	add	ip, r0
 8008f04:	4563      	cmp	r3, ip
 8008f06:	d115      	bne.n	8008f34 <_strtod_l+0x258>
 8008f08:	9905      	ldr	r1, [sp, #20]
 8008f0a:	9b05      	ldr	r3, [sp, #20]
 8008f0c:	3101      	adds	r1, #1
 8008f0e:	1809      	adds	r1, r1, r0
 8008f10:	181b      	adds	r3, r3, r0
 8008f12:	9105      	str	r1, [sp, #20]
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	dc19      	bgt.n	8008f4c <_strtod_l+0x270>
 8008f18:	230a      	movs	r3, #10
 8008f1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008f1c:	434b      	muls	r3, r1
 8008f1e:	2100      	movs	r1, #0
 8008f20:	18d3      	adds	r3, r2, r3
 8008f22:	930d      	str	r3, [sp, #52]	; 0x34
 8008f24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f26:	0008      	movs	r0, r1
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008f2c:	785b      	ldrb	r3, [r3, #1]
 8008f2e:	e7c6      	b.n	8008ebe <_strtod_l+0x1e2>
 8008f30:	9808      	ldr	r0, [sp, #32]
 8008f32:	e7d0      	b.n	8008ed6 <_strtod_l+0x1fa>
 8008f34:	1c5c      	adds	r4, r3, #1
 8008f36:	2b08      	cmp	r3, #8
 8008f38:	dc04      	bgt.n	8008f44 <_strtod_l+0x268>
 8008f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f3c:	434b      	muls	r3, r1
 8008f3e:	930d      	str	r3, [sp, #52]	; 0x34
 8008f40:	0023      	movs	r3, r4
 8008f42:	e7df      	b.n	8008f04 <_strtod_l+0x228>
 8008f44:	2c10      	cmp	r4, #16
 8008f46:	dcfb      	bgt.n	8008f40 <_strtod_l+0x264>
 8008f48:	434d      	muls	r5, r1
 8008f4a:	e7f9      	b.n	8008f40 <_strtod_l+0x264>
 8008f4c:	9b05      	ldr	r3, [sp, #20]
 8008f4e:	2100      	movs	r1, #0
 8008f50:	2b10      	cmp	r3, #16
 8008f52:	dce7      	bgt.n	8008f24 <_strtod_l+0x248>
 8008f54:	230a      	movs	r3, #10
 8008f56:	435d      	muls	r5, r3
 8008f58:	1955      	adds	r5, r2, r5
 8008f5a:	e7e3      	b.n	8008f24 <_strtod_l+0x248>
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	920c      	str	r2, [sp, #48]	; 0x30
 8008f60:	9205      	str	r2, [sp, #20]
 8008f62:	3201      	adds	r2, #1
 8008f64:	e7b0      	b.n	8008ec8 <_strtod_l+0x1ec>
 8008f66:	2400      	movs	r4, #0
 8008f68:	9b07      	ldr	r3, [sp, #28]
 8008f6a:	3302      	adds	r3, #2
 8008f6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f6e:	9b07      	ldr	r3, [sp, #28]
 8008f70:	789b      	ldrb	r3, [r3, #2]
 8008f72:	001a      	movs	r2, r3
 8008f74:	3a30      	subs	r2, #48	; 0x30
 8008f76:	2a09      	cmp	r2, #9
 8008f78:	d914      	bls.n	8008fa4 <_strtod_l+0x2c8>
 8008f7a:	9a07      	ldr	r2, [sp, #28]
 8008f7c:	921b      	str	r2, [sp, #108]	; 0x6c
 8008f7e:	2200      	movs	r2, #0
 8008f80:	e033      	b.n	8008fea <_strtod_l+0x30e>
 8008f82:	46c0      	nop			; (mov r8, r8)
 8008f84:	0800b000 	.word	0x0800b000
 8008f88:	7ff00000 	.word	0x7ff00000
 8008f8c:	ffefffff 	.word	0xffefffff
 8008f90:	00000433 	.word	0x00000433
 8008f94:	7fffffff 	.word	0x7fffffff
 8008f98:	0800affc 	.word	0x0800affc
 8008f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	921b      	str	r2, [sp, #108]	; 0x6c
 8008fa2:	785b      	ldrb	r3, [r3, #1]
 8008fa4:	2b30      	cmp	r3, #48	; 0x30
 8008fa6:	d0f9      	beq.n	8008f9c <_strtod_l+0x2c0>
 8008fa8:	2200      	movs	r2, #0
 8008faa:	9206      	str	r2, [sp, #24]
 8008fac:	001a      	movs	r2, r3
 8008fae:	3a31      	subs	r2, #49	; 0x31
 8008fb0:	2a08      	cmp	r2, #8
 8008fb2:	d81b      	bhi.n	8008fec <_strtod_l+0x310>
 8008fb4:	3b30      	subs	r3, #48	; 0x30
 8008fb6:	930e      	str	r3, [sp, #56]	; 0x38
 8008fb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fba:	9306      	str	r3, [sp, #24]
 8008fbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fbe:	1c59      	adds	r1, r3, #1
 8008fc0:	911b      	str	r1, [sp, #108]	; 0x6c
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	001a      	movs	r2, r3
 8008fc6:	3a30      	subs	r2, #48	; 0x30
 8008fc8:	2a09      	cmp	r2, #9
 8008fca:	d93a      	bls.n	8009042 <_strtod_l+0x366>
 8008fcc:	9a06      	ldr	r2, [sp, #24]
 8008fce:	1a8a      	subs	r2, r1, r2
 8008fd0:	49b2      	ldr	r1, [pc, #712]	; (800929c <_strtod_l+0x5c0>)
 8008fd2:	9106      	str	r1, [sp, #24]
 8008fd4:	2a08      	cmp	r2, #8
 8008fd6:	dc04      	bgt.n	8008fe2 <_strtod_l+0x306>
 8008fd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fda:	9206      	str	r2, [sp, #24]
 8008fdc:	428a      	cmp	r2, r1
 8008fde:	dd00      	ble.n	8008fe2 <_strtod_l+0x306>
 8008fe0:	9106      	str	r1, [sp, #24]
 8008fe2:	2c00      	cmp	r4, #0
 8008fe4:	d002      	beq.n	8008fec <_strtod_l+0x310>
 8008fe6:	9a06      	ldr	r2, [sp, #24]
 8008fe8:	4252      	negs	r2, r2
 8008fea:	9206      	str	r2, [sp, #24]
 8008fec:	9a05      	ldr	r2, [sp, #20]
 8008fee:	2a00      	cmp	r2, #0
 8008ff0:	d14d      	bne.n	800908e <_strtod_l+0x3b2>
 8008ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ff4:	4310      	orrs	r0, r2
 8008ff6:	d000      	beq.n	8008ffa <_strtod_l+0x31e>
 8008ff8:	e6ab      	b.n	8008d52 <_strtod_l+0x76>
 8008ffa:	4662      	mov	r2, ip
 8008ffc:	2a00      	cmp	r2, #0
 8008ffe:	d000      	beq.n	8009002 <_strtod_l+0x326>
 8009000:	e6c5      	b.n	8008d8e <_strtod_l+0xb2>
 8009002:	2b69      	cmp	r3, #105	; 0x69
 8009004:	d027      	beq.n	8009056 <_strtod_l+0x37a>
 8009006:	dc23      	bgt.n	8009050 <_strtod_l+0x374>
 8009008:	2b49      	cmp	r3, #73	; 0x49
 800900a:	d024      	beq.n	8009056 <_strtod_l+0x37a>
 800900c:	2b4e      	cmp	r3, #78	; 0x4e
 800900e:	d000      	beq.n	8009012 <_strtod_l+0x336>
 8009010:	e6bd      	b.n	8008d8e <_strtod_l+0xb2>
 8009012:	49a3      	ldr	r1, [pc, #652]	; (80092a0 <_strtod_l+0x5c4>)
 8009014:	a81b      	add	r0, sp, #108	; 0x6c
 8009016:	f001 fa47 	bl	800a4a8 <__match>
 800901a:	2800      	cmp	r0, #0
 800901c:	d100      	bne.n	8009020 <_strtod_l+0x344>
 800901e:	e6b6      	b.n	8008d8e <_strtod_l+0xb2>
 8009020:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b28      	cmp	r3, #40	; 0x28
 8009026:	d12c      	bne.n	8009082 <_strtod_l+0x3a6>
 8009028:	499e      	ldr	r1, [pc, #632]	; (80092a4 <_strtod_l+0x5c8>)
 800902a:	aa1e      	add	r2, sp, #120	; 0x78
 800902c:	a81b      	add	r0, sp, #108	; 0x6c
 800902e:	f001 fa4f 	bl	800a4d0 <__hexnan>
 8009032:	2805      	cmp	r0, #5
 8009034:	d125      	bne.n	8009082 <_strtod_l+0x3a6>
 8009036:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009038:	4a9b      	ldr	r2, [pc, #620]	; (80092a8 <_strtod_l+0x5cc>)
 800903a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800903c:	431a      	orrs	r2, r3
 800903e:	0017      	movs	r7, r2
 8009040:	e687      	b.n	8008d52 <_strtod_l+0x76>
 8009042:	220a      	movs	r2, #10
 8009044:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009046:	434a      	muls	r2, r1
 8009048:	18d2      	adds	r2, r2, r3
 800904a:	3a30      	subs	r2, #48	; 0x30
 800904c:	920e      	str	r2, [sp, #56]	; 0x38
 800904e:	e7b5      	b.n	8008fbc <_strtod_l+0x2e0>
 8009050:	2b6e      	cmp	r3, #110	; 0x6e
 8009052:	d0de      	beq.n	8009012 <_strtod_l+0x336>
 8009054:	e69b      	b.n	8008d8e <_strtod_l+0xb2>
 8009056:	4995      	ldr	r1, [pc, #596]	; (80092ac <_strtod_l+0x5d0>)
 8009058:	a81b      	add	r0, sp, #108	; 0x6c
 800905a:	f001 fa25 	bl	800a4a8 <__match>
 800905e:	2800      	cmp	r0, #0
 8009060:	d100      	bne.n	8009064 <_strtod_l+0x388>
 8009062:	e694      	b.n	8008d8e <_strtod_l+0xb2>
 8009064:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009066:	4992      	ldr	r1, [pc, #584]	; (80092b0 <_strtod_l+0x5d4>)
 8009068:	3b01      	subs	r3, #1
 800906a:	a81b      	add	r0, sp, #108	; 0x6c
 800906c:	931b      	str	r3, [sp, #108]	; 0x6c
 800906e:	f001 fa1b 	bl	800a4a8 <__match>
 8009072:	2800      	cmp	r0, #0
 8009074:	d102      	bne.n	800907c <_strtod_l+0x3a0>
 8009076:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009078:	3301      	adds	r3, #1
 800907a:	931b      	str	r3, [sp, #108]	; 0x6c
 800907c:	2600      	movs	r6, #0
 800907e:	4f8a      	ldr	r7, [pc, #552]	; (80092a8 <_strtod_l+0x5cc>)
 8009080:	e667      	b.n	8008d52 <_strtod_l+0x76>
 8009082:	488c      	ldr	r0, [pc, #560]	; (80092b4 <_strtod_l+0x5d8>)
 8009084:	f000 ff1e 	bl	8009ec4 <nan>
 8009088:	0006      	movs	r6, r0
 800908a:	000f      	movs	r7, r1
 800908c:	e661      	b.n	8008d52 <_strtod_l+0x76>
 800908e:	9b06      	ldr	r3, [sp, #24]
 8009090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009092:	1a9b      	subs	r3, r3, r2
 8009094:	9309      	str	r3, [sp, #36]	; 0x24
 8009096:	9b08      	ldr	r3, [sp, #32]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <_strtod_l+0x3c4>
 800909c:	9b05      	ldr	r3, [sp, #20]
 800909e:	9308      	str	r3, [sp, #32]
 80090a0:	9c05      	ldr	r4, [sp, #20]
 80090a2:	2c10      	cmp	r4, #16
 80090a4:	dd00      	ble.n	80090a8 <_strtod_l+0x3cc>
 80090a6:	2410      	movs	r4, #16
 80090a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80090aa:	f7f9 fcab 	bl	8002a04 <__aeabi_ui2d>
 80090ae:	9b05      	ldr	r3, [sp, #20]
 80090b0:	0006      	movs	r6, r0
 80090b2:	000f      	movs	r7, r1
 80090b4:	2b09      	cmp	r3, #9
 80090b6:	dd15      	ble.n	80090e4 <_strtod_l+0x408>
 80090b8:	0022      	movs	r2, r4
 80090ba:	4b7f      	ldr	r3, [pc, #508]	; (80092b8 <_strtod_l+0x5dc>)
 80090bc:	3a09      	subs	r2, #9
 80090be:	00d2      	lsls	r2, r2, #3
 80090c0:	189b      	adds	r3, r3, r2
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f7f8 fdd5 	bl	8001c74 <__aeabi_dmul>
 80090ca:	0006      	movs	r6, r0
 80090cc:	0028      	movs	r0, r5
 80090ce:	000f      	movs	r7, r1
 80090d0:	f7f9 fc98 	bl	8002a04 <__aeabi_ui2d>
 80090d4:	0002      	movs	r2, r0
 80090d6:	000b      	movs	r3, r1
 80090d8:	0030      	movs	r0, r6
 80090da:	0039      	movs	r1, r7
 80090dc:	f7f7 fe70 	bl	8000dc0 <__aeabi_dadd>
 80090e0:	0006      	movs	r6, r0
 80090e2:	000f      	movs	r7, r1
 80090e4:	9b05      	ldr	r3, [sp, #20]
 80090e6:	2b0f      	cmp	r3, #15
 80090e8:	dc39      	bgt.n	800915e <_strtod_l+0x482>
 80090ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d100      	bne.n	80090f2 <_strtod_l+0x416>
 80090f0:	e62f      	b.n	8008d52 <_strtod_l+0x76>
 80090f2:	dd24      	ble.n	800913e <_strtod_l+0x462>
 80090f4:	2b16      	cmp	r3, #22
 80090f6:	dc09      	bgt.n	800910c <_strtod_l+0x430>
 80090f8:	496f      	ldr	r1, [pc, #444]	; (80092b8 <_strtod_l+0x5dc>)
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	18c9      	adds	r1, r1, r3
 80090fe:	0032      	movs	r2, r6
 8009100:	6808      	ldr	r0, [r1, #0]
 8009102:	6849      	ldr	r1, [r1, #4]
 8009104:	003b      	movs	r3, r7
 8009106:	f7f8 fdb5 	bl	8001c74 <__aeabi_dmul>
 800910a:	e7bd      	b.n	8009088 <_strtod_l+0x3ac>
 800910c:	2325      	movs	r3, #37	; 0x25
 800910e:	9a05      	ldr	r2, [sp, #20]
 8009110:	1a9b      	subs	r3, r3, r2
 8009112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009114:	4293      	cmp	r3, r2
 8009116:	db22      	blt.n	800915e <_strtod_l+0x482>
 8009118:	240f      	movs	r4, #15
 800911a:	9b05      	ldr	r3, [sp, #20]
 800911c:	4d66      	ldr	r5, [pc, #408]	; (80092b8 <_strtod_l+0x5dc>)
 800911e:	1ae4      	subs	r4, r4, r3
 8009120:	00e1      	lsls	r1, r4, #3
 8009122:	1869      	adds	r1, r5, r1
 8009124:	0032      	movs	r2, r6
 8009126:	6808      	ldr	r0, [r1, #0]
 8009128:	6849      	ldr	r1, [r1, #4]
 800912a:	003b      	movs	r3, r7
 800912c:	f7f8 fda2 	bl	8001c74 <__aeabi_dmul>
 8009130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009132:	1b1c      	subs	r4, r3, r4
 8009134:	00e4      	lsls	r4, r4, #3
 8009136:	192d      	adds	r5, r5, r4
 8009138:	682a      	ldr	r2, [r5, #0]
 800913a:	686b      	ldr	r3, [r5, #4]
 800913c:	e7e3      	b.n	8009106 <_strtod_l+0x42a>
 800913e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009140:	3316      	adds	r3, #22
 8009142:	db0c      	blt.n	800915e <_strtod_l+0x482>
 8009144:	9906      	ldr	r1, [sp, #24]
 8009146:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009148:	4b5b      	ldr	r3, [pc, #364]	; (80092b8 <_strtod_l+0x5dc>)
 800914a:	1a52      	subs	r2, r2, r1
 800914c:	00d2      	lsls	r2, r2, #3
 800914e:	189b      	adds	r3, r3, r2
 8009150:	0030      	movs	r0, r6
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	0039      	movs	r1, r7
 8009158:	f7f8 f992 	bl	8001480 <__aeabi_ddiv>
 800915c:	e794      	b.n	8009088 <_strtod_l+0x3ac>
 800915e:	9b05      	ldr	r3, [sp, #20]
 8009160:	1b1c      	subs	r4, r3, r4
 8009162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009164:	18e4      	adds	r4, r4, r3
 8009166:	2c00      	cmp	r4, #0
 8009168:	dd72      	ble.n	8009250 <_strtod_l+0x574>
 800916a:	220f      	movs	r2, #15
 800916c:	0023      	movs	r3, r4
 800916e:	4013      	ands	r3, r2
 8009170:	4214      	tst	r4, r2
 8009172:	d00a      	beq.n	800918a <_strtod_l+0x4ae>
 8009174:	4950      	ldr	r1, [pc, #320]	; (80092b8 <_strtod_l+0x5dc>)
 8009176:	00db      	lsls	r3, r3, #3
 8009178:	18c9      	adds	r1, r1, r3
 800917a:	0032      	movs	r2, r6
 800917c:	6808      	ldr	r0, [r1, #0]
 800917e:	6849      	ldr	r1, [r1, #4]
 8009180:	003b      	movs	r3, r7
 8009182:	f7f8 fd77 	bl	8001c74 <__aeabi_dmul>
 8009186:	0006      	movs	r6, r0
 8009188:	000f      	movs	r7, r1
 800918a:	230f      	movs	r3, #15
 800918c:	439c      	bics	r4, r3
 800918e:	d04a      	beq.n	8009226 <_strtod_l+0x54a>
 8009190:	3326      	adds	r3, #38	; 0x26
 8009192:	33ff      	adds	r3, #255	; 0xff
 8009194:	429c      	cmp	r4, r3
 8009196:	dd22      	ble.n	80091de <_strtod_l+0x502>
 8009198:	2300      	movs	r3, #0
 800919a:	9305      	str	r3, [sp, #20]
 800919c:	9306      	str	r3, [sp, #24]
 800919e:	930d      	str	r3, [sp, #52]	; 0x34
 80091a0:	9308      	str	r3, [sp, #32]
 80091a2:	2322      	movs	r3, #34	; 0x22
 80091a4:	2600      	movs	r6, #0
 80091a6:	9a04      	ldr	r2, [sp, #16]
 80091a8:	4f3f      	ldr	r7, [pc, #252]	; (80092a8 <_strtod_l+0x5cc>)
 80091aa:	6013      	str	r3, [r2, #0]
 80091ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ae:	42b3      	cmp	r3, r6
 80091b0:	d100      	bne.n	80091b4 <_strtod_l+0x4d8>
 80091b2:	e5ce      	b.n	8008d52 <_strtod_l+0x76>
 80091b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80091b6:	9804      	ldr	r0, [sp, #16]
 80091b8:	f7ff f900 	bl	80083bc <_Bfree>
 80091bc:	9908      	ldr	r1, [sp, #32]
 80091be:	9804      	ldr	r0, [sp, #16]
 80091c0:	f7ff f8fc 	bl	80083bc <_Bfree>
 80091c4:	9906      	ldr	r1, [sp, #24]
 80091c6:	9804      	ldr	r0, [sp, #16]
 80091c8:	f7ff f8f8 	bl	80083bc <_Bfree>
 80091cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80091ce:	9804      	ldr	r0, [sp, #16]
 80091d0:	f7ff f8f4 	bl	80083bc <_Bfree>
 80091d4:	9905      	ldr	r1, [sp, #20]
 80091d6:	9804      	ldr	r0, [sp, #16]
 80091d8:	f7ff f8f0 	bl	80083bc <_Bfree>
 80091dc:	e5b9      	b.n	8008d52 <_strtod_l+0x76>
 80091de:	2300      	movs	r3, #0
 80091e0:	0030      	movs	r0, r6
 80091e2:	0039      	movs	r1, r7
 80091e4:	4d35      	ldr	r5, [pc, #212]	; (80092bc <_strtod_l+0x5e0>)
 80091e6:	1124      	asrs	r4, r4, #4
 80091e8:	9307      	str	r3, [sp, #28]
 80091ea:	2c01      	cmp	r4, #1
 80091ec:	dc1e      	bgt.n	800922c <_strtod_l+0x550>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <_strtod_l+0x51a>
 80091f2:	0006      	movs	r6, r0
 80091f4:	000f      	movs	r7, r1
 80091f6:	4b32      	ldr	r3, [pc, #200]	; (80092c0 <_strtod_l+0x5e4>)
 80091f8:	9a07      	ldr	r2, [sp, #28]
 80091fa:	18ff      	adds	r7, r7, r3
 80091fc:	4b2f      	ldr	r3, [pc, #188]	; (80092bc <_strtod_l+0x5e0>)
 80091fe:	00d2      	lsls	r2, r2, #3
 8009200:	189d      	adds	r5, r3, r2
 8009202:	6828      	ldr	r0, [r5, #0]
 8009204:	6869      	ldr	r1, [r5, #4]
 8009206:	0032      	movs	r2, r6
 8009208:	003b      	movs	r3, r7
 800920a:	f7f8 fd33 	bl	8001c74 <__aeabi_dmul>
 800920e:	4b26      	ldr	r3, [pc, #152]	; (80092a8 <_strtod_l+0x5cc>)
 8009210:	4a2c      	ldr	r2, [pc, #176]	; (80092c4 <_strtod_l+0x5e8>)
 8009212:	0006      	movs	r6, r0
 8009214:	400b      	ands	r3, r1
 8009216:	4293      	cmp	r3, r2
 8009218:	d8be      	bhi.n	8009198 <_strtod_l+0x4bc>
 800921a:	4a2b      	ldr	r2, [pc, #172]	; (80092c8 <_strtod_l+0x5ec>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d913      	bls.n	8009248 <_strtod_l+0x56c>
 8009220:	2601      	movs	r6, #1
 8009222:	4f2a      	ldr	r7, [pc, #168]	; (80092cc <_strtod_l+0x5f0>)
 8009224:	4276      	negs	r6, r6
 8009226:	2300      	movs	r3, #0
 8009228:	9307      	str	r3, [sp, #28]
 800922a:	e088      	b.n	800933e <_strtod_l+0x662>
 800922c:	2201      	movs	r2, #1
 800922e:	4214      	tst	r4, r2
 8009230:	d004      	beq.n	800923c <_strtod_l+0x560>
 8009232:	682a      	ldr	r2, [r5, #0]
 8009234:	686b      	ldr	r3, [r5, #4]
 8009236:	f7f8 fd1d 	bl	8001c74 <__aeabi_dmul>
 800923a:	2301      	movs	r3, #1
 800923c:	9a07      	ldr	r2, [sp, #28]
 800923e:	1064      	asrs	r4, r4, #1
 8009240:	3201      	adds	r2, #1
 8009242:	9207      	str	r2, [sp, #28]
 8009244:	3508      	adds	r5, #8
 8009246:	e7d0      	b.n	80091ea <_strtod_l+0x50e>
 8009248:	23d4      	movs	r3, #212	; 0xd4
 800924a:	049b      	lsls	r3, r3, #18
 800924c:	18cf      	adds	r7, r1, r3
 800924e:	e7ea      	b.n	8009226 <_strtod_l+0x54a>
 8009250:	2c00      	cmp	r4, #0
 8009252:	d0e8      	beq.n	8009226 <_strtod_l+0x54a>
 8009254:	4264      	negs	r4, r4
 8009256:	230f      	movs	r3, #15
 8009258:	0022      	movs	r2, r4
 800925a:	401a      	ands	r2, r3
 800925c:	421c      	tst	r4, r3
 800925e:	d00a      	beq.n	8009276 <_strtod_l+0x59a>
 8009260:	4b15      	ldr	r3, [pc, #84]	; (80092b8 <_strtod_l+0x5dc>)
 8009262:	00d2      	lsls	r2, r2, #3
 8009264:	189b      	adds	r3, r3, r2
 8009266:	0030      	movs	r0, r6
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	0039      	movs	r1, r7
 800926e:	f7f8 f907 	bl	8001480 <__aeabi_ddiv>
 8009272:	0006      	movs	r6, r0
 8009274:	000f      	movs	r7, r1
 8009276:	1124      	asrs	r4, r4, #4
 8009278:	d0d5      	beq.n	8009226 <_strtod_l+0x54a>
 800927a:	2c1f      	cmp	r4, #31
 800927c:	dd28      	ble.n	80092d0 <_strtod_l+0x5f4>
 800927e:	2300      	movs	r3, #0
 8009280:	9305      	str	r3, [sp, #20]
 8009282:	9306      	str	r3, [sp, #24]
 8009284:	930d      	str	r3, [sp, #52]	; 0x34
 8009286:	9308      	str	r3, [sp, #32]
 8009288:	2322      	movs	r3, #34	; 0x22
 800928a:	9a04      	ldr	r2, [sp, #16]
 800928c:	2600      	movs	r6, #0
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009292:	2700      	movs	r7, #0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d18d      	bne.n	80091b4 <_strtod_l+0x4d8>
 8009298:	e55b      	b.n	8008d52 <_strtod_l+0x76>
 800929a:	46c0      	nop			; (mov r8, r8)
 800929c:	00004e1f 	.word	0x00004e1f
 80092a0:	0800aded 	.word	0x0800aded
 80092a4:	0800b014 	.word	0x0800b014
 80092a8:	7ff00000 	.word	0x7ff00000
 80092ac:	0800ade5 	.word	0x0800ade5
 80092b0:	0800ae1c 	.word	0x0800ae1c
 80092b4:	0800b1a5 	.word	0x0800b1a5
 80092b8:	0800af28 	.word	0x0800af28
 80092bc:	0800af00 	.word	0x0800af00
 80092c0:	fcb00000 	.word	0xfcb00000
 80092c4:	7ca00000 	.word	0x7ca00000
 80092c8:	7c900000 	.word	0x7c900000
 80092cc:	7fefffff 	.word	0x7fefffff
 80092d0:	2310      	movs	r3, #16
 80092d2:	0022      	movs	r2, r4
 80092d4:	401a      	ands	r2, r3
 80092d6:	9207      	str	r2, [sp, #28]
 80092d8:	421c      	tst	r4, r3
 80092da:	d001      	beq.n	80092e0 <_strtod_l+0x604>
 80092dc:	335a      	adds	r3, #90	; 0x5a
 80092de:	9307      	str	r3, [sp, #28]
 80092e0:	0030      	movs	r0, r6
 80092e2:	0039      	movs	r1, r7
 80092e4:	2300      	movs	r3, #0
 80092e6:	4dc4      	ldr	r5, [pc, #784]	; (80095f8 <_strtod_l+0x91c>)
 80092e8:	2201      	movs	r2, #1
 80092ea:	4214      	tst	r4, r2
 80092ec:	d004      	beq.n	80092f8 <_strtod_l+0x61c>
 80092ee:	682a      	ldr	r2, [r5, #0]
 80092f0:	686b      	ldr	r3, [r5, #4]
 80092f2:	f7f8 fcbf 	bl	8001c74 <__aeabi_dmul>
 80092f6:	2301      	movs	r3, #1
 80092f8:	1064      	asrs	r4, r4, #1
 80092fa:	3508      	adds	r5, #8
 80092fc:	2c00      	cmp	r4, #0
 80092fe:	d1f3      	bne.n	80092e8 <_strtod_l+0x60c>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d001      	beq.n	8009308 <_strtod_l+0x62c>
 8009304:	0006      	movs	r6, r0
 8009306:	000f      	movs	r7, r1
 8009308:	9b07      	ldr	r3, [sp, #28]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00f      	beq.n	800932e <_strtod_l+0x652>
 800930e:	236b      	movs	r3, #107	; 0x6b
 8009310:	007a      	lsls	r2, r7, #1
 8009312:	0d52      	lsrs	r2, r2, #21
 8009314:	0039      	movs	r1, r7
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	2b00      	cmp	r3, #0
 800931a:	dd08      	ble.n	800932e <_strtod_l+0x652>
 800931c:	2b1f      	cmp	r3, #31
 800931e:	dc00      	bgt.n	8009322 <_strtod_l+0x646>
 8009320:	e121      	b.n	8009566 <_strtod_l+0x88a>
 8009322:	2600      	movs	r6, #0
 8009324:	2b34      	cmp	r3, #52	; 0x34
 8009326:	dc00      	bgt.n	800932a <_strtod_l+0x64e>
 8009328:	e116      	b.n	8009558 <_strtod_l+0x87c>
 800932a:	27dc      	movs	r7, #220	; 0xdc
 800932c:	04bf      	lsls	r7, r7, #18
 800932e:	2200      	movs	r2, #0
 8009330:	2300      	movs	r3, #0
 8009332:	0030      	movs	r0, r6
 8009334:	0039      	movs	r1, r7
 8009336:	f7f7 f889 	bl	800044c <__aeabi_dcmpeq>
 800933a:	2800      	cmp	r0, #0
 800933c:	d19f      	bne.n	800927e <_strtod_l+0x5a2>
 800933e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009340:	9a08      	ldr	r2, [sp, #32]
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009346:	9b05      	ldr	r3, [sp, #20]
 8009348:	9804      	ldr	r0, [sp, #16]
 800934a:	f7ff f89f 	bl	800848c <__s2b>
 800934e:	900d      	str	r0, [sp, #52]	; 0x34
 8009350:	2800      	cmp	r0, #0
 8009352:	d100      	bne.n	8009356 <_strtod_l+0x67a>
 8009354:	e720      	b.n	8009198 <_strtod_l+0x4bc>
 8009356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009358:	9906      	ldr	r1, [sp, #24]
 800935a:	17da      	asrs	r2, r3, #31
 800935c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800935e:	1a5b      	subs	r3, r3, r1
 8009360:	401a      	ands	r2, r3
 8009362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009364:	9215      	str	r2, [sp, #84]	; 0x54
 8009366:	43db      	mvns	r3, r3
 8009368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800936a:	17db      	asrs	r3, r3, #31
 800936c:	401a      	ands	r2, r3
 800936e:	2300      	movs	r3, #0
 8009370:	9218      	str	r2, [sp, #96]	; 0x60
 8009372:	9305      	str	r3, [sp, #20]
 8009374:	9306      	str	r3, [sp, #24]
 8009376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009378:	9804      	ldr	r0, [sp, #16]
 800937a:	6859      	ldr	r1, [r3, #4]
 800937c:	f7fe ffda 	bl	8008334 <_Balloc>
 8009380:	9008      	str	r0, [sp, #32]
 8009382:	2800      	cmp	r0, #0
 8009384:	d100      	bne.n	8009388 <_strtod_l+0x6ac>
 8009386:	e70c      	b.n	80091a2 <_strtod_l+0x4c6>
 8009388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800938a:	300c      	adds	r0, #12
 800938c:	0019      	movs	r1, r3
 800938e:	691a      	ldr	r2, [r3, #16]
 8009390:	310c      	adds	r1, #12
 8009392:	3202      	adds	r2, #2
 8009394:	0092      	lsls	r2, r2, #2
 8009396:	f000 fd8b 	bl	8009eb0 <memcpy>
 800939a:	ab1e      	add	r3, sp, #120	; 0x78
 800939c:	9301      	str	r3, [sp, #4]
 800939e:	ab1d      	add	r3, sp, #116	; 0x74
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	0032      	movs	r2, r6
 80093a4:	003b      	movs	r3, r7
 80093a6:	9804      	ldr	r0, [sp, #16]
 80093a8:	9610      	str	r6, [sp, #64]	; 0x40
 80093aa:	9711      	str	r7, [sp, #68]	; 0x44
 80093ac:	f7ff fbb0 	bl	8008b10 <__d2b>
 80093b0:	901c      	str	r0, [sp, #112]	; 0x70
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d100      	bne.n	80093b8 <_strtod_l+0x6dc>
 80093b6:	e6f4      	b.n	80091a2 <_strtod_l+0x4c6>
 80093b8:	2101      	movs	r1, #1
 80093ba:	9804      	ldr	r0, [sp, #16]
 80093bc:	f7ff f8fa 	bl	80085b4 <__i2b>
 80093c0:	9006      	str	r0, [sp, #24]
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d100      	bne.n	80093c8 <_strtod_l+0x6ec>
 80093c6:	e6ec      	b.n	80091a2 <_strtod_l+0x4c6>
 80093c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80093cc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80093ce:	1ad4      	subs	r4, r2, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	db01      	blt.n	80093d8 <_strtod_l+0x6fc>
 80093d4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80093d6:	195d      	adds	r5, r3, r5
 80093d8:	9907      	ldr	r1, [sp, #28]
 80093da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80093dc:	1a5b      	subs	r3, r3, r1
 80093de:	2136      	movs	r1, #54	; 0x36
 80093e0:	189b      	adds	r3, r3, r2
 80093e2:	1a8a      	subs	r2, r1, r2
 80093e4:	4985      	ldr	r1, [pc, #532]	; (80095fc <_strtod_l+0x920>)
 80093e6:	2001      	movs	r0, #1
 80093e8:	468c      	mov	ip, r1
 80093ea:	2100      	movs	r1, #0
 80093ec:	3b01      	subs	r3, #1
 80093ee:	9114      	str	r1, [sp, #80]	; 0x50
 80093f0:	9012      	str	r0, [sp, #72]	; 0x48
 80093f2:	4563      	cmp	r3, ip
 80093f4:	da07      	bge.n	8009406 <_strtod_l+0x72a>
 80093f6:	4661      	mov	r1, ip
 80093f8:	1ac9      	subs	r1, r1, r3
 80093fa:	1a52      	subs	r2, r2, r1
 80093fc:	291f      	cmp	r1, #31
 80093fe:	dd00      	ble.n	8009402 <_strtod_l+0x726>
 8009400:	e0b6      	b.n	8009570 <_strtod_l+0x894>
 8009402:	4088      	lsls	r0, r1
 8009404:	9012      	str	r0, [sp, #72]	; 0x48
 8009406:	18ab      	adds	r3, r5, r2
 8009408:	930c      	str	r3, [sp, #48]	; 0x30
 800940a:	18a4      	adds	r4, r4, r2
 800940c:	9b07      	ldr	r3, [sp, #28]
 800940e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009410:	191c      	adds	r4, r3, r4
 8009412:	002b      	movs	r3, r5
 8009414:	4295      	cmp	r5, r2
 8009416:	dd00      	ble.n	800941a <_strtod_l+0x73e>
 8009418:	0013      	movs	r3, r2
 800941a:	42a3      	cmp	r3, r4
 800941c:	dd00      	ble.n	8009420 <_strtod_l+0x744>
 800941e:	0023      	movs	r3, r4
 8009420:	2b00      	cmp	r3, #0
 8009422:	dd04      	ble.n	800942e <_strtod_l+0x752>
 8009424:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009426:	1ae4      	subs	r4, r4, r3
 8009428:	1ad2      	subs	r2, r2, r3
 800942a:	920c      	str	r2, [sp, #48]	; 0x30
 800942c:	1aed      	subs	r5, r5, r3
 800942e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009430:	2b00      	cmp	r3, #0
 8009432:	dd17      	ble.n	8009464 <_strtod_l+0x788>
 8009434:	001a      	movs	r2, r3
 8009436:	9906      	ldr	r1, [sp, #24]
 8009438:	9804      	ldr	r0, [sp, #16]
 800943a:	f7ff f983 	bl	8008744 <__pow5mult>
 800943e:	9006      	str	r0, [sp, #24]
 8009440:	2800      	cmp	r0, #0
 8009442:	d100      	bne.n	8009446 <_strtod_l+0x76a>
 8009444:	e6ad      	b.n	80091a2 <_strtod_l+0x4c6>
 8009446:	0001      	movs	r1, r0
 8009448:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800944a:	9804      	ldr	r0, [sp, #16]
 800944c:	f7ff f8ca 	bl	80085e4 <__multiply>
 8009450:	900e      	str	r0, [sp, #56]	; 0x38
 8009452:	2800      	cmp	r0, #0
 8009454:	d100      	bne.n	8009458 <_strtod_l+0x77c>
 8009456:	e6a4      	b.n	80091a2 <_strtod_l+0x4c6>
 8009458:	991c      	ldr	r1, [sp, #112]	; 0x70
 800945a:	9804      	ldr	r0, [sp, #16]
 800945c:	f7fe ffae 	bl	80083bc <_Bfree>
 8009460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009462:	931c      	str	r3, [sp, #112]	; 0x70
 8009464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009466:	2b00      	cmp	r3, #0
 8009468:	dd00      	ble.n	800946c <_strtod_l+0x790>
 800946a:	e087      	b.n	800957c <_strtod_l+0x8a0>
 800946c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946e:	2b00      	cmp	r3, #0
 8009470:	dd08      	ble.n	8009484 <_strtod_l+0x7a8>
 8009472:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009474:	9908      	ldr	r1, [sp, #32]
 8009476:	9804      	ldr	r0, [sp, #16]
 8009478:	f7ff f964 	bl	8008744 <__pow5mult>
 800947c:	9008      	str	r0, [sp, #32]
 800947e:	2800      	cmp	r0, #0
 8009480:	d100      	bne.n	8009484 <_strtod_l+0x7a8>
 8009482:	e68e      	b.n	80091a2 <_strtod_l+0x4c6>
 8009484:	2c00      	cmp	r4, #0
 8009486:	dd08      	ble.n	800949a <_strtod_l+0x7be>
 8009488:	0022      	movs	r2, r4
 800948a:	9908      	ldr	r1, [sp, #32]
 800948c:	9804      	ldr	r0, [sp, #16]
 800948e:	f7ff f9b5 	bl	80087fc <__lshift>
 8009492:	9008      	str	r0, [sp, #32]
 8009494:	2800      	cmp	r0, #0
 8009496:	d100      	bne.n	800949a <_strtod_l+0x7be>
 8009498:	e683      	b.n	80091a2 <_strtod_l+0x4c6>
 800949a:	2d00      	cmp	r5, #0
 800949c:	dd08      	ble.n	80094b0 <_strtod_l+0x7d4>
 800949e:	002a      	movs	r2, r5
 80094a0:	9906      	ldr	r1, [sp, #24]
 80094a2:	9804      	ldr	r0, [sp, #16]
 80094a4:	f7ff f9aa 	bl	80087fc <__lshift>
 80094a8:	9006      	str	r0, [sp, #24]
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d100      	bne.n	80094b0 <_strtod_l+0x7d4>
 80094ae:	e678      	b.n	80091a2 <_strtod_l+0x4c6>
 80094b0:	9a08      	ldr	r2, [sp, #32]
 80094b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80094b4:	9804      	ldr	r0, [sp, #16]
 80094b6:	f7ff fa2b 	bl	8008910 <__mdiff>
 80094ba:	9005      	str	r0, [sp, #20]
 80094bc:	2800      	cmp	r0, #0
 80094be:	d100      	bne.n	80094c2 <_strtod_l+0x7e6>
 80094c0:	e66f      	b.n	80091a2 <_strtod_l+0x4c6>
 80094c2:	2200      	movs	r2, #0
 80094c4:	68c3      	ldr	r3, [r0, #12]
 80094c6:	9906      	ldr	r1, [sp, #24]
 80094c8:	60c2      	str	r2, [r0, #12]
 80094ca:	930c      	str	r3, [sp, #48]	; 0x30
 80094cc:	f7ff fa04 	bl	80088d8 <__mcmp>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	da5d      	bge.n	8009590 <_strtod_l+0x8b4>
 80094d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094d6:	4333      	orrs	r3, r6
 80094d8:	d000      	beq.n	80094dc <_strtod_l+0x800>
 80094da:	e088      	b.n	80095ee <_strtod_l+0x912>
 80094dc:	033b      	lsls	r3, r7, #12
 80094de:	d000      	beq.n	80094e2 <_strtod_l+0x806>
 80094e0:	e085      	b.n	80095ee <_strtod_l+0x912>
 80094e2:	22d6      	movs	r2, #214	; 0xd6
 80094e4:	4b46      	ldr	r3, [pc, #280]	; (8009600 <_strtod_l+0x924>)
 80094e6:	04d2      	lsls	r2, r2, #19
 80094e8:	403b      	ands	r3, r7
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d97f      	bls.n	80095ee <_strtod_l+0x912>
 80094ee:	9b05      	ldr	r3, [sp, #20]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d103      	bne.n	80094fe <_strtod_l+0x822>
 80094f6:	9b05      	ldr	r3, [sp, #20]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	dd77      	ble.n	80095ee <_strtod_l+0x912>
 80094fe:	9905      	ldr	r1, [sp, #20]
 8009500:	2201      	movs	r2, #1
 8009502:	9804      	ldr	r0, [sp, #16]
 8009504:	f7ff f97a 	bl	80087fc <__lshift>
 8009508:	9906      	ldr	r1, [sp, #24]
 800950a:	9005      	str	r0, [sp, #20]
 800950c:	f7ff f9e4 	bl	80088d8 <__mcmp>
 8009510:	2800      	cmp	r0, #0
 8009512:	dd6c      	ble.n	80095ee <_strtod_l+0x912>
 8009514:	9907      	ldr	r1, [sp, #28]
 8009516:	003b      	movs	r3, r7
 8009518:	4a39      	ldr	r2, [pc, #228]	; (8009600 <_strtod_l+0x924>)
 800951a:	2900      	cmp	r1, #0
 800951c:	d100      	bne.n	8009520 <_strtod_l+0x844>
 800951e:	e094      	b.n	800964a <_strtod_l+0x96e>
 8009520:	0011      	movs	r1, r2
 8009522:	20d6      	movs	r0, #214	; 0xd6
 8009524:	4039      	ands	r1, r7
 8009526:	04c0      	lsls	r0, r0, #19
 8009528:	4281      	cmp	r1, r0
 800952a:	dd00      	ble.n	800952e <_strtod_l+0x852>
 800952c:	e08d      	b.n	800964a <_strtod_l+0x96e>
 800952e:	23dc      	movs	r3, #220	; 0xdc
 8009530:	049b      	lsls	r3, r3, #18
 8009532:	4299      	cmp	r1, r3
 8009534:	dc00      	bgt.n	8009538 <_strtod_l+0x85c>
 8009536:	e6a7      	b.n	8009288 <_strtod_l+0x5ac>
 8009538:	0030      	movs	r0, r6
 800953a:	0039      	movs	r1, r7
 800953c:	4b31      	ldr	r3, [pc, #196]	; (8009604 <_strtod_l+0x928>)
 800953e:	2200      	movs	r2, #0
 8009540:	f7f8 fb98 	bl	8001c74 <__aeabi_dmul>
 8009544:	4b2e      	ldr	r3, [pc, #184]	; (8009600 <_strtod_l+0x924>)
 8009546:	0006      	movs	r6, r0
 8009548:	000f      	movs	r7, r1
 800954a:	420b      	tst	r3, r1
 800954c:	d000      	beq.n	8009550 <_strtod_l+0x874>
 800954e:	e631      	b.n	80091b4 <_strtod_l+0x4d8>
 8009550:	2322      	movs	r3, #34	; 0x22
 8009552:	9a04      	ldr	r2, [sp, #16]
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	e62d      	b.n	80091b4 <_strtod_l+0x4d8>
 8009558:	234b      	movs	r3, #75	; 0x4b
 800955a:	1a9a      	subs	r2, r3, r2
 800955c:	3b4c      	subs	r3, #76	; 0x4c
 800955e:	4093      	lsls	r3, r2
 8009560:	4019      	ands	r1, r3
 8009562:	000f      	movs	r7, r1
 8009564:	e6e3      	b.n	800932e <_strtod_l+0x652>
 8009566:	2201      	movs	r2, #1
 8009568:	4252      	negs	r2, r2
 800956a:	409a      	lsls	r2, r3
 800956c:	4016      	ands	r6, r2
 800956e:	e6de      	b.n	800932e <_strtod_l+0x652>
 8009570:	4925      	ldr	r1, [pc, #148]	; (8009608 <_strtod_l+0x92c>)
 8009572:	1acb      	subs	r3, r1, r3
 8009574:	0001      	movs	r1, r0
 8009576:	4099      	lsls	r1, r3
 8009578:	9114      	str	r1, [sp, #80]	; 0x50
 800957a:	e743      	b.n	8009404 <_strtod_l+0x728>
 800957c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800957e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009580:	9804      	ldr	r0, [sp, #16]
 8009582:	f7ff f93b 	bl	80087fc <__lshift>
 8009586:	901c      	str	r0, [sp, #112]	; 0x70
 8009588:	2800      	cmp	r0, #0
 800958a:	d000      	beq.n	800958e <_strtod_l+0x8b2>
 800958c:	e76e      	b.n	800946c <_strtod_l+0x790>
 800958e:	e608      	b.n	80091a2 <_strtod_l+0x4c6>
 8009590:	970e      	str	r7, [sp, #56]	; 0x38
 8009592:	2800      	cmp	r0, #0
 8009594:	d177      	bne.n	8009686 <_strtod_l+0x9aa>
 8009596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009598:	033b      	lsls	r3, r7, #12
 800959a:	0b1b      	lsrs	r3, r3, #12
 800959c:	2a00      	cmp	r2, #0
 800959e:	d039      	beq.n	8009614 <_strtod_l+0x938>
 80095a0:	4a1a      	ldr	r2, [pc, #104]	; (800960c <_strtod_l+0x930>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d139      	bne.n	800961a <_strtod_l+0x93e>
 80095a6:	2101      	movs	r1, #1
 80095a8:	9b07      	ldr	r3, [sp, #28]
 80095aa:	4249      	negs	r1, r1
 80095ac:	0032      	movs	r2, r6
 80095ae:	0008      	movs	r0, r1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <_strtod_l+0x8f0>
 80095b4:	24d4      	movs	r4, #212	; 0xd4
 80095b6:	4b12      	ldr	r3, [pc, #72]	; (8009600 <_strtod_l+0x924>)
 80095b8:	0008      	movs	r0, r1
 80095ba:	403b      	ands	r3, r7
 80095bc:	04e4      	lsls	r4, r4, #19
 80095be:	42a3      	cmp	r3, r4
 80095c0:	d804      	bhi.n	80095cc <_strtod_l+0x8f0>
 80095c2:	306c      	adds	r0, #108	; 0x6c
 80095c4:	0d1b      	lsrs	r3, r3, #20
 80095c6:	1ac3      	subs	r3, r0, r3
 80095c8:	4099      	lsls	r1, r3
 80095ca:	0008      	movs	r0, r1
 80095cc:	4282      	cmp	r2, r0
 80095ce:	d124      	bne.n	800961a <_strtod_l+0x93e>
 80095d0:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <_strtod_l+0x934>)
 80095d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80095d4:	4299      	cmp	r1, r3
 80095d6:	d102      	bne.n	80095de <_strtod_l+0x902>
 80095d8:	3201      	adds	r2, #1
 80095da:	d100      	bne.n	80095de <_strtod_l+0x902>
 80095dc:	e5e1      	b.n	80091a2 <_strtod_l+0x4c6>
 80095de:	4b08      	ldr	r3, [pc, #32]	; (8009600 <_strtod_l+0x924>)
 80095e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095e2:	2600      	movs	r6, #0
 80095e4:	401a      	ands	r2, r3
 80095e6:	0013      	movs	r3, r2
 80095e8:	2280      	movs	r2, #128	; 0x80
 80095ea:	0352      	lsls	r2, r2, #13
 80095ec:	189f      	adds	r7, r3, r2
 80095ee:	9b07      	ldr	r3, [sp, #28]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1a1      	bne.n	8009538 <_strtod_l+0x85c>
 80095f4:	e5de      	b.n	80091b4 <_strtod_l+0x4d8>
 80095f6:	46c0      	nop			; (mov r8, r8)
 80095f8:	0800b028 	.word	0x0800b028
 80095fc:	fffffc02 	.word	0xfffffc02
 8009600:	7ff00000 	.word	0x7ff00000
 8009604:	39500000 	.word	0x39500000
 8009608:	fffffbe2 	.word	0xfffffbe2
 800960c:	000fffff 	.word	0x000fffff
 8009610:	7fefffff 	.word	0x7fefffff
 8009614:	4333      	orrs	r3, r6
 8009616:	d100      	bne.n	800961a <_strtod_l+0x93e>
 8009618:	e77c      	b.n	8009514 <_strtod_l+0x838>
 800961a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800961c:	2b00      	cmp	r3, #0
 800961e:	d01d      	beq.n	800965c <_strtod_l+0x980>
 8009620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009622:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009624:	4213      	tst	r3, r2
 8009626:	d0e2      	beq.n	80095ee <_strtod_l+0x912>
 8009628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800962a:	0030      	movs	r0, r6
 800962c:	0039      	movs	r1, r7
 800962e:	9a07      	ldr	r2, [sp, #28]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d017      	beq.n	8009664 <_strtod_l+0x988>
 8009634:	f7ff fb3a 	bl	8008cac <sulp>
 8009638:	0002      	movs	r2, r0
 800963a:	000b      	movs	r3, r1
 800963c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800963e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009640:	f7f7 fbbe 	bl	8000dc0 <__aeabi_dadd>
 8009644:	0006      	movs	r6, r0
 8009646:	000f      	movs	r7, r1
 8009648:	e7d1      	b.n	80095ee <_strtod_l+0x912>
 800964a:	2601      	movs	r6, #1
 800964c:	4013      	ands	r3, r2
 800964e:	4a98      	ldr	r2, [pc, #608]	; (80098b0 <_strtod_l+0xbd4>)
 8009650:	4276      	negs	r6, r6
 8009652:	189b      	adds	r3, r3, r2
 8009654:	4a97      	ldr	r2, [pc, #604]	; (80098b4 <_strtod_l+0xbd8>)
 8009656:	431a      	orrs	r2, r3
 8009658:	0017      	movs	r7, r2
 800965a:	e7c8      	b.n	80095ee <_strtod_l+0x912>
 800965c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800965e:	4233      	tst	r3, r6
 8009660:	d0c5      	beq.n	80095ee <_strtod_l+0x912>
 8009662:	e7e1      	b.n	8009628 <_strtod_l+0x94c>
 8009664:	f7ff fb22 	bl	8008cac <sulp>
 8009668:	0002      	movs	r2, r0
 800966a:	000b      	movs	r3, r1
 800966c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800966e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009670:	f7f8 fdc2 	bl	80021f8 <__aeabi_dsub>
 8009674:	2200      	movs	r2, #0
 8009676:	2300      	movs	r3, #0
 8009678:	0006      	movs	r6, r0
 800967a:	000f      	movs	r7, r1
 800967c:	f7f6 fee6 	bl	800044c <__aeabi_dcmpeq>
 8009680:	2800      	cmp	r0, #0
 8009682:	d0b4      	beq.n	80095ee <_strtod_l+0x912>
 8009684:	e600      	b.n	8009288 <_strtod_l+0x5ac>
 8009686:	9906      	ldr	r1, [sp, #24]
 8009688:	9805      	ldr	r0, [sp, #20]
 800968a:	f7ff faa1 	bl	8008bd0 <__ratio>
 800968e:	2380      	movs	r3, #128	; 0x80
 8009690:	2200      	movs	r2, #0
 8009692:	05db      	lsls	r3, r3, #23
 8009694:	0004      	movs	r4, r0
 8009696:	000d      	movs	r5, r1
 8009698:	f7f6 fee8 	bl	800046c <__aeabi_dcmple>
 800969c:	2800      	cmp	r0, #0
 800969e:	d06d      	beq.n	800977c <_strtod_l+0xaa0>
 80096a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d000      	beq.n	80096a8 <_strtod_l+0x9cc>
 80096a6:	e07e      	b.n	80097a6 <_strtod_l+0xaca>
 80096a8:	2e00      	cmp	r6, #0
 80096aa:	d158      	bne.n	800975e <_strtod_l+0xa82>
 80096ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096ae:	031b      	lsls	r3, r3, #12
 80096b0:	d000      	beq.n	80096b4 <_strtod_l+0x9d8>
 80096b2:	e07f      	b.n	80097b4 <_strtod_l+0xad8>
 80096b4:	2200      	movs	r2, #0
 80096b6:	0020      	movs	r0, r4
 80096b8:	0029      	movs	r1, r5
 80096ba:	4b7f      	ldr	r3, [pc, #508]	; (80098b8 <_strtod_l+0xbdc>)
 80096bc:	f7f6 fecc 	bl	8000458 <__aeabi_dcmplt>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d158      	bne.n	8009776 <_strtod_l+0xa9a>
 80096c4:	0020      	movs	r0, r4
 80096c6:	0029      	movs	r1, r5
 80096c8:	2200      	movs	r2, #0
 80096ca:	4b7c      	ldr	r3, [pc, #496]	; (80098bc <_strtod_l+0xbe0>)
 80096cc:	f7f8 fad2 	bl	8001c74 <__aeabi_dmul>
 80096d0:	0004      	movs	r4, r0
 80096d2:	000d      	movs	r5, r1
 80096d4:	2380      	movs	r3, #128	; 0x80
 80096d6:	061b      	lsls	r3, r3, #24
 80096d8:	940a      	str	r4, [sp, #40]	; 0x28
 80096da:	18eb      	adds	r3, r5, r3
 80096dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80096de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096e2:	9212      	str	r2, [sp, #72]	; 0x48
 80096e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80096e6:	4a76      	ldr	r2, [pc, #472]	; (80098c0 <_strtod_l+0xbe4>)
 80096e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096ea:	4013      	ands	r3, r2
 80096ec:	9314      	str	r3, [sp, #80]	; 0x50
 80096ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096f0:	4b74      	ldr	r3, [pc, #464]	; (80098c4 <_strtod_l+0xbe8>)
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d000      	beq.n	80096f8 <_strtod_l+0xa1c>
 80096f6:	e091      	b.n	800981c <_strtod_l+0xb40>
 80096f8:	4a73      	ldr	r2, [pc, #460]	; (80098c8 <_strtod_l+0xbec>)
 80096fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096fc:	4694      	mov	ip, r2
 80096fe:	4463      	add	r3, ip
 8009700:	001f      	movs	r7, r3
 8009702:	0030      	movs	r0, r6
 8009704:	0019      	movs	r1, r3
 8009706:	f7ff f99b 	bl	8008a40 <__ulp>
 800970a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800970c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800970e:	f7f8 fab1 	bl	8001c74 <__aeabi_dmul>
 8009712:	0032      	movs	r2, r6
 8009714:	003b      	movs	r3, r7
 8009716:	f7f7 fb53 	bl	8000dc0 <__aeabi_dadd>
 800971a:	4a69      	ldr	r2, [pc, #420]	; (80098c0 <_strtod_l+0xbe4>)
 800971c:	4b6b      	ldr	r3, [pc, #428]	; (80098cc <_strtod_l+0xbf0>)
 800971e:	0006      	movs	r6, r0
 8009720:	400a      	ands	r2, r1
 8009722:	429a      	cmp	r2, r3
 8009724:	d949      	bls.n	80097ba <_strtod_l+0xade>
 8009726:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009728:	4b69      	ldr	r3, [pc, #420]	; (80098d0 <_strtod_l+0xbf4>)
 800972a:	429a      	cmp	r2, r3
 800972c:	d103      	bne.n	8009736 <_strtod_l+0xa5a>
 800972e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009730:	3301      	adds	r3, #1
 8009732:	d100      	bne.n	8009736 <_strtod_l+0xa5a>
 8009734:	e535      	b.n	80091a2 <_strtod_l+0x4c6>
 8009736:	2601      	movs	r6, #1
 8009738:	4f65      	ldr	r7, [pc, #404]	; (80098d0 <_strtod_l+0xbf4>)
 800973a:	4276      	negs	r6, r6
 800973c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800973e:	9804      	ldr	r0, [sp, #16]
 8009740:	f7fe fe3c 	bl	80083bc <_Bfree>
 8009744:	9908      	ldr	r1, [sp, #32]
 8009746:	9804      	ldr	r0, [sp, #16]
 8009748:	f7fe fe38 	bl	80083bc <_Bfree>
 800974c:	9906      	ldr	r1, [sp, #24]
 800974e:	9804      	ldr	r0, [sp, #16]
 8009750:	f7fe fe34 	bl	80083bc <_Bfree>
 8009754:	9905      	ldr	r1, [sp, #20]
 8009756:	9804      	ldr	r0, [sp, #16]
 8009758:	f7fe fe30 	bl	80083bc <_Bfree>
 800975c:	e60b      	b.n	8009376 <_strtod_l+0x69a>
 800975e:	2e01      	cmp	r6, #1
 8009760:	d103      	bne.n	800976a <_strtod_l+0xa8e>
 8009762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009764:	2b00      	cmp	r3, #0
 8009766:	d100      	bne.n	800976a <_strtod_l+0xa8e>
 8009768:	e58e      	b.n	8009288 <_strtod_l+0x5ac>
 800976a:	2300      	movs	r3, #0
 800976c:	4c59      	ldr	r4, [pc, #356]	; (80098d4 <_strtod_l+0xbf8>)
 800976e:	930a      	str	r3, [sp, #40]	; 0x28
 8009770:	940b      	str	r4, [sp, #44]	; 0x2c
 8009772:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009774:	e01c      	b.n	80097b0 <_strtod_l+0xad4>
 8009776:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009778:	4d50      	ldr	r5, [pc, #320]	; (80098bc <_strtod_l+0xbe0>)
 800977a:	e7ab      	b.n	80096d4 <_strtod_l+0x9f8>
 800977c:	2200      	movs	r2, #0
 800977e:	0020      	movs	r0, r4
 8009780:	0029      	movs	r1, r5
 8009782:	4b4e      	ldr	r3, [pc, #312]	; (80098bc <_strtod_l+0xbe0>)
 8009784:	f7f8 fa76 	bl	8001c74 <__aeabi_dmul>
 8009788:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800978a:	0004      	movs	r4, r0
 800978c:	000b      	movs	r3, r1
 800978e:	000d      	movs	r5, r1
 8009790:	2a00      	cmp	r2, #0
 8009792:	d104      	bne.n	800979e <_strtod_l+0xac2>
 8009794:	2280      	movs	r2, #128	; 0x80
 8009796:	0612      	lsls	r2, r2, #24
 8009798:	900a      	str	r0, [sp, #40]	; 0x28
 800979a:	188b      	adds	r3, r1, r2
 800979c:	e79e      	b.n	80096dc <_strtod_l+0xa00>
 800979e:	0002      	movs	r2, r0
 80097a0:	920a      	str	r2, [sp, #40]	; 0x28
 80097a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80097a4:	e79b      	b.n	80096de <_strtod_l+0xa02>
 80097a6:	2300      	movs	r3, #0
 80097a8:	4c43      	ldr	r4, [pc, #268]	; (80098b8 <_strtod_l+0xbdc>)
 80097aa:	930a      	str	r3, [sp, #40]	; 0x28
 80097ac:	940b      	str	r4, [sp, #44]	; 0x2c
 80097ae:	2400      	movs	r4, #0
 80097b0:	4d41      	ldr	r5, [pc, #260]	; (80098b8 <_strtod_l+0xbdc>)
 80097b2:	e794      	b.n	80096de <_strtod_l+0xa02>
 80097b4:	2300      	movs	r3, #0
 80097b6:	4c47      	ldr	r4, [pc, #284]	; (80098d4 <_strtod_l+0xbf8>)
 80097b8:	e7f7      	b.n	80097aa <_strtod_l+0xace>
 80097ba:	23d4      	movs	r3, #212	; 0xd4
 80097bc:	049b      	lsls	r3, r3, #18
 80097be:	18cf      	adds	r7, r1, r3
 80097c0:	9b07      	ldr	r3, [sp, #28]
 80097c2:	970e      	str	r7, [sp, #56]	; 0x38
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1b9      	bne.n	800973c <_strtod_l+0xa60>
 80097c8:	4b3d      	ldr	r3, [pc, #244]	; (80098c0 <_strtod_l+0xbe4>)
 80097ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097cc:	403b      	ands	r3, r7
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d1b4      	bne.n	800973c <_strtod_l+0xa60>
 80097d2:	0020      	movs	r0, r4
 80097d4:	0029      	movs	r1, r5
 80097d6:	f7f6 fed3 	bl	8000580 <__aeabi_d2lz>
 80097da:	f7f6 ff0d 	bl	80005f8 <__aeabi_l2d>
 80097de:	0002      	movs	r2, r0
 80097e0:	000b      	movs	r3, r1
 80097e2:	0020      	movs	r0, r4
 80097e4:	0029      	movs	r1, r5
 80097e6:	f7f8 fd07 	bl	80021f8 <__aeabi_dsub>
 80097ea:	033b      	lsls	r3, r7, #12
 80097ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097ee:	0b1b      	lsrs	r3, r3, #12
 80097f0:	4333      	orrs	r3, r6
 80097f2:	4313      	orrs	r3, r2
 80097f4:	0004      	movs	r4, r0
 80097f6:	000d      	movs	r5, r1
 80097f8:	4a37      	ldr	r2, [pc, #220]	; (80098d8 <_strtod_l+0xbfc>)
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d054      	beq.n	80098a8 <_strtod_l+0xbcc>
 80097fe:	4b37      	ldr	r3, [pc, #220]	; (80098dc <_strtod_l+0xc00>)
 8009800:	f7f6 fe2a 	bl	8000458 <__aeabi_dcmplt>
 8009804:	2800      	cmp	r0, #0
 8009806:	d000      	beq.n	800980a <_strtod_l+0xb2e>
 8009808:	e4d4      	b.n	80091b4 <_strtod_l+0x4d8>
 800980a:	0020      	movs	r0, r4
 800980c:	0029      	movs	r1, r5
 800980e:	4a34      	ldr	r2, [pc, #208]	; (80098e0 <_strtod_l+0xc04>)
 8009810:	4b2a      	ldr	r3, [pc, #168]	; (80098bc <_strtod_l+0xbe0>)
 8009812:	f7f6 fe35 	bl	8000480 <__aeabi_dcmpgt>
 8009816:	2800      	cmp	r0, #0
 8009818:	d090      	beq.n	800973c <_strtod_l+0xa60>
 800981a:	e4cb      	b.n	80091b4 <_strtod_l+0x4d8>
 800981c:	9b07      	ldr	r3, [sp, #28]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d02b      	beq.n	800987a <_strtod_l+0xb9e>
 8009822:	23d4      	movs	r3, #212	; 0xd4
 8009824:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009826:	04db      	lsls	r3, r3, #19
 8009828:	429a      	cmp	r2, r3
 800982a:	d826      	bhi.n	800987a <_strtod_l+0xb9e>
 800982c:	0020      	movs	r0, r4
 800982e:	0029      	movs	r1, r5
 8009830:	4a2c      	ldr	r2, [pc, #176]	; (80098e4 <_strtod_l+0xc08>)
 8009832:	4b2d      	ldr	r3, [pc, #180]	; (80098e8 <_strtod_l+0xc0c>)
 8009834:	f7f6 fe1a 	bl	800046c <__aeabi_dcmple>
 8009838:	2800      	cmp	r0, #0
 800983a:	d017      	beq.n	800986c <_strtod_l+0xb90>
 800983c:	0020      	movs	r0, r4
 800983e:	0029      	movs	r1, r5
 8009840:	f7f6 fe80 	bl	8000544 <__aeabi_d2uiz>
 8009844:	2800      	cmp	r0, #0
 8009846:	d100      	bne.n	800984a <_strtod_l+0xb6e>
 8009848:	3001      	adds	r0, #1
 800984a:	f7f9 f8db 	bl	8002a04 <__aeabi_ui2d>
 800984e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009850:	0004      	movs	r4, r0
 8009852:	000b      	movs	r3, r1
 8009854:	000d      	movs	r5, r1
 8009856:	2a00      	cmp	r2, #0
 8009858:	d122      	bne.n	80098a0 <_strtod_l+0xbc4>
 800985a:	2280      	movs	r2, #128	; 0x80
 800985c:	0612      	lsls	r2, r2, #24
 800985e:	188b      	adds	r3, r1, r2
 8009860:	9016      	str	r0, [sp, #88]	; 0x58
 8009862:	9317      	str	r3, [sp, #92]	; 0x5c
 8009864:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009866:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009868:	9212      	str	r2, [sp, #72]	; 0x48
 800986a:	9313      	str	r3, [sp, #76]	; 0x4c
 800986c:	22d6      	movs	r2, #214	; 0xd6
 800986e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009870:	04d2      	lsls	r2, r2, #19
 8009872:	189b      	adds	r3, r3, r2
 8009874:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009876:	1a9b      	subs	r3, r3, r2
 8009878:	9313      	str	r3, [sp, #76]	; 0x4c
 800987a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800987c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800987e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009880:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8009882:	f7ff f8dd 	bl	8008a40 <__ulp>
 8009886:	0002      	movs	r2, r0
 8009888:	000b      	movs	r3, r1
 800988a:	0030      	movs	r0, r6
 800988c:	0039      	movs	r1, r7
 800988e:	f7f8 f9f1 	bl	8001c74 <__aeabi_dmul>
 8009892:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009894:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009896:	f7f7 fa93 	bl	8000dc0 <__aeabi_dadd>
 800989a:	0006      	movs	r6, r0
 800989c:	000f      	movs	r7, r1
 800989e:	e78f      	b.n	80097c0 <_strtod_l+0xae4>
 80098a0:	0002      	movs	r2, r0
 80098a2:	9216      	str	r2, [sp, #88]	; 0x58
 80098a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80098a6:	e7dd      	b.n	8009864 <_strtod_l+0xb88>
 80098a8:	4b10      	ldr	r3, [pc, #64]	; (80098ec <_strtod_l+0xc10>)
 80098aa:	f7f6 fdd5 	bl	8000458 <__aeabi_dcmplt>
 80098ae:	e7b2      	b.n	8009816 <_strtod_l+0xb3a>
 80098b0:	fff00000 	.word	0xfff00000
 80098b4:	000fffff 	.word	0x000fffff
 80098b8:	3ff00000 	.word	0x3ff00000
 80098bc:	3fe00000 	.word	0x3fe00000
 80098c0:	7ff00000 	.word	0x7ff00000
 80098c4:	7fe00000 	.word	0x7fe00000
 80098c8:	fcb00000 	.word	0xfcb00000
 80098cc:	7c9fffff 	.word	0x7c9fffff
 80098d0:	7fefffff 	.word	0x7fefffff
 80098d4:	bff00000 	.word	0xbff00000
 80098d8:	94a03595 	.word	0x94a03595
 80098dc:	3fdfffff 	.word	0x3fdfffff
 80098e0:	35afe535 	.word	0x35afe535
 80098e4:	ffc00000 	.word	0xffc00000
 80098e8:	41dfffff 	.word	0x41dfffff
 80098ec:	3fcfffff 	.word	0x3fcfffff

080098f0 <_strtod_r>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	4b02      	ldr	r3, [pc, #8]	; (80098fc <_strtod_r+0xc>)
 80098f4:	f7ff f9f2 	bl	8008cdc <_strtod_l>
 80098f8:	bd10      	pop	{r4, pc}
 80098fa:	46c0      	nop			; (mov r8, r8)
 80098fc:	20000068 	.word	0x20000068

08009900 <_strtol_l.constprop.0>:
 8009900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009902:	b087      	sub	sp, #28
 8009904:	001e      	movs	r6, r3
 8009906:	9005      	str	r0, [sp, #20]
 8009908:	9101      	str	r1, [sp, #4]
 800990a:	9202      	str	r2, [sp, #8]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d048      	beq.n	80099a2 <_strtol_l.constprop.0+0xa2>
 8009910:	000b      	movs	r3, r1
 8009912:	2e24      	cmp	r6, #36	; 0x24
 8009914:	d845      	bhi.n	80099a2 <_strtol_l.constprop.0+0xa2>
 8009916:	4a3b      	ldr	r2, [pc, #236]	; (8009a04 <_strtol_l.constprop.0+0x104>)
 8009918:	2108      	movs	r1, #8
 800991a:	4694      	mov	ip, r2
 800991c:	001a      	movs	r2, r3
 800991e:	4660      	mov	r0, ip
 8009920:	7814      	ldrb	r4, [r2, #0]
 8009922:	3301      	adds	r3, #1
 8009924:	5d00      	ldrb	r0, [r0, r4]
 8009926:	001d      	movs	r5, r3
 8009928:	0007      	movs	r7, r0
 800992a:	400f      	ands	r7, r1
 800992c:	4208      	tst	r0, r1
 800992e:	d1f5      	bne.n	800991c <_strtol_l.constprop.0+0x1c>
 8009930:	2c2d      	cmp	r4, #45	; 0x2d
 8009932:	d13d      	bne.n	80099b0 <_strtol_l.constprop.0+0xb0>
 8009934:	2701      	movs	r7, #1
 8009936:	781c      	ldrb	r4, [r3, #0]
 8009938:	1c95      	adds	r5, r2, #2
 800993a:	2e00      	cmp	r6, #0
 800993c:	d05e      	beq.n	80099fc <_strtol_l.constprop.0+0xfc>
 800993e:	2e10      	cmp	r6, #16
 8009940:	d109      	bne.n	8009956 <_strtol_l.constprop.0+0x56>
 8009942:	2c30      	cmp	r4, #48	; 0x30
 8009944:	d107      	bne.n	8009956 <_strtol_l.constprop.0+0x56>
 8009946:	2220      	movs	r2, #32
 8009948:	782b      	ldrb	r3, [r5, #0]
 800994a:	4393      	bics	r3, r2
 800994c:	2b58      	cmp	r3, #88	; 0x58
 800994e:	d150      	bne.n	80099f2 <_strtol_l.constprop.0+0xf2>
 8009950:	2610      	movs	r6, #16
 8009952:	786c      	ldrb	r4, [r5, #1]
 8009954:	3502      	adds	r5, #2
 8009956:	4b2c      	ldr	r3, [pc, #176]	; (8009a08 <_strtol_l.constprop.0+0x108>)
 8009958:	0031      	movs	r1, r6
 800995a:	18fb      	adds	r3, r7, r3
 800995c:	0018      	movs	r0, r3
 800995e:	9303      	str	r3, [sp, #12]
 8009960:	f7f6 fc74 	bl	800024c <__aeabi_uidivmod>
 8009964:	2200      	movs	r2, #0
 8009966:	9104      	str	r1, [sp, #16]
 8009968:	2101      	movs	r1, #1
 800996a:	4684      	mov	ip, r0
 800996c:	0010      	movs	r0, r2
 800996e:	4249      	negs	r1, r1
 8009970:	0023      	movs	r3, r4
 8009972:	3b30      	subs	r3, #48	; 0x30
 8009974:	2b09      	cmp	r3, #9
 8009976:	d903      	bls.n	8009980 <_strtol_l.constprop.0+0x80>
 8009978:	3b11      	subs	r3, #17
 800997a:	2b19      	cmp	r3, #25
 800997c:	d81d      	bhi.n	80099ba <_strtol_l.constprop.0+0xba>
 800997e:	330a      	adds	r3, #10
 8009980:	429e      	cmp	r6, r3
 8009982:	dd1e      	ble.n	80099c2 <_strtol_l.constprop.0+0xc2>
 8009984:	1c54      	adds	r4, r2, #1
 8009986:	d009      	beq.n	800999c <_strtol_l.constprop.0+0x9c>
 8009988:	000a      	movs	r2, r1
 800998a:	4584      	cmp	ip, r0
 800998c:	d306      	bcc.n	800999c <_strtol_l.constprop.0+0x9c>
 800998e:	d102      	bne.n	8009996 <_strtol_l.constprop.0+0x96>
 8009990:	9c04      	ldr	r4, [sp, #16]
 8009992:	429c      	cmp	r4, r3
 8009994:	db02      	blt.n	800999c <_strtol_l.constprop.0+0x9c>
 8009996:	2201      	movs	r2, #1
 8009998:	4370      	muls	r0, r6
 800999a:	1818      	adds	r0, r3, r0
 800999c:	782c      	ldrb	r4, [r5, #0]
 800999e:	3501      	adds	r5, #1
 80099a0:	e7e6      	b.n	8009970 <_strtol_l.constprop.0+0x70>
 80099a2:	f7fd fce5 	bl	8007370 <__errno>
 80099a6:	2316      	movs	r3, #22
 80099a8:	6003      	str	r3, [r0, #0]
 80099aa:	2000      	movs	r0, #0
 80099ac:	b007      	add	sp, #28
 80099ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099b0:	2c2b      	cmp	r4, #43	; 0x2b
 80099b2:	d1c2      	bne.n	800993a <_strtol_l.constprop.0+0x3a>
 80099b4:	781c      	ldrb	r4, [r3, #0]
 80099b6:	1c95      	adds	r5, r2, #2
 80099b8:	e7bf      	b.n	800993a <_strtol_l.constprop.0+0x3a>
 80099ba:	0023      	movs	r3, r4
 80099bc:	3b61      	subs	r3, #97	; 0x61
 80099be:	2b19      	cmp	r3, #25
 80099c0:	d9dd      	bls.n	800997e <_strtol_l.constprop.0+0x7e>
 80099c2:	1c53      	adds	r3, r2, #1
 80099c4:	d109      	bne.n	80099da <_strtol_l.constprop.0+0xda>
 80099c6:	2322      	movs	r3, #34	; 0x22
 80099c8:	9a05      	ldr	r2, [sp, #20]
 80099ca:	9803      	ldr	r0, [sp, #12]
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	9b02      	ldr	r3, [sp, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0eb      	beq.n	80099ac <_strtol_l.constprop.0+0xac>
 80099d4:	1e6b      	subs	r3, r5, #1
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	e007      	b.n	80099ea <_strtol_l.constprop.0+0xea>
 80099da:	2f00      	cmp	r7, #0
 80099dc:	d000      	beq.n	80099e0 <_strtol_l.constprop.0+0xe0>
 80099de:	4240      	negs	r0, r0
 80099e0:	9b02      	ldr	r3, [sp, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0e2      	beq.n	80099ac <_strtol_l.constprop.0+0xac>
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	d1f4      	bne.n	80099d4 <_strtol_l.constprop.0+0xd4>
 80099ea:	9b02      	ldr	r3, [sp, #8]
 80099ec:	9a01      	ldr	r2, [sp, #4]
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	e7dc      	b.n	80099ac <_strtol_l.constprop.0+0xac>
 80099f2:	2430      	movs	r4, #48	; 0x30
 80099f4:	2e00      	cmp	r6, #0
 80099f6:	d1ae      	bne.n	8009956 <_strtol_l.constprop.0+0x56>
 80099f8:	3608      	adds	r6, #8
 80099fa:	e7ac      	b.n	8009956 <_strtol_l.constprop.0+0x56>
 80099fc:	2c30      	cmp	r4, #48	; 0x30
 80099fe:	d0a2      	beq.n	8009946 <_strtol_l.constprop.0+0x46>
 8009a00:	260a      	movs	r6, #10
 8009a02:	e7a8      	b.n	8009956 <_strtol_l.constprop.0+0x56>
 8009a04:	0800b051 	.word	0x0800b051
 8009a08:	7fffffff 	.word	0x7fffffff

08009a0c <_strtol_r>:
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	f7ff ff77 	bl	8009900 <_strtol_l.constprop.0>
 8009a12:	bd10      	pop	{r4, pc}

08009a14 <__ssputs_r>:
 8009a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a16:	b085      	sub	sp, #20
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	9203      	str	r2, [sp, #12]
 8009a1c:	688e      	ldr	r6, [r1, #8]
 8009a1e:	9a01      	ldr	r2, [sp, #4]
 8009a20:	0007      	movs	r7, r0
 8009a22:	000c      	movs	r4, r1
 8009a24:	680b      	ldr	r3, [r1, #0]
 8009a26:	4296      	cmp	r6, r2
 8009a28:	d831      	bhi.n	8009a8e <__ssputs_r+0x7a>
 8009a2a:	898a      	ldrh	r2, [r1, #12]
 8009a2c:	2190      	movs	r1, #144	; 0x90
 8009a2e:	00c9      	lsls	r1, r1, #3
 8009a30:	420a      	tst	r2, r1
 8009a32:	d029      	beq.n	8009a88 <__ssputs_r+0x74>
 8009a34:	2003      	movs	r0, #3
 8009a36:	6921      	ldr	r1, [r4, #16]
 8009a38:	1a5b      	subs	r3, r3, r1
 8009a3a:	9302      	str	r3, [sp, #8]
 8009a3c:	6963      	ldr	r3, [r4, #20]
 8009a3e:	4343      	muls	r3, r0
 8009a40:	0fdd      	lsrs	r5, r3, #31
 8009a42:	18ed      	adds	r5, r5, r3
 8009a44:	9b01      	ldr	r3, [sp, #4]
 8009a46:	9802      	ldr	r0, [sp, #8]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	181b      	adds	r3, r3, r0
 8009a4c:	106d      	asrs	r5, r5, #1
 8009a4e:	42ab      	cmp	r3, r5
 8009a50:	d900      	bls.n	8009a54 <__ssputs_r+0x40>
 8009a52:	001d      	movs	r5, r3
 8009a54:	0552      	lsls	r2, r2, #21
 8009a56:	d529      	bpl.n	8009aac <__ssputs_r+0x98>
 8009a58:	0029      	movs	r1, r5
 8009a5a:	0038      	movs	r0, r7
 8009a5c:	f7fe fbd8 	bl	8008210 <_malloc_r>
 8009a60:	1e06      	subs	r6, r0, #0
 8009a62:	d02d      	beq.n	8009ac0 <__ssputs_r+0xac>
 8009a64:	9a02      	ldr	r2, [sp, #8]
 8009a66:	6921      	ldr	r1, [r4, #16]
 8009a68:	f000 fa22 	bl	8009eb0 <memcpy>
 8009a6c:	89a2      	ldrh	r2, [r4, #12]
 8009a6e:	4b19      	ldr	r3, [pc, #100]	; (8009ad4 <__ssputs_r+0xc0>)
 8009a70:	401a      	ands	r2, r3
 8009a72:	2380      	movs	r3, #128	; 0x80
 8009a74:	4313      	orrs	r3, r2
 8009a76:	81a3      	strh	r3, [r4, #12]
 8009a78:	9b02      	ldr	r3, [sp, #8]
 8009a7a:	6126      	str	r6, [r4, #16]
 8009a7c:	18f6      	adds	r6, r6, r3
 8009a7e:	6026      	str	r6, [r4, #0]
 8009a80:	6165      	str	r5, [r4, #20]
 8009a82:	9e01      	ldr	r6, [sp, #4]
 8009a84:	1aed      	subs	r5, r5, r3
 8009a86:	60a5      	str	r5, [r4, #8]
 8009a88:	9b01      	ldr	r3, [sp, #4]
 8009a8a:	429e      	cmp	r6, r3
 8009a8c:	d900      	bls.n	8009a90 <__ssputs_r+0x7c>
 8009a8e:	9e01      	ldr	r6, [sp, #4]
 8009a90:	0032      	movs	r2, r6
 8009a92:	9903      	ldr	r1, [sp, #12]
 8009a94:	6820      	ldr	r0, [r4, #0]
 8009a96:	f000 f9d4 	bl	8009e42 <memmove>
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	68a3      	ldr	r3, [r4, #8]
 8009a9e:	1b9b      	subs	r3, r3, r6
 8009aa0:	60a3      	str	r3, [r4, #8]
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	199b      	adds	r3, r3, r6
 8009aa6:	6023      	str	r3, [r4, #0]
 8009aa8:	b005      	add	sp, #20
 8009aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aac:	002a      	movs	r2, r5
 8009aae:	0038      	movs	r0, r7
 8009ab0:	f000 fdc8 	bl	800a644 <_realloc_r>
 8009ab4:	1e06      	subs	r6, r0, #0
 8009ab6:	d1df      	bne.n	8009a78 <__ssputs_r+0x64>
 8009ab8:	0038      	movs	r0, r7
 8009aba:	6921      	ldr	r1, [r4, #16]
 8009abc:	f7fe fb32 	bl	8008124 <_free_r>
 8009ac0:	230c      	movs	r3, #12
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	603b      	str	r3, [r7, #0]
 8009ac6:	89a2      	ldrh	r2, [r4, #12]
 8009ac8:	3334      	adds	r3, #52	; 0x34
 8009aca:	4313      	orrs	r3, r2
 8009acc:	81a3      	strh	r3, [r4, #12]
 8009ace:	4240      	negs	r0, r0
 8009ad0:	e7ea      	b.n	8009aa8 <__ssputs_r+0x94>
 8009ad2:	46c0      	nop			; (mov r8, r8)
 8009ad4:	fffffb7f 	.word	0xfffffb7f

08009ad8 <_svfiprintf_r>:
 8009ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ada:	b0a1      	sub	sp, #132	; 0x84
 8009adc:	9003      	str	r0, [sp, #12]
 8009ade:	001d      	movs	r5, r3
 8009ae0:	898b      	ldrh	r3, [r1, #12]
 8009ae2:	000f      	movs	r7, r1
 8009ae4:	0016      	movs	r6, r2
 8009ae6:	061b      	lsls	r3, r3, #24
 8009ae8:	d511      	bpl.n	8009b0e <_svfiprintf_r+0x36>
 8009aea:	690b      	ldr	r3, [r1, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10e      	bne.n	8009b0e <_svfiprintf_r+0x36>
 8009af0:	2140      	movs	r1, #64	; 0x40
 8009af2:	f7fe fb8d 	bl	8008210 <_malloc_r>
 8009af6:	6038      	str	r0, [r7, #0]
 8009af8:	6138      	str	r0, [r7, #16]
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d105      	bne.n	8009b0a <_svfiprintf_r+0x32>
 8009afe:	230c      	movs	r3, #12
 8009b00:	9a03      	ldr	r2, [sp, #12]
 8009b02:	3801      	subs	r0, #1
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	b021      	add	sp, #132	; 0x84
 8009b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b0a:	2340      	movs	r3, #64	; 0x40
 8009b0c:	617b      	str	r3, [r7, #20]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	ac08      	add	r4, sp, #32
 8009b12:	6163      	str	r3, [r4, #20]
 8009b14:	3320      	adds	r3, #32
 8009b16:	7663      	strb	r3, [r4, #25]
 8009b18:	3310      	adds	r3, #16
 8009b1a:	76a3      	strb	r3, [r4, #26]
 8009b1c:	9507      	str	r5, [sp, #28]
 8009b1e:	0035      	movs	r5, r6
 8009b20:	782b      	ldrb	r3, [r5, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <_svfiprintf_r+0x52>
 8009b26:	2b25      	cmp	r3, #37	; 0x25
 8009b28:	d148      	bne.n	8009bbc <_svfiprintf_r+0xe4>
 8009b2a:	1bab      	subs	r3, r5, r6
 8009b2c:	9305      	str	r3, [sp, #20]
 8009b2e:	42b5      	cmp	r5, r6
 8009b30:	d00b      	beq.n	8009b4a <_svfiprintf_r+0x72>
 8009b32:	0032      	movs	r2, r6
 8009b34:	0039      	movs	r1, r7
 8009b36:	9803      	ldr	r0, [sp, #12]
 8009b38:	f7ff ff6c 	bl	8009a14 <__ssputs_r>
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d100      	bne.n	8009b42 <_svfiprintf_r+0x6a>
 8009b40:	e0af      	b.n	8009ca2 <_svfiprintf_r+0x1ca>
 8009b42:	6963      	ldr	r3, [r4, #20]
 8009b44:	9a05      	ldr	r2, [sp, #20]
 8009b46:	189b      	adds	r3, r3, r2
 8009b48:	6163      	str	r3, [r4, #20]
 8009b4a:	782b      	ldrb	r3, [r5, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d100      	bne.n	8009b52 <_svfiprintf_r+0x7a>
 8009b50:	e0a7      	b.n	8009ca2 <_svfiprintf_r+0x1ca>
 8009b52:	2201      	movs	r2, #1
 8009b54:	2300      	movs	r3, #0
 8009b56:	4252      	negs	r2, r2
 8009b58:	6062      	str	r2, [r4, #4]
 8009b5a:	a904      	add	r1, sp, #16
 8009b5c:	3254      	adds	r2, #84	; 0x54
 8009b5e:	1852      	adds	r2, r2, r1
 8009b60:	1c6e      	adds	r6, r5, #1
 8009b62:	6023      	str	r3, [r4, #0]
 8009b64:	60e3      	str	r3, [r4, #12]
 8009b66:	60a3      	str	r3, [r4, #8]
 8009b68:	7013      	strb	r3, [r2, #0]
 8009b6a:	65a3      	str	r3, [r4, #88]	; 0x58
 8009b6c:	4b55      	ldr	r3, [pc, #340]	; (8009cc4 <_svfiprintf_r+0x1ec>)
 8009b6e:	2205      	movs	r2, #5
 8009b70:	0018      	movs	r0, r3
 8009b72:	7831      	ldrb	r1, [r6, #0]
 8009b74:	9305      	str	r3, [sp, #20]
 8009b76:	f7fd fc28 	bl	80073ca <memchr>
 8009b7a:	1c75      	adds	r5, r6, #1
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d11f      	bne.n	8009bc0 <_svfiprintf_r+0xe8>
 8009b80:	6822      	ldr	r2, [r4, #0]
 8009b82:	06d3      	lsls	r3, r2, #27
 8009b84:	d504      	bpl.n	8009b90 <_svfiprintf_r+0xb8>
 8009b86:	2353      	movs	r3, #83	; 0x53
 8009b88:	a904      	add	r1, sp, #16
 8009b8a:	185b      	adds	r3, r3, r1
 8009b8c:	2120      	movs	r1, #32
 8009b8e:	7019      	strb	r1, [r3, #0]
 8009b90:	0713      	lsls	r3, r2, #28
 8009b92:	d504      	bpl.n	8009b9e <_svfiprintf_r+0xc6>
 8009b94:	2353      	movs	r3, #83	; 0x53
 8009b96:	a904      	add	r1, sp, #16
 8009b98:	185b      	adds	r3, r3, r1
 8009b9a:	212b      	movs	r1, #43	; 0x2b
 8009b9c:	7019      	strb	r1, [r3, #0]
 8009b9e:	7833      	ldrb	r3, [r6, #0]
 8009ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ba2:	d016      	beq.n	8009bd2 <_svfiprintf_r+0xfa>
 8009ba4:	0035      	movs	r5, r6
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	200a      	movs	r0, #10
 8009baa:	68e3      	ldr	r3, [r4, #12]
 8009bac:	782a      	ldrb	r2, [r5, #0]
 8009bae:	1c6e      	adds	r6, r5, #1
 8009bb0:	3a30      	subs	r2, #48	; 0x30
 8009bb2:	2a09      	cmp	r2, #9
 8009bb4:	d94e      	bls.n	8009c54 <_svfiprintf_r+0x17c>
 8009bb6:	2900      	cmp	r1, #0
 8009bb8:	d111      	bne.n	8009bde <_svfiprintf_r+0x106>
 8009bba:	e017      	b.n	8009bec <_svfiprintf_r+0x114>
 8009bbc:	3501      	adds	r5, #1
 8009bbe:	e7af      	b.n	8009b20 <_svfiprintf_r+0x48>
 8009bc0:	9b05      	ldr	r3, [sp, #20]
 8009bc2:	6822      	ldr	r2, [r4, #0]
 8009bc4:	1ac0      	subs	r0, r0, r3
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	4083      	lsls	r3, r0
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	002e      	movs	r6, r5
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	e7cc      	b.n	8009b6c <_svfiprintf_r+0x94>
 8009bd2:	9b07      	ldr	r3, [sp, #28]
 8009bd4:	1d19      	adds	r1, r3, #4
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	9107      	str	r1, [sp, #28]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	db01      	blt.n	8009be2 <_svfiprintf_r+0x10a>
 8009bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8009be0:	e004      	b.n	8009bec <_svfiprintf_r+0x114>
 8009be2:	425b      	negs	r3, r3
 8009be4:	60e3      	str	r3, [r4, #12]
 8009be6:	2302      	movs	r3, #2
 8009be8:	4313      	orrs	r3, r2
 8009bea:	6023      	str	r3, [r4, #0]
 8009bec:	782b      	ldrb	r3, [r5, #0]
 8009bee:	2b2e      	cmp	r3, #46	; 0x2e
 8009bf0:	d10a      	bne.n	8009c08 <_svfiprintf_r+0x130>
 8009bf2:	786b      	ldrb	r3, [r5, #1]
 8009bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8009bf6:	d135      	bne.n	8009c64 <_svfiprintf_r+0x18c>
 8009bf8:	9b07      	ldr	r3, [sp, #28]
 8009bfa:	3502      	adds	r5, #2
 8009bfc:	1d1a      	adds	r2, r3, #4
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	9207      	str	r2, [sp, #28]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	db2b      	blt.n	8009c5e <_svfiprintf_r+0x186>
 8009c06:	9309      	str	r3, [sp, #36]	; 0x24
 8009c08:	4e2f      	ldr	r6, [pc, #188]	; (8009cc8 <_svfiprintf_r+0x1f0>)
 8009c0a:	2203      	movs	r2, #3
 8009c0c:	0030      	movs	r0, r6
 8009c0e:	7829      	ldrb	r1, [r5, #0]
 8009c10:	f7fd fbdb 	bl	80073ca <memchr>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d006      	beq.n	8009c26 <_svfiprintf_r+0x14e>
 8009c18:	2340      	movs	r3, #64	; 0x40
 8009c1a:	1b80      	subs	r0, r0, r6
 8009c1c:	4083      	lsls	r3, r0
 8009c1e:	6822      	ldr	r2, [r4, #0]
 8009c20:	3501      	adds	r5, #1
 8009c22:	4313      	orrs	r3, r2
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	7829      	ldrb	r1, [r5, #0]
 8009c28:	2206      	movs	r2, #6
 8009c2a:	4828      	ldr	r0, [pc, #160]	; (8009ccc <_svfiprintf_r+0x1f4>)
 8009c2c:	1c6e      	adds	r6, r5, #1
 8009c2e:	7621      	strb	r1, [r4, #24]
 8009c30:	f7fd fbcb 	bl	80073ca <memchr>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d03c      	beq.n	8009cb2 <_svfiprintf_r+0x1da>
 8009c38:	4b25      	ldr	r3, [pc, #148]	; (8009cd0 <_svfiprintf_r+0x1f8>)
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d125      	bne.n	8009c8a <_svfiprintf_r+0x1b2>
 8009c3e:	2207      	movs	r2, #7
 8009c40:	9b07      	ldr	r3, [sp, #28]
 8009c42:	3307      	adds	r3, #7
 8009c44:	4393      	bics	r3, r2
 8009c46:	3308      	adds	r3, #8
 8009c48:	9307      	str	r3, [sp, #28]
 8009c4a:	6963      	ldr	r3, [r4, #20]
 8009c4c:	9a04      	ldr	r2, [sp, #16]
 8009c4e:	189b      	adds	r3, r3, r2
 8009c50:	6163      	str	r3, [r4, #20]
 8009c52:	e764      	b.n	8009b1e <_svfiprintf_r+0x46>
 8009c54:	4343      	muls	r3, r0
 8009c56:	0035      	movs	r5, r6
 8009c58:	2101      	movs	r1, #1
 8009c5a:	189b      	adds	r3, r3, r2
 8009c5c:	e7a6      	b.n	8009bac <_svfiprintf_r+0xd4>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	425b      	negs	r3, r3
 8009c62:	e7d0      	b.n	8009c06 <_svfiprintf_r+0x12e>
 8009c64:	2300      	movs	r3, #0
 8009c66:	200a      	movs	r0, #10
 8009c68:	001a      	movs	r2, r3
 8009c6a:	3501      	adds	r5, #1
 8009c6c:	6063      	str	r3, [r4, #4]
 8009c6e:	7829      	ldrb	r1, [r5, #0]
 8009c70:	1c6e      	adds	r6, r5, #1
 8009c72:	3930      	subs	r1, #48	; 0x30
 8009c74:	2909      	cmp	r1, #9
 8009c76:	d903      	bls.n	8009c80 <_svfiprintf_r+0x1a8>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0c5      	beq.n	8009c08 <_svfiprintf_r+0x130>
 8009c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c7e:	e7c3      	b.n	8009c08 <_svfiprintf_r+0x130>
 8009c80:	4342      	muls	r2, r0
 8009c82:	0035      	movs	r5, r6
 8009c84:	2301      	movs	r3, #1
 8009c86:	1852      	adds	r2, r2, r1
 8009c88:	e7f1      	b.n	8009c6e <_svfiprintf_r+0x196>
 8009c8a:	aa07      	add	r2, sp, #28
 8009c8c:	9200      	str	r2, [sp, #0]
 8009c8e:	0021      	movs	r1, r4
 8009c90:	003a      	movs	r2, r7
 8009c92:	4b10      	ldr	r3, [pc, #64]	; (8009cd4 <_svfiprintf_r+0x1fc>)
 8009c94:	9803      	ldr	r0, [sp, #12]
 8009c96:	f7fc fc03 	bl	80064a0 <_printf_float>
 8009c9a:	9004      	str	r0, [sp, #16]
 8009c9c:	9b04      	ldr	r3, [sp, #16]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	d1d3      	bne.n	8009c4a <_svfiprintf_r+0x172>
 8009ca2:	89bb      	ldrh	r3, [r7, #12]
 8009ca4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ca6:	065b      	lsls	r3, r3, #25
 8009ca8:	d400      	bmi.n	8009cac <_svfiprintf_r+0x1d4>
 8009caa:	e72c      	b.n	8009b06 <_svfiprintf_r+0x2e>
 8009cac:	2001      	movs	r0, #1
 8009cae:	4240      	negs	r0, r0
 8009cb0:	e729      	b.n	8009b06 <_svfiprintf_r+0x2e>
 8009cb2:	aa07      	add	r2, sp, #28
 8009cb4:	9200      	str	r2, [sp, #0]
 8009cb6:	0021      	movs	r1, r4
 8009cb8:	003a      	movs	r2, r7
 8009cba:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <_svfiprintf_r+0x1fc>)
 8009cbc:	9803      	ldr	r0, [sp, #12]
 8009cbe:	f7fc feb5 	bl	8006a2c <_printf_i>
 8009cc2:	e7ea      	b.n	8009c9a <_svfiprintf_r+0x1c2>
 8009cc4:	0800b151 	.word	0x0800b151
 8009cc8:	0800b157 	.word	0x0800b157
 8009ccc:	0800b15b 	.word	0x0800b15b
 8009cd0:	080064a1 	.word	0x080064a1
 8009cd4:	08009a15 	.word	0x08009a15

08009cd8 <__sflush_r>:
 8009cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cda:	898b      	ldrh	r3, [r1, #12]
 8009cdc:	0005      	movs	r5, r0
 8009cde:	000c      	movs	r4, r1
 8009ce0:	071a      	lsls	r2, r3, #28
 8009ce2:	d45c      	bmi.n	8009d9e <__sflush_r+0xc6>
 8009ce4:	684a      	ldr	r2, [r1, #4]
 8009ce6:	2a00      	cmp	r2, #0
 8009ce8:	dc04      	bgt.n	8009cf4 <__sflush_r+0x1c>
 8009cea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009cec:	2a00      	cmp	r2, #0
 8009cee:	dc01      	bgt.n	8009cf4 <__sflush_r+0x1c>
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cf4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009cf6:	2f00      	cmp	r7, #0
 8009cf8:	d0fa      	beq.n	8009cf0 <__sflush_r+0x18>
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2080      	movs	r0, #128	; 0x80
 8009cfe:	682e      	ldr	r6, [r5, #0]
 8009d00:	602a      	str	r2, [r5, #0]
 8009d02:	001a      	movs	r2, r3
 8009d04:	0140      	lsls	r0, r0, #5
 8009d06:	6a21      	ldr	r1, [r4, #32]
 8009d08:	4002      	ands	r2, r0
 8009d0a:	4203      	tst	r3, r0
 8009d0c:	d034      	beq.n	8009d78 <__sflush_r+0xa0>
 8009d0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	075b      	lsls	r3, r3, #29
 8009d14:	d506      	bpl.n	8009d24 <__sflush_r+0x4c>
 8009d16:	6863      	ldr	r3, [r4, #4]
 8009d18:	1ac0      	subs	r0, r0, r3
 8009d1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <__sflush_r+0x4c>
 8009d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d22:	1ac0      	subs	r0, r0, r3
 8009d24:	0002      	movs	r2, r0
 8009d26:	2300      	movs	r3, #0
 8009d28:	0028      	movs	r0, r5
 8009d2a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009d2c:	6a21      	ldr	r1, [r4, #32]
 8009d2e:	47b8      	blx	r7
 8009d30:	89a2      	ldrh	r2, [r4, #12]
 8009d32:	1c43      	adds	r3, r0, #1
 8009d34:	d106      	bne.n	8009d44 <__sflush_r+0x6c>
 8009d36:	6829      	ldr	r1, [r5, #0]
 8009d38:	291d      	cmp	r1, #29
 8009d3a:	d82c      	bhi.n	8009d96 <__sflush_r+0xbe>
 8009d3c:	4b2a      	ldr	r3, [pc, #168]	; (8009de8 <__sflush_r+0x110>)
 8009d3e:	410b      	asrs	r3, r1
 8009d40:	07db      	lsls	r3, r3, #31
 8009d42:	d428      	bmi.n	8009d96 <__sflush_r+0xbe>
 8009d44:	2300      	movs	r3, #0
 8009d46:	6063      	str	r3, [r4, #4]
 8009d48:	6923      	ldr	r3, [r4, #16]
 8009d4a:	6023      	str	r3, [r4, #0]
 8009d4c:	04d2      	lsls	r2, r2, #19
 8009d4e:	d505      	bpl.n	8009d5c <__sflush_r+0x84>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d102      	bne.n	8009d5a <__sflush_r+0x82>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d100      	bne.n	8009d5c <__sflush_r+0x84>
 8009d5a:	6560      	str	r0, [r4, #84]	; 0x54
 8009d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d5e:	602e      	str	r6, [r5, #0]
 8009d60:	2900      	cmp	r1, #0
 8009d62:	d0c5      	beq.n	8009cf0 <__sflush_r+0x18>
 8009d64:	0023      	movs	r3, r4
 8009d66:	3344      	adds	r3, #68	; 0x44
 8009d68:	4299      	cmp	r1, r3
 8009d6a:	d002      	beq.n	8009d72 <__sflush_r+0x9a>
 8009d6c:	0028      	movs	r0, r5
 8009d6e:	f7fe f9d9 	bl	8008124 <_free_r>
 8009d72:	2000      	movs	r0, #0
 8009d74:	6360      	str	r0, [r4, #52]	; 0x34
 8009d76:	e7bc      	b.n	8009cf2 <__sflush_r+0x1a>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	0028      	movs	r0, r5
 8009d7c:	47b8      	blx	r7
 8009d7e:	1c43      	adds	r3, r0, #1
 8009d80:	d1c6      	bne.n	8009d10 <__sflush_r+0x38>
 8009d82:	682b      	ldr	r3, [r5, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0c3      	beq.n	8009d10 <__sflush_r+0x38>
 8009d88:	2b1d      	cmp	r3, #29
 8009d8a:	d001      	beq.n	8009d90 <__sflush_r+0xb8>
 8009d8c:	2b16      	cmp	r3, #22
 8009d8e:	d101      	bne.n	8009d94 <__sflush_r+0xbc>
 8009d90:	602e      	str	r6, [r5, #0]
 8009d92:	e7ad      	b.n	8009cf0 <__sflush_r+0x18>
 8009d94:	89a2      	ldrh	r2, [r4, #12]
 8009d96:	2340      	movs	r3, #64	; 0x40
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	e7a9      	b.n	8009cf2 <__sflush_r+0x1a>
 8009d9e:	690e      	ldr	r6, [r1, #16]
 8009da0:	2e00      	cmp	r6, #0
 8009da2:	d0a5      	beq.n	8009cf0 <__sflush_r+0x18>
 8009da4:	680f      	ldr	r7, [r1, #0]
 8009da6:	600e      	str	r6, [r1, #0]
 8009da8:	1bba      	subs	r2, r7, r6
 8009daa:	9201      	str	r2, [sp, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	079b      	lsls	r3, r3, #30
 8009db0:	d100      	bne.n	8009db4 <__sflush_r+0xdc>
 8009db2:	694a      	ldr	r2, [r1, #20]
 8009db4:	60a2      	str	r2, [r4, #8]
 8009db6:	9b01      	ldr	r3, [sp, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	dd99      	ble.n	8009cf0 <__sflush_r+0x18>
 8009dbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009dbe:	0032      	movs	r2, r6
 8009dc0:	001f      	movs	r7, r3
 8009dc2:	0028      	movs	r0, r5
 8009dc4:	9b01      	ldr	r3, [sp, #4]
 8009dc6:	6a21      	ldr	r1, [r4, #32]
 8009dc8:	47b8      	blx	r7
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	dc06      	bgt.n	8009ddc <__sflush_r+0x104>
 8009dce:	2340      	movs	r3, #64	; 0x40
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	89a2      	ldrh	r2, [r4, #12]
 8009dd4:	4240      	negs	r0, r0
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	e78a      	b.n	8009cf2 <__sflush_r+0x1a>
 8009ddc:	9b01      	ldr	r3, [sp, #4]
 8009dde:	1836      	adds	r6, r6, r0
 8009de0:	1a1b      	subs	r3, r3, r0
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	e7e7      	b.n	8009db6 <__sflush_r+0xde>
 8009de6:	46c0      	nop			; (mov r8, r8)
 8009de8:	dfbffffe 	.word	0xdfbffffe

08009dec <_fflush_r>:
 8009dec:	690b      	ldr	r3, [r1, #16]
 8009dee:	b570      	push	{r4, r5, r6, lr}
 8009df0:	0005      	movs	r5, r0
 8009df2:	000c      	movs	r4, r1
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d102      	bne.n	8009dfe <_fflush_r+0x12>
 8009df8:	2500      	movs	r5, #0
 8009dfa:	0028      	movs	r0, r5
 8009dfc:	bd70      	pop	{r4, r5, r6, pc}
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d004      	beq.n	8009e0c <_fflush_r+0x20>
 8009e02:	6a03      	ldr	r3, [r0, #32]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <_fflush_r+0x20>
 8009e08:	f7fd f9b8 	bl	800717c <__sinit>
 8009e0c:	220c      	movs	r2, #12
 8009e0e:	5ea3      	ldrsh	r3, [r4, r2]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0f1      	beq.n	8009df8 <_fflush_r+0xc>
 8009e14:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e16:	07d2      	lsls	r2, r2, #31
 8009e18:	d404      	bmi.n	8009e24 <_fflush_r+0x38>
 8009e1a:	059b      	lsls	r3, r3, #22
 8009e1c:	d402      	bmi.n	8009e24 <_fflush_r+0x38>
 8009e1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e20:	f7fd fad1 	bl	80073c6 <__retarget_lock_acquire_recursive>
 8009e24:	0028      	movs	r0, r5
 8009e26:	0021      	movs	r1, r4
 8009e28:	f7ff ff56 	bl	8009cd8 <__sflush_r>
 8009e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e2e:	0005      	movs	r5, r0
 8009e30:	07db      	lsls	r3, r3, #31
 8009e32:	d4e2      	bmi.n	8009dfa <_fflush_r+0xe>
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	059b      	lsls	r3, r3, #22
 8009e38:	d4df      	bmi.n	8009dfa <_fflush_r+0xe>
 8009e3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e3c:	f7fd fac4 	bl	80073c8 <__retarget_lock_release_recursive>
 8009e40:	e7db      	b.n	8009dfa <_fflush_r+0xe>

08009e42 <memmove>:
 8009e42:	b510      	push	{r4, lr}
 8009e44:	4288      	cmp	r0, r1
 8009e46:	d902      	bls.n	8009e4e <memmove+0xc>
 8009e48:	188b      	adds	r3, r1, r2
 8009e4a:	4298      	cmp	r0, r3
 8009e4c:	d303      	bcc.n	8009e56 <memmove+0x14>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e007      	b.n	8009e62 <memmove+0x20>
 8009e52:	5c8b      	ldrb	r3, [r1, r2]
 8009e54:	5483      	strb	r3, [r0, r2]
 8009e56:	3a01      	subs	r2, #1
 8009e58:	d2fb      	bcs.n	8009e52 <memmove+0x10>
 8009e5a:	bd10      	pop	{r4, pc}
 8009e5c:	5ccc      	ldrb	r4, [r1, r3]
 8009e5e:	54c4      	strb	r4, [r0, r3]
 8009e60:	3301      	adds	r3, #1
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d1fa      	bne.n	8009e5c <memmove+0x1a>
 8009e66:	e7f8      	b.n	8009e5a <memmove+0x18>

08009e68 <strncmp>:
 8009e68:	b530      	push	{r4, r5, lr}
 8009e6a:	0005      	movs	r5, r0
 8009e6c:	1e10      	subs	r0, r2, #0
 8009e6e:	d00b      	beq.n	8009e88 <strncmp+0x20>
 8009e70:	2400      	movs	r4, #0
 8009e72:	3a01      	subs	r2, #1
 8009e74:	5d2b      	ldrb	r3, [r5, r4]
 8009e76:	5d08      	ldrb	r0, [r1, r4]
 8009e78:	4283      	cmp	r3, r0
 8009e7a:	d104      	bne.n	8009e86 <strncmp+0x1e>
 8009e7c:	42a2      	cmp	r2, r4
 8009e7e:	d002      	beq.n	8009e86 <strncmp+0x1e>
 8009e80:	3401      	adds	r4, #1
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1f6      	bne.n	8009e74 <strncmp+0xc>
 8009e86:	1a18      	subs	r0, r3, r0
 8009e88:	bd30      	pop	{r4, r5, pc}
	...

08009e8c <_sbrk_r>:
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	b570      	push	{r4, r5, r6, lr}
 8009e90:	4d06      	ldr	r5, [pc, #24]	; (8009eac <_sbrk_r+0x20>)
 8009e92:	0004      	movs	r4, r0
 8009e94:	0008      	movs	r0, r1
 8009e96:	602b      	str	r3, [r5, #0]
 8009e98:	f7f9 fee2 	bl	8003c60 <_sbrk>
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	d103      	bne.n	8009ea8 <_sbrk_r+0x1c>
 8009ea0:	682b      	ldr	r3, [r5, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d000      	beq.n	8009ea8 <_sbrk_r+0x1c>
 8009ea6:	6023      	str	r3, [r4, #0]
 8009ea8:	bd70      	pop	{r4, r5, r6, pc}
 8009eaa:	46c0      	nop			; (mov r8, r8)
 8009eac:	20000448 	.word	0x20000448

08009eb0 <memcpy>:
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	b510      	push	{r4, lr}
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d100      	bne.n	8009eba <memcpy+0xa>
 8009eb8:	bd10      	pop	{r4, pc}
 8009eba:	5ccc      	ldrb	r4, [r1, r3]
 8009ebc:	54c4      	strb	r4, [r0, r3]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	e7f8      	b.n	8009eb4 <memcpy+0x4>
	...

08009ec4 <nan>:
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	4901      	ldr	r1, [pc, #4]	; (8009ecc <nan+0x8>)
 8009ec8:	4770      	bx	lr
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	7ff80000 	.word	0x7ff80000

08009ed0 <__assert_func>:
 8009ed0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009ed2:	0014      	movs	r4, r2
 8009ed4:	001a      	movs	r2, r3
 8009ed6:	4b09      	ldr	r3, [pc, #36]	; (8009efc <__assert_func+0x2c>)
 8009ed8:	0005      	movs	r5, r0
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	000e      	movs	r6, r1
 8009ede:	68d8      	ldr	r0, [r3, #12]
 8009ee0:	4b07      	ldr	r3, [pc, #28]	; (8009f00 <__assert_func+0x30>)
 8009ee2:	2c00      	cmp	r4, #0
 8009ee4:	d101      	bne.n	8009eea <__assert_func+0x1a>
 8009ee6:	4b07      	ldr	r3, [pc, #28]	; (8009f04 <__assert_func+0x34>)
 8009ee8:	001c      	movs	r4, r3
 8009eea:	4907      	ldr	r1, [pc, #28]	; (8009f08 <__assert_func+0x38>)
 8009eec:	9301      	str	r3, [sp, #4]
 8009eee:	9402      	str	r4, [sp, #8]
 8009ef0:	002b      	movs	r3, r5
 8009ef2:	9600      	str	r6, [sp, #0]
 8009ef4:	f000 fbe2 	bl	800a6bc <fiprintf>
 8009ef8:	f000 fbf0 	bl	800a6dc <abort>
 8009efc:	20000064 	.word	0x20000064
 8009f00:	0800b16a 	.word	0x0800b16a
 8009f04:	0800b1a5 	.word	0x0800b1a5
 8009f08:	0800b177 	.word	0x0800b177

08009f0c <_calloc_r>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	0c0b      	lsrs	r3, r1, #16
 8009f10:	0c15      	lsrs	r5, r2, #16
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d11e      	bne.n	8009f54 <_calloc_r+0x48>
 8009f16:	2d00      	cmp	r5, #0
 8009f18:	d10c      	bne.n	8009f34 <_calloc_r+0x28>
 8009f1a:	b289      	uxth	r1, r1
 8009f1c:	b294      	uxth	r4, r2
 8009f1e:	434c      	muls	r4, r1
 8009f20:	0021      	movs	r1, r4
 8009f22:	f7fe f975 	bl	8008210 <_malloc_r>
 8009f26:	1e05      	subs	r5, r0, #0
 8009f28:	d01b      	beq.n	8009f62 <_calloc_r+0x56>
 8009f2a:	0022      	movs	r2, r4
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	f7fd f9c5 	bl	80072bc <memset>
 8009f32:	e016      	b.n	8009f62 <_calloc_r+0x56>
 8009f34:	1c2b      	adds	r3, r5, #0
 8009f36:	1c0c      	adds	r4, r1, #0
 8009f38:	b289      	uxth	r1, r1
 8009f3a:	b292      	uxth	r2, r2
 8009f3c:	434a      	muls	r2, r1
 8009f3e:	b2a1      	uxth	r1, r4
 8009f40:	b29c      	uxth	r4, r3
 8009f42:	434c      	muls	r4, r1
 8009f44:	0c13      	lsrs	r3, r2, #16
 8009f46:	18e4      	adds	r4, r4, r3
 8009f48:	0c23      	lsrs	r3, r4, #16
 8009f4a:	d107      	bne.n	8009f5c <_calloc_r+0x50>
 8009f4c:	0424      	lsls	r4, r4, #16
 8009f4e:	b292      	uxth	r2, r2
 8009f50:	4314      	orrs	r4, r2
 8009f52:	e7e5      	b.n	8009f20 <_calloc_r+0x14>
 8009f54:	2d00      	cmp	r5, #0
 8009f56:	d101      	bne.n	8009f5c <_calloc_r+0x50>
 8009f58:	1c14      	adds	r4, r2, #0
 8009f5a:	e7ed      	b.n	8009f38 <_calloc_r+0x2c>
 8009f5c:	230c      	movs	r3, #12
 8009f5e:	2500      	movs	r5, #0
 8009f60:	6003      	str	r3, [r0, #0]
 8009f62:	0028      	movs	r0, r5
 8009f64:	bd70      	pop	{r4, r5, r6, pc}

08009f66 <rshift>:
 8009f66:	0002      	movs	r2, r0
 8009f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f6a:	6904      	ldr	r4, [r0, #16]
 8009f6c:	114b      	asrs	r3, r1, #5
 8009f6e:	b085      	sub	sp, #20
 8009f70:	3214      	adds	r2, #20
 8009f72:	9302      	str	r3, [sp, #8]
 8009f74:	114d      	asrs	r5, r1, #5
 8009f76:	0013      	movs	r3, r2
 8009f78:	42ac      	cmp	r4, r5
 8009f7a:	dd32      	ble.n	8009fe2 <rshift+0x7c>
 8009f7c:	261f      	movs	r6, #31
 8009f7e:	000f      	movs	r7, r1
 8009f80:	114b      	asrs	r3, r1, #5
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	00a5      	lsls	r5, r4, #2
 8009f86:	18d3      	adds	r3, r2, r3
 8009f88:	4037      	ands	r7, r6
 8009f8a:	1955      	adds	r5, r2, r5
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	9701      	str	r7, [sp, #4]
 8009f90:	4231      	tst	r1, r6
 8009f92:	d10d      	bne.n	8009fb0 <rshift+0x4a>
 8009f94:	0016      	movs	r6, r2
 8009f96:	0019      	movs	r1, r3
 8009f98:	428d      	cmp	r5, r1
 8009f9a:	d836      	bhi.n	800a00a <rshift+0xa4>
 8009f9c:	9900      	ldr	r1, [sp, #0]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	3903      	subs	r1, #3
 8009fa2:	428d      	cmp	r5, r1
 8009fa4:	d302      	bcc.n	8009fac <rshift+0x46>
 8009fa6:	9b02      	ldr	r3, [sp, #8]
 8009fa8:	1ae4      	subs	r4, r4, r3
 8009faa:	00a3      	lsls	r3, r4, #2
 8009fac:	18d3      	adds	r3, r2, r3
 8009fae:	e018      	b.n	8009fe2 <rshift+0x7c>
 8009fb0:	2120      	movs	r1, #32
 8009fb2:	9e01      	ldr	r6, [sp, #4]
 8009fb4:	9f01      	ldr	r7, [sp, #4]
 8009fb6:	1b89      	subs	r1, r1, r6
 8009fb8:	9e00      	ldr	r6, [sp, #0]
 8009fba:	9103      	str	r1, [sp, #12]
 8009fbc:	ce02      	ldmia	r6!, {r1}
 8009fbe:	4694      	mov	ip, r2
 8009fc0:	40f9      	lsrs	r1, r7
 8009fc2:	42b5      	cmp	r5, r6
 8009fc4:	d816      	bhi.n	8009ff4 <rshift+0x8e>
 8009fc6:	9e00      	ldr	r6, [sp, #0]
 8009fc8:	2300      	movs	r3, #0
 8009fca:	3601      	adds	r6, #1
 8009fcc:	42b5      	cmp	r5, r6
 8009fce:	d303      	bcc.n	8009fd8 <rshift+0x72>
 8009fd0:	9b02      	ldr	r3, [sp, #8]
 8009fd2:	1ae3      	subs	r3, r4, r3
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	3b04      	subs	r3, #4
 8009fd8:	18d3      	adds	r3, r2, r3
 8009fda:	6019      	str	r1, [r3, #0]
 8009fdc:	2900      	cmp	r1, #0
 8009fde:	d000      	beq.n	8009fe2 <rshift+0x7c>
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	1a99      	subs	r1, r3, r2
 8009fe4:	1089      	asrs	r1, r1, #2
 8009fe6:	6101      	str	r1, [r0, #16]
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d101      	bne.n	8009ff0 <rshift+0x8a>
 8009fec:	2300      	movs	r3, #0
 8009fee:	6143      	str	r3, [r0, #20]
 8009ff0:	b005      	add	sp, #20
 8009ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ff4:	6837      	ldr	r7, [r6, #0]
 8009ff6:	9b03      	ldr	r3, [sp, #12]
 8009ff8:	409f      	lsls	r7, r3
 8009ffa:	430f      	orrs	r7, r1
 8009ffc:	4661      	mov	r1, ip
 8009ffe:	c180      	stmia	r1!, {r7}
 800a000:	468c      	mov	ip, r1
 800a002:	9b01      	ldr	r3, [sp, #4]
 800a004:	ce02      	ldmia	r6!, {r1}
 800a006:	40d9      	lsrs	r1, r3
 800a008:	e7db      	b.n	8009fc2 <rshift+0x5c>
 800a00a:	c980      	ldmia	r1!, {r7}
 800a00c:	c680      	stmia	r6!, {r7}
 800a00e:	e7c3      	b.n	8009f98 <rshift+0x32>

0800a010 <__hexdig_fun>:
 800a010:	0002      	movs	r2, r0
 800a012:	3a30      	subs	r2, #48	; 0x30
 800a014:	0003      	movs	r3, r0
 800a016:	2a09      	cmp	r2, #9
 800a018:	d802      	bhi.n	800a020 <__hexdig_fun+0x10>
 800a01a:	3b20      	subs	r3, #32
 800a01c:	b2d8      	uxtb	r0, r3
 800a01e:	4770      	bx	lr
 800a020:	0002      	movs	r2, r0
 800a022:	3a61      	subs	r2, #97	; 0x61
 800a024:	2a05      	cmp	r2, #5
 800a026:	d801      	bhi.n	800a02c <__hexdig_fun+0x1c>
 800a028:	3b47      	subs	r3, #71	; 0x47
 800a02a:	e7f7      	b.n	800a01c <__hexdig_fun+0xc>
 800a02c:	001a      	movs	r2, r3
 800a02e:	3a41      	subs	r2, #65	; 0x41
 800a030:	2000      	movs	r0, #0
 800a032:	2a05      	cmp	r2, #5
 800a034:	d8f3      	bhi.n	800a01e <__hexdig_fun+0xe>
 800a036:	3b27      	subs	r3, #39	; 0x27
 800a038:	e7f0      	b.n	800a01c <__hexdig_fun+0xc>
	...

0800a03c <__gethex>:
 800a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a03e:	b089      	sub	sp, #36	; 0x24
 800a040:	9307      	str	r3, [sp, #28]
 800a042:	2302      	movs	r3, #2
 800a044:	9201      	str	r2, [sp, #4]
 800a046:	680a      	ldr	r2, [r1, #0]
 800a048:	425b      	negs	r3, r3
 800a04a:	9003      	str	r0, [sp, #12]
 800a04c:	9106      	str	r1, [sp, #24]
 800a04e:	1c96      	adds	r6, r2, #2
 800a050:	1a9b      	subs	r3, r3, r2
 800a052:	199a      	adds	r2, r3, r6
 800a054:	9600      	str	r6, [sp, #0]
 800a056:	9205      	str	r2, [sp, #20]
 800a058:	9a00      	ldr	r2, [sp, #0]
 800a05a:	3601      	adds	r6, #1
 800a05c:	7810      	ldrb	r0, [r2, #0]
 800a05e:	2830      	cmp	r0, #48	; 0x30
 800a060:	d0f7      	beq.n	800a052 <__gethex+0x16>
 800a062:	f7ff ffd5 	bl	800a010 <__hexdig_fun>
 800a066:	2300      	movs	r3, #0
 800a068:	001d      	movs	r5, r3
 800a06a:	9302      	str	r3, [sp, #8]
 800a06c:	4298      	cmp	r0, r3
 800a06e:	d11d      	bne.n	800a0ac <__gethex+0x70>
 800a070:	2201      	movs	r2, #1
 800a072:	49a6      	ldr	r1, [pc, #664]	; (800a30c <__gethex+0x2d0>)
 800a074:	9800      	ldr	r0, [sp, #0]
 800a076:	f7ff fef7 	bl	8009e68 <strncmp>
 800a07a:	0007      	movs	r7, r0
 800a07c:	42a8      	cmp	r0, r5
 800a07e:	d169      	bne.n	800a154 <__gethex+0x118>
 800a080:	9b00      	ldr	r3, [sp, #0]
 800a082:	0034      	movs	r4, r6
 800a084:	7858      	ldrb	r0, [r3, #1]
 800a086:	f7ff ffc3 	bl	800a010 <__hexdig_fun>
 800a08a:	2301      	movs	r3, #1
 800a08c:	9302      	str	r3, [sp, #8]
 800a08e:	42a8      	cmp	r0, r5
 800a090:	d02f      	beq.n	800a0f2 <__gethex+0xb6>
 800a092:	9600      	str	r6, [sp, #0]
 800a094:	9b00      	ldr	r3, [sp, #0]
 800a096:	7818      	ldrb	r0, [r3, #0]
 800a098:	2830      	cmp	r0, #48	; 0x30
 800a09a:	d009      	beq.n	800a0b0 <__gethex+0x74>
 800a09c:	f7ff ffb8 	bl	800a010 <__hexdig_fun>
 800a0a0:	4242      	negs	r2, r0
 800a0a2:	4142      	adcs	r2, r0
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	0035      	movs	r5, r6
 800a0a8:	9202      	str	r2, [sp, #8]
 800a0aa:	9305      	str	r3, [sp, #20]
 800a0ac:	9c00      	ldr	r4, [sp, #0]
 800a0ae:	e004      	b.n	800a0ba <__gethex+0x7e>
 800a0b0:	9b00      	ldr	r3, [sp, #0]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	e7ed      	b.n	800a094 <__gethex+0x58>
 800a0b8:	3401      	adds	r4, #1
 800a0ba:	7820      	ldrb	r0, [r4, #0]
 800a0bc:	f7ff ffa8 	bl	800a010 <__hexdig_fun>
 800a0c0:	1e07      	subs	r7, r0, #0
 800a0c2:	d1f9      	bne.n	800a0b8 <__gethex+0x7c>
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	0020      	movs	r0, r4
 800a0c8:	4990      	ldr	r1, [pc, #576]	; (800a30c <__gethex+0x2d0>)
 800a0ca:	f7ff fecd 	bl	8009e68 <strncmp>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d10d      	bne.n	800a0ee <__gethex+0xb2>
 800a0d2:	2d00      	cmp	r5, #0
 800a0d4:	d106      	bne.n	800a0e4 <__gethex+0xa8>
 800a0d6:	3401      	adds	r4, #1
 800a0d8:	0025      	movs	r5, r4
 800a0da:	7820      	ldrb	r0, [r4, #0]
 800a0dc:	f7ff ff98 	bl	800a010 <__hexdig_fun>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d102      	bne.n	800a0ea <__gethex+0xae>
 800a0e4:	1b2d      	subs	r5, r5, r4
 800a0e6:	00af      	lsls	r7, r5, #2
 800a0e8:	e003      	b.n	800a0f2 <__gethex+0xb6>
 800a0ea:	3401      	adds	r4, #1
 800a0ec:	e7f5      	b.n	800a0da <__gethex+0x9e>
 800a0ee:	2d00      	cmp	r5, #0
 800a0f0:	d1f8      	bne.n	800a0e4 <__gethex+0xa8>
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	7823      	ldrb	r3, [r4, #0]
 800a0f6:	0026      	movs	r6, r4
 800a0f8:	4393      	bics	r3, r2
 800a0fa:	2b50      	cmp	r3, #80	; 0x50
 800a0fc:	d11d      	bne.n	800a13a <__gethex+0xfe>
 800a0fe:	7863      	ldrb	r3, [r4, #1]
 800a100:	2b2b      	cmp	r3, #43	; 0x2b
 800a102:	d02c      	beq.n	800a15e <__gethex+0x122>
 800a104:	2b2d      	cmp	r3, #45	; 0x2d
 800a106:	d02e      	beq.n	800a166 <__gethex+0x12a>
 800a108:	2300      	movs	r3, #0
 800a10a:	1c66      	adds	r6, r4, #1
 800a10c:	9304      	str	r3, [sp, #16]
 800a10e:	7830      	ldrb	r0, [r6, #0]
 800a110:	f7ff ff7e 	bl	800a010 <__hexdig_fun>
 800a114:	1e43      	subs	r3, r0, #1
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b18      	cmp	r3, #24
 800a11a:	d82b      	bhi.n	800a174 <__gethex+0x138>
 800a11c:	3810      	subs	r0, #16
 800a11e:	0005      	movs	r5, r0
 800a120:	7870      	ldrb	r0, [r6, #1]
 800a122:	f7ff ff75 	bl	800a010 <__hexdig_fun>
 800a126:	1e43      	subs	r3, r0, #1
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	3601      	adds	r6, #1
 800a12c:	2b18      	cmp	r3, #24
 800a12e:	d91c      	bls.n	800a16a <__gethex+0x12e>
 800a130:	9b04      	ldr	r3, [sp, #16]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d000      	beq.n	800a138 <__gethex+0xfc>
 800a136:	426d      	negs	r5, r5
 800a138:	197f      	adds	r7, r7, r5
 800a13a:	9b06      	ldr	r3, [sp, #24]
 800a13c:	601e      	str	r6, [r3, #0]
 800a13e:	9b02      	ldr	r3, [sp, #8]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d019      	beq.n	800a178 <__gethex+0x13c>
 800a144:	2600      	movs	r6, #0
 800a146:	9b05      	ldr	r3, [sp, #20]
 800a148:	42b3      	cmp	r3, r6
 800a14a:	d100      	bne.n	800a14e <__gethex+0x112>
 800a14c:	3606      	adds	r6, #6
 800a14e:	0030      	movs	r0, r6
 800a150:	b009      	add	sp, #36	; 0x24
 800a152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a154:	2301      	movs	r3, #1
 800a156:	2700      	movs	r7, #0
 800a158:	9c00      	ldr	r4, [sp, #0]
 800a15a:	9302      	str	r3, [sp, #8]
 800a15c:	e7c9      	b.n	800a0f2 <__gethex+0xb6>
 800a15e:	2300      	movs	r3, #0
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	1ca6      	adds	r6, r4, #2
 800a164:	e7d3      	b.n	800a10e <__gethex+0xd2>
 800a166:	2301      	movs	r3, #1
 800a168:	e7fa      	b.n	800a160 <__gethex+0x124>
 800a16a:	230a      	movs	r3, #10
 800a16c:	435d      	muls	r5, r3
 800a16e:	182d      	adds	r5, r5, r0
 800a170:	3d10      	subs	r5, #16
 800a172:	e7d5      	b.n	800a120 <__gethex+0xe4>
 800a174:	0026      	movs	r6, r4
 800a176:	e7e0      	b.n	800a13a <__gethex+0xfe>
 800a178:	9b00      	ldr	r3, [sp, #0]
 800a17a:	9902      	ldr	r1, [sp, #8]
 800a17c:	1ae3      	subs	r3, r4, r3
 800a17e:	3b01      	subs	r3, #1
 800a180:	2b07      	cmp	r3, #7
 800a182:	dc0a      	bgt.n	800a19a <__gethex+0x15e>
 800a184:	9803      	ldr	r0, [sp, #12]
 800a186:	f7fe f8d5 	bl	8008334 <_Balloc>
 800a18a:	1e05      	subs	r5, r0, #0
 800a18c:	d108      	bne.n	800a1a0 <__gethex+0x164>
 800a18e:	002a      	movs	r2, r5
 800a190:	21e4      	movs	r1, #228	; 0xe4
 800a192:	4b5f      	ldr	r3, [pc, #380]	; (800a310 <__gethex+0x2d4>)
 800a194:	485f      	ldr	r0, [pc, #380]	; (800a314 <__gethex+0x2d8>)
 800a196:	f7ff fe9b 	bl	8009ed0 <__assert_func>
 800a19a:	3101      	adds	r1, #1
 800a19c:	105b      	asrs	r3, r3, #1
 800a19e:	e7ef      	b.n	800a180 <__gethex+0x144>
 800a1a0:	0003      	movs	r3, r0
 800a1a2:	3314      	adds	r3, #20
 800a1a4:	9302      	str	r3, [sp, #8]
 800a1a6:	9305      	str	r3, [sp, #20]
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	001e      	movs	r6, r3
 800a1ac:	9304      	str	r3, [sp, #16]
 800a1ae:	9b00      	ldr	r3, [sp, #0]
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	d33f      	bcc.n	800a234 <__gethex+0x1f8>
 800a1b4:	9c05      	ldr	r4, [sp, #20]
 800a1b6:	9b02      	ldr	r3, [sp, #8]
 800a1b8:	c440      	stmia	r4!, {r6}
 800a1ba:	1ae4      	subs	r4, r4, r3
 800a1bc:	10a4      	asrs	r4, r4, #2
 800a1be:	0030      	movs	r0, r6
 800a1c0:	612c      	str	r4, [r5, #16]
 800a1c2:	f7fe f9af 	bl	8008524 <__hi0bits>
 800a1c6:	9b01      	ldr	r3, [sp, #4]
 800a1c8:	0164      	lsls	r4, r4, #5
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	1a26      	subs	r6, r4, r0
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	429e      	cmp	r6, r3
 800a1d2:	dd51      	ble.n	800a278 <__gethex+0x23c>
 800a1d4:	1af6      	subs	r6, r6, r3
 800a1d6:	0031      	movs	r1, r6
 800a1d8:	0028      	movs	r0, r5
 800a1da:	f7fe fd43 	bl	8008c64 <__any_on>
 800a1de:	1e04      	subs	r4, r0, #0
 800a1e0:	d016      	beq.n	800a210 <__gethex+0x1d4>
 800a1e2:	2401      	movs	r4, #1
 800a1e4:	231f      	movs	r3, #31
 800a1e6:	0020      	movs	r0, r4
 800a1e8:	1e72      	subs	r2, r6, #1
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	4098      	lsls	r0, r3
 800a1ee:	0003      	movs	r3, r0
 800a1f0:	1151      	asrs	r1, r2, #5
 800a1f2:	9802      	ldr	r0, [sp, #8]
 800a1f4:	0089      	lsls	r1, r1, #2
 800a1f6:	5809      	ldr	r1, [r1, r0]
 800a1f8:	4219      	tst	r1, r3
 800a1fa:	d009      	beq.n	800a210 <__gethex+0x1d4>
 800a1fc:	42a2      	cmp	r2, r4
 800a1fe:	dd06      	ble.n	800a20e <__gethex+0x1d2>
 800a200:	0028      	movs	r0, r5
 800a202:	1eb1      	subs	r1, r6, #2
 800a204:	f7fe fd2e 	bl	8008c64 <__any_on>
 800a208:	3402      	adds	r4, #2
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d100      	bne.n	800a210 <__gethex+0x1d4>
 800a20e:	2402      	movs	r4, #2
 800a210:	0031      	movs	r1, r6
 800a212:	0028      	movs	r0, r5
 800a214:	f7ff fea7 	bl	8009f66 <rshift>
 800a218:	19bf      	adds	r7, r7, r6
 800a21a:	9b01      	ldr	r3, [sp, #4]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	42bb      	cmp	r3, r7
 800a220:	da3a      	bge.n	800a298 <__gethex+0x25c>
 800a222:	0029      	movs	r1, r5
 800a224:	9803      	ldr	r0, [sp, #12]
 800a226:	f7fe f8c9 	bl	80083bc <_Bfree>
 800a22a:	2300      	movs	r3, #0
 800a22c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a22e:	26a3      	movs	r6, #163	; 0xa3
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	e78c      	b.n	800a14e <__gethex+0x112>
 800a234:	3c01      	subs	r4, #1
 800a236:	7823      	ldrb	r3, [r4, #0]
 800a238:	2b2e      	cmp	r3, #46	; 0x2e
 800a23a:	d012      	beq.n	800a262 <__gethex+0x226>
 800a23c:	9b04      	ldr	r3, [sp, #16]
 800a23e:	2b20      	cmp	r3, #32
 800a240:	d104      	bne.n	800a24c <__gethex+0x210>
 800a242:	9b05      	ldr	r3, [sp, #20]
 800a244:	c340      	stmia	r3!, {r6}
 800a246:	2600      	movs	r6, #0
 800a248:	9305      	str	r3, [sp, #20]
 800a24a:	9604      	str	r6, [sp, #16]
 800a24c:	7820      	ldrb	r0, [r4, #0]
 800a24e:	f7ff fedf 	bl	800a010 <__hexdig_fun>
 800a252:	230f      	movs	r3, #15
 800a254:	4018      	ands	r0, r3
 800a256:	9b04      	ldr	r3, [sp, #16]
 800a258:	4098      	lsls	r0, r3
 800a25a:	3304      	adds	r3, #4
 800a25c:	4306      	orrs	r6, r0
 800a25e:	9304      	str	r3, [sp, #16]
 800a260:	e7a5      	b.n	800a1ae <__gethex+0x172>
 800a262:	9b00      	ldr	r3, [sp, #0]
 800a264:	42a3      	cmp	r3, r4
 800a266:	d8e9      	bhi.n	800a23c <__gethex+0x200>
 800a268:	2201      	movs	r2, #1
 800a26a:	0020      	movs	r0, r4
 800a26c:	4927      	ldr	r1, [pc, #156]	; (800a30c <__gethex+0x2d0>)
 800a26e:	f7ff fdfb 	bl	8009e68 <strncmp>
 800a272:	2800      	cmp	r0, #0
 800a274:	d1e2      	bne.n	800a23c <__gethex+0x200>
 800a276:	e79a      	b.n	800a1ae <__gethex+0x172>
 800a278:	9b00      	ldr	r3, [sp, #0]
 800a27a:	2400      	movs	r4, #0
 800a27c:	429e      	cmp	r6, r3
 800a27e:	dacc      	bge.n	800a21a <__gethex+0x1de>
 800a280:	1b9e      	subs	r6, r3, r6
 800a282:	0029      	movs	r1, r5
 800a284:	0032      	movs	r2, r6
 800a286:	9803      	ldr	r0, [sp, #12]
 800a288:	f7fe fab8 	bl	80087fc <__lshift>
 800a28c:	0003      	movs	r3, r0
 800a28e:	3314      	adds	r3, #20
 800a290:	0005      	movs	r5, r0
 800a292:	1bbf      	subs	r7, r7, r6
 800a294:	9302      	str	r3, [sp, #8]
 800a296:	e7c0      	b.n	800a21a <__gethex+0x1de>
 800a298:	9b01      	ldr	r3, [sp, #4]
 800a29a:	685e      	ldr	r6, [r3, #4]
 800a29c:	42be      	cmp	r6, r7
 800a29e:	dd70      	ble.n	800a382 <__gethex+0x346>
 800a2a0:	9b00      	ldr	r3, [sp, #0]
 800a2a2:	1bf6      	subs	r6, r6, r7
 800a2a4:	42b3      	cmp	r3, r6
 800a2a6:	dc37      	bgt.n	800a318 <__gethex+0x2dc>
 800a2a8:	9b01      	ldr	r3, [sp, #4]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d024      	beq.n	800a2fa <__gethex+0x2be>
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	d026      	beq.n	800a302 <__gethex+0x2c6>
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d117      	bne.n	800a2e8 <__gethex+0x2ac>
 800a2b8:	9b00      	ldr	r3, [sp, #0]
 800a2ba:	42b3      	cmp	r3, r6
 800a2bc:	d114      	bne.n	800a2e8 <__gethex+0x2ac>
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d10b      	bne.n	800a2da <__gethex+0x29e>
 800a2c2:	9b01      	ldr	r3, [sp, #4]
 800a2c4:	9a07      	ldr	r2, [sp, #28]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	2662      	movs	r6, #98	; 0x62
 800a2ca:	6013      	str	r3, [r2, #0]
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	9a02      	ldr	r2, [sp, #8]
 800a2d0:	612b      	str	r3, [r5, #16]
 800a2d2:	6013      	str	r3, [r2, #0]
 800a2d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2d6:	601d      	str	r5, [r3, #0]
 800a2d8:	e739      	b.n	800a14e <__gethex+0x112>
 800a2da:	9900      	ldr	r1, [sp, #0]
 800a2dc:	0028      	movs	r0, r5
 800a2de:	3901      	subs	r1, #1
 800a2e0:	f7fe fcc0 	bl	8008c64 <__any_on>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d1ec      	bne.n	800a2c2 <__gethex+0x286>
 800a2e8:	0029      	movs	r1, r5
 800a2ea:	9803      	ldr	r0, [sp, #12]
 800a2ec:	f7fe f866 	bl	80083bc <_Bfree>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2f4:	2650      	movs	r6, #80	; 0x50
 800a2f6:	6013      	str	r3, [r2, #0]
 800a2f8:	e729      	b.n	800a14e <__gethex+0x112>
 800a2fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1f3      	bne.n	800a2e8 <__gethex+0x2ac>
 800a300:	e7df      	b.n	800a2c2 <__gethex+0x286>
 800a302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1dc      	bne.n	800a2c2 <__gethex+0x286>
 800a308:	e7ee      	b.n	800a2e8 <__gethex+0x2ac>
 800a30a:	46c0      	nop			; (mov r8, r8)
 800a30c:	0800affc 	.word	0x0800affc
 800a310:	0800ae95 	.word	0x0800ae95
 800a314:	0800b1a6 	.word	0x0800b1a6
 800a318:	1e77      	subs	r7, r6, #1
 800a31a:	2c00      	cmp	r4, #0
 800a31c:	d12f      	bne.n	800a37e <__gethex+0x342>
 800a31e:	2f00      	cmp	r7, #0
 800a320:	d004      	beq.n	800a32c <__gethex+0x2f0>
 800a322:	0039      	movs	r1, r7
 800a324:	0028      	movs	r0, r5
 800a326:	f7fe fc9d 	bl	8008c64 <__any_on>
 800a32a:	0004      	movs	r4, r0
 800a32c:	231f      	movs	r3, #31
 800a32e:	117a      	asrs	r2, r7, #5
 800a330:	401f      	ands	r7, r3
 800a332:	3b1e      	subs	r3, #30
 800a334:	40bb      	lsls	r3, r7
 800a336:	9902      	ldr	r1, [sp, #8]
 800a338:	0092      	lsls	r2, r2, #2
 800a33a:	5852      	ldr	r2, [r2, r1]
 800a33c:	421a      	tst	r2, r3
 800a33e:	d001      	beq.n	800a344 <__gethex+0x308>
 800a340:	2302      	movs	r3, #2
 800a342:	431c      	orrs	r4, r3
 800a344:	9b00      	ldr	r3, [sp, #0]
 800a346:	0031      	movs	r1, r6
 800a348:	1b9b      	subs	r3, r3, r6
 800a34a:	2602      	movs	r6, #2
 800a34c:	0028      	movs	r0, r5
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	f7ff fe09 	bl	8009f66 <rshift>
 800a354:	9b01      	ldr	r3, [sp, #4]
 800a356:	685f      	ldr	r7, [r3, #4]
 800a358:	2c00      	cmp	r4, #0
 800a35a:	d041      	beq.n	800a3e0 <__gethex+0x3a4>
 800a35c:	9b01      	ldr	r3, [sp, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	2b02      	cmp	r3, #2
 800a362:	d010      	beq.n	800a386 <__gethex+0x34a>
 800a364:	2b03      	cmp	r3, #3
 800a366:	d012      	beq.n	800a38e <__gethex+0x352>
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d106      	bne.n	800a37a <__gethex+0x33e>
 800a36c:	07a2      	lsls	r2, r4, #30
 800a36e:	d504      	bpl.n	800a37a <__gethex+0x33e>
 800a370:	9a02      	ldr	r2, [sp, #8]
 800a372:	6812      	ldr	r2, [r2, #0]
 800a374:	4314      	orrs	r4, r2
 800a376:	421c      	tst	r4, r3
 800a378:	d10c      	bne.n	800a394 <__gethex+0x358>
 800a37a:	2310      	movs	r3, #16
 800a37c:	e02f      	b.n	800a3de <__gethex+0x3a2>
 800a37e:	2401      	movs	r4, #1
 800a380:	e7d4      	b.n	800a32c <__gethex+0x2f0>
 800a382:	2601      	movs	r6, #1
 800a384:	e7e8      	b.n	800a358 <__gethex+0x31c>
 800a386:	2301      	movs	r3, #1
 800a388:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a38a:	1a9b      	subs	r3, r3, r2
 800a38c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a38e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0f2      	beq.n	800a37a <__gethex+0x33e>
 800a394:	692b      	ldr	r3, [r5, #16]
 800a396:	2000      	movs	r0, #0
 800a398:	9302      	str	r3, [sp, #8]
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	9304      	str	r3, [sp, #16]
 800a39e:	002b      	movs	r3, r5
 800a3a0:	9a04      	ldr	r2, [sp, #16]
 800a3a2:	3314      	adds	r3, #20
 800a3a4:	1899      	adds	r1, r3, r2
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	1c54      	adds	r4, r2, #1
 800a3aa:	d01e      	beq.n	800a3ea <__gethex+0x3ae>
 800a3ac:	3201      	adds	r2, #1
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	002b      	movs	r3, r5
 800a3b2:	3314      	adds	r3, #20
 800a3b4:	2e02      	cmp	r6, #2
 800a3b6:	d141      	bne.n	800a43c <__gethex+0x400>
 800a3b8:	9a01      	ldr	r2, [sp, #4]
 800a3ba:	9900      	ldr	r1, [sp, #0]
 800a3bc:	6812      	ldr	r2, [r2, #0]
 800a3be:	3a01      	subs	r2, #1
 800a3c0:	428a      	cmp	r2, r1
 800a3c2:	d10b      	bne.n	800a3dc <__gethex+0x3a0>
 800a3c4:	221f      	movs	r2, #31
 800a3c6:	9800      	ldr	r0, [sp, #0]
 800a3c8:	1149      	asrs	r1, r1, #5
 800a3ca:	4002      	ands	r2, r0
 800a3cc:	2001      	movs	r0, #1
 800a3ce:	0004      	movs	r4, r0
 800a3d0:	4094      	lsls	r4, r2
 800a3d2:	0089      	lsls	r1, r1, #2
 800a3d4:	58cb      	ldr	r3, [r1, r3]
 800a3d6:	4223      	tst	r3, r4
 800a3d8:	d000      	beq.n	800a3dc <__gethex+0x3a0>
 800a3da:	2601      	movs	r6, #1
 800a3dc:	2320      	movs	r3, #32
 800a3de:	431e      	orrs	r6, r3
 800a3e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3e2:	601d      	str	r5, [r3, #0]
 800a3e4:	9b07      	ldr	r3, [sp, #28]
 800a3e6:	601f      	str	r7, [r3, #0]
 800a3e8:	e6b1      	b.n	800a14e <__gethex+0x112>
 800a3ea:	c301      	stmia	r3!, {r0}
 800a3ec:	4299      	cmp	r1, r3
 800a3ee:	d8da      	bhi.n	800a3a6 <__gethex+0x36a>
 800a3f0:	68ab      	ldr	r3, [r5, #8]
 800a3f2:	9a02      	ldr	r2, [sp, #8]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	db18      	blt.n	800a42a <__gethex+0x3ee>
 800a3f8:	6869      	ldr	r1, [r5, #4]
 800a3fa:	9803      	ldr	r0, [sp, #12]
 800a3fc:	3101      	adds	r1, #1
 800a3fe:	f7fd ff99 	bl	8008334 <_Balloc>
 800a402:	1e04      	subs	r4, r0, #0
 800a404:	d104      	bne.n	800a410 <__gethex+0x3d4>
 800a406:	0022      	movs	r2, r4
 800a408:	2184      	movs	r1, #132	; 0x84
 800a40a:	4b1c      	ldr	r3, [pc, #112]	; (800a47c <__gethex+0x440>)
 800a40c:	481c      	ldr	r0, [pc, #112]	; (800a480 <__gethex+0x444>)
 800a40e:	e6c2      	b.n	800a196 <__gethex+0x15a>
 800a410:	0029      	movs	r1, r5
 800a412:	692a      	ldr	r2, [r5, #16]
 800a414:	310c      	adds	r1, #12
 800a416:	3202      	adds	r2, #2
 800a418:	0092      	lsls	r2, r2, #2
 800a41a:	300c      	adds	r0, #12
 800a41c:	f7ff fd48 	bl	8009eb0 <memcpy>
 800a420:	0029      	movs	r1, r5
 800a422:	9803      	ldr	r0, [sp, #12]
 800a424:	f7fd ffca 	bl	80083bc <_Bfree>
 800a428:	0025      	movs	r5, r4
 800a42a:	692b      	ldr	r3, [r5, #16]
 800a42c:	1c5a      	adds	r2, r3, #1
 800a42e:	612a      	str	r2, [r5, #16]
 800a430:	2201      	movs	r2, #1
 800a432:	3304      	adds	r3, #4
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	18eb      	adds	r3, r5, r3
 800a438:	605a      	str	r2, [r3, #4]
 800a43a:	e7b9      	b.n	800a3b0 <__gethex+0x374>
 800a43c:	692a      	ldr	r2, [r5, #16]
 800a43e:	9902      	ldr	r1, [sp, #8]
 800a440:	428a      	cmp	r2, r1
 800a442:	dd09      	ble.n	800a458 <__gethex+0x41c>
 800a444:	2101      	movs	r1, #1
 800a446:	0028      	movs	r0, r5
 800a448:	f7ff fd8d 	bl	8009f66 <rshift>
 800a44c:	9b01      	ldr	r3, [sp, #4]
 800a44e:	3701      	adds	r7, #1
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	42bb      	cmp	r3, r7
 800a454:	dac1      	bge.n	800a3da <__gethex+0x39e>
 800a456:	e6e4      	b.n	800a222 <__gethex+0x1e6>
 800a458:	221f      	movs	r2, #31
 800a45a:	9c00      	ldr	r4, [sp, #0]
 800a45c:	9900      	ldr	r1, [sp, #0]
 800a45e:	2601      	movs	r6, #1
 800a460:	4014      	ands	r4, r2
 800a462:	4211      	tst	r1, r2
 800a464:	d0ba      	beq.n	800a3dc <__gethex+0x3a0>
 800a466:	9a04      	ldr	r2, [sp, #16]
 800a468:	189b      	adds	r3, r3, r2
 800a46a:	3b04      	subs	r3, #4
 800a46c:	6818      	ldr	r0, [r3, #0]
 800a46e:	f7fe f859 	bl	8008524 <__hi0bits>
 800a472:	2320      	movs	r3, #32
 800a474:	1b1b      	subs	r3, r3, r4
 800a476:	4298      	cmp	r0, r3
 800a478:	dbe4      	blt.n	800a444 <__gethex+0x408>
 800a47a:	e7af      	b.n	800a3dc <__gethex+0x3a0>
 800a47c:	0800ae95 	.word	0x0800ae95
 800a480:	0800b1a6 	.word	0x0800b1a6

0800a484 <L_shift>:
 800a484:	2308      	movs	r3, #8
 800a486:	b570      	push	{r4, r5, r6, lr}
 800a488:	2520      	movs	r5, #32
 800a48a:	1a9a      	subs	r2, r3, r2
 800a48c:	0092      	lsls	r2, r2, #2
 800a48e:	1aad      	subs	r5, r5, r2
 800a490:	6843      	ldr	r3, [r0, #4]
 800a492:	6804      	ldr	r4, [r0, #0]
 800a494:	001e      	movs	r6, r3
 800a496:	40ae      	lsls	r6, r5
 800a498:	40d3      	lsrs	r3, r2
 800a49a:	4334      	orrs	r4, r6
 800a49c:	6004      	str	r4, [r0, #0]
 800a49e:	6043      	str	r3, [r0, #4]
 800a4a0:	3004      	adds	r0, #4
 800a4a2:	4288      	cmp	r0, r1
 800a4a4:	d3f4      	bcc.n	800a490 <L_shift+0xc>
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}

0800a4a8 <__match>:
 800a4a8:	b530      	push	{r4, r5, lr}
 800a4aa:	6803      	ldr	r3, [r0, #0]
 800a4ac:	780c      	ldrb	r4, [r1, #0]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	2c00      	cmp	r4, #0
 800a4b2:	d102      	bne.n	800a4ba <__match+0x12>
 800a4b4:	6003      	str	r3, [r0, #0]
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	bd30      	pop	{r4, r5, pc}
 800a4ba:	781a      	ldrb	r2, [r3, #0]
 800a4bc:	0015      	movs	r5, r2
 800a4be:	3d41      	subs	r5, #65	; 0x41
 800a4c0:	2d19      	cmp	r5, #25
 800a4c2:	d800      	bhi.n	800a4c6 <__match+0x1e>
 800a4c4:	3220      	adds	r2, #32
 800a4c6:	3101      	adds	r1, #1
 800a4c8:	42a2      	cmp	r2, r4
 800a4ca:	d0ef      	beq.n	800a4ac <__match+0x4>
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	e7f3      	b.n	800a4b8 <__match+0x10>

0800a4d0 <__hexnan>:
 800a4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4d2:	680b      	ldr	r3, [r1, #0]
 800a4d4:	b08b      	sub	sp, #44	; 0x2c
 800a4d6:	9201      	str	r2, [sp, #4]
 800a4d8:	9901      	ldr	r1, [sp, #4]
 800a4da:	115a      	asrs	r2, r3, #5
 800a4dc:	0092      	lsls	r2, r2, #2
 800a4de:	188a      	adds	r2, r1, r2
 800a4e0:	9202      	str	r2, [sp, #8]
 800a4e2:	0019      	movs	r1, r3
 800a4e4:	221f      	movs	r2, #31
 800a4e6:	4011      	ands	r1, r2
 800a4e8:	9008      	str	r0, [sp, #32]
 800a4ea:	9106      	str	r1, [sp, #24]
 800a4ec:	4213      	tst	r3, r2
 800a4ee:	d002      	beq.n	800a4f6 <__hexnan+0x26>
 800a4f0:	9b02      	ldr	r3, [sp, #8]
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	9302      	str	r3, [sp, #8]
 800a4f6:	9b02      	ldr	r3, [sp, #8]
 800a4f8:	2500      	movs	r5, #0
 800a4fa:	1f1f      	subs	r7, r3, #4
 800a4fc:	003e      	movs	r6, r7
 800a4fe:	003c      	movs	r4, r7
 800a500:	9b08      	ldr	r3, [sp, #32]
 800a502:	603d      	str	r5, [r7, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	9507      	str	r5, [sp, #28]
 800a508:	9305      	str	r3, [sp, #20]
 800a50a:	9503      	str	r5, [sp, #12]
 800a50c:	9b05      	ldr	r3, [sp, #20]
 800a50e:	3301      	adds	r3, #1
 800a510:	9309      	str	r3, [sp, #36]	; 0x24
 800a512:	9b05      	ldr	r3, [sp, #20]
 800a514:	785b      	ldrb	r3, [r3, #1]
 800a516:	9304      	str	r3, [sp, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d028      	beq.n	800a56e <__hexnan+0x9e>
 800a51c:	9804      	ldr	r0, [sp, #16]
 800a51e:	f7ff fd77 	bl	800a010 <__hexdig_fun>
 800a522:	2800      	cmp	r0, #0
 800a524:	d154      	bne.n	800a5d0 <__hexnan+0x100>
 800a526:	9b04      	ldr	r3, [sp, #16]
 800a528:	2b20      	cmp	r3, #32
 800a52a:	d819      	bhi.n	800a560 <__hexnan+0x90>
 800a52c:	9b03      	ldr	r3, [sp, #12]
 800a52e:	9a07      	ldr	r2, [sp, #28]
 800a530:	4293      	cmp	r3, r2
 800a532:	dd12      	ble.n	800a55a <__hexnan+0x8a>
 800a534:	42b4      	cmp	r4, r6
 800a536:	d206      	bcs.n	800a546 <__hexnan+0x76>
 800a538:	2d07      	cmp	r5, #7
 800a53a:	dc04      	bgt.n	800a546 <__hexnan+0x76>
 800a53c:	002a      	movs	r2, r5
 800a53e:	0031      	movs	r1, r6
 800a540:	0020      	movs	r0, r4
 800a542:	f7ff ff9f 	bl	800a484 <L_shift>
 800a546:	9b01      	ldr	r3, [sp, #4]
 800a548:	2508      	movs	r5, #8
 800a54a:	429c      	cmp	r4, r3
 800a54c:	d905      	bls.n	800a55a <__hexnan+0x8a>
 800a54e:	1f26      	subs	r6, r4, #4
 800a550:	2500      	movs	r5, #0
 800a552:	0034      	movs	r4, r6
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	6035      	str	r5, [r6, #0]
 800a558:	9307      	str	r3, [sp, #28]
 800a55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a55c:	9305      	str	r3, [sp, #20]
 800a55e:	e7d5      	b.n	800a50c <__hexnan+0x3c>
 800a560:	9b04      	ldr	r3, [sp, #16]
 800a562:	2b29      	cmp	r3, #41	; 0x29
 800a564:	d159      	bne.n	800a61a <__hexnan+0x14a>
 800a566:	9b05      	ldr	r3, [sp, #20]
 800a568:	9a08      	ldr	r2, [sp, #32]
 800a56a:	3302      	adds	r3, #2
 800a56c:	6013      	str	r3, [r2, #0]
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d052      	beq.n	800a61a <__hexnan+0x14a>
 800a574:	42b4      	cmp	r4, r6
 800a576:	d206      	bcs.n	800a586 <__hexnan+0xb6>
 800a578:	2d07      	cmp	r5, #7
 800a57a:	dc04      	bgt.n	800a586 <__hexnan+0xb6>
 800a57c:	002a      	movs	r2, r5
 800a57e:	0031      	movs	r1, r6
 800a580:	0020      	movs	r0, r4
 800a582:	f7ff ff7f 	bl	800a484 <L_shift>
 800a586:	9b01      	ldr	r3, [sp, #4]
 800a588:	429c      	cmp	r4, r3
 800a58a:	d935      	bls.n	800a5f8 <__hexnan+0x128>
 800a58c:	001a      	movs	r2, r3
 800a58e:	0023      	movs	r3, r4
 800a590:	cb02      	ldmia	r3!, {r1}
 800a592:	c202      	stmia	r2!, {r1}
 800a594:	429f      	cmp	r7, r3
 800a596:	d2fb      	bcs.n	800a590 <__hexnan+0xc0>
 800a598:	9b02      	ldr	r3, [sp, #8]
 800a59a:	1c62      	adds	r2, r4, #1
 800a59c:	1ed9      	subs	r1, r3, #3
 800a59e:	2304      	movs	r3, #4
 800a5a0:	4291      	cmp	r1, r2
 800a5a2:	d305      	bcc.n	800a5b0 <__hexnan+0xe0>
 800a5a4:	9b02      	ldr	r3, [sp, #8]
 800a5a6:	3b04      	subs	r3, #4
 800a5a8:	1b1b      	subs	r3, r3, r4
 800a5aa:	089b      	lsrs	r3, r3, #2
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	9a01      	ldr	r2, [sp, #4]
 800a5b2:	18d3      	adds	r3, r2, r3
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	c304      	stmia	r3!, {r2}
 800a5b8:	429f      	cmp	r7, r3
 800a5ba:	d2fc      	bcs.n	800a5b6 <__hexnan+0xe6>
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d104      	bne.n	800a5cc <__hexnan+0xfc>
 800a5c2:	9b01      	ldr	r3, [sp, #4]
 800a5c4:	429f      	cmp	r7, r3
 800a5c6:	d126      	bne.n	800a616 <__hexnan+0x146>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	2005      	movs	r0, #5
 800a5ce:	e025      	b.n	800a61c <__hexnan+0x14c>
 800a5d0:	9b03      	ldr	r3, [sp, #12]
 800a5d2:	3501      	adds	r5, #1
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	9303      	str	r3, [sp, #12]
 800a5d8:	2d08      	cmp	r5, #8
 800a5da:	dd06      	ble.n	800a5ea <__hexnan+0x11a>
 800a5dc:	9b01      	ldr	r3, [sp, #4]
 800a5de:	429c      	cmp	r4, r3
 800a5e0:	d9bb      	bls.n	800a55a <__hexnan+0x8a>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	2501      	movs	r5, #1
 800a5e6:	3c04      	subs	r4, #4
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	220f      	movs	r2, #15
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	4010      	ands	r0, r2
 800a5f0:	011b      	lsls	r3, r3, #4
 800a5f2:	4303      	orrs	r3, r0
 800a5f4:	6023      	str	r3, [r4, #0]
 800a5f6:	e7b0      	b.n	800a55a <__hexnan+0x8a>
 800a5f8:	9b06      	ldr	r3, [sp, #24]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0de      	beq.n	800a5bc <__hexnan+0xec>
 800a5fe:	2320      	movs	r3, #32
 800a600:	9a06      	ldr	r2, [sp, #24]
 800a602:	9902      	ldr	r1, [sp, #8]
 800a604:	1a9b      	subs	r3, r3, r2
 800a606:	2201      	movs	r2, #1
 800a608:	4252      	negs	r2, r2
 800a60a:	40da      	lsrs	r2, r3
 800a60c:	3904      	subs	r1, #4
 800a60e:	680b      	ldr	r3, [r1, #0]
 800a610:	4013      	ands	r3, r2
 800a612:	600b      	str	r3, [r1, #0]
 800a614:	e7d2      	b.n	800a5bc <__hexnan+0xec>
 800a616:	3f04      	subs	r7, #4
 800a618:	e7d0      	b.n	800a5bc <__hexnan+0xec>
 800a61a:	2004      	movs	r0, #4
 800a61c:	b00b      	add	sp, #44	; 0x2c
 800a61e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a620 <__ascii_mbtowc>:
 800a620:	b082      	sub	sp, #8
 800a622:	2900      	cmp	r1, #0
 800a624:	d100      	bne.n	800a628 <__ascii_mbtowc+0x8>
 800a626:	a901      	add	r1, sp, #4
 800a628:	1e10      	subs	r0, r2, #0
 800a62a:	d006      	beq.n	800a63a <__ascii_mbtowc+0x1a>
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d006      	beq.n	800a63e <__ascii_mbtowc+0x1e>
 800a630:	7813      	ldrb	r3, [r2, #0]
 800a632:	600b      	str	r3, [r1, #0]
 800a634:	7810      	ldrb	r0, [r2, #0]
 800a636:	1e43      	subs	r3, r0, #1
 800a638:	4198      	sbcs	r0, r3
 800a63a:	b002      	add	sp, #8
 800a63c:	4770      	bx	lr
 800a63e:	2002      	movs	r0, #2
 800a640:	4240      	negs	r0, r0
 800a642:	e7fa      	b.n	800a63a <__ascii_mbtowc+0x1a>

0800a644 <_realloc_r>:
 800a644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a646:	0007      	movs	r7, r0
 800a648:	000e      	movs	r6, r1
 800a64a:	0014      	movs	r4, r2
 800a64c:	2900      	cmp	r1, #0
 800a64e:	d105      	bne.n	800a65c <_realloc_r+0x18>
 800a650:	0011      	movs	r1, r2
 800a652:	f7fd fddd 	bl	8008210 <_malloc_r>
 800a656:	0005      	movs	r5, r0
 800a658:	0028      	movs	r0, r5
 800a65a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a65c:	2a00      	cmp	r2, #0
 800a65e:	d103      	bne.n	800a668 <_realloc_r+0x24>
 800a660:	f7fd fd60 	bl	8008124 <_free_r>
 800a664:	0025      	movs	r5, r4
 800a666:	e7f7      	b.n	800a658 <_realloc_r+0x14>
 800a668:	f000 f83f 	bl	800a6ea <_malloc_usable_size_r>
 800a66c:	9001      	str	r0, [sp, #4]
 800a66e:	4284      	cmp	r4, r0
 800a670:	d803      	bhi.n	800a67a <_realloc_r+0x36>
 800a672:	0035      	movs	r5, r6
 800a674:	0843      	lsrs	r3, r0, #1
 800a676:	42a3      	cmp	r3, r4
 800a678:	d3ee      	bcc.n	800a658 <_realloc_r+0x14>
 800a67a:	0021      	movs	r1, r4
 800a67c:	0038      	movs	r0, r7
 800a67e:	f7fd fdc7 	bl	8008210 <_malloc_r>
 800a682:	1e05      	subs	r5, r0, #0
 800a684:	d0e8      	beq.n	800a658 <_realloc_r+0x14>
 800a686:	9b01      	ldr	r3, [sp, #4]
 800a688:	0022      	movs	r2, r4
 800a68a:	429c      	cmp	r4, r3
 800a68c:	d900      	bls.n	800a690 <_realloc_r+0x4c>
 800a68e:	001a      	movs	r2, r3
 800a690:	0031      	movs	r1, r6
 800a692:	0028      	movs	r0, r5
 800a694:	f7ff fc0c 	bl	8009eb0 <memcpy>
 800a698:	0031      	movs	r1, r6
 800a69a:	0038      	movs	r0, r7
 800a69c:	f7fd fd42 	bl	8008124 <_free_r>
 800a6a0:	e7da      	b.n	800a658 <_realloc_r+0x14>

0800a6a2 <__ascii_wctomb>:
 800a6a2:	0003      	movs	r3, r0
 800a6a4:	1e08      	subs	r0, r1, #0
 800a6a6:	d005      	beq.n	800a6b4 <__ascii_wctomb+0x12>
 800a6a8:	2aff      	cmp	r2, #255	; 0xff
 800a6aa:	d904      	bls.n	800a6b6 <__ascii_wctomb+0x14>
 800a6ac:	228a      	movs	r2, #138	; 0x8a
 800a6ae:	2001      	movs	r0, #1
 800a6b0:	601a      	str	r2, [r3, #0]
 800a6b2:	4240      	negs	r0, r0
 800a6b4:	4770      	bx	lr
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	700a      	strb	r2, [r1, #0]
 800a6ba:	e7fb      	b.n	800a6b4 <__ascii_wctomb+0x12>

0800a6bc <fiprintf>:
 800a6bc:	b40e      	push	{r1, r2, r3}
 800a6be:	b517      	push	{r0, r1, r2, r4, lr}
 800a6c0:	4c05      	ldr	r4, [pc, #20]	; (800a6d8 <fiprintf+0x1c>)
 800a6c2:	ab05      	add	r3, sp, #20
 800a6c4:	cb04      	ldmia	r3!, {r2}
 800a6c6:	0001      	movs	r1, r0
 800a6c8:	6820      	ldr	r0, [r4, #0]
 800a6ca:	9301      	str	r3, [sp, #4]
 800a6cc:	f000 f83c 	bl	800a748 <_vfiprintf_r>
 800a6d0:	bc1e      	pop	{r1, r2, r3, r4}
 800a6d2:	bc08      	pop	{r3}
 800a6d4:	b003      	add	sp, #12
 800a6d6:	4718      	bx	r3
 800a6d8:	20000064 	.word	0x20000064

0800a6dc <abort>:
 800a6dc:	2006      	movs	r0, #6
 800a6de:	b510      	push	{r4, lr}
 800a6e0:	f000 fa1e 	bl	800ab20 <raise>
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	f7f9 fa4a 	bl	8003b7e <_exit>

0800a6ea <_malloc_usable_size_r>:
 800a6ea:	1f0b      	subs	r3, r1, #4
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	1f18      	subs	r0, r3, #4
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	da01      	bge.n	800a6f8 <_malloc_usable_size_r+0xe>
 800a6f4:	580b      	ldr	r3, [r1, r0]
 800a6f6:	18c0      	adds	r0, r0, r3
 800a6f8:	4770      	bx	lr

0800a6fa <__sfputc_r>:
 800a6fa:	6893      	ldr	r3, [r2, #8]
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	3b01      	subs	r3, #1
 800a700:	6093      	str	r3, [r2, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	da04      	bge.n	800a710 <__sfputc_r+0x16>
 800a706:	6994      	ldr	r4, [r2, #24]
 800a708:	42a3      	cmp	r3, r4
 800a70a:	db07      	blt.n	800a71c <__sfputc_r+0x22>
 800a70c:	290a      	cmp	r1, #10
 800a70e:	d005      	beq.n	800a71c <__sfputc_r+0x22>
 800a710:	6813      	ldr	r3, [r2, #0]
 800a712:	1c58      	adds	r0, r3, #1
 800a714:	6010      	str	r0, [r2, #0]
 800a716:	7019      	strb	r1, [r3, #0]
 800a718:	0008      	movs	r0, r1
 800a71a:	bd10      	pop	{r4, pc}
 800a71c:	f000 f930 	bl	800a980 <__swbuf_r>
 800a720:	0001      	movs	r1, r0
 800a722:	e7f9      	b.n	800a718 <__sfputc_r+0x1e>

0800a724 <__sfputs_r>:
 800a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a726:	0006      	movs	r6, r0
 800a728:	000f      	movs	r7, r1
 800a72a:	0014      	movs	r4, r2
 800a72c:	18d5      	adds	r5, r2, r3
 800a72e:	42ac      	cmp	r4, r5
 800a730:	d101      	bne.n	800a736 <__sfputs_r+0x12>
 800a732:	2000      	movs	r0, #0
 800a734:	e007      	b.n	800a746 <__sfputs_r+0x22>
 800a736:	7821      	ldrb	r1, [r4, #0]
 800a738:	003a      	movs	r2, r7
 800a73a:	0030      	movs	r0, r6
 800a73c:	f7ff ffdd 	bl	800a6fa <__sfputc_r>
 800a740:	3401      	adds	r4, #1
 800a742:	1c43      	adds	r3, r0, #1
 800a744:	d1f3      	bne.n	800a72e <__sfputs_r+0xa>
 800a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a748 <_vfiprintf_r>:
 800a748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74a:	b0a1      	sub	sp, #132	; 0x84
 800a74c:	000f      	movs	r7, r1
 800a74e:	0015      	movs	r5, r2
 800a750:	001e      	movs	r6, r3
 800a752:	9003      	str	r0, [sp, #12]
 800a754:	2800      	cmp	r0, #0
 800a756:	d004      	beq.n	800a762 <_vfiprintf_r+0x1a>
 800a758:	6a03      	ldr	r3, [r0, #32]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <_vfiprintf_r+0x1a>
 800a75e:	f7fc fd0d 	bl	800717c <__sinit>
 800a762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a764:	07db      	lsls	r3, r3, #31
 800a766:	d405      	bmi.n	800a774 <_vfiprintf_r+0x2c>
 800a768:	89bb      	ldrh	r3, [r7, #12]
 800a76a:	059b      	lsls	r3, r3, #22
 800a76c:	d402      	bmi.n	800a774 <_vfiprintf_r+0x2c>
 800a76e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a770:	f7fc fe29 	bl	80073c6 <__retarget_lock_acquire_recursive>
 800a774:	89bb      	ldrh	r3, [r7, #12]
 800a776:	071b      	lsls	r3, r3, #28
 800a778:	d502      	bpl.n	800a780 <_vfiprintf_r+0x38>
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d113      	bne.n	800a7a8 <_vfiprintf_r+0x60>
 800a780:	0039      	movs	r1, r7
 800a782:	9803      	ldr	r0, [sp, #12]
 800a784:	f000 f93e 	bl	800aa04 <__swsetup_r>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d00d      	beq.n	800a7a8 <_vfiprintf_r+0x60>
 800a78c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a78e:	07db      	lsls	r3, r3, #31
 800a790:	d503      	bpl.n	800a79a <_vfiprintf_r+0x52>
 800a792:	2001      	movs	r0, #1
 800a794:	4240      	negs	r0, r0
 800a796:	b021      	add	sp, #132	; 0x84
 800a798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a79a:	89bb      	ldrh	r3, [r7, #12]
 800a79c:	059b      	lsls	r3, r3, #22
 800a79e:	d4f8      	bmi.n	800a792 <_vfiprintf_r+0x4a>
 800a7a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a7a2:	f7fc fe11 	bl	80073c8 <__retarget_lock_release_recursive>
 800a7a6:	e7f4      	b.n	800a792 <_vfiprintf_r+0x4a>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	ac08      	add	r4, sp, #32
 800a7ac:	6163      	str	r3, [r4, #20]
 800a7ae:	3320      	adds	r3, #32
 800a7b0:	7663      	strb	r3, [r4, #25]
 800a7b2:	3310      	adds	r3, #16
 800a7b4:	76a3      	strb	r3, [r4, #26]
 800a7b6:	9607      	str	r6, [sp, #28]
 800a7b8:	002e      	movs	r6, r5
 800a7ba:	7833      	ldrb	r3, [r6, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <_vfiprintf_r+0x7c>
 800a7c0:	2b25      	cmp	r3, #37	; 0x25
 800a7c2:	d148      	bne.n	800a856 <_vfiprintf_r+0x10e>
 800a7c4:	1b73      	subs	r3, r6, r5
 800a7c6:	9305      	str	r3, [sp, #20]
 800a7c8:	42ae      	cmp	r6, r5
 800a7ca:	d00b      	beq.n	800a7e4 <_vfiprintf_r+0x9c>
 800a7cc:	002a      	movs	r2, r5
 800a7ce:	0039      	movs	r1, r7
 800a7d0:	9803      	ldr	r0, [sp, #12]
 800a7d2:	f7ff ffa7 	bl	800a724 <__sfputs_r>
 800a7d6:	3001      	adds	r0, #1
 800a7d8:	d100      	bne.n	800a7dc <_vfiprintf_r+0x94>
 800a7da:	e0af      	b.n	800a93c <_vfiprintf_r+0x1f4>
 800a7dc:	6963      	ldr	r3, [r4, #20]
 800a7de:	9a05      	ldr	r2, [sp, #20]
 800a7e0:	189b      	adds	r3, r3, r2
 800a7e2:	6163      	str	r3, [r4, #20]
 800a7e4:	7833      	ldrb	r3, [r6, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d100      	bne.n	800a7ec <_vfiprintf_r+0xa4>
 800a7ea:	e0a7      	b.n	800a93c <_vfiprintf_r+0x1f4>
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	4252      	negs	r2, r2
 800a7f2:	6062      	str	r2, [r4, #4]
 800a7f4:	a904      	add	r1, sp, #16
 800a7f6:	3254      	adds	r2, #84	; 0x54
 800a7f8:	1852      	adds	r2, r2, r1
 800a7fa:	1c75      	adds	r5, r6, #1
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	60e3      	str	r3, [r4, #12]
 800a800:	60a3      	str	r3, [r4, #8]
 800a802:	7013      	strb	r3, [r2, #0]
 800a804:	65a3      	str	r3, [r4, #88]	; 0x58
 800a806:	4b59      	ldr	r3, [pc, #356]	; (800a96c <_vfiprintf_r+0x224>)
 800a808:	2205      	movs	r2, #5
 800a80a:	0018      	movs	r0, r3
 800a80c:	7829      	ldrb	r1, [r5, #0]
 800a80e:	9305      	str	r3, [sp, #20]
 800a810:	f7fc fddb 	bl	80073ca <memchr>
 800a814:	1c6e      	adds	r6, r5, #1
 800a816:	2800      	cmp	r0, #0
 800a818:	d11f      	bne.n	800a85a <_vfiprintf_r+0x112>
 800a81a:	6822      	ldr	r2, [r4, #0]
 800a81c:	06d3      	lsls	r3, r2, #27
 800a81e:	d504      	bpl.n	800a82a <_vfiprintf_r+0xe2>
 800a820:	2353      	movs	r3, #83	; 0x53
 800a822:	a904      	add	r1, sp, #16
 800a824:	185b      	adds	r3, r3, r1
 800a826:	2120      	movs	r1, #32
 800a828:	7019      	strb	r1, [r3, #0]
 800a82a:	0713      	lsls	r3, r2, #28
 800a82c:	d504      	bpl.n	800a838 <_vfiprintf_r+0xf0>
 800a82e:	2353      	movs	r3, #83	; 0x53
 800a830:	a904      	add	r1, sp, #16
 800a832:	185b      	adds	r3, r3, r1
 800a834:	212b      	movs	r1, #43	; 0x2b
 800a836:	7019      	strb	r1, [r3, #0]
 800a838:	782b      	ldrb	r3, [r5, #0]
 800a83a:	2b2a      	cmp	r3, #42	; 0x2a
 800a83c:	d016      	beq.n	800a86c <_vfiprintf_r+0x124>
 800a83e:	002e      	movs	r6, r5
 800a840:	2100      	movs	r1, #0
 800a842:	200a      	movs	r0, #10
 800a844:	68e3      	ldr	r3, [r4, #12]
 800a846:	7832      	ldrb	r2, [r6, #0]
 800a848:	1c75      	adds	r5, r6, #1
 800a84a:	3a30      	subs	r2, #48	; 0x30
 800a84c:	2a09      	cmp	r2, #9
 800a84e:	d94e      	bls.n	800a8ee <_vfiprintf_r+0x1a6>
 800a850:	2900      	cmp	r1, #0
 800a852:	d111      	bne.n	800a878 <_vfiprintf_r+0x130>
 800a854:	e017      	b.n	800a886 <_vfiprintf_r+0x13e>
 800a856:	3601      	adds	r6, #1
 800a858:	e7af      	b.n	800a7ba <_vfiprintf_r+0x72>
 800a85a:	9b05      	ldr	r3, [sp, #20]
 800a85c:	6822      	ldr	r2, [r4, #0]
 800a85e:	1ac0      	subs	r0, r0, r3
 800a860:	2301      	movs	r3, #1
 800a862:	4083      	lsls	r3, r0
 800a864:	4313      	orrs	r3, r2
 800a866:	0035      	movs	r5, r6
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	e7cc      	b.n	800a806 <_vfiprintf_r+0xbe>
 800a86c:	9b07      	ldr	r3, [sp, #28]
 800a86e:	1d19      	adds	r1, r3, #4
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	9107      	str	r1, [sp, #28]
 800a874:	2b00      	cmp	r3, #0
 800a876:	db01      	blt.n	800a87c <_vfiprintf_r+0x134>
 800a878:	930b      	str	r3, [sp, #44]	; 0x2c
 800a87a:	e004      	b.n	800a886 <_vfiprintf_r+0x13e>
 800a87c:	425b      	negs	r3, r3
 800a87e:	60e3      	str	r3, [r4, #12]
 800a880:	2302      	movs	r3, #2
 800a882:	4313      	orrs	r3, r2
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	7833      	ldrb	r3, [r6, #0]
 800a888:	2b2e      	cmp	r3, #46	; 0x2e
 800a88a:	d10a      	bne.n	800a8a2 <_vfiprintf_r+0x15a>
 800a88c:	7873      	ldrb	r3, [r6, #1]
 800a88e:	2b2a      	cmp	r3, #42	; 0x2a
 800a890:	d135      	bne.n	800a8fe <_vfiprintf_r+0x1b6>
 800a892:	9b07      	ldr	r3, [sp, #28]
 800a894:	3602      	adds	r6, #2
 800a896:	1d1a      	adds	r2, r3, #4
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	9207      	str	r2, [sp, #28]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	db2b      	blt.n	800a8f8 <_vfiprintf_r+0x1b0>
 800a8a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a2:	4d33      	ldr	r5, [pc, #204]	; (800a970 <_vfiprintf_r+0x228>)
 800a8a4:	2203      	movs	r2, #3
 800a8a6:	0028      	movs	r0, r5
 800a8a8:	7831      	ldrb	r1, [r6, #0]
 800a8aa:	f7fc fd8e 	bl	80073ca <memchr>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d006      	beq.n	800a8c0 <_vfiprintf_r+0x178>
 800a8b2:	2340      	movs	r3, #64	; 0x40
 800a8b4:	1b40      	subs	r0, r0, r5
 800a8b6:	4083      	lsls	r3, r0
 800a8b8:	6822      	ldr	r2, [r4, #0]
 800a8ba:	3601      	adds	r6, #1
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	6023      	str	r3, [r4, #0]
 800a8c0:	7831      	ldrb	r1, [r6, #0]
 800a8c2:	2206      	movs	r2, #6
 800a8c4:	482b      	ldr	r0, [pc, #172]	; (800a974 <_vfiprintf_r+0x22c>)
 800a8c6:	1c75      	adds	r5, r6, #1
 800a8c8:	7621      	strb	r1, [r4, #24]
 800a8ca:	f7fc fd7e 	bl	80073ca <memchr>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d043      	beq.n	800a95a <_vfiprintf_r+0x212>
 800a8d2:	4b29      	ldr	r3, [pc, #164]	; (800a978 <_vfiprintf_r+0x230>)
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d125      	bne.n	800a924 <_vfiprintf_r+0x1dc>
 800a8d8:	2207      	movs	r2, #7
 800a8da:	9b07      	ldr	r3, [sp, #28]
 800a8dc:	3307      	adds	r3, #7
 800a8de:	4393      	bics	r3, r2
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	9307      	str	r3, [sp, #28]
 800a8e4:	6963      	ldr	r3, [r4, #20]
 800a8e6:	9a04      	ldr	r2, [sp, #16]
 800a8e8:	189b      	adds	r3, r3, r2
 800a8ea:	6163      	str	r3, [r4, #20]
 800a8ec:	e764      	b.n	800a7b8 <_vfiprintf_r+0x70>
 800a8ee:	4343      	muls	r3, r0
 800a8f0:	002e      	movs	r6, r5
 800a8f2:	2101      	movs	r1, #1
 800a8f4:	189b      	adds	r3, r3, r2
 800a8f6:	e7a6      	b.n	800a846 <_vfiprintf_r+0xfe>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	425b      	negs	r3, r3
 800a8fc:	e7d0      	b.n	800a8a0 <_vfiprintf_r+0x158>
 800a8fe:	2300      	movs	r3, #0
 800a900:	200a      	movs	r0, #10
 800a902:	001a      	movs	r2, r3
 800a904:	3601      	adds	r6, #1
 800a906:	6063      	str	r3, [r4, #4]
 800a908:	7831      	ldrb	r1, [r6, #0]
 800a90a:	1c75      	adds	r5, r6, #1
 800a90c:	3930      	subs	r1, #48	; 0x30
 800a90e:	2909      	cmp	r1, #9
 800a910:	d903      	bls.n	800a91a <_vfiprintf_r+0x1d2>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d0c5      	beq.n	800a8a2 <_vfiprintf_r+0x15a>
 800a916:	9209      	str	r2, [sp, #36]	; 0x24
 800a918:	e7c3      	b.n	800a8a2 <_vfiprintf_r+0x15a>
 800a91a:	4342      	muls	r2, r0
 800a91c:	002e      	movs	r6, r5
 800a91e:	2301      	movs	r3, #1
 800a920:	1852      	adds	r2, r2, r1
 800a922:	e7f1      	b.n	800a908 <_vfiprintf_r+0x1c0>
 800a924:	aa07      	add	r2, sp, #28
 800a926:	9200      	str	r2, [sp, #0]
 800a928:	0021      	movs	r1, r4
 800a92a:	003a      	movs	r2, r7
 800a92c:	4b13      	ldr	r3, [pc, #76]	; (800a97c <_vfiprintf_r+0x234>)
 800a92e:	9803      	ldr	r0, [sp, #12]
 800a930:	f7fb fdb6 	bl	80064a0 <_printf_float>
 800a934:	9004      	str	r0, [sp, #16]
 800a936:	9b04      	ldr	r3, [sp, #16]
 800a938:	3301      	adds	r3, #1
 800a93a:	d1d3      	bne.n	800a8e4 <_vfiprintf_r+0x19c>
 800a93c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a93e:	07db      	lsls	r3, r3, #31
 800a940:	d405      	bmi.n	800a94e <_vfiprintf_r+0x206>
 800a942:	89bb      	ldrh	r3, [r7, #12]
 800a944:	059b      	lsls	r3, r3, #22
 800a946:	d402      	bmi.n	800a94e <_vfiprintf_r+0x206>
 800a948:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a94a:	f7fc fd3d 	bl	80073c8 <__retarget_lock_release_recursive>
 800a94e:	89bb      	ldrh	r3, [r7, #12]
 800a950:	065b      	lsls	r3, r3, #25
 800a952:	d500      	bpl.n	800a956 <_vfiprintf_r+0x20e>
 800a954:	e71d      	b.n	800a792 <_vfiprintf_r+0x4a>
 800a956:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a958:	e71d      	b.n	800a796 <_vfiprintf_r+0x4e>
 800a95a:	aa07      	add	r2, sp, #28
 800a95c:	9200      	str	r2, [sp, #0]
 800a95e:	0021      	movs	r1, r4
 800a960:	003a      	movs	r2, r7
 800a962:	4b06      	ldr	r3, [pc, #24]	; (800a97c <_vfiprintf_r+0x234>)
 800a964:	9803      	ldr	r0, [sp, #12]
 800a966:	f7fc f861 	bl	8006a2c <_printf_i>
 800a96a:	e7e3      	b.n	800a934 <_vfiprintf_r+0x1ec>
 800a96c:	0800b151 	.word	0x0800b151
 800a970:	0800b157 	.word	0x0800b157
 800a974:	0800b15b 	.word	0x0800b15b
 800a978:	080064a1 	.word	0x080064a1
 800a97c:	0800a725 	.word	0x0800a725

0800a980 <__swbuf_r>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	0006      	movs	r6, r0
 800a984:	000d      	movs	r5, r1
 800a986:	0014      	movs	r4, r2
 800a988:	2800      	cmp	r0, #0
 800a98a:	d004      	beq.n	800a996 <__swbuf_r+0x16>
 800a98c:	6a03      	ldr	r3, [r0, #32]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <__swbuf_r+0x16>
 800a992:	f7fc fbf3 	bl	800717c <__sinit>
 800a996:	69a3      	ldr	r3, [r4, #24]
 800a998:	60a3      	str	r3, [r4, #8]
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	071b      	lsls	r3, r3, #28
 800a99e:	d528      	bpl.n	800a9f2 <__swbuf_r+0x72>
 800a9a0:	6923      	ldr	r3, [r4, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d025      	beq.n	800a9f2 <__swbuf_r+0x72>
 800a9a6:	6923      	ldr	r3, [r4, #16]
 800a9a8:	6820      	ldr	r0, [r4, #0]
 800a9aa:	b2ef      	uxtb	r7, r5
 800a9ac:	1ac0      	subs	r0, r0, r3
 800a9ae:	6963      	ldr	r3, [r4, #20]
 800a9b0:	b2ed      	uxtb	r5, r5
 800a9b2:	4283      	cmp	r3, r0
 800a9b4:	dc05      	bgt.n	800a9c2 <__swbuf_r+0x42>
 800a9b6:	0021      	movs	r1, r4
 800a9b8:	0030      	movs	r0, r6
 800a9ba:	f7ff fa17 	bl	8009dec <_fflush_r>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d11d      	bne.n	800a9fe <__swbuf_r+0x7e>
 800a9c2:	68a3      	ldr	r3, [r4, #8]
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	60a3      	str	r3, [r4, #8]
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	6022      	str	r2, [r4, #0]
 800a9d0:	701f      	strb	r7, [r3, #0]
 800a9d2:	6963      	ldr	r3, [r4, #20]
 800a9d4:	4283      	cmp	r3, r0
 800a9d6:	d004      	beq.n	800a9e2 <__swbuf_r+0x62>
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	07db      	lsls	r3, r3, #31
 800a9dc:	d507      	bpl.n	800a9ee <__swbuf_r+0x6e>
 800a9de:	2d0a      	cmp	r5, #10
 800a9e0:	d105      	bne.n	800a9ee <__swbuf_r+0x6e>
 800a9e2:	0021      	movs	r1, r4
 800a9e4:	0030      	movs	r0, r6
 800a9e6:	f7ff fa01 	bl	8009dec <_fflush_r>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d107      	bne.n	800a9fe <__swbuf_r+0x7e>
 800a9ee:	0028      	movs	r0, r5
 800a9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9f2:	0021      	movs	r1, r4
 800a9f4:	0030      	movs	r0, r6
 800a9f6:	f000 f805 	bl	800aa04 <__swsetup_r>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d0d3      	beq.n	800a9a6 <__swbuf_r+0x26>
 800a9fe:	2501      	movs	r5, #1
 800aa00:	426d      	negs	r5, r5
 800aa02:	e7f4      	b.n	800a9ee <__swbuf_r+0x6e>

0800aa04 <__swsetup_r>:
 800aa04:	4b30      	ldr	r3, [pc, #192]	; (800aac8 <__swsetup_r+0xc4>)
 800aa06:	b570      	push	{r4, r5, r6, lr}
 800aa08:	0005      	movs	r5, r0
 800aa0a:	6818      	ldr	r0, [r3, #0]
 800aa0c:	000c      	movs	r4, r1
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d004      	beq.n	800aa1c <__swsetup_r+0x18>
 800aa12:	6a03      	ldr	r3, [r0, #32]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <__swsetup_r+0x18>
 800aa18:	f7fc fbb0 	bl	800717c <__sinit>
 800aa1c:	230c      	movs	r3, #12
 800aa1e:	5ee2      	ldrsh	r2, [r4, r3]
 800aa20:	b293      	uxth	r3, r2
 800aa22:	0711      	lsls	r1, r2, #28
 800aa24:	d423      	bmi.n	800aa6e <__swsetup_r+0x6a>
 800aa26:	06d9      	lsls	r1, r3, #27
 800aa28:	d407      	bmi.n	800aa3a <__swsetup_r+0x36>
 800aa2a:	2309      	movs	r3, #9
 800aa2c:	2001      	movs	r0, #1
 800aa2e:	602b      	str	r3, [r5, #0]
 800aa30:	3337      	adds	r3, #55	; 0x37
 800aa32:	4313      	orrs	r3, r2
 800aa34:	81a3      	strh	r3, [r4, #12]
 800aa36:	4240      	negs	r0, r0
 800aa38:	bd70      	pop	{r4, r5, r6, pc}
 800aa3a:	075b      	lsls	r3, r3, #29
 800aa3c:	d513      	bpl.n	800aa66 <__swsetup_r+0x62>
 800aa3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa40:	2900      	cmp	r1, #0
 800aa42:	d008      	beq.n	800aa56 <__swsetup_r+0x52>
 800aa44:	0023      	movs	r3, r4
 800aa46:	3344      	adds	r3, #68	; 0x44
 800aa48:	4299      	cmp	r1, r3
 800aa4a:	d002      	beq.n	800aa52 <__swsetup_r+0x4e>
 800aa4c:	0028      	movs	r0, r5
 800aa4e:	f7fd fb69 	bl	8008124 <_free_r>
 800aa52:	2300      	movs	r3, #0
 800aa54:	6363      	str	r3, [r4, #52]	; 0x34
 800aa56:	2224      	movs	r2, #36	; 0x24
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	4393      	bics	r3, r2
 800aa5c:	81a3      	strh	r3, [r4, #12]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	6063      	str	r3, [r4, #4]
 800aa62:	6923      	ldr	r3, [r4, #16]
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	2308      	movs	r3, #8
 800aa68:	89a2      	ldrh	r2, [r4, #12]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	81a3      	strh	r3, [r4, #12]
 800aa6e:	6923      	ldr	r3, [r4, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10b      	bne.n	800aa8c <__swsetup_r+0x88>
 800aa74:	21a0      	movs	r1, #160	; 0xa0
 800aa76:	2280      	movs	r2, #128	; 0x80
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	0089      	lsls	r1, r1, #2
 800aa7c:	0092      	lsls	r2, r2, #2
 800aa7e:	400b      	ands	r3, r1
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d003      	beq.n	800aa8c <__swsetup_r+0x88>
 800aa84:	0021      	movs	r1, r4
 800aa86:	0028      	movs	r0, r5
 800aa88:	f000 f892 	bl	800abb0 <__smakebuf_r>
 800aa8c:	220c      	movs	r2, #12
 800aa8e:	5ea3      	ldrsh	r3, [r4, r2]
 800aa90:	2001      	movs	r0, #1
 800aa92:	001a      	movs	r2, r3
 800aa94:	b299      	uxth	r1, r3
 800aa96:	4002      	ands	r2, r0
 800aa98:	4203      	tst	r3, r0
 800aa9a:	d00f      	beq.n	800aabc <__swsetup_r+0xb8>
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	60a2      	str	r2, [r4, #8]
 800aaa0:	6962      	ldr	r2, [r4, #20]
 800aaa2:	4252      	negs	r2, r2
 800aaa4:	61a2      	str	r2, [r4, #24]
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	6922      	ldr	r2, [r4, #16]
 800aaaa:	4282      	cmp	r2, r0
 800aaac:	d1c4      	bne.n	800aa38 <__swsetup_r+0x34>
 800aaae:	0609      	lsls	r1, r1, #24
 800aab0:	d5c2      	bpl.n	800aa38 <__swsetup_r+0x34>
 800aab2:	2240      	movs	r2, #64	; 0x40
 800aab4:	4313      	orrs	r3, r2
 800aab6:	81a3      	strh	r3, [r4, #12]
 800aab8:	3801      	subs	r0, #1
 800aaba:	e7bd      	b.n	800aa38 <__swsetup_r+0x34>
 800aabc:	0788      	lsls	r0, r1, #30
 800aabe:	d400      	bmi.n	800aac2 <__swsetup_r+0xbe>
 800aac0:	6962      	ldr	r2, [r4, #20]
 800aac2:	60a2      	str	r2, [r4, #8]
 800aac4:	e7ef      	b.n	800aaa6 <__swsetup_r+0xa2>
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	20000064 	.word	0x20000064

0800aacc <_raise_r>:
 800aacc:	b570      	push	{r4, r5, r6, lr}
 800aace:	0004      	movs	r4, r0
 800aad0:	000d      	movs	r5, r1
 800aad2:	291f      	cmp	r1, #31
 800aad4:	d904      	bls.n	800aae0 <_raise_r+0x14>
 800aad6:	2316      	movs	r3, #22
 800aad8:	6003      	str	r3, [r0, #0]
 800aada:	2001      	movs	r0, #1
 800aadc:	4240      	negs	r0, r0
 800aade:	bd70      	pop	{r4, r5, r6, pc}
 800aae0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d004      	beq.n	800aaf0 <_raise_r+0x24>
 800aae6:	008a      	lsls	r2, r1, #2
 800aae8:	189b      	adds	r3, r3, r2
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	2a00      	cmp	r2, #0
 800aaee:	d108      	bne.n	800ab02 <_raise_r+0x36>
 800aaf0:	0020      	movs	r0, r4
 800aaf2:	f000 f831 	bl	800ab58 <_getpid_r>
 800aaf6:	002a      	movs	r2, r5
 800aaf8:	0001      	movs	r1, r0
 800aafa:	0020      	movs	r0, r4
 800aafc:	f000 f81a 	bl	800ab34 <_kill_r>
 800ab00:	e7ed      	b.n	800aade <_raise_r+0x12>
 800ab02:	2000      	movs	r0, #0
 800ab04:	2a01      	cmp	r2, #1
 800ab06:	d0ea      	beq.n	800aade <_raise_r+0x12>
 800ab08:	1c51      	adds	r1, r2, #1
 800ab0a:	d103      	bne.n	800ab14 <_raise_r+0x48>
 800ab0c:	2316      	movs	r3, #22
 800ab0e:	3001      	adds	r0, #1
 800ab10:	6023      	str	r3, [r4, #0]
 800ab12:	e7e4      	b.n	800aade <_raise_r+0x12>
 800ab14:	2400      	movs	r4, #0
 800ab16:	0028      	movs	r0, r5
 800ab18:	601c      	str	r4, [r3, #0]
 800ab1a:	4790      	blx	r2
 800ab1c:	0020      	movs	r0, r4
 800ab1e:	e7de      	b.n	800aade <_raise_r+0x12>

0800ab20 <raise>:
 800ab20:	b510      	push	{r4, lr}
 800ab22:	4b03      	ldr	r3, [pc, #12]	; (800ab30 <raise+0x10>)
 800ab24:	0001      	movs	r1, r0
 800ab26:	6818      	ldr	r0, [r3, #0]
 800ab28:	f7ff ffd0 	bl	800aacc <_raise_r>
 800ab2c:	bd10      	pop	{r4, pc}
 800ab2e:	46c0      	nop			; (mov r8, r8)
 800ab30:	20000064 	.word	0x20000064

0800ab34 <_kill_r>:
 800ab34:	2300      	movs	r3, #0
 800ab36:	b570      	push	{r4, r5, r6, lr}
 800ab38:	4d06      	ldr	r5, [pc, #24]	; (800ab54 <_kill_r+0x20>)
 800ab3a:	0004      	movs	r4, r0
 800ab3c:	0008      	movs	r0, r1
 800ab3e:	0011      	movs	r1, r2
 800ab40:	602b      	str	r3, [r5, #0]
 800ab42:	f7f9 f80c 	bl	8003b5e <_kill>
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	d103      	bne.n	800ab52 <_kill_r+0x1e>
 800ab4a:	682b      	ldr	r3, [r5, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d000      	beq.n	800ab52 <_kill_r+0x1e>
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	20000448 	.word	0x20000448

0800ab58 <_getpid_r>:
 800ab58:	b510      	push	{r4, lr}
 800ab5a:	f7f8 fffa 	bl	8003b52 <_getpid>
 800ab5e:	bd10      	pop	{r4, pc}

0800ab60 <__swhatbuf_r>:
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	000e      	movs	r6, r1
 800ab64:	001d      	movs	r5, r3
 800ab66:	230e      	movs	r3, #14
 800ab68:	5ec9      	ldrsh	r1, [r1, r3]
 800ab6a:	0014      	movs	r4, r2
 800ab6c:	b096      	sub	sp, #88	; 0x58
 800ab6e:	2900      	cmp	r1, #0
 800ab70:	da0c      	bge.n	800ab8c <__swhatbuf_r+0x2c>
 800ab72:	89b2      	ldrh	r2, [r6, #12]
 800ab74:	2380      	movs	r3, #128	; 0x80
 800ab76:	0011      	movs	r1, r2
 800ab78:	4019      	ands	r1, r3
 800ab7a:	421a      	tst	r2, r3
 800ab7c:	d013      	beq.n	800aba6 <__swhatbuf_r+0x46>
 800ab7e:	2100      	movs	r1, #0
 800ab80:	3b40      	subs	r3, #64	; 0x40
 800ab82:	2000      	movs	r0, #0
 800ab84:	6029      	str	r1, [r5, #0]
 800ab86:	6023      	str	r3, [r4, #0]
 800ab88:	b016      	add	sp, #88	; 0x58
 800ab8a:	bd70      	pop	{r4, r5, r6, pc}
 800ab8c:	466a      	mov	r2, sp
 800ab8e:	f000 f84d 	bl	800ac2c <_fstat_r>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	dbed      	blt.n	800ab72 <__swhatbuf_r+0x12>
 800ab96:	23f0      	movs	r3, #240	; 0xf0
 800ab98:	9901      	ldr	r1, [sp, #4]
 800ab9a:	021b      	lsls	r3, r3, #8
 800ab9c:	4019      	ands	r1, r3
 800ab9e:	4b03      	ldr	r3, [pc, #12]	; (800abac <__swhatbuf_r+0x4c>)
 800aba0:	18c9      	adds	r1, r1, r3
 800aba2:	424b      	negs	r3, r1
 800aba4:	4159      	adcs	r1, r3
 800aba6:	2380      	movs	r3, #128	; 0x80
 800aba8:	00db      	lsls	r3, r3, #3
 800abaa:	e7ea      	b.n	800ab82 <__swhatbuf_r+0x22>
 800abac:	ffffe000 	.word	0xffffe000

0800abb0 <__smakebuf_r>:
 800abb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abb2:	2602      	movs	r6, #2
 800abb4:	898b      	ldrh	r3, [r1, #12]
 800abb6:	0005      	movs	r5, r0
 800abb8:	000c      	movs	r4, r1
 800abba:	4233      	tst	r3, r6
 800abbc:	d006      	beq.n	800abcc <__smakebuf_r+0x1c>
 800abbe:	0023      	movs	r3, r4
 800abc0:	3347      	adds	r3, #71	; 0x47
 800abc2:	6023      	str	r3, [r4, #0]
 800abc4:	6123      	str	r3, [r4, #16]
 800abc6:	2301      	movs	r3, #1
 800abc8:	6163      	str	r3, [r4, #20]
 800abca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800abcc:	466a      	mov	r2, sp
 800abce:	ab01      	add	r3, sp, #4
 800abd0:	f7ff ffc6 	bl	800ab60 <__swhatbuf_r>
 800abd4:	9900      	ldr	r1, [sp, #0]
 800abd6:	0007      	movs	r7, r0
 800abd8:	0028      	movs	r0, r5
 800abda:	f7fd fb19 	bl	8008210 <_malloc_r>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d108      	bne.n	800abf4 <__smakebuf_r+0x44>
 800abe2:	220c      	movs	r2, #12
 800abe4:	5ea3      	ldrsh	r3, [r4, r2]
 800abe6:	059a      	lsls	r2, r3, #22
 800abe8:	d4ef      	bmi.n	800abca <__smakebuf_r+0x1a>
 800abea:	2203      	movs	r2, #3
 800abec:	4393      	bics	r3, r2
 800abee:	431e      	orrs	r6, r3
 800abf0:	81a6      	strh	r6, [r4, #12]
 800abf2:	e7e4      	b.n	800abbe <__smakebuf_r+0xe>
 800abf4:	2380      	movs	r3, #128	; 0x80
 800abf6:	89a2      	ldrh	r2, [r4, #12]
 800abf8:	6020      	str	r0, [r4, #0]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	9b00      	ldr	r3, [sp, #0]
 800ac00:	6120      	str	r0, [r4, #16]
 800ac02:	6163      	str	r3, [r4, #20]
 800ac04:	9b01      	ldr	r3, [sp, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00c      	beq.n	800ac24 <__smakebuf_r+0x74>
 800ac0a:	0028      	movs	r0, r5
 800ac0c:	230e      	movs	r3, #14
 800ac0e:	5ee1      	ldrsh	r1, [r4, r3]
 800ac10:	f000 f81e 	bl	800ac50 <_isatty_r>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d005      	beq.n	800ac24 <__smakebuf_r+0x74>
 800ac18:	2303      	movs	r3, #3
 800ac1a:	89a2      	ldrh	r2, [r4, #12]
 800ac1c:	439a      	bics	r2, r3
 800ac1e:	3b02      	subs	r3, #2
 800ac20:	4313      	orrs	r3, r2
 800ac22:	81a3      	strh	r3, [r4, #12]
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	433b      	orrs	r3, r7
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	e7ce      	b.n	800abca <__smakebuf_r+0x1a>

0800ac2c <_fstat_r>:
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	b570      	push	{r4, r5, r6, lr}
 800ac30:	4d06      	ldr	r5, [pc, #24]	; (800ac4c <_fstat_r+0x20>)
 800ac32:	0004      	movs	r4, r0
 800ac34:	0008      	movs	r0, r1
 800ac36:	0011      	movs	r1, r2
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	f7f8 ffef 	bl	8003c1c <_fstat>
 800ac3e:	1c43      	adds	r3, r0, #1
 800ac40:	d103      	bne.n	800ac4a <_fstat_r+0x1e>
 800ac42:	682b      	ldr	r3, [r5, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d000      	beq.n	800ac4a <_fstat_r+0x1e>
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	20000448 	.word	0x20000448

0800ac50 <_isatty_r>:
 800ac50:	2300      	movs	r3, #0
 800ac52:	b570      	push	{r4, r5, r6, lr}
 800ac54:	4d06      	ldr	r5, [pc, #24]	; (800ac70 <_isatty_r+0x20>)
 800ac56:	0004      	movs	r4, r0
 800ac58:	0008      	movs	r0, r1
 800ac5a:	602b      	str	r3, [r5, #0]
 800ac5c:	f7f8 ffec 	bl	8003c38 <_isatty>
 800ac60:	1c43      	adds	r3, r0, #1
 800ac62:	d103      	bne.n	800ac6c <_isatty_r+0x1c>
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d000      	beq.n	800ac6c <_isatty_r+0x1c>
 800ac6a:	6023      	str	r3, [r4, #0]
 800ac6c:	bd70      	pop	{r4, r5, r6, pc}
 800ac6e:	46c0      	nop			; (mov r8, r8)
 800ac70:	20000448 	.word	0x20000448

0800ac74 <_init>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	46c0      	nop			; (mov r8, r8)
 800ac78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac7a:	bc08      	pop	{r3}
 800ac7c:	469e      	mov	lr, r3
 800ac7e:	4770      	bx	lr

0800ac80 <_fini>:
 800ac80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac82:	46c0      	nop			; (mov r8, r8)
 800ac84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac86:	bc08      	pop	{r3}
 800ac88:	469e      	mov	lr, r3
 800ac8a:	4770      	bx	lr
